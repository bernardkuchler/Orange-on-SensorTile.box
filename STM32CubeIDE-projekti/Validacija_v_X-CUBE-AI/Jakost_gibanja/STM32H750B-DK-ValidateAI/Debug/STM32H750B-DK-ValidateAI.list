
STM32H750B-DK-ValidateAI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014ff4  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001c98  080152a0  080152a0  000252a0  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08016f38  08016f38  00026f38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08016f40  08016f40  00026f40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08016f44  08016f44  00026f44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000008cc  24000000  08016f48  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  240008cc  08017814  000308cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  2400092c  08017874  0003092c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001508  240009a0  080178d4  000309a0  2**5
                  ALLOC
 10 ._user_heap_stack 00001000  20000000  20000000  00040000  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0003098c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0005033a  00000000  00000000  000309ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00009319  00000000  00000000  00080cf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0002b077  00000000  00000000  0008a00d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000023d0  00000000  00000000  000b5088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00003cf8  00000000  00000000  000b7458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00049192  00000000  00000000  000bb150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0004ffcf  00000000  00000000  001042e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001b3fee  00000000  00000000  001542b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0030829f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007ddc  00000000  00000000  003082f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         000000b4  00000000  00000000  003100cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      00000183  00000000  00000000  00310180  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240009a0 	.word	0x240009a0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801527c 	.word	0x0801527c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240009a4 	.word	0x240009a4
 80002dc:	0801527c 	.word	0x0801527c

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_frsub>:
 8000390:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000394:	e002      	b.n	800039c <__addsf3>
 8000396:	bf00      	nop

08000398 <__aeabi_fsub>:
 8000398:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800039c <__addsf3>:
 800039c:	0042      	lsls	r2, r0, #1
 800039e:	bf1f      	itttt	ne
 80003a0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80003a4:	ea92 0f03 	teqne	r2, r3
 80003a8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80003ac:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003b0:	d06a      	beq.n	8000488 <__addsf3+0xec>
 80003b2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80003b6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80003ba:	bfc1      	itttt	gt
 80003bc:	18d2      	addgt	r2, r2, r3
 80003be:	4041      	eorgt	r1, r0
 80003c0:	4048      	eorgt	r0, r1
 80003c2:	4041      	eorgt	r1, r0
 80003c4:	bfb8      	it	lt
 80003c6:	425b      	neglt	r3, r3
 80003c8:	2b19      	cmp	r3, #25
 80003ca:	bf88      	it	hi
 80003cc:	4770      	bxhi	lr
 80003ce:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80003d2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003d6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80003da:	bf18      	it	ne
 80003dc:	4240      	negne	r0, r0
 80003de:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003e2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80003e6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80003ea:	bf18      	it	ne
 80003ec:	4249      	negne	r1, r1
 80003ee:	ea92 0f03 	teq	r2, r3
 80003f2:	d03f      	beq.n	8000474 <__addsf3+0xd8>
 80003f4:	f1a2 0201 	sub.w	r2, r2, #1
 80003f8:	fa41 fc03 	asr.w	ip, r1, r3
 80003fc:	eb10 000c 	adds.w	r0, r0, ip
 8000400:	f1c3 0320 	rsb	r3, r3, #32
 8000404:	fa01 f103 	lsl.w	r1, r1, r3
 8000408:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800040c:	d502      	bpl.n	8000414 <__addsf3+0x78>
 800040e:	4249      	negs	r1, r1
 8000410:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000414:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000418:	d313      	bcc.n	8000442 <__addsf3+0xa6>
 800041a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800041e:	d306      	bcc.n	800042e <__addsf3+0x92>
 8000420:	0840      	lsrs	r0, r0, #1
 8000422:	ea4f 0131 	mov.w	r1, r1, rrx
 8000426:	f102 0201 	add.w	r2, r2, #1
 800042a:	2afe      	cmp	r2, #254	; 0xfe
 800042c:	d251      	bcs.n	80004d2 <__addsf3+0x136>
 800042e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000432:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000436:	bf08      	it	eq
 8000438:	f020 0001 	biceq.w	r0, r0, #1
 800043c:	ea40 0003 	orr.w	r0, r0, r3
 8000440:	4770      	bx	lr
 8000442:	0049      	lsls	r1, r1, #1
 8000444:	eb40 0000 	adc.w	r0, r0, r0
 8000448:	3a01      	subs	r2, #1
 800044a:	bf28      	it	cs
 800044c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000450:	d2ed      	bcs.n	800042e <__addsf3+0x92>
 8000452:	fab0 fc80 	clz	ip, r0
 8000456:	f1ac 0c08 	sub.w	ip, ip, #8
 800045a:	ebb2 020c 	subs.w	r2, r2, ip
 800045e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000462:	bfaa      	itet	ge
 8000464:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000468:	4252      	neglt	r2, r2
 800046a:	4318      	orrge	r0, r3
 800046c:	bfbc      	itt	lt
 800046e:	40d0      	lsrlt	r0, r2
 8000470:	4318      	orrlt	r0, r3
 8000472:	4770      	bx	lr
 8000474:	f092 0f00 	teq	r2, #0
 8000478:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800047c:	bf06      	itte	eq
 800047e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000482:	3201      	addeq	r2, #1
 8000484:	3b01      	subne	r3, #1
 8000486:	e7b5      	b.n	80003f4 <__addsf3+0x58>
 8000488:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800048c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000490:	bf18      	it	ne
 8000492:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000496:	d021      	beq.n	80004dc <__addsf3+0x140>
 8000498:	ea92 0f03 	teq	r2, r3
 800049c:	d004      	beq.n	80004a8 <__addsf3+0x10c>
 800049e:	f092 0f00 	teq	r2, #0
 80004a2:	bf08      	it	eq
 80004a4:	4608      	moveq	r0, r1
 80004a6:	4770      	bx	lr
 80004a8:	ea90 0f01 	teq	r0, r1
 80004ac:	bf1c      	itt	ne
 80004ae:	2000      	movne	r0, #0
 80004b0:	4770      	bxne	lr
 80004b2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80004b6:	d104      	bne.n	80004c2 <__addsf3+0x126>
 80004b8:	0040      	lsls	r0, r0, #1
 80004ba:	bf28      	it	cs
 80004bc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80004c0:	4770      	bx	lr
 80004c2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80004c6:	bf3c      	itt	cc
 80004c8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80004cc:	4770      	bxcc	lr
 80004ce:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80004d2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80004d6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004da:	4770      	bx	lr
 80004dc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80004e0:	bf16      	itet	ne
 80004e2:	4608      	movne	r0, r1
 80004e4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80004e8:	4601      	movne	r1, r0
 80004ea:	0242      	lsls	r2, r0, #9
 80004ec:	bf06      	itte	eq
 80004ee:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80004f2:	ea90 0f01 	teqeq	r0, r1
 80004f6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80004fa:	4770      	bx	lr

080004fc <__aeabi_ui2f>:
 80004fc:	f04f 0300 	mov.w	r3, #0
 8000500:	e004      	b.n	800050c <__aeabi_i2f+0x8>
 8000502:	bf00      	nop

08000504 <__aeabi_i2f>:
 8000504:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000508:	bf48      	it	mi
 800050a:	4240      	negmi	r0, r0
 800050c:	ea5f 0c00 	movs.w	ip, r0
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000518:	4601      	mov	r1, r0
 800051a:	f04f 0000 	mov.w	r0, #0
 800051e:	e01c      	b.n	800055a <__aeabi_l2f+0x2a>

08000520 <__aeabi_ul2f>:
 8000520:	ea50 0201 	orrs.w	r2, r0, r1
 8000524:	bf08      	it	eq
 8000526:	4770      	bxeq	lr
 8000528:	f04f 0300 	mov.w	r3, #0
 800052c:	e00a      	b.n	8000544 <__aeabi_l2f+0x14>
 800052e:	bf00      	nop

08000530 <__aeabi_l2f>:
 8000530:	ea50 0201 	orrs.w	r2, r0, r1
 8000534:	bf08      	it	eq
 8000536:	4770      	bxeq	lr
 8000538:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800053c:	d502      	bpl.n	8000544 <__aeabi_l2f+0x14>
 800053e:	4240      	negs	r0, r0
 8000540:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000544:	ea5f 0c01 	movs.w	ip, r1
 8000548:	bf02      	ittt	eq
 800054a:	4684      	moveq	ip, r0
 800054c:	4601      	moveq	r1, r0
 800054e:	2000      	moveq	r0, #0
 8000550:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000554:	bf08      	it	eq
 8000556:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800055a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800055e:	fabc f28c 	clz	r2, ip
 8000562:	3a08      	subs	r2, #8
 8000564:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000568:	db10      	blt.n	800058c <__aeabi_l2f+0x5c>
 800056a:	fa01 fc02 	lsl.w	ip, r1, r2
 800056e:	4463      	add	r3, ip
 8000570:	fa00 fc02 	lsl.w	ip, r0, r2
 8000574:	f1c2 0220 	rsb	r2, r2, #32
 8000578:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800057c:	fa20 f202 	lsr.w	r2, r0, r2
 8000580:	eb43 0002 	adc.w	r0, r3, r2
 8000584:	bf08      	it	eq
 8000586:	f020 0001 	biceq.w	r0, r0, #1
 800058a:	4770      	bx	lr
 800058c:	f102 0220 	add.w	r2, r2, #32
 8000590:	fa01 fc02 	lsl.w	ip, r1, r2
 8000594:	f1c2 0220 	rsb	r2, r2, #32
 8000598:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800059c:	fa21 f202 	lsr.w	r2, r1, r2
 80005a0:	eb43 0002 	adc.w	r0, r3, r2
 80005a4:	bf08      	it	eq
 80005a6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80005aa:	4770      	bx	lr

080005ac <__aeabi_uldivmod>:
 80005ac:	b953      	cbnz	r3, 80005c4 <__aeabi_uldivmod+0x18>
 80005ae:	b94a      	cbnz	r2, 80005c4 <__aeabi_uldivmod+0x18>
 80005b0:	2900      	cmp	r1, #0
 80005b2:	bf08      	it	eq
 80005b4:	2800      	cmpeq	r0, #0
 80005b6:	bf1c      	itt	ne
 80005b8:	f04f 31ff 	movne.w	r1, #4294967295
 80005bc:	f04f 30ff 	movne.w	r0, #4294967295
 80005c0:	f000 b996 	b.w	80008f0 <__aeabi_idiv0>
 80005c4:	f1ad 0c08 	sub.w	ip, sp, #8
 80005c8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80005cc:	f000 f828 	bl	8000620 <__udivmoddi4>
 80005d0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80005d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80005d8:	b004      	add	sp, #16
 80005da:	4770      	bx	lr
 80005dc:	0000      	movs	r0, r0
	...

080005e0 <__aeabi_d2ulz>:
 80005e0:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000610 <__aeabi_d2ulz+0x30>
 80005e4:	ec41 0b17 	vmov	d7, r0, r1
 80005e8:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000618 <__aeabi_d2ulz+0x38>
 80005ec:	ee27 6b06 	vmul.f64	d6, d7, d6
 80005f0:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80005f4:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80005f8:	eea4 7b45 	vfms.f64	d7, d4, d5
 80005fc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000600:	ee16 1a10 	vmov	r1, s12
 8000604:	ee17 0a90 	vmov	r0, s15
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop
 800060c:	f3af 8000 	nop.w
 8000610:	00000000 	.word	0x00000000
 8000614:	3df00000 	.word	0x3df00000
 8000618:	00000000 	.word	0x00000000
 800061c:	41f00000 	.word	0x41f00000

08000620 <__udivmoddi4>:
 8000620:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000624:	9d08      	ldr	r5, [sp, #32]
 8000626:	4604      	mov	r4, r0
 8000628:	468e      	mov	lr, r1
 800062a:	2b00      	cmp	r3, #0
 800062c:	d14d      	bne.n	80006ca <__udivmoddi4+0xaa>
 800062e:	428a      	cmp	r2, r1
 8000630:	4694      	mov	ip, r2
 8000632:	d969      	bls.n	8000708 <__udivmoddi4+0xe8>
 8000634:	fab2 f282 	clz	r2, r2
 8000638:	b152      	cbz	r2, 8000650 <__udivmoddi4+0x30>
 800063a:	fa01 f302 	lsl.w	r3, r1, r2
 800063e:	f1c2 0120 	rsb	r1, r2, #32
 8000642:	fa20 f101 	lsr.w	r1, r0, r1
 8000646:	fa0c fc02 	lsl.w	ip, ip, r2
 800064a:	ea41 0e03 	orr.w	lr, r1, r3
 800064e:	4094      	lsls	r4, r2
 8000650:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000654:	0c21      	lsrs	r1, r4, #16
 8000656:	fbbe f6f8 	udiv	r6, lr, r8
 800065a:	fa1f f78c 	uxth.w	r7, ip
 800065e:	fb08 e316 	mls	r3, r8, r6, lr
 8000662:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000666:	fb06 f107 	mul.w	r1, r6, r7
 800066a:	4299      	cmp	r1, r3
 800066c:	d90a      	bls.n	8000684 <__udivmoddi4+0x64>
 800066e:	eb1c 0303 	adds.w	r3, ip, r3
 8000672:	f106 30ff 	add.w	r0, r6, #4294967295
 8000676:	f080 811f 	bcs.w	80008b8 <__udivmoddi4+0x298>
 800067a:	4299      	cmp	r1, r3
 800067c:	f240 811c 	bls.w	80008b8 <__udivmoddi4+0x298>
 8000680:	3e02      	subs	r6, #2
 8000682:	4463      	add	r3, ip
 8000684:	1a5b      	subs	r3, r3, r1
 8000686:	b2a4      	uxth	r4, r4
 8000688:	fbb3 f0f8 	udiv	r0, r3, r8
 800068c:	fb08 3310 	mls	r3, r8, r0, r3
 8000690:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000694:	fb00 f707 	mul.w	r7, r0, r7
 8000698:	42a7      	cmp	r7, r4
 800069a:	d90a      	bls.n	80006b2 <__udivmoddi4+0x92>
 800069c:	eb1c 0404 	adds.w	r4, ip, r4
 80006a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80006a4:	f080 810a 	bcs.w	80008bc <__udivmoddi4+0x29c>
 80006a8:	42a7      	cmp	r7, r4
 80006aa:	f240 8107 	bls.w	80008bc <__udivmoddi4+0x29c>
 80006ae:	4464      	add	r4, ip
 80006b0:	3802      	subs	r0, #2
 80006b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80006b6:	1be4      	subs	r4, r4, r7
 80006b8:	2600      	movs	r6, #0
 80006ba:	b11d      	cbz	r5, 80006c4 <__udivmoddi4+0xa4>
 80006bc:	40d4      	lsrs	r4, r2
 80006be:	2300      	movs	r3, #0
 80006c0:	e9c5 4300 	strd	r4, r3, [r5]
 80006c4:	4631      	mov	r1, r6
 80006c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006ca:	428b      	cmp	r3, r1
 80006cc:	d909      	bls.n	80006e2 <__udivmoddi4+0xc2>
 80006ce:	2d00      	cmp	r5, #0
 80006d0:	f000 80ef 	beq.w	80008b2 <__udivmoddi4+0x292>
 80006d4:	2600      	movs	r6, #0
 80006d6:	e9c5 0100 	strd	r0, r1, [r5]
 80006da:	4630      	mov	r0, r6
 80006dc:	4631      	mov	r1, r6
 80006de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006e2:	fab3 f683 	clz	r6, r3
 80006e6:	2e00      	cmp	r6, #0
 80006e8:	d14a      	bne.n	8000780 <__udivmoddi4+0x160>
 80006ea:	428b      	cmp	r3, r1
 80006ec:	d302      	bcc.n	80006f4 <__udivmoddi4+0xd4>
 80006ee:	4282      	cmp	r2, r0
 80006f0:	f200 80f9 	bhi.w	80008e6 <__udivmoddi4+0x2c6>
 80006f4:	1a84      	subs	r4, r0, r2
 80006f6:	eb61 0303 	sbc.w	r3, r1, r3
 80006fa:	2001      	movs	r0, #1
 80006fc:	469e      	mov	lr, r3
 80006fe:	2d00      	cmp	r5, #0
 8000700:	d0e0      	beq.n	80006c4 <__udivmoddi4+0xa4>
 8000702:	e9c5 4e00 	strd	r4, lr, [r5]
 8000706:	e7dd      	b.n	80006c4 <__udivmoddi4+0xa4>
 8000708:	b902      	cbnz	r2, 800070c <__udivmoddi4+0xec>
 800070a:	deff      	udf	#255	; 0xff
 800070c:	fab2 f282 	clz	r2, r2
 8000710:	2a00      	cmp	r2, #0
 8000712:	f040 8092 	bne.w	800083a <__udivmoddi4+0x21a>
 8000716:	eba1 010c 	sub.w	r1, r1, ip
 800071a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800071e:	fa1f fe8c 	uxth.w	lr, ip
 8000722:	2601      	movs	r6, #1
 8000724:	0c20      	lsrs	r0, r4, #16
 8000726:	fbb1 f3f7 	udiv	r3, r1, r7
 800072a:	fb07 1113 	mls	r1, r7, r3, r1
 800072e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000732:	fb0e f003 	mul.w	r0, lr, r3
 8000736:	4288      	cmp	r0, r1
 8000738:	d908      	bls.n	800074c <__udivmoddi4+0x12c>
 800073a:	eb1c 0101 	adds.w	r1, ip, r1
 800073e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000742:	d202      	bcs.n	800074a <__udivmoddi4+0x12a>
 8000744:	4288      	cmp	r0, r1
 8000746:	f200 80cb 	bhi.w	80008e0 <__udivmoddi4+0x2c0>
 800074a:	4643      	mov	r3, r8
 800074c:	1a09      	subs	r1, r1, r0
 800074e:	b2a4      	uxth	r4, r4
 8000750:	fbb1 f0f7 	udiv	r0, r1, r7
 8000754:	fb07 1110 	mls	r1, r7, r0, r1
 8000758:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800075c:	fb0e fe00 	mul.w	lr, lr, r0
 8000760:	45a6      	cmp	lr, r4
 8000762:	d908      	bls.n	8000776 <__udivmoddi4+0x156>
 8000764:	eb1c 0404 	adds.w	r4, ip, r4
 8000768:	f100 31ff 	add.w	r1, r0, #4294967295
 800076c:	d202      	bcs.n	8000774 <__udivmoddi4+0x154>
 800076e:	45a6      	cmp	lr, r4
 8000770:	f200 80bb 	bhi.w	80008ea <__udivmoddi4+0x2ca>
 8000774:	4608      	mov	r0, r1
 8000776:	eba4 040e 	sub.w	r4, r4, lr
 800077a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800077e:	e79c      	b.n	80006ba <__udivmoddi4+0x9a>
 8000780:	f1c6 0720 	rsb	r7, r6, #32
 8000784:	40b3      	lsls	r3, r6
 8000786:	fa22 fc07 	lsr.w	ip, r2, r7
 800078a:	ea4c 0c03 	orr.w	ip, ip, r3
 800078e:	fa20 f407 	lsr.w	r4, r0, r7
 8000792:	fa01 f306 	lsl.w	r3, r1, r6
 8000796:	431c      	orrs	r4, r3
 8000798:	40f9      	lsrs	r1, r7
 800079a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800079e:	fa00 f306 	lsl.w	r3, r0, r6
 80007a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80007a6:	0c20      	lsrs	r0, r4, #16
 80007a8:	fa1f fe8c 	uxth.w	lr, ip
 80007ac:	fb09 1118 	mls	r1, r9, r8, r1
 80007b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80007b4:	fb08 f00e 	mul.w	r0, r8, lr
 80007b8:	4288      	cmp	r0, r1
 80007ba:	fa02 f206 	lsl.w	r2, r2, r6
 80007be:	d90b      	bls.n	80007d8 <__udivmoddi4+0x1b8>
 80007c0:	eb1c 0101 	adds.w	r1, ip, r1
 80007c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80007c8:	f080 8088 	bcs.w	80008dc <__udivmoddi4+0x2bc>
 80007cc:	4288      	cmp	r0, r1
 80007ce:	f240 8085 	bls.w	80008dc <__udivmoddi4+0x2bc>
 80007d2:	f1a8 0802 	sub.w	r8, r8, #2
 80007d6:	4461      	add	r1, ip
 80007d8:	1a09      	subs	r1, r1, r0
 80007da:	b2a4      	uxth	r4, r4
 80007dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80007e0:	fb09 1110 	mls	r1, r9, r0, r1
 80007e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80007e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80007ec:	458e      	cmp	lr, r1
 80007ee:	d908      	bls.n	8000802 <__udivmoddi4+0x1e2>
 80007f0:	eb1c 0101 	adds.w	r1, ip, r1
 80007f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80007f8:	d26c      	bcs.n	80008d4 <__udivmoddi4+0x2b4>
 80007fa:	458e      	cmp	lr, r1
 80007fc:	d96a      	bls.n	80008d4 <__udivmoddi4+0x2b4>
 80007fe:	3802      	subs	r0, #2
 8000800:	4461      	add	r1, ip
 8000802:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000806:	fba0 9402 	umull	r9, r4, r0, r2
 800080a:	eba1 010e 	sub.w	r1, r1, lr
 800080e:	42a1      	cmp	r1, r4
 8000810:	46c8      	mov	r8, r9
 8000812:	46a6      	mov	lr, r4
 8000814:	d356      	bcc.n	80008c4 <__udivmoddi4+0x2a4>
 8000816:	d053      	beq.n	80008c0 <__udivmoddi4+0x2a0>
 8000818:	b15d      	cbz	r5, 8000832 <__udivmoddi4+0x212>
 800081a:	ebb3 0208 	subs.w	r2, r3, r8
 800081e:	eb61 010e 	sbc.w	r1, r1, lr
 8000822:	fa01 f707 	lsl.w	r7, r1, r7
 8000826:	fa22 f306 	lsr.w	r3, r2, r6
 800082a:	40f1      	lsrs	r1, r6
 800082c:	431f      	orrs	r7, r3
 800082e:	e9c5 7100 	strd	r7, r1, [r5]
 8000832:	2600      	movs	r6, #0
 8000834:	4631      	mov	r1, r6
 8000836:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800083a:	f1c2 0320 	rsb	r3, r2, #32
 800083e:	40d8      	lsrs	r0, r3
 8000840:	fa0c fc02 	lsl.w	ip, ip, r2
 8000844:	fa21 f303 	lsr.w	r3, r1, r3
 8000848:	4091      	lsls	r1, r2
 800084a:	4301      	orrs	r1, r0
 800084c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000850:	fa1f fe8c 	uxth.w	lr, ip
 8000854:	fbb3 f0f7 	udiv	r0, r3, r7
 8000858:	fb07 3610 	mls	r6, r7, r0, r3
 800085c:	0c0b      	lsrs	r3, r1, #16
 800085e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000862:	fb00 f60e 	mul.w	r6, r0, lr
 8000866:	429e      	cmp	r6, r3
 8000868:	fa04 f402 	lsl.w	r4, r4, r2
 800086c:	d908      	bls.n	8000880 <__udivmoddi4+0x260>
 800086e:	eb1c 0303 	adds.w	r3, ip, r3
 8000872:	f100 38ff 	add.w	r8, r0, #4294967295
 8000876:	d22f      	bcs.n	80008d8 <__udivmoddi4+0x2b8>
 8000878:	429e      	cmp	r6, r3
 800087a:	d92d      	bls.n	80008d8 <__udivmoddi4+0x2b8>
 800087c:	3802      	subs	r0, #2
 800087e:	4463      	add	r3, ip
 8000880:	1b9b      	subs	r3, r3, r6
 8000882:	b289      	uxth	r1, r1
 8000884:	fbb3 f6f7 	udiv	r6, r3, r7
 8000888:	fb07 3316 	mls	r3, r7, r6, r3
 800088c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000890:	fb06 f30e 	mul.w	r3, r6, lr
 8000894:	428b      	cmp	r3, r1
 8000896:	d908      	bls.n	80008aa <__udivmoddi4+0x28a>
 8000898:	eb1c 0101 	adds.w	r1, ip, r1
 800089c:	f106 38ff 	add.w	r8, r6, #4294967295
 80008a0:	d216      	bcs.n	80008d0 <__udivmoddi4+0x2b0>
 80008a2:	428b      	cmp	r3, r1
 80008a4:	d914      	bls.n	80008d0 <__udivmoddi4+0x2b0>
 80008a6:	3e02      	subs	r6, #2
 80008a8:	4461      	add	r1, ip
 80008aa:	1ac9      	subs	r1, r1, r3
 80008ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80008b0:	e738      	b.n	8000724 <__udivmoddi4+0x104>
 80008b2:	462e      	mov	r6, r5
 80008b4:	4628      	mov	r0, r5
 80008b6:	e705      	b.n	80006c4 <__udivmoddi4+0xa4>
 80008b8:	4606      	mov	r6, r0
 80008ba:	e6e3      	b.n	8000684 <__udivmoddi4+0x64>
 80008bc:	4618      	mov	r0, r3
 80008be:	e6f8      	b.n	80006b2 <__udivmoddi4+0x92>
 80008c0:	454b      	cmp	r3, r9
 80008c2:	d2a9      	bcs.n	8000818 <__udivmoddi4+0x1f8>
 80008c4:	ebb9 0802 	subs.w	r8, r9, r2
 80008c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80008cc:	3801      	subs	r0, #1
 80008ce:	e7a3      	b.n	8000818 <__udivmoddi4+0x1f8>
 80008d0:	4646      	mov	r6, r8
 80008d2:	e7ea      	b.n	80008aa <__udivmoddi4+0x28a>
 80008d4:	4620      	mov	r0, r4
 80008d6:	e794      	b.n	8000802 <__udivmoddi4+0x1e2>
 80008d8:	4640      	mov	r0, r8
 80008da:	e7d1      	b.n	8000880 <__udivmoddi4+0x260>
 80008dc:	46d0      	mov	r8, sl
 80008de:	e77b      	b.n	80007d8 <__udivmoddi4+0x1b8>
 80008e0:	3b02      	subs	r3, #2
 80008e2:	4461      	add	r1, ip
 80008e4:	e732      	b.n	800074c <__udivmoddi4+0x12c>
 80008e6:	4630      	mov	r0, r6
 80008e8:	e709      	b.n	80006fe <__udivmoddi4+0xde>
 80008ea:	4464      	add	r4, ip
 80008ec:	3802      	subs	r0, #2
 80008ee:	e742      	b.n	8000776 <__udivmoddi4+0x156>

080008f0 <__aeabi_idiv0>:
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop

080008f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008f4:	b510      	push	{r4, lr}
 80008f6:	b09c      	sub	sp, #112	; 0x70
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008f8:	224c      	movs	r2, #76	; 0x4c
 80008fa:	2100      	movs	r1, #0
 80008fc:	a809      	add	r0, sp, #36	; 0x24
 80008fe:	f011 fc65 	bl	80121cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000902:	2220      	movs	r2, #32
 8000904:	2100      	movs	r1, #0
 8000906:	a801      	add	r0, sp, #4
 8000908:	f011 fc60 	bl	80121cc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800090c:	2002      	movs	r0, #2
 800090e:	f003 fbd1 	bl	80040b4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000912:	2300      	movs	r3, #0
 8000914:	9300      	str	r3, [sp, #0]
 8000916:	4b24      	ldr	r3, [pc, #144]	; (80009a8 <SystemClock_Config+0xb4>)
 8000918:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800091a:	f022 0201 	bic.w	r2, r2, #1
 800091e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000922:	4a22      	ldr	r2, [pc, #136]	; (80009ac <SystemClock_Config+0xb8>)
 8000924:	f003 0301 	and.w	r3, r3, #1
 8000928:	9300      	str	r3, [sp, #0]
 800092a:	6993      	ldr	r3, [r2, #24]
 800092c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000930:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000934:	6193      	str	r3, [r2, #24]
 8000936:	6993      	ldr	r3, [r2, #24]
 8000938:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800093c:	9300      	str	r3, [sp, #0]
 800093e:	9b00      	ldr	r3, [sp, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000940:	6993      	ldr	r3, [r2, #24]
 8000942:	0498      	lsls	r0, r3, #18
 8000944:	d5fc      	bpl.n	8000940 <SystemClock_Config+0x4c>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000946:	220b      	movs	r2, #11
 8000948:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800094c:	2401      	movs	r4, #1
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 22;
  RCC_OscInitStruct.PLL.PLLN = 169;
 800094e:	2116      	movs	r1, #22
  RCC_OscInitStruct.PLL.PLLQ = 4;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_0;
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000950:	a809      	add	r0, sp, #36	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000952:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000954:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000958:	2340      	movs	r3, #64	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 169;
 800095a:	22a9      	movs	r2, #169	; 0xa9
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800095c:	e9cd 430c 	strd	r4, r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLN = 169;
 8000960:	e9cd 1214 	strd	r1, r2, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000964:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000966:	2204      	movs	r2, #4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000968:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = 2;
 800096c:	9316      	str	r3, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = 2;
 800096e:	e9cd 2317 	strd	r2, r3, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_0;
 8000972:	2300      	movs	r3, #0
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000974:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000978:	931b      	str	r3, [sp, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800097a:	f003 fc3d 	bl	80041f8 <HAL_RCC_OscConfig>
 800097e:	b108      	cbz	r0, 8000984 <SystemClock_Config+0x90>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000980:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000982:	e7fe      	b.n	8000982 <SystemClock_Config+0x8e>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000984:	233f      	movs	r3, #63	; 0x3f
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000986:	4621      	mov	r1, r4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000988:	e9cd 3001 	strd	r3, r0, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800098c:	e9cd 0003 	strd	r0, r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000990:	e9cd 0005 	strd	r0, r0, [sp, #20]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000994:	e9cd 0007 	strd	r0, r0, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000998:	a801      	add	r0, sp, #4
 800099a:	f003 ff81 	bl	80048a0 <HAL_RCC_ClockConfig>
 800099e:	b108      	cbz	r0, 80009a4 <SystemClock_Config+0xb0>
 80009a0:	b672      	cpsid	i
  while (1)
 80009a2:	e7fe      	b.n	80009a2 <SystemClock_Config+0xae>
}
 80009a4:	b01c      	add	sp, #112	; 0x70
 80009a6:	bd10      	pop	{r4, pc}
 80009a8:	58000400 	.word	0x58000400
 80009ac:	58024800 	.word	0x58024800

080009b0 <PeriphCommonClock_Config>:
{
 80009b0:	b500      	push	{lr}
 80009b2:	b0b1      	sub	sp, #196	; 0xc4
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009b4:	229c      	movs	r2, #156	; 0x9c
 80009b6:	2100      	movs	r1, #0
 80009b8:	a809      	add	r0, sp, #36	; 0x24
 80009ba:	f011 fc07 	bl	80121cc <memset>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80009be:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80009c2:	2300      	movs	r3, #0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009c4:	4668      	mov	r0, sp
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80009c6:	e9cd 2300 	strd	r2, r3, [sp]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 80009ca:	2302      	movs	r3, #2
 80009cc:	220c      	movs	r2, #12
 80009ce:	e9cd 3202 	strd	r3, r2, [sp, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 5;
 80009d2:	2205      	movs	r2, #5
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80009d4:	9306      	str	r3, [sp, #24]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80009d6:	e9cd 2304 	strd	r2, r3, [sp, #16]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80009da:	22c0      	movs	r2, #192	; 0xc0
 80009dc:	2320      	movs	r3, #32
 80009de:	e9cd 2307 	strd	r2, r3, [sp, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009e2:	f004 f9b9 	bl	8004d58 <HAL_RCCEx_PeriphCLKConfig>
 80009e6:	b108      	cbz	r0, 80009ec <PeriphCommonClock_Config+0x3c>
 80009e8:	b672      	cpsid	i
  while (1)
 80009ea:	e7fe      	b.n	80009ea <PeriphCommonClock_Config+0x3a>
}
 80009ec:	b031      	add	sp, #196	; 0xc4
 80009ee:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080009f4 <main>:
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80009f4:	4bcf      	ldr	r3, [pc, #828]	; (8000d34 <main+0x340>)
 80009f6:	695a      	ldr	r2, [r3, #20]
 80009f8:	f412 3200 	ands.w	r2, r2, #131072	; 0x20000
{
 80009fc:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8000a00:	b0a9      	sub	sp, #164	; 0xa4
 8000a02:	d111      	bne.n	8000a28 <main+0x34>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000a04:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000a08:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000a0c:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000a10:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000a14:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000a18:	695a      	ldr	r2, [r3, #20]
 8000a1a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000a1e:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000a20:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000a24:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000a28:	4ac2      	ldr	r2, [pc, #776]	; (8000d34 <main+0x340>)
 8000a2a:	6953      	ldr	r3, [r2, #20]
 8000a2c:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 8000a30:	d123      	bne.n	8000a7a <main+0x86>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000a32:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000a36:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000a3a:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000a3e:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000a42:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000a46:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8000a4a:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000a4c:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000a50:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000a52:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000a56:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000a58:	f8c2 5260 	str.w	r5, [r2, #608]	; 0x260
      } while (ways-- != 0U);
 8000a5c:	d2f9      	bcs.n	8000a52 <main+0x5e>
    } while(sets-- != 0U);
 8000a5e:	3b20      	subs	r3, #32
 8000a60:	f113 0f20 	cmn.w	r3, #32
 8000a64:	d1f2      	bne.n	8000a4c <main+0x58>
 8000a66:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000a6a:	6953      	ldr	r3, [r2, #20]
 8000a6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a70:	6153      	str	r3, [r2, #20]
 8000a72:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000a76:	f3bf 8f6f 	isb	sy
  HAL_Init();
 8000a7a:	f001 fae9 	bl	8002050 <HAL_Init>
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7e:	2400      	movs	r4, #0
  SystemClock_Config();
 8000a80:	f7ff ff38 	bl	80008f4 <SystemClock_Config>
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a84:	2702      	movs	r7, #2
  PeriphCommonClock_Config();
 8000a86:	f7ff ff93 	bl	80009b0 <PeriphCommonClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a8a:	2214      	movs	r2, #20
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	a81b      	add	r0, sp, #108	; 0x6c
 8000a90:	f011 fb9c 	bl	80121cc <memset>
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000a94:	4ba8      	ldr	r3, [pc, #672]	; (8000d38 <main+0x344>)
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a96:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a9a:	48a8      	ldr	r0, [pc, #672]	; (8000d3c <main+0x348>)
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000a9c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
  GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8000aa0:	f04f 0a09 	mov.w	sl, #9
  GPIO_InitStruct.Pin = LCD_DISPD7_Pin;
 8000aa4:	f04f 0880 	mov.w	r8, #128	; 0x80
  GPIO_InitStruct.Pin = B1_Pin;
 8000aa8:	f44f 5600 	mov.w	r6, #8192	; 0x2000
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000aac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000ab0:	2501      	movs	r5, #1
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8000ab2:	f04f 0b06 	mov.w	fp, #6
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ab6:	f44f 1988 	mov.w	r9, #1114112	; 0x110000
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000aba:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000abe:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000ac2:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8000ac6:	9203      	str	r2, [sp, #12]
 8000ac8:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aca:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000ace:	f042 0202 	orr.w	r2, r2, #2
 8000ad2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000ad6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000ada:	f002 0202 	and.w	r2, r2, #2
 8000ade:	9204      	str	r2, [sp, #16]
 8000ae0:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000ae2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000ae6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000aea:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000aee:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000af2:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8000af6:	9205      	str	r2, [sp, #20]
 8000af8:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000afa:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000afe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000b02:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000b06:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000b0a:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8000b0e:	9206      	str	r2, [sp, #24]
 8000b10:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b12:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000b16:	f042 0204 	orr.w	r2, r2, #4
 8000b1a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000b1e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000b22:	f002 0204 	and.w	r2, r2, #4
 8000b26:	9207      	str	r2, [sp, #28]
 8000b28:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b2a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000b2e:	f042 0201 	orr.w	r2, r2, #1
 8000b32:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000b36:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000b3a:	f002 0201 	and.w	r2, r2, #1
 8000b3e:	9208      	str	r2, [sp, #32]
 8000b40:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b42:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000b46:	f042 0210 	orr.w	r2, r2, #16
 8000b4a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000b4e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000b52:	f002 0210 	and.w	r2, r2, #16
 8000b56:	9209      	str	r2, [sp, #36]	; 0x24
 8000b58:	9a09      	ldr	r2, [sp, #36]	; 0x24
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000b5a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000b5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000b62:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000b66:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000b6a:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8000b6e:	920a      	str	r2, [sp, #40]	; 0x28
 8000b70:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b72:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000b76:	f042 0208 	orr.w	r2, r2, #8
 8000b7a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000b7e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000b82:	f002 0208 	and.w	r2, r2, #8
 8000b86:	920b      	str	r2, [sp, #44]	; 0x2c
 8000b88:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b8a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000b8e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000b92:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000b96:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000b9a:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8000b9e:	920c      	str	r2, [sp, #48]	; 0x30
 8000ba0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ba2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000ba6:	f042 0220 	orr.w	r2, r2, #32
 8000baa:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000bae:	2200      	movs	r2, #0
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000bb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bb4:	f003 0320 	and.w	r3, r3, #32
 8000bb8:	930d      	str	r3, [sp, #52]	; 0x34
 8000bba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000bbc:	f002 fcca 	bl	8003554 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MII_TX_ER_nINT_GPIO_Port, MII_TX_ER_nINT_Pin, GPIO_PIN_RESET);
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	2104      	movs	r1, #4
 8000bc4:	485e      	ldr	r0, [pc, #376]	; (8000d40 <main+0x34c>)
 8000bc6:	f002 fcc5 	bl	8003554 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8000bca:	2200      	movs	r2, #0
 8000bcc:	2104      	movs	r1, #4
 8000bce:	485d      	ldr	r0, [pc, #372]	; (8000d44 <main+0x350>)
 8000bd0:	f002 fcc0 	bl	8003554 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd4:	2320      	movs	r3, #32
  HAL_GPIO_Init(FDCAN2_RX_GPIO_Port, &GPIO_InitStruct);
 8000bd6:	a91b      	add	r1, sp, #108	; 0x6c
 8000bd8:	4859      	ldr	r0, [pc, #356]	; (8000d40 <main+0x34c>)
  GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8000bda:	f8cd a07c 	str.w	sl, [sp, #124]	; 0x7c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bde:	e9cd 371b 	strd	r3, r7, [sp, #108]	; 0x6c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be2:	e9cd 441d 	strd	r4, r4, [sp, #116]	; 0x74
  HAL_GPIO_Init(FDCAN2_RX_GPIO_Port, &GPIO_InitStruct);
 8000be6:	f002 fbc9 	bl	800337c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000bea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000bee:	a91b      	add	r1, sp, #108	; 0x6c
 8000bf0:	4855      	ldr	r0, [pc, #340]	; (8000d48 <main+0x354>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf2:	e9cd 371b 	strd	r3, r7, [sp, #108]	; 0x6c
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8000bf6:	2303      	movs	r3, #3
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf8:	e9cd 441d 	strd	r4, r4, [sp, #116]	; 0x74
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8000bfc:	931f      	str	r3, [sp, #124]	; 0x7c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000bfe:	f002 fbbd 	bl	800337c <HAL_GPIO_Init>
  HAL_GPIO_Init(LCD_DISPD7_GPIO_Port, &GPIO_InitStruct);
 8000c02:	a91b      	add	r1, sp, #108	; 0x6c
 8000c04:	4851      	ldr	r0, [pc, #324]	; (8000d4c <main+0x358>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c06:	941d      	str	r4, [sp, #116]	; 0x74
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c08:	e9cd 841b 	strd	r8, r4, [sp, #108]	; 0x6c
  HAL_GPIO_Init(LCD_DISPD7_GPIO_Port, &GPIO_InitStruct);
 8000c0c:	f002 fbb6 	bl	800337c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
 8000c10:	2330      	movs	r3, #48	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c12:	a91b      	add	r1, sp, #108	; 0x6c
 8000c14:	484e      	ldr	r0, [pc, #312]	; (8000d50 <main+0x35c>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c16:	e9cd 371b 	strd	r3, r7, [sp, #108]	; 0x6c
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI4;
 8000c1a:	230a      	movs	r3, #10
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1c:	e9cd 441d 	strd	r4, r4, [sp, #116]	; 0x74
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI4;
 8000c20:	931f      	str	r3, [sp, #124]	; 0x7c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c22:	f002 fbab 	bl	800337c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_OTG_FS2_ID_Pin|OTG_FS2_PSO_Pin;
 8000c26:	f44f 6384 	mov.w	r3, #1056	; 0x420
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c2a:	a91b      	add	r1, sp, #108	; 0x6c
 8000c2c:	4849      	ldr	r0, [pc, #292]	; (8000d54 <main+0x360>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2e:	941d      	str	r4, [sp, #116]	; 0x74
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c30:	e9cd 341b 	strd	r3, r4, [sp, #108]	; 0x6c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c34:	f002 fba2 	bl	800337c <HAL_GPIO_Init>
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c38:	a91b      	add	r1, sp, #108	; 0x6c
 8000c3a:	4847      	ldr	r0, [pc, #284]	; (8000d58 <main+0x364>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3c:	941d      	str	r4, [sp, #116]	; 0x74
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c3e:	e9cd 641b 	strd	r6, r4, [sp, #108]	; 0x6c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c42:	f002 fb9b 	bl	800337c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000c46:	f44f 7380 	mov.w	r3, #256	; 0x100
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c4a:	a91b      	add	r1, sp, #108	; 0x6c
 8000c4c:	4841      	ldr	r0, [pc, #260]	; (8000d54 <main+0x360>)
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000c4e:	951f      	str	r5, [sp, #124]	; 0x7c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c50:	e9cd 371b 	strd	r3, r7, [sp, #108]	; 0x6c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c54:	e9cd 441d 	strd	r4, r4, [sp, #116]	; 0x74
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c58:	f002 fb90 	bl	800337c <HAL_GPIO_Init>
  HAL_GPIO_Init(audio_Int_GPIO_Port, &GPIO_InitStruct);
 8000c5c:	a91b      	add	r1, sp, #108	; 0x6c
 8000c5e:	483f      	ldr	r0, [pc, #252]	; (8000d5c <main+0x368>)
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8000c60:	f8cd b07c 	str.w	fp, [sp, #124]	; 0x7c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c64:	e9cd 871b 	strd	r8, r7, [sp, #108]	; 0x6c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c68:	e9cd 441d 	strd	r4, r4, [sp, #116]	; 0x74
  HAL_GPIO_Init(audio_Int_GPIO_Port, &GPIO_InitStruct);
 8000c6c:	f002 fb86 	bl	800337c <HAL_GPIO_Init>
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c70:	a91b      	add	r1, sp, #108	; 0x6c
 8000c72:	4832      	ldr	r0, [pc, #200]	; (8000d3c <main+0x348>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c74:	e9cd 651b 	strd	r6, r5, [sp, #108]	; 0x6c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c78:	2604      	movs	r6, #4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7a:	e9cd 441d 	strd	r4, r4, [sp, #116]	; 0x74
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c7e:	f002 fb7d 	bl	800337c <HAL_GPIO_Init>
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000c82:	a91b      	add	r1, sp, #108	; 0x6c
 8000c84:	4835      	ldr	r0, [pc, #212]	; (8000d5c <main+0x368>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c86:	941d      	str	r4, [sp, #116]	; 0x74
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c88:	e9cd 691b 	strd	r6, r9, [sp, #108]	; 0x6c
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000c8c:	f002 fb76 	bl	800337c <HAL_GPIO_Init>
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 8000c90:	a91b      	add	r1, sp, #108	; 0x6c
 8000c92:	4833      	ldr	r0, [pc, #204]	; (8000d60 <main+0x36c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c94:	941d      	str	r4, [sp, #116]	; 0x74
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c96:	e9cd 541b 	strd	r5, r4, [sp, #108]	; 0x6c
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 8000c9a:	f002 fb6f 	bl	800337c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OTG_FS2_OverCurrent_Pin;
 8000c9e:	f44f 6300 	mov.w	r3, #2048	; 0x800
  HAL_GPIO_Init(OTG_FS2_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000ca2:	a91b      	add	r1, sp, #108	; 0x6c
 8000ca4:	4828      	ldr	r0, [pc, #160]	; (8000d48 <main+0x354>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca6:	941d      	str	r4, [sp, #116]	; 0x74
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ca8:	e9cd 391b 	strd	r3, r9, [sp, #108]	; 0x6c
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000cac:	f04f 0940 	mov.w	r9, #64	; 0x40
  HAL_GPIO_Init(OTG_FS2_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000cb0:	f002 fb64 	bl	800337c <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb4:	a91b      	add	r1, sp, #108	; 0x6c
 8000cb6:	4827      	ldr	r0, [pc, #156]	; (8000d54 <main+0x360>)
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8000cb8:	f8cd a07c 	str.w	sl, [sp, #124]	; 0x7c
  hadc1.Instance = ADC1;
 8000cbc:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 8000d68 <main+0x374>
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc0:	e9cd 971b 	strd	r9, r7, [sp, #108]	; 0x6c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc4:	e9cd 441d 	strd	r4, r4, [sp, #116]	; 0x74
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc8:	f002 fb58 	bl	800337c <HAL_GPIO_Init>
  HAL_GPIO_Init(MII_TX_ER_nINT_GPIO_Port, &GPIO_InitStruct);
 8000ccc:	a91b      	add	r1, sp, #108	; 0x6c
 8000cce:	481c      	ldr	r0, [pc, #112]	; (8000d40 <main+0x34c>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd0:	e9cd 651b 	strd	r6, r5, [sp, #108]	; 0x6c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd4:	e9cd 441d 	strd	r4, r4, [sp, #116]	; 0x74
  HAL_GPIO_Init(MII_TX_ER_nINT_GPIO_Port, &GPIO_InitStruct);
 8000cd8:	f002 fb50 	bl	800337c <HAL_GPIO_Init>
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8000cdc:	a91b      	add	r1, sp, #108	; 0x6c
 8000cde:	4819      	ldr	r0, [pc, #100]	; (8000d44 <main+0x350>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ce0:	e9cd 651b 	strd	r6, r5, [sp, #108]	; 0x6c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce4:	e9cd 441d 	strd	r4, r4, [sp, #116]	; 0x74
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8000ce8:	f002 fb48 	bl	800337c <HAL_GPIO_Init>
  ADC_ChannelConfTypeDef sConfig = {0};
 8000cec:	221c      	movs	r2, #28
 8000cee:	4621      	mov	r1, r4
 8000cf0:	a81b      	add	r0, sp, #108	; 0x6c
  ADC_MultiModeTypeDef multimode = {0};
 8000cf2:	9410      	str	r4, [sp, #64]	; 0x40
 8000cf4:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
  ADC_ChannelConfTypeDef sConfig = {0};
 8000cf8:	f011 fa68 	bl	80121cc <memset>
  hadc1.Instance = ADC1;
 8000cfc:	4b19      	ldr	r3, [pc, #100]	; (8000d64 <main+0x370>)
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000cfe:	4650      	mov	r0, sl
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000d00:	f8aa 4014 	strh.w	r4, [sl, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d04:	f8ca 6010 	str.w	r6, [sl, #16]
  hadc1.Init.NbrOfConversion = 1;
 8000d08:	f8ca 5018 	str.w	r5, [sl, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d0c:	f88a 401c 	strb.w	r4, [sl, #28]
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000d10:	f8ca 4034 	str.w	r4, [sl, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000d14:	f88a 4038 	strb.w	r4, [sl, #56]	; 0x38
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000d18:	e9ca 3400 	strd	r3, r4, [sl]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d1c:	e9ca 4402 	strd	r4, r4, [sl, #8]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d20:	e9ca 4409 	strd	r4, r4, [sl, #36]	; 0x24
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000d24:	e9ca 440b 	strd	r4, r4, [sl, #44]	; 0x2c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d28:	f001 fc88 	bl	800263c <HAL_ADC_Init>
 8000d2c:	b1f0      	cbz	r0, 8000d6c <main+0x378>
  __ASM volatile ("cpsid i" : : : "memory");
 8000d2e:	b672      	cpsid	i
  while (1)
 8000d30:	e7fe      	b.n	8000d30 <main+0x33c>
 8000d32:	bf00      	nop
 8000d34:	e000ed00 	.word	0xe000ed00
 8000d38:	58024400 	.word	0x58024400
 8000d3c:	58022000 	.word	0x58022000
 8000d40:	58020400 	.word	0x58020400
 8000d44:	58022400 	.word	0x58022400
 8000d48:	58021c00 	.word	0x58021c00
 8000d4c:	58020c00 	.word	0x58020c00
 8000d50:	58021000 	.word	0x58021000
 8000d54:	58020000 	.word	0x58020000
 8000d58:	58020800 	.word	0x58020800
 8000d5c:	58021800 	.word	0x58021800
 8000d60:	58022800 	.word	0x58022800
 8000d64:	40022000 	.word	0x40022000
 8000d68:	240009fc 	.word	0x240009fc
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000d6c:	900e      	str	r0, [sp, #56]	; 0x38
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000d6e:	a90e      	add	r1, sp, #56	; 0x38
 8000d70:	4650      	mov	r0, sl
 8000d72:	f001 fd6f 	bl	8002854 <HAL_ADCEx_MultiModeConfigChannel>
 8000d76:	b108      	cbz	r0, 8000d7c <main+0x388>
 8000d78:	b672      	cpsid	i
  while (1)
 8000d7a:	e7fe      	b.n	8000d7a <main+0x386>
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d7c:	f240 74ff 	movw	r4, #2047	; 0x7ff
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d80:	a91b      	add	r1, sp, #108	; 0x6c
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000d82:	901d      	str	r0, [sp, #116]	; 0x74
  sConfig.Offset = 0;
 8000d84:	9020      	str	r0, [sp, #128]	; 0x80
  sConfig.OffsetSignedSaturation = DISABLE;
 8000d86:	f88d 0085 	strb.w	r0, [sp, #133]	; 0x85
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d8a:	4650      	mov	r0, sl
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d8c:	e9cd 5b1b 	strd	r5, fp, [sp, #108]	; 0x6c
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d90:	e9cd 461e 	strd	r4, r6, [sp, #120]	; 0x78
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d94:	f001 f9ea 	bl	800216c <HAL_ADC_ConfigChannel>
 8000d98:	4601      	mov	r1, r0
 8000d9a:	b108      	cbz	r0, 8000da0 <main+0x3ac>
 8000d9c:	b672      	cpsid	i
  while (1)
 8000d9e:	e7fe      	b.n	8000d9e <main+0x3aa>
  ADC_ChannelConfTypeDef sConfig = {0};
 8000da0:	9001      	str	r0, [sp, #4]
 8000da2:	221c      	movs	r2, #28
 8000da4:	a81b      	add	r0, sp, #108	; 0x6c
  hadc2.Instance = ADC2;
 8000da6:	f8df a350 	ldr.w	sl, [pc, #848]	; 80010f8 <main+0x704>
  ADC_ChannelConfTypeDef sConfig = {0};
 8000daa:	f011 fa0f 	bl	80121cc <memset>
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000dae:	9901      	ldr	r1, [sp, #4]
  hadc2.Instance = ADC2;
 8000db0:	4bbc      	ldr	r3, [pc, #752]	; (80010a4 <main+0x6b0>)
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000db2:	4650      	mov	r0, sl
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000db4:	f8aa 1014 	strh.w	r1, [sl, #20]
  hadc2.Instance = ADC2;
 8000db8:	f8ca 3000 	str.w	r3, [sl]
  hadc2.Init.NbrOfConversion = 1;
 8000dbc:	f8ca 5018 	str.w	r5, [sl, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000dc0:	f88a 101c 	strb.w	r1, [sl, #28]
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000dc4:	f8ca 1034 	str.w	r1, [sl, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000dc8:	f88a 1038 	strb.w	r1, [sl, #56]	; 0x38
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000dcc:	e9ca 1101 	strd	r1, r1, [sl, #4]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000dd0:	e9ca 1603 	strd	r1, r6, [sl, #12]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000dd4:	e9ca 1109 	strd	r1, r1, [sl, #36]	; 0x24
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000dd8:	e9ca 110b 	strd	r1, r1, [sl, #44]	; 0x2c
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000ddc:	f001 fc2e 	bl	800263c <HAL_ADC_Init>
 8000de0:	b108      	cbz	r0, 8000de6 <main+0x3f2>
 8000de2:	b672      	cpsid	i
  while (1)
 8000de4:	e7fe      	b.n	8000de4 <main+0x3f0>
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000de6:	a91b      	add	r1, sp, #108	; 0x6c
  sConfig.OffsetSignedSaturation = DISABLE;
 8000de8:	f88d 0085 	strb.w	r0, [sp, #133]	; 0x85
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000dec:	e9cd 041d 	strd	r0, r4, [sp, #116]	; 0x74
  sConfig.Offset = 0;
 8000df0:	e9cd 601f 	strd	r6, r0, [sp, #124]	; 0x7c
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000df4:	4650      	mov	r0, sl
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000df6:	e9cd 5b1b 	strd	r5, fp, [sp, #108]	; 0x6c
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000dfa:	f001 f9b7 	bl	800216c <HAL_ADC_ConfigChannel>
 8000dfe:	4601      	mov	r1, r0
 8000e00:	b108      	cbz	r0, 8000e06 <main+0x412>
 8000e02:	b672      	cpsid	i
  while (1)
 8000e04:	e7fe      	b.n	8000e04 <main+0x410>
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e06:	9001      	str	r0, [sp, #4]
 8000e08:	221c      	movs	r2, #28
 8000e0a:	a81b      	add	r0, sp, #108	; 0x6c
  hadc3.Instance = ADC3;
 8000e0c:	f8df a2ec 	ldr.w	sl, [pc, #748]	; 80010fc <main+0x708>
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e10:	f011 f9dc 	bl	80121cc <memset>
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8000e14:	9901      	ldr	r1, [sp, #4]
  hadc3.Instance = ADC3;
 8000e16:	4ba4      	ldr	r3, [pc, #656]	; (80010a8 <main+0x6b4>)
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000e18:	4650      	mov	r0, sl
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000e1a:	f8aa 1014 	strh.w	r1, [sl, #20]
  hadc3.Instance = ADC3;
 8000e1e:	f8ca 3000 	str.w	r3, [sl]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e22:	f8ca 6010 	str.w	r6, [sl, #16]
  hadc3.Init.NbrOfConversion = 1;
 8000e26:	f8ca 5018 	str.w	r5, [sl, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000e2a:	f88a 101c 	strb.w	r1, [sl, #28]
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000e2e:	f8ca 1034 	str.w	r1, [sl, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000e32:	f88a 1038 	strb.w	r1, [sl, #56]	; 0x38
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e36:	e9ca 1102 	strd	r1, r1, [sl, #8]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e3a:	e9ca 1109 	strd	r1, r1, [sl, #36]	; 0x24
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000e3e:	e9ca 110b 	strd	r1, r1, [sl, #44]	; 0x2c
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000e42:	f001 fbfb 	bl	800263c <HAL_ADC_Init>
 8000e46:	b108      	cbz	r0, 8000e4c <main+0x458>
 8000e48:	b672      	cpsid	i
  while (1)
 8000e4a:	e7fe      	b.n	8000e4a <main+0x456>
  sConfig.Channel = ADC_CHANNEL_7;
 8000e4c:	4b97      	ldr	r3, [pc, #604]	; (80010ac <main+0x6b8>)
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000e4e:	a91b      	add	r1, sp, #108	; 0x6c
  sConfig.OffsetSignedSaturation = DISABLE;
 8000e50:	f88d 0085 	strb.w	r0, [sp, #133]	; 0x85
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e54:	e9cd 041d 	strd	r0, r4, [sp, #116]	; 0x74
  sConfig.Offset = 0;
 8000e58:	e9cd 601f 	strd	r6, r0, [sp, #124]	; 0x7c
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000e5c:	4650      	mov	r0, sl
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e5e:	e9cd 3b1b 	strd	r3, fp, [sp, #108]	; 0x6c
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000e62:	f001 f983 	bl	800216c <HAL_ADC_ConfigChannel>
 8000e66:	b108      	cbz	r0, 8000e6c <main+0x478>
 8000e68:	b672      	cpsid	i
  while (1)
 8000e6a:	e7fe      	b.n	8000e6a <main+0x476>
  heth.Instance = ETH;
 8000e6c:	4b90      	ldr	r3, [pc, #576]	; (80010b0 <main+0x6bc>)
  MACAddr[2] = 0xE1;
 8000e6e:	21e1      	movs	r1, #225	; 0xe1
  heth.Instance = ETH;
 8000e70:	4a90      	ldr	r2, [pc, #576]	; (80010b4 <main+0x6c0>)
  heth.Init.MediaInterface = HAL_ETH_MII_MODE;
 8000e72:	7218      	strb	r0, [r3, #8]
  heth.Instance = ETH;
 8000e74:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000e76:	4a90      	ldr	r2, [pc, #576]	; (80010b8 <main+0x6c4>)
 8000e78:	7010      	strb	r0, [r2, #0]
  MACAddr[3] = 0x00;
 8000e7a:	70d0      	strb	r0, [r2, #3]
  MACAddr[4] = 0x00;
 8000e7c:	7110      	strb	r0, [r2, #4]
  MACAddr[5] = 0x00;
 8000e7e:	7150      	strb	r0, [r2, #5]
  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000e80:	4618      	mov	r0, r3
  MACAddr[1] = 0x80;
 8000e82:	f882 8001 	strb.w	r8, [r2, #1]
  MACAddr[2] = 0xE1;
 8000e86:	7091      	strb	r1, [r2, #2]
  heth.Init.MACAddr = &MACAddr[0];
 8000e88:	605a      	str	r2, [r3, #4]
  heth.Init.TxDesc = DMATxDscrTab;
 8000e8a:	4a8c      	ldr	r2, [pc, #560]	; (80010bc <main+0x6c8>)
 8000e8c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000e8e:	4a8c      	ldr	r2, [pc, #560]	; (80010c0 <main+0x6cc>)
 8000e90:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000e92:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000e96:	615a      	str	r2, [r3, #20]
  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000e98:	f001 ff76 	bl	8002d88 <HAL_ETH_Init>
 8000e9c:	4604      	mov	r4, r0
 8000e9e:	b108      	cbz	r0, 8000ea4 <main+0x4b0>
 8000ea0:	b672      	cpsid	i
  while (1)
 8000ea2:	e7fe      	b.n	8000ea2 <main+0x4ae>
  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000ea4:	f8df a258 	ldr.w	sl, [pc, #600]	; 8001100 <main+0x70c>
 8000ea8:	4601      	mov	r1, r0
 8000eaa:	2234      	movs	r2, #52	; 0x34
 8000eac:	f10a 0004 	add.w	r0, sl, #4
 8000eb0:	f011 f98c 	bl	80121cc <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000eb4:	2321      	movs	r3, #33	; 0x21
  hfdcan1.Instance = FDCAN1;
 8000eb6:	4883      	ldr	r0, [pc, #524]	; (80010c4 <main+0x6d0>)
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000eb8:	f8ca 3000 	str.w	r3, [sl]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000ebc:	f44f 3340 	mov.w	r3, #196608	; 0x30000
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000ec0:	8204      	strh	r4, [r0, #16]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000ec2:	f8ca 3014 	str.w	r3, [sl, #20]
  hfdcan1.Init.NominalPrescaler = 16;
 8000ec6:	f04f 0a10 	mov.w	sl, #16
  hfdcan1.Instance = FDCAN1;
 8000eca:	4b7f      	ldr	r3, [pc, #508]	; (80010c8 <main+0x6d4>)
  hfdcan1.Init.ProtocolException = DISABLE;
 8000ecc:	7484      	strb	r4, [r0, #18]
  hfdcan1.Instance = FDCAN1;
 8000ece:	6003      	str	r3, [r0, #0]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000ed0:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000ed4:	e9c0 a505 	strd	sl, r5, [r0, #20]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000ed8:	e9c0 7707 	strd	r7, r7, [r0, #28]
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000edc:	e9c0 5509 	strd	r5, r5, [r0, #36]	; 0x24
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000ee0:	e9c0 550b 	strd	r5, r5, [r0, #44]	; 0x2c
  hfdcan1.Init.StdFiltersNbr = 0;
 8000ee4:	e9c0 440d 	strd	r4, r4, [r0, #52]	; 0x34
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8000ee8:	e9c0 440f 	strd	r4, r4, [r0, #60]	; 0x3c
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000eec:	e9c0 6411 	strd	r6, r4, [r0, #68]	; 0x44
  hfdcan1.Init.RxBuffersNbr = 0;
 8000ef0:	e9c0 6413 	strd	r6, r4, [r0, #76]	; 0x4c
  hfdcan1.Init.TxEventsNbr = 0;
 8000ef4:	e9c0 6415 	strd	r6, r4, [r0, #84]	; 0x54
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8000ef8:	e9c0 4417 	strd	r4, r4, [r0, #92]	; 0x5c
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000efc:	e9c0 4619 	strd	r4, r6, [r0, #100]	; 0x64
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000f00:	f002 f852 	bl	8002fa8 <HAL_FDCAN_Init>
 8000f04:	4603      	mov	r3, r0
 8000f06:	b108      	cbz	r0, 8000f0c <main+0x518>
 8000f08:	b672      	cpsid	i
  while (1)
 8000f0a:	e7fe      	b.n	8000f0a <main+0x516>
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000f0c:	486f      	ldr	r0, [pc, #444]	; (80010cc <main+0x6d8>)
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000f0e:	a91b      	add	r1, sp, #108	; 0x6c
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000f10:	4a6f      	ldr	r2, [pc, #444]	; (80010d0 <main+0x6dc>)
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000f12:	6283      	str	r3, [r0, #40]	; 0x28
  SdramTiming.RCDDelay = 16;
 8000f14:	f8cd a084 	str.w	sl, [sp, #132]	; 0x84
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000f18:	e9c0 2500 	strd	r2, r5, [r0]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000f1c:	e9c0 3602 	strd	r3, r6, [r0, #8]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000f20:	e9c0 a904 	strd	sl, r9, [r0, #16]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000f24:	e9c0 8306 	strd	r8, r3, [r0, #24]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000f28:	e9c0 3308 	strd	r3, r3, [r0, #32]
  SdramTiming.ExitSelfRefreshDelay = 16;
 8000f2c:	e9cd aa1b 	strd	sl, sl, [sp, #108]	; 0x6c
  SdramTiming.RowCycleDelay = 16;
 8000f30:	e9cd aa1d 	strd	sl, sl, [sp, #116]	; 0x74
  SdramTiming.RPDelay = 16;
 8000f34:	e9cd aa1f 	strd	sl, sl, [sp, #124]	; 0x7c
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000f38:	f005 fa3c 	bl	80063b4 <HAL_SDRAM_Init>
 8000f3c:	b108      	cbz	r0, 8000f42 <main+0x54e>
 8000f3e:	b672      	cpsid	i
  while (1)
 8000f40:	e7fe      	b.n	8000f40 <main+0x54c>
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000f42:	2234      	movs	r2, #52	; 0x34
 8000f44:	2100      	movs	r1, #0
 8000f46:	a80e      	add	r0, sp, #56	; 0x38
  hltdc.Instance = LTDC;
 8000f48:	4d62      	ldr	r5, [pc, #392]	; (80010d4 <main+0x6e0>)
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000f4a:	f011 f93f 	bl	80121cc <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8000f4e:	2234      	movs	r2, #52	; 0x34
 8000f50:	2100      	movs	r1, #0
 8000f52:	a81b      	add	r0, sp, #108	; 0x6c
 8000f54:	f011 f93a 	bl	80121cc <memset>
  hltdc.Init.VerticalSync = 3;
 8000f58:	2403      	movs	r4, #3
 8000f5a:	2207      	movs	r2, #7
  hltdc.Init.AccumulatedVBP = 5;
 8000f5c:	2605      	movs	r6, #5
  hltdc.Init.AccumulatedActiveH = 485;
 8000f5e:	f240 2c8e 	movw	ip, #654	; 0x28e
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000f62:	2300      	movs	r3, #0
  hltdc.Init.TotalHeigh = 487;
 8000f64:	f44f 7e25 	mov.w	lr, #660	; 0x294
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000f68:	4f5b      	ldr	r7, [pc, #364]	; (80010d8 <main+0x6e4>)
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000f6a:	4628      	mov	r0, r5
  hltdc.Init.Backcolor.Blue = 0;
 8000f6c:	86ab      	strh	r3, [r5, #52]	; 0x34
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000f6e:	612b      	str	r3, [r5, #16]
  hltdc.Init.Backcolor.Red = 0;
 8000f70:	f885 3036 	strb.w	r3, [r5, #54]	; 0x36
  hltdc.Init.VerticalSync = 3;
 8000f74:	e9c5 2405 	strd	r2, r4, [r5, #20]
  hltdc.Init.AccumulatedVBP = 5;
 8000f78:	220e      	movs	r2, #14
 8000f7a:	e9c5 2607 	strd	r2, r6, [r5, #28]
  hltdc.Init.AccumulatedActiveH = 485;
 8000f7e:	f240 12e5 	movw	r2, #485	; 0x1e5
 8000f82:	e9c5 c209 	strd	ip, r2, [r5, #36]	; 0x24
  hltdc.Init.TotalHeigh = 487;
 8000f86:	f240 12e7 	movw	r2, #487	; 0x1e7
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000f8a:	e9c5 7300 	strd	r7, r3, [r5]
  hltdc.Init.TotalHeigh = 487;
 8000f8e:	e9c5 e20b 	strd	lr, r2, [r5, #44]	; 0x2c
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000f92:	e9c5 3302 	strd	r3, r3, [r5, #8]
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000f96:	f002 fb69 	bl	800366c <HAL_LTDC_Init>
 8000f9a:	4602      	mov	r2, r0
 8000f9c:	b108      	cbz	r0, 8000fa2 <main+0x5ae>
 8000f9e:	b672      	cpsid	i
  while (1)
 8000fa0:	e7fe      	b.n	8000fa0 <main+0x5ac>
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000fa2:	f44f 6780 	mov.w	r7, #1024	; 0x400
  pLayerCfg.Alpha0 = 0;
 8000fa6:	9014      	str	r0, [sp, #80]	; 0x50
  pLayerCfg.ImageHeight = 0;
 8000fa8:	9019      	str	r0, [sp, #100]	; 0x64
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000faa:	a90e      	add	r1, sp, #56	; 0x38
  pLayerCfg.Backcolor.Blue = 0;
 8000fac:	f8ad 0068 	strh.w	r0, [sp, #104]	; 0x68
  pLayerCfg.Backcolor.Red = 0;
 8000fb0:	f88d 006a 	strb.w	r0, [sp, #106]	; 0x6a
  pLayerCfg.WindowX1 = 0;
 8000fb4:	e9cd 000e 	strd	r0, r0, [sp, #56]	; 0x38
  pLayerCfg.WindowY1 = 0;
 8000fb8:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
  pLayerCfg.Alpha = 0;
 8000fbc:	e9cd 0012 	strd	r0, r0, [sp, #72]	; 0x48
  pLayerCfg.ImageWidth = 0;
 8000fc0:	e9cd 0017 	strd	r0, r0, [sp, #92]	; 0x5c
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000fc4:	4628      	mov	r0, r5
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000fc6:	e9cd 7615 	strd	r7, r6, [sp, #84]	; 0x54
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000fca:	f002 fbbb 	bl	8003744 <HAL_LTDC_ConfigLayer>
 8000fce:	b108      	cbz	r0, 8000fd4 <main+0x5e0>
 8000fd0:	b672      	cpsid	i
  while (1)
 8000fd2:	e7fe      	b.n	8000fd2 <main+0x5de>
  pLayerCfg1.WindowX1 = 0;
 8000fd4:	e9cd 001b 	strd	r0, r0, [sp, #108]	; 0x6c
  pLayerCfg1.WindowY1 = 0;
 8000fd8:	e9cd 001d 	strd	r0, r0, [sp, #116]	; 0x74
  pLayerCfg1.Alpha = 0;
 8000fdc:	e9cd 001f 	strd	r0, r0, [sp, #124]	; 0x7c
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000fe0:	e9cd 0721 	strd	r0, r7, [sp, #132]	; 0x84
  pLayerCfg1.FBStartAdress = 0;
 8000fe4:	e9cd 6023 	strd	r6, r0, [sp, #140]	; 0x8c
  pLayerCfg1.ImageHeight = 0;
 8000fe8:	e9cd 0025 	strd	r0, r0, [sp, #148]	; 0x94
  pLayerCfg1.Backcolor.Blue = 0;
 8000fec:	f8ad 009c 	strh.w	r0, [sp, #156]	; 0x9c
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8000ff0:	2201      	movs	r2, #1
  pLayerCfg1.Backcolor.Red = 0;
 8000ff2:	f88d 009e 	strb.w	r0, [sp, #158]	; 0x9e
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8000ff6:	a91b      	add	r1, sp, #108	; 0x6c
 8000ff8:	4628      	mov	r0, r5
 8000ffa:	f002 fba3 	bl	8003744 <HAL_LTDC_ConfigLayer>
 8000ffe:	4603      	mov	r3, r0
 8001000:	b108      	cbz	r0, 8001006 <main+0x612>
 8001002:	b672      	cpsid	i
  while (1)
 8001004:	e7fe      	b.n	8001004 <main+0x610>
  hqspi.Instance = QUADSPI;
 8001006:	4835      	ldr	r0, [pc, #212]	; (80010dc <main+0x6e8>)
  hqspi.Init.FifoThreshold = 1;
 8001008:	2501      	movs	r5, #1
  hqspi.Init.ClockPrescaler = 255;
 800100a:	4a35      	ldr	r2, [pc, #212]	; (80010e0 <main+0x6ec>)
 800100c:	26ff      	movs	r6, #255	; 0xff
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 800100e:	6203      	str	r3, [r0, #32]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8001010:	e9c0 5302 	strd	r5, r3, [r0, #8]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8001014:	e9c0 5304 	strd	r5, r3, [r0, #16]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8001018:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hqspi.Init.ClockPrescaler = 255;
 800101c:	e9c0 2600 	strd	r2, r6, [r0]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001020:	f003 f89c 	bl	800415c <HAL_QSPI_Init>
 8001024:	4603      	mov	r3, r0
 8001026:	b108      	cbz	r0, 800102c <main+0x638>
 8001028:	b672      	cpsid	i
  while (1)
 800102a:	e7fe      	b.n	800102a <main+0x636>
  hrtc.Instance = RTC;
 800102c:	482d      	ldr	r0, [pc, #180]	; (80010e4 <main+0x6f0>)
 800102e:	4a2e      	ldr	r2, [pc, #184]	; (80010e8 <main+0x6f4>)
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001030:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001032:	6143      	str	r3, [r0, #20]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001034:	e9c0 2300 	strd	r2, r3, [r0]
  hrtc.Init.AsynchPrediv = 127;
 8001038:	227f      	movs	r2, #127	; 0x7f
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800103a:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hrtc.Init.SynchPrediv = 255;
 800103e:	e9c0 2602 	strd	r2, r6, [r0, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001042:	f004 ff8b 	bl	8005f5c <HAL_RTC_Init>
 8001046:	4603      	mov	r3, r0
 8001048:	b108      	cbz	r0, 800104e <main+0x65a>
 800104a:	b672      	cpsid	i
  while (1)
 800104c:	e7fe      	b.n	800104c <main+0x658>
  hsai_BlockA2.Instance = SAI2_Block_A;
 800104e:	4827      	ldr	r0, [pc, #156]	; (80010ec <main+0x6f8>)
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8001050:	f04f 0840 	mov.w	r8, #64	; 0x40
  hsai_BlockA2.Instance = SAI2_Block_A;
 8001054:	4a26      	ldr	r2, [pc, #152]	; (80010f0 <main+0x6fc>)
  hsai_BlockA2.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8001056:	f44f 7780 	mov.w	r7, #256	; 0x100
  hsai_BlockA2.FrameInit.FrameLength = 8;
 800105a:	2608      	movs	r6, #8
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 800105c:	6443      	str	r3, [r0, #68]	; 0x44
  hsai_BlockA2.Instance = SAI2_Block_A;
 800105e:	6002      	str	r2, [r0, #0]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8001060:	4a24      	ldr	r2, [pc, #144]	; (80010f4 <main+0x700>)
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8001062:	6043      	str	r3, [r0, #4]
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001064:	6503      	str	r3, [r0, #80]	; 0x50
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8001066:	6083      	str	r3, [r0, #8]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001068:	61c3      	str	r3, [r0, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800106a:	60c3      	str	r3, [r0, #12]
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800106c:	6343      	str	r3, [r0, #52]	; 0x34
  hsai_BlockA2.Init.PdmInit.Activation = DISABLE;
 800106e:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8001072:	6743      	str	r3, [r0, #116]	; 0x74
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8001074:	6202      	str	r2, [r0, #32]
  hsai_BlockA2.Init.PdmInit.MicPairsNbr = 1;
 8001076:	63c5      	str	r5, [r0, #60]	; 0x3c
  hsai_BlockA2.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8001078:	6407      	str	r7, [r0, #64]	; 0x40
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 800107a:	e9c0 8312 	strd	r8, r3, [r0, #72]	; 0x48
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 800107e:	e9c0 3305 	strd	r3, r3, [r0, #20]
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001082:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001086:	e9c0 3317 	strd	r3, r3, [r0, #92]	; 0x5c
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 800108a:	e9c0 3319 	strd	r3, r3, [r0, #100]	; 0x64
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 800108e:	e9c0 351b 	strd	r3, r5, [r0, #108]	; 0x6c
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8001092:	e9c0 6515 	strd	r6, r5, [r0, #84]	; 0x54
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8001096:	f004 ffcb 	bl	8006030 <HAL_SAI_Init>
 800109a:	4603      	mov	r3, r0
 800109c:	b390      	cbz	r0, 8001104 <main+0x710>
 800109e:	b672      	cpsid	i
  while (1)
 80010a0:	e7fe      	b.n	80010a0 <main+0x6ac>
 80010a2:	bf00      	nop
 80010a4:	40022100 	.word	0x40022100
 80010a8:	58026000 	.word	0x58026000
 80010ac:	1d500080 	.word	0x1d500080
 80010b0:	24000b4c 	.word	0x24000b4c
 80010b4:	40028000 	.word	0x40028000
 80010b8:	240009bc 	.word	0x240009bc
 80010bc:	2400092c 	.word	0x2400092c
 80010c0:	240008cc 	.word	0x240008cc
 80010c4:	24000bfc 	.word	0x24000bfc
 80010c8:	4000a000 	.word	0x4000a000
 80010cc:	24001664 	.word	0x24001664
 80010d0:	52004140 	.word	0x52004140
 80010d4:	24000c9c 	.word	0x24000c9c
 80010d8:	50001000 	.word	0x50001000
 80010dc:	240014c4 	.word	0x240014c4
 80010e0:	52005000 	.word	0x52005000
 80010e4:	24001510 	.word	0x24001510
 80010e8:	58004000 	.word	0x58004000
 80010ec:	24001534 	.word	0x24001534
 80010f0:	40015c04 	.word	0x40015c04
 80010f4:	0002ee00 	.word	0x0002ee00
 80010f8:	24000a60 	.word	0x24000a60
 80010fc:	24000ac4 	.word	0x24000ac4
 8001100:	240009c4 	.word	0x240009c4
  hsai_BlockB2.Instance = SAI2_Block_B;
 8001104:	483e      	ldr	r0, [pc, #248]	; (8001200 <main+0x80c>)
 8001106:	4a3f      	ldr	r2, [pc, #252]	; (8001204 <main+0x810>)
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001108:	6443      	str	r3, [r0, #68]	; 0x44
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800110a:	6503      	str	r3, [r0, #80]	; 0x50
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800110c:	6143      	str	r3, [r0, #20]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800110e:	61c3      	str	r3, [r0, #28]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001110:	60c3      	str	r3, [r0, #12]
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001112:	6343      	str	r3, [r0, #52]	; 0x34
  hsai_BlockB2.Init.PdmInit.Activation = DISABLE;
 8001114:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 8001118:	6743      	str	r3, [r0, #116]	; 0x74
  hsai_BlockB2.Instance = SAI2_Block_B;
 800111a:	6002      	str	r2, [r0, #0]
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 800111c:	6044      	str	r4, [r0, #4]
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 800111e:	6085      	str	r5, [r0, #8]
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001120:	e9c0 8312 	strd	r8, r3, [r0, #72]	; 0x48
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001124:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001128:	e9c0 3317 	strd	r3, r3, [r0, #92]	; 0x5c
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 800112c:	e9c0 3319 	strd	r3, r3, [r0, #100]	; 0x64
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8001130:	e9c0 351b 	strd	r3, r5, [r0, #108]	; 0x6c
  hsai_BlockB2.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8001134:	e9c0 570f 	strd	r5, r7, [r0, #60]	; 0x3c
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8001138:	e9c0 6515 	strd	r6, r5, [r0, #84]	; 0x54
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 800113c:	f004 ff78 	bl	8006030 <HAL_SAI_Init>
 8001140:	4603      	mov	r3, r0
 8001142:	b108      	cbz	r0, 8001148 <main+0x754>
 8001144:	b672      	cpsid	i
  while (1)
 8001146:	e7fe      	b.n	8001146 <main+0x752>
  hmmc1.Instance = SDMMC1;
 8001148:	482f      	ldr	r0, [pc, #188]	; (8001208 <main+0x814>)
 800114a:	4a30      	ldr	r2, [pc, #192]	; (800120c <main+0x818>)
  hmmc1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800114c:	6083      	str	r3, [r0, #8]
  hmmc1.Init.ClockDiv = 0;
 800114e:	6143      	str	r3, [r0, #20]
  hmmc1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001150:	e9c0 2300 	strd	r2, r3, [r0]
  hmmc1.Init.BusWide = SDMMC_BUS_WIDE_8B;
 8001154:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  hmmc1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001158:	e9c0 2303 	strd	r2, r3, [r0, #12]
  if (HAL_MMC_Init(&hmmc1) != HAL_OK)
 800115c:	f002 fee8 	bl	8003f30 <HAL_MMC_Init>
 8001160:	4603      	mov	r3, r0
 8001162:	b108      	cbz	r0, 8001168 <main+0x774>
 8001164:	b672      	cpsid	i
  while (1)
 8001166:	e7fe      	b.n	8001166 <main+0x772>
  hspi2.Instance = SPI2;
 8001168:	4829      	ldr	r0, [pc, #164]	; (8001210 <main+0x81c>)
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800116a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800116e:	4e29      	ldr	r6, [pc, #164]	; (8001214 <main+0x820>)
 8001170:	e9c0 6200 	strd	r6, r2, [r0]
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001174:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001178:	e9c0 3402 	strd	r3, r4, [r0, #8]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800117c:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001180:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001184:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi2.Init.CRCPolynomial = 0x0;
 8001188:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800118c:	e9c0 230d 	strd	r2, r3, [r0, #52]	; 0x34
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001190:	e9c0 330f 	strd	r3, r3, [r0, #60]	; 0x3c
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001194:	e9c0 3311 	strd	r3, r3, [r0, #68]	; 0x44
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001198:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800119c:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80011a0:	f005 f930 	bl	8006404 <HAL_SPI_Init>
 80011a4:	4603      	mov	r3, r0
 80011a6:	b108      	cbz	r0, 80011ac <main+0x7b8>
 80011a8:	b672      	cpsid	i
  while (1)
 80011aa:	e7fe      	b.n	80011aa <main+0x7b6>
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80011ac:	481a      	ldr	r0, [pc, #104]	; (8001218 <main+0x824>)
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80011ae:	2209      	movs	r2, #9
 80011b0:	491a      	ldr	r1, [pc, #104]	; (800121c <main+0x828>)
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80011b2:	6303      	str	r3, [r0, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80011b4:	e9c0 1200 	strd	r1, r2, [r0]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80011b8:	2202      	movs	r2, #2
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80011ba:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80011be:	e9c0 3203 	strd	r3, r2, [r0, #12]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80011c2:	e9c0 2306 	strd	r2, r3, [r0, #24]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80011c6:	e9c0 550a 	strd	r5, r5, [r0, #40]	; 0x28
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80011ca:	f002 fed7 	bl	8003f7c <HAL_PCD_Init>
 80011ce:	b108      	cbz	r0, 80011d4 <main+0x7e0>
 80011d0:	b672      	cpsid	i
  while (1)
 80011d2:	e7fe      	b.n	80011d2 <main+0x7de>
  hcrc.Instance = CRC;
 80011d4:	4812      	ldr	r0, [pc, #72]	; (8001220 <main+0x82c>)
 80011d6:	4b13      	ldr	r3, [pc, #76]	; (8001224 <main+0x830>)
 80011d8:	6003      	str	r3, [r0, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80011da:	2300      	movs	r3, #0
 80011dc:	8083      	strh	r3, [r0, #4]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80011de:	e9c0 3305 	strd	r3, r3, [r0, #20]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80011e2:	2301      	movs	r3, #1
 80011e4:	6203      	str	r3, [r0, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80011e6:	f001 fc13 	bl	8002a10 <HAL_CRC_Init>
 80011ea:	b108      	cbz	r0, 80011f0 <main+0x7fc>
 80011ec:	b672      	cpsid	i
  while (1)
 80011ee:	e7fe      	b.n	80011ee <main+0x7fa>
  MX_FATFS_Init();
 80011f0:	f006 fa72 	bl	80076d8 <MX_FATFS_Init>
  MX_X_CUBE_AI_Init();
 80011f4:	f007 ff02 	bl	8008ffc <MX_X_CUBE_AI_Init>
  MX_X_CUBE_AI_Process();
 80011f8:	f007 ff07 	bl	800900a <MX_X_CUBE_AI_Process>
  while (1)
 80011fc:	e7fc      	b.n	80011f8 <main+0x804>
 80011fe:	bf00      	nop
 8001200:	240015cc 	.word	0x240015cc
 8001204:	40015c24 	.word	0x40015c24
 8001208:	24000d44 	.word	0x24000d44
 800120c:	52007000 	.word	0x52007000
 8001210:	24001698 	.word	0x24001698
 8001214:	40003800 	.word	0x40003800
 8001218:	24000fb8 	.word	0x24000fb8
 800121c:	40080000 	.word	0x40080000
 8001220:	24000b28 	.word	0x24000b28
 8001224:	58024c00 	.word	0x58024c00

08001228 <MX_USART3_UART_Init>:
  huart3.Init.BaudRate = 115200;
 8001228:	4a16      	ldr	r2, [pc, #88]	; (8001284 <MX_USART3_UART_Init+0x5c>)
 800122a:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
{
 800122e:	b510      	push	{r4, lr}
  huart3.Instance = USART3;
 8001230:	4c15      	ldr	r4, [pc, #84]	; (8001288 <MX_USART3_UART_Init+0x60>)
  huart3.Init.BaudRate = 115200;
 8001232:	e9c4 2300 	strd	r2, r3, [r4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001236:	2300      	movs	r3, #0
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001238:	220c      	movs	r2, #12
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800123a:	4620      	mov	r0, r4
  huart3.Init.Parity = UART_PARITY_NONE;
 800123c:	6123      	str	r3, [r4, #16]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800123e:	e9c4 3302 	strd	r3, r3, [r4, #8]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001242:	e9c4 2305 	strd	r2, r3, [r4, #20]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001246:	e9c4 3307 	strd	r3, r3, [r4, #28]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800124a:	e9c4 3309 	strd	r3, r3, [r4, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800124e:	f005 fd2d 	bl	8006cac <HAL_UART_Init>
 8001252:	4601      	mov	r1, r0
 8001254:	b108      	cbz	r0, 800125a <MX_USART3_UART_Init+0x32>
 8001256:	b672      	cpsid	i
  while (1)
 8001258:	e7fe      	b.n	8001258 <MX_USART3_UART_Init+0x30>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800125a:	4620      	mov	r0, r4
 800125c:	f005 fd93 	bl	8006d86 <HAL_UARTEx_SetTxFifoThreshold>
 8001260:	4601      	mov	r1, r0
 8001262:	b108      	cbz	r0, 8001268 <MX_USART3_UART_Init+0x40>
 8001264:	b672      	cpsid	i
  while (1)
 8001266:	e7fe      	b.n	8001266 <MX_USART3_UART_Init+0x3e>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001268:	4620      	mov	r0, r4
 800126a:	f005 fdb0 	bl	8006dce <HAL_UARTEx_SetRxFifoThreshold>
 800126e:	b108      	cbz	r0, 8001274 <MX_USART3_UART_Init+0x4c>
 8001270:	b672      	cpsid	i
  while (1)
 8001272:	e7fe      	b.n	8001272 <MX_USART3_UART_Init+0x4a>
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001274:	4620      	mov	r0, r4
 8001276:	f005 fd6b 	bl	8006d50 <HAL_UARTEx_DisableFifoMode>
 800127a:	b108      	cbz	r0, 8001280 <MX_USART3_UART_Init+0x58>
 800127c:	b672      	cpsid	i
  while (1)
 800127e:	e7fe      	b.n	800127e <MX_USART3_UART_Init+0x56>
}
 8001280:	bd10      	pop	{r4, pc}
 8001282:	bf00      	nop
 8001284:	40004800 	.word	0x40004800
 8001288:	24001720 	.word	0x24001720

0800128c <Error_Handler>:
 800128c:	b672      	cpsid	i
  while (1)
 800128e:	e7fe      	b.n	800128e <Error_Handler+0x2>

08001290 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001290:	4b07      	ldr	r3, [pc, #28]	; (80012b0 <HAL_MspInit+0x20>)
{
 8001292:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001294:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8001298:	f042 0202 	orr.w	r2, r2, #2
 800129c:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 80012a0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80012a4:	f003 0302 	and.w	r3, r3, #2
 80012a8:	9301      	str	r3, [sp, #4]
 80012aa:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012ac:	b002      	add	sp, #8
 80012ae:	4770      	bx	lr
 80012b0:	58024400 	.word	0x58024400

080012b4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80012b4:	b510      	push	{r4, lr}
 80012b6:	b08e      	sub	sp, #56	; 0x38
 80012b8:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ba:	2214      	movs	r2, #20
 80012bc:	2100      	movs	r1, #0
 80012be:	a809      	add	r0, sp, #36	; 0x24
 80012c0:	f010 ff84 	bl	80121cc <memset>
  if(hadc->Instance==ADC1)
 80012c4:	6823      	ldr	r3, [r4, #0]
 80012c6:	4a54      	ldr	r2, [pc, #336]	; (8001418 <HAL_ADC_MspInit+0x164>)
 80012c8:	4293      	cmp	r3, r2
 80012ca:	d13f      	bne.n	800134c <HAL_ADC_MspInit+0x98>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80012cc:	4a53      	ldr	r2, [pc, #332]	; (800141c <HAL_ADC_MspInit+0x168>)
 80012ce:	6813      	ldr	r3, [r2, #0]
 80012d0:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80012d2:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 80012d4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80012d6:	d10c      	bne.n	80012f2 <HAL_ADC_MspInit+0x3e>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80012d8:	4b51      	ldr	r3, [pc, #324]	; (8001420 <HAL_ADC_MspInit+0x16c>)
 80012da:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 80012de:	f042 0220 	orr.w	r2, r2, #32
 80012e2:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 80012e6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80012ea:	f003 0320 	and.w	r3, r3, #32
 80012ee:	9301      	str	r3, [sp, #4]
 80012f0:	9b01      	ldr	r3, [sp, #4]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012f2:	4b4b      	ldr	r3, [pc, #300]	; (8001420 <HAL_ADC_MspInit+0x16c>)
    PA1_C     ------> ADC1_INP1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012f4:	a909      	add	r1, sp, #36	; 0x24
 80012f6:	484b      	ldr	r0, [pc, #300]	; (8001424 <HAL_ADC_MspInit+0x170>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012f8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80012fc:	f042 0204 	orr.w	r2, r2, #4
 8001300:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001304:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001308:	f002 0204 	and.w	r2, r2, #4
 800130c:	9202      	str	r2, [sp, #8]
 800130e:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001310:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001314:	f042 0201 	orr.w	r2, r2, #1
 8001318:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800131c:	2201      	movs	r2, #1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800131e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001322:	f003 0301 	and.w	r3, r3, #1
 8001326:	9303      	str	r3, [sp, #12]
 8001328:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800132a:	2303      	movs	r3, #3
 800132c:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001330:	f002 f824 	bl	800337c <HAL_GPIO_Init>
    __HAL_RCC_GPIOA_CLK_ENABLE();
    /**ADC2 GPIO Configuration
    PA0_C     ------> ADC2_INP0
    PA1_C     ------> ADC2_INP1
    */
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 8001334:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8001338:	4608      	mov	r0, r1
 800133a:	f000 fef7 	bl	800212c <HAL_SYSCFG_AnalogSwitchConfig>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 800133e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8001342:	4608      	mov	r0, r1
 8001344:	f000 fef2 	bl	800212c <HAL_SYSCFG_AnalogSwitchConfig>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001348:	b00e      	add	sp, #56	; 0x38
 800134a:	bd10      	pop	{r4, pc}
  else if(hadc->Instance==ADC2)
 800134c:	4a36      	ldr	r2, [pc, #216]	; (8001428 <HAL_ADC_MspInit+0x174>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d120      	bne.n	8001394 <HAL_ADC_MspInit+0xe0>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001352:	4a32      	ldr	r2, [pc, #200]	; (800141c <HAL_ADC_MspInit+0x168>)
 8001354:	6813      	ldr	r3, [r2, #0]
 8001356:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001358:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 800135a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800135c:	d10c      	bne.n	8001378 <HAL_ADC_MspInit+0xc4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800135e:	4b30      	ldr	r3, [pc, #192]	; (8001420 <HAL_ADC_MspInit+0x16c>)
 8001360:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8001364:	f042 0220 	orr.w	r2, r2, #32
 8001368:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 800136c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001370:	f003 0320 	and.w	r3, r3, #32
 8001374:	9304      	str	r3, [sp, #16]
 8001376:	9b04      	ldr	r3, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001378:	4b29      	ldr	r3, [pc, #164]	; (8001420 <HAL_ADC_MspInit+0x16c>)
 800137a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800137e:	f042 0201 	orr.w	r2, r2, #1
 8001382:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001386:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800138a:	f003 0301 	and.w	r3, r3, #1
 800138e:	9305      	str	r3, [sp, #20]
 8001390:	9b05      	ldr	r3, [sp, #20]
 8001392:	e7cf      	b.n	8001334 <HAL_ADC_MspInit+0x80>
  else if(hadc->Instance==ADC3)
 8001394:	4a25      	ldr	r2, [pc, #148]	; (800142c <HAL_ADC_MspInit+0x178>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d1d6      	bne.n	8001348 <HAL_ADC_MspInit+0x94>
    __HAL_RCC_ADC3_CLK_ENABLE();
 800139a:	4b21      	ldr	r3, [pc, #132]	; (8001420 <HAL_ADC_MspInit+0x16c>)
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800139c:	2403      	movs	r4, #3
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800139e:	a909      	add	r1, sp, #36	; 0x24
 80013a0:	4823      	ldr	r0, [pc, #140]	; (8001430 <HAL_ADC_MspInit+0x17c>)
    __HAL_RCC_ADC3_CLK_ENABLE();
 80013a2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80013a6:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80013aa:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80013ae:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80013b2:	f002 7280 	and.w	r2, r2, #16777216	; 0x1000000
 80013b6:	9206      	str	r2, [sp, #24]
 80013b8:	9a06      	ldr	r2, [sp, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80013ba:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80013be:	f042 0220 	orr.w	r2, r2, #32
 80013c2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80013c6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80013ca:	f002 0220 	and.w	r2, r2, #32
 80013ce:	9207      	str	r2, [sp, #28]
 80013d0:	9a07      	ldr	r2, [sp, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013d2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80013d6:	f042 0204 	orr.w	r2, r2, #4
 80013da:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80013de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013e2:	f003 0304 	and.w	r3, r3, #4
 80013e6:	9308      	str	r3, [sp, #32]
 80013e8:	9b08      	ldr	r3, [sp, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013ee:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80013f2:	f001 ffc3 	bl	800337c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80013f6:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013f8:	a909      	add	r1, sp, #36	; 0x24
 80013fa:	480a      	ldr	r0, [pc, #40]	; (8001424 <HAL_ADC_MspInit+0x170>)
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013fc:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001400:	2300      	movs	r3, #0
 8001402:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001404:	f001 ffba 	bl	800337c <HAL_GPIO_Init>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8001408:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 800140c:	4608      	mov	r0, r1
 800140e:	f000 fe8d 	bl	800212c <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8001412:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8001416:	e794      	b.n	8001342 <HAL_ADC_MspInit+0x8e>
 8001418:	40022000 	.word	0x40022000
 800141c:	240017b8 	.word	0x240017b8
 8001420:	58024400 	.word	0x58024400
 8001424:	58020800 	.word	0x58020800
 8001428:	40022100 	.word	0x40022100
 800142c:	58026000 	.word	0x58026000
 8001430:	58021400 	.word	0x58021400

08001434 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 8001434:	6802      	ldr	r2, [r0, #0]
{
 8001436:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 8001438:	4b09      	ldr	r3, [pc, #36]	; (8001460 <HAL_CRC_MspInit+0x2c>)
 800143a:	429a      	cmp	r2, r3
 800143c:	d10d      	bne.n	800145a <HAL_CRC_MspInit+0x26>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800143e:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8001442:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001446:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800144a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800144e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001452:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001456:	9301      	str	r3, [sp, #4]
 8001458:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800145a:	b002      	add	sp, #8
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	58024c00 	.word	0x58024c00

08001464 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001464:	b570      	push	{r4, r5, r6, lr}
 8001466:	b090      	sub	sp, #64	; 0x40
 8001468:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800146a:	2214      	movs	r2, #20
 800146c:	2100      	movs	r1, #0
 800146e:	a80b      	add	r0, sp, #44	; 0x2c
 8001470:	f010 feac 	bl	80121cc <memset>
  if(heth->Instance==ETH)
 8001474:	6822      	ldr	r2, [r4, #0]
 8001476:	4b64      	ldr	r3, [pc, #400]	; (8001608 <HAL_ETH_MspInit+0x1a4>)
 8001478:	429a      	cmp	r2, r3
 800147a:	f040 80c2 	bne.w	8001602 <HAL_ETH_MspInit+0x19e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 800147e:	4b63      	ldr	r3, [pc, #396]	; (800160c <HAL_ETH_MspInit+0x1a8>)
    PB1     ------> ETH_RXD3
    PC5     ------> ETH_RXD1
    PB0     ------> ETH_RXD2
    */
    GPIO_InitStruct.Pin = MII_TX_EN_Pin|MII_TXD1_Pin|MII_TXD0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001480:	2602      	movs	r6, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001482:	250b      	movs	r5, #11
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001484:	a90b      	add	r1, sp, #44	; 0x2c
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8001486:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8

    GPIO_InitStruct.Pin = MII_TXD3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148a:	2400      	movs	r4, #0
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800148c:	4860      	ldr	r0, [pc, #384]	; (8001610 <HAL_ETH_MspInit+0x1ac>)
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 800148e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001492:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8001496:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 800149a:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 800149e:	9201      	str	r2, [sp, #4]
 80014a0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80014a2:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 80014a6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80014aa:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 80014ae:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 80014b2:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 80014b6:	9202      	str	r2, [sp, #8]
 80014b8:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80014ba:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 80014be:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80014c2:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 80014c6:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 80014ca:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80014ce:	9203      	str	r2, [sp, #12]
 80014d0:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80014d2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80014d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80014da:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80014de:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80014e2:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80014e6:	9204      	str	r2, [sp, #16]
 80014e8:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80014ea:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80014ee:	f042 0210 	orr.w	r2, r2, #16
 80014f2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80014f6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80014fa:	f002 0210 	and.w	r2, r2, #16
 80014fe:	9205      	str	r2, [sp, #20]
 8001500:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001502:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001506:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800150a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800150e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001512:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8001516:	9206      	str	r2, [sp, #24]
 8001518:	9a06      	ldr	r2, [sp, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800151a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800151e:	f042 0204 	orr.w	r2, r2, #4
 8001522:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001526:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800152a:	f002 0204 	and.w	r2, r2, #4
 800152e:	9207      	str	r2, [sp, #28]
 8001530:	9a07      	ldr	r2, [sp, #28]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001532:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001536:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800153a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800153e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001542:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001546:	9208      	str	r2, [sp, #32]
 8001548:	9a08      	ldr	r2, [sp, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800154a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800154e:	f042 0201 	orr.w	r2, r2, #1
 8001552:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001556:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800155a:	f002 0201 	and.w	r2, r2, #1
 800155e:	9209      	str	r2, [sp, #36]	; 0x24
 8001560:	9a09      	ldr	r2, [sp, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001562:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001566:	f042 0202 	orr.w	r2, r2, #2
 800156a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800156e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001572:	950f      	str	r5, [sp, #60]	; 0x3c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001574:	f003 0302 	and.w	r3, r3, #2
 8001578:	930a      	str	r3, [sp, #40]	; 0x28
 800157a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800157c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001580:	e9cd 360b 	strd	r3, r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001584:	f001 fefa 	bl	800337c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = MII_TXD3_Pin;
 8001588:	2304      	movs	r3, #4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
    HAL_GPIO_Init(MII_TXD3_GPIO_Port, &GPIO_InitStruct);
 800158a:	a90b      	add	r1, sp, #44	; 0x2c
 800158c:	4821      	ldr	r0, [pc, #132]	; (8001614 <HAL_ETH_MspInit+0x1b0>)
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800158e:	950f      	str	r5, [sp, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001590:	e9cd 360b 	strd	r3, r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001594:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
    HAL_GPIO_Init(MII_TXD3_GPIO_Port, &GPIO_InitStruct);
 8001598:	f001 fef0 	bl	800337c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_RX_ER_Pin;
 800159c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
    HAL_GPIO_Init(MII_RX_ER_GPIO_Port, &GPIO_InitStruct);
 80015a0:	a90b      	add	r1, sp, #44	; 0x2c
 80015a2:	481d      	ldr	r0, [pc, #116]	; (8001618 <HAL_ETH_MspInit+0x1b4>)
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80015a4:	950f      	str	r5, [sp, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a6:	e9cd 360b 	strd	r3, r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015aa:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
    HAL_GPIO_Init(MII_RX_ER_GPIO_Port, &GPIO_InitStruct);
 80015ae:	f001 fee5 	bl	800337c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_MDC_Pin|MII_TXD2_Pin|MII_TX_CLK_Pin|MII_RXD0_Pin
 80015b2:	233e      	movs	r3, #62	; 0x3e
                          |MII_RXD1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015b4:	a90b      	add	r1, sp, #44	; 0x2c
 80015b6:	4819      	ldr	r0, [pc, #100]	; (800161c <HAL_ETH_MspInit+0x1b8>)
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80015b8:	950f      	str	r5, [sp, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ba:	e9cd 360b 	strd	r3, r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015be:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015c2:	f001 fedb 	bl	800337c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_CRS_Pin|MII_COL_Pin;
 80015c6:	230c      	movs	r3, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80015c8:	a90b      	add	r1, sp, #44	; 0x2c
 80015ca:	4815      	ldr	r0, [pc, #84]	; (8001620 <HAL_ETH_MspInit+0x1bc>)
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80015cc:	950f      	str	r5, [sp, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ce:	e9cd 360b 	strd	r3, r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d2:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80015d6:	f001 fed1 	bl	800337c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_MDIO_Pin|MII_RX_CLK_Pin|MII_RX_DV_Pin;
 80015da:	2386      	movs	r3, #134	; 0x86
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015dc:	a90b      	add	r1, sp, #44	; 0x2c
 80015de:	4811      	ldr	r0, [pc, #68]	; (8001624 <HAL_ETH_MspInit+0x1c0>)
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80015e0:	950f      	str	r5, [sp, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e2:	e9cd 360b 	strd	r3, r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e6:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ea:	f001 fec7 	bl	800337c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_RX_D3_Pin|MII_RX_D2_Pin;
 80015ee:	2303      	movs	r3, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015f0:	a90b      	add	r1, sp, #44	; 0x2c
 80015f2:	480d      	ldr	r0, [pc, #52]	; (8001628 <HAL_ETH_MspInit+0x1c4>)
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80015f4:	950f      	str	r5, [sp, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f6:	e9cd 360b 	strd	r3, r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015fa:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015fe:	f001 febd 	bl	800337c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001602:	b010      	add	sp, #64	; 0x40
 8001604:	bd70      	pop	{r4, r5, r6, pc}
 8001606:	bf00      	nop
 8001608:	40028000 	.word	0x40028000
 800160c:	58024400 	.word	0x58024400
 8001610:	58021800 	.word	0x58021800
 8001614:	58021000 	.word	0x58021000
 8001618:	58022000 	.word	0x58022000
 800161c:	58020800 	.word	0x58020800
 8001620:	58021c00 	.word	0x58021c00
 8001624:	58020000 	.word	0x58020000
 8001628:	58020400 	.word	0x58020400

0800162c <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 800162c:	b510      	push	{r4, lr}
 800162e:	b0b8      	sub	sp, #224	; 0xe0
 8001630:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001632:	2214      	movs	r2, #20
 8001634:	2100      	movs	r1, #0
 8001636:	a803      	add	r0, sp, #12
 8001638:	f010 fdc8 	bl	80121cc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800163c:	22c0      	movs	r2, #192	; 0xc0
 800163e:	2100      	movs	r1, #0
 8001640:	a808      	add	r0, sp, #32
 8001642:	f010 fdc3 	bl	80121cc <memset>
  if(hfdcan->Instance==FDCAN1)
 8001646:	6822      	ldr	r2, [r4, #0]
 8001648:	4b1c      	ldr	r3, [pc, #112]	; (80016bc <HAL_FDCAN_MspInit+0x90>)
 800164a:	429a      	cmp	r2, r3
 800164c:	d134      	bne.n	80016b8 <HAL_FDCAN_MspInit+0x8c>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800164e:	2300      	movs	r3, #0
 8001650:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001654:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001656:	e9cd 2308 	strd	r2, r3, [sp, #32]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 800165a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800165e:	9324      	str	r3, [sp, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001660:	f003 fb7a 	bl	8004d58 <HAL_RCCEx_PeriphCLKConfig>
 8001664:	b108      	cbz	r0, 800166a <HAL_FDCAN_MspInit+0x3e>
    {
      Error_Handler();
 8001666:	f7ff fe11 	bl	800128c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 800166a:	4b15      	ldr	r3, [pc, #84]	; (80016c0 <HAL_FDCAN_MspInit+0x94>)
    GPIO_InitStruct.Pin = FDCAN1_RX_Pin|FDCAN1_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800166c:	a903      	add	r1, sp, #12
 800166e:	4815      	ldr	r0, [pc, #84]	; (80016c4 <HAL_FDCAN_MspInit+0x98>)
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001670:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
 8001674:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001678:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
 800167c:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
 8001680:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8001684:	9201      	str	r2, [sp, #4]
 8001686:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001688:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800168c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001690:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001694:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001698:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800169c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016a0:	9302      	str	r3, [sp, #8]
 80016a2:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a4:	2302      	movs	r3, #2
 80016a6:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016aa:	2300      	movs	r3, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ac:	e9cd 3305 	strd	r3, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80016b0:	2309      	movs	r3, #9
 80016b2:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80016b4:	f001 fe62 	bl	800337c <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 80016b8:	b038      	add	sp, #224	; 0xe0
 80016ba:	bd10      	pop	{r4, pc}
 80016bc:	4000a000 	.word	0x4000a000
 80016c0:	58024400 	.word	0x58024400
 80016c4:	58021c00 	.word	0x58021c00

080016c8 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80016c8:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ca:	2214      	movs	r2, #20
{
 80016cc:	b0ba      	sub	sp, #232	; 0xe8
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016ce:	25c0      	movs	r5, #192	; 0xc0
{
 80016d0:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d2:	2100      	movs	r1, #0
 80016d4:	eb0d 0002 	add.w	r0, sp, r2
 80016d8:	f010 fd78 	bl	80121cc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016dc:	462a      	mov	r2, r5
 80016de:	2100      	movs	r1, #0
 80016e0:	a80a      	add	r0, sp, #40	; 0x28
 80016e2:	f010 fd73 	bl	80121cc <memset>
  if(hltdc->Instance==LTDC)
 80016e6:	6822      	ldr	r2, [r4, #0]
 80016e8:	4b44      	ldr	r3, [pc, #272]	; (80017fc <HAL_LTDC_MspInit+0x134>)
 80016ea:	429a      	cmp	r2, r3
 80016ec:	f040 8083 	bne.w	80017f6 <HAL_LTDC_MspInit+0x12e>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80016f0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80016f4:	2300      	movs	r3, #0
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
    PeriphClkInitStruct.PLL3.PLL3R = 2;
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016f6:	a80a      	add	r0, sp, #40	; 0x28
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80016f8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    PeriphClkInitStruct.PLL3.PLL3M = 32;
 80016fc:	2320      	movs	r3, #32
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 80016fe:	f44f 6240 	mov.w	r2, #3072	; 0xc00
    PeriphClkInitStruct.PLL3.PLL3N = 192;
 8001702:	e9cd 3514 	strd	r3, r5, [sp, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8001706:	2302      	movs	r3, #2
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8001708:	e9cd 3316 	strd	r3, r3, [sp, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 800170c:	9318      	str	r3, [sp, #96]	; 0x60
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 800170e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001712:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001716:	f003 fb1f 	bl	8004d58 <HAL_RCCEx_PeriphCLKConfig>
 800171a:	b108      	cbz	r0, 8001720 <HAL_LTDC_MspInit+0x58>
    {
      Error_Handler();
 800171c:	f7ff fdb6 	bl	800128c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001720:	4b37      	ldr	r3, [pc, #220]	; (8001800 <HAL_LTDC_MspInit+0x138>)
    PJ3     ------> LTDC_R4
    PJ4     ------> LTDC_R5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_3
                          |GPIO_PIN_7|GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001722:	2602      	movs	r6, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001724:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001726:	250e      	movs	r5, #14
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001728:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800172c:	a905      	add	r1, sp, #20
 800172e:	4835      	ldr	r0, [pc, #212]	; (8001804 <HAL_LTDC_MspInit+0x13c>)
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001730:	f042 0208 	orr.w	r2, r2, #8
 8001734:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 8001738:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 800173c:	f002 0208 	and.w	r2, r2, #8
 8001740:	9200      	str	r2, [sp, #0]
 8001742:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8001744:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001748:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800174c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001750:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001754:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8001758:	9201      	str	r2, [sp, #4]
 800175a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800175c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001760:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001764:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001768:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800176c:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8001770:	9202      	str	r2, [sp, #8]
 8001772:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001774:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001778:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800177c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001780:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001784:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8001788:	9203      	str	r2, [sp, #12]
 800178a:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800178c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001790:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001794:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001798:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800179c:	9509      	str	r5, [sp, #36]	; 0x24
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800179e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017a2:	9304      	str	r3, [sp, #16]
 80017a4:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a6:	23fc      	movs	r3, #252	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a8:	e9cd 4407 	strd	r4, r4, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ac:	e9cd 3605 	strd	r3, r6, [sp, #20]
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80017b0:	f001 fde4 	bl	800337c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_9|GPIO_PIN_12
 80017b4:	f24d 2303 	movw	r3, #53763	; 0xd203
                          |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80017b8:	a905      	add	r1, sp, #20
 80017ba:	4813      	ldr	r0, [pc, #76]	; (8001808 <HAL_LTDC_MspInit+0x140>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80017bc:	9509      	str	r5, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017be:	e9cd 3605 	strd	r3, r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c2:	e9cd 4407 	strd	r4, r4, [sp, #28]
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80017c6:	f001 fdd9 	bl	800337c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DISP_Pin|GPIO_PIN_14|GPIO_PIN_12|GPIO_PIN_13
 80017ca:	f64f 73fb 	movw	r3, #65531	; 0xfffb
                          |GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80017ce:	a905      	add	r1, sp, #20
 80017d0:	480e      	ldr	r0, [pc, #56]	; (800180c <HAL_LTDC_MspInit+0x144>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80017d2:	9509      	str	r5, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d4:	e9cd 3605 	strd	r3, r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d8:	e9cd 4407 	strd	r4, r4, [sp, #28]
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80017dc:	f001 fdce 	bl	800337c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80017e0:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80017e4:	a905      	add	r1, sp, #20
 80017e6:	480a      	ldr	r0, [pc, #40]	; (8001810 <HAL_LTDC_MspInit+0x148>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80017e8:	9509      	str	r5, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ea:	e9cd 3605 	strd	r3, r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ee:	e9cd 4407 	strd	r4, r4, [sp, #28]
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80017f2:	f001 fdc3 	bl	800337c <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80017f6:	b03a      	add	sp, #232	; 0xe8
 80017f8:	bd70      	pop	{r4, r5, r6, pc}
 80017fa:	bf00      	nop
 80017fc:	50001000 	.word	0x50001000
 8001800:	58024400 	.word	0x58024400
 8001804:	58022800 	.word	0x58022800
 8001808:	58022000 	.word	0x58022000
 800180c:	58022400 	.word	0x58022400
 8001810:	58021c00 	.word	0x58021c00

08001814 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001814:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001816:	2214      	movs	r2, #20
{
 8001818:	b0bb      	sub	sp, #236	; 0xec
 800181a:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800181c:	2100      	movs	r1, #0
 800181e:	eb0d 0002 	add.w	r0, sp, r2
 8001822:	f010 fcd3 	bl	80121cc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001826:	22c0      	movs	r2, #192	; 0xc0
 8001828:	2100      	movs	r1, #0
 800182a:	a80a      	add	r0, sp, #40	; 0x28
 800182c:	f010 fcce 	bl	80121cc <memset>
  if(hqspi->Instance==QUADSPI)
 8001830:	6822      	ldr	r2, [r4, #0]
 8001832:	4b38      	ldr	r3, [pc, #224]	; (8001914 <HAL_QSPI_MspInit+0x100>)
 8001834:	429a      	cmp	r2, r3
 8001836:	d16a      	bne.n	800190e <HAL_QSPI_MspInit+0xfa>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 8001838:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800183c:	2300      	movs	r3, #0
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800183e:	a80a      	add	r0, sp, #40	; 0x28
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 8001840:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001844:	f003 fa88 	bl	8004d58 <HAL_RCCEx_PeriphCLKConfig>
 8001848:	b108      	cbz	r0, 800184e <HAL_QSPI_MspInit+0x3a>
    {
      Error_Handler();
 800184a:	f7ff fd1f 	bl	800128c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800184e:	4b32      	ldr	r3, [pc, #200]	; (8001918 <HAL_QSPI_MspInit+0x104>)
    PF10     ------> QUADSPI_CLK
    PF9     ------> QUADSPI_BK1_IO1
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001850:	2502      	movs	r5, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001852:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001854:	270a      	movs	r7, #10
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001856:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800185a:	a905      	add	r1, sp, #20
 800185c:	482f      	ldr	r0, [pc, #188]	; (800191c <HAL_QSPI_MspInit+0x108>)

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800185e:	2609      	movs	r6, #9
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001860:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001864:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8001868:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800186c:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001870:	9201      	str	r2, [sp, #4]
 8001872:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001874:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001878:	f042 0202 	orr.w	r2, r2, #2
 800187c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001880:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001884:	f002 0202 	and.w	r2, r2, #2
 8001888:	9202      	str	r2, [sp, #8]
 800188a:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800188c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001890:	f042 0220 	orr.w	r2, r2, #32
 8001894:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001898:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800189c:	f002 0220 	and.w	r2, r2, #32
 80018a0:	9203      	str	r2, [sp, #12]
 80018a2:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018a4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80018a8:	f042 0208 	orr.w	r2, r2, #8
 80018ac:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80018b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80018b4:	9709      	str	r7, [sp, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018b6:	f003 0308 	and.w	r3, r3, #8
 80018ba:	9304      	str	r3, [sp, #16]
 80018bc:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018be:	2340      	movs	r3, #64	; 0x40
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c0:	e9cd 4407 	strd	r4, r4, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c4:	e9cd 3505 	strd	r3, r5, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018c8:	f001 fd58 	bl	800337c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
 80018cc:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80018d0:	a905      	add	r1, sp, #20
 80018d2:	4813      	ldr	r0, [pc, #76]	; (8001920 <HAL_QSPI_MspInit+0x10c>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80018d4:	9609      	str	r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d6:	e9cd 3505 	strd	r3, r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018da:	e9cd 4407 	strd	r4, r4, [sp, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80018de:	f001 fd4d 	bl	800337c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80018e2:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80018e6:	a905      	add	r1, sp, #20
 80018e8:	480d      	ldr	r0, [pc, #52]	; (8001920 <HAL_QSPI_MspInit+0x10c>)
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80018ea:	9709      	str	r7, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ec:	e9cd 3505 	strd	r3, r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f0:	e9cd 4407 	strd	r4, r4, [sp, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80018f4:	f001 fd42 	bl	800337c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80018f8:	f44f 6300 	mov.w	r3, #2048	; 0x800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018fc:	a905      	add	r1, sp, #20
 80018fe:	4809      	ldr	r0, [pc, #36]	; (8001924 <HAL_QSPI_MspInit+0x110>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001900:	9609      	str	r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001902:	e9cd 3505 	strd	r3, r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001906:	e9cd 4407 	strd	r4, r4, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800190a:	f001 fd37 	bl	800337c <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 800190e:	b03b      	add	sp, #236	; 0xec
 8001910:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001912:	bf00      	nop
 8001914:	52005000 	.word	0x52005000
 8001918:	58024400 	.word	0x58024400
 800191c:	58020400 	.word	0x58020400
 8001920:	58021400 	.word	0x58021400
 8001924:	58020c00 	.word	0x58020c00

08001928 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001928:	b510      	push	{r4, lr}
 800192a:	b0b0      	sub	sp, #192	; 0xc0
 800192c:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800192e:	22c0      	movs	r2, #192	; 0xc0
 8001930:	2100      	movs	r1, #0
 8001932:	4668      	mov	r0, sp
 8001934:	f010 fc4a 	bl	80121cc <memset>
  if(hrtc->Instance==RTC)
 8001938:	6822      	ldr	r2, [r4, #0]
 800193a:	4b0c      	ldr	r3, [pc, #48]	; (800196c <HAL_RTC_MspInit+0x44>)
 800193c:	429a      	cmp	r2, r3
 800193e:	d112      	bne.n	8001966 <HAL_RTC_MspInit+0x3e>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001940:	2300      	movs	r3, #0
 8001942:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001946:	4668      	mov	r0, sp
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001948:	e9cd 2300 	strd	r2, r3, [sp]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800194c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001950:	932d      	str	r3, [sp, #180]	; 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001952:	f003 fa01 	bl	8004d58 <HAL_RCCEx_PeriphCLKConfig>
 8001956:	b108      	cbz	r0, 800195c <HAL_RTC_MspInit+0x34>
    {
      Error_Handler();
 8001958:	f7ff fc98 	bl	800128c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800195c:	4a04      	ldr	r2, [pc, #16]	; (8001970 <HAL_RTC_MspInit+0x48>)
 800195e:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8001960:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001964:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001966:	b030      	add	sp, #192	; 0xc0
 8001968:	bd10      	pop	{r4, pc}
 800196a:	bf00      	nop
 800196c:	58004000 	.word	0x58004000
 8001970:	58024400 	.word	0x58024400

08001974 <HAL_MMC_MspInit>:
* This function configures the hardware resources used in this example
* @param hmmc: MMC handle pointer
* @retval None
*/
void HAL_MMC_MspInit(MMC_HandleTypeDef* hmmc)
{
 8001974:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001976:	2214      	movs	r2, #20
{
 8001978:	b0bb      	sub	sp, #236	; 0xec
 800197a:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800197c:	2100      	movs	r1, #0
 800197e:	eb0d 0002 	add.w	r0, sp, r2
 8001982:	f010 fc23 	bl	80121cc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001986:	22c0      	movs	r2, #192	; 0xc0
 8001988:	2100      	movs	r1, #0
 800198a:	a80a      	add	r0, sp, #40	; 0x28
 800198c:	f010 fc1e 	bl	80121cc <memset>
  if(hmmc->Instance==SDMMC1)
 8001990:	6822      	ldr	r2, [r4, #0]
 8001992:	4b32      	ldr	r3, [pc, #200]	; (8001a5c <HAL_MMC_MspInit+0xe8>)
 8001994:	429a      	cmp	r2, r3
 8001996:	d15f      	bne.n	8001a58 <HAL_MMC_MspInit+0xe4>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8001998:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800199c:	2300      	movs	r3, #0
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800199e:	a80a      	add	r0, sp, #40	; 0x28
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 80019a0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019a4:	f003 f9d8 	bl	8004d58 <HAL_RCCEx_PeriphCLKConfig>
 80019a8:	b108      	cbz	r0, 80019ae <HAL_MMC_MspInit+0x3a>
    {
      Error_Handler();
 80019aa:	f7ff fc6f 	bl	800128c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80019ae:	4b2c      	ldr	r3, [pc, #176]	; (8001a60 <HAL_MMC_MspInit+0xec>)
    PC7     ------> SDMMC1_D7
    PC6     ------> SDMMC1_D6
    */
    GPIO_InitStruct.Pin = SDIO1_D2_Pin|SDIO1_D3_Pin|SDIO1_CK_Pin|SDIO1_D0_Pin
                          |SDIO1_D1_Pin|SDIO1_D7_Pin|SDIO1_D6_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b0:	2702      	movs	r7, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019b2:	2600      	movs	r6, #0
 80019b4:	2503      	movs	r5, #3
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80019b6:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80019ba:	240c      	movs	r4, #12
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019bc:	a905      	add	r1, sp, #20
 80019be:	4829      	ldr	r0, [pc, #164]	; (8001a64 <HAL_MMC_MspInit+0xf0>)
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80019c0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80019c4:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 80019c8:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 80019cc:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 80019d0:	9201      	str	r2, [sp, #4]
 80019d2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019d4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80019d8:	f042 0204 	orr.w	r2, r2, #4
 80019dc:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80019e0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80019e4:	f002 0204 	and.w	r2, r2, #4
 80019e8:	9202      	str	r2, [sp, #8]
 80019ea:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ec:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80019f0:	f042 0202 	orr.w	r2, r2, #2
 80019f4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80019f8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80019fc:	f002 0202 	and.w	r2, r2, #2
 8001a00:	9203      	str	r2, [sp, #12]
 8001a02:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a04:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001a08:	f042 0208 	orr.w	r2, r2, #8
 8001a0c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001a10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001a14:	9409      	str	r4, [sp, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a16:	f003 0308 	and.w	r3, r3, #8
 8001a1a:	9304      	str	r3, [sp, #16]
 8001a1c:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a1e:	f44f 53fe 	mov.w	r3, #8128	; 0x1fc0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a22:	e9cd 6507 	strd	r6, r5, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a26:	e9cd 3705 	strd	r3, r7, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a2a:	f001 fca7 	bl	800337c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDIO1_D5_Pin|SDIO1_D4_Pin;
 8001a2e:	f44f 7340 	mov.w	r3, #768	; 0x300
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a32:	a905      	add	r1, sp, #20
 8001a34:	480c      	ldr	r0, [pc, #48]	; (8001a68 <HAL_MMC_MspInit+0xf4>)
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001a36:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a38:	e9cd 3705 	strd	r3, r7, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a3c:	e9cd 6507 	strd	r6, r5, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a40:	f001 fc9c 	bl	800337c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDIO1_CMD_Pin;
 8001a44:	2304      	movs	r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
    HAL_GPIO_Init(SDIO1_CMD_GPIO_Port, &GPIO_InitStruct);
 8001a46:	a905      	add	r1, sp, #20
 8001a48:	4808      	ldr	r0, [pc, #32]	; (8001a6c <HAL_MMC_MspInit+0xf8>)
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001a4a:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a4c:	e9cd 3705 	strd	r3, r7, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a50:	e9cd 6507 	strd	r6, r5, [sp, #28]
    HAL_GPIO_Init(SDIO1_CMD_GPIO_Port, &GPIO_InitStruct);
 8001a54:	f001 fc92 	bl	800337c <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8001a58:	b03b      	add	sp, #236	; 0xec
 8001a5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a5c:	52007000 	.word	0x52007000
 8001a60:	58024400 	.word	0x58024400
 8001a64:	58020800 	.word	0x58020800
 8001a68:	58020400 	.word	0x58020400
 8001a6c:	58020c00 	.word	0x58020c00

08001a70 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a70:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a72:	2214      	movs	r2, #20
{
 8001a74:	b0ba      	sub	sp, #232	; 0xe8
 8001a76:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a78:	2100      	movs	r1, #0
 8001a7a:	eb0d 0002 	add.w	r0, sp, r2
 8001a7e:	f010 fba5 	bl	80121cc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a82:	22c0      	movs	r2, #192	; 0xc0
 8001a84:	2100      	movs	r1, #0
 8001a86:	a80a      	add	r0, sp, #40	; 0x28
 8001a88:	f010 fba0 	bl	80121cc <memset>
  if(hspi->Instance==SPI2)
 8001a8c:	6822      	ldr	r2, [r4, #0]
 8001a8e:	4b37      	ldr	r3, [pc, #220]	; (8001b6c <HAL_SPI_MspInit+0xfc>)
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d168      	bne.n	8001b66 <HAL_SPI_MspInit+0xf6>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001a94:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001a98:	2300      	movs	r3, #0
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a9a:	a80a      	add	r0, sp, #40	; 0x28
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001a9c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001aa0:	f003 f95a 	bl	8004d58 <HAL_RCCEx_PeriphCLKConfig>
 8001aa4:	b108      	cbz	r0, 8001aaa <HAL_SPI_MspInit+0x3a>
    {
      Error_Handler();
 8001aa6:	f7ff fbf1 	bl	800128c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001aaa:	4b31      	ldr	r3, [pc, #196]	; (8001b70 <HAL_SPI_MspInit+0x100>)
    PD3     ------> SPI2_SCK
    PI2     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aac:	2502      	movs	r5, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aae:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ab0:	a905      	add	r1, sp, #20
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001ab2:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8

    GPIO_InitStruct.Pin = GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001ab6:	2605      	movs	r6, #5
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ab8:	482e      	ldr	r0, [pc, #184]	; (8001b74 <HAL_SPI_MspInit+0x104>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001aba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001abe:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8001ac2:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8001ac6:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001aca:	9201      	str	r2, [sp, #4]
 8001acc:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ace:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001ad2:	f042 0202 	orr.w	r2, r2, #2
 8001ad6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001ada:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001ade:	f002 0202 	and.w	r2, r2, #2
 8001ae2:	9202      	str	r2, [sp, #8]
 8001ae4:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ae6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001aea:	f042 0208 	orr.w	r2, r2, #8
 8001aee:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001af2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001af6:	f002 0208 	and.w	r2, r2, #8
 8001afa:	9203      	str	r2, [sp, #12]
 8001afc:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001afe:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001b02:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b06:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001b0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b12:	9304      	str	r3, [sp, #16]
 8001b14:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b16:	2310      	movs	r3, #16
 8001b18:	e9cd 3505 	strd	r3, r5, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8001b1c:	2307      	movs	r3, #7
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b1e:	e9cd 4407 	strd	r4, r4, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8001b22:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b24:	f001 fc2a 	bl	800337c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001b28:	2308      	movs	r3, #8
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b2a:	a905      	add	r1, sp, #20
 8001b2c:	4812      	ldr	r0, [pc, #72]	; (8001b78 <HAL_SPI_MspInit+0x108>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001b2e:	9609      	str	r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b30:	e9cd 3505 	strd	r3, r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b34:	e9cd 4407 	strd	r4, r4, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b38:	f001 fc20 	bl	800337c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001b3c:	2304      	movs	r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001b3e:	a905      	add	r1, sp, #20
 8001b40:	480e      	ldr	r0, [pc, #56]	; (8001b7c <HAL_SPI_MspInit+0x10c>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001b42:	9609      	str	r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b44:	e9cd 3505 	strd	r3, r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b48:	e9cd 4407 	strd	r4, r4, [sp, #28]
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001b4c:	f001 fc16 	bl	800337c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001b50:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b54:	a905      	add	r1, sp, #20
 8001b56:	4807      	ldr	r0, [pc, #28]	; (8001b74 <HAL_SPI_MspInit+0x104>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001b58:	9609      	str	r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b5a:	e9cd 3505 	strd	r3, r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b5e:	e9cd 4407 	strd	r4, r4, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b62:	f001 fc0b 	bl	800337c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001b66:	b03a      	add	sp, #232	; 0xe8
 8001b68:	bd70      	pop	{r4, r5, r6, pc}
 8001b6a:	bf00      	nop
 8001b6c:	40003800 	.word	0x40003800
 8001b70:	58024400 	.word	0x58024400
 8001b74:	58020400 	.word	0x58020400
 8001b78:	58020c00 	.word	0x58020c00
 8001b7c:	58022000 	.word	0x58022000

08001b80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b80:	b510      	push	{r4, lr}
 8001b82:	b0b8      	sub	sp, #224	; 0xe0
 8001b84:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b86:	2214      	movs	r2, #20
 8001b88:	2100      	movs	r1, #0
 8001b8a:	a803      	add	r0, sp, #12
 8001b8c:	f010 fb1e 	bl	80121cc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b90:	22c0      	movs	r2, #192	; 0xc0
 8001b92:	2100      	movs	r1, #0
 8001b94:	a808      	add	r0, sp, #32
 8001b96:	f010 fb19 	bl	80121cc <memset>
  if(huart->Instance==USART3)
 8001b9a:	6822      	ldr	r2, [r4, #0]
 8001b9c:	4b1a      	ldr	r3, [pc, #104]	; (8001c08 <HAL_UART_MspInit+0x88>)
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	d130      	bne.n	8001c04 <HAL_UART_MspInit+0x84>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001ba2:	2202      	movs	r2, #2
 8001ba4:	2300      	movs	r3, #0
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ba6:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001ba8:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001bac:	f003 f8d4 	bl	8004d58 <HAL_RCCEx_PeriphCLKConfig>
 8001bb0:	b108      	cbz	r0, 8001bb6 <HAL_UART_MspInit+0x36>
    {
      Error_Handler();
 8001bb2:	f7ff fb6b 	bl	800128c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001bb6:	4b15      	ldr	r3, [pc, #84]	; (8001c0c <HAL_UART_MspInit+0x8c>)
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin|GPIO_PIN_12|GPIO_PIN_13;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bb8:	a903      	add	r1, sp, #12
 8001bba:	4815      	ldr	r0, [pc, #84]	; (8001c10 <HAL_UART_MspInit+0x90>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8001bbc:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8001bc0:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001bc4:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8001bc8:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8001bcc:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8001bd0:	9201      	str	r2, [sp, #4]
 8001bd2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bd4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001bd8:	f042 0202 	orr.w	r2, r2, #2
 8001bdc:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be0:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001be4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001be8:	f003 0302 	and.w	r3, r3, #2
 8001bec:	9302      	str	r3, [sp, #8]
 8001bee:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf0:	2302      	movs	r3, #2
 8001bf2:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf6:	2300      	movs	r3, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf8:	e9cd 3305 	strd	r3, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001bfc:	2307      	movs	r3, #7
 8001bfe:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c00:	f001 fbbc 	bl	800337c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001c04:	b038      	add	sp, #224	; 0xe0
 8001c06:	bd10      	pop	{r4, pc}
 8001c08:	40004800 	.word	0x40004800
 8001c0c:	58024400 	.word	0x58024400
 8001c10:	58020400 	.word	0x58020400

08001c14 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001c14:	b530      	push	{r4, r5, lr}
 8001c16:	b0b9      	sub	sp, #228	; 0xe4
 8001c18:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c1a:	2214      	movs	r2, #20
 8001c1c:	2100      	movs	r1, #0
 8001c1e:	a803      	add	r0, sp, #12
 8001c20:	f010 fad4 	bl	80121cc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c24:	22c0      	movs	r2, #192	; 0xc0
 8001c26:	2100      	movs	r1, #0
 8001c28:	a808      	add	r0, sp, #32
 8001c2a:	f010 facf 	bl	80121cc <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001c2e:	6822      	ldr	r2, [r4, #0]
 8001c30:	4b22      	ldr	r3, [pc, #136]	; (8001cbc <HAL_PCD_MspInit+0xa8>)
 8001c32:	429a      	cmp	r2, r3
 8001c34:	d13f      	bne.n	8001cb6 <HAL_PCD_MspInit+0xa2>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001c36:	2300      	movs	r3, #0
 8001c38:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c3c:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001c3e:	e9cd 2308 	strd	r2, r3, [sp, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8001c42:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001c46:	932a      	str	r3, [sp, #168]	; 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c48:	f003 f886 	bl	8004d58 <HAL_RCCEx_PeriphCLKConfig>
 8001c4c:	b108      	cbz	r0, 8001c52 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 8001c4e:	f7ff fb1d 	bl	800128c <Error_Handler>

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c52:	4c1b      	ldr	r4, [pc, #108]	; (8001cc0 <HAL_PCD_MspInit+0xac>)
    HAL_PWREx_EnableUSBVoltageDetector();
 8001c54:	f002 fa52 	bl	80040fc <HAL_PWREx_EnableUSBVoltageDetector>
    PA9     ------> USB_OTG_FS_VBUS
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = VBUS_FS2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c58:	2500      	movs	r5, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(VBUS_FS2_GPIO_Port, &GPIO_InitStruct);
 8001c5a:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c5c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    HAL_GPIO_Init(VBUS_FS2_GPIO_Port, &GPIO_InitStruct);
 8001c60:	4818      	ldr	r0, [pc, #96]	; (8001cc4 <HAL_PCD_MspInit+0xb0>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c62:	f043 0301 	orr.w	r3, r3, #1
 8001c66:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8001c6a:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6e:	9505      	str	r5, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c70:	f003 0301 	and.w	r3, r3, #1
 8001c74:	9301      	str	r3, [sp, #4]
 8001c76:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c78:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c7c:	e9cd 3503 	strd	r3, r5, [sp, #12]
    HAL_GPIO_Init(VBUS_FS2_GPIO_Port, &GPIO_InitStruct);
 8001c80:	f001 fb7c 	bl	800337c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS2_P_Pin|USB_OTG_FS2_N_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c84:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8001c88:	2302      	movs	r3, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c8a:	a903      	add	r1, sp, #12
 8001c8c:	480d      	ldr	r0, [pc, #52]	; (8001cc4 <HAL_PCD_MspInit+0xb0>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c8e:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001c92:	230a      	movs	r3, #10
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c94:	e9cd 5505 	strd	r5, r5, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001c98:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c9a:	f001 fb6f 	bl	800337c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001c9e:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 8001ca2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001ca6:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
 8001caa:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 8001cae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001cb2:	9302      	str	r3, [sp, #8]
 8001cb4:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001cb6:	b039      	add	sp, #228	; 0xe4
 8001cb8:	bd30      	pop	{r4, r5, pc}
 8001cba:	bf00      	nop
 8001cbc:	40080000 	.word	0x40080000
 8001cc0:	58024400 	.word	0x58024400
 8001cc4:	58020000 	.word	0x58020000

08001cc8 <HAL_SDRAM_MspInit>:
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001cc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cca:	b0b7      	sub	sp, #220	; 0xdc
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001ccc:	2100      	movs	r1, #0
 8001cce:	2214      	movs	r2, #20
 8001cd0:	a801      	add	r0, sp, #4
 8001cd2:	f010 fa7b 	bl	80121cc <memset>
  if (FMC_Initialized) {
 8001cd6:	4b2f      	ldr	r3, [pc, #188]	; (8001d94 <HAL_SDRAM_MspInit+0xcc>)
 8001cd8:	6819      	ldr	r1, [r3, #0]
 8001cda:	2900      	cmp	r1, #0
 8001cdc:	d157      	bne.n	8001d8e <HAL_SDRAM_MspInit+0xc6>
  FMC_Initialized = 1;
 8001cde:	2201      	movs	r2, #1
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ce0:	a808      	add	r0, sp, #32
  FMC_Initialized = 1;
 8001ce2:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ce4:	22b8      	movs	r2, #184	; 0xb8
 8001ce6:	f010 fa71 	bl	80121cc <memset>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8001cea:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001cee:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001cf0:	a806      	add	r0, sp, #24
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8001cf2:	e9cd 2306 	strd	r2, r3, [sp, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001cf6:	f003 f82f 	bl	8004d58 <HAL_RCCEx_PeriphCLKConfig>
 8001cfa:	b108      	cbz	r0, 8001d00 <HAL_SDRAM_MspInit+0x38>
      Error_Handler();
 8001cfc:	f7ff fac6 	bl	800128c <Error_Handler>
  __HAL_RCC_FMC_CLK_ENABLE();
 8001d00:	4b25      	ldr	r3, [pc, #148]	; (8001d98 <HAL_SDRAM_MspInit+0xd0>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d02:	2702      	movs	r7, #2
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d04:	2600      	movs	r6, #0
 8001d06:	2503      	movs	r5, #3
  __HAL_RCC_FMC_CLK_ENABLE();
 8001d08:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001d0c:	240c      	movs	r4, #12
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d0e:	a901      	add	r1, sp, #4
 8001d10:	4822      	ldr	r0, [pc, #136]	; (8001d9c <HAL_SDRAM_MspInit+0xd4>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8001d12:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001d16:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8001d1a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001d1e:	9405      	str	r4, [sp, #20]
  __HAL_RCC_FMC_CLK_ENABLE();
 8001d20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d24:	9300      	str	r3, [sp, #0]
 8001d26:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d28:	f64f 7383 	movw	r3, #65411	; 0xff83
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d2c:	e9cd 6503 	strd	r6, r5, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d30:	e9cd 3701 	strd	r3, r7, [sp, #4]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d34:	f001 fb22 	bl	800337c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 8001d38:	f248 1333 	movw	r3, #33075	; 0x8133
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d3c:	a901      	add	r1, sp, #4
 8001d3e:	4818      	ldr	r0, [pc, #96]	; (8001da0 <HAL_SDRAM_MspInit+0xd8>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001d40:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d42:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d46:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d4a:	f001 fb17 	bl	800337c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 8001d4e:	f24c 7303 	movw	r3, #50947	; 0xc703
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d52:	a901      	add	r1, sp, #4
 8001d54:	4813      	ldr	r0, [pc, #76]	; (8001da4 <HAL_SDRAM_MspInit+0xdc>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001d56:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d58:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d5c:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d60:	f001 fb0c 	bl	800337c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 8001d64:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001d68:	a901      	add	r1, sp, #4
 8001d6a:	480f      	ldr	r0, [pc, #60]	; (8001da8 <HAL_SDRAM_MspInit+0xe0>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001d6c:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d6e:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d72:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001d76:	f001 fb01 	bl	800337c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001d7a:	23e0      	movs	r3, #224	; 0xe0
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001d7c:	a901      	add	r1, sp, #4
 8001d7e:	480b      	ldr	r0, [pc, #44]	; (8001dac <HAL_SDRAM_MspInit+0xe4>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001d80:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d82:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d86:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001d8a:	f001 faf7 	bl	800337c <HAL_GPIO_Init>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001d8e:	b037      	add	sp, #220	; 0xdc
 8001d90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d92:	bf00      	nop
 8001d94:	240017b4 	.word	0x240017b4
 8001d98:	58024400 	.word	0x58024400
 8001d9c:	58021000 	.word	0x58021000
 8001da0:	58021800 	.word	0x58021800
 8001da4:	58020c00 	.word	0x58020c00
 8001da8:	58021400 	.word	0x58021400
 8001dac:	58021c00 	.word	0x58021c00

08001db0 <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8001db0:	b510      	push	{r4, lr}
 8001db2:	b0b8      	sub	sp, #224	; 0xe0
 8001db4:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001db6:	22c0      	movs	r2, #192	; 0xc0
 8001db8:	2100      	movs	r1, #0
 8001dba:	a808      	add	r0, sp, #32
 8001dbc:	f010 fa06 	bl	80121cc <memset>
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8001dc0:	6822      	ldr	r2, [r4, #0]
 8001dc2:	4b30      	ldr	r3, [pc, #192]	; (8001e84 <HAL_SAI_MspInit+0xd4>)
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d129      	bne.n	8001e1c <HAL_SAI_MspInit+0x6c>
    {
    /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8001dc8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001dcc:	2300      	movs	r3, #0
    PeriphClkInitStruct.Sai23ClockSelection = RCC_SAI23CLKSOURCE_PLL;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001dce:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8001dd0:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001dd4:	f002 ffc0 	bl	8004d58 <HAL_RCCEx_PeriphCLKConfig>
 8001dd8:	b108      	cbz	r0, 8001dde <HAL_SAI_MspInit+0x2e>
    {
      Error_Handler();
 8001dda:	f7ff fa57 	bl	800128c <Error_Handler>
    }

    if (SAI2_client == 0)
 8001dde:	482a      	ldr	r0, [pc, #168]	; (8001e88 <HAL_SAI_MspInit+0xd8>)
 8001de0:	6803      	ldr	r3, [r0, #0]
 8001de2:	b963      	cbnz	r3, 8001dfe <HAL_SAI_MspInit+0x4e>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8001de4:	4a29      	ldr	r2, [pc, #164]	; (8001e8c <HAL_SAI_MspInit+0xdc>)
 8001de6:	f8d2 10f0 	ldr.w	r1, [r2, #240]	; 0xf0
 8001dea:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8001dee:	f8c2 10f0 	str.w	r1, [r2, #240]	; 0xf0
 8001df2:	f8d2 20f0 	ldr.w	r2, [r2, #240]	; 0xf0
 8001df6:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
 8001dfa:	9201      	str	r2, [sp, #4]
 8001dfc:	9a01      	ldr	r2, [sp, #4]
    }
    SAI2_client ++;
 8001dfe:	3301      	adds	r3, #1
    PI5     ------> SAI2_SCK_A
    PI4     ------> SAI2_MCLK_A
    PI7     ------> SAI2_FS_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e00:	21f0      	movs	r1, #240	; 0xf0
    SAI2_client ++;
 8001e02:	6003      	str	r3, [r0, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e04:	2302      	movs	r3, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001e06:	4822      	ldr	r0, [pc, #136]	; (8001e90 <HAL_SAI_MspInit+0xe0>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e08:	e9cd 1303 	strd	r1, r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0c:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001e0e:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e10:	e9cd 3305 	strd	r3, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001e14:	230a      	movs	r3, #10
 8001e16:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001e18:	f001 fab0 	bl	800337c <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 8001e1c:	6822      	ldr	r2, [r4, #0]
 8001e1e:	4b1d      	ldr	r3, [pc, #116]	; (8001e94 <HAL_SAI_MspInit+0xe4>)
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d12c      	bne.n	8001e7e <HAL_SAI_MspInit+0xce>
    {
      /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8001e24:	2300      	movs	r3, #0
 8001e26:	f44f 7200 	mov.w	r2, #512	; 0x200
    PeriphClkInitStruct.Sai23ClockSelection = RCC_SAI23CLKSOURCE_PLL;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e2a:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8001e2c:	e9cd 2308 	strd	r2, r3, [sp, #32]
    PeriphClkInitStruct.Sai23ClockSelection = RCC_SAI23CLKSOURCE_PLL;
 8001e30:	2300      	movs	r3, #0
 8001e32:	931f      	str	r3, [sp, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e34:	f002 ff90 	bl	8004d58 <HAL_RCCEx_PeriphCLKConfig>
 8001e38:	b108      	cbz	r0, 8001e3e <HAL_SAI_MspInit+0x8e>
    {
      Error_Handler();
 8001e3a:	f7ff fa27 	bl	800128c <Error_Handler>
    }

      if (SAI2_client == 0)
 8001e3e:	4812      	ldr	r0, [pc, #72]	; (8001e88 <HAL_SAI_MspInit+0xd8>)
 8001e40:	6803      	ldr	r3, [r0, #0]
 8001e42:	b963      	cbnz	r3, 8001e5e <HAL_SAI_MspInit+0xae>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8001e44:	4a11      	ldr	r2, [pc, #68]	; (8001e8c <HAL_SAI_MspInit+0xdc>)
 8001e46:	f8d2 10f0 	ldr.w	r1, [r2, #240]	; 0xf0
 8001e4a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8001e4e:	f8c2 10f0 	str.w	r1, [r2, #240]	; 0xf0
 8001e52:	f8d2 20f0 	ldr.w	r2, [r2, #240]	; 0xf0
 8001e56:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
 8001e5a:	9202      	str	r2, [sp, #8]
 8001e5c:	9a02      	ldr	r2, [sp, #8]
      }
    SAI2_client ++;
 8001e5e:	3301      	adds	r3, #1

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e60:	f44f 6280 	mov.w	r2, #1024	; 0x400
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e64:	a903      	add	r1, sp, #12
    SAI2_client ++;
 8001e66:	6003      	str	r3, [r0, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e68:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e6a:	480b      	ldr	r0, [pc, #44]	; (8001e98 <HAL_SAI_MspInit+0xe8>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e6c:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e70:	2300      	movs	r3, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e72:	e9cd 3305 	strd	r3, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001e76:	230a      	movs	r3, #10
 8001e78:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e7a:	f001 fa7f 	bl	800337c <HAL_GPIO_Init>

    }
}
 8001e7e:	b038      	add	sp, #224	; 0xe0
 8001e80:	bd10      	pop	{r4, pc}
 8001e82:	bf00      	nop
 8001e84:	40015c04 	.word	0x40015c04
 8001e88:	240017bc 	.word	0x240017bc
 8001e8c:	58024400 	.word	0x58024400
 8001e90:	58022000 	.word	0x58022000
 8001e94:	40015c24 	.word	0x40015c24
 8001e98:	58021800 	.word	0x58021800

08001e9c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e9c:	e7fe      	b.n	8001e9c <NMI_Handler>

08001e9e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e9e:	e7fe      	b.n	8001e9e <HardFault_Handler>

08001ea0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ea0:	e7fe      	b.n	8001ea0 <MemManage_Handler>

08001ea2 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ea2:	e7fe      	b.n	8001ea2 <BusFault_Handler>

08001ea4 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ea4:	e7fe      	b.n	8001ea4 <UsageFault_Handler>

08001ea6 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ea6:	4770      	bx	lr

08001ea8 <DebugMon_Handler>:
 8001ea8:	4770      	bx	lr

08001eaa <PendSV_Handler>:
 8001eaa:	4770      	bx	lr

08001eac <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001eac:	f000 b8fe 	b.w	80020ac <HAL_IncTick>

08001eb0 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001eb0:	4a0b      	ldr	r2, [pc, #44]	; (8001ee0 <_sbrk+0x30>)
{
 8001eb2:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8001eb4:	6811      	ldr	r1, [r2, #0]
{
 8001eb6:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8001eb8:	b909      	cbnz	r1, 8001ebe <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8001eba:	490a      	ldr	r1, [pc, #40]	; (8001ee4 <_sbrk+0x34>)
 8001ebc:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ebe:	6810      	ldr	r0, [r2, #0]
 8001ec0:	4909      	ldr	r1, [pc, #36]	; (8001ee8 <_sbrk+0x38>)
 8001ec2:	4c0a      	ldr	r4, [pc, #40]	; (8001eec <_sbrk+0x3c>)
 8001ec4:	4403      	add	r3, r0
 8001ec6:	1b09      	subs	r1, r1, r4
 8001ec8:	428b      	cmp	r3, r1
 8001eca:	d906      	bls.n	8001eda <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8001ecc:	f010 f93e 	bl	801214c <__errno>
 8001ed0:	230c      	movs	r3, #12
 8001ed2:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001ed4:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8001ed8:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8001eda:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8001edc:	e7fc      	b.n	8001ed8 <_sbrk+0x28>
 8001ede:	bf00      	nop
 8001ee0:	240017c0 	.word	0x240017c0
 8001ee4:	20000000 	.word	0x20000000
 8001ee8:	24080000 	.word	0x24080000
 8001eec:	00000800 	.word	0x00000800

08001ef0 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001ef0:	4a25      	ldr	r2, [pc, #148]	; (8001f88 <SystemInit+0x98>)
 8001ef2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001ef6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001efa:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001efe:	4a23      	ldr	r2, [pc, #140]	; (8001f8c <SystemInit+0x9c>)
 8001f00:	6813      	ldr	r3, [r2, #0]
 8001f02:	f003 030f 	and.w	r3, r3, #15
 8001f06:	2b06      	cmp	r3, #6
 8001f08:	d805      	bhi.n	8001f16 <SystemInit+0x26>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001f0a:	6813      	ldr	r3, [r2, #0]
 8001f0c:	f023 030f 	bic.w	r3, r3, #15
 8001f10:	f043 0307 	orr.w	r3, r3, #7
 8001f14:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001f16:	4b1e      	ldr	r3, [pc, #120]	; (8001f90 <SystemInit+0xa0>)
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	f042 0201 	orr.w	r2, r2, #1
 8001f1e:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001f20:	2200      	movs	r2, #0
 8001f22:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001f24:	4a1b      	ldr	r2, [pc, #108]	; (8001f94 <SystemInit+0xa4>)
 8001f26:	6819      	ldr	r1, [r3, #0]
 8001f28:	400a      	ands	r2, r1

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001f2a:	4918      	ldr	r1, [pc, #96]	; (8001f8c <SystemInit+0x9c>)
  RCC->CR &= 0xEAF6ED7FU;
 8001f2c:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001f2e:	680a      	ldr	r2, [r1, #0]
 8001f30:	0712      	lsls	r2, r2, #28
 8001f32:	d505      	bpl.n	8001f40 <SystemInit+0x50>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001f34:	680a      	ldr	r2, [r1, #0]
 8001f36:	f022 020f 	bic.w	r2, r2, #15
 8001f3a:	f042 0207 	orr.w	r2, r2, #7
 8001f3e:	600a      	str	r2, [r1, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001f40:	2200      	movs	r2, #0

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001f42:	4915      	ldr	r1, [pc, #84]	; (8001f98 <SystemInit+0xa8>)
  RCC->D1CFGR = 0x00000000;
 8001f44:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 8001f46:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 8001f48:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 8001f4a:	6299      	str	r1, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001f4c:	4913      	ldr	r1, [pc, #76]	; (8001f9c <SystemInit+0xac>)
 8001f4e:	62d9      	str	r1, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001f50:	4913      	ldr	r1, [pc, #76]	; (8001fa0 <SystemInit+0xb0>)
 8001f52:	6319      	str	r1, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001f54:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001f56:	6399      	str	r1, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001f58:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001f5a:	6419      	str	r1, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001f5c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001f5e:	6819      	ldr	r1, [r3, #0]
 8001f60:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8001f64:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001f66:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001f68:	4b0e      	ldr	r3, [pc, #56]	; (8001fa4 <SystemInit+0xb4>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	0c1b      	lsrs	r3, r3, #16
 8001f6e:	041b      	lsls	r3, r3, #16
 8001f70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001f74:	d203      	bcs.n	8001f7e <SystemInit+0x8e>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001f76:	4b0c      	ldr	r3, [pc, #48]	; (8001fa8 <SystemInit+0xb8>)
 8001f78:	2201      	movs	r2, #1
 8001f7a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001f7e:	4b0b      	ldr	r3, [pc, #44]	; (8001fac <SystemInit+0xbc>)
 8001f80:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001f84:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001f86:	4770      	bx	lr
 8001f88:	e000ed00 	.word	0xe000ed00
 8001f8c:	52002000 	.word	0x52002000
 8001f90:	58024400 	.word	0x58024400
 8001f94:	eaf6ed7f 	.word	0xeaf6ed7f
 8001f98:	02020200 	.word	0x02020200
 8001f9c:	01ff0000 	.word	0x01ff0000
 8001fa0:	01010280 	.word	0x01010280
 8001fa4:	5c001000 	.word	0x5c001000
 8001fa8:	51008000 	.word	0x51008000
 8001fac:	52004000 	.word	0x52004000

08001fb0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001fb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fe8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001fb4:	f7ff ff9c 	bl	8001ef0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001fb8:	480c      	ldr	r0, [pc, #48]	; (8001fec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001fba:	490d      	ldr	r1, [pc, #52]	; (8001ff0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001fbc:	4a0d      	ldr	r2, [pc, #52]	; (8001ff4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001fbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fc0:	e002      	b.n	8001fc8 <LoopCopyDataInit>

08001fc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fc6:	3304      	adds	r3, #4

08001fc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fcc:	d3f9      	bcc.n	8001fc2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fce:	4a0a      	ldr	r2, [pc, #40]	; (8001ff8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001fd0:	4c0a      	ldr	r4, [pc, #40]	; (8001ffc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001fd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fd4:	e001      	b.n	8001fda <LoopFillZerobss>

08001fd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fd8:	3204      	adds	r2, #4

08001fda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fdc:	d3fb      	bcc.n	8001fd6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001fde:	f010 f8bb 	bl	8012158 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fe2:	f7fe fd07 	bl	80009f4 <main>
  bx  lr
 8001fe6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001fe8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001fec:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001ff0:	240008cc 	.word	0x240008cc
  ldr r2, =_sidata
 8001ff4:	08016f48 	.word	0x08016f48
  ldr r2, =_sbss
 8001ff8:	240009a0 	.word	0x240009a0
  ldr r4, =_ebss
 8001ffc:	24001ea8 	.word	0x24001ea8

08002000 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002000:	e7fe      	b.n	8002000 <ADC3_IRQHandler>
	...

08002004 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002004:	b538      	push	{r3, r4, r5, lr}
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002006:	4b0f      	ldr	r3, [pc, #60]	; (8002044 <HAL_InitTick+0x40>)
{
 8002008:	4605      	mov	r5, r0
  if((uint32_t)uwTickFreq == 0UL)
 800200a:	7818      	ldrb	r0, [r3, #0]
 800200c:	b908      	cbnz	r0, 8002012 <HAL_InitTick+0xe>
  {
    return HAL_ERROR;
 800200e:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8002010:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002012:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002016:	4a0c      	ldr	r2, [pc, #48]	; (8002048 <HAL_InitTick+0x44>)
 8002018:	fbb3 f3f0 	udiv	r3, r3, r0
 800201c:	6810      	ldr	r0, [r2, #0]
 800201e:	fbb0 f0f3 	udiv	r0, r0, r3
 8002022:	f000 fce1 	bl	80029e8 <HAL_SYSTICK_Config>
 8002026:	4604      	mov	r4, r0
 8002028:	2800      	cmp	r0, #0
 800202a:	d1f0      	bne.n	800200e <HAL_InitTick+0xa>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800202c:	2d0f      	cmp	r5, #15
 800202e:	d8ee      	bhi.n	800200e <HAL_InitTick+0xa>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002030:	4602      	mov	r2, r0
 8002032:	4629      	mov	r1, r5
 8002034:	f04f 30ff 	mov.w	r0, #4294967295
 8002038:	f000 fca4 	bl	8002984 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800203c:	4b03      	ldr	r3, [pc, #12]	; (800204c <HAL_InitTick+0x48>)
 800203e:	4620      	mov	r0, r4
 8002040:	601d      	str	r5, [r3, #0]
  return HAL_OK;
 8002042:	e7e5      	b.n	8002010 <HAL_InitTick+0xc>
 8002044:	24000008 	.word	0x24000008
 8002048:	24000000 	.word	0x24000000
 800204c:	2400000c 	.word	0x2400000c

08002050 <HAL_Init>:
{
 8002050:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002052:	2003      	movs	r0, #3
 8002054:	f000 fc84 	bl	8002960 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002058:	f002 fb82 	bl	8004760 <HAL_RCC_GetSysClockFreq>
 800205c:	490f      	ldr	r1, [pc, #60]	; (800209c <HAL_Init+0x4c>)
 800205e:	4a10      	ldr	r2, [pc, #64]	; (80020a0 <HAL_Init+0x50>)
 8002060:	698b      	ldr	r3, [r1, #24]
 8002062:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8002066:	5cd3      	ldrb	r3, [r2, r3]
 8002068:	f003 031f 	and.w	r3, r3, #31
 800206c:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800206e:	698b      	ldr	r3, [r1, #24]
 8002070:	f003 030f 	and.w	r3, r3, #15
 8002074:	5cd3      	ldrb	r3, [r2, r3]
 8002076:	4a0b      	ldr	r2, [pc, #44]	; (80020a4 <HAL_Init+0x54>)
 8002078:	f003 031f 	and.w	r3, r3, #31
 800207c:	fa20 f303 	lsr.w	r3, r0, r3
 8002080:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 8002082:	4b09      	ldr	r3, [pc, #36]	; (80020a8 <HAL_Init+0x58>)
 8002084:	6018      	str	r0, [r3, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002086:	2000      	movs	r0, #0
 8002088:	f7ff ffbc 	bl	8002004 <HAL_InitTick>
 800208c:	4604      	mov	r4, r0
 800208e:	b918      	cbnz	r0, 8002098 <HAL_Init+0x48>
  HAL_MspInit();
 8002090:	f7ff f8fe 	bl	8001290 <HAL_MspInit>
}
 8002094:	4620      	mov	r0, r4
 8002096:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002098:	2401      	movs	r4, #1
 800209a:	e7fb      	b.n	8002094 <HAL_Init+0x44>
 800209c:	58024400 	.word	0x58024400
 80020a0:	08015a88 	.word	0x08015a88
 80020a4:	24000004 	.word	0x24000004
 80020a8:	24000000 	.word	0x24000000

080020ac <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80020ac:	4a03      	ldr	r2, [pc, #12]	; (80020bc <HAL_IncTick+0x10>)
 80020ae:	4b04      	ldr	r3, [pc, #16]	; (80020c0 <HAL_IncTick+0x14>)
 80020b0:	6811      	ldr	r1, [r2, #0]
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	440b      	add	r3, r1
 80020b6:	6013      	str	r3, [r2, #0]
}
 80020b8:	4770      	bx	lr
 80020ba:	bf00      	nop
 80020bc:	240017c4 	.word	0x240017c4
 80020c0:	24000008 	.word	0x24000008

080020c4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80020c4:	4b01      	ldr	r3, [pc, #4]	; (80020cc <HAL_GetTick+0x8>)
 80020c6:	6818      	ldr	r0, [r3, #0]
}
 80020c8:	4770      	bx	lr
 80020ca:	bf00      	nop
 80020cc:	240017c4 	.word	0x240017c4

080020d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020d0:	b538      	push	{r3, r4, r5, lr}
 80020d2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80020d4:	f7ff fff6 	bl	80020c4 <HAL_GetTick>
 80020d8:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020da:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80020dc:	bf1e      	ittt	ne
 80020de:	4b04      	ldrne	r3, [pc, #16]	; (80020f0 <HAL_Delay+0x20>)
 80020e0:	781b      	ldrbne	r3, [r3, #0]
 80020e2:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80020e4:	f7ff ffee 	bl	80020c4 <HAL_GetTick>
 80020e8:	1b43      	subs	r3, r0, r5
 80020ea:	42a3      	cmp	r3, r4
 80020ec:	d3fa      	bcc.n	80020e4 <HAL_Delay+0x14>
  {
  }
}
 80020ee:	bd38      	pop	{r3, r4, r5, pc}
 80020f0:	24000008 	.word	0x24000008

080020f4 <HAL_GetHalVersion>:
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 return __STM32H7xx_HAL_VERSION;
}
 80020f4:	4800      	ldr	r0, [pc, #0]	; (80020f8 <HAL_GetHalVersion+0x4>)
 80020f6:	4770      	bx	lr
 80020f8:	010b0100 	.word	0x010b0100

080020fc <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 80020fc:	4b01      	ldr	r3, [pc, #4]	; (8002104 <HAL_GetREVID+0x8>)
 80020fe:	6818      	ldr	r0, [r3, #0]
}
 8002100:	0c00      	lsrs	r0, r0, #16
 8002102:	4770      	bx	lr
 8002104:	5c001000 	.word	0x5c001000

08002108 <HAL_GetDEVID>:
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 8002108:	4b02      	ldr	r3, [pc, #8]	; (8002114 <HAL_GetDEVID+0xc>)
 800210a:	6818      	ldr	r0, [r3, #0]
}
 800210c:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8002110:	4770      	bx	lr
 8002112:	bf00      	nop
 8002114:	5c001000 	.word	0x5c001000

08002118 <HAL_SYSCFG_ETHInterfaceSelect>:
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8002118:	4a03      	ldr	r2, [pc, #12]	; (8002128 <HAL_SYSCFG_ETHInterfaceSelect+0x10>)
 800211a:	6853      	ldr	r3, [r2, #4]
 800211c:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 8002120:	4318      	orrs	r0, r3
 8002122:	6050      	str	r0, [r2, #4]
}
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	58000400 	.word	0x58000400

0800212c <HAL_SYSCFG_AnalogSwitchConfig>:
{
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 800212c:	4a03      	ldr	r2, [pc, #12]	; (800213c <HAL_SYSCFG_AnalogSwitchConfig+0x10>)
 800212e:	6853      	ldr	r3, [r2, #4]
 8002130:	ea23 0000 	bic.w	r0, r3, r0
 8002134:	4301      	orrs	r1, r0
 8002136:	6051      	str	r1, [r2, #4]
}
 8002138:	4770      	bx	lr
 800213a:	bf00      	nop
 800213c:	58000400 	.word	0x58000400

08002140 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002140:	b530      	push	{r4, r5, lr}
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002142:	0dcc      	lsrs	r4, r1, #23
 8002144:	3014      	adds	r0, #20

  MODIFY_REG(*preg,
 8002146:	f3c1 5104 	ubfx	r1, r1, #20, #5
 800214a:	2507      	movs	r5, #7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800214c:	f004 0404 	and.w	r4, r4, #4
  MODIFY_REG(*preg,
 8002150:	408d      	lsls	r5, r1
 8002152:	fa02 f101 	lsl.w	r1, r2, r1
 8002156:	5823      	ldr	r3, [r4, r0]
 8002158:	ea23 0305 	bic.w	r3, r3, r5
 800215c:	430b      	orrs	r3, r1
 800215e:	5023      	str	r3, [r4, r0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002160:	bd30      	pop	{r4, r5, pc}

08002162 <LL_ADC_REG_IsConversionOngoing>:
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002162:	6880      	ldr	r0, [r0, #8]
}
 8002164:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8002168:	4770      	bx	lr
	...

0800216c <HAL_ADC_ConfigChannel>:
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800216c:	2300      	movs	r3, #0
{
 800216e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t wait_loop_index = 0;
 8002170:	9301      	str	r3, [sp, #4]
{
 8002172:	4604      	mov	r4, r0
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002174:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8002178:	460d      	mov	r5, r1
  __HAL_LOCK(hadc);
 800217a:	2b01      	cmp	r3, #1
 800217c:	f000 81c5 	beq.w	800250a <HAL_ADC_ConfigChannel+0x39e>
 8002180:	2301      	movs	r3, #1
 8002182:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002186:	6800      	ldr	r0, [r0, #0]
 8002188:	f7ff ffeb 	bl	8002162 <LL_ADC_REG_IsConversionOngoing>
 800218c:	2800      	cmp	r0, #0
 800218e:	f040 81b7 	bne.w	8002500 <HAL_ADC_ConfigChannel+0x394>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002192:	680a      	ldr	r2, [r1, #0]
 8002194:	f3c2 0013 	ubfx	r0, r2, #0, #20
 8002198:	f3c2 6184 	ubfx	r1, r2, #26, #5
 800219c:	2800      	cmp	r0, #0
 800219e:	d16c      	bne.n	800227a <HAL_ADC_ConfigChannel+0x10e>
 80021a0:	408b      	lsls	r3, r1
 80021a2:	6820      	ldr	r0, [r4, #0]
  MODIFY_REG(*preg,
 80021a4:	271f      	movs	r7, #31
 80021a6:	69c2      	ldr	r2, [r0, #28]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80021a8:	f100 0c30 	add.w	ip, r0, #48	; 0x30
 80021ac:	4313      	orrs	r3, r2
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80021ae:	686a      	ldr	r2, [r5, #4]
 80021b0:	0996      	lsrs	r6, r2, #6
  MODIFY_REG(*preg,
 80021b2:	f002 021f 	and.w	r2, r2, #31
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80021b6:	61c3      	str	r3, [r0, #28]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80021b8:	f006 060c 	and.w	r6, r6, #12
  MODIFY_REG(*preg,
 80021bc:	4097      	lsls	r7, r2
 80021be:	fa01 f202 	lsl.w	r2, r1, r2
 80021c2:	f856 300c 	ldr.w	r3, [r6, ip]
 80021c6:	ea23 0307 	bic.w	r3, r3, r7
 80021ca:	4313      	orrs	r3, r2
 80021cc:	f846 300c 	str.w	r3, [r6, ip]
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80021d0:	f7ff ffc7 	bl	8002162 <LL_ADC_REG_IsConversionOngoing>
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80021d4:	6827      	ldr	r7, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	f003 0308 	and.w	r3, r3, #8
 80021dc:	ea53 0600 	orrs.w	r6, r3, r0
 80021e0:	d141      	bne.n	8002266 <HAL_ADC_ConfigChannel+0xfa>
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80021e2:	68aa      	ldr	r2, [r5, #8]
 80021e4:	4638      	mov	r0, r7
 80021e6:	6829      	ldr	r1, [r5, #0]
 80021e8:	f7ff ffaa 	bl	8002140 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80021ec:	4bb7      	ldr	r3, [pc, #732]	; (80024cc <HAL_ADC_ConfigChannel+0x360>)
 80021ee:	696a      	ldr	r2, [r5, #20]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80021f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80021fa:	6823      	ldr	r3, [r4, #0]
 80021fc:	68d9      	ldr	r1, [r3, #12]
 80021fe:	d145      	bne.n	800228c <HAL_ADC_ConfigChannel+0x120>
 8002200:	f3c1 0182 	ubfx	r1, r1, #2, #3
 8002204:	0049      	lsls	r1, r1, #1
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002206:	f8d5 c010 	ldr.w	ip, [r5, #16]
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800220a:	fa02 f101 	lsl.w	r1, r2, r1
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800220e:	6828      	ldr	r0, [r5, #0]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002210:	f1bc 0f04 	cmp.w	ip, #4
 8002214:	d042      	beq.n	800229c <HAL_ADC_ConfigChannel+0x130>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002216:	f103 0760 	add.w	r7, r3, #96	; 0x60
    MODIFY_REG(*preg,
 800221a:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 800221e:	f857 202c 	ldr.w	r2, [r7, ip, lsl #2]
 8002222:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002226:	4302      	orrs	r2, r0
 8002228:	430a      	orrs	r2, r1
 800222a:	f847 202c 	str.w	r2, [r7, ip, lsl #2]
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800222e:	6929      	ldr	r1, [r5, #16]
 8002230:	7e6a      	ldrb	r2, [r5, #25]
 8002232:	2a01      	cmp	r2, #1
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002234:	f857 2021 	ldr.w	r2, [r7, r1, lsl #2]
 8002238:	bf0c      	ite	eq
 800223a:	f04f 4000 	moveq.w	r0, #2147483648	; 0x80000000
 800223e:	2000      	movne	r0, #0
 8002240:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002244:	4302      	orrs	r2, r0
 8002246:	f847 2021 	str.w	r2, [r7, r1, lsl #2]

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800224a:	7e29      	ldrb	r1, [r5, #24]
 800224c:	692a      	ldr	r2, [r5, #16]
 800224e:	2901      	cmp	r1, #1
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002250:	6918      	ldr	r0, [r3, #16]
 8002252:	f002 021f 	and.w	r2, r2, #31
 8002256:	bf08      	it	eq
 8002258:	f44f 6600 	moveq.w	r6, #2048	; 0x800
 800225c:	f420 40f0 	bic.w	r0, r0, #30720	; 0x7800
 8002260:	4096      	lsls	r6, r2
 8002262:	4306      	orrs	r6, r0
 8002264:	611e      	str	r6, [r3, #16]

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002266:	6820      	ldr	r0, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002268:	6883      	ldr	r3, [r0, #8]
 800226a:	07da      	lsls	r2, r3, #31
 800226c:	d53d      	bpl.n	80022ea <HAL_ADC_ConfigChannel+0x17e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800226e:	2000      	movs	r0, #0

    tmp_hal_status = HAL_ERROR;
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002270:	2300      	movs	r3, #0
 8002272:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
}
 8002276:	b003      	add	sp, #12
 8002278:	bdf0      	pop	{r4, r5, r6, r7, pc}
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800227a:	fa92 f3a2 	rbit	r3, r2
   */
  if (value == 0U)
  {
    return 32U;
  }
  return __builtin_clz(value);
 800227e:	fab3 f383 	clz	r3, r3
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002282:	f003 001f 	and.w	r0, r3, #31
 8002286:	2301      	movs	r3, #1
 8002288:	4083      	lsls	r3, r0
 800228a:	e78a      	b.n	80021a2 <HAL_ADC_ConfigChannel+0x36>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800228c:	f011 0f10 	tst.w	r1, #16
 8002290:	68d9      	ldr	r1, [r3, #12]
 8002292:	d0b5      	beq.n	8002200 <HAL_ADC_ConfigChannel+0x94>
 8002294:	0849      	lsrs	r1, r1, #1
 8002296:	f001 0108 	and.w	r1, r1, #8
 800229a:	e7b4      	b.n	8002206 <HAL_ADC_ConfigChannel+0x9a>
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800229c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800229e:	0681      	lsls	r1, r0, #26
 80022a0:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 80022a4:	ebb2 6f80 	cmp.w	r2, r0, lsl #26
 80022a8:	d103      	bne.n	80022b2 <HAL_ADC_ConfigChannel+0x146>
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80022aa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80022ac:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80022b0:	661a      	str	r2, [r3, #96]	; 0x60
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80022b2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80022b4:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 80022b8:	4291      	cmp	r1, r2
 80022ba:	d103      	bne.n	80022c4 <HAL_ADC_ConfigChannel+0x158>
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80022bc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80022be:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80022c2:	665a      	str	r2, [r3, #100]	; 0x64
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80022c4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80022c6:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 80022ca:	4291      	cmp	r1, r2
 80022cc:	d103      	bne.n	80022d6 <HAL_ADC_ConfigChannel+0x16a>
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80022ce:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80022d0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80022d4:	669a      	str	r2, [r3, #104]	; 0x68
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80022d6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80022d8:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 80022dc:	4291      	cmp	r1, r2
 80022de:	d1c2      	bne.n	8002266 <HAL_ADC_ConfigChannel+0xfa>
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80022e0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80022e2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80022e6:	66da      	str	r2, [r3, #108]	; 0x6c
 80022e8:	e7bd      	b.n	8002266 <HAL_ADC_ConfigChannel+0xfa>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80022ea:	68ef      	ldr	r7, [r5, #12]
 80022ec:	682b      	ldr	r3, [r5, #0]
  MODIFY_REG(ADCx->DIFSEL,
 80022ee:	f007 0c18 	and.w	ip, r7, #24
 80022f2:	4a77      	ldr	r2, [pc, #476]	; (80024d0 <HAL_ADC_ConfigChannel+0x364>)
 80022f4:	f8d0 10c0 	ldr.w	r1, [r0, #192]	; 0xc0
 80022f8:	f3c3 0613 	ubfx	r6, r3, #0, #20
 80022fc:	fa22 f20c 	lsr.w	r2, r2, ip
 8002300:	ea21 0106 	bic.w	r1, r1, r6
 8002304:	401a      	ands	r2, r3
 8002306:	430a      	orrs	r2, r1
 8002308:	f8c0 20c0 	str.w	r2, [r0, #192]	; 0xc0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800230c:	4a71      	ldr	r2, [pc, #452]	; (80024d4 <HAL_ADC_ConfigChannel+0x368>)
 800230e:	4297      	cmp	r7, r2
 8002310:	d146      	bne.n	80023a0 <HAL_ADC_ConfigChannel+0x234>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002312:	b9de      	cbnz	r6, 800234c <HAL_ADC_ConfigChannel+0x1e0>
 8002314:	0e9a      	lsrs	r2, r3, #26
 8002316:	2101      	movs	r1, #1
 8002318:	3201      	adds	r2, #1
 800231a:	f002 071f 	and.w	r7, r2, #31
 800231e:	0692      	lsls	r2, r2, #26
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002320:	2f09      	cmp	r7, #9
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002322:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8002326:	fa01 f107 	lsl.w	r1, r1, r7
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800232a:	d92a      	bls.n	8002382 <HAL_ADC_ConfigChannel+0x216>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800232c:	430a      	orrs	r2, r1
 800232e:	2e00      	cmp	r6, #0
 8002330:	f040 808d 	bne.w	800244e <HAL_ADC_ConfigChannel+0x2e2>
 8002334:	0e9e      	lsrs	r6, r3, #26
 8002336:	3601      	adds	r6, #1
 8002338:	f006 061f 	and.w	r6, r6, #31
 800233c:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 8002340:	391e      	subs	r1, #30
 8002342:	0509      	lsls	r1, r1, #20
 8002344:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002348:	4311      	orrs	r1, r2
 800234a:	e026      	b.n	800239a <HAL_ADC_ConfigChannel+0x22e>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800234c:	fa93 f2a3 	rbit	r2, r3
  if (value == 0U)
 8002350:	b132      	cbz	r2, 8002360 <HAL_ADC_ConfigChannel+0x1f4>
  return __builtin_clz(value);
 8002352:	fab2 f282 	clz	r2, r2
 8002356:	3201      	adds	r2, #1
 8002358:	f002 021f 	and.w	r2, r2, #31
 800235c:	2a09      	cmp	r2, #9
 800235e:	d864      	bhi.n	800242a <HAL_ADC_ConfigChannel+0x2be>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002360:	fa93 f2a3 	rbit	r2, r3
  return __builtin_clz(value);
 8002364:	fab2 f282 	clz	r2, r2
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002368:	3201      	adds	r2, #1
 800236a:	0692      	lsls	r2, r2, #26
 800236c:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002370:	fa93 f1a3 	rbit	r1, r3
  return __builtin_clz(value);
 8002374:	fab1 f181 	clz	r1, r1
 8002378:	3101      	adds	r1, #1
 800237a:	f001 071f 	and.w	r7, r1, #31
 800237e:	2101      	movs	r1, #1
 8002380:	40b9      	lsls	r1, r7
 8002382:	430a      	orrs	r2, r1
 8002384:	2e00      	cmp	r6, #0
 8002386:	d14b      	bne.n	8002420 <HAL_ADC_ConfigChannel+0x2b4>
 8002388:	0e9b      	lsrs	r3, r3, #26
 800238a:	3301      	adds	r3, #1
 800238c:	f003 031f 	and.w	r3, r3, #31
 8002390:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8002394:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002396:	ea42 0103 	orr.w	r1, r2, r3
 800239a:	68aa      	ldr	r2, [r5, #8]
 800239c:	f7ff fed0 	bl	8002140 <LL_ADC_SetChannelSamplingTime>
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80023a0:	6828      	ldr	r0, [r5, #0]
 80023a2:	2800      	cmp	r0, #0
 80023a4:	f6bf af63 	bge.w	800226e <HAL_ADC_ConfigChannel+0x102>
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80023a8:	6821      	ldr	r1, [r4, #0]
 80023aa:	4a4b      	ldr	r2, [pc, #300]	; (80024d8 <HAL_ADC_ConfigChannel+0x36c>)
 80023ac:	4b4b      	ldr	r3, [pc, #300]	; (80024dc <HAL_ADC_ConfigChannel+0x370>)
 80023ae:	4291      	cmp	r1, r2
 80023b0:	4d4b      	ldr	r5, [pc, #300]	; (80024e0 <HAL_ADC_ConfigChannel+0x374>)
 80023b2:	d003      	beq.n	80023bc <HAL_ADC_ConfigChannel+0x250>
 80023b4:	4e4b      	ldr	r6, [pc, #300]	; (80024e4 <HAL_ADC_ConfigChannel+0x378>)
 80023b6:	42a9      	cmp	r1, r5
 80023b8:	bf18      	it	ne
 80023ba:	4633      	movne	r3, r6
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80023bc:	4291      	cmp	r1, r2
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	d001      	beq.n	80023c6 <HAL_ADC_ConfigChannel+0x25a>
 80023c2:	42a9      	cmp	r1, r5
 80023c4:	d150      	bne.n	8002468 <HAL_ADC_ConfigChannel+0x2fc>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80023c6:	4a44      	ldr	r2, [pc, #272]	; (80024d8 <HAL_ADC_ConfigChannel+0x36c>)
 80023c8:	6896      	ldr	r6, [r2, #8]
 80023ca:	68aa      	ldr	r2, [r5, #8]
 80023cc:	4332      	orrs	r2, r6
 80023ce:	43d2      	mvns	r2, r2
 80023d0:	f002 0201 	and.w	r2, r2, #1
 80023d4:	2a00      	cmp	r2, #0
 80023d6:	d073      	beq.n	80024c0 <HAL_ADC_ConfigChannel+0x354>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80023d8:	4a43      	ldr	r2, [pc, #268]	; (80024e8 <HAL_ADC_ConfigChannel+0x37c>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80023da:	f003 75e0 	and.w	r5, r3, #29360128	; 0x1c00000
 80023de:	4290      	cmp	r0, r2
 80023e0:	d145      	bne.n	800246e <HAL_ADC_ConfigChannel+0x302>
 80023e2:	021b      	lsls	r3, r3, #8
 80023e4:	f53f af43 	bmi.w	800226e <HAL_ADC_ConfigChannel+0x102>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80023e8:	4b40      	ldr	r3, [pc, #256]	; (80024ec <HAL_ADC_ConfigChannel+0x380>)
 80023ea:	4299      	cmp	r1, r3
 80023ec:	f47f af3f 	bne.w	800226e <HAL_ADC_ConfigChannel+0x102>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80023f0:	f8d3 2308 	ldr.w	r2, [r3, #776]	; 0x308
 80023f4:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 80023f8:	432a      	orrs	r2, r5
 80023fa:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80023fe:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002402:	4b3b      	ldr	r3, [pc, #236]	; (80024f0 <HAL_ADC_ConfigChannel+0x384>)
 8002404:	4a3b      	ldr	r2, [pc, #236]	; (80024f4 <HAL_ADC_ConfigChannel+0x388>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	fbb3 f3f2 	udiv	r3, r3, r2
 800240c:	3301      	adds	r3, #1
 800240e:	005b      	lsls	r3, r3, #1
                wait_loop_index--;
 8002410:	9301      	str	r3, [sp, #4]
              while (wait_loop_index != 0UL)
 8002412:	9b01      	ldr	r3, [sp, #4]
 8002414:	2b00      	cmp	r3, #0
 8002416:	f43f af2a 	beq.w	800226e <HAL_ADC_ConfigChannel+0x102>
                wait_loop_index--;
 800241a:	9b01      	ldr	r3, [sp, #4]
 800241c:	3b01      	subs	r3, #1
 800241e:	e7f7      	b.n	8002410 <HAL_ADC_ConfigChannel+0x2a4>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002420:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 8002424:	fab3 f383 	clz	r3, r3
 8002428:	e7af      	b.n	800238a <HAL_ADC_ConfigChannel+0x21e>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800242a:	fa93 f2a3 	rbit	r2, r3
  return __builtin_clz(value);
 800242e:	fab2 f282 	clz	r2, r2
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002432:	3201      	adds	r2, #1
 8002434:	0692      	lsls	r2, r2, #26
 8002436:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800243a:	fa93 f1a3 	rbit	r1, r3
  return __builtin_clz(value);
 800243e:	fab1 f181 	clz	r1, r1
 8002442:	3101      	adds	r1, #1
 8002444:	f001 071f 	and.w	r7, r1, #31
 8002448:	2101      	movs	r1, #1
 800244a:	40b9      	lsls	r1, r7
 800244c:	e76e      	b.n	800232c <HAL_ADC_ConfigChannel+0x1c0>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800244e:	fa93 f1a3 	rbit	r1, r3
  return __builtin_clz(value);
 8002452:	fab1 f181 	clz	r1, r1
 8002456:	f06f 061d 	mvn.w	r6, #29
 800245a:	3101      	adds	r1, #1
 800245c:	f001 031f 	and.w	r3, r1, #31
 8002460:	2103      	movs	r1, #3
 8002462:	fb11 6103 	smlabb	r1, r1, r3, r6
 8002466:	e76c      	b.n	8002342 <HAL_ADC_ConfigChannel+0x1d6>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002468:	4a20      	ldr	r2, [pc, #128]	; (80024ec <HAL_ADC_ConfigChannel+0x380>)
 800246a:	6892      	ldr	r2, [r2, #8]
 800246c:	e7af      	b.n	80023ce <HAL_ADC_ConfigChannel+0x262>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800246e:	4a22      	ldr	r2, [pc, #136]	; (80024f8 <HAL_ADC_ConfigChannel+0x38c>)
 8002470:	4290      	cmp	r0, r2
 8002472:	d111      	bne.n	8002498 <HAL_ADC_ConfigChannel+0x32c>
 8002474:	f013 7380 	ands.w	r3, r3, #16777216	; 0x1000000
 8002478:	f47f aef9 	bne.w	800226e <HAL_ADC_ConfigChannel+0x102>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800247c:	4a1b      	ldr	r2, [pc, #108]	; (80024ec <HAL_ADC_ConfigChannel+0x380>)
 800247e:	4291      	cmp	r1, r2
 8002480:	f47f aef5 	bne.w	800226e <HAL_ADC_ConfigChannel+0x102>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002484:	4917      	ldr	r1, [pc, #92]	; (80024e4 <HAL_ADC_ConfigChannel+0x378>)
 8002486:	688a      	ldr	r2, [r1, #8]
 8002488:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 800248c:	432a      	orrs	r2, r5
 800248e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8002492:	608a      	str	r2, [r1, #8]
    tmp_hal_status = HAL_ERROR;
 8002494:	4618      	mov	r0, r3
 8002496:	e6eb      	b.n	8002270 <HAL_ADC_ConfigChannel+0x104>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002498:	4a18      	ldr	r2, [pc, #96]	; (80024fc <HAL_ADC_ConfigChannel+0x390>)
 800249a:	4290      	cmp	r0, r2
 800249c:	f47f aee7 	bne.w	800226e <HAL_ADC_ConfigChannel+0x102>
 80024a0:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
 80024a4:	f47f aee3 	bne.w	800226e <HAL_ADC_ConfigChannel+0x102>
            if (ADC_VREFINT_INSTANCE(hadc))
 80024a8:	4a10      	ldr	r2, [pc, #64]	; (80024ec <HAL_ADC_ConfigChannel+0x380>)
 80024aa:	4291      	cmp	r1, r2
 80024ac:	f47f aedf 	bne.w	800226e <HAL_ADC_ConfigChannel+0x102>
 80024b0:	490c      	ldr	r1, [pc, #48]	; (80024e4 <HAL_ADC_ConfigChannel+0x378>)
 80024b2:	688a      	ldr	r2, [r1, #8]
 80024b4:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 80024b8:	432a      	orrs	r2, r5
 80024ba:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80024be:	e7e8      	b.n	8002492 <HAL_ADC_ConfigChannel+0x326>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024c0:	6d63      	ldr	r3, [r4, #84]	; 0x54
          tmp_hal_status = HAL_ERROR;
 80024c2:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024c4:	f043 0320 	orr.w	r3, r3, #32
 80024c8:	6563      	str	r3, [r4, #84]	; 0x54
          tmp_hal_status = HAL_ERROR;
 80024ca:	e6d1      	b.n	8002270 <HAL_ADC_ConfigChannel+0x104>
 80024cc:	5c001000 	.word	0x5c001000
 80024d0:	000fffff 	.word	0x000fffff
 80024d4:	47ff0000 	.word	0x47ff0000
 80024d8:	40022000 	.word	0x40022000
 80024dc:	40022300 	.word	0x40022300
 80024e0:	40022100 	.word	0x40022100
 80024e4:	58026300 	.word	0x58026300
 80024e8:	cb840000 	.word	0xcb840000
 80024ec:	58026000 	.word	0x58026000
 80024f0:	24000000 	.word	0x24000000
 80024f4:	00030d40 	.word	0x00030d40
 80024f8:	c7520000 	.word	0xc7520000
 80024fc:	cfb80000 	.word	0xcfb80000
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002500:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002502:	f042 0220 	orr.w	r2, r2, #32
 8002506:	6562      	str	r2, [r4, #84]	; 0x54
 8002508:	e7c4      	b.n	8002494 <HAL_ADC_ConfigChannel+0x328>
  __HAL_LOCK(hadc);
 800250a:	2002      	movs	r0, #2
 800250c:	e6b3      	b.n	8002276 <HAL_ADC_ConfigChannel+0x10a>
 800250e:	bf00      	nop

08002510 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002510:	b538      	push	{r3, r4, r5, lr}
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002512:	4a43      	ldr	r2, [pc, #268]	; (8002620 <ADC_ConfigureBoostMode+0x110>)
{
 8002514:	4605      	mov	r5, r0
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002516:	6803      	ldr	r3, [r0, #0]
 8002518:	4293      	cmp	r3, r2
 800251a:	d003      	beq.n	8002524 <ADC_ConfigureBoostMode+0x14>
 800251c:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8002520:	4293      	cmp	r3, r2
 8002522:	d125      	bne.n	8002570 <ADC_ConfigureBoostMode+0x60>
 8002524:	4b3f      	ldr	r3, [pc, #252]	; (8002624 <ADC_ConfigureBoostMode+0x114>)
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 800252c:	bf14      	ite	ne
 800252e:	2301      	movne	r3, #1
 8002530:	2300      	moveq	r3, #0
 8002532:	b9fb      	cbnz	r3, 8002574 <ADC_ConfigureBoostMode+0x64>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002534:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002538:	2100      	movs	r1, #0
 800253a:	f003 fb2b 	bl	8005b94 <HAL_RCCEx_GetPeriphCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 800253e:	686b      	ldr	r3, [r5, #4]
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002540:	4604      	mov	r4, r0
    switch (hadc->Init.ClockPrescaler)
 8002542:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002546:	d04a      	beq.n	80025de <ADC_ConfigureBoostMode+0xce>
 8002548:	d83f      	bhi.n	80025ca <ADC_ConfigureBoostMode+0xba>
 800254a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800254e:	d044      	beq.n	80025da <ADC_ConfigureBoostMode+0xca>
 8002550:	d836      	bhi.n	80025c0 <ADC_ConfigureBoostMode+0xb0>
 8002552:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002556:	d008      	beq.n	800256a <ADC_ConfigureBoostMode+0x5a>
 8002558:	d82c      	bhi.n	80025b4 <ADC_ConfigureBoostMode+0xa4>
 800255a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800255e:	d004      	beq.n	800256a <ADC_ConfigureBoostMode+0x5a>
 8002560:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8002564:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 8002568:	d116      	bne.n	8002598 <ADC_ConfigureBoostMode+0x88>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800256a:	0c9b      	lsrs	r3, r3, #18
 800256c:	005b      	lsls	r3, r3, #1
 800256e:	e00f      	b.n	8002590 <ADC_ConfigureBoostMode+0x80>
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002570:	4b2d      	ldr	r3, [pc, #180]	; (8002628 <ADC_ConfigureBoostMode+0x118>)
 8002572:	e7d8      	b.n	8002526 <ADC_ConfigureBoostMode+0x16>
    freq = HAL_RCC_GetHCLKFreq();
 8002574:	f002 faba 	bl	8004aec <HAL_RCC_GetHCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 8002578:	686b      	ldr	r3, [r5, #4]
    freq = HAL_RCC_GetHCLKFreq();
 800257a:	4604      	mov	r4, r0
    switch (hadc->Init.ClockPrescaler)
 800257c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002580:	d005      	beq.n	800258e <ADC_ConfigureBoostMode+0x7e>
 8002582:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002586:	d006      	beq.n	8002596 <ADC_ConfigureBoostMode+0x86>
 8002588:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800258c:	d104      	bne.n	8002598 <ADC_ConfigureBoostMode+0x88>
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800258e:	0c1b      	lsrs	r3, r3, #16
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002590:	fbb4 f4f3 	udiv	r4, r4, r3
        break;
 8002594:	e000      	b.n	8002598 <ADC_ConfigureBoostMode+0x88>
        freq /= 4UL;
 8002596:	0884      	lsrs	r4, r0, #2
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8002598:	f7ff fdb0 	bl	80020fc <HAL_GetREVID>
 800259c:	f241 0303 	movw	r3, #4099	; 0x1003
 80025a0:	4298      	cmp	r0, r3
 80025a2:	682b      	ldr	r3, [r5, #0]
 80025a4:	d823      	bhi.n	80025ee <ADC_ConfigureBoostMode+0xde>
  {
    if (freq > 20000000UL)
 80025a6:	4a21      	ldr	r2, [pc, #132]	; (800262c <ADC_ConfigureBoostMode+0x11c>)
 80025a8:	4294      	cmp	r4, r2
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80025aa:	689a      	ldr	r2, [r3, #8]
    if (freq > 20000000UL)
 80025ac:	d91b      	bls.n	80025e6 <ADC_ConfigureBoostMode+0xd6>
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
    }
    else if (freq <= 12500000UL)
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80025ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025b2:	e01a      	b.n	80025ea <ADC_ConfigureBoostMode+0xda>
    switch (hadc->Init.ClockPrescaler)
 80025b4:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80025b8:	d0d7      	beq.n	800256a <ADC_ConfigureBoostMode+0x5a>
 80025ba:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80025be:	e7d3      	b.n	8002568 <ADC_ConfigureBoostMode+0x58>
 80025c0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80025c4:	d1e8      	bne.n	8002598 <ADC_ConfigureBoostMode+0x88>
        freq /= 32UL;
 80025c6:	0944      	lsrs	r4, r0, #5
        break;
 80025c8:	e7e6      	b.n	8002598 <ADC_ConfigureBoostMode+0x88>
    switch (hadc->Init.ClockPrescaler)
 80025ca:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80025ce:	d008      	beq.n	80025e2 <ADC_ConfigureBoostMode+0xd2>
 80025d0:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80025d4:	d1e0      	bne.n	8002598 <ADC_ConfigureBoostMode+0x88>
        freq /= 256UL;
 80025d6:	0a04      	lsrs	r4, r0, #8
        break;
 80025d8:	e7de      	b.n	8002598 <ADC_ConfigureBoostMode+0x88>
        freq /= 16UL;
 80025da:	0904      	lsrs	r4, r0, #4
        break;
 80025dc:	e7dc      	b.n	8002598 <ADC_ConfigureBoostMode+0x88>
        freq /= 64UL;
 80025de:	0984      	lsrs	r4, r0, #6
        break;
 80025e0:	e7da      	b.n	8002598 <ADC_ConfigureBoostMode+0x88>
        freq /= 128UL;
 80025e2:	09c4      	lsrs	r4, r0, #7
        break;
 80025e4:	e7d8      	b.n	8002598 <ADC_ConfigureBoostMode+0x88>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80025e6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
    }
    else /* if(freq > 25000000UL) */
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80025ea:	609a      	str	r2, [r3, #8]
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80025ec:	bd38      	pop	{r3, r4, r5, pc}
    if (freq <= 6250000UL)
 80025ee:	4a10      	ldr	r2, [pc, #64]	; (8002630 <ADC_ConfigureBoostMode+0x120>)
 80025f0:	4294      	cmp	r4, r2
 80025f2:	d803      	bhi.n	80025fc <ADC_ConfigureBoostMode+0xec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80025f4:	689a      	ldr	r2, [r3, #8]
 80025f6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80025fa:	e7f6      	b.n	80025ea <ADC_ConfigureBoostMode+0xda>
    else if (freq <= 12500000UL)
 80025fc:	4a0d      	ldr	r2, [pc, #52]	; (8002634 <ADC_ConfigureBoostMode+0x124>)
 80025fe:	4294      	cmp	r4, r2
 8002600:	d803      	bhi.n	800260a <ADC_ConfigureBoostMode+0xfa>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002602:	689a      	ldr	r2, [r3, #8]
 8002604:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002608:	e7d1      	b.n	80025ae <ADC_ConfigureBoostMode+0x9e>
    else if (freq <= 25000000UL)
 800260a:	4a0b      	ldr	r2, [pc, #44]	; (8002638 <ADC_ConfigureBoostMode+0x128>)
 800260c:	4294      	cmp	r4, r2
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800260e:	689a      	ldr	r2, [r3, #8]
 8002610:	bf96      	itet	ls
 8002612:	f422 7240 	bicls.w	r2, r2, #768	; 0x300
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002616:	f442 7240 	orrhi.w	r2, r2, #768	; 0x300
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800261a:	f442 7200 	orrls.w	r2, r2, #512	; 0x200
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800261e:	e7e4      	b.n	80025ea <ADC_ConfigureBoostMode+0xda>
 8002620:	40022000 	.word	0x40022000
 8002624:	40022300 	.word	0x40022300
 8002628:	58026300 	.word	0x58026300
 800262c:	01312d00 	.word	0x01312d00
 8002630:	00bebc21 	.word	0x00bebc21
 8002634:	017d7841 	.word	0x017d7841
 8002638:	02faf081 	.word	0x02faf081

0800263c <HAL_ADC_Init>:
  __IO uint32_t wait_loop_index = 0UL;
 800263c:	2300      	movs	r3, #0
{
 800263e:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if (hadc == NULL)
 8002640:	4604      	mov	r4, r0
  __IO uint32_t wait_loop_index = 0UL;
 8002642:	9301      	str	r3, [sp, #4]
  if (hadc == NULL)
 8002644:	2800      	cmp	r0, #0
 8002646:	f000 80ed 	beq.w	8002824 <HAL_ADC_Init+0x1e8>
  if (hadc->State == HAL_ADC_STATE_RESET)
 800264a:	6d45      	ldr	r5, [r0, #84]	; 0x54
 800264c:	b925      	cbnz	r5, 8002658 <HAL_ADC_Init+0x1c>
    HAL_ADC_MspInit(hadc);
 800264e:	f7fe fe31 	bl	80012b4 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8002652:	65a5      	str	r5, [r4, #88]	; 0x58
    hadc->Lock = HAL_UNLOCKED;
 8002654:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002658:	6820      	ldr	r0, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800265a:	6883      	ldr	r3, [r0, #8]
 800265c:	0099      	lsls	r1, r3, #2
 800265e:	d505      	bpl.n	800266c <HAL_ADC_Init+0x30>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002660:	6883      	ldr	r3, [r0, #8]
 8002662:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002666:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800266a:	6083      	str	r3, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800266c:	6883      	ldr	r3, [r0, #8]
 800266e:	00da      	lsls	r2, r3, #3
 8002670:	f140 8098 	bpl.w	80027a4 <HAL_ADC_Init+0x168>
 8002674:	6883      	ldr	r3, [r0, #8]
 8002676:	00db      	lsls	r3, r3, #3
 8002678:	f100 80aa 	bmi.w	80027d0 <HAL_ADC_Init+0x194>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800267c:	6d63      	ldr	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 800267e:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002680:	f043 0310 	orr.w	r3, r3, #16
 8002684:	6563      	str	r3, [r4, #84]	; 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002686:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002688:	f043 0301 	orr.w	r3, r3, #1
 800268c:	65a3      	str	r3, [r4, #88]	; 0x58
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800268e:	f7ff fd68 	bl	8002162 <LL_ADC_REG_IsConversionOngoing>
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002692:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002694:	f003 0310 	and.w	r3, r3, #16
 8002698:	4303      	orrs	r3, r0
    ADC_STATE_CLR_SET(hadc->State,
 800269a:	6d63      	ldr	r3, [r4, #84]	; 0x54
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800269c:	f040 80bf 	bne.w	800281e <HAL_ADC_Init+0x1e2>
    ADC_STATE_CLR_SET(hadc->State,
 80026a0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80026a4:	6822      	ldr	r2, [r4, #0]
    ADC_STATE_CLR_SET(hadc->State,
 80026a6:	f043 0302 	orr.w	r3, r3, #2
 80026aa:	6563      	str	r3, [r4, #84]	; 0x54
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80026ac:	6893      	ldr	r3, [r2, #8]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80026ae:	07de      	lsls	r6, r3, #31
 80026b0:	d40c      	bmi.n	80026cc <HAL_ADC_Init+0x90>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80026b2:	4b5d      	ldr	r3, [pc, #372]	; (8002828 <HAL_ADC_Init+0x1ec>)
 80026b4:	495d      	ldr	r1, [pc, #372]	; (800282c <HAL_ADC_Init+0x1f0>)
 80026b6:	429a      	cmp	r2, r3
 80026b8:	d002      	beq.n	80026c0 <HAL_ADC_Init+0x84>
 80026ba:	428a      	cmp	r2, r1
 80026bc:	f040 808a 	bne.w	80027d4 <HAL_ADC_Init+0x198>
 80026c0:	689e      	ldr	r6, [r3, #8]
 80026c2:	6888      	ldr	r0, [r1, #8]
 80026c4:	4330      	orrs	r0, r6
 80026c6:	07c0      	lsls	r0, r0, #31
 80026c8:	f140 808b 	bpl.w	80027e2 <HAL_ADC_Init+0x1a6>
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80026cc:	f7ff fd16 	bl	80020fc <HAL_GetREVID>
 80026d0:	f241 0303 	movw	r3, #4099	; 0x1003
 80026d4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80026d6:	4298      	cmp	r0, r3
 80026d8:	7f21      	ldrb	r1, [r4, #28]
 80026da:	7d60      	ldrb	r0, [r4, #21]
 80026dc:	68a3      	ldr	r3, [r4, #8]
 80026de:	f240 8090 	bls.w	8002802 <HAL_ADC_Init+0x1c6>
 80026e2:	2b10      	cmp	r3, #16
 80026e4:	f040 808d 	bne.w	8002802 <HAL_ADC_Init+0x1c6>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80026e8:	040b      	lsls	r3, r1, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80026ea:	ea43 3340 	orr.w	r3, r3, r0, lsl #13
 80026ee:	4313      	orrs	r3, r2
 80026f0:	f043 031c 	orr.w	r3, r3, #28
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80026f4:	2901      	cmp	r1, #1
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80026f6:	bf02      	ittt	eq
 80026f8:	6a22      	ldreq	r2, [r4, #32]
 80026fa:	f102 32ff 	addeq.w	r2, r2, #4294967295
 80026fe:	ea43 4342 	orreq.w	r3, r3, r2, lsl #17
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002702:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002704:	b122      	cbz	r2, 8002710 <HAL_ADC_Init+0xd4>
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002706:	f402 7278 	and.w	r2, r2, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800270a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800270c:	430a      	orrs	r2, r1
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800270e:	4313      	orrs	r3, r2
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002710:	6820      	ldr	r0, [r4, #0]
 8002712:	4a47      	ldr	r2, [pc, #284]	; (8002830 <HAL_ADC_Init+0x1f4>)
 8002714:	68c1      	ldr	r1, [r0, #12]
 8002716:	400a      	ands	r2, r1
 8002718:	4313      	orrs	r3, r2
 800271a:	60c3      	str	r3, [r0, #12]
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800271c:	f7ff fd21 	bl	8002162 <LL_ADC_REG_IsConversionOngoing>
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002720:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002722:	6893      	ldr	r3, [r2, #8]
 8002724:	f003 0308 	and.w	r3, r3, #8
 8002728:	4303      	orrs	r3, r0
 800272a:	d127      	bne.n	800277c <HAL_ADC_Init+0x140>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800272c:	68d3      	ldr	r3, [r2, #12]
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800272e:	7d21      	ldrb	r1, [r4, #20]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002730:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002734:	f023 0303 	bic.w	r3, r3, #3
 8002738:	ea43 3381 	orr.w	r3, r3, r1, lsl #14
 800273c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800273e:	430b      	orrs	r3, r1
 8002740:	60d3      	str	r3, [r2, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 8002742:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8002746:	2b01      	cmp	r3, #1
 8002748:	d161      	bne.n	800280e <HAL_ADC_Init+0x1d2>
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800274a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800274c:	6910      	ldr	r0, [r2, #16]
 800274e:	1e59      	subs	r1, r3, #1
 8002750:	e9d4 3610 	ldrd	r3, r6, [r4, #64]	; 0x40
 8002754:	4333      	orrs	r3, r6
 8002756:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800275a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800275c:	430b      	orrs	r3, r1
 800275e:	4935      	ldr	r1, [pc, #212]	; (8002834 <HAL_ADC_Init+0x1f8>)
 8002760:	4001      	ands	r1, r0
 8002762:	430b      	orrs	r3, r1
 8002764:	f043 0301 	orr.w	r3, r3, #1
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002768:	6113      	str	r3, [r2, #16]
      ADC_ConfigureBoostMode(hadc);
 800276a:	4620      	mov	r0, r4
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800276c:	6913      	ldr	r3, [r2, #16]
 800276e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002770:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002774:	430b      	orrs	r3, r1
 8002776:	6113      	str	r3, [r2, #16]
      ADC_ConfigureBoostMode(hadc);
 8002778:	f7ff feca 	bl	8002510 <ADC_ConfigureBoostMode>
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800277c:	68e3      	ldr	r3, [r4, #12]
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800277e:	6822      	ldr	r2, [r4, #0]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002780:	2b01      	cmp	r3, #1
 8002782:	d148      	bne.n	8002816 <HAL_ADC_Init+0x1da>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002784:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002786:	69a3      	ldr	r3, [r4, #24]
 8002788:	f021 010f 	bic.w	r1, r1, #15
 800278c:	3b01      	subs	r3, #1
 800278e:	430b      	orrs	r3, r1
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002790:	6313      	str	r3, [r2, #48]	; 0x30
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002792:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002794:	f023 0303 	bic.w	r3, r3, #3
 8002798:	f043 0301 	orr.w	r3, r3, #1
 800279c:	6563      	str	r3, [r4, #84]	; 0x54
}
 800279e:	4628      	mov	r0, r5
 80027a0:	b002      	add	sp, #8
 80027a2:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG(ADCx->CR,
 80027a4:	6883      	ldr	r3, [r0, #8]
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80027a6:	4a24      	ldr	r2, [pc, #144]	; (8002838 <HAL_ADC_Init+0x1fc>)
 80027a8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80027ac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80027b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027b4:	6083      	str	r3, [r0, #8]
 80027b6:	4b21      	ldr	r3, [pc, #132]	; (800283c <HAL_ADC_Init+0x200>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80027be:	3301      	adds	r3, #1
      wait_loop_index--;
 80027c0:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80027c2:	9b01      	ldr	r3, [sp, #4]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	f43f af55 	beq.w	8002674 <HAL_ADC_Init+0x38>
      wait_loop_index--;
 80027ca:	9b01      	ldr	r3, [sp, #4]
 80027cc:	3b01      	subs	r3, #1
 80027ce:	e7f7      	b.n	80027c0 <HAL_ADC_Init+0x184>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027d0:	2500      	movs	r5, #0
 80027d2:	e75c      	b.n	800268e <HAL_ADC_Init+0x52>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80027d4:	4b1a      	ldr	r3, [pc, #104]	; (8002840 <HAL_ADC_Init+0x204>)
 80027d6:	689b      	ldr	r3, [r3, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80027d8:	07db      	lsls	r3, r3, #31
 80027da:	f53f af77 	bmi.w	80026cc <HAL_ADC_Init+0x90>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80027de:	4b19      	ldr	r3, [pc, #100]	; (8002844 <HAL_ADC_Init+0x208>)
 80027e0:	e006      	b.n	80027f0 <HAL_ADC_Init+0x1b4>
 80027e2:	429a      	cmp	r2, r3
 80027e4:	d00b      	beq.n	80027fe <HAL_ADC_Init+0x1c2>
 80027e6:	4b17      	ldr	r3, [pc, #92]	; (8002844 <HAL_ADC_Init+0x208>)
 80027e8:	4817      	ldr	r0, [pc, #92]	; (8002848 <HAL_ADC_Init+0x20c>)
 80027ea:	428a      	cmp	r2, r1
 80027ec:	bf08      	it	eq
 80027ee:	4603      	moveq	r3, r0
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80027f0:	689a      	ldr	r2, [r3, #8]
 80027f2:	6861      	ldr	r1, [r4, #4]
 80027f4:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 80027f8:	430a      	orrs	r2, r1
 80027fa:	609a      	str	r2, [r3, #8]
}
 80027fc:	e766      	b.n	80026cc <HAL_ADC_Init+0x90>
 80027fe:	4b12      	ldr	r3, [pc, #72]	; (8002848 <HAL_ADC_Init+0x20c>)
 8002800:	e7f6      	b.n	80027f0 <HAL_ADC_Init+0x1b4>
                  hadc->Init.Overrun                                                    |
 8002802:	4313      	orrs	r3, r2
 8002804:	ea43 3340 	orr.w	r3, r3, r0, lsl #13
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002808:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800280c:	e772      	b.n	80026f4 <HAL_ADC_Init+0xb8>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800280e:	6913      	ldr	r3, [r2, #16]
 8002810:	f023 0301 	bic.w	r3, r3, #1
 8002814:	e7a8      	b.n	8002768 <HAL_ADC_Init+0x12c>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002816:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002818:	f023 030f 	bic.w	r3, r3, #15
 800281c:	e7b8      	b.n	8002790 <HAL_ADC_Init+0x154>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800281e:	f043 0310 	orr.w	r3, r3, #16
 8002822:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_ERROR;
 8002824:	2501      	movs	r5, #1
 8002826:	e7ba      	b.n	800279e <HAL_ADC_Init+0x162>
 8002828:	40022000 	.word	0x40022000
 800282c:	40022100 	.word	0x40022100
 8002830:	fff0c003 	.word	0xfff0c003
 8002834:	fc00f81e 	.word	0xfc00f81e
 8002838:	00030d40 	.word	0x00030d40
 800283c:	24000000 	.word	0x24000000
 8002840:	58026000 	.word	0x58026000
 8002844:	58026300 	.word	0x58026300
 8002848:	40022300 	.word	0x40022300

0800284c <LL_ADC_REG_IsConversionOngoing>:
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800284c:	6880      	ldr	r0, [r0, #8]
}
 800284e:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8002852:	4770      	bx	lr

08002854 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002854:	b5f0      	push	{r4, r5, r6, r7, lr}
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002856:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
{
 800285a:	b09b      	sub	sp, #108	; 0x6c
 800285c:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 800285e:	2a01      	cmp	r2, #1
 8002860:	d072      	beq.n	8002948 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002862:	2201      	movs	r2, #1

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002864:	4c39      	ldr	r4, [pc, #228]	; (800294c <HAL_ADCEx_MultiModeConfigChannel+0xf8>)
  __HAL_LOCK(hadc);
 8002866:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800286a:	2000      	movs	r0, #0
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800286c:	681e      	ldr	r6, [r3, #0]
  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800286e:	9016      	str	r0, [sp, #88]	; 0x58
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002870:	42a6      	cmp	r6, r4
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8002872:	9017      	str	r0, [sp, #92]	; 0x5c
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002874:	d008      	beq.n	8002888 <HAL_ADCEx_MultiModeConfigChannel+0x34>

  if (tmphadcSlave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002876:	6d59      	ldr	r1, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002878:	f883 0050 	strb.w	r0, [r3, #80]	; 0x50

    return HAL_ERROR;
 800287c:	4610      	mov	r0, r2
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800287e:	f041 0120 	orr.w	r1, r1, #32
 8002882:	6559      	str	r1, [r3, #84]	; 0x54
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 8002884:	b01b      	add	sp, #108	; 0x6c
 8002886:	bdf0      	pop	{r4, r5, r6, r7, pc}
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002888:	4c31      	ldr	r4, [pc, #196]	; (8002950 <HAL_ADCEx_MultiModeConfigChannel+0xfc>)
 800288a:	4620      	mov	r0, r4
 800288c:	f7ff ffde 	bl	800284c <LL_ADC_REG_IsConversionOngoing>
 8002890:	4605      	mov	r5, r0
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002892:	6818      	ldr	r0, [r3, #0]
 8002894:	f7ff ffda 	bl	800284c <LL_ADC_REG_IsConversionOngoing>
 8002898:	4328      	orrs	r0, r5
 800289a:	d14f      	bne.n	800293c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	42b2      	cmp	r2, r6
 80028a0:	d022      	beq.n	80028e8 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 80028a2:	4d2c      	ldr	r5, [pc, #176]	; (8002954 <HAL_ADCEx_MultiModeConfigChannel+0x100>)
 80028a4:	482c      	ldr	r0, [pc, #176]	; (8002958 <HAL_ADCEx_MultiModeConfigChannel+0x104>)
 80028a6:	42a2      	cmp	r2, r4
 80028a8:	bf18      	it	ne
 80028aa:	4628      	movne	r0, r5
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80028ac:	f8d1 c000 	ldr.w	ip, [r1]
 80028b0:	4f26      	ldr	r7, [pc, #152]	; (800294c <HAL_ADCEx_MultiModeConfigChannel+0xf8>)
 80028b2:	f1bc 0f00 	cmp.w	ip, #0
 80028b6:	d027      	beq.n	8002908 <HAL_ADCEx_MultiModeConfigChannel+0xb4>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80028b8:	6886      	ldr	r6, [r0, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80028ba:	42ba      	cmp	r2, r7
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80028bc:	684d      	ldr	r5, [r1, #4]
 80028be:	f426 4640 	bic.w	r6, r6, #49152	; 0xc000
 80028c2:	ea46 0605 	orr.w	r6, r6, r5
 80028c6:	6086      	str	r6, [r0, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80028c8:	d001      	beq.n	80028ce <HAL_ADCEx_MultiModeConfigChannel+0x7a>
 80028ca:	42a2      	cmp	r2, r4
 80028cc:	d10e      	bne.n	80028ec <HAL_ADCEx_MultiModeConfigChannel+0x98>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80028ce:	4a1f      	ldr	r2, [pc, #124]	; (800294c <HAL_ADCEx_MultiModeConfigChannel+0xf8>)
 80028d0:	6896      	ldr	r6, [r2, #8]
 80028d2:	68a2      	ldr	r2, [r4, #8]
 80028d4:	4332      	orrs	r2, r6
 80028d6:	43d2      	mvns	r2, r2
 80028d8:	f002 0201 	and.w	r2, r2, #1
 80028dc:	b94a      	cbnz	r2, 80028f2 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028de:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 80028e0:	2200      	movs	r2, #0
 80028e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return tmp_hal_status;
 80028e6:	e7cd      	b.n	8002884 <HAL_ADCEx_MultiModeConfigChannel+0x30>
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80028e8:	481b      	ldr	r0, [pc, #108]	; (8002958 <HAL_ADCEx_MultiModeConfigChannel+0x104>)
 80028ea:	e7df      	b.n	80028ac <HAL_ADCEx_MultiModeConfigChannel+0x58>
 80028ec:	4a1b      	ldr	r2, [pc, #108]	; (800295c <HAL_ADCEx_MultiModeConfigChannel+0x108>)
 80028ee:	6892      	ldr	r2, [r2, #8]
 80028f0:	e7f1      	b.n	80028d6 <HAL_ADCEx_MultiModeConfigChannel+0x82>
        MODIFY_REG(tmpADC_Common->CCR,
 80028f2:	6882      	ldr	r2, [r0, #8]
 80028f4:	6889      	ldr	r1, [r1, #8]
 80028f6:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 80028fa:	ea4c 0501 	orr.w	r5, ip, r1
 80028fe:	f022 020f 	bic.w	r2, r2, #15
 8002902:	4315      	orrs	r5, r2
 8002904:	6085      	str	r5, [r0, #8]
 8002906:	e7ea      	b.n	80028de <HAL_ADCEx_MultiModeConfigChannel+0x8a>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002908:	6881      	ldr	r1, [r0, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800290a:	42ba      	cmp	r2, r7
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800290c:	f421 4140 	bic.w	r1, r1, #49152	; 0xc000
 8002910:	6081      	str	r1, [r0, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002912:	d001      	beq.n	8002918 <HAL_ADCEx_MultiModeConfigChannel+0xc4>
 8002914:	42a2      	cmp	r2, r4
 8002916:	d10e      	bne.n	8002936 <HAL_ADCEx_MultiModeConfigChannel+0xe2>
 8002918:	68b9      	ldr	r1, [r7, #8]
 800291a:	68a2      	ldr	r2, [r4, #8]
 800291c:	430a      	orrs	r2, r1
 800291e:	43d2      	mvns	r2, r2
 8002920:	f002 0201 	and.w	r2, r2, #1
 8002924:	2a00      	cmp	r2, #0
 8002926:	d0da      	beq.n	80028de <HAL_ADCEx_MultiModeConfigChannel+0x8a>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002928:	6882      	ldr	r2, [r0, #8]
 800292a:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 800292e:	f022 020f 	bic.w	r2, r2, #15
 8002932:	6082      	str	r2, [r0, #8]
 8002934:	e7d3      	b.n	80028de <HAL_ADCEx_MultiModeConfigChannel+0x8a>
 8002936:	4a09      	ldr	r2, [pc, #36]	; (800295c <HAL_ADCEx_MultiModeConfigChannel+0x108>)
 8002938:	6892      	ldr	r2, [r2, #8]
 800293a:	e7f0      	b.n	800291e <HAL_ADCEx_MultiModeConfigChannel+0xca>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800293c:	6d59      	ldr	r1, [r3, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 800293e:	4610      	mov	r0, r2
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002940:	f041 0120 	orr.w	r1, r1, #32
 8002944:	6559      	str	r1, [r3, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8002946:	e7cb      	b.n	80028e0 <HAL_ADCEx_MultiModeConfigChannel+0x8c>
  __HAL_LOCK(hadc);
 8002948:	2002      	movs	r0, #2
 800294a:	e79b      	b.n	8002884 <HAL_ADCEx_MultiModeConfigChannel+0x30>
 800294c:	40022000 	.word	0x40022000
 8002950:	40022100 	.word	0x40022100
 8002954:	58026300 	.word	0x58026300
 8002958:	40022300 	.word	0x40022300
 800295c:	58026000 	.word	0x58026000

08002960 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002960:	4907      	ldr	r1, [pc, #28]	; (8002980 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002962:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002964:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002966:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800296a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800296e:	0412      	lsls	r2, r2, #16
 8002970:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002972:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002974:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002978:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 800297c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800297e:	4770      	bx	lr
 8002980:	e000ed00 	.word	0xe000ed00

08002984 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002984:	4b16      	ldr	r3, [pc, #88]	; (80029e0 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002986:	b530      	push	{r4, r5, lr}
 8002988:	68dc      	ldr	r4, [r3, #12]
 800298a:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800298e:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002992:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002994:	2d04      	cmp	r5, #4
 8002996:	bf28      	it	cs
 8002998:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800299a:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800299c:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029a0:	bf8c      	ite	hi
 80029a2:	3c03      	subhi	r4, #3
 80029a4:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029a6:	fa03 f505 	lsl.w	r5, r3, r5
  if ((int32_t)(IRQn) >= 0)
 80029aa:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029ac:	fa03 f304 	lsl.w	r3, r3, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029b0:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029b4:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029b8:	fa01 f104 	lsl.w	r1, r1, r4
 80029bc:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029c0:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80029c4:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 80029c6:	db06      	blt.n	80029d6 <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029c8:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80029cc:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80029d0:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80029d4:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029d6:	f000 000f 	and.w	r0, r0, #15
 80029da:	4a02      	ldr	r2, [pc, #8]	; (80029e4 <HAL_NVIC_SetPriority+0x60>)
 80029dc:	5413      	strb	r3, [r2, r0]
 80029de:	e7f9      	b.n	80029d4 <HAL_NVIC_SetPriority+0x50>
 80029e0:	e000ed00 	.word	0xe000ed00
 80029e4:	e000ed14 	.word	0xe000ed14

080029e8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029e8:	3801      	subs	r0, #1
 80029ea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80029ee:	d20b      	bcs.n	8002a08 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029f0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029f4:	4a05      	ldr	r2, [pc, #20]	; (8002a0c <HAL_SYSTICK_Config+0x24>)
 80029f6:	21f0      	movs	r1, #240	; 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029f8:	6158      	str	r0, [r3, #20]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029fa:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029fc:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a00:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a02:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a04:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a06:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002a08:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002a0a:	4770      	bx	lr
 8002a0c:	e000ed00 	.word	0xe000ed00

08002a10 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002a10:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002a12:	4604      	mov	r4, r0
 8002a14:	b908      	cbnz	r0, 8002a1a <HAL_CRC_Init+0xa>
  {
    return HAL_ERROR;
 8002a16:	2001      	movs	r0, #1
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 8002a18:	bd10      	pop	{r4, pc}
  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002a1a:	7f43      	ldrb	r3, [r0, #29]
 8002a1c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002a20:	b913      	cbnz	r3, 8002a28 <HAL_CRC_Init+0x18>
    hcrc->Lock = HAL_UNLOCKED;
 8002a22:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 8002a24:	f7fe fd06 	bl	8001434 <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY;
 8002a28:	2302      	movs	r3, #2
 8002a2a:	7763      	strb	r3, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8002a2c:	7923      	ldrb	r3, [r4, #4]
 8002a2e:	b9e3      	cbnz	r3, 8002a6a <HAL_CRC_Init+0x5a>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8002a30:	6823      	ldr	r3, [r4, #0]
 8002a32:	4a13      	ldr	r2, [pc, #76]	; (8002a80 <HAL_CRC_Init+0x70>)
 8002a34:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8002a36:	689a      	ldr	r2, [r3, #8]
 8002a38:	f022 0218 	bic.w	r2, r2, #24
 8002a3c:	609a      	str	r2, [r3, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8002a3e:	7962      	ldrb	r2, [r4, #5]
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8002a40:	6823      	ldr	r3, [r4, #0]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8002a42:	b9d2      	cbnz	r2, 8002a7a <HAL_CRC_Init+0x6a>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8002a44:	f04f 32ff 	mov.w	r2, #4294967295
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8002a48:	611a      	str	r2, [r3, #16]
  return HAL_OK;
 8002a4a:	2000      	movs	r0, #0
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002a4c:	689a      	ldr	r2, [r3, #8]
 8002a4e:	6961      	ldr	r1, [r4, #20]
 8002a50:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002a54:	430a      	orrs	r2, r1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8002a56:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002a58:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8002a5a:	689a      	ldr	r2, [r3, #8]
 8002a5c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a60:	430a      	orrs	r2, r1
 8002a62:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 8002a64:	2301      	movs	r3, #1
 8002a66:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 8002a68:	e7d6      	b.n	8002a18 <HAL_CRC_Init+0x8>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002a6a:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8002a6e:	4620      	mov	r0, r4
 8002a70:	f000 f808 	bl	8002a84 <HAL_CRCEx_Polynomial_Set>
 8002a74:	2800      	cmp	r0, #0
 8002a76:	d0e2      	beq.n	8002a3e <HAL_CRC_Init+0x2e>
 8002a78:	e7cd      	b.n	8002a16 <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8002a7a:	6922      	ldr	r2, [r4, #16]
 8002a7c:	e7e4      	b.n	8002a48 <HAL_CRC_Init+0x38>
 8002a7e:	bf00      	nop
 8002a80:	04c11db7 	.word	0x04c11db7

08002a84 <HAL_CRCEx_Polynomial_Set>:

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */ 
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8002a84:	07cb      	lsls	r3, r1, #31
{
 8002a86:	b510      	push	{r4, lr}
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8002a88:	d50c      	bpl.n	8002aa4 <HAL_CRCEx_Polynomial_Set+0x20>
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8002a8a:	231f      	movs	r3, #31
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002a8c:	3b01      	subs	r3, #1
 8002a8e:	d31c      	bcc.n	8002aca <HAL_CRCEx_Polynomial_Set+0x46>
 8002a90:	fa21 f403 	lsr.w	r4, r1, r3
 8002a94:	07e4      	lsls	r4, r4, #31
 8002a96:	d5f9      	bpl.n	8002a8c <HAL_CRCEx_Polynomial_Set+0x8>
    {
    }

    switch (PolyLength)
 8002a98:	2a10      	cmp	r2, #16
 8002a9a:	d012      	beq.n	8002ac2 <HAL_CRCEx_Polynomial_Set+0x3e>
 8002a9c:	d804      	bhi.n	8002aa8 <HAL_CRCEx_Polynomial_Set+0x24>
 8002a9e:	b13a      	cbz	r2, 8002ab0 <HAL_CRCEx_Polynomial_Set+0x2c>
 8002aa0:	2a08      	cmp	r2, #8
 8002aa2:	d010      	beq.n	8002ac6 <HAL_CRCEx_Polynomial_Set+0x42>
        }
        break;
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
        {
          status =   HAL_ERROR;
 8002aa4:	2001      	movs	r0, #1

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
 8002aa6:	e00b      	b.n	8002ac0 <HAL_CRCEx_Polynomial_Set+0x3c>
    switch (PolyLength)
 8002aa8:	2a18      	cmp	r2, #24
 8002aaa:	d1fb      	bne.n	8002aa4 <HAL_CRCEx_Polynomial_Set+0x20>
        if (msb >= HAL_CRC_LENGTH_7B)
 8002aac:	2b06      	cmp	r3, #6
        if (msb >= HAL_CRC_LENGTH_16B)
 8002aae:	d8f9      	bhi.n	8002aa4 <HAL_CRCEx_Polynomial_Set+0x20>
    WRITE_REG(hcrc->Instance->POL, Pol);
 8002ab0:	6800      	ldr	r0, [r0, #0]
 8002ab2:	6141      	str	r1, [r0, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8002ab4:	6883      	ldr	r3, [r0, #8]
 8002ab6:	f023 0318 	bic.w	r3, r3, #24
 8002aba:	431a      	orrs	r2, r3
 8002abc:	6082      	str	r2, [r0, #8]
 8002abe:	2000      	movs	r0, #0
}
 8002ac0:	bd10      	pop	{r4, pc}
        if (msb >= HAL_CRC_LENGTH_8B)
 8002ac2:	2b07      	cmp	r3, #7
 8002ac4:	e7f3      	b.n	8002aae <HAL_CRCEx_Polynomial_Set+0x2a>
        if (msb >= HAL_CRC_LENGTH_16B)
 8002ac6:	2b0f      	cmp	r3, #15
 8002ac8:	e7f1      	b.n	8002aae <HAL_CRCEx_Polynomial_Set+0x2a>
    switch (PolyLength)
 8002aca:	2a00      	cmp	r2, #0
 8002acc:	d1ea      	bne.n	8002aa4 <HAL_CRCEx_Polynomial_Set+0x20>
 8002ace:	e7ef      	b.n	8002ab0 <HAL_CRCEx_Polynomial_Set+0x2c>

08002ad0 <ETH_SetMACConfig>:
static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8002ad0:	688b      	ldr	r3, [r1, #8]
 8002ad2:	680a      	ldr	r2, [r1, #0]
{
 8002ad4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ad8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
               ((uint32_t)macconf->Support2KPacket  << 22) |
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002ada:	7c0b      	ldrb	r3, [r1, #16]
{
 8002adc:	b085      	sub	sp, #20
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002ade:	f891 a004 	ldrb.w	sl, [r1, #4]
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002ae2:	2b00      	cmp	r3, #0
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002ae4:	f891 900c 	ldrb.w	r9, [r1, #12]
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002ae8:	f891 800d 	ldrb.w	r8, [r1, #13]
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002aec:	bf0c      	ite	eq
 8002aee:	f44f 2300 	moveq.w	r3, #524288	; 0x80000
 8002af2:	2300      	movne	r3, #0
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002af4:	f891 e00e 	ldrb.w	lr, [r1, #14]
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002af8:	9301      	str	r3, [sp, #4]
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002afa:	7c4b      	ldrb	r3, [r1, #17]
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002afc:	f891 c00f 	ldrb.w	ip, [r1, #15]
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002b00:	2b00      	cmp	r3, #0
               ((uint32_t)macconf->JumboPacket << 16) |
 8002b02:	7c8e      	ldrb	r6, [r1, #18]
               macconf->Speed |
               macconf->DuplexMode |
               ((uint32_t)macconf->LoopbackMode << 12) |
 8002b04:	7f0d      	ldrb	r5, [r1, #28]
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002b06:	bf0c      	ite	eq
 8002b08:	f44f 3300 	moveq.w	r3, #131072	; 0x20000
 8002b0c:	2300      	movne	r3, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002b0e:	f891 b01d 	ldrb.w	fp, [r1, #29]
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002b12:	9302      	str	r3, [sp, #8]
 8002b14:	694b      	ldr	r3, [r1, #20]
 8002b16:	431a      	orrs	r2, r3
 8002b18:	698b      	ldr	r3, [r1, #24]
 8002b1a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002b1c:	7f8a      	ldrb	r2, [r1, #30]
 8002b1e:	2a00      	cmp	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002b20:	7fca      	ldrb	r2, [r1, #31]
 8002b22:	9203      	str	r2, [sp, #12]
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002b24:	bf08      	it	eq
 8002b26:	f44f 6780 	moveq.w	r7, #1024	; 0x400
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002b2a:	f891 2020 	ldrb.w	r2, [r1, #32]
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002b2e:	bf18      	it	ne
 8002b30:	2700      	movne	r7, #0
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002b32:	2a00      	cmp	r2, #0
               macconf->BackOffLimit |
               ((uint32_t)macconf->DeferralCheck << 4) |
               macconf->PreambleLength);

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002b34:	6802      	ldr	r2, [r0, #0]
 8002b36:	6810      	ldr	r0, [r2, #0]
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002b38:	bf0c      	ite	eq
 8002b3a:	f44f 7480 	moveq.w	r4, #256	; 0x100
 8002b3e:	2400      	movne	r4, #0
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002b40:	9000      	str	r0, [sp, #0]
 8002b42:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8002b44:	4303      	orrs	r3, r0
 8002b46:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
 8002b48:	4303      	orrs	r3, r0
 8002b4a:	9800      	ldr	r0, [sp, #0]
 8002b4c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8002b50:	f420 007b 	bic.w	r0, r0, #16449536	; 0xfb0000
 8002b54:	f420 40fe 	bic.w	r0, r0, #32512	; 0x7f00
 8002b58:	f020 007c 	bic.w	r0, r0, #124	; 0x7c
 8002b5c:	4303      	orrs	r3, r0
 8002b5e:	9803      	ldr	r0, [sp, #12]
 8002b60:	ea43 63ca 	orr.w	r3, r3, sl, lsl #27
 8002b64:	ea43 53c9 	orr.w	r3, r3, r9, lsl #23
 8002b68:	ea43 5388 	orr.w	r3, r3, r8, lsl #22
 8002b6c:	ea43 534e 	orr.w	r3, r3, lr, lsl #21
 8002b70:	ea43 530c 	orr.w	r3, r3, ip, lsl #20
 8002b74:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8002b78:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
 8002b7c:	ea43 23cb 	orr.w	r3, r3, fp, lsl #11
               ((uint32_t)macconf->DeferralCheck << 4) |
 8002b80:	f891 b028 	ldrb.w	fp, [r1, #40]	; 0x28
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002b84:	ea43 2340 	orr.w	r3, r3, r0, lsl #9
 8002b88:	9801      	ldr	r0, [sp, #4]
 8002b8a:	ea43 130b 	orr.w	r3, r3, fp, lsl #4
 8002b8e:	4303      	orrs	r3, r0
 8002b90:	9802      	ldr	r0, [sp, #8]
 8002b92:	4303      	orrs	r3, r0
 8002b94:	433b      	orrs	r3, r7
 8002b96:	431c      	orrs	r4, r3
 8002b98:	6014      	str	r4, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002b9a:	6bce      	ldr	r6, [r1, #60]	; 0x3c
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8002b9c:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002ba0:	f891 7038 	ldrb.w	r7, [r1, #56]	; 0x38
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8002ba4:	2b00      	cmp	r3, #0
               macconf->GiantPacketSizeLimit);

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8002ba6:	6853      	ldr	r3, [r2, #4]
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002ba8:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8002bac:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002bb0:	f891 4031 	ldrb.w	r4, [r1, #49]	; 0x31
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8002bb4:	bf0c      	ite	eq
 8002bb6:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 8002bba:	2000      	movne	r0, #0
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8002bbc:	f423 23ef 	bic.w	r3, r3, #489472	; 0x77800
 8002bc0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002bc4:	f023 0307 	bic.w	r3, r3, #7
 8002bc8:	ea43 6346 	orr.w	r3, r3, r6, lsl #25
 8002bcc:	6b4e      	ldr	r6, [r1, #52]	; 0x34
 8002bce:	4333      	orrs	r3, r6

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
               macconf->PauseLowThreshold |
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
               (macconf->PauseTime << 16));
 8002bd0:	6c8e      	ldr	r6, [r1, #72]	; 0x48
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8002bd2:	ea43 6307 	orr.w	r3, r3, r7, lsl #24
 8002bd6:	ea43 4385 	orr.w	r3, r3, r5, lsl #18
               macconf->PauseLowThreshold |
 8002bda:	6d0d      	ldr	r5, [r1, #80]	; 0x50
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8002bdc:	ea43 4344 	orr.w	r3, r3, r4, lsl #17
 8002be0:	4303      	orrs	r3, r0
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8002be2:	6c48      	ldr	r0, [r1, #68]	; 0x44
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8002be4:	6053      	str	r3, [r2, #4]
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8002be6:	68d3      	ldr	r3, [r2, #12]
 8002be8:	f423 7387 	bic.w	r3, r3, #270	; 0x10e
 8002bec:	f023 0301 	bic.w	r3, r3, #1
 8002bf0:	4303      	orrs	r3, r0
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002bf2:	f891 0040 	ldrb.w	r0, [r1, #64]	; 0x40
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8002bf6:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8002bfa:	60d3      	str	r3, [r2, #12]
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8002bfc:	f891 304c 	ldrb.w	r3, [r1, #76]	; 0x4c
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002c00:	f891 4054 	ldrb.w	r4, [r1, #84]	; 0x54
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8002c04:	2b00      	cmp	r3, #0

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8002c06:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8002c08:	f023 03f2 	bic.w	r3, r3, #242	; 0xf2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8002c0c:	bf0c      	ite	eq
 8002c0e:	2080      	moveq	r0, #128	; 0x80
 8002c10:	2000      	movne	r0, #0
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8002c12:	041b      	lsls	r3, r3, #16
 8002c14:	0c1b      	lsrs	r3, r3, #16
 8002c16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8002c1a:	432b      	orrs	r3, r5
  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8002c1c:	6dcd      	ldr	r5, [r1, #92]	; 0x5c
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8002c1e:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
 8002c22:	4303      	orrs	r3, r0
 8002c24:	6713      	str	r3, [r2, #112]	; 0x70
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8002c26:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002c2a:	f891 3056 	ldrb.w	r3, [r1, #86]	; 0x56
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8002c2e:	f020 0003 	bic.w	r0, r0, #3
 8002c32:	4303      	orrs	r3, r0
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8002c34:	f891 0055 	ldrb.w	r0, [r1, #85]	; 0x55
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8002c38:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8002c3c:	6d88      	ldr	r0, [r1, #88]	; 0x58
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8002c3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8002c42:	f8d2 3d00 	ldr.w	r3, [r2, #3328]	; 0xd00
 8002c46:	f023 0372 	bic.w	r3, r3, #114	; 0x72
 8002c4a:	4303      	orrs	r3, r0
 8002c4c:	f8c2 3d00 	str.w	r3, [r2, #3328]	; 0xd00
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002c50:	f891 3060 	ldrb.w	r3, [r1, #96]	; 0x60
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8002c54:	f891 4061 	ldrb.w	r4, [r1, #97]	; 0x61
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002c58:	2b00      	cmp	r3, #0
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8002c5a:	f8d2 3d30 	ldr.w	r3, [r2, #3376]	; 0xd30
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8002c5e:	f891 1062 	ldrb.w	r1, [r1, #98]	; 0x62
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8002c62:	f023 037b 	bic.w	r3, r3, #123	; 0x7b
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002c66:	bf0c      	ite	eq
 8002c68:	2040      	moveq	r0, #64	; 0x40
 8002c6a:	2000      	movne	r0, #0
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8002c6c:	432b      	orrs	r3, r5
 8002c6e:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 8002c72:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002c76:	4303      	orrs	r3, r0
 8002c78:	f8c2 3d30 	str.w	r3, [r2, #3376]	; 0xd30
}
 8002c7c:	b005      	add	sp, #20
 8002c7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08002c84 <ETH_SetDMAConfig>:
static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8002c84:	6803      	ldr	r3, [r0, #0]
 8002c86:	6808      	ldr	r0, [r1, #0]
 8002c88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
 8002c92:	f022 0202 	bic.w	r2, r2, #2
 8002c96:	4302      	orrs	r2, r0
{
 8002c98:	b510      	push	{r4, lr}
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8002c9a:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
               dmaconf->BurstMode |
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8002c9c:	7b0a      	ldrb	r2, [r1, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8002c9e:	6858      	ldr	r0, [r3, #4]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002ca0:	790c      	ldrb	r4, [r1, #4]
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8002ca2:	03d2      	lsls	r2, r2, #15
  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8002ca4:	f420 4050 	bic.w	r0, r0, #53248	; 0xd000
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002ca8:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
 8002cac:	688c      	ldr	r4, [r1, #8]
  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8002cae:	f020 0001 	bic.w	r0, r0, #1
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002cb2:	4322      	orrs	r2, r4
  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8002cb4:	4302      	orrs	r2, r0
 8002cb6:	605a      	str	r2, [r3, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002cb8:	6a0a      	ldr	r2, [r1, #32]
 8002cba:	7b48      	ldrb	r0, [r1, #13]
               dmaconf->MaximumSegmentSize);

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8002cbc:	f8d3 4100 	ldr.w	r4, [r3, #256]	; 0x100
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002cc0:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8002cc4:	4810      	ldr	r0, [pc, #64]	; (8002d08 <ETH_SetDMAConfig+0x84>)
 8002cc6:	4020      	ands	r0, r4
 8002cc8:	4302      	orrs	r2, r0
 8002cca:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8002cce:	7f4a      	ldrb	r2, [r1, #29]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8002cd0:	7d08      	ldrb	r0, [r1, #20]
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8002cd2:	0312      	lsls	r2, r2, #12

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8002cd4:	f8d3 4104 	ldr.w	r4, [r3, #260]	; 0x104
  dmaregval = (dmaconf->TxDMABurstLength |
 8002cd8:	ea42 1200 	orr.w	r2, r2, r0, lsl #4
 8002cdc:	6908      	ldr	r0, [r1, #16]
 8002cde:	4302      	orrs	r2, r0
  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8002ce0:	480a      	ldr	r0, [pc, #40]	; (8002d0c <ETH_SetDMAConfig+0x88>)
 8002ce2:	4020      	ands	r0, r4
 8002ce4:	4302      	orrs	r2, r0
 8002ce6:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
               dmaconf->RxDMABurstLength);

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8002cea:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002cee:	7f0c      	ldrb	r4, [r1, #28]
 8002cf0:	698a      	ldr	r2, [r1, #24]
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8002cf2:	f020 4100 	bic.w	r1, r0, #2147483648	; 0x80000000
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002cf6:	ea42 72c4 	orr.w	r2, r2, r4, lsl #31
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8002cfa:	f421 117c 	bic.w	r1, r1, #4128768	; 0x3f0000
 8002cfe:	430a      	orrs	r2, r1
 8002d00:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
 8002d04:	bd10      	pop	{r4, pc}
 8002d06:	bf00      	nop
 8002d08:	fffec000 	.word	0xfffec000
 8002d0c:	ffc0efef 	.word	0xffc0efef

08002d10 <HAL_ETH_SetMDIOClockRange>:
{
 8002d10:	b538      	push	{r3, r4, r5, lr}
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002d12:	6803      	ldr	r3, [r0, #0]
{
 8002d14:	4605      	mov	r5, r0
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002d16:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
  hclk = HAL_RCC_GetHCLKFreq();
 8002d1a:	f001 fee7 	bl	8004aec <HAL_RCC_GetHCLKFreq>
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8002d1e:	4b12      	ldr	r3, [pc, #72]	; (8002d68 <HAL_ETH_SetMDIOClockRange+0x58>)
 8002d20:	4a12      	ldr	r2, [pc, #72]	; (8002d6c <HAL_ETH_SetMDIOClockRange+0x5c>)
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8002d22:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8002d26:	4403      	add	r3, r0
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d205      	bcs.n	8002d38 <HAL_ETH_SetMDIOClockRange+0x28>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002d2c:	f444 7400 	orr.w	r4, r4, #512	; 0x200
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002d30:	682b      	ldr	r3, [r5, #0]
 8002d32:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
}
 8002d36:	bd38      	pop	{r3, r4, r5, pc}
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8002d38:	4b0d      	ldr	r3, [pc, #52]	; (8002d70 <HAL_ETH_SetMDIOClockRange+0x60>)
 8002d3a:	4a0e      	ldr	r2, [pc, #56]	; (8002d74 <HAL_ETH_SetMDIOClockRange+0x64>)
 8002d3c:	4403      	add	r3, r0
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d802      	bhi.n	8002d48 <HAL_ETH_SetMDIOClockRange+0x38>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002d42:	f444 7440 	orr.w	r4, r4, #768	; 0x300
 8002d46:	e7f3      	b.n	8002d30 <HAL_ETH_SetMDIOClockRange+0x20>
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8002d48:	4b0b      	ldr	r3, [pc, #44]	; (8002d78 <HAL_ETH_SetMDIOClockRange+0x68>)
 8002d4a:	4a0c      	ldr	r2, [pc, #48]	; (8002d7c <HAL_ETH_SetMDIOClockRange+0x6c>)
 8002d4c:	4403      	add	r3, r0
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d3ee      	bcc.n	8002d30 <HAL_ETH_SetMDIOClockRange+0x20>
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8002d52:	4b0b      	ldr	r3, [pc, #44]	; (8002d80 <HAL_ETH_SetMDIOClockRange+0x70>)
 8002d54:	4a0b      	ldr	r2, [pc, #44]	; (8002d84 <HAL_ETH_SetMDIOClockRange+0x74>)
 8002d56:	4403      	add	r3, r0
 8002d58:	4293      	cmp	r3, r2
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002d5a:	bf94      	ite	ls
 8002d5c:	f444 7480 	orrls.w	r4, r4, #256	; 0x100
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8002d60:	f444 6480 	orrhi.w	r4, r4, #1024	; 0x400
 8002d64:	e7e4      	b.n	8002d30 <HAL_ETH_SetMDIOClockRange+0x20>
 8002d66:	bf00      	nop
 8002d68:	feced300 	.word	0xfeced300
 8002d6c:	00e4e1c0 	.word	0x00e4e1c0
 8002d70:	fde9f140 	.word	0xfde9f140
 8002d74:	017d783f 	.word	0x017d783f
 8002d78:	fc6c7900 	.word	0xfc6c7900
 8002d7c:	02625a00 	.word	0x02625a00
 8002d80:	fa0a1f00 	.word	0xfa0a1f00
 8002d84:	02faf07f 	.word	0x02faf07f

08002d88 <HAL_ETH_Init>:
{
 8002d88:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (heth == NULL)
 8002d8a:	4604      	mov	r4, r0
{
 8002d8c:	b0a5      	sub	sp, #148	; 0x94
  if (heth == NULL)
 8002d8e:	2800      	cmp	r0, #0
 8002d90:	f000 80b0 	beq.w	8002ef4 <HAL_ETH_Init+0x16c>
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002d94:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8002d98:	b923      	cbnz	r3, 8002da4 <HAL_ETH_Init+0x1c>
    heth->gState = HAL_ETH_STATE_BUSY;
 8002d9a:	2323      	movs	r3, #35	; 0x23
 8002d9c:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    HAL_ETH_MspInit(heth);
 8002da0:	f7fe fb60 	bl	8001464 <HAL_ETH_MspInit>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002da4:	4b7c      	ldr	r3, [pc, #496]	; (8002f98 <HAL_ETH_Init+0x210>)
 8002da6:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8002daa:	f042 0202 	orr.w	r2, r2, #2
 8002dae:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8002db2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8002db6:	7a20      	ldrb	r0, [r4, #8]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002db8:	f003 0302 	and.w	r3, r3, #2
 8002dbc:	9301      	str	r3, [sp, #4]
 8002dbe:	9b01      	ldr	r3, [sp, #4]
  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8002dc0:	2800      	cmp	r0, #0
 8002dc2:	f040 8087 	bne.w	8002ed4 <HAL_ETH_Init+0x14c>
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8002dc6:	f7ff f9a7 	bl	8002118 <HAL_SYSCFG_ETHInterfaceSelect>
  (void)SYSCFG->PMCR;
 8002dca:	4b74      	ldr	r3, [pc, #464]	; (8002f9c <HAL_ETH_Init+0x214>)
 8002dcc:	685b      	ldr	r3, [r3, #4]
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8002dce:	6823      	ldr	r3, [r4, #0]
 8002dd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	f042 0201 	orr.w	r2, r2, #1
 8002dda:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8002ddc:	f7ff f972 	bl	80020c4 <HAL_GetTick>
 8002de0:	4606      	mov	r6, r0
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002de2:	6823      	ldr	r3, [r4, #0]
 8002de4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002de8:	681d      	ldr	r5, [r3, #0]
 8002dea:	f015 0501 	ands.w	r5, r5, #1
 8002dee:	d174      	bne.n	8002eda <HAL_ETH_Init+0x152>
  HAL_ETH_SetMDIOClockRange(heth);
 8002df0:	4620      	mov	r0, r4
  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
  macDefaultConf.ChecksumOffload = ENABLE;
 8002df2:	2601      	movs	r6, #1
  HAL_ETH_SetMDIOClockRange(heth);
 8002df4:	f7ff ff8c 	bl	8002d10 <HAL_ETH_SetMDIOClockRange>
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8002df8:	f001 fe78 	bl	8004aec <HAL_RCC_GetHCLKFreq>
 8002dfc:	4a68      	ldr	r2, [pc, #416]	; (8002fa0 <HAL_ETH_Init+0x218>)
 8002dfe:	6823      	ldr	r3, [r4, #0]
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
  macDefaultConf.CRCStripTypePacket = ENABLE;
  macDefaultConf.DeferralCheck = DISABLE;
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002e00:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002e04:	9514      	str	r5, [sp, #80]	; 0x50
  macDefaultConf.DeferralCheck = DISABLE;
 8002e06:	f88d 5054 	strb.w	r5, [sp, #84]	; 0x54
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8002e0a:	f88d 5064 	strb.w	r5, [sp, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8002e0e:	951a      	str	r5, [sp, #104]	; 0x68
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
  macDefaultConf.Jabber = ENABLE;
  macDefaultConf.JumboPacket = DISABLE;
  macDefaultConf.LoopbackMode = DISABLE;
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
  macDefaultConf.PauseTime = 0x0;
 8002e10:	951d      	str	r5, [sp, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8002e12:	f88d 506c 	strb.w	r5, [sp, #108]	; 0x6c
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8002e16:	f88d 508e 	strb.w	r5, [sp, #142]	; 0x8e
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8002e1a:	951f      	str	r5, [sp, #124]	; 0x7c
  macDefaultConf.SlowProtocolDetect = DISABLE;
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
  macDefaultConf.Speed = ETH_SPEED_100M;
  macDefaultConf.Support2KPacket = DISABLE;
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002e1c:	f8ad 5080 	strh.w	r5, [sp, #128]	; 0x80
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002e20:	f88d 5082 	strb.w	r5, [sp, #130]	; 0x82
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8002e24:	9516      	str	r5, [sp, #88]	; 0x58
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8002e26:	f8ad 505c 	strh.w	r5, [sp, #92]	; 0x5c
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8002e2a:	950d      	str	r5, [sp, #52]	; 0x34
  macDefaultConf.JumboPacket = DISABLE;
 8002e2c:	f88d 503e 	strb.w	r5, [sp, #62]	; 0x3e
  macDefaultConf.Watchdog = ENABLE;
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8002e30:	951c      	str	r5, [sp, #112]	; 0x70
  macDefaultConf.ChecksumOffload = ENABLE;
 8002e32:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
  macDefaultConf.RetryTransmission = ENABLE;
 8002e36:	f88d 604c 	strb.w	r6, [sp, #76]	; 0x4c
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8002e3a:	f8ad 608c 	strh.w	r6, [sp, #140]	; 0x8c
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8002e3e:	f88d 605e 	strb.w	r6, [sp, #94]	; 0x5e
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8002e42:	f88d 6078 	strb.w	r6, [sp, #120]	; 0x78
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8002e46:	fbb0 f0f2 	udiv	r0, r0, r2
 8002e4a:	3801      	subs	r0, #1
 8002e4c:	f8c3 00dc 	str.w	r0, [r3, #220]	; 0xdc
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8002e50:	f44f 63c3 	mov.w	r3, #1560	; 0x618
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8002e54:	2002      	movs	r0, #2
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8002e56:	9318      	str	r3, [sp, #96]	; 0x60
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8002e58:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8002e5c:	930b      	str	r3, [sp, #44]	; 0x2c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002e5e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e62:	e9cd 1310 	strd	r1, r3, [sp, #64]	; 0x40
  macDefaultConf.LoopbackMode = DISABLE;
 8002e66:	f44f 3380 	mov.w	r3, #65536	; 0x10000

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002e6a:	a90b      	add	r1, sp, #44	; 0x2c
  macDefaultConf.LoopbackMode = DISABLE;
 8002e6c:	9312      	str	r3, [sp, #72]	; 0x48
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8002e6e:	2320      	movs	r3, #32
 8002e70:	e9cd 0321 	strd	r0, r3, [sp, #132]	; 0x84
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8002e74:	4b4b      	ldr	r3, [pc, #300]	; (8002fa4 <HAL_ETH_Init+0x21c>)
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002e76:	4620      	mov	r0, r4
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8002e78:	930e      	str	r3, [sp, #56]	; 0x38
  macDefaultConf.Watchdog = ENABLE;
 8002e7a:	f240 1301 	movw	r3, #257	; 0x101
 8002e7e:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002e82:	f7ff fe25 	bl	8002ad0 <ETH_SetMACConfig>
  dmaDefaultConf.FlushRxPacket = DISABLE;
  dmaDefaultConf.PBLx8Mode = DISABLE;
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
  dmaDefaultConf.SecondPacketOperate = DISABLE;
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002e86:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  dmaDefaultConf.TCPSegmentation = DISABLE;
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002e8a:	a902      	add	r1, sp, #8
 8002e8c:	4620      	mov	r0, r4
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8002e8e:	9502      	str	r5, [sp, #8]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002e90:	9306      	str	r3, [sp, #24]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002e92:	9308      	str	r3, [sp, #32]
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8002e94:	f44f 7306 	mov.w	r3, #536	; 0x218
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8002e98:	f8ad 5014 	strh.w	r5, [sp, #20]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8002e9c:	f88d 501c 	strb.w	r5, [sp, #28]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8002ea0:	f8ad 5024 	strh.w	r5, [sp, #36]	; 0x24
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8002ea4:	930a      	str	r3, [sp, #40]	; 0x28
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002ea6:	f88d 600c 	strb.w	r6, [sp, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002eaa:	9604      	str	r6, [sp, #16]
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002eac:	f7ff feea 	bl	8002c84 <ETH_SetDMAConfig>
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8002eb0:	6825      	ldr	r5, [r4, #0]
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8002eb2:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8002eb4:	f505 5280 	add.w	r2, r5, #4096	; 0x1000
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8002eb8:	f010 0103 	ands.w	r1, r0, #3
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8002ebc:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
 8002ec0:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8002ec4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002ec8:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8002ecc:	d014      	beq.n	8002ef8 <HAL_ETH_Init+0x170>
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8002ece:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
 8002ed2:	e00c      	b.n	8002eee <HAL_ETH_Init+0x166>
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8002ed4:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8002ed8:	e775      	b.n	8002dc6 <HAL_ETH_Init+0x3e>
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002eda:	f7ff f8f3 	bl	80020c4 <HAL_GetTick>
 8002ede:	1b80      	subs	r0, r0, r6
 8002ee0:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8002ee4:	f67f af7d 	bls.w	8002de2 <HAL_ETH_Init+0x5a>
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002ee8:	2304      	movs	r3, #4
 8002eea:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
    heth->gState = HAL_ETH_STATE_ERROR;
 8002eee:	23e0      	movs	r3, #224	; 0xe0
 8002ef0:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    return HAL_ERROR;
 8002ef4:	2001      	movs	r0, #1
 8002ef6:	e04c      	b.n	8002f92 <HAL_ETH_Init+0x20a>
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8002ef8:	f8d2 3108 	ldr.w	r3, [r2, #264]	; 0x108
 8002efc:	f104 0618 	add.w	r6, r4, #24
 8002f00:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002f04:	f023 037e 	bic.w	r3, r3, #126	; 0x7e
 8002f08:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
 8002f0c:	68e0      	ldr	r0, [r4, #12]
 8002f0e:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
{
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002f12:	f100 0760 	add.w	r7, r0, #96	; 0x60
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002f16:	4603      	mov	r3, r0

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002f18:	6019      	str	r1, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002f1a:	6059      	str	r1, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002f1c:	6099      	str	r1, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002f1e:	60d9      	str	r1, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002f20:	f846 3b04 	str.w	r3, [r6], #4
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002f24:	3318      	adds	r3, #24
 8002f26:	42bb      	cmp	r3, r7
 8002f28:	d1f6      	bne.n	8002f18 <HAL_ETH_Init+0x190>
  }

  heth->TxDescList.CurTxDesc = 0;

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8002f2a:	2303      	movs	r3, #3
  heth->TxDescList.CurTxDesc = 0;
 8002f2c:	62a1      	str	r1, [r4, #40]	; 0x28
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8002f2e:	f104 0648 	add.w	r6, r4, #72	; 0x48
 8002f32:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
  {
    dmarxdesc =  heth->Init.RxDesc + i;

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002f36:	2300      	movs	r3, #0
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8002f38:	f8c2 0114 	str.w	r0, [r2, #276]	; 0x114
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8002f3c:	f8c2 0120 	str.w	r0, [r2, #288]	; 0x120
    dmarxdesc =  heth->Init.RxDesc + i;
 8002f40:	6920      	ldr	r0, [r4, #16]
 8002f42:	f100 0760 	add.w	r7, r0, #96	; 0x60
 8002f46:	4601      	mov	r1, r0
    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002f48:	600b      	str	r3, [r1, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002f4a:	604b      	str	r3, [r1, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002f4c:	608b      	str	r3, [r1, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002f4e:	60cb      	str	r3, [r1, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002f50:	e9c1 3304 	strd	r3, r3, [r1, #16]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002f54:	f846 1b04 	str.w	r1, [r6], #4
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002f58:	3118      	adds	r1, #24
 8002f5a:	42b9      	cmp	r1, r7
 8002f5c:	d1f4      	bne.n	8002f48 <HAL_ETH_Init+0x1c0>
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
  WRITE_REG(heth->RxDescList.ItMode, 0);

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8002f5e:	2103      	movs	r1, #3
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002f60:	65a3      	str	r3, [r4, #88]	; 0x58
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002f62:	e9c4 3317 	strd	r3, r3, [r4, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002f66:	e9c4 331a 	strd	r3, r3, [r4, #104]	; 0x68
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8002f6a:	f8c2 1130 	str.w	r1, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8002f6e:	f8c2 011c 	str.w	r0, [r2, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8002f72:	3048      	adds	r0, #72	; 0x48
 8002f74:	f8c2 0128 	str.w	r0, [r2, #296]	; 0x128
  return HAL_OK;
 8002f78:	2000      	movs	r0, #0
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8002f7a:	6862      	ldr	r2, [r4, #4]
 8002f7c:	8891      	ldrh	r1, [r2, #4]
 8002f7e:	f8c5 1300 	str.w	r1, [r5, #768]	; 0x300
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002f82:	6812      	ldr	r2, [r2, #0]
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002f84:	f8c5 2304 	str.w	r2, [r5, #772]	; 0x304
  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002f88:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002f8c:	2310      	movs	r3, #16
 8002f8e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
}
 8002f92:	b025      	add	sp, #148	; 0x94
 8002f94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f96:	bf00      	nop
 8002f98:	58024400 	.word	0x58024400
 8002f9c:	58000400 	.word	0x58000400
 8002fa0:	000f4240 	.word	0x000f4240
 8002fa4:	01010000 	.word	0x01010000

08002fa8 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8002fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002fac:	b099      	sub	sp, #100	; 0x64
 8002fae:	4604      	mov	r4, r0
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8002fb0:	224c      	movs	r2, #76	; 0x4c
 8002fb2:	49c8      	ldr	r1, [pc, #800]	; (80032d4 <HAL_FDCAN_Init+0x32c>)
 8002fb4:	a805      	add	r0, sp, #20
 8002fb6:	f00f f8fb 	bl	80121b0 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8002fba:	2c00      	cmp	r4, #0
 8002fbc:	f000 81b6 	beq.w	800332c <HAL_FDCAN_Init+0x384>
  {
    return HAL_ERROR;
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8002fc0:	4bc5      	ldr	r3, [pc, #788]	; (80032d8 <HAL_FDCAN_Init+0x330>)
 8002fc2:	6822      	ldr	r2, [r4, #0]
 8002fc4:	429a      	cmp	r2, r3
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8002fc6:	bf04      	itt	eq
 8002fc8:	f503 7380 	addeq.w	r3, r3, #256	; 0x100
 8002fcc:	6063      	streq	r3, [r4, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8002fce:	f894 3098 	ldrb.w	r3, [r4, #152]	; 0x98
 8002fd2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002fd6:	b923      	cbnz	r3, 8002fe2 <HAL_FDCAN_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8002fd8:	4620      	mov	r0, r4
    hfdcan->Lock = HAL_UNLOCKED;
 8002fda:	f884 2099 	strb.w	r2, [r4, #153]	; 0x99
    HAL_FDCAN_MspInit(hfdcan);
 8002fde:	f7fe fb25 	bl	800162c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8002fe2:	6822      	ldr	r2, [r4, #0]
 8002fe4:	6993      	ldr	r3, [r2, #24]
 8002fe6:	f023 0310 	bic.w	r3, r3, #16
 8002fea:	6193      	str	r3, [r2, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002fec:	f7ff f86a 	bl	80020c4 <HAL_GetTick>
 8002ff0:	4605      	mov	r5, r0

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002ff2:	6823      	ldr	r3, [r4, #0]
 8002ff4:	699a      	ldr	r2, [r3, #24]
 8002ff6:	0711      	lsls	r1, r2, #28
 8002ff8:	f100 8189 	bmi.w	800330e <HAL_FDCAN_Init+0x366>
      return HAL_ERROR;
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002ffc:	699a      	ldr	r2, [r3, #24]
 8002ffe:	f042 0201 	orr.w	r2, r2, #1
 8003002:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003004:	f7ff f85e 	bl	80020c4 <HAL_GetTick>
 8003008:	4605      	mov	r5, r0

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800300a:	6823      	ldr	r3, [r4, #0]
 800300c:	699a      	ldr	r2, [r3, #24]
 800300e:	07d2      	lsls	r2, r2, #31
 8003010:	f140 818e 	bpl.w	8003330 <HAL_FDCAN_Init+0x388>
      return HAL_ERROR;
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8003014:	699a      	ldr	r2, [r3, #24]
 8003016:	f042 0202 	orr.w	r2, r2, #2
 800301a:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800301c:	7c22      	ldrb	r2, [r4, #16]
 800301e:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003020:	699a      	ldr	r2, [r3, #24]
 8003022:	bf0c      	ite	eq
 8003024:	f022 0240 	biceq.w	r2, r2, #64	; 0x40
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003028:	f042 0240 	orrne.w	r2, r2, #64	; 0x40
 800302c:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800302e:	7c62      	ldrb	r2, [r4, #17]
 8003030:	2a01      	cmp	r2, #1
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003032:	699a      	ldr	r2, [r3, #24]
 8003034:	bf0c      	ite	eq
 8003036:	f442 4280 	orreq.w	r2, r2, #16384	; 0x4000
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800303a:	f422 4280 	bicne.w	r2, r2, #16384	; 0x4000
 800303e:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8003040:	7ca2      	ldrb	r2, [r4, #18]
 8003042:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003044:	699a      	ldr	r2, [r3, #24]
 8003046:	bf0c      	ite	eq
 8003048:	f422 5280 	biceq.w	r2, r2, #4096	; 0x1000
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800304c:	f442 5280 	orrne.w	r2, r2, #4096	; 0x1000
 8003050:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8003052:	699a      	ldr	r2, [r3, #24]
 8003054:	68a0      	ldr	r0, [r4, #8]
 8003056:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800305a:	4302      	orrs	r2, r0
 800305c:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800305e:	699a      	ldr	r2, [r3, #24]
 8003060:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8003064:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003066:	691a      	ldr	r2, [r3, #16]
 8003068:	f022 0210 	bic.w	r2, r2, #16
 800306c:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800306e:	68e2      	ldr	r2, [r4, #12]
 8003070:	2a01      	cmp	r2, #1
 8003072:	f040 8164 	bne.w	800333e <HAL_FDCAN_Init+0x396>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8003076:	699a      	ldr	r2, [r3, #24]
 8003078:	f042 0204 	orr.w	r2, r2, #4
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800307c:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800307e:	69a2      	ldr	r2, [r4, #24]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8003080:	f5b0 7f40 	cmp.w	r0, #768	; 0x300
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003084:	f102 31ff 	add.w	r1, r2, #4294967295
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003088:	69e2      	ldr	r2, [r4, #28]
 800308a:	f102 32ff 	add.w	r2, r2, #4294967295
 800308e:	ea4f 2202 	mov.w	r2, r2, lsl #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003092:	ea42 6241 	orr.w	r2, r2, r1, lsl #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003096:	6a21      	ldr	r1, [r4, #32]
 8003098:	f101 31ff 	add.w	r1, r1, #4294967295
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800309c:	ea42 0201 	orr.w	r2, r2, r1
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80030a0:	6961      	ldr	r1, [r4, #20]
 80030a2:	f101 31ff 	add.w	r1, r1, #4294967295
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80030a6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80030aa:	61da      	str	r2, [r3, #28]
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80030ac:	d10e      	bne.n	80030cc <HAL_FDCAN_Init+0x124>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80030ae:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80030b0:	1e51      	subs	r1, r2, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80030b2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80030b4:	3a01      	subs	r2, #1
 80030b6:	0112      	lsls	r2, r2, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80030b8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80030bc:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80030be:	3901      	subs	r1, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80030c0:	430a      	orrs	r2, r1
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80030c2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80030c4:	3901      	subs	r1, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80030c6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80030ca:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 80030cc:	6e25      	ldr	r5, [r4, #96]	; 0x60
 80030ce:	b12d      	cbz	r5, 80030dc <HAL_FDCAN_Init+0x134>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80030d0:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80030d4:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80030d6:	430a      	orrs	r2, r1
 80030d8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80030dc:	f8d4 a05c 	ldr.w	sl, [r4, #92]	; 0x5c
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80030e0:	f8d4 b068 	ldr.w	fp, [r4, #104]	; 0x68
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80030e4:	eb15 0f0a 	cmn.w	r5, sl
 80030e8:	d00b      	beq.n	8003102 <HAL_FDCAN_Init+0x15a>
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80030ea:	a918      	add	r1, sp, #96	; 0x60
 80030ec:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80030f0:	eb01 018b 	add.w	r1, r1, fp, lsl #2
 80030f4:	f022 0207 	bic.w	r2, r2, #7
 80030f8:	f851 1c4c 	ldr.w	r1, [r1, #-76]
 80030fc:	430a      	orrs	r2, r1
 80030fe:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8003102:	e9d4 7210 	ldrd	r7, r2, [r4, #64]	; 0x40
 8003106:	9203      	str	r2, [sp, #12]
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8003108:	b167      	cbz	r7, 8003124 <HAL_FDCAN_Init+0x17c>
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 800310a:	a818      	add	r0, sp, #96	; 0x60
 800310c:	9903      	ldr	r1, [sp, #12]
 800310e:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8003112:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8003116:	f022 0207 	bic.w	r2, r2, #7
 800311a:	f851 1c4c 	ldr.w	r1, [r1, #-76]
 800311e:	430a      	orrs	r2, r1
 8003120:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8003124:	e9d4 6c12 	ldrd	r6, ip, [r4, #72]	; 0x48
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8003128:	b166      	cbz	r6, 8003144 <HAL_FDCAN_Init+0x19c>
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 800312a:	a918      	add	r1, sp, #96	; 0x60
 800312c:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8003130:	eb01 018c 	add.w	r1, r1, ip, lsl #2
 8003134:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003138:	f851 1c4c 	ldr.w	r1, [r1, #-76]
 800313c:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 8003140:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8003144:	6d22      	ldr	r2, [r4, #80]	; 0x50
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8003146:	f8d4 9054 	ldr.w	r9, [r4, #84]	; 0x54
  if (hfdcan->Init.RxBuffersNbr > 0U)
 800314a:	9202      	str	r2, [sp, #8]
 800314c:	b162      	cbz	r2, 8003168 <HAL_FDCAN_Init+0x1c0>
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 800314e:	a918      	add	r1, sp, #96	; 0x60
 8003150:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8003154:	eb01 0189 	add.w	r1, r1, r9, lsl #2
 8003158:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800315c:	f851 1c4c 	ldr.w	r1, [r1, #-76]
 8003160:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003164:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8003168:	4a5b      	ldr	r2, [pc, #364]	; (80032d8 <HAL_FDCAN_Init+0x330>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d104      	bne.n	8003178 <HAL_FDCAN_Init+0x1d0>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 800316e:	6861      	ldr	r1, [r4, #4]
 8003170:	688a      	ldr	r2, [r1, #8]
 8003172:	f022 0203 	bic.w	r2, r2, #3
 8003176:	608a      	str	r2, [r1, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8003178:	2200      	movs	r2, #0
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 800317a:	4858      	ldr	r0, [pc, #352]	; (80032dc <HAL_FDCAN_Init+0x334>)
  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 800317c:	f8d4 803c 	ldr.w	r8, [r4, #60]	; 0x3c
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003180:	f8c4 209c 	str.w	r2, [r4, #156]	; 0x9c
  hfdcan->LatestTxFifoQRequest = 0U;
 8003184:	f8c4 2094 	str.w	r2, [r4, #148]	; 0x94
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8003188:	f04f 0201 	mov.w	r2, #1
 800318c:	f884 2098 	strb.w	r2, [r4, #152]	; 0x98
  StartAddress = hfdcan->Init.MessageRAMOffset;
 8003190:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8003192:	9200      	str	r2, [sp, #0]
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8003194:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8003198:	9900      	ldr	r1, [sp, #0]
 800319a:	4002      	ands	r2, r0
 800319c:	ea42 0281 	orr.w	r2, r2, r1, lsl #2
 80031a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 80031a4:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 80031a8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80031aa:	f421 017f 	bic.w	r1, r1, #16711680	; 0xff0000
 80031ae:	9201      	str	r2, [sp, #4]
 80031b0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80031b4:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  StartAddress += hfdcan->Init.StdFiltersNbr;
 80031b8:	9900      	ldr	r1, [sp, #0]
 80031ba:	eb01 0e02 	add.w	lr, r1, r2
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 80031be:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 80031c2:	9a03      	ldr	r2, [sp, #12]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 80031c4:	4001      	ands	r1, r0
 80031c6:	ea41 018e 	orr.w	r1, r1, lr, lsl #2
 80031ca:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 80031ce:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 80031d2:	f421 01fe 	bic.w	r1, r1, #8323072	; 0x7f0000
 80031d6:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 80031da:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 80031de:	eb0e 0148 	add.w	r1, lr, r8, lsl #1
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 80031e2:	f8d3 e0a0 	ldr.w	lr, [r3, #160]	; 0xa0
 80031e6:	ea0e 0e00 	and.w	lr, lr, r0
 80031ea:	ea4e 0e81 	orr.w	lr, lr, r1, lsl #2
 80031ee:	f8c3 e0a0 	str.w	lr, [r3, #160]	; 0xa0
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 80031f2:	f8d3 e0a0 	ldr.w	lr, [r3, #160]	; 0xa0
 80031f6:	f42e 0efe 	bic.w	lr, lr, #8323072	; 0x7f0000
 80031fa:	ea4e 4e07 	orr.w	lr, lr, r7, lsl #16
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 80031fe:	4357      	muls	r7, r2
  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8003200:	9a02      	ldr	r2, [sp, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8003202:	f8c3 e0a0 	str.w	lr, [r3, #160]	; 0xa0
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8003206:	4439      	add	r1, r7
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8003208:	f8d3 e0b0 	ldr.w	lr, [r3, #176]	; 0xb0
 800320c:	ea0e 0e00 	and.w	lr, lr, r0
 8003210:	ea4e 0e81 	orr.w	lr, lr, r1, lsl #2
 8003214:	f8c3 e0b0 	str.w	lr, [r3, #176]	; 0xb0
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8003218:	f8d3 e0b0 	ldr.w	lr, [r3, #176]	; 0xb0
 800321c:	f42e 0efe 	bic.w	lr, lr, #8323072	; 0x7f0000
 8003220:	ea4e 4e06 	orr.w	lr, lr, r6, lsl #16
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8003224:	fb0c f606 	mul.w	r6, ip, r6
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8003228:	fb09 fc02 	mul.w	ip, r9, r2
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 800322c:	f8c3 e0b0 	str.w	lr, [r3, #176]	; 0xb0
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8003230:	4431      	add	r1, r6
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8003232:	f8d3 e0ac 	ldr.w	lr, [r3, #172]	; 0xac
 8003236:	ea0e 0e00 	and.w	lr, lr, r0
 800323a:	ea4e 0e81 	orr.w	lr, lr, r1, lsl #2
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 800323e:	4461      	add	r1, ip
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8003240:	f8c3 e0ac 	str.w	lr, [r3, #172]	; 0xac
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8003244:	f8d3 e0f0 	ldr.w	lr, [r3, #240]	; 0xf0
 8003248:	ea0e 0e00 	and.w	lr, lr, r0
 800324c:	ea4e 0e81 	orr.w	lr, lr, r1, lsl #2
 8003250:	f8c3 e0f0 	str.w	lr, [r3, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8003254:	f8d3 e0f0 	ldr.w	lr, [r3, #240]	; 0xf0
 8003258:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 800325c:	f42e 1e7c 	bic.w	lr, lr, #4128768	; 0x3f0000

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8003260:	9a01      	ldr	r2, [sp, #4]
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8003262:	eb01 0149 	add.w	r1, r1, r9, lsl #1
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8003266:	ea4e 4e09 	orr.w	lr, lr, r9, lsl #16
 800326a:	f8c3 e0f0 	str.w	lr, [r3, #240]	; 0xf0
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 800326e:	f8d3 e0c0 	ldr.w	lr, [r3, #192]	; 0xc0
 8003272:	ea0e 0000 	and.w	r0, lr, r0
 8003276:	ea40 0181 	orr.w	r1, r0, r1, lsl #2
 800327a:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 800327e:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8003282:	f421 117c 	bic.w	r1, r1, #4128768	; 0x3f0000
 8003286:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800328a:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 800328e:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8003292:	f021 517c 	bic.w	r1, r1, #1056964608	; 0x3f000000
 8003296:	ea41 6105 	orr.w	r1, r1, r5, lsl #24
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 800329a:	fb0b f505 	mul.w	r5, fp, r5
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 800329e:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 80032a2:	9b00      	ldr	r3, [sp, #0]
 80032a4:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 80032a8:	f503 532c 	add.w	r3, r3, #11008	; 0x2b00
 80032ac:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 80032ae:	eb03 0282 	add.w	r2, r3, r2, lsl #2
  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 80032b2:	66e3      	str	r3, [r4, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 80032b4:	6722      	str	r2, [r4, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 80032b6:	eb02 02c8 	add.w	r2, r2, r8, lsl #3
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 80032ba:	eb02 0787 	add.w	r7, r2, r7, lsl #2
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 80032be:	6762      	str	r2, [r4, #116]	; 0x74

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 80032c0:	4a07      	ldr	r2, [pc, #28]	; (80032e0 <HAL_FDCAN_Init+0x338>)
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 80032c2:	eb07 0686 	add.w	r6, r7, r6, lsl #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 80032c6:	67a7      	str	r7, [r4, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 80032c8:	67e6      	str	r6, [r4, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 80032ca:	eb06 068c 	add.w	r6, r6, ip, lsl #2
 80032ce:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
 80032d2:	e007      	b.n	80032e4 <HAL_FDCAN_Init+0x33c>
 80032d4:	080152a0 	.word	0x080152a0
 80032d8:	4000a000 	.word	0x4000a000
 80032dc:	ffff0003 	.word	0xffff0003
 80032e0:	4000d3fc 	.word	0x4000d3fc
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 80032e4:	eb06 06c9 	add.w	r6, r6, r9, lsl #3
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 80032e8:	fb0b f90a 	mul.w	r9, fp, sl
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 80032ec:	f8c4 6084 	str.w	r6, [r4, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 80032f0:	eb06 0689 	add.w	r6, r6, r9, lsl #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 80032f4:	eb06 0585 	add.w	r5, r6, r5, lsl #2
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 80032f8:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 80032fc:	4295      	cmp	r5, r2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 80032fe:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8003302:	d933      	bls.n	800336c <HAL_FDCAN_Init+0x3c4>
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003304:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 8003308:	f043 0320 	orr.w	r3, r3, #32
 800330c:	e009      	b.n	8003322 <HAL_FDCAN_Init+0x37a>
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800330e:	f7fe fed9 	bl	80020c4 <HAL_GetTick>
 8003312:	1b40      	subs	r0, r0, r5
 8003314:	280a      	cmp	r0, #10
 8003316:	f67f ae6c 	bls.w	8002ff2 <HAL_FDCAN_Init+0x4a>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800331a:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 800331e:	f043 0301 	orr.w	r3, r3, #1
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003322:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003326:	2303      	movs	r3, #3
 8003328:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
    return HAL_ERROR;
 800332c:	2001      	movs	r0, #1
 800332e:	e022      	b.n	8003376 <HAL_FDCAN_Init+0x3ce>
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003330:	f7fe fec8 	bl	80020c4 <HAL_GetTick>
 8003334:	1b40      	subs	r0, r0, r5
 8003336:	280a      	cmp	r0, #10
 8003338:	f67f ae67 	bls.w	800300a <HAL_FDCAN_Init+0x62>
 800333c:	e7ed      	b.n	800331a <HAL_FDCAN_Init+0x372>
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800333e:	2a00      	cmp	r2, #0
 8003340:	f43f ae9d 	beq.w	800307e <HAL_FDCAN_Init+0xd6>
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8003344:	2a02      	cmp	r2, #2
 8003346:	d00a      	beq.n	800335e <HAL_FDCAN_Init+0x3b6>
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8003348:	6999      	ldr	r1, [r3, #24]
      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800334a:	2a03      	cmp	r2, #3
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800334c:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8003350:	6199      	str	r1, [r3, #24]
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003352:	6919      	ldr	r1, [r3, #16]
 8003354:	f041 0110 	orr.w	r1, r1, #16
 8003358:	6119      	str	r1, [r3, #16]
      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800335a:	f47f ae90 	bne.w	800307e <HAL_FDCAN_Init+0xd6>
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800335e:	699a      	ldr	r2, [r3, #24]
 8003360:	f042 0220 	orr.w	r2, r2, #32
 8003364:	e68a      	b.n	800307c <HAL_FDCAN_Init+0xd4>
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8003366:	2200      	movs	r2, #0
 8003368:	f843 2b04 	str.w	r2, [r3], #4
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800336c:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8003370:	4293      	cmp	r3, r2
 8003372:	d3f8      	bcc.n	8003366 <HAL_FDCAN_Init+0x3be>
    }
  }

  /* Return function status */
  return HAL_OK;
 8003374:	2000      	movs	r0, #0
}
 8003376:	b019      	add	sp, #100	; 0x64
 8003378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800337c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800337c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 8003380:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003382:	f8df 91cc 	ldr.w	r9, [pc, #460]	; 8003550 <HAL_GPIO_Init+0x1d4>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003386:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800338a:	680a      	ldr	r2, [r1, #0]
 800338c:	fa32 f503 	lsrs.w	r5, r2, r3
 8003390:	d102      	bne.n	8003398 <HAL_GPIO_Init+0x1c>
      }
    }

    position++;
  }
}
 8003392:	b003      	add	sp, #12
 8003394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003398:	f04f 0e01 	mov.w	lr, #1
 800339c:	fa0e fe03 	lsl.w	lr, lr, r3
    if (iocurrent != 0x00U)
 80033a0:	ea1e 0202 	ands.w	r2, lr, r2
 80033a4:	f000 80bd 	beq.w	8003522 <HAL_GPIO_Init+0x1a6>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80033a8:	684e      	ldr	r6, [r1, #4]
 80033aa:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80033ae:	f04f 0c03 	mov.w	ip, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80033b2:	f006 0503 	and.w	r5, r6, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80033b6:	fa0c fc08 	lsl.w	ip, ip, r8
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80033ba:	1e6f      	subs	r7, r5, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80033bc:	ea6f 0c0c 	mvn.w	ip, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80033c0:	2f01      	cmp	r7, #1
 80033c2:	d834      	bhi.n	800342e <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 80033c4:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80033c6:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2U));
 80033ca:	68cf      	ldr	r7, [r1, #12]
 80033cc:	fa07 f708 	lsl.w	r7, r7, r8
 80033d0:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 80033d4:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80033d6:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80033d8:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80033dc:	f3c6 1700 	ubfx	r7, r6, #4, #1
 80033e0:	409f      	lsls	r7, r3
 80033e2:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80033e6:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80033e8:	68c7      	ldr	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033ea:	2d02      	cmp	r5, #2
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80033ec:	ea07 0e0c 	and.w	lr, r7, ip
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80033f0:	688f      	ldr	r7, [r1, #8]
 80033f2:	fa07 f708 	lsl.w	r7, r7, r8
 80033f6:	ea47 070e 	orr.w	r7, r7, lr
      GPIOx->PUPDR = temp;
 80033fa:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033fc:	d119      	bne.n	8003432 <HAL_GPIO_Init+0xb6>
        temp = GPIOx->AFR[position >> 3U];
 80033fe:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003402:	f003 0b07 	and.w	fp, r3, #7
 8003406:	f04f 0e0f 	mov.w	lr, #15
 800340a:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 800340e:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3U];
 8003412:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003416:	fa0e fe0b 	lsl.w	lr, lr, fp
 800341a:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800341e:	690f      	ldr	r7, [r1, #16]
 8003420:	fa07 f70b 	lsl.w	r7, r7, fp
 8003424:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 8003428:	f8ca 7020 	str.w	r7, [sl, #32]
 800342c:	e001      	b.n	8003432 <HAL_GPIO_Init+0xb6>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800342e:	2d03      	cmp	r5, #3
 8003430:	d1da      	bne.n	80033e8 <HAL_GPIO_Init+0x6c>
      temp = GPIOx->MODER;
 8003432:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003434:	fa05 f508 	lsl.w	r5, r5, r8
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003438:	f416 3f40 	tst.w	r6, #196608	; 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800343c:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003440:	ea47 0705 	orr.w	r7, r7, r5
      GPIOx->MODER = temp;
 8003444:	6007      	str	r7, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003446:	d06c      	beq.n	8003522 <HAL_GPIO_Init+0x1a6>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003448:	f8d9 50f4 	ldr.w	r5, [r9, #244]	; 0xf4
 800344c:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003450:	f003 0c03 	and.w	ip, r3, #3
 8003454:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003458:	f045 0502 	orr.w	r5, r5, #2
 800345c:	f107 47b0 	add.w	r7, r7, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003460:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003464:	f8c9 50f4 	str.w	r5, [r9, #244]	; 0xf4
 8003468:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 800346c:	f8d9 50f4 	ldr.w	r5, [r9, #244]	; 0xf4
 8003470:	f005 0502 	and.w	r5, r5, #2
 8003474:	9501      	str	r5, [sp, #4]
 8003476:	9d01      	ldr	r5, [sp, #4]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003478:	fa0e f50c 	lsl.w	r5, lr, ip
        temp = SYSCFG->EXTICR[position >> 2U];
 800347c:	f8d7 8008 	ldr.w	r8, [r7, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003480:	ea28 0e05 	bic.w	lr, r8, r5
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003484:	4d31      	ldr	r5, [pc, #196]	; (800354c <HAL_GPIO_Init+0x1d0>)
 8003486:	42a8      	cmp	r0, r5
 8003488:	d04d      	beq.n	8003526 <HAL_GPIO_Init+0x1aa>
 800348a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800348e:	42a8      	cmp	r0, r5
 8003490:	d04b      	beq.n	800352a <HAL_GPIO_Init+0x1ae>
 8003492:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003496:	42a8      	cmp	r0, r5
 8003498:	d049      	beq.n	800352e <HAL_GPIO_Init+0x1b2>
 800349a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800349e:	42a8      	cmp	r0, r5
 80034a0:	d047      	beq.n	8003532 <HAL_GPIO_Init+0x1b6>
 80034a2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80034a6:	42a8      	cmp	r0, r5
 80034a8:	d045      	beq.n	8003536 <HAL_GPIO_Init+0x1ba>
 80034aa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80034ae:	42a8      	cmp	r0, r5
 80034b0:	d043      	beq.n	800353a <HAL_GPIO_Init+0x1be>
 80034b2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80034b6:	42a8      	cmp	r0, r5
 80034b8:	d041      	beq.n	800353e <HAL_GPIO_Init+0x1c2>
 80034ba:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80034be:	42a8      	cmp	r0, r5
 80034c0:	d03f      	beq.n	8003542 <HAL_GPIO_Init+0x1c6>
 80034c2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80034c6:	42a8      	cmp	r0, r5
 80034c8:	d03d      	beq.n	8003546 <HAL_GPIO_Init+0x1ca>
 80034ca:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80034ce:	42a8      	cmp	r0, r5
 80034d0:	bf0c      	ite	eq
 80034d2:	2509      	moveq	r5, #9
 80034d4:	250a      	movne	r5, #10
 80034d6:	fa05 f50c 	lsl.w	r5, r5, ip
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80034da:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80034de:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 80034e2:	60bd      	str	r5, [r7, #8]
        temp &= ~(iocurrent);
 80034e4:	ea6f 0702 	mvn.w	r7, r2
        temp = EXTI->RTSR1;
 80034e8:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 80034ea:	bf0c      	ite	eq
 80034ec:	403d      	andeq	r5, r7
          temp |= iocurrent;
 80034ee:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80034f0:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
        EXTI->RTSR1 = temp;
 80034f4:	6025      	str	r5, [r4, #0]
        temp = EXTI->FTSR1;
 80034f6:	6865      	ldr	r5, [r4, #4]
        temp &= ~(iocurrent);
 80034f8:	bf0c      	ite	eq
 80034fa:	403d      	andeq	r5, r7
          temp |= iocurrent;
 80034fc:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80034fe:	f416 3f00 	tst.w	r6, #131072	; 0x20000
        EXTI->FTSR1 = temp;
 8003502:	6065      	str	r5, [r4, #4]
        temp = EXTI_CurrentCPU->EMR1;
 8003504:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
        temp &= ~(iocurrent);
 8003508:	bf0c      	ite	eq
 800350a:	403d      	andeq	r5, r7
          temp |= iocurrent;
 800350c:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800350e:	03f6      	lsls	r6, r6, #15
        EXTI_CurrentCPU->EMR1 = temp;
 8003510:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
        temp = EXTI_CurrentCPU->IMR1;
 8003514:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
        temp &= ~(iocurrent);
 8003518:	bf54      	ite	pl
 800351a:	403d      	andpl	r5, r7
          temp |= iocurrent;
 800351c:	4315      	orrmi	r5, r2
        EXTI_CurrentCPU->IMR1 = temp;
 800351e:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
    position++;
 8003522:	3301      	adds	r3, #1
 8003524:	e731      	b.n	800338a <HAL_GPIO_Init+0xe>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003526:	2500      	movs	r5, #0
 8003528:	e7d5      	b.n	80034d6 <HAL_GPIO_Init+0x15a>
 800352a:	2501      	movs	r5, #1
 800352c:	e7d3      	b.n	80034d6 <HAL_GPIO_Init+0x15a>
 800352e:	2502      	movs	r5, #2
 8003530:	e7d1      	b.n	80034d6 <HAL_GPIO_Init+0x15a>
 8003532:	2503      	movs	r5, #3
 8003534:	e7cf      	b.n	80034d6 <HAL_GPIO_Init+0x15a>
 8003536:	2504      	movs	r5, #4
 8003538:	e7cd      	b.n	80034d6 <HAL_GPIO_Init+0x15a>
 800353a:	2505      	movs	r5, #5
 800353c:	e7cb      	b.n	80034d6 <HAL_GPIO_Init+0x15a>
 800353e:	2506      	movs	r5, #6
 8003540:	e7c9      	b.n	80034d6 <HAL_GPIO_Init+0x15a>
 8003542:	2507      	movs	r5, #7
 8003544:	e7c7      	b.n	80034d6 <HAL_GPIO_Init+0x15a>
 8003546:	2508      	movs	r5, #8
 8003548:	e7c5      	b.n	80034d6 <HAL_GPIO_Init+0x15a>
 800354a:	bf00      	nop
 800354c:	58020000 	.word	0x58020000
 8003550:	58024400 	.word	0x58024400

08003554 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003554:	b10a      	cbz	r2, 800355a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003556:	6181      	str	r1, [r0, #24]
  }
}
 8003558:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800355a:	0409      	lsls	r1, r1, #16
 800355c:	e7fb      	b.n	8003556 <HAL_GPIO_WritePin+0x2>

0800355e <LTDC_SetConfig>:
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800355e:	01d2      	lsls	r2, r2, #7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003560:	6800      	ldr	r0, [r0, #0]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003562:	f8d1 c000 	ldr.w	ip, [r1]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003566:	3284      	adds	r2, #132	; 0x84
 8003568:	1883      	adds	r3, r0, r2
{
 800356a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800356e:	68c6      	ldr	r6, [r0, #12]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003570:	f10c 0701 	add.w	r7, ip, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003574:	685d      	ldr	r5, [r3, #4]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8003576:	f04f 0e00 	mov.w	lr, #0
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800357a:	684c      	ldr	r4, [r1, #4]
 800357c:	f3c6 460b 	ubfx	r6, r6, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003580:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8003584:	f8d1 9018 	ldr.w	r9, [r1, #24]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003588:	4426      	add	r6, r4
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800358a:	605d      	str	r5, [r3, #4]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800358c:	68c5      	ldr	r5, [r0, #12]
 800358e:	f3c5 450b 	ubfx	r5, r5, #16, #12
 8003592:	443d      	add	r5, r7
 8003594:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8003598:	68ce      	ldr	r6, [r1, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800359a:	605d      	str	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800359c:	68c5      	ldr	r5, [r0, #12]
 800359e:	f3c5 050a 	ubfx	r5, r5, #0, #11
 80035a2:	442e      	add	r6, r5
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80035a4:	689d      	ldr	r5, [r3, #8]
 80035a6:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
 80035aa:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80035ac:	688d      	ldr	r5, [r1, #8]
 80035ae:	68c7      	ldr	r7, [r0, #12]
 80035b0:	3501      	adds	r5, #1
 80035b2:	f3c7 070a 	ubfx	r7, r7, #0, #11
 80035b6:	443d      	add	r5, r7
 80035b8:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80035bc:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80035be:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80035c0:	691d      	ldr	r5, [r3, #16]
 80035c2:	f025 0507 	bic.w	r5, r5, #7
 80035c6:	611d      	str	r5, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80035c8:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80035ca:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80035cc:	f891 7032 	ldrb.w	r7, [r1, #50]	; 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80035d0:	f891 8031 	ldrb.w	r8, [r1, #49]	; 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80035d4:	f8c3 e018 	str.w	lr, [r3, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80035d8:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
 80035dc:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 80035e0:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 80035e4:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
 80035e8:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80035ea:	695d      	ldr	r5, [r3, #20]
 80035ec:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 80035f0:	615d      	str	r5, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80035f2:	694d      	ldr	r5, [r1, #20]
 80035f4:	615d      	str	r5, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80035f6:	69dd      	ldr	r5, [r3, #28]
 80035f8:	f425 65e0 	bic.w	r5, r5, #1792	; 0x700
 80035fc:	f025 0507 	bic.w	r5, r5, #7
 8003600:	61dd      	str	r5, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8003602:	e9d1 5707 	ldrd	r5, r7, [r1, #28]
 8003606:	433d      	orrs	r5, r7
 8003608:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800360a:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800360c:	6a4d      	ldr	r5, [r1, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800360e:	f8c3 e028 	str.w	lr, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8003612:	629d      	str	r5, [r3, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8003614:	b31e      	cbz	r6, 800365e <LTDC_SetConfig+0x100>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8003616:	2e01      	cmp	r6, #1
 8003618:	d023      	beq.n	8003662 <LTDC_SetConfig+0x104>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800361a:	1eb5      	subs	r5, r6, #2
 800361c:	2d02      	cmp	r5, #2
 800361e:	d922      	bls.n	8003666 <LTDC_SetConfig+0x108>
  {
    tmp = 2U;
  }
  else
  {
    tmp = 1U;
 8003620:	2e07      	cmp	r6, #7
 8003622:	bf0c      	ite	eq
 8003624:	2502      	moveq	r5, #2
 8003626:	2501      	movne	r5, #1
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8003628:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800362a:	eba4 040c 	sub.w	r4, r4, ip
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800362e:	f006 26e0 	and.w	r6, r6, #3758153728	; 0xe000e000
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8003632:	436c      	muls	r4, r5
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8003634:	62de      	str	r6, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8003636:	3407      	adds	r4, #7
 8003638:	6a8e      	ldr	r6, [r1, #40]	; 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800363a:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800363c:	436e      	muls	r6, r5
 800363e:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8003642:	62dc      	str	r4, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8003644:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8003646:	f424 64ff 	bic.w	r4, r4, #2040	; 0x7f8
 800364a:	f024 0407 	bic.w	r4, r4, #7
 800364e:	631c      	str	r4, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8003650:	6319      	str	r1, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8003652:	5883      	ldr	r3, [r0, r2]
 8003654:	f043 0301 	orr.w	r3, r3, #1
 8003658:	5083      	str	r3, [r0, r2]
}
 800365a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4U;
 800365e:	2504      	movs	r5, #4
 8003660:	e7e2      	b.n	8003628 <LTDC_SetConfig+0xca>
    tmp = 3U;
 8003662:	2503      	movs	r5, #3
 8003664:	e7e0      	b.n	8003628 <LTDC_SetConfig+0xca>
    tmp = 2U;
 8003666:	2502      	movs	r5, #2
 8003668:	e7de      	b.n	8003628 <LTDC_SetConfig+0xca>
	...

0800366c <HAL_LTDC_Init>:
{
 800366c:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 800366e:	4604      	mov	r4, r0
 8003670:	2800      	cmp	r0, #0
 8003672:	d063      	beq.n	800373c <HAL_LTDC_Init+0xd0>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8003674:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8003678:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800367c:	b91b      	cbnz	r3, 8003686 <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 800367e:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 8003682:	f7fe f821 	bl	80016c8 <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003686:	2302      	movs	r3, #2
 8003688:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800368c:	6823      	ldr	r3, [r4, #0]
 800368e:	699a      	ldr	r2, [r3, #24]
 8003690:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8003694:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003696:	6999      	ldr	r1, [r3, #24]
 8003698:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 800369c:	4302      	orrs	r2, r0
 800369e:	68e0      	ldr	r0, [r4, #12]
 80036a0:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80036a2:	6920      	ldr	r0, [r4, #16]
 80036a4:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80036a6:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80036a8:	430a      	orrs	r2, r1
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80036aa:	4925      	ldr	r1, [pc, #148]	; (8003740 <HAL_LTDC_Init+0xd4>)
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80036ac:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80036ae:	689a      	ldr	r2, [r3, #8]
 80036b0:	400a      	ands	r2, r1
 80036b2:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80036b4:	689a      	ldr	r2, [r3, #8]
 80036b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80036ba:	69a0      	ldr	r0, [r4, #24]
 80036bc:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80036be:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80036c0:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80036c2:	68da      	ldr	r2, [r3, #12]
 80036c4:	400a      	ands	r2, r1
 80036c6:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80036c8:	68da      	ldr	r2, [r3, #12]
 80036ca:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80036ce:	6a20      	ldr	r0, [r4, #32]
 80036d0:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80036d2:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80036d4:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80036d6:	691a      	ldr	r2, [r3, #16]
 80036d8:	400a      	ands	r2, r1
 80036da:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80036dc:	691a      	ldr	r2, [r3, #16]
 80036de:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80036e2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80036e4:	4302      	orrs	r2, r0
 80036e6:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80036e8:	695a      	ldr	r2, [r3, #20]
 80036ea:	4011      	ands	r1, r2
 80036ec:	6159      	str	r1, [r3, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80036ee:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80036f0:	695a      	ldr	r2, [r3, #20]
 80036f2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80036f6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80036f8:	430a      	orrs	r2, r1
 80036fa:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80036fc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80036fe:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003702:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8003706:	f894 5035 	ldrb.w	r5, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800370a:	62d9      	str	r1, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800370c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800370e:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 8003712:	430a      	orrs	r2, r1
 8003714:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8003718:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800371c:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800371e:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8003720:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003722:	f042 0206 	orr.w	r2, r2, #6
 8003726:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8003728:	699a      	ldr	r2, [r3, #24]
 800372a:	f042 0201 	orr.w	r2, r2, #1
 800372e:	619a      	str	r2, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 8003730:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8003732:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 8003736:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
 800373a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800373c:	2001      	movs	r0, #1
 800373e:	e7fc      	b.n	800373a <HAL_LTDC_Init+0xce>
 8003740:	f000f800 	.word	0xf000f800

08003744 <HAL_LTDC_ConfigLayer>:
{
 8003744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hltdc);
 8003748:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
{
 800374c:	4606      	mov	r6, r0
 800374e:	460f      	mov	r7, r1
 8003750:	4694      	mov	ip, r2
  __HAL_LOCK(hltdc);
 8003752:	2b01      	cmp	r3, #1
 8003754:	f04f 0002 	mov.w	r0, #2
 8003758:	d01f      	beq.n	800379a <HAL_LTDC_ConfigLayer+0x56>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800375a:	2434      	movs	r4, #52	; 0x34
  __HAL_LOCK(hltdc);
 800375c:	f04f 0801 	mov.w	r8, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8003760:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003762:	f886 00a1 	strb.w	r0, [r6, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8003766:	fb04 6402 	mla	r4, r4, r2, r6
  __HAL_LOCK(hltdc);
 800376a:	f886 80a0 	strb.w	r8, [r6, #160]	; 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800376e:	3438      	adds	r4, #56	; 0x38
 8003770:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003772:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003774:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003776:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003778:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800377a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800377c:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800377e:	4630      	mov	r0, r6
 8003780:	4662      	mov	r2, ip
 8003782:	4639      	mov	r1, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8003784:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003786:	f7ff feea 	bl	800355e <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800378a:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 800378c:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800378e:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 8003792:	f886 80a1 	strb.w	r8, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8003796:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
}
 800379a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080037a0 <MMC_ReadExtCSD.constprop.0>:
  * @param  pFieldData: Pointer to the read buffer
  * @param  FieldIndex: Index of the field to be read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
static HAL_StatusTypeDef MMC_ReadExtCSD(MMC_HandleTypeDef *hmmc, uint32_t *pFieldData,
 80037a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80037a4:	4604      	mov	r4, r0
 80037a6:	b086      	sub	sp, #24
 80037a8:	4691      	mov	r9, r2
 80037aa:	460f      	mov	r7, r1
 80037ac:	4698      	mov	r8, r3
  /* Initialize data control register */
  hmmc->Instance->DCTRL = 0;

  /* Configure the MMC DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
  config.DataLength    = 512U;
 80037ae:	f04f 35ff 	mov.w	r5, #4294967295
  uint32_t tickstart = HAL_GetTick();
 80037b2:	f7fe fc87 	bl	80020c4 <HAL_GetTick>
  config.DataLength    = 512U;
 80037b6:	f44f 7300 	mov.w	r3, #512	; 0x200
  hmmc->ErrorCode = HAL_MMC_ERROR_NONE;
 80037ba:	f04f 0a00 	mov.w	sl, #0
  uint32_t tickstart = HAL_GetTick();
 80037be:	4606      	mov	r6, r0
  hmmc->Instance->DCTRL = 0;
 80037c0:	6820      	ldr	r0, [r4, #0]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80037c2:	f04f 0c90 	mov.w	ip, #144	; 0x90
  hmmc->ErrorCode = HAL_MMC_ERROR_NONE;
 80037c6:	f8c4 a034 	str.w	sl, [r4, #52]	; 0x34
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
  config.DPSM          = SDMMC_DPSM_ENABLE;
  (void)SDMMC_ConfigData(hmmc->Instance, &config);
 80037ca:	4669      	mov	r1, sp
  hmmc->Instance->DCTRL = 0;
 80037cc:	f8c0 a02c 	str.w	sl, [r0, #44]	; 0x2c
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80037d0:	f8cd a010 	str.w	sl, [sp, #16]
  config.DataLength    = 512U;
 80037d4:	e9cd 5300 	strd	r5, r3, [sp]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80037d8:	2302      	movs	r3, #2
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80037da:	2501      	movs	r5, #1
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80037dc:	e9cd c302 	strd	ip, r3, [sp, #8]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80037e0:	9505      	str	r5, [sp, #20]
  (void)SDMMC_ConfigData(hmmc->Instance, &config);
 80037e2:	f003 fbc8 	bl	8006f76 <SDMMC_ConfigData>

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdSendEXTCSD(hmmc->Instance, 0);
 80037e6:	4651      	mov	r1, sl
 80037e8:	6820      	ldr	r0, [r4, #0]
 80037ea:	f003 fd13 	bl	8007214 <SDMMC_CmdSendEXTCSD>
  if (errorstate != HAL_MMC_ERROR_NONE)
 80037ee:	4682      	mov	sl, r0
 80037f0:	b360      	cbz	r0, 800384c <MMC_ReadExtCSD.constprop.0+0xac>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 80037f2:	6823      	ldr	r3, [r4, #0]
 80037f4:	4a30      	ldr	r2, [pc, #192]	; (80038b8 <MMC_ReadExtCSD.constprop.0+0x118>)
 80037f6:	639a      	str	r2, [r3, #56]	; 0x38
    hmmc->ErrorCode |= errorstate;
 80037f8:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80037fa:	ea4a 0000 	orr.w	r0, sl, r0
 80037fe:	6360      	str	r0, [r4, #52]	; 0x34
    hmmc->State = HAL_MMC_STATE_READY;
    return HAL_ERROR;
 8003800:	4628      	mov	r0, r5
    hmmc->State = HAL_MMC_STATE_READY;
 8003802:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
  __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_DATA_FLAGS);

  hmmc->State = HAL_MMC_STATE_READY;

  return HAL_OK;
}
 8003806:	b006      	add	sp, #24
 8003808:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXFIFOHF))
 800380c:	0418      	lsls	r0, r3, #16
 800380e:	d50c      	bpl.n	800382a <MMC_ReadExtCSD.constprop.0+0x8a>
        tmp_data = SDMMC_ReadFIFO(hmmc->Instance);
 8003810:	6820      	ldr	r0, [r4, #0]
 8003812:	f003 fb8b 	bl	8006f2c <SDMMC_ReadFIFO>
        if ((i + count) == ((uint32_t)FieldIndex / 4U))
 8003816:	eb0a 0305 	add.w	r3, sl, r5
      for (count = 0U; count < 8U; count++)
 800381a:	3501      	adds	r5, #1
        if ((i + count) == ((uint32_t)FieldIndex / 4U))
 800381c:	4599      	cmp	r9, r3
          *pFieldData = tmp_data;
 800381e:	bf08      	it	eq
 8003820:	6038      	streq	r0, [r7, #0]
      for (count = 0U; count < 8U; count++)
 8003822:	2d08      	cmp	r5, #8
 8003824:	d1f4      	bne.n	8003810 <MMC_ReadExtCSD.constprop.0+0x70>
      i += 8U;
 8003826:	f10a 0a08 	add.w	sl, sl, #8
    if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 800382a:	f7fe fc4b 	bl	80020c4 <HAL_GetTick>
 800382e:	1b80      	subs	r0, r0, r6
 8003830:	4540      	cmp	r0, r8
 8003832:	d30d      	bcc.n	8003850 <MMC_ReadExtCSD.constprop.0+0xb0>
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8003834:	6823      	ldr	r3, [r4, #0]
      return HAL_TIMEOUT;
 8003836:	2003      	movs	r0, #3
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8003838:	4a1f      	ldr	r2, [pc, #124]	; (80038b8 <MMC_ReadExtCSD.constprop.0+0x118>)
 800383a:	639a      	str	r2, [r3, #56]	; 0x38
      hmmc->ErrorCode |= HAL_MMC_ERROR_TIMEOUT;
 800383c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800383e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003842:	6363      	str	r3, [r4, #52]	; 0x34
      hmmc->State = HAL_MMC_STATE_READY;
 8003844:	2301      	movs	r3, #1
 8003846:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
      return HAL_TIMEOUT;
 800384a:	e7dc      	b.n	8003806 <MMC_ReadExtCSD.constprop.0+0x66>
        if ((i + count) == ((uint32_t)FieldIndex / 4U))
 800384c:	ea4f 0999 	mov.w	r9, r9, lsr #2
  while (!__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 8003850:	6820      	ldr	r0, [r4, #0]
 8003852:	6b45      	ldr	r5, [r0, #52]	; 0x34
    if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXFIFOHF))
 8003854:	6b43      	ldr	r3, [r0, #52]	; 0x34
  while (!__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 8003856:	f415 7595 	ands.w	r5, r5, #298	; 0x12a
 800385a:	d0d7      	beq.n	800380c <MMC_ReadExtCSD.constprop.0+0x6c>
  if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_DTIMEOUT))
 800385c:	0719      	lsls	r1, r3, #28
 800385e:	d509      	bpl.n	8003874 <MMC_ReadExtCSD.constprop.0+0xd4>
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8003860:	4b15      	ldr	r3, [pc, #84]	; (80038b8 <MMC_ReadExtCSD.constprop.0+0x118>)
 8003862:	6383      	str	r3, [r0, #56]	; 0x38
    hmmc->ErrorCode |= HAL_MMC_ERROR_DATA_TIMEOUT;
 8003864:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003866:	f043 0308 	orr.w	r3, r3, #8
    hmmc->State = HAL_MMC_STATE_READY;
 800386a:	2001      	movs	r0, #1
    hmmc->ErrorCode |= HAL_MMC_ERROR_DATA_CRC_FAIL;
 800386c:	6363      	str	r3, [r4, #52]	; 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 800386e:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    return HAL_ERROR;
 8003872:	e7c8      	b.n	8003806 <MMC_ReadExtCSD.constprop.0+0x66>
  else if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_DCRCFAIL))
 8003874:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003876:	079a      	lsls	r2, r3, #30
 8003878:	d505      	bpl.n	8003886 <MMC_ReadExtCSD.constprop.0+0xe6>
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 800387a:	4b0f      	ldr	r3, [pc, #60]	; (80038b8 <MMC_ReadExtCSD.constprop.0+0x118>)
 800387c:	6383      	str	r3, [r0, #56]	; 0x38
    hmmc->ErrorCode |= HAL_MMC_ERROR_DATA_CRC_FAIL;
 800387e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003880:	f043 0302 	orr.w	r3, r3, #2
 8003884:	e7f1      	b.n	800386a <MMC_ReadExtCSD.constprop.0+0xca>
  else if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR))
 8003886:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003888:	069b      	lsls	r3, r3, #26
 800388a:	d505      	bpl.n	8003898 <MMC_ReadExtCSD.constprop.0+0xf8>
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 800388c:	4b0a      	ldr	r3, [pc, #40]	; (80038b8 <MMC_ReadExtCSD.constprop.0+0x118>)
 800388e:	6383      	str	r3, [r0, #56]	; 0x38
    hmmc->ErrorCode |= HAL_MMC_ERROR_RX_OVERRUN;
 8003890:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003892:	f043 0320 	orr.w	r3, r3, #32
 8003896:	e7e8      	b.n	800386a <MMC_ReadExtCSD.constprop.0+0xca>
  errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16));
 8003898:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800389a:	0409      	lsls	r1, r1, #16
 800389c:	f003 fca1 	bl	80071e2 <SDMMC_CmdSendStatus>
  if (errorstate != HAL_MMC_ERROR_NONE)
 80038a0:	b110      	cbz	r0, 80038a8 <MMC_ReadExtCSD.constprop.0+0x108>
    hmmc->ErrorCode |= errorstate;
 80038a2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80038a4:	4318      	orrs	r0, r3
 80038a6:	6360      	str	r0, [r4, #52]	; 0x34
  __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_DATA_FLAGS);
 80038a8:	6823      	ldr	r3, [r4, #0]
  return HAL_OK;
 80038aa:	2000      	movs	r0, #0
  __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_DATA_FLAGS);
 80038ac:	4a03      	ldr	r2, [pc, #12]	; (80038bc <MMC_ReadExtCSD.constprop.0+0x11c>)
 80038ae:	639a      	str	r2, [r3, #56]	; 0x38
  hmmc->State = HAL_MMC_STATE_READY;
 80038b0:	2301      	movs	r3, #1
 80038b2:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  return HAL_OK;
 80038b6:	e7a6      	b.n	8003806 <MMC_ReadExtCSD.constprop.0+0x66>
 80038b8:	1fe00fff 	.word	0x1fe00fff
 80038bc:	18000f3a 	.word	0x18000f3a

080038c0 <MMC_PwrClassUpdate.part.0>:
  uint32_t power_class;
  uint32_t supported_pwr_class;

  if ((Wide == SDMMC_BUS_WIDE_8B) || (Wide == SDMMC_BUS_WIDE_4B))
  {
    power_class = 0U; /* Default value after power-on or software reset */
 80038c0:	2300      	movs	r3, #0
static uint32_t MMC_PwrClassUpdate(MMC_HandleTypeDef *hmmc, uint32_t Wide, uint32_t Speed)
 80038c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80038c4:	460f      	mov	r7, r1
 80038c6:	4616      	mov	r6, r2
    power_class = 0U; /* Default value after power-on or software reset */
 80038c8:	9301      	str	r3, [sp, #4]

    /* Read the PowerClass field of the Extended CSD register */
    if (MMC_ReadExtCSD(hmmc, &power_class, 187, SDMMC_DATATIMEOUT) != HAL_OK) /* Field POWER_CLASS [187] */
 80038ca:	22bb      	movs	r2, #187	; 0xbb
 80038cc:	f04f 33ff 	mov.w	r3, #4294967295
 80038d0:	a901      	add	r1, sp, #4
static uint32_t MMC_PwrClassUpdate(MMC_HandleTypeDef *hmmc, uint32_t Wide, uint32_t Speed)
 80038d2:	4605      	mov	r5, r0
    if (MMC_ReadExtCSD(hmmc, &power_class, 187, SDMMC_DATATIMEOUT) != HAL_OK) /* Field POWER_CLASS [187] */
 80038d4:	f7ff ff64 	bl	80037a0 <MMC_ReadExtCSD.constprop.0>
 80038d8:	bb80      	cbnz	r0, 800393c <MMC_PwrClassUpdate.part.0+0x7c>
    {
      errorstate = SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
    }
    else
    {
      power_class = ((power_class >> 24U) & 0x000000FFU);
 80038da:	f89d 3007 	ldrb.w	r3, [sp, #7]
  uint32_t errorstate = HAL_MMC_ERROR_NONE;
 80038de:	4604      	mov	r4, r0
      power_class = ((power_class >> 24U) & 0x000000FFU);
 80038e0:	9301      	str	r3, [sp, #4]
    }

    /* Get the supported PowerClass field of the Extended CSD register */
    if (Speed == SDMMC_SPEED_MODE_DDR)
 80038e2:	2e04      	cmp	r6, #4
 80038e4:	d12d      	bne.n	8003942 <MMC_PwrClassUpdate.part.0+0x82>
    {
      /* Field PWR_CL_DDR_52_xxx [238 or 239] */
      supported_pwr_class = ((hmmc->Ext_CSD[(MMC_EXT_CSD_PWR_CL_DDR_52_INDEX / 4)] >> MMC_EXT_CSD_PWR_CL_DDR_52_POS) &
 80038e6:	f895 3163 	ldrb.w	r3, [r5, #355]	; 0x163
      /* Field PWR_CL_26_xxx [201 or 203] */
      supported_pwr_class = ((hmmc->Ext_CSD[(MMC_EXT_CSD_PWR_CL_26_INDEX / 4)] >> MMC_EXT_CSD_PWR_CL_26_POS) &
                             0x000000FFU);
    }

    if (errorstate == HAL_MMC_ERROR_NONE)
 80038ea:	2c00      	cmp	r4, #0
 80038ec:	d13c      	bne.n	8003968 <MMC_PwrClassUpdate.part.0+0xa8>
    {
      if (Wide == SDMMC_BUS_WIDE_8B)
 80038ee:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
      {
        /* Bit [7:4]: power class for 8-bits bus configuration - Bit [3:0]: power class for 4-bits bus configuration */
        supported_pwr_class = (supported_pwr_class >> 4U);
      }

      if ((power_class & 0x0FU) != (supported_pwr_class & 0x0FU))
 80038f2:	9a01      	ldr	r2, [sp, #4]
        supported_pwr_class = (supported_pwr_class >> 4U);
 80038f4:	bf08      	it	eq
 80038f6:	091b      	lsreq	r3, r3, #4
      if ((power_class & 0x0FU) != (supported_pwr_class & 0x0FU))
 80038f8:	405a      	eors	r2, r3
 80038fa:	0712      	lsls	r2, r2, #28
 80038fc:	d034      	beq.n	8003968 <MMC_PwrClassUpdate.part.0+0xa8>
      {
        /* Need to change current power class */
        errorstate = SDMMC_CmdSwitch(hmmc->Instance, (0x03BB0000U | ((supported_pwr_class & 0x0FU) << 8U)));
 80038fe:	0219      	lsls	r1, r3, #8
 8003900:	6828      	ldr	r0, [r5, #0]
 8003902:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
 8003906:	f041 716e 	orr.w	r1, r1, #62390272	; 0x3b80000
 800390a:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
 800390e:	f003 fc4c 	bl	80071aa <SDMMC_CmdSwitch>

        if (errorstate == HAL_MMC_ERROR_NONE)
 8003912:	b9f0      	cbnz	r0, 8003952 <MMC_PwrClassUpdate.part.0+0x92>
        {
          /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
          count = SDMMC_MAX_TRIAL;
 8003914:	f64f 76ff 	movw	r6, #65535	; 0xffff
          do
          {
            errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 8003918:	6c29      	ldr	r1, [r5, #64]	; 0x40
 800391a:	6828      	ldr	r0, [r5, #0]
 800391c:	0409      	lsls	r1, r1, #16
 800391e:	f003 fc60 	bl	80071e2 <SDMMC_CmdSendStatus>
            if (errorstate != HAL_MMC_ERROR_NONE)
 8003922:	4601      	mov	r1, r0
 8003924:	b9b8      	cbnz	r0, 8003956 <MMC_PwrClassUpdate.part.0+0x96>
            {
              break;
            }

            /* Get command response */
            response = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 8003926:	6828      	ldr	r0, [r5, #0]
            count--;
 8003928:	3e01      	subs	r6, #1
            response = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 800392a:	f003 fb21 	bl	8006f70 <SDMMC_GetResponse>
          } while (((response & 0x100U) == 0U) && (count != 0U));
 800392e:	05c3      	lsls	r3, r0, #23
 8003930:	d413      	bmi.n	800395a <MMC_PwrClassUpdate.part.0+0x9a>
 8003932:	2e00      	cmp	r6, #0
 8003934:	d1f0      	bne.n	8003918 <MMC_PwrClassUpdate.part.0+0x58>
              errorstate = SDMMC_ERROR_UNSUPPORTED_FEATURE;
            }
          }
          else if (count == 0U)
          {
            errorstate = SDMMC_ERROR_TIMEOUT;
 8003936:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800393a:	e015      	b.n	8003968 <MMC_PwrClassUpdate.part.0+0xa8>
      errorstate = SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800393c:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 8003940:	e7cf      	b.n	80038e2 <MMC_PwrClassUpdate.part.0+0x22>
      supported_pwr_class = ((hmmc->Ext_CSD[(MMC_EXT_CSD_PWR_CL_52_INDEX / 4)] >> MMC_EXT_CSD_PWR_CL_52_POS) &
 8003942:	f8d5 313c 	ldr.w	r3, [r5, #316]	; 0x13c
    else if (Speed == SDMMC_SPEED_MODE_HIGH)
 8003946:	2e02      	cmp	r6, #2
      supported_pwr_class = ((hmmc->Ext_CSD[(MMC_EXT_CSD_PWR_CL_52_INDEX / 4)] >> MMC_EXT_CSD_PWR_CL_52_POS) &
 8003948:	bf0c      	ite	eq
 800394a:	f3c3 4307 	ubfxeq	r3, r3, #16, #8
      supported_pwr_class = ((hmmc->Ext_CSD[(MMC_EXT_CSD_PWR_CL_26_INDEX / 4)] >> MMC_EXT_CSD_PWR_CL_26_POS) &
 800394e:	0e1b      	lsrne	r3, r3, #24
 8003950:	e7cb      	b.n	80038ea <MMC_PwrClassUpdate.part.0+0x2a>
 8003952:	4604      	mov	r4, r0
 8003954:	e008      	b.n	8003968 <MMC_PwrClassUpdate.part.0+0xa8>
 8003956:	4604      	mov	r4, r0
 8003958:	e006      	b.n	8003968 <MMC_PwrClassUpdate.part.0+0xa8>
          if ((count != 0U) && (errorstate == HAL_MMC_ERROR_NONE))
 800395a:	2e00      	cmp	r6, #0
 800395c:	d0eb      	beq.n	8003936 <MMC_PwrClassUpdate.part.0+0x76>
              errorstate = SDMMC_ERROR_UNSUPPORTED_FEATURE;
 800395e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003962:	bf18      	it	ne
 8003964:	f04f 5480 	movne.w	r4, #268435456	; 0x10000000
      }
    }
  }

  return errorstate;
}
 8003968:	4620      	mov	r0, r4
 800396a:	b003      	add	sp, #12
 800396c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800396e <MMC_PwrClassUpdate>:
  if ((Wide == SDMMC_BUS_WIDE_8B) || (Wide == SDMMC_BUS_WIDE_4B))
 800396e:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8003972:	d002      	beq.n	800397a <MMC_PwrClassUpdate+0xc>
 8003974:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 8003978:	d101      	bne.n	800397e <MMC_PwrClassUpdate+0x10>
 800397a:	f7ff bfa1 	b.w	80038c0 <MMC_PwrClassUpdate.part.0>
}
 800397e:	2000      	movs	r0, #0
 8003980:	4770      	bx	lr
	...

08003984 <HAL_MMC_GetCardCSD>:
  pCSD->CSDStruct = (uint8_t)((hmmc->CSD[0] & 0xC0000000U) >> 30U);
 8003984:	6d43      	ldr	r3, [r0, #84]	; 0x54
{
 8003986:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003988:	460c      	mov	r4, r1
  pCSD->CSDStruct = (uint8_t)((hmmc->CSD[0] & 0xC0000000U) >> 30U);
 800398a:	0f99      	lsrs	r1, r3, #30
  uint32_t block_nbr = 0;
 800398c:	2200      	movs	r2, #0
{
 800398e:	4605      	mov	r5, r0
  pCSD->CSDStruct = (uint8_t)((hmmc->CSD[0] & 0xC0000000U) >> 30U);
 8003990:	7021      	strb	r1, [r4, #0]
  pCSD->SysSpecVersion = (uint8_t)((hmmc->CSD[0] & 0x3C000000U) >> 26U);
 8003992:	f3c3 6183 	ubfx	r1, r3, #26, #4
  uint32_t block_nbr = 0;
 8003996:	9201      	str	r2, [sp, #4]
  pCSD->SysSpecVersion = (uint8_t)((hmmc->CSD[0] & 0x3C000000U) >> 26U);
 8003998:	7061      	strb	r1, [r4, #1]
  pCSD->Reserved1 = (uint8_t)((hmmc->CSD[0] & 0x03000000U) >> 24U);
 800399a:	f3c3 6101 	ubfx	r1, r3, #24, #2
 800399e:	70a1      	strb	r1, [r4, #2]
  pCSD->TAAC = (uint8_t)((hmmc->CSD[0] & 0x00FF0000U) >> 16U);
 80039a0:	f3c3 4107 	ubfx	r1, r3, #16, #8
 80039a4:	70e1      	strb	r1, [r4, #3]
  pCSD->NSAC = (uint8_t)((hmmc->CSD[0] & 0x0000FF00U) >> 8U);
 80039a6:	f3c3 2107 	ubfx	r1, r3, #8, #8
  pCSD->MaxBusClkFrec = (uint8_t)(hmmc->CSD[0] & 0x000000FFU);
 80039aa:	b2db      	uxtb	r3, r3
  pCSD->NSAC = (uint8_t)((hmmc->CSD[0] & 0x0000FF00U) >> 8U);
 80039ac:	7121      	strb	r1, [r4, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hmmc->CSD[0] & 0x000000FFU);
 80039ae:	7163      	strb	r3, [r4, #5]
  pCSD->CardComdClasses = (uint16_t)((hmmc->CSD[1] & 0xFFF00000U) >> 20U);
 80039b0:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80039b2:	0d19      	lsrs	r1, r3, #20
 80039b4:	80e1      	strh	r1, [r4, #6]
  pCSD->RdBlockLen = (uint8_t)((hmmc->CSD[1] & 0x000F0000U) >> 16U);
 80039b6:	f3c3 4103 	ubfx	r1, r3, #16, #4
 80039ba:	7221      	strb	r1, [r4, #8]
  pCSD->PartBlockRead   = (uint8_t)((hmmc->CSD[1] & 0x00008000U) >> 15U);
 80039bc:	f3c3 31c0 	ubfx	r1, r3, #15, #1
 80039c0:	7261      	strb	r1, [r4, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hmmc->CSD[1] & 0x00004000U) >> 14U);
 80039c2:	f3c3 3180 	ubfx	r1, r3, #14, #1
 80039c6:	72a1      	strb	r1, [r4, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hmmc->CSD[1] & 0x00002000U) >> 13U);
 80039c8:	f3c3 3140 	ubfx	r1, r3, #13, #1
  pCSD->DSRImpl = (uint8_t)((hmmc->CSD[1] & 0x00001000U) >> 12U);
 80039cc:	f3c3 3300 	ubfx	r3, r3, #12, #1
  pCSD->RdBlockMisalign = (uint8_t)((hmmc->CSD[1] & 0x00002000U) >> 13U);
 80039d0:	72e1      	strb	r1, [r4, #11]
  if (MMC_ReadExtCSD(hmmc, &block_nbr, 212, 0x0FFFFFFFU) != HAL_OK) /* Field SEC_COUNT [215:212] */
 80039d2:	a901      	add	r1, sp, #4
  pCSD->DSRImpl = (uint8_t)((hmmc->CSD[1] & 0x00001000U) >> 12U);
 80039d4:	7323      	strb	r3, [r4, #12]
  if (MMC_ReadExtCSD(hmmc, &block_nbr, 212, 0x0FFFFFFFU) != HAL_OK) /* Field SEC_COUNT [215:212] */
 80039d6:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
  pCSD->Reserved2 = 0U; /*!< Reserved */
 80039da:	7362      	strb	r2, [r4, #13]
  if (MMC_ReadExtCSD(hmmc, &block_nbr, 212, 0x0FFFFFFFU) != HAL_OK) /* Field SEC_COUNT [215:212] */
 80039dc:	22d4      	movs	r2, #212	; 0xd4
 80039de:	f7ff fedf 	bl	80037a0 <MMC_ReadExtCSD.constprop.0>
 80039e2:	2800      	cmp	r0, #0
 80039e4:	f040 8086 	bne.w	8003af4 <HAL_MMC_GetCardCSD+0x170>
  if (hmmc->MmcCard.CardType == MMC_LOW_CAPACITY_CARD)
 80039e8:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d16e      	bne.n	8003acc <HAL_MMC_GetCardCSD+0x148>
    pCSD->DeviceSize = (((hmmc->CSD[1] & 0x000003FFU) << 2U) | ((hmmc->CSD[2] & 0xC0000000U) >> 30U));
 80039ee:	f640 72fc 	movw	r2, #4092	; 0xffc
 80039f2:	e9d5 1316 	ldrd	r1, r3, [r5, #88]	; 0x58
 80039f6:	ea02 0281 	and.w	r2, r2, r1, lsl #2
 80039fa:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 80039fe:	6122      	str	r2, [r4, #16]
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hmmc->CSD[2] & 0x38000000U) >> 27U);
 8003a00:	f3c3 62c2 	ubfx	r2, r3, #27, #3
 8003a04:	7522      	strb	r2, [r4, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hmmc->CSD[2] & 0x07000000U) >> 24U);
 8003a06:	f3c3 6202 	ubfx	r2, r3, #24, #3
 8003a0a:	7562      	strb	r2, [r4, #21]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hmmc->CSD[2] & 0x00E00000U) >> 21U);
 8003a0c:	f3c3 5242 	ubfx	r2, r3, #21, #3
 8003a10:	75a2      	strb	r2, [r4, #22]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hmmc->CSD[2] & 0x001C0000U) >> 18U);
 8003a12:	f3c3 4282 	ubfx	r2, r3, #18, #3
    pCSD->DeviceSizeMul = (uint8_t)((hmmc->CSD[2] & 0x00038000U) >> 15U);
 8003a16:	f3c3 33c2 	ubfx	r3, r3, #15, #3
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hmmc->CSD[2] & 0x001C0000U) >> 18U);
 8003a1a:	75e2      	strb	r2, [r4, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hmmc->CSD[2] & 0x00038000U) >> 15U);
 8003a1c:	7623      	strb	r3, [r4, #24]
    hmmc->MmcCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8003a1e:	6923      	ldr	r3, [r4, #16]
    hmmc->MmcCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8003a20:	7e22      	ldrb	r2, [r4, #24]
    hmmc->MmcCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8003a22:	3301      	adds	r3, #1
    hmmc->MmcCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8003a24:	f002 0207 	and.w	r2, r2, #7
 8003a28:	3202      	adds	r2, #2
 8003a2a:	fa03 f202 	lsl.w	r2, r3, r2
 8003a2e:	646a      	str	r2, [r5, #68]	; 0x44
    hmmc->MmcCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8003a30:	7a23      	ldrb	r3, [r4, #8]
 8003a32:	f003 010f 	and.w	r1, r3, #15
 8003a36:	2301      	movs	r3, #1
 8003a38:	408b      	lsls	r3, r1
 8003a3a:	64ab      	str	r3, [r5, #72]	; 0x48
    hmmc->MmcCard.LogBlockNbr = (hmmc->MmcCard.BlockNbr) * ((hmmc->MmcCard.BlockSize) / 512U);
 8003a3c:	0a5b      	lsrs	r3, r3, #9
 8003a3e:	4353      	muls	r3, r2
 8003a40:	64eb      	str	r3, [r5, #76]	; 0x4c
    hmmc->MmcCard.LogBlockSize = 512U;
 8003a42:	f44f 7300 	mov.w	r3, #512	; 0x200
    hmmc->MmcCard.LogBlockSize = hmmc->MmcCard.BlockSize;
 8003a46:	652b      	str	r3, [r5, #80]	; 0x50
  pCSD->EraseGrSize = (uint8_t)((hmmc->CSD[2] & 0x00004000U) >> 14U);
 8003a48:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 8003a4a:	f3c3 3280 	ubfx	r2, r3, #14, #1
 8003a4e:	7662      	strb	r2, [r4, #25]
  pCSD->EraseGrMul = (uint8_t)((hmmc->CSD[2] & 0x00003F80U) >> 7U);
 8003a50:	f3c3 12c6 	ubfx	r2, r3, #7, #7
  pCSD->WrProtectGrSize = (uint8_t)(hmmc->CSD[2] & 0x0000007FU);
 8003a54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  pCSD->EraseGrMul = (uint8_t)((hmmc->CSD[2] & 0x00003F80U) >> 7U);
 8003a58:	76a2      	strb	r2, [r4, #26]
  pCSD->WrProtectGrSize = (uint8_t)(hmmc->CSD[2] & 0x0000007FU);
 8003a5a:	76e3      	strb	r3, [r4, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hmmc->CSD[3] & 0x80000000U) >> 31U);
 8003a5c:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8003a5e:	0fda      	lsrs	r2, r3, #31
 8003a60:	7722      	strb	r2, [r4, #28]
  pCSD->ManDeflECC = (uint8_t)((hmmc->CSD[3] & 0x60000000U) >> 29U);
 8003a62:	f3c3 7241 	ubfx	r2, r3, #29, #2
 8003a66:	7762      	strb	r2, [r4, #29]
  pCSD->WrSpeedFact = (uint8_t)((hmmc->CSD[3] & 0x1C000000U) >> 26U);
 8003a68:	f3c3 6282 	ubfx	r2, r3, #26, #3
 8003a6c:	77a2      	strb	r2, [r4, #30]
  pCSD->MaxWrBlockLen = (uint8_t)((hmmc->CSD[3] & 0x03C00000U) >> 22U);
 8003a6e:	f3c3 5283 	ubfx	r2, r3, #22, #4
 8003a72:	77e2      	strb	r2, [r4, #31]
  pCSD->WriteBlockPaPartial = (uint8_t)((hmmc->CSD[3] & 0x00200000U) >> 21U);
 8003a74:	f3c3 5240 	ubfx	r2, r3, #21, #1
 8003a78:	f884 2020 	strb.w	r2, [r4, #32]
  pCSD->Reserved3 = 0;
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
  pCSD->ContentProtectAppli = (uint8_t)((hmmc->CSD[3] & 0x00010000U) >> 16U);
 8003a82:	f3c3 4200 	ubfx	r2, r3, #16, #1
 8003a86:	f884 2022 	strb.w	r2, [r4, #34]	; 0x22
  pCSD->FileFormatGroup = (uint8_t)((hmmc->CSD[3] & 0x00008000U) >> 15U);
 8003a8a:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 8003a8e:	f884 2023 	strb.w	r2, [r4, #35]	; 0x23
  pCSD->CopyFlag = (uint8_t)((hmmc->CSD[3] & 0x00004000U) >> 14U);
 8003a92:	f3c3 3280 	ubfx	r2, r3, #14, #1
 8003a96:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
  pCSD->PermWrProtect = (uint8_t)((hmmc->CSD[3] & 0x00002000U) >> 13U);
 8003a9a:	f3c3 3240 	ubfx	r2, r3, #13, #1
 8003a9e:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
  pCSD->TempWrProtect = (uint8_t)((hmmc->CSD[3] & 0x00001000U) >> 12U);
 8003aa2:	f3c3 3200 	ubfx	r2, r3, #12, #1
 8003aa6:	f884 2026 	strb.w	r2, [r4, #38]	; 0x26
  pCSD->FileFormat = (uint8_t)((hmmc->CSD[3] & 0x00000C00U) >> 10U);
 8003aaa:	f3c3 2281 	ubfx	r2, r3, #10, #2
 8003aae:	f884 2027 	strb.w	r2, [r4, #39]	; 0x27
  pCSD->ECC = (uint8_t)((hmmc->CSD[3] & 0x00000300U) >> 8U);
 8003ab2:	f3c3 2201 	ubfx	r2, r3, #8, #2
  pCSD->CSD_CRC = (uint8_t)((hmmc->CSD[3] & 0x000000FEU) >> 1U);
 8003ab6:	f3c3 0346 	ubfx	r3, r3, #1, #7
  pCSD->ECC = (uint8_t)((hmmc->CSD[3] & 0x00000300U) >> 8U);
 8003aba:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
  pCSD->CSD_CRC = (uint8_t)((hmmc->CSD[3] & 0x000000FEU) >> 1U);
 8003abe:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
  pCSD->Reserved4 = 1;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
}
 8003ac8:	b003      	add	sp, #12
 8003aca:	bd30      	pop	{r4, r5, pc}
  else if (hmmc->MmcCard.CardType == MMC_HIGH_CAPACITY_CARD)
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	d106      	bne.n	8003ade <HAL_MMC_GetCardCSD+0x15a>
    hmmc->MmcCard.BlockNbr = block_nbr;
 8003ad0:	9b01      	ldr	r3, [sp, #4]
 8003ad2:	646b      	str	r3, [r5, #68]	; 0x44
    hmmc->MmcCard.LogBlockNbr = hmmc->MmcCard.BlockNbr;
 8003ad4:	64eb      	str	r3, [r5, #76]	; 0x4c
    hmmc->MmcCard.BlockSize = 512U;
 8003ad6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003ada:	64ab      	str	r3, [r5, #72]	; 0x48
 8003adc:	e7b3      	b.n	8003a46 <HAL_MMC_GetCardCSD+0xc2>
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8003ade:	682b      	ldr	r3, [r5, #0]
    hmmc->State = HAL_MMC_STATE_READY;
 8003ae0:	2001      	movs	r0, #1
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8003ae2:	4a05      	ldr	r2, [pc, #20]	; (8003af8 <HAL_MMC_GetCardCSD+0x174>)
 8003ae4:	639a      	str	r2, [r3, #56]	; 0x38
    hmmc->ErrorCode |= HAL_MMC_ERROR_UNSUPPORTED_FEATURE;
 8003ae6:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8003ae8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003aec:	636b      	str	r3, [r5, #52]	; 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 8003aee:	f885 0030 	strb.w	r0, [r5, #48]	; 0x30
    return HAL_ERROR;
 8003af2:	e7e9      	b.n	8003ac8 <HAL_MMC_GetCardCSD+0x144>
    return HAL_ERROR;
 8003af4:	2001      	movs	r0, #1
 8003af6:	e7e7      	b.n	8003ac8 <HAL_MMC_GetCardCSD+0x144>
 8003af8:	1fe00fff 	.word	0x1fe00fff

08003afc <HAL_MMC_GetCardExtCSD>:
{
 8003afc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003b00:	460d      	mov	r5, r1
 8003b02:	b087      	sub	sp, #28
 8003b04:	4604      	mov	r4, r0
 8003b06:	4691      	mov	r9, r2
  uint32_t tickstart = HAL_GetTick();
 8003b08:	f7fe fadc 	bl	80020c4 <HAL_GetTick>
 8003b0c:	4680      	mov	r8, r0
  if (NULL == pExtCSD)
 8003b0e:	b945      	cbnz	r5, 8003b22 <HAL_MMC_GetCardExtCSD+0x26>
    hmmc->ErrorCode |= HAL_MMC_ERROR_PARAM;
 8003b10:	6b63      	ldr	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 8003b12:	2601      	movs	r6, #1
    hmmc->ErrorCode |= HAL_MMC_ERROR_PARAM;
 8003b14:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003b18:	6363      	str	r3, [r4, #52]	; 0x34
}
 8003b1a:	4630      	mov	r0, r6
 8003b1c:	b007      	add	sp, #28
 8003b1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (hmmc->State == HAL_MMC_STATE_READY)
 8003b22:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8003b26:	2700      	movs	r7, #0
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	b2de      	uxtb	r6, r3
 8003b2c:	d175      	bne.n	8003c1a <HAL_MMC_GetCardExtCSD+0x11e>
    hmmc->State = HAL_MMC_STATE_BUSY;
 8003b2e:	2303      	movs	r3, #3
    hmmc->ErrorCode = HAL_MMC_ERROR_NONE;
 8003b30:	6367      	str	r7, [r4, #52]	; 0x34
    config.DataLength    = 512U;
 8003b32:	f04f 3cff 	mov.w	ip, #4294967295
    hmmc->Instance->DCTRL = 0;
 8003b36:	6820      	ldr	r0, [r4, #0]
    hmmc->State = HAL_MMC_STATE_BUSY;
 8003b38:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    config.DataLength    = 512U;
 8003b3c:	f44f 7300 	mov.w	r3, #512	; 0x200
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8003b40:	f04f 0e90 	mov.w	lr, #144	; 0x90
    (void)SDMMC_ConfigData(hmmc->Instance, &config);
 8003b44:	4669      	mov	r1, sp
    hmmc->Instance->DCTRL = 0;
 8003b46:	62c7      	str	r7, [r0, #44]	; 0x2c
    config.DataLength    = 512U;
 8003b48:	e9cd c300 	strd	ip, r3, [sp]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8003b4c:	2302      	movs	r3, #2
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8003b4e:	e9cd 7704 	strd	r7, r7, [sp, #16]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8003b52:	e9cd e302 	strd	lr, r3, [sp, #8]
    (void)SDMMC_ConfigData(hmmc->Instance, &config);
 8003b56:	f003 fa0e 	bl	8006f76 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hmmc->Instance);
 8003b5a:	6820      	ldr	r0, [r4, #0]
    errorstate = SDMMC_CmdSendEXTCSD(hmmc->Instance, 0);
 8003b5c:	4639      	mov	r1, r7
    __SDMMC_CMDTRANS_ENABLE(hmmc->Instance);
 8003b5e:	68c3      	ldr	r3, [r0, #12]
 8003b60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b64:	60c3      	str	r3, [r0, #12]
    errorstate = SDMMC_CmdSendEXTCSD(hmmc->Instance, 0);
 8003b66:	f003 fb55 	bl	8007214 <SDMMC_CmdSendEXTCSD>
    if (errorstate != HAL_MMC_ERROR_NONE)
 8003b6a:	b330      	cbz	r0, 8003bba <HAL_MMC_GetCardExtCSD+0xbe>
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8003b6c:	6823      	ldr	r3, [r4, #0]
 8003b6e:	4a2c      	ldr	r2, [pc, #176]	; (8003c20 <HAL_MMC_GetCardExtCSD+0x124>)
 8003b70:	639a      	str	r2, [r3, #56]	; 0x38
      hmmc->ErrorCode |= errorstate;
 8003b72:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003b74:	4318      	orrs	r0, r3
 8003b76:	6360      	str	r0, [r4, #52]	; 0x34
      hmmc->State = HAL_MMC_STATE_READY;
 8003b78:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
      return HAL_ERROR;
 8003b7c:	e7cd      	b.n	8003b1a <HAL_MMC_GetCardExtCSD+0x1e>
      if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXFIFOHF))
 8003b7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b80:	0418      	lsls	r0, r3, #16
 8003b82:	d508      	bpl.n	8003b96 <HAL_MMC_GetCardExtCSD+0x9a>
 8003b84:	f105 0720 	add.w	r7, r5, #32
          *tmp_buf = SDMMC_ReadFIFO(hmmc->Instance);
 8003b88:	6820      	ldr	r0, [r4, #0]
 8003b8a:	f003 f9cf 	bl	8006f2c <SDMMC_ReadFIFO>
 8003b8e:	f845 0b04 	str.w	r0, [r5], #4
        for (count = 0U; count < 8U; count++)
 8003b92:	42af      	cmp	r7, r5
 8003b94:	d1f8      	bne.n	8003b88 <HAL_MMC_GetCardExtCSD+0x8c>
      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8003b96:	f7fe fa95 	bl	80020c4 <HAL_GetTick>
 8003b9a:	eba0 0008 	sub.w	r0, r0, r8
 8003b9e:	4548      	cmp	r0, r9
 8003ba0:	d30b      	bcc.n	8003bba <HAL_MMC_GetCardExtCSD+0xbe>
        __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8003ba2:	6823      	ldr	r3, [r4, #0]
        return HAL_TIMEOUT;
 8003ba4:	2603      	movs	r6, #3
        __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8003ba6:	4a1e      	ldr	r2, [pc, #120]	; (8003c20 <HAL_MMC_GetCardExtCSD+0x124>)
 8003ba8:	639a      	str	r2, [r3, #56]	; 0x38
        hmmc->ErrorCode |= HAL_MMC_ERROR_TIMEOUT;
 8003baa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003bac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003bb0:	6363      	str	r3, [r4, #52]	; 0x34
        hmmc->State = HAL_MMC_STATE_READY;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
        return HAL_TIMEOUT;
 8003bb8:	e7af      	b.n	8003b1a <HAL_MMC_GetCardExtCSD+0x1e>
    while (!__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR |
 8003bba:	6823      	ldr	r3, [r4, #0]
 8003bbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bbe:	f412 7f95 	tst.w	r2, #298	; 0x12a
 8003bc2:	d0dc      	beq.n	8003b7e <HAL_MMC_GetCardExtCSD+0x82>
    __SDMMC_CMDTRANS_DISABLE(hmmc->Instance);
 8003bc4:	68da      	ldr	r2, [r3, #12]
 8003bc6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bca:	60da      	str	r2, [r3, #12]
    if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_DTIMEOUT))
 8003bcc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bce:	0711      	lsls	r1, r2, #28
 8003bd0:	d509      	bpl.n	8003be6 <HAL_MMC_GetCardExtCSD+0xea>
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8003bd2:	4a13      	ldr	r2, [pc, #76]	; (8003c20 <HAL_MMC_GetCardExtCSD+0x124>)
 8003bd4:	639a      	str	r2, [r3, #56]	; 0x38
      hmmc->ErrorCode |= HAL_MMC_ERROR_DATA_TIMEOUT;
 8003bd6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003bd8:	f043 0308 	orr.w	r3, r3, #8
      hmmc->ErrorCode |= HAL_MMC_ERROR_RX_OVERRUN;
 8003bdc:	6363      	str	r3, [r4, #52]	; 0x34
      hmmc->State = HAL_MMC_STATE_READY;
 8003bde:	2301      	movs	r3, #1
 8003be0:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8003be4:	e799      	b.n	8003b1a <HAL_MMC_GetCardExtCSD+0x1e>
    else if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_DCRCFAIL))
 8003be6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003be8:	0792      	lsls	r2, r2, #30
 8003bea:	d505      	bpl.n	8003bf8 <HAL_MMC_GetCardExtCSD+0xfc>
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8003bec:	4a0c      	ldr	r2, [pc, #48]	; (8003c20 <HAL_MMC_GetCardExtCSD+0x124>)
 8003bee:	639a      	str	r2, [r3, #56]	; 0x38
      hmmc->ErrorCode |= HAL_MMC_ERROR_DATA_CRC_FAIL;
 8003bf0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003bf2:	f043 0302 	orr.w	r3, r3, #2
 8003bf6:	e7f1      	b.n	8003bdc <HAL_MMC_GetCardExtCSD+0xe0>
    else if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR))
 8003bf8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bfa:	f012 0220 	ands.w	r2, r2, #32
 8003bfe:	d005      	beq.n	8003c0c <HAL_MMC_GetCardExtCSD+0x110>
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8003c00:	4a07      	ldr	r2, [pc, #28]	; (8003c20 <HAL_MMC_GetCardExtCSD+0x124>)
 8003c02:	639a      	str	r2, [r3, #56]	; 0x38
      hmmc->ErrorCode |= HAL_MMC_ERROR_RX_OVERRUN;
 8003c04:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003c06:	f043 0320 	orr.w	r3, r3, #32
 8003c0a:	e7e7      	b.n	8003bdc <HAL_MMC_GetCardExtCSD+0xe0>
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_DATA_FLAGS);
 8003c0c:	4905      	ldr	r1, [pc, #20]	; (8003c24 <HAL_MMC_GetCardExtCSD+0x128>)
  return HAL_OK;
 8003c0e:	4616      	mov	r6, r2
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_DATA_FLAGS);
 8003c10:	6399      	str	r1, [r3, #56]	; 0x38
    hmmc->State = HAL_MMC_STATE_READY;
 8003c12:	2301      	movs	r3, #1
 8003c14:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 8003c18:	e77f      	b.n	8003b1a <HAL_MMC_GetCardExtCSD+0x1e>
  return HAL_OK;
 8003c1a:	463e      	mov	r6, r7
 8003c1c:	e77d      	b.n	8003b1a <HAL_MMC_GetCardExtCSD+0x1e>
 8003c1e:	bf00      	nop
 8003c20:	1fe00fff 	.word	0x1fe00fff
 8003c24:	18000f3a 	.word	0x18000f3a

08003c28 <HAL_MMC_InitCard>:
{
 8003c28:	b570      	push	{r4, r5, r6, lr}
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8003c2a:	2300      	movs	r3, #0
{
 8003c2c:	b098      	sub	sp, #96	; 0x60
 8003c2e:	4604      	mov	r4, r0
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8003c30:	2100      	movs	r1, #0
 8003c32:	f44f 3080 	mov.w	r0, #65536	; 0x10000
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8003c36:	e9cd 3303 	strd	r3, r3, [sp, #12]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8003c3a:	e9cd 3305 	strd	r3, r3, [sp, #20]
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8003c3e:	f001 ffa9 	bl	8005b94 <HAL_RCCEx_GetPeriphCLKFreq>
  if (sdmmc_clk == 0U)
 8003c42:	4605      	mov	r5, r0
 8003c44:	b938      	cbnz	r0, 8003c56 <HAL_MMC_InitCard+0x2e>
    hmmc->State = HAL_MMC_STATE_READY;
 8003c46:	2001      	movs	r0, #1
    hmmc->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8003c48:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    hmmc->State = HAL_MMC_STATE_READY;
 8003c4c:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    hmmc->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8003c50:	6363      	str	r3, [r4, #52]	; 0x34
}
 8003c52:	b018      	add	sp, #96	; 0x60
 8003c54:	bd70      	pop	{r4, r5, r6, pc}
  Init.ClockDiv = sdmmc_clk / (2U * MMC_INIT_FREQ);
 8003c56:	4e71      	ldr	r6, [pc, #452]	; (8003e1c <HAL_MMC_InitCard+0x1f4>)
  (void)SDMMC_Init(hmmc->Instance, Init);
 8003c58:	ab03      	add	r3, sp, #12
  Init.ClockDiv = sdmmc_clk / (2U * MMC_INIT_FREQ);
 8003c5a:	fbb0 f6f6 	udiv	r6, r0, r6
  (void)SDMMC_Init(hmmc->Instance, Init);
 8003c5e:	9806      	ldr	r0, [sp, #24]
 8003c60:	4631      	mov	r1, r6
 8003c62:	9607      	str	r6, [sp, #28]
 8003c64:	e88d 0003 	stmia.w	sp, {r0, r1}
 8003c68:	6820      	ldr	r0, [r4, #0]
 8003c6a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003c6c:	f003 f944 	bl	8006ef8 <SDMMC_Init>
  (void)SDMMC_PowerState_ON(hmmc->Instance);
 8003c70:	6820      	ldr	r0, [r4, #0]
 8003c72:	f003 f95e 	bl	8006f32 <SDMMC_PowerState_ON>
  if (Init.ClockDiv != 0U)
 8003c76:	4b6a      	ldr	r3, [pc, #424]	; (8003e20 <HAL_MMC_InitCard+0x1f8>)
 8003c78:	429d      	cmp	r5, r3
 8003c7a:	d902      	bls.n	8003c82 <HAL_MMC_InitCard+0x5a>
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8003c7c:	0076      	lsls	r6, r6, #1
 8003c7e:	fbb5 f5f6 	udiv	r5, r5, r6
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8003c82:	4868      	ldr	r0, [pc, #416]	; (8003e24 <HAL_MMC_InitCard+0x1fc>)
 8003c84:	fbb0 f0f5 	udiv	r0, r0, r5
 8003c88:	3001      	adds	r0, #1
 8003c8a:	f7fe fa21 	bl	80020d0 <HAL_Delay>
  __IO uint32_t count = 0U;
 8003c8e:	2300      	movs	r3, #0
  errorstate = SDMMC_CmdGoIdleState(hmmc->Instance);
 8003c90:	6820      	ldr	r0, [r4, #0]
  __IO uint32_t count = 0U;
 8003c92:	9302      	str	r3, [sp, #8]
  errorstate = SDMMC_CmdGoIdleState(hmmc->Instance);
 8003c94:	f003 f982 	bl	8006f9c <SDMMC_CmdGoIdleState>
  if (errorstate != HAL_MMC_ERROR_NONE)
 8003c98:	2800      	cmp	r0, #0
 8003c9a:	d170      	bne.n	8003d7e <HAL_MMC_InitCard+0x156>
    if (count++ == SDMMC_MAX_VOLT_TRIAL)
 8003c9c:	f64f 76ff 	movw	r6, #65535	; 0xffff
    errorstate = SDMMC_CmdOpCondition(hmmc->Instance, MMC_VOLTAGE_RANGE);
 8003ca0:	4d61      	ldr	r5, [pc, #388]	; (8003e28 <HAL_MMC_InitCard+0x200>)
    if (count++ == SDMMC_MAX_VOLT_TRIAL)
 8003ca2:	9b02      	ldr	r3, [sp, #8]
 8003ca4:	1c5a      	adds	r2, r3, #1
 8003ca6:	42b3      	cmp	r3, r6
 8003ca8:	9202      	str	r2, [sp, #8]
 8003caa:	f000 80b1 	beq.w	8003e10 <HAL_MMC_InitCard+0x1e8>
    errorstate = SDMMC_CmdOpCondition(hmmc->Instance, MMC_VOLTAGE_RANGE);
 8003cae:	4629      	mov	r1, r5
 8003cb0:	6820      	ldr	r0, [r4, #0]
 8003cb2:	f003 fb41 	bl	8007338 <SDMMC_CmdOpCondition>
    if (errorstate != HAL_MMC_ERROR_NONE)
 8003cb6:	4601      	mov	r1, r0
 8003cb8:	2800      	cmp	r0, #0
 8003cba:	f040 80ac 	bne.w	8003e16 <HAL_MMC_InitCard+0x1ee>
    response = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 8003cbe:	6820      	ldr	r0, [r4, #0]
 8003cc0:	f003 f956 	bl	8006f70 <SDMMC_GetResponse>
  while (validvoltage == 0U)
 8003cc4:	2800      	cmp	r0, #0
 8003cc6:	daec      	bge.n	8003ca2 <HAL_MMC_InitCard+0x7a>
  if (((response & (0xFF000000U)) >> 24) == 0xC0U)
 8003cc8:	0e00      	lsrs	r0, r0, #24
 8003cca:	f1a0 03c0 	sub.w	r3, r0, #192	; 0xc0
 8003cce:	4258      	negs	r0, r3
 8003cd0:	4158      	adcs	r0, r3
 8003cd2:	63a0      	str	r0, [r4, #56]	; 0x38
  if (SDMMC_GetPowerState(hmmc->Instance) == 0U)
 8003cd4:	6820      	ldr	r0, [r4, #0]
 8003cd6:	f003 f932 	bl	8006f3e <SDMMC_GetPowerState>
 8003cda:	2800      	cmp	r0, #0
 8003cdc:	f000 8095 	beq.w	8003e0a <HAL_MMC_InitCard+0x1e2>
  errorstate = SDMMC_CmdSendCID(hmmc->Instance);
 8003ce0:	6820      	ldr	r0, [r4, #0]
 8003ce2:	f003 fad9 	bl	8007298 <SDMMC_CmdSendCID>
  if (errorstate != HAL_MMC_ERROR_NONE)
 8003ce6:	2800      	cmp	r0, #0
 8003ce8:	d149      	bne.n	8003d7e <HAL_MMC_InitCard+0x156>
    hmmc->CID[0U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 8003cea:	4601      	mov	r1, r0
 8003cec:	6820      	ldr	r0, [r4, #0]
 8003cee:	f003 f93f 	bl	8006f70 <SDMMC_GetResponse>
    hmmc->CID[1U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP2);
 8003cf2:	2104      	movs	r1, #4
    hmmc->CID[0U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 8003cf4:	6660      	str	r0, [r4, #100]	; 0x64
    hmmc->CID[1U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP2);
 8003cf6:	6820      	ldr	r0, [r4, #0]
 8003cf8:	f003 f93a 	bl	8006f70 <SDMMC_GetResponse>
    hmmc->CID[2U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP3);
 8003cfc:	2108      	movs	r1, #8
    hmmc->CID[1U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP2);
 8003cfe:	66a0      	str	r0, [r4, #104]	; 0x68
    hmmc->CID[2U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP3);
 8003d00:	6820      	ldr	r0, [r4, #0]
 8003d02:	f003 f935 	bl	8006f70 <SDMMC_GetResponse>
    hmmc->CID[3U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP4);
 8003d06:	210c      	movs	r1, #12
    hmmc->CID[2U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP3);
 8003d08:	66e0      	str	r0, [r4, #108]	; 0x6c
    hmmc->CID[3U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP4);
 8003d0a:	6820      	ldr	r0, [r4, #0]
 8003d0c:	f003 f930 	bl	8006f70 <SDMMC_GetResponse>
  errorstate = SDMMC_CmdSetRelAddMmc(hmmc->Instance, mmc_rca);
 8003d10:	2102      	movs	r1, #2
    hmmc->CID[3U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP4);
 8003d12:	6720      	str	r0, [r4, #112]	; 0x70
  errorstate = SDMMC_CmdSetRelAddMmc(hmmc->Instance, mmc_rca);
 8003d14:	6820      	ldr	r0, [r4, #0]
 8003d16:	f003 fa4a 	bl	80071ae <SDMMC_CmdSetRelAddMmc>
  if (errorstate != HAL_MMC_ERROR_NONE)
 8003d1a:	2800      	cmp	r0, #0
 8003d1c:	d12f      	bne.n	8003d7e <HAL_MMC_InitCard+0x156>
  hmmc->MmcCard.RelCardAdd = mmc_rca;
 8003d1e:	2302      	movs	r3, #2
  errorstate = SDMMC_CmdSendCSD(hmmc->Instance, (uint32_t)(hmmc->MmcCard.RelCardAdd << 16U));
 8003d20:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8003d24:	6820      	ldr	r0, [r4, #0]
  hmmc->MmcCard.RelCardAdd = mmc_rca;
 8003d26:	6423      	str	r3, [r4, #64]	; 0x40
  errorstate = SDMMC_CmdSendCSD(hmmc->Instance, (uint32_t)(hmmc->MmcCard.RelCardAdd << 16U));
 8003d28:	f003 facc 	bl	80072c4 <SDMMC_CmdSendCSD>
  if (errorstate != HAL_MMC_ERROR_NONE)
 8003d2c:	bb38      	cbnz	r0, 8003d7e <HAL_MMC_InitCard+0x156>
    hmmc->CSD[0U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 8003d2e:	4601      	mov	r1, r0
 8003d30:	6820      	ldr	r0, [r4, #0]
 8003d32:	f003 f91d 	bl	8006f70 <SDMMC_GetResponse>
    hmmc->CSD[1U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP2);
 8003d36:	2104      	movs	r1, #4
    hmmc->CSD[0U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 8003d38:	6560      	str	r0, [r4, #84]	; 0x54
    hmmc->CSD[1U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP2);
 8003d3a:	6820      	ldr	r0, [r4, #0]
 8003d3c:	f003 f918 	bl	8006f70 <SDMMC_GetResponse>
    hmmc->CSD[2U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP3);
 8003d40:	2108      	movs	r1, #8
    hmmc->CSD[1U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP2);
 8003d42:	65a0      	str	r0, [r4, #88]	; 0x58
    hmmc->CSD[2U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP3);
 8003d44:	6820      	ldr	r0, [r4, #0]
 8003d46:	f003 f913 	bl	8006f70 <SDMMC_GetResponse>
    hmmc->CSD[3U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP4);
 8003d4a:	210c      	movs	r1, #12
    hmmc->CSD[2U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP3);
 8003d4c:	65e0      	str	r0, [r4, #92]	; 0x5c
    hmmc->CSD[3U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP4);
 8003d4e:	6820      	ldr	r0, [r4, #0]
 8003d50:	f003 f90e 	bl	8006f70 <SDMMC_GetResponse>
  hmmc->MmcCard.Class = (SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP2) >> 20U);
 8003d54:	2104      	movs	r1, #4
    hmmc->CSD[3U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP4);
 8003d56:	6620      	str	r0, [r4, #96]	; 0x60
  hmmc->MmcCard.Class = (SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP2) >> 20U);
 8003d58:	6820      	ldr	r0, [r4, #0]
 8003d5a:	f003 f909 	bl	8006f70 <SDMMC_GetResponse>
  errorstate = SDMMC_CmdSelDesel(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 8003d5e:	6c21      	ldr	r1, [r4, #64]	; 0x40
  hmmc->MmcCard.Class = (SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP2) >> 20U);
 8003d60:	0d00      	lsrs	r0, r0, #20
  errorstate = SDMMC_CmdSelDesel(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 8003d62:	0409      	lsls	r1, r1, #16
  hmmc->MmcCard.Class = (SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP2) >> 20U);
 8003d64:	63e0      	str	r0, [r4, #60]	; 0x3c
  errorstate = SDMMC_CmdSelDesel(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 8003d66:	6820      	ldr	r0, [r4, #0]
 8003d68:	f003 f9ed 	bl	8007146 <SDMMC_CmdSelDesel>
  if (errorstate != HAL_MMC_ERROR_NONE)
 8003d6c:	b938      	cbnz	r0, 8003d7e <HAL_MMC_InitCard+0x156>
  if (HAL_MMC_GetCardCSD(hmmc, &CSD) != HAL_OK)
 8003d6e:	a90d      	add	r1, sp, #52	; 0x34
 8003d70:	4620      	mov	r0, r4
 8003d72:	f7ff fe07 	bl	8003984 <HAL_MMC_GetCardCSD>
 8003d76:	b150      	cbz	r0, 8003d8e <HAL_MMC_InitCard+0x166>
    return hmmc->ErrorCode;
 8003d78:	6b60      	ldr	r0, [r4, #52]	; 0x34
  if (errorstate != HAL_MMC_ERROR_NONE)
 8003d7a:	2800      	cmp	r0, #0
 8003d7c:	d033      	beq.n	8003de6 <HAL_MMC_InitCard+0x1be>
    hmmc->State = HAL_MMC_STATE_READY;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    hmmc->ErrorCode |= errorstate;
 8003d84:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8003d86:	4310      	orrs	r0, r2
 8003d88:	6360      	str	r0, [r4, #52]	; 0x34
    return HAL_ERROR;
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	e761      	b.n	8003c52 <HAL_MMC_InitCard+0x2a>
  errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 8003d8e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8003d90:	6820      	ldr	r0, [r4, #0]
 8003d92:	0409      	lsls	r1, r1, #16
 8003d94:	f003 fa25 	bl	80071e2 <SDMMC_CmdSendStatus>
  if (errorstate != HAL_MMC_ERROR_NONE)
 8003d98:	b110      	cbz	r0, 8003da0 <HAL_MMC_InitCard+0x178>
    hmmc->ErrorCode |= errorstate;
 8003d9a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003d9c:	4318      	orrs	r0, r3
 8003d9e:	6360      	str	r0, [r4, #52]	; 0x34
  if (HAL_MMC_GetCardExtCSD(hmmc, hmmc->Ext_CSD, SDMMC_DATATIMEOUT) != HAL_OK)
 8003da0:	f04f 32ff 	mov.w	r2, #4294967295
 8003da4:	f104 0174 	add.w	r1, r4, #116	; 0x74
 8003da8:	4620      	mov	r0, r4
 8003daa:	f7ff fea7 	bl	8003afc <HAL_MMC_GetCardExtCSD>
 8003dae:	2800      	cmp	r0, #0
 8003db0:	d1e2      	bne.n	8003d78 <HAL_MMC_InitCard+0x150>
  errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 8003db2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8003db4:	6820      	ldr	r0, [r4, #0]
 8003db6:	0409      	lsls	r1, r1, #16
 8003db8:	f003 fa13 	bl	80071e2 <SDMMC_CmdSendStatus>
  if (errorstate != HAL_MMC_ERROR_NONE)
 8003dbc:	b110      	cbz	r0, 8003dc4 <HAL_MMC_InitCard+0x19c>
    hmmc->ErrorCode |= errorstate;
 8003dbe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003dc0:	4318      	orrs	r0, r3
 8003dc2:	6360      	str	r0, [r4, #52]	; 0x34
  Init = hmmc->Init;
 8003dc4:	1d26      	adds	r6, r4, #4
 8003dc6:	ad08      	add	r5, sp, #32
 8003dc8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8003dca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003dcc:	6833      	ldr	r3, [r6, #0]
 8003dce:	602b      	str	r3, [r5, #0]
  Init.BusWide = SDMMC_BUS_WIDE_1B;
 8003dd0:	2300      	movs	r3, #0
  (void)SDMMC_Init(hmmc->Instance, Init);
 8003dd2:	e9dd 010b 	ldrd	r0, r1, [sp, #44]	; 0x2c
  Init.BusWide = SDMMC_BUS_WIDE_1B;
 8003dd6:	930a      	str	r3, [sp, #40]	; 0x28
  (void)SDMMC_Init(hmmc->Instance, Init);
 8003dd8:	ab08      	add	r3, sp, #32
 8003dda:	e88d 0003 	stmia.w	sp, {r0, r1}
 8003dde:	6820      	ldr	r0, [r4, #0]
 8003de0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003de2:	f003 f889 	bl	8006ef8 <SDMMC_Init>
  errorstate = SDMMC_CmdBlockLength(hmmc->Instance, MMC_BLOCKSIZE);
 8003de6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003dea:	6820      	ldr	r0, [r4, #0]
 8003dec:	f003 f992 	bl	8007114 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_MMC_ERROR_NONE)
 8003df0:	2800      	cmp	r0, #0
 8003df2:	f43f af2e 	beq.w	8003c52 <HAL_MMC_InitCard+0x2a>
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8003df6:	6823      	ldr	r3, [r4, #0]
 8003df8:	4a0c      	ldr	r2, [pc, #48]	; (8003e2c <HAL_MMC_InitCard+0x204>)
 8003dfa:	639a      	str	r2, [r3, #56]	; 0x38
    hmmc->ErrorCode |= errorstate;
 8003dfc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003dfe:	4318      	orrs	r0, r3
 8003e00:	6360      	str	r0, [r4, #52]	; 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 8003e02:	2001      	movs	r0, #1
 8003e04:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    return HAL_ERROR;
 8003e08:	e723      	b.n	8003c52 <HAL_MMC_InitCard+0x2a>
    return HAL_MMC_ERROR_REQUEST_NOT_APPLICABLE;
 8003e0a:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8003e0e:	e7b6      	b.n	8003d7e <HAL_MMC_InitCard+0x156>
      return HAL_MMC_ERROR_INVALID_VOLTRANGE;
 8003e10:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8003e14:	e7b3      	b.n	8003d7e <HAL_MMC_InitCard+0x156>
      return HAL_MMC_ERROR_UNSUPPORTED_FEATURE;
 8003e16:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8003e1a:	e7b0      	b.n	8003d7e <HAL_MMC_InitCard+0x156>
 8003e1c:	000c3500 	.word	0x000c3500
 8003e20:	000c34ff 	.word	0x000c34ff
 8003e24:	00012110 	.word	0x00012110
 8003e28:	c0ff8000 	.word	0xc0ff8000
 8003e2c:	1fe00fff 	.word	0x1fe00fff

08003e30 <HAL_MMC_ConfigWideBusOperation>:
  hmmc->State = HAL_MMC_STATE_BUSY;
 8003e30:	2303      	movs	r3, #3
{
 8003e32:	b5f0      	push	{r4, r5, r6, r7, lr}
  hmmc->State = HAL_MMC_STATE_BUSY;
 8003e34:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
{
 8003e38:	b089      	sub	sp, #36	; 0x24
  if ((hmmc->Instance->CLKCR & SDMMC_CLKCR_BUSSPEED) != 0U)
 8003e3a:	6803      	ldr	r3, [r0, #0]
{
 8003e3c:	4604      	mov	r4, r0
 8003e3e:	460d      	mov	r5, r1
  if ((hmmc->Instance->CLKCR & SDMMC_CLKCR_BUSSPEED) != 0U)
 8003e40:	685a      	ldr	r2, [r3, #4]
 8003e42:	0316      	lsls	r6, r2, #12
 8003e44:	d52a      	bpl.n	8003e9c <HAL_MMC_ConfigWideBusOperation+0x6c>
    if ((hmmc->Instance->CLKCR & SDMMC_CLKCR_DDR) != 0U)
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	035a      	lsls	r2, r3, #13
      errorstate = MMC_PwrClassUpdate(hmmc, WideMode, SDMMC_SPEED_MODE_DDR);
 8003e4a:	bf4c      	ite	mi
 8003e4c:	2204      	movmi	r2, #4
      errorstate = MMC_PwrClassUpdate(hmmc, WideMode, SDMMC_SPEED_MODE_HIGH);
 8003e4e:	2202      	movpl	r2, #2
    errorstate = MMC_PwrClassUpdate(hmmc, WideMode, SDMMC_SPEED_MODE_DEFAULT);
 8003e50:	f7ff fd8d 	bl	800396e <MMC_PwrClassUpdate>
  if (errorstate == HAL_MMC_ERROR_NONE)
 8003e54:	2800      	cmp	r0, #0
 8003e56:	d14d      	bne.n	8003ef4 <HAL_MMC_ConfigWideBusOperation+0xc4>
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8003e58:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
      errorstate = SDMMC_CmdSwitch(hmmc->Instance, 0x03B70200U);
 8003e5c:	6820      	ldr	r0, [r4, #0]
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8003e5e:	d11f      	bne.n	8003ea0 <HAL_MMC_ConfigWideBusOperation+0x70>
      errorstate = SDMMC_CmdSwitch(hmmc->Instance, 0x03B70200U);
 8003e60:	492f      	ldr	r1, [pc, #188]	; (8003f20 <HAL_MMC_ConfigWideBusOperation+0xf0>)
      errorstate = SDMMC_CmdSwitch(hmmc->Instance, 0x03B70000U);
 8003e62:	f003 f9a2 	bl	80071aa <SDMMC_CmdSwitch>
    if (errorstate == HAL_MMC_ERROR_NONE)
 8003e66:	2800      	cmp	r0, #0
 8003e68:	d144      	bne.n	8003ef4 <HAL_MMC_ConfigWideBusOperation+0xc4>
      count = SDMMC_MAX_TRIAL;
 8003e6a:	f64f 76ff 	movw	r6, #65535	; 0xffff
        errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 8003e6e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8003e70:	6820      	ldr	r0, [r4, #0]
 8003e72:	0409      	lsls	r1, r1, #16
 8003e74:	f003 f9b5 	bl	80071e2 <SDMMC_CmdSendStatus>
        if (errorstate != HAL_MMC_ERROR_NONE)
 8003e78:	2800      	cmp	r0, #0
 8003e7a:	d13b      	bne.n	8003ef4 <HAL_MMC_ConfigWideBusOperation+0xc4>
        response = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 8003e7c:	4601      	mov	r1, r0
 8003e7e:	6820      	ldr	r0, [r4, #0]
 8003e80:	f003 f876 	bl	8006f70 <SDMMC_GetResponse>
      } while (((response & 0x100U) == 0U) && (count != 0U));
 8003e84:	05c3      	lsls	r3, r0, #23
        count--;
 8003e86:	f106 36ff 	add.w	r6, r6, #4294967295
      } while (((response & 0x100U) == 0U) && (count != 0U));
 8003e8a:	d437      	bmi.n	8003efc <HAL_MMC_ConfigWideBusOperation+0xcc>
 8003e8c:	2e00      	cmp	r6, #0
 8003e8e:	d1ee      	bne.n	8003e6e <HAL_MMC_ConfigWideBusOperation+0x3e>
  hmmc->State = HAL_MMC_STATE_READY;
 8003e90:	2301      	movs	r3, #1
        errorstate = SDMMC_ERROR_TIMEOUT;
 8003e92:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  hmmc->State = HAL_MMC_STATE_READY;
 8003e96:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  if (errorstate != HAL_MMC_ERROR_NONE)
 8003e9a:	e039      	b.n	8003f10 <HAL_MMC_ConfigWideBusOperation+0xe0>
    errorstate = MMC_PwrClassUpdate(hmmc, WideMode, SDMMC_SPEED_MODE_DEFAULT);
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	e7d7      	b.n	8003e50 <HAL_MMC_ConfigWideBusOperation+0x20>
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8003ea0:	f5b5 4f80 	cmp.w	r5, #16384	; 0x4000
 8003ea4:	d101      	bne.n	8003eaa <HAL_MMC_ConfigWideBusOperation+0x7a>
      errorstate = SDMMC_CmdSwitch(hmmc->Instance, 0x03B70100U);
 8003ea6:	491f      	ldr	r1, [pc, #124]	; (8003f24 <HAL_MMC_ConfigWideBusOperation+0xf4>)
 8003ea8:	e7db      	b.n	8003e62 <HAL_MMC_ConfigWideBusOperation+0x32>
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8003eaa:	b9ed      	cbnz	r5, 8003ee8 <HAL_MMC_ConfigWideBusOperation+0xb8>
      errorstate = SDMMC_CmdSwitch(hmmc->Instance, 0x03B70000U);
 8003eac:	491e      	ldr	r1, [pc, #120]	; (8003f28 <HAL_MMC_ConfigWideBusOperation+0xf8>)
 8003eae:	e7d8      	b.n	8003e62 <HAL_MMC_ConfigWideBusOperation+0x32>
          (void)SDMMC_Init(hmmc->Instance, Init);
 8003eb0:	4627      	mov	r7, r4
          Init = hmmc->Init;
 8003eb2:	f10d 0c0c 	add.w	ip, sp, #12
          (void)SDMMC_Init(hmmc->Instance, Init);
 8003eb6:	f857 eb04 	ldr.w	lr, [r7], #4
          Init = hmmc->Init;
 8003eba:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8003ebc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8003ec0:	683b      	ldr	r3, [r7, #0]
          Init.BusWide = WideMode;
 8003ec2:	9505      	str	r5, [sp, #20]
          Init = hmmc->Init;
 8003ec4:	f8cc 3000 	str.w	r3, [ip]
          (void)SDMMC_Init(hmmc->Instance, Init);
 8003ec8:	ab08      	add	r3, sp, #32
 8003eca:	e913 0003 	ldmdb	r3, {r0, r1}
 8003ece:	ab03      	add	r3, sp, #12
 8003ed0:	e88d 0003 	stmia.w	sp, {r0, r1}
 8003ed4:	4670      	mov	r0, lr
 8003ed6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ed8:	f003 f80e 	bl	8006ef8 <SDMMC_Init>
  hmmc->State = HAL_MMC_STATE_READY;
 8003edc:	2301      	movs	r3, #1
  return HAL_OK;
 8003ede:	4630      	mov	r0, r6
  hmmc->State = HAL_MMC_STATE_READY;
 8003ee0:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
 8003ee4:	b009      	add	sp, #36	; 0x24
 8003ee6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  hmmc->State = HAL_MMC_STATE_READY;
 8003ee8:	2301      	movs	r3, #1
      errorstate = HAL_MMC_ERROR_PARAM;
 8003eea:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
  hmmc->State = HAL_MMC_STATE_READY;
 8003eee:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  if (errorstate != HAL_MMC_ERROR_NONE)
 8003ef2:	e00d      	b.n	8003f10 <HAL_MMC_ConfigWideBusOperation+0xe0>
  hmmc->State = HAL_MMC_STATE_READY;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  if (errorstate != HAL_MMC_ERROR_NONE)
 8003efa:	e009      	b.n	8003f10 <HAL_MMC_ConfigWideBusOperation+0xe0>
      if ((count != 0U) && (errorstate == HAL_MMC_ERROR_NONE))
 8003efc:	2e00      	cmp	r6, #0
 8003efe:	d0c7      	beq.n	8003e90 <HAL_MMC_ConfigWideBusOperation+0x60>
        if ((response & 0x80U) != 0U)
 8003f00:	f010 0680 	ands.w	r6, r0, #128	; 0x80
 8003f04:	d0d4      	beq.n	8003eb0 <HAL_MMC_ConfigWideBusOperation+0x80>
  hmmc->State = HAL_MMC_STATE_READY;
 8003f06:	2301      	movs	r3, #1
          errorstate = SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8003f08:	f44f 3080 	mov.w	r0, #65536	; 0x10000
  hmmc->State = HAL_MMC_STATE_READY;
 8003f0c:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8003f10:	6823      	ldr	r3, [r4, #0]
 8003f12:	4a06      	ldr	r2, [pc, #24]	; (8003f2c <HAL_MMC_ConfigWideBusOperation+0xfc>)
 8003f14:	639a      	str	r2, [r3, #56]	; 0x38
    hmmc->ErrorCode |= errorstate;
 8003f16:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003f18:	4318      	orrs	r0, r3
 8003f1a:	6360      	str	r0, [r4, #52]	; 0x34
    return HAL_ERROR;
 8003f1c:	2001      	movs	r0, #1
 8003f1e:	e7e1      	b.n	8003ee4 <HAL_MMC_ConfigWideBusOperation+0xb4>
 8003f20:	03b70200 	.word	0x03b70200
 8003f24:	03b70100 	.word	0x03b70100
 8003f28:	03b70000 	.word	0x03b70000
 8003f2c:	1fe00fff 	.word	0x1fe00fff

08003f30 <HAL_MMC_Init>:
{
 8003f30:	b510      	push	{r4, lr}
  if (hmmc == NULL)
 8003f32:	4604      	mov	r4, r0
 8003f34:	b908      	cbnz	r0, 8003f3a <HAL_MMC_Init+0xa>
    return HAL_ERROR;
 8003f36:	2001      	movs	r0, #1
}
 8003f38:	bd10      	pop	{r4, pc}
  if (hmmc->State == HAL_MMC_STATE_RESET)
 8003f3a:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 8003f3e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003f42:	b913      	cbnz	r3, 8003f4a <HAL_MMC_Init+0x1a>
    hmmc->Lock = HAL_UNLOCKED;
 8003f44:	7602      	strb	r2, [r0, #24]
    HAL_MMC_MspInit(hmmc);
 8003f46:	f7fd fd15 	bl	8001974 <HAL_MMC_MspInit>
  hmmc->State = HAL_MMC_STATE_BUSY;
 8003f4a:	2303      	movs	r3, #3
  if (HAL_MMC_InitCard(hmmc) == HAL_ERROR)
 8003f4c:	4620      	mov	r0, r4
  hmmc->State = HAL_MMC_STATE_BUSY;
 8003f4e:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  if (HAL_MMC_InitCard(hmmc) == HAL_ERROR)
 8003f52:	f7ff fe69 	bl	8003c28 <HAL_MMC_InitCard>
 8003f56:	2801      	cmp	r0, #1
 8003f58:	d0ed      	beq.n	8003f36 <HAL_MMC_Init+0x6>
  hmmc->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f5a:	2300      	movs	r3, #0
  if (hmmc->Init.BusWide != SDMMC_BUS_WIDE_1B)
 8003f5c:	68e1      	ldr	r1, [r4, #12]
  hmmc->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f5e:	6363      	str	r3, [r4, #52]	; 0x34
  hmmc->Context = MMC_CONTEXT_NONE;
 8003f60:	62e3      	str	r3, [r4, #44]	; 0x2c
  hmmc->State = HAL_MMC_STATE_READY;
 8003f62:	2301      	movs	r3, #1
 8003f64:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  if (hmmc->Init.BusWide != SDMMC_BUS_WIDE_1B)
 8003f68:	b131      	cbz	r1, 8003f78 <HAL_MMC_Init+0x48>
    if (HAL_MMC_ConfigWideBusOperation(hmmc, hmmc->Init.BusWide) != HAL_OK)
 8003f6a:	4620      	mov	r0, r4
 8003f6c:	f7ff ff60 	bl	8003e30 <HAL_MMC_ConfigWideBusOperation>
    return HAL_ERROR;
 8003f70:	3800      	subs	r0, #0
 8003f72:	bf18      	it	ne
 8003f74:	2001      	movne	r0, #1
 8003f76:	e7df      	b.n	8003f38 <HAL_MMC_Init+0x8>
  return HAL_OK;
 8003f78:	4608      	mov	r0, r1
 8003f7a:	e7dd      	b.n	8003f38 <HAL_MMC_Init+0x8>

08003f7c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003f7c:	b5f0      	push	{r4, r5, r6, r7, lr}
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003f7e:	4604      	mov	r4, r0
{
 8003f80:	b08b      	sub	sp, #44	; 0x2c
  if (hpcd == NULL)
 8003f82:	b360      	cbz	r0, 8003fde <HAL_PCD_Init+0x62>
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003f84:	f890 34bd 	ldrb.w	r3, [r0, #1213]	; 0x4bd
  USBx = hpcd->Instance;
 8003f88:	6805      	ldr	r5, [r0, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003f8a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003f8e:	b91b      	cbnz	r3, 8003f98 <HAL_PCD_Init+0x1c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003f90:	f880 24bc 	strb.w	r2, [r0, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003f94:	f7fd fe3e 	bl	8001c14 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003f98:	2303      	movs	r3, #3

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003f9a:	466e      	mov	r6, sp
 8003f9c:	1d27      	adds	r7, r4, #4
  hpcd->State = HAL_PCD_STATE_BUSY;
 8003f9e:	f884 34bd 	strb.w	r3, [r4, #1213]	; 0x4bd
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003fa2:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  __HAL_PCD_DISABLE(hpcd);
 8003fa4:	4625      	mov	r5, r4
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003fa6:	f413 7380 	ands.w	r3, r3, #256	; 0x100
  __HAL_PCD_DISABLE(hpcd);
 8003faa:	f855 0b10 	ldr.w	r0, [r5], #16
    hpcd->Init.dma_enable = 0U;
 8003fae:	bf08      	it	eq
 8003fb0:	60e3      	streq	r3, [r4, #12]
  __HAL_PCD_DISABLE(hpcd);
 8003fb2:	f003 fa47 	bl	8007444 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003fb6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003fb8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8003fba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003fbc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8003fbe:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003fc2:	4625      	mov	r5, r4
 8003fc4:	e886 0003 	stmia.w	r6, {r0, r1}
 8003fc8:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8003fcc:	f855 0b10 	ldr.w	r0, [r5], #16
 8003fd0:	f003 f9ee 	bl	80073b0 <USB_CoreInit>
 8003fd4:	4606      	mov	r6, r0
 8003fd6:	b120      	cbz	r0, 8003fe2 <HAL_PCD_Init+0x66>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003fd8:	2302      	movs	r3, #2
 8003fda:	f884 34bd 	strb.w	r3, [r4, #1213]	; 0x4bd
    return HAL_ERROR;
 8003fde:	2501      	movs	r5, #1
 8003fe0:	e052      	b.n	8004088 <HAL_PCD_Init+0x10c>
    return HAL_ERROR;
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003fe2:	4601      	mov	r1, r0
 8003fe4:	6820      	ldr	r0, [r4, #0]
 8003fe6:	f003 fa33 	bl	8007450 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003fea:	4630      	mov	r0, r6
 8003fec:	f8d4 c004 	ldr.w	ip, [r4, #4]
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003ff0:	2624      	movs	r6, #36	; 0x24
 8003ff2:	f04f 0e01 	mov.w	lr, #1
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003ff6:	4601      	mov	r1, r0
 8003ff8:	b2c2      	uxtb	r2, r0
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ffa:	3001      	adds	r0, #1
 8003ffc:	4594      	cmp	ip, r2
 8003ffe:	d81b      	bhi.n	8004038 <HAL_PCD_Init+0xbc>
 8004000:	2300      	movs	r3, #0
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004002:	2624      	movs	r6, #36	; 0x24
 8004004:	4619      	mov	r1, r3
 8004006:	b2d8      	uxtb	r0, r3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004008:	3301      	adds	r3, #1
 800400a:	4584      	cmp	ip, r0
 800400c:	d822      	bhi.n	8004054 <HAL_PCD_Init+0xd8>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800400e:	466e      	mov	r6, sp
 8004010:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004012:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8004014:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004016:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8004018:	e895 0003 	ldmia.w	r5, {r0, r1}
 800401c:	e886 0003 	stmia.w	r6, {r0, r1}
 8004020:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8004024:	6820      	ldr	r0, [r4, #0]
 8004026:	f003 fa93 	bl	8007550 <USB_DevInit>
 800402a:	2301      	movs	r3, #1
 800402c:	4605      	mov	r5, r0
 800402e:	b1f0      	cbz	r0, 800406e <HAL_PCD_Init+0xf2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004030:	2202      	movs	r2, #2
 8004032:	f884 24bd 	strb.w	r2, [r4, #1213]	; 0x4bd
    return HAL_ERROR;
 8004036:	e7d2      	b.n	8003fde <HAL_PCD_Init+0x62>
    hpcd->IN_ep[i].is_in = 1U;
 8004038:	fb06 4302 	mla	r3, r6, r2, r4
 800403c:	f883 e03d 	strb.w	lr, [r3, #61]	; 0x3d
    hpcd->IN_ep[i].num = i;
 8004040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004044:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004048:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    hpcd->IN_ep[i].xfer_len = 0U;
 800404c:	64d9      	str	r1, [r3, #76]	; 0x4c
    hpcd->IN_ep[i].xfer_buff = 0U;
 800404e:	e9c3 1111 	strd	r1, r1, [r3, #68]	; 0x44
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004052:	e7d1      	b.n	8003ff8 <HAL_PCD_Init+0x7c>
    hpcd->OUT_ep[i].is_in = 0U;
 8004054:	fb06 4200 	mla	r2, r6, r0, r4
 8004058:	f882 127d 	strb.w	r1, [r2, #637]	; 0x27d
    hpcd->OUT_ep[i].num = i;
 800405c:	f882 027c 	strb.w	r0, [r2, #636]	; 0x27c
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004060:	f882 1280 	strb.w	r1, [r2, #640]	; 0x280
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004064:	f8c2 128c 	str.w	r1, [r2, #652]	; 0x28c
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004068:	e9c2 11a1 	strd	r1, r1, [r2, #644]	; 0x284
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800406c:	e7cb      	b.n	8004006 <HAL_PCD_Init+0x8a>
  }

  hpcd->USB_Address = 0U;
 800406e:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004072:	f884 34bd 	strb.w	r3, [r4, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004076:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004078:	2b01      	cmp	r3, #1
 800407a:	d102      	bne.n	8004082 <HAL_PCD_Init+0x106>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800407c:	4620      	mov	r0, r4
 800407e:	f000 f806 	bl	800408e <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004082:	6820      	ldr	r0, [r4, #0]
 8004084:	f003 fb1a 	bl	80076bc <USB_DevDisconnect>

  return HAL_OK;
}
 8004088:	4628      	mov	r0, r5
 800408a:	b00b      	add	sp, #44	; 0x2c
 800408c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800408e <HAL_PCDEx_ActivateLPM>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800408e:	6802      	ldr	r2, [r0, #0]

  hpcd->lpm_active = 1U;
  hpcd->LPM_State = LPM_L0;
 8004090:	2100      	movs	r1, #0
  hpcd->lpm_active = 1U;
 8004092:	2301      	movs	r3, #1
  hpcd->LPM_State = LPM_L0;
 8004094:	f880 14f4 	strb.w	r1, [r0, #1268]	; 0x4f4
  hpcd->lpm_active = 1U;
 8004098:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);

  return HAL_OK;
}
 800409c:	4608      	mov	r0, r1
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800409e:	6993      	ldr	r3, [r2, #24]
 80040a0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80040a4:	6193      	str	r3, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80040a6:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80040a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040ac:	f043 0303 	orr.w	r3, r3, #3
 80040b0:	6553      	str	r3, [r2, #84]	; 0x54
}
 80040b2:	4770      	bx	lr

080040b4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80040b4:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80040b6:	4c10      	ldr	r4, [pc, #64]	; (80040f8 <HAL_PWREx_ConfigSupply+0x44>)
 80040b8:	68e3      	ldr	r3, [r4, #12]
 80040ba:	f013 0f04 	tst.w	r3, #4
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80040be:	68e3      	ldr	r3, [r4, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80040c0:	d105      	bne.n	80040ce <HAL_PWREx_ConfigSupply+0x1a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80040c2:	f003 0307 	and.w	r3, r3, #7
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80040c6:	1a18      	subs	r0, r3, r0
 80040c8:	bf18      	it	ne
 80040ca:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 80040cc:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80040ce:	f023 0307 	bic.w	r3, r3, #7
 80040d2:	4318      	orrs	r0, r3
 80040d4:	60e0      	str	r0, [r4, #12]
  tickstart = HAL_GetTick ();
 80040d6:	f7fd fff5 	bl	80020c4 <HAL_GetTick>
 80040da:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80040dc:	6863      	ldr	r3, [r4, #4]
 80040de:	049b      	lsls	r3, r3, #18
 80040e0:	d501      	bpl.n	80040e6 <HAL_PWREx_ConfigSupply+0x32>
  return HAL_OK;
 80040e2:	2000      	movs	r0, #0
 80040e4:	e7f2      	b.n	80040cc <HAL_PWREx_ConfigSupply+0x18>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80040e6:	f7fd ffed 	bl	80020c4 <HAL_GetTick>
 80040ea:	1b40      	subs	r0, r0, r5
 80040ec:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80040f0:	d9f4      	bls.n	80040dc <HAL_PWREx_ConfigSupply+0x28>
      return HAL_ERROR;
 80040f2:	2001      	movs	r0, #1
 80040f4:	e7ea      	b.n	80040cc <HAL_PWREx_ConfigSupply+0x18>
 80040f6:	bf00      	nop
 80040f8:	58024800 	.word	0x58024800

080040fc <HAL_PWREx_EnableUSBVoltageDetector>:
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80040fc:	4a02      	ldr	r2, [pc, #8]	; (8004108 <HAL_PWREx_EnableUSBVoltageDetector+0xc>)
 80040fe:	68d3      	ldr	r3, [r2, #12]
 8004100:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004104:	60d3      	str	r3, [r2, #12]
}
 8004106:	4770      	bx	lr
 8004108:	58024800 	.word	0x58024800

0800410c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800410c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004110:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8004114:	4604      	mov	r4, r0
 8004116:	460e      	mov	r6, r1
 8004118:	4615      	mov	r5, r2
 800411a:	461f      	mov	r7, r3
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800411c:	6822      	ldr	r2, [r4, #0]
 800411e:	6893      	ldr	r3, [r2, #8]
 8004120:	4233      	tst	r3, r6
 8004122:	bf14      	ite	ne
 8004124:	2301      	movne	r3, #1
 8004126:	2300      	moveq	r3, #0
 8004128:	42ab      	cmp	r3, r5
 800412a:	d101      	bne.n	8004130 <QSPI_WaitFlagStateUntilTimeout+0x24>

        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 800412c:	2000      	movs	r0, #0
 800412e:	e012      	b.n	8004156 <QSPI_WaitFlagStateUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 8004130:	f1b8 3fff 	cmp.w	r8, #4294967295
 8004134:	d0f3      	beq.n	800411e <QSPI_WaitFlagStateUntilTimeout+0x12>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004136:	f7fd ffc5 	bl	80020c4 <HAL_GetTick>
 800413a:	1bc0      	subs	r0, r0, r7
 800413c:	4540      	cmp	r0, r8
 800413e:	d802      	bhi.n	8004146 <QSPI_WaitFlagStateUntilTimeout+0x3a>
 8004140:	f1b8 0f00 	cmp.w	r8, #0
 8004144:	d1ea      	bne.n	800411c <QSPI_WaitFlagStateUntilTimeout+0x10>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8004146:	2304      	movs	r3, #4
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8004148:	2001      	movs	r0, #1
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800414a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800414e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004150:	f043 0301 	orr.w	r3, r3, #1
 8004154:	6463      	str	r3, [r4, #68]	; 0x44
}
 8004156:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800415c <HAL_QSPI_Init>:
{
 800415c:	b530      	push	{r4, r5, lr}
 800415e:	4604      	mov	r4, r0
 8004160:	b085      	sub	sp, #20
  uint32_t tickstart = HAL_GetTick();
 8004162:	f7fd ffaf 	bl	80020c4 <HAL_GetTick>
 8004166:	4603      	mov	r3, r0
  if(hqspi == NULL)
 8004168:	2c00      	cmp	r4, #0
 800416a:	d040      	beq.n	80041ee <HAL_QSPI_Init+0x92>
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800416c:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8004170:	b93a      	cbnz	r2, 8004182 <HAL_QSPI_Init+0x26>
 8004172:	9003      	str	r0, [sp, #12]
    HAL_QSPI_MspInit(hqspi);
 8004174:	4620      	mov	r0, r4
 8004176:	f7fd fb4d 	bl	8001814 <HAL_QSPI_MspInit>
  hqspi->Timeout = Timeout;
 800417a:	f241 3288 	movw	r2, #5000	; 0x1388
 800417e:	9b03      	ldr	r3, [sp, #12]
 8004180:	64a2      	str	r2, [r4, #72]	; 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8004182:	6820      	ldr	r0, [r4, #0]
 8004184:	68a1      	ldr	r1, [r4, #8]
 8004186:	6802      	ldr	r2, [r0, #0]
 8004188:	3901      	subs	r1, #1
 800418a:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 800418e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8004192:	2120      	movs	r1, #32
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8004194:	6002      	str	r2, [r0, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8004196:	4620      	mov	r0, r4
 8004198:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800419a:	9200      	str	r2, [sp, #0]
 800419c:	2200      	movs	r2, #0
 800419e:	f7ff ffb5 	bl	800410c <QSPI_WaitFlagStateUntilTimeout>
  if(status == HAL_OK)
 80041a2:	bb10      	cbnz	r0, 80041ea <HAL_QSPI_Init+0x8e>
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 80041a4:	6822      	ldr	r2, [r4, #0]
 80041a6:	69e5      	ldr	r5, [r4, #28]
 80041a8:	68e3      	ldr	r3, [r4, #12]
 80041aa:	6811      	ldr	r1, [r2, #0]
 80041ac:	432b      	orrs	r3, r5
 80041ae:	6a25      	ldr	r5, [r4, #32]
 80041b0:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80041b4:	432b      	orrs	r3, r5
 80041b6:	6865      	ldr	r5, [r4, #4]
 80041b8:	f021 01d0 	bic.w	r1, r1, #208	; 0xd0
 80041bc:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 80041c0:	430b      	orrs	r3, r1
 80041c2:	6013      	str	r3, [r2, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80041c4:	6855      	ldr	r5, [r2, #4]
 80041c6:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
 80041ca:	430b      	orrs	r3, r1
 80041cc:	6921      	ldr	r1, [r4, #16]
 80041ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80041d2:	4908      	ldr	r1, [pc, #32]	; (80041f4 <HAL_QSPI_Init+0x98>)
 80041d4:	4029      	ands	r1, r5
 80041d6:	430b      	orrs	r3, r1
 80041d8:	6053      	str	r3, [r2, #4]
    __HAL_QSPI_ENABLE(hqspi);
 80041da:	6813      	ldr	r3, [r2, #0]
 80041dc:	f043 0301 	orr.w	r3, r3, #1
 80041e0:	6013      	str	r3, [r2, #0]
    hqspi->State = HAL_QSPI_STATE_READY;
 80041e2:	2301      	movs	r3, #1
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80041e4:	6460      	str	r0, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_READY;
 80041e6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
}
 80041ea:	b005      	add	sp, #20
 80041ec:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 80041ee:	2001      	movs	r0, #1
 80041f0:	e7fb      	b.n	80041ea <HAL_QSPI_Init+0x8e>
 80041f2:	bf00      	nop
 80041f4:	ffe0f8fe 	.word	0xffe0f8fe

080041f8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80041fa:	4604      	mov	r4, r0
 80041fc:	b908      	cbnz	r0, 8004202 <HAL_RCC_OscConfig+0xa>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
      {
        return HAL_ERROR;
 80041fe:	2001      	movs	r0, #1
 8004200:	e08b      	b.n	800431a <HAL_RCC_OscConfig+0x122>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004202:	6803      	ldr	r3, [r0, #0]
 8004204:	07df      	lsls	r7, r3, #31
 8004206:	d45e      	bmi.n	80042c6 <HAL_RCC_OscConfig+0xce>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004208:	6823      	ldr	r3, [r4, #0]
 800420a:	079e      	lsls	r6, r3, #30
 800420c:	f100 80af 	bmi.w	800436e <HAL_RCC_OscConfig+0x176>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004210:	6823      	ldr	r3, [r4, #0]
 8004212:	06da      	lsls	r2, r3, #27
 8004214:	d527      	bpl.n	8004266 <HAL_RCC_OscConfig+0x6e>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004216:	4b9e      	ldr	r3, [pc, #632]	; (8004490 <HAL_RCC_OscConfig+0x298>)
 8004218:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800421a:	6a99      	ldr	r1, [r3, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800421c:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004220:	2a08      	cmp	r2, #8
 8004222:	d007      	beq.n	8004234 <HAL_RCC_OscConfig+0x3c>
 8004224:	2a18      	cmp	r2, #24
 8004226:	f040 8107 	bne.w	8004438 <HAL_RCC_OscConfig+0x240>
 800422a:	f001 0203 	and.w	r2, r1, #3
 800422e:	2a01      	cmp	r2, #1
 8004230:	f040 8102 	bne.w	8004438 <HAL_RCC_OscConfig+0x240>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	05db      	lsls	r3, r3, #23
 8004238:	d502      	bpl.n	8004240 <HAL_RCC_OscConfig+0x48>
 800423a:	69e3      	ldr	r3, [r4, #28]
 800423c:	2b80      	cmp	r3, #128	; 0x80
 800423e:	d1de      	bne.n	80041fe <HAL_RCC_OscConfig+0x6>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004240:	f7fd ff5c 	bl	80020fc <HAL_GetREVID>
 8004244:	f241 0303 	movw	r3, #4099	; 0x1003
 8004248:	6a21      	ldr	r1, [r4, #32]
 800424a:	4298      	cmp	r0, r3
 800424c:	4b90      	ldr	r3, [pc, #576]	; (8004490 <HAL_RCC_OscConfig+0x298>)
 800424e:	f200 80ec 	bhi.w	800442a <HAL_RCC_OscConfig+0x232>
 8004252:	685a      	ldr	r2, [r3, #4]
 8004254:	2920      	cmp	r1, #32
 8004256:	f022 42f8 	bic.w	r2, r2, #2080374784	; 0x7c000000
 800425a:	bf0c      	ite	eq
 800425c:	f042 4280 	orreq.w	r2, r2, #1073741824	; 0x40000000
 8004260:	ea42 6281 	orrne.w	r2, r2, r1, lsl #26
 8004264:	605a      	str	r2, [r3, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004266:	6823      	ldr	r3, [r4, #0]
 8004268:	0719      	lsls	r1, r3, #28
 800426a:	f100 8127 	bmi.w	80044bc <HAL_RCC_OscConfig+0x2c4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800426e:	6823      	ldr	r3, [r4, #0]
 8004270:	069a      	lsls	r2, r3, #26
 8004272:	f100 8148 	bmi.w	8004506 <HAL_RCC_OscConfig+0x30e>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004276:	6823      	ldr	r3, [r4, #0]
 8004278:	075d      	lsls	r5, r3, #29
 800427a:	d51e      	bpl.n	80042ba <HAL_RCC_OscConfig+0xc2>
    PWR->CR1 |= PWR_CR1_DBP;
 800427c:	4d85      	ldr	r5, [pc, #532]	; (8004494 <HAL_RCC_OscConfig+0x29c>)
 800427e:	682b      	ldr	r3, [r5, #0]
 8004280:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004284:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8004286:	f7fd ff1d 	bl	80020c4 <HAL_GetTick>
 800428a:	4606      	mov	r6, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800428c:	682b      	ldr	r3, [r5, #0]
 800428e:	05da      	lsls	r2, r3, #23
 8004290:	f140 815e 	bpl.w	8004550 <HAL_RCC_OscConfig+0x358>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004294:	68a3      	ldr	r3, [r4, #8]
 8004296:	4d7e      	ldr	r5, [pc, #504]	; (8004490 <HAL_RCC_OscConfig+0x298>)
 8004298:	2b01      	cmp	r3, #1
 800429a:	f040 8160 	bne.w	800455e <HAL_RCC_OscConfig+0x366>
 800429e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80042a0:	f043 0301 	orr.w	r3, r3, #1
 80042a4:	672b      	str	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042a6:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80042aa:	f7fd ff0b 	bl	80020c4 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80042ae:	4e78      	ldr	r6, [pc, #480]	; (8004490 <HAL_RCC_OscConfig+0x298>)
      tickstart = HAL_GetTick();
 80042b0:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80042b2:	6f33      	ldr	r3, [r6, #112]	; 0x70
 80042b4:	079b      	lsls	r3, r3, #30
 80042b6:	f140 8178 	bpl.w	80045aa <HAL_RCC_OscConfig+0x3b2>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042ba:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80042bc:	2800      	cmp	r0, #0
 80042be:	f040 817b 	bne.w	80045b8 <HAL_RCC_OscConfig+0x3c0>
          __HAL_RCC_PLLFRACN_ENABLE();
        }
      }
    }
  }
  return HAL_OK;
 80042c2:	2000      	movs	r0, #0
 80042c4:	e029      	b.n	800431a <HAL_RCC_OscConfig+0x122>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042c6:	4b72      	ldr	r3, [pc, #456]	; (8004490 <HAL_RCC_OscConfig+0x298>)
 80042c8:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80042ca:	6a99      	ldr	r1, [r3, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042cc:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80042d0:	2a10      	cmp	r2, #16
 80042d2:	d005      	beq.n	80042e0 <HAL_RCC_OscConfig+0xe8>
 80042d4:	2a18      	cmp	r2, #24
 80042d6:	d10a      	bne.n	80042ee <HAL_RCC_OscConfig+0xf6>
 80042d8:	f001 0203 	and.w	r2, r1, #3
 80042dc:	2a02      	cmp	r2, #2
 80042de:	d106      	bne.n	80042ee <HAL_RCC_OscConfig+0xf6>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	039d      	lsls	r5, r3, #14
 80042e4:	d590      	bpl.n	8004208 <HAL_RCC_OscConfig+0x10>
 80042e6:	6863      	ldr	r3, [r4, #4]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d18d      	bne.n	8004208 <HAL_RCC_OscConfig+0x10>
 80042ec:	e787      	b.n	80041fe <HAL_RCC_OscConfig+0x6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042ee:	6862      	ldr	r2, [r4, #4]
 80042f0:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80042f4:	d112      	bne.n	800431c <HAL_RCC_OscConfig+0x124>
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80042fc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80042fe:	f7fd fee1 	bl	80020c4 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004302:	4e63      	ldr	r6, [pc, #396]	; (8004490 <HAL_RCC_OscConfig+0x298>)
        tickstart = HAL_GetTick();
 8004304:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004306:	6833      	ldr	r3, [r6, #0]
 8004308:	0398      	lsls	r0, r3, #14
 800430a:	f53f af7d 	bmi.w	8004208 <HAL_RCC_OscConfig+0x10>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800430e:	f7fd fed9 	bl	80020c4 <HAL_GetTick>
 8004312:	1b40      	subs	r0, r0, r5
 8004314:	2864      	cmp	r0, #100	; 0x64
 8004316:	d9f6      	bls.n	8004306 <HAL_RCC_OscConfig+0x10e>
            return HAL_TIMEOUT;
 8004318:	2003      	movs	r0, #3
}
 800431a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800431c:	4d5c      	ldr	r5, [pc, #368]	; (8004490 <HAL_RCC_OscConfig+0x298>)
 800431e:	682b      	ldr	r3, [r5, #0]
 8004320:	b99a      	cbnz	r2, 800434a <HAL_RCC_OscConfig+0x152>
 8004322:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004326:	602b      	str	r3, [r5, #0]
 8004328:	682b      	ldr	r3, [r5, #0]
 800432a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800432e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004330:	f7fd fec8 	bl	80020c4 <HAL_GetTick>
 8004334:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004336:	682b      	ldr	r3, [r5, #0]
 8004338:	0399      	lsls	r1, r3, #14
 800433a:	f57f af65 	bpl.w	8004208 <HAL_RCC_OscConfig+0x10>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800433e:	f7fd fec1 	bl	80020c4 <HAL_GetTick>
 8004342:	1b80      	subs	r0, r0, r6
 8004344:	2864      	cmp	r0, #100	; 0x64
 8004346:	d9f6      	bls.n	8004336 <HAL_RCC_OscConfig+0x13e>
 8004348:	e7e6      	b.n	8004318 <HAL_RCC_OscConfig+0x120>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800434a:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 800434e:	d107      	bne.n	8004360 <HAL_RCC_OscConfig+0x168>
 8004350:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004354:	602b      	str	r3, [r5, #0]
 8004356:	682b      	ldr	r3, [r5, #0]
 8004358:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800435c:	602b      	str	r3, [r5, #0]
 800435e:	e7ce      	b.n	80042fe <HAL_RCC_OscConfig+0x106>
 8004360:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004364:	602b      	str	r3, [r5, #0]
 8004366:	682b      	ldr	r3, [r5, #0]
 8004368:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800436c:	e7f6      	b.n	800435c <HAL_RCC_OscConfig+0x164>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800436e:	4b48      	ldr	r3, [pc, #288]	; (8004490 <HAL_RCC_OscConfig+0x298>)
 8004370:	68e1      	ldr	r1, [r4, #12]
 8004372:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004374:	6a98      	ldr	r0, [r3, #40]	; 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004376:	f012 0238 	ands.w	r2, r2, #56	; 0x38
 800437a:	d003      	beq.n	8004384 <HAL_RCC_OscConfig+0x18c>
 800437c:	2a18      	cmp	r2, #24
 800437e:	d12b      	bne.n	80043d8 <HAL_RCC_OscConfig+0x1e0>
 8004380:	0782      	lsls	r2, r0, #30
 8004382:	d129      	bne.n	80043d8 <HAL_RCC_OscConfig+0x1e0>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	075b      	lsls	r3, r3, #29
 8004388:	d502      	bpl.n	8004390 <HAL_RCC_OscConfig+0x198>
 800438a:	2900      	cmp	r1, #0
 800438c:	f43f af37 	beq.w	80041fe <HAL_RCC_OscConfig+0x6>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004390:	4d3f      	ldr	r5, [pc, #252]	; (8004490 <HAL_RCC_OscConfig+0x298>)
 8004392:	682a      	ldr	r2, [r5, #0]
 8004394:	f022 0219 	bic.w	r2, r2, #25
 8004398:	430a      	orrs	r2, r1
 800439a:	602a      	str	r2, [r5, #0]
        tickstart = HAL_GetTick();
 800439c:	f7fd fe92 	bl	80020c4 <HAL_GetTick>
 80043a0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80043a2:	682b      	ldr	r3, [r5, #0]
 80043a4:	075f      	lsls	r7, r3, #29
 80043a6:	d511      	bpl.n	80043cc <HAL_RCC_OscConfig+0x1d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043a8:	f7fd fea8 	bl	80020fc <HAL_GetREVID>
 80043ac:	f241 0303 	movw	r3, #4099	; 0x1003
 80043b0:	6922      	ldr	r2, [r4, #16]
 80043b2:	4298      	cmp	r0, r3
 80043b4:	686b      	ldr	r3, [r5, #4]
 80043b6:	d822      	bhi.n	80043fe <HAL_RCC_OscConfig+0x206>
 80043b8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80043bc:	2a40      	cmp	r2, #64	; 0x40
 80043be:	bf0c      	ite	eq
 80043c0:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
 80043c4:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 80043c8:	606b      	str	r3, [r5, #4]
 80043ca:	e721      	b.n	8004210 <HAL_RCC_OscConfig+0x18>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043cc:	f7fd fe7a 	bl	80020c4 <HAL_GetTick>
 80043d0:	1b80      	subs	r0, r0, r6
 80043d2:	2802      	cmp	r0, #2
 80043d4:	d9e5      	bls.n	80043a2 <HAL_RCC_OscConfig+0x1aa>
 80043d6:	e79f      	b.n	8004318 <HAL_RCC_OscConfig+0x120>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80043d8:	681a      	ldr	r2, [r3, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80043da:	b1a9      	cbz	r1, 8004408 <HAL_RCC_OscConfig+0x210>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80043dc:	f022 0219 	bic.w	r2, r2, #25
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80043e0:	4d2b      	ldr	r5, [pc, #172]	; (8004490 <HAL_RCC_OscConfig+0x298>)
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80043e2:	430a      	orrs	r2, r1
 80043e4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80043e6:	f7fd fe6d 	bl	80020c4 <HAL_GetTick>
 80043ea:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80043ec:	682b      	ldr	r3, [r5, #0]
 80043ee:	0758      	lsls	r0, r3, #29
 80043f0:	d4da      	bmi.n	80043a8 <HAL_RCC_OscConfig+0x1b0>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043f2:	f7fd fe67 	bl	80020c4 <HAL_GetTick>
 80043f6:	1b80      	subs	r0, r0, r6
 80043f8:	2802      	cmp	r0, #2
 80043fa:	d9f7      	bls.n	80043ec <HAL_RCC_OscConfig+0x1f4>
 80043fc:	e78c      	b.n	8004318 <HAL_RCC_OscConfig+0x120>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043fe:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004402:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004406:	e7df      	b.n	80043c8 <HAL_RCC_OscConfig+0x1d0>
        __HAL_RCC_HSI_DISABLE();
 8004408:	f022 0201 	bic.w	r2, r2, #1
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800440c:	4e20      	ldr	r6, [pc, #128]	; (8004490 <HAL_RCC_OscConfig+0x298>)
        __HAL_RCC_HSI_DISABLE();
 800440e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004410:	f7fd fe58 	bl	80020c4 <HAL_GetTick>
 8004414:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004416:	6833      	ldr	r3, [r6, #0]
 8004418:	0759      	lsls	r1, r3, #29
 800441a:	f57f aef9 	bpl.w	8004210 <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800441e:	f7fd fe51 	bl	80020c4 <HAL_GetTick>
 8004422:	1b40      	subs	r0, r0, r5
 8004424:	2802      	cmp	r0, #2
 8004426:	d9f6      	bls.n	8004416 <HAL_RCC_OscConfig+0x21e>
 8004428:	e776      	b.n	8004318 <HAL_RCC_OscConfig+0x120>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800442a:	68da      	ldr	r2, [r3, #12]
 800442c:	f022 527c 	bic.w	r2, r2, #1056964608	; 0x3f000000
 8004430:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8004434:	60da      	str	r2, [r3, #12]
 8004436:	e716      	b.n	8004266 <HAL_RCC_OscConfig+0x6e>
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004438:	69e2      	ldr	r2, [r4, #28]
 800443a:	b36a      	cbz	r2, 8004498 <HAL_RCC_OscConfig+0x2a0>
        __HAL_RCC_CSI_ENABLE();
 800443c:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800443e:	4d14      	ldr	r5, [pc, #80]	; (8004490 <HAL_RCC_OscConfig+0x298>)
        __HAL_RCC_CSI_ENABLE();
 8004440:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004444:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004446:	f7fd fe3d 	bl	80020c4 <HAL_GetTick>
 800444a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800444c:	682b      	ldr	r3, [r5, #0]
 800444e:	05df      	lsls	r7, r3, #23
 8004450:	d511      	bpl.n	8004476 <HAL_RCC_OscConfig+0x27e>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004452:	f7fd fe53 	bl	80020fc <HAL_GetREVID>
 8004456:	f241 0303 	movw	r3, #4099	; 0x1003
 800445a:	6a22      	ldr	r2, [r4, #32]
 800445c:	4298      	cmp	r0, r3
 800445e:	d810      	bhi.n	8004482 <HAL_RCC_OscConfig+0x28a>
 8004460:	686b      	ldr	r3, [r5, #4]
 8004462:	2a20      	cmp	r2, #32
 8004464:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004468:	bf0c      	ite	eq
 800446a:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 800446e:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 8004472:	606b      	str	r3, [r5, #4]
 8004474:	e6f7      	b.n	8004266 <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004476:	f7fd fe25 	bl	80020c4 <HAL_GetTick>
 800447a:	1b80      	subs	r0, r0, r6
 800447c:	2802      	cmp	r0, #2
 800447e:	d9e5      	bls.n	800444c <HAL_RCC_OscConfig+0x254>
 8004480:	e74a      	b.n	8004318 <HAL_RCC_OscConfig+0x120>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004482:	68eb      	ldr	r3, [r5, #12]
 8004484:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8004488:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800448c:	60eb      	str	r3, [r5, #12]
 800448e:	e6ea      	b.n	8004266 <HAL_RCC_OscConfig+0x6e>
 8004490:	58024400 	.word	0x58024400
 8004494:	58024800 	.word	0x58024800
        __HAL_RCC_CSI_DISABLE();
 8004498:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800449a:	4e88      	ldr	r6, [pc, #544]	; (80046bc <HAL_RCC_OscConfig+0x4c4>)
        __HAL_RCC_CSI_DISABLE();
 800449c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80044a0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80044a2:	f7fd fe0f 	bl	80020c4 <HAL_GetTick>
 80044a6:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80044a8:	6833      	ldr	r3, [r6, #0]
 80044aa:	05d8      	lsls	r0, r3, #23
 80044ac:	f57f aedb 	bpl.w	8004266 <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80044b0:	f7fd fe08 	bl	80020c4 <HAL_GetTick>
 80044b4:	1b40      	subs	r0, r0, r5
 80044b6:	2802      	cmp	r0, #2
 80044b8:	d9f6      	bls.n	80044a8 <HAL_RCC_OscConfig+0x2b0>
 80044ba:	e72d      	b.n	8004318 <HAL_RCC_OscConfig+0x120>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80044bc:	6963      	ldr	r3, [r4, #20]
 80044be:	4d7f      	ldr	r5, [pc, #508]	; (80046bc <HAL_RCC_OscConfig+0x4c4>)
 80044c0:	b183      	cbz	r3, 80044e4 <HAL_RCC_OscConfig+0x2ec>
      __HAL_RCC_LSI_ENABLE();
 80044c2:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80044c4:	f043 0301 	orr.w	r3, r3, #1
 80044c8:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 80044ca:	f7fd fdfb 	bl	80020c4 <HAL_GetTick>
 80044ce:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80044d0:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80044d2:	079b      	lsls	r3, r3, #30
 80044d4:	f53f aecb 	bmi.w	800426e <HAL_RCC_OscConfig+0x76>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044d8:	f7fd fdf4 	bl	80020c4 <HAL_GetTick>
 80044dc:	1b80      	subs	r0, r0, r6
 80044de:	2802      	cmp	r0, #2
 80044e0:	d9f6      	bls.n	80044d0 <HAL_RCC_OscConfig+0x2d8>
 80044e2:	e719      	b.n	8004318 <HAL_RCC_OscConfig+0x120>
      __HAL_RCC_LSI_DISABLE();
 80044e4:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80044e6:	f023 0301 	bic.w	r3, r3, #1
 80044ea:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 80044ec:	f7fd fdea 	bl	80020c4 <HAL_GetTick>
 80044f0:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80044f2:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80044f4:	079f      	lsls	r7, r3, #30
 80044f6:	f57f aeba 	bpl.w	800426e <HAL_RCC_OscConfig+0x76>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044fa:	f7fd fde3 	bl	80020c4 <HAL_GetTick>
 80044fe:	1b80      	subs	r0, r0, r6
 8004500:	2802      	cmp	r0, #2
 8004502:	d9f6      	bls.n	80044f2 <HAL_RCC_OscConfig+0x2fa>
 8004504:	e708      	b.n	8004318 <HAL_RCC_OscConfig+0x120>
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004506:	69a3      	ldr	r3, [r4, #24]
 8004508:	4d6c      	ldr	r5, [pc, #432]	; (80046bc <HAL_RCC_OscConfig+0x4c4>)
 800450a:	b183      	cbz	r3, 800452e <HAL_RCC_OscConfig+0x336>
      __HAL_RCC_HSI48_ENABLE();
 800450c:	682b      	ldr	r3, [r5, #0]
 800450e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004512:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8004514:	f7fd fdd6 	bl	80020c4 <HAL_GetTick>
 8004518:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800451a:	682b      	ldr	r3, [r5, #0]
 800451c:	0498      	lsls	r0, r3, #18
 800451e:	f53f aeaa 	bmi.w	8004276 <HAL_RCC_OscConfig+0x7e>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004522:	f7fd fdcf 	bl	80020c4 <HAL_GetTick>
 8004526:	1b80      	subs	r0, r0, r6
 8004528:	2802      	cmp	r0, #2
 800452a:	d9f6      	bls.n	800451a <HAL_RCC_OscConfig+0x322>
 800452c:	e6f4      	b.n	8004318 <HAL_RCC_OscConfig+0x120>
      __HAL_RCC_HSI48_DISABLE();
 800452e:	682b      	ldr	r3, [r5, #0]
 8004530:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004534:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8004536:	f7fd fdc5 	bl	80020c4 <HAL_GetTick>
 800453a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800453c:	682b      	ldr	r3, [r5, #0]
 800453e:	0499      	lsls	r1, r3, #18
 8004540:	f57f ae99 	bpl.w	8004276 <HAL_RCC_OscConfig+0x7e>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004544:	f7fd fdbe 	bl	80020c4 <HAL_GetTick>
 8004548:	1b80      	subs	r0, r0, r6
 800454a:	2802      	cmp	r0, #2
 800454c:	d9f6      	bls.n	800453c <HAL_RCC_OscConfig+0x344>
 800454e:	e6e3      	b.n	8004318 <HAL_RCC_OscConfig+0x120>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004550:	f7fd fdb8 	bl	80020c4 <HAL_GetTick>
 8004554:	1b80      	subs	r0, r0, r6
 8004556:	2864      	cmp	r0, #100	; 0x64
 8004558:	f67f ae98 	bls.w	800428c <HAL_RCC_OscConfig+0x94>
 800455c:	e6dc      	b.n	8004318 <HAL_RCC_OscConfig+0x120>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800455e:	b9b3      	cbnz	r3, 800458e <HAL_RCC_OscConfig+0x396>
 8004560:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004562:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004566:	f023 0301 	bic.w	r3, r3, #1
 800456a:	672b      	str	r3, [r5, #112]	; 0x70
 800456c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800456e:	f023 0304 	bic.w	r3, r3, #4
 8004572:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8004574:	f7fd fda6 	bl	80020c4 <HAL_GetTick>
 8004578:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800457a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800457c:	0798      	lsls	r0, r3, #30
 800457e:	f57f ae9c 	bpl.w	80042ba <HAL_RCC_OscConfig+0xc2>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004582:	f7fd fd9f 	bl	80020c4 <HAL_GetTick>
 8004586:	1b80      	subs	r0, r0, r6
 8004588:	42b8      	cmp	r0, r7
 800458a:	d9f6      	bls.n	800457a <HAL_RCC_OscConfig+0x382>
 800458c:	e6c4      	b.n	8004318 <HAL_RCC_OscConfig+0x120>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800458e:	2b05      	cmp	r3, #5
 8004590:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8004592:	d103      	bne.n	800459c <HAL_RCC_OscConfig+0x3a4>
 8004594:	f043 0304 	orr.w	r3, r3, #4
 8004598:	672b      	str	r3, [r5, #112]	; 0x70
 800459a:	e680      	b.n	800429e <HAL_RCC_OscConfig+0xa6>
 800459c:	f023 0301 	bic.w	r3, r3, #1
 80045a0:	672b      	str	r3, [r5, #112]	; 0x70
 80045a2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80045a4:	f023 0304 	bic.w	r3, r3, #4
 80045a8:	e67c      	b.n	80042a4 <HAL_RCC_OscConfig+0xac>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045aa:	f7fd fd8b 	bl	80020c4 <HAL_GetTick>
 80045ae:	1b40      	subs	r0, r0, r5
 80045b0:	42b8      	cmp	r0, r7
 80045b2:	f67f ae7e 	bls.w	80042b2 <HAL_RCC_OscConfig+0xba>
 80045b6:	e6af      	b.n	8004318 <HAL_RCC_OscConfig+0x120>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80045b8:	4d40      	ldr	r5, [pc, #256]	; (80046bc <HAL_RCC_OscConfig+0x4c4>)
 80045ba:	692b      	ldr	r3, [r5, #16]
 80045bc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80045c0:	2b18      	cmp	r3, #24
 80045c2:	d07d      	beq.n	80046c0 <HAL_RCC_OscConfig+0x4c8>
        __HAL_RCC_PLL_DISABLE();
 80045c4:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80045c6:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80045c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80045cc:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80045ce:	d167      	bne.n	80046a0 <HAL_RCC_OscConfig+0x4a8>
        tickstart = HAL_GetTick();
 80045d0:	f7fd fd78 	bl	80020c4 <HAL_GetTick>
 80045d4:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80045d6:	682b      	ldr	r3, [r5, #0]
 80045d8:	0199      	lsls	r1, r3, #6
 80045da:	d45b      	bmi.n	8004694 <HAL_RCC_OscConfig+0x49c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80045dc:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80045de:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80045e0:	f423 737c 	bic.w	r3, r3, #1008	; 0x3f0
 80045e4:	f023 0303 	bic.w	r3, r3, #3
 80045e8:	4313      	orrs	r3, r2
 80045ea:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80045ec:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80045f0:	62ab      	str	r3, [r5, #40]	; 0x28
 80045f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80045f4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80045f6:	3b01      	subs	r3, #1
 80045f8:	3a01      	subs	r2, #1
 80045fa:	025b      	lsls	r3, r3, #9
 80045fc:	0412      	lsls	r2, r2, #16
 80045fe:	b29b      	uxth	r3, r3
 8004600:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8004604:	4313      	orrs	r3, r2
 8004606:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004608:	3a01      	subs	r2, #1
 800460a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800460e:	4313      	orrs	r3, r2
 8004610:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004612:	3a01      	subs	r2, #1
 8004614:	0612      	lsls	r2, r2, #24
 8004616:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800461a:	4313      	orrs	r3, r2
 800461c:	632b      	str	r3, [r5, #48]	; 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
 800461e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004620:	f023 0301 	bic.w	r3, r3, #1
 8004624:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004626:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8004628:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800462a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800462e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004632:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8004636:	636b      	str	r3, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004638:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800463a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800463c:	f023 030c 	bic.w	r3, r3, #12
 8004640:	4313      	orrs	r3, r2
 8004642:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004644:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004646:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8004648:	f023 0302 	bic.w	r3, r3, #2
 800464c:	4313      	orrs	r3, r2
 800464e:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004650:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004652:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004656:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004658:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800465a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800465e:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004660:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004662:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004666:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
 8004668:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800466a:	f043 0301 	orr.w	r3, r3, #1
 800466e:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 8004670:	682b      	ldr	r3, [r5, #0]
 8004672:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004676:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004678:	f7fd fd24 	bl	80020c4 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800467c:	4d0f      	ldr	r5, [pc, #60]	; (80046bc <HAL_RCC_OscConfig+0x4c4>)
        tickstart = HAL_GetTick();
 800467e:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004680:	682b      	ldr	r3, [r5, #0]
 8004682:	019a      	lsls	r2, r3, #6
 8004684:	f53f ae1d 	bmi.w	80042c2 <HAL_RCC_OscConfig+0xca>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004688:	f7fd fd1c 	bl	80020c4 <HAL_GetTick>
 800468c:	1b00      	subs	r0, r0, r4
 800468e:	2802      	cmp	r0, #2
 8004690:	d9f6      	bls.n	8004680 <HAL_RCC_OscConfig+0x488>
 8004692:	e641      	b.n	8004318 <HAL_RCC_OscConfig+0x120>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004694:	f7fd fd16 	bl	80020c4 <HAL_GetTick>
 8004698:	1b80      	subs	r0, r0, r6
 800469a:	2802      	cmp	r0, #2
 800469c:	d99b      	bls.n	80045d6 <HAL_RCC_OscConfig+0x3de>
 800469e:	e63b      	b.n	8004318 <HAL_RCC_OscConfig+0x120>
        tickstart = HAL_GetTick();
 80046a0:	f7fd fd10 	bl	80020c4 <HAL_GetTick>
 80046a4:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80046a6:	682b      	ldr	r3, [r5, #0]
 80046a8:	019b      	lsls	r3, r3, #6
 80046aa:	f57f ae0a 	bpl.w	80042c2 <HAL_RCC_OscConfig+0xca>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046ae:	f7fd fd09 	bl	80020c4 <HAL_GetTick>
 80046b2:	1b00      	subs	r0, r0, r4
 80046b4:	2802      	cmp	r0, #2
 80046b6:	d9f6      	bls.n	80046a6 <HAL_RCC_OscConfig+0x4ae>
 80046b8:	e62e      	b.n	8004318 <HAL_RCC_OscConfig+0x120>
 80046ba:	bf00      	nop
 80046bc:	58024400 	.word	0x58024400
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046c0:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 80046c2:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 80046c4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046c6:	f43f ae28 	beq.w	800431a <HAL_RCC_OscConfig+0x122>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046ca:	f002 0103 	and.w	r1, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046ce:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80046d0:	4281      	cmp	r1, r0
 80046d2:	f47f ad94 	bne.w	80041fe <HAL_RCC_OscConfig+0x6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80046d6:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046da:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80046dc:	428a      	cmp	r2, r1
 80046de:	f47f ad8e 	bne.w	80041fe <HAL_RCC_OscConfig+0x6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80046e2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80046e4:	f3c3 0108 	ubfx	r1, r3, #0, #9
 80046e8:	3a01      	subs	r2, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80046ea:	4291      	cmp	r1, r2
 80046ec:	f47f ad87 	bne.w	80041fe <HAL_RCC_OscConfig+0x6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80046f0:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80046f2:	f3c3 2146 	ubfx	r1, r3, #9, #7
 80046f6:	3a01      	subs	r2, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80046f8:	4291      	cmp	r1, r2
 80046fa:	f47f ad80 	bne.w	80041fe <HAL_RCC_OscConfig+0x6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80046fe:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004700:	f3c3 4106 	ubfx	r1, r3, #16, #7
 8004704:	3a01      	subs	r2, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004706:	4291      	cmp	r1, r2
 8004708:	f47f ad79 	bne.w	80041fe <HAL_RCC_OscConfig+0x6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800470c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800470e:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8004712:	3a01      	subs	r2, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004714:	4293      	cmp	r3, r2
 8004716:	f47f ad72 	bne.w	80041fe <HAL_RCC_OscConfig+0x6>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800471a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800471c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800471e:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004722:	429a      	cmp	r2, r3
 8004724:	f43f adcd 	beq.w	80042c2 <HAL_RCC_OscConfig+0xca>
          __HAL_RCC_PLLFRACN_DISABLE();
 8004728:	4d0c      	ldr	r5, [pc, #48]	; (800475c <HAL_RCC_OscConfig+0x564>)
 800472a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800472c:	f023 0301 	bic.w	r3, r3, #1
 8004730:	62eb      	str	r3, [r5, #44]	; 0x2c
          tickstart = HAL_GetTick();
 8004732:	f7fd fcc7 	bl	80020c4 <HAL_GetTick>
 8004736:	4606      	mov	r6, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004738:	f7fd fcc4 	bl	80020c4 <HAL_GetTick>
 800473c:	42b0      	cmp	r0, r6
 800473e:	d0fb      	beq.n	8004738 <HAL_RCC_OscConfig+0x540>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004740:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8004742:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8004744:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004748:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800474c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8004750:	636b      	str	r3, [r5, #52]	; 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
 8004752:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004754:	f043 0301 	orr.w	r3, r3, #1
 8004758:	62eb      	str	r3, [r5, #44]	; 0x2c
 800475a:	e5b2      	b.n	80042c2 <HAL_RCC_OscConfig+0xca>
 800475c:	58024400 	.word	0x58024400

08004760 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004760:	4b48      	ldr	r3, [pc, #288]	; (8004884 <HAL_RCC_GetSysClockFreq+0x124>)
 8004762:	691a      	ldr	r2, [r3, #16]
 8004764:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8004768:	2a10      	cmp	r2, #16
{
 800476a:	b530      	push	{r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800476c:	f000 8086 	beq.w	800487c <HAL_RCC_GetSysClockFreq+0x11c>
 8004770:	2a18      	cmp	r2, #24
 8004772:	d00c      	beq.n	800478e <HAL_RCC_GetSysClockFreq+0x2e>
 8004774:	2a00      	cmp	r2, #0
 8004776:	f040 8083 	bne.w	8004880 <HAL_RCC_GetSysClockFreq+0x120>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	4842      	ldr	r0, [pc, #264]	; (8004888 <HAL_RCC_GetSysClockFreq+0x128>)
 800477e:	f012 0f20 	tst.w	r2, #32
 8004782:	d003      	beq.n	800478c <HAL_RCC_GetSysClockFreq+0x2c>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800478a:	40d8      	lsrs	r0, r3
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
 800478c:	bd30      	pop	{r4, r5, pc}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800478e:	6a99      	ldr	r1, [r3, #40]	; 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004790:	6a9d      	ldr	r5, [r3, #40]	; 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004792:	6adc      	ldr	r4, [r3, #44]	; 0x2c
      if (pllm != 0U)
 8004794:	f415 7f7c 	tst.w	r5, #1008	; 0x3f0
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004798:	f3c5 1005 	ubfx	r0, r5, #4, #6
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800479c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
      if (pllm != 0U)
 800479e:	d0f5      	beq.n	800478c <HAL_RCC_GetSysClockFreq+0x2c>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80047a0:	f3c2 02cc 	ubfx	r2, r2, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80047a4:	f004 0401 	and.w	r4, r4, #1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80047a8:	ee07 0a90 	vmov	s15, r0
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80047ac:	f001 0103 	and.w	r1, r1, #3
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80047b0:	4362      	muls	r2, r4
 80047b2:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80047b6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80047ba:	2901      	cmp	r1, #1
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80047bc:	ee07 2a90 	vmov	s15, r2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80047c0:	eefa 7ae9 	vcvt.f32.s32	s15, s15, #13
 80047c4:	d04c      	beq.n	8004860 <HAL_RCC_GetSysClockFreq+0x100>
 80047c6:	2902      	cmp	r1, #2
 80047c8:	d03c      	beq.n	8004844 <HAL_RCC_GetSysClockFreq+0xe4>
 80047ca:	2900      	cmp	r1, #0
 80047cc:	d148      	bne.n	8004860 <HAL_RCC_GetSysClockFreq+0x100>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80047ce:	681a      	ldr	r2, [r3, #0]
 80047d0:	0692      	lsls	r2, r2, #26
 80047d2:	d527      	bpl.n	8004824 <HAL_RCC_GetSysClockFreq+0xc4>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80047d4:	6819      	ldr	r1, [r3, #0]
 80047d6:	4a2c      	ldr	r2, [pc, #176]	; (8004888 <HAL_RCC_GetSysClockFreq+0x128>)
 80047d8:	f3c1 01c1 	ubfx	r1, r1, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80047dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80047de:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80047e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047e4:	ee07 2a10 	vmov	s14, r2
 80047e8:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 80047ec:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 80047f0:	ee06 3a90 	vmov	s13, r3
 80047f4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80047f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047fc:	ee77 7a86 	vadd.f32	s15, s15, s12
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004800:	4b20      	ldr	r3, [pc, #128]	; (8004884 <HAL_RCC_GetSysClockFreq+0x124>)
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004802:	ee67 7a87 	vmul.f32	s15, s15, s14
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004808:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800480c:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800480e:	ee07 3a10 	vmov	s14, r3
 8004812:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8004816:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800481a:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800481e:	ee17 0a90 	vmov	r0, s15
 8004822:	e7b3      	b.n	800478c <HAL_RCC_GetSysClockFreq+0x2c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004826:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800482a:	ee07 3a10 	vmov	s14, r3
 800482e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004832:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004836:	ee77 7a86 	vadd.f32	s15, s15, s12
 800483a:	ed9f 6a14 	vldr	s12, [pc, #80]	; 800488c <HAL_RCC_GetSysClockFreq+0x12c>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800483e:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8004842:	e7dd      	b.n	8004800 <HAL_RCC_GetSysClockFreq+0xa0>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004846:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800484a:	ee07 3a10 	vmov	s14, r3
 800484e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004852:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004856:	ee77 7a86 	vadd.f32	s15, s15, s12
 800485a:	ed9f 6a0d 	vldr	s12, [pc, #52]	; 8004890 <HAL_RCC_GetSysClockFreq+0x130>
 800485e:	e7ee      	b.n	800483e <HAL_RCC_GetSysClockFreq+0xde>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004862:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004866:	ee07 3a10 	vmov	s14, r3
 800486a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800486e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004872:	ee77 7a86 	vadd.f32	s15, s15, s12
 8004876:	ed9f 6a07 	vldr	s12, [pc, #28]	; 8004894 <HAL_RCC_GetSysClockFreq+0x134>
 800487a:	e7e0      	b.n	800483e <HAL_RCC_GetSysClockFreq+0xde>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800487c:	4806      	ldr	r0, [pc, #24]	; (8004898 <HAL_RCC_GetSysClockFreq+0x138>)
 800487e:	e785      	b.n	800478c <HAL_RCC_GetSysClockFreq+0x2c>
      sysclockfreq = CSI_VALUE;
 8004880:	4806      	ldr	r0, [pc, #24]	; (800489c <HAL_RCC_GetSysClockFreq+0x13c>)
 8004882:	e783      	b.n	800478c <HAL_RCC_GetSysClockFreq+0x2c>
 8004884:	58024400 	.word	0x58024400
 8004888:	03d09000 	.word	0x03d09000
 800488c:	4c742400 	.word	0x4c742400
 8004890:	4bbebc20 	.word	0x4bbebc20
 8004894:	4a742400 	.word	0x4a742400
 8004898:	017d7840 	.word	0x017d7840
 800489c:	003d0900 	.word	0x003d0900

080048a0 <HAL_RCC_ClockConfig>:
{
 80048a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048a4:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 80048a6:	4604      	mov	r4, r0
 80048a8:	b910      	cbnz	r0, 80048b0 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80048aa:	2001      	movs	r0, #1
}
 80048ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80048b0:	4a88      	ldr	r2, [pc, #544]	; (8004ad4 <HAL_RCC_ClockConfig+0x234>)
 80048b2:	6813      	ldr	r3, [r2, #0]
 80048b4:	f003 030f 	and.w	r3, r3, #15
 80048b8:	428b      	cmp	r3, r1
 80048ba:	f0c0 8093 	bcc.w	80049e4 <HAL_RCC_ClockConfig+0x144>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80048be:	6823      	ldr	r3, [r4, #0]
 80048c0:	075f      	lsls	r7, r3, #29
 80048c2:	f100 809b 	bmi.w	80049fc <HAL_RCC_ClockConfig+0x15c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048c6:	071e      	lsls	r6, r3, #28
 80048c8:	d50b      	bpl.n	80048e2 <HAL_RCC_ClockConfig+0x42>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80048ca:	4983      	ldr	r1, [pc, #524]	; (8004ad8 <HAL_RCC_ClockConfig+0x238>)
 80048cc:	6966      	ldr	r6, [r4, #20]
 80048ce:	69c8      	ldr	r0, [r1, #28]
 80048d0:	f000 0070 	and.w	r0, r0, #112	; 0x70
 80048d4:	4286      	cmp	r6, r0
 80048d6:	d904      	bls.n	80048e2 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80048d8:	69ca      	ldr	r2, [r1, #28]
 80048da:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80048de:	4332      	orrs	r2, r6
 80048e0:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048e2:	06d8      	lsls	r0, r3, #27
 80048e4:	d50b      	bpl.n	80048fe <HAL_RCC_ClockConfig+0x5e>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80048e6:	497c      	ldr	r1, [pc, #496]	; (8004ad8 <HAL_RCC_ClockConfig+0x238>)
 80048e8:	69a6      	ldr	r6, [r4, #24]
 80048ea:	69c8      	ldr	r0, [r1, #28]
 80048ec:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 80048f0:	4286      	cmp	r6, r0
 80048f2:	d904      	bls.n	80048fe <HAL_RCC_ClockConfig+0x5e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80048f4:	69ca      	ldr	r2, [r1, #28]
 80048f6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80048fa:	4332      	orrs	r2, r6
 80048fc:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80048fe:	0699      	lsls	r1, r3, #26
 8004900:	d50b      	bpl.n	800491a <HAL_RCC_ClockConfig+0x7a>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004902:	4975      	ldr	r1, [pc, #468]	; (8004ad8 <HAL_RCC_ClockConfig+0x238>)
 8004904:	69e6      	ldr	r6, [r4, #28]
 8004906:	6a08      	ldr	r0, [r1, #32]
 8004908:	f000 0070 	and.w	r0, r0, #112	; 0x70
 800490c:	4286      	cmp	r6, r0
 800490e:	d904      	bls.n	800491a <HAL_RCC_ClockConfig+0x7a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004910:	6a0a      	ldr	r2, [r1, #32]
 8004912:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004916:	4332      	orrs	r2, r6
 8004918:	620a      	str	r2, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800491a:	079a      	lsls	r2, r3, #30
 800491c:	d50b      	bpl.n	8004936 <HAL_RCC_ClockConfig+0x96>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800491e:	496e      	ldr	r1, [pc, #440]	; (8004ad8 <HAL_RCC_ClockConfig+0x238>)
 8004920:	68e6      	ldr	r6, [r4, #12]
 8004922:	6988      	ldr	r0, [r1, #24]
 8004924:	f000 000f 	and.w	r0, r0, #15
 8004928:	4286      	cmp	r6, r0
 800492a:	d904      	bls.n	8004936 <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800492c:	698a      	ldr	r2, [r1, #24]
 800492e:	f022 020f 	bic.w	r2, r2, #15
 8004932:	4332      	orrs	r2, r6
 8004934:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004936:	07df      	lsls	r7, r3, #31
 8004938:	d46e      	bmi.n	8004a18 <HAL_RCC_ClockConfig+0x178>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800493a:	6823      	ldr	r3, [r4, #0]
 800493c:	079e      	lsls	r6, r3, #30
 800493e:	f100 80a1 	bmi.w	8004a84 <HAL_RCC_ClockConfig+0x1e4>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004942:	4964      	ldr	r1, [pc, #400]	; (8004ad4 <HAL_RCC_ClockConfig+0x234>)
 8004944:	680a      	ldr	r2, [r1, #0]
 8004946:	f002 020f 	and.w	r2, r2, #15
 800494a:	42aa      	cmp	r2, r5
 800494c:	f200 80a8 	bhi.w	8004aa0 <HAL_RCC_ClockConfig+0x200>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004950:	0758      	lsls	r0, r3, #29
 8004952:	f100 80b1 	bmi.w	8004ab8 <HAL_RCC_ClockConfig+0x218>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004956:	0719      	lsls	r1, r3, #28
 8004958:	d50b      	bpl.n	8004972 <HAL_RCC_ClockConfig+0xd2>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800495a:	495f      	ldr	r1, [pc, #380]	; (8004ad8 <HAL_RCC_ClockConfig+0x238>)
 800495c:	6965      	ldr	r5, [r4, #20]
 800495e:	69c8      	ldr	r0, [r1, #28]
 8004960:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8004964:	4285      	cmp	r5, r0
 8004966:	d204      	bcs.n	8004972 <HAL_RCC_ClockConfig+0xd2>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004968:	69ca      	ldr	r2, [r1, #28]
 800496a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800496e:	432a      	orrs	r2, r5
 8004970:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004972:	06da      	lsls	r2, r3, #27
 8004974:	d50b      	bpl.n	800498e <HAL_RCC_ClockConfig+0xee>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004976:	4958      	ldr	r1, [pc, #352]	; (8004ad8 <HAL_RCC_ClockConfig+0x238>)
 8004978:	69a5      	ldr	r5, [r4, #24]
 800497a:	69c8      	ldr	r0, [r1, #28]
 800497c:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8004980:	4285      	cmp	r5, r0
 8004982:	d204      	bcs.n	800498e <HAL_RCC_ClockConfig+0xee>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004984:	69ca      	ldr	r2, [r1, #28]
 8004986:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800498a:	432a      	orrs	r2, r5
 800498c:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800498e:	069b      	lsls	r3, r3, #26
 8004990:	d50b      	bpl.n	80049aa <HAL_RCC_ClockConfig+0x10a>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004992:	4a51      	ldr	r2, [pc, #324]	; (8004ad8 <HAL_RCC_ClockConfig+0x238>)
 8004994:	69e0      	ldr	r0, [r4, #28]
 8004996:	6a11      	ldr	r1, [r2, #32]
 8004998:	f001 0170 	and.w	r1, r1, #112	; 0x70
 800499c:	4288      	cmp	r0, r1
 800499e:	d204      	bcs.n	80049aa <HAL_RCC_ClockConfig+0x10a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80049a0:	6a13      	ldr	r3, [r2, #32]
 80049a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049a6:	4303      	orrs	r3, r0
 80049a8:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80049aa:	f7ff fed9 	bl	8004760 <HAL_RCC_GetSysClockFreq>
 80049ae:	494a      	ldr	r1, [pc, #296]	; (8004ad8 <HAL_RCC_ClockConfig+0x238>)
 80049b0:	4a4a      	ldr	r2, [pc, #296]	; (8004adc <HAL_RCC_ClockConfig+0x23c>)
 80049b2:	698b      	ldr	r3, [r1, #24]
 80049b4:	f3c3 2303 	ubfx	r3, r3, #8, #4
 80049b8:	5cd3      	ldrb	r3, [r2, r3]
 80049ba:	f003 031f 	and.w	r3, r3, #31
 80049be:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80049c0:	698b      	ldr	r3, [r1, #24]
 80049c2:	f003 030f 	and.w	r3, r3, #15
 80049c6:	5cd3      	ldrb	r3, [r2, r3]
 80049c8:	4a45      	ldr	r2, [pc, #276]	; (8004ae0 <HAL_RCC_ClockConfig+0x240>)
 80049ca:	f003 031f 	and.w	r3, r3, #31
 80049ce:	fa20 f303 	lsr.w	r3, r0, r3
 80049d2:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 80049d4:	4b43      	ldr	r3, [pc, #268]	; (8004ae4 <HAL_RCC_ClockConfig+0x244>)
 80049d6:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick(uwTickPrio);
 80049d8:	4b43      	ldr	r3, [pc, #268]	; (8004ae8 <HAL_RCC_ClockConfig+0x248>)
}
 80049da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
 80049de:	6818      	ldr	r0, [r3, #0]
 80049e0:	f7fd bb10 	b.w	8002004 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049e4:	6813      	ldr	r3, [r2, #0]
 80049e6:	f023 030f 	bic.w	r3, r3, #15
 80049ea:	430b      	orrs	r3, r1
 80049ec:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049ee:	6813      	ldr	r3, [r2, #0]
 80049f0:	f003 030f 	and.w	r3, r3, #15
 80049f4:	428b      	cmp	r3, r1
 80049f6:	f47f af58 	bne.w	80048aa <HAL_RCC_ClockConfig+0xa>
 80049fa:	e760      	b.n	80048be <HAL_RCC_ClockConfig+0x1e>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80049fc:	4936      	ldr	r1, [pc, #216]	; (8004ad8 <HAL_RCC_ClockConfig+0x238>)
 80049fe:	6926      	ldr	r6, [r4, #16]
 8004a00:	6988      	ldr	r0, [r1, #24]
 8004a02:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8004a06:	4286      	cmp	r6, r0
 8004a08:	f67f af5d 	bls.w	80048c6 <HAL_RCC_ClockConfig+0x26>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004a0c:	698a      	ldr	r2, [r1, #24]
 8004a0e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004a12:	4332      	orrs	r2, r6
 8004a14:	618a      	str	r2, [r1, #24]
 8004a16:	e756      	b.n	80048c6 <HAL_RCC_ClockConfig+0x26>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004a18:	4b2f      	ldr	r3, [pc, #188]	; (8004ad8 <HAL_RCC_ClockConfig+0x238>)
 8004a1a:	68a1      	ldr	r1, [r4, #8]
 8004a1c:	699a      	ldr	r2, [r3, #24]
 8004a1e:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 8004a22:	430a      	orrs	r2, r1
 8004a24:	619a      	str	r2, [r3, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a26:	6862      	ldr	r2, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004a28:	681b      	ldr	r3, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a2a:	2a02      	cmp	r2, #2
 8004a2c:	d11d      	bne.n	8004a6a <HAL_RCC_ClockConfig+0x1ca>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004a2e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004a32:	f43f af3a 	beq.w	80048aa <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004a36:	4e28      	ldr	r6, [pc, #160]	; (8004ad8 <HAL_RCC_ClockConfig+0x238>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a38:	f241 3888 	movw	r8, #5000	; 0x1388
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004a3c:	6933      	ldr	r3, [r6, #16]
 8004a3e:	f023 0307 	bic.w	r3, r3, #7
 8004a42:	4313      	orrs	r3, r2
 8004a44:	6133      	str	r3, [r6, #16]
    tickstart = HAL_GetTick();
 8004a46:	f7fd fb3d 	bl	80020c4 <HAL_GetTick>
 8004a4a:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a4c:	6933      	ldr	r3, [r6, #16]
 8004a4e:	6862      	ldr	r2, [r4, #4]
 8004a50:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004a54:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8004a58:	f43f af6f 	beq.w	800493a <HAL_RCC_ClockConfig+0x9a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a5c:	f7fd fb32 	bl	80020c4 <HAL_GetTick>
 8004a60:	1bc0      	subs	r0, r0, r7
 8004a62:	4540      	cmp	r0, r8
 8004a64:	d9f2      	bls.n	8004a4c <HAL_RCC_ClockConfig+0x1ac>
        return HAL_TIMEOUT;
 8004a66:	2003      	movs	r0, #3
 8004a68:	e720      	b.n	80048ac <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a6a:	2a03      	cmp	r2, #3
 8004a6c:	d102      	bne.n	8004a74 <HAL_RCC_ClockConfig+0x1d4>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004a6e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004a72:	e7de      	b.n	8004a32 <HAL_RCC_ClockConfig+0x192>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004a74:	2a01      	cmp	r2, #1
 8004a76:	d102      	bne.n	8004a7e <HAL_RCC_ClockConfig+0x1de>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004a78:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004a7c:	e7d9      	b.n	8004a32 <HAL_RCC_ClockConfig+0x192>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004a7e:	f013 0f04 	tst.w	r3, #4
 8004a82:	e7d6      	b.n	8004a32 <HAL_RCC_ClockConfig+0x192>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004a84:	4914      	ldr	r1, [pc, #80]	; (8004ad8 <HAL_RCC_ClockConfig+0x238>)
 8004a86:	68e6      	ldr	r6, [r4, #12]
 8004a88:	6988      	ldr	r0, [r1, #24]
 8004a8a:	f000 000f 	and.w	r0, r0, #15
 8004a8e:	4286      	cmp	r6, r0
 8004a90:	f4bf af57 	bcs.w	8004942 <HAL_RCC_ClockConfig+0xa2>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a94:	698a      	ldr	r2, [r1, #24]
 8004a96:	f022 020f 	bic.w	r2, r2, #15
 8004a9a:	4332      	orrs	r2, r6
 8004a9c:	618a      	str	r2, [r1, #24]
 8004a9e:	e750      	b.n	8004942 <HAL_RCC_ClockConfig+0xa2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004aa0:	680a      	ldr	r2, [r1, #0]
 8004aa2:	f022 020f 	bic.w	r2, r2, #15
 8004aa6:	432a      	orrs	r2, r5
 8004aa8:	600a      	str	r2, [r1, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004aaa:	680a      	ldr	r2, [r1, #0]
 8004aac:	f002 020f 	and.w	r2, r2, #15
 8004ab0:	42aa      	cmp	r2, r5
 8004ab2:	f47f aefa 	bne.w	80048aa <HAL_RCC_ClockConfig+0xa>
 8004ab6:	e74b      	b.n	8004950 <HAL_RCC_ClockConfig+0xb0>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004ab8:	4907      	ldr	r1, [pc, #28]	; (8004ad8 <HAL_RCC_ClockConfig+0x238>)
 8004aba:	6925      	ldr	r5, [r4, #16]
 8004abc:	6988      	ldr	r0, [r1, #24]
 8004abe:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8004ac2:	4285      	cmp	r5, r0
 8004ac4:	f4bf af47 	bcs.w	8004956 <HAL_RCC_ClockConfig+0xb6>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004ac8:	698a      	ldr	r2, [r1, #24]
 8004aca:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004ace:	432a      	orrs	r2, r5
 8004ad0:	618a      	str	r2, [r1, #24]
 8004ad2:	e740      	b.n	8004956 <HAL_RCC_ClockConfig+0xb6>
 8004ad4:	52002000 	.word	0x52002000
 8004ad8:	58024400 	.word	0x58024400
 8004adc:	08015a88 	.word	0x08015a88
 8004ae0:	24000004 	.word	0x24000004
 8004ae4:	24000000 	.word	0x24000000
 8004ae8:	2400000c 	.word	0x2400000c

08004aec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004aec:	b510      	push	{r4, lr}
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004aee:	4c0c      	ldr	r4, [pc, #48]	; (8004b20 <HAL_RCC_GetHCLKFreq+0x34>)
 8004af0:	f7ff fe36 	bl	8004760 <HAL_RCC_GetSysClockFreq>
 8004af4:	490b      	ldr	r1, [pc, #44]	; (8004b24 <HAL_RCC_GetHCLKFreq+0x38>)
 8004af6:	69a3      	ldr	r3, [r4, #24]
 8004af8:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8004afc:	5cca      	ldrb	r2, [r1, r3]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004afe:	69a3      	ldr	r3, [r4, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004b00:	f002 021f 	and.w	r2, r2, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004b04:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004b08:	fa20 f202 	lsr.w	r2, r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004b0c:	5ccb      	ldrb	r3, [r1, r3]
 8004b0e:	f003 031f 	and.w	r3, r3, #31
 8004b12:	fa22 f003 	lsr.w	r0, r2, r3
 8004b16:	4b04      	ldr	r3, [pc, #16]	; (8004b28 <HAL_RCC_GetHCLKFreq+0x3c>)
 8004b18:	6018      	str	r0, [r3, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004b1a:	4b04      	ldr	r3, [pc, #16]	; (8004b2c <HAL_RCC_GetHCLKFreq+0x40>)
 8004b1c:	601a      	str	r2, [r3, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 8004b1e:	bd10      	pop	{r4, pc}
 8004b20:	58024400 	.word	0x58024400
 8004b24:	08015a88 	.word	0x08015a88
 8004b28:	24000004 	.word	0x24000004
 8004b2c:	24000000 	.word	0x24000000

08004b30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b30:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004b32:	f7ff ffdb 	bl	8004aec <HAL_RCC_GetHCLKFreq>
 8004b36:	4b05      	ldr	r3, [pc, #20]	; (8004b4c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8004b38:	4a05      	ldr	r2, [pc, #20]	; (8004b50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b3a:	69db      	ldr	r3, [r3, #28]
 8004b3c:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8004b40:	5cd3      	ldrb	r3, [r2, r3]
 8004b42:	f003 031f 	and.w	r3, r3, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004b46:	40d8      	lsrs	r0, r3
 8004b48:	bd08      	pop	{r3, pc}
 8004b4a:	bf00      	nop
 8004b4c:	58024400 	.word	0x58024400
 8004b50:	08015a88 	.word	0x08015a88

08004b54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b54:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004b56:	f7ff ffc9 	bl	8004aec <HAL_RCC_GetHCLKFreq>
 8004b5a:	4b05      	ldr	r3, [pc, #20]	; (8004b70 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8004b5c:	4a05      	ldr	r2, [pc, #20]	; (8004b74 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004b5e:	69db      	ldr	r3, [r3, #28]
 8004b60:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8004b64:	5cd3      	ldrb	r3, [r2, r3]
 8004b66:	f003 031f 	and.w	r3, r3, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004b6a:	40d8      	lsrs	r0, r3
 8004b6c:	bd08      	pop	{r3, pc}
 8004b6e:	bf00      	nop
 8004b70:	58024400 	.word	0x58024400
 8004b74:	08015a88 	.word	0x08015a88

08004b78 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004b7a:	4c3a      	ldr	r4, [pc, #232]	; (8004c64 <RCCEx_PLL2_Config+0xec>)
{
 8004b7c:	4606      	mov	r6, r0
 8004b7e:	460d      	mov	r5, r1
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004b80:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004b82:	f003 0303 	and.w	r3, r3, #3
 8004b86:	2b03      	cmp	r3, #3
 8004b88:	d069      	beq.n	8004c5e <RCCEx_PLL2_Config+0xe6>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004b8a:	6823      	ldr	r3, [r4, #0]
 8004b8c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004b90:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b92:	f7fd fa97 	bl	80020c4 <HAL_GetTick>
 8004b96:	4607      	mov	r7, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004b98:	6823      	ldr	r3, [r4, #0]
 8004b9a:	011a      	lsls	r2, r3, #4
 8004b9c:	d44b      	bmi.n	8004c36 <RCCEx_PLL2_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004b9e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004ba0:	6832      	ldr	r2, [r6, #0]
 8004ba2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004ba6:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8004baa:	62a3      	str	r3, [r4, #40]	; 0x28
 8004bac:	68b3      	ldr	r3, [r6, #8]
 8004bae:	68f2      	ldr	r2, [r6, #12]
 8004bb0:	3b01      	subs	r3, #1
 8004bb2:	3a01      	subs	r2, #1
 8004bb4:	025b      	lsls	r3, r3, #9
 8004bb6:	0412      	lsls	r2, r2, #16
 8004bb8:	b29b      	uxth	r3, r3
 8004bba:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	6872      	ldr	r2, [r6, #4]
 8004bc2:	3a01      	subs	r2, #1
 8004bc4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	6932      	ldr	r2, [r6, #16]
 8004bcc:	3a01      	subs	r2, #1
 8004bce:	0612      	lsls	r2, r2, #24
 8004bd0:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	63a3      	str	r3, [r4, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004bd8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004bda:	6972      	ldr	r2, [r6, #20]
 8004bdc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004be0:	4313      	orrs	r3, r2
 8004be2:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004be4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004be6:	69b2      	ldr	r2, [r6, #24]
 8004be8:	f023 0320 	bic.w	r3, r3, #32
 8004bec:	4313      	orrs	r3, r2
 8004bee:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004bf0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004bf2:	f023 0310 	bic.w	r3, r3, #16
 8004bf6:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004bf8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004bfa:	69f2      	ldr	r2, [r6, #28]
 8004bfc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c00:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004c04:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8004c08:	63e3      	str	r3, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004c0a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004c0c:	f043 0310 	orr.w	r3, r3, #16
 8004c10:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004c12:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 8004c14:	b9b5      	cbnz	r5, 8004c44 <RCCEx_PLL2_Config+0xcc>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004c16:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004c1a:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004c1c:	4c11      	ldr	r4, [pc, #68]	; (8004c64 <RCCEx_PLL2_Config+0xec>)
 8004c1e:	6823      	ldr	r3, [r4, #0]
 8004c20:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004c24:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c26:	f7fd fa4d 	bl	80020c4 <HAL_GetTick>
 8004c2a:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004c2c:	6823      	ldr	r3, [r4, #0]
 8004c2e:	011b      	lsls	r3, r3, #4
 8004c30:	d50f      	bpl.n	8004c52 <RCCEx_PLL2_Config+0xda>
    }

  }


  return status;
 8004c32:	2000      	movs	r0, #0
 8004c34:	e005      	b.n	8004c42 <RCCEx_PLL2_Config+0xca>
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004c36:	f7fd fa45 	bl	80020c4 <HAL_GetTick>
 8004c3a:	1bc0      	subs	r0, r0, r7
 8004c3c:	2802      	cmp	r0, #2
 8004c3e:	d9ab      	bls.n	8004b98 <RCCEx_PLL2_Config+0x20>
        return HAL_TIMEOUT;
 8004c40:	2003      	movs	r0, #3
}
 8004c42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (Divider == DIVIDER_Q_UPDATE)
 8004c44:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004c46:	bf0c      	ite	eq
 8004c48:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004c4c:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 8004c50:	e7e3      	b.n	8004c1a <RCCEx_PLL2_Config+0xa2>
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004c52:	f7fd fa37 	bl	80020c4 <HAL_GetTick>
 8004c56:	1b40      	subs	r0, r0, r5
 8004c58:	2802      	cmp	r0, #2
 8004c5a:	d9e7      	bls.n	8004c2c <RCCEx_PLL2_Config+0xb4>
 8004c5c:	e7f0      	b.n	8004c40 <RCCEx_PLL2_Config+0xc8>
    return HAL_ERROR;
 8004c5e:	2001      	movs	r0, #1
 8004c60:	e7ef      	b.n	8004c42 <RCCEx_PLL2_Config+0xca>
 8004c62:	bf00      	nop
 8004c64:	58024400 	.word	0x58024400

08004c68 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004c6a:	4c3a      	ldr	r4, [pc, #232]	; (8004d54 <RCCEx_PLL3_Config+0xec>)
{
 8004c6c:	4606      	mov	r6, r0
 8004c6e:	460d      	mov	r5, r1
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004c70:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004c72:	f003 0303 	and.w	r3, r3, #3
 8004c76:	2b03      	cmp	r3, #3
 8004c78:	d069      	beq.n	8004d4e <RCCEx_PLL3_Config+0xe6>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004c7a:	6823      	ldr	r3, [r4, #0]
 8004c7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c80:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c82:	f7fd fa1f 	bl	80020c4 <HAL_GetTick>
 8004c86:	4607      	mov	r7, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004c88:	6823      	ldr	r3, [r4, #0]
 8004c8a:	009a      	lsls	r2, r3, #2
 8004c8c:	d44b      	bmi.n	8004d26 <RCCEx_PLL3_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004c8e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004c90:	6832      	ldr	r2, [r6, #0]
 8004c92:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8004c96:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8004c9a:	62a3      	str	r3, [r4, #40]	; 0x28
 8004c9c:	68b3      	ldr	r3, [r6, #8]
 8004c9e:	68f2      	ldr	r2, [r6, #12]
 8004ca0:	3b01      	subs	r3, #1
 8004ca2:	3a01      	subs	r2, #1
 8004ca4:	025b      	lsls	r3, r3, #9
 8004ca6:	0412      	lsls	r2, r2, #16
 8004ca8:	b29b      	uxth	r3, r3
 8004caa:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	6872      	ldr	r2, [r6, #4]
 8004cb2:	3a01      	subs	r2, #1
 8004cb4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	6932      	ldr	r2, [r6, #16]
 8004cbc:	3a01      	subs	r2, #1
 8004cbe:	0612      	lsls	r2, r2, #24
 8004cc0:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	6423      	str	r3, [r4, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004cc8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004cca:	6972      	ldr	r2, [r6, #20]
 8004ccc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004cd4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004cd6:	69b2      	ldr	r2, [r6, #24]
 8004cd8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004ce0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004ce2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ce6:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004ce8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004cea:	69f2      	ldr	r2, [r6, #28]
 8004cec:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004cf0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004cf4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8004cf8:	6463      	str	r3, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004cfa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004cfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d00:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004d02:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 8004d04:	b9b5      	cbnz	r5, 8004d34 <RCCEx_PLL3_Config+0xcc>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004d06:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004d0a:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004d0c:	4c11      	ldr	r4, [pc, #68]	; (8004d54 <RCCEx_PLL3_Config+0xec>)
 8004d0e:	6823      	ldr	r3, [r4, #0]
 8004d10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d14:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d16:	f7fd f9d5 	bl	80020c4 <HAL_GetTick>
 8004d1a:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004d1c:	6823      	ldr	r3, [r4, #0]
 8004d1e:	009b      	lsls	r3, r3, #2
 8004d20:	d50f      	bpl.n	8004d42 <RCCEx_PLL3_Config+0xda>
    }

  }


  return status;
 8004d22:	2000      	movs	r0, #0
 8004d24:	e005      	b.n	8004d32 <RCCEx_PLL3_Config+0xca>
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004d26:	f7fd f9cd 	bl	80020c4 <HAL_GetTick>
 8004d2a:	1bc0      	subs	r0, r0, r7
 8004d2c:	2802      	cmp	r0, #2
 8004d2e:	d9ab      	bls.n	8004c88 <RCCEx_PLL3_Config+0x20>
        return HAL_TIMEOUT;
 8004d30:	2003      	movs	r0, #3
}
 8004d32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (Divider == DIVIDER_Q_UPDATE)
 8004d34:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004d36:	bf0c      	ite	eq
 8004d38:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004d3c:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 8004d40:	e7e3      	b.n	8004d0a <RCCEx_PLL3_Config+0xa2>
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004d42:	f7fd f9bf 	bl	80020c4 <HAL_GetTick>
 8004d46:	1b40      	subs	r0, r0, r5
 8004d48:	2802      	cmp	r0, #2
 8004d4a:	d9e7      	bls.n	8004d1c <RCCEx_PLL3_Config+0xb4>
 8004d4c:	e7f0      	b.n	8004d30 <RCCEx_PLL3_Config+0xc8>
    return HAL_ERROR;
 8004d4e:	2001      	movs	r0, #1
 8004d50:	e7ef      	b.n	8004d32 <RCCEx_PLL3_Config+0xca>
 8004d52:	bf00      	nop
 8004d54:	58024400 	.word	0x58024400

08004d58 <HAL_RCCEx_PeriphCLKConfig>:
{
 8004d58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004d5c:	6803      	ldr	r3, [r0, #0]
{
 8004d5e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004d60:	0118      	lsls	r0, r3, #4
 8004d62:	f003 6600 	and.w	r6, r3, #134217728	; 0x8000000
 8004d66:	d509      	bpl.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x24>
    switch (PeriphClkInit->SpdifrxClockSelection)
 8004d68:	6eab      	ldr	r3, [r5, #104]	; 0x68
 8004d6a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004d6e:	d02f      	beq.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8004d70:	d813      	bhi.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x42>
 8004d72:	b1f3      	cbz	r3, 8004db2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
 8004d74:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d78:	d021      	beq.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0x66>
 8004d7a:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004d7c:	682b      	ldr	r3, [r5, #0]
 8004d7e:	05d9      	lsls	r1, r3, #23
 8004d80:	f140 80ed 	bpl.w	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x206>
    switch (PeriphClkInit->Sai1ClockSelection)
 8004d84:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8004d86:	2b04      	cmp	r3, #4
 8004d88:	f200 80e8 	bhi.w	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x204>
 8004d8c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004d90:	002d0026 	.word	0x002d0026
 8004d94:	002b00e0 	.word	0x002b00e0
 8004d98:	002b      	.short	0x002b
    switch (PeriphClkInit->SpdifrxClockSelection)
 8004d9a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004d9e:	d1ec      	bne.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x22>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004da0:	4aa9      	ldr	r2, [pc, #676]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004da2:	2600      	movs	r6, #0
 8004da4:	6ea9      	ldr	r1, [r5, #104]	; 0x68
 8004da6:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8004da8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004dac:	430b      	orrs	r3, r1
 8004dae:	6513      	str	r3, [r2, #80]	; 0x50
 8004db0:	e7e4      	b.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x24>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004db2:	4aa5      	ldr	r2, [pc, #660]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004db4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004db6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004dba:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 8004dbc:	e7f0      	b.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x48>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004dbe:	2102      	movs	r1, #2
 8004dc0:	f105 0008 	add.w	r0, r5, #8
 8004dc4:	f7ff fed8 	bl	8004b78 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004dc8:	4606      	mov	r6, r0
    if (ret == HAL_OK)
 8004dca:	2800      	cmp	r0, #0
 8004dcc:	d1d6      	bne.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x24>
 8004dce:	e7e7      	b.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x48>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004dd0:	2102      	movs	r1, #2
 8004dd2:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8004dd6:	f7ff ff47 	bl	8004c68 <RCCEx_PLL3_Config>
 8004dda:	e7f5      	b.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x70>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ddc:	4a9a      	ldr	r2, [pc, #616]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004dde:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004de0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004de4:	62d3      	str	r3, [r2, #44]	; 0x2c
    switch (PeriphClkInit->Sai1ClockSelection)
 8004de6:	4634      	mov	r4, r6
 8004de8:	e005      	b.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004dea:	2100      	movs	r1, #0
 8004dec:	f105 0008 	add.w	r0, r5, #8
 8004df0:	f7ff fec2 	bl	8004b78 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004df4:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 8004df6:	2c00      	cmp	r4, #0
 8004df8:	f040 80b3 	bne.w	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004dfc:	4a92      	ldr	r2, [pc, #584]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004dfe:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8004e00:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8004e02:	f023 0307 	bic.w	r3, r3, #7
 8004e06:	430b      	orrs	r3, r1
 8004e08:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004e0a:	682b      	ldr	r3, [r5, #0]
 8004e0c:	059a      	lsls	r2, r3, #22
 8004e0e:	d50d      	bpl.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0xd4>
    switch (PeriphClkInit->Sai23ClockSelection)
 8004e10:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 8004e12:	2b80      	cmp	r3, #128	; 0x80
 8004e14:	f000 80c3 	beq.w	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x246>
 8004e18:	f200 80a5 	bhi.w	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x20e>
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	f000 80b1 	beq.w	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x22c>
 8004e22:	2b40      	cmp	r3, #64	; 0x40
 8004e24:	f000 80b4 	beq.w	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8004e28:	2601      	movs	r6, #1
 8004e2a:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004e2c:	682b      	ldr	r3, [r5, #0]
 8004e2e:	055b      	lsls	r3, r3, #21
 8004e30:	d510      	bpl.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0xfc>
    switch (PeriphClkInit->Sai4AClockSelection)
 8004e32:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
 8004e36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e3a:	f000 80d6 	beq.w	8004fea <HAL_RCCEx_PeriphCLKConfig+0x292>
 8004e3e:	f200 80b6 	bhi.w	8004fae <HAL_RCCEx_PeriphCLKConfig+0x256>
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	f000 80c4 	beq.w	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x278>
 8004e48:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e4c:	f000 80c6 	beq.w	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x284>
 8004e50:	2601      	movs	r6, #1
 8004e52:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004e54:	682b      	ldr	r3, [r5, #0]
 8004e56:	051f      	lsls	r7, r3, #20
 8004e58:	d510      	bpl.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x124>
    switch (PeriphClkInit->Sai4BClockSelection)
 8004e5a:	f8d5 30ac 	ldr.w	r3, [r5, #172]	; 0xac
 8004e5e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004e62:	f000 80e8 	beq.w	8005036 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8004e66:	f200 80c8 	bhi.w	8004ffa <HAL_RCCEx_PeriphCLKConfig+0x2a2>
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	f000 80d6 	beq.w	800501c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
 8004e70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004e74:	f000 80d8 	beq.w	8005028 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8004e78:	2601      	movs	r6, #1
 8004e7a:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004e7c:	682b      	ldr	r3, [r5, #0]
 8004e7e:	0198      	lsls	r0, r3, #6
 8004e80:	d50d      	bpl.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x146>
    switch (PeriphClkInit->QspiClockSelection)
 8004e82:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8004e84:	2b20      	cmp	r3, #32
 8004e86:	f000 80f3 	beq.w	8005070 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8004e8a:	f200 80df 	bhi.w	800504c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	f000 80df 	beq.w	8005052 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
 8004e94:	2b10      	cmp	r3, #16
 8004e96:	f000 80e5 	beq.w	8005064 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8004e9a:	2601      	movs	r6, #1
 8004e9c:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004e9e:	682b      	ldr	r3, [r5, #0]
 8004ea0:	04d9      	lsls	r1, r3, #19
 8004ea2:	d50f      	bpl.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    switch (PeriphClkInit->Spi123ClockSelection)
 8004ea4:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8004ea6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004eaa:	f000 8107 	beq.w	80050bc <HAL_RCCEx_PeriphCLKConfig+0x364>
 8004eae:	f200 80e8 	bhi.w	8005082 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	f000 80f5 	beq.w	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004eb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ebc:	f000 80f7 	beq.w	80050ae <HAL_RCCEx_PeriphCLKConfig+0x356>
 8004ec0:	2601      	movs	r6, #1
 8004ec2:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004ec4:	682b      	ldr	r3, [r5, #0]
 8004ec6:	049a      	lsls	r2, r3, #18
 8004ec8:	d50f      	bpl.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x192>
    switch (PeriphClkInit->Spi45ClockSelection)
 8004eca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004ecc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ed0:	f000 8115 	beq.w	80050fe <HAL_RCCEx_PeriphCLKConfig+0x3a6>
 8004ed4:	f200 80fa 	bhi.w	80050cc <HAL_RCCEx_PeriphCLKConfig+0x374>
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	f000 8100 	beq.w	80050de <HAL_RCCEx_PeriphCLKConfig+0x386>
 8004ede:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ee2:	f000 8105 	beq.w	80050f0 <HAL_RCCEx_PeriphCLKConfig+0x398>
 8004ee6:	2601      	movs	r6, #1
 8004ee8:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004eea:	682b      	ldr	r3, [r5, #0]
 8004eec:	045b      	lsls	r3, r3, #17
 8004eee:	d510      	bpl.n	8004f12 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    switch (PeriphClkInit->Spi6ClockSelection)
 8004ef0:	f8d5 30b0 	ldr.w	r3, [r5, #176]	; 0xb0
 8004ef4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ef8:	f000 8123 	beq.w	8005142 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8004efc:	f200 8107 	bhi.w	800510e <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	f000 810d 	beq.w	8005120 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
 8004f06:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f0a:	f000 8113 	beq.w	8005134 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
 8004f0e:	2601      	movs	r6, #1
 8004f10:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004f12:	682b      	ldr	r3, [r5, #0]
 8004f14:	041f      	lsls	r7, r3, #16
 8004f16:	d50d      	bpl.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    switch (PeriphClkInit->FdcanClockSelection)
 8004f18:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8004f1a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f1e:	f000 8118 	beq.w	8005152 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8004f22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f26:	f000 8122 	beq.w	800516e <HAL_RCCEx_PeriphCLKConfig+0x416>
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	f000 8116 	beq.w	800515c <HAL_RCCEx_PeriphCLKConfig+0x404>
 8004f30:	2601      	movs	r6, #1
 8004f32:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004f34:	682b      	ldr	r3, [r5, #0]
 8004f36:	01d8      	lsls	r0, r3, #7
 8004f38:	f140 8130 	bpl.w	800519c <HAL_RCCEx_PeriphCLKConfig+0x444>
    switch (PeriphClkInit->FmcClockSelection)
 8004f3c:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8004f3e:	2b03      	cmp	r3, #3
 8004f40:	f200 8171 	bhi.w	8005226 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8004f44:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004f48:	011c0121 	.word	0x011c0121
 8004f4c:	01210168 	.word	0x01210168
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004f50:	2100      	movs	r1, #0
 8004f52:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8004f56:	f7ff fe87 	bl	8004c68 <RCCEx_PLL3_Config>
 8004f5a:	e74b      	b.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    switch (PeriphClkInit->Sai1ClockSelection)
 8004f5c:	2601      	movs	r6, #1
 8004f5e:	4634      	mov	r4, r6
 8004f60:	e753      	b.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0xb2>
 8004f62:	4626      	mov	r6, r4
 8004f64:	e751      	b.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0xb2>
    switch (PeriphClkInit->Sai23ClockSelection)
 8004f66:	2bc0      	cmp	r3, #192	; 0xc0
 8004f68:	d003      	beq.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8004f6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f6e:	f47f af5b 	bne.w	8004e28 <HAL_RCCEx_PeriphCLKConfig+0xd0>
    if (ret == HAL_OK)
 8004f72:	b9d4      	cbnz	r4, 8004faa <HAL_RCCEx_PeriphCLKConfig+0x252>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004f74:	4a34      	ldr	r2, [pc, #208]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004f76:	6de9      	ldr	r1, [r5, #92]	; 0x5c
 8004f78:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8004f7a:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
 8004f7e:	430b      	orrs	r3, r1
 8004f80:	6513      	str	r3, [r2, #80]	; 0x50
 8004f82:	e753      	b.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0xd4>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f84:	4a30      	ldr	r2, [pc, #192]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004f86:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004f88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f8c:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 8004f8e:	e7f0      	b.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0x21a>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004f90:	2100      	movs	r1, #0
 8004f92:	f105 0008 	add.w	r0, r5, #8
 8004f96:	f7ff fdef 	bl	8004b78 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004f9a:	4604      	mov	r4, r0
        break;
 8004f9c:	e7e9      	b.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0x21a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004f9e:	2100      	movs	r1, #0
 8004fa0:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8004fa4:	f7ff fe60 	bl	8004c68 <RCCEx_PLL3_Config>
 8004fa8:	e7f7      	b.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0x242>
 8004faa:	4626      	mov	r6, r4
 8004fac:	e73e      	b.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0xd4>
    switch (PeriphClkInit->Sai4AClockSelection)
 8004fae:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004fb2:	d003      	beq.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x264>
 8004fb4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004fb8:	f47f af4a 	bne.w	8004e50 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    if (ret == HAL_OK)
 8004fbc:	b9dc      	cbnz	r4, 8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004fbe:	4a22      	ldr	r2, [pc, #136]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004fc0:	f8d5 10a8 	ldr.w	r1, [r5, #168]	; 0xa8
 8004fc4:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8004fc6:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 8004fca:	430b      	orrs	r3, r1
 8004fcc:	6593      	str	r3, [r2, #88]	; 0x58
 8004fce:	e741      	b.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0xfc>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004fd0:	4a1d      	ldr	r2, [pc, #116]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004fd2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004fd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004fd8:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 8004fda:	e7ef      	b.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x264>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004fdc:	2100      	movs	r1, #0
 8004fde:	f105 0008 	add.w	r0, r5, #8
 8004fe2:	f7ff fdc9 	bl	8004b78 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004fe6:	4604      	mov	r4, r0
        break;
 8004fe8:	e7e8      	b.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x264>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004fea:	2100      	movs	r1, #0
 8004fec:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8004ff0:	f7ff fe3a 	bl	8004c68 <RCCEx_PLL3_Config>
 8004ff4:	e7f7      	b.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
 8004ff6:	4626      	mov	r6, r4
 8004ff8:	e72c      	b.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0xfc>
    switch (PeriphClkInit->Sai4BClockSelection)
 8004ffa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004ffe:	d003      	beq.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005000:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005004:	f47f af38 	bne.w	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x120>
    if (ret == HAL_OK)
 8005008:	b9dc      	cbnz	r4, 8005042 <HAL_RCCEx_PeriphCLKConfig+0x2ea>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800500a:	4a0f      	ldr	r2, [pc, #60]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800500c:	f8d5 10ac 	ldr.w	r1, [r5, #172]	; 0xac
 8005010:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8005012:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8005016:	430b      	orrs	r3, r1
 8005018:	6593      	str	r3, [r2, #88]	; 0x58
 800501a:	e72f      	b.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x124>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800501c:	4a0a      	ldr	r2, [pc, #40]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800501e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005020:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005024:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 8005026:	e7ef      	b.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005028:	2100      	movs	r1, #0
 800502a:	f105 0008 	add.w	r0, r5, #8
 800502e:	f7ff fda3 	bl	8004b78 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005032:	4604      	mov	r4, r0
        break;
 8005034:	e7e8      	b.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005036:	2100      	movs	r1, #0
 8005038:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800503c:	f7ff fe14 	bl	8004c68 <RCCEx_PLL3_Config>
 8005040:	e7f7      	b.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8005042:	4626      	mov	r6, r4
 8005044:	e71a      	b.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x124>
 8005046:	bf00      	nop
 8005048:	58024400 	.word	0x58024400
    switch (PeriphClkInit->QspiClockSelection)
 800504c:	2b30      	cmp	r3, #48	; 0x30
 800504e:	f47f af24 	bne.w	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x142>
    if (ret == HAL_OK)
 8005052:	b9a4      	cbnz	r4, 800507e <HAL_RCCEx_PeriphCLKConfig+0x326>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005054:	4aa0      	ldr	r2, [pc, #640]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 8005056:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 8005058:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800505a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800505e:	430b      	orrs	r3, r1
 8005060:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005062:	e71c      	b.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x146>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005064:	4a9c      	ldr	r2, [pc, #624]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 8005066:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005068:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800506c:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 800506e:	e7f0      	b.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005070:	2102      	movs	r1, #2
 8005072:	f105 0008 	add.w	r0, r5, #8
 8005076:	f7ff fd7f 	bl	8004b78 <RCCEx_PLL2_Config>
 800507a:	4604      	mov	r4, r0
        break;
 800507c:	e7e9      	b.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
 800507e:	4626      	mov	r6, r4
 8005080:	e70d      	b.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x146>
    switch (PeriphClkInit->Spi123ClockSelection)
 8005082:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005086:	d003      	beq.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x338>
 8005088:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800508c:	f47f af18 	bne.w	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x168>
    if (ret == HAL_OK)
 8005090:	b9d4      	cbnz	r4, 80050c8 <HAL_RCCEx_PeriphCLKConfig+0x370>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005092:	4a91      	ldr	r2, [pc, #580]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 8005094:	6e29      	ldr	r1, [r5, #96]	; 0x60
 8005096:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8005098:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800509c:	430b      	orrs	r3, r1
 800509e:	6513      	str	r3, [r2, #80]	; 0x50
 80050a0:	e710      	b.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050a2:	4a8d      	ldr	r2, [pc, #564]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 80050a4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80050a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050aa:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 80050ac:	e7f0      	b.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x338>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80050ae:	2100      	movs	r1, #0
 80050b0:	f105 0008 	add.w	r0, r5, #8
 80050b4:	f7ff fd60 	bl	8004b78 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80050b8:	4604      	mov	r4, r0
        break;
 80050ba:	e7e9      	b.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x338>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80050bc:	2100      	movs	r1, #0
 80050be:	f105 0028 	add.w	r0, r5, #40	; 0x28
 80050c2:	f7ff fdd1 	bl	8004c68 <RCCEx_PLL3_Config>
 80050c6:	e7f7      	b.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80050c8:	4626      	mov	r6, r4
 80050ca:	e6fb      	b.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    switch (PeriphClkInit->Spi45ClockSelection)
 80050cc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80050d0:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 80050d4:	d003      	beq.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x386>
 80050d6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80050da:	f47f af04 	bne.w	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x18e>
    if (ret == HAL_OK)
 80050de:	b9a4      	cbnz	r4, 800510a <HAL_RCCEx_PeriphCLKConfig+0x3b2>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80050e0:	4a7d      	ldr	r2, [pc, #500]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 80050e2:	6e69      	ldr	r1, [r5, #100]	; 0x64
 80050e4:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80050e6:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 80050ea:	430b      	orrs	r3, r1
 80050ec:	6513      	str	r3, [r2, #80]	; 0x50
 80050ee:	e6fc      	b.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x192>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80050f0:	2101      	movs	r1, #1
 80050f2:	f105 0008 	add.w	r0, r5, #8
 80050f6:	f7ff fd3f 	bl	8004b78 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80050fa:	4604      	mov	r4, r0
        break;
 80050fc:	e7ef      	b.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x386>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80050fe:	2101      	movs	r1, #1
 8005100:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8005104:	f7ff fdb0 	bl	8004c68 <RCCEx_PLL3_Config>
 8005108:	e7f7      	b.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x3a2>
 800510a:	4626      	mov	r6, r4
 800510c:	e6ed      	b.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x192>
    switch (PeriphClkInit->Spi6ClockSelection)
 800510e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005112:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8005116:	d003      	beq.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
 8005118:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800511c:	f47f aef7 	bne.w	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    if (ret == HAL_OK)
 8005120:	b9ac      	cbnz	r4, 800514e <HAL_RCCEx_PeriphCLKConfig+0x3f6>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005122:	4a6d      	ldr	r2, [pc, #436]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 8005124:	f8d5 10b0 	ldr.w	r1, [r5, #176]	; 0xb0
 8005128:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800512a:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 800512e:	430b      	orrs	r3, r1
 8005130:	6593      	str	r3, [r2, #88]	; 0x58
 8005132:	e6ee      	b.n	8004f12 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005134:	2101      	movs	r1, #1
 8005136:	f105 0008 	add.w	r0, r5, #8
 800513a:	f7ff fd1d 	bl	8004b78 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800513e:	4604      	mov	r4, r0
        break;
 8005140:	e7ee      	b.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005142:	2101      	movs	r1, #1
 8005144:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8005148:	f7ff fd8e 	bl	8004c68 <RCCEx_PLL3_Config>
 800514c:	e7f7      	b.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 800514e:	4626      	mov	r6, r4
 8005150:	e6df      	b.n	8004f12 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005152:	4a61      	ldr	r2, [pc, #388]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 8005154:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005156:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800515a:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 800515c:	b974      	cbnz	r4, 800517c <HAL_RCCEx_PeriphCLKConfig+0x424>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800515e:	4a5e      	ldr	r2, [pc, #376]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 8005160:	6f29      	ldr	r1, [r5, #112]	; 0x70
 8005162:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8005164:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8005168:	430b      	orrs	r3, r1
 800516a:	6513      	str	r3, [r2, #80]	; 0x50
 800516c:	e6e2      	b.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800516e:	2101      	movs	r1, #1
 8005170:	f105 0008 	add.w	r0, r5, #8
 8005174:	f7ff fd00 	bl	8004b78 <RCCEx_PLL2_Config>
 8005178:	4604      	mov	r4, r0
        break;
 800517a:	e7ef      	b.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x404>
 800517c:	4626      	mov	r6, r4
 800517e:	e6d9      	b.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005180:	4a55      	ldr	r2, [pc, #340]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 8005182:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005184:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005188:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 800518a:	2c00      	cmp	r4, #0
 800518c:	d14e      	bne.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800518e:	4a52      	ldr	r2, [pc, #328]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 8005190:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 8005192:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8005194:	f023 0303 	bic.w	r3, r3, #3
 8005198:	430b      	orrs	r3, r1
 800519a:	64d3      	str	r3, [r2, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800519c:	682b      	ldr	r3, [r5, #0]
 800519e:	0259      	lsls	r1, r3, #9
 80051a0:	d54e      	bpl.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80051a2:	4f4e      	ldr	r7, [pc, #312]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x584>)
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051aa:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 80051ac:	f7fc ff8a 	bl	80020c4 <HAL_GetTick>
 80051b0:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	05da      	lsls	r2, r3, #23
 80051b6:	d53b      	bpl.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    if (ret == HAL_OK)
 80051b8:	2c00      	cmp	r4, #0
 80051ba:	d16d      	bne.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x540>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80051bc:	4b46      	ldr	r3, [pc, #280]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 80051be:	f8d5 00b4 	ldr.w	r0, [r5, #180]	; 0xb4
 80051c2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80051c4:	4042      	eors	r2, r0
 80051c6:	f412 7f40 	tst.w	r2, #768	; 0x300
 80051ca:	d00b      	beq.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80051cc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 80051ce:	6f19      	ldr	r1, [r3, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80051d0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 80051d4:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 80051d8:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80051da:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80051dc:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80051e0:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
 80051e2:	671a      	str	r2, [r3, #112]	; 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80051e4:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 80051e8:	d041      	beq.n	800526e <HAL_RCCEx_PeriphCLKConfig+0x516>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80051ea:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
 80051ee:	493a      	ldr	r1, [pc, #232]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 80051f0:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80051f4:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80051f8:	d14a      	bne.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0x538>
 80051fa:	6908      	ldr	r0, [r1, #16]
 80051fc:	4a38      	ldr	r2, [pc, #224]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 80051fe:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
 8005202:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 8005206:	4302      	orrs	r2, r0
 8005208:	610a      	str	r2, [r1, #16]
 800520a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800520e:	4a32      	ldr	r2, [pc, #200]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 8005210:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8005212:	430b      	orrs	r3, r1
 8005214:	6713      	str	r3, [r2, #112]	; 0x70
 8005216:	e013      	b.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005218:	2102      	movs	r1, #2
 800521a:	f105 0008 	add.w	r0, r5, #8
 800521e:	f7ff fcab 	bl	8004b78 <RCCEx_PLL2_Config>
 8005222:	4604      	mov	r4, r0
        break;
 8005224:	e7b1      	b.n	800518a <HAL_RCCEx_PeriphCLKConfig+0x432>
    switch (PeriphClkInit->FmcClockSelection)
 8005226:	2601      	movs	r6, #1
 8005228:	4634      	mov	r4, r6
 800522a:	e7b7      	b.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x444>
 800522c:	4626      	mov	r6, r4
 800522e:	e7b5      	b.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x444>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005230:	f7fc ff48 	bl	80020c4 <HAL_GetTick>
 8005234:	eba0 0008 	sub.w	r0, r0, r8
 8005238:	2864      	cmp	r0, #100	; 0x64
 800523a:	d9ba      	bls.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x45a>
        ret = HAL_TIMEOUT;
 800523c:	2603      	movs	r6, #3
 800523e:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005240:	682b      	ldr	r3, [r5, #0]
 8005242:	07d8      	lsls	r0, r3, #31
 8005244:	d508      	bpl.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0x500>
    switch (PeriphClkInit->Usart16ClockSelection)
 8005246:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 8005248:	2b10      	cmp	r3, #16
 800524a:	d03d      	beq.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0x570>
 800524c:	d826      	bhi.n	800529c <HAL_RCCEx_PeriphCLKConfig+0x544>
 800524e:	b35b      	cbz	r3, 80052a8 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8005250:	2b08      	cmp	r3, #8
 8005252:	d032      	beq.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0x562>
 8005254:	2601      	movs	r6, #1
 8005256:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005258:	682b      	ldr	r3, [r5, #0]
 800525a:	0799      	lsls	r1, r3, #30
 800525c:	d550      	bpl.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
    switch (PeriphClkInit->Usart234578ClockSelection)
 800525e:	6fab      	ldr	r3, [r5, #120]	; 0x78
 8005260:	2b05      	cmp	r3, #5
 8005262:	d863      	bhi.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005264:	e8df f003 	tbb	[pc, r3]
 8005268:	445c3e44 	.word	0x445c3e44
 800526c:	4444      	.short	0x4444
        tickstart = HAL_GetTick();
 800526e:	f7fc ff29 	bl	80020c4 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005272:	f8df 8064 	ldr.w	r8, [pc, #100]	; 80052d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
        tickstart = HAL_GetTick();
 8005276:	4607      	mov	r7, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005278:	f241 3988 	movw	r9, #5000	; 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800527c:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 8005280:	079b      	lsls	r3, r3, #30
 8005282:	d4b2      	bmi.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0x492>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005284:	f7fc ff1e 	bl	80020c4 <HAL_GetTick>
 8005288:	1bc0      	subs	r0, r0, r7
 800528a:	4548      	cmp	r0, r9
 800528c:	d9f6      	bls.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x524>
 800528e:	e7d5      	b.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005290:	690a      	ldr	r2, [r1, #16]
 8005292:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8005296:	e7b7      	b.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8005298:	4626      	mov	r6, r4
 800529a:	e7d1      	b.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    switch (PeriphClkInit->Usart16ClockSelection)
 800529c:	f023 0208 	bic.w	r2, r3, #8
 80052a0:	2a20      	cmp	r2, #32
 80052a2:	d001      	beq.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0x550>
 80052a4:	2b18      	cmp	r3, #24
 80052a6:	d1d5      	bne.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    if (ret == HAL_OK)
 80052a8:	b9a4      	cbnz	r4, 80052d4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80052aa:	4a0b      	ldr	r2, [pc, #44]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 80052ac:	6fe9      	ldr	r1, [r5, #124]	; 0x7c
 80052ae:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80052b0:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 80052b4:	430b      	orrs	r3, r1
 80052b6:	6553      	str	r3, [r2, #84]	; 0x54
 80052b8:	e7ce      	b.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0x500>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80052ba:	2101      	movs	r1, #1
 80052bc:	f105 0008 	add.w	r0, r5, #8
 80052c0:	f7ff fc5a 	bl	8004b78 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80052c4:	4604      	mov	r4, r0
        break;
 80052c6:	e7ef      	b.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0x550>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80052c8:	2101      	movs	r1, #1
 80052ca:	f105 0028 	add.w	r0, r5, #40	; 0x28
 80052ce:	f7ff fccb 	bl	8004c68 <RCCEx_PLL3_Config>
 80052d2:	e7f7      	b.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x56c>
 80052d4:	4626      	mov	r6, r4
 80052d6:	e7bf      	b.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0x500>
 80052d8:	58024400 	.word	0x58024400
 80052dc:	58024800 	.word	0x58024800
 80052e0:	00ffffcf 	.word	0x00ffffcf
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80052e4:	2101      	movs	r1, #1
 80052e6:	f105 0008 	add.w	r0, r5, #8
 80052ea:	f7ff fc45 	bl	8004b78 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80052ee:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 80052f0:	b9fc      	cbnz	r4, 8005332 <HAL_RCCEx_PeriphCLKConfig+0x5da>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80052f2:	4a11      	ldr	r2, [pc, #68]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x5e0>)
 80052f4:	6fa9      	ldr	r1, [r5, #120]	; 0x78
 80052f6:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80052f8:	f023 0307 	bic.w	r3, r3, #7
 80052fc:	430b      	orrs	r3, r1
 80052fe:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005300:	682b      	ldr	r3, [r5, #0]
 8005302:	075a      	lsls	r2, r3, #29
 8005304:	d52b      	bpl.n	800535e <HAL_RCCEx_PeriphCLKConfig+0x606>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005306:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 800530a:	2b05      	cmp	r3, #5
 800530c:	f200 817c 	bhi.w	8005608 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
 8005310:	e8df f013 	tbh	[pc, r3, lsl #1]
 8005314:	0014001a 	.word	0x0014001a
 8005318:	001a0174 	.word	0x001a0174
 800531c:	001a001a 	.word	0x001a001a
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005320:	2101      	movs	r1, #1
 8005322:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8005326:	f7ff fc9f 	bl	8004c68 <RCCEx_PLL3_Config>
 800532a:	e7e0      	b.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0x596>
    switch (PeriphClkInit->Usart234578ClockSelection)
 800532c:	2601      	movs	r6, #1
 800532e:	4634      	mov	r4, r6
 8005330:	e7e6      	b.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
 8005332:	4626      	mov	r6, r4
 8005334:	e7e4      	b.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
 8005336:	bf00      	nop
 8005338:	58024400 	.word	0x58024400
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800533c:	2101      	movs	r1, #1
 800533e:	f105 0008 	add.w	r0, r5, #8
 8005342:	f7ff fc19 	bl	8004b78 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005346:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 8005348:	2c00      	cmp	r4, #0
 800534a:	f040 8160 	bne.w	800560e <HAL_RCCEx_PeriphCLKConfig+0x8b6>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800534e:	4aaa      	ldr	r2, [pc, #680]	; (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x8a0>)
 8005350:	f8d5 1094 	ldr.w	r1, [r5, #148]	; 0x94
 8005354:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8005356:	f023 0307 	bic.w	r3, r3, #7
 800535a:	430b      	orrs	r3, r1
 800535c:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800535e:	682b      	ldr	r3, [r5, #0]
 8005360:	069b      	lsls	r3, r3, #26
 8005362:	d510      	bpl.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005364:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8005368:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800536c:	f000 816b 	beq.w	8005646 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8005370:	f200 814f 	bhi.w	8005612 <HAL_RCCEx_PeriphCLKConfig+0x8ba>
 8005374:	2b00      	cmp	r3, #0
 8005376:	f000 8155 	beq.w	8005624 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
 800537a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800537e:	f000 815b 	beq.w	8005638 <HAL_RCCEx_PeriphCLKConfig+0x8e0>
 8005382:	2601      	movs	r6, #1
 8005384:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005386:	682b      	ldr	r3, [r5, #0]
 8005388:	065f      	lsls	r7, r3, #25
 800538a:	d510      	bpl.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0x656>
    switch (PeriphClkInit->Lptim2ClockSelection)
 800538c:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
 8005390:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005394:	f000 8179 	beq.w	800568a <HAL_RCCEx_PeriphCLKConfig+0x932>
 8005398:	f200 815d 	bhi.w	8005656 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 800539c:	2b00      	cmp	r3, #0
 800539e:	f000 8163 	beq.w	8005668 <HAL_RCCEx_PeriphCLKConfig+0x910>
 80053a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053a6:	f000 8169 	beq.w	800567c <HAL_RCCEx_PeriphCLKConfig+0x924>
 80053aa:	2601      	movs	r6, #1
 80053ac:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80053ae:	682b      	ldr	r3, [r5, #0]
 80053b0:	0618      	lsls	r0, r3, #24
 80053b2:	d510      	bpl.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    switch (PeriphClkInit->Lptim345ClockSelection)
 80053b4:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
 80053b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80053bc:	f000 8187 	beq.w	80056ce <HAL_RCCEx_PeriphCLKConfig+0x976>
 80053c0:	f200 816b 	bhi.w	800569a <HAL_RCCEx_PeriphCLKConfig+0x942>
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	f000 8171 	beq.w	80056ac <HAL_RCCEx_PeriphCLKConfig+0x954>
 80053ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053ce:	f000 8177 	beq.w	80056c0 <HAL_RCCEx_PeriphCLKConfig+0x968>
 80053d2:	2601      	movs	r6, #1
 80053d4:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80053d6:	682b      	ldr	r3, [r5, #0]
 80053d8:	0719      	lsls	r1, r3, #28
 80053da:	d514      	bpl.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x6ae>
    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80053dc:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
 80053e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053e4:	d107      	bne.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0x69e>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80053e6:	2102      	movs	r1, #2
 80053e8:	f105 0028 	add.w	r0, r5, #40	; 0x28
 80053ec:	f7ff fc3c 	bl	8004c68 <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 80053f0:	2800      	cmp	r0, #0
 80053f2:	bf18      	it	ne
 80053f4:	2601      	movne	r6, #1
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80053f6:	4a80      	ldr	r2, [pc, #512]	; (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x8a0>)
 80053f8:	f8d5 1084 	ldr.w	r1, [r5, #132]	; 0x84
 80053fc:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80053fe:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005402:	430b      	orrs	r3, r1
 8005404:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005406:	682b      	ldr	r3, [r5, #0]
 8005408:	06da      	lsls	r2, r3, #27
 800540a:	d514      	bpl.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0x6de>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800540c:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8005410:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005414:	d107      	bne.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005416:	2102      	movs	r1, #2
 8005418:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800541c:	f7ff fc24 	bl	8004c68 <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 8005420:	2800      	cmp	r0, #0
 8005422:	bf18      	it	ne
 8005424:	2601      	movne	r6, #1
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005426:	4a74      	ldr	r2, [pc, #464]	; (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x8a0>)
 8005428:	f8d5 1098 	ldr.w	r1, [r5, #152]	; 0x98
 800542c:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800542e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005432:	430b      	orrs	r3, r1
 8005434:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005436:	682b      	ldr	r3, [r5, #0]
 8005438:	031b      	lsls	r3, r3, #12
 800543a:	d51b      	bpl.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x71c>
    switch (PeriphClkInit->AdcClockSelection)
 800543c:	f8d5 10a4 	ldr.w	r1, [r5, #164]	; 0xa4
 8005440:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8005444:	f000 814b 	beq.w	80056de <HAL_RCCEx_PeriphCLKConfig+0x986>
 8005448:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 800544c:	d007      	beq.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x706>
 800544e:	2900      	cmp	r1, #0
 8005450:	f040 814b 	bne.w	80056ea <HAL_RCCEx_PeriphCLKConfig+0x992>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005454:	f105 0008 	add.w	r0, r5, #8
 8005458:	f7ff fb8e 	bl	8004b78 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800545c:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 800545e:	2c00      	cmp	r4, #0
 8005460:	f040 8146 	bne.w	80056f0 <HAL_RCCEx_PeriphCLKConfig+0x998>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005464:	4a64      	ldr	r2, [pc, #400]	; (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x8a0>)
 8005466:	f8d5 10a4 	ldr.w	r1, [r5, #164]	; 0xa4
 800546a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800546c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8005470:	430b      	orrs	r3, r1
 8005472:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005474:	682b      	ldr	r3, [r5, #0]
 8005476:	035f      	lsls	r7, r3, #13
 8005478:	d51c      	bpl.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
    switch (PeriphClkInit->UsbClockSelection)
 800547a:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 800547e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005482:	f000 8137 	beq.w	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x99c>
 8005486:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800548a:	d008      	beq.n	800549e <HAL_RCCEx_PeriphCLKConfig+0x746>
 800548c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005490:	f040 8137 	bne.w	8005702 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005494:	4a58      	ldr	r2, [pc, #352]	; (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x8a0>)
 8005496:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005498:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800549c:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 800549e:	2c00      	cmp	r4, #0
 80054a0:	f040 8132 	bne.w	8005708 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80054a4:	4a54      	ldr	r2, [pc, #336]	; (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x8a0>)
 80054a6:	f8d5 1088 	ldr.w	r1, [r5, #136]	; 0x88
 80054aa:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80054ac:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80054b0:	430b      	orrs	r3, r1
 80054b2:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80054b4:	682b      	ldr	r3, [r5, #0]
 80054b6:	03d8      	lsls	r0, r3, #15
 80054b8:	d509      	bpl.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0x776>
    switch (PeriphClkInit->SdmmcClockSelection)
 80054ba:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80054bc:	2b00      	cmp	r3, #0
 80054be:	f000 8125 	beq.w	800570c <HAL_RCCEx_PeriphCLKConfig+0x9b4>
 80054c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054c6:	f000 812f 	beq.w	8005728 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80054ca:	2601      	movs	r6, #1
 80054cc:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80054ce:	682b      	ldr	r3, [r5, #0]
 80054d0:	0099      	lsls	r1, r3, #2
 80054d2:	d507      	bpl.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0x78c>
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80054d4:	2102      	movs	r1, #2
 80054d6:	f105 0028 	add.w	r0, r5, #40	; 0x28
 80054da:	f7ff fbc5 	bl	8004c68 <RCCEx_PLL3_Config>
      status = HAL_ERROR;
 80054de:	2800      	cmp	r0, #0
 80054e0:	bf18      	it	ne
 80054e2:	2601      	movne	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80054e4:	e9d5 3100 	ldrd	r3, r1, [r5]
 80054e8:	039a      	lsls	r2, r3, #14
 80054ea:	d50b      	bpl.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
    switch (PeriphClkInit->RngClockSelection)
 80054ec:	f8d5 0080 	ldr.w	r0, [r5, #128]	; 0x80
 80054f0:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 80054f4:	f000 812f 	beq.w	8005756 <HAL_RCCEx_PeriphCLKConfig+0x9fe>
 80054f8:	f200 811f 	bhi.w	800573a <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 80054fc:	2800      	cmp	r0, #0
 80054fe:	f000 8122 	beq.w	8005746 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 8005502:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005504:	02df      	lsls	r7, r3, #11
 8005506:	d506      	bpl.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0x7be>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005508:	483b      	ldr	r0, [pc, #236]	; (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x8a0>)
 800550a:	6f6c      	ldr	r4, [r5, #116]	; 0x74
 800550c:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800550e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005512:	4322      	orrs	r2, r4
 8005514:	6502      	str	r2, [r0, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005516:	00dc      	lsls	r4, r3, #3
 8005518:	d507      	bpl.n	800552a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800551a:	4837      	ldr	r0, [pc, #220]	; (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x8a0>)
 800551c:	f8d5 40b8 	ldr.w	r4, [r5, #184]	; 0xb8
 8005520:	6902      	ldr	r2, [r0, #16]
 8005522:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005526:	4322      	orrs	r2, r4
 8005528:	6102      	str	r2, [r0, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800552a:	0298      	lsls	r0, r3, #10
 800552c:	d506      	bpl.n	800553c <HAL_RCCEx_PeriphCLKConfig+0x7e4>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800552e:	4832      	ldr	r0, [pc, #200]	; (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x8a0>)
 8005530:	6eec      	ldr	r4, [r5, #108]	; 0x6c
 8005532:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8005534:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8005538:	4322      	orrs	r2, r4
 800553a:	6502      	str	r2, [r0, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800553c:	005a      	lsls	r2, r3, #1
 800553e:	d509      	bpl.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005540:	4a2d      	ldr	r2, [pc, #180]	; (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x8a0>)
 8005542:	6910      	ldr	r0, [r2, #16]
 8005544:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
 8005548:	6110      	str	r0, [r2, #16]
 800554a:	6910      	ldr	r0, [r2, #16]
 800554c:	f8d5 40bc 	ldr.w	r4, [r5, #188]	; 0xbc
 8005550:	4320      	orrs	r0, r4
 8005552:	6110      	str	r0, [r2, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005554:	2b00      	cmp	r3, #0
 8005556:	da06      	bge.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x80e>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005558:	4827      	ldr	r0, [pc, #156]	; (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x8a0>)
 800555a:	6d6c      	ldr	r4, [r5, #84]	; 0x54
 800555c:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 800555e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005562:	4322      	orrs	r2, r4
 8005564:	64c2      	str	r2, [r0, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005566:	021b      	lsls	r3, r3, #8
 8005568:	d507      	bpl.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x822>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800556a:	4a23      	ldr	r2, [pc, #140]	; (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x8a0>)
 800556c:	f8d5 008c 	ldr.w	r0, [r5, #140]	; 0x8c
 8005570:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8005572:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8005576:	4303      	orrs	r3, r0
 8005578:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800557a:	07cf      	lsls	r7, r1, #31
 800557c:	d507      	bpl.n	800558e <HAL_RCCEx_PeriphCLKConfig+0x836>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800557e:	2100      	movs	r1, #0
 8005580:	f105 0008 	add.w	r0, r5, #8
 8005584:	f7ff faf8 	bl	8004b78 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 8005588:	2800      	cmp	r0, #0
 800558a:	bf18      	it	ne
 800558c:	4606      	movne	r6, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800558e:	686b      	ldr	r3, [r5, #4]
 8005590:	079c      	lsls	r4, r3, #30
 8005592:	d507      	bpl.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005594:	2101      	movs	r1, #1
 8005596:	f105 0008 	add.w	r0, r5, #8
 800559a:	f7ff faed 	bl	8004b78 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 800559e:	2800      	cmp	r0, #0
 80055a0:	bf18      	it	ne
 80055a2:	4606      	movne	r6, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80055a4:	686b      	ldr	r3, [r5, #4]
 80055a6:	0758      	lsls	r0, r3, #29
 80055a8:	d507      	bpl.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x862>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80055aa:	2102      	movs	r1, #2
 80055ac:	f105 0008 	add.w	r0, r5, #8
 80055b0:	f7ff fae2 	bl	8004b78 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 80055b4:	2800      	cmp	r0, #0
 80055b6:	bf18      	it	ne
 80055b8:	4606      	movne	r6, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80055ba:	686b      	ldr	r3, [r5, #4]
 80055bc:	0719      	lsls	r1, r3, #28
 80055be:	d507      	bpl.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x878>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80055c0:	2100      	movs	r1, #0
 80055c2:	f105 0028 	add.w	r0, r5, #40	; 0x28
 80055c6:	f7ff fb4f 	bl	8004c68 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 80055ca:	2800      	cmp	r0, #0
 80055cc:	bf18      	it	ne
 80055ce:	4606      	movne	r6, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80055d0:	686b      	ldr	r3, [r5, #4]
 80055d2:	06da      	lsls	r2, r3, #27
 80055d4:	d507      	bpl.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0x88e>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80055d6:	2101      	movs	r1, #1
 80055d8:	f105 0028 	add.w	r0, r5, #40	; 0x28
 80055dc:	f7ff fb44 	bl	8004c68 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 80055e0:	2800      	cmp	r0, #0
 80055e2:	bf18      	it	ne
 80055e4:	4606      	movne	r6, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80055e6:	686b      	ldr	r3, [r5, #4]
 80055e8:	069b      	lsls	r3, r3, #26
 80055ea:	f100 80bc 	bmi.w	8005766 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
    return HAL_OK;
 80055ee:	1e30      	subs	r0, r6, #0
 80055f0:	bf18      	it	ne
 80055f2:	2001      	movne	r0, #1
}
 80055f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80055f8:	58024400 	.word	0x58024400
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80055fc:	2101      	movs	r1, #1
 80055fe:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8005602:	f7ff fb31 	bl	8004c68 <RCCEx_PLL3_Config>
 8005606:	e69e      	b.n	8005346 <HAL_RCCEx_PeriphCLKConfig+0x5ee>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005608:	2601      	movs	r6, #1
 800560a:	4634      	mov	r4, r6
 800560c:	e6a7      	b.n	800535e <HAL_RCCEx_PeriphCLKConfig+0x606>
 800560e:	4626      	mov	r6, r4
 8005610:	e6a5      	b.n	800535e <HAL_RCCEx_PeriphCLKConfig+0x606>
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005612:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005616:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800561a:	d003      	beq.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
 800561c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005620:	f47f aeaf 	bne.w	8005382 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    if (ret == HAL_OK)
 8005624:	b9ac      	cbnz	r4, 8005652 <HAL_RCCEx_PeriphCLKConfig+0x8fa>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005626:	4a55      	ldr	r2, [pc, #340]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0xa24>)
 8005628:	f8d5 1090 	ldr.w	r1, [r5, #144]	; 0x90
 800562c:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800562e:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8005632:	430b      	orrs	r3, r1
 8005634:	6553      	str	r3, [r2, #84]	; 0x54
 8005636:	e6a6      	b.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0x62e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005638:	2100      	movs	r1, #0
 800563a:	f105 0008 	add.w	r0, r5, #8
 800563e:	f7ff fa9b 	bl	8004b78 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005642:	4604      	mov	r4, r0
        break;
 8005644:	e7ee      	b.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005646:	2102      	movs	r1, #2
 8005648:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800564c:	f7ff fb0c 	bl	8004c68 <RCCEx_PLL3_Config>
 8005650:	e7f7      	b.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0x8ea>
 8005652:	4626      	mov	r6, r4
 8005654:	e697      	b.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005656:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800565a:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800565e:	d003      	beq.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x910>
 8005660:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005664:	f47f aea1 	bne.w	80053aa <HAL_RCCEx_PeriphCLKConfig+0x652>
    if (ret == HAL_OK)
 8005668:	b9ac      	cbnz	r4, 8005696 <HAL_RCCEx_PeriphCLKConfig+0x93e>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800566a:	4a44      	ldr	r2, [pc, #272]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0xa24>)
 800566c:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
 8005670:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8005672:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8005676:	430b      	orrs	r3, r1
 8005678:	6593      	str	r3, [r2, #88]	; 0x58
 800567a:	e698      	b.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0x656>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800567c:	2100      	movs	r1, #0
 800567e:	f105 0008 	add.w	r0, r5, #8
 8005682:	f7ff fa79 	bl	8004b78 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005686:	4604      	mov	r4, r0
        break;
 8005688:	e7ee      	b.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x910>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800568a:	2102      	movs	r1, #2
 800568c:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8005690:	f7ff faea 	bl	8004c68 <RCCEx_PLL3_Config>
 8005694:	e7f7      	b.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0x92e>
 8005696:	4626      	mov	r6, r4
 8005698:	e689      	b.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0x656>
    switch (PeriphClkInit->Lptim345ClockSelection)
 800569a:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800569e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80056a2:	d003      	beq.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0x954>
 80056a4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80056a8:	f47f ae93 	bne.w	80053d2 <HAL_RCCEx_PeriphCLKConfig+0x67a>
    if (ret == HAL_OK)
 80056ac:	b9ac      	cbnz	r4, 80056da <HAL_RCCEx_PeriphCLKConfig+0x982>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80056ae:	4a33      	ldr	r2, [pc, #204]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0xa24>)
 80056b0:	f8d5 10a0 	ldr.w	r1, [r5, #160]	; 0xa0
 80056b4:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80056b6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80056ba:	430b      	orrs	r3, r1
 80056bc:	6593      	str	r3, [r2, #88]	; 0x58
 80056be:	e68a      	b.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80056c0:	2100      	movs	r1, #0
 80056c2:	f105 0008 	add.w	r0, r5, #8
 80056c6:	f7ff fa57 	bl	8004b78 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80056ca:	4604      	mov	r4, r0
        break;
 80056cc:	e7ee      	b.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0x954>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80056ce:	2102      	movs	r1, #2
 80056d0:	f105 0028 	add.w	r0, r5, #40	; 0x28
 80056d4:	f7ff fac8 	bl	8004c68 <RCCEx_PLL3_Config>
 80056d8:	e7f7      	b.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0x972>
 80056da:	4626      	mov	r6, r4
 80056dc:	e67b      	b.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80056de:	2102      	movs	r1, #2
 80056e0:	f105 0028 	add.w	r0, r5, #40	; 0x28
 80056e4:	f7ff fac0 	bl	8004c68 <RCCEx_PLL3_Config>
 80056e8:	e6b8      	b.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x704>
    switch (PeriphClkInit->AdcClockSelection)
 80056ea:	2601      	movs	r6, #1
 80056ec:	4634      	mov	r4, r6
 80056ee:	e6c1      	b.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80056f0:	4626      	mov	r6, r4
 80056f2:	e6bf      	b.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x71c>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80056f4:	2101      	movs	r1, #1
 80056f6:	f105 0028 	add.w	r0, r5, #40	; 0x28
 80056fa:	f7ff fab5 	bl	8004c68 <RCCEx_PLL3_Config>
 80056fe:	4604      	mov	r4, r0
        break;
 8005700:	e6cd      	b.n	800549e <HAL_RCCEx_PeriphCLKConfig+0x746>
    switch (PeriphClkInit->UsbClockSelection)
 8005702:	2601      	movs	r6, #1
 8005704:	4634      	mov	r4, r6
 8005706:	e6d5      	b.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
 8005708:	4626      	mov	r6, r4
 800570a:	e6d3      	b.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800570c:	4a1b      	ldr	r2, [pc, #108]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0xa24>)
 800570e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005710:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005714:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 8005716:	b974      	cbnz	r4, 8005736 <HAL_RCCEx_PeriphCLKConfig+0x9de>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005718:	4a18      	ldr	r2, [pc, #96]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0xa24>)
 800571a:	6d29      	ldr	r1, [r5, #80]	; 0x50
 800571c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800571e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005722:	430b      	orrs	r3, r1
 8005724:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005726:	e6d2      	b.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0x776>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005728:	2102      	movs	r1, #2
 800572a:	f105 0008 	add.w	r0, r5, #8
 800572e:	f7ff fa23 	bl	8004b78 <RCCEx_PLL2_Config>
 8005732:	4604      	mov	r4, r0
        break;
 8005734:	e7ef      	b.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8005736:	4626      	mov	r6, r4
 8005738:	e6c9      	b.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0x776>
    switch (PeriphClkInit->RngClockSelection)
 800573a:	f420 7280 	bic.w	r2, r0, #256	; 0x100
 800573e:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8005742:	f47f aede 	bne.w	8005502 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    if (ret == HAL_OK)
 8005746:	b964      	cbnz	r4, 8005762 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005748:	4c0c      	ldr	r4, [pc, #48]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0xa24>)
 800574a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800574c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005750:	4302      	orrs	r2, r0
 8005752:	6562      	str	r2, [r4, #84]	; 0x54
 8005754:	e6d6      	b.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005756:	4f09      	ldr	r7, [pc, #36]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0xa24>)
 8005758:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800575a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800575e:	62fa      	str	r2, [r7, #44]	; 0x2c
        break;
 8005760:	e7f1      	b.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 8005762:	4626      	mov	r6, r4
 8005764:	e6ce      	b.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005766:	2102      	movs	r1, #2
 8005768:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800576c:	f7ff fa7c 	bl	8004c68 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 8005770:	2800      	cmp	r0, #0
 8005772:	f43f af3c 	beq.w	80055ee <HAL_RCCEx_PeriphCLKConfig+0x896>
  return HAL_ERROR;
 8005776:	2001      	movs	r0, #1
 8005778:	e73c      	b.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x89c>
 800577a:	bf00      	nop
 800577c:	58024400 	.word	0x58024400

08005780 <HAL_RCCEx_GetD3PCLK1Freq>:
{
 8005780:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005782:	f7ff f9b3 	bl	8004aec <HAL_RCC_GetHCLKFreq>
 8005786:	4b05      	ldr	r3, [pc, #20]	; (800579c <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 8005788:	4a05      	ldr	r2, [pc, #20]	; (80057a0 <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 800578a:	6a1b      	ldr	r3, [r3, #32]
 800578c:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8005790:	5cd3      	ldrb	r3, [r2, r3]
 8005792:	f003 031f 	and.w	r3, r3, #31
}
 8005796:	40d8      	lsrs	r0, r3
 8005798:	bd08      	pop	{r3, pc}
 800579a:	bf00      	nop
 800579c:	58024400 	.word	0x58024400
 80057a0:	08015a88 	.word	0x08015a88

080057a4 <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80057a4:	4a4e      	ldr	r2, [pc, #312]	; (80058e0 <HAL_RCCEx_GetPLL2ClockFreq+0x13c>)
{
 80057a6:	b570      	push	{r4, r5, r6, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80057a8:	6a94      	ldr	r4, [r2, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80057aa:	6a96      	ldr	r6, [r2, #40]	; 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80057ac:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
  if (pll2m != 0U)
 80057ae:	f416 3f7c 	tst.w	r6, #258048	; 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80057b2:	f3c6 3105 	ubfx	r1, r6, #12, #6
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80057b6:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
  if (pll2m != 0U)
 80057b8:	f000 808d 	beq.w	80058d6 <HAL_RCCEx_GetPLL2ClockFreq+0x132>
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80057bc:	ee07 1a90 	vmov	s15, r1
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80057c0:	f3c3 03cc 	ubfx	r3, r3, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80057c4:	f3c5 1100 	ubfx	r1, r5, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80057c8:	f004 0403 	and.w	r4, r4, #3
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80057cc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80057d0:	434b      	muls	r3, r1
    switch (pllsource)
 80057d2:	2c01      	cmp	r4, #1
 80057d4:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80057d8:	ee07 3a90 	vmov	s15, r3
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80057dc:	eefa 7ae9 	vcvt.f32.s32	s15, s15, #13
    switch (pllsource)
 80057e0:	d06b      	beq.n	80058ba <HAL_RCCEx_GetPLL2ClockFreq+0x116>
 80057e2:	2c02      	cmp	r4, #2
 80057e4:	d05b      	beq.n	800589e <HAL_RCCEx_GetPLL2ClockFreq+0xfa>
 80057e6:	2c00      	cmp	r4, #0
 80057e8:	d167      	bne.n	80058ba <HAL_RCCEx_GetPLL2ClockFreq+0x116>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80057ea:	6813      	ldr	r3, [r2, #0]
 80057ec:	069b      	lsls	r3, r3, #26
 80057ee:	d546      	bpl.n	800587e <HAL_RCCEx_GetPLL2ClockFreq+0xda>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80057f0:	6811      	ldr	r1, [r2, #0]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80057f2:	6b93      	ldr	r3, [r2, #56]	; 0x38
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80057f4:	f3c1 01c1 	ubfx	r1, r1, #3, #2
 80057f8:	4a3a      	ldr	r2, [pc, #232]	; (80058e4 <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80057fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80057fe:	40ca      	lsrs	r2, r1
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005800:	ee07 2a10 	vmov	s14, r2
 8005804:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 8005808:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 800580c:	ee06 3a90 	vmov	s13, r3
 8005810:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8005814:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005818:	ee77 7a86 	vadd.f32	s15, s15, s12
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800581c:	4a30      	ldr	r2, [pc, #192]	; (80058e0 <HAL_RCCEx_GetPLL2ClockFreq+0x13c>)
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800581e:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005822:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8005824:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8005828:	ee07 3a10 	vmov	s14, r3
 800582c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005830:	ee37 7a06 	vadd.f32	s14, s14, s12
 8005834:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005838:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800583c:	edc0 6a00 	vstr	s13, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005840:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8005842:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8005846:	ee07 3a10 	vmov	s14, r3
 800584a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800584e:	ee37 7a06 	vadd.f32	s14, s14, s12
 8005852:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005856:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800585a:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800585e:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8005860:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8005864:	ee07 3a10 	vmov	s14, r3
 8005868:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800586c:	ee37 6a06 	vadd.f32	s12, s14, s12
 8005870:	ee87 7a86 	vdiv.f32	s14, s15, s12
 8005874:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8005878:	ed80 7a02 	vstr	s14, [r0, #8]
}
 800587c:	bd70      	pop	{r4, r5, r6, pc}
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800587e:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8005880:	eddf 5a19 	vldr	s11, [pc, #100]	; 80058e8 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 8005884:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005888:	ee07 3a10 	vmov	s14, r3
 800588c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005890:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005894:	ee77 7a86 	vadd.f32	s15, s15, s12
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005898:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 800589c:	e7be      	b.n	800581c <HAL_RCCEx_GetPLL2ClockFreq+0x78>
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800589e:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80058a0:	eddf 5a12 	vldr	s11, [pc, #72]	; 80058ec <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 80058a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058a8:	ee07 3a10 	vmov	s14, r3
 80058ac:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80058b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80058b4:	ee77 7a86 	vadd.f32	s15, s15, s12
 80058b8:	e7ee      	b.n	8005898 <HAL_RCCEx_GetPLL2ClockFreq+0xf4>
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80058ba:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80058bc:	eddf 5a0c 	vldr	s11, [pc, #48]	; 80058f0 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>
 80058c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058c4:	ee07 3a10 	vmov	s14, r3
 80058c8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80058cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80058d0:	ee77 7a86 	vadd.f32	s15, s15, s12
 80058d4:	e7e0      	b.n	8005898 <HAL_RCCEx_GetPLL2ClockFreq+0xf4>
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80058d6:	e9c0 1100 	strd	r1, r1, [r0]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80058da:	6081      	str	r1, [r0, #8]
}
 80058dc:	e7ce      	b.n	800587c <HAL_RCCEx_GetPLL2ClockFreq+0xd8>
 80058de:	bf00      	nop
 80058e0:	58024400 	.word	0x58024400
 80058e4:	03d09000 	.word	0x03d09000
 80058e8:	4c742400 	.word	0x4c742400
 80058ec:	4bbebc20 	.word	0x4bbebc20
 80058f0:	4a742400 	.word	0x4a742400

080058f4 <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80058f4:	4a4e      	ldr	r2, [pc, #312]	; (8005a30 <HAL_RCCEx_GetPLL3ClockFreq+0x13c>)
{
 80058f6:	b570      	push	{r4, r5, r6, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80058f8:	6a94      	ldr	r4, [r2, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80058fa:	6a96      	ldr	r6, [r2, #40]	; 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80058fc:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
  if (pll3m != 0U)
 80058fe:	f016 7f7c 	tst.w	r6, #66060288	; 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005902:	f3c6 5105 	ubfx	r1, r6, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005906:	6c53      	ldr	r3, [r2, #68]	; 0x44
  if (pll3m != 0U)
 8005908:	f000 808d 	beq.w	8005a26 <HAL_RCCEx_GetPLL3ClockFreq+0x132>
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800590c:	ee07 1a90 	vmov	s15, r1
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005910:	f3c3 03cc 	ubfx	r3, r3, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005914:	f3c5 2100 	ubfx	r1, r5, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005918:	f004 0403 	and.w	r4, r4, #3
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800591c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005920:	434b      	muls	r3, r1
    switch (pllsource)
 8005922:	2c01      	cmp	r4, #1
 8005924:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005928:	ee07 3a90 	vmov	s15, r3
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800592c:	eefa 7ae9 	vcvt.f32.s32	s15, s15, #13
    switch (pllsource)
 8005930:	d06b      	beq.n	8005a0a <HAL_RCCEx_GetPLL3ClockFreq+0x116>
 8005932:	2c02      	cmp	r4, #2
 8005934:	d05b      	beq.n	80059ee <HAL_RCCEx_GetPLL3ClockFreq+0xfa>
 8005936:	2c00      	cmp	r4, #0
 8005938:	d167      	bne.n	8005a0a <HAL_RCCEx_GetPLL3ClockFreq+0x116>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800593a:	6813      	ldr	r3, [r2, #0]
 800593c:	069b      	lsls	r3, r3, #26
 800593e:	d546      	bpl.n	80059ce <HAL_RCCEx_GetPLL3ClockFreq+0xda>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005940:	6811      	ldr	r1, [r2, #0]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005942:	6c13      	ldr	r3, [r2, #64]	; 0x40
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005944:	f3c1 01c1 	ubfx	r1, r1, #3, #2
 8005948:	4a3a      	ldr	r2, [pc, #232]	; (8005a34 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800594a:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800594e:	40ca      	lsrs	r2, r1
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005950:	ee07 2a10 	vmov	s14, r2
 8005954:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 8005958:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 800595c:	ee06 3a90 	vmov	s13, r3
 8005960:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8005964:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005968:	ee77 7a86 	vadd.f32	s15, s15, s12
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800596c:	4a30      	ldr	r2, [pc, #192]	; (8005a30 <HAL_RCCEx_GetPLL3ClockFreq+0x13c>)
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800596e:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005972:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8005974:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8005978:	ee07 3a10 	vmov	s14, r3
 800597c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005980:	ee37 7a06 	vadd.f32	s14, s14, s12
 8005984:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005988:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800598c:	edc0 6a00 	vstr	s13, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8005990:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8005992:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8005996:	ee07 3a10 	vmov	s14, r3
 800599a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800599e:	ee37 7a06 	vadd.f32	s14, s14, s12
 80059a2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80059a6:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80059aa:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80059ae:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80059b0:	f3c3 6306 	ubfx	r3, r3, #24, #7
 80059b4:	ee07 3a10 	vmov	s14, r3
 80059b8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80059bc:	ee37 6a06 	vadd.f32	s12, s14, s12
 80059c0:	ee87 7a86 	vdiv.f32	s14, s15, s12
 80059c4:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80059c8:	ed80 7a02 	vstr	s14, [r0, #8]
}
 80059cc:	bd70      	pop	{r4, r5, r6, pc}
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80059ce:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80059d0:	eddf 5a19 	vldr	s11, [pc, #100]	; 8005a38 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
 80059d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059d8:	ee07 3a10 	vmov	s14, r3
 80059dc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80059e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80059e4:	ee77 7a86 	vadd.f32	s15, s15, s12
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80059e8:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 80059ec:	e7be      	b.n	800596c <HAL_RCCEx_GetPLL3ClockFreq+0x78>
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80059ee:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80059f0:	eddf 5a12 	vldr	s11, [pc, #72]	; 8005a3c <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 80059f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059f8:	ee07 3a10 	vmov	s14, r3
 80059fc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005a00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005a04:	ee77 7a86 	vadd.f32	s15, s15, s12
 8005a08:	e7ee      	b.n	80059e8 <HAL_RCCEx_GetPLL3ClockFreq+0xf4>
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005a0a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8005a0c:	eddf 5a0c 	vldr	s11, [pc, #48]	; 8005a40 <HAL_RCCEx_GetPLL3ClockFreq+0x14c>
 8005a10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a14:	ee07 3a10 	vmov	s14, r3
 8005a18:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005a1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005a20:	ee77 7a86 	vadd.f32	s15, s15, s12
 8005a24:	e7e0      	b.n	80059e8 <HAL_RCCEx_GetPLL3ClockFreq+0xf4>
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005a26:	e9c0 1100 	strd	r1, r1, [r0]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005a2a:	6081      	str	r1, [r0, #8]
}
 8005a2c:	e7ce      	b.n	80059cc <HAL_RCCEx_GetPLL3ClockFreq+0xd8>
 8005a2e:	bf00      	nop
 8005a30:	58024400 	.word	0x58024400
 8005a34:	03d09000 	.word	0x03d09000
 8005a38:	4c742400 	.word	0x4c742400
 8005a3c:	4bbebc20 	.word	0x4bbebc20
 8005a40:	4a742400 	.word	0x4a742400

08005a44 <HAL_RCCEx_GetPLL1ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005a44:	4a4e      	ldr	r2, [pc, #312]	; (8005b80 <HAL_RCCEx_GetPLL1ClockFreq+0x13c>)
{
 8005a46:	b570      	push	{r4, r5, r6, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005a48:	6a94      	ldr	r4, [r2, #40]	; 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8005a4a:	6a96      	ldr	r6, [r2, #40]	; 0x28
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8005a4c:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
  if (pll1m != 0U)
 8005a4e:	f416 7f7c 	tst.w	r6, #1008	; 0x3f0
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8005a52:	f3c6 1105 	ubfx	r1, r6, #4, #6
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005a56:	6b53      	ldr	r3, [r2, #52]	; 0x34
  if (pll1m != 0U)
 8005a58:	f000 808d 	beq.w	8005b76 <HAL_RCCEx_GetPLL1ClockFreq+0x132>
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005a5c:	ee07 1a90 	vmov	s15, r1
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005a60:	f3c3 03cc 	ubfx	r3, r3, #3, #13
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8005a64:	f005 0101 	and.w	r1, r5, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005a68:	f004 0403 	and.w	r4, r4, #3
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005a6c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005a70:	434b      	muls	r3, r1
    switch (pllsource)
 8005a72:	2c01      	cmp	r4, #1
 8005a74:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005a78:	ee07 3a90 	vmov	s15, r3
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005a7c:	eefa 7ae9 	vcvt.f32.s32	s15, s15, #13
    switch (pllsource)
 8005a80:	d04d      	beq.n	8005b1e <HAL_RCCEx_GetPLL1ClockFreq+0xda>
 8005a82:	2c02      	cmp	r4, #2
 8005a84:	d05b      	beq.n	8005b3e <HAL_RCCEx_GetPLL1ClockFreq+0xfa>
 8005a86:	2c00      	cmp	r4, #0
 8005a88:	d167      	bne.n	8005b5a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005a8a:	6813      	ldr	r3, [r2, #0]
 8005a8c:	069b      	lsls	r3, r3, #26
 8005a8e:	d564      	bpl.n	8005b5a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005a90:	6811      	ldr	r1, [r2, #0]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005a92:	6b13      	ldr	r3, [r2, #48]	; 0x30
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005a94:	f3c1 01c1 	ubfx	r1, r1, #3, #2
 8005a98:	4a3a      	ldr	r2, [pc, #232]	; (8005b84 <HAL_RCCEx_GetPLL1ClockFreq+0x140>)
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005a9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005a9e:	40ca      	lsrs	r2, r1
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005aa0:	ee07 2a10 	vmov	s14, r2
 8005aa4:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 8005aa8:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 8005aac:	ee06 3a90 	vmov	s13, r3
 8005ab0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8005ab4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ab8:	ee77 7a86 	vadd.f32	s15, s15, s12
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8005abc:	4a30      	ldr	r2, [pc, #192]	; (8005b80 <HAL_RCCEx_GetPLL1ClockFreq+0x13c>)
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005abe:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8005ac2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8005ac4:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8005ac8:	ee07 3a10 	vmov	s14, r3
 8005acc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005ad0:	ee37 7a06 	vadd.f32	s14, s14, s12
 8005ad4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005ad8:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8005adc:	edc0 6a00 	vstr	s13, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8005ae0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8005ae2:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8005ae6:	ee07 3a10 	vmov	s14, r3
 8005aea:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005aee:	ee37 7a06 	vadd.f32	s14, s14, s12
 8005af2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005af6:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8005afa:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8005afe:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8005b00:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8005b04:	ee07 3a10 	vmov	s14, r3
 8005b08:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005b0c:	ee37 6a06 	vadd.f32	s12, s14, s12
 8005b10:	ee87 7a86 	vdiv.f32	s14, s15, s12
 8005b14:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8005b18:	ed80 7a02 	vstr	s14, [r0, #8]
}
 8005b1c:	bd70      	pop	{r4, r5, r6, pc}
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005b1e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8005b20:	eddf 5a19 	vldr	s11, [pc, #100]	; 8005b88 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
 8005b24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b28:	ee07 3a10 	vmov	s14, r3
 8005b2c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005b30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005b34:	ee77 7a86 	vadd.f32	s15, s15, s12
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005b38:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 8005b3c:	e7be      	b.n	8005abc <HAL_RCCEx_GetPLL1ClockFreq+0x78>
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005b3e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8005b40:	eddf 5a12 	vldr	s11, [pc, #72]	; 8005b8c <HAL_RCCEx_GetPLL1ClockFreq+0x148>
 8005b44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b48:	ee07 3a10 	vmov	s14, r3
 8005b4c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005b50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005b54:	ee77 7a86 	vadd.f32	s15, s15, s12
 8005b58:	e7ee      	b.n	8005b38 <HAL_RCCEx_GetPLL1ClockFreq+0xf4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005b5a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8005b5c:	eddf 5a0c 	vldr	s11, [pc, #48]	; 8005b90 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 8005b60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b64:	ee07 3a10 	vmov	s14, r3
 8005b68:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005b6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005b70:	ee77 7a86 	vadd.f32	s15, s15, s12
 8005b74:	e7e0      	b.n	8005b38 <HAL_RCCEx_GetPLL1ClockFreq+0xf4>
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005b76:	e9c0 1100 	strd	r1, r1, [r0]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8005b7a:	6081      	str	r1, [r0, #8]
}
 8005b7c:	e7ce      	b.n	8005b1c <HAL_RCCEx_GetPLL1ClockFreq+0xd8>
 8005b7e:	bf00      	nop
 8005b80:	58024400 	.word	0x58024400
 8005b84:	03d09000 	.word	0x03d09000
 8005b88:	4a742400 	.word	0x4a742400
 8005b8c:	4bbebc20 	.word	0x4bbebc20
 8005b90:	4c742400 	.word	0x4c742400

08005b94 <HAL_RCCEx_GetPeriphCLKFreq>:
{
 8005b94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005b96:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
 8005b9a:	430b      	orrs	r3, r1
 8005b9c:	d131      	bne.n	8005c02 <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8005b9e:	4b95      	ldr	r3, [pc, #596]	; (8005df4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8005ba0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005ba2:	f002 0207 	and.w	r2, r2, #7
    switch (saiclocksource)
 8005ba6:	2a04      	cmp	r2, #4
 8005ba8:	d84c      	bhi.n	8005c44 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
 8005baa:	e8df f012 	tbh	[pc, r2, lsl #1]
 8005bae:	0110      	.short	0x0110
 8005bb0:	0005003a 	.word	0x0005003a
 8005bb4:	000d0170 	.word	0x000d0170
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005bb8:	6818      	ldr	r0, [r3, #0]
 8005bba:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8005bbe:	d038      	beq.n	8005c32 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005bc0:	a801      	add	r0, sp, #4
 8005bc2:	f7ff fe97 	bl	80058f4 <HAL_RCCEx_GetPLL3ClockFreq>
 8005bc6:	e033      	b.n	8005c30 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005bc8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005bca:	6819      	ldr	r1, [r3, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005bcc:	f002 5240 	and.w	r2, r2, #805306368	; 0x30000000
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005bd0:	681b      	ldr	r3, [r3, #0]
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005bd2:	0749      	lsls	r1, r1, #29
 8005bd4:	d505      	bpl.n	8005be2 <HAL_RCCEx_GetPeriphCLKFreq+0x4e>
 8005bd6:	b922      	cbnz	r2, 8005be2 <HAL_RCCEx_GetPeriphCLKFreq+0x4e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005bd8:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8005bdc:	4886      	ldr	r0, [pc, #536]	; (8005df8 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8005bde:	40d8      	lsrs	r0, r3
 8005be0:	e027      	b.n	8005c32 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005be2:	05d8      	lsls	r0, r3, #23
 8005be4:	d502      	bpl.n	8005bec <HAL_RCCEx_GetPeriphCLKFreq+0x58>
 8005be6:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 8005bea:	d056      	beq.n	8005c9a <HAL_RCCEx_GetPeriphCLKFreq+0x106>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005bec:	4b81      	ldr	r3, [pc, #516]	; (8005df4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005bee:	6818      	ldr	r0, [r3, #0]
 8005bf0:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8005bf4:	d01d      	beq.n	8005c32 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
          frequency = HSE_VALUE;
 8005bf6:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8005bfa:	4880      	ldr	r0, [pc, #512]	; (8005dfc <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8005bfc:	bf18      	it	ne
 8005bfe:	2000      	movne	r0, #0
 8005c00:	e017      	b.n	8005c32 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8005c02:	f5a0 7300 	sub.w	r3, r0, #512	; 0x200
 8005c06:	430b      	orrs	r3, r1
 8005c08:	d11e      	bne.n	8005c48 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8005c0a:	4b7a      	ldr	r3, [pc, #488]	; (8005df4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8005c0c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005c0e:	f402 72e0 	and.w	r2, r2, #448	; 0x1c0
    switch (saiclocksource)
 8005c12:	2a80      	cmp	r2, #128	; 0x80
 8005c14:	d0d0      	beq.n	8005bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x24>
 8005c16:	d80f      	bhi.n	8005c38 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
 8005c18:	2a00      	cmp	r2, #0
 8005c1a:	f000 80d8 	beq.w	8005dce <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 8005c1e:	2a40      	cmp	r2, #64	; 0x40
    switch (srcclk)
 8005c20:	d110      	bne.n	8005c44 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005c22:	6818      	ldr	r0, [r3, #0]
 8005c24:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8005c28:	d003      	beq.n	8005c32 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005c2a:	a801      	add	r0, sp, #4
 8005c2c:	f7ff fdba 	bl	80057a4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005c30:	9801      	ldr	r0, [sp, #4]
}
 8005c32:	b005      	add	sp, #20
 8005c34:	f85d fb04 	ldr.w	pc, [sp], #4
    switch (saiclocksource)
 8005c38:	2ac0      	cmp	r2, #192	; 0xc0
 8005c3a:	f000 8128 	beq.w	8005e8e <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8005c3e:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
    switch (saiclocksource)
 8005c42:	d01a      	beq.n	8005c7a <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
    switch (srcclk)
 8005c44:	2000      	movs	r0, #0
  return frequency;
 8005c46:	e7f4      	b.n	8005c32 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8005c48:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
 8005c4c:	430b      	orrs	r3, r1
 8005c4e:	d126      	bne.n	8005c9e <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8005c50:	4b68      	ldr	r3, [pc, #416]	; (8005df4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8005c52:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005c54:	f402 0260 	and.w	r2, r2, #14680064	; 0xe00000
    switch (saiclocksource)
 8005c58:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 8005c5c:	d0ac      	beq.n	8005bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x24>
 8005c5e:	d805      	bhi.n	8005c6c <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8005c60:	2a00      	cmp	r2, #0
 8005c62:	f000 80b4 	beq.w	8005dce <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 8005c66:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8005c6a:	e7d9      	b.n	8005c20 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
 8005c6c:	f5b2 0fc0 	cmp.w	r2, #6291456	; 0x600000
 8005c70:	f000 810d 	beq.w	8005e8e <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8005c74:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8005c78:	e7e3      	b.n	8005c42 <HAL_RCCEx_GetPeriphCLKFreq+0xae>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005c7a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005c7c:	6819      	ldr	r1, [r3, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005c7e:	f002 5240 	and.w	r2, r2, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005c82:	0749      	lsls	r1, r1, #29
 8005c84:	d502      	bpl.n	8005c8c <HAL_RCCEx_GetPeriphCLKFreq+0xf8>
 8005c86:	b90a      	cbnz	r2, 8005c8c <HAL_RCCEx_GetPeriphCLKFreq+0xf8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	e7a5      	b.n	8005bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x44>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005c8c:	4b59      	ldr	r3, [pc, #356]	; (8005df4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005c8e:	6819      	ldr	r1, [r3, #0]
 8005c90:	05c9      	lsls	r1, r1, #23
 8005c92:	d5ac      	bpl.n	8005bee <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8005c94:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 8005c98:	d1a9      	bne.n	8005bee <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          frequency = CSI_VALUE;
 8005c9a:	4859      	ldr	r0, [pc, #356]	; (8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 8005c9c:	e7c9      	b.n	8005c32 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8005c9e:	f5a0 6300 	sub.w	r3, r0, #2048	; 0x800
 8005ca2:	430b      	orrs	r3, r1
 8005ca4:	d11d      	bne.n	8005ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x14e>
    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8005ca6:	4b53      	ldr	r3, [pc, #332]	; (8005df4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8005ca8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005caa:	f002 62e0 	and.w	r2, r2, #117440512	; 0x7000000
    switch (saiclocksource)
 8005cae:	f1b2 7f00 	cmp.w	r2, #33554432	; 0x2000000
 8005cb2:	d081      	beq.n	8005bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x24>
 8005cb4:	d805      	bhi.n	8005cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x12e>
 8005cb6:	2a00      	cmp	r2, #0
 8005cb8:	f000 8089 	beq.w	8005dce <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 8005cbc:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 8005cc0:	e7ae      	b.n	8005c20 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
 8005cc2:	f1b2 7f40 	cmp.w	r2, #50331648	; 0x3000000
 8005cc6:	f000 80e2 	beq.w	8005e8e <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8005cca:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
    switch (srcclk)
 8005cce:	d1b9      	bne.n	8005c44 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005cd0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005cd2:	6819      	ldr	r1, [r3, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005cd4:	f002 5240 	and.w	r2, r2, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005cd8:	0748      	lsls	r0, r1, #29
 8005cda:	d5d8      	bpl.n	8005c8e <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 8005cdc:	2a00      	cmp	r2, #0
 8005cde:	d1d6      	bne.n	8005c8e <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 8005ce0:	e7d2      	b.n	8005c88 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8005ce2:	f5a0 5380 	sub.w	r3, r0, #4096	; 0x1000
 8005ce6:	430b      	orrs	r3, r1
 8005ce8:	d114      	bne.n	8005d14 <HAL_RCCEx_GetPeriphCLKFreq+0x180>
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8005cea:	4b42      	ldr	r3, [pc, #264]	; (8005df4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8005cec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005cee:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
    switch (srcclk)
 8005cf2:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8005cf6:	f43f af5f 	beq.w	8005bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x24>
 8005cfa:	d804      	bhi.n	8005d06 <HAL_RCCEx_GetPeriphCLKFreq+0x172>
 8005cfc:	2a00      	cmp	r2, #0
 8005cfe:	d066      	beq.n	8005dce <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 8005d00:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8005d04:	e78c      	b.n	8005c20 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
 8005d06:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 8005d0a:	f000 80c0 	beq.w	8005e8e <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8005d0e:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8005d12:	e7dc      	b.n	8005cce <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8005d14:	f5a0 5300 	sub.w	r3, r0, #8192	; 0x2000
 8005d18:	430b      	orrs	r3, r1
 8005d1a:	d134      	bne.n	8005d86 <HAL_RCCEx_GetPeriphCLKFreq+0x1f2>
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8005d1c:	4a35      	ldr	r2, [pc, #212]	; (8005df4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8005d1e:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8005d20:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
    switch (srcclk)
 8005d24:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005d28:	f000 808c 	beq.w	8005e44 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>
 8005d2c:	d80c      	bhi.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8005d2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d32:	d016      	beq.n	8005d62 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8005d34:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005d38:	d01c      	beq.n	8005d74 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d182      	bne.n	8005c44 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
}
 8005d3e:	b005      	add	sp, #20
 8005d40:	f85d eb04 	ldr.w	lr, [sp], #4
        frequency = HAL_RCC_GetPCLK1Freq();
 8005d44:	f7fe bef4 	b.w	8004b30 <HAL_RCC_GetPCLK1Freq>
    switch (srcclk)
 8005d48:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005d4c:	f000 8081 	beq.w	8005e52 <HAL_RCCEx_GetPeriphCLKFreq+0x2be>
 8005d50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
    switch (srcclk)
 8005d54:	f47f af76 	bne.w	8005c44 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005d58:	6810      	ldr	r0, [r2, #0]
          frequency = HSE_VALUE;
 8005d5a:	4b28      	ldr	r3, [pc, #160]	; (8005dfc <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8005d5c:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8005d60:	e07b      	b.n	8005e5a <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005d62:	6810      	ldr	r0, [r2, #0]
 8005d64:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8005d68:	f43f af63 	beq.w	8005c32 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005d6c:	a801      	add	r0, sp, #4
 8005d6e:	f7ff fd19 	bl	80057a4 <HAL_RCCEx_GetPLL2ClockFreq>
 8005d72:	e034      	b.n	8005dde <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005d74:	6810      	ldr	r0, [r2, #0]
 8005d76:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8005d7a:	f43f af5a 	beq.w	8005c32 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005d7e:	a801      	add	r0, sp, #4
 8005d80:	f7ff fdb8 	bl	80058f4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005d84:	e02b      	b.n	8005dde <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8005d86:	f5a0 2300 	sub.w	r3, r0, #524288	; 0x80000
 8005d8a:	430b      	orrs	r3, r1
 8005d8c:	d117      	bne.n	8005dbe <HAL_RCCEx_GetPeriphCLKFreq+0x22a>
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8005d8e:	4b19      	ldr	r3, [pc, #100]	; (8005df4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8005d90:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005d92:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
    switch (srcclk)
 8005d96:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8005d9a:	d006      	beq.n	8005daa <HAL_RCCEx_GetPeriphCLKFreq+0x216>
 8005d9c:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 8005da0:	d096      	beq.n	8005cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
 8005da2:	2a00      	cmp	r2, #0
 8005da4:	f47f af4e 	bne.w	8005c44 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
 8005da8:	e73b      	b.n	8005c22 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005daa:	6818      	ldr	r0, [r3, #0]
 8005dac:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8005db0:	f43f af3f 	beq.w	8005c32 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005db4:	a801      	add	r0, sp, #4
 8005db6:	f7ff fd9d 	bl	80058f4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005dba:	9803      	ldr	r0, [sp, #12]
 8005dbc:	e739      	b.n	8005c32 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8005dbe:	f5a0 3380 	sub.w	r3, r0, #65536	; 0x10000
 8005dc2:	430b      	orrs	r3, r1
 8005dc4:	d11e      	bne.n	8005e04 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8005dc6:	4b0b      	ldr	r3, [pc, #44]	; (8005df4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8005dc8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    switch (srcclk)
 8005dca:	03d2      	lsls	r2, r2, #15
 8005dcc:	d409      	bmi.n	8005de2 <HAL_RCCEx_GetPeriphCLKFreq+0x24e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005dce:	6818      	ldr	r0, [r3, #0]
 8005dd0:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8005dd4:	f43f af2d 	beq.w	8005c32 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005dd8:	a801      	add	r0, sp, #4
 8005dda:	f7ff fe33 	bl	8005a44 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005dde:	9802      	ldr	r0, [sp, #8]
 8005de0:	e727      	b.n	8005c32 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005de2:	6818      	ldr	r0, [r3, #0]
 8005de4:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8005de8:	f43f af23 	beq.w	8005c32 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005dec:	a801      	add	r0, sp, #4
 8005dee:	f7ff fcd9 	bl	80057a4 <HAL_RCCEx_GetPLL2ClockFreq>
 8005df2:	e7e2      	b.n	8005dba <HAL_RCCEx_GetPeriphCLKFreq+0x226>
 8005df4:	58024400 	.word	0x58024400
 8005df8:	03d09000 	.word	0x03d09000
 8005dfc:	017d7840 	.word	0x017d7840
 8005e00:	003d0900 	.word	0x003d0900
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8005e04:	f5a0 4380 	sub.w	r3, r0, #16384	; 0x4000
 8005e08:	430b      	orrs	r3, r1
 8005e0a:	d129      	bne.n	8005e60 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8005e0c:	4a21      	ldr	r2, [pc, #132]	; (8005e94 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8005e0e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8005e10:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    switch (srcclk)
 8005e14:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005e18:	d014      	beq.n	8005e44 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>
 8005e1a:	d80d      	bhi.n	8005e38 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
 8005e1c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005e20:	d09f      	beq.n	8005d62 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8005e22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e26:	d0a5      	beq.n	8005d74 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	f47f af0b 	bne.w	8005c44 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
}
 8005e2e:	b005      	add	sp, #20
 8005e30:	f85d eb04 	ldr.w	lr, [sp], #4
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8005e34:	f7ff bca4 	b.w	8005780 <HAL_RCCEx_GetD3PCLK1Freq>
    switch (srcclk)
 8005e38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e3c:	d009      	beq.n	8005e52 <HAL_RCCEx_GetPeriphCLKFreq+0x2be>
 8005e3e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005e42:	e787      	b.n	8005d54 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005e44:	6810      	ldr	r0, [r2, #0]
 8005e46:	f010 0004 	ands.w	r0, r0, #4
 8005e4a:	f43f aef2 	beq.w	8005c32 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005e4e:	6813      	ldr	r3, [r2, #0]
 8005e50:	e6c2      	b.n	8005bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x44>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8005e52:	6810      	ldr	r0, [r2, #0]
          frequency = CSI_VALUE;
 8005e54:	4b10      	ldr	r3, [pc, #64]	; (8005e98 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8005e56:	f410 7080 	ands.w	r0, r0, #256	; 0x100
          frequency = HSE_VALUE;
 8005e5a:	bf18      	it	ne
 8005e5c:	4618      	movne	r0, r3
 8005e5e:	e6e8      	b.n	8005c32 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8005e60:	f5a0 4000 	sub.w	r0, r0, #32768	; 0x8000
 8005e64:	ea50 0301 	orrs.w	r3, r0, r1
 8005e68:	f47f aeec 	bne.w	8005c44 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8005e6c:	4a09      	ldr	r2, [pc, #36]	; (8005e94 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8005e6e:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8005e70:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
    switch (srcclk)
 8005e74:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005e78:	d007      	beq.n	8005e8a <HAL_RCCEx_GetPeriphCLKFreq+0x2f6>
 8005e7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e7e:	f43f af70 	beq.w	8005d62 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	f47f aede 	bne.w	8005c44 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
 8005e88:	e766      	b.n	8005d58 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005e8a:	6810      	ldr	r0, [r2, #0]
 8005e8c:	e7a0      	b.n	8005dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x23c>
        frequency = EXTERNAL_CLOCK_VALUE;
 8005e8e:	4803      	ldr	r0, [pc, #12]	; (8005e9c <HAL_RCCEx_GetPeriphCLKFreq+0x308>)
 8005e90:	e6cf      	b.n	8005c32 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
 8005e92:	bf00      	nop
 8005e94:	58024400 	.word	0x58024400
 8005e98:	003d0900 	.word	0x003d0900
 8005e9c:	00bb8000 	.word	0x00bb8000

08005ea0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005ea0:	b538      	push	{r3, r4, r5, lr}

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8005ea2:	4a0a      	ldr	r2, [pc, #40]	; (8005ecc <HAL_RTC_WaitForSynchro+0x2c>)
{
 8005ea4:	4604      	mov	r4, r0
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8005ea6:	6803      	ldr	r3, [r0, #0]
 8005ea8:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 8005eaa:	f7fc f90b 	bl	80020c4 <HAL_GetTick>
 8005eae:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005eb0:	6823      	ldr	r3, [r4, #0]
 8005eb2:	68db      	ldr	r3, [r3, #12]
 8005eb4:	069b      	lsls	r3, r3, #26
 8005eb6:	d501      	bpl.n	8005ebc <HAL_RTC_WaitForSynchro+0x1c>
      {
        return HAL_TIMEOUT;
      }
    }

  return HAL_OK;
 8005eb8:	2000      	movs	r0, #0
}
 8005eba:	bd38      	pop	{r3, r4, r5, pc}
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005ebc:	f7fc f902 	bl	80020c4 <HAL_GetTick>
 8005ec0:	1b40      	subs	r0, r0, r5
 8005ec2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8005ec6:	d9f3      	bls.n	8005eb0 <HAL_RTC_WaitForSynchro+0x10>
        return HAL_TIMEOUT;
 8005ec8:	2003      	movs	r0, #3
 8005eca:	e7f6      	b.n	8005eba <HAL_RTC_WaitForSynchro+0x1a>
 8005ecc:	0003ff5f 	.word	0x0003ff5f

08005ed0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005ed2:	6803      	ldr	r3, [r0, #0]
{
 8005ed4:	4605      	mov	r5, r0
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005ed6:	68dc      	ldr	r4, [r3, #12]
 8005ed8:	f014 0440 	ands.w	r4, r4, #64	; 0x40
 8005edc:	d118      	bne.n	8005f10 <RTC_EnterInitMode+0x40>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005ede:	f04f 32ff 	mov.w	r2, #4294967295
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
      {
        status = HAL_TIMEOUT;
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005ee2:	2703      	movs	r7, #3
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005ee4:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8005ee6:	f7fc f8ed 	bl	80020c4 <HAL_GetTick>
 8005eea:	4606      	mov	r6, r0
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005eec:	682b      	ldr	r3, [r5, #0]
 8005eee:	68db      	ldr	r3, [r3, #12]
 8005ef0:	065b      	lsls	r3, r3, #25
 8005ef2:	d401      	bmi.n	8005ef8 <RTC_EnterInitMode+0x28>
 8005ef4:	2c03      	cmp	r4, #3
 8005ef6:	d101      	bne.n	8005efc <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
}
 8005ef8:	4620      	mov	r0, r4
 8005efa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005efc:	f7fc f8e2 	bl	80020c4 <HAL_GetTick>
 8005f00:	1b80      	subs	r0, r0, r6
 8005f02:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8005f06:	d9f1      	bls.n	8005eec <RTC_EnterInitMode+0x1c>
        status = HAL_TIMEOUT;
 8005f08:	2403      	movs	r4, #3
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005f0a:	f885 7021 	strb.w	r7, [r5, #33]	; 0x21
 8005f0e:	e7ed      	b.n	8005eec <RTC_EnterInitMode+0x1c>
  HAL_StatusTypeDef status = HAL_OK;
 8005f10:	2400      	movs	r4, #0
 8005f12:	e7f1      	b.n	8005ef8 <RTC_EnterInitMode+0x28>

08005f14 <RTC_ExitInitMode>:

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 8005f14:	4b10      	ldr	r3, [pc, #64]	; (8005f58 <RTC_ExitInitMode+0x44>)
 8005f16:	68da      	ldr	r2, [r3, #12]
 8005f18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
{
 8005f1c:	b510      	push	{r4, lr}
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 8005f1e:	60da      	str	r2, [r3, #12]
{
 8005f20:	4604      	mov	r4, r0
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8005f22:	689a      	ldr	r2, [r3, #8]
 8005f24:	0692      	lsls	r2, r2, #26
 8005f26:	d406      	bmi.n	8005f36 <RTC_ExitInitMode+0x22>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005f28:	f7ff ffba 	bl	8005ea0 <HAL_RTC_WaitForSynchro>
 8005f2c:	b110      	cbz	r0, 8005f34 <RTC_ExitInitMode+0x20>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005f2e:	2003      	movs	r0, #3
 8005f30:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
  }

  return status;
}
 8005f34:	bd10      	pop	{r4, pc}
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005f36:	689a      	ldr	r2, [r3, #8]
 8005f38:	f022 0220 	bic.w	r2, r2, #32
 8005f3c:	609a      	str	r2, [r3, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005f3e:	f7ff ffaf 	bl	8005ea0 <HAL_RTC_WaitForSynchro>
 8005f42:	b110      	cbz	r0, 8005f4a <RTC_ExitInitMode+0x36>
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005f44:	2003      	movs	r0, #3
 8005f46:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005f4a:	4a03      	ldr	r2, [pc, #12]	; (8005f58 <RTC_ExitInitMode+0x44>)
 8005f4c:	6893      	ldr	r3, [r2, #8]
 8005f4e:	f043 0320 	orr.w	r3, r3, #32
 8005f52:	6093      	str	r3, [r2, #8]
  return status;
 8005f54:	e7ee      	b.n	8005f34 <RTC_ExitInitMode+0x20>
 8005f56:	bf00      	nop
 8005f58:	58004000 	.word	0x58004000

08005f5c <HAL_RTC_Init>:
{
 8005f5c:	b538      	push	{r3, r4, r5, lr}
  if(hrtc != NULL)
 8005f5e:	4604      	mov	r4, r0
 8005f60:	2800      	cmp	r0, #0
 8005f62:	d045      	beq.n	8005ff0 <HAL_RTC_Init+0x94>
    if(hrtc->State == HAL_RTC_STATE_RESET)
 8005f64:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8005f68:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005f6c:	b91b      	cbnz	r3, 8005f76 <HAL_RTC_Init+0x1a>
      hrtc->Lock = HAL_UNLOCKED;
 8005f6e:	f880 2020 	strb.w	r2, [r0, #32]
      HAL_RTC_MspInit(hrtc);
 8005f72:	f7fb fcd9 	bl	8001928 <HAL_RTC_MspInit>
    hrtc->State = HAL_RTC_STATE_BUSY;
 8005f76:	2302      	movs	r3, #2
 8005f78:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8005f7c:	6823      	ldr	r3, [r4, #0]
 8005f7e:	68da      	ldr	r2, [r3, #12]
 8005f80:	06d2      	lsls	r2, r2, #27
 8005f82:	d504      	bpl.n	8005f8e <HAL_RTC_Init+0x32>
      hrtc->State = HAL_RTC_STATE_READY;
 8005f84:	2301      	movs	r3, #1
 8005f86:	2000      	movs	r0, #0
 8005f88:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
}
 8005f8c:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005f8e:	22ca      	movs	r2, #202	; 0xca
      status = RTC_EnterInitMode(hrtc);
 8005f90:	4620      	mov	r0, r4
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005f92:	625a      	str	r2, [r3, #36]	; 0x24
 8005f94:	2253      	movs	r2, #83	; 0x53
 8005f96:	625a      	str	r2, [r3, #36]	; 0x24
      status = RTC_EnterInitMode(hrtc);
 8005f98:	f7ff ff9a 	bl	8005ed0 <RTC_EnterInitMode>
      if (status == HAL_OK)
 8005f9c:	bb10      	cbnz	r0, 8005fe4 <HAL_RTC_Init+0x88>
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8005f9e:	6822      	ldr	r2, [r4, #0]
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005fa0:	6920      	ldr	r0, [r4, #16]
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8005fa2:	6893      	ldr	r3, [r2, #8]
 8005fa4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005fa8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fac:	6093      	str	r3, [r2, #8]
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005fae:	6863      	ldr	r3, [r4, #4]
 8005fb0:	6891      	ldr	r1, [r2, #8]
 8005fb2:	4303      	orrs	r3, r0
 8005fb4:	69a0      	ldr	r0, [r4, #24]
 8005fb6:	4303      	orrs	r3, r0
        status = RTC_ExitInitMode(hrtc);
 8005fb8:	4620      	mov	r0, r4
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005fba:	430b      	orrs	r3, r1
 8005fbc:	6093      	str	r3, [r2, #8]
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 8005fbe:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
 8005fc2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8005fc6:	6113      	str	r3, [r2, #16]
        status = RTC_ExitInitMode(hrtc);
 8005fc8:	f7ff ffa4 	bl	8005f14 <RTC_ExitInitMode>
      if(status == HAL_OK)
 8005fcc:	b950      	cbnz	r0, 8005fe4 <HAL_RTC_Init+0x88>
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8005fce:	6822      	ldr	r2, [r4, #0]
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005fd0:	6965      	ldr	r5, [r4, #20]
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8005fd2:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8005fd4:	f023 0303 	bic.w	r3, r3, #3
 8005fd8:	64d3      	str	r3, [r2, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005fda:	69e3      	ldr	r3, [r4, #28]
 8005fdc:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 8005fde:	432b      	orrs	r3, r5
 8005fe0:	430b      	orrs	r3, r1
 8005fe2:	64d3      	str	r3, [r2, #76]	; 0x4c
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005fe4:	6823      	ldr	r3, [r4, #0]
 8005fe6:	22ff      	movs	r2, #255	; 0xff
 8005fe8:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 8005fea:	2800      	cmp	r0, #0
 8005fec:	d0ca      	beq.n	8005f84 <HAL_RTC_Init+0x28>
 8005fee:	e7cd      	b.n	8005f8c <HAL_RTC_Init+0x30>
  HAL_StatusTypeDef status = HAL_ERROR;
 8005ff0:	2001      	movs	r0, #1
 8005ff2:	e7cb      	b.n	8005f8c <HAL_RTC_Init+0x30>

08005ff4 <SAI_Disable>:
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8005ff4:	4b0d      	ldr	r3, [pc, #52]	; (800602c <SAI_Disable+0x38>)
  HAL_StatusTypeDef status = HAL_OK;

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8005ff6:	6801      	ldr	r1, [r0, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8005ff8:	681a      	ldr	r2, [r3, #0]
 8005ffa:	f641 3358 	movw	r3, #7000	; 0x1b58
 8005ffe:	fbb2 f2f3 	udiv	r2, r2, r3
  __HAL_SAI_DISABLE(hsai);
 8006002:	680b      	ldr	r3, [r1, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8006004:	0092      	lsls	r2, r2, #2
  __HAL_SAI_DISABLE(hsai);
 8006006:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800600a:	600b      	str	r3, [r1, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800600c:	b93a      	cbnz	r2, 800601e <SAI_Disable+0x2a>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800600e:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
 8006012:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006016:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
      status = HAL_TIMEOUT;
 800601a:	2003      	movs	r0, #3
      break;
 800601c:	4770      	bx	lr
    }
    count--;
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800601e:	680b      	ldr	r3, [r1, #0]
    count--;
 8006020:	3a01      	subs	r2, #1
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8006022:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 8006026:	d1f1      	bne.n	800600c <SAI_Disable+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 8006028:	4618      	mov	r0, r3

  return status;
}
 800602a:	4770      	bx	lr
 800602c:	24000000 	.word	0x24000000

08006030 <HAL_SAI_Init>:
{
 8006030:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (hsai == NULL)
 8006034:	4604      	mov	r4, r0
 8006036:	b920      	cbnz	r0, 8006042 <HAL_SAI_Init+0x12>
    return HAL_ERROR;
 8006038:	f04f 0801 	mov.w	r8, #1
}
 800603c:	4640      	mov	r0, r8
 800603e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8006042:	f7fc f85b 	bl	80020fc <HAL_GetREVID>
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8006046:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 800604a:	f8df 92f4 	ldr.w	r9, [pc, #756]	; 8006340 <HAL_SAI_Init+0x310>
 800604e:	2b01      	cmp	r3, #1
 8006050:	6823      	ldr	r3, [r4, #0]
 8006052:	d10a      	bne.n	800606a <HAL_SAI_Init+0x3a>
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8006054:	454b      	cmp	r3, r9
 8006056:	d002      	beq.n	800605e <HAL_SAI_Init+0x2e>
 8006058:	4aaf      	ldr	r2, [pc, #700]	; (8006318 <HAL_SAI_Init+0x2e8>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d1ec      	bne.n	8006038 <HAL_SAI_Init+0x8>
 800605e:	6862      	ldr	r2, [r4, #4]
 8006060:	2a01      	cmp	r2, #1
 8006062:	d1e9      	bne.n	8006038 <HAL_SAI_Init+0x8>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8006064:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8006066:	2a00      	cmp	r2, #0
 8006068:	d1e6      	bne.n	8006038 <HAL_SAI_Init+0x8>
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800606a:	454b      	cmp	r3, r9
 800606c:	d018      	beq.n	80060a0 <HAL_SAI_Init+0x70>
 800606e:	4aab      	ldr	r2, [pc, #684]	; (800631c <HAL_SAI_Init+0x2ec>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d015      	beq.n	80060a0 <HAL_SAI_Init+0x70>
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8006074:	f502 7278 	add.w	r2, r2, #992	; 0x3e0
 8006078:	4293      	cmp	r3, r2
 800607a:	d038      	beq.n	80060ee <HAL_SAI_Init+0xbe>
 800607c:	3220      	adds	r2, #32
 800607e:	4293      	cmp	r3, r2
 8006080:	d035      	beq.n	80060ee <HAL_SAI_Init+0xbe>
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8006082:	f502 7278 	add.w	r2, r2, #992	; 0x3e0
 8006086:	4293      	cmp	r3, r2
 8006088:	d033      	beq.n	80060f2 <HAL_SAI_Init+0xc2>
 800608a:	3220      	adds	r2, #32
 800608c:	4293      	cmp	r3, r2
 800608e:	d030      	beq.n	80060f2 <HAL_SAI_Init+0xc2>
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 8006090:	4aa1      	ldr	r2, [pc, #644]	; (8006318 <HAL_SAI_Init+0x2e8>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d002      	beq.n	800609c <HAL_SAI_Init+0x6c>
 8006096:	3220      	adds	r2, #32
 8006098:	4293      	cmp	r3, r2
 800609a:	d1cd      	bne.n	8006038 <HAL_SAI_Init+0x8>
    SaiBaseAddress = SAI4;
 800609c:	4da0      	ldr	r5, [pc, #640]	; (8006320 <HAL_SAI_Init+0x2f0>)
 800609e:	e000      	b.n	80060a2 <HAL_SAI_Init+0x72>
    SaiBaseAddress = SAI1;
 80060a0:	4da0      	ldr	r5, [pc, #640]	; (8006324 <HAL_SAI_Init+0x2f4>)
  if (hsai->State == HAL_SAI_STATE_RESET)
 80060a2:	f894 3091 	ldrb.w	r3, [r4, #145]	; 0x91
 80060a6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80060aa:	b923      	cbnz	r3, 80060b6 <HAL_SAI_Init+0x86>
    HAL_SAI_MspInit(hsai);
 80060ac:	4620      	mov	r0, r4
    hsai->Lock = HAL_UNLOCKED;
 80060ae:	f884 2090 	strb.w	r2, [r4, #144]	; 0x90
    HAL_SAI_MspInit(hsai);
 80060b2:	f7fb fe7d 	bl	8001db0 <HAL_SAI_MspInit>
  if(SAI_Disable(hsai) != HAL_OK)
 80060b6:	4620      	mov	r0, r4
 80060b8:	f7ff ff9c 	bl	8005ff4 <SAI_Disable>
 80060bc:	4680      	mov	r8, r0
 80060be:	2800      	cmp	r0, #0
 80060c0:	d1ba      	bne.n	8006038 <HAL_SAI_Init+0x8>
  hsai->State = HAL_SAI_STATE_BUSY;
 80060c2:	2302      	movs	r3, #2
 80060c4:	f884 3091 	strb.w	r3, [r4, #145]	; 0x91
  switch (hsai->Init.SynchroExt)
 80060c8:	68e3      	ldr	r3, [r4, #12]
 80060ca:	2b01      	cmp	r3, #1
 80060cc:	d013      	beq.n	80060f6 <HAL_SAI_Init+0xc6>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 80060ce:	2b02      	cmp	r3, #2
 80060d0:	bf14      	ite	ne
 80060d2:	2300      	movne	r3, #0
 80060d4:	2320      	moveq	r3, #32
  switch (hsai->Init.Synchro)
 80060d6:	68a2      	ldr	r2, [r4, #8]
 80060d8:	3a01      	subs	r2, #1
 80060da:	2a04      	cmp	r2, #4
 80060dc:	f200 8117 	bhi.w	800630e <HAL_SAI_Init+0x2de>
 80060e0:	e8df f012 	tbh	[pc, r2, lsl #1]
 80060e4:	010c000b 	.word	0x010c000b
 80060e8:	010f010a 	.word	0x010f010a
 80060ec:	0112      	.short	0x0112
    SaiBaseAddress = SAI2;
 80060ee:	4d8e      	ldr	r5, [pc, #568]	; (8006328 <HAL_SAI_Init+0x2f8>)
 80060f0:	e7d7      	b.n	80060a2 <HAL_SAI_Init+0x72>
    SaiBaseAddress = SAI3;
 80060f2:	4d8e      	ldr	r5, [pc, #568]	; (800632c <HAL_SAI_Init+0x2fc>)
 80060f4:	e7d5      	b.n	80060a2 <HAL_SAI_Init+0x72>
  switch (hsai->Init.SynchroExt)
 80060f6:	2310      	movs	r3, #16
 80060f8:	e7ed      	b.n	80060d6 <HAL_SAI_Init+0xa6>
  switch (hsai->Init.Synchro)
 80060fa:	f44f 6780 	mov.w	r7, #1024	; 0x400
  SaiBaseAddress->GCR = tmpregisterGCR;
 80060fe:	602b      	str	r3, [r5, #0]
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8006100:	6a23      	ldr	r3, [r4, #32]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d058      	beq.n	80061b8 <HAL_SAI_Init+0x188>
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8006106:	6823      	ldr	r3, [r4, #0]
 8006108:	454b      	cmp	r3, r9
 800610a:	d003      	beq.n	8006114 <HAL_SAI_Init+0xe4>
 800610c:	4a83      	ldr	r2, [pc, #524]	; (800631c <HAL_SAI_Init+0x2ec>)
 800610e:	4293      	cmp	r3, r2
 8006110:	f040 80ff 	bne.w	8006312 <HAL_SAI_Init+0x2e2>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8006114:	f44f 7080 	mov.w	r0, #256	; 0x100
 8006118:	2100      	movs	r1, #0
 800611a:	f7ff fd3b 	bl	8005b94 <HAL_RCCEx_GetPeriphCLKFreq>
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800611e:	6823      	ldr	r3, [r4, #0]
 8006120:	4a83      	ldr	r2, [pc, #524]	; (8006330 <HAL_SAI_Init+0x300>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d002      	beq.n	800612c <HAL_SAI_Init+0xfc>
 8006126:	3220      	adds	r2, #32
 8006128:	4293      	cmp	r3, r2
 800612a:	d104      	bne.n	8006136 <HAL_SAI_Init+0x106>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800612c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8006130:	2100      	movs	r1, #0
 8006132:	f7ff fd2f 	bl	8005b94 <HAL_RCCEx_GetPeriphCLKFreq>
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8006136:	6823      	ldr	r3, [r4, #0]
 8006138:	4a7e      	ldr	r2, [pc, #504]	; (8006334 <HAL_SAI_Init+0x304>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d002      	beq.n	8006144 <HAL_SAI_Init+0x114>
 800613e:	3220      	adds	r2, #32
 8006140:	4293      	cmp	r3, r2
 8006142:	d104      	bne.n	800614e <HAL_SAI_Init+0x11e>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 8006144:	f44f 7000 	mov.w	r0, #512	; 0x200
 8006148:	2100      	movs	r1, #0
 800614a:	f7ff fd23 	bl	8005b94 <HAL_RCCEx_GetPeriphCLKFreq>
    if (hsai->Instance == SAI4_Block_A)
 800614e:	6822      	ldr	r2, [r4, #0]
 8006150:	4b71      	ldr	r3, [pc, #452]	; (8006318 <HAL_SAI_Init+0x2e8>)
 8006152:	429a      	cmp	r2, r3
 8006154:	d104      	bne.n	8006160 <HAL_SAI_Init+0x130>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 8006156:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800615a:	2100      	movs	r1, #0
 800615c:	f7ff fd1a 	bl	8005b94 <HAL_RCCEx_GetPeriphCLKFreq>
    if (hsai->Instance == SAI4_Block_B)
 8006160:	6822      	ldr	r2, [r4, #0]
 8006162:	4b75      	ldr	r3, [pc, #468]	; (8006338 <HAL_SAI_Init+0x308>)
 8006164:	429a      	cmp	r2, r3
 8006166:	d104      	bne.n	8006172 <HAL_SAI_Init+0x142>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 8006168:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800616c:	2100      	movs	r1, #0
 800616e:	f7ff fd11 	bl	8005b94 <HAL_RCCEx_GetPeriphCLKFreq>
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8006172:	69a3      	ldr	r3, [r4, #24]
      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8006174:	6c62      	ldr	r2, [r4, #68]	; 0x44
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8006176:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800617a:	f8d4 c020 	ldr.w	ip, [r4, #32]
 800617e:	f040 80e8 	bne.w	8006352 <HAL_SAI_Init+0x322>
      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8006182:	2a04      	cmp	r2, #4
 8006184:	f000 80e0 	beq.w	8006348 <HAL_SAI_Init+0x318>
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 8006188:	2a08      	cmp	r2, #8
 800618a:	f000 80df 	beq.w	800634c <HAL_SAI_Init+0x31c>
        tmpframelength = hsai->FrameInit.FrameLength;
 800618e:	6d61      	ldr	r1, [r4, #84]	; 0x54
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8006190:	260a      	movs	r6, #10
 8006192:	4346      	muls	r6, r0
 8006194:	fb0c f001 	mul.w	r0, ip, r1
 8006198:	fbb6 f0f0 	udiv	r0, r6, r0
    hsai->Init.Mckdiv = tmpval / 10U;
 800619c:	210a      	movs	r1, #10
 800619e:	fbb0 f3f1 	udiv	r3, r0, r1
    if ((tmpval % 10U) > 8U)
 80061a2:	fb01 0013 	mls	r0, r1, r3, r0
 80061a6:	2809      	cmp	r0, #9
      hsai->Init.Mckdiv += 1U;
 80061a8:	bf08      	it	eq
 80061aa:	3301      	addeq	r3, #1
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80061ac:	2a04      	cmp	r2, #4
      hsai->Init.Mckdiv += 1U;
 80061ae:	6263      	str	r3, [r4, #36]	; 0x24
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 80061b0:	bf02      	ittt	eq
 80061b2:	6a63      	ldreq	r3, [r4, #36]	; 0x24
 80061b4:	085b      	lsreq	r3, r3, #1
 80061b6:	6263      	streq	r3, [r4, #36]	; 0x24
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80061b8:	6866      	ldr	r6, [r4, #4]
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 80061ba:	6d23      	ldr	r3, [r4, #80]	; 0x50
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80061bc:	f036 0602 	bics.w	r6, r6, #2
 80061c0:	f040 80d6 	bne.w	8006370 <HAL_SAI_Init+0x340>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 80061c4:	2b01      	cmp	r3, #1
 80061c6:	bf18      	it	ne
 80061c8:	f44f 7600 	movne.w	r6, #512	; 0x200
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 80061cc:	f7fb ff96 	bl	80020fc <HAL_GetREVID>
 80061d0:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 80061d4:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80061d6:	69a1      	ldr	r1, [r4, #24]
 80061d8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80061da:	e9d4 3e00 	ldrd	r3, lr, [r4]
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80061de:	f8d3 a000 	ldr.w	sl, [r3]
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 80061e2:	f0c0 80cb 	bcc.w	800637c <HAL_SAI_Init+0x34c>
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80061e6:	ea4e 0e02 	orr.w	lr, lr, r2
 80061ea:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80061ec:	f8df c154 	ldr.w	ip, [pc, #340]	; 8006344 <HAL_SAI_Init+0x314>
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80061f0:	ea4e 0e02 	orr.w	lr, lr, r2
 80061f4:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80061f6:	ea0a 0c0c 	and.w	ip, sl, ip
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80061fa:	ea4e 0e02 	orr.w	lr, lr, r2
 80061fe:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8006200:	f8c3 c000 	str.w	ip, [r3]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006204:	ea4e 0e02 	orr.w	lr, lr, r2
 8006208:	6962      	ldr	r2, [r4, #20]
 800620a:	f8d3 c000 	ldr.w	ip, [r3]
 800620e:	ea4e 0202 	orr.w	r2, lr, r2
 8006212:	4311      	orrs	r1, r2
 8006214:	6922      	ldr	r2, [r4, #16]
 8006216:	4308      	orrs	r0, r1
 8006218:	4310      	orrs	r0, r2
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800621a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800621c:	ea40 0c0c 	orr.w	ip, r0, ip
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 8006220:	454b      	cmp	r3, r9
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006222:	ea4c 5c02 	orr.w	ip, ip, r2, lsl #20
 8006226:	ea4c 0707 	orr.w	r7, ip, r7
 800622a:	ea46 0607 	orr.w	r6, r6, r7
 800622e:	601e      	str	r6, [r3, #0]
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8006230:	685a      	ldr	r2, [r3, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8006232:	6b20      	ldr	r0, [r4, #48]	; 0x30
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8006234:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8006238:	f022 020f 	bic.w	r2, r2, #15
 800623c:	605a      	str	r2, [r3, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800623e:	69e2      	ldr	r2, [r4, #28]
 8006240:	6859      	ldr	r1, [r3, #4]
 8006242:	ea42 0200 	orr.w	r2, r2, r0
 8006246:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8006248:	ea42 0200 	orr.w	r2, r2, r0
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800624c:	6de0      	ldr	r0, [r4, #92]	; 0x5c
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800624e:	ea42 0201 	orr.w	r2, r2, r1
 8006252:	605a      	str	r2, [r3, #4]
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8006254:	4a39      	ldr	r2, [pc, #228]	; (800633c <HAL_SAI_Init+0x30c>)
 8006256:	6899      	ldr	r1, [r3, #8]
 8006258:	ea02 0201 	and.w	r2, r2, r1
 800625c:	609a      	str	r2, [r3, #8]
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800625e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006260:	6899      	ldr	r1, [r3, #8]
 8006262:	ea42 0200 	orr.w	r2, r2, r0
 8006266:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8006268:	ea42 0200 	orr.w	r2, r2, r0
 800626c:	ea42 0201 	orr.w	r2, r2, r1
 8006270:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8006272:	f101 31ff 	add.w	r1, r1, #4294967295
 8006276:	ea42 0201 	orr.w	r2, r2, r1
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800627a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800627c:	f101 31ff 	add.w	r1, r1, #4294967295
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8006280:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8006284:	609a      	str	r2, [r3, #8]
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8006286:	68da      	ldr	r2, [r3, #12]
 8006288:	f422 627d 	bic.w	r2, r2, #4048	; 0xfd0
 800628c:	f022 020f 	bic.w	r2, r2, #15
 8006290:	ea4f 4202 	mov.w	r2, r2, lsl #16
 8006294:	ea4f 4212 	mov.w	r2, r2, lsr #16
 8006298:	60da      	str	r2, [r3, #12]
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800629a:	68d9      	ldr	r1, [r3, #12]
 800629c:	e9d4 201a 	ldrd	r2, r0, [r4, #104]	; 0x68
 80062a0:	ea42 0200 	orr.w	r2, r2, r0
 80062a4:	ea42 0201 	orr.w	r2, r2, r1
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 80062a8:	6f61      	ldr	r1, [r4, #116]	; 0x74
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80062aa:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 80062ae:	6f21      	ldr	r1, [r4, #112]	; 0x70
 80062b0:	f101 31ff 	add.w	r1, r1, #4294967295
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80062b4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80062b8:	60da      	str	r2, [r3, #12]
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 80062ba:	d002      	beq.n	80062c2 <HAL_SAI_Init+0x292>
 80062bc:	4a16      	ldr	r2, [pc, #88]	; (8006318 <HAL_SAI_Init+0x2e8>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d111      	bne.n	80062e6 <HAL_SAI_Init+0x2b6>
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 80062c2:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80062c4:	f023 0301 	bic.w	r3, r3, #1
 80062c8:	646b      	str	r3, [r5, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 80062ca:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80062ce:	2b01      	cmp	r3, #1
 80062d0:	d109      	bne.n	80062e6 <HAL_SAI_Init+0x2b6>
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 80062d2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80062d4:	1e5a      	subs	r2, r3, #1
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 80062d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80062d8:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80062dc:	646b      	str	r3, [r5, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 80062de:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80062e0:	f043 0301 	orr.w	r3, r3, #1
 80062e4:	646b      	str	r3, [r5, #68]	; 0x44
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80062e6:	2300      	movs	r3, #0
  hsai->State = HAL_SAI_STATE_READY;
 80062e8:	2201      	movs	r2, #1
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80062ea:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
  __HAL_UNLOCK(hsai);
 80062ee:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
  hsai->State = HAL_SAI_STATE_READY;
 80062f2:	f884 2091 	strb.w	r2, [r4, #145]	; 0x91
  return HAL_OK;
 80062f6:	e6a1      	b.n	800603c <HAL_SAI_Init+0xc>
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 80062f8:	f043 0301 	orr.w	r3, r3, #1
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80062fc:	f44f 6700 	mov.w	r7, #2048	; 0x800
      break;
 8006300:	e6fd      	b.n	80060fe <HAL_SAI_Init+0xce>
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 8006302:	f043 0302 	orr.w	r3, r3, #2
      break;
 8006306:	e7f9      	b.n	80062fc <HAL_SAI_Init+0x2cc>
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 8006308:	f043 0303 	orr.w	r3, r3, #3
 800630c:	e7f6      	b.n	80062fc <HAL_SAI_Init+0x2cc>
      syncen_bits = 0;
 800630e:	2700      	movs	r7, #0
 8006310:	e6f5      	b.n	80060fe <HAL_SAI_Init+0xce>
    uint32_t freq = 0;
 8006312:	2000      	movs	r0, #0
 8006314:	e703      	b.n	800611e <HAL_SAI_Init+0xee>
 8006316:	bf00      	nop
 8006318:	58005404 	.word	0x58005404
 800631c:	40015824 	.word	0x40015824
 8006320:	58005400 	.word	0x58005400
 8006324:	40015800 	.word	0x40015800
 8006328:	40015c00 	.word	0x40015c00
 800632c:	40016000 	.word	0x40016000
 8006330:	40015c04 	.word	0x40015c04
 8006334:	40016004 	.word	0x40016004
 8006338:	58005424 	.word	0x58005424
 800633c:	fff88000 	.word	0xfff88000
 8006340:	40015804 	.word	0x40015804
 8006344:	f005c010 	.word	0xf005c010
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 8006348:	2140      	movs	r1, #64	; 0x40
 800634a:	e721      	b.n	8006190 <HAL_SAI_Init+0x160>
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 800634c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006350:	e71e      	b.n	8006190 <HAL_SAI_Init+0x160>
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8006352:	6aa6      	ldr	r6, [r4, #40]	; 0x28
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8006354:	210a      	movs	r1, #10
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8006356:	f1b6 6f80 	cmp.w	r6, #67108864	; 0x4000000
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800635a:	fb01 f000 	mul.w	r0, r1, r0
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800635e:	bf0c      	ite	eq
 8006360:	2302      	moveq	r3, #2
 8006362:	2301      	movne	r3, #1
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8006364:	fb0c f303 	mul.w	r3, ip, r3
 8006368:	021b      	lsls	r3, r3, #8
 800636a:	fbb0 f0f3 	udiv	r0, r0, r3
 800636e:	e715      	b.n	800619c <HAL_SAI_Init+0x16c>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8006370:	2b01      	cmp	r3, #1
 8006372:	bf14      	ite	ne
 8006374:	2600      	movne	r6, #0
 8006376:	f44f 7600 	moveq.w	r6, #512	; 0x200
 800637a:	e727      	b.n	80061cc <HAL_SAI_Init+0x19c>
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800637c:	ea4e 0e02 	orr.w	lr, lr, r2
 8006380:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8006382:	f8df c02c 	ldr.w	ip, [pc, #44]	; 80063b0 <HAL_SAI_Init+0x380>
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006386:	ea4e 0e02 	orr.w	lr, lr, r2
 800638a:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800638c:	ea0a 0c0c 	and.w	ip, sl, ip
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006390:	ea4e 0e02 	orr.w	lr, lr, r2
 8006394:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8006396:	f8c3 c000 	str.w	ip, [r3]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800639a:	ea4e 0e02 	orr.w	lr, lr, r2
 800639e:	6962      	ldr	r2, [r4, #20]
 80063a0:	f8d3 c000 	ldr.w	ip, [r3]
 80063a4:	ea4e 0202 	orr.w	r2, lr, r2
 80063a8:	4311      	orrs	r1, r2
 80063aa:	4308      	orrs	r0, r1
 80063ac:	e735      	b.n	800621a <HAL_SAI_Init+0x1ea>
 80063ae:	bf00      	nop
 80063b0:	f805c010 	.word	0xf805c010

080063b4 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 80063b4:	b538      	push	{r3, r4, r5, lr}
 80063b6:	460d      	mov	r5, r1
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 80063b8:	4604      	mov	r4, r0
 80063ba:	b1f0      	cbz	r0, 80063fa <HAL_SDRAM_Init+0x46>
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 80063bc:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80063c0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80063c4:	b91b      	cbnz	r3, 80063ce <HAL_SDRAM_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80063c6:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80063ca:	f7fb fc7d 	bl	8001cc8 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80063ce:	2302      	movs	r3, #2

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80063d0:	1d21      	adds	r1, r4, #4
 80063d2:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80063d4:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80063d8:	f000 fd1d 	bl	8006e16 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 80063dc:	6862      	ldr	r2, [r4, #4]
 80063de:	4629      	mov	r1, r5
 80063e0:	6820      	ldr	r0, [r4, #0]
 80063e2:	f000 fd53 	bl	8006e8c <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 80063e6:	4a06      	ldr	r2, [pc, #24]	; (8006400 <HAL_SDRAM_Init+0x4c>)
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;

  return HAL_OK;
 80063e8:	2000      	movs	r0, #0
  __FMC_ENABLE();
 80063ea:	6813      	ldr	r3, [r2, #0]
 80063ec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80063f0:	6013      	str	r3, [r2, #0]
  hsdram->State = HAL_SDRAM_STATE_READY;
 80063f2:	2301      	movs	r3, #1
 80063f4:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 80063f8:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80063fa:	2001      	movs	r0, #1
 80063fc:	e7fc      	b.n	80063f8 <HAL_SDRAM_Init+0x44>
 80063fe:	bf00      	nop
 8006400:	52004000 	.word	0x52004000

08006404 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006406:	4604      	mov	r4, r0
 8006408:	b908      	cbnz	r0, 800640e <HAL_SPI_Init+0xa>
  {
    return HAL_ERROR;
 800640a:	2001      	movs	r0, #1

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
  hspi->State     = HAL_SPI_STATE_READY;

  return HAL_OK;
}
 800640c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800640e:	6802      	ldr	r2, [r0, #0]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006410:	2300      	movs	r3, #0
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8006412:	494d      	ldr	r1, [pc, #308]	; (8006548 <HAL_SPI_Init+0x144>)
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006414:	6283      	str	r3, [r0, #40]	; 0x28
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8006416:	428a      	cmp	r2, r1
 8006418:	68c3      	ldr	r3, [r0, #12]
 800641a:	d009      	beq.n	8006430 <HAL_SPI_Init+0x2c>
 800641c:	f5a1 4178 	sub.w	r1, r1, #63488	; 0xf800
 8006420:	428a      	cmp	r2, r1
 8006422:	d005      	beq.n	8006430 <HAL_SPI_Init+0x2c>
 8006424:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006428:	428a      	cmp	r2, r1
 800642a:	d001      	beq.n	8006430 <HAL_SPI_Init+0x2c>
 800642c:	2b0f      	cmp	r3, #15
 800642e:	d8ec      	bhi.n	800640a <HAL_SPI_Init+0x6>
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006430:	6be1      	ldr	r1, [r4, #60]	; 0x3c
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8006432:	3308      	adds	r3, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006434:	0949      	lsrs	r1, r1, #5
  data_size = (data_size + 7UL) / 8UL;
 8006436:	08db      	lsrs	r3, r3, #3

  return data_size * fifo_threashold;
 8006438:	fb01 3303 	mla	r3, r1, r3, r3
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800643c:	4942      	ldr	r1, [pc, #264]	; (8006548 <HAL_SPI_Init+0x144>)
 800643e:	428a      	cmp	r2, r1
 8006440:	d073      	beq.n	800652a <HAL_SPI_Init+0x126>
 8006442:	f5a1 4178 	sub.w	r1, r1, #63488	; 0xf800
 8006446:	428a      	cmp	r2, r1
 8006448:	d06f      	beq.n	800652a <HAL_SPI_Init+0x126>
 800644a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800644e:	428a      	cmp	r2, r1
 8006450:	d06b      	beq.n	800652a <HAL_SPI_Init+0x126>
 8006452:	2b08      	cmp	r3, #8
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006454:	d8d9      	bhi.n	800640a <HAL_SPI_Init+0x6>
  if (hspi->State == HAL_SPI_STATE_RESET)
 8006456:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
 800645a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800645e:	b923      	cbnz	r3, 800646a <HAL_SPI_Init+0x66>
    HAL_SPI_MspInit(hspi);
 8006460:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 8006462:	f884 2080 	strb.w	r2, [r4, #128]	; 0x80
    HAL_SPI_MspInit(hspi);
 8006466:	f7fb fb03 	bl	8001a70 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 800646a:	6822      	ldr	r2, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 800646c:	2302      	movs	r3, #2
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800646e:	6861      	ldr	r1, [r4, #4]
  hspi->State = HAL_SPI_STATE_BUSY;
 8006470:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  __HAL_SPI_DISABLE(hspi);
 8006474:	6813      	ldr	r3, [r2, #0]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006476:	6ba6      	ldr	r6, [r4, #56]	; 0x38
  __HAL_SPI_DISABLE(hspi);
 8006478:	f023 0301 	bic.w	r3, r3, #1
 800647c:	6013      	str	r3, [r2, #0]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800647e:	69a3      	ldr	r3, [r4, #24]
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8006480:	6895      	ldr	r5, [r2, #8]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006482:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8006486:	f405 1cf8 	and.w	ip, r5, #2031616	; 0x1f0000
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800648a:	d104      	bne.n	8006496 <HAL_SPI_Init+0x92>
 800648c:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 8006490:	d14d      	bne.n	800652e <HAL_SPI_Init+0x12a>
 8006492:	2e00      	cmp	r6, #0
 8006494:	d050      	beq.n	8006538 <HAL_SPI_Init+0x134>
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8006496:	f411 0080 	ands.w	r0, r1, #4194304	; 0x400000
 800649a:	68e5      	ldr	r5, [r4, #12]
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800649c:	6817      	ldr	r7, [r2, #0]
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800649e:	d050      	beq.n	8006542 <HAL_SPI_Init+0x13e>
 80064a0:	2d06      	cmp	r5, #6
 80064a2:	d94e      	bls.n	8006542 <HAL_SPI_Init+0x13e>
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80064a4:	f427 7e80 	bic.w	lr, r7, #256	; 0x100
 80064a8:	6d27      	ldr	r7, [r4, #80]	; 0x50
 80064aa:	ea4e 0707 	orr.w	r7, lr, r7
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80064ae:	6017      	str	r7, [r2, #0]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80064b0:	430b      	orrs	r3, r1
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80064b2:	69e7      	ldr	r7, [r4, #28]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80064b4:	4333      	orrs	r3, r6
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80064b6:	433d      	orrs	r5, r7
 80064b8:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 80064ba:	433d      	orrs	r5, r7
 80064bc:	6be7      	ldr	r7, [r4, #60]	; 0x3c
 80064be:	433d      	orrs	r5, r7
 80064c0:	ea45 050c 	orr.w	r5, r5, ip
 80064c4:	6095      	str	r5, [r2, #8]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80064c6:	6b65      	ldr	r5, [r4, #52]	; 0x34
 80064c8:	432b      	orrs	r3, r5
 80064ca:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80064cc:	432b      	orrs	r3, r5
 80064ce:	6925      	ldr	r5, [r4, #16]
 80064d0:	432b      	orrs	r3, r5
 80064d2:	6965      	ldr	r5, [r4, #20]
 80064d4:	432b      	orrs	r3, r5
 80064d6:	6a25      	ldr	r5, [r4, #32]
 80064d8:	432b      	orrs	r3, r5
 80064da:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 80064dc:	432b      	orrs	r3, r5
 80064de:	68a5      	ldr	r5, [r4, #8]
 80064e0:	432b      	orrs	r3, r5
 80064e2:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 80064e4:	432b      	orrs	r3, r5
 80064e6:	6da5      	ldr	r5, [r4, #88]	; 0x58
 80064e8:	432b      	orrs	r3, r5
 80064ea:	60d3      	str	r3, [r2, #12]
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80064ec:	b959      	cbnz	r1, 8006506 <HAL_SPI_Init+0x102>
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80064ee:	6893      	ldr	r3, [r2, #8]
 80064f0:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80064f4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80064f8:	6093      	str	r3, [r2, #8]
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80064fa:	6893      	ldr	r3, [r2, #8]
 80064fc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006500:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006504:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006506:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8006508:	f023 0301 	bic.w	r3, r3, #1
 800650c:	6513      	str	r3, [r2, #80]	; 0x50
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800650e:	b128      	cbz	r0, 800651c <HAL_SPI_Init+0x118>
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8006510:	68d3      	ldr	r3, [r2, #12]
 8006512:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8006514:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006518:	430b      	orrs	r3, r1
 800651a:	60d3      	str	r3, [r2, #12]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800651c:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 800651e:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006520:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8006524:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  return HAL_OK;
 8006528:	e770      	b.n	800640c <HAL_SPI_Init+0x8>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800652a:	2b10      	cmp	r3, #16
 800652c:	e792      	b.n	8006454 <HAL_SPI_Init+0x50>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800652e:	2900      	cmp	r1, #0
 8006530:	d1b1      	bne.n	8006496 <HAL_SPI_Init+0x92>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006532:	f1b6 5f80 	cmp.w	r6, #268435456	; 0x10000000
 8006536:	d1ae      	bne.n	8006496 <HAL_SPI_Init+0x92>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8006538:	6810      	ldr	r0, [r2, #0]
 800653a:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
 800653e:	6010      	str	r0, [r2, #0]
 8006540:	e7a9      	b.n	8006496 <HAL_SPI_Init+0x92>
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8006542:	f427 7780 	bic.w	r7, r7, #256	; 0x100
 8006546:	e7b2      	b.n	80064ae <HAL_SPI_Init+0xaa>
 8006548:	40013000 	.word	0x40013000

0800654c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800654c:	b510      	push	{r4, lr}
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800654e:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006550:	e852 3f00 	ldrex	r3, [r2]
 8006554:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006558:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 800655c:	6802      	ldr	r2, [r0, #0]
 800655e:	2900      	cmp	r1, #0
 8006560:	d1f5      	bne.n	800654e <UART_EndRxTransfer+0x2>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006562:	4c0f      	ldr	r4, [pc, #60]	; (80065a0 <UART_EndRxTransfer+0x54>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006564:	f102 0308 	add.w	r3, r2, #8
 8006568:	e853 3f00 	ldrex	r3, [r3]
 800656c:	4023      	ands	r3, r4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800656e:	f102 0c08 	add.w	ip, r2, #8
 8006572:	e84c 3100 	strex	r1, r3, [ip]
 8006576:	2900      	cmp	r1, #0
 8006578:	d1f4      	bne.n	8006564 <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800657a:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800657c:	2b01      	cmp	r3, #1
 800657e:	d107      	bne.n	8006590 <UART_EndRxTransfer+0x44>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006580:	e852 3f00 	ldrex	r3, [r2]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006584:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006588:	e842 3100 	strex	r1, r3, [r2]
 800658c:	2900      	cmp	r1, #0
 800658e:	d1f7      	bne.n	8006580 <UART_EndRxTransfer+0x34>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006590:	2320      	movs	r3, #32
 8006592:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006596:	2300      	movs	r3, #0
 8006598:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800659a:	6743      	str	r3, [r0, #116]	; 0x74
}
 800659c:	bd10      	pop	{r4, pc}
 800659e:	bf00      	nop
 80065a0:	effffffe 	.word	0xeffffffe

080065a4 <UART_SetConfig>:
{
 80065a4:	b530      	push	{r4, r5, lr}
 80065a6:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 80065a8:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80065aa:	69c0      	ldr	r0, [r0, #28]
{
 80065ac:	b087      	sub	sp, #28
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80065ae:	6921      	ldr	r1, [r4, #16]
 80065b0:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80065b2:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80065b4:	430a      	orrs	r2, r1
 80065b6:	6961      	ldr	r1, [r4, #20]
 80065b8:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80065ba:	4997      	ldr	r1, [pc, #604]	; (8006818 <UART_SetConfig+0x274>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80065bc:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80065be:	4029      	ands	r1, r5
 80065c0:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80065c2:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80065c4:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80065c6:	685a      	ldr	r2, [r3, #4]
 80065c8:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80065cc:	430a      	orrs	r2, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80065ce:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80065d0:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80065d2:	4a92      	ldr	r2, [pc, #584]	; (800681c <UART_SetConfig+0x278>)
 80065d4:	4293      	cmp	r3, r2
    tmpreg |= huart->Init.OneBitSampling;
 80065d6:	bf1c      	itt	ne
 80065d8:	6a22      	ldrne	r2, [r4, #32]
 80065da:	4311      	orrne	r1, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80065dc:	689a      	ldr	r2, [r3, #8]
 80065de:	f022 426e 	bic.w	r2, r2, #3992977408	; 0xee000000
 80065e2:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 80065e6:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80065e8:	6a61      	ldr	r1, [r4, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80065ea:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80065ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065ee:	f022 020f 	bic.w	r2, r2, #15
 80065f2:	430a      	orrs	r2, r1
 80065f4:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 80065f6:	4a8a      	ldr	r2, [pc, #552]	; (8006820 <UART_SetConfig+0x27c>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d11b      	bne.n	8006634 <UART_SetConfig+0x90>
 80065fc:	4b89      	ldr	r3, [pc, #548]	; (8006824 <UART_SetConfig+0x280>)
 80065fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006600:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006604:	2b28      	cmp	r3, #40	; 0x28
 8006606:	d86c      	bhi.n	80066e2 <UART_SetConfig+0x13e>
 8006608:	4a87      	ldr	r2, [pc, #540]	; (8006828 <UART_SetConfig+0x284>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800660a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800660e:	5cd3      	ldrb	r3, [r2, r3]
 8006610:	f040 8132 	bne.w	8006878 <UART_SetConfig+0x2d4>
    switch (clocksource)
 8006614:	2b08      	cmp	r3, #8
 8006616:	f200 80c0 	bhi.w	800679a <UART_SetConfig+0x1f6>
 800661a:	2b08      	cmp	r3, #8
 800661c:	d861      	bhi.n	80066e2 <UART_SetConfig+0x13e>
 800661e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8006622:	00e7      	.short	0x00e7
 8006624:	006000ec 	.word	0x006000ec
 8006628:	00ef0060 	.word	0x00ef0060
 800662c:	00600060 	.word	0x00600060
 8006630:	00f40060 	.word	0x00f40060
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006634:	4a7d      	ldr	r2, [pc, #500]	; (800682c <UART_SetConfig+0x288>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d107      	bne.n	800664a <UART_SetConfig+0xa6>
 800663a:	4b7a      	ldr	r3, [pc, #488]	; (8006824 <UART_SetConfig+0x280>)
 800663c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800663e:	f003 0307 	and.w	r3, r3, #7
 8006642:	2b05      	cmp	r3, #5
 8006644:	d84d      	bhi.n	80066e2 <UART_SetConfig+0x13e>
 8006646:	4a7a      	ldr	r2, [pc, #488]	; (8006830 <UART_SetConfig+0x28c>)
 8006648:	e7df      	b.n	800660a <UART_SetConfig+0x66>
 800664a:	4a7a      	ldr	r2, [pc, #488]	; (8006834 <UART_SetConfig+0x290>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d107      	bne.n	8006660 <UART_SetConfig+0xbc>
 8006650:	4b74      	ldr	r3, [pc, #464]	; (8006824 <UART_SetConfig+0x280>)
 8006652:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006654:	f003 0307 	and.w	r3, r3, #7
 8006658:	2b05      	cmp	r3, #5
 800665a:	d842      	bhi.n	80066e2 <UART_SetConfig+0x13e>
 800665c:	4a76      	ldr	r2, [pc, #472]	; (8006838 <UART_SetConfig+0x294>)
 800665e:	e7d4      	b.n	800660a <UART_SetConfig+0x66>
 8006660:	4a76      	ldr	r2, [pc, #472]	; (800683c <UART_SetConfig+0x298>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d107      	bne.n	8006676 <UART_SetConfig+0xd2>
 8006666:	4b6f      	ldr	r3, [pc, #444]	; (8006824 <UART_SetConfig+0x280>)
 8006668:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800666a:	f003 0307 	and.w	r3, r3, #7
 800666e:	2b05      	cmp	r3, #5
 8006670:	d837      	bhi.n	80066e2 <UART_SetConfig+0x13e>
 8006672:	4a73      	ldr	r2, [pc, #460]	; (8006840 <UART_SetConfig+0x29c>)
 8006674:	e7c9      	b.n	800660a <UART_SetConfig+0x66>
 8006676:	4a73      	ldr	r2, [pc, #460]	; (8006844 <UART_SetConfig+0x2a0>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d107      	bne.n	800668c <UART_SetConfig+0xe8>
 800667c:	4b69      	ldr	r3, [pc, #420]	; (8006824 <UART_SetConfig+0x280>)
 800667e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006680:	f003 0307 	and.w	r3, r3, #7
 8006684:	2b05      	cmp	r3, #5
 8006686:	d82c      	bhi.n	80066e2 <UART_SetConfig+0x13e>
 8006688:	4a6f      	ldr	r2, [pc, #444]	; (8006848 <UART_SetConfig+0x2a4>)
 800668a:	e7be      	b.n	800660a <UART_SetConfig+0x66>
 800668c:	4a6f      	ldr	r2, [pc, #444]	; (800684c <UART_SetConfig+0x2a8>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d107      	bne.n	80066a2 <UART_SetConfig+0xfe>
 8006692:	4b64      	ldr	r3, [pc, #400]	; (8006824 <UART_SetConfig+0x280>)
 8006694:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006696:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800669a:	2b28      	cmp	r3, #40	; 0x28
 800669c:	d821      	bhi.n	80066e2 <UART_SetConfig+0x13e>
 800669e:	4a6c      	ldr	r2, [pc, #432]	; (8006850 <UART_SetConfig+0x2ac>)
 80066a0:	e7b3      	b.n	800660a <UART_SetConfig+0x66>
 80066a2:	4a6c      	ldr	r2, [pc, #432]	; (8006854 <UART_SetConfig+0x2b0>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d107      	bne.n	80066b8 <UART_SetConfig+0x114>
 80066a8:	4b5e      	ldr	r3, [pc, #376]	; (8006824 <UART_SetConfig+0x280>)
 80066aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066ac:	f003 0307 	and.w	r3, r3, #7
 80066b0:	2b05      	cmp	r3, #5
 80066b2:	d816      	bhi.n	80066e2 <UART_SetConfig+0x13e>
 80066b4:	4a68      	ldr	r2, [pc, #416]	; (8006858 <UART_SetConfig+0x2b4>)
 80066b6:	e7a8      	b.n	800660a <UART_SetConfig+0x66>
 80066b8:	4a68      	ldr	r2, [pc, #416]	; (800685c <UART_SetConfig+0x2b8>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d107      	bne.n	80066ce <UART_SetConfig+0x12a>
 80066be:	4b59      	ldr	r3, [pc, #356]	; (8006824 <UART_SetConfig+0x280>)
 80066c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066c2:	f003 0307 	and.w	r3, r3, #7
 80066c6:	2b05      	cmp	r3, #5
 80066c8:	d80b      	bhi.n	80066e2 <UART_SetConfig+0x13e>
 80066ca:	4a65      	ldr	r2, [pc, #404]	; (8006860 <UART_SetConfig+0x2bc>)
 80066cc:	e79d      	b.n	800660a <UART_SetConfig+0x66>
 80066ce:	4a53      	ldr	r2, [pc, #332]	; (800681c <UART_SetConfig+0x278>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d106      	bne.n	80066e2 <UART_SetConfig+0x13e>
 80066d4:	f502 320e 	add.w	r2, r2, #145408	; 0x23800
 80066d8:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80066da:	f003 0307 	and.w	r3, r3, #7
 80066de:	2b05      	cmp	r3, #5
 80066e0:	d901      	bls.n	80066e6 <UART_SetConfig+0x142>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80066e2:	2001      	movs	r0, #1
 80066e4:	e00e      	b.n	8006704 <UART_SetConfig+0x160>
 80066e6:	495f      	ldr	r1, [pc, #380]	; (8006864 <UART_SetConfig+0x2c0>)
 80066e8:	5ccb      	ldrb	r3, [r1, r3]
    switch (clocksource)
 80066ea:	2b10      	cmp	r3, #16
 80066ec:	d023      	beq.n	8006736 <UART_SetConfig+0x192>
 80066ee:	d811      	bhi.n	8006714 <UART_SetConfig+0x170>
 80066f0:	2b04      	cmp	r3, #4
 80066f2:	d016      	beq.n	8006722 <UART_SetConfig+0x17e>
 80066f4:	2b08      	cmp	r3, #8
 80066f6:	d019      	beq.n	800672c <UART_SetConfig+0x188>
 80066f8:	2b02      	cmp	r3, #2
 80066fa:	d1f2      	bne.n	80066e2 <UART_SetConfig+0x13e>
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80066fc:	f7ff f840 	bl	8005780 <HAL_RCCEx_GetD3PCLK1Freq>
    if (pclk != 0U)
 8006700:	bb10      	cbnz	r0, 8006748 <UART_SetConfig+0x1a4>
 8006702:	2000      	movs	r0, #0
  huart->NbRxDataToProcess = 1;
 8006704:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8006708:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 800670a:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 800670c:	e9c4 331d 	strd	r3, r3, [r4, #116]	; 0x74
}
 8006710:	b007      	add	sp, #28
 8006712:	bd30      	pop	{r4, r5, pc}
    switch (clocksource)
 8006714:	2b20      	cmp	r3, #32
 8006716:	d03e      	beq.n	8006796 <UART_SetConfig+0x1f2>
 8006718:	2b40      	cmp	r3, #64	; 0x40
 800671a:	d1e2      	bne.n	80066e2 <UART_SetConfig+0x13e>
 800671c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8006720:	e012      	b.n	8006748 <UART_SetConfig+0x1a4>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006722:	4668      	mov	r0, sp
 8006724:	f7ff f83e 	bl	80057a4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006728:	9801      	ldr	r0, [sp, #4]
        break;
 800672a:	e7e9      	b.n	8006700 <UART_SetConfig+0x15c>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800672c:	a803      	add	r0, sp, #12
 800672e:	f7ff f8e1 	bl	80058f4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006732:	9804      	ldr	r0, [sp, #16]
        break;
 8006734:	e7e4      	b.n	8006700 <UART_SetConfig+0x15c>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006736:	6813      	ldr	r3, [r2, #0]
 8006738:	484b      	ldr	r0, [pc, #300]	; (8006868 <UART_SetConfig+0x2c4>)
 800673a:	f013 0f20 	tst.w	r3, #32
 800673e:	d003      	beq.n	8006748 <UART_SetConfig+0x1a4>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006740:	6813      	ldr	r3, [r2, #0]
 8006742:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8006746:	40d8      	lsrs	r0, r3
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006748:	4b48      	ldr	r3, [pc, #288]	; (800686c <UART_SetConfig+0x2c8>)
 800674a:	6a62      	ldr	r2, [r4, #36]	; 0x24
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800674c:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800674e:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006752:	eb05 0145 	add.w	r1, r5, r5, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006756:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800675a:	4299      	cmp	r1, r3
 800675c:	d8c1      	bhi.n	80066e2 <UART_SetConfig+0x13e>
 800675e:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 8006762:	d8be      	bhi.n	80066e2 <UART_SetConfig+0x13e>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006764:	2300      	movs	r3, #0
 8006766:	4619      	mov	r1, r3
 8006768:	f7f9 ff20 	bl	80005ac <__aeabi_uldivmod>
 800676c:	462a      	mov	r2, r5
 800676e:	0209      	lsls	r1, r1, #8
 8006770:	086b      	lsrs	r3, r5, #1
 8006772:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 8006776:	0200      	lsls	r0, r0, #8
 8006778:	18c0      	adds	r0, r0, r3
 800677a:	f04f 0300 	mov.w	r3, #0
 800677e:	f141 0100 	adc.w	r1, r1, #0
 8006782:	f7f9 ff13 	bl	80005ac <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006786:	4b3a      	ldr	r3, [pc, #232]	; (8006870 <UART_SetConfig+0x2cc>)
 8006788:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800678c:	429a      	cmp	r2, r3
 800678e:	d8a8      	bhi.n	80066e2 <UART_SetConfig+0x13e>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006790:	6823      	ldr	r3, [r4, #0]
 8006792:	60d8      	str	r0, [r3, #12]
 8006794:	e7b5      	b.n	8006702 <UART_SetConfig+0x15e>
        pclk = (uint32_t) CSI_VALUE;
 8006796:	4837      	ldr	r0, [pc, #220]	; (8006874 <UART_SetConfig+0x2d0>)
 8006798:	e7d6      	b.n	8006748 <UART_SetConfig+0x1a4>
    switch (clocksource)
 800679a:	2b20      	cmp	r3, #32
 800679c:	d03a      	beq.n	8006814 <UART_SetConfig+0x270>
 800679e:	2b40      	cmp	r3, #64	; 0x40
 80067a0:	d00b      	beq.n	80067ba <UART_SetConfig+0x216>
 80067a2:	2b10      	cmp	r3, #16
 80067a4:	d19d      	bne.n	80066e2 <UART_SetConfig+0x13e>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80067a6:	4b1f      	ldr	r3, [pc, #124]	; (8006824 <UART_SetConfig+0x280>)
 80067a8:	482f      	ldr	r0, [pc, #188]	; (8006868 <UART_SetConfig+0x2c4>)
 80067aa:	681a      	ldr	r2, [r3, #0]
 80067ac:	f012 0f20 	tst.w	r2, #32
 80067b0:	d003      	beq.n	80067ba <UART_SetConfig+0x216>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80067b8:	40d8      	lsrs	r0, r3
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80067ba:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80067bc:	4b2b      	ldr	r3, [pc, #172]	; (800686c <UART_SetConfig+0x2c8>)
 80067be:	6862      	ldr	r2, [r4, #4]
 80067c0:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80067c4:	fbb0 f3f3 	udiv	r3, r0, r3
 80067c8:	0850      	lsrs	r0, r2, #1
 80067ca:	eb00 0043 	add.w	r0, r0, r3, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80067ce:	f64f 73ef 	movw	r3, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80067d2:	fbb0 f0f2 	udiv	r0, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80067d6:	f1a0 0210 	sub.w	r2, r0, #16
 80067da:	429a      	cmp	r2, r3
 80067dc:	d881      	bhi.n	80066e2 <UART_SetConfig+0x13e>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80067de:	f020 030f 	bic.w	r3, r0, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80067e2:	f3c0 0042 	ubfx	r0, r0, #1, #3
        huart->Instance->BRR = brrtemp;
 80067e6:	6822      	ldr	r2, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80067e8:	b29b      	uxth	r3, r3
        huart->Instance->BRR = brrtemp;
 80067ea:	4318      	orrs	r0, r3
 80067ec:	60d0      	str	r0, [r2, #12]
 80067ee:	e788      	b.n	8006702 <UART_SetConfig+0x15e>
        pclk = HAL_RCC_GetPCLK1Freq();
 80067f0:	f7fe f99e 	bl	8004b30 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80067f4:	2800      	cmp	r0, #0
 80067f6:	d084      	beq.n	8006702 <UART_SetConfig+0x15e>
 80067f8:	e7df      	b.n	80067ba <UART_SetConfig+0x216>
        pclk = HAL_RCC_GetPCLK2Freq();
 80067fa:	f7fe f9ab 	bl	8004b54 <HAL_RCC_GetPCLK2Freq>
        break;
 80067fe:	e7f9      	b.n	80067f4 <UART_SetConfig+0x250>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006800:	4668      	mov	r0, sp
 8006802:	f7fe ffcf 	bl	80057a4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006806:	9801      	ldr	r0, [sp, #4]
        break;
 8006808:	e7f4      	b.n	80067f4 <UART_SetConfig+0x250>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800680a:	a803      	add	r0, sp, #12
 800680c:	f7ff f872 	bl	80058f4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006810:	9804      	ldr	r0, [sp, #16]
        break;
 8006812:	e7ef      	b.n	80067f4 <UART_SetConfig+0x250>
        pclk = (uint32_t) CSI_VALUE;
 8006814:	4817      	ldr	r0, [pc, #92]	; (8006874 <UART_SetConfig+0x2d0>)
 8006816:	e7d0      	b.n	80067ba <UART_SetConfig+0x216>
 8006818:	cfff69f3 	.word	0xcfff69f3
 800681c:	58000c00 	.word	0x58000c00
 8006820:	40011000 	.word	0x40011000
 8006824:	58024400 	.word	0x58024400
 8006828:	08015a98 	.word	0x08015a98
 800682c:	40004400 	.word	0x40004400
 8006830:	08015ac1 	.word	0x08015ac1
 8006834:	40004800 	.word	0x40004800
 8006838:	08015ac1 	.word	0x08015ac1
 800683c:	40004c00 	.word	0x40004c00
 8006840:	08015ac1 	.word	0x08015ac1
 8006844:	40005000 	.word	0x40005000
 8006848:	08015ac1 	.word	0x08015ac1
 800684c:	40011400 	.word	0x40011400
 8006850:	08015a98 	.word	0x08015a98
 8006854:	40007800 	.word	0x40007800
 8006858:	08015ac1 	.word	0x08015ac1
 800685c:	40007c00 	.word	0x40007c00
 8006860:	08015ac1 	.word	0x08015ac1
 8006864:	08015ac7 	.word	0x08015ac7
 8006868:	03d09000 	.word	0x03d09000
 800686c:	08015ace 	.word	0x08015ace
 8006870:	000ffcff 	.word	0x000ffcff
 8006874:	003d0900 	.word	0x003d0900
    switch (clocksource)
 8006878:	2b08      	cmp	r3, #8
 800687a:	d817      	bhi.n	80068ac <UART_SetConfig+0x308>
 800687c:	2b08      	cmp	r3, #8
 800687e:	f63f af30 	bhi.w	80066e2 <UART_SetConfig+0x13e>
 8006882:	a201      	add	r2, pc, #4	; (adr r2, 8006888 <UART_SetConfig+0x2e4>)
 8006884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006888:	080068ef 	.word	0x080068ef
 800688c:	080068fb 	.word	0x080068fb
 8006890:	080066e3 	.word	0x080066e3
 8006894:	080066e3 	.word	0x080066e3
 8006898:	08006901 	.word	0x08006901
 800689c:	080066e3 	.word	0x080066e3
 80068a0:	080066e3 	.word	0x080066e3
 80068a4:	080066e3 	.word	0x080066e3
 80068a8:	0800690b 	.word	0x0800690b
 80068ac:	2b20      	cmp	r3, #32
 80068ae:	d031      	beq.n	8006914 <UART_SetConfig+0x370>
 80068b0:	2b40      	cmp	r3, #64	; 0x40
 80068b2:	d031      	beq.n	8006918 <UART_SetConfig+0x374>
 80068b4:	2b10      	cmp	r3, #16
 80068b6:	f47f af14 	bne.w	80066e2 <UART_SetConfig+0x13e>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80068ba:	4b19      	ldr	r3, [pc, #100]	; (8006920 <UART_SetConfig+0x37c>)
 80068bc:	4819      	ldr	r0, [pc, #100]	; (8006924 <UART_SetConfig+0x380>)
 80068be:	681a      	ldr	r2, [r3, #0]
 80068c0:	f012 0f20 	tst.w	r2, #32
 80068c4:	d003      	beq.n	80068ce <UART_SetConfig+0x32a>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80068cc:	40d8      	lsrs	r0, r3
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80068ce:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80068d0:	4a15      	ldr	r2, [pc, #84]	; (8006928 <UART_SetConfig+0x384>)
 80068d2:	6863      	ldr	r3, [r4, #4]
 80068d4:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 80068d8:	fbb0 f0f2 	udiv	r0, r0, r2
 80068dc:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80068e0:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80068e4:	f64f 73ef 	movw	r3, #65519	; 0xffef
 80068e8:	f1a0 0210 	sub.w	r2, r0, #16
 80068ec:	e74e      	b.n	800678c <UART_SetConfig+0x1e8>
        pclk = HAL_RCC_GetPCLK1Freq();
 80068ee:	f7fe f91f 	bl	8004b30 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80068f2:	2800      	cmp	r0, #0
 80068f4:	f43f af05 	beq.w	8006702 <UART_SetConfig+0x15e>
 80068f8:	e7e9      	b.n	80068ce <UART_SetConfig+0x32a>
        pclk = HAL_RCC_GetPCLK2Freq();
 80068fa:	f7fe f92b 	bl	8004b54 <HAL_RCC_GetPCLK2Freq>
        break;
 80068fe:	e7f8      	b.n	80068f2 <UART_SetConfig+0x34e>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006900:	4668      	mov	r0, sp
 8006902:	f7fe ff4f 	bl	80057a4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006906:	9801      	ldr	r0, [sp, #4]
        break;
 8006908:	e7f3      	b.n	80068f2 <UART_SetConfig+0x34e>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800690a:	a803      	add	r0, sp, #12
 800690c:	f7fe fff2 	bl	80058f4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006910:	9804      	ldr	r0, [sp, #16]
        break;
 8006912:	e7ee      	b.n	80068f2 <UART_SetConfig+0x34e>
        pclk = (uint32_t) CSI_VALUE;
 8006914:	4805      	ldr	r0, [pc, #20]	; (800692c <UART_SetConfig+0x388>)
 8006916:	e7da      	b.n	80068ce <UART_SetConfig+0x32a>
    switch (clocksource)
 8006918:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800691c:	e7d7      	b.n	80068ce <UART_SetConfig+0x32a>
 800691e:	bf00      	nop
 8006920:	58024400 	.word	0x58024400
 8006924:	03d09000 	.word	0x03d09000
 8006928:	08015ace 	.word	0x08015ace
 800692c:	003d0900 	.word	0x003d0900

08006930 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006930:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006932:	07da      	lsls	r2, r3, #31
{
 8006934:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006936:	d506      	bpl.n	8006946 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006938:	6801      	ldr	r1, [r0, #0]
 800693a:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800693c:	684a      	ldr	r2, [r1, #4]
 800693e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8006942:	4322      	orrs	r2, r4
 8006944:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006946:	079c      	lsls	r4, r3, #30
 8006948:	d506      	bpl.n	8006958 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800694a:	6801      	ldr	r1, [r0, #0]
 800694c:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800694e:	684a      	ldr	r2, [r1, #4]
 8006950:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006954:	4322      	orrs	r2, r4
 8006956:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006958:	0759      	lsls	r1, r3, #29
 800695a:	d506      	bpl.n	800696a <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800695c:	6801      	ldr	r1, [r0, #0]
 800695e:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8006960:	684a      	ldr	r2, [r1, #4]
 8006962:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006966:	4322      	orrs	r2, r4
 8006968:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800696a:	071a      	lsls	r2, r3, #28
 800696c:	d506      	bpl.n	800697c <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800696e:	6801      	ldr	r1, [r0, #0]
 8006970:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8006972:	684a      	ldr	r2, [r1, #4]
 8006974:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006978:	4322      	orrs	r2, r4
 800697a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800697c:	06dc      	lsls	r4, r3, #27
 800697e:	d506      	bpl.n	800698e <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006980:	6801      	ldr	r1, [r0, #0]
 8006982:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8006984:	688a      	ldr	r2, [r1, #8]
 8006986:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800698a:	4322      	orrs	r2, r4
 800698c:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800698e:	0699      	lsls	r1, r3, #26
 8006990:	d506      	bpl.n	80069a0 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006992:	6801      	ldr	r1, [r0, #0]
 8006994:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8006996:	688a      	ldr	r2, [r1, #8]
 8006998:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800699c:	4322      	orrs	r2, r4
 800699e:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80069a0:	065a      	lsls	r2, r3, #25
 80069a2:	d510      	bpl.n	80069c6 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80069a4:	6801      	ldr	r1, [r0, #0]
 80069a6:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80069a8:	684a      	ldr	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80069aa:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80069ae:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80069b2:	ea42 0204 	orr.w	r2, r2, r4
 80069b6:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80069b8:	d105      	bne.n	80069c6 <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80069ba:	684a      	ldr	r2, [r1, #4]
 80069bc:	6c84      	ldr	r4, [r0, #72]	; 0x48
 80069be:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80069c2:	4322      	orrs	r2, r4
 80069c4:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80069c6:	061b      	lsls	r3, r3, #24
 80069c8:	d506      	bpl.n	80069d8 <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80069ca:	6802      	ldr	r2, [r0, #0]
 80069cc:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 80069ce:	6853      	ldr	r3, [r2, #4]
 80069d0:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80069d4:	430b      	orrs	r3, r1
 80069d6:	6053      	str	r3, [r2, #4]
}
 80069d8:	bd10      	pop	{r4, pc}

080069da <UART_WaitOnFlagUntilTimeout>:
{
 80069da:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80069de:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80069e2:	4604      	mov	r4, r0
 80069e4:	460f      	mov	r7, r1
 80069e6:	4616      	mov	r6, r2
 80069e8:	4698      	mov	r8, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069ea:	6822      	ldr	r2, [r4, #0]
 80069ec:	69d3      	ldr	r3, [r2, #28]
 80069ee:	ea37 0303 	bics.w	r3, r7, r3
 80069f2:	bf0c      	ite	eq
 80069f4:	2301      	moveq	r3, #1
 80069f6:	2300      	movne	r3, #0
 80069f8:	42b3      	cmp	r3, r6
 80069fa:	d001      	beq.n	8006a00 <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 80069fc:	2000      	movs	r0, #0
 80069fe:	e01e      	b.n	8006a3e <UART_WaitOnFlagUntilTimeout+0x64>
    if (Timeout != HAL_MAX_DELAY)
 8006a00:	f1b9 3fff 	cmp.w	r9, #4294967295
 8006a04:	d0f2      	beq.n	80069ec <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a06:	f7fb fb5d 	bl	80020c4 <HAL_GetTick>
 8006a0a:	eba0 0008 	sub.w	r0, r0, r8
 8006a0e:	4548      	cmp	r0, r9
 8006a10:	d825      	bhi.n	8006a5e <UART_WaitOnFlagUntilTimeout+0x84>
 8006a12:	f1b9 0f00 	cmp.w	r9, #0
 8006a16:	d022      	beq.n	8006a5e <UART_WaitOnFlagUntilTimeout+0x84>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006a18:	6820      	ldr	r0, [r4, #0]
 8006a1a:	6803      	ldr	r3, [r0, #0]
 8006a1c:	075a      	lsls	r2, r3, #29
 8006a1e:	d5e4      	bpl.n	80069ea <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006a20:	69c5      	ldr	r5, [r0, #28]
 8006a22:	f015 0508 	ands.w	r5, r5, #8
 8006a26:	d00c      	beq.n	8006a42 <UART_WaitOnFlagUntilTimeout+0x68>
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006a28:	2508      	movs	r5, #8
 8006a2a:	6205      	str	r5, [r0, #32]
           UART_EndRxTransfer(huart);
 8006a2c:	4620      	mov	r0, r4
 8006a2e:	f7ff fd8d 	bl	800654c <UART_EndRxTransfer>
           __HAL_UNLOCK(huart);
 8006a32:	2300      	movs	r3, #0
           return HAL_ERROR;
 8006a34:	2001      	movs	r0, #1
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006a36:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
           __HAL_UNLOCK(huart);
 8006a3a:	f884 3084 	strb.w	r3, [r4, #132]	; 0x84
}
 8006a3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006a42:	69c3      	ldr	r3, [r0, #28]
 8006a44:	051b      	lsls	r3, r3, #20
 8006a46:	d5d0      	bpl.n	80069ea <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006a48:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006a4c:	6203      	str	r3, [r0, #32]
          UART_EndRxTransfer(huart);
 8006a4e:	4620      	mov	r0, r4
 8006a50:	f7ff fd7c 	bl	800654c <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006a54:	2320      	movs	r3, #32
          __HAL_UNLOCK(huart);
 8006a56:	f884 5084 	strb.w	r5, [r4, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006a5a:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
        return HAL_TIMEOUT;
 8006a5e:	2003      	movs	r0, #3
 8006a60:	e7ed      	b.n	8006a3e <UART_WaitOnFlagUntilTimeout+0x64>

08006a62 <HAL_UART_Transmit>:
{
 8006a62:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8006a66:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8006a68:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
{
 8006a6c:	4604      	mov	r4, r0
 8006a6e:	460e      	mov	r6, r1
  if (huart->gState == HAL_UART_STATE_READY)
 8006a70:	2b20      	cmp	r3, #32
{
 8006a72:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8006a74:	d147      	bne.n	8006b06 <HAL_UART_Transmit+0xa4>
    if ((pData == NULL) || (Size == 0U))
 8006a76:	2900      	cmp	r1, #0
 8006a78:	d047      	beq.n	8006b0a <HAL_UART_Transmit+0xa8>
 8006a7a:	2a00      	cmp	r2, #0
 8006a7c:	d045      	beq.n	8006b0a <HAL_UART_Transmit+0xa8>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006a7e:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a80:	2500      	movs	r5, #0
 8006a82:	f8c0 5090 	str.w	r5, [r0, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006a86:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
    tickstart = HAL_GetTick();
 8006a8a:	f7fb fb1b 	bl	80020c4 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a8e:	68a2      	ldr	r2, [r4, #8]
    tickstart = HAL_GetTick();
 8006a90:	4603      	mov	r3, r0
    huart->TxXferSize  = Size;
 8006a92:	f8a4 7054 	strh.w	r7, [r4, #84]	; 0x54
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a96:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
    huart->TxXferCount = Size;
 8006a9a:	f8a4 7056 	strh.w	r7, [r4, #86]	; 0x56
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a9e:	d103      	bne.n	8006aa8 <HAL_UART_Transmit+0x46>
 8006aa0:	6922      	ldr	r2, [r4, #16]
 8006aa2:	b90a      	cbnz	r2, 8006aa8 <HAL_UART_Transmit+0x46>
 8006aa4:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8006aa6:	4616      	mov	r6, r2
    while (huart->TxXferCount > 0U)
 8006aa8:	f8b4 2056 	ldrh.w	r2, [r4, #86]	; 0x56
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006aac:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 8006ab0:	b292      	uxth	r2, r2
 8006ab2:	b952      	cbnz	r2, 8006aca <HAL_UART_Transmit+0x68>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006ab4:	2140      	movs	r1, #64	; 0x40
 8006ab6:	4620      	mov	r0, r4
 8006ab8:	f7ff ff8f 	bl	80069da <UART_WaitOnFlagUntilTimeout>
 8006abc:	2320      	movs	r3, #32
      huart->gState = HAL_UART_STATE_READY;
 8006abe:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006ac2:	b968      	cbnz	r0, 8006ae0 <HAL_UART_Transmit+0x7e>
}
 8006ac4:	b004      	add	sp, #16
 8006ac6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006aca:	2200      	movs	r2, #0
 8006acc:	2180      	movs	r1, #128	; 0x80
 8006ace:	4620      	mov	r0, r4
 8006ad0:	9303      	str	r3, [sp, #12]
 8006ad2:	f7ff ff82 	bl	80069da <UART_WaitOnFlagUntilTimeout>
 8006ad6:	9b03      	ldr	r3, [sp, #12]
 8006ad8:	b120      	cbz	r0, 8006ae4 <HAL_UART_Transmit+0x82>
        huart->gState = HAL_UART_STATE_READY;
 8006ada:	2320      	movs	r3, #32
 8006adc:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
      return HAL_TIMEOUT;
 8006ae0:	2003      	movs	r0, #3
 8006ae2:	e7ef      	b.n	8006ac4 <HAL_UART_Transmit+0x62>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006ae4:	6821      	ldr	r1, [r4, #0]
      if (pdata8bits == NULL)
 8006ae6:	b95e      	cbnz	r6, 8006b00 <HAL_UART_Transmit+0x9e>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006ae8:	f835 2b02 	ldrh.w	r2, [r5], #2
 8006aec:	f3c2 0208 	ubfx	r2, r2, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006af0:	628a      	str	r2, [r1, #40]	; 0x28
      huart->TxXferCount--;
 8006af2:	f8b4 2056 	ldrh.w	r2, [r4, #86]	; 0x56
 8006af6:	3a01      	subs	r2, #1
 8006af8:	b292      	uxth	r2, r2
 8006afa:	f8a4 2056 	strh.w	r2, [r4, #86]	; 0x56
 8006afe:	e7d3      	b.n	8006aa8 <HAL_UART_Transmit+0x46>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006b00:	f816 2b01 	ldrb.w	r2, [r6], #1
 8006b04:	e7f4      	b.n	8006af0 <HAL_UART_Transmit+0x8e>
    return HAL_BUSY;
 8006b06:	2002      	movs	r0, #2
 8006b08:	e7dc      	b.n	8006ac4 <HAL_UART_Transmit+0x62>
      return  HAL_ERROR;
 8006b0a:	2001      	movs	r0, #1
 8006b0c:	e7da      	b.n	8006ac4 <HAL_UART_Transmit+0x62>

08006b0e <HAL_UART_Receive>:
{
 8006b0e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006b12:	461f      	mov	r7, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 8006b14:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
{
 8006b18:	4604      	mov	r4, r0
 8006b1a:	460d      	mov	r5, r1
  if (huart->RxState == HAL_UART_STATE_READY)
 8006b1c:	2b20      	cmp	r3, #32
{
 8006b1e:	4616      	mov	r6, r2
  if (huart->RxState == HAL_UART_STATE_READY)
 8006b20:	d163      	bne.n	8006bea <HAL_UART_Receive+0xdc>
    if ((pData == NULL) || (Size == 0U))
 8006b22:	2900      	cmp	r1, #0
 8006b24:	d063      	beq.n	8006bee <HAL_UART_Receive+0xe0>
 8006b26:	2a00      	cmp	r2, #0
 8006b28:	d061      	beq.n	8006bee <HAL_UART_Receive+0xe0>
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006b2a:	2322      	movs	r3, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b2c:	f04f 0800 	mov.w	r8, #0
 8006b30:	f8c0 8090 	str.w	r8, [r0, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006b34:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b38:	f8c0 806c 	str.w	r8, [r0, #108]	; 0x6c
    tickstart = HAL_GetTick();
 8006b3c:	f7fb fac2 	bl	80020c4 <HAL_GetTick>
    UART_MASK_COMPUTATION(huart);
 8006b40:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 8006b42:	4681      	mov	r9, r0
    huart->RxXferSize  = Size;
 8006b44:	f8a4 605c 	strh.w	r6, [r4, #92]	; 0x5c
    UART_MASK_COMPUTATION(huart);
 8006b48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->RxXferCount = Size;
 8006b4c:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
    UART_MASK_COMPUTATION(huart);
 8006b50:	d118      	bne.n	8006b84 <HAL_UART_Receive+0x76>
 8006b52:	6922      	ldr	r2, [r4, #16]
 8006b54:	b9a2      	cbnz	r2, 8006b80 <HAL_UART_Receive+0x72>
 8006b56:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006b5a:	f8a4 2060 	strh.w	r2, [r4, #96]	; 0x60
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    uhMask = huart->Mask;
 8006b62:	f8b4 8060 	ldrh.w	r8, [r4, #96]	; 0x60
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b66:	d11e      	bne.n	8006ba6 <HAL_UART_Receive+0x98>
 8006b68:	6923      	ldr	r3, [r4, #16]
 8006b6a:	b9e3      	cbnz	r3, 8006ba6 <HAL_UART_Receive+0x98>
 8006b6c:	462e      	mov	r6, r5
      pdata8bits  = NULL;
 8006b6e:	461d      	mov	r5, r3
    while (huart->RxXferCount > 0U)
 8006b70:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
 8006b74:	b290      	uxth	r0, r2
 8006b76:	b9c0      	cbnz	r0, 8006baa <HAL_UART_Receive+0x9c>
    huart->RxState = HAL_UART_STATE_READY;
 8006b78:	2320      	movs	r3, #32
 8006b7a:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
    return HAL_OK;
 8006b7e:	e020      	b.n	8006bc2 <HAL_UART_Receive+0xb4>
    UART_MASK_COMPUTATION(huart);
 8006b80:	22ff      	movs	r2, #255	; 0xff
 8006b82:	e7ea      	b.n	8006b5a <HAL_UART_Receive+0x4c>
 8006b84:	b923      	cbnz	r3, 8006b90 <HAL_UART_Receive+0x82>
 8006b86:	6922      	ldr	r2, [r4, #16]
 8006b88:	2a00      	cmp	r2, #0
 8006b8a:	d0f9      	beq.n	8006b80 <HAL_UART_Receive+0x72>
 8006b8c:	227f      	movs	r2, #127	; 0x7f
 8006b8e:	e7e4      	b.n	8006b5a <HAL_UART_Receive+0x4c>
 8006b90:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006b94:	d104      	bne.n	8006ba0 <HAL_UART_Receive+0x92>
 8006b96:	6922      	ldr	r2, [r4, #16]
 8006b98:	2a00      	cmp	r2, #0
 8006b9a:	d0f7      	beq.n	8006b8c <HAL_UART_Receive+0x7e>
 8006b9c:	223f      	movs	r2, #63	; 0x3f
 8006b9e:	e7dc      	b.n	8006b5a <HAL_UART_Receive+0x4c>
 8006ba0:	f8a4 8060 	strh.w	r8, [r4, #96]	; 0x60
 8006ba4:	e7db      	b.n	8006b5e <HAL_UART_Receive+0x50>
      pdata16bits = NULL;
 8006ba6:	2600      	movs	r6, #0
 8006ba8:	e7e2      	b.n	8006b70 <HAL_UART_Receive+0x62>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006baa:	464b      	mov	r3, r9
 8006bac:	2200      	movs	r2, #0
 8006bae:	2120      	movs	r1, #32
 8006bb0:	4620      	mov	r0, r4
 8006bb2:	9700      	str	r7, [sp, #0]
 8006bb4:	f7ff ff11 	bl	80069da <UART_WaitOnFlagUntilTimeout>
 8006bb8:	b130      	cbz	r0, 8006bc8 <HAL_UART_Receive+0xba>
        huart->RxState = HAL_UART_STATE_READY;
 8006bba:	2320      	movs	r3, #32
        return HAL_TIMEOUT;
 8006bbc:	2003      	movs	r0, #3
        huart->RxState = HAL_UART_STATE_READY;
 8006bbe:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
}
 8006bc2:	b003      	add	sp, #12
 8006bc4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006bc8:	6823      	ldr	r3, [r4, #0]
 8006bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bcc:	ea08 0303 	and.w	r3, r8, r3
      if (pdata8bits == NULL)
 8006bd0:	b945      	cbnz	r5, 8006be4 <HAL_UART_Receive+0xd6>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006bd2:	f826 3b02 	strh.w	r3, [r6], #2
      huart->RxXferCount--;
 8006bd6:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
 8006bda:	3a01      	subs	r2, #1
 8006bdc:	b292      	uxth	r2, r2
 8006bde:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 8006be2:	e7c5      	b.n	8006b70 <HAL_UART_Receive+0x62>
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006be4:	f805 3b01 	strb.w	r3, [r5], #1
        pdata8bits++;
 8006be8:	e7f5      	b.n	8006bd6 <HAL_UART_Receive+0xc8>
    return HAL_BUSY;
 8006bea:	2002      	movs	r0, #2
 8006bec:	e7e9      	b.n	8006bc2 <HAL_UART_Receive+0xb4>
      return  HAL_ERROR;
 8006bee:	2001      	movs	r0, #1
 8006bf0:	e7e7      	b.n	8006bc2 <HAL_UART_Receive+0xb4>

08006bf2 <UART_CheckIdleState>:
{
 8006bf2:	b530      	push	{r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bf4:	2500      	movs	r5, #0
{
 8006bf6:	4604      	mov	r4, r0
 8006bf8:	b085      	sub	sp, #20
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bfa:	f8c0 5090 	str.w	r5, [r0, #144]	; 0x90
  tickstart = HAL_GetTick();
 8006bfe:	f7fb fa61 	bl	80020c4 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006c02:	6822      	ldr	r2, [r4, #0]
  tickstart = HAL_GetTick();
 8006c04:	4603      	mov	r3, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006c06:	6812      	ldr	r2, [r2, #0]
 8006c08:	0711      	lsls	r1, r2, #28
 8006c0a:	d51c      	bpl.n	8006c46 <UART_CheckIdleState+0x54>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c0c:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8006c10:	9003      	str	r0, [sp, #12]
 8006c12:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006c16:	4620      	mov	r0, r4
 8006c18:	9200      	str	r2, [sp, #0]
 8006c1a:	462a      	mov	r2, r5
 8006c1c:	f7ff fedd 	bl	80069da <UART_WaitOnFlagUntilTimeout>
 8006c20:	9b03      	ldr	r3, [sp, #12]
 8006c22:	b180      	cbz	r0, 8006c46 <UART_CheckIdleState+0x54>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006c24:	6821      	ldr	r1, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c26:	e851 3f00 	ldrex	r3, [r1]
 8006c2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c2e:	e841 3200 	strex	r2, r3, [r1]
 8006c32:	2a00      	cmp	r2, #0
 8006c34:	d1f6      	bne.n	8006c24 <UART_CheckIdleState+0x32>
      huart->gState = HAL_UART_STATE_READY;
 8006c36:	2320      	movs	r3, #32
 8006c38:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
      return HAL_TIMEOUT;
 8006c3c:	2003      	movs	r0, #3
      __HAL_UNLOCK(huart);
 8006c3e:	f884 2084 	strb.w	r2, [r4, #132]	; 0x84
}
 8006c42:	b005      	add	sp, #20
 8006c44:	bd30      	pop	{r4, r5, pc}
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006c46:	6822      	ldr	r2, [r4, #0]
 8006c48:	6812      	ldr	r2, [r2, #0]
 8006c4a:	0752      	lsls	r2, r2, #29
 8006c4c:	d523      	bpl.n	8006c96 <UART_CheckIdleState+0xa4>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c4e:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8006c52:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006c56:	4620      	mov	r0, r4
 8006c58:	9200      	str	r2, [sp, #0]
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	f7ff febd 	bl	80069da <UART_WaitOnFlagUntilTimeout>
 8006c60:	b1c8      	cbz	r0, 8006c96 <UART_CheckIdleState+0xa4>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006c62:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c64:	e852 3f00 	ldrex	r3, [r2]
 8006c68:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c6c:	e842 3000 	strex	r0, r3, [r2]
   return(result);
 8006c70:	6821      	ldr	r1, [r4, #0]
 8006c72:	2800      	cmp	r0, #0
 8006c74:	d1f5      	bne.n	8006c62 <UART_CheckIdleState+0x70>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c76:	f101 0308 	add.w	r3, r1, #8
 8006c7a:	e853 3f00 	ldrex	r3, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c7e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c82:	f101 0008 	add.w	r0, r1, #8
 8006c86:	e840 3200 	strex	r2, r3, [r0]
 8006c8a:	2a00      	cmp	r2, #0
 8006c8c:	d1f3      	bne.n	8006c76 <UART_CheckIdleState+0x84>
      huart->RxState = HAL_UART_STATE_READY;
 8006c8e:	2320      	movs	r3, #32
 8006c90:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8006c94:	e7d2      	b.n	8006c3c <UART_CheckIdleState+0x4a>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c96:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8006c98:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8006c9a:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
  huart->gState = HAL_UART_STATE_READY;
 8006c9e:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006ca2:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ca6:	66e0      	str	r0, [r4, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ca8:	6720      	str	r0, [r4, #112]	; 0x70
  return HAL_OK;
 8006caa:	e7ca      	b.n	8006c42 <UART_CheckIdleState+0x50>

08006cac <HAL_UART_Init>:
{
 8006cac:	b510      	push	{r4, lr}
  if (huart == NULL)
 8006cae:	4604      	mov	r4, r0
 8006cb0:	b350      	cbz	r0, 8006d08 <HAL_UART_Init+0x5c>
  if (huart->gState == HAL_UART_STATE_RESET)
 8006cb2:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8006cb6:	b91b      	cbnz	r3, 8006cc0 <HAL_UART_Init+0x14>
    huart->Lock = HAL_UNLOCKED;
 8006cb8:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
    HAL_UART_MspInit(huart);
 8006cbc:	f7fa ff60 	bl	8001b80 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8006cc0:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8006cc2:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006cc4:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 8006cc6:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  __HAL_UART_DISABLE(huart);
 8006cca:	6813      	ldr	r3, [r2, #0]
 8006ccc:	f023 0301 	bic.w	r3, r3, #1
 8006cd0:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006cd2:	f7ff fc67 	bl	80065a4 <UART_SetConfig>
 8006cd6:	2801      	cmp	r0, #1
 8006cd8:	d016      	beq.n	8006d08 <HAL_UART_Init+0x5c>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006cda:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006cdc:	b113      	cbz	r3, 8006ce4 <HAL_UART_Init+0x38>
    UART_AdvFeatureConfig(huart);
 8006cde:	4620      	mov	r0, r4
 8006ce0:	f7ff fe26 	bl	8006930 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ce4:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 8006ce6:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ce8:	685a      	ldr	r2, [r3, #4]
 8006cea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006cee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006cf0:	689a      	ldr	r2, [r3, #8]
 8006cf2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006cf6:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8006cf8:	681a      	ldr	r2, [r3, #0]
 8006cfa:	f042 0201 	orr.w	r2, r2, #1
}
 8006cfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 8006d02:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8006d04:	f7ff bf75 	b.w	8006bf2 <UART_CheckIdleState>
}
 8006d08:	2001      	movs	r0, #1
 8006d0a:	bd10      	pop	{r4, pc}

08006d0c <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006d0c:	6e43      	ldr	r3, [r0, #100]	; 0x64
{
 8006d0e:	b530      	push	{r4, r5, lr}
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006d10:	b91b      	cbnz	r3, 8006d1a <UARTEx_SetNbDataToProcess+0xe>
  {
    huart->NbTxDataToProcess = 1U;
    huart->NbRxDataToProcess = 1U;
 8006d12:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8006d16:	6683      	str	r3, [r0, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006d18:	bd30      	pop	{r4, r5, pc}
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006d1a:	6803      	ldr	r3, [r0, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006d1c:	4d0a      	ldr	r5, [pc, #40]	; (8006d48 <UARTEx_SetNbDataToProcess+0x3c>)
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006d1e:	689a      	ldr	r2, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006d20:	6899      	ldr	r1, [r3, #8]
                               (uint16_t)denominator[tx_fifo_threshold];
 8006d22:	4c0a      	ldr	r4, [pc, #40]	; (8006d4c <UARTEx_SetNbDataToProcess+0x40>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006d24:	f3c2 6242 	ubfx	r2, r2, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006d28:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006d2a:	5c6b      	ldrb	r3, [r5, r1]
                               (uint16_t)denominator[tx_fifo_threshold];
 8006d2c:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006d2e:	011b      	lsls	r3, r3, #4
 8006d30:	fbb3 f3f1 	udiv	r3, r3, r1
 8006d34:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006d38:	5cab      	ldrb	r3, [r5, r2]
                               (uint16_t)denominator[rx_fifo_threshold];
 8006d3a:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006d3c:	011b      	lsls	r3, r3, #4
 8006d3e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006d42:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
}
 8006d46:	e7e7      	b.n	8006d18 <UARTEx_SetNbDataToProcess+0xc>
 8006d48:	08015aee 	.word	0x08015aee
 8006d4c:	08015ae6 	.word	0x08015ae6

08006d50 <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 8006d50:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 8006d54:	2b01      	cmp	r3, #1
 8006d56:	d014      	beq.n	8006d82 <HAL_UARTEx_DisableFifoMode+0x32>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006d58:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8006d5a:	2324      	movs	r3, #36	; 0x24
 8006d5c:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006d60:	6811      	ldr	r1, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8006d62:	6813      	ldr	r3, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006d64:	f021 5100 	bic.w	r1, r1, #536870912	; 0x20000000
  __HAL_UART_DISABLE(huart);
 8006d68:	f023 0301 	bic.w	r3, r3, #1
 8006d6c:	6013      	str	r3, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006d6e:	2300      	movs	r3, #0
 8006d70:	6643      	str	r3, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006d72:	6011      	str	r1, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 8006d74:	2220      	movs	r2, #32
  __HAL_UNLOCK(huart);
 8006d76:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  huart->gState = HAL_UART_STATE_READY;
 8006d7a:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  return HAL_OK;
 8006d7e:	4618      	mov	r0, r3
 8006d80:	4770      	bx	lr
  __HAL_LOCK(huart);
 8006d82:	2002      	movs	r0, #2
}
 8006d84:	4770      	bx	lr

08006d86 <HAL_UARTEx_SetTxFifoThreshold>:
{
 8006d86:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8006d88:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
{
 8006d8c:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 8006d8e:	2b01      	cmp	r3, #1
 8006d90:	d01b      	beq.n	8006dca <HAL_UARTEx_SetTxFifoThreshold+0x44>
 8006d92:	2301      	movs	r3, #1
 8006d94:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 8006d98:	2324      	movs	r3, #36	; 0x24
 8006d9a:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006d9e:	6803      	ldr	r3, [r0, #0]
 8006da0:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8006da2:	681a      	ldr	r2, [r3, #0]
 8006da4:	f022 0201 	bic.w	r2, r2, #1
 8006da8:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006daa:	689a      	ldr	r2, [r3, #8]
 8006dac:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 8006db0:	4311      	orrs	r1, r2
 8006db2:	6099      	str	r1, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 8006db4:	f7ff ffaa 	bl	8006d0c <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006db8:	6803      	ldr	r3, [r0, #0]
 8006dba:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8006dbc:	2320      	movs	r3, #32
 8006dbe:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  __HAL_UNLOCK(huart);
 8006dc2:	2000      	movs	r0, #0
 8006dc4:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
}
 8006dc8:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8006dca:	2002      	movs	r0, #2
 8006dcc:	e7fc      	b.n	8006dc8 <HAL_UARTEx_SetTxFifoThreshold+0x42>

08006dce <HAL_UARTEx_SetRxFifoThreshold>:
{
 8006dce:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8006dd0:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
{
 8006dd4:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 8006dd6:	2b01      	cmp	r3, #1
 8006dd8:	d01b      	beq.n	8006e12 <HAL_UARTEx_SetRxFifoThreshold+0x44>
 8006dda:	2301      	movs	r3, #1
 8006ddc:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 8006de0:	2324      	movs	r3, #36	; 0x24
 8006de2:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006de6:	6803      	ldr	r3, [r0, #0]
 8006de8:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8006dea:	681a      	ldr	r2, [r3, #0]
 8006dec:	f022 0201 	bic.w	r2, r2, #1
 8006df0:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006df2:	689a      	ldr	r2, [r3, #8]
 8006df4:	f022 6260 	bic.w	r2, r2, #234881024	; 0xe000000
 8006df8:	4311      	orrs	r1, r2
 8006dfa:	6099      	str	r1, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 8006dfc:	f7ff ff86 	bl	8006d0c <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006e00:	6803      	ldr	r3, [r0, #0]
 8006e02:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8006e04:	2320      	movs	r3, #32
 8006e06:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  __HAL_UNLOCK(huart);
 8006e0a:	2000      	movs	r0, #0
 8006e0c:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
}
 8006e10:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8006e12:	2002      	movs	r0, #2
 8006e14:	e7fc      	b.n	8006e10 <HAL_UARTEx_SetRxFifoThreshold+0x42>

08006e16 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8006e16:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8006e1a:	680a      	ldr	r2, [r1, #0]
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006e1c:	f8d1 9024 	ldr.w	r9, [r1, #36]	; 0x24
 8006e20:	e9d1 4307 	ldrd	r4, r3, [r1, #28]
 8006e24:	e9d1 5801 	ldrd	r5, r8, [r1, #4]
 8006e28:	e9d1 ec03 	ldrd	lr, ip, [r1, #12]
 8006e2c:	e9d1 7605 	ldrd	r7, r6, [r1, #20]
 8006e30:	4323      	orrs	r3, r4
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8006e32:	b9a2      	cbnz	r2, 8006e5e <FMC_SDRAM_Init+0x48>
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006e34:	ea43 0209 	orr.w	r2, r3, r9
 8006e38:	6801      	ldr	r1, [r0, #0]
 8006e3a:	432a      	orrs	r2, r5
 8006e3c:	f421 41ff 	bic.w	r1, r1, #32640	; 0x7f80
 8006e40:	ea42 0308 	orr.w	r3, r2, r8
 8006e44:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 8006e48:	ea43 030e 	orr.w	r3, r3, lr
 8006e4c:	ea43 030c 	orr.w	r3, r3, ip
 8006e50:	433b      	orrs	r3, r7
 8006e52:	4333      	orrs	r3, r6
 8006e54:	430b      	orrs	r3, r1
 8006e56:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 8006e58:	2000      	movs	r0, #0
 8006e5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006e5e:	6802      	ldr	r2, [r0, #0]
 8006e60:	ea43 0309 	orr.w	r3, r3, r9
 8006e64:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8006e68:	4313      	orrs	r3, r2
 8006e6a:	6003      	str	r3, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8006e6c:	ea45 0308 	orr.w	r3, r5, r8
 8006e70:	6842      	ldr	r2, [r0, #4]
 8006e72:	ea43 030e 	orr.w	r3, r3, lr
 8006e76:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 8006e7a:	ea43 030c 	orr.w	r3, r3, ip
 8006e7e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8006e82:	433b      	orrs	r3, r7
 8006e84:	4333      	orrs	r3, r6
 8006e86:	4313      	orrs	r3, r2
 8006e88:	6043      	str	r3, [r0, #4]
 8006e8a:	e7e5      	b.n	8006e58 <FMC_SDRAM_Init+0x42>

08006e8c <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006e8c:	68cb      	ldr	r3, [r1, #12]
 8006e8e:	f103 3cff 	add.w	ip, r3, #4294967295
 8006e92:	694b      	ldr	r3, [r1, #20]
{
 8006e94:	b5f0      	push	{r4, r5, r6, r7, lr}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006e96:	3b01      	subs	r3, #1
 8006e98:	680f      	ldr	r7, [r1, #0]
 8006e9a:	684c      	ldr	r4, [r1, #4]
 8006e9c:	688e      	ldr	r6, [r1, #8]
 8006e9e:	051b      	lsls	r3, r3, #20
 8006ea0:	690d      	ldr	r5, [r1, #16]
 8006ea2:	3c01      	subs	r4, #1
 8006ea4:	6989      	ldr	r1, [r1, #24]
 8006ea6:	3e01      	subs	r6, #1
 8006ea8:	3d01      	subs	r5, #1
 8006eaa:	3f01      	subs	r7, #1
 8006eac:	3901      	subs	r1, #1
 8006eae:	0124      	lsls	r4, r4, #4
 8006eb0:	0236      	lsls	r6, r6, #8
 8006eb2:	042d      	lsls	r5, r5, #16
 8006eb4:	0609      	lsls	r1, r1, #24
 8006eb6:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
  if (Bank == FMC_SDRAM_BANK1)
 8006eba:	b95a      	cbnz	r2, 8006ed4 <FMC_SDRAM_Timing_Init+0x48>
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006ebc:	433b      	orrs	r3, r7
 8006ebe:	6882      	ldr	r2, [r0, #8]
 8006ec0:	4323      	orrs	r3, r4
 8006ec2:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 8006ec6:	4333      	orrs	r3, r6
 8006ec8:	432b      	orrs	r3, r5
 8006eca:	430b      	orrs	r3, r1
 8006ecc:	4313      	orrs	r3, r2
 8006ece:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
}
 8006ed0:	2000      	movs	r0, #0
 8006ed2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006ed4:	6882      	ldr	r2, [r0, #8]
 8006ed6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8006eda:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 8006ede:	431a      	orrs	r2, r3
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8006ee0:	ea44 0306 	orr.w	r3, r4, r6
 8006ee4:	433b      	orrs	r3, r7
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006ee6:	6082      	str	r2, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8006ee8:	68c2      	ldr	r2, [r0, #12]
 8006eea:	432b      	orrs	r3, r5
 8006eec:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 8006ef0:	430b      	orrs	r3, r1
 8006ef2:	4313      	orrs	r3, r2
 8006ef4:	60c3      	str	r3, [r0, #12]
 8006ef6:	e7eb      	b.n	8006ed0 <FMC_SDRAM_Timing_Init+0x44>

08006ef8 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8006ef8:	b084      	sub	sp, #16
 8006efa:	b510      	push	{r4, lr}
 8006efc:	ac03      	add	r4, sp, #12
 8006efe:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8006f02:	9b03      	ldr	r3, [sp, #12]
             Init.HardwareFlowControl | \
             Init.ClockDiv
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8006f04:	6841      	ldr	r1, [r0, #4]
  tmpreg |= (Init.ClockEdge           | \
 8006f06:	4313      	orrs	r3, r2
             Init.ClockPowerSave      | \
 8006f08:	9a05      	ldr	r2, [sp, #20]
 8006f0a:	4313      	orrs	r3, r2
             Init.BusWide             | \
 8006f0c:	9a06      	ldr	r2, [sp, #24]
 8006f0e:	4313      	orrs	r3, r2
             Init.HardwareFlowControl | \
 8006f10:	9a07      	ldr	r2, [sp, #28]
 8006f12:	4313      	orrs	r3, r2
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8006f14:	4a04      	ldr	r2, [pc, #16]	; (8006f28 <SDMMC_Init+0x30>)
 8006f16:	400a      	ands	r2, r1

  return HAL_OK;
}
 8006f18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8006f1c:	4313      	orrs	r3, r2
}
 8006f1e:	b004      	add	sp, #16
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8006f20:	6043      	str	r3, [r0, #4]
}
 8006f22:	2000      	movs	r0, #0
 8006f24:	4770      	bx	lr
 8006f26:	bf00      	nop
 8006f28:	ffc02c00 	.word	0xffc02c00

08006f2c <SDMMC_ReadFIFO>:
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8006f2c:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
}
 8006f30:	4770      	bx	lr

08006f32 <SDMMC_PowerState_ON>:
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8006f32:	6803      	ldr	r3, [r0, #0]
 8006f34:	f043 0303 	orr.w	r3, r3, #3
 8006f38:	6003      	str	r3, [r0, #0]

  return HAL_OK;
}
 8006f3a:	2000      	movs	r0, #0
 8006f3c:	4770      	bx	lr

08006f3e <SDMMC_GetPowerState>:
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8006f3e:	6800      	ldr	r0, [r0, #0]
}
 8006f40:	f000 0003 	and.w	r0, r0, #3
 8006f44:	4770      	bx	lr
	...

08006f48 <SDMMC_SendCommand>:
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8006f48:	680b      	ldr	r3, [r1, #0]
{
 8006f4a:	b510      	push	{r4, lr}
  SDMMCx->ARG = Command->Argument;
 8006f4c:	6083      	str	r3, [r0, #8]
                       Command->Response         | \
                       Command->WaitForInterrupt | \
                       Command->CPSM);

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006f4e:	68c4      	ldr	r4, [r0, #12]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8006f50:	e9d1 3201 	ldrd	r3, r2, [r1, #4]
 8006f54:	4313      	orrs	r3, r2
                       Command->Response         | \
 8006f56:	68ca      	ldr	r2, [r1, #12]
 8006f58:	4313      	orrs	r3, r2
                       Command->WaitForInterrupt | \
 8006f5a:	690a      	ldr	r2, [r1, #16]
 8006f5c:	4313      	orrs	r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006f5e:	4a03      	ldr	r2, [pc, #12]	; (8006f6c <SDMMC_SendCommand+0x24>)
 8006f60:	4022      	ands	r2, r4
 8006f62:	4313      	orrs	r3, r2
 8006f64:	60c3      	str	r3, [r0, #12]

  return HAL_OK;
}
 8006f66:	2000      	movs	r0, #0
 8006f68:	bd10      	pop	{r4, pc}
 8006f6a:	bf00      	nop
 8006f6c:	fffee0c0 	.word	0xfffee0c0

08006f70 <SDMMC_GetResponse>:

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8006f70:	3014      	adds	r0, #20

  return (*(__IO uint32_t *) tmp);
 8006f72:	5840      	ldr	r0, [r0, r1]
}
 8006f74:	4770      	bx	lr

08006f76 <SDMMC_ConfigData>:
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8006f76:	680b      	ldr	r3, [r1, #0]
{
 8006f78:	b510      	push	{r4, lr}
  SDMMCx->DTIMER = Data->DataTimeOut;
 8006f7a:	6243      	str	r3, [r0, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8006f7c:	684b      	ldr	r3, [r1, #4]
 8006f7e:	6283      	str	r3, [r0, #40]	; 0x28
                       Data->TransferDir   | \
                       Data->TransferMode  | \
                       Data->DPSM);

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8006f80:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8006f82:	e9d1 3402 	ldrd	r3, r4, [r1, #8]
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8006f86:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8006f8a:	4323      	orrs	r3, r4
                       Data->TransferDir   | \
 8006f8c:	690c      	ldr	r4, [r1, #16]
                       Data->TransferMode  | \
 8006f8e:	6949      	ldr	r1, [r1, #20]
                       Data->TransferDir   | \
 8006f90:	4323      	orrs	r3, r4
                       Data->TransferMode  | \
 8006f92:	430b      	orrs	r3, r1
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8006f94:	4313      	orrs	r3, r2
 8006f96:	62c3      	str	r3, [r0, #44]	; 0x2c

  return HAL_OK;

}
 8006f98:	2000      	movs	r0, #0
 8006f9a:	bd10      	pop	{r4, pc}

08006f9c <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8006f9c:	b510      	push	{r4, lr}
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8006f9e:	2300      	movs	r3, #0
{
 8006fa0:	b086      	sub	sp, #24
 8006fa2:	4604      	mov	r4, r0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006fa4:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8006fa6:	e9cd 3301 	strd	r3, r3, [sp, #4]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006faa:	e9cd 3303 	strd	r3, r3, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006fae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006fb2:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006fb4:	f7ff ffc8 	bl	8006f48 <SDMMC_SendCommand>
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8006fb8:	4b0a      	ldr	r3, [pc, #40]	; (8006fe4 <SDMMC_CmdGoIdleState+0x48>)
 8006fba:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	fbb3 f3f2 	udiv	r3, r3, r2
 8006fc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006fc8:	4353      	muls	r3, r2

  do
  {
    if (count-- == 0U)
 8006fca:	3b01      	subs	r3, #1
 8006fcc:	d307      	bcc.n	8006fde <SDMMC_CmdGoIdleState+0x42>
    {
      return SDMMC_ERROR_TIMEOUT;
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8006fce:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8006fd0:	0612      	lsls	r2, r2, #24
 8006fd2:	d5fa      	bpl.n	8006fca <SDMMC_CmdGoIdleState+0x2e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006fd4:	4b04      	ldr	r3, [pc, #16]	; (8006fe8 <SDMMC_CmdGoIdleState+0x4c>)

  return SDMMC_ERROR_NONE;
 8006fd6:	2000      	movs	r0, #0
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006fd8:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8006fda:	b006      	add	sp, #24
 8006fdc:	bd10      	pop	{r4, pc}
      return SDMMC_ERROR_TIMEOUT;
 8006fde:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  return errorstate;
 8006fe2:	e7fa      	b.n	8006fda <SDMMC_CmdGoIdleState+0x3e>
 8006fe4:	24000000 	.word	0x24000000
 8006fe8:	002000c5 	.word	0x002000c5

08006fec <SDMMC_GetCmdResp1>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8006fec:	4b45      	ldr	r3, [pc, #276]	; (8007104 <SDMMC_GetCmdResp1+0x118>)
{
 8006fee:	b510      	push	{r4, lr}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8006ff0:	681b      	ldr	r3, [r3, #0]
{
 8006ff2:	4604      	mov	r4, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8006ff4:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8006ff8:	fbb3 f3f0 	udiv	r3, r3, r0
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8006ffc:	4842      	ldr	r0, [pc, #264]	; (8007108 <SDMMC_GetCmdResp1+0x11c>)
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8006ffe:	435a      	muls	r2, r3
    if (count-- == 0U)
 8007000:	2a00      	cmp	r2, #0
 8007002:	d048      	beq.n	8007096 <SDMMC_GetCmdResp1+0xaa>
    sta_reg = SDMMCx->STA;
 8007004:	6b63      	ldr	r3, [r4, #52]	; 0x34
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8007006:	4203      	tst	r3, r0
 8007008:	d007      	beq.n	800701a <SDMMC_GetCmdResp1+0x2e>
 800700a:	049b      	lsls	r3, r3, #18
 800700c:	d405      	bmi.n	800701a <SDMMC_GetCmdResp1+0x2e>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800700e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007010:	0758      	lsls	r0, r3, #29
 8007012:	d504      	bpl.n	800701e <SDMMC_GetCmdResp1+0x32>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007014:	2004      	movs	r0, #4
 8007016:	63a0      	str	r0, [r4, #56]	; 0x38
}
 8007018:	bd10      	pop	{r4, pc}
 800701a:	3a01      	subs	r2, #1
 800701c:	e7f0      	b.n	8007000 <SDMMC_GetCmdResp1+0x14>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800701e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8007020:	f010 0001 	ands.w	r0, r0, #1
 8007024:	d002      	beq.n	800702c <SDMMC_GetCmdResp1+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007026:	2301      	movs	r3, #1
 8007028:	63a3      	str	r3, [r4, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800702a:	e7f5      	b.n	8007018 <SDMMC_GetCmdResp1+0x2c>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800702c:	4b37      	ldr	r3, [pc, #220]	; (800710c <SDMMC_GetCmdResp1+0x120>)
 800702e:	63a3      	str	r3, [r4, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8007030:	6923      	ldr	r3, [r4, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8007032:	b2db      	uxtb	r3, r3
 8007034:	4299      	cmp	r1, r3
 8007036:	d131      	bne.n	800709c <SDMMC_GetCmdResp1+0xb0>
  return (*(__IO uint32_t *) tmp);
 8007038:	6963      	ldr	r3, [r4, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800703a:	4835      	ldr	r0, [pc, #212]	; (8007110 <SDMMC_GetCmdResp1+0x124>)
 800703c:	4018      	ands	r0, r3
 800703e:	2800      	cmp	r0, #0
 8007040:	d0ea      	beq.n	8007018 <SDMMC_GetCmdResp1+0x2c>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8007042:	2b00      	cmp	r3, #0
 8007044:	db2c      	blt.n	80070a0 <SDMMC_GetCmdResp1+0xb4>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8007046:	005a      	lsls	r2, r3, #1
 8007048:	d42d      	bmi.n	80070a6 <SDMMC_GetCmdResp1+0xba>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800704a:	009c      	lsls	r4, r3, #2
 800704c:	d42d      	bmi.n	80070aa <SDMMC_GetCmdResp1+0xbe>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800704e:	00d9      	lsls	r1, r3, #3
 8007050:	d42d      	bmi.n	80070ae <SDMMC_GetCmdResp1+0xc2>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8007052:	011a      	lsls	r2, r3, #4
 8007054:	d42e      	bmi.n	80070b4 <SDMMC_GetCmdResp1+0xc8>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8007056:	015c      	lsls	r4, r3, #5
 8007058:	d42f      	bmi.n	80070ba <SDMMC_GetCmdResp1+0xce>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800705a:	01d9      	lsls	r1, r3, #7
 800705c:	d430      	bmi.n	80070c0 <SDMMC_GetCmdResp1+0xd4>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800705e:	021a      	lsls	r2, r3, #8
 8007060:	d431      	bmi.n	80070c6 <SDMMC_GetCmdResp1+0xda>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8007062:	025c      	lsls	r4, r3, #9
 8007064:	d432      	bmi.n	80070cc <SDMMC_GetCmdResp1+0xe0>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8007066:	0299      	lsls	r1, r3, #10
 8007068:	d433      	bmi.n	80070d2 <SDMMC_GetCmdResp1+0xe6>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800706a:	02da      	lsls	r2, r3, #11
 800706c:	d434      	bmi.n	80070d8 <SDMMC_GetCmdResp1+0xec>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800706e:	035c      	lsls	r4, r3, #13
 8007070:	d435      	bmi.n	80070de <SDMMC_GetCmdResp1+0xf2>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8007072:	0399      	lsls	r1, r3, #14
 8007074:	d436      	bmi.n	80070e4 <SDMMC_GetCmdResp1+0xf8>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8007076:	03da      	lsls	r2, r3, #15
 8007078:	d437      	bmi.n	80070ea <SDMMC_GetCmdResp1+0xfe>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800707a:	041c      	lsls	r4, r3, #16
 800707c:	d438      	bmi.n	80070f0 <SDMMC_GetCmdResp1+0x104>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800707e:	0459      	lsls	r1, r3, #17
 8007080:	d439      	bmi.n	80070f6 <SDMMC_GetCmdResp1+0x10a>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8007082:	049a      	lsls	r2, r3, #18
 8007084:	d43a      	bmi.n	80070fc <SDMMC_GetCmdResp1+0x110>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007086:	f013 0f08 	tst.w	r3, #8
 800708a:	bf14      	ite	ne
 800708c:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 8007090:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 8007094:	e7c0      	b.n	8007018 <SDMMC_GetCmdResp1+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 8007096:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800709a:	e7bd      	b.n	8007018 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800709c:	2001      	movs	r0, #1
 800709e:	e7bb      	b.n	8007018 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80070a0:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 80070a4:	e7b8      	b.n	8007018 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80070a6:	2040      	movs	r0, #64	; 0x40
 80070a8:	e7b6      	b.n	8007018 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80070aa:	2080      	movs	r0, #128	; 0x80
 80070ac:	e7b4      	b.n	8007018 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80070ae:	f44f 7080 	mov.w	r0, #256	; 0x100
 80070b2:	e7b1      	b.n	8007018 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80070b4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80070b8:	e7ae      	b.n	8007018 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80070ba:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80070be:	e7ab      	b.n	8007018 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80070c0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80070c4:	e7a8      	b.n	8007018 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_COM_CRC_FAILED;
 80070c6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80070ca:	e7a5      	b.n	8007018 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ILLEGAL_CMD;
 80070cc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80070d0:	e7a2      	b.n	8007018 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80070d2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80070d6:	e79f      	b.n	8007018 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CC_ERR;
 80070d8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80070dc:	e79c      	b.n	8007018 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80070de:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80070e2:	e799      	b.n	8007018 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80070e4:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80070e8:	e796      	b.n	8007018 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80070ea:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80070ee:	e793      	b.n	8007018 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80070f0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80070f4:	e790      	b.n	8007018 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80070f6:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80070fa:	e78d      	b.n	8007018 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ERASE_RESET;
 80070fc:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8007100:	e78a      	b.n	8007018 <SDMMC_GetCmdResp1+0x2c>
 8007102:	bf00      	nop
 8007104:	24000000 	.word	0x24000000
 8007108:	00200045 	.word	0x00200045
 800710c:	002000c5 	.word	0x002000c5
 8007110:	fdffe008 	.word	0xfdffe008

08007114 <SDMMC_CmdBlockLength>:
{
 8007114:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007116:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 800711a:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800711c:	2510      	movs	r5, #16
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800711e:	2200      	movs	r2, #0
{
 8007120:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8007122:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007124:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007126:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800712a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800712e:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007132:	f7ff ff09 	bl	8006f48 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8007136:	f241 3288 	movw	r2, #5000	; 0x1388
 800713a:	4629      	mov	r1, r5
 800713c:	4620      	mov	r0, r4
 800713e:	f7ff ff55 	bl	8006fec <SDMMC_GetCmdResp1>
}
 8007142:	b007      	add	sp, #28
 8007144:	bd30      	pop	{r4, r5, pc}

08007146 <SDMMC_CmdSelDesel>:
{
 8007146:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007148:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 800714c:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800714e:	2507      	movs	r5, #7
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007150:	2200      	movs	r2, #0
{
 8007152:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8007154:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007156:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007158:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800715c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007160:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007164:	f7ff fef0 	bl	8006f48 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8007168:	f241 3288 	movw	r2, #5000	; 0x1388
 800716c:	4629      	mov	r1, r5
 800716e:	4620      	mov	r0, r4
 8007170:	f7ff ff3c 	bl	8006fec <SDMMC_GetCmdResp1>
}
 8007174:	b007      	add	sp, #28
 8007176:	bd30      	pop	{r4, r5, pc}

08007178 <SDMMC_CmdBusWidth>:
{
 8007178:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800717a:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 800717e:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007180:	2506      	movs	r5, #6
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007182:	2200      	movs	r2, #0
{
 8007184:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8007186:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007188:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800718a:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800718e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007192:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007196:	f7ff fed7 	bl	8006f48 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800719a:	f241 3288 	movw	r2, #5000	; 0x1388
 800719e:	4629      	mov	r1, r5
 80071a0:	4620      	mov	r0, r4
 80071a2:	f7ff ff23 	bl	8006fec <SDMMC_GetCmdResp1>
}
 80071a6:	b007      	add	sp, #28
 80071a8:	bd30      	pop	{r4, r5, pc}

080071aa <SDMMC_CmdSwitch>:
 80071aa:	f7ff bfe5 	b.w	8007178 <SDMMC_CmdBusWidth>

080071ae <SDMMC_CmdSetRelAddMmc>:
{
 80071ae:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80071b0:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 80071b4:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80071b6:	2503      	movs	r5, #3
  sdmmc_cmdinit.Argument         = ((uint32_t)RCA << 16U);
 80071b8:	0409      	lsls	r1, r1, #16
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80071ba:	2200      	movs	r2, #0
{
 80071bc:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = ((uint32_t)RCA << 16U);
 80071be:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80071c0:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80071c2:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80071c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80071ca:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80071ce:	f7ff febb 	bl	8006f48 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_REL_ADDR, SDMMC_CMDTIMEOUT);
 80071d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80071d6:	4629      	mov	r1, r5
 80071d8:	4620      	mov	r0, r4
 80071da:	f7ff ff07 	bl	8006fec <SDMMC_GetCmdResp1>
}
 80071de:	b007      	add	sp, #28
 80071e0:	bd30      	pop	{r4, r5, pc}

080071e2 <SDMMC_CmdSendStatus>:
{
 80071e2:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80071e4:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 80071e8:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80071ea:	250d      	movs	r5, #13
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80071ec:	2200      	movs	r2, #0
{
 80071ee:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 80071f0:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80071f2:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80071f4:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80071f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80071fc:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007200:	f7ff fea2 	bl	8006f48 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8007204:	f241 3288 	movw	r2, #5000	; 0x1388
 8007208:	4629      	mov	r1, r5
 800720a:	4620      	mov	r0, r4
 800720c:	f7ff feee 	bl	8006fec <SDMMC_GetCmdResp1>
}
 8007210:	b007      	add	sp, #28
 8007212:	bd30      	pop	{r4, r5, pc}

08007214 <SDMMC_CmdSendEXTCSD>:
{
 8007214:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007216:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 800721a:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800721c:	2508      	movs	r5, #8
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800721e:	2200      	movs	r2, #0
{
 8007220:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 8007222:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007224:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007226:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800722a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800722e:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007232:	f7ff fe89 	bl	8006f48 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_HS_SEND_EXT_CSD, SDMMC_CMDTIMEOUT);
 8007236:	f241 3288 	movw	r2, #5000	; 0x1388
 800723a:	4629      	mov	r1, r5
 800723c:	4620      	mov	r0, r4
 800723e:	f7ff fed5 	bl	8006fec <SDMMC_GetCmdResp1>
}
 8007242:	b007      	add	sp, #28
 8007244:	bd30      	pop	{r4, r5, pc}
	...

08007248 <SDMMC_GetCmdResp2>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8007248:	4b11      	ldr	r3, [pc, #68]	; (8007290 <SDMMC_GetCmdResp2+0x48>)
 800724a:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
{
 800724e:	4602      	mov	r2, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	fbb3 f3f1 	udiv	r3, r3, r1
 8007256:	f241 3188 	movw	r1, #5000	; 0x1388
 800725a:	434b      	muls	r3, r1
    if (count-- == 0U)
 800725c:	3b01      	subs	r3, #1
 800725e:	d313      	bcc.n	8007288 <SDMMC_GetCmdResp2+0x40>
    sta_reg = SDMMCx->STA;
 8007260:	6b51      	ldr	r1, [r2, #52]	; 0x34
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8007262:	f011 0f45 	tst.w	r1, #69	; 0x45
 8007266:	d0f9      	beq.n	800725c <SDMMC_GetCmdResp2+0x14>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007268:	0489      	lsls	r1, r1, #18
 800726a:	d4f7      	bmi.n	800725c <SDMMC_GetCmdResp2+0x14>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800726c:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800726e:	075b      	lsls	r3, r3, #29
 8007270:	d502      	bpl.n	8007278 <SDMMC_GetCmdResp2+0x30>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007272:	2004      	movs	r0, #4
 8007274:	6390      	str	r0, [r2, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007276:	4770      	bx	lr
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007278:	6b50      	ldr	r0, [r2, #52]	; 0x34
 800727a:	f010 0001 	ands.w	r0, r0, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800727e:	bf14      	ite	ne
 8007280:	2301      	movne	r3, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007282:	4b04      	ldreq	r3, [pc, #16]	; (8007294 <SDMMC_GetCmdResp2+0x4c>)
 8007284:	6393      	str	r3, [r2, #56]	; 0x38
  return SDMMC_ERROR_NONE;
 8007286:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8007288:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800728c:	4770      	bx	lr
 800728e:	bf00      	nop
 8007290:	24000000 	.word	0x24000000
 8007294:	002000c5 	.word	0x002000c5

08007298 <SDMMC_CmdSendCID>:
{
 8007298:	b510      	push	{r4, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800729a:	2300      	movs	r3, #0
{
 800729c:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800729e:	2202      	movs	r2, #2
{
 80072a0:	4604      	mov	r4, r0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80072a2:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80072a4:	e9cd 3201 	strd	r3, r2, [sp, #4]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80072a8:	f44f 7240 	mov.w	r2, #768	; 0x300
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80072ac:	e9cd 2303 	strd	r2, r3, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80072b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80072b4:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80072b6:	f7ff fe47 	bl	8006f48 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80072ba:	4620      	mov	r0, r4
 80072bc:	f7ff ffc4 	bl	8007248 <SDMMC_GetCmdResp2>
}
 80072c0:	b006      	add	sp, #24
 80072c2:	bd10      	pop	{r4, pc}

080072c4 <SDMMC_CmdSendCSD>:
{
 80072c4:	b510      	push	{r4, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80072c6:	2209      	movs	r2, #9
{
 80072c8:	b086      	sub	sp, #24
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80072ca:	f44f 7340 	mov.w	r3, #768	; 0x300
{
 80072ce:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 80072d0:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80072d2:	2100      	movs	r1, #0
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80072d4:	e9cd 2302 	strd	r2, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80072d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80072dc:	e9cd 1304 	strd	r1, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80072e0:	a901      	add	r1, sp, #4
 80072e2:	f7ff fe31 	bl	8006f48 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80072e6:	4620      	mov	r0, r4
 80072e8:	f7ff ffae 	bl	8007248 <SDMMC_GetCmdResp2>
}
 80072ec:	b006      	add	sp, #24
 80072ee:	bd10      	pop	{r4, pc}

080072f0 <SDMMC_GetCmdResp3>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80072f0:	4b0f      	ldr	r3, [pc, #60]	; (8007330 <SDMMC_GetCmdResp3+0x40>)
 80072f2:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
{
 80072f6:	4602      	mov	r2, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80072fe:	f241 3188 	movw	r1, #5000	; 0x1388
 8007302:	434b      	muls	r3, r1
    if (count-- == 0U)
 8007304:	3b01      	subs	r3, #1
 8007306:	d30f      	bcc.n	8007328 <SDMMC_GetCmdResp3+0x38>
    sta_reg = SDMMCx->STA;
 8007308:	6b51      	ldr	r1, [r2, #52]	; 0x34
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800730a:	f011 0f45 	tst.w	r1, #69	; 0x45
 800730e:	d0f9      	beq.n	8007304 <SDMMC_GetCmdResp3+0x14>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007310:	0489      	lsls	r1, r1, #18
 8007312:	d4f7      	bmi.n	8007304 <SDMMC_GetCmdResp3+0x14>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007314:	6b50      	ldr	r0, [r2, #52]	; 0x34
 8007316:	f010 0004 	ands.w	r0, r0, #4
 800731a:	d002      	beq.n	8007322 <SDMMC_GetCmdResp3+0x32>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800731c:	2004      	movs	r0, #4
 800731e:	6390      	str	r0, [r2, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007320:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007322:	4b04      	ldr	r3, [pc, #16]	; (8007334 <SDMMC_GetCmdResp3+0x44>)
 8007324:	6393      	str	r3, [r2, #56]	; 0x38
  return SDMMC_ERROR_NONE;
 8007326:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8007328:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800732c:	4770      	bx	lr
 800732e:	bf00      	nop
 8007330:	24000000 	.word	0x24000000
 8007334:	002000c5 	.word	0x002000c5

08007338 <SDMMC_CmdOpCondition>:
{
 8007338:	b510      	push	{r4, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800733a:	2201      	movs	r2, #1
{
 800733c:	b086      	sub	sp, #24
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800733e:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 8007342:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 8007344:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007346:	2100      	movs	r1, #0
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007348:	e9cd 2302 	strd	r2, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800734c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007350:	e9cd 1304 	strd	r1, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007354:	a901      	add	r1, sp, #4
 8007356:	f7ff fdf7 	bl	8006f48 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800735a:	4620      	mov	r0, r4
 800735c:	f7ff ffc8 	bl	80072f0 <SDMMC_GetCmdResp3>
}
 8007360:	b006      	add	sp, #24
 8007362:	bd10      	pop	{r4, pc}

08007364 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007364:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8007366:	2300      	movs	r3, #0
  /* Wait for AHB master IDLE state. */
  do
  {
    count++;

    if (count > 200000U)
 8007368:	4a10      	ldr	r2, [pc, #64]	; (80073ac <USB_CoreReset+0x48>)
  __IO uint32_t count = 0U;
 800736a:	9301      	str	r3, [sp, #4]
    count++;
 800736c:	9b01      	ldr	r3, [sp, #4]
 800736e:	3301      	adds	r3, #1
 8007370:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8007372:	9b01      	ldr	r3, [sp, #4]
 8007374:	4293      	cmp	r3, r2
 8007376:	d816      	bhi.n	80073a6 <USB_CoreReset+0x42>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007378:	6903      	ldr	r3, [r0, #16]
 800737a:	2b00      	cmp	r3, #0
 800737c:	daf6      	bge.n	800736c <USB_CoreReset+0x8>

  /* Core Soft Reset */
  count = 0U;
 800737e:	2300      	movs	r3, #0

  do
  {
    count++;

    if (count > 200000U)
 8007380:	4a0a      	ldr	r2, [pc, #40]	; (80073ac <USB_CoreReset+0x48>)
  count = 0U;
 8007382:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007384:	6903      	ldr	r3, [r0, #16]
 8007386:	f043 0301 	orr.w	r3, r3, #1
 800738a:	6103      	str	r3, [r0, #16]
    count++;
 800738c:	9b01      	ldr	r3, [sp, #4]
 800738e:	3301      	adds	r3, #1
 8007390:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8007392:	9b01      	ldr	r3, [sp, #4]
 8007394:	4293      	cmp	r3, r2
 8007396:	d806      	bhi.n	80073a6 <USB_CoreReset+0x42>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007398:	6903      	ldr	r3, [r0, #16]
 800739a:	f013 0301 	ands.w	r3, r3, #1
 800739e:	d1f5      	bne.n	800738c <USB_CoreReset+0x28>

  return HAL_OK;
 80073a0:	4618      	mov	r0, r3
}
 80073a2:	b002      	add	sp, #8
 80073a4:	4770      	bx	lr
      return HAL_TIMEOUT;
 80073a6:	2003      	movs	r0, #3
 80073a8:	e7fb      	b.n	80073a2 <USB_CoreReset+0x3e>
 80073aa:	bf00      	nop
 80073ac:	00030d40 	.word	0x00030d40

080073b0 <USB_CoreInit>:
{
 80073b0:	b084      	sub	sp, #16
 80073b2:	b538      	push	{r3, r4, r5, lr}
 80073b4:	ad05      	add	r5, sp, #20
 80073b6:	4604      	mov	r4, r0
 80073b8:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80073bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073be:	2b01      	cmp	r3, #1
 80073c0:	d12f      	bne.n	8007422 <USB_CoreInit+0x72>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80073c2:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80073c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80073c8:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80073ca:	68c3      	ldr	r3, [r0, #12]
 80073cc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80073d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073d4:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80073d6:	68c3      	ldr	r3, [r0, #12]
 80073d8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80073dc:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 80073de:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80073e0:	2b01      	cmp	r3, #1
 80073e2:	d103      	bne.n	80073ec <USB_CoreInit+0x3c>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80073e4:	68c3      	ldr	r3, [r0, #12]
 80073e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80073ea:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 80073ec:	4620      	mov	r0, r4
 80073ee:	f7ff ffb9 	bl	8007364 <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 80073f2:	9b07      	ldr	r3, [sp, #28]
 80073f4:	2b01      	cmp	r3, #1
 80073f6:	d110      	bne.n	800741a <USB_CoreInit+0x6a>
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80073f8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80073fa:	b29b      	uxth	r3, r3
 80073fc:	65e3      	str	r3, [r4, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80073fe:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8007400:	f043 737b 	orr.w	r3, r3, #65798144	; 0x3ec0000
 8007404:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007408:	65e3      	str	r3, [r4, #92]	; 0x5c
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800740a:	68a3      	ldr	r3, [r4, #8]
 800740c:	f043 0306 	orr.w	r3, r3, #6
 8007410:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007412:	68a3      	ldr	r3, [r4, #8]
 8007414:	f043 0320 	orr.w	r3, r3, #32
 8007418:	60a3      	str	r3, [r4, #8]
}
 800741a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800741e:	b004      	add	sp, #16
 8007420:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007422:	68c3      	ldr	r3, [r0, #12]
 8007424:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007428:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 800742a:	f7ff ff9b 	bl	8007364 <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 800742e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007430:	b923      	cbnz	r3, 800743c <USB_CoreInit+0x8c>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007432:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007434:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007438:	63a3      	str	r3, [r4, #56]	; 0x38
 800743a:	e7da      	b.n	80073f2 <USB_CoreInit+0x42>
 800743c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800743e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007442:	e7f9      	b.n	8007438 <USB_CoreInit+0x88>

08007444 <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007444:	6883      	ldr	r3, [r0, #8]
 8007446:	f023 0301 	bic.w	r3, r3, #1
 800744a:	6083      	str	r3, [r0, #8]
}
 800744c:	2000      	movs	r0, #0
 800744e:	4770      	bx	lr

08007450 <USB_SetCurrentMode>:
{
 8007450:	b538      	push	{r3, r4, r5, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007452:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8007454:	2901      	cmp	r1, #1
{
 8007456:	4605      	mov	r5, r0
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007458:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800745c:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800745e:	d10f      	bne.n	8007480 <USB_SetCurrentMode+0x30>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007460:	68c3      	ldr	r3, [r0, #12]
  uint32_t ms = 0U;
 8007462:	2400      	movs	r4, #0
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007464:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007468:	60c3      	str	r3, [r0, #12]
      HAL_Delay(1U);
 800746a:	2001      	movs	r0, #1
      ms++;
 800746c:	3401      	adds	r4, #1
      HAL_Delay(1U);
 800746e:	f7fa fe2f 	bl	80020d0 <HAL_Delay>
  return ((USBx->GINTSTS) & 0x1U);
 8007472:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007474:	07d9      	lsls	r1, r3, #31
 8007476:	d414      	bmi.n	80074a2 <USB_SetCurrentMode+0x52>
 8007478:	2c32      	cmp	r4, #50	; 0x32
 800747a:	d1f6      	bne.n	800746a <USB_SetCurrentMode+0x1a>
    return HAL_ERROR;
 800747c:	2001      	movs	r0, #1
}
 800747e:	bd38      	pop	{r3, r4, r5, pc}
  else if (mode == USB_DEVICE_MODE)
 8007480:	2900      	cmp	r1, #0
 8007482:	d1fb      	bne.n	800747c <USB_SetCurrentMode+0x2c>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007484:	68c3      	ldr	r3, [r0, #12]
  uint32_t ms = 0U;
 8007486:	460c      	mov	r4, r1
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007488:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800748c:	60c3      	str	r3, [r0, #12]
      HAL_Delay(1U);
 800748e:	2001      	movs	r0, #1
      ms++;
 8007490:	3401      	adds	r4, #1
      HAL_Delay(1U);
 8007492:	f7fa fe1d 	bl	80020d0 <HAL_Delay>
  return ((USBx->GINTSTS) & 0x1U);
 8007496:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007498:	07da      	lsls	r2, r3, #31
 800749a:	d502      	bpl.n	80074a2 <USB_SetCurrentMode+0x52>
 800749c:	2c32      	cmp	r4, #50	; 0x32
 800749e:	d1f6      	bne.n	800748e <USB_SetCurrentMode+0x3e>
 80074a0:	e7ec      	b.n	800747c <USB_SetCurrentMode+0x2c>
    return HAL_ERROR;
 80074a2:	f1a4 0332 	sub.w	r3, r4, #50	; 0x32
 80074a6:	4258      	negs	r0, r3
 80074a8:	4158      	adcs	r0, r3
 80074aa:	e7e8      	b.n	800747e <USB_SetCurrentMode+0x2e>

080074ac <USB_FlushTxFifo>:
{
 80074ac:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 80074ae:	2300      	movs	r3, #0
    if (count > 200000U)
 80074b0:	4a10      	ldr	r2, [pc, #64]	; (80074f4 <USB_FlushTxFifo+0x48>)
  __IO uint32_t count = 0U;
 80074b2:	9301      	str	r3, [sp, #4]
    count++;
 80074b4:	9b01      	ldr	r3, [sp, #4]
 80074b6:	3301      	adds	r3, #1
 80074b8:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 80074ba:	9b01      	ldr	r3, [sp, #4]
 80074bc:	4293      	cmp	r3, r2
 80074be:	d816      	bhi.n	80074ee <USB_FlushTxFifo+0x42>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80074c0:	6903      	ldr	r3, [r0, #16]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	daf6      	bge.n	80074b4 <USB_FlushTxFifo+0x8>
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80074c6:	0189      	lsls	r1, r1, #6
  count = 0U;
 80074c8:	2300      	movs	r3, #0
    if (count > 200000U)
 80074ca:	4a0a      	ldr	r2, [pc, #40]	; (80074f4 <USB_FlushTxFifo+0x48>)
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80074cc:	f041 0120 	orr.w	r1, r1, #32
  count = 0U;
 80074d0:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80074d2:	6101      	str	r1, [r0, #16]
    count++;
 80074d4:	9b01      	ldr	r3, [sp, #4]
 80074d6:	3301      	adds	r3, #1
 80074d8:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 80074da:	9b01      	ldr	r3, [sp, #4]
 80074dc:	4293      	cmp	r3, r2
 80074de:	d806      	bhi.n	80074ee <USB_FlushTxFifo+0x42>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80074e0:	6903      	ldr	r3, [r0, #16]
 80074e2:	f013 0320 	ands.w	r3, r3, #32
 80074e6:	d1f5      	bne.n	80074d4 <USB_FlushTxFifo+0x28>
  return HAL_OK;
 80074e8:	4618      	mov	r0, r3
}
 80074ea:	b002      	add	sp, #8
 80074ec:	4770      	bx	lr
      return HAL_TIMEOUT;
 80074ee:	2003      	movs	r0, #3
 80074f0:	e7fb      	b.n	80074ea <USB_FlushTxFifo+0x3e>
 80074f2:	bf00      	nop
 80074f4:	00030d40 	.word	0x00030d40

080074f8 <USB_FlushRxFifo>:
{
 80074f8:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 80074fa:	2300      	movs	r3, #0
    if (count > 200000U)
 80074fc:	4a0f      	ldr	r2, [pc, #60]	; (800753c <USB_FlushRxFifo+0x44>)
  __IO uint32_t count = 0U;
 80074fe:	9301      	str	r3, [sp, #4]
    count++;
 8007500:	9b01      	ldr	r3, [sp, #4]
 8007502:	3301      	adds	r3, #1
 8007504:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8007506:	9b01      	ldr	r3, [sp, #4]
 8007508:	4293      	cmp	r3, r2
 800750a:	d814      	bhi.n	8007536 <USB_FlushRxFifo+0x3e>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800750c:	6903      	ldr	r3, [r0, #16]
 800750e:	2b00      	cmp	r3, #0
 8007510:	daf6      	bge.n	8007500 <USB_FlushRxFifo+0x8>
  count = 0U;
 8007512:	2300      	movs	r3, #0
    if (count > 200000U)
 8007514:	4a09      	ldr	r2, [pc, #36]	; (800753c <USB_FlushRxFifo+0x44>)
  count = 0U;
 8007516:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007518:	2310      	movs	r3, #16
 800751a:	6103      	str	r3, [r0, #16]
    count++;
 800751c:	9b01      	ldr	r3, [sp, #4]
 800751e:	3301      	adds	r3, #1
 8007520:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8007522:	9b01      	ldr	r3, [sp, #4]
 8007524:	4293      	cmp	r3, r2
 8007526:	d806      	bhi.n	8007536 <USB_FlushRxFifo+0x3e>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007528:	6903      	ldr	r3, [r0, #16]
 800752a:	f013 0310 	ands.w	r3, r3, #16
 800752e:	d1f5      	bne.n	800751c <USB_FlushRxFifo+0x24>
  return HAL_OK;
 8007530:	4618      	mov	r0, r3
}
 8007532:	b002      	add	sp, #8
 8007534:	4770      	bx	lr
      return HAL_TIMEOUT;
 8007536:	2003      	movs	r0, #3
 8007538:	e7fb      	b.n	8007532 <USB_FlushRxFifo+0x3a>
 800753a:	bf00      	nop
 800753c:	00030d40 	.word	0x00030d40

08007540 <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 8007540:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8007544:	4319      	orrs	r1, r3
 8007546:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 800754a:	2000      	movs	r0, #0
 800754c:	4770      	bx	lr
	...

08007550 <USB_DevInit>:
{
 8007550:	b084      	sub	sp, #16
 8007552:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007556:	4604      	mov	r4, r0
 8007558:	a809      	add	r0, sp, #36	; 0x24
 800755a:	460e      	mov	r6, r1
 800755c:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 800755e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  for (i = 0U; i < 15U; i++)
 8007562:	2300      	movs	r3, #0
    USBx->DIEPTXF[i] = 0U;
 8007564:	4619      	mov	r1, r3
 8007566:	f103 0240 	add.w	r2, r3, #64	; 0x40
  for (i = 0U; i < 15U; i++)
 800756a:	3301      	adds	r3, #1
    USBx->DIEPTXF[i] = 0U;
 800756c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  for (i = 0U; i < 15U; i++)
 8007570:	2b0f      	cmp	r3, #15
    USBx->DIEPTXF[i] = 0U;
 8007572:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 8007574:	d1f7      	bne.n	8007566 <USB_DevInit+0x16>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007576:	f504 6700 	add.w	r7, r4, #2048	; 0x800
  if (cfg.vbus_sensing_enable == 0U)
 800757a:	2d00      	cmp	r5, #0
 800757c:	d16c      	bne.n	8007658 <USB_DevInit+0x108>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	f043 0302 	orr.w	r3, r3, #2
 8007584:	607b      	str	r3, [r7, #4]
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007586:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007588:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800758c:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800758e:	6823      	ldr	r3, [r4, #0]
 8007590:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007594:	6023      	str	r3, [r4, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007596:	6823      	ldr	r3, [r4, #0]
 8007598:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800759c:	6023      	str	r3, [r4, #0]
  USBx_PCGCCTL = 0U;
 800759e:	2300      	movs	r3, #0
 80075a0:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80075a4:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 80075a8:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80075ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80075ae:	2b01      	cmp	r3, #1
 80075b0:	d159      	bne.n	8007666 <USB_DevInit+0x116>
    if (cfg.speed == USBD_HS_SPEED)
 80075b2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80075b4:	2900      	cmp	r1, #0
 80075b6:	d154      	bne.n	8007662 <USB_DevInit+0x112>
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80075b8:	4620      	mov	r0, r4
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80075ba:	f64f 387f 	movw	r8, #64383	; 0xfb7f
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80075be:	f7ff ffbf 	bl	8007540 <USB_SetDevSpeed>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80075c2:	2110      	movs	r1, #16
 80075c4:	4620      	mov	r0, r4
 80075c6:	f7ff ff71 	bl	80074ac <USB_FlushTxFifo>
 80075ca:	4601      	mov	r1, r0
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80075cc:	4620      	mov	r0, r4
 80075ce:	f7ff ff93 	bl	80074f8 <USB_FlushRxFifo>
 80075d2:	4308      	orrs	r0, r1
  USBx_DEVICE->DIEPMSK = 0U;
 80075d4:	2300      	movs	r3, #0
 80075d6:	f504 6210 	add.w	r2, r4, #2304	; 0x900
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80075da:	b2c0      	uxtb	r0, r0
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80075dc:	f04f 4c90 	mov.w	ip, #1207959552	; 0x48000000
      USBx_INEP(i)->DIEPCTL = 0U;
 80075e0:	4619      	mov	r1, r3
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80075e2:	f04f 6e00 	mov.w	lr, #134217728	; 0x8000000
    ret = HAL_ERROR;
 80075e6:	3800      	subs	r0, #0
  USBx_DEVICE->DIEPMSK = 0U;
 80075e8:	613b      	str	r3, [r7, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80075ea:	617b      	str	r3, [r7, #20]
    ret = HAL_ERROR;
 80075ec:	bf18      	it	ne
 80075ee:	2001      	movne	r0, #1
  USBx_DEVICE->DAINTMSK = 0U;
 80075f0:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80075f2:	42b3      	cmp	r3, r6
 80075f4:	d139      	bne.n	800766a <USB_DevInit+0x11a>
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80075f6:	2200      	movs	r2, #0
 80075f8:	f504 6330 	add.w	r3, r4, #2816	; 0xb00
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80075fc:	f04f 4c90 	mov.w	ip, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007600:	f04f 6e00 	mov.w	lr, #134217728	; 0x8000000
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007604:	4611      	mov	r1, r2
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007606:	f64f 387f 	movw	r8, #64383	; 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800760a:	42b2      	cmp	r2, r6
 800760c:	d140      	bne.n	8007690 <USB_DevInit+0x140>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800760e:	693b      	ldr	r3, [r7, #16]
 8007610:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007614:	613b      	str	r3, [r7, #16]
  USBx->GINTMSK = 0U;
 8007616:	2300      	movs	r3, #0
 8007618:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 800761a:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 800761e:	6163      	str	r3, [r4, #20]
  if (cfg.dma_enable == 0U)
 8007620:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007622:	b91b      	cbnz	r3, 800762c <USB_DevInit+0xdc>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007624:	69a3      	ldr	r3, [r4, #24]
 8007626:	f043 0310 	orr.w	r3, r3, #16
 800762a:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800762c:	69a2      	ldr	r2, [r4, #24]
 800762e:	4b22      	ldr	r3, [pc, #136]	; (80076b8 <USB_DevInit+0x168>)
 8007630:	4313      	orrs	r3, r2
 8007632:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 8007634:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007636:	b11b      	cbz	r3, 8007640 <USB_DevInit+0xf0>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007638:	69a3      	ldr	r3, [r4, #24]
 800763a:	f043 0308 	orr.w	r3, r3, #8
 800763e:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 8007640:	2d01      	cmp	r5, #1
 8007642:	d105      	bne.n	8007650 <USB_DevInit+0x100>
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007644:	69a3      	ldr	r3, [r4, #24]
 8007646:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800764a:	f043 0304 	orr.w	r3, r3, #4
 800764e:	61a3      	str	r3, [r4, #24]
}
 8007650:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007654:	b004      	add	sp, #16
 8007656:	4770      	bx	lr
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007658:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800765a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800765e:	63a3      	str	r3, [r4, #56]	; 0x38
 8007660:	e79d      	b.n	800759e <USB_DevInit+0x4e>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007662:	4619      	mov	r1, r3
 8007664:	e7a8      	b.n	80075b8 <USB_DevInit+0x68>
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007666:	2103      	movs	r1, #3
 8007668:	e7a6      	b.n	80075b8 <USB_DevInit+0x68>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800766a:	f8d2 9000 	ldr.w	r9, [r2]
 800766e:	f1b9 0f00 	cmp.w	r9, #0
 8007672:	da0b      	bge.n	800768c <USB_DevInit+0x13c>
      if (i == 0U)
 8007674:	b93b      	cbnz	r3, 8007686 <USB_DevInit+0x136>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007676:	f8c2 e000 	str.w	lr, [r2]
    USBx_INEP(i)->DIEPTSIZ = 0U;
 800767a:	6111      	str	r1, [r2, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800767c:	3301      	adds	r3, #1
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800767e:	f8c2 8008 	str.w	r8, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007682:	3220      	adds	r2, #32
 8007684:	e7b5      	b.n	80075f2 <USB_DevInit+0xa2>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007686:	f8c2 c000 	str.w	ip, [r2]
 800768a:	e7f6      	b.n	800767a <USB_DevInit+0x12a>
      USBx_INEP(i)->DIEPCTL = 0U;
 800768c:	6011      	str	r1, [r2, #0]
 800768e:	e7f4      	b.n	800767a <USB_DevInit+0x12a>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007690:	f8d3 9000 	ldr.w	r9, [r3]
 8007694:	f1b9 0f00 	cmp.w	r9, #0
 8007698:	da0b      	bge.n	80076b2 <USB_DevInit+0x162>
      if (i == 0U)
 800769a:	b93a      	cbnz	r2, 80076ac <USB_DevInit+0x15c>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800769c:	f8c3 e000 	str.w	lr, [r3]
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80076a0:	6119      	str	r1, [r3, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80076a2:	3201      	adds	r2, #1
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80076a4:	f8c3 8008 	str.w	r8, [r3, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80076a8:	3320      	adds	r3, #32
 80076aa:	e7ae      	b.n	800760a <USB_DevInit+0xba>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80076ac:	f8c3 c000 	str.w	ip, [r3]
 80076b0:	e7f6      	b.n	80076a0 <USB_DevInit+0x150>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80076b2:	6019      	str	r1, [r3, #0]
 80076b4:	e7f4      	b.n	80076a0 <USB_DevInit+0x150>
 80076b6:	bf00      	nop
 80076b8:	803c3800 	.word	0x803c3800

080076bc <USB_DevDisconnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80076bc:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	; 0xe00
 80076c0:	f023 0303 	bic.w	r3, r3, #3
 80076c4:	f8c0 3e00 	str.w	r3, [r0, #3584]	; 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80076c8:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 80076cc:	f043 0302 	orr.w	r3, r3, #2
 80076d0:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
}
 80076d4:	2000      	movs	r0, #0
 80076d6:	4770      	bx	lr

080076d8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80076d8:	b508      	push	{r3, lr}
  /*## FatFS: Link the SDRAMDISK driver ###########################*/
  retSDRAMDISK = FATFS_LinkDriver(&SDRAMDISK_Driver, SDRAMDISKPath);
 80076da:	4903      	ldr	r1, [pc, #12]	; (80076e8 <MX_FATFS_Init+0x10>)
 80076dc:	4803      	ldr	r0, [pc, #12]	; (80076ec <MX_FATFS_Init+0x14>)
 80076de:	f000 f881 	bl	80077e4 <FATFS_LinkDriver>
 80076e2:	4b03      	ldr	r3, [pc, #12]	; (80076f0 <MX_FATFS_Init+0x18>)
 80076e4:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80076e6:	bd08      	pop	{r3, pc}
 80076e8:	240017c8 	.word	0x240017c8
 80076ec:	08015af8 	.word	0x08015af8
 80076f0:	240017cc 	.word	0x240017cc

080076f4 <BSP_SDRAM_Init>:
  uint8_t sdramstatus = SDRAM_OK;

  /* place for custom code */

  return sdramstatus;
}
 80076f4:	2000      	movs	r0, #0
 80076f6:	4770      	bx	lr

080076f8 <SDRAMDISK_status>:
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SDRAMDISK_status(BYTE lun)
{
  return Stat;
 80076f8:	4b01      	ldr	r3, [pc, #4]	; (8007700 <SDRAMDISK_status+0x8>)
 80076fa:	7818      	ldrb	r0, [r3, #0]
}
 80076fc:	4770      	bx	lr
 80076fe:	bf00      	nop
 8007700:	24000010 	.word	0x24000010

08007704 <SDRAMDISK_read>:
  */
DRESULT SDRAMDISK_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
  uint32_t *pSrcBuffer = (uint32_t *)buff;
  uint32_t BufferSize = (BLOCK_SIZE * count)/4;
  uint32_t *pSdramAddress = (uint32_t *) (SDRAM_DEVICE_ADDR + (sector * BLOCK_SIZE));
 8007704:	f502 02d0 	add.w	r2, r2, #6815744	; 0x680000

  for(; BufferSize != 0; BufferSize--)
 8007708:	eb01 2343 	add.w	r3, r1, r3, lsl #9
 800770c:	ebc1 2242 	rsb	r2, r1, r2, lsl #9
 8007710:	4299      	cmp	r1, r3
 8007712:	eb01 0002 	add.w	r0, r1, r2
 8007716:	d101      	bne.n	800771c <SDRAMDISK_read+0x18>
  {
    *pSrcBuffer++ = *(__IO uint32_t *)pSdramAddress++;
  }

  return RES_OK;
}
 8007718:	2000      	movs	r0, #0
 800771a:	4770      	bx	lr
    *pSrcBuffer++ = *(__IO uint32_t *)pSdramAddress++;
 800771c:	6800      	ldr	r0, [r0, #0]
 800771e:	f841 0b04 	str.w	r0, [r1], #4
  for(; BufferSize != 0; BufferSize--)
 8007722:	e7f5      	b.n	8007710 <SDRAMDISK_read+0xc>

08007724 <SDRAMDISK_write>:
#if _USE_WRITE == 1
DRESULT SDRAMDISK_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
  uint32_t *pDstBuffer = (uint32_t *)buff;
  uint32_t BufferSize = (BLOCK_SIZE * count)/4;
  uint32_t *pSramAddress = (uint32_t *) (SDRAM_DEVICE_ADDR + (sector * BLOCK_SIZE));
 8007724:	f502 02d0 	add.w	r2, r2, #6815744	; 0x680000

  for(; BufferSize != 0; BufferSize--)
 8007728:	eb01 2343 	add.w	r3, r1, r3, lsl #9
 800772c:	ebc1 2242 	rsb	r2, r1, r2, lsl #9
{
 8007730:	b510      	push	{r4, lr}
  for(; BufferSize != 0; BufferSize--)
 8007732:	4299      	cmp	r1, r3
 8007734:	eb01 0002 	add.w	r0, r1, r2
 8007738:	d101      	bne.n	800773e <SDRAMDISK_write+0x1a>
  {
    *(__IO uint32_t *)pSramAddress++ = *pDstBuffer++;
  }

  return RES_OK;
}
 800773a:	2000      	movs	r0, #0
 800773c:	bd10      	pop	{r4, pc}
    *(__IO uint32_t *)pSramAddress++ = *pDstBuffer++;
 800773e:	f851 4b04 	ldr.w	r4, [r1], #4
 8007742:	6004      	str	r4, [r0, #0]
  for(; BufferSize != 0; BufferSize--)
 8007744:	e7f5      	b.n	8007732 <SDRAMDISK_write+0xe>
	...

08007748 <SDRAMDISK_ioctl>:
#if _USE_IOCTL == 1
DRESULT SDRAMDISK_ioctl(BYTE lun, BYTE cmd, void *buff)
{
  DRESULT res = RES_ERROR;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8007748:	4b0d      	ldr	r3, [pc, #52]	; (8007780 <SDRAMDISK_ioctl+0x38>)
 800774a:	7818      	ldrb	r0, [r3, #0]
 800774c:	f010 0001 	ands.w	r0, r0, #1
 8007750:	d111      	bne.n	8007776 <SDRAMDISK_ioctl+0x2e>

  switch (cmd)
 8007752:	2903      	cmp	r1, #3
 8007754:	d803      	bhi.n	800775e <SDRAMDISK_ioctl+0x16>
 8007756:	e8df f001 	tbb	[pc, r1]
 800775a:	0410      	.short	0x0410
 800775c:	0c08      	.short	0x0c08
 800775e:	2004      	movs	r0, #4
 8007760:	4770      	bx	lr
    res = RES_OK;
    break;

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    *(DWORD*)buff = SDRAM_DEVICE_SIZE / BLOCK_SIZE;
 8007762:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    res = RES_OK;
    break;

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    *(DWORD*)buff = 1;
 8007766:	6013      	str	r3, [r2, #0]
	res = RES_OK;
    break;
 8007768:	4770      	bx	lr
    *(WORD*)buff = BLOCK_SIZE;
 800776a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800776e:	8013      	strh	r3, [r2, #0]
    break;
 8007770:	4770      	bx	lr
    *(DWORD*)buff = 1;
 8007772:	2301      	movs	r3, #1
 8007774:	e7f7      	b.n	8007766 <SDRAMDISK_ioctl+0x1e>
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8007776:	2003      	movs	r0, #3
 8007778:	4770      	bx	lr
    res = RES_OK;
 800777a:	4608      	mov	r0, r1
  default:
    res = RES_PARERR;
  }

  return res;
}
 800777c:	4770      	bx	lr
 800777e:	bf00      	nop
 8007780:	24000010 	.word	0x24000010

08007784 <SDRAMDISK_initialize>:
{
 8007784:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
 8007786:	2301      	movs	r3, #1
 8007788:	4c05      	ldr	r4, [pc, #20]	; (80077a0 <SDRAMDISK_initialize+0x1c>)
 800778a:	7023      	strb	r3, [r4, #0]
  if(BSP_SDRAM_Init() == SDRAM_OK)
 800778c:	f7ff ffb2 	bl	80076f4 <BSP_SDRAM_Init>
 8007790:	b918      	cbnz	r0, 800779a <SDRAMDISK_initialize+0x16>
    Stat &= ~STA_NOINIT;
 8007792:	7823      	ldrb	r3, [r4, #0]
 8007794:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8007798:	7023      	strb	r3, [r4, #0]
  return Stat;
 800779a:	7820      	ldrb	r0, [r4, #0]
}
 800779c:	bd10      	pop	{r4, pc}
 800779e:	bf00      	nop
 80077a0:	24000010 	.word	0x24000010

080077a4 <FATFS_LinkDriverEx>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 80077a4:	4b0e      	ldr	r3, [pc, #56]	; (80077e0 <FATFS_LinkDriverEx+0x3c>)
{
 80077a6:	b530      	push	{r4, r5, lr}
  if(disk.nbr < _VOLUMES)
 80077a8:	7a5c      	ldrb	r4, [r3, #9]
{
 80077aa:	4605      	mov	r5, r0
  if(disk.nbr < _VOLUMES)
 80077ac:	f004 00ff 	and.w	r0, r4, #255	; 0xff
 80077b0:	b9a4      	cbnz	r4, 80077dc <FATFS_LinkDriverEx+0x38>
  {
    disk.is_initialized[disk.nbr] = 0;
 80077b2:	7a5c      	ldrb	r4, [r3, #9]
 80077b4:	5518      	strb	r0, [r3, r4]
    disk.drv[disk.nbr] = drv;
 80077b6:	7a5c      	ldrb	r4, [r3, #9]
 80077b8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80077bc:	6065      	str	r5, [r4, #4]
    disk.lun[disk.nbr] = lun;
 80077be:	7a5c      	ldrb	r4, [r3, #9]
 80077c0:	441c      	add	r4, r3
 80077c2:	7222      	strb	r2, [r4, #8]
    DiskNum = disk.nbr++;
 80077c4:	7a5a      	ldrb	r2, [r3, #9]
 80077c6:	1c54      	adds	r4, r2, #1
    path[0] = DiskNum + '0';
 80077c8:	3230      	adds	r2, #48	; 0x30
    DiskNum = disk.nbr++;
 80077ca:	b2e4      	uxtb	r4, r4
 80077cc:	725c      	strb	r4, [r3, #9]
    path[1] = ':';
 80077ce:	233a      	movs	r3, #58	; 0x3a
    path[0] = DiskNum + '0';
 80077d0:	700a      	strb	r2, [r1, #0]
    path[1] = ':';
 80077d2:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 80077d4:	232f      	movs	r3, #47	; 0x2f
    path[3] = 0;
 80077d6:	70c8      	strb	r0, [r1, #3]
    path[2] = '/';
 80077d8:	708b      	strb	r3, [r1, #2]
    ret = 0;
  }

  return ret;
}
 80077da:	bd30      	pop	{r4, r5, pc}
  uint8_t ret = 1;
 80077dc:	2001      	movs	r0, #1
 80077de:	e7fc      	b.n	80077da <FATFS_LinkDriverEx+0x36>
 80077e0:	240017d0 	.word	0x240017d0

080077e4 <FATFS_LinkDriver>:
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
  return FATFS_LinkDriverEx(drv, path, 0);
 80077e4:	2200      	movs	r2, #0
 80077e6:	f7ff bfdd 	b.w	80077a4 <FATFS_LinkDriverEx>
	...

080077ec <write_callback>:
  o_packet.pw = 0;
}

static bool write_callback(pb_ostream_t *stream, const uint8_t *buf,
    size_t count)
{
 80077ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  bool res = true;
 80077ee:	2001      	movs	r0, #1
{
 80077f0:	460e      	mov	r6, r1
 80077f2:	4614      	mov	r4, r2
  uint8_t *pr = (uint8_t *)buf;

  UNUSED(stream);

  while (count) {
    for (; o_packet.pw < _PACKET_PAYLOAD_IN_SIZE && count; o_packet.pw++) {
 80077f4:	4d0c      	ldr	r5, [pc, #48]	; (8007828 <write_callback+0x3c>)
      pr++;
      count--;
    }
    if (o_packet.pw == _PACKET_PAYLOAD_IN_SIZE) {
      res = write_packet();
      o_packet.pw = 0;
 80077f6:	2700      	movs	r7, #0
  while (count) {
 80077f8:	b93c      	cbnz	r4, 800780a <write_callback+0x1e>
 80077fa:	e00b      	b.n	8007814 <write_callback+0x28>
      o_packet.payload[o_packet.pw] = *pr;
 80077fc:	f816 1b01 	ldrb.w	r1, [r6], #1
 8007800:	18ea      	adds	r2, r5, r3
      count--;
 8007802:	3c01      	subs	r4, #1
    for (; o_packet.pw < _PACKET_PAYLOAD_IN_SIZE && count; o_packet.pw++) {
 8007804:	3301      	adds	r3, #1
      o_packet.payload[o_packet.pw] = *pr;
 8007806:	7051      	strb	r1, [r2, #1]
    for (; o_packet.pw < _PACKET_PAYLOAD_IN_SIZE && count; o_packet.pw++) {
 8007808:	702b      	strb	r3, [r5, #0]
 800780a:	782b      	ldrb	r3, [r5, #0]
 800780c:	2b1f      	cmp	r3, #31
 800780e:	d802      	bhi.n	8007816 <write_callback+0x2a>
 8007810:	2c00      	cmp	r4, #0
 8007812:	d1f3      	bne.n	80077fc <write_callback+0x10>
    }
  }
  return res;
}
 8007814:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (o_packet.pw == _PACKET_PAYLOAD_IN_SIZE) {
 8007816:	2b20      	cmp	r3, #32
 8007818:	d1ee      	bne.n	80077f8 <write_callback+0xc>
  return ioRawWriteBuffer((uint8_t *)&o_packet, _PACKET_PAYLOAD_IN_SIZE + 1);
 800781a:	2121      	movs	r1, #33	; 0x21
 800781c:	4628      	mov	r0, r5
 800781e:	f000 fc97 	bl	8008150 <ioRawWriteBuffer>
      o_packet.pw = 0;
 8007822:	702f      	strb	r7, [r5, #0]
 8007824:	e7e8      	b.n	80077f8 <write_callback+0xc>
 8007826:	bf00      	nop
 8007828:	24001804 	.word	0x24001804

0800782c <read_callback>:
  i_packet.pr = 0xFF;
  i_ridx = 0;
}

static bool read_callback(pb_istream_t *stream, uint8_t *buf, size_t count)
{
 800782c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007830:	460f      	mov	r7, r1
  bool res = true;
  uint8_t *pw = (uint8_t *)buf;

  UNUSED(stream);

  if (count == 0)
 8007832:	4614      	mov	r4, r2
 8007834:	b1f2      	cbz	r2, 8007874 <read_callback+0x48>
    return true;

  if (i_packet.pr == 0xFF)
 8007836:	4d1d      	ldr	r5, [pc, #116]	; (80078ac <read_callback+0x80>)
 8007838:	4e1d      	ldr	r6, [pc, #116]	; (80078b0 <read_callback+0x84>)
 800783a:	782b      	ldrb	r3, [r5, #0]
 800783c:	2bff      	cmp	r3, #255	; 0xff
 800783e:	d11b      	bne.n	8007878 <read_callback+0x4c>
  bool res = ioRawReadBuffer((uint8_t *)&i_packet,
 8007840:	2121      	movs	r1, #33	; 0x21
 8007842:	4628      	mov	r0, r5
 8007844:	f000 fc92 	bl	800816c <ioRawReadBuffer>
  i_ridx = 0;
 8007848:	2300      	movs	r3, #0
 800784a:	6033      	str	r3, [r6, #0]
    res = read_packet();

  if (res == false)
 800784c:	b9a0      	cbnz	r0, 8007878 <read_callback+0x4c>
      read_packet();
    }
  }

  return res;
}
 800784e:	b003      	add	sp, #12
 8007850:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      *pw = i_packet.payload[i_ridx];
 8007854:	5cea      	ldrb	r2, [r5, r3]
      count--;
 8007856:	3c01      	subs	r4, #1
      *pw = i_packet.payload[i_ridx];
 8007858:	f807 2b01 	strb.w	r2, [r7], #1
    for (; i_packet.pr > 0 && count; i_packet.pr--) {
 800785c:	782a      	ldrb	r2, [r5, #0]
 800785e:	3a01      	subs	r2, #1
 8007860:	702a      	strb	r2, [r5, #0]
 8007862:	2201      	movs	r2, #1
 8007864:	7828      	ldrb	r0, [r5, #0]
 8007866:	4619      	mov	r1, r3
 8007868:	b158      	cbz	r0, 8007882 <read_callback+0x56>
 800786a:	3301      	adds	r3, #1
 800786c:	2c00      	cmp	r4, #0
 800786e:	d1f1      	bne.n	8007854 <read_callback+0x28>
 8007870:	b102      	cbz	r2, 8007874 <read_callback+0x48>
 8007872:	6031      	str	r1, [r6, #0]
 8007874:	2001      	movs	r0, #1
 8007876:	e7ea      	b.n	800784e <read_callback+0x22>
 8007878:	f04f 0900 	mov.w	r9, #0
  bool res = ioRawReadBuffer((uint8_t *)&i_packet,
 800787c:	f8df 802c 	ldr.w	r8, [pc, #44]	; 80078ac <read_callback+0x80>
 8007880:	e011      	b.n	80078a6 <read_callback+0x7a>
 8007882:	b102      	cbz	r2, 8007886 <read_callback+0x5a>
 8007884:	6033      	str	r3, [r6, #0]
    if (count && i_packet.pr == 0) {
 8007886:	2c00      	cmp	r4, #0
 8007888:	d0f4      	beq.n	8007874 <read_callback+0x48>
      uint8_t sync = 0xAA;
 800788a:	23aa      	movs	r3, #170	; 0xaa
      ioRawWriteBuffer(&sync, 1);
 800788c:	2101      	movs	r1, #1
 800788e:	f10d 0007 	add.w	r0, sp, #7
      uint8_t sync = 0xAA;
 8007892:	f88d 3007 	strb.w	r3, [sp, #7]
      ioRawWriteBuffer(&sync, 1);
 8007896:	f000 fc5b 	bl	8008150 <ioRawWriteBuffer>
  bool res = ioRawReadBuffer((uint8_t *)&i_packet,
 800789a:	2121      	movs	r1, #33	; 0x21
 800789c:	4640      	mov	r0, r8
 800789e:	f000 fc65 	bl	800816c <ioRawReadBuffer>
  i_ridx = 0;
 80078a2:	f8c6 9000 	str.w	r9, [r6]
  while (count) {
 80078a6:	6833      	ldr	r3, [r6, #0]
    for (; i_packet.pr > 0 && count; i_packet.pr--) {
 80078a8:	2200      	movs	r2, #0
 80078aa:	e7db      	b.n	8007864 <read_callback+0x38>
 80078ac:	240017dc 	.word	0x240017dc
 80078b0:	24001800 	.word	0x24001800

080078b4 <pb_io_flush_ostream>:
{
 80078b4:	b510      	push	{r4, lr}
  o_packet.pw |= (1 << 7); /* Indicate last packet */
 80078b6:	4c06      	ldr	r4, [pc, #24]	; (80078d0 <pb_io_flush_ostream+0x1c>)
  return ioRawWriteBuffer((uint8_t *)&o_packet, _PACKET_PAYLOAD_IN_SIZE + 1);
 80078b8:	2121      	movs	r1, #33	; 0x21
  o_packet.pw |= (1 << 7); /* Indicate last packet */
 80078ba:	7823      	ldrb	r3, [r4, #0]
  return ioRawWriteBuffer((uint8_t *)&o_packet, _PACKET_PAYLOAD_IN_SIZE + 1);
 80078bc:	4620      	mov	r0, r4
  o_packet.pw |= (1 << 7); /* Indicate last packet */
 80078be:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80078c2:	7023      	strb	r3, [r4, #0]
  return ioRawWriteBuffer((uint8_t *)&o_packet, _PACKET_PAYLOAD_IN_SIZE + 1);
 80078c4:	f000 fc44 	bl	8008150 <ioRawWriteBuffer>
  o_packet.pw = 0;
 80078c8:	2300      	movs	r3, #0
 80078ca:	7023      	strb	r3, [r4, #0]
}
 80078cc:	bd10      	pop	{r4, pc}
 80078ce:	bf00      	nop
 80078d0:	24001804 	.word	0x24001804

080078d4 <pb_io_flush_istream>:
  i_packet.pr = 0xFF;
 80078d4:	4b03      	ldr	r3, [pc, #12]	; (80078e4 <pb_io_flush_istream+0x10>)
 80078d6:	22ff      	movs	r2, #255	; 0xff
 80078d8:	701a      	strb	r2, [r3, #0]
  i_ridx = 0;
 80078da:	2200      	movs	r2, #0
 80078dc:	4b02      	ldr	r3, [pc, #8]	; (80078e8 <pb_io_flush_istream+0x14>)
 80078de:	601a      	str	r2, [r3, #0]
}
 80078e0:	4770      	bx	lr
 80078e2:	bf00      	nop
 80078e4:	240017dc 	.word	0x240017dc
 80078e8:	24001800 	.word	0x24001800

080078ec <pb_io_ostream>:

pb_ostream_t pb_io_ostream(int fd)
{
  pb_ostream_t stream = {&write_callback, (void*)(intptr_t)fd, SIZE_MAX, 0};
 80078ec:	2200      	movs	r2, #0
 80078ee:	e9c0 2203 	strd	r2, r2, [r0, #12]
  return stream;
 80078f2:	4a04      	ldr	r2, [pc, #16]	; (8007904 <pb_io_ostream+0x18>)
 80078f4:	e9c0 2100 	strd	r2, r1, [r0]
 80078f8:	f04f 32ff 	mov.w	r2, #4294967295
{
 80078fc:	b510      	push	{r4, lr}
  return stream;
 80078fe:	6082      	str	r2, [r0, #8]
}
 8007900:	bd10      	pop	{r4, pc}
 8007902:	bf00      	nop
 8007904:	080077ed 	.word	0x080077ed

08007908 <pb_io_istream>:

pb_istream_t pb_io_istream(int fd)
{
  pb_istream_t stream = {&read_callback, (void*)(intptr_t)fd, SIZE_MAX};
 8007908:	2200      	movs	r2, #0
 800790a:	60c2      	str	r2, [r0, #12]
  return stream;
 800790c:	4a03      	ldr	r2, [pc, #12]	; (800791c <pb_io_istream+0x14>)
 800790e:	e9c0 2100 	strd	r2, r1, [r0]
 8007912:	f04f 32ff 	mov.w	r2, #4294967295
 8007916:	6082      	str	r2, [r0, #8]
}
 8007918:	4770      	bx	lr
 800791a:	bf00      	nop
 800791c:	0800782d 	.word	0x0800782d

08007920 <pb_io_stream_init>:

int pb_io_stream_init(void)
{
 8007920:	b508      	push	{r3, lr}
  ioRawDisableLLWrite();
 8007922:	f000 fc31 	bl	8008188 <ioRawDisableLLWrite>
  return 0;
}
 8007926:	2000      	movs	r0, #0
 8007928:	bd08      	pop	{r3, pc}

0800792a <encode_uint32>:
/*
 * Callback function to encode array of uint32
 */
bool encode_uint32(pb_ostream_t *stream, const pb_field_t *field,
                   void * const *arg)
{
 800792a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  struct _encode_uint32* array = (struct _encode_uint32 *)*arg;
 800792e:	f8d2 8000 	ldr.w	r8, [r2]
  int offset = (array->offset == 0)?4:array->offset;
  for (int i = 0; i < array->size; i++)
 8007932:	2600      	movs	r6, #0
{
 8007934:	4607      	mov	r7, r0
 8007936:	4689      	mov	r9, r1
  int offset = (array->offset == 0)?4:array->offset;
 8007938:	f8d8 4008 	ldr.w	r4, [r8, #8]
  for (int i = 0; i < array->size; i++)
 800793c:	4635      	mov	r5, r6
 800793e:	2c00      	cmp	r4, #0
 8007940:	bf08      	it	eq
 8007942:	2404      	moveq	r4, #4
 8007944:	f8d8 3000 	ldr.w	r3, [r8]
 8007948:	429d      	cmp	r5, r3
 800794a:	d301      	bcc.n	8007950 <encode_uint32+0x26>
    else
      c_val = *(uint32_t*)((uint8_t *)array->data + i * offset);
    if (!pb_encode_varint(stream, (intptr_t)(c_val)))
      return false;
  }
  return true;
 800794c:	2001      	movs	r0, #1
 800794e:	e005      	b.n	800795c <encode_uint32+0x32>
    if (!pb_encode_tag_for_field(stream, field))
 8007950:	4649      	mov	r1, r9
 8007952:	4638      	mov	r0, r7
 8007954:	f002 ff44 	bl	800a7e0 <pb_encode_tag_for_field>
 8007958:	b910      	cbnz	r0, 8007960 <encode_uint32+0x36>
      return false;
 800795a:	2000      	movs	r0, #0
}
 800795c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      c_val = *(uint16_t*)((uint8_t *)array->data + i * offset);
 8007960:	f8d8 3004 	ldr.w	r3, [r8, #4]
    if (offset == 2)
 8007964:	2c02      	cmp	r4, #2
    if (!pb_encode_varint(stream, (intptr_t)(c_val)))
 8007966:	4638      	mov	r0, r7
      c_val = *(uint32_t*)((uint8_t *)array->data + i * offset);
 8007968:	bf18      	it	ne
 800796a:	599a      	ldrne	r2, [r3, r6]
    if (!pb_encode_varint(stream, (intptr_t)(c_val)))
 800796c:	4426      	add	r6, r4
      c_val = *(uint16_t*)((uint8_t *)array->data + i * offset);
 800796e:	bf08      	it	eq
 8007970:	f833 2015 	ldrheq.w	r2, [r3, r5, lsl #1]
    if (!pb_encode_varint(stream, (intptr_t)(c_val)))
 8007974:	17d3      	asrs	r3, r2, #31
 8007976:	f002 fe55 	bl	800a624 <pb_encode_varint>
 800797a:	2800      	cmp	r0, #0
 800797c:	d0ed      	beq.n	800795a <encode_uint32+0x30>
  for (int i = 0; i < array->size; i++)
 800797e:	3501      	adds	r5, #1
 8007980:	e7e0      	b.n	8007944 <encode_uint32+0x1a>

08007982 <encode_data_cb>:
/*
 * Local callback function to encode datas field from aiDataMsg msg
 */
bool encode_data_cb(pb_ostream_t *stream, const pb_field_t *field,
    void * const *arg)
{
 8007982:	b570      	push	{r4, r5, r6, lr}
  aiPbData *data = (aiPbData *)*arg;
 8007984:	6815      	ldr	r5, [r2, #0]
{
 8007986:	4604      	mov	r4, r0

  pb_byte_t *pr = (pb_byte_t *)data->addr;
 8007988:	68ae      	ldr	r6, [r5, #8]

  if (!pb_encode_tag_for_field(stream, field))
 800798a:	f002 ff29 	bl	800a7e0 <pb_encode_tag_for_field>
 800798e:	b130      	cbz	r0, 800799e <encode_data_cb+0x1c>
    return false;

  if (!pb_encode_string(stream, pr, data->size))
 8007990:	686a      	ldr	r2, [r5, #4]
 8007992:	4631      	mov	r1, r6
 8007994:	4620      	mov	r0, r4
    return false;

  return true;
}
 8007996:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  if (!pb_encode_string(stream, pr, data->size))
 800799a:	f003 b87b 	b.w	800aa94 <pb_encode_string>
}
 800799e:	bd70      	pop	{r4, r5, r6, pc}

080079a0 <decode_data_cb>:
{
 80079a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  aiPbData *data = (aiPbData *)*arg;
 80079a2:	6814      	ldr	r4, [r2, #0]
{
 80079a4:	4605      	mov	r5, r0
  data->nb_read = 0;
 80079a6:	2300      	movs	r3, #0
  uint8_t *pw = (uint8_t *)data->addr;
 80079a8:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
    data->nb_read += itsize;
 80079ac:	60e3      	str	r3, [r4, #12]
  while (stream->bytes_left) {
 80079ae:	68ab      	ldr	r3, [r5, #8]
 80079b0:	b913      	cbnz	r3, 80079b8 <decode_data_cb+0x18>
  return true;
 80079b2:	2001      	movs	r0, #1
}
 80079b4:	b003      	add	sp, #12
 80079b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (!pb_read(stream, (pb_byte_t *)&number, itsize))
 80079b8:	2201      	movs	r2, #1
 80079ba:	4669      	mov	r1, sp
 80079bc:	4628      	mov	r0, r5
 80079be:	f002 f8f9 	bl	8009bb4 <pb_read>
 80079c2:	2800      	cmp	r0, #0
 80079c4:	d0f6      	beq.n	80079b4 <decode_data_cb+0x14>
    if ((pw) && (maxr > 0)) /* additional data are skipped */
 80079c6:	b13f      	cbz	r7, 80079d8 <decode_data_cb+0x38>
 80079c8:	2e00      	cmp	r6, #0
      *pw = *(uint8_t *)&number;
 80079ca:	bfc2      	ittt	gt
 80079cc:	f89d 3000 	ldrbgt.w	r3, [sp]
      maxr--;
 80079d0:	f106 36ff 	addgt.w	r6, r6, #4294967295
      *pw = *(uint8_t *)&number;
 80079d4:	f807 3b01 	strbgt.w	r3, [r7], #1
    data->nb_read += itsize;
 80079d8:	68e3      	ldr	r3, [r4, #12]
 80079da:	3301      	adds	r3, #1
 80079dc:	e7e6      	b.n	80079ac <decode_data_cb+0xc>
	...

080079e0 <aiPbMgrInit>:
{
 80079e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80079e2:	b08b      	sub	sp, #44	; 0x2c
  memset(&pbContextMgr, 0, sizeof(struct pbContextMgr));
 80079e4:	4c1a      	ldr	r4, [pc, #104]	; (8007a50 <aiPbMgrInit+0x70>)
 80079e6:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 80079ea:	2100      	movs	r1, #0
  pbContextMgr.input = pb_io_istream(0);
 80079ec:	ad06      	add	r5, sp, #24
{
 80079ee:	4607      	mov	r7, r0
  memset(&pbContextMgr, 0, sizeof(struct pbContextMgr));
 80079f0:	4620      	mov	r0, r4
  pbContextMgr.output = pb_io_ostream(0);
 80079f2:	f104 0610 	add.w	r6, r4, #16
  memset(&pbContextMgr, 0, sizeof(struct pbContextMgr));
 80079f6:	f00a fbe9 	bl	80121cc <memset>
  pb_io_stream_init();
 80079fa:	f7ff ff91 	bl	8007920 <pb_io_stream_init>
  pbContextMgr.input = pb_io_istream(0);
 80079fe:	4628      	mov	r0, r5
 8007a00:	2100      	movs	r1, #0
 8007a02:	f7ff ff81 	bl	8007908 <pb_io_istream>
 8007a06:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
  pbContextMgr.output = pb_io_ostream(0);
 8007a0a:	466d      	mov	r5, sp
  pbContextMgr.input = pb_io_istream(0);
 8007a0c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  pbContextMgr.output = pb_io_ostream(0);
 8007a10:	2100      	movs	r1, #0
 8007a12:	4668      	mov	r0, sp
 8007a14:	f7ff ff6a 	bl	80078ec <pb_io_ostream>
 8007a18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007a1a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8007a1c:	682b      	ldr	r3, [r5, #0]
 8007a1e:	6033      	str	r3, [r6, #0]
  pbContextMgr.n_func = 0;
 8007a20:	2300      	movs	r3, #0
  pbContextMgr.funcs = NULL;
 8007a22:	e9c4 3309 	strd	r3, r3, [r4, #36]	; 0x24
  if (funcs) {
 8007a26:	b97f      	cbnz	r7, 8007a48 <aiPbMgrInit+0x68>
  pbContextMgr.state = PB_MGR_READY;
 8007a28:	2301      	movs	r3, #1
 8007a2a:	f884 3198 	strb.w	r3, [r4, #408]	; 0x198
}
 8007a2e:	b00b      	add	sp, #44	; 0x2c
 8007a30:	bdf0      	pop	{r4, r5, r6, r7, pc}
      cfunc++;
 8007a32:	320c      	adds	r2, #12
 8007a34:	462b      	mov	r3, r5
 8007a36:	2101      	movs	r1, #1
    while (cfunc->process) {
 8007a38:	6850      	ldr	r0, [r2, #4]
 8007a3a:	1c5d      	adds	r5, r3, #1
 8007a3c:	2800      	cmp	r0, #0
 8007a3e:	d1f8      	bne.n	8007a32 <aiPbMgrInit+0x52>
 8007a40:	b101      	cbz	r1, 8007a44 <aiPbMgrInit+0x64>
 8007a42:	62a3      	str	r3, [r4, #40]	; 0x28
    pbContextMgr.funcs = funcs;
 8007a44:	6267      	str	r7, [r4, #36]	; 0x24
 8007a46:	e7ef      	b.n	8007a28 <aiPbMgrInit+0x48>
 8007a48:	463a      	mov	r2, r7
 8007a4a:	4619      	mov	r1, r3
 8007a4c:	e7f4      	b.n	8007a38 <aiPbMgrInit+0x58>
 8007a4e:	bf00      	nop
 8007a50:	24001828 	.word	0x24001828

08007a54 <aiPbStrCopy>:
{
 8007a54:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8007a56:	4616      	mov	r6, r2
  const char undef[] = "UNDEFINED";
 8007a58:	4a11      	ldr	r2, [pc, #68]	; (8007aa0 <aiPbStrCopy+0x4c>)
{
 8007a5a:	4605      	mov	r5, r0
 8007a5c:	460c      	mov	r4, r1
  const char undef[] = "UNDEFINED";
 8007a5e:	6810      	ldr	r0, [r2, #0]
 8007a60:	ab01      	add	r3, sp, #4
 8007a62:	6851      	ldr	r1, [r2, #4]
 8007a64:	8912      	ldrh	r2, [r2, #8]
 8007a66:	c303      	stmia	r3!, {r0, r1}
  size_t l = strlen(src);
 8007a68:	4628      	mov	r0, r5
  const char undef[] = "UNDEFINED";
 8007a6a:	801a      	strh	r2, [r3, #0]
  size_t l = strlen(src);
 8007a6c:	f7f8 fc38 	bl	80002e0 <strlen>
  if (l > max)
 8007a70:	42b0      	cmp	r0, r6
    l = max-1;
 8007a72:	bf88      	it	hi
 8007a74:	f106 30ff 	addhi.w	r0, r6, #4294967295
  if (!dst)
 8007a78:	b184      	cbz	r4, 8007a9c <aiPbStrCopy+0x48>
  if (src && l)
 8007a7a:	b138      	cbz	r0, 8007a8c <aiPbStrCopy+0x38>
    memcpy(dst, src, l+1);
 8007a7c:	1c42      	adds	r2, r0, #1
 8007a7e:	4629      	mov	r1, r5
 8007a80:	4620      	mov	r0, r4
}
 8007a82:	b004      	add	sp, #16
 8007a84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    memcpy(dst, src, l+1);
 8007a88:	f00a bb92 	b.w	80121b0 <memcpy>
    memcpy(dst, undef, strlen(undef)+1);
 8007a8c:	a801      	add	r0, sp, #4
 8007a8e:	f7f8 fc27 	bl	80002e0 <strlen>
 8007a92:	a901      	add	r1, sp, #4
 8007a94:	1c42      	adds	r2, r0, #1
 8007a96:	4620      	mov	r0, r4
 8007a98:	f00a fb8a 	bl	80121b0 <memcpy>
}
 8007a9c:	b004      	add	sp, #16
 8007a9e:	bd70      	pop	{r4, r5, r6, pc}
 8007aa0:	08015b0c 	.word	0x08015b0c

08007aa4 <encode_tensor_desc>:
{
 8007aa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007aa8:	4605      	mov	r5, r0
 8007aaa:	b09c      	sub	sp, #112	; 0x70
 8007aac:	4688      	mov	r8, r1
  struct _encode_tensor_desc* tensors = (struct _encode_tensor_desc *)*arg;
 8007aae:	6816      	ldr	r6, [r2, #0]
  for (size_t i = 0; i < tensors->size; i++)
 8007ab0:	2400      	movs	r4, #0
    msg.dims.funcs.encode = encode_uint32;
 8007ab2:	f8df 9050 	ldr.w	r9, [pc, #80]	; 8007b04 <encode_tensor_desc+0x60>
    if (!pb_encode_submessage(stream, aiTensorDescMsg_fields, &msg))
 8007ab6:	f8df a050 	ldr.w	sl, [pc, #80]	; 8007b08 <encode_tensor_desc+0x64>
  for (size_t i = 0; i < tensors->size; i++)
 8007aba:	6873      	ldr	r3, [r6, #4]
 8007abc:	42a3      	cmp	r3, r4
 8007abe:	d801      	bhi.n	8007ac4 <encode_tensor_desc+0x20>
  return true;
 8007ac0:	2001      	movs	r0, #1
 8007ac2:	e01c      	b.n	8007afe <encode_tensor_desc+0x5a>
    aiTensorDescMsg msg = aiTensorDescMsg_init_zero;
 8007ac4:	2264      	movs	r2, #100	; 0x64
 8007ac6:	2100      	movs	r1, #0
 8007ac8:	a803      	add	r0, sp, #12
 8007aca:	f00a fb7f 	bl	80121cc <memset>
    tensors->cb(i, tensors->data, &msg, &array_u32);
 8007ace:	68b1      	ldr	r1, [r6, #8]
 8007ad0:	4620      	mov	r0, r4
 8007ad2:	466b      	mov	r3, sp
 8007ad4:	aa03      	add	r2, sp, #12
 8007ad6:	6837      	ldr	r7, [r6, #0]
 8007ad8:	47b8      	blx	r7
    if (!pb_encode_tag_for_field(stream, field))
 8007ada:	4641      	mov	r1, r8
 8007adc:	4628      	mov	r0, r5
    msg.dims.funcs.encode = encode_uint32;
 8007ade:	f8cd 9058 	str.w	r9, [sp, #88]	; 0x58
    msg.dims.arg = &array_u32;
 8007ae2:	f8cd d05c 	str.w	sp, [sp, #92]	; 0x5c
    if (!pb_encode_tag_for_field(stream, field))
 8007ae6:	f002 fe7b 	bl	800a7e0 <pb_encode_tag_for_field>
 8007aea:	b138      	cbz	r0, 8007afc <encode_tensor_desc+0x58>
    if (!pb_encode_submessage(stream, aiTensorDescMsg_fields, &msg))
 8007aec:	aa03      	add	r2, sp, #12
 8007aee:	4651      	mov	r1, sl
 8007af0:	4628      	mov	r0, r5
 8007af2:	f003 f81f 	bl	800ab34 <pb_encode_submessage>
 8007af6:	b108      	cbz	r0, 8007afc <encode_tensor_desc+0x58>
  for (size_t i = 0; i < tensors->size; i++)
 8007af8:	3401      	adds	r4, #1
 8007afa:	e7de      	b.n	8007aba <encode_tensor_desc+0x16>
      return false;
 8007afc:	2000      	movs	r0, #0
}
 8007afe:	b01c      	add	sp, #112	; 0x70
 8007b00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b04:	0800792b 	.word	0x0800792b
 8007b08:	08016648 	.word	0x08016648

08007b0c <aiPbMgrSendResp>:

/*---------------------------------------------------------------------------*/

void aiPbMgrSendResp(const reqMsg *req, respMsg *resp,
    EnumState state)
{
 8007b0c:	b508      	push	{r3, lr}
  resp->reqid = req->reqid;
 8007b0e:	6803      	ldr	r3, [r0, #0]
  resp->state = state;
 8007b10:	710a      	strb	r2, [r1, #4]
  pb_encode(&pbContextMgr.output, respMsg_fields, resp);
 8007b12:	460a      	mov	r2, r1
  resp->reqid = req->reqid;
 8007b14:	600b      	str	r3, [r1, #0]
  pb_encode(&pbContextMgr.output, respMsg_fields, resp);
 8007b16:	4804      	ldr	r0, [pc, #16]	; (8007b28 <aiPbMgrSendResp+0x1c>)
 8007b18:	4904      	ldr	r1, [pc, #16]	; (8007b2c <aiPbMgrSendResp+0x20>)
 8007b1a:	f002 ff87 	bl	800aa2c <pb_encode>
  pb_io_flush_ostream();
}
 8007b1e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  pb_io_flush_ostream();
 8007b22:	f7ff bec7 	b.w	80078b4 <pb_io_flush_ostream>
 8007b26:	bf00      	nop
 8007b28:	24001838 	.word	0x24001838
 8007b2c:	080167ad 	.word	0x080167ad

08007b30 <aiPbMgrWaitAndProcess>:
{
 8007b30:	b570      	push	{r4, r5, r6, lr}
  if (pb_decode_delimited(&pbContextMgr.input, reqMsg_fields, &(pbContextMgr.req))) {
 8007b32:	4c1d      	ldr	r4, [pc, #116]	; (8007ba8 <aiPbMgrWaitAndProcess+0x78>)
  pb_io_flush_istream();
 8007b34:	f7ff fece 	bl	80078d4 <pb_io_flush_istream>
  if (pb_decode_delimited(&pbContextMgr.input, reqMsg_fields, &(pbContextMgr.req))) {
 8007b38:	491c      	ldr	r1, [pc, #112]	; (8007bac <aiPbMgrWaitAndProcess+0x7c>)
 8007b3a:	f104 022c 	add.w	r2, r4, #44	; 0x2c
 8007b3e:	4620      	mov	r0, r4
 8007b40:	f002 fc7a 	bl	800a438 <pb_decode_delimited>
 8007b44:	b348      	cbz	r0, 8007b9a <aiPbMgrWaitAndProcess+0x6a>
    pb_io_flush_istream();
 8007b46:	f7ff fec5 	bl	80078d4 <pb_io_flush_istream>
    pbContextMgr.state = PB_MGR_ON_GOING;
 8007b4a:	2302      	movs	r3, #2
    for (idx = 0; idx < pbContextMgr.n_func; idx++) {
 8007b4c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8007b4e:	2500      	movs	r5, #0
    pbContextMgr.state = PB_MGR_ON_GOING;
 8007b50:	f884 3198 	strb.w	r3, [r4, #408]	; 0x198
      if (cfunc->cmd == pbContextMgr.req.cmd) {
 8007b54:	f894 0030 	ldrb.w	r0, [r4, #48]	; 0x30
 8007b58:	6a63      	ldr	r3, [r4, #36]	; 0x24
    for (idx = 0; idx < pbContextMgr.n_func; idx++) {
 8007b5a:	42a9      	cmp	r1, r5
 8007b5c:	d00d      	beq.n	8007b7a <aiPbMgrWaitAndProcess+0x4a>
      cfunc = &pbContextMgr.funcs[idx];
 8007b5e:	461a      	mov	r2, r3
      if (cfunc->cmd == pbContextMgr.req.cmd) {
 8007b60:	f813 6b0c 	ldrb.w	r6, [r3], #12
 8007b64:	4286      	cmp	r6, r0
 8007b66:	d11c      	bne.n	8007ba2 <aiPbMgrWaitAndProcess+0x72>
        cfunc->process(&(pbContextMgr.req), &(pbContextMgr.resp), cfunc->param);
 8007b68:	4911      	ldr	r1, [pc, #68]	; (8007bb0 <aiPbMgrWaitAndProcess+0x80>)
 8007b6a:	e9d2 3201 	ldrd	r3, r2, [r2, #4]
 8007b6e:	f1a1 0054 	sub.w	r0, r1, #84	; 0x54
 8007b72:	4798      	blx	r3
    if (idx == pbContextMgr.n_func) {
 8007b74:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007b76:	42ab      	cmp	r3, r5
 8007b78:	d10c      	bne.n	8007b94 <aiPbMgrWaitAndProcess+0x64>
    EnumState state, uint32_t param, EnumError error)
{
  resp->which_payload = respMsg_ack_tag;
  resp->payload.ack.param = param;
  resp->payload.ack.error = error;
  aiPbMgrSendResp(req, resp, state);
 8007b7a:	490d      	ldr	r1, [pc, #52]	; (8007bb0 <aiPbMgrWaitAndProcess+0x80>)
  resp->payload.ack.param = param;
 8007b7c:	2204      	movs	r2, #4
  resp->which_payload = respMsg_ack_tag;
 8007b7e:	230c      	movs	r3, #12
  aiPbMgrSendResp(req, resp, state);
 8007b80:	f1a1 0054 	sub.w	r0, r1, #84	; 0x54
  resp->payload.ack.param = param;
 8007b84:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
  resp->which_payload = respMsg_ack_tag;
 8007b88:	f8a4 3086 	strh.w	r3, [r4, #134]	; 0x86
  resp->payload.ack.error = error;
 8007b8c:	f884 208c 	strb.w	r2, [r4, #140]	; 0x8c
  aiPbMgrSendResp(req, resp, state);
 8007b90:	f7ff ffbc 	bl	8007b0c <aiPbMgrSendResp>
    pbContextMgr.state = PB_MGR_READY;
 8007b94:	2301      	movs	r3, #1
 8007b96:	f884 3198 	strb.w	r3, [r4, #408]	; 0x198
  pb_io_flush_istream();
 8007b9a:	f7ff fe9b 	bl	80078d4 <pb_io_flush_istream>
}
 8007b9e:	2000      	movs	r0, #0
 8007ba0:	bd70      	pop	{r4, r5, r6, pc}
    for (idx = 0; idx < pbContextMgr.n_func; idx++) {
 8007ba2:	3501      	adds	r5, #1
 8007ba4:	e7d9      	b.n	8007b5a <aiPbMgrWaitAndProcess+0x2a>
 8007ba6:	bf00      	nop
 8007ba8:	24001828 	.word	0x24001828
 8007bac:	08016753 	.word	0x08016753
 8007bb0:	240018a8 	.word	0x240018a8

08007bb4 <aiPbMgrSendAck>:
{
 8007bb4:	b470      	push	{r4, r5, r6}
  resp->which_payload = respMsg_ack_tag;
 8007bb6:	260c      	movs	r6, #12
{
 8007bb8:	f89d 500c 	ldrb.w	r5, [sp, #12]
  resp->payload.ack.param = param;
 8007bbc:	608b      	str	r3, [r1, #8]
  resp->which_payload = respMsg_ack_tag;
 8007bbe:	80ce      	strh	r6, [r1, #6]
  resp->payload.ack.error = error;
 8007bc0:	730d      	strb	r5, [r1, #12]
}
 8007bc2:	bc70      	pop	{r4, r5, r6}
  aiPbMgrSendResp(req, resp, state);
 8007bc4:	f7ff bfa2 	b.w	8007b0c <aiPbMgrSendResp>

08007bc8 <aiPbMgrWaitAck>:

bool aiPbMgrWaitAck(void)
{
 8007bc8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  bool res;
  ackMsg ack = ackMsg_init_default;
 8007bca:	2300      	movs	r3, #0
  res = pb_decode_delimited(&pbContextMgr.input, ackMsg_fields, &ack);
 8007bcc:	aa02      	add	r2, sp, #8
 8007bce:	4907      	ldr	r1, [pc, #28]	; (8007bec <aiPbMgrWaitAck+0x24>)
 8007bd0:	4807      	ldr	r0, [pc, #28]	; (8007bf0 <aiPbMgrWaitAck+0x28>)
  ackMsg ack = ackMsg_init_default;
 8007bd2:	9302      	str	r3, [sp, #8]
 8007bd4:	f88d 300c 	strb.w	r3, [sp, #12]
  res = pb_decode_delimited(&pbContextMgr.input, ackMsg_fields, &ack);
 8007bd8:	f002 fc2e 	bl	800a438 <pb_decode_delimited>
 8007bdc:	9001      	str	r0, [sp, #4]
  pb_io_flush_istream();
 8007bde:	f7ff fe79 	bl	80078d4 <pb_io_flush_istream>
  return res;
}
 8007be2:	9801      	ldr	r0, [sp, #4]
 8007be4:	b005      	add	sp, #20
 8007be6:	f85d fb04 	ldr.w	pc, [sp], #4
 8007bea:	bf00      	nop
 8007bec:	08016458 	.word	0x08016458
 8007bf0:	24001828 	.word	0x24001828

08007bf4 <aiPbMgrSendLogV2>:
  pb_io_flush_istream();
  return res;
}

bool aiPbMgrSendLogV2(EnumState state, uint32_t lvl, const char *str)
{
 8007bf4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  bool res;
  ackMsg ack = ackMsg_init_default;

  if (pbContextMgr.state != PB_MGR_ON_GOING)
 8007bf6:	4c19      	ldr	r4, [pc, #100]	; (8007c5c <aiPbMgrSendLogV2+0x68>)
{
 8007bf8:	460e      	mov	r6, r1
 8007bfa:	4611      	mov	r1, r2
  ackMsg ack = ackMsg_init_default;
 8007bfc:	2300      	movs	r3, #0
  if (pbContextMgr.state != PB_MGR_ON_GOING)
 8007bfe:	f894 2198 	ldrb.w	r2, [r4, #408]	; 0x198
{
 8007c02:	4605      	mov	r5, r0
  ackMsg ack = ackMsg_init_default;
 8007c04:	9302      	str	r3, [sp, #8]
  if (pbContextMgr.state != PB_MGR_ON_GOING)
 8007c06:	2a02      	cmp	r2, #2
  ackMsg ack = ackMsg_init_default;
 8007c08:	f88d 300c 	strb.w	r3, [sp, #12]
  if (pbContextMgr.state != PB_MGR_ON_GOING)
 8007c0c:	d124      	bne.n	8007c58 <aiPbMgrSendLogV2+0x64>
    return false;

  size_t len = strlen(str);
 8007c0e:	4608      	mov	r0, r1
 8007c10:	9101      	str	r1, [sp, #4]
 8007c12:	f7f8 fb65 	bl	80002e0 <strlen>
  pbContextMgr.resp.which_payload = respMsg_log_tag;
  pbContextMgr.resp.payload.log.level = lvl;
  if (len >= sizeof(pbContextMgr.resp.payload.log.str))
    len = sizeof(pbContextMgr.resp.payload.log.str) - 1;

  memcpy(&pbContextMgr.resp.payload.log.str[0], str, len+1);
 8007c16:	287f      	cmp	r0, #127	; 0x7f
  pbContextMgr.resp.which_payload = respMsg_log_tag;
 8007c18:	f04f 030d 	mov.w	r3, #13
  memcpy(&pbContextMgr.resp.payload.log.str[0], str, len+1);
 8007c1c:	9901      	ldr	r1, [sp, #4]
 8007c1e:	bf28      	it	cs
 8007c20:	207f      	movcs	r0, #127	; 0x7f
  pbContextMgr.resp.payload.log.level = lvl;
 8007c22:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
  pbContextMgr.resp.which_payload = respMsg_log_tag;
 8007c26:	f8a4 3086 	strh.w	r3, [r4, #134]	; 0x86
  memcpy(&pbContextMgr.resp.payload.log.str[0], str, len+1);
 8007c2a:	1c42      	adds	r2, r0, #1
 8007c2c:	f104 008c 	add.w	r0, r4, #140	; 0x8c
 8007c30:	f00a fabe 	bl	80121b0 <memcpy>

  aiPbMgrSendResp(&(pbContextMgr.req), &(pbContextMgr.resp), state);
 8007c34:	f104 0180 	add.w	r1, r4, #128	; 0x80
 8007c38:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8007c3c:	462a      	mov	r2, r5
 8007c3e:	f7ff ff65 	bl	8007b0c <aiPbMgrSendResp>

  res = pb_decode_delimited(&pbContextMgr.input, ackMsg_fields, &ack);
 8007c42:	4620      	mov	r0, r4
 8007c44:	aa02      	add	r2, sp, #8
 8007c46:	4906      	ldr	r1, [pc, #24]	; (8007c60 <aiPbMgrSendLogV2+0x6c>)
 8007c48:	f002 fbf6 	bl	800a438 <pb_decode_delimited>
 8007c4c:	4604      	mov	r4, r0
  pb_io_flush_istream();
 8007c4e:	f7ff fe41 	bl	80078d4 <pb_io_flush_istream>
  return res;
}
 8007c52:	4620      	mov	r0, r4
 8007c54:	b004      	add	sp, #16
 8007c56:	bd70      	pop	{r4, r5, r6, pc}
    return false;
 8007c58:	461c      	mov	r4, r3
 8007c5a:	e7fa      	b.n	8007c52 <aiPbMgrSendLogV2+0x5e>
 8007c5c:	24001828 	.word	0x24001828
 8007c60:	08016458 	.word	0x08016458

08007c64 <aiPbMgrReceiveData>:

bool aiPbMgrReceiveData(aiPbData *data)
{
 8007c64:	b510      	push	{r4, lr}
  aiDataMsg msg;

  msg.datas.funcs.decode = &decode_data_cb;
 8007c66:	4b09      	ldr	r3, [pc, #36]	; (8007c8c <aiPbMgrReceiveData+0x28>)
{
 8007c68:	b086      	sub	sp, #24
 8007c6a:	4604      	mov	r4, r0
  msg.datas.arg = (void *)data;

  /* Waiting and decoding aiDataMsg message */
  pb_decode_delimited(&pbContextMgr.input, aiDataMsg_fields, &msg);
 8007c6c:	4908      	ldr	r1, [pc, #32]	; (8007c90 <aiPbMgrReceiveData+0x2c>)
 8007c6e:	aa01      	add	r2, sp, #4
  msg.datas.arg = (void *)data;
 8007c70:	e9cd 3004 	strd	r3, r0, [sp, #16]
  pb_decode_delimited(&pbContextMgr.input, aiDataMsg_fields, &msg);
 8007c74:	4807      	ldr	r0, [pc, #28]	; (8007c94 <aiPbMgrReceiveData+0x30>)
 8007c76:	f002 fbdf 	bl	800a438 <pb_decode_delimited>
  pb_io_flush_istream();
 8007c7a:	f7ff fe2b 	bl	80078d4 <pb_io_flush_istream>

  data->type = msg.type;
 8007c7e:	9b01      	ldr	r3, [sp, #4]
  data->addr = msg.addr;

  return true;
}
 8007c80:	2001      	movs	r0, #1
  data->type = msg.type;
 8007c82:	6023      	str	r3, [r4, #0]
  data->addr = msg.addr;
 8007c84:	9b03      	ldr	r3, [sp, #12]
 8007c86:	60a3      	str	r3, [r4, #8]
}
 8007c88:	b006      	add	sp, #24
 8007c8a:	bd10      	pop	{r4, pc}
 8007c8c:	080079a1 	.word	0x080079a1
 8007c90:	0801648c 	.word	0x0801648c
 8007c94:	24001828 	.word	0x24001828

08007c98 <aiPbMgrSendOperator>:


bool aiPbMgrSendOperator(const reqMsg *req, respMsg *resp,
    EnumState state, const char *name, const uint32_t type, const uint32_t id,
    aiOpPerf *perf)
{
 8007c98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c9a:	4617      	mov	r7, r2
 8007c9c:	b085      	sub	sp, #20
  struct _encode_uint32 array;
  resp->which_payload = respMsg_op_tag;
 8007c9e:	2210      	movs	r2, #16
{
 8007ca0:	4606      	mov	r6, r0
 8007ca2:	460c      	mov	r4, r1
 8007ca4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  if (name)
 8007ca6:	4618      	mov	r0, r3
  resp->which_payload = respMsg_op_tag;
 8007ca8:	80ca      	strh	r2, [r1, #6]
  if (name)
 8007caa:	b1fb      	cbz	r3, 8007cec <aiPbMgrSendOperator+0x54>
    aiPbStrCopy(name, &resp->payload.op.name[0], sizeof(resp->payload.op.name));
 8007cac:	2240      	movs	r2, #64	; 0x40
 8007cae:	3108      	adds	r1, #8
 8007cb0:	f7ff fed0 	bl	8007a54 <aiPbStrCopy>
  else
    resp->payload.op.name[0] = 0;
  resp->payload.op.type = type;
 8007cb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cb6:	64a3      	str	r3, [r4, #72]	; 0x48
  resp->payload.op.id = id;
 8007cb8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007cba:	64e3      	str	r3, [r4, #76]	; 0x4c

  if (perf) {
 8007cbc:	b1d5      	cbz	r5, 8007cf4 <aiPbMgrSendOperator+0x5c>
    resp->payload.op.duration = perf->duration;
 8007cbe:	682b      	ldr	r3, [r5, #0]
 8007cc0:	6523      	str	r3, [r4, #80]	; 0x50
    resp->payload.op.counter_type = perf->counter_type;
 8007cc2:	686b      	ldr	r3, [r5, #4]
 8007cc4:	6563      	str	r3, [r4, #84]	; 0x54
    if (perf->counters) {
 8007cc6:	68eb      	ldr	r3, [r5, #12]
 8007cc8:	b193      	cbz	r3, 8007cf0 <aiPbMgrSendOperator+0x58>
      array.size = perf->counter_n;
 8007cca:	68aa      	ldr	r2, [r5, #8]
	  array.data = (void *)perf->counters;
 8007ccc:	e9cd 2301 	strd	r2, r3, [sp, #4]
	  array.offset = 4;
 8007cd0:	2304      	movs	r3, #4
 8007cd2:	9303      	str	r3, [sp, #12]
      resp->payload.op.counters.funcs.encode = encode_uint32;
 8007cd4:	4b0a      	ldr	r3, [pc, #40]	; (8007d00 <aiPbMgrSendOperator+0x68>)
 8007cd6:	65a3      	str	r3, [r4, #88]	; 0x58
      resp->payload.op.counters.arg = &array;
 8007cd8:	ab01      	add	r3, sp, #4
 8007cda:	65e3      	str	r3, [r4, #92]	; 0x5c
    resp->payload.op.duration = 0.0f;
    resp->payload.op.counter_type = 0;
    resp->payload.op.counters.funcs.encode = NULL;
  }

  aiPbMgrSendResp(req, resp, state);
 8007cdc:	4630      	mov	r0, r6
 8007cde:	463a      	mov	r2, r7
 8007ce0:	4621      	mov	r1, r4
 8007ce2:	f7ff ff13 	bl	8007b0c <aiPbMgrSendResp>
  // aiPbMgrWaitAck();

  return true;
}
 8007ce6:	2001      	movs	r0, #1
 8007ce8:	b005      	add	sp, #20
 8007cea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    resp->payload.op.name[0] = 0;
 8007cec:	720b      	strb	r3, [r1, #8]
 8007cee:	e7e1      	b.n	8007cb4 <aiPbMgrSendOperator+0x1c>
      resp->payload.op.counters.funcs.encode = NULL;
 8007cf0:	65a3      	str	r3, [r4, #88]	; 0x58
 8007cf2:	e7f3      	b.n	8007cdc <aiPbMgrSendOperator+0x44>
    resp->payload.op.duration = 0.0f;
 8007cf4:	2300      	movs	r3, #0
    resp->payload.op.counters.funcs.encode = NULL;
 8007cf6:	e9c4 5515 	strd	r5, r5, [r4, #84]	; 0x54
    resp->payload.op.duration = 0.0f;
 8007cfa:	6523      	str	r3, [r4, #80]	; 0x50
    resp->payload.op.counter_type = 0;
 8007cfc:	e7ee      	b.n	8007cdc <aiPbMgrSendOperator+0x44>
 8007cfe:	bf00      	nop
 8007d00:	0800792b 	.word	0x0800792b

08007d04 <aiPbCmdSync>:
#define _ARM_TOOLS_ID       EnumTools_AI_MDK_5
#endif


void aiPbCmdSync(const reqMsg *req, respMsg *resp, void *param)
{
 8007d04:	b410      	push	{r4}
  resp->which_payload = respMsg_sync_tag;
 8007d06:	240a      	movs	r4, #10
 8007d08:	80cc      	strh	r4, [r1, #6]
  resp->payload.sync.version =
 8007d0a:	f44f 7440 	mov.w	r4, #768	; 0x300
 8007d0e:	608c      	str	r4, [r1, #8]
#if defined(AI_PB_TEST) && (AI_PB_TEST == 1)
  resp->payload.sync.capability |= EnumCapability_CAP_SELF_TEST;
#endif

  resp->payload.sync.rtid = (uint32_t)param >> 16;
  resp->payload.sync.capability |= ((uint32_t)param & 0xFFFF);
 8007d10:	b294      	uxth	r4, r2
  resp->payload.sync.rtid = (uint32_t)param >> 16;
 8007d12:	0c12      	lsrs	r2, r2, #16
  resp->payload.sync.capability |= ((uint32_t)param & 0xFFFF);
 8007d14:	60cc      	str	r4, [r1, #12]

  resp->payload.sync.rtid |= (_ARM_TOOLS_ID << 8);
 8007d16:	f442 7280 	orr.w	r2, r2, #256	; 0x100

  aiPbMgrSendResp(req, resp, EnumState_S_IDLE);
}
 8007d1a:	f85d 4b04 	ldr.w	r4, [sp], #4
  resp->payload.sync.rtid |= (_ARM_TOOLS_ID << 8);
 8007d1e:	610a      	str	r2, [r1, #16]
  aiPbMgrSendResp(req, resp, EnumState_S_IDLE);
 8007d20:	2200      	movs	r2, #0
 8007d22:	f7ff bef3 	b.w	8007b0c <aiPbMgrSendResp>
	...

08007d28 <aiPlatformVersion>:

#include <ai_platform_interface.h>


void aiPlatformVersion(void)
{
 8007d28:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  const ai_platform_version rt_ver = ai_platform_runtime_get_version();
 8007d2a:	f003 fa7f 	bl	800b22c <ai_platform_runtime_get_version>

  LC_PRINT("\r\nAI platform (API %d.%d.%d - RUNTIME %d.%d.%d)\r\n",
 8007d2e:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8007d32:	2201      	movs	r2, #1
 8007d34:	9302      	str	r3, [sp, #8]
 8007d36:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8007d3a:	b2c0      	uxtb	r0, r0
 8007d3c:	4611      	mov	r1, r2
 8007d3e:	9301      	str	r3, [sp, #4]
 8007d40:	2300      	movs	r3, #0
 8007d42:	9000      	str	r0, [sp, #0]
 8007d44:	4802      	ldr	r0, [pc, #8]	; (8007d50 <aiPlatformVersion+0x28>)
 8007d46:	f000 fa45 	bl	80081d4 <lc_print>
      AI_PLATFORM_API_MINOR,
      AI_PLATFORM_API_MICRO,
      rt_ver.major,
      rt_ver.minor,
      rt_ver.micro);
}
 8007d4a:	b007      	add	sp, #28
 8007d4c:	f85d fb04 	ldr.w	pc, [sp], #4
 8007d50:	080152ec 	.word	0x080152ec

08007d54 <aiLogErr>:

void aiLogErr(const ai_error err, const char *fct)
{
 8007d54:	b410      	push	{r4}
  if (fct)
    LC_PRINT("E: AI error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 8007d56:	f3c0 2317 	ubfx	r3, r0, #8, #24
 8007d5a:	b2c4      	uxtb	r4, r0
  if (fct)
 8007d5c:	b129      	cbz	r1, 8007d6a <aiLogErr+0x16>
    LC_PRINT("E: AI error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 8007d5e:	4622      	mov	r2, r4
 8007d60:	4805      	ldr	r0, [pc, #20]	; (8007d78 <aiLogErr+0x24>)
        err.type, err.code);
  else
    LC_PRINT("E: AI error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
}
 8007d62:	f85d 4b04 	ldr.w	r4, [sp], #4
    LC_PRINT("E: AI error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 8007d66:	f000 ba35 	b.w	80081d4 <lc_print>
    LC_PRINT("E: AI error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
 8007d6a:	4621      	mov	r1, r4
 8007d6c:	461a      	mov	r2, r3
 8007d6e:	4803      	ldr	r0, [pc, #12]	; (8007d7c <aiLogErr+0x28>)
}
 8007d70:	f85d 4b04 	ldr.w	r4, [sp], #4
    LC_PRINT("E: AI error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
 8007d74:	f000 ba2e 	b.w	80081d4 <lc_print>
 8007d78:	0801531e 	.word	0x0801531e
 8007d7c:	0801534b 	.word	0x0801534b

08007d80 <aiPrintBufferInfo>:
void aiPrintBufferInfo(const ai_buffer *buffer)
{
  const ai_buffer_format fmt = buffer->format;

  /* shape + nb elem */
  LC_PRINT("(%d,%d,%d,",
 8007d80:	6981      	ldr	r1, [r0, #24]
{
 8007d82:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007d86:	4604      	mov	r4, r0
  const ai_buffer_format fmt = buffer->format;
 8007d88:	6806      	ldr	r6, [r0, #0]
  LC_PRINT("(%d,%d,%d,",
 8007d8a:	4871      	ldr	r0, [pc, #452]	; (8007f50 <aiPrintBufferInfo+0x1d0>)
 8007d8c:	e9d1 3202 	ldrd	r3, r2, [r1, #8]
{
 8007d90:	ed2d 8b02 	vpush	{d8}
  LC_PRINT("(%d,%d,%d,",
 8007d94:	6809      	ldr	r1, [r1, #0]
{
 8007d96:	b083      	sub	sp, #12
  LC_PRINT("(%d,%d,%d,",
 8007d98:	f000 fa1c 	bl	80081d4 <lc_print>
     AI_BUFFER_SHAPE_ELEM(buffer, AI_SHAPE_BATCH),
     AI_BUFFER_SHAPE_ELEM(buffer, AI_SHAPE_HEIGHT),
     AI_BUFFER_SHAPE_ELEM(buffer, AI_SHAPE_WIDTH));

  if (AI_BUFFER_SHAPE_SIZE(buffer) == 5)
 8007d9c:	6962      	ldr	r2, [r4, #20]
 8007d9e:	69a0      	ldr	r0, [r4, #24]
 8007da0:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8007da4:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 8007da8:	d12d      	bne.n	8007e06 <aiPrintBufferInfo+0x86>
  {
    LC_PRINT("%d,%d)",
 8007daa:	6842      	ldr	r2, [r0, #4]
 8007dac:	6901      	ldr	r1, [r0, #16]
 8007dae:	4869      	ldr	r0, [pc, #420]	; (8007f54 <aiPrintBufferInfo+0x1d4>)
 8007db0:	f000 fa10 	bl	80081d4 <lc_print>
  } else
  {
    LC_PRINT("%d)", (int)AI_BUFFER_SHAPE_ELEM(buffer, AI_SHAPE_CHANNEL));
  }

  LC_PRINT("%d/", (int)AI_BUFFER_SIZE(buffer));
 8007db4:	2101      	movs	r1, #1
 8007db6:	4620      	mov	r0, r4
    if (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_FLOAT)
 8007db8:	f3c6 4743 	ubfx	r7, r6, #17, #4
  LC_PRINT("%d/", (int)AI_BUFFER_SIZE(buffer));
 8007dbc:	f002 fffc 	bl	800adb8 <ai_buffer_get_size>
 8007dc0:	4601      	mov	r1, r0
 8007dc2:	4865      	ldr	r0, [pc, #404]	; (8007f58 <aiPrintBufferInfo+0x1d8>)
 8007dc4:	f000 fa06 	bl	80081d4 <lc_print>
    if (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_FLOAT)
 8007dc8:	2f01      	cmp	r7, #1
      LC_PRINT("float%d", (int)AI_BUFFER_FMT_GET_BITS(fmt));
 8007dca:	ea4f 18e6 	mov.w	r8, r6, asr #7
 8007dce:	f3c6 15c6 	ubfx	r5, r6, #7, #7
    if (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_FLOAT)
 8007dd2:	d127      	bne.n	8007e24 <aiPrintBufferInfo+0xa4>
      LC_PRINT("float%d", (int)AI_BUFFER_FMT_GET_BITS(fmt));
 8007dd4:	4629      	mov	r1, r5
 8007dd6:	4861      	ldr	r0, [pc, #388]	; (8007f5c <aiPrintBufferInfo+0x1dc>)
      LC_PRINT("bool%d", (int)AI_BUFFER_FMT_GET_BITS(fmt));
 8007dd8:	f000 f9fc 	bl	80081d4 <lc_print>
          AI_BUFFER_FMT_GET_FBITS(fmt)
      );
    }
  }
  /* @ + size in bytes */
  if (buffer->data)
 8007ddc:	6865      	ldr	r5, [r4, #4]
    LC_PRINT(" @0x%X/%d",
 8007dde:	2101      	movs	r1, #1
 8007de0:	4620      	mov	r0, r4
  if (buffer->data)
 8007de2:	2d00      	cmp	r5, #0
 8007de4:	f000 809e 	beq.w	8007f24 <aiPrintBufferInfo+0x1a4>
    LC_PRINT(" @0x%X/%d",
 8007de8:	f002 ffe6 	bl	800adb8 <ai_buffer_get_size>
 8007dec:	4631      	mov	r1, r6
 8007dee:	f003 f817 	bl	800ae20 <ai_buffer_get_byte_size>
 8007df2:	4629      	mov	r1, r5
 8007df4:	4602      	mov	r2, r0
 8007df6:	485a      	ldr	r0, [pc, #360]	; (8007f60 <aiPrintBufferInfo+0x1e0>)
    );
  else
    LC_PRINT(" (User Domain)/%d",
        (int)AI_BUFFER_BYTE_SIZE(AI_BUFFER_SIZE(buffer), fmt)
    );
}
 8007df8:	b003      	add	sp, #12
 8007dfa:	ecbd 8b02 	vpop	{d8}
 8007dfe:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    LC_PRINT(" @0x%X/%d",
 8007e02:	f000 b9e7 	b.w	80081d4 <lc_print>
  else if (AI_BUFFER_SHAPE_SIZE(buffer) == 6)
 8007e06:	f5b2 6fc0 	cmp.w	r2, #1536	; 0x600
    LC_PRINT("%d,%d)",
 8007e0a:	6843      	ldr	r3, [r0, #4]
  else if (AI_BUFFER_SHAPE_SIZE(buffer) == 6)
 8007e0c:	d105      	bne.n	8007e1a <aiPrintBufferInfo+0x9a>
    LC_PRINT("%d,%d,%d)",
 8007e0e:	e9d0 1204 	ldrd	r1, r2, [r0, #16]
 8007e12:	4854      	ldr	r0, [pc, #336]	; (8007f64 <aiPrintBufferInfo+0x1e4>)
 8007e14:	f000 f9de 	bl	80081d4 <lc_print>
 8007e18:	e7cc      	b.n	8007db4 <aiPrintBufferInfo+0x34>
    LC_PRINT("%d)", (int)AI_BUFFER_SHAPE_ELEM(buffer, AI_SHAPE_CHANNEL));
 8007e1a:	4619      	mov	r1, r3
 8007e1c:	4852      	ldr	r0, [pc, #328]	; (8007f68 <aiPrintBufferInfo+0x1e8>)
 8007e1e:	f000 f9d9 	bl	80081d4 <lc_print>
 8007e22:	e7c7      	b.n	8007db4 <aiPrintBufferInfo+0x34>
    else if (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_BOOL) {
 8007e24:	2f03      	cmp	r7, #3
 8007e26:	d102      	bne.n	8007e2e <aiPrintBufferInfo+0xae>
      LC_PRINT("bool%d", (int)AI_BUFFER_FMT_GET_BITS(fmt));
 8007e28:	4629      	mov	r1, r5
 8007e2a:	4850      	ldr	r0, [pc, #320]	; (8007f6c <aiPrintBufferInfo+0x1ec>)
 8007e2c:	e7d4      	b.n	8007dd8 <aiPrintBufferInfo+0x58>
      LC_PRINT("%s%d", AI_BUFFER_FMT_GET_SIGN(fmt)?"i":"u",
 8007e2e:	f8df 9154 	ldr.w	r9, [pc, #340]	; 8007f84 <aiPrintBufferInfo+0x204>
 8007e32:	f416 0f00 	tst.w	r6, #8388608	; 0x800000
 8007e36:	462a      	mov	r2, r5
 8007e38:	f109 0102 	add.w	r1, r9, #2
 8007e3c:	f109 003b 	add.w	r0, r9, #59	; 0x3b
 8007e40:	bf18      	it	ne
 8007e42:	4649      	movne	r1, r9
 8007e44:	f000 f9c6 	bl	80081d4 <lc_print>
  if (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_Q) {
 8007e48:	2f02      	cmp	r7, #2
 8007e4a:	d1c7      	bne.n	8007ddc <aiPrintBufferInfo+0x5c>
    if (AI_BUFFER_META_INFO_INTQ(buffer->meta_info)) {
 8007e4c:	68a3      	ldr	r3, [r4, #8]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d057      	beq.n	8007f02 <aiPrintBufferInfo+0x182>
 8007e52:	681a      	ldr	r2, [r3, #0]
 8007e54:	07d2      	lsls	r2, r2, #31
 8007e56:	d554      	bpl.n	8007f02 <aiPrintBufferInfo+0x182>
 8007e58:	685b      	ldr	r3, [r3, #4]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d051      	beq.n	8007f02 <aiPrintBufferInfo+0x182>
      ai_u16 s_ = AI_BUFFER_META_INFO_INTQ_GET_SIZE(buffer->meta_info);
 8007e5e:	f8b3 8002 	ldrh.w	r8, [r3, #2]
      LC_PRINT(" %d:", s_);
 8007e62:	f109 0040 	add.w	r0, r9, #64	; 0x40
      for (int idx=0; idx<max_; idx++) {
 8007e66:	2500      	movs	r5, #0
        ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, idx);
 8007e68:	ed9f 8a41 	vldr	s16, [pc, #260]	; 8007f70 <aiPrintBufferInfo+0x1f0>
      const int max_ = s_> 4?4:s_;
 8007e6c:	4647      	mov	r7, r8
        LC_PRINT("(%f,%d),", (double)scale, zero_point);
 8007e6e:	f109 0945 	add.w	r9, r9, #69	; 0x45
      LC_PRINT(" %d:", s_);
 8007e72:	4641      	mov	r1, r8
      const int max_ = s_> 4?4:s_;
 8007e74:	2f04      	cmp	r7, #4
 8007e76:	bf28      	it	cs
 8007e78:	2704      	movcs	r7, #4
      LC_PRINT(" %d:", s_);
 8007e7a:	f000 f9ab 	bl	80081d4 <lc_print>
      for (int idx=0; idx<max_; idx++) {
 8007e7e:	42bd      	cmp	r5, r7
 8007e80:	db07      	blt.n	8007e92 <aiPrintBufferInfo+0x112>
      LC_PRINT((s_ > max_)?"..":"");
 8007e82:	4b3c      	ldr	r3, [pc, #240]	; (8007f74 <aiPrintBufferInfo+0x1f4>)
 8007e84:	1cd8      	adds	r0, r3, #3
 8007e86:	4547      	cmp	r7, r8
 8007e88:	bf38      	it	cc
 8007e8a:	4618      	movcc	r0, r3
 8007e8c:	f000 f9a2 	bl	80081d4 <lc_print>
    if (AI_BUFFER_META_INFO_INTQ(buffer->meta_info)) {
 8007e90:	e7a4      	b.n	8007ddc <aiPrintBufferInfo+0x5c>
        ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, idx);
 8007e92:	68a1      	ldr	r1, [r4, #8]
 8007e94:	2900      	cmp	r1, #0
 8007e96:	d053      	beq.n	8007f40 <aiPrintBufferInfo+0x1c0>
 8007e98:	680a      	ldr	r2, [r1, #0]
 8007e9a:	f012 0301 	ands.w	r3, r2, #1
 8007e9e:	d02b      	beq.n	8007ef8 <aiPrintBufferInfo+0x178>
 8007ea0:	6849      	ldr	r1, [r1, #4]
 8007ea2:	2900      	cmp	r1, #0
 8007ea4:	d04c      	beq.n	8007f40 <aiPrintBufferInfo+0x1c0>
 8007ea6:	684b      	ldr	r3, [r1, #4]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d04d      	beq.n	8007f48 <aiPrintBufferInfo+0x1c8>
 8007eac:	884a      	ldrh	r2, [r1, #2]
 8007eae:	42aa      	cmp	r2, r5
 8007eb0:	dd4a      	ble.n	8007f48 <aiPrintBufferInfo+0x1c8>
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8007eb8:	edd3 7a00 	vldr	s15, [r3]
        int zero_point = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(buffer->meta_info, idx);
 8007ebc:	2900      	cmp	r1, #0
 8007ebe:	d041      	beq.n	8007f44 <aiPrintBufferInfo+0x1c4>
 8007ec0:	880a      	ldrh	r2, [r1, #0]
        ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, idx);
 8007ec2:	6848      	ldr	r0, [r1, #4]
        int zero_point = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(buffer->meta_info, idx);
 8007ec4:	f012 0302 	ands.w	r3, r2, #2
 8007ec8:	d00f      	beq.n	8007eea <aiPrintBufferInfo+0x16a>
 8007eca:	b1c0      	cbz	r0, 8007efe <aiPrintBufferInfo+0x17e>
 8007ecc:	884b      	ldrh	r3, [r1, #2]
 8007ece:	42ab      	cmp	r3, r5
 8007ed0:	dd38      	ble.n	8007f44 <aiPrintBufferInfo+0x1c4>
 8007ed2:	6843      	ldr	r3, [r0, #4]
 8007ed4:	5d5b      	ldrb	r3, [r3, r5]
        LC_PRINT("(%f,%d),", (double)scale, zero_point);
 8007ed6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8007eda:	9300      	str	r3, [sp, #0]
 8007edc:	4648      	mov	r0, r9
      for (int idx=0; idx<max_; idx++) {
 8007ede:	3501      	adds	r5, #1
        LC_PRINT("(%f,%d),", (double)scale, zero_point);
 8007ee0:	ec53 2b17 	vmov	r2, r3, d7
 8007ee4:	f000 f976 	bl	80081d4 <lc_print>
      for (int idx=0; idx<max_; idx++) {
 8007ee8:	e7c9      	b.n	8007e7e <aiPrintBufferInfo+0xfe>
        int zero_point = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(buffer->meta_info, idx);
 8007eea:	b140      	cbz	r0, 8007efe <aiPrintBufferInfo+0x17e>
 8007eec:	884a      	ldrh	r2, [r1, #2]
 8007eee:	42aa      	cmp	r2, r5
 8007ef0:	ddf1      	ble.n	8007ed6 <aiPrintBufferInfo+0x156>
 8007ef2:	6843      	ldr	r3, [r0, #4]
 8007ef4:	575b      	ldrsb	r3, [r3, r5]
 8007ef6:	e7ee      	b.n	8007ed6 <aiPrintBufferInfo+0x156>
        ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, idx);
 8007ef8:	eef0 7a48 	vmov.f32	s15, s16
 8007efc:	e7eb      	b.n	8007ed6 <aiPrintBufferInfo+0x156>
        int zero_point = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(buffer->meta_info, idx);
 8007efe:	4603      	mov	r3, r0
 8007f00:	e7e9      	b.n	8007ed6 <aiPrintBufferInfo+0x156>
    } else if (AI_BUFFER_FMT_GET_BITS(fmt) < 8) {
 8007f02:	f018 0f78 	tst.w	r8, #120	; 0x78
 8007f06:	d102      	bne.n	8007f0e <aiPrintBufferInfo+0x18e>
      LC_PRINT(" int32-%db", (int)AI_BUFFER_FMT_GET_BITS(fmt));
 8007f08:	4629      	mov	r1, r5
 8007f0a:	481b      	ldr	r0, [pc, #108]	; (8007f78 <aiPrintBufferInfo+0x1f8>)
 8007f0c:	e764      	b.n	8007dd8 <aiPrintBufferInfo+0x58>
      LC_PRINT(" Q%d.%d",
 8007f0e:	f006 027f 	and.w	r2, r6, #127	; 0x7f
 8007f12:	f3c6 51c0 	ubfx	r1, r6, #23, #1
 8007f16:	4819      	ldr	r0, [pc, #100]	; (8007f7c <aiPrintBufferInfo+0x1fc>)
 8007f18:	3a40      	subs	r2, #64	; 0x40
 8007f1a:	4411      	add	r1, r2
 8007f1c:	1a69      	subs	r1, r5, r1
 8007f1e:	f000 f959 	bl	80081d4 <lc_print>
 8007f22:	e75b      	b.n	8007ddc <aiPrintBufferInfo+0x5c>
    LC_PRINT(" (User Domain)/%d",
 8007f24:	f002 ff48 	bl	800adb8 <ai_buffer_get_size>
 8007f28:	4631      	mov	r1, r6
 8007f2a:	f002 ff79 	bl	800ae20 <ai_buffer_get_byte_size>
 8007f2e:	4601      	mov	r1, r0
 8007f30:	4813      	ldr	r0, [pc, #76]	; (8007f80 <aiPrintBufferInfo+0x200>)
}
 8007f32:	b003      	add	sp, #12
 8007f34:	ecbd 8b02 	vpop	{d8}
 8007f38:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    LC_PRINT(" (User Domain)/%d",
 8007f3c:	f000 b94a 	b.w	80081d4 <lc_print>
        ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, idx);
 8007f40:	eef0 7a48 	vmov.f32	s15, s16
        int zero_point = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(buffer->meta_info, idx);
 8007f44:	2300      	movs	r3, #0
 8007f46:	e7c6      	b.n	8007ed6 <aiPrintBufferInfo+0x156>
        ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, idx);
 8007f48:	eef0 7a48 	vmov.f32	s15, s16
 8007f4c:	e7b6      	b.n	8007ebc <aiPrintBufferInfo+0x13c>
 8007f4e:	bf00      	nop
 8007f50:	0801537b 	.word	0x0801537b
 8007f54:	08015386 	.word	0x08015386
 8007f58:	0801539b 	.word	0x0801539b
 8007f5c:	0801539f 	.word	0x0801539f
 8007f60:	080153d4 	.word	0x080153d4
 8007f64:	0801538d 	.word	0x0801538d
 8007f68:	08015397 	.word	0x08015397
 8007f6c:	080153a7 	.word	0x080153a7
 8007f70:	00000000 	.word	0x00000000
 8007f74:	08015377 	.word	0x08015377
 8007f78:	080153c1 	.word	0x080153c1
 8007f7c:	080153cc 	.word	0x080153cc
 8007f80:	080153de 	.word	0x080153de
 8007f84:	08015373 	.word	0x08015373

08007f88 <aiPrintNetworkInfo>:

void aiPrintNetworkInfo(const ai_network_report* report)
{
 8007f88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f8c:	4604      	mov	r4, r0
  LC_PRINT("Network informations...\r\n");
 8007f8e:	484e      	ldr	r0, [pc, #312]	; (80080c8 <aiPrintNetworkInfo+0x140>)
 8007f90:	f000 f920 	bl	80081d4 <lc_print>
  LC_PRINT(" model name         : %s\r\n", report->model_name);
 8007f94:	484d      	ldr	r0, [pc, #308]	; (80080cc <aiPrintNetworkInfo+0x144>)
 8007f96:	6821      	ldr	r1, [r4, #0]
 8007f98:	f000 f91c 	bl	80081d4 <lc_print>
  LC_PRINT(" model signature    : %s\r\n", report->model_signature);
 8007f9c:	6861      	ldr	r1, [r4, #4]
 8007f9e:	484c      	ldr	r0, [pc, #304]	; (80080d0 <aiPrintNetworkInfo+0x148>)
 8007fa0:	f000 f918 	bl	80081d4 <lc_print>
  LC_PRINT(" model datetime     : %s\r\n", report->model_datetime);
 8007fa4:	68a1      	ldr	r1, [r4, #8]
 8007fa6:	484b      	ldr	r0, [pc, #300]	; (80080d4 <aiPrintNetworkInfo+0x14c>)
 8007fa8:	f000 f914 	bl	80081d4 <lc_print>
  LC_PRINT(" compile datetime   : %s\r\n", report->compile_datetime);
 8007fac:	68e1      	ldr	r1, [r4, #12]
 8007fae:	484a      	ldr	r0, [pc, #296]	; (80080d8 <aiPrintNetworkInfo+0x150>)
 8007fb0:	f000 f910 	bl	80081d4 <lc_print>
  LC_PRINT(" runtime version    : %d.%d.%d\r\n",
 8007fb4:	7da3      	ldrb	r3, [r4, #22]
 8007fb6:	7d21      	ldrb	r1, [r4, #20]
 8007fb8:	7d62      	ldrb	r2, [r4, #21]
 8007fba:	4848      	ldr	r0, [pc, #288]	; (80080dc <aiPrintNetworkInfo+0x154>)
 8007fbc:	f000 f90a 	bl	80081d4 <lc_print>
      report->runtime_version.major,
      report->runtime_version.minor,
      report->runtime_version.micro);
  if (report->tool_revision[0])
 8007fc0:	69a1      	ldr	r1, [r4, #24]
 8007fc2:	780b      	ldrb	r3, [r1, #0]
 8007fc4:	b113      	cbz	r3, 8007fcc <aiPrintNetworkInfo+0x44>
    LC_PRINT(" Tool revision      : %s\r\n", (report->tool_revision[0])?report->tool_revision:"");
 8007fc6:	4846      	ldr	r0, [pc, #280]	; (80080e0 <aiPrintNetworkInfo+0x158>)
 8007fc8:	f000 f904 	bl	80081d4 <lc_print>
  LC_PRINT(" tools version      : %d.%d.%d\r\n",
 8007fcc:	7fa3      	ldrb	r3, [r4, #30]
      report->tool_version.micro);
  LC_PRINT(" complexity         : %lu MACC\r\n", (unsigned long)report->n_macc);
  LC_PRINT(" c-nodes            : %d\r\n", (int)report->n_nodes);

  LC_PRINT(" map_activations    : %d\r\n", report->map_activations.size);
  for (int idx=0; idx<report->map_activations.size;idx++) {
 8007fce:	2500      	movs	r5, #0
  LC_PRINT(" tools version      : %d.%d.%d\r\n",
 8007fd0:	7f62      	ldrb	r2, [r4, #29]
      const ai_buffer *buffer = &report->map_activations.buffer[idx];
 8007fd2:	f04f 081c 	mov.w	r8, #28
  LC_PRINT(" tools version      : %d.%d.%d\r\n",
 8007fd6:	7f21      	ldrb	r1, [r4, #28]
 8007fd8:	4842      	ldr	r0, [pc, #264]	; (80080e4 <aiPrintNetworkInfo+0x15c>)
      LC_PRINT("  [%d] ", idx);
 8007fda:	4f43      	ldr	r7, [pc, #268]	; (80080e8 <aiPrintNetworkInfo+0x160>)
  LC_PRINT(" tools version      : %d.%d.%d\r\n",
 8007fdc:	f000 f8fa 	bl	80081d4 <lc_print>
  LC_PRINT(" complexity         : %lu MACC\r\n", (unsigned long)report->n_macc);
 8007fe0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8007fe2:	4842      	ldr	r0, [pc, #264]	; (80080ec <aiPrintNetworkInfo+0x164>)
      aiPrintBufferInfo(buffer);
      LC_PRINT("\r\n");
 8007fe4:	f107 0908 	add.w	r9, r7, #8
  LC_PRINT(" complexity         : %lu MACC\r\n", (unsigned long)report->n_macc);
 8007fe8:	f000 f8f4 	bl	80081d4 <lc_print>
  LC_PRINT(" c-nodes            : %d\r\n", (int)report->n_nodes);
 8007fec:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8007fee:	4840      	ldr	r0, [pc, #256]	; (80080f0 <aiPrintNetworkInfo+0x168>)
 8007ff0:	f000 f8f0 	bl	80081d4 <lc_print>
  LC_PRINT(" map_activations    : %d\r\n", report->map_activations.size);
 8007ff4:	f8b4 104a 	ldrh.w	r1, [r4, #74]	; 0x4a
 8007ff8:	483e      	ldr	r0, [pc, #248]	; (80080f4 <aiPrintNetworkInfo+0x16c>)
 8007ffa:	f000 f8eb 	bl	80081d4 <lc_print>
  for (int idx=0; idx<report->map_activations.size;idx++) {
 8007ffe:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
 8008002:	42ab      	cmp	r3, r5
 8008004:	dc25      	bgt.n	8008052 <aiPrintNetworkInfo+0xca>
  }

  LC_PRINT(" map_weights        : %d\r\n", report->map_weights.size);
  for (int idx=0; idx<report->map_weights.size;idx++) {
      const ai_buffer *buffer = &report->map_weights.buffer[idx];
      LC_PRINT("  [%d] ", idx);
 8008006:	4f38      	ldr	r7, [pc, #224]	; (80080e8 <aiPrintNetworkInfo+0x160>)
  for (int idx=0; idx<report->map_weights.size;idx++) {
 8008008:	2500      	movs	r5, #0
      const ai_buffer *buffer = &report->map_weights.buffer[idx];
 800800a:	f04f 081c 	mov.w	r8, #28
  LC_PRINT(" map_weights        : %d\r\n", report->map_weights.size);
 800800e:	f8b4 1042 	ldrh.w	r1, [r4, #66]	; 0x42
      aiPrintBufferInfo(buffer);
      LC_PRINT("\r\n");
 8008012:	f107 0908 	add.w	r9, r7, #8
  LC_PRINT(" map_weights        : %d\r\n", report->map_weights.size);
 8008016:	4838      	ldr	r0, [pc, #224]	; (80080f8 <aiPrintNetworkInfo+0x170>)
 8008018:	f000 f8dc 	bl	80081d4 <lc_print>
  for (int idx=0; idx<report->map_weights.size;idx++) {
 800801c:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 8008020:	42ab      	cmp	r3, r5
 8008022:	dc25      	bgt.n	8008070 <aiPrintNetworkInfo+0xe8>
  LC_PRINT(" n_inputs/n_outputs : %u/%u\r\n", report->n_inputs,
          report->n_outputs);

  for (int i=0; i<report->n_inputs; i++) {
    // LC_PRINT("  I[%d] %s\r\n", i, aiGetBufferDesc(&report->inputs[i]));
    LC_PRINT("  I[%d] ", i);
 8008024:	4e35      	ldr	r6, [pc, #212]	; (80080fc <aiPrintNetworkInfo+0x174>)
  for (int i=0; i<report->n_inputs; i++) {
 8008026:	2500      	movs	r5, #0
    aiPrintBufferInfo(&report->inputs[i]);
 8008028:	271c      	movs	r7, #28
  LC_PRINT(" n_inputs/n_outputs : %u/%u\r\n", report->n_inputs,
 800802a:	8e62      	ldrh	r2, [r4, #50]	; 0x32
    LC_PRINT("\r\n");
 800802c:	f1a6 083c 	sub.w	r8, r6, #60	; 0x3c
  LC_PRINT(" n_inputs/n_outputs : %u/%u\r\n", report->n_inputs,
 8008030:	8e21      	ldrh	r1, [r4, #48]	; 0x30
 8008032:	4833      	ldr	r0, [pc, #204]	; (8008100 <aiPrintNetworkInfo+0x178>)
 8008034:	f000 f8ce 	bl	80081d4 <lc_print>
  for (int i=0; i<report->n_inputs; i++) {
 8008038:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 800803a:	42ab      	cmp	r3, r5
 800803c:	dc27      	bgt.n	800808e <aiPrintNetworkInfo+0x106>
  }

  for (int i=0; i<report->n_outputs; i++) {
    //LC_PRINT("  O[%d] %s\r\n", i, aiGetBufferDesc(&report->outputs[i]));
    LC_PRINT("  O[%d] ", i);
 800803e:	4e31      	ldr	r6, [pc, #196]	; (8008104 <aiPrintNetworkInfo+0x17c>)
  for (int i=0; i<report->n_outputs; i++) {
 8008040:	2500      	movs	r5, #0
    aiPrintBufferInfo(&report->outputs[i]);
 8008042:	271c      	movs	r7, #28
    LC_PRINT("\r\n");
 8008044:	f1a6 0845 	sub.w	r8, r6, #69	; 0x45
  for (int i=0; i<report->n_outputs; i++) {
 8008048:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800804a:	42ab      	cmp	r3, r5
 800804c:	dc2d      	bgt.n	80080aa <aiPrintNetworkInfo+0x122>
  }
}
 800804e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      const ai_buffer *buffer = &report->map_activations.buffer[idx];
 8008052:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
      LC_PRINT("  [%d] ", idx);
 8008054:	4629      	mov	r1, r5
      const ai_buffer *buffer = &report->map_activations.buffer[idx];
 8008056:	fb08 0605 	mla	r6, r8, r5, r0
      LC_PRINT("  [%d] ", idx);
 800805a:	4638      	mov	r0, r7
 800805c:	f000 f8ba 	bl	80081d4 <lc_print>
  for (int idx=0; idx<report->map_activations.size;idx++) {
 8008060:	3501      	adds	r5, #1
      aiPrintBufferInfo(buffer);
 8008062:	4630      	mov	r0, r6
 8008064:	f7ff fe8c 	bl	8007d80 <aiPrintBufferInfo>
      LC_PRINT("\r\n");
 8008068:	4648      	mov	r0, r9
 800806a:	f000 f8b3 	bl	80081d4 <lc_print>
  for (int idx=0; idx<report->map_activations.size;idx++) {
 800806e:	e7c6      	b.n	8007ffe <aiPrintNetworkInfo+0x76>
      const ai_buffer *buffer = &report->map_weights.buffer[idx];
 8008070:	6c60      	ldr	r0, [r4, #68]	; 0x44
      LC_PRINT("  [%d] ", idx);
 8008072:	4629      	mov	r1, r5
      const ai_buffer *buffer = &report->map_weights.buffer[idx];
 8008074:	fb08 0605 	mla	r6, r8, r5, r0
      LC_PRINT("  [%d] ", idx);
 8008078:	4638      	mov	r0, r7
 800807a:	f000 f8ab 	bl	80081d4 <lc_print>
  for (int idx=0; idx<report->map_weights.size;idx++) {
 800807e:	3501      	adds	r5, #1
      aiPrintBufferInfo(buffer);
 8008080:	4630      	mov	r0, r6
 8008082:	f7ff fe7d 	bl	8007d80 <aiPrintBufferInfo>
      LC_PRINT("\r\n");
 8008086:	4648      	mov	r0, r9
 8008088:	f000 f8a4 	bl	80081d4 <lc_print>
  for (int idx=0; idx<report->map_weights.size;idx++) {
 800808c:	e7c6      	b.n	800801c <aiPrintNetworkInfo+0x94>
    LC_PRINT("  I[%d] ", i);
 800808e:	4629      	mov	r1, r5
 8008090:	4630      	mov	r0, r6
 8008092:	f000 f89f 	bl	80081d4 <lc_print>
    aiPrintBufferInfo(&report->inputs[i]);
 8008096:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8008098:	fb07 0005 	mla	r0, r7, r5, r0
  for (int i=0; i<report->n_inputs; i++) {
 800809c:	3501      	adds	r5, #1
    aiPrintBufferInfo(&report->inputs[i]);
 800809e:	f7ff fe6f 	bl	8007d80 <aiPrintBufferInfo>
    LC_PRINT("\r\n");
 80080a2:	4640      	mov	r0, r8
 80080a4:	f000 f896 	bl	80081d4 <lc_print>
  for (int i=0; i<report->n_inputs; i++) {
 80080a8:	e7c6      	b.n	8008038 <aiPrintNetworkInfo+0xb0>
    LC_PRINT("  O[%d] ", i);
 80080aa:	4629      	mov	r1, r5
 80080ac:	4630      	mov	r0, r6
 80080ae:	f000 f891 	bl	80081d4 <lc_print>
    aiPrintBufferInfo(&report->outputs[i]);
 80080b2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80080b4:	fb07 0005 	mla	r0, r7, r5, r0
  for (int i=0; i<report->n_outputs; i++) {
 80080b8:	3501      	adds	r5, #1
    aiPrintBufferInfo(&report->outputs[i]);
 80080ba:	f7ff fe61 	bl	8007d80 <aiPrintBufferInfo>
    LC_PRINT("\r\n");
 80080be:	4640      	mov	r0, r8
 80080c0:	f000 f888 	bl	80081d4 <lc_print>
  for (int i=0; i<report->n_outputs; i++) {
 80080c4:	e7c0      	b.n	8008048 <aiPrintNetworkInfo+0xc0>
 80080c6:	bf00      	nop
 80080c8:	080153f0 	.word	0x080153f0
 80080cc:	0801540a 	.word	0x0801540a
 80080d0:	08015425 	.word	0x08015425
 80080d4:	08015440 	.word	0x08015440
 80080d8:	0801545b 	.word	0x0801545b
 80080dc:	08015476 	.word	0x08015476
 80080e0:	08015497 	.word	0x08015497
 80080e4:	080154b2 	.word	0x080154b2
 80080e8:	0801552a 	.word	0x0801552a
 80080ec:	080154d3 	.word	0x080154d3
 80080f0:	080154f4 	.word	0x080154f4
 80080f4:	0801550f 	.word	0x0801550f
 80080f8:	08015535 	.word	0x08015535
 80080fc:	0801556e 	.word	0x0801556e
 8008100:	08015550 	.word	0x08015550
 8008104:	08015577 	.word	0x08015577

08008108 <_put_c_buffer_cb>:
};

static void _put_c_buffer_cb(void *user, const char c)
{
  struct _buffer *buffer = (struct _buffer *)user;
  if (buffer->pos < (buffer->size - 1)) {
 8008108:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800810c:	3b01      	subs	r3, #1
 800810e:	429a      	cmp	r2, r3
 8008110:	d207      	bcs.n	8008122 <_put_c_buffer_cb+0x1a>
    buffer->buffer[buffer->pos] = c;
 8008112:	6803      	ldr	r3, [r0, #0]
 8008114:	5499      	strb	r1, [r3, r2]
    buffer->pos++;
    buffer->buffer[buffer->pos] = 0;
 8008116:	2100      	movs	r1, #0
    buffer->pos++;
 8008118:	6883      	ldr	r3, [r0, #8]
    buffer->buffer[buffer->pos] = 0;
 800811a:	6802      	ldr	r2, [r0, #0]
    buffer->pos++;
 800811c:	3301      	adds	r3, #1
 800811e:	6083      	str	r3, [r0, #8]
    buffer->buffer[buffer->pos] = 0;
 8008120:	54d1      	strb	r1, [r2, r3]
  }
}
 8008122:	4770      	bx	lr

08008124 <_put_c_driver>:
  if (_ioWriteAllowed)
 8008124:	4b08      	ldr	r3, [pc, #32]	; (8008148 <_put_c_driver+0x24>)
 8008126:	781b      	ldrb	r3, [r3, #0]
{
 8008128:	b507      	push	{r0, r1, r2, lr}
 800812a:	f88d 1007 	strb.w	r1, [sp, #7]
  if (_ioWriteAllowed)
 800812e:	b13b      	cbz	r3, 8008140 <_put_c_driver+0x1c>

__STATIC_INLINE bool port_io_write(uint8_t *buff, int count)
{
  HAL_StatusTypeDef status;

  status = HAL_UART_Transmit(&UartHandle, buff, count, HAL_MAX_DELAY);
 8008130:	f04f 33ff 	mov.w	r3, #4294967295
 8008134:	2201      	movs	r2, #1
 8008136:	f10d 0107 	add.w	r1, sp, #7
 800813a:	4804      	ldr	r0, [pc, #16]	; (800814c <_put_c_driver+0x28>)
 800813c:	f7fe fc91 	bl	8006a62 <HAL_UART_Transmit>
}
 8008140:	b003      	add	sp, #12
 8008142:	f85d fb04 	ldr.w	pc, [sp], #4
 8008146:	bf00      	nop
 8008148:	24000011 	.word	0x24000011
 800814c:	24001720 	.word	0x24001720

08008150 <ioRawWriteBuffer>:
 8008150:	b28a      	uxth	r2, r1
 8008152:	4601      	mov	r1, r0
 8008154:	4804      	ldr	r0, [pc, #16]	; (8008168 <ioRawWriteBuffer+0x18>)
{
 8008156:	b508      	push	{r3, lr}
 8008158:	f04f 33ff 	mov.w	r3, #4294967295
 800815c:	f7fe fc81 	bl	8006a62 <HAL_UART_Transmit>
}
 8008160:	fab0 f080 	clz	r0, r0
 8008164:	0940      	lsrs	r0, r0, #5
 8008166:	bd08      	pop	{r3, pc}
 8008168:	24001720 	.word	0x24001720

0800816c <ioRawReadBuffer>:

__STATIC_INLINE bool port_io_read(uint8_t *buff, int count)
{
  HAL_StatusTypeDef status;

  status = HAL_UART_Receive(&UartHandle, buff, count, HAL_MAX_DELAY);
 800816c:	b28a      	uxth	r2, r1
 800816e:	4601      	mov	r1, r0
 8008170:	4804      	ldr	r0, [pc, #16]	; (8008184 <ioRawReadBuffer+0x18>)
{
 8008172:	b508      	push	{r3, lr}
 8008174:	f04f 33ff 	mov.w	r3, #4294967295
 8008178:	f7fe fcc9 	bl	8006b0e <HAL_UART_Receive>
}
 800817c:	fab0 f080 	clz	r0, r0
 8008180:	0940      	lsrs	r0, r0, #5
 8008182:	bd08      	pop	{r3, pc}
 8008184:	24001720 	.word	0x24001720

08008188 <ioRawDisableLLWrite>:
  _ioWriteAllowed = false;
 8008188:	4b01      	ldr	r3, [pc, #4]	; (8008190 <ioRawDisableLLWrite+0x8>)
 800818a:	2200      	movs	r2, #0
 800818c:	701a      	strb	r2, [r3, #0]
}
 800818e:	4770      	bx	lr
 8008190:	24000011 	.word	0x24000011

08008194 <_write>:
{
 8008194:	b510      	push	{r4, lr}
  if ((count < 0) && (fd != STDOUT_FILENO) && (fd != STDERR_FILENO)) {
 8008196:	1e14      	subs	r4, r2, #0
 8008198:	da0a      	bge.n	80081b0 <_write+0x1c>
 800819a:	3801      	subs	r0, #1
 800819c:	2801      	cmp	r0, #1
 800819e:	d907      	bls.n	80081b0 <_write+0x1c>
    errno = EBADF;
 80081a0:	f009 ffd4 	bl	801214c <__errno>
    return -1;
 80081a4:	f04f 34ff 	mov.w	r4, #4294967295
    errno = EBADF;
 80081a8:	2309      	movs	r3, #9
 80081aa:	6003      	str	r3, [r0, #0]
}
 80081ac:	4620      	mov	r0, r4
 80081ae:	bd10      	pop	{r4, pc}
  if (_ioWriteAllowed)
 80081b0:	4b06      	ldr	r3, [pc, #24]	; (80081cc <_write+0x38>)
 80081b2:	781b      	ldrb	r3, [r3, #0]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d0f9      	beq.n	80081ac <_write+0x18>
  status = HAL_UART_Transmit(&UartHandle, buff, count, HAL_MAX_DELAY);
 80081b8:	b2a2      	uxth	r2, r4
 80081ba:	f04f 33ff 	mov.w	r3, #4294967295
 80081be:	4804      	ldr	r0, [pc, #16]	; (80081d0 <_write+0x3c>)
 80081c0:	f7fe fc4f 	bl	8006a62 <HAL_UART_Transmit>
  return (status ? count : 0);
 80081c4:	2800      	cmp	r0, #0
 80081c6:	bf18      	it	ne
 80081c8:	2400      	movne	r4, #0
 80081ca:	e7ef      	b.n	80081ac <_write+0x18>
 80081cc:	24000011 	.word	0x24000011
 80081d0:	24001720 	.word	0x24001720

080081d4 <lc_print>:
{
 80081d4:	b40f      	push	{r0, r1, r2, r3}
 80081d6:	b507      	push	{r0, r1, r2, lr}
 80081d8:	ab04      	add	r3, sp, #16
  vlc_print(&_put_c_driver, NULL, fmt, ap);
 80081da:	2100      	movs	r1, #0
 80081dc:	4805      	ldr	r0, [pc, #20]	; (80081f4 <lc_print+0x20>)
{
 80081de:	f853 2b04 	ldr.w	r2, [r3], #4
  va_start(ap, fmt);
 80081e2:	9301      	str	r3, [sp, #4]
  vlc_print(&_put_c_driver, NULL, fmt, ap);
 80081e4:	f001 f85c 	bl	80092a0 <vlc_print>
}
 80081e8:	b003      	add	sp, #12
 80081ea:	f85d eb04 	ldr.w	lr, [sp], #4
 80081ee:	b004      	add	sp, #16
 80081f0:	4770      	bx	lr
 80081f2:	bf00      	nop
 80081f4:	08008125 	.word	0x08008125

080081f8 <lc_vsnprint>:

size_t lc_vsnprint(char *buff, size_t size, const char* fmt, va_list vlist)
{
 80081f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  struct _buffer buffer = {buff, size, 0};
 80081fa:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80081fe:	2100      	movs	r1, #0
  vlc_print(&_put_c_buffer_cb, &buffer, fmt, vlist);
 8008200:	4804      	ldr	r0, [pc, #16]	; (8008214 <lc_vsnprint+0x1c>)
  struct _buffer buffer = {buff, size, 0};
 8008202:	9103      	str	r1, [sp, #12]
  vlc_print(&_put_c_buffer_cb, &buffer, fmt, vlist);
 8008204:	a901      	add	r1, sp, #4
 8008206:	f001 f84b 	bl	80092a0 <vlc_print>
  return buffer.pos - 1;
}
 800820a:	9803      	ldr	r0, [sp, #12]
 800820c:	3801      	subs	r0, #1
 800820e:	b005      	add	sp, #20
 8008210:	f85d fb04 	ldr.w	pc, [sp], #4
 8008214:	08008109 	.word	0x08008109

08008218 <__wrap_malloc>:

void* __real_malloc(size_t bytes);
void __real_free(void *ptr);

void* __wrap_malloc(size_t bytes)
{
 8008218:	b538      	push	{r3, r4, r5, lr}
  uint8_t *ptr;

  io_malloc.cfg |= 1 << 1;
 800821a:	4d11      	ldr	r5, [pc, #68]	; (8008260 <__wrap_malloc+0x48>)

  /* ensure alignment for magic number */
  bytes = (bytes + 3) & ~3;
 800821c:	3003      	adds	r0, #3
  io_malloc.cfg |= 1 << 1;
 800821e:	682b      	ldr	r3, [r5, #0]
  bytes = (bytes + 3) & ~3;
 8008220:	f020 0403 	bic.w	r4, r0, #3
  io_malloc.cfg |= 1 << 1;
 8008224:	f043 0302 	orr.w	r3, r3, #2

  /* add 2x32-bit for size and magic  number */
  ptr = (uint8_t*)__real_malloc(bytes + 8);
 8008228:	f104 0008 	add.w	r0, r4, #8
  io_malloc.cfg |= 1 << 1;
 800822c:	602b      	str	r3, [r5, #0]
  ptr = (uint8_t*)__real_malloc(bytes + 8);
 800822e:	f009 ffb7 	bl	80121a0 <malloc>

  /* remember size */
  if (ptr) {
 8008232:	b1a0      	cbz	r0, 800825e <__wrap_malloc+0x46>
    *((uint32_t*)ptr) = bytes;
    *((uint32_t*)(ptr + 4 + bytes)) = MAGIC_MALLOC_NUMBER;
 8008234:	1903      	adds	r3, r0, r4
 8008236:	4a0b      	ldr	r2, [pc, #44]	; (8008264 <__wrap_malloc+0x4c>)
    *((uint32_t*)ptr) = bytes;
 8008238:	6004      	str	r4, [r0, #0]
    *((uint32_t*)(ptr + 4 + bytes)) = MAGIC_MALLOC_NUMBER;
 800823a:	605a      	str	r2, [r3, #4]
  }

  if ((ptr) && (io_malloc.cfg & 1UL)) {
 800823c:	682b      	ldr	r3, [r5, #0]
 800823e:	07db      	lsls	r3, r3, #31
 8008240:	d50c      	bpl.n	800825c <__wrap_malloc+0x44>
    io_malloc.alloc_req++;
 8008242:	68eb      	ldr	r3, [r5, #12]
 8008244:	3301      	adds	r3, #1
 8008246:	60eb      	str	r3, [r5, #12]
    io_malloc.alloc += bytes;
 8008248:	686b      	ldr	r3, [r5, #4]
 800824a:	4423      	add	r3, r4
 800824c:	606b      	str	r3, [r5, #4]

    io_malloc.used += bytes;
 800824e:	69ab      	ldr	r3, [r5, #24]
 8008250:	441c      	add	r4, r3

    if (io_malloc.used > io_malloc.max) {
 8008252:	696b      	ldr	r3, [r5, #20]
 8008254:	429c      	cmp	r4, r3
    io_malloc.used += bytes;
 8008256:	61ac      	str	r4, [r5, #24]
      io_malloc.max = io_malloc.used;
 8008258:	bf88      	it	hi
 800825a:	616c      	strhi	r4, [r5, #20]

    if (io_malloc.a_idx >= _IO_MALLOC_TRACK_MODE)
      io_malloc.a_idx = 0;
#endif
  }
  return ptr?(ptr + 4):NULL;
 800825c:	3004      	adds	r0, #4
}
 800825e:	bd38      	pop	{r3, r4, r5, pc}
 8008260:	240019d4 	.word	0x240019d4
 8008264:	efdcba98 	.word	0xefdcba98

08008268 <crcIpInit>:
{
#if defined(HAS_NO_RCC_IP) && HAS_NO_RCC_IP == 1
#else
#if defined(STM32H7)
  /* By default the CRC IP clock is enabled */
  __HAL_RCC_CRC_CLK_ENABLE();
 8008268:	4b07      	ldr	r3, [pc, #28]	; (8008288 <crcIpInit+0x20>)
{
 800826a:	b082      	sub	sp, #8
  __HAL_RCC_CRC_CLK_ENABLE();
 800826c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8008270:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8008274:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8008278:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800827c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008280:	9301      	str	r3, [sp, #4]
 8008282:	9b01      	ldr	r3, [sp, #4]

  /* By default the CRC IP clock is enabled */
  __HAL_RCC_CRC_CLK_ENABLE();
#endif
#endif
}
 8008284:	b002      	add	sp, #8
 8008286:	4770      	bx	lr
 8008288:	58024400 	.word	0x58024400

0800828c <dwtCyclesToTime>:
  return port_hal_rcc_get_sys_clock_freq();
#endif
}

int dwtCyclesToTime(uint64_t clks, struct dwtTime *t)
{
 800828c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008290:	4604      	mov	r4, r0
 8008292:	468a      	mov	sl, r1
  if (!t)
 8008294:	4617      	mov	r7, r2
 8008296:	b382      	cbz	r2, 80082fa <dwtCyclesToTime+0x6e>
    return -1;
  uint32_t fcpu = systemCoreClock();
  uint64_t s  = clks / fcpu;
  uint64_t ms = (clks * 1000) / fcpu;
 8008298:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
  return port_hal_rcc_get_sys_clock_freq();
 800829c:	f7fc fa60 	bl	8004760 <HAL_RCC_GetSysClockFreq>
  uint64_t s  = clks / fcpu;
 80082a0:	2300      	movs	r3, #0
  return port_hal_rcc_get_sys_clock_freq();
 80082a2:	4602      	mov	r2, r0
  uint64_t s  = clks / fcpu;
 80082a4:	9001      	str	r0, [sp, #4]
 80082a6:	4651      	mov	r1, sl
 80082a8:	4620      	mov	r0, r4
  uint64_t us = (clks * 1000 * 1000) / fcpu;
 80082aa:	f8df 9054 	ldr.w	r9, [pc, #84]	; 8008300 <dwtCyclesToTime+0x74>
  uint64_t s  = clks / fcpu;
 80082ae:	f7f8 f97d 	bl	80005ac <__aeabi_uldivmod>
 80082b2:	4683      	mov	fp, r0
  uint64_t ms = (clks * 1000) / fcpu;
 80082b4:	fba4 0106 	umull	r0, r1, r4, r6
 80082b8:	9a01      	ldr	r2, [sp, #4]
 80082ba:	2300      	movs	r3, #0
 80082bc:	fb06 110a 	mla	r1, r6, sl, r1
 80082c0:	f7f8 f974 	bl	80005ac <__aeabi_uldivmod>
  ms -= (s * 1000);
 80082c4:	fbab 3106 	umull	r3, r1, fp, r6
  uint64_t us = (clks * 1000 * 1000) / fcpu;
 80082c8:	9a01      	ldr	r2, [sp, #4]
  ms -= (s * 1000);
 80082ca:	1ac5      	subs	r5, r0, r3
  uint64_t us = (clks * 1000 * 1000) / fcpu;
 80082cc:	fba4 0109 	umull	r0, r1, r4, r9
 80082d0:	2300      	movs	r3, #0
 80082d2:	fb09 110a 	mla	r1, r9, sl, r1
  us -= (ms * 1000 + s * 1000000);
 80082d6:	fbab 8909 	umull	r8, r9, fp, r9
  uint64_t us = (clks * 1000 * 1000) / fcpu;
 80082da:	f7f8 f967 	bl	80005ac <__aeabi_uldivmod>
  t->fcpu = fcpu;
  t->s = s;
  t->ms = ms;
 80082de:	60bd      	str	r5, [r7, #8]
 80082e0:	eba0 0008 	sub.w	r0, r0, r8
  us -= (ms * 1000 + s * 1000000);
 80082e4:	fba5 5606 	umull	r5, r6, r5, r6
  t->fcpu = fcpu;
 80082e8:	9a01      	ldr	r2, [sp, #4]
  us -= (ms * 1000 + s * 1000000);
 80082ea:	1b40      	subs	r0, r0, r5
  t->us = us;
 80082ec:	60f8      	str	r0, [r7, #12]
  return 0;
 80082ee:	2000      	movs	r0, #0
  t->s = s;
 80082f0:	e9c7 2b00 	strd	r2, fp, [r7]
}
 80082f4:	b003      	add	sp, #12
 80082f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return -1;
 80082fa:	f04f 30ff 	mov.w	r0, #4294967295
 80082fe:	e7f9      	b.n	80082f4 <dwtCyclesToTime+0x68>
 8008300:	000f4240 	.word	0x000f4240

08008304 <dwtCyclesToFloatMs>:

float dwtCyclesToFloatMs(uint64_t clks)
{
 8008304:	b510      	push	{r4, lr}
 8008306:	4604      	mov	r4, r0
 8008308:	ed2d 8b02 	vpush	{d8}
 800830c:	b082      	sub	sp, #8
 800830e:	9101      	str	r1, [sp, #4]
  return port_hal_rcc_get_sys_clock_freq();
 8008310:	f7fc fa26 	bl	8004760 <HAL_RCC_GetSysClockFreq>
  float res;
  float fcpu = (float)systemCoreClock();
  res = ((float)clks * (float)1000.0) / fcpu;
 8008314:	9901      	ldr	r1, [sp, #4]
  return port_hal_rcc_get_sys_clock_freq();
 8008316:	ee08 0a10 	vmov	s16, r0
  res = ((float)clks * (float)1000.0) / fcpu;
 800831a:	4620      	mov	r0, r4
 800831c:	f7f8 f900 	bl	8000520 <__aeabi_ul2f>
 8008320:	ed9f 0a06 	vldr	s0, [pc, #24]	; 800833c <dwtCyclesToFloatMs+0x38>
 8008324:	ee07 0a90 	vmov	s15, r0
  float fcpu = (float)systemCoreClock();
 8008328:	eeb8 8a48 	vcvt.f32.u32	s16, s16
  res = ((float)clks * (float)1000.0) / fcpu;
 800832c:	ee27 0a80 	vmul.f32	s0, s15, s0
  return res;
}
 8008330:	ee80 0a08 	vdiv.f32	s0, s0, s16
 8008334:	b002      	add	sp, #8
 8008336:	ecbd 8b02 	vpop	{d8}
 800833a:	bd10      	pop	{r4, pc}
 800833c:	447a0000 	.word	0x447a0000

08008340 <getFlashCacheConf>:

#if defined(STM32H7)

  mconf |= MCONF_H7;

  __I uint32_t acr = FLASH->ACR;
 8008340:	4b0c      	ldr	r3, [pc, #48]	; (8008374 <getFlashCacheConf+0x34>)
{
 8008342:	b082      	sub	sp, #8
  __I uint32_t acr = FLASH->ACR;
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	9300      	str	r3, [sp, #0]
  __I uint32_t ccr = SCB->CCR;
 8008348:	4b0b      	ldr	r3, [pc, #44]	; (8008378 <getFlashCacheConf+0x38>)
 800834a:	695b      	ldr	r3, [r3, #20]
 800834c:	9301      	str	r3, [sp, #4]

  mconf |= (acr & FLASH_ACR_LATENCY_Msk) >> FLASH_ACR_LATENCY_Pos;
 800834e:	9800      	ldr	r0, [sp, #0]
#if !defined(CORE_CM4)
  if (ccr & SCB_CCR_IC_Msk)
 8008350:	9b01      	ldr	r3, [sp, #4]
  mconf |= (acr & FLASH_ACR_LATENCY_Msk) >> FLASH_ACR_LATENCY_Pos;
 8008352:	f000 000f 	and.w	r0, r0, #15
  if (ccr & SCB_CCR_IC_Msk)
 8008356:	039a      	lsls	r2, r3, #14
    mconf |= MCONF_CORE_ICACHE;
  if (ccr & SCB_CCR_DC_Msk)
 8008358:	9b01      	ldr	r3, [sp, #4]
    mconf |= MCONF_CORE_ICACHE;
 800835a:	f040 7040 	orr.w	r0, r0, #50331648	; 0x3000000
 800835e:	bf48      	it	mi
 8008360:	f440 6080 	orrmi.w	r0, r0, #1024	; 0x400
  if (ccr & SCB_CCR_DC_Msk)
 8008364:	03db      	lsls	r3, r3, #15
    mconf |= MCONF_CORE_DCACHE;
 8008366:	bf48      	it	mi
 8008368:	f440 6000 	orrmi.w	r0, r0, #2048	; 0x800
  if (ccr & SCB_CCR_IC_Msk)
    mconf |= MCONF_CORE_ICACHE;
#endif

  return mconf;
}
 800836c:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 8008370:	b002      	add	sp, #8
 8008372:	4770      	bx	lr
 8008374:	52002000 	.word	0x52002000
 8008378:	e000ed00 	.word	0xe000ed00

0800837c <getSysConf.part.0>:
void getSysConf(struct mcu_conf *conf)
 800837c:	b510      	push	{r4, lr}
 800837e:	4604      	mov	r4, r0
  return port_hal_rcc_get_sys_clock_freq();
 8008380:	f7fc f9ee 	bl	8004760 <HAL_RCC_GetSysClockFreq>
  conf->sclk = systemCoreClock();
 8008384:	6020      	str	r0, [r4, #0]
  conf->hclk = port_hal_rcc_get_hclk_freq();
 8008386:	f7fc fbb1 	bl	8004aec <HAL_RCC_GetHCLKFreq>
 800838a:	6060      	str	r0, [r4, #4]
  conf->conf = getFlashCacheConf();
 800838c:	f7ff ffd8 	bl	8008340 <getFlashCacheConf>
 8008390:	60a0      	str	r0, [r4, #8]
  conf->devid = port_hal_get_dev_id();
 8008392:	f7f9 feb9 	bl	8002108 <HAL_GetDEVID>
 8008396:	60e0      	str	r0, [r4, #12]
  conf->revid = port_hal_get_rev_id();
 8008398:	f7f9 feb0 	bl	80020fc <HAL_GetREVID>
 800839c:	6120      	str	r0, [r4, #16]
}
 800839e:	bd10      	pop	{r4, pc}

080083a0 <getSysConf>:
  if (!conf)
 80083a0:	b108      	cbz	r0, 80083a6 <getSysConf+0x6>
 80083a2:	f7ff bfeb 	b.w	800837c <getSysConf.part.0>
}
 80083a6:	4770      	bx	lr

080083a8 <systemSettingLog>:

void systemSettingLog(void)
{
 80083a8:	b510      	push	{r4, lr}
 80083aa:	b086      	sub	sp, #24
  /* Display ARM Complier version */

#if defined(_IS_AC6_COMPILER) && _IS_AC6_COMPILER
  LC_PRINT("Compiled with MDK-ARM Keil (Arm Compiler 6) %d\r\n", __ARMCC_VERSION);
#elif defined(_IS_GCC_COMPILER) && _IS_GCC_COMPILER
  LC_PRINT("Compiled with GCC %d.%d.%d\r\n", __GNUC__, __GNUC_MINOR__,
 80083ac:	2301      	movs	r3, #1
 80083ae:	210a      	movs	r1, #10
 80083b0:	2203      	movs	r2, #3
 80083b2:	482a      	ldr	r0, [pc, #168]	; (800845c <systemSettingLog+0xb4>)
 80083b4:	f7ff ff0e 	bl	80081d4 <lc_print>
  if (!conf)
 80083b8:	a801      	add	r0, sp, #4
 80083ba:	f7ff ffdf 	bl	800837c <getSysConf.part.0>


  /* Display Device configuration */
  getSysConf(&sys_conf);

  LC_PRINT("STM32 Runtime configuration...\r\n");
 80083be:	4828      	ldr	r0, [pc, #160]	; (8008460 <systemSettingLog+0xb8>)
 80083c0:	f7ff ff08 	bl	80081d4 <lc_print>

  LC_PRINT(" Device       : DevID:0x%04x (%s) RevID:0x%04x\r\n",
 80083c4:	9904      	ldr	r1, [sp, #16]
 80083c6:	b28b      	uxth	r3, r1
  switch (dev_id) {
 80083c8:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 80083cc:	d042      	beq.n	8008454 <systemSettingLog+0xac>
 80083ce:	f240 4283 	movw	r2, #1155	; 0x483
 80083d2:	4293      	cmp	r3, r2
 80083d4:	d040      	beq.n	8008458 <systemSettingLog+0xb0>
  case 0x450: str = "STM32H743/53/50xx and STM32H745/55/47/57xx"; break; /* Shark2M - see RM0433 & RM0399 */
 80083d6:	4a23      	ldr	r2, [pc, #140]	; (8008464 <systemSettingLog+0xbc>)
 80083d8:	f102 0022 	add.w	r0, r2, #34	; 0x22
 80083dc:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80083e0:	bf08      	it	eq
 80083e2:	4602      	moveq	r2, r0
  LC_PRINT(" Device       : DevID:0x%04x (%s) RevID:0x%04x\r\n",
 80083e4:	9b05      	ldr	r3, [sp, #20]
 80083e6:	4820      	ldr	r0, [pc, #128]	; (8008468 <systemSettingLog+0xc0>)
 80083e8:	f7ff fef4 	bl	80081d4 <lc_print>
      devIdToStr(sys_conf.devid),
      (int)sys_conf.revid
  );

#if (__FPU_PRESENT == 1)
  LC_PRINT(" Core Arch.   : M%d - %s %s\r\n", __CORTEX_M, "FPU ", ((__FPU_USED) ? "used" : "not used!"));
 80083ec:	4b1f      	ldr	r3, [pc, #124]	; (800846c <systemSettingLog+0xc4>)
 80083ee:	2107      	movs	r1, #7
#else
  LC_PRINT(" Core Arch.   : M%d - %s\r\n", __CORTEX_M, "no FPU");
#endif

  LC_PRINT(" HAL version  : 0x%08x\r\n", (int)port_hal_get_hal_version());
  LC_PRINT(" SYSCLK clock : %u MHz\r\n", (int)sys_conf.sclk/1000000);
 80083f0:	4c1f      	ldr	r4, [pc, #124]	; (8008470 <systemSettingLog+0xc8>)
  LC_PRINT(" Core Arch.   : M%d - %s %s\r\n", __CORTEX_M, "FPU ", ((__FPU_USED) ? "used" : "not used!"));
 80083f2:	1d5a      	adds	r2, r3, #5
 80083f4:	f103 000a 	add.w	r0, r3, #10
 80083f8:	f7ff feec 	bl	80081d4 <lc_print>
  LC_PRINT(" HAL version  : 0x%08x\r\n", (int)port_hal_get_hal_version());
 80083fc:	f7f9 fe7a 	bl	80020f4 <HAL_GetHalVersion>
 8008400:	4601      	mov	r1, r0
 8008402:	481c      	ldr	r0, [pc, #112]	; (8008474 <systemSettingLog+0xcc>)
 8008404:	f7ff fee6 	bl	80081d4 <lc_print>
  LC_PRINT(" SYSCLK clock : %u MHz\r\n", (int)sys_conf.sclk/1000000);
 8008408:	9901      	ldr	r1, [sp, #4]
 800840a:	481b      	ldr	r0, [pc, #108]	; (8008478 <systemSettingLog+0xd0>)
 800840c:	fb91 f1f4 	sdiv	r1, r1, r4
 8008410:	f7ff fee0 	bl	80081d4 <lc_print>
  LC_PRINT(" HCLK clock   : %u MHz\r\n", (int)sys_conf.hclk/1000000);
 8008414:	9902      	ldr	r1, [sp, #8]
 8008416:	4819      	ldr	r0, [pc, #100]	; (800847c <systemSettingLog+0xd4>)
 8008418:	fb91 f1f4 	sdiv	r1, r1, r4
 800841c:	f7ff feda 	bl	80081d4 <lc_print>
      bitToStr(ccr & SCB_CCR_IC_Msk),
      bitToStr(ccr & SCB_CCR_DC_Msk));
#endif

#if defined(STM32H7)
  uint32_t acr = FLASH->ACR;
 8008420:	4b17      	ldr	r3, [pc, #92]	; (8008480 <systemSettingLog+0xd8>)
  LC_PRINT(" FLASH conf.  : ACR=0x%08x - latency=%d\r\n",
 8008422:	4818      	ldr	r0, [pc, #96]	; (8008484 <systemSettingLog+0xdc>)
  uint32_t acr = FLASH->ACR;
 8008424:	6819      	ldr	r1, [r3, #0]
  LC_PRINT(" FLASH conf.  : ACR=0x%08x - latency=%d\r\n",
 8008426:	f001 020f 	and.w	r2, r1, #15
 800842a:	f7ff fed3 	bl	80081d4 <lc_print>
      (int)acr,
      (int)((acr & FLASH_ACR_LATENCY_Msk) >> FLASH_ACR_LATENCY_Pos));
#if !defined(CORE_CM4)
  uint32_t ccr = SCB->CCR;
 800842e:	4b16      	ldr	r3, [pc, #88]	; (8008488 <systemSettingLog+0xe0>)
    return "False";
 8008430:	4816      	ldr	r0, [pc, #88]	; (800848c <systemSettingLog+0xe4>)
  uint32_t ccr = SCB->CCR;
 8008432:	695b      	ldr	r3, [r3, #20]
    return "False";
 8008434:	1d42      	adds	r2, r0, #5
 8008436:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800843a:	bf14      	ite	ne
 800843c:	4601      	movne	r1, r0
 800843e:	4611      	moveq	r1, r2
 8008440:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  LC_PRINT(" CACHE conf.  : $I/$D=(%s,%s)\r\n",
 8008444:	bf18      	it	ne
 8008446:	4602      	movne	r2, r0
 8008448:	f200 1017 	addw	r0, r0, #279	; 0x117
 800844c:	f7ff fec2 	bl	80081d4 <lc_print>
  LC_PRINT(" CACHE conf.  : $I/$D=(%s,%s)\r\n",
      bitToStr(ccr & SCB_CCR_IC_Msk),
      bitToStr(ccr & SCB_CCR_DC_Msk));
#endif

}
 8008450:	b006      	add	sp, #24
 8008452:	bd10      	pop	{r4, pc}
  switch (dev_id) {
 8008454:	4a0e      	ldr	r2, [pc, #56]	; (8008490 <systemSettingLog+0xe8>)
 8008456:	e7c5      	b.n	80083e4 <systemSettingLog+0x3c>
  case 0x483: str = "STM32H7[2,3]x"; break;  /* LittleShark1M */
 8008458:	4a0e      	ldr	r2, [pc, #56]	; (8008494 <systemSettingLog+0xec>)
 800845a:	e7c3      	b.n	80083e4 <systemSettingLog+0x3c>
 800845c:	0801563e 	.word	0x0801563e
 8008460:	0801565b 	.word	0x0801565b
 8008464:	080155e6 	.word	0x080155e6
 8008468:	0801567c 	.word	0x0801567c
 800846c:	080156ad 	.word	0x080156ad
 8008470:	000f4240 	.word	0x000f4240
 8008474:	080156d5 	.word	0x080156d5
 8008478:	080156ee 	.word	0x080156ee
 800847c:	08015707 	.word	0x08015707
 8008480:	52002000 	.word	0x52002000
 8008484:	08015720 	.word	0x08015720
 8008488:	e000ed00 	.word	0xe000ed00
 800848c:	08015633 	.word	0x08015633
 8008490:	080155fc 	.word	0x080155fc
 8008494:	080155ee 	.word	0x080155ee

08008498 <dwtIpInit>:

#if !defined(HAS_DEDICATED_PERF_COUNTER)
#if USE_SYSTICK_ONLY == 0

__STATIC_INLINE void dwtIpInit(void) {
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8008498:	4a07      	ldr	r2, [pc, #28]	; (80084b8 <dwtIpInit+0x20>)
 800849a:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
 800849e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80084a2:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc

#ifdef STM32F7
  DWT->LAR = 0xC5ACCE55;
#endif

  DWT->CYCCNT = 0;
 80084a6:	2200      	movs	r2, #0
 80084a8:	4b04      	ldr	r3, [pc, #16]	; (80084bc <dwtIpInit+0x24>)
 80084aa:	605a      	str	r2, [r3, #4]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk; //| DWT_CTRL_CPIEVTENA_Msk;
 80084ac:	681a      	ldr	r2, [r3, #0]
 80084ae:	f042 0201 	orr.w	r2, r2, #1
 80084b2:	601a      	str	r2, [r3, #0]
}
 80084b4:	4770      	bx	lr
 80084b6:	bf00      	nop
 80084b8:	e000ed00 	.word	0xe000ed00
 80084bc:	e0001000 	.word	0xe0001000

080084c0 <fill_tensor_desc_msg>:
                                 struct _encode_uint32 *array_u32,
                                 uint32_t flags,
                                 float scale,
                                 int32_t zero_point
                                 )
{
 80084c0:	b530      	push	{r4, r5, lr}
  array_u32->size = buff->shape.size;
 80084c2:	6944      	ldr	r4, [r0, #20]
  array_u32->data = (uint32_t *)buff->shape.data;
 80084c4:	6985      	ldr	r5, [r0, #24]
  array_u32->size = buff->shape.size;
 80084c6:	f3c4 2417 	ubfx	r4, r4, #8, #24
  array_u32->data = (uint32_t *)buff->shape.data;
 80084ca:	6055      	str	r5, [r2, #4]
  array_u32->offset = sizeof(buff->shape.data[0]);
 80084cc:	2504      	movs	r5, #4
  array_u32->size = buff->shape.size;
 80084ce:	6014      	str	r4, [r2, #0]
  array_u32->offset = sizeof(buff->shape.data[0]);
 80084d0:	6095      	str	r5, [r2, #8]

  msg->name[0] = 0;
 80084d2:	2200      	movs	r2, #0
 80084d4:	700a      	strb	r2, [r1, #0]
  msg->format = (uint32_t)buff->format;
 80084d6:	6802      	ldr	r2, [r0, #0]
  msg->flags = flags;
 80084d8:	660b      	str	r3, [r1, #96]	; 0x60

  msg->n_dims = buff->shape.type << 24 | array_u32->size;
 80084da:	7d03      	ldrb	r3, [r0, #20]
  msg->format = (uint32_t)buff->format;
 80084dc:	640a      	str	r2, [r1, #64]	; 0x40
  msg->n_dims = buff->shape.type << 24 | array_u32->size;
 80084de:	ea44 6403 	orr.w	r4, r4, r3, lsl #24

  msg->size = buff->size;
 80084e2:	6903      	ldr	r3, [r0, #16]

  const ai_buffer_meta_info *meta_info = AI_BUFFER_META_INFO(buff);

  msg->scale = scale;
  msg->zeropoint = zero_point;
 80084e4:	9a03      	ldr	r2, [sp, #12]
  msg->size = buff->size;
 80084e6:	644b      	str	r3, [r1, #68]	; 0x44
  const ai_buffer_meta_info *meta_info = AI_BUFFER_META_INFO(buff);
 80084e8:	6883      	ldr	r3, [r0, #8]
  msg->n_dims = buff->shape.type << 24 | array_u32->size;
 80084ea:	648c      	str	r4, [r1, #72]	; 0x48
  msg->scale = scale;
 80084ec:	ed81 0a15 	vstr	s0, [r1, #84]	; 0x54
  msg->zeropoint = zero_point;
 80084f0:	658a      	str	r2, [r1, #88]	; 0x58
  if (AI_BUFFER_META_INFO_INTQ(meta_info)) {
 80084f2:	b1a3      	cbz	r3, 800851e <fill_tensor_desc_msg+0x5e>
 80084f4:	681a      	ldr	r2, [r3, #0]
 80084f6:	07d5      	lsls	r5, r2, #31
 80084f8:	d511      	bpl.n	800851e <fill_tensor_desc_msg+0x5e>
 80084fa:	685b      	ldr	r3, [r3, #4]
 80084fc:	b17b      	cbz	r3, 800851e <fill_tensor_desc_msg+0x5e>
    msg->scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(meta_info, 0);
 80084fe:	685a      	ldr	r2, [r3, #4]
 8008500:	b182      	cbz	r2, 8008524 <fill_tensor_desc_msg+0x64>
 8008502:	885c      	ldrh	r4, [r3, #2]
 8008504:	b174      	cbz	r4, 8008524 <fill_tensor_desc_msg+0x64>
 8008506:	6814      	ldr	r4, [r2, #0]
 8008508:	6824      	ldr	r4, [r4, #0]
 800850a:	654c      	str	r4, [r1, #84]	; 0x54
    msg->zeropoint = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(meta_info, 0);
 800850c:	881c      	ldrh	r4, [r3, #0]
 800850e:	07a4      	lsls	r4, r4, #30
 8008510:	d50a      	bpl.n	8008528 <fill_tensor_desc_msg+0x68>
 8008512:	b18a      	cbz	r2, 8008538 <fill_tensor_desc_msg+0x78>
 8008514:	885b      	ldrh	r3, [r3, #2]
 8008516:	b10b      	cbz	r3, 800851c <fill_tensor_desc_msg+0x5c>
 8008518:	6853      	ldr	r3, [r2, #4]
 800851a:	781b      	ldrb	r3, [r3, #0]
 800851c:	658b      	str	r3, [r1, #88]	; 0x58
  }

  msg->addr = (uint32_t)buff->data;
 800851e:	6843      	ldr	r3, [r0, #4]
 8008520:	65cb      	str	r3, [r1, #92]	; 0x5c
}
 8008522:	bd30      	pop	{r4, r5, pc}
    msg->scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(meta_info, 0);
 8008524:	2400      	movs	r4, #0
 8008526:	e7f0      	b.n	800850a <fill_tensor_desc_msg+0x4a>
    msg->zeropoint = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(meta_info, 0);
 8008528:	b132      	cbz	r2, 8008538 <fill_tensor_desc_msg+0x78>
 800852a:	885b      	ldrh	r3, [r3, #2]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d0f5      	beq.n	800851c <fill_tensor_desc_msg+0x5c>
 8008530:	6853      	ldr	r3, [r2, #4]
 8008532:	f993 3000 	ldrsb.w	r3, [r3]
 8008536:	e7f1      	b.n	800851c <fill_tensor_desc_msg+0x5c>
 8008538:	4613      	mov	r3, r2
 800853a:	e7ef      	b.n	800851c <fill_tensor_desc_msg+0x5c>

0800853c <encode_ai_buffer_to_tensor_desc>:

static void encode_ai_buffer_to_tensor_desc(size_t index, void* data, aiTensorDescMsg* msg,
    struct _encode_uint32 *array_u32)
{
 800853c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800853e:	460c      	mov	r4, r1
 8008540:	4611      	mov	r1, r2
 8008542:	461a      	mov	r2, r3
  struct _data_tensor_desc *info = (struct _data_tensor_desc *)data;
  ai_buffer *buff = &((ai_buffer *)(info->buffer))[index];

  fill_tensor_desc_msg(buff, msg, array_u32, info->flags, info->scale, info->zero_point);
 8008544:	68e3      	ldr	r3, [r4, #12]
  ai_buffer *buff = &((ai_buffer *)(info->buffer))[index];
 8008546:	6825      	ldr	r5, [r4, #0]
  fill_tensor_desc_msg(buff, msg, array_u32, info->flags, info->scale, info->zero_point);
 8008548:	9300      	str	r3, [sp, #0]
 800854a:	ed94 0a02 	vldr	s0, [r4, #8]
 800854e:	6863      	ldr	r3, [r4, #4]
 8008550:	241c      	movs	r4, #28
 8008552:	fb04 5000 	mla	r0, r4, r0, r5
 8008556:	f7ff ffb3 	bl	80084c0 <fill_tensor_desc_msg>
}
 800855a:	b003      	add	sp, #12
 800855c:	bd30      	pop	{r4, r5, pc}

0800855e <aiPbCmdSysInfo>:
 * Specific test APP commands
 * -----------------------------------------------------------------------------
 */

void aiPbCmdSysInfo(const reqMsg *req, respMsg *resp, void *param)
{
 800855e:	b530      	push	{r4, r5, lr}
 8008560:	b087      	sub	sp, #28
 8008562:	4605      	mov	r5, r0
 8008564:	460c      	mov	r4, r1
  UNUSED(param);
  struct mcu_conf conf;

  getSysConf(&conf);
 8008566:	a801      	add	r0, sp, #4
 8008568:	f7ff ff1a 	bl	80083a0 <getSysConf>

  resp->which_payload = respMsg_sinfo_tag;
 800856c:	230b      	movs	r3, #11
  resp->payload.sinfo.devid = conf.devid;
  resp->payload.sinfo.sclock = conf.sclk;
  resp->payload.sinfo.hclock = conf.hclk;
  resp->payload.sinfo.cache = conf.conf;

  aiPbMgrSendResp(req, resp, EnumState_S_IDLE);
 800856e:	2200      	movs	r2, #0
 8008570:	4621      	mov	r1, r4
  resp->which_payload = respMsg_sinfo_tag;
 8008572:	80e3      	strh	r3, [r4, #6]
  aiPbMgrSendResp(req, resp, EnumState_S_IDLE);
 8008574:	4628      	mov	r0, r5
  resp->payload.sinfo.devid = conf.devid;
 8008576:	9b04      	ldr	r3, [sp, #16]
 8008578:	60a3      	str	r3, [r4, #8]
  resp->payload.sinfo.sclock = conf.sclk;
 800857a:	9b01      	ldr	r3, [sp, #4]
 800857c:	60e3      	str	r3, [r4, #12]
  resp->payload.sinfo.hclock = conf.hclk;
 800857e:	9b02      	ldr	r3, [sp, #8]
 8008580:	6123      	str	r3, [r4, #16]
  resp->payload.sinfo.cache = conf.conf;
 8008582:	9b03      	ldr	r3, [sp, #12]
 8008584:	6163      	str	r3, [r4, #20]
  aiPbMgrSendResp(req, resp, EnumState_S_IDLE);
 8008586:	f7ff fac1 	bl	8007b0c <aiPbMgrSendResp>
}
 800858a:	b007      	add	sp, #28
 800858c:	bd30      	pop	{r4, r5, pc}
	...

08008590 <encode_mempool_to_tensor_desc>:
{
 8008590:	b570      	push	{r4, r5, r6, lr}
 8008592:	461e      	mov	r6, r3
  array_u32->size = 1;
 8008594:	2301      	movs	r3, #1
  if (info->name)
 8008596:	6808      	ldr	r0, [r1, #0]
{
 8008598:	460d      	mov	r5, r1
  array_u32->size = 1;
 800859a:	6033      	str	r3, [r6, #0]
  array_u32->data = (void *)&info->size;
 800859c:	1d0b      	adds	r3, r1, #4
{
 800859e:	4614      	mov	r4, r2
  array_u32->data = (void *)&info->size;
 80085a0:	6073      	str	r3, [r6, #4]
  array_u32->offset = 4;
 80085a2:	2304      	movs	r3, #4
 80085a4:	60b3      	str	r3, [r6, #8]
  if (info->name)
 80085a6:	b1a0      	cbz	r0, 80085d2 <encode_mempool_to_tensor_desc+0x42>
    aiPbStrCopy(info->name, &msg->name[0],
 80085a8:	2240      	movs	r2, #64	; 0x40
 80085aa:	4621      	mov	r1, r4
 80085ac:	f7ff fa52 	bl	8007a54 <aiPbStrCopy>
  msg->format = AI_BUFFER_FORMAT_U8;
 80085b0:	4b09      	ldr	r3, [pc, #36]	; (80085d8 <encode_mempool_to_tensor_desc+0x48>)
 80085b2:	6423      	str	r3, [r4, #64]	; 0x40
  msg->size = info->size;
 80085b4:	686b      	ldr	r3, [r5, #4]
 80085b6:	6463      	str	r3, [r4, #68]	; 0x44
  msg->n_dims = AI_SHAPE_BCWH << 24 | array_u32->size;
 80085b8:	6833      	ldr	r3, [r6, #0]
 80085ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80085be:	64a3      	str	r3, [r4, #72]	; 0x48
  msg->scale = 0.0;
 80085c0:	2300      	movs	r3, #0
 80085c2:	6563      	str	r3, [r4, #84]	; 0x54
  msg->zeropoint = 0;
 80085c4:	2300      	movs	r3, #0
 80085c6:	65a3      	str	r3, [r4, #88]	; 0x58
  msg->addr = (uint32_t)info->addr;
 80085c8:	68ab      	ldr	r3, [r5, #8]
 80085ca:	65e3      	str	r3, [r4, #92]	; 0x5c
  msg->flags = EnumTensorFlag_TENSOR_FLAG_MEMPOOL;
 80085cc:	2308      	movs	r3, #8
 80085ce:	6623      	str	r3, [r4, #96]	; 0x60
}
 80085d0:	bd70      	pop	{r4, r5, r6, pc}
    msg->name[0] = 0;
 80085d2:	7010      	strb	r0, [r2, #0]
 80085d4:	e7ec      	b.n	80085b0 <encode_mempool_to_tensor_desc+0x20>
 80085d6:	bf00      	nop
 80085d8:	00040440 	.word	0x00040440

080085dc <_get_buffer_size>:
{
 80085dc:	b538      	push	{r3, r4, r5, lr}
  const ai_u32 batch_ = AI_BUFFER_SHAPE_ELEM(buffer, AI_SHAPE_BATCH);
 80085de:	6983      	ldr	r3, [r0, #24]
{
 80085e0:	4604      	mov	r4, r0
  return (size_t)AI_BUFFER_BYTE_SIZE(AI_BUFFER_SIZE(buffer) * batch_, buffer->format);
 80085e2:	2101      	movs	r1, #1
  const ai_u32 batch_ = AI_BUFFER_SHAPE_ELEM(buffer, AI_SHAPE_BATCH);
 80085e4:	681d      	ldr	r5, [r3, #0]
  return (size_t)AI_BUFFER_BYTE_SIZE(AI_BUFFER_SIZE(buffer) * batch_, buffer->format);
 80085e6:	f002 fbe7 	bl	800adb8 <ai_buffer_get_size>
 80085ea:	6821      	ldr	r1, [r4, #0]
 80085ec:	4368      	muls	r0, r5
}
 80085ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return (size_t)AI_BUFFER_BYTE_SIZE(AI_BUFFER_SIZE(buffer) * batch_, buffer->format);
 80085f2:	f002 bc15 	b.w	800ae20 <ai_buffer_get_byte_size>
	...

080085f8 <cyclesCounterStart>:
#endif
#endif  /* !HAS_DEDICATED_PERF_COUNTER */
}

__STATIC_INLINE void cyclesCounterStart(void)
{
 80085f8:	b508      	push	{r3, lr}
#else
#if USE_CORE_CLOCK_ONLY == 1
  dwtReset();
  cyclesCount.dwt_start = dwtGetCycles();
#else
  cyclesCount.tick_start = HAL_GetTick();
 80085fa:	f7f9 fd63 	bl	80020c4 <HAL_GetTick>
 80085fe:	4b04      	ldr	r3, [pc, #16]	; (8008610 <cyclesCounterStart+0x18>)
  DWT->CYCCNT = 0; /* Clear DWT cycle counter */
 8008600:	4a04      	ldr	r2, [pc, #16]	; (8008614 <cyclesCounterStart+0x1c>)
 8008602:	2100      	movs	r1, #0
  cyclesCount.tick_start = HAL_GetTick();
 8008604:	6098      	str	r0, [r3, #8]
  DWT->CYCCNT = 0; /* Clear DWT cycle counter */
 8008606:	6051      	str	r1, [r2, #4]
  return DWT->CYCCNT;
 8008608:	6852      	ldr	r2, [r2, #4]
  dwtReset();
  cyclesCount.dwt_start = dwtGetCycles();
 800860a:	605a      	str	r2, [r3, #4]
#endif
#endif
#endif  /* !HAS_DEDICATED_PERF_COUNTER */
}
 800860c:	bd08      	pop	{r3, pc}
 800860e:	bf00      	nop
 8008610:	240019c8 	.word	0x240019c8
 8008614:	e0001000 	.word	0xe0001000

08008618 <cyclesCounterEnd>:

__STATIC_INLINE uint64_t cyclesCounterEnd(void)
{
 8008618:	b537      	push	{r0, r1, r2, r4, r5, lr}
  return DWT->CYCCNT;
 800861a:	4b0f      	ldr	r3, [pc, #60]	; (8008658 <cyclesCounterEnd+0x40>)
#if USE_CORE_CLOCK_ONLY == 1
  return (uint64_t)(dwtGetCycles() - cyclesCount.dwt_start);
#else
  uint64_t dwt_e;
  uint64_t tick_e;
  dwt_e = dwtGetCycles() - cyclesCount.dwt_start;
 800861c:	2100      	movs	r1, #0
 800861e:	4d0f      	ldr	r5, [pc, #60]	; (800865c <cyclesCounterEnd+0x44>)
  return DWT->CYCCNT;
 8008620:	685c      	ldr	r4, [r3, #4]
  dwt_e = dwtGetCycles() - cyclesCount.dwt_start;
 8008622:	686b      	ldr	r3, [r5, #4]
 8008624:	9101      	str	r1, [sp, #4]
 8008626:	1ae4      	subs	r4, r4, r3
  tick_e = HAL_GetTick() - cyclesCount.tick_start;
 8008628:	f7f9 fd4c 	bl	80020c4 <HAL_GetTick>
 800862c:	68ab      	ldr	r3, [r5, #8]
  if (tick_e > cyclesCount.dwt_max) {
 800862e:	682a      	ldr	r2, [r5, #0]
  tick_e = HAL_GetTick() - cyclesCount.tick_start;
 8008630:	1ac0      	subs	r0, r0, r3
  if (tick_e > cyclesCount.dwt_max) {
 8008632:	9901      	ldr	r1, [sp, #4]
 8008634:	4290      	cmp	r0, r2
 8008636:	d90c      	bls.n	8008652 <cyclesCounterEnd+0x3a>
    /* overflow detected */
    dwt_e = ((tick_e/cyclesCount.dwt_max) * (uint64_t)UINT32_MAX + (uint64_t)dwt_e);
 8008638:	460b      	mov	r3, r1
 800863a:	f7f7 ffb7 	bl	80005ac <__aeabi_uldivmod>
 800863e:	f04f 33ff 	mov.w	r3, #4294967295
 8008642:	fba0 0303 	umull	r0, r3, r0, r3
 8008646:	1900      	adds	r0, r0, r4
 8008648:	eba3 0101 	sub.w	r1, r3, r1
 800864c:	4604      	mov	r4, r0
 800864e:	f141 0100 	adc.w	r1, r1, #0
  }
  return dwt_e;
#endif
#endif
#endif  /* !HAS_DEDICATED_PERF_COUNTER */
}
 8008652:	4620      	mov	r0, r4
 8008654:	b003      	add	sp, #12
 8008656:	bd30      	pop	{r4, r5, pc}
 8008658:	e0001000 	.word	0xe0001000
 800865c:	240019c8 	.word	0x240019c8

08008660 <aiExecCtx>:
{
 8008660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008662:	4604      	mov	r4, r0
  if (!nn_name[0]) {
 8008664:	7800      	ldrb	r0, [r0, #0]
 8008666:	b930      	cbnz	r0, 8008676 <aiExecCtx+0x16>
    if ((pos >= 0) && (pos < AI_MNETWORK_NUMBER) && net_exec_ctx[pos].handle)
 8008668:	b921      	cbnz	r1, 8008674 <aiExecCtx+0x14>
 800866a:	4b10      	ldr	r3, [pc, #64]	; (80086ac <aiExecCtx+0x4c>)
 800866c:	6818      	ldr	r0, [r3, #0]
      cur = &net_exec_ctx[pos];
 800866e:	2800      	cmp	r0, #0
 8008670:	bf18      	it	ne
 8008672:	4618      	movne	r0, r3
}
 8008674:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (cur->handle &&
 8008676:	4e0d      	ldr	r6, [pc, #52]	; (80086ac <aiExecCtx+0x4c>)
 8008678:	6830      	ldr	r0, [r6, #0]
 800867a:	2800      	cmp	r0, #0
 800867c:	d0fa      	beq.n	8008674 <aiExecCtx+0x14>
          (strlen(cur->report.model_name) == strlen(nn_name)) &&
 800867e:	6877      	ldr	r7, [r6, #4]
 8008680:	4638      	mov	r0, r7
 8008682:	f7f7 fe2d 	bl	80002e0 <strlen>
 8008686:	4605      	mov	r5, r0
 8008688:	4620      	mov	r0, r4
 800868a:	f7f7 fe29 	bl	80002e0 <strlen>
      if (cur->handle &&
 800868e:	4285      	cmp	r5, r0
 8008690:	d109      	bne.n	80086a6 <aiExecCtx+0x46>
          (strncmp(cur->report.model_name, nn_name,
 8008692:	462a      	mov	r2, r5
 8008694:	4621      	mov	r1, r4
 8008696:	4638      	mov	r0, r7
 8008698:	f00a fad4 	bl	8012c44 <strncmp>
      cur = &net_exec_ctx[pos];
 800869c:	2800      	cmp	r0, #0
 800869e:	bf0c      	ite	eq
 80086a0:	4630      	moveq	r0, r6
 80086a2:	2000      	movne	r0, #0
 80086a4:	e7e6      	b.n	8008674 <aiExecCtx+0x14>
 80086a6:	2000      	movs	r0, #0
 80086a8:	e7e4      	b.n	8008674 <aiExecCtx+0x14>
 80086aa:	bf00      	nop
 80086ac:	24001a40 	.word	0x24001a40

080086b0 <send_ai_io_tensor.isra.0>:
static bool send_ai_io_tensor(const reqMsg *req, respMsg *resp,
 80086b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086b4:	4605      	mov	r5, r0
 80086b6:	b08a      	sub	sp, #40	; 0x28
 80086b8:	4618      	mov	r0, r3
  resp->which_payload = respMsg_tensor_tag;
 80086ba:	2311      	movs	r3, #17
static bool send_ai_io_tensor(const reqMsg *req, respMsg *resp,
 80086bc:	9f10      	ldr	r7, [sp, #64]	; 0x40
  fill_tensor_desc_msg(buffer, &resp->payload.tensor.desc, &array_u32, flags, scale, zero_point);
 80086be:	f10d 080c 	add.w	r8, sp, #12
  resp->which_payload = respMsg_tensor_tag;
 80086c2:	80cb      	strh	r3, [r1, #6]
static bool send_ai_io_tensor(const reqMsg *req, respMsg *resp,
 80086c4:	460c      	mov	r4, r1
  fill_tensor_desc_msg(buffer, &resp->payload.tensor.desc, &array_u32, flags, scale, zero_point);
 80086c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
static bool send_ai_io_tensor(const reqMsg *req, respMsg *resp,
 80086c8:	4616      	mov	r6, r2
  fill_tensor_desc_msg(buffer, &resp->payload.tensor.desc, &array_u32, flags, scale, zero_point);
 80086ca:	3108      	adds	r1, #8
 80086cc:	4642      	mov	r2, r8
 80086ce:	9300      	str	r3, [sp, #0]
 80086d0:	463b      	mov	r3, r7
 80086d2:	f7ff fef5 	bl	80084c0 <fill_tensor_desc_msg>
  resp->payload.tensor.desc.dims.funcs.encode = encode_uint32;
 80086d6:	4b10      	ldr	r3, [pc, #64]	; (8008718 <send_ai_io_tensor.isra.0+0x68>)
  if (flags & EnumTensorFlag_TENSOR_FLAG_NO_DATA) {
 80086d8:	f417 7f00 	tst.w	r7, #512	; 0x200
 80086dc:	f04f 0700 	mov.w	r7, #0
  resp->payload.tensor.desc.dims.arg = &array_u32;
 80086e0:	e9c4 3815 	strd	r3, r8, [r4, #84]	; 0x54
  resp->payload.tensor.data.addr = (uint32_t)buffer->data;
 80086e4:	6843      	ldr	r3, [r0, #4]
 80086e6:	6763      	str	r3, [r4, #116]	; 0x74
  if (flags & EnumTensorFlag_TENSOR_FLAG_NO_DATA) {
 80086e8:	d012      	beq.n	8008710 <send_ai_io_tensor.isra.0+0x60>
    resp->payload.tensor.data.size = 0;
 80086ea:	6727      	str	r7, [r4, #112]	; 0x70
  struct aiPbData data = { 0, resp->payload.tensor.data.size, resp->payload.tensor.data.addr, 0};
 80086ec:	6f23      	ldr	r3, [r4, #112]	; 0x70
  aiPbMgrSendResp(req, resp, state);
 80086ee:	4632      	mov	r2, r6
 80086f0:	4621      	mov	r1, r4
 80086f2:	4628      	mov	r0, r5
  struct aiPbData data = { 0, resp->payload.tensor.data.size, resp->payload.tensor.data.addr, 0};
 80086f4:	9307      	str	r3, [sp, #28]
 80086f6:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80086f8:	9706      	str	r7, [sp, #24]
 80086fa:	e9cd 3708 	strd	r3, r7, [sp, #32]
  resp->payload.tensor.data.datas.funcs.encode = &encode_data_cb;
 80086fe:	4b07      	ldr	r3, [pc, #28]	; (800871c <send_ai_io_tensor.isra.0+0x6c>)
 8008700:	67a3      	str	r3, [r4, #120]	; 0x78
  resp->payload.tensor.data.datas.arg = (void *)&data;
 8008702:	ab06      	add	r3, sp, #24
 8008704:	67e3      	str	r3, [r4, #124]	; 0x7c
  aiPbMgrSendResp(req, resp, state);
 8008706:	f7ff fa01 	bl	8007b0c <aiPbMgrSendResp>
}
 800870a:	b00a      	add	sp, #40	; 0x28
 800870c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    resp->payload.tensor.data.size = _get_buffer_size(buffer);
 8008710:	f7ff ff64 	bl	80085dc <_get_buffer_size>
 8008714:	6720      	str	r0, [r4, #112]	; 0x70
 8008716:	e7e9      	b.n	80086ec <send_ai_io_tensor.isra.0+0x3c>
 8008718:	0800792b 	.word	0x0800792b
 800871c:	08007983 	.word	0x08007983

08008720 <aiOnExecNode_cb>:
    const ai_observer_node *node) {
 8008720:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008724:	460d      	mov	r5, r1
 8008726:	4617      	mov	r7, r2
  struct ai_network_user_obs_ctx  *obs_ctx = ctx->obs_ctx;
 8008728:	f8d0 4084 	ldr.w	r4, [r0, #132]	; 0x84
    const ai_observer_node *node) {
 800872c:	ed2d 8b02 	vpush	{d8}
 8008730:	b093      	sub	sp, #76	; 0x4c
  volatile uint64_t ts = cyclesCounterEnd(); // dwtGetCycles(); /* time stamp to mark the entry */
 8008732:	f7ff ff71 	bl	8008618 <cyclesCounterEnd>
  if (flags & AI_OBSERVER_PRE_EVT) {
 8008736:	f015 0602 	ands.w	r6, r5, #2
  volatile uint64_t ts = cyclesCounterEnd(); // dwtGetCycles(); /* time stamp to mark the entry */
 800873a:	e9cd 0104 	strd	r0, r1, [sp, #16]
  if (flags & AI_OBSERVER_PRE_EVT) {
 800873e:	d011      	beq.n	8008764 <aiOnExecNode_cb+0x44>
    obs_ctx->n_cb_in++;
 8008740:	6863      	ldr	r3, [r4, #4]
    if (flags & AI_OBSERVER_FIRST_EVT)
 8008742:	05ea      	lsls	r2, r5, #23
    obs_ctx->n_cb_in++;
 8008744:	f103 0301 	add.w	r3, r3, #1
 8008748:	6063      	str	r3, [r4, #4]
    if (flags & AI_OBSERVER_FIRST_EVT)
 800874a:	d503      	bpl.n	8008754 <aiOnExecNode_cb+0x34>
      obs_ctx->tnodes = ts;
 800874c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008750:	e9c4 2308 	strd	r2, r3, [r4, #32]
  cyclesCounterStart();
 8008754:	f7ff ff50 	bl	80085f8 <cyclesCounterStart>
}
 8008758:	2000      	movs	r0, #0
 800875a:	b013      	add	sp, #76	; 0x4c
 800875c:	ecbd 8b02 	vpop	{d8}
 8008760:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  } else if (flags & AI_OBSERVER_POST_EVT) {
 8008764:	076b      	lsls	r3, r5, #29
 8008766:	d5f5      	bpl.n	8008754 <aiOnExecNode_cb+0x34>
    cyclesCounterStart();
 8008768:	f7ff ff46 	bl	80085f8 <cyclesCounterStart>
    obs_ctx->tnodes += ts;
 800876c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008770:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
 8008774:	181b      	adds	r3, r3, r0
 8008776:	eb42 0201 	adc.w	r2, r2, r1
      type |= (EnumOperatorFlag_OPERATOR_FLAG_LAST << 24);
 800877a:	f415 7f00 	tst.w	r5, #512	; 0x200
    type |= (node->type & (ai_u16)0x7FFF);
 800877e:	887d      	ldrh	r5, [r7, #2]
    obs_ctx->tnodes += ts;
 8008780:	e9c4 3208 	strd	r3, r2, [r4, #32]
    obs_ctx->n_cb_out++;
 8008784:	68a3      	ldr	r3, [r4, #8]
    type |= (node->type & (ai_u16)0x7FFF);
 8008786:	f3c5 050e 	ubfx	r5, r5, #0, #15
    obs_ctx->n_cb_out++;
 800878a:	f103 0301 	add.w	r3, r3, #1
 800878e:	60a3      	str	r3, [r4, #8]
      type |= (EnumOperatorFlag_OPERATOR_FLAG_LAST << 24);
 8008790:	bf0c      	ite	eq
 8008792:	f04f 7380 	moveq.w	r3, #16777216	; 0x1000000
 8008796:	f04f 7340 	movne.w	r3, #50331648	; 0x3000000
    aiOpPerf perf = {dwtCyclesToFloatMs(ts), 0,  2, (uint32_t *)&ts};
 800879a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    type |= (node->type & (ai_u16)0x7FFF);
 800879e:	431d      	orrs	r5, r3
    aiOpPerf perf = {dwtCyclesToFloatMs(ts), 0,  2, (uint32_t *)&ts};
 80087a0:	f7ff fdb0 	bl	8008304 <dwtCyclesToFloatMs>
 80087a4:	ab04      	add	r3, sp, #16
 80087a6:	2202      	movs	r2, #2
 80087a8:	ed8d 0a07 	vstr	s0, [sp, #28]
 80087ac:	930a      	str	r3, [sp, #40]	; 0x28
    aiPbMgrSendOperator(obs_ctx->creq, obs_ctx->cresp, EnumState_S_PROCESSING,
 80087ae:	ab07      	add	r3, sp, #28
    aiOpPerf perf = {dwtCyclesToFloatMs(ts), 0,  2, (uint32_t *)&ts};
 80087b0:	9209      	str	r2, [sp, #36]	; 0x24
    aiPbMgrSendOperator(obs_ctx->creq, obs_ctx->cresp, EnumState_S_PROCESSING,
 80087b2:	9302      	str	r3, [sp, #8]
 80087b4:	88bb      	ldrh	r3, [r7, #4]
    aiOpPerf perf = {dwtCyclesToFloatMs(ts), 0,  2, (uint32_t *)&ts};
 80087b6:	9608      	str	r6, [sp, #32]
    aiPbMgrSendOperator(obs_ctx->creq, obs_ctx->cresp, EnumState_S_PROCESSING,
 80087b8:	e9cd 5300 	strd	r5, r3, [sp]
 80087bc:	4633      	mov	r3, r6
 80087be:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
 80087c2:	f7ff fa69 	bl	8007c98 <aiPbMgrSendOperator>
    tl = GET_TENSOR_LIST_OUT(node->tensors);
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	881a      	ldrh	r2, [r3, #0]
 80087ca:	2a01      	cmp	r2, #1
 80087cc:	d90e      	bls.n	80087ec <aiOnExecNode_cb+0xcc>
 80087ce:	f8d3 8004 	ldr.w	r8, [r3, #4]
        zero_point = AI_TENSOR_INTEGER_GET_ZEROPOINT_I8(t, 0);
 80087d2:	46b1      	mov	r9, r6
      ai_float scale = AI_TENSOR_INTEGER_GET_SCALE(t, 0);
 80087d4:	eddf 8a38 	vldr	s17, [pc, #224]	; 80088b8 <aiOnExecNode_cb+0x198>
    AI_FOR_EACH_TENSOR_LIST_DO(i, t, tl) {
 80087d8:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 80087dc:	429e      	cmp	r6, r3
 80087de:	d205      	bcs.n	80087ec <aiOnExecNode_cb+0xcc>
 80087e0:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80087e4:	b113      	cbz	r3, 80087ec <aiOnExecNode_cb+0xcc>
 80087e6:	f853 7026 	ldr.w	r7, [r3, r6, lsl #2]
 80087ea:	b94f      	cbnz	r7, 8008800 <aiOnExecNode_cb+0xe0>
    obs_ctx->tcom += cyclesCounterEnd();
 80087ec:	f7ff ff14 	bl	8008618 <cyclesCounterEnd>
 80087f0:	e9d4 3206 	ldrd	r3, r2, [r4, #24]
 80087f4:	1818      	adds	r0, r3, r0
 80087f6:	eb42 0101 	adc.w	r1, r2, r1
 80087fa:	e9c4 0106 	strd	r0, r1, [r4, #24]
 80087fe:	e7a9      	b.n	8008754 <aiOnExecNode_cb+0x34>
      ai_float scale = AI_TENSOR_INTEGER_GET_SCALE(t, 0);
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d046      	beq.n	8008894 <aiOnExecNode_cb+0x174>
 8008806:	685a      	ldr	r2, [r3, #4]
 8008808:	2a00      	cmp	r2, #0
 800880a:	d043      	beq.n	8008894 <aiOnExecNode_cb+0x174>
 800880c:	8859      	ldrh	r1, [r3, #2]
 800880e:	2900      	cmp	r1, #0
 8008810:	d040      	beq.n	8008894 <aiOnExecNode_cb+0x174>
 8008812:	6812      	ldr	r2, [r2, #0]
 8008814:	ed92 8a00 	vldr	s16, [r2]
      if (AI_TENSOR_FMT_GET_SIGN(t))
 8008818:	69b8      	ldr	r0, [r7, #24]
 800881a:	6802      	ldr	r2, [r0, #0]
 800881c:	f412 0500 	ands.w	r5, r2, #8388608	; 0x800000
 8008820:	d03b      	beq.n	800889a <aiOnExecNode_cb+0x17a>
        zero_point = AI_TENSOR_INTEGER_GET_ZEROPOINT_I8(t, 0);
 8008822:	2b00      	cmp	r3, #0
 8008824:	d044      	beq.n	80088b0 <aiOnExecNode_cb+0x190>
 8008826:	6859      	ldr	r1, [r3, #4]
 8008828:	2900      	cmp	r1, #0
 800882a:	d043      	beq.n	80088b4 <aiOnExecNode_cb+0x194>
 800882c:	885d      	ldrh	r5, [r3, #2]
 800882e:	b115      	cbz	r5, 8008836 <aiOnExecNode_cb+0x116>
 8008830:	684b      	ldr	r3, [r1, #4]
 8008832:	f993 5000 	ldrsb.w	r5, [r3]
      ai_buffer buffer =
 8008836:	68c3      	ldr	r3, [r0, #12]
          AI_BUFFER_INIT(
 8008838:	2101      	movs	r1, #1
 800883a:	4638      	mov	r0, r7
      ai_buffer buffer =
 800883c:	920b      	str	r2, [sp, #44]	; 0x2c
 800883e:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8008842:	e9cd 390c 	strd	r3, r9, [sp, #48]	; 0x30
          AI_BUFFER_INIT(
 8008846:	f002 f9e9 	bl	800ac1c <get_tensor_size>
      ai_buffer buffer =
 800884a:	7a3b      	ldrb	r3, [r7, #8]
 800884c:	900f      	str	r0, [sp, #60]	; 0x3c
 800884e:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
          AI_BUFFER_INIT(
 8008852:	68bb      	ldr	r3, [r7, #8]
      ai_buffer buffer =
 8008854:	9a10      	ldr	r2, [sp, #64]	; 0x40
          AI_BUFFER_INIT(
 8008856:	f3c3 2317 	ubfx	r3, r3, #8, #24
      ai_buffer buffer =
 800885a:	f363 221f 	bfi	r2, r3, #8, #24
 800885e:	9210      	str	r2, [sp, #64]	; 0x40
 8008860:	68fb      	ldr	r3, [r7, #12]
      if (obs_ctx->no_data)
 8008862:	7d22      	ldrb	r2, [r4, #20]
      ai_buffer buffer =
 8008864:	9311      	str	r3, [sp, #68]	; 0x44
      if (i == (GET_TENSOR_LIST_SIZE(tl) - 1))
 8008866:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800886a:	3b01      	subs	r3, #1
        tens_flags |= EnumTensorFlag_TENSOR_FLAG_LAST;
 800886c:	429e      	cmp	r6, r3
 800886e:	bf14      	ite	ne
 8008870:	2304      	movne	r3, #4
 8008872:	f44f 7382 	moveq.w	r3, #260	; 0x104
      if (obs_ctx->no_data)
 8008876:	b10a      	cbz	r2, 800887c <aiOnExecNode_cb+0x15c>
        tens_flags |= EnumTensorFlag_TENSOR_FLAG_NO_DATA;
 8008878:	f443 7300 	orr.w	r3, r3, #512	; 0x200
      send_ai_io_tensor(obs_ctx->creq, obs_ctx->cresp, EnumState_S_PROCESSING,
 800887c:	eeb0 0a48 	vmov.f32	s0, s16
 8008880:	2202      	movs	r2, #2
    AI_FOR_EACH_TENSOR_LIST_DO(i, t, tl) {
 8008882:	3601      	adds	r6, #1
      send_ai_io_tensor(obs_ctx->creq, obs_ctx->cresp, EnumState_S_PROCESSING,
 8008884:	e9cd 3500 	strd	r3, r5, [sp]
 8008888:	ab0b      	add	r3, sp, #44	; 0x2c
 800888a:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
 800888e:	f7ff ff0f 	bl	80086b0 <send_ai_io_tensor.isra.0>
    AI_FOR_EACH_TENSOR_LIST_DO(i, t, tl) {
 8008892:	e7a1      	b.n	80087d8 <aiOnExecNode_cb+0xb8>
      ai_float scale = AI_TENSOR_INTEGER_GET_SCALE(t, 0);
 8008894:	eeb0 8a68 	vmov.f32	s16, s17
 8008898:	e7be      	b.n	8008818 <aiOnExecNode_cb+0xf8>
        zero_point = AI_TENSOR_INTEGER_GET_ZEROPOINT_U8(t, 0);
 800889a:	2b00      	cmp	r3, #0
 800889c:	d0cb      	beq.n	8008836 <aiOnExecNode_cb+0x116>
 800889e:	6859      	ldr	r1, [r3, #4]
 80088a0:	2900      	cmp	r1, #0
 80088a2:	d0c8      	beq.n	8008836 <aiOnExecNode_cb+0x116>
 80088a4:	885b      	ldrh	r3, [r3, #2]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d0c5      	beq.n	8008836 <aiOnExecNode_cb+0x116>
 80088aa:	684b      	ldr	r3, [r1, #4]
 80088ac:	781d      	ldrb	r5, [r3, #0]
 80088ae:	e7c2      	b.n	8008836 <aiOnExecNode_cb+0x116>
        zero_point = AI_TENSOR_INTEGER_GET_ZEROPOINT_I8(t, 0);
 80088b0:	461d      	mov	r5, r3
 80088b2:	e7c0      	b.n	8008836 <aiOnExecNode_cb+0x116>
 80088b4:	460d      	mov	r5, r1
 80088b6:	e7be      	b.n	8008836 <aiOnExecNode_cb+0x116>
 80088b8:	00000000 	.word	0x00000000

080088bc <aiPbCmdNNInfo>:

void aiPbCmdNNInfo(const reqMsg *req, respMsg *resp, void *param)
{
 80088bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088c0:	4606      	mov	r6, r0
 80088c2:	b09c      	sub	sp, #112	; 0x70
 80088c4:	460c      	mov	r4, r1
  struct ai_network_exec_ctx *ctx;

  UNUSED(param);

  ctx = aiExecCtx(req->name, req->param);
 80088c6:	300c      	adds	r0, #12
 80088c8:	f850 1c04 	ldr.w	r1, [r0, #-4]
 80088cc:	f7ff fec8 	bl	8008660 <aiExecCtx>
  if (ctx)
 80088d0:	4605      	mov	r5, r0
 80088d2:	2800      	cmp	r0, #0
 80088d4:	f000 80a4 	beq.w	8008a20 <aiPbCmdNNInfo+0x164>
  resp->which_payload = respMsg_minfo_tag;
 80088d8:	2316      	movs	r3, #22
    send_model_info(req, resp, EnumState_S_IDLE, &ctx->report,
 80088da:	f890 7081 	ldrb.w	r7, [r0, #129]	; 0x81
 80088de:	f890 8080 	ldrb.w	r8, [r0, #128]	; 0x80
  aiPbStrCopy(nn->model_name, &resp->payload.minfo.name[0],
 80088e2:	2240      	movs	r2, #64	; 0x40
 80088e4:	f104 0108 	add.w	r1, r4, #8
 80088e8:	6840      	ldr	r0, [r0, #4]
  resp->which_payload = respMsg_minfo_tag;
 80088ea:	80e3      	strh	r3, [r4, #6]
  aiPbStrCopy(nn->model_name, &resp->payload.minfo.name[0],
 80088ec:	f7ff f8b2 	bl	8007a54 <aiPbStrCopy>
  resp->payload.minfo.rtid = _AI_RUNTIME_ID;
 80088f0:	2301      	movs	r3, #1
  aiPbStrCopy(nn->model_signature, &resp->payload.minfo.signature[0],
 80088f2:	2240      	movs	r2, #64	; 0x40
 80088f4:	f104 014c 	add.w	r1, r4, #76	; 0x4c
  resp->payload.minfo.rtid = _AI_RUNTIME_ID;
 80088f8:	64a3      	str	r3, [r4, #72]	; 0x48
  aiPbStrCopy(nn->model_signature, &resp->payload.minfo.signature[0],
 80088fa:	68a8      	ldr	r0, [r5, #8]
 80088fc:	f7ff f8aa 	bl	8007a54 <aiPbStrCopy>
  aiPbStrCopy(nn->compile_datetime, &resp->payload.minfo.compile_datetime[0],
 8008900:	2240      	movs	r2, #64	; 0x40
 8008902:	f104 018c 	add.w	r1, r4, #140	; 0x8c
 8008906:	6928      	ldr	r0, [r5, #16]
 8008908:	f7ff f8a4 	bl	8007a54 <aiPbStrCopy>
  resp->payload.minfo.runtime_version = _ai_version_to_uint32(&nn->runtime_version);
 800890c:	69ab      	ldr	r3, [r5, #24]
  resp->payload.minfo.n_macc = (uint64_t)nn->n_macc;
 800890e:	6b2a      	ldr	r2, [r5, #48]	; 0x30
  struct _data_tensor_desc tensor_desc_ins = {&nn->inputs[0], flags, 0.0, 0};
 8008910:	f04f 0c00 	mov.w	ip, #0
 8008914:	ba1b      	rev	r3, r3
 8008916:	6ba9      	ldr	r1, [r5, #56]	; 0x38
  struct _encode_tensor_desc tensor_ins = {
 8008918:	4845      	ldr	r0, [pc, #276]	; (8008a30 <aiPbCmdNNInfo+0x174>)
  resp->payload.minfo.runtime_version = _ai_version_to_uint32(&nn->runtime_version);
 800891a:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
  resp->payload.minfo.tool_version = _ai_version_to_uint32(&nn->tool_version);
 800891e:	6a2b      	ldr	r3, [r5, #32]
  struct _encode_tensor_desc tensor_ins = {
 8008920:	9002      	str	r0, [sp, #8]
 8008922:	ba1b      	rev	r3, r3
  struct _encode_tensor_desc tensor_outs = {
 8008924:	9005      	str	r0, [sp, #20]
 8008926:	a818      	add	r0, sp, #96	; 0x60
  struct _data_tensor_desc tensor_desc_ins = {&nn->inputs[0], flags, 0.0, 0};
 8008928:	f8cd c058 	str.w	ip, [sp, #88]	; 0x58
  resp->payload.minfo.tool_version = _ai_version_to_uint32(&nn->tool_version);
 800892c:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
  resp->payload.minfo.n_macc = (uint64_t)nn->n_macc;
 8008930:	2300      	movs	r3, #0
  struct _data_tensor_desc tensor_desc_outs = {&nn->outputs[0], flags, 0.0, 0};
 8008932:	f8cd c068 	str.w	ip, [sp, #104]	; 0x68
    flags |= EnumTensorFlag_TENSOR_FLAG_IN_MEMPOOL;
 8008936:	4598      	cmp	r8, r3
  struct _data_tensor_desc tensor_desc_ins = {&nn->inputs[0], flags, 0.0, 0};
 8008938:	9317      	str	r3, [sp, #92]	; 0x5c
  struct _data_tensor_desc tensor_desc_outs = {&nn->outputs[0], flags, 0.0, 0};
 800893a:	931b      	str	r3, [sp, #108]	; 0x6c
  struct _encode_tensor_desc tensor_outs = {
 800893c:	9007      	str	r0, [sp, #28]
  resp->payload.minfo.n_macc = (uint64_t)nn->n_macc;
 800893e:	e9c4 2336 	strd	r2, r3, [r4, #216]	; 0xd8
  resp->payload.minfo.n_nodes = nn->n_nodes;
 8008942:	6faa      	ldr	r2, [r5, #120]	; 0x78
 8008944:	f8c4 20e0 	str.w	r2, [r4, #224]	; 0xe0
    flags |= EnumTensorFlag_TENSOR_FLAG_IN_MEMPOOL;
 8008948:	f240 4201 	movw	r2, #1025	; 0x401
 800894c:	bf08      	it	eq
 800894e:	2201      	moveq	r2, #1
    flags |= EnumTensorFlag_TENSOR_FLAG_IN_MEMPOOL;
 8008950:	429f      	cmp	r7, r3
  struct _data_tensor_desc tensor_desc_outs = {&nn->outputs[0], flags, 0.0, 0};
 8008952:	6bef      	ldr	r7, [r5, #60]	; 0x3c
  struct _data_tensor_desc tensor_desc_ins = {&nn->inputs[0], flags, 0.0, 0};
 8008954:	e9cd 1214 	strd	r1, r2, [sp, #80]	; 0x50
      &encode_ai_buffer_to_tensor_desc, nn->n_inputs, &tensor_desc_ins };
 8008958:	8eaa      	ldrh	r2, [r5, #52]	; 0x34
  struct _encode_tensor_desc tensor_ins = {
 800895a:	a914      	add	r1, sp, #80	; 0x50
 800895c:	9203      	str	r2, [sp, #12]
  resp->payload.minfo.n_inputs = nn->n_inputs;
 800895e:	f8c4 20e4 	str.w	r2, [r4, #228]	; 0xe4
  resp->payload.minfo.inputs.arg = (void *)&tensor_ins;
 8008962:	aa02      	add	r2, sp, #8
  struct _encode_tensor_desc tensor_ins = {
 8008964:	9104      	str	r1, [sp, #16]
  resp->payload.minfo.inputs.arg = (void *)&tensor_ins;
 8008966:	f8c4 20ec 	str.w	r2, [r4, #236]	; 0xec
    flags |= EnumTensorFlag_TENSOR_FLAG_IN_MEMPOOL;
 800896a:	f240 4202 	movw	r2, #1026	; 0x402
 800896e:	bf08      	it	eq
 8008970:	2202      	moveq	r2, #2
  resp->payload.minfo.inputs.funcs.encode = encode_tensor_desc;
 8008972:	4930      	ldr	r1, [pc, #192]	; (8008a34 <aiPbCmdNNInfo+0x178>)
  struct _data_tensor_desc tensor_desc_outs = {&nn->outputs[0], flags, 0.0, 0};
 8008974:	e9cd 7218 	strd	r7, r2, [sp, #96]	; 0x60
      &encode_ai_buffer_to_tensor_desc, nn->n_outputs, &tensor_desc_outs };
 8008978:	8eea      	ldrh	r2, [r5, #54]	; 0x36
  resp->payload.minfo.inputs.funcs.encode = encode_tensor_desc;
 800897a:	f8c4 10e8 	str.w	r1, [r4, #232]	; 0xe8
  struct _encode_tensor_desc tensor_outs = {
 800897e:	9206      	str	r2, [sp, #24]
  resp->payload.minfo.outputs.funcs.encode = encode_tensor_desc;
 8008980:	e9c4 213c 	strd	r2, r1, [r4, #240]	; 0xf0
  resp->payload.minfo.outputs.arg = (void *)&tensor_outs;
 8008984:	aa05      	add	r2, sp, #20
 8008986:	f8c4 20f8 	str.w	r2, [r4, #248]	; 0xf8
  if (nn->map_activations.size) {
 800898a:	f8b5 704e 	ldrh.w	r7, [r5, #78]	; 0x4e
 800898e:	2f00      	cmp	r7, #0
 8008990:	d042      	beq.n	8008a18 <aiPbCmdNNInfo+0x15c>
      size_acts += nn->map_activations.buffer[i].size;
 8008992:	6d28      	ldr	r0, [r5, #80]	; 0x50
    for (int i=0; i<nn->map_activations.size; i++)
 8008994:	461a      	mov	r2, r3
      size_acts += nn->map_activations.buffer[i].size;
 8008996:	f04f 0e1c 	mov.w	lr, #28
 800899a:	3010      	adds	r0, #16
 800899c:	fb0e fc02 	mul.w	ip, lr, r2
    for (int i=0; i<nn->map_activations.size; i++)
 80089a0:	3201      	adds	r2, #1
      size_acts += nn->map_activations.buffer[i].size;
 80089a2:	f850 c00c 	ldr.w	ip, [r0, ip]
    for (int i=0; i<nn->map_activations.size; i++)
 80089a6:	42ba      	cmp	r2, r7
      size_acts += nn->map_activations.buffer[i].size;
 80089a8:	4463      	add	r3, ip
    for (int i=0; i<nn->map_activations.size; i++)
 80089aa:	dbf7      	blt.n	800899c <aiPbCmdNNInfo+0xe0>
  struct _mempool_attr_desc tensor_desc_acts = {"acts", size_acts, 0};
 80089ac:	4a22      	ldr	r2, [pc, #136]	; (8008a38 <aiPbCmdNNInfo+0x17c>)
  struct _encode_tensor_desc tensor_acts = {
 80089ae:	a808      	add	r0, sp, #32
 80089b0:	4f22      	ldr	r7, [pc, #136]	; (8008a3c <aiPbCmdNNInfo+0x180>)
 80089b2:	900d      	str	r0, [sp, #52]	; 0x34
  if (nn->map_weights.size) {
 80089b4:	f8b5 0046 	ldrh.w	r0, [r5, #70]	; 0x46
  struct _encode_tensor_desc tensor_acts = {
 80089b8:	970b      	str	r7, [sp, #44]	; 0x2c
  struct _mempool_attr_desc tensor_desc_acts = {"acts", size_acts, 0};
 80089ba:	e9cd 2308 	strd	r2, r3, [sp, #32]
  struct _encode_tensor_desc tensor_acts = {
 80089be:	2201      	movs	r2, #1
  struct _mempool_attr_desc tensor_desc_acts = {"acts", size_acts, 0};
 80089c0:	2300      	movs	r3, #0
  struct _encode_tensor_desc tensor_acts = {
 80089c2:	920c      	str	r2, [sp, #48]	; 0x30
  struct _mempool_attr_desc tensor_desc_acts = {"acts", size_acts, 0};
 80089c4:	930a      	str	r3, [sp, #40]	; 0x28
  resp->payload.minfo.activations.funcs.encode = encode_tensor_desc;
 80089c6:	e9c4 213f 	strd	r2, r1, [r4, #252]	; 0xfc
  resp->payload.minfo.activations.arg = (void *)&tensor_acts;
 80089ca:	aa0b      	add	r2, sp, #44	; 0x2c
 80089cc:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
  if (nn->map_weights.size) {
 80089d0:	b320      	cbz	r0, 8008a1c <aiPbCmdNNInfo+0x160>
      size_params += nn->map_weights.buffer[i].size;
 80089d2:	6cad      	ldr	r5, [r5, #72]	; 0x48
    for (int i=0; i<nn->map_weights.size; i++)
 80089d4:	461a      	mov	r2, r3
      size_params += nn->map_weights.buffer[i].size;
 80089d6:	f04f 0e1c 	mov.w	lr, #28
 80089da:	3510      	adds	r5, #16
 80089dc:	fb0e fc02 	mul.w	ip, lr, r2
    for (int i=0; i<nn->map_weights.size; i++)
 80089e0:	3201      	adds	r2, #1
      size_params += nn->map_weights.buffer[i].size;
 80089e2:	f855 c00c 	ldr.w	ip, [r5, ip]
    for (int i=0; i<nn->map_weights.size; i++)
 80089e6:	4282      	cmp	r2, r0
      size_params += nn->map_weights.buffer[i].size;
 80089e8:	4463      	add	r3, ip
    for (int i=0; i<nn->map_weights.size; i++)
 80089ea:	dbf7      	blt.n	80089dc <aiPbCmdNNInfo+0x120>
  struct _mempool_attr_desc tensor_desc_w = {"params", size_params, 0};
 80089ec:	4a14      	ldr	r2, [pc, #80]	; (8008a40 <aiPbCmdNNInfo+0x184>)
  struct _encode_tensor_desc tensor_w = {
 80089ee:	a80e      	add	r0, sp, #56	; 0x38
  struct _mempool_attr_desc tensor_desc_w = {"params", size_params, 0};
 80089f0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  struct _encode_tensor_desc tensor_w = {
 80089f4:	2301      	movs	r3, #1
  struct _mempool_attr_desc tensor_desc_w = {"params", size_params, 0};
 80089f6:	2200      	movs	r2, #0
  struct _encode_tensor_desc tensor_w = {
 80089f8:	9013      	str	r0, [sp, #76]	; 0x4c
  aiPbMgrSendResp(req, resp, state);
 80089fa:	4630      	mov	r0, r6
  struct _encode_tensor_desc tensor_w = {
 80089fc:	9312      	str	r3, [sp, #72]	; 0x48
  resp->payload.minfo.params.funcs.encode = encode_tensor_desc;
 80089fe:	e9c4 3142 	strd	r3, r1, [r4, #264]	; 0x108
  resp->payload.minfo.params.arg = (void *)&tensor_w;
 8008a02:	ab11      	add	r3, sp, #68	; 0x44
  aiPbMgrSendResp(req, resp, state);
 8008a04:	4621      	mov	r1, r4
  resp->payload.minfo.params.arg = (void *)&tensor_w;
 8008a06:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
  struct _encode_tensor_desc tensor_w = {
 8008a0a:	e9cd 2710 	strd	r2, r7, [sp, #64]	; 0x40
  aiPbMgrSendResp(req, resp, state);
 8008a0e:	f7ff f87d 	bl	8007b0c <aiPbMgrSendResp>
        ctx->inputs_in_activations, ctx->outputs_in_activations);
  else
    aiPbMgrSendAck(req, resp, EnumState_S_ERROR,
        EnumError_E_INVALID_PARAM, EnumError_E_INVALID_PARAM);
}
 8008a12:	b01c      	add	sp, #112	; 0x70
 8008a14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  ai_size size_acts = 0;
 8008a18:	463b      	mov	r3, r7
 8008a1a:	e7c7      	b.n	80089ac <aiPbCmdNNInfo+0xf0>
  ai_size size_params = 0;
 8008a1c:	4603      	mov	r3, r0
 8008a1e:	e7e5      	b.n	80089ec <aiPbCmdNNInfo+0x130>
    aiPbMgrSendAck(req, resp, EnumState_S_ERROR,
 8008a20:	2304      	movs	r3, #4
 8008a22:	4621      	mov	r1, r4
 8008a24:	4630      	mov	r0, r6
 8008a26:	461a      	mov	r2, r3
 8008a28:	9300      	str	r3, [sp, #0]
 8008a2a:	f7ff f8c3 	bl	8007bb4 <aiPbMgrSendAck>
}
 8008a2e:	e7f0      	b.n	8008a12 <aiPbCmdNNInfo+0x156>
 8008a30:	0800853d 	.word	0x0800853d
 8008a34:	08007aa5 	.word	0x08007aa5
 8008a38:	0801576a 	.word	0x0801576a
 8008a3c:	08008591 	.word	0x08008591
 8008a40:	0801576f 	.word	0x0801576f

08008a44 <_print_debug>:
{
 8008a44:	b40e      	push	{r1, r2, r3}
 8008a46:	b517      	push	{r0, r1, r2, r4, lr}
  if (!debug)
 8008a48:	b178      	cbz	r0, 8008a6a <_print_debug+0x26>
  s = LC_VSNPRINT(_print_buffer, _PRINT_BUFFER_SIZE, fmt, ap);
 8008a4a:	4c0f      	ldr	r4, [pc, #60]	; (8008a88 <_print_debug+0x44>)
  va_start(ap, fmt);
 8008a4c:	ab06      	add	r3, sp, #24
  s = LC_VSNPRINT(_print_buffer, _PRINT_BUFFER_SIZE, fmt, ap);
 8008a4e:	2150      	movs	r1, #80	; 0x50
 8008a50:	9a05      	ldr	r2, [sp, #20]
 8008a52:	4620      	mov	r0, r4
  va_start(ap, fmt);
 8008a54:	9301      	str	r3, [sp, #4]
  s = LC_VSNPRINT(_print_buffer, _PRINT_BUFFER_SIZE, fmt, ap);
 8008a56:	f7ff fbcf 	bl	80081f8 <lc_vsnprint>
      _print_buffer[s] = 0;
 8008a5a:	2100      	movs	r1, #0
 8008a5c:	1823      	adds	r3, r4, r0
  while (s) {
 8008a5e:	b948      	cbnz	r0, 8008a74 <_print_debug+0x30>
  aiPbMgrSendLogV2(EnumState_S_WAITING, 1, &_print_buffer[0]);
 8008a60:	2101      	movs	r1, #1
 8008a62:	4a09      	ldr	r2, [pc, #36]	; (8008a88 <_print_debug+0x44>)
 8008a64:	4608      	mov	r0, r1
 8008a66:	f7ff f8c5 	bl	8007bf4 <aiPbMgrSendLogV2>
}
 8008a6a:	b003      	add	sp, #12
 8008a6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a70:	b003      	add	sp, #12
 8008a72:	4770      	bx	lr
    if ((_print_buffer[s] == '\n') || (_print_buffer[s] == '\r'))
 8008a74:	781a      	ldrb	r2, [r3, #0]
 8008a76:	2a0a      	cmp	r2, #10
 8008a78:	d001      	beq.n	8008a7e <_print_debug+0x3a>
 8008a7a:	2a0d      	cmp	r2, #13
 8008a7c:	d100      	bne.n	8008a80 <_print_debug+0x3c>
      _print_buffer[s] = 0;
 8008a7e:	7019      	strb	r1, [r3, #0]
    s--;
 8008a80:	3801      	subs	r0, #1
 8008a82:	3b01      	subs	r3, #1
 8008a84:	e7eb      	b.n	8008a5e <_print_debug+0x1a>
 8008a86:	bf00      	nop
 8008a88:	240019f0 	.word	0x240019f0

08008a8c <aiPbCmdNNRun>:

void aiPbCmdNNRun(const reqMsg *req, respMsg *resp, void *param)
{
 8008a8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a90:	4605      	mov	r5, r0
 8008a92:	460e      	mov	r6, r1
  ai_buffer *ai_output;

  UNUSED(param);

  /* 0 - Check if requested c-name model is available -------------- */
  ctx = aiExecCtx(req->name, -1);
 8008a94:	300c      	adds	r0, #12
 8008a96:	f04f 31ff 	mov.w	r1, #4294967295
{
 8008a9a:	ed2d 8b02 	vpush	{d8}
 8008a9e:	b0a1      	sub	sp, #132	; 0x84
  ctx = aiExecCtx(req->name, -1);
 8008aa0:	f7ff fdde 	bl	8008660 <aiExecCtx>
  if (!ctx) {
 8008aa4:	4604      	mov	r4, r0
 8008aa6:	b910      	cbnz	r0, 8008aae <aiPbCmdNNRun+0x22>
    aiPbMgrSendAck(req, resp, EnumState_S_ERROR,
 8008aa8:	2304      	movs	r3, #4

  batch = ai_mnetwork_run(ctx->handle, ai_input, ai_output);
  if (batch != 1) {
    aiLogErr(ai_mnetwork_get_error(ctx->handle),
        "ai_mnetwork_run");
    aiPbMgrSendAck(req, resp, EnumState_S_ERROR,
 8008aaa:	9300      	str	r3, [sp, #0]
 8008aac:	e099      	b.n	8008be2 <aiPbCmdNNRun+0x156>
  ctx->debug = req->param & EnumRunParam_P_RUN_CONF_DEBUG?true:false;
 8008aae:	68ab      	ldr	r3, [r5, #8]
  net_obs_ctx.no_data = true;
 8008ab0:	2101      	movs	r1, #1
 8008ab2:	4a9b      	ldr	r2, [pc, #620]	; (8008d20 <aiPbCmdNNRun+0x294>)
  net_obs_ctx.tcom = 0ULL;
 8008ab4:	f04f 0800 	mov.w	r8, #0
  net_obs_ctx.is_enabled = false;
 8008ab8:	f013 0702 	ands.w	r7, r3, #2
  net_obs_ctx.tcom = 0ULL;
 8008abc:	f04f 0900 	mov.w	r9, #0
  net_obs_ctx.no_data = true;
 8008ac0:	7511      	strb	r1, [r2, #20]
  ctx->debug = req->param & EnumRunParam_P_RUN_CONF_DEBUG?true:false;
 8008ac2:	f3c3 2000 	ubfx	r0, r3, #8, #1
  net_obs_ctx.is_enabled = false;
 8008ac6:	bf18      	it	ne
 8008ac8:	460f      	movne	r7, r1
  ctx->obs_ctx = &net_obs_ctx;
 8008aca:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
  ctx->debug = req->param & EnumRunParam_P_RUN_CONF_DEBUG?true:false;
 8008ace:	f884 0082 	strb.w	r0, [r4, #130]	; 0x82
  net_obs_ctx.is_enabled = false;
 8008ad2:	7017      	strb	r7, [r2, #0]
  if ((req->param & EnumRunParam_P_RUN_MODE_PER_LAYER_WITH_DATA) ==
 8008ad4:	075f      	lsls	r7, r3, #29
  net_obs_ctx.n_cb_in  = 0;
 8008ad6:	f04f 0700 	mov.w	r7, #0
    net_obs_ctx.is_enabled = true;
 8008ada:	bf44      	itt	mi
 8008adc:	7011      	strbmi	r1, [r2, #0]
    net_obs_ctx.no_data = false;
 8008ade:	2100      	movmi	r1, #0
  net_obs_ctx.tcom = 0ULL;
 8008ae0:	e9c2 8906 	strd	r8, r9, [r2, #24]
    net_obs_ctx.no_data = false;
 8008ae4:	bf48      	it	mi
 8008ae6:	7511      	strbmi	r1, [r2, #20]
  PB_LC_PRINT(ctx->debug, "RUN: Waiting data.. opt=0x%x, param=0x%x\r\n", req->opt, req->param);
 8008ae8:	498e      	ldr	r1, [pc, #568]	; (8008d24 <aiPbCmdNNRun+0x298>)
  net_obs_ctx.tnodes = 0ULL;
 8008aea:	e9c2 8908 	strd	r8, r9, [r2, #32]
  net_obs_ctx.n_cb_out = 0;
 8008aee:	e9c2 7701 	strd	r7, r7, [r2, #4]
  bool first_only = req->param & EnumRunParam_P_RUN_CONF_SAME_VALUE?true:false;
 8008af2:	f3c3 2240 	ubfx	r2, r3, #9, #1
 8008af6:	9206      	str	r2, [sp, #24]
  bool direct_write = req->param & EnumRunParam_P_RUN_CONF_DIRECT_WRITE?true:false;
 8008af8:	f3c3 2280 	ubfx	r2, r3, #10, #1
 8008afc:	9205      	str	r2, [sp, #20]
  PB_LC_PRINT(ctx->debug, "RUN: Waiting data.. opt=0x%x, param=0x%x\r\n", req->opt, req->param);
 8008afe:	6cea      	ldr	r2, [r5, #76]	; 0x4c
 8008b00:	f7ff ffa0 	bl	8008a44 <_print_debug>
  ai_output = ctx->report.outputs;
 8008b04:	e9d4 a30e 	ldrd	sl, r3, [r4, #56]	; 0x38
      _get_buffer_size(&ai_input[0]), EnumError_E_NONE);
 8008b08:	4650      	mov	r0, sl
 8008b0a:	46d0      	mov	r8, sl
  ai_output = ctx->report.outputs;
 8008b0c:	9307      	str	r3, [sp, #28]
      _get_buffer_size(&ai_input[0]), EnumError_E_NONE);
 8008b0e:	f7ff fd65 	bl	80085dc <_get_buffer_size>
  aiPbMgrSendAck(req, resp, EnumState_S_WAITING,
 8008b12:	2201      	movs	r2, #1
      _get_buffer_size(&ai_input[0]), EnumError_E_NONE);
 8008b14:	4603      	mov	r3, r0
  aiPbMgrSendAck(req, resp, EnumState_S_WAITING,
 8008b16:	4631      	mov	r1, r6
 8008b18:	4628      	mov	r0, r5
 8008b1a:	9700      	str	r7, [sp, #0]
 8008b1c:	f7ff f84a 	bl	8007bb4 <aiPbMgrSendAck>
  for (int i = 0; i < ctx->report.n_inputs; i++) {
 8008b20:	f8b4 9034 	ldrh.w	r9, [r4, #52]	; 0x34
 8008b24:	45b9      	cmp	r9, r7
 8008b26:	dc2b      	bgt.n	8008b80 <aiPbCmdNNRun+0xf4>
  struct ai_network_user_obs_ctx  *obs_ctx = ctx->obs_ctx;
 8008b28:	f8d4 7084 	ldr.w	r7, [r4, #132]	; 0x84
  if (obs_ctx->is_enabled == false)
 8008b2c:	783b      	ldrb	r3, [r7, #0]
 8008b2e:	b18b      	cbz	r3, 8008b54 <aiPbCmdNNRun+0xc8>
  if (ctx->handle == AI_HANDLE_NULL)
 8008b30:	6820      	ldr	r0, [r4, #0]
 8008b32:	b178      	cbz	r0, 8008b54 <aiPbCmdNNRun+0xc8>
  ai_mnetwork_get_private_handle(ctx->handle,
 8008b34:	a90e      	add	r1, sp, #56	; 0x38
 8008b36:	aa12      	add	r2, sp, #72	; 0x48
  obs_ctx->cresp = cresp;
 8008b38:	e9c7 5603 	strd	r5, r6, [r7, #12]
  ai_mnetwork_get_private_handle(ctx->handle,
 8008b3c:	f000 fb02 	bl	8009144 <ai_mnetwork_get_private_handle>
  obs_ctx->plt_ctx.on_node = aiOnExecNode_cb;
 8008b40:	4b79      	ldr	r3, [pc, #484]	; (8008d28 <aiPbCmdNNRun+0x29c>)
  res = ai_platform_observer_register_s(net_hdl, &obs_ctx->plt_ctx);
 8008b42:	f107 0128 	add.w	r1, r7, #40	; 0x28
  obs_ctx->plt_ctx.cookie = (ai_handle)ctx;
 8008b46:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
  obs_ctx->plt_ctx.flags = AI_OBSERVER_PRE_EVT | AI_OBSERVER_POST_EVT;
 8008b4a:	2306      	movs	r3, #6
  res = ai_platform_observer_register_s(net_hdl, &obs_ctx->plt_ctx);
 8008b4c:	980e      	ldr	r0, [sp, #56]	; 0x38
  obs_ctx->plt_ctx.flags = AI_OBSERVER_PRE_EVT | AI_OBSERVER_POST_EVT;
 8008b4e:	633b      	str	r3, [r7, #48]	; 0x30
  res = ai_platform_observer_register_s(net_hdl, &obs_ctx->plt_ctx);
 8008b50:	f004 fb74 	bl	800d23c <ai_platform_observer_register_s>
  PB_LC_PRINT(ctx->debug, "RUN: processing\r\n");
 8008b54:	4975      	ldr	r1, [pc, #468]	; (8008d2c <aiPbCmdNNRun+0x2a0>)
 8008b56:	f894 0082 	ldrb.w	r0, [r4, #130]	; 0x82
 8008b5a:	f7ff ff73 	bl	8008a44 <_print_debug>
  cyclesCounterStart();
 8008b5e:	f7ff fd4b 	bl	80085f8 <cyclesCounterStart>
  batch = ai_mnetwork_run(ctx->handle, ai_input, ai_output);
 8008b62:	9a07      	ldr	r2, [sp, #28]
 8008b64:	4651      	mov	r1, sl
 8008b66:	6820      	ldr	r0, [r4, #0]
 8008b68:	f000 fadb 	bl	8009122 <ai_mnetwork_run>
  if (batch != 1) {
 8008b6c:	2801      	cmp	r0, #1
 8008b6e:	d073      	beq.n	8008c58 <aiPbCmdNNRun+0x1cc>
    aiLogErr(ai_mnetwork_get_error(ctx->handle),
 8008b70:	6820      	ldr	r0, [r4, #0]
 8008b72:	f000 faaa 	bl	80090ca <ai_mnetwork_get_error>
 8008b76:	496e      	ldr	r1, [pc, #440]	; (8008d30 <aiPbCmdNNRun+0x2a4>)
 8008b78:	f7ff f8ec 	bl	8007d54 <aiLogErr>
    aiPbMgrSendAck(req, resp, EnumState_S_ERROR,
 8008b7c:	230a      	movs	r3, #10
 8008b7e:	e794      	b.n	8008aaa <aiPbCmdNNRun+0x1e>
    if ((i + 1) == ctx->report.n_inputs)
 8008b80:	3701      	adds	r7, #1
  aiPbData data = { 0, _get_buffer_size(buffer), (uintptr_t)buffer->data, 0};
 8008b82:	4640      	mov	r0, r8
      state = EnumState_S_PROCESSING;
 8008b84:	454f      	cmp	r7, r9
 8008b86:	bf14      	ite	ne
 8008b88:	2301      	movne	r3, #1
 8008b8a:	2302      	moveq	r3, #2
 8008b8c:	ee08 3a10 	vmov	s16, r3
  aiPbData data = { 0, _get_buffer_size(buffer), (uintptr_t)buffer->data, 0};
 8008b90:	2300      	movs	r3, #0
 8008b92:	9312      	str	r3, [sp, #72]	; 0x48
 8008b94:	f7ff fd22 	bl	80085dc <_get_buffer_size>
 8008b98:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008b9c:	9013      	str	r0, [sp, #76]	; 0x4c
 8008b9e:	9314      	str	r3, [sp, #80]	; 0x50
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	9315      	str	r3, [sp, #84]	; 0x54
  if ((first_only) || (direct_write))
 8008ba4:	9b06      	ldr	r3, [sp, #24]
 8008ba6:	b90b      	cbnz	r3, 8008bac <aiPbCmdNNRun+0x120>
 8008ba8:	9b05      	ldr	r3, [sp, #20]
 8008baa:	b183      	cbz	r3, 8008bce <aiPbCmdNNRun+0x142>
    data.size = _get_element_size(buffer);
 8008bac:	f8d8 1000 	ldr.w	r1, [r8]
  if (is_binary)
 8008bb0:	4a60      	ldr	r2, [pc, #384]	; (8008d34 <aiPbCmdNNRun+0x2a8>)
 8008bb2:	f021 437e 	bic.w	r3, r1, #4261412864	; 0xfe000000
 8008bb6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008bba:	4293      	cmp	r3, r2
 8008bbc:	d01b      	beq.n	8008bf6 <aiPbCmdNNRun+0x16a>
  return (size_t)AI_BUFFER_BYTE_SIZE(1, buffer->format);
 8008bbe:	2001      	movs	r0, #1
 8008bc0:	f002 f92e 	bl	800ae20 <ai_buffer_get_byte_size>
  if (direct_write)
 8008bc4:	9b05      	ldr	r3, [sp, #20]
    data.size = _get_element_size(buffer);
 8008bc6:	9013      	str	r0, [sp, #76]	; 0x4c
  if (direct_write)
 8008bc8:	b10b      	cbz	r3, 8008bce <aiPbCmdNNRun+0x142>
    data.addr = (uintptr_t)&temp;
 8008bca:	ab0e      	add	r3, sp, #56	; 0x38
 8008bcc:	9314      	str	r3, [sp, #80]	; 0x50
  aiPbMgrReceiveData(&data);
 8008bce:	a812      	add	r0, sp, #72	; 0x48
 8008bd0:	f7ff f848 	bl	8007c64 <aiPbMgrReceiveData>
  if (data.nb_read != data.size) {
 8008bd4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008bd6:	f8dd 904c 	ldr.w	r9, [sp, #76]	; 0x4c
 8008bda:	454b      	cmp	r3, r9
 8008bdc:	d00d      	beq.n	8008bfa <aiPbCmdNNRun+0x16e>
    aiPbMgrSendAck(req, resp, EnumState_S_ERROR,
 8008bde:	2201      	movs	r2, #1
 8008be0:	9200      	str	r2, [sp, #0]
 8008be2:	2204      	movs	r2, #4
 8008be4:	4631      	mov	r1, r6
 8008be6:	4628      	mov	r0, r5
 8008be8:	f7fe ffe4 	bl	8007bb4 <aiPbMgrSendAck>
    }
    send_ai_io_tensor(req, resp, state, &ai_output[i], flags, 0.0, 0);
  }

  aiObserverUnbind(ctx);
}
 8008bec:	b021      	add	sp, #132	; 0x84
 8008bee:	ecbd 8b02 	vpop	{d8}
 8008bf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return 4;
 8008bf6:	2004      	movs	r0, #4
 8008bf8:	e7e4      	b.n	8008bc4 <aiPbCmdNNRun+0x138>
  if ((first_only) && (!direct_write))/* broadcast the value */
 8008bfa:	9b06      	ldr	r3, [sp, #24]
 8008bfc:	b96b      	cbnz	r3, 8008c1a <aiPbCmdNNRun+0x18e>
    aiPbMgrSendAck(req, resp, state, data.size, EnumError_E_NONE);
 8008bfe:	2300      	movs	r3, #0
 8008c00:	ee18 2a10 	vmov	r2, s16
 8008c04:	4631      	mov	r1, r6
 8008c06:	4628      	mov	r0, r5
 8008c08:	9300      	str	r3, [sp, #0]
 8008c0a:	f108 081c 	add.w	r8, r8, #28
 8008c0e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008c10:	f7fe ffd0 	bl	8007bb4 <aiPbMgrSendAck>
      aiPbMgrWaitAck();
 8008c14:	f7fe ffd8 	bl	8007bc8 <aiPbMgrWaitAck>
    if (res != true)
 8008c18:	e782      	b.n	8008b20 <aiPbCmdNNRun+0x94>
  if ((first_only) && (!direct_write))/* broadcast the value */
 8008c1a:	9b05      	ldr	r3, [sp, #20]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d1ee      	bne.n	8008bfe <aiPbCmdNNRun+0x172>
      const uintptr_t r_ptr = (uintptr_t)buffer->data;
 8008c20:	f8d8 1004 	ldr.w	r1, [r8, #4]
      for (size_t pos = 1; pos <  _get_buffer_size(buffer) / el_s; pos++)
 8008c24:	f04f 0b01 	mov.w	fp, #1
      uintptr_t w_ptr = r_ptr + el_s;
 8008c28:	eb01 0309 	add.w	r3, r1, r9
      for (size_t pos = 1; pos <  _get_buffer_size(buffer) / el_s; pos++)
 8008c2c:	4640      	mov	r0, r8
 8008c2e:	e9cd 1308 	strd	r1, r3, [sp, #32]
 8008c32:	f7ff fcd3 	bl	80085dc <_get_buffer_size>
 8008c36:	fbb0 f0f9 	udiv	r0, r0, r9
 8008c3a:	4583      	cmp	fp, r0
 8008c3c:	e9dd 1308 	ldrd	r1, r3, [sp, #32]
 8008c40:	d2dd      	bcs.n	8008bfe <aiPbCmdNNRun+0x172>
        memcpy((void *)w_ptr, (void *)r_ptr, el_s);
 8008c42:	4618      	mov	r0, r3
 8008c44:	464a      	mov	r2, r9
 8008c46:	9108      	str	r1, [sp, #32]
 8008c48:	f009 fab2 	bl	80121b0 <memcpy>
 8008c4c:	4603      	mov	r3, r0
      for (size_t pos = 1; pos <  _get_buffer_size(buffer) / el_s; pos++)
 8008c4e:	f10b 0b01 	add.w	fp, fp, #1
 8008c52:	9908      	ldr	r1, [sp, #32]
        w_ptr += el_s;
 8008c54:	444b      	add	r3, r9
      for (size_t pos = 1; pos <  _get_buffer_size(buffer) / el_s; pos++)
 8008c56:	e7e9      	b.n	8008c2c <aiPbCmdNNRun+0x1a0>
  tend = cyclesCounterEnd();
 8008c58:	f7ff fcde 	bl	8008618 <cyclesCounterEnd>
  aiOpPerf perf = {dwtCyclesToFloatMs(tend), 0,  2, (uint32_t *)&tend};
 8008c5c:	2700      	movs	r7, #0
      flags |= EnumTensorFlag_TENSOR_FLAG_NO_DATA;
 8008c5e:	f240 2902 	movw	r9, #514	; 0x202
    send_ai_io_tensor(req, resp, state, &ai_output[i], flags, 0.0, 0);
 8008c62:	ed9f 8a35 	vldr	s16, [pc, #212]	; 8008d38 <aiPbCmdNNRun+0x2ac>
  tend = cyclesCounterEnd();
 8008c66:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  PB_LC_PRINT(ctx->debug, "RUN: processing done\r\n");
 8008c6a:	4934      	ldr	r1, [pc, #208]	; (8008d3c <aiPbCmdNNRun+0x2b0>)
 8008c6c:	f894 0082 	ldrb.w	r0, [r4, #130]	; 0x82
 8008c70:	f7ff fee8 	bl	8008a44 <_print_debug>
  tend = aiObserverAdjustInferenceTime(ctx, tend);
 8008c74:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
  tend = obs_ctx->tcom + obs_ctx->tnodes + tend;
 8008c78:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8008c7c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008c80:	1880      	adds	r0, r0, r2
 8008c82:	eb41 0103 	adc.w	r1, r1, r3
 8008c86:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008c88:	18c0      	adds	r0, r0, r3
 8008c8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008c8c:	eb41 0103 	adc.w	r1, r1, r3
  tend = aiObserverAdjustInferenceTime(ctx, tend);
 8008c90:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  aiOpPerf perf = {dwtCyclesToFloatMs(tend), 0,  2, (uint32_t *)&tend};
 8008c94:	f7ff fb36 	bl	8008304 <dwtCyclesToFloatMs>
 8008c98:	ab0c      	add	r3, sp, #48	; 0x30
 8008c9a:	2202      	movs	r2, #2
  aiPbMgrSendOperator(req, resp, EnumState_S_PROCESSING, ctx->report.model_name, 0, 0, &perf);
 8008c9c:	4631      	mov	r1, r6
  aiOpPerf perf = {dwtCyclesToFloatMs(tend), 0,  2, (uint32_t *)&tend};
 8008c9e:	9311      	str	r3, [sp, #68]	; 0x44
  aiPbMgrSendOperator(req, resp, EnumState_S_PROCESSING, ctx->report.model_name, 0, 0, &perf);
 8008ca0:	ab0e      	add	r3, sp, #56	; 0x38
 8008ca2:	9700      	str	r7, [sp, #0]
 8008ca4:	4628      	mov	r0, r5
  aiOpPerf perf = {dwtCyclesToFloatMs(tend), 0,  2, (uint32_t *)&tend};
 8008ca6:	ed8d 0a0e 	vstr	s0, [sp, #56]	; 0x38
  aiPbMgrSendOperator(req, resp, EnumState_S_PROCESSING, ctx->report.model_name, 0, 0, &perf);
 8008caa:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8008cae:	6863      	ldr	r3, [r4, #4]
  aiOpPerf perf = {dwtCyclesToFloatMs(tend), 0,  2, (uint32_t *)&tend};
 8008cb0:	e9cd 720f 	strd	r7, r2, [sp, #60]	; 0x3c
  aiPbMgrSendOperator(req, resp, EnumState_S_PROCESSING, ctx->report.model_name, 0, 0, &perf);
 8008cb4:	f7fe fff0 	bl	8007c98 <aiPbMgrSendOperator>
  PB_LC_PRINT(ctx->debug, "RUN: send output tensors\r\n");
 8008cb8:	4921      	ldr	r1, [pc, #132]	; (8008d40 <aiPbCmdNNRun+0x2b4>)
 8008cba:	f894 0082 	ldrb.w	r0, [r4, #130]	; 0x82
 8008cbe:	f7ff fec1 	bl	8008a44 <_print_debug>
  for (int i = 0; i < ctx->report.n_outputs; i++) {
 8008cc2:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8008cc6:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8008cc8:	42ba      	cmp	r2, r7
 8008cca:	dc0f      	bgt.n	8008cec <aiPbCmdNNRun+0x260>
  struct ai_network_user_obs_ctx  *obs_ctx = ctx->obs_ctx;
 8008ccc:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
  if (obs_ctx->is_enabled == false)
 8008cd0:	782b      	ldrb	r3, [r5, #0]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d08a      	beq.n	8008bec <aiPbCmdNNRun+0x160>
  ai_mnetwork_get_private_handle(ctx->handle, &net_hdl, &pparams);
 8008cd6:	a90b      	add	r1, sp, #44	; 0x2c
 8008cd8:	aa12      	add	r2, sp, #72	; 0x48
 8008cda:	6820      	ldr	r0, [r4, #0]
 8008cdc:	f000 fa32 	bl	8009144 <ai_mnetwork_get_private_handle>
  ai_platform_observer_unregister_s(net_hdl, &obs_ctx->plt_ctx);
 8008ce0:	f105 0128 	add.w	r1, r5, #40	; 0x28
 8008ce4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8008ce6:	f004 fb6b 	bl	800d3c0 <ai_platform_observer_unregister_s>
  return 0;
 8008cea:	e77f      	b.n	8008bec <aiPbCmdNNRun+0x160>
    if (req->param & EnumRunParam_P_RUN_MODE_PERF) {
 8008cec:	68ab      	ldr	r3, [r5, #8]
    if ((i + 1) == ctx->report.n_outputs) {
 8008cee:	3701      	adds	r7, #1
    send_ai_io_tensor(req, resp, state, &ai_output[i], flags, 0.0, 0);
 8008cf0:	2100      	movs	r1, #0
 8008cf2:	eeb0 0a48 	vmov.f32	s0, s16
      flags |= EnumTensorFlag_TENSOR_FLAG_NO_DATA;
 8008cf6:	f013 0f08 	tst.w	r3, #8
    send_ai_io_tensor(req, resp, state, &ai_output[i], flags, 0.0, 0);
 8008cfa:	4628      	mov	r0, r5
      flags |= EnumTensorFlag_TENSOR_FLAG_NO_DATA;
 8008cfc:	bf0c      	ite	eq
 8008cfe:	2302      	moveq	r3, #2
 8008d00:	464b      	movne	r3, r9
    if ((i + 1) == ctx->report.n_outputs) {
 8008d02:	4297      	cmp	r7, r2
      flags |= EnumTensorFlag_TENSOR_FLAG_LAST;
 8008d04:	bf06      	itte	eq
 8008d06:	f443 7380 	orreq.w	r3, r3, #256	; 0x100
      state = EnumState_S_DONE;
 8008d0a:	2203      	moveq	r2, #3
    EnumState state = EnumState_S_PROCESSING;
 8008d0c:	2202      	movne	r2, #2
    send_ai_io_tensor(req, resp, state, &ai_output[i], flags, 0.0, 0);
 8008d0e:	e9cd 3100 	strd	r3, r1, [sp]
 8008d12:	4643      	mov	r3, r8
 8008d14:	4631      	mov	r1, r6
 8008d16:	f108 081c 	add.w	r8, r8, #28
 8008d1a:	f7ff fcc9 	bl	80086b0 <send_ai_io_tensor.isra.0>
  for (int i = 0; i < ctx->report.n_outputs; i++) {
 8008d1e:	e7d2      	b.n	8008cc6 <aiPbCmdNNRun+0x23a>
 8008d20:	24001ac8 	.word	0x24001ac8
 8008d24:	08015776 	.word	0x08015776
 8008d28:	08008721 	.word	0x08008721
 8008d2c:	080157a1 	.word	0x080157a1
 8008d30:	080157b3 	.word	0x080157b3
 8008d34:	000400c0 	.word	0x000400c0
 8008d38:	00000000 	.word	0x00000000
 8008d3c:	080157c3 	.word	0x080157c3
 8008d40:	080157da 	.word	0x080157da

08008d44 <aiValidationInit>:
 * Exported/Public functions
 * -----------------------------------------------------------------------------
 */

int aiValidationInit(void)
{
 8008d44:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  LC_PRINT("\r\n#\r\n");
 8008d46:	4c20      	ldr	r4, [pc, #128]	; (8008dc8 <aiValidationInit+0x84>)
  DWT->CYCCNT = 0; /* Clear DWT cycle counter */
 8008d48:	2500      	movs	r5, #0
 8008d4a:	4e20      	ldr	r6, [pc, #128]	; (8008dcc <aiValidationInit+0x88>)
 8008d4c:	f104 008b 	add.w	r0, r4, #139	; 0x8b
 8008d50:	f7ff fa40 	bl	80081d4 <lc_print>
  LC_PRINT("# %s %d.%d\r\n", _APP_NAME_ , _APP_VERSION_MAJOR_, _APP_VERSION_MINOR_);
 8008d54:	2300      	movs	r3, #0
 8008d56:	2207      	movs	r2, #7
 8008d58:	f104 0191 	add.w	r1, r4, #145	; 0x91
 8008d5c:	f104 009f 	add.w	r0, r4, #159	; 0x9f
 8008d60:	f7ff fa38 	bl	80081d4 <lc_print>
  LC_PRINT("#\r\n");
 8008d64:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 8008d68:	f7ff fa34 	bl	80081d4 <lc_print>

  systemSettingLog();
 8008d6c:	f7ff fb1c 	bl	80083a8 <systemSettingLog>

  crcIpInit();
 8008d70:	f7ff fa7a 	bl	8008268 <crcIpInit>
  HAL_Delay(100);
 8008d74:	2064      	movs	r0, #100	; 0x64
  dwtIpInit();
 8008d76:	f7ff fb8f 	bl	8008498 <dwtIpInit>
  DWT->CYCCNT = 0; /* Clear DWT cycle counter */
 8008d7a:	6075      	str	r5, [r6, #4]
  HAL_Delay(100);
 8008d7c:	f7f9 f9a8 	bl	80020d0 <HAL_Delay>
  return DWT->CYCCNT;
 8008d80:	6870      	ldr	r0, [r6, #4]
  dwtCyclesToTime(st/100, &t);
 8008d82:	2664      	movs	r6, #100	; 0x64
 8008d84:	466a      	mov	r2, sp
 8008d86:	4629      	mov	r1, r5
 8008d88:	fbb0 f0f6 	udiv	r0, r0, r6
 8008d8c:	f7ff fa7e 	bl	800828c <dwtCyclesToTime>
  LC_PRINT(" Timestamp    : SysTick + DWT (HAL_Delay(1)=%d.%03d ms)\r\n",
 8008d90:	9a03      	ldr	r2, [sp, #12]
 8008d92:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
 8008d96:	e9dd 1301 	ldrd	r1, r3, [sp, #4]
 8008d9a:	fb06 3101 	mla	r1, r6, r1, r3
 8008d9e:	f7ff fa19 	bl	80081d4 <lc_print>
  dwtCyclesToTime(UINT32_MAX, &t);
 8008da2:	466a      	mov	r2, sp
 8008da4:	2100      	movs	r1, #0
 8008da6:	f04f 30ff 	mov.w	r0, #4294967295
 8008daa:	f7ff fa6f 	bl	800828c <dwtCyclesToTime>
  cyclesCount.dwt_max = t.s * 1000 + t.ms;
 8008dae:	9a01      	ldr	r2, [sp, #4]
 8008db0:	9b02      	ldr	r3, [sp, #8]
 8008db2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
  cyclesCounterInit();

  return 0;
}
 8008db6:	4628      	mov	r0, r5
 8008db8:	fb01 3302 	mla	r3, r1, r2, r3
 8008dbc:	4a04      	ldr	r2, [pc, #16]	; (8008dd0 <aiValidationInit+0x8c>)
 8008dbe:	6013      	str	r3, [r2, #0]
  dwtIpInit();
 8008dc0:	f7ff fb6a 	bl	8008498 <dwtIpInit>
 8008dc4:	b004      	add	sp, #16
 8008dc6:	bd70      	pop	{r4, r5, r6, pc}
 8008dc8:	0801576a 	.word	0x0801576a
 8008dcc:	e0001000 	.word	0xe0001000
 8008dd0:	240019c8 	.word	0x240019c8

08008dd4 <aiValidationProcess>:

int aiValidationProcess(void)
{
 8008dd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    net_exec_ctx[idx].handle = AI_HANDLE_NULL;
 8008dd8:	2700      	movs	r7, #0
 8008dda:	4c65      	ldr	r4, [pc, #404]	; (8008f70 <aiValidationProcess+0x19c>)
  int res = -1;
 8008ddc:	f04f 35ff 	mov.w	r5, #4294967295
      LC_PRINT("\r\nFound network \"%s\"\r\n", nn_name);
 8008de0:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 8008fac <aiValidationProcess+0x1d8>
      ctx->report.outputs[i].data = AI_HANDLE_PTR(data_outs[i]);
 8008de4:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 8008fb0 <aiValidationProcess+0x1dc>
  aiPlatformVersion();
 8008de8:	f7fe ff9e 	bl	8007d28 <aiPlatformVersion>
  LC_PRINT("Discovering the network(s)...\r\n");
 8008dec:	4861      	ldr	r0, [pc, #388]	; (8008f74 <aiValidationProcess+0x1a0>)
    net_exec_ctx[idx].handle = AI_HANDLE_NULL;
 8008dee:	f844 7b04 	str.w	r7, [r4], #4
  LC_PRINT("Discovering the network(s)...\r\n");
 8008df2:	f7ff f9ef 	bl	80081d4 <lc_print>
    nn_name = ai_mnetwork_find(NULL, idx);
 8008df6:	4639      	mov	r1, r7
 8008df8:	2000      	movs	r0, #0
 8008dfa:	f000 f909 	bl	8009010 <ai_mnetwork_find>
    if (nn_name) {
 8008dfe:	4606      	mov	r6, r0
 8008e00:	b1a8      	cbz	r0, 8008e2e <aiValidationProcess+0x5a>
      LC_PRINT("\r\nFound network \"%s\"\r\n", nn_name);
 8008e02:	4601      	mov	r1, r0
 8008e04:	4640      	mov	r0, r8
 8008e06:	f7ff f9e5 	bl	80081d4 <lc_print>
  LC_PRINT("Creating the network \"%s\"..\r\n", nn_name);
 8008e0a:	4631      	mov	r1, r6
 8008e0c:	485a      	ldr	r0, [pc, #360]	; (8008f78 <aiValidationProcess+0x1a4>)
 8008e0e:	f7ff f9e1 	bl	80081d4 <lc_print>
  err = ai_mnetwork_create(nn_name, &ctx->handle, NULL);
 8008e12:	2200      	movs	r2, #0
 8008e14:	1f21      	subs	r1, r4, #4
 8008e16:	4630      	mov	r0, r6
 8008e18:	f000 f908 	bl	800902c <ai_mnetwork_create>
  if (err.type) {
 8008e1c:	f010 05ff 	ands.w	r5, r0, #255	; 0xff
 8008e20:	d016      	beq.n	8008e50 <aiValidationProcess+0x7c>
        nn_name = NULL;
 8008e22:	2600      	movs	r6, #0
    return -1;
 8008e24:	f04f 35ff 	mov.w	r5, #4294967295
    aiLogErr(err, "ai_mnetwork_create");
 8008e28:	4954      	ldr	r1, [pc, #336]	; (8008f7c <aiValidationProcess+0x1a8>)
 8008e2a:	f7fe ff93 	bl	8007d54 <aiLogErr>
    idx++;
 8008e2e:	3701      	adds	r7, #1
  } while (nn_name);
 8008e30:	3488      	adds	r4, #136	; 0x88
 8008e32:	2e00      	cmp	r6, #0
 8008e34:	d1df      	bne.n	8008df6 <aiValidationProcess+0x22>
  int r;

  r = aiInit();
  if (r) {
 8008e36:	2d00      	cmp	r5, #0
 8008e38:	d077      	beq.n	8008f2a <aiValidationProcess+0x156>
    LC_PRINT("\r\nE:  aiInit() r=%d\r\n", r);
 8008e3a:	4851      	ldr	r0, [pc, #324]	; (8008f80 <aiValidationProcess+0x1ac>)
 8008e3c:	4629      	mov	r1, r5
 8008e3e:	f7ff f9c9 	bl	80081d4 <lc_print>
    port_hal_delay(2000);
 8008e42:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8008e46:	f7f9 f943 	bl	80020d0 <HAL_Delay>
  do {
    r = aiPbMgrWaitAndProcess();
  } while (r==0);

  return r;
}
 8008e4a:	4628      	mov	r0, r5
 8008e4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LC_PRINT("Initializing the network\r\n");
 8008e50:	484c      	ldr	r0, [pc, #304]	; (8008f84 <aiValidationProcess+0x1b0>)
 8008e52:	f7ff f9bf 	bl	80081d4 <lc_print>
  if (!ai_mnetwork_get_report(ctx->handle, &ctx->report)) {
 8008e56:	4621      	mov	r1, r4
 8008e58:	f854 0c04 	ldr.w	r0, [r4, #-4]
 8008e5c:	f000 f92a 	bl	80090b4 <ai_mnetwork_get_report>
 8008e60:	4682      	mov	sl, r0
    err = ai_mnetwork_get_error(ctx->handle);
 8008e62:	f854 0c04 	ldr.w	r0, [r4, #-4]
  if (!ai_mnetwork_get_report(ctx->handle, &ctx->report)) {
 8008e66:	f1ba 0f00 	cmp.w	sl, #0
 8008e6a:	d10e      	bne.n	8008e8a <aiValidationProcess+0xb6>
    err = ai_mnetwork_get_error(ctx->handle);
 8008e6c:	f000 f92d 	bl	80090ca <ai_mnetwork_get_error>
    aiLogErr(err, "ai_mnetwork_get_info");
 8008e70:	4945      	ldr	r1, [pc, #276]	; (8008f88 <aiValidationProcess+0x1b4>)
 8008e72:	f7fe ff6f 	bl	8007d54 <aiLogErr>
    ai_mnetwork_destroy(ctx->handle);
 8008e76:	f854 0c04 	ldr.w	r0, [r4, #-4]
 8008e7a:	f000 f905 	bl	8009088 <ai_mnetwork_destroy>
        nn_name = NULL;
 8008e7e:	4656      	mov	r6, sl
    return -2;
 8008e80:	f06f 0501 	mvn.w	r5, #1
    ctx->handle = AI_HANDLE_NULL;
 8008e84:	f844 ac04 	str.w	sl, [r4, #-4]
      if (res)
 8008e88:	e7d1      	b.n	8008e2e <aiValidationProcess+0x5a>
  if (!ai_mnetwork_init(ctx->handle)) {
 8008e8a:	f000 f92b 	bl	80090e4 <ai_mnetwork_init>
 8008e8e:	4682      	mov	sl, r0
 8008e90:	b980      	cbnz	r0, 8008eb4 <aiValidationProcess+0xe0>
    err = ai_mnetwork_get_error(ctx->handle);
 8008e92:	f854 0c04 	ldr.w	r0, [r4, #-4]
        nn_name = NULL;
 8008e96:	4656      	mov	r6, sl
    err = ai_mnetwork_get_error(ctx->handle);
 8008e98:	f000 f917 	bl	80090ca <ai_mnetwork_get_error>
    aiLogErr(err, "ai_mnetwork_init");
 8008e9c:	493b      	ldr	r1, [pc, #236]	; (8008f8c <aiValidationProcess+0x1b8>)
 8008e9e:	f7fe ff59 	bl	8007d54 <aiLogErr>
    ai_mnetwork_destroy(ctx->handle);
 8008ea2:	f854 0c04 	ldr.w	r0, [r4, #-4]
 8008ea6:	f000 f8ef 	bl	8009088 <ai_mnetwork_destroy>
    return -4;
 8008eaa:	f06f 0503 	mvn.w	r5, #3
    ctx->handle = AI_HANDLE_NULL;
 8008eae:	f844 ac04 	str.w	sl, [r4, #-4]
      if (res)
 8008eb2:	e7bc      	b.n	8008e2e <aiValidationProcess+0x5a>
  if (ai_mnetwork_get_report(ctx->handle,
 8008eb4:	4621      	mov	r1, r4
 8008eb6:	f854 0c04 	ldr.w	r0, [r4, #-4]
 8008eba:	f000 f8fb 	bl	80090b4 <ai_mnetwork_get_report>
 8008ebe:	4682      	mov	sl, r0
 8008ec0:	b1b0      	cbz	r0, 8008ef0 <aiValidationProcess+0x11c>
    aiPrintNetworkInfo(&ctx->report);
 8008ec2:	4620      	mov	r0, r4
 8008ec4:	f7ff f860 	bl	8007f88 <aiPrintNetworkInfo>
  for (int i = 0; i < ctx->report.n_inputs; i++) {
 8008ec8:	462b      	mov	r3, r5
  ctx->inputs_in_activations = false;
 8008eca:	f884 507c 	strb.w	r5, [r4, #124]	; 0x7c
    if (!ctx->report.inputs[i].data)
 8008ece:	201c      	movs	r0, #28
  ctx->outputs_in_activations = false;
 8008ed0:	f884 507d 	strb.w	r5, [r4, #125]	; 0x7d
      ctx->inputs_in_activations = true;
 8008ed4:	2501      	movs	r5, #1
      ctx->report.inputs[i].data = AI_HANDLE_PTR(data_ins[i]);
 8008ed6:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 8008fb4 <aiValidationProcess+0x1e0>
  for (int i = 0; i < ctx->report.n_inputs; i++) {
 8008eda:	8e22      	ldrh	r2, [r4, #48]	; 0x30
 8008edc:	4293      	cmp	r3, r2
 8008ede:	db0a      	blt.n	8008ef6 <aiValidationProcess+0x122>
  for (int i = 0; i < ctx->report.n_outputs; i++) {
 8008ee0:	2300      	movs	r3, #0
    if (!ctx->report.outputs[i].data)
 8008ee2:	201c      	movs	r0, #28
      ctx->outputs_in_activations = true;
 8008ee4:	2501      	movs	r5, #1
  for (int i = 0; i < ctx->report.n_outputs; i++) {
 8008ee6:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 8008ee8:	4293      	cmp	r3, r2
 8008eea:	db11      	blt.n	8008f10 <aiValidationProcess+0x13c>
      if (res)
 8008eec:	2500      	movs	r5, #0
 8008eee:	e79e      	b.n	8008e2e <aiValidationProcess+0x5a>
    err = ai_mnetwork_get_error(ctx->handle);
 8008ef0:	f854 0c04 	ldr.w	r0, [r4, #-4]
 8008ef4:	e7ba      	b.n	8008e6c <aiValidationProcess+0x98>
    if (!ctx->report.inputs[i].data)
 8008ef6:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8008ef8:	fb00 2203 	mla	r2, r0, r3, r2
 8008efc:	6851      	ldr	r1, [r2, #4]
 8008efe:	b921      	cbnz	r1, 8008f0a <aiValidationProcess+0x136>
      ctx->report.inputs[i].data = AI_HANDLE_PTR(data_ins[i]);
 8008f00:	f85c 1023 	ldr.w	r1, [ip, r3, lsl #2]
 8008f04:	6051      	str	r1, [r2, #4]
  for (int i = 0; i < ctx->report.n_inputs; i++) {
 8008f06:	3301      	adds	r3, #1
 8008f08:	e7e7      	b.n	8008eda <aiValidationProcess+0x106>
      ctx->inputs_in_activations = true;
 8008f0a:	f884 507c 	strb.w	r5, [r4, #124]	; 0x7c
 8008f0e:	e7fa      	b.n	8008f06 <aiValidationProcess+0x132>
    if (!ctx->report.outputs[i].data)
 8008f10:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008f12:	fb00 2203 	mla	r2, r0, r3, r2
 8008f16:	6851      	ldr	r1, [r2, #4]
 8008f18:	b921      	cbnz	r1, 8008f24 <aiValidationProcess+0x150>
      ctx->report.outputs[i].data = AI_HANDLE_PTR(data_outs[i]);
 8008f1a:	f859 1023 	ldr.w	r1, [r9, r3, lsl #2]
 8008f1e:	6051      	str	r1, [r2, #4]
  for (int i = 0; i < ctx->report.n_outputs; i++) {
 8008f20:	3301      	adds	r3, #1
 8008f22:	e7e0      	b.n	8008ee6 <aiValidationProcess+0x112>
      ctx->outputs_in_activations = true;
 8008f24:	f884 507d 	strb.w	r5, [r4, #125]	; 0x7d
 8008f28:	e7fa      	b.n	8008f20 <aiValidationProcess+0x14c>
    LC_PRINT("\r\n");
 8008f2a:	4819      	ldr	r0, [pc, #100]	; (8008f90 <aiValidationProcess+0x1bc>)
 8008f2c:	f7ff f952 	bl	80081d4 <lc_print>
    LC_PRINT("-------------------------------------------\r\n");
 8008f30:	4818      	ldr	r0, [pc, #96]	; (8008f94 <aiValidationProcess+0x1c0>)
 8008f32:	f7ff f94f 	bl	80081d4 <lc_print>
    LC_PRINT("| READY to receive a CMD from the HOST... |\r\n");
 8008f36:	4818      	ldr	r0, [pc, #96]	; (8008f98 <aiValidationProcess+0x1c4>)
 8008f38:	f7ff f94c 	bl	80081d4 <lc_print>
    LC_PRINT("-------------------------------------------\r\n");
 8008f3c:	4815      	ldr	r0, [pc, #84]	; (8008f94 <aiValidationProcess+0x1c0>)
 8008f3e:	f7ff f949 	bl	80081d4 <lc_print>
    LC_PRINT("\r\n");
 8008f42:	4813      	ldr	r0, [pc, #76]	; (8008f90 <aiValidationProcess+0x1bc>)
 8008f44:	f7ff f946 	bl	80081d4 <lc_print>
    LC_PRINT("# Note: At this point, default ASCII-base terminal should be closed\r\n");
 8008f48:	4814      	ldr	r0, [pc, #80]	; (8008f9c <aiValidationProcess+0x1c8>)
 8008f4a:	f7ff f943 	bl	80081d4 <lc_print>
    LC_PRINT("# and a stm32com-base interface should be used\r\n");
 8008f4e:	4814      	ldr	r0, [pc, #80]	; (8008fa0 <aiValidationProcess+0x1cc>)
 8008f50:	f7ff f940 	bl	80081d4 <lc_print>
    LC_PRINT("# (i.e. Python ai_runner module). Protocol version = %d.%d\r\n",
 8008f54:	4813      	ldr	r0, [pc, #76]	; (8008fa4 <aiValidationProcess+0x1d0>)
 8008f56:	462a      	mov	r2, r5
 8008f58:	2103      	movs	r1, #3
 8008f5a:	f7ff f93b 	bl	80081d4 <lc_print>
  aiPbMgrInit(pbCmdFuncTab);
 8008f5e:	4812      	ldr	r0, [pc, #72]	; (8008fa8 <aiValidationProcess+0x1d4>)
 8008f60:	f7fe fd3e 	bl	80079e0 <aiPbMgrInit>
    r = aiPbMgrWaitAndProcess();
 8008f64:	f7fe fde4 	bl	8007b30 <aiPbMgrWaitAndProcess>
  } while (r==0);
 8008f68:	4605      	mov	r5, r0
 8008f6a:	2800      	cmp	r0, #0
 8008f6c:	d0fa      	beq.n	8008f64 <aiValidationProcess+0x190>
 8008f6e:	e76c      	b.n	8008e4a <aiValidationProcess+0x76>
 8008f70:	24001a40 	.word	0x24001a40
 8008f74:	08015854 	.word	0x08015854
 8008f78:	0801588b 	.word	0x0801588b
 8008f7c:	080158a9 	.word	0x080158a9
 8008f80:	080158fd 	.word	0x080158fd
 8008f84:	080158bc 	.word	0x080158bc
 8008f88:	080158d7 	.word	0x080158d7
 8008f8c:	080158ec 	.word	0x080158ec
 8008f90:	08015913 	.word	0x08015913
 8008f94:	08015916 	.word	0x08015916
 8008f98:	08015944 	.word	0x08015944
 8008f9c:	08015972 	.word	0x08015972
 8008fa0:	080159b8 	.word	0x080159b8
 8008fa4:	080159e9 	.word	0x080159e9
 8008fa8:	24000014 	.word	0x24000014
 8008fac:	08015874 	.word	0x08015874
 8008fb0:	24000058 	.word	0x24000058
 8008fb4:	24000054 	.word	0x24000054

08008fb8 <ai_mnetwork_handle>:

AI_DECLARE_STATIC
struct network_instance *ai_mnetwork_handle(struct network_instance *inst)
{
    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
        if ((inst) && (&gnetworks[i] == inst))
 8008fb8:	4b05      	ldr	r3, [pc, #20]	; (8008fd0 <ai_mnetwork_handle+0x18>)
 8008fba:	b120      	cbz	r0, 8008fc6 <ai_mnetwork_handle+0xe>
            return inst;
        else if ((!inst) && (gnetworks[i].entry == NULL))
            return &gnetworks[i];
    }
    return NULL;
 8008fbc:	4298      	cmp	r0, r3
 8008fbe:	bf0c      	ite	eq
 8008fc0:	4618      	moveq	r0, r3
 8008fc2:	2000      	movne	r0, #0
 8008fc4:	4770      	bx	lr
        else if ((!inst) && (gnetworks[i].entry == NULL))
 8008fc6:	681a      	ldr	r2, [r3, #0]
            return inst;
 8008fc8:	2a00      	cmp	r2, #0
 8008fca:	bf08      	it	eq
 8008fcc:	4618      	moveq	r0, r3
}
 8008fce:	4770      	bx	lr
 8008fd0:	24001b14 	.word	0x24001b14

08008fd4 <ai_mnetwork_is_valid.constprop.0>:
ai_bool ai_mnetwork_is_valid(const char* name,
 8008fd4:	b510      	push	{r4, lr}
    if (name && (strlen(entry->name) == strlen(name)) &&
 8008fd6:	4604      	mov	r4, r0
 8008fd8:	b160      	cbz	r0, 8008ff4 <ai_mnetwork_is_valid.constprop.0+0x20>
 8008fda:	f7f7 f981 	bl	80002e0 <strlen>
 8008fde:	2814      	cmp	r0, #20
 8008fe0:	4602      	mov	r2, r0
 8008fe2:	d107      	bne.n	8008ff4 <ai_mnetwork_is_valid.constprop.0+0x20>
            (strncmp(entry->name, name, strlen(entry->name)) == 0))
 8008fe4:	4621      	mov	r1, r4
 8008fe6:	4804      	ldr	r0, [pc, #16]	; (8008ff8 <ai_mnetwork_is_valid.constprop.0+0x24>)
 8008fe8:	f009 fe2c 	bl	8012c44 <strncmp>
    if (name && (strlen(entry->name) == strlen(name)) &&
 8008fec:	fab0 f080 	clz	r0, r0
 8008ff0:	0940      	lsrs	r0, r0, #5
}
 8008ff2:	bd10      	pop	{r4, pc}
    return false;
 8008ff4:	2000      	movs	r0, #0
 8008ff6:	e7fc      	b.n	8008ff2 <ai_mnetwork_is_valid.constprop.0+0x1e>
 8008ff8:	08015b16 	.word	0x08015b16

08008ffc <MX_X_CUBE_AI_Init>:
{
 8008ffc:	b508      	push	{r3, lr}
    MX_UARTx_Init();
 8008ffe:	f7f8 f913 	bl	8001228 <MX_USART3_UART_Init>
}
 8009002:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    aiValidationInit();
 8009006:	f7ff be9d 	b.w	8008d44 <aiValidationInit>

0800900a <MX_X_CUBE_AI_Process>:
    aiValidationProcess();
 800900a:	f7ff bee3 	b.w	8008dd4 <aiValidationProcess>
	...

08009010 <ai_mnetwork_find>:
    }
}

AI_API_ENTRY
const char* ai_mnetwork_find(const char *name, ai_int idx)
{
 8009010:	b510      	push	{r4, lr}
 8009012:	460c      	mov	r4, r1
    const ai_network_entry_t *entry;

    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
        entry = &networks[i];
        if (ai_mnetwork_is_valid(name, entry))
 8009014:	f7ff ffde 	bl	8008fd4 <ai_mnetwork_is_valid.constprop.0>
 8009018:	b920      	cbnz	r0, 8009024 <ai_mnetwork_find+0x14>
        else {
            if (!idx--)
                return entry->name;
        }
    }
    return NULL;
 800901a:	2c00      	cmp	r4, #0
 800901c:	4802      	ldr	r0, [pc, #8]	; (8009028 <ai_mnetwork_find+0x18>)
 800901e:	bf18      	it	ne
 8009020:	2000      	movne	r0, #0
}
 8009022:	bd10      	pop	{r4, pc}
            return entry->name;
 8009024:	4800      	ldr	r0, [pc, #0]	; (8009028 <ai_mnetwork_find+0x18>)
 8009026:	e7fc      	b.n	8009022 <ai_mnetwork_find+0x12>
 8009028:	08015b16 	.word	0x08015b16

0800902c <ai_mnetwork_create>:

AI_API_ENTRY
ai_error ai_mnetwork_create(const char *name, ai_handle* network,
        const ai_buffer* network_config)
{
 800902c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800902e:	4606      	mov	r6, r0
    const ai_network_entry_t *entry;
    const ai_network_entry_t *found = NULL;
    ai_error err;
    struct network_instance *inst = ai_mnetwork_handle(NULL);
 8009030:	2000      	movs	r0, #0
{
 8009032:	460d      	mov	r5, r1
 8009034:	4611      	mov	r1, r2
    struct network_instance *inst = ai_mnetwork_handle(NULL);
 8009036:	f7ff ffbf 	bl	8008fb8 <ai_mnetwork_handle>

    if (!inst) {
 800903a:	4604      	mov	r4, r0
 800903c:	b930      	cbnz	r0, 800904c <ai_mnetwork_create+0x20>
        err.type = AI_ERROR_ALLOCATION_FAILED;
        err.code = AI_ERROR_CODE_NETWORK;
        return err;
 800903e:	f241 0031 	movw	r0, #4145	; 0x1031
        inst->handle = *network;
        *network = (ai_handle*)inst;
    }

    return err;
}
 8009042:	b002      	add	sp, #8
 8009044:	bd70      	pop	{r4, r5, r6, pc}
        return err;
 8009046:	f241 0014 	movw	r0, #4116	; 0x1014
 800904a:	e7fa      	b.n	8009042 <ai_mnetwork_create+0x16>
        if (ai_mnetwork_is_valid(name, entry)) {
 800904c:	4630      	mov	r0, r6
 800904e:	9101      	str	r1, [sp, #4]
 8009050:	f7ff ffc0 	bl	8008fd4 <ai_mnetwork_is_valid.constprop.0>
 8009054:	9901      	ldr	r1, [sp, #4]
 8009056:	2800      	cmp	r0, #0
 8009058:	d0f5      	beq.n	8009046 <ai_mnetwork_create+0x1a>
        err = found->ai_create(network, network_config);
 800905a:	4628      	mov	r0, r5
 800905c:	f000 fb76 	bl	800974c <ai_modelstrojnegaucenja_create>
 8009060:	f3c0 2317 	ubfx	r3, r0, #8, #24
 8009064:	b2c2      	uxtb	r2, r0
    if ((err.code == AI_ERROR_CODE_NONE) && (err.type == AI_ERROR_NONE)) {
 8009066:	ea52 2103 	orrs.w	r1, r2, r3, lsl #8
 800906a:	d104      	bne.n	8009076 <ai_mnetwork_create+0x4a>
        inst->entry = found;
 800906c:	4905      	ldr	r1, [pc, #20]	; (8009084 <ai_mnetwork_create+0x58>)
 800906e:	6021      	str	r1, [r4, #0]
        inst->handle = *network;
 8009070:	6829      	ldr	r1, [r5, #0]
 8009072:	6061      	str	r1, [r4, #4]
        *network = (ai_handle*)inst;
 8009074:	602c      	str	r4, [r5, #0]
    return err;
 8009076:	2000      	movs	r0, #0
 8009078:	f362 0007 	bfi	r0, r2, #0, #8
 800907c:	f363 201f 	bfi	r0, r3, #8, #24
 8009080:	e7df      	b.n	8009042 <ai_mnetwork_create+0x16>
 8009082:	bf00      	nop
 8009084:	08015b2c 	.word	0x08015b2c

08009088 <ai_mnetwork_destroy>:

AI_API_ENTRY
ai_handle ai_mnetwork_destroy(ai_handle network)
{
 8009088:	b538      	push	{r3, r4, r5, lr}
 800908a:	4604      	mov	r4, r0
    struct network_instance *inn;
    inn =  ai_mnetwork_handle((struct network_instance *)network);
 800908c:	f7ff ff94 	bl	8008fb8 <ai_mnetwork_handle>
    if (inn) {
 8009090:	4605      	mov	r5, r0
 8009092:	b158      	cbz	r0, 80090ac <ai_mnetwork_destroy+0x24>
        ai_handle hdl = inn->entry->ai_destroy(inn->handle);
 8009094:	6803      	ldr	r3, [r0, #0]
 8009096:	6840      	ldr	r0, [r0, #4]
 8009098:	699b      	ldr	r3, [r3, #24]
 800909a:	4798      	blx	r3
        if (hdl != inn->handle) {
 800909c:	686b      	ldr	r3, [r5, #4]
 800909e:	4283      	cmp	r3, r0
 80090a0:	d004      	beq.n	80090ac <ai_mnetwork_destroy+0x24>
        if ((inst) && (&gnetworks[i] == inst)) {
 80090a2:	4b03      	ldr	r3, [pc, #12]	; (80090b0 <ai_mnetwork_destroy+0x28>)
 80090a4:	2400      	movs	r4, #0
 80090a6:	429d      	cmp	r5, r3
 80090a8:	d100      	bne.n	80090ac <ai_mnetwork_destroy+0x24>
            gnetworks[i].entry = NULL;
 80090aa:	602c      	str	r4, [r5, #0]
            ai_mnetwork_release_handle(inn);
            network = AI_HANDLE_NULL;
        }
    }
    return network;
}
 80090ac:	4620      	mov	r0, r4
 80090ae:	bd38      	pop	{r3, r4, r5, pc}
 80090b0:	24001b14 	.word	0x24001b14

080090b4 <ai_mnetwork_get_report>:

AI_API_ENTRY
ai_bool ai_mnetwork_get_report(ai_handle network, ai_network_report* report)
{
 80090b4:	b510      	push	{r4, lr}
    struct network_instance *inn;
    inn =  ai_mnetwork_handle((struct network_instance *)network);
 80090b6:	f7ff ff7f 	bl	8008fb8 <ai_mnetwork_handle>
    if (inn)
 80090ba:	b128      	cbz	r0, 80090c8 <ai_mnetwork_get_report+0x14>
        return inn->entry->ai_get_report(inn->handle, report);
 80090bc:	6802      	ldr	r2, [r0, #0]
 80090be:	6840      	ldr	r0, [r0, #4]
 80090c0:	68d2      	ldr	r2, [r2, #12]
    else
        return false;
}
 80090c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return inn->entry->ai_get_report(inn->handle, report);
 80090c6:	4710      	bx	r2
}
 80090c8:	bd10      	pop	{r4, pc}

080090ca <ai_mnetwork_get_error>:

AI_API_ENTRY
ai_error ai_mnetwork_get_error(ai_handle network)
{
 80090ca:	b510      	push	{r4, lr}
    struct network_instance *inn;
    ai_error err;
    err.type = AI_ERROR_INVALID_PARAM;
    err.code = AI_ERROR_CODE_NETWORK;

    inn =  ai_mnetwork_handle((struct network_instance *)network);
 80090cc:	f7ff ff74 	bl	8008fb8 <ai_mnetwork_handle>
    if (inn)
 80090d0:	b128      	cbz	r0, 80090de <ai_mnetwork_get_error+0x14>
        return inn->entry->ai_get_error(inn->handle);
 80090d2:	6803      	ldr	r3, [r0, #0]
 80090d4:	6840      	ldr	r0, [r0, #4]
 80090d6:	695b      	ldr	r3, [r3, #20]
    else
        return err;
}
 80090d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return inn->entry->ai_get_error(inn->handle);
 80090dc:	4718      	bx	r3
}
 80090de:	f241 0014 	movw	r0, #4116	; 0x1014
 80090e2:	bd10      	pop	{r4, pc}

080090e4 <ai_mnetwork_init>:

AI_API_ENTRY
ai_bool ai_mnetwork_init(ai_handle network)
{
 80090e4:	b530      	push	{r4, r5, lr}
 80090e6:	b08f      	sub	sp, #60	; 0x3c
    struct network_instance *inn;
    ai_network_params par;

    inn =  ai_mnetwork_handle((struct network_instance *)network);
 80090e8:	f7ff ff66 	bl	8008fb8 <ai_mnetwork_handle>
    if (inn) {
 80090ec:	4604      	mov	r4, r0
 80090ee:	b168      	cbz	r0, 800910c <ai_mnetwork_init+0x28>
        inn->entry->ai_data_params_get(&par);
 80090f0:	6803      	ldr	r3, [r0, #0]
        for (int idx=0; idx < par.map_activations.size; idx++)
 80090f2:	2500      	movs	r5, #0
        inn->entry->ai_data_params_get(&par);
 80090f4:	4668      	mov	r0, sp
 80090f6:	689b      	ldr	r3, [r3, #8]
 80090f8:	4798      	blx	r3
        for (int idx=0; idx < par.map_activations.size; idx++)
 80090fa:	f8bd 200e 	ldrh.w	r2, [sp, #14]
          AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&par.map_activations, idx, inn->entry->activations[idx]);
 80090fe:	6823      	ldr	r3, [r4, #0]
        for (int idx=0; idx < par.map_activations.size; idx++)
 8009100:	42aa      	cmp	r2, r5
 8009102:	dc05      	bgt.n	8009110 <ai_mnetwork_init+0x2c>
        return inn->entry->ai_init(inn->handle, &par);
 8009104:	69db      	ldr	r3, [r3, #28]
 8009106:	4669      	mov	r1, sp
 8009108:	6860      	ldr	r0, [r4, #4]
 800910a:	4798      	blx	r3
    }
    else
        return false;
}
 800910c:	b00f      	add	sp, #60	; 0x3c
 800910e:	bd30      	pop	{r4, r5, pc}
          AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&par.map_activations, idx, inn->entry->activations[idx]);
 8009110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009112:	4629      	mov	r1, r5
 8009114:	a803      	add	r0, sp, #12
 8009116:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
        for (int idx=0; idx < par.map_activations.size; idx++)
 800911a:	3501      	adds	r5, #1
          AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&par.map_activations, idx, inn->entry->activations[idx]);
 800911c:	f001 fe92 	bl	800ae44 <ai_buffer_array_item_set_address>
        for (int idx=0; idx < par.map_activations.size; idx++)
 8009120:	e7eb      	b.n	80090fa <ai_mnetwork_init+0x16>

08009122 <ai_mnetwork_run>:

AI_API_ENTRY
ai_i32 ai_mnetwork_run(ai_handle network, const ai_buffer* input,
        ai_buffer* output)
{
 8009122:	b513      	push	{r0, r1, r4, lr}
 8009124:	9201      	str	r2, [sp, #4]
    struct network_instance* inn;
    inn =  ai_mnetwork_handle((struct network_instance *)network);
 8009126:	f7ff ff47 	bl	8008fb8 <ai_mnetwork_handle>
    if (inn)
 800912a:	4603      	mov	r3, r0
 800912c:	b140      	cbz	r0, 8009140 <ai_mnetwork_run+0x1e>
        return inn->entry->ai_run(inn->handle, input, output);
 800912e:	6800      	ldr	r0, [r0, #0]
 8009130:	9a01      	ldr	r2, [sp, #4]
 8009132:	6a04      	ldr	r4, [r0, #32]
 8009134:	6858      	ldr	r0, [r3, #4]
 8009136:	4623      	mov	r3, r4
    else
        return 0;
}
 8009138:	b002      	add	sp, #8
 800913a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return inn->entry->ai_run(inn->handle, input, output);
 800913e:	4718      	bx	r3
}
 8009140:	b002      	add	sp, #8
 8009142:	bd10      	pop	{r4, pc}

08009144 <ai_mnetwork_get_private_handle>:

AI_API_ENTRY
 int ai_mnetwork_get_private_handle(ai_handle network,
         ai_handle *phandle,
         ai_network_params *pparams)
 {
 8009144:	b538      	push	{r3, r4, r5, lr}
 8009146:	4615      	mov	r5, r2
     struct network_instance* inn;
     inn =  ai_mnetwork_handle((struct network_instance *)network);
 8009148:	f7ff ff36 	bl	8008fb8 <ai_mnetwork_handle>
     if (inn && phandle && pparams) {
 800914c:	b188      	cbz	r0, 8009172 <ai_mnetwork_get_private_handle+0x2e>
 800914e:	b181      	cbz	r1, 8009172 <ai_mnetwork_get_private_handle+0x2e>
 8009150:	b17d      	cbz	r5, 8009172 <ai_mnetwork_get_private_handle+0x2e>
         *phandle = inn->handle;
 8009152:	6843      	ldr	r3, [r0, #4]
         *pparams = inn->params;
 8009154:	f100 0408 	add.w	r4, r0, #8
         *phandle = inn->handle;
 8009158:	600b      	str	r3, [r1, #0]
         *pparams = inn->params;
 800915a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800915c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800915e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009160:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009162:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009164:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009166:	e894 0003 	ldmia.w	r4, {r0, r1}
 800916a:	e885 0003 	stmia.w	r5, {r0, r1}
         return 0;
 800916e:	2000      	movs	r0, #0
     }
     else
         return -1;
 }
 8009170:	bd38      	pop	{r3, r4, r5, pc}
         return -1;
 8009172:	f04f 30ff 	mov.w	r0, #4294967295
 8009176:	e7fb      	b.n	8009170 <ai_mnetwork_get_private_handle+0x2c>

08009178 <_write_number>:

  return count;
}

static int _write_number(uint64_t number, struct specifier *specifier)
{
 8009178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  char sign_neg = 0;
  char chr;

  buf[idx--] = 0;

  if (specifier->flags & FLAG_IS_SIGNED) {
 800917c:	6896      	ldr	r6, [r2, #8]
{
 800917e:	b091      	sub	sp, #68	; 0x44
  buf[idx--] = 0;
 8009180:	2500      	movs	r5, #0
{
 8009182:	4614      	mov	r4, r2
  if (specifier->flags & FLAG_IS_SIGNED) {
 8009184:	f016 0304 	ands.w	r3, r6, #4
  buf[idx--] = 0;
 8009188:	f88d 503f 	strb.w	r5, [sp, #63]	; 0x3f
  if (specifier->flags & FLAG_IS_SIGNED) {
 800918c:	d02a      	beq.n	80091e4 <_write_number+0x6c>
    if ((int64_t)number < 0) {
 800918e:	42a9      	cmp	r1, r5
 8009190:	da08      	bge.n	80091a4 <_write_number+0x2c>
      number = -number;
      sign_neg = '-';
      specifier->width -= 1;
 8009192:	6813      	ldr	r3, [r2, #0]
      number = -number;
 8009194:	4240      	negs	r0, r0
      sign_neg = '-';
 8009196:	f04f 052d 	mov.w	r5, #45	; 0x2d
      specifier->width -= 1;
 800919a:	f103 33ff 	add.w	r3, r3, #4294967295
      number = -number;
 800919e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
      specifier->width -= 1;
 80091a2:	6013      	str	r3, [r2, #0]
 80091a4:	f016 0f08 	tst.w	r6, #8
 80091a8:	f10d 093e 	add.w	r9, sp, #62	; 0x3e
  do {
    uint64_t t;
    if (specifier->flags & FLAG_HEX) {
      chr = number & 0x0F;
      t = number >> 4;
      chr = (chr >= 10) ? (chr + (specifier->flags & FLAG_CAPS ? 'A' : 'a') - 10) : (chr + '0');
 80091ac:	f04f 073e 	mov.w	r7, #62	; 0x3e
    if (specifier->flags & FLAG_HEX) {
 80091b0:	f006 0a10 	and.w	sl, r6, #16
 80091b4:	bf14      	ite	ne
 80091b6:	f04f 0841 	movne.w	r8, #65	; 0x41
 80091ba:	f04f 0861 	moveq.w	r8, #97	; 0x61
      chr = (chr >= 10) ? (chr + (specifier->flags & FLAG_CAPS ? 'A' : 'a') - 10) : (chr + '0');
 80091be:	f1a8 080a 	sub.w	r8, r8, #10
      chr = number & 0x0F;
 80091c2:	fa5f fb80 	uxtb.w	fp, r0
    if (specifier->flags & FLAG_HEX) {
 80091c6:	f1ba 0f00 	cmp.w	sl, #0
 80091ca:	d032      	beq.n	8009232 <_write_number+0xba>
      chr = number & 0x0F;
 80091cc:	f00b 030f 	and.w	r3, fp, #15
      t = number >> 4;
 80091d0:	0900      	lsrs	r0, r0, #4
      chr = (chr >= 10) ? (chr + (specifier->flags & FLAG_CAPS ? 'A' : 'a') - 10) : (chr + '0');
 80091d2:	2b09      	cmp	r3, #9
      t = number >> 4;
 80091d4:	ea40 7001 	orr.w	r0, r0, r1, lsl #28
 80091d8:	ea4f 1111 	mov.w	r1, r1, lsr #4
      chr = (chr >= 10) ? (chr + (specifier->flags & FLAG_CAPS ? 'A' : 'a') - 10) : (chr + '0');
 80091dc:	d906      	bls.n	80091ec <_write_number+0x74>
 80091de:	4443      	add	r3, r8
    } else {
      t = number / 10;
      chr = (number - t * 10) + '0';
 80091e0:	b2db      	uxtb	r3, r3
 80091e2:	e004      	b.n	80091ee <_write_number+0x76>
  char sign_neg = 0;
 80091e4:	461d      	mov	r5, r3
 80091e6:	e7dd      	b.n	80091a4 <_write_number+0x2c>
    }
    number = t;
    buf[idx--] = chr;
 80091e8:	4617      	mov	r7, r2
 80091ea:	e7ea      	b.n	80091c2 <_write_number+0x4a>
      chr = (chr >= 10) ? (chr + (specifier->flags & FLAG_CAPS ? 'A' : 'a') - 10) : (chr + '0');
 80091ec:	3330      	adds	r3, #48	; 0x30
    buf[idx--] = chr;
 80091ee:	f809 3901 	strb.w	r3, [r9], #-1
    count++;
  } while (number);
 80091f2:	ea50 0301 	orrs.w	r3, r0, r1
    buf[idx--] = chr;
 80091f6:	f107 32ff 	add.w	r2, r7, #4294967295
    count++;
 80091fa:	f1c7 0b3f 	rsb	fp, r7, #63	; 0x3f
  } while (number);
 80091fe:	d1f3      	bne.n	80091e8 <_write_number+0x70>

  if ((sign_neg) && (!(specifier->flags & FLAG_ZERO_EXTEND))) {
 8009200:	f006 0101 	and.w	r1, r6, #1
 8009204:	b14d      	cbz	r5, 800921a <_write_number+0xa2>
 8009206:	b941      	cbnz	r1, 800921a <_write_number+0xa2>
    buf[idx--] = sign_neg;
 8009208:	f102 0340 	add.w	r3, r2, #64	; 0x40
    count++;
 800920c:	f1c7 0b40 	rsb	fp, r7, #64	; 0x40
    buf[idx--] = sign_neg;
 8009210:	eb0d 0203 	add.w	r2, sp, r3
 8009214:	f802 5c40 	strb.w	r5, [r2, #-64]
 8009218:	1eba      	subs	r2, r7, #2
 800921a:	2900      	cmp	r1, #0
  }

  while ((count < specifier->width) && (!(specifier->flags & FLAG_NEG_PAD))) {
 800921c:	6823      	ldr	r3, [r4, #0]
 800921e:	f006 0602 	and.w	r6, r6, #2
 8009222:	bf14      	ite	ne
 8009224:	2130      	movne	r1, #48	; 0x30
 8009226:	2120      	moveq	r1, #32
 8009228:	455b      	cmp	r3, fp
 800922a:	dd13      	ble.n	8009254 <_write_number+0xdc>
 800922c:	b166      	cbz	r6, 8009248 <_write_number+0xd0>
    else
      buf[idx--] = ' ';
    count++;
  }

  if ((sign_neg) && (count < (specifier->width + 1))) {
 800922e:	b9a5      	cbnz	r5, 800925a <_write_number+0xe2>
 8009230:	e01b      	b.n	800926a <_write_number+0xf2>
      t = number / 10;
 8009232:	2300      	movs	r3, #0
 8009234:	220a      	movs	r2, #10
      chr = (number - t * 10) + '0';
 8009236:	f10b 0b30 	add.w	fp, fp, #48	; 0x30
      t = number / 10;
 800923a:	f7f7 f9b7 	bl	80005ac <__aeabi_uldivmod>
      chr = (number - t * 10) + '0';
 800923e:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8009242:	ebab 0343 	sub.w	r3, fp, r3, lsl #1
 8009246:	e7cb      	b.n	80091e0 <_write_number+0x68>
    if (specifier->flags & FLAG_ZERO_EXTEND)
 8009248:	f80d 1002 	strb.w	r1, [sp, r2]
    count++;
 800924c:	f10b 0b01 	add.w	fp, fp, #1
 8009250:	3a01      	subs	r2, #1
 8009252:	e7e9      	b.n	8009228 <_write_number+0xb0>
  if ((sign_neg) && (count < (specifier->width + 1))) {
 8009254:	b14d      	cbz	r5, 800926a <_write_number+0xf2>
 8009256:	455b      	cmp	r3, fp
 8009258:	d107      	bne.n	800926a <_write_number+0xf2>
    buf[idx--] = sign_neg;
 800925a:	f102 0340 	add.w	r3, r2, #64	; 0x40
    count++;
 800925e:	f10b 0b01 	add.w	fp, fp, #1
    buf[idx--] = sign_neg;
 8009262:	3a01      	subs	r2, #1
 8009264:	446b      	add	r3, sp
 8009266:	f803 5c40 	strb.w	r5, [r3, #-64]
  }

  idx++;


  for(int i = 0; i < count; i++) {
 800926a:	eb0d 0602 	add.w	r6, sp, r2
 800926e:	2500      	movs	r5, #0
 8009270:	3501      	adds	r5, #1
    specifier->putc_fct(specifier->user, (buf + idx)[i]);
 8009272:	68e3      	ldr	r3, [r4, #12]
 8009274:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009278:	6920      	ldr	r0, [r4, #16]
 800927a:	4798      	blx	r3
  for(int i = 0; i < count; i++) {
 800927c:	45ab      	cmp	fp, r5
 800927e:	d1f7      	bne.n	8009270 <_write_number+0xf8>
  }

  if (specifier->flags & FLAG_NEG_PAD) {
 8009280:	68a3      	ldr	r3, [r4, #8]
 8009282:	079b      	lsls	r3, r3, #30
 8009284:	d408      	bmi.n	8009298 <_write_number+0x120>
      _WRITE_C(' ');
    }
  }

  return count;
}
 8009286:	4628      	mov	r0, r5
 8009288:	b011      	add	sp, #68	; 0x44
 800928a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      _WRITE_C(' ');
 800928e:	3501      	adds	r5, #1
 8009290:	68e3      	ldr	r3, [r4, #12]
 8009292:	2120      	movs	r1, #32
 8009294:	6920      	ldr	r0, [r4, #16]
 8009296:	4798      	blx	r3
    while (count < specifier->width) {
 8009298:	6823      	ldr	r3, [r4, #0]
 800929a:	42ab      	cmp	r3, r5
 800929c:	dcf7      	bgt.n	800928e <_write_number+0x116>
 800929e:	e7f2      	b.n	8009286 <_write_number+0x10e>

080092a0 <vlc_print>:
{
  return *(*fmtP)++;
}

int vlc_print(void (*putc_fct)(void*, const char), void *user, const char* fmt, va_list vl)
{
 80092a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092a4:	4683      	mov	fp, r0
 80092a6:	460f      	mov	r7, r1
 80092a8:	461c      	mov	r4, r3
  char c, t;
  int count = 0;
 80092aa:	2500      	movs	r5, #0
{
 80092ac:	ed2d 8b02 	vpush	{d8}
 80092b0:	b09b      	sub	sp, #108	; 0x6c
  return *(*fmtP)++;
 80092b2:	4613      	mov	r3, r2
 80092b4:	f813 1b01 	ldrb.w	r1, [r3], #1
 80092b8:	9302      	str	r3, [sp, #8]
  bool error = false;

  while (((c = _getChar(&fmt)) != 0) && (!error))
 80092ba:	b929      	cbnz	r1, 80092c8 <vlc_print+0x28>
      putc_fct(user, c);
      count++;
    }
  }
  return count;
}
 80092bc:	4628      	mov	r0, r5
 80092be:	b01b      	add	sp, #108	; 0x6c
 80092c0:	ecbd 8b02 	vpop	{d8}
 80092c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (c == '\n')
 80092c8:	290a      	cmp	r1, #10
 80092ca:	d103      	bne.n	80092d4 <vlc_print+0x34>
      putc_fct(user, c);
 80092cc:	4638      	mov	r0, r7
      count++;
 80092ce:	3501      	adds	r5, #1
      putc_fct(user, c);
 80092d0:	47d8      	blx	fp
      count++;
 80092d2:	e0c9      	b.n	8009468 <vlc_print+0x1c8>
    else if (c == '%')
 80092d4:	2925      	cmp	r1, #37	; 0x25
 80092d6:	d1f9      	bne.n	80092cc <vlc_print+0x2c>
      struct specifier specifier = { 0, 0, 0, putc_fct, user };
 80092d8:	2300      	movs	r3, #0
 80092da:	f04f 090a 	mov.w	r9, #10
 80092de:	9709      	str	r7, [sp, #36]	; 0x24
 80092e0:	4698      	mov	r8, r3
 80092e2:	461a      	mov	r2, r3
 80092e4:	469e      	mov	lr, r3
 80092e6:	4618      	mov	r0, r3
      bool has_precision = false;
 80092e8:	469c      	mov	ip, r3
      struct specifier specifier = { 0, 0, 0, putc_fct, user };
 80092ea:	9301      	str	r3, [sp, #4]
      bool long_type = false;
 80092ec:	9303      	str	r3, [sp, #12]
      struct specifier specifier = { 0, 0, 0, putc_fct, user };
 80092ee:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80092f2:	e9cd 3b07 	strd	r3, fp, [sp, #28]
  return *(*fmtP)++;
 80092f6:	9e02      	ldr	r6, [sp, #8]
 80092f8:	f816 1b01 	ldrb.w	r1, [r6], #1
 80092fc:	9602      	str	r6, [sp, #8]
        if (!c)
 80092fe:	2900      	cmp	r1, #0
 8009300:	f000 81be 	beq.w	8009680 <vlc_print+0x3e0>
        else if (c == '0')
 8009304:	2930      	cmp	r1, #48	; 0x30
 8009306:	d116      	bne.n	8009336 <vlc_print+0x96>
          if (!specifier.width && !specifier.precision) {
 8009308:	ea50 0102 	orrs.w	r1, r0, r2
 800930c:	d107      	bne.n	800931e <vlc_print+0x7e>
            specifier.flags |= FLAG_ZERO_EXTEND;
 800930e:	9b01      	ldr	r3, [sp, #4]
 8009310:	460a      	mov	r2, r1
 8009312:	4608      	mov	r0, r1
 8009314:	f043 0301 	orr.w	r3, r3, #1
 8009318:	9301      	str	r3, [sp, #4]
 800931a:	2301      	movs	r3, #1
 800931c:	e7eb      	b.n	80092f6 <vlc_print+0x56>
          } else if (has_precision) {
 800931e:	f1bc 0f00 	cmp.w	ip, #0
 8009322:	d003      	beq.n	800932c <vlc_print+0x8c>
            specifier.precision = specifier.precision * 10 + (c - '0');
 8009324:	fb09 f202 	mul.w	r2, r9, r2
 8009328:	46e0      	mov	r8, ip
 800932a:	e7e4      	b.n	80092f6 <vlc_print+0x56>
            specifier.width = specifier.width * 10 + (c - '0');
 800932c:	fb09 f000 	mul.w	r0, r9, r0
            specifier.width = specifier.width * 10 + (c - '0');
 8009330:	f04f 0e01 	mov.w	lr, #1
 8009334:	e7df      	b.n	80092f6 <vlc_print+0x56>
        else if (c == '-')
 8009336:	292d      	cmp	r1, #45	; 0x2d
 8009338:	d104      	bne.n	8009344 <vlc_print+0xa4>
          specifier.flags |= FLAG_NEG_PAD;
 800933a:	9b01      	ldr	r3, [sp, #4]
 800933c:	f043 0302 	orr.w	r3, r3, #2
 8009340:	9301      	str	r3, [sp, #4]
 8009342:	e7ea      	b.n	800931a <vlc_print+0x7a>
        else if (c == '.')
 8009344:	292e      	cmp	r1, #46	; 0x2e
 8009346:	f000 81a9 	beq.w	800969c <vlc_print+0x3fc>
        else if ((c >= '1') && (c <= '9'))
 800934a:	f1a1 0a31 	sub.w	sl, r1, #49	; 0x31
 800934e:	f1ba 0f08 	cmp.w	sl, #8
 8009352:	d809      	bhi.n	8009368 <vlc_print+0xc8>
            specifier.precision = specifier.precision * 10 + (c - '0');
 8009354:	3930      	subs	r1, #48	; 0x30
          if (has_precision) {
 8009356:	f1bc 0f00 	cmp.w	ip, #0
 800935a:	d002      	beq.n	8009362 <vlc_print+0xc2>
            specifier.precision = specifier.precision * 10 + (c - '0');
 800935c:	fb09 1202 	mla	r2, r9, r2, r1
 8009360:	e7e2      	b.n	8009328 <vlc_print+0x88>
            specifier.width = specifier.width * 10 + (c - '0');
 8009362:	fb09 1000 	mla	r0, r9, r0, r1
 8009366:	e7e3      	b.n	8009330 <vlc_print+0x90>
        else if (c == 'l')
 8009368:	296c      	cmp	r1, #108	; 0x6c
 800936a:	f000 819a 	beq.w	80096a2 <vlc_print+0x402>
 800936e:	f1be 0f00 	cmp.w	lr, #0
 8009372:	d000      	beq.n	8009376 <vlc_print+0xd6>
 8009374:	9005      	str	r0, [sp, #20]
 8009376:	f1b8 0f00 	cmp.w	r8, #0
 800937a:	d000      	beq.n	800937e <vlc_print+0xde>
 800937c:	9206      	str	r2, [sp, #24]
 800937e:	b10b      	cbz	r3, 8009384 <vlc_print+0xe4>
 8009380:	9b01      	ldr	r3, [sp, #4]
 8009382:	9307      	str	r3, [sp, #28]
          switch(c)
 8009384:	2978      	cmp	r1, #120	; 0x78
 8009386:	d809      	bhi.n	800939c <vlc_print+0xfc>
 8009388:	2962      	cmp	r1, #98	; 0x62
 800938a:	d813      	bhi.n	80093b4 <vlc_print+0x114>
 800938c:	2946      	cmp	r1, #70	; 0x46
 800938e:	f000 80b3 	beq.w	80094f8 <vlc_print+0x258>
 8009392:	2958      	cmp	r1, #88	; 0x58
 8009394:	f000 808f 	beq.w	80094b6 <vlc_print+0x216>
 8009398:	2925      	cmp	r1, #37	; 0x25
 800939a:	d097      	beq.n	80092cc <vlc_print+0x2c>
        putc_fct(user, '<');
 800939c:	213c      	movs	r1, #60	; 0x3c
 800939e:	4638      	mov	r0, r7
 80093a0:	47d8      	blx	fp
        putc_fct(user, '!');
 80093a2:	2121      	movs	r1, #33	; 0x21
 80093a4:	4638      	mov	r0, r7
        va_arg(vl, signed long);
 80093a6:	3404      	adds	r4, #4
        putc_fct(user, '!');
 80093a8:	47d8      	blx	fp
        putc_fct(user, '>');
 80093aa:	213e      	movs	r1, #62	; 0x3e
 80093ac:	4638      	mov	r0, r7
        count += 3;
 80093ae:	3503      	adds	r5, #3
        putc_fct(user, '>');
 80093b0:	47d8      	blx	fp
        error = false;
 80093b2:	e059      	b.n	8009468 <vlc_print+0x1c8>
          switch(c)
 80093b4:	f1a1 0363 	sub.w	r3, r1, #99	; 0x63
 80093b8:	2b15      	cmp	r3, #21
 80093ba:	d8ef      	bhi.n	800939c <vlc_print+0xfc>
 80093bc:	a201      	add	r2, pc, #4	; (adr r2, 80093c4 <vlc_print+0x124>)
 80093be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093c2:	bf00      	nop
 80093c4:	0800941d 	.word	0x0800941d
 80093c8:	080094d7 	.word	0x080094d7
 80093cc:	0800939d 	.word	0x0800939d
 80093d0:	080094f9 	.word	0x080094f9
 80093d4:	0800939d 	.word	0x0800939d
 80093d8:	0800939d 	.word	0x0800939d
 80093dc:	080094d7 	.word	0x080094d7
 80093e0:	0800939d 	.word	0x0800939d
 80093e4:	0800939d 	.word	0x0800939d
 80093e8:	0800939d 	.word	0x0800939d
 80093ec:	0800939d 	.word	0x0800939d
 80093f0:	0800939d 	.word	0x0800939d
 80093f4:	0800939d 	.word	0x0800939d
 80093f8:	080094ab 	.word	0x080094ab
 80093fc:	0800939d 	.word	0x0800939d
 8009400:	0800939d 	.word	0x0800939d
 8009404:	08009425 	.word	0x08009425
 8009408:	0800939d 	.word	0x0800939d
 800940c:	080094df 	.word	0x080094df
 8009410:	0800939d 	.word	0x0800939d
 8009414:	0800939d 	.word	0x0800939d
 8009418:	080094bf 	.word	0x080094bf
            t = (char)va_arg(vl, signed int);
 800941c:	f854 1b04 	ldr.w	r1, [r4], #4
            putc_fct(user, t);
 8009420:	b2c9      	uxtb	r1, r1
 8009422:	e753      	b.n	80092cc <vlc_print+0x2c>
            if (!str) str = "(null)";
 8009424:	4ba0      	ldr	r3, [pc, #640]	; (80096a8 <vlc_print+0x408>)
            str = va_arg(vl, char*);
 8009426:	f854 9b04 	ldr.w	r9, [r4], #4
            if (!str) str = "(null)";
 800942a:	f1b9 0f00 	cmp.w	r9, #0
 800942e:	bf08      	it	eq
 8009430:	4699      	moveq	r9, r3
  int len = strlen(str);
 8009432:	4648      	mov	r0, r9
 8009434:	f7f6 ff54 	bl	80002e0 <strlen>
  if (specifier->precision) {
 8009438:	9b06      	ldr	r3, [sp, #24]
  int len = strlen(str);
 800943a:	4680      	mov	r8, r0
  if (specifier->precision) {
 800943c:	b113      	cbz	r3, 8009444 <vlc_print+0x1a4>
    len = (len > specifier->precision)?specifier->precision:len;
 800943e:	4298      	cmp	r0, r3
 8009440:	bfa8      	it	ge
 8009442:	4698      	movge	r8, r3
  if (!(specifier->flags & FLAG_NEG_PAD)) {
 8009444:	9e07      	ldr	r6, [sp, #28]
 8009446:	f016 0602 	ands.w	r6, r6, #2
 800944a:	d014      	beq.n	8009476 <vlc_print+0x1d6>
  int count = 0;
 800944c:	2600      	movs	r6, #0
 800944e:	46ca      	mov	sl, r9
  for (int i = 0; i < len; i++) {
 8009450:	ebaa 0309 	sub.w	r3, sl, r9
 8009454:	4598      	cmp	r8, r3
 8009456:	dc14      	bgt.n	8009482 <vlc_print+0x1e2>
  if (specifier->flags & FLAG_NEG_PAD) {
 8009458:	9b07      	ldr	r3, [sp, #28]
 800945a:	f1b8 0f00 	cmp.w	r8, #0
 800945e:	bfa8      	it	ge
 8009460:	4446      	addge	r6, r8
 8009462:	079b      	lsls	r3, r3, #30
 8009464:	d41e      	bmi.n	80094a4 <vlc_print+0x204>
            count += _write_string(str, &specifier);
 8009466:	4435      	add	r5, r6
  for(int i = 0; i < count; i++) {
 8009468:	9a02      	ldr	r2, [sp, #8]
 800946a:	e722      	b.n	80092b2 <vlc_print+0x12>
      _WRITE_C(' ');
 800946c:	3601      	adds	r6, #1
 800946e:	2120      	movs	r1, #32
 8009470:	e9dd 3008 	ldrd	r3, r0, [sp, #32]
 8009474:	4798      	blx	r3
    for(int i = len; i < specifier->width; i++) {
 8009476:	eb08 0306 	add.w	r3, r8, r6
 800947a:	9a05      	ldr	r2, [sp, #20]
 800947c:	429a      	cmp	r2, r3
 800947e:	dcf5      	bgt.n	800946c <vlc_print+0x1cc>
 8009480:	e7e5      	b.n	800944e <vlc_print+0x1ae>
    _WRITE_C(*str++);
 8009482:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8009486:	e9dd 3008 	ldrd	r3, r0, [sp, #32]
 800948a:	4798      	blx	r3
  for (int i = 0; i < len; i++) {
 800948c:	e7e0      	b.n	8009450 <vlc_print+0x1b0>
      _WRITE_C(' ');
 800948e:	3601      	adds	r6, #1
 8009490:	2120      	movs	r1, #32
 8009492:	e9dd 3008 	ldrd	r3, r0, [sp, #32]
 8009496:	4798      	blx	r3
    for(int i = len; i < specifier->width; i++) {
 8009498:	eb08 0306 	add.w	r3, r8, r6
 800949c:	9a05      	ldr	r2, [sp, #20]
 800949e:	429a      	cmp	r2, r3
 80094a0:	dcf5      	bgt.n	800948e <vlc_print+0x1ee>
 80094a2:	e7e0      	b.n	8009466 <vlc_print+0x1c6>
 80094a4:	eba8 0806 	sub.w	r8, r8, r6
 80094a8:	e7f6      	b.n	8009498 <vlc_print+0x1f8>
            specifier.flags |= FLAG_ZERO_EXTEND;
 80094aa:	9b07      	ldr	r3, [sp, #28]
 80094ac:	f043 0301 	orr.w	r3, r3, #1
 80094b0:	9307      	str	r3, [sp, #28]
            specifier.width = 8;
 80094b2:	2308      	movs	r3, #8
 80094b4:	9305      	str	r3, [sp, #20]
            specifier.flags |= FLAG_CAPS;
 80094b6:	9b07      	ldr	r3, [sp, #28]
 80094b8:	f043 0308 	orr.w	r3, r3, #8
 80094bc:	9307      	str	r3, [sp, #28]
            specifier.flags |= FLAG_HEX;
 80094be:	9b07      	ldr	r3, [sp, #28]
            count += _write_number(val, &specifier);
 80094c0:	aa05      	add	r2, sp, #20
 80094c2:	f854 0b04 	ldr.w	r0, [r4], #4
 80094c6:	2100      	movs	r1, #0
            specifier.flags |= FLAG_HEX;
 80094c8:	f043 0310 	orr.w	r3, r3, #16
 80094cc:	9307      	str	r3, [sp, #28]
            count += _write_number(val, &specifier);
 80094ce:	f7ff fe53 	bl	8009178 <_write_number>
 80094d2:	4405      	add	r5, r0
            break;
 80094d4:	e7c8      	b.n	8009468 <vlc_print+0x1c8>
            specifier.flags |= FLAG_IS_SIGNED;
 80094d6:	9b07      	ldr	r3, [sp, #28]
 80094d8:	f043 0304 	orr.w	r3, r3, #4
 80094dc:	9307      	str	r3, [sp, #28]
            if (c == 'u')
 80094de:	2975      	cmp	r1, #117	; 0x75
              val = va_arg(vl, unsigned int);
 80094e0:	6820      	ldr	r0, [r4, #0]
 80094e2:	f104 0604 	add.w	r6, r4, #4
            count += _write_number(val, &specifier);
 80094e6:	aa05      	add	r2, sp, #20
              val = va_arg(vl, unsigned int);
 80094e8:	bf0c      	ite	eq
 80094ea:	2100      	moveq	r1, #0
                val = va_arg(vl, signed long);
 80094ec:	17c1      	asrne	r1, r0, #31
            count += _write_number(val, &specifier);
 80094ee:	f7ff fe43 	bl	8009178 <_write_number>
            break;
 80094f2:	4634      	mov	r4, r6
            count += _write_number(val, &specifier);
 80094f4:	4405      	add	r5, r0
            break;
 80094f6:	e7b7      	b.n	8009468 <vlc_print+0x1c8>
            dbl = va_arg(vl, double);
 80094f8:	3407      	adds	r4, #7
            if (specifier.precision == 0)
 80094fa:	9b06      	ldr	r3, [sp, #24]
            dbl = va_arg(vl, double);
 80094fc:	f024 0407 	bic.w	r4, r4, #7
 8009500:	ecb4 8b02 	vldmia	r4!, {d8}
            if (specifier.precision == 0)
 8009504:	b90b      	cbnz	r3, 800950a <vlc_print+0x26a>
              specifier.precision = 6;
 8009506:	2306      	movs	r3, #6
 8009508:	9306      	str	r3, [sp, #24]
  double mul = 1.0;
 800950a:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
  for (int i=0;i <specifier->precision; i++)
 800950e:	9e06      	ldr	r6, [sp, #24]
    mul *= 10;
 8009510:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
  for (int i=0;i <specifier->precision; i++)
 8009514:	2300      	movs	r3, #0
 8009516:	42b3      	cmp	r3, r6
 8009518:	f2c0 80a4 	blt.w	8009664 <vlc_print+0x3c4>
  if (is_signed)
 800951c:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
 8009520:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009524:	f140 80a2 	bpl.w	800966c <vlc_print+0x3cc>
    number = -number;
 8009528:	eeb1 5b48 	vneg.f64	d5, d8
  number += (half_ / mul);
 800952c:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
  uint32_t count = 0;
 8009530:	f04f 0800 	mov.w	r8, #0
  uint32_t idx = sizeof(buf) - 1;
 8009534:	f04f 093f 	mov.w	r9, #63	; 0x3f
  number += (half_ / mul);
 8009538:	ee84 6b07 	vdiv.f64	d6, d4, d7
 800953c:	ee36 6b05 	vadd.f64	d6, d6, d5
  val = (uint64_t)(number * mul);
 8009540:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009544:	ec51 0b17 	vmov	r0, r1, d7
 8009548:	f7f7 f84a 	bl	80005e0 <__aeabi_d2ulz>
 800954c:	4603      	mov	r3, r0
    uint64_t t = val / 10;
 800954e:	469a      	mov	sl, r3
 8009550:	220a      	movs	r2, #10
 8009552:	2300      	movs	r3, #0
 8009554:	9101      	str	r1, [sp, #4]
 8009556:	4650      	mov	r0, sl
 8009558:	f7f7 f828 	bl	80005ac <__aeabi_uldivmod>
    chr = (val - t * 10) + '0';
 800955c:	f10a 0c30 	add.w	ip, sl, #48	; 0x30
    uint64_t t = val / 10;
 8009560:	4603      	mov	r3, r0
    chr = (val - t * 10) + '0';
 8009562:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    buf[idx--] = chr;
 8009566:	f109 32ff 	add.w	r2, r9, #4294967295
    chr = (val - t * 10) + '0';
 800956a:	ebac 0040 	sub.w	r0, ip, r0, lsl #1
    buf[idx--] = chr;
 800956e:	f109 0c68 	add.w	ip, r9, #104	; 0x68
 8009572:	44ec      	add	ip, sp
 8009574:	f80c 0c40 	strb.w	r0, [ip, #-64]
    count++;
 8009578:	f108 0001 	add.w	r0, r8, #1
    if (count == specifier->precision) {
 800957c:	4286      	cmp	r6, r0
      buf[idx--] = '.';
 800957e:	bf05      	ittet	eq
 8009580:	3268      	addeq	r2, #104	; 0x68
 8009582:	202e      	moveq	r0, #46	; 0x2e
    buf[idx--] = chr;
 8009584:	4691      	movne	r9, r2
      buf[idx--] = '.';
 8009586:	f1a9 0902 	subeq.w	r9, r9, #2
 800958a:	bf05      	ittet	eq
 800958c:	446a      	addeq	r2, sp
      count++;
 800958e:	f108 0802 	addeq.w	r8, r8, #2
    count++;
 8009592:	4680      	movne	r8, r0
      buf[idx--] = '.';
 8009594:	f802 0c40 	strbeq.w	r0, [r2, #-64]
  } while (val);
 8009598:	f1ba 0f0a 	cmp.w	sl, #10
 800959c:	9a01      	ldr	r2, [sp, #4]
 800959e:	f172 0200 	sbcs.w	r2, r2, #0
 80095a2:	d2d4      	bcs.n	800954e <vlc_print+0x2ae>
    buf[idx--] = '0';
 80095a4:	4546      	cmp	r6, r8
 80095a6:	f1c6 0001 	rsb	r0, r6, #1
 80095aa:	eba6 0a08 	sub.w	sl, r6, r8
 80095ae:	ab0a      	add	r3, sp, #40	; 0x28
 80095b0:	4440      	add	r0, r8
 80095b2:	bf3c      	itt	cc
 80095b4:	2001      	movcc	r0, #1
 80095b6:	f04f 0a00 	movcc.w	sl, #0
 80095ba:	2130      	movs	r1, #48	; 0x30
 80095bc:	4448      	add	r0, r9
 80095be:	4652      	mov	r2, sl
 80095c0:	4418      	add	r0, r3
 80095c2:	f008 fe03 	bl	80121cc <memset>
 80095c6:	eba8 0306 	sub.w	r3, r8, r6
 80095ca:	4546      	cmp	r6, r8
 80095cc:	bf38      	it	cc
 80095ce:	2300      	movcc	r3, #0
 80095d0:	44d0      	add	r8, sl
  if (count == specifier->precision) {
 80095d2:	4546      	cmp	r6, r8
 80095d4:	4499      	add	r9, r3
 80095d6:	f106 0601 	add.w	r6, r6, #1
 80095da:	d108      	bne.n	80095ee <vlc_print+0x34e>
    buf[idx--] = '.';
 80095dc:	f109 0368 	add.w	r3, r9, #104	; 0x68
 80095e0:	222e      	movs	r2, #46	; 0x2e
    count++;
 80095e2:	46b0      	mov	r8, r6
    buf[idx--] = '.';
 80095e4:	f109 39ff 	add.w	r9, r9, #4294967295
 80095e8:	446b      	add	r3, sp
 80095ea:	f803 2c40 	strb.w	r2, [r3, #-64]
  if (count == specifier->precision + 1)
 80095ee:	4546      	cmp	r6, r8
 80095f0:	d109      	bne.n	8009606 <vlc_print+0x366>
    buf[idx--] = '0';
 80095f2:	f109 0368 	add.w	r3, r9, #104	; 0x68
 80095f6:	2230      	movs	r2, #48	; 0x30
    count++;
 80095f8:	f108 0801 	add.w	r8, r8, #1
    buf[idx--] = '0';
 80095fc:	f109 39ff 	add.w	r9, r9, #4294967295
 8009600:	446b      	add	r3, sp
 8009602:	f803 2c40 	strb.w	r2, [r3, #-64]
  if (is_signed) {
 8009606:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
 800960a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800960e:	d509      	bpl.n	8009624 <vlc_print+0x384>
    buf[idx--] = '-';
 8009610:	f109 0368 	add.w	r3, r9, #104	; 0x68
 8009614:	222d      	movs	r2, #45	; 0x2d
    count++;
 8009616:	f108 0801 	add.w	r8, r8, #1
    buf[idx--] = '-';
 800961a:	f109 39ff 	add.w	r9, r9, #4294967295
 800961e:	446b      	add	r3, sp
 8009620:	f803 2c40 	strb.w	r2, [r3, #-64]
  while (count < specifier->width) {
 8009624:	9e05      	ldr	r6, [sp, #20]
    buf[idx--] = ' ';
 8009626:	ab0a      	add	r3, sp, #40	; 0x28
 8009628:	2120      	movs	r1, #32
 800962a:	45b0      	cmp	r8, r6
 800962c:	f1c6 0001 	rsb	r0, r6, #1
 8009630:	eba6 0a08 	sub.w	sl, r6, r8
 8009634:	4440      	add	r0, r8
 8009636:	bf84      	itt	hi
 8009638:	2001      	movhi	r0, #1
 800963a:	f04f 0a00 	movhi.w	sl, #0
 800963e:	4448      	add	r0, r9
 8009640:	4652      	mov	r2, sl
 8009642:	4418      	add	r0, r3
 8009644:	f008 fdc2 	bl	80121cc <memset>
  for(int i = 0; i < count; i++) {
 8009648:	eba8 0306 	sub.w	r3, r8, r6
 800964c:	45b0      	cmp	r8, r6
 800964e:	bf88      	it	hi
 8009650:	2300      	movhi	r3, #0
 8009652:	44d0      	add	r8, sl
 8009654:	2600      	movs	r6, #0
 8009656:	4499      	add	r9, r3
 8009658:	ab0a      	add	r3, sp, #40	; 0x28
 800965a:	4499      	add	r9, r3
 800965c:	45b0      	cmp	r8, r6
 800965e:	d108      	bne.n	8009672 <vlc_print+0x3d2>
            count += _write_double(dbl, &specifier);
 8009660:	4445      	add	r5, r8
            break;
 8009662:	e701      	b.n	8009468 <vlc_print+0x1c8>
    mul *= 10;
 8009664:	ee27 7b06 	vmul.f64	d7, d7, d6
  for (int i=0;i <specifier->precision; i++)
 8009668:	3301      	adds	r3, #1
 800966a:	e754      	b.n	8009516 <vlc_print+0x276>
 800966c:	eeb0 5b48 	vmov.f64	d5, d8
 8009670:	e75c      	b.n	800952c <vlc_print+0x28c>
    specifier->putc_fct(specifier->user, (buf + idx)[i]);
 8009672:	f819 1f01 	ldrb.w	r1, [r9, #1]!
  for(int i = 0; i < count; i++) {
 8009676:	3601      	adds	r6, #1
    specifier->putc_fct(specifier->user, (buf + idx)[i]);
 8009678:	e9dd 3008 	ldrd	r3, r0, [sp, #32]
 800967c:	4798      	blx	r3
  for(int i = 0; i < count; i++) {
 800967e:	e7ed      	b.n	800965c <vlc_print+0x3bc>
 8009680:	f1be 0f00 	cmp.w	lr, #0
 8009684:	d000      	beq.n	8009688 <vlc_print+0x3e8>
 8009686:	9005      	str	r0, [sp, #20]
 8009688:	f1b8 0f00 	cmp.w	r8, #0
 800968c:	d000      	beq.n	8009690 <vlc_print+0x3f0>
 800968e:	9206      	str	r2, [sp, #24]
 8009690:	2b00      	cmp	r3, #0
 8009692:	f43f ae83 	beq.w	800939c <vlc_print+0xfc>
 8009696:	9b01      	ldr	r3, [sp, #4]
 8009698:	9307      	str	r3, [sp, #28]
 800969a:	e67f      	b.n	800939c <vlc_print+0xfc>
          has_precision = true;
 800969c:	f04f 0c01 	mov.w	ip, #1
 80096a0:	e629      	b.n	80092f6 <vlc_print+0x56>
          long_type = true;
 80096a2:	2101      	movs	r1, #1
 80096a4:	9103      	str	r1, [sp, #12]
      while (done == false) {
 80096a6:	e626      	b.n	80092f6 <vlc_print+0x56>
 80096a8:	08015b58 	.word	0x08015b58

080096ac <ai_modelstrojnegaucenja_get_report>:


AI_API_ENTRY
ai_bool ai_modelstrojnegaucenja_get_report(
  ai_handle network, ai_network_report* report)
{
 80096ac:	b570      	push	{r4, r5, r6, lr}
 80096ae:	460d      	mov	r5, r1
 80096b0:	b0a0      	sub	sp, #128	; 0x80
 80096b2:	4606      	mov	r6, r0
  ai_network* net_ctx = AI_NETWORK_ACQUIRE_CTX(network);
 80096b4:	f001 ff70 	bl	800b598 <ai_platform_context_acquire>
 80096b8:	4604      	mov	r4, r0

  if (report && net_ctx)
 80096ba:	2d00      	cmp	r5, #0
 80096bc:	d035      	beq.n	800972a <ai_modelstrojnegaucenja_get_report+0x7e>
 80096be:	2800      	cmp	r0, #0
 80096c0:	d030      	beq.n	8009724 <ai_modelstrojnegaucenja_get_report+0x78>
  {
    ai_network_report r = {
 80096c2:	226c      	movs	r2, #108	; 0x6c
 80096c4:	2100      	movs	r1, #0
 80096c6:	a805      	add	r0, sp, #20
 80096c8:	f008 fd80 	bl	80121cc <memset>
 80096cc:	4b18      	ldr	r3, [pc, #96]	; (8009730 <ai_modelstrojnegaucenja_get_report+0x84>)
 80096ce:	9301      	str	r3, [sp, #4]
 80096d0:	4b18      	ldr	r3, [pc, #96]	; (8009734 <ai_modelstrojnegaucenja_get_report+0x88>)
 80096d2:	9302      	str	r3, [sp, #8]
 80096d4:	4b18      	ldr	r3, [pc, #96]	; (8009738 <ai_modelstrojnegaucenja_get_report+0x8c>)
 80096d6:	9303      	str	r3, [sp, #12]
 80096d8:	4b18      	ldr	r3, [pc, #96]	; (800973c <ai_modelstrojnegaucenja_get_report+0x90>)
 80096da:	9304      	str	r3, [sp, #16]
      .model_signature   = AI_MODELSTROJNEGAUCENJA_MODEL_SIGNATURE,
      .model_datetime    = AI_TOOLS_DATE_TIME,
      
      .compile_datetime  = AI_TOOLS_COMPILE_TIME,
      
      .runtime_revision  = ai_platform_runtime_get_revision(),
 80096dc:	f001 fd22 	bl	800b124 <ai_platform_runtime_get_revision>
    ai_network_report r = {
 80096e0:	9005      	str	r0, [sp, #20]
      .runtime_version   = ai_platform_runtime_get_version(),
 80096e2:	f001 fda3 	bl	800b22c <ai_platform_runtime_get_version>
    ai_network_report r = {
 80096e6:	4b16      	ldr	r3, [pc, #88]	; (8009740 <ai_modelstrojnegaucenja_get_report+0x94>)
      .runtime_version   = ai_platform_runtime_get_version(),
 80096e8:	9006      	str	r0, [sp, #24]
    ai_network_report r = {
 80096ea:	9307      	str	r3, [sp, #28]
 80096ec:	2308      	movs	r3, #8
 80096ee:	f88d 3020 	strb.w	r3, [sp, #32]
 80096f2:	2301      	movs	r3, #1
 80096f4:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
      .tool_revision     = AI_TOOLS_REVISION_ID,
      .tool_version      = {AI_TOOLS_VERSION_MAJOR, AI_TOOLS_VERSION_MINOR,
                            AI_TOOLS_VERSION_MICRO, 0x0},
      .tool_api_version  = AI_STRUCT_INIT,

      .api_version            = ai_platform_api_get_version(),
 80096f8:	f001 fe1e 	bl	800b338 <ai_platform_api_get_version>
 80096fc:	900a      	str	r0, [sp, #40]	; 0x28
      .interface_api_version  = ai_platform_interface_api_get_version(),
 80096fe:	f001 feb3 	bl	800b468 <ai_platform_interface_api_get_version>
    ai_network_report r = {
 8009702:	f240 5334 	movw	r3, #1332	; 0x534
      .interface_api_version  = ai_platform_interface_api_get_version(),
 8009706:	900b      	str	r0, [sp, #44]	; 0x2c
      .map_activations   = AI_STRUCT_INIT,
      .n_nodes           = 0,
      .signature         = 0x0,
    };

    if (!ai_platform_api_get_network_report(network, &r)) return false;
 8009708:	a901      	add	r1, sp, #4
 800970a:	4630      	mov	r0, r6
    ai_network_report r = {
 800970c:	930c      	str	r3, [sp, #48]	; 0x30
 800970e:	4b0d      	ldr	r3, [pc, #52]	; (8009744 <ai_modelstrojnegaucenja_get_report+0x98>)
 8009710:	9310      	str	r3, [sp, #64]	; 0x40
    if (!ai_platform_api_get_network_report(network, &r)) return false;
 8009712:	f002 f8df 	bl	800b8d4 <ai_platform_api_get_network_report>
 8009716:	4604      	mov	r4, r0
 8009718:	b120      	cbz	r0, 8009724 <ai_modelstrojnegaucenja_get_report+0x78>

    *report = r;
 800971a:	227c      	movs	r2, #124	; 0x7c
 800971c:	a901      	add	r1, sp, #4
 800971e:	4628      	mov	r0, r5
 8009720:	f008 fd46 	bl	80121b0 <memcpy>
    return true;
  }
  return false;
}
 8009724:	4620      	mov	r0, r4
 8009726:	b020      	add	sp, #128	; 0x80
 8009728:	bd70      	pop	{r4, r5, r6, pc}
  return false;
 800972a:	462c      	mov	r4, r5
 800972c:	e7fa      	b.n	8009724 <ai_modelstrojnegaucenja_get_report+0x78>
 800972e:	bf00      	nop
 8009730:	08015b16 	.word	0x08015b16
 8009734:	08015b5f 	.word	0x08015b5f
 8009738:	08015b80 	.word	0x08015b80
 800973c:	08015b99 	.word	0x08015b99
 8009740:	08016b47 	.word	0x08016b47
 8009744:	a1facade 	.word	0xa1facade

08009748 <ai_modelstrojnegaucenja_get_error>:

AI_API_ENTRY
ai_error ai_modelstrojnegaucenja_get_error(ai_handle network)
{
  return ai_platform_network_get_error(network);
 8009748:	f001 bfb2 	b.w	800b6b0 <ai_platform_network_get_error>

0800974c <ai_modelstrojnegaucenja_create>:
}

AI_API_ENTRY
ai_error ai_modelstrojnegaucenja_create(
  ai_handle* network, const ai_buffer* network_config)
{
 800974c:	b507      	push	{r0, r1, r2, lr}
  return ai_platform_network_create(
 800974e:	2305      	movs	r3, #5
 8009750:	2200      	movs	r2, #0
 8009752:	e9cd 3200 	strd	r3, r2, [sp]
 8009756:	2301      	movs	r3, #1
 8009758:	4a02      	ldr	r2, [pc, #8]	; (8009764 <ai_modelstrojnegaucenja_create+0x18>)
 800975a:	f002 fce9 	bl	800c130 <ai_platform_network_create>
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 800975e:	b003      	add	sp, #12
 8009760:	f85d fb04 	ldr.w	pc, [sp], #4
 8009764:	240003b0 	.word	0x240003b0

08009768 <ai_modelstrojnegaucenja_destroy>:
}

AI_API_ENTRY
ai_handle ai_modelstrojnegaucenja_destroy(ai_handle network)
{
  return ai_platform_network_destroy(network);
 8009768:	f002 bebc 	b.w	800c4e4 <ai_platform_network_destroy>

0800976c <ai_modelstrojnegaucenja_init>:
}

AI_API_ENTRY
ai_bool ai_modelstrojnegaucenja_init(
  ai_handle network, const ai_network_params* params)
{
 800976c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009770:	4607      	mov	r7, r0
 8009772:	460e      	mov	r6, r1
  ai_network* net_ctx = ai_platform_network_init(network, params);
 8009774:	f002 ffbe 	bl	800c6f4 <ai_platform_network_init>
  if (!net_ctx) return false;
 8009778:	4604      	mov	r4, r0
 800977a:	2800      	cmp	r0, #0
 800977c:	d07a      	beq.n	8009874 <ai_modelstrojnegaucenja_init+0x108>
  if (ai_platform_get_weights_map(g_modelstrojnegaucenja_weights_map, 1, params)) {
 800977e:	f8df 8148 	ldr.w	r8, [pc, #328]	; 80098c8 <ai_modelstrojnegaucenja_init+0x15c>
 8009782:	4632      	mov	r2, r6
 8009784:	2101      	movs	r1, #1
 8009786:	4640      	mov	r0, r8
 8009788:	f001 fc02 	bl	800af90 <ai_platform_get_weights_map>
 800978c:	4605      	mov	r5, r0
 800978e:	2800      	cmp	r0, #0
 8009790:	d072      	beq.n	8009878 <ai_modelstrojnegaucenja_init+0x10c>
    label_rho_array.format |= AI_FMT_FLAG_CONST;
 8009792:	4a3f      	ldr	r2, [pc, #252]	; (8009890 <ai_modelstrojnegaucenja_init+0x124>)
 8009794:	6813      	ldr	r3, [r2, #0]
 8009796:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800979a:	6013      	str	r3, [r2, #0]
    label_rho_array.data = AI_PTR(g_modelstrojnegaucenja_weights_map[0] + 0);
 800979c:	f8d8 3000 	ldr.w	r3, [r8]
    label_rho_array.data_start = AI_PTR(g_modelstrojnegaucenja_weights_map[0] + 0);
 80097a0:	e9c2 3302 	strd	r3, r3, [r2, #8]
    label_classlabels_ints_array.format |= AI_FMT_FLAG_CONST;
 80097a4:	4a3b      	ldr	r2, [pc, #236]	; (8009894 <ai_modelstrojnegaucenja_init+0x128>)
 80097a6:	6811      	ldr	r1, [r2, #0]
 80097a8:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 80097ac:	6011      	str	r1, [r2, #0]
    label_classlabels_ints_array.data = AI_PTR(g_modelstrojnegaucenja_weights_map[0] + 12);
 80097ae:	f103 010c 	add.w	r1, r3, #12
    label_classlabels_ints_array.data_start = AI_PTR(g_modelstrojnegaucenja_weights_map[0] + 12);
 80097b2:	e9c2 1102 	strd	r1, r1, [r2, #8]
    label_vectors_per_class_array.format |= AI_FMT_FLAG_CONST;
 80097b6:	4a38      	ldr	r2, [pc, #224]	; (8009898 <ai_modelstrojnegaucenja_init+0x12c>)
 80097b8:	6811      	ldr	r1, [r2, #0]
 80097ba:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 80097be:	6011      	str	r1, [r2, #0]
    label_vectors_per_class_array.data = AI_PTR(g_modelstrojnegaucenja_weights_map[0] + 16);
 80097c0:	f103 0110 	add.w	r1, r3, #16
    label_vectors_per_class_array.data_start = AI_PTR(g_modelstrojnegaucenja_weights_map[0] + 16);
 80097c4:	e9c2 1102 	strd	r1, r1, [r2, #8]
    label_prob_a_array.format |= AI_FMT_FLAG_CONST;
 80097c8:	4a34      	ldr	r2, [pc, #208]	; (800989c <ai_modelstrojnegaucenja_init+0x130>)
 80097ca:	6811      	ldr	r1, [r2, #0]
 80097cc:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 80097d0:	6011      	str	r1, [r2, #0]
    label_prob_a_array.data = AI_PTR(g_modelstrojnegaucenja_weights_map[0] + 20);
 80097d2:	f103 0114 	add.w	r1, r3, #20
    label_prob_a_array.data_start = AI_PTR(g_modelstrojnegaucenja_weights_map[0] + 20);
 80097d6:	e9c2 1102 	strd	r1, r1, [r2, #8]
    label_prob_b_array.format |= AI_FMT_FLAG_CONST;
 80097da:	4a31      	ldr	r2, [pc, #196]	; (80098a0 <ai_modelstrojnegaucenja_init+0x134>)
 80097dc:	6811      	ldr	r1, [r2, #0]
 80097de:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 80097e2:	6011      	str	r1, [r2, #0]
    label_prob_b_array.data = AI_PTR(g_modelstrojnegaucenja_weights_map[0] + 32);
 80097e4:	f103 0120 	add.w	r1, r3, #32
    label_prob_b_array.data_start = AI_PTR(g_modelstrojnegaucenja_weights_map[0] + 32);
 80097e8:	e9c2 1102 	strd	r1, r1, [r2, #8]
    output_probability_classlabels_ints_array.format |= AI_FMT_FLAG_CONST;
 80097ec:	4a2d      	ldr	r2, [pc, #180]	; (80098a4 <ai_modelstrojnegaucenja_init+0x138>)
 80097ee:	6811      	ldr	r1, [r2, #0]
 80097f0:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 80097f4:	6011      	str	r1, [r2, #0]
    output_probability_classlabels_ints_array.data = AI_PTR(g_modelstrojnegaucenja_weights_map[0] + 44);
 80097f6:	f103 012c 	add.w	r1, r3, #44	; 0x2c
    output_probability_classlabels_ints_array.data_start = AI_PTR(g_modelstrojnegaucenja_weights_map[0] + 44);
 80097fa:	e9c2 1102 	strd	r1, r1, [r2, #8]
    label_coefficients_array.format |= AI_FMT_FLAG_CONST;
 80097fe:	4a2a      	ldr	r2, [pc, #168]	; (80098a8 <ai_modelstrojnegaucenja_init+0x13c>)
 8009800:	6811      	ldr	r1, [r2, #0]
 8009802:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8009806:	6011      	str	r1, [r2, #0]
    label_coefficients_array.data = AI_PTR(g_modelstrojnegaucenja_weights_map[0] + 48);
 8009808:	f103 0130 	add.w	r1, r3, #48	; 0x30
    label_support_vectors_array.data = AI_PTR(g_modelstrojnegaucenja_weights_map[0] + 1112);
 800980c:	f503 638b 	add.w	r3, r3, #1112	; 0x458
    label_coefficients_array.data_start = AI_PTR(g_modelstrojnegaucenja_weights_map[0] + 48);
 8009810:	e9c2 1102 	strd	r1, r1, [r2, #8]
    label_support_vectors_array.format |= AI_FMT_FLAG_CONST;
 8009814:	4a25      	ldr	r2, [pc, #148]	; (80098ac <ai_modelstrojnegaucenja_init+0x140>)
 8009816:	6811      	ldr	r1, [r2, #0]
 8009818:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 800981c:	6011      	str	r1, [r2, #0]
    label_support_vectors_array.data_start = AI_PTR(g_modelstrojnegaucenja_weights_map[0] + 1112);
 800981e:	e9c2 3302 	strd	r3, r3, [r2, #8]
  if (ai_platform_get_activations_map(g_modelstrojnegaucenja_activations_map, 1, params)) {
 8009822:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 80098cc <ai_modelstrojnegaucenja_init+0x160>
 8009826:	4632      	mov	r2, r6
 8009828:	2101      	movs	r1, #1
 800982a:	4640      	mov	r0, r8
 800982c:	f001 fc08 	bl	800b040 <ai_platform_get_activations_map>
 8009830:	4606      	mov	r6, r0
 8009832:	b338      	cbz	r0, 8009884 <ai_modelstrojnegaucenja_init+0x118>
    float_input_output_array.data = AI_PTR(g_modelstrojnegaucenja_activations_map[0] + 0);
 8009834:	f8d8 3000 	ldr.w	r3, [r8]
 8009838:	4a1d      	ldr	r2, [pc, #116]	; (80098b0 <ai_modelstrojnegaucenja_init+0x144>)
    label_scratch0_array.data = AI_PTR(g_modelstrojnegaucenja_activations_map[0] + 4);
 800983a:	1d19      	adds	r1, r3, #4
    float_input_output_array.data_start = AI_PTR(g_modelstrojnegaucenja_activations_map[0] + 0);
 800983c:	e9c2 3302 	strd	r3, r3, [r2, #8]
    label_scratch0_array.data = AI_PTR(g_modelstrojnegaucenja_activations_map[0] + 4);
 8009840:	4a1c      	ldr	r2, [pc, #112]	; (80098b4 <ai_modelstrojnegaucenja_init+0x148>)
    label_scratch0_array.data_start = AI_PTR(g_modelstrojnegaucenja_activations_map[0] + 4);
 8009842:	e9c2 1102 	strd	r1, r1, [r2, #8]
    label_output0_array.data = AI_PTR(g_modelstrojnegaucenja_activations_map[0] + 632);
 8009846:	f503 711e 	add.w	r1, r3, #632	; 0x278
 800984a:	4a1b      	ldr	r2, [pc, #108]	; (80098b8 <ai_modelstrojnegaucenja_init+0x14c>)
    label_output0_array.data_start = AI_PTR(g_modelstrojnegaucenja_activations_map[0] + 632);
 800984c:	e9c2 1102 	strd	r1, r1, [r2, #8]
    label_output1_array.data = AI_PTR(g_modelstrojnegaucenja_activations_map[0] + 636);
 8009850:	f503 711f 	add.w	r1, r3, #636	; 0x27c
 8009854:	4a19      	ldr	r2, [pc, #100]	; (80098bc <ai_modelstrojnegaucenja_init+0x150>)
    label_output1_array.data_start = AI_PTR(g_modelstrojnegaucenja_activations_map[0] + 636);
 8009856:	e9c2 1102 	strd	r1, r1, [r2, #8]
    output_probability_output_array.data = AI_PTR(g_modelstrojnegaucenja_activations_map[0] + 0);
 800985a:	4a19      	ldr	r2, [pc, #100]	; (80098c0 <ai_modelstrojnegaucenja_init+0x154>)
    output_probability_output_array.data_start = AI_PTR(g_modelstrojnegaucenja_activations_map[0] + 0);
 800985c:	e9c2 3302 	strd	r3, r3, [r2, #8]
    output_label_output_array.data = AI_PTR(g_modelstrojnegaucenja_activations_map[0] + 24);
 8009860:	3318      	adds	r3, #24
 8009862:	4a18      	ldr	r2, [pc, #96]	; (80098c4 <ai_modelstrojnegaucenja_init+0x158>)
    output_label_output_array.data_start = AI_PTR(g_modelstrojnegaucenja_activations_map[0] + 24);
 8009864:	e9c2 3302 	strd	r3, r3, [r2, #8]

  ai_bool ok = true;
  ok &= modelstrojnegaucenja_configure_weights(net_ctx, params);
  ok &= modelstrojnegaucenja_configure_activations(net_ctx, params);

  ok &= ai_platform_network_post_init(network);
 8009868:	4638      	mov	r0, r7
 800986a:	f003 f8df 	bl	800ca2c <ai_platform_network_post_init>
 800986e:	4030      	ands	r0, r6
 8009870:	4028      	ands	r0, r5
 8009872:	b2c0      	uxtb	r0, r0

  return ok;
}
 8009874:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 8009878:	2212      	movs	r2, #18
 800987a:	2130      	movs	r1, #48	; 0x30
 800987c:	4620      	mov	r0, r4
 800987e:	f002 f823 	bl	800b8c8 <ai_platform_network_set_error>
  return false;
 8009882:	e7ce      	b.n	8009822 <ai_modelstrojnegaucenja_init+0xb6>
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 8009884:	2213      	movs	r2, #19
 8009886:	2130      	movs	r1, #48	; 0x30
 8009888:	4620      	mov	r0, r4
 800988a:	f002 f81d 	bl	800b8c8 <ai_platform_network_set_error>
  return false;
 800988e:	e7eb      	b.n	8009868 <ai_modelstrojnegaucenja_init+0xfc>
 8009890:	2400054c 	.word	0x2400054c
 8009894:	24000418 	.word	0x24000418
 8009898:	240005d0 	.word	0x240005d0
 800989c:	240004f4 	.word	0x240004f4
 80098a0:	24000520 	.word	0x24000520
 80098a4:	24000648 	.word	0x24000648
 80098a8:	24000444 	.word	0x24000444
 80098ac:	240005a4 	.word	0x240005a4
 80098b0:	240003a0 	.word	0x240003a0
 80098b4:	24000578 	.word	0x24000578
 80098b8:	2400049c 	.word	0x2400049c
 80098bc:	240004c8 	.word	0x240004c8
 80098c0:	24000694 	.word	0x24000694
 80098c4:	2400061c 	.word	0x2400061c
 80098c8:	24001e94 	.word	0x24001e94
 80098cc:	24001e90 	.word	0x24001e90

080098d0 <ai_modelstrojnegaucenja_run>:

AI_API_ENTRY
ai_i32 ai_modelstrojnegaucenja_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
  return ai_platform_network_process(network, input, output);
 80098d0:	f003 b9d6 	b.w	800cc80 <ai_platform_network_process>

080098d4 <ai_modelstrojnegaucenja_forward>:
}

AI_API_ENTRY
ai_i32 ai_modelstrojnegaucenja_forward(ai_handle network, const ai_buffer* input)
{
  return ai_platform_network_process(network, input, NULL);
 80098d4:	2200      	movs	r2, #0
 80098d6:	f003 b9d3 	b.w	800cc80 <ai_platform_network_process>
	...

080098dc <ai_modelstrojnegaucenja_data_params_get>:
 * @ingroup modelstrojnegaucenja_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_modelstrojnegaucenja_data_params_get(ai_network_params* params)
{
 80098dc:	b530      	push	{r4, r5, lr}
  if (!params) return false;
 80098de:	4603      	mov	r3, r0
{
 80098e0:	b085      	sub	sp, #20
  if (!params) return false;
 80098e2:	b170      	cbz	r0, 8009902 <ai_modelstrojnegaucenja_data_params_get+0x26>
  
  const ai_buffer_array map_activations = 
 80098e4:	4c08      	ldr	r4, [pc, #32]	; (8009908 <ai_modelstrojnegaucenja_data_params_get+0x2c>)
 80098e6:	466a      	mov	r2, sp
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_MODELSTROJNEGAUCENJA_DATA_ACTIVATIONS_COUNT, g_modelstrojnegaucenja_data_map_activations);
  
  const ai_buffer_array map_weights = 
 80098e8:	ad02      	add	r5, sp, #8
  const ai_buffer_array map_activations = 
 80098ea:	e894 0003 	ldmia.w	r4, {r0, r1}
 80098ee:	e882 0003 	stmia.w	r2, {r0, r1}
  const ai_buffer_array map_weights = 
 80098f2:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 80098f6:	e885 0003 	stmia.w	r5, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_MODELSTROJNEGAUCENJA_DATA_WEIGHTS_COUNT, g_modelstrojnegaucenja_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 80098fa:	4629      	mov	r1, r5
 80098fc:	4618      	mov	r0, r3
 80098fe:	f001 fbf7 	bl	800b0f0 <ai_platform_bind_network_params>
}
 8009902:	b005      	add	sp, #20
 8009904:	bd30      	pop	{r4, r5, pc}
 8009906:	bf00      	nop
 8009908:	08015a68 	.word	0x08015a68

0800990c <pb_field_iter_begin>:

bool pb_field_iter_begin(pb_field_iter_t *iter, const pb_field_t *fields, void *dest_struct)
{
    iter->start = fields;
    iter->pos = fields;
    iter->required_field_index = 0;
 800990c:	2300      	movs	r3, #0
    iter->pos = fields;
 800990e:	e9c0 1100 	strd	r1, r1, [r0]
    iter->dest_struct = dest_struct;
 8009912:	e9c0 3202 	strd	r3, r2, [r0, #8]
    iter->pData = (char*)dest_struct + iter->pos->data_offset;
 8009916:	f8b1 3003 	ldrh.w	r3, [r1, #3]
 800991a:	441a      	add	r2, r3
 800991c:	6102      	str	r2, [r0, #16]
    iter->pSize = (char*)iter->pData + iter->pos->size_offset;
 800991e:	f9b1 3005 	ldrsh.w	r3, [r1, #5]
 8009922:	441a      	add	r2, r3
 8009924:	6142      	str	r2, [r0, #20]
    
    return (iter->pos->tag != 0);
 8009926:	8808      	ldrh	r0, [r1, #0]
}
 8009928:	3800      	subs	r0, #0
 800992a:	bf18      	it	ne
 800992c:	2001      	movne	r0, #1
 800992e:	4770      	bx	lr

08009930 <pb_field_iter_next>:

bool pb_field_iter_next(pb_field_iter_t *iter)
{
    const pb_field_t *prev_field = iter->pos;
 8009930:	6841      	ldr	r1, [r0, #4]
{
 8009932:	4603      	mov	r3, r0

    if (prev_field->tag == 0)
 8009934:	880a      	ldrh	r2, [r1, #0]
{
 8009936:	b570      	push	{r4, r5, r6, lr}
    if (prev_field->tag == 0)
 8009938:	2a00      	cmp	r2, #0
 800993a:	d038      	beq.n	80099ae <pb_field_iter_next+0x7e>
        /* Handle empty message types, where the first field is already the terminator.
         * In other cases, the iter->pos never points to the terminator. */
        return false;
    }
    
    iter->pos++;
 800993c:	f101 020f 	add.w	r2, r1, #15
    
    if (iter->pos->tag == 0)
 8009940:	f8b1 400f 	ldrh.w	r4, [r1, #15]
    iter->pos++;
 8009944:	6042      	str	r2, [r0, #4]
    if (iter->pos->tag == 0)
 8009946:	b92c      	cbnz	r4, 8009954 <pb_field_iter_next+0x24>
    {
        /* Wrapped back to beginning, reinitialize */
        (void)pb_field_iter_begin(iter, iter->start, iter->dest_struct);
 8009948:	68c2      	ldr	r2, [r0, #12]
 800994a:	6801      	ldr	r1, [r0, #0]
 800994c:	f7ff ffde 	bl	800990c <pb_field_iter_begin>
        return false;
 8009950:	4620      	mov	r0, r4
    
        iter->pData = (char*)iter->pData + prev_size + iter->pos->data_offset;
        iter->pSize = (char*)iter->pData + iter->pos->size_offset;
        return true;
    }
}
 8009952:	bd70      	pop	{r4, r5, r6, pc}
        if (PB_HTYPE(prev_field->type) == PB_HTYPE_ONEOF &&
 8009954:	7888      	ldrb	r0, [r1, #2]
        size_t prev_size = prev_field->data_size;
 8009956:	f8b1 2007 	ldrh.w	r2, [r1, #7]
        if (PB_HTYPE(prev_field->type) == PB_HTYPE_ONEOF &&
 800995a:	f000 0630 	and.w	r6, r0, #48	; 0x30
            iter->pos->data_offset == PB_SIZE_MAX)
 800995e:	8a4c      	ldrh	r4, [r1, #18]
        if (PB_HTYPE(prev_field->type) == PB_HTYPE_ONEOF &&
 8009960:	2e30      	cmp	r6, #48	; 0x30
 8009962:	d10a      	bne.n	800997a <pb_field_iter_next+0x4a>
 8009964:	7c4d      	ldrb	r5, [r1, #17]
 8009966:	f005 0530 	and.w	r5, r5, #48	; 0x30
 800996a:	2d30      	cmp	r5, #48	; 0x30
 800996c:	d119      	bne.n	80099a2 <pb_field_iter_next+0x72>
            PB_HTYPE(iter->pos->type) == PB_HTYPE_ONEOF &&
 800996e:	f64f 75ff 	movw	r5, #65535	; 0xffff
 8009972:	42ac      	cmp	r4, r5
 8009974:	d115      	bne.n	80099a2 <pb_field_iter_next+0x72>
            return true;
 8009976:	2001      	movs	r0, #1
 8009978:	e7eb      	b.n	8009952 <pb_field_iter_next+0x22>
        else if (PB_ATYPE(prev_field->type) == PB_ATYPE_STATIC &&
 800997a:	f000 05f0 	and.w	r5, r0, #240	; 0xf0
 800997e:	2d20      	cmp	r5, #32
 8009980:	d10f      	bne.n	80099a2 <pb_field_iter_next+0x72>
            prev_size *= prev_field->array_size;
 8009982:	f8b1 0009 	ldrh.w	r0, [r1, #9]
 8009986:	4342      	muls	r2, r0
        if (PB_HTYPE(prev_field->type) == PB_HTYPE_REQUIRED)
 8009988:	b916      	cbnz	r6, 8009990 <pb_field_iter_next+0x60>
            iter->required_field_index++;
 800998a:	6898      	ldr	r0, [r3, #8]
 800998c:	3001      	adds	r0, #1
 800998e:	6098      	str	r0, [r3, #8]
        iter->pData = (char*)iter->pData + prev_size + iter->pos->data_offset;
 8009990:	4414      	add	r4, r2
 8009992:	691a      	ldr	r2, [r3, #16]
 8009994:	4422      	add	r2, r4
 8009996:	611a      	str	r2, [r3, #16]
        iter->pSize = (char*)iter->pData + iter->pos->size_offset;
 8009998:	f9b1 1014 	ldrsh.w	r1, [r1, #20]
 800999c:	440a      	add	r2, r1
 800999e:	615a      	str	r2, [r3, #20]
        return true;
 80099a0:	e7e9      	b.n	8009976 <pb_field_iter_next+0x46>
        else if (PB_ATYPE(prev_field->type) == PB_ATYPE_POINTER)
 80099a2:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
            prev_size = sizeof(void*);
 80099a6:	2880      	cmp	r0, #128	; 0x80
 80099a8:	bf08      	it	eq
 80099aa:	2204      	moveq	r2, #4
 80099ac:	e7ec      	b.n	8009988 <pb_field_iter_next+0x58>
        return false;
 80099ae:	4610      	mov	r0, r2
 80099b0:	e7cf      	b.n	8009952 <pb_field_iter_next+0x22>

080099b2 <pb_field_iter_find>:

bool pb_field_iter_find(pb_field_iter_t *iter, uint32_t tag)
{
 80099b2:	b570      	push	{r4, r5, r6, lr}
 80099b4:	4604      	mov	r4, r0
 80099b6:	460d      	mov	r5, r1
    const pb_field_t *start = iter->pos;
 80099b8:	6846      	ldr	r6, [r0, #4]
    
    do {
        if (iter->pos->tag == tag &&
 80099ba:	6863      	ldr	r3, [r4, #4]
 80099bc:	881a      	ldrh	r2, [r3, #0]
 80099be:	42aa      	cmp	r2, r5
 80099c0:	d104      	bne.n	80099cc <pb_field_iter_find+0x1a>
 80099c2:	789b      	ldrb	r3, [r3, #2]
 80099c4:	f003 030f 	and.w	r3, r3, #15
 80099c8:	2b08      	cmp	r3, #8
 80099ca:	d107      	bne.n	80099dc <pb_field_iter_find+0x2a>
        {
            /* Found the wanted field */
            return true;
        }
        
        (void)pb_field_iter_next(iter);
 80099cc:	4620      	mov	r0, r4
 80099ce:	f7ff ffaf 	bl	8009930 <pb_field_iter_next>
    } while (iter->pos != start);
 80099d2:	6863      	ldr	r3, [r4, #4]
 80099d4:	42b3      	cmp	r3, r6
 80099d6:	d1f0      	bne.n	80099ba <pb_field_iter_find+0x8>
    
    /* Searched all the way back to start, and found nothing. */
    return false;
 80099d8:	2000      	movs	r0, #0
}
 80099da:	bd70      	pop	{r4, r5, r6, pc}
            return true;
 80099dc:	2001      	movs	r0, #1
 80099de:	e7fc      	b.n	80099da <pb_field_iter_find+0x28>

080099e0 <buf_read>:
/*******************************
 * pb_istream_t implementation *
 *******************************/

static bool checkreturn buf_read(pb_istream_t *stream, pb_byte_t *buf, size_t count)
{
 80099e0:	b510      	push	{r4, lr}
    size_t i;
    const pb_byte_t *source = (const pb_byte_t*)stream->state;
 80099e2:	6844      	ldr	r4, [r0, #4]
    stream->state = (pb_byte_t*)stream->state + count;
 80099e4:	18a3      	adds	r3, r4, r2
 80099e6:	6043      	str	r3, [r0, #4]
    
    if (buf != NULL)
 80099e8:	b939      	cbnz	r1, 80099fa <buf_read+0x1a>
        for (i = 0; i < count; i++)
            buf[i] = source[i];
    }
    
    return true;
}
 80099ea:	2001      	movs	r0, #1
 80099ec:	bd10      	pop	{r4, pc}
            buf[i] = source[i];
 80099ee:	5ce0      	ldrb	r0, [r4, r3]
 80099f0:	54c8      	strb	r0, [r1, r3]
        for (i = 0; i < count; i++)
 80099f2:	3301      	adds	r3, #1
 80099f4:	4293      	cmp	r3, r2
 80099f6:	d1fa      	bne.n	80099ee <buf_read+0xe>
 80099f8:	e7f7      	b.n	80099ea <buf_read+0xa>
 80099fa:	2300      	movs	r3, #0
 80099fc:	e7fa      	b.n	80099f4 <buf_read+0x14>

080099fe <pb_field_set_to_default>:
    return false;
}

/* Initialize message fields to default values, recursively */
static void pb_field_set_to_default(pb_field_iter_t *iter)
{
 80099fe:	b570      	push	{r4, r5, r6, lr}
    pb_type_t type;
    type = iter->pos->type;
 8009a00:	6845      	ldr	r5, [r0, #4]
{
 8009a02:	b086      	sub	sp, #24
 8009a04:	4603      	mov	r3, r0
    type = iter->pos->type;
 8009a06:	78aa      	ldrb	r2, [r5, #2]
    
    if (PB_LTYPE(type) == PB_LTYPE_EXTENSION)
 8009a08:	f002 060f 	and.w	r6, r2, #15
 8009a0c:	2e08      	cmp	r6, #8
 8009a0e:	d11e      	bne.n	8009a4e <pb_field_set_to_default+0x50>
    {
        pb_extension_t *ext = *(pb_extension_t* const *)iter->pData;
 8009a10:	6903      	ldr	r3, [r0, #16]
        while (ext != NULL)
        {
            pb_field_iter_t ext_iter;
            ext->found = false;
 8009a12:	2600      	movs	r6, #0
        pb_extension_t *ext = *(pb_extension_t* const *)iter->pData;
 8009a14:	681c      	ldr	r4, [r3, #0]
        while (ext != NULL)
 8009a16:	b90c      	cbnz	r4, 8009a1c <pb_field_set_to_default+0x1e>
    }
    else if (PB_ATYPE(type) == PB_ATYPE_CALLBACK)
    {
        /* Don't overwrite callback */
    }
}
 8009a18:	b006      	add	sp, #24
 8009a1a:	bd70      	pop	{r4, r5, r6, pc}
    const pb_field_t *field = (const pb_field_t*)extension->type->arg;
 8009a1c:	6823      	ldr	r3, [r4, #0]
    (void)pb_field_iter_begin(iter, field, extension->dest);
 8009a1e:	4668      	mov	r0, sp
 8009a20:	6862      	ldr	r2, [r4, #4]
    const pb_field_t *field = (const pb_field_t*)extension->type->arg;
 8009a22:	689d      	ldr	r5, [r3, #8]
            ext->found = false;
 8009a24:	7326      	strb	r6, [r4, #12]
    (void)pb_field_iter_begin(iter, field, extension->dest);
 8009a26:	4629      	mov	r1, r5
 8009a28:	f7ff ff70 	bl	800990c <pb_field_iter_begin>
    iter->pData = extension->dest;
 8009a2c:	6863      	ldr	r3, [r4, #4]
            pb_field_set_to_default(&ext_iter);
 8009a2e:	4668      	mov	r0, sp
    iter->pData = extension->dest;
 8009a30:	9304      	str	r3, [sp, #16]
    iter->pSize = &extension->found;
 8009a32:	f104 030c 	add.w	r3, r4, #12
 8009a36:	9305      	str	r3, [sp, #20]
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 8009a38:	78ab      	ldrb	r3, [r5, #2]
 8009a3a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009a3e:	2b80      	cmp	r3, #128	; 0x80
        iter->pData = &extension->dest;
 8009a40:	bf04      	itt	eq
 8009a42:	1d23      	addeq	r3, r4, #4
 8009a44:	9304      	streq	r3, [sp, #16]
            pb_field_set_to_default(&ext_iter);
 8009a46:	f7ff ffda 	bl	80099fe <pb_field_set_to_default>
            ext = ext->next;
 8009a4a:	68a4      	ldr	r4, [r4, #8]
 8009a4c:	e7e3      	b.n	8009a16 <pb_field_set_to_default+0x18>
    else if (PB_ATYPE(type) == PB_ATYPE_STATIC)
 8009a4e:	f012 01c0 	ands.w	r1, r2, #192	; 0xc0
 8009a52:	d127      	bne.n	8009aa4 <pb_field_set_to_default+0xa6>
        if (PB_HTYPE(type) == PB_HTYPE_OPTIONAL && iter->pSize != iter->pData)
 8009a54:	f002 0030 	and.w	r0, r2, #48	; 0x30
 8009a58:	2810      	cmp	r0, #16
 8009a5a:	d110      	bne.n	8009a7e <pb_field_set_to_default+0x80>
 8009a5c:	e9d3 0204 	ldrd	r0, r2, [r3, #16]
 8009a60:	4282      	cmp	r2, r0
 8009a62:	d000      	beq.n	8009a66 <pb_field_set_to_default+0x68>
            *(bool*)iter->pSize = false;
 8009a64:	7011      	strb	r1, [r2, #0]
            if (PB_LTYPE(iter->pos->type) == PB_LTYPE_SUBMESSAGE)
 8009a66:	2e07      	cmp	r6, #7
                pb_message_set_to_defaults((const pb_field_t *) iter->pos->ptr, iter->pData);
 8009a68:	f8d5 400b 	ldr.w	r4, [r5, #11]
        pb_extension_t *ext = *(pb_extension_t* const *)iter->pData;
 8009a6c:	6918      	ldr	r0, [r3, #16]
            if (PB_LTYPE(iter->pos->type) == PB_LTYPE_SUBMESSAGE)
 8009a6e:	d10b      	bne.n	8009a88 <pb_field_set_to_default+0x8a>
                pb_message_set_to_defaults((const pb_field_t *) iter->pos->ptr, iter->pData);
 8009a70:	4601      	mov	r1, r0
 8009a72:	4620      	mov	r0, r4
}
 8009a74:	b006      	add	sp, #24
 8009a76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                pb_message_set_to_defaults((const pb_field_t *) iter->pos->ptr, iter->pData);
 8009a7a:	f000 b81b 	b.w	8009ab4 <pb_message_set_to_defaults>
        else if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 8009a7e:	0690      	lsls	r0, r2, #26
 8009a80:	d5f1      	bpl.n	8009a66 <pb_field_set_to_default+0x68>
            *(pb_size_t*)iter->pSize = 0;
 8009a82:	695b      	ldr	r3, [r3, #20]
 8009a84:	8019      	strh	r1, [r3, #0]
}
 8009a86:	e7c7      	b.n	8009a18 <pb_field_set_to_default+0x1a>
                memcpy(iter->pData, iter->pos->ptr, iter->pos->data_size);
 8009a88:	f8b5 2007 	ldrh.w	r2, [r5, #7]
 8009a8c:	4621      	mov	r1, r4
            else if (iter->pos->ptr != NULL)
 8009a8e:	b124      	cbz	r4, 8009a9a <pb_field_set_to_default+0x9c>
}
 8009a90:	b006      	add	sp, #24
 8009a92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                memcpy(iter->pData, iter->pos->ptr, iter->pos->data_size);
 8009a96:	f008 bb8b 	b.w	80121b0 <memcpy>
}
 8009a9a:	b006      	add	sp, #24
 8009a9c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                memset(iter->pData, 0, iter->pos->data_size);
 8009aa0:	f008 bb94 	b.w	80121cc <memset>
    else if (PB_ATYPE(type) == PB_ATYPE_POINTER)
 8009aa4:	2980      	cmp	r1, #128	; 0x80
 8009aa6:	d1b7      	bne.n	8009a18 <pb_field_set_to_default+0x1a>
        *(void**)iter->pData = NULL;
 8009aa8:	6900      	ldr	r0, [r0, #16]
 8009aaa:	2100      	movs	r1, #0
        if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 8009aac:	0692      	lsls	r2, r2, #26
        *(void**)iter->pData = NULL;
 8009aae:	6001      	str	r1, [r0, #0]
        if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 8009ab0:	d5b2      	bpl.n	8009a18 <pb_field_set_to_default+0x1a>
 8009ab2:	e7e6      	b.n	8009a82 <pb_field_set_to_default+0x84>

08009ab4 <pb_message_set_to_defaults>:

static void pb_message_set_to_defaults(const pb_field_t fields[], void *dest_struct)
{
 8009ab4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8009ab6:	460a      	mov	r2, r1
    pb_field_iter_t iter;

    if (!pb_field_iter_begin(&iter, fields, dest_struct))
 8009ab8:	4601      	mov	r1, r0
 8009aba:	4668      	mov	r0, sp
 8009abc:	f7ff ff26 	bl	800990c <pb_field_iter_begin>
 8009ac0:	b130      	cbz	r0, 8009ad0 <pb_message_set_to_defaults+0x1c>
        return; /* Empty message type */
    
    do
    {
        pb_field_set_to_default(&iter);
 8009ac2:	4668      	mov	r0, sp
 8009ac4:	f7ff ff9b 	bl	80099fe <pb_field_set_to_default>
    } while (pb_field_iter_next(&iter));
 8009ac8:	4668      	mov	r0, sp
 8009aca:	f7ff ff31 	bl	8009930 <pb_field_iter_next>
 8009ace:	e7f7      	b.n	8009ac0 <pb_message_set_to_defaults+0xc>
}
 8009ad0:	b007      	add	sp, #28
 8009ad2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08009ad8 <pb_readbyte>:
    if (stream->bytes_left == 0)
 8009ad8:	6883      	ldr	r3, [r0, #8]
{
 8009ada:	b510      	push	{r4, lr}
 8009adc:	4604      	mov	r4, r0
    if (stream->bytes_left == 0)
 8009ade:	b93b      	cbnz	r3, 8009af0 <pb_readbyte+0x18>
        PB_RETURN_ERROR(stream, "end-of-stream");
 8009ae0:	68c2      	ldr	r2, [r0, #12]
 8009ae2:	490b      	ldr	r1, [pc, #44]	; (8009b10 <pb_readbyte+0x38>)
 8009ae4:	2a00      	cmp	r2, #0
 8009ae6:	bf08      	it	eq
 8009ae8:	460a      	moveq	r2, r1
 8009aea:	60c2      	str	r2, [r0, #12]
 8009aec:	4618      	mov	r0, r3
}
 8009aee:	bd10      	pop	{r4, pc}
    if (!stream->callback(stream, buf, 1))
 8009af0:	6803      	ldr	r3, [r0, #0]
 8009af2:	2201      	movs	r2, #1
 8009af4:	4798      	blx	r3
 8009af6:	b930      	cbnz	r0, 8009b06 <pb_readbyte+0x2e>
        PB_RETURN_ERROR(stream, "io error");
 8009af8:	68e3      	ldr	r3, [r4, #12]
 8009afa:	4a06      	ldr	r2, [pc, #24]	; (8009b14 <pb_readbyte+0x3c>)
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	bf08      	it	eq
 8009b00:	4613      	moveq	r3, r2
 8009b02:	60e3      	str	r3, [r4, #12]
 8009b04:	e7f3      	b.n	8009aee <pb_readbyte+0x16>
    stream->bytes_left--;
 8009b06:	68a3      	ldr	r3, [r4, #8]
 8009b08:	3b01      	subs	r3, #1
 8009b0a:	60a3      	str	r3, [r4, #8]
    return true;    
 8009b0c:	e7ef      	b.n	8009aee <pb_readbyte+0x16>
 8009b0e:	bf00      	nop
 8009b10:	08016250 	.word	0x08016250
 8009b14:	0801625e 	.word	0x0801625e

08009b18 <pb_decode_varint32_eof>:
{
 8009b18:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009b1c:	4688      	mov	r8, r1
    if (!pb_readbyte(stream, &byte))
 8009b1e:	f10d 0107 	add.w	r1, sp, #7
{
 8009b22:	4605      	mov	r5, r0
 8009b24:	4614      	mov	r4, r2
    if (!pb_readbyte(stream, &byte))
 8009b26:	f7ff ffd7 	bl	8009ad8 <pb_readbyte>
 8009b2a:	4606      	mov	r6, r0
 8009b2c:	b958      	cbnz	r0, 8009b46 <pb_decode_varint32_eof+0x2e>
        if (stream->bytes_left == 0)
 8009b2e:	68ab      	ldr	r3, [r5, #8]
 8009b30:	b10b      	cbz	r3, 8009b36 <pb_decode_varint32_eof+0x1e>
                    PB_RETURN_ERROR(stream, "varint overflow");
 8009b32:	2600      	movs	r6, #0
 8009b34:	e003      	b.n	8009b3e <pb_decode_varint32_eof+0x26>
            if (eof)
 8009b36:	2c00      	cmp	r4, #0
 8009b38:	d0fb      	beq.n	8009b32 <pb_decode_varint32_eof+0x1a>
                *eof = true;
 8009b3a:	2301      	movs	r3, #1
 8009b3c:	7023      	strb	r3, [r4, #0]
}
 8009b3e:	4630      	mov	r0, r6
 8009b40:	b002      	add	sp, #8
 8009b42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((byte & 0x80) == 0)
 8009b46:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 8009b4a:	f89d 4007 	ldrb.w	r4, [sp, #7]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	da2a      	bge.n	8009ba8 <pb_decode_varint32_eof+0x90>
        result = byte & 0x7F;
 8009b52:	f004 047f 	and.w	r4, r4, #127	; 0x7f
        uint_fast8_t bitpos = 7;
 8009b56:	2707      	movs	r7, #7
            if (!pb_readbyte(stream, &byte))
 8009b58:	f10d 0107 	add.w	r1, sp, #7
 8009b5c:	4628      	mov	r0, r5
 8009b5e:	f7ff ffbb 	bl	8009ad8 <pb_readbyte>
 8009b62:	2800      	cmp	r0, #0
 8009b64:	d0e5      	beq.n	8009b32 <pb_decode_varint32_eof+0x1a>
                if ((byte & 0x7F) != 0x00 && ((result >> 31) == 0 || byte != sign_extension))
 8009b66:	f89d 3007 	ldrb.w	r3, [sp, #7]
            if (bitpos >= 32)
 8009b6a:	2f1f      	cmp	r7, #31
 8009b6c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009b70:	d90f      	bls.n	8009b92 <pb_decode_varint32_eof+0x7a>
                uint8_t sign_extension = (bitpos < 63) ? 0xFF : 0x01;
 8009b72:	2f3f      	cmp	r7, #63	; 0x3f
 8009b74:	bf34      	ite	cc
 8009b76:	21ff      	movcc	r1, #255	; 0xff
 8009b78:	2101      	movcs	r1, #1
                if ((byte & 0x7F) != 0x00 && ((result >> 31) == 0 || byte != sign_extension))
 8009b7a:	b162      	cbz	r2, 8009b96 <pb_decode_varint32_eof+0x7e>
 8009b7c:	2c00      	cmp	r4, #0
 8009b7e:	da01      	bge.n	8009b84 <pb_decode_varint32_eof+0x6c>
 8009b80:	4299      	cmp	r1, r3
 8009b82:	d008      	beq.n	8009b96 <pb_decode_varint32_eof+0x7e>
                    PB_RETURN_ERROR(stream, "varint overflow");
 8009b84:	68eb      	ldr	r3, [r5, #12]
 8009b86:	4a0a      	ldr	r2, [pc, #40]	; (8009bb0 <pb_decode_varint32_eof+0x98>)
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	bf08      	it	eq
 8009b8c:	4613      	moveq	r3, r2
 8009b8e:	60eb      	str	r3, [r5, #12]
 8009b90:	e7cf      	b.n	8009b32 <pb_decode_varint32_eof+0x1a>
                result |= (uint32_t)(byte & 0x7F) << bitpos;
 8009b92:	40ba      	lsls	r2, r7
 8009b94:	4314      	orrs	r4, r2
        } while (byte & 0x80);
 8009b96:	061a      	lsls	r2, r3, #24
            bitpos = (uint_fast8_t)(bitpos + 7);
 8009b98:	f107 0707 	add.w	r7, r7, #7
        } while (byte & 0x80);
 8009b9c:	d4dc      	bmi.n	8009b58 <pb_decode_varint32_eof+0x40>
        if (bitpos == 35 && (byte & 0x70) != 0)
 8009b9e:	2f23      	cmp	r7, #35	; 0x23
 8009ba0:	d102      	bne.n	8009ba8 <pb_decode_varint32_eof+0x90>
 8009ba2:	f013 0f70 	tst.w	r3, #112	; 0x70
 8009ba6:	d1ed      	bne.n	8009b84 <pb_decode_varint32_eof+0x6c>
   *dest = result;
 8009ba8:	f8c8 4000 	str.w	r4, [r8]
   return true;
 8009bac:	e7c7      	b.n	8009b3e <pb_decode_varint32_eof+0x26>
 8009bae:	bf00      	nop
 8009bb0:	08016267 	.word	0x08016267

08009bb4 <pb_read>:
{
 8009bb4:	b530      	push	{r4, r5, lr}
 8009bb6:	4604      	mov	r4, r0
 8009bb8:	b085      	sub	sp, #20
 8009bba:	4615      	mov	r5, r2
	if (buf == NULL && stream->callback != buf_read)
 8009bbc:	b9a9      	cbnz	r1, 8009bea <pb_read+0x36>
 8009bbe:	6802      	ldr	r2, [r0, #0]
 8009bc0:	4b17      	ldr	r3, [pc, #92]	; (8009c20 <pb_read+0x6c>)
 8009bc2:	429a      	cmp	r2, r3
 8009bc4:	d011      	beq.n	8009bea <pb_read+0x36>
		while (count > 16)
 8009bc6:	2d10      	cmp	r5, #16
 8009bc8:	d806      	bhi.n	8009bd8 <pb_read+0x24>
		return pb_read(stream, tmp, count);
 8009bca:	462a      	mov	r2, r5
 8009bcc:	4669      	mov	r1, sp
 8009bce:	4620      	mov	r0, r4
 8009bd0:	f7ff fff0 	bl	8009bb4 <pb_read>
}
 8009bd4:	b005      	add	sp, #20
 8009bd6:	bd30      	pop	{r4, r5, pc}
			if (!pb_read(stream, tmp, 16))
 8009bd8:	2210      	movs	r2, #16
 8009bda:	4669      	mov	r1, sp
 8009bdc:	4620      	mov	r0, r4
 8009bde:	f7ff ffe9 	bl	8009bb4 <pb_read>
 8009be2:	2800      	cmp	r0, #0
 8009be4:	d0f6      	beq.n	8009bd4 <pb_read+0x20>
			count -= 16;
 8009be6:	3d10      	subs	r5, #16
 8009be8:	e7ed      	b.n	8009bc6 <pb_read+0x12>
    if (stream->bytes_left < count)
 8009bea:	68a3      	ldr	r3, [r4, #8]
 8009bec:	42ab      	cmp	r3, r5
 8009bee:	d207      	bcs.n	8009c00 <pb_read+0x4c>
        PB_RETURN_ERROR(stream, "end-of-stream");
 8009bf0:	68e3      	ldr	r3, [r4, #12]
 8009bf2:	2000      	movs	r0, #0
 8009bf4:	4a0b      	ldr	r2, [pc, #44]	; (8009c24 <pb_read+0x70>)
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	bf08      	it	eq
 8009bfa:	4613      	moveq	r3, r2
 8009bfc:	60e3      	str	r3, [r4, #12]
 8009bfe:	e7e9      	b.n	8009bd4 <pb_read+0x20>
    if (!stream->callback(stream, buf, count))
 8009c00:	6823      	ldr	r3, [r4, #0]
 8009c02:	462a      	mov	r2, r5
 8009c04:	4620      	mov	r0, r4
 8009c06:	4798      	blx	r3
 8009c08:	b930      	cbnz	r0, 8009c18 <pb_read+0x64>
        PB_RETURN_ERROR(stream, "io error");
 8009c0a:	68e3      	ldr	r3, [r4, #12]
 8009c0c:	4a06      	ldr	r2, [pc, #24]	; (8009c28 <pb_read+0x74>)
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	bf08      	it	eq
 8009c12:	4613      	moveq	r3, r2
 8009c14:	60e3      	str	r3, [r4, #12]
 8009c16:	e7dd      	b.n	8009bd4 <pb_read+0x20>
    stream->bytes_left -= count;
 8009c18:	68a2      	ldr	r2, [r4, #8]
 8009c1a:	1b52      	subs	r2, r2, r5
 8009c1c:	60a2      	str	r2, [r4, #8]
    return true;
 8009c1e:	e7d9      	b.n	8009bd4 <pb_read+0x20>
 8009c20:	080099e1 	.word	0x080099e1
 8009c24:	08016250 	.word	0x08016250
 8009c28:	0801625e 	.word	0x0801625e

08009c2c <pb_decode_varint32>:
    return pb_decode_varint32_eof(stream, dest, NULL);
 8009c2c:	2200      	movs	r2, #0
 8009c2e:	f7ff bf73 	b.w	8009b18 <pb_decode_varint32_eof>
	...

08009c34 <pb_dec_fixed_length_bytes>:
        return false;
    return status;
}

static bool checkreturn pb_dec_fixed_length_bytes(pb_istream_t *stream, const pb_field_t *field, void *dest)
{
 8009c34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009c36:	460f      	mov	r7, r1
    uint32_t size;

    if (!pb_decode_varint32(stream, &size))
 8009c38:	a901      	add	r1, sp, #4
{
 8009c3a:	4605      	mov	r5, r0
 8009c3c:	4616      	mov	r6, r2
    if (!pb_decode_varint32(stream, &size))
 8009c3e:	f7ff fff5 	bl	8009c2c <pb_decode_varint32>
 8009c42:	4604      	mov	r4, r0
 8009c44:	b188      	cbz	r0, 8009c6a <pb_dec_fixed_length_bytes+0x36>
        return false;

    if (size > PB_SIZE_MAX)
 8009c46:	9901      	ldr	r1, [sp, #4]
 8009c48:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8009c4c:	d307      	bcc.n	8009c5e <pb_dec_fixed_length_bytes+0x2a>
        PB_RETURN_ERROR(stream, "bytes overflow");
 8009c4e:	68eb      	ldr	r3, [r5, #12]
 8009c50:	4a0d      	ldr	r2, [pc, #52]	; (8009c88 <pb_dec_fixed_length_bytes+0x54>)
        memset(dest, 0, field->data_size);
        return true;
    }

    if (size != field->data_size)
        PB_RETURN_ERROR(stream, "incorrect fixed length bytes size");
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	bf08      	it	eq
 8009c56:	4613      	moveq	r3, r2
 8009c58:	2400      	movs	r4, #0
 8009c5a:	60eb      	str	r3, [r5, #12]
 8009c5c:	e005      	b.n	8009c6a <pb_dec_fixed_length_bytes+0x36>
        memset(dest, 0, field->data_size);
 8009c5e:	f8b7 2007 	ldrh.w	r2, [r7, #7]
    if (size == 0)
 8009c62:	b929      	cbnz	r1, 8009c70 <pb_dec_fixed_length_bytes+0x3c>
        memset(dest, 0, field->data_size);
 8009c64:	4630      	mov	r0, r6
 8009c66:	f008 fab1 	bl	80121cc <memset>

    return pb_read(stream, (pb_byte_t*)dest, field->data_size);
}
 8009c6a:	4620      	mov	r0, r4
 8009c6c:	b003      	add	sp, #12
 8009c6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (size != field->data_size)
 8009c70:	4291      	cmp	r1, r2
 8009c72:	d002      	beq.n	8009c7a <pb_dec_fixed_length_bytes+0x46>
        PB_RETURN_ERROR(stream, "incorrect fixed length bytes size");
 8009c74:	68eb      	ldr	r3, [r5, #12]
 8009c76:	4a05      	ldr	r2, [pc, #20]	; (8009c8c <pb_dec_fixed_length_bytes+0x58>)
 8009c78:	e7eb      	b.n	8009c52 <pb_dec_fixed_length_bytes+0x1e>
    return pb_read(stream, (pb_byte_t*)dest, field->data_size);
 8009c7a:	460a      	mov	r2, r1
 8009c7c:	4628      	mov	r0, r5
 8009c7e:	4631      	mov	r1, r6
 8009c80:	f7ff ff98 	bl	8009bb4 <pb_read>
 8009c84:	4604      	mov	r4, r0
 8009c86:	e7f0      	b.n	8009c6a <pb_dec_fixed_length_bytes+0x36>
 8009c88:	08016277 	.word	0x08016277
 8009c8c:	08016286 	.word	0x08016286

08009c90 <pb_dec_string>:
{
 8009c90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009c92:	460f      	mov	r7, r1
    if (!pb_decode_varint32(stream, &size))
 8009c94:	a901      	add	r1, sp, #4
{
 8009c96:	4604      	mov	r4, r0
 8009c98:	4615      	mov	r5, r2
    if (!pb_decode_varint32(stream, &size))
 8009c9a:	f7ff ffc7 	bl	8009c2c <pb_decode_varint32>
 8009c9e:	b190      	cbz	r0, 8009cc6 <pb_dec_string+0x36>
    alloc_size = size + 1;
 8009ca0:	9a01      	ldr	r2, [sp, #4]
 8009ca2:	2600      	movs	r6, #0
 8009ca4:	1c51      	adds	r1, r2, #1
 8009ca6:	d207      	bcs.n	8009cb8 <pb_dec_string+0x28>
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 8009ca8:	78bb      	ldrb	r3, [r7, #2]
 8009caa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009cae:	2b80      	cmp	r3, #128	; 0x80
 8009cb0:	d10b      	bne.n	8009cca <pb_dec_string+0x3a>
        PB_RETURN_ERROR(stream, "no malloc support");
 8009cb2:	68e3      	ldr	r3, [r4, #12]
 8009cb4:	4a0c      	ldr	r2, [pc, #48]	; (8009ce8 <pb_dec_string+0x58>)
 8009cb6:	e001      	b.n	8009cbc <pb_dec_string+0x2c>
        PB_RETURN_ERROR(stream, "size too large");
 8009cb8:	68e3      	ldr	r3, [r4, #12]
 8009cba:	4a0c      	ldr	r2, [pc, #48]	; (8009cec <pb_dec_string+0x5c>)
        PB_RETURN_ERROR(stream, "no malloc support");
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	bf08      	it	eq
 8009cc0:	4613      	moveq	r3, r2
 8009cc2:	4630      	mov	r0, r6
 8009cc4:	60e3      	str	r3, [r4, #12]
}
 8009cc6:	b003      	add	sp, #12
 8009cc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (alloc_size > field->data_size)
 8009cca:	f8b7 3007 	ldrh.w	r3, [r7, #7]
 8009cce:	428b      	cmp	r3, r1
 8009cd0:	d202      	bcs.n	8009cd8 <pb_dec_string+0x48>
            PB_RETURN_ERROR(stream, "string overflow");
 8009cd2:	68e3      	ldr	r3, [r4, #12]
 8009cd4:	4a06      	ldr	r2, [pc, #24]	; (8009cf0 <pb_dec_string+0x60>)
 8009cd6:	e7f1      	b.n	8009cbc <pb_dec_string+0x2c>
    status = pb_read(stream, (pb_byte_t*)dest, size);
 8009cd8:	4629      	mov	r1, r5
 8009cda:	4620      	mov	r0, r4
 8009cdc:	f7ff ff6a 	bl	8009bb4 <pb_read>
    *((pb_byte_t*)dest + size) = 0;
 8009ce0:	9b01      	ldr	r3, [sp, #4]
 8009ce2:	54ee      	strb	r6, [r5, r3]
    return status;
 8009ce4:	e7ef      	b.n	8009cc6 <pb_dec_string+0x36>
 8009ce6:	bf00      	nop
 8009ce8:	080162b7 	.word	0x080162b7
 8009cec:	080162a8 	.word	0x080162a8
 8009cf0:	080162c9 	.word	0x080162c9

08009cf4 <pb_dec_bytes>:
{
 8009cf4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009cf6:	460e      	mov	r6, r1
    if (!pb_decode_varint32(stream, &size))
 8009cf8:	a901      	add	r1, sp, #4
{
 8009cfa:	4604      	mov	r4, r0
 8009cfc:	4615      	mov	r5, r2
    if (!pb_decode_varint32(stream, &size))
 8009cfe:	f7ff ff95 	bl	8009c2c <pb_decode_varint32>
 8009d02:	b198      	cbz	r0, 8009d2c <pb_dec_bytes+0x38>
    if (size > PB_SIZE_MAX)
 8009d04:	9a01      	ldr	r2, [sp, #4]
 8009d06:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8009d0a:	d302      	bcc.n	8009d12 <pb_dec_bytes+0x1e>
            PB_RETURN_ERROR(stream, "bytes overflow");
 8009d0c:	68e3      	ldr	r3, [r4, #12]
 8009d0e:	4a0e      	ldr	r2, [pc, #56]	; (8009d48 <pb_dec_bytes+0x54>)
 8009d10:	e007      	b.n	8009d22 <pb_dec_bytes+0x2e>
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 8009d12:	78b3      	ldrb	r3, [r6, #2]
    alloc_size = PB_BYTES_ARRAY_T_ALLOCSIZE(size);
 8009d14:	1c91      	adds	r1, r2, #2
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 8009d16:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009d1a:	2b80      	cmp	r3, #128	; 0x80
 8009d1c:	d108      	bne.n	8009d30 <pb_dec_bytes+0x3c>
        PB_RETURN_ERROR(stream, "no malloc support");
 8009d1e:	68e3      	ldr	r3, [r4, #12]
 8009d20:	4a0a      	ldr	r2, [pc, #40]	; (8009d4c <pb_dec_bytes+0x58>)
            PB_RETURN_ERROR(stream, "bytes overflow");
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	bf08      	it	eq
 8009d26:	4613      	moveq	r3, r2
 8009d28:	2000      	movs	r0, #0
 8009d2a:	60e3      	str	r3, [r4, #12]
}
 8009d2c:	b002      	add	sp, #8
 8009d2e:	bd70      	pop	{r4, r5, r6, pc}
        if (alloc_size > field->data_size)
 8009d30:	f8b6 3007 	ldrh.w	r3, [r6, #7]
 8009d34:	428b      	cmp	r3, r1
 8009d36:	d3e9      	bcc.n	8009d0c <pb_dec_bytes+0x18>
    bdest->size = (pb_size_t)size;
 8009d38:	4629      	mov	r1, r5
    return pb_read(stream, bdest->bytes, size);
 8009d3a:	4620      	mov	r0, r4
    bdest->size = (pb_size_t)size;
 8009d3c:	f821 2b02 	strh.w	r2, [r1], #2
    return pb_read(stream, bdest->bytes, size);
 8009d40:	f7ff ff38 	bl	8009bb4 <pb_read>
 8009d44:	e7f2      	b.n	8009d2c <pb_dec_bytes+0x38>
 8009d46:	bf00      	nop
 8009d48:	08016277 	.word	0x08016277
 8009d4c:	080162b7 	.word	0x080162b7

08009d50 <pb_decode_varint>:
{
 8009d50:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    uint64_t result = 0;
 8009d54:	2500      	movs	r5, #0
{
 8009d56:	4606      	mov	r6, r0
 8009d58:	460f      	mov	r7, r1
    uint64_t result = 0;
 8009d5a:	46a8      	mov	r8, r5
    uint_fast8_t bitpos = 0;
 8009d5c:	462c      	mov	r4, r5
        if (!pb_readbyte(stream, &byte))
 8009d5e:	f10d 0107 	add.w	r1, sp, #7
 8009d62:	4630      	mov	r0, r6
 8009d64:	f7ff feb8 	bl	8009ad8 <pb_readbyte>
 8009d68:	b320      	cbz	r0, 8009db4 <pb_decode_varint+0x64>
        result |= (uint64_t)(byte & 0x7F) << bitpos;
 8009d6a:	f89d c007 	ldrb.w	ip, [sp, #7]
 8009d6e:	f1a4 0320 	sub.w	r3, r4, #32
 8009d72:	f1c4 0120 	rsb	r1, r4, #32
 8009d76:	f00c 027f 	and.w	r2, ip, #127	; 0x7f
    } while (byte & 0x80);
 8009d7a:	f01c 0f80 	tst.w	ip, #128	; 0x80
        result |= (uint64_t)(byte & 0x7F) << bitpos;
 8009d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8009d82:	fa22 f101 	lsr.w	r1, r2, r1
 8009d86:	fa02 f204 	lsl.w	r2, r2, r4
        bitpos = (uint_fast8_t)(bitpos + 7);
 8009d8a:	f104 0407 	add.w	r4, r4, #7
        result |= (uint64_t)(byte & 0x7F) << bitpos;
 8009d8e:	ea43 0301 	orr.w	r3, r3, r1
 8009d92:	ea45 0502 	orr.w	r5, r5, r2
 8009d96:	ea43 0808 	orr.w	r8, r3, r8
    } while (byte & 0x80);
 8009d9a:	d102      	bne.n	8009da2 <pb_decode_varint+0x52>
    *dest = result;
 8009d9c:	e9c7 5800 	strd	r5, r8, [r7]
    return true;
 8009da0:	e008      	b.n	8009db4 <pb_decode_varint+0x64>
        if (bitpos >= 64)
 8009da2:	2c46      	cmp	r4, #70	; 0x46
 8009da4:	d1db      	bne.n	8009d5e <pb_decode_varint+0xe>
            PB_RETURN_ERROR(stream, "varint overflow");
 8009da6:	68f3      	ldr	r3, [r6, #12]
 8009da8:	2000      	movs	r0, #0
 8009daa:	4a04      	ldr	r2, [pc, #16]	; (8009dbc <pb_decode_varint+0x6c>)
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	bf08      	it	eq
 8009db0:	4613      	moveq	r3, r2
 8009db2:	60f3      	str	r3, [r6, #12]
}
 8009db4:	b002      	add	sp, #8
 8009db6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009dba:	bf00      	nop
 8009dbc:	08016267 	.word	0x08016267

08009dc0 <pb_dec_uvarint>:
{
 8009dc0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009dc2:	460e      	mov	r6, r1
    if (!pb_decode_varint(stream, &value))
 8009dc4:	4669      	mov	r1, sp
{
 8009dc6:	4604      	mov	r4, r0
 8009dc8:	4615      	mov	r5, r2
    if (!pb_decode_varint(stream, &value))
 8009dca:	f7ff ffc1 	bl	8009d50 <pb_decode_varint>
 8009dce:	b138      	cbz	r0, 8009de0 <pb_dec_uvarint+0x20>
    if (field->data_size == sizeof(pb_uint64_t))
 8009dd0:	f8b6 3007 	ldrh.w	r3, [r6, #7]
 8009dd4:	2b08      	cmp	r3, #8
 8009dd6:	d105      	bne.n	8009de4 <pb_dec_uvarint+0x24>
        clamped = *(pb_uint64_t*)dest = value;
 8009dd8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009ddc:	e9c5 2300 	strd	r2, r3, [r5]
}
 8009de0:	b002      	add	sp, #8
 8009de2:	bd70      	pop	{r4, r5, r6, pc}
    else if (field->data_size == sizeof(uint32_t))
 8009de4:	2b04      	cmp	r3, #4
 8009de6:	d10b      	bne.n	8009e00 <pb_dec_uvarint+0x40>
        clamped = *(uint32_t*)dest = (uint32_t)value;
 8009de8:	9b00      	ldr	r3, [sp, #0]
 8009dea:	602b      	str	r3, [r5, #0]
 8009dec:	2200      	movs	r2, #0
    if (clamped != value)
 8009dee:	e9dd 5100 	ldrd	r5, r1, [sp]
 8009df2:	4291      	cmp	r1, r2
 8009df4:	bf08      	it	eq
 8009df6:	429d      	cmpeq	r5, r3
 8009df8:	d0f2      	beq.n	8009de0 <pb_dec_uvarint+0x20>
        PB_RETURN_ERROR(stream, "integer too large");
 8009dfa:	68e3      	ldr	r3, [r4, #12]
 8009dfc:	4a0b      	ldr	r2, [pc, #44]	; (8009e2c <pb_dec_uvarint+0x6c>)
 8009dfe:	e00e      	b.n	8009e1e <pb_dec_uvarint+0x5e>
    else if (field->data_size == sizeof(uint_least16_t))
 8009e00:	2b02      	cmp	r3, #2
 8009e02:	d103      	bne.n	8009e0c <pb_dec_uvarint+0x4c>
        clamped = *(uint_least16_t*)dest = (uint_least16_t)value;
 8009e04:	9b00      	ldr	r3, [sp, #0]
 8009e06:	802b      	strh	r3, [r5, #0]
 8009e08:	b29b      	uxth	r3, r3
 8009e0a:	e7ef      	b.n	8009dec <pb_dec_uvarint+0x2c>
    else if (field->data_size == sizeof(uint_least8_t))
 8009e0c:	2b01      	cmp	r3, #1
 8009e0e:	d104      	bne.n	8009e1a <pb_dec_uvarint+0x5a>
        clamped = *(uint_least8_t*)dest = (uint_least8_t)value;
 8009e10:	9b00      	ldr	r3, [sp, #0]
 8009e12:	702b      	strb	r3, [r5, #0]
 8009e14:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 8009e18:	e7e8      	b.n	8009dec <pb_dec_uvarint+0x2c>
        PB_RETURN_ERROR(stream, "invalid data_size");
 8009e1a:	68e3      	ldr	r3, [r4, #12]
 8009e1c:	4a04      	ldr	r2, [pc, #16]	; (8009e30 <pb_dec_uvarint+0x70>)
        PB_RETURN_ERROR(stream, "integer too large");
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	bf08      	it	eq
 8009e22:	4613      	moveq	r3, r2
 8009e24:	2000      	movs	r0, #0
 8009e26:	60e3      	str	r3, [r4, #12]
 8009e28:	e7da      	b.n	8009de0 <pb_dec_uvarint+0x20>
 8009e2a:	bf00      	nop
 8009e2c:	080162eb 	.word	0x080162eb
 8009e30:	080162d9 	.word	0x080162d9

08009e34 <pb_dec_varint>:
{
 8009e34:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009e36:	460e      	mov	r6, r1
    if (!pb_decode_varint(stream, &value))
 8009e38:	4669      	mov	r1, sp
{
 8009e3a:	4605      	mov	r5, r0
 8009e3c:	4614      	mov	r4, r2
    if (!pb_decode_varint(stream, &value))
 8009e3e:	f7ff ff87 	bl	8009d50 <pb_decode_varint>
 8009e42:	b138      	cbz	r0, 8009e54 <pb_dec_varint+0x20>
    if (field->data_size == sizeof(pb_int64_t))
 8009e44:	f8b6 3007 	ldrh.w	r3, [r6, #7]
 8009e48:	2b08      	cmp	r3, #8
        svalue = (pb_int64_t)value;
 8009e4a:	e9dd 2100 	ldrd	r2, r1, [sp]
    if (field->data_size == sizeof(pb_int64_t))
 8009e4e:	d103      	bne.n	8009e58 <pb_dec_varint+0x24>
        clamped = *(pb_int64_t*)dest = svalue;
 8009e50:	e9c4 2100 	strd	r2, r1, [r4]
}
 8009e54:	b002      	add	sp, #8
 8009e56:	bd70      	pop	{r4, r5, r6, pc}
    else if (field->data_size == sizeof(int32_t))
 8009e58:	2b04      	cmp	r3, #4
        svalue = (int32_t)value;
 8009e5a:	ea4f 76e2 	mov.w	r6, r2, asr #31
    else if (field->data_size == sizeof(int32_t))
 8009e5e:	d101      	bne.n	8009e64 <pb_dec_varint+0x30>
        clamped = *(int32_t*)dest = (int32_t)svalue;
 8009e60:	6022      	str	r2, [r4, #0]
    if (clamped != svalue)
 8009e62:	e7f7      	b.n	8009e54 <pb_dec_varint+0x20>
    else if (field->data_size == sizeof(int_least16_t))
 8009e64:	2b02      	cmp	r3, #2
 8009e66:	d109      	bne.n	8009e7c <pb_dec_varint+0x48>
        clamped = *(int_least16_t*)dest = (int_least16_t)svalue;
 8009e68:	b213      	sxth	r3, r2
 8009e6a:	8023      	strh	r3, [r4, #0]
        clamped = *(int_least8_t*)dest = (int_least8_t)svalue;
 8009e6c:	17d9      	asrs	r1, r3, #31
    if (clamped != svalue)
 8009e6e:	42b1      	cmp	r1, r6
 8009e70:	bf08      	it	eq
 8009e72:	4293      	cmpeq	r3, r2
 8009e74:	d0ee      	beq.n	8009e54 <pb_dec_varint+0x20>
        PB_RETURN_ERROR(stream, "integer too large");
 8009e76:	68eb      	ldr	r3, [r5, #12]
 8009e78:	4a07      	ldr	r2, [pc, #28]	; (8009e98 <pb_dec_varint+0x64>)
 8009e7a:	e006      	b.n	8009e8a <pb_dec_varint+0x56>
    else if (field->data_size == sizeof(int_least8_t))
 8009e7c:	2b01      	cmp	r3, #1
 8009e7e:	d102      	bne.n	8009e86 <pb_dec_varint+0x52>
        clamped = *(int_least8_t*)dest = (int_least8_t)svalue;
 8009e80:	b253      	sxtb	r3, r2
 8009e82:	7023      	strb	r3, [r4, #0]
 8009e84:	e7f2      	b.n	8009e6c <pb_dec_varint+0x38>
        PB_RETURN_ERROR(stream, "invalid data_size");
 8009e86:	68eb      	ldr	r3, [r5, #12]
 8009e88:	4a04      	ldr	r2, [pc, #16]	; (8009e9c <pb_dec_varint+0x68>)
        PB_RETURN_ERROR(stream, "integer too large");
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	bf08      	it	eq
 8009e8e:	4613      	moveq	r3, r2
 8009e90:	2000      	movs	r0, #0
 8009e92:	60eb      	str	r3, [r5, #12]
 8009e94:	e7de      	b.n	8009e54 <pb_dec_varint+0x20>
 8009e96:	bf00      	nop
 8009e98:	080162eb 	.word	0x080162eb
 8009e9c:	080162d9 	.word	0x080162d9

08009ea0 <pb_decode_tag>:
{
 8009ea0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009ea2:	461d      	mov	r5, r3
    *eof = false;
 8009ea4:	2300      	movs	r3, #0
{
 8009ea6:	460e      	mov	r6, r1
 8009ea8:	4617      	mov	r7, r2
    *eof = false;
 8009eaa:	702b      	strb	r3, [r5, #0]
    *wire_type = (pb_wire_type_t) 0;
 8009eac:	700b      	strb	r3, [r1, #0]
    if (!pb_decode_varint32_eof(stream, &temp, eof))
 8009eae:	a901      	add	r1, sp, #4
    *tag = 0;
 8009eb0:	6013      	str	r3, [r2, #0]
    if (!pb_decode_varint32_eof(stream, &temp, eof))
 8009eb2:	462a      	mov	r2, r5
 8009eb4:	f7ff fe30 	bl	8009b18 <pb_decode_varint32_eof>
 8009eb8:	b120      	cbz	r0, 8009ec4 <pb_decode_tag+0x24>
    if (temp == 0)
 8009eba:	9c01      	ldr	r4, [sp, #4]
 8009ebc:	b924      	cbnz	r4, 8009ec8 <pb_decode_tag+0x28>
        *eof = true; /* Special feature: allow 0-terminated messages. */
 8009ebe:	2301      	movs	r3, #1
        return false;
 8009ec0:	4620      	mov	r0, r4
        *eof = true; /* Special feature: allow 0-terminated messages. */
 8009ec2:	702b      	strb	r3, [r5, #0]
}
 8009ec4:	b003      	add	sp, #12
 8009ec6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    *tag = temp >> 3;
 8009ec8:	08e3      	lsrs	r3, r4, #3
    *wire_type = (pb_wire_type_t)(temp & 7);
 8009eca:	f004 0407 	and.w	r4, r4, #7
    *tag = temp >> 3;
 8009ece:	603b      	str	r3, [r7, #0]
    *wire_type = (pb_wire_type_t)(temp & 7);
 8009ed0:	7034      	strb	r4, [r6, #0]
    return true;
 8009ed2:	e7f7      	b.n	8009ec4 <pb_decode_tag+0x24>

08009ed4 <pb_skip_field>:
{
 8009ed4:	b513      	push	{r0, r1, r4, lr}
 8009ed6:	4604      	mov	r4, r0
    switch (wire_type)
 8009ed8:	2905      	cmp	r1, #5
 8009eda:	d825      	bhi.n	8009f28 <pb_skip_field+0x54>
 8009edc:	e8df f001 	tbb	[pc, r1]
 8009ee0:	24170f03 	.word	0x24170f03
 8009ee4:	2224      	.short	0x2224
        if (!pb_read(stream, &byte, 1))
 8009ee6:	2201      	movs	r2, #1
 8009ee8:	a901      	add	r1, sp, #4
 8009eea:	4620      	mov	r0, r4
 8009eec:	f7ff fe62 	bl	8009bb4 <pb_read>
 8009ef0:	b118      	cbz	r0, 8009efa <pb_skip_field+0x26>
    } while (byte & 0x80);
 8009ef2:	f99d 3004 	ldrsb.w	r3, [sp, #4]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	dbf5      	blt.n	8009ee6 <pb_skip_field+0x12>
}
 8009efa:	b002      	add	sp, #8
 8009efc:	bd10      	pop	{r4, pc}
        case PB_WT_64BIT: return pb_read(stream, NULL, 8);
 8009efe:	2208      	movs	r2, #8
        case PB_WT_32BIT: return pb_read(stream, NULL, 4);
 8009f00:	2100      	movs	r1, #0
 8009f02:	4620      	mov	r0, r4
}
 8009f04:	b002      	add	sp, #8
 8009f06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        case PB_WT_32BIT: return pb_read(stream, NULL, 4);
 8009f0a:	f7ff be53 	b.w	8009bb4 <pb_read>
    if (!pb_decode_varint32(stream, &length))
 8009f0e:	a901      	add	r1, sp, #4
 8009f10:	f7ff fe8c 	bl	8009c2c <pb_decode_varint32>
 8009f14:	2800      	cmp	r0, #0
 8009f16:	d0f0      	beq.n	8009efa <pb_skip_field+0x26>
    return pb_read(stream, NULL, length);
 8009f18:	9a01      	ldr	r2, [sp, #4]
 8009f1a:	2100      	movs	r1, #0
 8009f1c:	4620      	mov	r0, r4
 8009f1e:	f7ff fe49 	bl	8009bb4 <pb_read>
        case PB_WT_STRING: return pb_skip_string(stream);
 8009f22:	e7ea      	b.n	8009efa <pb_skip_field+0x26>
        case PB_WT_32BIT: return pb_read(stream, NULL, 4);
 8009f24:	2204      	movs	r2, #4
 8009f26:	e7eb      	b.n	8009f00 <pb_skip_field+0x2c>
        default: PB_RETURN_ERROR(stream, "invalid wire_type");
 8009f28:	68c3      	ldr	r3, [r0, #12]
 8009f2a:	4a03      	ldr	r2, [pc, #12]	; (8009f38 <pb_skip_field+0x64>)
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	bf08      	it	eq
 8009f30:	4613      	moveq	r3, r2
 8009f32:	60c3      	str	r3, [r0, #12]
 8009f34:	2000      	movs	r0, #0
 8009f36:	e7e0      	b.n	8009efa <pb_skip_field+0x26>
 8009f38:	080162fd 	.word	0x080162fd

08009f3c <pb_make_string_substream>:
{
 8009f3c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009f3e:	460d      	mov	r5, r1
    if (!pb_decode_varint32(stream, &size))
 8009f40:	a901      	add	r1, sp, #4
{
 8009f42:	4604      	mov	r4, r0
    if (!pb_decode_varint32(stream, &size))
 8009f44:	f7ff fe72 	bl	8009c2c <pb_decode_varint32>
 8009f48:	4606      	mov	r6, r0
 8009f4a:	b168      	cbz	r0, 8009f68 <pb_make_string_substream+0x2c>
    *substream = *stream;
 8009f4c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8009f50:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    if (substream->bytes_left < size)
 8009f54:	9901      	ldr	r1, [sp, #4]
 8009f56:	428a      	cmp	r2, r1
 8009f58:	d209      	bcs.n	8009f6e <pb_make_string_substream+0x32>
        PB_RETURN_ERROR(stream, "parent stream too short");
 8009f5a:	68e3      	ldr	r3, [r4, #12]
 8009f5c:	2600      	movs	r6, #0
 8009f5e:	4a06      	ldr	r2, [pc, #24]	; (8009f78 <pb_make_string_substream+0x3c>)
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	bf08      	it	eq
 8009f64:	4613      	moveq	r3, r2
 8009f66:	60e3      	str	r3, [r4, #12]
}
 8009f68:	4630      	mov	r0, r6
 8009f6a:	b002      	add	sp, #8
 8009f6c:	bd70      	pop	{r4, r5, r6, pc}
    substream->bytes_left = size;
 8009f6e:	60a9      	str	r1, [r5, #8]
    stream->bytes_left -= size;
 8009f70:	68a3      	ldr	r3, [r4, #8]
 8009f72:	1a5b      	subs	r3, r3, r1
 8009f74:	60a3      	str	r3, [r4, #8]
    return true;
 8009f76:	e7f7      	b.n	8009f68 <pb_make_string_substream+0x2c>
 8009f78:	0801630f 	.word	0x0801630f

08009f7c <pb_close_string_substream>:
    if (substream->bytes_left) {
 8009f7c:	688a      	ldr	r2, [r1, #8]
{
 8009f7e:	b538      	push	{r3, r4, r5, lr}
 8009f80:	4605      	mov	r5, r0
 8009f82:	460c      	mov	r4, r1
    if (substream->bytes_left) {
 8009f84:	b92a      	cbnz	r2, 8009f92 <pb_close_string_substream+0x16>
    stream->state = substream->state;
 8009f86:	6863      	ldr	r3, [r4, #4]
    return true;
 8009f88:	2001      	movs	r0, #1
    stream->state = substream->state;
 8009f8a:	606b      	str	r3, [r5, #4]
    stream->errmsg = substream->errmsg;
 8009f8c:	68e3      	ldr	r3, [r4, #12]
 8009f8e:	60eb      	str	r3, [r5, #12]
}
 8009f90:	bd38      	pop	{r3, r4, r5, pc}
        if (!pb_read(substream, NULL, substream->bytes_left))
 8009f92:	2100      	movs	r1, #0
 8009f94:	4620      	mov	r0, r4
 8009f96:	f7ff fe0d 	bl	8009bb4 <pb_read>
 8009f9a:	2800      	cmp	r0, #0
 8009f9c:	d1f3      	bne.n	8009f86 <pb_close_string_substream+0xa>
 8009f9e:	e7f7      	b.n	8009f90 <pb_close_string_substream+0x14>

08009fa0 <decode_field>:
{
 8009fa0:	460b      	mov	r3, r1
    switch (PB_ATYPE(iter->pos->type))
 8009fa2:	6851      	ldr	r1, [r2, #4]
{
 8009fa4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009fa8:	4616      	mov	r6, r2
    switch (PB_ATYPE(iter->pos->type))
 8009faa:	788a      	ldrb	r2, [r1, #2]
{
 8009fac:	b089      	sub	sp, #36	; 0x24
 8009fae:	4605      	mov	r5, r0
    switch (PB_ATYPE(iter->pos->type))
 8009fb0:	f002 04c0 	and.w	r4, r2, #192	; 0xc0
 8009fb4:	2c40      	cmp	r4, #64	; 0x40
 8009fb6:	f000 8083 	beq.w	800a0c0 <decode_field+0x120>
 8009fba:	2c80      	cmp	r4, #128	; 0x80
 8009fbc:	d07d      	beq.n	800a0ba <decode_field+0x11a>
 8009fbe:	b964      	cbnz	r4, 8009fda <decode_field+0x3a>
    func = PB_DECODERS[PB_LTYPE(type)];
 8009fc0:	f002 0c0f 	and.w	ip, r2, #15
 8009fc4:	f002 0230 	and.w	r2, r2, #48	; 0x30
 8009fc8:	4f6e      	ldr	r7, [pc, #440]	; (800a184 <decode_field+0x1e4>)
    switch (PB_HTYPE(type))
 8009fca:	2a20      	cmp	r2, #32
    func = PB_DECODERS[PB_LTYPE(type)];
 8009fcc:	f857 702c 	ldr.w	r7, [r7, ip, lsl #2]
    switch (PB_HTYPE(type))
 8009fd0:	d02b      	beq.n	800a02a <decode_field+0x8a>
 8009fd2:	d805      	bhi.n	8009fe0 <decode_field+0x40>
 8009fd4:	b1da      	cbz	r2, 800a00e <decode_field+0x6e>
 8009fd6:	2a10      	cmp	r2, #16
 8009fd8:	d01f      	beq.n	800a01a <decode_field+0x7a>
            PB_RETURN_ERROR(stream, "invalid field type");
 8009fda:	68eb      	ldr	r3, [r5, #12]
 8009fdc:	4a6a      	ldr	r2, [pc, #424]	; (800a188 <decode_field+0x1e8>)
 8009fde:	e04c      	b.n	800a07a <decode_field+0xda>
    switch (PB_HTYPE(type))
 8009fe0:	2a30      	cmp	r2, #48	; 0x30
 8009fe2:	d1fa      	bne.n	8009fda <decode_field+0x3a>
            *(pb_size_t*)iter->pSize = iter->pos->tag;
 8009fe4:	880a      	ldrh	r2, [r1, #0]
            if (PB_LTYPE(type) == PB_LTYPE_SUBMESSAGE)
 8009fe6:	f1bc 0f07 	cmp.w	ip, #7
            *(pb_size_t*)iter->pSize = iter->pos->tag;
 8009fea:	6973      	ldr	r3, [r6, #20]
 8009fec:	801a      	strh	r2, [r3, #0]
            if (PB_LTYPE(type) == PB_LTYPE_SUBMESSAGE)
 8009fee:	d10b      	bne.n	800a008 <decode_field+0x68>
                memset(iter->pData, 0, iter->pos->data_size);
 8009ff0:	f8b1 2007 	ldrh.w	r2, [r1, #7]
 8009ff4:	4621      	mov	r1, r4
 8009ff6:	6930      	ldr	r0, [r6, #16]
 8009ff8:	f008 f8e8 	bl	80121cc <memset>
                pb_message_set_to_defaults((const pb_field_t*)iter->pos->ptr, iter->pData);
 8009ffc:	6873      	ldr	r3, [r6, #4]
 8009ffe:	6931      	ldr	r1, [r6, #16]
 800a000:	f8d3 000b 	ldr.w	r0, [r3, #11]
 800a004:	f7ff fd56 	bl	8009ab4 <pb_message_set_to_defaults>
            return func(stream, iter->pos, iter->pData);
 800a008:	6932      	ldr	r2, [r6, #16]
 800a00a:	6871      	ldr	r1, [r6, #4]
 800a00c:	e00b      	b.n	800a026 <decode_field+0x86>
            return func(stream, iter->pos, iter->pData);
 800a00e:	6932      	ldr	r2, [r6, #16]
            return func(stream, iter->pos, iter->pData);
 800a010:	463b      	mov	r3, r7
}
 800a012:	b009      	add	sp, #36	; 0x24
 800a014:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
            return func(stream, iter->pos, iter->pData);
 800a018:	4718      	bx	r3
            if (iter->pSize != iter->pData)
 800a01a:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
 800a01e:	4293      	cmp	r3, r2
                *(bool*)iter->pSize = true;
 800a020:	bf1c      	itt	ne
 800a022:	2001      	movne	r0, #1
 800a024:	7018      	strbne	r0, [r3, #0]
            return func(stream, iter->pos, iter->pData);
 800a026:	4628      	mov	r0, r5
 800a028:	e7f2      	b.n	800a010 <decode_field+0x70>
            if (wire_type == PB_WT_STRING
 800a02a:	2b02      	cmp	r3, #2
            if (iter->pSize != iter->pData)
 800a02c:	f8d6 8014 	ldr.w	r8, [r6, #20]
            if (wire_type == PB_WT_STRING
 800a030:	d134      	bne.n	800a09c <decode_field+0xfc>
                && PB_LTYPE(type) <= PB_LTYPE_LAST_PACKABLE)
 800a032:	f1bc 0f04 	cmp.w	ip, #4
 800a036:	d831      	bhi.n	800a09c <decode_field+0xfc>
                if (!pb_make_string_substream(stream, &substream))
 800a038:	a904      	add	r1, sp, #16
 800a03a:	f7ff ff7f 	bl	8009f3c <pb_make_string_substream>
 800a03e:	4604      	mov	r4, r0
 800a040:	b970      	cbnz	r0, 800a060 <decode_field+0xc0>
            PB_RETURN_ERROR(stream, "invalid field type");
 800a042:	2400      	movs	r4, #0
 800a044:	e026      	b.n	800a094 <decode_field+0xf4>
                    void *pItem = (char*)iter->pData + iter->pos->data_size * (*size);
 800a046:	f8b1 0007 	ldrh.w	r0, [r1, #7]
 800a04a:	6932      	ldr	r2, [r6, #16]
                    if (!func(&substream, iter->pos, pItem))
 800a04c:	fb03 2200 	mla	r2, r3, r0, r2
 800a050:	a804      	add	r0, sp, #16
 800a052:	47b8      	blx	r7
 800a054:	b1b0      	cbz	r0, 800a084 <decode_field+0xe4>
                    (*size)++;
 800a056:	f8b8 3000 	ldrh.w	r3, [r8]
 800a05a:	3301      	adds	r3, #1
 800a05c:	f8a8 3000 	strh.w	r3, [r8]
                while (substream.bytes_left > 0 && *size < iter->pos->array_size)
 800a060:	9b06      	ldr	r3, [sp, #24]
 800a062:	b133      	cbz	r3, 800a072 <decode_field+0xd2>
 800a064:	6871      	ldr	r1, [r6, #4]
 800a066:	f8b8 3000 	ldrh.w	r3, [r8]
 800a06a:	f8b1 2009 	ldrh.w	r2, [r1, #9]
 800a06e:	429a      	cmp	r2, r3
 800a070:	d8e9      	bhi.n	800a046 <decode_field+0xa6>
                if (substream.bytes_left != 0)
 800a072:	9b06      	ldr	r3, [sp, #24]
 800a074:	b143      	cbz	r3, 800a088 <decode_field+0xe8>
                    PB_RETURN_ERROR(stream, "array overflow");
 800a076:	68eb      	ldr	r3, [r5, #12]
 800a078:	4a44      	ldr	r2, [pc, #272]	; (800a18c <decode_field+0x1ec>)
            PB_RETURN_ERROR(stream, "invalid field type");
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	bf08      	it	eq
 800a07e:	4613      	moveq	r3, r2
 800a080:	60eb      	str	r3, [r5, #12]
 800a082:	e7de      	b.n	800a042 <decode_field+0xa2>
                        status = false;
 800a084:	4604      	mov	r4, r0
 800a086:	e7f4      	b.n	800a072 <decode_field+0xd2>
                if (!pb_close_string_substream(stream, &substream))
 800a088:	a904      	add	r1, sp, #16
 800a08a:	4628      	mov	r0, r5
 800a08c:	f7ff ff76 	bl	8009f7c <pb_close_string_substream>
 800a090:	2800      	cmp	r0, #0
 800a092:	d0d6      	beq.n	800a042 <decode_field+0xa2>
}
 800a094:	4620      	mov	r0, r4
 800a096:	b009      	add	sp, #36	; 0x24
 800a098:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                char *pItem = (char*)iter->pData + iter->pos->data_size * (*size);
 800a09c:	f8b8 3000 	ldrh.w	r3, [r8]
 800a0a0:	6932      	ldr	r2, [r6, #16]
                if ((*size)++ >= iter->pos->array_size)
 800a0a2:	1c5c      	adds	r4, r3, #1
                char *pItem = (char*)iter->pData + iter->pos->data_size * (*size);
 800a0a4:	f8b1 0007 	ldrh.w	r0, [r1, #7]
                if ((*size)++ >= iter->pos->array_size)
 800a0a8:	f8a8 4000 	strh.w	r4, [r8]
 800a0ac:	f8b1 4009 	ldrh.w	r4, [r1, #9]
 800a0b0:	429c      	cmp	r4, r3
 800a0b2:	d9e0      	bls.n	800a076 <decode_field+0xd6>
                return func(stream, iter->pos, pItem);
 800a0b4:	fb03 2200 	mla	r2, r3, r0, r2
 800a0b8:	e7b5      	b.n	800a026 <decode_field+0x86>
    PB_RETURN_ERROR(stream, "no malloc support");
 800a0ba:	68c3      	ldr	r3, [r0, #12]
 800a0bc:	4a34      	ldr	r2, [pc, #208]	; (800a190 <decode_field+0x1f0>)
 800a0be:	e7dc      	b.n	800a07a <decode_field+0xda>
    pb_callback_t *pCallback = (pb_callback_t*)iter->pData;
 800a0c0:	6937      	ldr	r7, [r6, #16]
    if (pCallback == NULL || pCallback->funcs.decode == NULL)
 800a0c2:	b10f      	cbz	r7, 800a0c8 <decode_field+0x128>
 800a0c4:	683a      	ldr	r2, [r7, #0]
 800a0c6:	b932      	cbnz	r2, 800a0d6 <decode_field+0x136>
        return pb_skip_field(stream, wire_type);
 800a0c8:	4619      	mov	r1, r3
 800a0ca:	4628      	mov	r0, r5
}
 800a0cc:	b009      	add	sp, #36	; 0x24
 800a0ce:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        return pb_skip_field(stream, wire_type);
 800a0d2:	f7ff beff 	b.w	8009ed4 <pb_skip_field>
    if (wire_type == PB_WT_STRING)
 800a0d6:	2b02      	cmp	r3, #2
    void **arg = &(pCallback->arg);
 800a0d8:	f107 0804 	add.w	r8, r7, #4
    if (wire_type == PB_WT_STRING)
 800a0dc:	d11c      	bne.n	800a118 <decode_field+0x178>
        if (!pb_make_string_substream(stream, &substream))
 800a0de:	a904      	add	r1, sp, #16
 800a0e0:	f7ff ff2c 	bl	8009f3c <pb_make_string_substream>
 800a0e4:	4604      	mov	r4, r0
 800a0e6:	2800      	cmp	r0, #0
 800a0e8:	d0d4      	beq.n	800a094 <decode_field+0xf4>
            if (!pCallback->funcs.decode(&substream, iter->pos, arg))
 800a0ea:	683b      	ldr	r3, [r7, #0]
 800a0ec:	4642      	mov	r2, r8
 800a0ee:	6871      	ldr	r1, [r6, #4]
 800a0f0:	a804      	add	r0, sp, #16
 800a0f2:	4798      	blx	r3
 800a0f4:	4604      	mov	r4, r0
 800a0f6:	b930      	cbnz	r0, 800a106 <decode_field+0x166>
                PB_RETURN_ERROR(stream, "callback failed");
 800a0f8:	68eb      	ldr	r3, [r5, #12]
 800a0fa:	4a26      	ldr	r2, [pc, #152]	; (800a194 <decode_field+0x1f4>)
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	bf08      	it	eq
 800a100:	4613      	moveq	r3, r2
 800a102:	60eb      	str	r3, [r5, #12]
 800a104:	e7c6      	b.n	800a094 <decode_field+0xf4>
        } while (substream.bytes_left);
 800a106:	9b06      	ldr	r3, [sp, #24]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d1ee      	bne.n	800a0ea <decode_field+0x14a>
        if (!pb_close_string_substream(stream, &substream))
 800a10c:	a904      	add	r1, sp, #16
 800a10e:	4628      	mov	r0, r5
 800a110:	f7ff ff34 	bl	8009f7c <pb_close_string_substream>
        return pCallback->funcs.decode(&substream, iter->pos, arg);
 800a114:	4604      	mov	r4, r0
 800a116:	e7bd      	b.n	800a094 <decode_field+0xf4>
    switch (wire_type)
 800a118:	2b01      	cmp	r3, #1
 800a11a:	d020      	beq.n	800a15e <decode_field+0x1be>
 800a11c:	2b05      	cmp	r3, #5
 800a11e:	d026      	beq.n	800a16e <decode_field+0x1ce>
 800a120:	bb63      	cbnz	r3, 800a17c <decode_field+0x1dc>
 800a122:	461c      	mov	r4, r3
 800a124:	f10d 0904 	add.w	r9, sp, #4
                (*size)++;
 800a128:	3401      	adds	r4, #1
                if (*size > max_size) return false;
 800a12a:	2c0b      	cmp	r4, #11
 800a12c:	d089      	beq.n	800a042 <decode_field+0xa2>
                if (!pb_read(stream, buf, 1)) return false;
 800a12e:	2201      	movs	r2, #1
 800a130:	4649      	mov	r1, r9
 800a132:	4628      	mov	r0, r5
 800a134:	f7ff fd3e 	bl	8009bb4 <pb_read>
 800a138:	2800      	cmp	r0, #0
 800a13a:	d082      	beq.n	800a042 <decode_field+0xa2>
            } while (*buf++ & 0x80);
 800a13c:	f919 3b01 	ldrsb.w	r3, [r9], #1
 800a140:	2b00      	cmp	r3, #0
 800a142:	dbf1      	blt.n	800a128 <decode_field+0x188>
        substream = pb_istream_from_buffer(buffer, size);
 800a144:	4b14      	ldr	r3, [pc, #80]	; (800a198 <decode_field+0x1f8>)
        return pCallback->funcs.decode(&substream, iter->pos, arg);
 800a146:	4642      	mov	r2, r8
 800a148:	6871      	ldr	r1, [r6, #4]
 800a14a:	a804      	add	r0, sp, #16
        substream = pb_istream_from_buffer(buffer, size);
 800a14c:	9304      	str	r3, [sp, #16]
 800a14e:	ab01      	add	r3, sp, #4
 800a150:	e9cd 3405 	strd	r3, r4, [sp, #20]
 800a154:	2300      	movs	r3, #0
 800a156:	9307      	str	r3, [sp, #28]
        return pCallback->funcs.decode(&substream, iter->pos, arg);
 800a158:	683b      	ldr	r3, [r7, #0]
 800a15a:	4798      	blx	r3
 800a15c:	e7da      	b.n	800a114 <decode_field+0x174>
            *size = 8;
 800a15e:	2408      	movs	r4, #8
            return pb_read(stream, buf, 8);
 800a160:	2208      	movs	r2, #8
 800a162:	a901      	add	r1, sp, #4
 800a164:	f7ff fd26 	bl	8009bb4 <pb_read>
        if (!read_raw_value(stream, wire_type, buffer, &size))
 800a168:	2800      	cmp	r0, #0
 800a16a:	d1eb      	bne.n	800a144 <decode_field+0x1a4>
 800a16c:	e769      	b.n	800a042 <decode_field+0xa2>
            return pb_read(stream, buf, 4);
 800a16e:	2204      	movs	r2, #4
            *size = 4;
 800a170:	2404      	movs	r4, #4
            return pb_read(stream, buf, 4);
 800a172:	eb0d 0102 	add.w	r1, sp, r2
 800a176:	f7ff fd1d 	bl	8009bb4 <pb_read>
 800a17a:	e7f5      	b.n	800a168 <decode_field+0x1c8>
        default: PB_RETURN_ERROR(stream, "invalid wire_type");
 800a17c:	68c3      	ldr	r3, [r0, #12]
 800a17e:	4a07      	ldr	r2, [pc, #28]	; (800a19c <decode_field+0x1fc>)
 800a180:	e77b      	b.n	800a07a <decode_field+0xda>
 800a182:	bf00      	nop
 800a184:	080163ac 	.word	0x080163ac
 800a188:	08016336 	.word	0x08016336
 800a18c:	08016327 	.word	0x08016327
 800a190:	080162b7 	.word	0x080162b7
 800a194:	08016349 	.word	0x08016349
 800a198:	080099e1 	.word	0x080099e1
 800a19c:	080162fd 	.word	0x080162fd

0800a1a0 <pb_decode_noinit>:
{
 800a1a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t fields_seen[(PB_MAX_REQUIRED_FIELDS + 31) / 32] = {0, 0};
 800a1a4:	2500      	movs	r5, #0
{
 800a1a6:	b091      	sub	sp, #68	; 0x44
 800a1a8:	4604      	mov	r4, r0
    uint32_t extension_range_start = 0;
 800a1aa:	462f      	mov	r7, r5
    (void)pb_field_iter_begin(&iter, fields, dest_struct);
 800a1ac:	a804      	add	r0, sp, #16
    pb_size_t fixed_count_size = 0;
 800a1ae:	f8ad 5002 	strh.w	r5, [sp, #2]
    uint32_t fields_seen[(PB_MAX_REQUIRED_FIELDS + 31) / 32] = {0, 0};
 800a1b2:	e9cd 5502 	strd	r5, r5, [sp, #8]
    (void)pb_field_iter_begin(&iter, fields, dest_struct);
 800a1b6:	f7ff fba9 	bl	800990c <pb_field_iter_begin>
    while (stream->bytes_left)
 800a1ba:	68a3      	ldr	r3, [r4, #8]
 800a1bc:	b9f3      	cbnz	r3, 800a1fc <pb_decode_noinit+0x5c>
    if (fixed_count_field != NULL &&
 800a1be:	b135      	cbz	r5, 800a1ce <pb_decode_noinit+0x2e>
 800a1c0:	f8b5 2009 	ldrh.w	r2, [r5, #9]
 800a1c4:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800a1c8:	429a      	cmp	r2, r3
 800a1ca:	f040 8095 	bne.w	800a2f8 <pb_decode_noinit+0x158>
        } while (pb_field_iter_next(&iter));
 800a1ce:	a804      	add	r0, sp, #16
            last_type = iter.pos->type;
 800a1d0:	e9dd 3505 	ldrd	r3, r5, [sp, #20]
 800a1d4:	789e      	ldrb	r6, [r3, #2]
        } while (pb_field_iter_next(&iter));
 800a1d6:	f7ff fbab 	bl	8009930 <pb_field_iter_next>
 800a1da:	2800      	cmp	r0, #0
 800a1dc:	d1f7      	bne.n	800a1ce <pb_decode_noinit+0x2e>
        if (PB_HTYPE(last_type) == PB_HTYPE_REQUIRED && iter.pos->tag != 0)
 800a1de:	f016 0f30 	tst.w	r6, #48	; 0x30
 800a1e2:	d103      	bne.n	800a1ec <pb_decode_noinit+0x4c>
 800a1e4:	9b05      	ldr	r3, [sp, #20]
 800a1e6:	881b      	ldrh	r3, [r3, #0]
 800a1e8:	b103      	cbz	r3, 800a1ec <pb_decode_noinit+0x4c>
            req_field_count++;
 800a1ea:	3501      	adds	r5, #1
        if (req_field_count > PB_MAX_REQUIRED_FIELDS)
 800a1ec:	2d40      	cmp	r5, #64	; 0x40
 800a1ee:	f200 80cc 	bhi.w	800a38a <pb_decode_noinit+0x1ea>
        if (req_field_count > 0)
 800a1f2:	2d00      	cmp	r5, #0
 800a1f4:	f040 80ca 	bne.w	800a38c <pb_decode_noinit+0x1ec>
    return true;
 800a1f8:	2001      	movs	r0, #1
 800a1fa:	e00c      	b.n	800a216 <pb_decode_noinit+0x76>
        if (!pb_decode_tag(stream, &wire_type, &tag, &eof))
 800a1fc:	f10d 0301 	add.w	r3, sp, #1
 800a200:	aa01      	add	r2, sp, #4
 800a202:	4669      	mov	r1, sp
 800a204:	4620      	mov	r0, r4
 800a206:	f7ff fe4b 	bl	8009ea0 <pb_decode_tag>
 800a20a:	b938      	cbnz	r0, 800a21c <pb_decode_noinit+0x7c>
            if (eof)
 800a20c:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800a210:	2b00      	cmp	r3, #0
 800a212:	d1d4      	bne.n	800a1be <pb_decode_noinit+0x1e>
        PB_RETURN_ERROR(stream, "wrong size for fixed count field");
 800a214:	2000      	movs	r0, #0
}
 800a216:	b011      	add	sp, #68	; 0x44
 800a218:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (!pb_field_iter_find(&iter, tag))
 800a21c:	9901      	ldr	r1, [sp, #4]
 800a21e:	a804      	add	r0, sp, #16
 800a220:	f7ff fbc7 	bl	80099b2 <pb_field_iter_find>
 800a224:	2800      	cmp	r0, #0
 800a226:	d154      	bne.n	800a2d2 <pb_decode_noinit+0x132>
            if (tag >= extension_range_start)
 800a228:	9b01      	ldr	r3, [sp, #4]
 800a22a:	42bb      	cmp	r3, r7
 800a22c:	f0c0 80b5 	bcc.w	800a39a <pb_decode_noinit+0x1fa>
    const pb_field_t *start = iter->pos;
 800a230:	9e05      	ldr	r6, [sp, #20]
        if (PB_LTYPE(iter->pos->type) == PB_LTYPE_EXTENSION)
 800a232:	9a05      	ldr	r2, [sp, #20]
 800a234:	7893      	ldrb	r3, [r2, #2]
 800a236:	f003 030f 	and.w	r3, r3, #15
 800a23a:	2b08      	cmp	r3, #8
 800a23c:	f000 80b6 	beq.w	800a3ac <pb_decode_noinit+0x20c>
        (void)pb_field_iter_next(iter);
 800a240:	a804      	add	r0, sp, #16
 800a242:	f7ff fb75 	bl	8009930 <pb_field_iter_next>
    } while (iter->pos != start);
 800a246:	9b05      	ldr	r3, [sp, #20]
 800a248:	429e      	cmp	r6, r3
 800a24a:	d1f2      	bne.n	800a232 <pb_decode_noinit+0x92>
                    extension_range_start = (uint32_t)-1;
 800a24c:	f04f 37ff 	mov.w	r7, #4294967295
                if (tag >= extension_range_start)
 800a250:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a254:	45b8      	cmp	r8, r7
 800a256:	f0c0 80a0 	bcc.w	800a39a <pb_decode_noinit+0x1fa>
    pb_extension_t *extension = *(pb_extension_t* const *)iter->pData;
 800a25a:	9a08      	ldr	r2, [sp, #32]
                    if (!decode_extension(stream, tag, wire_type, &iter))
 800a25c:	f89d b000 	ldrb.w	fp, [sp]
                    size_t pos = stream->bytes_left;
 800a260:	f8d4 9008 	ldr.w	r9, [r4, #8]
    pb_extension_t *extension = *(pb_extension_t* const *)iter->pData;
 800a264:	6816      	ldr	r6, [r2, #0]
    while (extension != NULL && pos == stream->bytes_left)
 800a266:	68a2      	ldr	r2, [r4, #8]
 800a268:	2e00      	cmp	r6, #0
 800a26a:	f000 8093 	beq.w	800a394 <pb_decode_noinit+0x1f4>
 800a26e:	4591      	cmp	r9, r2
 800a270:	d1a3      	bne.n	800a1ba <pb_decode_noinit+0x1a>
        if (extension->type->decode)
 800a272:	6832      	ldr	r2, [r6, #0]
 800a274:	f8d2 a000 	ldr.w	sl, [r2]
 800a278:	f1ba 0f00 	cmp.w	sl, #0
 800a27c:	d008      	beq.n	800a290 <pb_decode_noinit+0xf0>
            status = extension->type->decode(stream, extension, tag, wire_type);
 800a27e:	465b      	mov	r3, fp
 800a280:	4642      	mov	r2, r8
 800a282:	4631      	mov	r1, r6
 800a284:	4620      	mov	r0, r4
 800a286:	47d0      	blx	sl
        if (!status)
 800a288:	2800      	cmp	r0, #0
 800a28a:	d0c3      	beq.n	800a214 <pb_decode_noinit+0x74>
        extension = extension->next;
 800a28c:	68b6      	ldr	r6, [r6, #8]
 800a28e:	e7ea      	b.n	800a266 <pb_decode_noinit+0xc6>
    const pb_field_t *field = (const pb_field_t*)extension->type->arg;
 800a290:	f8d2 a008 	ldr.w	sl, [r2, #8]
    if (field->tag != tag)
 800a294:	f8ba 2000 	ldrh.w	r2, [sl]
 800a298:	4590      	cmp	r8, r2
 800a29a:	d1f7      	bne.n	800a28c <pb_decode_noinit+0xec>
    (void)pb_field_iter_begin(iter, field, extension->dest);
 800a29c:	6872      	ldr	r2, [r6, #4]
 800a29e:	4651      	mov	r1, sl
 800a2a0:	a80a      	add	r0, sp, #40	; 0x28
 800a2a2:	f7ff fb33 	bl	800990c <pb_field_iter_begin>
    iter->pData = extension->dest;
 800a2a6:	6872      	ldr	r2, [r6, #4]
    extension->found = true;
 800a2a8:	f04f 0301 	mov.w	r3, #1
    return decode_field(stream, wire_type, &iter);
 800a2ac:	4659      	mov	r1, fp
    iter->pData = extension->dest;
 800a2ae:	920e      	str	r2, [sp, #56]	; 0x38
    iter->pSize = &extension->found;
 800a2b0:	f106 020c 	add.w	r2, r6, #12
    return decode_field(stream, wire_type, &iter);
 800a2b4:	4620      	mov	r0, r4
    iter->pSize = &extension->found;
 800a2b6:	920f      	str	r2, [sp, #60]	; 0x3c
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 800a2b8:	f89a 2002 	ldrb.w	r2, [sl, #2]
 800a2bc:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 800a2c0:	2a80      	cmp	r2, #128	; 0x80
        iter->pData = &extension->dest;
 800a2c2:	bf04      	itt	eq
 800a2c4:	1d32      	addeq	r2, r6, #4
 800a2c6:	920e      	streq	r2, [sp, #56]	; 0x38
    return decode_field(stream, wire_type, &iter);
 800a2c8:	aa0a      	add	r2, sp, #40	; 0x28
    extension->found = true;
 800a2ca:	7333      	strb	r3, [r6, #12]
    return decode_field(stream, wire_type, &iter);
 800a2cc:	f7ff fe68 	bl	8009fa0 <decode_field>
 800a2d0:	e7da      	b.n	800a288 <pb_decode_noinit+0xe8>
        if (PB_HTYPE(iter.pos->type) == PB_HTYPE_REPEATED
 800a2d2:	9a05      	ldr	r2, [sp, #20]
 800a2d4:	7893      	ldrb	r3, [r2, #2]
 800a2d6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a2da:	2b20      	cmp	r3, #32
 800a2dc:	d121      	bne.n	800a322 <pb_decode_noinit+0x182>
            && iter.pSize == iter.pData)
 800a2de:	e9dd 3108 	ldrd	r3, r1, [sp, #32]
 800a2e2:	4299      	cmp	r1, r3
 800a2e4:	d116      	bne.n	800a314 <pb_decode_noinit+0x174>
            if (fixed_count_field != iter.pos) {
 800a2e6:	42aa      	cmp	r2, r5
 800a2e8:	d010      	beq.n	800a30c <pb_decode_noinit+0x16c>
                if (fixed_count_field != NULL &&
 800a2ea:	b165      	cbz	r5, 800a306 <pb_decode_noinit+0x166>
 800a2ec:	f8b5 1009 	ldrh.w	r1, [r5, #9]
 800a2f0:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800a2f4:	4299      	cmp	r1, r3
 800a2f6:	d006      	beq.n	800a306 <pb_decode_noinit+0x166>
        PB_RETURN_ERROR(stream, "wrong size for fixed count field");
 800a2f8:	68e3      	ldr	r3, [r4, #12]
 800a2fa:	4a2d      	ldr	r2, [pc, #180]	; (800a3b0 <pb_decode_noinit+0x210>)
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	bf08      	it	eq
 800a300:	4613      	moveq	r3, r2
 800a302:	60e3      	str	r3, [r4, #12]
 800a304:	e786      	b.n	800a214 <pb_decode_noinit+0x74>
                fixed_count_size = 0;
 800a306:	2300      	movs	r3, #0
 800a308:	f8ad 3002 	strh.w	r3, [sp, #2]
            iter.pSize = &fixed_count_size;
 800a30c:	f10d 0302 	add.w	r3, sp, #2
 800a310:	4615      	mov	r5, r2
 800a312:	9309      	str	r3, [sp, #36]	; 0x24
        if (!decode_field(stream, wire_type, &iter))
 800a314:	aa04      	add	r2, sp, #16
 800a316:	f89d 1000 	ldrb.w	r1, [sp]
 800a31a:	4620      	mov	r0, r4
 800a31c:	f7ff fe40 	bl	8009fa0 <decode_field>
 800a320:	e040      	b.n	800a3a4 <pb_decode_noinit+0x204>
        if (PB_HTYPE(iter.pos->type) == PB_HTYPE_REQUIRED
 800a322:	2b00      	cmp	r3, #0
 800a324:	d1f6      	bne.n	800a314 <pb_decode_noinit+0x174>
            && iter.required_field_index < PB_MAX_REQUIRED_FIELDS)
 800a326:	9a06      	ldr	r2, [sp, #24]
 800a328:	2a3f      	cmp	r2, #63	; 0x3f
 800a32a:	d8f3      	bhi.n	800a314 <pb_decode_noinit+0x174>
            fields_seen[iter.required_field_index >> 5] |= tmp;
 800a32c:	0951      	lsrs	r1, r2, #5
 800a32e:	ab10      	add	r3, sp, #64	; 0x40
            uint32_t tmp = ((uint32_t)1 << (iter.required_field_index & 31));
 800a330:	f002 021f 	and.w	r2, r2, #31
            fields_seen[iter.required_field_index >> 5] |= tmp;
 800a334:	eb03 0181 	add.w	r1, r3, r1, lsl #2
            uint32_t tmp = ((uint32_t)1 << (iter.required_field_index & 31));
 800a338:	2301      	movs	r3, #1
 800a33a:	4093      	lsls	r3, r2
            fields_seen[iter.required_field_index >> 5] |= tmp;
 800a33c:	f851 2c38 	ldr.w	r2, [r1, #-56]
 800a340:	4313      	orrs	r3, r2
 800a342:	f841 3c38 	str.w	r3, [r1, #-56]
 800a346:	e7e5      	b.n	800a314 <pb_decode_noinit+0x174>
                if (fields_seen[i] != allbits)
 800a348:	f851 6b04 	ldr.w	r6, [r1], #4
 800a34c:	3601      	adds	r6, #1
 800a34e:	d006      	beq.n	800a35e <pb_decode_noinit+0x1be>
                    PB_RETURN_ERROR(stream, "missing required field");
 800a350:	68e3      	ldr	r3, [r4, #12]
 800a352:	4a18      	ldr	r2, [pc, #96]	; (800a3b4 <pb_decode_noinit+0x214>)
 800a354:	2b00      	cmp	r3, #0
 800a356:	bf08      	it	eq
 800a358:	4613      	moveq	r3, r2
 800a35a:	60e3      	str	r3, [r4, #12]
 800a35c:	e75b      	b.n	800a216 <pb_decode_noinit+0x76>
            for (i = 0; i < (req_field_count >> 5); i++)
 800a35e:	3201      	adds	r2, #1
 800a360:	4293      	cmp	r3, r2
 800a362:	d1f1      	bne.n	800a348 <pb_decode_noinit+0x1a8>
            if ((req_field_count & 31) != 0)
 800a364:	f015 051f 	ands.w	r5, r5, #31
 800a368:	f43f af46 	beq.w	800a1f8 <pb_decode_noinit+0x58>
                if (fields_seen[req_field_count >> 5] !=
 800a36c:	aa10      	add	r2, sp, #64	; 0x40
                    (allbits >> (32 - (req_field_count & 31))))
 800a36e:	f1c5 0520 	rsb	r5, r5, #32
                if (fields_seen[req_field_count >> 5] !=
 800a372:	eb02 0383 	add.w	r3, r2, r3, lsl #2
                    (allbits >> (32 - (req_field_count & 31))))
 800a376:	f04f 32ff 	mov.w	r2, #4294967295
                if (fields_seen[req_field_count >> 5] !=
 800a37a:	f853 3c38 	ldr.w	r3, [r3, #-56]
                    (allbits >> (32 - (req_field_count & 31))))
 800a37e:	fa22 f505 	lsr.w	r5, r2, r5
                if (fields_seen[req_field_count >> 5] !=
 800a382:	42ab      	cmp	r3, r5
 800a384:	f43f af38 	beq.w	800a1f8 <pb_decode_noinit+0x58>
 800a388:	e7e2      	b.n	800a350 <pb_decode_noinit+0x1b0>
            req_field_count = PB_MAX_REQUIRED_FIELDS;
 800a38a:	2540      	movs	r5, #64	; 0x40
            for (i = 0; i < (req_field_count >> 5); i++)
 800a38c:	096b      	lsrs	r3, r5, #5
 800a38e:	a902      	add	r1, sp, #8
 800a390:	2200      	movs	r2, #0
 800a392:	e7e5      	b.n	800a360 <pb_decode_noinit+0x1c0>
                    if (pos != stream->bytes_left)
 800a394:	4591      	cmp	r9, r2
 800a396:	f47f af10 	bne.w	800a1ba <pb_decode_noinit+0x1a>
            if (!pb_skip_field(stream, wire_type))
 800a39a:	f89d 1000 	ldrb.w	r1, [sp]
 800a39e:	4620      	mov	r0, r4
 800a3a0:	f7ff fd98 	bl	8009ed4 <pb_skip_field>
        if (!decode_field(stream, wire_type, &iter))
 800a3a4:	2800      	cmp	r0, #0
 800a3a6:	f47f af08 	bne.w	800a1ba <pb_decode_noinit+0x1a>
 800a3aa:	e733      	b.n	800a214 <pb_decode_noinit+0x74>
                    extension_range_start = iter.pos->tag;
 800a3ac:	8817      	ldrh	r7, [r2, #0]
 800a3ae:	e74f      	b.n	800a250 <pb_decode_noinit+0xb0>
 800a3b0:	08016359 	.word	0x08016359
 800a3b4:	0801637a 	.word	0x0801637a

0800a3b8 <pb_decode>:
{
 800a3b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a3ba:	460c      	mov	r4, r1
 800a3bc:	4605      	mov	r5, r0
    pb_message_set_to_defaults(fields, dest_struct);
 800a3be:	4611      	mov	r1, r2
 800a3c0:	9201      	str	r2, [sp, #4]
 800a3c2:	4620      	mov	r0, r4
 800a3c4:	f7ff fb76 	bl	8009ab4 <pb_message_set_to_defaults>
    status = pb_decode_noinit(stream, fields, dest_struct);
 800a3c8:	9a01      	ldr	r2, [sp, #4]
 800a3ca:	4621      	mov	r1, r4
 800a3cc:	4628      	mov	r0, r5
}
 800a3ce:	b003      	add	sp, #12
 800a3d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    status = pb_decode_noinit(stream, fields, dest_struct);
 800a3d4:	f7ff bee4 	b.w	800a1a0 <pb_decode_noinit>

0800a3d8 <pb_dec_submessage>:
{
 800a3d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a3da:	b087      	sub	sp, #28
 800a3dc:	460e      	mov	r6, r1
 800a3de:	4605      	mov	r5, r0
 800a3e0:	9201      	str	r2, [sp, #4]
    const pb_field_t* submsg_fields = (const pb_field_t*)field->ptr;
 800a3e2:	f8d1 700b 	ldr.w	r7, [r1, #11]
    if (!pb_make_string_substream(stream, &substream))
 800a3e6:	a902      	add	r1, sp, #8
 800a3e8:	f7ff fda8 	bl	8009f3c <pb_make_string_substream>
 800a3ec:	b1e0      	cbz	r0, 800a428 <pb_dec_submessage+0x50>
    if (field->ptr == NULL)
 800a3ee:	f8d6 400b 	ldr.w	r4, [r6, #11]
 800a3f2:	9a01      	ldr	r2, [sp, #4]
 800a3f4:	b944      	cbnz	r4, 800a408 <pb_dec_submessage+0x30>
        PB_RETURN_ERROR(stream, "invalid field descriptor");
 800a3f6:	68eb      	ldr	r3, [r5, #12]
 800a3f8:	4a0e      	ldr	r2, [pc, #56]	; (800a434 <pb_dec_submessage+0x5c>)
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	bf08      	it	eq
 800a3fe:	4613      	moveq	r3, r2
 800a400:	60eb      	str	r3, [r5, #12]
}
 800a402:	4620      	mov	r0, r4
 800a404:	b007      	add	sp, #28
 800a406:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (PB_HTYPE(field->type) == PB_HTYPE_REPEATED)
 800a408:	78b3      	ldrb	r3, [r6, #2]
        status = pb_decode(&substream, submsg_fields, dest);
 800a40a:	4639      	mov	r1, r7
 800a40c:	a802      	add	r0, sp, #8
    if (PB_HTYPE(field->type) == PB_HTYPE_REPEATED)
 800a40e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a412:	2b20      	cmp	r3, #32
 800a414:	d10a      	bne.n	800a42c <pb_dec_submessage+0x54>
        status = pb_decode(&substream, submsg_fields, dest);
 800a416:	f7ff ffcf 	bl	800a3b8 <pb_decode>
        status = pb_decode_noinit(&substream, submsg_fields, dest);
 800a41a:	4604      	mov	r4, r0
    if (!pb_close_string_substream(stream, &substream))
 800a41c:	a902      	add	r1, sp, #8
 800a41e:	4628      	mov	r0, r5
 800a420:	f7ff fdac 	bl	8009f7c <pb_close_string_substream>
 800a424:	2800      	cmp	r0, #0
 800a426:	d1ec      	bne.n	800a402 <pb_dec_submessage+0x2a>
        return false;
 800a428:	2400      	movs	r4, #0
 800a42a:	e7ea      	b.n	800a402 <pb_dec_submessage+0x2a>
        status = pb_decode_noinit(&substream, submsg_fields, dest);
 800a42c:	f7ff feb8 	bl	800a1a0 <pb_decode_noinit>
 800a430:	e7f3      	b.n	800a41a <pb_dec_submessage+0x42>
 800a432:	bf00      	nop
 800a434:	08016391 	.word	0x08016391

0800a438 <pb_decode_delimited>:
{
 800a438:	b530      	push	{r4, r5, lr}
 800a43a:	b087      	sub	sp, #28
 800a43c:	460c      	mov	r4, r1
 800a43e:	4605      	mov	r5, r0
    if (!pb_make_string_substream(stream, &substream))
 800a440:	a902      	add	r1, sp, #8
{
 800a442:	9201      	str	r2, [sp, #4]
    if (!pb_make_string_substream(stream, &substream))
 800a444:	f7ff fd7a 	bl	8009f3c <pb_make_string_substream>
 800a448:	b150      	cbz	r0, 800a460 <pb_decode_delimited+0x28>
    status = pb_decode(&substream, fields, dest_struct);
 800a44a:	4621      	mov	r1, r4
 800a44c:	9a01      	ldr	r2, [sp, #4]
 800a44e:	a802      	add	r0, sp, #8
 800a450:	f7ff ffb2 	bl	800a3b8 <pb_decode>
    if (!pb_close_string_substream(stream, &substream))
 800a454:	a902      	add	r1, sp, #8
    status = pb_decode(&substream, fields, dest_struct);
 800a456:	4604      	mov	r4, r0
    if (!pb_close_string_substream(stream, &substream))
 800a458:	4628      	mov	r0, r5
 800a45a:	f7ff fd8f 	bl	8009f7c <pb_close_string_substream>
 800a45e:	b900      	cbnz	r0, 800a462 <pb_decode_delimited+0x2a>
        return false;
 800a460:	2400      	movs	r4, #0
}
 800a462:	4620      	mov	r0, r4
 800a464:	b007      	add	sp, #28
 800a466:	bd30      	pop	{r4, r5, pc}

0800a468 <pb_decode_svarint>:
{
 800a468:	b513      	push	{r0, r1, r4, lr}
 800a46a:	460c      	mov	r4, r1
    if (!pb_decode_varint(stream, &value))
 800a46c:	4669      	mov	r1, sp
 800a46e:	f7ff fc6f 	bl	8009d50 <pb_decode_varint>
 800a472:	b160      	cbz	r0, 800a48e <pb_decode_svarint+0x26>
    if (value & 1)
 800a474:	e9dd 1300 	ldrd	r1, r3, [sp]
        *dest = (pb_int64_t)(~(value >> 1));
 800a478:	084a      	lsrs	r2, r1, #1
    if (value & 1)
 800a47a:	07c9      	lsls	r1, r1, #31
        *dest = (pb_int64_t)(~(value >> 1));
 800a47c:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 800a480:	ea4f 0353 	mov.w	r3, r3, lsr #1
 800a484:	bf44      	itt	mi
 800a486:	43d2      	mvnmi	r2, r2
 800a488:	43db      	mvnmi	r3, r3
        *dest = (pb_int64_t)(value >> 1);
 800a48a:	e9c4 2300 	strd	r2, r3, [r4]
}
 800a48e:	b002      	add	sp, #8
 800a490:	bd10      	pop	{r4, pc}
	...

0800a494 <pb_dec_svarint>:
{
 800a494:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a496:	460e      	mov	r6, r1
    if (!pb_decode_svarint(stream, &value))
 800a498:	4669      	mov	r1, sp
{
 800a49a:	4604      	mov	r4, r0
 800a49c:	4615      	mov	r5, r2
    if (!pb_decode_svarint(stream, &value))
 800a49e:	f7ff ffe3 	bl	800a468 <pb_decode_svarint>
 800a4a2:	b138      	cbz	r0, 800a4b4 <pb_dec_svarint+0x20>
    if (field->data_size == sizeof(pb_int64_t))
 800a4a4:	f8b6 3007 	ldrh.w	r3, [r6, #7]
 800a4a8:	2b08      	cmp	r3, #8
 800a4aa:	d105      	bne.n	800a4b8 <pb_dec_svarint+0x24>
        clamped = *(pb_int64_t*)dest = value;
 800a4ac:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a4b0:	e9c5 2300 	strd	r2, r3, [r5]
}
 800a4b4:	b002      	add	sp, #8
 800a4b6:	bd70      	pop	{r4, r5, r6, pc}
    else if (field->data_size == sizeof(int32_t))
 800a4b8:	2b04      	cmp	r3, #4
 800a4ba:	d10b      	bne.n	800a4d4 <pb_dec_svarint+0x40>
        clamped = *(int32_t*)dest = (int32_t)value;
 800a4bc:	9b00      	ldr	r3, [sp, #0]
 800a4be:	602b      	str	r3, [r5, #0]
        clamped = *(int_least8_t*)dest = (int_least8_t)value;
 800a4c0:	17da      	asrs	r2, r3, #31
    if (clamped != value)
 800a4c2:	e9dd 5100 	ldrd	r5, r1, [sp]
 800a4c6:	4291      	cmp	r1, r2
 800a4c8:	bf08      	it	eq
 800a4ca:	429d      	cmpeq	r5, r3
 800a4cc:	d0f2      	beq.n	800a4b4 <pb_dec_svarint+0x20>
        PB_RETURN_ERROR(stream, "integer too large");
 800a4ce:	68e3      	ldr	r3, [r4, #12]
 800a4d0:	4a0a      	ldr	r2, [pc, #40]	; (800a4fc <pb_dec_svarint+0x68>)
 800a4d2:	e00d      	b.n	800a4f0 <pb_dec_svarint+0x5c>
    else if (field->data_size == sizeof(int_least16_t))
 800a4d4:	2b02      	cmp	r3, #2
 800a4d6:	d103      	bne.n	800a4e0 <pb_dec_svarint+0x4c>
        clamped = *(int_least16_t*)dest = (int_least16_t)value;
 800a4d8:	f9bd 3000 	ldrsh.w	r3, [sp]
 800a4dc:	802b      	strh	r3, [r5, #0]
 800a4de:	e7ef      	b.n	800a4c0 <pb_dec_svarint+0x2c>
    else if (field->data_size == sizeof(int_least8_t))
 800a4e0:	2b01      	cmp	r3, #1
 800a4e2:	d103      	bne.n	800a4ec <pb_dec_svarint+0x58>
        clamped = *(int_least8_t*)dest = (int_least8_t)value;
 800a4e4:	f99d 3000 	ldrsb.w	r3, [sp]
 800a4e8:	702b      	strb	r3, [r5, #0]
 800a4ea:	e7e9      	b.n	800a4c0 <pb_dec_svarint+0x2c>
        PB_RETURN_ERROR(stream, "invalid data_size");
 800a4ec:	68e3      	ldr	r3, [r4, #12]
 800a4ee:	4a04      	ldr	r2, [pc, #16]	; (800a500 <pb_dec_svarint+0x6c>)
        PB_RETURN_ERROR(stream, "integer too large");
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	bf08      	it	eq
 800a4f4:	4613      	moveq	r3, r2
 800a4f6:	2000      	movs	r0, #0
 800a4f8:	60e3      	str	r3, [r4, #12]
 800a4fa:	e7db      	b.n	800a4b4 <pb_dec_svarint+0x20>
 800a4fc:	080162eb 	.word	0x080162eb
 800a500:	080162d9 	.word	0x080162d9

0800a504 <pb_decode_fixed32>:
    if (!pb_read(stream, bytes, 4))
 800a504:	2204      	movs	r2, #4
{
 800a506:	b513      	push	{r0, r1, r4, lr}
 800a508:	460c      	mov	r4, r1
    if (!pb_read(stream, bytes, 4))
 800a50a:	eb0d 0102 	add.w	r1, sp, r2
 800a50e:	f7ff fb51 	bl	8009bb4 <pb_read>
 800a512:	b108      	cbz	r0, 800a518 <pb_decode_fixed32+0x14>
    *(uint32_t*)dest = ((uint32_t)bytes[0] << 0) |
 800a514:	9b01      	ldr	r3, [sp, #4]
 800a516:	6023      	str	r3, [r4, #0]
}
 800a518:	b002      	add	sp, #8
 800a51a:	bd10      	pop	{r4, pc}

0800a51c <pb_dec_fixed32>:
    return pb_decode_fixed32(stream, dest);
 800a51c:	4611      	mov	r1, r2
 800a51e:	f7ff bff1 	b.w	800a504 <pb_decode_fixed32>

0800a522 <pb_decode_fixed64>:
{
 800a522:	b513      	push	{r0, r1, r4, lr}
    if (!pb_read(stream, bytes, 8))
 800a524:	2208      	movs	r2, #8
{
 800a526:	460c      	mov	r4, r1
    if (!pb_read(stream, bytes, 8))
 800a528:	4669      	mov	r1, sp
 800a52a:	f7ff fb43 	bl	8009bb4 <pb_read>
 800a52e:	b118      	cbz	r0, 800a538 <pb_decode_fixed64+0x16>
    *(uint64_t*)dest = ((uint64_t)bytes[0] << 0) |
 800a530:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a534:	e9c4 2300 	strd	r2, r3, [r4]
}
 800a538:	b002      	add	sp, #8
 800a53a:	bd10      	pop	{r4, pc}

0800a53c <pb_dec_fixed64>:
    return pb_decode_fixed64(stream, dest);
 800a53c:	4611      	mov	r1, r2
 800a53e:	f7ff bff0 	b.w	800a522 <pb_decode_fixed64>

0800a542 <pb_check_proto3_default_value>:
}

/* In proto3, all fields are optional and are only encoded if their value is "non-zero".
 * This function implements the check for the zero value. */
static bool pb_check_proto3_default_value(const pb_field_t *field, const void *pData)
{
 800a542:	b510      	push	{r4, lr}
    pb_type_t type = field->type;
 800a544:	7882      	ldrb	r2, [r0, #2]
{
 800a546:	b086      	sub	sp, #24
    const void *pSize = (const char*)pData + field->size_offset;

    if (PB_HTYPE(type) == PB_HTYPE_REQUIRED)
 800a548:	f012 0330 	ands.w	r3, r2, #48	; 0x30
 800a54c:	d043      	beq.n	800a5d6 <pb_check_proto3_default_value+0x94>
    {
        /* Required proto2 fields inside proto3 submessage, pretty rare case */
        return false;
    }
    else if (PB_HTYPE(type) == PB_HTYPE_REPEATED)
 800a54e:	2b20      	cmp	r3, #32
    const void *pSize = (const char*)pData + field->size_offset;
 800a550:	f9b0 4005 	ldrsh.w	r4, [r0, #5]
    else if (PB_HTYPE(type) == PB_HTYPE_REPEATED)
 800a554:	d104      	bne.n	800a560 <pb_check_proto3_default_value+0x1e>
        return *(const pb_size_t*)pSize == 0;
    }
    else if (PB_HTYPE(type) == PB_HTYPE_ONEOF)
    {
        /* Oneof fields */
        return *(const pb_size_t*)pSize == 0;
 800a556:	5b08      	ldrh	r0, [r1, r4]
    if (PB_ATYPE(type) == PB_ATYPE_STATIC)
    {
        if (PB_LTYPE(type) == PB_LTYPE_BYTES)
        {
            const pb_bytes_array_t *bytes = (const pb_bytes_array_t*)pData;
            return bytes->size == 0;
 800a558:	fab0 f080 	clz	r0, r0
 800a55c:	0940      	lsrs	r0, r0, #5
 800a55e:	e007      	b.n	800a570 <pb_check_proto3_default_value+0x2e>
    else if (PB_HTYPE(type) == PB_HTYPE_ONEOF)
 800a560:	2b30      	cmp	r3, #48	; 0x30
 800a562:	d0f8      	beq.n	800a556 <pb_check_proto3_default_value+0x14>
    else if (PB_HTYPE(type) == PB_HTYPE_OPTIONAL && field->size_offset)
 800a564:	2b10      	cmp	r3, #16
 800a566:	d105      	bne.n	800a574 <pb_check_proto3_default_value+0x32>
 800a568:	b124      	cbz	r4, 800a574 <pb_check_proto3_default_value+0x32>
        return *(const bool*)pSize == false;
 800a56a:	5d08      	ldrb	r0, [r1, r4]
 800a56c:	f080 0001 	eor.w	r0, r0, #1
	        }
	    }

	    return true;
	}
}
 800a570:	b006      	add	sp, #24
 800a572:	bd10      	pop	{r4, pc}
    if (PB_ATYPE(type) == PB_ATYPE_STATIC)
 800a574:	f012 0fc0 	tst.w	r2, #192	; 0xc0
 800a578:	d006      	beq.n	800a588 <pb_check_proto3_default_value+0x46>
 800a57a:	f8b0 3007 	ldrh.w	r3, [r0, #7]
 800a57e:	440b      	add	r3, r1
	    for (i = 0; i < field->data_size; i++)
 800a580:	428b      	cmp	r3, r1
 800a582:	d124      	bne.n	800a5ce <pb_check_proto3_default_value+0x8c>
	    return true;
 800a584:	2001      	movs	r0, #1
 800a586:	e7f3      	b.n	800a570 <pb_check_proto3_default_value+0x2e>
        if (PB_LTYPE(type) == PB_LTYPE_BYTES)
 800a588:	f002 030f 	and.w	r3, r2, #15
 800a58c:	2b05      	cmp	r3, #5
 800a58e:	d101      	bne.n	800a594 <pb_check_proto3_default_value+0x52>
            return bytes->size == 0;
 800a590:	8808      	ldrh	r0, [r1, #0]
 800a592:	e7e1      	b.n	800a558 <pb_check_proto3_default_value+0x16>
        else if (PB_LTYPE(type) == PB_LTYPE_STRING)
 800a594:	2b06      	cmp	r3, #6
 800a596:	d101      	bne.n	800a59c <pb_check_proto3_default_value+0x5a>
            return *(const char*)pData == '\0';
 800a598:	7808      	ldrb	r0, [r1, #0]
 800a59a:	e7dd      	b.n	800a558 <pb_check_proto3_default_value+0x16>
        else if (PB_LTYPE(type) == PB_LTYPE_FIXED_LENGTH_BYTES)
 800a59c:	2b09      	cmp	r3, #9
 800a59e:	d102      	bne.n	800a5a6 <pb_check_proto3_default_value+0x64>
            return field->data_size == 0;
 800a5a0:	f8b0 0007 	ldrh.w	r0, [r0, #7]
 800a5a4:	e7d8      	b.n	800a558 <pb_check_proto3_default_value+0x16>
        else if (PB_LTYPE(type) == PB_LTYPE_SUBMESSAGE)
 800a5a6:	2b07      	cmp	r3, #7
 800a5a8:	d1e7      	bne.n	800a57a <pb_check_proto3_default_value+0x38>
            if (pb_field_iter_begin(&iter, (const pb_field_t*)field->ptr, pb_const_cast(pData)))
 800a5aa:	460a      	mov	r2, r1
 800a5ac:	f8d0 100b 	ldr.w	r1, [r0, #11]
 800a5b0:	4668      	mov	r0, sp
 800a5b2:	f7ff f9ab 	bl	800990c <pb_field_iter_begin>
 800a5b6:	2800      	cmp	r0, #0
 800a5b8:	d0e4      	beq.n	800a584 <pb_check_proto3_default_value+0x42>
                    if (!pb_check_proto3_default_value(iter.pos, iter.pData))
 800a5ba:	9904      	ldr	r1, [sp, #16]
 800a5bc:	9801      	ldr	r0, [sp, #4]
 800a5be:	f7ff ffc0 	bl	800a542 <pb_check_proto3_default_value>
 800a5c2:	2800      	cmp	r0, #0
 800a5c4:	d0d4      	beq.n	800a570 <pb_check_proto3_default_value+0x2e>
                } while (pb_field_iter_next(&iter));
 800a5c6:	4668      	mov	r0, sp
 800a5c8:	f7ff f9b2 	bl	8009930 <pb_field_iter_next>
 800a5cc:	e7f3      	b.n	800a5b6 <pb_check_proto3_default_value+0x74>
	        if (p[i] != 0)
 800a5ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a5d2:	2a00      	cmp	r2, #0
 800a5d4:	d0d4      	beq.n	800a580 <pb_check_proto3_default_value+0x3e>
        return false;
 800a5d6:	2000      	movs	r0, #0
 800a5d8:	e7ca      	b.n	800a570 <pb_check_proto3_default_value+0x2e>
	...

0800a5dc <pb_write>:
{
 800a5dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (stream->callback != NULL)
 800a5de:	6806      	ldr	r6, [r0, #0]
{
 800a5e0:	4604      	mov	r4, r0
 800a5e2:	4615      	mov	r5, r2
    if (stream->callback != NULL)
 800a5e4:	b1ae      	cbz	r6, 800a612 <pb_write+0x36>
        if (stream->bytes_written + count > stream->max_size)
 800a5e6:	68c3      	ldr	r3, [r0, #12]
 800a5e8:	6887      	ldr	r7, [r0, #8]
 800a5ea:	4413      	add	r3, r2
 800a5ec:	429f      	cmp	r7, r3
 800a5ee:	d207      	bcs.n	800a600 <pb_write+0x24>
            PB_RETURN_ERROR(stream, "stream full");
 800a5f0:	6903      	ldr	r3, [r0, #16]
 800a5f2:	4a0a      	ldr	r2, [pc, #40]	; (800a61c <pb_write+0x40>)
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	bf08      	it	eq
 800a5f8:	4613      	moveq	r3, r2
 800a5fa:	6103      	str	r3, [r0, #16]
 800a5fc:	2000      	movs	r0, #0
}
 800a5fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (!stream->callback(stream, buf, count))
 800a600:	47b0      	blx	r6
 800a602:	b930      	cbnz	r0, 800a612 <pb_write+0x36>
            PB_RETURN_ERROR(stream, "io error");
 800a604:	6923      	ldr	r3, [r4, #16]
 800a606:	4a06      	ldr	r2, [pc, #24]	; (800a620 <pb_write+0x44>)
 800a608:	2b00      	cmp	r3, #0
 800a60a:	bf08      	it	eq
 800a60c:	4613      	moveq	r3, r2
 800a60e:	6123      	str	r3, [r4, #16]
 800a610:	e7f5      	b.n	800a5fe <pb_write+0x22>
    stream->bytes_written += count;
 800a612:	68e2      	ldr	r2, [r4, #12]
    return true;
 800a614:	2001      	movs	r0, #1
    stream->bytes_written += count;
 800a616:	442a      	add	r2, r5
 800a618:	60e2      	str	r2, [r4, #12]
    return true;
 800a61a:	e7f0      	b.n	800a5fe <pb_write+0x22>
 800a61c:	080163d4 	.word	0x080163d4
 800a620:	0801625e 	.word	0x0801625e

0800a624 <pb_encode_varint>:
bool checkreturn pb_encode_varint(pb_ostream_t *stream, pb_uint64_t value)
{
    pb_byte_t buffer[10];
    size_t i = 0;
    
    if (value <= 0x7F)
 800a624:	2a80      	cmp	r2, #128	; 0x80
{
 800a626:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (value <= 0x7F)
 800a628:	f173 0100 	sbcs.w	r1, r3, #0
{
 800a62c:	4605      	mov	r5, r0
    if (value <= 0x7F)
 800a62e:	d207      	bcs.n	800a640 <pb_encode_varint+0x1c>
    {
        pb_byte_t v = (pb_byte_t)value;
 800a630:	f88d 2004 	strb.w	r2, [sp, #4]
        return pb_write(stream, &v, 1);
 800a634:	a901      	add	r1, sp, #4
 800a636:	2201      	movs	r2, #1
        value >>= 7;
        i++;
    }
    buffer[i-1] &= 0x7F; /* Unset top bit on last byte */
    
    return pb_write(stream, buffer, i);
 800a638:	f7ff ffd0 	bl	800a5dc <pb_write>
}
 800a63c:	b004      	add	sp, #16
 800a63e:	bd70      	pop	{r4, r5, r6, pc}
 800a640:	ae01      	add	r6, sp, #4
    size_t i = 0;
 800a642:	2400      	movs	r4, #0
        buffer[i] = (pb_byte_t)((value & 0x7F) | 0x80);
 800a644:	f062 017f 	orn	r1, r2, #127	; 0x7f
 800a648:	b2d0      	uxtb	r0, r2
 800a64a:	f806 1b01 	strb.w	r1, [r6], #1
        value >>= 7;
 800a64e:	09d1      	lsrs	r1, r2, #7
 800a650:	ea41 6243 	orr.w	r2, r1, r3, lsl #25
 800a654:	4621      	mov	r1, r4
 800a656:	09db      	lsrs	r3, r3, #7
        i++;
 800a658:	3401      	adds	r4, #1
    while (value)
 800a65a:	ea52 0c03 	orrs.w	ip, r2, r3
 800a65e:	d1f1      	bne.n	800a644 <pb_encode_varint+0x20>
    buffer[i-1] &= 0x7F; /* Unset top bit on last byte */
 800a660:	f101 0310 	add.w	r3, r1, #16
 800a664:	f000 027f 	and.w	r2, r0, #127	; 0x7f
    return pb_write(stream, buffer, i);
 800a668:	a901      	add	r1, sp, #4
 800a66a:	4628      	mov	r0, r5
    buffer[i-1] &= 0x7F; /* Unset top bit on last byte */
 800a66c:	446b      	add	r3, sp
 800a66e:	f803 2c0c 	strb.w	r2, [r3, #-12]
    return pb_write(stream, buffer, i);
 800a672:	4622      	mov	r2, r4
 800a674:	e7e0      	b.n	800a638 <pb_encode_varint+0x14>
	...

0800a678 <pb_enc_uvarint>:

static bool checkreturn pb_enc_uvarint(pb_ostream_t *stream, const pb_field_t *field, const void *src)
{
    pb_uint64_t value = 0;
    
    if (field->data_size == sizeof(uint_least8_t))
 800a678:	f8b1 3007 	ldrh.w	r3, [r1, #7]
 800a67c:	2b01      	cmp	r3, #1
 800a67e:	d104      	bne.n	800a68a <pb_enc_uvarint+0x12>
        value = *(const uint_least8_t*)src;
 800a680:	7811      	ldrb	r1, [r2, #0]
    else if (field->data_size == sizeof(uint_least16_t))
        value = *(const uint_least16_t*)src;
    else if (field->data_size == sizeof(uint32_t))
        value = *(const uint32_t*)src;
 800a682:	2300      	movs	r3, #0
    else if (field->data_size == sizeof(pb_uint64_t))
        value = *(const pb_uint64_t*)src;
    else
        PB_RETURN_ERROR(stream, "invalid data_size");
    
    return pb_encode_varint(stream, value);
 800a684:	460a      	mov	r2, r1
 800a686:	f7ff bfcd 	b.w	800a624 <pb_encode_varint>
    else if (field->data_size == sizeof(uint_least16_t))
 800a68a:	2b02      	cmp	r3, #2
 800a68c:	d101      	bne.n	800a692 <pb_enc_uvarint+0x1a>
        value = *(const uint_least16_t*)src;
 800a68e:	8811      	ldrh	r1, [r2, #0]
 800a690:	e7f7      	b.n	800a682 <pb_enc_uvarint+0xa>
    else if (field->data_size == sizeof(uint32_t))
 800a692:	2b04      	cmp	r3, #4
 800a694:	d101      	bne.n	800a69a <pb_enc_uvarint+0x22>
        value = *(const uint32_t*)src;
 800a696:	6811      	ldr	r1, [r2, #0]
 800a698:	e7f3      	b.n	800a682 <pb_enc_uvarint+0xa>
    else if (field->data_size == sizeof(pb_uint64_t))
 800a69a:	2b08      	cmp	r3, #8
 800a69c:	d102      	bne.n	800a6a4 <pb_enc_uvarint+0x2c>
        value = *(const pb_uint64_t*)src;
 800a69e:	e9d2 1300 	ldrd	r1, r3, [r2]
 800a6a2:	e7ef      	b.n	800a684 <pb_enc_uvarint+0xc>
        PB_RETURN_ERROR(stream, "invalid data_size");
 800a6a4:	6903      	ldr	r3, [r0, #16]
 800a6a6:	4a03      	ldr	r2, [pc, #12]	; (800a6b4 <pb_enc_uvarint+0x3c>)
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	bf08      	it	eq
 800a6ac:	4613      	moveq	r3, r2
 800a6ae:	6103      	str	r3, [r0, #16]
}
 800a6b0:	2000      	movs	r0, #0
 800a6b2:	4770      	bx	lr
 800a6b4:	080162d9 	.word	0x080162d9

0800a6b8 <pb_enc_varint>:
{
 800a6b8:	4613      	mov	r3, r2
    if (field->data_size == sizeof(int_least8_t))
 800a6ba:	f8b1 2007 	ldrh.w	r2, [r1, #7]
 800a6be:	2a01      	cmp	r2, #1
 800a6c0:	d104      	bne.n	800a6cc <pb_enc_varint+0x14>
        value = *(const int_least8_t*)src;
 800a6c2:	f993 2000 	ldrsb.w	r2, [r3]
        value = *(const int32_t*)src;
 800a6c6:	17d3      	asrs	r3, r2, #31
      return pb_encode_varint(stream, (pb_uint64_t)value);
 800a6c8:	f7ff bfac 	b.w	800a624 <pb_encode_varint>
    else if (field->data_size == sizeof(int_least16_t))
 800a6cc:	2a02      	cmp	r2, #2
 800a6ce:	d102      	bne.n	800a6d6 <pb_enc_varint+0x1e>
        value = *(const int_least16_t*)src;
 800a6d0:	f9b3 2000 	ldrsh.w	r2, [r3]
 800a6d4:	e7f7      	b.n	800a6c6 <pb_enc_varint+0xe>
    else if (field->data_size == sizeof(int32_t))
 800a6d6:	2a04      	cmp	r2, #4
 800a6d8:	d101      	bne.n	800a6de <pb_enc_varint+0x26>
        value = *(const int32_t*)src;
 800a6da:	681a      	ldr	r2, [r3, #0]
 800a6dc:	e7f3      	b.n	800a6c6 <pb_enc_varint+0xe>
    else if (field->data_size == sizeof(pb_int64_t))
 800a6de:	2a08      	cmp	r2, #8
 800a6e0:	d102      	bne.n	800a6e8 <pb_enc_varint+0x30>
        value = *(const pb_int64_t*)src;
 800a6e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6e6:	e7ef      	b.n	800a6c8 <pb_enc_varint+0x10>
        PB_RETURN_ERROR(stream, "invalid data_size");
 800a6e8:	6903      	ldr	r3, [r0, #16]
 800a6ea:	4a03      	ldr	r2, [pc, #12]	; (800a6f8 <pb_enc_varint+0x40>)
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	bf08      	it	eq
 800a6f0:	4613      	moveq	r3, r2
 800a6f2:	6103      	str	r3, [r0, #16]
}
 800a6f4:	2000      	movs	r0, #0
 800a6f6:	4770      	bx	lr
 800a6f8:	080162d9 	.word	0x080162d9

0800a6fc <pb_encode_svarint>:
        zigzagged = ~((pb_uint64_t)value << 1);
 800a6fc:	1892      	adds	r2, r2, r2
{
 800a6fe:	b410      	push	{r4}
 800a700:	461c      	mov	r4, r3
        zigzagged = ~((pb_uint64_t)value << 1);
 800a702:	eb43 0103 	adc.w	r1, r3, r3
    if (value < 0)
 800a706:	2c00      	cmp	r4, #0
        zigzagged = ~((pb_uint64_t)value << 1);
 800a708:	460b      	mov	r3, r1
}
 800a70a:	f85d 4b04 	ldr.w	r4, [sp], #4
        zigzagged = ~((pb_uint64_t)value << 1);
 800a70e:	bfbc      	itt	lt
 800a710:	43d2      	mvnlt	r2, r2
 800a712:	43cb      	mvnlt	r3, r1
    return pb_encode_varint(stream, zigzagged);
 800a714:	f7ff bf86 	b.w	800a624 <pb_encode_varint>

0800a718 <pb_enc_svarint>:

static bool checkreturn pb_enc_svarint(pb_ostream_t *stream, const pb_field_t *field, const void *src)
{
 800a718:	4613      	mov	r3, r2
    pb_int64_t value = 0;
    
    if (field->data_size == sizeof(int_least8_t))
 800a71a:	f8b1 2007 	ldrh.w	r2, [r1, #7]
 800a71e:	2a01      	cmp	r2, #1
 800a720:	d104      	bne.n	800a72c <pb_enc_svarint+0x14>
        value = *(const int_least8_t*)src;
 800a722:	f993 2000 	ldrsb.w	r2, [r3]
    else if (field->data_size == sizeof(int_least16_t))
        value = *(const int_least16_t*)src;
    else if (field->data_size == sizeof(int32_t))
        value = *(const int32_t*)src;
 800a726:	17d3      	asrs	r3, r2, #31
    else if (field->data_size == sizeof(pb_int64_t))
        value = *(const pb_int64_t*)src;
    else
        PB_RETURN_ERROR(stream, "invalid data_size");
    
    return pb_encode_svarint(stream, value);
 800a728:	f7ff bfe8 	b.w	800a6fc <pb_encode_svarint>
    else if (field->data_size == sizeof(int_least16_t))
 800a72c:	2a02      	cmp	r2, #2
 800a72e:	d102      	bne.n	800a736 <pb_enc_svarint+0x1e>
        value = *(const int_least16_t*)src;
 800a730:	f9b3 2000 	ldrsh.w	r2, [r3]
 800a734:	e7f7      	b.n	800a726 <pb_enc_svarint+0xe>
    else if (field->data_size == sizeof(int32_t))
 800a736:	2a04      	cmp	r2, #4
 800a738:	d101      	bne.n	800a73e <pb_enc_svarint+0x26>
        value = *(const int32_t*)src;
 800a73a:	681a      	ldr	r2, [r3, #0]
 800a73c:	e7f3      	b.n	800a726 <pb_enc_svarint+0xe>
    else if (field->data_size == sizeof(pb_int64_t))
 800a73e:	2a08      	cmp	r2, #8
 800a740:	d102      	bne.n	800a748 <pb_enc_svarint+0x30>
        value = *(const pb_int64_t*)src;
 800a742:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a746:	e7ef      	b.n	800a728 <pb_enc_svarint+0x10>
        PB_RETURN_ERROR(stream, "invalid data_size");
 800a748:	6903      	ldr	r3, [r0, #16]
 800a74a:	4a03      	ldr	r2, [pc, #12]	; (800a758 <pb_enc_svarint+0x40>)
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	bf08      	it	eq
 800a750:	4613      	moveq	r3, r2
 800a752:	6103      	str	r3, [r0, #16]
}
 800a754:	2000      	movs	r0, #0
 800a756:	4770      	bx	lr
 800a758:	080162d9 	.word	0x080162d9

0800a75c <pb_encode_fixed32>:
    uint32_t val = *(const uint32_t*)value;
 800a75c:	680b      	ldr	r3, [r1, #0]
{
 800a75e:	b507      	push	{r0, r1, r2, lr}
    bytes[1] = (pb_byte_t)((val >> 8) & 0xFF);
 800a760:	0a1a      	lsrs	r2, r3, #8
    bytes[0] = (pb_byte_t)(val & 0xFF);
 800a762:	f88d 3004 	strb.w	r3, [sp, #4]
    bytes[1] = (pb_byte_t)((val >> 8) & 0xFF);
 800a766:	f88d 2005 	strb.w	r2, [sp, #5]
    bytes[2] = (pb_byte_t)((val >> 16) & 0xFF);
 800a76a:	0c1a      	lsrs	r2, r3, #16
    bytes[3] = (pb_byte_t)((val >> 24) & 0xFF);
 800a76c:	0e1b      	lsrs	r3, r3, #24
    bytes[2] = (pb_byte_t)((val >> 16) & 0xFF);
 800a76e:	f88d 2006 	strb.w	r2, [sp, #6]
    return pb_write(stream, bytes, 4);
 800a772:	2204      	movs	r2, #4
    bytes[3] = (pb_byte_t)((val >> 24) & 0xFF);
 800a774:	f88d 3007 	strb.w	r3, [sp, #7]
    return pb_write(stream, bytes, 4);
 800a778:	eb0d 0102 	add.w	r1, sp, r2
 800a77c:	f7ff ff2e 	bl	800a5dc <pb_write>
}
 800a780:	b003      	add	sp, #12
 800a782:	f85d fb04 	ldr.w	pc, [sp], #4

0800a786 <pb_enc_fixed32>:
}

static bool checkreturn pb_enc_fixed32(pb_ostream_t *stream, const pb_field_t *field, const void *src)
{
    PB_UNUSED(field);
    return pb_encode_fixed32(stream, src);
 800a786:	4611      	mov	r1, r2
 800a788:	f7ff bfe8 	b.w	800a75c <pb_encode_fixed32>

0800a78c <pb_encode_fixed64>:
{
 800a78c:	b507      	push	{r0, r1, r2, lr}
    uint64_t val = *(const uint64_t*)value;
 800a78e:	e9d1 2300 	ldrd	r2, r3, [r1]
    bytes[1] = (pb_byte_t)((val >> 8) & 0xFF);
 800a792:	0a11      	lsrs	r1, r2, #8
    bytes[0] = (pb_byte_t)(val & 0xFF);
 800a794:	f88d 2000 	strb.w	r2, [sp]
    bytes[4] = (pb_byte_t)((val >> 32) & 0xFF);
 800a798:	f88d 3004 	strb.w	r3, [sp, #4]
    bytes[1] = (pb_byte_t)((val >> 8) & 0xFF);
 800a79c:	f88d 1001 	strb.w	r1, [sp, #1]
    bytes[2] = (pb_byte_t)((val >> 16) & 0xFF);
 800a7a0:	0c11      	lsrs	r1, r2, #16
    bytes[3] = (pb_byte_t)((val >> 24) & 0xFF);
 800a7a2:	0e12      	lsrs	r2, r2, #24
    bytes[2] = (pb_byte_t)((val >> 16) & 0xFF);
 800a7a4:	f88d 1002 	strb.w	r1, [sp, #2]
    return pb_write(stream, bytes, 8);
 800a7a8:	4669      	mov	r1, sp
    bytes[3] = (pb_byte_t)((val >> 24) & 0xFF);
 800a7aa:	f88d 2003 	strb.w	r2, [sp, #3]
    bytes[5] = (pb_byte_t)((val >> 40) & 0xFF);
 800a7ae:	0a1a      	lsrs	r2, r3, #8
 800a7b0:	f88d 2005 	strb.w	r2, [sp, #5]
    bytes[6] = (pb_byte_t)((val >> 48) & 0xFF);
 800a7b4:	0c1a      	lsrs	r2, r3, #16
    bytes[7] = (pb_byte_t)((val >> 56) & 0xFF);
 800a7b6:	0e1b      	lsrs	r3, r3, #24
    bytes[6] = (pb_byte_t)((val >> 48) & 0xFF);
 800a7b8:	f88d 2006 	strb.w	r2, [sp, #6]
    return pb_write(stream, bytes, 8);
 800a7bc:	2208      	movs	r2, #8
    bytes[7] = (pb_byte_t)((val >> 56) & 0xFF);
 800a7be:	f88d 3007 	strb.w	r3, [sp, #7]
    return pb_write(stream, bytes, 8);
 800a7c2:	f7ff ff0b 	bl	800a5dc <pb_write>
}
 800a7c6:	b003      	add	sp, #12
 800a7c8:	f85d fb04 	ldr.w	pc, [sp], #4

0800a7cc <pb_enc_fixed64>:
    return pb_encode_fixed64(stream, src);
 800a7cc:	4611      	mov	r1, r2
 800a7ce:	f7ff bfdd 	b.w	800a78c <pb_encode_fixed64>

0800a7d2 <pb_encode_tag>:
{
 800a7d2:	4613      	mov	r3, r2
    return pb_encode_varint(stream, tag);
 800a7d4:	ea41 02c2 	orr.w	r2, r1, r2, lsl #3
 800a7d8:	0f5b      	lsrs	r3, r3, #29
 800a7da:	f7ff bf23 	b.w	800a624 <pb_encode_varint>
	...

0800a7e0 <pb_encode_tag_for_field>:
    switch (PB_LTYPE(field->type))
 800a7e0:	788a      	ldrb	r2, [r1, #2]
{
 800a7e2:	460b      	mov	r3, r1
    switch (PB_LTYPE(field->type))
 800a7e4:	f002 020f 	and.w	r2, r2, #15
 800a7e8:	2a09      	cmp	r2, #9
 800a7ea:	d810      	bhi.n	800a80e <pb_encode_tag_for_field+0x2e>
 800a7ec:	e8df f002 	tbb	[pc, r2]
 800a7f0:	050b0b0b 	.word	0x050b0b0b
 800a7f4:	0909090d 	.word	0x0909090d
 800a7f8:	090f      	.short	0x090f
 800a7fa:	2105      	movs	r1, #5
    return pb_encode_tag(stream, wiretype, field->tag);
 800a7fc:	881a      	ldrh	r2, [r3, #0]
 800a7fe:	f7ff bfe8 	b.w	800a7d2 <pb_encode_tag>
            wiretype = PB_WT_STRING;
 800a802:	2102      	movs	r1, #2
            break;
 800a804:	e7fa      	b.n	800a7fc <pb_encode_tag_for_field+0x1c>
            wiretype = PB_WT_VARINT;
 800a806:	2100      	movs	r1, #0
 800a808:	e7f8      	b.n	800a7fc <pb_encode_tag_for_field+0x1c>
            wiretype = PB_WT_64BIT;
 800a80a:	2101      	movs	r1, #1
 800a80c:	e7f6      	b.n	800a7fc <pb_encode_tag_for_field+0x1c>
            PB_RETURN_ERROR(stream, "invalid field type");
 800a80e:	6903      	ldr	r3, [r0, #16]
 800a810:	4a03      	ldr	r2, [pc, #12]	; (800a820 <pb_encode_tag_for_field+0x40>)
 800a812:	2b00      	cmp	r3, #0
 800a814:	bf08      	it	eq
 800a816:	4613      	moveq	r3, r2
 800a818:	6103      	str	r3, [r0, #16]
}
 800a81a:	2000      	movs	r0, #0
 800a81c:	4770      	bx	lr
 800a81e:	bf00      	nop
 800a820:	08016336 	.word	0x08016336

0800a824 <encode_field>:
{
 800a824:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a828:	4616      	mov	r6, r2
    switch (PB_ATYPE(field->type))
 800a82a:	788a      	ldrb	r2, [r1, #2]
{
 800a82c:	b086      	sub	sp, #24
 800a82e:	4605      	mov	r5, r0
    switch (PB_ATYPE(field->type))
 800a830:	f002 03c0 	and.w	r3, r2, #192	; 0xc0
{
 800a834:	460c      	mov	r4, r1
    switch (PB_ATYPE(field->type))
 800a836:	2b40      	cmp	r3, #64	; 0x40
 800a838:	f000 80dd 	beq.w	800a9f6 <encode_field+0x1d2>
 800a83c:	0653      	lsls	r3, r2, #25
 800a83e:	d41b      	bmi.n	800a878 <encode_field+0x54>
    func = PB_ENCODERS[PB_LTYPE(field->type)];
 800a840:	4b75      	ldr	r3, [pc, #468]	; (800aa18 <encode_field+0x1f4>)
 800a842:	f002 010f 	and.w	r1, r2, #15
 800a846:	f853 7021 	ldr.w	r7, [r3, r1, lsl #2]
    if (field->size_offset)
 800a84a:	f9b4 3005 	ldrsh.w	r3, [r4, #5]
 800a84e:	b1b3      	cbz	r3, 800a87e <encode_field+0x5a>
        pSize = (const char*)pData + field->size_offset;
 800a850:	4433      	add	r3, r6
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 800a852:	78a2      	ldrb	r2, [r4, #2]
 800a854:	f002 00c0 	and.w	r0, r2, #192	; 0xc0
 800a858:	2880      	cmp	r0, #128	; 0x80
 800a85a:	d105      	bne.n	800a868 <encode_field+0x44>
        pData = *(const void* const*)pData;
 800a85c:	6836      	ldr	r6, [r6, #0]
        implicit_has = (pData != NULL);
 800a85e:	1e31      	subs	r1, r6, #0
 800a860:	bf18      	it	ne
 800a862:	2101      	movne	r1, #1
 800a864:	f88d 1003 	strb.w	r1, [sp, #3]
    switch (PB_HTYPE(field->type))
 800a868:	f002 0130 	and.w	r1, r2, #48	; 0x30
 800a86c:	2920      	cmp	r1, #32
 800a86e:	d03e      	beq.n	800a8ee <encode_field+0xca>
 800a870:	d818      	bhi.n	800a8a4 <encode_field+0x80>
 800a872:	b361      	cbz	r1, 800a8ce <encode_field+0xaa>
 800a874:	2910      	cmp	r1, #16
 800a876:	d033      	beq.n	800a8e0 <encode_field+0xbc>
            PB_RETURN_ERROR(stream, "invalid field type");
 800a878:	692b      	ldr	r3, [r5, #16]
 800a87a:	4a68      	ldr	r2, [pc, #416]	; (800aa1c <encode_field+0x1f8>)
 800a87c:	e02b      	b.n	800a8d6 <encode_field+0xb2>
    else if (PB_HTYPE(field->type) == PB_HTYPE_OPTIONAL)
 800a87e:	f002 0230 	and.w	r2, r2, #48	; 0x30
 800a882:	2a10      	cmp	r2, #16
 800a884:	d10a      	bne.n	800a89c <encode_field+0x78>
        implicit_has = !pb_check_proto3_default_value(field, pData);
 800a886:	4631      	mov	r1, r6
 800a888:	4620      	mov	r0, r4
 800a88a:	f7ff fe5a 	bl	800a542 <pb_check_proto3_default_value>
 800a88e:	f080 0001 	eor.w	r0, r0, #1
 800a892:	f88d 0003 	strb.w	r0, [sp, #3]
    const void *pSize = &implicit_has;
 800a896:	f10d 0303 	add.w	r3, sp, #3
 800a89a:	e7da      	b.n	800a852 <encode_field+0x2e>
        implicit_has = true;
 800a89c:	2301      	movs	r3, #1
 800a89e:	f88d 3003 	strb.w	r3, [sp, #3]
 800a8a2:	e7f8      	b.n	800a896 <encode_field+0x72>
    switch (PB_HTYPE(field->type))
 800a8a4:	2930      	cmp	r1, #48	; 0x30
 800a8a6:	d1e7      	bne.n	800a878 <encode_field+0x54>
            if (*(const pb_size_t*)pSize == field->tag)
 800a8a8:	881a      	ldrh	r2, [r3, #0]
 800a8aa:	8823      	ldrh	r3, [r4, #0]
 800a8ac:	429a      	cmp	r2, r3
 800a8ae:	d11a      	bne.n	800a8e6 <encode_field+0xc2>
                if (!pb_encode_tag_for_field(stream, field))
 800a8b0:	4621      	mov	r1, r4
 800a8b2:	4628      	mov	r0, r5
 800a8b4:	f7ff ff94 	bl	800a7e0 <pb_encode_tag_for_field>
 800a8b8:	2800      	cmp	r0, #0
 800a8ba:	f000 8090 	beq.w	800a9de <encode_field+0x1ba>
                if (!func(stream, field, pData))
 800a8be:	4632      	mov	r2, r6
 800a8c0:	4621      	mov	r1, r4
 800a8c2:	4628      	mov	r0, r5
 800a8c4:	463b      	mov	r3, r7
}
 800a8c6:	b006      	add	sp, #24
 800a8c8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
                if (!func(stream, field, pData))
 800a8cc:	4718      	bx	r3
            if (!pData)
 800a8ce:	2e00      	cmp	r6, #0
 800a8d0:	d1ee      	bne.n	800a8b0 <encode_field+0x8c>
                PB_RETURN_ERROR(stream, "missing required field");
 800a8d2:	692b      	ldr	r3, [r5, #16]
 800a8d4:	4a52      	ldr	r2, [pc, #328]	; (800aa20 <encode_field+0x1fc>)
            PB_RETURN_ERROR(stream, "invalid field type");
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	bf08      	it	eq
 800a8da:	4613      	moveq	r3, r2
 800a8dc:	612b      	str	r3, [r5, #16]
 800a8de:	e07e      	b.n	800a9de <encode_field+0x1ba>
            if (*(const bool*)pSize)
 800a8e0:	781b      	ldrb	r3, [r3, #0]
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d1e4      	bne.n	800a8b0 <encode_field+0x8c>
    return true;
 800a8e6:	2001      	movs	r0, #1
}
 800a8e8:	b006      	add	sp, #24
 800a8ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            if (field->size_offset != 0) {
 800a8ee:	f9b4 1005 	ldrsh.w	r1, [r4, #5]
 800a8f2:	b169      	cbz	r1, 800a910 <encode_field+0xec>
                count = *(const pb_size_t*)pSize;
 800a8f4:	f8b3 8000 	ldrh.w	r8, [r3]
    if (count == 0)
 800a8f8:	f1b8 0f00 	cmp.w	r8, #0
 800a8fc:	d0f3      	beq.n	800a8e6 <encode_field+0xc2>
    if (PB_ATYPE(field->type) != PB_ATYPE_POINTER && count > field->array_size)
 800a8fe:	2880      	cmp	r0, #128	; 0x80
 800a900:	d009      	beq.n	800a916 <encode_field+0xf2>
 800a902:	f8b4 3009 	ldrh.w	r3, [r4, #9]
 800a906:	4598      	cmp	r8, r3
 800a908:	d905      	bls.n	800a916 <encode_field+0xf2>
        PB_RETURN_ERROR(stream, "array max size exceeded");
 800a90a:	692b      	ldr	r3, [r5, #16]
 800a90c:	4a45      	ldr	r2, [pc, #276]	; (800aa24 <encode_field+0x200>)
 800a90e:	e7e2      	b.n	800a8d6 <encode_field+0xb2>
                count = field->array_size;
 800a910:	f8b4 8009 	ldrh.w	r8, [r4, #9]
 800a914:	e7f0      	b.n	800a8f8 <encode_field+0xd4>
    if (PB_LTYPE(field->type) <= PB_LTYPE_LAST_PACKABLE)
 800a916:	f002 020f 	and.w	r2, r2, #15
 800a91a:	2a04      	cmp	r2, #4
 800a91c:	d849      	bhi.n	800a9b2 <encode_field+0x18e>
        if (!pb_encode_tag(stream, PB_WT_STRING, field->tag))
 800a91e:	8822      	ldrh	r2, [r4, #0]
 800a920:	2102      	movs	r1, #2
 800a922:	4628      	mov	r0, r5
 800a924:	f7ff ff55 	bl	800a7d2 <pb_encode_tag>
 800a928:	2800      	cmp	r0, #0
 800a92a:	d058      	beq.n	800a9de <encode_field+0x1ba>
        if (PB_LTYPE(field->type) == PB_LTYPE_FIXED32)
 800a92c:	78a3      	ldrb	r3, [r4, #2]
 800a92e:	f003 030f 	and.w	r3, r3, #15
 800a932:	2b03      	cmp	r3, #3
 800a934:	d111      	bne.n	800a95a <encode_field+0x136>
            size = 4 * count;
 800a936:	ea4f 0988 	mov.w	r9, r8, lsl #2
        if (!pb_encode_varint(stream, (pb_uint64_t)size))
 800a93a:	464a      	mov	r2, r9
 800a93c:	2300      	movs	r3, #0
 800a93e:	4628      	mov	r0, r5
 800a940:	f7ff fe70 	bl	800a624 <pb_encode_varint>
 800a944:	2800      	cmp	r0, #0
 800a946:	d04a      	beq.n	800a9de <encode_field+0x1ba>
        if (stream->callback == NULL)
 800a948:	6829      	ldr	r1, [r5, #0]
 800a94a:	bb19      	cbnz	r1, 800a994 <encode_field+0x170>
            return pb_write(stream, NULL, size); /* Just sizing.. */
 800a94c:	464a      	mov	r2, r9
 800a94e:	4628      	mov	r0, r5
}
 800a950:	b006      	add	sp, #24
 800a952:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
            return pb_write(stream, NULL, size); /* Just sizing.. */
 800a956:	f7ff be41 	b.w	800a5dc <pb_write>
        else if (PB_LTYPE(field->type) == PB_LTYPE_FIXED64)
 800a95a:	2b04      	cmp	r3, #4
 800a95c:	d102      	bne.n	800a964 <encode_field+0x140>
            size = 8 * count;
 800a95e:	ea4f 09c8 	mov.w	r9, r8, lsl #3
 800a962:	e7ea      	b.n	800a93a <encode_field+0x116>
            pb_ostream_t sizestream = PB_OSTREAM_SIZING;
 800a964:	46b2      	mov	sl, r6
            for (i = 0; i < count; i++)
 800a966:	f04f 0900 	mov.w	r9, #0
            pb_ostream_t sizestream = PB_OSTREAM_SIZING;
 800a96a:	2214      	movs	r2, #20
 800a96c:	2100      	movs	r1, #0
 800a96e:	a801      	add	r0, sp, #4
 800a970:	f007 fc2c 	bl	80121cc <memset>
                if (!func(&sizestream, field, p))
 800a974:	4652      	mov	r2, sl
 800a976:	4621      	mov	r1, r4
 800a978:	a801      	add	r0, sp, #4
 800a97a:	47b8      	blx	r7
 800a97c:	2800      	cmp	r0, #0
 800a97e:	d0b3      	beq.n	800a8e8 <encode_field+0xc4>
            for (i = 0; i < count; i++)
 800a980:	f109 0901 	add.w	r9, r9, #1
                p = (const char*)p + field->data_size;
 800a984:	f8b4 3007 	ldrh.w	r3, [r4, #7]
            for (i = 0; i < count; i++)
 800a988:	45c8      	cmp	r8, r9
                p = (const char*)p + field->data_size;
 800a98a:	449a      	add	sl, r3
            for (i = 0; i < count; i++)
 800a98c:	d8f2      	bhi.n	800a974 <encode_field+0x150>
            size = sizestream.bytes_written;
 800a98e:	f8dd 9010 	ldr.w	r9, [sp, #16]
 800a992:	e7d2      	b.n	800a93a <encode_field+0x116>
        for (i = 0; i < count; i++)
 800a994:	f04f 0900 	mov.w	r9, #0
            if (!func(stream, field, p))
 800a998:	4632      	mov	r2, r6
 800a99a:	4621      	mov	r1, r4
 800a99c:	4628      	mov	r0, r5
 800a99e:	47b8      	blx	r7
 800a9a0:	b1e8      	cbz	r0, 800a9de <encode_field+0x1ba>
        for (i = 0; i < count; i++)
 800a9a2:	f109 0901 	add.w	r9, r9, #1
            p = (const char*)p + field->data_size;
 800a9a6:	f8b4 3007 	ldrh.w	r3, [r4, #7]
        for (i = 0; i < count; i++)
 800a9aa:	45c8      	cmp	r8, r9
            p = (const char*)p + field->data_size;
 800a9ac:	441e      	add	r6, r3
        for (i = 0; i < count; i++)
 800a9ae:	d8f3      	bhi.n	800a998 <encode_field+0x174>
 800a9b0:	e799      	b.n	800a8e6 <encode_field+0xc2>
        for (i = 0; i < count; i++)
 800a9b2:	f04f 0900 	mov.w	r9, #0
            if (!pb_encode_tag_for_field(stream, field))
 800a9b6:	4621      	mov	r1, r4
 800a9b8:	4628      	mov	r0, r5
 800a9ba:	f7ff ff11 	bl	800a7e0 <pb_encode_tag_for_field>
 800a9be:	b170      	cbz	r0, 800a9de <encode_field+0x1ba>
            if (PB_ATYPE(field->type) == PB_ATYPE_POINTER &&
 800a9c0:	78a3      	ldrb	r3, [r4, #2]
 800a9c2:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
 800a9c6:	2a80      	cmp	r2, #128	; 0x80
 800a9c8:	d113      	bne.n	800a9f2 <encode_field+0x1ce>
                (PB_LTYPE(field->type) == PB_LTYPE_STRING ||
 800a9ca:	f003 030f 	and.w	r3, r3, #15
 800a9ce:	3b05      	subs	r3, #5
            if (PB_ATYPE(field->type) == PB_ATYPE_POINTER &&
 800a9d0:	2b01      	cmp	r3, #1
 800a9d2:	d80e      	bhi.n	800a9f2 <encode_field+0x1ce>
                if (!func(stream, field, *(const void* const*)p))
 800a9d4:	6832      	ldr	r2, [r6, #0]
                if (!func(stream, field, p))
 800a9d6:	4621      	mov	r1, r4
 800a9d8:	4628      	mov	r0, r5
 800a9da:	47b8      	blx	r7
 800a9dc:	b908      	cbnz	r0, 800a9e2 <encode_field+0x1be>
            PB_RETURN_ERROR(stream, "invalid field type");
 800a9de:	2000      	movs	r0, #0
 800a9e0:	e782      	b.n	800a8e8 <encode_field+0xc4>
        for (i = 0; i < count; i++)
 800a9e2:	f109 0901 	add.w	r9, r9, #1
            p = (const char*)p + field->data_size;
 800a9e6:	f8b4 3007 	ldrh.w	r3, [r4, #7]
        for (i = 0; i < count; i++)
 800a9ea:	45c8      	cmp	r8, r9
            p = (const char*)p + field->data_size;
 800a9ec:	441e      	add	r6, r3
        for (i = 0; i < count; i++)
 800a9ee:	d8e2      	bhi.n	800a9b6 <encode_field+0x192>
 800a9f0:	e779      	b.n	800a8e6 <encode_field+0xc2>
                if (!func(stream, field, p))
 800a9f2:	4632      	mov	r2, r6
 800a9f4:	e7ef      	b.n	800a9d6 <encode_field+0x1b2>
    if (callback->funcs.encode != NULL)
 800a9f6:	6833      	ldr	r3, [r6, #0]
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	f43f af74 	beq.w	800a8e6 <encode_field+0xc2>
        if (!callback->funcs.encode(stream, field, arg))
 800a9fe:	1d32      	adds	r2, r6, #4
 800aa00:	4798      	blx	r3
 800aa02:	2800      	cmp	r0, #0
 800aa04:	f47f af6f 	bne.w	800a8e6 <encode_field+0xc2>
            PB_RETURN_ERROR(stream, "callback error");
 800aa08:	692b      	ldr	r3, [r5, #16]
 800aa0a:	4a07      	ldr	r2, [pc, #28]	; (800aa28 <encode_field+0x204>)
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	bf08      	it	eq
 800aa10:	4613      	moveq	r3, r2
 800aa12:	612b      	str	r3, [r5, #16]
 800aa14:	e768      	b.n	800a8e8 <encode_field+0xc4>
 800aa16:	bf00      	nop
 800aa18:	08016430 	.word	0x08016430
 800aa1c:	08016336 	.word	0x08016336
 800aa20:	0801637a 	.word	0x0801637a
 800aa24:	080163e0 	.word	0x080163e0
 800aa28:	080163f8 	.word	0x080163f8

0800aa2c <pb_encode>:
{
 800aa2c:	b530      	push	{r4, r5, lr}
 800aa2e:	b087      	sub	sp, #28
 800aa30:	4605      	mov	r5, r0
    if (!pb_field_iter_begin(&iter, fields, pb_const_cast(src_struct)))
 800aa32:	4668      	mov	r0, sp
 800aa34:	f7fe ff6a 	bl	800990c <pb_field_iter_begin>
 800aa38:	b910      	cbnz	r0, 800aa40 <pb_encode+0x14>
        return true; /* Empty message type */
 800aa3a:	2001      	movs	r0, #1
}
 800aa3c:	b007      	add	sp, #28
 800aa3e:	bd30      	pop	{r4, r5, pc}
        if (PB_LTYPE(iter.pos->type) == PB_LTYPE_EXTENSION)
 800aa40:	9901      	ldr	r1, [sp, #4]
            if (!encode_extension_field(stream, iter.pos, iter.pData))
 800aa42:	9a04      	ldr	r2, [sp, #16]
        if (PB_LTYPE(iter.pos->type) == PB_LTYPE_EXTENSION)
 800aa44:	788b      	ldrb	r3, [r1, #2]
 800aa46:	f003 030f 	and.w	r3, r3, #15
 800aa4a:	2b08      	cmp	r3, #8
 800aa4c:	d11c      	bne.n	800aa88 <pb_encode+0x5c>
    const pb_extension_t *extension = *(const pb_extension_t* const *)pData;
 800aa4e:	6814      	ldr	r4, [r2, #0]
    while (extension)
 800aa50:	b91c      	cbnz	r4, 800aa5a <pb_encode+0x2e>
    } while (pb_field_iter_next(&iter));
 800aa52:	4668      	mov	r0, sp
 800aa54:	f7fe ff6c 	bl	8009930 <pb_field_iter_next>
 800aa58:	e7ee      	b.n	800aa38 <pb_encode+0xc>
        if (extension->type->encode)
 800aa5a:	6823      	ldr	r3, [r4, #0]
 800aa5c:	685a      	ldr	r2, [r3, #4]
 800aa5e:	b12a      	cbz	r2, 800aa6c <pb_encode+0x40>
            status = extension->type->encode(stream, extension);
 800aa60:	4621      	mov	r1, r4
 800aa62:	4628      	mov	r0, r5
 800aa64:	4790      	blx	r2
        if (!status)
 800aa66:	b968      	cbnz	r0, 800aa84 <pb_encode+0x58>
                return false;
 800aa68:	2000      	movs	r0, #0
 800aa6a:	e7e7      	b.n	800aa3c <pb_encode+0x10>
    const pb_field_t *field = (const pb_field_t*)extension->type->arg;
 800aa6c:	6899      	ldr	r1, [r3, #8]
        return encode_field(stream, field, extension->dest);
 800aa6e:	4628      	mov	r0, r5
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 800aa70:	788b      	ldrb	r3, [r1, #2]
 800aa72:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800aa76:	2b80      	cmp	r3, #128	; 0x80
        return encode_field(stream, field, &extension->dest);
 800aa78:	bf0c      	ite	eq
 800aa7a:	1d22      	addeq	r2, r4, #4
        return encode_field(stream, field, extension->dest);
 800aa7c:	6862      	ldrne	r2, [r4, #4]
 800aa7e:	f7ff fed1 	bl	800a824 <encode_field>
 800aa82:	e7f0      	b.n	800aa66 <pb_encode+0x3a>
        extension = extension->next;
 800aa84:	68a4      	ldr	r4, [r4, #8]
 800aa86:	e7e3      	b.n	800aa50 <pb_encode+0x24>
            if (!encode_field(stream, iter.pos, iter.pData))
 800aa88:	4628      	mov	r0, r5
 800aa8a:	f7ff fecb 	bl	800a824 <encode_field>
 800aa8e:	2800      	cmp	r0, #0
 800aa90:	d1df      	bne.n	800aa52 <pb_encode+0x26>
 800aa92:	e7e9      	b.n	800aa68 <pb_encode+0x3c>

0800aa94 <pb_encode_string>:
{
 800aa94:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
 800aa96:	2300      	movs	r3, #0
{
 800aa98:	4604      	mov	r4, r0
 800aa9a:	4615      	mov	r5, r2
 800aa9c:	9101      	str	r1, [sp, #4]
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
 800aa9e:	f7ff fdc1 	bl	800a624 <pb_encode_varint>
 800aaa2:	b138      	cbz	r0, 800aab4 <pb_encode_string+0x20>
    return pb_write(stream, buffer, size);
 800aaa4:	462a      	mov	r2, r5
 800aaa6:	9901      	ldr	r1, [sp, #4]
 800aaa8:	4620      	mov	r0, r4
}
 800aaaa:	b003      	add	sp, #12
 800aaac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return pb_write(stream, buffer, size);
 800aab0:	f7ff bd94 	b.w	800a5dc <pb_write>
}
 800aab4:	b003      	add	sp, #12
 800aab6:	bd30      	pop	{r4, r5, pc}

0800aab8 <pb_enc_fixed_length_bytes>:
    
    return pb_encode_submessage(stream, (const pb_field_t*)field->ptr, src);
}

static bool checkreturn pb_enc_fixed_length_bytes(pb_ostream_t *stream, const pb_field_t *field, const void *src)
{
 800aab8:	4613      	mov	r3, r2
    return pb_encode_string(stream, (const pb_byte_t*)src, field->data_size);
 800aaba:	f8b1 2007 	ldrh.w	r2, [r1, #7]
 800aabe:	4619      	mov	r1, r3
 800aac0:	f7ff bfe8 	b.w	800aa94 <pb_encode_string>

0800aac4 <pb_enc_string>:
{
 800aac4:	b410      	push	{r4}
    size_t max_size = field->data_size;
 800aac6:	f8b1 3007 	ldrh.w	r3, [r1, #7]
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 800aaca:	7889      	ldrb	r1, [r1, #2]
 800aacc:	f001 01c0 	and.w	r1, r1, #192	; 0xc0
    size_t max_size = field->data_size;
 800aad0:	2980      	cmp	r1, #128	; 0x80
    if (src == NULL)
 800aad2:	4611      	mov	r1, r2
    size_t max_size = field->data_size;
 800aad4:	bf08      	it	eq
 800aad6:	f04f 33ff 	moveq.w	r3, #4294967295
    if (src == NULL)
 800aada:	b122      	cbz	r2, 800aae6 <pb_enc_string+0x22>
    size_t size = 0;
 800aadc:	2200      	movs	r2, #0
        while (size < max_size && *p != '\0')
 800aade:	429a      	cmp	r2, r3
 800aae0:	d001      	beq.n	800aae6 <pb_enc_string+0x22>
 800aae2:	5c8c      	ldrb	r4, [r1, r2]
 800aae4:	b91c      	cbnz	r4, 800aaee <pb_enc_string+0x2a>
}
 800aae6:	f85d 4b04 	ldr.w	r4, [sp], #4
    return pb_encode_string(stream, (const pb_byte_t*)src, size);
 800aaea:	f7ff bfd3 	b.w	800aa94 <pb_encode_string>
            size++;
 800aaee:	3201      	adds	r2, #1
            p++;
 800aaf0:	e7f5      	b.n	800aade <pb_enc_string+0x1a>
	...

0800aaf4 <pb_enc_bytes>:
{
 800aaf4:	b470      	push	{r4, r5, r6}
 800aaf6:	4603      	mov	r3, r0
 800aaf8:	460c      	mov	r4, r1
    if (src == NULL)
 800aafa:	4611      	mov	r1, r2
 800aafc:	b912      	cbnz	r2, 800ab04 <pb_enc_bytes+0x10>
}
 800aafe:	bc70      	pop	{r4, r5, r6}
    return pb_encode_string(stream, bytes->bytes, bytes->size);
 800ab00:	f7ff bfc8 	b.w	800aa94 <pb_encode_string>
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 800ab04:	78a0      	ldrb	r0, [r4, #2]
        PB_BYTES_ARRAY_T_ALLOCSIZE(bytes->size) > field->data_size)
 800ab06:	8812      	ldrh	r2, [r2, #0]
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 800ab08:	f010 00c0 	ands.w	r0, r0, #192	; 0xc0
 800ab0c:	d104      	bne.n	800ab18 <pb_enc_bytes+0x24>
        PB_BYTES_ARRAY_T_ALLOCSIZE(bytes->size) > field->data_size)
 800ab0e:	1c95      	adds	r5, r2, #2
 800ab10:	f8b4 6007 	ldrh.w	r6, [r4, #7]
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 800ab14:	42b5      	cmp	r5, r6
 800ab16:	d802      	bhi.n	800ab1e <pb_enc_bytes+0x2a>
    return pb_encode_string(stream, bytes->bytes, bytes->size);
 800ab18:	3102      	adds	r1, #2
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	e7ef      	b.n	800aafe <pb_enc_bytes+0xa>
        PB_RETURN_ERROR(stream, "bytes size exceeded");
 800ab1e:	691a      	ldr	r2, [r3, #16]
 800ab20:	4903      	ldr	r1, [pc, #12]	; (800ab30 <pb_enc_bytes+0x3c>)
 800ab22:	2a00      	cmp	r2, #0
 800ab24:	bf08      	it	eq
 800ab26:	460a      	moveq	r2, r1
}
 800ab28:	bc70      	pop	{r4, r5, r6}
        PB_RETURN_ERROR(stream, "bytes size exceeded");
 800ab2a:	611a      	str	r2, [r3, #16]
}
 800ab2c:	4770      	bx	lr
 800ab2e:	bf00      	nop
 800ab30:	08016407 	.word	0x08016407

0800ab34 <pb_encode_submessage>:
{
 800ab34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab38:	b086      	sub	sp, #24
 800ab3a:	460f      	mov	r7, r1
 800ab3c:	4690      	mov	r8, r2
    pb_ostream_t substream = PB_OSTREAM_SIZING;
 800ab3e:	2100      	movs	r1, #0
 800ab40:	2214      	movs	r2, #20
{
 800ab42:	4604      	mov	r4, r0
    pb_ostream_t substream = PB_OSTREAM_SIZING;
 800ab44:	a801      	add	r0, sp, #4
 800ab46:	f007 fb41 	bl	80121cc <memset>
    if (!pb_encode(&substream, fields, src_struct))
 800ab4a:	4642      	mov	r2, r8
 800ab4c:	4639      	mov	r1, r7
 800ab4e:	a801      	add	r0, sp, #4
 800ab50:	f7ff ff6c 	bl	800aa2c <pb_encode>
 800ab54:	b910      	cbnz	r0, 800ab5c <pb_encode_submessage+0x28>
        stream->errmsg = substream.errmsg;
 800ab56:	9b05      	ldr	r3, [sp, #20]
    stream->errmsg = substream.errmsg;
 800ab58:	6123      	str	r3, [r4, #16]
 800ab5a:	e00d      	b.n	800ab78 <pb_encode_submessage+0x44>
    size = substream.bytes_written;
 800ab5c:	9e04      	ldr	r6, [sp, #16]
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
 800ab5e:	2500      	movs	r5, #0
 800ab60:	4620      	mov	r0, r4
 800ab62:	4632      	mov	r2, r6
 800ab64:	462b      	mov	r3, r5
 800ab66:	f7ff fd5d 	bl	800a624 <pb_encode_varint>
 800ab6a:	b128      	cbz	r0, 800ab78 <pb_encode_submessage+0x44>
    if (stream->callback == NULL)
 800ab6c:	6821      	ldr	r1, [r4, #0]
 800ab6e:	b931      	cbnz	r1, 800ab7e <pb_encode_submessage+0x4a>
        return pb_write(stream, NULL, size); /* Just sizing */
 800ab70:	4632      	mov	r2, r6
 800ab72:	4620      	mov	r0, r4
 800ab74:	f7ff fd32 	bl	800a5dc <pb_write>
}
 800ab78:	b006      	add	sp, #24
 800ab7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (stream->bytes_written + size > stream->max_size)
 800ab7e:	68e3      	ldr	r3, [r4, #12]
 800ab80:	68a2      	ldr	r2, [r4, #8]
 800ab82:	4433      	add	r3, r6
 800ab84:	4293      	cmp	r3, r2
 800ab86:	d907      	bls.n	800ab98 <pb_encode_submessage+0x64>
        PB_RETURN_ERROR(stream, "stream full");
 800ab88:	6923      	ldr	r3, [r4, #16]
 800ab8a:	4a0e      	ldr	r2, [pc, #56]	; (800abc4 <pb_encode_submessage+0x90>)
        PB_RETURN_ERROR(stream, "submsg size changed");
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	bf08      	it	eq
 800ab90:	4613      	moveq	r3, r2
 800ab92:	4628      	mov	r0, r5
 800ab94:	6123      	str	r3, [r4, #16]
 800ab96:	e7ef      	b.n	800ab78 <pb_encode_submessage+0x44>
    substream.state = stream->state;
 800ab98:	6863      	ldr	r3, [r4, #4]
    status = pb_encode(&substream, fields, src_struct);
 800ab9a:	4642      	mov	r2, r8
    substream.callback = stream->callback;
 800ab9c:	9101      	str	r1, [sp, #4]
    status = pb_encode(&substream, fields, src_struct);
 800ab9e:	a801      	add	r0, sp, #4
 800aba0:	4639      	mov	r1, r7
    substream.max_size = size;
 800aba2:	e9cd 3602 	strd	r3, r6, [sp, #8]
    substream.errmsg = NULL;
 800aba6:	e9cd 5504 	strd	r5, r5, [sp, #16]
    status = pb_encode(&substream, fields, src_struct);
 800abaa:	f7ff ff3f 	bl	800aa2c <pb_encode>
    stream->bytes_written += substream.bytes_written;
 800abae:	9a04      	ldr	r2, [sp, #16]
 800abb0:	68e3      	ldr	r3, [r4, #12]
    if (substream.bytes_written != size)
 800abb2:	42b2      	cmp	r2, r6
    stream->bytes_written += substream.bytes_written;
 800abb4:	4413      	add	r3, r2
 800abb6:	60e3      	str	r3, [r4, #12]
    stream->state = substream.state;
 800abb8:	9b02      	ldr	r3, [sp, #8]
 800abba:	6063      	str	r3, [r4, #4]
    stream->errmsg = substream.errmsg;
 800abbc:	9b05      	ldr	r3, [sp, #20]
    if (substream.bytes_written != size)
 800abbe:	d0cb      	beq.n	800ab58 <pb_encode_submessage+0x24>
        PB_RETURN_ERROR(stream, "submsg size changed");
 800abc0:	4a01      	ldr	r2, [pc, #4]	; (800abc8 <pb_encode_submessage+0x94>)
 800abc2:	e7e3      	b.n	800ab8c <pb_encode_submessage+0x58>
 800abc4:	080163d4 	.word	0x080163d4
 800abc8:	0801641b 	.word	0x0801641b

0800abcc <pb_enc_submessage>:
    if (field->ptr == NULL)
 800abcc:	f8d1 100b 	ldr.w	r1, [r1, #11]
{
 800abd0:	4603      	mov	r3, r0
    if (field->ptr == NULL)
 800abd2:	b109      	cbz	r1, 800abd8 <pb_enc_submessage+0xc>
    return pb_encode_submessage(stream, (const pb_field_t*)field->ptr, src);
 800abd4:	f7ff bfae 	b.w	800ab34 <pb_encode_submessage>
        PB_RETURN_ERROR(stream, "invalid field descriptor");
 800abd8:	6902      	ldr	r2, [r0, #16]
 800abda:	4803      	ldr	r0, [pc, #12]	; (800abe8 <pb_enc_submessage+0x1c>)
 800abdc:	2a00      	cmp	r2, #0
 800abde:	bf08      	it	eq
 800abe0:	4602      	moveq	r2, r0
}
 800abe2:	4608      	mov	r0, r1
        PB_RETURN_ERROR(stream, "invalid field descriptor");
 800abe4:	611a      	str	r2, [r3, #16]
}
 800abe6:	4770      	bx	lr
 800abe8:	08016391 	.word	0x08016391

0800abec <ai_version_get>:
 800abec:	0212      	lsls	r2, r2, #8
 800abee:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800abf2:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 800abf6:	4770      	bx	lr

0800abf8 <ai_platform_version_get>:
 800abf8:	0e01      	lsrs	r1, r0, #24
 800abfa:	2300      	movs	r3, #0
 800abfc:	f3c0 4207 	ubfx	r2, r0, #16, #8
 800ac00:	f3c0 2007 	ubfx	r0, r0, #8, #8
 800ac04:	f361 0307 	bfi	r3, r1, #0, #8
 800ac08:	b082      	sub	sp, #8
 800ac0a:	f362 230f 	bfi	r3, r2, #8, #8
 800ac0e:	f360 4317 	bfi	r3, r0, #16, #8
 800ac12:	f023 407f 	bic.w	r0, r3, #4278190080	; 0xff000000
 800ac16:	b002      	add	sp, #8
 800ac18:	4770      	bx	lr
 800ac1a:	bf00      	nop

0800ac1c <get_tensor_size>:
 800ac1c:	b111      	cbz	r1, 800ac24 <get_tensor_size+0x8>
 800ac1e:	6983      	ldr	r3, [r0, #24]
 800ac20:	6858      	ldr	r0, [r3, #4]
 800ac22:	4770      	bx	lr
 800ac24:	6883      	ldr	r3, [r0, #8]
 800ac26:	0a1b      	lsrs	r3, r3, #8
 800ac28:	d00a      	beq.n	800ac40 <get_tensor_size+0x24>
 800ac2a:	68c1      	ldr	r1, [r0, #12]
 800ac2c:	2001      	movs	r0, #1
 800ac2e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800ac32:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800ac36:	4299      	cmp	r1, r3
 800ac38:	fb02 f000 	mul.w	r0, r2, r0
 800ac3c:	d1f9      	bne.n	800ac32 <get_tensor_size+0x16>
 800ac3e:	4770      	bx	lr
 800ac40:	2001      	movs	r0, #1
 800ac42:	4770      	bx	lr

0800ac44 <get_tensor_byte_size>:
 800ac44:	b430      	push	{r4, r5}
 800ac46:	6985      	ldr	r5, [r0, #24]
 800ac48:	68c4      	ldr	r4, [r0, #12]
 800ac4a:	6941      	ldr	r1, [r0, #20]
 800ac4c:	4b06      	ldr	r3, [pc, #24]	; (800ac68 <get_tensor_byte_size+0x24>)
 800ac4e:	6828      	ldr	r0, [r5, #0]
 800ac50:	4a06      	ldr	r2, [pc, #24]	; (800ac6c <get_tensor_byte_size+0x28>)
 800ac52:	4003      	ands	r3, r0
 800ac54:	68c9      	ldr	r1, [r1, #12]
 800ac56:	68e0      	ldr	r0, [r4, #12]
 800ac58:	4293      	cmp	r3, r2
 800ac5a:	fb01 f000 	mul.w	r0, r1, r0
 800ac5e:	d101      	bne.n	800ac64 <get_tensor_byte_size+0x20>
 800ac60:	3007      	adds	r0, #7
 800ac62:	08c0      	lsrs	r0, r0, #3
 800ac64:	bc30      	pop	{r4, r5}
 800ac66:	4770      	bx	lr
 800ac68:	017fffff 	.word	0x017fffff
 800ac6c:	000400c0 	.word	0x000400c0

0800ac70 <ai_array_to_buffer_fmt>:
 800ac70:	f3c0 4343 	ubfx	r3, r0, #17, #4
 800ac74:	2b02      	cmp	r3, #2
 800ac76:	d050      	beq.n	800ad1a <ai_array_to_buffer_fmt+0xaa>
 800ac78:	f020 427e 	bic.w	r2, r0, #4261412864	; 0xfe000000
 800ac7c:	4b29      	ldr	r3, [pc, #164]	; (800ad24 <ai_array_to_buffer_fmt+0xb4>)
 800ac7e:	429a      	cmp	r2, r3
 800ac80:	d00b      	beq.n	800ac9a <ai_array_to_buffer_fmt+0x2a>
 800ac82:	dc1c      	bgt.n	800acbe <ai_array_to_buffer_fmt+0x4e>
 800ac84:	4b28      	ldr	r3, [pc, #160]	; (800ad28 <ai_array_to_buffer_fmt+0xb8>)
 800ac86:	429a      	cmp	r2, r3
 800ac88:	d007      	beq.n	800ac9a <ai_array_to_buffer_fmt+0x2a>
 800ac8a:	dd0b      	ble.n	800aca4 <ai_array_to_buffer_fmt+0x34>
 800ac8c:	4b27      	ldr	r3, [pc, #156]	; (800ad2c <ai_array_to_buffer_fmt+0xbc>)
 800ac8e:	429a      	cmp	r2, r3
 800ac90:	d003      	beq.n	800ac9a <ai_array_to_buffer_fmt+0x2a>
 800ac92:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 800ac96:	429a      	cmp	r2, r3
 800ac98:	d131      	bne.n	800acfe <ai_array_to_buffer_fmt+0x8e>
 800ac9a:	4613      	mov	r3, r2
 800ac9c:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800aca0:	4318      	orrs	r0, r3
 800aca2:	4770      	bx	lr
 800aca4:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800aca8:	429a      	cmp	r2, r3
 800acaa:	d0f6      	beq.n	800ac9a <ai_array_to_buffer_fmt+0x2a>
 800acac:	dd2c      	ble.n	800ad08 <ai_array_to_buffer_fmt+0x98>
 800acae:	4b20      	ldr	r3, [pc, #128]	; (800ad30 <ai_array_to_buffer_fmt+0xc0>)
 800acb0:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800acb4:	429a      	cmp	r2, r3
 800acb6:	bf18      	it	ne
 800acb8:	2340      	movne	r3, #64	; 0x40
 800acba:	4318      	orrs	r0, r3
 800acbc:	4770      	bx	lr
 800acbe:	4b1d      	ldr	r3, [pc, #116]	; (800ad34 <ai_array_to_buffer_fmt+0xc4>)
 800acc0:	429a      	cmp	r2, r3
 800acc2:	d0ea      	beq.n	800ac9a <ai_array_to_buffer_fmt+0x2a>
 800acc4:	dd0e      	ble.n	800ace4 <ai_array_to_buffer_fmt+0x74>
 800acc6:	4b1c      	ldr	r3, [pc, #112]	; (800ad38 <ai_array_to_buffer_fmt+0xc8>)
 800acc8:	429a      	cmp	r2, r3
 800acca:	d0e6      	beq.n	800ac9a <ai_array_to_buffer_fmt+0x2a>
 800accc:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 800acd0:	429a      	cmp	r2, r3
 800acd2:	d0e2      	beq.n	800ac9a <ai_array_to_buffer_fmt+0x2a>
 800acd4:	4b19      	ldr	r3, [pc, #100]	; (800ad3c <ai_array_to_buffer_fmt+0xcc>)
 800acd6:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800acda:	429a      	cmp	r2, r3
 800acdc:	bf18      	it	ne
 800acde:	2340      	movne	r3, #64	; 0x40
 800ace0:	4318      	orrs	r0, r3
 800ace2:	4770      	bx	lr
 800ace4:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800ace8:	429a      	cmp	r2, r3
 800acea:	d0d6      	beq.n	800ac9a <ai_array_to_buffer_fmt+0x2a>
 800acec:	3307      	adds	r3, #7
 800acee:	429a      	cmp	r2, r3
 800acf0:	d0d3      	beq.n	800ac9a <ai_array_to_buffer_fmt+0x2a>
 800acf2:	f2a3 3387 	subw	r3, r3, #903	; 0x387
 800acf6:	429a      	cmp	r2, r3
 800acf8:	bf18      	it	ne
 800acfa:	2340      	movne	r3, #64	; 0x40
 800acfc:	e7ce      	b.n	800ac9c <ai_array_to_buffer_fmt+0x2c>
 800acfe:	4b10      	ldr	r3, [pc, #64]	; (800ad40 <ai_array_to_buffer_fmt+0xd0>)
 800ad00:	429a      	cmp	r2, r3
 800ad02:	bf18      	it	ne
 800ad04:	2340      	movne	r3, #64	; 0x40
 800ad06:	e7c9      	b.n	800ac9c <ai_array_to_buffer_fmt+0x2c>
 800ad08:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800ad0c:	429a      	cmp	r2, r3
 800ad0e:	d0c4      	beq.n	800ac9a <ai_array_to_buffer_fmt+0x2a>
 800ad10:	3380      	adds	r3, #128	; 0x80
 800ad12:	429a      	cmp	r2, r3
 800ad14:	bf18      	it	ne
 800ad16:	2340      	movne	r3, #64	; 0x40
 800ad18:	e7c0      	b.n	800ac9c <ai_array_to_buffer_fmt+0x2c>
 800ad1a:	4b0a      	ldr	r3, [pc, #40]	; (800ad44 <ai_array_to_buffer_fmt+0xd4>)
 800ad1c:	4003      	ands	r3, r0
 800ad1e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ad22:	e7bb      	b.n	800ac9c <ai_array_to_buffer_fmt+0x2c>
 800ad24:	00840040 	.word	0x00840040
 800ad28:	00040840 	.word	0x00040840
 800ad2c:	00041040 	.word	0x00041040
 800ad30:	00040447 	.word	0x00040447
 800ad34:	00840840 	.word	0x00840840
 800ad38:	00841040 	.word	0x00841040
 800ad3c:	0084084f 	.word	0x0084084f
 800ad40:	0004084f 	.word	0x0004084f
 800ad44:	00803fff 	.word	0x00803fff

0800ad48 <ai_array_get_byte_size>:
 800ad48:	b319      	cbz	r1, 800ad92 <ai_array_get_byte_size+0x4a>
 800ad4a:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800ad4e:	f3c0 4243 	ubfx	r2, r0, #17, #4
 800ad52:	f3c0 5c41 	ubfx	ip, r0, #21, #2
 800ad56:	11c0      	asrs	r0, r0, #7
 800ad58:	fb03 f101 	mul.w	r1, r3, r1
 800ad5c:	2a04      	cmp	r2, #4
 800ad5e:	f101 0107 	add.w	r1, r1, #7
 800ad62:	f021 0107 	bic.w	r1, r1, #7
 800ad66:	fa21 f10c 	lsr.w	r1, r1, ip
 800ad6a:	d00b      	beq.n	800ad84 <ai_array_get_byte_size+0x3c>
 800ad6c:	2a08      	cmp	r2, #8
 800ad6e:	d002      	beq.n	800ad76 <ai_array_get_byte_size+0x2e>
 800ad70:	3107      	adds	r1, #7
 800ad72:	08c8      	lsrs	r0, r1, #3
 800ad74:	4770      	bx	lr
 800ad76:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800ad7a:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 800ad7e:	3107      	adds	r1, #7
 800ad80:	08c8      	lsrs	r0, r1, #3
 800ad82:	4770      	bx	lr
 800ad84:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800ad88:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 800ad8c:	3107      	adds	r1, #7
 800ad8e:	08c8      	lsrs	r0, r1, #3
 800ad90:	4770      	bx	lr
 800ad92:	4608      	mov	r0, r1
 800ad94:	4770      	bx	lr
 800ad96:	bf00      	nop

0800ad98 <ai_array_get_data_byte_size>:
 800ad98:	b161      	cbz	r1, 800adb4 <ai_array_get_data_byte_size+0x1c>
 800ad9a:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800ad9e:	f3c0 5241 	ubfx	r2, r0, #21, #2
 800ada2:	fb03 f101 	mul.w	r1, r3, r1
 800ada6:	1dc8      	adds	r0, r1, #7
 800ada8:	f020 0007 	bic.w	r0, r0, #7
 800adac:	40d0      	lsrs	r0, r2
 800adae:	3007      	adds	r0, #7
 800adb0:	08c0      	lsrs	r0, r0, #3
 800adb2:	4770      	bx	lr
 800adb4:	4608      	mov	r0, r1
 800adb6:	4770      	bx	lr

0800adb8 <ai_buffer_get_size>:
 800adb8:	b368      	cbz	r0, 800ae16 <ai_buffer_get_size+0x5e>
 800adba:	4b17      	ldr	r3, [pc, #92]	; (800ae18 <ai_buffer_get_size+0x60>)
 800adbc:	4a17      	ldr	r2, [pc, #92]	; (800ae1c <ai_buffer_get_size+0x64>)
 800adbe:	b410      	push	{r4}
 800adc0:	6804      	ldr	r4, [r0, #0]
 800adc2:	4023      	ands	r3, r4
 800adc4:	4293      	cmp	r3, r2
 800adc6:	d123      	bne.n	800ae10 <ai_buffer_get_size+0x58>
 800adc8:	b311      	cbz	r1, 800ae10 <ai_buffer_get_size+0x58>
 800adca:	6984      	ldr	r4, [r0, #24]
 800adcc:	6862      	ldr	r2, [r4, #4]
 800adce:	321f      	adds	r2, #31
 800add0:	f022 021f 	bic.w	r2, r2, #31
 800add4:	7d03      	ldrb	r3, [r0, #20]
 800add6:	6941      	ldr	r1, [r0, #20]
 800add8:	f1a3 0301 	sub.w	r3, r3, #1
 800addc:	f3c1 2017 	ubfx	r0, r1, #8, #24
 800ade0:	fab3 f383 	clz	r3, r3
 800ade4:	095b      	lsrs	r3, r3, #5
 800ade6:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 800adea:	da0c      	bge.n	800ae06 <ai_buffer_get_size+0x4e>
 800adec:	2b01      	cmp	r3, #1
 800adee:	d103      	bne.n	800adf8 <ai_buffer_get_size+0x40>
 800adf0:	2802      	cmp	r0, #2
 800adf2:	f04f 0302 	mov.w	r3, #2
 800adf6:	d006      	beq.n	800ae06 <ai_buffer_get_size+0x4e>
 800adf8:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 800adfc:	3301      	adds	r3, #1
 800adfe:	4298      	cmp	r0, r3
 800ae00:	fb01 f202 	mul.w	r2, r1, r2
 800ae04:	d1f2      	bne.n	800adec <ai_buffer_get_size+0x34>
 800ae06:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 800ae0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ae0e:	4770      	bx	lr
 800ae10:	6984      	ldr	r4, [r0, #24]
 800ae12:	6862      	ldr	r2, [r4, #4]
 800ae14:	e7de      	b.n	800add4 <ai_buffer_get_size+0x1c>
 800ae16:	4770      	bx	lr
 800ae18:	017fffff 	.word	0x017fffff
 800ae1c:	000400c0 	.word	0x000400c0

0800ae20 <ai_buffer_get_byte_size>:
 800ae20:	b128      	cbz	r0, 800ae2e <ai_buffer_get_byte_size+0xe>
 800ae22:	f3c1 11c6 	ubfx	r1, r1, #7, #7
 800ae26:	fb01 f000 	mul.w	r0, r1, r0
 800ae2a:	3007      	adds	r0, #7
 800ae2c:	08c0      	lsrs	r0, r0, #3
 800ae2e:	4770      	bx	lr

0800ae30 <ai_buffer_array_sane>:
 800ae30:	b138      	cbz	r0, 800ae42 <ai_buffer_array_sane+0x12>
 800ae32:	6843      	ldr	r3, [r0, #4]
 800ae34:	b123      	cbz	r3, 800ae40 <ai_buffer_array_sane+0x10>
 800ae36:	8840      	ldrh	r0, [r0, #2]
 800ae38:	3800      	subs	r0, #0
 800ae3a:	bf18      	it	ne
 800ae3c:	2001      	movne	r0, #1
 800ae3e:	4770      	bx	lr
 800ae40:	4618      	mov	r0, r3
 800ae42:	4770      	bx	lr

0800ae44 <ai_buffer_array_item_set_address>:
 800ae44:	b150      	cbz	r0, 800ae5c <ai_buffer_array_item_set_address+0x18>
 800ae46:	6843      	ldr	r3, [r0, #4]
 800ae48:	b14b      	cbz	r3, 800ae5e <ai_buffer_array_item_set_address+0x1a>
 800ae4a:	8840      	ldrh	r0, [r0, #2]
 800ae4c:	b900      	cbnz	r0, 800ae50 <ai_buffer_array_item_set_address+0xc>
 800ae4e:	4770      	bx	lr
 800ae50:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800ae54:	2001      	movs	r0, #1
 800ae56:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800ae5a:	604a      	str	r2, [r1, #4]
 800ae5c:	4770      	bx	lr
 800ae5e:	4618      	mov	r0, r3
 800ae60:	4770      	bx	lr
 800ae62:	bf00      	nop

0800ae64 <_platform_observer_node_exec_cb>:
 800ae64:	2a00      	cmp	r2, #0
 800ae66:	d06c      	beq.n	800af42 <_platform_observer_node_exec_cb+0xde>
 800ae68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ae6c:	6815      	ldr	r5, [r2, #0]
 800ae6e:	b085      	sub	sp, #20
 800ae70:	4614      	mov	r4, r2
 800ae72:	2d00      	cmp	r5, #0
 800ae74:	d067      	beq.n	800af46 <_platform_observer_node_exec_cb+0xe2>
 800ae76:	8993      	ldrh	r3, [r2, #12]
 800ae78:	f240 2c02 	movw	ip, #514	; 0x202
 800ae7c:	89d2      	ldrh	r2, [r2, #14]
 800ae7e:	460e      	mov	r6, r1
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	f240 3102 	movw	r1, #770	; 0x302
 800ae86:	f102 32ff 	add.w	r2, r2, #4294967295
 800ae8a:	f240 3e01 	movw	lr, #769	; 0x301
 800ae8e:	bf18      	it	ne
 800ae90:	4667      	movne	r7, ip
 800ae92:	f240 2c01 	movw	ip, #513	; 0x201
 800ae96:	bf0d      	iteet	eq
 800ae98:	460f      	moveq	r7, r1
 800ae9a:	f44f 7901 	movne.w	r9, #516	; 0x204
 800ae9e:	46e6      	movne	lr, ip
 800aea0:	f44f 7941 	moveq.w	r9, #772	; 0x304
 800aea4:	f240 1c01 	movw	ip, #257	; 0x101
 800aea8:	bf1b      	ittet	ne
 800aeaa:	f04f 0804 	movne.w	r8, #4
 800aeae:	f04f 0c01 	movne.w	ip, #1
 800aeb2:	f44f 7882 	moveq.w	r8, #260	; 0x104
 800aeb6:	2102      	movne	r1, #2
 800aeb8:	bf08      	it	eq
 800aeba:	f44f 7181 	moveq.w	r1, #258	; 0x102
 800aebe:	429a      	cmp	r2, r3
 800aec0:	d013      	beq.n	800aeea <_platform_observer_node_exec_cb+0x86>
 800aec2:	b148      	cbz	r0, 800aed8 <_platform_observer_node_exec_cb+0x74>
 800aec4:	2801      	cmp	r0, #1
 800aec6:	d042      	beq.n	800af4e <_platform_observer_node_exec_cb+0xea>
 800aec8:	2802      	cmp	r0, #2
 800aeca:	d025      	beq.n	800af18 <_platform_observer_node_exec_cb+0xb4>
 800aecc:	2803      	cmp	r0, #3
 800aece:	d045      	beq.n	800af5c <_platform_observer_node_exec_cb+0xf8>
 800aed0:	2000      	movs	r0, #0
 800aed2:	b005      	add	sp, #20
 800aed4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aed8:	68a2      	ldr	r2, [r4, #8]
 800aeda:	07d7      	lsls	r7, r2, #31
 800aedc:	d40b      	bmi.n	800aef6 <_platform_observer_node_exec_cb+0x92>
 800aede:	3301      	adds	r3, #1
 800aee0:	2000      	movs	r0, #0
 800aee2:	81a3      	strh	r3, [r4, #12]
 800aee4:	b005      	add	sp, #20
 800aee6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aeea:	46c8      	mov	r8, r9
 800aeec:	4639      	mov	r1, r7
 800aeee:	46f4      	mov	ip, lr
 800aef0:	2800      	cmp	r0, #0
 800aef2:	d1e7      	bne.n	800aec4 <_platform_observer_node_exec_cb+0x60>
 800aef4:	e7f0      	b.n	800aed8 <_platform_observer_node_exec_cb+0x74>
 800aef6:	f8ad 3000 	strh.w	r3, [sp]
 800aefa:	466a      	mov	r2, sp
 800aefc:	8873      	ldrh	r3, [r6, #2]
 800aefe:	4661      	mov	r1, ip
 800af00:	9002      	str	r0, [sp, #8]
 800af02:	f8ad 3004 	strh.w	r3, [sp, #4]
 800af06:	8833      	ldrh	r3, [r6, #0]
 800af08:	6860      	ldr	r0, [r4, #4]
 800af0a:	f8ad 3002 	strh.w	r3, [sp, #2]
 800af0e:	69b3      	ldr	r3, [r6, #24]
 800af10:	9303      	str	r3, [sp, #12]
 800af12:	47a8      	blx	r5
 800af14:	89a3      	ldrh	r3, [r4, #12]
 800af16:	e7e2      	b.n	800aede <_platform_observer_node_exec_cb+0x7a>
 800af18:	68a2      	ldr	r2, [r4, #8]
 800af1a:	6126      	str	r6, [r4, #16]
 800af1c:	0790      	lsls	r0, r2, #30
 800af1e:	d5d7      	bpl.n	800aed0 <_platform_observer_node_exec_cb+0x6c>
 800af20:	f8ad 3000 	strh.w	r3, [sp]
 800af24:	8873      	ldrh	r3, [r6, #2]
 800af26:	8832      	ldrh	r2, [r6, #0]
 800af28:	6860      	ldr	r0, [r4, #4]
 800af2a:	2400      	movs	r4, #0
 800af2c:	f8ad 3004 	strh.w	r3, [sp, #4]
 800af30:	69b3      	ldr	r3, [r6, #24]
 800af32:	f8ad 2002 	strh.w	r2, [sp, #2]
 800af36:	466a      	mov	r2, sp
 800af38:	e9cd 4302 	strd	r4, r3, [sp, #8]
 800af3c:	47a8      	blx	r5
 800af3e:	4620      	mov	r0, r4
 800af40:	e7d0      	b.n	800aee4 <_platform_observer_node_exec_cb+0x80>
 800af42:	2001      	movs	r0, #1
 800af44:	4770      	bx	lr
 800af46:	2001      	movs	r0, #1
 800af48:	b005      	add	sp, #20
 800af4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800af4e:	2300      	movs	r3, #0
 800af50:	6126      	str	r6, [r4, #16]
 800af52:	4618      	mov	r0, r3
 800af54:	81a3      	strh	r3, [r4, #12]
 800af56:	b005      	add	sp, #20
 800af58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800af5c:	68a2      	ldr	r2, [r4, #8]
 800af5e:	0752      	lsls	r2, r2, #29
 800af60:	d5bd      	bpl.n	800aede <_platform_observer_node_exec_cb+0x7a>
 800af62:	6922      	ldr	r2, [r4, #16]
 800af64:	2000      	movs	r0, #0
 800af66:	f8ad 3000 	strh.w	r3, [sp]
 800af6a:	4641      	mov	r1, r8
 800af6c:	8853      	ldrh	r3, [r2, #2]
 800af6e:	f8ad 3004 	strh.w	r3, [sp, #4]
 800af72:	8813      	ldrh	r3, [r2, #0]
 800af74:	f8ad 3002 	strh.w	r3, [sp, #2]
 800af78:	6993      	ldr	r3, [r2, #24]
 800af7a:	466a      	mov	r2, sp
 800af7c:	9002      	str	r0, [sp, #8]
 800af7e:	9303      	str	r3, [sp, #12]
 800af80:	6860      	ldr	r0, [r4, #4]
 800af82:	47a8      	blx	r5
 800af84:	89a3      	ldrh	r3, [r4, #12]
 800af86:	e7aa      	b.n	800aede <_platform_observer_node_exec_cb+0x7a>

0800af88 <_ai_platform_acquire_crc>:
 800af88:	2001      	movs	r0, #1
 800af8a:	4770      	bx	lr

0800af8c <_ai_platform_release_crc>:
 800af8c:	4770      	bx	lr
 800af8e:	bf00      	nop

0800af90 <ai_platform_get_weights_map>:
 800af90:	2900      	cmp	r1, #0
 800af92:	bf18      	it	ne
 800af94:	2800      	cmpne	r0, #0
 800af96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af98:	bf0c      	ite	eq
 800af9a:	2401      	moveq	r4, #1
 800af9c:	2400      	movne	r4, #0
 800af9e:	2a00      	cmp	r2, #0
 800afa0:	bf08      	it	eq
 800afa2:	f044 0401 	orreq.w	r4, r4, #1
 800afa6:	b114      	cbz	r4, 800afae <ai_platform_get_weights_map+0x1e>
 800afa8:	2400      	movs	r4, #0
 800afaa:	4620      	mov	r0, r4
 800afac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800afae:	4616      	mov	r6, r2
 800afb0:	4b22      	ldr	r3, [pc, #136]	; (800b03c <ai_platform_get_weights_map+0xac>)
 800afb2:	6812      	ldr	r2, [r2, #0]
 800afb4:	4605      	mov	r5, r0
 800afb6:	460f      	mov	r7, r1
 800afb8:	429a      	cmp	r2, r3
 800afba:	d022      	beq.n	800b002 <ai_platform_get_weights_map+0x72>
 800afbc:	6870      	ldr	r0, [r6, #4]
 800afbe:	2800      	cmp	r0, #0
 800afc0:	d0f2      	beq.n	800afa8 <ai_platform_get_weights_map+0x18>
 800afc2:	6806      	ldr	r6, [r0, #0]
 800afc4:	429e      	cmp	r6, r3
 800afc6:	d006      	beq.n	800afd6 <ai_platform_get_weights_map+0x46>
 800afc8:	f1a1 0401 	sub.w	r4, r1, #1
 800afcc:	6028      	str	r0, [r5, #0]
 800afce:	fab4 f484 	clz	r4, r4
 800afd2:	0964      	lsrs	r4, r4, #5
 800afd4:	e7e9      	b.n	800afaa <ai_platform_get_weights_map+0x1a>
 800afd6:	3d04      	subs	r5, #4
 800afd8:	4602      	mov	r2, r0
 800afda:	4621      	mov	r1, r4
 800afdc:	e000      	b.n	800afe0 <ai_platform_get_weights_map+0x50>
 800afde:	4619      	mov	r1, r3
 800afe0:	f852 3f04 	ldr.w	r3, [r2, #4]!
 800afe4:	42b3      	cmp	r3, r6
 800afe6:	d025      	beq.n	800b034 <ai_platform_get_weights_map+0xa4>
 800afe8:	f845 3f04 	str.w	r3, [r5, #4]!
 800afec:	1c4b      	adds	r3, r1, #1
 800afee:	429f      	cmp	r7, r3
 800aff0:	d8f5      	bhi.n	800afde <ai_platform_get_weights_map+0x4e>
 800aff2:	d1da      	bne.n	800afaa <ai_platform_get_weights_map+0x1a>
 800aff4:	3102      	adds	r1, #2
 800aff6:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 800affa:	42b3      	cmp	r3, r6
 800affc:	d1d5      	bne.n	800afaa <ai_platform_get_weights_map+0x1a>
 800affe:	2401      	movs	r4, #1
 800b000:	e7d3      	b.n	800afaa <ai_platform_get_weights_map+0x1a>
 800b002:	1d30      	adds	r0, r6, #4
 800b004:	f7ff ff14 	bl	800ae30 <ai_buffer_array_sane>
 800b008:	2800      	cmp	r0, #0
 800b00a:	d0cd      	beq.n	800afa8 <ai_platform_get_weights_map+0x18>
 800b00c:	88f3      	ldrh	r3, [r6, #6]
 800b00e:	429f      	cmp	r7, r3
 800b010:	d1ca      	bne.n	800afa8 <ai_platform_get_weights_map+0x18>
 800b012:	3d04      	subs	r5, #4
 800b014:	4622      	mov	r2, r4
 800b016:	68b3      	ldr	r3, [r6, #8]
 800b018:	4423      	add	r3, r4
 800b01a:	341c      	adds	r4, #28
 800b01c:	685b      	ldr	r3, [r3, #4]
 800b01e:	b123      	cbz	r3, 800b02a <ai_platform_get_weights_map+0x9a>
 800b020:	3201      	adds	r2, #1
 800b022:	f845 3f04 	str.w	r3, [r5, #4]!
 800b026:	4297      	cmp	r7, r2
 800b028:	d8f5      	bhi.n	800b016 <ai_platform_get_weights_map+0x86>
 800b02a:	1abc      	subs	r4, r7, r2
 800b02c:	fab4 f484 	clz	r4, r4
 800b030:	0964      	lsrs	r4, r4, #5
 800b032:	e7ba      	b.n	800afaa <ai_platform_get_weights_map+0x1a>
 800b034:	428f      	cmp	r7, r1
 800b036:	d1b8      	bne.n	800afaa <ai_platform_get_weights_map+0x1a>
 800b038:	e7e1      	b.n	800affe <ai_platform_get_weights_map+0x6e>
 800b03a:	bf00      	nop
 800b03c:	a1facade 	.word	0xa1facade

0800b040 <ai_platform_get_activations_map>:
 800b040:	2900      	cmp	r1, #0
 800b042:	bf18      	it	ne
 800b044:	2800      	cmpne	r0, #0
 800b046:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b048:	bf0c      	ite	eq
 800b04a:	2401      	moveq	r4, #1
 800b04c:	2400      	movne	r4, #0
 800b04e:	2a00      	cmp	r2, #0
 800b050:	bf08      	it	eq
 800b052:	f044 0401 	orreq.w	r4, r4, #1
 800b056:	b114      	cbz	r4, 800b05e <ai_platform_get_activations_map+0x1e>
 800b058:	2400      	movs	r4, #0
 800b05a:	4620      	mov	r0, r4
 800b05c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b05e:	4616      	mov	r6, r2
 800b060:	4b22      	ldr	r3, [pc, #136]	; (800b0ec <ai_platform_get_activations_map+0xac>)
 800b062:	6812      	ldr	r2, [r2, #0]
 800b064:	4605      	mov	r5, r0
 800b066:	460f      	mov	r7, r1
 800b068:	429a      	cmp	r2, r3
 800b06a:	d022      	beq.n	800b0b2 <ai_platform_get_activations_map+0x72>
 800b06c:	6a30      	ldr	r0, [r6, #32]
 800b06e:	2800      	cmp	r0, #0
 800b070:	d0f2      	beq.n	800b058 <ai_platform_get_activations_map+0x18>
 800b072:	6806      	ldr	r6, [r0, #0]
 800b074:	429e      	cmp	r6, r3
 800b076:	d006      	beq.n	800b086 <ai_platform_get_activations_map+0x46>
 800b078:	f1a1 0401 	sub.w	r4, r1, #1
 800b07c:	6028      	str	r0, [r5, #0]
 800b07e:	fab4 f484 	clz	r4, r4
 800b082:	0964      	lsrs	r4, r4, #5
 800b084:	e7e9      	b.n	800b05a <ai_platform_get_activations_map+0x1a>
 800b086:	3d04      	subs	r5, #4
 800b088:	4602      	mov	r2, r0
 800b08a:	4621      	mov	r1, r4
 800b08c:	e000      	b.n	800b090 <ai_platform_get_activations_map+0x50>
 800b08e:	4619      	mov	r1, r3
 800b090:	f852 3f04 	ldr.w	r3, [r2, #4]!
 800b094:	42b3      	cmp	r3, r6
 800b096:	d026      	beq.n	800b0e6 <ai_platform_get_activations_map+0xa6>
 800b098:	f845 3f04 	str.w	r3, [r5, #4]!
 800b09c:	1c4b      	adds	r3, r1, #1
 800b09e:	429f      	cmp	r7, r3
 800b0a0:	d8f5      	bhi.n	800b08e <ai_platform_get_activations_map+0x4e>
 800b0a2:	d1da      	bne.n	800b05a <ai_platform_get_activations_map+0x1a>
 800b0a4:	3102      	adds	r1, #2
 800b0a6:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 800b0aa:	42b3      	cmp	r3, r6
 800b0ac:	d1d5      	bne.n	800b05a <ai_platform_get_activations_map+0x1a>
 800b0ae:	2401      	movs	r4, #1
 800b0b0:	e7d3      	b.n	800b05a <ai_platform_get_activations_map+0x1a>
 800b0b2:	f106 000c 	add.w	r0, r6, #12
 800b0b6:	f7ff febb 	bl	800ae30 <ai_buffer_array_sane>
 800b0ba:	2800      	cmp	r0, #0
 800b0bc:	d0cc      	beq.n	800b058 <ai_platform_get_activations_map+0x18>
 800b0be:	89f3      	ldrh	r3, [r6, #14]
 800b0c0:	429f      	cmp	r7, r3
 800b0c2:	d1c9      	bne.n	800b058 <ai_platform_get_activations_map+0x18>
 800b0c4:	3d04      	subs	r5, #4
 800b0c6:	4622      	mov	r2, r4
 800b0c8:	6933      	ldr	r3, [r6, #16]
 800b0ca:	4423      	add	r3, r4
 800b0cc:	341c      	adds	r4, #28
 800b0ce:	685b      	ldr	r3, [r3, #4]
 800b0d0:	b123      	cbz	r3, 800b0dc <ai_platform_get_activations_map+0x9c>
 800b0d2:	3201      	adds	r2, #1
 800b0d4:	f845 3f04 	str.w	r3, [r5, #4]!
 800b0d8:	4297      	cmp	r7, r2
 800b0da:	d8f5      	bhi.n	800b0c8 <ai_platform_get_activations_map+0x88>
 800b0dc:	1abc      	subs	r4, r7, r2
 800b0de:	fab4 f484 	clz	r4, r4
 800b0e2:	0964      	lsrs	r4, r4, #5
 800b0e4:	e7b9      	b.n	800b05a <ai_platform_get_activations_map+0x1a>
 800b0e6:	428f      	cmp	r7, r1
 800b0e8:	d1b7      	bne.n	800b05a <ai_platform_get_activations_map+0x1a>
 800b0ea:	e7e0      	b.n	800b0ae <ai_platform_get_activations_map+0x6e>
 800b0ec:	a1facade 	.word	0xa1facade

0800b0f0 <ai_platform_bind_network_params>:
 800b0f0:	2a00      	cmp	r2, #0
 800b0f2:	bf18      	it	ne
 800b0f4:	2900      	cmpne	r1, #0
 800b0f6:	d010      	beq.n	800b11a <ai_platform_bind_network_params+0x2a>
 800b0f8:	b178      	cbz	r0, 800b11a <ai_platform_bind_network_params+0x2a>
 800b0fa:	4603      	mov	r3, r0
 800b0fc:	4808      	ldr	r0, [pc, #32]	; (800b120 <ai_platform_bind_network_params+0x30>)
 800b0fe:	f103 0c0c 	add.w	ip, r3, #12
 800b102:	f843 0b04 	str.w	r0, [r3], #4
 800b106:	c903      	ldmia	r1, {r0, r1}
 800b108:	e883 0003 	stmia.w	r3, {r0, r1}
 800b10c:	2301      	movs	r3, #1
 800b10e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b112:	e88c 0003 	stmia.w	ip, {r0, r1}
 800b116:	4618      	mov	r0, r3
 800b118:	4770      	bx	lr
 800b11a:	2300      	movs	r3, #0
 800b11c:	4618      	mov	r0, r3
 800b11e:	4770      	bx	lr
 800b120:	a1facade 	.word	0xa1facade

0800b124 <ai_platform_runtime_get_revision>:
 800b124:	b508      	push	{r3, lr}
 800b126:	f7ff ff2f 	bl	800af88 <_ai_platform_acquire_crc>
 800b12a:	4b39      	ldr	r3, [pc, #228]	; (800b210 <ai_platform_runtime_get_revision+0xec>)
 800b12c:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b136:	189a      	adds	r2, r3, r2
 800b138:	2a01      	cmp	r2, #1
 800b13a:	d929      	bls.n	800b190 <ai_platform_runtime_get_revision+0x6c>
 800b13c:	f240 4249 	movw	r2, #1097	; 0x449
 800b140:	4293      	cmp	r3, r2
 800b142:	d025      	beq.n	800b190 <ai_platform_runtime_get_revision+0x6c>
 800b144:	4a33      	ldr	r2, [pc, #204]	; (800b214 <ai_platform_runtime_get_revision+0xf0>)
 800b146:	6813      	ldr	r3, [r2, #0]
 800b148:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b14c:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800b150:	d02b      	beq.n	800b1aa <ai_platform_runtime_get_revision+0x86>
 800b152:	6813      	ldr	r3, [r2, #0]
 800b154:	f240 4183 	movw	r1, #1155	; 0x483
 800b158:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b15c:	428b      	cmp	r3, r1
 800b15e:	d046      	beq.n	800b1ee <ai_platform_runtime_get_revision+0xca>
 800b160:	6813      	ldr	r3, [r2, #0]
 800b162:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b166:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800b16a:	d032      	beq.n	800b1d2 <ai_platform_runtime_get_revision+0xae>
 800b16c:	6813      	ldr	r3, [r2, #0]
 800b16e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b172:	2b00      	cmp	r3, #0
 800b174:	d129      	bne.n	800b1ca <ai_platform_runtime_get_revision+0xa6>
 800b176:	4a28      	ldr	r2, [pc, #160]	; (800b218 <ai_platform_runtime_get_revision+0xf4>)
 800b178:	2301      	movs	r3, #1
 800b17a:	6093      	str	r3, [r2, #8]
 800b17c:	6893      	ldr	r3, [r2, #8]
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d1fc      	bne.n	800b17c <ai_platform_runtime_get_revision+0x58>
 800b182:	4926      	ldr	r1, [pc, #152]	; (800b21c <ai_platform_runtime_get_revision+0xf8>)
 800b184:	4b26      	ldr	r3, [pc, #152]	; (800b220 <ai_platform_runtime_get_revision+0xfc>)
 800b186:	6011      	str	r1, [r2, #0]
 800b188:	6812      	ldr	r2, [r2, #0]
 800b18a:	429a      	cmp	r2, r3
 800b18c:	d01d      	beq.n	800b1ca <ai_platform_runtime_get_revision+0xa6>
 800b18e:	e7fe      	b.n	800b18e <ai_platform_runtime_get_revision+0x6a>
 800b190:	4a21      	ldr	r2, [pc, #132]	; (800b218 <ai_platform_runtime_get_revision+0xf4>)
 800b192:	2301      	movs	r3, #1
 800b194:	6093      	str	r3, [r2, #8]
 800b196:	6893      	ldr	r3, [r2, #8]
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d1fc      	bne.n	800b196 <ai_platform_runtime_get_revision+0x72>
 800b19c:	491f      	ldr	r1, [pc, #124]	; (800b21c <ai_platform_runtime_get_revision+0xf8>)
 800b19e:	4b20      	ldr	r3, [pc, #128]	; (800b220 <ai_platform_runtime_get_revision+0xfc>)
 800b1a0:	6011      	str	r1, [r2, #0]
 800b1a2:	6812      	ldr	r2, [r2, #0]
 800b1a4:	429a      	cmp	r2, r3
 800b1a6:	d010      	beq.n	800b1ca <ai_platform_runtime_get_revision+0xa6>
 800b1a8:	e7fe      	b.n	800b1a8 <ai_platform_runtime_get_revision+0x84>
 800b1aa:	4a1e      	ldr	r2, [pc, #120]	; (800b224 <ai_platform_runtime_get_revision+0x100>)
 800b1ac:	2301      	movs	r3, #1
 800b1ae:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800b1b2:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d1fb      	bne.n	800b1b2 <ai_platform_runtime_get_revision+0x8e>
 800b1ba:	4918      	ldr	r1, [pc, #96]	; (800b21c <ai_platform_runtime_get_revision+0xf8>)
 800b1bc:	4b18      	ldr	r3, [pc, #96]	; (800b220 <ai_platform_runtime_get_revision+0xfc>)
 800b1be:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800b1c2:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800b1c6:	429a      	cmp	r2, r3
 800b1c8:	d110      	bne.n	800b1ec <ai_platform_runtime_get_revision+0xc8>
 800b1ca:	f7ff fedf 	bl	800af8c <_ai_platform_release_crc>
 800b1ce:	4816      	ldr	r0, [pc, #88]	; (800b228 <ai_platform_runtime_get_revision+0x104>)
 800b1d0:	bd08      	pop	{r3, pc}
 800b1d2:	4a11      	ldr	r2, [pc, #68]	; (800b218 <ai_platform_runtime_get_revision+0xf4>)
 800b1d4:	2301      	movs	r3, #1
 800b1d6:	6093      	str	r3, [r2, #8]
 800b1d8:	6893      	ldr	r3, [r2, #8]
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d1fc      	bne.n	800b1d8 <ai_platform_runtime_get_revision+0xb4>
 800b1de:	490f      	ldr	r1, [pc, #60]	; (800b21c <ai_platform_runtime_get_revision+0xf8>)
 800b1e0:	4b0f      	ldr	r3, [pc, #60]	; (800b220 <ai_platform_runtime_get_revision+0xfc>)
 800b1e2:	6011      	str	r1, [r2, #0]
 800b1e4:	6812      	ldr	r2, [r2, #0]
 800b1e6:	429a      	cmp	r2, r3
 800b1e8:	d0ef      	beq.n	800b1ca <ai_platform_runtime_get_revision+0xa6>
 800b1ea:	e7fe      	b.n	800b1ea <ai_platform_runtime_get_revision+0xc6>
 800b1ec:	e7fe      	b.n	800b1ec <ai_platform_runtime_get_revision+0xc8>
 800b1ee:	4a0d      	ldr	r2, [pc, #52]	; (800b224 <ai_platform_runtime_get_revision+0x100>)
 800b1f0:	2301      	movs	r3, #1
 800b1f2:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800b1f6:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d1fb      	bne.n	800b1f6 <ai_platform_runtime_get_revision+0xd2>
 800b1fe:	4907      	ldr	r1, [pc, #28]	; (800b21c <ai_platform_runtime_get_revision+0xf8>)
 800b200:	4b07      	ldr	r3, [pc, #28]	; (800b220 <ai_platform_runtime_get_revision+0xfc>)
 800b202:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800b206:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800b20a:	429a      	cmp	r2, r3
 800b20c:	d0dd      	beq.n	800b1ca <ai_platform_runtime_get_revision+0xa6>
 800b20e:	e7fe      	b.n	800b20e <ai_platform_runtime_get_revision+0xea>
 800b210:	e0042000 	.word	0xe0042000
 800b214:	5c001000 	.word	0x5c001000
 800b218:	40023000 	.word	0x40023000
 800b21c:	f407a5c2 	.word	0xf407a5c2
 800b220:	b5e8b5cd 	.word	0xb5e8b5cd
 800b224:	58024000 	.word	0x58024000
 800b228:	080168dc 	.word	0x080168dc

0800b22c <ai_platform_runtime_get_version>:
 800b22c:	b500      	push	{lr}
 800b22e:	b083      	sub	sp, #12
 800b230:	f7ff feaa 	bl	800af88 <_ai_platform_acquire_crc>
 800b234:	4b3a      	ldr	r3, [pc, #232]	; (800b320 <ai_platform_runtime_get_version+0xf4>)
 800b236:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b240:	189a      	adds	r2, r3, r2
 800b242:	2a01      	cmp	r2, #1
 800b244:	d929      	bls.n	800b29a <ai_platform_runtime_get_version+0x6e>
 800b246:	f240 4249 	movw	r2, #1097	; 0x449
 800b24a:	4293      	cmp	r3, r2
 800b24c:	d025      	beq.n	800b29a <ai_platform_runtime_get_version+0x6e>
 800b24e:	4a35      	ldr	r2, [pc, #212]	; (800b324 <ai_platform_runtime_get_version+0xf8>)
 800b250:	6813      	ldr	r3, [r2, #0]
 800b252:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b256:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800b25a:	d02b      	beq.n	800b2b4 <ai_platform_runtime_get_version+0x88>
 800b25c:	6813      	ldr	r3, [r2, #0]
 800b25e:	f240 4183 	movw	r1, #1155	; 0x483
 800b262:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b266:	428b      	cmp	r3, r1
 800b268:	d048      	beq.n	800b2fc <ai_platform_runtime_get_version+0xd0>
 800b26a:	6813      	ldr	r3, [r2, #0]
 800b26c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b270:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800b274:	d034      	beq.n	800b2e0 <ai_platform_runtime_get_version+0xb4>
 800b276:	6813      	ldr	r3, [r2, #0]
 800b278:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d129      	bne.n	800b2d4 <ai_platform_runtime_get_version+0xa8>
 800b280:	4a29      	ldr	r2, [pc, #164]	; (800b328 <ai_platform_runtime_get_version+0xfc>)
 800b282:	2301      	movs	r3, #1
 800b284:	6093      	str	r3, [r2, #8]
 800b286:	6893      	ldr	r3, [r2, #8]
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d1fc      	bne.n	800b286 <ai_platform_runtime_get_version+0x5a>
 800b28c:	4927      	ldr	r1, [pc, #156]	; (800b32c <ai_platform_runtime_get_version+0x100>)
 800b28e:	4b28      	ldr	r3, [pc, #160]	; (800b330 <ai_platform_runtime_get_version+0x104>)
 800b290:	6011      	str	r1, [r2, #0]
 800b292:	6812      	ldr	r2, [r2, #0]
 800b294:	429a      	cmp	r2, r3
 800b296:	d01d      	beq.n	800b2d4 <ai_platform_runtime_get_version+0xa8>
 800b298:	e7fe      	b.n	800b298 <ai_platform_runtime_get_version+0x6c>
 800b29a:	4a23      	ldr	r2, [pc, #140]	; (800b328 <ai_platform_runtime_get_version+0xfc>)
 800b29c:	2301      	movs	r3, #1
 800b29e:	6093      	str	r3, [r2, #8]
 800b2a0:	6893      	ldr	r3, [r2, #8]
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d1fc      	bne.n	800b2a0 <ai_platform_runtime_get_version+0x74>
 800b2a6:	4921      	ldr	r1, [pc, #132]	; (800b32c <ai_platform_runtime_get_version+0x100>)
 800b2a8:	4b21      	ldr	r3, [pc, #132]	; (800b330 <ai_platform_runtime_get_version+0x104>)
 800b2aa:	6011      	str	r1, [r2, #0]
 800b2ac:	6812      	ldr	r2, [r2, #0]
 800b2ae:	429a      	cmp	r2, r3
 800b2b0:	d010      	beq.n	800b2d4 <ai_platform_runtime_get_version+0xa8>
 800b2b2:	e7fe      	b.n	800b2b2 <ai_platform_runtime_get_version+0x86>
 800b2b4:	4a1f      	ldr	r2, [pc, #124]	; (800b334 <ai_platform_runtime_get_version+0x108>)
 800b2b6:	2301      	movs	r3, #1
 800b2b8:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800b2bc:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d1fb      	bne.n	800b2bc <ai_platform_runtime_get_version+0x90>
 800b2c4:	4919      	ldr	r1, [pc, #100]	; (800b32c <ai_platform_runtime_get_version+0x100>)
 800b2c6:	4b1a      	ldr	r3, [pc, #104]	; (800b330 <ai_platform_runtime_get_version+0x104>)
 800b2c8:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800b2cc:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800b2d0:	429a      	cmp	r2, r3
 800b2d2:	d112      	bne.n	800b2fa <ai_platform_runtime_get_version+0xce>
 800b2d4:	f7ff fe5a 	bl	800af8c <_ai_platform_release_crc>
 800b2d8:	2008      	movs	r0, #8
 800b2da:	b003      	add	sp, #12
 800b2dc:	f85d fb04 	ldr.w	pc, [sp], #4
 800b2e0:	4a11      	ldr	r2, [pc, #68]	; (800b328 <ai_platform_runtime_get_version+0xfc>)
 800b2e2:	2301      	movs	r3, #1
 800b2e4:	6093      	str	r3, [r2, #8]
 800b2e6:	6893      	ldr	r3, [r2, #8]
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d1fc      	bne.n	800b2e6 <ai_platform_runtime_get_version+0xba>
 800b2ec:	490f      	ldr	r1, [pc, #60]	; (800b32c <ai_platform_runtime_get_version+0x100>)
 800b2ee:	4b10      	ldr	r3, [pc, #64]	; (800b330 <ai_platform_runtime_get_version+0x104>)
 800b2f0:	6011      	str	r1, [r2, #0]
 800b2f2:	6812      	ldr	r2, [r2, #0]
 800b2f4:	429a      	cmp	r2, r3
 800b2f6:	d0ed      	beq.n	800b2d4 <ai_platform_runtime_get_version+0xa8>
 800b2f8:	e7fe      	b.n	800b2f8 <ai_platform_runtime_get_version+0xcc>
 800b2fa:	e7fe      	b.n	800b2fa <ai_platform_runtime_get_version+0xce>
 800b2fc:	4a0d      	ldr	r2, [pc, #52]	; (800b334 <ai_platform_runtime_get_version+0x108>)
 800b2fe:	2301      	movs	r3, #1
 800b300:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800b304:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d1fb      	bne.n	800b304 <ai_platform_runtime_get_version+0xd8>
 800b30c:	4907      	ldr	r1, [pc, #28]	; (800b32c <ai_platform_runtime_get_version+0x100>)
 800b30e:	4b08      	ldr	r3, [pc, #32]	; (800b330 <ai_platform_runtime_get_version+0x104>)
 800b310:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800b314:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800b318:	429a      	cmp	r2, r3
 800b31a:	d0db      	beq.n	800b2d4 <ai_platform_runtime_get_version+0xa8>
 800b31c:	e7fe      	b.n	800b31c <ai_platform_runtime_get_version+0xf0>
 800b31e:	bf00      	nop
 800b320:	e0042000 	.word	0xe0042000
 800b324:	5c001000 	.word	0x5c001000
 800b328:	40023000 	.word	0x40023000
 800b32c:	f407a5c2 	.word	0xf407a5c2
 800b330:	b5e8b5cd 	.word	0xb5e8b5cd
 800b334:	58024000 	.word	0x58024000

0800b338 <ai_platform_api_get_version>:
 800b338:	b500      	push	{lr}
 800b33a:	b083      	sub	sp, #12
 800b33c:	f7ff fe24 	bl	800af88 <_ai_platform_acquire_crc>
 800b340:	4b42      	ldr	r3, [pc, #264]	; (800b44c <ai_platform_api_get_version+0x114>)
 800b342:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b34c:	189a      	adds	r2, r3, r2
 800b34e:	2a01      	cmp	r2, #1
 800b350:	d929      	bls.n	800b3a6 <ai_platform_api_get_version+0x6e>
 800b352:	f240 4249 	movw	r2, #1097	; 0x449
 800b356:	4293      	cmp	r3, r2
 800b358:	d025      	beq.n	800b3a6 <ai_platform_api_get_version+0x6e>
 800b35a:	4a3d      	ldr	r2, [pc, #244]	; (800b450 <ai_platform_api_get_version+0x118>)
 800b35c:	6813      	ldr	r3, [r2, #0]
 800b35e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b362:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800b366:	d02b      	beq.n	800b3c0 <ai_platform_api_get_version+0x88>
 800b368:	6813      	ldr	r3, [r2, #0]
 800b36a:	f240 4183 	movw	r1, #1155	; 0x483
 800b36e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b372:	428b      	cmp	r3, r1
 800b374:	d059      	beq.n	800b42a <ai_platform_api_get_version+0xf2>
 800b376:	6813      	ldr	r3, [r2, #0]
 800b378:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b37c:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800b380:	d045      	beq.n	800b40e <ai_platform_api_get_version+0xd6>
 800b382:	6813      	ldr	r3, [r2, #0]
 800b384:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d129      	bne.n	800b3e0 <ai_platform_api_get_version+0xa8>
 800b38c:	4a31      	ldr	r2, [pc, #196]	; (800b454 <ai_platform_api_get_version+0x11c>)
 800b38e:	2301      	movs	r3, #1
 800b390:	6093      	str	r3, [r2, #8]
 800b392:	6893      	ldr	r3, [r2, #8]
 800b394:	2b00      	cmp	r3, #0
 800b396:	d1fc      	bne.n	800b392 <ai_platform_api_get_version+0x5a>
 800b398:	492f      	ldr	r1, [pc, #188]	; (800b458 <ai_platform_api_get_version+0x120>)
 800b39a:	4b30      	ldr	r3, [pc, #192]	; (800b45c <ai_platform_api_get_version+0x124>)
 800b39c:	6011      	str	r1, [r2, #0]
 800b39e:	6812      	ldr	r2, [r2, #0]
 800b3a0:	429a      	cmp	r2, r3
 800b3a2:	d01d      	beq.n	800b3e0 <ai_platform_api_get_version+0xa8>
 800b3a4:	e7fe      	b.n	800b3a4 <ai_platform_api_get_version+0x6c>
 800b3a6:	4a2b      	ldr	r2, [pc, #172]	; (800b454 <ai_platform_api_get_version+0x11c>)
 800b3a8:	2301      	movs	r3, #1
 800b3aa:	6093      	str	r3, [r2, #8]
 800b3ac:	6893      	ldr	r3, [r2, #8]
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d1fc      	bne.n	800b3ac <ai_platform_api_get_version+0x74>
 800b3b2:	4929      	ldr	r1, [pc, #164]	; (800b458 <ai_platform_api_get_version+0x120>)
 800b3b4:	4b29      	ldr	r3, [pc, #164]	; (800b45c <ai_platform_api_get_version+0x124>)
 800b3b6:	6011      	str	r1, [r2, #0]
 800b3b8:	6812      	ldr	r2, [r2, #0]
 800b3ba:	429a      	cmp	r2, r3
 800b3bc:	d010      	beq.n	800b3e0 <ai_platform_api_get_version+0xa8>
 800b3be:	e7fe      	b.n	800b3be <ai_platform_api_get_version+0x86>
 800b3c0:	4a27      	ldr	r2, [pc, #156]	; (800b460 <ai_platform_api_get_version+0x128>)
 800b3c2:	2301      	movs	r3, #1
 800b3c4:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800b3c8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d1fb      	bne.n	800b3c8 <ai_platform_api_get_version+0x90>
 800b3d0:	4921      	ldr	r1, [pc, #132]	; (800b458 <ai_platform_api_get_version+0x120>)
 800b3d2:	4b22      	ldr	r3, [pc, #136]	; (800b45c <ai_platform_api_get_version+0x124>)
 800b3d4:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800b3d8:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800b3dc:	429a      	cmp	r2, r3
 800b3de:	d123      	bne.n	800b428 <ai_platform_api_get_version+0xf0>
 800b3e0:	f7ff fdd4 	bl	800af8c <_ai_platform_release_crc>
 800b3e4:	4b1f      	ldr	r3, [pc, #124]	; (800b464 <ai_platform_api_get_version+0x12c>)
 800b3e6:	2000      	movs	r0, #0
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	fa5f fc83 	uxtb.w	ip, r3
 800b3ee:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800b3f2:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800b3f6:	0e1b      	lsrs	r3, r3, #24
 800b3f8:	f36c 0007 	bfi	r0, ip, #0, #8
 800b3fc:	f361 200f 	bfi	r0, r1, #8, #8
 800b400:	f362 4017 	bfi	r0, r2, #16, #8
 800b404:	f363 601f 	bfi	r0, r3, #24, #8
 800b408:	b003      	add	sp, #12
 800b40a:	f85d fb04 	ldr.w	pc, [sp], #4
 800b40e:	4a11      	ldr	r2, [pc, #68]	; (800b454 <ai_platform_api_get_version+0x11c>)
 800b410:	2301      	movs	r3, #1
 800b412:	6093      	str	r3, [r2, #8]
 800b414:	6893      	ldr	r3, [r2, #8]
 800b416:	2b00      	cmp	r3, #0
 800b418:	d1fc      	bne.n	800b414 <ai_platform_api_get_version+0xdc>
 800b41a:	490f      	ldr	r1, [pc, #60]	; (800b458 <ai_platform_api_get_version+0x120>)
 800b41c:	4b0f      	ldr	r3, [pc, #60]	; (800b45c <ai_platform_api_get_version+0x124>)
 800b41e:	6011      	str	r1, [r2, #0]
 800b420:	6812      	ldr	r2, [r2, #0]
 800b422:	429a      	cmp	r2, r3
 800b424:	d0dc      	beq.n	800b3e0 <ai_platform_api_get_version+0xa8>
 800b426:	e7fe      	b.n	800b426 <ai_platform_api_get_version+0xee>
 800b428:	e7fe      	b.n	800b428 <ai_platform_api_get_version+0xf0>
 800b42a:	4a0d      	ldr	r2, [pc, #52]	; (800b460 <ai_platform_api_get_version+0x128>)
 800b42c:	2301      	movs	r3, #1
 800b42e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800b432:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800b436:	2b00      	cmp	r3, #0
 800b438:	d1fb      	bne.n	800b432 <ai_platform_api_get_version+0xfa>
 800b43a:	4907      	ldr	r1, [pc, #28]	; (800b458 <ai_platform_api_get_version+0x120>)
 800b43c:	4b07      	ldr	r3, [pc, #28]	; (800b45c <ai_platform_api_get_version+0x124>)
 800b43e:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800b442:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800b446:	429a      	cmp	r2, r3
 800b448:	d0ca      	beq.n	800b3e0 <ai_platform_api_get_version+0xa8>
 800b44a:	e7fe      	b.n	800b44a <ai_platform_api_get_version+0x112>
 800b44c:	e0042000 	.word	0xe0042000
 800b450:	5c001000 	.word	0x5c001000
 800b454:	40023000 	.word	0x40023000
 800b458:	f407a5c2 	.word	0xf407a5c2
 800b45c:	b5e8b5cd 	.word	0xb5e8b5cd
 800b460:	58024000 	.word	0x58024000
 800b464:	080168e0 	.word	0x080168e0

0800b468 <ai_platform_interface_api_get_version>:
 800b468:	b500      	push	{lr}
 800b46a:	b083      	sub	sp, #12
 800b46c:	f7ff fd8c 	bl	800af88 <_ai_platform_acquire_crc>
 800b470:	4b42      	ldr	r3, [pc, #264]	; (800b57c <ai_platform_interface_api_get_version+0x114>)
 800b472:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b47c:	189a      	adds	r2, r3, r2
 800b47e:	2a01      	cmp	r2, #1
 800b480:	d929      	bls.n	800b4d6 <ai_platform_interface_api_get_version+0x6e>
 800b482:	f240 4249 	movw	r2, #1097	; 0x449
 800b486:	4293      	cmp	r3, r2
 800b488:	d025      	beq.n	800b4d6 <ai_platform_interface_api_get_version+0x6e>
 800b48a:	4a3d      	ldr	r2, [pc, #244]	; (800b580 <ai_platform_interface_api_get_version+0x118>)
 800b48c:	6813      	ldr	r3, [r2, #0]
 800b48e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b492:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800b496:	d02b      	beq.n	800b4f0 <ai_platform_interface_api_get_version+0x88>
 800b498:	6813      	ldr	r3, [r2, #0]
 800b49a:	f240 4183 	movw	r1, #1155	; 0x483
 800b49e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b4a2:	428b      	cmp	r3, r1
 800b4a4:	d059      	beq.n	800b55a <ai_platform_interface_api_get_version+0xf2>
 800b4a6:	6813      	ldr	r3, [r2, #0]
 800b4a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b4ac:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800b4b0:	d045      	beq.n	800b53e <ai_platform_interface_api_get_version+0xd6>
 800b4b2:	6813      	ldr	r3, [r2, #0]
 800b4b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d129      	bne.n	800b510 <ai_platform_interface_api_get_version+0xa8>
 800b4bc:	4a31      	ldr	r2, [pc, #196]	; (800b584 <ai_platform_interface_api_get_version+0x11c>)
 800b4be:	2301      	movs	r3, #1
 800b4c0:	6093      	str	r3, [r2, #8]
 800b4c2:	6893      	ldr	r3, [r2, #8]
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d1fc      	bne.n	800b4c2 <ai_platform_interface_api_get_version+0x5a>
 800b4c8:	492f      	ldr	r1, [pc, #188]	; (800b588 <ai_platform_interface_api_get_version+0x120>)
 800b4ca:	4b30      	ldr	r3, [pc, #192]	; (800b58c <ai_platform_interface_api_get_version+0x124>)
 800b4cc:	6011      	str	r1, [r2, #0]
 800b4ce:	6812      	ldr	r2, [r2, #0]
 800b4d0:	429a      	cmp	r2, r3
 800b4d2:	d01d      	beq.n	800b510 <ai_platform_interface_api_get_version+0xa8>
 800b4d4:	e7fe      	b.n	800b4d4 <ai_platform_interface_api_get_version+0x6c>
 800b4d6:	4a2b      	ldr	r2, [pc, #172]	; (800b584 <ai_platform_interface_api_get_version+0x11c>)
 800b4d8:	2301      	movs	r3, #1
 800b4da:	6093      	str	r3, [r2, #8]
 800b4dc:	6893      	ldr	r3, [r2, #8]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d1fc      	bne.n	800b4dc <ai_platform_interface_api_get_version+0x74>
 800b4e2:	4929      	ldr	r1, [pc, #164]	; (800b588 <ai_platform_interface_api_get_version+0x120>)
 800b4e4:	4b29      	ldr	r3, [pc, #164]	; (800b58c <ai_platform_interface_api_get_version+0x124>)
 800b4e6:	6011      	str	r1, [r2, #0]
 800b4e8:	6812      	ldr	r2, [r2, #0]
 800b4ea:	429a      	cmp	r2, r3
 800b4ec:	d010      	beq.n	800b510 <ai_platform_interface_api_get_version+0xa8>
 800b4ee:	e7fe      	b.n	800b4ee <ai_platform_interface_api_get_version+0x86>
 800b4f0:	4a27      	ldr	r2, [pc, #156]	; (800b590 <ai_platform_interface_api_get_version+0x128>)
 800b4f2:	2301      	movs	r3, #1
 800b4f4:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800b4f8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d1fb      	bne.n	800b4f8 <ai_platform_interface_api_get_version+0x90>
 800b500:	4921      	ldr	r1, [pc, #132]	; (800b588 <ai_platform_interface_api_get_version+0x120>)
 800b502:	4b22      	ldr	r3, [pc, #136]	; (800b58c <ai_platform_interface_api_get_version+0x124>)
 800b504:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800b508:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800b50c:	429a      	cmp	r2, r3
 800b50e:	d123      	bne.n	800b558 <ai_platform_interface_api_get_version+0xf0>
 800b510:	f7ff fd3c 	bl	800af8c <_ai_platform_release_crc>
 800b514:	4b1f      	ldr	r3, [pc, #124]	; (800b594 <ai_platform_interface_api_get_version+0x12c>)
 800b516:	2000      	movs	r0, #0
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	fa5f fc83 	uxtb.w	ip, r3
 800b51e:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800b522:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800b526:	0e1b      	lsrs	r3, r3, #24
 800b528:	f36c 0007 	bfi	r0, ip, #0, #8
 800b52c:	f361 200f 	bfi	r0, r1, #8, #8
 800b530:	f362 4017 	bfi	r0, r2, #16, #8
 800b534:	f363 601f 	bfi	r0, r3, #24, #8
 800b538:	b003      	add	sp, #12
 800b53a:	f85d fb04 	ldr.w	pc, [sp], #4
 800b53e:	4a11      	ldr	r2, [pc, #68]	; (800b584 <ai_platform_interface_api_get_version+0x11c>)
 800b540:	2301      	movs	r3, #1
 800b542:	6093      	str	r3, [r2, #8]
 800b544:	6893      	ldr	r3, [r2, #8]
 800b546:	2b00      	cmp	r3, #0
 800b548:	d1fc      	bne.n	800b544 <ai_platform_interface_api_get_version+0xdc>
 800b54a:	490f      	ldr	r1, [pc, #60]	; (800b588 <ai_platform_interface_api_get_version+0x120>)
 800b54c:	4b0f      	ldr	r3, [pc, #60]	; (800b58c <ai_platform_interface_api_get_version+0x124>)
 800b54e:	6011      	str	r1, [r2, #0]
 800b550:	6812      	ldr	r2, [r2, #0]
 800b552:	429a      	cmp	r2, r3
 800b554:	d0dc      	beq.n	800b510 <ai_platform_interface_api_get_version+0xa8>
 800b556:	e7fe      	b.n	800b556 <ai_platform_interface_api_get_version+0xee>
 800b558:	e7fe      	b.n	800b558 <ai_platform_interface_api_get_version+0xf0>
 800b55a:	4a0d      	ldr	r2, [pc, #52]	; (800b590 <ai_platform_interface_api_get_version+0x128>)
 800b55c:	2301      	movs	r3, #1
 800b55e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800b562:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800b566:	2b00      	cmp	r3, #0
 800b568:	d1fb      	bne.n	800b562 <ai_platform_interface_api_get_version+0xfa>
 800b56a:	4907      	ldr	r1, [pc, #28]	; (800b588 <ai_platform_interface_api_get_version+0x120>)
 800b56c:	4b07      	ldr	r3, [pc, #28]	; (800b58c <ai_platform_interface_api_get_version+0x124>)
 800b56e:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800b572:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800b576:	429a      	cmp	r2, r3
 800b578:	d0ca      	beq.n	800b510 <ai_platform_interface_api_get_version+0xa8>
 800b57a:	e7fe      	b.n	800b57a <ai_platform_interface_api_get_version+0x112>
 800b57c:	e0042000 	.word	0xe0042000
 800b580:	5c001000 	.word	0x5c001000
 800b584:	40023000 	.word	0x40023000
 800b588:	f407a5c2 	.word	0xf407a5c2
 800b58c:	b5e8b5cd 	.word	0xb5e8b5cd
 800b590:	58024000 	.word	0x58024000
 800b594:	080168e4 	.word	0x080168e4

0800b598 <ai_platform_context_acquire>:
 800b598:	b510      	push	{r4, lr}
 800b59a:	4604      	mov	r4, r0
 800b59c:	b120      	cbz	r0, 800b5a8 <ai_platform_context_acquire+0x10>
 800b59e:	4b3d      	ldr	r3, [pc, #244]	; (800b694 <ai_platform_context_acquire+0xfc>)
 800b5a0:	6802      	ldr	r2, [r0, #0]
 800b5a2:	429a      	cmp	r2, r3
 800b5a4:	bf18      	it	ne
 800b5a6:	2400      	movne	r4, #0
 800b5a8:	f7ff fcee 	bl	800af88 <_ai_platform_acquire_crc>
 800b5ac:	4b3a      	ldr	r3, [pc, #232]	; (800b698 <ai_platform_context_acquire+0x100>)
 800b5ae:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b5b8:	189a      	adds	r2, r3, r2
 800b5ba:	2a01      	cmp	r2, #1
 800b5bc:	d929      	bls.n	800b612 <ai_platform_context_acquire+0x7a>
 800b5be:	f240 4249 	movw	r2, #1097	; 0x449
 800b5c2:	4293      	cmp	r3, r2
 800b5c4:	d025      	beq.n	800b612 <ai_platform_context_acquire+0x7a>
 800b5c6:	4a35      	ldr	r2, [pc, #212]	; (800b69c <ai_platform_context_acquire+0x104>)
 800b5c8:	6813      	ldr	r3, [r2, #0]
 800b5ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b5ce:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800b5d2:	d02b      	beq.n	800b62c <ai_platform_context_acquire+0x94>
 800b5d4:	6813      	ldr	r3, [r2, #0]
 800b5d6:	f240 4183 	movw	r1, #1155	; 0x483
 800b5da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b5de:	428b      	cmp	r3, r1
 800b5e0:	d046      	beq.n	800b670 <ai_platform_context_acquire+0xd8>
 800b5e2:	6813      	ldr	r3, [r2, #0]
 800b5e4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b5e8:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800b5ec:	d033      	beq.n	800b656 <ai_platform_context_acquire+0xbe>
 800b5ee:	6813      	ldr	r3, [r2, #0]
 800b5f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d129      	bne.n	800b64c <ai_platform_context_acquire+0xb4>
 800b5f8:	4a29      	ldr	r2, [pc, #164]	; (800b6a0 <ai_platform_context_acquire+0x108>)
 800b5fa:	2301      	movs	r3, #1
 800b5fc:	6093      	str	r3, [r2, #8]
 800b5fe:	6893      	ldr	r3, [r2, #8]
 800b600:	2b00      	cmp	r3, #0
 800b602:	d1fc      	bne.n	800b5fe <ai_platform_context_acquire+0x66>
 800b604:	4927      	ldr	r1, [pc, #156]	; (800b6a4 <ai_platform_context_acquire+0x10c>)
 800b606:	4b28      	ldr	r3, [pc, #160]	; (800b6a8 <ai_platform_context_acquire+0x110>)
 800b608:	6011      	str	r1, [r2, #0]
 800b60a:	6812      	ldr	r2, [r2, #0]
 800b60c:	429a      	cmp	r2, r3
 800b60e:	d01d      	beq.n	800b64c <ai_platform_context_acquire+0xb4>
 800b610:	e7fe      	b.n	800b610 <ai_platform_context_acquire+0x78>
 800b612:	4a23      	ldr	r2, [pc, #140]	; (800b6a0 <ai_platform_context_acquire+0x108>)
 800b614:	2301      	movs	r3, #1
 800b616:	6093      	str	r3, [r2, #8]
 800b618:	6893      	ldr	r3, [r2, #8]
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d1fc      	bne.n	800b618 <ai_platform_context_acquire+0x80>
 800b61e:	4921      	ldr	r1, [pc, #132]	; (800b6a4 <ai_platform_context_acquire+0x10c>)
 800b620:	4b21      	ldr	r3, [pc, #132]	; (800b6a8 <ai_platform_context_acquire+0x110>)
 800b622:	6011      	str	r1, [r2, #0]
 800b624:	6812      	ldr	r2, [r2, #0]
 800b626:	429a      	cmp	r2, r3
 800b628:	d010      	beq.n	800b64c <ai_platform_context_acquire+0xb4>
 800b62a:	e7fe      	b.n	800b62a <ai_platform_context_acquire+0x92>
 800b62c:	4a1f      	ldr	r2, [pc, #124]	; (800b6ac <ai_platform_context_acquire+0x114>)
 800b62e:	2301      	movs	r3, #1
 800b630:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800b634:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d1fb      	bne.n	800b634 <ai_platform_context_acquire+0x9c>
 800b63c:	4919      	ldr	r1, [pc, #100]	; (800b6a4 <ai_platform_context_acquire+0x10c>)
 800b63e:	4b1a      	ldr	r3, [pc, #104]	; (800b6a8 <ai_platform_context_acquire+0x110>)
 800b640:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800b644:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800b648:	429a      	cmp	r2, r3
 800b64a:	d103      	bne.n	800b654 <ai_platform_context_acquire+0xbc>
 800b64c:	f7ff fc9e 	bl	800af8c <_ai_platform_release_crc>
 800b650:	4620      	mov	r0, r4
 800b652:	bd10      	pop	{r4, pc}
 800b654:	e7fe      	b.n	800b654 <ai_platform_context_acquire+0xbc>
 800b656:	4a12      	ldr	r2, [pc, #72]	; (800b6a0 <ai_platform_context_acquire+0x108>)
 800b658:	2301      	movs	r3, #1
 800b65a:	6093      	str	r3, [r2, #8]
 800b65c:	6893      	ldr	r3, [r2, #8]
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d1fc      	bne.n	800b65c <ai_platform_context_acquire+0xc4>
 800b662:	4910      	ldr	r1, [pc, #64]	; (800b6a4 <ai_platform_context_acquire+0x10c>)
 800b664:	4b10      	ldr	r3, [pc, #64]	; (800b6a8 <ai_platform_context_acquire+0x110>)
 800b666:	6011      	str	r1, [r2, #0]
 800b668:	6812      	ldr	r2, [r2, #0]
 800b66a:	429a      	cmp	r2, r3
 800b66c:	d0ee      	beq.n	800b64c <ai_platform_context_acquire+0xb4>
 800b66e:	e7fe      	b.n	800b66e <ai_platform_context_acquire+0xd6>
 800b670:	4a0e      	ldr	r2, [pc, #56]	; (800b6ac <ai_platform_context_acquire+0x114>)
 800b672:	2301      	movs	r3, #1
 800b674:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800b678:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d1fb      	bne.n	800b678 <ai_platform_context_acquire+0xe0>
 800b680:	4908      	ldr	r1, [pc, #32]	; (800b6a4 <ai_platform_context_acquire+0x10c>)
 800b682:	4b09      	ldr	r3, [pc, #36]	; (800b6a8 <ai_platform_context_acquire+0x110>)
 800b684:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800b688:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800b68c:	429a      	cmp	r2, r3
 800b68e:	d0dd      	beq.n	800b64c <ai_platform_context_acquire+0xb4>
 800b690:	e7fe      	b.n	800b690 <ai_platform_context_acquire+0xf8>
 800b692:	bf00      	nop
 800b694:	a1c00100 	.word	0xa1c00100
 800b698:	e0042000 	.word	0xe0042000
 800b69c:	5c001000 	.word	0x5c001000
 800b6a0:	40023000 	.word	0x40023000
 800b6a4:	f407a5c2 	.word	0xf407a5c2
 800b6a8:	b5e8b5cd 	.word	0xb5e8b5cd
 800b6ac:	58024000 	.word	0x58024000

0800b6b0 <ai_platform_network_get_error>:
 800b6b0:	b510      	push	{r4, lr}
 800b6b2:	2800      	cmp	r0, #0
 800b6b4:	d03f      	beq.n	800b736 <ai_platform_network_get_error+0x86>
 800b6b6:	4b7d      	ldr	r3, [pc, #500]	; (800b8ac <ai_platform_network_get_error+0x1fc>)
 800b6b8:	4604      	mov	r4, r0
 800b6ba:	6802      	ldr	r2, [r0, #0]
 800b6bc:	429a      	cmp	r2, r3
 800b6be:	d13a      	bne.n	800b736 <ai_platform_network_get_error+0x86>
 800b6c0:	f7ff fc62 	bl	800af88 <_ai_platform_acquire_crc>
 800b6c4:	4b7a      	ldr	r3, [pc, #488]	; (800b8b0 <ai_platform_network_get_error+0x200>)
 800b6c6:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b6d0:	189a      	adds	r2, r3, r2
 800b6d2:	2a01      	cmp	r2, #1
 800b6d4:	f240 8086 	bls.w	800b7e4 <ai_platform_network_get_error+0x134>
 800b6d8:	f240 4249 	movw	r2, #1097	; 0x449
 800b6dc:	4293      	cmp	r3, r2
 800b6de:	f000 8081 	beq.w	800b7e4 <ai_platform_network_get_error+0x134>
 800b6e2:	4a74      	ldr	r2, [pc, #464]	; (800b8b4 <ai_platform_network_get_error+0x204>)
 800b6e4:	6813      	ldr	r3, [r2, #0]
 800b6e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b6ea:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800b6ee:	f000 8087 	beq.w	800b800 <ai_platform_network_get_error+0x150>
 800b6f2:	6813      	ldr	r3, [r2, #0]
 800b6f4:	f240 4183 	movw	r1, #1155	; 0x483
 800b6f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b6fc:	428b      	cmp	r3, r1
 800b6fe:	f000 80a9 	beq.w	800b854 <ai_platform_network_get_error+0x1a4>
 800b702:	6813      	ldr	r3, [r2, #0]
 800b704:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b708:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800b70c:	f000 80c0 	beq.w	800b890 <ai_platform_network_get_error+0x1e0>
 800b710:	6813      	ldr	r3, [r2, #0]
 800b712:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b716:	2b00      	cmp	r3, #0
 800b718:	f040 8082 	bne.w	800b820 <ai_platform_network_get_error+0x170>
 800b71c:	4a66      	ldr	r2, [pc, #408]	; (800b8b8 <ai_platform_network_get_error+0x208>)
 800b71e:	2301      	movs	r3, #1
 800b720:	6093      	str	r3, [r2, #8]
 800b722:	6893      	ldr	r3, [r2, #8]
 800b724:	2b00      	cmp	r3, #0
 800b726:	d1fc      	bne.n	800b722 <ai_platform_network_get_error+0x72>
 800b728:	4964      	ldr	r1, [pc, #400]	; (800b8bc <ai_platform_network_get_error+0x20c>)
 800b72a:	4b65      	ldr	r3, [pc, #404]	; (800b8c0 <ai_platform_network_get_error+0x210>)
 800b72c:	6011      	str	r1, [r2, #0]
 800b72e:	6812      	ldr	r2, [r2, #0]
 800b730:	429a      	cmp	r2, r3
 800b732:	d075      	beq.n	800b820 <ai_platform_network_get_error+0x170>
 800b734:	e7fe      	b.n	800b734 <ai_platform_network_get_error+0x84>
 800b736:	f7ff fc27 	bl	800af88 <_ai_platform_acquire_crc>
 800b73a:	4b5d      	ldr	r3, [pc, #372]	; (800b8b0 <ai_platform_network_get_error+0x200>)
 800b73c:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b746:	185a      	adds	r2, r3, r1
 800b748:	2a01      	cmp	r2, #1
 800b74a:	d929      	bls.n	800b7a0 <ai_platform_network_get_error+0xf0>
 800b74c:	f240 4249 	movw	r2, #1097	; 0x449
 800b750:	4293      	cmp	r3, r2
 800b752:	d025      	beq.n	800b7a0 <ai_platform_network_get_error+0xf0>
 800b754:	4a57      	ldr	r2, [pc, #348]	; (800b8b4 <ai_platform_network_get_error+0x204>)
 800b756:	6813      	ldr	r3, [r2, #0]
 800b758:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b75c:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800b760:	d02b      	beq.n	800b7ba <ai_platform_network_get_error+0x10a>
 800b762:	6813      	ldr	r3, [r2, #0]
 800b764:	f240 4183 	movw	r1, #1155	; 0x483
 800b768:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b76c:	428b      	cmp	r3, r1
 800b76e:	d060      	beq.n	800b832 <ai_platform_network_get_error+0x182>
 800b770:	6813      	ldr	r3, [r2, #0]
 800b772:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b776:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800b77a:	d07c      	beq.n	800b876 <ai_platform_network_get_error+0x1c6>
 800b77c:	6813      	ldr	r3, [r2, #0]
 800b77e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b782:	2b00      	cmp	r3, #0
 800b784:	d129      	bne.n	800b7da <ai_platform_network_get_error+0x12a>
 800b786:	4a4c      	ldr	r2, [pc, #304]	; (800b8b8 <ai_platform_network_get_error+0x208>)
 800b788:	2301      	movs	r3, #1
 800b78a:	6093      	str	r3, [r2, #8]
 800b78c:	6893      	ldr	r3, [r2, #8]
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d1fc      	bne.n	800b78c <ai_platform_network_get_error+0xdc>
 800b792:	494a      	ldr	r1, [pc, #296]	; (800b8bc <ai_platform_network_get_error+0x20c>)
 800b794:	4b4a      	ldr	r3, [pc, #296]	; (800b8c0 <ai_platform_network_get_error+0x210>)
 800b796:	6011      	str	r1, [r2, #0]
 800b798:	6812      	ldr	r2, [r2, #0]
 800b79a:	429a      	cmp	r2, r3
 800b79c:	d01d      	beq.n	800b7da <ai_platform_network_get_error+0x12a>
 800b79e:	e7fe      	b.n	800b79e <ai_platform_network_get_error+0xee>
 800b7a0:	4a45      	ldr	r2, [pc, #276]	; (800b8b8 <ai_platform_network_get_error+0x208>)
 800b7a2:	2301      	movs	r3, #1
 800b7a4:	6093      	str	r3, [r2, #8]
 800b7a6:	6893      	ldr	r3, [r2, #8]
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d1fc      	bne.n	800b7a6 <ai_platform_network_get_error+0xf6>
 800b7ac:	4943      	ldr	r1, [pc, #268]	; (800b8bc <ai_platform_network_get_error+0x20c>)
 800b7ae:	4b44      	ldr	r3, [pc, #272]	; (800b8c0 <ai_platform_network_get_error+0x210>)
 800b7b0:	6011      	str	r1, [r2, #0]
 800b7b2:	6812      	ldr	r2, [r2, #0]
 800b7b4:	429a      	cmp	r2, r3
 800b7b6:	d010      	beq.n	800b7da <ai_platform_network_get_error+0x12a>
 800b7b8:	e7fe      	b.n	800b7b8 <ai_platform_network_get_error+0x108>
 800b7ba:	4a42      	ldr	r2, [pc, #264]	; (800b8c4 <ai_platform_network_get_error+0x214>)
 800b7bc:	2301      	movs	r3, #1
 800b7be:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800b7c2:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d1fb      	bne.n	800b7c2 <ai_platform_network_get_error+0x112>
 800b7ca:	493c      	ldr	r1, [pc, #240]	; (800b8bc <ai_platform_network_get_error+0x20c>)
 800b7cc:	4b3c      	ldr	r3, [pc, #240]	; (800b8c0 <ai_platform_network_get_error+0x210>)
 800b7ce:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800b7d2:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800b7d6:	429a      	cmp	r2, r3
 800b7d8:	d111      	bne.n	800b7fe <ai_platform_network_get_error+0x14e>
 800b7da:	f7ff fbd7 	bl	800af8c <_ai_platform_release_crc>
 800b7de:	f241 0010 	movw	r0, #4112	; 0x1010
 800b7e2:	bd10      	pop	{r4, pc}
 800b7e4:	4a34      	ldr	r2, [pc, #208]	; (800b8b8 <ai_platform_network_get_error+0x208>)
 800b7e6:	2301      	movs	r3, #1
 800b7e8:	6093      	str	r3, [r2, #8]
 800b7ea:	6893      	ldr	r3, [r2, #8]
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d1fc      	bne.n	800b7ea <ai_platform_network_get_error+0x13a>
 800b7f0:	4932      	ldr	r1, [pc, #200]	; (800b8bc <ai_platform_network_get_error+0x20c>)
 800b7f2:	4b33      	ldr	r3, [pc, #204]	; (800b8c0 <ai_platform_network_get_error+0x210>)
 800b7f4:	6011      	str	r1, [r2, #0]
 800b7f6:	6812      	ldr	r2, [r2, #0]
 800b7f8:	429a      	cmp	r2, r3
 800b7fa:	d011      	beq.n	800b820 <ai_platform_network_get_error+0x170>
 800b7fc:	e7fe      	b.n	800b7fc <ai_platform_network_get_error+0x14c>
 800b7fe:	e7fe      	b.n	800b7fe <ai_platform_network_get_error+0x14e>
 800b800:	4a30      	ldr	r2, [pc, #192]	; (800b8c4 <ai_platform_network_get_error+0x214>)
 800b802:	2301      	movs	r3, #1
 800b804:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800b808:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d1fb      	bne.n	800b808 <ai_platform_network_get_error+0x158>
 800b810:	492a      	ldr	r1, [pc, #168]	; (800b8bc <ai_platform_network_get_error+0x20c>)
 800b812:	4b2b      	ldr	r3, [pc, #172]	; (800b8c0 <ai_platform_network_get_error+0x210>)
 800b814:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800b818:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800b81c:	429a      	cmp	r2, r3
 800b81e:	d107      	bne.n	800b830 <ai_platform_network_get_error+0x180>
 800b820:	f7ff fbb4 	bl	800af8c <_ai_platform_release_crc>
 800b824:	f104 0010 	add.w	r0, r4, #16
 800b828:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b82c:	f001 be68 	b.w	800d500 <core_get_error>
 800b830:	e7fe      	b.n	800b830 <ai_platform_network_get_error+0x180>
 800b832:	4a24      	ldr	r2, [pc, #144]	; (800b8c4 <ai_platform_network_get_error+0x214>)
 800b834:	2301      	movs	r3, #1
 800b836:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800b83a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d1fb      	bne.n	800b83a <ai_platform_network_get_error+0x18a>
 800b842:	491e      	ldr	r1, [pc, #120]	; (800b8bc <ai_platform_network_get_error+0x20c>)
 800b844:	4b1e      	ldr	r3, [pc, #120]	; (800b8c0 <ai_platform_network_get_error+0x210>)
 800b846:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800b84a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800b84e:	429a      	cmp	r2, r3
 800b850:	d0c3      	beq.n	800b7da <ai_platform_network_get_error+0x12a>
 800b852:	e7fe      	b.n	800b852 <ai_platform_network_get_error+0x1a2>
 800b854:	4a1b      	ldr	r2, [pc, #108]	; (800b8c4 <ai_platform_network_get_error+0x214>)
 800b856:	2301      	movs	r3, #1
 800b858:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800b85c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800b860:	2b00      	cmp	r3, #0
 800b862:	d1fb      	bne.n	800b85c <ai_platform_network_get_error+0x1ac>
 800b864:	4915      	ldr	r1, [pc, #84]	; (800b8bc <ai_platform_network_get_error+0x20c>)
 800b866:	4b16      	ldr	r3, [pc, #88]	; (800b8c0 <ai_platform_network_get_error+0x210>)
 800b868:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800b86c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800b870:	429a      	cmp	r2, r3
 800b872:	d0d5      	beq.n	800b820 <ai_platform_network_get_error+0x170>
 800b874:	e7fe      	b.n	800b874 <ai_platform_network_get_error+0x1c4>
 800b876:	4a10      	ldr	r2, [pc, #64]	; (800b8b8 <ai_platform_network_get_error+0x208>)
 800b878:	2301      	movs	r3, #1
 800b87a:	6093      	str	r3, [r2, #8]
 800b87c:	6893      	ldr	r3, [r2, #8]
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d1fc      	bne.n	800b87c <ai_platform_network_get_error+0x1cc>
 800b882:	490e      	ldr	r1, [pc, #56]	; (800b8bc <ai_platform_network_get_error+0x20c>)
 800b884:	4b0e      	ldr	r3, [pc, #56]	; (800b8c0 <ai_platform_network_get_error+0x210>)
 800b886:	6011      	str	r1, [r2, #0]
 800b888:	6812      	ldr	r2, [r2, #0]
 800b88a:	429a      	cmp	r2, r3
 800b88c:	d0a5      	beq.n	800b7da <ai_platform_network_get_error+0x12a>
 800b88e:	e7fe      	b.n	800b88e <ai_platform_network_get_error+0x1de>
 800b890:	4a09      	ldr	r2, [pc, #36]	; (800b8b8 <ai_platform_network_get_error+0x208>)
 800b892:	2301      	movs	r3, #1
 800b894:	6093      	str	r3, [r2, #8]
 800b896:	6893      	ldr	r3, [r2, #8]
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d1fc      	bne.n	800b896 <ai_platform_network_get_error+0x1e6>
 800b89c:	4907      	ldr	r1, [pc, #28]	; (800b8bc <ai_platform_network_get_error+0x20c>)
 800b89e:	4b08      	ldr	r3, [pc, #32]	; (800b8c0 <ai_platform_network_get_error+0x210>)
 800b8a0:	6011      	str	r1, [r2, #0]
 800b8a2:	6812      	ldr	r2, [r2, #0]
 800b8a4:	429a      	cmp	r2, r3
 800b8a6:	d0bb      	beq.n	800b820 <ai_platform_network_get_error+0x170>
 800b8a8:	e7fe      	b.n	800b8a8 <ai_platform_network_get_error+0x1f8>
 800b8aa:	bf00      	nop
 800b8ac:	a1c00100 	.word	0xa1c00100
 800b8b0:	e0042000 	.word	0xe0042000
 800b8b4:	5c001000 	.word	0x5c001000
 800b8b8:	40023000 	.word	0x40023000
 800b8bc:	f407a5c2 	.word	0xf407a5c2
 800b8c0:	b5e8b5cd 	.word	0xb5e8b5cd
 800b8c4:	58024000 	.word	0x58024000

0800b8c8 <ai_platform_network_set_error>:
 800b8c8:	b110      	cbz	r0, 800b8d0 <ai_platform_network_set_error+0x8>
 800b8ca:	3010      	adds	r0, #16
 800b8cc:	f001 be1e 	b.w	800d50c <core_set_error>
 800b8d0:	4770      	bx	lr
 800b8d2:	bf00      	nop

0800b8d4 <ai_platform_api_get_network_report>:
 800b8d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8d8:	b089      	sub	sp, #36	; 0x24
 800b8da:	4607      	mov	r7, r0
 800b8dc:	9101      	str	r1, [sp, #4]
 800b8de:	b120      	cbz	r0, 800b8ea <ai_platform_api_get_network_report+0x16>
 800b8e0:	4b87      	ldr	r3, [pc, #540]	; (800bb00 <ai_platform_api_get_network_report+0x22c>)
 800b8e2:	6802      	ldr	r2, [r0, #0]
 800b8e4:	429a      	cmp	r2, r3
 800b8e6:	bf18      	it	ne
 800b8e8:	2700      	movne	r7, #0
 800b8ea:	f7ff fb4d 	bl	800af88 <_ai_platform_acquire_crc>
 800b8ee:	4b85      	ldr	r3, [pc, #532]	; (800bb04 <ai_platform_api_get_network_report+0x230>)
 800b8f0:	f46f 698a 	mvn.w	r9, #1104	; 0x450
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b8fa:	eb03 0209 	add.w	r2, r3, r9
 800b8fe:	2a01      	cmp	r2, #1
 800b900:	d92b      	bls.n	800b95a <ai_platform_api_get_network_report+0x86>
 800b902:	f240 4249 	movw	r2, #1097	; 0x449
 800b906:	4293      	cmp	r3, r2
 800b908:	d027      	beq.n	800b95a <ai_platform_api_get_network_report+0x86>
 800b90a:	4a7f      	ldr	r2, [pc, #508]	; (800bb08 <ai_platform_api_get_network_report+0x234>)
 800b90c:	6813      	ldr	r3, [r2, #0]
 800b90e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b912:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800b916:	d02d      	beq.n	800b974 <ai_platform_api_get_network_report+0xa0>
 800b918:	6813      	ldr	r3, [r2, #0]
 800b91a:	f240 4183 	movw	r1, #1155	; 0x483
 800b91e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b922:	428b      	cmp	r3, r1
 800b924:	f000 80c6 	beq.w	800bab4 <ai_platform_api_get_network_report+0x1e0>
 800b928:	6813      	ldr	r3, [r2, #0]
 800b92a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b92e:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800b932:	f000 80ab 	beq.w	800ba8c <ai_platform_api_get_network_report+0x1b8>
 800b936:	6813      	ldr	r3, [r2, #0]
 800b938:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d129      	bne.n	800b994 <ai_platform_api_get_network_report+0xc0>
 800b940:	4a72      	ldr	r2, [pc, #456]	; (800bb0c <ai_platform_api_get_network_report+0x238>)
 800b942:	2301      	movs	r3, #1
 800b944:	6093      	str	r3, [r2, #8]
 800b946:	6893      	ldr	r3, [r2, #8]
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d1fc      	bne.n	800b946 <ai_platform_api_get_network_report+0x72>
 800b94c:	4b70      	ldr	r3, [pc, #448]	; (800bb10 <ai_platform_api_get_network_report+0x23c>)
 800b94e:	6013      	str	r3, [r2, #0]
 800b950:	4b70      	ldr	r3, [pc, #448]	; (800bb14 <ai_platform_api_get_network_report+0x240>)
 800b952:	6812      	ldr	r2, [r2, #0]
 800b954:	429a      	cmp	r2, r3
 800b956:	d01d      	beq.n	800b994 <ai_platform_api_get_network_report+0xc0>
 800b958:	e7fe      	b.n	800b958 <ai_platform_api_get_network_report+0x84>
 800b95a:	4a6c      	ldr	r2, [pc, #432]	; (800bb0c <ai_platform_api_get_network_report+0x238>)
 800b95c:	2301      	movs	r3, #1
 800b95e:	6093      	str	r3, [r2, #8]
 800b960:	6893      	ldr	r3, [r2, #8]
 800b962:	2b00      	cmp	r3, #0
 800b964:	d1fc      	bne.n	800b960 <ai_platform_api_get_network_report+0x8c>
 800b966:	4b6a      	ldr	r3, [pc, #424]	; (800bb10 <ai_platform_api_get_network_report+0x23c>)
 800b968:	6013      	str	r3, [r2, #0]
 800b96a:	4b6a      	ldr	r3, [pc, #424]	; (800bb14 <ai_platform_api_get_network_report+0x240>)
 800b96c:	6812      	ldr	r2, [r2, #0]
 800b96e:	429a      	cmp	r2, r3
 800b970:	d010      	beq.n	800b994 <ai_platform_api_get_network_report+0xc0>
 800b972:	e7fe      	b.n	800b972 <ai_platform_api_get_network_report+0x9e>
 800b974:	4a68      	ldr	r2, [pc, #416]	; (800bb18 <ai_platform_api_get_network_report+0x244>)
 800b976:	2301      	movs	r3, #1
 800b978:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800b97c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800b980:	2b00      	cmp	r3, #0
 800b982:	d1fb      	bne.n	800b97c <ai_platform_api_get_network_report+0xa8>
 800b984:	4b62      	ldr	r3, [pc, #392]	; (800bb10 <ai_platform_api_get_network_report+0x23c>)
 800b986:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800b98a:	4b62      	ldr	r3, [pc, #392]	; (800bb14 <ai_platform_api_get_network_report+0x240>)
 800b98c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800b990:	429a      	cmp	r2, r3
 800b992:	d16c      	bne.n	800ba6e <ai_platform_api_get_network_report+0x19a>
 800b994:	f7ff fafa 	bl	800af8c <_ai_platform_release_crc>
 800b998:	9801      	ldr	r0, [sp, #4]
 800b99a:	2800      	cmp	r0, #0
 800b99c:	bf18      	it	ne
 800b99e:	2f00      	cmpne	r7, #0
 800b9a0:	bf0c      	ite	eq
 800b9a2:	2301      	moveq	r3, #1
 800b9a4:	2300      	movne	r3, #0
 800b9a6:	9302      	str	r3, [sp, #8]
 800b9a8:	d07e      	beq.n	800baa8 <ai_platform_api_get_network_report+0x1d4>
 800b9aa:	6743      	str	r3, [r0, #116]	; 0x74
 800b9ac:	4619      	mov	r1, r3
 800b9ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9b0:	b13b      	cbz	r3, 800b9c2 <ai_platform_api_get_network_report+0xee>
 800b9b2:	3101      	adds	r1, #1
 800b9b4:	6741      	str	r1, [r0, #116]	; 0x74
 800b9b6:	691a      	ldr	r2, [r3, #16]
 800b9b8:	b11a      	cbz	r2, 800b9c2 <ai_platform_api_get_network_report+0xee>
 800b9ba:	429a      	cmp	r2, r3
 800b9bc:	d001      	beq.n	800b9c2 <ai_platform_api_get_network_report+0xee>
 800b9be:	4613      	mov	r3, r2
 800b9c0:	e7f6      	b.n	800b9b0 <ai_platform_api_get_network_report+0xdc>
 800b9c2:	2900      	cmp	r1, #0
 800b9c4:	f000 8165 	beq.w	800bc92 <ai_platform_api_get_network_report+0x3be>
 800b9c8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d050      	beq.n	800ba70 <ai_platform_api_get_network_report+0x19c>
 800b9ce:	f8d7 9030 	ldr.w	r9, [r7, #48]	; 0x30
 800b9d2:	f1b9 0f00 	cmp.w	r9, #0
 800b9d6:	d04b      	beq.n	800ba70 <ai_platform_api_get_network_report+0x19c>
 800b9d8:	f04f 0a00 	mov.w	sl, #0
 800b9dc:	9703      	str	r7, [sp, #12]
 800b9de:	4655      	mov	r5, sl
 800b9e0:	e016      	b.n	800ba10 <ai_platform_api_get_network_report+0x13c>
 800b9e2:	2201      	movs	r2, #1
 800b9e4:	f847 200e 	str.w	r2, [r7, lr]
 800b9e8:	69b2      	ldr	r2, [r6, #24]
 800b9ea:	6852      	ldr	r2, [r2, #4]
 800b9ec:	3501      	adds	r5, #1
 800b9ee:	60a3      	str	r3, [r4, #8]
 800b9f0:	f04f 0301 	mov.w	r3, #1
 800b9f4:	f10a 0a1c 	add.w	sl, sl, #28
 800b9f8:	6122      	str	r2, [r4, #16]
 800b9fa:	7523      	strb	r3, [r4, #20]
 800b9fc:	2300      	movs	r3, #0
 800b9fe:	f8c4 8018 	str.w	r8, [r4, #24]
 800ba02:	60e3      	str	r3, [r4, #12]
 800ba04:	6963      	ldr	r3, [r4, #20]
 800ba06:	f36b 231f 	bfi	r3, fp, #8, #24
 800ba0a:	e9c4 0100 	strd	r0, r1, [r4]
 800ba0e:	6163      	str	r3, [r4, #20]
 800ba10:	f8b9 3000 	ldrh.w	r3, [r9]
 800ba14:	b2aa      	uxth	r2, r5
 800ba16:	42ab      	cmp	r3, r5
 800ba18:	d95e      	bls.n	800bad8 <ai_platform_api_get_network_report+0x204>
 800ba1a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d05a      	beq.n	800bad8 <ai_platform_api_get_network_report+0x204>
 800ba22:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 800ba26:	2e00      	cmp	r6, #0
 800ba28:	d056      	beq.n	800bad8 <ai_platform_api_get_network_report+0x204>
 800ba2a:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800ba2e:	69b2      	ldr	r2, [r6, #24]
 800ba30:	f8d6 800c 	ldr.w	r8, [r6, #12]
 800ba34:	6810      	ldr	r0, [r2, #0]
 800ba36:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 800ba3a:	68b3      	ldr	r3, [r6, #8]
 800ba3c:	4454      	add	r4, sl
 800ba3e:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 800ba42:	f7ff f915 	bl	800ac70 <ai_array_to_buffer_fmt>
 800ba46:	69b2      	ldr	r2, [r6, #24]
 800ba48:	eb07 03c5 	add.w	r3, r7, r5, lsl #3
 800ba4c:	ea4f 0ec5 	mov.w	lr, r5, lsl #3
 800ba50:	6891      	ldr	r1, [r2, #8]
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d0c9      	beq.n	800b9ea <ai_platform_api_get_network_report+0x116>
 800ba56:	2200      	movs	r2, #0
 800ba58:	f847 2035 	str.w	r2, [r7, r5, lsl #3]
 800ba5c:	6832      	ldr	r2, [r6, #0]
 800ba5e:	605a      	str	r2, [r3, #4]
 800ba60:	b112      	cbz	r2, 800ba68 <ai_platform_api_get_network_report+0x194>
 800ba62:	8852      	ldrh	r2, [r2, #2]
 800ba64:	2a00      	cmp	r2, #0
 800ba66:	d1bc      	bne.n	800b9e2 <ai_platform_api_get_network_report+0x10e>
 800ba68:	69b2      	ldr	r2, [r6, #24]
 800ba6a:	2300      	movs	r3, #0
 800ba6c:	e7bd      	b.n	800b9ea <ai_platform_api_get_network_report+0x116>
 800ba6e:	e7fe      	b.n	800ba6e <ai_platform_api_get_network_report+0x19a>
 800ba70:	9901      	ldr	r1, [sp, #4]
 800ba72:	2300      	movs	r3, #0
 800ba74:	2218      	movs	r2, #24
 800ba76:	f107 0010 	add.w	r0, r7, #16
 800ba7a:	634b      	str	r3, [r1, #52]	; 0x34
 800ba7c:	860b      	strh	r3, [r1, #48]	; 0x30
 800ba7e:	2112      	movs	r1, #18
 800ba80:	f001 fd44 	bl	800d50c <core_set_error>
 800ba84:	9802      	ldr	r0, [sp, #8]
 800ba86:	b009      	add	sp, #36	; 0x24
 800ba88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba8c:	4a1f      	ldr	r2, [pc, #124]	; (800bb0c <ai_platform_api_get_network_report+0x238>)
 800ba8e:	2301      	movs	r3, #1
 800ba90:	6093      	str	r3, [r2, #8]
 800ba92:	6893      	ldr	r3, [r2, #8]
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d1fc      	bne.n	800ba92 <ai_platform_api_get_network_report+0x1be>
 800ba98:	4b1d      	ldr	r3, [pc, #116]	; (800bb10 <ai_platform_api_get_network_report+0x23c>)
 800ba9a:	6013      	str	r3, [r2, #0]
 800ba9c:	4b1d      	ldr	r3, [pc, #116]	; (800bb14 <ai_platform_api_get_network_report+0x240>)
 800ba9e:	6812      	ldr	r2, [r2, #0]
 800baa0:	429a      	cmp	r2, r3
 800baa2:	f43f af77 	beq.w	800b994 <ai_platform_api_get_network_report+0xc0>
 800baa6:	e7fe      	b.n	800baa6 <ai_platform_api_get_network_report+0x1d2>
 800baa8:	2300      	movs	r3, #0
 800baaa:	9302      	str	r3, [sp, #8]
 800baac:	9802      	ldr	r0, [sp, #8]
 800baae:	b009      	add	sp, #36	; 0x24
 800bab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bab4:	4a18      	ldr	r2, [pc, #96]	; (800bb18 <ai_platform_api_get_network_report+0x244>)
 800bab6:	2301      	movs	r3, #1
 800bab8:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800babc:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d1fb      	bne.n	800babc <ai_platform_api_get_network_report+0x1e8>
 800bac4:	4b12      	ldr	r3, [pc, #72]	; (800bb10 <ai_platform_api_get_network_report+0x23c>)
 800bac6:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800baca:	4b12      	ldr	r3, [pc, #72]	; (800bb14 <ai_platform_api_get_network_report+0x240>)
 800bacc:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800bad0:	429a      	cmp	r2, r3
 800bad2:	f43f af5f 	beq.w	800b994 <ai_platform_api_get_network_report+0xc0>
 800bad6:	e7fe      	b.n	800bad6 <ai_platform_api_get_network_report+0x202>
 800bad8:	9f03      	ldr	r7, [sp, #12]
 800bada:	2a00      	cmp	r2, #0
 800badc:	d0c8      	beq.n	800ba70 <ai_platform_api_get_network_report+0x19c>
 800bade:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800bae2:	9901      	ldr	r1, [sp, #4]
 800bae4:	685b      	ldr	r3, [r3, #4]
 800bae6:	860a      	strh	r2, [r1, #48]	; 0x30
 800bae8:	634b      	str	r3, [r1, #52]	; 0x34
 800baea:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800baec:	2b01      	cmp	r3, #1
 800baee:	f240 80c5 	bls.w	800bc7c <ai_platform_api_get_network_report+0x3a8>
 800baf2:	f04f 0a00 	mov.w	sl, #0
 800baf6:	f8d7 9030 	ldr.w	r9, [r7, #48]	; 0x30
 800bafa:	9703      	str	r7, [sp, #12]
 800bafc:	4655      	mov	r5, sl
 800bafe:	e024      	b.n	800bb4a <ai_platform_api_get_network_report+0x276>
 800bb00:	a1c00100 	.word	0xa1c00100
 800bb04:	e0042000 	.word	0xe0042000
 800bb08:	5c001000 	.word	0x5c001000
 800bb0c:	40023000 	.word	0x40023000
 800bb10:	f407a5c2 	.word	0xf407a5c2
 800bb14:	b5e8b5cd 	.word	0xb5e8b5cd
 800bb18:	58024000 	.word	0x58024000
 800bb1c:	2201      	movs	r2, #1
 800bb1e:	f847 200e 	str.w	r2, [r7, lr]
 800bb22:	69b2      	ldr	r2, [r6, #24]
 800bb24:	6852      	ldr	r2, [r2, #4]
 800bb26:	3501      	adds	r5, #1
 800bb28:	60a3      	str	r3, [r4, #8]
 800bb2a:	f04f 0301 	mov.w	r3, #1
 800bb2e:	f10a 0a1c 	add.w	sl, sl, #28
 800bb32:	6122      	str	r2, [r4, #16]
 800bb34:	7523      	strb	r3, [r4, #20]
 800bb36:	2300      	movs	r3, #0
 800bb38:	f8c4 8018 	str.w	r8, [r4, #24]
 800bb3c:	60e3      	str	r3, [r4, #12]
 800bb3e:	6963      	ldr	r3, [r4, #20]
 800bb40:	f36b 231f 	bfi	r3, fp, #8, #24
 800bb44:	e9c4 0100 	strd	r0, r1, [r4]
 800bb48:	6163      	str	r3, [r4, #20]
 800bb4a:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800bb4e:	b2aa      	uxth	r2, r5
 800bb50:	42ab      	cmp	r3, r5
 800bb52:	d927      	bls.n	800bba4 <ai_platform_api_get_network_report+0x2d0>
 800bb54:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bb58:	b323      	cbz	r3, 800bba4 <ai_platform_api_get_network_report+0x2d0>
 800bb5a:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 800bb5e:	b30e      	cbz	r6, 800bba4 <ai_platform_api_get_network_report+0x2d0>
 800bb60:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800bb64:	69b2      	ldr	r2, [r6, #24]
 800bb66:	f8d6 800c 	ldr.w	r8, [r6, #12]
 800bb6a:	6810      	ldr	r0, [r2, #0]
 800bb6c:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 800bb70:	68b3      	ldr	r3, [r6, #8]
 800bb72:	4454      	add	r4, sl
 800bb74:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 800bb78:	f7ff f87a 	bl	800ac70 <ai_array_to_buffer_fmt>
 800bb7c:	69b2      	ldr	r2, [r6, #24]
 800bb7e:	eb07 03c5 	add.w	r3, r7, r5, lsl #3
 800bb82:	ea4f 0ec5 	mov.w	lr, r5, lsl #3
 800bb86:	6891      	ldr	r1, [r2, #8]
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d0cb      	beq.n	800bb24 <ai_platform_api_get_network_report+0x250>
 800bb8c:	2200      	movs	r2, #0
 800bb8e:	f847 2035 	str.w	r2, [r7, r5, lsl #3]
 800bb92:	6832      	ldr	r2, [r6, #0]
 800bb94:	605a      	str	r2, [r3, #4]
 800bb96:	b112      	cbz	r2, 800bb9e <ai_platform_api_get_network_report+0x2ca>
 800bb98:	8852      	ldrh	r2, [r2, #2]
 800bb9a:	2a00      	cmp	r2, #0
 800bb9c:	d1be      	bne.n	800bb1c <ai_platform_api_get_network_report+0x248>
 800bb9e:	69b2      	ldr	r2, [r6, #24]
 800bba0:	2300      	movs	r3, #0
 800bba2:	e7bf      	b.n	800bb24 <ai_platform_api_get_network_report+0x250>
 800bba4:	9f03      	ldr	r7, [sp, #12]
 800bba6:	2a00      	cmp	r2, #0
 800bba8:	d068      	beq.n	800bc7c <ai_platform_api_get_network_report+0x3a8>
 800bbaa:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800bbae:	f107 0524 	add.w	r5, r7, #36	; 0x24
 800bbb2:	9901      	ldr	r1, [sp, #4]
 800bbb4:	685b      	ldr	r3, [r3, #4]
 800bbb6:	4628      	mov	r0, r5
 800bbb8:	864a      	strh	r2, [r1, #50]	; 0x32
 800bbba:	638b      	str	r3, [r1, #56]	; 0x38
 800bbbc:	f7ff f938 	bl	800ae30 <ai_buffer_array_sane>
 800bbc0:	9002      	str	r0, [sp, #8]
 800bbc2:	b960      	cbnz	r0, 800bbde <ai_platform_api_get_network_report+0x30a>
 800bbc4:	4628      	mov	r0, r5
 800bbc6:	f7ff f933 	bl	800ae30 <ai_buffer_array_sane>
 800bbca:	b140      	cbz	r0, 800bbde <ai_platform_api_get_network_report+0x30a>
 800bbcc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800bbce:	b133      	cbz	r3, 800bbde <ai_platform_api_get_network_report+0x30a>
 800bbd0:	2213      	movs	r2, #19
 800bbd2:	2111      	movs	r1, #17
 800bbd4:	f107 0010 	add.w	r0, r7, #16
 800bbd8:	f001 fc98 	bl	800d50c <core_set_error>
 800bbdc:	e752      	b.n	800ba84 <ai_platform_api_get_network_report+0x1b0>
 800bbde:	f107 061c 	add.w	r6, r7, #28
 800bbe2:	4630      	mov	r0, r6
 800bbe4:	f7ff f924 	bl	800ae30 <ai_buffer_array_sane>
 800bbe8:	9002      	str	r0, [sp, #8]
 800bbea:	b960      	cbnz	r0, 800bc06 <ai_platform_api_get_network_report+0x332>
 800bbec:	4630      	mov	r0, r6
 800bbee:	f7ff f91f 	bl	800ae30 <ai_buffer_array_sane>
 800bbf2:	b140      	cbz	r0, 800bc06 <ai_platform_api_get_network_report+0x332>
 800bbf4:	8bfb      	ldrh	r3, [r7, #30]
 800bbf6:	b133      	cbz	r3, 800bc06 <ai_platform_api_get_network_report+0x332>
 800bbf8:	2212      	movs	r2, #18
 800bbfa:	2111      	movs	r1, #17
 800bbfc:	f107 0010 	add.w	r0, r7, #16
 800bc00:	f001 fc84 	bl	800d50c <core_set_error>
 800bc04:	e73e      	b.n	800ba84 <ai_platform_api_get_network_report+0x1b0>
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	f46f 688a 	mvn.w	r8, #1104	; 0x450
 800bc0c:	9a01      	ldr	r2, [sp, #4]
 800bc0e:	6793      	str	r3, [r2, #120]	; 0x78
 800bc10:	f7ff f9ba 	bl	800af88 <_ai_platform_acquire_crc>
 800bc14:	4b87      	ldr	r3, [pc, #540]	; (800be34 <ai_platform_api_get_network_report+0x560>)
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bc1c:	eb03 0208 	add.w	r2, r3, r8
 800bc20:	2a01      	cmp	r2, #1
 800bc22:	d93d      	bls.n	800bca0 <ai_platform_api_get_network_report+0x3cc>
 800bc24:	f240 4249 	movw	r2, #1097	; 0x449
 800bc28:	4293      	cmp	r3, r2
 800bc2a:	d039      	beq.n	800bca0 <ai_platform_api_get_network_report+0x3cc>
 800bc2c:	4b82      	ldr	r3, [pc, #520]	; (800be38 <ai_platform_api_get_network_report+0x564>)
 800bc2e:	681a      	ldr	r2, [r3, #0]
 800bc30:	f3c2 020a 	ubfx	r2, r2, #0, #11
 800bc34:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 800bc38:	d03f      	beq.n	800bcba <ai_platform_api_get_network_report+0x3e6>
 800bc3a:	681a      	ldr	r2, [r3, #0]
 800bc3c:	f240 4183 	movw	r1, #1155	; 0x483
 800bc40:	f3c2 020a 	ubfx	r2, r2, #0, #11
 800bc44:	428a      	cmp	r2, r1
 800bc46:	f000 80e3 	beq.w	800be10 <ai_platform_api_get_network_report+0x53c>
 800bc4a:	681a      	ldr	r2, [r3, #0]
 800bc4c:	f3c2 020a 	ubfx	r2, r2, #0, #11
 800bc50:	f5b2 6f90 	cmp.w	r2, #1152	; 0x480
 800bc54:	f000 8148 	beq.w	800bee8 <ai_platform_api_get_network_report+0x614>
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d13c      	bne.n	800bcdc <ai_platform_api_get_network_report+0x408>
 800bc62:	4b76      	ldr	r3, [pc, #472]	; (800be3c <ai_platform_api_get_network_report+0x568>)
 800bc64:	2201      	movs	r2, #1
 800bc66:	609a      	str	r2, [r3, #8]
 800bc68:	689a      	ldr	r2, [r3, #8]
 800bc6a:	2a00      	cmp	r2, #0
 800bc6c:	d1fc      	bne.n	800bc68 <ai_platform_api_get_network_report+0x394>
 800bc6e:	4a74      	ldr	r2, [pc, #464]	; (800be40 <ai_platform_api_get_network_report+0x56c>)
 800bc70:	601a      	str	r2, [r3, #0]
 800bc72:	681a      	ldr	r2, [r3, #0]
 800bc74:	4b73      	ldr	r3, [pc, #460]	; (800be44 <ai_platform_api_get_network_report+0x570>)
 800bc76:	429a      	cmp	r2, r3
 800bc78:	d030      	beq.n	800bcdc <ai_platform_api_get_network_report+0x408>
 800bc7a:	e7fe      	b.n	800bc7a <ai_platform_api_get_network_report+0x3a6>
 800bc7c:	9901      	ldr	r1, [sp, #4]
 800bc7e:	2300      	movs	r3, #0
 800bc80:	2218      	movs	r2, #24
 800bc82:	f107 0010 	add.w	r0, r7, #16
 800bc86:	638b      	str	r3, [r1, #56]	; 0x38
 800bc88:	864b      	strh	r3, [r1, #50]	; 0x32
 800bc8a:	2113      	movs	r1, #19
 800bc8c:	f001 fc3e 	bl	800d50c <core_set_error>
 800bc90:	e6f8      	b.n	800ba84 <ai_platform_api_get_network_report+0x1b0>
 800bc92:	2218      	movs	r2, #24
 800bc94:	2111      	movs	r1, #17
 800bc96:	f107 0010 	add.w	r0, r7, #16
 800bc9a:	f001 fc37 	bl	800d50c <core_set_error>
 800bc9e:	e6f1      	b.n	800ba84 <ai_platform_api_get_network_report+0x1b0>
 800bca0:	4a66      	ldr	r2, [pc, #408]	; (800be3c <ai_platform_api_get_network_report+0x568>)
 800bca2:	2301      	movs	r3, #1
 800bca4:	6093      	str	r3, [r2, #8]
 800bca6:	6893      	ldr	r3, [r2, #8]
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d1fc      	bne.n	800bca6 <ai_platform_api_get_network_report+0x3d2>
 800bcac:	4b64      	ldr	r3, [pc, #400]	; (800be40 <ai_platform_api_get_network_report+0x56c>)
 800bcae:	6013      	str	r3, [r2, #0]
 800bcb0:	4b64      	ldr	r3, [pc, #400]	; (800be44 <ai_platform_api_get_network_report+0x570>)
 800bcb2:	6812      	ldr	r2, [r2, #0]
 800bcb4:	429a      	cmp	r2, r3
 800bcb6:	d011      	beq.n	800bcdc <ai_platform_api_get_network_report+0x408>
 800bcb8:	e7fe      	b.n	800bcb8 <ai_platform_api_get_network_report+0x3e4>
 800bcba:	4b63      	ldr	r3, [pc, #396]	; (800be48 <ai_platform_api_get_network_report+0x574>)
 800bcbc:	2201      	movs	r2, #1
 800bcbe:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 800bcc2:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 800bcc6:	2a00      	cmp	r2, #0
 800bcc8:	d1fb      	bne.n	800bcc2 <ai_platform_api_get_network_report+0x3ee>
 800bcca:	4a5d      	ldr	r2, [pc, #372]	; (800be40 <ai_platform_api_get_network_report+0x56c>)
 800bccc:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 800bcd0:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 800bcd4:	4b5b      	ldr	r3, [pc, #364]	; (800be44 <ai_platform_api_get_network_report+0x570>)
 800bcd6:	429a      	cmp	r2, r3
 800bcd8:	f040 8099 	bne.w	800be0e <ai_platform_api_get_network_report+0x53a>
 800bcdc:	f7ff f956 	bl	800af8c <_ai_platform_release_crc>
 800bce0:	4b5a      	ldr	r3, [pc, #360]	; (800be4c <ai_platform_api_get_network_report+0x578>)
 800bce2:	9a01      	ldr	r2, [sp, #4]
 800bce4:	6113      	str	r3, [r2, #16]
 800bce6:	f7ff f94f 	bl	800af88 <_ai_platform_acquire_crc>
 800bcea:	4b52      	ldr	r3, [pc, #328]	; (800be34 <ai_platform_api_get_network_report+0x560>)
 800bcec:	f46f 6e8a 	mvn.w	lr, #1104	; 0x450
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bcf6:	eb03 020e 	add.w	r2, r3, lr
 800bcfa:	2a01      	cmp	r2, #1
 800bcfc:	d92b      	bls.n	800bd56 <ai_platform_api_get_network_report+0x482>
 800bcfe:	f240 4249 	movw	r2, #1097	; 0x449
 800bd02:	4293      	cmp	r3, r2
 800bd04:	d027      	beq.n	800bd56 <ai_platform_api_get_network_report+0x482>
 800bd06:	4b4c      	ldr	r3, [pc, #304]	; (800be38 <ai_platform_api_get_network_report+0x564>)
 800bd08:	681a      	ldr	r2, [r3, #0]
 800bd0a:	f3c2 020a 	ubfx	r2, r2, #0, #11
 800bd0e:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 800bd12:	d02d      	beq.n	800bd70 <ai_platform_api_get_network_report+0x49c>
 800bd14:	681a      	ldr	r2, [r3, #0]
 800bd16:	f240 4183 	movw	r1, #1155	; 0x483
 800bd1a:	f3c2 020a 	ubfx	r2, r2, #0, #11
 800bd1e:	428a      	cmp	r2, r1
 800bd20:	f000 810f 	beq.w	800bf42 <ai_platform_api_get_network_report+0x66e>
 800bd24:	681a      	ldr	r2, [r3, #0]
 800bd26:	f3c2 020a 	ubfx	r2, r2, #0, #11
 800bd2a:	f5b2 6f90 	cmp.w	r2, #1152	; 0x480
 800bd2e:	f000 80fa 	beq.w	800bf26 <ai_platform_api_get_network_report+0x652>
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d12a      	bne.n	800bd92 <ai_platform_api_get_network_report+0x4be>
 800bd3c:	4b3f      	ldr	r3, [pc, #252]	; (800be3c <ai_platform_api_get_network_report+0x568>)
 800bd3e:	2201      	movs	r2, #1
 800bd40:	609a      	str	r2, [r3, #8]
 800bd42:	689a      	ldr	r2, [r3, #8]
 800bd44:	2a00      	cmp	r2, #0
 800bd46:	d1fc      	bne.n	800bd42 <ai_platform_api_get_network_report+0x46e>
 800bd48:	4a3d      	ldr	r2, [pc, #244]	; (800be40 <ai_platform_api_get_network_report+0x56c>)
 800bd4a:	601a      	str	r2, [r3, #0]
 800bd4c:	681a      	ldr	r2, [r3, #0]
 800bd4e:	4b3d      	ldr	r3, [pc, #244]	; (800be44 <ai_platform_api_get_network_report+0x570>)
 800bd50:	429a      	cmp	r2, r3
 800bd52:	d01e      	beq.n	800bd92 <ai_platform_api_get_network_report+0x4be>
 800bd54:	e7fe      	b.n	800bd54 <ai_platform_api_get_network_report+0x480>
 800bd56:	4a39      	ldr	r2, [pc, #228]	; (800be3c <ai_platform_api_get_network_report+0x568>)
 800bd58:	2301      	movs	r3, #1
 800bd5a:	6093      	str	r3, [r2, #8]
 800bd5c:	6893      	ldr	r3, [r2, #8]
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d1fc      	bne.n	800bd5c <ai_platform_api_get_network_report+0x488>
 800bd62:	4b37      	ldr	r3, [pc, #220]	; (800be40 <ai_platform_api_get_network_report+0x56c>)
 800bd64:	6013      	str	r3, [r2, #0]
 800bd66:	4b37      	ldr	r3, [pc, #220]	; (800be44 <ai_platform_api_get_network_report+0x570>)
 800bd68:	6812      	ldr	r2, [r2, #0]
 800bd6a:	429a      	cmp	r2, r3
 800bd6c:	d011      	beq.n	800bd92 <ai_platform_api_get_network_report+0x4be>
 800bd6e:	e7fe      	b.n	800bd6e <ai_platform_api_get_network_report+0x49a>
 800bd70:	4b35      	ldr	r3, [pc, #212]	; (800be48 <ai_platform_api_get_network_report+0x574>)
 800bd72:	2201      	movs	r2, #1
 800bd74:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 800bd78:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 800bd7c:	2a00      	cmp	r2, #0
 800bd7e:	d1fb      	bne.n	800bd78 <ai_platform_api_get_network_report+0x4a4>
 800bd80:	4a2f      	ldr	r2, [pc, #188]	; (800be40 <ai_platform_api_get_network_report+0x56c>)
 800bd82:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 800bd86:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 800bd8a:	4b2e      	ldr	r3, [pc, #184]	; (800be44 <ai_platform_api_get_network_report+0x570>)
 800bd8c:	429a      	cmp	r2, r3
 800bd8e:	f040 80aa 	bne.w	800bee6 <ai_platform_api_get_network_report+0x612>
 800bd92:	f7ff f8fb 	bl	800af8c <_ai_platform_release_crc>
 800bd96:	2308      	movs	r3, #8
 800bd98:	9a01      	ldr	r2, [sp, #4]
 800bd9a:	6153      	str	r3, [r2, #20]
 800bd9c:	f7ff f8f4 	bl	800af88 <_ai_platform_acquire_crc>
 800bda0:	4b24      	ldr	r3, [pc, #144]	; (800be34 <ai_platform_api_get_network_report+0x560>)
 800bda2:	f46f 6c8a 	mvn.w	ip, #1104	; 0x450
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bdac:	eb03 020c 	add.w	r2, r3, ip
 800bdb0:	2a01      	cmp	r2, #1
 800bdb2:	d94d      	bls.n	800be50 <ai_platform_api_get_network_report+0x57c>
 800bdb4:	f240 4249 	movw	r2, #1097	; 0x449
 800bdb8:	4293      	cmp	r3, r2
 800bdba:	d049      	beq.n	800be50 <ai_platform_api_get_network_report+0x57c>
 800bdbc:	4b1e      	ldr	r3, [pc, #120]	; (800be38 <ai_platform_api_get_network_report+0x564>)
 800bdbe:	681a      	ldr	r2, [r3, #0]
 800bdc0:	f3c2 020a 	ubfx	r2, r2, #0, #11
 800bdc4:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 800bdc8:	f000 809c 	beq.w	800bf04 <ai_platform_api_get_network_report+0x630>
 800bdcc:	681a      	ldr	r2, [r3, #0]
 800bdce:	f240 4183 	movw	r1, #1155	; 0x483
 800bdd2:	f3c2 020a 	ubfx	r2, r2, #0, #11
 800bdd6:	428a      	cmp	r2, r1
 800bdd8:	f000 80fd 	beq.w	800bfd6 <ai_platform_api_get_network_report+0x702>
 800bddc:	681a      	ldr	r2, [r3, #0]
 800bdde:	f3c2 020a 	ubfx	r2, r2, #0, #11
 800bde2:	f5b2 6f90 	cmp.w	r2, #1152	; 0x480
 800bde6:	f000 80e8 	beq.w	800bfba <ai_platform_api_get_network_report+0x6e6>
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d139      	bne.n	800be68 <ai_platform_api_get_network_report+0x594>
 800bdf4:	4b11      	ldr	r3, [pc, #68]	; (800be3c <ai_platform_api_get_network_report+0x568>)
 800bdf6:	2201      	movs	r2, #1
 800bdf8:	609a      	str	r2, [r3, #8]
 800bdfa:	689a      	ldr	r2, [r3, #8]
 800bdfc:	2a00      	cmp	r2, #0
 800bdfe:	d1fc      	bne.n	800bdfa <ai_platform_api_get_network_report+0x526>
 800be00:	4a0f      	ldr	r2, [pc, #60]	; (800be40 <ai_platform_api_get_network_report+0x56c>)
 800be02:	601a      	str	r2, [r3, #0]
 800be04:	681a      	ldr	r2, [r3, #0]
 800be06:	4b0f      	ldr	r3, [pc, #60]	; (800be44 <ai_platform_api_get_network_report+0x570>)
 800be08:	429a      	cmp	r2, r3
 800be0a:	d02d      	beq.n	800be68 <ai_platform_api_get_network_report+0x594>
 800be0c:	e7fe      	b.n	800be0c <ai_platform_api_get_network_report+0x538>
 800be0e:	e7fe      	b.n	800be0e <ai_platform_api_get_network_report+0x53a>
 800be10:	4b0d      	ldr	r3, [pc, #52]	; (800be48 <ai_platform_api_get_network_report+0x574>)
 800be12:	2201      	movs	r2, #1
 800be14:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 800be18:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 800be1c:	2a00      	cmp	r2, #0
 800be1e:	d1fb      	bne.n	800be18 <ai_platform_api_get_network_report+0x544>
 800be20:	4a07      	ldr	r2, [pc, #28]	; (800be40 <ai_platform_api_get_network_report+0x56c>)
 800be22:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 800be26:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 800be2a:	4b06      	ldr	r3, [pc, #24]	; (800be44 <ai_platform_api_get_network_report+0x570>)
 800be2c:	429a      	cmp	r2, r3
 800be2e:	f43f af55 	beq.w	800bcdc <ai_platform_api_get_network_report+0x408>
 800be32:	e7fe      	b.n	800be32 <ai_platform_api_get_network_report+0x55e>
 800be34:	e0042000 	.word	0xe0042000
 800be38:	5c001000 	.word	0x5c001000
 800be3c:	40023000 	.word	0x40023000
 800be40:	f407a5c2 	.word	0xf407a5c2
 800be44:	b5e8b5cd 	.word	0xb5e8b5cd
 800be48:	58024000 	.word	0x58024000
 800be4c:	080168dc 	.word	0x080168dc
 800be50:	4ba5      	ldr	r3, [pc, #660]	; (800c0e8 <ai_platform_api_get_network_report+0x814>)
 800be52:	2201      	movs	r2, #1
 800be54:	609a      	str	r2, [r3, #8]
 800be56:	689a      	ldr	r2, [r3, #8]
 800be58:	2a00      	cmp	r2, #0
 800be5a:	d1fc      	bne.n	800be56 <ai_platform_api_get_network_report+0x582>
 800be5c:	4aa3      	ldr	r2, [pc, #652]	; (800c0ec <ai_platform_api_get_network_report+0x818>)
 800be5e:	601a      	str	r2, [r3, #0]
 800be60:	681a      	ldr	r2, [r3, #0]
 800be62:	4ba3      	ldr	r3, [pc, #652]	; (800c0f0 <ai_platform_api_get_network_report+0x81c>)
 800be64:	429a      	cmp	r2, r3
 800be66:	d13d      	bne.n	800bee4 <ai_platform_api_get_network_report+0x610>
 800be68:	f7ff f890 	bl	800af8c <_ai_platform_release_crc>
 800be6c:	f240 2301 	movw	r3, #513	; 0x201
 800be70:	9a01      	ldr	r2, [sp, #4]
 800be72:	f46f 648a 	mvn.w	r4, #1104	; 0x450
 800be76:	6253      	str	r3, [r2, #36]	; 0x24
 800be78:	f7ff f886 	bl	800af88 <_ai_platform_acquire_crc>
 800be7c:	4b9d      	ldr	r3, [pc, #628]	; (800c0f4 <ai_platform_api_get_network_report+0x820>)
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800be84:	191a      	adds	r2, r3, r4
 800be86:	2a01      	cmp	r2, #1
 800be88:	d96d      	bls.n	800bf66 <ai_platform_api_get_network_report+0x692>
 800be8a:	f240 4249 	movw	r2, #1097	; 0x449
 800be8e:	4293      	cmp	r3, r2
 800be90:	d069      	beq.n	800bf66 <ai_platform_api_get_network_report+0x692>
 800be92:	4b99      	ldr	r3, [pc, #612]	; (800c0f8 <ai_platform_api_get_network_report+0x824>)
 800be94:	681a      	ldr	r2, [r3, #0]
 800be96:	f3c2 020a 	ubfx	r2, r2, #0, #11
 800be9a:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 800be9e:	f000 80ca 	beq.w	800c036 <ai_platform_api_get_network_report+0x762>
 800bea2:	681a      	ldr	r2, [r3, #0]
 800bea4:	f240 4183 	movw	r1, #1155	; 0x483
 800bea8:	f3c2 020a 	ubfx	r2, r2, #0, #11
 800beac:	428a      	cmp	r2, r1
 800beae:	f000 80b1 	beq.w	800c014 <ai_platform_api_get_network_report+0x740>
 800beb2:	681a      	ldr	r2, [r3, #0]
 800beb4:	f3c2 020a 	ubfx	r2, r2, #0, #11
 800beb8:	f5b2 6f90 	cmp.w	r2, #1152	; 0x480
 800bebc:	f000 809d 	beq.w	800bffa <ai_platform_api_get_network_report+0x726>
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d159      	bne.n	800bf7e <ai_platform_api_get_network_report+0x6aa>
 800beca:	4b87      	ldr	r3, [pc, #540]	; (800c0e8 <ai_platform_api_get_network_report+0x814>)
 800becc:	2201      	movs	r2, #1
 800bece:	609a      	str	r2, [r3, #8]
 800bed0:	689a      	ldr	r2, [r3, #8]
 800bed2:	2a00      	cmp	r2, #0
 800bed4:	d1fc      	bne.n	800bed0 <ai_platform_api_get_network_report+0x5fc>
 800bed6:	4a85      	ldr	r2, [pc, #532]	; (800c0ec <ai_platform_api_get_network_report+0x818>)
 800bed8:	601a      	str	r2, [r3, #0]
 800beda:	681a      	ldr	r2, [r3, #0]
 800bedc:	4b84      	ldr	r3, [pc, #528]	; (800c0f0 <ai_platform_api_get_network_report+0x81c>)
 800bede:	429a      	cmp	r2, r3
 800bee0:	d04d      	beq.n	800bf7e <ai_platform_api_get_network_report+0x6aa>
 800bee2:	e7fe      	b.n	800bee2 <ai_platform_api_get_network_report+0x60e>
 800bee4:	e7fe      	b.n	800bee4 <ai_platform_api_get_network_report+0x610>
 800bee6:	e7fe      	b.n	800bee6 <ai_platform_api_get_network_report+0x612>
 800bee8:	4b7f      	ldr	r3, [pc, #508]	; (800c0e8 <ai_platform_api_get_network_report+0x814>)
 800beea:	2201      	movs	r2, #1
 800beec:	609a      	str	r2, [r3, #8]
 800beee:	689a      	ldr	r2, [r3, #8]
 800bef0:	2a00      	cmp	r2, #0
 800bef2:	d1fc      	bne.n	800beee <ai_platform_api_get_network_report+0x61a>
 800bef4:	4a7d      	ldr	r2, [pc, #500]	; (800c0ec <ai_platform_api_get_network_report+0x818>)
 800bef6:	601a      	str	r2, [r3, #0]
 800bef8:	681a      	ldr	r2, [r3, #0]
 800befa:	4b7d      	ldr	r3, [pc, #500]	; (800c0f0 <ai_platform_api_get_network_report+0x81c>)
 800befc:	429a      	cmp	r2, r3
 800befe:	f43f aeed 	beq.w	800bcdc <ai_platform_api_get_network_report+0x408>
 800bf02:	e7fe      	b.n	800bf02 <ai_platform_api_get_network_report+0x62e>
 800bf04:	4b7d      	ldr	r3, [pc, #500]	; (800c0fc <ai_platform_api_get_network_report+0x828>)
 800bf06:	2201      	movs	r2, #1
 800bf08:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 800bf0c:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 800bf10:	2a00      	cmp	r2, #0
 800bf12:	d1fb      	bne.n	800bf0c <ai_platform_api_get_network_report+0x638>
 800bf14:	4a75      	ldr	r2, [pc, #468]	; (800c0ec <ai_platform_api_get_network_report+0x818>)
 800bf16:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 800bf1a:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 800bf1e:	4b74      	ldr	r3, [pc, #464]	; (800c0f0 <ai_platform_api_get_network_report+0x81c>)
 800bf20:	429a      	cmp	r2, r3
 800bf22:	d0a1      	beq.n	800be68 <ai_platform_api_get_network_report+0x594>
 800bf24:	e7fe      	b.n	800bf24 <ai_platform_api_get_network_report+0x650>
 800bf26:	4b70      	ldr	r3, [pc, #448]	; (800c0e8 <ai_platform_api_get_network_report+0x814>)
 800bf28:	2201      	movs	r2, #1
 800bf2a:	609a      	str	r2, [r3, #8]
 800bf2c:	689a      	ldr	r2, [r3, #8]
 800bf2e:	2a00      	cmp	r2, #0
 800bf30:	d1fc      	bne.n	800bf2c <ai_platform_api_get_network_report+0x658>
 800bf32:	4a6e      	ldr	r2, [pc, #440]	; (800c0ec <ai_platform_api_get_network_report+0x818>)
 800bf34:	601a      	str	r2, [r3, #0]
 800bf36:	681a      	ldr	r2, [r3, #0]
 800bf38:	4b6d      	ldr	r3, [pc, #436]	; (800c0f0 <ai_platform_api_get_network_report+0x81c>)
 800bf3a:	429a      	cmp	r2, r3
 800bf3c:	f43f af29 	beq.w	800bd92 <ai_platform_api_get_network_report+0x4be>
 800bf40:	e7fe      	b.n	800bf40 <ai_platform_api_get_network_report+0x66c>
 800bf42:	4b6e      	ldr	r3, [pc, #440]	; (800c0fc <ai_platform_api_get_network_report+0x828>)
 800bf44:	2201      	movs	r2, #1
 800bf46:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 800bf4a:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 800bf4e:	2a00      	cmp	r2, #0
 800bf50:	d1fb      	bne.n	800bf4a <ai_platform_api_get_network_report+0x676>
 800bf52:	4a66      	ldr	r2, [pc, #408]	; (800c0ec <ai_platform_api_get_network_report+0x818>)
 800bf54:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 800bf58:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 800bf5c:	4b64      	ldr	r3, [pc, #400]	; (800c0f0 <ai_platform_api_get_network_report+0x81c>)
 800bf5e:	429a      	cmp	r2, r3
 800bf60:	f43f af17 	beq.w	800bd92 <ai_platform_api_get_network_report+0x4be>
 800bf64:	e7fe      	b.n	800bf64 <ai_platform_api_get_network_report+0x690>
 800bf66:	4b60      	ldr	r3, [pc, #384]	; (800c0e8 <ai_platform_api_get_network_report+0x814>)
 800bf68:	2201      	movs	r2, #1
 800bf6a:	609a      	str	r2, [r3, #8]
 800bf6c:	689a      	ldr	r2, [r3, #8]
 800bf6e:	2a00      	cmp	r2, #0
 800bf70:	d1fc      	bne.n	800bf6c <ai_platform_api_get_network_report+0x698>
 800bf72:	4a5e      	ldr	r2, [pc, #376]	; (800c0ec <ai_platform_api_get_network_report+0x818>)
 800bf74:	601a      	str	r2, [r3, #0]
 800bf76:	681a      	ldr	r2, [r3, #0]
 800bf78:	4b5d      	ldr	r3, [pc, #372]	; (800c0f0 <ai_platform_api_get_network_report+0x81c>)
 800bf7a:	429a      	cmp	r2, r3
 800bf7c:	d11c      	bne.n	800bfb8 <ai_platform_api_get_network_report+0x6e4>
 800bf7e:	f7ff f805 	bl	800af8c <_ai_platform_release_crc>
 800bf82:	9c01      	ldr	r4, [sp, #4]
 800bf84:	f240 5301 	movw	r3, #1281	; 0x501
 800bf88:	62a3      	str	r3, [r4, #40]	; 0x28
 800bf8a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800bf8c:	f7fe fe34 	bl	800abf8 <ai_platform_version_get>
 800bf90:	4b5b      	ldr	r3, [pc, #364]	; (800c100 <ai_platform_api_get_network_report+0x82c>)
 800bf92:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800bf94:	6220      	str	r0, [r4, #32]
 800bf96:	429a      	cmp	r2, r3
 800bf98:	d15e      	bne.n	800c058 <ai_platform_api_get_network_report+0x784>
 800bf9a:	f104 0248 	add.w	r2, r4, #72	; 0x48
 800bf9e:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800bfa2:	e895 0003 	ldmia.w	r5, {r0, r1}
 800bfa6:	e882 0003 	stmia.w	r2, {r0, r1}
 800bfaa:	2201      	movs	r2, #1
 800bfac:	e896 0003 	ldmia.w	r6, {r0, r1}
 800bfb0:	9202      	str	r2, [sp, #8]
 800bfb2:	e883 0003 	stmia.w	r3, {r0, r1}
 800bfb6:	e565      	b.n	800ba84 <ai_platform_api_get_network_report+0x1b0>
 800bfb8:	e7fe      	b.n	800bfb8 <ai_platform_api_get_network_report+0x6e4>
 800bfba:	4b4b      	ldr	r3, [pc, #300]	; (800c0e8 <ai_platform_api_get_network_report+0x814>)
 800bfbc:	2201      	movs	r2, #1
 800bfbe:	609a      	str	r2, [r3, #8]
 800bfc0:	689a      	ldr	r2, [r3, #8]
 800bfc2:	2a00      	cmp	r2, #0
 800bfc4:	d1fc      	bne.n	800bfc0 <ai_platform_api_get_network_report+0x6ec>
 800bfc6:	4a49      	ldr	r2, [pc, #292]	; (800c0ec <ai_platform_api_get_network_report+0x818>)
 800bfc8:	601a      	str	r2, [r3, #0]
 800bfca:	681a      	ldr	r2, [r3, #0]
 800bfcc:	4b48      	ldr	r3, [pc, #288]	; (800c0f0 <ai_platform_api_get_network_report+0x81c>)
 800bfce:	429a      	cmp	r2, r3
 800bfd0:	f43f af4a 	beq.w	800be68 <ai_platform_api_get_network_report+0x594>
 800bfd4:	e7fe      	b.n	800bfd4 <ai_platform_api_get_network_report+0x700>
 800bfd6:	4b49      	ldr	r3, [pc, #292]	; (800c0fc <ai_platform_api_get_network_report+0x828>)
 800bfd8:	2201      	movs	r2, #1
 800bfda:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 800bfde:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 800bfe2:	2a00      	cmp	r2, #0
 800bfe4:	d1fb      	bne.n	800bfde <ai_platform_api_get_network_report+0x70a>
 800bfe6:	4a41      	ldr	r2, [pc, #260]	; (800c0ec <ai_platform_api_get_network_report+0x818>)
 800bfe8:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 800bfec:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 800bff0:	4b3f      	ldr	r3, [pc, #252]	; (800c0f0 <ai_platform_api_get_network_report+0x81c>)
 800bff2:	429a      	cmp	r2, r3
 800bff4:	f43f af38 	beq.w	800be68 <ai_platform_api_get_network_report+0x594>
 800bff8:	e7fe      	b.n	800bff8 <ai_platform_api_get_network_report+0x724>
 800bffa:	4b3b      	ldr	r3, [pc, #236]	; (800c0e8 <ai_platform_api_get_network_report+0x814>)
 800bffc:	2201      	movs	r2, #1
 800bffe:	609a      	str	r2, [r3, #8]
 800c000:	689a      	ldr	r2, [r3, #8]
 800c002:	2a00      	cmp	r2, #0
 800c004:	d1fc      	bne.n	800c000 <ai_platform_api_get_network_report+0x72c>
 800c006:	4a39      	ldr	r2, [pc, #228]	; (800c0ec <ai_platform_api_get_network_report+0x818>)
 800c008:	601a      	str	r2, [r3, #0]
 800c00a:	681a      	ldr	r2, [r3, #0]
 800c00c:	4b38      	ldr	r3, [pc, #224]	; (800c0f0 <ai_platform_api_get_network_report+0x81c>)
 800c00e:	429a      	cmp	r2, r3
 800c010:	d0b5      	beq.n	800bf7e <ai_platform_api_get_network_report+0x6aa>
 800c012:	e7fe      	b.n	800c012 <ai_platform_api_get_network_report+0x73e>
 800c014:	4b39      	ldr	r3, [pc, #228]	; (800c0fc <ai_platform_api_get_network_report+0x828>)
 800c016:	2201      	movs	r2, #1
 800c018:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 800c01c:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 800c020:	2a00      	cmp	r2, #0
 800c022:	d1fb      	bne.n	800c01c <ai_platform_api_get_network_report+0x748>
 800c024:	4a31      	ldr	r2, [pc, #196]	; (800c0ec <ai_platform_api_get_network_report+0x818>)
 800c026:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 800c02a:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 800c02e:	4b30      	ldr	r3, [pc, #192]	; (800c0f0 <ai_platform_api_get_network_report+0x81c>)
 800c030:	429a      	cmp	r2, r3
 800c032:	d0a4      	beq.n	800bf7e <ai_platform_api_get_network_report+0x6aa>
 800c034:	e7fe      	b.n	800c034 <ai_platform_api_get_network_report+0x760>
 800c036:	4b31      	ldr	r3, [pc, #196]	; (800c0fc <ai_platform_api_get_network_report+0x828>)
 800c038:	2201      	movs	r2, #1
 800c03a:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 800c03e:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 800c042:	2a00      	cmp	r2, #0
 800c044:	d1fb      	bne.n	800c03e <ai_platform_api_get_network_report+0x76a>
 800c046:	4a29      	ldr	r2, [pc, #164]	; (800c0ec <ai_platform_api_get_network_report+0x818>)
 800c048:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 800c04c:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 800c050:	4b27      	ldr	r3, [pc, #156]	; (800c0f0 <ai_platform_api_get_network_report+0x81c>)
 800c052:	429a      	cmp	r2, r3
 800c054:	d093      	beq.n	800bf7e <ai_platform_api_get_network_report+0x6aa>
 800c056:	e7fe      	b.n	800c056 <ai_platform_api_get_network_report+0x782>
 800c058:	9901      	ldr	r1, [sp, #4]
 800c05a:	2200      	movs	r2, #0
 800c05c:	f10d 0910 	add.w	r9, sp, #16
 800c060:	4b28      	ldr	r3, [pc, #160]	; (800c104 <ai_platform_api_get_network_report+0x830>)
 800c062:	f101 043c 	add.w	r4, r1, #60	; 0x3c
 800c066:	f101 0858 	add.w	r8, r1, #88	; 0x58
 800c06a:	f8c1 9054 	str.w	r9, [r1, #84]	; 0x54
 800c06e:	46a6      	mov	lr, r4
 800c070:	46c4      	mov	ip, r8
 800c072:	e9c1 2210 	strd	r2, r2, [r1, #64]	; 0x40
 800c076:	e9c1 2212 	strd	r2, r2, [r1, #72]	; 0x48
 800c07a:	4a23      	ldr	r2, [pc, #140]	; (800c108 <ai_platform_api_get_network_report+0x834>)
 800c07c:	63ca      	str	r2, [r1, #60]	; 0x3c
 800c07e:	f240 4201 	movw	r2, #1025	; 0x401
 800c082:	650a      	str	r2, [r1, #80]	; 0x50
 800c084:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c086:	e889 000f 	stmia.w	r9, {r0, r1, r2, r3}
 800c08a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c08e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c092:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 800c096:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 800c09a:	4628      	mov	r0, r5
 800c09c:	f7fe fec8 	bl	800ae30 <ai_buffer_array_sane>
 800c0a0:	b990      	cbnz	r0, 800c0c8 <ai_platform_api_get_network_report+0x7f4>
 800c0a2:	4630      	mov	r0, r6
 800c0a4:	f7fe fec4 	bl	800ae30 <ai_buffer_array_sane>
 800c0a8:	b910      	cbnz	r0, 800c0b0 <ai_platform_api_get_network_report+0x7dc>
 800c0aa:	2301      	movs	r3, #1
 800c0ac:	9302      	str	r3, [sp, #8]
 800c0ae:	e4e9      	b.n	800ba84 <ai_platform_api_get_network_report+0x1b0>
 800c0b0:	4630      	mov	r0, r6
 800c0b2:	f7fe febd 	bl	800ae30 <ai_buffer_array_sane>
 800c0b6:	b348      	cbz	r0, 800c10c <ai_platform_api_get_network_report+0x838>
 800c0b8:	6a3d      	ldr	r5, [r7, #32]
 800c0ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c0bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c0be:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800c0c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800c0c6:	e7f0      	b.n	800c0aa <ai_platform_api_get_network_report+0x7d6>
 800c0c8:	4628      	mov	r0, r5
 800c0ca:	f7fe feb1 	bl	800ae30 <ai_buffer_array_sane>
 800c0ce:	b328      	cbz	r0, 800c11c <ai_platform_api_get_network_report+0x848>
 800c0d0:	f8d7 c028 	ldr.w	ip, [r7, #40]	; 0x28
 800c0d4:	4645      	mov	r5, r8
 800c0d6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c0da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c0dc:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 800c0e0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800c0e4:	e7dd      	b.n	800c0a2 <ai_platform_api_get_network_report+0x7ce>
 800c0e6:	bf00      	nop
 800c0e8:	40023000 	.word	0x40023000
 800c0ec:	f407a5c2 	.word	0xf407a5c2
 800c0f0:	b5e8b5cd 	.word	0xb5e8b5cd
 800c0f4:	e0042000 	.word	0xe0042000
 800c0f8:	5c001000 	.word	0x5c001000
 800c0fc:	58024000 	.word	0x58024000
 800c100:	a1facade 	.word	0xa1facade
 800c104:	08015a78 	.word	0x08015a78
 800c108:	00040440 	.word	0x00040440
 800c10c:	4605      	mov	r5, r0
 800c10e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c110:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c112:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800c116:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800c11a:	deff      	udf	#255	; 0xff
 800c11c:	4604      	mov	r4, r0
 800c11e:	4645      	mov	r5, r8
 800c120:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c122:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c124:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800c128:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800c12c:	deff      	udf	#255	; 0xff
 800c12e:	bf00      	nop

0800c130 <ai_platform_network_create>:
 800c130:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c134:	b083      	sub	sp, #12
 800c136:	4604      	mov	r4, r0
 800c138:	4615      	mov	r5, r2
 800c13a:	461e      	mov	r6, r3
 800c13c:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 800c140:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 800c144:	f7fe ff20 	bl	800af88 <_ai_platform_acquire_crc>
 800c148:	2800      	cmp	r0, #0
 800c14a:	f000 80bd 	beq.w	800c2c8 <ai_platform_network_create+0x198>
 800c14e:	4ba5      	ldr	r3, [pc, #660]	; (800c3e4 <ai_platform_network_create+0x2b4>)
 800c150:	f46f 6c8a 	mvn.w	ip, #1104	; 0x450
 800c154:	4601      	mov	r1, r0
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c15c:	eb03 020c 	add.w	r2, r3, ip
 800c160:	2a01      	cmp	r2, #1
 800c162:	f240 80a8 	bls.w	800c2b6 <ai_platform_network_create+0x186>
 800c166:	f240 4249 	movw	r2, #1097	; 0x449
 800c16a:	4293      	cmp	r3, r2
 800c16c:	f000 80a3 	beq.w	800c2b6 <ai_platform_network_create+0x186>
 800c170:	4a9d      	ldr	r2, [pc, #628]	; (800c3e8 <ai_platform_network_create+0x2b8>)
 800c172:	6813      	ldr	r3, [r2, #0]
 800c174:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c178:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800c17c:	f000 80b9 	beq.w	800c2f2 <ai_platform_network_create+0x1c2>
 800c180:	6813      	ldr	r3, [r2, #0]
 800c182:	f240 4c83 	movw	ip, #1155	; 0x483
 800c186:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c18a:	4563      	cmp	r3, ip
 800c18c:	f000 80a1 	beq.w	800c2d2 <ai_platform_network_create+0x1a2>
 800c190:	6813      	ldr	r3, [r2, #0]
 800c192:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c196:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800c19a:	f000 8153 	beq.w	800c444 <ai_platform_network_create+0x314>
 800c19e:	6813      	ldr	r3, [r2, #0]
 800c1a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	f040 808d 	bne.w	800c2c4 <ai_platform_network_create+0x194>
 800c1aa:	4a90      	ldr	r2, [pc, #576]	; (800c3ec <ai_platform_network_create+0x2bc>)
 800c1ac:	2318      	movs	r3, #24
 800c1ae:	6093      	str	r3, [r2, #8]
 800c1b0:	6893      	ldr	r3, [r2, #8]
 800c1b2:	2b18      	cmp	r3, #24
 800c1b4:	f040 8086 	bne.w	800c2c4 <ai_platform_network_create+0x194>
 800c1b8:	2301      	movs	r3, #1
 800c1ba:	6093      	str	r3, [r2, #8]
 800c1bc:	6893      	ldr	r3, [r2, #8]
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d1fc      	bne.n	800c1bc <ai_platform_network_create+0x8c>
 800c1c2:	4608      	mov	r0, r1
 800c1c4:	f7fe fee2 	bl	800af8c <_ai_platform_release_crc>
 800c1c8:	f7fe fede 	bl	800af88 <_ai_platform_acquire_crc>
 800c1cc:	4b85      	ldr	r3, [pc, #532]	; (800c3e4 <ai_platform_network_create+0x2b4>)
 800c1ce:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c1d8:	189a      	adds	r2, r3, r2
 800c1da:	2a01      	cmp	r2, #1
 800c1dc:	f240 809f 	bls.w	800c31e <ai_platform_network_create+0x1ee>
 800c1e0:	f240 4249 	movw	r2, #1097	; 0x449
 800c1e4:	4293      	cmp	r3, r2
 800c1e6:	f000 809a 	beq.w	800c31e <ai_platform_network_create+0x1ee>
 800c1ea:	4a7f      	ldr	r2, [pc, #508]	; (800c3e8 <ai_platform_network_create+0x2b8>)
 800c1ec:	6813      	ldr	r3, [r2, #0]
 800c1ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c1f2:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800c1f6:	f000 80a0 	beq.w	800c33a <ai_platform_network_create+0x20a>
 800c1fa:	6813      	ldr	r3, [r2, #0]
 800c1fc:	f240 4183 	movw	r1, #1155	; 0x483
 800c200:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c204:	428b      	cmp	r3, r1
 800c206:	f000 80bf 	beq.w	800c388 <ai_platform_network_create+0x258>
 800c20a:	6813      	ldr	r3, [r2, #0]
 800c20c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c210:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800c214:	f000 8123 	beq.w	800c45e <ai_platform_network_create+0x32e>
 800c218:	6813      	ldr	r3, [r2, #0]
 800c21a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c21e:	2b00      	cmp	r3, #0
 800c220:	f000 80c4 	beq.w	800c3ac <ai_platform_network_create+0x27c>
 800c224:	f7fe feb2 	bl	800af8c <_ai_platform_release_crc>
 800c228:	2c00      	cmp	r4, #0
 800c22a:	f000 80aa 	beq.w	800c382 <ai_platform_network_create+0x252>
 800c22e:	4b70      	ldr	r3, [pc, #448]	; (800c3f0 <ai_platform_network_create+0x2c0>)
 800c230:	602b      	str	r3, [r5, #0]
 800c232:	6025      	str	r5, [r4, #0]
 800c234:	f001 f962 	bl	800d4fc <core_init>
 800c238:	2800      	cmp	r0, #0
 800c23a:	f000 8090 	beq.w	800c35e <ai_platform_network_create+0x22e>
 800c23e:	f7fe fea3 	bl	800af88 <_ai_platform_acquire_crc>
 800c242:	4b68      	ldr	r3, [pc, #416]	; (800c3e4 <ai_platform_network_create+0x2b4>)
 800c244:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c24e:	185a      	adds	r2, r3, r1
 800c250:	2a01      	cmp	r2, #1
 800c252:	f240 80b9 	bls.w	800c3c8 <ai_platform_network_create+0x298>
 800c256:	f240 4249 	movw	r2, #1097	; 0x449
 800c25a:	4293      	cmp	r3, r2
 800c25c:	f000 80b4 	beq.w	800c3c8 <ai_platform_network_create+0x298>
 800c260:	4a61      	ldr	r2, [pc, #388]	; (800c3e8 <ai_platform_network_create+0x2b8>)
 800c262:	6813      	ldr	r3, [r2, #0]
 800c264:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c268:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800c26c:	f000 80c8 	beq.w	800c400 <ai_platform_network_create+0x2d0>
 800c270:	6813      	ldr	r3, [r2, #0]
 800c272:	f240 4183 	movw	r1, #1155	; 0x483
 800c276:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c27a:	428b      	cmp	r3, r1
 800c27c:	f000 8107 	beq.w	800c48e <ai_platform_network_create+0x35e>
 800c280:	6813      	ldr	r3, [r2, #0]
 800c282:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c286:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800c28a:	f000 8111 	beq.w	800c4b0 <ai_platform_network_create+0x380>
 800c28e:	6813      	ldr	r3, [r2, #0]
 800c290:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c294:	2b00      	cmp	r3, #0
 800c296:	f040 80c3 	bne.w	800c420 <ai_platform_network_create+0x2f0>
 800c29a:	4b54      	ldr	r3, [pc, #336]	; (800c3ec <ai_platform_network_create+0x2bc>)
 800c29c:	2201      	movs	r2, #1
 800c29e:	609a      	str	r2, [r3, #8]
 800c2a0:	689a      	ldr	r2, [r3, #8]
 800c2a2:	2a00      	cmp	r2, #0
 800c2a4:	d1fc      	bne.n	800c2a0 <ai_platform_network_create+0x170>
 800c2a6:	4a53      	ldr	r2, [pc, #332]	; (800c3f4 <ai_platform_network_create+0x2c4>)
 800c2a8:	601a      	str	r2, [r3, #0]
 800c2aa:	681a      	ldr	r2, [r3, #0]
 800c2ac:	4b52      	ldr	r3, [pc, #328]	; (800c3f8 <ai_platform_network_create+0x2c8>)
 800c2ae:	429a      	cmp	r2, r3
 800c2b0:	f000 80b6 	beq.w	800c420 <ai_platform_network_create+0x2f0>
 800c2b4:	e7fe      	b.n	800c2b4 <ai_platform_network_create+0x184>
 800c2b6:	4b4d      	ldr	r3, [pc, #308]	; (800c3ec <ai_platform_network_create+0x2bc>)
 800c2b8:	2218      	movs	r2, #24
 800c2ba:	609a      	str	r2, [r3, #8]
 800c2bc:	689a      	ldr	r2, [r3, #8]
 800c2be:	2a18      	cmp	r2, #24
 800c2c0:	d027      	beq.n	800c312 <ai_platform_network_create+0x1e2>
 800c2c2:	4608      	mov	r0, r1
 800c2c4:	f7fe fe62 	bl	800af8c <_ai_platform_release_crc>
 800c2c8:	f244 1033 	movw	r0, #16691	; 0x4133
 800c2cc:	b003      	add	sp, #12
 800c2ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c2d2:	4a4a      	ldr	r2, [pc, #296]	; (800c3fc <ai_platform_network_create+0x2cc>)
 800c2d4:	2318      	movs	r3, #24
 800c2d6:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800c2da:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800c2de:	2b18      	cmp	r3, #24
 800c2e0:	d1f0      	bne.n	800c2c4 <ai_platform_network_create+0x194>
 800c2e2:	2301      	movs	r3, #1
 800c2e4:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800c2e8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d1fb      	bne.n	800c2e8 <ai_platform_network_create+0x1b8>
 800c2f0:	e767      	b.n	800c1c2 <ai_platform_network_create+0x92>
 800c2f2:	4a42      	ldr	r2, [pc, #264]	; (800c3fc <ai_platform_network_create+0x2cc>)
 800c2f4:	2318      	movs	r3, #24
 800c2f6:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800c2fa:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800c2fe:	2b18      	cmp	r3, #24
 800c300:	d1e0      	bne.n	800c2c4 <ai_platform_network_create+0x194>
 800c302:	2301      	movs	r3, #1
 800c304:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800c308:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d1fb      	bne.n	800c308 <ai_platform_network_create+0x1d8>
 800c310:	e757      	b.n	800c1c2 <ai_platform_network_create+0x92>
 800c312:	2201      	movs	r2, #1
 800c314:	609a      	str	r2, [r3, #8]
 800c316:	689a      	ldr	r2, [r3, #8]
 800c318:	2a00      	cmp	r2, #0
 800c31a:	d1fc      	bne.n	800c316 <ai_platform_network_create+0x1e6>
 800c31c:	e751      	b.n	800c1c2 <ai_platform_network_create+0x92>
 800c31e:	4a33      	ldr	r2, [pc, #204]	; (800c3ec <ai_platform_network_create+0x2bc>)
 800c320:	2301      	movs	r3, #1
 800c322:	6093      	str	r3, [r2, #8]
 800c324:	6891      	ldr	r1, [r2, #8]
 800c326:	2900      	cmp	r1, #0
 800c328:	d1fc      	bne.n	800c324 <ai_platform_network_create+0x1f4>
 800c32a:	4b32      	ldr	r3, [pc, #200]	; (800c3f4 <ai_platform_network_create+0x2c4>)
 800c32c:	6013      	str	r3, [r2, #0]
 800c32e:	4b32      	ldr	r3, [pc, #200]	; (800c3f8 <ai_platform_network_create+0x2c8>)
 800c330:	6812      	ldr	r2, [r2, #0]
 800c332:	429a      	cmp	r2, r3
 800c334:	f43f af76 	beq.w	800c224 <ai_platform_network_create+0xf4>
 800c338:	e7fe      	b.n	800c338 <ai_platform_network_create+0x208>
 800c33a:	4a30      	ldr	r2, [pc, #192]	; (800c3fc <ai_platform_network_create+0x2cc>)
 800c33c:	2301      	movs	r3, #1
 800c33e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800c342:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800c346:	2b00      	cmp	r3, #0
 800c348:	d1fb      	bne.n	800c342 <ai_platform_network_create+0x212>
 800c34a:	4b2a      	ldr	r3, [pc, #168]	; (800c3f4 <ai_platform_network_create+0x2c4>)
 800c34c:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800c350:	4b29      	ldr	r3, [pc, #164]	; (800c3f8 <ai_platform_network_create+0x2c8>)
 800c352:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800c356:	429a      	cmp	r2, r3
 800c358:	f43f af64 	beq.w	800c224 <ai_platform_network_create+0xf4>
 800c35c:	e7fe      	b.n	800c35c <ai_platform_network_create+0x22c>
 800c35e:	f04f 0930 	mov.w	r9, #48	; 0x30
 800c362:	2300      	movs	r3, #0
 800c364:	6023      	str	r3, [r4, #0]
 800c366:	2410      	movs	r4, #16
 800c368:	4642      	mov	r2, r8
 800c36a:	4639      	mov	r1, r7
 800c36c:	4630      	mov	r0, r6
 800c36e:	f7fe fc3d 	bl	800abec <ai_version_get>
 800c372:	4603      	mov	r3, r0
 800c374:	2000      	movs	r0, #0
 800c376:	64ab      	str	r3, [r5, #72]	; 0x48
 800c378:	f369 0007 	bfi	r0, r9, #0, #8
 800c37c:	f364 201f 	bfi	r0, r4, #8, #24
 800c380:	e7a4      	b.n	800c2cc <ai_platform_network_create+0x19c>
 800c382:	f241 0010 	movw	r0, #4112	; 0x1010
 800c386:	e7a1      	b.n	800c2cc <ai_platform_network_create+0x19c>
 800c388:	4a1c      	ldr	r2, [pc, #112]	; (800c3fc <ai_platform_network_create+0x2cc>)
 800c38a:	2301      	movs	r3, #1
 800c38c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800c390:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800c394:	2b00      	cmp	r3, #0
 800c396:	d1fb      	bne.n	800c390 <ai_platform_network_create+0x260>
 800c398:	4b16      	ldr	r3, [pc, #88]	; (800c3f4 <ai_platform_network_create+0x2c4>)
 800c39a:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800c39e:	4b16      	ldr	r3, [pc, #88]	; (800c3f8 <ai_platform_network_create+0x2c8>)
 800c3a0:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800c3a4:	429a      	cmp	r2, r3
 800c3a6:	f43f af3d 	beq.w	800c224 <ai_platform_network_create+0xf4>
 800c3aa:	e7fe      	b.n	800c3aa <ai_platform_network_create+0x27a>
 800c3ac:	4a0f      	ldr	r2, [pc, #60]	; (800c3ec <ai_platform_network_create+0x2bc>)
 800c3ae:	2301      	movs	r3, #1
 800c3b0:	6093      	str	r3, [r2, #8]
 800c3b2:	6893      	ldr	r3, [r2, #8]
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d1fc      	bne.n	800c3b2 <ai_platform_network_create+0x282>
 800c3b8:	4b0e      	ldr	r3, [pc, #56]	; (800c3f4 <ai_platform_network_create+0x2c4>)
 800c3ba:	6013      	str	r3, [r2, #0]
 800c3bc:	4b0e      	ldr	r3, [pc, #56]	; (800c3f8 <ai_platform_network_create+0x2c8>)
 800c3be:	6812      	ldr	r2, [r2, #0]
 800c3c0:	429a      	cmp	r2, r3
 800c3c2:	f43f af2f 	beq.w	800c224 <ai_platform_network_create+0xf4>
 800c3c6:	e7fe      	b.n	800c3c6 <ai_platform_network_create+0x296>
 800c3c8:	4a08      	ldr	r2, [pc, #32]	; (800c3ec <ai_platform_network_create+0x2bc>)
 800c3ca:	2301      	movs	r3, #1
 800c3cc:	6093      	str	r3, [r2, #8]
 800c3ce:	6893      	ldr	r3, [r2, #8]
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d1fc      	bne.n	800c3ce <ai_platform_network_create+0x29e>
 800c3d4:	4b07      	ldr	r3, [pc, #28]	; (800c3f4 <ai_platform_network_create+0x2c4>)
 800c3d6:	6013      	str	r3, [r2, #0]
 800c3d8:	4b07      	ldr	r3, [pc, #28]	; (800c3f8 <ai_platform_network_create+0x2c8>)
 800c3da:	6812      	ldr	r2, [r2, #0]
 800c3dc:	429a      	cmp	r2, r3
 800c3de:	d01f      	beq.n	800c420 <ai_platform_network_create+0x2f0>
 800c3e0:	e7fe      	b.n	800c3e0 <ai_platform_network_create+0x2b0>
 800c3e2:	bf00      	nop
 800c3e4:	e0042000 	.word	0xe0042000
 800c3e8:	5c001000 	.word	0x5c001000
 800c3ec:	40023000 	.word	0x40023000
 800c3f0:	a1c00100 	.word	0xa1c00100
 800c3f4:	f407a5c2 	.word	0xf407a5c2
 800c3f8:	b5e8b5cd 	.word	0xb5e8b5cd
 800c3fc:	58024000 	.word	0x58024000
 800c400:	4a33      	ldr	r2, [pc, #204]	; (800c4d0 <ai_platform_network_create+0x3a0>)
 800c402:	2301      	movs	r3, #1
 800c404:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800c408:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d1fb      	bne.n	800c408 <ai_platform_network_create+0x2d8>
 800c410:	4b30      	ldr	r3, [pc, #192]	; (800c4d4 <ai_platform_network_create+0x3a4>)
 800c412:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800c416:	4b30      	ldr	r3, [pc, #192]	; (800c4d8 <ai_platform_network_create+0x3a8>)
 800c418:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800c41c:	429a      	cmp	r2, r3
 800c41e:	d12c      	bne.n	800c47a <ai_platform_network_create+0x34a>
 800c420:	f7fe fdb4 	bl	800af8c <_ai_platform_release_crc>
 800c424:	2200      	movs	r2, #0
 800c426:	4639      	mov	r1, r7
 800c428:	4630      	mov	r0, r6
 800c42a:	f7fe fbdf 	bl	800abec <ai_version_get>
 800c42e:	4681      	mov	r9, r0
 800c430:	2200      	movs	r2, #0
 800c432:	2105      	movs	r1, #5
 800c434:	2001      	movs	r0, #1
 800c436:	f7fe fbd9 	bl	800abec <ai_version_get>
 800c43a:	4581      	cmp	r9, r0
 800c43c:	d01e      	beq.n	800c47c <ai_platform_network_create+0x34c>
 800c43e:	f04f 0901 	mov.w	r9, #1
 800c442:	e78e      	b.n	800c362 <ai_platform_network_create+0x232>
 800c444:	4b25      	ldr	r3, [pc, #148]	; (800c4dc <ai_platform_network_create+0x3ac>)
 800c446:	2218      	movs	r2, #24
 800c448:	609a      	str	r2, [r3, #8]
 800c44a:	689a      	ldr	r2, [r3, #8]
 800c44c:	2a18      	cmp	r2, #24
 800c44e:	f47f af39 	bne.w	800c2c4 <ai_platform_network_create+0x194>
 800c452:	2201      	movs	r2, #1
 800c454:	609a      	str	r2, [r3, #8]
 800c456:	689a      	ldr	r2, [r3, #8]
 800c458:	2a00      	cmp	r2, #0
 800c45a:	d1fc      	bne.n	800c456 <ai_platform_network_create+0x326>
 800c45c:	e6b1      	b.n	800c1c2 <ai_platform_network_create+0x92>
 800c45e:	4a1f      	ldr	r2, [pc, #124]	; (800c4dc <ai_platform_network_create+0x3ac>)
 800c460:	2301      	movs	r3, #1
 800c462:	6093      	str	r3, [r2, #8]
 800c464:	6893      	ldr	r3, [r2, #8]
 800c466:	2b00      	cmp	r3, #0
 800c468:	d1fc      	bne.n	800c464 <ai_platform_network_create+0x334>
 800c46a:	4b1a      	ldr	r3, [pc, #104]	; (800c4d4 <ai_platform_network_create+0x3a4>)
 800c46c:	6013      	str	r3, [r2, #0]
 800c46e:	4b1a      	ldr	r3, [pc, #104]	; (800c4d8 <ai_platform_network_create+0x3a8>)
 800c470:	6812      	ldr	r2, [r2, #0]
 800c472:	429a      	cmp	r2, r3
 800c474:	f43f aed6 	beq.w	800c224 <ai_platform_network_create+0xf4>
 800c478:	e7fe      	b.n	800c478 <ai_platform_network_create+0x348>
 800c47a:	e7fe      	b.n	800c47a <ai_platform_network_create+0x34a>
 800c47c:	4b18      	ldr	r3, [pc, #96]	; (800c4e0 <ai_platform_network_create+0x3b0>)
 800c47e:	a801      	add	r0, sp, #4
 800c480:	9301      	str	r3, [sp, #4]
 800c482:	f005 fdbd 	bl	8012000 <ai_check_custom_types>
 800c486:	b300      	cbz	r0, 800c4ca <ai_platform_network_create+0x39a>
 800c488:	2400      	movs	r4, #0
 800c48a:	46a1      	mov	r9, r4
 800c48c:	e76c      	b.n	800c368 <ai_platform_network_create+0x238>
 800c48e:	4b10      	ldr	r3, [pc, #64]	; (800c4d0 <ai_platform_network_create+0x3a0>)
 800c490:	2201      	movs	r2, #1
 800c492:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 800c496:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 800c49a:	2a00      	cmp	r2, #0
 800c49c:	d1fb      	bne.n	800c496 <ai_platform_network_create+0x366>
 800c49e:	4a0d      	ldr	r2, [pc, #52]	; (800c4d4 <ai_platform_network_create+0x3a4>)
 800c4a0:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 800c4a4:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 800c4a8:	4b0b      	ldr	r3, [pc, #44]	; (800c4d8 <ai_platform_network_create+0x3a8>)
 800c4aa:	429a      	cmp	r2, r3
 800c4ac:	d0b8      	beq.n	800c420 <ai_platform_network_create+0x2f0>
 800c4ae:	e7fe      	b.n	800c4ae <ai_platform_network_create+0x37e>
 800c4b0:	4b0a      	ldr	r3, [pc, #40]	; (800c4dc <ai_platform_network_create+0x3ac>)
 800c4b2:	2201      	movs	r2, #1
 800c4b4:	609a      	str	r2, [r3, #8]
 800c4b6:	689a      	ldr	r2, [r3, #8]
 800c4b8:	2a00      	cmp	r2, #0
 800c4ba:	d1fc      	bne.n	800c4b6 <ai_platform_network_create+0x386>
 800c4bc:	4a05      	ldr	r2, [pc, #20]	; (800c4d4 <ai_platform_network_create+0x3a4>)
 800c4be:	601a      	str	r2, [r3, #0]
 800c4c0:	681a      	ldr	r2, [r3, #0]
 800c4c2:	4b05      	ldr	r3, [pc, #20]	; (800c4d8 <ai_platform_network_create+0x3a8>)
 800c4c4:	429a      	cmp	r2, r3
 800c4c6:	d0ab      	beq.n	800c420 <ai_platform_network_create+0x2f0>
 800c4c8:	e7fe      	b.n	800c4c8 <ai_platform_network_create+0x398>
 800c4ca:	f04f 0902 	mov.w	r9, #2
 800c4ce:	e748      	b.n	800c362 <ai_platform_network_create+0x232>
 800c4d0:	58024000 	.word	0x58024000
 800c4d4:	f407a5c2 	.word	0xf407a5c2
 800c4d8:	b5e8b5cd 	.word	0xb5e8b5cd
 800c4dc:	40023000 	.word	0x40023000
 800c4e0:	84048403 	.word	0x84048403

0800c4e4 <ai_platform_network_destroy>:
 800c4e4:	b510      	push	{r4, lr}
 800c4e6:	4604      	mov	r4, r0
 800c4e8:	2800      	cmp	r0, #0
 800c4ea:	d03d      	beq.n	800c568 <ai_platform_network_destroy+0x84>
 800c4ec:	4b7a      	ldr	r3, [pc, #488]	; (800c6d8 <ai_platform_network_destroy+0x1f4>)
 800c4ee:	6802      	ldr	r2, [r0, #0]
 800c4f0:	429a      	cmp	r2, r3
 800c4f2:	d139      	bne.n	800c568 <ai_platform_network_destroy+0x84>
 800c4f4:	f7fe fd48 	bl	800af88 <_ai_platform_acquire_crc>
 800c4f8:	4b78      	ldr	r3, [pc, #480]	; (800c6dc <ai_platform_network_destroy+0x1f8>)
 800c4fa:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c504:	189a      	adds	r2, r3, r2
 800c506:	2a01      	cmp	r2, #1
 800c508:	f240 8084 	bls.w	800c614 <ai_platform_network_destroy+0x130>
 800c50c:	f240 4249 	movw	r2, #1097	; 0x449
 800c510:	4293      	cmp	r3, r2
 800c512:	d07f      	beq.n	800c614 <ai_platform_network_destroy+0x130>
 800c514:	4a72      	ldr	r2, [pc, #456]	; (800c6e0 <ai_platform_network_destroy+0x1fc>)
 800c516:	6813      	ldr	r3, [r2, #0]
 800c518:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c51c:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800c520:	f000 8086 	beq.w	800c630 <ai_platform_network_destroy+0x14c>
 800c524:	6813      	ldr	r3, [r2, #0]
 800c526:	f240 4183 	movw	r1, #1155	; 0x483
 800c52a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c52e:	428b      	cmp	r3, r1
 800c530:	f000 80a7 	beq.w	800c682 <ai_platform_network_destroy+0x19e>
 800c534:	6813      	ldr	r3, [r2, #0]
 800c536:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c53a:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800c53e:	f000 80be 	beq.w	800c6be <ai_platform_network_destroy+0x1da>
 800c542:	6813      	ldr	r3, [r2, #0]
 800c544:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c548:	2b00      	cmp	r3, #0
 800c54a:	f040 8081 	bne.w	800c650 <ai_platform_network_destroy+0x16c>
 800c54e:	4a65      	ldr	r2, [pc, #404]	; (800c6e4 <ai_platform_network_destroy+0x200>)
 800c550:	2301      	movs	r3, #1
 800c552:	6093      	str	r3, [r2, #8]
 800c554:	6893      	ldr	r3, [r2, #8]
 800c556:	2b00      	cmp	r3, #0
 800c558:	d1fc      	bne.n	800c554 <ai_platform_network_destroy+0x70>
 800c55a:	4963      	ldr	r1, [pc, #396]	; (800c6e8 <ai_platform_network_destroy+0x204>)
 800c55c:	4b63      	ldr	r3, [pc, #396]	; (800c6ec <ai_platform_network_destroy+0x208>)
 800c55e:	6011      	str	r1, [r2, #0]
 800c560:	6812      	ldr	r2, [r2, #0]
 800c562:	429a      	cmp	r2, r3
 800c564:	d074      	beq.n	800c650 <ai_platform_network_destroy+0x16c>
 800c566:	e7fe      	b.n	800c566 <ai_platform_network_destroy+0x82>
 800c568:	f7fe fd0e 	bl	800af88 <_ai_platform_acquire_crc>
 800c56c:	4b5b      	ldr	r3, [pc, #364]	; (800c6dc <ai_platform_network_destroy+0x1f8>)
 800c56e:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c578:	185a      	adds	r2, r3, r1
 800c57a:	2a01      	cmp	r2, #1
 800c57c:	d929      	bls.n	800c5d2 <ai_platform_network_destroy+0xee>
 800c57e:	f240 4249 	movw	r2, #1097	; 0x449
 800c582:	4293      	cmp	r3, r2
 800c584:	d025      	beq.n	800c5d2 <ai_platform_network_destroy+0xee>
 800c586:	4a56      	ldr	r2, [pc, #344]	; (800c6e0 <ai_platform_network_destroy+0x1fc>)
 800c588:	6813      	ldr	r3, [r2, #0]
 800c58a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c58e:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800c592:	d02b      	beq.n	800c5ec <ai_platform_network_destroy+0x108>
 800c594:	6813      	ldr	r3, [r2, #0]
 800c596:	f240 4183 	movw	r1, #1155	; 0x483
 800c59a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c59e:	428b      	cmp	r3, r1
 800c5a0:	d05e      	beq.n	800c660 <ai_platform_network_destroy+0x17c>
 800c5a2:	6813      	ldr	r3, [r2, #0]
 800c5a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c5a8:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800c5ac:	d07a      	beq.n	800c6a4 <ai_platform_network_destroy+0x1c0>
 800c5ae:	6813      	ldr	r3, [r2, #0]
 800c5b0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d129      	bne.n	800c60c <ai_platform_network_destroy+0x128>
 800c5b8:	4a4a      	ldr	r2, [pc, #296]	; (800c6e4 <ai_platform_network_destroy+0x200>)
 800c5ba:	2301      	movs	r3, #1
 800c5bc:	6093      	str	r3, [r2, #8]
 800c5be:	6893      	ldr	r3, [r2, #8]
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d1fc      	bne.n	800c5be <ai_platform_network_destroy+0xda>
 800c5c4:	4948      	ldr	r1, [pc, #288]	; (800c6e8 <ai_platform_network_destroy+0x204>)
 800c5c6:	4b49      	ldr	r3, [pc, #292]	; (800c6ec <ai_platform_network_destroy+0x208>)
 800c5c8:	6011      	str	r1, [r2, #0]
 800c5ca:	6812      	ldr	r2, [r2, #0]
 800c5cc:	429a      	cmp	r2, r3
 800c5ce:	d01d      	beq.n	800c60c <ai_platform_network_destroy+0x128>
 800c5d0:	e7fe      	b.n	800c5d0 <ai_platform_network_destroy+0xec>
 800c5d2:	4a44      	ldr	r2, [pc, #272]	; (800c6e4 <ai_platform_network_destroy+0x200>)
 800c5d4:	2301      	movs	r3, #1
 800c5d6:	6093      	str	r3, [r2, #8]
 800c5d8:	6893      	ldr	r3, [r2, #8]
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d1fc      	bne.n	800c5d8 <ai_platform_network_destroy+0xf4>
 800c5de:	4942      	ldr	r1, [pc, #264]	; (800c6e8 <ai_platform_network_destroy+0x204>)
 800c5e0:	4b42      	ldr	r3, [pc, #264]	; (800c6ec <ai_platform_network_destroy+0x208>)
 800c5e2:	6011      	str	r1, [r2, #0]
 800c5e4:	6812      	ldr	r2, [r2, #0]
 800c5e6:	429a      	cmp	r2, r3
 800c5e8:	d010      	beq.n	800c60c <ai_platform_network_destroy+0x128>
 800c5ea:	e7fe      	b.n	800c5ea <ai_platform_network_destroy+0x106>
 800c5ec:	4a40      	ldr	r2, [pc, #256]	; (800c6f0 <ai_platform_network_destroy+0x20c>)
 800c5ee:	2301      	movs	r3, #1
 800c5f0:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800c5f4:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d1fb      	bne.n	800c5f4 <ai_platform_network_destroy+0x110>
 800c5fc:	493a      	ldr	r1, [pc, #232]	; (800c6e8 <ai_platform_network_destroy+0x204>)
 800c5fe:	4b3b      	ldr	r3, [pc, #236]	; (800c6ec <ai_platform_network_destroy+0x208>)
 800c600:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800c604:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800c608:	429a      	cmp	r2, r3
 800c60a:	d110      	bne.n	800c62e <ai_platform_network_destroy+0x14a>
 800c60c:	f7fe fcbe 	bl	800af8c <_ai_platform_release_crc>
 800c610:	4620      	mov	r0, r4
 800c612:	bd10      	pop	{r4, pc}
 800c614:	4a33      	ldr	r2, [pc, #204]	; (800c6e4 <ai_platform_network_destroy+0x200>)
 800c616:	2301      	movs	r3, #1
 800c618:	6093      	str	r3, [r2, #8]
 800c61a:	6893      	ldr	r3, [r2, #8]
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d1fc      	bne.n	800c61a <ai_platform_network_destroy+0x136>
 800c620:	4931      	ldr	r1, [pc, #196]	; (800c6e8 <ai_platform_network_destroy+0x204>)
 800c622:	4b32      	ldr	r3, [pc, #200]	; (800c6ec <ai_platform_network_destroy+0x208>)
 800c624:	6011      	str	r1, [r2, #0]
 800c626:	6812      	ldr	r2, [r2, #0]
 800c628:	429a      	cmp	r2, r3
 800c62a:	d011      	beq.n	800c650 <ai_platform_network_destroy+0x16c>
 800c62c:	e7fe      	b.n	800c62c <ai_platform_network_destroy+0x148>
 800c62e:	e7fe      	b.n	800c62e <ai_platform_network_destroy+0x14a>
 800c630:	4a2f      	ldr	r2, [pc, #188]	; (800c6f0 <ai_platform_network_destroy+0x20c>)
 800c632:	2301      	movs	r3, #1
 800c634:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800c638:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d1fb      	bne.n	800c638 <ai_platform_network_destroy+0x154>
 800c640:	4929      	ldr	r1, [pc, #164]	; (800c6e8 <ai_platform_network_destroy+0x204>)
 800c642:	4b2a      	ldr	r3, [pc, #168]	; (800c6ec <ai_platform_network_destroy+0x208>)
 800c644:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800c648:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800c64c:	429a      	cmp	r2, r3
 800c64e:	d106      	bne.n	800c65e <ai_platform_network_destroy+0x17a>
 800c650:	f7fe fc9c 	bl	800af8c <_ai_platform_release_crc>
 800c654:	4620      	mov	r0, r4
 800c656:	f005 fd65 	bl	8012124 <ai_layers_destroy_all>
 800c65a:	2000      	movs	r0, #0
 800c65c:	bd10      	pop	{r4, pc}
 800c65e:	e7fe      	b.n	800c65e <ai_platform_network_destroy+0x17a>
 800c660:	4a23      	ldr	r2, [pc, #140]	; (800c6f0 <ai_platform_network_destroy+0x20c>)
 800c662:	2301      	movs	r3, #1
 800c664:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800c668:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d1fb      	bne.n	800c668 <ai_platform_network_destroy+0x184>
 800c670:	491d      	ldr	r1, [pc, #116]	; (800c6e8 <ai_platform_network_destroy+0x204>)
 800c672:	4b1e      	ldr	r3, [pc, #120]	; (800c6ec <ai_platform_network_destroy+0x208>)
 800c674:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800c678:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800c67c:	429a      	cmp	r2, r3
 800c67e:	d0c5      	beq.n	800c60c <ai_platform_network_destroy+0x128>
 800c680:	e7fe      	b.n	800c680 <ai_platform_network_destroy+0x19c>
 800c682:	4a1b      	ldr	r2, [pc, #108]	; (800c6f0 <ai_platform_network_destroy+0x20c>)
 800c684:	2301      	movs	r3, #1
 800c686:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800c68a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d1fb      	bne.n	800c68a <ai_platform_network_destroy+0x1a6>
 800c692:	4915      	ldr	r1, [pc, #84]	; (800c6e8 <ai_platform_network_destroy+0x204>)
 800c694:	4b15      	ldr	r3, [pc, #84]	; (800c6ec <ai_platform_network_destroy+0x208>)
 800c696:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800c69a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800c69e:	429a      	cmp	r2, r3
 800c6a0:	d0d6      	beq.n	800c650 <ai_platform_network_destroy+0x16c>
 800c6a2:	e7fe      	b.n	800c6a2 <ai_platform_network_destroy+0x1be>
 800c6a4:	4a0f      	ldr	r2, [pc, #60]	; (800c6e4 <ai_platform_network_destroy+0x200>)
 800c6a6:	2301      	movs	r3, #1
 800c6a8:	6093      	str	r3, [r2, #8]
 800c6aa:	6893      	ldr	r3, [r2, #8]
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d1fc      	bne.n	800c6aa <ai_platform_network_destroy+0x1c6>
 800c6b0:	490d      	ldr	r1, [pc, #52]	; (800c6e8 <ai_platform_network_destroy+0x204>)
 800c6b2:	4b0e      	ldr	r3, [pc, #56]	; (800c6ec <ai_platform_network_destroy+0x208>)
 800c6b4:	6011      	str	r1, [r2, #0]
 800c6b6:	6812      	ldr	r2, [r2, #0]
 800c6b8:	429a      	cmp	r2, r3
 800c6ba:	d0a7      	beq.n	800c60c <ai_platform_network_destroy+0x128>
 800c6bc:	e7fe      	b.n	800c6bc <ai_platform_network_destroy+0x1d8>
 800c6be:	4a09      	ldr	r2, [pc, #36]	; (800c6e4 <ai_platform_network_destroy+0x200>)
 800c6c0:	2301      	movs	r3, #1
 800c6c2:	6093      	str	r3, [r2, #8]
 800c6c4:	6893      	ldr	r3, [r2, #8]
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d1fc      	bne.n	800c6c4 <ai_platform_network_destroy+0x1e0>
 800c6ca:	4907      	ldr	r1, [pc, #28]	; (800c6e8 <ai_platform_network_destroy+0x204>)
 800c6cc:	4b07      	ldr	r3, [pc, #28]	; (800c6ec <ai_platform_network_destroy+0x208>)
 800c6ce:	6011      	str	r1, [r2, #0]
 800c6d0:	6812      	ldr	r2, [r2, #0]
 800c6d2:	429a      	cmp	r2, r3
 800c6d4:	d0bc      	beq.n	800c650 <ai_platform_network_destroy+0x16c>
 800c6d6:	e7fe      	b.n	800c6d6 <ai_platform_network_destroy+0x1f2>
 800c6d8:	a1c00100 	.word	0xa1c00100
 800c6dc:	e0042000 	.word	0xe0042000
 800c6e0:	5c001000 	.word	0x5c001000
 800c6e4:	40023000 	.word	0x40023000
 800c6e8:	f407a5c2 	.word	0xf407a5c2
 800c6ec:	b5e8b5cd 	.word	0xb5e8b5cd
 800c6f0:	58024000 	.word	0x58024000

0800c6f4 <ai_platform_network_init>:
 800c6f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c6f8:	2800      	cmp	r0, #0
 800c6fa:	d052      	beq.n	800c7a2 <ai_platform_network_init+0xae>
 800c6fc:	4bab      	ldr	r3, [pc, #684]	; (800c9ac <ai_platform_network_init+0x2b8>)
 800c6fe:	4604      	mov	r4, r0
 800c700:	6802      	ldr	r2, [r0, #0]
 800c702:	429a      	cmp	r2, r3
 800c704:	d14d      	bne.n	800c7a2 <ai_platform_network_init+0xae>
 800c706:	460d      	mov	r5, r1
 800c708:	f7fe fc3e 	bl	800af88 <_ai_platform_acquire_crc>
 800c70c:	4ba8      	ldr	r3, [pc, #672]	; (800c9b0 <ai_platform_network_init+0x2bc>)
 800c70e:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c718:	189a      	adds	r2, r3, r2
 800c71a:	2a01      	cmp	r2, #1
 800c71c:	f240 809b 	bls.w	800c856 <ai_platform_network_init+0x162>
 800c720:	f240 4249 	movw	r2, #1097	; 0x449
 800c724:	4293      	cmp	r3, r2
 800c726:	f000 8096 	beq.w	800c856 <ai_platform_network_init+0x162>
 800c72a:	4aa2      	ldr	r2, [pc, #648]	; (800c9b4 <ai_platform_network_init+0x2c0>)
 800c72c:	6813      	ldr	r3, [r2, #0]
 800c72e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c732:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800c736:	f000 809d 	beq.w	800c874 <ai_platform_network_init+0x180>
 800c73a:	6813      	ldr	r3, [r2, #0]
 800c73c:	f240 4183 	movw	r1, #1155	; 0x483
 800c740:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c744:	428b      	cmp	r3, r1
 800c746:	f000 80e4 	beq.w	800c912 <ai_platform_network_init+0x21e>
 800c74a:	6813      	ldr	r3, [r2, #0]
 800c74c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c750:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800c754:	f000 811b 	beq.w	800c98e <ai_platform_network_init+0x29a>
 800c758:	6813      	ldr	r3, [r2, #0]
 800c75a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c75e:	2b00      	cmp	r3, #0
 800c760:	f000 80f9 	beq.w	800c956 <ai_platform_network_init+0x262>
 800c764:	f7fe fc12 	bl	800af8c <_ai_platform_release_crc>
 800c768:	2d00      	cmp	r5, #0
 800c76a:	f000 8147 	beq.w	800c9fc <ai_platform_network_init+0x308>
 800c76e:	4b92      	ldr	r3, [pc, #584]	; (800c9b8 <ai_platform_network_init+0x2c4>)
 800c770:	682a      	ldr	r2, [r5, #0]
 800c772:	429a      	cmp	r2, r3
 800c774:	f040 8090 	bne.w	800c898 <ai_platform_network_init+0x1a4>
 800c778:	692b      	ldr	r3, [r5, #16]
 800c77a:	89ae      	ldrh	r6, [r5, #12]
 800c77c:	f8b5 c00e 	ldrh.w	ip, [r5, #14]
 800c780:	e9d5 1201 	ldrd	r1, r2, [r5, #4]
 800c784:	62a3      	str	r3, [r4, #40]	; 0x28
 800c786:	e9c4 1207 	strd	r1, r2, [r4, #28]
 800c78a:	2303      	movs	r3, #3
 800c78c:	84a6      	strh	r6, [r4, #36]	; 0x24
 800c78e:	4626      	mov	r6, r4
 800c790:	4620      	mov	r0, r4
 800c792:	f8a4 c026 	strh.w	ip, [r4, #38]	; 0x26
 800c796:	60e3      	str	r3, [r4, #12]
 800c798:	f005 fc5a 	bl	8012050 <ai_layers_init_all>
 800c79c:	4630      	mov	r0, r6
 800c79e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c7a2:	f7fe fbf1 	bl	800af88 <_ai_platform_acquire_crc>
 800c7a6:	4b82      	ldr	r3, [pc, #520]	; (800c9b0 <ai_platform_network_init+0x2bc>)
 800c7a8:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c7b2:	185a      	adds	r2, r3, r1
 800c7b4:	2a01      	cmp	r2, #1
 800c7b6:	d92b      	bls.n	800c810 <ai_platform_network_init+0x11c>
 800c7b8:	f240 4249 	movw	r2, #1097	; 0x449
 800c7bc:	4293      	cmp	r3, r2
 800c7be:	d027      	beq.n	800c810 <ai_platform_network_init+0x11c>
 800c7c0:	4a7c      	ldr	r2, [pc, #496]	; (800c9b4 <ai_platform_network_init+0x2c0>)
 800c7c2:	6813      	ldr	r3, [r2, #0]
 800c7c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c7c8:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800c7cc:	d02d      	beq.n	800c82a <ai_platform_network_init+0x136>
 800c7ce:	6813      	ldr	r3, [r2, #0]
 800c7d0:	f240 4183 	movw	r1, #1155	; 0x483
 800c7d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c7d8:	428b      	cmp	r3, r1
 800c7da:	f000 8089 	beq.w	800c8f0 <ai_platform_network_init+0x1fc>
 800c7de:	6813      	ldr	r3, [r2, #0]
 800c7e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c7e4:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800c7e8:	f000 80c3 	beq.w	800c972 <ai_platform_network_init+0x27e>
 800c7ec:	6813      	ldr	r3, [r2, #0]
 800c7ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d129      	bne.n	800c84a <ai_platform_network_init+0x156>
 800c7f6:	4a71      	ldr	r2, [pc, #452]	; (800c9bc <ai_platform_network_init+0x2c8>)
 800c7f8:	2301      	movs	r3, #1
 800c7fa:	6093      	str	r3, [r2, #8]
 800c7fc:	6893      	ldr	r3, [r2, #8]
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d1fc      	bne.n	800c7fc <ai_platform_network_init+0x108>
 800c802:	496f      	ldr	r1, [pc, #444]	; (800c9c0 <ai_platform_network_init+0x2cc>)
 800c804:	4b6f      	ldr	r3, [pc, #444]	; (800c9c4 <ai_platform_network_init+0x2d0>)
 800c806:	6011      	str	r1, [r2, #0]
 800c808:	6812      	ldr	r2, [r2, #0]
 800c80a:	429a      	cmp	r2, r3
 800c80c:	d01d      	beq.n	800c84a <ai_platform_network_init+0x156>
 800c80e:	e7fe      	b.n	800c80e <ai_platform_network_init+0x11a>
 800c810:	4a6a      	ldr	r2, [pc, #424]	; (800c9bc <ai_platform_network_init+0x2c8>)
 800c812:	2301      	movs	r3, #1
 800c814:	6093      	str	r3, [r2, #8]
 800c816:	6893      	ldr	r3, [r2, #8]
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d1fc      	bne.n	800c816 <ai_platform_network_init+0x122>
 800c81c:	4968      	ldr	r1, [pc, #416]	; (800c9c0 <ai_platform_network_init+0x2cc>)
 800c81e:	4b69      	ldr	r3, [pc, #420]	; (800c9c4 <ai_platform_network_init+0x2d0>)
 800c820:	6011      	str	r1, [r2, #0]
 800c822:	6812      	ldr	r2, [r2, #0]
 800c824:	429a      	cmp	r2, r3
 800c826:	d010      	beq.n	800c84a <ai_platform_network_init+0x156>
 800c828:	e7fe      	b.n	800c828 <ai_platform_network_init+0x134>
 800c82a:	4a67      	ldr	r2, [pc, #412]	; (800c9c8 <ai_platform_network_init+0x2d4>)
 800c82c:	2301      	movs	r3, #1
 800c82e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800c832:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800c836:	2b00      	cmp	r3, #0
 800c838:	d1fb      	bne.n	800c832 <ai_platform_network_init+0x13e>
 800c83a:	4961      	ldr	r1, [pc, #388]	; (800c9c0 <ai_platform_network_init+0x2cc>)
 800c83c:	4b61      	ldr	r3, [pc, #388]	; (800c9c4 <ai_platform_network_init+0x2d0>)
 800c83e:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800c842:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800c846:	429a      	cmp	r2, r3
 800c848:	d113      	bne.n	800c872 <ai_platform_network_init+0x17e>
 800c84a:	2600      	movs	r6, #0
 800c84c:	f7fe fb9e 	bl	800af8c <_ai_platform_release_crc>
 800c850:	4630      	mov	r0, r6
 800c852:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c856:	4a59      	ldr	r2, [pc, #356]	; (800c9bc <ai_platform_network_init+0x2c8>)
 800c858:	2301      	movs	r3, #1
 800c85a:	6093      	str	r3, [r2, #8]
 800c85c:	6893      	ldr	r3, [r2, #8]
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d1fc      	bne.n	800c85c <ai_platform_network_init+0x168>
 800c862:	4b57      	ldr	r3, [pc, #348]	; (800c9c0 <ai_platform_network_init+0x2cc>)
 800c864:	6013      	str	r3, [r2, #0]
 800c866:	4b57      	ldr	r3, [pc, #348]	; (800c9c4 <ai_platform_network_init+0x2d0>)
 800c868:	6812      	ldr	r2, [r2, #0]
 800c86a:	429a      	cmp	r2, r3
 800c86c:	f43f af7a 	beq.w	800c764 <ai_platform_network_init+0x70>
 800c870:	e7fe      	b.n	800c870 <ai_platform_network_init+0x17c>
 800c872:	e7fe      	b.n	800c872 <ai_platform_network_init+0x17e>
 800c874:	4a54      	ldr	r2, [pc, #336]	; (800c9c8 <ai_platform_network_init+0x2d4>)
 800c876:	2301      	movs	r3, #1
 800c878:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800c87c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800c880:	2b00      	cmp	r3, #0
 800c882:	d1fb      	bne.n	800c87c <ai_platform_network_init+0x188>
 800c884:	4b4e      	ldr	r3, [pc, #312]	; (800c9c0 <ai_platform_network_init+0x2cc>)
 800c886:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800c88a:	4b4e      	ldr	r3, [pc, #312]	; (800c9c4 <ai_platform_network_init+0x2d0>)
 800c88c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800c890:	429a      	cmp	r2, r3
 800c892:	f43f af67 	beq.w	800c764 <ai_platform_network_init+0x70>
 800c896:	e7fe      	b.n	800c896 <ai_platform_network_init+0x1a2>
 800c898:	2101      	movs	r1, #1
 800c89a:	4628      	mov	r0, r5
 800c89c:	f105 081c 	add.w	r8, r5, #28
 800c8a0:	686e      	ldr	r6, [r5, #4]
 800c8a2:	f7fe fa89 	bl	800adb8 <ai_buffer_get_size>
 800c8a6:	4607      	mov	r7, r0
 800c8a8:	2101      	movs	r1, #1
 800c8aa:	4640      	mov	r0, r8
 800c8ac:	f8d5 9020 	ldr.w	r9, [r5, #32]
 800c8b0:	f7fe fa82 	bl	800adb8 <ai_buffer_get_size>
 800c8b4:	2f00      	cmp	r7, #0
 800c8b6:	d13e      	bne.n	800c936 <ai_platform_network_init+0x242>
 800c8b8:	2800      	cmp	r0, #0
 800c8ba:	f000 808e 	beq.w	800c9da <ai_platform_network_init+0x2e6>
 800c8be:	f1b9 0f00 	cmp.w	r9, #0
 800c8c2:	f000 8094 	beq.w	800c9ee <ai_platform_network_init+0x2fa>
 800c8c6:	f04f 0c01 	mov.w	ip, #1
 800c8ca:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800c8cc:	2600      	movs	r6, #0
 800c8ce:	83e7      	strh	r7, [r4, #30]
 800c8d0:	4563      	cmp	r3, ip
 800c8d2:	83a6      	strh	r6, [r4, #28]
 800c8d4:	d37a      	bcc.n	800c9cc <ai_platform_network_init+0x2d8>
 800c8d6:	f1bc 0f00 	cmp.w	ip, #0
 800c8da:	f000 809c 	beq.w	800ca16 <ai_platform_network_init+0x322>
 800c8de:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800c8e0:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
 800c8e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c8e6:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 800c8ea:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800c8ee:	e74c      	b.n	800c78a <ai_platform_network_init+0x96>
 800c8f0:	4a35      	ldr	r2, [pc, #212]	; (800c9c8 <ai_platform_network_init+0x2d4>)
 800c8f2:	2301      	movs	r3, #1
 800c8f4:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800c8f8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d1fb      	bne.n	800c8f8 <ai_platform_network_init+0x204>
 800c900:	492f      	ldr	r1, [pc, #188]	; (800c9c0 <ai_platform_network_init+0x2cc>)
 800c902:	4b30      	ldr	r3, [pc, #192]	; (800c9c4 <ai_platform_network_init+0x2d0>)
 800c904:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800c908:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800c90c:	429a      	cmp	r2, r3
 800c90e:	d09c      	beq.n	800c84a <ai_platform_network_init+0x156>
 800c910:	e7fe      	b.n	800c910 <ai_platform_network_init+0x21c>
 800c912:	4a2d      	ldr	r2, [pc, #180]	; (800c9c8 <ai_platform_network_init+0x2d4>)
 800c914:	2301      	movs	r3, #1
 800c916:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800c91a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d1fb      	bne.n	800c91a <ai_platform_network_init+0x226>
 800c922:	4b27      	ldr	r3, [pc, #156]	; (800c9c0 <ai_platform_network_init+0x2cc>)
 800c924:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800c928:	4b26      	ldr	r3, [pc, #152]	; (800c9c4 <ai_platform_network_init+0x2d0>)
 800c92a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800c92e:	429a      	cmp	r2, r3
 800c930:	f43f af18 	beq.w	800c764 <ai_platform_network_init+0x70>
 800c934:	e7fe      	b.n	800c934 <ai_platform_network_init+0x240>
 800c936:	2800      	cmp	r0, #0
 800c938:	d153      	bne.n	800c9e2 <ai_platform_network_init+0x2ee>
 800c93a:	4680      	mov	r8, r0
 800c93c:	4684      	mov	ip, r0
 800c93e:	2e00      	cmp	r6, #0
 800c940:	d063      	beq.n	800ca0a <ai_platform_network_init+0x316>
 800c942:	8be6      	ldrh	r6, [r4, #30]
 800c944:	2e00      	cmp	r6, #0
 800c946:	d168      	bne.n	800ca1a <ai_platform_network_init+0x326>
 800c948:	2212      	movs	r2, #18
 800c94a:	2116      	movs	r1, #22
 800c94c:	f104 0010 	add.w	r0, r4, #16
 800c950:	f000 fddc 	bl	800d50c <core_set_error>
 800c954:	e77c      	b.n	800c850 <ai_platform_network_init+0x15c>
 800c956:	4a19      	ldr	r2, [pc, #100]	; (800c9bc <ai_platform_network_init+0x2c8>)
 800c958:	2301      	movs	r3, #1
 800c95a:	6093      	str	r3, [r2, #8]
 800c95c:	6893      	ldr	r3, [r2, #8]
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d1fc      	bne.n	800c95c <ai_platform_network_init+0x268>
 800c962:	4b17      	ldr	r3, [pc, #92]	; (800c9c0 <ai_platform_network_init+0x2cc>)
 800c964:	6013      	str	r3, [r2, #0]
 800c966:	4b17      	ldr	r3, [pc, #92]	; (800c9c4 <ai_platform_network_init+0x2d0>)
 800c968:	6812      	ldr	r2, [r2, #0]
 800c96a:	429a      	cmp	r2, r3
 800c96c:	f43f aefa 	beq.w	800c764 <ai_platform_network_init+0x70>
 800c970:	e7fe      	b.n	800c970 <ai_platform_network_init+0x27c>
 800c972:	4a12      	ldr	r2, [pc, #72]	; (800c9bc <ai_platform_network_init+0x2c8>)
 800c974:	2301      	movs	r3, #1
 800c976:	6093      	str	r3, [r2, #8]
 800c978:	6893      	ldr	r3, [r2, #8]
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d1fc      	bne.n	800c978 <ai_platform_network_init+0x284>
 800c97e:	4910      	ldr	r1, [pc, #64]	; (800c9c0 <ai_platform_network_init+0x2cc>)
 800c980:	4b10      	ldr	r3, [pc, #64]	; (800c9c4 <ai_platform_network_init+0x2d0>)
 800c982:	6011      	str	r1, [r2, #0]
 800c984:	6812      	ldr	r2, [r2, #0]
 800c986:	429a      	cmp	r2, r3
 800c988:	f43f af5f 	beq.w	800c84a <ai_platform_network_init+0x156>
 800c98c:	e7fe      	b.n	800c98c <ai_platform_network_init+0x298>
 800c98e:	4a0b      	ldr	r2, [pc, #44]	; (800c9bc <ai_platform_network_init+0x2c8>)
 800c990:	2301      	movs	r3, #1
 800c992:	6093      	str	r3, [r2, #8]
 800c994:	6893      	ldr	r3, [r2, #8]
 800c996:	2b00      	cmp	r3, #0
 800c998:	d1fc      	bne.n	800c994 <ai_platform_network_init+0x2a0>
 800c99a:	4b09      	ldr	r3, [pc, #36]	; (800c9c0 <ai_platform_network_init+0x2cc>)
 800c99c:	6013      	str	r3, [r2, #0]
 800c99e:	4b09      	ldr	r3, [pc, #36]	; (800c9c4 <ai_platform_network_init+0x2d0>)
 800c9a0:	6812      	ldr	r2, [r2, #0]
 800c9a2:	429a      	cmp	r2, r3
 800c9a4:	f43f aede 	beq.w	800c764 <ai_platform_network_init+0x70>
 800c9a8:	e7fe      	b.n	800c9a8 <ai_platform_network_init+0x2b4>
 800c9aa:	bf00      	nop
 800c9ac:	a1c00100 	.word	0xa1c00100
 800c9b0:	e0042000 	.word	0xe0042000
 800c9b4:	5c001000 	.word	0x5c001000
 800c9b8:	a1facade 	.word	0xa1facade
 800c9bc:	40023000 	.word	0x40023000
 800c9c0:	f407a5c2 	.word	0xf407a5c2
 800c9c4:	b5e8b5cd 	.word	0xb5e8b5cd
 800c9c8:	58024000 	.word	0x58024000
 800c9cc:	2213      	movs	r2, #19
 800c9ce:	2116      	movs	r1, #22
 800c9d0:	f104 0010 	add.w	r0, r4, #16
 800c9d4:	f000 fd9a 	bl	800d50c <core_set_error>
 800c9d8:	e73a      	b.n	800c850 <ai_platform_network_init+0x15c>
 800c9da:	4607      	mov	r7, r0
 800c9dc:	4680      	mov	r8, r0
 800c9de:	4684      	mov	ip, r0
 800c9e0:	e773      	b.n	800c8ca <ai_platform_network_init+0x1d6>
 800c9e2:	f1b9 0f00 	cmp.w	r9, #0
 800c9e6:	d002      	beq.n	800c9ee <ai_platform_network_init+0x2fa>
 800c9e8:	f04f 0c01 	mov.w	ip, #1
 800c9ec:	e7a7      	b.n	800c93e <ai_platform_network_init+0x24a>
 800c9ee:	2110      	movs	r1, #16
 800c9f0:	2213      	movs	r2, #19
 800c9f2:	2600      	movs	r6, #0
 800c9f4:	1860      	adds	r0, r4, r1
 800c9f6:	f000 fd89 	bl	800d50c <core_set_error>
 800c9fa:	e729      	b.n	800c850 <ai_platform_network_init+0x15c>
 800c9fc:	2110      	movs	r1, #16
 800c9fe:	2211      	movs	r2, #17
 800ca00:	462e      	mov	r6, r5
 800ca02:	1860      	adds	r0, r4, r1
 800ca04:	f000 fd82 	bl	800d50c <core_set_error>
 800ca08:	e722      	b.n	800c850 <ai_platform_network_init+0x15c>
 800ca0a:	2110      	movs	r1, #16
 800ca0c:	2212      	movs	r2, #18
 800ca0e:	1860      	adds	r0, r4, r1
 800ca10:	f000 fd7c 	bl	800d50c <core_set_error>
 800ca14:	e71c      	b.n	800c850 <ai_platform_network_init+0x15c>
 800ca16:	4666      	mov	r6, ip
 800ca18:	e6b7      	b.n	800c78a <ai_platform_network_init+0x96>
 800ca1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ca1c:	6a26      	ldr	r6, [r4, #32]
 800ca1e:	2701      	movs	r7, #1
 800ca20:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800ca22:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800ca26:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 800ca2a:	e74e      	b.n	800c8ca <ai_platform_network_init+0x1d6>

0800ca2c <ai_platform_network_post_init>:
 800ca2c:	b538      	push	{r3, r4, r5, lr}
 800ca2e:	2800      	cmp	r0, #0
 800ca30:	d04e      	beq.n	800cad0 <ai_platform_network_post_init+0xa4>
 800ca32:	4b8c      	ldr	r3, [pc, #560]	; (800cc64 <ai_platform_network_post_init+0x238>)
 800ca34:	4604      	mov	r4, r0
 800ca36:	6802      	ldr	r2, [r0, #0]
 800ca38:	429a      	cmp	r2, r3
 800ca3a:	d149      	bne.n	800cad0 <ai_platform_network_post_init+0xa4>
 800ca3c:	f7fe faa4 	bl	800af88 <_ai_platform_acquire_crc>
 800ca40:	4b89      	ldr	r3, [pc, #548]	; (800cc68 <ai_platform_network_post_init+0x23c>)
 800ca42:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ca4c:	189a      	adds	r2, r3, r2
 800ca4e:	2a01      	cmp	r2, #1
 800ca50:	f240 8095 	bls.w	800cb7e <ai_platform_network_post_init+0x152>
 800ca54:	f240 4249 	movw	r2, #1097	; 0x449
 800ca58:	4293      	cmp	r3, r2
 800ca5a:	f000 8090 	beq.w	800cb7e <ai_platform_network_post_init+0x152>
 800ca5e:	4a83      	ldr	r2, [pc, #524]	; (800cc6c <ai_platform_network_post_init+0x240>)
 800ca60:	6813      	ldr	r3, [r2, #0]
 800ca62:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ca66:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800ca6a:	f000 8096 	beq.w	800cb9a <ai_platform_network_post_init+0x16e>
 800ca6e:	6813      	ldr	r3, [r2, #0]
 800ca70:	f240 4183 	movw	r1, #1155	; 0x483
 800ca74:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ca78:	428b      	cmp	r3, r1
 800ca7a:	f000 80b8 	beq.w	800cbee <ai_platform_network_post_init+0x1c2>
 800ca7e:	6813      	ldr	r3, [r2, #0]
 800ca80:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ca84:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800ca88:	f000 80de 	beq.w	800cc48 <ai_platform_network_post_init+0x21c>
 800ca8c:	6813      	ldr	r3, [r2, #0]
 800ca8e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	f000 80bd 	beq.w	800cc12 <ai_platform_network_post_init+0x1e6>
 800ca98:	f7fe fa78 	bl	800af8c <_ai_platform_release_crc>
 800ca9c:	68e3      	ldr	r3, [r4, #12]
 800ca9e:	f013 0502 	ands.w	r5, r3, #2
 800caa2:	f000 808c 	beq.w	800cbbe <ai_platform_network_post_init+0x192>
 800caa6:	4620      	mov	r0, r4
 800caa8:	f005 fae0 	bl	801206c <ai_layers_post_init_all>
 800caac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800caae:	b16b      	cbz	r3, 800cacc <ai_platform_network_post_init+0xa0>
 800cab0:	6b65      	ldr	r5, [r4, #52]	; 0x34
 800cab2:	e007      	b.n	800cac4 <ai_platform_network_post_init+0x98>
 800cab4:	e9d4 320f 	ldrd	r3, r2, [r4, #60]	; 0x3c
 800cab8:	4798      	blx	r3
 800caba:	692b      	ldr	r3, [r5, #16]
 800cabc:	b133      	cbz	r3, 800cacc <ai_platform_network_post_init+0xa0>
 800cabe:	42ab      	cmp	r3, r5
 800cac0:	461d      	mov	r5, r3
 800cac2:	d003      	beq.n	800cacc <ai_platform_network_post_init+0xa0>
 800cac4:	4629      	mov	r1, r5
 800cac6:	2000      	movs	r0, #0
 800cac8:	2d00      	cmp	r5, #0
 800caca:	d1f3      	bne.n	800cab4 <ai_platform_network_post_init+0x88>
 800cacc:	2001      	movs	r0, #1
 800cace:	bd38      	pop	{r3, r4, r5, pc}
 800cad0:	f7fe fa5a 	bl	800af88 <_ai_platform_acquire_crc>
 800cad4:	4b64      	ldr	r3, [pc, #400]	; (800cc68 <ai_platform_network_post_init+0x23c>)
 800cad6:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cae0:	185a      	adds	r2, r3, r1
 800cae2:	2a01      	cmp	r2, #1
 800cae4:	d92a      	bls.n	800cb3c <ai_platform_network_post_init+0x110>
 800cae6:	f240 4249 	movw	r2, #1097	; 0x449
 800caea:	4293      	cmp	r3, r2
 800caec:	d026      	beq.n	800cb3c <ai_platform_network_post_init+0x110>
 800caee:	4a5f      	ldr	r2, [pc, #380]	; (800cc6c <ai_platform_network_post_init+0x240>)
 800caf0:	6813      	ldr	r3, [r2, #0]
 800caf2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800caf6:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800cafa:	d02c      	beq.n	800cb56 <ai_platform_network_post_init+0x12a>
 800cafc:	6813      	ldr	r3, [r2, #0]
 800cafe:	f240 4183 	movw	r1, #1155	; 0x483
 800cb02:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cb06:	428b      	cmp	r3, r1
 800cb08:	d060      	beq.n	800cbcc <ai_platform_network_post_init+0x1a0>
 800cb0a:	6813      	ldr	r3, [r2, #0]
 800cb0c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cb10:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800cb14:	f000 808b 	beq.w	800cc2e <ai_platform_network_post_init+0x202>
 800cb18:	6813      	ldr	r3, [r2, #0]
 800cb1a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d129      	bne.n	800cb76 <ai_platform_network_post_init+0x14a>
 800cb22:	4a53      	ldr	r2, [pc, #332]	; (800cc70 <ai_platform_network_post_init+0x244>)
 800cb24:	2301      	movs	r3, #1
 800cb26:	6093      	str	r3, [r2, #8]
 800cb28:	6893      	ldr	r3, [r2, #8]
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d1fc      	bne.n	800cb28 <ai_platform_network_post_init+0xfc>
 800cb2e:	4951      	ldr	r1, [pc, #324]	; (800cc74 <ai_platform_network_post_init+0x248>)
 800cb30:	4b51      	ldr	r3, [pc, #324]	; (800cc78 <ai_platform_network_post_init+0x24c>)
 800cb32:	6011      	str	r1, [r2, #0]
 800cb34:	6812      	ldr	r2, [r2, #0]
 800cb36:	429a      	cmp	r2, r3
 800cb38:	d01d      	beq.n	800cb76 <ai_platform_network_post_init+0x14a>
 800cb3a:	e7fe      	b.n	800cb3a <ai_platform_network_post_init+0x10e>
 800cb3c:	4a4c      	ldr	r2, [pc, #304]	; (800cc70 <ai_platform_network_post_init+0x244>)
 800cb3e:	2301      	movs	r3, #1
 800cb40:	6093      	str	r3, [r2, #8]
 800cb42:	6893      	ldr	r3, [r2, #8]
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d1fc      	bne.n	800cb42 <ai_platform_network_post_init+0x116>
 800cb48:	494a      	ldr	r1, [pc, #296]	; (800cc74 <ai_platform_network_post_init+0x248>)
 800cb4a:	4b4b      	ldr	r3, [pc, #300]	; (800cc78 <ai_platform_network_post_init+0x24c>)
 800cb4c:	6011      	str	r1, [r2, #0]
 800cb4e:	6812      	ldr	r2, [r2, #0]
 800cb50:	429a      	cmp	r2, r3
 800cb52:	d010      	beq.n	800cb76 <ai_platform_network_post_init+0x14a>
 800cb54:	e7fe      	b.n	800cb54 <ai_platform_network_post_init+0x128>
 800cb56:	4a49      	ldr	r2, [pc, #292]	; (800cc7c <ai_platform_network_post_init+0x250>)
 800cb58:	2301      	movs	r3, #1
 800cb5a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800cb5e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d1fb      	bne.n	800cb5e <ai_platform_network_post_init+0x132>
 800cb66:	4943      	ldr	r1, [pc, #268]	; (800cc74 <ai_platform_network_post_init+0x248>)
 800cb68:	4b43      	ldr	r3, [pc, #268]	; (800cc78 <ai_platform_network_post_init+0x24c>)
 800cb6a:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800cb6e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800cb72:	429a      	cmp	r2, r3
 800cb74:	d110      	bne.n	800cb98 <ai_platform_network_post_init+0x16c>
 800cb76:	f7fe fa09 	bl	800af8c <_ai_platform_release_crc>
 800cb7a:	2000      	movs	r0, #0
 800cb7c:	bd38      	pop	{r3, r4, r5, pc}
 800cb7e:	4a3c      	ldr	r2, [pc, #240]	; (800cc70 <ai_platform_network_post_init+0x244>)
 800cb80:	2301      	movs	r3, #1
 800cb82:	6093      	str	r3, [r2, #8]
 800cb84:	6893      	ldr	r3, [r2, #8]
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d1fc      	bne.n	800cb84 <ai_platform_network_post_init+0x158>
 800cb8a:	493a      	ldr	r1, [pc, #232]	; (800cc74 <ai_platform_network_post_init+0x248>)
 800cb8c:	4b3a      	ldr	r3, [pc, #232]	; (800cc78 <ai_platform_network_post_init+0x24c>)
 800cb8e:	6011      	str	r1, [r2, #0]
 800cb90:	6812      	ldr	r2, [r2, #0]
 800cb92:	429a      	cmp	r2, r3
 800cb94:	d080      	beq.n	800ca98 <ai_platform_network_post_init+0x6c>
 800cb96:	e7fe      	b.n	800cb96 <ai_platform_network_post_init+0x16a>
 800cb98:	e7fe      	b.n	800cb98 <ai_platform_network_post_init+0x16c>
 800cb9a:	4a38      	ldr	r2, [pc, #224]	; (800cc7c <ai_platform_network_post_init+0x250>)
 800cb9c:	2301      	movs	r3, #1
 800cb9e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800cba2:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d1fb      	bne.n	800cba2 <ai_platform_network_post_init+0x176>
 800cbaa:	4932      	ldr	r1, [pc, #200]	; (800cc74 <ai_platform_network_post_init+0x248>)
 800cbac:	4b32      	ldr	r3, [pc, #200]	; (800cc78 <ai_platform_network_post_init+0x24c>)
 800cbae:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800cbb2:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800cbb6:	429a      	cmp	r2, r3
 800cbb8:	f43f af6e 	beq.w	800ca98 <ai_platform_network_post_init+0x6c>
 800cbbc:	e7fe      	b.n	800cbbc <ai_platform_network_post_init+0x190>
 800cbbe:	2210      	movs	r2, #16
 800cbc0:	2111      	movs	r1, #17
 800cbc2:	18a0      	adds	r0, r4, r2
 800cbc4:	f000 fca2 	bl	800d50c <core_set_error>
 800cbc8:	4628      	mov	r0, r5
 800cbca:	bd38      	pop	{r3, r4, r5, pc}
 800cbcc:	4a2b      	ldr	r2, [pc, #172]	; (800cc7c <ai_platform_network_post_init+0x250>)
 800cbce:	2301      	movs	r3, #1
 800cbd0:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800cbd4:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d1fb      	bne.n	800cbd4 <ai_platform_network_post_init+0x1a8>
 800cbdc:	4925      	ldr	r1, [pc, #148]	; (800cc74 <ai_platform_network_post_init+0x248>)
 800cbde:	4b26      	ldr	r3, [pc, #152]	; (800cc78 <ai_platform_network_post_init+0x24c>)
 800cbe0:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800cbe4:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800cbe8:	429a      	cmp	r2, r3
 800cbea:	d0c4      	beq.n	800cb76 <ai_platform_network_post_init+0x14a>
 800cbec:	e7fe      	b.n	800cbec <ai_platform_network_post_init+0x1c0>
 800cbee:	4a23      	ldr	r2, [pc, #140]	; (800cc7c <ai_platform_network_post_init+0x250>)
 800cbf0:	2301      	movs	r3, #1
 800cbf2:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800cbf6:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d1fb      	bne.n	800cbf6 <ai_platform_network_post_init+0x1ca>
 800cbfe:	491d      	ldr	r1, [pc, #116]	; (800cc74 <ai_platform_network_post_init+0x248>)
 800cc00:	4b1d      	ldr	r3, [pc, #116]	; (800cc78 <ai_platform_network_post_init+0x24c>)
 800cc02:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800cc06:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800cc0a:	429a      	cmp	r2, r3
 800cc0c:	f43f af44 	beq.w	800ca98 <ai_platform_network_post_init+0x6c>
 800cc10:	e7fe      	b.n	800cc10 <ai_platform_network_post_init+0x1e4>
 800cc12:	4a17      	ldr	r2, [pc, #92]	; (800cc70 <ai_platform_network_post_init+0x244>)
 800cc14:	2301      	movs	r3, #1
 800cc16:	6093      	str	r3, [r2, #8]
 800cc18:	6893      	ldr	r3, [r2, #8]
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d1fc      	bne.n	800cc18 <ai_platform_network_post_init+0x1ec>
 800cc1e:	4915      	ldr	r1, [pc, #84]	; (800cc74 <ai_platform_network_post_init+0x248>)
 800cc20:	4b15      	ldr	r3, [pc, #84]	; (800cc78 <ai_platform_network_post_init+0x24c>)
 800cc22:	6011      	str	r1, [r2, #0]
 800cc24:	6812      	ldr	r2, [r2, #0]
 800cc26:	429a      	cmp	r2, r3
 800cc28:	f43f af36 	beq.w	800ca98 <ai_platform_network_post_init+0x6c>
 800cc2c:	e7fe      	b.n	800cc2c <ai_platform_network_post_init+0x200>
 800cc2e:	4a10      	ldr	r2, [pc, #64]	; (800cc70 <ai_platform_network_post_init+0x244>)
 800cc30:	2301      	movs	r3, #1
 800cc32:	6093      	str	r3, [r2, #8]
 800cc34:	6893      	ldr	r3, [r2, #8]
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d1fc      	bne.n	800cc34 <ai_platform_network_post_init+0x208>
 800cc3a:	490e      	ldr	r1, [pc, #56]	; (800cc74 <ai_platform_network_post_init+0x248>)
 800cc3c:	4b0e      	ldr	r3, [pc, #56]	; (800cc78 <ai_platform_network_post_init+0x24c>)
 800cc3e:	6011      	str	r1, [r2, #0]
 800cc40:	6812      	ldr	r2, [r2, #0]
 800cc42:	429a      	cmp	r2, r3
 800cc44:	d097      	beq.n	800cb76 <ai_platform_network_post_init+0x14a>
 800cc46:	e7fe      	b.n	800cc46 <ai_platform_network_post_init+0x21a>
 800cc48:	4a09      	ldr	r2, [pc, #36]	; (800cc70 <ai_platform_network_post_init+0x244>)
 800cc4a:	2301      	movs	r3, #1
 800cc4c:	6093      	str	r3, [r2, #8]
 800cc4e:	6893      	ldr	r3, [r2, #8]
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d1fc      	bne.n	800cc4e <ai_platform_network_post_init+0x222>
 800cc54:	4907      	ldr	r1, [pc, #28]	; (800cc74 <ai_platform_network_post_init+0x248>)
 800cc56:	4b08      	ldr	r3, [pc, #32]	; (800cc78 <ai_platform_network_post_init+0x24c>)
 800cc58:	6011      	str	r1, [r2, #0]
 800cc5a:	6812      	ldr	r2, [r2, #0]
 800cc5c:	429a      	cmp	r2, r3
 800cc5e:	f43f af1b 	beq.w	800ca98 <ai_platform_network_post_init+0x6c>
 800cc62:	e7fe      	b.n	800cc62 <ai_platform_network_post_init+0x236>
 800cc64:	a1c00100 	.word	0xa1c00100
 800cc68:	e0042000 	.word	0xe0042000
 800cc6c:	5c001000 	.word	0x5c001000
 800cc70:	40023000 	.word	0x40023000
 800cc74:	f407a5c2 	.word	0xf407a5c2
 800cc78:	b5e8b5cd 	.word	0xb5e8b5cd
 800cc7c:	58024000 	.word	0x58024000

0800cc80 <ai_platform_network_process>:
 800cc80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc84:	b085      	sub	sp, #20
 800cc86:	460e      	mov	r6, r1
 800cc88:	4605      	mov	r5, r0
 800cc8a:	9201      	str	r2, [sp, #4]
 800cc8c:	b120      	cbz	r0, 800cc98 <ai_platform_network_process+0x18>
 800cc8e:	4b24      	ldr	r3, [pc, #144]	; (800cd20 <ai_platform_network_process+0xa0>)
 800cc90:	6802      	ldr	r2, [r0, #0]
 800cc92:	429a      	cmp	r2, r3
 800cc94:	bf18      	it	ne
 800cc96:	2500      	movne	r5, #0
 800cc98:	f7fe f976 	bl	800af88 <_ai_platform_acquire_crc>
 800cc9c:	4b21      	ldr	r3, [pc, #132]	; (800cd24 <ai_platform_network_process+0xa4>)
 800cc9e:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cca8:	185a      	adds	r2, r3, r1
 800ccaa:	2a01      	cmp	r2, #1
 800ccac:	d92b      	bls.n	800cd06 <ai_platform_network_process+0x86>
 800ccae:	f240 4249 	movw	r2, #1097	; 0x449
 800ccb2:	4293      	cmp	r3, r2
 800ccb4:	d027      	beq.n	800cd06 <ai_platform_network_process+0x86>
 800ccb6:	4a1c      	ldr	r2, [pc, #112]	; (800cd28 <ai_platform_network_process+0xa8>)
 800ccb8:	6813      	ldr	r3, [r2, #0]
 800ccba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ccbe:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800ccc2:	d039      	beq.n	800cd38 <ai_platform_network_process+0xb8>
 800ccc4:	6813      	ldr	r3, [r2, #0]
 800ccc6:	f240 4183 	movw	r1, #1155	; 0x483
 800ccca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ccce:	428b      	cmp	r3, r1
 800ccd0:	f000 819c 	beq.w	800d00c <ai_platform_network_process+0x38c>
 800ccd4:	6813      	ldr	r3, [r2, #0]
 800ccd6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ccda:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800ccde:	f000 8179 	beq.w	800cfd4 <ai_platform_network_process+0x354>
 800cce2:	6813      	ldr	r3, [r2, #0]
 800cce4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d136      	bne.n	800cd5a <ai_platform_network_process+0xda>
 800ccec:	4a0f      	ldr	r2, [pc, #60]	; (800cd2c <ai_platform_network_process+0xac>)
 800ccee:	2301      	movs	r3, #1
 800ccf0:	6093      	str	r3, [r2, #8]
 800ccf2:	6893      	ldr	r3, [r2, #8]
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d1fc      	bne.n	800ccf2 <ai_platform_network_process+0x72>
 800ccf8:	4b0d      	ldr	r3, [pc, #52]	; (800cd30 <ai_platform_network_process+0xb0>)
 800ccfa:	6013      	str	r3, [r2, #0]
 800ccfc:	4b0d      	ldr	r3, [pc, #52]	; (800cd34 <ai_platform_network_process+0xb4>)
 800ccfe:	6812      	ldr	r2, [r2, #0]
 800cd00:	429a      	cmp	r2, r3
 800cd02:	d02a      	beq.n	800cd5a <ai_platform_network_process+0xda>
 800cd04:	e7fe      	b.n	800cd04 <ai_platform_network_process+0x84>
 800cd06:	4a09      	ldr	r2, [pc, #36]	; (800cd2c <ai_platform_network_process+0xac>)
 800cd08:	2301      	movs	r3, #1
 800cd0a:	6093      	str	r3, [r2, #8]
 800cd0c:	6893      	ldr	r3, [r2, #8]
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d1fc      	bne.n	800cd0c <ai_platform_network_process+0x8c>
 800cd12:	4b07      	ldr	r3, [pc, #28]	; (800cd30 <ai_platform_network_process+0xb0>)
 800cd14:	6013      	str	r3, [r2, #0]
 800cd16:	4b07      	ldr	r3, [pc, #28]	; (800cd34 <ai_platform_network_process+0xb4>)
 800cd18:	6812      	ldr	r2, [r2, #0]
 800cd1a:	429a      	cmp	r2, r3
 800cd1c:	d01d      	beq.n	800cd5a <ai_platform_network_process+0xda>
 800cd1e:	e7fe      	b.n	800cd1e <ai_platform_network_process+0x9e>
 800cd20:	a1c00100 	.word	0xa1c00100
 800cd24:	e0042000 	.word	0xe0042000
 800cd28:	5c001000 	.word	0x5c001000
 800cd2c:	40023000 	.word	0x40023000
 800cd30:	f407a5c2 	.word	0xf407a5c2
 800cd34:	b5e8b5cd 	.word	0xb5e8b5cd
 800cd38:	4ab0      	ldr	r2, [pc, #704]	; (800cffc <ai_platform_network_process+0x37c>)
 800cd3a:	2301      	movs	r3, #1
 800cd3c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800cd40:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d1fb      	bne.n	800cd40 <ai_platform_network_process+0xc0>
 800cd48:	4bad      	ldr	r3, [pc, #692]	; (800d000 <ai_platform_network_process+0x380>)
 800cd4a:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800cd4e:	4bad      	ldr	r3, [pc, #692]	; (800d004 <ai_platform_network_process+0x384>)
 800cd50:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800cd54:	429a      	cmp	r2, r3
 800cd56:	f040 812b 	bne.w	800cfb0 <ai_platform_network_process+0x330>
 800cd5a:	f7fe f917 	bl	800af8c <_ai_platform_release_crc>
 800cd5e:	2d00      	cmp	r5, #0
 800cd60:	f000 8172 	beq.w	800d048 <ai_platform_network_process+0x3c8>
 800cd64:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	f000 8123 	beq.w	800cfb2 <ai_platform_network_process+0x332>
 800cd6c:	68eb      	ldr	r3, [r5, #12]
 800cd6e:	2200      	movs	r2, #0
 800cd70:	f8d5 8030 	ldr.w	r8, [r5, #48]	; 0x30
 800cd74:	f003 0303 	and.w	r3, r3, #3
 800cd78:	616a      	str	r2, [r5, #20]
 800cd7a:	2b03      	cmp	r3, #3
 800cd7c:	f040 811f 	bne.w	800cfbe <ai_platform_network_process+0x33e>
 800cd80:	2e00      	cmp	r6, #0
 800cd82:	f000 8156 	beq.w	800d032 <ai_platform_network_process+0x3b2>
 800cd86:	fab8 f788 	clz	r7, r8
 800cd8a:	097f      	lsrs	r7, r7, #5
 800cd8c:	f1b8 0f00 	cmp.w	r8, #0
 800cd90:	f000 814f 	beq.w	800d032 <ai_platform_network_process+0x3b2>
 800cd94:	f8b8 3000 	ldrh.w	r3, [r8]
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	f000 814a 	beq.w	800d032 <ai_platform_network_process+0x3b2>
 800cd9e:	69b3      	ldr	r3, [r6, #24]
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	e9cd 3502 	strd	r3, r5, [sp, #8]
 800cda6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d072      	beq.n	800ce94 <ai_platform_network_process+0x214>
 800cdae:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 800cdb2:	2c00      	cmp	r4, #0
 800cdb4:	d06e      	beq.n	800ce94 <ai_platform_network_process+0x214>
 800cdb6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cdba:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 800cdbe:	f8d3 a000 	ldr.w	sl, [r3]
 800cdc2:	eb1a 1907 	adds.w	r9, sl, r7, lsl #4
 800cdc6:	f000 8133 	beq.w	800d030 <ai_platform_network_process+0x3b0>
 800cdca:	69a3      	ldr	r3, [r4, #24]
 800cdcc:	2101      	movs	r1, #1
 800cdce:	4630      	mov	r0, r6
 800cdd0:	685d      	ldr	r5, [r3, #4]
 800cdd2:	f7fd fff1 	bl	800adb8 <ai_buffer_get_size>
 800cdd6:	4285      	cmp	r5, r0
 800cdd8:	f0c0 8138 	bcc.w	800d04c <ai_platform_network_process+0x3cc>
 800cddc:	68e0      	ldr	r0, [r4, #12]
 800cdde:	69b1      	ldr	r1, [r6, #24]
 800cde0:	68c2      	ldr	r2, [r0, #12]
 800cde2:	68cb      	ldr	r3, [r1, #12]
 800cde4:	429a      	cmp	r2, r3
 800cde6:	f040 8131 	bne.w	800d04c <ai_platform_network_process+0x3cc>
 800cdea:	6882      	ldr	r2, [r0, #8]
 800cdec:	688b      	ldr	r3, [r1, #8]
 800cdee:	429a      	cmp	r2, r3
 800cdf0:	f040 812c 	bne.w	800d04c <ai_platform_network_process+0x3cc>
 800cdf4:	6842      	ldr	r2, [r0, #4]
 800cdf6:	684b      	ldr	r3, [r1, #4]
 800cdf8:	429a      	cmp	r2, r3
 800cdfa:	f040 8127 	bne.w	800d04c <ai_platform_network_process+0x3cc>
 800cdfe:	69a3      	ldr	r3, [r4, #24]
 800ce00:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ce04:	f7fd ffc8 	bl	800ad98 <ai_array_get_data_byte_size>
 800ce08:	4605      	mov	r5, r0
 800ce0a:	4620      	mov	r0, r4
 800ce0c:	f7fd ff1a 	bl	800ac44 <get_tensor_byte_size>
 800ce10:	4285      	cmp	r5, r0
 800ce12:	f0c0 811b 	bcc.w	800d04c <ai_platform_network_process+0x3cc>
 800ce16:	69a3      	ldr	r3, [r4, #24]
 800ce18:	6818      	ldr	r0, [r3, #0]
 800ce1a:	f7fd ff29 	bl	800ac70 <ai_array_to_buffer_fmt>
 800ce1e:	6833      	ldr	r3, [r6, #0]
 800ce20:	4058      	eors	r0, r3
 800ce22:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 800ce26:	f040 81ca 	bne.w	800d1be <ai_platform_network_process+0x53e>
 800ce2a:	6873      	ldr	r3, [r6, #4]
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	f000 81bd 	beq.w	800d1ac <ai_platform_network_process+0x52c>
 800ce32:	69b3      	ldr	r3, [r6, #24]
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	f000 81ca 	beq.w	800d1d0 <ai_platform_network_process+0x550>
 800ce3c:	9a02      	ldr	r2, [sp, #8]
 800ce3e:	4620      	mov	r0, r4
 800ce40:	3701      	adds	r7, #1
 800ce42:	361c      	adds	r6, #28
 800ce44:	429a      	cmp	r2, r3
 800ce46:	bf38      	it	cc
 800ce48:	461a      	movcc	r2, r3
 800ce4a:	9202      	str	r2, [sp, #8]
 800ce4c:	f7fd fefa 	bl	800ac44 <get_tensor_byte_size>
 800ce50:	f8c9 0008 	str.w	r0, [r9, #8]
 800ce54:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	fb00 f303 	mul.w	r3, r0, r3
 800ce5e:	f8c9 300c 	str.w	r3, [r9, #12]
 800ce62:	f856 1c18 	ldr.w	r1, [r6, #-24]
 800ce66:	440b      	add	r3, r1
 800ce68:	f8c9 1004 	str.w	r1, [r9, #4]
 800ce6c:	f84a 300b 	str.w	r3, [sl, fp]
 800ce70:	69a0      	ldr	r0, [r4, #24]
 800ce72:	6803      	ldr	r3, [r0, #0]
 800ce74:	009a      	lsls	r2, r3, #2
 800ce76:	f100 80bb 	bmi.w	800cff0 <ai_platform_network_process+0x370>
 800ce7a:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800ce7e:	1a9b      	subs	r3, r3, r2
 800ce80:	4419      	add	r1, r3
 800ce82:	6081      	str	r1, [r0, #8]
 800ce84:	69a3      	ldr	r3, [r4, #24]
 800ce86:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800ce8a:	60da      	str	r2, [r3, #12]
 800ce8c:	f8b8 3000 	ldrh.w	r3, [r8]
 800ce90:	42bb      	cmp	r3, r7
 800ce92:	d888      	bhi.n	800cda6 <ai_platform_network_process+0x126>
 800ce94:	9d03      	ldr	r5, [sp, #12]
 800ce96:	9b01      	ldr	r3, [sp, #4]
 800ce98:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	f000 81a1 	beq.w	800d1e2 <ai_platform_network_process+0x562>
 800cea0:	2a01      	cmp	r2, #1
 800cea2:	f240 817b 	bls.w	800d19c <ai_platform_network_process+0x51c>
 800cea6:	f8d5 9030 	ldr.w	r9, [r5, #48]	; 0x30
 800ceaa:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	f000 8174 	beq.w	800d19c <ai_platform_network_process+0x51c>
 800ceb4:	9e01      	ldr	r6, [sp, #4]
 800ceb6:	2700      	movs	r7, #0
 800ceb8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	f000 80d3 	beq.w	800d068 <ai_platform_network_process+0x3e8>
 800cec2:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 800cec6:	2c00      	cmp	r4, #0
 800cec8:	f000 80ce 	beq.w	800d068 <ai_platform_network_process+0x3e8>
 800cecc:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800ced0:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 800ced4:	f8d3 8000 	ldr.w	r8, [r3]
 800ced8:	eb18 1a07 	adds.w	sl, r8, r7, lsl #4
 800cedc:	f000 819f 	beq.w	800d21e <ai_platform_network_process+0x59e>
 800cee0:	69a3      	ldr	r3, [r4, #24]
 800cee2:	2101      	movs	r1, #1
 800cee4:	4630      	mov	r0, r6
 800cee6:	685b      	ldr	r3, [r3, #4]
 800cee8:	9301      	str	r3, [sp, #4]
 800ceea:	f7fd ff65 	bl	800adb8 <ai_buffer_get_size>
 800ceee:	9b01      	ldr	r3, [sp, #4]
 800cef0:	4283      	cmp	r3, r0
 800cef2:	f0c0 8153 	bcc.w	800d19c <ai_platform_network_process+0x51c>
 800cef6:	68e0      	ldr	r0, [r4, #12]
 800cef8:	69b1      	ldr	r1, [r6, #24]
 800cefa:	68c2      	ldr	r2, [r0, #12]
 800cefc:	68cb      	ldr	r3, [r1, #12]
 800cefe:	429a      	cmp	r2, r3
 800cf00:	f040 814c 	bne.w	800d19c <ai_platform_network_process+0x51c>
 800cf04:	6882      	ldr	r2, [r0, #8]
 800cf06:	688b      	ldr	r3, [r1, #8]
 800cf08:	429a      	cmp	r2, r3
 800cf0a:	f040 8147 	bne.w	800d19c <ai_platform_network_process+0x51c>
 800cf0e:	6842      	ldr	r2, [r0, #4]
 800cf10:	684b      	ldr	r3, [r1, #4]
 800cf12:	429a      	cmp	r2, r3
 800cf14:	f040 8142 	bne.w	800d19c <ai_platform_network_process+0x51c>
 800cf18:	69a3      	ldr	r3, [r4, #24]
 800cf1a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800cf1e:	f7fd ff3b 	bl	800ad98 <ai_array_get_data_byte_size>
 800cf22:	9001      	str	r0, [sp, #4]
 800cf24:	4620      	mov	r0, r4
 800cf26:	f7fd fe8d 	bl	800ac44 <get_tensor_byte_size>
 800cf2a:	9b01      	ldr	r3, [sp, #4]
 800cf2c:	4283      	cmp	r3, r0
 800cf2e:	f0c0 8135 	bcc.w	800d19c <ai_platform_network_process+0x51c>
 800cf32:	69a3      	ldr	r3, [r4, #24]
 800cf34:	6818      	ldr	r0, [r3, #0]
 800cf36:	f7fd fe9b 	bl	800ac70 <ai_array_to_buffer_fmt>
 800cf3a:	6833      	ldr	r3, [r6, #0]
 800cf3c:	4058      	eors	r0, r3
 800cf3e:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 800cf42:	f040 815c 	bne.w	800d1fe <ai_platform_network_process+0x57e>
 800cf46:	6873      	ldr	r3, [r6, #4]
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	f000 8150 	beq.w	800d1ee <ai_platform_network_process+0x56e>
 800cf4e:	69b3      	ldr	r3, [r6, #24]
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	f000 815b 	beq.w	800d20e <ai_platform_network_process+0x58e>
 800cf58:	9a02      	ldr	r2, [sp, #8]
 800cf5a:	4620      	mov	r0, r4
 800cf5c:	3701      	adds	r7, #1
 800cf5e:	361c      	adds	r6, #28
 800cf60:	429a      	cmp	r2, r3
 800cf62:	bf38      	it	cc
 800cf64:	461a      	movcc	r2, r3
 800cf66:	9202      	str	r2, [sp, #8]
 800cf68:	f7fd fe6c 	bl	800ac44 <get_tensor_byte_size>
 800cf6c:	f8ca 0008 	str.w	r0, [sl, #8]
 800cf70:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	fb00 f303 	mul.w	r3, r0, r3
 800cf7a:	f8ca 300c 	str.w	r3, [sl, #12]
 800cf7e:	f856 1c18 	ldr.w	r1, [r6, #-24]
 800cf82:	440b      	add	r3, r1
 800cf84:	f8ca 1004 	str.w	r1, [sl, #4]
 800cf88:	f848 300b 	str.w	r3, [r8, fp]
 800cf8c:	69a0      	ldr	r0, [r4, #24]
 800cf8e:	6803      	ldr	r3, [r0, #0]
 800cf90:	009b      	lsls	r3, r3, #2
 800cf92:	d464      	bmi.n	800d05e <ai_platform_network_process+0x3de>
 800cf94:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800cf98:	1a9b      	subs	r3, r3, r2
 800cf9a:	4419      	add	r1, r3
 800cf9c:	6081      	str	r1, [r0, #8]
 800cf9e:	69a3      	ldr	r3, [r4, #24]
 800cfa0:	f8da 2004 	ldr.w	r2, [sl, #4]
 800cfa4:	60da      	str	r2, [r3, #12]
 800cfa6:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800cfaa:	429f      	cmp	r7, r3
 800cfac:	d384      	bcc.n	800ceb8 <ai_platform_network_process+0x238>
 800cfae:	e05b      	b.n	800d068 <ai_platform_network_process+0x3e8>
 800cfb0:	e7fe      	b.n	800cfb0 <ai_platform_network_process+0x330>
 800cfb2:	68ea      	ldr	r2, [r5, #12]
 800cfb4:	616b      	str	r3, [r5, #20]
 800cfb6:	f002 0203 	and.w	r2, r2, #3
 800cfba:	2a03      	cmp	r2, #3
 800cfbc:	d039      	beq.n	800d032 <ai_platform_network_process+0x3b2>
 800cfbe:	2230      	movs	r2, #48	; 0x30
 800cfc0:	2111      	movs	r1, #17
 800cfc2:	f105 0010 	add.w	r0, r5, #16
 800cfc6:	2400      	movs	r4, #0
 800cfc8:	f000 faa0 	bl	800d50c <core_set_error>
 800cfcc:	4620      	mov	r0, r4
 800cfce:	b005      	add	sp, #20
 800cfd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfd4:	4a0c      	ldr	r2, [pc, #48]	; (800d008 <ai_platform_network_process+0x388>)
 800cfd6:	2301      	movs	r3, #1
 800cfd8:	6093      	str	r3, [r2, #8]
 800cfda:	6893      	ldr	r3, [r2, #8]
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d1fc      	bne.n	800cfda <ai_platform_network_process+0x35a>
 800cfe0:	4b07      	ldr	r3, [pc, #28]	; (800d000 <ai_platform_network_process+0x380>)
 800cfe2:	6013      	str	r3, [r2, #0]
 800cfe4:	4b07      	ldr	r3, [pc, #28]	; (800d004 <ai_platform_network_process+0x384>)
 800cfe6:	6812      	ldr	r2, [r2, #0]
 800cfe8:	429a      	cmp	r2, r3
 800cfea:	f43f aeb6 	beq.w	800cd5a <ai_platform_network_process+0xda>
 800cfee:	e7fe      	b.n	800cfee <ai_platform_network_process+0x36e>
 800cff0:	f8b8 3000 	ldrh.w	r3, [r8]
 800cff4:	429f      	cmp	r7, r3
 800cff6:	f4ff aed6 	bcc.w	800cda6 <ai_platform_network_process+0x126>
 800cffa:	e74b      	b.n	800ce94 <ai_platform_network_process+0x214>
 800cffc:	58024000 	.word	0x58024000
 800d000:	f407a5c2 	.word	0xf407a5c2
 800d004:	b5e8b5cd 	.word	0xb5e8b5cd
 800d008:	40023000 	.word	0x40023000
 800d00c:	4a88      	ldr	r2, [pc, #544]	; (800d230 <ai_platform_network_process+0x5b0>)
 800d00e:	2301      	movs	r3, #1
 800d010:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800d014:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d1fb      	bne.n	800d014 <ai_platform_network_process+0x394>
 800d01c:	4b85      	ldr	r3, [pc, #532]	; (800d234 <ai_platform_network_process+0x5b4>)
 800d01e:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800d022:	4b85      	ldr	r3, [pc, #532]	; (800d238 <ai_platform_network_process+0x5b8>)
 800d024:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800d028:	429a      	cmp	r2, r3
 800d02a:	f43f ae96 	beq.w	800cd5a <ai_platform_network_process+0xda>
 800d02e:	e7fe      	b.n	800d02e <ai_platform_network_process+0x3ae>
 800d030:	9d03      	ldr	r5, [sp, #12]
 800d032:	2400      	movs	r4, #0
 800d034:	2217      	movs	r2, #23
 800d036:	2112      	movs	r1, #18
 800d038:	f105 0010 	add.w	r0, r5, #16
 800d03c:	f000 fa66 	bl	800d50c <core_set_error>
 800d040:	4620      	mov	r0, r4
 800d042:	b005      	add	sp, #20
 800d044:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d048:	462c      	mov	r4, r5
 800d04a:	e7bf      	b.n	800cfcc <ai_platform_network_process+0x34c>
 800d04c:	9d03      	ldr	r5, [sp, #12]
 800d04e:	2218      	movs	r2, #24
 800d050:	2112      	movs	r1, #18
 800d052:	2400      	movs	r4, #0
 800d054:	f105 0010 	add.w	r0, r5, #16
 800d058:	f000 fa58 	bl	800d50c <core_set_error>
 800d05c:	e7b6      	b.n	800cfcc <ai_platform_network_process+0x34c>
 800d05e:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800d062:	429f      	cmp	r7, r3
 800d064:	f4ff af28 	bcc.w	800ceb8 <ai_platform_network_process+0x238>
 800d068:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800d06c:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 800d06e:	82ab      	strh	r3, [r5, #20]
 800d070:	2a00      	cmp	r2, #0
 800d072:	f040 808d 	bne.w	800d190 <ai_platform_network_process+0x510>
 800d076:	4616      	mov	r6, r2
 800d078:	4617      	mov	r7, r2
 800d07a:	8aec      	ldrh	r4, [r5, #22]
 800d07c:	429c      	cmp	r4, r3
 800d07e:	d2a5      	bcs.n	800cfcc <ai_platform_network_process+0x34c>
 800d080:	46ab      	mov	fp, r5
 800d082:	2e00      	cmp	r6, #0
 800d084:	d030      	beq.n	800d0e8 <ai_platform_network_process+0x468>
 800d086:	f04f 0800 	mov.w	r8, #0
 800d08a:	e014      	b.n	800d0b6 <ai_platform_network_process+0x436>
 800d08c:	6882      	ldr	r2, [r0, #8]
 800d08e:	68c5      	ldr	r5, [r0, #12]
 800d090:	6863      	ldr	r3, [r4, #4]
 800d092:	1b52      	subs	r2, r2, r5
 800d094:	4413      	add	r3, r2
 800d096:	6083      	str	r3, [r0, #8]
 800d098:	698b      	ldr	r3, [r1, #24]
 800d09a:	6862      	ldr	r2, [r4, #4]
 800d09c:	60da      	str	r2, [r3, #12]
 800d09e:	f859 200a 	ldr.w	r2, [r9, sl]
 800d0a2:	f108 0801 	add.w	r8, r8, #1
 800d0a6:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 800d0aa:	440b      	add	r3, r1
 800d0ac:	4293      	cmp	r3, r2
 800d0ae:	d301      	bcc.n	800d0b4 <ai_platform_network_process+0x434>
 800d0b0:	68e3      	ldr	r3, [r4, #12]
 800d0b2:	1ad3      	subs	r3, r2, r3
 800d0b4:	6063      	str	r3, [r4, #4]
 800d0b6:	8833      	ldrh	r3, [r6, #0]
 800d0b8:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 800d0bc:	4543      	cmp	r3, r8
 800d0be:	d913      	bls.n	800d0e8 <ai_platform_network_process+0x468>
 800d0c0:	6873      	ldr	r3, [r6, #4]
 800d0c2:	b18b      	cbz	r3, 800d0e8 <ai_platform_network_process+0x468>
 800d0c4:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 800d0c8:	b171      	cbz	r1, 800d0e8 <ai_platform_network_process+0x468>
 800d0ca:	6988      	ldr	r0, [r1, #24]
 800d0cc:	68b2      	ldr	r2, [r6, #8]
 800d0ce:	6803      	ldr	r3, [r0, #0]
 800d0d0:	f8d2 9000 	ldr.w	r9, [r2]
 800d0d4:	009d      	lsls	r5, r3, #2
 800d0d6:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 800d0da:	d5d7      	bpl.n	800d08c <ai_platform_network_process+0x40c>
 800d0dc:	6880      	ldr	r0, [r0, #8]
 800d0de:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 800d0e2:	f005 f865 	bl	80121b0 <memcpy>
 800d0e6:	e7da      	b.n	800d09e <ai_platform_network_process+0x41e>
 800d0e8:	4658      	mov	r0, fp
 800d0ea:	f004 ffd3 	bl	8012094 <ai_layers_forward_all>
 800d0ee:	2f00      	cmp	r7, #0
 800d0f0:	d03f      	beq.n	800d172 <ai_platform_network_process+0x4f2>
 800d0f2:	2400      	movs	r4, #0
 800d0f4:	e016      	b.n	800d124 <ai_platform_network_process+0x4a4>
 800d0f6:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 800d0fa:	f859 100a 	ldr.w	r1, [r9, sl]
 800d0fe:	4413      	add	r3, r2
 800d100:	428b      	cmp	r3, r1
 800d102:	d302      	bcc.n	800d10a <ai_platform_network_process+0x48a>
 800d104:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d108:	1acb      	subs	r3, r1, r3
 800d10a:	f8c8 3004 	str.w	r3, [r8, #4]
 800d10e:	6981      	ldr	r1, [r0, #24]
 800d110:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 800d114:	1b52      	subs	r2, r2, r5
 800d116:	4413      	add	r3, r2
 800d118:	608b      	str	r3, [r1, #8]
 800d11a:	6983      	ldr	r3, [r0, #24]
 800d11c:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800d120:	60da      	str	r2, [r3, #12]
 800d122:	3401      	adds	r4, #1
 800d124:	883b      	ldrh	r3, [r7, #0]
 800d126:	42a3      	cmp	r3, r4
 800d128:	d923      	bls.n	800d172 <ai_platform_network_process+0x4f2>
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	b30b      	cbz	r3, 800d172 <ai_platform_network_process+0x4f2>
 800d12e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800d132:	b1f0      	cbz	r0, 800d172 <ai_platform_network_process+0x4f2>
 800d134:	68ba      	ldr	r2, [r7, #8]
 800d136:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 800d13a:	6983      	ldr	r3, [r0, #24]
 800d13c:	f8d2 9000 	ldr.w	r9, [r2]
 800d140:	681a      	ldr	r2, [r3, #0]
 800d142:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 800d146:	0092      	lsls	r2, r2, #2
 800d148:	d5d5      	bpl.n	800d0f6 <ai_platform_network_process+0x476>
 800d14a:	f8d8 2008 	ldr.w	r2, [r8, #8]
 800d14e:	6899      	ldr	r1, [r3, #8]
 800d150:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800d154:	f005 f82c 	bl	80121b0 <memcpy>
 800d158:	f859 200a 	ldr.w	r2, [r9, sl]
 800d15c:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 800d160:	440b      	add	r3, r1
 800d162:	4293      	cmp	r3, r2
 800d164:	d302      	bcc.n	800d16c <ai_platform_network_process+0x4ec>
 800d166:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d16a:	1ad3      	subs	r3, r2, r3
 800d16c:	f8c8 3004 	str.w	r3, [r8, #4]
 800d170:	e7d7      	b.n	800d122 <ai_platform_network_process+0x4a2>
 800d172:	f8bb 4016 	ldrh.w	r4, [fp, #22]
 800d176:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 800d17a:	3401      	adds	r4, #1
 800d17c:	b2a4      	uxth	r4, r4
 800d17e:	42a3      	cmp	r3, r4
 800d180:	f8ab 4016 	strh.w	r4, [fp, #22]
 800d184:	f63f af7d 	bhi.w	800d082 <ai_platform_network_process+0x402>
 800d188:	4620      	mov	r0, r4
 800d18a:	b005      	add	sp, #20
 800d18c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d190:	2a01      	cmp	r2, #1
 800d192:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 800d194:	d029      	beq.n	800d1ea <ai_platform_network_process+0x56a>
 800d196:	f106 070c 	add.w	r7, r6, #12
 800d19a:	e76e      	b.n	800d07a <ai_platform_network_process+0x3fa>
 800d19c:	2218      	movs	r2, #24
 800d19e:	2113      	movs	r1, #19
 800d1a0:	f105 0010 	add.w	r0, r5, #16
 800d1a4:	2400      	movs	r4, #0
 800d1a6:	f000 f9b1 	bl	800d50c <core_set_error>
 800d1aa:	e70f      	b.n	800cfcc <ai_platform_network_process+0x34c>
 800d1ac:	9d03      	ldr	r5, [sp, #12]
 800d1ae:	4604      	mov	r4, r0
 800d1b0:	2217      	movs	r2, #23
 800d1b2:	2112      	movs	r1, #18
 800d1b4:	f105 0010 	add.w	r0, r5, #16
 800d1b8:	f000 f9a8 	bl	800d50c <core_set_error>
 800d1bc:	e706      	b.n	800cfcc <ai_platform_network_process+0x34c>
 800d1be:	9d03      	ldr	r5, [sp, #12]
 800d1c0:	2219      	movs	r2, #25
 800d1c2:	2112      	movs	r1, #18
 800d1c4:	2400      	movs	r4, #0
 800d1c6:	f105 0010 	add.w	r0, r5, #16
 800d1ca:	f000 f99f 	bl	800d50c <core_set_error>
 800d1ce:	e6fd      	b.n	800cfcc <ai_platform_network_process+0x34c>
 800d1d0:	9d03      	ldr	r5, [sp, #12]
 800d1d2:	4604      	mov	r4, r0
 800d1d4:	2221      	movs	r2, #33	; 0x21
 800d1d6:	2112      	movs	r1, #18
 800d1d8:	f105 0010 	add.w	r0, r5, #16
 800d1dc:	f000 f996 	bl	800d50c <core_set_error>
 800d1e0:	e6f4      	b.n	800cfcc <ai_platform_network_process+0x34c>
 800d1e2:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800d1e6:	82ab      	strh	r3, [r5, #20]
 800d1e8:	e742      	b.n	800d070 <ai_platform_network_process+0x3f0>
 800d1ea:	2700      	movs	r7, #0
 800d1ec:	e745      	b.n	800d07a <ai_platform_network_process+0x3fa>
 800d1ee:	4604      	mov	r4, r0
 800d1f0:	2217      	movs	r2, #23
 800d1f2:	2113      	movs	r1, #19
 800d1f4:	f105 0010 	add.w	r0, r5, #16
 800d1f8:	f000 f988 	bl	800d50c <core_set_error>
 800d1fc:	e6e6      	b.n	800cfcc <ai_platform_network_process+0x34c>
 800d1fe:	2219      	movs	r2, #25
 800d200:	2113      	movs	r1, #19
 800d202:	f105 0010 	add.w	r0, r5, #16
 800d206:	2400      	movs	r4, #0
 800d208:	f000 f980 	bl	800d50c <core_set_error>
 800d20c:	e6de      	b.n	800cfcc <ai_platform_network_process+0x34c>
 800d20e:	4604      	mov	r4, r0
 800d210:	2221      	movs	r2, #33	; 0x21
 800d212:	2113      	movs	r1, #19
 800d214:	f105 0010 	add.w	r0, r5, #16
 800d218:	f000 f978 	bl	800d50c <core_set_error>
 800d21c:	e6d6      	b.n	800cfcc <ai_platform_network_process+0x34c>
 800d21e:	2217      	movs	r2, #23
 800d220:	2113      	movs	r1, #19
 800d222:	f105 0010 	add.w	r0, r5, #16
 800d226:	4654      	mov	r4, sl
 800d228:	f000 f970 	bl	800d50c <core_set_error>
 800d22c:	e6ce      	b.n	800cfcc <ai_platform_network_process+0x34c>
 800d22e:	bf00      	nop
 800d230:	58024000 	.word	0x58024000
 800d234:	f407a5c2 	.word	0xf407a5c2
 800d238:	b5e8b5cd 	.word	0xb5e8b5cd

0800d23c <ai_platform_observer_register_s>:
 800d23c:	b570      	push	{r4, r5, r6, lr}
 800d23e:	4604      	mov	r4, r0
 800d240:	460d      	mov	r5, r1
 800d242:	b120      	cbz	r0, 800d24e <ai_platform_observer_register_s+0x12>
 800d244:	4b56      	ldr	r3, [pc, #344]	; (800d3a0 <ai_platform_observer_register_s+0x164>)
 800d246:	6802      	ldr	r2, [r0, #0]
 800d248:	429a      	cmp	r2, r3
 800d24a:	bf18      	it	ne
 800d24c:	2400      	movne	r4, #0
 800d24e:	f7fd fe9b 	bl	800af88 <_ai_platform_acquire_crc>
 800d252:	4b54      	ldr	r3, [pc, #336]	; (800d3a4 <ai_platform_observer_register_s+0x168>)
 800d254:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d25e:	189a      	adds	r2, r3, r2
 800d260:	2a01      	cmp	r2, #1
 800d262:	d929      	bls.n	800d2b8 <ai_platform_observer_register_s+0x7c>
 800d264:	f240 4249 	movw	r2, #1097	; 0x449
 800d268:	4293      	cmp	r3, r2
 800d26a:	d025      	beq.n	800d2b8 <ai_platform_observer_register_s+0x7c>
 800d26c:	4a4e      	ldr	r2, [pc, #312]	; (800d3a8 <ai_platform_observer_register_s+0x16c>)
 800d26e:	6813      	ldr	r3, [r2, #0]
 800d270:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d274:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800d278:	d02b      	beq.n	800d2d2 <ai_platform_observer_register_s+0x96>
 800d27a:	6813      	ldr	r3, [r2, #0]
 800d27c:	f240 4183 	movw	r1, #1155	; 0x483
 800d280:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d284:	428b      	cmp	r3, r1
 800d286:	d077      	beq.n	800d378 <ai_platform_observer_register_s+0x13c>
 800d288:	6813      	ldr	r3, [r2, #0]
 800d28a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d28e:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800d292:	d05c      	beq.n	800d34e <ai_platform_observer_register_s+0x112>
 800d294:	6813      	ldr	r3, [r2, #0]
 800d296:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d129      	bne.n	800d2f2 <ai_platform_observer_register_s+0xb6>
 800d29e:	4a43      	ldr	r2, [pc, #268]	; (800d3ac <ai_platform_observer_register_s+0x170>)
 800d2a0:	2301      	movs	r3, #1
 800d2a2:	6093      	str	r3, [r2, #8]
 800d2a4:	6893      	ldr	r3, [r2, #8]
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d1fc      	bne.n	800d2a4 <ai_platform_observer_register_s+0x68>
 800d2aa:	4b41      	ldr	r3, [pc, #260]	; (800d3b0 <ai_platform_observer_register_s+0x174>)
 800d2ac:	6013      	str	r3, [r2, #0]
 800d2ae:	4b41      	ldr	r3, [pc, #260]	; (800d3b4 <ai_platform_observer_register_s+0x178>)
 800d2b0:	6812      	ldr	r2, [r2, #0]
 800d2b2:	429a      	cmp	r2, r3
 800d2b4:	d01d      	beq.n	800d2f2 <ai_platform_observer_register_s+0xb6>
 800d2b6:	e7fe      	b.n	800d2b6 <ai_platform_observer_register_s+0x7a>
 800d2b8:	4a3c      	ldr	r2, [pc, #240]	; (800d3ac <ai_platform_observer_register_s+0x170>)
 800d2ba:	2301      	movs	r3, #1
 800d2bc:	6093      	str	r3, [r2, #8]
 800d2be:	6893      	ldr	r3, [r2, #8]
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d1fc      	bne.n	800d2be <ai_platform_observer_register_s+0x82>
 800d2c4:	4b3a      	ldr	r3, [pc, #232]	; (800d3b0 <ai_platform_observer_register_s+0x174>)
 800d2c6:	6013      	str	r3, [r2, #0]
 800d2c8:	4b3a      	ldr	r3, [pc, #232]	; (800d3b4 <ai_platform_observer_register_s+0x178>)
 800d2ca:	6812      	ldr	r2, [r2, #0]
 800d2cc:	429a      	cmp	r2, r3
 800d2ce:	d010      	beq.n	800d2f2 <ai_platform_observer_register_s+0xb6>
 800d2d0:	e7fe      	b.n	800d2d0 <ai_platform_observer_register_s+0x94>
 800d2d2:	4a39      	ldr	r2, [pc, #228]	; (800d3b8 <ai_platform_observer_register_s+0x17c>)
 800d2d4:	2301      	movs	r3, #1
 800d2d6:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800d2da:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d1fb      	bne.n	800d2da <ai_platform_observer_register_s+0x9e>
 800d2e2:	4b33      	ldr	r3, [pc, #204]	; (800d3b0 <ai_platform_observer_register_s+0x174>)
 800d2e4:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800d2e8:	4b32      	ldr	r3, [pc, #200]	; (800d3b4 <ai_platform_observer_register_s+0x178>)
 800d2ea:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800d2ee:	429a      	cmp	r2, r3
 800d2f0:	d124      	bne.n	800d33c <ai_platform_observer_register_s+0x100>
 800d2f2:	f7fd fe4b 	bl	800af8c <_ai_platform_release_crc>
 800d2f6:	2d00      	cmp	r5, #0
 800d2f8:	bf18      	it	ne
 800d2fa:	2c00      	cmpne	r4, #0
 800d2fc:	bf0c      	ite	eq
 800d2fe:	2601      	moveq	r6, #1
 800d300:	2600      	movne	r6, #0
 800d302:	d031      	beq.n	800d368 <ai_platform_observer_register_s+0x12c>
 800d304:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d306:	b9d3      	cbnz	r3, 800d33e <ai_platform_observer_register_s+0x102>
 800d308:	81eb      	strh	r3, [r5, #14]
 800d30a:	2101      	movs	r1, #1
 800d30c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d30e:	e006      	b.n	800d31e <ai_platform_observer_register_s+0xe2>
 800d310:	81e9      	strh	r1, [r5, #14]
 800d312:	b281      	uxth	r1, r0
 800d314:	691a      	ldr	r2, [r3, #16]
 800d316:	429a      	cmp	r2, r3
 800d318:	4613      	mov	r3, r2
 800d31a:	d003      	beq.n	800d324 <ai_platform_observer_register_s+0xe8>
 800d31c:	b112      	cbz	r2, 800d324 <ai_platform_observer_register_s+0xe8>
 800d31e:	1c48      	adds	r0, r1, #1
 800d320:	2b00      	cmp	r3, #0
 800d322:	d1f5      	bne.n	800d310 <ai_platform_observer_register_s+0xd4>
 800d324:	7a2b      	ldrb	r3, [r5, #8]
 800d326:	2100      	movs	r1, #0
 800d328:	4a24      	ldr	r2, [pc, #144]	; (800d3bc <ai_platform_observer_register_s+0x180>)
 800d32a:	2601      	movs	r6, #1
 800d32c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d330:	81a9      	strh	r1, [r5, #12]
 800d332:	4630      	mov	r0, r6
 800d334:	60ab      	str	r3, [r5, #8]
 800d336:	e9c4 250f 	strd	r2, r5, [r4, #60]	; 0x3c
 800d33a:	bd70      	pop	{r4, r5, r6, pc}
 800d33c:	e7fe      	b.n	800d33c <ai_platform_observer_register_s+0x100>
 800d33e:	2240      	movs	r2, #64	; 0x40
 800d340:	2111      	movs	r1, #17
 800d342:	f104 0010 	add.w	r0, r4, #16
 800d346:	f000 f8e1 	bl	800d50c <core_set_error>
 800d34a:	4630      	mov	r0, r6
 800d34c:	bd70      	pop	{r4, r5, r6, pc}
 800d34e:	4a17      	ldr	r2, [pc, #92]	; (800d3ac <ai_platform_observer_register_s+0x170>)
 800d350:	2301      	movs	r3, #1
 800d352:	6093      	str	r3, [r2, #8]
 800d354:	6893      	ldr	r3, [r2, #8]
 800d356:	2b00      	cmp	r3, #0
 800d358:	d1fc      	bne.n	800d354 <ai_platform_observer_register_s+0x118>
 800d35a:	4b15      	ldr	r3, [pc, #84]	; (800d3b0 <ai_platform_observer_register_s+0x174>)
 800d35c:	6013      	str	r3, [r2, #0]
 800d35e:	4b15      	ldr	r3, [pc, #84]	; (800d3b4 <ai_platform_observer_register_s+0x178>)
 800d360:	6812      	ldr	r2, [r2, #0]
 800d362:	429a      	cmp	r2, r3
 800d364:	d0c5      	beq.n	800d2f2 <ai_platform_observer_register_s+0xb6>
 800d366:	e7fe      	b.n	800d366 <ai_platform_observer_register_s+0x12a>
 800d368:	b1bc      	cbz	r4, 800d39a <ai_platform_observer_register_s+0x15e>
 800d36a:	2110      	movs	r1, #16
 800d36c:	2211      	movs	r2, #17
 800d36e:	2600      	movs	r6, #0
 800d370:	1860      	adds	r0, r4, r1
 800d372:	f000 f8cb 	bl	800d50c <core_set_error>
 800d376:	e7e8      	b.n	800d34a <ai_platform_observer_register_s+0x10e>
 800d378:	4a0f      	ldr	r2, [pc, #60]	; (800d3b8 <ai_platform_observer_register_s+0x17c>)
 800d37a:	2301      	movs	r3, #1
 800d37c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800d380:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800d384:	2b00      	cmp	r3, #0
 800d386:	d1fb      	bne.n	800d380 <ai_platform_observer_register_s+0x144>
 800d388:	4b09      	ldr	r3, [pc, #36]	; (800d3b0 <ai_platform_observer_register_s+0x174>)
 800d38a:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800d38e:	4b09      	ldr	r3, [pc, #36]	; (800d3b4 <ai_platform_observer_register_s+0x178>)
 800d390:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800d394:	429a      	cmp	r2, r3
 800d396:	d0ac      	beq.n	800d2f2 <ai_platform_observer_register_s+0xb6>
 800d398:	e7fe      	b.n	800d398 <ai_platform_observer_register_s+0x15c>
 800d39a:	4626      	mov	r6, r4
 800d39c:	e7d5      	b.n	800d34a <ai_platform_observer_register_s+0x10e>
 800d39e:	bf00      	nop
 800d3a0:	a1c00100 	.word	0xa1c00100
 800d3a4:	e0042000 	.word	0xe0042000
 800d3a8:	5c001000 	.word	0x5c001000
 800d3ac:	40023000 	.word	0x40023000
 800d3b0:	f407a5c2 	.word	0xf407a5c2
 800d3b4:	b5e8b5cd 	.word	0xb5e8b5cd
 800d3b8:	58024000 	.word	0x58024000
 800d3bc:	0800ae65 	.word	0x0800ae65

0800d3c0 <ai_platform_observer_unregister_s>:
 800d3c0:	b538      	push	{r3, r4, r5, lr}
 800d3c2:	4604      	mov	r4, r0
 800d3c4:	460d      	mov	r5, r1
 800d3c6:	b120      	cbz	r0, 800d3d2 <ai_platform_observer_unregister_s+0x12>
 800d3c8:	4b45      	ldr	r3, [pc, #276]	; (800d4e0 <ai_platform_observer_unregister_s+0x120>)
 800d3ca:	6802      	ldr	r2, [r0, #0]
 800d3cc:	429a      	cmp	r2, r3
 800d3ce:	bf18      	it	ne
 800d3d0:	2400      	movne	r4, #0
 800d3d2:	f7fd fdd9 	bl	800af88 <_ai_platform_acquire_crc>
 800d3d6:	4b43      	ldr	r3, [pc, #268]	; (800d4e4 <ai_platform_observer_unregister_s+0x124>)
 800d3d8:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d3e2:	189a      	adds	r2, r3, r2
 800d3e4:	2a01      	cmp	r2, #1
 800d3e6:	d929      	bls.n	800d43c <ai_platform_observer_unregister_s+0x7c>
 800d3e8:	f240 4249 	movw	r2, #1097	; 0x449
 800d3ec:	4293      	cmp	r3, r2
 800d3ee:	d025      	beq.n	800d43c <ai_platform_observer_unregister_s+0x7c>
 800d3f0:	4a3d      	ldr	r2, [pc, #244]	; (800d4e8 <ai_platform_observer_unregister_s+0x128>)
 800d3f2:	6813      	ldr	r3, [r2, #0]
 800d3f4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d3f8:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800d3fc:	d02b      	beq.n	800d456 <ai_platform_observer_unregister_s+0x96>
 800d3fe:	6813      	ldr	r3, [r2, #0]
 800d400:	f240 4183 	movw	r1, #1155	; 0x483
 800d404:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d408:	428b      	cmp	r3, r1
 800d40a:	d04d      	beq.n	800d4a8 <ai_platform_observer_unregister_s+0xe8>
 800d40c:	6813      	ldr	r3, [r2, #0]
 800d40e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d412:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800d416:	d03a      	beq.n	800d48e <ai_platform_observer_unregister_s+0xce>
 800d418:	6813      	ldr	r3, [r2, #0]
 800d41a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d129      	bne.n	800d476 <ai_platform_observer_unregister_s+0xb6>
 800d422:	4a32      	ldr	r2, [pc, #200]	; (800d4ec <ai_platform_observer_unregister_s+0x12c>)
 800d424:	2301      	movs	r3, #1
 800d426:	6093      	str	r3, [r2, #8]
 800d428:	6893      	ldr	r3, [r2, #8]
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d1fc      	bne.n	800d428 <ai_platform_observer_unregister_s+0x68>
 800d42e:	4b30      	ldr	r3, [pc, #192]	; (800d4f0 <ai_platform_observer_unregister_s+0x130>)
 800d430:	6013      	str	r3, [r2, #0]
 800d432:	4b30      	ldr	r3, [pc, #192]	; (800d4f4 <ai_platform_observer_unregister_s+0x134>)
 800d434:	6812      	ldr	r2, [r2, #0]
 800d436:	429a      	cmp	r2, r3
 800d438:	d01d      	beq.n	800d476 <ai_platform_observer_unregister_s+0xb6>
 800d43a:	e7fe      	b.n	800d43a <ai_platform_observer_unregister_s+0x7a>
 800d43c:	4a2b      	ldr	r2, [pc, #172]	; (800d4ec <ai_platform_observer_unregister_s+0x12c>)
 800d43e:	2301      	movs	r3, #1
 800d440:	6093      	str	r3, [r2, #8]
 800d442:	6893      	ldr	r3, [r2, #8]
 800d444:	2b00      	cmp	r3, #0
 800d446:	d1fc      	bne.n	800d442 <ai_platform_observer_unregister_s+0x82>
 800d448:	4b29      	ldr	r3, [pc, #164]	; (800d4f0 <ai_platform_observer_unregister_s+0x130>)
 800d44a:	6013      	str	r3, [r2, #0]
 800d44c:	4b29      	ldr	r3, [pc, #164]	; (800d4f4 <ai_platform_observer_unregister_s+0x134>)
 800d44e:	6812      	ldr	r2, [r2, #0]
 800d450:	429a      	cmp	r2, r3
 800d452:	d010      	beq.n	800d476 <ai_platform_observer_unregister_s+0xb6>
 800d454:	e7fe      	b.n	800d454 <ai_platform_observer_unregister_s+0x94>
 800d456:	4a28      	ldr	r2, [pc, #160]	; (800d4f8 <ai_platform_observer_unregister_s+0x138>)
 800d458:	2301      	movs	r3, #1
 800d45a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800d45e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800d462:	2b00      	cmp	r3, #0
 800d464:	d1fb      	bne.n	800d45e <ai_platform_observer_unregister_s+0x9e>
 800d466:	4b22      	ldr	r3, [pc, #136]	; (800d4f0 <ai_platform_observer_unregister_s+0x130>)
 800d468:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800d46c:	4b21      	ldr	r3, [pc, #132]	; (800d4f4 <ai_platform_observer_unregister_s+0x134>)
 800d46e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800d472:	429a      	cmp	r2, r3
 800d474:	d10a      	bne.n	800d48c <ai_platform_observer_unregister_s+0xcc>
 800d476:	f7fd fd89 	bl	800af8c <_ai_platform_release_crc>
 800d47a:	b374      	cbz	r4, 800d4da <ai_platform_observer_unregister_s+0x11a>
 800d47c:	fab5 f385 	clz	r3, r5
 800d480:	095b      	lsrs	r3, r3, #5
 800d482:	b315      	cbz	r5, 800d4ca <ai_platform_observer_unregister_s+0x10a>
 800d484:	2001      	movs	r0, #1
 800d486:	e9c4 330f 	strd	r3, r3, [r4, #60]	; 0x3c
 800d48a:	bd38      	pop	{r3, r4, r5, pc}
 800d48c:	e7fe      	b.n	800d48c <ai_platform_observer_unregister_s+0xcc>
 800d48e:	4a17      	ldr	r2, [pc, #92]	; (800d4ec <ai_platform_observer_unregister_s+0x12c>)
 800d490:	2301      	movs	r3, #1
 800d492:	6093      	str	r3, [r2, #8]
 800d494:	6893      	ldr	r3, [r2, #8]
 800d496:	2b00      	cmp	r3, #0
 800d498:	d1fc      	bne.n	800d494 <ai_platform_observer_unregister_s+0xd4>
 800d49a:	4b15      	ldr	r3, [pc, #84]	; (800d4f0 <ai_platform_observer_unregister_s+0x130>)
 800d49c:	6013      	str	r3, [r2, #0]
 800d49e:	4b15      	ldr	r3, [pc, #84]	; (800d4f4 <ai_platform_observer_unregister_s+0x134>)
 800d4a0:	6812      	ldr	r2, [r2, #0]
 800d4a2:	429a      	cmp	r2, r3
 800d4a4:	d0e7      	beq.n	800d476 <ai_platform_observer_unregister_s+0xb6>
 800d4a6:	e7fe      	b.n	800d4a6 <ai_platform_observer_unregister_s+0xe6>
 800d4a8:	4a13      	ldr	r2, [pc, #76]	; (800d4f8 <ai_platform_observer_unregister_s+0x138>)
 800d4aa:	2301      	movs	r3, #1
 800d4ac:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800d4b0:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d1fb      	bne.n	800d4b0 <ai_platform_observer_unregister_s+0xf0>
 800d4b8:	4b0d      	ldr	r3, [pc, #52]	; (800d4f0 <ai_platform_observer_unregister_s+0x130>)
 800d4ba:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800d4be:	4b0d      	ldr	r3, [pc, #52]	; (800d4f4 <ai_platform_observer_unregister_s+0x134>)
 800d4c0:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800d4c4:	429a      	cmp	r2, r3
 800d4c6:	d0d6      	beq.n	800d476 <ai_platform_observer_unregister_s+0xb6>
 800d4c8:	e7fe      	b.n	800d4c8 <ai_platform_observer_unregister_s+0x108>
 800d4ca:	b134      	cbz	r4, 800d4da <ai_platform_observer_unregister_s+0x11a>
 800d4cc:	2110      	movs	r1, #16
 800d4ce:	2211      	movs	r2, #17
 800d4d0:	1860      	adds	r0, r4, r1
 800d4d2:	f000 f81b 	bl	800d50c <core_set_error>
 800d4d6:	2000      	movs	r0, #0
 800d4d8:	bd38      	pop	{r3, r4, r5, pc}
 800d4da:	4620      	mov	r0, r4
 800d4dc:	bd38      	pop	{r3, r4, r5, pc}
 800d4de:	bf00      	nop
 800d4e0:	a1c00100 	.word	0xa1c00100
 800d4e4:	e0042000 	.word	0xe0042000
 800d4e8:	5c001000 	.word	0x5c001000
 800d4ec:	40023000 	.word	0x40023000
 800d4f0:	f407a5c2 	.word	0xf407a5c2
 800d4f4:	b5e8b5cd 	.word	0xb5e8b5cd
 800d4f8:	58024000 	.word	0x58024000

0800d4fc <core_init>:
 800d4fc:	2001      	movs	r0, #1
 800d4fe:	4770      	bx	lr

0800d500 <core_get_error>:
 800d500:	4603      	mov	r3, r0
 800d502:	2200      	movs	r2, #0
 800d504:	6800      	ldr	r0, [r0, #0]
 800d506:	601a      	str	r2, [r3, #0]
 800d508:	4770      	bx	lr
 800d50a:	bf00      	nop

0800d50c <core_set_error>:
 800d50c:	4603      	mov	r3, r0
 800d50e:	7800      	ldrb	r0, [r0, #0]
 800d510:	b108      	cbz	r0, 800d516 <core_set_error+0xa>
 800d512:	2000      	movs	r0, #0
 800d514:	4770      	bx	lr
 800d516:	7019      	strb	r1, [r3, #0]
 800d518:	2001      	movs	r0, #1
 800d51a:	6819      	ldr	r1, [r3, #0]
 800d51c:	f362 211f 	bfi	r1, r2, #8, #24
 800d520:	6019      	str	r1, [r3, #0]
 800d522:	4770      	bx	lr

0800d524 <_array_handle_get_as_float>:
 800d524:	b508      	push	{r3, lr}
 800d526:	4b33      	ldr	r3, [pc, #204]	; (800d5f4 <_array_handle_get_as_float+0xd0>)
 800d528:	4299      	cmp	r1, r3
 800d52a:	d057      	beq.n	800d5dc <_array_handle_get_as_float+0xb8>
 800d52c:	dc21      	bgt.n	800d572 <_array_handle_get_as_float+0x4e>
 800d52e:	4b32      	ldr	r3, [pc, #200]	; (800d5f8 <_array_handle_get_as_float+0xd4>)
 800d530:	4299      	cmp	r1, r3
 800d532:	d05a      	beq.n	800d5ea <_array_handle_get_as_float+0xc6>
 800d534:	dd0f      	ble.n	800d556 <_array_handle_get_as_float+0x32>
 800d536:	4b31      	ldr	r3, [pc, #196]	; (800d5fc <_array_handle_get_as_float+0xd8>)
 800d538:	4299      	cmp	r1, r3
 800d53a:	d034      	beq.n	800d5a6 <_array_handle_get_as_float+0x82>
 800d53c:	f503 33f2 	add.w	r3, r3, #123904	; 0x1e400
 800d540:	4299      	cmp	r1, r3
 800d542:	d12d      	bne.n	800d5a0 <_array_handle_get_as_float+0x7c>
 800d544:	7803      	ldrb	r3, [r0, #0]
 800d546:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800d54a:	eddf 7a2d 	vldr	s15, [pc, #180]	; 800d600 <_array_handle_get_as_float+0xdc>
 800d54e:	2b00      	cmp	r3, #0
 800d550:	fe07 0a80 	vseleq.f32	s0, s15, s0
 800d554:	bd08      	pop	{r3, pc}
 800d556:	f5a3 6340 	sub.w	r3, r3, #3072	; 0xc00
 800d55a:	4299      	cmp	r1, r3
 800d55c:	d02a      	beq.n	800d5b4 <_array_handle_get_as_float+0x90>
 800d55e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d562:	4299      	cmp	r1, r3
 800d564:	d11c      	bne.n	800d5a0 <_array_handle_get_as_float+0x7c>
 800d566:	8803      	ldrh	r3, [r0, #0]
 800d568:	ee00 3a10 	vmov	s0, r3
 800d56c:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 800d570:	bd08      	pop	{r3, pc}
 800d572:	4b24      	ldr	r3, [pc, #144]	; (800d604 <_array_handle_get_as_float+0xe0>)
 800d574:	4299      	cmp	r1, r3
 800d576:	d023      	beq.n	800d5c0 <_array_handle_get_as_float+0x9c>
 800d578:	dd05      	ble.n	800d586 <_array_handle_get_as_float+0x62>
 800d57a:	4b23      	ldr	r3, [pc, #140]	; (800d608 <_array_handle_get_as_float+0xe4>)
 800d57c:	4299      	cmp	r1, r3
 800d57e:	d10f      	bne.n	800d5a0 <_array_handle_get_as_float+0x7c>
 800d580:	ed90 0a00 	vldr	s0, [r0]
 800d584:	bd08      	pop	{r3, pc}
 800d586:	f5a3 53c0 	sub.w	r3, r3, #6144	; 0x1800
 800d58a:	4299      	cmp	r1, r3
 800d58c:	d01f      	beq.n	800d5ce <_array_handle_get_as_float+0xaa>
 800d58e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d592:	4299      	cmp	r1, r3
 800d594:	d104      	bne.n	800d5a0 <_array_handle_get_as_float+0x7c>
 800d596:	ed90 0a00 	vldr	s0, [r0]
 800d59a:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800d59e:	bd08      	pop	{r3, pc}
 800d5a0:	ed9f 0a17 	vldr	s0, [pc, #92]	; 800d600 <_array_handle_get_as_float+0xdc>
 800d5a4:	bd08      	pop	{r3, pc}
 800d5a6:	e9d0 0100 	ldrd	r0, r1, [r0]
 800d5aa:	f7f2 ffb9 	bl	8000520 <__aeabi_ul2f>
 800d5ae:	ee00 0a10 	vmov	s0, r0
 800d5b2:	bd08      	pop	{r3, pc}
 800d5b4:	7803      	ldrb	r3, [r0, #0]
 800d5b6:	ee00 3a10 	vmov	s0, r3
 800d5ba:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 800d5be:	bd08      	pop	{r3, pc}
 800d5c0:	e9d0 0100 	ldrd	r0, r1, [r0]
 800d5c4:	f7f2 ffb4 	bl	8000530 <__aeabi_l2f>
 800d5c8:	ee00 0a10 	vmov	s0, r0
 800d5cc:	bd08      	pop	{r3, pc}
 800d5ce:	f9b0 3000 	ldrsh.w	r3, [r0]
 800d5d2:	ee00 3a10 	vmov	s0, r3
 800d5d6:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800d5da:	bd08      	pop	{r3, pc}
 800d5dc:	f990 3000 	ldrsb.w	r3, [r0]
 800d5e0:	ee00 3a10 	vmov	s0, r3
 800d5e4:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800d5e8:	bd08      	pop	{r3, pc}
 800d5ea:	ed90 0a00 	vldr	s0, [r0]
 800d5ee:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 800d5f2:	bd08      	pop	{r3, pc}
 800d5f4:	00840440 	.word	0x00840440
 800d5f8:	00041040 	.word	0x00041040
 800d5fc:	00042040 	.word	0x00042040
 800d600:	00000000 	.word	0x00000000
 800d604:	00842040 	.word	0x00842040
 800d608:	01821040 	.word	0x01821040

0800d60c <forward_cast>:
 800d60c:	6983      	ldr	r3, [r0, #24]
 800d60e:	881a      	ldrh	r2, [r3, #0]
 800d610:	2a00      	cmp	r2, #0
 800d612:	f000 815c 	beq.w	800d8ce <forward_cast+0x2c2>
 800d616:	6859      	ldr	r1, [r3, #4]
 800d618:	684b      	ldr	r3, [r1, #4]
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	f000 81bb 	beq.w	800d996 <forward_cast+0x38a>
 800d620:	2a01      	cmp	r2, #1
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	f003 871c 	beq.w	8011460 <forward_cast+0x3e54>
 800d628:	690a      	ldr	r2, [r1, #16]
 800d62a:	2a00      	cmp	r2, #0
 800d62c:	f003 871b 	beq.w	8011466 <forward_cast+0x3e5a>
 800d630:	6812      	ldr	r2, [r2, #0]
 800d632:	b103      	cbz	r3, 800d636 <forward_cast+0x2a>
 800d634:	699b      	ldr	r3, [r3, #24]
 800d636:	2a00      	cmp	r2, #0
 800d638:	f003 8715 	beq.w	8011466 <forward_cast+0x3e5a>
 800d63c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d640:	ed2d 8b02 	vpush	{d8}
 800d644:	6996      	ldr	r6, [r2, #24]
 800d646:	b083      	sub	sp, #12
 800d648:	681a      	ldr	r2, [r3, #0]
 800d64a:	69c7      	ldr	r7, [r0, #28]
 800d64c:	f022 447e 	bic.w	r4, r2, #4261412864	; 0xfe000000
 800d650:	4610      	mov	r0, r2
 800d652:	6832      	ldr	r2, [r6, #0]
 800d654:	f027 477e 	bic.w	r7, r7, #4261412864	; 0xfe000000
 800d658:	f8df 82cc 	ldr.w	r8, [pc, #716]	; 800d928 <forward_cast+0x31c>
 800d65c:	f3c4 2983 	ubfx	r9, r4, #10, #4
 800d660:	f022 4b7e 	bic.w	fp, r2, #4261412864	; 0xfe000000
 800d664:	6859      	ldr	r1, [r3, #4]
 800d666:	68dd      	ldr	r5, [r3, #12]
 800d668:	f7fd fb6e 	bl	800ad48 <ai_array_get_byte_size>
 800d66c:	f3cb 2383 	ubfx	r3, fp, #10, #4
 800d670:	4547      	cmp	r7, r8
 800d672:	68f6      	ldr	r6, [r6, #12]
 800d674:	eb05 0a00 	add.w	sl, r5, r0
 800d678:	9300      	str	r3, [sp, #0]
 800d67a:	f000 81e2 	beq.w	800da42 <forward_cast+0x436>
 800d67e:	f300 8083 	bgt.w	800d788 <forward_cast+0x17c>
 800d682:	4ba2      	ldr	r3, [pc, #648]	; (800d90c <forward_cast+0x300>)
 800d684:	429f      	cmp	r7, r3
 800d686:	f000 8227 	beq.w	800dad8 <forward_cast+0x4cc>
 800d68a:	dd2c      	ble.n	800d6e6 <forward_cast+0xda>
 800d68c:	4aa0      	ldr	r2, [pc, #640]	; (800d910 <forward_cast+0x304>)
 800d68e:	4297      	cmp	r7, r2
 800d690:	d124      	bne.n	800d6dc <forward_cast+0xd0>
 800d692:	45c3      	cmp	fp, r8
 800d694:	f001 8052 	beq.w	800e73c <forward_cast+0x1130>
 800d698:	f300 85f2 	bgt.w	800e280 <forward_cast+0xc74>
 800d69c:	459b      	cmp	fp, r3
 800d69e:	f001 85a4 	beq.w	800f1ea <forward_cast+0x1bde>
 800d6a2:	f300 85d3 	bgt.w	800e24c <forward_cast+0xc40>
 800d6a6:	4b9b      	ldr	r3, [pc, #620]	; (800d914 <forward_cast+0x308>)
 800d6a8:	459b      	cmp	fp, r3
 800d6aa:	f002 8256 	beq.w	800fb5a <forward_cast+0x254e>
 800d6ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d6b2:	459b      	cmp	fp, r3
 800d6b4:	d112      	bne.n	800d6dc <forward_cast+0xd0>
 800d6b6:	4555      	cmp	r5, sl
 800d6b8:	d210      	bcs.n	800d6dc <forward_cast+0xd0>
 800d6ba:	9f00      	ldr	r7, [sp, #0]
 800d6bc:	4628      	mov	r0, r5
 800d6be:	4621      	mov	r1, r4
 800d6c0:	f7ff ff30 	bl	800d524 <_array_handle_get_as_float>
 800d6c4:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800d6c8:	444d      	add	r5, r9
 800d6ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d6ce:	bf14      	ite	ne
 800d6d0:	2301      	movne	r3, #1
 800d6d2:	2300      	moveq	r3, #0
 800d6d4:	45aa      	cmp	sl, r5
 800d6d6:	8033      	strh	r3, [r6, #0]
 800d6d8:	443e      	add	r6, r7
 800d6da:	d8ef      	bhi.n	800d6bc <forward_cast+0xb0>
 800d6dc:	b003      	add	sp, #12
 800d6de:	ecbd 8b02 	vpop	{d8}
 800d6e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6e6:	4a8b      	ldr	r2, [pc, #556]	; (800d914 <forward_cast+0x308>)
 800d6e8:	4297      	cmp	r7, r2
 800d6ea:	f000 80f2 	beq.w	800d8d2 <forward_cast+0x2c6>
 800d6ee:	498a      	ldr	r1, [pc, #552]	; (800d918 <forward_cast+0x30c>)
 800d6f0:	428f      	cmp	r7, r1
 800d6f2:	d1f3      	bne.n	800d6dc <forward_cast+0xd0>
 800d6f4:	45c3      	cmp	fp, r8
 800d6f6:	f000 877e 	beq.w	800e5f6 <forward_cast+0xfea>
 800d6fa:	f300 86e5 	bgt.w	800e4c8 <forward_cast+0xebc>
 800d6fe:	459b      	cmp	fp, r3
 800d700:	f001 877e 	beq.w	800f600 <forward_cast+0x1ff4>
 800d704:	4f81      	ldr	r7, [pc, #516]	; (800d90c <forward_cast+0x300>)
 800d706:	45bb      	cmp	fp, r7
 800d708:	f300 8552 	bgt.w	800e1b0 <forward_cast+0xba4>
 800d70c:	f8df 8204 	ldr.w	r8, [pc, #516]	; 800d914 <forward_cast+0x308>
 800d710:	45c3      	cmp	fp, r8
 800d712:	f001 8727 	beq.w	800f564 <forward_cast+0x1f58>
 800d716:	4b80      	ldr	r3, [pc, #512]	; (800d918 <forward_cast+0x30c>)
 800d718:	459b      	cmp	fp, r3
 800d71a:	d1df      	bne.n	800d6dc <forward_cast+0xd0>
 800d71c:	4555      	cmp	r5, sl
 800d71e:	d2dd      	bcs.n	800d6dc <forward_cast+0xd0>
 800d720:	f8df b20c 	ldr.w	fp, [pc, #524]	; 800d930 <forward_cast+0x324>
 800d724:	4b7d      	ldr	r3, [pc, #500]	; (800d91c <forward_cast+0x310>)
 800d726:	4a7e      	ldr	r2, [pc, #504]	; (800d920 <forward_cast+0x314>)
 800d728:	e019      	b.n	800d75e <forward_cast+0x152>
 800d72a:	42bc      	cmp	r4, r7
 800d72c:	f003 8425 	beq.w	8010f7a <forward_cast+0x396e>
 800d730:	f341 80bc 	ble.w	800e8ac <forward_cast+0x12a0>
 800d734:	497b      	ldr	r1, [pc, #492]	; (800d924 <forward_cast+0x318>)
 800d736:	428c      	cmp	r4, r1
 800d738:	f003 83e9 	beq.w	8010f0e <forward_cast+0x3902>
 800d73c:	f501 31f2 	add.w	r1, r1, #123904	; 0x1e400
 800d740:	428c      	cmp	r4, r1
 800d742:	f041 83a0 	bne.w	800ee86 <forward_cast+0x187a>
 800d746:	7828      	ldrb	r0, [r5, #0]
 800d748:	3800      	subs	r0, #0
 800d74a:	bf18      	it	ne
 800d74c:	2001      	movne	r0, #1
 800d74e:	f380 0010 	usat	r0, #16, r0
 800d752:	444d      	add	r5, r9
 800d754:	9900      	ldr	r1, [sp, #0]
 800d756:	8030      	strh	r0, [r6, #0]
 800d758:	45aa      	cmp	sl, r5
 800d75a:	440e      	add	r6, r1
 800d75c:	d9be      	bls.n	800d6dc <forward_cast+0xd0>
 800d75e:	4972      	ldr	r1, [pc, #456]	; (800d928 <forward_cast+0x31c>)
 800d760:	428c      	cmp	r4, r1
 800d762:	f003 82d9 	beq.w	8010d18 <forward_cast+0x370c>
 800d766:	dde0      	ble.n	800d72a <forward_cast+0x11e>
 800d768:	4970      	ldr	r1, [pc, #448]	; (800d92c <forward_cast+0x320>)
 800d76a:	428c      	cmp	r4, r1
 800d76c:	f002 87aa 	beq.w	80106c4 <forward_cast+0x30b8>
 800d770:	f341 82c1 	ble.w	800ecf6 <forward_cast+0x16ea>
 800d774:	455c      	cmp	r4, fp
 800d776:	f041 8386 	bne.w	800ee86 <forward_cast+0x187a>
 800d77a:	edd5 7a00 	vldr	s15, [r5]
 800d77e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d782:	ee17 0a90 	vmov	r0, s15
 800d786:	e7e2      	b.n	800d74e <forward_cast+0x142>
 800d788:	4b65      	ldr	r3, [pc, #404]	; (800d920 <forward_cast+0x314>)
 800d78a:	429f      	cmp	r7, r3
 800d78c:	f000 810c 	beq.w	800d9a8 <forward_cast+0x39c>
 800d790:	4a67      	ldr	r2, [pc, #412]	; (800d930 <forward_cast+0x324>)
 800d792:	4297      	cmp	r7, r2
 800d794:	d149      	bne.n	800d82a <forward_cast+0x21e>
 800d796:	45c3      	cmp	fp, r8
 800d798:	f000 8763 	beq.w	800e662 <forward_cast+0x1056>
 800d79c:	f300 82cc 	bgt.w	800dd38 <forward_cast+0x72c>
 800d7a0:	4a5a      	ldr	r2, [pc, #360]	; (800d90c <forward_cast+0x300>)
 800d7a2:	4593      	cmp	fp, r2
 800d7a4:	f001 8478 	beq.w	800f098 <forward_cast+0x1a8c>
 800d7a8:	f300 82b0 	bgt.w	800dd0c <forward_cast+0x700>
 800d7ac:	4b59      	ldr	r3, [pc, #356]	; (800d914 <forward_cast+0x308>)
 800d7ae:	459b      	cmp	fp, r3
 800d7b0:	f002 833e 	beq.w	800fe30 <forward_cast+0x2824>
 800d7b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d7b8:	459b      	cmp	fp, r3
 800d7ba:	d18f      	bne.n	800d6dc <forward_cast+0xd0>
 800d7bc:	4555      	cmp	r5, sl
 800d7be:	d28d      	bcs.n	800d6dc <forward_cast+0xd0>
 800d7c0:	f8df 816c 	ldr.w	r8, [pc, #364]	; 800d930 <forward_cast+0x324>
 800d7c4:	4f55      	ldr	r7, [pc, #340]	; (800d91c <forward_cast+0x310>)
 800d7c6:	f8df b158 	ldr.w	fp, [pc, #344]	; 800d920 <forward_cast+0x314>
 800d7ca:	4b50      	ldr	r3, [pc, #320]	; (800d90c <forward_cast+0x300>)
 800d7cc:	4a55      	ldr	r2, [pc, #340]	; (800d924 <forward_cast+0x318>)
 800d7ce:	e016      	b.n	800d7fe <forward_cast+0x1f2>
 800d7d0:	429c      	cmp	r4, r3
 800d7d2:	f002 853b 	beq.w	801024c <forward_cast+0x2c40>
 800d7d6:	f341 8185 	ble.w	800eae4 <forward_cast+0x14d8>
 800d7da:	4294      	cmp	r4, r2
 800d7dc:	f003 824e 	beq.w	8010c7c <forward_cast+0x3670>
 800d7e0:	494b      	ldr	r1, [pc, #300]	; (800d910 <forward_cast+0x304>)
 800d7e2:	428c      	cmp	r4, r1
 800d7e4:	f041 8369 	bne.w	800eeba <forward_cast+0x18ae>
 800d7e8:	7829      	ldrb	r1, [r5, #0]
 800d7ea:	3900      	subs	r1, #0
 800d7ec:	bf18      	it	ne
 800d7ee:	2101      	movne	r1, #1
 800d7f0:	444d      	add	r5, r9
 800d7f2:	8031      	strh	r1, [r6, #0]
 800d7f4:	9900      	ldr	r1, [sp, #0]
 800d7f6:	45aa      	cmp	sl, r5
 800d7f8:	440e      	add	r6, r1
 800d7fa:	f67f af6f 	bls.w	800d6dc <forward_cast+0xd0>
 800d7fe:	494a      	ldr	r1, [pc, #296]	; (800d928 <forward_cast+0x31c>)
 800d800:	428c      	cmp	r4, r1
 800d802:	f002 869f 	beq.w	8010544 <forward_cast+0x2f38>
 800d806:	dde3      	ble.n	800d7d0 <forward_cast+0x1c4>
 800d808:	4948      	ldr	r1, [pc, #288]	; (800d92c <forward_cast+0x320>)
 800d80a:	428c      	cmp	r4, r1
 800d80c:	f002 8768 	beq.w	80106e0 <forward_cast+0x30d4>
 800d810:	f341 8100 	ble.w	800ea14 <forward_cast+0x1408>
 800d814:	4544      	cmp	r4, r8
 800d816:	f041 8350 	bne.w	800eeba <forward_cast+0x18ae>
 800d81a:	edd5 7a00 	vldr	s15, [r5]
 800d81e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d822:	ee17 1a90 	vmov	r1, s15
 800d826:	b289      	uxth	r1, r1
 800d828:	e7e2      	b.n	800d7f0 <forward_cast+0x1e4>
 800d82a:	493c      	ldr	r1, [pc, #240]	; (800d91c <forward_cast+0x310>)
 800d82c:	428f      	cmp	r7, r1
 800d82e:	f47f af55 	bne.w	800d6dc <forward_cast+0xd0>
 800d832:	45c3      	cmp	fp, r8
 800d834:	f000 874b 	beq.w	800e6ce <forward_cast+0x10c2>
 800d838:	f300 8544 	bgt.w	800e2c4 <forward_cast+0xcb8>
 800d83c:	4b33      	ldr	r3, [pc, #204]	; (800d90c <forward_cast+0x300>)
 800d83e:	459b      	cmp	fp, r3
 800d840:	f001 863f 	beq.w	800f4c2 <forward_cast+0x1eb6>
 800d844:	f300 8227 	bgt.w	800dc96 <forward_cast+0x68a>
 800d848:	4f32      	ldr	r7, [pc, #200]	; (800d914 <forward_cast+0x308>)
 800d84a:	45bb      	cmp	fp, r7
 800d84c:	f001 85d7 	beq.w	800f3fe <forward_cast+0x1df2>
 800d850:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 800d854:	459b      	cmp	fp, r3
 800d856:	f47f af41 	bne.w	800d6dc <forward_cast+0xd0>
 800d85a:	4555      	cmp	r5, sl
 800d85c:	f4bf af3e 	bcs.w	800d6dc <forward_cast+0xd0>
 800d860:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 800d930 <forward_cast+0x324>
 800d864:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 800d91c <forward_cast+0x310>
 800d868:	4b2d      	ldr	r3, [pc, #180]	; (800d920 <forward_cast+0x314>)
 800d86a:	4a28      	ldr	r2, [pc, #160]	; (800d90c <forward_cast+0x300>)
 800d86c:	e01a      	b.n	800d8a4 <forward_cast+0x298>
 800d86e:	4294      	cmp	r4, r2
 800d870:	f002 85a1 	beq.w	80103b6 <forward_cast+0x2daa>
 800d874:	f341 80c4 	ble.w	800ea00 <forward_cast+0x13f4>
 800d878:	492a      	ldr	r1, [pc, #168]	; (800d924 <forward_cast+0x318>)
 800d87a:	428c      	cmp	r4, r1
 800d87c:	f002 858d 	beq.w	801039a <forward_cast+0x2d8e>
 800d880:	f501 31f2 	add.w	r1, r1, #123904	; 0x1e400
 800d884:	428c      	cmp	r4, r1
 800d886:	f041 82ca 	bne.w	800ee1e <forward_cast+0x1812>
 800d88a:	7828      	ldrb	r0, [r5, #0]
 800d88c:	3800      	subs	r0, #0
 800d88e:	bf18      	it	ne
 800d890:	2001      	movne	r0, #1
 800d892:	f300 000f 	ssat	r0, #16, r0
 800d896:	444d      	add	r5, r9
 800d898:	9900      	ldr	r1, [sp, #0]
 800d89a:	8030      	strh	r0, [r6, #0]
 800d89c:	45aa      	cmp	sl, r5
 800d89e:	440e      	add	r6, r1
 800d8a0:	f67f af1c 	bls.w	800d6dc <forward_cast+0xd0>
 800d8a4:	4920      	ldr	r1, [pc, #128]	; (800d928 <forward_cast+0x31c>)
 800d8a6:	428c      	cmp	r4, r1
 800d8a8:	f002 8557 	beq.w	801035a <forward_cast+0x2d4e>
 800d8ac:	dddf      	ble.n	800d86e <forward_cast+0x262>
 800d8ae:	491f      	ldr	r1, [pc, #124]	; (800d92c <forward_cast+0x320>)
 800d8b0:	428c      	cmp	r4, r1
 800d8b2:	f003 84ba 	beq.w	801122a <forward_cast+0x3c1e>
 800d8b6:	f341 8093 	ble.w	800e9e0 <forward_cast+0x13d4>
 800d8ba:	4544      	cmp	r4, r8
 800d8bc:	f041 82af 	bne.w	800ee1e <forward_cast+0x1812>
 800d8c0:	edd5 7a00 	vldr	s15, [r5]
 800d8c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d8c8:	ee17 0a90 	vmov	r0, s15
 800d8cc:	e7e1      	b.n	800d892 <forward_cast+0x286>
 800d8ce:	6853      	ldr	r3, [r2, #4]
 800d8d0:	deff      	udf	#255	; 0xff
 800d8d2:	45c3      	cmp	fp, r8
 800d8d4:	f001 8545 	beq.w	800f362 <forward_cast+0x1d56>
 800d8d8:	f300 8446 	bgt.w	800e168 <forward_cast+0xb5c>
 800d8dc:	459b      	cmp	fp, r3
 800d8de:	f001 84ef 	beq.w	800f2c0 <forward_cast+0x1cb4>
 800d8e2:	f300 8428 	bgt.w	800e136 <forward_cast+0xb2a>
 800d8e6:	4f0b      	ldr	r7, [pc, #44]	; (800d914 <forward_cast+0x308>)
 800d8e8:	45bb      	cmp	fp, r7
 800d8ea:	f001 84d4 	beq.w	800f296 <forward_cast+0x1c8a>
 800d8ee:	4b0a      	ldr	r3, [pc, #40]	; (800d918 <forward_cast+0x30c>)
 800d8f0:	459b      	cmp	fp, r3
 800d8f2:	f47f aef3 	bne.w	800d6dc <forward_cast+0xd0>
 800d8f6:	4555      	cmp	r5, sl
 800d8f8:	f4bf aef0 	bcs.w	800d6dc <forward_cast+0xd0>
 800d8fc:	f8df 8030 	ldr.w	r8, [pc, #48]	; 800d930 <forward_cast+0x324>
 800d900:	f8df b018 	ldr.w	fp, [pc, #24]	; 800d91c <forward_cast+0x310>
 800d904:	4b06      	ldr	r3, [pc, #24]	; (800d920 <forward_cast+0x314>)
 800d906:	4a01      	ldr	r2, [pc, #4]	; (800d90c <forward_cast+0x300>)
 800d908:	e030      	b.n	800d96c <forward_cast+0x360>
 800d90a:	bf00      	nop
 800d90c:	00041040 	.word	0x00041040
 800d910:	00060440 	.word	0x00060440
 800d914:	00040440 	.word	0x00040440
 800d918:	00040840 	.word	0x00040840
 800d91c:	00840840 	.word	0x00840840
 800d920:	00841040 	.word	0x00841040
 800d924:	00042040 	.word	0x00042040
 800d928:	00840440 	.word	0x00840440
 800d92c:	00842040 	.word	0x00842040
 800d930:	01821040 	.word	0x01821040
 800d934:	4294      	cmp	r4, r2
 800d936:	f003 80b9 	beq.w	8010aac <forward_cast+0x34a0>
 800d93a:	f340 878e 	ble.w	800e85a <forward_cast+0x124e>
 800d93e:	49b2      	ldr	r1, [pc, #712]	; (800dc08 <forward_cast+0x5fc>)
 800d940:	428c      	cmp	r4, r1
 800d942:	f003 80a5 	beq.w	8010a90 <forward_cast+0x3484>
 800d946:	f501 31f2 	add.w	r1, r1, #123904	; 0x1e400
 800d94a:	428c      	cmp	r4, r1
 800d94c:	f041 8292 	bne.w	800ee74 <forward_cast+0x1868>
 800d950:	7828      	ldrb	r0, [r5, #0]
 800d952:	3800      	subs	r0, #0
 800d954:	bf18      	it	ne
 800d956:	2001      	movne	r0, #1
 800d958:	f380 0008 	usat	r0, #8, r0
 800d95c:	444d      	add	r5, r9
 800d95e:	b2c0      	uxtb	r0, r0
 800d960:	9900      	ldr	r1, [sp, #0]
 800d962:	45aa      	cmp	sl, r5
 800d964:	8030      	strh	r0, [r6, #0]
 800d966:	440e      	add	r6, r1
 800d968:	f67f aeb8 	bls.w	800d6dc <forward_cast+0xd0>
 800d96c:	49a7      	ldr	r1, [pc, #668]	; (800dc0c <forward_cast+0x600>)
 800d96e:	428c      	cmp	r4, r1
 800d970:	f003 8124 	beq.w	8010bbc <forward_cast+0x35b0>
 800d974:	ddde      	ble.n	800d934 <forward_cast+0x328>
 800d976:	49a6      	ldr	r1, [pc, #664]	; (800dc10 <forward_cast+0x604>)
 800d978:	428c      	cmp	r4, r1
 800d97a:	f002 86f0 	beq.w	801075e <forward_cast+0x3152>
 800d97e:	f341 80e8 	ble.w	800eb52 <forward_cast+0x1546>
 800d982:	4544      	cmp	r4, r8
 800d984:	f041 8276 	bne.w	800ee74 <forward_cast+0x1868>
 800d988:	edd5 7a00 	vldr	s15, [r5]
 800d98c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d990:	ee17 0a90 	vmov	r0, s15
 800d994:	e7e0      	b.n	800d958 <forward_cast+0x34c>
 800d996:	2a01      	cmp	r2, #1
 800d998:	f003 8562 	beq.w	8011460 <forward_cast+0x3e54>
 800d99c:	690a      	ldr	r2, [r1, #16]
 800d99e:	2a00      	cmp	r2, #0
 800d9a0:	f003 8561 	beq.w	8011466 <forward_cast+0x3e5a>
 800d9a4:	6812      	ldr	r2, [r2, #0]
 800d9a6:	e646      	b.n	800d636 <forward_cast+0x2a>
 800d9a8:	45c3      	cmp	fp, r8
 800d9aa:	f002 8292 	beq.w	800fed2 <forward_cast+0x28c6>
 800d9ae:	f300 82cf 	bgt.w	800df50 <forward_cast+0x944>
 800d9b2:	4b98      	ldr	r3, [pc, #608]	; (800dc14 <forward_cast+0x608>)
 800d9b4:	459b      	cmp	fp, r3
 800d9b6:	f001 87da 	beq.w	800f96e <forward_cast+0x2362>
 800d9ba:	f300 81f9 	bgt.w	800ddb0 <forward_cast+0x7a4>
 800d9be:	f5a3 6340 	sub.w	r3, r3, #3072	; 0xc00
 800d9c2:	459b      	cmp	fp, r3
 800d9c4:	f001 8782 	beq.w	800f8cc <forward_cast+0x22c0>
 800d9c8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d9cc:	459b      	cmp	fp, r3
 800d9ce:	f47f ae85 	bne.w	800d6dc <forward_cast+0xd0>
 800d9d2:	4555      	cmp	r5, sl
 800d9d4:	f4bf ae82 	bcs.w	800d6dc <forward_cast+0xd0>
 800d9d8:	f8df 8250 	ldr.w	r8, [pc, #592]	; 800dc2c <forward_cast+0x620>
 800d9dc:	4f8e      	ldr	r7, [pc, #568]	; (800dc18 <forward_cast+0x60c>)
 800d9de:	f8df b248 	ldr.w	fp, [pc, #584]	; 800dc28 <forward_cast+0x61c>
 800d9e2:	4b8c      	ldr	r3, [pc, #560]	; (800dc14 <forward_cast+0x608>)
 800d9e4:	4a88      	ldr	r2, [pc, #544]	; (800dc08 <forward_cast+0x5fc>)
 800d9e6:	e016      	b.n	800da16 <forward_cast+0x40a>
 800d9e8:	429c      	cmp	r4, r3
 800d9ea:	f003 824c 	beq.w	8010e86 <forward_cast+0x387a>
 800d9ee:	f340 878e 	ble.w	800e90e <forward_cast+0x1302>
 800d9f2:	4294      	cmp	r4, r2
 800d9f4:	f003 81f4 	beq.w	8010de0 <forward_cast+0x37d4>
 800d9f8:	4988      	ldr	r1, [pc, #544]	; (800dc1c <forward_cast+0x610>)
 800d9fa:	428c      	cmp	r4, r1
 800d9fc:	f041 8249 	bne.w	800ee92 <forward_cast+0x1886>
 800da00:	7829      	ldrb	r1, [r5, #0]
 800da02:	3900      	subs	r1, #0
 800da04:	bf18      	it	ne
 800da06:	2101      	movne	r1, #1
 800da08:	444d      	add	r5, r9
 800da0a:	8031      	strh	r1, [r6, #0]
 800da0c:	9900      	ldr	r1, [sp, #0]
 800da0e:	45aa      	cmp	sl, r5
 800da10:	440e      	add	r6, r1
 800da12:	f67f ae63 	bls.w	800d6dc <forward_cast+0xd0>
 800da16:	497d      	ldr	r1, [pc, #500]	; (800dc0c <forward_cast+0x600>)
 800da18:	428c      	cmp	r4, r1
 800da1a:	f002 876b 	beq.w	80108f4 <forward_cast+0x32e8>
 800da1e:	dde3      	ble.n	800d9e8 <forward_cast+0x3dc>
 800da20:	497b      	ldr	r1, [pc, #492]	; (800dc10 <forward_cast+0x604>)
 800da22:	428c      	cmp	r4, r1
 800da24:	f003 8443 	beq.w	80112ae <forward_cast+0x3ca2>
 800da28:	f341 8154 	ble.w	800ecd4 <forward_cast+0x16c8>
 800da2c:	4544      	cmp	r4, r8
 800da2e:	f041 8230 	bne.w	800ee92 <forward_cast+0x1886>
 800da32:	edd5 7a00 	vldr	s15, [r5]
 800da36:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800da3a:	ee17 1a90 	vmov	r1, s15
 800da3e:	b289      	uxth	r1, r1
 800da40:	e7e2      	b.n	800da08 <forward_cast+0x3fc>
 800da42:	45bb      	cmp	fp, r7
 800da44:	f001 82d8 	beq.w	800eff8 <forward_cast+0x19ec>
 800da48:	f300 80ce 	bgt.w	800dbe8 <forward_cast+0x5dc>
 800da4c:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 800dc14 <forward_cast+0x608>
 800da50:	45c3      	cmp	fp, r8
 800da52:	f001 8689 	beq.w	800f768 <forward_cast+0x215c>
 800da56:	f300 808a 	bgt.w	800db6e <forward_cast+0x562>
 800da5a:	4a71      	ldr	r2, [pc, #452]	; (800dc20 <forward_cast+0x614>)
 800da5c:	4593      	cmp	fp, r2
 800da5e:	f001 8620 	beq.w	800f6a2 <forward_cast+0x2096>
 800da62:	4b70      	ldr	r3, [pc, #448]	; (800dc24 <forward_cast+0x618>)
 800da64:	459b      	cmp	fp, r3
 800da66:	f47f ae39 	bne.w	800d6dc <forward_cast+0xd0>
 800da6a:	4555      	cmp	r5, sl
 800da6c:	f4bf ae36 	bcs.w	800d6dc <forward_cast+0xd0>
 800da70:	f8df b1b8 	ldr.w	fp, [pc, #440]	; 800dc2c <forward_cast+0x620>
 800da74:	4b68      	ldr	r3, [pc, #416]	; (800dc18 <forward_cast+0x60c>)
 800da76:	e01b      	b.n	800dab0 <forward_cast+0x4a4>
 800da78:	4544      	cmp	r4, r8
 800da7a:	f003 81f7 	beq.w	8010e6c <forward_cast+0x3860>
 800da7e:	f340 875f 	ble.w	800e940 <forward_cast+0x1334>
 800da82:	4961      	ldr	r1, [pc, #388]	; (800dc08 <forward_cast+0x5fc>)
 800da84:	428c      	cmp	r4, r1
 800da86:	f003 81e3 	beq.w	8010e50 <forward_cast+0x3844>
 800da8a:	f501 31f2 	add.w	r1, r1, #123904	; 0x1e400
 800da8e:	428c      	cmp	r4, r1
 800da90:	f041 820d 	bne.w	800eeae <forward_cast+0x18a2>
 800da94:	7828      	ldrb	r0, [r5, #0]
 800da96:	3800      	subs	r0, #0
 800da98:	bf18      	it	ne
 800da9a:	2001      	movne	r0, #1
 800da9c:	f300 0007 	ssat	r0, #8, r0
 800daa0:	444d      	add	r5, r9
 800daa2:	b240      	sxtb	r0, r0
 800daa4:	9900      	ldr	r1, [sp, #0]
 800daa6:	45aa      	cmp	sl, r5
 800daa8:	8030      	strh	r0, [r6, #0]
 800daaa:	440e      	add	r6, r1
 800daac:	f67f ae16 	bls.w	800d6dc <forward_cast+0xd0>
 800dab0:	42bc      	cmp	r4, r7
 800dab2:	f002 8756 	beq.w	8010962 <forward_cast+0x3356>
 800dab6:	dddf      	ble.n	800da78 <forward_cast+0x46c>
 800dab8:	4955      	ldr	r1, [pc, #340]	; (800dc10 <forward_cast+0x604>)
 800daba:	428c      	cmp	r4, r1
 800dabc:	f003 82da 	beq.w	8011074 <forward_cast+0x3a68>
 800dac0:	f341 816d 	ble.w	800ed9e <forward_cast+0x1792>
 800dac4:	455c      	cmp	r4, fp
 800dac6:	f041 81f2 	bne.w	800eeae <forward_cast+0x18a2>
 800daca:	edd5 7a00 	vldr	s15, [r5]
 800dace:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800dad2:	ee17 0a90 	vmov	r0, s15
 800dad6:	e7e1      	b.n	800da9c <forward_cast+0x490>
 800dad8:	45c3      	cmp	fp, r8
 800dada:	f001 8325 	beq.w	800f128 <forward_cast+0x1b1c>
 800dade:	f300 81e5 	bgt.w	800deac <forward_cast+0x8a0>
 800dae2:	45bb      	cmp	fp, r7
 800dae4:	f001 86a7 	beq.w	800f836 <forward_cast+0x222a>
 800dae8:	f300 81a1 	bgt.w	800de2e <forward_cast+0x822>
 800daec:	4b4c      	ldr	r3, [pc, #304]	; (800dc20 <forward_cast+0x614>)
 800daee:	459b      	cmp	fp, r3
 800daf0:	f001 8650 	beq.w	800f794 <forward_cast+0x2188>
 800daf4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800daf8:	459b      	cmp	fp, r3
 800dafa:	f47f adef 	bne.w	800d6dc <forward_cast+0xd0>
 800dafe:	4555      	cmp	r5, sl
 800db00:	f4bf adec 	bcs.w	800d6dc <forward_cast+0xd0>
 800db04:	f8df 8124 	ldr.w	r8, [pc, #292]	; 800dc2c <forward_cast+0x620>
 800db08:	4f43      	ldr	r7, [pc, #268]	; (800dc18 <forward_cast+0x60c>)
 800db0a:	f8df b11c 	ldr.w	fp, [pc, #284]	; 800dc28 <forward_cast+0x61c>
 800db0e:	4b41      	ldr	r3, [pc, #260]	; (800dc14 <forward_cast+0x608>)
 800db10:	4a3d      	ldr	r2, [pc, #244]	; (800dc08 <forward_cast+0x5fc>)
 800db12:	e016      	b.n	800db42 <forward_cast+0x536>
 800db14:	429c      	cmp	r4, r3
 800db16:	f002 84f4 	beq.w	8010502 <forward_cast+0x2ef6>
 800db1a:	f341 8042 	ble.w	800eba2 <forward_cast+0x1596>
 800db1e:	4294      	cmp	r4, r2
 800db20:	f002 83bd 	beq.w	801029e <forward_cast+0x2c92>
 800db24:	493d      	ldr	r1, [pc, #244]	; (800dc1c <forward_cast+0x610>)
 800db26:	428c      	cmp	r4, r1
 800db28:	f041 817c 	bne.w	800ee24 <forward_cast+0x1818>
 800db2c:	7829      	ldrb	r1, [r5, #0]
 800db2e:	3900      	subs	r1, #0
 800db30:	bf18      	it	ne
 800db32:	2101      	movne	r1, #1
 800db34:	444d      	add	r5, r9
 800db36:	8031      	strh	r1, [r6, #0]
 800db38:	9900      	ldr	r1, [sp, #0]
 800db3a:	45aa      	cmp	sl, r5
 800db3c:	440e      	add	r6, r1
 800db3e:	f67f adcd 	bls.w	800d6dc <forward_cast+0xd0>
 800db42:	4932      	ldr	r1, [pc, #200]	; (800dc0c <forward_cast+0x600>)
 800db44:	428c      	cmp	r4, r1
 800db46:	f002 8601 	beq.w	801074c <forward_cast+0x3140>
 800db4a:	dde3      	ble.n	800db14 <forward_cast+0x508>
 800db4c:	4930      	ldr	r1, [pc, #192]	; (800dc10 <forward_cast+0x604>)
 800db4e:	428c      	cmp	r4, r1
 800db50:	f003 829e 	beq.w	8011090 <forward_cast+0x3a84>
 800db54:	f340 87b6 	ble.w	800eac4 <forward_cast+0x14b8>
 800db58:	4544      	cmp	r4, r8
 800db5a:	f041 8163 	bne.w	800ee24 <forward_cast+0x1818>
 800db5e:	edd5 7a00 	vldr	s15, [r5]
 800db62:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800db66:	ee17 1a90 	vmov	r1, s15
 800db6a:	b289      	uxth	r1, r1
 800db6c:	e7e2      	b.n	800db34 <forward_cast+0x528>
 800db6e:	4b2b      	ldr	r3, [pc, #172]	; (800dc1c <forward_cast+0x610>)
 800db70:	459b      	cmp	fp, r3
 800db72:	f47f adb3 	bne.w	800d6dc <forward_cast+0xd0>
 800db76:	4555      	cmp	r5, sl
 800db78:	f4bf adb0 	bcs.w	800d6dc <forward_cast+0xd0>
 800db7c:	2300      	movs	r3, #0
 800db7e:	4a2a      	ldr	r2, [pc, #168]	; (800dc28 <forward_cast+0x61c>)
 800db80:	4619      	mov	r1, r3
 800db82:	464b      	mov	r3, r9
 800db84:	46b9      	mov	r9, r7
 800db86:	4637      	mov	r7, r6
 800db88:	460e      	mov	r6, r1
 800db8a:	e018      	b.n	800dbbe <forward_cast+0x5b2>
 800db8c:	4544      	cmp	r4, r8
 800db8e:	f002 83a4 	beq.w	80102da <forward_cast+0x2cce>
 800db92:	f340 878b 	ble.w	800eaac <forward_cast+0x14a0>
 800db96:	491c      	ldr	r1, [pc, #112]	; (800dc08 <forward_cast+0x5fc>)
 800db98:	428c      	cmp	r4, r1
 800db9a:	f002 838f 	beq.w	80102bc <forward_cast+0x2cb0>
 800db9e:	455c      	cmp	r4, fp
 800dba0:	f041 8143 	bne.w	800ee2a <forward_cast+0x181e>
 800dba4:	7828      	ldrb	r0, [r5, #0]
 800dba6:	3800      	subs	r0, #0
 800dba8:	bf18      	it	ne
 800dbaa:	2001      	movne	r0, #1
 800dbac:	f300 0007 	ssat	r0, #8, r0
 800dbb0:	441d      	add	r5, r3
 800dbb2:	9900      	ldr	r1, [sp, #0]
 800dbb4:	55b8      	strb	r0, [r7, r6]
 800dbb6:	45aa      	cmp	sl, r5
 800dbb8:	440e      	add	r6, r1
 800dbba:	f67f ad8f 	bls.w	800d6dc <forward_cast+0xd0>
 800dbbe:	454c      	cmp	r4, r9
 800dbc0:	f002 85c9 	beq.w	8010756 <forward_cast+0x314a>
 800dbc4:	dde2      	ble.n	800db8c <forward_cast+0x580>
 800dbc6:	4912      	ldr	r1, [pc, #72]	; (800dc10 <forward_cast+0x604>)
 800dbc8:	428c      	cmp	r4, r1
 800dbca:	f002 85b0 	beq.w	801072e <forward_cast+0x3122>
 800dbce:	f340 8731 	ble.w	800ea34 <forward_cast+0x1428>
 800dbd2:	4916      	ldr	r1, [pc, #88]	; (800dc2c <forward_cast+0x620>)
 800dbd4:	428c      	cmp	r4, r1
 800dbd6:	f041 8128 	bne.w	800ee2a <forward_cast+0x181e>
 800dbda:	edd5 7a00 	vldr	s15, [r5]
 800dbde:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800dbe2:	ee17 0a90 	vmov	r0, s15
 800dbe6:	e7e1      	b.n	800dbac <forward_cast+0x5a0>
 800dbe8:	f8df 803c 	ldr.w	r8, [pc, #60]	; 800dc28 <forward_cast+0x61c>
 800dbec:	45c3      	cmp	fp, r8
 800dbee:	f001 8765 	beq.w	800fabc <forward_cast+0x24b0>
 800dbf2:	4a0e      	ldr	r2, [pc, #56]	; (800dc2c <forward_cast+0x620>)
 800dbf4:	4593      	cmp	fp, r2
 800dbf6:	f040 83aa 	bne.w	800e34e <forward_cast+0xd42>
 800dbfa:	4555      	cmp	r5, sl
 800dbfc:	f4bf ad6e 	bcs.w	800d6dc <forward_cast+0xd0>
 800dc00:	4b01      	ldr	r3, [pc, #4]	; (800dc08 <forward_cast+0x5fc>)
 800dc02:	4a06      	ldr	r2, [pc, #24]	; (800dc1c <forward_cast+0x610>)
 800dc04:	e033      	b.n	800dc6e <forward_cast+0x662>
 800dc06:	bf00      	nop
 800dc08:	00042040 	.word	0x00042040
 800dc0c:	00840440 	.word	0x00840440
 800dc10:	00842040 	.word	0x00842040
 800dc14:	00041040 	.word	0x00041040
 800dc18:	00840840 	.word	0x00840840
 800dc1c:	00060440 	.word	0x00060440
 800dc20:	00040440 	.word	0x00040440
 800dc24:	00040840 	.word	0x00040840
 800dc28:	00841040 	.word	0x00841040
 800dc2c:	01821040 	.word	0x01821040
 800dc30:	49a6      	ldr	r1, [pc, #664]	; (800decc <forward_cast+0x8c0>)
 800dc32:	428c      	cmp	r4, r1
 800dc34:	f002 84c1 	beq.w	80105ba <forward_cast+0x2fae>
 800dc38:	f340 85ea 	ble.w	800e810 <forward_cast+0x1204>
 800dc3c:	429c      	cmp	r4, r3
 800dc3e:	f002 84ae 	beq.w	801059e <forward_cast+0x2f92>
 800dc42:	4294      	cmp	r4, r2
 800dc44:	f041 8104 	bne.w	800ee50 <forward_cast+0x1844>
 800dc48:	7828      	ldrb	r0, [r5, #0]
 800dc4a:	3800      	subs	r0, #0
 800dc4c:	bf18      	it	ne
 800dc4e:	2001      	movne	r0, #1
 800dc50:	f300 0007 	ssat	r0, #8, r0
 800dc54:	b240      	sxtb	r0, r0
 800dc56:	444d      	add	r5, r9
 800dc58:	9900      	ldr	r1, [sp, #0]
 800dc5a:	ee07 0a90 	vmov	s15, r0
 800dc5e:	45aa      	cmp	sl, r5
 800dc60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dc64:	edc6 7a00 	vstr	s15, [r6]
 800dc68:	440e      	add	r6, r1
 800dc6a:	f67f ad37 	bls.w	800d6dc <forward_cast+0xd0>
 800dc6e:	42bc      	cmp	r4, r7
 800dc70:	f002 840b 	beq.w	801048a <forward_cast+0x2e7e>
 800dc74:	dddc      	ble.n	800dc30 <forward_cast+0x624>
 800dc76:	4996      	ldr	r1, [pc, #600]	; (800ded0 <forward_cast+0x8c4>)
 800dc78:	428c      	cmp	r4, r1
 800dc7a:	f002 83f0 	beq.w	801045e <forward_cast+0x2e52>
 800dc7e:	f340 87f7 	ble.w	800ec70 <forward_cast+0x1664>
 800dc82:	455c      	cmp	r4, fp
 800dc84:	f041 80e4 	bne.w	800ee50 <forward_cast+0x1844>
 800dc88:	edd5 7a00 	vldr	s15, [r5]
 800dc8c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800dc90:	ee17 0a90 	vmov	r0, s15
 800dc94:	e7dc      	b.n	800dc50 <forward_cast+0x644>
 800dc96:	4b8f      	ldr	r3, [pc, #572]	; (800ded4 <forward_cast+0x8c8>)
 800dc98:	459b      	cmp	fp, r3
 800dc9a:	f47f ad1f 	bne.w	800d6dc <forward_cast+0xd0>
 800dc9e:	4555      	cmp	r5, sl
 800dca0:	f4bf ad1c 	bcs.w	800d6dc <forward_cast+0xd0>
 800dca4:	2700      	movs	r7, #0
 800dca6:	f8df 8228 	ldr.w	r8, [pc, #552]	; 800ded0 <forward_cast+0x8c4>
 800dcaa:	4b8b      	ldr	r3, [pc, #556]	; (800ded8 <forward_cast+0x8cc>)
 800dcac:	4a87      	ldr	r2, [pc, #540]	; (800decc <forward_cast+0x8c0>)
 800dcae:	e018      	b.n	800dce2 <forward_cast+0x6d6>
 800dcb0:	4294      	cmp	r4, r2
 800dcb2:	f003 8155 	beq.w	8010f60 <forward_cast+0x3954>
 800dcb6:	f340 8603 	ble.w	800e8c0 <forward_cast+0x12b4>
 800dcba:	4988      	ldr	r1, [pc, #544]	; (800dedc <forward_cast+0x8d0>)
 800dcbc:	428c      	cmp	r4, r1
 800dcbe:	f003 80fd 	beq.w	8010ebc <forward_cast+0x38b0>
 800dcc2:	455c      	cmp	r4, fp
 800dcc4:	f041 80d9 	bne.w	800ee7a <forward_cast+0x186e>
 800dcc8:	7828      	ldrb	r0, [r5, #0]
 800dcca:	3800      	subs	r0, #0
 800dccc:	bf18      	it	ne
 800dcce:	2001      	movne	r0, #1
 800dcd0:	f300 000f 	ssat	r0, #16, r0
 800dcd4:	444d      	add	r5, r9
 800dcd6:	9900      	ldr	r1, [sp, #0]
 800dcd8:	55f0      	strb	r0, [r6, r7]
 800dcda:	45aa      	cmp	sl, r5
 800dcdc:	440f      	add	r7, r1
 800dcde:	f67f acfd 	bls.w	800d6dc <forward_cast+0xd0>
 800dce2:	497f      	ldr	r1, [pc, #508]	; (800dee0 <forward_cast+0x8d4>)
 800dce4:	428c      	cmp	r4, r1
 800dce6:	f002 8765 	beq.w	8010bb4 <forward_cast+0x35a8>
 800dcea:	dde1      	ble.n	800dcb0 <forward_cast+0x6a4>
 800dcec:	4544      	cmp	r4, r8
 800dcee:	f002 83a0 	beq.w	8010432 <forward_cast+0x2e26>
 800dcf2:	f340 87ac 	ble.w	800ec4e <forward_cast+0x1642>
 800dcf6:	497b      	ldr	r1, [pc, #492]	; (800dee4 <forward_cast+0x8d8>)
 800dcf8:	428c      	cmp	r4, r1
 800dcfa:	f041 80be 	bne.w	800ee7a <forward_cast+0x186e>
 800dcfe:	edd5 7a00 	vldr	s15, [r5]
 800dd02:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800dd06:	ee17 0a90 	vmov	r0, s15
 800dd0a:	e7e1      	b.n	800dcd0 <forward_cast+0x6c4>
 800dd0c:	4b71      	ldr	r3, [pc, #452]	; (800ded4 <forward_cast+0x8c8>)
 800dd0e:	459b      	cmp	fp, r3
 800dd10:	f47f ace4 	bne.w	800d6dc <forward_cast+0xd0>
 800dd14:	4555      	cmp	r5, sl
 800dd16:	f4bf ace1 	bcs.w	800d6dc <forward_cast+0xd0>
 800dd1a:	9f00      	ldr	r7, [sp, #0]
 800dd1c:	4628      	mov	r0, r5
 800dd1e:	4621      	mov	r1, r4
 800dd20:	f7ff fc00 	bl	800d524 <_array_handle_get_as_float>
 800dd24:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800dd28:	444d      	add	r5, r9
 800dd2a:	ee17 3a90 	vmov	r3, s15
 800dd2e:	45aa      	cmp	sl, r5
 800dd30:	7033      	strb	r3, [r6, #0]
 800dd32:	443e      	add	r6, r7
 800dd34:	d8f2      	bhi.n	800dd1c <forward_cast+0x710>
 800dd36:	e4d1      	b.n	800d6dc <forward_cast+0xd0>
 800dd38:	459b      	cmp	fp, r3
 800dd3a:	f001 87de 	beq.w	800fcfa <forward_cast+0x26ee>
 800dd3e:	45bb      	cmp	fp, r7
 800dd40:	f040 8145 	bne.w	800dfce <forward_cast+0x9c2>
 800dd44:	4555      	cmp	r5, sl
 800dd46:	f4bf acc9 	bcs.w	800d6dc <forward_cast+0xd0>
 800dd4a:	ed9f 8a67 	vldr	s16, [pc, #412]	; 800dee8 <forward_cast+0x8dc>
 800dd4e:	4a64      	ldr	r2, [pc, #400]	; (800dee0 <forward_cast+0x8d4>)
 800dd50:	4b5f      	ldr	r3, [pc, #380]	; (800ded0 <forward_cast+0x8c4>)
 800dd52:	f8df b190 	ldr.w	fp, [pc, #400]	; 800dee4 <forward_cast+0x8d8>
 800dd56:	f8df 8174 	ldr.w	r8, [pc, #372]	; 800decc <forward_cast+0x8c0>
 800dd5a:	4f60      	ldr	r7, [pc, #384]	; (800dedc <forward_cast+0x8d0>)
 800dd5c:	e019      	b.n	800dd92 <forward_cast+0x786>
 800dd5e:	4544      	cmp	r4, r8
 800dd60:	f002 8477 	beq.w	8010652 <forward_cast+0x3046>
 800dd64:	f340 8510 	ble.w	800e788 <forward_cast+0x117c>
 800dd68:	42bc      	cmp	r4, r7
 800dd6a:	f002 840e 	beq.w	801058a <forward_cast+0x2f7e>
 800dd6e:	4959      	ldr	r1, [pc, #356]	; (800ded4 <forward_cast+0x8c8>)
 800dd70:	428c      	cmp	r4, r1
 800dd72:	f041 8069 	bne.w	800ee48 <forward_cast+0x183c>
 800dd76:	7829      	ldrb	r1, [r5, #0]
 800dd78:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800dd7c:	2900      	cmp	r1, #0
 800dd7e:	fe48 7a27 	vseleq.f32	s15, s16, s15
 800dd82:	444d      	add	r5, r9
 800dd84:	9900      	ldr	r1, [sp, #0]
 800dd86:	edc6 7a00 	vstr	s15, [r6]
 800dd8a:	45aa      	cmp	sl, r5
 800dd8c:	440e      	add	r6, r1
 800dd8e:	f67f aca5 	bls.w	800d6dc <forward_cast+0xd0>
 800dd92:	4294      	cmp	r4, r2
 800dd94:	f002 819a 	beq.w	80100cc <forward_cast+0x2ac0>
 800dd98:	dde1      	ble.n	800dd5e <forward_cast+0x752>
 800dd9a:	429c      	cmp	r4, r3
 800dd9c:	f002 8488 	beq.w	80106b0 <forward_cast+0x30a4>
 800dda0:	f340 8746 	ble.w	800ec30 <forward_cast+0x1624>
 800dda4:	455c      	cmp	r4, fp
 800dda6:	f041 804f 	bne.w	800ee48 <forward_cast+0x183c>
 800ddaa:	edd5 7a00 	vldr	s15, [r5]
 800ddae:	e7e8      	b.n	800dd82 <forward_cast+0x776>
 800ddb0:	4b48      	ldr	r3, [pc, #288]	; (800ded4 <forward_cast+0x8c8>)
 800ddb2:	459b      	cmp	fp, r3
 800ddb4:	f47f ac92 	bne.w	800d6dc <forward_cast+0xd0>
 800ddb8:	4555      	cmp	r5, sl
 800ddba:	f4bf ac8f 	bcs.w	800d6dc <forward_cast+0xd0>
 800ddbe:	2700      	movs	r7, #0
 800ddc0:	f8df 8120 	ldr.w	r8, [pc, #288]	; 800dee4 <forward_cast+0x8d8>
 800ddc4:	f8df b124 	ldr.w	fp, [pc, #292]	; 800deec <forward_cast+0x8e0>
 800ddc8:	4b43      	ldr	r3, [pc, #268]	; (800ded8 <forward_cast+0x8cc>)
 800ddca:	4a40      	ldr	r2, [pc, #256]	; (800decc <forward_cast+0x8c0>)
 800ddcc:	e018      	b.n	800de00 <forward_cast+0x7f4>
 800ddce:	4294      	cmp	r4, r2
 800ddd0:	f002 831f 	beq.w	8010412 <forward_cast+0x2e06>
 800ddd4:	f340 86cd 	ble.w	800eb72 <forward_cast+0x1566>
 800ddd8:	4940      	ldr	r1, [pc, #256]	; (800dedc <forward_cast+0x8d0>)
 800ddda:	428c      	cmp	r4, r1
 800dddc:	f002 8309 	beq.w	80103f2 <forward_cast+0x2de6>
 800dde0:	f501 31f2 	add.w	r1, r1, #123904	; 0x1e400
 800dde4:	428c      	cmp	r4, r1
 800dde6:	f041 8015 	bne.w	800ee14 <forward_cast+0x1808>
 800ddea:	7829      	ldrb	r1, [r5, #0]
 800ddec:	3900      	subs	r1, #0
 800ddee:	bf18      	it	ne
 800ddf0:	2101      	movne	r1, #1
 800ddf2:	444d      	add	r5, r9
 800ddf4:	55f1      	strb	r1, [r6, r7]
 800ddf6:	9900      	ldr	r1, [sp, #0]
 800ddf8:	45aa      	cmp	sl, r5
 800ddfa:	440f      	add	r7, r1
 800ddfc:	f67f ac6e 	bls.w	800d6dc <forward_cast+0xd0>
 800de00:	4937      	ldr	r1, [pc, #220]	; (800dee0 <forward_cast+0x8d4>)
 800de02:	428c      	cmp	r4, r1
 800de04:	f000 86be 	beq.w	800eb84 <forward_cast+0x1578>
 800de08:	dde1      	ble.n	800ddce <forward_cast+0x7c2>
 800de0a:	4931      	ldr	r1, [pc, #196]	; (800ded0 <forward_cast+0x8c4>)
 800de0c:	428c      	cmp	r4, r1
 800de0e:	f002 8557 	beq.w	80108c0 <forward_cast+0x32b4>
 800de12:	f340 86fc 	ble.w	800ec0e <forward_cast+0x1602>
 800de16:	4544      	cmp	r4, r8
 800de18:	f040 87fc 	bne.w	800ee14 <forward_cast+0x1808>
 800de1c:	edd5 7a00 	vldr	s15, [r5]
 800de20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800de24:	edcd 7a01 	vstr	s15, [sp, #4]
 800de28:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800de2c:	e7e1      	b.n	800ddf2 <forward_cast+0x7e6>
 800de2e:	4b29      	ldr	r3, [pc, #164]	; (800ded4 <forward_cast+0x8c8>)
 800de30:	459b      	cmp	fp, r3
 800de32:	f47f ac53 	bne.w	800d6dc <forward_cast+0xd0>
 800de36:	4555      	cmp	r5, sl
 800de38:	f4bf ac50 	bcs.w	800d6dc <forward_cast+0xd0>
 800de3c:	2700      	movs	r7, #0
 800de3e:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 800dee4 <forward_cast+0x8d8>
 800de42:	f8df b0a8 	ldr.w	fp, [pc, #168]	; 800deec <forward_cast+0x8e0>
 800de46:	4b24      	ldr	r3, [pc, #144]	; (800ded8 <forward_cast+0x8cc>)
 800de48:	4a20      	ldr	r2, [pc, #128]	; (800decc <forward_cast+0x8c0>)
 800de4a:	e018      	b.n	800de7e <forward_cast+0x872>
 800de4c:	4294      	cmp	r4, r2
 800de4e:	f002 80c9 	beq.w	800ffe4 <forward_cast+0x29d8>
 800de52:	f340 869a 	ble.w	800eb8a <forward_cast+0x157e>
 800de56:	4921      	ldr	r1, [pc, #132]	; (800dedc <forward_cast+0x8d0>)
 800de58:	428c      	cmp	r4, r1
 800de5a:	f002 82ba 	beq.w	80103d2 <forward_cast+0x2dc6>
 800de5e:	f501 31f2 	add.w	r1, r1, #123904	; 0x1e400
 800de62:	428c      	cmp	r4, r1
 800de64:	f040 87d3 	bne.w	800ee0e <forward_cast+0x1802>
 800de68:	7829      	ldrb	r1, [r5, #0]
 800de6a:	3900      	subs	r1, #0
 800de6c:	bf18      	it	ne
 800de6e:	2101      	movne	r1, #1
 800de70:	444d      	add	r5, r9
 800de72:	55f1      	strb	r1, [r6, r7]
 800de74:	9900      	ldr	r1, [sp, #0]
 800de76:	45aa      	cmp	sl, r5
 800de78:	440f      	add	r7, r1
 800de7a:	f67f ac2f 	bls.w	800d6dc <forward_cast+0xd0>
 800de7e:	4918      	ldr	r1, [pc, #96]	; (800dee0 <forward_cast+0x8d4>)
 800de80:	428c      	cmp	r4, r1
 800de82:	f000 868b 	beq.w	800eb9c <forward_cast+0x1590>
 800de86:	dde1      	ble.n	800de4c <forward_cast+0x840>
 800de88:	4911      	ldr	r1, [pc, #68]	; (800ded0 <forward_cast+0x8c4>)
 800de8a:	428c      	cmp	r4, r1
 800de8c:	f002 81e9 	beq.w	8010262 <forward_cast+0x2c56>
 800de90:	f340 863e 	ble.w	800eb10 <forward_cast+0x1504>
 800de94:	4544      	cmp	r4, r8
 800de96:	f040 87ba 	bne.w	800ee0e <forward_cast+0x1802>
 800de9a:	edd5 7a00 	vldr	s15, [r5]
 800de9e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800dea2:	edcd 7a01 	vstr	s15, [sp, #4]
 800dea6:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800deaa:	e7e1      	b.n	800de70 <forward_cast+0x864>
 800deac:	4a0a      	ldr	r2, [pc, #40]	; (800ded8 <forward_cast+0x8cc>)
 800deae:	4593      	cmp	fp, r2
 800deb0:	f001 85bb 	beq.w	800fa2a <forward_cast+0x241e>
 800deb4:	4b0b      	ldr	r3, [pc, #44]	; (800dee4 <forward_cast+0x8d8>)
 800deb6:	459b      	cmp	fp, r3
 800deb8:	f040 80c5 	bne.w	800e046 <forward_cast+0xa3a>
 800debc:	4555      	cmp	r5, sl
 800debe:	f4bf ac0d 	bcs.w	800d6dc <forward_cast+0xd0>
 800dec2:	ed9f 8a09 	vldr	s16, [pc, #36]	; 800dee8 <forward_cast+0x8dc>
 800dec6:	4b09      	ldr	r3, [pc, #36]	; (800deec <forward_cast+0x8e0>)
 800dec8:	e02e      	b.n	800df28 <forward_cast+0x91c>
 800deca:	bf00      	nop
 800decc:	00041040 	.word	0x00041040
 800ded0:	00842040 	.word	0x00842040
 800ded4:	00060440 	.word	0x00060440
 800ded8:	00841040 	.word	0x00841040
 800dedc:	00042040 	.word	0x00042040
 800dee0:	00840440 	.word	0x00840440
 800dee4:	01821040 	.word	0x01821040
 800dee8:	00000000 	.word	0x00000000
 800deec:	00840840 	.word	0x00840840
 800def0:	42bc      	cmp	r4, r7
 800def2:	f002 8126 	beq.w	8010142 <forward_cast+0x2b36>
 800def6:	f340 8437 	ble.w	800e768 <forward_cast+0x115c>
 800defa:	49b3      	ldr	r1, [pc, #716]	; (800e1c8 <forward_cast+0xbbc>)
 800defc:	428c      	cmp	r4, r1
 800defe:	f002 8138 	beq.w	8010172 <forward_cast+0x2b66>
 800df02:	f501 31f2 	add.w	r1, r1, #123904	; 0x1e400
 800df06:	428c      	cmp	r4, r1
 800df08:	f040 879a 	bne.w	800ee40 <forward_cast+0x1834>
 800df0c:	7829      	ldrb	r1, [r5, #0]
 800df0e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800df12:	2900      	cmp	r1, #0
 800df14:	fe48 7a27 	vseleq.f32	s15, s16, s15
 800df18:	444d      	add	r5, r9
 800df1a:	9900      	ldr	r1, [sp, #0]
 800df1c:	edc6 7a00 	vstr	s15, [r6]
 800df20:	45aa      	cmp	sl, r5
 800df22:	440e      	add	r6, r1
 800df24:	f67f abda 	bls.w	800d6dc <forward_cast+0xd0>
 800df28:	4544      	cmp	r4, r8
 800df2a:	f002 80e0 	beq.w	80100ee <forward_cast+0x2ae2>
 800df2e:	dddf      	ble.n	800def0 <forward_cast+0x8e4>
 800df30:	49a6      	ldr	r1, [pc, #664]	; (800e1cc <forward_cast+0xbc0>)
 800df32:	428c      	cmp	r4, r1
 800df34:	f002 85ff 	beq.w	8010b36 <forward_cast+0x352a>
 800df38:	f340 8743 	ble.w	800edc2 <forward_cast+0x17b6>
 800df3c:	455c      	cmp	r4, fp
 800df3e:	f040 877f 	bne.w	800ee40 <forward_cast+0x1834>
 800df42:	edd5 7a00 	vldr	s15, [r5]
 800df46:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800df4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800df4e:	e7e3      	b.n	800df18 <forward_cast+0x90c>
 800df50:	45bb      	cmp	fp, r7
 800df52:	f000 87b5 	beq.w	800eec0 <forward_cast+0x18b4>
 800df56:	4b9e      	ldr	r3, [pc, #632]	; (800e1d0 <forward_cast+0xbc4>)
 800df58:	459b      	cmp	fp, r3
 800df5a:	f040 80b0 	bne.w	800e0be <forward_cast+0xab2>
 800df5e:	4555      	cmp	r5, sl
 800df60:	f4bf abbc 	bcs.w	800d6dc <forward_cast+0xd0>
 800df64:	ed9f 8a9b 	vldr	s16, [pc, #620]	; 800e1d4 <forward_cast+0xbc8>
 800df68:	4a98      	ldr	r2, [pc, #608]	; (800e1cc <forward_cast+0xbc0>)
 800df6a:	4b9b      	ldr	r3, [pc, #620]	; (800e1d8 <forward_cast+0xbcc>)
 800df6c:	e01c      	b.n	800dfa8 <forward_cast+0x99c>
 800df6e:	499b      	ldr	r1, [pc, #620]	; (800e1dc <forward_cast+0xbd0>)
 800df70:	428c      	cmp	r4, r1
 800df72:	f002 8752 	beq.w	8010e1a <forward_cast+0x380e>
 800df76:	f340 847a 	ble.w	800e86e <forward_cast+0x1262>
 800df7a:	4993      	ldr	r1, [pc, #588]	; (800e1c8 <forward_cast+0xbbc>)
 800df7c:	428c      	cmp	r4, r1
 800df7e:	f002 873e 	beq.w	8010dfe <forward_cast+0x37f2>
 800df82:	f501 31f2 	add.w	r1, r1, #123904	; 0x1e400
 800df86:	428c      	cmp	r4, r1
 800df88:	f040 8786 	bne.w	800ee98 <forward_cast+0x188c>
 800df8c:	7829      	ldrb	r1, [r5, #0]
 800df8e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800df92:	2900      	cmp	r1, #0
 800df94:	fe48 7a27 	vseleq.f32	s15, s16, s15
 800df98:	444d      	add	r5, r9
 800df9a:	9900      	ldr	r1, [sp, #0]
 800df9c:	edc6 7a00 	vstr	s15, [r6]
 800dfa0:	45aa      	cmp	sl, r5
 800dfa2:	440e      	add	r6, r1
 800dfa4:	f67f ab9a 	bls.w	800d6dc <forward_cast+0xd0>
 800dfa8:	4544      	cmp	r4, r8
 800dfaa:	f002 8702 	beq.w	8010db2 <forward_cast+0x37a6>
 800dfae:	ddde      	ble.n	800df6e <forward_cast+0x962>
 800dfb0:	4294      	cmp	r4, r2
 800dfb2:	f002 85ae 	beq.w	8010b12 <forward_cast+0x3506>
 800dfb6:	f340 866d 	ble.w	800ec94 <forward_cast+0x1688>
 800dfba:	455c      	cmp	r4, fp
 800dfbc:	f040 876c 	bne.w	800ee98 <forward_cast+0x188c>
 800dfc0:	edd5 7a00 	vldr	s15, [r5]
 800dfc4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800dfc8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dfcc:	e7e4      	b.n	800df98 <forward_cast+0x98c>
 800dfce:	4b82      	ldr	r3, [pc, #520]	; (800e1d8 <forward_cast+0xbcc>)
 800dfd0:	459b      	cmp	fp, r3
 800dfd2:	f47f ab83 	bne.w	800d6dc <forward_cast+0xd0>
 800dfd6:	4555      	cmp	r5, sl
 800dfd8:	f4bf ab80 	bcs.w	800d6dc <forward_cast+0xd0>
 800dfdc:	f8df 81f0 	ldr.w	r8, [pc, #496]	; 800e1d0 <forward_cast+0xbc4>
 800dfe0:	4f7d      	ldr	r7, [pc, #500]	; (800e1d8 <forward_cast+0xbcc>)
 800dfe2:	f8df b204 	ldr.w	fp, [pc, #516]	; 800e1e8 <forward_cast+0xbdc>
 800dfe6:	4b7d      	ldr	r3, [pc, #500]	; (800e1dc <forward_cast+0xbd0>)
 800dfe8:	4a77      	ldr	r2, [pc, #476]	; (800e1c8 <forward_cast+0xbbc>)
 800dfea:	e016      	b.n	800e01a <forward_cast+0xa0e>
 800dfec:	429c      	cmp	r4, r3
 800dfee:	f002 8618 	beq.w	8010c22 <forward_cast+0x3616>
 800dff2:	f340 847e 	ble.w	800e8f2 <forward_cast+0x12e6>
 800dff6:	4294      	cmp	r4, r2
 800dff8:	f002 8604 	beq.w	8010c04 <forward_cast+0x35f8>
 800dffc:	4978      	ldr	r1, [pc, #480]	; (800e1e0 <forward_cast+0xbd4>)
 800dffe:	428c      	cmp	r4, r1
 800e000:	f040 8732 	bne.w	800ee68 <forward_cast+0x185c>
 800e004:	7829      	ldrb	r1, [r5, #0]
 800e006:	3900      	subs	r1, #0
 800e008:	bf18      	it	ne
 800e00a:	2101      	movne	r1, #1
 800e00c:	444d      	add	r5, r9
 800e00e:	8031      	strh	r1, [r6, #0]
 800e010:	9900      	ldr	r1, [sp, #0]
 800e012:	45aa      	cmp	sl, r5
 800e014:	440e      	add	r6, r1
 800e016:	f67f ab61 	bls.w	800d6dc <forward_cast+0xd0>
 800e01a:	4972      	ldr	r1, [pc, #456]	; (800e1e4 <forward_cast+0xbd8>)
 800e01c:	428c      	cmp	r4, r1
 800e01e:	f002 8612 	beq.w	8010c46 <forward_cast+0x363a>
 800e022:	dde3      	ble.n	800dfec <forward_cast+0x9e0>
 800e024:	4969      	ldr	r1, [pc, #420]	; (800e1cc <forward_cast+0xbc0>)
 800e026:	428c      	cmp	r4, r1
 800e028:	f002 8560 	beq.w	8010aec <forward_cast+0x34e0>
 800e02c:	f340 8683 	ble.w	800ed36 <forward_cast+0x172a>
 800e030:	4544      	cmp	r4, r8
 800e032:	f040 8719 	bne.w	800ee68 <forward_cast+0x185c>
 800e036:	edd5 7a00 	vldr	s15, [r5]
 800e03a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e03e:	ee17 1a90 	vmov	r1, s15
 800e042:	b209      	sxth	r1, r1
 800e044:	e7e2      	b.n	800e00c <forward_cast+0xa00>
 800e046:	4b64      	ldr	r3, [pc, #400]	; (800e1d8 <forward_cast+0xbcc>)
 800e048:	459b      	cmp	fp, r3
 800e04a:	f47f ab47 	bne.w	800d6dc <forward_cast+0xd0>
 800e04e:	4555      	cmp	r5, sl
 800e050:	f4bf ab44 	bcs.w	800d6dc <forward_cast+0xd0>
 800e054:	f8df 8178 	ldr.w	r8, [pc, #376]	; 800e1d0 <forward_cast+0xbc4>
 800e058:	4f5f      	ldr	r7, [pc, #380]	; (800e1d8 <forward_cast+0xbcc>)
 800e05a:	f8df b18c 	ldr.w	fp, [pc, #396]	; 800e1e8 <forward_cast+0xbdc>
 800e05e:	4b5f      	ldr	r3, [pc, #380]	; (800e1dc <forward_cast+0xbd0>)
 800e060:	4a59      	ldr	r2, [pc, #356]	; (800e1c8 <forward_cast+0xbbc>)
 800e062:	e016      	b.n	800e092 <forward_cast+0xa86>
 800e064:	429c      	cmp	r4, r3
 800e066:	f002 8593 	beq.w	8010b90 <forward_cast+0x3584>
 800e06a:	f340 8411 	ble.w	800e890 <forward_cast+0x1284>
 800e06e:	4294      	cmp	r4, r2
 800e070:	f002 84ff 	beq.w	8010a72 <forward_cast+0x3466>
 800e074:	495a      	ldr	r1, [pc, #360]	; (800e1e0 <forward_cast+0xbd4>)
 800e076:	428c      	cmp	r4, r1
 800e078:	f040 86f9 	bne.w	800ee6e <forward_cast+0x1862>
 800e07c:	7829      	ldrb	r1, [r5, #0]
 800e07e:	3900      	subs	r1, #0
 800e080:	bf18      	it	ne
 800e082:	2101      	movne	r1, #1
 800e084:	444d      	add	r5, r9
 800e086:	8031      	strh	r1, [r6, #0]
 800e088:	9900      	ldr	r1, [sp, #0]
 800e08a:	45aa      	cmp	sl, r5
 800e08c:	440e      	add	r6, r1
 800e08e:	f67f ab25 	bls.w	800d6dc <forward_cast+0xd0>
 800e092:	4954      	ldr	r1, [pc, #336]	; (800e1e4 <forward_cast+0xbd8>)
 800e094:	428c      	cmp	r4, r1
 800e096:	f002 85da 	beq.w	8010c4e <forward_cast+0x3642>
 800e09a:	dde3      	ble.n	800e064 <forward_cast+0xa58>
 800e09c:	494b      	ldr	r1, [pc, #300]	; (800e1cc <forward_cast+0xbc0>)
 800e09e:	428c      	cmp	r4, r1
 800e0a0:	f002 8590 	beq.w	8010bc4 <forward_cast+0x35b8>
 800e0a4:	f340 8456 	ble.w	800e954 <forward_cast+0x1348>
 800e0a8:	4544      	cmp	r4, r8
 800e0aa:	f040 86e0 	bne.w	800ee6e <forward_cast+0x1862>
 800e0ae:	edd5 7a00 	vldr	s15, [r5]
 800e0b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e0b6:	ee17 1a90 	vmov	r1, s15
 800e0ba:	b209      	sxth	r1, r1
 800e0bc:	e7e2      	b.n	800e084 <forward_cast+0xa78>
 800e0be:	4b46      	ldr	r3, [pc, #280]	; (800e1d8 <forward_cast+0xbcc>)
 800e0c0:	459b      	cmp	fp, r3
 800e0c2:	f47f ab0b 	bne.w	800d6dc <forward_cast+0xd0>
 800e0c6:	4555      	cmp	r5, sl
 800e0c8:	f4bf ab08 	bcs.w	800d6dc <forward_cast+0xd0>
 800e0cc:	f8df 8100 	ldr.w	r8, [pc, #256]	; 800e1d0 <forward_cast+0xbc4>
 800e0d0:	4f41      	ldr	r7, [pc, #260]	; (800e1d8 <forward_cast+0xbcc>)
 800e0d2:	f8df b114 	ldr.w	fp, [pc, #276]	; 800e1e8 <forward_cast+0xbdc>
 800e0d6:	4b41      	ldr	r3, [pc, #260]	; (800e1dc <forward_cast+0xbd0>)
 800e0d8:	4a3b      	ldr	r2, [pc, #236]	; (800e1c8 <forward_cast+0xbbc>)
 800e0da:	e016      	b.n	800e10a <forward_cast+0xafe>
 800e0dc:	429c      	cmp	r4, r3
 800e0de:	f002 8670 	beq.w	8010dc2 <forward_cast+0x37b6>
 800e0e2:	f340 8586 	ble.w	800ebf2 <forward_cast+0x15e6>
 800e0e6:	4294      	cmp	r4, r2
 800e0e8:	f002 85b9 	beq.w	8010c5e <forward_cast+0x3652>
 800e0ec:	493c      	ldr	r1, [pc, #240]	; (800e1e0 <forward_cast+0xbd4>)
 800e0ee:	428c      	cmp	r4, r1
 800e0f0:	f040 86e0 	bne.w	800eeb4 <forward_cast+0x18a8>
 800e0f4:	7829      	ldrb	r1, [r5, #0]
 800e0f6:	3900      	subs	r1, #0
 800e0f8:	bf18      	it	ne
 800e0fa:	2101      	movne	r1, #1
 800e0fc:	444d      	add	r5, r9
 800e0fe:	8031      	strh	r1, [r6, #0]
 800e100:	9900      	ldr	r1, [sp, #0]
 800e102:	45aa      	cmp	sl, r5
 800e104:	440e      	add	r6, r1
 800e106:	f67f aae9 	bls.w	800d6dc <forward_cast+0xd0>
 800e10a:	4936      	ldr	r1, [pc, #216]	; (800e1e4 <forward_cast+0xbd8>)
 800e10c:	428c      	cmp	r4, r1
 800e10e:	f002 8215 	beq.w	801053c <forward_cast+0x2f30>
 800e112:	dde3      	ble.n	800e0dc <forward_cast+0xad0>
 800e114:	492d      	ldr	r1, [pc, #180]	; (800e1cc <forward_cast+0xbc0>)
 800e116:	428c      	cmp	r4, r1
 800e118:	f002 84d5 	beq.w	8010ac6 <forward_cast+0x34ba>
 800e11c:	f340 849c 	ble.w	800ea58 <forward_cast+0x144c>
 800e120:	4544      	cmp	r4, r8
 800e122:	f040 86c7 	bne.w	800eeb4 <forward_cast+0x18a8>
 800e126:	edd5 7a00 	vldr	s15, [r5]
 800e12a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e12e:	ee17 1a90 	vmov	r1, s15
 800e132:	b209      	sxth	r1, r1
 800e134:	e7e2      	b.n	800e0fc <forward_cast+0xaf0>
 800e136:	4b2a      	ldr	r3, [pc, #168]	; (800e1e0 <forward_cast+0xbd4>)
 800e138:	459b      	cmp	fp, r3
 800e13a:	f47f aacf 	bne.w	800d6dc <forward_cast+0xd0>
 800e13e:	4555      	cmp	r5, sl
 800e140:	f4bf aacc 	bcs.w	800d6dc <forward_cast+0xd0>
 800e144:	9f00      	ldr	r7, [sp, #0]
 800e146:	4621      	mov	r1, r4
 800e148:	4628      	mov	r0, r5
 800e14a:	f7ff f9eb 	bl	800d524 <_array_handle_get_as_float>
 800e14e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800e152:	ee17 3a90 	vmov	r3, s15
 800e156:	f383 0308 	usat	r3, #8, r3
 800e15a:	444d      	add	r5, r9
 800e15c:	7033      	strb	r3, [r6, #0]
 800e15e:	443e      	add	r6, r7
 800e160:	45aa      	cmp	sl, r5
 800e162:	d8f0      	bhi.n	800e146 <forward_cast+0xb3a>
 800e164:	f7ff baba 	b.w	800d6dc <forward_cast+0xd0>
 800e168:	4b1f      	ldr	r3, [pc, #124]	; (800e1e8 <forward_cast+0xbdc>)
 800e16a:	459b      	cmp	fp, r3
 800e16c:	f001 850b 	beq.w	800fb86 <forward_cast+0x257a>
 800e170:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 800e174:	459b      	cmp	fp, r3
 800e176:	f040 81ea 	bne.w	800e54e <forward_cast+0xf42>
 800e17a:	4555      	cmp	r5, sl
 800e17c:	f4bf aaae 	bcs.w	800d6dc <forward_cast+0xd0>
 800e180:	9f00      	ldr	r7, [sp, #0]
 800e182:	4621      	mov	r1, r4
 800e184:	4628      	mov	r0, r5
 800e186:	f7ff f9cd 	bl	800d524 <_array_handle_get_as_float>
 800e18a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800e18e:	ee17 3a90 	vmov	r3, s15
 800e192:	f383 0308 	usat	r3, #8, r3
 800e196:	b2db      	uxtb	r3, r3
 800e198:	444d      	add	r5, r9
 800e19a:	ee07 3a90 	vmov	s15, r3
 800e19e:	45aa      	cmp	sl, r5
 800e1a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e1a4:	edc6 7a00 	vstr	s15, [r6]
 800e1a8:	443e      	add	r6, r7
 800e1aa:	d8ea      	bhi.n	800e182 <forward_cast+0xb76>
 800e1ac:	f7ff ba96 	b.w	800d6dc <forward_cast+0xd0>
 800e1b0:	4b0b      	ldr	r3, [pc, #44]	; (800e1e0 <forward_cast+0xbd4>)
 800e1b2:	459b      	cmp	fp, r3
 800e1b4:	f47f aa92 	bne.w	800d6dc <forward_cast+0xd0>
 800e1b8:	4555      	cmp	r5, sl
 800e1ba:	f4bf aa8f 	bcs.w	800d6dc <forward_cast+0xd0>
 800e1be:	f04f 0800 	mov.w	r8, #0
 800e1c2:	4b05      	ldr	r3, [pc, #20]	; (800e1d8 <forward_cast+0xbcc>)
 800e1c4:	4a08      	ldr	r2, [pc, #32]	; (800e1e8 <forward_cast+0xbdc>)
 800e1c6:	e02b      	b.n	800e220 <forward_cast+0xc14>
 800e1c8:	00042040 	.word	0x00042040
 800e1cc:	00842040 	.word	0x00842040
 800e1d0:	01821040 	.word	0x01821040
 800e1d4:	00000000 	.word	0x00000000
 800e1d8:	00840840 	.word	0x00840840
 800e1dc:	00041040 	.word	0x00041040
 800e1e0:	00060440 	.word	0x00060440
 800e1e4:	00840440 	.word	0x00840440
 800e1e8:	00841040 	.word	0x00841040
 800e1ec:	42bc      	cmp	r4, r7
 800e1ee:	f002 8681 	beq.w	8010ef4 <forward_cast+0x38e8>
 800e1f2:	f340 8399 	ble.w	800e928 <forward_cast+0x131c>
 800e1f6:	49ac      	ldr	r1, [pc, #688]	; (800e4a8 <forward_cast+0xe9c>)
 800e1f8:	428c      	cmp	r4, r1
 800e1fa:	f002 866d 	beq.w	8010ed8 <forward_cast+0x38cc>
 800e1fe:	455c      	cmp	r4, fp
 800e200:	f040 863e 	bne.w	800ee80 <forward_cast+0x1874>
 800e204:	7828      	ldrb	r0, [r5, #0]
 800e206:	3800      	subs	r0, #0
 800e208:	bf18      	it	ne
 800e20a:	2001      	movne	r0, #1
 800e20c:	f380 0010 	usat	r0, #16, r0
 800e210:	444d      	add	r5, r9
 800e212:	9900      	ldr	r1, [sp, #0]
 800e214:	f806 0008 	strb.w	r0, [r6, r8]
 800e218:	45aa      	cmp	sl, r5
 800e21a:	4488      	add	r8, r1
 800e21c:	f67f aa5e 	bls.w	800d6dc <forward_cast+0xd0>
 800e220:	49a2      	ldr	r1, [pc, #648]	; (800e4ac <forward_cast+0xea0>)
 800e222:	428c      	cmp	r4, r1
 800e224:	f002 8517 	beq.w	8010c56 <forward_cast+0x364a>
 800e228:	dde0      	ble.n	800e1ec <forward_cast+0xbe0>
 800e22a:	49a1      	ldr	r1, [pc, #644]	; (800e4b0 <forward_cast+0xea4>)
 800e22c:	428c      	cmp	r4, r1
 800e22e:	f002 8269 	beq.w	8010704 <forward_cast+0x30f8>
 800e232:	f340 8570 	ble.w	800ed16 <forward_cast+0x170a>
 800e236:	499f      	ldr	r1, [pc, #636]	; (800e4b4 <forward_cast+0xea8>)
 800e238:	428c      	cmp	r4, r1
 800e23a:	f040 8621 	bne.w	800ee80 <forward_cast+0x1874>
 800e23e:	edd5 7a00 	vldr	s15, [r5]
 800e242:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e246:	ee17 0a90 	vmov	r0, s15
 800e24a:	e7df      	b.n	800e20c <forward_cast+0xc00>
 800e24c:	4b9a      	ldr	r3, [pc, #616]	; (800e4b8 <forward_cast+0xeac>)
 800e24e:	459b      	cmp	fp, r3
 800e250:	f47f aa44 	bne.w	800d6dc <forward_cast+0xd0>
 800e254:	4555      	cmp	r5, sl
 800e256:	f4bf aa41 	bcs.w	800d6dc <forward_cast+0xd0>
 800e25a:	9f00      	ldr	r7, [sp, #0]
 800e25c:	4628      	mov	r0, r5
 800e25e:	4621      	mov	r1, r4
 800e260:	f7ff f960 	bl	800d524 <_array_handle_get_as_float>
 800e264:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800e268:	444d      	add	r5, r9
 800e26a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e26e:	bf14      	ite	ne
 800e270:	2301      	movne	r3, #1
 800e272:	2300      	moveq	r3, #0
 800e274:	45aa      	cmp	sl, r5
 800e276:	7033      	strb	r3, [r6, #0]
 800e278:	443e      	add	r6, r7
 800e27a:	d8ef      	bhi.n	800e25c <forward_cast+0xc50>
 800e27c:	f7ff ba2e 	b.w	800d6dc <forward_cast+0xd0>
 800e280:	4b8e      	ldr	r3, [pc, #568]	; (800e4bc <forward_cast+0xeb0>)
 800e282:	459b      	cmp	fp, r3
 800e284:	f001 84d0 	beq.w	800fc28 <forward_cast+0x261c>
 800e288:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 800e28c:	459b      	cmp	fp, r3
 800e28e:	f040 8096 	bne.w	800e3be <forward_cast+0xdb2>
 800e292:	4555      	cmp	r5, sl
 800e294:	f4bf aa22 	bcs.w	800d6dc <forward_cast+0xd0>
 800e298:	f04f 587e 	mov.w	r8, #1065353216	; 0x3f800000
 800e29c:	2700      	movs	r7, #0
 800e29e:	4628      	mov	r0, r5
 800e2a0:	4621      	mov	r1, r4
 800e2a2:	f7ff f93f 	bl	800d524 <_array_handle_get_as_float>
 800e2a6:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800e2aa:	444d      	add	r5, r9
 800e2ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2b0:	f000 85a5 	beq.w	800edfe <forward_cast+0x17f2>
 800e2b4:	9b00      	ldr	r3, [sp, #0]
 800e2b6:	45aa      	cmp	sl, r5
 800e2b8:	f8c6 8000 	str.w	r8, [r6]
 800e2bc:	441e      	add	r6, r3
 800e2be:	d8ee      	bhi.n	800e29e <forward_cast+0xc92>
 800e2c0:	f7ff ba0c 	b.w	800d6dc <forward_cast+0xd0>
 800e2c4:	459b      	cmp	fp, r3
 800e2c6:	f001 8562 	beq.w	800fd8e <forward_cast+0x2782>
 800e2ca:	4593      	cmp	fp, r2
 800e2cc:	f040 80b2 	bne.w	800e434 <forward_cast+0xe28>
 800e2d0:	4555      	cmp	r5, sl
 800e2d2:	f4bf aa03 	bcs.w	800d6dc <forward_cast+0xd0>
 800e2d6:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 800e4b4 <forward_cast+0xea8>
 800e2da:	4f79      	ldr	r7, [pc, #484]	; (800e4c0 <forward_cast+0xeb4>)
 800e2dc:	f8df b1dc 	ldr.w	fp, [pc, #476]	; 800e4bc <forward_cast+0xeb0>
 800e2e0:	4b78      	ldr	r3, [pc, #480]	; (800e4c4 <forward_cast+0xeb8>)
 800e2e2:	4a71      	ldr	r2, [pc, #452]	; (800e4a8 <forward_cast+0xe9c>)
 800e2e4:	e01e      	b.n	800e324 <forward_cast+0xd18>
 800e2e6:	429c      	cmp	r4, r3
 800e2e8:	f002 862d 	beq.w	8010f46 <forward_cast+0x393a>
 800e2ec:	f340 82a9 	ble.w	800e842 <forward_cast+0x1236>
 800e2f0:	4294      	cmp	r4, r2
 800e2f2:	f002 861a 	beq.w	8010f2a <forward_cast+0x391e>
 800e2f6:	4970      	ldr	r1, [pc, #448]	; (800e4b8 <forward_cast+0xeac>)
 800e2f8:	428c      	cmp	r4, r1
 800e2fa:	f040 85c7 	bne.w	800ee8c <forward_cast+0x1880>
 800e2fe:	7828      	ldrb	r0, [r5, #0]
 800e300:	3800      	subs	r0, #0
 800e302:	bf18      	it	ne
 800e304:	2001      	movne	r0, #1
 800e306:	f300 000f 	ssat	r0, #16, r0
 800e30a:	b200      	sxth	r0, r0
 800e30c:	444d      	add	r5, r9
 800e30e:	9900      	ldr	r1, [sp, #0]
 800e310:	ee07 0a90 	vmov	s15, r0
 800e314:	45aa      	cmp	sl, r5
 800e316:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e31a:	edc6 7a00 	vstr	s15, [r6]
 800e31e:	440e      	add	r6, r1
 800e320:	f67f a9dc 	bls.w	800d6dc <forward_cast+0xd0>
 800e324:	4961      	ldr	r1, [pc, #388]	; (800e4ac <forward_cast+0xea0>)
 800e326:	428c      	cmp	r4, r1
 800e328:	f002 82ed 	beq.w	8010906 <forward_cast+0x32fa>
 800e32c:	dddb      	ble.n	800e2e6 <forward_cast+0xcda>
 800e32e:	4960      	ldr	r1, [pc, #384]	; (800e4b0 <forward_cast+0xea4>)
 800e330:	428c      	cmp	r4, r1
 800e332:	f003 8014 	beq.w	801135e <forward_cast+0x3d52>
 800e336:	f340 84bd 	ble.w	800ecb4 <forward_cast+0x16a8>
 800e33a:	4544      	cmp	r4, r8
 800e33c:	f040 85a6 	bne.w	800ee8c <forward_cast+0x1880>
 800e340:	edd5 7a00 	vldr	s15, [r5]
 800e344:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e348:	ee17 0a90 	vmov	r0, s15
 800e34c:	e7db      	b.n	800e306 <forward_cast+0xcfa>
 800e34e:	4b5c      	ldr	r3, [pc, #368]	; (800e4c0 <forward_cast+0xeb4>)
 800e350:	459b      	cmp	fp, r3
 800e352:	f47f a9c3 	bne.w	800d6dc <forward_cast+0xd0>
 800e356:	4555      	cmp	r5, sl
 800e358:	f4bf a9c0 	bcs.w	800d6dc <forward_cast+0xd0>
 800e35c:	4b52      	ldr	r3, [pc, #328]	; (800e4a8 <forward_cast+0xe9c>)
 800e35e:	e01a      	b.n	800e396 <forward_cast+0xd8a>
 800e360:	4958      	ldr	r1, [pc, #352]	; (800e4c4 <forward_cast+0xeb8>)
 800e362:	428c      	cmp	r4, r1
 800e364:	f002 8168 	beq.w	8010638 <forward_cast+0x302c>
 800e368:	f340 825f 	ble.w	800e82a <forward_cast+0x121e>
 800e36c:	429c      	cmp	r4, r3
 800e36e:	f002 8155 	beq.w	801061c <forward_cast+0x3010>
 800e372:	4951      	ldr	r1, [pc, #324]	; (800e4b8 <forward_cast+0xeac>)
 800e374:	428c      	cmp	r4, r1
 800e376:	f040 8571 	bne.w	800ee5c <forward_cast+0x1850>
 800e37a:	7828      	ldrb	r0, [r5, #0]
 800e37c:	3800      	subs	r0, #0
 800e37e:	bf18      	it	ne
 800e380:	2001      	movne	r0, #1
 800e382:	f300 0007 	ssat	r0, #8, r0
 800e386:	444d      	add	r5, r9
 800e388:	b240      	sxtb	r0, r0
 800e38a:	9900      	ldr	r1, [sp, #0]
 800e38c:	45aa      	cmp	sl, r5
 800e38e:	8030      	strh	r0, [r6, #0]
 800e390:	440e      	add	r6, r1
 800e392:	f67f a9a3 	bls.w	800d6dc <forward_cast+0xd0>
 800e396:	42bc      	cmp	r4, r7
 800e398:	f002 807b 	beq.w	8010492 <forward_cast+0x2e86>
 800e39c:	dde0      	ble.n	800e360 <forward_cast+0xd54>
 800e39e:	4944      	ldr	r1, [pc, #272]	; (800e4b0 <forward_cast+0xea4>)
 800e3a0:	428c      	cmp	r4, r1
 800e3a2:	f002 81ee 	beq.w	8010782 <forward_cast+0x3176>
 800e3a6:	f340 851b 	ble.w	800ede0 <forward_cast+0x17d4>
 800e3aa:	4294      	cmp	r4, r2
 800e3ac:	f040 8556 	bne.w	800ee5c <forward_cast+0x1850>
 800e3b0:	edd5 7a00 	vldr	s15, [r5]
 800e3b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e3b8:	ee17 0a90 	vmov	r0, s15
 800e3bc:	e7e1      	b.n	800e382 <forward_cast+0xd76>
 800e3be:	4b40      	ldr	r3, [pc, #256]	; (800e4c0 <forward_cast+0xeb4>)
 800e3c0:	459b      	cmp	fp, r3
 800e3c2:	f47f a98b 	bne.w	800d6dc <forward_cast+0xd0>
 800e3c6:	4555      	cmp	r5, sl
 800e3c8:	f4bf a988 	bcs.w	800d6dc <forward_cast+0xd0>
 800e3cc:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 800e4b0 <forward_cast+0xea4>
 800e3d0:	4f38      	ldr	r7, [pc, #224]	; (800e4b4 <forward_cast+0xea8>)
 800e3d2:	4b35      	ldr	r3, [pc, #212]	; (800e4a8 <forward_cast+0xe9c>)
 800e3d4:	4a38      	ldr	r2, [pc, #224]	; (800e4b8 <forward_cast+0xeac>)
 800e3d6:	e016      	b.n	800e406 <forward_cast+0xdfa>
 800e3d8:	493a      	ldr	r1, [pc, #232]	; (800e4c4 <forward_cast+0xeb8>)
 800e3da:	428c      	cmp	r4, r1
 800e3dc:	f002 8146 	beq.w	801066c <forward_cast+0x3060>
 800e3e0:	f340 81f4 	ble.w	800e7cc <forward_cast+0x11c0>
 800e3e4:	429c      	cmp	r4, r3
 800e3e6:	f002 80f9 	beq.w	80105dc <forward_cast+0x2fd0>
 800e3ea:	4294      	cmp	r4, r2
 800e3ec:	f040 8533 	bne.w	800ee56 <forward_cast+0x184a>
 800e3f0:	7829      	ldrb	r1, [r5, #0]
 800e3f2:	3900      	subs	r1, #0
 800e3f4:	bf18      	it	ne
 800e3f6:	2101      	movne	r1, #1
 800e3f8:	444d      	add	r5, r9
 800e3fa:	8031      	strh	r1, [r6, #0]
 800e3fc:	9900      	ldr	r1, [sp, #0]
 800e3fe:	45aa      	cmp	sl, r5
 800e400:	440e      	add	r6, r1
 800e402:	f67f a96b 	bls.w	800d6dc <forward_cast+0xd0>
 800e406:	4929      	ldr	r1, [pc, #164]	; (800e4ac <forward_cast+0xea0>)
 800e408:	428c      	cmp	r4, r1
 800e40a:	f002 8046 	beq.w	801049a <forward_cast+0x2e8e>
 800e40e:	dde3      	ble.n	800e3d8 <forward_cast+0xdcc>
 800e410:	4544      	cmp	r4, r8
 800e412:	f002 83a2 	beq.w	8010b5a <forward_cast+0x354e>
 800e416:	f340 81e8 	ble.w	800e7ea <forward_cast+0x11de>
 800e41a:	42bc      	cmp	r4, r7
 800e41c:	f040 851b 	bne.w	800ee56 <forward_cast+0x184a>
 800e420:	edd5 7a00 	vldr	s15, [r5]
 800e424:	eef5 7a40 	vcmp.f32	s15, #0.0
 800e428:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e42c:	bf14      	ite	ne
 800e42e:	2101      	movne	r1, #1
 800e430:	2100      	moveq	r1, #0
 800e432:	e7e1      	b.n	800e3f8 <forward_cast+0xdec>
 800e434:	4b22      	ldr	r3, [pc, #136]	; (800e4c0 <forward_cast+0xeb4>)
 800e436:	459b      	cmp	fp, r3
 800e438:	f47f a950 	bne.w	800d6dc <forward_cast+0xd0>
 800e43c:	4555      	cmp	r5, sl
 800e43e:	f4bf a94d 	bcs.w	800d6dc <forward_cast+0xd0>
 800e442:	f8df 806c 	ldr.w	r8, [pc, #108]	; 800e4b0 <forward_cast+0xea4>
 800e446:	4f1b      	ldr	r7, [pc, #108]	; (800e4b4 <forward_cast+0xea8>)
 800e448:	4b17      	ldr	r3, [pc, #92]	; (800e4a8 <forward_cast+0xe9c>)
 800e44a:	4a1b      	ldr	r2, [pc, #108]	; (800e4b8 <forward_cast+0xeac>)
 800e44c:	e018      	b.n	800e480 <forward_cast+0xe74>
 800e44e:	491d      	ldr	r1, [pc, #116]	; (800e4c4 <forward_cast+0xeb8>)
 800e450:	428c      	cmp	r4, r1
 800e452:	f002 8526 	beq.w	8010ea2 <forward_cast+0x3896>
 800e456:	f340 8240 	ble.w	800e8da <forward_cast+0x12ce>
 800e45a:	429c      	cmp	r4, r3
 800e45c:	f002 84ea 	beq.w	8010e34 <forward_cast+0x3828>
 800e460:	4294      	cmp	r4, r2
 800e462:	f040 8521 	bne.w	800eea8 <forward_cast+0x189c>
 800e466:	7828      	ldrb	r0, [r5, #0]
 800e468:	3800      	subs	r0, #0
 800e46a:	bf18      	it	ne
 800e46c:	2001      	movne	r0, #1
 800e46e:	f300 000f 	ssat	r0, #16, r0
 800e472:	444d      	add	r5, r9
 800e474:	9900      	ldr	r1, [sp, #0]
 800e476:	8030      	strh	r0, [r6, #0]
 800e478:	45aa      	cmp	sl, r5
 800e47a:	440e      	add	r6, r1
 800e47c:	f67f a92e 	bls.w	800d6dc <forward_cast+0xd0>
 800e480:	490a      	ldr	r1, [pc, #40]	; (800e4ac <forward_cast+0xea0>)
 800e482:	428c      	cmp	r4, r1
 800e484:	f002 82f1 	beq.w	8010a6a <forward_cast+0x345e>
 800e488:	dde1      	ble.n	800e44e <forward_cast+0xe42>
 800e48a:	4544      	cmp	r4, r8
 800e48c:	f002 85e4 	beq.w	8011058 <forward_cast+0x3a4c>
 800e490:	f340 8462 	ble.w	800ed58 <forward_cast+0x174c>
 800e494:	42bc      	cmp	r4, r7
 800e496:	f040 8507 	bne.w	800eea8 <forward_cast+0x189c>
 800e49a:	edd5 7a00 	vldr	s15, [r5]
 800e49e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e4a2:	ee17 0a90 	vmov	r0, s15
 800e4a6:	e7e2      	b.n	800e46e <forward_cast+0xe62>
 800e4a8:	00042040 	.word	0x00042040
 800e4ac:	00840440 	.word	0x00840440
 800e4b0:	00842040 	.word	0x00842040
 800e4b4:	01821040 	.word	0x01821040
 800e4b8:	00060440 	.word	0x00060440
 800e4bc:	00841040 	.word	0x00841040
 800e4c0:	00840840 	.word	0x00840840
 800e4c4:	00041040 	.word	0x00041040
 800e4c8:	4bb7      	ldr	r3, [pc, #732]	; (800e7a8 <forward_cast+0x119c>)
 800e4ca:	459b      	cmp	fp, r3
 800e4cc:	f000 8543 	beq.w	800ef56 <forward_cast+0x194a>
 800e4d0:	4fb6      	ldr	r7, [pc, #728]	; (800e7ac <forward_cast+0x11a0>)
 800e4d2:	45bb      	cmp	fp, r7
 800e4d4:	d155      	bne.n	800e582 <forward_cast+0xf76>
 800e4d6:	4555      	cmp	r5, sl
 800e4d8:	f4bf a900 	bcs.w	800d6dc <forward_cast+0xd0>
 800e4dc:	f8df 82e4 	ldr.w	r8, [pc, #740]	; 800e7c4 <forward_cast+0x11b8>
 800e4e0:	4fb3      	ldr	r7, [pc, #716]	; (800e7b0 <forward_cast+0x11a4>)
 800e4e2:	4bb4      	ldr	r3, [pc, #720]	; (800e7b4 <forward_cast+0x11a8>)
 800e4e4:	4ab4      	ldr	r2, [pc, #720]	; (800e7b8 <forward_cast+0x11ac>)
 800e4e6:	e01e      	b.n	800e526 <forward_cast+0xf1a>
 800e4e8:	49b4      	ldr	r1, [pc, #720]	; (800e7bc <forward_cast+0x11b0>)
 800e4ea:	428c      	cmp	r4, r1
 800e4ec:	f002 8346 	beq.w	8010b7c <forward_cast+0x3570>
 800e4f0:	f340 8240 	ble.w	800e974 <forward_cast+0x1368>
 800e4f4:	429c      	cmp	r4, r3
 800e4f6:	f002 8377 	beq.w	8010be8 <forward_cast+0x35dc>
 800e4fa:	4294      	cmp	r4, r2
 800e4fc:	f040 84b1 	bne.w	800ee62 <forward_cast+0x1856>
 800e500:	7828      	ldrb	r0, [r5, #0]
 800e502:	3800      	subs	r0, #0
 800e504:	bf18      	it	ne
 800e506:	2001      	movne	r0, #1
 800e508:	f380 0010 	usat	r0, #16, r0
 800e50c:	b280      	uxth	r0, r0
 800e50e:	444d      	add	r5, r9
 800e510:	9900      	ldr	r1, [sp, #0]
 800e512:	ee07 0a90 	vmov	s15, r0
 800e516:	45aa      	cmp	sl, r5
 800e518:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e51c:	edc6 7a00 	vstr	s15, [r6]
 800e520:	440e      	add	r6, r1
 800e522:	f67f a8db 	bls.w	800d6dc <forward_cast+0xd0>
 800e526:	49a6      	ldr	r1, [pc, #664]	; (800e7c0 <forward_cast+0x11b4>)
 800e528:	428c      	cmp	r4, r1
 800e52a:	f002 8388 	beq.w	8010c3e <forward_cast+0x3632>
 800e52e:	dddb      	ble.n	800e4e8 <forward_cast+0xedc>
 800e530:	4544      	cmp	r4, r8
 800e532:	f001 86a6 	beq.w	8010282 <forward_cast+0x2c76>
 800e536:	f340 82fc 	ble.w	800eb32 <forward_cast+0x1526>
 800e53a:	455c      	cmp	r4, fp
 800e53c:	f040 8491 	bne.w	800ee62 <forward_cast+0x1856>
 800e540:	edd5 7a00 	vldr	s15, [r5]
 800e544:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e548:	ee17 0a90 	vmov	r0, s15
 800e54c:	e7dc      	b.n	800e508 <forward_cast+0xefc>
 800e54e:	4b98      	ldr	r3, [pc, #608]	; (800e7b0 <forward_cast+0x11a4>)
 800e550:	459b      	cmp	fp, r3
 800e552:	f47f a8c3 	bne.w	800d6dc <forward_cast+0xd0>
 800e556:	4555      	cmp	r5, sl
 800e558:	f4bf a8c0 	bcs.w	800d6dc <forward_cast+0xd0>
 800e55c:	9f00      	ldr	r7, [sp, #0]
 800e55e:	4621      	mov	r1, r4
 800e560:	4628      	mov	r0, r5
 800e562:	f7fe ffdf 	bl	800d524 <_array_handle_get_as_float>
 800e566:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800e56a:	ee17 3a90 	vmov	r3, s15
 800e56e:	f383 0308 	usat	r3, #8, r3
 800e572:	444d      	add	r5, r9
 800e574:	b2db      	uxtb	r3, r3
 800e576:	45aa      	cmp	sl, r5
 800e578:	8033      	strh	r3, [r6, #0]
 800e57a:	443e      	add	r6, r7
 800e57c:	d8ef      	bhi.n	800e55e <forward_cast+0xf52>
 800e57e:	f7ff b8ad 	b.w	800d6dc <forward_cast+0xd0>
 800e582:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 800e586:	459b      	cmp	fp, r3
 800e588:	f47f a8a8 	bne.w	800d6dc <forward_cast+0xd0>
 800e58c:	4555      	cmp	r5, sl
 800e58e:	f4bf a8a5 	bcs.w	800d6dc <forward_cast+0xd0>
 800e592:	f8df 8230 	ldr.w	r8, [pc, #560]	; 800e7c4 <forward_cast+0x11b8>
 800e596:	4b87      	ldr	r3, [pc, #540]	; (800e7b4 <forward_cast+0x11a8>)
 800e598:	4a87      	ldr	r2, [pc, #540]	; (800e7b8 <forward_cast+0x11ac>)
 800e59a:	e018      	b.n	800e5ce <forward_cast+0xfc2>
 800e59c:	4987      	ldr	r1, [pc, #540]	; (800e7bc <forward_cast+0x11b0>)
 800e59e:	428c      	cmp	r4, r1
 800e5a0:	f001 87ba 	beq.w	8010518 <forward_cast+0x2f0c>
 800e5a4:	f340 8210 	ble.w	800e9c8 <forward_cast+0x13bc>
 800e5a8:	429c      	cmp	r4, r3
 800e5aa:	f001 86a4 	beq.w	80102f6 <forward_cast+0x2cea>
 800e5ae:	4294      	cmp	r4, r2
 800e5b0:	f040 843e 	bne.w	800ee30 <forward_cast+0x1824>
 800e5b4:	7828      	ldrb	r0, [r5, #0]
 800e5b6:	3800      	subs	r0, #0
 800e5b8:	bf18      	it	ne
 800e5ba:	2001      	movne	r0, #1
 800e5bc:	f380 0010 	usat	r0, #16, r0
 800e5c0:	444d      	add	r5, r9
 800e5c2:	9900      	ldr	r1, [sp, #0]
 800e5c4:	8030      	strh	r0, [r6, #0]
 800e5c6:	45aa      	cmp	sl, r5
 800e5c8:	440e      	add	r6, r1
 800e5ca:	f67f a887 	bls.w	800d6dc <forward_cast+0xd0>
 800e5ce:	497c      	ldr	r1, [pc, #496]	; (800e7c0 <forward_cast+0x11b4>)
 800e5d0:	428c      	cmp	r4, r1
 800e5d2:	f001 87af 	beq.w	8010534 <forward_cast+0x2f28>
 800e5d6:	dde1      	ble.n	800e59c <forward_cast+0xf90>
 800e5d8:	4544      	cmp	r4, r8
 800e5da:	f002 814f 	beq.w	801087c <forward_cast+0x3270>
 800e5de:	f340 8255 	ble.w	800ea8c <forward_cast+0x1480>
 800e5e2:	42bc      	cmp	r4, r7
 800e5e4:	f040 8424 	bne.w	800ee30 <forward_cast+0x1824>
 800e5e8:	edd5 7a00 	vldr	s15, [r5]
 800e5ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e5f0:	ee17 0a90 	vmov	r0, s15
 800e5f4:	e7e2      	b.n	800e5bc <forward_cast+0xfb0>
 800e5f6:	4555      	cmp	r5, sl
 800e5f8:	f4bf a870 	bcs.w	800d6dc <forward_cast+0xd0>
 800e5fc:	2700      	movs	r7, #0
 800e5fe:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 800e7c4 <forward_cast+0x11b8>
 800e602:	e01a      	b.n	800e63a <forward_cast+0x102e>
 800e604:	429c      	cmp	r4, r3
 800e606:	f002 8356 	beq.w	8010cb6 <forward_cast+0x36aa>
 800e60a:	f340 8236 	ble.w	800ea7a <forward_cast+0x146e>
 800e60e:	4969      	ldr	r1, [pc, #420]	; (800e7b4 <forward_cast+0x11a8>)
 800e610:	428c      	cmp	r4, r1
 800e612:	f001 85a0 	beq.w	8010156 <forward_cast+0x2b4a>
 800e616:	f501 31f2 	add.w	r1, r1, #123904	; 0x1e400
 800e61a:	428c      	cmp	r4, r1
 800e61c:	f040 840d 	bne.w	800ee3a <forward_cast+0x182e>
 800e620:	7828      	ldrb	r0, [r5, #0]
 800e622:	3800      	subs	r0, #0
 800e624:	bf18      	it	ne
 800e626:	2001      	movne	r0, #1
 800e628:	f380 0010 	usat	r0, #16, r0
 800e62c:	444d      	add	r5, r9
 800e62e:	9900      	ldr	r1, [sp, #0]
 800e630:	55f0      	strb	r0, [r6, r7]
 800e632:	45aa      	cmp	sl, r5
 800e634:	440f      	add	r7, r1
 800e636:	f67f a851 	bls.w	800d6dc <forward_cast+0xd0>
 800e63a:	455c      	cmp	r4, fp
 800e63c:	f001 85ee 	beq.w	801021c <forward_cast+0x2c10>
 800e640:	dde0      	ble.n	800e604 <forward_cast+0xff8>
 800e642:	4544      	cmp	r4, r8
 800e644:	f002 86a1 	beq.w	801138a <forward_cast+0x3d7e>
 800e648:	f340 81ac 	ble.w	800e9a4 <forward_cast+0x1398>
 800e64c:	4957      	ldr	r1, [pc, #348]	; (800e7ac <forward_cast+0x11a0>)
 800e64e:	428c      	cmp	r4, r1
 800e650:	f040 83f3 	bne.w	800ee3a <forward_cast+0x182e>
 800e654:	edd5 7a00 	vldr	s15, [r5]
 800e658:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e65c:	ee17 0a90 	vmov	r0, s15
 800e660:	e7e2      	b.n	800e628 <forward_cast+0x101c>
 800e662:	4555      	cmp	r5, sl
 800e664:	f4bf a83a 	bcs.w	800d6dc <forward_cast+0xd0>
 800e668:	f04f 0800 	mov.w	r8, #0
 800e66c:	4a51      	ldr	r2, [pc, #324]	; (800e7b4 <forward_cast+0x11a8>)
 800e66e:	e018      	b.n	800e6a2 <forward_cast+0x1096>
 800e670:	4952      	ldr	r1, [pc, #328]	; (800e7bc <forward_cast+0x11b0>)
 800e672:	428c      	cmp	r4, r1
 800e674:	f001 85c2 	beq.w	80101fc <forward_cast+0x2bf0>
 800e678:	f340 82a0 	ble.w	800ebbc <forward_cast+0x15b0>
 800e67c:	4294      	cmp	r4, r2
 800e67e:	f001 867c 	beq.w	801037a <forward_cast+0x2d6e>
 800e682:	494d      	ldr	r1, [pc, #308]	; (800e7b8 <forward_cast+0x11ac>)
 800e684:	428c      	cmp	r4, r1
 800e686:	f040 83c8 	bne.w	800ee1a <forward_cast+0x180e>
 800e68a:	7829      	ldrb	r1, [r5, #0]
 800e68c:	3900      	subs	r1, #0
 800e68e:	bf18      	it	ne
 800e690:	2101      	movne	r1, #1
 800e692:	444d      	add	r5, r9
 800e694:	f806 1008 	strb.w	r1, [r6, r8]
 800e698:	9900      	ldr	r1, [sp, #0]
 800e69a:	45aa      	cmp	sl, r5
 800e69c:	4488      	add	r8, r1
 800e69e:	f67f a81d 	bls.w	800d6dc <forward_cast+0xd0>
 800e6a2:	455c      	cmp	r4, fp
 800e6a4:	f000 8293 	beq.w	800ebce <forward_cast+0x15c2>
 800e6a8:	dde2      	ble.n	800e670 <forward_cast+0x1064>
 800e6aa:	4946      	ldr	r1, [pc, #280]	; (800e7c4 <forward_cast+0x11b8>)
 800e6ac:	428c      	cmp	r4, r1
 800e6ae:	f002 867d 	beq.w	80113ac <forward_cast+0x3da0>
 800e6b2:	f340 8362 	ble.w	800ed7a <forward_cast+0x176e>
 800e6b6:	42bc      	cmp	r4, r7
 800e6b8:	f040 83af 	bne.w	800ee1a <forward_cast+0x180e>
 800e6bc:	edd5 7a00 	vldr	s15, [r5]
 800e6c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e6c4:	edcd 7a01 	vstr	s15, [sp, #4]
 800e6c8:	f99d 1004 	ldrsb.w	r1, [sp, #4]
 800e6cc:	e7e1      	b.n	800e692 <forward_cast+0x1086>
 800e6ce:	4555      	cmp	r5, sl
 800e6d0:	f4bf a804 	bcs.w	800d6dc <forward_cast+0xd0>
 800e6d4:	f04f 0800 	mov.w	r8, #0
 800e6d8:	e01c      	b.n	800e714 <forward_cast+0x1108>
 800e6da:	4938      	ldr	r1, [pc, #224]	; (800e7bc <forward_cast+0x11b0>)
 800e6dc:	428c      	cmp	r4, r1
 800e6de:	f001 8626 	beq.w	801032e <forward_cast+0x2d22>
 800e6e2:	f340 8153 	ble.w	800e98c <forward_cast+0x1380>
 800e6e6:	4933      	ldr	r1, [pc, #204]	; (800e7b4 <forward_cast+0x11a8>)
 800e6e8:	428c      	cmp	r4, r1
 800e6ea:	f001 8612 	beq.w	8010312 <forward_cast+0x2d06>
 800e6ee:	f501 31f2 	add.w	r1, r1, #123904	; 0x1e400
 800e6f2:	428c      	cmp	r4, r1
 800e6f4:	f040 839f 	bne.w	800ee36 <forward_cast+0x182a>
 800e6f8:	7828      	ldrb	r0, [r5, #0]
 800e6fa:	3800      	subs	r0, #0
 800e6fc:	bf18      	it	ne
 800e6fe:	2001      	movne	r0, #1
 800e700:	f300 000f 	ssat	r0, #16, r0
 800e704:	444d      	add	r5, r9
 800e706:	9900      	ldr	r1, [sp, #0]
 800e708:	f806 0008 	strb.w	r0, [r6, r8]
 800e70c:	45aa      	cmp	sl, r5
 800e70e:	4488      	add	r8, r1
 800e710:	f67e afe4 	bls.w	800d6dc <forward_cast+0xd0>
 800e714:	455c      	cmp	r4, fp
 800e716:	f001 857d 	beq.w	8010214 <forward_cast+0x2c08>
 800e71a:	ddde      	ble.n	800e6da <forward_cast+0x10ce>
 800e71c:	4929      	ldr	r1, [pc, #164]	; (800e7c4 <forward_cast+0x11b8>)
 800e71e:	428c      	cmp	r4, r1
 800e720:	f002 82bb 	beq.w	8010c9a <forward_cast+0x368e>
 800e724:	f340 8256 	ble.w	800ebd4 <forward_cast+0x15c8>
 800e728:	4294      	cmp	r4, r2
 800e72a:	f040 8384 	bne.w	800ee36 <forward_cast+0x182a>
 800e72e:	edd5 7a00 	vldr	s15, [r5]
 800e732:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e736:	ee17 0a90 	vmov	r0, s15
 800e73a:	e7e1      	b.n	800e700 <forward_cast+0x10f4>
 800e73c:	4555      	cmp	r5, sl
 800e73e:	f4be afcd 	bcs.w	800d6dc <forward_cast+0xd0>
 800e742:	9f00      	ldr	r7, [sp, #0]
 800e744:	4628      	mov	r0, r5
 800e746:	4621      	mov	r1, r4
 800e748:	f7fe feec 	bl	800d524 <_array_handle_get_as_float>
 800e74c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800e750:	444d      	add	r5, r9
 800e752:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e756:	bf14      	ite	ne
 800e758:	2301      	movne	r3, #1
 800e75a:	2300      	moveq	r3, #0
 800e75c:	45aa      	cmp	sl, r5
 800e75e:	7033      	strb	r3, [r6, #0]
 800e760:	443e      	add	r6, r7
 800e762:	d8ef      	bhi.n	800e744 <forward_cast+0x1138>
 800e764:	f7fe bfba 	b.w	800d6dc <forward_cast+0xd0>
 800e768:	4917      	ldr	r1, [pc, #92]	; (800e7c8 <forward_cast+0x11bc>)
 800e76a:	428c      	cmp	r4, r1
 800e76c:	f001 8777 	beq.w	801065e <forward_cast+0x3052>
 800e770:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800e774:	428c      	cmp	r4, r1
 800e776:	f040 8363 	bne.w	800ee40 <forward_cast+0x1834>
 800e77a:	8829      	ldrh	r1, [r5, #0]
 800e77c:	ee07 1a90 	vmov	s15, r1
 800e780:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e784:	f7ff bbc8 	b.w	800df18 <forward_cast+0x90c>
 800e788:	490f      	ldr	r1, [pc, #60]	; (800e7c8 <forward_cast+0x11bc>)
 800e78a:	428c      	cmp	r4, r1
 800e78c:	f001 877b 	beq.w	8010686 <forward_cast+0x307a>
 800e790:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800e794:	428c      	cmp	r4, r1
 800e796:	f040 8357 	bne.w	800ee48 <forward_cast+0x183c>
 800e79a:	8829      	ldrh	r1, [r5, #0]
 800e79c:	ee07 1a90 	vmov	s15, r1
 800e7a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e7a4:	f7ff baed 	b.w	800dd82 <forward_cast+0x776>
 800e7a8:	00841040 	.word	0x00841040
 800e7ac:	01821040 	.word	0x01821040
 800e7b0:	00840840 	.word	0x00840840
 800e7b4:	00042040 	.word	0x00042040
 800e7b8:	00060440 	.word	0x00060440
 800e7bc:	00041040 	.word	0x00041040
 800e7c0:	00840440 	.word	0x00840440
 800e7c4:	00842040 	.word	0x00842040
 800e7c8:	00040440 	.word	0x00040440
 800e7cc:	f5a1 6140 	sub.w	r1, r1, #3072	; 0xc00
 800e7d0:	428c      	cmp	r4, r1
 800e7d2:	f43f ae0d 	beq.w	800e3f0 <forward_cast+0xde4>
 800e7d6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800e7da:	428c      	cmp	r4, r1
 800e7dc:	f040 833b 	bne.w	800ee56 <forward_cast+0x184a>
 800e7e0:	8829      	ldrh	r1, [r5, #0]
 800e7e2:	3900      	subs	r1, #0
 800e7e4:	bf18      	it	ne
 800e7e6:	2101      	movne	r1, #1
 800e7e8:	e606      	b.n	800e3f8 <forward_cast+0xdec>
 800e7ea:	455c      	cmp	r4, fp
 800e7ec:	f001 86ef 	beq.w	80105ce <forward_cast+0x2fc2>
 800e7f0:	49c3      	ldr	r1, [pc, #780]	; (800eb00 <forward_cast+0x14f4>)
 800e7f2:	428c      	cmp	r4, r1
 800e7f4:	f040 832f 	bne.w	800ee56 <forward_cast+0x184a>
 800e7f8:	edd5 7a00 	vldr	s15, [r5]
 800e7fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e800:	eef5 7a40 	vcmp.f32	s15, #0.0
 800e804:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e808:	bf14      	ite	ne
 800e80a:	2101      	movne	r1, #1
 800e80c:	2100      	moveq	r1, #0
 800e80e:	e5f3      	b.n	800e3f8 <forward_cast+0xdec>
 800e810:	f5a1 6140 	sub.w	r1, r1, #3072	; 0xc00
 800e814:	428c      	cmp	r4, r1
 800e816:	f001 8719 	beq.w	801064c <forward_cast+0x3040>
 800e81a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800e81e:	428c      	cmp	r4, r1
 800e820:	f040 8316 	bne.w	800ee50 <forward_cast+0x1844>
 800e824:	8828      	ldrh	r0, [r5, #0]
 800e826:	f7ff ba13 	b.w	800dc50 <forward_cast+0x644>
 800e82a:	f5a1 6140 	sub.w	r1, r1, #3072	; 0xc00
 800e82e:	428c      	cmp	r4, r1
 800e830:	f002 8393 	beq.w	8010f5a <forward_cast+0x394e>
 800e834:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800e838:	428c      	cmp	r4, r1
 800e83a:	f040 830f 	bne.w	800ee5c <forward_cast+0x1850>
 800e83e:	8828      	ldrh	r0, [r5, #0]
 800e840:	e59f      	b.n	800e382 <forward_cast+0xd76>
 800e842:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800e846:	428c      	cmp	r4, r1
 800e848:	f002 813a 	beq.w	8010ac0 <forward_cast+0x34b4>
 800e84c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800e850:	428c      	cmp	r4, r1
 800e852:	f040 831b 	bne.w	800ee8c <forward_cast+0x1880>
 800e856:	8828      	ldrh	r0, [r5, #0]
 800e858:	e555      	b.n	800e306 <forward_cast+0xcfa>
 800e85a:	42bc      	cmp	r4, r7
 800e85c:	f002 82e7 	beq.w	8010e2e <forward_cast+0x3822>
 800e860:	49a8      	ldr	r1, [pc, #672]	; (800eb04 <forward_cast+0x14f8>)
 800e862:	428c      	cmp	r4, r1
 800e864:	f040 8306 	bne.w	800ee74 <forward_cast+0x1868>
 800e868:	8828      	ldrh	r0, [r5, #0]
 800e86a:	f7ff b875 	b.w	800d958 <forward_cast+0x34c>
 800e86e:	f5a1 6140 	sub.w	r1, r1, #3072	; 0xc00
 800e872:	428c      	cmp	r4, r1
 800e874:	f002 8197 	beq.w	8010ba6 <forward_cast+0x359a>
 800e878:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800e87c:	428c      	cmp	r4, r1
 800e87e:	f040 830b 	bne.w	800ee98 <forward_cast+0x188c>
 800e882:	8829      	ldrh	r1, [r5, #0]
 800e884:	ee07 1a90 	vmov	s15, r1
 800e888:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e88c:	f7ff bb84 	b.w	800df98 <forward_cast+0x98c>
 800e890:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800e894:	428c      	cmp	r4, r1
 800e896:	f002 837a 	beq.w	8010f8e <forward_cast+0x3982>
 800e89a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800e89e:	428c      	cmp	r4, r1
 800e8a0:	f040 82e5 	bne.w	800ee6e <forward_cast+0x1862>
 800e8a4:	f9b5 1000 	ldrsh.w	r1, [r5]
 800e8a8:	f7ff bbec 	b.w	800e084 <forward_cast+0xa78>
 800e8ac:	4544      	cmp	r4, r8
 800e8ae:	f002 8361 	beq.w	8010f74 <forward_cast+0x3968>
 800e8b2:	4994      	ldr	r1, [pc, #592]	; (800eb04 <forward_cast+0x14f8>)
 800e8b4:	428c      	cmp	r4, r1
 800e8b6:	f040 82e6 	bne.w	800ee86 <forward_cast+0x187a>
 800e8ba:	8828      	ldrh	r0, [r5, #0]
 800e8bc:	f7fe bf47 	b.w	800d74e <forward_cast+0x142>
 800e8c0:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800e8c4:	428c      	cmp	r4, r1
 800e8c6:	f002 82f6 	beq.w	8010eb6 <forward_cast+0x38aa>
 800e8ca:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800e8ce:	428c      	cmp	r4, r1
 800e8d0:	f040 82d3 	bne.w	800ee7a <forward_cast+0x186e>
 800e8d4:	8828      	ldrh	r0, [r5, #0]
 800e8d6:	f7ff b9fb 	b.w	800dcd0 <forward_cast+0x6c4>
 800e8da:	f5a1 6140 	sub.w	r1, r1, #3072	; 0xc00
 800e8de:	428c      	cmp	r4, r1
 800e8e0:	f002 81aa 	beq.w	8010c38 <forward_cast+0x362c>
 800e8e4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800e8e8:	428c      	cmp	r4, r1
 800e8ea:	f040 82dd 	bne.w	800eea8 <forward_cast+0x189c>
 800e8ee:	8828      	ldrh	r0, [r5, #0]
 800e8f0:	e5bd      	b.n	800e46e <forward_cast+0xe62>
 800e8f2:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800e8f6:	428c      	cmp	r4, r1
 800e8f8:	f002 82d0 	beq.w	8010e9c <forward_cast+0x3890>
 800e8fc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800e900:	428c      	cmp	r4, r1
 800e902:	f040 82b1 	bne.w	800ee68 <forward_cast+0x185c>
 800e906:	f9b5 1000 	ldrsh.w	r1, [r5]
 800e90a:	f7ff bb7f 	b.w	800e00c <forward_cast+0xa00>
 800e90e:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800e912:	428c      	cmp	r4, r1
 800e914:	f002 82f8 	beq.w	8010f08 <forward_cast+0x38fc>
 800e918:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800e91c:	428c      	cmp	r4, r1
 800e91e:	f040 82b8 	bne.w	800ee92 <forward_cast+0x1886>
 800e922:	8829      	ldrh	r1, [r5, #0]
 800e924:	f7ff b870 	b.w	800da08 <forward_cast+0x3fc>
 800e928:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800e92c:	428c      	cmp	r4, r1
 800e92e:	f002 82a7 	beq.w	8010e80 <forward_cast+0x3874>
 800e932:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800e936:	428c      	cmp	r4, r1
 800e938:	f040 82a2 	bne.w	800ee80 <forward_cast+0x1874>
 800e93c:	8828      	ldrh	r0, [r5, #0]
 800e93e:	e465      	b.n	800e20c <forward_cast+0xc00>
 800e940:	4294      	cmp	r4, r2
 800e942:	f002 814e 	beq.w	8010be2 <forward_cast+0x35d6>
 800e946:	496f      	ldr	r1, [pc, #444]	; (800eb04 <forward_cast+0x14f8>)
 800e948:	428c      	cmp	r4, r1
 800e94a:	f040 82b0 	bne.w	800eeae <forward_cast+0x18a2>
 800e94e:	8828      	ldrh	r0, [r5, #0]
 800e950:	f7ff b8a4 	b.w	800da9c <forward_cast+0x490>
 800e954:	42bc      	cmp	r4, r7
 800e956:	d0a5      	beq.n	800e8a4 <forward_cast+0x1298>
 800e958:	455c      	cmp	r4, fp
 800e95a:	f040 8288 	bne.w	800ee6e <forward_cast+0x1862>
 800e95e:	edd5 7a00 	vldr	s15, [r5]
 800e962:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e966:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e96a:	ee17 1a90 	vmov	r1, s15
 800e96e:	b209      	sxth	r1, r1
 800e970:	f7ff bb88 	b.w	800e084 <forward_cast+0xa78>
 800e974:	f5a1 6140 	sub.w	r1, r1, #3072	; 0xc00
 800e978:	428c      	cmp	r4, r1
 800e97a:	f001 84e2 	beq.w	8010342 <forward_cast+0x2d36>
 800e97e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800e982:	428c      	cmp	r4, r1
 800e984:	f040 826d 	bne.w	800ee62 <forward_cast+0x1856>
 800e988:	8828      	ldrh	r0, [r5, #0]
 800e98a:	e5bd      	b.n	800e508 <forward_cast+0xefc>
 800e98c:	f5a1 6140 	sub.w	r1, r1, #3072	; 0xc00
 800e990:	428c      	cmp	r4, r1
 800e992:	f002 8508 	beq.w	80113a6 <forward_cast+0x3d9a>
 800e996:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800e99a:	428c      	cmp	r4, r1
 800e99c:	f040 824b 	bne.w	800ee36 <forward_cast+0x182a>
 800e9a0:	8828      	ldrh	r0, [r5, #0]
 800e9a2:	e6ad      	b.n	800e700 <forward_cast+0x10f4>
 800e9a4:	4958      	ldr	r1, [pc, #352]	; (800eb08 <forward_cast+0x14fc>)
 800e9a6:	428c      	cmp	r4, r1
 800e9a8:	f001 85c0 	beq.w	801052c <forward_cast+0x2f20>
 800e9ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e9b0:	428c      	cmp	r4, r1
 800e9b2:	f040 8242 	bne.w	800ee3a <forward_cast+0x182e>
 800e9b6:	edd5 7a00 	vldr	s15, [r5]
 800e9ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e9be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e9c2:	ee17 0a90 	vmov	r0, s15
 800e9c6:	e62f      	b.n	800e628 <forward_cast+0x101c>
 800e9c8:	f5a1 6140 	sub.w	r1, r1, #3072	; 0xc00
 800e9cc:	428c      	cmp	r4, r1
 800e9ce:	f002 843a 	beq.w	8011246 <forward_cast+0x3c3a>
 800e9d2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800e9d6:	428c      	cmp	r4, r1
 800e9d8:	f040 822a 	bne.w	800ee30 <forward_cast+0x1824>
 800e9dc:	8828      	ldrh	r0, [r5, #0]
 800e9de:	e5ed      	b.n	800e5bc <forward_cast+0xfb0>
 800e9e0:	455c      	cmp	r4, fp
 800e9e2:	f001 84f2 	beq.w	80103ca <forward_cast+0x2dbe>
 800e9e6:	429c      	cmp	r4, r3
 800e9e8:	f040 8219 	bne.w	800ee1e <forward_cast+0x1812>
 800e9ec:	edd5 7a00 	vldr	s15, [r5]
 800e9f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e9f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e9f8:	ee17 0a90 	vmov	r0, s15
 800e9fc:	f7fe bf49 	b.w	800d892 <forward_cast+0x286>
 800ea00:	42bc      	cmp	r4, r7
 800ea02:	f001 867c 	beq.w	80106fe <forward_cast+0x30f2>
 800ea06:	493f      	ldr	r1, [pc, #252]	; (800eb04 <forward_cast+0x14f8>)
 800ea08:	428c      	cmp	r4, r1
 800ea0a:	f040 8208 	bne.w	800ee1e <forward_cast+0x1812>
 800ea0e:	8828      	ldrh	r0, [r5, #0]
 800ea10:	f7fe bf3f 	b.w	800d892 <forward_cast+0x286>
 800ea14:	42bc      	cmp	r4, r7
 800ea16:	d06f      	beq.n	800eaf8 <forward_cast+0x14ec>
 800ea18:	455c      	cmp	r4, fp
 800ea1a:	f040 824e 	bne.w	800eeba <forward_cast+0x18ae>
 800ea1e:	edd5 7a00 	vldr	s15, [r5]
 800ea22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ea26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ea2a:	ee17 1a90 	vmov	r1, s15
 800ea2e:	b289      	uxth	r1, r1
 800ea30:	f7fe bede 	b.w	800d7f0 <forward_cast+0x1e4>
 800ea34:	f5a1 51c0 	sub.w	r1, r1, #6144	; 0x1800
 800ea38:	428c      	cmp	r4, r1
 800ea3a:	f002 8053 	beq.w	8010ae4 <forward_cast+0x34d8>
 800ea3e:	4294      	cmp	r4, r2
 800ea40:	f040 81f3 	bne.w	800ee2a <forward_cast+0x181e>
 800ea44:	edd5 7a00 	vldr	s15, [r5]
 800ea48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ea4c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ea50:	ee17 0a90 	vmov	r0, s15
 800ea54:	f7ff b8aa 	b.w	800dbac <forward_cast+0x5a0>
 800ea58:	42bc      	cmp	r4, r7
 800ea5a:	f000 80d4 	beq.w	800ec06 <forward_cast+0x15fa>
 800ea5e:	455c      	cmp	r4, fp
 800ea60:	f040 8228 	bne.w	800eeb4 <forward_cast+0x18a8>
 800ea64:	edd5 7a00 	vldr	s15, [r5]
 800ea68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ea6c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ea70:	ee17 1a90 	vmov	r1, s15
 800ea74:	b209      	sxth	r1, r1
 800ea76:	f7ff bb41 	b.w	800e0fc <forward_cast+0xaf0>
 800ea7a:	4294      	cmp	r4, r2
 800ea7c:	f001 870c 	beq.w	8010898 <forward_cast+0x328c>
 800ea80:	4920      	ldr	r1, [pc, #128]	; (800eb04 <forward_cast+0x14f8>)
 800ea82:	428c      	cmp	r4, r1
 800ea84:	f040 81d9 	bne.w	800ee3a <forward_cast+0x182e>
 800ea88:	8828      	ldrh	r0, [r5, #0]
 800ea8a:	e5cd      	b.n	800e628 <forward_cast+0x101c>
 800ea8c:	455c      	cmp	r4, fp
 800ea8e:	f001 842e 	beq.w	80102ee <forward_cast+0x2ce2>
 800ea92:	491b      	ldr	r1, [pc, #108]	; (800eb00 <forward_cast+0x14f4>)
 800ea94:	428c      	cmp	r4, r1
 800ea96:	f040 81cb 	bne.w	800ee30 <forward_cast+0x1824>
 800ea9a:	edd5 7a00 	vldr	s15, [r5]
 800ea9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800eaa2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800eaa6:	ee17 0a90 	vmov	r0, s15
 800eaaa:	e587      	b.n	800e5bc <forward_cast+0xfb0>
 800eaac:	4917      	ldr	r1, [pc, #92]	; (800eb0c <forward_cast+0x1500>)
 800eaae:	428c      	cmp	r4, r1
 800eab0:	f002 82fd 	beq.w	80110ae <forward_cast+0x3aa2>
 800eab4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800eab8:	428c      	cmp	r4, r1
 800eaba:	f040 81b6 	bne.w	800ee2a <forward_cast+0x181e>
 800eabe:	8828      	ldrh	r0, [r5, #0]
 800eac0:	f7ff b874 	b.w	800dbac <forward_cast+0x5a0>
 800eac4:	42bc      	cmp	r4, r7
 800eac6:	d076      	beq.n	800ebb6 <forward_cast+0x15aa>
 800eac8:	455c      	cmp	r4, fp
 800eaca:	f040 81ab 	bne.w	800ee24 <forward_cast+0x1818>
 800eace:	edd5 7a00 	vldr	s15, [r5]
 800ead2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ead6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800eada:	ee17 1a90 	vmov	r1, s15
 800eade:	b289      	uxth	r1, r1
 800eae0:	f7ff b828 	b.w	800db34 <forward_cast+0x528>
 800eae4:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800eae8:	428c      	cmp	r4, r1
 800eaea:	f001 861d 	beq.w	8010728 <forward_cast+0x311c>
 800eaee:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800eaf2:	428c      	cmp	r4, r1
 800eaf4:	f040 81e1 	bne.w	800eeba <forward_cast+0x18ae>
 800eaf8:	8829      	ldrh	r1, [r5, #0]
 800eafa:	f7fe be79 	b.w	800d7f0 <forward_cast+0x1e4>
 800eafe:	bf00      	nop
 800eb00:	00841040 	.word	0x00841040
 800eb04:	00040840 	.word	0x00040840
 800eb08:	00840840 	.word	0x00840840
 800eb0c:	00040440 	.word	0x00040440
 800eb10:	455c      	cmp	r4, fp
 800eb12:	d043      	beq.n	800eb9c <forward_cast+0x1590>
 800eb14:	429c      	cmp	r4, r3
 800eb16:	f040 817a 	bne.w	800ee0e <forward_cast+0x1802>
 800eb1a:	edd5 7a00 	vldr	s15, [r5]
 800eb1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800eb22:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800eb26:	edcd 7a01 	vstr	s15, [sp, #4]
 800eb2a:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800eb2e:	f7ff b99f 	b.w	800de70 <forward_cast+0x864>
 800eb32:	42bc      	cmp	r4, r7
 800eb34:	f001 8621 	beq.w	801077a <forward_cast+0x316e>
 800eb38:	49d9      	ldr	r1, [pc, #868]	; (800eea0 <forward_cast+0x1894>)
 800eb3a:	428c      	cmp	r4, r1
 800eb3c:	f040 8191 	bne.w	800ee62 <forward_cast+0x1856>
 800eb40:	edd5 7a00 	vldr	s15, [r5]
 800eb44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800eb48:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800eb4c:	ee17 0a90 	vmov	r0, s15
 800eb50:	e4da      	b.n	800e508 <forward_cast+0xefc>
 800eb52:	455c      	cmp	r4, fp
 800eb54:	f001 8469 	beq.w	801042a <forward_cast+0x2e1e>
 800eb58:	429c      	cmp	r4, r3
 800eb5a:	f040 818b 	bne.w	800ee74 <forward_cast+0x1868>
 800eb5e:	edd5 7a00 	vldr	s15, [r5]
 800eb62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800eb66:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800eb6a:	ee17 0a90 	vmov	r0, s15
 800eb6e:	f7fe bef3 	b.w	800d958 <forward_cast+0x34c>
 800eb72:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800eb76:	428c      	cmp	r4, r1
 800eb78:	d004      	beq.n	800eb84 <forward_cast+0x1578>
 800eb7a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800eb7e:	428c      	cmp	r4, r1
 800eb80:	f040 8148 	bne.w	800ee14 <forward_cast+0x1808>
 800eb84:	7829      	ldrb	r1, [r5, #0]
 800eb86:	f7ff b934 	b.w	800ddf2 <forward_cast+0x7e6>
 800eb8a:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800eb8e:	428c      	cmp	r4, r1
 800eb90:	d004      	beq.n	800eb9c <forward_cast+0x1590>
 800eb92:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800eb96:	428c      	cmp	r4, r1
 800eb98:	f040 8139 	bne.w	800ee0e <forward_cast+0x1802>
 800eb9c:	7829      	ldrb	r1, [r5, #0]
 800eb9e:	f7ff b967 	b.w	800de70 <forward_cast+0x864>
 800eba2:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800eba6:	428c      	cmp	r4, r1
 800eba8:	f001 833c 	beq.w	8010224 <forward_cast+0x2c18>
 800ebac:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800ebb0:	428c      	cmp	r4, r1
 800ebb2:	f040 8137 	bne.w	800ee24 <forward_cast+0x1818>
 800ebb6:	8829      	ldrh	r1, [r5, #0]
 800ebb8:	f7fe bfbc 	b.w	800db34 <forward_cast+0x528>
 800ebbc:	f5a1 6140 	sub.w	r1, r1, #3072	; 0xc00
 800ebc0:	428c      	cmp	r4, r1
 800ebc2:	d004      	beq.n	800ebce <forward_cast+0x15c2>
 800ebc4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800ebc8:	428c      	cmp	r4, r1
 800ebca:	f040 8126 	bne.w	800ee1a <forward_cast+0x180e>
 800ebce:	f995 1000 	ldrsb.w	r1, [r5]
 800ebd2:	e55e      	b.n	800e692 <forward_cast+0x1086>
 800ebd4:	42bc      	cmp	r4, r7
 800ebd6:	f002 80ff 	beq.w	8010dd8 <forward_cast+0x37cc>
 800ebda:	429c      	cmp	r4, r3
 800ebdc:	f040 812b 	bne.w	800ee36 <forward_cast+0x182a>
 800ebe0:	edd5 7a00 	vldr	s15, [r5]
 800ebe4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ebe8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ebec:	ee17 0a90 	vmov	r0, s15
 800ebf0:	e586      	b.n	800e700 <forward_cast+0x10f4>
 800ebf2:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800ebf6:	428c      	cmp	r4, r1
 800ebf8:	f001 865f 	beq.w	80108ba <forward_cast+0x32ae>
 800ebfc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800ec00:	428c      	cmp	r4, r1
 800ec02:	f040 8157 	bne.w	800eeb4 <forward_cast+0x18a8>
 800ec06:	f9b5 1000 	ldrsh.w	r1, [r5]
 800ec0a:	f7ff ba77 	b.w	800e0fc <forward_cast+0xaf0>
 800ec0e:	455c      	cmp	r4, fp
 800ec10:	d0b8      	beq.n	800eb84 <forward_cast+0x1578>
 800ec12:	429c      	cmp	r4, r3
 800ec14:	f040 80fe 	bne.w	800ee14 <forward_cast+0x1808>
 800ec18:	edd5 7a00 	vldr	s15, [r5]
 800ec1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ec20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ec24:	edcd 7a01 	vstr	s15, [sp, #4]
 800ec28:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800ec2c:	f7ff b8e1 	b.w	800ddf2 <forward_cast+0x7e6>
 800ec30:	499c      	ldr	r1, [pc, #624]	; (800eea4 <forward_cast+0x1898>)
 800ec32:	428c      	cmp	r4, r1
 800ec34:	f001 840b 	beq.w	801044e <forward_cast+0x2e42>
 800ec38:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ec3c:	428c      	cmp	r4, r1
 800ec3e:	f040 8103 	bne.w	800ee48 <forward_cast+0x183c>
 800ec42:	edd5 7a00 	vldr	s15, [r5]
 800ec46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ec4a:	f7ff b89a 	b.w	800dd82 <forward_cast+0x776>
 800ec4e:	4995      	ldr	r1, [pc, #596]	; (800eea4 <forward_cast+0x1898>)
 800ec50:	428c      	cmp	r4, r1
 800ec52:	f001 8412 	beq.w	801047a <forward_cast+0x2e6e>
 800ec56:	429c      	cmp	r4, r3
 800ec58:	f040 810f 	bne.w	800ee7a <forward_cast+0x186e>
 800ec5c:	edd5 7a00 	vldr	s15, [r5]
 800ec60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ec64:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ec68:	ee17 0a90 	vmov	r0, s15
 800ec6c:	f7ff b830 	b.w	800dcd0 <forward_cast+0x6c4>
 800ec70:	f5a1 51c0 	sub.w	r1, r1, #6144	; 0x1800
 800ec74:	428c      	cmp	r4, r1
 800ec76:	f001 875a 	beq.w	8010b2e <forward_cast+0x3522>
 800ec7a:	4544      	cmp	r4, r8
 800ec7c:	f040 80e8 	bne.w	800ee50 <forward_cast+0x1844>
 800ec80:	edd5 7a00 	vldr	s15, [r5]
 800ec84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ec88:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ec8c:	ee17 0a90 	vmov	r0, s15
 800ec90:	f7fe bfde 	b.w	800dc50 <forward_cast+0x644>
 800ec94:	429c      	cmp	r4, r3
 800ec96:	f002 8370 	beq.w	801137a <forward_cast+0x3d6e>
 800ec9a:	42bc      	cmp	r4, r7
 800ec9c:	f040 80fc 	bne.w	800ee98 <forward_cast+0x188c>
 800eca0:	edd5 7a00 	vldr	s15, [r5]
 800eca4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800eca8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ecac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ecb0:	f7ff b972 	b.w	800df98 <forward_cast+0x98c>
 800ecb4:	42bc      	cmp	r4, r7
 800ecb6:	f002 8309 	beq.w	80112cc <forward_cast+0x3cc0>
 800ecba:	455c      	cmp	r4, fp
 800ecbc:	f040 80e6 	bne.w	800ee8c <forward_cast+0x1880>
 800ecc0:	edd5 7a00 	vldr	s15, [r5]
 800ecc4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ecc8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800eccc:	ee17 0a90 	vmov	r0, s15
 800ecd0:	f7ff bb19 	b.w	800e306 <forward_cast+0xcfa>
 800ecd4:	42bc      	cmp	r4, r7
 800ecd6:	f43f ae24 	beq.w	800e922 <forward_cast+0x1316>
 800ecda:	455c      	cmp	r4, fp
 800ecdc:	f040 80d9 	bne.w	800ee92 <forward_cast+0x1886>
 800ece0:	edd5 7a00 	vldr	s15, [r5]
 800ece4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ece8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ecec:	ee17 1a90 	vmov	r1, s15
 800ecf0:	b289      	uxth	r1, r1
 800ecf2:	f7fe be89 	b.w	800da08 <forward_cast+0x3fc>
 800ecf6:	429c      	cmp	r4, r3
 800ecf8:	f001 8512 	beq.w	8010720 <forward_cast+0x3114>
 800ecfc:	4294      	cmp	r4, r2
 800ecfe:	f040 80c2 	bne.w	800ee86 <forward_cast+0x187a>
 800ed02:	edd5 7a00 	vldr	s15, [r5]
 800ed06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ed0a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ed0e:	ee17 0a90 	vmov	r0, s15
 800ed12:	f7fe bd1c 	b.w	800d74e <forward_cast+0x142>
 800ed16:	429c      	cmp	r4, r3
 800ed18:	f001 86f7 	beq.w	8010b0a <forward_cast+0x34fe>
 800ed1c:	4294      	cmp	r4, r2
 800ed1e:	f040 80af 	bne.w	800ee80 <forward_cast+0x1874>
 800ed22:	edd5 7a00 	vldr	s15, [r5]
 800ed26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ed2a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ed2e:	ee17 0a90 	vmov	r0, s15
 800ed32:	f7ff ba6b 	b.w	800e20c <forward_cast+0xc00>
 800ed36:	42bc      	cmp	r4, r7
 800ed38:	f43f ade5 	beq.w	800e906 <forward_cast+0x12fa>
 800ed3c:	455c      	cmp	r4, fp
 800ed3e:	f040 8093 	bne.w	800ee68 <forward_cast+0x185c>
 800ed42:	edd5 7a00 	vldr	s15, [r5]
 800ed46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ed4a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ed4e:	ee17 1a90 	vmov	r1, s15
 800ed52:	b209      	sxth	r1, r1
 800ed54:	f7ff b95a 	b.w	800e00c <forward_cast+0xa00>
 800ed58:	455c      	cmp	r4, fp
 800ed5a:	f002 8337 	beq.w	80113cc <forward_cast+0x3dc0>
 800ed5e:	4950      	ldr	r1, [pc, #320]	; (800eea0 <forward_cast+0x1894>)
 800ed60:	428c      	cmp	r4, r1
 800ed62:	f040 80a1 	bne.w	800eea8 <forward_cast+0x189c>
 800ed66:	edd5 7a00 	vldr	s15, [r5]
 800ed6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ed6e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ed72:	ee17 0a90 	vmov	r0, s15
 800ed76:	f7ff bb7a 	b.w	800e46e <forward_cast+0xe62>
 800ed7a:	f5a1 51c0 	sub.w	r1, r1, #6144	; 0x1800
 800ed7e:	428c      	cmp	r4, r1
 800ed80:	f43f af25 	beq.w	800ebce <forward_cast+0x15c2>
 800ed84:	429c      	cmp	r4, r3
 800ed86:	d148      	bne.n	800ee1a <forward_cast+0x180e>
 800ed88:	edd5 7a00 	vldr	s15, [r5]
 800ed8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ed90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ed94:	edcd 7a01 	vstr	s15, [sp, #4]
 800ed98:	f99d 1004 	ldrsb.w	r1, [sp, #4]
 800ed9c:	e479      	b.n	800e692 <forward_cast+0x1086>
 800ed9e:	429c      	cmp	r4, r3
 800eda0:	f001 86d7 	beq.w	8010b52 <forward_cast+0x3546>
 800eda4:	f5a1 5180 	sub.w	r1, r1, #4096	; 0x1000
 800eda8:	428c      	cmp	r4, r1
 800edaa:	f040 8080 	bne.w	800eeae <forward_cast+0x18a2>
 800edae:	edd5 7a00 	vldr	s15, [r5]
 800edb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800edb6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800edba:	ee17 0a90 	vmov	r0, s15
 800edbe:	f7fe be6d 	b.w	800da9c <forward_cast+0x490>
 800edc2:	429c      	cmp	r4, r3
 800edc4:	f001 84eb 	beq.w	801079e <forward_cast+0x3192>
 800edc8:	4294      	cmp	r4, r2
 800edca:	d139      	bne.n	800ee40 <forward_cast+0x1834>
 800edcc:	edd5 7a00 	vldr	s15, [r5]
 800edd0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800edd4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800edd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800eddc:	f7ff b89c 	b.w	800df18 <forward_cast+0x90c>
 800ede0:	455c      	cmp	r4, fp
 800ede2:	f001 8461 	beq.w	80106a8 <forward_cast+0x309c>
 800ede6:	4544      	cmp	r4, r8
 800ede8:	d138      	bne.n	800ee5c <forward_cast+0x1850>
 800edea:	edd5 7a00 	vldr	s15, [r5]
 800edee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800edf2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800edf6:	ee17 0a90 	vmov	r0, s15
 800edfa:	f7ff bac2 	b.w	800e382 <forward_cast+0xd76>
 800edfe:	9b00      	ldr	r3, [sp, #0]
 800ee00:	45aa      	cmp	sl, r5
 800ee02:	6037      	str	r7, [r6, #0]
 800ee04:	441e      	add	r6, r3
 800ee06:	f63f aa4a 	bhi.w	800e29e <forward_cast+0xc92>
 800ee0a:	f7fe bc67 	b.w	800d6dc <forward_cast+0xd0>
 800ee0e:	2100      	movs	r1, #0
 800ee10:	f7ff b82e 	b.w	800de70 <forward_cast+0x864>
 800ee14:	2100      	movs	r1, #0
 800ee16:	f7fe bfec 	b.w	800ddf2 <forward_cast+0x7e6>
 800ee1a:	2100      	movs	r1, #0
 800ee1c:	e439      	b.n	800e692 <forward_cast+0x1086>
 800ee1e:	2000      	movs	r0, #0
 800ee20:	f7fe bd37 	b.w	800d892 <forward_cast+0x286>
 800ee24:	2100      	movs	r1, #0
 800ee26:	f7fe be85 	b.w	800db34 <forward_cast+0x528>
 800ee2a:	2000      	movs	r0, #0
 800ee2c:	f7fe bebe 	b.w	800dbac <forward_cast+0x5a0>
 800ee30:	2000      	movs	r0, #0
 800ee32:	f7ff bbc3 	b.w	800e5bc <forward_cast+0xfb0>
 800ee36:	2000      	movs	r0, #0
 800ee38:	e462      	b.n	800e700 <forward_cast+0x10f4>
 800ee3a:	2000      	movs	r0, #0
 800ee3c:	f7ff bbf4 	b.w	800e628 <forward_cast+0x101c>
 800ee40:	eef0 7a48 	vmov.f32	s15, s16
 800ee44:	f7ff b868 	b.w	800df18 <forward_cast+0x90c>
 800ee48:	eef0 7a48 	vmov.f32	s15, s16
 800ee4c:	f7fe bf99 	b.w	800dd82 <forward_cast+0x776>
 800ee50:	2000      	movs	r0, #0
 800ee52:	f7fe befd 	b.w	800dc50 <forward_cast+0x644>
 800ee56:	2100      	movs	r1, #0
 800ee58:	f7ff bace 	b.w	800e3f8 <forward_cast+0xdec>
 800ee5c:	2000      	movs	r0, #0
 800ee5e:	f7ff ba90 	b.w	800e382 <forward_cast+0xd76>
 800ee62:	2000      	movs	r0, #0
 800ee64:	f7ff bb50 	b.w	800e508 <forward_cast+0xefc>
 800ee68:	2100      	movs	r1, #0
 800ee6a:	f7ff b8cf 	b.w	800e00c <forward_cast+0xa00>
 800ee6e:	2100      	movs	r1, #0
 800ee70:	f7ff b908 	b.w	800e084 <forward_cast+0xa78>
 800ee74:	2000      	movs	r0, #0
 800ee76:	f7fe bd6f 	b.w	800d958 <forward_cast+0x34c>
 800ee7a:	2000      	movs	r0, #0
 800ee7c:	f7fe bf28 	b.w	800dcd0 <forward_cast+0x6c4>
 800ee80:	2000      	movs	r0, #0
 800ee82:	f7ff b9c3 	b.w	800e20c <forward_cast+0xc00>
 800ee86:	2000      	movs	r0, #0
 800ee88:	f7fe bc61 	b.w	800d74e <forward_cast+0x142>
 800ee8c:	2000      	movs	r0, #0
 800ee8e:	f7ff ba3a 	b.w	800e306 <forward_cast+0xcfa>
 800ee92:	2100      	movs	r1, #0
 800ee94:	f7fe bdb8 	b.w	800da08 <forward_cast+0x3fc>
 800ee98:	eef0 7a48 	vmov.f32	s15, s16
 800ee9c:	f7ff b87c 	b.w	800df98 <forward_cast+0x98c>
 800eea0:	00841040 	.word	0x00841040
 800eea4:	00840840 	.word	0x00840840
 800eea8:	2000      	movs	r0, #0
 800eeaa:	f7ff bae0 	b.w	800e46e <forward_cast+0xe62>
 800eeae:	2000      	movs	r0, #0
 800eeb0:	f7fe bdf4 	b.w	800da9c <forward_cast+0x490>
 800eeb4:	2100      	movs	r1, #0
 800eeb6:	f7ff b921 	b.w	800e0fc <forward_cast+0xaf0>
 800eeba:	2100      	movs	r1, #0
 800eebc:	f7fe bc98 	b.w	800d7f0 <forward_cast+0x1e4>
 800eec0:	4555      	cmp	r5, sl
 800eec2:	f4be ac0b 	bcs.w	800d6dc <forward_cast+0xd0>
 800eec6:	4f9c      	ldr	r7, [pc, #624]	; (800f138 <forward_cast+0x1b2c>)
 800eec8:	4b9c      	ldr	r3, [pc, #624]	; (800f13c <forward_cast+0x1b30>)
 800eeca:	4a9d      	ldr	r2, [pc, #628]	; (800f140 <forward_cast+0x1b34>)
 800eecc:	e014      	b.n	800eef8 <forward_cast+0x18ec>
 800eece:	499d      	ldr	r1, [pc, #628]	; (800f144 <forward_cast+0x1b38>)
 800eed0:	428c      	cmp	r4, r1
 800eed2:	f001 8764 	beq.w	8010d9e <forward_cast+0x3792>
 800eed6:	dd21      	ble.n	800ef1c <forward_cast+0x1910>
 800eed8:	429c      	cmp	r4, r3
 800eeda:	f001 8707 	beq.w	8010cec <forward_cast+0x36e0>
 800eede:	4294      	cmp	r4, r2
 800eee0:	d137      	bne.n	800ef52 <forward_cast+0x1946>
 800eee2:	7828      	ldrb	r0, [r5, #0]
 800eee4:	3800      	subs	r0, #0
 800eee6:	bf18      	it	ne
 800eee8:	2001      	movne	r0, #1
 800eeea:	444d      	add	r5, r9
 800eeec:	9900      	ldr	r1, [sp, #0]
 800eeee:	6030      	str	r0, [r6, #0]
 800eef0:	45aa      	cmp	sl, r5
 800eef2:	440e      	add	r6, r1
 800eef4:	f67e abf2 	bls.w	800d6dc <forward_cast+0xd0>
 800eef8:	4544      	cmp	r4, r8
 800eefa:	f001 8709 	beq.w	8010d10 <forward_cast+0x3704>
 800eefe:	dde6      	ble.n	800eece <forward_cast+0x18c2>
 800ef00:	4991      	ldr	r1, [pc, #580]	; (800f148 <forward_cast+0x1b3c>)
 800ef02:	428c      	cmp	r4, r1
 800ef04:	f001 86e1 	beq.w	8010cca <forward_cast+0x36be>
 800ef08:	dd13      	ble.n	800ef32 <forward_cast+0x1926>
 800ef0a:	42bc      	cmp	r4, r7
 800ef0c:	d121      	bne.n	800ef52 <forward_cast+0x1946>
 800ef0e:	edd5 7a00 	vldr	s15, [r5]
 800ef12:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ef16:	ee17 0a90 	vmov	r0, s15
 800ef1a:	e7e6      	b.n	800eeea <forward_cast+0x18de>
 800ef1c:	f5a1 6140 	sub.w	r1, r1, #3072	; 0xc00
 800ef20:	428c      	cmp	r4, r1
 800ef22:	f001 86e0 	beq.w	8010ce6 <forward_cast+0x36da>
 800ef26:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800ef2a:	428c      	cmp	r4, r1
 800ef2c:	d111      	bne.n	800ef52 <forward_cast+0x1946>
 800ef2e:	8828      	ldrh	r0, [r5, #0]
 800ef30:	e7db      	b.n	800eeea <forward_cast+0x18de>
 800ef32:	f5a1 51c0 	sub.w	r1, r1, #6144	; 0x1800
 800ef36:	428c      	cmp	r4, r1
 800ef38:	f001 86e6 	beq.w	8010d08 <forward_cast+0x36fc>
 800ef3c:	455c      	cmp	r4, fp
 800ef3e:	d108      	bne.n	800ef52 <forward_cast+0x1946>
 800ef40:	edd5 7a00 	vldr	s15, [r5]
 800ef44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ef48:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ef4c:	ee17 0a90 	vmov	r0, s15
 800ef50:	e7cb      	b.n	800eeea <forward_cast+0x18de>
 800ef52:	2000      	movs	r0, #0
 800ef54:	e7c9      	b.n	800eeea <forward_cast+0x18de>
 800ef56:	4555      	cmp	r5, sl
 800ef58:	f4be abc0 	bcs.w	800d6dc <forward_cast+0xd0>
 800ef5c:	f8df 81d8 	ldr.w	r8, [pc, #472]	; 800f138 <forward_cast+0x1b2c>
 800ef60:	4f7a      	ldr	r7, [pc, #488]	; (800f14c <forward_cast+0x1b40>)
 800ef62:	f8df b1f4 	ldr.w	fp, [pc, #500]	; 800f158 <forward_cast+0x1b4c>
 800ef66:	4b77      	ldr	r3, [pc, #476]	; (800f144 <forward_cast+0x1b38>)
 800ef68:	4a74      	ldr	r2, [pc, #464]	; (800f13c <forward_cast+0x1b30>)
 800ef6a:	e017      	b.n	800ef9c <forward_cast+0x1990>
 800ef6c:	429c      	cmp	r4, r3
 800ef6e:	f001 86db 	beq.w	8010d28 <forward_cast+0x371c>
 800ef72:	dd26      	ble.n	800efc2 <forward_cast+0x19b6>
 800ef74:	4294      	cmp	r4, r2
 800ef76:	f001 8700 	beq.w	8010d7a <forward_cast+0x376e>
 800ef7a:	4971      	ldr	r1, [pc, #452]	; (800f140 <forward_cast+0x1b34>)
 800ef7c:	428c      	cmp	r4, r1
 800ef7e:	d139      	bne.n	800eff4 <forward_cast+0x19e8>
 800ef80:	7828      	ldrb	r0, [r5, #0]
 800ef82:	3800      	subs	r0, #0
 800ef84:	bf18      	it	ne
 800ef86:	2001      	movne	r0, #1
 800ef88:	f380 0010 	usat	r0, #16, r0
 800ef8c:	444d      	add	r5, r9
 800ef8e:	b280      	uxth	r0, r0
 800ef90:	9900      	ldr	r1, [sp, #0]
 800ef92:	45aa      	cmp	sl, r5
 800ef94:	6030      	str	r0, [r6, #0]
 800ef96:	440e      	add	r6, r1
 800ef98:	f67e aba0 	bls.w	800d6dc <forward_cast+0xd0>
 800ef9c:	496c      	ldr	r1, [pc, #432]	; (800f150 <forward_cast+0x1b44>)
 800ef9e:	428c      	cmp	r4, r1
 800efa0:	f001 86be 	beq.w	8010d20 <forward_cast+0x3714>
 800efa4:	dde2      	ble.n	800ef6c <forward_cast+0x1960>
 800efa6:	4968      	ldr	r1, [pc, #416]	; (800f148 <forward_cast+0x1b3c>)
 800efa8:	428c      	cmp	r4, r1
 800efaa:	f001 86d5 	beq.w	8010d58 <forward_cast+0x374c>
 800efae:	dd13      	ble.n	800efd8 <forward_cast+0x19cc>
 800efb0:	4544      	cmp	r4, r8
 800efb2:	d11f      	bne.n	800eff4 <forward_cast+0x19e8>
 800efb4:	edd5 7a00 	vldr	s15, [r5]
 800efb8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800efbc:	ee17 0a90 	vmov	r0, s15
 800efc0:	e7e2      	b.n	800ef88 <forward_cast+0x197c>
 800efc2:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800efc6:	428c      	cmp	r4, r1
 800efc8:	f001 86d4 	beq.w	8010d74 <forward_cast+0x3768>
 800efcc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800efd0:	428c      	cmp	r4, r1
 800efd2:	d10f      	bne.n	800eff4 <forward_cast+0x19e8>
 800efd4:	8828      	ldrh	r0, [r5, #0]
 800efd6:	e7d7      	b.n	800ef88 <forward_cast+0x197c>
 800efd8:	42bc      	cmp	r4, r7
 800efda:	f001 86dc 	beq.w	8010d96 <forward_cast+0x378a>
 800efde:	455c      	cmp	r4, fp
 800efe0:	d108      	bne.n	800eff4 <forward_cast+0x19e8>
 800efe2:	edd5 7a00 	vldr	s15, [r5]
 800efe6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800efea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800efee:	ee17 0a90 	vmov	r0, s15
 800eff2:	e7c9      	b.n	800ef88 <forward_cast+0x197c>
 800eff4:	2000      	movs	r0, #0
 800eff6:	e7c7      	b.n	800ef88 <forward_cast+0x197c>
 800eff8:	4555      	cmp	r5, sl
 800effa:	f4be ab6f 	bcs.w	800d6dc <forward_cast+0xd0>
 800effe:	2700      	movs	r7, #0
 800f000:	f8df 8134 	ldr.w	r8, [pc, #308]	; 800f138 <forward_cast+0x1b2c>
 800f004:	4b4f      	ldr	r3, [pc, #316]	; (800f144 <forward_cast+0x1b38>)
 800f006:	4a4d      	ldr	r2, [pc, #308]	; (800f13c <forward_cast+0x1b30>)
 800f008:	e016      	b.n	800f038 <forward_cast+0x1a2c>
 800f00a:	429c      	cmp	r4, r3
 800f00c:	f001 8468 	beq.w	80108e0 <forward_cast+0x32d4>
 800f010:	dd24      	ble.n	800f05c <forward_cast+0x1a50>
 800f012:	4294      	cmp	r4, r2
 800f014:	f001 87cf 	beq.w	8010fb6 <forward_cast+0x39aa>
 800f018:	4949      	ldr	r1, [pc, #292]	; (800f140 <forward_cast+0x1b34>)
 800f01a:	428c      	cmp	r4, r1
 800f01c:	d13a      	bne.n	800f094 <forward_cast+0x1a88>
 800f01e:	7828      	ldrb	r0, [r5, #0]
 800f020:	3800      	subs	r0, #0
 800f022:	bf18      	it	ne
 800f024:	2001      	movne	r0, #1
 800f026:	f300 0007 	ssat	r0, #8, r0
 800f02a:	444d      	add	r5, r9
 800f02c:	9900      	ldr	r1, [sp, #0]
 800f02e:	55f0      	strb	r0, [r6, r7]
 800f030:	45aa      	cmp	sl, r5
 800f032:	440f      	add	r7, r1
 800f034:	f67e ab52 	bls.w	800d6dc <forward_cast+0xd0>
 800f038:	455c      	cmp	r4, fp
 800f03a:	f001 8460 	beq.w	80108fe <forward_cast+0x32f2>
 800f03e:	dde4      	ble.n	800f00a <forward_cast+0x19fe>
 800f040:	4941      	ldr	r1, [pc, #260]	; (800f148 <forward_cast+0x1b3c>)
 800f042:	428c      	cmp	r4, r1
 800f044:	f001 87a6 	beq.w	8010f94 <forward_cast+0x3988>
 800f048:	dd12      	ble.n	800f070 <forward_cast+0x1a64>
 800f04a:	4544      	cmp	r4, r8
 800f04c:	d122      	bne.n	800f094 <forward_cast+0x1a88>
 800f04e:	edd5 7a00 	vldr	s15, [r5]
 800f052:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f056:	ee17 0a90 	vmov	r0, s15
 800f05a:	e7e4      	b.n	800f026 <forward_cast+0x1a1a>
 800f05c:	493d      	ldr	r1, [pc, #244]	; (800f154 <forward_cast+0x1b48>)
 800f05e:	428c      	cmp	r4, r1
 800f060:	f001 87a6 	beq.w	8010fb0 <forward_cast+0x39a4>
 800f064:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800f068:	428c      	cmp	r4, r1
 800f06a:	d113      	bne.n	800f094 <forward_cast+0x1a88>
 800f06c:	8828      	ldrh	r0, [r5, #0]
 800f06e:	e7da      	b.n	800f026 <forward_cast+0x1a1a>
 800f070:	f5a1 51c0 	sub.w	r1, r1, #6144	; 0x1800
 800f074:	428c      	cmp	r4, r1
 800f076:	f001 87ac 	beq.w	8010fd2 <forward_cast+0x39c6>
 800f07a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f07e:	428c      	cmp	r4, r1
 800f080:	d108      	bne.n	800f094 <forward_cast+0x1a88>
 800f082:	edd5 7a00 	vldr	s15, [r5]
 800f086:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f08a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f08e:	ee17 0a90 	vmov	r0, s15
 800f092:	e7c8      	b.n	800f026 <forward_cast+0x1a1a>
 800f094:	2000      	movs	r0, #0
 800f096:	e7c6      	b.n	800f026 <forward_cast+0x1a1a>
 800f098:	4555      	cmp	r5, sl
 800f09a:	f4be ab1f 	bcs.w	800d6dc <forward_cast+0xd0>
 800f09e:	4a28      	ldr	r2, [pc, #160]	; (800f140 <forward_cast+0x1b34>)
 800f0a0:	e014      	b.n	800f0cc <forward_cast+0x1ac0>
 800f0a2:	455c      	cmp	r4, fp
 800f0a4:	f001 8465 	beq.w	8010972 <forward_cast+0x3366>
 800f0a8:	dd22      	ble.n	800f0f0 <forward_cast+0x1ae4>
 800f0aa:	4924      	ldr	r1, [pc, #144]	; (800f13c <forward_cast+0x1b30>)
 800f0ac:	428c      	cmp	r4, r1
 800f0ae:	f001 843f 	beq.w	8010930 <forward_cast+0x3324>
 800f0b2:	4294      	cmp	r4, r2
 800f0b4:	d136      	bne.n	800f124 <forward_cast+0x1b18>
 800f0b6:	7828      	ldrb	r0, [r5, #0]
 800f0b8:	3800      	subs	r0, #0
 800f0ba:	bf18      	it	ne
 800f0bc:	2001      	movne	r0, #1
 800f0be:	444d      	add	r5, r9
 800f0c0:	9900      	ldr	r1, [sp, #0]
 800f0c2:	6030      	str	r0, [r6, #0]
 800f0c4:	45aa      	cmp	sl, r5
 800f0c6:	440e      	add	r6, r1
 800f0c8:	f67e ab08 	bls.w	800d6dc <forward_cast+0xd0>
 800f0cc:	4544      	cmp	r4, r8
 800f0ce:	f001 844c 	beq.w	801096a <forward_cast+0x335e>
 800f0d2:	dde6      	ble.n	800f0a2 <forward_cast+0x1a96>
 800f0d4:	491c      	ldr	r1, [pc, #112]	; (800f148 <forward_cast+0x1b3c>)
 800f0d6:	428c      	cmp	r4, r1
 800f0d8:	f001 8419 	beq.w	801090e <forward_cast+0x3302>
 800f0dc:	dd12      	ble.n	800f104 <forward_cast+0x1af8>
 800f0de:	42bc      	cmp	r4, r7
 800f0e0:	d120      	bne.n	800f124 <forward_cast+0x1b18>
 800f0e2:	edd5 7a00 	vldr	s15, [r5]
 800f0e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f0ea:	ee17 0a90 	vmov	r0, s15
 800f0ee:	e7e6      	b.n	800f0be <forward_cast+0x1ab2>
 800f0f0:	4918      	ldr	r1, [pc, #96]	; (800f154 <forward_cast+0x1b48>)
 800f0f2:	428c      	cmp	r4, r1
 800f0f4:	f001 8419 	beq.w	801092a <forward_cast+0x331e>
 800f0f8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800f0fc:	428c      	cmp	r4, r1
 800f0fe:	d111      	bne.n	800f124 <forward_cast+0x1b18>
 800f100:	8828      	ldrh	r0, [r5, #0]
 800f102:	e7dc      	b.n	800f0be <forward_cast+0x1ab2>
 800f104:	f5a1 51c0 	sub.w	r1, r1, #6144	; 0x1800
 800f108:	428c      	cmp	r4, r1
 800f10a:	f001 841f 	beq.w	801094c <forward_cast+0x3340>
 800f10e:	429c      	cmp	r4, r3
 800f110:	d108      	bne.n	800f124 <forward_cast+0x1b18>
 800f112:	edd5 7a00 	vldr	s15, [r5]
 800f116:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f11a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f11e:	ee17 0a90 	vmov	r0, s15
 800f122:	e7cc      	b.n	800f0be <forward_cast+0x1ab2>
 800f124:	2000      	movs	r0, #0
 800f126:	e7ca      	b.n	800f0be <forward_cast+0x1ab2>
 800f128:	4555      	cmp	r5, sl
 800f12a:	f4be aad7 	bcs.w	800d6dc <forward_cast+0xd0>
 800f12e:	f04f 0800 	mov.w	r8, #0
 800f132:	4b09      	ldr	r3, [pc, #36]	; (800f158 <forward_cast+0x1b4c>)
 800f134:	4a01      	ldr	r2, [pc, #4]	; (800f13c <forward_cast+0x1b30>)
 800f136:	e027      	b.n	800f188 <forward_cast+0x1b7c>
 800f138:	01821040 	.word	0x01821040
 800f13c:	00042040 	.word	0x00042040
 800f140:	00060440 	.word	0x00060440
 800f144:	00041040 	.word	0x00041040
 800f148:	00842040 	.word	0x00842040
 800f14c:	00840840 	.word	0x00840840
 800f150:	00840440 	.word	0x00840440
 800f154:	00040440 	.word	0x00040440
 800f158:	00841040 	.word	0x00841040
 800f15c:	42bc      	cmp	r4, r7
 800f15e:	f001 8478 	beq.w	8010a52 <forward_cast+0x3446>
 800f162:	dd25      	ble.n	800f1b0 <forward_cast+0x1ba4>
 800f164:	4294      	cmp	r4, r2
 800f166:	f001 8464 	beq.w	8010a32 <forward_cast+0x3426>
 800f16a:	49a9      	ldr	r1, [pc, #676]	; (800f410 <forward_cast+0x1e04>)
 800f16c:	428c      	cmp	r4, r1
 800f16e:	d13a      	bne.n	800f1e6 <forward_cast+0x1bda>
 800f170:	7829      	ldrb	r1, [r5, #0]
 800f172:	3900      	subs	r1, #0
 800f174:	bf18      	it	ne
 800f176:	2101      	movne	r1, #1
 800f178:	444d      	add	r5, r9
 800f17a:	f806 1008 	strb.w	r1, [r6, r8]
 800f17e:	9900      	ldr	r1, [sp, #0]
 800f180:	45aa      	cmp	sl, r5
 800f182:	4488      	add	r8, r1
 800f184:	f67e aaaa 	bls.w	800d6dc <forward_cast+0xd0>
 800f188:	455c      	cmp	r4, fp
 800f18a:	d018      	beq.n	800f1be <forward_cast+0x1bb2>
 800f18c:	dde6      	ble.n	800f15c <forward_cast+0x1b50>
 800f18e:	49a1      	ldr	r1, [pc, #644]	; (800f414 <forward_cast+0x1e08>)
 800f190:	428c      	cmp	r4, r1
 800f192:	f001 843e 	beq.w	8010a12 <forward_cast+0x3406>
 800f196:	dd15      	ble.n	800f1c4 <forward_cast+0x1bb8>
 800f198:	499f      	ldr	r1, [pc, #636]	; (800f418 <forward_cast+0x1e0c>)
 800f19a:	428c      	cmp	r4, r1
 800f19c:	d123      	bne.n	800f1e6 <forward_cast+0x1bda>
 800f19e:	edd5 7a00 	vldr	s15, [r5]
 800f1a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f1a6:	edcd 7a01 	vstr	s15, [sp, #4]
 800f1aa:	f99d 1004 	ldrsb.w	r1, [sp, #4]
 800f1ae:	e7e3      	b.n	800f178 <forward_cast+0x1b6c>
 800f1b0:	499a      	ldr	r1, [pc, #616]	; (800f41c <forward_cast+0x1e10>)
 800f1b2:	428c      	cmp	r4, r1
 800f1b4:	d003      	beq.n	800f1be <forward_cast+0x1bb2>
 800f1b6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800f1ba:	428c      	cmp	r4, r1
 800f1bc:	d113      	bne.n	800f1e6 <forward_cast+0x1bda>
 800f1be:	f995 1000 	ldrsb.w	r1, [r5]
 800f1c2:	e7d9      	b.n	800f178 <forward_cast+0x1b6c>
 800f1c4:	f5a1 51c0 	sub.w	r1, r1, #6144	; 0x1800
 800f1c8:	428c      	cmp	r4, r1
 800f1ca:	d0f8      	beq.n	800f1be <forward_cast+0x1bb2>
 800f1cc:	429c      	cmp	r4, r3
 800f1ce:	d10a      	bne.n	800f1e6 <forward_cast+0x1bda>
 800f1d0:	edd5 7a00 	vldr	s15, [r5]
 800f1d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f1d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f1dc:	edcd 7a01 	vstr	s15, [sp, #4]
 800f1e0:	f99d 1004 	ldrsb.w	r1, [sp, #4]
 800f1e4:	e7c8      	b.n	800f178 <forward_cast+0x1b6c>
 800f1e6:	2100      	movs	r1, #0
 800f1e8:	e7c6      	b.n	800f178 <forward_cast+0x1b6c>
 800f1ea:	4555      	cmp	r5, sl
 800f1ec:	f4be aa76 	bcs.w	800d6dc <forward_cast+0xd0>
 800f1f0:	f8df 8224 	ldr.w	r8, [pc, #548]	; 800f418 <forward_cast+0x1e0c>
 800f1f4:	4f8a      	ldr	r7, [pc, #552]	; (800f420 <forward_cast+0x1e14>)
 800f1f6:	f8df b238 	ldr.w	fp, [pc, #568]	; 800f430 <forward_cast+0x1e24>
 800f1fa:	4b8a      	ldr	r3, [pc, #552]	; (800f424 <forward_cast+0x1e18>)
 800f1fc:	4a8a      	ldr	r2, [pc, #552]	; (800f428 <forward_cast+0x1e1c>)
 800f1fe:	e014      	b.n	800f22a <forward_cast+0x1c1e>
 800f200:	429c      	cmp	r4, r3
 800f202:	f001 83c0 	beq.w	8010986 <forward_cast+0x337a>
 800f206:	dd26      	ble.n	800f256 <forward_cast+0x1c4a>
 800f208:	4294      	cmp	r4, r2
 800f20a:	f001 83ea 	beq.w	80109e2 <forward_cast+0x33d6>
 800f20e:	4980      	ldr	r1, [pc, #512]	; (800f410 <forward_cast+0x1e04>)
 800f210:	428c      	cmp	r4, r1
 800f212:	d13e      	bne.n	800f292 <forward_cast+0x1c86>
 800f214:	7829      	ldrb	r1, [r5, #0]
 800f216:	3900      	subs	r1, #0
 800f218:	bf18      	it	ne
 800f21a:	2101      	movne	r1, #1
 800f21c:	444d      	add	r5, r9
 800f21e:	6031      	str	r1, [r6, #0]
 800f220:	9900      	ldr	r1, [sp, #0]
 800f222:	45aa      	cmp	sl, r5
 800f224:	440e      	add	r6, r1
 800f226:	f67e aa59 	bls.w	800d6dc <forward_cast+0xd0>
 800f22a:	4980      	ldr	r1, [pc, #512]	; (800f42c <forward_cast+0x1e20>)
 800f22c:	428c      	cmp	r4, r1
 800f22e:	f001 8391 	beq.w	8010954 <forward_cast+0x3348>
 800f232:	dde5      	ble.n	800f200 <forward_cast+0x1bf4>
 800f234:	4977      	ldr	r1, [pc, #476]	; (800f414 <forward_cast+0x1e08>)
 800f236:	428c      	cmp	r4, r1
 800f238:	f001 83c2 	beq.w	80109c0 <forward_cast+0x33b4>
 800f23c:	dd18      	ble.n	800f270 <forward_cast+0x1c64>
 800f23e:	4544      	cmp	r4, r8
 800f240:	d127      	bne.n	800f292 <forward_cast+0x1c86>
 800f242:	edd5 7a00 	vldr	s15, [r5]
 800f246:	eef5 7a40 	vcmp.f32	s15, #0.0
 800f24a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f24e:	bf14      	ite	ne
 800f250:	2101      	movne	r1, #1
 800f252:	2100      	moveq	r1, #0
 800f254:	e7e2      	b.n	800f21c <forward_cast+0x1c10>
 800f256:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800f25a:	428c      	cmp	r4, r1
 800f25c:	d0da      	beq.n	800f214 <forward_cast+0x1c08>
 800f25e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800f262:	428c      	cmp	r4, r1
 800f264:	d115      	bne.n	800f292 <forward_cast+0x1c86>
 800f266:	8829      	ldrh	r1, [r5, #0]
 800f268:	3900      	subs	r1, #0
 800f26a:	bf18      	it	ne
 800f26c:	2101      	movne	r1, #1
 800f26e:	e7d5      	b.n	800f21c <forward_cast+0x1c10>
 800f270:	42bc      	cmp	r4, r7
 800f272:	f001 83c7 	beq.w	8010a04 <forward_cast+0x33f8>
 800f276:	455c      	cmp	r4, fp
 800f278:	d10b      	bne.n	800f292 <forward_cast+0x1c86>
 800f27a:	edd5 7a00 	vldr	s15, [r5]
 800f27e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f282:	eef5 7a40 	vcmp.f32	s15, #0.0
 800f286:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f28a:	bf14      	ite	ne
 800f28c:	2101      	movne	r1, #1
 800f28e:	2100      	moveq	r1, #0
 800f290:	e7c4      	b.n	800f21c <forward_cast+0x1c10>
 800f292:	2100      	movs	r1, #0
 800f294:	e7c2      	b.n	800f21c <forward_cast+0x1c10>
 800f296:	4555      	cmp	r5, sl
 800f298:	f4be aa20 	bcs.w	800d6dc <forward_cast+0xd0>
 800f29c:	9f00      	ldr	r7, [sp, #0]
 800f29e:	4621      	mov	r1, r4
 800f2a0:	4628      	mov	r0, r5
 800f2a2:	f7fe f93f 	bl	800d524 <_array_handle_get_as_float>
 800f2a6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800f2aa:	ee17 3a90 	vmov	r3, s15
 800f2ae:	f383 0308 	usat	r3, #8, r3
 800f2b2:	444d      	add	r5, r9
 800f2b4:	7033      	strb	r3, [r6, #0]
 800f2b6:	443e      	add	r6, r7
 800f2b8:	45aa      	cmp	sl, r5
 800f2ba:	d8f0      	bhi.n	800f29e <forward_cast+0x1c92>
 800f2bc:	f7fe ba0e 	b.w	800d6dc <forward_cast+0xd0>
 800f2c0:	4555      	cmp	r5, sl
 800f2c2:	f4be aa0b 	bcs.w	800d6dc <forward_cast+0xd0>
 800f2c6:	f8df 8150 	ldr.w	r8, [pc, #336]	; 800f418 <forward_cast+0x1e0c>
 800f2ca:	4f55      	ldr	r7, [pc, #340]	; (800f420 <forward_cast+0x1e14>)
 800f2cc:	f8df b160 	ldr.w	fp, [pc, #352]	; 800f430 <forward_cast+0x1e24>
 800f2d0:	4b54      	ldr	r3, [pc, #336]	; (800f424 <forward_cast+0x1e18>)
 800f2d2:	4a55      	ldr	r2, [pc, #340]	; (800f428 <forward_cast+0x1e1c>)
 800f2d4:	e017      	b.n	800f306 <forward_cast+0x1cfa>
 800f2d6:	429c      	cmp	r4, r3
 800f2d8:	f001 8726 	beq.w	8011128 <forward_cast+0x3b1c>
 800f2dc:	dd26      	ble.n	800f32c <forward_cast+0x1d20>
 800f2de:	4294      	cmp	r4, r2
 800f2e0:	f001 8708 	beq.w	80110f4 <forward_cast+0x3ae8>
 800f2e4:	494a      	ldr	r1, [pc, #296]	; (800f410 <forward_cast+0x1e04>)
 800f2e6:	428c      	cmp	r4, r1
 800f2e8:	d139      	bne.n	800f35e <forward_cast+0x1d52>
 800f2ea:	7828      	ldrb	r0, [r5, #0]
 800f2ec:	3800      	subs	r0, #0
 800f2ee:	bf18      	it	ne
 800f2f0:	2001      	movne	r0, #1
 800f2f2:	f380 0008 	usat	r0, #8, r0
 800f2f6:	444d      	add	r5, r9
 800f2f8:	b2c0      	uxtb	r0, r0
 800f2fa:	9900      	ldr	r1, [sp, #0]
 800f2fc:	45aa      	cmp	sl, r5
 800f2fe:	6030      	str	r0, [r6, #0]
 800f300:	440e      	add	r6, r1
 800f302:	f67e a9eb 	bls.w	800d6dc <forward_cast+0xd0>
 800f306:	4949      	ldr	r1, [pc, #292]	; (800f42c <forward_cast+0x1e20>)
 800f308:	428c      	cmp	r4, r1
 800f30a:	f001 8709 	beq.w	8011120 <forward_cast+0x3b14>
 800f30e:	dde2      	ble.n	800f2d6 <forward_cast+0x1cca>
 800f310:	4940      	ldr	r1, [pc, #256]	; (800f414 <forward_cast+0x1e08>)
 800f312:	428c      	cmp	r4, r1
 800f314:	f001 86ce 	beq.w	80110b4 <forward_cast+0x3aa8>
 800f318:	dd13      	ble.n	800f342 <forward_cast+0x1d36>
 800f31a:	4544      	cmp	r4, r8
 800f31c:	d11f      	bne.n	800f35e <forward_cast+0x1d52>
 800f31e:	edd5 7a00 	vldr	s15, [r5]
 800f322:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f326:	ee17 0a90 	vmov	r0, s15
 800f32a:	e7e2      	b.n	800f2f2 <forward_cast+0x1ce6>
 800f32c:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800f330:	428c      	cmp	r4, r1
 800f332:	f001 86cd 	beq.w	80110d0 <forward_cast+0x3ac4>
 800f336:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800f33a:	428c      	cmp	r4, r1
 800f33c:	d10f      	bne.n	800f35e <forward_cast+0x1d52>
 800f33e:	8828      	ldrh	r0, [r5, #0]
 800f340:	e7d7      	b.n	800f2f2 <forward_cast+0x1ce6>
 800f342:	42bc      	cmp	r4, r7
 800f344:	f001 86e4 	beq.w	8011110 <forward_cast+0x3b04>
 800f348:	455c      	cmp	r4, fp
 800f34a:	d108      	bne.n	800f35e <forward_cast+0x1d52>
 800f34c:	edd5 7a00 	vldr	s15, [r5]
 800f350:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f354:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f358:	ee17 0a90 	vmov	r0, s15
 800f35c:	e7c9      	b.n	800f2f2 <forward_cast+0x1ce6>
 800f35e:	2000      	movs	r0, #0
 800f360:	e7c7      	b.n	800f2f2 <forward_cast+0x1ce6>
 800f362:	4555      	cmp	r5, sl
 800f364:	f4be a9ba 	bcs.w	800d6dc <forward_cast+0xd0>
 800f368:	f04f 0800 	mov.w	r8, #0
 800f36c:	4a30      	ldr	r2, [pc, #192]	; (800f430 <forward_cast+0x1e24>)
 800f36e:	e019      	b.n	800f3a4 <forward_cast+0x1d98>
 800f370:	429c      	cmp	r4, r3
 800f372:	f001 8636 	beq.w	8010fe2 <forward_cast+0x39d6>
 800f376:	dd28      	ble.n	800f3ca <forward_cast+0x1dbe>
 800f378:	492b      	ldr	r1, [pc, #172]	; (800f428 <forward_cast+0x1e1c>)
 800f37a:	428c      	cmp	r4, r1
 800f37c:	f001 86ef 	beq.w	801115e <forward_cast+0x3b52>
 800f380:	f501 31f2 	add.w	r1, r1, #123904	; 0x1e400
 800f384:	428c      	cmp	r4, r1
 800f386:	d138      	bne.n	800f3fa <forward_cast+0x1dee>
 800f388:	7828      	ldrb	r0, [r5, #0]
 800f38a:	3800      	subs	r0, #0
 800f38c:	bf18      	it	ne
 800f38e:	2001      	movne	r0, #1
 800f390:	f380 0008 	usat	r0, #8, r0
 800f394:	444d      	add	r5, r9
 800f396:	9900      	ldr	r1, [sp, #0]
 800f398:	f806 0008 	strb.w	r0, [r6, r8]
 800f39c:	45aa      	cmp	sl, r5
 800f39e:	4488      	add	r8, r1
 800f3a0:	f67e a99c 	bls.w	800d6dc <forward_cast+0xd0>
 800f3a4:	455c      	cmp	r4, fp
 800f3a6:	f001 86b7 	beq.w	8011118 <forward_cast+0x3b0c>
 800f3aa:	dde1      	ble.n	800f370 <forward_cast+0x1d64>
 800f3ac:	4919      	ldr	r1, [pc, #100]	; (800f414 <forward_cast+0x1e08>)
 800f3ae:	428c      	cmp	r4, r1
 800f3b0:	f001 86c4 	beq.w	801113c <forward_cast+0x3b30>
 800f3b4:	dd11      	ble.n	800f3da <forward_cast+0x1dce>
 800f3b6:	4918      	ldr	r1, [pc, #96]	; (800f418 <forward_cast+0x1e0c>)
 800f3b8:	428c      	cmp	r4, r1
 800f3ba:	d11e      	bne.n	800f3fa <forward_cast+0x1dee>
 800f3bc:	edd5 7a00 	vldr	s15, [r5]
 800f3c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f3c4:	ee17 0a90 	vmov	r0, s15
 800f3c8:	e7e2      	b.n	800f390 <forward_cast+0x1d84>
 800f3ca:	42bc      	cmp	r4, r7
 800f3cc:	f001 86c4 	beq.w	8011158 <forward_cast+0x3b4c>
 800f3d0:	4918      	ldr	r1, [pc, #96]	; (800f434 <forward_cast+0x1e28>)
 800f3d2:	428c      	cmp	r4, r1
 800f3d4:	d111      	bne.n	800f3fa <forward_cast+0x1dee>
 800f3d6:	8828      	ldrh	r0, [r5, #0]
 800f3d8:	e7da      	b.n	800f390 <forward_cast+0x1d84>
 800f3da:	f5a1 51c0 	sub.w	r1, r1, #6144	; 0x1800
 800f3de:	428c      	cmp	r4, r1
 800f3e0:	f001 86cb 	beq.w	801117a <forward_cast+0x3b6e>
 800f3e4:	4294      	cmp	r4, r2
 800f3e6:	d108      	bne.n	800f3fa <forward_cast+0x1dee>
 800f3e8:	edd5 7a00 	vldr	s15, [r5]
 800f3ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f3f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f3f4:	ee17 0a90 	vmov	r0, s15
 800f3f8:	e7ca      	b.n	800f390 <forward_cast+0x1d84>
 800f3fa:	2000      	movs	r0, #0
 800f3fc:	e7c8      	b.n	800f390 <forward_cast+0x1d84>
 800f3fe:	4555      	cmp	r5, sl
 800f400:	f4be a96c 	bcs.w	800d6dc <forward_cast+0xd0>
 800f404:	2700      	movs	r7, #0
 800f406:	f8df 800c 	ldr.w	r8, [pc, #12]	; 800f414 <forward_cast+0x1e08>
 800f40a:	4b09      	ldr	r3, [pc, #36]	; (800f430 <forward_cast+0x1e24>)
 800f40c:	4a05      	ldr	r2, [pc, #20]	; (800f424 <forward_cast+0x1e18>)
 800f40e:	e02c      	b.n	800f46a <forward_cast+0x1e5e>
 800f410:	00060440 	.word	0x00060440
 800f414:	00842040 	.word	0x00842040
 800f418:	01821040 	.word	0x01821040
 800f41c:	00040440 	.word	0x00040440
 800f420:	00840840 	.word	0x00840840
 800f424:	00041040 	.word	0x00041040
 800f428:	00042040 	.word	0x00042040
 800f42c:	00840440 	.word	0x00840440
 800f430:	00841040 	.word	0x00841040
 800f434:	00040840 	.word	0x00040840
 800f438:	4294      	cmp	r4, r2
 800f43a:	f001 86ec 	beq.w	8011216 <forward_cast+0x3c0a>
 800f43e:	dd27      	ble.n	800f490 <forward_cast+0x1e84>
 800f440:	499d      	ldr	r1, [pc, #628]	; (800f6b8 <forward_cast+0x20ac>)
 800f442:	428c      	cmp	r4, r1
 800f444:	f001 86ae 	beq.w	80111a4 <forward_cast+0x3b98>
 800f448:	f501 31f2 	add.w	r1, r1, #123904	; 0x1e400
 800f44c:	428c      	cmp	r4, r1
 800f44e:	d136      	bne.n	800f4be <forward_cast+0x1eb2>
 800f450:	7828      	ldrb	r0, [r5, #0]
 800f452:	3800      	subs	r0, #0
 800f454:	bf18      	it	ne
 800f456:	2001      	movne	r0, #1
 800f458:	f300 000f 	ssat	r0, #16, r0
 800f45c:	444d      	add	r5, r9
 800f45e:	9900      	ldr	r1, [sp, #0]
 800f460:	55f0      	strb	r0, [r6, r7]
 800f462:	45aa      	cmp	sl, r5
 800f464:	440f      	add	r7, r1
 800f466:	f67e a939 	bls.w	800d6dc <forward_cast+0xd0>
 800f46a:	4994      	ldr	r1, [pc, #592]	; (800f6bc <forward_cast+0x20b0>)
 800f46c:	428c      	cmp	r4, r1
 800f46e:	f001 86ce 	beq.w	801120e <forward_cast+0x3c02>
 800f472:	dde1      	ble.n	800f438 <forward_cast+0x1e2c>
 800f474:	4544      	cmp	r4, r8
 800f476:	f001 8684 	beq.w	8011182 <forward_cast+0x3b76>
 800f47a:	dd11      	ble.n	800f4a0 <forward_cast+0x1e94>
 800f47c:	4990      	ldr	r1, [pc, #576]	; (800f6c0 <forward_cast+0x20b4>)
 800f47e:	428c      	cmp	r4, r1
 800f480:	d11d      	bne.n	800f4be <forward_cast+0x1eb2>
 800f482:	edd5 7a00 	vldr	s15, [r5]
 800f486:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f48a:	ee17 0a90 	vmov	r0, s15
 800f48e:	e7e3      	b.n	800f458 <forward_cast+0x1e4c>
 800f490:	455c      	cmp	r4, fp
 800f492:	f001 8684 	beq.w	801119e <forward_cast+0x3b92>
 800f496:	498b      	ldr	r1, [pc, #556]	; (800f6c4 <forward_cast+0x20b8>)
 800f498:	428c      	cmp	r4, r1
 800f49a:	d110      	bne.n	800f4be <forward_cast+0x1eb2>
 800f49c:	8828      	ldrh	r0, [r5, #0]
 800f49e:	e7db      	b.n	800f458 <forward_cast+0x1e4c>
 800f4a0:	4989      	ldr	r1, [pc, #548]	; (800f6c8 <forward_cast+0x20bc>)
 800f4a2:	428c      	cmp	r4, r1
 800f4a4:	f001 868c 	beq.w	80111c0 <forward_cast+0x3bb4>
 800f4a8:	429c      	cmp	r4, r3
 800f4aa:	d108      	bne.n	800f4be <forward_cast+0x1eb2>
 800f4ac:	edd5 7a00 	vldr	s15, [r5]
 800f4b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f4b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f4b8:	ee17 0a90 	vmov	r0, s15
 800f4bc:	e7cc      	b.n	800f458 <forward_cast+0x1e4c>
 800f4be:	2000      	movs	r0, #0
 800f4c0:	e7ca      	b.n	800f458 <forward_cast+0x1e4c>
 800f4c2:	4555      	cmp	r5, sl
 800f4c4:	f4be a90a 	bcs.w	800d6dc <forward_cast+0xd0>
 800f4c8:	f8df 81f4 	ldr.w	r8, [pc, #500]	; 800f6c0 <forward_cast+0x20b4>
 800f4cc:	4f7e      	ldr	r7, [pc, #504]	; (800f6c8 <forward_cast+0x20bc>)
 800f4ce:	f8df b208 	ldr.w	fp, [pc, #520]	; 800f6d8 <forward_cast+0x20cc>
 800f4d2:	4b7e      	ldr	r3, [pc, #504]	; (800f6cc <forward_cast+0x20c0>)
 800f4d4:	4a78      	ldr	r2, [pc, #480]	; (800f6b8 <forward_cast+0x20ac>)
 800f4d6:	e017      	b.n	800f508 <forward_cast+0x1efc>
 800f4d8:	429c      	cmp	r4, r3
 800f4da:	f001 86de 	beq.w	801129a <forward_cast+0x3c8e>
 800f4de:	dd26      	ble.n	800f52e <forward_cast+0x1f22>
 800f4e0:	4294      	cmp	r4, r2
 800f4e2:	f001 8682 	beq.w	80111ea <forward_cast+0x3bde>
 800f4e6:	497a      	ldr	r1, [pc, #488]	; (800f6d0 <forward_cast+0x20c4>)
 800f4e8:	428c      	cmp	r4, r1
 800f4ea:	d139      	bne.n	800f560 <forward_cast+0x1f54>
 800f4ec:	7828      	ldrb	r0, [r5, #0]
 800f4ee:	3800      	subs	r0, #0
 800f4f0:	bf18      	it	ne
 800f4f2:	2001      	movne	r0, #1
 800f4f4:	f300 000f 	ssat	r0, #16, r0
 800f4f8:	444d      	add	r5, r9
 800f4fa:	b200      	sxth	r0, r0
 800f4fc:	9900      	ldr	r1, [sp, #0]
 800f4fe:	45aa      	cmp	sl, r5
 800f500:	6030      	str	r0, [r6, #0]
 800f502:	440e      	add	r6, r1
 800f504:	f67e a8ea 	bls.w	800d6dc <forward_cast+0xd0>
 800f508:	496c      	ldr	r1, [pc, #432]	; (800f6bc <forward_cast+0x20b0>)
 800f50a:	428c      	cmp	r4, r1
 800f50c:	f001 8565 	beq.w	8010fda <forward_cast+0x39ce>
 800f510:	dde2      	ble.n	800f4d8 <forward_cast+0x1ecc>
 800f512:	4970      	ldr	r1, [pc, #448]	; (800f6d4 <forward_cast+0x20c8>)
 800f514:	428c      	cmp	r4, r1
 800f516:	f001 8657 	beq.w	80111c8 <forward_cast+0x3bbc>
 800f51a:	dd13      	ble.n	800f544 <forward_cast+0x1f38>
 800f51c:	4544      	cmp	r4, r8
 800f51e:	d11f      	bne.n	800f560 <forward_cast+0x1f54>
 800f520:	edd5 7a00 	vldr	s15, [r5]
 800f524:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f528:	ee17 0a90 	vmov	r0, s15
 800f52c:	e7e2      	b.n	800f4f4 <forward_cast+0x1ee8>
 800f52e:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800f532:	428c      	cmp	r4, r1
 800f534:	f001 8656 	beq.w	80111e4 <forward_cast+0x3bd8>
 800f538:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800f53c:	428c      	cmp	r4, r1
 800f53e:	d10f      	bne.n	800f560 <forward_cast+0x1f54>
 800f540:	8828      	ldrh	r0, [r5, #0]
 800f542:	e7d7      	b.n	800f4f4 <forward_cast+0x1ee8>
 800f544:	42bc      	cmp	r4, r7
 800f546:	f001 865e 	beq.w	8011206 <forward_cast+0x3bfa>
 800f54a:	455c      	cmp	r4, fp
 800f54c:	d108      	bne.n	800f560 <forward_cast+0x1f54>
 800f54e:	edd5 7a00 	vldr	s15, [r5]
 800f552:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f556:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f55a:	ee17 0a90 	vmov	r0, s15
 800f55e:	e7c9      	b.n	800f4f4 <forward_cast+0x1ee8>
 800f560:	2000      	movs	r0, #0
 800f562:	e7c7      	b.n	800f4f4 <forward_cast+0x1ee8>
 800f564:	4555      	cmp	r5, sl
 800f566:	f4be a8b9 	bcs.w	800d6dc <forward_cast+0xd0>
 800f56a:	f04f 0800 	mov.w	r8, #0
 800f56e:	4b56      	ldr	r3, [pc, #344]	; (800f6c8 <forward_cast+0x20bc>)
 800f570:	4a59      	ldr	r2, [pc, #356]	; (800f6d8 <forward_cast+0x20cc>)
 800f572:	e019      	b.n	800f5a8 <forward_cast+0x1f9c>
 800f574:	42bc      	cmp	r4, r7
 800f576:	f001 8542 	beq.w	8010ffe <forward_cast+0x39f2>
 800f57a:	dd29      	ble.n	800f5d0 <forward_cast+0x1fc4>
 800f57c:	494e      	ldr	r1, [pc, #312]	; (800f6b8 <forward_cast+0x20ac>)
 800f57e:	428c      	cmp	r4, r1
 800f580:	f001 8558 	beq.w	8011034 <forward_cast+0x3a28>
 800f584:	f501 31f2 	add.w	r1, r1, #123904	; 0x1e400
 800f588:	428c      	cmp	r4, r1
 800f58a:	d137      	bne.n	800f5fc <forward_cast+0x1ff0>
 800f58c:	7828      	ldrb	r0, [r5, #0]
 800f58e:	3800      	subs	r0, #0
 800f590:	bf18      	it	ne
 800f592:	2001      	movne	r0, #1
 800f594:	f380 0010 	usat	r0, #16, r0
 800f598:	444d      	add	r5, r9
 800f59a:	9900      	ldr	r1, [sp, #0]
 800f59c:	f806 0008 	strb.w	r0, [r6, r8]
 800f5a0:	45aa      	cmp	sl, r5
 800f5a2:	4488      	add	r8, r1
 800f5a4:	f67e a89a 	bls.w	800d6dc <forward_cast+0xd0>
 800f5a8:	4944      	ldr	r1, [pc, #272]	; (800f6bc <forward_cast+0x20b0>)
 800f5aa:	428c      	cmp	r4, r1
 800f5ac:	f001 8523 	beq.w	8010ff6 <forward_cast+0x39ea>
 800f5b0:	dde0      	ble.n	800f574 <forward_cast+0x1f68>
 800f5b2:	4948      	ldr	r1, [pc, #288]	; (800f6d4 <forward_cast+0x20c8>)
 800f5b4:	428c      	cmp	r4, r1
 800f5b6:	f001 852c 	beq.w	8011012 <forward_cast+0x3a06>
 800f5ba:	dd11      	ble.n	800f5e0 <forward_cast+0x1fd4>
 800f5bc:	4940      	ldr	r1, [pc, #256]	; (800f6c0 <forward_cast+0x20b4>)
 800f5be:	428c      	cmp	r4, r1
 800f5c0:	d11c      	bne.n	800f5fc <forward_cast+0x1ff0>
 800f5c2:	edd5 7a00 	vldr	s15, [r5]
 800f5c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f5ca:	ee17 0a90 	vmov	r0, s15
 800f5ce:	e7e1      	b.n	800f594 <forward_cast+0x1f88>
 800f5d0:	455c      	cmp	r4, fp
 800f5d2:	f001 852c 	beq.w	801102e <forward_cast+0x3a22>
 800f5d6:	493b      	ldr	r1, [pc, #236]	; (800f6c4 <forward_cast+0x20b8>)
 800f5d8:	428c      	cmp	r4, r1
 800f5da:	d10f      	bne.n	800f5fc <forward_cast+0x1ff0>
 800f5dc:	8828      	ldrh	r0, [r5, #0]
 800f5de:	e7d9      	b.n	800f594 <forward_cast+0x1f88>
 800f5e0:	429c      	cmp	r4, r3
 800f5e2:	f001 8535 	beq.w	8011050 <forward_cast+0x3a44>
 800f5e6:	4294      	cmp	r4, r2
 800f5e8:	d108      	bne.n	800f5fc <forward_cast+0x1ff0>
 800f5ea:	edd5 7a00 	vldr	s15, [r5]
 800f5ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f5f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f5f6:	ee17 0a90 	vmov	r0, s15
 800f5fa:	e7cb      	b.n	800f594 <forward_cast+0x1f88>
 800f5fc:	2000      	movs	r0, #0
 800f5fe:	e7c9      	b.n	800f594 <forward_cast+0x1f88>
 800f600:	4555      	cmp	r5, sl
 800f602:	f4be a86b 	bcs.w	800d6dc <forward_cast+0xd0>
 800f606:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 800f6c0 <forward_cast+0x20b4>
 800f60a:	4f2f      	ldr	r7, [pc, #188]	; (800f6c8 <forward_cast+0x20bc>)
 800f60c:	f8df b0c8 	ldr.w	fp, [pc, #200]	; 800f6d8 <forward_cast+0x20cc>
 800f610:	4b2e      	ldr	r3, [pc, #184]	; (800f6cc <forward_cast+0x20c0>)
 800f612:	4a29      	ldr	r2, [pc, #164]	; (800f6b8 <forward_cast+0x20ac>)
 800f614:	e017      	b.n	800f646 <forward_cast+0x203a>
 800f616:	429c      	cmp	r4, r3
 800f618:	f001 8126 	beq.w	8010868 <forward_cast+0x325c>
 800f61c:	dd26      	ble.n	800f66c <forward_cast+0x2060>
 800f61e:	4294      	cmp	r4, r2
 800f620:	f001 8625 	beq.w	801126e <forward_cast+0x3c62>
 800f624:	492a      	ldr	r1, [pc, #168]	; (800f6d0 <forward_cast+0x20c4>)
 800f626:	428c      	cmp	r4, r1
 800f628:	d139      	bne.n	800f69e <forward_cast+0x2092>
 800f62a:	7828      	ldrb	r0, [r5, #0]
 800f62c:	3800      	subs	r0, #0
 800f62e:	bf18      	it	ne
 800f630:	2001      	movne	r0, #1
 800f632:	f380 0010 	usat	r0, #16, r0
 800f636:	444d      	add	r5, r9
 800f638:	b280      	uxth	r0, r0
 800f63a:	9900      	ldr	r1, [sp, #0]
 800f63c:	45aa      	cmp	sl, r5
 800f63e:	6030      	str	r0, [r6, #0]
 800f640:	440e      	add	r6, r1
 800f642:	f67e a84b 	bls.w	800d6dc <forward_cast+0xd0>
 800f646:	491d      	ldr	r1, [pc, #116]	; (800f6bc <forward_cast+0x20b0>)
 800f648:	428c      	cmp	r4, r1
 800f64a:	f001 8622 	beq.w	8011292 <forward_cast+0x3c86>
 800f64e:	dde2      	ble.n	800f616 <forward_cast+0x200a>
 800f650:	4920      	ldr	r1, [pc, #128]	; (800f6d4 <forward_cast+0x20c8>)
 800f652:	428c      	cmp	r4, r1
 800f654:	f001 85fa 	beq.w	801124c <forward_cast+0x3c40>
 800f658:	dd13      	ble.n	800f682 <forward_cast+0x2076>
 800f65a:	4544      	cmp	r4, r8
 800f65c:	d11f      	bne.n	800f69e <forward_cast+0x2092>
 800f65e:	edd5 7a00 	vldr	s15, [r5]
 800f662:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f666:	ee17 0a90 	vmov	r0, s15
 800f66a:	e7e2      	b.n	800f632 <forward_cast+0x2026>
 800f66c:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800f670:	428c      	cmp	r4, r1
 800f672:	f001 85f9 	beq.w	8011268 <forward_cast+0x3c5c>
 800f676:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800f67a:	428c      	cmp	r4, r1
 800f67c:	d10f      	bne.n	800f69e <forward_cast+0x2092>
 800f67e:	8828      	ldrh	r0, [r5, #0]
 800f680:	e7d7      	b.n	800f632 <forward_cast+0x2026>
 800f682:	42bc      	cmp	r4, r7
 800f684:	f001 8601 	beq.w	801128a <forward_cast+0x3c7e>
 800f688:	455c      	cmp	r4, fp
 800f68a:	d108      	bne.n	800f69e <forward_cast+0x2092>
 800f68c:	edd5 7a00 	vldr	s15, [r5]
 800f690:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f694:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f698:	ee17 0a90 	vmov	r0, s15
 800f69c:	e7c9      	b.n	800f632 <forward_cast+0x2026>
 800f69e:	2000      	movs	r0, #0
 800f6a0:	e7c7      	b.n	800f632 <forward_cast+0x2026>
 800f6a2:	4555      	cmp	r5, sl
 800f6a4:	f4be a81a 	bcs.w	800d6dc <forward_cast+0xd0>
 800f6a8:	2300      	movs	r3, #0
 800f6aa:	4a0b      	ldr	r2, [pc, #44]	; (800f6d8 <forward_cast+0x20cc>)
 800f6ac:	4619      	mov	r1, r3
 800f6ae:	464b      	mov	r3, r9
 800f6b0:	46b9      	mov	r9, r7
 800f6b2:	4637      	mov	r7, r6
 800f6b4:	460e      	mov	r6, r1
 800f6b6:	e02a      	b.n	800f70e <forward_cast+0x2102>
 800f6b8:	00042040 	.word	0x00042040
 800f6bc:	00840440 	.word	0x00840440
 800f6c0:	01821040 	.word	0x01821040
 800f6c4:	00040840 	.word	0x00040840
 800f6c8:	00840840 	.word	0x00840840
 800f6cc:	00041040 	.word	0x00041040
 800f6d0:	00060440 	.word	0x00060440
 800f6d4:	00842040 	.word	0x00842040
 800f6d8:	00841040 	.word	0x00841040
 800f6dc:	4544      	cmp	r4, r8
 800f6de:	f001 80e2 	beq.w	80108a6 <forward_cast+0x329a>
 800f6e2:	dd27      	ble.n	800f734 <forward_cast+0x2128>
 800f6e4:	49a5      	ldr	r1, [pc, #660]	; (800f97c <forward_cast+0x2370>)
 800f6e6:	428c      	cmp	r4, r1
 800f6e8:	f001 8606 	beq.w	80112f8 <forward_cast+0x3cec>
 800f6ec:	f501 31f2 	add.w	r1, r1, #123904	; 0x1e400
 800f6f0:	428c      	cmp	r4, r1
 800f6f2:	d137      	bne.n	800f764 <forward_cast+0x2158>
 800f6f4:	7828      	ldrb	r0, [r5, #0]
 800f6f6:	3800      	subs	r0, #0
 800f6f8:	bf18      	it	ne
 800f6fa:	2001      	movne	r0, #1
 800f6fc:	f300 0007 	ssat	r0, #8, r0
 800f700:	441d      	add	r5, r3
 800f702:	9900      	ldr	r1, [sp, #0]
 800f704:	55b8      	strb	r0, [r7, r6]
 800f706:	45aa      	cmp	sl, r5
 800f708:	440e      	add	r6, r1
 800f70a:	f67d afe7 	bls.w	800d6dc <forward_cast+0xd0>
 800f70e:	454c      	cmp	r4, r9
 800f710:	f001 80c5 	beq.w	801089e <forward_cast+0x3292>
 800f714:	dde2      	ble.n	800f6dc <forward_cast+0x20d0>
 800f716:	499a      	ldr	r1, [pc, #616]	; (800f980 <forward_cast+0x2374>)
 800f718:	428c      	cmp	r4, r1
 800f71a:	f001 85db 	beq.w	80112d4 <forward_cast+0x3cc8>
 800f71e:	dd11      	ble.n	800f744 <forward_cast+0x2138>
 800f720:	4998      	ldr	r1, [pc, #608]	; (800f984 <forward_cast+0x2378>)
 800f722:	428c      	cmp	r4, r1
 800f724:	d11e      	bne.n	800f764 <forward_cast+0x2158>
 800f726:	edd5 7a00 	vldr	s15, [r5]
 800f72a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f72e:	ee17 0a90 	vmov	r0, s15
 800f732:	e7e3      	b.n	800f6fc <forward_cast+0x20f0>
 800f734:	455c      	cmp	r4, fp
 800f736:	f001 85dc 	beq.w	80112f2 <forward_cast+0x3ce6>
 800f73a:	4993      	ldr	r1, [pc, #588]	; (800f988 <forward_cast+0x237c>)
 800f73c:	428c      	cmp	r4, r1
 800f73e:	d111      	bne.n	800f764 <forward_cast+0x2158>
 800f740:	8828      	ldrh	r0, [r5, #0]
 800f742:	e7db      	b.n	800f6fc <forward_cast+0x20f0>
 800f744:	f5a1 51c0 	sub.w	r1, r1, #6144	; 0x1800
 800f748:	428c      	cmp	r4, r1
 800f74a:	f001 85e4 	beq.w	8011316 <forward_cast+0x3d0a>
 800f74e:	4294      	cmp	r4, r2
 800f750:	d108      	bne.n	800f764 <forward_cast+0x2158>
 800f752:	edd5 7a00 	vldr	s15, [r5]
 800f756:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f75a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f75e:	ee17 0a90 	vmov	r0, s15
 800f762:	e7cb      	b.n	800f6fc <forward_cast+0x20f0>
 800f764:	2000      	movs	r0, #0
 800f766:	e7c9      	b.n	800f6fc <forward_cast+0x20f0>
 800f768:	4555      	cmp	r5, sl
 800f76a:	f4bd afb7 	bcs.w	800d6dc <forward_cast+0xd0>
 800f76e:	461f      	mov	r7, r3
 800f770:	4621      	mov	r1, r4
 800f772:	4628      	mov	r0, r5
 800f774:	f7fd fed6 	bl	800d524 <_array_handle_get_as_float>
 800f778:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800f77c:	ee17 3a90 	vmov	r3, s15
 800f780:	f303 0307 	ssat	r3, #8, r3
 800f784:	444d      	add	r5, r9
 800f786:	b25b      	sxtb	r3, r3
 800f788:	45aa      	cmp	sl, r5
 800f78a:	6033      	str	r3, [r6, #0]
 800f78c:	443e      	add	r6, r7
 800f78e:	d8ef      	bhi.n	800f770 <forward_cast+0x2164>
 800f790:	f7fd bfa4 	b.w	800d6dc <forward_cast+0xd0>
 800f794:	4555      	cmp	r5, sl
 800f796:	f4bd afa1 	bcs.w	800d6dc <forward_cast+0xd0>
 800f79a:	2700      	movs	r7, #0
 800f79c:	f8df 81e4 	ldr.w	r8, [pc, #484]	; 800f984 <forward_cast+0x2378>
 800f7a0:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800f9a0 <forward_cast+0x2394>
 800f7a4:	4b79      	ldr	r3, [pc, #484]	; (800f98c <forward_cast+0x2380>)
 800f7a6:	4a7a      	ldr	r2, [pc, #488]	; (800f990 <forward_cast+0x2384>)
 800f7a8:	e016      	b.n	800f7d8 <forward_cast+0x21cc>
 800f7aa:	4294      	cmp	r4, r2
 800f7ac:	f000 87ff 	beq.w	80107ae <forward_cast+0x31a2>
 800f7b0:	dd26      	ble.n	800f800 <forward_cast+0x21f4>
 800f7b2:	4972      	ldr	r1, [pc, #456]	; (800f97c <forward_cast+0x2370>)
 800f7b4:	428c      	cmp	r4, r1
 800f7b6:	f001 8047 	beq.w	8010848 <forward_cast+0x323c>
 800f7ba:	f501 31f2 	add.w	r1, r1, #123904	; 0x1e400
 800f7be:	428c      	cmp	r4, r1
 800f7c0:	d137      	bne.n	800f832 <forward_cast+0x2226>
 800f7c2:	7829      	ldrb	r1, [r5, #0]
 800f7c4:	3900      	subs	r1, #0
 800f7c6:	bf18      	it	ne
 800f7c8:	2101      	movne	r1, #1
 800f7ca:	444d      	add	r5, r9
 800f7cc:	55f1      	strb	r1, [r6, r7]
 800f7ce:	9900      	ldr	r1, [sp, #0]
 800f7d0:	45aa      	cmp	sl, r5
 800f7d2:	440f      	add	r7, r1
 800f7d4:	f67d af82 	bls.w	800d6dc <forward_cast+0xd0>
 800f7d8:	496e      	ldr	r1, [pc, #440]	; (800f994 <forward_cast+0x2388>)
 800f7da:	428c      	cmp	r4, r1
 800f7dc:	d018      	beq.n	800f810 <forward_cast+0x2204>
 800f7de:	dde4      	ble.n	800f7aa <forward_cast+0x219e>
 800f7e0:	4967      	ldr	r1, [pc, #412]	; (800f980 <forward_cast+0x2374>)
 800f7e2:	428c      	cmp	r4, r1
 800f7e4:	f000 87ef 	beq.w	80107c6 <forward_cast+0x31ba>
 800f7e8:	dd14      	ble.n	800f814 <forward_cast+0x2208>
 800f7ea:	4544      	cmp	r4, r8
 800f7ec:	d121      	bne.n	800f832 <forward_cast+0x2226>
 800f7ee:	edd5 7a00 	vldr	s15, [r5]
 800f7f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f7f6:	edcd 7a01 	vstr	s15, [sp, #4]
 800f7fa:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800f7fe:	e7e4      	b.n	800f7ca <forward_cast+0x21be>
 800f800:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800f804:	428c      	cmp	r4, r1
 800f806:	d003      	beq.n	800f810 <forward_cast+0x2204>
 800f808:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800f80c:	428c      	cmp	r4, r1
 800f80e:	d110      	bne.n	800f832 <forward_cast+0x2226>
 800f810:	7829      	ldrb	r1, [r5, #0]
 800f812:	e7da      	b.n	800f7ca <forward_cast+0x21be>
 800f814:	455c      	cmp	r4, fp
 800f816:	d0fb      	beq.n	800f810 <forward_cast+0x2204>
 800f818:	429c      	cmp	r4, r3
 800f81a:	d10a      	bne.n	800f832 <forward_cast+0x2226>
 800f81c:	edd5 7a00 	vldr	s15, [r5]
 800f820:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f824:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f828:	edcd 7a01 	vstr	s15, [sp, #4]
 800f82c:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800f830:	e7cb      	b.n	800f7ca <forward_cast+0x21be>
 800f832:	2100      	movs	r1, #0
 800f834:	e7c9      	b.n	800f7ca <forward_cast+0x21be>
 800f836:	4555      	cmp	r5, sl
 800f838:	f4bd af50 	bcs.w	800d6dc <forward_cast+0xd0>
 800f83c:	4f51      	ldr	r7, [pc, #324]	; (800f984 <forward_cast+0x2378>)
 800f83e:	4b4f      	ldr	r3, [pc, #316]	; (800f97c <forward_cast+0x2370>)
 800f840:	4a55      	ldr	r2, [pc, #340]	; (800f998 <forward_cast+0x238c>)
 800f842:	e013      	b.n	800f86c <forward_cast+0x2260>
 800f844:	455c      	cmp	r4, fp
 800f846:	f000 87d2 	beq.w	80107ee <forward_cast+0x31e2>
 800f84a:	dd21      	ble.n	800f890 <forward_cast+0x2284>
 800f84c:	429c      	cmp	r4, r3
 800f84e:	f000 87e9 	beq.w	8010824 <forward_cast+0x3218>
 800f852:	4294      	cmp	r4, r2
 800f854:	d138      	bne.n	800f8c8 <forward_cast+0x22bc>
 800f856:	7828      	ldrb	r0, [r5, #0]
 800f858:	3800      	subs	r0, #0
 800f85a:	bf18      	it	ne
 800f85c:	2001      	movne	r0, #1
 800f85e:	444d      	add	r5, r9
 800f860:	9900      	ldr	r1, [sp, #0]
 800f862:	6030      	str	r0, [r6, #0]
 800f864:	45aa      	cmp	sl, r5
 800f866:	440e      	add	r6, r1
 800f868:	f67d af38 	bls.w	800d6dc <forward_cast+0xd0>
 800f86c:	4544      	cmp	r4, r8
 800f86e:	f000 87ba 	beq.w	80107e6 <forward_cast+0x31da>
 800f872:	dde7      	ble.n	800f844 <forward_cast+0x2238>
 800f874:	4942      	ldr	r1, [pc, #264]	; (800f980 <forward_cast+0x2374>)
 800f876:	428c      	cmp	r4, r1
 800f878:	f000 87c3 	beq.w	8010802 <forward_cast+0x31f6>
 800f87c:	dd12      	ble.n	800f8a4 <forward_cast+0x2298>
 800f87e:	42bc      	cmp	r4, r7
 800f880:	d122      	bne.n	800f8c8 <forward_cast+0x22bc>
 800f882:	edd5 7a00 	vldr	s15, [r5]
 800f886:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f88a:	ee17 0a90 	vmov	r0, s15
 800f88e:	e7e6      	b.n	800f85e <forward_cast+0x2252>
 800f890:	4942      	ldr	r1, [pc, #264]	; (800f99c <forward_cast+0x2390>)
 800f892:	428c      	cmp	r4, r1
 800f894:	f000 87c3 	beq.w	801081e <forward_cast+0x3212>
 800f898:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800f89c:	428c      	cmp	r4, r1
 800f89e:	d113      	bne.n	800f8c8 <forward_cast+0x22bc>
 800f8a0:	8828      	ldrh	r0, [r5, #0]
 800f8a2:	e7dc      	b.n	800f85e <forward_cast+0x2252>
 800f8a4:	f5a1 51c0 	sub.w	r1, r1, #6144	; 0x1800
 800f8a8:	428c      	cmp	r4, r1
 800f8aa:	f000 87c9 	beq.w	8010840 <forward_cast+0x3234>
 800f8ae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f8b2:	428c      	cmp	r4, r1
 800f8b4:	d108      	bne.n	800f8c8 <forward_cast+0x22bc>
 800f8b6:	edd5 7a00 	vldr	s15, [r5]
 800f8ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f8be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f8c2:	ee17 0a90 	vmov	r0, s15
 800f8c6:	e7ca      	b.n	800f85e <forward_cast+0x2252>
 800f8c8:	2000      	movs	r0, #0
 800f8ca:	e7c8      	b.n	800f85e <forward_cast+0x2252>
 800f8cc:	4555      	cmp	r5, sl
 800f8ce:	f4bd af05 	bcs.w	800d6dc <forward_cast+0xd0>
 800f8d2:	2700      	movs	r7, #0
 800f8d4:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 800f984 <forward_cast+0x2378>
 800f8d8:	f8df b0c4 	ldr.w	fp, [pc, #196]	; 800f9a0 <forward_cast+0x2394>
 800f8dc:	4b2b      	ldr	r3, [pc, #172]	; (800f98c <forward_cast+0x2380>)
 800f8de:	4a2c      	ldr	r2, [pc, #176]	; (800f990 <forward_cast+0x2384>)
 800f8e0:	e016      	b.n	800f910 <forward_cast+0x2304>
 800f8e2:	4294      	cmp	r4, r2
 800f8e4:	f000 8637 	beq.w	8010556 <forward_cast+0x2f4a>
 800f8e8:	dd26      	ble.n	800f938 <forward_cast+0x232c>
 800f8ea:	4924      	ldr	r1, [pc, #144]	; (800f97c <forward_cast+0x2370>)
 800f8ec:	428c      	cmp	r4, r1
 800f8ee:	f001 8526 	beq.w	801133e <forward_cast+0x3d32>
 800f8f2:	f501 31f2 	add.w	r1, r1, #123904	; 0x1e400
 800f8f6:	428c      	cmp	r4, r1
 800f8f8:	d137      	bne.n	800f96a <forward_cast+0x235e>
 800f8fa:	7829      	ldrb	r1, [r5, #0]
 800f8fc:	3900      	subs	r1, #0
 800f8fe:	bf18      	it	ne
 800f900:	2101      	movne	r1, #1
 800f902:	444d      	add	r5, r9
 800f904:	55f1      	strb	r1, [r6, r7]
 800f906:	9900      	ldr	r1, [sp, #0]
 800f908:	45aa      	cmp	sl, r5
 800f90a:	440f      	add	r7, r1
 800f90c:	f67d aee6 	bls.w	800d6dc <forward_cast+0xd0>
 800f910:	4920      	ldr	r1, [pc, #128]	; (800f994 <forward_cast+0x2388>)
 800f912:	428c      	cmp	r4, r1
 800f914:	d018      	beq.n	800f948 <forward_cast+0x233c>
 800f916:	dde4      	ble.n	800f8e2 <forward_cast+0x22d6>
 800f918:	4919      	ldr	r1, [pc, #100]	; (800f980 <forward_cast+0x2374>)
 800f91a:	428c      	cmp	r4, r1
 800f91c:	f001 84ff 	beq.w	801131e <forward_cast+0x3d12>
 800f920:	dd14      	ble.n	800f94c <forward_cast+0x2340>
 800f922:	4544      	cmp	r4, r8
 800f924:	d121      	bne.n	800f96a <forward_cast+0x235e>
 800f926:	edd5 7a00 	vldr	s15, [r5]
 800f92a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f92e:	edcd 7a01 	vstr	s15, [sp, #4]
 800f932:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800f936:	e7e4      	b.n	800f902 <forward_cast+0x22f6>
 800f938:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800f93c:	428c      	cmp	r4, r1
 800f93e:	d003      	beq.n	800f948 <forward_cast+0x233c>
 800f940:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800f944:	428c      	cmp	r4, r1
 800f946:	d110      	bne.n	800f96a <forward_cast+0x235e>
 800f948:	7829      	ldrb	r1, [r5, #0]
 800f94a:	e7da      	b.n	800f902 <forward_cast+0x22f6>
 800f94c:	455c      	cmp	r4, fp
 800f94e:	d0fb      	beq.n	800f948 <forward_cast+0x233c>
 800f950:	429c      	cmp	r4, r3
 800f952:	d10a      	bne.n	800f96a <forward_cast+0x235e>
 800f954:	edd5 7a00 	vldr	s15, [r5]
 800f958:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f95c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f960:	edcd 7a01 	vstr	s15, [sp, #4]
 800f964:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800f968:	e7cb      	b.n	800f902 <forward_cast+0x22f6>
 800f96a:	2100      	movs	r1, #0
 800f96c:	e7c9      	b.n	800f902 <forward_cast+0x22f6>
 800f96e:	4555      	cmp	r5, sl
 800f970:	f4bd aeb4 	bcs.w	800d6dc <forward_cast+0xd0>
 800f974:	4b01      	ldr	r3, [pc, #4]	; (800f97c <forward_cast+0x2370>)
 800f976:	4a08      	ldr	r2, [pc, #32]	; (800f998 <forward_cast+0x238c>)
 800f978:	e028      	b.n	800f9cc <forward_cast+0x23c0>
 800f97a:	bf00      	nop
 800f97c:	00042040 	.word	0x00042040
 800f980:	00842040 	.word	0x00842040
 800f984:	01821040 	.word	0x01821040
 800f988:	00040840 	.word	0x00040840
 800f98c:	00841040 	.word	0x00841040
 800f990:	00041040 	.word	0x00041040
 800f994:	00840440 	.word	0x00840440
 800f998:	00060440 	.word	0x00060440
 800f99c:	00040440 	.word	0x00040440
 800f9a0:	00840840 	.word	0x00840840
 800f9a4:	455c      	cmp	r4, fp
 800f9a6:	f000 8675 	beq.w	8010694 <forward_cast+0x3088>
 800f9aa:	dd22      	ble.n	800f9f2 <forward_cast+0x23e6>
 800f9ac:	429c      	cmp	r4, r3
 800f9ae:	f001 8522 	beq.w	80113f6 <forward_cast+0x3dea>
 800f9b2:	4294      	cmp	r4, r2
 800f9b4:	d137      	bne.n	800fa26 <forward_cast+0x241a>
 800f9b6:	7828      	ldrb	r0, [r5, #0]
 800f9b8:	3800      	subs	r0, #0
 800f9ba:	bf18      	it	ne
 800f9bc:	2001      	movne	r0, #1
 800f9be:	444d      	add	r5, r9
 800f9c0:	9900      	ldr	r1, [sp, #0]
 800f9c2:	6030      	str	r0, [r6, #0]
 800f9c4:	45aa      	cmp	sl, r5
 800f9c6:	440e      	add	r6, r1
 800f9c8:	f67d ae88 	bls.w	800d6dc <forward_cast+0xd0>
 800f9cc:	4544      	cmp	r4, r8
 800f9ce:	f000 85be 	beq.w	801054e <forward_cast+0x2f42>
 800f9d2:	dde7      	ble.n	800f9a4 <forward_cast+0x2398>
 800f9d4:	499a      	ldr	r1, [pc, #616]	; (800fc40 <forward_cast+0x2634>)
 800f9d6:	428c      	cmp	r4, r1
 800f9d8:	f001 84fc 	beq.w	80113d4 <forward_cast+0x3dc8>
 800f9dc:	dd13      	ble.n	800fa06 <forward_cast+0x23fa>
 800f9de:	4999      	ldr	r1, [pc, #612]	; (800fc44 <forward_cast+0x2638>)
 800f9e0:	428c      	cmp	r4, r1
 800f9e2:	d120      	bne.n	800fa26 <forward_cast+0x241a>
 800f9e4:	edd5 7a00 	vldr	s15, [r5]
 800f9e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f9ec:	ee17 0a90 	vmov	r0, s15
 800f9f0:	e7e5      	b.n	800f9be <forward_cast+0x23b2>
 800f9f2:	4995      	ldr	r1, [pc, #596]	; (800fc48 <forward_cast+0x263c>)
 800f9f4:	428c      	cmp	r4, r1
 800f9f6:	f001 84fb 	beq.w	80113f0 <forward_cast+0x3de4>
 800f9fa:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800f9fe:	428c      	cmp	r4, r1
 800fa00:	d111      	bne.n	800fa26 <forward_cast+0x241a>
 800fa02:	8828      	ldrh	r0, [r5, #0]
 800fa04:	e7db      	b.n	800f9be <forward_cast+0x23b2>
 800fa06:	f5a1 51c0 	sub.w	r1, r1, #6144	; 0x1800
 800fa0a:	428c      	cmp	r4, r1
 800fa0c:	f001 8501 	beq.w	8011412 <forward_cast+0x3e06>
 800fa10:	42bc      	cmp	r4, r7
 800fa12:	d108      	bne.n	800fa26 <forward_cast+0x241a>
 800fa14:	edd5 7a00 	vldr	s15, [r5]
 800fa18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fa1c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fa20:	ee17 0a90 	vmov	r0, s15
 800fa24:	e7cb      	b.n	800f9be <forward_cast+0x23b2>
 800fa26:	2000      	movs	r0, #0
 800fa28:	e7c9      	b.n	800f9be <forward_cast+0x23b2>
 800fa2a:	4555      	cmp	r5, sl
 800fa2c:	f4bd ae56 	bcs.w	800d6dc <forward_cast+0xd0>
 800fa30:	4b86      	ldr	r3, [pc, #536]	; (800fc4c <forward_cast+0x2640>)
 800fa32:	4a87      	ldr	r2, [pc, #540]	; (800fc50 <forward_cast+0x2644>)
 800fa34:	e013      	b.n	800fa5e <forward_cast+0x2452>
 800fa36:	42bc      	cmp	r4, r7
 800fa38:	f000 859d 	beq.w	8010576 <forward_cast+0x2f6a>
 800fa3c:	dd22      	ble.n	800fa84 <forward_cast+0x2478>
 800fa3e:	429c      	cmp	r4, r3
 800fa40:	f001 84fc 	beq.w	801143c <forward_cast+0x3e30>
 800fa44:	4294      	cmp	r4, r2
 800fa46:	d137      	bne.n	800fab8 <forward_cast+0x24ac>
 800fa48:	7828      	ldrb	r0, [r5, #0]
 800fa4a:	3800      	subs	r0, #0
 800fa4c:	bf18      	it	ne
 800fa4e:	2001      	movne	r0, #1
 800fa50:	444d      	add	r5, r9
 800fa52:	9900      	ldr	r1, [sp, #0]
 800fa54:	6030      	str	r0, [r6, #0]
 800fa56:	45aa      	cmp	sl, r5
 800fa58:	440e      	add	r6, r1
 800fa5a:	f67d ae3f 	bls.w	800d6dc <forward_cast+0xd0>
 800fa5e:	4544      	cmp	r4, r8
 800fa60:	f000 8585 	beq.w	801056e <forward_cast+0x2f62>
 800fa64:	dde7      	ble.n	800fa36 <forward_cast+0x242a>
 800fa66:	4976      	ldr	r1, [pc, #472]	; (800fc40 <forward_cast+0x2634>)
 800fa68:	428c      	cmp	r4, r1
 800fa6a:	f001 84d6 	beq.w	801141a <forward_cast+0x3e0e>
 800fa6e:	dd13      	ble.n	800fa98 <forward_cast+0x248c>
 800fa70:	4974      	ldr	r1, [pc, #464]	; (800fc44 <forward_cast+0x2638>)
 800fa72:	428c      	cmp	r4, r1
 800fa74:	d120      	bne.n	800fab8 <forward_cast+0x24ac>
 800fa76:	edd5 7a00 	vldr	s15, [r5]
 800fa7a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fa7e:	ee17 0a90 	vmov	r0, s15
 800fa82:	e7e5      	b.n	800fa50 <forward_cast+0x2444>
 800fa84:	4970      	ldr	r1, [pc, #448]	; (800fc48 <forward_cast+0x263c>)
 800fa86:	428c      	cmp	r4, r1
 800fa88:	f001 84d5 	beq.w	8011436 <forward_cast+0x3e2a>
 800fa8c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800fa90:	428c      	cmp	r4, r1
 800fa92:	d111      	bne.n	800fab8 <forward_cast+0x24ac>
 800fa94:	8828      	ldrh	r0, [r5, #0]
 800fa96:	e7db      	b.n	800fa50 <forward_cast+0x2444>
 800fa98:	f5a1 51c0 	sub.w	r1, r1, #6144	; 0x1800
 800fa9c:	428c      	cmp	r4, r1
 800fa9e:	f001 84db 	beq.w	8011458 <forward_cast+0x3e4c>
 800faa2:	455c      	cmp	r4, fp
 800faa4:	d108      	bne.n	800fab8 <forward_cast+0x24ac>
 800faa6:	edd5 7a00 	vldr	s15, [r5]
 800faaa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800faae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fab2:	ee17 0a90 	vmov	r0, s15
 800fab6:	e7cb      	b.n	800fa50 <forward_cast+0x2444>
 800fab8:	2000      	movs	r0, #0
 800faba:	e7c9      	b.n	800fa50 <forward_cast+0x2444>
 800fabc:	4555      	cmp	r5, sl
 800fabe:	f4bd ae0d 	bcs.w	800d6dc <forward_cast+0xd0>
 800fac2:	f8df 8180 	ldr.w	r8, [pc, #384]	; 800fc44 <forward_cast+0x2638>
 800fac6:	4b61      	ldr	r3, [pc, #388]	; (800fc4c <forward_cast+0x2640>)
 800fac8:	4a61      	ldr	r2, [pc, #388]	; (800fc50 <forward_cast+0x2644>)
 800faca:	e017      	b.n	800fafc <forward_cast+0x24f0>
 800facc:	4961      	ldr	r1, [pc, #388]	; (800fc54 <forward_cast+0x2648>)
 800face:	428c      	cmp	r4, r1
 800fad0:	f000 850d 	beq.w	80104ee <forward_cast+0x2ee2>
 800fad4:	dd24      	ble.n	800fb20 <forward_cast+0x2514>
 800fad6:	429c      	cmp	r4, r3
 800fad8:	f000 84f7 	beq.w	80104ca <forward_cast+0x2ebe>
 800fadc:	4294      	cmp	r4, r2
 800fade:	d13a      	bne.n	800fb56 <forward_cast+0x254a>
 800fae0:	7828      	ldrb	r0, [r5, #0]
 800fae2:	3800      	subs	r0, #0
 800fae4:	bf18      	it	ne
 800fae6:	2001      	movne	r0, #1
 800fae8:	f300 0007 	ssat	r0, #8, r0
 800faec:	444d      	add	r5, r9
 800faee:	b240      	sxtb	r0, r0
 800faf0:	9900      	ldr	r1, [sp, #0]
 800faf2:	45aa      	cmp	sl, r5
 800faf4:	6030      	str	r0, [r6, #0]
 800faf6:	440e      	add	r6, r1
 800faf8:	f67d adf0 	bls.w	800d6dc <forward_cast+0xd0>
 800fafc:	42bc      	cmp	r4, r7
 800fafe:	f000 84c0 	beq.w	8010482 <forward_cast+0x2e76>
 800fb02:	dde3      	ble.n	800facc <forward_cast+0x24c0>
 800fb04:	494e      	ldr	r1, [pc, #312]	; (800fc40 <forward_cast+0x2634>)
 800fb06:	428c      	cmp	r4, r1
 800fb08:	f000 84ce 	beq.w	80104a8 <forward_cast+0x2e9c>
 800fb0c:	dd13      	ble.n	800fb36 <forward_cast+0x252a>
 800fb0e:	4544      	cmp	r4, r8
 800fb10:	d121      	bne.n	800fb56 <forward_cast+0x254a>
 800fb12:	edd5 7a00 	vldr	s15, [r5]
 800fb16:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fb1a:	ee17 0a90 	vmov	r0, s15
 800fb1e:	e7e3      	b.n	800fae8 <forward_cast+0x24dc>
 800fb20:	f5a1 6140 	sub.w	r1, r1, #3072	; 0xc00
 800fb24:	428c      	cmp	r4, r1
 800fb26:	f000 84cd 	beq.w	80104c4 <forward_cast+0x2eb8>
 800fb2a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800fb2e:	428c      	cmp	r4, r1
 800fb30:	d111      	bne.n	800fb56 <forward_cast+0x254a>
 800fb32:	8828      	ldrh	r0, [r5, #0]
 800fb34:	e7d8      	b.n	800fae8 <forward_cast+0x24dc>
 800fb36:	f5a1 51c0 	sub.w	r1, r1, #6144	; 0x1800
 800fb3a:	428c      	cmp	r4, r1
 800fb3c:	f000 84d3 	beq.w	80104e6 <forward_cast+0x2eda>
 800fb40:	455c      	cmp	r4, fp
 800fb42:	d108      	bne.n	800fb56 <forward_cast+0x254a>
 800fb44:	edd5 7a00 	vldr	s15, [r5]
 800fb48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fb4c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fb50:	ee17 0a90 	vmov	r0, s15
 800fb54:	e7c8      	b.n	800fae8 <forward_cast+0x24dc>
 800fb56:	2000      	movs	r0, #0
 800fb58:	e7c6      	b.n	800fae8 <forward_cast+0x24dc>
 800fb5a:	4555      	cmp	r5, sl
 800fb5c:	f4bd adbe 	bcs.w	800d6dc <forward_cast+0xd0>
 800fb60:	9f00      	ldr	r7, [sp, #0]
 800fb62:	4628      	mov	r0, r5
 800fb64:	4621      	mov	r1, r4
 800fb66:	f7fd fcdd 	bl	800d524 <_array_handle_get_as_float>
 800fb6a:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800fb6e:	444d      	add	r5, r9
 800fb70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb74:	bf14      	ite	ne
 800fb76:	2301      	movne	r3, #1
 800fb78:	2300      	moveq	r3, #0
 800fb7a:	45aa      	cmp	sl, r5
 800fb7c:	7033      	strb	r3, [r6, #0]
 800fb7e:	443e      	add	r6, r7
 800fb80:	d8ef      	bhi.n	800fb62 <forward_cast+0x2556>
 800fb82:	f7fd bdab 	b.w	800d6dc <forward_cast+0xd0>
 800fb86:	4555      	cmp	r5, sl
 800fb88:	f4bd ada8 	bcs.w	800d6dc <forward_cast+0xd0>
 800fb8c:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 800fc44 <forward_cast+0x2638>
 800fb90:	4f31      	ldr	r7, [pc, #196]	; (800fc58 <forward_cast+0x264c>)
 800fb92:	f8df b0cc 	ldr.w	fp, [pc, #204]	; 800fc60 <forward_cast+0x2654>
 800fb96:	4b2f      	ldr	r3, [pc, #188]	; (800fc54 <forward_cast+0x2648>)
 800fb98:	4a2c      	ldr	r2, [pc, #176]	; (800fc4c <forward_cast+0x2640>)
 800fb9a:	e017      	b.n	800fbcc <forward_cast+0x25c0>
 800fb9c:	429c      	cmp	r4, r3
 800fb9e:	f000 829d 	beq.w	80100dc <forward_cast+0x2ad0>
 800fba2:	dd26      	ble.n	800fbf2 <forward_cast+0x25e6>
 800fba4:	4294      	cmp	r4, r2
 800fba6:	f000 82b9 	beq.w	801011c <forward_cast+0x2b10>
 800fbaa:	4929      	ldr	r1, [pc, #164]	; (800fc50 <forward_cast+0x2644>)
 800fbac:	428c      	cmp	r4, r1
 800fbae:	d139      	bne.n	800fc24 <forward_cast+0x2618>
 800fbb0:	7828      	ldrb	r0, [r5, #0]
 800fbb2:	3800      	subs	r0, #0
 800fbb4:	bf18      	it	ne
 800fbb6:	2001      	movne	r0, #1
 800fbb8:	f380 0008 	usat	r0, #8, r0
 800fbbc:	444d      	add	r5, r9
 800fbbe:	b2c0      	uxtb	r0, r0
 800fbc0:	9900      	ldr	r1, [sp, #0]
 800fbc2:	45aa      	cmp	sl, r5
 800fbc4:	6030      	str	r0, [r6, #0]
 800fbc6:	440e      	add	r6, r1
 800fbc8:	f67d ad88 	bls.w	800d6dc <forward_cast+0xd0>
 800fbcc:	4923      	ldr	r1, [pc, #140]	; (800fc5c <forward_cast+0x2650>)
 800fbce:	428c      	cmp	r4, r1
 800fbd0:	f000 82b4 	beq.w	801013c <forward_cast+0x2b30>
 800fbd4:	dde2      	ble.n	800fb9c <forward_cast+0x2590>
 800fbd6:	491a      	ldr	r1, [pc, #104]	; (800fc40 <forward_cast+0x2634>)
 800fbd8:	428c      	cmp	r4, r1
 800fbda:	f000 8290 	beq.w	80100fe <forward_cast+0x2af2>
 800fbde:	dd13      	ble.n	800fc08 <forward_cast+0x25fc>
 800fbe0:	4544      	cmp	r4, r8
 800fbe2:	d11f      	bne.n	800fc24 <forward_cast+0x2618>
 800fbe4:	edd5 7a00 	vldr	s15, [r5]
 800fbe8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fbec:	ee17 0a90 	vmov	r0, s15
 800fbf0:	e7e2      	b.n	800fbb8 <forward_cast+0x25ac>
 800fbf2:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800fbf6:	428c      	cmp	r4, r1
 800fbf8:	f000 828e 	beq.w	8010118 <forward_cast+0x2b0c>
 800fbfc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800fc00:	428c      	cmp	r4, r1
 800fc02:	d10f      	bne.n	800fc24 <forward_cast+0x2618>
 800fc04:	8828      	ldrh	r0, [r5, #0]
 800fc06:	e7d7      	b.n	800fbb8 <forward_cast+0x25ac>
 800fc08:	42bc      	cmp	r4, r7
 800fc0a:	f000 8294 	beq.w	8010136 <forward_cast+0x2b2a>
 800fc0e:	455c      	cmp	r4, fp
 800fc10:	d108      	bne.n	800fc24 <forward_cast+0x2618>
 800fc12:	edd5 7a00 	vldr	s15, [r5]
 800fc16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fc1a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fc1e:	ee17 0a90 	vmov	r0, s15
 800fc22:	e7c9      	b.n	800fbb8 <forward_cast+0x25ac>
 800fc24:	2000      	movs	r0, #0
 800fc26:	e7c7      	b.n	800fbb8 <forward_cast+0x25ac>
 800fc28:	4555      	cmp	r5, sl
 800fc2a:	f4bd ad57 	bcs.w	800d6dc <forward_cast+0xd0>
 800fc2e:	f8df 8014 	ldr.w	r8, [pc, #20]	; 800fc44 <forward_cast+0x2638>
 800fc32:	4f09      	ldr	r7, [pc, #36]	; (800fc58 <forward_cast+0x264c>)
 800fc34:	f8df b028 	ldr.w	fp, [pc, #40]	; 800fc60 <forward_cast+0x2654>
 800fc38:	4b06      	ldr	r3, [pc, #24]	; (800fc54 <forward_cast+0x2648>)
 800fc3a:	4a04      	ldr	r2, [pc, #16]	; (800fc4c <forward_cast+0x2640>)
 800fc3c:	e027      	b.n	800fc8e <forward_cast+0x2682>
 800fc3e:	bf00      	nop
 800fc40:	00842040 	.word	0x00842040
 800fc44:	01821040 	.word	0x01821040
 800fc48:	00040440 	.word	0x00040440
 800fc4c:	00042040 	.word	0x00042040
 800fc50:	00060440 	.word	0x00060440
 800fc54:	00041040 	.word	0x00041040
 800fc58:	00840840 	.word	0x00840840
 800fc5c:	00840440 	.word	0x00840440
 800fc60:	00841040 	.word	0x00841040
 800fc64:	429c      	cmp	r4, r3
 800fc66:	f000 8298 	beq.w	801019a <forward_cast+0x2b8e>
 800fc6a:	dd26      	ble.n	800fcba <forward_cast+0x26ae>
 800fc6c:	4294      	cmp	r4, r2
 800fc6e:	f000 82a0 	beq.w	80101b2 <forward_cast+0x2ba6>
 800fc72:	499c      	ldr	r1, [pc, #624]	; (800fee4 <forward_cast+0x28d8>)
 800fc74:	428c      	cmp	r4, r1
 800fc76:	d13e      	bne.n	800fcf6 <forward_cast+0x26ea>
 800fc78:	7829      	ldrb	r1, [r5, #0]
 800fc7a:	3900      	subs	r1, #0
 800fc7c:	bf18      	it	ne
 800fc7e:	2101      	movne	r1, #1
 800fc80:	444d      	add	r5, r9
 800fc82:	6031      	str	r1, [r6, #0]
 800fc84:	9900      	ldr	r1, [sp, #0]
 800fc86:	45aa      	cmp	sl, r5
 800fc88:	440e      	add	r6, r1
 800fc8a:	f67d ad27 	bls.w	800d6dc <forward_cast+0xd0>
 800fc8e:	4996      	ldr	r1, [pc, #600]	; (800fee8 <forward_cast+0x28dc>)
 800fc90:	428c      	cmp	r4, r1
 800fc92:	f000 827c 	beq.w	801018e <forward_cast+0x2b82>
 800fc96:	dde5      	ble.n	800fc64 <forward_cast+0x2658>
 800fc98:	4994      	ldr	r1, [pc, #592]	; (800feec <forward_cast+0x28e0>)
 800fc9a:	428c      	cmp	r4, r1
 800fc9c:	f000 8206 	beq.w	80100ac <forward_cast+0x2aa0>
 800fca0:	dd18      	ble.n	800fcd4 <forward_cast+0x26c8>
 800fca2:	4544      	cmp	r4, r8
 800fca4:	d127      	bne.n	800fcf6 <forward_cast+0x26ea>
 800fca6:	edd5 7a00 	vldr	s15, [r5]
 800fcaa:	eef5 7a40 	vcmp.f32	s15, #0.0
 800fcae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fcb2:	bf14      	ite	ne
 800fcb4:	2101      	movne	r1, #1
 800fcb6:	2100      	moveq	r1, #0
 800fcb8:	e7e2      	b.n	800fc80 <forward_cast+0x2674>
 800fcba:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800fcbe:	428c      	cmp	r4, r1
 800fcc0:	d0da      	beq.n	800fc78 <forward_cast+0x266c>
 800fcc2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800fcc6:	428c      	cmp	r4, r1
 800fcc8:	d115      	bne.n	800fcf6 <forward_cast+0x26ea>
 800fcca:	8829      	ldrh	r1, [r5, #0]
 800fccc:	3900      	subs	r1, #0
 800fcce:	bf18      	it	ne
 800fcd0:	2101      	movne	r1, #1
 800fcd2:	e7d5      	b.n	800fc80 <forward_cast+0x2674>
 800fcd4:	42bc      	cmp	r4, r7
 800fcd6:	f000 827c 	beq.w	80101d2 <forward_cast+0x2bc6>
 800fcda:	455c      	cmp	r4, fp
 800fcdc:	d10b      	bne.n	800fcf6 <forward_cast+0x26ea>
 800fcde:	edd5 7a00 	vldr	s15, [r5]
 800fce2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fce6:	eef5 7a40 	vcmp.f32	s15, #0.0
 800fcea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fcee:	bf14      	ite	ne
 800fcf0:	2101      	movne	r1, #1
 800fcf2:	2100      	moveq	r1, #0
 800fcf4:	e7c4      	b.n	800fc80 <forward_cast+0x2674>
 800fcf6:	2100      	movs	r1, #0
 800fcf8:	e7c2      	b.n	800fc80 <forward_cast+0x2674>
 800fcfa:	4555      	cmp	r5, sl
 800fcfc:	f4bd acee 	bcs.w	800d6dc <forward_cast+0xd0>
 800fd00:	4b7b      	ldr	r3, [pc, #492]	; (800fef0 <forward_cast+0x28e4>)
 800fd02:	4a78      	ldr	r2, [pc, #480]	; (800fee4 <forward_cast+0x28d8>)
 800fd04:	e014      	b.n	800fd30 <forward_cast+0x2724>
 800fd06:	497b      	ldr	r1, [pc, #492]	; (800fef4 <forward_cast+0x28e8>)
 800fd08:	428c      	cmp	r4, r1
 800fd0a:	f000 832d 	beq.w	8010368 <forward_cast+0x2d5c>
 800fd0e:	dd21      	ble.n	800fd54 <forward_cast+0x2748>
 800fd10:	429c      	cmp	r4, r3
 800fd12:	f000 819c 	beq.w	801004e <forward_cast+0x2a42>
 800fd16:	4294      	cmp	r4, r2
 800fd18:	d137      	bne.n	800fd8a <forward_cast+0x277e>
 800fd1a:	7828      	ldrb	r0, [r5, #0]
 800fd1c:	3800      	subs	r0, #0
 800fd1e:	bf18      	it	ne
 800fd20:	2001      	movne	r0, #1
 800fd22:	444d      	add	r5, r9
 800fd24:	9900      	ldr	r1, [sp, #0]
 800fd26:	6030      	str	r0, [r6, #0]
 800fd28:	45aa      	cmp	sl, r5
 800fd2a:	440e      	add	r6, r1
 800fd2c:	f67d acd6 	bls.w	800d6dc <forward_cast+0xd0>
 800fd30:	4544      	cmp	r4, r8
 800fd32:	f000 8316 	beq.w	8010362 <forward_cast+0x2d56>
 800fd36:	dde6      	ble.n	800fd06 <forward_cast+0x26fa>
 800fd38:	496c      	ldr	r1, [pc, #432]	; (800feec <forward_cast+0x28e0>)
 800fd3a:	428c      	cmp	r4, r1
 800fd3c:	f000 8178 	beq.w	8010030 <forward_cast+0x2a24>
 800fd40:	dd13      	ble.n	800fd6a <forward_cast+0x275e>
 800fd42:	42bc      	cmp	r4, r7
 800fd44:	d121      	bne.n	800fd8a <forward_cast+0x277e>
 800fd46:	edd5 7a00 	vldr	s15, [r5]
 800fd4a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fd4e:	ee17 0a90 	vmov	r0, s15
 800fd52:	e7e6      	b.n	800fd22 <forward_cast+0x2716>
 800fd54:	f5a1 6140 	sub.w	r1, r1, #3072	; 0xc00
 800fd58:	428c      	cmp	r4, r1
 800fd5a:	f000 8176 	beq.w	801004a <forward_cast+0x2a3e>
 800fd5e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800fd62:	428c      	cmp	r4, r1
 800fd64:	d111      	bne.n	800fd8a <forward_cast+0x277e>
 800fd66:	8828      	ldrh	r0, [r5, #0]
 800fd68:	e7db      	b.n	800fd22 <forward_cast+0x2716>
 800fd6a:	f5a1 51c0 	sub.w	r1, r1, #6144	; 0x1800
 800fd6e:	428c      	cmp	r4, r1
 800fd70:	f000 817a 	beq.w	8010068 <forward_cast+0x2a5c>
 800fd74:	455c      	cmp	r4, fp
 800fd76:	d108      	bne.n	800fd8a <forward_cast+0x277e>
 800fd78:	edd5 7a00 	vldr	s15, [r5]
 800fd7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fd80:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fd84:	ee17 0a90 	vmov	r0, s15
 800fd88:	e7cb      	b.n	800fd22 <forward_cast+0x2716>
 800fd8a:	2000      	movs	r0, #0
 800fd8c:	e7c9      	b.n	800fd22 <forward_cast+0x2716>
 800fd8e:	4555      	cmp	r5, sl
 800fd90:	f4bd aca4 	bcs.w	800d6dc <forward_cast+0xd0>
 800fd94:	f8df 8168 	ldr.w	r8, [pc, #360]	; 800ff00 <forward_cast+0x28f4>
 800fd98:	4f57      	ldr	r7, [pc, #348]	; (800fef8 <forward_cast+0x28ec>)
 800fd9a:	f8df b160 	ldr.w	fp, [pc, #352]	; 800fefc <forward_cast+0x28f0>
 800fd9e:	4b55      	ldr	r3, [pc, #340]	; (800fef4 <forward_cast+0x28e8>)
 800fda0:	4a53      	ldr	r2, [pc, #332]	; (800fef0 <forward_cast+0x28e4>)
 800fda2:	e017      	b.n	800fdd4 <forward_cast+0x27c8>
 800fda4:	429c      	cmp	r4, r3
 800fda6:	f000 82cf 	beq.w	8010348 <forward_cast+0x2d3c>
 800fdaa:	dd26      	ble.n	800fdfa <forward_cast+0x27ee>
 800fdac:	4294      	cmp	r4, r2
 800fdae:	f000 816d 	beq.w	801008c <forward_cast+0x2a80>
 800fdb2:	494c      	ldr	r1, [pc, #304]	; (800fee4 <forward_cast+0x28d8>)
 800fdb4:	428c      	cmp	r4, r1
 800fdb6:	d139      	bne.n	800fe2c <forward_cast+0x2820>
 800fdb8:	7828      	ldrb	r0, [r5, #0]
 800fdba:	3800      	subs	r0, #0
 800fdbc:	bf18      	it	ne
 800fdbe:	2001      	movne	r0, #1
 800fdc0:	f300 000f 	ssat	r0, #16, r0
 800fdc4:	444d      	add	r5, r9
 800fdc6:	b200      	sxth	r0, r0
 800fdc8:	9900      	ldr	r1, [sp, #0]
 800fdca:	45aa      	cmp	sl, r5
 800fdcc:	6030      	str	r0, [r6, #0]
 800fdce:	440e      	add	r6, r1
 800fdd0:	f67d ac84 	bls.w	800d6dc <forward_cast+0xd0>
 800fdd4:	4944      	ldr	r1, [pc, #272]	; (800fee8 <forward_cast+0x28dc>)
 800fdd6:	428c      	cmp	r4, r1
 800fdd8:	f000 8101 	beq.w	800ffde <forward_cast+0x29d2>
 800fddc:	dde2      	ble.n	800fda4 <forward_cast+0x2798>
 800fdde:	4943      	ldr	r1, [pc, #268]	; (800feec <forward_cast+0x28e0>)
 800fde0:	428c      	cmp	r4, r1
 800fde2:	f000 8144 	beq.w	801006e <forward_cast+0x2a62>
 800fde6:	dd13      	ble.n	800fe10 <forward_cast+0x2804>
 800fde8:	4544      	cmp	r4, r8
 800fdea:	d11f      	bne.n	800fe2c <forward_cast+0x2820>
 800fdec:	edd5 7a00 	vldr	s15, [r5]
 800fdf0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fdf4:	ee17 0a90 	vmov	r0, s15
 800fdf8:	e7e2      	b.n	800fdc0 <forward_cast+0x27b4>
 800fdfa:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800fdfe:	428c      	cmp	r4, r1
 800fe00:	f000 8142 	beq.w	8010088 <forward_cast+0x2a7c>
 800fe04:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800fe08:	428c      	cmp	r4, r1
 800fe0a:	d10f      	bne.n	800fe2c <forward_cast+0x2820>
 800fe0c:	8828      	ldrh	r0, [r5, #0]
 800fe0e:	e7d7      	b.n	800fdc0 <forward_cast+0x27b4>
 800fe10:	42bc      	cmp	r4, r7
 800fe12:	f000 8148 	beq.w	80100a6 <forward_cast+0x2a9a>
 800fe16:	455c      	cmp	r4, fp
 800fe18:	d108      	bne.n	800fe2c <forward_cast+0x2820>
 800fe1a:	edd5 7a00 	vldr	s15, [r5]
 800fe1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fe22:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fe26:	ee17 0a90 	vmov	r0, s15
 800fe2a:	e7c9      	b.n	800fdc0 <forward_cast+0x27b4>
 800fe2c:	2000      	movs	r0, #0
 800fe2e:	e7c7      	b.n	800fdc0 <forward_cast+0x27b4>
 800fe30:	4555      	cmp	r5, sl
 800fe32:	f4bd ac53 	bcs.w	800d6dc <forward_cast+0xd0>
 800fe36:	2700      	movs	r7, #0
 800fe38:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 800ff00 <forward_cast+0x28f4>
 800fe3c:	f8df b0b8 	ldr.w	fp, [pc, #184]	; 800fef8 <forward_cast+0x28ec>
 800fe40:	4b2e      	ldr	r3, [pc, #184]	; (800fefc <forward_cast+0x28f0>)
 800fe42:	4a2c      	ldr	r2, [pc, #176]	; (800fef4 <forward_cast+0x28e8>)
 800fe44:	e016      	b.n	800fe74 <forward_cast+0x2868>
 800fe46:	4294      	cmp	r4, r2
 800fe48:	f000 80d8 	beq.w	800fffc <forward_cast+0x29f0>
 800fe4c:	dd26      	ble.n	800fe9c <forward_cast+0x2890>
 800fe4e:	4928      	ldr	r1, [pc, #160]	; (800fef0 <forward_cast+0x28e4>)
 800fe50:	428c      	cmp	r4, r1
 800fe52:	f000 81c4 	beq.w	80101de <forward_cast+0x2bd2>
 800fe56:	f501 31f2 	add.w	r1, r1, #123904	; 0x1e400
 800fe5a:	428c      	cmp	r4, r1
 800fe5c:	d137      	bne.n	800fece <forward_cast+0x28c2>
 800fe5e:	7829      	ldrb	r1, [r5, #0]
 800fe60:	3900      	subs	r1, #0
 800fe62:	bf18      	it	ne
 800fe64:	2101      	movne	r1, #1
 800fe66:	444d      	add	r5, r9
 800fe68:	55f1      	strb	r1, [r6, r7]
 800fe6a:	9900      	ldr	r1, [sp, #0]
 800fe6c:	45aa      	cmp	sl, r5
 800fe6e:	440f      	add	r7, r1
 800fe70:	f67d ac34 	bls.w	800d6dc <forward_cast+0xd0>
 800fe74:	491c      	ldr	r1, [pc, #112]	; (800fee8 <forward_cast+0x28dc>)
 800fe76:	428c      	cmp	r4, r1
 800fe78:	d018      	beq.n	800feac <forward_cast+0x28a0>
 800fe7a:	dde4      	ble.n	800fe46 <forward_cast+0x283a>
 800fe7c:	491b      	ldr	r1, [pc, #108]	; (800feec <forward_cast+0x28e0>)
 800fe7e:	428c      	cmp	r4, r1
 800fe80:	f000 80c7 	beq.w	8010012 <forward_cast+0x2a06>
 800fe84:	dd14      	ble.n	800feb0 <forward_cast+0x28a4>
 800fe86:	4544      	cmp	r4, r8
 800fe88:	d121      	bne.n	800fece <forward_cast+0x28c2>
 800fe8a:	edd5 7a00 	vldr	s15, [r5]
 800fe8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fe92:	edcd 7a01 	vstr	s15, [sp, #4]
 800fe96:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800fe9a:	e7e4      	b.n	800fe66 <forward_cast+0x285a>
 800fe9c:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800fea0:	428c      	cmp	r4, r1
 800fea2:	d003      	beq.n	800feac <forward_cast+0x28a0>
 800fea4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800fea8:	428c      	cmp	r4, r1
 800feaa:	d110      	bne.n	800fece <forward_cast+0x28c2>
 800feac:	7829      	ldrb	r1, [r5, #0]
 800feae:	e7da      	b.n	800fe66 <forward_cast+0x285a>
 800feb0:	455c      	cmp	r4, fp
 800feb2:	d0fb      	beq.n	800feac <forward_cast+0x28a0>
 800feb4:	429c      	cmp	r4, r3
 800feb6:	d10a      	bne.n	800fece <forward_cast+0x28c2>
 800feb8:	edd5 7a00 	vldr	s15, [r5]
 800febc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fec0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fec4:	edcd 7a01 	vstr	s15, [sp, #4]
 800fec8:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800fecc:	e7cb      	b.n	800fe66 <forward_cast+0x285a>
 800fece:	2100      	movs	r1, #0
 800fed0:	e7c9      	b.n	800fe66 <forward_cast+0x285a>
 800fed2:	4555      	cmp	r5, sl
 800fed4:	f4bd ac02 	bcs.w	800d6dc <forward_cast+0xd0>
 800fed8:	f04f 0800 	mov.w	r8, #0
 800fedc:	4b05      	ldr	r3, [pc, #20]	; (800fef4 <forward_cast+0x28e8>)
 800fede:	4a04      	ldr	r2, [pc, #16]	; (800fef0 <forward_cast+0x28e4>)
 800fee0:	e024      	b.n	800ff2c <forward_cast+0x2920>
 800fee2:	bf00      	nop
 800fee4:	00060440 	.word	0x00060440
 800fee8:	00840440 	.word	0x00840440
 800feec:	00842040 	.word	0x00842040
 800fef0:	00042040 	.word	0x00042040
 800fef4:	00041040 	.word	0x00041040
 800fef8:	00840840 	.word	0x00840840
 800fefc:	00841040 	.word	0x00841040
 800ff00:	01821040 	.word	0x01821040
 800ff04:	429c      	cmp	r4, r3
 800ff06:	d050      	beq.n	800ffaa <forward_cast+0x299e>
 800ff08:	dd23      	ble.n	800ff52 <forward_cast+0x2946>
 800ff0a:	4294      	cmp	r4, r2
 800ff0c:	d03e      	beq.n	800ff8c <forward_cast+0x2980>
 800ff0e:	49c7      	ldr	r1, [pc, #796]	; (801022c <forward_cast+0x2c20>)
 800ff10:	428c      	cmp	r4, r1
 800ff12:	d139      	bne.n	800ff88 <forward_cast+0x297c>
 800ff14:	7829      	ldrb	r1, [r5, #0]
 800ff16:	3900      	subs	r1, #0
 800ff18:	bf18      	it	ne
 800ff1a:	2101      	movne	r1, #1
 800ff1c:	444d      	add	r5, r9
 800ff1e:	f806 1008 	strb.w	r1, [r6, r8]
 800ff22:	9900      	ldr	r1, [sp, #0]
 800ff24:	45aa      	cmp	sl, r5
 800ff26:	4488      	add	r8, r1
 800ff28:	f67d abd8 	bls.w	800d6dc <forward_cast+0xd0>
 800ff2c:	455c      	cmp	r4, fp
 800ff2e:	d017      	beq.n	800ff60 <forward_cast+0x2954>
 800ff30:	dde8      	ble.n	800ff04 <forward_cast+0x28f8>
 800ff32:	49bf      	ldr	r1, [pc, #764]	; (8010230 <forward_cast+0x2c24>)
 800ff34:	428c      	cmp	r4, r1
 800ff36:	d043      	beq.n	800ffc0 <forward_cast+0x29b4>
 800ff38:	dd15      	ble.n	800ff66 <forward_cast+0x295a>
 800ff3a:	49be      	ldr	r1, [pc, #760]	; (8010234 <forward_cast+0x2c28>)
 800ff3c:	428c      	cmp	r4, r1
 800ff3e:	d123      	bne.n	800ff88 <forward_cast+0x297c>
 800ff40:	edd5 7a00 	vldr	s15, [r5]
 800ff44:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ff48:	edcd 7a01 	vstr	s15, [sp, #4]
 800ff4c:	f99d 1004 	ldrsb.w	r1, [sp, #4]
 800ff50:	e7e4      	b.n	800ff1c <forward_cast+0x2910>
 800ff52:	49b9      	ldr	r1, [pc, #740]	; (8010238 <forward_cast+0x2c2c>)
 800ff54:	428c      	cmp	r4, r1
 800ff56:	d003      	beq.n	800ff60 <forward_cast+0x2954>
 800ff58:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800ff5c:	428c      	cmp	r4, r1
 800ff5e:	d113      	bne.n	800ff88 <forward_cast+0x297c>
 800ff60:	f995 1000 	ldrsb.w	r1, [r5]
 800ff64:	e7da      	b.n	800ff1c <forward_cast+0x2910>
 800ff66:	f5a1 51c0 	sub.w	r1, r1, #6144	; 0x1800
 800ff6a:	428c      	cmp	r4, r1
 800ff6c:	d0f8      	beq.n	800ff60 <forward_cast+0x2954>
 800ff6e:	42bc      	cmp	r4, r7
 800ff70:	d10a      	bne.n	800ff88 <forward_cast+0x297c>
 800ff72:	edd5 7a00 	vldr	s15, [r5]
 800ff76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ff7a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ff7e:	edcd 7a01 	vstr	s15, [sp, #4]
 800ff82:	f99d 1004 	ldrsb.w	r1, [sp, #4]
 800ff86:	e7c9      	b.n	800ff1c <forward_cast+0x2910>
 800ff88:	2100      	movs	r1, #0
 800ff8a:	e7c7      	b.n	800ff1c <forward_cast+0x2910>
 800ff8c:	e9d5 0100 	ldrd	r0, r1, [r5]
 800ff90:	f7f0 fac6 	bl	8000520 <__aeabi_ul2f>
 800ff94:	ee07 0a90 	vmov	s15, r0
 800ff98:	4aa8      	ldr	r2, [pc, #672]	; (801023c <forward_cast+0x2c30>)
 800ff9a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ff9e:	4ba8      	ldr	r3, [pc, #672]	; (8010240 <forward_cast+0x2c34>)
 800ffa0:	edcd 7a01 	vstr	s15, [sp, #4]
 800ffa4:	f99d 1004 	ldrsb.w	r1, [sp, #4]
 800ffa8:	e7b8      	b.n	800ff1c <forward_cast+0x2910>
 800ffaa:	edd5 7a00 	vldr	s15, [r5]
 800ffae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ffb2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ffb6:	edcd 7a01 	vstr	s15, [sp, #4]
 800ffba:	f99d 1004 	ldrsb.w	r1, [sp, #4]
 800ffbe:	e7ad      	b.n	800ff1c <forward_cast+0x2910>
 800ffc0:	e9d5 0100 	ldrd	r0, r1, [r5]
 800ffc4:	f7f0 fab4 	bl	8000530 <__aeabi_l2f>
 800ffc8:	ee07 0a90 	vmov	s15, r0
 800ffcc:	4b9c      	ldr	r3, [pc, #624]	; (8010240 <forward_cast+0x2c34>)
 800ffce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ffd2:	4a9a      	ldr	r2, [pc, #616]	; (801023c <forward_cast+0x2c30>)
 800ffd4:	edcd 7a01 	vstr	s15, [sp, #4]
 800ffd8:	f99d 1004 	ldrsb.w	r1, [sp, #4]
 800ffdc:	e79e      	b.n	800ff1c <forward_cast+0x2910>
 800ffde:	f995 0000 	ldrsb.w	r0, [r5]
 800ffe2:	e6ed      	b.n	800fdc0 <forward_cast+0x27b4>
 800ffe4:	edd5 7a00 	vldr	s15, [r5]
 800ffe8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ffec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fff0:	edcd 7a01 	vstr	s15, [sp, #4]
 800fff4:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800fff8:	f7fd bf3a 	b.w	800de70 <forward_cast+0x864>
 800fffc:	edd5 7a00 	vldr	s15, [r5]
 8010000:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010004:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010008:	edcd 7a01 	vstr	s15, [sp, #4]
 801000c:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8010010:	e729      	b.n	800fe66 <forward_cast+0x285a>
 8010012:	e9d5 0100 	ldrd	r0, r1, [r5]
 8010016:	f7f0 fa8b 	bl	8000530 <__aeabi_l2f>
 801001a:	ee07 0a90 	vmov	s15, r0
 801001e:	4b89      	ldr	r3, [pc, #548]	; (8010244 <forward_cast+0x2c38>)
 8010020:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010024:	4a86      	ldr	r2, [pc, #536]	; (8010240 <forward_cast+0x2c34>)
 8010026:	edcd 7a01 	vstr	s15, [sp, #4]
 801002a:	f89d 1004 	ldrb.w	r1, [sp, #4]
 801002e:	e71a      	b.n	800fe66 <forward_cast+0x285a>
 8010030:	e9d5 0100 	ldrd	r0, r1, [r5]
 8010034:	f7f0 fa7c 	bl	8000530 <__aeabi_l2f>
 8010038:	ee07 0a90 	vmov	s15, r0
 801003c:	4b7f      	ldr	r3, [pc, #508]	; (801023c <forward_cast+0x2c30>)
 801003e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010042:	4a7a      	ldr	r2, [pc, #488]	; (801022c <forward_cast+0x2c20>)
 8010044:	ee17 0a90 	vmov	r0, s15
 8010048:	e66b      	b.n	800fd22 <forward_cast+0x2716>
 801004a:	7828      	ldrb	r0, [r5, #0]
 801004c:	e669      	b.n	800fd22 <forward_cast+0x2716>
 801004e:	e9d5 0100 	ldrd	r0, r1, [r5]
 8010052:	f7f0 fa65 	bl	8000520 <__aeabi_ul2f>
 8010056:	ee07 0a90 	vmov	s15, r0
 801005a:	4a74      	ldr	r2, [pc, #464]	; (801022c <forward_cast+0x2c20>)
 801005c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010060:	4b76      	ldr	r3, [pc, #472]	; (801023c <forward_cast+0x2c30>)
 8010062:	ee17 0a90 	vmov	r0, s15
 8010066:	e65c      	b.n	800fd22 <forward_cast+0x2716>
 8010068:	f9b5 0000 	ldrsh.w	r0, [r5]
 801006c:	e659      	b.n	800fd22 <forward_cast+0x2716>
 801006e:	e9d5 0100 	ldrd	r0, r1, [r5]
 8010072:	f7f0 fa5d 	bl	8000530 <__aeabi_l2f>
 8010076:	ee07 0a90 	vmov	s15, r0
 801007a:	4b71      	ldr	r3, [pc, #452]	; (8010240 <forward_cast+0x2c34>)
 801007c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010080:	4a6e      	ldr	r2, [pc, #440]	; (801023c <forward_cast+0x2c30>)
 8010082:	ee17 0a90 	vmov	r0, s15
 8010086:	e69b      	b.n	800fdc0 <forward_cast+0x27b4>
 8010088:	7828      	ldrb	r0, [r5, #0]
 801008a:	e699      	b.n	800fdc0 <forward_cast+0x27b4>
 801008c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8010090:	f7f0 fa46 	bl	8000520 <__aeabi_ul2f>
 8010094:	ee07 0a90 	vmov	s15, r0
 8010098:	4a68      	ldr	r2, [pc, #416]	; (801023c <forward_cast+0x2c30>)
 801009a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801009e:	4b68      	ldr	r3, [pc, #416]	; (8010240 <forward_cast+0x2c34>)
 80100a0:	ee17 0a90 	vmov	r0, s15
 80100a4:	e68c      	b.n	800fdc0 <forward_cast+0x27b4>
 80100a6:	f9b5 0000 	ldrsh.w	r0, [r5]
 80100aa:	e689      	b.n	800fdc0 <forward_cast+0x27b4>
 80100ac:	e9d5 0100 	ldrd	r0, r1, [r5]
 80100b0:	f7f0 fa3e 	bl	8000530 <__aeabi_l2f>
 80100b4:	ee07 0a90 	vmov	s15, r0
 80100b8:	4b61      	ldr	r3, [pc, #388]	; (8010240 <forward_cast+0x2c34>)
 80100ba:	eef5 7a40 	vcmp.f32	s15, #0.0
 80100be:	4a5f      	ldr	r2, [pc, #380]	; (801023c <forward_cast+0x2c30>)
 80100c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100c4:	bf14      	ite	ne
 80100c6:	2101      	movne	r1, #1
 80100c8:	2100      	moveq	r1, #0
 80100ca:	e5d9      	b.n	800fc80 <forward_cast+0x2674>
 80100cc:	f995 1000 	ldrsb.w	r1, [r5]
 80100d0:	ee07 1a90 	vmov	s15, r1
 80100d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80100d8:	f7fd be53 	b.w	800dd82 <forward_cast+0x776>
 80100dc:	edd5 7a00 	vldr	s15, [r5]
 80100e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80100e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80100e8:	ee17 0a90 	vmov	r0, s15
 80100ec:	e564      	b.n	800fbb8 <forward_cast+0x25ac>
 80100ee:	f995 1000 	ldrsb.w	r1, [r5]
 80100f2:	ee07 1a90 	vmov	s15, r1
 80100f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80100fa:	f7fd bf0d 	b.w	800df18 <forward_cast+0x90c>
 80100fe:	e9d5 0100 	ldrd	r0, r1, [r5]
 8010102:	f7f0 fa15 	bl	8000530 <__aeabi_l2f>
 8010106:	ee07 0a90 	vmov	s15, r0
 801010a:	4b4d      	ldr	r3, [pc, #308]	; (8010240 <forward_cast+0x2c34>)
 801010c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010110:	4a4a      	ldr	r2, [pc, #296]	; (801023c <forward_cast+0x2c30>)
 8010112:	ee17 0a90 	vmov	r0, s15
 8010116:	e54f      	b.n	800fbb8 <forward_cast+0x25ac>
 8010118:	7828      	ldrb	r0, [r5, #0]
 801011a:	e54d      	b.n	800fbb8 <forward_cast+0x25ac>
 801011c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8010120:	f7f0 f9fe 	bl	8000520 <__aeabi_ul2f>
 8010124:	ee07 0a90 	vmov	s15, r0
 8010128:	4a44      	ldr	r2, [pc, #272]	; (801023c <forward_cast+0x2c30>)
 801012a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801012e:	4b44      	ldr	r3, [pc, #272]	; (8010240 <forward_cast+0x2c34>)
 8010130:	ee17 0a90 	vmov	r0, s15
 8010134:	e540      	b.n	800fbb8 <forward_cast+0x25ac>
 8010136:	f9b5 0000 	ldrsh.w	r0, [r5]
 801013a:	e53d      	b.n	800fbb8 <forward_cast+0x25ac>
 801013c:	f995 0000 	ldrsb.w	r0, [r5]
 8010140:	e53a      	b.n	800fbb8 <forward_cast+0x25ac>
 8010142:	edd5 7a00 	vldr	s15, [r5]
 8010146:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801014a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801014e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010152:	f7fd bee1 	b.w	800df18 <forward_cast+0x90c>
 8010156:	e9d5 0100 	ldrd	r0, r1, [r5]
 801015a:	f7f0 f9e1 	bl	8000520 <__aeabi_ul2f>
 801015e:	ee07 0a90 	vmov	s15, r0
 8010162:	4a35      	ldr	r2, [pc, #212]	; (8010238 <forward_cast+0x2c2c>)
 8010164:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010168:	4b35      	ldr	r3, [pc, #212]	; (8010240 <forward_cast+0x2c34>)
 801016a:	ee17 0a90 	vmov	r0, s15
 801016e:	f7fe ba5b 	b.w	800e628 <forward_cast+0x101c>
 8010172:	e9d5 0100 	ldrd	r0, r1, [r5]
 8010176:	f7f0 f9d3 	bl	8000520 <__aeabi_ul2f>
 801017a:	ee07 0a90 	vmov	s15, r0
 801017e:	4b32      	ldr	r3, [pc, #200]	; (8010248 <forward_cast+0x2c3c>)
 8010180:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010184:	4a2f      	ldr	r2, [pc, #188]	; (8010244 <forward_cast+0x2c38>)
 8010186:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801018a:	f7fd bec5 	b.w	800df18 <forward_cast+0x90c>
 801018e:	f995 1000 	ldrsb.w	r1, [r5]
 8010192:	3900      	subs	r1, #0
 8010194:	bf18      	it	ne
 8010196:	2101      	movne	r1, #1
 8010198:	e572      	b.n	800fc80 <forward_cast+0x2674>
 801019a:	edd5 7a00 	vldr	s15, [r5]
 801019e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80101a2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80101a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101aa:	bf14      	ite	ne
 80101ac:	2101      	movne	r1, #1
 80101ae:	2100      	moveq	r1, #0
 80101b0:	e566      	b.n	800fc80 <forward_cast+0x2674>
 80101b2:	e9d5 0100 	ldrd	r0, r1, [r5]
 80101b6:	f7f0 f9b3 	bl	8000520 <__aeabi_ul2f>
 80101ba:	ee07 0a90 	vmov	s15, r0
 80101be:	4a1f      	ldr	r2, [pc, #124]	; (801023c <forward_cast+0x2c30>)
 80101c0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80101c4:	4b1e      	ldr	r3, [pc, #120]	; (8010240 <forward_cast+0x2c34>)
 80101c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101ca:	bf14      	ite	ne
 80101cc:	2101      	movne	r1, #1
 80101ce:	2100      	moveq	r1, #0
 80101d0:	e556      	b.n	800fc80 <forward_cast+0x2674>
 80101d2:	f9b5 1000 	ldrsh.w	r1, [r5]
 80101d6:	3900      	subs	r1, #0
 80101d8:	bf18      	it	ne
 80101da:	2101      	movne	r1, #1
 80101dc:	e550      	b.n	800fc80 <forward_cast+0x2674>
 80101de:	e9d5 0100 	ldrd	r0, r1, [r5]
 80101e2:	f7f0 f99d 	bl	8000520 <__aeabi_ul2f>
 80101e6:	ee07 0a90 	vmov	s15, r0
 80101ea:	4a15      	ldr	r2, [pc, #84]	; (8010240 <forward_cast+0x2c34>)
 80101ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80101f0:	4b14      	ldr	r3, [pc, #80]	; (8010244 <forward_cast+0x2c38>)
 80101f2:	edcd 7a01 	vstr	s15, [sp, #4]
 80101f6:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80101fa:	e634      	b.n	800fe66 <forward_cast+0x285a>
 80101fc:	edd5 7a00 	vldr	s15, [r5]
 8010200:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010204:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010208:	edcd 7a01 	vstr	s15, [sp, #4]
 801020c:	f99d 1004 	ldrsb.w	r1, [sp, #4]
 8010210:	f7fe ba3f 	b.w	800e692 <forward_cast+0x1086>
 8010214:	f995 0000 	ldrsb.w	r0, [r5]
 8010218:	f7fe ba72 	b.w	800e700 <forward_cast+0x10f4>
 801021c:	f995 0000 	ldrsb.w	r0, [r5]
 8010220:	f7fe ba02 	b.w	800e628 <forward_cast+0x101c>
 8010224:	7829      	ldrb	r1, [r5, #0]
 8010226:	f7fd bc85 	b.w	800db34 <forward_cast+0x528>
 801022a:	bf00      	nop
 801022c:	00060440 	.word	0x00060440
 8010230:	00842040 	.word	0x00842040
 8010234:	01821040 	.word	0x01821040
 8010238:	00040440 	.word	0x00040440
 801023c:	00042040 	.word	0x00042040
 8010240:	00041040 	.word	0x00041040
 8010244:	00841040 	.word	0x00841040
 8010248:	00840840 	.word	0x00840840
 801024c:	edd5 7a00 	vldr	s15, [r5]
 8010250:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010254:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010258:	ee17 1a90 	vmov	r1, s15
 801025c:	b289      	uxth	r1, r1
 801025e:	f7fd bac7 	b.w	800d7f0 <forward_cast+0x1e4>
 8010262:	e9d5 0100 	ldrd	r0, r1, [r5]
 8010266:	f7f0 f963 	bl	8000530 <__aeabi_l2f>
 801026a:	ee07 0a90 	vmov	s15, r0
 801026e:	4be4      	ldr	r3, [pc, #912]	; (8010600 <forward_cast+0x2ff4>)
 8010270:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010274:	4ae3      	ldr	r2, [pc, #908]	; (8010604 <forward_cast+0x2ff8>)
 8010276:	edcd 7a01 	vstr	s15, [sp, #4]
 801027a:	f89d 1004 	ldrb.w	r1, [sp, #4]
 801027e:	f7fd bdf7 	b.w	800de70 <forward_cast+0x864>
 8010282:	e9d5 0100 	ldrd	r0, r1, [r5]
 8010286:	f7f0 f953 	bl	8000530 <__aeabi_l2f>
 801028a:	ee07 0a90 	vmov	s15, r0
 801028e:	4bde      	ldr	r3, [pc, #888]	; (8010608 <forward_cast+0x2ffc>)
 8010290:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010294:	4add      	ldr	r2, [pc, #884]	; (801060c <forward_cast+0x3000>)
 8010296:	ee17 0a90 	vmov	r0, s15
 801029a:	f7fe b935 	b.w	800e508 <forward_cast+0xefc>
 801029e:	e9d5 0100 	ldrd	r0, r1, [r5]
 80102a2:	f7f0 f93d 	bl	8000520 <__aeabi_ul2f>
 80102a6:	ee07 0a90 	vmov	s15, r0
 80102aa:	4ad7      	ldr	r2, [pc, #860]	; (8010608 <forward_cast+0x2ffc>)
 80102ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80102b0:	ee17 3a90 	vmov	r3, s15
 80102b4:	b299      	uxth	r1, r3
 80102b6:	4bd3      	ldr	r3, [pc, #844]	; (8010604 <forward_cast+0x2ff8>)
 80102b8:	f7fd bc3c 	b.w	800db34 <forward_cast+0x528>
 80102bc:	e9d5 0100 	ldrd	r0, r1, [r5]
 80102c0:	9301      	str	r3, [sp, #4]
 80102c2:	f7f0 f92d 	bl	8000520 <__aeabi_ul2f>
 80102c6:	ee07 0a90 	vmov	s15, r0
 80102ca:	9b01      	ldr	r3, [sp, #4]
 80102cc:	4acc      	ldr	r2, [pc, #816]	; (8010600 <forward_cast+0x2ff4>)
 80102ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80102d2:	ee17 0a90 	vmov	r0, s15
 80102d6:	f7fd bc69 	b.w	800dbac <forward_cast+0x5a0>
 80102da:	edd5 7a00 	vldr	s15, [r5]
 80102de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80102e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80102e6:	ee17 0a90 	vmov	r0, s15
 80102ea:	f7fd bc5f 	b.w	800dbac <forward_cast+0x5a0>
 80102ee:	f9b5 0000 	ldrsh.w	r0, [r5]
 80102f2:	f7fe b963 	b.w	800e5bc <forward_cast+0xfb0>
 80102f6:	e9d5 0100 	ldrd	r0, r1, [r5]
 80102fa:	f7f0 f911 	bl	8000520 <__aeabi_ul2f>
 80102fe:	ee07 0a90 	vmov	s15, r0
 8010302:	4ac2      	ldr	r2, [pc, #776]	; (801060c <forward_cast+0x3000>)
 8010304:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010308:	4bbf      	ldr	r3, [pc, #764]	; (8010608 <forward_cast+0x2ffc>)
 801030a:	ee17 0a90 	vmov	r0, s15
 801030e:	f7fe b955 	b.w	800e5bc <forward_cast+0xfb0>
 8010312:	e9d5 0100 	ldrd	r0, r1, [r5]
 8010316:	f7f0 f903 	bl	8000520 <__aeabi_ul2f>
 801031a:	ee07 0a90 	vmov	s15, r0
 801031e:	4abc      	ldr	r2, [pc, #752]	; (8010610 <forward_cast+0x3004>)
 8010320:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010324:	4bb6      	ldr	r3, [pc, #728]	; (8010600 <forward_cast+0x2ff4>)
 8010326:	ee17 0a90 	vmov	r0, s15
 801032a:	f7fe b9e9 	b.w	800e700 <forward_cast+0x10f4>
 801032e:	edd5 7a00 	vldr	s15, [r5]
 8010332:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010336:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801033a:	ee17 0a90 	vmov	r0, s15
 801033e:	f7fe b9df 	b.w	800e700 <forward_cast+0x10f4>
 8010342:	7828      	ldrb	r0, [r5, #0]
 8010344:	f7fe b8e0 	b.w	800e508 <forward_cast+0xefc>
 8010348:	edd5 7a00 	vldr	s15, [r5]
 801034c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010350:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010354:	ee17 0a90 	vmov	r0, s15
 8010358:	e532      	b.n	800fdc0 <forward_cast+0x27b4>
 801035a:	f995 0000 	ldrsb.w	r0, [r5]
 801035e:	f7fd ba98 	b.w	800d892 <forward_cast+0x286>
 8010362:	f995 0000 	ldrsb.w	r0, [r5]
 8010366:	e4dc      	b.n	800fd22 <forward_cast+0x2716>
 8010368:	edd5 7a00 	vldr	s15, [r5]
 801036c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010370:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010374:	ee17 0a90 	vmov	r0, s15
 8010378:	e4d3      	b.n	800fd22 <forward_cast+0x2716>
 801037a:	e9d5 0100 	ldrd	r0, r1, [r5]
 801037e:	f7f0 f8cf 	bl	8000520 <__aeabi_ul2f>
 8010382:	ee07 0a90 	vmov	s15, r0
 8010386:	4aa0      	ldr	r2, [pc, #640]	; (8010608 <forward_cast+0x2ffc>)
 8010388:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801038c:	4b9c      	ldr	r3, [pc, #624]	; (8010600 <forward_cast+0x2ff4>)
 801038e:	edcd 7a01 	vstr	s15, [sp, #4]
 8010392:	f99d 1004 	ldrsb.w	r1, [sp, #4]
 8010396:	f7fe b97c 	b.w	800e692 <forward_cast+0x1086>
 801039a:	e9d5 0100 	ldrd	r0, r1, [r5]
 801039e:	f7f0 f8bf 	bl	8000520 <__aeabi_ul2f>
 80103a2:	ee07 0a90 	vmov	s15, r0
 80103a6:	4a97      	ldr	r2, [pc, #604]	; (8010604 <forward_cast+0x2ff8>)
 80103a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80103ac:	4b94      	ldr	r3, [pc, #592]	; (8010600 <forward_cast+0x2ff4>)
 80103ae:	ee17 0a90 	vmov	r0, s15
 80103b2:	f7fd ba6e 	b.w	800d892 <forward_cast+0x286>
 80103b6:	edd5 7a00 	vldr	s15, [r5]
 80103ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80103be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80103c2:	ee17 0a90 	vmov	r0, s15
 80103c6:	f7fd ba64 	b.w	800d892 <forward_cast+0x286>
 80103ca:	f9b5 0000 	ldrsh.w	r0, [r5]
 80103ce:	f7fd ba60 	b.w	800d892 <forward_cast+0x286>
 80103d2:	e9d5 0100 	ldrd	r0, r1, [r5]
 80103d6:	f7f0 f8a3 	bl	8000520 <__aeabi_ul2f>
 80103da:	ee07 0a90 	vmov	s15, r0
 80103de:	4a89      	ldr	r2, [pc, #548]	; (8010604 <forward_cast+0x2ff8>)
 80103e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80103e4:	4b86      	ldr	r3, [pc, #536]	; (8010600 <forward_cast+0x2ff4>)
 80103e6:	edcd 7a01 	vstr	s15, [sp, #4]
 80103ea:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80103ee:	f7fd bd3f 	b.w	800de70 <forward_cast+0x864>
 80103f2:	e9d5 0100 	ldrd	r0, r1, [r5]
 80103f6:	f7f0 f893 	bl	8000520 <__aeabi_ul2f>
 80103fa:	ee07 0a90 	vmov	s15, r0
 80103fe:	4a81      	ldr	r2, [pc, #516]	; (8010604 <forward_cast+0x2ff8>)
 8010400:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010404:	4b7e      	ldr	r3, [pc, #504]	; (8010600 <forward_cast+0x2ff4>)
 8010406:	edcd 7a01 	vstr	s15, [sp, #4]
 801040a:	f89d 1004 	ldrb.w	r1, [sp, #4]
 801040e:	f7fd bcf0 	b.w	800ddf2 <forward_cast+0x7e6>
 8010412:	edd5 7a00 	vldr	s15, [r5]
 8010416:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801041a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801041e:	edcd 7a01 	vstr	s15, [sp, #4]
 8010422:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8010426:	f7fd bce4 	b.w	800ddf2 <forward_cast+0x7e6>
 801042a:	f9b5 0000 	ldrsh.w	r0, [r5]
 801042e:	f7fd ba93 	b.w	800d958 <forward_cast+0x34c>
 8010432:	e9d5 0100 	ldrd	r0, r1, [r5]
 8010436:	f7f0 f87b 	bl	8000530 <__aeabi_l2f>
 801043a:	ee07 0a90 	vmov	s15, r0
 801043e:	4b70      	ldr	r3, [pc, #448]	; (8010600 <forward_cast+0x2ff4>)
 8010440:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010444:	4a6f      	ldr	r2, [pc, #444]	; (8010604 <forward_cast+0x2ff8>)
 8010446:	ee17 0a90 	vmov	r0, s15
 801044a:	f7fd bc41 	b.w	800dcd0 <forward_cast+0x6c4>
 801044e:	f9b5 1000 	ldrsh.w	r1, [r5]
 8010452:	ee07 1a90 	vmov	s15, r1
 8010456:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801045a:	f7fd bc92 	b.w	800dd82 <forward_cast+0x776>
 801045e:	e9d5 0100 	ldrd	r0, r1, [r5]
 8010462:	f7f0 f865 	bl	8000530 <__aeabi_l2f>
 8010466:	ee07 0a90 	vmov	s15, r0
 801046a:	4b67      	ldr	r3, [pc, #412]	; (8010608 <forward_cast+0x2ffc>)
 801046c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010470:	4a66      	ldr	r2, [pc, #408]	; (801060c <forward_cast+0x3000>)
 8010472:	ee17 0a90 	vmov	r0, s15
 8010476:	f7fd bbeb 	b.w	800dc50 <forward_cast+0x644>
 801047a:	f9b5 0000 	ldrsh.w	r0, [r5]
 801047e:	f7fd bc27 	b.w	800dcd0 <forward_cast+0x6c4>
 8010482:	f995 0000 	ldrsb.w	r0, [r5]
 8010486:	f7ff bb2f 	b.w	800fae8 <forward_cast+0x24dc>
 801048a:	f995 0000 	ldrsb.w	r0, [r5]
 801048e:	f7fd bbdf 	b.w	800dc50 <forward_cast+0x644>
 8010492:	f995 0000 	ldrsb.w	r0, [r5]
 8010496:	f7fd bf74 	b.w	800e382 <forward_cast+0xd76>
 801049a:	f995 1000 	ldrsb.w	r1, [r5]
 801049e:	3900      	subs	r1, #0
 80104a0:	bf18      	it	ne
 80104a2:	2101      	movne	r1, #1
 80104a4:	f7fd bfa8 	b.w	800e3f8 <forward_cast+0xdec>
 80104a8:	e9d5 0100 	ldrd	r0, r1, [r5]
 80104ac:	f7f0 f840 	bl	8000530 <__aeabi_l2f>
 80104b0:	ee07 0a90 	vmov	s15, r0
 80104b4:	4b54      	ldr	r3, [pc, #336]	; (8010608 <forward_cast+0x2ffc>)
 80104b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80104ba:	4a54      	ldr	r2, [pc, #336]	; (801060c <forward_cast+0x3000>)
 80104bc:	ee17 0a90 	vmov	r0, s15
 80104c0:	f7ff bb12 	b.w	800fae8 <forward_cast+0x24dc>
 80104c4:	7828      	ldrb	r0, [r5, #0]
 80104c6:	f7ff bb0f 	b.w	800fae8 <forward_cast+0x24dc>
 80104ca:	e9d5 0100 	ldrd	r0, r1, [r5]
 80104ce:	f7f0 f827 	bl	8000520 <__aeabi_ul2f>
 80104d2:	ee07 0a90 	vmov	s15, r0
 80104d6:	4a4d      	ldr	r2, [pc, #308]	; (801060c <forward_cast+0x3000>)
 80104d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80104dc:	4b4a      	ldr	r3, [pc, #296]	; (8010608 <forward_cast+0x2ffc>)
 80104de:	ee17 0a90 	vmov	r0, s15
 80104e2:	f7ff bb01 	b.w	800fae8 <forward_cast+0x24dc>
 80104e6:	f9b5 0000 	ldrsh.w	r0, [r5]
 80104ea:	f7ff bafd 	b.w	800fae8 <forward_cast+0x24dc>
 80104ee:	edd5 7a00 	vldr	s15, [r5]
 80104f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80104f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80104fa:	ee17 0a90 	vmov	r0, s15
 80104fe:	f7ff baf3 	b.w	800fae8 <forward_cast+0x24dc>
 8010502:	edd5 7a00 	vldr	s15, [r5]
 8010506:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801050a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801050e:	ee17 1a90 	vmov	r1, s15
 8010512:	b289      	uxth	r1, r1
 8010514:	f7fd bb0e 	b.w	800db34 <forward_cast+0x528>
 8010518:	edd5 7a00 	vldr	s15, [r5]
 801051c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010520:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010524:	ee17 0a90 	vmov	r0, s15
 8010528:	f7fe b848 	b.w	800e5bc <forward_cast+0xfb0>
 801052c:	f9b5 0000 	ldrsh.w	r0, [r5]
 8010530:	f7fe b87a 	b.w	800e628 <forward_cast+0x101c>
 8010534:	f995 0000 	ldrsb.w	r0, [r5]
 8010538:	f7fe b840 	b.w	800e5bc <forward_cast+0xfb0>
 801053c:	f995 1000 	ldrsb.w	r1, [r5]
 8010540:	f7fd bddc 	b.w	800e0fc <forward_cast+0xaf0>
 8010544:	f995 1000 	ldrsb.w	r1, [r5]
 8010548:	b289      	uxth	r1, r1
 801054a:	f7fd b951 	b.w	800d7f0 <forward_cast+0x1e4>
 801054e:	f995 0000 	ldrsb.w	r0, [r5]
 8010552:	f7ff ba34 	b.w	800f9be <forward_cast+0x23b2>
 8010556:	edd5 7a00 	vldr	s15, [r5]
 801055a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801055e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010562:	edcd 7a01 	vstr	s15, [sp, #4]
 8010566:	f89d 1004 	ldrb.w	r1, [sp, #4]
 801056a:	f7ff b9ca 	b.w	800f902 <forward_cast+0x22f6>
 801056e:	f995 0000 	ldrsb.w	r0, [r5]
 8010572:	f7ff ba6d 	b.w	800fa50 <forward_cast+0x2444>
 8010576:	edd5 7a00 	vldr	s15, [r5]
 801057a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801057e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010582:	ee17 0a90 	vmov	r0, s15
 8010586:	f7ff ba63 	b.w	800fa50 <forward_cast+0x2444>
 801058a:	e9d5 0100 	ldrd	r0, r1, [r5]
 801058e:	f7ef ffc7 	bl	8000520 <__aeabi_ul2f>
 8010592:	4b20      	ldr	r3, [pc, #128]	; (8010614 <forward_cast+0x3008>)
 8010594:	ee07 0a90 	vmov	s15, r0
 8010598:	4a1f      	ldr	r2, [pc, #124]	; (8010618 <forward_cast+0x300c>)
 801059a:	f7fd bbf2 	b.w	800dd82 <forward_cast+0x776>
 801059e:	e9d5 0100 	ldrd	r0, r1, [r5]
 80105a2:	f7ef ffbd 	bl	8000520 <__aeabi_ul2f>
 80105a6:	ee07 0a90 	vmov	s15, r0
 80105aa:	4a18      	ldr	r2, [pc, #96]	; (801060c <forward_cast+0x3000>)
 80105ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80105b0:	4b15      	ldr	r3, [pc, #84]	; (8010608 <forward_cast+0x2ffc>)
 80105b2:	ee17 0a90 	vmov	r0, s15
 80105b6:	f7fd bb4b 	b.w	800dc50 <forward_cast+0x644>
 80105ba:	edd5 7a00 	vldr	s15, [r5]
 80105be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80105c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80105c6:	ee17 0a90 	vmov	r0, s15
 80105ca:	f7fd bb41 	b.w	800dc50 <forward_cast+0x644>
 80105ce:	f9b5 1000 	ldrsh.w	r1, [r5]
 80105d2:	3900      	subs	r1, #0
 80105d4:	bf18      	it	ne
 80105d6:	2101      	movne	r1, #1
 80105d8:	f7fd bf0e 	b.w	800e3f8 <forward_cast+0xdec>
 80105dc:	e9d5 0100 	ldrd	r0, r1, [r5]
 80105e0:	f7ef ff9e 	bl	8000520 <__aeabi_ul2f>
 80105e4:	ee07 0a90 	vmov	s15, r0
 80105e8:	4a08      	ldr	r2, [pc, #32]	; (801060c <forward_cast+0x3000>)
 80105ea:	eef5 7a40 	vcmp.f32	s15, #0.0
 80105ee:	4b06      	ldr	r3, [pc, #24]	; (8010608 <forward_cast+0x2ffc>)
 80105f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80105f4:	bf14      	ite	ne
 80105f6:	2101      	movne	r1, #1
 80105f8:	2100      	moveq	r1, #0
 80105fa:	f7fd befd 	b.w	800e3f8 <forward_cast+0xdec>
 80105fe:	bf00      	nop
 8010600:	00841040 	.word	0x00841040
 8010604:	00041040 	.word	0x00041040
 8010608:	00042040 	.word	0x00042040
 801060c:	00060440 	.word	0x00060440
 8010610:	01821040 	.word	0x01821040
 8010614:	00842040 	.word	0x00842040
 8010618:	00840440 	.word	0x00840440
 801061c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8010620:	f7ef ff7e 	bl	8000520 <__aeabi_ul2f>
 8010624:	ee07 0a90 	vmov	s15, r0
 8010628:	4bdd      	ldr	r3, [pc, #884]	; (80109a0 <forward_cast+0x3394>)
 801062a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801062e:	4add      	ldr	r2, [pc, #884]	; (80109a4 <forward_cast+0x3398>)
 8010630:	ee17 0a90 	vmov	r0, s15
 8010634:	f7fd bea5 	b.w	800e382 <forward_cast+0xd76>
 8010638:	edd5 7a00 	vldr	s15, [r5]
 801063c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010640:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010644:	ee17 0a90 	vmov	r0, s15
 8010648:	f7fd be9b 	b.w	800e382 <forward_cast+0xd76>
 801064c:	7828      	ldrb	r0, [r5, #0]
 801064e:	f7fd baff 	b.w	800dc50 <forward_cast+0x644>
 8010652:	edd5 7a00 	vldr	s15, [r5]
 8010656:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801065a:	f7fd bb92 	b.w	800dd82 <forward_cast+0x776>
 801065e:	7829      	ldrb	r1, [r5, #0]
 8010660:	ee07 1a90 	vmov	s15, r1
 8010664:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010668:	f7fd bc56 	b.w	800df18 <forward_cast+0x90c>
 801066c:	edd5 7a00 	vldr	s15, [r5]
 8010670:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010674:	eef5 7a40 	vcmp.f32	s15, #0.0
 8010678:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801067c:	bf14      	ite	ne
 801067e:	2101      	movne	r1, #1
 8010680:	2100      	moveq	r1, #0
 8010682:	f7fd beb9 	b.w	800e3f8 <forward_cast+0xdec>
 8010686:	7829      	ldrb	r1, [r5, #0]
 8010688:	ee07 1a90 	vmov	s15, r1
 801068c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010690:	f7fd bb77 	b.w	800dd82 <forward_cast+0x776>
 8010694:	edd5 7a00 	vldr	s15, [r5]
 8010698:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801069c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80106a0:	ee17 0a90 	vmov	r0, s15
 80106a4:	f7ff b98b 	b.w	800f9be <forward_cast+0x23b2>
 80106a8:	f9b5 0000 	ldrsh.w	r0, [r5]
 80106ac:	f7fd be69 	b.w	800e382 <forward_cast+0xd76>
 80106b0:	e9d5 0100 	ldrd	r0, r1, [r5]
 80106b4:	f7ef ff3c 	bl	8000530 <__aeabi_l2f>
 80106b8:	4abb      	ldr	r2, [pc, #748]	; (80109a8 <forward_cast+0x339c>)
 80106ba:	ee07 0a90 	vmov	s15, r0
 80106be:	4bbb      	ldr	r3, [pc, #748]	; (80109ac <forward_cast+0x33a0>)
 80106c0:	f7fd bb5f 	b.w	800dd82 <forward_cast+0x776>
 80106c4:	e9d5 0100 	ldrd	r0, r1, [r5]
 80106c8:	f7ef ff32 	bl	8000530 <__aeabi_l2f>
 80106cc:	ee07 0a90 	vmov	s15, r0
 80106d0:	4bb7      	ldr	r3, [pc, #732]	; (80109b0 <forward_cast+0x33a4>)
 80106d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80106d6:	4ab7      	ldr	r2, [pc, #732]	; (80109b4 <forward_cast+0x33a8>)
 80106d8:	ee17 0a90 	vmov	r0, s15
 80106dc:	f7fd b837 	b.w	800d74e <forward_cast+0x142>
 80106e0:	e9d5 0100 	ldrd	r0, r1, [r5]
 80106e4:	f7ef ff24 	bl	8000530 <__aeabi_l2f>
 80106e8:	ee07 0a90 	vmov	s15, r0
 80106ec:	4aac      	ldr	r2, [pc, #688]	; (80109a0 <forward_cast+0x3394>)
 80106ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80106f2:	ee17 3a90 	vmov	r3, s15
 80106f6:	b299      	uxth	r1, r3
 80106f8:	4baf      	ldr	r3, [pc, #700]	; (80109b8 <forward_cast+0x33ac>)
 80106fa:	f7fd b879 	b.w	800d7f0 <forward_cast+0x1e4>
 80106fe:	7828      	ldrb	r0, [r5, #0]
 8010700:	f7fd b8c7 	b.w	800d892 <forward_cast+0x286>
 8010704:	e9d5 0100 	ldrd	r0, r1, [r5]
 8010708:	f7ef ff12 	bl	8000530 <__aeabi_l2f>
 801070c:	ee07 0a90 	vmov	s15, r0
 8010710:	4ba7      	ldr	r3, [pc, #668]	; (80109b0 <forward_cast+0x33a4>)
 8010712:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010716:	4aa7      	ldr	r2, [pc, #668]	; (80109b4 <forward_cast+0x33a8>)
 8010718:	ee17 0a90 	vmov	r0, s15
 801071c:	f7fd bd76 	b.w	800e20c <forward_cast+0xc00>
 8010720:	f9b5 0000 	ldrsh.w	r0, [r5]
 8010724:	f7fd b813 	b.w	800d74e <forward_cast+0x142>
 8010728:	7829      	ldrb	r1, [r5, #0]
 801072a:	f7fd b861 	b.w	800d7f0 <forward_cast+0x1e4>
 801072e:	e9d5 0100 	ldrd	r0, r1, [r5]
 8010732:	9301      	str	r3, [sp, #4]
 8010734:	f7ef fefc 	bl	8000530 <__aeabi_l2f>
 8010738:	ee07 0a90 	vmov	s15, r0
 801073c:	4a9d      	ldr	r2, [pc, #628]	; (80109b4 <forward_cast+0x33a8>)
 801073e:	9b01      	ldr	r3, [sp, #4]
 8010740:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010744:	ee17 0a90 	vmov	r0, s15
 8010748:	f7fd ba30 	b.w	800dbac <forward_cast+0x5a0>
 801074c:	f995 1000 	ldrsb.w	r1, [r5]
 8010750:	b289      	uxth	r1, r1
 8010752:	f7fd b9ef 	b.w	800db34 <forward_cast+0x528>
 8010756:	f995 0000 	ldrsb.w	r0, [r5]
 801075a:	f7fd ba27 	b.w	800dbac <forward_cast+0x5a0>
 801075e:	e9d5 0100 	ldrd	r0, r1, [r5]
 8010762:	f7ef fee5 	bl	8000530 <__aeabi_l2f>
 8010766:	ee07 0a90 	vmov	s15, r0
 801076a:	4b92      	ldr	r3, [pc, #584]	; (80109b4 <forward_cast+0x33a8>)
 801076c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010770:	4a91      	ldr	r2, [pc, #580]	; (80109b8 <forward_cast+0x33ac>)
 8010772:	ee17 0a90 	vmov	r0, s15
 8010776:	f7fd b8ef 	b.w	800d958 <forward_cast+0x34c>
 801077a:	f9b5 0000 	ldrsh.w	r0, [r5]
 801077e:	f7fd bec3 	b.w	800e508 <forward_cast+0xefc>
 8010782:	e9d5 0100 	ldrd	r0, r1, [r5]
 8010786:	f7ef fed3 	bl	8000530 <__aeabi_l2f>
 801078a:	ee07 0a90 	vmov	s15, r0
 801078e:	4a85      	ldr	r2, [pc, #532]	; (80109a4 <forward_cast+0x3398>)
 8010790:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010794:	4b82      	ldr	r3, [pc, #520]	; (80109a0 <forward_cast+0x3394>)
 8010796:	ee17 0a90 	vmov	r0, s15
 801079a:	f7fd bdf2 	b.w	800e382 <forward_cast+0xd76>
 801079e:	f9b5 1000 	ldrsh.w	r1, [r5]
 80107a2:	ee07 1a90 	vmov	s15, r1
 80107a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80107aa:	f7fd bbb5 	b.w	800df18 <forward_cast+0x90c>
 80107ae:	edd5 7a00 	vldr	s15, [r5]
 80107b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80107b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80107ba:	edcd 7a01 	vstr	s15, [sp, #4]
 80107be:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80107c2:	f7ff b802 	b.w	800f7ca <forward_cast+0x21be>
 80107c6:	e9d5 0100 	ldrd	r0, r1, [r5]
 80107ca:	f7ef feb1 	bl	8000530 <__aeabi_l2f>
 80107ce:	ee07 0a90 	vmov	s15, r0
 80107d2:	4b78      	ldr	r3, [pc, #480]	; (80109b4 <forward_cast+0x33a8>)
 80107d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80107d8:	4a77      	ldr	r2, [pc, #476]	; (80109b8 <forward_cast+0x33ac>)
 80107da:	edcd 7a01 	vstr	s15, [sp, #4]
 80107de:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80107e2:	f7fe bff2 	b.w	800f7ca <forward_cast+0x21be>
 80107e6:	f995 0000 	ldrsb.w	r0, [r5]
 80107ea:	f7ff b838 	b.w	800f85e <forward_cast+0x2252>
 80107ee:	edd5 7a00 	vldr	s15, [r5]
 80107f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80107f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80107fa:	ee17 0a90 	vmov	r0, s15
 80107fe:	f7ff b82e 	b.w	800f85e <forward_cast+0x2252>
 8010802:	e9d5 0100 	ldrd	r0, r1, [r5]
 8010806:	f7ef fe93 	bl	8000530 <__aeabi_l2f>
 801080a:	ee07 0a90 	vmov	s15, r0
 801080e:	4b64      	ldr	r3, [pc, #400]	; (80109a0 <forward_cast+0x3394>)
 8010810:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010814:	4a69      	ldr	r2, [pc, #420]	; (80109bc <forward_cast+0x33b0>)
 8010816:	ee17 0a90 	vmov	r0, s15
 801081a:	f7ff b820 	b.w	800f85e <forward_cast+0x2252>
 801081e:	7828      	ldrb	r0, [r5, #0]
 8010820:	f7ff b81d 	b.w	800f85e <forward_cast+0x2252>
 8010824:	e9d5 0100 	ldrd	r0, r1, [r5]
 8010828:	f7ef fe7a 	bl	8000520 <__aeabi_ul2f>
 801082c:	ee07 0a90 	vmov	s15, r0
 8010830:	4a62      	ldr	r2, [pc, #392]	; (80109bc <forward_cast+0x33b0>)
 8010832:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010836:	4b5a      	ldr	r3, [pc, #360]	; (80109a0 <forward_cast+0x3394>)
 8010838:	ee17 0a90 	vmov	r0, s15
 801083c:	f7ff b80f 	b.w	800f85e <forward_cast+0x2252>
 8010840:	f9b5 0000 	ldrsh.w	r0, [r5]
 8010844:	f7ff b80b 	b.w	800f85e <forward_cast+0x2252>
 8010848:	e9d5 0100 	ldrd	r0, r1, [r5]
 801084c:	f7ef fe68 	bl	8000520 <__aeabi_ul2f>
 8010850:	ee07 0a90 	vmov	s15, r0
 8010854:	4a58      	ldr	r2, [pc, #352]	; (80109b8 <forward_cast+0x33ac>)
 8010856:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801085a:	4b56      	ldr	r3, [pc, #344]	; (80109b4 <forward_cast+0x33a8>)
 801085c:	edcd 7a01 	vstr	s15, [sp, #4]
 8010860:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8010864:	f7fe bfb1 	b.w	800f7ca <forward_cast+0x21be>
 8010868:	edd5 7a00 	vldr	s15, [r5]
 801086c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010870:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010874:	ee17 0a90 	vmov	r0, s15
 8010878:	f7fe bedb 	b.w	800f632 <forward_cast+0x2026>
 801087c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8010880:	f7ef fe56 	bl	8000530 <__aeabi_l2f>
 8010884:	ee07 0a90 	vmov	s15, r0
 8010888:	4b45      	ldr	r3, [pc, #276]	; (80109a0 <forward_cast+0x3394>)
 801088a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801088e:	4a4b      	ldr	r2, [pc, #300]	; (80109bc <forward_cast+0x33b0>)
 8010890:	ee17 0a90 	vmov	r0, s15
 8010894:	f7fd be92 	b.w	800e5bc <forward_cast+0xfb0>
 8010898:	7828      	ldrb	r0, [r5, #0]
 801089a:	f7fd bec5 	b.w	800e628 <forward_cast+0x101c>
 801089e:	f995 0000 	ldrsb.w	r0, [r5]
 80108a2:	f7fe bf2b 	b.w	800f6fc <forward_cast+0x20f0>
 80108a6:	edd5 7a00 	vldr	s15, [r5]
 80108aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80108ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80108b2:	ee17 0a90 	vmov	r0, s15
 80108b6:	f7fe bf21 	b.w	800f6fc <forward_cast+0x20f0>
 80108ba:	7829      	ldrb	r1, [r5, #0]
 80108bc:	f7fd bc1e 	b.w	800e0fc <forward_cast+0xaf0>
 80108c0:	e9d5 0100 	ldrd	r0, r1, [r5]
 80108c4:	f7ef fe34 	bl	8000530 <__aeabi_l2f>
 80108c8:	ee07 0a90 	vmov	s15, r0
 80108cc:	4b39      	ldr	r3, [pc, #228]	; (80109b4 <forward_cast+0x33a8>)
 80108ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80108d2:	4a39      	ldr	r2, [pc, #228]	; (80109b8 <forward_cast+0x33ac>)
 80108d4:	edcd 7a01 	vstr	s15, [sp, #4]
 80108d8:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80108dc:	f7fd ba89 	b.w	800ddf2 <forward_cast+0x7e6>
 80108e0:	edd5 7a00 	vldr	s15, [r5]
 80108e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80108e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80108ec:	ee17 0a90 	vmov	r0, s15
 80108f0:	f7fe bb99 	b.w	800f026 <forward_cast+0x1a1a>
 80108f4:	f995 1000 	ldrsb.w	r1, [r5]
 80108f8:	b289      	uxth	r1, r1
 80108fa:	f7fd b885 	b.w	800da08 <forward_cast+0x3fc>
 80108fe:	f995 0000 	ldrsb.w	r0, [r5]
 8010902:	f7fe bb90 	b.w	800f026 <forward_cast+0x1a1a>
 8010906:	f995 0000 	ldrsb.w	r0, [r5]
 801090a:	f7fd bcfc 	b.w	800e306 <forward_cast+0xcfa>
 801090e:	e9d5 0100 	ldrd	r0, r1, [r5]
 8010912:	f7ef fe0d 	bl	8000530 <__aeabi_l2f>
 8010916:	ee07 0a90 	vmov	s15, r0
 801091a:	4b26      	ldr	r3, [pc, #152]	; (80109b4 <forward_cast+0x33a8>)
 801091c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010920:	4a26      	ldr	r2, [pc, #152]	; (80109bc <forward_cast+0x33b0>)
 8010922:	ee17 0a90 	vmov	r0, s15
 8010926:	f7fe bbca 	b.w	800f0be <forward_cast+0x1ab2>
 801092a:	7828      	ldrb	r0, [r5, #0]
 801092c:	f7fe bbc7 	b.w	800f0be <forward_cast+0x1ab2>
 8010930:	e9d5 0100 	ldrd	r0, r1, [r5]
 8010934:	f7ef fdf4 	bl	8000520 <__aeabi_ul2f>
 8010938:	ee07 0a90 	vmov	s15, r0
 801093c:	4a1f      	ldr	r2, [pc, #124]	; (80109bc <forward_cast+0x33b0>)
 801093e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010942:	4b1c      	ldr	r3, [pc, #112]	; (80109b4 <forward_cast+0x33a8>)
 8010944:	ee17 0a90 	vmov	r0, s15
 8010948:	f7fe bbb9 	b.w	800f0be <forward_cast+0x1ab2>
 801094c:	f9b5 0000 	ldrsh.w	r0, [r5]
 8010950:	f7fe bbb5 	b.w	800f0be <forward_cast+0x1ab2>
 8010954:	f995 1000 	ldrsb.w	r1, [r5]
 8010958:	3900      	subs	r1, #0
 801095a:	bf18      	it	ne
 801095c:	2101      	movne	r1, #1
 801095e:	f7fe bc5d 	b.w	800f21c <forward_cast+0x1c10>
 8010962:	f995 0000 	ldrsb.w	r0, [r5]
 8010966:	f7fd b899 	b.w	800da9c <forward_cast+0x490>
 801096a:	f995 0000 	ldrsb.w	r0, [r5]
 801096e:	f7fe bba6 	b.w	800f0be <forward_cast+0x1ab2>
 8010972:	edd5 7a00 	vldr	s15, [r5]
 8010976:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801097a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801097e:	ee17 0a90 	vmov	r0, s15
 8010982:	f7fe bb9c 	b.w	800f0be <forward_cast+0x1ab2>
 8010986:	edd5 7a00 	vldr	s15, [r5]
 801098a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801098e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8010992:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010996:	bf14      	ite	ne
 8010998:	2101      	movne	r1, #1
 801099a:	2100      	moveq	r1, #0
 801099c:	f7fe bc3e 	b.w	800f21c <forward_cast+0x1c10>
 80109a0:	00042040 	.word	0x00042040
 80109a4:	01821040 	.word	0x01821040
 80109a8:	00840440 	.word	0x00840440
 80109ac:	00842040 	.word	0x00842040
 80109b0:	00840840 	.word	0x00840840
 80109b4:	00841040 	.word	0x00841040
 80109b8:	00041040 	.word	0x00041040
 80109bc:	00060440 	.word	0x00060440
 80109c0:	e9d5 0100 	ldrd	r0, r1, [r5]
 80109c4:	f7ef fdb4 	bl	8000530 <__aeabi_l2f>
 80109c8:	ee07 0a90 	vmov	s15, r0
 80109cc:	4bdb      	ldr	r3, [pc, #876]	; (8010d3c <forward_cast+0x3730>)
 80109ce:	eef5 7a40 	vcmp.f32	s15, #0.0
 80109d2:	4adb      	ldr	r2, [pc, #876]	; (8010d40 <forward_cast+0x3734>)
 80109d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80109d8:	bf14      	ite	ne
 80109da:	2101      	movne	r1, #1
 80109dc:	2100      	moveq	r1, #0
 80109de:	f7fe bc1d 	b.w	800f21c <forward_cast+0x1c10>
 80109e2:	e9d5 0100 	ldrd	r0, r1, [r5]
 80109e6:	f7ef fd9b 	bl	8000520 <__aeabi_ul2f>
 80109ea:	ee07 0a90 	vmov	s15, r0
 80109ee:	4ad4      	ldr	r2, [pc, #848]	; (8010d40 <forward_cast+0x3734>)
 80109f0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80109f4:	4bd1      	ldr	r3, [pc, #836]	; (8010d3c <forward_cast+0x3730>)
 80109f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80109fa:	bf14      	ite	ne
 80109fc:	2101      	movne	r1, #1
 80109fe:	2100      	moveq	r1, #0
 8010a00:	f7fe bc0c 	b.w	800f21c <forward_cast+0x1c10>
 8010a04:	f9b5 1000 	ldrsh.w	r1, [r5]
 8010a08:	3900      	subs	r1, #0
 8010a0a:	bf18      	it	ne
 8010a0c:	2101      	movne	r1, #1
 8010a0e:	f7fe bc05 	b.w	800f21c <forward_cast+0x1c10>
 8010a12:	e9d5 0100 	ldrd	r0, r1, [r5]
 8010a16:	f7ef fd8b 	bl	8000530 <__aeabi_l2f>
 8010a1a:	ee07 0a90 	vmov	s15, r0
 8010a1e:	4bc9      	ldr	r3, [pc, #804]	; (8010d44 <forward_cast+0x3738>)
 8010a20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010a24:	4ac6      	ldr	r2, [pc, #792]	; (8010d40 <forward_cast+0x3734>)
 8010a26:	edcd 7a01 	vstr	s15, [sp, #4]
 8010a2a:	f99d 1004 	ldrsb.w	r1, [sp, #4]
 8010a2e:	f7fe bba3 	b.w	800f178 <forward_cast+0x1b6c>
 8010a32:	e9d5 0100 	ldrd	r0, r1, [r5]
 8010a36:	f7ef fd73 	bl	8000520 <__aeabi_ul2f>
 8010a3a:	ee07 0a90 	vmov	s15, r0
 8010a3e:	4ac0      	ldr	r2, [pc, #768]	; (8010d40 <forward_cast+0x3734>)
 8010a40:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010a44:	4bbf      	ldr	r3, [pc, #764]	; (8010d44 <forward_cast+0x3738>)
 8010a46:	edcd 7a01 	vstr	s15, [sp, #4]
 8010a4a:	f99d 1004 	ldrsb.w	r1, [sp, #4]
 8010a4e:	f7fe bb93 	b.w	800f178 <forward_cast+0x1b6c>
 8010a52:	edd5 7a00 	vldr	s15, [r5]
 8010a56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010a5a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010a5e:	edcd 7a01 	vstr	s15, [sp, #4]
 8010a62:	f99d 1004 	ldrsb.w	r1, [sp, #4]
 8010a66:	f7fe bb87 	b.w	800f178 <forward_cast+0x1b6c>
 8010a6a:	f995 0000 	ldrsb.w	r0, [r5]
 8010a6e:	f7fd bcfe 	b.w	800e46e <forward_cast+0xe62>
 8010a72:	e9d5 0100 	ldrd	r0, r1, [r5]
 8010a76:	f7ef fd53 	bl	8000520 <__aeabi_ul2f>
 8010a7a:	ee07 0a90 	vmov	s15, r0
 8010a7e:	4ab0      	ldr	r2, [pc, #704]	; (8010d40 <forward_cast+0x3734>)
 8010a80:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010a84:	ee17 3a90 	vmov	r3, s15
 8010a88:	b219      	sxth	r1, r3
 8010a8a:	4bac      	ldr	r3, [pc, #688]	; (8010d3c <forward_cast+0x3730>)
 8010a8c:	f7fd bafa 	b.w	800e084 <forward_cast+0xa78>
 8010a90:	e9d5 0100 	ldrd	r0, r1, [r5]
 8010a94:	f7ef fd44 	bl	8000520 <__aeabi_ul2f>
 8010a98:	ee07 0a90 	vmov	s15, r0
 8010a9c:	4aa7      	ldr	r2, [pc, #668]	; (8010d3c <forward_cast+0x3730>)
 8010a9e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010aa2:	4ba8      	ldr	r3, [pc, #672]	; (8010d44 <forward_cast+0x3738>)
 8010aa4:	ee17 0a90 	vmov	r0, s15
 8010aa8:	f7fc bf56 	b.w	800d958 <forward_cast+0x34c>
 8010aac:	edd5 7a00 	vldr	s15, [r5]
 8010ab0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010ab4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010ab8:	ee17 0a90 	vmov	r0, s15
 8010abc:	f7fc bf4c 	b.w	800d958 <forward_cast+0x34c>
 8010ac0:	7828      	ldrb	r0, [r5, #0]
 8010ac2:	f7fd bc20 	b.w	800e306 <forward_cast+0xcfa>
 8010ac6:	e9d5 0100 	ldrd	r0, r1, [r5]
 8010aca:	f7ef fd31 	bl	8000530 <__aeabi_l2f>
 8010ace:	ee07 0a90 	vmov	s15, r0
 8010ad2:	4a9b      	ldr	r2, [pc, #620]	; (8010d40 <forward_cast+0x3734>)
 8010ad4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010ad8:	ee17 3a90 	vmov	r3, s15
 8010adc:	b219      	sxth	r1, r3
 8010ade:	4b97      	ldr	r3, [pc, #604]	; (8010d3c <forward_cast+0x3730>)
 8010ae0:	f7fd bb0c 	b.w	800e0fc <forward_cast+0xaf0>
 8010ae4:	f9b5 0000 	ldrsh.w	r0, [r5]
 8010ae8:	f7fd b860 	b.w	800dbac <forward_cast+0x5a0>
 8010aec:	e9d5 0100 	ldrd	r0, r1, [r5]
 8010af0:	f7ef fd1e 	bl	8000530 <__aeabi_l2f>
 8010af4:	ee07 0a90 	vmov	s15, r0
 8010af8:	4a91      	ldr	r2, [pc, #580]	; (8010d40 <forward_cast+0x3734>)
 8010afa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010afe:	ee17 3a90 	vmov	r3, s15
 8010b02:	b219      	sxth	r1, r3
 8010b04:	4b8d      	ldr	r3, [pc, #564]	; (8010d3c <forward_cast+0x3730>)
 8010b06:	f7fd ba81 	b.w	800e00c <forward_cast+0xa00>
 8010b0a:	f9b5 0000 	ldrsh.w	r0, [r5]
 8010b0e:	f7fd bb7d 	b.w	800e20c <forward_cast+0xc00>
 8010b12:	e9d5 0100 	ldrd	r0, r1, [r5]
 8010b16:	f7ef fd0b 	bl	8000530 <__aeabi_l2f>
 8010b1a:	ee07 0a90 	vmov	s15, r0
 8010b1e:	4a8a      	ldr	r2, [pc, #552]	; (8010d48 <forward_cast+0x373c>)
 8010b20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010b24:	4b89      	ldr	r3, [pc, #548]	; (8010d4c <forward_cast+0x3740>)
 8010b26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010b2a:	f7fd ba35 	b.w	800df98 <forward_cast+0x98c>
 8010b2e:	f9b5 0000 	ldrsh.w	r0, [r5]
 8010b32:	f7fd b88d 	b.w	800dc50 <forward_cast+0x644>
 8010b36:	e9d5 0100 	ldrd	r0, r1, [r5]
 8010b3a:	f7ef fcf9 	bl	8000530 <__aeabi_l2f>
 8010b3e:	ee07 0a90 	vmov	s15, r0
 8010b42:	4a80      	ldr	r2, [pc, #512]	; (8010d44 <forward_cast+0x3738>)
 8010b44:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010b48:	4b80      	ldr	r3, [pc, #512]	; (8010d4c <forward_cast+0x3740>)
 8010b4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010b4e:	f7fd b9e3 	b.w	800df18 <forward_cast+0x90c>
 8010b52:	f9b5 0000 	ldrsh.w	r0, [r5]
 8010b56:	f7fc bfa1 	b.w	800da9c <forward_cast+0x490>
 8010b5a:	e9d5 0100 	ldrd	r0, r1, [r5]
 8010b5e:	f7ef fce7 	bl	8000530 <__aeabi_l2f>
 8010b62:	ee07 0a90 	vmov	s15, r0
 8010b66:	4b76      	ldr	r3, [pc, #472]	; (8010d40 <forward_cast+0x3734>)
 8010b68:	eef5 7a40 	vcmp.f32	s15, #0.0
 8010b6c:	4a78      	ldr	r2, [pc, #480]	; (8010d50 <forward_cast+0x3744>)
 8010b6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b72:	bf14      	ite	ne
 8010b74:	2101      	movne	r1, #1
 8010b76:	2100      	moveq	r1, #0
 8010b78:	f7fd bc3e 	b.w	800e3f8 <forward_cast+0xdec>
 8010b7c:	edd5 7a00 	vldr	s15, [r5]
 8010b80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010b84:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010b88:	ee17 0a90 	vmov	r0, s15
 8010b8c:	f7fd bcbc 	b.w	800e508 <forward_cast+0xefc>
 8010b90:	edd5 7a00 	vldr	s15, [r5]
 8010b94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010b98:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010b9c:	ee17 1a90 	vmov	r1, s15
 8010ba0:	b209      	sxth	r1, r1
 8010ba2:	f7fd ba6f 	b.w	800e084 <forward_cast+0xa78>
 8010ba6:	7829      	ldrb	r1, [r5, #0]
 8010ba8:	ee07 1a90 	vmov	s15, r1
 8010bac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010bb0:	f7fd b9f2 	b.w	800df98 <forward_cast+0x98c>
 8010bb4:	f995 0000 	ldrsb.w	r0, [r5]
 8010bb8:	f7fd b88a 	b.w	800dcd0 <forward_cast+0x6c4>
 8010bbc:	f995 0000 	ldrsb.w	r0, [r5]
 8010bc0:	f7fc beca 	b.w	800d958 <forward_cast+0x34c>
 8010bc4:	e9d5 0100 	ldrd	r0, r1, [r5]
 8010bc8:	f7ef fcb2 	bl	8000530 <__aeabi_l2f>
 8010bcc:	ee07 0a90 	vmov	s15, r0
 8010bd0:	4a5b      	ldr	r2, [pc, #364]	; (8010d40 <forward_cast+0x3734>)
 8010bd2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010bd6:	ee17 3a90 	vmov	r3, s15
 8010bda:	b219      	sxth	r1, r3
 8010bdc:	4b57      	ldr	r3, [pc, #348]	; (8010d3c <forward_cast+0x3730>)
 8010bde:	f7fd ba51 	b.w	800e084 <forward_cast+0xa78>
 8010be2:	7828      	ldrb	r0, [r5, #0]
 8010be4:	f7fc bf5a 	b.w	800da9c <forward_cast+0x490>
 8010be8:	e9d5 0100 	ldrd	r0, r1, [r5]
 8010bec:	f7ef fc98 	bl	8000520 <__aeabi_ul2f>
 8010bf0:	ee07 0a90 	vmov	s15, r0
 8010bf4:	4a56      	ldr	r2, [pc, #344]	; (8010d50 <forward_cast+0x3744>)
 8010bf6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010bfa:	4b51      	ldr	r3, [pc, #324]	; (8010d40 <forward_cast+0x3734>)
 8010bfc:	ee17 0a90 	vmov	r0, s15
 8010c00:	f7fd bc82 	b.w	800e508 <forward_cast+0xefc>
 8010c04:	e9d5 0100 	ldrd	r0, r1, [r5]
 8010c08:	f7ef fc8a 	bl	8000520 <__aeabi_ul2f>
 8010c0c:	ee07 0a90 	vmov	s15, r0
 8010c10:	4a4b      	ldr	r2, [pc, #300]	; (8010d40 <forward_cast+0x3734>)
 8010c12:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010c16:	ee17 3a90 	vmov	r3, s15
 8010c1a:	b219      	sxth	r1, r3
 8010c1c:	4b47      	ldr	r3, [pc, #284]	; (8010d3c <forward_cast+0x3730>)
 8010c1e:	f7fd b9f5 	b.w	800e00c <forward_cast+0xa00>
 8010c22:	edd5 7a00 	vldr	s15, [r5]
 8010c26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010c2a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010c2e:	ee17 1a90 	vmov	r1, s15
 8010c32:	b209      	sxth	r1, r1
 8010c34:	f7fd b9ea 	b.w	800e00c <forward_cast+0xa00>
 8010c38:	7828      	ldrb	r0, [r5, #0]
 8010c3a:	f7fd bc18 	b.w	800e46e <forward_cast+0xe62>
 8010c3e:	f995 0000 	ldrsb.w	r0, [r5]
 8010c42:	f7fd bc61 	b.w	800e508 <forward_cast+0xefc>
 8010c46:	f995 1000 	ldrsb.w	r1, [r5]
 8010c4a:	f7fd b9df 	b.w	800e00c <forward_cast+0xa00>
 8010c4e:	f995 1000 	ldrsb.w	r1, [r5]
 8010c52:	f7fd ba17 	b.w	800e084 <forward_cast+0xa78>
 8010c56:	f995 0000 	ldrsb.w	r0, [r5]
 8010c5a:	f7fd bad7 	b.w	800e20c <forward_cast+0xc00>
 8010c5e:	e9d5 0100 	ldrd	r0, r1, [r5]
 8010c62:	f7ef fc5d 	bl	8000520 <__aeabi_ul2f>
 8010c66:	ee07 0a90 	vmov	s15, r0
 8010c6a:	4a35      	ldr	r2, [pc, #212]	; (8010d40 <forward_cast+0x3734>)
 8010c6c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010c70:	ee17 3a90 	vmov	r3, s15
 8010c74:	b219      	sxth	r1, r3
 8010c76:	4b31      	ldr	r3, [pc, #196]	; (8010d3c <forward_cast+0x3730>)
 8010c78:	f7fd ba40 	b.w	800e0fc <forward_cast+0xaf0>
 8010c7c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8010c80:	f7ef fc4e 	bl	8000520 <__aeabi_ul2f>
 8010c84:	ee07 0a90 	vmov	s15, r0
 8010c88:	4a2d      	ldr	r2, [pc, #180]	; (8010d40 <forward_cast+0x3734>)
 8010c8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010c8e:	ee17 3a90 	vmov	r3, s15
 8010c92:	b299      	uxth	r1, r3
 8010c94:	4b29      	ldr	r3, [pc, #164]	; (8010d3c <forward_cast+0x3730>)
 8010c96:	f7fc bdab 	b.w	800d7f0 <forward_cast+0x1e4>
 8010c9a:	e9d5 0100 	ldrd	r0, r1, [r5]
 8010c9e:	f7ef fc47 	bl	8000530 <__aeabi_l2f>
 8010ca2:	ee07 0a90 	vmov	s15, r0
 8010ca6:	4b27      	ldr	r3, [pc, #156]	; (8010d44 <forward_cast+0x3738>)
 8010ca8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010cac:	4a29      	ldr	r2, [pc, #164]	; (8010d54 <forward_cast+0x3748>)
 8010cae:	ee17 0a90 	vmov	r0, s15
 8010cb2:	f7fd bd25 	b.w	800e700 <forward_cast+0x10f4>
 8010cb6:	edd5 7a00 	vldr	s15, [r5]
 8010cba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010cbe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010cc2:	ee17 0a90 	vmov	r0, s15
 8010cc6:	f7fd bcaf 	b.w	800e628 <forward_cast+0x101c>
 8010cca:	e9d5 0100 	ldrd	r0, r1, [r5]
 8010cce:	f7ef fc2f 	bl	8000530 <__aeabi_l2f>
 8010cd2:	ee07 0a90 	vmov	s15, r0
 8010cd6:	4b1a      	ldr	r3, [pc, #104]	; (8010d40 <forward_cast+0x3734>)
 8010cd8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010cdc:	4a1c      	ldr	r2, [pc, #112]	; (8010d50 <forward_cast+0x3744>)
 8010cde:	ee17 0a90 	vmov	r0, s15
 8010ce2:	f7fe b902 	b.w	800eeea <forward_cast+0x18de>
 8010ce6:	7828      	ldrb	r0, [r5, #0]
 8010ce8:	f7fe b8ff 	b.w	800eeea <forward_cast+0x18de>
 8010cec:	e9d5 0100 	ldrd	r0, r1, [r5]
 8010cf0:	f7ef fc16 	bl	8000520 <__aeabi_ul2f>
 8010cf4:	ee07 0a90 	vmov	s15, r0
 8010cf8:	4a15      	ldr	r2, [pc, #84]	; (8010d50 <forward_cast+0x3744>)
 8010cfa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010cfe:	4b10      	ldr	r3, [pc, #64]	; (8010d40 <forward_cast+0x3734>)
 8010d00:	ee17 0a90 	vmov	r0, s15
 8010d04:	f7fe b8f1 	b.w	800eeea <forward_cast+0x18de>
 8010d08:	f9b5 0000 	ldrsh.w	r0, [r5]
 8010d0c:	f7fe b8ed 	b.w	800eeea <forward_cast+0x18de>
 8010d10:	f995 0000 	ldrsb.w	r0, [r5]
 8010d14:	f7fe b8e9 	b.w	800eeea <forward_cast+0x18de>
 8010d18:	f995 0000 	ldrsb.w	r0, [r5]
 8010d1c:	f7fc bd17 	b.w	800d74e <forward_cast+0x142>
 8010d20:	f995 0000 	ldrsb.w	r0, [r5]
 8010d24:	f7fe b930 	b.w	800ef88 <forward_cast+0x197c>
 8010d28:	edd5 7a00 	vldr	s15, [r5]
 8010d2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010d30:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010d34:	ee17 0a90 	vmov	r0, s15
 8010d38:	f7fe b926 	b.w	800ef88 <forward_cast+0x197c>
 8010d3c:	00041040 	.word	0x00041040
 8010d40:	00042040 	.word	0x00042040
 8010d44:	00841040 	.word	0x00841040
 8010d48:	00842040 	.word	0x00842040
 8010d4c:	00840840 	.word	0x00840840
 8010d50:	00060440 	.word	0x00060440
 8010d54:	01821040 	.word	0x01821040
 8010d58:	e9d5 0100 	ldrd	r0, r1, [r5]
 8010d5c:	f7ef fbe8 	bl	8000530 <__aeabi_l2f>
 8010d60:	ee07 0a90 	vmov	s15, r0
 8010d64:	4bdc      	ldr	r3, [pc, #880]	; (80110d8 <forward_cast+0x3acc>)
 8010d66:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010d6a:	4adc      	ldr	r2, [pc, #880]	; (80110dc <forward_cast+0x3ad0>)
 8010d6c:	ee17 0a90 	vmov	r0, s15
 8010d70:	f7fe b90a 	b.w	800ef88 <forward_cast+0x197c>
 8010d74:	7828      	ldrb	r0, [r5, #0]
 8010d76:	f7fe b907 	b.w	800ef88 <forward_cast+0x197c>
 8010d7a:	e9d5 0100 	ldrd	r0, r1, [r5]
 8010d7e:	f7ef fbcf 	bl	8000520 <__aeabi_ul2f>
 8010d82:	ee07 0a90 	vmov	s15, r0
 8010d86:	4ad5      	ldr	r2, [pc, #852]	; (80110dc <forward_cast+0x3ad0>)
 8010d88:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010d8c:	4bd2      	ldr	r3, [pc, #840]	; (80110d8 <forward_cast+0x3acc>)
 8010d8e:	ee17 0a90 	vmov	r0, s15
 8010d92:	f7fe b8f9 	b.w	800ef88 <forward_cast+0x197c>
 8010d96:	f9b5 0000 	ldrsh.w	r0, [r5]
 8010d9a:	f7fe b8f5 	b.w	800ef88 <forward_cast+0x197c>
 8010d9e:	edd5 7a00 	vldr	s15, [r5]
 8010da2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010da6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010daa:	ee17 0a90 	vmov	r0, s15
 8010dae:	f7fe b89c 	b.w	800eeea <forward_cast+0x18de>
 8010db2:	f995 1000 	ldrsb.w	r1, [r5]
 8010db6:	ee07 1a90 	vmov	s15, r1
 8010dba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010dbe:	f7fd b8eb 	b.w	800df98 <forward_cast+0x98c>
 8010dc2:	edd5 7a00 	vldr	s15, [r5]
 8010dc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010dca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010dce:	ee17 1a90 	vmov	r1, s15
 8010dd2:	b209      	sxth	r1, r1
 8010dd4:	f7fd b992 	b.w	800e0fc <forward_cast+0xaf0>
 8010dd8:	f9b5 0000 	ldrsh.w	r0, [r5]
 8010ddc:	f7fd bc90 	b.w	800e700 <forward_cast+0x10f4>
 8010de0:	e9d5 0100 	ldrd	r0, r1, [r5]
 8010de4:	f7ef fb9c 	bl	8000520 <__aeabi_ul2f>
 8010de8:	ee07 0a90 	vmov	s15, r0
 8010dec:	4abb      	ldr	r2, [pc, #748]	; (80110dc <forward_cast+0x3ad0>)
 8010dee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010df2:	ee17 3a90 	vmov	r3, s15
 8010df6:	b299      	uxth	r1, r3
 8010df8:	4bb7      	ldr	r3, [pc, #732]	; (80110d8 <forward_cast+0x3acc>)
 8010dfa:	f7fc be05 	b.w	800da08 <forward_cast+0x3fc>
 8010dfe:	e9d5 0100 	ldrd	r0, r1, [r5]
 8010e02:	f7ef fb8d 	bl	8000520 <__aeabi_ul2f>
 8010e06:	ee07 0a90 	vmov	s15, r0
 8010e0a:	4bb5      	ldr	r3, [pc, #724]	; (80110e0 <forward_cast+0x3ad4>)
 8010e0c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010e10:	4ab4      	ldr	r2, [pc, #720]	; (80110e4 <forward_cast+0x3ad8>)
 8010e12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010e16:	f7fd b8bf 	b.w	800df98 <forward_cast+0x98c>
 8010e1a:	edd5 7a00 	vldr	s15, [r5]
 8010e1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010e22:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010e26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010e2a:	f7fd b8b5 	b.w	800df98 <forward_cast+0x98c>
 8010e2e:	7828      	ldrb	r0, [r5, #0]
 8010e30:	f7fc bd92 	b.w	800d958 <forward_cast+0x34c>
 8010e34:	e9d5 0100 	ldrd	r0, r1, [r5]
 8010e38:	f7ef fb72 	bl	8000520 <__aeabi_ul2f>
 8010e3c:	ee07 0a90 	vmov	s15, r0
 8010e40:	4aa9      	ldr	r2, [pc, #676]	; (80110e8 <forward_cast+0x3adc>)
 8010e42:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010e46:	4ba5      	ldr	r3, [pc, #660]	; (80110dc <forward_cast+0x3ad0>)
 8010e48:	ee17 0a90 	vmov	r0, s15
 8010e4c:	f7fd bb0f 	b.w	800e46e <forward_cast+0xe62>
 8010e50:	e9d5 0100 	ldrd	r0, r1, [r5]
 8010e54:	f7ef fb64 	bl	8000520 <__aeabi_ul2f>
 8010e58:	ee07 0a90 	vmov	s15, r0
 8010e5c:	4ba0      	ldr	r3, [pc, #640]	; (80110e0 <forward_cast+0x3ad4>)
 8010e5e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010e62:	4aa2      	ldr	r2, [pc, #648]	; (80110ec <forward_cast+0x3ae0>)
 8010e64:	ee17 0a90 	vmov	r0, s15
 8010e68:	f7fc be18 	b.w	800da9c <forward_cast+0x490>
 8010e6c:	edd5 7a00 	vldr	s15, [r5]
 8010e70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010e74:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010e78:	ee17 0a90 	vmov	r0, s15
 8010e7c:	f7fc be0e 	b.w	800da9c <forward_cast+0x490>
 8010e80:	7828      	ldrb	r0, [r5, #0]
 8010e82:	f7fd b9c3 	b.w	800e20c <forward_cast+0xc00>
 8010e86:	edd5 7a00 	vldr	s15, [r5]
 8010e8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010e8e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010e92:	ee17 1a90 	vmov	r1, s15
 8010e96:	b289      	uxth	r1, r1
 8010e98:	f7fc bdb6 	b.w	800da08 <forward_cast+0x3fc>
 8010e9c:	7829      	ldrb	r1, [r5, #0]
 8010e9e:	f7fd b8b5 	b.w	800e00c <forward_cast+0xa00>
 8010ea2:	edd5 7a00 	vldr	s15, [r5]
 8010ea6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010eaa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010eae:	ee17 0a90 	vmov	r0, s15
 8010eb2:	f7fd badc 	b.w	800e46e <forward_cast+0xe62>
 8010eb6:	7828      	ldrb	r0, [r5, #0]
 8010eb8:	f7fc bf0a 	b.w	800dcd0 <forward_cast+0x6c4>
 8010ebc:	e9d5 0100 	ldrd	r0, r1, [r5]
 8010ec0:	f7ef fb2e 	bl	8000520 <__aeabi_ul2f>
 8010ec4:	ee07 0a90 	vmov	s15, r0
 8010ec8:	4a83      	ldr	r2, [pc, #524]	; (80110d8 <forward_cast+0x3acc>)
 8010eca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010ece:	4b88      	ldr	r3, [pc, #544]	; (80110f0 <forward_cast+0x3ae4>)
 8010ed0:	ee17 0a90 	vmov	r0, s15
 8010ed4:	f7fc befc 	b.w	800dcd0 <forward_cast+0x6c4>
 8010ed8:	e9d5 0100 	ldrd	r0, r1, [r5]
 8010edc:	f7ef fb20 	bl	8000520 <__aeabi_ul2f>
 8010ee0:	ee07 0a90 	vmov	s15, r0
 8010ee4:	4a82      	ldr	r2, [pc, #520]	; (80110f0 <forward_cast+0x3ae4>)
 8010ee6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010eea:	4b7d      	ldr	r3, [pc, #500]	; (80110e0 <forward_cast+0x3ad4>)
 8010eec:	ee17 0a90 	vmov	r0, s15
 8010ef0:	f7fd b98c 	b.w	800e20c <forward_cast+0xc00>
 8010ef4:	edd5 7a00 	vldr	s15, [r5]
 8010ef8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010efc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010f00:	ee17 0a90 	vmov	r0, s15
 8010f04:	f7fd b982 	b.w	800e20c <forward_cast+0xc00>
 8010f08:	7829      	ldrb	r1, [r5, #0]
 8010f0a:	f7fc bd7d 	b.w	800da08 <forward_cast+0x3fc>
 8010f0e:	e9d5 0100 	ldrd	r0, r1, [r5]
 8010f12:	f7ef fb05 	bl	8000520 <__aeabi_ul2f>
 8010f16:	ee07 0a90 	vmov	s15, r0
 8010f1a:	4a75      	ldr	r2, [pc, #468]	; (80110f0 <forward_cast+0x3ae4>)
 8010f1c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010f20:	4b6f      	ldr	r3, [pc, #444]	; (80110e0 <forward_cast+0x3ad4>)
 8010f22:	ee17 0a90 	vmov	r0, s15
 8010f26:	f7fc bc12 	b.w	800d74e <forward_cast+0x142>
 8010f2a:	e9d5 0100 	ldrd	r0, r1, [r5]
 8010f2e:	f7ef faf7 	bl	8000520 <__aeabi_ul2f>
 8010f32:	ee07 0a90 	vmov	s15, r0
 8010f36:	4a69      	ldr	r2, [pc, #420]	; (80110dc <forward_cast+0x3ad0>)
 8010f38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010f3c:	4b66      	ldr	r3, [pc, #408]	; (80110d8 <forward_cast+0x3acc>)
 8010f3e:	ee17 0a90 	vmov	r0, s15
 8010f42:	f7fd b9e0 	b.w	800e306 <forward_cast+0xcfa>
 8010f46:	edd5 7a00 	vldr	s15, [r5]
 8010f4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010f4e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010f52:	ee17 0a90 	vmov	r0, s15
 8010f56:	f7fd b9d6 	b.w	800e306 <forward_cast+0xcfa>
 8010f5a:	7828      	ldrb	r0, [r5, #0]
 8010f5c:	f7fd ba11 	b.w	800e382 <forward_cast+0xd76>
 8010f60:	edd5 7a00 	vldr	s15, [r5]
 8010f64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010f68:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010f6c:	ee17 0a90 	vmov	r0, s15
 8010f70:	f7fc beae 	b.w	800dcd0 <forward_cast+0x6c4>
 8010f74:	7828      	ldrb	r0, [r5, #0]
 8010f76:	f7fc bbea 	b.w	800d74e <forward_cast+0x142>
 8010f7a:	edd5 7a00 	vldr	s15, [r5]
 8010f7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010f82:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010f86:	ee17 0a90 	vmov	r0, s15
 8010f8a:	f7fc bbe0 	b.w	800d74e <forward_cast+0x142>
 8010f8e:	7829      	ldrb	r1, [r5, #0]
 8010f90:	f7fd b878 	b.w	800e084 <forward_cast+0xa78>
 8010f94:	e9d5 0100 	ldrd	r0, r1, [r5]
 8010f98:	f7ef faca 	bl	8000530 <__aeabi_l2f>
 8010f9c:	ee07 0a90 	vmov	s15, r0
 8010fa0:	4b4d      	ldr	r3, [pc, #308]	; (80110d8 <forward_cast+0x3acc>)
 8010fa2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010fa6:	4a4d      	ldr	r2, [pc, #308]	; (80110dc <forward_cast+0x3ad0>)
 8010fa8:	ee17 0a90 	vmov	r0, s15
 8010fac:	f7fe b83b 	b.w	800f026 <forward_cast+0x1a1a>
 8010fb0:	7828      	ldrb	r0, [r5, #0]
 8010fb2:	f7fe b838 	b.w	800f026 <forward_cast+0x1a1a>
 8010fb6:	e9d5 0100 	ldrd	r0, r1, [r5]
 8010fba:	f7ef fab1 	bl	8000520 <__aeabi_ul2f>
 8010fbe:	ee07 0a90 	vmov	s15, r0
 8010fc2:	4a46      	ldr	r2, [pc, #280]	; (80110dc <forward_cast+0x3ad0>)
 8010fc4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010fc8:	4b43      	ldr	r3, [pc, #268]	; (80110d8 <forward_cast+0x3acc>)
 8010fca:	ee17 0a90 	vmov	r0, s15
 8010fce:	f7fe b82a 	b.w	800f026 <forward_cast+0x1a1a>
 8010fd2:	f9b5 0000 	ldrsh.w	r0, [r5]
 8010fd6:	f7fe b826 	b.w	800f026 <forward_cast+0x1a1a>
 8010fda:	f995 0000 	ldrsb.w	r0, [r5]
 8010fde:	f7fe ba89 	b.w	800f4f4 <forward_cast+0x1ee8>
 8010fe2:	edd5 7a00 	vldr	s15, [r5]
 8010fe6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010fea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010fee:	ee17 0a90 	vmov	r0, s15
 8010ff2:	f7fe b9cd 	b.w	800f390 <forward_cast+0x1d84>
 8010ff6:	f995 0000 	ldrsb.w	r0, [r5]
 8010ffa:	f7fe bacb 	b.w	800f594 <forward_cast+0x1f88>
 8010ffe:	edd5 7a00 	vldr	s15, [r5]
 8011002:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011006:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801100a:	ee17 0a90 	vmov	r0, s15
 801100e:	f7fe bac1 	b.w	800f594 <forward_cast+0x1f88>
 8011012:	e9d5 0100 	ldrd	r0, r1, [r5]
 8011016:	f7ef fa8b 	bl	8000530 <__aeabi_l2f>
 801101a:	ee07 0a90 	vmov	s15, r0
 801101e:	4b30      	ldr	r3, [pc, #192]	; (80110e0 <forward_cast+0x3ad4>)
 8011020:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011024:	4a32      	ldr	r2, [pc, #200]	; (80110f0 <forward_cast+0x3ae4>)
 8011026:	ee17 0a90 	vmov	r0, s15
 801102a:	f7fe bab3 	b.w	800f594 <forward_cast+0x1f88>
 801102e:	7828      	ldrb	r0, [r5, #0]
 8011030:	f7fe bab0 	b.w	800f594 <forward_cast+0x1f88>
 8011034:	e9d5 0100 	ldrd	r0, r1, [r5]
 8011038:	f7ef fa72 	bl	8000520 <__aeabi_ul2f>
 801103c:	ee07 0a90 	vmov	s15, r0
 8011040:	4a2b      	ldr	r2, [pc, #172]	; (80110f0 <forward_cast+0x3ae4>)
 8011042:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011046:	4b26      	ldr	r3, [pc, #152]	; (80110e0 <forward_cast+0x3ad4>)
 8011048:	ee17 0a90 	vmov	r0, s15
 801104c:	f7fe baa2 	b.w	800f594 <forward_cast+0x1f88>
 8011050:	f9b5 0000 	ldrsh.w	r0, [r5]
 8011054:	f7fe ba9e 	b.w	800f594 <forward_cast+0x1f88>
 8011058:	e9d5 0100 	ldrd	r0, r1, [r5]
 801105c:	f7ef fa68 	bl	8000530 <__aeabi_l2f>
 8011060:	ee07 0a90 	vmov	s15, r0
 8011064:	4b1d      	ldr	r3, [pc, #116]	; (80110dc <forward_cast+0x3ad0>)
 8011066:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801106a:	4a1f      	ldr	r2, [pc, #124]	; (80110e8 <forward_cast+0x3adc>)
 801106c:	ee17 0a90 	vmov	r0, s15
 8011070:	f7fd b9fd 	b.w	800e46e <forward_cast+0xe62>
 8011074:	e9d5 0100 	ldrd	r0, r1, [r5]
 8011078:	f7ef fa5a 	bl	8000530 <__aeabi_l2f>
 801107c:	ee07 0a90 	vmov	s15, r0
 8011080:	4a1a      	ldr	r2, [pc, #104]	; (80110ec <forward_cast+0x3ae0>)
 8011082:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011086:	4b16      	ldr	r3, [pc, #88]	; (80110e0 <forward_cast+0x3ad4>)
 8011088:	ee17 0a90 	vmov	r0, s15
 801108c:	f7fc bd06 	b.w	800da9c <forward_cast+0x490>
 8011090:	e9d5 0100 	ldrd	r0, r1, [r5]
 8011094:	f7ef fa4c 	bl	8000530 <__aeabi_l2f>
 8011098:	ee07 0a90 	vmov	s15, r0
 801109c:	4a0f      	ldr	r2, [pc, #60]	; (80110dc <forward_cast+0x3ad0>)
 801109e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80110a2:	ee17 3a90 	vmov	r3, s15
 80110a6:	b299      	uxth	r1, r3
 80110a8:	4b0b      	ldr	r3, [pc, #44]	; (80110d8 <forward_cast+0x3acc>)
 80110aa:	f7fc bd43 	b.w	800db34 <forward_cast+0x528>
 80110ae:	7828      	ldrb	r0, [r5, #0]
 80110b0:	f7fc bd7c 	b.w	800dbac <forward_cast+0x5a0>
 80110b4:	e9d5 0100 	ldrd	r0, r1, [r5]
 80110b8:	f7ef fa3a 	bl	8000530 <__aeabi_l2f>
 80110bc:	ee07 0a90 	vmov	s15, r0
 80110c0:	4b05      	ldr	r3, [pc, #20]	; (80110d8 <forward_cast+0x3acc>)
 80110c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80110c6:	4a05      	ldr	r2, [pc, #20]	; (80110dc <forward_cast+0x3ad0>)
 80110c8:	ee17 0a90 	vmov	r0, s15
 80110cc:	f7fe b911 	b.w	800f2f2 <forward_cast+0x1ce6>
 80110d0:	7828      	ldrb	r0, [r5, #0]
 80110d2:	f7fe b90e 	b.w	800f2f2 <forward_cast+0x1ce6>
 80110d6:	bf00      	nop
 80110d8:	00041040 	.word	0x00041040
 80110dc:	00042040 	.word	0x00042040
 80110e0:	00840840 	.word	0x00840840
 80110e4:	00842040 	.word	0x00842040
 80110e8:	00060440 	.word	0x00060440
 80110ec:	00040440 	.word	0x00040440
 80110f0:	00841040 	.word	0x00841040
 80110f4:	e9d5 0100 	ldrd	r0, r1, [r5]
 80110f8:	f7ef fa12 	bl	8000520 <__aeabi_ul2f>
 80110fc:	ee07 0a90 	vmov	s15, r0
 8011100:	4ada      	ldr	r2, [pc, #872]	; (801146c <forward_cast+0x3e60>)
 8011102:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011106:	4bda      	ldr	r3, [pc, #872]	; (8011470 <forward_cast+0x3e64>)
 8011108:	ee17 0a90 	vmov	r0, s15
 801110c:	f7fe b8f1 	b.w	800f2f2 <forward_cast+0x1ce6>
 8011110:	f9b5 0000 	ldrsh.w	r0, [r5]
 8011114:	f7fe b8ed 	b.w	800f2f2 <forward_cast+0x1ce6>
 8011118:	f995 0000 	ldrsb.w	r0, [r5]
 801111c:	f7fe b938 	b.w	800f390 <forward_cast+0x1d84>
 8011120:	f995 0000 	ldrsb.w	r0, [r5]
 8011124:	f7fe b8e5 	b.w	800f2f2 <forward_cast+0x1ce6>
 8011128:	edd5 7a00 	vldr	s15, [r5]
 801112c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011130:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011134:	ee17 0a90 	vmov	r0, s15
 8011138:	f7fe b8db 	b.w	800f2f2 <forward_cast+0x1ce6>
 801113c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8011140:	f7ef f9f6 	bl	8000530 <__aeabi_l2f>
 8011144:	ee07 0a90 	vmov	s15, r0
 8011148:	4bc9      	ldr	r3, [pc, #804]	; (8011470 <forward_cast+0x3e64>)
 801114a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801114e:	4ac9      	ldr	r2, [pc, #804]	; (8011474 <forward_cast+0x3e68>)
 8011150:	ee17 0a90 	vmov	r0, s15
 8011154:	f7fe b91c 	b.w	800f390 <forward_cast+0x1d84>
 8011158:	7828      	ldrb	r0, [r5, #0]
 801115a:	f7fe b919 	b.w	800f390 <forward_cast+0x1d84>
 801115e:	e9d5 0100 	ldrd	r0, r1, [r5]
 8011162:	f7ef f9dd 	bl	8000520 <__aeabi_ul2f>
 8011166:	ee07 0a90 	vmov	s15, r0
 801116a:	4ac2      	ldr	r2, [pc, #776]	; (8011474 <forward_cast+0x3e68>)
 801116c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011170:	4bbf      	ldr	r3, [pc, #764]	; (8011470 <forward_cast+0x3e64>)
 8011172:	ee17 0a90 	vmov	r0, s15
 8011176:	f7fe b90b 	b.w	800f390 <forward_cast+0x1d84>
 801117a:	f9b5 0000 	ldrsh.w	r0, [r5]
 801117e:	f7fe b907 	b.w	800f390 <forward_cast+0x1d84>
 8011182:	e9d5 0100 	ldrd	r0, r1, [r5]
 8011186:	f7ef f9d3 	bl	8000530 <__aeabi_l2f>
 801118a:	ee07 0a90 	vmov	s15, r0
 801118e:	4bb9      	ldr	r3, [pc, #740]	; (8011474 <forward_cast+0x3e68>)
 8011190:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011194:	4ab6      	ldr	r2, [pc, #728]	; (8011470 <forward_cast+0x3e64>)
 8011196:	ee17 0a90 	vmov	r0, s15
 801119a:	f7fe b95d 	b.w	800f458 <forward_cast+0x1e4c>
 801119e:	7828      	ldrb	r0, [r5, #0]
 80111a0:	f7fe b95a 	b.w	800f458 <forward_cast+0x1e4c>
 80111a4:	e9d5 0100 	ldrd	r0, r1, [r5]
 80111a8:	f7ef f9ba 	bl	8000520 <__aeabi_ul2f>
 80111ac:	ee07 0a90 	vmov	s15, r0
 80111b0:	4aaf      	ldr	r2, [pc, #700]	; (8011470 <forward_cast+0x3e64>)
 80111b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80111b6:	4baf      	ldr	r3, [pc, #700]	; (8011474 <forward_cast+0x3e68>)
 80111b8:	ee17 0a90 	vmov	r0, s15
 80111bc:	f7fe b94c 	b.w	800f458 <forward_cast+0x1e4c>
 80111c0:	f9b5 0000 	ldrsh.w	r0, [r5]
 80111c4:	f7fe b948 	b.w	800f458 <forward_cast+0x1e4c>
 80111c8:	e9d5 0100 	ldrd	r0, r1, [r5]
 80111cc:	f7ef f9b0 	bl	8000530 <__aeabi_l2f>
 80111d0:	ee07 0a90 	vmov	s15, r0
 80111d4:	4ba6      	ldr	r3, [pc, #664]	; (8011470 <forward_cast+0x3e64>)
 80111d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80111da:	4aa4      	ldr	r2, [pc, #656]	; (801146c <forward_cast+0x3e60>)
 80111dc:	ee17 0a90 	vmov	r0, s15
 80111e0:	f7fe b988 	b.w	800f4f4 <forward_cast+0x1ee8>
 80111e4:	7828      	ldrb	r0, [r5, #0]
 80111e6:	f7fe b985 	b.w	800f4f4 <forward_cast+0x1ee8>
 80111ea:	e9d5 0100 	ldrd	r0, r1, [r5]
 80111ee:	f7ef f997 	bl	8000520 <__aeabi_ul2f>
 80111f2:	ee07 0a90 	vmov	s15, r0
 80111f6:	4a9d      	ldr	r2, [pc, #628]	; (801146c <forward_cast+0x3e60>)
 80111f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80111fc:	4b9c      	ldr	r3, [pc, #624]	; (8011470 <forward_cast+0x3e64>)
 80111fe:	ee17 0a90 	vmov	r0, s15
 8011202:	f7fe b977 	b.w	800f4f4 <forward_cast+0x1ee8>
 8011206:	f9b5 0000 	ldrsh.w	r0, [r5]
 801120a:	f7fe b973 	b.w	800f4f4 <forward_cast+0x1ee8>
 801120e:	f995 0000 	ldrsb.w	r0, [r5]
 8011212:	f7fe b921 	b.w	800f458 <forward_cast+0x1e4c>
 8011216:	edd5 7a00 	vldr	s15, [r5]
 801121a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801121e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011222:	ee17 0a90 	vmov	r0, s15
 8011226:	f7fe b917 	b.w	800f458 <forward_cast+0x1e4c>
 801122a:	e9d5 0100 	ldrd	r0, r1, [r5]
 801122e:	f7ef f97f 	bl	8000530 <__aeabi_l2f>
 8011232:	ee07 0a90 	vmov	s15, r0
 8011236:	4b8f      	ldr	r3, [pc, #572]	; (8011474 <forward_cast+0x3e68>)
 8011238:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801123c:	4a8c      	ldr	r2, [pc, #560]	; (8011470 <forward_cast+0x3e64>)
 801123e:	ee17 0a90 	vmov	r0, s15
 8011242:	f7fc bb26 	b.w	800d892 <forward_cast+0x286>
 8011246:	7828      	ldrb	r0, [r5, #0]
 8011248:	f7fd b9b8 	b.w	800e5bc <forward_cast+0xfb0>
 801124c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8011250:	f7ef f96e 	bl	8000530 <__aeabi_l2f>
 8011254:	ee07 0a90 	vmov	s15, r0
 8011258:	4b85      	ldr	r3, [pc, #532]	; (8011470 <forward_cast+0x3e64>)
 801125a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801125e:	4a83      	ldr	r2, [pc, #524]	; (801146c <forward_cast+0x3e60>)
 8011260:	ee17 0a90 	vmov	r0, s15
 8011264:	f7fe b9e5 	b.w	800f632 <forward_cast+0x2026>
 8011268:	7828      	ldrb	r0, [r5, #0]
 801126a:	f7fe b9e2 	b.w	800f632 <forward_cast+0x2026>
 801126e:	e9d5 0100 	ldrd	r0, r1, [r5]
 8011272:	f7ef f955 	bl	8000520 <__aeabi_ul2f>
 8011276:	ee07 0a90 	vmov	s15, r0
 801127a:	4a7c      	ldr	r2, [pc, #496]	; (801146c <forward_cast+0x3e60>)
 801127c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011280:	4b7b      	ldr	r3, [pc, #492]	; (8011470 <forward_cast+0x3e64>)
 8011282:	ee17 0a90 	vmov	r0, s15
 8011286:	f7fe b9d4 	b.w	800f632 <forward_cast+0x2026>
 801128a:	f9b5 0000 	ldrsh.w	r0, [r5]
 801128e:	f7fe b9d0 	b.w	800f632 <forward_cast+0x2026>
 8011292:	f995 0000 	ldrsb.w	r0, [r5]
 8011296:	f7fe b9cc 	b.w	800f632 <forward_cast+0x2026>
 801129a:	edd5 7a00 	vldr	s15, [r5]
 801129e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80112a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80112a6:	ee17 0a90 	vmov	r0, s15
 80112aa:	f7fe b923 	b.w	800f4f4 <forward_cast+0x1ee8>
 80112ae:	e9d5 0100 	ldrd	r0, r1, [r5]
 80112b2:	f7ef f93d 	bl	8000530 <__aeabi_l2f>
 80112b6:	ee07 0a90 	vmov	s15, r0
 80112ba:	4a6c      	ldr	r2, [pc, #432]	; (801146c <forward_cast+0x3e60>)
 80112bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80112c0:	ee17 3a90 	vmov	r3, s15
 80112c4:	b299      	uxth	r1, r3
 80112c6:	4b6a      	ldr	r3, [pc, #424]	; (8011470 <forward_cast+0x3e64>)
 80112c8:	f7fc bb9e 	b.w	800da08 <forward_cast+0x3fc>
 80112cc:	f9b5 0000 	ldrsh.w	r0, [r5]
 80112d0:	f7fd b819 	b.w	800e306 <forward_cast+0xcfa>
 80112d4:	e9d5 0100 	ldrd	r0, r1, [r5]
 80112d8:	9301      	str	r3, [sp, #4]
 80112da:	f7ef f929 	bl	8000530 <__aeabi_l2f>
 80112de:	ee07 0a90 	vmov	s15, r0
 80112e2:	4a64      	ldr	r2, [pc, #400]	; (8011474 <forward_cast+0x3e68>)
 80112e4:	9b01      	ldr	r3, [sp, #4]
 80112e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80112ea:	ee17 0a90 	vmov	r0, s15
 80112ee:	f7fe ba05 	b.w	800f6fc <forward_cast+0x20f0>
 80112f2:	7828      	ldrb	r0, [r5, #0]
 80112f4:	f7fe ba02 	b.w	800f6fc <forward_cast+0x20f0>
 80112f8:	e9d5 0100 	ldrd	r0, r1, [r5]
 80112fc:	9301      	str	r3, [sp, #4]
 80112fe:	f7ef f90f 	bl	8000520 <__aeabi_ul2f>
 8011302:	ee07 0a90 	vmov	s15, r0
 8011306:	9b01      	ldr	r3, [sp, #4]
 8011308:	4a5a      	ldr	r2, [pc, #360]	; (8011474 <forward_cast+0x3e68>)
 801130a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801130e:	ee17 0a90 	vmov	r0, s15
 8011312:	f7fe b9f3 	b.w	800f6fc <forward_cast+0x20f0>
 8011316:	f9b5 0000 	ldrsh.w	r0, [r5]
 801131a:	f7fe b9ef 	b.w	800f6fc <forward_cast+0x20f0>
 801131e:	e9d5 0100 	ldrd	r0, r1, [r5]
 8011322:	f7ef f905 	bl	8000530 <__aeabi_l2f>
 8011326:	ee07 0a90 	vmov	s15, r0
 801132a:	4b52      	ldr	r3, [pc, #328]	; (8011474 <forward_cast+0x3e68>)
 801132c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011330:	4a4f      	ldr	r2, [pc, #316]	; (8011470 <forward_cast+0x3e64>)
 8011332:	edcd 7a01 	vstr	s15, [sp, #4]
 8011336:	f89d 1004 	ldrb.w	r1, [sp, #4]
 801133a:	f7fe bae2 	b.w	800f902 <forward_cast+0x22f6>
 801133e:	e9d5 0100 	ldrd	r0, r1, [r5]
 8011342:	f7ef f8ed 	bl	8000520 <__aeabi_ul2f>
 8011346:	ee07 0a90 	vmov	s15, r0
 801134a:	4a49      	ldr	r2, [pc, #292]	; (8011470 <forward_cast+0x3e64>)
 801134c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011350:	4b48      	ldr	r3, [pc, #288]	; (8011474 <forward_cast+0x3e68>)
 8011352:	edcd 7a01 	vstr	s15, [sp, #4]
 8011356:	f89d 1004 	ldrb.w	r1, [sp, #4]
 801135a:	f7fe bad2 	b.w	800f902 <forward_cast+0x22f6>
 801135e:	e9d5 0100 	ldrd	r0, r1, [r5]
 8011362:	f7ef f8e5 	bl	8000530 <__aeabi_l2f>
 8011366:	ee07 0a90 	vmov	s15, r0
 801136a:	4b41      	ldr	r3, [pc, #260]	; (8011470 <forward_cast+0x3e64>)
 801136c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011370:	4a3e      	ldr	r2, [pc, #248]	; (801146c <forward_cast+0x3e60>)
 8011372:	ee17 0a90 	vmov	r0, s15
 8011376:	f7fc bfc6 	b.w	800e306 <forward_cast+0xcfa>
 801137a:	f9b5 1000 	ldrsh.w	r1, [r5]
 801137e:	ee07 1a90 	vmov	s15, r1
 8011382:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011386:	f7fc be07 	b.w	800df98 <forward_cast+0x98c>
 801138a:	e9d5 0100 	ldrd	r0, r1, [r5]
 801138e:	f7ef f8cf 	bl	8000530 <__aeabi_l2f>
 8011392:	ee07 0a90 	vmov	s15, r0
 8011396:	4b36      	ldr	r3, [pc, #216]	; (8011470 <forward_cast+0x3e64>)
 8011398:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801139c:	4a36      	ldr	r2, [pc, #216]	; (8011478 <forward_cast+0x3e6c>)
 801139e:	ee17 0a90 	vmov	r0, s15
 80113a2:	f7fd b941 	b.w	800e628 <forward_cast+0x101c>
 80113a6:	7828      	ldrb	r0, [r5, #0]
 80113a8:	f7fd b9aa 	b.w	800e700 <forward_cast+0x10f4>
 80113ac:	e9d5 0100 	ldrd	r0, r1, [r5]
 80113b0:	f7ef f8be 	bl	8000530 <__aeabi_l2f>
 80113b4:	ee07 0a90 	vmov	s15, r0
 80113b8:	4b2e      	ldr	r3, [pc, #184]	; (8011474 <forward_cast+0x3e68>)
 80113ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80113be:	4a2b      	ldr	r2, [pc, #172]	; (801146c <forward_cast+0x3e60>)
 80113c0:	edcd 7a01 	vstr	s15, [sp, #4]
 80113c4:	f99d 1004 	ldrsb.w	r1, [sp, #4]
 80113c8:	f7fd b963 	b.w	800e692 <forward_cast+0x1086>
 80113cc:	f9b5 0000 	ldrsh.w	r0, [r5]
 80113d0:	f7fd b84d 	b.w	800e46e <forward_cast+0xe62>
 80113d4:	e9d5 0100 	ldrd	r0, r1, [r5]
 80113d8:	f7ef f8aa 	bl	8000530 <__aeabi_l2f>
 80113dc:	ee07 0a90 	vmov	s15, r0
 80113e0:	4b22      	ldr	r3, [pc, #136]	; (801146c <forward_cast+0x3e60>)
 80113e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80113e6:	4a25      	ldr	r2, [pc, #148]	; (801147c <forward_cast+0x3e70>)
 80113e8:	ee17 0a90 	vmov	r0, s15
 80113ec:	f7fe bae7 	b.w	800f9be <forward_cast+0x23b2>
 80113f0:	7828      	ldrb	r0, [r5, #0]
 80113f2:	f7fe bae4 	b.w	800f9be <forward_cast+0x23b2>
 80113f6:	e9d5 0100 	ldrd	r0, r1, [r5]
 80113fa:	f7ef f891 	bl	8000520 <__aeabi_ul2f>
 80113fe:	ee07 0a90 	vmov	s15, r0
 8011402:	4a1e      	ldr	r2, [pc, #120]	; (801147c <forward_cast+0x3e70>)
 8011404:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011408:	4b18      	ldr	r3, [pc, #96]	; (801146c <forward_cast+0x3e60>)
 801140a:	ee17 0a90 	vmov	r0, s15
 801140e:	f7fe bad6 	b.w	800f9be <forward_cast+0x23b2>
 8011412:	f9b5 0000 	ldrsh.w	r0, [r5]
 8011416:	f7fe bad2 	b.w	800f9be <forward_cast+0x23b2>
 801141a:	e9d5 0100 	ldrd	r0, r1, [r5]
 801141e:	f7ef f887 	bl	8000530 <__aeabi_l2f>
 8011422:	ee07 0a90 	vmov	s15, r0
 8011426:	4b11      	ldr	r3, [pc, #68]	; (801146c <forward_cast+0x3e60>)
 8011428:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801142c:	4a13      	ldr	r2, [pc, #76]	; (801147c <forward_cast+0x3e70>)
 801142e:	ee17 0a90 	vmov	r0, s15
 8011432:	f7fe bb0d 	b.w	800fa50 <forward_cast+0x2444>
 8011436:	7828      	ldrb	r0, [r5, #0]
 8011438:	f7fe bb0a 	b.w	800fa50 <forward_cast+0x2444>
 801143c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8011440:	f7ef f86e 	bl	8000520 <__aeabi_ul2f>
 8011444:	ee07 0a90 	vmov	s15, r0
 8011448:	4a0c      	ldr	r2, [pc, #48]	; (801147c <forward_cast+0x3e70>)
 801144a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801144e:	4b07      	ldr	r3, [pc, #28]	; (801146c <forward_cast+0x3e60>)
 8011450:	ee17 0a90 	vmov	r0, s15
 8011454:	f7fe bafc 	b.w	800fa50 <forward_cast+0x2444>
 8011458:	f9b5 0000 	ldrsh.w	r0, [r5]
 801145c:	f7fe baf8 	b.w	800fa50 <forward_cast+0x2444>
 8011460:	2300      	movs	r3, #0
 8011462:	685b      	ldr	r3, [r3, #4]
 8011464:	deff      	udf	#255	; 0xff
 8011466:	2300      	movs	r3, #0
 8011468:	681b      	ldr	r3, [r3, #0]
 801146a:	deff      	udf	#255	; 0xff
 801146c:	00042040 	.word	0x00042040
 8011470:	00041040 	.word	0x00041040
 8011474:	00841040 	.word	0x00841040
 8011478:	00040440 	.word	0x00040440
 801147c:	00060440 	.word	0x00060440

08011480 <forward_zipmap>:
 8011480:	6983      	ldr	r3, [r0, #24]
 8011482:	881a      	ldrh	r2, [r3, #0]
 8011484:	2a00      	cmp	r2, #0
 8011486:	d061      	beq.n	801154c <forward_zipmap+0xcc>
 8011488:	b470      	push	{r4, r5, r6}
 801148a:	685d      	ldr	r5, [r3, #4]
 801148c:	686b      	ldr	r3, [r5, #4]
 801148e:	b103      	cbz	r3, 8011492 <forward_zipmap+0x12>
 8011490:	681b      	ldr	r3, [r3, #0]
 8011492:	2a01      	cmp	r2, #1
 8011494:	f000 8090 	beq.w	80115b8 <forward_zipmap+0x138>
 8011498:	6929      	ldr	r1, [r5, #16]
 801149a:	2900      	cmp	r1, #0
 801149c:	f000 8088 	beq.w	80115b0 <forward_zipmap+0x130>
 80114a0:	680c      	ldr	r4, [r1, #0]
 80114a2:	2a02      	cmp	r2, #2
 80114a4:	68d8      	ldr	r0, [r3, #12]
 80114a6:	6999      	ldr	r1, [r3, #24]
 80114a8:	69a3      	ldr	r3, [r4, #24]
 80114aa:	68c4      	ldr	r4, [r0, #12]
 80114ac:	6840      	ldr	r0, [r0, #4]
 80114ae:	6889      	ldr	r1, [r1, #8]
 80114b0:	689b      	ldr	r3, [r3, #8]
 80114b2:	fb00 f404 	mul.w	r4, r0, r4
 80114b6:	f000 8082 	beq.w	80115be <forward_zipmap+0x13e>
 80114ba:	69ea      	ldr	r2, [r5, #28]
 80114bc:	2a00      	cmp	r2, #0
 80114be:	d079      	beq.n	80115b4 <forward_zipmap+0x134>
 80114c0:	6812      	ldr	r2, [r2, #0]
 80114c2:	6990      	ldr	r0, [r2, #24]
 80114c4:	68d5      	ldr	r5, [r2, #12]
 80114c6:	6802      	ldr	r2, [r0, #0]
 80114c8:	686d      	ldr	r5, [r5, #4]
 80114ca:	6886      	ldr	r6, [r0, #8]
 80114cc:	f3c2 12c6 	ubfx	r2, r2, #7, #7
 80114d0:	b3d4      	cbz	r4, 8011548 <forward_zipmap+0xc8>
 80114d2:	2a10      	cmp	r2, #16
 80114d4:	d03c      	beq.n	8011550 <forward_zipmap+0xd0>
 80114d6:	2a08      	cmp	r2, #8
 80114d8:	d01c      	beq.n	8011514 <forward_zipmap+0x94>
 80114da:	2000      	movs	r0, #0
 80114dc:	4684      	mov	ip, r0
 80114de:	e014      	b.n	801150a <forward_zipmap+0x8a>
 80114e0:	4602      	mov	r2, r0
 80114e2:	3001      	adds	r0, #1
 80114e4:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 80114e8:	3308      	adds	r3, #8
 80114ea:	f10c 0c01 	add.w	ip, ip, #1
 80114ee:	ee07 2a90 	vmov	s15, r2
 80114f2:	4564      	cmp	r4, ip
 80114f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80114f8:	ee17 2a90 	vmov	r2, s15
 80114fc:	f843 2c08 	str.w	r2, [r3, #-8]
 8011500:	f851 2b04 	ldr.w	r2, [r1], #4
 8011504:	f843 2c04 	str.w	r2, [r3, #-4]
 8011508:	d01e      	beq.n	8011548 <forward_zipmap+0xc8>
 801150a:	4285      	cmp	r5, r0
 801150c:	d1e8      	bne.n	80114e0 <forward_zipmap+0x60>
 801150e:	2001      	movs	r0, #1
 8011510:	2200      	movs	r2, #0
 8011512:	e7e7      	b.n	80114e4 <forward_zipmap+0x64>
 8011514:	2200      	movs	r2, #0
 8011516:	4610      	mov	r0, r2
 8011518:	4295      	cmp	r5, r2
 801151a:	f100 0001 	add.w	r0, r0, #1
 801151e:	d034      	beq.n	801158a <forward_zipmap+0x10a>
 8011520:	f816 c002 	ldrb.w	ip, [r6, r2]
 8011524:	4284      	cmp	r4, r0
 8011526:	f102 0201 	add.w	r2, r2, #1
 801152a:	f103 0308 	add.w	r3, r3, #8
 801152e:	ee07 ca90 	vmov	s15, ip
 8011532:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011536:	ee17 ca90 	vmov	ip, s15
 801153a:	f843 cc08 	str.w	ip, [r3, #-8]
 801153e:	f851 cb04 	ldr.w	ip, [r1], #4
 8011542:	f843 cc04 	str.w	ip, [r3, #-4]
 8011546:	d1e7      	bne.n	8011518 <forward_zipmap+0x98>
 8011548:	bc70      	pop	{r4, r5, r6}
 801154a:	4770      	bx	lr
 801154c:	6853      	ldr	r3, [r2, #4]
 801154e:	deff      	udf	#255	; 0xff
 8011550:	2000      	movs	r0, #0
 8011552:	4684      	mov	ip, r0
 8011554:	e014      	b.n	8011580 <forward_zipmap+0x100>
 8011556:	4602      	mov	r2, r0
 8011558:	3001      	adds	r0, #1
 801155a:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 801155e:	3308      	adds	r3, #8
 8011560:	f10c 0c01 	add.w	ip, ip, #1
 8011564:	ee07 2a90 	vmov	s15, r2
 8011568:	4564      	cmp	r4, ip
 801156a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801156e:	ee17 2a90 	vmov	r2, s15
 8011572:	f843 2c08 	str.w	r2, [r3, #-8]
 8011576:	f851 2b04 	ldr.w	r2, [r1], #4
 801157a:	f843 2c04 	str.w	r2, [r3, #-4]
 801157e:	d0e3      	beq.n	8011548 <forward_zipmap+0xc8>
 8011580:	4285      	cmp	r5, r0
 8011582:	d1e8      	bne.n	8011556 <forward_zipmap+0xd6>
 8011584:	2001      	movs	r0, #1
 8011586:	2200      	movs	r2, #0
 8011588:	e7e7      	b.n	801155a <forward_zipmap+0xda>
 801158a:	7832      	ldrb	r2, [r6, #0]
 801158c:	4284      	cmp	r4, r0
 801158e:	f103 0308 	add.w	r3, r3, #8
 8011592:	ee07 2a90 	vmov	s15, r2
 8011596:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801159a:	ee17 2a90 	vmov	r2, s15
 801159e:	f843 2c08 	str.w	r2, [r3, #-8]
 80115a2:	f851 2b04 	ldr.w	r2, [r1], #4
 80115a6:	f843 2c04 	str.w	r2, [r3, #-4]
 80115aa:	d0cd      	beq.n	8011548 <forward_zipmap+0xc8>
 80115ac:	2201      	movs	r2, #1
 80115ae:	e7b3      	b.n	8011518 <forward_zipmap+0x98>
 80115b0:	698b      	ldr	r3, [r1, #24]
 80115b2:	deff      	udf	#255	; 0xff
 80115b4:	68d3      	ldr	r3, [r2, #12]
 80115b6:	deff      	udf	#255	; 0xff
 80115b8:	2300      	movs	r3, #0
 80115ba:	685b      	ldr	r3, [r3, #4]
 80115bc:	deff      	udf	#255	; 0xff
 80115be:	2300      	movs	r3, #0
 80115c0:	685b      	ldr	r3, [r3, #4]
 80115c2:	deff      	udf	#255	; 0xff

080115c4 <svc_ovo_output>:
 80115c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80115c8:	4604      	mov	r4, r0
 80115ca:	b08d      	sub	sp, #52	; 0x34
 80115cc:	4618      	mov	r0, r3
 80115ce:	68a6      	ldr	r6, [r4, #8]
 80115d0:	9307      	str	r3, [sp, #28]
 80115d2:	f8d4 b028 	ldr.w	fp, [r4, #40]	; 0x28
 80115d6:	e9cd 1205 	strd	r1, r2, [sp, #20]
 80115da:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80115dc:	9108      	str	r1, [sp, #32]
 80115de:	1e71      	subs	r1, r6, #1
 80115e0:	fb06 f301 	mul.w	r3, r6, r1
 80115e4:	9103      	str	r1, [sp, #12]
 80115e6:	eb00 0c83 	add.w	ip, r0, r3, lsl #2
 80115ea:	eb00 0ec3 	add.w	lr, r0, r3, lsl #3
 80115ee:	2900      	cmp	r1, #0
 80115f0:	f000 80ae 	beq.w	8011750 <svc_ovo_output+0x18c>
 80115f4:	2e00      	cmp	r6, #0
 80115f6:	d050      	beq.n	801169a <svc_ovo_output+0xd6>
 80115f8:	00b1      	lsls	r1, r6, #2
 80115fa:	46b1      	mov	r9, r6
 80115fc:	46a0      	mov	r8, r4
 80115fe:	9002      	str	r0, [sp, #8]
 8011600:	9104      	str	r1, [sp, #16]
 8011602:	2100      	movs	r1, #0
 8011604:	9309      	str	r3, [sp, #36]	; 0x24
 8011606:	468a      	mov	sl, r1
 8011608:	e9cd ec00 	strd	lr, ip, [sp]
 801160c:	e9cd ce0a 	strd	ip, lr, [sp, #40]	; 0x28
 8011610:	4656      	mov	r6, sl
 8011612:	9d05      	ldr	r5, [sp, #20]
 8011614:	f10a 0a01 	add.w	sl, sl, #1
 8011618:	9f02      	ldr	r7, [sp, #8]
 801161a:	2400      	movs	r4, #0
 801161c:	e9dd ec00 	ldrd	lr, ip, [sp]
 8011620:	f898 3024 	ldrb.w	r3, [r8, #36]	; 0x24
 8011624:	f8d8 2034 	ldr.w	r2, [r8, #52]	; 0x34
 8011628:	2b08      	cmp	r3, #8
 801162a:	f000 809f 	beq.w	801176c <svc_ovo_output+0x1a8>
 801162e:	2b10      	cmp	r3, #16
 8011630:	bf0c      	ite	eq
 8011632:	f832 0014 	ldrheq.w	r0, [r2, r4, lsl #1]
 8011636:	f852 0024 	ldrne.w	r0, [r2, r4, lsl #2]
 801163a:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8011770 <svc_ovo_output+0x1ac>
 801163e:	b178      	cbz	r0, 8011660 <svc_ovo_output+0x9c>
 8011640:	4629      	mov	r1, r5
 8011642:	465a      	mov	r2, fp
 8011644:	2300      	movs	r3, #0
 8011646:	3301      	adds	r3, #1
 8011648:	ecf2 6a01 	vldmia	r2!, {s13}
 801164c:	ecb1 7a01 	vldmia	r1!, {s14}
 8011650:	4283      	cmp	r3, r0
 8011652:	eee6 7a87 	vfma.f32	s15, s13, s14
 8011656:	d1f6      	bne.n	8011646 <svc_ovo_output+0x82>
 8011658:	eb0b 0b83 	add.w	fp, fp, r3, lsl #2
 801165c:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 8011660:	42a6      	cmp	r6, r4
 8011662:	ece7 7a01 	vstmia	r7!, {s15}
 8011666:	f84c 4b04 	str.w	r4, [ip], #4
 801166a:	f104 0401 	add.w	r4, r4, #1
 801166e:	d272      	bcs.n	8011756 <svc_ovo_output+0x192>
 8011670:	45a1      	cmp	r9, r4
 8011672:	f84e 6b04 	str.w	r6, [lr], #4
 8011676:	d1d3      	bne.n	8011620 <svc_ovo_output+0x5c>
 8011678:	9b04      	ldr	r3, [sp, #16]
 801167a:	9a02      	ldr	r2, [sp, #8]
 801167c:	441a      	add	r2, r3
 801167e:	9202      	str	r2, [sp, #8]
 8011680:	9a01      	ldr	r2, [sp, #4]
 8011682:	441a      	add	r2, r3
 8011684:	9201      	str	r2, [sp, #4]
 8011686:	9a00      	ldr	r2, [sp, #0]
 8011688:	441a      	add	r2, r3
 801168a:	9b03      	ldr	r3, [sp, #12]
 801168c:	4553      	cmp	r3, sl
 801168e:	9200      	str	r2, [sp, #0]
 8011690:	d1be      	bne.n	8011610 <svc_ovo_output+0x4c>
 8011692:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011694:	464e      	mov	r6, r9
 8011696:	e9dd ce0a 	ldrd	ip, lr, [sp, #40]	; 0x28
 801169a:	2700      	movs	r7, #0
 801169c:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80116a0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80116a4:	46b9      	mov	r9, r7
 80116a6:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80116aa:	f109 0901 	add.w	r9, r9, #1
 80116ae:	454e      	cmp	r6, r9
 80116b0:	d918      	bls.n	80116e4 <svc_ovo_output+0x120>
 80116b2:	464c      	mov	r4, r9
 80116b4:	b19b      	cbz	r3, 80116de <svc_ovo_output+0x11a>
 80116b6:	f1ae 0104 	sub.w	r1, lr, #4
 80116ba:	4650      	mov	r0, sl
 80116bc:	2200      	movs	r2, #0
 80116be:	e003      	b.n	80116c8 <svc_ovo_output+0x104>
 80116c0:	3201      	adds	r2, #1
 80116c2:	3004      	adds	r0, #4
 80116c4:	4293      	cmp	r3, r2
 80116c6:	d00a      	beq.n	80116de <svc_ovo_output+0x11a>
 80116c8:	f851 5f04 	ldr.w	r5, [r1, #4]!
 80116cc:	42a5      	cmp	r5, r4
 80116ce:	d1f7      	bne.n	80116c0 <svc_ovo_output+0xfc>
 80116d0:	f85c 5022 	ldr.w	r5, [ip, r2, lsl #2]
 80116d4:	42bd      	cmp	r5, r7
 80116d6:	d1f3      	bne.n	80116c0 <svc_ovo_output+0xfc>
 80116d8:	6802      	ldr	r2, [r0, #0]
 80116da:	f848 2b04 	str.w	r2, [r8], #4
 80116de:	3401      	adds	r4, #1
 80116e0:	42a6      	cmp	r6, r4
 80116e2:	d1e7      	bne.n	80116b4 <svc_ovo_output+0xf0>
 80116e4:	45cb      	cmp	fp, r9
 80116e6:	f107 0701 	add.w	r7, r7, #1
 80116ea:	d1de      	bne.n	80116aa <svc_ovo_output+0xe6>
 80116ec:	f04f 0800 	mov.w	r8, #0
 80116f0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80116f4:	e9dd ba06 	ldrd	fp, sl, [sp, #24]
 80116f8:	4647      	mov	r7, r8
 80116fa:	f108 0801 	add.w	r8, r8, #1
 80116fe:	45b0      	cmp	r8, r6
 8011700:	d223      	bcs.n	801174a <svc_ovo_output+0x186>
 8011702:	4644      	mov	r4, r8
 8011704:	b1f3      	cbz	r3, 8011744 <svc_ovo_output+0x180>
 8011706:	f1ac 0104 	sub.w	r1, ip, #4
 801170a:	4650      	mov	r0, sl
 801170c:	2200      	movs	r2, #0
 801170e:	e003      	b.n	8011718 <svc_ovo_output+0x154>
 8011710:	3201      	adds	r2, #1
 8011712:	3004      	adds	r0, #4
 8011714:	4293      	cmp	r3, r2
 8011716:	d015      	beq.n	8011744 <svc_ovo_output+0x180>
 8011718:	f851 5f04 	ldr.w	r5, [r1, #4]!
 801171c:	42a5      	cmp	r5, r4
 801171e:	d1f7      	bne.n	8011710 <svc_ovo_output+0x14c>
 8011720:	f85e 5022 	ldr.w	r5, [lr, r2, lsl #2]
 8011724:	42bd      	cmp	r5, r7
 8011726:	d1f3      	bne.n	8011710 <svc_ovo_output+0x14c>
 8011728:	465a      	mov	r2, fp
 801172a:	ecf9 7a01 	vldmia	r9!, {s15}
 801172e:	ed90 7a00 	vldr	s14, [r0]
 8011732:	ecf2 6a01 	vldmia	r2!, {s13}
 8011736:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801173a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801173e:	edcb 7a00 	vstr	s15, [fp]
 8011742:	4693      	mov	fp, r2
 8011744:	3401      	adds	r4, #1
 8011746:	42a6      	cmp	r6, r4
 8011748:	d1dc      	bne.n	8011704 <svc_ovo_output+0x140>
 801174a:	9a03      	ldr	r2, [sp, #12]
 801174c:	4542      	cmp	r2, r8
 801174e:	d1d3      	bne.n	80116f8 <svc_ovo_output+0x134>
 8011750:	b00d      	add	sp, #52	; 0x34
 8011752:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011756:	45a1      	cmp	r9, r4
 8011758:	f84e ab04 	str.w	sl, [lr], #4
 801175c:	d08c      	beq.n	8011678 <svc_ovo_output+0xb4>
 801175e:	f898 3024 	ldrb.w	r3, [r8, #36]	; 0x24
 8011762:	f8d8 2034 	ldr.w	r2, [r8, #52]	; 0x34
 8011766:	2b08      	cmp	r3, #8
 8011768:	f47f af61 	bne.w	801162e <svc_ovo_output+0x6a>
 801176c:	5d10      	ldrb	r0, [r2, r4]
 801176e:	e764      	b.n	801163a <svc_ovo_output+0x76>
 8011770:	00000000 	.word	0x00000000

08011774 <svc_ovo_classification_vote>:
 8011774:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011778:	6884      	ldr	r4, [r0, #8]
 801177a:	4606      	mov	r6, r0
 801177c:	4692      	mov	sl, r2
 801177e:	b3bc      	cbz	r4, 80117f0 <svc_ovo_classification_vote+0x7c>
 8011780:	ea4f 0884 	mov.w	r8, r4, lsl #2
 8011784:	4618      	mov	r0, r3
 8011786:	460d      	mov	r5, r1
 8011788:	2100      	movs	r1, #0
 801178a:	4642      	mov	r2, r8
 801178c:	f000 fd1e 	bl	80121cc <memset>
 8011790:	2c01      	cmp	r4, #1
 8011792:	4603      	mov	r3, r0
 8011794:	d02c      	beq.n	80117f0 <svc_ovo_classification_vote+0x7c>
 8011796:	4480      	add	r8, r0
 8011798:	f1a8 0904 	sub.w	r9, r8, #4
 801179c:	4680      	mov	r8, r0
 801179e:	2001      	movs	r0, #1
 80117a0:	4641      	mov	r1, r8
 80117a2:	f108 0804 	add.w	r8, r8, #4
 80117a6:	4684      	mov	ip, r0
 80117a8:	462a      	mov	r2, r5
 80117aa:	46c6      	mov	lr, r8
 80117ac:	e008      	b.n	80117c0 <svc_ovo_classification_vote+0x4c>
 80117ae:	680f      	ldr	r7, [r1, #0]
 80117b0:	f10c 0c01 	add.w	ip, ip, #1
 80117b4:	f10e 0e04 	add.w	lr, lr, #4
 80117b8:	3701      	adds	r7, #1
 80117ba:	4564      	cmp	r4, ip
 80117bc:	600f      	str	r7, [r1, #0]
 80117be:	d911      	bls.n	80117e4 <svc_ovo_classification_vote+0x70>
 80117c0:	ecf2 7a01 	vldmia	r2!, {s15}
 80117c4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80117c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80117cc:	dcef      	bgt.n	80117ae <svc_ovo_classification_vote+0x3a>
 80117ce:	f8de 7000 	ldr.w	r7, [lr]
 80117d2:	f10c 0c01 	add.w	ip, ip, #1
 80117d6:	f10e 0e04 	add.w	lr, lr, #4
 80117da:	3701      	adds	r7, #1
 80117dc:	4564      	cmp	r4, ip
 80117de:	f84e 7c04 	str.w	r7, [lr, #-4]
 80117e2:	d8ed      	bhi.n	80117c0 <svc_ovo_classification_vote+0x4c>
 80117e4:	3001      	adds	r0, #1
 80117e6:	eba9 0101 	sub.w	r1, r9, r1
 80117ea:	4284      	cmp	r4, r0
 80117ec:	440d      	add	r5, r1
 80117ee:	d1d7      	bne.n	80117a0 <svc_ovo_classification_vote+0x2c>
 80117f0:	f896 1025 	ldrb.w	r1, [r6, #37]	; 0x25
 80117f4:	6c32      	ldr	r2, [r6, #64]	; 0x40
 80117f6:	2908      	cmp	r1, #8
 80117f8:	d041      	beq.n	801187e <svc_ovo_classification_vote+0x10a>
 80117fa:	2910      	cmp	r1, #16
 80117fc:	d01f      	beq.n	801183e <svc_ovo_classification_vote+0xca>
 80117fe:	edd3 7a00 	vldr	s15, [r3]
 8011802:	2c01      	cmp	r4, #1
 8011804:	6811      	ldr	r1, [r2, #0]
 8011806:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801180a:	d914      	bls.n	8011836 <svc_ovo_classification_vote+0xc2>
 801180c:	1f18      	subs	r0, r3, #4
 801180e:	3204      	adds	r2, #4
 8011810:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8011814:	edd3 7a01 	vldr	s15, [r3, #4]
 8011818:	3304      	adds	r3, #4
 801181a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801181e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011822:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011826:	d502      	bpl.n	801182e <svc_ovo_classification_vote+0xba>
 8011828:	eeb0 7a67 	vmov.f32	s14, s15
 801182c:	6811      	ldr	r1, [r2, #0]
 801182e:	429c      	cmp	r4, r3
 8011830:	f102 0204 	add.w	r2, r2, #4
 8011834:	d1ee      	bne.n	8011814 <svc_ovo_classification_vote+0xa0>
 8011836:	f8ca 1000 	str.w	r1, [sl]
 801183a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801183e:	edd3 7a00 	vldr	s15, [r3]
 8011842:	2c01      	cmp	r4, #1
 8011844:	8811      	ldrh	r1, [r2, #0]
 8011846:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801184a:	d9f4      	bls.n	8011836 <svc_ovo_classification_vote+0xc2>
 801184c:	1f18      	subs	r0, r3, #4
 801184e:	3202      	adds	r2, #2
 8011850:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8011854:	edd3 7a01 	vldr	s15, [r3, #4]
 8011858:	3304      	adds	r3, #4
 801185a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801185e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011862:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011866:	dd02      	ble.n	801186e <svc_ovo_classification_vote+0xfa>
 8011868:	eeb0 7a67 	vmov.f32	s14, s15
 801186c:	8811      	ldrh	r1, [r2, #0]
 801186e:	42a3      	cmp	r3, r4
 8011870:	f102 0202 	add.w	r2, r2, #2
 8011874:	d1ee      	bne.n	8011854 <svc_ovo_classification_vote+0xe0>
 8011876:	f8ca 1000 	str.w	r1, [sl]
 801187a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801187e:	edd3 7a00 	vldr	s15, [r3]
 8011882:	2c01      	cmp	r4, #1
 8011884:	7811      	ldrb	r1, [r2, #0]
 8011886:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801188a:	d9d4      	bls.n	8011836 <svc_ovo_classification_vote+0xc2>
 801188c:	1f18      	subs	r0, r3, #4
 801188e:	3201      	adds	r2, #1
 8011890:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8011894:	edd3 7a01 	vldr	s15, [r3, #4]
 8011898:	3304      	adds	r3, #4
 801189a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801189e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80118a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118a6:	dd02      	ble.n	80118ae <svc_ovo_classification_vote+0x13a>
 80118a8:	eeb0 7a67 	vmov.f32	s14, s15
 80118ac:	7811      	ldrb	r1, [r2, #0]
 80118ae:	42a3      	cmp	r3, r4
 80118b0:	f102 0201 	add.w	r2, r2, #1
 80118b4:	d1ee      	bne.n	8011894 <svc_ovo_classification_vote+0x120>
 80118b6:	f8ca 1000 	str.w	r1, [sl]
 80118ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80118be:	bf00      	nop

080118c0 <svc_iter_prob_estimate>:
 80118c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80118c4:	b089      	sub	sp, #36	; 0x24
 80118c6:	6883      	ldr	r3, [r0, #8]
 80118c8:	4615      	mov	r5, r2
 80118ca:	fb03 f903 	mul.w	r9, r3, r3
 80118ce:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80118d0:	9304      	str	r3, [sp, #16]
 80118d2:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 80118d6:	9203      	str	r2, [sp, #12]
 80118d8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80118da:	eb02 09c9 	add.w	r9, r2, r9, lsl #3
 80118de:	2b00      	cmp	r3, #0
 80118e0:	f000 8155 	beq.w	8011b8e <svc_iter_prob_estimate+0x2ce>
 80118e4:	2b01      	cmp	r3, #1
 80118e6:	f000 8155 	beq.w	8011b94 <svc_iter_prob_estimate+0x2d4>
 80118ea:	f103 0b01 	add.w	fp, r3, #1
 80118ee:	3204      	adds	r2, #4
 80118f0:	f103 3eff 	add.w	lr, r3, #4294967295
 80118f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80118f8:	ea4f 088b 	mov.w	r8, fp, lsl #2
 80118fc:	f8cd 9008 	str.w	r9, [sp, #8]
 8011900:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8011904:	f04f 0c01 	mov.w	ip, #1
 8011908:	f1a8 0604 	sub.w	r6, r8, #4
 801190c:	f1a8 0a08 	sub.w	sl, r8, #8
 8011910:	4617      	mov	r7, r2
 8011912:	4699      	mov	r9, r3
 8011914:	9201      	str	r2, [sp, #4]
 8011916:	4608      	mov	r0, r1
 8011918:	eb0a 0207 	add.w	r2, sl, r7
 801191c:	463c      	mov	r4, r7
 801191e:	4663      	mov	r3, ip
 8011920:	edd0 7a00 	vldr	s15, [r0]
 8011924:	3301      	adds	r3, #1
 8011926:	ece4 7a01 	vstmia	r4!, {s15}
 801192a:	4599      	cmp	r9, r3
 801192c:	ecf0 7a01 	vldmia	r0!, {s15}
 8011930:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011934:	edc2 7a00 	vstr	s15, [r2]
 8011938:	4432      	add	r2, r6
 801193a:	d8f1      	bhi.n	8011920 <svc_iter_prob_estimate+0x60>
 801193c:	f10c 0c01 	add.w	ip, ip, #1
 8011940:	4471      	add	r1, lr
 8011942:	4447      	add	r7, r8
 8011944:	f1ae 0e04 	sub.w	lr, lr, #4
 8011948:	45e1      	cmp	r9, ip
 801194a:	d1e4      	bne.n	8011916 <svc_iter_prob_estimate+0x56>
 801194c:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8011950:	eddd 7a04 	vldr	s15, [sp, #16]
 8011954:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011958:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801195c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801195e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011962:	9b03      	ldr	r3, [sp, #12]
 8011964:	f1aa 0004 	sub.w	r0, sl, #4
 8011968:	f04f 0e00 	mov.w	lr, #0
 801196c:	f8cd 9018 	str.w	r9, [sp, #24]
 8011970:	461e      	mov	r6, r3
 8011972:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8011976:	1882      	adds	r2, r0, r2
 8011978:	eb03 0b00 	add.w	fp, r3, r0
 801197c:	eddf 6a88 	vldr	s13, [pc, #544]	; 8011ba0 <svc_iter_prob_estimate+0x2e0>
 8011980:	9202      	str	r2, [sp, #8]
 8011982:	461a      	mov	r2, r3
 8011984:	f8dd 9010 	ldr.w	r9, [sp, #16]
 8011988:	4677      	mov	r7, lr
 801198a:	3204      	adds	r2, #4
 801198c:	46ac      	mov	ip, r5
 801198e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8011992:	9205      	str	r2, [sp, #20]
 8011994:	f1aa 0208 	sub.w	r2, sl, #8
 8011998:	9507      	str	r5, [sp, #28]
 801199a:	9201      	str	r2, [sp, #4]
 801199c:	ecac 6a01 	vstmia	ip!, {s12}
 80119a0:	edc3 6a00 	vstr	s13, [r3]
 80119a4:	b34f      	cbz	r7, 80119fa <svc_iter_prob_estimate+0x13a>
 80119a6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80119a8:	2f01      	cmp	r7, #1
 80119aa:	9c03      	ldr	r4, [sp, #12]
 80119ac:	eb02 0287 	add.w	r2, r2, r7, lsl #2
 80119b0:	edd2 7a00 	vldr	s15, [r2]
 80119b4:	eb04 0287 	add.w	r2, r4, r7, lsl #2
 80119b8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80119bc:	edc3 7a00 	vstr	s15, [r3]
 80119c0:	6811      	ldr	r1, [r2, #0]
 80119c2:	eb04 028e 	add.w	r2, r4, lr, lsl #2
 80119c6:	6011      	str	r1, [r2, #0]
 80119c8:	ea4f 0187 	mov.w	r1, r7, lsl #2
 80119cc:	ea4f 028e 	mov.w	r2, lr, lsl #2
 80119d0:	d013      	beq.n	80119fa <svc_iter_prob_estimate+0x13a>
 80119d2:	9c02      	ldr	r4, [sp, #8]
 80119d4:	4421      	add	r1, r4
 80119d6:	9c05      	ldr	r4, [sp, #20]
 80119d8:	4422      	add	r2, r4
 80119da:	465c      	mov	r4, fp
 80119dc:	ed91 7a00 	vldr	s14, [r1]
 80119e0:	4401      	add	r1, r0
 80119e2:	edd3 7a00 	vldr	s15, [r3]
 80119e6:	eee7 7a07 	vfma.f32	s15, s14, s14
 80119ea:	edc3 7a00 	vstr	s15, [r3]
 80119ee:	6825      	ldr	r5, [r4, #0]
 80119f0:	4404      	add	r4, r0
 80119f2:	f842 5b04 	str.w	r5, [r2], #4
 80119f6:	42b2      	cmp	r2, r6
 80119f8:	d1f0      	bne.n	80119dc <svc_iter_prob_estimate+0x11c>
 80119fa:	3701      	adds	r7, #1
 80119fc:	45b9      	cmp	r9, r7
 80119fe:	d020      	beq.n	8011a42 <svc_iter_prob_estimate+0x182>
 8011a00:	44ce      	add	lr, r9
 8011a02:	9a01      	ldr	r2, [sp, #4]
 8011a04:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8011a06:	1d34      	adds	r4, r6, #4
 8011a08:	4442      	add	r2, r8
 8011a0a:	4641      	mov	r1, r8
 8011a0c:	eb05 058e 	add.w	r5, r5, lr, lsl #2
 8011a10:	ed92 7a00 	vldr	s14, [r2]
 8011a14:	edd3 7a00 	vldr	s15, [r3]
 8011a18:	eee7 7a07 	vfma.f32	s15, s14, s14
 8011a1c:	edc3 7a00 	vstr	s15, [r3]
 8011a20:	edd2 7a00 	vldr	s15, [r2]
 8011a24:	4402      	add	r2, r0
 8011a26:	ecb1 7a01 	vldmia	r1!, {s14}
 8011a2a:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 8011a2e:	42a9      	cmp	r1, r5
 8011a30:	ece4 7a01 	vstmia	r4!, {s15}
 8011a34:	d1ec      	bne.n	8011a10 <svc_iter_prob_estimate+0x150>
 8011a36:	4453      	add	r3, sl
 8011a38:	44d0      	add	r8, sl
 8011a3a:	4456      	add	r6, sl
 8011a3c:	f10b 0b04 	add.w	fp, fp, #4
 8011a40:	e7ac      	b.n	801199c <svc_iter_prob_estimate+0xdc>
 8011a42:	e9dd 9506 	ldrd	r9, r5, [sp, #24]
 8011a46:	eddd 7a04 	vldr	s15, [sp, #16]
 8011a4a:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8011a4e:	9b04      	ldr	r3, [sp, #16]
 8011a50:	eeb8 3ae7 	vcvt.f32.s32	s6, s15
 8011a54:	eddf 7a53 	vldr	s15, [pc, #332]	; 8011ba4 <svc_iter_prob_estimate+0x2e4>
 8011a58:	ebc3 7683 	rsb	r6, r3, r3, lsl #30
 8011a5c:	9a03      	ldr	r2, [sp, #12]
 8011a5e:	ea4f 0883 	mov.w	r8, r3, lsl #2
 8011a62:	ed9f 4a51 	vldr	s8, [pc, #324]	; 8011ba8 <svc_iter_prob_estimate+0x2e8>
 8011a66:	eec7 3a83 	vdiv.f32	s7, s15, s6
 8011a6a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8011a6e:	eb05 0b83 	add.w	fp, r5, r3, lsl #2
 8011a72:	eddf 4a4b 	vldr	s9, [pc, #300]	; 8011ba0 <svc_iter_prob_estimate+0x2e0>
 8011a76:	eb09 0783 	add.w	r7, r9, r3, lsl #2
 8011a7a:	2364      	movs	r3, #100	; 0x64
 8011a7c:	00b6      	lsls	r6, r6, #2
 8011a7e:	9202      	str	r2, [sp, #8]
 8011a80:	9301      	str	r3, [sp, #4]
 8011a82:	9b04      	ldr	r3, [sp, #16]
 8011a84:	2b00      	cmp	r3, #0
 8011a86:	d077      	beq.n	8011b78 <svc_iter_prob_estimate+0x2b8>
 8011a88:	462c      	mov	r4, r5
 8011a8a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8011ba0 <svc_iter_prob_estimate+0x2e0>
 8011a8e:	4648      	mov	r0, r9
 8011a90:	9902      	ldr	r1, [sp, #8]
 8011a92:	eddf 7a43 	vldr	s15, [pc, #268]	; 8011ba0 <svc_iter_prob_estimate+0x2e0>
 8011a96:	1873      	adds	r3, r6, r1
 8011a98:	462a      	mov	r2, r5
 8011a9a:	ece0 4a01 	vstmia	r0!, {s9}
 8011a9e:	ecf3 6a01 	vldmia	r3!, {s13}
 8011aa2:	ecb2 7a01 	vldmia	r2!, {s14}
 8011aa6:	428b      	cmp	r3, r1
 8011aa8:	eee6 7a87 	vfma.f32	s15, s13, s14
 8011aac:	ed40 7a01 	vstr	s15, [r0, #-4]
 8011ab0:	d1f5      	bne.n	8011a9e <svc_iter_prob_estimate+0x1de>
 8011ab2:	ecb4 7a01 	vldmia	r4!, {s14}
 8011ab6:	eb03 0108 	add.w	r1, r3, r8
 8011aba:	45a3      	cmp	fp, r4
 8011abc:	eee7 5a87 	vfma.f32	s11, s15, s14
 8011ac0:	d1e7      	bne.n	8011a92 <svc_iter_prob_estimate+0x1d2>
 8011ac2:	464b      	mov	r3, r9
 8011ac4:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8011ba0 <svc_iter_prob_estimate+0x2e0>
 8011ac8:	ecf3 7a01 	vldmia	r3!, {s15}
 8011acc:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8011ad0:	42bb      	cmp	r3, r7
 8011ad2:	eef0 7ae7 	vabs.f32	s15, s15
 8011ad6:	fe87 7a27 	vmaxnm.f32	s14, s14, s15
 8011ada:	d1f5      	bne.n	8011ac8 <svc_iter_prob_estimate+0x208>
 8011adc:	eeb4 7ae3 	vcmpe.f32	s14, s7
 8011ae0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ae4:	d445      	bmi.n	8011b72 <svc_iter_prob_estimate+0x2b2>
 8011ae6:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8011aea:	46ae      	mov	lr, r5
 8011aec:	464c      	mov	r4, r9
 8011aee:	9802      	ldr	r0, [sp, #8]
 8011af0:	edd4 6a00 	vldr	s13, [r4]
 8011af4:	1831      	adds	r1, r6, r0
 8011af6:	ed9c 7a00 	vldr	s14, [ip]
 8011afa:	462a      	mov	r2, r5
 8011afc:	ee75 6ae6 	vsub.f32	s13, s11, s13
 8011b00:	edde 7a00 	vldr	s15, [lr]
 8011b04:	ee37 7a04 	vadd.f32	s14, s14, s8
 8011b08:	464b      	mov	r3, r9
 8011b0a:	ee86 6a87 	vdiv.f32	s12, s13, s14
 8011b0e:	ee77 7a86 	vadd.f32	s15, s15, s12
 8011b12:	ee76 6a05 	vadd.f32	s13, s12, s10
 8011b16:	ecee 7a01 	vstmia	lr!, {s15}
 8011b1a:	ecf4 7a01 	vldmia	r4!, {s15}
 8011b1e:	ee66 2aa6 	vmul.f32	s5, s13, s13
 8011b22:	ed9c 2a00 	vldr	s4, [ip]
 8011b26:	ee85 7a26 	vdiv.f32	s14, s10, s13
 8011b2a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8011b2e:	eef0 6a65 	vmov.f32	s13, s11
 8011b32:	eee2 7a06 	vfma.f32	s15, s4, s12
 8011b36:	eee7 6a86 	vfma.f32	s13, s15, s12
 8011b3a:	eec6 5aa2 	vdiv.f32	s11, s13, s5
 8011b3e:	ecf1 6a01 	vldmia	r1!, {s13}
 8011b42:	edd3 7a00 	vldr	s15, [r3]
 8011b46:	4281      	cmp	r1, r0
 8011b48:	eee6 7a86 	vfma.f32	s15, s13, s12
 8011b4c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011b50:	ece3 7a01 	vstmia	r3!, {s15}
 8011b54:	edd2 7a00 	vldr	s15, [r2]
 8011b58:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011b5c:	ece2 7a01 	vstmia	r2!, {s15}
 8011b60:	d1ed      	bne.n	8011b3e <svc_iter_prob_estimate+0x27e>
 8011b62:	42a7      	cmp	r7, r4
 8011b64:	4440      	add	r0, r8
 8011b66:	44d4      	add	ip, sl
 8011b68:	d1c2      	bne.n	8011af0 <svc_iter_prob_estimate+0x230>
 8011b6a:	9b01      	ldr	r3, [sp, #4]
 8011b6c:	3b01      	subs	r3, #1
 8011b6e:	9301      	str	r3, [sp, #4]
 8011b70:	d187      	bne.n	8011a82 <svc_iter_prob_estimate+0x1c2>
 8011b72:	b009      	add	sp, #36	; 0x24
 8011b74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b78:	eeb5 3ac0 	vcmpe.f32	s6, #0.0
 8011b7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b80:	dcf7      	bgt.n	8011b72 <svc_iter_prob_estimate+0x2b2>
 8011b82:	9b01      	ldr	r3, [sp, #4]
 8011b84:	3b01      	subs	r3, #1
 8011b86:	9301      	str	r3, [sp, #4]
 8011b88:	f47f af7b 	bne.w	8011a82 <svc_iter_prob_estimate+0x1c2>
 8011b8c:	e7f1      	b.n	8011b72 <svc_iter_prob_estimate+0x2b2>
 8011b8e:	f04f 0a04 	mov.w	sl, #4
 8011b92:	e758      	b.n	8011a46 <svc_iter_prob_estimate+0x186>
 8011b94:	4613      	mov	r3, r2
 8011b96:	f04f 0b02 	mov.w	fp, #2
 8011b9a:	3304      	adds	r3, #4
 8011b9c:	9301      	str	r3, [sp, #4]
 8011b9e:	e6d7      	b.n	8011950 <svc_iter_prob_estimate+0x90>
 8011ba0:	00000000 	.word	0x00000000
 8011ba4:	3ba3d70a 	.word	0x3ba3d70a
 8011ba8:	34000000 	.word	0x34000000

08011bac <svc_decoder>:
 8011bac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011bb0:	ed2d 8b06 	vpush	{d8-d10}
 8011bb4:	e9d3 9a01 	ldrd	r9, sl, [r3, #4]
 8011bb8:	b087      	sub	sp, #28
 8011bba:	461d      	mov	r5, r3
 8011bbc:	f10a 36ff 	add.w	r6, sl, #4294967295
 8011bc0:	ee0a 2a10 	vmov	s20, r2
 8011bc4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8011bc6:	4607      	mov	r7, r0
 8011bc8:	fb0a f606 	mul.w	r6, sl, r6
 8011bcc:	7d5b      	ldrb	r3, [r3, #21]
 8011bce:	eb02 0889 	add.w	r8, r2, r9, lsl #2
 8011bd2:	7d2a      	ldrb	r2, [r5, #20]
 8011bd4:	0876      	lsrs	r6, r6, #1
 8011bd6:	9102      	str	r1, [sp, #8]
 8011bd8:	9203      	str	r2, [sp, #12]
 8011bda:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8011bde:	2b03      	cmp	r3, #3
 8011be0:	f200 8146 	bhi.w	8011e70 <svc_decoder+0x2c4>
 8011be4:	e8df f003 	tbb	[pc, r3]
 8011be8:	0258ab8e 	.word	0x0258ab8e
 8011bec:	edd5 8a06 	vldr	s17, [r5, #24]
 8011bf0:	ed95 8a07 	vldr	s16, [r5, #28]
 8011bf4:	682b      	ldr	r3, [r5, #0]
 8011bf6:	6aec      	ldr	r4, [r5, #44]	; 0x2c
 8011bf8:	f1b9 0f00 	cmp.w	r9, #0
 8011bfc:	d024      	beq.n	8011c48 <svc_decoder+0x9c>
 8011bfe:	f8dd b058 	ldr.w	fp, [sp, #88]	; 0x58
 8011c02:	ee09 6a10 	vmov	s18, r6
 8011c06:	ea4f 0983 	mov.w	r9, r3, lsl #2
 8011c0a:	461f      	mov	r7, r3
 8011c0c:	465e      	mov	r6, fp
 8011c0e:	4683      	mov	fp, r0
 8011c10:	2f00      	cmp	r7, #0
 8011c12:	f000 8124 	beq.w	8011e5e <svc_decoder+0x2b2>
 8011c16:	eddf 7a99 	vldr	s15, [pc, #612]	; 8011e7c <svc_decoder+0x2d0>
 8011c1a:	465b      	mov	r3, fp
 8011c1c:	eb04 0209 	add.w	r2, r4, r9
 8011c20:	ecb4 7a01 	vldmia	r4!, {s14}
 8011c24:	ecf3 6a01 	vldmia	r3!, {s13}
 8011c28:	4294      	cmp	r4, r2
 8011c2a:	eee6 7a87 	vfma.f32	s15, s13, s14
 8011c2e:	d1f7      	bne.n	8011c20 <svc_decoder+0x74>
 8011c30:	eeb0 0a48 	vmov.f32	s0, s16
 8011c34:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8011c38:	f003 f92a 	bl	8014e90 <tanhf>
 8011c3c:	eca6 0a01 	vstmia	r6!, {s0}
 8011c40:	45b0      	cmp	r8, r6
 8011c42:	d1e5      	bne.n	8011c10 <svc_decoder+0x64>
 8011c44:	ee19 6a10 	vmov	r6, s18
 8011c48:	2300      	movs	r3, #0
 8011c4a:	ee08 3a90 	vmov	s17, r3
 8011c4e:	9b03      	ldr	r3, [sp, #12]
 8011c50:	9916      	ldr	r1, [sp, #88]	; 0x58
 8011c52:	2b00      	cmp	r3, #0
 8011c54:	f040 80b2 	bne.w	8011dbc <svc_decoder+0x210>
 8011c58:	9c02      	ldr	r4, [sp, #8]
 8011c5a:	4633      	mov	r3, r6
 8011c5c:	4628      	mov	r0, r5
 8011c5e:	4622      	mov	r2, r4
 8011c60:	f7ff fcb0 	bl	80115c4 <svc_ovo_output>
 8011c64:	4633      	mov	r3, r6
 8011c66:	ee1a 2a10 	vmov	r2, s20
 8011c6a:	4621      	mov	r1, r4
 8011c6c:	4628      	mov	r0, r5
 8011c6e:	f7ff fd81 	bl	8011774 <svc_ovo_classification_vote>
 8011c72:	f1ba 0f02 	cmp.w	sl, #2
 8011c76:	d108      	bne.n	8011c8a <svc_decoder+0xde>
 8011c78:	9b02      	ldr	r3, [sp, #8]
 8011c7a:	edd3 7a00 	vldr	s15, [r3]
 8011c7e:	eeb1 7a67 	vneg.f32	s14, s15
 8011c82:	edc3 7a01 	vstr	s15, [r3, #4]
 8011c86:	ed83 7a00 	vstr	s14, [r3]
 8011c8a:	ee18 0a90 	vmov	r0, s17
 8011c8e:	b007      	add	sp, #28
 8011c90:	ecbd 8b06 	vpop	{d8-d10}
 8011c94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c98:	ed95 8a06 	vldr	s16, [r5, #24]
 8011c9c:	682a      	ldr	r2, [r5, #0]
 8011c9e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8011ca0:	f1b9 0f00 	cmp.w	r9, #0
 8011ca4:	d0d0      	beq.n	8011c48 <svc_decoder+0x9c>
 8011ca6:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8011ca8:	f04f 0b00 	mov.w	fp, #0
 8011cac:	0091      	lsls	r1, r2, #2
 8011cae:	ee08 6a90 	vmov	s17, r6
 8011cb2:	9504      	str	r5, [sp, #16]
 8011cb4:	465e      	mov	r6, fp
 8011cb6:	f8cd 8014 	str.w	r8, [sp, #20]
 8011cba:	468b      	mov	fp, r1
 8011cbc:	46a0      	mov	r8, r4
 8011cbe:	4605      	mov	r5, r0
 8011cc0:	4617      	mov	r7, r2
 8011cc2:	461c      	mov	r4, r3
 8011cc4:	2f00      	cmp	r7, #0
 8011cc6:	f000 80cd 	beq.w	8011e64 <svc_decoder+0x2b8>
 8011cca:	ed9f 0a6c 	vldr	s0, [pc, #432]	; 8011e7c <svc_decoder+0x2d0>
 8011cce:	462b      	mov	r3, r5
 8011cd0:	eb04 020b 	add.w	r2, r4, fp
 8011cd4:	ecb4 7a01 	vldmia	r4!, {s14}
 8011cd8:	ecf3 7a01 	vldmia	r3!, {s15}
 8011cdc:	4294      	cmp	r4, r2
 8011cde:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011ce2:	eea7 0aa7 	vfma.f32	s0, s15, s15
 8011ce6:	d1f5      	bne.n	8011cd4 <svc_decoder+0x128>
 8011ce8:	ee20 0a48 	vnmul.f32	s0, s0, s16
 8011cec:	f002 fee4 	bl	8014ab8 <expf>
 8011cf0:	3601      	adds	r6, #1
 8011cf2:	eca8 0a01 	vstmia	r8!, {s0}
 8011cf6:	45b1      	cmp	r9, r6
 8011cf8:	d1e4      	bne.n	8011cc4 <svc_decoder+0x118>
 8011cfa:	ee18 6a90 	vmov	r6, s17
 8011cfe:	e9dd 5804 	ldrd	r5, r8, [sp, #16]
 8011d02:	e7a1      	b.n	8011c48 <svc_decoder+0x9c>
 8011d04:	682a      	ldr	r2, [r5, #0]
 8011d06:	6aec      	ldr	r4, [r5, #44]	; 0x2c
 8011d08:	f1b9 0f00 	cmp.w	r9, #0
 8011d0c:	d09c      	beq.n	8011c48 <svc_decoder+0x9c>
 8011d0e:	ea4f 0b82 	mov.w	fp, r2, lsl #2
 8011d12:	9816      	ldr	r0, [sp, #88]	; 0x58
 8011d14:	2100      	movs	r1, #0
 8011d16:	eddf 7a59 	vldr	s15, [pc, #356]	; 8011e7c <svc_decoder+0x2d0>
 8011d1a:	b152      	cbz	r2, 8011d32 <svc_decoder+0x186>
 8011d1c:	463b      	mov	r3, r7
 8011d1e:	eb04 0c0b 	add.w	ip, r4, fp
 8011d22:	ecb4 7a01 	vldmia	r4!, {s14}
 8011d26:	ecf3 6a01 	vldmia	r3!, {s13}
 8011d2a:	4564      	cmp	r4, ip
 8011d2c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8011d30:	d1f7      	bne.n	8011d22 <svc_decoder+0x176>
 8011d32:	3101      	adds	r1, #1
 8011d34:	ece0 7a01 	vstmia	r0!, {s15}
 8011d38:	4589      	cmp	r9, r1
 8011d3a:	d1ec      	bne.n	8011d16 <svc_decoder+0x16a>
 8011d3c:	e784      	b.n	8011c48 <svc_decoder+0x9c>
 8011d3e:	ed95 9a06 	vldr	s18, [r5, #24]
 8011d42:	edd5 8a07 	vldr	s17, [r5, #28]
 8011d46:	682a      	ldr	r2, [r5, #0]
 8011d48:	6a29      	ldr	r1, [r5, #32]
 8011d4a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8011d4c:	f1b9 0f00 	cmp.w	r9, #0
 8011d50:	f43f af7a 	beq.w	8011c48 <svc_decoder+0x9c>
 8011d54:	ee07 1a90 	vmov	s15, r1
 8011d58:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8011d5a:	f04f 0b00 	mov.w	fp, #0
 8011d5e:	0091      	lsls	r1, r2, #2
 8011d60:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8011d64:	ee09 6a90 	vmov	s19, r6
 8011d68:	9504      	str	r5, [sp, #16]
 8011d6a:	465e      	mov	r6, fp
 8011d6c:	f8cd 8014 	str.w	r8, [sp, #20]
 8011d70:	468b      	mov	fp, r1
 8011d72:	46a0      	mov	r8, r4
 8011d74:	4605      	mov	r5, r0
 8011d76:	4617      	mov	r7, r2
 8011d78:	461c      	mov	r4, r3
 8011d7a:	2f00      	cmp	r7, #0
 8011d7c:	d075      	beq.n	8011e6a <svc_decoder+0x2be>
 8011d7e:	eddf 7a3f 	vldr	s15, [pc, #252]	; 8011e7c <svc_decoder+0x2d0>
 8011d82:	462b      	mov	r3, r5
 8011d84:	eb04 020b 	add.w	r2, r4, fp
 8011d88:	ecb4 7a01 	vldmia	r4!, {s14}
 8011d8c:	ecf3 6a01 	vldmia	r3!, {s13}
 8011d90:	4294      	cmp	r4, r2
 8011d92:	eee6 7a87 	vfma.f32	s15, s13, s14
 8011d96:	d1f7      	bne.n	8011d88 <svc_decoder+0x1dc>
 8011d98:	eeb0 0a68 	vmov.f32	s0, s17
 8011d9c:	eea9 0a27 	vfma.f32	s0, s18, s15
 8011da0:	3601      	adds	r6, #1
 8011da2:	eef0 0a48 	vmov.f32	s1, s16
 8011da6:	f002 ff13 	bl	8014bd0 <powf>
 8011daa:	eca8 0a01 	vstmia	r8!, {s0}
 8011dae:	45b1      	cmp	r9, r6
 8011db0:	d1e3      	bne.n	8011d7a <svc_decoder+0x1ce>
 8011db2:	ee19 6a90 	vmov	r6, s19
 8011db6:	e9dd 5804 	ldrd	r5, r8, [sp, #16]
 8011dba:	e745      	b.n	8011c48 <svc_decoder+0x9c>
 8011dbc:	4633      	mov	r3, r6
 8011dbe:	4642      	mov	r2, r8
 8011dc0:	4628      	mov	r0, r5
 8011dc2:	f7ff fbff 	bl	80115c4 <svc_ovo_output>
 8011dc6:	4633      	mov	r3, r6
 8011dc8:	ee1a 2a10 	vmov	r2, s20
 8011dcc:	4641      	mov	r1, r8
 8011dce:	4628      	mov	r0, r5
 8011dd0:	f7ff fcd0 	bl	8011774 <svc_ovo_classification_vote>
 8011dd4:	68ab      	ldr	r3, [r5, #8]
 8011dd6:	f103 3bff 	add.w	fp, r3, #4294967295
 8011dda:	fb03 fb0b 	mul.w	fp, r3, fp
 8011dde:	ea5f 0b5b 	movs.w	fp, fp, lsr #1
 8011de2:	e9d5 9a0e 	ldrd	r9, sl, [r5, #56]	; 0x38
 8011de6:	d01d      	beq.n	8011e24 <svc_decoder+0x278>
 8011de8:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8011dec:	4647      	mov	r7, r8
 8011dee:	2400      	movs	r4, #0
 8011df0:	ecf7 6a01 	vldmia	r7!, {s13}
 8011df4:	ecb9 7a01 	vldmia	r9!, {s14}
 8011df8:	ecfa 7a01 	vldmia	sl!, {s15}
 8011dfc:	eee6 7a87 	vfma.f32	s15, s13, s14
 8011e00:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8011e04:	eeb1 0a67 	vneg.f32	s0, s15
 8011e08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e0c:	db19      	blt.n	8011e42 <svc_decoder+0x296>
 8011e0e:	f002 fe53 	bl	8014ab8 <expf>
 8011e12:	ee30 7a08 	vadd.f32	s14, s0, s16
 8011e16:	3401      	adds	r4, #1
 8011e18:	eec0 7a07 	vdiv.f32	s15, s0, s14
 8011e1c:	45a3      	cmp	fp, r4
 8011e1e:	ed47 7a01 	vstr	s15, [r7, #-4]
 8011e22:	d1e5      	bne.n	8011df0 <svc_decoder+0x244>
 8011e24:	4628      	mov	r0, r5
 8011e26:	ee1a 3a10 	vmov	r3, s20
 8011e2a:	9a02      	ldr	r2, [sp, #8]
 8011e2c:	4641      	mov	r1, r8
 8011e2e:	9600      	str	r6, [sp, #0]
 8011e30:	f7ff fd46 	bl	80118c0 <svc_iter_prob_estimate>
 8011e34:	ee18 0a90 	vmov	r0, s17
 8011e38:	b007      	add	sp, #28
 8011e3a:	ecbd 8b06 	vpop	{d8-d10}
 8011e3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e42:	eeb0 0a67 	vmov.f32	s0, s15
 8011e46:	3401      	adds	r4, #1
 8011e48:	f002 fe36 	bl	8014ab8 <expf>
 8011e4c:	ee30 0a08 	vadd.f32	s0, s0, s16
 8011e50:	45a3      	cmp	fp, r4
 8011e52:	eec8 7a00 	vdiv.f32	s15, s16, s0
 8011e56:	ed47 7a01 	vstr	s15, [r7, #-4]
 8011e5a:	d1c9      	bne.n	8011df0 <svc_decoder+0x244>
 8011e5c:	e7e2      	b.n	8011e24 <svc_decoder+0x278>
 8011e5e:	eeb0 0a48 	vmov.f32	s0, s16
 8011e62:	e6e9      	b.n	8011c38 <svc_decoder+0x8c>
 8011e64:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8011e68:	e742      	b.n	8011cf0 <svc_decoder+0x144>
 8011e6a:	eeb0 0a68 	vmov.f32	s0, s17
 8011e6e:	e797      	b.n	8011da0 <svc_decoder+0x1f4>
 8011e70:	f06f 0301 	mvn.w	r3, #1
 8011e74:	ee08 3a90 	vmov	s17, r3
 8011e78:	e6e9      	b.n	8011c4e <svc_decoder+0xa2>
 8011e7a:	bf00      	nop
 8011e7c:	00000000 	.word	0x00000000

08011e80 <forward_svc>:
 8011e80:	6981      	ldr	r1, [r0, #24]
 8011e82:	880b      	ldrh	r3, [r1, #0]
 8011e84:	2b00      	cmp	r3, #0
 8011e86:	f000 80b7 	beq.w	8011ff8 <forward_svc+0x178>
 8011e8a:	2b01      	cmp	r3, #1
 8011e8c:	4602      	mov	r2, r0
 8011e8e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e92:	684f      	ldr	r7, [r1, #4]
 8011e94:	b09b      	sub	sp, #108	; 0x6c
 8011e96:	bf08      	it	eq
 8011e98:	2100      	moveq	r1, #0
 8011e9a:	6878      	ldr	r0, [r7, #4]
 8011e9c:	bf18      	it	ne
 8011e9e:	f107 010c 	addne.w	r1, r7, #12
 8011ea2:	b100      	cbz	r0, 8011ea6 <forward_svc+0x26>
 8011ea4:	6800      	ldr	r0, [r0, #0]
 8011ea6:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8011eaa:	f1ba 0f00 	cmp.w	sl, #0
 8011eae:	f000 8095 	beq.w	8011fdc <forward_svc+0x15c>
 8011eb2:	e9da 8a00 	ldrd	r8, sl, [sl]
 8011eb6:	2b02      	cmp	r3, #2
 8011eb8:	f240 809b 	bls.w	8011ff2 <forward_svc+0x172>
 8011ebc:	69f9      	ldr	r1, [r7, #28]
 8011ebe:	2900      	cmp	r1, #0
 8011ec0:	f000 808e 	beq.w	8011fe0 <forward_svc+0x160>
 8011ec4:	690d      	ldr	r5, [r1, #16]
 8011ec6:	e9d1 6900 	ldrd	r6, r9, [r1]
 8011eca:	e9d1 e402 	ldrd	lr, r4, [r1, #8]
 8011ece:	2b03      	cmp	r3, #3
 8011ed0:	f000 808c 	beq.w	8011fec <forward_svc+0x16c>
 8011ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ed6:	2b00      	cmp	r3, #0
 8011ed8:	f000 8090 	beq.w	8011ffc <forward_svc+0x17c>
 8011edc:	681b      	ldr	r3, [r3, #0]
 8011ede:	699b      	ldr	r3, [r3, #24]
 8011ee0:	689b      	ldr	r3, [r3, #8]
 8011ee2:	9307      	str	r3, [sp, #28]
 8011ee4:	f892 3029 	ldrb.w	r3, [r2, #41]	; 0x29
 8011ee8:	b119      	cbz	r1, 8011ef2 <forward_svc+0x72>
 8011eea:	b113      	cbz	r3, 8011ef2 <forward_svc+0x72>
 8011eec:	e9d1 c705 	ldrd	ip, r7, [r1, #20]
 8011ef0:	e001      	b.n	8011ef6 <forward_svc+0x76>
 8011ef2:	2700      	movs	r7, #0
 8011ef4:	46bc      	mov	ip, r7
 8011ef6:	69b6      	ldr	r6, [r6, #24]
 8011ef8:	f8d8 8018 	ldr.w	r8, [r8, #24]
 8011efc:	68b6      	ldr	r6, [r6, #8]
 8011efe:	f8da 1018 	ldr.w	r1, [sl, #24]
 8011f02:	9604      	str	r6, [sp, #16]
 8011f04:	f8d8 a008 	ldr.w	sl, [r8, #8]
 8011f08:	68c6      	ldr	r6, [r0, #12]
 8011f0a:	f8d9 800c 	ldr.w	r8, [r9, #12]
 8011f0e:	6876      	ldr	r6, [r6, #4]
 8011f10:	f8d9 9018 	ldr.w	r9, [r9, #24]
 8011f14:	f8d8 800c 	ldr.w	r8, [r8, #12]
 8011f18:	edd1 7a02 	vldr	s15, [r1, #8]
 8011f1c:	f8d9 1008 	ldr.w	r1, [r9, #8]
 8011f20:	69ad      	ldr	r5, [r5, #24]
 8011f22:	9105      	str	r1, [sp, #20]
 8011f24:	6980      	ldr	r0, [r0, #24]
 8011f26:	fbb8 f9f6 	udiv	r9, r8, r6
 8011f2a:	f8d4 800c 	ldr.w	r8, [r4, #12]
 8011f2e:	69a4      	ldr	r4, [r4, #24]
 8011f30:	f8d8 b00c 	ldr.w	fp, [r8, #12]
 8011f34:	f8de 800c 	ldr.w	r8, [lr, #12]
 8011f38:	f8de e018 	ldr.w	lr, [lr, #24]
 8011f3c:	f8d8 100c 	ldr.w	r1, [r8, #12]
 8011f40:	6880      	ldr	r0, [r0, #8]
 8011f42:	9103      	str	r1, [sp, #12]
 8011f44:	f8de 1008 	ldr.w	r1, [lr, #8]
 8011f48:	f8d4 8008 	ldr.w	r8, [r4, #8]
 8011f4c:	f8d5 e008 	ldr.w	lr, [r5, #8]
 8011f50:	9106      	str	r1, [sp, #24]
 8011f52:	2b00      	cmp	r3, #0
 8011f54:	d03f      	beq.n	8011fd6 <forward_svc+0x156>
 8011f56:	f8dc c018 	ldr.w	ip, [ip, #24]
 8011f5a:	69bf      	ldr	r7, [r7, #24]
 8011f5c:	f8dc c008 	ldr.w	ip, [ip, #8]
 8011f60:	68bf      	ldr	r7, [r7, #8]
 8011f62:	6824      	ldr	r4, [r4, #0]
 8011f64:	9907      	ldr	r1, [sp, #28]
 8011f66:	f3c4 14c6 	ubfx	r4, r4, #7, #7
 8011f6a:	682d      	ldr	r5, [r5, #0]
 8011f6c:	9100      	str	r1, [sp, #0]
 8011f6e:	f88d 4049 	strb.w	r4, [sp, #73]	; 0x49
 8011f72:	f3c5 15c6 	ubfx	r5, r5, #7, #7
 8011f76:	f892 4028 	ldrb.w	r4, [r2, #40]	; 0x28
 8011f7a:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
 8011f7e:	9b04      	ldr	r3, [sp, #16]
 8011f80:	f88d 4039 	strb.w	r4, [sp, #57]	; 0x39
 8011f84:	69d4      	ldr	r4, [r2, #28]
 8011f86:	9313      	str	r3, [sp, #76]	; 0x4c
 8011f88:	9b05      	ldr	r3, [sp, #20]
 8011f8a:	940f      	str	r4, [sp, #60]	; 0x3c
 8011f8c:	6a14      	ldr	r4, [r2, #32]
 8011f8e:	9903      	ldr	r1, [sp, #12]
 8011f90:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8011f92:	9314      	str	r3, [sp, #80]	; 0x50
 8011f94:	9b06      	ldr	r3, [sp, #24]
 8011f96:	9410      	str	r4, [sp, #64]	; 0x40
 8011f98:	2400      	movs	r4, #0
 8011f9a:	910d      	str	r1, [sp, #52]	; 0x34
 8011f9c:	ee17 1a90 	vmov	r1, s15
 8011fa0:	9315      	str	r3, [sp, #84]	; 0x54
 8011fa2:	ab09      	add	r3, sp, #36	; 0x24
 8011fa4:	9211      	str	r2, [sp, #68]	; 0x44
 8011fa6:	aa08      	add	r2, sp, #32
 8011fa8:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8011fac:	f8cd 8064 	str.w	r8, [sp, #100]	; 0x64
 8011fb0:	9718      	str	r7, [sp, #96]	; 0x60
 8011fb2:	f88d 5048 	strb.w	r5, [sp, #72]	; 0x48
 8011fb6:	9408      	str	r4, [sp, #32]
 8011fb8:	e9cd 6909 	strd	r6, r9, [sp, #36]	; 0x24
 8011fbc:	e9cd ec16 	strd	lr, ip, [sp, #88]	; 0x58
 8011fc0:	f7ff fdf4 	bl	8011bac <svc_decoder>
 8011fc4:	eddd 7a08 	vldr	s15, [sp, #32]
 8011fc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011fcc:	edca 7a00 	vstr	s15, [sl]
 8011fd0:	b01b      	add	sp, #108	; 0x6c
 8011fd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011fd6:	461f      	mov	r7, r3
 8011fd8:	469c      	mov	ip, r3
 8011fda:	e7c2      	b.n	8011f62 <forward_svc+0xe2>
 8011fdc:	46d0      	mov	r8, sl
 8011fde:	e76a      	b.n	8011eb6 <forward_svc+0x36>
 8011fe0:	460c      	mov	r4, r1
 8011fe2:	468e      	mov	lr, r1
 8011fe4:	4689      	mov	r9, r1
 8011fe6:	460e      	mov	r6, r1
 8011fe8:	460d      	mov	r5, r1
 8011fea:	e770      	b.n	8011ece <forward_svc+0x4e>
 8011fec:	2300      	movs	r3, #0
 8011fee:	685b      	ldr	r3, [r3, #4]
 8011ff0:	deff      	udf	#255	; 0xff
 8011ff2:	2300      	movs	r3, #0
 8011ff4:	685b      	ldr	r3, [r3, #4]
 8011ff6:	deff      	udf	#255	; 0xff
 8011ff8:	685b      	ldr	r3, [r3, #4]
 8011ffa:	deff      	udf	#255	; 0xff
 8011ffc:	699b      	ldr	r3, [r3, #24]
 8011ffe:	deff      	udf	#255	; 0xff

08012000 <ai_check_custom_types>:
 8012000:	b082      	sub	sp, #8
 8012002:	4b12      	ldr	r3, [pc, #72]	; (801204c <ai_check_custom_types+0x4c>)
 8012004:	9301      	str	r3, [sp, #4]
 8012006:	b118      	cbz	r0, 8012010 <ai_check_custom_types+0x10>
 8012008:	7803      	ldrb	r3, [r0, #0]
 801200a:	2b03      	cmp	r3, #3
 801200c:	d002      	beq.n	8012014 <ai_check_custom_types+0x14>
 801200e:	2000      	movs	r0, #0
 8012010:	b002      	add	sp, #8
 8012012:	4770      	bx	lr
 8012014:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012018:	4293      	cmp	r3, r2
 801201a:	d004      	beq.n	8012026 <ai_check_custom_types+0x26>
 801201c:	2001      	movs	r0, #1
 801201e:	f080 0001 	eor.w	r0, r0, #1
 8012022:	b002      	add	sp, #8
 8012024:	4770      	bx	lr
 8012026:	7842      	ldrb	r2, [r0, #1]
 8012028:	3001      	adds	r0, #1
 801202a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801202e:	429a      	cmp	r2, r3
 8012030:	d1f4      	bne.n	801201c <ai_check_custom_types+0x1c>
 8012032:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8012036:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801203a:	429a      	cmp	r2, r3
 801203c:	d1ee      	bne.n	801201c <ai_check_custom_types+0x1c>
 801203e:	7842      	ldrb	r2, [r0, #1]
 8012040:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8012044:	429a      	cmp	r2, r3
 8012046:	d1e9      	bne.n	801201c <ai_check_custom_types+0x1c>
 8012048:	2000      	movs	r0, #0
 801204a:	e7e8      	b.n	801201e <ai_check_custom_types+0x1e>
 801204c:	84048403 	.word	0x84048403

08012050 <ai_layers_init_all>:
 8012050:	2100      	movs	r1, #0
 8012052:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8012054:	b13b      	cbz	r3, 8012066 <ai_layers_init_all+0x16>
 8012056:	691a      	ldr	r2, [r3, #16]
 8012058:	3101      	adds	r1, #1
 801205a:	60d8      	str	r0, [r3, #12]
 801205c:	429a      	cmp	r2, r3
 801205e:	4613      	mov	r3, r2
 8012060:	d001      	beq.n	8012066 <ai_layers_init_all+0x16>
 8012062:	2a00      	cmp	r2, #0
 8012064:	d1f6      	bne.n	8012054 <ai_layers_init_all+0x4>
 8012066:	4608      	mov	r0, r1
 8012068:	4770      	bx	lr
 801206a:	bf00      	nop

0801206c <ai_layers_post_init_all>:
 801206c:	b538      	push	{r3, r4, r5, lr}
 801206e:	2500      	movs	r5, #0
 8012070:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8012072:	b16c      	cbz	r4, 8012090 <ai_layers_post_init_all+0x24>
 8012074:	6863      	ldr	r3, [r4, #4]
 8012076:	07db      	lsls	r3, r3, #31
 8012078:	d504      	bpl.n	8012084 <ai_layers_post_init_all+0x18>
 801207a:	6a23      	ldr	r3, [r4, #32]
 801207c:	4620      	mov	r0, r4
 801207e:	b10b      	cbz	r3, 8012084 <ai_layers_post_init_all+0x18>
 8012080:	3501      	adds	r5, #1
 8012082:	4798      	blx	r3
 8012084:	6923      	ldr	r3, [r4, #16]
 8012086:	42a3      	cmp	r3, r4
 8012088:	461c      	mov	r4, r3
 801208a:	d001      	beq.n	8012090 <ai_layers_post_init_all+0x24>
 801208c:	2b00      	cmp	r3, #0
 801208e:	d1f0      	bne.n	8012072 <ai_layers_post_init_all+0x6>
 8012090:	4628      	mov	r0, r5
 8012092:	bd38      	pop	{r3, r4, r5, pc}

08012094 <ai_layers_forward_all>:
 8012094:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012098:	f8d0 803c 	ldr.w	r8, [r0, #60]	; 0x3c
 801209c:	4604      	mov	r4, r0
 801209e:	f1b8 0f00 	cmp.w	r8, #0
 80120a2:	d02a      	beq.n	80120fa <ai_layers_forward_all+0x66>
 80120a4:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80120a6:	6381      	str	r1, [r0, #56]	; 0x38
 80120a8:	b319      	cbz	r1, 80120f2 <ai_layers_forward_all+0x5e>
 80120aa:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80120ac:	2001      	movs	r0, #1
 80120ae:	47c0      	blx	r8
 80120b0:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80120b2:	b1f6      	cbz	r6, 80120f2 <ai_layers_forward_all+0x5e>
 80120b4:	2700      	movs	r7, #0
 80120b6:	4631      	mov	r1, r6
 80120b8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80120ba:	2002      	movs	r0, #2
 80120bc:	47c0      	blx	r8
 80120be:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 80120c0:	4628      	mov	r0, r5
 80120c2:	696b      	ldr	r3, [r5, #20]
 80120c4:	4798      	blx	r3
 80120c6:	692e      	ldr	r6, [r5, #16]
 80120c8:	2003      	movs	r0, #3
 80120ca:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80120cc:	42b5      	cmp	r5, r6
 80120ce:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80120d0:	d007      	beq.n	80120e2 <ai_layers_forward_all+0x4e>
 80120d2:	47c0      	blx	r8
 80120d4:	3701      	adds	r7, #1
 80120d6:	63a6      	str	r6, [r4, #56]	; 0x38
 80120d8:	2e00      	cmp	r6, #0
 80120da:	d1ec      	bne.n	80120b6 <ai_layers_forward_all+0x22>
 80120dc:	4638      	mov	r0, r7
 80120de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80120e2:	2003      	movs	r0, #3
 80120e4:	3701      	adds	r7, #1
 80120e6:	47c0      	blx	r8
 80120e8:	2300      	movs	r3, #0
 80120ea:	4638      	mov	r0, r7
 80120ec:	63a3      	str	r3, [r4, #56]	; 0x38
 80120ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80120f2:	2700      	movs	r7, #0
 80120f4:	4638      	mov	r0, r7
 80120f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80120fa:	6b45      	ldr	r5, [r0, #52]	; 0x34
 80120fc:	6385      	str	r5, [r0, #56]	; 0x38
 80120fe:	2d00      	cmp	r5, #0
 8012100:	d0f7      	beq.n	80120f2 <ai_layers_forward_all+0x5e>
 8012102:	4647      	mov	r7, r8
 8012104:	696b      	ldr	r3, [r5, #20]
 8012106:	4628      	mov	r0, r5
 8012108:	4798      	blx	r3
 801210a:	462b      	mov	r3, r5
 801210c:	692d      	ldr	r5, [r5, #16]
 801210e:	429d      	cmp	r5, r3
 8012110:	d004      	beq.n	801211c <ai_layers_forward_all+0x88>
 8012112:	3701      	adds	r7, #1
 8012114:	63a5      	str	r5, [r4, #56]	; 0x38
 8012116:	2d00      	cmp	r5, #0
 8012118:	d1f4      	bne.n	8012104 <ai_layers_forward_all+0x70>
 801211a:	e7df      	b.n	80120dc <ai_layers_forward_all+0x48>
 801211c:	2300      	movs	r3, #0
 801211e:	3701      	adds	r7, #1
 8012120:	63a3      	str	r3, [r4, #56]	; 0x38
 8012122:	e7db      	b.n	80120dc <ai_layers_forward_all+0x48>

08012124 <ai_layers_destroy_all>:
 8012124:	b538      	push	{r3, r4, r5, lr}
 8012126:	2500      	movs	r5, #0
 8012128:	6b44      	ldr	r4, [r0, #52]	; 0x34
 801212a:	b16c      	cbz	r4, 8012148 <ai_layers_destroy_all+0x24>
 801212c:	6863      	ldr	r3, [r4, #4]
 801212e:	075b      	lsls	r3, r3, #29
 8012130:	d504      	bpl.n	801213c <ai_layers_destroy_all+0x18>
 8012132:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8012134:	4620      	mov	r0, r4
 8012136:	b10b      	cbz	r3, 801213c <ai_layers_destroy_all+0x18>
 8012138:	3501      	adds	r5, #1
 801213a:	4798      	blx	r3
 801213c:	6923      	ldr	r3, [r4, #16]
 801213e:	42a3      	cmp	r3, r4
 8012140:	461c      	mov	r4, r3
 8012142:	d001      	beq.n	8012148 <ai_layers_destroy_all+0x24>
 8012144:	2b00      	cmp	r3, #0
 8012146:	d1f0      	bne.n	801212a <ai_layers_destroy_all+0x6>
 8012148:	4628      	mov	r0, r5
 801214a:	bd38      	pop	{r3, r4, r5, pc}

0801214c <__errno>:
 801214c:	4b01      	ldr	r3, [pc, #4]	; (8012154 <__errno+0x8>)
 801214e:	6818      	ldr	r0, [r3, #0]
 8012150:	4770      	bx	lr
 8012152:	bf00      	nop
 8012154:	240006fc 	.word	0x240006fc

08012158 <__libc_init_array>:
 8012158:	b570      	push	{r4, r5, r6, lr}
 801215a:	4d0d      	ldr	r5, [pc, #52]	; (8012190 <__libc_init_array+0x38>)
 801215c:	4c0d      	ldr	r4, [pc, #52]	; (8012194 <__libc_init_array+0x3c>)
 801215e:	1b64      	subs	r4, r4, r5
 8012160:	10a4      	asrs	r4, r4, #2
 8012162:	2600      	movs	r6, #0
 8012164:	42a6      	cmp	r6, r4
 8012166:	d109      	bne.n	801217c <__libc_init_array+0x24>
 8012168:	4d0b      	ldr	r5, [pc, #44]	; (8012198 <__libc_init_array+0x40>)
 801216a:	4c0c      	ldr	r4, [pc, #48]	; (801219c <__libc_init_array+0x44>)
 801216c:	f003 f886 	bl	801527c <_init>
 8012170:	1b64      	subs	r4, r4, r5
 8012172:	10a4      	asrs	r4, r4, #2
 8012174:	2600      	movs	r6, #0
 8012176:	42a6      	cmp	r6, r4
 8012178:	d105      	bne.n	8012186 <__libc_init_array+0x2e>
 801217a:	bd70      	pop	{r4, r5, r6, pc}
 801217c:	f855 3b04 	ldr.w	r3, [r5], #4
 8012180:	4798      	blx	r3
 8012182:	3601      	adds	r6, #1
 8012184:	e7ee      	b.n	8012164 <__libc_init_array+0xc>
 8012186:	f855 3b04 	ldr.w	r3, [r5], #4
 801218a:	4798      	blx	r3
 801218c:	3601      	adds	r6, #1
 801218e:	e7f2      	b.n	8012176 <__libc_init_array+0x1e>
 8012190:	08016f40 	.word	0x08016f40
 8012194:	08016f40 	.word	0x08016f40
 8012198:	08016f40 	.word	0x08016f40
 801219c:	08016f44 	.word	0x08016f44

080121a0 <malloc>:
 80121a0:	4b02      	ldr	r3, [pc, #8]	; (80121ac <malloc+0xc>)
 80121a2:	4601      	mov	r1, r0
 80121a4:	6818      	ldr	r0, [r3, #0]
 80121a6:	f000 b885 	b.w	80122b4 <_malloc_r>
 80121aa:	bf00      	nop
 80121ac:	240006fc 	.word	0x240006fc

080121b0 <memcpy>:
 80121b0:	440a      	add	r2, r1
 80121b2:	4291      	cmp	r1, r2
 80121b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80121b8:	d100      	bne.n	80121bc <memcpy+0xc>
 80121ba:	4770      	bx	lr
 80121bc:	b510      	push	{r4, lr}
 80121be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80121c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80121c6:	4291      	cmp	r1, r2
 80121c8:	d1f9      	bne.n	80121be <memcpy+0xe>
 80121ca:	bd10      	pop	{r4, pc}

080121cc <memset>:
 80121cc:	4402      	add	r2, r0
 80121ce:	4603      	mov	r3, r0
 80121d0:	4293      	cmp	r3, r2
 80121d2:	d100      	bne.n	80121d6 <memset+0xa>
 80121d4:	4770      	bx	lr
 80121d6:	f803 1b01 	strb.w	r1, [r3], #1
 80121da:	e7f9      	b.n	80121d0 <memset+0x4>

080121dc <_free_r>:
 80121dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80121de:	2900      	cmp	r1, #0
 80121e0:	d044      	beq.n	801226c <_free_r+0x90>
 80121e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80121e6:	9001      	str	r0, [sp, #4]
 80121e8:	2b00      	cmp	r3, #0
 80121ea:	f1a1 0404 	sub.w	r4, r1, #4
 80121ee:	bfb8      	it	lt
 80121f0:	18e4      	addlt	r4, r4, r3
 80121f2:	f001 fb3b 	bl	801386c <__malloc_lock>
 80121f6:	4a1e      	ldr	r2, [pc, #120]	; (8012270 <_free_r+0x94>)
 80121f8:	9801      	ldr	r0, [sp, #4]
 80121fa:	6813      	ldr	r3, [r2, #0]
 80121fc:	b933      	cbnz	r3, 801220c <_free_r+0x30>
 80121fe:	6063      	str	r3, [r4, #4]
 8012200:	6014      	str	r4, [r2, #0]
 8012202:	b003      	add	sp, #12
 8012204:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012208:	f001 bb36 	b.w	8013878 <__malloc_unlock>
 801220c:	42a3      	cmp	r3, r4
 801220e:	d908      	bls.n	8012222 <_free_r+0x46>
 8012210:	6825      	ldr	r5, [r4, #0]
 8012212:	1961      	adds	r1, r4, r5
 8012214:	428b      	cmp	r3, r1
 8012216:	bf01      	itttt	eq
 8012218:	6819      	ldreq	r1, [r3, #0]
 801221a:	685b      	ldreq	r3, [r3, #4]
 801221c:	1949      	addeq	r1, r1, r5
 801221e:	6021      	streq	r1, [r4, #0]
 8012220:	e7ed      	b.n	80121fe <_free_r+0x22>
 8012222:	461a      	mov	r2, r3
 8012224:	685b      	ldr	r3, [r3, #4]
 8012226:	b10b      	cbz	r3, 801222c <_free_r+0x50>
 8012228:	42a3      	cmp	r3, r4
 801222a:	d9fa      	bls.n	8012222 <_free_r+0x46>
 801222c:	6811      	ldr	r1, [r2, #0]
 801222e:	1855      	adds	r5, r2, r1
 8012230:	42a5      	cmp	r5, r4
 8012232:	d10b      	bne.n	801224c <_free_r+0x70>
 8012234:	6824      	ldr	r4, [r4, #0]
 8012236:	4421      	add	r1, r4
 8012238:	1854      	adds	r4, r2, r1
 801223a:	42a3      	cmp	r3, r4
 801223c:	6011      	str	r1, [r2, #0]
 801223e:	d1e0      	bne.n	8012202 <_free_r+0x26>
 8012240:	681c      	ldr	r4, [r3, #0]
 8012242:	685b      	ldr	r3, [r3, #4]
 8012244:	6053      	str	r3, [r2, #4]
 8012246:	4421      	add	r1, r4
 8012248:	6011      	str	r1, [r2, #0]
 801224a:	e7da      	b.n	8012202 <_free_r+0x26>
 801224c:	d902      	bls.n	8012254 <_free_r+0x78>
 801224e:	230c      	movs	r3, #12
 8012250:	6003      	str	r3, [r0, #0]
 8012252:	e7d6      	b.n	8012202 <_free_r+0x26>
 8012254:	6825      	ldr	r5, [r4, #0]
 8012256:	1961      	adds	r1, r4, r5
 8012258:	428b      	cmp	r3, r1
 801225a:	bf04      	itt	eq
 801225c:	6819      	ldreq	r1, [r3, #0]
 801225e:	685b      	ldreq	r3, [r3, #4]
 8012260:	6063      	str	r3, [r4, #4]
 8012262:	bf04      	itt	eq
 8012264:	1949      	addeq	r1, r1, r5
 8012266:	6021      	streq	r1, [r4, #0]
 8012268:	6054      	str	r4, [r2, #4]
 801226a:	e7ca      	b.n	8012202 <_free_r+0x26>
 801226c:	b003      	add	sp, #12
 801226e:	bd30      	pop	{r4, r5, pc}
 8012270:	24001e98 	.word	0x24001e98

08012274 <sbrk_aligned>:
 8012274:	b570      	push	{r4, r5, r6, lr}
 8012276:	4e0e      	ldr	r6, [pc, #56]	; (80122b0 <sbrk_aligned+0x3c>)
 8012278:	460c      	mov	r4, r1
 801227a:	6831      	ldr	r1, [r6, #0]
 801227c:	4605      	mov	r5, r0
 801227e:	b911      	cbnz	r1, 8012286 <sbrk_aligned+0x12>
 8012280:	f000 fcd0 	bl	8012c24 <_sbrk_r>
 8012284:	6030      	str	r0, [r6, #0]
 8012286:	4621      	mov	r1, r4
 8012288:	4628      	mov	r0, r5
 801228a:	f000 fccb 	bl	8012c24 <_sbrk_r>
 801228e:	1c43      	adds	r3, r0, #1
 8012290:	d00a      	beq.n	80122a8 <sbrk_aligned+0x34>
 8012292:	1cc4      	adds	r4, r0, #3
 8012294:	f024 0403 	bic.w	r4, r4, #3
 8012298:	42a0      	cmp	r0, r4
 801229a:	d007      	beq.n	80122ac <sbrk_aligned+0x38>
 801229c:	1a21      	subs	r1, r4, r0
 801229e:	4628      	mov	r0, r5
 80122a0:	f000 fcc0 	bl	8012c24 <_sbrk_r>
 80122a4:	3001      	adds	r0, #1
 80122a6:	d101      	bne.n	80122ac <sbrk_aligned+0x38>
 80122a8:	f04f 34ff 	mov.w	r4, #4294967295
 80122ac:	4620      	mov	r0, r4
 80122ae:	bd70      	pop	{r4, r5, r6, pc}
 80122b0:	24001e9c 	.word	0x24001e9c

080122b4 <_malloc_r>:
 80122b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80122b8:	1ccd      	adds	r5, r1, #3
 80122ba:	f025 0503 	bic.w	r5, r5, #3
 80122be:	3508      	adds	r5, #8
 80122c0:	2d0c      	cmp	r5, #12
 80122c2:	bf38      	it	cc
 80122c4:	250c      	movcc	r5, #12
 80122c6:	2d00      	cmp	r5, #0
 80122c8:	4607      	mov	r7, r0
 80122ca:	db01      	blt.n	80122d0 <_malloc_r+0x1c>
 80122cc:	42a9      	cmp	r1, r5
 80122ce:	d905      	bls.n	80122dc <_malloc_r+0x28>
 80122d0:	230c      	movs	r3, #12
 80122d2:	603b      	str	r3, [r7, #0]
 80122d4:	2600      	movs	r6, #0
 80122d6:	4630      	mov	r0, r6
 80122d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80122dc:	4e2e      	ldr	r6, [pc, #184]	; (8012398 <_malloc_r+0xe4>)
 80122de:	f001 fac5 	bl	801386c <__malloc_lock>
 80122e2:	6833      	ldr	r3, [r6, #0]
 80122e4:	461c      	mov	r4, r3
 80122e6:	bb34      	cbnz	r4, 8012336 <_malloc_r+0x82>
 80122e8:	4629      	mov	r1, r5
 80122ea:	4638      	mov	r0, r7
 80122ec:	f7ff ffc2 	bl	8012274 <sbrk_aligned>
 80122f0:	1c43      	adds	r3, r0, #1
 80122f2:	4604      	mov	r4, r0
 80122f4:	d14d      	bne.n	8012392 <_malloc_r+0xde>
 80122f6:	6834      	ldr	r4, [r6, #0]
 80122f8:	4626      	mov	r6, r4
 80122fa:	2e00      	cmp	r6, #0
 80122fc:	d140      	bne.n	8012380 <_malloc_r+0xcc>
 80122fe:	6823      	ldr	r3, [r4, #0]
 8012300:	4631      	mov	r1, r6
 8012302:	4638      	mov	r0, r7
 8012304:	eb04 0803 	add.w	r8, r4, r3
 8012308:	f000 fc8c 	bl	8012c24 <_sbrk_r>
 801230c:	4580      	cmp	r8, r0
 801230e:	d13a      	bne.n	8012386 <_malloc_r+0xd2>
 8012310:	6821      	ldr	r1, [r4, #0]
 8012312:	3503      	adds	r5, #3
 8012314:	1a6d      	subs	r5, r5, r1
 8012316:	f025 0503 	bic.w	r5, r5, #3
 801231a:	3508      	adds	r5, #8
 801231c:	2d0c      	cmp	r5, #12
 801231e:	bf38      	it	cc
 8012320:	250c      	movcc	r5, #12
 8012322:	4629      	mov	r1, r5
 8012324:	4638      	mov	r0, r7
 8012326:	f7ff ffa5 	bl	8012274 <sbrk_aligned>
 801232a:	3001      	adds	r0, #1
 801232c:	d02b      	beq.n	8012386 <_malloc_r+0xd2>
 801232e:	6823      	ldr	r3, [r4, #0]
 8012330:	442b      	add	r3, r5
 8012332:	6023      	str	r3, [r4, #0]
 8012334:	e00e      	b.n	8012354 <_malloc_r+0xa0>
 8012336:	6822      	ldr	r2, [r4, #0]
 8012338:	1b52      	subs	r2, r2, r5
 801233a:	d41e      	bmi.n	801237a <_malloc_r+0xc6>
 801233c:	2a0b      	cmp	r2, #11
 801233e:	d916      	bls.n	801236e <_malloc_r+0xba>
 8012340:	1961      	adds	r1, r4, r5
 8012342:	42a3      	cmp	r3, r4
 8012344:	6025      	str	r5, [r4, #0]
 8012346:	bf18      	it	ne
 8012348:	6059      	strne	r1, [r3, #4]
 801234a:	6863      	ldr	r3, [r4, #4]
 801234c:	bf08      	it	eq
 801234e:	6031      	streq	r1, [r6, #0]
 8012350:	5162      	str	r2, [r4, r5]
 8012352:	604b      	str	r3, [r1, #4]
 8012354:	4638      	mov	r0, r7
 8012356:	f104 060b 	add.w	r6, r4, #11
 801235a:	f001 fa8d 	bl	8013878 <__malloc_unlock>
 801235e:	f026 0607 	bic.w	r6, r6, #7
 8012362:	1d23      	adds	r3, r4, #4
 8012364:	1af2      	subs	r2, r6, r3
 8012366:	d0b6      	beq.n	80122d6 <_malloc_r+0x22>
 8012368:	1b9b      	subs	r3, r3, r6
 801236a:	50a3      	str	r3, [r4, r2]
 801236c:	e7b3      	b.n	80122d6 <_malloc_r+0x22>
 801236e:	6862      	ldr	r2, [r4, #4]
 8012370:	42a3      	cmp	r3, r4
 8012372:	bf0c      	ite	eq
 8012374:	6032      	streq	r2, [r6, #0]
 8012376:	605a      	strne	r2, [r3, #4]
 8012378:	e7ec      	b.n	8012354 <_malloc_r+0xa0>
 801237a:	4623      	mov	r3, r4
 801237c:	6864      	ldr	r4, [r4, #4]
 801237e:	e7b2      	b.n	80122e6 <_malloc_r+0x32>
 8012380:	4634      	mov	r4, r6
 8012382:	6876      	ldr	r6, [r6, #4]
 8012384:	e7b9      	b.n	80122fa <_malloc_r+0x46>
 8012386:	230c      	movs	r3, #12
 8012388:	603b      	str	r3, [r7, #0]
 801238a:	4638      	mov	r0, r7
 801238c:	f001 fa74 	bl	8013878 <__malloc_unlock>
 8012390:	e7a1      	b.n	80122d6 <_malloc_r+0x22>
 8012392:	6025      	str	r5, [r4, #0]
 8012394:	e7de      	b.n	8012354 <_malloc_r+0xa0>
 8012396:	bf00      	nop
 8012398:	24001e98 	.word	0x24001e98

0801239c <__cvt>:
 801239c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801239e:	ed2d 8b02 	vpush	{d8}
 80123a2:	eeb0 8b40 	vmov.f64	d8, d0
 80123a6:	b085      	sub	sp, #20
 80123a8:	4617      	mov	r7, r2
 80123aa:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80123ac:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80123ae:	ee18 2a90 	vmov	r2, s17
 80123b2:	f025 0520 	bic.w	r5, r5, #32
 80123b6:	2a00      	cmp	r2, #0
 80123b8:	bfb6      	itet	lt
 80123ba:	222d      	movlt	r2, #45	; 0x2d
 80123bc:	2200      	movge	r2, #0
 80123be:	eeb1 8b40 	vneglt.f64	d8, d0
 80123c2:	2d46      	cmp	r5, #70	; 0x46
 80123c4:	460c      	mov	r4, r1
 80123c6:	701a      	strb	r2, [r3, #0]
 80123c8:	d004      	beq.n	80123d4 <__cvt+0x38>
 80123ca:	2d45      	cmp	r5, #69	; 0x45
 80123cc:	d100      	bne.n	80123d0 <__cvt+0x34>
 80123ce:	3401      	adds	r4, #1
 80123d0:	2102      	movs	r1, #2
 80123d2:	e000      	b.n	80123d6 <__cvt+0x3a>
 80123d4:	2103      	movs	r1, #3
 80123d6:	ab03      	add	r3, sp, #12
 80123d8:	9301      	str	r3, [sp, #4]
 80123da:	ab02      	add	r3, sp, #8
 80123dc:	9300      	str	r3, [sp, #0]
 80123de:	4622      	mov	r2, r4
 80123e0:	4633      	mov	r3, r6
 80123e2:	eeb0 0b48 	vmov.f64	d0, d8
 80123e6:	f000 fccf 	bl	8012d88 <_dtoa_r>
 80123ea:	2d47      	cmp	r5, #71	; 0x47
 80123ec:	d101      	bne.n	80123f2 <__cvt+0x56>
 80123ee:	07fb      	lsls	r3, r7, #31
 80123f0:	d51a      	bpl.n	8012428 <__cvt+0x8c>
 80123f2:	2d46      	cmp	r5, #70	; 0x46
 80123f4:	eb00 0204 	add.w	r2, r0, r4
 80123f8:	d10c      	bne.n	8012414 <__cvt+0x78>
 80123fa:	7803      	ldrb	r3, [r0, #0]
 80123fc:	2b30      	cmp	r3, #48	; 0x30
 80123fe:	d107      	bne.n	8012410 <__cvt+0x74>
 8012400:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8012404:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012408:	bf1c      	itt	ne
 801240a:	f1c4 0401 	rsbne	r4, r4, #1
 801240e:	6034      	strne	r4, [r6, #0]
 8012410:	6833      	ldr	r3, [r6, #0]
 8012412:	441a      	add	r2, r3
 8012414:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8012418:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801241c:	bf08      	it	eq
 801241e:	9203      	streq	r2, [sp, #12]
 8012420:	2130      	movs	r1, #48	; 0x30
 8012422:	9b03      	ldr	r3, [sp, #12]
 8012424:	4293      	cmp	r3, r2
 8012426:	d307      	bcc.n	8012438 <__cvt+0x9c>
 8012428:	9b03      	ldr	r3, [sp, #12]
 801242a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801242c:	1a1b      	subs	r3, r3, r0
 801242e:	6013      	str	r3, [r2, #0]
 8012430:	b005      	add	sp, #20
 8012432:	ecbd 8b02 	vpop	{d8}
 8012436:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012438:	1c5c      	adds	r4, r3, #1
 801243a:	9403      	str	r4, [sp, #12]
 801243c:	7019      	strb	r1, [r3, #0]
 801243e:	e7f0      	b.n	8012422 <__cvt+0x86>

08012440 <__exponent>:
 8012440:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012442:	4603      	mov	r3, r0
 8012444:	2900      	cmp	r1, #0
 8012446:	bfb8      	it	lt
 8012448:	4249      	neglt	r1, r1
 801244a:	f803 2b02 	strb.w	r2, [r3], #2
 801244e:	bfb4      	ite	lt
 8012450:	222d      	movlt	r2, #45	; 0x2d
 8012452:	222b      	movge	r2, #43	; 0x2b
 8012454:	2909      	cmp	r1, #9
 8012456:	7042      	strb	r2, [r0, #1]
 8012458:	dd2a      	ble.n	80124b0 <__exponent+0x70>
 801245a:	f10d 0407 	add.w	r4, sp, #7
 801245e:	46a4      	mov	ip, r4
 8012460:	270a      	movs	r7, #10
 8012462:	46a6      	mov	lr, r4
 8012464:	460a      	mov	r2, r1
 8012466:	fb91 f6f7 	sdiv	r6, r1, r7
 801246a:	fb07 1516 	mls	r5, r7, r6, r1
 801246e:	3530      	adds	r5, #48	; 0x30
 8012470:	2a63      	cmp	r2, #99	; 0x63
 8012472:	f104 34ff 	add.w	r4, r4, #4294967295
 8012476:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801247a:	4631      	mov	r1, r6
 801247c:	dcf1      	bgt.n	8012462 <__exponent+0x22>
 801247e:	3130      	adds	r1, #48	; 0x30
 8012480:	f1ae 0502 	sub.w	r5, lr, #2
 8012484:	f804 1c01 	strb.w	r1, [r4, #-1]
 8012488:	1c44      	adds	r4, r0, #1
 801248a:	4629      	mov	r1, r5
 801248c:	4561      	cmp	r1, ip
 801248e:	d30a      	bcc.n	80124a6 <__exponent+0x66>
 8012490:	f10d 0209 	add.w	r2, sp, #9
 8012494:	eba2 020e 	sub.w	r2, r2, lr
 8012498:	4565      	cmp	r5, ip
 801249a:	bf88      	it	hi
 801249c:	2200      	movhi	r2, #0
 801249e:	4413      	add	r3, r2
 80124a0:	1a18      	subs	r0, r3, r0
 80124a2:	b003      	add	sp, #12
 80124a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80124a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80124aa:	f804 2f01 	strb.w	r2, [r4, #1]!
 80124ae:	e7ed      	b.n	801248c <__exponent+0x4c>
 80124b0:	2330      	movs	r3, #48	; 0x30
 80124b2:	3130      	adds	r1, #48	; 0x30
 80124b4:	7083      	strb	r3, [r0, #2]
 80124b6:	70c1      	strb	r1, [r0, #3]
 80124b8:	1d03      	adds	r3, r0, #4
 80124ba:	e7f1      	b.n	80124a0 <__exponent+0x60>
 80124bc:	0000      	movs	r0, r0
	...

080124c0 <_printf_float>:
 80124c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124c4:	b08b      	sub	sp, #44	; 0x2c
 80124c6:	460c      	mov	r4, r1
 80124c8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 80124cc:	4616      	mov	r6, r2
 80124ce:	461f      	mov	r7, r3
 80124d0:	4605      	mov	r5, r0
 80124d2:	f001 f9c7 	bl	8013864 <_localeconv_r>
 80124d6:	f8d0 b000 	ldr.w	fp, [r0]
 80124da:	4658      	mov	r0, fp
 80124dc:	f7ed ff00 	bl	80002e0 <strlen>
 80124e0:	2300      	movs	r3, #0
 80124e2:	9308      	str	r3, [sp, #32]
 80124e4:	f8d8 3000 	ldr.w	r3, [r8]
 80124e8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80124ec:	6822      	ldr	r2, [r4, #0]
 80124ee:	3307      	adds	r3, #7
 80124f0:	f023 0307 	bic.w	r3, r3, #7
 80124f4:	f103 0108 	add.w	r1, r3, #8
 80124f8:	f8c8 1000 	str.w	r1, [r8]
 80124fc:	4682      	mov	sl, r0
 80124fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8012502:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8012506:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8012768 <_printf_float+0x2a8>
 801250a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 801250e:	eeb0 6bc0 	vabs.f64	d6, d0
 8012512:	eeb4 6b47 	vcmp.f64	d6, d7
 8012516:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801251a:	dd24      	ble.n	8012566 <_printf_float+0xa6>
 801251c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8012520:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012524:	d502      	bpl.n	801252c <_printf_float+0x6c>
 8012526:	232d      	movs	r3, #45	; 0x2d
 8012528:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801252c:	4b90      	ldr	r3, [pc, #576]	; (8012770 <_printf_float+0x2b0>)
 801252e:	4891      	ldr	r0, [pc, #580]	; (8012774 <_printf_float+0x2b4>)
 8012530:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8012534:	bf94      	ite	ls
 8012536:	4698      	movls	r8, r3
 8012538:	4680      	movhi	r8, r0
 801253a:	2303      	movs	r3, #3
 801253c:	6123      	str	r3, [r4, #16]
 801253e:	f022 0204 	bic.w	r2, r2, #4
 8012542:	2300      	movs	r3, #0
 8012544:	6022      	str	r2, [r4, #0]
 8012546:	9304      	str	r3, [sp, #16]
 8012548:	9700      	str	r7, [sp, #0]
 801254a:	4633      	mov	r3, r6
 801254c:	aa09      	add	r2, sp, #36	; 0x24
 801254e:	4621      	mov	r1, r4
 8012550:	4628      	mov	r0, r5
 8012552:	f000 f9d3 	bl	80128fc <_printf_common>
 8012556:	3001      	adds	r0, #1
 8012558:	f040 808a 	bne.w	8012670 <_printf_float+0x1b0>
 801255c:	f04f 30ff 	mov.w	r0, #4294967295
 8012560:	b00b      	add	sp, #44	; 0x2c
 8012562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012566:	eeb4 0b40 	vcmp.f64	d0, d0
 801256a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801256e:	d709      	bvc.n	8012584 <_printf_float+0xc4>
 8012570:	ee10 3a90 	vmov	r3, s1
 8012574:	2b00      	cmp	r3, #0
 8012576:	bfbc      	itt	lt
 8012578:	232d      	movlt	r3, #45	; 0x2d
 801257a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801257e:	487e      	ldr	r0, [pc, #504]	; (8012778 <_printf_float+0x2b8>)
 8012580:	4b7e      	ldr	r3, [pc, #504]	; (801277c <_printf_float+0x2bc>)
 8012582:	e7d5      	b.n	8012530 <_printf_float+0x70>
 8012584:	6863      	ldr	r3, [r4, #4]
 8012586:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 801258a:	9104      	str	r1, [sp, #16]
 801258c:	1c59      	adds	r1, r3, #1
 801258e:	d13c      	bne.n	801260a <_printf_float+0x14a>
 8012590:	2306      	movs	r3, #6
 8012592:	6063      	str	r3, [r4, #4]
 8012594:	2300      	movs	r3, #0
 8012596:	9303      	str	r3, [sp, #12]
 8012598:	ab08      	add	r3, sp, #32
 801259a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 801259e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80125a2:	ab07      	add	r3, sp, #28
 80125a4:	6861      	ldr	r1, [r4, #4]
 80125a6:	9300      	str	r3, [sp, #0]
 80125a8:	6022      	str	r2, [r4, #0]
 80125aa:	f10d 031b 	add.w	r3, sp, #27
 80125ae:	4628      	mov	r0, r5
 80125b0:	f7ff fef4 	bl	801239c <__cvt>
 80125b4:	9b04      	ldr	r3, [sp, #16]
 80125b6:	9907      	ldr	r1, [sp, #28]
 80125b8:	2b47      	cmp	r3, #71	; 0x47
 80125ba:	4680      	mov	r8, r0
 80125bc:	d108      	bne.n	80125d0 <_printf_float+0x110>
 80125be:	1cc8      	adds	r0, r1, #3
 80125c0:	db02      	blt.n	80125c8 <_printf_float+0x108>
 80125c2:	6863      	ldr	r3, [r4, #4]
 80125c4:	4299      	cmp	r1, r3
 80125c6:	dd41      	ble.n	801264c <_printf_float+0x18c>
 80125c8:	f1a9 0902 	sub.w	r9, r9, #2
 80125cc:	fa5f f989 	uxtb.w	r9, r9
 80125d0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80125d4:	d820      	bhi.n	8012618 <_printf_float+0x158>
 80125d6:	3901      	subs	r1, #1
 80125d8:	464a      	mov	r2, r9
 80125da:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80125de:	9107      	str	r1, [sp, #28]
 80125e0:	f7ff ff2e 	bl	8012440 <__exponent>
 80125e4:	9a08      	ldr	r2, [sp, #32]
 80125e6:	9004      	str	r0, [sp, #16]
 80125e8:	1813      	adds	r3, r2, r0
 80125ea:	2a01      	cmp	r2, #1
 80125ec:	6123      	str	r3, [r4, #16]
 80125ee:	dc02      	bgt.n	80125f6 <_printf_float+0x136>
 80125f0:	6822      	ldr	r2, [r4, #0]
 80125f2:	07d2      	lsls	r2, r2, #31
 80125f4:	d501      	bpl.n	80125fa <_printf_float+0x13a>
 80125f6:	3301      	adds	r3, #1
 80125f8:	6123      	str	r3, [r4, #16]
 80125fa:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80125fe:	2b00      	cmp	r3, #0
 8012600:	d0a2      	beq.n	8012548 <_printf_float+0x88>
 8012602:	232d      	movs	r3, #45	; 0x2d
 8012604:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012608:	e79e      	b.n	8012548 <_printf_float+0x88>
 801260a:	9904      	ldr	r1, [sp, #16]
 801260c:	2947      	cmp	r1, #71	; 0x47
 801260e:	d1c1      	bne.n	8012594 <_printf_float+0xd4>
 8012610:	2b00      	cmp	r3, #0
 8012612:	d1bf      	bne.n	8012594 <_printf_float+0xd4>
 8012614:	2301      	movs	r3, #1
 8012616:	e7bc      	b.n	8012592 <_printf_float+0xd2>
 8012618:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 801261c:	d118      	bne.n	8012650 <_printf_float+0x190>
 801261e:	2900      	cmp	r1, #0
 8012620:	6863      	ldr	r3, [r4, #4]
 8012622:	dd0b      	ble.n	801263c <_printf_float+0x17c>
 8012624:	6121      	str	r1, [r4, #16]
 8012626:	b913      	cbnz	r3, 801262e <_printf_float+0x16e>
 8012628:	6822      	ldr	r2, [r4, #0]
 801262a:	07d0      	lsls	r0, r2, #31
 801262c:	d502      	bpl.n	8012634 <_printf_float+0x174>
 801262e:	3301      	adds	r3, #1
 8012630:	440b      	add	r3, r1
 8012632:	6123      	str	r3, [r4, #16]
 8012634:	2300      	movs	r3, #0
 8012636:	65a1      	str	r1, [r4, #88]	; 0x58
 8012638:	9304      	str	r3, [sp, #16]
 801263a:	e7de      	b.n	80125fa <_printf_float+0x13a>
 801263c:	b913      	cbnz	r3, 8012644 <_printf_float+0x184>
 801263e:	6822      	ldr	r2, [r4, #0]
 8012640:	07d2      	lsls	r2, r2, #31
 8012642:	d501      	bpl.n	8012648 <_printf_float+0x188>
 8012644:	3302      	adds	r3, #2
 8012646:	e7f4      	b.n	8012632 <_printf_float+0x172>
 8012648:	2301      	movs	r3, #1
 801264a:	e7f2      	b.n	8012632 <_printf_float+0x172>
 801264c:	f04f 0967 	mov.w	r9, #103	; 0x67
 8012650:	9b08      	ldr	r3, [sp, #32]
 8012652:	4299      	cmp	r1, r3
 8012654:	db05      	blt.n	8012662 <_printf_float+0x1a2>
 8012656:	6823      	ldr	r3, [r4, #0]
 8012658:	6121      	str	r1, [r4, #16]
 801265a:	07d8      	lsls	r0, r3, #31
 801265c:	d5ea      	bpl.n	8012634 <_printf_float+0x174>
 801265e:	1c4b      	adds	r3, r1, #1
 8012660:	e7e7      	b.n	8012632 <_printf_float+0x172>
 8012662:	2900      	cmp	r1, #0
 8012664:	bfd4      	ite	le
 8012666:	f1c1 0202 	rsble	r2, r1, #2
 801266a:	2201      	movgt	r2, #1
 801266c:	4413      	add	r3, r2
 801266e:	e7e0      	b.n	8012632 <_printf_float+0x172>
 8012670:	6823      	ldr	r3, [r4, #0]
 8012672:	055a      	lsls	r2, r3, #21
 8012674:	d407      	bmi.n	8012686 <_printf_float+0x1c6>
 8012676:	6923      	ldr	r3, [r4, #16]
 8012678:	4642      	mov	r2, r8
 801267a:	4631      	mov	r1, r6
 801267c:	4628      	mov	r0, r5
 801267e:	47b8      	blx	r7
 8012680:	3001      	adds	r0, #1
 8012682:	d12a      	bne.n	80126da <_printf_float+0x21a>
 8012684:	e76a      	b.n	801255c <_printf_float+0x9c>
 8012686:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801268a:	f240 80e2 	bls.w	8012852 <_printf_float+0x392>
 801268e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8012692:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012696:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801269a:	d133      	bne.n	8012704 <_printf_float+0x244>
 801269c:	4a38      	ldr	r2, [pc, #224]	; (8012780 <_printf_float+0x2c0>)
 801269e:	2301      	movs	r3, #1
 80126a0:	4631      	mov	r1, r6
 80126a2:	4628      	mov	r0, r5
 80126a4:	47b8      	blx	r7
 80126a6:	3001      	adds	r0, #1
 80126a8:	f43f af58 	beq.w	801255c <_printf_float+0x9c>
 80126ac:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80126b0:	429a      	cmp	r2, r3
 80126b2:	db02      	blt.n	80126ba <_printf_float+0x1fa>
 80126b4:	6823      	ldr	r3, [r4, #0]
 80126b6:	07d8      	lsls	r0, r3, #31
 80126b8:	d50f      	bpl.n	80126da <_printf_float+0x21a>
 80126ba:	4653      	mov	r3, sl
 80126bc:	465a      	mov	r2, fp
 80126be:	4631      	mov	r1, r6
 80126c0:	4628      	mov	r0, r5
 80126c2:	47b8      	blx	r7
 80126c4:	3001      	adds	r0, #1
 80126c6:	f43f af49 	beq.w	801255c <_printf_float+0x9c>
 80126ca:	f04f 0800 	mov.w	r8, #0
 80126ce:	f104 091a 	add.w	r9, r4, #26
 80126d2:	9b08      	ldr	r3, [sp, #32]
 80126d4:	3b01      	subs	r3, #1
 80126d6:	4543      	cmp	r3, r8
 80126d8:	dc09      	bgt.n	80126ee <_printf_float+0x22e>
 80126da:	6823      	ldr	r3, [r4, #0]
 80126dc:	079b      	lsls	r3, r3, #30
 80126de:	f100 8108 	bmi.w	80128f2 <_printf_float+0x432>
 80126e2:	68e0      	ldr	r0, [r4, #12]
 80126e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80126e6:	4298      	cmp	r0, r3
 80126e8:	bfb8      	it	lt
 80126ea:	4618      	movlt	r0, r3
 80126ec:	e738      	b.n	8012560 <_printf_float+0xa0>
 80126ee:	2301      	movs	r3, #1
 80126f0:	464a      	mov	r2, r9
 80126f2:	4631      	mov	r1, r6
 80126f4:	4628      	mov	r0, r5
 80126f6:	47b8      	blx	r7
 80126f8:	3001      	adds	r0, #1
 80126fa:	f43f af2f 	beq.w	801255c <_printf_float+0x9c>
 80126fe:	f108 0801 	add.w	r8, r8, #1
 8012702:	e7e6      	b.n	80126d2 <_printf_float+0x212>
 8012704:	9b07      	ldr	r3, [sp, #28]
 8012706:	2b00      	cmp	r3, #0
 8012708:	dc3c      	bgt.n	8012784 <_printf_float+0x2c4>
 801270a:	4a1d      	ldr	r2, [pc, #116]	; (8012780 <_printf_float+0x2c0>)
 801270c:	2301      	movs	r3, #1
 801270e:	4631      	mov	r1, r6
 8012710:	4628      	mov	r0, r5
 8012712:	47b8      	blx	r7
 8012714:	3001      	adds	r0, #1
 8012716:	f43f af21 	beq.w	801255c <_printf_float+0x9c>
 801271a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801271e:	4313      	orrs	r3, r2
 8012720:	d102      	bne.n	8012728 <_printf_float+0x268>
 8012722:	6823      	ldr	r3, [r4, #0]
 8012724:	07d9      	lsls	r1, r3, #31
 8012726:	d5d8      	bpl.n	80126da <_printf_float+0x21a>
 8012728:	4653      	mov	r3, sl
 801272a:	465a      	mov	r2, fp
 801272c:	4631      	mov	r1, r6
 801272e:	4628      	mov	r0, r5
 8012730:	47b8      	blx	r7
 8012732:	3001      	adds	r0, #1
 8012734:	f43f af12 	beq.w	801255c <_printf_float+0x9c>
 8012738:	f04f 0900 	mov.w	r9, #0
 801273c:	f104 0a1a 	add.w	sl, r4, #26
 8012740:	9b07      	ldr	r3, [sp, #28]
 8012742:	425b      	negs	r3, r3
 8012744:	454b      	cmp	r3, r9
 8012746:	dc01      	bgt.n	801274c <_printf_float+0x28c>
 8012748:	9b08      	ldr	r3, [sp, #32]
 801274a:	e795      	b.n	8012678 <_printf_float+0x1b8>
 801274c:	2301      	movs	r3, #1
 801274e:	4652      	mov	r2, sl
 8012750:	4631      	mov	r1, r6
 8012752:	4628      	mov	r0, r5
 8012754:	47b8      	blx	r7
 8012756:	3001      	adds	r0, #1
 8012758:	f43f af00 	beq.w	801255c <_printf_float+0x9c>
 801275c:	f109 0901 	add.w	r9, r9, #1
 8012760:	e7ee      	b.n	8012740 <_printf_float+0x280>
 8012762:	bf00      	nop
 8012764:	f3af 8000 	nop.w
 8012768:	ffffffff 	.word	0xffffffff
 801276c:	7fefffff 	.word	0x7fefffff
 8012770:	080168ec 	.word	0x080168ec
 8012774:	080168f0 	.word	0x080168f0
 8012778:	080168f8 	.word	0x080168f8
 801277c:	080168f4 	.word	0x080168f4
 8012780:	080168fc 	.word	0x080168fc
 8012784:	9a08      	ldr	r2, [sp, #32]
 8012786:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012788:	429a      	cmp	r2, r3
 801278a:	bfa8      	it	ge
 801278c:	461a      	movge	r2, r3
 801278e:	2a00      	cmp	r2, #0
 8012790:	4691      	mov	r9, r2
 8012792:	dc38      	bgt.n	8012806 <_printf_float+0x346>
 8012794:	2300      	movs	r3, #0
 8012796:	9305      	str	r3, [sp, #20]
 8012798:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801279c:	f104 021a 	add.w	r2, r4, #26
 80127a0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80127a2:	9905      	ldr	r1, [sp, #20]
 80127a4:	9304      	str	r3, [sp, #16]
 80127a6:	eba3 0309 	sub.w	r3, r3, r9
 80127aa:	428b      	cmp	r3, r1
 80127ac:	dc33      	bgt.n	8012816 <_printf_float+0x356>
 80127ae:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80127b2:	429a      	cmp	r2, r3
 80127b4:	db3c      	blt.n	8012830 <_printf_float+0x370>
 80127b6:	6823      	ldr	r3, [r4, #0]
 80127b8:	07da      	lsls	r2, r3, #31
 80127ba:	d439      	bmi.n	8012830 <_printf_float+0x370>
 80127bc:	9b08      	ldr	r3, [sp, #32]
 80127be:	9a04      	ldr	r2, [sp, #16]
 80127c0:	9907      	ldr	r1, [sp, #28]
 80127c2:	1a9a      	subs	r2, r3, r2
 80127c4:	eba3 0901 	sub.w	r9, r3, r1
 80127c8:	4591      	cmp	r9, r2
 80127ca:	bfa8      	it	ge
 80127cc:	4691      	movge	r9, r2
 80127ce:	f1b9 0f00 	cmp.w	r9, #0
 80127d2:	dc35      	bgt.n	8012840 <_printf_float+0x380>
 80127d4:	f04f 0800 	mov.w	r8, #0
 80127d8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80127dc:	f104 0a1a 	add.w	sl, r4, #26
 80127e0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80127e4:	1a9b      	subs	r3, r3, r2
 80127e6:	eba3 0309 	sub.w	r3, r3, r9
 80127ea:	4543      	cmp	r3, r8
 80127ec:	f77f af75 	ble.w	80126da <_printf_float+0x21a>
 80127f0:	2301      	movs	r3, #1
 80127f2:	4652      	mov	r2, sl
 80127f4:	4631      	mov	r1, r6
 80127f6:	4628      	mov	r0, r5
 80127f8:	47b8      	blx	r7
 80127fa:	3001      	adds	r0, #1
 80127fc:	f43f aeae 	beq.w	801255c <_printf_float+0x9c>
 8012800:	f108 0801 	add.w	r8, r8, #1
 8012804:	e7ec      	b.n	80127e0 <_printf_float+0x320>
 8012806:	4613      	mov	r3, r2
 8012808:	4631      	mov	r1, r6
 801280a:	4642      	mov	r2, r8
 801280c:	4628      	mov	r0, r5
 801280e:	47b8      	blx	r7
 8012810:	3001      	adds	r0, #1
 8012812:	d1bf      	bne.n	8012794 <_printf_float+0x2d4>
 8012814:	e6a2      	b.n	801255c <_printf_float+0x9c>
 8012816:	2301      	movs	r3, #1
 8012818:	4631      	mov	r1, r6
 801281a:	4628      	mov	r0, r5
 801281c:	9204      	str	r2, [sp, #16]
 801281e:	47b8      	blx	r7
 8012820:	3001      	adds	r0, #1
 8012822:	f43f ae9b 	beq.w	801255c <_printf_float+0x9c>
 8012826:	9b05      	ldr	r3, [sp, #20]
 8012828:	9a04      	ldr	r2, [sp, #16]
 801282a:	3301      	adds	r3, #1
 801282c:	9305      	str	r3, [sp, #20]
 801282e:	e7b7      	b.n	80127a0 <_printf_float+0x2e0>
 8012830:	4653      	mov	r3, sl
 8012832:	465a      	mov	r2, fp
 8012834:	4631      	mov	r1, r6
 8012836:	4628      	mov	r0, r5
 8012838:	47b8      	blx	r7
 801283a:	3001      	adds	r0, #1
 801283c:	d1be      	bne.n	80127bc <_printf_float+0x2fc>
 801283e:	e68d      	b.n	801255c <_printf_float+0x9c>
 8012840:	9a04      	ldr	r2, [sp, #16]
 8012842:	464b      	mov	r3, r9
 8012844:	4442      	add	r2, r8
 8012846:	4631      	mov	r1, r6
 8012848:	4628      	mov	r0, r5
 801284a:	47b8      	blx	r7
 801284c:	3001      	adds	r0, #1
 801284e:	d1c1      	bne.n	80127d4 <_printf_float+0x314>
 8012850:	e684      	b.n	801255c <_printf_float+0x9c>
 8012852:	9a08      	ldr	r2, [sp, #32]
 8012854:	2a01      	cmp	r2, #1
 8012856:	dc01      	bgt.n	801285c <_printf_float+0x39c>
 8012858:	07db      	lsls	r3, r3, #31
 801285a:	d537      	bpl.n	80128cc <_printf_float+0x40c>
 801285c:	2301      	movs	r3, #1
 801285e:	4642      	mov	r2, r8
 8012860:	4631      	mov	r1, r6
 8012862:	4628      	mov	r0, r5
 8012864:	47b8      	blx	r7
 8012866:	3001      	adds	r0, #1
 8012868:	f43f ae78 	beq.w	801255c <_printf_float+0x9c>
 801286c:	4653      	mov	r3, sl
 801286e:	465a      	mov	r2, fp
 8012870:	4631      	mov	r1, r6
 8012872:	4628      	mov	r0, r5
 8012874:	47b8      	blx	r7
 8012876:	3001      	adds	r0, #1
 8012878:	f43f ae70 	beq.w	801255c <_printf_float+0x9c>
 801287c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8012880:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012884:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012888:	d01b      	beq.n	80128c2 <_printf_float+0x402>
 801288a:	9b08      	ldr	r3, [sp, #32]
 801288c:	f108 0201 	add.w	r2, r8, #1
 8012890:	3b01      	subs	r3, #1
 8012892:	4631      	mov	r1, r6
 8012894:	4628      	mov	r0, r5
 8012896:	47b8      	blx	r7
 8012898:	3001      	adds	r0, #1
 801289a:	d10e      	bne.n	80128ba <_printf_float+0x3fa>
 801289c:	e65e      	b.n	801255c <_printf_float+0x9c>
 801289e:	2301      	movs	r3, #1
 80128a0:	464a      	mov	r2, r9
 80128a2:	4631      	mov	r1, r6
 80128a4:	4628      	mov	r0, r5
 80128a6:	47b8      	blx	r7
 80128a8:	3001      	adds	r0, #1
 80128aa:	f43f ae57 	beq.w	801255c <_printf_float+0x9c>
 80128ae:	f108 0801 	add.w	r8, r8, #1
 80128b2:	9b08      	ldr	r3, [sp, #32]
 80128b4:	3b01      	subs	r3, #1
 80128b6:	4543      	cmp	r3, r8
 80128b8:	dcf1      	bgt.n	801289e <_printf_float+0x3de>
 80128ba:	9b04      	ldr	r3, [sp, #16]
 80128bc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80128c0:	e6db      	b.n	801267a <_printf_float+0x1ba>
 80128c2:	f04f 0800 	mov.w	r8, #0
 80128c6:	f104 091a 	add.w	r9, r4, #26
 80128ca:	e7f2      	b.n	80128b2 <_printf_float+0x3f2>
 80128cc:	2301      	movs	r3, #1
 80128ce:	4642      	mov	r2, r8
 80128d0:	e7df      	b.n	8012892 <_printf_float+0x3d2>
 80128d2:	2301      	movs	r3, #1
 80128d4:	464a      	mov	r2, r9
 80128d6:	4631      	mov	r1, r6
 80128d8:	4628      	mov	r0, r5
 80128da:	47b8      	blx	r7
 80128dc:	3001      	adds	r0, #1
 80128de:	f43f ae3d 	beq.w	801255c <_printf_float+0x9c>
 80128e2:	f108 0801 	add.w	r8, r8, #1
 80128e6:	68e3      	ldr	r3, [r4, #12]
 80128e8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80128ea:	1a5b      	subs	r3, r3, r1
 80128ec:	4543      	cmp	r3, r8
 80128ee:	dcf0      	bgt.n	80128d2 <_printf_float+0x412>
 80128f0:	e6f7      	b.n	80126e2 <_printf_float+0x222>
 80128f2:	f04f 0800 	mov.w	r8, #0
 80128f6:	f104 0919 	add.w	r9, r4, #25
 80128fa:	e7f4      	b.n	80128e6 <_printf_float+0x426>

080128fc <_printf_common>:
 80128fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012900:	4616      	mov	r6, r2
 8012902:	4699      	mov	r9, r3
 8012904:	688a      	ldr	r2, [r1, #8]
 8012906:	690b      	ldr	r3, [r1, #16]
 8012908:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801290c:	4293      	cmp	r3, r2
 801290e:	bfb8      	it	lt
 8012910:	4613      	movlt	r3, r2
 8012912:	6033      	str	r3, [r6, #0]
 8012914:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012918:	4607      	mov	r7, r0
 801291a:	460c      	mov	r4, r1
 801291c:	b10a      	cbz	r2, 8012922 <_printf_common+0x26>
 801291e:	3301      	adds	r3, #1
 8012920:	6033      	str	r3, [r6, #0]
 8012922:	6823      	ldr	r3, [r4, #0]
 8012924:	0699      	lsls	r1, r3, #26
 8012926:	bf42      	ittt	mi
 8012928:	6833      	ldrmi	r3, [r6, #0]
 801292a:	3302      	addmi	r3, #2
 801292c:	6033      	strmi	r3, [r6, #0]
 801292e:	6825      	ldr	r5, [r4, #0]
 8012930:	f015 0506 	ands.w	r5, r5, #6
 8012934:	d106      	bne.n	8012944 <_printf_common+0x48>
 8012936:	f104 0a19 	add.w	sl, r4, #25
 801293a:	68e3      	ldr	r3, [r4, #12]
 801293c:	6832      	ldr	r2, [r6, #0]
 801293e:	1a9b      	subs	r3, r3, r2
 8012940:	42ab      	cmp	r3, r5
 8012942:	dc26      	bgt.n	8012992 <_printf_common+0x96>
 8012944:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8012948:	1e13      	subs	r3, r2, #0
 801294a:	6822      	ldr	r2, [r4, #0]
 801294c:	bf18      	it	ne
 801294e:	2301      	movne	r3, #1
 8012950:	0692      	lsls	r2, r2, #26
 8012952:	d42b      	bmi.n	80129ac <_printf_common+0xb0>
 8012954:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012958:	4649      	mov	r1, r9
 801295a:	4638      	mov	r0, r7
 801295c:	47c0      	blx	r8
 801295e:	3001      	adds	r0, #1
 8012960:	d01e      	beq.n	80129a0 <_printf_common+0xa4>
 8012962:	6823      	ldr	r3, [r4, #0]
 8012964:	68e5      	ldr	r5, [r4, #12]
 8012966:	6832      	ldr	r2, [r6, #0]
 8012968:	f003 0306 	and.w	r3, r3, #6
 801296c:	2b04      	cmp	r3, #4
 801296e:	bf08      	it	eq
 8012970:	1aad      	subeq	r5, r5, r2
 8012972:	68a3      	ldr	r3, [r4, #8]
 8012974:	6922      	ldr	r2, [r4, #16]
 8012976:	bf0c      	ite	eq
 8012978:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801297c:	2500      	movne	r5, #0
 801297e:	4293      	cmp	r3, r2
 8012980:	bfc4      	itt	gt
 8012982:	1a9b      	subgt	r3, r3, r2
 8012984:	18ed      	addgt	r5, r5, r3
 8012986:	2600      	movs	r6, #0
 8012988:	341a      	adds	r4, #26
 801298a:	42b5      	cmp	r5, r6
 801298c:	d11a      	bne.n	80129c4 <_printf_common+0xc8>
 801298e:	2000      	movs	r0, #0
 8012990:	e008      	b.n	80129a4 <_printf_common+0xa8>
 8012992:	2301      	movs	r3, #1
 8012994:	4652      	mov	r2, sl
 8012996:	4649      	mov	r1, r9
 8012998:	4638      	mov	r0, r7
 801299a:	47c0      	blx	r8
 801299c:	3001      	adds	r0, #1
 801299e:	d103      	bne.n	80129a8 <_printf_common+0xac>
 80129a0:	f04f 30ff 	mov.w	r0, #4294967295
 80129a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80129a8:	3501      	adds	r5, #1
 80129aa:	e7c6      	b.n	801293a <_printf_common+0x3e>
 80129ac:	18e1      	adds	r1, r4, r3
 80129ae:	1c5a      	adds	r2, r3, #1
 80129b0:	2030      	movs	r0, #48	; 0x30
 80129b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80129b6:	4422      	add	r2, r4
 80129b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80129bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80129c0:	3302      	adds	r3, #2
 80129c2:	e7c7      	b.n	8012954 <_printf_common+0x58>
 80129c4:	2301      	movs	r3, #1
 80129c6:	4622      	mov	r2, r4
 80129c8:	4649      	mov	r1, r9
 80129ca:	4638      	mov	r0, r7
 80129cc:	47c0      	blx	r8
 80129ce:	3001      	adds	r0, #1
 80129d0:	d0e6      	beq.n	80129a0 <_printf_common+0xa4>
 80129d2:	3601      	adds	r6, #1
 80129d4:	e7d9      	b.n	801298a <_printf_common+0x8e>
	...

080129d8 <_printf_i>:
 80129d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80129dc:	7e0f      	ldrb	r7, [r1, #24]
 80129de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80129e0:	2f78      	cmp	r7, #120	; 0x78
 80129e2:	4691      	mov	r9, r2
 80129e4:	4680      	mov	r8, r0
 80129e6:	460c      	mov	r4, r1
 80129e8:	469a      	mov	sl, r3
 80129ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80129ee:	d807      	bhi.n	8012a00 <_printf_i+0x28>
 80129f0:	2f62      	cmp	r7, #98	; 0x62
 80129f2:	d80a      	bhi.n	8012a0a <_printf_i+0x32>
 80129f4:	2f00      	cmp	r7, #0
 80129f6:	f000 80d8 	beq.w	8012baa <_printf_i+0x1d2>
 80129fa:	2f58      	cmp	r7, #88	; 0x58
 80129fc:	f000 80a3 	beq.w	8012b46 <_printf_i+0x16e>
 8012a00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012a04:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012a08:	e03a      	b.n	8012a80 <_printf_i+0xa8>
 8012a0a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8012a0e:	2b15      	cmp	r3, #21
 8012a10:	d8f6      	bhi.n	8012a00 <_printf_i+0x28>
 8012a12:	a101      	add	r1, pc, #4	; (adr r1, 8012a18 <_printf_i+0x40>)
 8012a14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012a18:	08012a71 	.word	0x08012a71
 8012a1c:	08012a85 	.word	0x08012a85
 8012a20:	08012a01 	.word	0x08012a01
 8012a24:	08012a01 	.word	0x08012a01
 8012a28:	08012a01 	.word	0x08012a01
 8012a2c:	08012a01 	.word	0x08012a01
 8012a30:	08012a85 	.word	0x08012a85
 8012a34:	08012a01 	.word	0x08012a01
 8012a38:	08012a01 	.word	0x08012a01
 8012a3c:	08012a01 	.word	0x08012a01
 8012a40:	08012a01 	.word	0x08012a01
 8012a44:	08012b91 	.word	0x08012b91
 8012a48:	08012ab5 	.word	0x08012ab5
 8012a4c:	08012b73 	.word	0x08012b73
 8012a50:	08012a01 	.word	0x08012a01
 8012a54:	08012a01 	.word	0x08012a01
 8012a58:	08012bb3 	.word	0x08012bb3
 8012a5c:	08012a01 	.word	0x08012a01
 8012a60:	08012ab5 	.word	0x08012ab5
 8012a64:	08012a01 	.word	0x08012a01
 8012a68:	08012a01 	.word	0x08012a01
 8012a6c:	08012b7b 	.word	0x08012b7b
 8012a70:	682b      	ldr	r3, [r5, #0]
 8012a72:	1d1a      	adds	r2, r3, #4
 8012a74:	681b      	ldr	r3, [r3, #0]
 8012a76:	602a      	str	r2, [r5, #0]
 8012a78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012a7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012a80:	2301      	movs	r3, #1
 8012a82:	e0a3      	b.n	8012bcc <_printf_i+0x1f4>
 8012a84:	6820      	ldr	r0, [r4, #0]
 8012a86:	6829      	ldr	r1, [r5, #0]
 8012a88:	0606      	lsls	r6, r0, #24
 8012a8a:	f101 0304 	add.w	r3, r1, #4
 8012a8e:	d50a      	bpl.n	8012aa6 <_printf_i+0xce>
 8012a90:	680e      	ldr	r6, [r1, #0]
 8012a92:	602b      	str	r3, [r5, #0]
 8012a94:	2e00      	cmp	r6, #0
 8012a96:	da03      	bge.n	8012aa0 <_printf_i+0xc8>
 8012a98:	232d      	movs	r3, #45	; 0x2d
 8012a9a:	4276      	negs	r6, r6
 8012a9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012aa0:	485e      	ldr	r0, [pc, #376]	; (8012c1c <_printf_i+0x244>)
 8012aa2:	230a      	movs	r3, #10
 8012aa4:	e019      	b.n	8012ada <_printf_i+0x102>
 8012aa6:	680e      	ldr	r6, [r1, #0]
 8012aa8:	602b      	str	r3, [r5, #0]
 8012aaa:	f010 0f40 	tst.w	r0, #64	; 0x40
 8012aae:	bf18      	it	ne
 8012ab0:	b236      	sxthne	r6, r6
 8012ab2:	e7ef      	b.n	8012a94 <_printf_i+0xbc>
 8012ab4:	682b      	ldr	r3, [r5, #0]
 8012ab6:	6820      	ldr	r0, [r4, #0]
 8012ab8:	1d19      	adds	r1, r3, #4
 8012aba:	6029      	str	r1, [r5, #0]
 8012abc:	0601      	lsls	r1, r0, #24
 8012abe:	d501      	bpl.n	8012ac4 <_printf_i+0xec>
 8012ac0:	681e      	ldr	r6, [r3, #0]
 8012ac2:	e002      	b.n	8012aca <_printf_i+0xf2>
 8012ac4:	0646      	lsls	r6, r0, #25
 8012ac6:	d5fb      	bpl.n	8012ac0 <_printf_i+0xe8>
 8012ac8:	881e      	ldrh	r6, [r3, #0]
 8012aca:	4854      	ldr	r0, [pc, #336]	; (8012c1c <_printf_i+0x244>)
 8012acc:	2f6f      	cmp	r7, #111	; 0x6f
 8012ace:	bf0c      	ite	eq
 8012ad0:	2308      	moveq	r3, #8
 8012ad2:	230a      	movne	r3, #10
 8012ad4:	2100      	movs	r1, #0
 8012ad6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012ada:	6865      	ldr	r5, [r4, #4]
 8012adc:	60a5      	str	r5, [r4, #8]
 8012ade:	2d00      	cmp	r5, #0
 8012ae0:	bfa2      	ittt	ge
 8012ae2:	6821      	ldrge	r1, [r4, #0]
 8012ae4:	f021 0104 	bicge.w	r1, r1, #4
 8012ae8:	6021      	strge	r1, [r4, #0]
 8012aea:	b90e      	cbnz	r6, 8012af0 <_printf_i+0x118>
 8012aec:	2d00      	cmp	r5, #0
 8012aee:	d04d      	beq.n	8012b8c <_printf_i+0x1b4>
 8012af0:	4615      	mov	r5, r2
 8012af2:	fbb6 f1f3 	udiv	r1, r6, r3
 8012af6:	fb03 6711 	mls	r7, r3, r1, r6
 8012afa:	5dc7      	ldrb	r7, [r0, r7]
 8012afc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8012b00:	4637      	mov	r7, r6
 8012b02:	42bb      	cmp	r3, r7
 8012b04:	460e      	mov	r6, r1
 8012b06:	d9f4      	bls.n	8012af2 <_printf_i+0x11a>
 8012b08:	2b08      	cmp	r3, #8
 8012b0a:	d10b      	bne.n	8012b24 <_printf_i+0x14c>
 8012b0c:	6823      	ldr	r3, [r4, #0]
 8012b0e:	07de      	lsls	r6, r3, #31
 8012b10:	d508      	bpl.n	8012b24 <_printf_i+0x14c>
 8012b12:	6923      	ldr	r3, [r4, #16]
 8012b14:	6861      	ldr	r1, [r4, #4]
 8012b16:	4299      	cmp	r1, r3
 8012b18:	bfde      	ittt	le
 8012b1a:	2330      	movle	r3, #48	; 0x30
 8012b1c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012b20:	f105 35ff 	addle.w	r5, r5, #4294967295
 8012b24:	1b52      	subs	r2, r2, r5
 8012b26:	6122      	str	r2, [r4, #16]
 8012b28:	f8cd a000 	str.w	sl, [sp]
 8012b2c:	464b      	mov	r3, r9
 8012b2e:	aa03      	add	r2, sp, #12
 8012b30:	4621      	mov	r1, r4
 8012b32:	4640      	mov	r0, r8
 8012b34:	f7ff fee2 	bl	80128fc <_printf_common>
 8012b38:	3001      	adds	r0, #1
 8012b3a:	d14c      	bne.n	8012bd6 <_printf_i+0x1fe>
 8012b3c:	f04f 30ff 	mov.w	r0, #4294967295
 8012b40:	b004      	add	sp, #16
 8012b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012b46:	4835      	ldr	r0, [pc, #212]	; (8012c1c <_printf_i+0x244>)
 8012b48:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8012b4c:	6829      	ldr	r1, [r5, #0]
 8012b4e:	6823      	ldr	r3, [r4, #0]
 8012b50:	f851 6b04 	ldr.w	r6, [r1], #4
 8012b54:	6029      	str	r1, [r5, #0]
 8012b56:	061d      	lsls	r5, r3, #24
 8012b58:	d514      	bpl.n	8012b84 <_printf_i+0x1ac>
 8012b5a:	07df      	lsls	r7, r3, #31
 8012b5c:	bf44      	itt	mi
 8012b5e:	f043 0320 	orrmi.w	r3, r3, #32
 8012b62:	6023      	strmi	r3, [r4, #0]
 8012b64:	b91e      	cbnz	r6, 8012b6e <_printf_i+0x196>
 8012b66:	6823      	ldr	r3, [r4, #0]
 8012b68:	f023 0320 	bic.w	r3, r3, #32
 8012b6c:	6023      	str	r3, [r4, #0]
 8012b6e:	2310      	movs	r3, #16
 8012b70:	e7b0      	b.n	8012ad4 <_printf_i+0xfc>
 8012b72:	6823      	ldr	r3, [r4, #0]
 8012b74:	f043 0320 	orr.w	r3, r3, #32
 8012b78:	6023      	str	r3, [r4, #0]
 8012b7a:	2378      	movs	r3, #120	; 0x78
 8012b7c:	4828      	ldr	r0, [pc, #160]	; (8012c20 <_printf_i+0x248>)
 8012b7e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8012b82:	e7e3      	b.n	8012b4c <_printf_i+0x174>
 8012b84:	0659      	lsls	r1, r3, #25
 8012b86:	bf48      	it	mi
 8012b88:	b2b6      	uxthmi	r6, r6
 8012b8a:	e7e6      	b.n	8012b5a <_printf_i+0x182>
 8012b8c:	4615      	mov	r5, r2
 8012b8e:	e7bb      	b.n	8012b08 <_printf_i+0x130>
 8012b90:	682b      	ldr	r3, [r5, #0]
 8012b92:	6826      	ldr	r6, [r4, #0]
 8012b94:	6961      	ldr	r1, [r4, #20]
 8012b96:	1d18      	adds	r0, r3, #4
 8012b98:	6028      	str	r0, [r5, #0]
 8012b9a:	0635      	lsls	r5, r6, #24
 8012b9c:	681b      	ldr	r3, [r3, #0]
 8012b9e:	d501      	bpl.n	8012ba4 <_printf_i+0x1cc>
 8012ba0:	6019      	str	r1, [r3, #0]
 8012ba2:	e002      	b.n	8012baa <_printf_i+0x1d2>
 8012ba4:	0670      	lsls	r0, r6, #25
 8012ba6:	d5fb      	bpl.n	8012ba0 <_printf_i+0x1c8>
 8012ba8:	8019      	strh	r1, [r3, #0]
 8012baa:	2300      	movs	r3, #0
 8012bac:	6123      	str	r3, [r4, #16]
 8012bae:	4615      	mov	r5, r2
 8012bb0:	e7ba      	b.n	8012b28 <_printf_i+0x150>
 8012bb2:	682b      	ldr	r3, [r5, #0]
 8012bb4:	1d1a      	adds	r2, r3, #4
 8012bb6:	602a      	str	r2, [r5, #0]
 8012bb8:	681d      	ldr	r5, [r3, #0]
 8012bba:	6862      	ldr	r2, [r4, #4]
 8012bbc:	2100      	movs	r1, #0
 8012bbe:	4628      	mov	r0, r5
 8012bc0:	f7ed fb96 	bl	80002f0 <memchr>
 8012bc4:	b108      	cbz	r0, 8012bca <_printf_i+0x1f2>
 8012bc6:	1b40      	subs	r0, r0, r5
 8012bc8:	6060      	str	r0, [r4, #4]
 8012bca:	6863      	ldr	r3, [r4, #4]
 8012bcc:	6123      	str	r3, [r4, #16]
 8012bce:	2300      	movs	r3, #0
 8012bd0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012bd4:	e7a8      	b.n	8012b28 <_printf_i+0x150>
 8012bd6:	6923      	ldr	r3, [r4, #16]
 8012bd8:	462a      	mov	r2, r5
 8012bda:	4649      	mov	r1, r9
 8012bdc:	4640      	mov	r0, r8
 8012bde:	47d0      	blx	sl
 8012be0:	3001      	adds	r0, #1
 8012be2:	d0ab      	beq.n	8012b3c <_printf_i+0x164>
 8012be4:	6823      	ldr	r3, [r4, #0]
 8012be6:	079b      	lsls	r3, r3, #30
 8012be8:	d413      	bmi.n	8012c12 <_printf_i+0x23a>
 8012bea:	68e0      	ldr	r0, [r4, #12]
 8012bec:	9b03      	ldr	r3, [sp, #12]
 8012bee:	4298      	cmp	r0, r3
 8012bf0:	bfb8      	it	lt
 8012bf2:	4618      	movlt	r0, r3
 8012bf4:	e7a4      	b.n	8012b40 <_printf_i+0x168>
 8012bf6:	2301      	movs	r3, #1
 8012bf8:	4632      	mov	r2, r6
 8012bfa:	4649      	mov	r1, r9
 8012bfc:	4640      	mov	r0, r8
 8012bfe:	47d0      	blx	sl
 8012c00:	3001      	adds	r0, #1
 8012c02:	d09b      	beq.n	8012b3c <_printf_i+0x164>
 8012c04:	3501      	adds	r5, #1
 8012c06:	68e3      	ldr	r3, [r4, #12]
 8012c08:	9903      	ldr	r1, [sp, #12]
 8012c0a:	1a5b      	subs	r3, r3, r1
 8012c0c:	42ab      	cmp	r3, r5
 8012c0e:	dcf2      	bgt.n	8012bf6 <_printf_i+0x21e>
 8012c10:	e7eb      	b.n	8012bea <_printf_i+0x212>
 8012c12:	2500      	movs	r5, #0
 8012c14:	f104 0619 	add.w	r6, r4, #25
 8012c18:	e7f5      	b.n	8012c06 <_printf_i+0x22e>
 8012c1a:	bf00      	nop
 8012c1c:	080168fe 	.word	0x080168fe
 8012c20:	0801690f 	.word	0x0801690f

08012c24 <_sbrk_r>:
 8012c24:	b538      	push	{r3, r4, r5, lr}
 8012c26:	4d06      	ldr	r5, [pc, #24]	; (8012c40 <_sbrk_r+0x1c>)
 8012c28:	2300      	movs	r3, #0
 8012c2a:	4604      	mov	r4, r0
 8012c2c:	4608      	mov	r0, r1
 8012c2e:	602b      	str	r3, [r5, #0]
 8012c30:	f7ef f93e 	bl	8001eb0 <_sbrk>
 8012c34:	1c43      	adds	r3, r0, #1
 8012c36:	d102      	bne.n	8012c3e <_sbrk_r+0x1a>
 8012c38:	682b      	ldr	r3, [r5, #0]
 8012c3a:	b103      	cbz	r3, 8012c3e <_sbrk_r+0x1a>
 8012c3c:	6023      	str	r3, [r4, #0]
 8012c3e:	bd38      	pop	{r3, r4, r5, pc}
 8012c40:	24001ea0 	.word	0x24001ea0

08012c44 <strncmp>:
 8012c44:	b510      	push	{r4, lr}
 8012c46:	b17a      	cbz	r2, 8012c68 <strncmp+0x24>
 8012c48:	4603      	mov	r3, r0
 8012c4a:	3901      	subs	r1, #1
 8012c4c:	1884      	adds	r4, r0, r2
 8012c4e:	f813 0b01 	ldrb.w	r0, [r3], #1
 8012c52:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8012c56:	4290      	cmp	r0, r2
 8012c58:	d101      	bne.n	8012c5e <strncmp+0x1a>
 8012c5a:	42a3      	cmp	r3, r4
 8012c5c:	d101      	bne.n	8012c62 <strncmp+0x1e>
 8012c5e:	1a80      	subs	r0, r0, r2
 8012c60:	bd10      	pop	{r4, pc}
 8012c62:	2800      	cmp	r0, #0
 8012c64:	d1f3      	bne.n	8012c4e <strncmp+0xa>
 8012c66:	e7fa      	b.n	8012c5e <strncmp+0x1a>
 8012c68:	4610      	mov	r0, r2
 8012c6a:	e7f9      	b.n	8012c60 <strncmp+0x1c>

08012c6c <quorem>:
 8012c6c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c70:	6903      	ldr	r3, [r0, #16]
 8012c72:	690c      	ldr	r4, [r1, #16]
 8012c74:	42a3      	cmp	r3, r4
 8012c76:	4607      	mov	r7, r0
 8012c78:	f2c0 8081 	blt.w	8012d7e <quorem+0x112>
 8012c7c:	3c01      	subs	r4, #1
 8012c7e:	f101 0814 	add.w	r8, r1, #20
 8012c82:	f100 0514 	add.w	r5, r0, #20
 8012c86:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012c8a:	9301      	str	r3, [sp, #4]
 8012c8c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8012c90:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012c94:	3301      	adds	r3, #1
 8012c96:	429a      	cmp	r2, r3
 8012c98:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8012c9c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8012ca0:	fbb2 f6f3 	udiv	r6, r2, r3
 8012ca4:	d331      	bcc.n	8012d0a <quorem+0x9e>
 8012ca6:	f04f 0e00 	mov.w	lr, #0
 8012caa:	4640      	mov	r0, r8
 8012cac:	46ac      	mov	ip, r5
 8012cae:	46f2      	mov	sl, lr
 8012cb0:	f850 2b04 	ldr.w	r2, [r0], #4
 8012cb4:	b293      	uxth	r3, r2
 8012cb6:	fb06 e303 	mla	r3, r6, r3, lr
 8012cba:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8012cbe:	b29b      	uxth	r3, r3
 8012cc0:	ebaa 0303 	sub.w	r3, sl, r3
 8012cc4:	f8dc a000 	ldr.w	sl, [ip]
 8012cc8:	0c12      	lsrs	r2, r2, #16
 8012cca:	fa13 f38a 	uxtah	r3, r3, sl
 8012cce:	fb06 e202 	mla	r2, r6, r2, lr
 8012cd2:	9300      	str	r3, [sp, #0]
 8012cd4:	9b00      	ldr	r3, [sp, #0]
 8012cd6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8012cda:	b292      	uxth	r2, r2
 8012cdc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8012ce0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012ce4:	f8bd 3000 	ldrh.w	r3, [sp]
 8012ce8:	4581      	cmp	r9, r0
 8012cea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012cee:	f84c 3b04 	str.w	r3, [ip], #4
 8012cf2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8012cf6:	d2db      	bcs.n	8012cb0 <quorem+0x44>
 8012cf8:	f855 300b 	ldr.w	r3, [r5, fp]
 8012cfc:	b92b      	cbnz	r3, 8012d0a <quorem+0x9e>
 8012cfe:	9b01      	ldr	r3, [sp, #4]
 8012d00:	3b04      	subs	r3, #4
 8012d02:	429d      	cmp	r5, r3
 8012d04:	461a      	mov	r2, r3
 8012d06:	d32e      	bcc.n	8012d66 <quorem+0xfa>
 8012d08:	613c      	str	r4, [r7, #16]
 8012d0a:	4638      	mov	r0, r7
 8012d0c:	f001 f83c 	bl	8013d88 <__mcmp>
 8012d10:	2800      	cmp	r0, #0
 8012d12:	db24      	blt.n	8012d5e <quorem+0xf2>
 8012d14:	3601      	adds	r6, #1
 8012d16:	4628      	mov	r0, r5
 8012d18:	f04f 0c00 	mov.w	ip, #0
 8012d1c:	f858 2b04 	ldr.w	r2, [r8], #4
 8012d20:	f8d0 e000 	ldr.w	lr, [r0]
 8012d24:	b293      	uxth	r3, r2
 8012d26:	ebac 0303 	sub.w	r3, ip, r3
 8012d2a:	0c12      	lsrs	r2, r2, #16
 8012d2c:	fa13 f38e 	uxtah	r3, r3, lr
 8012d30:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8012d34:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012d38:	b29b      	uxth	r3, r3
 8012d3a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012d3e:	45c1      	cmp	r9, r8
 8012d40:	f840 3b04 	str.w	r3, [r0], #4
 8012d44:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8012d48:	d2e8      	bcs.n	8012d1c <quorem+0xb0>
 8012d4a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012d4e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012d52:	b922      	cbnz	r2, 8012d5e <quorem+0xf2>
 8012d54:	3b04      	subs	r3, #4
 8012d56:	429d      	cmp	r5, r3
 8012d58:	461a      	mov	r2, r3
 8012d5a:	d30a      	bcc.n	8012d72 <quorem+0x106>
 8012d5c:	613c      	str	r4, [r7, #16]
 8012d5e:	4630      	mov	r0, r6
 8012d60:	b003      	add	sp, #12
 8012d62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d66:	6812      	ldr	r2, [r2, #0]
 8012d68:	3b04      	subs	r3, #4
 8012d6a:	2a00      	cmp	r2, #0
 8012d6c:	d1cc      	bne.n	8012d08 <quorem+0x9c>
 8012d6e:	3c01      	subs	r4, #1
 8012d70:	e7c7      	b.n	8012d02 <quorem+0x96>
 8012d72:	6812      	ldr	r2, [r2, #0]
 8012d74:	3b04      	subs	r3, #4
 8012d76:	2a00      	cmp	r2, #0
 8012d78:	d1f0      	bne.n	8012d5c <quorem+0xf0>
 8012d7a:	3c01      	subs	r4, #1
 8012d7c:	e7eb      	b.n	8012d56 <quorem+0xea>
 8012d7e:	2000      	movs	r0, #0
 8012d80:	e7ee      	b.n	8012d60 <quorem+0xf4>
 8012d82:	0000      	movs	r0, r0
 8012d84:	0000      	movs	r0, r0
	...

08012d88 <_dtoa_r>:
 8012d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d8c:	ed2d 8b02 	vpush	{d8}
 8012d90:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8012d92:	b091      	sub	sp, #68	; 0x44
 8012d94:	ed8d 0b02 	vstr	d0, [sp, #8]
 8012d98:	ec59 8b10 	vmov	r8, r9, d0
 8012d9c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8012d9e:	9106      	str	r1, [sp, #24]
 8012da0:	4606      	mov	r6, r0
 8012da2:	9208      	str	r2, [sp, #32]
 8012da4:	930c      	str	r3, [sp, #48]	; 0x30
 8012da6:	b975      	cbnz	r5, 8012dc6 <_dtoa_r+0x3e>
 8012da8:	2010      	movs	r0, #16
 8012daa:	f7f5 fa35 	bl	8008218 <__wrap_malloc>
 8012dae:	4602      	mov	r2, r0
 8012db0:	6270      	str	r0, [r6, #36]	; 0x24
 8012db2:	b920      	cbnz	r0, 8012dbe <_dtoa_r+0x36>
 8012db4:	4baa      	ldr	r3, [pc, #680]	; (8013060 <_dtoa_r+0x2d8>)
 8012db6:	21ea      	movs	r1, #234	; 0xea
 8012db8:	48aa      	ldr	r0, [pc, #680]	; (8013064 <_dtoa_r+0x2dc>)
 8012dba:	f001 f8fd 	bl	8013fb8 <__assert_func>
 8012dbe:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8012dc2:	6005      	str	r5, [r0, #0]
 8012dc4:	60c5      	str	r5, [r0, #12]
 8012dc6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8012dc8:	6819      	ldr	r1, [r3, #0]
 8012dca:	b151      	cbz	r1, 8012de2 <_dtoa_r+0x5a>
 8012dcc:	685a      	ldr	r2, [r3, #4]
 8012dce:	604a      	str	r2, [r1, #4]
 8012dd0:	2301      	movs	r3, #1
 8012dd2:	4093      	lsls	r3, r2
 8012dd4:	608b      	str	r3, [r1, #8]
 8012dd6:	4630      	mov	r0, r6
 8012dd8:	f000 fd94 	bl	8013904 <_Bfree>
 8012ddc:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8012dde:	2200      	movs	r2, #0
 8012de0:	601a      	str	r2, [r3, #0]
 8012de2:	f1b9 0300 	subs.w	r3, r9, #0
 8012de6:	bfbb      	ittet	lt
 8012de8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8012dec:	9303      	strlt	r3, [sp, #12]
 8012dee:	2300      	movge	r3, #0
 8012df0:	2201      	movlt	r2, #1
 8012df2:	bfac      	ite	ge
 8012df4:	6023      	strge	r3, [r4, #0]
 8012df6:	6022      	strlt	r2, [r4, #0]
 8012df8:	4b9b      	ldr	r3, [pc, #620]	; (8013068 <_dtoa_r+0x2e0>)
 8012dfa:	9c03      	ldr	r4, [sp, #12]
 8012dfc:	43a3      	bics	r3, r4
 8012dfe:	d11c      	bne.n	8012e3a <_dtoa_r+0xb2>
 8012e00:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012e02:	f242 730f 	movw	r3, #9999	; 0x270f
 8012e06:	6013      	str	r3, [r2, #0]
 8012e08:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8012e0c:	ea53 0308 	orrs.w	r3, r3, r8
 8012e10:	f000 84fd 	beq.w	801380e <_dtoa_r+0xa86>
 8012e14:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012e16:	b963      	cbnz	r3, 8012e32 <_dtoa_r+0xaa>
 8012e18:	4b94      	ldr	r3, [pc, #592]	; (801306c <_dtoa_r+0x2e4>)
 8012e1a:	e01f      	b.n	8012e5c <_dtoa_r+0xd4>
 8012e1c:	4b94      	ldr	r3, [pc, #592]	; (8013070 <_dtoa_r+0x2e8>)
 8012e1e:	9301      	str	r3, [sp, #4]
 8012e20:	3308      	adds	r3, #8
 8012e22:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8012e24:	6013      	str	r3, [r2, #0]
 8012e26:	9801      	ldr	r0, [sp, #4]
 8012e28:	b011      	add	sp, #68	; 0x44
 8012e2a:	ecbd 8b02 	vpop	{d8}
 8012e2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e32:	4b8e      	ldr	r3, [pc, #568]	; (801306c <_dtoa_r+0x2e4>)
 8012e34:	9301      	str	r3, [sp, #4]
 8012e36:	3303      	adds	r3, #3
 8012e38:	e7f3      	b.n	8012e22 <_dtoa_r+0x9a>
 8012e3a:	ed9d 8b02 	vldr	d8, [sp, #8]
 8012e3e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8012e42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e46:	d10b      	bne.n	8012e60 <_dtoa_r+0xd8>
 8012e48:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012e4a:	2301      	movs	r3, #1
 8012e4c:	6013      	str	r3, [r2, #0]
 8012e4e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012e50:	2b00      	cmp	r3, #0
 8012e52:	f000 84d9 	beq.w	8013808 <_dtoa_r+0xa80>
 8012e56:	4887      	ldr	r0, [pc, #540]	; (8013074 <_dtoa_r+0x2ec>)
 8012e58:	6018      	str	r0, [r3, #0]
 8012e5a:	1e43      	subs	r3, r0, #1
 8012e5c:	9301      	str	r3, [sp, #4]
 8012e5e:	e7e2      	b.n	8012e26 <_dtoa_r+0x9e>
 8012e60:	a90f      	add	r1, sp, #60	; 0x3c
 8012e62:	aa0e      	add	r2, sp, #56	; 0x38
 8012e64:	4630      	mov	r0, r6
 8012e66:	eeb0 0b48 	vmov.f64	d0, d8
 8012e6a:	f001 f833 	bl	8013ed4 <__d2b>
 8012e6e:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8012e72:	4605      	mov	r5, r0
 8012e74:	980e      	ldr	r0, [sp, #56]	; 0x38
 8012e76:	2900      	cmp	r1, #0
 8012e78:	d046      	beq.n	8012f08 <_dtoa_r+0x180>
 8012e7a:	ee18 4a90 	vmov	r4, s17
 8012e7e:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8012e82:	ec53 2b18 	vmov	r2, r3, d8
 8012e86:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8012e8a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8012e8e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8012e92:	2400      	movs	r4, #0
 8012e94:	ec43 2b16 	vmov	d6, r2, r3
 8012e98:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8012e9c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8013048 <_dtoa_r+0x2c0>
 8012ea0:	ee36 7b47 	vsub.f64	d7, d6, d7
 8012ea4:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8013050 <_dtoa_r+0x2c8>
 8012ea8:	eea7 6b05 	vfma.f64	d6, d7, d5
 8012eac:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8013058 <_dtoa_r+0x2d0>
 8012eb0:	ee07 1a90 	vmov	s15, r1
 8012eb4:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8012eb8:	eeb0 7b46 	vmov.f64	d7, d6
 8012ebc:	eea4 7b05 	vfma.f64	d7, d4, d5
 8012ec0:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8012ec4:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8012ec8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ecc:	ee16 ba90 	vmov	fp, s13
 8012ed0:	940a      	str	r4, [sp, #40]	; 0x28
 8012ed2:	d508      	bpl.n	8012ee6 <_dtoa_r+0x15e>
 8012ed4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8012ed8:	eeb4 6b47 	vcmp.f64	d6, d7
 8012edc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ee0:	bf18      	it	ne
 8012ee2:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8012ee6:	f1bb 0f16 	cmp.w	fp, #22
 8012eea:	d82f      	bhi.n	8012f4c <_dtoa_r+0x1c4>
 8012eec:	4b62      	ldr	r3, [pc, #392]	; (8013078 <_dtoa_r+0x2f0>)
 8012eee:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8012ef2:	ed93 7b00 	vldr	d7, [r3]
 8012ef6:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8012efa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012efe:	d501      	bpl.n	8012f04 <_dtoa_r+0x17c>
 8012f00:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012f04:	2300      	movs	r3, #0
 8012f06:	e022      	b.n	8012f4e <_dtoa_r+0x1c6>
 8012f08:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8012f0a:	4401      	add	r1, r0
 8012f0c:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8012f10:	2b20      	cmp	r3, #32
 8012f12:	bfc1      	itttt	gt
 8012f14:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8012f18:	fa04 f303 	lslgt.w	r3, r4, r3
 8012f1c:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8012f20:	fa28 f804 	lsrgt.w	r8, r8, r4
 8012f24:	bfd6      	itet	le
 8012f26:	f1c3 0320 	rsble	r3, r3, #32
 8012f2a:	ea43 0808 	orrgt.w	r8, r3, r8
 8012f2e:	fa08 f803 	lslle.w	r8, r8, r3
 8012f32:	ee07 8a90 	vmov	s15, r8
 8012f36:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8012f3a:	3901      	subs	r1, #1
 8012f3c:	ee17 4a90 	vmov	r4, s15
 8012f40:	ec53 2b17 	vmov	r2, r3, d7
 8012f44:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8012f48:	2401      	movs	r4, #1
 8012f4a:	e7a3      	b.n	8012e94 <_dtoa_r+0x10c>
 8012f4c:	2301      	movs	r3, #1
 8012f4e:	930b      	str	r3, [sp, #44]	; 0x2c
 8012f50:	1a43      	subs	r3, r0, r1
 8012f52:	1e5a      	subs	r2, r3, #1
 8012f54:	bf45      	ittet	mi
 8012f56:	f1c3 0301 	rsbmi	r3, r3, #1
 8012f5a:	9304      	strmi	r3, [sp, #16]
 8012f5c:	2300      	movpl	r3, #0
 8012f5e:	2300      	movmi	r3, #0
 8012f60:	9205      	str	r2, [sp, #20]
 8012f62:	bf54      	ite	pl
 8012f64:	9304      	strpl	r3, [sp, #16]
 8012f66:	9305      	strmi	r3, [sp, #20]
 8012f68:	f1bb 0f00 	cmp.w	fp, #0
 8012f6c:	db18      	blt.n	8012fa0 <_dtoa_r+0x218>
 8012f6e:	9b05      	ldr	r3, [sp, #20]
 8012f70:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8012f74:	445b      	add	r3, fp
 8012f76:	9305      	str	r3, [sp, #20]
 8012f78:	2300      	movs	r3, #0
 8012f7a:	9a06      	ldr	r2, [sp, #24]
 8012f7c:	2a09      	cmp	r2, #9
 8012f7e:	d849      	bhi.n	8013014 <_dtoa_r+0x28c>
 8012f80:	2a05      	cmp	r2, #5
 8012f82:	bfc4      	itt	gt
 8012f84:	3a04      	subgt	r2, #4
 8012f86:	9206      	strgt	r2, [sp, #24]
 8012f88:	9a06      	ldr	r2, [sp, #24]
 8012f8a:	f1a2 0202 	sub.w	r2, r2, #2
 8012f8e:	bfcc      	ite	gt
 8012f90:	2400      	movgt	r4, #0
 8012f92:	2401      	movle	r4, #1
 8012f94:	2a03      	cmp	r2, #3
 8012f96:	d848      	bhi.n	801302a <_dtoa_r+0x2a2>
 8012f98:	e8df f002 	tbb	[pc, r2]
 8012f9c:	3a2c2e0b 	.word	0x3a2c2e0b
 8012fa0:	9b04      	ldr	r3, [sp, #16]
 8012fa2:	2200      	movs	r2, #0
 8012fa4:	eba3 030b 	sub.w	r3, r3, fp
 8012fa8:	9304      	str	r3, [sp, #16]
 8012faa:	9209      	str	r2, [sp, #36]	; 0x24
 8012fac:	f1cb 0300 	rsb	r3, fp, #0
 8012fb0:	e7e3      	b.n	8012f7a <_dtoa_r+0x1f2>
 8012fb2:	2200      	movs	r2, #0
 8012fb4:	9207      	str	r2, [sp, #28]
 8012fb6:	9a08      	ldr	r2, [sp, #32]
 8012fb8:	2a00      	cmp	r2, #0
 8012fba:	dc39      	bgt.n	8013030 <_dtoa_r+0x2a8>
 8012fbc:	f04f 0a01 	mov.w	sl, #1
 8012fc0:	46d1      	mov	r9, sl
 8012fc2:	4652      	mov	r2, sl
 8012fc4:	f8cd a020 	str.w	sl, [sp, #32]
 8012fc8:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8012fca:	2100      	movs	r1, #0
 8012fcc:	6079      	str	r1, [r7, #4]
 8012fce:	2004      	movs	r0, #4
 8012fd0:	f100 0c14 	add.w	ip, r0, #20
 8012fd4:	4594      	cmp	ip, r2
 8012fd6:	6879      	ldr	r1, [r7, #4]
 8012fd8:	d92f      	bls.n	801303a <_dtoa_r+0x2b2>
 8012fda:	4630      	mov	r0, r6
 8012fdc:	930d      	str	r3, [sp, #52]	; 0x34
 8012fde:	f000 fc51 	bl	8013884 <_Balloc>
 8012fe2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012fe4:	9001      	str	r0, [sp, #4]
 8012fe6:	4602      	mov	r2, r0
 8012fe8:	2800      	cmp	r0, #0
 8012fea:	d149      	bne.n	8013080 <_dtoa_r+0x2f8>
 8012fec:	4b23      	ldr	r3, [pc, #140]	; (801307c <_dtoa_r+0x2f4>)
 8012fee:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8012ff2:	e6e1      	b.n	8012db8 <_dtoa_r+0x30>
 8012ff4:	2201      	movs	r2, #1
 8012ff6:	e7dd      	b.n	8012fb4 <_dtoa_r+0x22c>
 8012ff8:	2200      	movs	r2, #0
 8012ffa:	9207      	str	r2, [sp, #28]
 8012ffc:	9a08      	ldr	r2, [sp, #32]
 8012ffe:	eb0b 0a02 	add.w	sl, fp, r2
 8013002:	f10a 0901 	add.w	r9, sl, #1
 8013006:	464a      	mov	r2, r9
 8013008:	2a01      	cmp	r2, #1
 801300a:	bfb8      	it	lt
 801300c:	2201      	movlt	r2, #1
 801300e:	e7db      	b.n	8012fc8 <_dtoa_r+0x240>
 8013010:	2201      	movs	r2, #1
 8013012:	e7f2      	b.n	8012ffa <_dtoa_r+0x272>
 8013014:	2401      	movs	r4, #1
 8013016:	2200      	movs	r2, #0
 8013018:	e9cd 2406 	strd	r2, r4, [sp, #24]
 801301c:	f04f 3aff 	mov.w	sl, #4294967295
 8013020:	2100      	movs	r1, #0
 8013022:	46d1      	mov	r9, sl
 8013024:	2212      	movs	r2, #18
 8013026:	9108      	str	r1, [sp, #32]
 8013028:	e7ce      	b.n	8012fc8 <_dtoa_r+0x240>
 801302a:	2201      	movs	r2, #1
 801302c:	9207      	str	r2, [sp, #28]
 801302e:	e7f5      	b.n	801301c <_dtoa_r+0x294>
 8013030:	f8dd a020 	ldr.w	sl, [sp, #32]
 8013034:	46d1      	mov	r9, sl
 8013036:	4652      	mov	r2, sl
 8013038:	e7c6      	b.n	8012fc8 <_dtoa_r+0x240>
 801303a:	3101      	adds	r1, #1
 801303c:	6079      	str	r1, [r7, #4]
 801303e:	0040      	lsls	r0, r0, #1
 8013040:	e7c6      	b.n	8012fd0 <_dtoa_r+0x248>
 8013042:	bf00      	nop
 8013044:	f3af 8000 	nop.w
 8013048:	636f4361 	.word	0x636f4361
 801304c:	3fd287a7 	.word	0x3fd287a7
 8013050:	8b60c8b3 	.word	0x8b60c8b3
 8013054:	3fc68a28 	.word	0x3fc68a28
 8013058:	509f79fb 	.word	0x509f79fb
 801305c:	3fd34413 	.word	0x3fd34413
 8013060:	0801692d 	.word	0x0801692d
 8013064:	08016944 	.word	0x08016944
 8013068:	7ff00000 	.word	0x7ff00000
 801306c:	08016929 	.word	0x08016929
 8013070:	08016920 	.word	0x08016920
 8013074:	080168fd 	.word	0x080168fd
 8013078:	08016a38 	.word	0x08016a38
 801307c:	0801699f 	.word	0x0801699f
 8013080:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8013082:	9901      	ldr	r1, [sp, #4]
 8013084:	6011      	str	r1, [r2, #0]
 8013086:	f1b9 0f0e 	cmp.w	r9, #14
 801308a:	d86c      	bhi.n	8013166 <_dtoa_r+0x3de>
 801308c:	2c00      	cmp	r4, #0
 801308e:	d06a      	beq.n	8013166 <_dtoa_r+0x3de>
 8013090:	f1bb 0f00 	cmp.w	fp, #0
 8013094:	f340 80a0 	ble.w	80131d8 <_dtoa_r+0x450>
 8013098:	49c1      	ldr	r1, [pc, #772]	; (80133a0 <_dtoa_r+0x618>)
 801309a:	f00b 020f 	and.w	r2, fp, #15
 801309e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 80130a2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80130a6:	ed92 7b00 	vldr	d7, [r2]
 80130aa:	ea4f 112b 	mov.w	r1, fp, asr #4
 80130ae:	f000 8087 	beq.w	80131c0 <_dtoa_r+0x438>
 80130b2:	4abc      	ldr	r2, [pc, #752]	; (80133a4 <_dtoa_r+0x61c>)
 80130b4:	ed92 6b08 	vldr	d6, [r2, #32]
 80130b8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80130bc:	ed8d 6b02 	vstr	d6, [sp, #8]
 80130c0:	f001 010f 	and.w	r1, r1, #15
 80130c4:	2203      	movs	r2, #3
 80130c6:	48b7      	ldr	r0, [pc, #732]	; (80133a4 <_dtoa_r+0x61c>)
 80130c8:	2900      	cmp	r1, #0
 80130ca:	d17b      	bne.n	80131c4 <_dtoa_r+0x43c>
 80130cc:	ed9d 6b02 	vldr	d6, [sp, #8]
 80130d0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80130d4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80130d8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80130da:	2900      	cmp	r1, #0
 80130dc:	f000 80a2 	beq.w	8013224 <_dtoa_r+0x49c>
 80130e0:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80130e4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80130e8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80130ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80130f0:	f140 8098 	bpl.w	8013224 <_dtoa_r+0x49c>
 80130f4:	f1b9 0f00 	cmp.w	r9, #0
 80130f8:	f000 8094 	beq.w	8013224 <_dtoa_r+0x49c>
 80130fc:	f1ba 0f00 	cmp.w	sl, #0
 8013100:	dd2f      	ble.n	8013162 <_dtoa_r+0x3da>
 8013102:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8013106:	ee27 7b06 	vmul.f64	d7, d7, d6
 801310a:	ed8d 7b02 	vstr	d7, [sp, #8]
 801310e:	f10b 37ff 	add.w	r7, fp, #4294967295
 8013112:	3201      	adds	r2, #1
 8013114:	4650      	mov	r0, sl
 8013116:	ed9d 6b02 	vldr	d6, [sp, #8]
 801311a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 801311e:	ee07 2a90 	vmov	s15, r2
 8013122:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8013126:	eea7 5b06 	vfma.f64	d5, d7, d6
 801312a:	ee15 4a90 	vmov	r4, s11
 801312e:	ec52 1b15 	vmov	r1, r2, d5
 8013132:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8013136:	2800      	cmp	r0, #0
 8013138:	d177      	bne.n	801322a <_dtoa_r+0x4a2>
 801313a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801313e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8013142:	ec42 1b17 	vmov	d7, r1, r2
 8013146:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801314a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801314e:	f300 8263 	bgt.w	8013618 <_dtoa_r+0x890>
 8013152:	eeb1 7b47 	vneg.f64	d7, d7
 8013156:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801315a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801315e:	f100 8258 	bmi.w	8013612 <_dtoa_r+0x88a>
 8013162:	ed8d 8b02 	vstr	d8, [sp, #8]
 8013166:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013168:	2a00      	cmp	r2, #0
 801316a:	f2c0 811d 	blt.w	80133a8 <_dtoa_r+0x620>
 801316e:	f1bb 0f0e 	cmp.w	fp, #14
 8013172:	f300 8119 	bgt.w	80133a8 <_dtoa_r+0x620>
 8013176:	4b8a      	ldr	r3, [pc, #552]	; (80133a0 <_dtoa_r+0x618>)
 8013178:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801317c:	ed93 6b00 	vldr	d6, [r3]
 8013180:	9b08      	ldr	r3, [sp, #32]
 8013182:	2b00      	cmp	r3, #0
 8013184:	f280 80b7 	bge.w	80132f6 <_dtoa_r+0x56e>
 8013188:	f1b9 0f00 	cmp.w	r9, #0
 801318c:	f300 80b3 	bgt.w	80132f6 <_dtoa_r+0x56e>
 8013190:	f040 823f 	bne.w	8013612 <_dtoa_r+0x88a>
 8013194:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8013198:	ee26 6b07 	vmul.f64	d6, d6, d7
 801319c:	ed9d 7b02 	vldr	d7, [sp, #8]
 80131a0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80131a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80131a8:	464c      	mov	r4, r9
 80131aa:	464f      	mov	r7, r9
 80131ac:	f280 8215 	bge.w	80135da <_dtoa_r+0x852>
 80131b0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80131b4:	2331      	movs	r3, #49	; 0x31
 80131b6:	f808 3b01 	strb.w	r3, [r8], #1
 80131ba:	f10b 0b01 	add.w	fp, fp, #1
 80131be:	e211      	b.n	80135e4 <_dtoa_r+0x85c>
 80131c0:	2202      	movs	r2, #2
 80131c2:	e780      	b.n	80130c6 <_dtoa_r+0x33e>
 80131c4:	07cc      	lsls	r4, r1, #31
 80131c6:	d504      	bpl.n	80131d2 <_dtoa_r+0x44a>
 80131c8:	ed90 6b00 	vldr	d6, [r0]
 80131cc:	3201      	adds	r2, #1
 80131ce:	ee27 7b06 	vmul.f64	d7, d7, d6
 80131d2:	1049      	asrs	r1, r1, #1
 80131d4:	3008      	adds	r0, #8
 80131d6:	e777      	b.n	80130c8 <_dtoa_r+0x340>
 80131d8:	d022      	beq.n	8013220 <_dtoa_r+0x498>
 80131da:	f1cb 0100 	rsb	r1, fp, #0
 80131de:	4a70      	ldr	r2, [pc, #448]	; (80133a0 <_dtoa_r+0x618>)
 80131e0:	f001 000f 	and.w	r0, r1, #15
 80131e4:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80131e8:	ed92 7b00 	vldr	d7, [r2]
 80131ec:	ee28 7b07 	vmul.f64	d7, d8, d7
 80131f0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80131f4:	486b      	ldr	r0, [pc, #428]	; (80133a4 <_dtoa_r+0x61c>)
 80131f6:	1109      	asrs	r1, r1, #4
 80131f8:	2400      	movs	r4, #0
 80131fa:	2202      	movs	r2, #2
 80131fc:	b929      	cbnz	r1, 801320a <_dtoa_r+0x482>
 80131fe:	2c00      	cmp	r4, #0
 8013200:	f43f af6a 	beq.w	80130d8 <_dtoa_r+0x350>
 8013204:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013208:	e766      	b.n	80130d8 <_dtoa_r+0x350>
 801320a:	07cf      	lsls	r7, r1, #31
 801320c:	d505      	bpl.n	801321a <_dtoa_r+0x492>
 801320e:	ed90 6b00 	vldr	d6, [r0]
 8013212:	3201      	adds	r2, #1
 8013214:	2401      	movs	r4, #1
 8013216:	ee27 7b06 	vmul.f64	d7, d7, d6
 801321a:	1049      	asrs	r1, r1, #1
 801321c:	3008      	adds	r0, #8
 801321e:	e7ed      	b.n	80131fc <_dtoa_r+0x474>
 8013220:	2202      	movs	r2, #2
 8013222:	e759      	b.n	80130d8 <_dtoa_r+0x350>
 8013224:	465f      	mov	r7, fp
 8013226:	4648      	mov	r0, r9
 8013228:	e775      	b.n	8013116 <_dtoa_r+0x38e>
 801322a:	ec42 1b17 	vmov	d7, r1, r2
 801322e:	4a5c      	ldr	r2, [pc, #368]	; (80133a0 <_dtoa_r+0x618>)
 8013230:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8013234:	ed12 4b02 	vldr	d4, [r2, #-8]
 8013238:	9a01      	ldr	r2, [sp, #4]
 801323a:	1814      	adds	r4, r2, r0
 801323c:	9a07      	ldr	r2, [sp, #28]
 801323e:	b352      	cbz	r2, 8013296 <_dtoa_r+0x50e>
 8013240:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8013244:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8013248:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801324c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8013250:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8013254:	ee35 7b47 	vsub.f64	d7, d5, d7
 8013258:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801325c:	ee14 2a90 	vmov	r2, s9
 8013260:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8013264:	3230      	adds	r2, #48	; 0x30
 8013266:	ee36 6b45 	vsub.f64	d6, d6, d5
 801326a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801326e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013272:	f808 2b01 	strb.w	r2, [r8], #1
 8013276:	d439      	bmi.n	80132ec <_dtoa_r+0x564>
 8013278:	ee32 5b46 	vsub.f64	d5, d2, d6
 801327c:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8013280:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013284:	d472      	bmi.n	801336c <_dtoa_r+0x5e4>
 8013286:	45a0      	cmp	r8, r4
 8013288:	f43f af6b 	beq.w	8013162 <_dtoa_r+0x3da>
 801328c:	ee27 7b03 	vmul.f64	d7, d7, d3
 8013290:	ee26 6b03 	vmul.f64	d6, d6, d3
 8013294:	e7e0      	b.n	8013258 <_dtoa_r+0x4d0>
 8013296:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801329a:	ee27 7b04 	vmul.f64	d7, d7, d4
 801329e:	4621      	mov	r1, r4
 80132a0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80132a4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80132a8:	ee14 2a90 	vmov	r2, s9
 80132ac:	3230      	adds	r2, #48	; 0x30
 80132ae:	f808 2b01 	strb.w	r2, [r8], #1
 80132b2:	45a0      	cmp	r8, r4
 80132b4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80132b8:	ee36 6b45 	vsub.f64	d6, d6, d5
 80132bc:	d118      	bne.n	80132f0 <_dtoa_r+0x568>
 80132be:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80132c2:	ee37 4b05 	vadd.f64	d4, d7, d5
 80132c6:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80132ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132ce:	dc4d      	bgt.n	801336c <_dtoa_r+0x5e4>
 80132d0:	ee35 7b47 	vsub.f64	d7, d5, d7
 80132d4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80132d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132dc:	f57f af41 	bpl.w	8013162 <_dtoa_r+0x3da>
 80132e0:	4688      	mov	r8, r1
 80132e2:	3901      	subs	r1, #1
 80132e4:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 80132e8:	2b30      	cmp	r3, #48	; 0x30
 80132ea:	d0f9      	beq.n	80132e0 <_dtoa_r+0x558>
 80132ec:	46bb      	mov	fp, r7
 80132ee:	e02a      	b.n	8013346 <_dtoa_r+0x5be>
 80132f0:	ee26 6b03 	vmul.f64	d6, d6, d3
 80132f4:	e7d6      	b.n	80132a4 <_dtoa_r+0x51c>
 80132f6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80132fa:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 80132fe:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8013302:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8013306:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801330a:	ee15 3a10 	vmov	r3, s10
 801330e:	3330      	adds	r3, #48	; 0x30
 8013310:	f808 3b01 	strb.w	r3, [r8], #1
 8013314:	9b01      	ldr	r3, [sp, #4]
 8013316:	eba8 0303 	sub.w	r3, r8, r3
 801331a:	4599      	cmp	r9, r3
 801331c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8013320:	eea3 7b46 	vfms.f64	d7, d3, d6
 8013324:	d133      	bne.n	801338e <_dtoa_r+0x606>
 8013326:	ee37 7b07 	vadd.f64	d7, d7, d7
 801332a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801332e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013332:	dc1a      	bgt.n	801336a <_dtoa_r+0x5e2>
 8013334:	eeb4 7b46 	vcmp.f64	d7, d6
 8013338:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801333c:	d103      	bne.n	8013346 <_dtoa_r+0x5be>
 801333e:	ee15 3a10 	vmov	r3, s10
 8013342:	07d9      	lsls	r1, r3, #31
 8013344:	d411      	bmi.n	801336a <_dtoa_r+0x5e2>
 8013346:	4629      	mov	r1, r5
 8013348:	4630      	mov	r0, r6
 801334a:	f000 fadb 	bl	8013904 <_Bfree>
 801334e:	2300      	movs	r3, #0
 8013350:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013352:	f888 3000 	strb.w	r3, [r8]
 8013356:	f10b 0301 	add.w	r3, fp, #1
 801335a:	6013      	str	r3, [r2, #0]
 801335c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801335e:	2b00      	cmp	r3, #0
 8013360:	f43f ad61 	beq.w	8012e26 <_dtoa_r+0x9e>
 8013364:	f8c3 8000 	str.w	r8, [r3]
 8013368:	e55d      	b.n	8012e26 <_dtoa_r+0x9e>
 801336a:	465f      	mov	r7, fp
 801336c:	4643      	mov	r3, r8
 801336e:	4698      	mov	r8, r3
 8013370:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013374:	2a39      	cmp	r2, #57	; 0x39
 8013376:	d106      	bne.n	8013386 <_dtoa_r+0x5fe>
 8013378:	9a01      	ldr	r2, [sp, #4]
 801337a:	429a      	cmp	r2, r3
 801337c:	d1f7      	bne.n	801336e <_dtoa_r+0x5e6>
 801337e:	9901      	ldr	r1, [sp, #4]
 8013380:	2230      	movs	r2, #48	; 0x30
 8013382:	3701      	adds	r7, #1
 8013384:	700a      	strb	r2, [r1, #0]
 8013386:	781a      	ldrb	r2, [r3, #0]
 8013388:	3201      	adds	r2, #1
 801338a:	701a      	strb	r2, [r3, #0]
 801338c:	e7ae      	b.n	80132ec <_dtoa_r+0x564>
 801338e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8013392:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8013396:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801339a:	d1b2      	bne.n	8013302 <_dtoa_r+0x57a>
 801339c:	e7d3      	b.n	8013346 <_dtoa_r+0x5be>
 801339e:	bf00      	nop
 80133a0:	08016a38 	.word	0x08016a38
 80133a4:	08016a10 	.word	0x08016a10
 80133a8:	9907      	ldr	r1, [sp, #28]
 80133aa:	2900      	cmp	r1, #0
 80133ac:	f000 80d0 	beq.w	8013550 <_dtoa_r+0x7c8>
 80133b0:	9906      	ldr	r1, [sp, #24]
 80133b2:	2901      	cmp	r1, #1
 80133b4:	f300 80b4 	bgt.w	8013520 <_dtoa_r+0x798>
 80133b8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80133ba:	2900      	cmp	r1, #0
 80133bc:	f000 80ac 	beq.w	8013518 <_dtoa_r+0x790>
 80133c0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80133c4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80133c8:	461c      	mov	r4, r3
 80133ca:	930a      	str	r3, [sp, #40]	; 0x28
 80133cc:	9b04      	ldr	r3, [sp, #16]
 80133ce:	4413      	add	r3, r2
 80133d0:	9304      	str	r3, [sp, #16]
 80133d2:	9b05      	ldr	r3, [sp, #20]
 80133d4:	2101      	movs	r1, #1
 80133d6:	4413      	add	r3, r2
 80133d8:	4630      	mov	r0, r6
 80133da:	9305      	str	r3, [sp, #20]
 80133dc:	f000 fb4a 	bl	8013a74 <__i2b>
 80133e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80133e2:	4607      	mov	r7, r0
 80133e4:	f1b8 0f00 	cmp.w	r8, #0
 80133e8:	dd0d      	ble.n	8013406 <_dtoa_r+0x67e>
 80133ea:	9a05      	ldr	r2, [sp, #20]
 80133ec:	2a00      	cmp	r2, #0
 80133ee:	dd0a      	ble.n	8013406 <_dtoa_r+0x67e>
 80133f0:	4542      	cmp	r2, r8
 80133f2:	9904      	ldr	r1, [sp, #16]
 80133f4:	bfa8      	it	ge
 80133f6:	4642      	movge	r2, r8
 80133f8:	1a89      	subs	r1, r1, r2
 80133fa:	9104      	str	r1, [sp, #16]
 80133fc:	9905      	ldr	r1, [sp, #20]
 80133fe:	eba8 0802 	sub.w	r8, r8, r2
 8013402:	1a8a      	subs	r2, r1, r2
 8013404:	9205      	str	r2, [sp, #20]
 8013406:	b303      	cbz	r3, 801344a <_dtoa_r+0x6c2>
 8013408:	9a07      	ldr	r2, [sp, #28]
 801340a:	2a00      	cmp	r2, #0
 801340c:	f000 80a5 	beq.w	801355a <_dtoa_r+0x7d2>
 8013410:	2c00      	cmp	r4, #0
 8013412:	dd13      	ble.n	801343c <_dtoa_r+0x6b4>
 8013414:	4639      	mov	r1, r7
 8013416:	4622      	mov	r2, r4
 8013418:	4630      	mov	r0, r6
 801341a:	930d      	str	r3, [sp, #52]	; 0x34
 801341c:	f000 fbea 	bl	8013bf4 <__pow5mult>
 8013420:	462a      	mov	r2, r5
 8013422:	4601      	mov	r1, r0
 8013424:	4607      	mov	r7, r0
 8013426:	4630      	mov	r0, r6
 8013428:	f000 fb3a 	bl	8013aa0 <__multiply>
 801342c:	4629      	mov	r1, r5
 801342e:	900a      	str	r0, [sp, #40]	; 0x28
 8013430:	4630      	mov	r0, r6
 8013432:	f000 fa67 	bl	8013904 <_Bfree>
 8013436:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013438:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801343a:	4615      	mov	r5, r2
 801343c:	1b1a      	subs	r2, r3, r4
 801343e:	d004      	beq.n	801344a <_dtoa_r+0x6c2>
 8013440:	4629      	mov	r1, r5
 8013442:	4630      	mov	r0, r6
 8013444:	f000 fbd6 	bl	8013bf4 <__pow5mult>
 8013448:	4605      	mov	r5, r0
 801344a:	2101      	movs	r1, #1
 801344c:	4630      	mov	r0, r6
 801344e:	f000 fb11 	bl	8013a74 <__i2b>
 8013452:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013454:	2b00      	cmp	r3, #0
 8013456:	4604      	mov	r4, r0
 8013458:	f340 8081 	ble.w	801355e <_dtoa_r+0x7d6>
 801345c:	461a      	mov	r2, r3
 801345e:	4601      	mov	r1, r0
 8013460:	4630      	mov	r0, r6
 8013462:	f000 fbc7 	bl	8013bf4 <__pow5mult>
 8013466:	9b06      	ldr	r3, [sp, #24]
 8013468:	2b01      	cmp	r3, #1
 801346a:	4604      	mov	r4, r0
 801346c:	dd7a      	ble.n	8013564 <_dtoa_r+0x7dc>
 801346e:	2300      	movs	r3, #0
 8013470:	930a      	str	r3, [sp, #40]	; 0x28
 8013472:	6922      	ldr	r2, [r4, #16]
 8013474:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8013478:	6910      	ldr	r0, [r2, #16]
 801347a:	f000 faab 	bl	80139d4 <__hi0bits>
 801347e:	f1c0 0020 	rsb	r0, r0, #32
 8013482:	9b05      	ldr	r3, [sp, #20]
 8013484:	4418      	add	r0, r3
 8013486:	f010 001f 	ands.w	r0, r0, #31
 801348a:	f000 808c 	beq.w	80135a6 <_dtoa_r+0x81e>
 801348e:	f1c0 0220 	rsb	r2, r0, #32
 8013492:	2a04      	cmp	r2, #4
 8013494:	f340 8085 	ble.w	80135a2 <_dtoa_r+0x81a>
 8013498:	f1c0 001c 	rsb	r0, r0, #28
 801349c:	9b04      	ldr	r3, [sp, #16]
 801349e:	4403      	add	r3, r0
 80134a0:	9304      	str	r3, [sp, #16]
 80134a2:	9b05      	ldr	r3, [sp, #20]
 80134a4:	4403      	add	r3, r0
 80134a6:	4480      	add	r8, r0
 80134a8:	9305      	str	r3, [sp, #20]
 80134aa:	9b04      	ldr	r3, [sp, #16]
 80134ac:	2b00      	cmp	r3, #0
 80134ae:	dd05      	ble.n	80134bc <_dtoa_r+0x734>
 80134b0:	4629      	mov	r1, r5
 80134b2:	461a      	mov	r2, r3
 80134b4:	4630      	mov	r0, r6
 80134b6:	f000 fbf7 	bl	8013ca8 <__lshift>
 80134ba:	4605      	mov	r5, r0
 80134bc:	9b05      	ldr	r3, [sp, #20]
 80134be:	2b00      	cmp	r3, #0
 80134c0:	dd05      	ble.n	80134ce <_dtoa_r+0x746>
 80134c2:	4621      	mov	r1, r4
 80134c4:	461a      	mov	r2, r3
 80134c6:	4630      	mov	r0, r6
 80134c8:	f000 fbee 	bl	8013ca8 <__lshift>
 80134cc:	4604      	mov	r4, r0
 80134ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80134d0:	2b00      	cmp	r3, #0
 80134d2:	d06a      	beq.n	80135aa <_dtoa_r+0x822>
 80134d4:	4621      	mov	r1, r4
 80134d6:	4628      	mov	r0, r5
 80134d8:	f000 fc56 	bl	8013d88 <__mcmp>
 80134dc:	2800      	cmp	r0, #0
 80134de:	da64      	bge.n	80135aa <_dtoa_r+0x822>
 80134e0:	2300      	movs	r3, #0
 80134e2:	4629      	mov	r1, r5
 80134e4:	220a      	movs	r2, #10
 80134e6:	4630      	mov	r0, r6
 80134e8:	f000 fa2e 	bl	8013948 <__multadd>
 80134ec:	9b07      	ldr	r3, [sp, #28]
 80134ee:	f10b 3bff 	add.w	fp, fp, #4294967295
 80134f2:	4605      	mov	r5, r0
 80134f4:	2b00      	cmp	r3, #0
 80134f6:	f000 8191 	beq.w	801381c <_dtoa_r+0xa94>
 80134fa:	4639      	mov	r1, r7
 80134fc:	2300      	movs	r3, #0
 80134fe:	220a      	movs	r2, #10
 8013500:	4630      	mov	r0, r6
 8013502:	f000 fa21 	bl	8013948 <__multadd>
 8013506:	f1ba 0f00 	cmp.w	sl, #0
 801350a:	4607      	mov	r7, r0
 801350c:	f300 808d 	bgt.w	801362a <_dtoa_r+0x8a2>
 8013510:	9b06      	ldr	r3, [sp, #24]
 8013512:	2b02      	cmp	r3, #2
 8013514:	dc50      	bgt.n	80135b8 <_dtoa_r+0x830>
 8013516:	e088      	b.n	801362a <_dtoa_r+0x8a2>
 8013518:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801351a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801351e:	e751      	b.n	80133c4 <_dtoa_r+0x63c>
 8013520:	f109 34ff 	add.w	r4, r9, #4294967295
 8013524:	42a3      	cmp	r3, r4
 8013526:	bfbf      	itttt	lt
 8013528:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 801352a:	1ae3      	sublt	r3, r4, r3
 801352c:	18d2      	addlt	r2, r2, r3
 801352e:	9209      	strlt	r2, [sp, #36]	; 0x24
 8013530:	bfb6      	itet	lt
 8013532:	4623      	movlt	r3, r4
 8013534:	1b1c      	subge	r4, r3, r4
 8013536:	2400      	movlt	r4, #0
 8013538:	f1b9 0f00 	cmp.w	r9, #0
 801353c:	bfb5      	itete	lt
 801353e:	9a04      	ldrlt	r2, [sp, #16]
 8013540:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8013544:	eba2 0809 	sublt.w	r8, r2, r9
 8013548:	464a      	movge	r2, r9
 801354a:	bfb8      	it	lt
 801354c:	2200      	movlt	r2, #0
 801354e:	e73c      	b.n	80133ca <_dtoa_r+0x642>
 8013550:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8013554:	9f07      	ldr	r7, [sp, #28]
 8013556:	461c      	mov	r4, r3
 8013558:	e744      	b.n	80133e4 <_dtoa_r+0x65c>
 801355a:	461a      	mov	r2, r3
 801355c:	e770      	b.n	8013440 <_dtoa_r+0x6b8>
 801355e:	9b06      	ldr	r3, [sp, #24]
 8013560:	2b01      	cmp	r3, #1
 8013562:	dc18      	bgt.n	8013596 <_dtoa_r+0x80e>
 8013564:	9b02      	ldr	r3, [sp, #8]
 8013566:	b9b3      	cbnz	r3, 8013596 <_dtoa_r+0x80e>
 8013568:	9b03      	ldr	r3, [sp, #12]
 801356a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801356e:	b9a2      	cbnz	r2, 801359a <_dtoa_r+0x812>
 8013570:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8013574:	0d12      	lsrs	r2, r2, #20
 8013576:	0512      	lsls	r2, r2, #20
 8013578:	b18a      	cbz	r2, 801359e <_dtoa_r+0x816>
 801357a:	9b04      	ldr	r3, [sp, #16]
 801357c:	3301      	adds	r3, #1
 801357e:	9304      	str	r3, [sp, #16]
 8013580:	9b05      	ldr	r3, [sp, #20]
 8013582:	3301      	adds	r3, #1
 8013584:	9305      	str	r3, [sp, #20]
 8013586:	2301      	movs	r3, #1
 8013588:	930a      	str	r3, [sp, #40]	; 0x28
 801358a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801358c:	2b00      	cmp	r3, #0
 801358e:	f47f af70 	bne.w	8013472 <_dtoa_r+0x6ea>
 8013592:	2001      	movs	r0, #1
 8013594:	e775      	b.n	8013482 <_dtoa_r+0x6fa>
 8013596:	2300      	movs	r3, #0
 8013598:	e7f6      	b.n	8013588 <_dtoa_r+0x800>
 801359a:	9b02      	ldr	r3, [sp, #8]
 801359c:	e7f4      	b.n	8013588 <_dtoa_r+0x800>
 801359e:	920a      	str	r2, [sp, #40]	; 0x28
 80135a0:	e7f3      	b.n	801358a <_dtoa_r+0x802>
 80135a2:	d082      	beq.n	80134aa <_dtoa_r+0x722>
 80135a4:	4610      	mov	r0, r2
 80135a6:	301c      	adds	r0, #28
 80135a8:	e778      	b.n	801349c <_dtoa_r+0x714>
 80135aa:	f1b9 0f00 	cmp.w	r9, #0
 80135ae:	dc37      	bgt.n	8013620 <_dtoa_r+0x898>
 80135b0:	9b06      	ldr	r3, [sp, #24]
 80135b2:	2b02      	cmp	r3, #2
 80135b4:	dd34      	ble.n	8013620 <_dtoa_r+0x898>
 80135b6:	46ca      	mov	sl, r9
 80135b8:	f1ba 0f00 	cmp.w	sl, #0
 80135bc:	d10d      	bne.n	80135da <_dtoa_r+0x852>
 80135be:	4621      	mov	r1, r4
 80135c0:	4653      	mov	r3, sl
 80135c2:	2205      	movs	r2, #5
 80135c4:	4630      	mov	r0, r6
 80135c6:	f000 f9bf 	bl	8013948 <__multadd>
 80135ca:	4601      	mov	r1, r0
 80135cc:	4604      	mov	r4, r0
 80135ce:	4628      	mov	r0, r5
 80135d0:	f000 fbda 	bl	8013d88 <__mcmp>
 80135d4:	2800      	cmp	r0, #0
 80135d6:	f73f adeb 	bgt.w	80131b0 <_dtoa_r+0x428>
 80135da:	9b08      	ldr	r3, [sp, #32]
 80135dc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80135e0:	ea6f 0b03 	mvn.w	fp, r3
 80135e4:	f04f 0900 	mov.w	r9, #0
 80135e8:	4621      	mov	r1, r4
 80135ea:	4630      	mov	r0, r6
 80135ec:	f000 f98a 	bl	8013904 <_Bfree>
 80135f0:	2f00      	cmp	r7, #0
 80135f2:	f43f aea8 	beq.w	8013346 <_dtoa_r+0x5be>
 80135f6:	f1b9 0f00 	cmp.w	r9, #0
 80135fa:	d005      	beq.n	8013608 <_dtoa_r+0x880>
 80135fc:	45b9      	cmp	r9, r7
 80135fe:	d003      	beq.n	8013608 <_dtoa_r+0x880>
 8013600:	4649      	mov	r1, r9
 8013602:	4630      	mov	r0, r6
 8013604:	f000 f97e 	bl	8013904 <_Bfree>
 8013608:	4639      	mov	r1, r7
 801360a:	4630      	mov	r0, r6
 801360c:	f000 f97a 	bl	8013904 <_Bfree>
 8013610:	e699      	b.n	8013346 <_dtoa_r+0x5be>
 8013612:	2400      	movs	r4, #0
 8013614:	4627      	mov	r7, r4
 8013616:	e7e0      	b.n	80135da <_dtoa_r+0x852>
 8013618:	46bb      	mov	fp, r7
 801361a:	4604      	mov	r4, r0
 801361c:	4607      	mov	r7, r0
 801361e:	e5c7      	b.n	80131b0 <_dtoa_r+0x428>
 8013620:	9b07      	ldr	r3, [sp, #28]
 8013622:	46ca      	mov	sl, r9
 8013624:	2b00      	cmp	r3, #0
 8013626:	f000 8100 	beq.w	801382a <_dtoa_r+0xaa2>
 801362a:	f1b8 0f00 	cmp.w	r8, #0
 801362e:	dd05      	ble.n	801363c <_dtoa_r+0x8b4>
 8013630:	4639      	mov	r1, r7
 8013632:	4642      	mov	r2, r8
 8013634:	4630      	mov	r0, r6
 8013636:	f000 fb37 	bl	8013ca8 <__lshift>
 801363a:	4607      	mov	r7, r0
 801363c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801363e:	2b00      	cmp	r3, #0
 8013640:	d05d      	beq.n	80136fe <_dtoa_r+0x976>
 8013642:	6879      	ldr	r1, [r7, #4]
 8013644:	4630      	mov	r0, r6
 8013646:	f000 f91d 	bl	8013884 <_Balloc>
 801364a:	4680      	mov	r8, r0
 801364c:	b928      	cbnz	r0, 801365a <_dtoa_r+0x8d2>
 801364e:	4b82      	ldr	r3, [pc, #520]	; (8013858 <_dtoa_r+0xad0>)
 8013650:	4602      	mov	r2, r0
 8013652:	f240 21ea 	movw	r1, #746	; 0x2ea
 8013656:	f7ff bbaf 	b.w	8012db8 <_dtoa_r+0x30>
 801365a:	693a      	ldr	r2, [r7, #16]
 801365c:	3202      	adds	r2, #2
 801365e:	0092      	lsls	r2, r2, #2
 8013660:	f107 010c 	add.w	r1, r7, #12
 8013664:	300c      	adds	r0, #12
 8013666:	f7fe fda3 	bl	80121b0 <memcpy>
 801366a:	2201      	movs	r2, #1
 801366c:	4641      	mov	r1, r8
 801366e:	4630      	mov	r0, r6
 8013670:	f000 fb1a 	bl	8013ca8 <__lshift>
 8013674:	9b01      	ldr	r3, [sp, #4]
 8013676:	3301      	adds	r3, #1
 8013678:	9304      	str	r3, [sp, #16]
 801367a:	9b01      	ldr	r3, [sp, #4]
 801367c:	4453      	add	r3, sl
 801367e:	9308      	str	r3, [sp, #32]
 8013680:	9b02      	ldr	r3, [sp, #8]
 8013682:	f003 0301 	and.w	r3, r3, #1
 8013686:	46b9      	mov	r9, r7
 8013688:	9307      	str	r3, [sp, #28]
 801368a:	4607      	mov	r7, r0
 801368c:	9b04      	ldr	r3, [sp, #16]
 801368e:	4621      	mov	r1, r4
 8013690:	3b01      	subs	r3, #1
 8013692:	4628      	mov	r0, r5
 8013694:	9302      	str	r3, [sp, #8]
 8013696:	f7ff fae9 	bl	8012c6c <quorem>
 801369a:	4603      	mov	r3, r0
 801369c:	3330      	adds	r3, #48	; 0x30
 801369e:	9005      	str	r0, [sp, #20]
 80136a0:	4649      	mov	r1, r9
 80136a2:	4628      	mov	r0, r5
 80136a4:	9309      	str	r3, [sp, #36]	; 0x24
 80136a6:	f000 fb6f 	bl	8013d88 <__mcmp>
 80136aa:	463a      	mov	r2, r7
 80136ac:	4682      	mov	sl, r0
 80136ae:	4621      	mov	r1, r4
 80136b0:	4630      	mov	r0, r6
 80136b2:	f000 fb85 	bl	8013dc0 <__mdiff>
 80136b6:	68c2      	ldr	r2, [r0, #12]
 80136b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80136ba:	4680      	mov	r8, r0
 80136bc:	bb0a      	cbnz	r2, 8013702 <_dtoa_r+0x97a>
 80136be:	4601      	mov	r1, r0
 80136c0:	4628      	mov	r0, r5
 80136c2:	f000 fb61 	bl	8013d88 <__mcmp>
 80136c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80136c8:	4602      	mov	r2, r0
 80136ca:	4641      	mov	r1, r8
 80136cc:	4630      	mov	r0, r6
 80136ce:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 80136d2:	f000 f917 	bl	8013904 <_Bfree>
 80136d6:	9b06      	ldr	r3, [sp, #24]
 80136d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80136da:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80136de:	ea43 0102 	orr.w	r1, r3, r2
 80136e2:	9b07      	ldr	r3, [sp, #28]
 80136e4:	430b      	orrs	r3, r1
 80136e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80136e8:	d10d      	bne.n	8013706 <_dtoa_r+0x97e>
 80136ea:	2b39      	cmp	r3, #57	; 0x39
 80136ec:	d029      	beq.n	8013742 <_dtoa_r+0x9ba>
 80136ee:	f1ba 0f00 	cmp.w	sl, #0
 80136f2:	dd01      	ble.n	80136f8 <_dtoa_r+0x970>
 80136f4:	9b05      	ldr	r3, [sp, #20]
 80136f6:	3331      	adds	r3, #49	; 0x31
 80136f8:	9a02      	ldr	r2, [sp, #8]
 80136fa:	7013      	strb	r3, [r2, #0]
 80136fc:	e774      	b.n	80135e8 <_dtoa_r+0x860>
 80136fe:	4638      	mov	r0, r7
 8013700:	e7b8      	b.n	8013674 <_dtoa_r+0x8ec>
 8013702:	2201      	movs	r2, #1
 8013704:	e7e1      	b.n	80136ca <_dtoa_r+0x942>
 8013706:	f1ba 0f00 	cmp.w	sl, #0
 801370a:	db06      	blt.n	801371a <_dtoa_r+0x992>
 801370c:	9906      	ldr	r1, [sp, #24]
 801370e:	ea41 0a0a 	orr.w	sl, r1, sl
 8013712:	9907      	ldr	r1, [sp, #28]
 8013714:	ea5a 0101 	orrs.w	r1, sl, r1
 8013718:	d120      	bne.n	801375c <_dtoa_r+0x9d4>
 801371a:	2a00      	cmp	r2, #0
 801371c:	ddec      	ble.n	80136f8 <_dtoa_r+0x970>
 801371e:	4629      	mov	r1, r5
 8013720:	2201      	movs	r2, #1
 8013722:	4630      	mov	r0, r6
 8013724:	9304      	str	r3, [sp, #16]
 8013726:	f000 fabf 	bl	8013ca8 <__lshift>
 801372a:	4621      	mov	r1, r4
 801372c:	4605      	mov	r5, r0
 801372e:	f000 fb2b 	bl	8013d88 <__mcmp>
 8013732:	2800      	cmp	r0, #0
 8013734:	9b04      	ldr	r3, [sp, #16]
 8013736:	dc02      	bgt.n	801373e <_dtoa_r+0x9b6>
 8013738:	d1de      	bne.n	80136f8 <_dtoa_r+0x970>
 801373a:	07da      	lsls	r2, r3, #31
 801373c:	d5dc      	bpl.n	80136f8 <_dtoa_r+0x970>
 801373e:	2b39      	cmp	r3, #57	; 0x39
 8013740:	d1d8      	bne.n	80136f4 <_dtoa_r+0x96c>
 8013742:	9a02      	ldr	r2, [sp, #8]
 8013744:	2339      	movs	r3, #57	; 0x39
 8013746:	7013      	strb	r3, [r2, #0]
 8013748:	4643      	mov	r3, r8
 801374a:	4698      	mov	r8, r3
 801374c:	3b01      	subs	r3, #1
 801374e:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8013752:	2a39      	cmp	r2, #57	; 0x39
 8013754:	d051      	beq.n	80137fa <_dtoa_r+0xa72>
 8013756:	3201      	adds	r2, #1
 8013758:	701a      	strb	r2, [r3, #0]
 801375a:	e745      	b.n	80135e8 <_dtoa_r+0x860>
 801375c:	2a00      	cmp	r2, #0
 801375e:	dd03      	ble.n	8013768 <_dtoa_r+0x9e0>
 8013760:	2b39      	cmp	r3, #57	; 0x39
 8013762:	d0ee      	beq.n	8013742 <_dtoa_r+0x9ba>
 8013764:	3301      	adds	r3, #1
 8013766:	e7c7      	b.n	80136f8 <_dtoa_r+0x970>
 8013768:	9a04      	ldr	r2, [sp, #16]
 801376a:	9908      	ldr	r1, [sp, #32]
 801376c:	f802 3c01 	strb.w	r3, [r2, #-1]
 8013770:	428a      	cmp	r2, r1
 8013772:	d02b      	beq.n	80137cc <_dtoa_r+0xa44>
 8013774:	4629      	mov	r1, r5
 8013776:	2300      	movs	r3, #0
 8013778:	220a      	movs	r2, #10
 801377a:	4630      	mov	r0, r6
 801377c:	f000 f8e4 	bl	8013948 <__multadd>
 8013780:	45b9      	cmp	r9, r7
 8013782:	4605      	mov	r5, r0
 8013784:	f04f 0300 	mov.w	r3, #0
 8013788:	f04f 020a 	mov.w	r2, #10
 801378c:	4649      	mov	r1, r9
 801378e:	4630      	mov	r0, r6
 8013790:	d107      	bne.n	80137a2 <_dtoa_r+0xa1a>
 8013792:	f000 f8d9 	bl	8013948 <__multadd>
 8013796:	4681      	mov	r9, r0
 8013798:	4607      	mov	r7, r0
 801379a:	9b04      	ldr	r3, [sp, #16]
 801379c:	3301      	adds	r3, #1
 801379e:	9304      	str	r3, [sp, #16]
 80137a0:	e774      	b.n	801368c <_dtoa_r+0x904>
 80137a2:	f000 f8d1 	bl	8013948 <__multadd>
 80137a6:	4639      	mov	r1, r7
 80137a8:	4681      	mov	r9, r0
 80137aa:	2300      	movs	r3, #0
 80137ac:	220a      	movs	r2, #10
 80137ae:	4630      	mov	r0, r6
 80137b0:	f000 f8ca 	bl	8013948 <__multadd>
 80137b4:	4607      	mov	r7, r0
 80137b6:	e7f0      	b.n	801379a <_dtoa_r+0xa12>
 80137b8:	f1ba 0f00 	cmp.w	sl, #0
 80137bc:	9a01      	ldr	r2, [sp, #4]
 80137be:	bfcc      	ite	gt
 80137c0:	46d0      	movgt	r8, sl
 80137c2:	f04f 0801 	movle.w	r8, #1
 80137c6:	4490      	add	r8, r2
 80137c8:	f04f 0900 	mov.w	r9, #0
 80137cc:	4629      	mov	r1, r5
 80137ce:	2201      	movs	r2, #1
 80137d0:	4630      	mov	r0, r6
 80137d2:	9302      	str	r3, [sp, #8]
 80137d4:	f000 fa68 	bl	8013ca8 <__lshift>
 80137d8:	4621      	mov	r1, r4
 80137da:	4605      	mov	r5, r0
 80137dc:	f000 fad4 	bl	8013d88 <__mcmp>
 80137e0:	2800      	cmp	r0, #0
 80137e2:	dcb1      	bgt.n	8013748 <_dtoa_r+0x9c0>
 80137e4:	d102      	bne.n	80137ec <_dtoa_r+0xa64>
 80137e6:	9b02      	ldr	r3, [sp, #8]
 80137e8:	07db      	lsls	r3, r3, #31
 80137ea:	d4ad      	bmi.n	8013748 <_dtoa_r+0x9c0>
 80137ec:	4643      	mov	r3, r8
 80137ee:	4698      	mov	r8, r3
 80137f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80137f4:	2a30      	cmp	r2, #48	; 0x30
 80137f6:	d0fa      	beq.n	80137ee <_dtoa_r+0xa66>
 80137f8:	e6f6      	b.n	80135e8 <_dtoa_r+0x860>
 80137fa:	9a01      	ldr	r2, [sp, #4]
 80137fc:	429a      	cmp	r2, r3
 80137fe:	d1a4      	bne.n	801374a <_dtoa_r+0x9c2>
 8013800:	f10b 0b01 	add.w	fp, fp, #1
 8013804:	2331      	movs	r3, #49	; 0x31
 8013806:	e778      	b.n	80136fa <_dtoa_r+0x972>
 8013808:	4b14      	ldr	r3, [pc, #80]	; (801385c <_dtoa_r+0xad4>)
 801380a:	f7ff bb27 	b.w	8012e5c <_dtoa_r+0xd4>
 801380e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013810:	2b00      	cmp	r3, #0
 8013812:	f47f ab03 	bne.w	8012e1c <_dtoa_r+0x94>
 8013816:	4b12      	ldr	r3, [pc, #72]	; (8013860 <_dtoa_r+0xad8>)
 8013818:	f7ff bb20 	b.w	8012e5c <_dtoa_r+0xd4>
 801381c:	f1ba 0f00 	cmp.w	sl, #0
 8013820:	dc03      	bgt.n	801382a <_dtoa_r+0xaa2>
 8013822:	9b06      	ldr	r3, [sp, #24]
 8013824:	2b02      	cmp	r3, #2
 8013826:	f73f aec7 	bgt.w	80135b8 <_dtoa_r+0x830>
 801382a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801382e:	4621      	mov	r1, r4
 8013830:	4628      	mov	r0, r5
 8013832:	f7ff fa1b 	bl	8012c6c <quorem>
 8013836:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801383a:	f808 3b01 	strb.w	r3, [r8], #1
 801383e:	9a01      	ldr	r2, [sp, #4]
 8013840:	eba8 0202 	sub.w	r2, r8, r2
 8013844:	4592      	cmp	sl, r2
 8013846:	ddb7      	ble.n	80137b8 <_dtoa_r+0xa30>
 8013848:	4629      	mov	r1, r5
 801384a:	2300      	movs	r3, #0
 801384c:	220a      	movs	r2, #10
 801384e:	4630      	mov	r0, r6
 8013850:	f000 f87a 	bl	8013948 <__multadd>
 8013854:	4605      	mov	r5, r0
 8013856:	e7ea      	b.n	801382e <_dtoa_r+0xaa6>
 8013858:	0801699f 	.word	0x0801699f
 801385c:	080168fc 	.word	0x080168fc
 8013860:	08016920 	.word	0x08016920

08013864 <_localeconv_r>:
 8013864:	4800      	ldr	r0, [pc, #0]	; (8013868 <_localeconv_r+0x4>)
 8013866:	4770      	bx	lr
 8013868:	24000850 	.word	0x24000850

0801386c <__malloc_lock>:
 801386c:	4801      	ldr	r0, [pc, #4]	; (8013874 <__malloc_lock+0x8>)
 801386e:	f000 bbd4 	b.w	801401a <__retarget_lock_acquire_recursive>
 8013872:	bf00      	nop
 8013874:	24001ea4 	.word	0x24001ea4

08013878 <__malloc_unlock>:
 8013878:	4801      	ldr	r0, [pc, #4]	; (8013880 <__malloc_unlock+0x8>)
 801387a:	f000 bbcf 	b.w	801401c <__retarget_lock_release_recursive>
 801387e:	bf00      	nop
 8013880:	24001ea4 	.word	0x24001ea4

08013884 <_Balloc>:
 8013884:	b570      	push	{r4, r5, r6, lr}
 8013886:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8013888:	4604      	mov	r4, r0
 801388a:	460d      	mov	r5, r1
 801388c:	b976      	cbnz	r6, 80138ac <_Balloc+0x28>
 801388e:	2010      	movs	r0, #16
 8013890:	f7f4 fcc2 	bl	8008218 <__wrap_malloc>
 8013894:	4602      	mov	r2, r0
 8013896:	6260      	str	r0, [r4, #36]	; 0x24
 8013898:	b920      	cbnz	r0, 80138a4 <_Balloc+0x20>
 801389a:	4b18      	ldr	r3, [pc, #96]	; (80138fc <_Balloc+0x78>)
 801389c:	4818      	ldr	r0, [pc, #96]	; (8013900 <_Balloc+0x7c>)
 801389e:	2166      	movs	r1, #102	; 0x66
 80138a0:	f000 fb8a 	bl	8013fb8 <__assert_func>
 80138a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80138a8:	6006      	str	r6, [r0, #0]
 80138aa:	60c6      	str	r6, [r0, #12]
 80138ac:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80138ae:	68f3      	ldr	r3, [r6, #12]
 80138b0:	b183      	cbz	r3, 80138d4 <_Balloc+0x50>
 80138b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80138b4:	68db      	ldr	r3, [r3, #12]
 80138b6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80138ba:	b9b8      	cbnz	r0, 80138ec <_Balloc+0x68>
 80138bc:	2101      	movs	r1, #1
 80138be:	fa01 f605 	lsl.w	r6, r1, r5
 80138c2:	1d72      	adds	r2, r6, #5
 80138c4:	0092      	lsls	r2, r2, #2
 80138c6:	4620      	mov	r0, r4
 80138c8:	f000 fb60 	bl	8013f8c <_calloc_r>
 80138cc:	b160      	cbz	r0, 80138e8 <_Balloc+0x64>
 80138ce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80138d2:	e00e      	b.n	80138f2 <_Balloc+0x6e>
 80138d4:	2221      	movs	r2, #33	; 0x21
 80138d6:	2104      	movs	r1, #4
 80138d8:	4620      	mov	r0, r4
 80138da:	f000 fb57 	bl	8013f8c <_calloc_r>
 80138de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80138e0:	60f0      	str	r0, [r6, #12]
 80138e2:	68db      	ldr	r3, [r3, #12]
 80138e4:	2b00      	cmp	r3, #0
 80138e6:	d1e4      	bne.n	80138b2 <_Balloc+0x2e>
 80138e8:	2000      	movs	r0, #0
 80138ea:	bd70      	pop	{r4, r5, r6, pc}
 80138ec:	6802      	ldr	r2, [r0, #0]
 80138ee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80138f2:	2300      	movs	r3, #0
 80138f4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80138f8:	e7f7      	b.n	80138ea <_Balloc+0x66>
 80138fa:	bf00      	nop
 80138fc:	0801692d 	.word	0x0801692d
 8013900:	080169b0 	.word	0x080169b0

08013904 <_Bfree>:
 8013904:	b570      	push	{r4, r5, r6, lr}
 8013906:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8013908:	4605      	mov	r5, r0
 801390a:	460c      	mov	r4, r1
 801390c:	b976      	cbnz	r6, 801392c <_Bfree+0x28>
 801390e:	2010      	movs	r0, #16
 8013910:	f7f4 fc82 	bl	8008218 <__wrap_malloc>
 8013914:	4602      	mov	r2, r0
 8013916:	6268      	str	r0, [r5, #36]	; 0x24
 8013918:	b920      	cbnz	r0, 8013924 <_Bfree+0x20>
 801391a:	4b09      	ldr	r3, [pc, #36]	; (8013940 <_Bfree+0x3c>)
 801391c:	4809      	ldr	r0, [pc, #36]	; (8013944 <_Bfree+0x40>)
 801391e:	218a      	movs	r1, #138	; 0x8a
 8013920:	f000 fb4a 	bl	8013fb8 <__assert_func>
 8013924:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013928:	6006      	str	r6, [r0, #0]
 801392a:	60c6      	str	r6, [r0, #12]
 801392c:	b13c      	cbz	r4, 801393e <_Bfree+0x3a>
 801392e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8013930:	6862      	ldr	r2, [r4, #4]
 8013932:	68db      	ldr	r3, [r3, #12]
 8013934:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013938:	6021      	str	r1, [r4, #0]
 801393a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801393e:	bd70      	pop	{r4, r5, r6, pc}
 8013940:	0801692d 	.word	0x0801692d
 8013944:	080169b0 	.word	0x080169b0

08013948 <__multadd>:
 8013948:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801394c:	690d      	ldr	r5, [r1, #16]
 801394e:	4607      	mov	r7, r0
 8013950:	460c      	mov	r4, r1
 8013952:	461e      	mov	r6, r3
 8013954:	f101 0c14 	add.w	ip, r1, #20
 8013958:	2000      	movs	r0, #0
 801395a:	f8dc 3000 	ldr.w	r3, [ip]
 801395e:	b299      	uxth	r1, r3
 8013960:	fb02 6101 	mla	r1, r2, r1, r6
 8013964:	0c1e      	lsrs	r6, r3, #16
 8013966:	0c0b      	lsrs	r3, r1, #16
 8013968:	fb02 3306 	mla	r3, r2, r6, r3
 801396c:	b289      	uxth	r1, r1
 801396e:	3001      	adds	r0, #1
 8013970:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8013974:	4285      	cmp	r5, r0
 8013976:	f84c 1b04 	str.w	r1, [ip], #4
 801397a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801397e:	dcec      	bgt.n	801395a <__multadd+0x12>
 8013980:	b30e      	cbz	r6, 80139c6 <__multadd+0x7e>
 8013982:	68a3      	ldr	r3, [r4, #8]
 8013984:	42ab      	cmp	r3, r5
 8013986:	dc19      	bgt.n	80139bc <__multadd+0x74>
 8013988:	6861      	ldr	r1, [r4, #4]
 801398a:	4638      	mov	r0, r7
 801398c:	3101      	adds	r1, #1
 801398e:	f7ff ff79 	bl	8013884 <_Balloc>
 8013992:	4680      	mov	r8, r0
 8013994:	b928      	cbnz	r0, 80139a2 <__multadd+0x5a>
 8013996:	4602      	mov	r2, r0
 8013998:	4b0c      	ldr	r3, [pc, #48]	; (80139cc <__multadd+0x84>)
 801399a:	480d      	ldr	r0, [pc, #52]	; (80139d0 <__multadd+0x88>)
 801399c:	21b5      	movs	r1, #181	; 0xb5
 801399e:	f000 fb0b 	bl	8013fb8 <__assert_func>
 80139a2:	6922      	ldr	r2, [r4, #16]
 80139a4:	3202      	adds	r2, #2
 80139a6:	f104 010c 	add.w	r1, r4, #12
 80139aa:	0092      	lsls	r2, r2, #2
 80139ac:	300c      	adds	r0, #12
 80139ae:	f7fe fbff 	bl	80121b0 <memcpy>
 80139b2:	4621      	mov	r1, r4
 80139b4:	4638      	mov	r0, r7
 80139b6:	f7ff ffa5 	bl	8013904 <_Bfree>
 80139ba:	4644      	mov	r4, r8
 80139bc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80139c0:	3501      	adds	r5, #1
 80139c2:	615e      	str	r6, [r3, #20]
 80139c4:	6125      	str	r5, [r4, #16]
 80139c6:	4620      	mov	r0, r4
 80139c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80139cc:	0801699f 	.word	0x0801699f
 80139d0:	080169b0 	.word	0x080169b0

080139d4 <__hi0bits>:
 80139d4:	0c03      	lsrs	r3, r0, #16
 80139d6:	041b      	lsls	r3, r3, #16
 80139d8:	b9d3      	cbnz	r3, 8013a10 <__hi0bits+0x3c>
 80139da:	0400      	lsls	r0, r0, #16
 80139dc:	2310      	movs	r3, #16
 80139de:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80139e2:	bf04      	itt	eq
 80139e4:	0200      	lsleq	r0, r0, #8
 80139e6:	3308      	addeq	r3, #8
 80139e8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80139ec:	bf04      	itt	eq
 80139ee:	0100      	lsleq	r0, r0, #4
 80139f0:	3304      	addeq	r3, #4
 80139f2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80139f6:	bf04      	itt	eq
 80139f8:	0080      	lsleq	r0, r0, #2
 80139fa:	3302      	addeq	r3, #2
 80139fc:	2800      	cmp	r0, #0
 80139fe:	db05      	blt.n	8013a0c <__hi0bits+0x38>
 8013a00:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8013a04:	f103 0301 	add.w	r3, r3, #1
 8013a08:	bf08      	it	eq
 8013a0a:	2320      	moveq	r3, #32
 8013a0c:	4618      	mov	r0, r3
 8013a0e:	4770      	bx	lr
 8013a10:	2300      	movs	r3, #0
 8013a12:	e7e4      	b.n	80139de <__hi0bits+0xa>

08013a14 <__lo0bits>:
 8013a14:	6803      	ldr	r3, [r0, #0]
 8013a16:	f013 0207 	ands.w	r2, r3, #7
 8013a1a:	4601      	mov	r1, r0
 8013a1c:	d00b      	beq.n	8013a36 <__lo0bits+0x22>
 8013a1e:	07da      	lsls	r2, r3, #31
 8013a20:	d423      	bmi.n	8013a6a <__lo0bits+0x56>
 8013a22:	0798      	lsls	r0, r3, #30
 8013a24:	bf49      	itett	mi
 8013a26:	085b      	lsrmi	r3, r3, #1
 8013a28:	089b      	lsrpl	r3, r3, #2
 8013a2a:	2001      	movmi	r0, #1
 8013a2c:	600b      	strmi	r3, [r1, #0]
 8013a2e:	bf5c      	itt	pl
 8013a30:	600b      	strpl	r3, [r1, #0]
 8013a32:	2002      	movpl	r0, #2
 8013a34:	4770      	bx	lr
 8013a36:	b298      	uxth	r0, r3
 8013a38:	b9a8      	cbnz	r0, 8013a66 <__lo0bits+0x52>
 8013a3a:	0c1b      	lsrs	r3, r3, #16
 8013a3c:	2010      	movs	r0, #16
 8013a3e:	b2da      	uxtb	r2, r3
 8013a40:	b90a      	cbnz	r2, 8013a46 <__lo0bits+0x32>
 8013a42:	3008      	adds	r0, #8
 8013a44:	0a1b      	lsrs	r3, r3, #8
 8013a46:	071a      	lsls	r2, r3, #28
 8013a48:	bf04      	itt	eq
 8013a4a:	091b      	lsreq	r3, r3, #4
 8013a4c:	3004      	addeq	r0, #4
 8013a4e:	079a      	lsls	r2, r3, #30
 8013a50:	bf04      	itt	eq
 8013a52:	089b      	lsreq	r3, r3, #2
 8013a54:	3002      	addeq	r0, #2
 8013a56:	07da      	lsls	r2, r3, #31
 8013a58:	d403      	bmi.n	8013a62 <__lo0bits+0x4e>
 8013a5a:	085b      	lsrs	r3, r3, #1
 8013a5c:	f100 0001 	add.w	r0, r0, #1
 8013a60:	d005      	beq.n	8013a6e <__lo0bits+0x5a>
 8013a62:	600b      	str	r3, [r1, #0]
 8013a64:	4770      	bx	lr
 8013a66:	4610      	mov	r0, r2
 8013a68:	e7e9      	b.n	8013a3e <__lo0bits+0x2a>
 8013a6a:	2000      	movs	r0, #0
 8013a6c:	4770      	bx	lr
 8013a6e:	2020      	movs	r0, #32
 8013a70:	4770      	bx	lr
	...

08013a74 <__i2b>:
 8013a74:	b510      	push	{r4, lr}
 8013a76:	460c      	mov	r4, r1
 8013a78:	2101      	movs	r1, #1
 8013a7a:	f7ff ff03 	bl	8013884 <_Balloc>
 8013a7e:	4602      	mov	r2, r0
 8013a80:	b928      	cbnz	r0, 8013a8e <__i2b+0x1a>
 8013a82:	4b05      	ldr	r3, [pc, #20]	; (8013a98 <__i2b+0x24>)
 8013a84:	4805      	ldr	r0, [pc, #20]	; (8013a9c <__i2b+0x28>)
 8013a86:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8013a8a:	f000 fa95 	bl	8013fb8 <__assert_func>
 8013a8e:	2301      	movs	r3, #1
 8013a90:	6144      	str	r4, [r0, #20]
 8013a92:	6103      	str	r3, [r0, #16]
 8013a94:	bd10      	pop	{r4, pc}
 8013a96:	bf00      	nop
 8013a98:	0801699f 	.word	0x0801699f
 8013a9c:	080169b0 	.word	0x080169b0

08013aa0 <__multiply>:
 8013aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013aa4:	4691      	mov	r9, r2
 8013aa6:	690a      	ldr	r2, [r1, #16]
 8013aa8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8013aac:	429a      	cmp	r2, r3
 8013aae:	bfb8      	it	lt
 8013ab0:	460b      	movlt	r3, r1
 8013ab2:	460c      	mov	r4, r1
 8013ab4:	bfbc      	itt	lt
 8013ab6:	464c      	movlt	r4, r9
 8013ab8:	4699      	movlt	r9, r3
 8013aba:	6927      	ldr	r7, [r4, #16]
 8013abc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8013ac0:	68a3      	ldr	r3, [r4, #8]
 8013ac2:	6861      	ldr	r1, [r4, #4]
 8013ac4:	eb07 060a 	add.w	r6, r7, sl
 8013ac8:	42b3      	cmp	r3, r6
 8013aca:	b085      	sub	sp, #20
 8013acc:	bfb8      	it	lt
 8013ace:	3101      	addlt	r1, #1
 8013ad0:	f7ff fed8 	bl	8013884 <_Balloc>
 8013ad4:	b930      	cbnz	r0, 8013ae4 <__multiply+0x44>
 8013ad6:	4602      	mov	r2, r0
 8013ad8:	4b44      	ldr	r3, [pc, #272]	; (8013bec <__multiply+0x14c>)
 8013ada:	4845      	ldr	r0, [pc, #276]	; (8013bf0 <__multiply+0x150>)
 8013adc:	f240 115d 	movw	r1, #349	; 0x15d
 8013ae0:	f000 fa6a 	bl	8013fb8 <__assert_func>
 8013ae4:	f100 0514 	add.w	r5, r0, #20
 8013ae8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8013aec:	462b      	mov	r3, r5
 8013aee:	2200      	movs	r2, #0
 8013af0:	4543      	cmp	r3, r8
 8013af2:	d321      	bcc.n	8013b38 <__multiply+0x98>
 8013af4:	f104 0314 	add.w	r3, r4, #20
 8013af8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8013afc:	f109 0314 	add.w	r3, r9, #20
 8013b00:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8013b04:	9202      	str	r2, [sp, #8]
 8013b06:	1b3a      	subs	r2, r7, r4
 8013b08:	3a15      	subs	r2, #21
 8013b0a:	f022 0203 	bic.w	r2, r2, #3
 8013b0e:	3204      	adds	r2, #4
 8013b10:	f104 0115 	add.w	r1, r4, #21
 8013b14:	428f      	cmp	r7, r1
 8013b16:	bf38      	it	cc
 8013b18:	2204      	movcc	r2, #4
 8013b1a:	9201      	str	r2, [sp, #4]
 8013b1c:	9a02      	ldr	r2, [sp, #8]
 8013b1e:	9303      	str	r3, [sp, #12]
 8013b20:	429a      	cmp	r2, r3
 8013b22:	d80c      	bhi.n	8013b3e <__multiply+0x9e>
 8013b24:	2e00      	cmp	r6, #0
 8013b26:	dd03      	ble.n	8013b30 <__multiply+0x90>
 8013b28:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8013b2c:	2b00      	cmp	r3, #0
 8013b2e:	d05a      	beq.n	8013be6 <__multiply+0x146>
 8013b30:	6106      	str	r6, [r0, #16]
 8013b32:	b005      	add	sp, #20
 8013b34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b38:	f843 2b04 	str.w	r2, [r3], #4
 8013b3c:	e7d8      	b.n	8013af0 <__multiply+0x50>
 8013b3e:	f8b3 a000 	ldrh.w	sl, [r3]
 8013b42:	f1ba 0f00 	cmp.w	sl, #0
 8013b46:	d024      	beq.n	8013b92 <__multiply+0xf2>
 8013b48:	f104 0e14 	add.w	lr, r4, #20
 8013b4c:	46a9      	mov	r9, r5
 8013b4e:	f04f 0c00 	mov.w	ip, #0
 8013b52:	f85e 2b04 	ldr.w	r2, [lr], #4
 8013b56:	f8d9 1000 	ldr.w	r1, [r9]
 8013b5a:	fa1f fb82 	uxth.w	fp, r2
 8013b5e:	b289      	uxth	r1, r1
 8013b60:	fb0a 110b 	mla	r1, sl, fp, r1
 8013b64:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8013b68:	f8d9 2000 	ldr.w	r2, [r9]
 8013b6c:	4461      	add	r1, ip
 8013b6e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8013b72:	fb0a c20b 	mla	r2, sl, fp, ip
 8013b76:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8013b7a:	b289      	uxth	r1, r1
 8013b7c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8013b80:	4577      	cmp	r7, lr
 8013b82:	f849 1b04 	str.w	r1, [r9], #4
 8013b86:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8013b8a:	d8e2      	bhi.n	8013b52 <__multiply+0xb2>
 8013b8c:	9a01      	ldr	r2, [sp, #4]
 8013b8e:	f845 c002 	str.w	ip, [r5, r2]
 8013b92:	9a03      	ldr	r2, [sp, #12]
 8013b94:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8013b98:	3304      	adds	r3, #4
 8013b9a:	f1b9 0f00 	cmp.w	r9, #0
 8013b9e:	d020      	beq.n	8013be2 <__multiply+0x142>
 8013ba0:	6829      	ldr	r1, [r5, #0]
 8013ba2:	f104 0c14 	add.w	ip, r4, #20
 8013ba6:	46ae      	mov	lr, r5
 8013ba8:	f04f 0a00 	mov.w	sl, #0
 8013bac:	f8bc b000 	ldrh.w	fp, [ip]
 8013bb0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8013bb4:	fb09 220b 	mla	r2, r9, fp, r2
 8013bb8:	4492      	add	sl, r2
 8013bba:	b289      	uxth	r1, r1
 8013bbc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8013bc0:	f84e 1b04 	str.w	r1, [lr], #4
 8013bc4:	f85c 2b04 	ldr.w	r2, [ip], #4
 8013bc8:	f8be 1000 	ldrh.w	r1, [lr]
 8013bcc:	0c12      	lsrs	r2, r2, #16
 8013bce:	fb09 1102 	mla	r1, r9, r2, r1
 8013bd2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8013bd6:	4567      	cmp	r7, ip
 8013bd8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8013bdc:	d8e6      	bhi.n	8013bac <__multiply+0x10c>
 8013bde:	9a01      	ldr	r2, [sp, #4]
 8013be0:	50a9      	str	r1, [r5, r2]
 8013be2:	3504      	adds	r5, #4
 8013be4:	e79a      	b.n	8013b1c <__multiply+0x7c>
 8013be6:	3e01      	subs	r6, #1
 8013be8:	e79c      	b.n	8013b24 <__multiply+0x84>
 8013bea:	bf00      	nop
 8013bec:	0801699f 	.word	0x0801699f
 8013bf0:	080169b0 	.word	0x080169b0

08013bf4 <__pow5mult>:
 8013bf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013bf8:	4615      	mov	r5, r2
 8013bfa:	f012 0203 	ands.w	r2, r2, #3
 8013bfe:	4606      	mov	r6, r0
 8013c00:	460f      	mov	r7, r1
 8013c02:	d007      	beq.n	8013c14 <__pow5mult+0x20>
 8013c04:	4c25      	ldr	r4, [pc, #148]	; (8013c9c <__pow5mult+0xa8>)
 8013c06:	3a01      	subs	r2, #1
 8013c08:	2300      	movs	r3, #0
 8013c0a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013c0e:	f7ff fe9b 	bl	8013948 <__multadd>
 8013c12:	4607      	mov	r7, r0
 8013c14:	10ad      	asrs	r5, r5, #2
 8013c16:	d03d      	beq.n	8013c94 <__pow5mult+0xa0>
 8013c18:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8013c1a:	b97c      	cbnz	r4, 8013c3c <__pow5mult+0x48>
 8013c1c:	2010      	movs	r0, #16
 8013c1e:	f7f4 fafb 	bl	8008218 <__wrap_malloc>
 8013c22:	4602      	mov	r2, r0
 8013c24:	6270      	str	r0, [r6, #36]	; 0x24
 8013c26:	b928      	cbnz	r0, 8013c34 <__pow5mult+0x40>
 8013c28:	4b1d      	ldr	r3, [pc, #116]	; (8013ca0 <__pow5mult+0xac>)
 8013c2a:	481e      	ldr	r0, [pc, #120]	; (8013ca4 <__pow5mult+0xb0>)
 8013c2c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8013c30:	f000 f9c2 	bl	8013fb8 <__assert_func>
 8013c34:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013c38:	6004      	str	r4, [r0, #0]
 8013c3a:	60c4      	str	r4, [r0, #12]
 8013c3c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8013c40:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013c44:	b94c      	cbnz	r4, 8013c5a <__pow5mult+0x66>
 8013c46:	f240 2171 	movw	r1, #625	; 0x271
 8013c4a:	4630      	mov	r0, r6
 8013c4c:	f7ff ff12 	bl	8013a74 <__i2b>
 8013c50:	2300      	movs	r3, #0
 8013c52:	f8c8 0008 	str.w	r0, [r8, #8]
 8013c56:	4604      	mov	r4, r0
 8013c58:	6003      	str	r3, [r0, #0]
 8013c5a:	f04f 0900 	mov.w	r9, #0
 8013c5e:	07eb      	lsls	r3, r5, #31
 8013c60:	d50a      	bpl.n	8013c78 <__pow5mult+0x84>
 8013c62:	4639      	mov	r1, r7
 8013c64:	4622      	mov	r2, r4
 8013c66:	4630      	mov	r0, r6
 8013c68:	f7ff ff1a 	bl	8013aa0 <__multiply>
 8013c6c:	4639      	mov	r1, r7
 8013c6e:	4680      	mov	r8, r0
 8013c70:	4630      	mov	r0, r6
 8013c72:	f7ff fe47 	bl	8013904 <_Bfree>
 8013c76:	4647      	mov	r7, r8
 8013c78:	106d      	asrs	r5, r5, #1
 8013c7a:	d00b      	beq.n	8013c94 <__pow5mult+0xa0>
 8013c7c:	6820      	ldr	r0, [r4, #0]
 8013c7e:	b938      	cbnz	r0, 8013c90 <__pow5mult+0x9c>
 8013c80:	4622      	mov	r2, r4
 8013c82:	4621      	mov	r1, r4
 8013c84:	4630      	mov	r0, r6
 8013c86:	f7ff ff0b 	bl	8013aa0 <__multiply>
 8013c8a:	6020      	str	r0, [r4, #0]
 8013c8c:	f8c0 9000 	str.w	r9, [r0]
 8013c90:	4604      	mov	r4, r0
 8013c92:	e7e4      	b.n	8013c5e <__pow5mult+0x6a>
 8013c94:	4638      	mov	r0, r7
 8013c96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013c9a:	bf00      	nop
 8013c9c:	08016b00 	.word	0x08016b00
 8013ca0:	0801692d 	.word	0x0801692d
 8013ca4:	080169b0 	.word	0x080169b0

08013ca8 <__lshift>:
 8013ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013cac:	460c      	mov	r4, r1
 8013cae:	6849      	ldr	r1, [r1, #4]
 8013cb0:	6923      	ldr	r3, [r4, #16]
 8013cb2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8013cb6:	68a3      	ldr	r3, [r4, #8]
 8013cb8:	4607      	mov	r7, r0
 8013cba:	4691      	mov	r9, r2
 8013cbc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013cc0:	f108 0601 	add.w	r6, r8, #1
 8013cc4:	42b3      	cmp	r3, r6
 8013cc6:	db0b      	blt.n	8013ce0 <__lshift+0x38>
 8013cc8:	4638      	mov	r0, r7
 8013cca:	f7ff fddb 	bl	8013884 <_Balloc>
 8013cce:	4605      	mov	r5, r0
 8013cd0:	b948      	cbnz	r0, 8013ce6 <__lshift+0x3e>
 8013cd2:	4602      	mov	r2, r0
 8013cd4:	4b2a      	ldr	r3, [pc, #168]	; (8013d80 <__lshift+0xd8>)
 8013cd6:	482b      	ldr	r0, [pc, #172]	; (8013d84 <__lshift+0xdc>)
 8013cd8:	f240 11d9 	movw	r1, #473	; 0x1d9
 8013cdc:	f000 f96c 	bl	8013fb8 <__assert_func>
 8013ce0:	3101      	adds	r1, #1
 8013ce2:	005b      	lsls	r3, r3, #1
 8013ce4:	e7ee      	b.n	8013cc4 <__lshift+0x1c>
 8013ce6:	2300      	movs	r3, #0
 8013ce8:	f100 0114 	add.w	r1, r0, #20
 8013cec:	f100 0210 	add.w	r2, r0, #16
 8013cf0:	4618      	mov	r0, r3
 8013cf2:	4553      	cmp	r3, sl
 8013cf4:	db37      	blt.n	8013d66 <__lshift+0xbe>
 8013cf6:	6920      	ldr	r0, [r4, #16]
 8013cf8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013cfc:	f104 0314 	add.w	r3, r4, #20
 8013d00:	f019 091f 	ands.w	r9, r9, #31
 8013d04:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013d08:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8013d0c:	d02f      	beq.n	8013d6e <__lshift+0xc6>
 8013d0e:	f1c9 0e20 	rsb	lr, r9, #32
 8013d12:	468a      	mov	sl, r1
 8013d14:	f04f 0c00 	mov.w	ip, #0
 8013d18:	681a      	ldr	r2, [r3, #0]
 8013d1a:	fa02 f209 	lsl.w	r2, r2, r9
 8013d1e:	ea42 020c 	orr.w	r2, r2, ip
 8013d22:	f84a 2b04 	str.w	r2, [sl], #4
 8013d26:	f853 2b04 	ldr.w	r2, [r3], #4
 8013d2a:	4298      	cmp	r0, r3
 8013d2c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8013d30:	d8f2      	bhi.n	8013d18 <__lshift+0x70>
 8013d32:	1b03      	subs	r3, r0, r4
 8013d34:	3b15      	subs	r3, #21
 8013d36:	f023 0303 	bic.w	r3, r3, #3
 8013d3a:	3304      	adds	r3, #4
 8013d3c:	f104 0215 	add.w	r2, r4, #21
 8013d40:	4290      	cmp	r0, r2
 8013d42:	bf38      	it	cc
 8013d44:	2304      	movcc	r3, #4
 8013d46:	f841 c003 	str.w	ip, [r1, r3]
 8013d4a:	f1bc 0f00 	cmp.w	ip, #0
 8013d4e:	d001      	beq.n	8013d54 <__lshift+0xac>
 8013d50:	f108 0602 	add.w	r6, r8, #2
 8013d54:	3e01      	subs	r6, #1
 8013d56:	4638      	mov	r0, r7
 8013d58:	612e      	str	r6, [r5, #16]
 8013d5a:	4621      	mov	r1, r4
 8013d5c:	f7ff fdd2 	bl	8013904 <_Bfree>
 8013d60:	4628      	mov	r0, r5
 8013d62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013d66:	f842 0f04 	str.w	r0, [r2, #4]!
 8013d6a:	3301      	adds	r3, #1
 8013d6c:	e7c1      	b.n	8013cf2 <__lshift+0x4a>
 8013d6e:	3904      	subs	r1, #4
 8013d70:	f853 2b04 	ldr.w	r2, [r3], #4
 8013d74:	f841 2f04 	str.w	r2, [r1, #4]!
 8013d78:	4298      	cmp	r0, r3
 8013d7a:	d8f9      	bhi.n	8013d70 <__lshift+0xc8>
 8013d7c:	e7ea      	b.n	8013d54 <__lshift+0xac>
 8013d7e:	bf00      	nop
 8013d80:	0801699f 	.word	0x0801699f
 8013d84:	080169b0 	.word	0x080169b0

08013d88 <__mcmp>:
 8013d88:	b530      	push	{r4, r5, lr}
 8013d8a:	6902      	ldr	r2, [r0, #16]
 8013d8c:	690c      	ldr	r4, [r1, #16]
 8013d8e:	1b12      	subs	r2, r2, r4
 8013d90:	d10e      	bne.n	8013db0 <__mcmp+0x28>
 8013d92:	f100 0314 	add.w	r3, r0, #20
 8013d96:	3114      	adds	r1, #20
 8013d98:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8013d9c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8013da0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8013da4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8013da8:	42a5      	cmp	r5, r4
 8013daa:	d003      	beq.n	8013db4 <__mcmp+0x2c>
 8013dac:	d305      	bcc.n	8013dba <__mcmp+0x32>
 8013dae:	2201      	movs	r2, #1
 8013db0:	4610      	mov	r0, r2
 8013db2:	bd30      	pop	{r4, r5, pc}
 8013db4:	4283      	cmp	r3, r0
 8013db6:	d3f3      	bcc.n	8013da0 <__mcmp+0x18>
 8013db8:	e7fa      	b.n	8013db0 <__mcmp+0x28>
 8013dba:	f04f 32ff 	mov.w	r2, #4294967295
 8013dbe:	e7f7      	b.n	8013db0 <__mcmp+0x28>

08013dc0 <__mdiff>:
 8013dc0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013dc4:	460c      	mov	r4, r1
 8013dc6:	4606      	mov	r6, r0
 8013dc8:	4611      	mov	r1, r2
 8013dca:	4620      	mov	r0, r4
 8013dcc:	4690      	mov	r8, r2
 8013dce:	f7ff ffdb 	bl	8013d88 <__mcmp>
 8013dd2:	1e05      	subs	r5, r0, #0
 8013dd4:	d110      	bne.n	8013df8 <__mdiff+0x38>
 8013dd6:	4629      	mov	r1, r5
 8013dd8:	4630      	mov	r0, r6
 8013dda:	f7ff fd53 	bl	8013884 <_Balloc>
 8013dde:	b930      	cbnz	r0, 8013dee <__mdiff+0x2e>
 8013de0:	4b3a      	ldr	r3, [pc, #232]	; (8013ecc <__mdiff+0x10c>)
 8013de2:	4602      	mov	r2, r0
 8013de4:	f240 2132 	movw	r1, #562	; 0x232
 8013de8:	4839      	ldr	r0, [pc, #228]	; (8013ed0 <__mdiff+0x110>)
 8013dea:	f000 f8e5 	bl	8013fb8 <__assert_func>
 8013dee:	2301      	movs	r3, #1
 8013df0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8013df4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013df8:	bfa4      	itt	ge
 8013dfa:	4643      	movge	r3, r8
 8013dfc:	46a0      	movge	r8, r4
 8013dfe:	4630      	mov	r0, r6
 8013e00:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8013e04:	bfa6      	itte	ge
 8013e06:	461c      	movge	r4, r3
 8013e08:	2500      	movge	r5, #0
 8013e0a:	2501      	movlt	r5, #1
 8013e0c:	f7ff fd3a 	bl	8013884 <_Balloc>
 8013e10:	b920      	cbnz	r0, 8013e1c <__mdiff+0x5c>
 8013e12:	4b2e      	ldr	r3, [pc, #184]	; (8013ecc <__mdiff+0x10c>)
 8013e14:	4602      	mov	r2, r0
 8013e16:	f44f 7110 	mov.w	r1, #576	; 0x240
 8013e1a:	e7e5      	b.n	8013de8 <__mdiff+0x28>
 8013e1c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8013e20:	6926      	ldr	r6, [r4, #16]
 8013e22:	60c5      	str	r5, [r0, #12]
 8013e24:	f104 0914 	add.w	r9, r4, #20
 8013e28:	f108 0514 	add.w	r5, r8, #20
 8013e2c:	f100 0e14 	add.w	lr, r0, #20
 8013e30:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8013e34:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8013e38:	f108 0210 	add.w	r2, r8, #16
 8013e3c:	46f2      	mov	sl, lr
 8013e3e:	2100      	movs	r1, #0
 8013e40:	f859 3b04 	ldr.w	r3, [r9], #4
 8013e44:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8013e48:	fa1f f883 	uxth.w	r8, r3
 8013e4c:	fa11 f18b 	uxtah	r1, r1, fp
 8013e50:	0c1b      	lsrs	r3, r3, #16
 8013e52:	eba1 0808 	sub.w	r8, r1, r8
 8013e56:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8013e5a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8013e5e:	fa1f f888 	uxth.w	r8, r8
 8013e62:	1419      	asrs	r1, r3, #16
 8013e64:	454e      	cmp	r6, r9
 8013e66:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8013e6a:	f84a 3b04 	str.w	r3, [sl], #4
 8013e6e:	d8e7      	bhi.n	8013e40 <__mdiff+0x80>
 8013e70:	1b33      	subs	r3, r6, r4
 8013e72:	3b15      	subs	r3, #21
 8013e74:	f023 0303 	bic.w	r3, r3, #3
 8013e78:	3304      	adds	r3, #4
 8013e7a:	3415      	adds	r4, #21
 8013e7c:	42a6      	cmp	r6, r4
 8013e7e:	bf38      	it	cc
 8013e80:	2304      	movcc	r3, #4
 8013e82:	441d      	add	r5, r3
 8013e84:	4473      	add	r3, lr
 8013e86:	469e      	mov	lr, r3
 8013e88:	462e      	mov	r6, r5
 8013e8a:	4566      	cmp	r6, ip
 8013e8c:	d30e      	bcc.n	8013eac <__mdiff+0xec>
 8013e8e:	f10c 0203 	add.w	r2, ip, #3
 8013e92:	1b52      	subs	r2, r2, r5
 8013e94:	f022 0203 	bic.w	r2, r2, #3
 8013e98:	3d03      	subs	r5, #3
 8013e9a:	45ac      	cmp	ip, r5
 8013e9c:	bf38      	it	cc
 8013e9e:	2200      	movcc	r2, #0
 8013ea0:	441a      	add	r2, r3
 8013ea2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8013ea6:	b17b      	cbz	r3, 8013ec8 <__mdiff+0x108>
 8013ea8:	6107      	str	r7, [r0, #16]
 8013eaa:	e7a3      	b.n	8013df4 <__mdiff+0x34>
 8013eac:	f856 8b04 	ldr.w	r8, [r6], #4
 8013eb0:	fa11 f288 	uxtah	r2, r1, r8
 8013eb4:	1414      	asrs	r4, r2, #16
 8013eb6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8013eba:	b292      	uxth	r2, r2
 8013ebc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8013ec0:	f84e 2b04 	str.w	r2, [lr], #4
 8013ec4:	1421      	asrs	r1, r4, #16
 8013ec6:	e7e0      	b.n	8013e8a <__mdiff+0xca>
 8013ec8:	3f01      	subs	r7, #1
 8013eca:	e7ea      	b.n	8013ea2 <__mdiff+0xe2>
 8013ecc:	0801699f 	.word	0x0801699f
 8013ed0:	080169b0 	.word	0x080169b0

08013ed4 <__d2b>:
 8013ed4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013ed8:	4689      	mov	r9, r1
 8013eda:	2101      	movs	r1, #1
 8013edc:	ec57 6b10 	vmov	r6, r7, d0
 8013ee0:	4690      	mov	r8, r2
 8013ee2:	f7ff fccf 	bl	8013884 <_Balloc>
 8013ee6:	4604      	mov	r4, r0
 8013ee8:	b930      	cbnz	r0, 8013ef8 <__d2b+0x24>
 8013eea:	4602      	mov	r2, r0
 8013eec:	4b25      	ldr	r3, [pc, #148]	; (8013f84 <__d2b+0xb0>)
 8013eee:	4826      	ldr	r0, [pc, #152]	; (8013f88 <__d2b+0xb4>)
 8013ef0:	f240 310a 	movw	r1, #778	; 0x30a
 8013ef4:	f000 f860 	bl	8013fb8 <__assert_func>
 8013ef8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8013efc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8013f00:	bb35      	cbnz	r5, 8013f50 <__d2b+0x7c>
 8013f02:	2e00      	cmp	r6, #0
 8013f04:	9301      	str	r3, [sp, #4]
 8013f06:	d028      	beq.n	8013f5a <__d2b+0x86>
 8013f08:	4668      	mov	r0, sp
 8013f0a:	9600      	str	r6, [sp, #0]
 8013f0c:	f7ff fd82 	bl	8013a14 <__lo0bits>
 8013f10:	9900      	ldr	r1, [sp, #0]
 8013f12:	b300      	cbz	r0, 8013f56 <__d2b+0x82>
 8013f14:	9a01      	ldr	r2, [sp, #4]
 8013f16:	f1c0 0320 	rsb	r3, r0, #32
 8013f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8013f1e:	430b      	orrs	r3, r1
 8013f20:	40c2      	lsrs	r2, r0
 8013f22:	6163      	str	r3, [r4, #20]
 8013f24:	9201      	str	r2, [sp, #4]
 8013f26:	9b01      	ldr	r3, [sp, #4]
 8013f28:	61a3      	str	r3, [r4, #24]
 8013f2a:	2b00      	cmp	r3, #0
 8013f2c:	bf14      	ite	ne
 8013f2e:	2202      	movne	r2, #2
 8013f30:	2201      	moveq	r2, #1
 8013f32:	6122      	str	r2, [r4, #16]
 8013f34:	b1d5      	cbz	r5, 8013f6c <__d2b+0x98>
 8013f36:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8013f3a:	4405      	add	r5, r0
 8013f3c:	f8c9 5000 	str.w	r5, [r9]
 8013f40:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8013f44:	f8c8 0000 	str.w	r0, [r8]
 8013f48:	4620      	mov	r0, r4
 8013f4a:	b003      	add	sp, #12
 8013f4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013f50:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8013f54:	e7d5      	b.n	8013f02 <__d2b+0x2e>
 8013f56:	6161      	str	r1, [r4, #20]
 8013f58:	e7e5      	b.n	8013f26 <__d2b+0x52>
 8013f5a:	a801      	add	r0, sp, #4
 8013f5c:	f7ff fd5a 	bl	8013a14 <__lo0bits>
 8013f60:	9b01      	ldr	r3, [sp, #4]
 8013f62:	6163      	str	r3, [r4, #20]
 8013f64:	2201      	movs	r2, #1
 8013f66:	6122      	str	r2, [r4, #16]
 8013f68:	3020      	adds	r0, #32
 8013f6a:	e7e3      	b.n	8013f34 <__d2b+0x60>
 8013f6c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8013f70:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8013f74:	f8c9 0000 	str.w	r0, [r9]
 8013f78:	6918      	ldr	r0, [r3, #16]
 8013f7a:	f7ff fd2b 	bl	80139d4 <__hi0bits>
 8013f7e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8013f82:	e7df      	b.n	8013f44 <__d2b+0x70>
 8013f84:	0801699f 	.word	0x0801699f
 8013f88:	080169b0 	.word	0x080169b0

08013f8c <_calloc_r>:
 8013f8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013f8e:	fba1 2402 	umull	r2, r4, r1, r2
 8013f92:	b94c      	cbnz	r4, 8013fa8 <_calloc_r+0x1c>
 8013f94:	4611      	mov	r1, r2
 8013f96:	9201      	str	r2, [sp, #4]
 8013f98:	f7fe f98c 	bl	80122b4 <_malloc_r>
 8013f9c:	9a01      	ldr	r2, [sp, #4]
 8013f9e:	4605      	mov	r5, r0
 8013fa0:	b930      	cbnz	r0, 8013fb0 <_calloc_r+0x24>
 8013fa2:	4628      	mov	r0, r5
 8013fa4:	b003      	add	sp, #12
 8013fa6:	bd30      	pop	{r4, r5, pc}
 8013fa8:	220c      	movs	r2, #12
 8013faa:	6002      	str	r2, [r0, #0]
 8013fac:	2500      	movs	r5, #0
 8013fae:	e7f8      	b.n	8013fa2 <_calloc_r+0x16>
 8013fb0:	4621      	mov	r1, r4
 8013fb2:	f7fe f90b 	bl	80121cc <memset>
 8013fb6:	e7f4      	b.n	8013fa2 <_calloc_r+0x16>

08013fb8 <__assert_func>:
 8013fb8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013fba:	4614      	mov	r4, r2
 8013fbc:	461a      	mov	r2, r3
 8013fbe:	4b09      	ldr	r3, [pc, #36]	; (8013fe4 <__assert_func+0x2c>)
 8013fc0:	681b      	ldr	r3, [r3, #0]
 8013fc2:	4605      	mov	r5, r0
 8013fc4:	68d8      	ldr	r0, [r3, #12]
 8013fc6:	b14c      	cbz	r4, 8013fdc <__assert_func+0x24>
 8013fc8:	4b07      	ldr	r3, [pc, #28]	; (8013fe8 <__assert_func+0x30>)
 8013fca:	9100      	str	r1, [sp, #0]
 8013fcc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013fd0:	4906      	ldr	r1, [pc, #24]	; (8013fec <__assert_func+0x34>)
 8013fd2:	462b      	mov	r3, r5
 8013fd4:	f000 f80e 	bl	8013ff4 <fiprintf>
 8013fd8:	f000 fa5a 	bl	8014490 <abort>
 8013fdc:	4b04      	ldr	r3, [pc, #16]	; (8013ff0 <__assert_func+0x38>)
 8013fde:	461c      	mov	r4, r3
 8013fe0:	e7f3      	b.n	8013fca <__assert_func+0x12>
 8013fe2:	bf00      	nop
 8013fe4:	240006fc 	.word	0x240006fc
 8013fe8:	08016b0c 	.word	0x08016b0c
 8013fec:	08016b19 	.word	0x08016b19
 8013ff0:	08016b47 	.word	0x08016b47

08013ff4 <fiprintf>:
 8013ff4:	b40e      	push	{r1, r2, r3}
 8013ff6:	b503      	push	{r0, r1, lr}
 8013ff8:	4601      	mov	r1, r0
 8013ffa:	ab03      	add	r3, sp, #12
 8013ffc:	4805      	ldr	r0, [pc, #20]	; (8014014 <fiprintf+0x20>)
 8013ffe:	f853 2b04 	ldr.w	r2, [r3], #4
 8014002:	6800      	ldr	r0, [r0, #0]
 8014004:	9301      	str	r3, [sp, #4]
 8014006:	f000 f845 	bl	8014094 <_vfiprintf_r>
 801400a:	b002      	add	sp, #8
 801400c:	f85d eb04 	ldr.w	lr, [sp], #4
 8014010:	b003      	add	sp, #12
 8014012:	4770      	bx	lr
 8014014:	240006fc 	.word	0x240006fc

08014018 <__retarget_lock_init_recursive>:
 8014018:	4770      	bx	lr

0801401a <__retarget_lock_acquire_recursive>:
 801401a:	4770      	bx	lr

0801401c <__retarget_lock_release_recursive>:
 801401c:	4770      	bx	lr

0801401e <__ascii_mbtowc>:
 801401e:	b082      	sub	sp, #8
 8014020:	b901      	cbnz	r1, 8014024 <__ascii_mbtowc+0x6>
 8014022:	a901      	add	r1, sp, #4
 8014024:	b142      	cbz	r2, 8014038 <__ascii_mbtowc+0x1a>
 8014026:	b14b      	cbz	r3, 801403c <__ascii_mbtowc+0x1e>
 8014028:	7813      	ldrb	r3, [r2, #0]
 801402a:	600b      	str	r3, [r1, #0]
 801402c:	7812      	ldrb	r2, [r2, #0]
 801402e:	1e10      	subs	r0, r2, #0
 8014030:	bf18      	it	ne
 8014032:	2001      	movne	r0, #1
 8014034:	b002      	add	sp, #8
 8014036:	4770      	bx	lr
 8014038:	4610      	mov	r0, r2
 801403a:	e7fb      	b.n	8014034 <__ascii_mbtowc+0x16>
 801403c:	f06f 0001 	mvn.w	r0, #1
 8014040:	e7f8      	b.n	8014034 <__ascii_mbtowc+0x16>

08014042 <__sfputc_r>:
 8014042:	6893      	ldr	r3, [r2, #8]
 8014044:	3b01      	subs	r3, #1
 8014046:	2b00      	cmp	r3, #0
 8014048:	b410      	push	{r4}
 801404a:	6093      	str	r3, [r2, #8]
 801404c:	da08      	bge.n	8014060 <__sfputc_r+0x1e>
 801404e:	6994      	ldr	r4, [r2, #24]
 8014050:	42a3      	cmp	r3, r4
 8014052:	db01      	blt.n	8014058 <__sfputc_r+0x16>
 8014054:	290a      	cmp	r1, #10
 8014056:	d103      	bne.n	8014060 <__sfputc_r+0x1e>
 8014058:	f85d 4b04 	ldr.w	r4, [sp], #4
 801405c:	f000 b94a 	b.w	80142f4 <__swbuf_r>
 8014060:	6813      	ldr	r3, [r2, #0]
 8014062:	1c58      	adds	r0, r3, #1
 8014064:	6010      	str	r0, [r2, #0]
 8014066:	7019      	strb	r1, [r3, #0]
 8014068:	4608      	mov	r0, r1
 801406a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801406e:	4770      	bx	lr

08014070 <__sfputs_r>:
 8014070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014072:	4606      	mov	r6, r0
 8014074:	460f      	mov	r7, r1
 8014076:	4614      	mov	r4, r2
 8014078:	18d5      	adds	r5, r2, r3
 801407a:	42ac      	cmp	r4, r5
 801407c:	d101      	bne.n	8014082 <__sfputs_r+0x12>
 801407e:	2000      	movs	r0, #0
 8014080:	e007      	b.n	8014092 <__sfputs_r+0x22>
 8014082:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014086:	463a      	mov	r2, r7
 8014088:	4630      	mov	r0, r6
 801408a:	f7ff ffda 	bl	8014042 <__sfputc_r>
 801408e:	1c43      	adds	r3, r0, #1
 8014090:	d1f3      	bne.n	801407a <__sfputs_r+0xa>
 8014092:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08014094 <_vfiprintf_r>:
 8014094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014098:	460d      	mov	r5, r1
 801409a:	b09d      	sub	sp, #116	; 0x74
 801409c:	4614      	mov	r4, r2
 801409e:	4698      	mov	r8, r3
 80140a0:	4606      	mov	r6, r0
 80140a2:	b118      	cbz	r0, 80140ac <_vfiprintf_r+0x18>
 80140a4:	6983      	ldr	r3, [r0, #24]
 80140a6:	b90b      	cbnz	r3, 80140ac <_vfiprintf_r+0x18>
 80140a8:	f000 fb14 	bl	80146d4 <__sinit>
 80140ac:	4b89      	ldr	r3, [pc, #548]	; (80142d4 <_vfiprintf_r+0x240>)
 80140ae:	429d      	cmp	r5, r3
 80140b0:	d11b      	bne.n	80140ea <_vfiprintf_r+0x56>
 80140b2:	6875      	ldr	r5, [r6, #4]
 80140b4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80140b6:	07d9      	lsls	r1, r3, #31
 80140b8:	d405      	bmi.n	80140c6 <_vfiprintf_r+0x32>
 80140ba:	89ab      	ldrh	r3, [r5, #12]
 80140bc:	059a      	lsls	r2, r3, #22
 80140be:	d402      	bmi.n	80140c6 <_vfiprintf_r+0x32>
 80140c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80140c2:	f7ff ffaa 	bl	801401a <__retarget_lock_acquire_recursive>
 80140c6:	89ab      	ldrh	r3, [r5, #12]
 80140c8:	071b      	lsls	r3, r3, #28
 80140ca:	d501      	bpl.n	80140d0 <_vfiprintf_r+0x3c>
 80140cc:	692b      	ldr	r3, [r5, #16]
 80140ce:	b9eb      	cbnz	r3, 801410c <_vfiprintf_r+0x78>
 80140d0:	4629      	mov	r1, r5
 80140d2:	4630      	mov	r0, r6
 80140d4:	f000 f96e 	bl	80143b4 <__swsetup_r>
 80140d8:	b1c0      	cbz	r0, 801410c <_vfiprintf_r+0x78>
 80140da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80140dc:	07dc      	lsls	r4, r3, #31
 80140de:	d50e      	bpl.n	80140fe <_vfiprintf_r+0x6a>
 80140e0:	f04f 30ff 	mov.w	r0, #4294967295
 80140e4:	b01d      	add	sp, #116	; 0x74
 80140e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80140ea:	4b7b      	ldr	r3, [pc, #492]	; (80142d8 <_vfiprintf_r+0x244>)
 80140ec:	429d      	cmp	r5, r3
 80140ee:	d101      	bne.n	80140f4 <_vfiprintf_r+0x60>
 80140f0:	68b5      	ldr	r5, [r6, #8]
 80140f2:	e7df      	b.n	80140b4 <_vfiprintf_r+0x20>
 80140f4:	4b79      	ldr	r3, [pc, #484]	; (80142dc <_vfiprintf_r+0x248>)
 80140f6:	429d      	cmp	r5, r3
 80140f8:	bf08      	it	eq
 80140fa:	68f5      	ldreq	r5, [r6, #12]
 80140fc:	e7da      	b.n	80140b4 <_vfiprintf_r+0x20>
 80140fe:	89ab      	ldrh	r3, [r5, #12]
 8014100:	0598      	lsls	r0, r3, #22
 8014102:	d4ed      	bmi.n	80140e0 <_vfiprintf_r+0x4c>
 8014104:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014106:	f7ff ff89 	bl	801401c <__retarget_lock_release_recursive>
 801410a:	e7e9      	b.n	80140e0 <_vfiprintf_r+0x4c>
 801410c:	2300      	movs	r3, #0
 801410e:	9309      	str	r3, [sp, #36]	; 0x24
 8014110:	2320      	movs	r3, #32
 8014112:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014116:	f8cd 800c 	str.w	r8, [sp, #12]
 801411a:	2330      	movs	r3, #48	; 0x30
 801411c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80142e0 <_vfiprintf_r+0x24c>
 8014120:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014124:	f04f 0901 	mov.w	r9, #1
 8014128:	4623      	mov	r3, r4
 801412a:	469a      	mov	sl, r3
 801412c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014130:	b10a      	cbz	r2, 8014136 <_vfiprintf_r+0xa2>
 8014132:	2a25      	cmp	r2, #37	; 0x25
 8014134:	d1f9      	bne.n	801412a <_vfiprintf_r+0x96>
 8014136:	ebba 0b04 	subs.w	fp, sl, r4
 801413a:	d00b      	beq.n	8014154 <_vfiprintf_r+0xc0>
 801413c:	465b      	mov	r3, fp
 801413e:	4622      	mov	r2, r4
 8014140:	4629      	mov	r1, r5
 8014142:	4630      	mov	r0, r6
 8014144:	f7ff ff94 	bl	8014070 <__sfputs_r>
 8014148:	3001      	adds	r0, #1
 801414a:	f000 80aa 	beq.w	80142a2 <_vfiprintf_r+0x20e>
 801414e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014150:	445a      	add	r2, fp
 8014152:	9209      	str	r2, [sp, #36]	; 0x24
 8014154:	f89a 3000 	ldrb.w	r3, [sl]
 8014158:	2b00      	cmp	r3, #0
 801415a:	f000 80a2 	beq.w	80142a2 <_vfiprintf_r+0x20e>
 801415e:	2300      	movs	r3, #0
 8014160:	f04f 32ff 	mov.w	r2, #4294967295
 8014164:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014168:	f10a 0a01 	add.w	sl, sl, #1
 801416c:	9304      	str	r3, [sp, #16]
 801416e:	9307      	str	r3, [sp, #28]
 8014170:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014174:	931a      	str	r3, [sp, #104]	; 0x68
 8014176:	4654      	mov	r4, sl
 8014178:	2205      	movs	r2, #5
 801417a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801417e:	4858      	ldr	r0, [pc, #352]	; (80142e0 <_vfiprintf_r+0x24c>)
 8014180:	f7ec f8b6 	bl	80002f0 <memchr>
 8014184:	9a04      	ldr	r2, [sp, #16]
 8014186:	b9d8      	cbnz	r0, 80141c0 <_vfiprintf_r+0x12c>
 8014188:	06d1      	lsls	r1, r2, #27
 801418a:	bf44      	itt	mi
 801418c:	2320      	movmi	r3, #32
 801418e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014192:	0713      	lsls	r3, r2, #28
 8014194:	bf44      	itt	mi
 8014196:	232b      	movmi	r3, #43	; 0x2b
 8014198:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801419c:	f89a 3000 	ldrb.w	r3, [sl]
 80141a0:	2b2a      	cmp	r3, #42	; 0x2a
 80141a2:	d015      	beq.n	80141d0 <_vfiprintf_r+0x13c>
 80141a4:	9a07      	ldr	r2, [sp, #28]
 80141a6:	4654      	mov	r4, sl
 80141a8:	2000      	movs	r0, #0
 80141aa:	f04f 0c0a 	mov.w	ip, #10
 80141ae:	4621      	mov	r1, r4
 80141b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80141b4:	3b30      	subs	r3, #48	; 0x30
 80141b6:	2b09      	cmp	r3, #9
 80141b8:	d94e      	bls.n	8014258 <_vfiprintf_r+0x1c4>
 80141ba:	b1b0      	cbz	r0, 80141ea <_vfiprintf_r+0x156>
 80141bc:	9207      	str	r2, [sp, #28]
 80141be:	e014      	b.n	80141ea <_vfiprintf_r+0x156>
 80141c0:	eba0 0308 	sub.w	r3, r0, r8
 80141c4:	fa09 f303 	lsl.w	r3, r9, r3
 80141c8:	4313      	orrs	r3, r2
 80141ca:	9304      	str	r3, [sp, #16]
 80141cc:	46a2      	mov	sl, r4
 80141ce:	e7d2      	b.n	8014176 <_vfiprintf_r+0xe2>
 80141d0:	9b03      	ldr	r3, [sp, #12]
 80141d2:	1d19      	adds	r1, r3, #4
 80141d4:	681b      	ldr	r3, [r3, #0]
 80141d6:	9103      	str	r1, [sp, #12]
 80141d8:	2b00      	cmp	r3, #0
 80141da:	bfbb      	ittet	lt
 80141dc:	425b      	neglt	r3, r3
 80141de:	f042 0202 	orrlt.w	r2, r2, #2
 80141e2:	9307      	strge	r3, [sp, #28]
 80141e4:	9307      	strlt	r3, [sp, #28]
 80141e6:	bfb8      	it	lt
 80141e8:	9204      	strlt	r2, [sp, #16]
 80141ea:	7823      	ldrb	r3, [r4, #0]
 80141ec:	2b2e      	cmp	r3, #46	; 0x2e
 80141ee:	d10c      	bne.n	801420a <_vfiprintf_r+0x176>
 80141f0:	7863      	ldrb	r3, [r4, #1]
 80141f2:	2b2a      	cmp	r3, #42	; 0x2a
 80141f4:	d135      	bne.n	8014262 <_vfiprintf_r+0x1ce>
 80141f6:	9b03      	ldr	r3, [sp, #12]
 80141f8:	1d1a      	adds	r2, r3, #4
 80141fa:	681b      	ldr	r3, [r3, #0]
 80141fc:	9203      	str	r2, [sp, #12]
 80141fe:	2b00      	cmp	r3, #0
 8014200:	bfb8      	it	lt
 8014202:	f04f 33ff 	movlt.w	r3, #4294967295
 8014206:	3402      	adds	r4, #2
 8014208:	9305      	str	r3, [sp, #20]
 801420a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80142f0 <_vfiprintf_r+0x25c>
 801420e:	7821      	ldrb	r1, [r4, #0]
 8014210:	2203      	movs	r2, #3
 8014212:	4650      	mov	r0, sl
 8014214:	f7ec f86c 	bl	80002f0 <memchr>
 8014218:	b140      	cbz	r0, 801422c <_vfiprintf_r+0x198>
 801421a:	2340      	movs	r3, #64	; 0x40
 801421c:	eba0 000a 	sub.w	r0, r0, sl
 8014220:	fa03 f000 	lsl.w	r0, r3, r0
 8014224:	9b04      	ldr	r3, [sp, #16]
 8014226:	4303      	orrs	r3, r0
 8014228:	3401      	adds	r4, #1
 801422a:	9304      	str	r3, [sp, #16]
 801422c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014230:	482c      	ldr	r0, [pc, #176]	; (80142e4 <_vfiprintf_r+0x250>)
 8014232:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014236:	2206      	movs	r2, #6
 8014238:	f7ec f85a 	bl	80002f0 <memchr>
 801423c:	2800      	cmp	r0, #0
 801423e:	d03f      	beq.n	80142c0 <_vfiprintf_r+0x22c>
 8014240:	4b29      	ldr	r3, [pc, #164]	; (80142e8 <_vfiprintf_r+0x254>)
 8014242:	bb1b      	cbnz	r3, 801428c <_vfiprintf_r+0x1f8>
 8014244:	9b03      	ldr	r3, [sp, #12]
 8014246:	3307      	adds	r3, #7
 8014248:	f023 0307 	bic.w	r3, r3, #7
 801424c:	3308      	adds	r3, #8
 801424e:	9303      	str	r3, [sp, #12]
 8014250:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014252:	443b      	add	r3, r7
 8014254:	9309      	str	r3, [sp, #36]	; 0x24
 8014256:	e767      	b.n	8014128 <_vfiprintf_r+0x94>
 8014258:	fb0c 3202 	mla	r2, ip, r2, r3
 801425c:	460c      	mov	r4, r1
 801425e:	2001      	movs	r0, #1
 8014260:	e7a5      	b.n	80141ae <_vfiprintf_r+0x11a>
 8014262:	2300      	movs	r3, #0
 8014264:	3401      	adds	r4, #1
 8014266:	9305      	str	r3, [sp, #20]
 8014268:	4619      	mov	r1, r3
 801426a:	f04f 0c0a 	mov.w	ip, #10
 801426e:	4620      	mov	r0, r4
 8014270:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014274:	3a30      	subs	r2, #48	; 0x30
 8014276:	2a09      	cmp	r2, #9
 8014278:	d903      	bls.n	8014282 <_vfiprintf_r+0x1ee>
 801427a:	2b00      	cmp	r3, #0
 801427c:	d0c5      	beq.n	801420a <_vfiprintf_r+0x176>
 801427e:	9105      	str	r1, [sp, #20]
 8014280:	e7c3      	b.n	801420a <_vfiprintf_r+0x176>
 8014282:	fb0c 2101 	mla	r1, ip, r1, r2
 8014286:	4604      	mov	r4, r0
 8014288:	2301      	movs	r3, #1
 801428a:	e7f0      	b.n	801426e <_vfiprintf_r+0x1da>
 801428c:	ab03      	add	r3, sp, #12
 801428e:	9300      	str	r3, [sp, #0]
 8014290:	462a      	mov	r2, r5
 8014292:	4b16      	ldr	r3, [pc, #88]	; (80142ec <_vfiprintf_r+0x258>)
 8014294:	a904      	add	r1, sp, #16
 8014296:	4630      	mov	r0, r6
 8014298:	f7fe f912 	bl	80124c0 <_printf_float>
 801429c:	4607      	mov	r7, r0
 801429e:	1c78      	adds	r0, r7, #1
 80142a0:	d1d6      	bne.n	8014250 <_vfiprintf_r+0x1bc>
 80142a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80142a4:	07d9      	lsls	r1, r3, #31
 80142a6:	d405      	bmi.n	80142b4 <_vfiprintf_r+0x220>
 80142a8:	89ab      	ldrh	r3, [r5, #12]
 80142aa:	059a      	lsls	r2, r3, #22
 80142ac:	d402      	bmi.n	80142b4 <_vfiprintf_r+0x220>
 80142ae:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80142b0:	f7ff feb4 	bl	801401c <__retarget_lock_release_recursive>
 80142b4:	89ab      	ldrh	r3, [r5, #12]
 80142b6:	065b      	lsls	r3, r3, #25
 80142b8:	f53f af12 	bmi.w	80140e0 <_vfiprintf_r+0x4c>
 80142bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80142be:	e711      	b.n	80140e4 <_vfiprintf_r+0x50>
 80142c0:	ab03      	add	r3, sp, #12
 80142c2:	9300      	str	r3, [sp, #0]
 80142c4:	462a      	mov	r2, r5
 80142c6:	4b09      	ldr	r3, [pc, #36]	; (80142ec <_vfiprintf_r+0x258>)
 80142c8:	a904      	add	r1, sp, #16
 80142ca:	4630      	mov	r0, r6
 80142cc:	f7fe fb84 	bl	80129d8 <_printf_i>
 80142d0:	e7e4      	b.n	801429c <_vfiprintf_r+0x208>
 80142d2:	bf00      	nop
 80142d4:	08016c84 	.word	0x08016c84
 80142d8:	08016ca4 	.word	0x08016ca4
 80142dc:	08016c64 	.word	0x08016c64
 80142e0:	08016b52 	.word	0x08016b52
 80142e4:	08016b5c 	.word	0x08016b5c
 80142e8:	080124c1 	.word	0x080124c1
 80142ec:	08014071 	.word	0x08014071
 80142f0:	08016b58 	.word	0x08016b58

080142f4 <__swbuf_r>:
 80142f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80142f6:	460e      	mov	r6, r1
 80142f8:	4614      	mov	r4, r2
 80142fa:	4605      	mov	r5, r0
 80142fc:	b118      	cbz	r0, 8014306 <__swbuf_r+0x12>
 80142fe:	6983      	ldr	r3, [r0, #24]
 8014300:	b90b      	cbnz	r3, 8014306 <__swbuf_r+0x12>
 8014302:	f000 f9e7 	bl	80146d4 <__sinit>
 8014306:	4b21      	ldr	r3, [pc, #132]	; (801438c <__swbuf_r+0x98>)
 8014308:	429c      	cmp	r4, r3
 801430a:	d12b      	bne.n	8014364 <__swbuf_r+0x70>
 801430c:	686c      	ldr	r4, [r5, #4]
 801430e:	69a3      	ldr	r3, [r4, #24]
 8014310:	60a3      	str	r3, [r4, #8]
 8014312:	89a3      	ldrh	r3, [r4, #12]
 8014314:	071a      	lsls	r2, r3, #28
 8014316:	d52f      	bpl.n	8014378 <__swbuf_r+0x84>
 8014318:	6923      	ldr	r3, [r4, #16]
 801431a:	b36b      	cbz	r3, 8014378 <__swbuf_r+0x84>
 801431c:	6923      	ldr	r3, [r4, #16]
 801431e:	6820      	ldr	r0, [r4, #0]
 8014320:	1ac0      	subs	r0, r0, r3
 8014322:	6963      	ldr	r3, [r4, #20]
 8014324:	b2f6      	uxtb	r6, r6
 8014326:	4283      	cmp	r3, r0
 8014328:	4637      	mov	r7, r6
 801432a:	dc04      	bgt.n	8014336 <__swbuf_r+0x42>
 801432c:	4621      	mov	r1, r4
 801432e:	4628      	mov	r0, r5
 8014330:	f000 f93c 	bl	80145ac <_fflush_r>
 8014334:	bb30      	cbnz	r0, 8014384 <__swbuf_r+0x90>
 8014336:	68a3      	ldr	r3, [r4, #8]
 8014338:	3b01      	subs	r3, #1
 801433a:	60a3      	str	r3, [r4, #8]
 801433c:	6823      	ldr	r3, [r4, #0]
 801433e:	1c5a      	adds	r2, r3, #1
 8014340:	6022      	str	r2, [r4, #0]
 8014342:	701e      	strb	r6, [r3, #0]
 8014344:	6963      	ldr	r3, [r4, #20]
 8014346:	3001      	adds	r0, #1
 8014348:	4283      	cmp	r3, r0
 801434a:	d004      	beq.n	8014356 <__swbuf_r+0x62>
 801434c:	89a3      	ldrh	r3, [r4, #12]
 801434e:	07db      	lsls	r3, r3, #31
 8014350:	d506      	bpl.n	8014360 <__swbuf_r+0x6c>
 8014352:	2e0a      	cmp	r6, #10
 8014354:	d104      	bne.n	8014360 <__swbuf_r+0x6c>
 8014356:	4621      	mov	r1, r4
 8014358:	4628      	mov	r0, r5
 801435a:	f000 f927 	bl	80145ac <_fflush_r>
 801435e:	b988      	cbnz	r0, 8014384 <__swbuf_r+0x90>
 8014360:	4638      	mov	r0, r7
 8014362:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014364:	4b0a      	ldr	r3, [pc, #40]	; (8014390 <__swbuf_r+0x9c>)
 8014366:	429c      	cmp	r4, r3
 8014368:	d101      	bne.n	801436e <__swbuf_r+0x7a>
 801436a:	68ac      	ldr	r4, [r5, #8]
 801436c:	e7cf      	b.n	801430e <__swbuf_r+0x1a>
 801436e:	4b09      	ldr	r3, [pc, #36]	; (8014394 <__swbuf_r+0xa0>)
 8014370:	429c      	cmp	r4, r3
 8014372:	bf08      	it	eq
 8014374:	68ec      	ldreq	r4, [r5, #12]
 8014376:	e7ca      	b.n	801430e <__swbuf_r+0x1a>
 8014378:	4621      	mov	r1, r4
 801437a:	4628      	mov	r0, r5
 801437c:	f000 f81a 	bl	80143b4 <__swsetup_r>
 8014380:	2800      	cmp	r0, #0
 8014382:	d0cb      	beq.n	801431c <__swbuf_r+0x28>
 8014384:	f04f 37ff 	mov.w	r7, #4294967295
 8014388:	e7ea      	b.n	8014360 <__swbuf_r+0x6c>
 801438a:	bf00      	nop
 801438c:	08016c84 	.word	0x08016c84
 8014390:	08016ca4 	.word	0x08016ca4
 8014394:	08016c64 	.word	0x08016c64

08014398 <__ascii_wctomb>:
 8014398:	b149      	cbz	r1, 80143ae <__ascii_wctomb+0x16>
 801439a:	2aff      	cmp	r2, #255	; 0xff
 801439c:	bf85      	ittet	hi
 801439e:	238a      	movhi	r3, #138	; 0x8a
 80143a0:	6003      	strhi	r3, [r0, #0]
 80143a2:	700a      	strbls	r2, [r1, #0]
 80143a4:	f04f 30ff 	movhi.w	r0, #4294967295
 80143a8:	bf98      	it	ls
 80143aa:	2001      	movls	r0, #1
 80143ac:	4770      	bx	lr
 80143ae:	4608      	mov	r0, r1
 80143b0:	4770      	bx	lr
	...

080143b4 <__swsetup_r>:
 80143b4:	4b32      	ldr	r3, [pc, #200]	; (8014480 <__swsetup_r+0xcc>)
 80143b6:	b570      	push	{r4, r5, r6, lr}
 80143b8:	681d      	ldr	r5, [r3, #0]
 80143ba:	4606      	mov	r6, r0
 80143bc:	460c      	mov	r4, r1
 80143be:	b125      	cbz	r5, 80143ca <__swsetup_r+0x16>
 80143c0:	69ab      	ldr	r3, [r5, #24]
 80143c2:	b913      	cbnz	r3, 80143ca <__swsetup_r+0x16>
 80143c4:	4628      	mov	r0, r5
 80143c6:	f000 f985 	bl	80146d4 <__sinit>
 80143ca:	4b2e      	ldr	r3, [pc, #184]	; (8014484 <__swsetup_r+0xd0>)
 80143cc:	429c      	cmp	r4, r3
 80143ce:	d10f      	bne.n	80143f0 <__swsetup_r+0x3c>
 80143d0:	686c      	ldr	r4, [r5, #4]
 80143d2:	89a3      	ldrh	r3, [r4, #12]
 80143d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80143d8:	0719      	lsls	r1, r3, #28
 80143da:	d42c      	bmi.n	8014436 <__swsetup_r+0x82>
 80143dc:	06dd      	lsls	r5, r3, #27
 80143de:	d411      	bmi.n	8014404 <__swsetup_r+0x50>
 80143e0:	2309      	movs	r3, #9
 80143e2:	6033      	str	r3, [r6, #0]
 80143e4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80143e8:	81a3      	strh	r3, [r4, #12]
 80143ea:	f04f 30ff 	mov.w	r0, #4294967295
 80143ee:	e03e      	b.n	801446e <__swsetup_r+0xba>
 80143f0:	4b25      	ldr	r3, [pc, #148]	; (8014488 <__swsetup_r+0xd4>)
 80143f2:	429c      	cmp	r4, r3
 80143f4:	d101      	bne.n	80143fa <__swsetup_r+0x46>
 80143f6:	68ac      	ldr	r4, [r5, #8]
 80143f8:	e7eb      	b.n	80143d2 <__swsetup_r+0x1e>
 80143fa:	4b24      	ldr	r3, [pc, #144]	; (801448c <__swsetup_r+0xd8>)
 80143fc:	429c      	cmp	r4, r3
 80143fe:	bf08      	it	eq
 8014400:	68ec      	ldreq	r4, [r5, #12]
 8014402:	e7e6      	b.n	80143d2 <__swsetup_r+0x1e>
 8014404:	0758      	lsls	r0, r3, #29
 8014406:	d512      	bpl.n	801442e <__swsetup_r+0x7a>
 8014408:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801440a:	b141      	cbz	r1, 801441e <__swsetup_r+0x6a>
 801440c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014410:	4299      	cmp	r1, r3
 8014412:	d002      	beq.n	801441a <__swsetup_r+0x66>
 8014414:	4630      	mov	r0, r6
 8014416:	f7fd fee1 	bl	80121dc <_free_r>
 801441a:	2300      	movs	r3, #0
 801441c:	6363      	str	r3, [r4, #52]	; 0x34
 801441e:	89a3      	ldrh	r3, [r4, #12]
 8014420:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014424:	81a3      	strh	r3, [r4, #12]
 8014426:	2300      	movs	r3, #0
 8014428:	6063      	str	r3, [r4, #4]
 801442a:	6923      	ldr	r3, [r4, #16]
 801442c:	6023      	str	r3, [r4, #0]
 801442e:	89a3      	ldrh	r3, [r4, #12]
 8014430:	f043 0308 	orr.w	r3, r3, #8
 8014434:	81a3      	strh	r3, [r4, #12]
 8014436:	6923      	ldr	r3, [r4, #16]
 8014438:	b94b      	cbnz	r3, 801444e <__swsetup_r+0x9a>
 801443a:	89a3      	ldrh	r3, [r4, #12]
 801443c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014440:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014444:	d003      	beq.n	801444e <__swsetup_r+0x9a>
 8014446:	4621      	mov	r1, r4
 8014448:	4630      	mov	r0, r6
 801444a:	f000 fa05 	bl	8014858 <__smakebuf_r>
 801444e:	89a0      	ldrh	r0, [r4, #12]
 8014450:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014454:	f010 0301 	ands.w	r3, r0, #1
 8014458:	d00a      	beq.n	8014470 <__swsetup_r+0xbc>
 801445a:	2300      	movs	r3, #0
 801445c:	60a3      	str	r3, [r4, #8]
 801445e:	6963      	ldr	r3, [r4, #20]
 8014460:	425b      	negs	r3, r3
 8014462:	61a3      	str	r3, [r4, #24]
 8014464:	6923      	ldr	r3, [r4, #16]
 8014466:	b943      	cbnz	r3, 801447a <__swsetup_r+0xc6>
 8014468:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801446c:	d1ba      	bne.n	80143e4 <__swsetup_r+0x30>
 801446e:	bd70      	pop	{r4, r5, r6, pc}
 8014470:	0781      	lsls	r1, r0, #30
 8014472:	bf58      	it	pl
 8014474:	6963      	ldrpl	r3, [r4, #20]
 8014476:	60a3      	str	r3, [r4, #8]
 8014478:	e7f4      	b.n	8014464 <__swsetup_r+0xb0>
 801447a:	2000      	movs	r0, #0
 801447c:	e7f7      	b.n	801446e <__swsetup_r+0xba>
 801447e:	bf00      	nop
 8014480:	240006fc 	.word	0x240006fc
 8014484:	08016c84 	.word	0x08016c84
 8014488:	08016ca4 	.word	0x08016ca4
 801448c:	08016c64 	.word	0x08016c64

08014490 <abort>:
 8014490:	b508      	push	{r3, lr}
 8014492:	2006      	movs	r0, #6
 8014494:	f000 fa48 	bl	8014928 <raise>
 8014498:	2001      	movs	r0, #1
 801449a:	f000 feed 	bl	8015278 <_exit>
	...

080144a0 <__sflush_r>:
 80144a0:	898a      	ldrh	r2, [r1, #12]
 80144a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80144a6:	4605      	mov	r5, r0
 80144a8:	0710      	lsls	r0, r2, #28
 80144aa:	460c      	mov	r4, r1
 80144ac:	d458      	bmi.n	8014560 <__sflush_r+0xc0>
 80144ae:	684b      	ldr	r3, [r1, #4]
 80144b0:	2b00      	cmp	r3, #0
 80144b2:	dc05      	bgt.n	80144c0 <__sflush_r+0x20>
 80144b4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80144b6:	2b00      	cmp	r3, #0
 80144b8:	dc02      	bgt.n	80144c0 <__sflush_r+0x20>
 80144ba:	2000      	movs	r0, #0
 80144bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80144c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80144c2:	2e00      	cmp	r6, #0
 80144c4:	d0f9      	beq.n	80144ba <__sflush_r+0x1a>
 80144c6:	2300      	movs	r3, #0
 80144c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80144cc:	682f      	ldr	r7, [r5, #0]
 80144ce:	602b      	str	r3, [r5, #0]
 80144d0:	d032      	beq.n	8014538 <__sflush_r+0x98>
 80144d2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80144d4:	89a3      	ldrh	r3, [r4, #12]
 80144d6:	075a      	lsls	r2, r3, #29
 80144d8:	d505      	bpl.n	80144e6 <__sflush_r+0x46>
 80144da:	6863      	ldr	r3, [r4, #4]
 80144dc:	1ac0      	subs	r0, r0, r3
 80144de:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80144e0:	b10b      	cbz	r3, 80144e6 <__sflush_r+0x46>
 80144e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80144e4:	1ac0      	subs	r0, r0, r3
 80144e6:	2300      	movs	r3, #0
 80144e8:	4602      	mov	r2, r0
 80144ea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80144ec:	6a21      	ldr	r1, [r4, #32]
 80144ee:	4628      	mov	r0, r5
 80144f0:	47b0      	blx	r6
 80144f2:	1c43      	adds	r3, r0, #1
 80144f4:	89a3      	ldrh	r3, [r4, #12]
 80144f6:	d106      	bne.n	8014506 <__sflush_r+0x66>
 80144f8:	6829      	ldr	r1, [r5, #0]
 80144fa:	291d      	cmp	r1, #29
 80144fc:	d82c      	bhi.n	8014558 <__sflush_r+0xb8>
 80144fe:	4a2a      	ldr	r2, [pc, #168]	; (80145a8 <__sflush_r+0x108>)
 8014500:	40ca      	lsrs	r2, r1
 8014502:	07d6      	lsls	r6, r2, #31
 8014504:	d528      	bpl.n	8014558 <__sflush_r+0xb8>
 8014506:	2200      	movs	r2, #0
 8014508:	6062      	str	r2, [r4, #4]
 801450a:	04d9      	lsls	r1, r3, #19
 801450c:	6922      	ldr	r2, [r4, #16]
 801450e:	6022      	str	r2, [r4, #0]
 8014510:	d504      	bpl.n	801451c <__sflush_r+0x7c>
 8014512:	1c42      	adds	r2, r0, #1
 8014514:	d101      	bne.n	801451a <__sflush_r+0x7a>
 8014516:	682b      	ldr	r3, [r5, #0]
 8014518:	b903      	cbnz	r3, 801451c <__sflush_r+0x7c>
 801451a:	6560      	str	r0, [r4, #84]	; 0x54
 801451c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801451e:	602f      	str	r7, [r5, #0]
 8014520:	2900      	cmp	r1, #0
 8014522:	d0ca      	beq.n	80144ba <__sflush_r+0x1a>
 8014524:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014528:	4299      	cmp	r1, r3
 801452a:	d002      	beq.n	8014532 <__sflush_r+0x92>
 801452c:	4628      	mov	r0, r5
 801452e:	f7fd fe55 	bl	80121dc <_free_r>
 8014532:	2000      	movs	r0, #0
 8014534:	6360      	str	r0, [r4, #52]	; 0x34
 8014536:	e7c1      	b.n	80144bc <__sflush_r+0x1c>
 8014538:	6a21      	ldr	r1, [r4, #32]
 801453a:	2301      	movs	r3, #1
 801453c:	4628      	mov	r0, r5
 801453e:	47b0      	blx	r6
 8014540:	1c41      	adds	r1, r0, #1
 8014542:	d1c7      	bne.n	80144d4 <__sflush_r+0x34>
 8014544:	682b      	ldr	r3, [r5, #0]
 8014546:	2b00      	cmp	r3, #0
 8014548:	d0c4      	beq.n	80144d4 <__sflush_r+0x34>
 801454a:	2b1d      	cmp	r3, #29
 801454c:	d001      	beq.n	8014552 <__sflush_r+0xb2>
 801454e:	2b16      	cmp	r3, #22
 8014550:	d101      	bne.n	8014556 <__sflush_r+0xb6>
 8014552:	602f      	str	r7, [r5, #0]
 8014554:	e7b1      	b.n	80144ba <__sflush_r+0x1a>
 8014556:	89a3      	ldrh	r3, [r4, #12]
 8014558:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801455c:	81a3      	strh	r3, [r4, #12]
 801455e:	e7ad      	b.n	80144bc <__sflush_r+0x1c>
 8014560:	690f      	ldr	r7, [r1, #16]
 8014562:	2f00      	cmp	r7, #0
 8014564:	d0a9      	beq.n	80144ba <__sflush_r+0x1a>
 8014566:	0793      	lsls	r3, r2, #30
 8014568:	680e      	ldr	r6, [r1, #0]
 801456a:	bf08      	it	eq
 801456c:	694b      	ldreq	r3, [r1, #20]
 801456e:	600f      	str	r7, [r1, #0]
 8014570:	bf18      	it	ne
 8014572:	2300      	movne	r3, #0
 8014574:	eba6 0807 	sub.w	r8, r6, r7
 8014578:	608b      	str	r3, [r1, #8]
 801457a:	f1b8 0f00 	cmp.w	r8, #0
 801457e:	dd9c      	ble.n	80144ba <__sflush_r+0x1a>
 8014580:	6a21      	ldr	r1, [r4, #32]
 8014582:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014584:	4643      	mov	r3, r8
 8014586:	463a      	mov	r2, r7
 8014588:	4628      	mov	r0, r5
 801458a:	47b0      	blx	r6
 801458c:	2800      	cmp	r0, #0
 801458e:	dc06      	bgt.n	801459e <__sflush_r+0xfe>
 8014590:	89a3      	ldrh	r3, [r4, #12]
 8014592:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014596:	81a3      	strh	r3, [r4, #12]
 8014598:	f04f 30ff 	mov.w	r0, #4294967295
 801459c:	e78e      	b.n	80144bc <__sflush_r+0x1c>
 801459e:	4407      	add	r7, r0
 80145a0:	eba8 0800 	sub.w	r8, r8, r0
 80145a4:	e7e9      	b.n	801457a <__sflush_r+0xda>
 80145a6:	bf00      	nop
 80145a8:	20400001 	.word	0x20400001

080145ac <_fflush_r>:
 80145ac:	b538      	push	{r3, r4, r5, lr}
 80145ae:	690b      	ldr	r3, [r1, #16]
 80145b0:	4605      	mov	r5, r0
 80145b2:	460c      	mov	r4, r1
 80145b4:	b913      	cbnz	r3, 80145bc <_fflush_r+0x10>
 80145b6:	2500      	movs	r5, #0
 80145b8:	4628      	mov	r0, r5
 80145ba:	bd38      	pop	{r3, r4, r5, pc}
 80145bc:	b118      	cbz	r0, 80145c6 <_fflush_r+0x1a>
 80145be:	6983      	ldr	r3, [r0, #24]
 80145c0:	b90b      	cbnz	r3, 80145c6 <_fflush_r+0x1a>
 80145c2:	f000 f887 	bl	80146d4 <__sinit>
 80145c6:	4b14      	ldr	r3, [pc, #80]	; (8014618 <_fflush_r+0x6c>)
 80145c8:	429c      	cmp	r4, r3
 80145ca:	d11b      	bne.n	8014604 <_fflush_r+0x58>
 80145cc:	686c      	ldr	r4, [r5, #4]
 80145ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80145d2:	2b00      	cmp	r3, #0
 80145d4:	d0ef      	beq.n	80145b6 <_fflush_r+0xa>
 80145d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80145d8:	07d0      	lsls	r0, r2, #31
 80145da:	d404      	bmi.n	80145e6 <_fflush_r+0x3a>
 80145dc:	0599      	lsls	r1, r3, #22
 80145de:	d402      	bmi.n	80145e6 <_fflush_r+0x3a>
 80145e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80145e2:	f7ff fd1a 	bl	801401a <__retarget_lock_acquire_recursive>
 80145e6:	4628      	mov	r0, r5
 80145e8:	4621      	mov	r1, r4
 80145ea:	f7ff ff59 	bl	80144a0 <__sflush_r>
 80145ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80145f0:	07da      	lsls	r2, r3, #31
 80145f2:	4605      	mov	r5, r0
 80145f4:	d4e0      	bmi.n	80145b8 <_fflush_r+0xc>
 80145f6:	89a3      	ldrh	r3, [r4, #12]
 80145f8:	059b      	lsls	r3, r3, #22
 80145fa:	d4dd      	bmi.n	80145b8 <_fflush_r+0xc>
 80145fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80145fe:	f7ff fd0d 	bl	801401c <__retarget_lock_release_recursive>
 8014602:	e7d9      	b.n	80145b8 <_fflush_r+0xc>
 8014604:	4b05      	ldr	r3, [pc, #20]	; (801461c <_fflush_r+0x70>)
 8014606:	429c      	cmp	r4, r3
 8014608:	d101      	bne.n	801460e <_fflush_r+0x62>
 801460a:	68ac      	ldr	r4, [r5, #8]
 801460c:	e7df      	b.n	80145ce <_fflush_r+0x22>
 801460e:	4b04      	ldr	r3, [pc, #16]	; (8014620 <_fflush_r+0x74>)
 8014610:	429c      	cmp	r4, r3
 8014612:	bf08      	it	eq
 8014614:	68ec      	ldreq	r4, [r5, #12]
 8014616:	e7da      	b.n	80145ce <_fflush_r+0x22>
 8014618:	08016c84 	.word	0x08016c84
 801461c:	08016ca4 	.word	0x08016ca4
 8014620:	08016c64 	.word	0x08016c64

08014624 <std>:
 8014624:	2300      	movs	r3, #0
 8014626:	b510      	push	{r4, lr}
 8014628:	4604      	mov	r4, r0
 801462a:	e9c0 3300 	strd	r3, r3, [r0]
 801462e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014632:	6083      	str	r3, [r0, #8]
 8014634:	8181      	strh	r1, [r0, #12]
 8014636:	6643      	str	r3, [r0, #100]	; 0x64
 8014638:	81c2      	strh	r2, [r0, #14]
 801463a:	6183      	str	r3, [r0, #24]
 801463c:	4619      	mov	r1, r3
 801463e:	2208      	movs	r2, #8
 8014640:	305c      	adds	r0, #92	; 0x5c
 8014642:	f7fd fdc3 	bl	80121cc <memset>
 8014646:	4b05      	ldr	r3, [pc, #20]	; (801465c <std+0x38>)
 8014648:	6263      	str	r3, [r4, #36]	; 0x24
 801464a:	4b05      	ldr	r3, [pc, #20]	; (8014660 <std+0x3c>)
 801464c:	62a3      	str	r3, [r4, #40]	; 0x28
 801464e:	4b05      	ldr	r3, [pc, #20]	; (8014664 <std+0x40>)
 8014650:	62e3      	str	r3, [r4, #44]	; 0x2c
 8014652:	4b05      	ldr	r3, [pc, #20]	; (8014668 <std+0x44>)
 8014654:	6224      	str	r4, [r4, #32]
 8014656:	6323      	str	r3, [r4, #48]	; 0x30
 8014658:	bd10      	pop	{r4, pc}
 801465a:	bf00      	nop
 801465c:	08014961 	.word	0x08014961
 8014660:	08014983 	.word	0x08014983
 8014664:	080149bb 	.word	0x080149bb
 8014668:	080149df 	.word	0x080149df

0801466c <_cleanup_r>:
 801466c:	4901      	ldr	r1, [pc, #4]	; (8014674 <_cleanup_r+0x8>)
 801466e:	f000 b8af 	b.w	80147d0 <_fwalk_reent>
 8014672:	bf00      	nop
 8014674:	080145ad 	.word	0x080145ad

08014678 <__sfmoreglue>:
 8014678:	b570      	push	{r4, r5, r6, lr}
 801467a:	2268      	movs	r2, #104	; 0x68
 801467c:	1e4d      	subs	r5, r1, #1
 801467e:	4355      	muls	r5, r2
 8014680:	460e      	mov	r6, r1
 8014682:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8014686:	f7fd fe15 	bl	80122b4 <_malloc_r>
 801468a:	4604      	mov	r4, r0
 801468c:	b140      	cbz	r0, 80146a0 <__sfmoreglue+0x28>
 801468e:	2100      	movs	r1, #0
 8014690:	e9c0 1600 	strd	r1, r6, [r0]
 8014694:	300c      	adds	r0, #12
 8014696:	60a0      	str	r0, [r4, #8]
 8014698:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801469c:	f7fd fd96 	bl	80121cc <memset>
 80146a0:	4620      	mov	r0, r4
 80146a2:	bd70      	pop	{r4, r5, r6, pc}

080146a4 <__sfp_lock_acquire>:
 80146a4:	4801      	ldr	r0, [pc, #4]	; (80146ac <__sfp_lock_acquire+0x8>)
 80146a6:	f7ff bcb8 	b.w	801401a <__retarget_lock_acquire_recursive>
 80146aa:	bf00      	nop
 80146ac:	24001ea5 	.word	0x24001ea5

080146b0 <__sfp_lock_release>:
 80146b0:	4801      	ldr	r0, [pc, #4]	; (80146b8 <__sfp_lock_release+0x8>)
 80146b2:	f7ff bcb3 	b.w	801401c <__retarget_lock_release_recursive>
 80146b6:	bf00      	nop
 80146b8:	24001ea5 	.word	0x24001ea5

080146bc <__sinit_lock_acquire>:
 80146bc:	4801      	ldr	r0, [pc, #4]	; (80146c4 <__sinit_lock_acquire+0x8>)
 80146be:	f7ff bcac 	b.w	801401a <__retarget_lock_acquire_recursive>
 80146c2:	bf00      	nop
 80146c4:	24001ea6 	.word	0x24001ea6

080146c8 <__sinit_lock_release>:
 80146c8:	4801      	ldr	r0, [pc, #4]	; (80146d0 <__sinit_lock_release+0x8>)
 80146ca:	f7ff bca7 	b.w	801401c <__retarget_lock_release_recursive>
 80146ce:	bf00      	nop
 80146d0:	24001ea6 	.word	0x24001ea6

080146d4 <__sinit>:
 80146d4:	b510      	push	{r4, lr}
 80146d6:	4604      	mov	r4, r0
 80146d8:	f7ff fff0 	bl	80146bc <__sinit_lock_acquire>
 80146dc:	69a3      	ldr	r3, [r4, #24]
 80146de:	b11b      	cbz	r3, 80146e8 <__sinit+0x14>
 80146e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80146e4:	f7ff bff0 	b.w	80146c8 <__sinit_lock_release>
 80146e8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80146ec:	6523      	str	r3, [r4, #80]	; 0x50
 80146ee:	4b13      	ldr	r3, [pc, #76]	; (801473c <__sinit+0x68>)
 80146f0:	4a13      	ldr	r2, [pc, #76]	; (8014740 <__sinit+0x6c>)
 80146f2:	681b      	ldr	r3, [r3, #0]
 80146f4:	62a2      	str	r2, [r4, #40]	; 0x28
 80146f6:	42a3      	cmp	r3, r4
 80146f8:	bf04      	itt	eq
 80146fa:	2301      	moveq	r3, #1
 80146fc:	61a3      	streq	r3, [r4, #24]
 80146fe:	4620      	mov	r0, r4
 8014700:	f000 f820 	bl	8014744 <__sfp>
 8014704:	6060      	str	r0, [r4, #4]
 8014706:	4620      	mov	r0, r4
 8014708:	f000 f81c 	bl	8014744 <__sfp>
 801470c:	60a0      	str	r0, [r4, #8]
 801470e:	4620      	mov	r0, r4
 8014710:	f000 f818 	bl	8014744 <__sfp>
 8014714:	2200      	movs	r2, #0
 8014716:	60e0      	str	r0, [r4, #12]
 8014718:	2104      	movs	r1, #4
 801471a:	6860      	ldr	r0, [r4, #4]
 801471c:	f7ff ff82 	bl	8014624 <std>
 8014720:	68a0      	ldr	r0, [r4, #8]
 8014722:	2201      	movs	r2, #1
 8014724:	2109      	movs	r1, #9
 8014726:	f7ff ff7d 	bl	8014624 <std>
 801472a:	68e0      	ldr	r0, [r4, #12]
 801472c:	2202      	movs	r2, #2
 801472e:	2112      	movs	r1, #18
 8014730:	f7ff ff78 	bl	8014624 <std>
 8014734:	2301      	movs	r3, #1
 8014736:	61a3      	str	r3, [r4, #24]
 8014738:	e7d2      	b.n	80146e0 <__sinit+0xc>
 801473a:	bf00      	nop
 801473c:	080168e8 	.word	0x080168e8
 8014740:	0801466d 	.word	0x0801466d

08014744 <__sfp>:
 8014744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014746:	4607      	mov	r7, r0
 8014748:	f7ff ffac 	bl	80146a4 <__sfp_lock_acquire>
 801474c:	4b1e      	ldr	r3, [pc, #120]	; (80147c8 <__sfp+0x84>)
 801474e:	681e      	ldr	r6, [r3, #0]
 8014750:	69b3      	ldr	r3, [r6, #24]
 8014752:	b913      	cbnz	r3, 801475a <__sfp+0x16>
 8014754:	4630      	mov	r0, r6
 8014756:	f7ff ffbd 	bl	80146d4 <__sinit>
 801475a:	3648      	adds	r6, #72	; 0x48
 801475c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8014760:	3b01      	subs	r3, #1
 8014762:	d503      	bpl.n	801476c <__sfp+0x28>
 8014764:	6833      	ldr	r3, [r6, #0]
 8014766:	b30b      	cbz	r3, 80147ac <__sfp+0x68>
 8014768:	6836      	ldr	r6, [r6, #0]
 801476a:	e7f7      	b.n	801475c <__sfp+0x18>
 801476c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8014770:	b9d5      	cbnz	r5, 80147a8 <__sfp+0x64>
 8014772:	4b16      	ldr	r3, [pc, #88]	; (80147cc <__sfp+0x88>)
 8014774:	60e3      	str	r3, [r4, #12]
 8014776:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801477a:	6665      	str	r5, [r4, #100]	; 0x64
 801477c:	f7ff fc4c 	bl	8014018 <__retarget_lock_init_recursive>
 8014780:	f7ff ff96 	bl	80146b0 <__sfp_lock_release>
 8014784:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8014788:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801478c:	6025      	str	r5, [r4, #0]
 801478e:	61a5      	str	r5, [r4, #24]
 8014790:	2208      	movs	r2, #8
 8014792:	4629      	mov	r1, r5
 8014794:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8014798:	f7fd fd18 	bl	80121cc <memset>
 801479c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80147a0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80147a4:	4620      	mov	r0, r4
 80147a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80147a8:	3468      	adds	r4, #104	; 0x68
 80147aa:	e7d9      	b.n	8014760 <__sfp+0x1c>
 80147ac:	2104      	movs	r1, #4
 80147ae:	4638      	mov	r0, r7
 80147b0:	f7ff ff62 	bl	8014678 <__sfmoreglue>
 80147b4:	4604      	mov	r4, r0
 80147b6:	6030      	str	r0, [r6, #0]
 80147b8:	2800      	cmp	r0, #0
 80147ba:	d1d5      	bne.n	8014768 <__sfp+0x24>
 80147bc:	f7ff ff78 	bl	80146b0 <__sfp_lock_release>
 80147c0:	230c      	movs	r3, #12
 80147c2:	603b      	str	r3, [r7, #0]
 80147c4:	e7ee      	b.n	80147a4 <__sfp+0x60>
 80147c6:	bf00      	nop
 80147c8:	080168e8 	.word	0x080168e8
 80147cc:	ffff0001 	.word	0xffff0001

080147d0 <_fwalk_reent>:
 80147d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80147d4:	4606      	mov	r6, r0
 80147d6:	4688      	mov	r8, r1
 80147d8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80147dc:	2700      	movs	r7, #0
 80147de:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80147e2:	f1b9 0901 	subs.w	r9, r9, #1
 80147e6:	d505      	bpl.n	80147f4 <_fwalk_reent+0x24>
 80147e8:	6824      	ldr	r4, [r4, #0]
 80147ea:	2c00      	cmp	r4, #0
 80147ec:	d1f7      	bne.n	80147de <_fwalk_reent+0xe>
 80147ee:	4638      	mov	r0, r7
 80147f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80147f4:	89ab      	ldrh	r3, [r5, #12]
 80147f6:	2b01      	cmp	r3, #1
 80147f8:	d907      	bls.n	801480a <_fwalk_reent+0x3a>
 80147fa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80147fe:	3301      	adds	r3, #1
 8014800:	d003      	beq.n	801480a <_fwalk_reent+0x3a>
 8014802:	4629      	mov	r1, r5
 8014804:	4630      	mov	r0, r6
 8014806:	47c0      	blx	r8
 8014808:	4307      	orrs	r7, r0
 801480a:	3568      	adds	r5, #104	; 0x68
 801480c:	e7e9      	b.n	80147e2 <_fwalk_reent+0x12>

0801480e <__swhatbuf_r>:
 801480e:	b570      	push	{r4, r5, r6, lr}
 8014810:	460e      	mov	r6, r1
 8014812:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014816:	2900      	cmp	r1, #0
 8014818:	b096      	sub	sp, #88	; 0x58
 801481a:	4614      	mov	r4, r2
 801481c:	461d      	mov	r5, r3
 801481e:	da08      	bge.n	8014832 <__swhatbuf_r+0x24>
 8014820:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8014824:	2200      	movs	r2, #0
 8014826:	602a      	str	r2, [r5, #0]
 8014828:	061a      	lsls	r2, r3, #24
 801482a:	d410      	bmi.n	801484e <__swhatbuf_r+0x40>
 801482c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014830:	e00e      	b.n	8014850 <__swhatbuf_r+0x42>
 8014832:	466a      	mov	r2, sp
 8014834:	f000 f8fa 	bl	8014a2c <_fstat_r>
 8014838:	2800      	cmp	r0, #0
 801483a:	dbf1      	blt.n	8014820 <__swhatbuf_r+0x12>
 801483c:	9a01      	ldr	r2, [sp, #4]
 801483e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8014842:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8014846:	425a      	negs	r2, r3
 8014848:	415a      	adcs	r2, r3
 801484a:	602a      	str	r2, [r5, #0]
 801484c:	e7ee      	b.n	801482c <__swhatbuf_r+0x1e>
 801484e:	2340      	movs	r3, #64	; 0x40
 8014850:	2000      	movs	r0, #0
 8014852:	6023      	str	r3, [r4, #0]
 8014854:	b016      	add	sp, #88	; 0x58
 8014856:	bd70      	pop	{r4, r5, r6, pc}

08014858 <__smakebuf_r>:
 8014858:	898b      	ldrh	r3, [r1, #12]
 801485a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801485c:	079d      	lsls	r5, r3, #30
 801485e:	4606      	mov	r6, r0
 8014860:	460c      	mov	r4, r1
 8014862:	d507      	bpl.n	8014874 <__smakebuf_r+0x1c>
 8014864:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8014868:	6023      	str	r3, [r4, #0]
 801486a:	6123      	str	r3, [r4, #16]
 801486c:	2301      	movs	r3, #1
 801486e:	6163      	str	r3, [r4, #20]
 8014870:	b002      	add	sp, #8
 8014872:	bd70      	pop	{r4, r5, r6, pc}
 8014874:	ab01      	add	r3, sp, #4
 8014876:	466a      	mov	r2, sp
 8014878:	f7ff ffc9 	bl	801480e <__swhatbuf_r>
 801487c:	9900      	ldr	r1, [sp, #0]
 801487e:	4605      	mov	r5, r0
 8014880:	4630      	mov	r0, r6
 8014882:	f7fd fd17 	bl	80122b4 <_malloc_r>
 8014886:	b948      	cbnz	r0, 801489c <__smakebuf_r+0x44>
 8014888:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801488c:	059a      	lsls	r2, r3, #22
 801488e:	d4ef      	bmi.n	8014870 <__smakebuf_r+0x18>
 8014890:	f023 0303 	bic.w	r3, r3, #3
 8014894:	f043 0302 	orr.w	r3, r3, #2
 8014898:	81a3      	strh	r3, [r4, #12]
 801489a:	e7e3      	b.n	8014864 <__smakebuf_r+0xc>
 801489c:	4b0d      	ldr	r3, [pc, #52]	; (80148d4 <__smakebuf_r+0x7c>)
 801489e:	62b3      	str	r3, [r6, #40]	; 0x28
 80148a0:	89a3      	ldrh	r3, [r4, #12]
 80148a2:	6020      	str	r0, [r4, #0]
 80148a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80148a8:	81a3      	strh	r3, [r4, #12]
 80148aa:	9b00      	ldr	r3, [sp, #0]
 80148ac:	6163      	str	r3, [r4, #20]
 80148ae:	9b01      	ldr	r3, [sp, #4]
 80148b0:	6120      	str	r0, [r4, #16]
 80148b2:	b15b      	cbz	r3, 80148cc <__smakebuf_r+0x74>
 80148b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80148b8:	4630      	mov	r0, r6
 80148ba:	f000 f8c9 	bl	8014a50 <_isatty_r>
 80148be:	b128      	cbz	r0, 80148cc <__smakebuf_r+0x74>
 80148c0:	89a3      	ldrh	r3, [r4, #12]
 80148c2:	f023 0303 	bic.w	r3, r3, #3
 80148c6:	f043 0301 	orr.w	r3, r3, #1
 80148ca:	81a3      	strh	r3, [r4, #12]
 80148cc:	89a0      	ldrh	r0, [r4, #12]
 80148ce:	4305      	orrs	r5, r0
 80148d0:	81a5      	strh	r5, [r4, #12]
 80148d2:	e7cd      	b.n	8014870 <__smakebuf_r+0x18>
 80148d4:	0801466d 	.word	0x0801466d

080148d8 <_raise_r>:
 80148d8:	291f      	cmp	r1, #31
 80148da:	b538      	push	{r3, r4, r5, lr}
 80148dc:	4604      	mov	r4, r0
 80148de:	460d      	mov	r5, r1
 80148e0:	d904      	bls.n	80148ec <_raise_r+0x14>
 80148e2:	2316      	movs	r3, #22
 80148e4:	6003      	str	r3, [r0, #0]
 80148e6:	f04f 30ff 	mov.w	r0, #4294967295
 80148ea:	bd38      	pop	{r3, r4, r5, pc}
 80148ec:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80148ee:	b112      	cbz	r2, 80148f6 <_raise_r+0x1e>
 80148f0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80148f4:	b94b      	cbnz	r3, 801490a <_raise_r+0x32>
 80148f6:	4620      	mov	r0, r4
 80148f8:	f000 f830 	bl	801495c <_getpid_r>
 80148fc:	462a      	mov	r2, r5
 80148fe:	4601      	mov	r1, r0
 8014900:	4620      	mov	r0, r4
 8014902:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014906:	f000 b817 	b.w	8014938 <_kill_r>
 801490a:	2b01      	cmp	r3, #1
 801490c:	d00a      	beq.n	8014924 <_raise_r+0x4c>
 801490e:	1c59      	adds	r1, r3, #1
 8014910:	d103      	bne.n	801491a <_raise_r+0x42>
 8014912:	2316      	movs	r3, #22
 8014914:	6003      	str	r3, [r0, #0]
 8014916:	2001      	movs	r0, #1
 8014918:	e7e7      	b.n	80148ea <_raise_r+0x12>
 801491a:	2400      	movs	r4, #0
 801491c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8014920:	4628      	mov	r0, r5
 8014922:	4798      	blx	r3
 8014924:	2000      	movs	r0, #0
 8014926:	e7e0      	b.n	80148ea <_raise_r+0x12>

08014928 <raise>:
 8014928:	4b02      	ldr	r3, [pc, #8]	; (8014934 <raise+0xc>)
 801492a:	4601      	mov	r1, r0
 801492c:	6818      	ldr	r0, [r3, #0]
 801492e:	f7ff bfd3 	b.w	80148d8 <_raise_r>
 8014932:	bf00      	nop
 8014934:	240006fc 	.word	0x240006fc

08014938 <_kill_r>:
 8014938:	b538      	push	{r3, r4, r5, lr}
 801493a:	4d07      	ldr	r5, [pc, #28]	; (8014958 <_kill_r+0x20>)
 801493c:	2300      	movs	r3, #0
 801493e:	4604      	mov	r4, r0
 8014940:	4608      	mov	r0, r1
 8014942:	4611      	mov	r1, r2
 8014944:	602b      	str	r3, [r5, #0]
 8014946:	f000 fc7f 	bl	8015248 <_kill>
 801494a:	1c43      	adds	r3, r0, #1
 801494c:	d102      	bne.n	8014954 <_kill_r+0x1c>
 801494e:	682b      	ldr	r3, [r5, #0]
 8014950:	b103      	cbz	r3, 8014954 <_kill_r+0x1c>
 8014952:	6023      	str	r3, [r4, #0]
 8014954:	bd38      	pop	{r3, r4, r5, pc}
 8014956:	bf00      	nop
 8014958:	24001ea0 	.word	0x24001ea0

0801495c <_getpid_r>:
 801495c:	f000 bc64 	b.w	8015228 <_getpid>

08014960 <__sread>:
 8014960:	b510      	push	{r4, lr}
 8014962:	460c      	mov	r4, r1
 8014964:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014968:	f000 f894 	bl	8014a94 <_read_r>
 801496c:	2800      	cmp	r0, #0
 801496e:	bfab      	itete	ge
 8014970:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8014972:	89a3      	ldrhlt	r3, [r4, #12]
 8014974:	181b      	addge	r3, r3, r0
 8014976:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801497a:	bfac      	ite	ge
 801497c:	6563      	strge	r3, [r4, #84]	; 0x54
 801497e:	81a3      	strhlt	r3, [r4, #12]
 8014980:	bd10      	pop	{r4, pc}

08014982 <__swrite>:
 8014982:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014986:	461f      	mov	r7, r3
 8014988:	898b      	ldrh	r3, [r1, #12]
 801498a:	05db      	lsls	r3, r3, #23
 801498c:	4605      	mov	r5, r0
 801498e:	460c      	mov	r4, r1
 8014990:	4616      	mov	r6, r2
 8014992:	d505      	bpl.n	80149a0 <__swrite+0x1e>
 8014994:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014998:	2302      	movs	r3, #2
 801499a:	2200      	movs	r2, #0
 801499c:	f000 f868 	bl	8014a70 <_lseek_r>
 80149a0:	89a3      	ldrh	r3, [r4, #12]
 80149a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80149a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80149aa:	81a3      	strh	r3, [r4, #12]
 80149ac:	4632      	mov	r2, r6
 80149ae:	463b      	mov	r3, r7
 80149b0:	4628      	mov	r0, r5
 80149b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80149b6:	f000 b817 	b.w	80149e8 <_write_r>

080149ba <__sseek>:
 80149ba:	b510      	push	{r4, lr}
 80149bc:	460c      	mov	r4, r1
 80149be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80149c2:	f000 f855 	bl	8014a70 <_lseek_r>
 80149c6:	1c43      	adds	r3, r0, #1
 80149c8:	89a3      	ldrh	r3, [r4, #12]
 80149ca:	bf15      	itete	ne
 80149cc:	6560      	strne	r0, [r4, #84]	; 0x54
 80149ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80149d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80149d6:	81a3      	strheq	r3, [r4, #12]
 80149d8:	bf18      	it	ne
 80149da:	81a3      	strhne	r3, [r4, #12]
 80149dc:	bd10      	pop	{r4, pc}

080149de <__sclose>:
 80149de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80149e2:	f000 b813 	b.w	8014a0c <_close_r>
	...

080149e8 <_write_r>:
 80149e8:	b538      	push	{r3, r4, r5, lr}
 80149ea:	4d07      	ldr	r5, [pc, #28]	; (8014a08 <_write_r+0x20>)
 80149ec:	4604      	mov	r4, r0
 80149ee:	4608      	mov	r0, r1
 80149f0:	4611      	mov	r1, r2
 80149f2:	2200      	movs	r2, #0
 80149f4:	602a      	str	r2, [r5, #0]
 80149f6:	461a      	mov	r2, r3
 80149f8:	f7f3 fbcc 	bl	8008194 <_write>
 80149fc:	1c43      	adds	r3, r0, #1
 80149fe:	d102      	bne.n	8014a06 <_write_r+0x1e>
 8014a00:	682b      	ldr	r3, [r5, #0]
 8014a02:	b103      	cbz	r3, 8014a06 <_write_r+0x1e>
 8014a04:	6023      	str	r3, [r4, #0]
 8014a06:	bd38      	pop	{r3, r4, r5, pc}
 8014a08:	24001ea0 	.word	0x24001ea0

08014a0c <_close_r>:
 8014a0c:	b538      	push	{r3, r4, r5, lr}
 8014a0e:	4d06      	ldr	r5, [pc, #24]	; (8014a28 <_close_r+0x1c>)
 8014a10:	2300      	movs	r3, #0
 8014a12:	4604      	mov	r4, r0
 8014a14:	4608      	mov	r0, r1
 8014a16:	602b      	str	r3, [r5, #0]
 8014a18:	f000 fbf6 	bl	8015208 <_close>
 8014a1c:	1c43      	adds	r3, r0, #1
 8014a1e:	d102      	bne.n	8014a26 <_close_r+0x1a>
 8014a20:	682b      	ldr	r3, [r5, #0]
 8014a22:	b103      	cbz	r3, 8014a26 <_close_r+0x1a>
 8014a24:	6023      	str	r3, [r4, #0]
 8014a26:	bd38      	pop	{r3, r4, r5, pc}
 8014a28:	24001ea0 	.word	0x24001ea0

08014a2c <_fstat_r>:
 8014a2c:	b538      	push	{r3, r4, r5, lr}
 8014a2e:	4d07      	ldr	r5, [pc, #28]	; (8014a4c <_fstat_r+0x20>)
 8014a30:	2300      	movs	r3, #0
 8014a32:	4604      	mov	r4, r0
 8014a34:	4608      	mov	r0, r1
 8014a36:	4611      	mov	r1, r2
 8014a38:	602b      	str	r3, [r5, #0]
 8014a3a:	f000 fbed 	bl	8015218 <_fstat>
 8014a3e:	1c43      	adds	r3, r0, #1
 8014a40:	d102      	bne.n	8014a48 <_fstat_r+0x1c>
 8014a42:	682b      	ldr	r3, [r5, #0]
 8014a44:	b103      	cbz	r3, 8014a48 <_fstat_r+0x1c>
 8014a46:	6023      	str	r3, [r4, #0]
 8014a48:	bd38      	pop	{r3, r4, r5, pc}
 8014a4a:	bf00      	nop
 8014a4c:	24001ea0 	.word	0x24001ea0

08014a50 <_isatty_r>:
 8014a50:	b538      	push	{r3, r4, r5, lr}
 8014a52:	4d06      	ldr	r5, [pc, #24]	; (8014a6c <_isatty_r+0x1c>)
 8014a54:	2300      	movs	r3, #0
 8014a56:	4604      	mov	r4, r0
 8014a58:	4608      	mov	r0, r1
 8014a5a:	602b      	str	r3, [r5, #0]
 8014a5c:	f000 fbec 	bl	8015238 <_isatty>
 8014a60:	1c43      	adds	r3, r0, #1
 8014a62:	d102      	bne.n	8014a6a <_isatty_r+0x1a>
 8014a64:	682b      	ldr	r3, [r5, #0]
 8014a66:	b103      	cbz	r3, 8014a6a <_isatty_r+0x1a>
 8014a68:	6023      	str	r3, [r4, #0]
 8014a6a:	bd38      	pop	{r3, r4, r5, pc}
 8014a6c:	24001ea0 	.word	0x24001ea0

08014a70 <_lseek_r>:
 8014a70:	b538      	push	{r3, r4, r5, lr}
 8014a72:	4d07      	ldr	r5, [pc, #28]	; (8014a90 <_lseek_r+0x20>)
 8014a74:	4604      	mov	r4, r0
 8014a76:	4608      	mov	r0, r1
 8014a78:	4611      	mov	r1, r2
 8014a7a:	2200      	movs	r2, #0
 8014a7c:	602a      	str	r2, [r5, #0]
 8014a7e:	461a      	mov	r2, r3
 8014a80:	f000 fbea 	bl	8015258 <_lseek>
 8014a84:	1c43      	adds	r3, r0, #1
 8014a86:	d102      	bne.n	8014a8e <_lseek_r+0x1e>
 8014a88:	682b      	ldr	r3, [r5, #0]
 8014a8a:	b103      	cbz	r3, 8014a8e <_lseek_r+0x1e>
 8014a8c:	6023      	str	r3, [r4, #0]
 8014a8e:	bd38      	pop	{r3, r4, r5, pc}
 8014a90:	24001ea0 	.word	0x24001ea0

08014a94 <_read_r>:
 8014a94:	b538      	push	{r3, r4, r5, lr}
 8014a96:	4d07      	ldr	r5, [pc, #28]	; (8014ab4 <_read_r+0x20>)
 8014a98:	4604      	mov	r4, r0
 8014a9a:	4608      	mov	r0, r1
 8014a9c:	4611      	mov	r1, r2
 8014a9e:	2200      	movs	r2, #0
 8014aa0:	602a      	str	r2, [r5, #0]
 8014aa2:	461a      	mov	r2, r3
 8014aa4:	f000 fbe0 	bl	8015268 <_read>
 8014aa8:	1c43      	adds	r3, r0, #1
 8014aaa:	d102      	bne.n	8014ab2 <_read_r+0x1e>
 8014aac:	682b      	ldr	r3, [r5, #0]
 8014aae:	b103      	cbz	r3, 8014ab2 <_read_r+0x1e>
 8014ab0:	6023      	str	r3, [r4, #0]
 8014ab2:	bd38      	pop	{r3, r4, r5, pc}
 8014ab4:	24001ea0 	.word	0x24001ea0

08014ab8 <expf>:
 8014ab8:	ee10 2a10 	vmov	r2, s0
 8014abc:	f240 412a 	movw	r1, #1066	; 0x42a
 8014ac0:	f3c2 530a 	ubfx	r3, r2, #20, #11
 8014ac4:	428b      	cmp	r3, r1
 8014ac6:	b430      	push	{r4, r5}
 8014ac8:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 8014acc:	d92a      	bls.n	8014b24 <expf+0x6c>
 8014ace:	f512 0f00 	cmn.w	r2, #8388608	; 0x800000
 8014ad2:	d058      	beq.n	8014b86 <expf+0xce>
 8014ad4:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 8014ad8:	d303      	bcc.n	8014ae2 <expf+0x2a>
 8014ada:	ee30 0a00 	vadd.f32	s0, s0, s0
 8014ade:	bc30      	pop	{r4, r5}
 8014ae0:	4770      	bx	lr
 8014ae2:	eddf 7a2a 	vldr	s15, [pc, #168]	; 8014b8c <expf+0xd4>
 8014ae6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8014aea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014aee:	dd03      	ble.n	8014af8 <expf+0x40>
 8014af0:	bc30      	pop	{r4, r5}
 8014af2:	2000      	movs	r0, #0
 8014af4:	f000 ba40 	b.w	8014f78 <__math_oflowf>
 8014af8:	eddf 7a25 	vldr	s15, [pc, #148]	; 8014b90 <expf+0xd8>
 8014afc:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8014b00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b04:	d503      	bpl.n	8014b0e <expf+0x56>
 8014b06:	bc30      	pop	{r4, r5}
 8014b08:	2000      	movs	r0, #0
 8014b0a:	f000 ba29 	b.w	8014f60 <__math_uflowf>
 8014b0e:	eddf 7a21 	vldr	s15, [pc, #132]	; 8014b94 <expf+0xdc>
 8014b12:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8014b16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b1a:	d503      	bpl.n	8014b24 <expf+0x6c>
 8014b1c:	bc30      	pop	{r4, r5}
 8014b1e:	2000      	movs	r0, #0
 8014b20:	f000 ba24 	b.w	8014f6c <__math_may_uflowf>
 8014b24:	4b1c      	ldr	r3, [pc, #112]	; (8014b98 <expf+0xe0>)
 8014b26:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8014b2a:	ed93 5b4a 	vldr	d5, [r3, #296]	; 0x128
 8014b2e:	ed93 4b48 	vldr	d4, [r3, #288]	; 0x120
 8014b32:	eeb0 7b44 	vmov.f64	d7, d4
 8014b36:	eea5 7b06 	vfma.f64	d7, d5, d6
 8014b3a:	ee17 0a10 	vmov	r0, s14
 8014b3e:	ee37 7b44 	vsub.f64	d7, d7, d4
 8014b42:	f000 021f 	and.w	r2, r0, #31
 8014b46:	ee95 7b06 	vfnms.f64	d7, d5, d6
 8014b4a:	ed93 5b4c 	vldr	d5, [r3, #304]	; 0x130
 8014b4e:	ee27 4b07 	vmul.f64	d4, d7, d7
 8014b52:	ed93 6b4e 	vldr	d6, [r3, #312]	; 0x138
 8014b56:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 8014b5a:	eea5 6b07 	vfma.f64	d6, d5, d7
 8014b5e:	f853 4032 	ldr.w	r4, [r3, r2, lsl #3]
 8014b62:	684d      	ldr	r5, [r1, #4]
 8014b64:	ed93 5b50 	vldr	d5, [r3, #320]	; 0x140
 8014b68:	2100      	movs	r1, #0
 8014b6a:	190a      	adds	r2, r1, r4
 8014b6c:	eb05 33c0 	add.w	r3, r5, r0, lsl #15
 8014b70:	eea5 0b07 	vfma.f64	d0, d5, d7
 8014b74:	ec43 2b17 	vmov	d7, r2, r3
 8014b78:	eea6 0b04 	vfma.f64	d0, d6, d4
 8014b7c:	ee20 0b07 	vmul.f64	d0, d0, d7
 8014b80:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8014b84:	e7ab      	b.n	8014ade <expf+0x26>
 8014b86:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8014b9c <expf+0xe4>
 8014b8a:	e7a8      	b.n	8014ade <expf+0x26>
 8014b8c:	42b17217 	.word	0x42b17217
 8014b90:	c2cff1b4 	.word	0xc2cff1b4
 8014b94:	c2ce8ecf 	.word	0xc2ce8ecf
 8014b98:	08016cc8 	.word	0x08016cc8
 8014b9c:	00000000 	.word	0x00000000

08014ba0 <checkint>:
 8014ba0:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8014ba4:	2b7e      	cmp	r3, #126	; 0x7e
 8014ba6:	dd10      	ble.n	8014bca <checkint+0x2a>
 8014ba8:	2b96      	cmp	r3, #150	; 0x96
 8014baa:	dc0c      	bgt.n	8014bc6 <checkint+0x26>
 8014bac:	2201      	movs	r2, #1
 8014bae:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8014bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8014bb6:	1e5a      	subs	r2, r3, #1
 8014bb8:	4202      	tst	r2, r0
 8014bba:	d106      	bne.n	8014bca <checkint+0x2a>
 8014bbc:	4203      	tst	r3, r0
 8014bbe:	bf0c      	ite	eq
 8014bc0:	2002      	moveq	r0, #2
 8014bc2:	2001      	movne	r0, #1
 8014bc4:	4770      	bx	lr
 8014bc6:	2002      	movs	r0, #2
 8014bc8:	4770      	bx	lr
 8014bca:	2000      	movs	r0, #0
 8014bcc:	4770      	bx	lr
	...

08014bd0 <powf>:
 8014bd0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014bd2:	ee10 1a10 	vmov	r1, s0
 8014bd6:	ee10 4a90 	vmov	r4, s1
 8014bda:	f5a1 0300 	sub.w	r3, r1, #8388608	; 0x800000
 8014bde:	0062      	lsls	r2, r4, #1
 8014be0:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8014be4:	eef0 7a40 	vmov.f32	s15, s0
 8014be8:	f102 30ff 	add.w	r0, r2, #4294967295
 8014bec:	f06f 7380 	mvn.w	r3, #16777216	; 0x1000000
 8014bf0:	d252      	bcs.n	8014c98 <powf+0xc8>
 8014bf2:	4298      	cmp	r0, r3
 8014bf4:	d252      	bcs.n	8014c9c <powf+0xcc>
 8014bf6:	2000      	movs	r0, #0
 8014bf8:	f101 4240 	add.w	r2, r1, #3221225472	; 0xc0000000
 8014bfc:	4ca0      	ldr	r4, [pc, #640]	; (8014e80 <powf+0x2b0>)
 8014bfe:	eebf 5b00 	vmov.f64	d5, #240	; 0xbf800000 -1.0
 8014c02:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 8014c06:	f3c2 45c3 	ubfx	r5, r2, #19, #4
 8014c0a:	0dd2      	lsrs	r2, r2, #23
 8014c0c:	05d2      	lsls	r2, r2, #23
 8014c0e:	eb04 1505 	add.w	r5, r4, r5, lsl #4
 8014c12:	1a8b      	subs	r3, r1, r2
 8014c14:	ed95 6b00 	vldr	d6, [r5]
 8014c18:	ee07 3a90 	vmov	s15, r3
 8014c1c:	15d2      	asrs	r2, r2, #23
 8014c1e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8014c22:	eea6 5b07 	vfma.f64	d5, d6, d7
 8014c26:	ed95 6b02 	vldr	d6, [r5, #8]
 8014c2a:	ee25 2b05 	vmul.f64	d2, d5, d5
 8014c2e:	ee22 1b02 	vmul.f64	d1, d2, d2
 8014c32:	ee07 2a90 	vmov	s15, r2
 8014c36:	ed94 3b42 	vldr	d3, [r4, #264]	; 0x108
 8014c3a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8014c3e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8014c42:	ed94 6b40 	vldr	d6, [r4, #256]	; 0x100
 8014c46:	ed94 4b44 	vldr	d4, [r4, #272]	; 0x110
 8014c4a:	eea5 3b06 	vfma.f64	d3, d5, d6
 8014c4e:	ed94 6b46 	vldr	d6, [r4, #280]	; 0x118
 8014c52:	eea5 6b04 	vfma.f64	d6, d5, d4
 8014c56:	ed94 4b48 	vldr	d4, [r4, #288]	; 0x120
 8014c5a:	eeb7 0ae0 	vcvt.f64.f32	d0, s1
 8014c5e:	eea5 7b04 	vfma.f64	d7, d5, d4
 8014c62:	eea2 7b06 	vfma.f64	d7, d2, d6
 8014c66:	eea3 7b01 	vfma.f64	d7, d3, d1
 8014c6a:	ee20 0b07 	vmul.f64	d0, d0, d7
 8014c6e:	ee10 3a90 	vmov	r3, s1
 8014c72:	f3c3 32cf 	ubfx	r2, r3, #15, #16
 8014c76:	f248 03bf 	movw	r3, #32959	; 0x80bf
 8014c7a:	429a      	cmp	r2, r3
 8014c7c:	f0c0 80b1 	bcc.w	8014de2 <powf+0x212>
 8014c80:	ed9f 7b77 	vldr	d7, [pc, #476]	; 8014e60 <powf+0x290>
 8014c84:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8014c88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c8c:	dd79      	ble.n	8014d82 <powf+0x1b2>
 8014c8e:	b003      	add	sp, #12
 8014c90:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014c94:	f000 b970 	b.w	8014f78 <__math_oflowf>
 8014c98:	4298      	cmp	r0, r3
 8014c9a:	d32d      	bcc.n	8014cf8 <powf+0x128>
 8014c9c:	b952      	cbnz	r2, 8014cb4 <powf+0xe4>
 8014c9e:	f481 0380 	eor.w	r3, r1, #4194304	; 0x400000
 8014ca2:	005b      	lsls	r3, r3, #1
 8014ca4:	f513 0f00 	cmn.w	r3, #8388608	; 0x800000
 8014ca8:	f240 80c9 	bls.w	8014e3e <powf+0x26e>
 8014cac:	ee37 0aa0 	vadd.f32	s0, s15, s1
 8014cb0:	b003      	add	sp, #12
 8014cb2:	bd30      	pop	{r4, r5, pc}
 8014cb4:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 8014cb8:	d105      	bne.n	8014cc6 <powf+0xf6>
 8014cba:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 8014cbe:	0064      	lsls	r4, r4, #1
 8014cc0:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 8014cc4:	e7f0      	b.n	8014ca8 <powf+0xd8>
 8014cc6:	004b      	lsls	r3, r1, #1
 8014cc8:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 8014ccc:	d8ee      	bhi.n	8014cac <powf+0xdc>
 8014cce:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 8014cd2:	d1eb      	bne.n	8014cac <powf+0xdc>
 8014cd4:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8014cd8:	f000 80b1 	beq.w	8014e3e <powf+0x26e>
 8014cdc:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8014ce0:	ea6f 0404 	mvn.w	r4, r4
 8014ce4:	bf34      	ite	cc
 8014ce6:	2300      	movcc	r3, #0
 8014ce8:	2301      	movcs	r3, #1
 8014cea:	0fe4      	lsrs	r4, r4, #31
 8014cec:	42a3      	cmp	r3, r4
 8014cee:	f040 80a9 	bne.w	8014e44 <powf+0x274>
 8014cf2:	ee20 0aa0 	vmul.f32	s0, s1, s1
 8014cf6:	e7db      	b.n	8014cb0 <powf+0xe0>
 8014cf8:	004d      	lsls	r5, r1, #1
 8014cfa:	1e6a      	subs	r2, r5, #1
 8014cfc:	429a      	cmp	r2, r3
 8014cfe:	d31c      	bcc.n	8014d3a <powf+0x16a>
 8014d00:	2900      	cmp	r1, #0
 8014d02:	ee20 0a00 	vmul.f32	s0, s0, s0
 8014d06:	da0f      	bge.n	8014d28 <powf+0x158>
 8014d08:	ee10 0a90 	vmov	r0, s1
 8014d0c:	f7ff ff48 	bl	8014ba0 <checkint>
 8014d10:	2801      	cmp	r0, #1
 8014d12:	d109      	bne.n	8014d28 <powf+0x158>
 8014d14:	eeb1 0a40 	vneg.f32	s0, s0
 8014d18:	b945      	cbnz	r5, 8014d2c <powf+0x15c>
 8014d1a:	2c00      	cmp	r4, #0
 8014d1c:	dac8      	bge.n	8014cb0 <powf+0xe0>
 8014d1e:	b003      	add	sp, #12
 8014d20:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014d24:	f000 b92e 	b.w	8014f84 <__math_divzerof>
 8014d28:	2000      	movs	r0, #0
 8014d2a:	e7f5      	b.n	8014d18 <powf+0x148>
 8014d2c:	2c00      	cmp	r4, #0
 8014d2e:	dabf      	bge.n	8014cb0 <powf+0xe0>
 8014d30:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8014d34:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8014d38:	e7ba      	b.n	8014cb0 <powf+0xe0>
 8014d3a:	2900      	cmp	r1, #0
 8014d3c:	da1f      	bge.n	8014d7e <powf+0x1ae>
 8014d3e:	ee10 0a90 	vmov	r0, s1
 8014d42:	f7ff ff2d 	bl	8014ba0 <checkint>
 8014d46:	b920      	cbnz	r0, 8014d52 <powf+0x182>
 8014d48:	b003      	add	sp, #12
 8014d4a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014d4e:	f000 b929 	b.w	8014fa4 <__math_invalidf>
 8014d52:	2801      	cmp	r0, #1
 8014d54:	bf14      	ite	ne
 8014d56:	2000      	movne	r0, #0
 8014d58:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 8014d5c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8014d60:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8014d64:	f4bf af48 	bcs.w	8014bf8 <powf+0x28>
 8014d68:	ed9f 0a46 	vldr	s0, [pc, #280]	; 8014e84 <powf+0x2b4>
 8014d6c:	ee27 0a80 	vmul.f32	s0, s15, s0
 8014d70:	ee10 3a10 	vmov	r3, s0
 8014d74:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014d78:	f1a3 6138 	sub.w	r1, r3, #192937984	; 0xb800000
 8014d7c:	e73c      	b.n	8014bf8 <powf+0x28>
 8014d7e:	2000      	movs	r0, #0
 8014d80:	e7ee      	b.n	8014d60 <powf+0x190>
 8014d82:	ed9f 7b39 	vldr	d7, [pc, #228]	; 8014e68 <powf+0x298>
 8014d86:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8014d8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d8e:	dd10      	ble.n	8014db2 <powf+0x1e2>
 8014d90:	f04f 534c 	mov.w	r3, #855638016	; 0x33000000
 8014d94:	2800      	cmp	r0, #0
 8014d96:	d158      	bne.n	8014e4a <powf+0x27a>
 8014d98:	9300      	str	r3, [sp, #0]
 8014d9a:	eddd 7a00 	vldr	s15, [sp]
 8014d9e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8014da2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014da6:	eef4 7a47 	vcmp.f32	s15, s14
 8014daa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014dae:	f47f af6e 	bne.w	8014c8e <powf+0xbe>
 8014db2:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8014e70 <powf+0x2a0>
 8014db6:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8014dba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014dbe:	d804      	bhi.n	8014dca <powf+0x1fa>
 8014dc0:	b003      	add	sp, #12
 8014dc2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014dc6:	f000 b8cb 	b.w	8014f60 <__math_uflowf>
 8014dca:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 8014e78 <powf+0x2a8>
 8014dce:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8014dd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014dd6:	d504      	bpl.n	8014de2 <powf+0x212>
 8014dd8:	b003      	add	sp, #12
 8014dda:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014dde:	f000 b8c5 	b.w	8014f6c <__math_may_uflowf>
 8014de2:	4b29      	ldr	r3, [pc, #164]	; (8014e88 <powf+0x2b8>)
 8014de4:	ed93 7b40 	vldr	d7, [r3, #256]	; 0x100
 8014de8:	ee30 6b07 	vadd.f64	d6, d0, d7
 8014dec:	ee16 2a10 	vmov	r2, s12
 8014df0:	ee36 7b47 	vsub.f64	d7, d6, d7
 8014df4:	f002 011f 	and.w	r1, r2, #31
 8014df8:	ed93 5b42 	vldr	d5, [r3, #264]	; 0x108
 8014dfc:	ee30 7b47 	vsub.f64	d7, d0, d7
 8014e00:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8014e04:	ed93 6b44 	vldr	d6, [r3, #272]	; 0x110
 8014e08:	ee27 4b07 	vmul.f64	d4, d7, d7
 8014e0c:	eb03 05c1 	add.w	r5, r3, r1, lsl #3
 8014e10:	f853 4031 	ldr.w	r4, [r3, r1, lsl #3]
 8014e14:	eea7 6b05 	vfma.f64	d6, d7, d5
 8014e18:	686d      	ldr	r5, [r5, #4]
 8014e1a:	ed93 5b46 	vldr	d5, [r3, #280]	; 0x118
 8014e1e:	1882      	adds	r2, r0, r2
 8014e20:	2300      	movs	r3, #0
 8014e22:	1918      	adds	r0, r3, r4
 8014e24:	eb05 31c2 	add.w	r1, r5, r2, lsl #15
 8014e28:	eea7 0b05 	vfma.f64	d0, d7, d5
 8014e2c:	ec41 0b17 	vmov	d7, r0, r1
 8014e30:	eea6 0b04 	vfma.f64	d0, d6, d4
 8014e34:	ee20 0b07 	vmul.f64	d0, d0, d7
 8014e38:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8014e3c:	e738      	b.n	8014cb0 <powf+0xe0>
 8014e3e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8014e42:	e735      	b.n	8014cb0 <powf+0xe0>
 8014e44:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8014e8c <powf+0x2bc>
 8014e48:	e732      	b.n	8014cb0 <powf+0xe0>
 8014e4a:	9301      	str	r3, [sp, #4]
 8014e4c:	eddd 7a01 	vldr	s15, [sp, #4]
 8014e50:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8014e54:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014e58:	e7a5      	b.n	8014da6 <powf+0x1d6>
 8014e5a:	bf00      	nop
 8014e5c:	f3af 8000 	nop.w
 8014e60:	ffd1d571 	.word	0xffd1d571
 8014e64:	405fffff 	.word	0x405fffff
 8014e68:	ffa3aae2 	.word	0xffa3aae2
 8014e6c:	405fffff 	.word	0x405fffff
 8014e70:	00000000 	.word	0x00000000
 8014e74:	c062c000 	.word	0xc062c000
 8014e78:	00000000 	.word	0x00000000
 8014e7c:	c062a000 	.word	0xc062a000
 8014e80:	08016e10 	.word	0x08016e10
 8014e84:	4b000000 	.word	0x4b000000
 8014e88:	08016cc8 	.word	0x08016cc8
 8014e8c:	00000000 	.word	0x00000000

08014e90 <tanhf>:
 8014e90:	b510      	push	{r4, lr}
 8014e92:	ee10 4a10 	vmov	r4, s0
 8014e96:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8014e9a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8014e9e:	ed2d 8b02 	vpush	{d8}
 8014ea2:	eeb0 7a40 	vmov.f32	s14, s0
 8014ea6:	db0c      	blt.n	8014ec2 <tanhf+0x32>
 8014ea8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8014eac:	eec0 7a07 	vdiv.f32	s15, s0, s14
 8014eb0:	2c00      	cmp	r4, #0
 8014eb2:	bfac      	ite	ge
 8014eb4:	ee37 0a80 	vaddge.f32	s0, s15, s0
 8014eb8:	ee37 0ac0 	vsublt.f32	s0, s15, s0
 8014ebc:	ecbd 8b02 	vpop	{d8}
 8014ec0:	bd10      	pop	{r4, pc}
 8014ec2:	4a1b      	ldr	r2, [pc, #108]	; (8014f30 <tanhf+0xa0>)
 8014ec4:	4293      	cmp	r3, r2
 8014ec6:	dc30      	bgt.n	8014f2a <tanhf+0x9a>
 8014ec8:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
 8014ecc:	da06      	bge.n	8014edc <tanhf+0x4c>
 8014ece:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8014ed2:	ee70 7a27 	vadd.f32	s15, s0, s15
 8014ed6:	ee27 0a80 	vmul.f32	s0, s15, s0
 8014eda:	e7ef      	b.n	8014ebc <tanhf+0x2c>
 8014edc:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8014ee0:	eeb0 8a00 	vmov.f32	s16, #0	; 0x40000000  2.0
 8014ee4:	db12      	blt.n	8014f0c <tanhf+0x7c>
 8014ee6:	f000 f987 	bl	80151f8 <fabsf>
 8014eea:	ee30 0a00 	vadd.f32	s0, s0, s0
 8014eee:	f000 f869 	bl	8014fc4 <expm1f>
 8014ef2:	ee30 0a08 	vadd.f32	s0, s0, s16
 8014ef6:	eec8 7a00 	vdiv.f32	s15, s16, s0
 8014efa:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8014efe:	ee30 0a67 	vsub.f32	s0, s0, s15
 8014f02:	2c00      	cmp	r4, #0
 8014f04:	bfb8      	it	lt
 8014f06:	eeb1 0a40 	vneglt.f32	s0, s0
 8014f0a:	e7d7      	b.n	8014ebc <tanhf+0x2c>
 8014f0c:	f000 f974 	bl	80151f8 <fabsf>
 8014f10:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
 8014f14:	ee20 0a27 	vmul.f32	s0, s0, s15
 8014f18:	f000 f854 	bl	8014fc4 <expm1f>
 8014f1c:	ee70 7a08 	vadd.f32	s15, s0, s16
 8014f20:	eeb1 7a40 	vneg.f32	s14, s0
 8014f24:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8014f28:	e7eb      	b.n	8014f02 <tanhf+0x72>
 8014f2a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8014f2e:	e7e8      	b.n	8014f02 <tanhf+0x72>
 8014f30:	41afffff 	.word	0x41afffff

08014f34 <with_errnof>:
 8014f34:	b513      	push	{r0, r1, r4, lr}
 8014f36:	4604      	mov	r4, r0
 8014f38:	ed8d 0a01 	vstr	s0, [sp, #4]
 8014f3c:	f7fd f906 	bl	801214c <__errno>
 8014f40:	ed9d 0a01 	vldr	s0, [sp, #4]
 8014f44:	6004      	str	r4, [r0, #0]
 8014f46:	b002      	add	sp, #8
 8014f48:	bd10      	pop	{r4, pc}

08014f4a <xflowf>:
 8014f4a:	b130      	cbz	r0, 8014f5a <xflowf+0x10>
 8014f4c:	eef1 7a40 	vneg.f32	s15, s0
 8014f50:	ee27 0a80 	vmul.f32	s0, s15, s0
 8014f54:	2022      	movs	r0, #34	; 0x22
 8014f56:	f7ff bfed 	b.w	8014f34 <with_errnof>
 8014f5a:	eef0 7a40 	vmov.f32	s15, s0
 8014f5e:	e7f7      	b.n	8014f50 <xflowf+0x6>

08014f60 <__math_uflowf>:
 8014f60:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8014f68 <__math_uflowf+0x8>
 8014f64:	f7ff bff1 	b.w	8014f4a <xflowf>
 8014f68:	10000000 	.word	0x10000000

08014f6c <__math_may_uflowf>:
 8014f6c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8014f74 <__math_may_uflowf+0x8>
 8014f70:	f7ff bfeb 	b.w	8014f4a <xflowf>
 8014f74:	1a200000 	.word	0x1a200000

08014f78 <__math_oflowf>:
 8014f78:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8014f80 <__math_oflowf+0x8>
 8014f7c:	f7ff bfe5 	b.w	8014f4a <xflowf>
 8014f80:	70000000 	.word	0x70000000

08014f84 <__math_divzerof>:
 8014f84:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8014f88:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8014f8c:	2800      	cmp	r0, #0
 8014f8e:	fe40 7a27 	vseleq.f32	s15, s0, s15
 8014f92:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8014fa0 <__math_divzerof+0x1c>
 8014f96:	2022      	movs	r0, #34	; 0x22
 8014f98:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8014f9c:	f7ff bfca 	b.w	8014f34 <with_errnof>
 8014fa0:	00000000 	.word	0x00000000

08014fa4 <__math_invalidf>:
 8014fa4:	eef0 7a40 	vmov.f32	s15, s0
 8014fa8:	ee30 7a40 	vsub.f32	s14, s0, s0
 8014fac:	eef4 7a67 	vcmp.f32	s15, s15
 8014fb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014fb4:	ee87 0a07 	vdiv.f32	s0, s14, s14
 8014fb8:	d602      	bvs.n	8014fc0 <__math_invalidf+0x1c>
 8014fba:	2021      	movs	r0, #33	; 0x21
 8014fbc:	f7ff bfba 	b.w	8014f34 <with_errnof>
 8014fc0:	4770      	bx	lr
	...

08014fc4 <expm1f>:
 8014fc4:	ee10 2a10 	vmov	r2, s0
 8014fc8:	497c      	ldr	r1, [pc, #496]	; (80151bc <expm1f+0x1f8>)
 8014fca:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8014fce:	428b      	cmp	r3, r1
 8014fd0:	d920      	bls.n	8015014 <expm1f+0x50>
 8014fd2:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8014fd6:	d902      	bls.n	8014fde <expm1f+0x1a>
 8014fd8:	ee30 0a00 	vadd.f32	s0, s0, s0
 8014fdc:	4770      	bx	lr
 8014fde:	d105      	bne.n	8014fec <expm1f+0x28>
 8014fe0:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8014fe4:	2a00      	cmp	r2, #0
 8014fe6:	fe20 0a27 	vselge.f32	s0, s0, s15
 8014fea:	4770      	bx	lr
 8014fec:	2a00      	cmp	r2, #0
 8014fee:	db05      	blt.n	8014ffc <expm1f+0x38>
 8014ff0:	4973      	ldr	r1, [pc, #460]	; (80151c0 <expm1f+0x1fc>)
 8014ff2:	428b      	cmp	r3, r1
 8014ff4:	d95c      	bls.n	80150b0 <expm1f+0xec>
 8014ff6:	2000      	movs	r0, #0
 8014ff8:	f7ff bfbe 	b.w	8014f78 <__math_oflowf>
 8014ffc:	eddf 7a71 	vldr	s15, [pc, #452]	; 80151c4 <expm1f+0x200>
 8015000:	ee70 7a27 	vadd.f32	s15, s0, s15
 8015004:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8015008:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801500c:	d550      	bpl.n	80150b0 <expm1f+0xec>
 801500e:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8015012:	4770      	bx	lr
 8015014:	496c      	ldr	r1, [pc, #432]	; (80151c8 <expm1f+0x204>)
 8015016:	428b      	cmp	r3, r1
 8015018:	d966      	bls.n	80150e8 <expm1f+0x124>
 801501a:	496c      	ldr	r1, [pc, #432]	; (80151cc <expm1f+0x208>)
 801501c:	428b      	cmp	r3, r1
 801501e:	d847      	bhi.n	80150b0 <expm1f+0xec>
 8015020:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 80151d0 <expm1f+0x20c>
 8015024:	2a00      	cmp	r2, #0
 8015026:	bfa7      	ittee	ge
 8015028:	ee30 7a47 	vsubge.f32	s14, s0, s14
 801502c:	eddf 7a69 	vldrge	s15, [pc, #420]	; 80151d4 <expm1f+0x210>
 8015030:	eddf 7a69 	vldrlt	s15, [pc, #420]	; 80151d8 <expm1f+0x214>
 8015034:	ee30 7a07 	vaddlt.f32	s14, s0, s14
 8015038:	bfac      	ite	ge
 801503a:	2301      	movge	r3, #1
 801503c:	f04f 33ff 	movlt.w	r3, #4294967295
 8015040:	ee37 0a67 	vsub.f32	s0, s14, s15
 8015044:	ee37 7a40 	vsub.f32	s14, s14, s0
 8015048:	ee77 7a67 	vsub.f32	s15, s14, s15
 801504c:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8015050:	ee20 4a25 	vmul.f32	s8, s0, s11
 8015054:	ed9f 6a61 	vldr	s12, [pc, #388]	; 80151dc <expm1f+0x218>
 8015058:	eddf 6a61 	vldr	s13, [pc, #388]	; 80151e0 <expm1f+0x21c>
 801505c:	ed9f 5a61 	vldr	s10, [pc, #388]	; 80151e4 <expm1f+0x220>
 8015060:	ee20 7a04 	vmul.f32	s14, s0, s8
 8015064:	eef0 4a08 	vmov.f32	s9, #8	; 0x40400000  3.0
 8015068:	eee7 6a06 	vfma.f32	s13, s14, s12
 801506c:	ed9f 6a5e 	vldr	s12, [pc, #376]	; 80151e8 <expm1f+0x224>
 8015070:	eea6 6a87 	vfma.f32	s12, s13, s14
 8015074:	eddf 6a5d 	vldr	s13, [pc, #372]	; 80151ec <expm1f+0x228>
 8015078:	eee6 6a07 	vfma.f32	s13, s12, s14
 801507c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8015080:	eea6 5a87 	vfma.f32	s10, s13, s14
 8015084:	eef0 6a46 	vmov.f32	s13, s12
 8015088:	eee5 6a07 	vfma.f32	s13, s10, s14
 801508c:	eee4 4a66 	vfms.f32	s9, s8, s13
 8015090:	eeb1 4a08 	vmov.f32	s8, #24	; 0x40c00000  6.0
 8015094:	eea0 4a64 	vfms.f32	s8, s0, s9
 8015098:	ee36 5ae4 	vsub.f32	s10, s13, s9
 801509c:	eec5 6a04 	vdiv.f32	s13, s10, s8
 80150a0:	ee66 6a87 	vmul.f32	s13, s13, s14
 80150a4:	bb73      	cbnz	r3, 8015104 <expm1f+0x140>
 80150a6:	eef0 7a47 	vmov.f32	s15, s14
 80150aa:	eed0 7a26 	vfnms.f32	s15, s0, s13
 80150ae:	e024      	b.n	80150fa <expm1f+0x136>
 80150b0:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 80150b4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80150b8:	2a00      	cmp	r2, #0
 80150ba:	fe67 7a87 	vselge.f32	s15, s15, s14
 80150be:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 80151f0 <expm1f+0x22c>
 80150c2:	eddf 6a43 	vldr	s13, [pc, #268]	; 80151d0 <expm1f+0x20c>
 80150c6:	ee40 7a07 	vmla.f32	s15, s0, s14
 80150ca:	eeb0 7a40 	vmov.f32	s14, s0
 80150ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80150d2:	ee17 3a90 	vmov	r3, s15
 80150d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80150da:	eea7 7ae6 	vfms.f32	s14, s15, s13
 80150de:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80151d4 <expm1f+0x210>
 80150e2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80150e6:	e7ab      	b.n	8015040 <expm1f+0x7c>
 80150e8:	f1b3 5f4c 	cmp.w	r3, #855638016	; 0x33000000
 80150ec:	d208      	bcs.n	8015100 <expm1f+0x13c>
 80150ee:	eddf 7a41 	vldr	s15, [pc, #260]	; 80151f4 <expm1f+0x230>
 80150f2:	ee70 7a27 	vadd.f32	s15, s0, s15
 80150f6:	ee77 7ae7 	vsub.f32	s15, s15, s15
 80150fa:	ee30 0a67 	vsub.f32	s0, s0, s15
 80150fe:	4770      	bx	lr
 8015100:	2300      	movs	r3, #0
 8015102:	e7a3      	b.n	801504c <expm1f+0x88>
 8015104:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8015108:	1c5a      	adds	r2, r3, #1
 801510a:	eed6 7a80 	vfnms.f32	s15, s13, s0
 801510e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015112:	d106      	bne.n	8015122 <expm1f+0x15e>
 8015114:	ee70 7a67 	vsub.f32	s15, s0, s15
 8015118:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 801511c:	eea7 0aa5 	vfma.f32	s0, s15, s11
 8015120:	4770      	bx	lr
 8015122:	2b01      	cmp	r3, #1
 8015124:	d118      	bne.n	8015158 <expm1f+0x194>
 8015126:	eebd 7a00 	vmov.f32	s14, #208	; 0xbe800000 -0.250
 801512a:	eeb4 0ac7 	vcmpe.f32	s0, s14
 801512e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015132:	bf5b      	ittet	pl
 8015134:	ee70 7a67 	vsubpl.f32	s15, s0, s15
 8015138:	eeb0 7a00 	vmovpl.f32	s14, #0	; 0x40000000  2.0
 801513c:	ee30 0a25 	vaddmi.f32	s0, s0, s11
 8015140:	eea7 6a87 	vfmapl.f32	s12, s15, s14
 8015144:	bf43      	ittte	mi
 8015146:	ee77 7ac0 	vsubmi.f32	s15, s15, s0
 801514a:	eeb8 0a00 	vmovmi.f32	s0, #128	; 0xc0000000 -2.0
 801514e:	ee27 0a80 	vmulmi.f32	s0, s15, s0
 8015152:	eeb0 0a46 	vmovpl.f32	s0, s12
 8015156:	4770      	bx	lr
 8015158:	1c5a      	adds	r2, r3, #1
 801515a:	2a39      	cmp	r2, #57	; 0x39
 801515c:	ea4f 51c3 	mov.w	r1, r3, lsl #23
 8015160:	d90b      	bls.n	801517a <expm1f+0x1b6>
 8015162:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8015166:	ee36 0a40 	vsub.f32	s0, s12, s0
 801516a:	ee10 3a10 	vmov	r3, s0
 801516e:	440b      	add	r3, r1
 8015170:	ee00 3a10 	vmov	s0, r3
 8015174:	ee30 0a46 	vsub.f32	s0, s0, s12
 8015178:	4770      	bx	lr
 801517a:	2b16      	cmp	r3, #22
 801517c:	dc11      	bgt.n	80151a2 <expm1f+0x1de>
 801517e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8015182:	fa42 f303 	asr.w	r3, r2, r3
 8015186:	f1c3 537e 	rsb	r3, r3, #1065353216	; 0x3f800000
 801518a:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801518e:	ee07 3a90 	vmov	s15, r3
 8015192:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8015196:	ee10 3a10 	vmov	r3, s0
 801519a:	440b      	add	r3, r1
 801519c:	ee00 3a10 	vmov	s0, r3
 80151a0:	4770      	bx	lr
 80151a2:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 80151a6:	05db      	lsls	r3, r3, #23
 80151a8:	ee07 3a10 	vmov	s14, r3
 80151ac:	ee77 7a87 	vadd.f32	s15, s15, s14
 80151b0:	ee70 7a67 	vsub.f32	s15, s0, s15
 80151b4:	ee37 0a86 	vadd.f32	s0, s15, s12
 80151b8:	e7ed      	b.n	8015196 <expm1f+0x1d2>
 80151ba:	bf00      	nop
 80151bc:	4195b843 	.word	0x4195b843
 80151c0:	42b17217 	.word	0x42b17217
 80151c4:	0da24260 	.word	0x0da24260
 80151c8:	3eb17218 	.word	0x3eb17218
 80151cc:	3f851591 	.word	0x3f851591
 80151d0:	3f317180 	.word	0x3f317180
 80151d4:	3717f7d1 	.word	0x3717f7d1
 80151d8:	b717f7d1 	.word	0xb717f7d1
 80151dc:	b457edbb 	.word	0xb457edbb
 80151e0:	36867e54 	.word	0x36867e54
 80151e4:	bd088889 	.word	0xbd088889
 80151e8:	b8a670cd 	.word	0xb8a670cd
 80151ec:	3ad00d01 	.word	0x3ad00d01
 80151f0:	3fb8aa3b 	.word	0x3fb8aa3b
 80151f4:	7149f2ca 	.word	0x7149f2ca

080151f8 <fabsf>:
 80151f8:	ee10 3a10 	vmov	r3, s0
 80151fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015200:	ee00 3a10 	vmov	s0, r3
 8015204:	4770      	bx	lr
	...

08015208 <_close>:
 8015208:	4b02      	ldr	r3, [pc, #8]	; (8015214 <_close+0xc>)
 801520a:	2258      	movs	r2, #88	; 0x58
 801520c:	601a      	str	r2, [r3, #0]
 801520e:	f04f 30ff 	mov.w	r0, #4294967295
 8015212:	4770      	bx	lr
 8015214:	24001ea0 	.word	0x24001ea0

08015218 <_fstat>:
 8015218:	4b02      	ldr	r3, [pc, #8]	; (8015224 <_fstat+0xc>)
 801521a:	2258      	movs	r2, #88	; 0x58
 801521c:	601a      	str	r2, [r3, #0]
 801521e:	f04f 30ff 	mov.w	r0, #4294967295
 8015222:	4770      	bx	lr
 8015224:	24001ea0 	.word	0x24001ea0

08015228 <_getpid>:
 8015228:	4b02      	ldr	r3, [pc, #8]	; (8015234 <_getpid+0xc>)
 801522a:	2258      	movs	r2, #88	; 0x58
 801522c:	601a      	str	r2, [r3, #0]
 801522e:	f04f 30ff 	mov.w	r0, #4294967295
 8015232:	4770      	bx	lr
 8015234:	24001ea0 	.word	0x24001ea0

08015238 <_isatty>:
 8015238:	4b02      	ldr	r3, [pc, #8]	; (8015244 <_isatty+0xc>)
 801523a:	2258      	movs	r2, #88	; 0x58
 801523c:	601a      	str	r2, [r3, #0]
 801523e:	2000      	movs	r0, #0
 8015240:	4770      	bx	lr
 8015242:	bf00      	nop
 8015244:	24001ea0 	.word	0x24001ea0

08015248 <_kill>:
 8015248:	4b02      	ldr	r3, [pc, #8]	; (8015254 <_kill+0xc>)
 801524a:	2258      	movs	r2, #88	; 0x58
 801524c:	601a      	str	r2, [r3, #0]
 801524e:	f04f 30ff 	mov.w	r0, #4294967295
 8015252:	4770      	bx	lr
 8015254:	24001ea0 	.word	0x24001ea0

08015258 <_lseek>:
 8015258:	4b02      	ldr	r3, [pc, #8]	; (8015264 <_lseek+0xc>)
 801525a:	2258      	movs	r2, #88	; 0x58
 801525c:	601a      	str	r2, [r3, #0]
 801525e:	f04f 30ff 	mov.w	r0, #4294967295
 8015262:	4770      	bx	lr
 8015264:	24001ea0 	.word	0x24001ea0

08015268 <_read>:
 8015268:	4b02      	ldr	r3, [pc, #8]	; (8015274 <_read+0xc>)
 801526a:	2258      	movs	r2, #88	; 0x58
 801526c:	601a      	str	r2, [r3, #0]
 801526e:	f04f 30ff 	mov.w	r0, #4294967295
 8015272:	4770      	bx	lr
 8015274:	24001ea0 	.word	0x24001ea0

08015278 <_exit>:
 8015278:	e7fe      	b.n	8015278 <_exit>
	...

0801527c <_init>:
 801527c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801527e:	bf00      	nop
 8015280:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015282:	bc08      	pop	{r3}
 8015284:	469e      	mov	lr, r3
 8015286:	4770      	bx	lr

08015288 <_fini>:
 8015288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801528a:	bf00      	nop
 801528c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801528e:	bc08      	pop	{r3}
 8015290:	469e      	mov	lr, r3
 8015292:	4770      	bx	lr
