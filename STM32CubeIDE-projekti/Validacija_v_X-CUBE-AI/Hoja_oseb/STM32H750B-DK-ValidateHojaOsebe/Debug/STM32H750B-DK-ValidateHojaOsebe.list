
STM32H750B-DK-ValidateHojaOsebe.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015de4  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001618  08016088  08016088  00026088  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080176a0  080176a0  000276a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080176a8  080176a8  000276a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080176ac  080176ac  000276ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000008cc  24000000  080176b0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  240008cc  08017f7c  000308cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  2400092c  08017fdc  0003092c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001efc  240009a0  0801803c  000309a0  2**5
                  ALLOC
 10 ._user_heap_stack 00001000  20000000  20000000  00040000  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0003098c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000542f8  00000000  00000000  000309ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00009854  00000000  00000000  00084cb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0002c67a  00000000  00000000  0008e506  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002508  00000000  00000000  000bab80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00003f18  00000000  00000000  000bd088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0004a5bf  00000000  00000000  000c0fa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00053001  00000000  00000000  0010b55f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001b684a  00000000  00000000  0015e560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00314daa  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008254  00000000  00000000  00314dfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         000000b4  00000000  00000000  0031d050  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      00000183  00000000  00000000  0031d104  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240009a0 	.word	0x240009a0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801606c 	.word	0x0801606c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240009a4 	.word	0x240009a4
 80002dc:	0801606c 	.word	0x0801606c

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_frsub>:
 8000390:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000394:	e002      	b.n	800039c <__addsf3>
 8000396:	bf00      	nop

08000398 <__aeabi_fsub>:
 8000398:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800039c <__addsf3>:
 800039c:	0042      	lsls	r2, r0, #1
 800039e:	bf1f      	itttt	ne
 80003a0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80003a4:	ea92 0f03 	teqne	r2, r3
 80003a8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80003ac:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003b0:	d06a      	beq.n	8000488 <__addsf3+0xec>
 80003b2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80003b6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80003ba:	bfc1      	itttt	gt
 80003bc:	18d2      	addgt	r2, r2, r3
 80003be:	4041      	eorgt	r1, r0
 80003c0:	4048      	eorgt	r0, r1
 80003c2:	4041      	eorgt	r1, r0
 80003c4:	bfb8      	it	lt
 80003c6:	425b      	neglt	r3, r3
 80003c8:	2b19      	cmp	r3, #25
 80003ca:	bf88      	it	hi
 80003cc:	4770      	bxhi	lr
 80003ce:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80003d2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003d6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80003da:	bf18      	it	ne
 80003dc:	4240      	negne	r0, r0
 80003de:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003e2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80003e6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80003ea:	bf18      	it	ne
 80003ec:	4249      	negne	r1, r1
 80003ee:	ea92 0f03 	teq	r2, r3
 80003f2:	d03f      	beq.n	8000474 <__addsf3+0xd8>
 80003f4:	f1a2 0201 	sub.w	r2, r2, #1
 80003f8:	fa41 fc03 	asr.w	ip, r1, r3
 80003fc:	eb10 000c 	adds.w	r0, r0, ip
 8000400:	f1c3 0320 	rsb	r3, r3, #32
 8000404:	fa01 f103 	lsl.w	r1, r1, r3
 8000408:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800040c:	d502      	bpl.n	8000414 <__addsf3+0x78>
 800040e:	4249      	negs	r1, r1
 8000410:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000414:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000418:	d313      	bcc.n	8000442 <__addsf3+0xa6>
 800041a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800041e:	d306      	bcc.n	800042e <__addsf3+0x92>
 8000420:	0840      	lsrs	r0, r0, #1
 8000422:	ea4f 0131 	mov.w	r1, r1, rrx
 8000426:	f102 0201 	add.w	r2, r2, #1
 800042a:	2afe      	cmp	r2, #254	; 0xfe
 800042c:	d251      	bcs.n	80004d2 <__addsf3+0x136>
 800042e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000432:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000436:	bf08      	it	eq
 8000438:	f020 0001 	biceq.w	r0, r0, #1
 800043c:	ea40 0003 	orr.w	r0, r0, r3
 8000440:	4770      	bx	lr
 8000442:	0049      	lsls	r1, r1, #1
 8000444:	eb40 0000 	adc.w	r0, r0, r0
 8000448:	3a01      	subs	r2, #1
 800044a:	bf28      	it	cs
 800044c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000450:	d2ed      	bcs.n	800042e <__addsf3+0x92>
 8000452:	fab0 fc80 	clz	ip, r0
 8000456:	f1ac 0c08 	sub.w	ip, ip, #8
 800045a:	ebb2 020c 	subs.w	r2, r2, ip
 800045e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000462:	bfaa      	itet	ge
 8000464:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000468:	4252      	neglt	r2, r2
 800046a:	4318      	orrge	r0, r3
 800046c:	bfbc      	itt	lt
 800046e:	40d0      	lsrlt	r0, r2
 8000470:	4318      	orrlt	r0, r3
 8000472:	4770      	bx	lr
 8000474:	f092 0f00 	teq	r2, #0
 8000478:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800047c:	bf06      	itte	eq
 800047e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000482:	3201      	addeq	r2, #1
 8000484:	3b01      	subne	r3, #1
 8000486:	e7b5      	b.n	80003f4 <__addsf3+0x58>
 8000488:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800048c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000490:	bf18      	it	ne
 8000492:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000496:	d021      	beq.n	80004dc <__addsf3+0x140>
 8000498:	ea92 0f03 	teq	r2, r3
 800049c:	d004      	beq.n	80004a8 <__addsf3+0x10c>
 800049e:	f092 0f00 	teq	r2, #0
 80004a2:	bf08      	it	eq
 80004a4:	4608      	moveq	r0, r1
 80004a6:	4770      	bx	lr
 80004a8:	ea90 0f01 	teq	r0, r1
 80004ac:	bf1c      	itt	ne
 80004ae:	2000      	movne	r0, #0
 80004b0:	4770      	bxne	lr
 80004b2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80004b6:	d104      	bne.n	80004c2 <__addsf3+0x126>
 80004b8:	0040      	lsls	r0, r0, #1
 80004ba:	bf28      	it	cs
 80004bc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80004c0:	4770      	bx	lr
 80004c2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80004c6:	bf3c      	itt	cc
 80004c8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80004cc:	4770      	bxcc	lr
 80004ce:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80004d2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80004d6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004da:	4770      	bx	lr
 80004dc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80004e0:	bf16      	itet	ne
 80004e2:	4608      	movne	r0, r1
 80004e4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80004e8:	4601      	movne	r1, r0
 80004ea:	0242      	lsls	r2, r0, #9
 80004ec:	bf06      	itte	eq
 80004ee:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80004f2:	ea90 0f01 	teqeq	r0, r1
 80004f6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80004fa:	4770      	bx	lr

080004fc <__aeabi_ui2f>:
 80004fc:	f04f 0300 	mov.w	r3, #0
 8000500:	e004      	b.n	800050c <__aeabi_i2f+0x8>
 8000502:	bf00      	nop

08000504 <__aeabi_i2f>:
 8000504:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000508:	bf48      	it	mi
 800050a:	4240      	negmi	r0, r0
 800050c:	ea5f 0c00 	movs.w	ip, r0
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000518:	4601      	mov	r1, r0
 800051a:	f04f 0000 	mov.w	r0, #0
 800051e:	e01c      	b.n	800055a <__aeabi_l2f+0x2a>

08000520 <__aeabi_ul2f>:
 8000520:	ea50 0201 	orrs.w	r2, r0, r1
 8000524:	bf08      	it	eq
 8000526:	4770      	bxeq	lr
 8000528:	f04f 0300 	mov.w	r3, #0
 800052c:	e00a      	b.n	8000544 <__aeabi_l2f+0x14>
 800052e:	bf00      	nop

08000530 <__aeabi_l2f>:
 8000530:	ea50 0201 	orrs.w	r2, r0, r1
 8000534:	bf08      	it	eq
 8000536:	4770      	bxeq	lr
 8000538:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800053c:	d502      	bpl.n	8000544 <__aeabi_l2f+0x14>
 800053e:	4240      	negs	r0, r0
 8000540:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000544:	ea5f 0c01 	movs.w	ip, r1
 8000548:	bf02      	ittt	eq
 800054a:	4684      	moveq	ip, r0
 800054c:	4601      	moveq	r1, r0
 800054e:	2000      	moveq	r0, #0
 8000550:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000554:	bf08      	it	eq
 8000556:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800055a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800055e:	fabc f28c 	clz	r2, ip
 8000562:	3a08      	subs	r2, #8
 8000564:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000568:	db10      	blt.n	800058c <__aeabi_l2f+0x5c>
 800056a:	fa01 fc02 	lsl.w	ip, r1, r2
 800056e:	4463      	add	r3, ip
 8000570:	fa00 fc02 	lsl.w	ip, r0, r2
 8000574:	f1c2 0220 	rsb	r2, r2, #32
 8000578:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800057c:	fa20 f202 	lsr.w	r2, r0, r2
 8000580:	eb43 0002 	adc.w	r0, r3, r2
 8000584:	bf08      	it	eq
 8000586:	f020 0001 	biceq.w	r0, r0, #1
 800058a:	4770      	bx	lr
 800058c:	f102 0220 	add.w	r2, r2, #32
 8000590:	fa01 fc02 	lsl.w	ip, r1, r2
 8000594:	f1c2 0220 	rsb	r2, r2, #32
 8000598:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800059c:	fa21 f202 	lsr.w	r2, r1, r2
 80005a0:	eb43 0002 	adc.w	r0, r3, r2
 80005a4:	bf08      	it	eq
 80005a6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80005aa:	4770      	bx	lr

080005ac <__aeabi_uldivmod>:
 80005ac:	b953      	cbnz	r3, 80005c4 <__aeabi_uldivmod+0x18>
 80005ae:	b94a      	cbnz	r2, 80005c4 <__aeabi_uldivmod+0x18>
 80005b0:	2900      	cmp	r1, #0
 80005b2:	bf08      	it	eq
 80005b4:	2800      	cmpeq	r0, #0
 80005b6:	bf1c      	itt	ne
 80005b8:	f04f 31ff 	movne.w	r1, #4294967295
 80005bc:	f04f 30ff 	movne.w	r0, #4294967295
 80005c0:	f000 b996 	b.w	80008f0 <__aeabi_idiv0>
 80005c4:	f1ad 0c08 	sub.w	ip, sp, #8
 80005c8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80005cc:	f000 f828 	bl	8000620 <__udivmoddi4>
 80005d0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80005d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80005d8:	b004      	add	sp, #16
 80005da:	4770      	bx	lr
 80005dc:	0000      	movs	r0, r0
	...

080005e0 <__aeabi_d2ulz>:
 80005e0:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000610 <__aeabi_d2ulz+0x30>
 80005e4:	ec41 0b17 	vmov	d7, r0, r1
 80005e8:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000618 <__aeabi_d2ulz+0x38>
 80005ec:	ee27 6b06 	vmul.f64	d6, d7, d6
 80005f0:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80005f4:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80005f8:	eea4 7b45 	vfms.f64	d7, d4, d5
 80005fc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000600:	ee16 1a10 	vmov	r1, s12
 8000604:	ee17 0a90 	vmov	r0, s15
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop
 800060c:	f3af 8000 	nop.w
 8000610:	00000000 	.word	0x00000000
 8000614:	3df00000 	.word	0x3df00000
 8000618:	00000000 	.word	0x00000000
 800061c:	41f00000 	.word	0x41f00000

08000620 <__udivmoddi4>:
 8000620:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000624:	9d08      	ldr	r5, [sp, #32]
 8000626:	4604      	mov	r4, r0
 8000628:	468e      	mov	lr, r1
 800062a:	2b00      	cmp	r3, #0
 800062c:	d14d      	bne.n	80006ca <__udivmoddi4+0xaa>
 800062e:	428a      	cmp	r2, r1
 8000630:	4694      	mov	ip, r2
 8000632:	d969      	bls.n	8000708 <__udivmoddi4+0xe8>
 8000634:	fab2 f282 	clz	r2, r2
 8000638:	b152      	cbz	r2, 8000650 <__udivmoddi4+0x30>
 800063a:	fa01 f302 	lsl.w	r3, r1, r2
 800063e:	f1c2 0120 	rsb	r1, r2, #32
 8000642:	fa20 f101 	lsr.w	r1, r0, r1
 8000646:	fa0c fc02 	lsl.w	ip, ip, r2
 800064a:	ea41 0e03 	orr.w	lr, r1, r3
 800064e:	4094      	lsls	r4, r2
 8000650:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000654:	0c21      	lsrs	r1, r4, #16
 8000656:	fbbe f6f8 	udiv	r6, lr, r8
 800065a:	fa1f f78c 	uxth.w	r7, ip
 800065e:	fb08 e316 	mls	r3, r8, r6, lr
 8000662:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000666:	fb06 f107 	mul.w	r1, r6, r7
 800066a:	4299      	cmp	r1, r3
 800066c:	d90a      	bls.n	8000684 <__udivmoddi4+0x64>
 800066e:	eb1c 0303 	adds.w	r3, ip, r3
 8000672:	f106 30ff 	add.w	r0, r6, #4294967295
 8000676:	f080 811f 	bcs.w	80008b8 <__udivmoddi4+0x298>
 800067a:	4299      	cmp	r1, r3
 800067c:	f240 811c 	bls.w	80008b8 <__udivmoddi4+0x298>
 8000680:	3e02      	subs	r6, #2
 8000682:	4463      	add	r3, ip
 8000684:	1a5b      	subs	r3, r3, r1
 8000686:	b2a4      	uxth	r4, r4
 8000688:	fbb3 f0f8 	udiv	r0, r3, r8
 800068c:	fb08 3310 	mls	r3, r8, r0, r3
 8000690:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000694:	fb00 f707 	mul.w	r7, r0, r7
 8000698:	42a7      	cmp	r7, r4
 800069a:	d90a      	bls.n	80006b2 <__udivmoddi4+0x92>
 800069c:	eb1c 0404 	adds.w	r4, ip, r4
 80006a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80006a4:	f080 810a 	bcs.w	80008bc <__udivmoddi4+0x29c>
 80006a8:	42a7      	cmp	r7, r4
 80006aa:	f240 8107 	bls.w	80008bc <__udivmoddi4+0x29c>
 80006ae:	4464      	add	r4, ip
 80006b0:	3802      	subs	r0, #2
 80006b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80006b6:	1be4      	subs	r4, r4, r7
 80006b8:	2600      	movs	r6, #0
 80006ba:	b11d      	cbz	r5, 80006c4 <__udivmoddi4+0xa4>
 80006bc:	40d4      	lsrs	r4, r2
 80006be:	2300      	movs	r3, #0
 80006c0:	e9c5 4300 	strd	r4, r3, [r5]
 80006c4:	4631      	mov	r1, r6
 80006c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006ca:	428b      	cmp	r3, r1
 80006cc:	d909      	bls.n	80006e2 <__udivmoddi4+0xc2>
 80006ce:	2d00      	cmp	r5, #0
 80006d0:	f000 80ef 	beq.w	80008b2 <__udivmoddi4+0x292>
 80006d4:	2600      	movs	r6, #0
 80006d6:	e9c5 0100 	strd	r0, r1, [r5]
 80006da:	4630      	mov	r0, r6
 80006dc:	4631      	mov	r1, r6
 80006de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006e2:	fab3 f683 	clz	r6, r3
 80006e6:	2e00      	cmp	r6, #0
 80006e8:	d14a      	bne.n	8000780 <__udivmoddi4+0x160>
 80006ea:	428b      	cmp	r3, r1
 80006ec:	d302      	bcc.n	80006f4 <__udivmoddi4+0xd4>
 80006ee:	4282      	cmp	r2, r0
 80006f0:	f200 80f9 	bhi.w	80008e6 <__udivmoddi4+0x2c6>
 80006f4:	1a84      	subs	r4, r0, r2
 80006f6:	eb61 0303 	sbc.w	r3, r1, r3
 80006fa:	2001      	movs	r0, #1
 80006fc:	469e      	mov	lr, r3
 80006fe:	2d00      	cmp	r5, #0
 8000700:	d0e0      	beq.n	80006c4 <__udivmoddi4+0xa4>
 8000702:	e9c5 4e00 	strd	r4, lr, [r5]
 8000706:	e7dd      	b.n	80006c4 <__udivmoddi4+0xa4>
 8000708:	b902      	cbnz	r2, 800070c <__udivmoddi4+0xec>
 800070a:	deff      	udf	#255	; 0xff
 800070c:	fab2 f282 	clz	r2, r2
 8000710:	2a00      	cmp	r2, #0
 8000712:	f040 8092 	bne.w	800083a <__udivmoddi4+0x21a>
 8000716:	eba1 010c 	sub.w	r1, r1, ip
 800071a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800071e:	fa1f fe8c 	uxth.w	lr, ip
 8000722:	2601      	movs	r6, #1
 8000724:	0c20      	lsrs	r0, r4, #16
 8000726:	fbb1 f3f7 	udiv	r3, r1, r7
 800072a:	fb07 1113 	mls	r1, r7, r3, r1
 800072e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000732:	fb0e f003 	mul.w	r0, lr, r3
 8000736:	4288      	cmp	r0, r1
 8000738:	d908      	bls.n	800074c <__udivmoddi4+0x12c>
 800073a:	eb1c 0101 	adds.w	r1, ip, r1
 800073e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000742:	d202      	bcs.n	800074a <__udivmoddi4+0x12a>
 8000744:	4288      	cmp	r0, r1
 8000746:	f200 80cb 	bhi.w	80008e0 <__udivmoddi4+0x2c0>
 800074a:	4643      	mov	r3, r8
 800074c:	1a09      	subs	r1, r1, r0
 800074e:	b2a4      	uxth	r4, r4
 8000750:	fbb1 f0f7 	udiv	r0, r1, r7
 8000754:	fb07 1110 	mls	r1, r7, r0, r1
 8000758:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800075c:	fb0e fe00 	mul.w	lr, lr, r0
 8000760:	45a6      	cmp	lr, r4
 8000762:	d908      	bls.n	8000776 <__udivmoddi4+0x156>
 8000764:	eb1c 0404 	adds.w	r4, ip, r4
 8000768:	f100 31ff 	add.w	r1, r0, #4294967295
 800076c:	d202      	bcs.n	8000774 <__udivmoddi4+0x154>
 800076e:	45a6      	cmp	lr, r4
 8000770:	f200 80bb 	bhi.w	80008ea <__udivmoddi4+0x2ca>
 8000774:	4608      	mov	r0, r1
 8000776:	eba4 040e 	sub.w	r4, r4, lr
 800077a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800077e:	e79c      	b.n	80006ba <__udivmoddi4+0x9a>
 8000780:	f1c6 0720 	rsb	r7, r6, #32
 8000784:	40b3      	lsls	r3, r6
 8000786:	fa22 fc07 	lsr.w	ip, r2, r7
 800078a:	ea4c 0c03 	orr.w	ip, ip, r3
 800078e:	fa20 f407 	lsr.w	r4, r0, r7
 8000792:	fa01 f306 	lsl.w	r3, r1, r6
 8000796:	431c      	orrs	r4, r3
 8000798:	40f9      	lsrs	r1, r7
 800079a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800079e:	fa00 f306 	lsl.w	r3, r0, r6
 80007a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80007a6:	0c20      	lsrs	r0, r4, #16
 80007a8:	fa1f fe8c 	uxth.w	lr, ip
 80007ac:	fb09 1118 	mls	r1, r9, r8, r1
 80007b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80007b4:	fb08 f00e 	mul.w	r0, r8, lr
 80007b8:	4288      	cmp	r0, r1
 80007ba:	fa02 f206 	lsl.w	r2, r2, r6
 80007be:	d90b      	bls.n	80007d8 <__udivmoddi4+0x1b8>
 80007c0:	eb1c 0101 	adds.w	r1, ip, r1
 80007c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80007c8:	f080 8088 	bcs.w	80008dc <__udivmoddi4+0x2bc>
 80007cc:	4288      	cmp	r0, r1
 80007ce:	f240 8085 	bls.w	80008dc <__udivmoddi4+0x2bc>
 80007d2:	f1a8 0802 	sub.w	r8, r8, #2
 80007d6:	4461      	add	r1, ip
 80007d8:	1a09      	subs	r1, r1, r0
 80007da:	b2a4      	uxth	r4, r4
 80007dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80007e0:	fb09 1110 	mls	r1, r9, r0, r1
 80007e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80007e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80007ec:	458e      	cmp	lr, r1
 80007ee:	d908      	bls.n	8000802 <__udivmoddi4+0x1e2>
 80007f0:	eb1c 0101 	adds.w	r1, ip, r1
 80007f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80007f8:	d26c      	bcs.n	80008d4 <__udivmoddi4+0x2b4>
 80007fa:	458e      	cmp	lr, r1
 80007fc:	d96a      	bls.n	80008d4 <__udivmoddi4+0x2b4>
 80007fe:	3802      	subs	r0, #2
 8000800:	4461      	add	r1, ip
 8000802:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000806:	fba0 9402 	umull	r9, r4, r0, r2
 800080a:	eba1 010e 	sub.w	r1, r1, lr
 800080e:	42a1      	cmp	r1, r4
 8000810:	46c8      	mov	r8, r9
 8000812:	46a6      	mov	lr, r4
 8000814:	d356      	bcc.n	80008c4 <__udivmoddi4+0x2a4>
 8000816:	d053      	beq.n	80008c0 <__udivmoddi4+0x2a0>
 8000818:	b15d      	cbz	r5, 8000832 <__udivmoddi4+0x212>
 800081a:	ebb3 0208 	subs.w	r2, r3, r8
 800081e:	eb61 010e 	sbc.w	r1, r1, lr
 8000822:	fa01 f707 	lsl.w	r7, r1, r7
 8000826:	fa22 f306 	lsr.w	r3, r2, r6
 800082a:	40f1      	lsrs	r1, r6
 800082c:	431f      	orrs	r7, r3
 800082e:	e9c5 7100 	strd	r7, r1, [r5]
 8000832:	2600      	movs	r6, #0
 8000834:	4631      	mov	r1, r6
 8000836:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800083a:	f1c2 0320 	rsb	r3, r2, #32
 800083e:	40d8      	lsrs	r0, r3
 8000840:	fa0c fc02 	lsl.w	ip, ip, r2
 8000844:	fa21 f303 	lsr.w	r3, r1, r3
 8000848:	4091      	lsls	r1, r2
 800084a:	4301      	orrs	r1, r0
 800084c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000850:	fa1f fe8c 	uxth.w	lr, ip
 8000854:	fbb3 f0f7 	udiv	r0, r3, r7
 8000858:	fb07 3610 	mls	r6, r7, r0, r3
 800085c:	0c0b      	lsrs	r3, r1, #16
 800085e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000862:	fb00 f60e 	mul.w	r6, r0, lr
 8000866:	429e      	cmp	r6, r3
 8000868:	fa04 f402 	lsl.w	r4, r4, r2
 800086c:	d908      	bls.n	8000880 <__udivmoddi4+0x260>
 800086e:	eb1c 0303 	adds.w	r3, ip, r3
 8000872:	f100 38ff 	add.w	r8, r0, #4294967295
 8000876:	d22f      	bcs.n	80008d8 <__udivmoddi4+0x2b8>
 8000878:	429e      	cmp	r6, r3
 800087a:	d92d      	bls.n	80008d8 <__udivmoddi4+0x2b8>
 800087c:	3802      	subs	r0, #2
 800087e:	4463      	add	r3, ip
 8000880:	1b9b      	subs	r3, r3, r6
 8000882:	b289      	uxth	r1, r1
 8000884:	fbb3 f6f7 	udiv	r6, r3, r7
 8000888:	fb07 3316 	mls	r3, r7, r6, r3
 800088c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000890:	fb06 f30e 	mul.w	r3, r6, lr
 8000894:	428b      	cmp	r3, r1
 8000896:	d908      	bls.n	80008aa <__udivmoddi4+0x28a>
 8000898:	eb1c 0101 	adds.w	r1, ip, r1
 800089c:	f106 38ff 	add.w	r8, r6, #4294967295
 80008a0:	d216      	bcs.n	80008d0 <__udivmoddi4+0x2b0>
 80008a2:	428b      	cmp	r3, r1
 80008a4:	d914      	bls.n	80008d0 <__udivmoddi4+0x2b0>
 80008a6:	3e02      	subs	r6, #2
 80008a8:	4461      	add	r1, ip
 80008aa:	1ac9      	subs	r1, r1, r3
 80008ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80008b0:	e738      	b.n	8000724 <__udivmoddi4+0x104>
 80008b2:	462e      	mov	r6, r5
 80008b4:	4628      	mov	r0, r5
 80008b6:	e705      	b.n	80006c4 <__udivmoddi4+0xa4>
 80008b8:	4606      	mov	r6, r0
 80008ba:	e6e3      	b.n	8000684 <__udivmoddi4+0x64>
 80008bc:	4618      	mov	r0, r3
 80008be:	e6f8      	b.n	80006b2 <__udivmoddi4+0x92>
 80008c0:	454b      	cmp	r3, r9
 80008c2:	d2a9      	bcs.n	8000818 <__udivmoddi4+0x1f8>
 80008c4:	ebb9 0802 	subs.w	r8, r9, r2
 80008c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80008cc:	3801      	subs	r0, #1
 80008ce:	e7a3      	b.n	8000818 <__udivmoddi4+0x1f8>
 80008d0:	4646      	mov	r6, r8
 80008d2:	e7ea      	b.n	80008aa <__udivmoddi4+0x28a>
 80008d4:	4620      	mov	r0, r4
 80008d6:	e794      	b.n	8000802 <__udivmoddi4+0x1e2>
 80008d8:	4640      	mov	r0, r8
 80008da:	e7d1      	b.n	8000880 <__udivmoddi4+0x260>
 80008dc:	46d0      	mov	r8, sl
 80008de:	e77b      	b.n	80007d8 <__udivmoddi4+0x1b8>
 80008e0:	3b02      	subs	r3, #2
 80008e2:	4461      	add	r1, ip
 80008e4:	e732      	b.n	800074c <__udivmoddi4+0x12c>
 80008e6:	4630      	mov	r0, r6
 80008e8:	e709      	b.n	80006fe <__udivmoddi4+0xde>
 80008ea:	4464      	add	r4, ip
 80008ec:	3802      	subs	r0, #2
 80008ee:	e742      	b.n	8000776 <__udivmoddi4+0x156>

080008f0 <__aeabi_idiv0>:
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop

080008f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008f4:	b510      	push	{r4, lr}
 80008f6:	b09c      	sub	sp, #112	; 0x70
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008f8:	224c      	movs	r2, #76	; 0x4c
 80008fa:	2100      	movs	r1, #0
 80008fc:	a809      	add	r0, sp, #36	; 0x24
 80008fe:	f012 fb5d 	bl	8012fbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000902:	2220      	movs	r2, #32
 8000904:	2100      	movs	r1, #0
 8000906:	a801      	add	r0, sp, #4
 8000908:	f012 fb58 	bl	8012fbc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800090c:	2002      	movs	r0, #2
 800090e:	f004 f87d 	bl	8004a0c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000912:	2300      	movs	r3, #0
 8000914:	9300      	str	r3, [sp, #0]
 8000916:	4b24      	ldr	r3, [pc, #144]	; (80009a8 <SystemClock_Config+0xb4>)
 8000918:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800091a:	f022 0201 	bic.w	r2, r2, #1
 800091e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000922:	4a22      	ldr	r2, [pc, #136]	; (80009ac <SystemClock_Config+0xb8>)
 8000924:	f003 0301 	and.w	r3, r3, #1
 8000928:	9300      	str	r3, [sp, #0]
 800092a:	6993      	ldr	r3, [r2, #24]
 800092c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000930:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000934:	6193      	str	r3, [r2, #24]
 8000936:	6993      	ldr	r3, [r2, #24]
 8000938:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800093c:	9300      	str	r3, [sp, #0]
 800093e:	9b00      	ldr	r3, [sp, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000940:	6993      	ldr	r3, [r2, #24]
 8000942:	0498      	lsls	r0, r3, #18
 8000944:	d5fc      	bpl.n	8000940 <SystemClock_Config+0x4c>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000946:	220b      	movs	r2, #11
 8000948:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800094c:	2401      	movs	r4, #1
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 22;
  RCC_OscInitStruct.PLL.PLLN = 169;
 800094e:	2116      	movs	r1, #22
  RCC_OscInitStruct.PLL.PLLQ = 4;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_0;
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000950:	a809      	add	r0, sp, #36	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000952:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000954:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000958:	2340      	movs	r3, #64	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 169;
 800095a:	22a9      	movs	r2, #169	; 0xa9
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800095c:	e9cd 430c 	strd	r4, r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLN = 169;
 8000960:	e9cd 1214 	strd	r1, r2, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000964:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000966:	2204      	movs	r2, #4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000968:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = 2;
 800096c:	9316      	str	r3, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = 2;
 800096e:	e9cd 2317 	strd	r2, r3, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_0;
 8000972:	2300      	movs	r3, #0
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000974:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000978:	931b      	str	r3, [sp, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800097a:	f004 fb25 	bl	8004fc8 <HAL_RCC_OscConfig>
 800097e:	b108      	cbz	r0, 8000984 <SystemClock_Config+0x90>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000980:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000982:	e7fe      	b.n	8000982 <SystemClock_Config+0x8e>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000984:	233f      	movs	r3, #63	; 0x3f
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000986:	4621      	mov	r1, r4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000988:	e9cd 3001 	strd	r3, r0, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800098c:	e9cd 0003 	strd	r0, r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000990:	e9cd 0005 	strd	r0, r0, [sp, #20]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000994:	e9cd 0007 	strd	r0, r0, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000998:	a801      	add	r0, sp, #4
 800099a:	f004 fe69 	bl	8005670 <HAL_RCC_ClockConfig>
 800099e:	b108      	cbz	r0, 80009a4 <SystemClock_Config+0xb0>
 80009a0:	b672      	cpsid	i
  while (1)
 80009a2:	e7fe      	b.n	80009a2 <SystemClock_Config+0xae>
}
 80009a4:	b01c      	add	sp, #112	; 0x70
 80009a6:	bd10      	pop	{r4, pc}
 80009a8:	58000400 	.word	0x58000400
 80009ac:	58024800 	.word	0x58024800

080009b0 <PeriphCommonClock_Config>:
{
 80009b0:	b500      	push	{lr}
 80009b2:	b0b1      	sub	sp, #196	; 0xc4
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009b4:	229c      	movs	r2, #156	; 0x9c
 80009b6:	2100      	movs	r1, #0
 80009b8:	a809      	add	r0, sp, #36	; 0x24
 80009ba:	f012 faff 	bl	8012fbc <memset>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80009be:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80009c2:	2300      	movs	r3, #0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009c4:	4668      	mov	r0, sp
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80009c6:	e9cd 2300 	strd	r2, r3, [sp]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 80009ca:	2302      	movs	r3, #2
 80009cc:	220c      	movs	r2, #12
 80009ce:	e9cd 3202 	strd	r3, r2, [sp, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 5;
 80009d2:	2205      	movs	r2, #5
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80009d4:	9306      	str	r3, [sp, #24]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80009d6:	e9cd 2304 	strd	r2, r3, [sp, #16]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80009da:	22c0      	movs	r2, #192	; 0xc0
 80009dc:	2320      	movs	r3, #32
 80009de:	e9cd 2307 	strd	r2, r3, [sp, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009e2:	f005 f8a1 	bl	8005b28 <HAL_RCCEx_PeriphCLKConfig>
 80009e6:	b108      	cbz	r0, 80009ec <PeriphCommonClock_Config+0x3c>
 80009e8:	b672      	cpsid	i
  while (1)
 80009ea:	e7fe      	b.n	80009ea <PeriphCommonClock_Config+0x3a>
}
 80009ec:	b031      	add	sp, #196	; 0xc4
 80009ee:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080009f4 <main>:
{
 80009f4:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 80009f8:	b0a9      	sub	sp, #164	; 0xa4
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80009fa:	2210      	movs	r2, #16
 80009fc:	2100      	movs	r1, #0
  MPU_InitStruct.Size = MPU_REGION_SIZE_16MB;
 80009fe:	f04f 4a10 	mov.w	sl, #2415919104	; 0x90000000
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000a02:	a81b      	add	r0, sp, #108	; 0x6c
 8000a04:	f012 fada 	bl	8012fbc <memset>
  HAL_MPU_Disable();
 8000a08:	f002 fc64 	bl	80032d4 <HAL_MPU_Disable>
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000a0c:	2301      	movs	r3, #1
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000a0e:	a81b      	add	r0, sp, #108	; 0x6c
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000a10:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
  MPU_InitStruct.Size = MPU_REGION_SIZE_16MB;
 8000a14:	4bcd      	ldr	r3, [pc, #820]	; (8000d4c <main+0x358>)
 8000a16:	e9cd a31c 	strd	sl, r3, [sp, #112]	; 0x70
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000a1a:	4bcd      	ldr	r3, [pc, #820]	; (8000d50 <main+0x35c>)
 8000a1c:	931e      	str	r3, [sp, #120]	; 0x78
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000a1e:	f002 fc77 	bl	8003310 <HAL_MPU_ConfigRegion>
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000a22:	2004      	movs	r0, #4
 8000a24:	f002 fc64 	bl	80032f0 <HAL_MPU_Enable>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000a28:	4bca      	ldr	r3, [pc, #808]	; (8000d54 <main+0x360>)
 8000a2a:	695a      	ldr	r2, [r3, #20]
 8000a2c:	f412 3200 	ands.w	r2, r2, #131072	; 0x20000
 8000a30:	d111      	bne.n	8000a56 <main+0x62>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000a32:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000a36:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000a3a:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000a3e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000a42:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000a46:	695a      	ldr	r2, [r3, #20]
 8000a48:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000a4c:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000a4e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000a52:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000a56:	4abf      	ldr	r2, [pc, #764]	; (8000d54 <main+0x360>)
 8000a58:	6953      	ldr	r3, [r2, #20]
 8000a5a:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 8000a5e:	d123      	bne.n	8000aa8 <main+0xb4>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000a60:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000a64:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000a68:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000a6c:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000a70:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000a74:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8000a78:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000a7a:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000a7e:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000a80:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000a84:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000a86:	f8c2 5260 	str.w	r5, [r2, #608]	; 0x260
      } while (ways-- != 0U);
 8000a8a:	d2f9      	bcs.n	8000a80 <main+0x8c>
    } while(sets-- != 0U);
 8000a8c:	3b20      	subs	r3, #32
 8000a8e:	f113 0f20 	cmn.w	r3, #32
 8000a92:	d1f2      	bne.n	8000a7a <main+0x86>
 8000a94:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000a98:	6953      	ldr	r3, [r2, #20]
 8000a9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a9e:	6153      	str	r3, [r2, #20]
 8000aa0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000aa4:	f3bf 8f6f 	isb	sy
  HAL_Init();
 8000aa8:	f001 ff26 	bl	80028f8 <HAL_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aac:	2702      	movs	r7, #2
  SystemClock_Config();
 8000aae:	f7ff ff21 	bl	80008f4 <SystemClock_Config>
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab2:	2400      	movs	r4, #0
  PeriphCommonClock_Config();
 8000ab4:	f7ff ff7c 	bl	80009b0 <PeriphCommonClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab8:	2214      	movs	r2, #20
 8000aba:	2100      	movs	r1, #0
 8000abc:	a81b      	add	r0, sp, #108	; 0x6c
 8000abe:	f012 fa7d 	bl	8012fbc <memset>
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000ac2:	4ba5      	ldr	r3, [pc, #660]	; (8000d58 <main+0x364>)
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000ac4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ac8:	48a4      	ldr	r0, [pc, #656]	; (8000d5c <main+0x368>)
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000aca:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
  GPIO_InitStruct.Pin = LCD_DISPD7_Pin;
 8000ace:	f04f 0a80 	mov.w	sl, #128	; 0x80
  GPIO_InitStruct.Pin = B1_Pin;
 8000ad2:	f44f 5600 	mov.w	r6, #8192	; 0x2000
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000ad6:	2501      	movs	r5, #1
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000ad8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8000adc:	f04f 0906 	mov.w	r9, #6
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ae0:	f44f 1888 	mov.w	r8, #1114112	; 0x110000
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000ae4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000ae8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000aec:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8000af0:	9203      	str	r2, [sp, #12]
 8000af2:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000af4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000af8:	f042 0202 	orr.w	r2, r2, #2
 8000afc:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000b00:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000b04:	f002 0202 	and.w	r2, r2, #2
 8000b08:	9204      	str	r2, [sp, #16]
 8000b0a:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000b0c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000b10:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000b14:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000b18:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000b1c:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8000b20:	9205      	str	r2, [sp, #20]
 8000b22:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b24:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000b28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000b2c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000b30:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000b34:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8000b38:	9206      	str	r2, [sp, #24]
 8000b3a:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b3c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000b40:	f042 0204 	orr.w	r2, r2, #4
 8000b44:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000b48:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000b4c:	f002 0204 	and.w	r2, r2, #4
 8000b50:	9207      	str	r2, [sp, #28]
 8000b52:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b54:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000b58:	f042 0201 	orr.w	r2, r2, #1
 8000b5c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000b60:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000b64:	f002 0201 	and.w	r2, r2, #1
 8000b68:	9208      	str	r2, [sp, #32]
 8000b6a:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b6c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000b70:	f042 0210 	orr.w	r2, r2, #16
 8000b74:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000b78:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000b7c:	f002 0210 	and.w	r2, r2, #16
 8000b80:	9209      	str	r2, [sp, #36]	; 0x24
 8000b82:	9a09      	ldr	r2, [sp, #36]	; 0x24
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000b84:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000b88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000b8c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000b90:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000b94:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8000b98:	920a      	str	r2, [sp, #40]	; 0x28
 8000b9a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b9c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000ba0:	f042 0208 	orr.w	r2, r2, #8
 8000ba4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000ba8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000bac:	f002 0208 	and.w	r2, r2, #8
 8000bb0:	920b      	str	r2, [sp, #44]	; 0x2c
 8000bb2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bb4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000bb8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000bbc:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000bc0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000bc4:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8000bc8:	920c      	str	r2, [sp, #48]	; 0x30
 8000bca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000bcc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000bd0:	f042 0220 	orr.w	r2, r2, #32
 8000bd4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000bd8:	2200      	movs	r2, #0
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000bda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bde:	f003 0320 	and.w	r3, r3, #32
 8000be2:	930d      	str	r3, [sp, #52]	; 0x34
 8000be4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000be6:	f003 f961 	bl	8003eac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8000bea:	2200      	movs	r2, #0
 8000bec:	2104      	movs	r1, #4
 8000bee:	485c      	ldr	r0, [pc, #368]	; (8000d60 <main+0x36c>)
 8000bf0:	f003 f95c 	bl	8003eac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bfa:	485a      	ldr	r0, [pc, #360]	; (8000d64 <main+0x370>)
 8000bfc:	f003 f956 	bl	8003eac <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c00:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000c04:	a91b      	add	r1, sp, #108	; 0x6c
 8000c06:	4858      	ldr	r0, [pc, #352]	; (8000d68 <main+0x374>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c08:	e9cd 371b 	strd	r3, r7, [sp, #108]	; 0x6c
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8000c0c:	2303      	movs	r3, #3
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0e:	e9cd 441d 	strd	r4, r4, [sp, #116]	; 0x74
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8000c12:	931f      	str	r3, [sp, #124]	; 0x7c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000c14:	f003 f85e 	bl	8003cd4 <HAL_GPIO_Init>
  HAL_GPIO_Init(LCD_DISPD7_GPIO_Port, &GPIO_InitStruct);
 8000c18:	a91b      	add	r1, sp, #108	; 0x6c
 8000c1a:	4854      	ldr	r0, [pc, #336]	; (8000d6c <main+0x378>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1c:	941d      	str	r4, [sp, #116]	; 0x74
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c1e:	e9cd a41b 	strd	sl, r4, [sp, #108]	; 0x6c
  HAL_GPIO_Init(LCD_DISPD7_GPIO_Port, &GPIO_InitStruct);
 8000c22:	f003 f857 	bl	8003cd4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
 8000c26:	2330      	movs	r3, #48	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c28:	a91b      	add	r1, sp, #108	; 0x6c
 8000c2a:	4851      	ldr	r0, [pc, #324]	; (8000d70 <main+0x37c>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2c:	e9cd 371b 	strd	r3, r7, [sp, #108]	; 0x6c
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI4;
 8000c30:	230a      	movs	r3, #10
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c32:	e9cd 441d 	strd	r4, r4, [sp, #116]	; 0x74
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI4;
 8000c36:	931f      	str	r3, [sp, #124]	; 0x7c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c38:	f003 f84c 	bl	8003cd4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_OTG_FS2_ID_Pin|OTG_FS2_PSO_Pin;
 8000c3c:	f44f 6384 	mov.w	r3, #1056	; 0x420
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c40:	a91b      	add	r1, sp, #108	; 0x6c
 8000c42:	484c      	ldr	r0, [pc, #304]	; (8000d74 <main+0x380>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c44:	941d      	str	r4, [sp, #116]	; 0x74
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c46:	e9cd 341b 	strd	r3, r4, [sp, #108]	; 0x6c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c4a:	f003 f843 	bl	8003cd4 <HAL_GPIO_Init>
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c4e:	a91b      	add	r1, sp, #108	; 0x6c
 8000c50:	4849      	ldr	r0, [pc, #292]	; (8000d78 <main+0x384>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c52:	941d      	str	r4, [sp, #116]	; 0x74
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c54:	e9cd 641b 	strd	r6, r4, [sp, #108]	; 0x6c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c58:	f003 f83c 	bl	8003cd4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000c5c:	f44f 7380 	mov.w	r3, #256	; 0x100
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c60:	a91b      	add	r1, sp, #108	; 0x6c
 8000c62:	4844      	ldr	r0, [pc, #272]	; (8000d74 <main+0x380>)
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000c64:	951f      	str	r5, [sp, #124]	; 0x7c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c66:	e9cd 371b 	strd	r3, r7, [sp, #108]	; 0x6c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6a:	e9cd 441d 	strd	r4, r4, [sp, #116]	; 0x74
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c6e:	f003 f831 	bl	8003cd4 <HAL_GPIO_Init>
  HAL_GPIO_Init(audio_Int_GPIO_Port, &GPIO_InitStruct);
 8000c72:	a91b      	add	r1, sp, #108	; 0x6c
 8000c74:	4841      	ldr	r0, [pc, #260]	; (8000d7c <main+0x388>)
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8000c76:	f8cd 907c 	str.w	r9, [sp, #124]	; 0x7c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c7a:	e9cd a71b 	strd	sl, r7, [sp, #108]	; 0x6c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7e:	e9cd 441d 	strd	r4, r4, [sp, #116]	; 0x74
  HAL_GPIO_Init(audio_Int_GPIO_Port, &GPIO_InitStruct);
 8000c82:	f003 f827 	bl	8003cd4 <HAL_GPIO_Init>
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c86:	a91b      	add	r1, sp, #108	; 0x6c
 8000c88:	4834      	ldr	r0, [pc, #208]	; (8000d5c <main+0x368>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c8a:	e9cd 651b 	strd	r6, r5, [sp, #108]	; 0x6c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c8e:	2604      	movs	r6, #4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c90:	e9cd 441d 	strd	r4, r4, [sp, #116]	; 0x74
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c94:	f003 f81e 	bl	8003cd4 <HAL_GPIO_Init>
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000c98:	a91b      	add	r1, sp, #108	; 0x6c
 8000c9a:	4838      	ldr	r0, [pc, #224]	; (8000d7c <main+0x388>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9c:	941d      	str	r4, [sp, #116]	; 0x74
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c9e:	e9cd 681b 	strd	r6, r8, [sp, #108]	; 0x6c
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000ca2:	f003 f817 	bl	8003cd4 <HAL_GPIO_Init>
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 8000ca6:	a91b      	add	r1, sp, #108	; 0x6c
 8000ca8:	4835      	ldr	r0, [pc, #212]	; (8000d80 <main+0x38c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000caa:	941d      	str	r4, [sp, #116]	; 0x74
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cac:	e9cd 541b 	strd	r5, r4, [sp, #108]	; 0x6c
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 8000cb0:	f003 f810 	bl	8003cd4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OTG_FS2_OverCurrent_Pin;
 8000cb4:	f44f 6300 	mov.w	r3, #2048	; 0x800
  HAL_GPIO_Init(OTG_FS2_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000cb8:	a91b      	add	r1, sp, #108	; 0x6c
 8000cba:	482b      	ldr	r0, [pc, #172]	; (8000d68 <main+0x374>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbc:	941d      	str	r4, [sp, #116]	; 0x74
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cbe:	e9cd 381b 	strd	r3, r8, [sp, #108]	; 0x6c
  HAL_GPIO_Init(OTG_FS2_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000cc2:	f003 f807 	bl	8003cd4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000cc6:	2340      	movs	r3, #64	; 0x40
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc8:	a91b      	add	r1, sp, #108	; 0x6c
 8000cca:	482a      	ldr	r0, [pc, #168]	; (8000d74 <main+0x380>)
  hadc1.Instance = ADC1;
 8000ccc:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8000d88 <main+0x394>
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd0:	e9cd 371b 	strd	r3, r7, [sp, #108]	; 0x6c
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8000cd4:	2309      	movs	r3, #9
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd6:	e9cd 441d 	strd	r4, r4, [sp, #116]	; 0x74
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8000cda:	931f      	str	r3, [sp, #124]	; 0x7c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cdc:	f002 fffa 	bl	8003cd4 <HAL_GPIO_Init>
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8000ce0:	a91b      	add	r1, sp, #108	; 0x6c
 8000ce2:	481f      	ldr	r0, [pc, #124]	; (8000d60 <main+0x36c>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ce4:	e9cd 651b 	strd	r6, r5, [sp, #108]	; 0x6c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce8:	e9cd 441d 	strd	r4, r4, [sp, #116]	; 0x74
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8000cec:	f002 fff2 	bl	8003cd4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_RST_Pin;
 8000cf0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  HAL_GPIO_Init(LCD_RST_GPIO_Port, &GPIO_InitStruct);
 8000cf4:	a91b      	add	r1, sp, #108	; 0x6c
 8000cf6:	481b      	ldr	r0, [pc, #108]	; (8000d64 <main+0x370>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf8:	e9cd 351b 	strd	r3, r5, [sp, #108]	; 0x6c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfc:	e9cd 441d 	strd	r4, r4, [sp, #116]	; 0x74
  HAL_GPIO_Init(LCD_RST_GPIO_Port, &GPIO_InitStruct);
 8000d00:	f002 ffe8 	bl	8003cd4 <HAL_GPIO_Init>
  ADC_ChannelConfTypeDef sConfig = {0};
 8000d04:	221c      	movs	r2, #28
 8000d06:	4621      	mov	r1, r4
 8000d08:	a81b      	add	r0, sp, #108	; 0x6c
  ADC_MultiModeTypeDef multimode = {0};
 8000d0a:	9410      	str	r4, [sp, #64]	; 0x40
 8000d0c:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
  ADC_ChannelConfTypeDef sConfig = {0};
 8000d10:	f012 f954 	bl	8012fbc <memset>
  hadc1.Instance = ADC1;
 8000d14:	4b1b      	ldr	r3, [pc, #108]	; (8000d84 <main+0x390>)
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d16:	4640      	mov	r0, r8
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000d18:	f8a8 4014 	strh.w	r4, [r8, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d1c:	f8c8 6010 	str.w	r6, [r8, #16]
  hadc1.Init.NbrOfConversion = 1;
 8000d20:	f8c8 5018 	str.w	r5, [r8, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d24:	f888 401c 	strb.w	r4, [r8, #28]
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000d28:	f8c8 4034 	str.w	r4, [r8, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000d2c:	f888 4038 	strb.w	r4, [r8, #56]	; 0x38
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000d30:	e9c8 3400 	strd	r3, r4, [r8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d34:	e9c8 4402 	strd	r4, r4, [r8, #8]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d38:	e9c8 4409 	strd	r4, r4, [r8, #36]	; 0x24
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000d3c:	e9c8 440b 	strd	r4, r4, [r8, #44]	; 0x2c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d40:	f002 f8d0 	bl	8002ee4 <HAL_ADC_Init>
 8000d44:	b310      	cbz	r0, 8000d8c <main+0x398>
  __ASM volatile ("cpsid i" : : : "memory");
 8000d46:	b672      	cpsid	i
  while (1)
 8000d48:	e7fe      	b.n	8000d48 <main+0x354>
 8000d4a:	bf00      	nop
 8000d4c:	03000017 	.word	0x03000017
 8000d50:	01010000 	.word	0x01010000
 8000d54:	e000ed00 	.word	0xe000ed00
 8000d58:	58024400 	.word	0x58024400
 8000d5c:	58022000 	.word	0x58022000
 8000d60:	58022400 	.word	0x58022400
 8000d64:	58020400 	.word	0x58020400
 8000d68:	58021c00 	.word	0x58021c00
 8000d6c:	58020c00 	.word	0x58020c00
 8000d70:	58021000 	.word	0x58021000
 8000d74:	58020000 	.word	0x58020000
 8000d78:	58020800 	.word	0x58020800
 8000d7c:	58021800 	.word	0x58021800
 8000d80:	58022800 	.word	0x58022800
 8000d84:	40022000 	.word	0x40022000
 8000d88:	240009fc 	.word	0x240009fc
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000d8c:	900e      	str	r0, [sp, #56]	; 0x38
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000d8e:	a90e      	add	r1, sp, #56	; 0x38
 8000d90:	4640      	mov	r0, r8
 8000d92:	f002 f9b3 	bl	80030fc <HAL_ADCEx_MultiModeConfigChannel>
 8000d96:	b108      	cbz	r0, 8000d9c <main+0x3a8>
 8000d98:	b672      	cpsid	i
  while (1)
 8000d9a:	e7fe      	b.n	8000d9a <main+0x3a6>
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d9c:	f240 7bff 	movw	fp, #2047	; 0x7ff
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000da0:	a91b      	add	r1, sp, #108	; 0x6c
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000da2:	901d      	str	r0, [sp, #116]	; 0x74
  sConfig.Offset = 0;
 8000da4:	9020      	str	r0, [sp, #128]	; 0x80
  sConfig.OffsetSignedSaturation = DISABLE;
 8000da6:	f88d 0085 	strb.w	r0, [sp, #133]	; 0x85
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000daa:	4640      	mov	r0, r8
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000dac:	e9cd 591b 	strd	r5, r9, [sp, #108]	; 0x6c
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000db0:	e9cd b61e 	strd	fp, r6, [sp, #120]	; 0x78
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000db4:	f001 fe2e 	bl	8002a14 <HAL_ADC_ConfigChannel>
 8000db8:	4601      	mov	r1, r0
 8000dba:	b108      	cbz	r0, 8000dc0 <main+0x3cc>
 8000dbc:	b672      	cpsid	i
  while (1)
 8000dbe:	e7fe      	b.n	8000dbe <main+0x3ca>
  ADC_ChannelConfTypeDef sConfig = {0};
 8000dc0:	9001      	str	r0, [sp, #4]
 8000dc2:	221c      	movs	r2, #28
 8000dc4:	a81b      	add	r0, sp, #108	; 0x6c
  hadc2.Instance = ADC2;
 8000dc6:	4cb8      	ldr	r4, [pc, #736]	; (80010a8 <main+0x6b4>)
  ADC_ChannelConfTypeDef sConfig = {0};
 8000dc8:	f012 f8f8 	bl	8012fbc <memset>
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000dcc:	9901      	ldr	r1, [sp, #4]
  hadc2.Instance = ADC2;
 8000dce:	4bb7      	ldr	r3, [pc, #732]	; (80010ac <main+0x6b8>)
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000dd0:	4620      	mov	r0, r4
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000dd2:	82a1      	strh	r1, [r4, #20]
  hadc2.Instance = ADC2;
 8000dd4:	6023      	str	r3, [r4, #0]
  hadc2.Init.NbrOfConversion = 1;
 8000dd6:	61a5      	str	r5, [r4, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000dd8:	7721      	strb	r1, [r4, #28]
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000dda:	6361      	str	r1, [r4, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000ddc:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000de0:	e9c4 1101 	strd	r1, r1, [r4, #4]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000de4:	e9c4 1603 	strd	r1, r6, [r4, #12]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000de8:	e9c4 1109 	strd	r1, r1, [r4, #36]	; 0x24
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000dec:	e9c4 110b 	strd	r1, r1, [r4, #44]	; 0x2c
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000df0:	f002 f878 	bl	8002ee4 <HAL_ADC_Init>
 8000df4:	b108      	cbz	r0, 8000dfa <main+0x406>
 8000df6:	b672      	cpsid	i
  while (1)
 8000df8:	e7fe      	b.n	8000df8 <main+0x404>
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000dfa:	a91b      	add	r1, sp, #108	; 0x6c
  sConfig.OffsetSignedSaturation = DISABLE;
 8000dfc:	f88d 0085 	strb.w	r0, [sp, #133]	; 0x85
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e00:	e9cd 0b1d 	strd	r0, fp, [sp, #116]	; 0x74
  sConfig.Offset = 0;
 8000e04:	e9cd 601f 	strd	r6, r0, [sp, #124]	; 0x7c
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000e08:	4620      	mov	r0, r4
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e0a:	e9cd 591b 	strd	r5, r9, [sp, #108]	; 0x6c
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000e0e:	f001 fe01 	bl	8002a14 <HAL_ADC_ConfigChannel>
 8000e12:	4601      	mov	r1, r0
 8000e14:	b108      	cbz	r0, 8000e1a <main+0x426>
 8000e16:	b672      	cpsid	i
  while (1)
 8000e18:	e7fe      	b.n	8000e18 <main+0x424>
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e1a:	9001      	str	r0, [sp, #4]
 8000e1c:	221c      	movs	r2, #28
 8000e1e:	a81b      	add	r0, sp, #108	; 0x6c
  hadc3.Instance = ADC3;
 8000e20:	4ca3      	ldr	r4, [pc, #652]	; (80010b0 <main+0x6bc>)
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e22:	f012 f8cb 	bl	8012fbc <memset>
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8000e26:	9901      	ldr	r1, [sp, #4]
  hadc3.Instance = ADC3;
 8000e28:	4ba2      	ldr	r3, [pc, #648]	; (80010b4 <main+0x6c0>)
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000e2a:	4620      	mov	r0, r4
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000e2c:	82a1      	strh	r1, [r4, #20]
  hadc3.Instance = ADC3;
 8000e2e:	6023      	str	r3, [r4, #0]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e30:	6126      	str	r6, [r4, #16]
  hadc3.Init.NbrOfConversion = 1;
 8000e32:	61a5      	str	r5, [r4, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000e34:	7721      	strb	r1, [r4, #28]
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000e36:	6361      	str	r1, [r4, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000e38:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e3c:	e9c4 1102 	strd	r1, r1, [r4, #8]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e40:	e9c4 1109 	strd	r1, r1, [r4, #36]	; 0x24
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000e44:	e9c4 110b 	strd	r1, r1, [r4, #44]	; 0x2c
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000e48:	f002 f84c 	bl	8002ee4 <HAL_ADC_Init>
 8000e4c:	b108      	cbz	r0, 8000e52 <main+0x45e>
 8000e4e:	b672      	cpsid	i
  while (1)
 8000e50:	e7fe      	b.n	8000e50 <main+0x45c>
  sConfig.Channel = ADC_CHANNEL_7;
 8000e52:	4b99      	ldr	r3, [pc, #612]	; (80010b8 <main+0x6c4>)
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000e54:	a91b      	add	r1, sp, #108	; 0x6c
  sConfig.OffsetSignedSaturation = DISABLE;
 8000e56:	f88d 0085 	strb.w	r0, [sp, #133]	; 0x85
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e5a:	e9cd 0b1d 	strd	r0, fp, [sp, #116]	; 0x74
  sConfig.Offset = 0;
 8000e5e:	e9cd 601f 	strd	r6, r0, [sp, #124]	; 0x7c
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000e62:	4620      	mov	r0, r4
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e64:	e9cd 391b 	strd	r3, r9, [sp, #108]	; 0x6c
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000e68:	f001 fdd4 	bl	8002a14 <HAL_ADC_ConfigChannel>
 8000e6c:	b108      	cbz	r0, 8000e72 <main+0x47e>
 8000e6e:	b672      	cpsid	i
  while (1)
 8000e70:	e7fe      	b.n	8000e70 <main+0x47c>
  heth.Instance = ETH;
 8000e72:	4b92      	ldr	r3, [pc, #584]	; (80010bc <main+0x6c8>)
  MACAddr[2] = 0xE1;
 8000e74:	21e1      	movs	r1, #225	; 0xe1
  heth.Instance = ETH;
 8000e76:	4a92      	ldr	r2, [pc, #584]	; (80010c0 <main+0x6cc>)
  heth.Init.MediaInterface = HAL_ETH_MII_MODE;
 8000e78:	7218      	strb	r0, [r3, #8]
  heth.Instance = ETH;
 8000e7a:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000e7c:	4a91      	ldr	r2, [pc, #580]	; (80010c4 <main+0x6d0>)
 8000e7e:	7010      	strb	r0, [r2, #0]
  MACAddr[3] = 0x00;
 8000e80:	70d0      	strb	r0, [r2, #3]
  MACAddr[4] = 0x00;
 8000e82:	7110      	strb	r0, [r2, #4]
  MACAddr[5] = 0x00;
 8000e84:	7150      	strb	r0, [r2, #5]
  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000e86:	4618      	mov	r0, r3
  MACAddr[1] = 0x80;
 8000e88:	f882 a001 	strb.w	sl, [r2, #1]
  MACAddr[2] = 0xE1;
 8000e8c:	7091      	strb	r1, [r2, #2]
  heth.Init.MACAddr = &MACAddr[0];
 8000e8e:	605a      	str	r2, [r3, #4]
  heth.Init.TxDesc = DMATxDscrTab;
 8000e90:	4a8d      	ldr	r2, [pc, #564]	; (80010c8 <main+0x6d4>)
 8000e92:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000e94:	4a8d      	ldr	r2, [pc, #564]	; (80010cc <main+0x6d8>)
 8000e96:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000e98:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000e9c:	615a      	str	r2, [r3, #20]
  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000e9e:	f002 fc1f 	bl	80036e0 <HAL_ETH_Init>
 8000ea2:	4604      	mov	r4, r0
 8000ea4:	b108      	cbz	r0, 8000eaa <main+0x4b6>
 8000ea6:	b672      	cpsid	i
  while (1)
 8000ea8:	e7fe      	b.n	8000ea8 <main+0x4b4>
  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000eaa:	f8df 8254 	ldr.w	r8, [pc, #596]	; 8001100 <main+0x70c>
 8000eae:	4601      	mov	r1, r0
 8000eb0:	2234      	movs	r2, #52	; 0x34
 8000eb2:	f108 0004 	add.w	r0, r8, #4
 8000eb6:	f012 f881 	bl	8012fbc <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000eba:	2321      	movs	r3, #33	; 0x21
  hfdcan1.Instance = FDCAN1;
 8000ebc:	4884      	ldr	r0, [pc, #528]	; (80010d0 <main+0x6dc>)
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000ebe:	f8c8 3000 	str.w	r3, [r8]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000ec2:	f44f 3340 	mov.w	r3, #196608	; 0x30000
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000ec6:	8204      	strh	r4, [r0, #16]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000ec8:	f8c8 3014 	str.w	r3, [r8, #20]
  hfdcan1.Init.NominalPrescaler = 16;
 8000ecc:	f04f 0810 	mov.w	r8, #16
  hfdcan1.Instance = FDCAN1;
 8000ed0:	4b80      	ldr	r3, [pc, #512]	; (80010d4 <main+0x6e0>)
  hfdcan1.Init.ProtocolException = DISABLE;
 8000ed2:	7484      	strb	r4, [r0, #18]
  hfdcan1.Instance = FDCAN1;
 8000ed4:	6003      	str	r3, [r0, #0]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000ed6:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000eda:	e9c0 8505 	strd	r8, r5, [r0, #20]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000ede:	e9c0 7707 	strd	r7, r7, [r0, #28]
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000ee2:	e9c0 5509 	strd	r5, r5, [r0, #36]	; 0x24
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000ee6:	e9c0 550b 	strd	r5, r5, [r0, #44]	; 0x2c
  hfdcan1.Init.StdFiltersNbr = 0;
 8000eea:	e9c0 440d 	strd	r4, r4, [r0, #52]	; 0x34
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8000eee:	e9c0 440f 	strd	r4, r4, [r0, #60]	; 0x3c
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000ef2:	e9c0 6411 	strd	r6, r4, [r0, #68]	; 0x44
  hfdcan1.Init.RxBuffersNbr = 0;
 8000ef6:	e9c0 6413 	strd	r6, r4, [r0, #76]	; 0x4c
  hfdcan1.Init.TxEventsNbr = 0;
 8000efa:	e9c0 6415 	strd	r6, r4, [r0, #84]	; 0x54
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8000efe:	e9c0 4417 	strd	r4, r4, [r0, #92]	; 0x5c
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000f02:	e9c0 4619 	strd	r4, r6, [r0, #100]	; 0x64
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000f06:	f002 fcfb 	bl	8003900 <HAL_FDCAN_Init>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	b108      	cbz	r0, 8000f12 <main+0x51e>
 8000f0e:	b672      	cpsid	i
  while (1)
 8000f10:	e7fe      	b.n	8000f10 <main+0x51c>
  hfdcan2.Instance = FDCAN2;
 8000f12:	4871      	ldr	r0, [pc, #452]	; (80010d8 <main+0x6e4>)
 8000f14:	4a71      	ldr	r2, [pc, #452]	; (80010dc <main+0x6e8>)
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8000f16:	8203      	strh	r3, [r0, #16]
  hfdcan2.Instance = FDCAN2;
 8000f18:	6002      	str	r2, [r0, #0]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000f1a:	7483      	strb	r3, [r0, #18]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000f1c:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8000f20:	e9c0 8505 	strd	r8, r5, [r0, #20]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8000f24:	e9c0 7707 	strd	r7, r7, [r0, #28]
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8000f28:	e9c0 5509 	strd	r5, r5, [r0, #36]	; 0x24
  hfdcan2.Init.DataTimeSeg2 = 1;
 8000f2c:	e9c0 550b 	strd	r5, r5, [r0, #44]	; 0x2c
  hfdcan2.Init.StdFiltersNbr = 0;
 8000f30:	e9c0 330d 	strd	r3, r3, [r0, #52]	; 0x34
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 8000f34:	e9c0 330f 	strd	r3, r3, [r0, #60]	; 0x3c
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 8000f38:	e9c0 6311 	strd	r6, r3, [r0, #68]	; 0x44
  hfdcan2.Init.RxBuffersNbr = 0;
 8000f3c:	e9c0 6313 	strd	r6, r3, [r0, #76]	; 0x4c
  hfdcan2.Init.TxEventsNbr = 0;
 8000f40:	e9c0 6315 	strd	r6, r3, [r0, #84]	; 0x54
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 8000f44:	e9c0 3317 	strd	r3, r3, [r0, #92]	; 0x5c
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000f48:	e9c0 3619 	strd	r3, r6, [r0, #100]	; 0x64
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000f4c:	f002 fcd8 	bl	8003900 <HAL_FDCAN_Init>
 8000f50:	b108      	cbz	r0, 8000f56 <main+0x562>
 8000f52:	b672      	cpsid	i
  while (1)
 8000f54:	e7fe      	b.n	8000f54 <main+0x560>
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000f56:	4862      	ldr	r0, [pc, #392]	; (80010e0 <main+0x6ec>)
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000f58:	2501      	movs	r5, #1
 8000f5a:	4b62      	ldr	r3, [pc, #392]	; (80010e4 <main+0x6f0>)
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000f5c:	2200      	movs	r2, #0
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8000f5e:	2180      	movs	r1, #128	; 0x80
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000f60:	2640      	movs	r6, #64	; 0x40
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000f62:	6282      	str	r2, [r0, #40]	; 0x28
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000f64:	e9c0 3500 	strd	r3, r5, [r0]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000f68:	2304      	movs	r3, #4
 8000f6a:	e9c0 2302 	strd	r2, r3, [r0, #8]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000f6e:	2310      	movs	r3, #16
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000f70:	e9c0 1206 	strd	r1, r2, [r0, #24]
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000f74:	a91b      	add	r1, sp, #108	; 0x6c
  SdramTiming.RCDDelay = 16;
 8000f76:	9321      	str	r3, [sp, #132]	; 0x84
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000f78:	e9c0 3604 	strd	r3, r6, [r0, #16]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000f7c:	e9c0 2208 	strd	r2, r2, [r0, #32]
  SdramTiming.ExitSelfRefreshDelay = 16;
 8000f80:	e9cd 331b 	strd	r3, r3, [sp, #108]	; 0x6c
  SdramTiming.RowCycleDelay = 16;
 8000f84:	e9cd 331d 	strd	r3, r3, [sp, #116]	; 0x74
  SdramTiming.RPDelay = 16;
 8000f88:	e9cd 331f 	strd	r3, r3, [sp, #124]	; 0x7c
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000f8c:	f006 f8fa 	bl	8007184 <HAL_SDRAM_Init>
 8000f90:	4681      	mov	r9, r0
 8000f92:	b108      	cbz	r0, 8000f98 <main+0x5a4>
 8000f94:	b672      	cpsid	i
  while (1)
 8000f96:	e7fe      	b.n	8000f96 <main+0x5a2>
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000f98:	4601      	mov	r1, r0
 8000f9a:	2234      	movs	r2, #52	; 0x34
 8000f9c:	a80e      	add	r0, sp, #56	; 0x38
  hltdc.Instance = LTDC;
 8000f9e:	4f52      	ldr	r7, [pc, #328]	; (80010e8 <main+0x6f4>)
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000fa0:	f012 f80c 	bl	8012fbc <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8000fa4:	2234      	movs	r2, #52	; 0x34
 8000fa6:	4649      	mov	r1, r9
 8000fa8:	a81b      	add	r0, sp, #108	; 0x6c
 8000faa:	f012 f807 	bl	8012fbc <memset>
  hltdc.Instance = LTDC;
 8000fae:	4b4f      	ldr	r3, [pc, #316]	; (80010ec <main+0x6f8>)
  hltdc.Init.VerticalSync = 3;
 8000fb0:	2403      	movs	r4, #3
  hltdc.Init.AccumulatedVBP = 5;
 8000fb2:	f04f 0805 	mov.w	r8, #5
  hltdc.Init.AccumulatedActiveH = 485;
 8000fb6:	f240 2c8e 	movw	ip, #654	; 0x28e
  hltdc.Init.TotalHeigh = 487;
 8000fba:	f44f 7e25 	mov.w	lr, #660	; 0x294
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000fbe:	4638      	mov	r0, r7
  hltdc.Init.Backcolor.Blue = 0;
 8000fc0:	f8a7 9034 	strh.w	r9, [r7, #52]	; 0x34
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000fc4:	f8c7 9010 	str.w	r9, [r7, #16]
  hltdc.Init.Backcolor.Red = 0;
 8000fc8:	f887 9036 	strb.w	r9, [r7, #54]	; 0x36
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000fcc:	e9c7 3900 	strd	r3, r9, [r7]
  hltdc.Init.VerticalSync = 3;
 8000fd0:	2307      	movs	r3, #7
 8000fd2:	e9c7 3405 	strd	r3, r4, [r7, #20]
  hltdc.Init.AccumulatedVBP = 5;
 8000fd6:	230e      	movs	r3, #14
 8000fd8:	e9c7 3807 	strd	r3, r8, [r7, #28]
  hltdc.Init.AccumulatedActiveH = 485;
 8000fdc:	f240 13e5 	movw	r3, #485	; 0x1e5
 8000fe0:	e9c7 c309 	strd	ip, r3, [r7, #36]	; 0x24
  hltdc.Init.TotalHeigh = 487;
 8000fe4:	f240 13e7 	movw	r3, #487	; 0x1e7
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000fe8:	e9c7 9902 	strd	r9, r9, [r7, #8]
  hltdc.Init.TotalHeigh = 487;
 8000fec:	e9c7 e30b 	strd	lr, r3, [r7, #44]	; 0x2c
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000ff0:	f002 ffe8 	bl	8003fc4 <HAL_LTDC_Init>
 8000ff4:	4602      	mov	r2, r0
 8000ff6:	b108      	cbz	r0, 8000ffc <main+0x608>
 8000ff8:	b672      	cpsid	i
  while (1)
 8000ffa:	e7fe      	b.n	8000ffa <main+0x606>
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000ffc:	f44f 6980 	mov.w	r9, #1024	; 0x400
  pLayerCfg.Alpha0 = 0;
 8001000:	9014      	str	r0, [sp, #80]	; 0x50
  pLayerCfg.ImageHeight = 0;
 8001002:	9019      	str	r0, [sp, #100]	; 0x64
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001004:	a90e      	add	r1, sp, #56	; 0x38
  pLayerCfg.Backcolor.Blue = 0;
 8001006:	f8ad 0068 	strh.w	r0, [sp, #104]	; 0x68
  pLayerCfg.Backcolor.Red = 0;
 800100a:	f88d 006a 	strb.w	r0, [sp, #106]	; 0x6a
  pLayerCfg.WindowX1 = 0;
 800100e:	e9cd 000e 	strd	r0, r0, [sp, #56]	; 0x38
  pLayerCfg.WindowY1 = 0;
 8001012:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
  pLayerCfg.Alpha = 0;
 8001016:	e9cd 0012 	strd	r0, r0, [sp, #72]	; 0x48
  pLayerCfg.ImageWidth = 0;
 800101a:	e9cd 0017 	strd	r0, r0, [sp, #92]	; 0x5c
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800101e:	4638      	mov	r0, r7
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001020:	e9cd 9815 	strd	r9, r8, [sp, #84]	; 0x54
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001024:	f003 f83a 	bl	800409c <HAL_LTDC_ConfigLayer>
 8001028:	b108      	cbz	r0, 800102e <main+0x63a>
 800102a:	b672      	cpsid	i
  while (1)
 800102c:	e7fe      	b.n	800102c <main+0x638>
  pLayerCfg1.WindowX1 = 0;
 800102e:	e9cd 001b 	strd	r0, r0, [sp, #108]	; 0x6c
  pLayerCfg1.WindowY1 = 0;
 8001032:	e9cd 001d 	strd	r0, r0, [sp, #116]	; 0x74
  pLayerCfg1.Alpha = 0;
 8001036:	e9cd 001f 	strd	r0, r0, [sp, #124]	; 0x7c
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800103a:	e9cd 0921 	strd	r0, r9, [sp, #132]	; 0x84
  pLayerCfg1.FBStartAdress = 0;
 800103e:	e9cd 8023 	strd	r8, r0, [sp, #140]	; 0x8c
  pLayerCfg1.ImageHeight = 0;
 8001042:	e9cd 0025 	strd	r0, r0, [sp, #148]	; 0x94
  pLayerCfg1.Backcolor.Blue = 0;
 8001046:	f8ad 009c 	strh.w	r0, [sp, #156]	; 0x9c
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 800104a:	462a      	mov	r2, r5
  pLayerCfg1.Backcolor.Red = 0;
 800104c:	f88d 009e 	strb.w	r0, [sp, #158]	; 0x9e
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8001050:	a91b      	add	r1, sp, #108	; 0x6c
 8001052:	4638      	mov	r0, r7
 8001054:	f003 f822 	bl	800409c <HAL_LTDC_ConfigLayer>
 8001058:	4603      	mov	r3, r0
 800105a:	b108      	cbz	r0, 8001060 <main+0x66c>
 800105c:	b672      	cpsid	i
  while (1)
 800105e:	e7fe      	b.n	800105e <main+0x66a>
  hqspi.Instance = QUADSPI;
 8001060:	4823      	ldr	r0, [pc, #140]	; (80010f0 <main+0x6fc>)
  hqspi.Init.ClockPrescaler = 255;
 8001062:	27ff      	movs	r7, #255	; 0xff
 8001064:	4a23      	ldr	r2, [pc, #140]	; (80010f4 <main+0x700>)
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8001066:	6203      	str	r3, [r0, #32]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8001068:	e9c0 5302 	strd	r5, r3, [r0, #8]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800106c:	e9c0 5304 	strd	r5, r3, [r0, #16]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8001070:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hqspi.Init.ClockPrescaler = 255;
 8001074:	e9c0 2700 	strd	r2, r7, [r0]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001078:	f003 fdcc 	bl	8004c14 <HAL_QSPI_Init>
 800107c:	4603      	mov	r3, r0
 800107e:	b108      	cbz	r0, 8001084 <main+0x690>
 8001080:	b672      	cpsid	i
  while (1)
 8001082:	e7fe      	b.n	8001082 <main+0x68e>
  hrtc.Instance = RTC;
 8001084:	481c      	ldr	r0, [pc, #112]	; (80010f8 <main+0x704>)
 8001086:	4a1d      	ldr	r2, [pc, #116]	; (80010fc <main+0x708>)
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001088:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800108a:	6143      	str	r3, [r0, #20]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800108c:	e9c0 2300 	strd	r2, r3, [r0]
  hrtc.Init.AsynchPrediv = 127;
 8001090:	227f      	movs	r2, #127	; 0x7f
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001092:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hrtc.Init.SynchPrediv = 255;
 8001096:	e9c0 2702 	strd	r2, r7, [r0, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800109a:	f005 fe47 	bl	8006d2c <HAL_RTC_Init>
 800109e:	4603      	mov	r3, r0
 80010a0:	b380      	cbz	r0, 8001104 <main+0x710>
 80010a2:	b672      	cpsid	i
  while (1)
 80010a4:	e7fe      	b.n	80010a4 <main+0x6b0>
 80010a6:	bf00      	nop
 80010a8:	24000a60 	.word	0x24000a60
 80010ac:	40022100 	.word	0x40022100
 80010b0:	24000ac4 	.word	0x24000ac4
 80010b4:	58026000 	.word	0x58026000
 80010b8:	1d500080 	.word	0x1d500080
 80010bc:	24000b4c 	.word	0x24000b4c
 80010c0:	40028000 	.word	0x40028000
 80010c4:	240009bc 	.word	0x240009bc
 80010c8:	2400092c 	.word	0x2400092c
 80010cc:	240008cc 	.word	0x240008cc
 80010d0:	24000bfc 	.word	0x24000bfc
 80010d4:	4000a000 	.word	0x4000a000
 80010d8:	24000c9c 	.word	0x24000c9c
 80010dc:	4000a400 	.word	0x4000a400
 80010e0:	240016b8 	.word	0x240016b8
 80010e4:	52004140 	.word	0x52004140
 80010e8:	24000d3c 	.word	0x24000d3c
 80010ec:	50001000 	.word	0x50001000
 80010f0:	24001828 	.word	0x24001828
 80010f4:	52005000 	.word	0x52005000
 80010f8:	24001564 	.word	0x24001564
 80010fc:	58004000 	.word	0x58004000
 8001100:	240009c4 	.word	0x240009c4
  hsai_BlockA2.Instance = SAI2_Block_A;
 8001104:	4868      	ldr	r0, [pc, #416]	; (80012a8 <main+0x8b4>)
  hsai_BlockA2.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8001106:	f44f 7880 	mov.w	r8, #256	; 0x100
  hsai_BlockA2.Instance = SAI2_Block_A;
 800110a:	4a68      	ldr	r2, [pc, #416]	; (80012ac <main+0x8b8>)
  hsai_BlockA2.FrameInit.FrameLength = 8;
 800110c:	2708      	movs	r7, #8
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 800110e:	6443      	str	r3, [r0, #68]	; 0x44
  hsai_BlockA2.Instance = SAI2_Block_A;
 8001110:	6002      	str	r2, [r0, #0]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8001112:	4a67      	ldr	r2, [pc, #412]	; (80012b0 <main+0x8bc>)
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8001114:	6043      	str	r3, [r0, #4]
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001116:	6503      	str	r3, [r0, #80]	; 0x50
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8001118:	6083      	str	r3, [r0, #8]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800111a:	61c3      	str	r3, [r0, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800111c:	60c3      	str	r3, [r0, #12]
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800111e:	6343      	str	r3, [r0, #52]	; 0x34
  hsai_BlockA2.Init.PdmInit.Activation = DISABLE;
 8001120:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8001124:	6743      	str	r3, [r0, #116]	; 0x74
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8001126:	6202      	str	r2, [r0, #32]
  hsai_BlockA2.Init.PdmInit.MicPairsNbr = 1;
 8001128:	63c5      	str	r5, [r0, #60]	; 0x3c
  hsai_BlockA2.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 800112a:	f8c0 8040 	str.w	r8, [r0, #64]	; 0x40
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 800112e:	e9c0 6312 	strd	r6, r3, [r0, #72]	; 0x48
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001132:	e9c0 3305 	strd	r3, r3, [r0, #20]
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001136:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800113a:	e9c0 3317 	strd	r3, r3, [r0, #92]	; 0x5c
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 800113e:	e9c0 3319 	strd	r3, r3, [r0, #100]	; 0x64
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8001142:	e9c0 351b 	strd	r3, r5, [r0, #108]	; 0x6c
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8001146:	e9c0 7515 	strd	r7, r5, [r0, #84]	; 0x54
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 800114a:	f005 fe59 	bl	8006e00 <HAL_SAI_Init>
 800114e:	4603      	mov	r3, r0
 8001150:	b108      	cbz	r0, 8001156 <main+0x762>
 8001152:	b672      	cpsid	i
  while (1)
 8001154:	e7fe      	b.n	8001154 <main+0x760>
  hsai_BlockB2.Instance = SAI2_Block_B;
 8001156:	4857      	ldr	r0, [pc, #348]	; (80012b4 <main+0x8c0>)
 8001158:	4a57      	ldr	r2, [pc, #348]	; (80012b8 <main+0x8c4>)
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 800115a:	6443      	str	r3, [r0, #68]	; 0x44
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800115c:	6503      	str	r3, [r0, #80]	; 0x50
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800115e:	6143      	str	r3, [r0, #20]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001160:	61c3      	str	r3, [r0, #28]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001162:	60c3      	str	r3, [r0, #12]
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001164:	6343      	str	r3, [r0, #52]	; 0x34
  hsai_BlockB2.Init.PdmInit.Activation = DISABLE;
 8001166:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 800116a:	6743      	str	r3, [r0, #116]	; 0x74
  hsai_BlockB2.Instance = SAI2_Block_B;
 800116c:	6002      	str	r2, [r0, #0]
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 800116e:	6044      	str	r4, [r0, #4]
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8001170:	6085      	str	r5, [r0, #8]
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001172:	e9c0 6312 	strd	r6, r3, [r0, #72]	; 0x48
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001176:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800117a:	e9c0 3317 	strd	r3, r3, [r0, #92]	; 0x5c
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 800117e:	e9c0 3319 	strd	r3, r3, [r0, #100]	; 0x64
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8001182:	e9c0 351b 	strd	r3, r5, [r0, #108]	; 0x6c
  hsai_BlockB2.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8001186:	e9c0 580f 	strd	r5, r8, [r0, #60]	; 0x3c
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 800118a:	e9c0 7515 	strd	r7, r5, [r0, #84]	; 0x54
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 800118e:	f005 fe37 	bl	8006e00 <HAL_SAI_Init>
 8001192:	4603      	mov	r3, r0
 8001194:	b108      	cbz	r0, 800119a <main+0x7a6>
 8001196:	b672      	cpsid	i
  while (1)
 8001198:	e7fe      	b.n	8001198 <main+0x7a4>
  hmmc1.Instance = SDMMC1;
 800119a:	4848      	ldr	r0, [pc, #288]	; (80012bc <main+0x8c8>)
 800119c:	4a48      	ldr	r2, [pc, #288]	; (80012c0 <main+0x8cc>)
  hmmc1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800119e:	6083      	str	r3, [r0, #8]
  hmmc1.Init.ClockDiv = 0;
 80011a0:	6143      	str	r3, [r0, #20]
  hmmc1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80011a2:	e9c0 2300 	strd	r2, r3, [r0]
  hmmc1.Init.BusWide = SDMMC_BUS_WIDE_8B;
 80011a6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  hmmc1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80011aa:	e9c0 2303 	strd	r2, r3, [r0, #12]
  if (HAL_MMC_Init(&hmmc1) != HAL_OK)
 80011ae:	f003 fb6b 	bl	8004888 <HAL_MMC_Init>
 80011b2:	4603      	mov	r3, r0
 80011b4:	b108      	cbz	r0, 80011ba <main+0x7c6>
 80011b6:	b672      	cpsid	i
  while (1)
 80011b8:	e7fe      	b.n	80011b8 <main+0x7c4>
  hspi2.Instance = SPI2;
 80011ba:	4842      	ldr	r0, [pc, #264]	; (80012c4 <main+0x8d0>)
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80011bc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80011c0:	4d41      	ldr	r5, [pc, #260]	; (80012c8 <main+0x8d4>)
 80011c2:	e9c0 5200 	strd	r5, r2, [r0]
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80011c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80011ca:	e9c0 3402 	strd	r3, r4, [r0, #8]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80011d2:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80011d6:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi2.Init.CRCPolynomial = 0x0;
 80011da:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80011de:	e9c0 230d 	strd	r2, r3, [r0, #52]	; 0x34
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80011e2:	e9c0 330f 	strd	r3, r3, [r0, #60]	; 0x3c
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80011e6:	e9c0 3311 	strd	r3, r3, [r0, #68]	; 0x44
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80011ea:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80011ee:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80011f2:	f005 ffef 	bl	80071d4 <HAL_SPI_Init>
 80011f6:	b108      	cbz	r0, 80011fc <main+0x808>
 80011f8:	b672      	cpsid	i
  while (1)
 80011fa:	e7fe      	b.n	80011fa <main+0x806>
  huart3.Instance = USART3;
 80011fc:	4c33      	ldr	r4, [pc, #204]	; (80012cc <main+0x8d8>)
  huart3.Init.BaudRate = 115200;
 80011fe:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001202:	4833      	ldr	r0, [pc, #204]	; (80012d0 <main+0x8dc>)
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001204:	220c      	movs	r2, #12
  huart3.Init.BaudRate = 115200;
 8001206:	e9c4 0300 	strd	r0, r3, [r4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800120a:	2300      	movs	r3, #0
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800120c:	4620      	mov	r0, r4
  huart3.Init.StopBits = UART_STOPBITS_1;
 800120e:	e9c4 3302 	strd	r3, r3, [r4, #8]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001212:	6123      	str	r3, [r4, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001214:	e9c4 2305 	strd	r2, r3, [r4, #20]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001218:	e9c4 3307 	strd	r3, r3, [r4, #28]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800121c:	e9c4 3309 	strd	r3, r3, [r4, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001220:	f006 fc2c 	bl	8007a7c <HAL_UART_Init>
 8001224:	4601      	mov	r1, r0
 8001226:	b108      	cbz	r0, 800122c <main+0x838>
 8001228:	b672      	cpsid	i
  while (1)
 800122a:	e7fe      	b.n	800122a <main+0x836>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800122c:	4620      	mov	r0, r4
 800122e:	f006 fc92 	bl	8007b56 <HAL_UARTEx_SetTxFifoThreshold>
 8001232:	4601      	mov	r1, r0
 8001234:	b108      	cbz	r0, 800123a <main+0x846>
 8001236:	b672      	cpsid	i
  while (1)
 8001238:	e7fe      	b.n	8001238 <main+0x844>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800123a:	4620      	mov	r0, r4
 800123c:	f006 fcaf 	bl	8007b9e <HAL_UARTEx_SetRxFifoThreshold>
 8001240:	b108      	cbz	r0, 8001246 <main+0x852>
 8001242:	b672      	cpsid	i
  while (1)
 8001244:	e7fe      	b.n	8001244 <main+0x850>
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001246:	4620      	mov	r0, r4
 8001248:	f006 fc6a 	bl	8007b20 <HAL_UARTEx_DisableFifoMode>
 800124c:	4603      	mov	r3, r0
 800124e:	b108      	cbz	r0, 8001254 <main+0x860>
 8001250:	b672      	cpsid	i
  while (1)
 8001252:	e7fe      	b.n	8001252 <main+0x85e>
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001254:	481f      	ldr	r0, [pc, #124]	; (80012d4 <main+0x8e0>)
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8001256:	2209      	movs	r2, #9
 8001258:	491f      	ldr	r1, [pc, #124]	; (80012d8 <main+0x8e4>)
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 800125a:	2401      	movs	r4, #1
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800125c:	6303      	str	r3, [r0, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800125e:	e9c0 1200 	strd	r1, r2, [r0]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001262:	2202      	movs	r2, #2
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001264:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001268:	e9c0 3203 	strd	r3, r2, [r0, #12]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800126c:	e9c0 2306 	strd	r2, r3, [r0, #24]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001270:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001274:	f003 fb2e 	bl	80048d4 <HAL_PCD_Init>
 8001278:	4603      	mov	r3, r0
 800127a:	b108      	cbz	r0, 8001280 <main+0x88c>
 800127c:	b672      	cpsid	i
  while (1)
 800127e:	e7fe      	b.n	800127e <main+0x88a>
  hcrc.Instance = CRC;
 8001280:	4816      	ldr	r0, [pc, #88]	; (80012dc <main+0x8e8>)
 8001282:	4a17      	ldr	r2, [pc, #92]	; (80012e0 <main+0x8ec>)
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001284:	8083      	strh	r3, [r0, #4]
  hcrc.Instance = CRC;
 8001286:	6002      	str	r2, [r0, #0]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001288:	6204      	str	r4, [r0, #32]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800128a:	e9c0 3305 	strd	r3, r3, [r0, #20]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800128e:	f002 f86b 	bl	8003368 <HAL_CRC_Init>
 8001292:	b108      	cbz	r0, 8001298 <main+0x8a4>
 8001294:	b672      	cpsid	i
  while (1)
 8001296:	e7fe      	b.n	8001296 <main+0x8a2>
  MX_FATFS_Init();
 8001298:	f007 f906 	bl	80084a8 <MX_FATFS_Init>
  MX_X_CUBE_AI_Init();
 800129c:	f008 fd96 	bl	8009dcc <MX_X_CUBE_AI_Init>
  MX_X_CUBE_AI_Process();
 80012a0:	f008 fdaa 	bl	8009df8 <MX_X_CUBE_AI_Process>
  while (1)
 80012a4:	e7fc      	b.n	80012a0 <main+0x8ac>
 80012a6:	bf00      	nop
 80012a8:	24001588 	.word	0x24001588
 80012ac:	40015c04 	.word	0x40015c04
 80012b0:	0002ee00 	.word	0x0002ee00
 80012b4:	24001620 	.word	0x24001620
 80012b8:	40015c24 	.word	0x40015c24
 80012bc:	24000de4 	.word	0x24000de4
 80012c0:	52007000 	.word	0x52007000
 80012c4:	240016ec 	.word	0x240016ec
 80012c8:	40003800 	.word	0x40003800
 80012cc:	24001774 	.word	0x24001774
 80012d0:	40004800 	.word	0x40004800
 80012d4:	24001058 	.word	0x24001058
 80012d8:	40080000 	.word	0x40080000
 80012dc:	24000b28 	.word	0x24000b28
 80012e0:	58024c00 	.word	0x58024c00

080012e4 <Error_Handler>:
 80012e4:	b672      	cpsid	i
  while (1)
 80012e6:	e7fe      	b.n	80012e6 <Error_Handler+0x2>

080012e8 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012e8:	4b07      	ldr	r3, [pc, #28]	; (8001308 <HAL_MspInit+0x20>)
{
 80012ea:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ec:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 80012f0:	f042 0202 	orr.w	r2, r2, #2
 80012f4:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 80012f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80012fc:	f003 0302 	and.w	r3, r3, #2
 8001300:	9301      	str	r3, [sp, #4]
 8001302:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001304:	b002      	add	sp, #8
 8001306:	4770      	bx	lr
 8001308:	58024400 	.word	0x58024400

0800130c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800130c:	b510      	push	{r4, lr}
 800130e:	b08e      	sub	sp, #56	; 0x38
 8001310:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001312:	2214      	movs	r2, #20
 8001314:	2100      	movs	r1, #0
 8001316:	a809      	add	r0, sp, #36	; 0x24
 8001318:	f011 fe50 	bl	8012fbc <memset>
  if(hadc->Instance==ADC1)
 800131c:	6823      	ldr	r3, [r4, #0]
 800131e:	4a54      	ldr	r2, [pc, #336]	; (8001470 <HAL_ADC_MspInit+0x164>)
 8001320:	4293      	cmp	r3, r2
 8001322:	d13f      	bne.n	80013a4 <HAL_ADC_MspInit+0x98>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001324:	4a53      	ldr	r2, [pc, #332]	; (8001474 <HAL_ADC_MspInit+0x168>)
 8001326:	6813      	ldr	r3, [r2, #0]
 8001328:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800132a:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 800132c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800132e:	d10c      	bne.n	800134a <HAL_ADC_MspInit+0x3e>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001330:	4b51      	ldr	r3, [pc, #324]	; (8001478 <HAL_ADC_MspInit+0x16c>)
 8001332:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8001336:	f042 0220 	orr.w	r2, r2, #32
 800133a:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 800133e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001342:	f003 0320 	and.w	r3, r3, #32
 8001346:	9301      	str	r3, [sp, #4]
 8001348:	9b01      	ldr	r3, [sp, #4]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800134a:	4b4b      	ldr	r3, [pc, #300]	; (8001478 <HAL_ADC_MspInit+0x16c>)
    PA1_C     ------> ADC1_INP1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800134c:	a909      	add	r1, sp, #36	; 0x24
 800134e:	484b      	ldr	r0, [pc, #300]	; (800147c <HAL_ADC_MspInit+0x170>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001350:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001354:	f042 0204 	orr.w	r2, r2, #4
 8001358:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800135c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001360:	f002 0204 	and.w	r2, r2, #4
 8001364:	9202      	str	r2, [sp, #8]
 8001366:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001368:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800136c:	f042 0201 	orr.w	r2, r2, #1
 8001370:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001374:	2201      	movs	r2, #1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001376:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800137a:	f003 0301 	and.w	r3, r3, #1
 800137e:	9303      	str	r3, [sp, #12]
 8001380:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001382:	2303      	movs	r3, #3
 8001384:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001388:	f002 fca4 	bl	8003cd4 <HAL_GPIO_Init>
    __HAL_RCC_GPIOA_CLK_ENABLE();
    /**ADC2 GPIO Configuration
    PA0_C     ------> ADC2_INP0
    PA1_C     ------> ADC2_INP1
    */
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 800138c:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8001390:	4608      	mov	r0, r1
 8001392:	f001 fb1f 	bl	80029d4 <HAL_SYSCFG_AnalogSwitchConfig>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 8001396:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 800139a:	4608      	mov	r0, r1
 800139c:	f001 fb1a 	bl	80029d4 <HAL_SYSCFG_AnalogSwitchConfig>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80013a0:	b00e      	add	sp, #56	; 0x38
 80013a2:	bd10      	pop	{r4, pc}
  else if(hadc->Instance==ADC2)
 80013a4:	4a36      	ldr	r2, [pc, #216]	; (8001480 <HAL_ADC_MspInit+0x174>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d120      	bne.n	80013ec <HAL_ADC_MspInit+0xe0>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80013aa:	4a32      	ldr	r2, [pc, #200]	; (8001474 <HAL_ADC_MspInit+0x168>)
 80013ac:	6813      	ldr	r3, [r2, #0]
 80013ae:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80013b0:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 80013b2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80013b4:	d10c      	bne.n	80013d0 <HAL_ADC_MspInit+0xc4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80013b6:	4b30      	ldr	r3, [pc, #192]	; (8001478 <HAL_ADC_MspInit+0x16c>)
 80013b8:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 80013bc:	f042 0220 	orr.w	r2, r2, #32
 80013c0:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 80013c4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80013c8:	f003 0320 	and.w	r3, r3, #32
 80013cc:	9304      	str	r3, [sp, #16]
 80013ce:	9b04      	ldr	r3, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013d0:	4b29      	ldr	r3, [pc, #164]	; (8001478 <HAL_ADC_MspInit+0x16c>)
 80013d2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80013d6:	f042 0201 	orr.w	r2, r2, #1
 80013da:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80013de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013e2:	f003 0301 	and.w	r3, r3, #1
 80013e6:	9305      	str	r3, [sp, #20]
 80013e8:	9b05      	ldr	r3, [sp, #20]
 80013ea:	e7cf      	b.n	800138c <HAL_ADC_MspInit+0x80>
  else if(hadc->Instance==ADC3)
 80013ec:	4a25      	ldr	r2, [pc, #148]	; (8001484 <HAL_ADC_MspInit+0x178>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d1d6      	bne.n	80013a0 <HAL_ADC_MspInit+0x94>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80013f2:	4b21      	ldr	r3, [pc, #132]	; (8001478 <HAL_ADC_MspInit+0x16c>)
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013f4:	2403      	movs	r4, #3
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80013f6:	a909      	add	r1, sp, #36	; 0x24
 80013f8:	4823      	ldr	r0, [pc, #140]	; (8001488 <HAL_ADC_MspInit+0x17c>)
    __HAL_RCC_ADC3_CLK_ENABLE();
 80013fa:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80013fe:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8001402:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001406:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800140a:	f002 7280 	and.w	r2, r2, #16777216	; 0x1000000
 800140e:	9206      	str	r2, [sp, #24]
 8001410:	9a06      	ldr	r2, [sp, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001412:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001416:	f042 0220 	orr.w	r2, r2, #32
 800141a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800141e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001422:	f002 0220 	and.w	r2, r2, #32
 8001426:	9207      	str	r2, [sp, #28]
 8001428:	9a07      	ldr	r2, [sp, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800142a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800142e:	f042 0204 	orr.w	r2, r2, #4
 8001432:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001436:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800143a:	f003 0304 	and.w	r3, r3, #4
 800143e:	9308      	str	r3, [sp, #32]
 8001440:	9b08      	ldr	r3, [sp, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001442:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001446:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800144a:	f002 fc43 	bl	8003cd4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800144e:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001450:	a909      	add	r1, sp, #36	; 0x24
 8001452:	480a      	ldr	r0, [pc, #40]	; (800147c <HAL_ADC_MspInit+0x170>)
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001454:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001458:	2300      	movs	r3, #0
 800145a:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800145c:	f002 fc3a 	bl	8003cd4 <HAL_GPIO_Init>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8001460:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8001464:	4608      	mov	r0, r1
 8001466:	f001 fab5 	bl	80029d4 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 800146a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 800146e:	e794      	b.n	800139a <HAL_ADC_MspInit+0x8e>
 8001470:	40022000 	.word	0x40022000
 8001474:	2400180c 	.word	0x2400180c
 8001478:	58024400 	.word	0x58024400
 800147c:	58020800 	.word	0x58020800
 8001480:	40022100 	.word	0x40022100
 8001484:	58026000 	.word	0x58026000
 8001488:	58021400 	.word	0x58021400

0800148c <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 800148c:	6802      	ldr	r2, [r0, #0]
{
 800148e:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 8001490:	4b09      	ldr	r3, [pc, #36]	; (80014b8 <HAL_CRC_MspInit+0x2c>)
 8001492:	429a      	cmp	r2, r3
 8001494:	d10d      	bne.n	80014b2 <HAL_CRC_MspInit+0x26>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001496:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 800149a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800149e:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80014a2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80014a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80014ae:	9301      	str	r3, [sp, #4]
 80014b0:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80014b2:	b002      	add	sp, #8
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	58024c00 	.word	0x58024c00

080014bc <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80014bc:	b570      	push	{r4, r5, r6, lr}
 80014be:	b090      	sub	sp, #64	; 0x40
 80014c0:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c2:	2214      	movs	r2, #20
 80014c4:	2100      	movs	r1, #0
 80014c6:	a80b      	add	r0, sp, #44	; 0x2c
 80014c8:	f011 fd78 	bl	8012fbc <memset>
  if(heth->Instance==ETH)
 80014cc:	6822      	ldr	r2, [r4, #0]
 80014ce:	4b64      	ldr	r3, [pc, #400]	; (8001660 <HAL_ETH_MspInit+0x1a4>)
 80014d0:	429a      	cmp	r2, r3
 80014d2:	f040 80c2 	bne.w	800165a <HAL_ETH_MspInit+0x19e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 80014d6:	4b63      	ldr	r3, [pc, #396]	; (8001664 <HAL_ETH_MspInit+0x1a8>)
    PB1     ------> ETH_RXD3
    PC5     ------> ETH_RXD1
    PB0     ------> ETH_RXD2
    */
    GPIO_InitStruct.Pin = MII_TX_EN_Pin|MII_TXD1_Pin|MII_TXD0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d8:	2602      	movs	r6, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80014da:	250b      	movs	r5, #11
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014dc:	a90b      	add	r1, sp, #44	; 0x2c
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 80014de:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8

    GPIO_InitStruct.Pin = MII_TXD3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e2:	2400      	movs	r4, #0
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014e4:	4860      	ldr	r0, [pc, #384]	; (8001668 <HAL_ETH_MspInit+0x1ac>)
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 80014e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80014ea:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 80014ee:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 80014f2:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 80014f6:	9201      	str	r2, [sp, #4]
 80014f8:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80014fa:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 80014fe:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001502:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8001506:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 800150a:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 800150e:	9202      	str	r2, [sp, #8]
 8001510:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8001512:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8001516:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800151a:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 800151e:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8001522:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001526:	9203      	str	r2, [sp, #12]
 8001528:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800152a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800152e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001532:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001536:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800153a:	f002 0240 	and.w	r2, r2, #64	; 0x40
 800153e:	9204      	str	r2, [sp, #16]
 8001540:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001542:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001546:	f042 0210 	orr.w	r2, r2, #16
 800154a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800154e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001552:	f002 0210 	and.w	r2, r2, #16
 8001556:	9205      	str	r2, [sp, #20]
 8001558:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800155a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800155e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001562:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001566:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800156a:	f402 7280 	and.w	r2, r2, #256	; 0x100
 800156e:	9206      	str	r2, [sp, #24]
 8001570:	9a06      	ldr	r2, [sp, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001572:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001576:	f042 0204 	orr.w	r2, r2, #4
 800157a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800157e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001582:	f002 0204 	and.w	r2, r2, #4
 8001586:	9207      	str	r2, [sp, #28]
 8001588:	9a07      	ldr	r2, [sp, #28]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800158a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800158e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001592:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001596:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800159a:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800159e:	9208      	str	r2, [sp, #32]
 80015a0:	9a08      	ldr	r2, [sp, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80015a6:	f042 0201 	orr.w	r2, r2, #1
 80015aa:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80015ae:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80015b2:	f002 0201 	and.w	r2, r2, #1
 80015b6:	9209      	str	r2, [sp, #36]	; 0x24
 80015b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ba:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80015be:	f042 0202 	orr.w	r2, r2, #2
 80015c2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80015c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80015ca:	950f      	str	r5, [sp, #60]	; 0x3c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015cc:	f003 0302 	and.w	r3, r3, #2
 80015d0:	930a      	str	r3, [sp, #40]	; 0x28
 80015d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80015d8:	e9cd 360b 	strd	r3, r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80015dc:	f002 fb7a 	bl	8003cd4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = MII_TXD3_Pin;
 80015e0:	2304      	movs	r3, #4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
    HAL_GPIO_Init(MII_TXD3_GPIO_Port, &GPIO_InitStruct);
 80015e2:	a90b      	add	r1, sp, #44	; 0x2c
 80015e4:	4821      	ldr	r0, [pc, #132]	; (800166c <HAL_ETH_MspInit+0x1b0>)
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80015e6:	950f      	str	r5, [sp, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e8:	e9cd 360b 	strd	r3, r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ec:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
    HAL_GPIO_Init(MII_TXD3_GPIO_Port, &GPIO_InitStruct);
 80015f0:	f002 fb70 	bl	8003cd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_RX_ER_Pin;
 80015f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
    HAL_GPIO_Init(MII_RX_ER_GPIO_Port, &GPIO_InitStruct);
 80015f8:	a90b      	add	r1, sp, #44	; 0x2c
 80015fa:	481d      	ldr	r0, [pc, #116]	; (8001670 <HAL_ETH_MspInit+0x1b4>)
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80015fc:	950f      	str	r5, [sp, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015fe:	e9cd 360b 	strd	r3, r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001602:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
    HAL_GPIO_Init(MII_RX_ER_GPIO_Port, &GPIO_InitStruct);
 8001606:	f002 fb65 	bl	8003cd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_MDC_Pin|MII_TXD2_Pin|MII_TX_CLK_Pin|MII_RXD0_Pin
 800160a:	233e      	movs	r3, #62	; 0x3e
                          |MII_RXD1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800160c:	a90b      	add	r1, sp, #44	; 0x2c
 800160e:	4819      	ldr	r0, [pc, #100]	; (8001674 <HAL_ETH_MspInit+0x1b8>)
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001610:	950f      	str	r5, [sp, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001612:	e9cd 360b 	strd	r3, r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001616:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800161a:	f002 fb5b 	bl	8003cd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_CRS_Pin|MII_COL_Pin;
 800161e:	230c      	movs	r3, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001620:	a90b      	add	r1, sp, #44	; 0x2c
 8001622:	4815      	ldr	r0, [pc, #84]	; (8001678 <HAL_ETH_MspInit+0x1bc>)
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001624:	950f      	str	r5, [sp, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001626:	e9cd 360b 	strd	r3, r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800162a:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800162e:	f002 fb51 	bl	8003cd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_MDIO_Pin|MII_RX_CLK_Pin|MII_RX_DV_Pin;
 8001632:	2386      	movs	r3, #134	; 0x86
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001634:	a90b      	add	r1, sp, #44	; 0x2c
 8001636:	4811      	ldr	r0, [pc, #68]	; (800167c <HAL_ETH_MspInit+0x1c0>)
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001638:	950f      	str	r5, [sp, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800163a:	e9cd 360b 	strd	r3, r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800163e:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001642:	f002 fb47 	bl	8003cd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_RX_D3_Pin|MII_RX_D2_Pin;
 8001646:	2303      	movs	r3, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001648:	a90b      	add	r1, sp, #44	; 0x2c
 800164a:	480d      	ldr	r0, [pc, #52]	; (8001680 <HAL_ETH_MspInit+0x1c4>)
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800164c:	950f      	str	r5, [sp, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800164e:	e9cd 360b 	strd	r3, r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001652:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001656:	f002 fb3d 	bl	8003cd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 800165a:	b010      	add	sp, #64	; 0x40
 800165c:	bd70      	pop	{r4, r5, r6, pc}
 800165e:	bf00      	nop
 8001660:	40028000 	.word	0x40028000
 8001664:	58024400 	.word	0x58024400
 8001668:	58021800 	.word	0x58021800
 800166c:	58021000 	.word	0x58021000
 8001670:	58022000 	.word	0x58022000
 8001674:	58020800 	.word	0x58020800
 8001678:	58021c00 	.word	0x58021c00
 800167c:	58020000 	.word	0x58020000
 8001680:	58020400 	.word	0x58020400

08001684 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001684:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001686:	2214      	movs	r2, #20
{
 8001688:	b0ba      	sub	sp, #232	; 0xe8
 800168a:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800168c:	2100      	movs	r1, #0
 800168e:	eb0d 0002 	add.w	r0, sp, r2
 8001692:	f011 fc93 	bl	8012fbc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001696:	22c0      	movs	r2, #192	; 0xc0
 8001698:	2100      	movs	r1, #0
 800169a:	a80a      	add	r0, sp, #40	; 0x28
 800169c:	f011 fc8e 	bl	8012fbc <memset>
  if(hfdcan->Instance==FDCAN1)
 80016a0:	6823      	ldr	r3, [r4, #0]
 80016a2:	4a3f      	ldr	r2, [pc, #252]	; (80017a0 <HAL_FDCAN_MspInit+0x11c>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d13d      	bne.n	8001724 <HAL_FDCAN_MspInit+0xa0>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80016a8:	2300      	movs	r3, #0
 80016aa:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016ae:	a80a      	add	r0, sp, #40	; 0x28
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80016b0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 80016b4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80016b8:	9326      	str	r3, [sp, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016ba:	f004 fa35 	bl	8005b28 <HAL_RCCEx_PeriphCLKConfig>
 80016be:	b108      	cbz	r0, 80016c4 <HAL_FDCAN_MspInit+0x40>
    {
      Error_Handler();
 80016c0:	f7ff fe10 	bl	80012e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80016c4:	4a37      	ldr	r2, [pc, #220]	; (80017a4 <HAL_FDCAN_MspInit+0x120>)
 80016c6:	6813      	ldr	r3, [r2, #0]
 80016c8:	3301      	adds	r3, #1
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80016ca:	2b01      	cmp	r3, #1
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80016cc:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80016ce:	d10c      	bne.n	80016ea <HAL_FDCAN_MspInit+0x66>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80016d0:	4b35      	ldr	r3, [pc, #212]	; (80017a8 <HAL_FDCAN_MspInit+0x124>)
 80016d2:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
 80016d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80016da:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
 80016de:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80016e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016e6:	9301      	str	r3, [sp, #4]
 80016e8:	9b01      	ldr	r3, [sp, #4]
    }

    __HAL_RCC_GPIOH_CLK_ENABLE();
 80016ea:	4b2f      	ldr	r3, [pc, #188]	; (80017a8 <HAL_FDCAN_MspInit+0x124>)
    /**FDCAN1 GPIO Configuration
    PH14     ------> FDCAN1_RX
    PH13     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = FDCAN1_RX_Pin|FDCAN1_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ec:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80016f0:	482e      	ldr	r0, [pc, #184]	; (80017ac <HAL_FDCAN_MspInit+0x128>)
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80016f2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80016f6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80016fa:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80016fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001702:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001706:	9302      	str	r3, [sp, #8]
 8001708:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800170a:	2302      	movs	r3, #2
 800170c:	e9cd 1305 	strd	r1, r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001710:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001712:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001714:	e9cd 3307 	strd	r3, r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001718:	2309      	movs	r3, #9
 800171a:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Pin = FDCAN2_RX_Pin|FDCAN2_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800171c:	f002 fada 	bl	8003cd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8001720:	b03a      	add	sp, #232	; 0xe8
 8001722:	bd10      	pop	{r4, pc}
  else if(hfdcan->Instance==FDCAN2)
 8001724:	4a22      	ldr	r2, [pc, #136]	; (80017b0 <HAL_FDCAN_MspInit+0x12c>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d1fa      	bne.n	8001720 <HAL_FDCAN_MspInit+0x9c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800172a:	2300      	movs	r3, #0
 800172c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001730:	a80a      	add	r0, sp, #40	; 0x28
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001732:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8001736:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800173a:	9326      	str	r3, [sp, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800173c:	f004 f9f4 	bl	8005b28 <HAL_RCCEx_PeriphCLKConfig>
 8001740:	b108      	cbz	r0, 8001746 <HAL_FDCAN_MspInit+0xc2>
      Error_Handler();
 8001742:	f7ff fdcf 	bl	80012e4 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001746:	4a17      	ldr	r2, [pc, #92]	; (80017a4 <HAL_FDCAN_MspInit+0x120>)
 8001748:	6813      	ldr	r3, [r2, #0]
 800174a:	3301      	adds	r3, #1
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 800174c:	2b01      	cmp	r3, #1
    HAL_RCC_FDCAN_CLK_ENABLED++;
 800174e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001750:	d10c      	bne.n	800176c <HAL_FDCAN_MspInit+0xe8>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001752:	4b15      	ldr	r3, [pc, #84]	; (80017a8 <HAL_FDCAN_MspInit+0x124>)
 8001754:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
 8001758:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800175c:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
 8001760:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001764:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001768:	9303      	str	r3, [sp, #12]
 800176a:	9b03      	ldr	r3, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800176c:	4b0e      	ldr	r3, [pc, #56]	; (80017a8 <HAL_FDCAN_MspInit+0x124>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800176e:	a905      	add	r1, sp, #20
 8001770:	4810      	ldr	r0, [pc, #64]	; (80017b4 <HAL_FDCAN_MspInit+0x130>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001772:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001776:	f042 0202 	orr.w	r2, r2, #2
 800177a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800177e:	f242 0220 	movw	r2, #8224	; 0x2020
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001782:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001786:	f003 0302 	and.w	r3, r3, #2
 800178a:	9304      	str	r3, [sp, #16]
 800178c:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800178e:	2302      	movs	r3, #2
 8001790:	e9cd 2305 	strd	r2, r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001794:	2300      	movs	r3, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001796:	e9cd 3307 	strd	r3, r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 800179a:	2309      	movs	r3, #9
 800179c:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800179e:	e7bd      	b.n	800171c <HAL_FDCAN_MspInit+0x98>
 80017a0:	4000a000 	.word	0x4000a000
 80017a4:	24001810 	.word	0x24001810
 80017a8:	58024400 	.word	0x58024400
 80017ac:	58021c00 	.word	0x58021c00
 80017b0:	4000a400 	.word	0x4000a400
 80017b4:	58020400 	.word	0x58020400

080017b8 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80017b8:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ba:	2214      	movs	r2, #20
{
 80017bc:	b0ba      	sub	sp, #232	; 0xe8
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017be:	25c0      	movs	r5, #192	; 0xc0
{
 80017c0:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c2:	2100      	movs	r1, #0
 80017c4:	eb0d 0002 	add.w	r0, sp, r2
 80017c8:	f011 fbf8 	bl	8012fbc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017cc:	462a      	mov	r2, r5
 80017ce:	2100      	movs	r1, #0
 80017d0:	a80a      	add	r0, sp, #40	; 0x28
 80017d2:	f011 fbf3 	bl	8012fbc <memset>
  if(hltdc->Instance==LTDC)
 80017d6:	6822      	ldr	r2, [r4, #0]
 80017d8:	4b44      	ldr	r3, [pc, #272]	; (80018ec <HAL_LTDC_MspInit+0x134>)
 80017da:	429a      	cmp	r2, r3
 80017dc:	f040 8083 	bne.w	80018e6 <HAL_LTDC_MspInit+0x12e>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80017e0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80017e4:	2300      	movs	r3, #0
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
    PeriphClkInitStruct.PLL3.PLL3R = 2;
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017e6:	a80a      	add	r0, sp, #40	; 0x28
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80017e8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    PeriphClkInitStruct.PLL3.PLL3M = 32;
 80017ec:	2320      	movs	r3, #32
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 80017ee:	f44f 6240 	mov.w	r2, #3072	; 0xc00
    PeriphClkInitStruct.PLL3.PLL3N = 192;
 80017f2:	e9cd 3514 	strd	r3, r5, [sp, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 80017f6:	2302      	movs	r3, #2
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 80017f8:	e9cd 3316 	strd	r3, r3, [sp, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 80017fc:	9318      	str	r3, [sp, #96]	; 0x60
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 80017fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001802:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001806:	f004 f98f 	bl	8005b28 <HAL_RCCEx_PeriphCLKConfig>
 800180a:	b108      	cbz	r0, 8001810 <HAL_LTDC_MspInit+0x58>
    {
      Error_Handler();
 800180c:	f7ff fd6a 	bl	80012e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001810:	4b37      	ldr	r3, [pc, #220]	; (80018f0 <HAL_LTDC_MspInit+0x138>)
    PJ3     ------> LTDC_R4
    PJ4     ------> LTDC_R5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_3
                          |GPIO_PIN_7|GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001812:	2602      	movs	r6, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001814:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001816:	250e      	movs	r5, #14
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001818:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800181c:	a905      	add	r1, sp, #20
 800181e:	4835      	ldr	r0, [pc, #212]	; (80018f4 <HAL_LTDC_MspInit+0x13c>)
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001820:	f042 0208 	orr.w	r2, r2, #8
 8001824:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 8001828:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 800182c:	f002 0208 	and.w	r2, r2, #8
 8001830:	9200      	str	r2, [sp, #0]
 8001832:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8001834:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001838:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800183c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001840:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001844:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8001848:	9201      	str	r2, [sp, #4]
 800184a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800184c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001850:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001854:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001858:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800185c:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8001860:	9202      	str	r2, [sp, #8]
 8001862:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001864:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001868:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800186c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001870:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001874:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8001878:	9203      	str	r2, [sp, #12]
 800187a:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800187c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001880:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001884:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001888:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800188c:	9509      	str	r5, [sp, #36]	; 0x24
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800188e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001892:	9304      	str	r3, [sp, #16]
 8001894:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001896:	23fc      	movs	r3, #252	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001898:	e9cd 4407 	strd	r4, r4, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800189c:	e9cd 3605 	strd	r3, r6, [sp, #20]
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80018a0:	f002 fa18 	bl	8003cd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_9|GPIO_PIN_12
 80018a4:	f24d 2303 	movw	r3, #53763	; 0xd203
                          |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80018a8:	a905      	add	r1, sp, #20
 80018aa:	4813      	ldr	r0, [pc, #76]	; (80018f8 <HAL_LTDC_MspInit+0x140>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80018ac:	9509      	str	r5, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ae:	e9cd 3605 	strd	r3, r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b2:	e9cd 4407 	strd	r4, r4, [sp, #28]
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80018b6:	f002 fa0d 	bl	8003cd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DISP_Pin|GPIO_PIN_14|GPIO_PIN_12|GPIO_PIN_13
 80018ba:	f64f 73fb 	movw	r3, #65531	; 0xfffb
                          |GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80018be:	a905      	add	r1, sp, #20
 80018c0:	480e      	ldr	r0, [pc, #56]	; (80018fc <HAL_LTDC_MspInit+0x144>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80018c2:	9509      	str	r5, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c4:	e9cd 3605 	strd	r3, r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c8:	e9cd 4407 	strd	r4, r4, [sp, #28]
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80018cc:	f002 fa02 	bl	8003cd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80018d0:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80018d4:	a905      	add	r1, sp, #20
 80018d6:	480a      	ldr	r0, [pc, #40]	; (8001900 <HAL_LTDC_MspInit+0x148>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80018d8:	9509      	str	r5, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018da:	e9cd 3605 	strd	r3, r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018de:	e9cd 4407 	strd	r4, r4, [sp, #28]
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80018e2:	f002 f9f7 	bl	8003cd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80018e6:	b03a      	add	sp, #232	; 0xe8
 80018e8:	bd70      	pop	{r4, r5, r6, pc}
 80018ea:	bf00      	nop
 80018ec:	50001000 	.word	0x50001000
 80018f0:	58024400 	.word	0x58024400
 80018f4:	58022800 	.word	0x58022800
 80018f8:	58022000 	.word	0x58022000
 80018fc:	58022400 	.word	0x58022400
 8001900:	58021c00 	.word	0x58021c00

08001904 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001904:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001906:	2214      	movs	r2, #20
{
 8001908:	b0bb      	sub	sp, #236	; 0xec
 800190a:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800190c:	2100      	movs	r1, #0
 800190e:	eb0d 0002 	add.w	r0, sp, r2
 8001912:	f011 fb53 	bl	8012fbc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001916:	22c0      	movs	r2, #192	; 0xc0
 8001918:	2100      	movs	r1, #0
 800191a:	a80a      	add	r0, sp, #40	; 0x28
 800191c:	f011 fb4e 	bl	8012fbc <memset>
  if(hqspi->Instance==QUADSPI)
 8001920:	6822      	ldr	r2, [r4, #0]
 8001922:	4b3c      	ldr	r3, [pc, #240]	; (8001a14 <HAL_QSPI_MspInit+0x110>)
 8001924:	429a      	cmp	r2, r3
 8001926:	d173      	bne.n	8001a10 <HAL_QSPI_MspInit+0x10c>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 8001928:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800192c:	2300      	movs	r3, #0
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800192e:	a80a      	add	r0, sp, #40	; 0x28
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 8001930:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001934:	f004 f8f8 	bl	8005b28 <HAL_RCCEx_PeriphCLKConfig>
 8001938:	b108      	cbz	r0, 800193e <HAL_QSPI_MspInit+0x3a>
    {
      Error_Handler();
 800193a:	f7ff fcd3 	bl	80012e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800193e:	4b36      	ldr	r3, [pc, #216]	; (8001a18 <HAL_QSPI_MspInit+0x114>)
    PF9     ------> QUADSPI_BK1_IO1
    PB2     ------> QUADSPI_CLK
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001940:	2502      	movs	r5, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001942:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001944:	270a      	movs	r7, #10
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001946:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800194a:	a905      	add	r1, sp, #20
 800194c:	4833      	ldr	r0, [pc, #204]	; (8001a1c <HAL_QSPI_MspInit+0x118>)

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800194e:	2609      	movs	r6, #9
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001950:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001954:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8001958:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800195c:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001960:	9201      	str	r2, [sp, #4]
 8001962:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001964:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001968:	f042 0202 	orr.w	r2, r2, #2
 800196c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001970:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001974:	f002 0202 	and.w	r2, r2, #2
 8001978:	9202      	str	r2, [sp, #8]
 800197a:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800197c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001980:	f042 0220 	orr.w	r2, r2, #32
 8001984:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001988:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800198c:	f002 0220 	and.w	r2, r2, #32
 8001990:	9203      	str	r2, [sp, #12]
 8001992:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001994:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001998:	f042 0208 	orr.w	r2, r2, #8
 800199c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80019a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80019a4:	9709      	str	r7, [sp, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80019a6:	f003 0308 	and.w	r3, r3, #8
 80019aa:	9304      	str	r3, [sp, #16]
 80019ac:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ae:	2340      	movs	r3, #64	; 0x40
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b0:	e9cd 4407 	strd	r4, r4, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b4:	e9cd 3505 	strd	r3, r5, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019b8:	f002 f98c 	bl	8003cd4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80019bc:	23c0      	movs	r3, #192	; 0xc0
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80019be:	a905      	add	r1, sp, #20
 80019c0:	4817      	ldr	r0, [pc, #92]	; (8001a20 <HAL_QSPI_MspInit+0x11c>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80019c2:	9609      	str	r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c4:	e9cd 3505 	strd	r3, r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c8:	e9cd 4407 	strd	r4, r4, [sp, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80019cc:	f002 f982 	bl	8003cd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80019d0:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80019d4:	a905      	add	r1, sp, #20
 80019d6:	4812      	ldr	r0, [pc, #72]	; (8001a20 <HAL_QSPI_MspInit+0x11c>)
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80019d8:	9709      	str	r7, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019da:	e9cd 3505 	strd	r3, r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019de:	e9cd 4407 	strd	r4, r4, [sp, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80019e2:	f002 f977 	bl	8003cd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80019e6:	2304      	movs	r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019e8:	a905      	add	r1, sp, #20
 80019ea:	480c      	ldr	r0, [pc, #48]	; (8001a1c <HAL_QSPI_MspInit+0x118>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80019ec:	9609      	str	r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ee:	e9cd 3505 	strd	r3, r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f2:	e9cd 4407 	strd	r4, r4, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019f6:	f002 f96d 	bl	8003cd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80019fa:	f44f 6300 	mov.w	r3, #2048	; 0x800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019fe:	a905      	add	r1, sp, #20
 8001a00:	4808      	ldr	r0, [pc, #32]	; (8001a24 <HAL_QSPI_MspInit+0x120>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001a02:	9609      	str	r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a04:	e9cd 3505 	strd	r3, r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a08:	e9cd 4407 	strd	r4, r4, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a0c:	f002 f962 	bl	8003cd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001a10:	b03b      	add	sp, #236	; 0xec
 8001a12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a14:	52005000 	.word	0x52005000
 8001a18:	58024400 	.word	0x58024400
 8001a1c:	58020400 	.word	0x58020400
 8001a20:	58021400 	.word	0x58021400
 8001a24:	58020c00 	.word	0x58020c00

08001a28 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001a28:	b510      	push	{r4, lr}
 8001a2a:	b0b0      	sub	sp, #192	; 0xc0
 8001a2c:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a2e:	22c0      	movs	r2, #192	; 0xc0
 8001a30:	2100      	movs	r1, #0
 8001a32:	4668      	mov	r0, sp
 8001a34:	f011 fac2 	bl	8012fbc <memset>
  if(hrtc->Instance==RTC)
 8001a38:	6822      	ldr	r2, [r4, #0]
 8001a3a:	4b0c      	ldr	r3, [pc, #48]	; (8001a6c <HAL_RTC_MspInit+0x44>)
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d112      	bne.n	8001a66 <HAL_RTC_MspInit+0x3e>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001a40:	2300      	movs	r3, #0
 8001a42:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a46:	4668      	mov	r0, sp
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001a48:	e9cd 2300 	strd	r2, r3, [sp]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001a4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a50:	932d      	str	r3, [sp, #180]	; 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a52:	f004 f869 	bl	8005b28 <HAL_RCCEx_PeriphCLKConfig>
 8001a56:	b108      	cbz	r0, 8001a5c <HAL_RTC_MspInit+0x34>
    {
      Error_Handler();
 8001a58:	f7ff fc44 	bl	80012e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001a5c:	4a04      	ldr	r2, [pc, #16]	; (8001a70 <HAL_RTC_MspInit+0x48>)
 8001a5e:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8001a60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a64:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001a66:	b030      	add	sp, #192	; 0xc0
 8001a68:	bd10      	pop	{r4, pc}
 8001a6a:	bf00      	nop
 8001a6c:	58004000 	.word	0x58004000
 8001a70:	58024400 	.word	0x58024400

08001a74 <HAL_MMC_MspInit>:
* This function configures the hardware resources used in this example
* @param hmmc: MMC handle pointer
* @retval None
*/
void HAL_MMC_MspInit(MMC_HandleTypeDef* hmmc)
{
 8001a74:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a76:	2214      	movs	r2, #20
{
 8001a78:	b0bb      	sub	sp, #236	; 0xec
 8001a7a:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a7c:	2100      	movs	r1, #0
 8001a7e:	eb0d 0002 	add.w	r0, sp, r2
 8001a82:	f011 fa9b 	bl	8012fbc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a86:	22c0      	movs	r2, #192	; 0xc0
 8001a88:	2100      	movs	r1, #0
 8001a8a:	a80a      	add	r0, sp, #40	; 0x28
 8001a8c:	f011 fa96 	bl	8012fbc <memset>
  if(hmmc->Instance==SDMMC1)
 8001a90:	6822      	ldr	r2, [r4, #0]
 8001a92:	4b32      	ldr	r3, [pc, #200]	; (8001b5c <HAL_MMC_MspInit+0xe8>)
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d15f      	bne.n	8001b58 <HAL_MMC_MspInit+0xe4>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8001a98:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001a9c:	2300      	movs	r3, #0
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a9e:	a80a      	add	r0, sp, #40	; 0x28
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8001aa0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001aa4:	f004 f840 	bl	8005b28 <HAL_RCCEx_PeriphCLKConfig>
 8001aa8:	b108      	cbz	r0, 8001aae <HAL_MMC_MspInit+0x3a>
    {
      Error_Handler();
 8001aaa:	f7ff fc1b 	bl	80012e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001aae:	4b2c      	ldr	r3, [pc, #176]	; (8001b60 <HAL_MMC_MspInit+0xec>)
    PC7     ------> SDMMC1_D7
    PC6     ------> SDMMC1_D6
    */
    GPIO_InitStruct.Pin = SDIO1_D2_Pin|SDIO1_D3_Pin|SDIO1_CK_Pin|SDIO1_D0_Pin
                          |SDIO1_D1_Pin|SDIO1_D7_Pin|SDIO1_D6_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab0:	2702      	movs	r7, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ab2:	2600      	movs	r6, #0
 8001ab4:	2503      	movs	r5, #3
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001ab6:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001aba:	240c      	movs	r4, #12
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001abc:	a905      	add	r1, sp, #20
 8001abe:	4829      	ldr	r0, [pc, #164]	; (8001b64 <HAL_MMC_MspInit+0xf0>)
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001ac0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001ac4:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8001ac8:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8001acc:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 8001ad0:	9201      	str	r2, [sp, #4]
 8001ad2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ad4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001ad8:	f042 0204 	orr.w	r2, r2, #4
 8001adc:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001ae0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001ae4:	f002 0204 	and.w	r2, r2, #4
 8001ae8:	9202      	str	r2, [sp, #8]
 8001aea:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aec:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001af0:	f042 0202 	orr.w	r2, r2, #2
 8001af4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001af8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001afc:	f002 0202 	and.w	r2, r2, #2
 8001b00:	9203      	str	r2, [sp, #12]
 8001b02:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b04:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001b08:	f042 0208 	orr.w	r2, r2, #8
 8001b0c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001b10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001b14:	9409      	str	r4, [sp, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b16:	f003 0308 	and.w	r3, r3, #8
 8001b1a:	9304      	str	r3, [sp, #16]
 8001b1c:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b1e:	f44f 53fe 	mov.w	r3, #8128	; 0x1fc0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b22:	e9cd 6507 	strd	r6, r5, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b26:	e9cd 3705 	strd	r3, r7, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b2a:	f002 f8d3 	bl	8003cd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDIO1_D5_Pin|SDIO1_D4_Pin;
 8001b2e:	f44f 7340 	mov.w	r3, #768	; 0x300
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b32:	a905      	add	r1, sp, #20
 8001b34:	480c      	ldr	r0, [pc, #48]	; (8001b68 <HAL_MMC_MspInit+0xf4>)
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001b36:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b38:	e9cd 3705 	strd	r3, r7, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b3c:	e9cd 6507 	strd	r6, r5, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b40:	f002 f8c8 	bl	8003cd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDIO1_CMD_Pin;
 8001b44:	2304      	movs	r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
    HAL_GPIO_Init(SDIO1_CMD_GPIO_Port, &GPIO_InitStruct);
 8001b46:	a905      	add	r1, sp, #20
 8001b48:	4808      	ldr	r0, [pc, #32]	; (8001b6c <HAL_MMC_MspInit+0xf8>)
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001b4a:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b4c:	e9cd 3705 	strd	r3, r7, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b50:	e9cd 6507 	strd	r6, r5, [sp, #28]
    HAL_GPIO_Init(SDIO1_CMD_GPIO_Port, &GPIO_InitStruct);
 8001b54:	f002 f8be 	bl	8003cd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8001b58:	b03b      	add	sp, #236	; 0xec
 8001b5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b5c:	52007000 	.word	0x52007000
 8001b60:	58024400 	.word	0x58024400
 8001b64:	58020800 	.word	0x58020800
 8001b68:	58020400 	.word	0x58020400
 8001b6c:	58020c00 	.word	0x58020c00

08001b70 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b70:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b72:	2214      	movs	r2, #20
{
 8001b74:	b0ba      	sub	sp, #232	; 0xe8
 8001b76:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b78:	2100      	movs	r1, #0
 8001b7a:	eb0d 0002 	add.w	r0, sp, r2
 8001b7e:	f011 fa1d 	bl	8012fbc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b82:	22c0      	movs	r2, #192	; 0xc0
 8001b84:	2100      	movs	r1, #0
 8001b86:	a80a      	add	r0, sp, #40	; 0x28
 8001b88:	f011 fa18 	bl	8012fbc <memset>
  if(hspi->Instance==SPI2)
 8001b8c:	6822      	ldr	r2, [r4, #0]
 8001b8e:	4b37      	ldr	r3, [pc, #220]	; (8001c6c <HAL_SPI_MspInit+0xfc>)
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d168      	bne.n	8001c66 <HAL_SPI_MspInit+0xf6>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001b94:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001b98:	2300      	movs	r3, #0
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b9a:	a80a      	add	r0, sp, #40	; 0x28
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001b9c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ba0:	f003 ffc2 	bl	8005b28 <HAL_RCCEx_PeriphCLKConfig>
 8001ba4:	b108      	cbz	r0, 8001baa <HAL_SPI_MspInit+0x3a>
    {
      Error_Handler();
 8001ba6:	f7ff fb9d 	bl	80012e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001baa:	4b31      	ldr	r3, [pc, #196]	; (8001c70 <HAL_SPI_MspInit+0x100>)
    PD3     ------> SPI2_SCK
    PI2     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bac:	2502      	movs	r5, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bae:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bb0:	a905      	add	r1, sp, #20
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001bb2:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8

    GPIO_InitStruct.Pin = GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001bb6:	2605      	movs	r6, #5
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bb8:	482e      	ldr	r0, [pc, #184]	; (8001c74 <HAL_SPI_MspInit+0x104>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001bba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001bbe:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8001bc2:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8001bc6:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001bca:	9201      	str	r2, [sp, #4]
 8001bcc:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bce:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001bd2:	f042 0202 	orr.w	r2, r2, #2
 8001bd6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001bda:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001bde:	f002 0202 	and.w	r2, r2, #2
 8001be2:	9202      	str	r2, [sp, #8]
 8001be4:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001be6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001bea:	f042 0208 	orr.w	r2, r2, #8
 8001bee:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001bf2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001bf6:	f002 0208 	and.w	r2, r2, #8
 8001bfa:	9203      	str	r2, [sp, #12]
 8001bfc:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001bfe:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001c02:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c06:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001c0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c12:	9304      	str	r3, [sp, #16]
 8001c14:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c16:	2310      	movs	r3, #16
 8001c18:	e9cd 3505 	strd	r3, r5, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8001c1c:	2307      	movs	r3, #7
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c1e:	e9cd 4407 	strd	r4, r4, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8001c22:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c24:	f002 f856 	bl	8003cd4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001c28:	2308      	movs	r3, #8
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c2a:	a905      	add	r1, sp, #20
 8001c2c:	4812      	ldr	r0, [pc, #72]	; (8001c78 <HAL_SPI_MspInit+0x108>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001c2e:	9609      	str	r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c30:	e9cd 3505 	strd	r3, r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c34:	e9cd 4407 	strd	r4, r4, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c38:	f002 f84c 	bl	8003cd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001c3c:	2304      	movs	r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001c3e:	a905      	add	r1, sp, #20
 8001c40:	480e      	ldr	r0, [pc, #56]	; (8001c7c <HAL_SPI_MspInit+0x10c>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001c42:	9609      	str	r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c44:	e9cd 3505 	strd	r3, r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c48:	e9cd 4407 	strd	r4, r4, [sp, #28]
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001c4c:	f002 f842 	bl	8003cd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001c50:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c54:	a905      	add	r1, sp, #20
 8001c56:	4807      	ldr	r0, [pc, #28]	; (8001c74 <HAL_SPI_MspInit+0x104>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001c58:	9609      	str	r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c5a:	e9cd 3505 	strd	r3, r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c5e:	e9cd 4407 	strd	r4, r4, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c62:	f002 f837 	bl	8003cd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001c66:	b03a      	add	sp, #232	; 0xe8
 8001c68:	bd70      	pop	{r4, r5, r6, pc}
 8001c6a:	bf00      	nop
 8001c6c:	40003800 	.word	0x40003800
 8001c70:	58024400 	.word	0x58024400
 8001c74:	58020400 	.word	0x58020400
 8001c78:	58020c00 	.word	0x58020c00
 8001c7c:	58022000 	.word	0x58022000

08001c80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c80:	b510      	push	{r4, lr}
 8001c82:	b0b8      	sub	sp, #224	; 0xe0
 8001c84:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c86:	2214      	movs	r2, #20
 8001c88:	2100      	movs	r1, #0
 8001c8a:	a803      	add	r0, sp, #12
 8001c8c:	f011 f996 	bl	8012fbc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c90:	22c0      	movs	r2, #192	; 0xc0
 8001c92:	2100      	movs	r1, #0
 8001c94:	a808      	add	r0, sp, #32
 8001c96:	f011 f991 	bl	8012fbc <memset>
  if(huart->Instance==USART3)
 8001c9a:	6822      	ldr	r2, [r4, #0]
 8001c9c:	4b1a      	ldr	r3, [pc, #104]	; (8001d08 <HAL_UART_MspInit+0x88>)
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	d130      	bne.n	8001d04 <HAL_UART_MspInit+0x84>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001ca2:	2202      	movs	r2, #2
 8001ca4:	2300      	movs	r3, #0
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ca6:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001ca8:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001cac:	f003 ff3c 	bl	8005b28 <HAL_RCCEx_PeriphCLKConfig>
 8001cb0:	b108      	cbz	r0, 8001cb6 <HAL_UART_MspInit+0x36>
    {
      Error_Handler();
 8001cb2:	f7ff fb17 	bl	80012e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001cb6:	4b15      	ldr	r3, [pc, #84]	; (8001d0c <HAL_UART_MspInit+0x8c>)
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cb8:	a903      	add	r1, sp, #12
 8001cba:	4815      	ldr	r0, [pc, #84]	; (8001d10 <HAL_UART_MspInit+0x90>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8001cbc:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8001cc0:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001cc4:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8001cc8:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8001ccc:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8001cd0:	9201      	str	r2, [sp, #4]
 8001cd2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cd4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001cd8:	f042 0202 	orr.w	r2, r2, #2
 8001cdc:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce0:	f44f 6240 	mov.w	r2, #3072	; 0xc00
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ce4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ce8:	f003 0302 	and.w	r3, r3, #2
 8001cec:	9302      	str	r3, [sp, #8]
 8001cee:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cf0:	2302      	movs	r3, #2
 8001cf2:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf6:	2300      	movs	r3, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cf8:	e9cd 3305 	strd	r3, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001cfc:	2307      	movs	r3, #7
 8001cfe:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d00:	f001 ffe8 	bl	8003cd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001d04:	b038      	add	sp, #224	; 0xe0
 8001d06:	bd10      	pop	{r4, pc}
 8001d08:	40004800 	.word	0x40004800
 8001d0c:	58024400 	.word	0x58024400
 8001d10:	58020400 	.word	0x58020400

08001d14 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001d14:	b530      	push	{r4, r5, lr}
 8001d16:	b0b9      	sub	sp, #228	; 0xe4
 8001d18:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d1a:	2214      	movs	r2, #20
 8001d1c:	2100      	movs	r1, #0
 8001d1e:	a803      	add	r0, sp, #12
 8001d20:	f011 f94c 	bl	8012fbc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d24:	22c0      	movs	r2, #192	; 0xc0
 8001d26:	2100      	movs	r1, #0
 8001d28:	a808      	add	r0, sp, #32
 8001d2a:	f011 f947 	bl	8012fbc <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001d2e:	6822      	ldr	r2, [r4, #0]
 8001d30:	4b22      	ldr	r3, [pc, #136]	; (8001dbc <HAL_PCD_MspInit+0xa8>)
 8001d32:	429a      	cmp	r2, r3
 8001d34:	d13f      	bne.n	8001db6 <HAL_PCD_MspInit+0xa2>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001d36:	2300      	movs	r3, #0
 8001d38:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d3c:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001d3e:	e9cd 2308 	strd	r2, r3, [sp, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8001d42:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001d46:	932a      	str	r3, [sp, #168]	; 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d48:	f003 feee 	bl	8005b28 <HAL_RCCEx_PeriphCLKConfig>
 8001d4c:	b108      	cbz	r0, 8001d52 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 8001d4e:	f7ff fac9 	bl	80012e4 <Error_Handler>

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d52:	4c1b      	ldr	r4, [pc, #108]	; (8001dc0 <HAL_PCD_MspInit+0xac>)
    HAL_PWREx_EnableUSBVoltageDetector();
 8001d54:	f002 fe7e 	bl	8004a54 <HAL_PWREx_EnableUSBVoltageDetector>
    PA9     ------> USB_OTG_FS_VBUS
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = VBUS_FS2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d58:	2500      	movs	r5, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(VBUS_FS2_GPIO_Port, &GPIO_InitStruct);
 8001d5a:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d5c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    HAL_GPIO_Init(VBUS_FS2_GPIO_Port, &GPIO_InitStruct);
 8001d60:	4818      	ldr	r0, [pc, #96]	; (8001dc4 <HAL_PCD_MspInit+0xb0>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d62:	f043 0301 	orr.w	r3, r3, #1
 8001d66:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8001d6a:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6e:	9505      	str	r5, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d70:	f003 0301 	and.w	r3, r3, #1
 8001d74:	9301      	str	r3, [sp, #4]
 8001d76:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d78:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d7c:	e9cd 3503 	strd	r3, r5, [sp, #12]
    HAL_GPIO_Init(VBUS_FS2_GPIO_Port, &GPIO_InitStruct);
 8001d80:	f001 ffa8 	bl	8003cd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS2_P_Pin|USB_OTG_FS2_N_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d84:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8001d88:	2302      	movs	r3, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d8a:	a903      	add	r1, sp, #12
 8001d8c:	480d      	ldr	r0, [pc, #52]	; (8001dc4 <HAL_PCD_MspInit+0xb0>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d8e:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001d92:	230a      	movs	r3, #10
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d94:	e9cd 5505 	strd	r5, r5, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001d98:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d9a:	f001 ff9b 	bl	8003cd4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001d9e:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 8001da2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001da6:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
 8001daa:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 8001dae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001db2:	9302      	str	r3, [sp, #8]
 8001db4:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001db6:	b039      	add	sp, #228	; 0xe4
 8001db8:	bd30      	pop	{r4, r5, pc}
 8001dba:	bf00      	nop
 8001dbc:	40080000 	.word	0x40080000
 8001dc0:	58024400 	.word	0x58024400
 8001dc4:	58020000 	.word	0x58020000

08001dc8 <HAL_SDRAM_MspInit>:
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001dc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dca:	b0b7      	sub	sp, #220	; 0xdc
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001dcc:	2100      	movs	r1, #0
 8001dce:	2214      	movs	r2, #20
 8001dd0:	a801      	add	r0, sp, #4
 8001dd2:	f011 f8f3 	bl	8012fbc <memset>
  if (FMC_Initialized) {
 8001dd6:	4b2f      	ldr	r3, [pc, #188]	; (8001e94 <HAL_SDRAM_MspInit+0xcc>)
 8001dd8:	6819      	ldr	r1, [r3, #0]
 8001dda:	2900      	cmp	r1, #0
 8001ddc:	d157      	bne.n	8001e8e <HAL_SDRAM_MspInit+0xc6>
  FMC_Initialized = 1;
 8001dde:	2201      	movs	r2, #1
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001de0:	a808      	add	r0, sp, #32
  FMC_Initialized = 1;
 8001de2:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001de4:	22b8      	movs	r2, #184	; 0xb8
 8001de6:	f011 f8e9 	bl	8012fbc <memset>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8001dea:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001dee:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001df0:	a806      	add	r0, sp, #24
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8001df2:	e9cd 2306 	strd	r2, r3, [sp, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001df6:	f003 fe97 	bl	8005b28 <HAL_RCCEx_PeriphCLKConfig>
 8001dfa:	b108      	cbz	r0, 8001e00 <HAL_SDRAM_MspInit+0x38>
      Error_Handler();
 8001dfc:	f7ff fa72 	bl	80012e4 <Error_Handler>
  __HAL_RCC_FMC_CLK_ENABLE();
 8001e00:	4b25      	ldr	r3, [pc, #148]	; (8001e98 <HAL_SDRAM_MspInit+0xd0>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e02:	2702      	movs	r7, #2
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e04:	2600      	movs	r6, #0
 8001e06:	2503      	movs	r5, #3
  __HAL_RCC_FMC_CLK_ENABLE();
 8001e08:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001e0c:	240c      	movs	r4, #12
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e0e:	a901      	add	r1, sp, #4
 8001e10:	4822      	ldr	r0, [pc, #136]	; (8001e9c <HAL_SDRAM_MspInit+0xd4>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8001e12:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001e16:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8001e1a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001e1e:	9405      	str	r4, [sp, #20]
  __HAL_RCC_FMC_CLK_ENABLE();
 8001e20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e24:	9300      	str	r3, [sp, #0]
 8001e26:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e28:	f64f 7383 	movw	r3, #65411	; 0xff83
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e2c:	e9cd 6503 	strd	r6, r5, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e30:	e9cd 3701 	strd	r3, r7, [sp, #4]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e34:	f001 ff4e 	bl	8003cd4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 8001e38:	f248 1333 	movw	r3, #33075	; 0x8133
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e3c:	a901      	add	r1, sp, #4
 8001e3e:	4818      	ldr	r0, [pc, #96]	; (8001ea0 <HAL_SDRAM_MspInit+0xd8>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001e40:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e42:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e46:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e4a:	f001 ff43 	bl	8003cd4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 8001e4e:	f24c 7303 	movw	r3, #50947	; 0xc703
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e52:	a901      	add	r1, sp, #4
 8001e54:	4813      	ldr	r0, [pc, #76]	; (8001ea4 <HAL_SDRAM_MspInit+0xdc>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001e56:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e58:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e5c:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e60:	f001 ff38 	bl	8003cd4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 8001e64:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001e68:	a901      	add	r1, sp, #4
 8001e6a:	480f      	ldr	r0, [pc, #60]	; (8001ea8 <HAL_SDRAM_MspInit+0xe0>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001e6c:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e6e:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e72:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001e76:	f001 ff2d 	bl	8003cd4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001e7a:	23e0      	movs	r3, #224	; 0xe0
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001e7c:	a901      	add	r1, sp, #4
 8001e7e:	480b      	ldr	r0, [pc, #44]	; (8001eac <HAL_SDRAM_MspInit+0xe4>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001e80:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e82:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e86:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001e8a:	f001 ff23 	bl	8003cd4 <HAL_GPIO_Init>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001e8e:	b037      	add	sp, #220	; 0xdc
 8001e90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e92:	bf00      	nop
 8001e94:	24001808 	.word	0x24001808
 8001e98:	58024400 	.word	0x58024400
 8001e9c:	58021000 	.word	0x58021000
 8001ea0:	58021800 	.word	0x58021800
 8001ea4:	58020c00 	.word	0x58020c00
 8001ea8:	58021400 	.word	0x58021400
 8001eac:	58021c00 	.word	0x58021c00

08001eb0 <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8001eb0:	b510      	push	{r4, lr}
 8001eb2:	b0b8      	sub	sp, #224	; 0xe0
 8001eb4:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001eb6:	22c0      	movs	r2, #192	; 0xc0
 8001eb8:	2100      	movs	r1, #0
 8001eba:	a808      	add	r0, sp, #32
 8001ebc:	f011 f87e 	bl	8012fbc <memset>
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8001ec0:	6822      	ldr	r2, [r4, #0]
 8001ec2:	4b30      	ldr	r3, [pc, #192]	; (8001f84 <HAL_SAI_MspInit+0xd4>)
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d129      	bne.n	8001f1c <HAL_SAI_MspInit+0x6c>
    {
    /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8001ec8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ecc:	2300      	movs	r3, #0
    PeriphClkInitStruct.Sai23ClockSelection = RCC_SAI23CLKSOURCE_PLL;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ece:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8001ed0:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ed4:	f003 fe28 	bl	8005b28 <HAL_RCCEx_PeriphCLKConfig>
 8001ed8:	b108      	cbz	r0, 8001ede <HAL_SAI_MspInit+0x2e>
    {
      Error_Handler();
 8001eda:	f7ff fa03 	bl	80012e4 <Error_Handler>
    }

    if (SAI2_client == 0)
 8001ede:	482a      	ldr	r0, [pc, #168]	; (8001f88 <HAL_SAI_MspInit+0xd8>)
 8001ee0:	6803      	ldr	r3, [r0, #0]
 8001ee2:	b963      	cbnz	r3, 8001efe <HAL_SAI_MspInit+0x4e>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8001ee4:	4a29      	ldr	r2, [pc, #164]	; (8001f8c <HAL_SAI_MspInit+0xdc>)
 8001ee6:	f8d2 10f0 	ldr.w	r1, [r2, #240]	; 0xf0
 8001eea:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8001eee:	f8c2 10f0 	str.w	r1, [r2, #240]	; 0xf0
 8001ef2:	f8d2 20f0 	ldr.w	r2, [r2, #240]	; 0xf0
 8001ef6:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
 8001efa:	9201      	str	r2, [sp, #4]
 8001efc:	9a01      	ldr	r2, [sp, #4]
    }
    SAI2_client ++;
 8001efe:	3301      	adds	r3, #1
    PI5     ------> SAI2_SCK_A
    PI4     ------> SAI2_MCLK_A
    PI7     ------> SAI2_FS_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f00:	21f0      	movs	r1, #240	; 0xf0
    SAI2_client ++;
 8001f02:	6003      	str	r3, [r0, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f04:	2302      	movs	r3, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001f06:	4822      	ldr	r0, [pc, #136]	; (8001f90 <HAL_SAI_MspInit+0xe0>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f08:	e9cd 1303 	strd	r1, r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f0c:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001f0e:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f10:	e9cd 3305 	strd	r3, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001f14:	230a      	movs	r3, #10
 8001f16:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001f18:	f001 fedc 	bl	8003cd4 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 8001f1c:	6822      	ldr	r2, [r4, #0]
 8001f1e:	4b1d      	ldr	r3, [pc, #116]	; (8001f94 <HAL_SAI_MspInit+0xe4>)
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d12c      	bne.n	8001f7e <HAL_SAI_MspInit+0xce>
    {
      /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8001f24:	2300      	movs	r3, #0
 8001f26:	f44f 7200 	mov.w	r2, #512	; 0x200
    PeriphClkInitStruct.Sai23ClockSelection = RCC_SAI23CLKSOURCE_PLL;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f2a:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8001f2c:	e9cd 2308 	strd	r2, r3, [sp, #32]
    PeriphClkInitStruct.Sai23ClockSelection = RCC_SAI23CLKSOURCE_PLL;
 8001f30:	2300      	movs	r3, #0
 8001f32:	931f      	str	r3, [sp, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f34:	f003 fdf8 	bl	8005b28 <HAL_RCCEx_PeriphCLKConfig>
 8001f38:	b108      	cbz	r0, 8001f3e <HAL_SAI_MspInit+0x8e>
    {
      Error_Handler();
 8001f3a:	f7ff f9d3 	bl	80012e4 <Error_Handler>
    }

      if (SAI2_client == 0)
 8001f3e:	4812      	ldr	r0, [pc, #72]	; (8001f88 <HAL_SAI_MspInit+0xd8>)
 8001f40:	6803      	ldr	r3, [r0, #0]
 8001f42:	b963      	cbnz	r3, 8001f5e <HAL_SAI_MspInit+0xae>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8001f44:	4a11      	ldr	r2, [pc, #68]	; (8001f8c <HAL_SAI_MspInit+0xdc>)
 8001f46:	f8d2 10f0 	ldr.w	r1, [r2, #240]	; 0xf0
 8001f4a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8001f4e:	f8c2 10f0 	str.w	r1, [r2, #240]	; 0xf0
 8001f52:	f8d2 20f0 	ldr.w	r2, [r2, #240]	; 0xf0
 8001f56:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
 8001f5a:	9202      	str	r2, [sp, #8]
 8001f5c:	9a02      	ldr	r2, [sp, #8]
      }
    SAI2_client ++;
 8001f5e:	3301      	adds	r3, #1

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f60:	f44f 6280 	mov.w	r2, #1024	; 0x400
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001f64:	a903      	add	r1, sp, #12
    SAI2_client ++;
 8001f66:	6003      	str	r3, [r0, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f68:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001f6a:	480b      	ldr	r0, [pc, #44]	; (8001f98 <HAL_SAI_MspInit+0xe8>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f6c:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f70:	2300      	movs	r3, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f72:	e9cd 3305 	strd	r3, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001f76:	230a      	movs	r3, #10
 8001f78:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001f7a:	f001 feab 	bl	8003cd4 <HAL_GPIO_Init>

    }
}
 8001f7e:	b038      	add	sp, #224	; 0xe0
 8001f80:	bd10      	pop	{r4, pc}
 8001f82:	bf00      	nop
 8001f84:	40015c04 	.word	0x40015c04
 8001f88:	24001814 	.word	0x24001814
 8001f8c:	58024400 	.word	0x58024400
 8001f90:	58022000 	.word	0x58022000
 8001f94:	40015c24 	.word	0x40015c24
 8001f98:	58021800 	.word	0x58021800

08001f9c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f9c:	e7fe      	b.n	8001f9c <NMI_Handler>

08001f9e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f9e:	e7fe      	b.n	8001f9e <HardFault_Handler>

08001fa0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fa0:	e7fe      	b.n	8001fa0 <MemManage_Handler>

08001fa2 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fa2:	e7fe      	b.n	8001fa2 <BusFault_Handler>

08001fa4 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fa4:	e7fe      	b.n	8001fa4 <UsageFault_Handler>

08001fa6 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fa6:	4770      	bx	lr

08001fa8 <DebugMon_Handler>:
 8001fa8:	4770      	bx	lr

08001faa <PendSV_Handler>:
 8001faa:	4770      	bx	lr

08001fac <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fac:	f000 bcd2 	b.w	8002954 <HAL_IncTick>

08001fb0 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fb0:	4a0b      	ldr	r2, [pc, #44]	; (8001fe0 <_sbrk+0x30>)
{
 8001fb2:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8001fb4:	6811      	ldr	r1, [r2, #0]
{
 8001fb6:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8001fb8:	b909      	cbnz	r1, 8001fbe <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8001fba:	490a      	ldr	r1, [pc, #40]	; (8001fe4 <_sbrk+0x34>)
 8001fbc:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fbe:	6810      	ldr	r0, [r2, #0]
 8001fc0:	4909      	ldr	r1, [pc, #36]	; (8001fe8 <_sbrk+0x38>)
 8001fc2:	4c0a      	ldr	r4, [pc, #40]	; (8001fec <_sbrk+0x3c>)
 8001fc4:	4403      	add	r3, r0
 8001fc6:	1b09      	subs	r1, r1, r4
 8001fc8:	428b      	cmp	r3, r1
 8001fca:	d906      	bls.n	8001fda <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8001fcc:	f010 ffb6 	bl	8012f3c <__errno>
 8001fd0:	230c      	movs	r3, #12
 8001fd2:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001fd4:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8001fd8:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8001fda:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8001fdc:	e7fc      	b.n	8001fd8 <_sbrk+0x28>
 8001fde:	bf00      	nop
 8001fe0:	24001818 	.word	0x24001818
 8001fe4:	20000000 	.word	0x20000000
 8001fe8:	24080000 	.word	0x24080000
 8001fec:	00000800 	.word	0x00000800

08001ff0 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001ff0:	4a25      	ldr	r2, [pc, #148]	; (8002088 <SystemInit+0x98>)
 8001ff2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001ff6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ffa:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001ffe:	4a23      	ldr	r2, [pc, #140]	; (800208c <SystemInit+0x9c>)
 8002000:	6813      	ldr	r3, [r2, #0]
 8002002:	f003 030f 	and.w	r3, r3, #15
 8002006:	2b06      	cmp	r3, #6
 8002008:	d805      	bhi.n	8002016 <SystemInit+0x26>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800200a:	6813      	ldr	r3, [r2, #0]
 800200c:	f023 030f 	bic.w	r3, r3, #15
 8002010:	f043 0307 	orr.w	r3, r3, #7
 8002014:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002016:	4b1e      	ldr	r3, [pc, #120]	; (8002090 <SystemInit+0xa0>)
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	f042 0201 	orr.w	r2, r2, #1
 800201e:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002020:	2200      	movs	r2, #0
 8002022:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002024:	4a1b      	ldr	r2, [pc, #108]	; (8002094 <SystemInit+0xa4>)
 8002026:	6819      	ldr	r1, [r3, #0]
 8002028:	400a      	ands	r2, r1

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800202a:	4918      	ldr	r1, [pc, #96]	; (800208c <SystemInit+0x9c>)
  RCC->CR &= 0xEAF6ED7FU;
 800202c:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800202e:	680a      	ldr	r2, [r1, #0]
 8002030:	0712      	lsls	r2, r2, #28
 8002032:	d505      	bpl.n	8002040 <SystemInit+0x50>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002034:	680a      	ldr	r2, [r1, #0]
 8002036:	f022 020f 	bic.w	r2, r2, #15
 800203a:	f042 0207 	orr.w	r2, r2, #7
 800203e:	600a      	str	r2, [r1, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002040:	2200      	movs	r2, #0

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002042:	4915      	ldr	r1, [pc, #84]	; (8002098 <SystemInit+0xa8>)
  RCC->D1CFGR = 0x00000000;
 8002044:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 8002046:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 8002048:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 800204a:	6299      	str	r1, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800204c:	4913      	ldr	r1, [pc, #76]	; (800209c <SystemInit+0xac>)
 800204e:	62d9      	str	r1, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002050:	4913      	ldr	r1, [pc, #76]	; (80020a0 <SystemInit+0xb0>)
 8002052:	6319      	str	r1, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002054:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002056:	6399      	str	r1, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002058:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800205a:	6419      	str	r1, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800205c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800205e:	6819      	ldr	r1, [r3, #0]
 8002060:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8002064:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002066:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002068:	4b0e      	ldr	r3, [pc, #56]	; (80020a4 <SystemInit+0xb4>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	0c1b      	lsrs	r3, r3, #16
 800206e:	041b      	lsls	r3, r3, #16
 8002070:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002074:	d203      	bcs.n	800207e <SystemInit+0x8e>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002076:	4b0c      	ldr	r3, [pc, #48]	; (80020a8 <SystemInit+0xb8>)
 8002078:	2201      	movs	r2, #1
 800207a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800207e:	4b0b      	ldr	r3, [pc, #44]	; (80020ac <SystemInit+0xbc>)
 8002080:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002084:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002086:	4770      	bx	lr
 8002088:	e000ed00 	.word	0xe000ed00
 800208c:	52002000 	.word	0x52002000
 8002090:	58024400 	.word	0x58024400
 8002094:	eaf6ed7f 	.word	0xeaf6ed7f
 8002098:	02020200 	.word	0x02020200
 800209c:	01ff0000 	.word	0x01ff0000
 80020a0:	01010280 	.word	0x01010280
 80020a4:	5c001000 	.word	0x5c001000
 80020a8:	51008000 	.word	0x51008000
 80020ac:	52004000 	.word	0x52004000

080020b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80020b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020e8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80020b4:	f7ff ff9c 	bl	8001ff0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80020b8:	480c      	ldr	r0, [pc, #48]	; (80020ec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80020ba:	490d      	ldr	r1, [pc, #52]	; (80020f0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80020bc:	4a0d      	ldr	r2, [pc, #52]	; (80020f4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80020be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020c0:	e002      	b.n	80020c8 <LoopCopyDataInit>

080020c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020c6:	3304      	adds	r3, #4

080020c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020cc:	d3f9      	bcc.n	80020c2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020ce:	4a0a      	ldr	r2, [pc, #40]	; (80020f8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80020d0:	4c0a      	ldr	r4, [pc, #40]	; (80020fc <LoopFillZerobss+0x22>)
  movs r3, #0
 80020d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020d4:	e001      	b.n	80020da <LoopFillZerobss>

080020d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020d8:	3204      	adds	r2, #4

080020da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020dc:	d3fb      	bcc.n	80020d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80020de:	f010 ff33 	bl	8012f48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020e2:	f7fe fc87 	bl	80009f4 <main>
  bx  lr
 80020e6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80020e8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80020ec:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80020f0:	240008cc 	.word	0x240008cc
  ldr r2, =_sidata
 80020f4:	080176b0 	.word	0x080176b0
  ldr r2, =_sbss
 80020f8:	240009a0 	.word	0x240009a0
  ldr r4, =_ebss
 80020fc:	2400289c 	.word	0x2400289c

08002100 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002100:	e7fe      	b.n	8002100 <ADC3_IRQHandler>

08002102 <MT25TL01G_GetFlashInfo>:
  * @retval QSPI memory status
  */
int32_t MT25TL01G_GetFlashInfo(MT25TL01G_Info_t *pInfo)
{
  pInfo->FlashSize          = MT25TL01G_FLASH_SIZE;
  pInfo->EraseSectorSize    = (2 * MT25TL01G_SUBSECTOR_SIZE);
 8002102:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002106:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  pInfo->ProgPageSize       = MT25TL01G_PAGE_SIZE;
  pInfo->EraseSectorsNumber = (MT25TL01G_FLASH_SIZE/pInfo->EraseSectorSize);
 800210a:	f44f 7180 	mov.w	r1, #256	; 0x100
  pInfo->EraseSectorSize    = (2 * MT25TL01G_SUBSECTOR_SIZE);
 800210e:	e9c0 2300 	strd	r2, r3, [r0]
  pInfo->EraseSectorsNumber = (MT25TL01G_FLASH_SIZE/pInfo->EraseSectorSize);
 8002112:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002116:	e9c0 3102 	strd	r3, r1, [r0, #8]
  pInfo->ProgPagesNumber    = (MT25TL01G_FLASH_SIZE/pInfo->ProgPageSize);
 800211a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800211e:	6103      	str	r3, [r0, #16]
  return MT25TL01G_OK;
}
 8002120:	2000      	movs	r0, #0
 8002122:	4770      	bx	lr

08002124 <MT25TL01G_AutoPollingMemReady>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_AutoPollingMemReady(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8002124:	b500      	push	{lr}

  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8002126:	f44f 7340 	mov.w	r3, #768	; 0x300
{
 800212a:	b095      	sub	sp, #84	; 0x54
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode          = QSPI_DATA_4_LINES;
 800212c:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8002130:	930c      	str	r3, [sp, #48]	; 0x30
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
 8002132:	2305      	movs	r3, #5
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8002134:	920f      	str	r2, [sp, #60]	; 0x3c
  s_command.DummyCycles       = 2;
 8002136:	2202      	movs	r2, #2
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
 8002138:	9306      	str	r3, [sp, #24]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800213a:	2300      	movs	r3, #0
  s_command.DummyCycles       = 2;
 800213c:	920b      	str	r2, [sp, #44]	; 0x2c
  s_config.Interval        = 0x10;
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
  s_config.Mask            = MT25TL01G_SR_WIP | (MT25TL01G_SR_WIP <<8);
  s_config.StatusBytesSize = 2;

  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800213e:	a906      	add	r1, sp, #24
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002140:	9313      	str	r3, [sp, #76]	; 0x4c
  s_config.Match           = 0;
 8002142:	9300      	str	r3, [sp, #0]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8002144:	9304      	str	r3, [sp, #16]
  s_config.StatusBytesSize = 2;
 8002146:	9203      	str	r2, [sp, #12]
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002148:	466a      	mov	r2, sp
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800214a:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800214e:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
  s_config.Interval        = 0x10;
 8002152:	2310      	movs	r3, #16
 8002154:	9302      	str	r3, [sp, #8]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8002156:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800215a:	9305      	str	r3, [sp, #20]
  s_config.Mask            = MT25TL01G_SR_WIP | (MT25TL01G_SR_WIP <<8);
 800215c:	f240 1301 	movw	r3, #257	; 0x101
 8002160:	9301      	str	r3, [sp, #4]
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002162:	f241 3388 	movw	r3, #5000	; 0x1388
 8002166:	f002 fe9e 	bl	8004ea6 <HAL_QSPI_AutoPolling>
  {
    return MT25TL01G_ERROR_AUTOPOLLING;
 800216a:	2800      	cmp	r0, #0
  }

  return MT25TL01G_OK;

}
 800216c:	bf14      	ite	ne
 800216e:	f06f 0004 	mvnne.w	r0, #4
 8002172:	2000      	moveq	r0, #0
 8002174:	b015      	add	sp, #84	; 0x54
 8002176:	f85d fb04 	ldr.w	pc, [sp], #4

0800217a <MT25TL01G_WriteEnable>:
{
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Enable write operations */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800217a:	2903      	cmp	r1, #3
  s_command.DummyCycles       = 0;
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800217c:	f241 3288 	movw	r2, #5000	; 0x1388
{
 8002180:	b530      	push	{r4, r5, lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8002182:	bf08      	it	eq
 8002184:	f44f 7340 	moveq.w	r3, #768	; 0x300
{
 8002188:	b095      	sub	sp, #84	; 0x54
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800218a:	bf18      	it	ne
 800218c:	f44f 7380 	movne.w	r3, #256	; 0x100
{
 8002190:	460c      	mov	r4, r1
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002192:	a906      	add	r1, sp, #24
{
 8002194:	4605      	mov	r5, r0
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8002196:	930c      	str	r3, [sp, #48]	; 0x30
  s_command.Instruction       = MT25TL01G_WRITE_ENABLE_CMD;
 8002198:	2306      	movs	r3, #6
 800219a:	9306      	str	r3, [sp, #24]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800219c:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800219e:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  s_command.DataMode          = QSPI_DATA_NONE;
 80021a2:	930f      	str	r3, [sp, #60]	; 0x3c
  s_command.DummyCycles       = 0;
 80021a4:	930b      	str	r3, [sp, #44]	; 0x2c
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80021a6:	9313      	str	r3, [sp, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80021a8:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80021ac:	f002 fd80 	bl	8004cb0 <HAL_QSPI_Command>
 80021b0:	bb20      	cbnz	r0, 80021fc <MT25TL01G_WriteEnable+0x82>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_config.Match           = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 80021b2:	f240 2302 	movw	r3, #514	; 0x202
  s_config.Mask            = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
  s_config.StatusBytesSize = 2;
  s_config.Interval        = 0x10;
 80021b6:	2202      	movs	r2, #2
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;

  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 80021b8:	2c03      	cmp	r4, #3
  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 80021ba:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 80021be:	9004      	str	r0, [sp, #16]


  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80021c0:	4628      	mov	r0, r5
  s_config.Mask            = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 80021c2:	e9cd 3300 	strd	r3, r3, [sp]
  s_config.Interval        = 0x10;
 80021c6:	f04f 0310 	mov.w	r3, #16
 80021ca:	e9cd 3202 	strd	r3, r2, [sp, #8]
  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 80021ce:	f04f 0305 	mov.w	r3, #5
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80021d2:	466a      	mov	r2, sp
  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 80021d4:	e9cd 1305 	strd	r1, r3, [sp, #20]
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 80021d8:	bf0c      	ite	eq
 80021da:	f04f 7340 	moveq.w	r3, #50331648	; 0x3000000
 80021de:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80021e2:	a906      	add	r1, sp, #24
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 80021e4:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80021e6:	f241 3388 	movw	r3, #5000	; 0x1388
 80021ea:	f002 fe5c 	bl	8004ea6 <HAL_QSPI_AutoPolling>
  {
    return MT25TL01G_ERROR_AUTOPOLLING;
 80021ee:	2800      	cmp	r0, #0
 80021f0:	bf0c      	ite	eq
 80021f2:	2000      	moveq	r0, #0
 80021f4:	f06f 0004 	mvnne.w	r0, #4
  }

  return MT25TL01G_OK;
}
 80021f8:	b015      	add	sp, #84	; 0x54
 80021fa:	bd30      	pop	{r4, r5, pc}
    return MT25TL01G_ERROR_COMMAND;
 80021fc:	f06f 0001 	mvn.w	r0, #1
 8002200:	e7fa      	b.n	80021f8 <MT25TL01G_WriteEnable+0x7e>

08002202 <MT25TL01G_Enter4BytesAddressMode>:
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8002202:	2903      	cmp	r1, #3
{
 8002204:	b530      	push	{r4, r5, lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8002206:	bf08      	it	eq
 8002208:	f44f 7340 	moveq.w	r3, #768	; 0x300
{
 800220c:	b08f      	sub	sp, #60	; 0x3c
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800220e:	bf18      	it	ne
 8002210:	f44f 7380 	movne.w	r3, #256	; 0x100
{
 8002214:	4604      	mov	r4, r0
 8002216:	460d      	mov	r5, r1
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8002218:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_ENTER_4_BYTE_ADDR_MODE_CMD;
 800221a:	23b7      	movs	r3, #183	; 0xb7
 800221c:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800221e:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002220:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 8002224:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.DummyCycles       = 0;
 8002226:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002228:	930d      	str	r3, [sp, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800222a:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
  if( MT25TL01G_WriteEnable(Ctx,Mode)!=MT25TL01G_OK)
 800222e:	f7ff ffa4 	bl	800217a <MT25TL01G_WriteEnable>
 8002232:	b958      	cbnz	r0, 800224c <MT25TL01G_Enter4BytesAddressMode+0x4a>
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002234:	f241 3288 	movw	r2, #5000	; 0x1388
 8002238:	4669      	mov	r1, sp
 800223a:	4620      	mov	r0, r4
 800223c:	f002 fd38 	bl	8004cb0 <HAL_QSPI_Command>
 8002240:	b920      	cbnz	r0, 800224c <MT25TL01G_Enter4BytesAddressMode+0x4a>
  else if(MT25TL01G_AutoPollingMemReady(Ctx,Mode)!=MT25TL01G_OK)
 8002242:	4629      	mov	r1, r5
 8002244:	4620      	mov	r0, r4
 8002246:	f7ff ff6d 	bl	8002124 <MT25TL01G_AutoPollingMemReady>
 800224a:	b108      	cbz	r0, 8002250 <MT25TL01G_Enter4BytesAddressMode+0x4e>
    return MT25TL01G_ERROR_COMMAND;
 800224c:	f06f 0001 	mvn.w	r0, #1
}
 8002250:	b00f      	add	sp, #60	; 0x3c
 8002252:	bd30      	pop	{r4, r5, pc}

08002254 <MT25TL01G_EnterQPIMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_EnterQPIMode(QSPI_HandleTypeDef *Ctx)
{
 8002254:	b500      	push	{lr}
  QSPI_CommandTypeDef s_command;

  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8002256:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 800225a:	b08f      	sub	sp, #60	; 0x3c
  s_command.DummyCycles       = 0;
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800225c:	f241 3288 	movw	r2, #5000	; 0x1388
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8002260:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_ENTER_QUAD_CMD;
 8002262:	2335      	movs	r3, #53	; 0x35
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002264:	4669      	mov	r1, sp
  s_command.Instruction       = MT25TL01G_ENTER_QUAD_CMD;
 8002266:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8002268:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800226a:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 800226e:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.DummyCycles       = 0;
 8002270:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002272:	930d      	str	r3, [sp, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8002274:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002278:	f002 fd1a 	bl	8004cb0 <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
 800227c:	2800      	cmp	r0, #0
  }

  return MT25TL01G_OK;
}
 800227e:	bf14      	ite	ne
 8002280:	f06f 0001 	mvnne.w	r0, #1
 8002284:	2000      	moveq	r0, #0
 8002286:	b00f      	add	sp, #60	; 0x3c
 8002288:	f85d fb04 	ldr.w	pc, [sp], #4

0800228c <MT25TL01G_ExitQPIMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_ExitQPIMode(QSPI_HandleTypeDef *Ctx)
{
 800228c:	b500      	push	{lr}
  QSPI_CommandTypeDef s_command;

  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800228e:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 8002292:	b08f      	sub	sp, #60	; 0x3c
  s_command.DummyCycles       = 0;
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002294:	f241 3288 	movw	r2, #5000	; 0x1388
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8002298:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_EXIT_QUAD_CMD;
 800229a:	23f5      	movs	r3, #245	; 0xf5
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800229c:	4669      	mov	r1, sp
  s_command.Instruction       = MT25TL01G_EXIT_QUAD_CMD;
 800229e:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80022a0:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80022a2:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 80022a6:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.DummyCycles       = 0;
 80022a8:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80022aa:	930d      	str	r3, [sp, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80022ac:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80022b0:	f002 fcfe 	bl	8004cb0 <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
 80022b4:	2800      	cmp	r0, #0
  }

  return MT25TL01G_OK;
}
 80022b6:	bf14      	ite	ne
 80022b8:	f06f 0001 	mvnne.w	r0, #1
 80022bc:	2000      	moveq	r0, #0
 80022be:	b00f      	add	sp, #60	; 0x3c
 80022c0:	f85d fb04 	ldr.w	pc, [sp], #4

080022c4 <MT25TL01G_EnableMemoryMappedModeDTR>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_EnableMemoryMappedModeDTR(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 80022c4:	b500      	push	{lr}
 80022c6:	b091      	sub	sp, #68	; 0x44
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;
  switch(Mode)
 80022c8:	2903      	cmp	r1, #3
 80022ca:	d80e      	bhi.n	80022ea <MT25TL01G_EnableMemoryMappedModeDTR+0x26>
 80022cc:	e8df f001 	tbb	[pc, r1]
 80022d0:	3f342902 	.word	0x3f342902
  {
  case MT25TL01G_SPI_MODE:                /* 1-1-1 commands, Power on H/W default setting */
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80022d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022d8:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_DTR_CMD;
 80022da:	230e      	movs	r3, #14
 80022dc:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 80022de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80022e2:	9309      	str	r3, [sp, #36]	; 0x24
    s_command.DataMode          = QSPI_DATA_1_LINE;
 80022e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    break;
  case MT25TL01G_QPI_MODE:                 /* 4-4-4 commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
    s_command.DataMode          = QSPI_DATA_4_LINES;
 80022e8:	930b      	str	r3, [sp, #44]	; 0x2c
    break;
  }
  /* Configure the command for the read instruction */
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ_QUAD_DTR;
 80022ea:	2208      	movs	r2, #8
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 80022ec:	f44f 5340 	mov.w	r3, #12288	; 0x3000
  s_command.DdrMode           = QSPI_DDR_MODE_ENABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 80022f0:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
  s_mem_mapped_cfg.TimeOutPeriod     = 0;

  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 80022f4:	a902      	add	r1, sp, #8
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ_QUAD_DTR;
 80022f6:	9207      	str	r2, [sp, #28]
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 80022f8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 80022fc:	9305      	str	r3, [sp, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80022fe:	2300      	movs	r3, #0
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 8002300:	e9cd c20d 	strd	ip, r2, [sp, #52]	; 0x34
  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8002304:	466a      	mov	r2, sp
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002306:	930a      	str	r3, [sp, #40]	; 0x28
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002308:	930f      	str	r3, [sp, #60]	; 0x3c
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 800230a:	e9cd 3300 	strd	r3, r3, [sp]
  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 800230e:	f002 fe1a 	bl	8004f46 <HAL_QSPI_MemoryMapped>
  {
    return MT25TL01G_ERROR_MEMORYMAPPED;
 8002312:	2800      	cmp	r0, #0
  }

  return MT25TL01G_OK;
}
 8002314:	bf14      	ite	ne
 8002316:	f06f 0005 	mvnne.w	r0, #5
 800231a:	2000      	moveq	r0, #0
 800231c:	b011      	add	sp, #68	; 0x44
 800231e:	f85d fb04 	ldr.w	pc, [sp], #4
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8002322:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002326:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_DUAL_OUT_FAST_READ_DTR_CMD;
 8002328:	233d      	movs	r3, #61	; 0x3d
 800232a:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 800232c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002330:	9309      	str	r3, [sp, #36]	; 0x24
    s_command.DataMode          = QSPI_DATA_2_LINES;
 8002332:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002336:	e7d7      	b.n	80022e8 <MT25TL01G_EnableMemoryMappedModeDTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8002338:	f44f 7380 	mov.w	r3, #256	; 0x100
 800233c:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_DTR_CMD;
 800233e:	23ee      	movs	r3, #238	; 0xee
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
 8002340:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8002342:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002346:	9309      	str	r3, [sp, #36]	; 0x24
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8002348:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800234c:	e7cc      	b.n	80022e8 <MT25TL01G_EnableMemoryMappedModeDTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800234e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002352:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
 8002354:	23ed      	movs	r3, #237	; 0xed
 8002356:	e7f3      	b.n	8002340 <MT25TL01G_EnableMemoryMappedModeDTR+0x7c>

08002358 <MT25TL01G_EnableMemoryMappedModeSTR>:
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */

int32_t MT25TL01G_EnableMemoryMappedModeSTR(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8002358:	b500      	push	{lr}
 800235a:	b091      	sub	sp, #68	; 0x44
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;
  switch(Mode)
 800235c:	2903      	cmp	r1, #3
 800235e:	d80e      	bhi.n	800237e <MT25TL01G_EnableMemoryMappedModeSTR+0x26>
 8002360:	e8df f001 	tbb	[pc, r1]
 8002364:	3b302502 	.word	0x3b302502
  {
  case MT25TL01G_SPI_MODE:           /* 1-1-1 read commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8002368:	f44f 7380 	mov.w	r3, #256	; 0x100
 800236c:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_ADDR_CMD;
 800236e:	230c      	movs	r3, #12
 8002370:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 8002372:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002376:	9309      	str	r3, [sp, #36]	; 0x24
    s_command.DataMode          = QSPI_DATA_1_LINE;
 8002378:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000

  case MT25TL01G_QPI_MODE:                 /* 4-4-4 commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
    s_command.DataMode          = QSPI_DATA_4_LINES;
 800237c:	930b      	str	r3, [sp, #44]	; 0x2c

    break;

  }
  /* Configure the command for the read instruction */
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ;
 800237e:	2308      	movs	r3, #8

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
  s_mem_mapped_cfg.TimeOutPeriod     = 0;

  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8002380:	466a      	mov	r2, sp
 8002382:	a902      	add	r1, sp, #8
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ;
 8002384:	9307      	str	r3, [sp, #28]
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8002386:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800238a:	9305      	str	r3, [sp, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800238c:	2300      	movs	r3, #0
 800238e:	930a      	str	r3, [sp, #40]	; 0x28
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002390:	930f      	str	r3, [sp, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8002392:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 8002396:	e9cd 3300 	strd	r3, r3, [sp]
  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 800239a:	f002 fdd4 	bl	8004f46 <HAL_QSPI_MemoryMapped>
  {
    return MT25TL01G_ERROR_MEMORYMAPPED;
 800239e:	2800      	cmp	r0, #0
  }

  return MT25TL01G_OK;
}
 80023a0:	bf14      	ite	ne
 80023a2:	f06f 0005 	mvnne.w	r0, #5
 80023a6:	2000      	moveq	r0, #0
 80023a8:	b011      	add	sp, #68	; 0x44
 80023aa:	f85d fb04 	ldr.w	pc, [sp], #4
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80023ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023b2:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_DUAL_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 80023b4:	23bc      	movs	r3, #188	; 0xbc
 80023b6:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_2_LINES;
 80023b8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80023bc:	9309      	str	r3, [sp, #36]	; 0x24
    s_command.DataMode          = QSPI_DATA_2_LINES;
 80023be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023c2:	e7db      	b.n	800237c <MT25TL01G_EnableMemoryMappedModeSTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80023c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023c8:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 80023ca:	23ec      	movs	r3, #236	; 0xec
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
 80023cc:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 80023ce:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80023d2:	9309      	str	r3, [sp, #36]	; 0x24
    s_command.DataMode          = QSPI_DATA_4_LINES;
 80023d4:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80023d8:	e7d0      	b.n	800237c <MT25TL01G_EnableMemoryMappedModeSTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80023da:	f44f 7340 	mov.w	r3, #768	; 0x300
 80023de:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
 80023e0:	23eb      	movs	r3, #235	; 0xeb
 80023e2:	e7f3      	b.n	80023cc <MT25TL01G_EnableMemoryMappedModeSTR+0x74>

080023e4 <MT25TL01G_ResetEnable>:
int32_t MT25TL01G_ResetEnable(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80023e4:	2903      	cmp	r1, #3
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80023e6:	f241 3288 	movw	r2, #5000	; 0x1388
{
 80023ea:	b500      	push	{lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80023ec:	bf08      	it	eq
 80023ee:	f44f 7340 	moveq.w	r3, #768	; 0x300
{
 80023f2:	b08f      	sub	sp, #60	; 0x3c
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80023f4:	bf18      	it	ne
 80023f6:	f44f 7380 	movne.w	r3, #256	; 0x100
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80023fa:	4669      	mov	r1, sp
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80023fc:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_RESET_ENABLE_CMD;
 80023fe:	2366      	movs	r3, #102	; 0x66
 8002400:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8002402:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002404:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 8002408:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.DummyCycles       = 0;
 800240a:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800240c:	930d      	str	r3, [sp, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800240e:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002412:	f002 fc4d 	bl	8004cb0 <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
 8002416:	2800      	cmp	r0, #0
  }

  return MT25TL01G_OK;
}
 8002418:	bf14      	ite	ne
 800241a:	f06f 0001 	mvnne.w	r0, #1
 800241e:	2000      	moveq	r0, #0
 8002420:	b00f      	add	sp, #60	; 0x3c
 8002422:	f85d fb04 	ldr.w	pc, [sp], #4

08002426 <MT25TL01G_ResetMemory>:
int32_t MT25TL01G_ResetMemory(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8002426:	2903      	cmp	r1, #3
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002428:	f241 3288 	movw	r2, #5000	; 0x1388
{
 800242c:	b500      	push	{lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800242e:	bf08      	it	eq
 8002430:	f44f 7340 	moveq.w	r3, #768	; 0x300
{
 8002434:	b08f      	sub	sp, #60	; 0x3c
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8002436:	bf18      	it	ne
 8002438:	f44f 7380 	movne.w	r3, #256	; 0x100
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800243c:	4669      	mov	r1, sp
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800243e:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_RESET_MEMORY_CMD ;
 8002440:	2399      	movs	r3, #153	; 0x99
 8002442:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8002444:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002446:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 800244a:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.DummyCycles       = 0;
 800244c:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800244e:	930d      	str	r3, [sp, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8002450:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002454:	f002 fc2c 	bl	8004cb0 <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
 8002458:	2800      	cmp	r0, #0
  }

  return MT25TL01G_OK;
}
 800245a:	bf14      	ite	ne
 800245c:	f06f 0001 	mvnne.w	r0, #1
 8002460:	2000      	moveq	r0, #0
 8002462:	b00f      	add	sp, #60	; 0x3c
 8002464:	f85d fb04 	ldr.w	pc, [sp], #4

08002468 <MX_QSPI_Init>:
  */
__weak HAL_StatusTypeDef MX_QSPI_Init(QSPI_HandleTypeDef *hQspi, MX_QSPI_Init_t *Config)
{
  /* QSPI initialization */
  /* QSPI freq = SYSCLK /(1 + ClockPrescaler) Mhz */
  hQspi->Instance                = QUADSPI;
 8002468:	4a09      	ldr	r2, [pc, #36]	; (8002490 <MX_QSPI_Init+0x28>)
  hQspi->Init.ClockPrescaler     = Config->ClockPrescaler;
  hQspi->Init.FifoThreshold      = 1;
  hQspi->Init.SampleShifting     = Config->SampleShifting;
  hQspi->Init.FlashSize          = Config->FlashSize;
  hQspi->Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_4_CYCLE; /* Min 50ns for nonRead */
  hQspi->Init.ClockMode          = QSPI_CLOCK_MODE_0;
 800246a:	f44f 7c40 	mov.w	ip, #768	; 0x300
  hQspi->Instance                = QUADSPI;
 800246e:	6002      	str	r2, [r0, #0]
  hQspi->Init.ClockPrescaler     = Config->ClockPrescaler;
 8002470:	684a      	ldr	r2, [r1, #4]
 8002472:	6042      	str	r2, [r0, #4]
  hQspi->Init.FifoThreshold      = 1;
 8002474:	2201      	movs	r2, #1
 8002476:	6082      	str	r2, [r0, #8]
  hQspi->Init.SampleShifting     = Config->SampleShifting;
 8002478:	688a      	ldr	r2, [r1, #8]
 800247a:	60c2      	str	r2, [r0, #12]
  hQspi->Init.FlashSize          = Config->FlashSize;
 800247c:	680a      	ldr	r2, [r1, #0]
 800247e:	6102      	str	r2, [r0, #16]
  hQspi->Init.ClockMode          = QSPI_CLOCK_MODE_0;
 8002480:	2200      	movs	r2, #0
 8002482:	e9c0 c205 	strd	ip, r2, [r0, #20]
  hQspi->Init.FlashID            = QSPI_FLASH_ID_1;
 8002486:	61c2      	str	r2, [r0, #28]
  hQspi->Init.DualFlash          = Config->DualFlashMode;
 8002488:	68ca      	ldr	r2, [r1, #12]
 800248a:	6202      	str	r2, [r0, #32]

  return HAL_QSPI_Init(hQspi);
 800248c:	f002 bbc2 	b.w	8004c14 <HAL_QSPI_Init>
 8002490:	52005000 	.word	0x52005000

08002494 <BSP_QSPI_EnableMemoryMappedMode>:
  *         Only 1 Instance can running MMP mode. And it will lock system at this mode.
  * @param  Instance  QSPI instance
  * @retval BSP status
  */
int32_t BSP_QSPI_EnableMemoryMappedMode(uint32_t Instance)
{
 8002494:	b510      	push	{r4, lr}
  int32_t ret = BSP_ERROR_NONE;

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 8002496:	b988      	cbnz	r0, 80024bc <BSP_QSPI_EnableMemoryMappedMode+0x28>
  }
  else
  {
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
    {
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8002498:	4c0a      	ldr	r4, [pc, #40]	; (80024c4 <BSP_QSPI_EnableMemoryMappedMode+0x30>)
 800249a:	480b      	ldr	r0, [pc, #44]	; (80024c8 <BSP_QSPI_EnableMemoryMappedMode+0x34>)
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
 800249c:	78a3      	ldrb	r3, [r4, #2]
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800249e:	7861      	ldrb	r1, [r4, #1]
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
 80024a0:	b94b      	cbnz	r3, 80024b6 <BSP_QSPI_EnableMemoryMappedMode+0x22>
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 80024a2:	f7ff ff59 	bl	8002358 <MT25TL01G_EnableMemoryMappedModeSTR>
 80024a6:	b110      	cbz	r0, 80024ae <BSP_QSPI_EnableMemoryMappedMode+0x1a>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80024a8:	f06f 0004 	mvn.w	r0, #4
    }
  }

  /* Return BSP status */
  return ret;
}
 80024ac:	bd10      	pop	{r4, pc}
        QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_MMP;
 80024ae:	2302      	movs	r3, #2
  int32_t ret = BSP_ERROR_NONE;
 80024b0:	2000      	movs	r0, #0
        QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_MMP;
 80024b2:	7023      	strb	r3, [r4, #0]
 80024b4:	e7fa      	b.n	80024ac <BSP_QSPI_EnableMemoryMappedMode+0x18>
      if(MT25TL01G_EnableMemoryMappedModeDTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 80024b6:	f7ff ff05 	bl	80022c4 <MT25TL01G_EnableMemoryMappedModeDTR>
 80024ba:	e7f4      	b.n	80024a6 <BSP_QSPI_EnableMemoryMappedMode+0x12>
    ret = BSP_ERROR_WRONG_PARAM;
 80024bc:	f06f 0001 	mvn.w	r0, #1
  return ret;
 80024c0:	e7f4      	b.n	80024ac <BSP_QSPI_EnableMemoryMappedMode+0x18>
 80024c2:	bf00      	nop
 80024c4:	2400181c 	.word	0x2400181c
 80024c8:	24001828 	.word	0x24001828

080024cc <BSP_QSPI_ConfigFlash>:
  * @param  Mode      QSPI mode
  * @param  Rate      QSPI transfer rate
  * @retval BSP status
  */
int32_t BSP_QSPI_ConfigFlash(uint32_t Instance, BSP_QSPI_Interface_t Mode, BSP_QSPI_Transfer_t Rate)
{
 80024cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024ce:	460c      	mov	r4, r1
 80024d0:	4617      	mov	r7, r2
  int32_t ret = BSP_ERROR_NONE;

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 80024d2:	bb28      	cbnz	r0, 8002520 <BSP_QSPI_ConfigFlash+0x54>
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    /* Check if MMP mode locked ************************************************/
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_MMP)
 80024d4:	4d17      	ldr	r5, [pc, #92]	; (8002534 <BSP_QSPI_ConfigFlash+0x68>)
 80024d6:	782b      	ldrb	r3, [r5, #0]
 80024d8:	2b02      	cmp	r3, #2
 80024da:	d024      	beq.n	8002526 <BSP_QSPI_ConfigFlash+0x5a>
      ret = BSP_ERROR_QSPI_MMP_LOCK_FAILURE;
    }
    else
    {
      /* Setup MCU transfer rate setting ***************************************************/
      hqspi.Init.SampleShifting = (Rate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 80024dc:	2a00      	cmp	r2, #0
 80024de:	4e16      	ldr	r6, [pc, #88]	; (8002538 <BSP_QSPI_ConfigFlash+0x6c>)
 80024e0:	bf08      	it	eq
 80024e2:	2010      	moveq	r0, #16
 80024e4:	60f0      	str	r0, [r6, #12]

      if(HAL_QSPI_Init(&hqspi)!= HAL_OK)
 80024e6:	4630      	mov	r0, r6
 80024e8:	f002 fb94 	bl	8004c14 <HAL_QSPI_Init>
 80024ec:	b9f0      	cbnz	r0, 800252c <BSP_QSPI_ConfigFlash+0x60>
        ret = BSP_ERROR_PERIPH_FAILURE;
      }
      else
      {
        /* Setup Flash interface ***************************************************/
        switch(QSPI_Ctx[Instance].InterfaceMode)
 80024ee:	786b      	ldrb	r3, [r5, #1]
 80024f0:	2b03      	cmp	r3, #3
 80024f2:	d10f      	bne.n	8002514 <BSP_QSPI_ConfigFlash+0x48>
        {
        case MT25TL01G_QPI_MODE :               /* 4-4-4 commands */
          if(Mode != MT25TL01G_QPI_MODE)
 80024f4:	2c03      	cmp	r4, #3
 80024f6:	d105      	bne.n	8002504 <BSP_QSPI_ConfigFlash+0x38>

        /* Update QSPI context if all operations are well done */
        if(ret == BSP_ERROR_NONE)
        {
          /* Update current status parameter *****************************************/
          QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;
 80024f8:	2301      	movs	r3, #1
          QSPI_Ctx[Instance].InterfaceMode = Mode;
          QSPI_Ctx[Instance].TransferRate  = Rate;
 80024fa:	2000      	movs	r0, #0
          QSPI_Ctx[Instance].InterfaceMode = Mode;
 80024fc:	706c      	strb	r4, [r5, #1]
          QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;
 80024fe:	702b      	strb	r3, [r5, #0]
          QSPI_Ctx[Instance].TransferRate  = Rate;
 8002500:	70af      	strb	r7, [r5, #2]
    }
  }

  /* Return BSP status */
  return ret;
}
 8002502:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if(MT25TL01G_ExitQPIMode(&hqspi) != MT25TL01G_OK)
 8002504:	4630      	mov	r0, r6
 8002506:	f7ff fec1 	bl	800228c <MT25TL01G_ExitQPIMode>
 800250a:	2800      	cmp	r0, #0
 800250c:	d0f4      	beq.n	80024f8 <BSP_QSPI_ConfigFlash+0x2c>
              ret = BSP_ERROR_COMPONENT_FAILURE;
 800250e:	f06f 0004 	mvn.w	r0, #4
 8002512:	e7f6      	b.n	8002502 <BSP_QSPI_ConfigFlash+0x36>
          if(Mode == MT25TL01G_QPI_MODE)
 8002514:	2c03      	cmp	r4, #3
 8002516:	d1ef      	bne.n	80024f8 <BSP_QSPI_ConfigFlash+0x2c>
            if(MT25TL01G_EnterQPIMode(&hqspi) != MT25TL01G_OK)
 8002518:	4630      	mov	r0, r6
 800251a:	f7ff fe9b 	bl	8002254 <MT25TL01G_EnterQPIMode>
 800251e:	e7f4      	b.n	800250a <BSP_QSPI_ConfigFlash+0x3e>
    ret = BSP_ERROR_WRONG_PARAM;
 8002520:	f06f 0001 	mvn.w	r0, #1
 8002524:	e7ed      	b.n	8002502 <BSP_QSPI_ConfigFlash+0x36>
      ret = BSP_ERROR_QSPI_MMP_LOCK_FAILURE;
 8002526:	f06f 0019 	mvn.w	r0, #25
 800252a:	e7ea      	b.n	8002502 <BSP_QSPI_ConfigFlash+0x36>
        ret = BSP_ERROR_PERIPH_FAILURE;
 800252c:	f06f 0003 	mvn.w	r0, #3
  return ret;
 8002530:	e7e7      	b.n	8002502 <BSP_QSPI_ConfigFlash+0x36>
 8002532:	bf00      	nop
 8002534:	2400181c 	.word	0x2400181c
 8002538:	24001828 	.word	0x24001828

0800253c <BSP_QSPI_Init>:
{
 800253c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002540:	460d      	mov	r5, r1
 8002542:	b0a4      	sub	sp, #144	; 0x90
  if(Instance >= QSPI_INSTANCES_NUMBER)
 8002544:	4604      	mov	r4, r0
 8002546:	2800      	cmp	r0, #0
 8002548:	f040 81aa 	bne.w	80028a0 <BSP_QSPI_Init+0x364>
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_NONE)
 800254c:	4e03      	ldr	r6, [pc, #12]	; (800255c <BSP_QSPI_Init+0x20>)
 800254e:	7833      	ldrb	r3, [r6, #0]
 8002550:	b133      	cbz	r3, 8002560 <BSP_QSPI_Init+0x24>
  int32_t ret = BSP_ERROR_NONE;
 8002552:	2000      	movs	r0, #0
}
 8002554:	b024      	add	sp, #144	; 0x90
 8002556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800255a:	bf00      	nop
 800255c:	2400181c 	.word	0x2400181c
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hQspi);

  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable the QuadSPI memory interface clock */
  QSPI_CLK_ENABLE();
 8002560:	4bc2      	ldr	r3, [pc, #776]	; (800286c <BSP_QSPI_Init+0x330>)
  QSPI_BK2_D3_GPIO_CLK_ENABLE();

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* QSPI CLK GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002562:	f44f 6180 	mov.w	r1, #1024	; 0x400
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
  gpio_init_structure.Pull      = GPIO_NOPULL;
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8002566:	2709      	movs	r7, #9
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);

  /* QSPI CS GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_CS_PIN;
 8002568:	f04f 0840 	mov.w	r8, #64	; 0x40
  QSPI_CLK_ENABLE();
 800256c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
  gpio_init_structure.Pull      = GPIO_PULLUP;
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 8002570:	f04f 0a0a 	mov.w	sl, #10
  gpio_init_structure.Pin       = QSPI_BK2_D0_PIN;
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);

  /* QSPI D1 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D1_PIN;
 8002574:	f44f 7900 	mov.w	r9, #512	; 0x200
  QSPI_CLK_ENABLE();
 8002578:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800257c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8002580:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8002584:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002588:	9201      	str	r2, [sp, #4]
 800258a:	9a01      	ldr	r2, [sp, #4]
  QSPI_FORCE_RESET();
 800258c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800258e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002592:	67da      	str	r2, [r3, #124]	; 0x7c
  QSPI_RELEASE_RESET();
 8002594:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8002596:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800259a:	67da      	str	r2, [r3, #124]	; 0x7c
  QSPI_CLK_GPIO_CLK_ENABLE();
 800259c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80025a0:	f042 0220 	orr.w	r2, r2, #32
 80025a4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80025a8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80025ac:	f002 0220 	and.w	r2, r2, #32
 80025b0:	9202      	str	r2, [sp, #8]
 80025b2:	9a02      	ldr	r2, [sp, #8]
  QSPI_BK1_CS_GPIO_CLK_ENABLE();
 80025b4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80025b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025bc:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80025c0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80025c4:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80025c8:	9203      	str	r2, [sp, #12]
 80025ca:	9a03      	ldr	r2, [sp, #12]
  QSPI_BK1_D0_GPIO_CLK_ENABLE();
 80025cc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80025d0:	f042 0208 	orr.w	r2, r2, #8
 80025d4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80025d8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80025dc:	f002 0208 	and.w	r2, r2, #8
 80025e0:	9204      	str	r2, [sp, #16]
 80025e2:	9a04      	ldr	r2, [sp, #16]
  QSPI_BK1_D1_GPIO_CLK_ENABLE();
 80025e4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80025e8:	f042 0220 	orr.w	r2, r2, #32
 80025ec:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80025f0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80025f4:	f002 0220 	and.w	r2, r2, #32
 80025f8:	9205      	str	r2, [sp, #20]
 80025fa:	9a05      	ldr	r2, [sp, #20]
  QSPI_BK1_D2_GPIO_CLK_ENABLE();
 80025fc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002600:	f042 0220 	orr.w	r2, r2, #32
 8002604:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8002608:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800260c:	f002 0220 	and.w	r2, r2, #32
 8002610:	9206      	str	r2, [sp, #24]
 8002612:	9a06      	ldr	r2, [sp, #24]
  QSPI_BK1_D3_GPIO_CLK_ENABLE();
 8002614:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002618:	f042 0220 	orr.w	r2, r2, #32
 800261c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8002620:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002624:	f002 0220 	and.w	r2, r2, #32
 8002628:	9207      	str	r2, [sp, #28]
 800262a:	9a07      	ldr	r2, [sp, #28]
  QSPI_BK2_CS_GPIO_CLK_ENABLE();
 800262c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002630:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002634:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8002638:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800263c:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8002640:	9208      	str	r2, [sp, #32]
 8002642:	9a08      	ldr	r2, [sp, #32]
  QSPI_BK2_D0_GPIO_CLK_ENABLE();
 8002644:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002648:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800264c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8002650:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002654:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8002658:	9209      	str	r2, [sp, #36]	; 0x24
 800265a:	9a09      	ldr	r2, [sp, #36]	; 0x24
  QSPI_BK2_D1_GPIO_CLK_ENABLE();
 800265c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002660:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002664:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8002668:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800266c:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8002670:	920a      	str	r2, [sp, #40]	; 0x28
 8002672:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  QSPI_BK2_D2_GPIO_CLK_ENABLE();
 8002674:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002678:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800267c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8002680:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002684:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8002688:	920b      	str	r2, [sp, #44]	; 0x2c
 800268a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  QSPI_BK2_D3_GPIO_CLK_ENABLE();
 800268c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002690:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002694:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8002698:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800269c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026a0:	930c      	str	r3, [sp, #48]	; 0x30
 80026a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80026a4:	2302      	movs	r3, #2
 80026a6:	e9cd 1316 	strd	r1, r3, [sp, #88]	; 0x58
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 80026aa:	2303      	movs	r3, #3
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 80026ac:	a916      	add	r1, sp, #88	; 0x58
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 80026ae:	971a      	str	r7, [sp, #104]	; 0x68
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80026b0:	e9cd 0318 	strd	r0, r3, [sp, #96]	; 0x60
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 80026b4:	486e      	ldr	r0, [pc, #440]	; (8002870 <BSP_QSPI_Init+0x334>)
 80026b6:	f001 fb0d 	bl	8003cd4 <HAL_GPIO_Init>
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80026ba:	2301      	movs	r3, #1
  HAL_GPIO_Init(QSPI_BK1_CS_GPIO_PORT, &gpio_init_structure);
 80026bc:	a916      	add	r1, sp, #88	; 0x58
 80026be:	486d      	ldr	r0, [pc, #436]	; (8002874 <BSP_QSPI_Init+0x338>)
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80026c0:	9318      	str	r3, [sp, #96]	; 0x60
  gpio_init_structure.Pin       = QSPI_BK1_CS_PIN;
 80026c2:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 80026c6:	f8cd a068 	str.w	sl, [sp, #104]	; 0x68
  HAL_GPIO_Init(QSPI_BK1_CS_GPIO_PORT, &gpio_init_structure);
 80026ca:	f001 fb03 	bl	8003cd4 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = QSPI_BK1_D0_PIN;
 80026ce:	f44f 6300 	mov.w	r3, #2048	; 0x800
  HAL_GPIO_Init(QSPI_BK1_D0_GPIO_PORT, &gpio_init_structure);
 80026d2:	a916      	add	r1, sp, #88	; 0x58
 80026d4:	4868      	ldr	r0, [pc, #416]	; (8002878 <BSP_QSPI_Init+0x33c>)
  gpio_init_structure.Pin       = QSPI_BK1_D0_PIN;
 80026d6:	9316      	str	r3, [sp, #88]	; 0x58
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80026d8:	9418      	str	r4, [sp, #96]	; 0x60
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 80026da:	971a      	str	r7, [sp, #104]	; 0x68
  HAL_GPIO_Init(QSPI_BK1_D0_GPIO_PORT, &gpio_init_structure);
 80026dc:	f001 fafa 	bl	8003cd4 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = QSPI_BK2_D0_PIN;
 80026e0:	2304      	movs	r3, #4
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 80026e2:	a916      	add	r1, sp, #88	; 0x58
 80026e4:	4865      	ldr	r0, [pc, #404]	; (800287c <BSP_QSPI_Init+0x340>)
  gpio_init_structure.Pin       = QSPI_BK2_D0_PIN;
 80026e6:	9316      	str	r3, [sp, #88]	; 0x58
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 80026e8:	971a      	str	r7, [sp, #104]	; 0x68
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 80026ea:	f001 faf3 	bl	8003cd4 <HAL_GPIO_Init>
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
  HAL_GPIO_Init(QSPI_BK1_D1_GPIO_PORT, &gpio_init_structure);
 80026ee:	a916      	add	r1, sp, #88	; 0x58
 80026f0:	485f      	ldr	r0, [pc, #380]	; (8002870 <BSP_QSPI_Init+0x334>)
  gpio_init_structure.Pin       = QSPI_BK1_D1_PIN;
 80026f2:	f8cd 9058 	str.w	r9, [sp, #88]	; 0x58
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 80026f6:	f8cd a068 	str.w	sl, [sp, #104]	; 0x68
  HAL_GPIO_Init(QSPI_BK1_D1_GPIO_PORT, &gpio_init_structure);
 80026fa:	f001 faeb 	bl	8003cd4 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D1_PIN;
 80026fe:	2308      	movs	r3, #8
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK2_D1_GPIO_PORT, &gpio_init_structure);
 8002700:	a916      	add	r1, sp, #88	; 0x58
 8002702:	485e      	ldr	r0, [pc, #376]	; (800287c <BSP_QSPI_Init+0x340>)
  gpio_init_structure.Pin       = QSPI_BK2_D1_PIN;
 8002704:	9316      	str	r3, [sp, #88]	; 0x58
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8002706:	971a      	str	r7, [sp, #104]	; 0x68
  HAL_GPIO_Init(QSPI_BK2_D1_GPIO_PORT, &gpio_init_structure);
 8002708:	f001 fae4 	bl	8003cd4 <HAL_GPIO_Init>

  /* QSPI D2 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D2_PIN;
 800270c:	2380      	movs	r3, #128	; 0x80
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK1_D2_GPIO_PORT, &gpio_init_structure);
 800270e:	a916      	add	r1, sp, #88	; 0x58
 8002710:	4857      	ldr	r0, [pc, #348]	; (8002870 <BSP_QSPI_Init+0x334>)
  gpio_init_structure.Pin       = QSPI_BK1_D2_PIN;
 8002712:	9316      	str	r3, [sp, #88]	; 0x58
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8002714:	971a      	str	r7, [sp, #104]	; 0x68
  HAL_GPIO_Init(QSPI_BK1_D2_GPIO_PORT, &gpio_init_structure);
 8002716:	f001 fadd 	bl	8003cd4 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D2_PIN;
  HAL_GPIO_Init(QSPI_BK2_D2_GPIO_PORT, &gpio_init_structure);
 800271a:	a916      	add	r1, sp, #88	; 0x58
 800271c:	4855      	ldr	r0, [pc, #340]	; (8002874 <BSP_QSPI_Init+0x338>)
  gpio_init_structure.Pin       = QSPI_BK2_D2_PIN;
 800271e:	f8cd 9058 	str.w	r9, [sp, #88]	; 0x58
  HAL_GPIO_Init(QSPI_BK2_D2_GPIO_PORT, &gpio_init_structure);
 8002722:	f001 fad7 	bl	8003cd4 <HAL_GPIO_Init>

  /* QSPI D3 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D3_PIN;
  HAL_GPIO_Init(QSPI_BK1_D3_GPIO_PORT, &gpio_init_structure);
 8002726:	a916      	add	r1, sp, #88	; 0x58
 8002728:	4851      	ldr	r0, [pc, #324]	; (8002870 <BSP_QSPI_Init+0x334>)
  gpio_init_structure.Pin       = QSPI_BK1_D3_PIN;
 800272a:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
  HAL_GPIO_Init(QSPI_BK1_D3_GPIO_PORT, &gpio_init_structure);
 800272e:	f001 fad1 	bl	8003cd4 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D3_PIN;
 8002732:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  HAL_GPIO_Init(QSPI_BK2_D3_GPIO_PORT, &gpio_init_structure);
 8002736:	a916      	add	r1, sp, #88	; 0x58
 8002738:	484e      	ldr	r0, [pc, #312]	; (8002874 <BSP_QSPI_Init+0x338>)
  gpio_init_structure.Pin       = QSPI_BK2_D3_PIN;
 800273a:	9316      	str	r3, [sp, #88]	; 0x58
  HAL_GPIO_Init(QSPI_BK2_D3_GPIO_PORT, &gpio_init_structure);
 800273c:	f001 faca 	bl	8003cd4 <HAL_GPIO_Init>

  /*##-3- Configure the NVIC for QSPI #########################################*/
  /* NVIC configuration for QSPI interrupt */
  HAL_NVIC_SetPriority(QUADSPI_IRQn, 0x0F, 0);
 8002740:	4622      	mov	r2, r4
 8002742:	210f      	movs	r1, #15
 8002744:	205c      	movs	r0, #92	; 0x5c
 8002746:	f000 fd71 	bl	800322c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 800274a:	205c      	movs	r0, #92	; 0x5c
 800274c:	f000 fda0 	bl	8003290 <HAL_NVIC_EnableIRQ>
        (void)MT25TL01G_GetFlashInfo(&pInfo);
 8002750:	a811      	add	r0, sp, #68	; 0x44
 8002752:	f7ff fcd6 	bl	8002102 <MT25TL01G_GetFlashInfo>
        qspi_init.ClockPrescaler = PrescalerTab[Init->TransferRate];
 8002756:	786a      	ldrb	r2, [r5, #1]
 8002758:	4b49      	ldr	r3, [pc, #292]	; (8002880 <BSP_QSPI_Init+0x344>)
        qspi_init.DualFlashMode  = QSPI_DUALFLASH_ENABLE;
 800275a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
        qspi_init.ClockPrescaler = PrescalerTab[Init->TransferRate];
 800275e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002762:	930e      	str	r3, [sp, #56]	; 0x38
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002764:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002766:	fa93 f3a3 	rbit	r3, r3
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 800276a:	2a00      	cmp	r2, #0
   */
  if (value == 0U)
  {
    return 32U;
  }
  return __builtin_clz(value);
 800276c:	fab3 f383 	clz	r3, r3
        if(MX_QSPI_Init(&hqspi, &qspi_init) != HAL_OK)
 8002770:	a90d      	add	r1, sp, #52	; 0x34
 8002772:	4844      	ldr	r0, [pc, #272]	; (8002884 <BSP_QSPI_Init+0x348>)
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 8002774:	bf08      	it	eq
 8002776:	2410      	moveq	r4, #16
        qspi_init.FlashSize      = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize) - 1U;
 8002778:	3b01      	subs	r3, #1
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 800277a:	940f      	str	r4, [sp, #60]	; 0x3c
        qspi_init.FlashSize      = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize) - 1U;
 800277c:	930d      	str	r3, [sp, #52]	; 0x34
        if(MX_QSPI_Init(&hqspi, &qspi_init) != HAL_OK)
 800277e:	f7ff fe73 	bl	8002468 <MX_QSPI_Init>
 8002782:	2800      	cmp	r0, #0
 8002784:	f040 808f 	bne.w	80028a6 <BSP_QSPI_Init+0x36a>
static int32_t QSPI_ResetMemory(uint32_t Instance)
{
  int32_t ret = BSP_ERROR_NONE;

  /* Send RESET ENABLE command in QPI mode (QUAD I/Os, 4-4-4) */
  if(MT25TL01G_ResetEnable(&hqspi, MT25TL01G_QPI_MODE) != MT25TL01G_OK)
 8002788:	2103      	movs	r1, #3
 800278a:	483e      	ldr	r0, [pc, #248]	; (8002884 <BSP_QSPI_Init+0x348>)
 800278c:	f7ff fe2a 	bl	80023e4 <MT25TL01G_ResetEnable>
 8002790:	2800      	cmp	r0, #0
 8002792:	d17a      	bne.n	800288a <BSP_QSPI_Init+0x34e>
  {
    ret =BSP_ERROR_COMPONENT_FAILURE;
  }/* Send RESET memory command in QPI mode (QUAD I/Os, 4-4-4) */
  else if(MT25TL01G_ResetMemory(&hqspi, MT25TL01G_QPI_MODE) != MT25TL01G_OK)
 8002794:	2103      	movs	r1, #3
 8002796:	483b      	ldr	r0, [pc, #236]	; (8002884 <BSP_QSPI_Init+0x348>)
 8002798:	f7ff fe45 	bl	8002426 <MT25TL01G_ResetMemory>
 800279c:	2800      	cmp	r0, #0
 800279e:	d174      	bne.n	800288a <BSP_QSPI_Init+0x34e>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }/* Wait Flash ready */
  else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 80027a0:	7871      	ldrb	r1, [r6, #1]
 80027a2:	4838      	ldr	r0, [pc, #224]	; (8002884 <BSP_QSPI_Init+0x348>)
 80027a4:	f7ff fcbe 	bl	8002124 <MT25TL01G_AutoPollingMemReady>
 80027a8:	4601      	mov	r1, r0
 80027aa:	2800      	cmp	r0, #0
 80027ac:	d16d      	bne.n	800288a <BSP_QSPI_Init+0x34e>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }/* Send RESET ENABLE command in SPI mode (1-1-1) */
  else if(MT25TL01G_ResetEnable(&hqspi, BSP_QSPI_SPI_MODE) != MT25TL01G_OK)
 80027ae:	4835      	ldr	r0, [pc, #212]	; (8002884 <BSP_QSPI_Init+0x348>)
 80027b0:	f7ff fe18 	bl	80023e4 <MT25TL01G_ResetEnable>
 80027b4:	4601      	mov	r1, r0
 80027b6:	2800      	cmp	r0, #0
 80027b8:	d167      	bne.n	800288a <BSP_QSPI_Init+0x34e>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }/* Send RESET memory command in SPI mode (1-1-1) */
  else if(MT25TL01G_ResetMemory(&hqspi, BSP_QSPI_SPI_MODE) != MT25TL01G_OK)
 80027ba:	4832      	ldr	r0, [pc, #200]	; (8002884 <BSP_QSPI_Init+0x348>)
 80027bc:	f7ff fe33 	bl	8002426 <MT25TL01G_ResetMemory>
 80027c0:	4601      	mov	r1, r0
 80027c2:	2800      	cmp	r0, #0
 80027c4:	d161      	bne.n	800288a <BSP_QSPI_Init+0x34e>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else
  {
    QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;  /* After reset S/W setting to indirect access   */
 80027c6:	2301      	movs	r3, #1
    QSPI_Ctx[Instance].InterfaceMode = BSP_QSPI_SPI_MODE;     /* After reset H/W back to SPI mode by default  */
    QSPI_Ctx[Instance].TransferRate  = BSP_QSPI_STR_TRANSFER; /* After reset S/W setting to STR mode          */
 80027c8:	70b0      	strb	r0, [r6, #2]
        else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 80027ca:	482e      	ldr	r0, [pc, #184]	; (8002884 <BSP_QSPI_Init+0x348>)
    QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;  /* After reset S/W setting to indirect access   */
 80027cc:	8033      	strh	r3, [r6, #0]
        else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 80027ce:	f7ff fca9 	bl	8002124 <MT25TL01G_AutoPollingMemReady>
 80027d2:	2800      	cmp	r0, #0
 80027d4:	d159      	bne.n	800288a <BSP_QSPI_Init+0x34e>
        else if(MT25TL01G_Enter4BytesAddressMode(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 80027d6:	7871      	ldrb	r1, [r6, #1]
 80027d8:	482a      	ldr	r0, [pc, #168]	; (8002884 <BSP_QSPI_Init+0x348>)
 80027da:	f7ff fd12 	bl	8002202 <MT25TL01G_Enter4BytesAddressMode>
 80027de:	2800      	cmp	r0, #0
 80027e0:	d153      	bne.n	800288a <BSP_QSPI_Init+0x34e>
    int32_t ret= BSP_ERROR_NONE;
    QSPI_CommandTypeDef s_command;
  uint16_t reg=0;

  /* Initialize the read volatile configuration register command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80027e2:	f44f 7340 	mov.w	r3, #768	; 0x300
  uint16_t reg=0;
 80027e6:	f8ad 0002 	strh.w	r0, [sp, #2]
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode          = QSPI_DATA_4_LINES;
  s_command.DummyCycles       = 0;
 80027ea:	901b      	str	r0, [sp, #108]	; 0x6c
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  /* Configure the command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80027ec:	f241 3288 	movw	r2, #5000	; 0x1388
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80027f0:	931c      	str	r3, [sp, #112]	; 0x70
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
 80027f2:	2385      	movs	r3, #133	; 0x85
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80027f4:	a916      	add	r1, sp, #88	; 0x58
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
 80027f6:	9316      	str	r3, [sp, #88]	; 0x58
  s_command.DataMode          = QSPI_DATA_4_LINES;
 80027f8:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80027fc:	931f      	str	r3, [sp, #124]	; 0x7c
  s_command.NbData            = 2;
 80027fe:	2302      	movs	r3, #2
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002800:	e9cd 001d 	strd	r0, r0, [sp, #116]	; 0x74
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8002804:	e9cd 3020 	strd	r3, r0, [sp, #128]	; 0x80
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002808:	e9cd 0022 	strd	r0, r0, [sp, #136]	; 0x88
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800280c:	481d      	ldr	r0, [pc, #116]	; (8002884 <BSP_QSPI_Init+0x348>)
 800280e:	f002 fa4f 	bl	8004cb0 <HAL_QSPI_Command>
 8002812:	2800      	cmp	r0, #0
 8002814:	d139      	bne.n	800288a <BSP_QSPI_Init+0x34e>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(&hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002816:	f241 3288 	movw	r2, #5000	; 0x1388
 800281a:	f10d 0102 	add.w	r1, sp, #2
 800281e:	4819      	ldr	r0, [pc, #100]	; (8002884 <BSP_QSPI_Init+0x348>)
 8002820:	f002 fae2 	bl	8004de8 <HAL_QSPI_Receive>
 8002824:	bb88      	cbnz	r0, 800288a <BSP_QSPI_Init+0x34e>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Enable write operations */
  if (MT25TL01G_WriteEnable(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8002826:	7871      	ldrb	r1, [r6, #1]
 8002828:	4816      	ldr	r0, [pc, #88]	; (8002884 <BSP_QSPI_Init+0x348>)
 800282a:	f7ff fca6 	bl	800217a <MT25TL01G_WriteEnable>
 800282e:	bb60      	cbnz	r0, 800288a <BSP_QSPI_Init+0x34e>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Update volatile configuration register (with new dummy cycles) */
  s_command.Instruction = MT25TL01G_WRITE_VOL_CFG_REG_CMD;
 8002830:	2381      	movs	r3, #129	; 0x81
  MODIFY_REG(reg, 0xF0F0, ((MT25TL01G_DUMMY_CYCLES_READ_QUAD << 4) |
                               (MT25TL01G_DUMMY_CYCLES_READ_QUAD << 12)));

  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002832:	f241 3288 	movw	r2, #5000	; 0x1388
 8002836:	a916      	add	r1, sp, #88	; 0x58
 8002838:	4812      	ldr	r0, [pc, #72]	; (8002884 <BSP_QSPI_Init+0x348>)
  s_command.Instruction = MT25TL01G_WRITE_VOL_CFG_REG_CMD;
 800283a:	9316      	str	r3, [sp, #88]	; 0x58
  MODIFY_REG(reg, 0xF0F0, ((MT25TL01G_DUMMY_CYCLES_READ_QUAD << 4) |
 800283c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8002840:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002844:	051b      	lsls	r3, r3, #20
 8002846:	0d1b      	lsrs	r3, r3, #20
 8002848:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800284c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002850:	f8ad 3002 	strh.w	r3, [sp, #2]
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002854:	f002 fa2c 	bl	8004cb0 <HAL_QSPI_Command>
 8002858:	b9b8      	cbnz	r0, 800288a <BSP_QSPI_Init+0x34e>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(&hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800285a:	f241 3288 	movw	r2, #5000	; 0x1388
 800285e:	f10d 0102 	add.w	r1, sp, #2
 8002862:	4808      	ldr	r0, [pc, #32]	; (8002884 <BSP_QSPI_Init+0x348>)
 8002864:	f002 fa67 	bl	8004d36 <HAL_QSPI_Transmit>
 8002868:	e00e      	b.n	8002888 <BSP_QSPI_Init+0x34c>
 800286a:	bf00      	nop
 800286c:	58024400 	.word	0x58024400
 8002870:	58021400 	.word	0x58021400
 8002874:	58021800 	.word	0x58021800
 8002878:	58020c00 	.word	0x58020c00
 800287c:	58021c00 	.word	0x58021c00
 8002880:	08016880 	.word	0x08016880
 8002884:	24001828 	.word	0x24001828
 8002888:	b110      	cbz	r0, 8002890 <BSP_QSPI_Init+0x354>
            ret = BSP_ERROR_COMPONENT_FAILURE;
 800288a:	f06f 0004 	mvn.w	r0, #4
 800288e:	e661      	b.n	8002554 <BSP_QSPI_Init+0x18>
          if(BSP_QSPI_ConfigFlash(Instance, Init->InterfaceMode, Init->TransferRate) != BSP_ERROR_NONE)
 8002890:	786a      	ldrb	r2, [r5, #1]
 8002892:	7829      	ldrb	r1, [r5, #0]
 8002894:	f7ff fe1a 	bl	80024cc <BSP_QSPI_ConfigFlash>
 8002898:	2800      	cmp	r0, #0
 800289a:	f43f ae5a 	beq.w	8002552 <BSP_QSPI_Init+0x16>
 800289e:	e7f4      	b.n	800288a <BSP_QSPI_Init+0x34e>
    ret = BSP_ERROR_WRONG_PARAM;
 80028a0:	f06f 0001 	mvn.w	r0, #1
 80028a4:	e656      	b.n	8002554 <BSP_QSPI_Init+0x18>
          ret = BSP_ERROR_PERIPH_FAILURE;
 80028a6:	f06f 0003 	mvn.w	r0, #3
  return ret;
 80028aa:	e653      	b.n	8002554 <BSP_QSPI_Init+0x18>

080028ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028ac:	b538      	push	{r3, r4, r5, lr}
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80028ae:	4b0f      	ldr	r3, [pc, #60]	; (80028ec <HAL_InitTick+0x40>)
{
 80028b0:	4605      	mov	r5, r0
  if((uint32_t)uwTickFreq == 0UL)
 80028b2:	7818      	ldrb	r0, [r3, #0]
 80028b4:	b908      	cbnz	r0, 80028ba <HAL_InitTick+0xe>
  {
    return HAL_ERROR;
 80028b6:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80028b8:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80028ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028be:	4a0c      	ldr	r2, [pc, #48]	; (80028f0 <HAL_InitTick+0x44>)
 80028c0:	fbb3 f3f0 	udiv	r3, r3, r0
 80028c4:	6810      	ldr	r0, [r2, #0]
 80028c6:	fbb0 f0f3 	udiv	r0, r0, r3
 80028ca:	f000 fcef 	bl	80032ac <HAL_SYSTICK_Config>
 80028ce:	4604      	mov	r4, r0
 80028d0:	2800      	cmp	r0, #0
 80028d2:	d1f0      	bne.n	80028b6 <HAL_InitTick+0xa>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028d4:	2d0f      	cmp	r5, #15
 80028d6:	d8ee      	bhi.n	80028b6 <HAL_InitTick+0xa>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028d8:	4602      	mov	r2, r0
 80028da:	4629      	mov	r1, r5
 80028dc:	f04f 30ff 	mov.w	r0, #4294967295
 80028e0:	f000 fca4 	bl	800322c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80028e4:	4b03      	ldr	r3, [pc, #12]	; (80028f4 <HAL_InitTick+0x48>)
 80028e6:	4620      	mov	r0, r4
 80028e8:	601d      	str	r5, [r3, #0]
  return HAL_OK;
 80028ea:	e7e5      	b.n	80028b8 <HAL_InitTick+0xc>
 80028ec:	24000008 	.word	0x24000008
 80028f0:	24000000 	.word	0x24000000
 80028f4:	2400000c 	.word	0x2400000c

080028f8 <HAL_Init>:
{
 80028f8:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028fa:	2003      	movs	r0, #3
 80028fc:	f000 fc84 	bl	8003208 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002900:	f002 fe16 	bl	8005530 <HAL_RCC_GetSysClockFreq>
 8002904:	490f      	ldr	r1, [pc, #60]	; (8002944 <HAL_Init+0x4c>)
 8002906:	4a10      	ldr	r2, [pc, #64]	; (8002948 <HAL_Init+0x50>)
 8002908:	698b      	ldr	r3, [r1, #24]
 800290a:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800290e:	5cd3      	ldrb	r3, [r2, r3]
 8002910:	f003 031f 	and.w	r3, r3, #31
 8002914:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002916:	698b      	ldr	r3, [r1, #24]
 8002918:	f003 030f 	and.w	r3, r3, #15
 800291c:	5cd3      	ldrb	r3, [r2, r3]
 800291e:	4a0b      	ldr	r2, [pc, #44]	; (800294c <HAL_Init+0x54>)
 8002920:	f003 031f 	and.w	r3, r3, #31
 8002924:	fa20 f303 	lsr.w	r3, r0, r3
 8002928:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 800292a:	4b09      	ldr	r3, [pc, #36]	; (8002950 <HAL_Init+0x58>)
 800292c:	6018      	str	r0, [r3, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800292e:	2000      	movs	r0, #0
 8002930:	f7ff ffbc 	bl	80028ac <HAL_InitTick>
 8002934:	4604      	mov	r4, r0
 8002936:	b918      	cbnz	r0, 8002940 <HAL_Init+0x48>
  HAL_MspInit();
 8002938:	f7fe fcd6 	bl	80012e8 <HAL_MspInit>
}
 800293c:	4620      	mov	r0, r4
 800293e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002940:	2401      	movs	r4, #1
 8002942:	e7fb      	b.n	800293c <HAL_Init+0x44>
 8002944:	58024400 	.word	0x58024400
 8002948:	08016870 	.word	0x08016870
 800294c:	24000004 	.word	0x24000004
 8002950:	24000000 	.word	0x24000000

08002954 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8002954:	4a03      	ldr	r2, [pc, #12]	; (8002964 <HAL_IncTick+0x10>)
 8002956:	4b04      	ldr	r3, [pc, #16]	; (8002968 <HAL_IncTick+0x14>)
 8002958:	6811      	ldr	r1, [r2, #0]
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	440b      	add	r3, r1
 800295e:	6013      	str	r3, [r2, #0]
}
 8002960:	4770      	bx	lr
 8002962:	bf00      	nop
 8002964:	24001874 	.word	0x24001874
 8002968:	24000008 	.word	0x24000008

0800296c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800296c:	4b01      	ldr	r3, [pc, #4]	; (8002974 <HAL_GetTick+0x8>)
 800296e:	6818      	ldr	r0, [r3, #0]
}
 8002970:	4770      	bx	lr
 8002972:	bf00      	nop
 8002974:	24001874 	.word	0x24001874

08002978 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002978:	b538      	push	{r3, r4, r5, lr}
 800297a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800297c:	f7ff fff6 	bl	800296c <HAL_GetTick>
 8002980:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002982:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8002984:	bf1e      	ittt	ne
 8002986:	4b04      	ldrne	r3, [pc, #16]	; (8002998 <HAL_Delay+0x20>)
 8002988:	781b      	ldrbne	r3, [r3, #0]
 800298a:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800298c:	f7ff ffee 	bl	800296c <HAL_GetTick>
 8002990:	1b43      	subs	r3, r0, r5
 8002992:	42a3      	cmp	r3, r4
 8002994:	d3fa      	bcc.n	800298c <HAL_Delay+0x14>
  {
  }
}
 8002996:	bd38      	pop	{r3, r4, r5, pc}
 8002998:	24000008 	.word	0x24000008

0800299c <HAL_GetHalVersion>:
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 return __STM32H7xx_HAL_VERSION;
}
 800299c:	4800      	ldr	r0, [pc, #0]	; (80029a0 <HAL_GetHalVersion+0x4>)
 800299e:	4770      	bx	lr
 80029a0:	010b0100 	.word	0x010b0100

080029a4 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 80029a4:	4b01      	ldr	r3, [pc, #4]	; (80029ac <HAL_GetREVID+0x8>)
 80029a6:	6818      	ldr	r0, [r3, #0]
}
 80029a8:	0c00      	lsrs	r0, r0, #16
 80029aa:	4770      	bx	lr
 80029ac:	5c001000 	.word	0x5c001000

080029b0 <HAL_GetDEVID>:
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 80029b0:	4b02      	ldr	r3, [pc, #8]	; (80029bc <HAL_GetDEVID+0xc>)
 80029b2:	6818      	ldr	r0, [r3, #0]
}
 80029b4:	f3c0 000b 	ubfx	r0, r0, #0, #12
 80029b8:	4770      	bx	lr
 80029ba:	bf00      	nop
 80029bc:	5c001000 	.word	0x5c001000

080029c0 <HAL_SYSCFG_ETHInterfaceSelect>:
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80029c0:	4a03      	ldr	r2, [pc, #12]	; (80029d0 <HAL_SYSCFG_ETHInterfaceSelect+0x10>)
 80029c2:	6853      	ldr	r3, [r2, #4]
 80029c4:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 80029c8:	4318      	orrs	r0, r3
 80029ca:	6050      	str	r0, [r2, #4]
}
 80029cc:	4770      	bx	lr
 80029ce:	bf00      	nop
 80029d0:	58000400 	.word	0x58000400

080029d4 <HAL_SYSCFG_AnalogSwitchConfig>:
{
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 80029d4:	4a03      	ldr	r2, [pc, #12]	; (80029e4 <HAL_SYSCFG_AnalogSwitchConfig+0x10>)
 80029d6:	6853      	ldr	r3, [r2, #4]
 80029d8:	ea23 0000 	bic.w	r0, r3, r0
 80029dc:	4301      	orrs	r1, r0
 80029de:	6051      	str	r1, [r2, #4]
}
 80029e0:	4770      	bx	lr
 80029e2:	bf00      	nop
 80029e4:	58000400 	.word	0x58000400

080029e8 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80029e8:	b530      	push	{r4, r5, lr}
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80029ea:	0dcc      	lsrs	r4, r1, #23
 80029ec:	3014      	adds	r0, #20

  MODIFY_REG(*preg,
 80029ee:	f3c1 5104 	ubfx	r1, r1, #20, #5
 80029f2:	2507      	movs	r5, #7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80029f4:	f004 0404 	and.w	r4, r4, #4
  MODIFY_REG(*preg,
 80029f8:	408d      	lsls	r5, r1
 80029fa:	fa02 f101 	lsl.w	r1, r2, r1
 80029fe:	5823      	ldr	r3, [r4, r0]
 8002a00:	ea23 0305 	bic.w	r3, r3, r5
 8002a04:	430b      	orrs	r3, r1
 8002a06:	5023      	str	r3, [r4, r0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002a08:	bd30      	pop	{r4, r5, pc}

08002a0a <LL_ADC_REG_IsConversionOngoing>:
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002a0a:	6880      	ldr	r0, [r0, #8]
}
 8002a0c:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8002a10:	4770      	bx	lr
	...

08002a14 <HAL_ADC_ConfigChannel>:
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002a14:	2300      	movs	r3, #0
{
 8002a16:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t wait_loop_index = 0;
 8002a18:	9301      	str	r3, [sp, #4]
{
 8002a1a:	4604      	mov	r4, r0
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a1c:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8002a20:	460d      	mov	r5, r1
  __HAL_LOCK(hadc);
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	f000 81c5 	beq.w	8002db2 <HAL_ADC_ConfigChannel+0x39e>
 8002a28:	2301      	movs	r3, #1
 8002a2a:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a2e:	6800      	ldr	r0, [r0, #0]
 8002a30:	f7ff ffeb 	bl	8002a0a <LL_ADC_REG_IsConversionOngoing>
 8002a34:	2800      	cmp	r0, #0
 8002a36:	f040 81b7 	bne.w	8002da8 <HAL_ADC_ConfigChannel+0x394>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002a3a:	680a      	ldr	r2, [r1, #0]
 8002a3c:	f3c2 0013 	ubfx	r0, r2, #0, #20
 8002a40:	f3c2 6184 	ubfx	r1, r2, #26, #5
 8002a44:	2800      	cmp	r0, #0
 8002a46:	d16c      	bne.n	8002b22 <HAL_ADC_ConfigChannel+0x10e>
 8002a48:	408b      	lsls	r3, r1
 8002a4a:	6820      	ldr	r0, [r4, #0]
  MODIFY_REG(*preg,
 8002a4c:	271f      	movs	r7, #31
 8002a4e:	69c2      	ldr	r2, [r0, #28]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002a50:	f100 0c30 	add.w	ip, r0, #48	; 0x30
 8002a54:	4313      	orrs	r3, r2
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002a56:	686a      	ldr	r2, [r5, #4]
 8002a58:	0996      	lsrs	r6, r2, #6
  MODIFY_REG(*preg,
 8002a5a:	f002 021f 	and.w	r2, r2, #31
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002a5e:	61c3      	str	r3, [r0, #28]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002a60:	f006 060c 	and.w	r6, r6, #12
  MODIFY_REG(*preg,
 8002a64:	4097      	lsls	r7, r2
 8002a66:	fa01 f202 	lsl.w	r2, r1, r2
 8002a6a:	f856 300c 	ldr.w	r3, [r6, ip]
 8002a6e:	ea23 0307 	bic.w	r3, r3, r7
 8002a72:	4313      	orrs	r3, r2
 8002a74:	f846 300c 	str.w	r3, [r6, ip]
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002a78:	f7ff ffc7 	bl	8002a0a <LL_ADC_REG_IsConversionOngoing>
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002a7c:	6827      	ldr	r7, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	f003 0308 	and.w	r3, r3, #8
 8002a84:	ea53 0600 	orrs.w	r6, r3, r0
 8002a88:	d141      	bne.n	8002b0e <HAL_ADC_ConfigChannel+0xfa>
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002a8a:	68aa      	ldr	r2, [r5, #8]
 8002a8c:	4638      	mov	r0, r7
 8002a8e:	6829      	ldr	r1, [r5, #0]
 8002a90:	f7ff ffaa 	bl	80029e8 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002a94:	4bb7      	ldr	r3, [pc, #732]	; (8002d74 <HAL_ADC_ConfigChannel+0x360>)
 8002a96:	696a      	ldr	r2, [r5, #20]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002a9e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002aa2:	6823      	ldr	r3, [r4, #0]
 8002aa4:	68d9      	ldr	r1, [r3, #12]
 8002aa6:	d145      	bne.n	8002b34 <HAL_ADC_ConfigChannel+0x120>
 8002aa8:	f3c1 0182 	ubfx	r1, r1, #2, #3
 8002aac:	0049      	lsls	r1, r1, #1
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002aae:	f8d5 c010 	ldr.w	ip, [r5, #16]
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002ab2:	fa02 f101 	lsl.w	r1, r2, r1
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002ab6:	6828      	ldr	r0, [r5, #0]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002ab8:	f1bc 0f04 	cmp.w	ip, #4
 8002abc:	d042      	beq.n	8002b44 <HAL_ADC_ConfigChannel+0x130>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002abe:	f103 0760 	add.w	r7, r3, #96	; 0x60
    MODIFY_REG(*preg,
 8002ac2:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8002ac6:	f857 202c 	ldr.w	r2, [r7, ip, lsl #2]
 8002aca:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002ace:	4302      	orrs	r2, r0
 8002ad0:	430a      	orrs	r2, r1
 8002ad2:	f847 202c 	str.w	r2, [r7, ip, lsl #2]
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002ad6:	6929      	ldr	r1, [r5, #16]
 8002ad8:	7e6a      	ldrb	r2, [r5, #25]
 8002ada:	2a01      	cmp	r2, #1
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002adc:	f857 2021 	ldr.w	r2, [r7, r1, lsl #2]
 8002ae0:	bf0c      	ite	eq
 8002ae2:	f04f 4000 	moveq.w	r0, #2147483648	; 0x80000000
 8002ae6:	2000      	movne	r0, #0
 8002ae8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002aec:	4302      	orrs	r2, r0
 8002aee:	f847 2021 	str.w	r2, [r7, r1, lsl #2]

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002af2:	7e29      	ldrb	r1, [r5, #24]
 8002af4:	692a      	ldr	r2, [r5, #16]
 8002af6:	2901      	cmp	r1, #1
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002af8:	6918      	ldr	r0, [r3, #16]
 8002afa:	f002 021f 	and.w	r2, r2, #31
 8002afe:	bf08      	it	eq
 8002b00:	f44f 6600 	moveq.w	r6, #2048	; 0x800
 8002b04:	f420 40f0 	bic.w	r0, r0, #30720	; 0x7800
 8002b08:	4096      	lsls	r6, r2
 8002b0a:	4306      	orrs	r6, r0
 8002b0c:	611e      	str	r6, [r3, #16]

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b0e:	6820      	ldr	r0, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002b10:	6883      	ldr	r3, [r0, #8]
 8002b12:	07da      	lsls	r2, r3, #31
 8002b14:	d53d      	bpl.n	8002b92 <HAL_ADC_ConfigChannel+0x17e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b16:	2000      	movs	r0, #0

    tmp_hal_status = HAL_ERROR;
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b18:	2300      	movs	r3, #0
 8002b1a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
}
 8002b1e:	b003      	add	sp, #12
 8002b20:	bdf0      	pop	{r4, r5, r6, r7, pc}
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b22:	fa92 f3a2 	rbit	r3, r2
  return __builtin_clz(value);
 8002b26:	fab3 f383 	clz	r3, r3
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002b2a:	f003 001f 	and.w	r0, r3, #31
 8002b2e:	2301      	movs	r3, #1
 8002b30:	4083      	lsls	r3, r0
 8002b32:	e78a      	b.n	8002a4a <HAL_ADC_ConfigChannel+0x36>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002b34:	f011 0f10 	tst.w	r1, #16
 8002b38:	68d9      	ldr	r1, [r3, #12]
 8002b3a:	d0b5      	beq.n	8002aa8 <HAL_ADC_ConfigChannel+0x94>
 8002b3c:	0849      	lsrs	r1, r1, #1
 8002b3e:	f001 0108 	and.w	r1, r1, #8
 8002b42:	e7b4      	b.n	8002aae <HAL_ADC_ConfigChannel+0x9a>
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002b44:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002b46:	0681      	lsls	r1, r0, #26
 8002b48:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8002b4c:	ebb2 6f80 	cmp.w	r2, r0, lsl #26
 8002b50:	d103      	bne.n	8002b5a <HAL_ADC_ConfigChannel+0x146>
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002b52:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002b54:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002b58:	661a      	str	r2, [r3, #96]	; 0x60
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002b5a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002b5c:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8002b60:	4291      	cmp	r1, r2
 8002b62:	d103      	bne.n	8002b6c <HAL_ADC_ConfigChannel+0x158>
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002b64:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002b66:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002b6a:	665a      	str	r2, [r3, #100]	; 0x64
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002b6c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002b6e:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8002b72:	4291      	cmp	r1, r2
 8002b74:	d103      	bne.n	8002b7e <HAL_ADC_ConfigChannel+0x16a>
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002b76:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002b78:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002b7c:	669a      	str	r2, [r3, #104]	; 0x68
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002b7e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002b80:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8002b84:	4291      	cmp	r1, r2
 8002b86:	d1c2      	bne.n	8002b0e <HAL_ADC_ConfigChannel+0xfa>
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002b88:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002b8a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002b8e:	66da      	str	r2, [r3, #108]	; 0x6c
 8002b90:	e7bd      	b.n	8002b0e <HAL_ADC_ConfigChannel+0xfa>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002b92:	68ef      	ldr	r7, [r5, #12]
 8002b94:	682b      	ldr	r3, [r5, #0]
  MODIFY_REG(ADCx->DIFSEL,
 8002b96:	f007 0c18 	and.w	ip, r7, #24
 8002b9a:	4a77      	ldr	r2, [pc, #476]	; (8002d78 <HAL_ADC_ConfigChannel+0x364>)
 8002b9c:	f8d0 10c0 	ldr.w	r1, [r0, #192]	; 0xc0
 8002ba0:	f3c3 0613 	ubfx	r6, r3, #0, #20
 8002ba4:	fa22 f20c 	lsr.w	r2, r2, ip
 8002ba8:	ea21 0106 	bic.w	r1, r1, r6
 8002bac:	401a      	ands	r2, r3
 8002bae:	430a      	orrs	r2, r1
 8002bb0:	f8c0 20c0 	str.w	r2, [r0, #192]	; 0xc0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002bb4:	4a71      	ldr	r2, [pc, #452]	; (8002d7c <HAL_ADC_ConfigChannel+0x368>)
 8002bb6:	4297      	cmp	r7, r2
 8002bb8:	d146      	bne.n	8002c48 <HAL_ADC_ConfigChannel+0x234>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002bba:	b9de      	cbnz	r6, 8002bf4 <HAL_ADC_ConfigChannel+0x1e0>
 8002bbc:	0e9a      	lsrs	r2, r3, #26
 8002bbe:	2101      	movs	r1, #1
 8002bc0:	3201      	adds	r2, #1
 8002bc2:	f002 071f 	and.w	r7, r2, #31
 8002bc6:	0692      	lsls	r2, r2, #26
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002bc8:	2f09      	cmp	r7, #9
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002bca:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8002bce:	fa01 f107 	lsl.w	r1, r1, r7
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002bd2:	d92a      	bls.n	8002c2a <HAL_ADC_ConfigChannel+0x216>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002bd4:	430a      	orrs	r2, r1
 8002bd6:	2e00      	cmp	r6, #0
 8002bd8:	f040 808d 	bne.w	8002cf6 <HAL_ADC_ConfigChannel+0x2e2>
 8002bdc:	0e9e      	lsrs	r6, r3, #26
 8002bde:	3601      	adds	r6, #1
 8002be0:	f006 061f 	and.w	r6, r6, #31
 8002be4:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 8002be8:	391e      	subs	r1, #30
 8002bea:	0509      	lsls	r1, r1, #20
 8002bec:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002bf0:	4311      	orrs	r1, r2
 8002bf2:	e026      	b.n	8002c42 <HAL_ADC_ConfigChannel+0x22e>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bf4:	fa93 f2a3 	rbit	r2, r3
  if (value == 0U)
 8002bf8:	b132      	cbz	r2, 8002c08 <HAL_ADC_ConfigChannel+0x1f4>
  return __builtin_clz(value);
 8002bfa:	fab2 f282 	clz	r2, r2
 8002bfe:	3201      	adds	r2, #1
 8002c00:	f002 021f 	and.w	r2, r2, #31
 8002c04:	2a09      	cmp	r2, #9
 8002c06:	d864      	bhi.n	8002cd2 <HAL_ADC_ConfigChannel+0x2be>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c08:	fa93 f2a3 	rbit	r2, r3
  return __builtin_clz(value);
 8002c0c:	fab2 f282 	clz	r2, r2
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002c10:	3201      	adds	r2, #1
 8002c12:	0692      	lsls	r2, r2, #26
 8002c14:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c18:	fa93 f1a3 	rbit	r1, r3
  return __builtin_clz(value);
 8002c1c:	fab1 f181 	clz	r1, r1
 8002c20:	3101      	adds	r1, #1
 8002c22:	f001 071f 	and.w	r7, r1, #31
 8002c26:	2101      	movs	r1, #1
 8002c28:	40b9      	lsls	r1, r7
 8002c2a:	430a      	orrs	r2, r1
 8002c2c:	2e00      	cmp	r6, #0
 8002c2e:	d14b      	bne.n	8002cc8 <HAL_ADC_ConfigChannel+0x2b4>
 8002c30:	0e9b      	lsrs	r3, r3, #26
 8002c32:	3301      	adds	r3, #1
 8002c34:	f003 031f 	and.w	r3, r3, #31
 8002c38:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8002c3c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c3e:	ea42 0103 	orr.w	r1, r2, r3
 8002c42:	68aa      	ldr	r2, [r5, #8]
 8002c44:	f7ff fed0 	bl	80029e8 <LL_ADC_SetChannelSamplingTime>
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002c48:	6828      	ldr	r0, [r5, #0]
 8002c4a:	2800      	cmp	r0, #0
 8002c4c:	f6bf af63 	bge.w	8002b16 <HAL_ADC_ConfigChannel+0x102>
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c50:	6821      	ldr	r1, [r4, #0]
 8002c52:	4a4b      	ldr	r2, [pc, #300]	; (8002d80 <HAL_ADC_ConfigChannel+0x36c>)
 8002c54:	4b4b      	ldr	r3, [pc, #300]	; (8002d84 <HAL_ADC_ConfigChannel+0x370>)
 8002c56:	4291      	cmp	r1, r2
 8002c58:	4d4b      	ldr	r5, [pc, #300]	; (8002d88 <HAL_ADC_ConfigChannel+0x374>)
 8002c5a:	d003      	beq.n	8002c64 <HAL_ADC_ConfigChannel+0x250>
 8002c5c:	4e4b      	ldr	r6, [pc, #300]	; (8002d8c <HAL_ADC_ConfigChannel+0x378>)
 8002c5e:	42a9      	cmp	r1, r5
 8002c60:	bf18      	it	ne
 8002c62:	4633      	movne	r3, r6
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c64:	4291      	cmp	r1, r2
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	d001      	beq.n	8002c6e <HAL_ADC_ConfigChannel+0x25a>
 8002c6a:	42a9      	cmp	r1, r5
 8002c6c:	d150      	bne.n	8002d10 <HAL_ADC_ConfigChannel+0x2fc>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002c6e:	4a44      	ldr	r2, [pc, #272]	; (8002d80 <HAL_ADC_ConfigChannel+0x36c>)
 8002c70:	6896      	ldr	r6, [r2, #8]
 8002c72:	68aa      	ldr	r2, [r5, #8]
 8002c74:	4332      	orrs	r2, r6
 8002c76:	43d2      	mvns	r2, r2
 8002c78:	f002 0201 	and.w	r2, r2, #1
 8002c7c:	2a00      	cmp	r2, #0
 8002c7e:	d073      	beq.n	8002d68 <HAL_ADC_ConfigChannel+0x354>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002c80:	4a43      	ldr	r2, [pc, #268]	; (8002d90 <HAL_ADC_ConfigChannel+0x37c>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002c82:	f003 75e0 	and.w	r5, r3, #29360128	; 0x1c00000
 8002c86:	4290      	cmp	r0, r2
 8002c88:	d145      	bne.n	8002d16 <HAL_ADC_ConfigChannel+0x302>
 8002c8a:	021b      	lsls	r3, r3, #8
 8002c8c:	f53f af43 	bmi.w	8002b16 <HAL_ADC_ConfigChannel+0x102>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002c90:	4b40      	ldr	r3, [pc, #256]	; (8002d94 <HAL_ADC_ConfigChannel+0x380>)
 8002c92:	4299      	cmp	r1, r3
 8002c94:	f47f af3f 	bne.w	8002b16 <HAL_ADC_ConfigChannel+0x102>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002c98:	f8d3 2308 	ldr.w	r2, [r3, #776]	; 0x308
 8002c9c:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8002ca0:	432a      	orrs	r2, r5
 8002ca2:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002ca6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002caa:	4b3b      	ldr	r3, [pc, #236]	; (8002d98 <HAL_ADC_ConfigChannel+0x384>)
 8002cac:	4a3b      	ldr	r2, [pc, #236]	; (8002d9c <HAL_ADC_ConfigChannel+0x388>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	fbb3 f3f2 	udiv	r3, r3, r2
 8002cb4:	3301      	adds	r3, #1
 8002cb6:	005b      	lsls	r3, r3, #1
                wait_loop_index--;
 8002cb8:	9301      	str	r3, [sp, #4]
              while (wait_loop_index != 0UL)
 8002cba:	9b01      	ldr	r3, [sp, #4]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	f43f af2a 	beq.w	8002b16 <HAL_ADC_ConfigChannel+0x102>
                wait_loop_index--;
 8002cc2:	9b01      	ldr	r3, [sp, #4]
 8002cc4:	3b01      	subs	r3, #1
 8002cc6:	e7f7      	b.n	8002cb8 <HAL_ADC_ConfigChannel+0x2a4>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc8:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 8002ccc:	fab3 f383 	clz	r3, r3
 8002cd0:	e7af      	b.n	8002c32 <HAL_ADC_ConfigChannel+0x21e>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cd2:	fa93 f2a3 	rbit	r2, r3
  return __builtin_clz(value);
 8002cd6:	fab2 f282 	clz	r2, r2
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002cda:	3201      	adds	r2, #1
 8002cdc:	0692      	lsls	r2, r2, #26
 8002cde:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce2:	fa93 f1a3 	rbit	r1, r3
  return __builtin_clz(value);
 8002ce6:	fab1 f181 	clz	r1, r1
 8002cea:	3101      	adds	r1, #1
 8002cec:	f001 071f 	and.w	r7, r1, #31
 8002cf0:	2101      	movs	r1, #1
 8002cf2:	40b9      	lsls	r1, r7
 8002cf4:	e76e      	b.n	8002bd4 <HAL_ADC_ConfigChannel+0x1c0>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf6:	fa93 f1a3 	rbit	r1, r3
  return __builtin_clz(value);
 8002cfa:	fab1 f181 	clz	r1, r1
 8002cfe:	f06f 061d 	mvn.w	r6, #29
 8002d02:	3101      	adds	r1, #1
 8002d04:	f001 031f 	and.w	r3, r1, #31
 8002d08:	2103      	movs	r1, #3
 8002d0a:	fb11 6103 	smlabb	r1, r1, r3, r6
 8002d0e:	e76c      	b.n	8002bea <HAL_ADC_ConfigChannel+0x1d6>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002d10:	4a20      	ldr	r2, [pc, #128]	; (8002d94 <HAL_ADC_ConfigChannel+0x380>)
 8002d12:	6892      	ldr	r2, [r2, #8]
 8002d14:	e7af      	b.n	8002c76 <HAL_ADC_ConfigChannel+0x262>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002d16:	4a22      	ldr	r2, [pc, #136]	; (8002da0 <HAL_ADC_ConfigChannel+0x38c>)
 8002d18:	4290      	cmp	r0, r2
 8002d1a:	d111      	bne.n	8002d40 <HAL_ADC_ConfigChannel+0x32c>
 8002d1c:	f013 7380 	ands.w	r3, r3, #16777216	; 0x1000000
 8002d20:	f47f aef9 	bne.w	8002b16 <HAL_ADC_ConfigChannel+0x102>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d24:	4a1b      	ldr	r2, [pc, #108]	; (8002d94 <HAL_ADC_ConfigChannel+0x380>)
 8002d26:	4291      	cmp	r1, r2
 8002d28:	f47f aef5 	bne.w	8002b16 <HAL_ADC_ConfigChannel+0x102>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002d2c:	4917      	ldr	r1, [pc, #92]	; (8002d8c <HAL_ADC_ConfigChannel+0x378>)
 8002d2e:	688a      	ldr	r2, [r1, #8]
 8002d30:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8002d34:	432a      	orrs	r2, r5
 8002d36:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8002d3a:	608a      	str	r2, [r1, #8]
    tmp_hal_status = HAL_ERROR;
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	e6eb      	b.n	8002b18 <HAL_ADC_ConfigChannel+0x104>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002d40:	4a18      	ldr	r2, [pc, #96]	; (8002da4 <HAL_ADC_ConfigChannel+0x390>)
 8002d42:	4290      	cmp	r0, r2
 8002d44:	f47f aee7 	bne.w	8002b16 <HAL_ADC_ConfigChannel+0x102>
 8002d48:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
 8002d4c:	f47f aee3 	bne.w	8002b16 <HAL_ADC_ConfigChannel+0x102>
            if (ADC_VREFINT_INSTANCE(hadc))
 8002d50:	4a10      	ldr	r2, [pc, #64]	; (8002d94 <HAL_ADC_ConfigChannel+0x380>)
 8002d52:	4291      	cmp	r1, r2
 8002d54:	f47f aedf 	bne.w	8002b16 <HAL_ADC_ConfigChannel+0x102>
 8002d58:	490c      	ldr	r1, [pc, #48]	; (8002d8c <HAL_ADC_ConfigChannel+0x378>)
 8002d5a:	688a      	ldr	r2, [r1, #8]
 8002d5c:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8002d60:	432a      	orrs	r2, r5
 8002d62:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8002d66:	e7e8      	b.n	8002d3a <HAL_ADC_ConfigChannel+0x326>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d68:	6d63      	ldr	r3, [r4, #84]	; 0x54
          tmp_hal_status = HAL_ERROR;
 8002d6a:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d6c:	f043 0320 	orr.w	r3, r3, #32
 8002d70:	6563      	str	r3, [r4, #84]	; 0x54
          tmp_hal_status = HAL_ERROR;
 8002d72:	e6d1      	b.n	8002b18 <HAL_ADC_ConfigChannel+0x104>
 8002d74:	5c001000 	.word	0x5c001000
 8002d78:	000fffff 	.word	0x000fffff
 8002d7c:	47ff0000 	.word	0x47ff0000
 8002d80:	40022000 	.word	0x40022000
 8002d84:	40022300 	.word	0x40022300
 8002d88:	40022100 	.word	0x40022100
 8002d8c:	58026300 	.word	0x58026300
 8002d90:	cb840000 	.word	0xcb840000
 8002d94:	58026000 	.word	0x58026000
 8002d98:	24000000 	.word	0x24000000
 8002d9c:	00030d40 	.word	0x00030d40
 8002da0:	c7520000 	.word	0xc7520000
 8002da4:	cfb80000 	.word	0xcfb80000
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002da8:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002daa:	f042 0220 	orr.w	r2, r2, #32
 8002dae:	6562      	str	r2, [r4, #84]	; 0x54
 8002db0:	e7c4      	b.n	8002d3c <HAL_ADC_ConfigChannel+0x328>
  __HAL_LOCK(hadc);
 8002db2:	2002      	movs	r0, #2
 8002db4:	e6b3      	b.n	8002b1e <HAL_ADC_ConfigChannel+0x10a>
 8002db6:	bf00      	nop

08002db8 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002db8:	b538      	push	{r3, r4, r5, lr}
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002dba:	4a43      	ldr	r2, [pc, #268]	; (8002ec8 <ADC_ConfigureBoostMode+0x110>)
{
 8002dbc:	4605      	mov	r5, r0
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002dbe:	6803      	ldr	r3, [r0, #0]
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d003      	beq.n	8002dcc <ADC_ConfigureBoostMode+0x14>
 8002dc4:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d125      	bne.n	8002e18 <ADC_ConfigureBoostMode+0x60>
 8002dcc:	4b3f      	ldr	r3, [pc, #252]	; (8002ecc <ADC_ConfigureBoostMode+0x114>)
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 8002dd4:	bf14      	ite	ne
 8002dd6:	2301      	movne	r3, #1
 8002dd8:	2300      	moveq	r3, #0
 8002dda:	b9fb      	cbnz	r3, 8002e1c <ADC_ConfigureBoostMode+0x64>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002ddc:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002de0:	2100      	movs	r1, #0
 8002de2:	f003 fdbf 	bl	8006964 <HAL_RCCEx_GetPeriphCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 8002de6:	686b      	ldr	r3, [r5, #4]
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002de8:	4604      	mov	r4, r0
    switch (hadc->Init.ClockPrescaler)
 8002dea:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002dee:	d04a      	beq.n	8002e86 <ADC_ConfigureBoostMode+0xce>
 8002df0:	d83f      	bhi.n	8002e72 <ADC_ConfigureBoostMode+0xba>
 8002df2:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002df6:	d044      	beq.n	8002e82 <ADC_ConfigureBoostMode+0xca>
 8002df8:	d836      	bhi.n	8002e68 <ADC_ConfigureBoostMode+0xb0>
 8002dfa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002dfe:	d008      	beq.n	8002e12 <ADC_ConfigureBoostMode+0x5a>
 8002e00:	d82c      	bhi.n	8002e5c <ADC_ConfigureBoostMode+0xa4>
 8002e02:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002e06:	d004      	beq.n	8002e12 <ADC_ConfigureBoostMode+0x5a>
 8002e08:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8002e0c:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 8002e10:	d116      	bne.n	8002e40 <ADC_ConfigureBoostMode+0x88>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002e12:	0c9b      	lsrs	r3, r3, #18
 8002e14:	005b      	lsls	r3, r3, #1
 8002e16:	e00f      	b.n	8002e38 <ADC_ConfigureBoostMode+0x80>
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002e18:	4b2d      	ldr	r3, [pc, #180]	; (8002ed0 <ADC_ConfigureBoostMode+0x118>)
 8002e1a:	e7d8      	b.n	8002dce <ADC_ConfigureBoostMode+0x16>
    freq = HAL_RCC_GetHCLKFreq();
 8002e1c:	f002 fd4e 	bl	80058bc <HAL_RCC_GetHCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 8002e20:	686b      	ldr	r3, [r5, #4]
    freq = HAL_RCC_GetHCLKFreq();
 8002e22:	4604      	mov	r4, r0
    switch (hadc->Init.ClockPrescaler)
 8002e24:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002e28:	d005      	beq.n	8002e36 <ADC_ConfigureBoostMode+0x7e>
 8002e2a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002e2e:	d006      	beq.n	8002e3e <ADC_ConfigureBoostMode+0x86>
 8002e30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e34:	d104      	bne.n	8002e40 <ADC_ConfigureBoostMode+0x88>
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002e36:	0c1b      	lsrs	r3, r3, #16
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002e38:	fbb4 f4f3 	udiv	r4, r4, r3
        break;
 8002e3c:	e000      	b.n	8002e40 <ADC_ConfigureBoostMode+0x88>
        freq /= 4UL;
 8002e3e:	0884      	lsrs	r4, r0, #2
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8002e40:	f7ff fdb0 	bl	80029a4 <HAL_GetREVID>
 8002e44:	f241 0303 	movw	r3, #4099	; 0x1003
 8002e48:	4298      	cmp	r0, r3
 8002e4a:	682b      	ldr	r3, [r5, #0]
 8002e4c:	d823      	bhi.n	8002e96 <ADC_ConfigureBoostMode+0xde>
  {
    if (freq > 20000000UL)
 8002e4e:	4a21      	ldr	r2, [pc, #132]	; (8002ed4 <ADC_ConfigureBoostMode+0x11c>)
 8002e50:	4294      	cmp	r4, r2
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002e52:	689a      	ldr	r2, [r3, #8]
    if (freq > 20000000UL)
 8002e54:	d91b      	bls.n	8002e8e <ADC_ConfigureBoostMode+0xd6>
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
    }
    else if (freq <= 12500000UL)
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002e56:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e5a:	e01a      	b.n	8002e92 <ADC_ConfigureBoostMode+0xda>
    switch (hadc->Init.ClockPrescaler)
 8002e5c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002e60:	d0d7      	beq.n	8002e12 <ADC_ConfigureBoostMode+0x5a>
 8002e62:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002e66:	e7d3      	b.n	8002e10 <ADC_ConfigureBoostMode+0x58>
 8002e68:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002e6c:	d1e8      	bne.n	8002e40 <ADC_ConfigureBoostMode+0x88>
        freq /= 32UL;
 8002e6e:	0944      	lsrs	r4, r0, #5
        break;
 8002e70:	e7e6      	b.n	8002e40 <ADC_ConfigureBoostMode+0x88>
    switch (hadc->Init.ClockPrescaler)
 8002e72:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002e76:	d008      	beq.n	8002e8a <ADC_ConfigureBoostMode+0xd2>
 8002e78:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002e7c:	d1e0      	bne.n	8002e40 <ADC_ConfigureBoostMode+0x88>
        freq /= 256UL;
 8002e7e:	0a04      	lsrs	r4, r0, #8
        break;
 8002e80:	e7de      	b.n	8002e40 <ADC_ConfigureBoostMode+0x88>
        freq /= 16UL;
 8002e82:	0904      	lsrs	r4, r0, #4
        break;
 8002e84:	e7dc      	b.n	8002e40 <ADC_ConfigureBoostMode+0x88>
        freq /= 64UL;
 8002e86:	0984      	lsrs	r4, r0, #6
        break;
 8002e88:	e7da      	b.n	8002e40 <ADC_ConfigureBoostMode+0x88>
        freq /= 128UL;
 8002e8a:	09c4      	lsrs	r4, r0, #7
        break;
 8002e8c:	e7d8      	b.n	8002e40 <ADC_ConfigureBoostMode+0x88>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002e8e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
    }
    else /* if(freq > 25000000UL) */
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002e92:	609a      	str	r2, [r3, #8]
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002e94:	bd38      	pop	{r3, r4, r5, pc}
    if (freq <= 6250000UL)
 8002e96:	4a10      	ldr	r2, [pc, #64]	; (8002ed8 <ADC_ConfigureBoostMode+0x120>)
 8002e98:	4294      	cmp	r4, r2
 8002e9a:	d803      	bhi.n	8002ea4 <ADC_ConfigureBoostMode+0xec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002e9c:	689a      	ldr	r2, [r3, #8]
 8002e9e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002ea2:	e7f6      	b.n	8002e92 <ADC_ConfigureBoostMode+0xda>
    else if (freq <= 12500000UL)
 8002ea4:	4a0d      	ldr	r2, [pc, #52]	; (8002edc <ADC_ConfigureBoostMode+0x124>)
 8002ea6:	4294      	cmp	r4, r2
 8002ea8:	d803      	bhi.n	8002eb2 <ADC_ConfigureBoostMode+0xfa>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002eaa:	689a      	ldr	r2, [r3, #8]
 8002eac:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002eb0:	e7d1      	b.n	8002e56 <ADC_ConfigureBoostMode+0x9e>
    else if (freq <= 25000000UL)
 8002eb2:	4a0b      	ldr	r2, [pc, #44]	; (8002ee0 <ADC_ConfigureBoostMode+0x128>)
 8002eb4:	4294      	cmp	r4, r2
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002eb6:	689a      	ldr	r2, [r3, #8]
 8002eb8:	bf96      	itet	ls
 8002eba:	f422 7240 	bicls.w	r2, r2, #768	; 0x300
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002ebe:	f442 7240 	orrhi.w	r2, r2, #768	; 0x300
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002ec2:	f442 7200 	orrls.w	r2, r2, #512	; 0x200
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002ec6:	e7e4      	b.n	8002e92 <ADC_ConfigureBoostMode+0xda>
 8002ec8:	40022000 	.word	0x40022000
 8002ecc:	40022300 	.word	0x40022300
 8002ed0:	58026300 	.word	0x58026300
 8002ed4:	01312d00 	.word	0x01312d00
 8002ed8:	00bebc21 	.word	0x00bebc21
 8002edc:	017d7841 	.word	0x017d7841
 8002ee0:	02faf081 	.word	0x02faf081

08002ee4 <HAL_ADC_Init>:
  __IO uint32_t wait_loop_index = 0UL;
 8002ee4:	2300      	movs	r3, #0
{
 8002ee6:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if (hadc == NULL)
 8002ee8:	4604      	mov	r4, r0
  __IO uint32_t wait_loop_index = 0UL;
 8002eea:	9301      	str	r3, [sp, #4]
  if (hadc == NULL)
 8002eec:	2800      	cmp	r0, #0
 8002eee:	f000 80ed 	beq.w	80030cc <HAL_ADC_Init+0x1e8>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002ef2:	6d45      	ldr	r5, [r0, #84]	; 0x54
 8002ef4:	b925      	cbnz	r5, 8002f00 <HAL_ADC_Init+0x1c>
    HAL_ADC_MspInit(hadc);
 8002ef6:	f7fe fa09 	bl	800130c <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8002efa:	65a5      	str	r5, [r4, #88]	; 0x58
    hadc->Lock = HAL_UNLOCKED;
 8002efc:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002f00:	6820      	ldr	r0, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002f02:	6883      	ldr	r3, [r0, #8]
 8002f04:	0099      	lsls	r1, r3, #2
 8002f06:	d505      	bpl.n	8002f14 <HAL_ADC_Init+0x30>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002f08:	6883      	ldr	r3, [r0, #8]
 8002f0a:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002f0e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002f12:	6083      	str	r3, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002f14:	6883      	ldr	r3, [r0, #8]
 8002f16:	00da      	lsls	r2, r3, #3
 8002f18:	f140 8098 	bpl.w	800304c <HAL_ADC_Init+0x168>
 8002f1c:	6883      	ldr	r3, [r0, #8]
 8002f1e:	00db      	lsls	r3, r3, #3
 8002f20:	f100 80aa 	bmi.w	8003078 <HAL_ADC_Init+0x194>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f24:	6d63      	ldr	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8002f26:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f28:	f043 0310 	orr.w	r3, r3, #16
 8002f2c:	6563      	str	r3, [r4, #84]	; 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f2e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002f30:	f043 0301 	orr.w	r3, r3, #1
 8002f34:	65a3      	str	r3, [r4, #88]	; 0x58
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002f36:	f7ff fd68 	bl	8002a0a <LL_ADC_REG_IsConversionOngoing>
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002f3a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002f3c:	f003 0310 	and.w	r3, r3, #16
 8002f40:	4303      	orrs	r3, r0
    ADC_STATE_CLR_SET(hadc->State,
 8002f42:	6d63      	ldr	r3, [r4, #84]	; 0x54
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002f44:	f040 80bf 	bne.w	80030c6 <HAL_ADC_Init+0x1e2>
    ADC_STATE_CLR_SET(hadc->State,
 8002f48:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f4c:	6822      	ldr	r2, [r4, #0]
    ADC_STATE_CLR_SET(hadc->State,
 8002f4e:	f043 0302 	orr.w	r3, r3, #2
 8002f52:	6563      	str	r3, [r4, #84]	; 0x54
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002f54:	6893      	ldr	r3, [r2, #8]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f56:	07de      	lsls	r6, r3, #31
 8002f58:	d40c      	bmi.n	8002f74 <HAL_ADC_Init+0x90>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f5a:	4b5d      	ldr	r3, [pc, #372]	; (80030d0 <HAL_ADC_Init+0x1ec>)
 8002f5c:	495d      	ldr	r1, [pc, #372]	; (80030d4 <HAL_ADC_Init+0x1f0>)
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d002      	beq.n	8002f68 <HAL_ADC_Init+0x84>
 8002f62:	428a      	cmp	r2, r1
 8002f64:	f040 808a 	bne.w	800307c <HAL_ADC_Init+0x198>
 8002f68:	689e      	ldr	r6, [r3, #8]
 8002f6a:	6888      	ldr	r0, [r1, #8]
 8002f6c:	4330      	orrs	r0, r6
 8002f6e:	07c0      	lsls	r0, r0, #31
 8002f70:	f140 808b 	bpl.w	800308a <HAL_ADC_Init+0x1a6>
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002f74:	f7ff fd16 	bl	80029a4 <HAL_GetREVID>
 8002f78:	f241 0303 	movw	r3, #4099	; 0x1003
 8002f7c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002f7e:	4298      	cmp	r0, r3
 8002f80:	7f21      	ldrb	r1, [r4, #28]
 8002f82:	7d60      	ldrb	r0, [r4, #21]
 8002f84:	68a3      	ldr	r3, [r4, #8]
 8002f86:	f240 8090 	bls.w	80030aa <HAL_ADC_Init+0x1c6>
 8002f8a:	2b10      	cmp	r3, #16
 8002f8c:	f040 808d 	bne.w	80030aa <HAL_ADC_Init+0x1c6>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002f90:	040b      	lsls	r3, r1, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002f92:	ea43 3340 	orr.w	r3, r3, r0, lsl #13
 8002f96:	4313      	orrs	r3, r2
 8002f98:	f043 031c 	orr.w	r3, r3, #28
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002f9c:	2901      	cmp	r1, #1
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002f9e:	bf02      	ittt	eq
 8002fa0:	6a22      	ldreq	r2, [r4, #32]
 8002fa2:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8002fa6:	ea43 4342 	orreq.w	r3, r3, r2, lsl #17
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002faa:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002fac:	b122      	cbz	r2, 8002fb8 <HAL_ADC_Init+0xd4>
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002fae:	f402 7278 	and.w	r2, r2, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002fb2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002fb4:	430a      	orrs	r2, r1
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002fb6:	4313      	orrs	r3, r2
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002fb8:	6820      	ldr	r0, [r4, #0]
 8002fba:	4a47      	ldr	r2, [pc, #284]	; (80030d8 <HAL_ADC_Init+0x1f4>)
 8002fbc:	68c1      	ldr	r1, [r0, #12]
 8002fbe:	400a      	ands	r2, r1
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	60c3      	str	r3, [r0, #12]
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002fc4:	f7ff fd21 	bl	8002a0a <LL_ADC_REG_IsConversionOngoing>
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002fc8:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002fca:	6893      	ldr	r3, [r2, #8]
 8002fcc:	f003 0308 	and.w	r3, r3, #8
 8002fd0:	4303      	orrs	r3, r0
 8002fd2:	d127      	bne.n	8003024 <HAL_ADC_Init+0x140>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002fd4:	68d3      	ldr	r3, [r2, #12]
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002fd6:	7d21      	ldrb	r1, [r4, #20]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002fd8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002fdc:	f023 0303 	bic.w	r3, r3, #3
 8002fe0:	ea43 3381 	orr.w	r3, r3, r1, lsl #14
 8002fe4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002fe6:	430b      	orrs	r3, r1
 8002fe8:	60d3      	str	r3, [r2, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 8002fea:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	d161      	bne.n	80030b6 <HAL_ADC_Init+0x1d2>
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002ff2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002ff4:	6910      	ldr	r0, [r2, #16]
 8002ff6:	1e59      	subs	r1, r3, #1
 8002ff8:	e9d4 3610 	ldrd	r3, r6, [r4, #64]	; 0x40
 8002ffc:	4333      	orrs	r3, r6
 8002ffe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8003002:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8003004:	430b      	orrs	r3, r1
 8003006:	4935      	ldr	r1, [pc, #212]	; (80030dc <HAL_ADC_Init+0x1f8>)
 8003008:	4001      	ands	r1, r0
 800300a:	430b      	orrs	r3, r1
 800300c:	f043 0301 	orr.w	r3, r3, #1
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003010:	6113      	str	r3, [r2, #16]
      ADC_ConfigureBoostMode(hadc);
 8003012:	4620      	mov	r0, r4
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003014:	6913      	ldr	r3, [r2, #16]
 8003016:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003018:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800301c:	430b      	orrs	r3, r1
 800301e:	6113      	str	r3, [r2, #16]
      ADC_ConfigureBoostMode(hadc);
 8003020:	f7ff feca 	bl	8002db8 <ADC_ConfigureBoostMode>
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003024:	68e3      	ldr	r3, [r4, #12]
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003026:	6822      	ldr	r2, [r4, #0]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003028:	2b01      	cmp	r3, #1
 800302a:	d148      	bne.n	80030be <HAL_ADC_Init+0x1da>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800302c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800302e:	69a3      	ldr	r3, [r4, #24]
 8003030:	f021 010f 	bic.w	r1, r1, #15
 8003034:	3b01      	subs	r3, #1
 8003036:	430b      	orrs	r3, r1
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003038:	6313      	str	r3, [r2, #48]	; 0x30
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800303a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800303c:	f023 0303 	bic.w	r3, r3, #3
 8003040:	f043 0301 	orr.w	r3, r3, #1
 8003044:	6563      	str	r3, [r4, #84]	; 0x54
}
 8003046:	4628      	mov	r0, r5
 8003048:	b002      	add	sp, #8
 800304a:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG(ADCx->CR,
 800304c:	6883      	ldr	r3, [r0, #8]
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800304e:	4a24      	ldr	r2, [pc, #144]	; (80030e0 <HAL_ADC_Init+0x1fc>)
 8003050:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003054:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003058:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800305c:	6083      	str	r3, [r0, #8]
 800305e:	4b21      	ldr	r3, [pc, #132]	; (80030e4 <HAL_ADC_Init+0x200>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	fbb3 f3f2 	udiv	r3, r3, r2
 8003066:	3301      	adds	r3, #1
      wait_loop_index--;
 8003068:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 800306a:	9b01      	ldr	r3, [sp, #4]
 800306c:	2b00      	cmp	r3, #0
 800306e:	f43f af55 	beq.w	8002f1c <HAL_ADC_Init+0x38>
      wait_loop_index--;
 8003072:	9b01      	ldr	r3, [sp, #4]
 8003074:	3b01      	subs	r3, #1
 8003076:	e7f7      	b.n	8003068 <HAL_ADC_Init+0x184>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003078:	2500      	movs	r5, #0
 800307a:	e75c      	b.n	8002f36 <HAL_ADC_Init+0x52>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800307c:	4b1a      	ldr	r3, [pc, #104]	; (80030e8 <HAL_ADC_Init+0x204>)
 800307e:	689b      	ldr	r3, [r3, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003080:	07db      	lsls	r3, r3, #31
 8003082:	f53f af77 	bmi.w	8002f74 <HAL_ADC_Init+0x90>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003086:	4b19      	ldr	r3, [pc, #100]	; (80030ec <HAL_ADC_Init+0x208>)
 8003088:	e006      	b.n	8003098 <HAL_ADC_Init+0x1b4>
 800308a:	429a      	cmp	r2, r3
 800308c:	d00b      	beq.n	80030a6 <HAL_ADC_Init+0x1c2>
 800308e:	4b17      	ldr	r3, [pc, #92]	; (80030ec <HAL_ADC_Init+0x208>)
 8003090:	4817      	ldr	r0, [pc, #92]	; (80030f0 <HAL_ADC_Init+0x20c>)
 8003092:	428a      	cmp	r2, r1
 8003094:	bf08      	it	eq
 8003096:	4603      	moveq	r3, r0
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003098:	689a      	ldr	r2, [r3, #8]
 800309a:	6861      	ldr	r1, [r4, #4]
 800309c:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 80030a0:	430a      	orrs	r2, r1
 80030a2:	609a      	str	r2, [r3, #8]
}
 80030a4:	e766      	b.n	8002f74 <HAL_ADC_Init+0x90>
 80030a6:	4b12      	ldr	r3, [pc, #72]	; (80030f0 <HAL_ADC_Init+0x20c>)
 80030a8:	e7f6      	b.n	8003098 <HAL_ADC_Init+0x1b4>
                  hadc->Init.Overrun                                                    |
 80030aa:	4313      	orrs	r3, r2
 80030ac:	ea43 3340 	orr.w	r3, r3, r0, lsl #13
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80030b0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80030b4:	e772      	b.n	8002f9c <HAL_ADC_Init+0xb8>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80030b6:	6913      	ldr	r3, [r2, #16]
 80030b8:	f023 0301 	bic.w	r3, r3, #1
 80030bc:	e7a8      	b.n	8003010 <HAL_ADC_Init+0x12c>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80030be:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80030c0:	f023 030f 	bic.w	r3, r3, #15
 80030c4:	e7b8      	b.n	8003038 <HAL_ADC_Init+0x154>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030c6:	f043 0310 	orr.w	r3, r3, #16
 80030ca:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_ERROR;
 80030cc:	2501      	movs	r5, #1
 80030ce:	e7ba      	b.n	8003046 <HAL_ADC_Init+0x162>
 80030d0:	40022000 	.word	0x40022000
 80030d4:	40022100 	.word	0x40022100
 80030d8:	fff0c003 	.word	0xfff0c003
 80030dc:	fc00f81e 	.word	0xfc00f81e
 80030e0:	00030d40 	.word	0x00030d40
 80030e4:	24000000 	.word	0x24000000
 80030e8:	58026000 	.word	0x58026000
 80030ec:	58026300 	.word	0x58026300
 80030f0:	40022300 	.word	0x40022300

080030f4 <LL_ADC_REG_IsConversionOngoing>:
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80030f4:	6880      	ldr	r0, [r0, #8]
}
 80030f6:	f3c0 0080 	ubfx	r0, r0, #2, #1
 80030fa:	4770      	bx	lr

080030fc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80030fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80030fe:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
{
 8003102:	b09b      	sub	sp, #108	; 0x6c
 8003104:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 8003106:	2a01      	cmp	r2, #1
 8003108:	d072      	beq.n	80031f0 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 800310a:	2201      	movs	r2, #1

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800310c:	4c39      	ldr	r4, [pc, #228]	; (80031f4 <HAL_ADCEx_MultiModeConfigChannel+0xf8>)
  __HAL_LOCK(hadc);
 800310e:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8003112:	2000      	movs	r0, #0
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003114:	681e      	ldr	r6, [r3, #0]
  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8003116:	9016      	str	r0, [sp, #88]	; 0x58
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003118:	42a6      	cmp	r6, r4
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800311a:	9017      	str	r0, [sp, #92]	; 0x5c
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800311c:	d008      	beq.n	8003130 <HAL_ADCEx_MultiModeConfigChannel+0x34>

  if (tmphadcSlave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800311e:	6d59      	ldr	r1, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003120:	f883 0050 	strb.w	r0, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003124:	4610      	mov	r0, r2
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003126:	f041 0120 	orr.w	r1, r1, #32
 800312a:	6559      	str	r1, [r3, #84]	; 0x54
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 800312c:	b01b      	add	sp, #108	; 0x6c
 800312e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003130:	4c31      	ldr	r4, [pc, #196]	; (80031f8 <HAL_ADCEx_MultiModeConfigChannel+0xfc>)
 8003132:	4620      	mov	r0, r4
 8003134:	f7ff ffde 	bl	80030f4 <LL_ADC_REG_IsConversionOngoing>
 8003138:	4605      	mov	r5, r0
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800313a:	6818      	ldr	r0, [r3, #0]
 800313c:	f7ff ffda 	bl	80030f4 <LL_ADC_REG_IsConversionOngoing>
 8003140:	4328      	orrs	r0, r5
 8003142:	d14f      	bne.n	80031e4 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	42b2      	cmp	r2, r6
 8003148:	d022      	beq.n	8003190 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 800314a:	4d2c      	ldr	r5, [pc, #176]	; (80031fc <HAL_ADCEx_MultiModeConfigChannel+0x100>)
 800314c:	482c      	ldr	r0, [pc, #176]	; (8003200 <HAL_ADCEx_MultiModeConfigChannel+0x104>)
 800314e:	42a2      	cmp	r2, r4
 8003150:	bf18      	it	ne
 8003152:	4628      	movne	r0, r5
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003154:	f8d1 c000 	ldr.w	ip, [r1]
 8003158:	4f26      	ldr	r7, [pc, #152]	; (80031f4 <HAL_ADCEx_MultiModeConfigChannel+0xf8>)
 800315a:	f1bc 0f00 	cmp.w	ip, #0
 800315e:	d027      	beq.n	80031b0 <HAL_ADCEx_MultiModeConfigChannel+0xb4>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003160:	6886      	ldr	r6, [r0, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003162:	42ba      	cmp	r2, r7
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003164:	684d      	ldr	r5, [r1, #4]
 8003166:	f426 4640 	bic.w	r6, r6, #49152	; 0xc000
 800316a:	ea46 0605 	orr.w	r6, r6, r5
 800316e:	6086      	str	r6, [r0, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003170:	d001      	beq.n	8003176 <HAL_ADCEx_MultiModeConfigChannel+0x7a>
 8003172:	42a2      	cmp	r2, r4
 8003174:	d10e      	bne.n	8003194 <HAL_ADCEx_MultiModeConfigChannel+0x98>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003176:	4a1f      	ldr	r2, [pc, #124]	; (80031f4 <HAL_ADCEx_MultiModeConfigChannel+0xf8>)
 8003178:	6896      	ldr	r6, [r2, #8]
 800317a:	68a2      	ldr	r2, [r4, #8]
 800317c:	4332      	orrs	r2, r6
 800317e:	43d2      	mvns	r2, r2
 8003180:	f002 0201 	and.w	r2, r2, #1
 8003184:	b94a      	cbnz	r2, 800319a <HAL_ADCEx_MultiModeConfigChannel+0x9e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003186:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8003188:	2200      	movs	r2, #0
 800318a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return tmp_hal_status;
 800318e:	e7cd      	b.n	800312c <HAL_ADCEx_MultiModeConfigChannel+0x30>
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003190:	481b      	ldr	r0, [pc, #108]	; (8003200 <HAL_ADCEx_MultiModeConfigChannel+0x104>)
 8003192:	e7df      	b.n	8003154 <HAL_ADCEx_MultiModeConfigChannel+0x58>
 8003194:	4a1b      	ldr	r2, [pc, #108]	; (8003204 <HAL_ADCEx_MultiModeConfigChannel+0x108>)
 8003196:	6892      	ldr	r2, [r2, #8]
 8003198:	e7f1      	b.n	800317e <HAL_ADCEx_MultiModeConfigChannel+0x82>
        MODIFY_REG(tmpADC_Common->CCR,
 800319a:	6882      	ldr	r2, [r0, #8]
 800319c:	6889      	ldr	r1, [r1, #8]
 800319e:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 80031a2:	ea4c 0501 	orr.w	r5, ip, r1
 80031a6:	f022 020f 	bic.w	r2, r2, #15
 80031aa:	4315      	orrs	r5, r2
 80031ac:	6085      	str	r5, [r0, #8]
 80031ae:	e7ea      	b.n	8003186 <HAL_ADCEx_MultiModeConfigChannel+0x8a>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80031b0:	6881      	ldr	r1, [r0, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80031b2:	42ba      	cmp	r2, r7
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80031b4:	f421 4140 	bic.w	r1, r1, #49152	; 0xc000
 80031b8:	6081      	str	r1, [r0, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80031ba:	d001      	beq.n	80031c0 <HAL_ADCEx_MultiModeConfigChannel+0xc4>
 80031bc:	42a2      	cmp	r2, r4
 80031be:	d10e      	bne.n	80031de <HAL_ADCEx_MultiModeConfigChannel+0xe2>
 80031c0:	68b9      	ldr	r1, [r7, #8]
 80031c2:	68a2      	ldr	r2, [r4, #8]
 80031c4:	430a      	orrs	r2, r1
 80031c6:	43d2      	mvns	r2, r2
 80031c8:	f002 0201 	and.w	r2, r2, #1
 80031cc:	2a00      	cmp	r2, #0
 80031ce:	d0da      	beq.n	8003186 <HAL_ADCEx_MultiModeConfigChannel+0x8a>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80031d0:	6882      	ldr	r2, [r0, #8]
 80031d2:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 80031d6:	f022 020f 	bic.w	r2, r2, #15
 80031da:	6082      	str	r2, [r0, #8]
 80031dc:	e7d3      	b.n	8003186 <HAL_ADCEx_MultiModeConfigChannel+0x8a>
 80031de:	4a09      	ldr	r2, [pc, #36]	; (8003204 <HAL_ADCEx_MultiModeConfigChannel+0x108>)
 80031e0:	6892      	ldr	r2, [r2, #8]
 80031e2:	e7f0      	b.n	80031c6 <HAL_ADCEx_MultiModeConfigChannel+0xca>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031e4:	6d59      	ldr	r1, [r3, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 80031e6:	4610      	mov	r0, r2
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031e8:	f041 0120 	orr.w	r1, r1, #32
 80031ec:	6559      	str	r1, [r3, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 80031ee:	e7cb      	b.n	8003188 <HAL_ADCEx_MultiModeConfigChannel+0x8c>
  __HAL_LOCK(hadc);
 80031f0:	2002      	movs	r0, #2
 80031f2:	e79b      	b.n	800312c <HAL_ADCEx_MultiModeConfigChannel+0x30>
 80031f4:	40022000 	.word	0x40022000
 80031f8:	40022100 	.word	0x40022100
 80031fc:	58026300 	.word	0x58026300
 8003200:	40022300 	.word	0x40022300
 8003204:	58026000 	.word	0x58026000

08003208 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003208:	4907      	ldr	r1, [pc, #28]	; (8003228 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800320a:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800320c:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800320e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003212:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003216:	0412      	lsls	r2, r2, #16
 8003218:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800321a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800321c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003220:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8003224:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8003226:	4770      	bx	lr
 8003228:	e000ed00 	.word	0xe000ed00

0800322c <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800322c:	4b16      	ldr	r3, [pc, #88]	; (8003288 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800322e:	b530      	push	{r4, r5, lr}
 8003230:	68dc      	ldr	r4, [r3, #12]
 8003232:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003236:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800323a:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800323c:	2d04      	cmp	r5, #4
 800323e:	bf28      	it	cs
 8003240:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003242:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003244:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003248:	bf8c      	ite	hi
 800324a:	3c03      	subhi	r4, #3
 800324c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800324e:	fa03 f505 	lsl.w	r5, r3, r5
  if ((int32_t)(IRQn) >= 0)
 8003252:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003254:	fa03 f304 	lsl.w	r3, r3, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003258:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800325c:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003260:	fa01 f104 	lsl.w	r1, r1, r4
 8003264:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003268:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800326c:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 800326e:	db06      	blt.n	800327e <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003270:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8003274:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8003278:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800327c:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800327e:	f000 000f 	and.w	r0, r0, #15
 8003282:	4a02      	ldr	r2, [pc, #8]	; (800328c <HAL_NVIC_SetPriority+0x60>)
 8003284:	5413      	strb	r3, [r2, r0]
 8003286:	e7f9      	b.n	800327c <HAL_NVIC_SetPriority+0x50>
 8003288:	e000ed00 	.word	0xe000ed00
 800328c:	e000ed14 	.word	0xe000ed14

08003290 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003290:	2800      	cmp	r0, #0
 8003292:	db08      	blt.n	80032a6 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003294:	2301      	movs	r3, #1
 8003296:	0942      	lsrs	r2, r0, #5
 8003298:	f000 001f 	and.w	r0, r0, #31
 800329c:	fa03 f000 	lsl.w	r0, r3, r0
 80032a0:	4b01      	ldr	r3, [pc, #4]	; (80032a8 <HAL_NVIC_EnableIRQ+0x18>)
 80032a2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80032a6:	4770      	bx	lr
 80032a8:	e000e100 	.word	0xe000e100

080032ac <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80032ac:	3801      	subs	r0, #1
 80032ae:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80032b2:	d20b      	bcs.n	80032cc <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80032b4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032b8:	4a05      	ldr	r2, [pc, #20]	; (80032d0 <HAL_SYSTICK_Config+0x24>)
 80032ba:	21f0      	movs	r1, #240	; 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80032bc:	6158      	str	r0, [r3, #20]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80032be:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032c0:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80032c4:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80032c6:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80032c8:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80032ca:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80032cc:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80032ce:	4770      	bx	lr
 80032d0:	e000ed00 	.word	0xe000ed00

080032d4 <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 80032d4:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80032d8:	4b04      	ldr	r3, [pc, #16]	; (80032ec <HAL_MPU_Disable+0x18>)
 80032da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80032dc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80032e0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80032e2:	2200      	movs	r2, #0
 80032e4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 80032e8:	4770      	bx	lr
 80032ea:	bf00      	nop
 80032ec:	e000ed00 	.word	0xe000ed00

080032f0 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80032f0:	4b06      	ldr	r3, [pc, #24]	; (800330c <HAL_MPU_Enable+0x1c>)
 80032f2:	f040 0001 	orr.w	r0, r0, #1
 80032f6:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80032fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80032fc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003300:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8003302:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003306:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800330a:	4770      	bx	lr
 800330c:	e000ed00 	.word	0xe000ed00

08003310 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8003310:	7843      	ldrb	r3, [r0, #1]
 8003312:	4a14      	ldr	r2, [pc, #80]	; (8003364 <HAL_MPU_ConfigRegion+0x54>)
{
 8003314:	b510      	push	{r4, lr}
  MPU->RNR = MPU_Init->Number;
 8003316:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  if ((MPU_Init->Enable) != 0UL)
 800331a:	7801      	ldrb	r1, [r0, #0]
 800331c:	b1e9      	cbz	r1, 800335a <HAL_MPU_ConfigRegion+0x4a>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 800331e:	6843      	ldr	r3, [r0, #4]
 8003320:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003324:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003326:	7b04      	ldrb	r4, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003328:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800332a:	ea43 7304 	orr.w	r3, r3, r4, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800332e:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003330:	7a81      	ldrb	r1, [r0, #10]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003332:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003336:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003338:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800333c:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800333e:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003342:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003344:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003348:	7a41      	ldrb	r1, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800334a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800334e:	7a01      	ldrb	r1, [r0, #8]
 8003350:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003354:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8003358:	bd10      	pop	{r4, pc}
    MPU->RBAR = 0x00;
 800335a:	f8c2 109c 	str.w	r1, [r2, #156]	; 0x9c
    MPU->RASR = 0x00;
 800335e:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
}
 8003362:	e7f9      	b.n	8003358 <HAL_MPU_ConfigRegion+0x48>
 8003364:	e000ed00 	.word	0xe000ed00

08003368 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003368:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800336a:	4604      	mov	r4, r0
 800336c:	b908      	cbnz	r0, 8003372 <HAL_CRC_Init+0xa>
  {
    return HAL_ERROR;
 800336e:	2001      	movs	r0, #1
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 8003370:	bd10      	pop	{r4, pc}
  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003372:	7f43      	ldrb	r3, [r0, #29]
 8003374:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003378:	b913      	cbnz	r3, 8003380 <HAL_CRC_Init+0x18>
    hcrc->Lock = HAL_UNLOCKED;
 800337a:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 800337c:	f7fe f886 	bl	800148c <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY;
 8003380:	2302      	movs	r3, #2
 8003382:	7763      	strb	r3, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8003384:	7923      	ldrb	r3, [r4, #4]
 8003386:	b9e3      	cbnz	r3, 80033c2 <HAL_CRC_Init+0x5a>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8003388:	6823      	ldr	r3, [r4, #0]
 800338a:	4a13      	ldr	r2, [pc, #76]	; (80033d8 <HAL_CRC_Init+0x70>)
 800338c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800338e:	689a      	ldr	r2, [r3, #8]
 8003390:	f022 0218 	bic.w	r2, r2, #24
 8003394:	609a      	str	r2, [r3, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8003396:	7962      	ldrb	r2, [r4, #5]
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8003398:	6823      	ldr	r3, [r4, #0]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800339a:	b9d2      	cbnz	r2, 80033d2 <HAL_CRC_Init+0x6a>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800339c:	f04f 32ff 	mov.w	r2, #4294967295
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80033a0:	611a      	str	r2, [r3, #16]
  return HAL_OK;
 80033a2:	2000      	movs	r0, #0
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80033a4:	689a      	ldr	r2, [r3, #8]
 80033a6:	6961      	ldr	r1, [r4, #20]
 80033a8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80033ac:	430a      	orrs	r2, r1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80033ae:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80033b0:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80033b2:	689a      	ldr	r2, [r3, #8]
 80033b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80033b8:	430a      	orrs	r2, r1
 80033ba:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 80033bc:	2301      	movs	r3, #1
 80033be:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 80033c0:	e7d6      	b.n	8003370 <HAL_CRC_Init+0x8>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80033c2:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 80033c6:	4620      	mov	r0, r4
 80033c8:	f000 f808 	bl	80033dc <HAL_CRCEx_Polynomial_Set>
 80033cc:	2800      	cmp	r0, #0
 80033ce:	d0e2      	beq.n	8003396 <HAL_CRC_Init+0x2e>
 80033d0:	e7cd      	b.n	800336e <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80033d2:	6922      	ldr	r2, [r4, #16]
 80033d4:	e7e4      	b.n	80033a0 <HAL_CRC_Init+0x38>
 80033d6:	bf00      	nop
 80033d8:	04c11db7 	.word	0x04c11db7

080033dc <HAL_CRCEx_Polynomial_Set>:

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */ 
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 80033dc:	07cb      	lsls	r3, r1, #31
{
 80033de:	b510      	push	{r4, lr}
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 80033e0:	d50c      	bpl.n	80033fc <HAL_CRCEx_Polynomial_Set+0x20>
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80033e2:	231f      	movs	r3, #31
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80033e4:	3b01      	subs	r3, #1
 80033e6:	d31c      	bcc.n	8003422 <HAL_CRCEx_Polynomial_Set+0x46>
 80033e8:	fa21 f403 	lsr.w	r4, r1, r3
 80033ec:	07e4      	lsls	r4, r4, #31
 80033ee:	d5f9      	bpl.n	80033e4 <HAL_CRCEx_Polynomial_Set+0x8>
    {
    }

    switch (PolyLength)
 80033f0:	2a10      	cmp	r2, #16
 80033f2:	d012      	beq.n	800341a <HAL_CRCEx_Polynomial_Set+0x3e>
 80033f4:	d804      	bhi.n	8003400 <HAL_CRCEx_Polynomial_Set+0x24>
 80033f6:	b13a      	cbz	r2, 8003408 <HAL_CRCEx_Polynomial_Set+0x2c>
 80033f8:	2a08      	cmp	r2, #8
 80033fa:	d010      	beq.n	800341e <HAL_CRCEx_Polynomial_Set+0x42>
        }
        break;
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
        {
          status =   HAL_ERROR;
 80033fc:	2001      	movs	r0, #1

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
 80033fe:	e00b      	b.n	8003418 <HAL_CRCEx_Polynomial_Set+0x3c>
    switch (PolyLength)
 8003400:	2a18      	cmp	r2, #24
 8003402:	d1fb      	bne.n	80033fc <HAL_CRCEx_Polynomial_Set+0x20>
        if (msb >= HAL_CRC_LENGTH_7B)
 8003404:	2b06      	cmp	r3, #6
        if (msb >= HAL_CRC_LENGTH_16B)
 8003406:	d8f9      	bhi.n	80033fc <HAL_CRCEx_Polynomial_Set+0x20>
    WRITE_REG(hcrc->Instance->POL, Pol);
 8003408:	6800      	ldr	r0, [r0, #0]
 800340a:	6141      	str	r1, [r0, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800340c:	6883      	ldr	r3, [r0, #8]
 800340e:	f023 0318 	bic.w	r3, r3, #24
 8003412:	431a      	orrs	r2, r3
 8003414:	6082      	str	r2, [r0, #8]
 8003416:	2000      	movs	r0, #0
}
 8003418:	bd10      	pop	{r4, pc}
        if (msb >= HAL_CRC_LENGTH_8B)
 800341a:	2b07      	cmp	r3, #7
 800341c:	e7f3      	b.n	8003406 <HAL_CRCEx_Polynomial_Set+0x2a>
        if (msb >= HAL_CRC_LENGTH_16B)
 800341e:	2b0f      	cmp	r3, #15
 8003420:	e7f1      	b.n	8003406 <HAL_CRCEx_Polynomial_Set+0x2a>
    switch (PolyLength)
 8003422:	2a00      	cmp	r2, #0
 8003424:	d1ea      	bne.n	80033fc <HAL_CRCEx_Polynomial_Set+0x20>
 8003426:	e7ef      	b.n	8003408 <HAL_CRCEx_Polynomial_Set+0x2c>

08003428 <ETH_SetMACConfig>:
static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8003428:	688b      	ldr	r3, [r1, #8]
 800342a:	680a      	ldr	r2, [r1, #0]
{
 800342c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003430:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
               ((uint32_t)macconf->Support2KPacket  << 22) |
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8003432:	7c0b      	ldrb	r3, [r1, #16]
{
 8003434:	b085      	sub	sp, #20
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8003436:	f891 a004 	ldrb.w	sl, [r1, #4]
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800343a:	2b00      	cmp	r3, #0
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800343c:	f891 900c 	ldrb.w	r9, [r1, #12]
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8003440:	f891 800d 	ldrb.w	r8, [r1, #13]
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8003444:	bf0c      	ite	eq
 8003446:	f44f 2300 	moveq.w	r3, #524288	; 0x80000
 800344a:	2300      	movne	r3, #0
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800344c:	f891 e00e 	ldrb.w	lr, [r1, #14]
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8003450:	9301      	str	r3, [sp, #4]
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8003452:	7c4b      	ldrb	r3, [r1, #17]
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8003454:	f891 c00f 	ldrb.w	ip, [r1, #15]
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8003458:	2b00      	cmp	r3, #0
               ((uint32_t)macconf->JumboPacket << 16) |
 800345a:	7c8e      	ldrb	r6, [r1, #18]
               macconf->Speed |
               macconf->DuplexMode |
               ((uint32_t)macconf->LoopbackMode << 12) |
 800345c:	7f0d      	ldrb	r5, [r1, #28]
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800345e:	bf0c      	ite	eq
 8003460:	f44f 3300 	moveq.w	r3, #131072	; 0x20000
 8003464:	2300      	movne	r3, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8003466:	f891 b01d 	ldrb.w	fp, [r1, #29]
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800346a:	9302      	str	r3, [sp, #8]
 800346c:	694b      	ldr	r3, [r1, #20]
 800346e:	431a      	orrs	r2, r3
 8003470:	698b      	ldr	r3, [r1, #24]
 8003472:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8003474:	7f8a      	ldrb	r2, [r1, #30]
 8003476:	2a00      	cmp	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8003478:	7fca      	ldrb	r2, [r1, #31]
 800347a:	9203      	str	r2, [sp, #12]
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800347c:	bf08      	it	eq
 800347e:	f44f 6780 	moveq.w	r7, #1024	; 0x400
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8003482:	f891 2020 	ldrb.w	r2, [r1, #32]
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8003486:	bf18      	it	ne
 8003488:	2700      	movne	r7, #0
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800348a:	2a00      	cmp	r2, #0
               macconf->BackOffLimit |
               ((uint32_t)macconf->DeferralCheck << 4) |
               macconf->PreambleLength);

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800348c:	6802      	ldr	r2, [r0, #0]
 800348e:	6810      	ldr	r0, [r2, #0]
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8003490:	bf0c      	ite	eq
 8003492:	f44f 7480 	moveq.w	r4, #256	; 0x100
 8003496:	2400      	movne	r4, #0
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8003498:	9000      	str	r0, [sp, #0]
 800349a:	6a48      	ldr	r0, [r1, #36]	; 0x24
 800349c:	4303      	orrs	r3, r0
 800349e:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
 80034a0:	4303      	orrs	r3, r0
 80034a2:	9800      	ldr	r0, [sp, #0]
 80034a4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80034a8:	f420 007b 	bic.w	r0, r0, #16449536	; 0xfb0000
 80034ac:	f420 40fe 	bic.w	r0, r0, #32512	; 0x7f00
 80034b0:	f020 007c 	bic.w	r0, r0, #124	; 0x7c
 80034b4:	4303      	orrs	r3, r0
 80034b6:	9803      	ldr	r0, [sp, #12]
 80034b8:	ea43 63ca 	orr.w	r3, r3, sl, lsl #27
 80034bc:	ea43 53c9 	orr.w	r3, r3, r9, lsl #23
 80034c0:	ea43 5388 	orr.w	r3, r3, r8, lsl #22
 80034c4:	ea43 534e 	orr.w	r3, r3, lr, lsl #21
 80034c8:	ea43 530c 	orr.w	r3, r3, ip, lsl #20
 80034cc:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80034d0:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
 80034d4:	ea43 23cb 	orr.w	r3, r3, fp, lsl #11
               ((uint32_t)macconf->DeferralCheck << 4) |
 80034d8:	f891 b028 	ldrb.w	fp, [r1, #40]	; 0x28
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80034dc:	ea43 2340 	orr.w	r3, r3, r0, lsl #9
 80034e0:	9801      	ldr	r0, [sp, #4]
 80034e2:	ea43 130b 	orr.w	r3, r3, fp, lsl #4
 80034e6:	4303      	orrs	r3, r0
 80034e8:	9802      	ldr	r0, [sp, #8]
 80034ea:	4303      	orrs	r3, r0
 80034ec:	433b      	orrs	r3, r7
 80034ee:	431c      	orrs	r4, r3
 80034f0:	6014      	str	r4, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80034f2:	6bce      	ldr	r6, [r1, #60]	; 0x3c
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80034f4:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80034f8:	f891 7038 	ldrb.w	r7, [r1, #56]	; 0x38
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80034fc:	2b00      	cmp	r3, #0
               macconf->GiantPacketSizeLimit);

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80034fe:	6853      	ldr	r3, [r2, #4]
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8003500:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8003504:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8003508:	f891 4031 	ldrb.w	r4, [r1, #49]	; 0x31
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 800350c:	bf0c      	ite	eq
 800350e:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 8003512:	2000      	movne	r0, #0
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8003514:	f423 23ef 	bic.w	r3, r3, #489472	; 0x77800
 8003518:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800351c:	f023 0307 	bic.w	r3, r3, #7
 8003520:	ea43 6346 	orr.w	r3, r3, r6, lsl #25
 8003524:	6b4e      	ldr	r6, [r1, #52]	; 0x34
 8003526:	4333      	orrs	r3, r6

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
               macconf->PauseLowThreshold |
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
               (macconf->PauseTime << 16));
 8003528:	6c8e      	ldr	r6, [r1, #72]	; 0x48
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800352a:	ea43 6307 	orr.w	r3, r3, r7, lsl #24
 800352e:	ea43 4385 	orr.w	r3, r3, r5, lsl #18
               macconf->PauseLowThreshold |
 8003532:	6d0d      	ldr	r5, [r1, #80]	; 0x50
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8003534:	ea43 4344 	orr.w	r3, r3, r4, lsl #17
 8003538:	4303      	orrs	r3, r0
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800353a:	6c48      	ldr	r0, [r1, #68]	; 0x44
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800353c:	6053      	str	r3, [r2, #4]
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800353e:	68d3      	ldr	r3, [r2, #12]
 8003540:	f423 7387 	bic.w	r3, r3, #270	; 0x10e
 8003544:	f023 0301 	bic.w	r3, r3, #1
 8003548:	4303      	orrs	r3, r0
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800354a:	f891 0040 	ldrb.w	r0, [r1, #64]	; 0x40
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800354e:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8003552:	60d3      	str	r3, [r2, #12]
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8003554:	f891 304c 	ldrb.w	r3, [r1, #76]	; 0x4c
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003558:	f891 4054 	ldrb.w	r4, [r1, #84]	; 0x54
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 800355c:	2b00      	cmp	r3, #0

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 800355e:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8003560:	f023 03f2 	bic.w	r3, r3, #242	; 0xf2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8003564:	bf0c      	ite	eq
 8003566:	2080      	moveq	r0, #128	; 0x80
 8003568:	2000      	movne	r0, #0
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 800356a:	041b      	lsls	r3, r3, #16
 800356c:	0c1b      	lsrs	r3, r3, #16
 800356e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8003572:	432b      	orrs	r3, r5
  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8003574:	6dcd      	ldr	r5, [r1, #92]	; 0x5c
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8003576:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
 800357a:	4303      	orrs	r3, r0
 800357c:	6713      	str	r3, [r2, #112]	; 0x70
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800357e:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8003582:	f891 3056 	ldrb.w	r3, [r1, #86]	; 0x56
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8003586:	f020 0003 	bic.w	r0, r0, #3
 800358a:	4303      	orrs	r3, r0
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800358c:	f891 0055 	ldrb.w	r0, [r1, #85]	; 0x55
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8003590:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8003594:	6d88      	ldr	r0, [r1, #88]	; 0x58
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8003596:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800359a:	f8d2 3d00 	ldr.w	r3, [r2, #3328]	; 0xd00
 800359e:	f023 0372 	bic.w	r3, r3, #114	; 0x72
 80035a2:	4303      	orrs	r3, r0
 80035a4:	f8c2 3d00 	str.w	r3, [r2, #3328]	; 0xd00
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80035a8:	f891 3060 	ldrb.w	r3, [r1, #96]	; 0x60
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80035ac:	f891 4061 	ldrb.w	r4, [r1, #97]	; 0x61
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80035b0:	2b00      	cmp	r3, #0
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80035b2:	f8d2 3d30 	ldr.w	r3, [r2, #3376]	; 0xd30
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80035b6:	f891 1062 	ldrb.w	r1, [r1, #98]	; 0x62
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80035ba:	f023 037b 	bic.w	r3, r3, #123	; 0x7b
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80035be:	bf0c      	ite	eq
 80035c0:	2040      	moveq	r0, #64	; 0x40
 80035c2:	2000      	movne	r0, #0
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80035c4:	432b      	orrs	r3, r5
 80035c6:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 80035ca:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80035ce:	4303      	orrs	r3, r0
 80035d0:	f8c2 3d30 	str.w	r3, [r2, #3376]	; 0xd30
}
 80035d4:	b005      	add	sp, #20
 80035d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080035dc <ETH_SetDMAConfig>:
static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80035dc:	6803      	ldr	r3, [r0, #0]
 80035de:	6808      	ldr	r0, [r1, #0]
 80035e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
 80035ea:	f022 0202 	bic.w	r2, r2, #2
 80035ee:	4302      	orrs	r2, r0
{
 80035f0:	b510      	push	{r4, lr}
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80035f2:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
               dmaconf->BurstMode |
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80035f4:	7b0a      	ldrb	r2, [r1, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80035f6:	6858      	ldr	r0, [r3, #4]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80035f8:	790c      	ldrb	r4, [r1, #4]
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80035fa:	03d2      	lsls	r2, r2, #15
  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80035fc:	f420 4050 	bic.w	r0, r0, #53248	; 0xd000
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003600:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
 8003604:	688c      	ldr	r4, [r1, #8]
  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8003606:	f020 0001 	bic.w	r0, r0, #1
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800360a:	4322      	orrs	r2, r4
  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800360c:	4302      	orrs	r2, r0
 800360e:	605a      	str	r2, [r3, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8003610:	6a0a      	ldr	r2, [r1, #32]
 8003612:	7b48      	ldrb	r0, [r1, #13]
               dmaconf->MaximumSegmentSize);

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8003614:	f8d3 4100 	ldr.w	r4, [r3, #256]	; 0x100
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8003618:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 800361c:	4810      	ldr	r0, [pc, #64]	; (8003660 <ETH_SetDMAConfig+0x84>)
 800361e:	4020      	ands	r0, r4
 8003620:	4302      	orrs	r2, r0
 8003622:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8003626:	7f4a      	ldrb	r2, [r1, #29]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8003628:	7d08      	ldrb	r0, [r1, #20]
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 800362a:	0312      	lsls	r2, r2, #12

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800362c:	f8d3 4104 	ldr.w	r4, [r3, #260]	; 0x104
  dmaregval = (dmaconf->TxDMABurstLength |
 8003630:	ea42 1200 	orr.w	r2, r2, r0, lsl #4
 8003634:	6908      	ldr	r0, [r1, #16]
 8003636:	4302      	orrs	r2, r0
  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8003638:	480a      	ldr	r0, [pc, #40]	; (8003664 <ETH_SetDMAConfig+0x88>)
 800363a:	4020      	ands	r0, r4
 800363c:	4302      	orrs	r2, r0
 800363e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
               dmaconf->RxDMABurstLength);

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8003642:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8003646:	7f0c      	ldrb	r4, [r1, #28]
 8003648:	698a      	ldr	r2, [r1, #24]
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 800364a:	f020 4100 	bic.w	r1, r0, #2147483648	; 0x80000000
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800364e:	ea42 72c4 	orr.w	r2, r2, r4, lsl #31
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8003652:	f421 117c 	bic.w	r1, r1, #4128768	; 0x3f0000
 8003656:	430a      	orrs	r2, r1
 8003658:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
 800365c:	bd10      	pop	{r4, pc}
 800365e:	bf00      	nop
 8003660:	fffec000 	.word	0xfffec000
 8003664:	ffc0efef 	.word	0xffc0efef

08003668 <HAL_ETH_SetMDIOClockRange>:
{
 8003668:	b538      	push	{r3, r4, r5, lr}
  tmpreg = (heth->Instance)->MACMDIOAR;
 800366a:	6803      	ldr	r3, [r0, #0]
{
 800366c:	4605      	mov	r5, r0
  tmpreg = (heth->Instance)->MACMDIOAR;
 800366e:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
  hclk = HAL_RCC_GetHCLKFreq();
 8003672:	f002 f923 	bl	80058bc <HAL_RCC_GetHCLKFreq>
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8003676:	4b12      	ldr	r3, [pc, #72]	; (80036c0 <HAL_ETH_SetMDIOClockRange+0x58>)
 8003678:	4a12      	ldr	r2, [pc, #72]	; (80036c4 <HAL_ETH_SetMDIOClockRange+0x5c>)
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800367a:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 800367e:	4403      	add	r3, r0
 8003680:	4293      	cmp	r3, r2
 8003682:	d205      	bcs.n	8003690 <HAL_ETH_SetMDIOClockRange+0x28>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8003684:	f444 7400 	orr.w	r4, r4, #512	; 0x200
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8003688:	682b      	ldr	r3, [r5, #0]
 800368a:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
}
 800368e:	bd38      	pop	{r3, r4, r5, pc}
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8003690:	4b0d      	ldr	r3, [pc, #52]	; (80036c8 <HAL_ETH_SetMDIOClockRange+0x60>)
 8003692:	4a0e      	ldr	r2, [pc, #56]	; (80036cc <HAL_ETH_SetMDIOClockRange+0x64>)
 8003694:	4403      	add	r3, r0
 8003696:	4293      	cmp	r3, r2
 8003698:	d802      	bhi.n	80036a0 <HAL_ETH_SetMDIOClockRange+0x38>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800369a:	f444 7440 	orr.w	r4, r4, #768	; 0x300
 800369e:	e7f3      	b.n	8003688 <HAL_ETH_SetMDIOClockRange+0x20>
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 80036a0:	4b0b      	ldr	r3, [pc, #44]	; (80036d0 <HAL_ETH_SetMDIOClockRange+0x68>)
 80036a2:	4a0c      	ldr	r2, [pc, #48]	; (80036d4 <HAL_ETH_SetMDIOClockRange+0x6c>)
 80036a4:	4403      	add	r3, r0
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d3ee      	bcc.n	8003688 <HAL_ETH_SetMDIOClockRange+0x20>
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 80036aa:	4b0b      	ldr	r3, [pc, #44]	; (80036d8 <HAL_ETH_SetMDIOClockRange+0x70>)
 80036ac:	4a0b      	ldr	r2, [pc, #44]	; (80036dc <HAL_ETH_SetMDIOClockRange+0x74>)
 80036ae:	4403      	add	r3, r0
 80036b0:	4293      	cmp	r3, r2
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80036b2:	bf94      	ite	ls
 80036b4:	f444 7480 	orrls.w	r4, r4, #256	; 0x100
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80036b8:	f444 6480 	orrhi.w	r4, r4, #1024	; 0x400
 80036bc:	e7e4      	b.n	8003688 <HAL_ETH_SetMDIOClockRange+0x20>
 80036be:	bf00      	nop
 80036c0:	feced300 	.word	0xfeced300
 80036c4:	00e4e1c0 	.word	0x00e4e1c0
 80036c8:	fde9f140 	.word	0xfde9f140
 80036cc:	017d783f 	.word	0x017d783f
 80036d0:	fc6c7900 	.word	0xfc6c7900
 80036d4:	02625a00 	.word	0x02625a00
 80036d8:	fa0a1f00 	.word	0xfa0a1f00
 80036dc:	02faf07f 	.word	0x02faf07f

080036e0 <HAL_ETH_Init>:
{
 80036e0:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (heth == NULL)
 80036e2:	4604      	mov	r4, r0
{
 80036e4:	b0a5      	sub	sp, #148	; 0x94
  if (heth == NULL)
 80036e6:	2800      	cmp	r0, #0
 80036e8:	f000 80b0 	beq.w	800384c <HAL_ETH_Init+0x16c>
  if (heth->gState == HAL_ETH_STATE_RESET)
 80036ec:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 80036f0:	b923      	cbnz	r3, 80036fc <HAL_ETH_Init+0x1c>
    heth->gState = HAL_ETH_STATE_BUSY;
 80036f2:	2323      	movs	r3, #35	; 0x23
 80036f4:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    HAL_ETH_MspInit(heth);
 80036f8:	f7fd fee0 	bl	80014bc <HAL_ETH_MspInit>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036fc:	4b7c      	ldr	r3, [pc, #496]	; (80038f0 <HAL_ETH_Init+0x210>)
 80036fe:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8003702:	f042 0202 	orr.w	r2, r2, #2
 8003706:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 800370a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 800370e:	7a20      	ldrb	r0, [r4, #8]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003710:	f003 0302 	and.w	r3, r3, #2
 8003714:	9301      	str	r3, [sp, #4]
 8003716:	9b01      	ldr	r3, [sp, #4]
  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8003718:	2800      	cmp	r0, #0
 800371a:	f040 8087 	bne.w	800382c <HAL_ETH_Init+0x14c>
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 800371e:	f7ff f94f 	bl	80029c0 <HAL_SYSCFG_ETHInterfaceSelect>
  (void)SYSCFG->PMCR;
 8003722:	4b74      	ldr	r3, [pc, #464]	; (80038f4 <HAL_ETH_Init+0x214>)
 8003724:	685b      	ldr	r3, [r3, #4]
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8003726:	6823      	ldr	r3, [r4, #0]
 8003728:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	f042 0201 	orr.w	r2, r2, #1
 8003732:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8003734:	f7ff f91a 	bl	800296c <HAL_GetTick>
 8003738:	4606      	mov	r6, r0
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800373a:	6823      	ldr	r3, [r4, #0]
 800373c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003740:	681d      	ldr	r5, [r3, #0]
 8003742:	f015 0501 	ands.w	r5, r5, #1
 8003746:	d174      	bne.n	8003832 <HAL_ETH_Init+0x152>
  HAL_ETH_SetMDIOClockRange(heth);
 8003748:	4620      	mov	r0, r4
  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
  macDefaultConf.ChecksumOffload = ENABLE;
 800374a:	2601      	movs	r6, #1
  HAL_ETH_SetMDIOClockRange(heth);
 800374c:	f7ff ff8c 	bl	8003668 <HAL_ETH_SetMDIOClockRange>
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8003750:	f002 f8b4 	bl	80058bc <HAL_RCC_GetHCLKFreq>
 8003754:	4a68      	ldr	r2, [pc, #416]	; (80038f8 <HAL_ETH_Init+0x218>)
 8003756:	6823      	ldr	r3, [r4, #0]
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
  macDefaultConf.CRCStripTypePacket = ENABLE;
  macDefaultConf.DeferralCheck = DISABLE;
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003758:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800375c:	9514      	str	r5, [sp, #80]	; 0x50
  macDefaultConf.DeferralCheck = DISABLE;
 800375e:	f88d 5054 	strb.w	r5, [sp, #84]	; 0x54
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8003762:	f88d 5064 	strb.w	r5, [sp, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8003766:	951a      	str	r5, [sp, #104]	; 0x68
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
  macDefaultConf.Jabber = ENABLE;
  macDefaultConf.JumboPacket = DISABLE;
  macDefaultConf.LoopbackMode = DISABLE;
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
  macDefaultConf.PauseTime = 0x0;
 8003768:	951d      	str	r5, [sp, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800376a:	f88d 506c 	strb.w	r5, [sp, #108]	; 0x6c
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800376e:	f88d 508e 	strb.w	r5, [sp, #142]	; 0x8e
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8003772:	951f      	str	r5, [sp, #124]	; 0x7c
  macDefaultConf.SlowProtocolDetect = DISABLE;
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
  macDefaultConf.Speed = ETH_SPEED_100M;
  macDefaultConf.Support2KPacket = DISABLE;
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003774:	f8ad 5080 	strh.w	r5, [sp, #128]	; 0x80
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003778:	f88d 5082 	strb.w	r5, [sp, #130]	; 0x82
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800377c:	9516      	str	r5, [sp, #88]	; 0x58
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800377e:	f8ad 505c 	strh.w	r5, [sp, #92]	; 0x5c
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8003782:	950d      	str	r5, [sp, #52]	; 0x34
  macDefaultConf.JumboPacket = DISABLE;
 8003784:	f88d 503e 	strb.w	r5, [sp, #62]	; 0x3e
  macDefaultConf.Watchdog = ENABLE;
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8003788:	951c      	str	r5, [sp, #112]	; 0x70
  macDefaultConf.ChecksumOffload = ENABLE;
 800378a:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
  macDefaultConf.RetryTransmission = ENABLE;
 800378e:	f88d 604c 	strb.w	r6, [sp, #76]	; 0x4c
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8003792:	f8ad 608c 	strh.w	r6, [sp, #140]	; 0x8c
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8003796:	f88d 605e 	strb.w	r6, [sp, #94]	; 0x5e
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800379a:	f88d 6078 	strb.w	r6, [sp, #120]	; 0x78
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 800379e:	fbb0 f0f2 	udiv	r0, r0, r2
 80037a2:	3801      	subs	r0, #1
 80037a4:	f8c3 00dc 	str.w	r0, [r3, #220]	; 0xdc
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 80037a8:	f44f 63c3 	mov.w	r3, #1560	; 0x618
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80037ac:	2002      	movs	r0, #2
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 80037ae:	9318      	str	r3, [sp, #96]	; 0x60
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80037b0:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80037b4:	930b      	str	r3, [sp, #44]	; 0x2c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80037b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80037ba:	e9cd 1310 	strd	r1, r3, [sp, #64]	; 0x40
  macDefaultConf.LoopbackMode = DISABLE;
 80037be:	f44f 3380 	mov.w	r3, #65536	; 0x10000

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80037c2:	a90b      	add	r1, sp, #44	; 0x2c
  macDefaultConf.LoopbackMode = DISABLE;
 80037c4:	9312      	str	r3, [sp, #72]	; 0x48
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80037c6:	2320      	movs	r3, #32
 80037c8:	e9cd 0321 	strd	r0, r3, [sp, #132]	; 0x84
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80037cc:	4b4b      	ldr	r3, [pc, #300]	; (80038fc <HAL_ETH_Init+0x21c>)
  ETH_SetMACConfig(heth, &macDefaultConf);
 80037ce:	4620      	mov	r0, r4
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80037d0:	930e      	str	r3, [sp, #56]	; 0x38
  macDefaultConf.Watchdog = ENABLE;
 80037d2:	f240 1301 	movw	r3, #257	; 0x101
 80037d6:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
  ETH_SetMACConfig(heth, &macDefaultConf);
 80037da:	f7ff fe25 	bl	8003428 <ETH_SetMACConfig>
  dmaDefaultConf.FlushRxPacket = DISABLE;
  dmaDefaultConf.PBLx8Mode = DISABLE;
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
  dmaDefaultConf.SecondPacketOperate = DISABLE;
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80037de:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  dmaDefaultConf.TCPSegmentation = DISABLE;
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80037e2:	a902      	add	r1, sp, #8
 80037e4:	4620      	mov	r0, r4
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80037e6:	9502      	str	r5, [sp, #8]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80037e8:	9306      	str	r3, [sp, #24]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80037ea:	9308      	str	r3, [sp, #32]
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 80037ec:	f44f 7306 	mov.w	r3, #536	; 0x218
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80037f0:	f8ad 5014 	strh.w	r5, [sp, #20]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80037f4:	f88d 501c 	strb.w	r5, [sp, #28]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80037f8:	f8ad 5024 	strh.w	r5, [sp, #36]	; 0x24
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 80037fc:	930a      	str	r3, [sp, #40]	; 0x28
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80037fe:	f88d 600c 	strb.w	r6, [sp, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003802:	9604      	str	r6, [sp, #16]
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003804:	f7ff feea 	bl	80035dc <ETH_SetDMAConfig>
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8003808:	6825      	ldr	r5, [r4, #0]
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800380a:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800380c:	f505 5280 	add.w	r2, r5, #4096	; 0x1000
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8003810:	f010 0103 	ands.w	r1, r0, #3
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8003814:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
 8003818:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 800381c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003820:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8003824:	d014      	beq.n	8003850 <HAL_ETH_Init+0x170>
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8003826:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
 800382a:	e00c      	b.n	8003846 <HAL_ETH_Init+0x166>
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 800382c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8003830:	e775      	b.n	800371e <HAL_ETH_Init+0x3e>
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003832:	f7ff f89b 	bl	800296c <HAL_GetTick>
 8003836:	1b80      	subs	r0, r0, r6
 8003838:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 800383c:	f67f af7d 	bls.w	800373a <HAL_ETH_Init+0x5a>
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003840:	2304      	movs	r3, #4
 8003842:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
    heth->gState = HAL_ETH_STATE_ERROR;
 8003846:	23e0      	movs	r3, #224	; 0xe0
 8003848:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    return HAL_ERROR;
 800384c:	2001      	movs	r0, #1
 800384e:	e04c      	b.n	80038ea <HAL_ETH_Init+0x20a>
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8003850:	f8d2 3108 	ldr.w	r3, [r2, #264]	; 0x108
 8003854:	f104 0618 	add.w	r6, r4, #24
 8003858:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800385c:	f023 037e 	bic.w	r3, r3, #126	; 0x7e
 8003860:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
 8003864:	68e0      	ldr	r0, [r4, #12]
 8003866:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
{
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800386a:	f100 0760 	add.w	r7, r0, #96	; 0x60
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800386e:	4603      	mov	r3, r0

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8003870:	6019      	str	r1, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003872:	6059      	str	r1, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8003874:	6099      	str	r1, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8003876:	60d9      	str	r1, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003878:	f846 3b04 	str.w	r3, [r6], #4
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800387c:	3318      	adds	r3, #24
 800387e:	42bb      	cmp	r3, r7
 8003880:	d1f6      	bne.n	8003870 <HAL_ETH_Init+0x190>
  }

  heth->TxDescList.CurTxDesc = 0;

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8003882:	2303      	movs	r3, #3
  heth->TxDescList.CurTxDesc = 0;
 8003884:	62a1      	str	r1, [r4, #40]	; 0x28
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8003886:	f104 0648 	add.w	r6, r4, #72	; 0x48
 800388a:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
  {
    dmarxdesc =  heth->Init.RxDesc + i;

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800388e:	2300      	movs	r3, #0
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8003890:	f8c2 0114 	str.w	r0, [r2, #276]	; 0x114
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8003894:	f8c2 0120 	str.w	r0, [r2, #288]	; 0x120
    dmarxdesc =  heth->Init.RxDesc + i;
 8003898:	6920      	ldr	r0, [r4, #16]
 800389a:	f100 0760 	add.w	r7, r0, #96	; 0x60
 800389e:	4601      	mov	r1, r0
    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80038a0:	600b      	str	r3, [r1, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80038a2:	604b      	str	r3, [r1, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80038a4:	608b      	str	r3, [r1, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80038a6:	60cb      	str	r3, [r1, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80038a8:	e9c1 3304 	strd	r3, r3, [r1, #16]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80038ac:	f846 1b04 	str.w	r1, [r6], #4
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80038b0:	3118      	adds	r1, #24
 80038b2:	42b9      	cmp	r1, r7
 80038b4:	d1f4      	bne.n	80038a0 <HAL_ETH_Init+0x1c0>
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
  WRITE_REG(heth->RxDescList.ItMode, 0);

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 80038b6:	2103      	movs	r1, #3
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80038b8:	65a3      	str	r3, [r4, #88]	; 0x58
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80038ba:	e9c4 3317 	strd	r3, r3, [r4, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80038be:	e9c4 331a 	strd	r3, r3, [r4, #104]	; 0x68
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 80038c2:	f8c2 1130 	str.w	r1, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80038c6:	f8c2 011c 	str.w	r0, [r2, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 80038ca:	3048      	adds	r0, #72	; 0x48
 80038cc:	f8c2 0128 	str.w	r0, [r2, #296]	; 0x128
  return HAL_OK;
 80038d0:	2000      	movs	r0, #0
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80038d2:	6862      	ldr	r2, [r4, #4]
 80038d4:	8891      	ldrh	r1, [r2, #4]
 80038d6:	f8c5 1300 	str.w	r1, [r5, #768]	; 0x300
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80038da:	6812      	ldr	r2, [r2, #0]
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80038dc:	f8c5 2304 	str.w	r2, [r5, #772]	; 0x304
  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80038e0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80038e4:	2310      	movs	r3, #16
 80038e6:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
}
 80038ea:	b025      	add	sp, #148	; 0x94
 80038ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80038ee:	bf00      	nop
 80038f0:	58024400 	.word	0x58024400
 80038f4:	58000400 	.word	0x58000400
 80038f8:	000f4240 	.word	0x000f4240
 80038fc:	01010000 	.word	0x01010000

08003900 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8003900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003904:	b099      	sub	sp, #100	; 0x64
 8003906:	4604      	mov	r4, r0
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8003908:	224c      	movs	r2, #76	; 0x4c
 800390a:	49c8      	ldr	r1, [pc, #800]	; (8003c2c <HAL_FDCAN_Init+0x32c>)
 800390c:	a805      	add	r0, sp, #20
 800390e:	f00f fb47 	bl	8012fa0 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8003912:	2c00      	cmp	r4, #0
 8003914:	f000 81b6 	beq.w	8003c84 <HAL_FDCAN_Init+0x384>
  {
    return HAL_ERROR;
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8003918:	4bc5      	ldr	r3, [pc, #788]	; (8003c30 <HAL_FDCAN_Init+0x330>)
 800391a:	6822      	ldr	r2, [r4, #0]
 800391c:	429a      	cmp	r2, r3
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 800391e:	bf04      	itt	eq
 8003920:	f503 7380 	addeq.w	r3, r3, #256	; 0x100
 8003924:	6063      	streq	r3, [r4, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8003926:	f894 3098 	ldrb.w	r3, [r4, #152]	; 0x98
 800392a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800392e:	b923      	cbnz	r3, 800393a <HAL_FDCAN_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8003930:	4620      	mov	r0, r4
    hfdcan->Lock = HAL_UNLOCKED;
 8003932:	f884 2099 	strb.w	r2, [r4, #153]	; 0x99
    HAL_FDCAN_MspInit(hfdcan);
 8003936:	f7fd fea5 	bl	8001684 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800393a:	6822      	ldr	r2, [r4, #0]
 800393c:	6993      	ldr	r3, [r2, #24]
 800393e:	f023 0310 	bic.w	r3, r3, #16
 8003942:	6193      	str	r3, [r2, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003944:	f7ff f812 	bl	800296c <HAL_GetTick>
 8003948:	4605      	mov	r5, r0

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800394a:	6823      	ldr	r3, [r4, #0]
 800394c:	699a      	ldr	r2, [r3, #24]
 800394e:	0711      	lsls	r1, r2, #28
 8003950:	f100 8189 	bmi.w	8003c66 <HAL_FDCAN_Init+0x366>
      return HAL_ERROR;
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003954:	699a      	ldr	r2, [r3, #24]
 8003956:	f042 0201 	orr.w	r2, r2, #1
 800395a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800395c:	f7ff f806 	bl	800296c <HAL_GetTick>
 8003960:	4605      	mov	r5, r0

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003962:	6823      	ldr	r3, [r4, #0]
 8003964:	699a      	ldr	r2, [r3, #24]
 8003966:	07d2      	lsls	r2, r2, #31
 8003968:	f140 818e 	bpl.w	8003c88 <HAL_FDCAN_Init+0x388>
      return HAL_ERROR;
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800396c:	699a      	ldr	r2, [r3, #24]
 800396e:	f042 0202 	orr.w	r2, r2, #2
 8003972:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8003974:	7c22      	ldrb	r2, [r4, #16]
 8003976:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003978:	699a      	ldr	r2, [r3, #24]
 800397a:	bf0c      	ite	eq
 800397c:	f022 0240 	biceq.w	r2, r2, #64	; 0x40
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003980:	f042 0240 	orrne.w	r2, r2, #64	; 0x40
 8003984:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8003986:	7c62      	ldrb	r2, [r4, #17]
 8003988:	2a01      	cmp	r2, #1
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800398a:	699a      	ldr	r2, [r3, #24]
 800398c:	bf0c      	ite	eq
 800398e:	f442 4280 	orreq.w	r2, r2, #16384	; 0x4000
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003992:	f422 4280 	bicne.w	r2, r2, #16384	; 0x4000
 8003996:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8003998:	7ca2      	ldrb	r2, [r4, #18]
 800399a:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800399c:	699a      	ldr	r2, [r3, #24]
 800399e:	bf0c      	ite	eq
 80039a0:	f422 5280 	biceq.w	r2, r2, #4096	; 0x1000
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80039a4:	f442 5280 	orrne.w	r2, r2, #4096	; 0x1000
 80039a8:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80039aa:	699a      	ldr	r2, [r3, #24]
 80039ac:	68a0      	ldr	r0, [r4, #8]
 80039ae:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80039b2:	4302      	orrs	r2, r0
 80039b4:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80039b6:	699a      	ldr	r2, [r3, #24]
 80039b8:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80039bc:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80039be:	691a      	ldr	r2, [r3, #16]
 80039c0:	f022 0210 	bic.w	r2, r2, #16
 80039c4:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80039c6:	68e2      	ldr	r2, [r4, #12]
 80039c8:	2a01      	cmp	r2, #1
 80039ca:	f040 8164 	bne.w	8003c96 <HAL_FDCAN_Init+0x396>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80039ce:	699a      	ldr	r2, [r3, #24]
 80039d0:	f042 0204 	orr.w	r2, r2, #4
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80039d4:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80039d6:	69a2      	ldr	r2, [r4, #24]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80039d8:	f5b0 7f40 	cmp.w	r0, #768	; 0x300
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80039dc:	f102 31ff 	add.w	r1, r2, #4294967295
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80039e0:	69e2      	ldr	r2, [r4, #28]
 80039e2:	f102 32ff 	add.w	r2, r2, #4294967295
 80039e6:	ea4f 2202 	mov.w	r2, r2, lsl #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80039ea:	ea42 6241 	orr.w	r2, r2, r1, lsl #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80039ee:	6a21      	ldr	r1, [r4, #32]
 80039f0:	f101 31ff 	add.w	r1, r1, #4294967295
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80039f4:	ea42 0201 	orr.w	r2, r2, r1
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80039f8:	6961      	ldr	r1, [r4, #20]
 80039fa:	f101 31ff 	add.w	r1, r1, #4294967295
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80039fe:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003a02:	61da      	str	r2, [r3, #28]
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8003a04:	d10e      	bne.n	8003a24 <HAL_FDCAN_Init+0x124>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8003a06:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003a08:	1e51      	subs	r1, r2, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8003a0a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003a0c:	3a01      	subs	r2, #1
 8003a0e:	0112      	lsls	r2, r2, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8003a10:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8003a14:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8003a16:	3901      	subs	r1, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8003a18:	430a      	orrs	r2, r1
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8003a1a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003a1c:	3901      	subs	r1, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8003a1e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8003a22:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8003a24:	6e25      	ldr	r5, [r4, #96]	; 0x60
 8003a26:	b12d      	cbz	r5, 8003a34 <HAL_FDCAN_Init+0x134>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8003a28:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8003a2c:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8003a2e:	430a      	orrs	r2, r1
 8003a30:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8003a34:	f8d4 a05c 	ldr.w	sl, [r4, #92]	; 0x5c
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8003a38:	f8d4 b068 	ldr.w	fp, [r4, #104]	; 0x68
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8003a3c:	eb15 0f0a 	cmn.w	r5, sl
 8003a40:	d00b      	beq.n	8003a5a <HAL_FDCAN_Init+0x15a>
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8003a42:	a918      	add	r1, sp, #96	; 0x60
 8003a44:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003a48:	eb01 018b 	add.w	r1, r1, fp, lsl #2
 8003a4c:	f022 0207 	bic.w	r2, r2, #7
 8003a50:	f851 1c4c 	ldr.w	r1, [r1, #-76]
 8003a54:	430a      	orrs	r2, r1
 8003a56:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8003a5a:	e9d4 7210 	ldrd	r7, r2, [r4, #64]	; 0x40
 8003a5e:	9203      	str	r2, [sp, #12]
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8003a60:	b167      	cbz	r7, 8003a7c <HAL_FDCAN_Init+0x17c>
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8003a62:	a818      	add	r0, sp, #96	; 0x60
 8003a64:	9903      	ldr	r1, [sp, #12]
 8003a66:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8003a6a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8003a6e:	f022 0207 	bic.w	r2, r2, #7
 8003a72:	f851 1c4c 	ldr.w	r1, [r1, #-76]
 8003a76:	430a      	orrs	r2, r1
 8003a78:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8003a7c:	e9d4 6c12 	ldrd	r6, ip, [r4, #72]	; 0x48
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8003a80:	b166      	cbz	r6, 8003a9c <HAL_FDCAN_Init+0x19c>
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8003a82:	a918      	add	r1, sp, #96	; 0x60
 8003a84:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8003a88:	eb01 018c 	add.w	r1, r1, ip, lsl #2
 8003a8c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003a90:	f851 1c4c 	ldr.w	r1, [r1, #-76]
 8003a94:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 8003a98:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8003a9c:	6d22      	ldr	r2, [r4, #80]	; 0x50
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8003a9e:	f8d4 9054 	ldr.w	r9, [r4, #84]	; 0x54
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8003aa2:	9202      	str	r2, [sp, #8]
 8003aa4:	b162      	cbz	r2, 8003ac0 <HAL_FDCAN_Init+0x1c0>
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8003aa6:	a918      	add	r1, sp, #96	; 0x60
 8003aa8:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8003aac:	eb01 0189 	add.w	r1, r1, r9, lsl #2
 8003ab0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003ab4:	f851 1c4c 	ldr.w	r1, [r1, #-76]
 8003ab8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003abc:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8003ac0:	4a5b      	ldr	r2, [pc, #364]	; (8003c30 <HAL_FDCAN_Init+0x330>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d104      	bne.n	8003ad0 <HAL_FDCAN_Init+0x1d0>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8003ac6:	6861      	ldr	r1, [r4, #4]
 8003ac8:	688a      	ldr	r2, [r1, #8]
 8003aca:	f022 0203 	bic.w	r2, r2, #3
 8003ace:	608a      	str	r2, [r1, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8003ad0:	2200      	movs	r2, #0
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8003ad2:	4858      	ldr	r0, [pc, #352]	; (8003c34 <HAL_FDCAN_Init+0x334>)
  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8003ad4:	f8d4 803c 	ldr.w	r8, [r4, #60]	; 0x3c
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003ad8:	f8c4 209c 	str.w	r2, [r4, #156]	; 0x9c
  hfdcan->LatestTxFifoQRequest = 0U;
 8003adc:	f8c4 2094 	str.w	r2, [r4, #148]	; 0x94
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8003ae0:	f04f 0201 	mov.w	r2, #1
 8003ae4:	f884 2098 	strb.w	r2, [r4, #152]	; 0x98
  StartAddress = hfdcan->Init.MessageRAMOffset;
 8003ae8:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8003aea:	9200      	str	r2, [sp, #0]
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8003aec:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8003af0:	9900      	ldr	r1, [sp, #0]
 8003af2:	4002      	ands	r2, r0
 8003af4:	ea42 0281 	orr.w	r2, r2, r1, lsl #2
 8003af8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8003afc:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8003b00:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003b02:	f421 017f 	bic.w	r1, r1, #16711680	; 0xff0000
 8003b06:	9201      	str	r2, [sp, #4]
 8003b08:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8003b0c:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8003b10:	9900      	ldr	r1, [sp, #0]
 8003b12:	eb01 0e02 	add.w	lr, r1, r2
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8003b16:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8003b1a:	9a03      	ldr	r2, [sp, #12]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8003b1c:	4001      	ands	r1, r0
 8003b1e:	ea41 018e 	orr.w	r1, r1, lr, lsl #2
 8003b22:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8003b26:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 8003b2a:	f421 01fe 	bic.w	r1, r1, #8323072	; 0x7f0000
 8003b2e:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8003b32:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8003b36:	eb0e 0148 	add.w	r1, lr, r8, lsl #1
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8003b3a:	f8d3 e0a0 	ldr.w	lr, [r3, #160]	; 0xa0
 8003b3e:	ea0e 0e00 	and.w	lr, lr, r0
 8003b42:	ea4e 0e81 	orr.w	lr, lr, r1, lsl #2
 8003b46:	f8c3 e0a0 	str.w	lr, [r3, #160]	; 0xa0
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8003b4a:	f8d3 e0a0 	ldr.w	lr, [r3, #160]	; 0xa0
 8003b4e:	f42e 0efe 	bic.w	lr, lr, #8323072	; 0x7f0000
 8003b52:	ea4e 4e07 	orr.w	lr, lr, r7, lsl #16
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8003b56:	4357      	muls	r7, r2
  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8003b58:	9a02      	ldr	r2, [sp, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8003b5a:	f8c3 e0a0 	str.w	lr, [r3, #160]	; 0xa0
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8003b5e:	4439      	add	r1, r7
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8003b60:	f8d3 e0b0 	ldr.w	lr, [r3, #176]	; 0xb0
 8003b64:	ea0e 0e00 	and.w	lr, lr, r0
 8003b68:	ea4e 0e81 	orr.w	lr, lr, r1, lsl #2
 8003b6c:	f8c3 e0b0 	str.w	lr, [r3, #176]	; 0xb0
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8003b70:	f8d3 e0b0 	ldr.w	lr, [r3, #176]	; 0xb0
 8003b74:	f42e 0efe 	bic.w	lr, lr, #8323072	; 0x7f0000
 8003b78:	ea4e 4e06 	orr.w	lr, lr, r6, lsl #16
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8003b7c:	fb0c f606 	mul.w	r6, ip, r6
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8003b80:	fb09 fc02 	mul.w	ip, r9, r2
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8003b84:	f8c3 e0b0 	str.w	lr, [r3, #176]	; 0xb0
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8003b88:	4431      	add	r1, r6
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8003b8a:	f8d3 e0ac 	ldr.w	lr, [r3, #172]	; 0xac
 8003b8e:	ea0e 0e00 	and.w	lr, lr, r0
 8003b92:	ea4e 0e81 	orr.w	lr, lr, r1, lsl #2
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8003b96:	4461      	add	r1, ip
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8003b98:	f8c3 e0ac 	str.w	lr, [r3, #172]	; 0xac
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8003b9c:	f8d3 e0f0 	ldr.w	lr, [r3, #240]	; 0xf0
 8003ba0:	ea0e 0e00 	and.w	lr, lr, r0
 8003ba4:	ea4e 0e81 	orr.w	lr, lr, r1, lsl #2
 8003ba8:	f8c3 e0f0 	str.w	lr, [r3, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8003bac:	f8d3 e0f0 	ldr.w	lr, [r3, #240]	; 0xf0
 8003bb0:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8003bb4:	f42e 1e7c 	bic.w	lr, lr, #4128768	; 0x3f0000

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8003bb8:	9a01      	ldr	r2, [sp, #4]
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8003bba:	eb01 0149 	add.w	r1, r1, r9, lsl #1
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8003bbe:	ea4e 4e09 	orr.w	lr, lr, r9, lsl #16
 8003bc2:	f8c3 e0f0 	str.w	lr, [r3, #240]	; 0xf0
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8003bc6:	f8d3 e0c0 	ldr.w	lr, [r3, #192]	; 0xc0
 8003bca:	ea0e 0000 	and.w	r0, lr, r0
 8003bce:	ea40 0181 	orr.w	r1, r0, r1, lsl #2
 8003bd2:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8003bd6:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8003bda:	f421 117c 	bic.w	r1, r1, #4128768	; 0x3f0000
 8003bde:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8003be2:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8003be6:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8003bea:	f021 517c 	bic.w	r1, r1, #1056964608	; 0x3f000000
 8003bee:	ea41 6105 	orr.w	r1, r1, r5, lsl #24
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8003bf2:	fb0b f505 	mul.w	r5, fp, r5
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8003bf6:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8003bfa:	9b00      	ldr	r3, [sp, #0]
 8003bfc:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 8003c00:	f503 532c 	add.w	r3, r3, #11008	; 0x2b00
 8003c04:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8003c06:	eb03 0282 	add.w	r2, r3, r2, lsl #2
  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8003c0a:	66e3      	str	r3, [r4, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8003c0c:	6722      	str	r2, [r4, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8003c0e:	eb02 02c8 	add.w	r2, r2, r8, lsl #3
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8003c12:	eb02 0787 	add.w	r7, r2, r7, lsl #2
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8003c16:	6762      	str	r2, [r4, #116]	; 0x74

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8003c18:	4a07      	ldr	r2, [pc, #28]	; (8003c38 <HAL_FDCAN_Init+0x338>)
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8003c1a:	eb07 0686 	add.w	r6, r7, r6, lsl #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8003c1e:	67a7      	str	r7, [r4, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8003c20:	67e6      	str	r6, [r4, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8003c22:	eb06 068c 	add.w	r6, r6, ip, lsl #2
 8003c26:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
 8003c2a:	e007      	b.n	8003c3c <HAL_FDCAN_Init+0x33c>
 8003c2c:	08016088 	.word	0x08016088
 8003c30:	4000a000 	.word	0x4000a000
 8003c34:	ffff0003 	.word	0xffff0003
 8003c38:	4000d3fc 	.word	0x4000d3fc
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8003c3c:	eb06 06c9 	add.w	r6, r6, r9, lsl #3
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8003c40:	fb0b f90a 	mul.w	r9, fp, sl
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8003c44:	f8c4 6084 	str.w	r6, [r4, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8003c48:	eb06 0689 	add.w	r6, r6, r9, lsl #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8003c4c:	eb06 0585 	add.w	r5, r6, r5, lsl #2
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8003c50:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8003c54:	4295      	cmp	r5, r2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8003c56:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8003c5a:	d933      	bls.n	8003cc4 <HAL_FDCAN_Init+0x3c4>
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003c5c:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 8003c60:	f043 0320 	orr.w	r3, r3, #32
 8003c64:	e009      	b.n	8003c7a <HAL_FDCAN_Init+0x37a>
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003c66:	f7fe fe81 	bl	800296c <HAL_GetTick>
 8003c6a:	1b40      	subs	r0, r0, r5
 8003c6c:	280a      	cmp	r0, #10
 8003c6e:	f67f ae6c 	bls.w	800394a <HAL_FDCAN_Init+0x4a>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003c72:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 8003c76:	f043 0301 	orr.w	r3, r3, #1
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003c7a:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003c7e:	2303      	movs	r3, #3
 8003c80:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
    return HAL_ERROR;
 8003c84:	2001      	movs	r0, #1
 8003c86:	e022      	b.n	8003cce <HAL_FDCAN_Init+0x3ce>
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003c88:	f7fe fe70 	bl	800296c <HAL_GetTick>
 8003c8c:	1b40      	subs	r0, r0, r5
 8003c8e:	280a      	cmp	r0, #10
 8003c90:	f67f ae67 	bls.w	8003962 <HAL_FDCAN_Init+0x62>
 8003c94:	e7ed      	b.n	8003c72 <HAL_FDCAN_Init+0x372>
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8003c96:	2a00      	cmp	r2, #0
 8003c98:	f43f ae9d 	beq.w	80039d6 <HAL_FDCAN_Init+0xd6>
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8003c9c:	2a02      	cmp	r2, #2
 8003c9e:	d00a      	beq.n	8003cb6 <HAL_FDCAN_Init+0x3b6>
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8003ca0:	6999      	ldr	r1, [r3, #24]
      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8003ca2:	2a03      	cmp	r2, #3
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8003ca4:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8003ca8:	6199      	str	r1, [r3, #24]
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003caa:	6919      	ldr	r1, [r3, #16]
 8003cac:	f041 0110 	orr.w	r1, r1, #16
 8003cb0:	6119      	str	r1, [r3, #16]
      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8003cb2:	f47f ae90 	bne.w	80039d6 <HAL_FDCAN_Init+0xd6>
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003cb6:	699a      	ldr	r2, [r3, #24]
 8003cb8:	f042 0220 	orr.w	r2, r2, #32
 8003cbc:	e68a      	b.n	80039d4 <HAL_FDCAN_Init+0xd4>
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	f843 2b04 	str.w	r2, [r3], #4
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8003cc4:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d3f8      	bcc.n	8003cbe <HAL_FDCAN_Init+0x3be>
    }
  }

  /* Return function status */
  return HAL_OK;
 8003ccc:	2000      	movs	r0, #0
}
 8003cce:	b019      	add	sp, #100	; 0x64
 8003cd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003cd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003cd4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 8003cd8:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cda:	f8df 91cc 	ldr.w	r9, [pc, #460]	; 8003ea8 <HAL_GPIO_Init+0x1d4>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003cde:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003ce2:	680a      	ldr	r2, [r1, #0]
 8003ce4:	fa32 f503 	lsrs.w	r5, r2, r3
 8003ce8:	d102      	bne.n	8003cf0 <HAL_GPIO_Init+0x1c>
      }
    }

    position++;
  }
}
 8003cea:	b003      	add	sp, #12
 8003cec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003cf0:	f04f 0e01 	mov.w	lr, #1
 8003cf4:	fa0e fe03 	lsl.w	lr, lr, r3
    if (iocurrent != 0x00U)
 8003cf8:	ea1e 0202 	ands.w	r2, lr, r2
 8003cfc:	f000 80bd 	beq.w	8003e7a <HAL_GPIO_Init+0x1a6>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003d00:	684e      	ldr	r6, [r1, #4]
 8003d02:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003d06:	f04f 0c03 	mov.w	ip, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003d0a:	f006 0503 	and.w	r5, r6, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003d0e:	fa0c fc08 	lsl.w	ip, ip, r8
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003d12:	1e6f      	subs	r7, r5, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003d14:	ea6f 0c0c 	mvn.w	ip, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003d18:	2f01      	cmp	r7, #1
 8003d1a:	d834      	bhi.n	8003d86 <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 8003d1c:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003d1e:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003d22:	68cf      	ldr	r7, [r1, #12]
 8003d24:	fa07 f708 	lsl.w	r7, r7, r8
 8003d28:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8003d2c:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8003d2e:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003d30:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d34:	f3c6 1700 	ubfx	r7, r6, #4, #1
 8003d38:	409f      	lsls	r7, r3
 8003d3a:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8003d3e:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8003d40:	68c7      	ldr	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d42:	2d02      	cmp	r5, #2
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003d44:	ea07 0e0c 	and.w	lr, r7, ip
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d48:	688f      	ldr	r7, [r1, #8]
 8003d4a:	fa07 f708 	lsl.w	r7, r7, r8
 8003d4e:	ea47 070e 	orr.w	r7, r7, lr
      GPIOx->PUPDR = temp;
 8003d52:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d54:	d119      	bne.n	8003d8a <HAL_GPIO_Init+0xb6>
        temp = GPIOx->AFR[position >> 3U];
 8003d56:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003d5a:	f003 0b07 	and.w	fp, r3, #7
 8003d5e:	f04f 0e0f 	mov.w	lr, #15
 8003d62:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 8003d66:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3U];
 8003d6a:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003d6e:	fa0e fe0b 	lsl.w	lr, lr, fp
 8003d72:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003d76:	690f      	ldr	r7, [r1, #16]
 8003d78:	fa07 f70b 	lsl.w	r7, r7, fp
 8003d7c:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 8003d80:	f8ca 7020 	str.w	r7, [sl, #32]
 8003d84:	e001      	b.n	8003d8a <HAL_GPIO_Init+0xb6>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d86:	2d03      	cmp	r5, #3
 8003d88:	d1da      	bne.n	8003d40 <HAL_GPIO_Init+0x6c>
      temp = GPIOx->MODER;
 8003d8a:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003d8c:	fa05 f508 	lsl.w	r5, r5, r8
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003d90:	f416 3f40 	tst.w	r6, #196608	; 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003d94:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003d98:	ea47 0705 	orr.w	r7, r7, r5
      GPIOx->MODER = temp;
 8003d9c:	6007      	str	r7, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003d9e:	d06c      	beq.n	8003e7a <HAL_GPIO_Init+0x1a6>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003da0:	f8d9 50f4 	ldr.w	r5, [r9, #244]	; 0xf4
 8003da4:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003da8:	f003 0c03 	and.w	ip, r3, #3
 8003dac:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003db0:	f045 0502 	orr.w	r5, r5, #2
 8003db4:	f107 47b0 	add.w	r7, r7, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003db8:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003dbc:	f8c9 50f4 	str.w	r5, [r9, #244]	; 0xf4
 8003dc0:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8003dc4:	f8d9 50f4 	ldr.w	r5, [r9, #244]	; 0xf4
 8003dc8:	f005 0502 	and.w	r5, r5, #2
 8003dcc:	9501      	str	r5, [sp, #4]
 8003dce:	9d01      	ldr	r5, [sp, #4]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003dd0:	fa0e f50c 	lsl.w	r5, lr, ip
        temp = SYSCFG->EXTICR[position >> 2U];
 8003dd4:	f8d7 8008 	ldr.w	r8, [r7, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003dd8:	ea28 0e05 	bic.w	lr, r8, r5
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003ddc:	4d31      	ldr	r5, [pc, #196]	; (8003ea4 <HAL_GPIO_Init+0x1d0>)
 8003dde:	42a8      	cmp	r0, r5
 8003de0:	d04d      	beq.n	8003e7e <HAL_GPIO_Init+0x1aa>
 8003de2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003de6:	42a8      	cmp	r0, r5
 8003de8:	d04b      	beq.n	8003e82 <HAL_GPIO_Init+0x1ae>
 8003dea:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003dee:	42a8      	cmp	r0, r5
 8003df0:	d049      	beq.n	8003e86 <HAL_GPIO_Init+0x1b2>
 8003df2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003df6:	42a8      	cmp	r0, r5
 8003df8:	d047      	beq.n	8003e8a <HAL_GPIO_Init+0x1b6>
 8003dfa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003dfe:	42a8      	cmp	r0, r5
 8003e00:	d045      	beq.n	8003e8e <HAL_GPIO_Init+0x1ba>
 8003e02:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003e06:	42a8      	cmp	r0, r5
 8003e08:	d043      	beq.n	8003e92 <HAL_GPIO_Init+0x1be>
 8003e0a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003e0e:	42a8      	cmp	r0, r5
 8003e10:	d041      	beq.n	8003e96 <HAL_GPIO_Init+0x1c2>
 8003e12:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003e16:	42a8      	cmp	r0, r5
 8003e18:	d03f      	beq.n	8003e9a <HAL_GPIO_Init+0x1c6>
 8003e1a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003e1e:	42a8      	cmp	r0, r5
 8003e20:	d03d      	beq.n	8003e9e <HAL_GPIO_Init+0x1ca>
 8003e22:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003e26:	42a8      	cmp	r0, r5
 8003e28:	bf0c      	ite	eq
 8003e2a:	2509      	moveq	r5, #9
 8003e2c:	250a      	movne	r5, #10
 8003e2e:	fa05 f50c 	lsl.w	r5, r5, ip
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003e32:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003e36:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003e3a:	60bd      	str	r5, [r7, #8]
        temp &= ~(iocurrent);
 8003e3c:	ea6f 0702 	mvn.w	r7, r2
        temp = EXTI->RTSR1;
 8003e40:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8003e42:	bf0c      	ite	eq
 8003e44:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8003e46:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003e48:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
        EXTI->RTSR1 = temp;
 8003e4c:	6025      	str	r5, [r4, #0]
        temp = EXTI->FTSR1;
 8003e4e:	6865      	ldr	r5, [r4, #4]
        temp &= ~(iocurrent);
 8003e50:	bf0c      	ite	eq
 8003e52:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8003e54:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003e56:	f416 3f00 	tst.w	r6, #131072	; 0x20000
        EXTI->FTSR1 = temp;
 8003e5a:	6065      	str	r5, [r4, #4]
        temp = EXTI_CurrentCPU->EMR1;
 8003e5c:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
        temp &= ~(iocurrent);
 8003e60:	bf0c      	ite	eq
 8003e62:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8003e64:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003e66:	03f6      	lsls	r6, r6, #15
        EXTI_CurrentCPU->EMR1 = temp;
 8003e68:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
        temp = EXTI_CurrentCPU->IMR1;
 8003e6c:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
        temp &= ~(iocurrent);
 8003e70:	bf54      	ite	pl
 8003e72:	403d      	andpl	r5, r7
          temp |= iocurrent;
 8003e74:	4315      	orrmi	r5, r2
        EXTI_CurrentCPU->IMR1 = temp;
 8003e76:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
    position++;
 8003e7a:	3301      	adds	r3, #1
 8003e7c:	e731      	b.n	8003ce2 <HAL_GPIO_Init+0xe>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003e7e:	2500      	movs	r5, #0
 8003e80:	e7d5      	b.n	8003e2e <HAL_GPIO_Init+0x15a>
 8003e82:	2501      	movs	r5, #1
 8003e84:	e7d3      	b.n	8003e2e <HAL_GPIO_Init+0x15a>
 8003e86:	2502      	movs	r5, #2
 8003e88:	e7d1      	b.n	8003e2e <HAL_GPIO_Init+0x15a>
 8003e8a:	2503      	movs	r5, #3
 8003e8c:	e7cf      	b.n	8003e2e <HAL_GPIO_Init+0x15a>
 8003e8e:	2504      	movs	r5, #4
 8003e90:	e7cd      	b.n	8003e2e <HAL_GPIO_Init+0x15a>
 8003e92:	2505      	movs	r5, #5
 8003e94:	e7cb      	b.n	8003e2e <HAL_GPIO_Init+0x15a>
 8003e96:	2506      	movs	r5, #6
 8003e98:	e7c9      	b.n	8003e2e <HAL_GPIO_Init+0x15a>
 8003e9a:	2507      	movs	r5, #7
 8003e9c:	e7c7      	b.n	8003e2e <HAL_GPIO_Init+0x15a>
 8003e9e:	2508      	movs	r5, #8
 8003ea0:	e7c5      	b.n	8003e2e <HAL_GPIO_Init+0x15a>
 8003ea2:	bf00      	nop
 8003ea4:	58020000 	.word	0x58020000
 8003ea8:	58024400 	.word	0x58024400

08003eac <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003eac:	b10a      	cbz	r2, 8003eb2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003eae:	6181      	str	r1, [r0, #24]
  }
}
 8003eb0:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003eb2:	0409      	lsls	r1, r1, #16
 8003eb4:	e7fb      	b.n	8003eae <HAL_GPIO_WritePin+0x2>

08003eb6 <LTDC_SetConfig>:
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003eb6:	01d2      	lsls	r2, r2, #7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003eb8:	6800      	ldr	r0, [r0, #0]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003eba:	f8d1 c000 	ldr.w	ip, [r1]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003ebe:	3284      	adds	r2, #132	; 0x84
 8003ec0:	1883      	adds	r3, r0, r2
{
 8003ec2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003ec6:	68c6      	ldr	r6, [r0, #12]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003ec8:	f10c 0701 	add.w	r7, ip, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003ecc:	685d      	ldr	r5, [r3, #4]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8003ece:	f04f 0e00 	mov.w	lr, #0
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003ed2:	684c      	ldr	r4, [r1, #4]
 8003ed4:	f3c6 460b 	ubfx	r6, r6, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003ed8:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8003edc:	f8d1 9018 	ldr.w	r9, [r1, #24]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003ee0:	4426      	add	r6, r4
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003ee2:	605d      	str	r5, [r3, #4]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003ee4:	68c5      	ldr	r5, [r0, #12]
 8003ee6:	f3c5 450b 	ubfx	r5, r5, #16, #12
 8003eea:	443d      	add	r5, r7
 8003eec:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8003ef0:	68ce      	ldr	r6, [r1, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003ef2:	605d      	str	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8003ef4:	68c5      	ldr	r5, [r0, #12]
 8003ef6:	f3c5 050a 	ubfx	r5, r5, #0, #11
 8003efa:	442e      	add	r6, r5
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8003efc:	689d      	ldr	r5, [r3, #8]
 8003efe:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
 8003f02:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8003f04:	688d      	ldr	r5, [r1, #8]
 8003f06:	68c7      	ldr	r7, [r0, #12]
 8003f08:	3501      	adds	r5, #1
 8003f0a:	f3c7 070a 	ubfx	r7, r7, #0, #11
 8003f0e:	443d      	add	r5, r7
 8003f10:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8003f14:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8003f16:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8003f18:	691d      	ldr	r5, [r3, #16]
 8003f1a:	f025 0507 	bic.w	r5, r5, #7
 8003f1e:	611d      	str	r5, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8003f20:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8003f22:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8003f24:	f891 7032 	ldrb.w	r7, [r1, #50]	; 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8003f28:	f891 8031 	ldrb.w	r8, [r1, #49]	; 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8003f2c:	f8c3 e018 	str.w	lr, [r3, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8003f30:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
 8003f34:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 8003f38:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 8003f3c:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
 8003f40:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8003f42:	695d      	ldr	r5, [r3, #20]
 8003f44:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 8003f48:	615d      	str	r5, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8003f4a:	694d      	ldr	r5, [r1, #20]
 8003f4c:	615d      	str	r5, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8003f4e:	69dd      	ldr	r5, [r3, #28]
 8003f50:	f425 65e0 	bic.w	r5, r5, #1792	; 0x700
 8003f54:	f025 0507 	bic.w	r5, r5, #7
 8003f58:	61dd      	str	r5, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8003f5a:	e9d1 5707 	ldrd	r5, r7, [r1, #28]
 8003f5e:	433d      	orrs	r5, r7
 8003f60:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8003f62:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8003f64:	6a4d      	ldr	r5, [r1, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8003f66:	f8c3 e028 	str.w	lr, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8003f6a:	629d      	str	r5, [r3, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8003f6c:	b31e      	cbz	r6, 8003fb6 <LTDC_SetConfig+0x100>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8003f6e:	2e01      	cmp	r6, #1
 8003f70:	d023      	beq.n	8003fba <LTDC_SetConfig+0x104>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003f72:	1eb5      	subs	r5, r6, #2
 8003f74:	2d02      	cmp	r5, #2
 8003f76:	d922      	bls.n	8003fbe <LTDC_SetConfig+0x108>
  {
    tmp = 2U;
  }
  else
  {
    tmp = 1U;
 8003f78:	2e07      	cmp	r6, #7
 8003f7a:	bf0c      	ite	eq
 8003f7c:	2502      	moveq	r5, #2
 8003f7e:	2501      	movne	r5, #1
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8003f80:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8003f82:	eba4 040c 	sub.w	r4, r4, ip
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8003f86:	f006 26e0 	and.w	r6, r6, #3758153728	; 0xe000e000
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8003f8a:	436c      	muls	r4, r5
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8003f8c:	62de      	str	r6, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8003f8e:	3407      	adds	r4, #7
 8003f90:	6a8e      	ldr	r6, [r1, #40]	; 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8003f92:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8003f94:	436e      	muls	r6, r5
 8003f96:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8003f9a:	62dc      	str	r4, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8003f9c:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8003f9e:	f424 64ff 	bic.w	r4, r4, #2040	; 0x7f8
 8003fa2:	f024 0407 	bic.w	r4, r4, #7
 8003fa6:	631c      	str	r4, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8003fa8:	6319      	str	r1, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8003faa:	5883      	ldr	r3, [r0, r2]
 8003fac:	f043 0301 	orr.w	r3, r3, #1
 8003fb0:	5083      	str	r3, [r0, r2]
}
 8003fb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4U;
 8003fb6:	2504      	movs	r5, #4
 8003fb8:	e7e2      	b.n	8003f80 <LTDC_SetConfig+0xca>
    tmp = 3U;
 8003fba:	2503      	movs	r5, #3
 8003fbc:	e7e0      	b.n	8003f80 <LTDC_SetConfig+0xca>
    tmp = 2U;
 8003fbe:	2502      	movs	r5, #2
 8003fc0:	e7de      	b.n	8003f80 <LTDC_SetConfig+0xca>
	...

08003fc4 <HAL_LTDC_Init>:
{
 8003fc4:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 8003fc6:	4604      	mov	r4, r0
 8003fc8:	2800      	cmp	r0, #0
 8003fca:	d063      	beq.n	8004094 <HAL_LTDC_Init+0xd0>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8003fcc:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8003fd0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003fd4:	b91b      	cbnz	r3, 8003fde <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 8003fd6:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 8003fda:	f7fd fbed 	bl	80017b8 <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003fde:	2302      	movs	r3, #2
 8003fe0:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003fe4:	6823      	ldr	r3, [r4, #0]
 8003fe6:	699a      	ldr	r2, [r3, #24]
 8003fe8:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8003fec:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003fee:	6999      	ldr	r1, [r3, #24]
 8003ff0:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 8003ff4:	4302      	orrs	r2, r0
 8003ff6:	68e0      	ldr	r0, [r4, #12]
 8003ff8:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003ffa:	6920      	ldr	r0, [r4, #16]
 8003ffc:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8003ffe:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004000:	430a      	orrs	r2, r1
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004002:	4925      	ldr	r1, [pc, #148]	; (8004098 <HAL_LTDC_Init+0xd4>)
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004004:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004006:	689a      	ldr	r2, [r3, #8]
 8004008:	400a      	ands	r2, r1
 800400a:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800400c:	689a      	ldr	r2, [r3, #8]
 800400e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8004012:	69a0      	ldr	r0, [r4, #24]
 8004014:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8004016:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004018:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800401a:	68da      	ldr	r2, [r3, #12]
 800401c:	400a      	ands	r2, r1
 800401e:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004020:	68da      	ldr	r2, [r3, #12]
 8004022:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8004026:	6a20      	ldr	r0, [r4, #32]
 8004028:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800402a:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800402c:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800402e:	691a      	ldr	r2, [r3, #16]
 8004030:	400a      	ands	r2, r1
 8004032:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004034:	691a      	ldr	r2, [r3, #16]
 8004036:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800403a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800403c:	4302      	orrs	r2, r0
 800403e:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004040:	695a      	ldr	r2, [r3, #20]
 8004042:	4011      	ands	r1, r2
 8004044:	6159      	str	r1, [r3, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8004046:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8004048:	695a      	ldr	r2, [r3, #20]
 800404a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800404e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004050:	430a      	orrs	r2, r1
 8004052:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004054:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8004056:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800405a:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800405e:	f894 5035 	ldrb.w	r5, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004062:	62d9      	str	r1, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004064:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004066:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 800406a:	430a      	orrs	r2, r1
 800406c:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8004070:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004074:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004076:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004078:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800407a:	f042 0206 	orr.w	r2, r2, #6
 800407e:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8004080:	699a      	ldr	r2, [r3, #24]
 8004082:	f042 0201 	orr.w	r2, r2, #1
 8004086:	619a      	str	r2, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 8004088:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800408a:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 800408e:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
 8004092:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8004094:	2001      	movs	r0, #1
 8004096:	e7fc      	b.n	8004092 <HAL_LTDC_Init+0xce>
 8004098:	f000f800 	.word	0xf000f800

0800409c <HAL_LTDC_ConfigLayer>:
{
 800409c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hltdc);
 80040a0:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
{
 80040a4:	4606      	mov	r6, r0
 80040a6:	460f      	mov	r7, r1
 80040a8:	4694      	mov	ip, r2
  __HAL_LOCK(hltdc);
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	f04f 0002 	mov.w	r0, #2
 80040b0:	d01f      	beq.n	80040f2 <HAL_LTDC_ConfigLayer+0x56>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80040b2:	2434      	movs	r4, #52	; 0x34
  __HAL_LOCK(hltdc);
 80040b4:	f04f 0801 	mov.w	r8, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80040b8:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80040ba:	f886 00a1 	strb.w	r0, [r6, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80040be:	fb04 6402 	mla	r4, r4, r2, r6
  __HAL_LOCK(hltdc);
 80040c2:	f886 80a0 	strb.w	r8, [r6, #160]	; 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80040c6:	3438      	adds	r4, #56	; 0x38
 80040c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80040ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80040cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80040ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80040d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80040d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80040d4:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80040d6:	4630      	mov	r0, r6
 80040d8:	4662      	mov	r2, ip
 80040da:	4639      	mov	r1, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80040dc:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80040de:	f7ff feea 	bl	8003eb6 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80040e2:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 80040e4:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80040e6:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 80040ea:	f886 80a1 	strb.w	r8, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 80040ee:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
}
 80040f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080040f8 <MMC_ReadExtCSD.constprop.0>:
  * @param  pFieldData: Pointer to the read buffer
  * @param  FieldIndex: Index of the field to be read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
static HAL_StatusTypeDef MMC_ReadExtCSD(MMC_HandleTypeDef *hmmc, uint32_t *pFieldData,
 80040f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040fc:	4604      	mov	r4, r0
 80040fe:	b086      	sub	sp, #24
 8004100:	4691      	mov	r9, r2
 8004102:	460f      	mov	r7, r1
 8004104:	4698      	mov	r8, r3
  /* Initialize data control register */
  hmmc->Instance->DCTRL = 0;

  /* Configure the MMC DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
  config.DataLength    = 512U;
 8004106:	f04f 35ff 	mov.w	r5, #4294967295
  uint32_t tickstart = HAL_GetTick();
 800410a:	f7fe fc2f 	bl	800296c <HAL_GetTick>
  config.DataLength    = 512U;
 800410e:	f44f 7300 	mov.w	r3, #512	; 0x200
  hmmc->ErrorCode = HAL_MMC_ERROR_NONE;
 8004112:	f04f 0a00 	mov.w	sl, #0
  uint32_t tickstart = HAL_GetTick();
 8004116:	4606      	mov	r6, r0
  hmmc->Instance->DCTRL = 0;
 8004118:	6820      	ldr	r0, [r4, #0]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800411a:	f04f 0c90 	mov.w	ip, #144	; 0x90
  hmmc->ErrorCode = HAL_MMC_ERROR_NONE;
 800411e:	f8c4 a034 	str.w	sl, [r4, #52]	; 0x34
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
  config.DPSM          = SDMMC_DPSM_ENABLE;
  (void)SDMMC_ConfigData(hmmc->Instance, &config);
 8004122:	4669      	mov	r1, sp
  hmmc->Instance->DCTRL = 0;
 8004124:	f8c0 a02c 	str.w	sl, [r0, #44]	; 0x2c
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8004128:	f8cd a010 	str.w	sl, [sp, #16]
  config.DataLength    = 512U;
 800412c:	e9cd 5300 	strd	r5, r3, [sp]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8004130:	2302      	movs	r3, #2
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8004132:	2501      	movs	r5, #1
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8004134:	e9cd c302 	strd	ip, r3, [sp, #8]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8004138:	9505      	str	r5, [sp, #20]
  (void)SDMMC_ConfigData(hmmc->Instance, &config);
 800413a:	f003 fe04 	bl	8007d46 <SDMMC_ConfigData>

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdSendEXTCSD(hmmc->Instance, 0);
 800413e:	4651      	mov	r1, sl
 8004140:	6820      	ldr	r0, [r4, #0]
 8004142:	f003 ff4f 	bl	8007fe4 <SDMMC_CmdSendEXTCSD>
  if (errorstate != HAL_MMC_ERROR_NONE)
 8004146:	4682      	mov	sl, r0
 8004148:	b360      	cbz	r0, 80041a4 <MMC_ReadExtCSD.constprop.0+0xac>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 800414a:	6823      	ldr	r3, [r4, #0]
 800414c:	4a30      	ldr	r2, [pc, #192]	; (8004210 <MMC_ReadExtCSD.constprop.0+0x118>)
 800414e:	639a      	str	r2, [r3, #56]	; 0x38
    hmmc->ErrorCode |= errorstate;
 8004150:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8004152:	ea4a 0000 	orr.w	r0, sl, r0
 8004156:	6360      	str	r0, [r4, #52]	; 0x34
    hmmc->State = HAL_MMC_STATE_READY;
    return HAL_ERROR;
 8004158:	4628      	mov	r0, r5
    hmmc->State = HAL_MMC_STATE_READY;
 800415a:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
  __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_DATA_FLAGS);

  hmmc->State = HAL_MMC_STATE_READY;

  return HAL_OK;
}
 800415e:	b006      	add	sp, #24
 8004160:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXFIFOHF))
 8004164:	0418      	lsls	r0, r3, #16
 8004166:	d50c      	bpl.n	8004182 <MMC_ReadExtCSD.constprop.0+0x8a>
        tmp_data = SDMMC_ReadFIFO(hmmc->Instance);
 8004168:	6820      	ldr	r0, [r4, #0]
 800416a:	f003 fdc7 	bl	8007cfc <SDMMC_ReadFIFO>
        if ((i + count) == ((uint32_t)FieldIndex / 4U))
 800416e:	eb0a 0305 	add.w	r3, sl, r5
      for (count = 0U; count < 8U; count++)
 8004172:	3501      	adds	r5, #1
        if ((i + count) == ((uint32_t)FieldIndex / 4U))
 8004174:	4599      	cmp	r9, r3
          *pFieldData = tmp_data;
 8004176:	bf08      	it	eq
 8004178:	6038      	streq	r0, [r7, #0]
      for (count = 0U; count < 8U; count++)
 800417a:	2d08      	cmp	r5, #8
 800417c:	d1f4      	bne.n	8004168 <MMC_ReadExtCSD.constprop.0+0x70>
      i += 8U;
 800417e:	f10a 0a08 	add.w	sl, sl, #8
    if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8004182:	f7fe fbf3 	bl	800296c <HAL_GetTick>
 8004186:	1b80      	subs	r0, r0, r6
 8004188:	4540      	cmp	r0, r8
 800418a:	d30d      	bcc.n	80041a8 <MMC_ReadExtCSD.constprop.0+0xb0>
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 800418c:	6823      	ldr	r3, [r4, #0]
      return HAL_TIMEOUT;
 800418e:	2003      	movs	r0, #3
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8004190:	4a1f      	ldr	r2, [pc, #124]	; (8004210 <MMC_ReadExtCSD.constprop.0+0x118>)
 8004192:	639a      	str	r2, [r3, #56]	; 0x38
      hmmc->ErrorCode |= HAL_MMC_ERROR_TIMEOUT;
 8004194:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004196:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800419a:	6363      	str	r3, [r4, #52]	; 0x34
      hmmc->State = HAL_MMC_STATE_READY;
 800419c:	2301      	movs	r3, #1
 800419e:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
      return HAL_TIMEOUT;
 80041a2:	e7dc      	b.n	800415e <MMC_ReadExtCSD.constprop.0+0x66>
        if ((i + count) == ((uint32_t)FieldIndex / 4U))
 80041a4:	ea4f 0999 	mov.w	r9, r9, lsr #2
  while (!__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 80041a8:	6820      	ldr	r0, [r4, #0]
 80041aa:	6b45      	ldr	r5, [r0, #52]	; 0x34
    if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXFIFOHF))
 80041ac:	6b43      	ldr	r3, [r0, #52]	; 0x34
  while (!__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 80041ae:	f415 7595 	ands.w	r5, r5, #298	; 0x12a
 80041b2:	d0d7      	beq.n	8004164 <MMC_ReadExtCSD.constprop.0+0x6c>
  if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_DTIMEOUT))
 80041b4:	0719      	lsls	r1, r3, #28
 80041b6:	d509      	bpl.n	80041cc <MMC_ReadExtCSD.constprop.0+0xd4>
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 80041b8:	4b15      	ldr	r3, [pc, #84]	; (8004210 <MMC_ReadExtCSD.constprop.0+0x118>)
 80041ba:	6383      	str	r3, [r0, #56]	; 0x38
    hmmc->ErrorCode |= HAL_MMC_ERROR_DATA_TIMEOUT;
 80041bc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80041be:	f043 0308 	orr.w	r3, r3, #8
    hmmc->State = HAL_MMC_STATE_READY;
 80041c2:	2001      	movs	r0, #1
    hmmc->ErrorCode |= HAL_MMC_ERROR_DATA_CRC_FAIL;
 80041c4:	6363      	str	r3, [r4, #52]	; 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 80041c6:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    return HAL_ERROR;
 80041ca:	e7c8      	b.n	800415e <MMC_ReadExtCSD.constprop.0+0x66>
  else if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_DCRCFAIL))
 80041cc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80041ce:	079a      	lsls	r2, r3, #30
 80041d0:	d505      	bpl.n	80041de <MMC_ReadExtCSD.constprop.0+0xe6>
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 80041d2:	4b0f      	ldr	r3, [pc, #60]	; (8004210 <MMC_ReadExtCSD.constprop.0+0x118>)
 80041d4:	6383      	str	r3, [r0, #56]	; 0x38
    hmmc->ErrorCode |= HAL_MMC_ERROR_DATA_CRC_FAIL;
 80041d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80041d8:	f043 0302 	orr.w	r3, r3, #2
 80041dc:	e7f1      	b.n	80041c2 <MMC_ReadExtCSD.constprop.0+0xca>
  else if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR))
 80041de:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80041e0:	069b      	lsls	r3, r3, #26
 80041e2:	d505      	bpl.n	80041f0 <MMC_ReadExtCSD.constprop.0+0xf8>
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 80041e4:	4b0a      	ldr	r3, [pc, #40]	; (8004210 <MMC_ReadExtCSD.constprop.0+0x118>)
 80041e6:	6383      	str	r3, [r0, #56]	; 0x38
    hmmc->ErrorCode |= HAL_MMC_ERROR_RX_OVERRUN;
 80041e8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80041ea:	f043 0320 	orr.w	r3, r3, #32
 80041ee:	e7e8      	b.n	80041c2 <MMC_ReadExtCSD.constprop.0+0xca>
  errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16));
 80041f0:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80041f2:	0409      	lsls	r1, r1, #16
 80041f4:	f003 fedd 	bl	8007fb2 <SDMMC_CmdSendStatus>
  if (errorstate != HAL_MMC_ERROR_NONE)
 80041f8:	b110      	cbz	r0, 8004200 <MMC_ReadExtCSD.constprop.0+0x108>
    hmmc->ErrorCode |= errorstate;
 80041fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80041fc:	4318      	orrs	r0, r3
 80041fe:	6360      	str	r0, [r4, #52]	; 0x34
  __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_DATA_FLAGS);
 8004200:	6823      	ldr	r3, [r4, #0]
  return HAL_OK;
 8004202:	2000      	movs	r0, #0
  __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_DATA_FLAGS);
 8004204:	4a03      	ldr	r2, [pc, #12]	; (8004214 <MMC_ReadExtCSD.constprop.0+0x11c>)
 8004206:	639a      	str	r2, [r3, #56]	; 0x38
  hmmc->State = HAL_MMC_STATE_READY;
 8004208:	2301      	movs	r3, #1
 800420a:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  return HAL_OK;
 800420e:	e7a6      	b.n	800415e <MMC_ReadExtCSD.constprop.0+0x66>
 8004210:	1fe00fff 	.word	0x1fe00fff
 8004214:	18000f3a 	.word	0x18000f3a

08004218 <MMC_PwrClassUpdate.part.0>:
  uint32_t power_class;
  uint32_t supported_pwr_class;

  if ((Wide == SDMMC_BUS_WIDE_8B) || (Wide == SDMMC_BUS_WIDE_4B))
  {
    power_class = 0U; /* Default value after power-on or software reset */
 8004218:	2300      	movs	r3, #0
static uint32_t MMC_PwrClassUpdate(MMC_HandleTypeDef *hmmc, uint32_t Wide, uint32_t Speed)
 800421a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800421c:	460f      	mov	r7, r1
 800421e:	4616      	mov	r6, r2
    power_class = 0U; /* Default value after power-on or software reset */
 8004220:	9301      	str	r3, [sp, #4]

    /* Read the PowerClass field of the Extended CSD register */
    if (MMC_ReadExtCSD(hmmc, &power_class, 187, SDMMC_DATATIMEOUT) != HAL_OK) /* Field POWER_CLASS [187] */
 8004222:	22bb      	movs	r2, #187	; 0xbb
 8004224:	f04f 33ff 	mov.w	r3, #4294967295
 8004228:	a901      	add	r1, sp, #4
static uint32_t MMC_PwrClassUpdate(MMC_HandleTypeDef *hmmc, uint32_t Wide, uint32_t Speed)
 800422a:	4605      	mov	r5, r0
    if (MMC_ReadExtCSD(hmmc, &power_class, 187, SDMMC_DATATIMEOUT) != HAL_OK) /* Field POWER_CLASS [187] */
 800422c:	f7ff ff64 	bl	80040f8 <MMC_ReadExtCSD.constprop.0>
 8004230:	bb80      	cbnz	r0, 8004294 <MMC_PwrClassUpdate.part.0+0x7c>
    {
      errorstate = SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
    }
    else
    {
      power_class = ((power_class >> 24U) & 0x000000FFU);
 8004232:	f89d 3007 	ldrb.w	r3, [sp, #7]
  uint32_t errorstate = HAL_MMC_ERROR_NONE;
 8004236:	4604      	mov	r4, r0
      power_class = ((power_class >> 24U) & 0x000000FFU);
 8004238:	9301      	str	r3, [sp, #4]
    }

    /* Get the supported PowerClass field of the Extended CSD register */
    if (Speed == SDMMC_SPEED_MODE_DDR)
 800423a:	2e04      	cmp	r6, #4
 800423c:	d12d      	bne.n	800429a <MMC_PwrClassUpdate.part.0+0x82>
    {
      /* Field PWR_CL_DDR_52_xxx [238 or 239] */
      supported_pwr_class = ((hmmc->Ext_CSD[(MMC_EXT_CSD_PWR_CL_DDR_52_INDEX / 4)] >> MMC_EXT_CSD_PWR_CL_DDR_52_POS) &
 800423e:	f895 3163 	ldrb.w	r3, [r5, #355]	; 0x163
      /* Field PWR_CL_26_xxx [201 or 203] */
      supported_pwr_class = ((hmmc->Ext_CSD[(MMC_EXT_CSD_PWR_CL_26_INDEX / 4)] >> MMC_EXT_CSD_PWR_CL_26_POS) &
                             0x000000FFU);
    }

    if (errorstate == HAL_MMC_ERROR_NONE)
 8004242:	2c00      	cmp	r4, #0
 8004244:	d13c      	bne.n	80042c0 <MMC_PwrClassUpdate.part.0+0xa8>
    {
      if (Wide == SDMMC_BUS_WIDE_8B)
 8004246:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
      {
        /* Bit [7:4]: power class for 8-bits bus configuration - Bit [3:0]: power class for 4-bits bus configuration */
        supported_pwr_class = (supported_pwr_class >> 4U);
      }

      if ((power_class & 0x0FU) != (supported_pwr_class & 0x0FU))
 800424a:	9a01      	ldr	r2, [sp, #4]
        supported_pwr_class = (supported_pwr_class >> 4U);
 800424c:	bf08      	it	eq
 800424e:	091b      	lsreq	r3, r3, #4
      if ((power_class & 0x0FU) != (supported_pwr_class & 0x0FU))
 8004250:	405a      	eors	r2, r3
 8004252:	0712      	lsls	r2, r2, #28
 8004254:	d034      	beq.n	80042c0 <MMC_PwrClassUpdate.part.0+0xa8>
      {
        /* Need to change current power class */
        errorstate = SDMMC_CmdSwitch(hmmc->Instance, (0x03BB0000U | ((supported_pwr_class & 0x0FU) << 8U)));
 8004256:	0219      	lsls	r1, r3, #8
 8004258:	6828      	ldr	r0, [r5, #0]
 800425a:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
 800425e:	f041 716e 	orr.w	r1, r1, #62390272	; 0x3b80000
 8004262:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
 8004266:	f003 fe88 	bl	8007f7a <SDMMC_CmdSwitch>

        if (errorstate == HAL_MMC_ERROR_NONE)
 800426a:	b9f0      	cbnz	r0, 80042aa <MMC_PwrClassUpdate.part.0+0x92>
        {
          /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
          count = SDMMC_MAX_TRIAL;
 800426c:	f64f 76ff 	movw	r6, #65535	; 0xffff
          do
          {
            errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 8004270:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8004272:	6828      	ldr	r0, [r5, #0]
 8004274:	0409      	lsls	r1, r1, #16
 8004276:	f003 fe9c 	bl	8007fb2 <SDMMC_CmdSendStatus>
            if (errorstate != HAL_MMC_ERROR_NONE)
 800427a:	4601      	mov	r1, r0
 800427c:	b9b8      	cbnz	r0, 80042ae <MMC_PwrClassUpdate.part.0+0x96>
            {
              break;
            }

            /* Get command response */
            response = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 800427e:	6828      	ldr	r0, [r5, #0]
            count--;
 8004280:	3e01      	subs	r6, #1
            response = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 8004282:	f003 fd5d 	bl	8007d40 <SDMMC_GetResponse>
          } while (((response & 0x100U) == 0U) && (count != 0U));
 8004286:	05c3      	lsls	r3, r0, #23
 8004288:	d413      	bmi.n	80042b2 <MMC_PwrClassUpdate.part.0+0x9a>
 800428a:	2e00      	cmp	r6, #0
 800428c:	d1f0      	bne.n	8004270 <MMC_PwrClassUpdate.part.0+0x58>
              errorstate = SDMMC_ERROR_UNSUPPORTED_FEATURE;
            }
          }
          else if (count == 0U)
          {
            errorstate = SDMMC_ERROR_TIMEOUT;
 800428e:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8004292:	e015      	b.n	80042c0 <MMC_PwrClassUpdate.part.0+0xa8>
      errorstate = SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004294:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 8004298:	e7cf      	b.n	800423a <MMC_PwrClassUpdate.part.0+0x22>
      supported_pwr_class = ((hmmc->Ext_CSD[(MMC_EXT_CSD_PWR_CL_52_INDEX / 4)] >> MMC_EXT_CSD_PWR_CL_52_POS) &
 800429a:	f8d5 313c 	ldr.w	r3, [r5, #316]	; 0x13c
    else if (Speed == SDMMC_SPEED_MODE_HIGH)
 800429e:	2e02      	cmp	r6, #2
      supported_pwr_class = ((hmmc->Ext_CSD[(MMC_EXT_CSD_PWR_CL_52_INDEX / 4)] >> MMC_EXT_CSD_PWR_CL_52_POS) &
 80042a0:	bf0c      	ite	eq
 80042a2:	f3c3 4307 	ubfxeq	r3, r3, #16, #8
      supported_pwr_class = ((hmmc->Ext_CSD[(MMC_EXT_CSD_PWR_CL_26_INDEX / 4)] >> MMC_EXT_CSD_PWR_CL_26_POS) &
 80042a6:	0e1b      	lsrne	r3, r3, #24
 80042a8:	e7cb      	b.n	8004242 <MMC_PwrClassUpdate.part.0+0x2a>
 80042aa:	4604      	mov	r4, r0
 80042ac:	e008      	b.n	80042c0 <MMC_PwrClassUpdate.part.0+0xa8>
 80042ae:	4604      	mov	r4, r0
 80042b0:	e006      	b.n	80042c0 <MMC_PwrClassUpdate.part.0+0xa8>
          if ((count != 0U) && (errorstate == HAL_MMC_ERROR_NONE))
 80042b2:	2e00      	cmp	r6, #0
 80042b4:	d0eb      	beq.n	800428e <MMC_PwrClassUpdate.part.0+0x76>
              errorstate = SDMMC_ERROR_UNSUPPORTED_FEATURE;
 80042b6:	f010 0f80 	tst.w	r0, #128	; 0x80
 80042ba:	bf18      	it	ne
 80042bc:	f04f 5480 	movne.w	r4, #268435456	; 0x10000000
      }
    }
  }

  return errorstate;
}
 80042c0:	4620      	mov	r0, r4
 80042c2:	b003      	add	sp, #12
 80042c4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080042c6 <MMC_PwrClassUpdate>:
  if ((Wide == SDMMC_BUS_WIDE_8B) || (Wide == SDMMC_BUS_WIDE_4B))
 80042c6:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80042ca:	d002      	beq.n	80042d2 <MMC_PwrClassUpdate+0xc>
 80042cc:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 80042d0:	d101      	bne.n	80042d6 <MMC_PwrClassUpdate+0x10>
 80042d2:	f7ff bfa1 	b.w	8004218 <MMC_PwrClassUpdate.part.0>
}
 80042d6:	2000      	movs	r0, #0
 80042d8:	4770      	bx	lr
	...

080042dc <HAL_MMC_GetCardCSD>:
  pCSD->CSDStruct = (uint8_t)((hmmc->CSD[0] & 0xC0000000U) >> 30U);
 80042dc:	6d43      	ldr	r3, [r0, #84]	; 0x54
{
 80042de:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80042e0:	460c      	mov	r4, r1
  pCSD->CSDStruct = (uint8_t)((hmmc->CSD[0] & 0xC0000000U) >> 30U);
 80042e2:	0f99      	lsrs	r1, r3, #30
  uint32_t block_nbr = 0;
 80042e4:	2200      	movs	r2, #0
{
 80042e6:	4605      	mov	r5, r0
  pCSD->CSDStruct = (uint8_t)((hmmc->CSD[0] & 0xC0000000U) >> 30U);
 80042e8:	7021      	strb	r1, [r4, #0]
  pCSD->SysSpecVersion = (uint8_t)((hmmc->CSD[0] & 0x3C000000U) >> 26U);
 80042ea:	f3c3 6183 	ubfx	r1, r3, #26, #4
  uint32_t block_nbr = 0;
 80042ee:	9201      	str	r2, [sp, #4]
  pCSD->SysSpecVersion = (uint8_t)((hmmc->CSD[0] & 0x3C000000U) >> 26U);
 80042f0:	7061      	strb	r1, [r4, #1]
  pCSD->Reserved1 = (uint8_t)((hmmc->CSD[0] & 0x03000000U) >> 24U);
 80042f2:	f3c3 6101 	ubfx	r1, r3, #24, #2
 80042f6:	70a1      	strb	r1, [r4, #2]
  pCSD->TAAC = (uint8_t)((hmmc->CSD[0] & 0x00FF0000U) >> 16U);
 80042f8:	f3c3 4107 	ubfx	r1, r3, #16, #8
 80042fc:	70e1      	strb	r1, [r4, #3]
  pCSD->NSAC = (uint8_t)((hmmc->CSD[0] & 0x0000FF00U) >> 8U);
 80042fe:	f3c3 2107 	ubfx	r1, r3, #8, #8
  pCSD->MaxBusClkFrec = (uint8_t)(hmmc->CSD[0] & 0x000000FFU);
 8004302:	b2db      	uxtb	r3, r3
  pCSD->NSAC = (uint8_t)((hmmc->CSD[0] & 0x0000FF00U) >> 8U);
 8004304:	7121      	strb	r1, [r4, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hmmc->CSD[0] & 0x000000FFU);
 8004306:	7163      	strb	r3, [r4, #5]
  pCSD->CardComdClasses = (uint16_t)((hmmc->CSD[1] & 0xFFF00000U) >> 20U);
 8004308:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800430a:	0d19      	lsrs	r1, r3, #20
 800430c:	80e1      	strh	r1, [r4, #6]
  pCSD->RdBlockLen = (uint8_t)((hmmc->CSD[1] & 0x000F0000U) >> 16U);
 800430e:	f3c3 4103 	ubfx	r1, r3, #16, #4
 8004312:	7221      	strb	r1, [r4, #8]
  pCSD->PartBlockRead   = (uint8_t)((hmmc->CSD[1] & 0x00008000U) >> 15U);
 8004314:	f3c3 31c0 	ubfx	r1, r3, #15, #1
 8004318:	7261      	strb	r1, [r4, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hmmc->CSD[1] & 0x00004000U) >> 14U);
 800431a:	f3c3 3180 	ubfx	r1, r3, #14, #1
 800431e:	72a1      	strb	r1, [r4, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hmmc->CSD[1] & 0x00002000U) >> 13U);
 8004320:	f3c3 3140 	ubfx	r1, r3, #13, #1
  pCSD->DSRImpl = (uint8_t)((hmmc->CSD[1] & 0x00001000U) >> 12U);
 8004324:	f3c3 3300 	ubfx	r3, r3, #12, #1
  pCSD->RdBlockMisalign = (uint8_t)((hmmc->CSD[1] & 0x00002000U) >> 13U);
 8004328:	72e1      	strb	r1, [r4, #11]
  if (MMC_ReadExtCSD(hmmc, &block_nbr, 212, 0x0FFFFFFFU) != HAL_OK) /* Field SEC_COUNT [215:212] */
 800432a:	a901      	add	r1, sp, #4
  pCSD->DSRImpl = (uint8_t)((hmmc->CSD[1] & 0x00001000U) >> 12U);
 800432c:	7323      	strb	r3, [r4, #12]
  if (MMC_ReadExtCSD(hmmc, &block_nbr, 212, 0x0FFFFFFFU) != HAL_OK) /* Field SEC_COUNT [215:212] */
 800432e:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
  pCSD->Reserved2 = 0U; /*!< Reserved */
 8004332:	7362      	strb	r2, [r4, #13]
  if (MMC_ReadExtCSD(hmmc, &block_nbr, 212, 0x0FFFFFFFU) != HAL_OK) /* Field SEC_COUNT [215:212] */
 8004334:	22d4      	movs	r2, #212	; 0xd4
 8004336:	f7ff fedf 	bl	80040f8 <MMC_ReadExtCSD.constprop.0>
 800433a:	2800      	cmp	r0, #0
 800433c:	f040 8086 	bne.w	800444c <HAL_MMC_GetCardCSD+0x170>
  if (hmmc->MmcCard.CardType == MMC_LOW_CAPACITY_CARD)
 8004340:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8004342:	2b00      	cmp	r3, #0
 8004344:	d16e      	bne.n	8004424 <HAL_MMC_GetCardCSD+0x148>
    pCSD->DeviceSize = (((hmmc->CSD[1] & 0x000003FFU) << 2U) | ((hmmc->CSD[2] & 0xC0000000U) >> 30U));
 8004346:	f640 72fc 	movw	r2, #4092	; 0xffc
 800434a:	e9d5 1316 	ldrd	r1, r3, [r5, #88]	; 0x58
 800434e:	ea02 0281 	and.w	r2, r2, r1, lsl #2
 8004352:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8004356:	6122      	str	r2, [r4, #16]
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hmmc->CSD[2] & 0x38000000U) >> 27U);
 8004358:	f3c3 62c2 	ubfx	r2, r3, #27, #3
 800435c:	7522      	strb	r2, [r4, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hmmc->CSD[2] & 0x07000000U) >> 24U);
 800435e:	f3c3 6202 	ubfx	r2, r3, #24, #3
 8004362:	7562      	strb	r2, [r4, #21]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hmmc->CSD[2] & 0x00E00000U) >> 21U);
 8004364:	f3c3 5242 	ubfx	r2, r3, #21, #3
 8004368:	75a2      	strb	r2, [r4, #22]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hmmc->CSD[2] & 0x001C0000U) >> 18U);
 800436a:	f3c3 4282 	ubfx	r2, r3, #18, #3
    pCSD->DeviceSizeMul = (uint8_t)((hmmc->CSD[2] & 0x00038000U) >> 15U);
 800436e:	f3c3 33c2 	ubfx	r3, r3, #15, #3
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hmmc->CSD[2] & 0x001C0000U) >> 18U);
 8004372:	75e2      	strb	r2, [r4, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hmmc->CSD[2] & 0x00038000U) >> 15U);
 8004374:	7623      	strb	r3, [r4, #24]
    hmmc->MmcCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8004376:	6923      	ldr	r3, [r4, #16]
    hmmc->MmcCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8004378:	7e22      	ldrb	r2, [r4, #24]
    hmmc->MmcCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800437a:	3301      	adds	r3, #1
    hmmc->MmcCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800437c:	f002 0207 	and.w	r2, r2, #7
 8004380:	3202      	adds	r2, #2
 8004382:	fa03 f202 	lsl.w	r2, r3, r2
 8004386:	646a      	str	r2, [r5, #68]	; 0x44
    hmmc->MmcCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8004388:	7a23      	ldrb	r3, [r4, #8]
 800438a:	f003 010f 	and.w	r1, r3, #15
 800438e:	2301      	movs	r3, #1
 8004390:	408b      	lsls	r3, r1
 8004392:	64ab      	str	r3, [r5, #72]	; 0x48
    hmmc->MmcCard.LogBlockNbr = (hmmc->MmcCard.BlockNbr) * ((hmmc->MmcCard.BlockSize) / 512U);
 8004394:	0a5b      	lsrs	r3, r3, #9
 8004396:	4353      	muls	r3, r2
 8004398:	64eb      	str	r3, [r5, #76]	; 0x4c
    hmmc->MmcCard.LogBlockSize = 512U;
 800439a:	f44f 7300 	mov.w	r3, #512	; 0x200
    hmmc->MmcCard.LogBlockSize = hmmc->MmcCard.BlockSize;
 800439e:	652b      	str	r3, [r5, #80]	; 0x50
  pCSD->EraseGrSize = (uint8_t)((hmmc->CSD[2] & 0x00004000U) >> 14U);
 80043a0:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 80043a2:	f3c3 3280 	ubfx	r2, r3, #14, #1
 80043a6:	7662      	strb	r2, [r4, #25]
  pCSD->EraseGrMul = (uint8_t)((hmmc->CSD[2] & 0x00003F80U) >> 7U);
 80043a8:	f3c3 12c6 	ubfx	r2, r3, #7, #7
  pCSD->WrProtectGrSize = (uint8_t)(hmmc->CSD[2] & 0x0000007FU);
 80043ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  pCSD->EraseGrMul = (uint8_t)((hmmc->CSD[2] & 0x00003F80U) >> 7U);
 80043b0:	76a2      	strb	r2, [r4, #26]
  pCSD->WrProtectGrSize = (uint8_t)(hmmc->CSD[2] & 0x0000007FU);
 80043b2:	76e3      	strb	r3, [r4, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hmmc->CSD[3] & 0x80000000U) >> 31U);
 80043b4:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 80043b6:	0fda      	lsrs	r2, r3, #31
 80043b8:	7722      	strb	r2, [r4, #28]
  pCSD->ManDeflECC = (uint8_t)((hmmc->CSD[3] & 0x60000000U) >> 29U);
 80043ba:	f3c3 7241 	ubfx	r2, r3, #29, #2
 80043be:	7762      	strb	r2, [r4, #29]
  pCSD->WrSpeedFact = (uint8_t)((hmmc->CSD[3] & 0x1C000000U) >> 26U);
 80043c0:	f3c3 6282 	ubfx	r2, r3, #26, #3
 80043c4:	77a2      	strb	r2, [r4, #30]
  pCSD->MaxWrBlockLen = (uint8_t)((hmmc->CSD[3] & 0x03C00000U) >> 22U);
 80043c6:	f3c3 5283 	ubfx	r2, r3, #22, #4
 80043ca:	77e2      	strb	r2, [r4, #31]
  pCSD->WriteBlockPaPartial = (uint8_t)((hmmc->CSD[3] & 0x00200000U) >> 21U);
 80043cc:	f3c3 5240 	ubfx	r2, r3, #21, #1
 80043d0:	f884 2020 	strb.w	r2, [r4, #32]
  pCSD->Reserved3 = 0;
 80043d4:	2200      	movs	r2, #0
 80043d6:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
  pCSD->ContentProtectAppli = (uint8_t)((hmmc->CSD[3] & 0x00010000U) >> 16U);
 80043da:	f3c3 4200 	ubfx	r2, r3, #16, #1
 80043de:	f884 2022 	strb.w	r2, [r4, #34]	; 0x22
  pCSD->FileFormatGroup = (uint8_t)((hmmc->CSD[3] & 0x00008000U) >> 15U);
 80043e2:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 80043e6:	f884 2023 	strb.w	r2, [r4, #35]	; 0x23
  pCSD->CopyFlag = (uint8_t)((hmmc->CSD[3] & 0x00004000U) >> 14U);
 80043ea:	f3c3 3280 	ubfx	r2, r3, #14, #1
 80043ee:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
  pCSD->PermWrProtect = (uint8_t)((hmmc->CSD[3] & 0x00002000U) >> 13U);
 80043f2:	f3c3 3240 	ubfx	r2, r3, #13, #1
 80043f6:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
  pCSD->TempWrProtect = (uint8_t)((hmmc->CSD[3] & 0x00001000U) >> 12U);
 80043fa:	f3c3 3200 	ubfx	r2, r3, #12, #1
 80043fe:	f884 2026 	strb.w	r2, [r4, #38]	; 0x26
  pCSD->FileFormat = (uint8_t)((hmmc->CSD[3] & 0x00000C00U) >> 10U);
 8004402:	f3c3 2281 	ubfx	r2, r3, #10, #2
 8004406:	f884 2027 	strb.w	r2, [r4, #39]	; 0x27
  pCSD->ECC = (uint8_t)((hmmc->CSD[3] & 0x00000300U) >> 8U);
 800440a:	f3c3 2201 	ubfx	r2, r3, #8, #2
  pCSD->CSD_CRC = (uint8_t)((hmmc->CSD[3] & 0x000000FEU) >> 1U);
 800440e:	f3c3 0346 	ubfx	r3, r3, #1, #7
  pCSD->ECC = (uint8_t)((hmmc->CSD[3] & 0x00000300U) >> 8U);
 8004412:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
  pCSD->CSD_CRC = (uint8_t)((hmmc->CSD[3] & 0x000000FEU) >> 1U);
 8004416:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
  pCSD->Reserved4 = 1;
 800441a:	2301      	movs	r3, #1
 800441c:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
}
 8004420:	b003      	add	sp, #12
 8004422:	bd30      	pop	{r4, r5, pc}
  else if (hmmc->MmcCard.CardType == MMC_HIGH_CAPACITY_CARD)
 8004424:	2b01      	cmp	r3, #1
 8004426:	d106      	bne.n	8004436 <HAL_MMC_GetCardCSD+0x15a>
    hmmc->MmcCard.BlockNbr = block_nbr;
 8004428:	9b01      	ldr	r3, [sp, #4]
 800442a:	646b      	str	r3, [r5, #68]	; 0x44
    hmmc->MmcCard.LogBlockNbr = hmmc->MmcCard.BlockNbr;
 800442c:	64eb      	str	r3, [r5, #76]	; 0x4c
    hmmc->MmcCard.BlockSize = 512U;
 800442e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004432:	64ab      	str	r3, [r5, #72]	; 0x48
 8004434:	e7b3      	b.n	800439e <HAL_MMC_GetCardCSD+0xc2>
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8004436:	682b      	ldr	r3, [r5, #0]
    hmmc->State = HAL_MMC_STATE_READY;
 8004438:	2001      	movs	r0, #1
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 800443a:	4a05      	ldr	r2, [pc, #20]	; (8004450 <HAL_MMC_GetCardCSD+0x174>)
 800443c:	639a      	str	r2, [r3, #56]	; 0x38
    hmmc->ErrorCode |= HAL_MMC_ERROR_UNSUPPORTED_FEATURE;
 800443e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8004440:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004444:	636b      	str	r3, [r5, #52]	; 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 8004446:	f885 0030 	strb.w	r0, [r5, #48]	; 0x30
    return HAL_ERROR;
 800444a:	e7e9      	b.n	8004420 <HAL_MMC_GetCardCSD+0x144>
    return HAL_ERROR;
 800444c:	2001      	movs	r0, #1
 800444e:	e7e7      	b.n	8004420 <HAL_MMC_GetCardCSD+0x144>
 8004450:	1fe00fff 	.word	0x1fe00fff

08004454 <HAL_MMC_GetCardExtCSD>:
{
 8004454:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004458:	460d      	mov	r5, r1
 800445a:	b087      	sub	sp, #28
 800445c:	4604      	mov	r4, r0
 800445e:	4691      	mov	r9, r2
  uint32_t tickstart = HAL_GetTick();
 8004460:	f7fe fa84 	bl	800296c <HAL_GetTick>
 8004464:	4680      	mov	r8, r0
  if (NULL == pExtCSD)
 8004466:	b945      	cbnz	r5, 800447a <HAL_MMC_GetCardExtCSD+0x26>
    hmmc->ErrorCode |= HAL_MMC_ERROR_PARAM;
 8004468:	6b63      	ldr	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 800446a:	2601      	movs	r6, #1
    hmmc->ErrorCode |= HAL_MMC_ERROR_PARAM;
 800446c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004470:	6363      	str	r3, [r4, #52]	; 0x34
}
 8004472:	4630      	mov	r0, r6
 8004474:	b007      	add	sp, #28
 8004476:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (hmmc->State == HAL_MMC_STATE_READY)
 800447a:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800447e:	2700      	movs	r7, #0
 8004480:	2b01      	cmp	r3, #1
 8004482:	b2de      	uxtb	r6, r3
 8004484:	d175      	bne.n	8004572 <HAL_MMC_GetCardExtCSD+0x11e>
    hmmc->State = HAL_MMC_STATE_BUSY;
 8004486:	2303      	movs	r3, #3
    hmmc->ErrorCode = HAL_MMC_ERROR_NONE;
 8004488:	6367      	str	r7, [r4, #52]	; 0x34
    config.DataLength    = 512U;
 800448a:	f04f 3cff 	mov.w	ip, #4294967295
    hmmc->Instance->DCTRL = 0;
 800448e:	6820      	ldr	r0, [r4, #0]
    hmmc->State = HAL_MMC_STATE_BUSY;
 8004490:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    config.DataLength    = 512U;
 8004494:	f44f 7300 	mov.w	r3, #512	; 0x200
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8004498:	f04f 0e90 	mov.w	lr, #144	; 0x90
    (void)SDMMC_ConfigData(hmmc->Instance, &config);
 800449c:	4669      	mov	r1, sp
    hmmc->Instance->DCTRL = 0;
 800449e:	62c7      	str	r7, [r0, #44]	; 0x2c
    config.DataLength    = 512U;
 80044a0:	e9cd c300 	strd	ip, r3, [sp]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80044a4:	2302      	movs	r3, #2
    config.DPSM          = SDMMC_DPSM_DISABLE;
 80044a6:	e9cd 7704 	strd	r7, r7, [sp, #16]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80044aa:	e9cd e302 	strd	lr, r3, [sp, #8]
    (void)SDMMC_ConfigData(hmmc->Instance, &config);
 80044ae:	f003 fc4a 	bl	8007d46 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hmmc->Instance);
 80044b2:	6820      	ldr	r0, [r4, #0]
    errorstate = SDMMC_CmdSendEXTCSD(hmmc->Instance, 0);
 80044b4:	4639      	mov	r1, r7
    __SDMMC_CMDTRANS_ENABLE(hmmc->Instance);
 80044b6:	68c3      	ldr	r3, [r0, #12]
 80044b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044bc:	60c3      	str	r3, [r0, #12]
    errorstate = SDMMC_CmdSendEXTCSD(hmmc->Instance, 0);
 80044be:	f003 fd91 	bl	8007fe4 <SDMMC_CmdSendEXTCSD>
    if (errorstate != HAL_MMC_ERROR_NONE)
 80044c2:	b330      	cbz	r0, 8004512 <HAL_MMC_GetCardExtCSD+0xbe>
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 80044c4:	6823      	ldr	r3, [r4, #0]
 80044c6:	4a2c      	ldr	r2, [pc, #176]	; (8004578 <HAL_MMC_GetCardExtCSD+0x124>)
 80044c8:	639a      	str	r2, [r3, #56]	; 0x38
      hmmc->ErrorCode |= errorstate;
 80044ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80044cc:	4318      	orrs	r0, r3
 80044ce:	6360      	str	r0, [r4, #52]	; 0x34
      hmmc->State = HAL_MMC_STATE_READY;
 80044d0:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
      return HAL_ERROR;
 80044d4:	e7cd      	b.n	8004472 <HAL_MMC_GetCardExtCSD+0x1e>
      if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXFIFOHF))
 80044d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044d8:	0418      	lsls	r0, r3, #16
 80044da:	d508      	bpl.n	80044ee <HAL_MMC_GetCardExtCSD+0x9a>
 80044dc:	f105 0720 	add.w	r7, r5, #32
          *tmp_buf = SDMMC_ReadFIFO(hmmc->Instance);
 80044e0:	6820      	ldr	r0, [r4, #0]
 80044e2:	f003 fc0b 	bl	8007cfc <SDMMC_ReadFIFO>
 80044e6:	f845 0b04 	str.w	r0, [r5], #4
        for (count = 0U; count < 8U; count++)
 80044ea:	42af      	cmp	r7, r5
 80044ec:	d1f8      	bne.n	80044e0 <HAL_MMC_GetCardExtCSD+0x8c>
      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 80044ee:	f7fe fa3d 	bl	800296c <HAL_GetTick>
 80044f2:	eba0 0008 	sub.w	r0, r0, r8
 80044f6:	4548      	cmp	r0, r9
 80044f8:	d30b      	bcc.n	8004512 <HAL_MMC_GetCardExtCSD+0xbe>
        __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 80044fa:	6823      	ldr	r3, [r4, #0]
        return HAL_TIMEOUT;
 80044fc:	2603      	movs	r6, #3
        __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 80044fe:	4a1e      	ldr	r2, [pc, #120]	; (8004578 <HAL_MMC_GetCardExtCSD+0x124>)
 8004500:	639a      	str	r2, [r3, #56]	; 0x38
        hmmc->ErrorCode |= HAL_MMC_ERROR_TIMEOUT;
 8004502:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004504:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004508:	6363      	str	r3, [r4, #52]	; 0x34
        hmmc->State = HAL_MMC_STATE_READY;
 800450a:	2301      	movs	r3, #1
 800450c:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
        return HAL_TIMEOUT;
 8004510:	e7af      	b.n	8004472 <HAL_MMC_GetCardExtCSD+0x1e>
    while (!__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR |
 8004512:	6823      	ldr	r3, [r4, #0]
 8004514:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004516:	f412 7f95 	tst.w	r2, #298	; 0x12a
 800451a:	d0dc      	beq.n	80044d6 <HAL_MMC_GetCardExtCSD+0x82>
    __SDMMC_CMDTRANS_DISABLE(hmmc->Instance);
 800451c:	68da      	ldr	r2, [r3, #12]
 800451e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004522:	60da      	str	r2, [r3, #12]
    if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_DTIMEOUT))
 8004524:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004526:	0711      	lsls	r1, r2, #28
 8004528:	d509      	bpl.n	800453e <HAL_MMC_GetCardExtCSD+0xea>
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 800452a:	4a13      	ldr	r2, [pc, #76]	; (8004578 <HAL_MMC_GetCardExtCSD+0x124>)
 800452c:	639a      	str	r2, [r3, #56]	; 0x38
      hmmc->ErrorCode |= HAL_MMC_ERROR_DATA_TIMEOUT;
 800452e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004530:	f043 0308 	orr.w	r3, r3, #8
      hmmc->ErrorCode |= HAL_MMC_ERROR_RX_OVERRUN;
 8004534:	6363      	str	r3, [r4, #52]	; 0x34
      hmmc->State = HAL_MMC_STATE_READY;
 8004536:	2301      	movs	r3, #1
 8004538:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 800453c:	e799      	b.n	8004472 <HAL_MMC_GetCardExtCSD+0x1e>
    else if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_DCRCFAIL))
 800453e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004540:	0792      	lsls	r2, r2, #30
 8004542:	d505      	bpl.n	8004550 <HAL_MMC_GetCardExtCSD+0xfc>
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8004544:	4a0c      	ldr	r2, [pc, #48]	; (8004578 <HAL_MMC_GetCardExtCSD+0x124>)
 8004546:	639a      	str	r2, [r3, #56]	; 0x38
      hmmc->ErrorCode |= HAL_MMC_ERROR_DATA_CRC_FAIL;
 8004548:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800454a:	f043 0302 	orr.w	r3, r3, #2
 800454e:	e7f1      	b.n	8004534 <HAL_MMC_GetCardExtCSD+0xe0>
    else if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR))
 8004550:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004552:	f012 0220 	ands.w	r2, r2, #32
 8004556:	d005      	beq.n	8004564 <HAL_MMC_GetCardExtCSD+0x110>
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8004558:	4a07      	ldr	r2, [pc, #28]	; (8004578 <HAL_MMC_GetCardExtCSD+0x124>)
 800455a:	639a      	str	r2, [r3, #56]	; 0x38
      hmmc->ErrorCode |= HAL_MMC_ERROR_RX_OVERRUN;
 800455c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800455e:	f043 0320 	orr.w	r3, r3, #32
 8004562:	e7e7      	b.n	8004534 <HAL_MMC_GetCardExtCSD+0xe0>
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_DATA_FLAGS);
 8004564:	4905      	ldr	r1, [pc, #20]	; (800457c <HAL_MMC_GetCardExtCSD+0x128>)
  return HAL_OK;
 8004566:	4616      	mov	r6, r2
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_DATA_FLAGS);
 8004568:	6399      	str	r1, [r3, #56]	; 0x38
    hmmc->State = HAL_MMC_STATE_READY;
 800456a:	2301      	movs	r3, #1
 800456c:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 8004570:	e77f      	b.n	8004472 <HAL_MMC_GetCardExtCSD+0x1e>
  return HAL_OK;
 8004572:	463e      	mov	r6, r7
 8004574:	e77d      	b.n	8004472 <HAL_MMC_GetCardExtCSD+0x1e>
 8004576:	bf00      	nop
 8004578:	1fe00fff 	.word	0x1fe00fff
 800457c:	18000f3a 	.word	0x18000f3a

08004580 <HAL_MMC_InitCard>:
{
 8004580:	b570      	push	{r4, r5, r6, lr}
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8004582:	2300      	movs	r3, #0
{
 8004584:	b098      	sub	sp, #96	; 0x60
 8004586:	4604      	mov	r4, r0
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8004588:	2100      	movs	r1, #0
 800458a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800458e:	e9cd 3303 	strd	r3, r3, [sp, #12]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8004592:	e9cd 3305 	strd	r3, r3, [sp, #20]
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8004596:	f002 f9e5 	bl	8006964 <HAL_RCCEx_GetPeriphCLKFreq>
  if (sdmmc_clk == 0U)
 800459a:	4605      	mov	r5, r0
 800459c:	b938      	cbnz	r0, 80045ae <HAL_MMC_InitCard+0x2e>
    hmmc->State = HAL_MMC_STATE_READY;
 800459e:	2001      	movs	r0, #1
    hmmc->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 80045a0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    hmmc->State = HAL_MMC_STATE_READY;
 80045a4:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    hmmc->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 80045a8:	6363      	str	r3, [r4, #52]	; 0x34
}
 80045aa:	b018      	add	sp, #96	; 0x60
 80045ac:	bd70      	pop	{r4, r5, r6, pc}
  Init.ClockDiv = sdmmc_clk / (2U * MMC_INIT_FREQ);
 80045ae:	4e71      	ldr	r6, [pc, #452]	; (8004774 <HAL_MMC_InitCard+0x1f4>)
  (void)SDMMC_Init(hmmc->Instance, Init);
 80045b0:	ab03      	add	r3, sp, #12
  Init.ClockDiv = sdmmc_clk / (2U * MMC_INIT_FREQ);
 80045b2:	fbb0 f6f6 	udiv	r6, r0, r6
  (void)SDMMC_Init(hmmc->Instance, Init);
 80045b6:	9806      	ldr	r0, [sp, #24]
 80045b8:	4631      	mov	r1, r6
 80045ba:	9607      	str	r6, [sp, #28]
 80045bc:	e88d 0003 	stmia.w	sp, {r0, r1}
 80045c0:	6820      	ldr	r0, [r4, #0]
 80045c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80045c4:	f003 fb80 	bl	8007cc8 <SDMMC_Init>
  (void)SDMMC_PowerState_ON(hmmc->Instance);
 80045c8:	6820      	ldr	r0, [r4, #0]
 80045ca:	f003 fb9a 	bl	8007d02 <SDMMC_PowerState_ON>
  if (Init.ClockDiv != 0U)
 80045ce:	4b6a      	ldr	r3, [pc, #424]	; (8004778 <HAL_MMC_InitCard+0x1f8>)
 80045d0:	429d      	cmp	r5, r3
 80045d2:	d902      	bls.n	80045da <HAL_MMC_InitCard+0x5a>
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 80045d4:	0076      	lsls	r6, r6, #1
 80045d6:	fbb5 f5f6 	udiv	r5, r5, r6
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 80045da:	4868      	ldr	r0, [pc, #416]	; (800477c <HAL_MMC_InitCard+0x1fc>)
 80045dc:	fbb0 f0f5 	udiv	r0, r0, r5
 80045e0:	3001      	adds	r0, #1
 80045e2:	f7fe f9c9 	bl	8002978 <HAL_Delay>
  __IO uint32_t count = 0U;
 80045e6:	2300      	movs	r3, #0
  errorstate = SDMMC_CmdGoIdleState(hmmc->Instance);
 80045e8:	6820      	ldr	r0, [r4, #0]
  __IO uint32_t count = 0U;
 80045ea:	9302      	str	r3, [sp, #8]
  errorstate = SDMMC_CmdGoIdleState(hmmc->Instance);
 80045ec:	f003 fbbe 	bl	8007d6c <SDMMC_CmdGoIdleState>
  if (errorstate != HAL_MMC_ERROR_NONE)
 80045f0:	2800      	cmp	r0, #0
 80045f2:	d170      	bne.n	80046d6 <HAL_MMC_InitCard+0x156>
    if (count++ == SDMMC_MAX_VOLT_TRIAL)
 80045f4:	f64f 76ff 	movw	r6, #65535	; 0xffff
    errorstate = SDMMC_CmdOpCondition(hmmc->Instance, MMC_VOLTAGE_RANGE);
 80045f8:	4d61      	ldr	r5, [pc, #388]	; (8004780 <HAL_MMC_InitCard+0x200>)
    if (count++ == SDMMC_MAX_VOLT_TRIAL)
 80045fa:	9b02      	ldr	r3, [sp, #8]
 80045fc:	1c5a      	adds	r2, r3, #1
 80045fe:	42b3      	cmp	r3, r6
 8004600:	9202      	str	r2, [sp, #8]
 8004602:	f000 80b1 	beq.w	8004768 <HAL_MMC_InitCard+0x1e8>
    errorstate = SDMMC_CmdOpCondition(hmmc->Instance, MMC_VOLTAGE_RANGE);
 8004606:	4629      	mov	r1, r5
 8004608:	6820      	ldr	r0, [r4, #0]
 800460a:	f003 fd7d 	bl	8008108 <SDMMC_CmdOpCondition>
    if (errorstate != HAL_MMC_ERROR_NONE)
 800460e:	4601      	mov	r1, r0
 8004610:	2800      	cmp	r0, #0
 8004612:	f040 80ac 	bne.w	800476e <HAL_MMC_InitCard+0x1ee>
    response = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 8004616:	6820      	ldr	r0, [r4, #0]
 8004618:	f003 fb92 	bl	8007d40 <SDMMC_GetResponse>
  while (validvoltage == 0U)
 800461c:	2800      	cmp	r0, #0
 800461e:	daec      	bge.n	80045fa <HAL_MMC_InitCard+0x7a>
  if (((response & (0xFF000000U)) >> 24) == 0xC0U)
 8004620:	0e00      	lsrs	r0, r0, #24
 8004622:	f1a0 03c0 	sub.w	r3, r0, #192	; 0xc0
 8004626:	4258      	negs	r0, r3
 8004628:	4158      	adcs	r0, r3
 800462a:	63a0      	str	r0, [r4, #56]	; 0x38
  if (SDMMC_GetPowerState(hmmc->Instance) == 0U)
 800462c:	6820      	ldr	r0, [r4, #0]
 800462e:	f003 fb6e 	bl	8007d0e <SDMMC_GetPowerState>
 8004632:	2800      	cmp	r0, #0
 8004634:	f000 8095 	beq.w	8004762 <HAL_MMC_InitCard+0x1e2>
  errorstate = SDMMC_CmdSendCID(hmmc->Instance);
 8004638:	6820      	ldr	r0, [r4, #0]
 800463a:	f003 fd15 	bl	8008068 <SDMMC_CmdSendCID>
  if (errorstate != HAL_MMC_ERROR_NONE)
 800463e:	2800      	cmp	r0, #0
 8004640:	d149      	bne.n	80046d6 <HAL_MMC_InitCard+0x156>
    hmmc->CID[0U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 8004642:	4601      	mov	r1, r0
 8004644:	6820      	ldr	r0, [r4, #0]
 8004646:	f003 fb7b 	bl	8007d40 <SDMMC_GetResponse>
    hmmc->CID[1U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP2);
 800464a:	2104      	movs	r1, #4
    hmmc->CID[0U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 800464c:	6660      	str	r0, [r4, #100]	; 0x64
    hmmc->CID[1U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP2);
 800464e:	6820      	ldr	r0, [r4, #0]
 8004650:	f003 fb76 	bl	8007d40 <SDMMC_GetResponse>
    hmmc->CID[2U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP3);
 8004654:	2108      	movs	r1, #8
    hmmc->CID[1U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP2);
 8004656:	66a0      	str	r0, [r4, #104]	; 0x68
    hmmc->CID[2U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP3);
 8004658:	6820      	ldr	r0, [r4, #0]
 800465a:	f003 fb71 	bl	8007d40 <SDMMC_GetResponse>
    hmmc->CID[3U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP4);
 800465e:	210c      	movs	r1, #12
    hmmc->CID[2U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP3);
 8004660:	66e0      	str	r0, [r4, #108]	; 0x6c
    hmmc->CID[3U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP4);
 8004662:	6820      	ldr	r0, [r4, #0]
 8004664:	f003 fb6c 	bl	8007d40 <SDMMC_GetResponse>
  errorstate = SDMMC_CmdSetRelAddMmc(hmmc->Instance, mmc_rca);
 8004668:	2102      	movs	r1, #2
    hmmc->CID[3U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP4);
 800466a:	6720      	str	r0, [r4, #112]	; 0x70
  errorstate = SDMMC_CmdSetRelAddMmc(hmmc->Instance, mmc_rca);
 800466c:	6820      	ldr	r0, [r4, #0]
 800466e:	f003 fc86 	bl	8007f7e <SDMMC_CmdSetRelAddMmc>
  if (errorstate != HAL_MMC_ERROR_NONE)
 8004672:	2800      	cmp	r0, #0
 8004674:	d12f      	bne.n	80046d6 <HAL_MMC_InitCard+0x156>
  hmmc->MmcCard.RelCardAdd = mmc_rca;
 8004676:	2302      	movs	r3, #2
  errorstate = SDMMC_CmdSendCSD(hmmc->Instance, (uint32_t)(hmmc->MmcCard.RelCardAdd << 16U));
 8004678:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 800467c:	6820      	ldr	r0, [r4, #0]
  hmmc->MmcCard.RelCardAdd = mmc_rca;
 800467e:	6423      	str	r3, [r4, #64]	; 0x40
  errorstate = SDMMC_CmdSendCSD(hmmc->Instance, (uint32_t)(hmmc->MmcCard.RelCardAdd << 16U));
 8004680:	f003 fd08 	bl	8008094 <SDMMC_CmdSendCSD>
  if (errorstate != HAL_MMC_ERROR_NONE)
 8004684:	bb38      	cbnz	r0, 80046d6 <HAL_MMC_InitCard+0x156>
    hmmc->CSD[0U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 8004686:	4601      	mov	r1, r0
 8004688:	6820      	ldr	r0, [r4, #0]
 800468a:	f003 fb59 	bl	8007d40 <SDMMC_GetResponse>
    hmmc->CSD[1U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP2);
 800468e:	2104      	movs	r1, #4
    hmmc->CSD[0U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 8004690:	6560      	str	r0, [r4, #84]	; 0x54
    hmmc->CSD[1U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP2);
 8004692:	6820      	ldr	r0, [r4, #0]
 8004694:	f003 fb54 	bl	8007d40 <SDMMC_GetResponse>
    hmmc->CSD[2U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP3);
 8004698:	2108      	movs	r1, #8
    hmmc->CSD[1U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP2);
 800469a:	65a0      	str	r0, [r4, #88]	; 0x58
    hmmc->CSD[2U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP3);
 800469c:	6820      	ldr	r0, [r4, #0]
 800469e:	f003 fb4f 	bl	8007d40 <SDMMC_GetResponse>
    hmmc->CSD[3U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP4);
 80046a2:	210c      	movs	r1, #12
    hmmc->CSD[2U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP3);
 80046a4:	65e0      	str	r0, [r4, #92]	; 0x5c
    hmmc->CSD[3U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP4);
 80046a6:	6820      	ldr	r0, [r4, #0]
 80046a8:	f003 fb4a 	bl	8007d40 <SDMMC_GetResponse>
  hmmc->MmcCard.Class = (SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP2) >> 20U);
 80046ac:	2104      	movs	r1, #4
    hmmc->CSD[3U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP4);
 80046ae:	6620      	str	r0, [r4, #96]	; 0x60
  hmmc->MmcCard.Class = (SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP2) >> 20U);
 80046b0:	6820      	ldr	r0, [r4, #0]
 80046b2:	f003 fb45 	bl	8007d40 <SDMMC_GetResponse>
  errorstate = SDMMC_CmdSelDesel(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 80046b6:	6c21      	ldr	r1, [r4, #64]	; 0x40
  hmmc->MmcCard.Class = (SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP2) >> 20U);
 80046b8:	0d00      	lsrs	r0, r0, #20
  errorstate = SDMMC_CmdSelDesel(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 80046ba:	0409      	lsls	r1, r1, #16
  hmmc->MmcCard.Class = (SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP2) >> 20U);
 80046bc:	63e0      	str	r0, [r4, #60]	; 0x3c
  errorstate = SDMMC_CmdSelDesel(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 80046be:	6820      	ldr	r0, [r4, #0]
 80046c0:	f003 fc29 	bl	8007f16 <SDMMC_CmdSelDesel>
  if (errorstate != HAL_MMC_ERROR_NONE)
 80046c4:	b938      	cbnz	r0, 80046d6 <HAL_MMC_InitCard+0x156>
  if (HAL_MMC_GetCardCSD(hmmc, &CSD) != HAL_OK)
 80046c6:	a90d      	add	r1, sp, #52	; 0x34
 80046c8:	4620      	mov	r0, r4
 80046ca:	f7ff fe07 	bl	80042dc <HAL_MMC_GetCardCSD>
 80046ce:	b150      	cbz	r0, 80046e6 <HAL_MMC_InitCard+0x166>
    return hmmc->ErrorCode;
 80046d0:	6b60      	ldr	r0, [r4, #52]	; 0x34
  if (errorstate != HAL_MMC_ERROR_NONE)
 80046d2:	2800      	cmp	r0, #0
 80046d4:	d033      	beq.n	800473e <HAL_MMC_InitCard+0x1be>
    hmmc->State = HAL_MMC_STATE_READY;
 80046d6:	2301      	movs	r3, #1
 80046d8:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    hmmc->ErrorCode |= errorstate;
 80046dc:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80046de:	4310      	orrs	r0, r2
 80046e0:	6360      	str	r0, [r4, #52]	; 0x34
    return HAL_ERROR;
 80046e2:	4618      	mov	r0, r3
 80046e4:	e761      	b.n	80045aa <HAL_MMC_InitCard+0x2a>
  errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 80046e6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80046e8:	6820      	ldr	r0, [r4, #0]
 80046ea:	0409      	lsls	r1, r1, #16
 80046ec:	f003 fc61 	bl	8007fb2 <SDMMC_CmdSendStatus>
  if (errorstate != HAL_MMC_ERROR_NONE)
 80046f0:	b110      	cbz	r0, 80046f8 <HAL_MMC_InitCard+0x178>
    hmmc->ErrorCode |= errorstate;
 80046f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80046f4:	4318      	orrs	r0, r3
 80046f6:	6360      	str	r0, [r4, #52]	; 0x34
  if (HAL_MMC_GetCardExtCSD(hmmc, hmmc->Ext_CSD, SDMMC_DATATIMEOUT) != HAL_OK)
 80046f8:	f04f 32ff 	mov.w	r2, #4294967295
 80046fc:	f104 0174 	add.w	r1, r4, #116	; 0x74
 8004700:	4620      	mov	r0, r4
 8004702:	f7ff fea7 	bl	8004454 <HAL_MMC_GetCardExtCSD>
 8004706:	2800      	cmp	r0, #0
 8004708:	d1e2      	bne.n	80046d0 <HAL_MMC_InitCard+0x150>
  errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 800470a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800470c:	6820      	ldr	r0, [r4, #0]
 800470e:	0409      	lsls	r1, r1, #16
 8004710:	f003 fc4f 	bl	8007fb2 <SDMMC_CmdSendStatus>
  if (errorstate != HAL_MMC_ERROR_NONE)
 8004714:	b110      	cbz	r0, 800471c <HAL_MMC_InitCard+0x19c>
    hmmc->ErrorCode |= errorstate;
 8004716:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004718:	4318      	orrs	r0, r3
 800471a:	6360      	str	r0, [r4, #52]	; 0x34
  Init = hmmc->Init;
 800471c:	1d26      	adds	r6, r4, #4
 800471e:	ad08      	add	r5, sp, #32
 8004720:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8004722:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004724:	6833      	ldr	r3, [r6, #0]
 8004726:	602b      	str	r3, [r5, #0]
  Init.BusWide = SDMMC_BUS_WIDE_1B;
 8004728:	2300      	movs	r3, #0
  (void)SDMMC_Init(hmmc->Instance, Init);
 800472a:	e9dd 010b 	ldrd	r0, r1, [sp, #44]	; 0x2c
  Init.BusWide = SDMMC_BUS_WIDE_1B;
 800472e:	930a      	str	r3, [sp, #40]	; 0x28
  (void)SDMMC_Init(hmmc->Instance, Init);
 8004730:	ab08      	add	r3, sp, #32
 8004732:	e88d 0003 	stmia.w	sp, {r0, r1}
 8004736:	6820      	ldr	r0, [r4, #0]
 8004738:	cb0e      	ldmia	r3, {r1, r2, r3}
 800473a:	f003 fac5 	bl	8007cc8 <SDMMC_Init>
  errorstate = SDMMC_CmdBlockLength(hmmc->Instance, MMC_BLOCKSIZE);
 800473e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004742:	6820      	ldr	r0, [r4, #0]
 8004744:	f003 fbce 	bl	8007ee4 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_MMC_ERROR_NONE)
 8004748:	2800      	cmp	r0, #0
 800474a:	f43f af2e 	beq.w	80045aa <HAL_MMC_InitCard+0x2a>
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 800474e:	6823      	ldr	r3, [r4, #0]
 8004750:	4a0c      	ldr	r2, [pc, #48]	; (8004784 <HAL_MMC_InitCard+0x204>)
 8004752:	639a      	str	r2, [r3, #56]	; 0x38
    hmmc->ErrorCode |= errorstate;
 8004754:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004756:	4318      	orrs	r0, r3
 8004758:	6360      	str	r0, [r4, #52]	; 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 800475a:	2001      	movs	r0, #1
 800475c:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    return HAL_ERROR;
 8004760:	e723      	b.n	80045aa <HAL_MMC_InitCard+0x2a>
    return HAL_MMC_ERROR_REQUEST_NOT_APPLICABLE;
 8004762:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8004766:	e7b6      	b.n	80046d6 <HAL_MMC_InitCard+0x156>
      return HAL_MMC_ERROR_INVALID_VOLTRANGE;
 8004768:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 800476c:	e7b3      	b.n	80046d6 <HAL_MMC_InitCard+0x156>
      return HAL_MMC_ERROR_UNSUPPORTED_FEATURE;
 800476e:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8004772:	e7b0      	b.n	80046d6 <HAL_MMC_InitCard+0x156>
 8004774:	000c3500 	.word	0x000c3500
 8004778:	000c34ff 	.word	0x000c34ff
 800477c:	00012110 	.word	0x00012110
 8004780:	c0ff8000 	.word	0xc0ff8000
 8004784:	1fe00fff 	.word	0x1fe00fff

08004788 <HAL_MMC_ConfigWideBusOperation>:
  hmmc->State = HAL_MMC_STATE_BUSY;
 8004788:	2303      	movs	r3, #3
{
 800478a:	b5f0      	push	{r4, r5, r6, r7, lr}
  hmmc->State = HAL_MMC_STATE_BUSY;
 800478c:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
{
 8004790:	b089      	sub	sp, #36	; 0x24
  if ((hmmc->Instance->CLKCR & SDMMC_CLKCR_BUSSPEED) != 0U)
 8004792:	6803      	ldr	r3, [r0, #0]
{
 8004794:	4604      	mov	r4, r0
 8004796:	460d      	mov	r5, r1
  if ((hmmc->Instance->CLKCR & SDMMC_CLKCR_BUSSPEED) != 0U)
 8004798:	685a      	ldr	r2, [r3, #4]
 800479a:	0316      	lsls	r6, r2, #12
 800479c:	d52a      	bpl.n	80047f4 <HAL_MMC_ConfigWideBusOperation+0x6c>
    if ((hmmc->Instance->CLKCR & SDMMC_CLKCR_DDR) != 0U)
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	035a      	lsls	r2, r3, #13
      errorstate = MMC_PwrClassUpdate(hmmc, WideMode, SDMMC_SPEED_MODE_DDR);
 80047a2:	bf4c      	ite	mi
 80047a4:	2204      	movmi	r2, #4
      errorstate = MMC_PwrClassUpdate(hmmc, WideMode, SDMMC_SPEED_MODE_HIGH);
 80047a6:	2202      	movpl	r2, #2
    errorstate = MMC_PwrClassUpdate(hmmc, WideMode, SDMMC_SPEED_MODE_DEFAULT);
 80047a8:	f7ff fd8d 	bl	80042c6 <MMC_PwrClassUpdate>
  if (errorstate == HAL_MMC_ERROR_NONE)
 80047ac:	2800      	cmp	r0, #0
 80047ae:	d14d      	bne.n	800484c <HAL_MMC_ConfigWideBusOperation+0xc4>
    if (WideMode == SDMMC_BUS_WIDE_8B)
 80047b0:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
      errorstate = SDMMC_CmdSwitch(hmmc->Instance, 0x03B70200U);
 80047b4:	6820      	ldr	r0, [r4, #0]
    if (WideMode == SDMMC_BUS_WIDE_8B)
 80047b6:	d11f      	bne.n	80047f8 <HAL_MMC_ConfigWideBusOperation+0x70>
      errorstate = SDMMC_CmdSwitch(hmmc->Instance, 0x03B70200U);
 80047b8:	492f      	ldr	r1, [pc, #188]	; (8004878 <HAL_MMC_ConfigWideBusOperation+0xf0>)
      errorstate = SDMMC_CmdSwitch(hmmc->Instance, 0x03B70000U);
 80047ba:	f003 fbde 	bl	8007f7a <SDMMC_CmdSwitch>
    if (errorstate == HAL_MMC_ERROR_NONE)
 80047be:	2800      	cmp	r0, #0
 80047c0:	d144      	bne.n	800484c <HAL_MMC_ConfigWideBusOperation+0xc4>
      count = SDMMC_MAX_TRIAL;
 80047c2:	f64f 76ff 	movw	r6, #65535	; 0xffff
        errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 80047c6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80047c8:	6820      	ldr	r0, [r4, #0]
 80047ca:	0409      	lsls	r1, r1, #16
 80047cc:	f003 fbf1 	bl	8007fb2 <SDMMC_CmdSendStatus>
        if (errorstate != HAL_MMC_ERROR_NONE)
 80047d0:	2800      	cmp	r0, #0
 80047d2:	d13b      	bne.n	800484c <HAL_MMC_ConfigWideBusOperation+0xc4>
        response = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 80047d4:	4601      	mov	r1, r0
 80047d6:	6820      	ldr	r0, [r4, #0]
 80047d8:	f003 fab2 	bl	8007d40 <SDMMC_GetResponse>
      } while (((response & 0x100U) == 0U) && (count != 0U));
 80047dc:	05c3      	lsls	r3, r0, #23
        count--;
 80047de:	f106 36ff 	add.w	r6, r6, #4294967295
      } while (((response & 0x100U) == 0U) && (count != 0U));
 80047e2:	d437      	bmi.n	8004854 <HAL_MMC_ConfigWideBusOperation+0xcc>
 80047e4:	2e00      	cmp	r6, #0
 80047e6:	d1ee      	bne.n	80047c6 <HAL_MMC_ConfigWideBusOperation+0x3e>
  hmmc->State = HAL_MMC_STATE_READY;
 80047e8:	2301      	movs	r3, #1
        errorstate = SDMMC_ERROR_TIMEOUT;
 80047ea:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  hmmc->State = HAL_MMC_STATE_READY;
 80047ee:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  if (errorstate != HAL_MMC_ERROR_NONE)
 80047f2:	e039      	b.n	8004868 <HAL_MMC_ConfigWideBusOperation+0xe0>
    errorstate = MMC_PwrClassUpdate(hmmc, WideMode, SDMMC_SPEED_MODE_DEFAULT);
 80047f4:	2201      	movs	r2, #1
 80047f6:	e7d7      	b.n	80047a8 <HAL_MMC_ConfigWideBusOperation+0x20>
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 80047f8:	f5b5 4f80 	cmp.w	r5, #16384	; 0x4000
 80047fc:	d101      	bne.n	8004802 <HAL_MMC_ConfigWideBusOperation+0x7a>
      errorstate = SDMMC_CmdSwitch(hmmc->Instance, 0x03B70100U);
 80047fe:	491f      	ldr	r1, [pc, #124]	; (800487c <HAL_MMC_ConfigWideBusOperation+0xf4>)
 8004800:	e7db      	b.n	80047ba <HAL_MMC_ConfigWideBusOperation+0x32>
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8004802:	b9ed      	cbnz	r5, 8004840 <HAL_MMC_ConfigWideBusOperation+0xb8>
      errorstate = SDMMC_CmdSwitch(hmmc->Instance, 0x03B70000U);
 8004804:	491e      	ldr	r1, [pc, #120]	; (8004880 <HAL_MMC_ConfigWideBusOperation+0xf8>)
 8004806:	e7d8      	b.n	80047ba <HAL_MMC_ConfigWideBusOperation+0x32>
          (void)SDMMC_Init(hmmc->Instance, Init);
 8004808:	4627      	mov	r7, r4
          Init = hmmc->Init;
 800480a:	f10d 0c0c 	add.w	ip, sp, #12
          (void)SDMMC_Init(hmmc->Instance, Init);
 800480e:	f857 eb04 	ldr.w	lr, [r7], #4
          Init = hmmc->Init;
 8004812:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8004814:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8004818:	683b      	ldr	r3, [r7, #0]
          Init.BusWide = WideMode;
 800481a:	9505      	str	r5, [sp, #20]
          Init = hmmc->Init;
 800481c:	f8cc 3000 	str.w	r3, [ip]
          (void)SDMMC_Init(hmmc->Instance, Init);
 8004820:	ab08      	add	r3, sp, #32
 8004822:	e913 0003 	ldmdb	r3, {r0, r1}
 8004826:	ab03      	add	r3, sp, #12
 8004828:	e88d 0003 	stmia.w	sp, {r0, r1}
 800482c:	4670      	mov	r0, lr
 800482e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004830:	f003 fa4a 	bl	8007cc8 <SDMMC_Init>
  hmmc->State = HAL_MMC_STATE_READY;
 8004834:	2301      	movs	r3, #1
  return HAL_OK;
 8004836:	4630      	mov	r0, r6
  hmmc->State = HAL_MMC_STATE_READY;
 8004838:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
 800483c:	b009      	add	sp, #36	; 0x24
 800483e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  hmmc->State = HAL_MMC_STATE_READY;
 8004840:	2301      	movs	r3, #1
      errorstate = HAL_MMC_ERROR_PARAM;
 8004842:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
  hmmc->State = HAL_MMC_STATE_READY;
 8004846:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  if (errorstate != HAL_MMC_ERROR_NONE)
 800484a:	e00d      	b.n	8004868 <HAL_MMC_ConfigWideBusOperation+0xe0>
  hmmc->State = HAL_MMC_STATE_READY;
 800484c:	2301      	movs	r3, #1
 800484e:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  if (errorstate != HAL_MMC_ERROR_NONE)
 8004852:	e009      	b.n	8004868 <HAL_MMC_ConfigWideBusOperation+0xe0>
      if ((count != 0U) && (errorstate == HAL_MMC_ERROR_NONE))
 8004854:	2e00      	cmp	r6, #0
 8004856:	d0c7      	beq.n	80047e8 <HAL_MMC_ConfigWideBusOperation+0x60>
        if ((response & 0x80U) != 0U)
 8004858:	f010 0680 	ands.w	r6, r0, #128	; 0x80
 800485c:	d0d4      	beq.n	8004808 <HAL_MMC_ConfigWideBusOperation+0x80>
  hmmc->State = HAL_MMC_STATE_READY;
 800485e:	2301      	movs	r3, #1
          errorstate = SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004860:	f44f 3080 	mov.w	r0, #65536	; 0x10000
  hmmc->State = HAL_MMC_STATE_READY;
 8004864:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8004868:	6823      	ldr	r3, [r4, #0]
 800486a:	4a06      	ldr	r2, [pc, #24]	; (8004884 <HAL_MMC_ConfigWideBusOperation+0xfc>)
 800486c:	639a      	str	r2, [r3, #56]	; 0x38
    hmmc->ErrorCode |= errorstate;
 800486e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004870:	4318      	orrs	r0, r3
 8004872:	6360      	str	r0, [r4, #52]	; 0x34
    return HAL_ERROR;
 8004874:	2001      	movs	r0, #1
 8004876:	e7e1      	b.n	800483c <HAL_MMC_ConfigWideBusOperation+0xb4>
 8004878:	03b70200 	.word	0x03b70200
 800487c:	03b70100 	.word	0x03b70100
 8004880:	03b70000 	.word	0x03b70000
 8004884:	1fe00fff 	.word	0x1fe00fff

08004888 <HAL_MMC_Init>:
{
 8004888:	b510      	push	{r4, lr}
  if (hmmc == NULL)
 800488a:	4604      	mov	r4, r0
 800488c:	b908      	cbnz	r0, 8004892 <HAL_MMC_Init+0xa>
    return HAL_ERROR;
 800488e:	2001      	movs	r0, #1
}
 8004890:	bd10      	pop	{r4, pc}
  if (hmmc->State == HAL_MMC_STATE_RESET)
 8004892:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 8004896:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800489a:	b913      	cbnz	r3, 80048a2 <HAL_MMC_Init+0x1a>
    hmmc->Lock = HAL_UNLOCKED;
 800489c:	7602      	strb	r2, [r0, #24]
    HAL_MMC_MspInit(hmmc);
 800489e:	f7fd f8e9 	bl	8001a74 <HAL_MMC_MspInit>
  hmmc->State = HAL_MMC_STATE_BUSY;
 80048a2:	2303      	movs	r3, #3
  if (HAL_MMC_InitCard(hmmc) == HAL_ERROR)
 80048a4:	4620      	mov	r0, r4
  hmmc->State = HAL_MMC_STATE_BUSY;
 80048a6:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  if (HAL_MMC_InitCard(hmmc) == HAL_ERROR)
 80048aa:	f7ff fe69 	bl	8004580 <HAL_MMC_InitCard>
 80048ae:	2801      	cmp	r0, #1
 80048b0:	d0ed      	beq.n	800488e <HAL_MMC_Init+0x6>
  hmmc->ErrorCode = HAL_DMA_ERROR_NONE;
 80048b2:	2300      	movs	r3, #0
  if (hmmc->Init.BusWide != SDMMC_BUS_WIDE_1B)
 80048b4:	68e1      	ldr	r1, [r4, #12]
  hmmc->ErrorCode = HAL_DMA_ERROR_NONE;
 80048b6:	6363      	str	r3, [r4, #52]	; 0x34
  hmmc->Context = MMC_CONTEXT_NONE;
 80048b8:	62e3      	str	r3, [r4, #44]	; 0x2c
  hmmc->State = HAL_MMC_STATE_READY;
 80048ba:	2301      	movs	r3, #1
 80048bc:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  if (hmmc->Init.BusWide != SDMMC_BUS_WIDE_1B)
 80048c0:	b131      	cbz	r1, 80048d0 <HAL_MMC_Init+0x48>
    if (HAL_MMC_ConfigWideBusOperation(hmmc, hmmc->Init.BusWide) != HAL_OK)
 80048c2:	4620      	mov	r0, r4
 80048c4:	f7ff ff60 	bl	8004788 <HAL_MMC_ConfigWideBusOperation>
    return HAL_ERROR;
 80048c8:	3800      	subs	r0, #0
 80048ca:	bf18      	it	ne
 80048cc:	2001      	movne	r0, #1
 80048ce:	e7df      	b.n	8004890 <HAL_MMC_Init+0x8>
  return HAL_OK;
 80048d0:	4608      	mov	r0, r1
 80048d2:	e7dd      	b.n	8004890 <HAL_MMC_Init+0x8>

080048d4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80048d4:	b5f0      	push	{r4, r5, r6, r7, lr}
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80048d6:	4604      	mov	r4, r0
{
 80048d8:	b08b      	sub	sp, #44	; 0x2c
  if (hpcd == NULL)
 80048da:	b360      	cbz	r0, 8004936 <HAL_PCD_Init+0x62>
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80048dc:	f890 34bd 	ldrb.w	r3, [r0, #1213]	; 0x4bd
  USBx = hpcd->Instance;
 80048e0:	6805      	ldr	r5, [r0, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 80048e2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80048e6:	b91b      	cbnz	r3, 80048f0 <HAL_PCD_Init+0x1c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80048e8:	f880 24bc 	strb.w	r2, [r0, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80048ec:	f7fd fa12 	bl	8001d14 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80048f0:	2303      	movs	r3, #3

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80048f2:	466e      	mov	r6, sp
 80048f4:	1d27      	adds	r7, r4, #4
  hpcd->State = HAL_PCD_STATE_BUSY;
 80048f6:	f884 34bd 	strb.w	r3, [r4, #1213]	; 0x4bd
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80048fa:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  __HAL_PCD_DISABLE(hpcd);
 80048fc:	4625      	mov	r5, r4
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80048fe:	f413 7380 	ands.w	r3, r3, #256	; 0x100
  __HAL_PCD_DISABLE(hpcd);
 8004902:	f855 0b10 	ldr.w	r0, [r5], #16
    hpcd->Init.dma_enable = 0U;
 8004906:	bf08      	it	eq
 8004908:	60e3      	streq	r3, [r4, #12]
  __HAL_PCD_DISABLE(hpcd);
 800490a:	f003 fc83 	bl	8008214 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800490e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004910:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8004912:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004914:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8004916:	e895 0003 	ldmia.w	r5, {r0, r1}
 800491a:	4625      	mov	r5, r4
 800491c:	e886 0003 	stmia.w	r6, {r0, r1}
 8004920:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8004924:	f855 0b10 	ldr.w	r0, [r5], #16
 8004928:	f003 fc2a 	bl	8008180 <USB_CoreInit>
 800492c:	4606      	mov	r6, r0
 800492e:	b120      	cbz	r0, 800493a <HAL_PCD_Init+0x66>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004930:	2302      	movs	r3, #2
 8004932:	f884 34bd 	strb.w	r3, [r4, #1213]	; 0x4bd
    return HAL_ERROR;
 8004936:	2501      	movs	r5, #1
 8004938:	e052      	b.n	80049e0 <HAL_PCD_Init+0x10c>
    return HAL_ERROR;
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800493a:	4601      	mov	r1, r0
 800493c:	6820      	ldr	r0, [r4, #0]
 800493e:	f003 fc6f 	bl	8008220 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004942:	4630      	mov	r0, r6
 8004944:	f8d4 c004 	ldr.w	ip, [r4, #4]
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004948:	2624      	movs	r6, #36	; 0x24
 800494a:	f04f 0e01 	mov.w	lr, #1
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800494e:	4601      	mov	r1, r0
 8004950:	b2c2      	uxtb	r2, r0
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004952:	3001      	adds	r0, #1
 8004954:	4594      	cmp	ip, r2
 8004956:	d81b      	bhi.n	8004990 <HAL_PCD_Init+0xbc>
 8004958:	2300      	movs	r3, #0
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800495a:	2624      	movs	r6, #36	; 0x24
 800495c:	4619      	mov	r1, r3
 800495e:	b2d8      	uxtb	r0, r3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004960:	3301      	adds	r3, #1
 8004962:	4584      	cmp	ip, r0
 8004964:	d822      	bhi.n	80049ac <HAL_PCD_Init+0xd8>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004966:	466e      	mov	r6, sp
 8004968:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800496a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800496c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800496e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8004970:	e895 0003 	ldmia.w	r5, {r0, r1}
 8004974:	e886 0003 	stmia.w	r6, {r0, r1}
 8004978:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800497c:	6820      	ldr	r0, [r4, #0]
 800497e:	f003 fccf 	bl	8008320 <USB_DevInit>
 8004982:	2301      	movs	r3, #1
 8004984:	4605      	mov	r5, r0
 8004986:	b1f0      	cbz	r0, 80049c6 <HAL_PCD_Init+0xf2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004988:	2202      	movs	r2, #2
 800498a:	f884 24bd 	strb.w	r2, [r4, #1213]	; 0x4bd
    return HAL_ERROR;
 800498e:	e7d2      	b.n	8004936 <HAL_PCD_Init+0x62>
    hpcd->IN_ep[i].is_in = 1U;
 8004990:	fb06 4302 	mla	r3, r6, r2, r4
 8004994:	f883 e03d 	strb.w	lr, [r3, #61]	; 0x3d
    hpcd->IN_ep[i].num = i;
 8004998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 800499c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80049a0:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    hpcd->IN_ep[i].xfer_len = 0U;
 80049a4:	64d9      	str	r1, [r3, #76]	; 0x4c
    hpcd->IN_ep[i].xfer_buff = 0U;
 80049a6:	e9c3 1111 	strd	r1, r1, [r3, #68]	; 0x44
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80049aa:	e7d1      	b.n	8004950 <HAL_PCD_Init+0x7c>
    hpcd->OUT_ep[i].is_in = 0U;
 80049ac:	fb06 4200 	mla	r2, r6, r0, r4
 80049b0:	f882 127d 	strb.w	r1, [r2, #637]	; 0x27d
    hpcd->OUT_ep[i].num = i;
 80049b4:	f882 027c 	strb.w	r0, [r2, #636]	; 0x27c
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80049b8:	f882 1280 	strb.w	r1, [r2, #640]	; 0x280
    hpcd->OUT_ep[i].xfer_len = 0U;
 80049bc:	f8c2 128c 	str.w	r1, [r2, #652]	; 0x28c
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80049c0:	e9c2 11a1 	strd	r1, r1, [r2, #644]	; 0x284
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80049c4:	e7cb      	b.n	800495e <HAL_PCD_Init+0x8a>
  }

  hpcd->USB_Address = 0U;
 80049c6:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80049ca:	f884 34bd 	strb.w	r3, [r4, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80049ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d102      	bne.n	80049da <HAL_PCD_Init+0x106>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80049d4:	4620      	mov	r0, r4
 80049d6:	f000 f806 	bl	80049e6 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80049da:	6820      	ldr	r0, [r4, #0]
 80049dc:	f003 fd56 	bl	800848c <USB_DevDisconnect>

  return HAL_OK;
}
 80049e0:	4628      	mov	r0, r5
 80049e2:	b00b      	add	sp, #44	; 0x2c
 80049e4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080049e6 <HAL_PCDEx_ActivateLPM>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80049e6:	6802      	ldr	r2, [r0, #0]

  hpcd->lpm_active = 1U;
  hpcd->LPM_State = LPM_L0;
 80049e8:	2100      	movs	r1, #0
  hpcd->lpm_active = 1U;
 80049ea:	2301      	movs	r3, #1
  hpcd->LPM_State = LPM_L0;
 80049ec:	f880 14f4 	strb.w	r1, [r0, #1268]	; 0x4f4
  hpcd->lpm_active = 1U;
 80049f0:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);

  return HAL_OK;
}
 80049f4:	4608      	mov	r0, r1
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80049f6:	6993      	ldr	r3, [r2, #24]
 80049f8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80049fc:	6193      	str	r3, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80049fe:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8004a00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a04:	f043 0303 	orr.w	r3, r3, #3
 8004a08:	6553      	str	r3, [r2, #84]	; 0x54
}
 8004a0a:	4770      	bx	lr

08004a0c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004a0c:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004a0e:	4c10      	ldr	r4, [pc, #64]	; (8004a50 <HAL_PWREx_ConfigSupply+0x44>)
 8004a10:	68e3      	ldr	r3, [r4, #12]
 8004a12:	f013 0f04 	tst.w	r3, #4
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004a16:	68e3      	ldr	r3, [r4, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004a18:	d105      	bne.n	8004a26 <HAL_PWREx_ConfigSupply+0x1a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004a1a:	f003 0307 	and.w	r3, r3, #7
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004a1e:	1a18      	subs	r0, r3, r0
 8004a20:	bf18      	it	ne
 8004a22:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 8004a24:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004a26:	f023 0307 	bic.w	r3, r3, #7
 8004a2a:	4318      	orrs	r0, r3
 8004a2c:	60e0      	str	r0, [r4, #12]
  tickstart = HAL_GetTick ();
 8004a2e:	f7fd ff9d 	bl	800296c <HAL_GetTick>
 8004a32:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004a34:	6863      	ldr	r3, [r4, #4]
 8004a36:	049b      	lsls	r3, r3, #18
 8004a38:	d501      	bpl.n	8004a3e <HAL_PWREx_ConfigSupply+0x32>
  return HAL_OK;
 8004a3a:	2000      	movs	r0, #0
 8004a3c:	e7f2      	b.n	8004a24 <HAL_PWREx_ConfigSupply+0x18>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004a3e:	f7fd ff95 	bl	800296c <HAL_GetTick>
 8004a42:	1b40      	subs	r0, r0, r5
 8004a44:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8004a48:	d9f4      	bls.n	8004a34 <HAL_PWREx_ConfigSupply+0x28>
      return HAL_ERROR;
 8004a4a:	2001      	movs	r0, #1
 8004a4c:	e7ea      	b.n	8004a24 <HAL_PWREx_ConfigSupply+0x18>
 8004a4e:	bf00      	nop
 8004a50:	58024800 	.word	0x58024800

08004a54 <HAL_PWREx_EnableUSBVoltageDetector>:
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8004a54:	4a02      	ldr	r2, [pc, #8]	; (8004a60 <HAL_PWREx_EnableUSBVoltageDetector+0xc>)
 8004a56:	68d3      	ldr	r3, [r2, #12]
 8004a58:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a5c:	60d3      	str	r3, [r2, #12]
}
 8004a5e:	4770      	bx	lr
 8004a60:	58024800 	.word	0x58024800

08004a64 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8004a64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8004a68:	6a4e      	ldr	r6, [r1, #36]	; 0x24
 8004a6a:	b136      	cbz	r6, 8004a7a <QSPI_Config+0x16>
 8004a6c:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
 8004a70:	d003      	beq.n	8004a7a <QSPI_Config+0x16>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8004a72:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8004a74:	6804      	ldr	r4, [r0, #0]
 8004a76:	3b01      	subs	r3, #1
 8004a78:	6123      	str	r3, [r4, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8004a7a:	f8d1 9018 	ldr.w	r9, [r1, #24]
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8004a7e:	e9d1 7507 	ldrd	r7, r5, [r1, #28]
  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8004a82:	f1b9 0f00 	cmp.w	r9, #0
 8004a86:	d04f      	beq.n	8004b28 <QSPI_Config+0xc4>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004a88:	694b      	ldr	r3, [r1, #20]
 8004a8a:	ea46 0909 	orr.w	r9, r6, r9
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8004a8e:	6800      	ldr	r0, [r0, #0]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004a90:	f8d1 a000 	ldr.w	sl, [r1]
 8004a94:	ea4f 4c83 	mov.w	ip, r3, lsl #18
 8004a98:	f8d1 e034 	ldr.w	lr, [r1, #52]	; 0x34
 8004a9c:	ea49 0902 	orr.w	r9, r9, r2
 8004aa0:	e9d1 480b 	ldrd	r4, r8, [r1, #44]	; 0x2c
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8004aa4:	b335      	cbz	r5, 8004af4 <QSPI_Config+0x90>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8004aa6:	688b      	ldr	r3, [r1, #8]
 8004aa8:	ea49 0505 	orr.w	r5, r9, r5
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004aac:	690e      	ldr	r6, [r1, #16]
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8004aae:	61c3      	str	r3, [r0, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8004ab0:	b19f      	cbz	r7, 8004ada <QSPI_Config+0x76>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004ab2:	ea4a 0307 	orr.w	r3, sl, r7
 8004ab6:	4323      	orrs	r3, r4
 8004ab8:	68cc      	ldr	r4, [r1, #12]
 8004aba:	ea43 0308 	orr.w	r3, r3, r8
 8004abe:	ea43 030e 	orr.w	r3, r3, lr
 8004ac2:	4333      	orrs	r3, r6
 8004ac4:	4323      	orrs	r3, r4
 8004ac6:	ea43 030c 	orr.w	r3, r3, ip
 8004aca:	432b      	orrs	r3, r5
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateByteMode | cmd->AddressSize |
                                         cmd->AddressMode | cmd->InstructionMode | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8004acc:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004ad0:	6143      	str	r3, [r0, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8004ad2:	d00d      	beq.n	8004af0 <QSPI_Config+0x8c>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8004ad4:	684b      	ldr	r3, [r1, #4]
 8004ad6:	6183      	str	r3, [r0, #24]
 8004ad8:	e00a      	b.n	8004af0 <QSPI_Config+0x8c>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004ada:	ea4a 0304 	orr.w	r3, sl, r4
 8004ade:	ea43 0308 	orr.w	r3, r3, r8
 8004ae2:	ea43 030e 	orr.w	r3, r3, lr
 8004ae6:	4333      	orrs	r3, r6
 8004ae8:	ea43 030c 	orr.w	r3, r3, ip
 8004aec:	432b      	orrs	r3, r5
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004aee:	6143      	str	r3, [r0, #20]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 8004af0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8004af4:	b16f      	cbz	r7, 8004b12 <QSPI_Config+0xae>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004af6:	ea4a 0307 	orr.w	r3, sl, r7
 8004afa:	4323      	orrs	r3, r4
 8004afc:	68cc      	ldr	r4, [r1, #12]
 8004afe:	ea43 0308 	orr.w	r3, r3, r8
 8004b02:	ea43 030e 	orr.w	r3, r3, lr
 8004b06:	4323      	orrs	r3, r4
 8004b08:	ea43 030c 	orr.w	r3, r3, ip
 8004b0c:	ea43 0309 	orr.w	r3, r3, r9
 8004b10:	e7dc      	b.n	8004acc <QSPI_Config+0x68>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004b12:	ea4a 0304 	orr.w	r3, sl, r4
 8004b16:	ea43 0308 	orr.w	r3, r3, r8
 8004b1a:	ea43 030e 	orr.w	r3, r3, lr
 8004b1e:	ea43 030c 	orr.w	r3, r3, ip
 8004b22:	ea43 0309 	orr.w	r3, r3, r9
 8004b26:	e7e2      	b.n	8004aee <QSPI_Config+0x8a>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8004b28:	b365      	cbz	r5, 8004b84 <QSPI_Config+0x120>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8004b2a:	6804      	ldr	r4, [r0, #0]
 8004b2c:	688b      	ldr	r3, [r1, #8]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004b2e:	6908      	ldr	r0, [r1, #16]
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8004b30:	61e3      	str	r3, [r4, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8004b32:	ea46 0305 	orr.w	r3, r6, r5
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004b36:	694e      	ldr	r6, [r1, #20]
 8004b38:	ea43 0502 	orr.w	r5, r3, r2
 8004b3c:	f8d1 c034 	ldr.w	ip, [r1, #52]	; 0x34
 8004b40:	04b6      	lsls	r6, r6, #18
 8004b42:	e9d1 830b 	ldrd	r8, r3, [r1, #44]	; 0x2c
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8004b46:	b1a7      	cbz	r7, 8004b72 <QSPI_Config+0x10e>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004b48:	4338      	orrs	r0, r7
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8004b4a:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004b4e:	ea40 0008 	orr.w	r0, r0, r8
 8004b52:	ea43 0300 	orr.w	r3, r3, r0
 8004b56:	68c8      	ldr	r0, [r1, #12]
 8004b58:	ea43 030c 	orr.w	r3, r3, ip
 8004b5c:	ea43 0300 	orr.w	r3, r3, r0
 8004b60:	ea43 0306 	orr.w	r3, r3, r6
 8004b64:	ea43 0305 	orr.w	r3, r3, r5
 8004b68:	6163      	str	r3, [r4, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8004b6a:	d0c1      	beq.n	8004af0 <QSPI_Config+0x8c>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8004b6c:	684b      	ldr	r3, [r1, #4]
 8004b6e:	61a3      	str	r3, [r4, #24]
 8004b70:	e7be      	b.n	8004af0 <QSPI_Config+0x8c>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004b72:	ea40 0008 	orr.w	r0, r0, r8
 8004b76:	4303      	orrs	r3, r0
 8004b78:	ea43 030c 	orr.w	r3, r3, ip
 8004b7c:	4333      	orrs	r3, r6
 8004b7e:	432b      	orrs	r3, r5
 8004b80:	6163      	str	r3, [r4, #20]
 8004b82:	e7b5      	b.n	8004af0 <QSPI_Config+0x8c>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8004b84:	b17f      	cbz	r7, 8004ba6 <QSPI_Config+0x142>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004b86:	ea46 0307 	orr.w	r3, r6, r7
 8004b8a:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 8004b8c:	6800      	ldr	r0, [r0, #0]
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	4323      	orrs	r3, r4
 8004b92:	6b0c      	ldr	r4, [r1, #48]	; 0x30
 8004b94:	4323      	orrs	r3, r4
 8004b96:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 8004b98:	4323      	orrs	r3, r4
 8004b9a:	68cc      	ldr	r4, [r1, #12]
 8004b9c:	4323      	orrs	r3, r4
 8004b9e:	694c      	ldr	r4, [r1, #20]
 8004ba0:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
 8004ba4:	e792      	b.n	8004acc <QSPI_Config+0x68>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8004ba6:	2e00      	cmp	r6, #0
 8004ba8:	d0a2      	beq.n	8004af0 <QSPI_Config+0x8c>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004baa:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8004bac:	6800      	ldr	r0, [r0, #0]
 8004bae:	4333      	orrs	r3, r6
 8004bb0:	6b0e      	ldr	r6, [r1, #48]	; 0x30
 8004bb2:	431a      	orrs	r2, r3
 8004bb4:	694b      	ldr	r3, [r1, #20]
 8004bb6:	4332      	orrs	r2, r6
 8004bb8:	6b4e      	ldr	r6, [r1, #52]	; 0x34
 8004bba:	4332      	orrs	r2, r6
 8004bbc:	ea42 4283 	orr.w	r2, r2, r3, lsl #18
 8004bc0:	6142      	str	r2, [r0, #20]
}
 8004bc2:	e795      	b.n	8004af0 <QSPI_Config+0x8c>

08004bc4 <QSPI_WaitFlagStateUntilTimeout>:
{
 8004bc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bc8:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8004bcc:	4604      	mov	r4, r0
 8004bce:	460e      	mov	r6, r1
 8004bd0:	4615      	mov	r5, r2
 8004bd2:	461f      	mov	r7, r3
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004bd4:	6822      	ldr	r2, [r4, #0]
 8004bd6:	6893      	ldr	r3, [r2, #8]
 8004bd8:	4233      	tst	r3, r6
 8004bda:	bf14      	ite	ne
 8004bdc:	2301      	movne	r3, #1
 8004bde:	2300      	moveq	r3, #0
 8004be0:	42ab      	cmp	r3, r5
 8004be2:	d101      	bne.n	8004be8 <QSPI_WaitFlagStateUntilTimeout+0x24>
  return HAL_OK;
 8004be4:	2000      	movs	r0, #0
 8004be6:	e012      	b.n	8004c0e <QSPI_WaitFlagStateUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 8004be8:	f1b8 3fff 	cmp.w	r8, #4294967295
 8004bec:	d0f3      	beq.n	8004bd6 <QSPI_WaitFlagStateUntilTimeout+0x12>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bee:	f7fd febd 	bl	800296c <HAL_GetTick>
 8004bf2:	1bc0      	subs	r0, r0, r7
 8004bf4:	4540      	cmp	r0, r8
 8004bf6:	d802      	bhi.n	8004bfe <QSPI_WaitFlagStateUntilTimeout+0x3a>
 8004bf8:	f1b8 0f00 	cmp.w	r8, #0
 8004bfc:	d1ea      	bne.n	8004bd4 <QSPI_WaitFlagStateUntilTimeout+0x10>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8004bfe:	2304      	movs	r3, #4
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8004c00:	2001      	movs	r0, #1
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8004c02:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8004c06:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004c08:	f043 0301 	orr.w	r3, r3, #1
 8004c0c:	6463      	str	r3, [r4, #68]	; 0x44
}
 8004c0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08004c14 <HAL_QSPI_Init>:
{
 8004c14:	b530      	push	{r4, r5, lr}
 8004c16:	4604      	mov	r4, r0
 8004c18:	b085      	sub	sp, #20
  uint32_t tickstart = HAL_GetTick();
 8004c1a:	f7fd fea7 	bl	800296c <HAL_GetTick>
 8004c1e:	4603      	mov	r3, r0
  if(hqspi == NULL)
 8004c20:	2c00      	cmp	r4, #0
 8004c22:	d040      	beq.n	8004ca6 <HAL_QSPI_Init+0x92>
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8004c24:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8004c28:	b93a      	cbnz	r2, 8004c3a <HAL_QSPI_Init+0x26>
 8004c2a:	9003      	str	r0, [sp, #12]
    HAL_QSPI_MspInit(hqspi);
 8004c2c:	4620      	mov	r0, r4
 8004c2e:	f7fc fe69 	bl	8001904 <HAL_QSPI_MspInit>
  hqspi->Timeout = Timeout;
 8004c32:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c36:	9b03      	ldr	r3, [sp, #12]
 8004c38:	64a2      	str	r2, [r4, #72]	; 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8004c3a:	6820      	ldr	r0, [r4, #0]
 8004c3c:	68a1      	ldr	r1, [r4, #8]
 8004c3e:	6802      	ldr	r2, [r0, #0]
 8004c40:	3901      	subs	r1, #1
 8004c42:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 8004c46:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8004c4a:	2120      	movs	r1, #32
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8004c4c:	6002      	str	r2, [r0, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8004c4e:	4620      	mov	r0, r4
 8004c50:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8004c52:	9200      	str	r2, [sp, #0]
 8004c54:	2200      	movs	r2, #0
 8004c56:	f7ff ffb5 	bl	8004bc4 <QSPI_WaitFlagStateUntilTimeout>
  if(status == HAL_OK)
 8004c5a:	bb10      	cbnz	r0, 8004ca2 <HAL_QSPI_Init+0x8e>
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8004c5c:	6822      	ldr	r2, [r4, #0]
 8004c5e:	69e5      	ldr	r5, [r4, #28]
 8004c60:	68e3      	ldr	r3, [r4, #12]
 8004c62:	6811      	ldr	r1, [r2, #0]
 8004c64:	432b      	orrs	r3, r5
 8004c66:	6a25      	ldr	r5, [r4, #32]
 8004c68:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8004c6c:	432b      	orrs	r3, r5
 8004c6e:	6865      	ldr	r5, [r4, #4]
 8004c70:	f021 01d0 	bic.w	r1, r1, #208	; 0xd0
 8004c74:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 8004c78:	430b      	orrs	r3, r1
 8004c7a:	6013      	str	r3, [r2, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8004c7c:	6855      	ldr	r5, [r2, #4]
 8004c7e:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
 8004c82:	430b      	orrs	r3, r1
 8004c84:	6921      	ldr	r1, [r4, #16]
 8004c86:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8004c8a:	4908      	ldr	r1, [pc, #32]	; (8004cac <HAL_QSPI_Init+0x98>)
 8004c8c:	4029      	ands	r1, r5
 8004c8e:	430b      	orrs	r3, r1
 8004c90:	6053      	str	r3, [r2, #4]
    __HAL_QSPI_ENABLE(hqspi);
 8004c92:	6813      	ldr	r3, [r2, #0]
 8004c94:	f043 0301 	orr.w	r3, r3, #1
 8004c98:	6013      	str	r3, [r2, #0]
    hqspi->State = HAL_QSPI_STATE_READY;
 8004c9a:	2301      	movs	r3, #1
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004c9c:	6460      	str	r0, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_READY;
 8004c9e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
}
 8004ca2:	b005      	add	sp, #20
 8004ca4:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8004ca6:	2001      	movs	r0, #1
 8004ca8:	e7fb      	b.n	8004ca2 <HAL_QSPI_Init+0x8e>
 8004caa:	bf00      	nop
 8004cac:	ffe0f8fe 	.word	0xffe0f8fe

08004cb0 <HAL_QSPI_Command>:
{
 8004cb0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004cb4:	4604      	mov	r4, r0
 8004cb6:	b085      	sub	sp, #20
 8004cb8:	4617      	mov	r7, r2
 8004cba:	4689      	mov	r9, r1
  uint32_t tickstart = HAL_GetTick();
 8004cbc:	f7fd fe56 	bl	800296c <HAL_GetTick>
  __HAL_LOCK(hqspi);
 8004cc0:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 8004cc4:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 8004cc6:	2a01      	cmp	r2, #1
 8004cc8:	d033      	beq.n	8004d32 <HAL_QSPI_Command+0x82>
 8004cca:	2201      	movs	r2, #1
 8004ccc:	2602      	movs	r6, #2
 8004cce:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8004cd2:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8004cd6:	2a01      	cmp	r2, #1
 8004cd8:	fa5f f882 	uxtb.w	r8, r2
 8004cdc:	d127      	bne.n	8004d2e <HAL_QSPI_Command+0x7e>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004cde:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8004ce0:	9003      	str	r0, [sp, #12]
 8004ce2:	2120      	movs	r1, #32
 8004ce4:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004ce6:	6462      	str	r2, [r4, #68]	; 0x44
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8004ce8:	9700      	str	r7, [sp, #0]
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8004cea:	f884 6041 	strb.w	r6, [r4, #65]	; 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8004cee:	f7ff ff69 	bl	8004bc4 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8004cf2:	4605      	mov	r5, r0
 8004cf4:	b9a0      	cbnz	r0, 8004d20 <HAL_QSPI_Command+0x70>
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8004cf6:	4602      	mov	r2, r0
 8004cf8:	4649      	mov	r1, r9
 8004cfa:	4620      	mov	r0, r4
 8004cfc:	f7ff feb2 	bl	8004a64 <QSPI_Config>
      if (cmd->DataMode == QSPI_DATA_NONE)
 8004d00:	f8d9 2024 	ldr.w	r2, [r9, #36]	; 0x24
 8004d04:	9b03      	ldr	r3, [sp, #12]
 8004d06:	b94a      	cbnz	r2, 8004d1c <HAL_QSPI_Command+0x6c>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8004d08:	4642      	mov	r2, r8
 8004d0a:	4631      	mov	r1, r6
 8004d0c:	4620      	mov	r0, r4
 8004d0e:	9700      	str	r7, [sp, #0]
 8004d10:	f7ff ff58 	bl	8004bc4 <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 8004d14:	4605      	mov	r5, r0
 8004d16:	b918      	cbnz	r0, 8004d20 <HAL_QSPI_Command+0x70>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8004d18:	6823      	ldr	r3, [r4, #0]
 8004d1a:	60de      	str	r6, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 8004d1c:	f884 8041 	strb.w	r8, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 8004d20:	2300      	movs	r3, #0
 8004d22:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8004d26:	4628      	mov	r0, r5
 8004d28:	b005      	add	sp, #20
 8004d2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    status = HAL_BUSY;
 8004d2e:	4635      	mov	r5, r6
 8004d30:	e7f6      	b.n	8004d20 <HAL_QSPI_Command+0x70>
  __HAL_LOCK(hqspi);
 8004d32:	2502      	movs	r5, #2
 8004d34:	e7f7      	b.n	8004d26 <HAL_QSPI_Command+0x76>

08004d36 <HAL_QSPI_Transmit>:
{
 8004d36:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d38:	4604      	mov	r4, r0
 8004d3a:	b085      	sub	sp, #20
 8004d3c:	4616      	mov	r6, r2
 8004d3e:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 8004d40:	f7fd fe14 	bl	800296c <HAL_GetTick>
  __HAL_LOCK(hqspi);
 8004d44:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 8004d48:	4603      	mov	r3, r0
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8004d4a:	6825      	ldr	r5, [r4, #0]
  __HAL_LOCK(hqspi);
 8004d4c:	2a01      	cmp	r2, #1
 8004d4e:	d049      	beq.n	8004de4 <HAL_QSPI_Transmit+0xae>
 8004d50:	2201      	movs	r2, #1
 8004d52:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8004d56:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8004d5a:	2a01      	cmp	r2, #1
 8004d5c:	b2d0      	uxtb	r0, r2
 8004d5e:	d13f      	bne.n	8004de0 <HAL_QSPI_Transmit+0xaa>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004d60:	2200      	movs	r2, #0
 8004d62:	6462      	str	r2, [r4, #68]	; 0x44
    if(pData != NULL )
 8004d64:	2f00      	cmp	r7, #0
 8004d66:	d036      	beq.n	8004dd6 <HAL_QSPI_Transmit+0xa0>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 8004d68:	2212      	movs	r2, #18
 8004d6a:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8004d6e:	692a      	ldr	r2, [r5, #16]
 8004d70:	3201      	adds	r2, #1
 8004d72:	62e2      	str	r2, [r4, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8004d74:	692a      	ldr	r2, [r5, #16]
      hqspi->pTxBuffPtr = pData;
 8004d76:	6267      	str	r7, [r4, #36]	; 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8004d78:	3201      	adds	r2, #1
 8004d7a:	62a2      	str	r2, [r4, #40]	; 0x28
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8004d7c:	696a      	ldr	r2, [r5, #20]
 8004d7e:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8004d82:	616a      	str	r2, [r5, #20]
      while(hqspi->TxXferCount > 0U)
 8004d84:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004d86:	b98a      	cbnz	r2, 8004dac <HAL_QSPI_Transmit+0x76>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8004d88:	2201      	movs	r2, #1
 8004d8a:	2102      	movs	r1, #2
 8004d8c:	4620      	mov	r0, r4
 8004d8e:	9600      	str	r6, [sp, #0]
 8004d90:	f7ff ff18 	bl	8004bc4 <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 8004d94:	b910      	cbnz	r0, 8004d9c <HAL_QSPI_Transmit+0x66>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8004d96:	6823      	ldr	r3, [r4, #0]
 8004d98:	2202      	movs	r2, #2
 8004d9a:	60da      	str	r2, [r3, #12]
      hqspi->State = HAL_QSPI_STATE_READY;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 8004da2:	2300      	movs	r3, #0
 8004da4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8004da8:	b005      	add	sp, #20
 8004daa:	bdf0      	pop	{r4, r5, r6, r7, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 8004dac:	2201      	movs	r2, #1
 8004dae:	2104      	movs	r1, #4
 8004db0:	4620      	mov	r0, r4
 8004db2:	9600      	str	r6, [sp, #0]
 8004db4:	9303      	str	r3, [sp, #12]
 8004db6:	f7ff ff05 	bl	8004bc4 <QSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
 8004dba:	2800      	cmp	r0, #0
 8004dbc:	d1ee      	bne.n	8004d9c <HAL_QSPI_Transmit+0x66>
        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8004dbe:	6a62      	ldr	r2, [r4, #36]	; 0x24
        hqspi->TxXferCount--;
 8004dc0:	9b03      	ldr	r3, [sp, #12]
        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8004dc2:	7812      	ldrb	r2, [r2, #0]
 8004dc4:	f885 2020 	strb.w	r2, [r5, #32]
        hqspi->pTxBuffPtr++;
 8004dc8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004dca:	3201      	adds	r2, #1
 8004dcc:	6262      	str	r2, [r4, #36]	; 0x24
        hqspi->TxXferCount--;
 8004dce:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004dd0:	3a01      	subs	r2, #1
 8004dd2:	62e2      	str	r2, [r4, #44]	; 0x2c
 8004dd4:	e7d6      	b.n	8004d84 <HAL_QSPI_Transmit+0x4e>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8004dd6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004dd8:	f043 0308 	orr.w	r3, r3, #8
 8004ddc:	6463      	str	r3, [r4, #68]	; 0x44
      status = HAL_ERROR;
 8004dde:	e7e0      	b.n	8004da2 <HAL_QSPI_Transmit+0x6c>
    status = HAL_BUSY;
 8004de0:	2002      	movs	r0, #2
 8004de2:	e7de      	b.n	8004da2 <HAL_QSPI_Transmit+0x6c>
  __HAL_LOCK(hqspi);
 8004de4:	2002      	movs	r0, #2
 8004de6:	e7df      	b.n	8004da8 <HAL_QSPI_Transmit+0x72>

08004de8 <HAL_QSPI_Receive>:
{
 8004de8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004dea:	4604      	mov	r4, r0
 8004dec:	b085      	sub	sp, #20
 8004dee:	4616      	mov	r6, r2
 8004df0:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 8004df2:	f7fd fdbb 	bl	800296c <HAL_GetTick>
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8004df6:	6825      	ldr	r5, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
 8004df8:	4603      	mov	r3, r0
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8004dfa:	f8d5 c018 	ldr.w	ip, [r5, #24]
  __HAL_LOCK(hqspi);
 8004dfe:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 8004e02:	2a01      	cmp	r2, #1
 8004e04:	d04d      	beq.n	8004ea2 <HAL_QSPI_Receive+0xba>
 8004e06:	2201      	movs	r2, #1
 8004e08:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8004e0c:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8004e10:	2a01      	cmp	r2, #1
 8004e12:	b2d0      	uxtb	r0, r2
 8004e14:	d143      	bne.n	8004e9e <HAL_QSPI_Receive+0xb6>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004e16:	2200      	movs	r2, #0
 8004e18:	6462      	str	r2, [r4, #68]	; 0x44
    if(pData != NULL )
 8004e1a:	2f00      	cmp	r7, #0
 8004e1c:	d03a      	beq.n	8004e94 <HAL_QSPI_Receive+0xac>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 8004e1e:	2222      	movs	r2, #34	; 0x22
 8004e20:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8004e24:	692a      	ldr	r2, [r5, #16]
 8004e26:	3201      	adds	r2, #1
 8004e28:	63a2      	str	r2, [r4, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8004e2a:	692a      	ldr	r2, [r5, #16]
      hqspi->pRxBuffPtr = pData;
 8004e2c:	6327      	str	r7, [r4, #48]	; 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8004e2e:	3201      	adds	r2, #1
 8004e30:	6362      	str	r2, [r4, #52]	; 0x34
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8004e32:	6969      	ldr	r1, [r5, #20]
 8004e34:	f021 6140 	bic.w	r1, r1, #201326592	; 0xc000000
 8004e38:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
 8004e3c:	6169      	str	r1, [r5, #20]
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 8004e3e:	f8c5 c018 	str.w	ip, [r5, #24]
      while(hqspi->RxXferCount > 0U)
 8004e42:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004e44:	b98a      	cbnz	r2, 8004e6a <HAL_QSPI_Receive+0x82>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8004e46:	2201      	movs	r2, #1
 8004e48:	2102      	movs	r1, #2
 8004e4a:	4620      	mov	r0, r4
 8004e4c:	9600      	str	r6, [sp, #0]
 8004e4e:	f7ff feb9 	bl	8004bc4 <QSPI_WaitFlagStateUntilTimeout>
        if  (status == HAL_OK)
 8004e52:	b910      	cbnz	r0, 8004e5a <HAL_QSPI_Receive+0x72>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8004e54:	6823      	ldr	r3, [r4, #0]
 8004e56:	2202      	movs	r2, #2
 8004e58:	60da      	str	r2, [r3, #12]
      hqspi->State = HAL_QSPI_STATE_READY;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 8004e60:	2300      	movs	r3, #0
 8004e62:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8004e66:	b005      	add	sp, #20
 8004e68:	bdf0      	pop	{r4, r5, r6, r7, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	2106      	movs	r1, #6
 8004e6e:	4620      	mov	r0, r4
 8004e70:	9600      	str	r6, [sp, #0]
 8004e72:	9303      	str	r3, [sp, #12]
 8004e74:	f7ff fea6 	bl	8004bc4 <QSPI_WaitFlagStateUntilTimeout>
        if  (status != HAL_OK)
 8004e78:	2800      	cmp	r0, #0
 8004e7a:	d1ee      	bne.n	8004e5a <HAL_QSPI_Receive+0x72>
        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8004e7c:	f895 1020 	ldrb.w	r1, [r5, #32]
 8004e80:	6b22      	ldr	r2, [r4, #48]	; 0x30
        hqspi->RxXferCount--;
 8004e82:	9b03      	ldr	r3, [sp, #12]
        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8004e84:	7011      	strb	r1, [r2, #0]
        hqspi->pRxBuffPtr++;
 8004e86:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004e88:	3201      	adds	r2, #1
 8004e8a:	6322      	str	r2, [r4, #48]	; 0x30
        hqspi->RxXferCount--;
 8004e8c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004e8e:	3a01      	subs	r2, #1
 8004e90:	63a2      	str	r2, [r4, #56]	; 0x38
 8004e92:	e7d6      	b.n	8004e42 <HAL_QSPI_Receive+0x5a>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8004e94:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004e96:	f043 0308 	orr.w	r3, r3, #8
 8004e9a:	6463      	str	r3, [r4, #68]	; 0x44
      status = HAL_ERROR;
 8004e9c:	e7e0      	b.n	8004e60 <HAL_QSPI_Receive+0x78>
    status = HAL_BUSY;
 8004e9e:	2002      	movs	r0, #2
 8004ea0:	e7de      	b.n	8004e60 <HAL_QSPI_Receive+0x78>
  __HAL_LOCK(hqspi);
 8004ea2:	2002      	movs	r0, #2
 8004ea4:	e7df      	b.n	8004e66 <HAL_QSPI_Receive+0x7e>

08004ea6 <HAL_QSPI_AutoPolling>:
{
 8004ea6:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8004eaa:	4604      	mov	r4, r0
 8004eac:	4615      	mov	r5, r2
 8004eae:	461e      	mov	r6, r3
 8004eb0:	4688      	mov	r8, r1
  uint32_t tickstart = HAL_GetTick();
 8004eb2:	f7fd fd5b 	bl	800296c <HAL_GetTick>
  __HAL_LOCK(hqspi);
 8004eb6:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 8004eba:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 8004ebc:	2a01      	cmp	r2, #1
 8004ebe:	d040      	beq.n	8004f42 <HAL_QSPI_AutoPolling+0x9c>
 8004ec0:	2201      	movs	r2, #1
 8004ec2:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8004ec6:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8004eca:	2a01      	cmp	r2, #1
 8004ecc:	b2d7      	uxtb	r7, r2
 8004ece:	d136      	bne.n	8004f3e <HAL_QSPI_AutoPolling+0x98>
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8004ed0:	2142      	movs	r1, #66	; 0x42
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004ed2:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8004ed4:	9003      	str	r0, [sp, #12]
 8004ed6:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004ed8:	6462      	str	r2, [r4, #68]	; 0x44
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8004eda:	9600      	str	r6, [sp, #0]
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8004edc:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8004ee0:	2120      	movs	r1, #32
 8004ee2:	f7ff fe6f 	bl	8004bc4 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8004ee6:	bb20      	cbnz	r0, 8004f32 <HAL_QSPI_AutoPolling+0x8c>
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8004ee8:	6821      	ldr	r1, [r4, #0]
 8004eea:	682a      	ldr	r2, [r5, #0]
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8004eec:	6928      	ldr	r0, [r5, #16]
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8004eee:	628a      	str	r2, [r1, #40]	; 0x28
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 8004ef0:	686a      	ldr	r2, [r5, #4]
 8004ef2:	624a      	str	r2, [r1, #36]	; 0x24
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 8004ef4:	68aa      	ldr	r2, [r5, #8]
 8004ef6:	62ca      	str	r2, [r1, #44]	; 0x2c
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8004ef8:	680a      	ldr	r2, [r1, #0]
 8004efa:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8004efe:	4302      	orrs	r2, r0
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8004f00:	4620      	mov	r0, r4
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8004f02:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8004f06:	600a      	str	r2, [r1, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8004f08:	4641      	mov	r1, r8
      cmd->NbData = cfg->StatusBytesSize;
 8004f0a:	68ea      	ldr	r2, [r5, #12]
 8004f0c:	f8c8 2028 	str.w	r2, [r8, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8004f10:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004f14:	f7ff fda6 	bl	8004a64 <QSPI_Config>
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 8004f18:	9b03      	ldr	r3, [sp, #12]
 8004f1a:	463a      	mov	r2, r7
 8004f1c:	2108      	movs	r1, #8
 8004f1e:	4620      	mov	r0, r4
 8004f20:	9600      	str	r6, [sp, #0]
 8004f22:	f7ff fe4f 	bl	8004bc4 <QSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 8004f26:	b920      	cbnz	r0, 8004f32 <HAL_QSPI_AutoPolling+0x8c>
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 8004f28:	6823      	ldr	r3, [r4, #0]
 8004f2a:	2208      	movs	r2, #8
 8004f2c:	60da      	str	r2, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 8004f2e:	f884 7041 	strb.w	r7, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 8004f32:	2300      	movs	r3, #0
 8004f34:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8004f38:	b004      	add	sp, #16
 8004f3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    status = HAL_BUSY;
 8004f3e:	2002      	movs	r0, #2
 8004f40:	e7f7      	b.n	8004f32 <HAL_QSPI_AutoPolling+0x8c>
  __HAL_LOCK(hqspi);
 8004f42:	2002      	movs	r0, #2
 8004f44:	e7f8      	b.n	8004f38 <HAL_QSPI_AutoPolling+0x92>

08004f46 <HAL_QSPI_MemoryMapped>:
{
 8004f46:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004f48:	4604      	mov	r4, r0
 8004f4a:	4616      	mov	r6, r2
 8004f4c:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 8004f4e:	f7fd fd0d 	bl	800296c <HAL_GetTick>
  __HAL_LOCK(hqspi);
 8004f52:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 8004f56:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 8004f58:	2a01      	cmp	r2, #1
 8004f5a:	d033      	beq.n	8004fc4 <HAL_QSPI_MemoryMapped+0x7e>
 8004f5c:	2201      	movs	r2, #1
 8004f5e:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8004f62:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8004f66:	2a01      	cmp	r2, #1
 8004f68:	d12a      	bne.n	8004fc0 <HAL_QSPI_MemoryMapped+0x7a>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004f6a:	2200      	movs	r2, #0
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 8004f6c:	2182      	movs	r1, #130	; 0x82
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8004f6e:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004f70:	6462      	str	r2, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 8004f72:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8004f76:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8004f78:	9100      	str	r1, [sp, #0]
 8004f7a:	2120      	movs	r1, #32
 8004f7c:	f7ff fe22 	bl	8004bc4 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8004f80:	4605      	mov	r5, r0
 8004f82:	b9b8      	cbnz	r0, 8004fb4 <HAL_QSPI_MemoryMapped+0x6e>
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 8004f84:	6823      	ldr	r3, [r4, #0]
 8004f86:	6872      	ldr	r2, [r6, #4]
 8004f88:	6818      	ldr	r0, [r3, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 8004f8a:	2a08      	cmp	r2, #8
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 8004f8c:	f020 0008 	bic.w	r0, r0, #8
 8004f90:	ea40 0002 	orr.w	r0, r0, r2
 8004f94:	6018      	str	r0, [r3, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 8004f96:	d107      	bne.n	8004fa8 <HAL_QSPI_MemoryMapped+0x62>
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 8004f98:	6832      	ldr	r2, [r6, #0]
 8004f9a:	631a      	str	r2, [r3, #48]	; 0x30
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 8004f9c:	2210      	movs	r2, #16
 8004f9e:	60da      	str	r2, [r3, #12]
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 8004fa0:	681a      	ldr	r2, [r3, #0]
 8004fa2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004fa6:	601a      	str	r2, [r3, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 8004fa8:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8004fac:	4639      	mov	r1, r7
 8004fae:	4620      	mov	r0, r4
 8004fb0:	f7ff fd58 	bl	8004a64 <QSPI_Config>
  __HAL_UNLOCK(hqspi);
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8004fba:	4628      	mov	r0, r5
 8004fbc:	b003      	add	sp, #12
 8004fbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    status = HAL_BUSY;
 8004fc0:	2502      	movs	r5, #2
 8004fc2:	e7f7      	b.n	8004fb4 <HAL_QSPI_MemoryMapped+0x6e>
  __HAL_LOCK(hqspi);
 8004fc4:	2502      	movs	r5, #2
 8004fc6:	e7f8      	b.n	8004fba <HAL_QSPI_MemoryMapped+0x74>

08004fc8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004fca:	4604      	mov	r4, r0
 8004fcc:	b908      	cbnz	r0, 8004fd2 <HAL_RCC_OscConfig+0xa>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
      {
        return HAL_ERROR;
 8004fce:	2001      	movs	r0, #1
 8004fd0:	e08b      	b.n	80050ea <HAL_RCC_OscConfig+0x122>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004fd2:	6803      	ldr	r3, [r0, #0]
 8004fd4:	07df      	lsls	r7, r3, #31
 8004fd6:	d45e      	bmi.n	8005096 <HAL_RCC_OscConfig+0xce>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004fd8:	6823      	ldr	r3, [r4, #0]
 8004fda:	079e      	lsls	r6, r3, #30
 8004fdc:	f100 80af 	bmi.w	800513e <HAL_RCC_OscConfig+0x176>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004fe0:	6823      	ldr	r3, [r4, #0]
 8004fe2:	06da      	lsls	r2, r3, #27
 8004fe4:	d527      	bpl.n	8005036 <HAL_RCC_OscConfig+0x6e>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004fe6:	4b9e      	ldr	r3, [pc, #632]	; (8005260 <HAL_RCC_OscConfig+0x298>)
 8004fe8:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004fea:	6a99      	ldr	r1, [r3, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004fec:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004ff0:	2a08      	cmp	r2, #8
 8004ff2:	d007      	beq.n	8005004 <HAL_RCC_OscConfig+0x3c>
 8004ff4:	2a18      	cmp	r2, #24
 8004ff6:	f040 8107 	bne.w	8005208 <HAL_RCC_OscConfig+0x240>
 8004ffa:	f001 0203 	and.w	r2, r1, #3
 8004ffe:	2a01      	cmp	r2, #1
 8005000:	f040 8102 	bne.w	8005208 <HAL_RCC_OscConfig+0x240>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	05db      	lsls	r3, r3, #23
 8005008:	d502      	bpl.n	8005010 <HAL_RCC_OscConfig+0x48>
 800500a:	69e3      	ldr	r3, [r4, #28]
 800500c:	2b80      	cmp	r3, #128	; 0x80
 800500e:	d1de      	bne.n	8004fce <HAL_RCC_OscConfig+0x6>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005010:	f7fd fcc8 	bl	80029a4 <HAL_GetREVID>
 8005014:	f241 0303 	movw	r3, #4099	; 0x1003
 8005018:	6a21      	ldr	r1, [r4, #32]
 800501a:	4298      	cmp	r0, r3
 800501c:	4b90      	ldr	r3, [pc, #576]	; (8005260 <HAL_RCC_OscConfig+0x298>)
 800501e:	f200 80ec 	bhi.w	80051fa <HAL_RCC_OscConfig+0x232>
 8005022:	685a      	ldr	r2, [r3, #4]
 8005024:	2920      	cmp	r1, #32
 8005026:	f022 42f8 	bic.w	r2, r2, #2080374784	; 0x7c000000
 800502a:	bf0c      	ite	eq
 800502c:	f042 4280 	orreq.w	r2, r2, #1073741824	; 0x40000000
 8005030:	ea42 6281 	orrne.w	r2, r2, r1, lsl #26
 8005034:	605a      	str	r2, [r3, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005036:	6823      	ldr	r3, [r4, #0]
 8005038:	0719      	lsls	r1, r3, #28
 800503a:	f100 8127 	bmi.w	800528c <HAL_RCC_OscConfig+0x2c4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800503e:	6823      	ldr	r3, [r4, #0]
 8005040:	069a      	lsls	r2, r3, #26
 8005042:	f100 8148 	bmi.w	80052d6 <HAL_RCC_OscConfig+0x30e>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005046:	6823      	ldr	r3, [r4, #0]
 8005048:	075d      	lsls	r5, r3, #29
 800504a:	d51e      	bpl.n	800508a <HAL_RCC_OscConfig+0xc2>
    PWR->CR1 |= PWR_CR1_DBP;
 800504c:	4d85      	ldr	r5, [pc, #532]	; (8005264 <HAL_RCC_OscConfig+0x29c>)
 800504e:	682b      	ldr	r3, [r5, #0]
 8005050:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005054:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8005056:	f7fd fc89 	bl	800296c <HAL_GetTick>
 800505a:	4606      	mov	r6, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800505c:	682b      	ldr	r3, [r5, #0]
 800505e:	05da      	lsls	r2, r3, #23
 8005060:	f140 815e 	bpl.w	8005320 <HAL_RCC_OscConfig+0x358>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005064:	68a3      	ldr	r3, [r4, #8]
 8005066:	4d7e      	ldr	r5, [pc, #504]	; (8005260 <HAL_RCC_OscConfig+0x298>)
 8005068:	2b01      	cmp	r3, #1
 800506a:	f040 8160 	bne.w	800532e <HAL_RCC_OscConfig+0x366>
 800506e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8005070:	f043 0301 	orr.w	r3, r3, #1
 8005074:	672b      	str	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005076:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800507a:	f7fd fc77 	bl	800296c <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800507e:	4e78      	ldr	r6, [pc, #480]	; (8005260 <HAL_RCC_OscConfig+0x298>)
      tickstart = HAL_GetTick();
 8005080:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005082:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8005084:	079b      	lsls	r3, r3, #30
 8005086:	f140 8178 	bpl.w	800537a <HAL_RCC_OscConfig+0x3b2>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800508a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800508c:	2800      	cmp	r0, #0
 800508e:	f040 817b 	bne.w	8005388 <HAL_RCC_OscConfig+0x3c0>
          __HAL_RCC_PLLFRACN_ENABLE();
        }
      }
    }
  }
  return HAL_OK;
 8005092:	2000      	movs	r0, #0
 8005094:	e029      	b.n	80050ea <HAL_RCC_OscConfig+0x122>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005096:	4b72      	ldr	r3, [pc, #456]	; (8005260 <HAL_RCC_OscConfig+0x298>)
 8005098:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800509a:	6a99      	ldr	r1, [r3, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800509c:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80050a0:	2a10      	cmp	r2, #16
 80050a2:	d005      	beq.n	80050b0 <HAL_RCC_OscConfig+0xe8>
 80050a4:	2a18      	cmp	r2, #24
 80050a6:	d10a      	bne.n	80050be <HAL_RCC_OscConfig+0xf6>
 80050a8:	f001 0203 	and.w	r2, r1, #3
 80050ac:	2a02      	cmp	r2, #2
 80050ae:	d106      	bne.n	80050be <HAL_RCC_OscConfig+0xf6>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	039d      	lsls	r5, r3, #14
 80050b4:	d590      	bpl.n	8004fd8 <HAL_RCC_OscConfig+0x10>
 80050b6:	6863      	ldr	r3, [r4, #4]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d18d      	bne.n	8004fd8 <HAL_RCC_OscConfig+0x10>
 80050bc:	e787      	b.n	8004fce <HAL_RCC_OscConfig+0x6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80050be:	6862      	ldr	r2, [r4, #4]
 80050c0:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80050c4:	d112      	bne.n	80050ec <HAL_RCC_OscConfig+0x124>
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80050cc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80050ce:	f7fd fc4d 	bl	800296c <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80050d2:	4e63      	ldr	r6, [pc, #396]	; (8005260 <HAL_RCC_OscConfig+0x298>)
        tickstart = HAL_GetTick();
 80050d4:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80050d6:	6833      	ldr	r3, [r6, #0]
 80050d8:	0398      	lsls	r0, r3, #14
 80050da:	f53f af7d 	bmi.w	8004fd8 <HAL_RCC_OscConfig+0x10>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050de:	f7fd fc45 	bl	800296c <HAL_GetTick>
 80050e2:	1b40      	subs	r0, r0, r5
 80050e4:	2864      	cmp	r0, #100	; 0x64
 80050e6:	d9f6      	bls.n	80050d6 <HAL_RCC_OscConfig+0x10e>
            return HAL_TIMEOUT;
 80050e8:	2003      	movs	r0, #3
}
 80050ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80050ec:	4d5c      	ldr	r5, [pc, #368]	; (8005260 <HAL_RCC_OscConfig+0x298>)
 80050ee:	682b      	ldr	r3, [r5, #0]
 80050f0:	b99a      	cbnz	r2, 800511a <HAL_RCC_OscConfig+0x152>
 80050f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050f6:	602b      	str	r3, [r5, #0]
 80050f8:	682b      	ldr	r3, [r5, #0]
 80050fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80050fe:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8005100:	f7fd fc34 	bl	800296c <HAL_GetTick>
 8005104:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005106:	682b      	ldr	r3, [r5, #0]
 8005108:	0399      	lsls	r1, r3, #14
 800510a:	f57f af65 	bpl.w	8004fd8 <HAL_RCC_OscConfig+0x10>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800510e:	f7fd fc2d 	bl	800296c <HAL_GetTick>
 8005112:	1b80      	subs	r0, r0, r6
 8005114:	2864      	cmp	r0, #100	; 0x64
 8005116:	d9f6      	bls.n	8005106 <HAL_RCC_OscConfig+0x13e>
 8005118:	e7e6      	b.n	80050e8 <HAL_RCC_OscConfig+0x120>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800511a:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 800511e:	d107      	bne.n	8005130 <HAL_RCC_OscConfig+0x168>
 8005120:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005124:	602b      	str	r3, [r5, #0]
 8005126:	682b      	ldr	r3, [r5, #0]
 8005128:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800512c:	602b      	str	r3, [r5, #0]
 800512e:	e7ce      	b.n	80050ce <HAL_RCC_OscConfig+0x106>
 8005130:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005134:	602b      	str	r3, [r5, #0]
 8005136:	682b      	ldr	r3, [r5, #0]
 8005138:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800513c:	e7f6      	b.n	800512c <HAL_RCC_OscConfig+0x164>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800513e:	4b48      	ldr	r3, [pc, #288]	; (8005260 <HAL_RCC_OscConfig+0x298>)
 8005140:	68e1      	ldr	r1, [r4, #12]
 8005142:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005144:	6a98      	ldr	r0, [r3, #40]	; 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005146:	f012 0238 	ands.w	r2, r2, #56	; 0x38
 800514a:	d003      	beq.n	8005154 <HAL_RCC_OscConfig+0x18c>
 800514c:	2a18      	cmp	r2, #24
 800514e:	d12b      	bne.n	80051a8 <HAL_RCC_OscConfig+0x1e0>
 8005150:	0782      	lsls	r2, r0, #30
 8005152:	d129      	bne.n	80051a8 <HAL_RCC_OscConfig+0x1e0>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	075b      	lsls	r3, r3, #29
 8005158:	d502      	bpl.n	8005160 <HAL_RCC_OscConfig+0x198>
 800515a:	2900      	cmp	r1, #0
 800515c:	f43f af37 	beq.w	8004fce <HAL_RCC_OscConfig+0x6>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005160:	4d3f      	ldr	r5, [pc, #252]	; (8005260 <HAL_RCC_OscConfig+0x298>)
 8005162:	682a      	ldr	r2, [r5, #0]
 8005164:	f022 0219 	bic.w	r2, r2, #25
 8005168:	430a      	orrs	r2, r1
 800516a:	602a      	str	r2, [r5, #0]
        tickstart = HAL_GetTick();
 800516c:	f7fd fbfe 	bl	800296c <HAL_GetTick>
 8005170:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005172:	682b      	ldr	r3, [r5, #0]
 8005174:	075f      	lsls	r7, r3, #29
 8005176:	d511      	bpl.n	800519c <HAL_RCC_OscConfig+0x1d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005178:	f7fd fc14 	bl	80029a4 <HAL_GetREVID>
 800517c:	f241 0303 	movw	r3, #4099	; 0x1003
 8005180:	6922      	ldr	r2, [r4, #16]
 8005182:	4298      	cmp	r0, r3
 8005184:	686b      	ldr	r3, [r5, #4]
 8005186:	d822      	bhi.n	80051ce <HAL_RCC_OscConfig+0x206>
 8005188:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800518c:	2a40      	cmp	r2, #64	; 0x40
 800518e:	bf0c      	ite	eq
 8005190:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
 8005194:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 8005198:	606b      	str	r3, [r5, #4]
 800519a:	e721      	b.n	8004fe0 <HAL_RCC_OscConfig+0x18>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800519c:	f7fd fbe6 	bl	800296c <HAL_GetTick>
 80051a0:	1b80      	subs	r0, r0, r6
 80051a2:	2802      	cmp	r0, #2
 80051a4:	d9e5      	bls.n	8005172 <HAL_RCC_OscConfig+0x1aa>
 80051a6:	e79f      	b.n	80050e8 <HAL_RCC_OscConfig+0x120>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80051a8:	681a      	ldr	r2, [r3, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80051aa:	b1a9      	cbz	r1, 80051d8 <HAL_RCC_OscConfig+0x210>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80051ac:	f022 0219 	bic.w	r2, r2, #25
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80051b0:	4d2b      	ldr	r5, [pc, #172]	; (8005260 <HAL_RCC_OscConfig+0x298>)
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80051b2:	430a      	orrs	r2, r1
 80051b4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80051b6:	f7fd fbd9 	bl	800296c <HAL_GetTick>
 80051ba:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80051bc:	682b      	ldr	r3, [r5, #0]
 80051be:	0758      	lsls	r0, r3, #29
 80051c0:	d4da      	bmi.n	8005178 <HAL_RCC_OscConfig+0x1b0>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051c2:	f7fd fbd3 	bl	800296c <HAL_GetTick>
 80051c6:	1b80      	subs	r0, r0, r6
 80051c8:	2802      	cmp	r0, #2
 80051ca:	d9f7      	bls.n	80051bc <HAL_RCC_OscConfig+0x1f4>
 80051cc:	e78c      	b.n	80050e8 <HAL_RCC_OscConfig+0x120>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051ce:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80051d2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80051d6:	e7df      	b.n	8005198 <HAL_RCC_OscConfig+0x1d0>
        __HAL_RCC_HSI_DISABLE();
 80051d8:	f022 0201 	bic.w	r2, r2, #1
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80051dc:	4e20      	ldr	r6, [pc, #128]	; (8005260 <HAL_RCC_OscConfig+0x298>)
        __HAL_RCC_HSI_DISABLE();
 80051de:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80051e0:	f7fd fbc4 	bl	800296c <HAL_GetTick>
 80051e4:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80051e6:	6833      	ldr	r3, [r6, #0]
 80051e8:	0759      	lsls	r1, r3, #29
 80051ea:	f57f aef9 	bpl.w	8004fe0 <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051ee:	f7fd fbbd 	bl	800296c <HAL_GetTick>
 80051f2:	1b40      	subs	r0, r0, r5
 80051f4:	2802      	cmp	r0, #2
 80051f6:	d9f6      	bls.n	80051e6 <HAL_RCC_OscConfig+0x21e>
 80051f8:	e776      	b.n	80050e8 <HAL_RCC_OscConfig+0x120>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80051fa:	68da      	ldr	r2, [r3, #12]
 80051fc:	f022 527c 	bic.w	r2, r2, #1056964608	; 0x3f000000
 8005200:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8005204:	60da      	str	r2, [r3, #12]
 8005206:	e716      	b.n	8005036 <HAL_RCC_OscConfig+0x6e>
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005208:	69e2      	ldr	r2, [r4, #28]
 800520a:	b36a      	cbz	r2, 8005268 <HAL_RCC_OscConfig+0x2a0>
        __HAL_RCC_CSI_ENABLE();
 800520c:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800520e:	4d14      	ldr	r5, [pc, #80]	; (8005260 <HAL_RCC_OscConfig+0x298>)
        __HAL_RCC_CSI_ENABLE();
 8005210:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005214:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8005216:	f7fd fba9 	bl	800296c <HAL_GetTick>
 800521a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800521c:	682b      	ldr	r3, [r5, #0]
 800521e:	05df      	lsls	r7, r3, #23
 8005220:	d511      	bpl.n	8005246 <HAL_RCC_OscConfig+0x27e>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005222:	f7fd fbbf 	bl	80029a4 <HAL_GetREVID>
 8005226:	f241 0303 	movw	r3, #4099	; 0x1003
 800522a:	6a22      	ldr	r2, [r4, #32]
 800522c:	4298      	cmp	r0, r3
 800522e:	d810      	bhi.n	8005252 <HAL_RCC_OscConfig+0x28a>
 8005230:	686b      	ldr	r3, [r5, #4]
 8005232:	2a20      	cmp	r2, #32
 8005234:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005238:	bf0c      	ite	eq
 800523a:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 800523e:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 8005242:	606b      	str	r3, [r5, #4]
 8005244:	e6f7      	b.n	8005036 <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005246:	f7fd fb91 	bl	800296c <HAL_GetTick>
 800524a:	1b80      	subs	r0, r0, r6
 800524c:	2802      	cmp	r0, #2
 800524e:	d9e5      	bls.n	800521c <HAL_RCC_OscConfig+0x254>
 8005250:	e74a      	b.n	80050e8 <HAL_RCC_OscConfig+0x120>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005252:	68eb      	ldr	r3, [r5, #12]
 8005254:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8005258:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800525c:	60eb      	str	r3, [r5, #12]
 800525e:	e6ea      	b.n	8005036 <HAL_RCC_OscConfig+0x6e>
 8005260:	58024400 	.word	0x58024400
 8005264:	58024800 	.word	0x58024800
        __HAL_RCC_CSI_DISABLE();
 8005268:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800526a:	4e88      	ldr	r6, [pc, #544]	; (800548c <HAL_RCC_OscConfig+0x4c4>)
        __HAL_RCC_CSI_DISABLE();
 800526c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005270:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8005272:	f7fd fb7b 	bl	800296c <HAL_GetTick>
 8005276:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005278:	6833      	ldr	r3, [r6, #0]
 800527a:	05d8      	lsls	r0, r3, #23
 800527c:	f57f aedb 	bpl.w	8005036 <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005280:	f7fd fb74 	bl	800296c <HAL_GetTick>
 8005284:	1b40      	subs	r0, r0, r5
 8005286:	2802      	cmp	r0, #2
 8005288:	d9f6      	bls.n	8005278 <HAL_RCC_OscConfig+0x2b0>
 800528a:	e72d      	b.n	80050e8 <HAL_RCC_OscConfig+0x120>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800528c:	6963      	ldr	r3, [r4, #20]
 800528e:	4d7f      	ldr	r5, [pc, #508]	; (800548c <HAL_RCC_OscConfig+0x4c4>)
 8005290:	b183      	cbz	r3, 80052b4 <HAL_RCC_OscConfig+0x2ec>
      __HAL_RCC_LSI_ENABLE();
 8005292:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8005294:	f043 0301 	orr.w	r3, r3, #1
 8005298:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 800529a:	f7fd fb67 	bl	800296c <HAL_GetTick>
 800529e:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80052a0:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80052a2:	079b      	lsls	r3, r3, #30
 80052a4:	f53f aecb 	bmi.w	800503e <HAL_RCC_OscConfig+0x76>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052a8:	f7fd fb60 	bl	800296c <HAL_GetTick>
 80052ac:	1b80      	subs	r0, r0, r6
 80052ae:	2802      	cmp	r0, #2
 80052b0:	d9f6      	bls.n	80052a0 <HAL_RCC_OscConfig+0x2d8>
 80052b2:	e719      	b.n	80050e8 <HAL_RCC_OscConfig+0x120>
      __HAL_RCC_LSI_DISABLE();
 80052b4:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80052b6:	f023 0301 	bic.w	r3, r3, #1
 80052ba:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 80052bc:	f7fd fb56 	bl	800296c <HAL_GetTick>
 80052c0:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80052c2:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80052c4:	079f      	lsls	r7, r3, #30
 80052c6:	f57f aeba 	bpl.w	800503e <HAL_RCC_OscConfig+0x76>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052ca:	f7fd fb4f 	bl	800296c <HAL_GetTick>
 80052ce:	1b80      	subs	r0, r0, r6
 80052d0:	2802      	cmp	r0, #2
 80052d2:	d9f6      	bls.n	80052c2 <HAL_RCC_OscConfig+0x2fa>
 80052d4:	e708      	b.n	80050e8 <HAL_RCC_OscConfig+0x120>
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80052d6:	69a3      	ldr	r3, [r4, #24]
 80052d8:	4d6c      	ldr	r5, [pc, #432]	; (800548c <HAL_RCC_OscConfig+0x4c4>)
 80052da:	b183      	cbz	r3, 80052fe <HAL_RCC_OscConfig+0x336>
      __HAL_RCC_HSI48_ENABLE();
 80052dc:	682b      	ldr	r3, [r5, #0]
 80052de:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80052e2:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80052e4:	f7fd fb42 	bl	800296c <HAL_GetTick>
 80052e8:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80052ea:	682b      	ldr	r3, [r5, #0]
 80052ec:	0498      	lsls	r0, r3, #18
 80052ee:	f53f aeaa 	bmi.w	8005046 <HAL_RCC_OscConfig+0x7e>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80052f2:	f7fd fb3b 	bl	800296c <HAL_GetTick>
 80052f6:	1b80      	subs	r0, r0, r6
 80052f8:	2802      	cmp	r0, #2
 80052fa:	d9f6      	bls.n	80052ea <HAL_RCC_OscConfig+0x322>
 80052fc:	e6f4      	b.n	80050e8 <HAL_RCC_OscConfig+0x120>
      __HAL_RCC_HSI48_DISABLE();
 80052fe:	682b      	ldr	r3, [r5, #0]
 8005300:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005304:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8005306:	f7fd fb31 	bl	800296c <HAL_GetTick>
 800530a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800530c:	682b      	ldr	r3, [r5, #0]
 800530e:	0499      	lsls	r1, r3, #18
 8005310:	f57f ae99 	bpl.w	8005046 <HAL_RCC_OscConfig+0x7e>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005314:	f7fd fb2a 	bl	800296c <HAL_GetTick>
 8005318:	1b80      	subs	r0, r0, r6
 800531a:	2802      	cmp	r0, #2
 800531c:	d9f6      	bls.n	800530c <HAL_RCC_OscConfig+0x344>
 800531e:	e6e3      	b.n	80050e8 <HAL_RCC_OscConfig+0x120>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005320:	f7fd fb24 	bl	800296c <HAL_GetTick>
 8005324:	1b80      	subs	r0, r0, r6
 8005326:	2864      	cmp	r0, #100	; 0x64
 8005328:	f67f ae98 	bls.w	800505c <HAL_RCC_OscConfig+0x94>
 800532c:	e6dc      	b.n	80050e8 <HAL_RCC_OscConfig+0x120>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800532e:	b9b3      	cbnz	r3, 800535e <HAL_RCC_OscConfig+0x396>
 8005330:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005332:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005336:	f023 0301 	bic.w	r3, r3, #1
 800533a:	672b      	str	r3, [r5, #112]	; 0x70
 800533c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800533e:	f023 0304 	bic.w	r3, r3, #4
 8005342:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8005344:	f7fd fb12 	bl	800296c <HAL_GetTick>
 8005348:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800534a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800534c:	0798      	lsls	r0, r3, #30
 800534e:	f57f ae9c 	bpl.w	800508a <HAL_RCC_OscConfig+0xc2>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005352:	f7fd fb0b 	bl	800296c <HAL_GetTick>
 8005356:	1b80      	subs	r0, r0, r6
 8005358:	42b8      	cmp	r0, r7
 800535a:	d9f6      	bls.n	800534a <HAL_RCC_OscConfig+0x382>
 800535c:	e6c4      	b.n	80050e8 <HAL_RCC_OscConfig+0x120>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800535e:	2b05      	cmp	r3, #5
 8005360:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8005362:	d103      	bne.n	800536c <HAL_RCC_OscConfig+0x3a4>
 8005364:	f043 0304 	orr.w	r3, r3, #4
 8005368:	672b      	str	r3, [r5, #112]	; 0x70
 800536a:	e680      	b.n	800506e <HAL_RCC_OscConfig+0xa6>
 800536c:	f023 0301 	bic.w	r3, r3, #1
 8005370:	672b      	str	r3, [r5, #112]	; 0x70
 8005372:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8005374:	f023 0304 	bic.w	r3, r3, #4
 8005378:	e67c      	b.n	8005074 <HAL_RCC_OscConfig+0xac>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800537a:	f7fd faf7 	bl	800296c <HAL_GetTick>
 800537e:	1b40      	subs	r0, r0, r5
 8005380:	42b8      	cmp	r0, r7
 8005382:	f67f ae7e 	bls.w	8005082 <HAL_RCC_OscConfig+0xba>
 8005386:	e6af      	b.n	80050e8 <HAL_RCC_OscConfig+0x120>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005388:	4d40      	ldr	r5, [pc, #256]	; (800548c <HAL_RCC_OscConfig+0x4c4>)
 800538a:	692b      	ldr	r3, [r5, #16]
 800538c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005390:	2b18      	cmp	r3, #24
 8005392:	d07d      	beq.n	8005490 <HAL_RCC_OscConfig+0x4c8>
        __HAL_RCC_PLL_DISABLE();
 8005394:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005396:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8005398:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800539c:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800539e:	d167      	bne.n	8005470 <HAL_RCC_OscConfig+0x4a8>
        tickstart = HAL_GetTick();
 80053a0:	f7fd fae4 	bl	800296c <HAL_GetTick>
 80053a4:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80053a6:	682b      	ldr	r3, [r5, #0]
 80053a8:	0199      	lsls	r1, r3, #6
 80053aa:	d45b      	bmi.n	8005464 <HAL_RCC_OscConfig+0x49c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80053ac:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80053ae:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80053b0:	f423 737c 	bic.w	r3, r3, #1008	; 0x3f0
 80053b4:	f023 0303 	bic.w	r3, r3, #3
 80053b8:	4313      	orrs	r3, r2
 80053ba:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80053bc:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80053c0:	62ab      	str	r3, [r5, #40]	; 0x28
 80053c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80053c4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80053c6:	3b01      	subs	r3, #1
 80053c8:	3a01      	subs	r2, #1
 80053ca:	025b      	lsls	r3, r3, #9
 80053cc:	0412      	lsls	r2, r2, #16
 80053ce:	b29b      	uxth	r3, r3
 80053d0:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80053d4:	4313      	orrs	r3, r2
 80053d6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80053d8:	3a01      	subs	r2, #1
 80053da:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80053de:	4313      	orrs	r3, r2
 80053e0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80053e2:	3a01      	subs	r2, #1
 80053e4:	0612      	lsls	r2, r2, #24
 80053e6:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80053ea:	4313      	orrs	r3, r2
 80053ec:	632b      	str	r3, [r5, #48]	; 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
 80053ee:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80053f0:	f023 0301 	bic.w	r3, r3, #1
 80053f4:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80053f6:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80053f8:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80053fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80053fe:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8005402:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8005406:	636b      	str	r3, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005408:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800540a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800540c:	f023 030c 	bic.w	r3, r3, #12
 8005410:	4313      	orrs	r3, r2
 8005412:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005414:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8005416:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8005418:	f023 0302 	bic.w	r3, r3, #2
 800541c:	4313      	orrs	r3, r2
 800541e:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005420:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8005422:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005426:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005428:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800542a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800542e:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005430:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8005432:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005436:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
 8005438:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800543a:	f043 0301 	orr.w	r3, r3, #1
 800543e:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 8005440:	682b      	ldr	r3, [r5, #0]
 8005442:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005446:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8005448:	f7fd fa90 	bl	800296c <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800544c:	4d0f      	ldr	r5, [pc, #60]	; (800548c <HAL_RCC_OscConfig+0x4c4>)
        tickstart = HAL_GetTick();
 800544e:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005450:	682b      	ldr	r3, [r5, #0]
 8005452:	019a      	lsls	r2, r3, #6
 8005454:	f53f ae1d 	bmi.w	8005092 <HAL_RCC_OscConfig+0xca>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005458:	f7fd fa88 	bl	800296c <HAL_GetTick>
 800545c:	1b00      	subs	r0, r0, r4
 800545e:	2802      	cmp	r0, #2
 8005460:	d9f6      	bls.n	8005450 <HAL_RCC_OscConfig+0x488>
 8005462:	e641      	b.n	80050e8 <HAL_RCC_OscConfig+0x120>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005464:	f7fd fa82 	bl	800296c <HAL_GetTick>
 8005468:	1b80      	subs	r0, r0, r6
 800546a:	2802      	cmp	r0, #2
 800546c:	d99b      	bls.n	80053a6 <HAL_RCC_OscConfig+0x3de>
 800546e:	e63b      	b.n	80050e8 <HAL_RCC_OscConfig+0x120>
        tickstart = HAL_GetTick();
 8005470:	f7fd fa7c 	bl	800296c <HAL_GetTick>
 8005474:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005476:	682b      	ldr	r3, [r5, #0]
 8005478:	019b      	lsls	r3, r3, #6
 800547a:	f57f ae0a 	bpl.w	8005092 <HAL_RCC_OscConfig+0xca>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800547e:	f7fd fa75 	bl	800296c <HAL_GetTick>
 8005482:	1b00      	subs	r0, r0, r4
 8005484:	2802      	cmp	r0, #2
 8005486:	d9f6      	bls.n	8005476 <HAL_RCC_OscConfig+0x4ae>
 8005488:	e62e      	b.n	80050e8 <HAL_RCC_OscConfig+0x120>
 800548a:	bf00      	nop
 800548c:	58024400 	.word	0x58024400
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005490:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005492:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005494:	6b2b      	ldr	r3, [r5, #48]	; 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005496:	f43f ae28 	beq.w	80050ea <HAL_RCC_OscConfig+0x122>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800549a:	f002 0103 	and.w	r1, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800549e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80054a0:	4281      	cmp	r1, r0
 80054a2:	f47f ad94 	bne.w	8004fce <HAL_RCC_OscConfig+0x6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80054a6:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054aa:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80054ac:	428a      	cmp	r2, r1
 80054ae:	f47f ad8e 	bne.w	8004fce <HAL_RCC_OscConfig+0x6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80054b2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80054b4:	f3c3 0108 	ubfx	r1, r3, #0, #9
 80054b8:	3a01      	subs	r2, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80054ba:	4291      	cmp	r1, r2
 80054bc:	f47f ad87 	bne.w	8004fce <HAL_RCC_OscConfig+0x6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80054c0:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80054c2:	f3c3 2146 	ubfx	r1, r3, #9, #7
 80054c6:	3a01      	subs	r2, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80054c8:	4291      	cmp	r1, r2
 80054ca:	f47f ad80 	bne.w	8004fce <HAL_RCC_OscConfig+0x6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80054ce:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80054d0:	f3c3 4106 	ubfx	r1, r3, #16, #7
 80054d4:	3a01      	subs	r2, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80054d6:	4291      	cmp	r1, r2
 80054d8:	f47f ad79 	bne.w	8004fce <HAL_RCC_OscConfig+0x6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80054dc:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80054de:	f3c3 6306 	ubfx	r3, r3, #24, #7
 80054e2:	3a01      	subs	r2, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80054e4:	4293      	cmp	r3, r2
 80054e6:	f47f ad72 	bne.w	8004fce <HAL_RCC_OscConfig+0x6>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80054ea:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80054ec:	6ca2      	ldr	r2, [r4, #72]	; 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80054ee:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80054f2:	429a      	cmp	r2, r3
 80054f4:	f43f adcd 	beq.w	8005092 <HAL_RCC_OscConfig+0xca>
          __HAL_RCC_PLLFRACN_DISABLE();
 80054f8:	4d0c      	ldr	r5, [pc, #48]	; (800552c <HAL_RCC_OscConfig+0x564>)
 80054fa:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80054fc:	f023 0301 	bic.w	r3, r3, #1
 8005500:	62eb      	str	r3, [r5, #44]	; 0x2c
          tickstart = HAL_GetTick();
 8005502:	f7fd fa33 	bl	800296c <HAL_GetTick>
 8005506:	4606      	mov	r6, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005508:	f7fd fa30 	bl	800296c <HAL_GetTick>
 800550c:	42b0      	cmp	r0, r6
 800550e:	d0fb      	beq.n	8005508 <HAL_RCC_OscConfig+0x540>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005510:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8005512:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8005514:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005518:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800551c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8005520:	636b      	str	r3, [r5, #52]	; 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
 8005522:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8005524:	f043 0301 	orr.w	r3, r3, #1
 8005528:	62eb      	str	r3, [r5, #44]	; 0x2c
 800552a:	e5b2      	b.n	8005092 <HAL_RCC_OscConfig+0xca>
 800552c:	58024400 	.word	0x58024400

08005530 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005530:	4b48      	ldr	r3, [pc, #288]	; (8005654 <HAL_RCC_GetSysClockFreq+0x124>)
 8005532:	691a      	ldr	r2, [r3, #16]
 8005534:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8005538:	2a10      	cmp	r2, #16
{
 800553a:	b530      	push	{r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800553c:	f000 8086 	beq.w	800564c <HAL_RCC_GetSysClockFreq+0x11c>
 8005540:	2a18      	cmp	r2, #24
 8005542:	d00c      	beq.n	800555e <HAL_RCC_GetSysClockFreq+0x2e>
 8005544:	2a00      	cmp	r2, #0
 8005546:	f040 8083 	bne.w	8005650 <HAL_RCC_GetSysClockFreq+0x120>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800554a:	681a      	ldr	r2, [r3, #0]
 800554c:	4842      	ldr	r0, [pc, #264]	; (8005658 <HAL_RCC_GetSysClockFreq+0x128>)
 800554e:	f012 0f20 	tst.w	r2, #32
 8005552:	d003      	beq.n	800555c <HAL_RCC_GetSysClockFreq+0x2c>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800555a:	40d8      	lsrs	r0, r3
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
 800555c:	bd30      	pop	{r4, r5, pc}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800555e:	6a99      	ldr	r1, [r3, #40]	; 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005560:	6a9d      	ldr	r5, [r3, #40]	; 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005562:	6adc      	ldr	r4, [r3, #44]	; 0x2c
      if (pllm != 0U)
 8005564:	f415 7f7c 	tst.w	r5, #1008	; 0x3f0
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005568:	f3c5 1005 	ubfx	r0, r5, #4, #6
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800556c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
      if (pllm != 0U)
 800556e:	d0f5      	beq.n	800555c <HAL_RCC_GetSysClockFreq+0x2c>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005570:	f3c2 02cc 	ubfx	r2, r2, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005574:	f004 0401 	and.w	r4, r4, #1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005578:	ee07 0a90 	vmov	s15, r0
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800557c:	f001 0103 	and.w	r1, r1, #3
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005580:	4362      	muls	r2, r4
 8005582:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005586:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800558a:	2901      	cmp	r1, #1
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800558c:	ee07 2a90 	vmov	s15, r2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005590:	eefa 7ae9 	vcvt.f32.s32	s15, s15, #13
 8005594:	d04c      	beq.n	8005630 <HAL_RCC_GetSysClockFreq+0x100>
 8005596:	2902      	cmp	r1, #2
 8005598:	d03c      	beq.n	8005614 <HAL_RCC_GetSysClockFreq+0xe4>
 800559a:	2900      	cmp	r1, #0
 800559c:	d148      	bne.n	8005630 <HAL_RCC_GetSysClockFreq+0x100>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800559e:	681a      	ldr	r2, [r3, #0]
 80055a0:	0692      	lsls	r2, r2, #26
 80055a2:	d527      	bpl.n	80055f4 <HAL_RCC_GetSysClockFreq+0xc4>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80055a4:	6819      	ldr	r1, [r3, #0]
 80055a6:	4a2c      	ldr	r2, [pc, #176]	; (8005658 <HAL_RCC_GetSysClockFreq+0x128>)
 80055a8:	f3c1 01c1 	ubfx	r1, r1, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80055ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80055ae:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80055b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055b4:	ee07 2a10 	vmov	s14, r2
 80055b8:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 80055bc:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 80055c0:	ee06 3a90 	vmov	s13, r3
 80055c4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80055c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055cc:	ee77 7a86 	vadd.f32	s15, s15, s12
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80055d0:	4b20      	ldr	r3, [pc, #128]	; (8005654 <HAL_RCC_GetSysClockFreq+0x124>)
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80055d2:	ee67 7a87 	vmul.f32	s15, s15, s14
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80055d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055d8:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80055dc:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80055de:	ee07 3a10 	vmov	s14, r3
 80055e2:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80055e6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80055ea:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 80055ee:	ee17 0a90 	vmov	r0, s15
 80055f2:	e7b3      	b.n	800555c <HAL_RCC_GetSysClockFreq+0x2c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80055f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055fa:	ee07 3a10 	vmov	s14, r3
 80055fe:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005602:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005606:	ee77 7a86 	vadd.f32	s15, s15, s12
 800560a:	ed9f 6a14 	vldr	s12, [pc, #80]	; 800565c <HAL_RCC_GetSysClockFreq+0x12c>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800560e:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8005612:	e7dd      	b.n	80055d0 <HAL_RCC_GetSysClockFreq+0xa0>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005616:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800561a:	ee07 3a10 	vmov	s14, r3
 800561e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005622:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005626:	ee77 7a86 	vadd.f32	s15, s15, s12
 800562a:	ed9f 6a0d 	vldr	s12, [pc, #52]	; 8005660 <HAL_RCC_GetSysClockFreq+0x130>
 800562e:	e7ee      	b.n	800560e <HAL_RCC_GetSysClockFreq+0xde>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005632:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005636:	ee07 3a10 	vmov	s14, r3
 800563a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800563e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005642:	ee77 7a86 	vadd.f32	s15, s15, s12
 8005646:	ed9f 6a07 	vldr	s12, [pc, #28]	; 8005664 <HAL_RCC_GetSysClockFreq+0x134>
 800564a:	e7e0      	b.n	800560e <HAL_RCC_GetSysClockFreq+0xde>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800564c:	4806      	ldr	r0, [pc, #24]	; (8005668 <HAL_RCC_GetSysClockFreq+0x138>)
 800564e:	e785      	b.n	800555c <HAL_RCC_GetSysClockFreq+0x2c>
      sysclockfreq = CSI_VALUE;
 8005650:	4806      	ldr	r0, [pc, #24]	; (800566c <HAL_RCC_GetSysClockFreq+0x13c>)
 8005652:	e783      	b.n	800555c <HAL_RCC_GetSysClockFreq+0x2c>
 8005654:	58024400 	.word	0x58024400
 8005658:	03d09000 	.word	0x03d09000
 800565c:	4c742400 	.word	0x4c742400
 8005660:	4bbebc20 	.word	0x4bbebc20
 8005664:	4a742400 	.word	0x4a742400
 8005668:	017d7840 	.word	0x017d7840
 800566c:	003d0900 	.word	0x003d0900

08005670 <HAL_RCC_ClockConfig>:
{
 8005670:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005674:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8005676:	4604      	mov	r4, r0
 8005678:	b910      	cbnz	r0, 8005680 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800567a:	2001      	movs	r0, #1
}
 800567c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005680:	4a88      	ldr	r2, [pc, #544]	; (80058a4 <HAL_RCC_ClockConfig+0x234>)
 8005682:	6813      	ldr	r3, [r2, #0]
 8005684:	f003 030f 	and.w	r3, r3, #15
 8005688:	428b      	cmp	r3, r1
 800568a:	f0c0 8093 	bcc.w	80057b4 <HAL_RCC_ClockConfig+0x144>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800568e:	6823      	ldr	r3, [r4, #0]
 8005690:	075f      	lsls	r7, r3, #29
 8005692:	f100 809b 	bmi.w	80057cc <HAL_RCC_ClockConfig+0x15c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005696:	071e      	lsls	r6, r3, #28
 8005698:	d50b      	bpl.n	80056b2 <HAL_RCC_ClockConfig+0x42>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800569a:	4983      	ldr	r1, [pc, #524]	; (80058a8 <HAL_RCC_ClockConfig+0x238>)
 800569c:	6966      	ldr	r6, [r4, #20]
 800569e:	69c8      	ldr	r0, [r1, #28]
 80056a0:	f000 0070 	and.w	r0, r0, #112	; 0x70
 80056a4:	4286      	cmp	r6, r0
 80056a6:	d904      	bls.n	80056b2 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80056a8:	69ca      	ldr	r2, [r1, #28]
 80056aa:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80056ae:	4332      	orrs	r2, r6
 80056b0:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056b2:	06d8      	lsls	r0, r3, #27
 80056b4:	d50b      	bpl.n	80056ce <HAL_RCC_ClockConfig+0x5e>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80056b6:	497c      	ldr	r1, [pc, #496]	; (80058a8 <HAL_RCC_ClockConfig+0x238>)
 80056b8:	69a6      	ldr	r6, [r4, #24]
 80056ba:	69c8      	ldr	r0, [r1, #28]
 80056bc:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 80056c0:	4286      	cmp	r6, r0
 80056c2:	d904      	bls.n	80056ce <HAL_RCC_ClockConfig+0x5e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80056c4:	69ca      	ldr	r2, [r1, #28]
 80056c6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80056ca:	4332      	orrs	r2, r6
 80056cc:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80056ce:	0699      	lsls	r1, r3, #26
 80056d0:	d50b      	bpl.n	80056ea <HAL_RCC_ClockConfig+0x7a>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80056d2:	4975      	ldr	r1, [pc, #468]	; (80058a8 <HAL_RCC_ClockConfig+0x238>)
 80056d4:	69e6      	ldr	r6, [r4, #28]
 80056d6:	6a08      	ldr	r0, [r1, #32]
 80056d8:	f000 0070 	and.w	r0, r0, #112	; 0x70
 80056dc:	4286      	cmp	r6, r0
 80056de:	d904      	bls.n	80056ea <HAL_RCC_ClockConfig+0x7a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80056e0:	6a0a      	ldr	r2, [r1, #32]
 80056e2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80056e6:	4332      	orrs	r2, r6
 80056e8:	620a      	str	r2, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80056ea:	079a      	lsls	r2, r3, #30
 80056ec:	d50b      	bpl.n	8005706 <HAL_RCC_ClockConfig+0x96>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80056ee:	496e      	ldr	r1, [pc, #440]	; (80058a8 <HAL_RCC_ClockConfig+0x238>)
 80056f0:	68e6      	ldr	r6, [r4, #12]
 80056f2:	6988      	ldr	r0, [r1, #24]
 80056f4:	f000 000f 	and.w	r0, r0, #15
 80056f8:	4286      	cmp	r6, r0
 80056fa:	d904      	bls.n	8005706 <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80056fc:	698a      	ldr	r2, [r1, #24]
 80056fe:	f022 020f 	bic.w	r2, r2, #15
 8005702:	4332      	orrs	r2, r6
 8005704:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005706:	07df      	lsls	r7, r3, #31
 8005708:	d46e      	bmi.n	80057e8 <HAL_RCC_ClockConfig+0x178>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800570a:	6823      	ldr	r3, [r4, #0]
 800570c:	079e      	lsls	r6, r3, #30
 800570e:	f100 80a1 	bmi.w	8005854 <HAL_RCC_ClockConfig+0x1e4>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005712:	4964      	ldr	r1, [pc, #400]	; (80058a4 <HAL_RCC_ClockConfig+0x234>)
 8005714:	680a      	ldr	r2, [r1, #0]
 8005716:	f002 020f 	and.w	r2, r2, #15
 800571a:	42aa      	cmp	r2, r5
 800571c:	f200 80a8 	bhi.w	8005870 <HAL_RCC_ClockConfig+0x200>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005720:	0758      	lsls	r0, r3, #29
 8005722:	f100 80b1 	bmi.w	8005888 <HAL_RCC_ClockConfig+0x218>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005726:	0719      	lsls	r1, r3, #28
 8005728:	d50b      	bpl.n	8005742 <HAL_RCC_ClockConfig+0xd2>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800572a:	495f      	ldr	r1, [pc, #380]	; (80058a8 <HAL_RCC_ClockConfig+0x238>)
 800572c:	6965      	ldr	r5, [r4, #20]
 800572e:	69c8      	ldr	r0, [r1, #28]
 8005730:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8005734:	4285      	cmp	r5, r0
 8005736:	d204      	bcs.n	8005742 <HAL_RCC_ClockConfig+0xd2>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005738:	69ca      	ldr	r2, [r1, #28]
 800573a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800573e:	432a      	orrs	r2, r5
 8005740:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005742:	06da      	lsls	r2, r3, #27
 8005744:	d50b      	bpl.n	800575e <HAL_RCC_ClockConfig+0xee>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005746:	4958      	ldr	r1, [pc, #352]	; (80058a8 <HAL_RCC_ClockConfig+0x238>)
 8005748:	69a5      	ldr	r5, [r4, #24]
 800574a:	69c8      	ldr	r0, [r1, #28]
 800574c:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8005750:	4285      	cmp	r5, r0
 8005752:	d204      	bcs.n	800575e <HAL_RCC_ClockConfig+0xee>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005754:	69ca      	ldr	r2, [r1, #28]
 8005756:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800575a:	432a      	orrs	r2, r5
 800575c:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800575e:	069b      	lsls	r3, r3, #26
 8005760:	d50b      	bpl.n	800577a <HAL_RCC_ClockConfig+0x10a>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005762:	4a51      	ldr	r2, [pc, #324]	; (80058a8 <HAL_RCC_ClockConfig+0x238>)
 8005764:	69e0      	ldr	r0, [r4, #28]
 8005766:	6a11      	ldr	r1, [r2, #32]
 8005768:	f001 0170 	and.w	r1, r1, #112	; 0x70
 800576c:	4288      	cmp	r0, r1
 800576e:	d204      	bcs.n	800577a <HAL_RCC_ClockConfig+0x10a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005770:	6a13      	ldr	r3, [r2, #32]
 8005772:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005776:	4303      	orrs	r3, r0
 8005778:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800577a:	f7ff fed9 	bl	8005530 <HAL_RCC_GetSysClockFreq>
 800577e:	494a      	ldr	r1, [pc, #296]	; (80058a8 <HAL_RCC_ClockConfig+0x238>)
 8005780:	4a4a      	ldr	r2, [pc, #296]	; (80058ac <HAL_RCC_ClockConfig+0x23c>)
 8005782:	698b      	ldr	r3, [r1, #24]
 8005784:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8005788:	5cd3      	ldrb	r3, [r2, r3]
 800578a:	f003 031f 	and.w	r3, r3, #31
 800578e:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005790:	698b      	ldr	r3, [r1, #24]
 8005792:	f003 030f 	and.w	r3, r3, #15
 8005796:	5cd3      	ldrb	r3, [r2, r3]
 8005798:	4a45      	ldr	r2, [pc, #276]	; (80058b0 <HAL_RCC_ClockConfig+0x240>)
 800579a:	f003 031f 	and.w	r3, r3, #31
 800579e:	fa20 f303 	lsr.w	r3, r0, r3
 80057a2:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 80057a4:	4b43      	ldr	r3, [pc, #268]	; (80058b4 <HAL_RCC_ClockConfig+0x244>)
 80057a6:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick(uwTickPrio);
 80057a8:	4b43      	ldr	r3, [pc, #268]	; (80058b8 <HAL_RCC_ClockConfig+0x248>)
}
 80057aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
 80057ae:	6818      	ldr	r0, [r3, #0]
 80057b0:	f7fd b87c 	b.w	80028ac <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057b4:	6813      	ldr	r3, [r2, #0]
 80057b6:	f023 030f 	bic.w	r3, r3, #15
 80057ba:	430b      	orrs	r3, r1
 80057bc:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80057be:	6813      	ldr	r3, [r2, #0]
 80057c0:	f003 030f 	and.w	r3, r3, #15
 80057c4:	428b      	cmp	r3, r1
 80057c6:	f47f af58 	bne.w	800567a <HAL_RCC_ClockConfig+0xa>
 80057ca:	e760      	b.n	800568e <HAL_RCC_ClockConfig+0x1e>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80057cc:	4936      	ldr	r1, [pc, #216]	; (80058a8 <HAL_RCC_ClockConfig+0x238>)
 80057ce:	6926      	ldr	r6, [r4, #16]
 80057d0:	6988      	ldr	r0, [r1, #24]
 80057d2:	f000 0070 	and.w	r0, r0, #112	; 0x70
 80057d6:	4286      	cmp	r6, r0
 80057d8:	f67f af5d 	bls.w	8005696 <HAL_RCC_ClockConfig+0x26>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80057dc:	698a      	ldr	r2, [r1, #24]
 80057de:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80057e2:	4332      	orrs	r2, r6
 80057e4:	618a      	str	r2, [r1, #24]
 80057e6:	e756      	b.n	8005696 <HAL_RCC_ClockConfig+0x26>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80057e8:	4b2f      	ldr	r3, [pc, #188]	; (80058a8 <HAL_RCC_ClockConfig+0x238>)
 80057ea:	68a1      	ldr	r1, [r4, #8]
 80057ec:	699a      	ldr	r2, [r3, #24]
 80057ee:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 80057f2:	430a      	orrs	r2, r1
 80057f4:	619a      	str	r2, [r3, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80057f6:	6862      	ldr	r2, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80057f8:	681b      	ldr	r3, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80057fa:	2a02      	cmp	r2, #2
 80057fc:	d11d      	bne.n	800583a <HAL_RCC_ClockConfig+0x1ca>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80057fe:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005802:	f43f af3a 	beq.w	800567a <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005806:	4e28      	ldr	r6, [pc, #160]	; (80058a8 <HAL_RCC_ClockConfig+0x238>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005808:	f241 3888 	movw	r8, #5000	; 0x1388
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800580c:	6933      	ldr	r3, [r6, #16]
 800580e:	f023 0307 	bic.w	r3, r3, #7
 8005812:	4313      	orrs	r3, r2
 8005814:	6133      	str	r3, [r6, #16]
    tickstart = HAL_GetTick();
 8005816:	f7fd f8a9 	bl	800296c <HAL_GetTick>
 800581a:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800581c:	6933      	ldr	r3, [r6, #16]
 800581e:	6862      	ldr	r2, [r4, #4]
 8005820:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005824:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8005828:	f43f af6f 	beq.w	800570a <HAL_RCC_ClockConfig+0x9a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800582c:	f7fd f89e 	bl	800296c <HAL_GetTick>
 8005830:	1bc0      	subs	r0, r0, r7
 8005832:	4540      	cmp	r0, r8
 8005834:	d9f2      	bls.n	800581c <HAL_RCC_ClockConfig+0x1ac>
        return HAL_TIMEOUT;
 8005836:	2003      	movs	r0, #3
 8005838:	e720      	b.n	800567c <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800583a:	2a03      	cmp	r2, #3
 800583c:	d102      	bne.n	8005844 <HAL_RCC_ClockConfig+0x1d4>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800583e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8005842:	e7de      	b.n	8005802 <HAL_RCC_ClockConfig+0x192>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005844:	2a01      	cmp	r2, #1
 8005846:	d102      	bne.n	800584e <HAL_RCC_ClockConfig+0x1de>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005848:	f413 7f80 	tst.w	r3, #256	; 0x100
 800584c:	e7d9      	b.n	8005802 <HAL_RCC_ClockConfig+0x192>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800584e:	f013 0f04 	tst.w	r3, #4
 8005852:	e7d6      	b.n	8005802 <HAL_RCC_ClockConfig+0x192>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005854:	4914      	ldr	r1, [pc, #80]	; (80058a8 <HAL_RCC_ClockConfig+0x238>)
 8005856:	68e6      	ldr	r6, [r4, #12]
 8005858:	6988      	ldr	r0, [r1, #24]
 800585a:	f000 000f 	and.w	r0, r0, #15
 800585e:	4286      	cmp	r6, r0
 8005860:	f4bf af57 	bcs.w	8005712 <HAL_RCC_ClockConfig+0xa2>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005864:	698a      	ldr	r2, [r1, #24]
 8005866:	f022 020f 	bic.w	r2, r2, #15
 800586a:	4332      	orrs	r2, r6
 800586c:	618a      	str	r2, [r1, #24]
 800586e:	e750      	b.n	8005712 <HAL_RCC_ClockConfig+0xa2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005870:	680a      	ldr	r2, [r1, #0]
 8005872:	f022 020f 	bic.w	r2, r2, #15
 8005876:	432a      	orrs	r2, r5
 8005878:	600a      	str	r2, [r1, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800587a:	680a      	ldr	r2, [r1, #0]
 800587c:	f002 020f 	and.w	r2, r2, #15
 8005880:	42aa      	cmp	r2, r5
 8005882:	f47f aefa 	bne.w	800567a <HAL_RCC_ClockConfig+0xa>
 8005886:	e74b      	b.n	8005720 <HAL_RCC_ClockConfig+0xb0>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005888:	4907      	ldr	r1, [pc, #28]	; (80058a8 <HAL_RCC_ClockConfig+0x238>)
 800588a:	6925      	ldr	r5, [r4, #16]
 800588c:	6988      	ldr	r0, [r1, #24]
 800588e:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8005892:	4285      	cmp	r5, r0
 8005894:	f4bf af47 	bcs.w	8005726 <HAL_RCC_ClockConfig+0xb6>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005898:	698a      	ldr	r2, [r1, #24]
 800589a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800589e:	432a      	orrs	r2, r5
 80058a0:	618a      	str	r2, [r1, #24]
 80058a2:	e740      	b.n	8005726 <HAL_RCC_ClockConfig+0xb6>
 80058a4:	52002000 	.word	0x52002000
 80058a8:	58024400 	.word	0x58024400
 80058ac:	08016870 	.word	0x08016870
 80058b0:	24000004 	.word	0x24000004
 80058b4:	24000000 	.word	0x24000000
 80058b8:	2400000c 	.word	0x2400000c

080058bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80058bc:	b510      	push	{r4, lr}
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80058be:	4c0c      	ldr	r4, [pc, #48]	; (80058f0 <HAL_RCC_GetHCLKFreq+0x34>)
 80058c0:	f7ff fe36 	bl	8005530 <HAL_RCC_GetSysClockFreq>
 80058c4:	490b      	ldr	r1, [pc, #44]	; (80058f4 <HAL_RCC_GetHCLKFreq+0x38>)
 80058c6:	69a3      	ldr	r3, [r4, #24]
 80058c8:	f3c3 2303 	ubfx	r3, r3, #8, #4
 80058cc:	5cca      	ldrb	r2, [r1, r3]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80058ce:	69a3      	ldr	r3, [r4, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80058d0:	f002 021f 	and.w	r2, r2, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80058d4:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80058d8:	fa20 f202 	lsr.w	r2, r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80058dc:	5ccb      	ldrb	r3, [r1, r3]
 80058de:	f003 031f 	and.w	r3, r3, #31
 80058e2:	fa22 f003 	lsr.w	r0, r2, r3
 80058e6:	4b04      	ldr	r3, [pc, #16]	; (80058f8 <HAL_RCC_GetHCLKFreq+0x3c>)
 80058e8:	6018      	str	r0, [r3, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80058ea:	4b04      	ldr	r3, [pc, #16]	; (80058fc <HAL_RCC_GetHCLKFreq+0x40>)
 80058ec:	601a      	str	r2, [r3, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 80058ee:	bd10      	pop	{r4, pc}
 80058f0:	58024400 	.word	0x58024400
 80058f4:	08016870 	.word	0x08016870
 80058f8:	24000004 	.word	0x24000004
 80058fc:	24000000 	.word	0x24000000

08005900 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005900:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005902:	f7ff ffdb 	bl	80058bc <HAL_RCC_GetHCLKFreq>
 8005906:	4b05      	ldr	r3, [pc, #20]	; (800591c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8005908:	4a05      	ldr	r2, [pc, #20]	; (8005920 <HAL_RCC_GetPCLK1Freq+0x20>)
 800590a:	69db      	ldr	r3, [r3, #28]
 800590c:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8005910:	5cd3      	ldrb	r3, [r2, r3]
 8005912:	f003 031f 	and.w	r3, r3, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005916:	40d8      	lsrs	r0, r3
 8005918:	bd08      	pop	{r3, pc}
 800591a:	bf00      	nop
 800591c:	58024400 	.word	0x58024400
 8005920:	08016870 	.word	0x08016870

08005924 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005924:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005926:	f7ff ffc9 	bl	80058bc <HAL_RCC_GetHCLKFreq>
 800592a:	4b05      	ldr	r3, [pc, #20]	; (8005940 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800592c:	4a05      	ldr	r2, [pc, #20]	; (8005944 <HAL_RCC_GetPCLK2Freq+0x20>)
 800592e:	69db      	ldr	r3, [r3, #28]
 8005930:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8005934:	5cd3      	ldrb	r3, [r2, r3]
 8005936:	f003 031f 	and.w	r3, r3, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800593a:	40d8      	lsrs	r0, r3
 800593c:	bd08      	pop	{r3, pc}
 800593e:	bf00      	nop
 8005940:	58024400 	.word	0x58024400
 8005944:	08016870 	.word	0x08016870

08005948 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800594a:	4c3a      	ldr	r4, [pc, #232]	; (8005a34 <RCCEx_PLL2_Config+0xec>)
{
 800594c:	4606      	mov	r6, r0
 800594e:	460d      	mov	r5, r1
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005950:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005952:	f003 0303 	and.w	r3, r3, #3
 8005956:	2b03      	cmp	r3, #3
 8005958:	d069      	beq.n	8005a2e <RCCEx_PLL2_Config+0xe6>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800595a:	6823      	ldr	r3, [r4, #0]
 800595c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005960:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005962:	f7fd f803 	bl	800296c <HAL_GetTick>
 8005966:	4607      	mov	r7, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005968:	6823      	ldr	r3, [r4, #0]
 800596a:	011a      	lsls	r2, r3, #4
 800596c:	d44b      	bmi.n	8005a06 <RCCEx_PLL2_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800596e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005970:	6832      	ldr	r2, [r6, #0]
 8005972:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005976:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 800597a:	62a3      	str	r3, [r4, #40]	; 0x28
 800597c:	68b3      	ldr	r3, [r6, #8]
 800597e:	68f2      	ldr	r2, [r6, #12]
 8005980:	3b01      	subs	r3, #1
 8005982:	3a01      	subs	r2, #1
 8005984:	025b      	lsls	r3, r3, #9
 8005986:	0412      	lsls	r2, r2, #16
 8005988:	b29b      	uxth	r3, r3
 800598a:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800598e:	4313      	orrs	r3, r2
 8005990:	6872      	ldr	r2, [r6, #4]
 8005992:	3a01      	subs	r2, #1
 8005994:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005998:	4313      	orrs	r3, r2
 800599a:	6932      	ldr	r2, [r6, #16]
 800599c:	3a01      	subs	r2, #1
 800599e:	0612      	lsls	r2, r2, #24
 80059a0:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80059a4:	4313      	orrs	r3, r2
 80059a6:	63a3      	str	r3, [r4, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80059a8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80059aa:	6972      	ldr	r2, [r6, #20]
 80059ac:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80059b0:	4313      	orrs	r3, r2
 80059b2:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80059b4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80059b6:	69b2      	ldr	r2, [r6, #24]
 80059b8:	f023 0320 	bic.w	r3, r3, #32
 80059bc:	4313      	orrs	r3, r2
 80059be:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80059c0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80059c2:	f023 0310 	bic.w	r3, r3, #16
 80059c6:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80059c8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80059ca:	69f2      	ldr	r2, [r6, #28]
 80059cc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80059d0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80059d4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80059d8:	63e3      	str	r3, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80059da:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80059dc:	f043 0310 	orr.w	r3, r3, #16
 80059e0:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80059e2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 80059e4:	b9b5      	cbnz	r5, 8005a14 <RCCEx_PLL2_Config+0xcc>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80059e6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80059ea:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80059ec:	4c11      	ldr	r4, [pc, #68]	; (8005a34 <RCCEx_PLL2_Config+0xec>)
 80059ee:	6823      	ldr	r3, [r4, #0]
 80059f0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80059f4:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059f6:	f7fc ffb9 	bl	800296c <HAL_GetTick>
 80059fa:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80059fc:	6823      	ldr	r3, [r4, #0]
 80059fe:	011b      	lsls	r3, r3, #4
 8005a00:	d50f      	bpl.n	8005a22 <RCCEx_PLL2_Config+0xda>
    }

  }


  return status;
 8005a02:	2000      	movs	r0, #0
 8005a04:	e005      	b.n	8005a12 <RCCEx_PLL2_Config+0xca>
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005a06:	f7fc ffb1 	bl	800296c <HAL_GetTick>
 8005a0a:	1bc0      	subs	r0, r0, r7
 8005a0c:	2802      	cmp	r0, #2
 8005a0e:	d9ab      	bls.n	8005968 <RCCEx_PLL2_Config+0x20>
        return HAL_TIMEOUT;
 8005a10:	2003      	movs	r0, #3
}
 8005a12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (Divider == DIVIDER_Q_UPDATE)
 8005a14:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005a16:	bf0c      	ite	eq
 8005a18:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005a1c:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 8005a20:	e7e3      	b.n	80059ea <RCCEx_PLL2_Config+0xa2>
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005a22:	f7fc ffa3 	bl	800296c <HAL_GetTick>
 8005a26:	1b40      	subs	r0, r0, r5
 8005a28:	2802      	cmp	r0, #2
 8005a2a:	d9e7      	bls.n	80059fc <RCCEx_PLL2_Config+0xb4>
 8005a2c:	e7f0      	b.n	8005a10 <RCCEx_PLL2_Config+0xc8>
    return HAL_ERROR;
 8005a2e:	2001      	movs	r0, #1
 8005a30:	e7ef      	b.n	8005a12 <RCCEx_PLL2_Config+0xca>
 8005a32:	bf00      	nop
 8005a34:	58024400 	.word	0x58024400

08005a38 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005a3a:	4c3a      	ldr	r4, [pc, #232]	; (8005b24 <RCCEx_PLL3_Config+0xec>)
{
 8005a3c:	4606      	mov	r6, r0
 8005a3e:	460d      	mov	r5, r1
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005a40:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005a42:	f003 0303 	and.w	r3, r3, #3
 8005a46:	2b03      	cmp	r3, #3
 8005a48:	d069      	beq.n	8005b1e <RCCEx_PLL3_Config+0xe6>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005a4a:	6823      	ldr	r3, [r4, #0]
 8005a4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a50:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a52:	f7fc ff8b 	bl	800296c <HAL_GetTick>
 8005a56:	4607      	mov	r7, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005a58:	6823      	ldr	r3, [r4, #0]
 8005a5a:	009a      	lsls	r2, r3, #2
 8005a5c:	d44b      	bmi.n	8005af6 <RCCEx_PLL3_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005a5e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005a60:	6832      	ldr	r2, [r6, #0]
 8005a62:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8005a66:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8005a6a:	62a3      	str	r3, [r4, #40]	; 0x28
 8005a6c:	68b3      	ldr	r3, [r6, #8]
 8005a6e:	68f2      	ldr	r2, [r6, #12]
 8005a70:	3b01      	subs	r3, #1
 8005a72:	3a01      	subs	r2, #1
 8005a74:	025b      	lsls	r3, r3, #9
 8005a76:	0412      	lsls	r2, r2, #16
 8005a78:	b29b      	uxth	r3, r3
 8005a7a:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	6872      	ldr	r2, [r6, #4]
 8005a82:	3a01      	subs	r2, #1
 8005a84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a88:	4313      	orrs	r3, r2
 8005a8a:	6932      	ldr	r2, [r6, #16]
 8005a8c:	3a01      	subs	r2, #1
 8005a8e:	0612      	lsls	r2, r2, #24
 8005a90:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8005a94:	4313      	orrs	r3, r2
 8005a96:	6423      	str	r3, [r4, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005a98:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005a9a:	6972      	ldr	r2, [r6, #20]
 8005a9c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005aa4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005aa6:	69b2      	ldr	r2, [r6, #24]
 8005aa8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005aac:	4313      	orrs	r3, r2
 8005aae:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005ab0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005ab2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ab6:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005ab8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005aba:	69f2      	ldr	r2, [r6, #28]
 8005abc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005ac0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8005ac4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8005ac8:	6463      	str	r3, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005aca:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005acc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ad0:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005ad2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 8005ad4:	b9b5      	cbnz	r5, 8005b04 <RCCEx_PLL3_Config+0xcc>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005ad6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005ada:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005adc:	4c11      	ldr	r4, [pc, #68]	; (8005b24 <RCCEx_PLL3_Config+0xec>)
 8005ade:	6823      	ldr	r3, [r4, #0]
 8005ae0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ae4:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ae6:	f7fc ff41 	bl	800296c <HAL_GetTick>
 8005aea:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005aec:	6823      	ldr	r3, [r4, #0]
 8005aee:	009b      	lsls	r3, r3, #2
 8005af0:	d50f      	bpl.n	8005b12 <RCCEx_PLL3_Config+0xda>
    }

  }


  return status;
 8005af2:	2000      	movs	r0, #0
 8005af4:	e005      	b.n	8005b02 <RCCEx_PLL3_Config+0xca>
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005af6:	f7fc ff39 	bl	800296c <HAL_GetTick>
 8005afa:	1bc0      	subs	r0, r0, r7
 8005afc:	2802      	cmp	r0, #2
 8005afe:	d9ab      	bls.n	8005a58 <RCCEx_PLL3_Config+0x20>
        return HAL_TIMEOUT;
 8005b00:	2003      	movs	r0, #3
}
 8005b02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (Divider == DIVIDER_Q_UPDATE)
 8005b04:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005b06:	bf0c      	ite	eq
 8005b08:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005b0c:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 8005b10:	e7e3      	b.n	8005ada <RCCEx_PLL3_Config+0xa2>
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005b12:	f7fc ff2b 	bl	800296c <HAL_GetTick>
 8005b16:	1b40      	subs	r0, r0, r5
 8005b18:	2802      	cmp	r0, #2
 8005b1a:	d9e7      	bls.n	8005aec <RCCEx_PLL3_Config+0xb4>
 8005b1c:	e7f0      	b.n	8005b00 <RCCEx_PLL3_Config+0xc8>
    return HAL_ERROR;
 8005b1e:	2001      	movs	r0, #1
 8005b20:	e7ef      	b.n	8005b02 <RCCEx_PLL3_Config+0xca>
 8005b22:	bf00      	nop
 8005b24:	58024400 	.word	0x58024400

08005b28 <HAL_RCCEx_PeriphCLKConfig>:
{
 8005b28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005b2c:	6803      	ldr	r3, [r0, #0]
{
 8005b2e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005b30:	0118      	lsls	r0, r3, #4
 8005b32:	f003 6600 	and.w	r6, r3, #134217728	; 0x8000000
 8005b36:	d509      	bpl.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0x24>
    switch (PeriphClkInit->SpdifrxClockSelection)
 8005b38:	6eab      	ldr	r3, [r5, #104]	; 0x68
 8005b3a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005b3e:	d02f      	beq.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8005b40:	d813      	bhi.n	8005b6a <HAL_RCCEx_PeriphCLKConfig+0x42>
 8005b42:	b1f3      	cbz	r3, 8005b82 <HAL_RCCEx_PeriphCLKConfig+0x5a>
 8005b44:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b48:	d021      	beq.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x66>
 8005b4a:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005b4c:	682b      	ldr	r3, [r5, #0]
 8005b4e:	05d9      	lsls	r1, r3, #23
 8005b50:	f140 80ed 	bpl.w	8005d2e <HAL_RCCEx_PeriphCLKConfig+0x206>
    switch (PeriphClkInit->Sai1ClockSelection)
 8005b54:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8005b56:	2b04      	cmp	r3, #4
 8005b58:	f200 80e8 	bhi.w	8005d2c <HAL_RCCEx_PeriphCLKConfig+0x204>
 8005b5c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8005b60:	002d0026 	.word	0x002d0026
 8005b64:	002b00e0 	.word	0x002b00e0
 8005b68:	002b      	.short	0x002b
    switch (PeriphClkInit->SpdifrxClockSelection)
 8005b6a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005b6e:	d1ec      	bne.n	8005b4a <HAL_RCCEx_PeriphCLKConfig+0x22>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005b70:	4aa9      	ldr	r2, [pc, #676]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005b72:	2600      	movs	r6, #0
 8005b74:	6ea9      	ldr	r1, [r5, #104]	; 0x68
 8005b76:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8005b78:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005b7c:	430b      	orrs	r3, r1
 8005b7e:	6513      	str	r3, [r2, #80]	; 0x50
 8005b80:	e7e4      	b.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0x24>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b82:	4aa5      	ldr	r2, [pc, #660]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005b84:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005b86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b8a:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 8005b8c:	e7f0      	b.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0x48>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005b8e:	2102      	movs	r1, #2
 8005b90:	f105 0008 	add.w	r0, r5, #8
 8005b94:	f7ff fed8 	bl	8005948 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005b98:	4606      	mov	r6, r0
    if (ret == HAL_OK)
 8005b9a:	2800      	cmp	r0, #0
 8005b9c:	d1d6      	bne.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0x24>
 8005b9e:	e7e7      	b.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0x48>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005ba0:	2102      	movs	r1, #2
 8005ba2:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8005ba6:	f7ff ff47 	bl	8005a38 <RCCEx_PLL3_Config>
 8005baa:	e7f5      	b.n	8005b98 <HAL_RCCEx_PeriphCLKConfig+0x70>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005bac:	4a9a      	ldr	r2, [pc, #616]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005bae:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005bb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005bb4:	62d3      	str	r3, [r2, #44]	; 0x2c
    switch (PeriphClkInit->Sai1ClockSelection)
 8005bb6:	4634      	mov	r4, r6
 8005bb8:	e005      	b.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005bba:	2100      	movs	r1, #0
 8005bbc:	f105 0008 	add.w	r0, r5, #8
 8005bc0:	f7ff fec2 	bl	8005948 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005bc4:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 8005bc6:	2c00      	cmp	r4, #0
 8005bc8:	f040 80b3 	bne.w	8005d32 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005bcc:	4a92      	ldr	r2, [pc, #584]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005bce:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8005bd0:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8005bd2:	f023 0307 	bic.w	r3, r3, #7
 8005bd6:	430b      	orrs	r3, r1
 8005bd8:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005bda:	682b      	ldr	r3, [r5, #0]
 8005bdc:	059a      	lsls	r2, r3, #22
 8005bde:	d50d      	bpl.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0xd4>
    switch (PeriphClkInit->Sai23ClockSelection)
 8005be0:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 8005be2:	2b80      	cmp	r3, #128	; 0x80
 8005be4:	f000 80c3 	beq.w	8005d6e <HAL_RCCEx_PeriphCLKConfig+0x246>
 8005be8:	f200 80a5 	bhi.w	8005d36 <HAL_RCCEx_PeriphCLKConfig+0x20e>
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	f000 80b1 	beq.w	8005d54 <HAL_RCCEx_PeriphCLKConfig+0x22c>
 8005bf2:	2b40      	cmp	r3, #64	; 0x40
 8005bf4:	f000 80b4 	beq.w	8005d60 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8005bf8:	2601      	movs	r6, #1
 8005bfa:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005bfc:	682b      	ldr	r3, [r5, #0]
 8005bfe:	055b      	lsls	r3, r3, #21
 8005c00:	d510      	bpl.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0xfc>
    switch (PeriphClkInit->Sai4AClockSelection)
 8005c02:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
 8005c06:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c0a:	f000 80d6 	beq.w	8005dba <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005c0e:	f200 80b6 	bhi.w	8005d7e <HAL_RCCEx_PeriphCLKConfig+0x256>
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	f000 80c4 	beq.w	8005da0 <HAL_RCCEx_PeriphCLKConfig+0x278>
 8005c18:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005c1c:	f000 80c6 	beq.w	8005dac <HAL_RCCEx_PeriphCLKConfig+0x284>
 8005c20:	2601      	movs	r6, #1
 8005c22:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005c24:	682b      	ldr	r3, [r5, #0]
 8005c26:	051f      	lsls	r7, r3, #20
 8005c28:	d510      	bpl.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x124>
    switch (PeriphClkInit->Sai4BClockSelection)
 8005c2a:	f8d5 30ac 	ldr.w	r3, [r5, #172]	; 0xac
 8005c2e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005c32:	f000 80e8 	beq.w	8005e06 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8005c36:	f200 80c8 	bhi.w	8005dca <HAL_RCCEx_PeriphCLKConfig+0x2a2>
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	f000 80d6 	beq.w	8005dec <HAL_RCCEx_PeriphCLKConfig+0x2c4>
 8005c40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005c44:	f000 80d8 	beq.w	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8005c48:	2601      	movs	r6, #1
 8005c4a:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005c4c:	682b      	ldr	r3, [r5, #0]
 8005c4e:	0198      	lsls	r0, r3, #6
 8005c50:	d50d      	bpl.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0x146>
    switch (PeriphClkInit->QspiClockSelection)
 8005c52:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8005c54:	2b20      	cmp	r3, #32
 8005c56:	f000 80f3 	beq.w	8005e40 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8005c5a:	f200 80df 	bhi.w	8005e1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	f000 80df 	beq.w	8005e22 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
 8005c64:	2b10      	cmp	r3, #16
 8005c66:	f000 80e5 	beq.w	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8005c6a:	2601      	movs	r6, #1
 8005c6c:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005c6e:	682b      	ldr	r3, [r5, #0]
 8005c70:	04d9      	lsls	r1, r3, #19
 8005c72:	d50f      	bpl.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    switch (PeriphClkInit->Spi123ClockSelection)
 8005c74:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8005c76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c7a:	f000 8107 	beq.w	8005e8c <HAL_RCCEx_PeriphCLKConfig+0x364>
 8005c7e:	f200 80e8 	bhi.w	8005e52 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	f000 80f5 	beq.w	8005e72 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005c88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c8c:	f000 80f7 	beq.w	8005e7e <HAL_RCCEx_PeriphCLKConfig+0x356>
 8005c90:	2601      	movs	r6, #1
 8005c92:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005c94:	682b      	ldr	r3, [r5, #0]
 8005c96:	049a      	lsls	r2, r3, #18
 8005c98:	d50f      	bpl.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0x192>
    switch (PeriphClkInit->Spi45ClockSelection)
 8005c9a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005c9c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005ca0:	f000 8115 	beq.w	8005ece <HAL_RCCEx_PeriphCLKConfig+0x3a6>
 8005ca4:	f200 80fa 	bhi.w	8005e9c <HAL_RCCEx_PeriphCLKConfig+0x374>
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	f000 8100 	beq.w	8005eae <HAL_RCCEx_PeriphCLKConfig+0x386>
 8005cae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cb2:	f000 8105 	beq.w	8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x398>
 8005cb6:	2601      	movs	r6, #1
 8005cb8:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005cba:	682b      	ldr	r3, [r5, #0]
 8005cbc:	045b      	lsls	r3, r3, #17
 8005cbe:	d510      	bpl.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    switch (PeriphClkInit->Spi6ClockSelection)
 8005cc0:	f8d5 30b0 	ldr.w	r3, [r5, #176]	; 0xb0
 8005cc4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005cc8:	f000 8123 	beq.w	8005f12 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8005ccc:	f200 8107 	bhi.w	8005ede <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	f000 810d 	beq.w	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
 8005cd6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005cda:	f000 8113 	beq.w	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
 8005cde:	2601      	movs	r6, #1
 8005ce0:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005ce2:	682b      	ldr	r3, [r5, #0]
 8005ce4:	041f      	lsls	r7, r3, #16
 8005ce6:	d50d      	bpl.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    switch (PeriphClkInit->FdcanClockSelection)
 8005ce8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8005cea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005cee:	f000 8118 	beq.w	8005f22 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8005cf2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005cf6:	f000 8122 	beq.w	8005f3e <HAL_RCCEx_PeriphCLKConfig+0x416>
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	f000 8116 	beq.w	8005f2c <HAL_RCCEx_PeriphCLKConfig+0x404>
 8005d00:	2601      	movs	r6, #1
 8005d02:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005d04:	682b      	ldr	r3, [r5, #0]
 8005d06:	01d8      	lsls	r0, r3, #7
 8005d08:	f140 8130 	bpl.w	8005f6c <HAL_RCCEx_PeriphCLKConfig+0x444>
    switch (PeriphClkInit->FmcClockSelection)
 8005d0c:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8005d0e:	2b03      	cmp	r3, #3
 8005d10:	f200 8171 	bhi.w	8005ff6 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8005d14:	e8df f013 	tbh	[pc, r3, lsl #1]
 8005d18:	011c0121 	.word	0x011c0121
 8005d1c:	01210168 	.word	0x01210168
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005d20:	2100      	movs	r1, #0
 8005d22:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8005d26:	f7ff fe87 	bl	8005a38 <RCCEx_PLL3_Config>
 8005d2a:	e74b      	b.n	8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    switch (PeriphClkInit->Sai1ClockSelection)
 8005d2c:	2601      	movs	r6, #1
 8005d2e:	4634      	mov	r4, r6
 8005d30:	e753      	b.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0xb2>
 8005d32:	4626      	mov	r6, r4
 8005d34:	e751      	b.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0xb2>
    switch (PeriphClkInit->Sai23ClockSelection)
 8005d36:	2bc0      	cmp	r3, #192	; 0xc0
 8005d38:	d003      	beq.n	8005d42 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8005d3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d3e:	f47f af5b 	bne.w	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0xd0>
    if (ret == HAL_OK)
 8005d42:	b9d4      	cbnz	r4, 8005d7a <HAL_RCCEx_PeriphCLKConfig+0x252>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005d44:	4a34      	ldr	r2, [pc, #208]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005d46:	6de9      	ldr	r1, [r5, #92]	; 0x5c
 8005d48:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8005d4a:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
 8005d4e:	430b      	orrs	r3, r1
 8005d50:	6513      	str	r3, [r2, #80]	; 0x50
 8005d52:	e753      	b.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0xd4>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d54:	4a30      	ldr	r2, [pc, #192]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005d56:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005d58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d5c:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 8005d5e:	e7f0      	b.n	8005d42 <HAL_RCCEx_PeriphCLKConfig+0x21a>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005d60:	2100      	movs	r1, #0
 8005d62:	f105 0008 	add.w	r0, r5, #8
 8005d66:	f7ff fdef 	bl	8005948 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005d6a:	4604      	mov	r4, r0
        break;
 8005d6c:	e7e9      	b.n	8005d42 <HAL_RCCEx_PeriphCLKConfig+0x21a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005d6e:	2100      	movs	r1, #0
 8005d70:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8005d74:	f7ff fe60 	bl	8005a38 <RCCEx_PLL3_Config>
 8005d78:	e7f7      	b.n	8005d6a <HAL_RCCEx_PeriphCLKConfig+0x242>
 8005d7a:	4626      	mov	r6, r4
 8005d7c:	e73e      	b.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0xd4>
    switch (PeriphClkInit->Sai4AClockSelection)
 8005d7e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005d82:	d003      	beq.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x264>
 8005d84:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005d88:	f47f af4a 	bne.w	8005c20 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    if (ret == HAL_OK)
 8005d8c:	b9dc      	cbnz	r4, 8005dc6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005d8e:	4a22      	ldr	r2, [pc, #136]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005d90:	f8d5 10a8 	ldr.w	r1, [r5, #168]	; 0xa8
 8005d94:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8005d96:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 8005d9a:	430b      	orrs	r3, r1
 8005d9c:	6593      	str	r3, [r2, #88]	; 0x58
 8005d9e:	e741      	b.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0xfc>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005da0:	4a1d      	ldr	r2, [pc, #116]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005da2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005da4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005da8:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 8005daa:	e7ef      	b.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x264>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005dac:	2100      	movs	r1, #0
 8005dae:	f105 0008 	add.w	r0, r5, #8
 8005db2:	f7ff fdc9 	bl	8005948 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005db6:	4604      	mov	r4, r0
        break;
 8005db8:	e7e8      	b.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x264>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005dba:	2100      	movs	r1, #0
 8005dbc:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8005dc0:	f7ff fe3a 	bl	8005a38 <RCCEx_PLL3_Config>
 8005dc4:	e7f7      	b.n	8005db6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
 8005dc6:	4626      	mov	r6, r4
 8005dc8:	e72c      	b.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0xfc>
    switch (PeriphClkInit->Sai4BClockSelection)
 8005dca:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005dce:	d003      	beq.n	8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005dd0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005dd4:	f47f af38 	bne.w	8005c48 <HAL_RCCEx_PeriphCLKConfig+0x120>
    if (ret == HAL_OK)
 8005dd8:	b9dc      	cbnz	r4, 8005e12 <HAL_RCCEx_PeriphCLKConfig+0x2ea>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005dda:	4a0f      	ldr	r2, [pc, #60]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005ddc:	f8d5 10ac 	ldr.w	r1, [r5, #172]	; 0xac
 8005de0:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8005de2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8005de6:	430b      	orrs	r3, r1
 8005de8:	6593      	str	r3, [r2, #88]	; 0x58
 8005dea:	e72f      	b.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x124>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005dec:	4a0a      	ldr	r2, [pc, #40]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005dee:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005df0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005df4:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 8005df6:	e7ef      	b.n	8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005df8:	2100      	movs	r1, #0
 8005dfa:	f105 0008 	add.w	r0, r5, #8
 8005dfe:	f7ff fda3 	bl	8005948 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005e02:	4604      	mov	r4, r0
        break;
 8005e04:	e7e8      	b.n	8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005e06:	2100      	movs	r1, #0
 8005e08:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8005e0c:	f7ff fe14 	bl	8005a38 <RCCEx_PLL3_Config>
 8005e10:	e7f7      	b.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8005e12:	4626      	mov	r6, r4
 8005e14:	e71a      	b.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x124>
 8005e16:	bf00      	nop
 8005e18:	58024400 	.word	0x58024400
    switch (PeriphClkInit->QspiClockSelection)
 8005e1c:	2b30      	cmp	r3, #48	; 0x30
 8005e1e:	f47f af24 	bne.w	8005c6a <HAL_RCCEx_PeriphCLKConfig+0x142>
    if (ret == HAL_OK)
 8005e22:	b9a4      	cbnz	r4, 8005e4e <HAL_RCCEx_PeriphCLKConfig+0x326>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005e24:	4aa0      	ldr	r2, [pc, #640]	; (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 8005e26:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 8005e28:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8005e2a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8005e2e:	430b      	orrs	r3, r1
 8005e30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005e32:	e71c      	b.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0x146>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e34:	4a9c      	ldr	r2, [pc, #624]	; (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 8005e36:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005e38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e3c:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 8005e3e:	e7f0      	b.n	8005e22 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005e40:	2102      	movs	r1, #2
 8005e42:	f105 0008 	add.w	r0, r5, #8
 8005e46:	f7ff fd7f 	bl	8005948 <RCCEx_PLL2_Config>
 8005e4a:	4604      	mov	r4, r0
        break;
 8005e4c:	e7e9      	b.n	8005e22 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
 8005e4e:	4626      	mov	r6, r4
 8005e50:	e70d      	b.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0x146>
    switch (PeriphClkInit->Spi123ClockSelection)
 8005e52:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005e56:	d003      	beq.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0x338>
 8005e58:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005e5c:	f47f af18 	bne.w	8005c90 <HAL_RCCEx_PeriphCLKConfig+0x168>
    if (ret == HAL_OK)
 8005e60:	b9d4      	cbnz	r4, 8005e98 <HAL_RCCEx_PeriphCLKConfig+0x370>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005e62:	4a91      	ldr	r2, [pc, #580]	; (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 8005e64:	6e29      	ldr	r1, [r5, #96]	; 0x60
 8005e66:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8005e68:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e6c:	430b      	orrs	r3, r1
 8005e6e:	6513      	str	r3, [r2, #80]	; 0x50
 8005e70:	e710      	b.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x16c>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e72:	4a8d      	ldr	r2, [pc, #564]	; (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 8005e74:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005e76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e7a:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 8005e7c:	e7f0      	b.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0x338>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005e7e:	2100      	movs	r1, #0
 8005e80:	f105 0008 	add.w	r0, r5, #8
 8005e84:	f7ff fd60 	bl	8005948 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005e88:	4604      	mov	r4, r0
        break;
 8005e8a:	e7e9      	b.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0x338>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005e8c:	2100      	movs	r1, #0
 8005e8e:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8005e92:	f7ff fdd1 	bl	8005a38 <RCCEx_PLL3_Config>
 8005e96:	e7f7      	b.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005e98:	4626      	mov	r6, r4
 8005e9a:	e6fb      	b.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    switch (PeriphClkInit->Spi45ClockSelection)
 8005e9c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005ea0:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 8005ea4:	d003      	beq.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0x386>
 8005ea6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005eaa:	f47f af04 	bne.w	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0x18e>
    if (ret == HAL_OK)
 8005eae:	b9a4      	cbnz	r4, 8005eda <HAL_RCCEx_PeriphCLKConfig+0x3b2>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005eb0:	4a7d      	ldr	r2, [pc, #500]	; (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 8005eb2:	6e69      	ldr	r1, [r5, #100]	; 0x64
 8005eb4:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8005eb6:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8005eba:	430b      	orrs	r3, r1
 8005ebc:	6513      	str	r3, [r2, #80]	; 0x50
 8005ebe:	e6fc      	b.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0x192>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005ec0:	2101      	movs	r1, #1
 8005ec2:	f105 0008 	add.w	r0, r5, #8
 8005ec6:	f7ff fd3f 	bl	8005948 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005eca:	4604      	mov	r4, r0
        break;
 8005ecc:	e7ef      	b.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0x386>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005ece:	2101      	movs	r1, #1
 8005ed0:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8005ed4:	f7ff fdb0 	bl	8005a38 <RCCEx_PLL3_Config>
 8005ed8:	e7f7      	b.n	8005eca <HAL_RCCEx_PeriphCLKConfig+0x3a2>
 8005eda:	4626      	mov	r6, r4
 8005edc:	e6ed      	b.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0x192>
    switch (PeriphClkInit->Spi6ClockSelection)
 8005ede:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005ee2:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8005ee6:	d003      	beq.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
 8005ee8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005eec:	f47f aef7 	bne.w	8005cde <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    if (ret == HAL_OK)
 8005ef0:	b9ac      	cbnz	r4, 8005f1e <HAL_RCCEx_PeriphCLKConfig+0x3f6>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005ef2:	4a6d      	ldr	r2, [pc, #436]	; (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 8005ef4:	f8d5 10b0 	ldr.w	r1, [r5, #176]	; 0xb0
 8005ef8:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8005efa:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8005efe:	430b      	orrs	r3, r1
 8005f00:	6593      	str	r3, [r2, #88]	; 0x58
 8005f02:	e6ee      	b.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005f04:	2101      	movs	r1, #1
 8005f06:	f105 0008 	add.w	r0, r5, #8
 8005f0a:	f7ff fd1d 	bl	8005948 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005f0e:	4604      	mov	r4, r0
        break;
 8005f10:	e7ee      	b.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005f12:	2101      	movs	r1, #1
 8005f14:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8005f18:	f7ff fd8e 	bl	8005a38 <RCCEx_PLL3_Config>
 8005f1c:	e7f7      	b.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8005f1e:	4626      	mov	r6, r4
 8005f20:	e6df      	b.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f22:	4a61      	ldr	r2, [pc, #388]	; (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 8005f24:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005f26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f2a:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 8005f2c:	b974      	cbnz	r4, 8005f4c <HAL_RCCEx_PeriphCLKConfig+0x424>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005f2e:	4a5e      	ldr	r2, [pc, #376]	; (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 8005f30:	6f29      	ldr	r1, [r5, #112]	; 0x70
 8005f32:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8005f34:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8005f38:	430b      	orrs	r3, r1
 8005f3a:	6513      	str	r3, [r2, #80]	; 0x50
 8005f3c:	e6e2      	b.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005f3e:	2101      	movs	r1, #1
 8005f40:	f105 0008 	add.w	r0, r5, #8
 8005f44:	f7ff fd00 	bl	8005948 <RCCEx_PLL2_Config>
 8005f48:	4604      	mov	r4, r0
        break;
 8005f4a:	e7ef      	b.n	8005f2c <HAL_RCCEx_PeriphCLKConfig+0x404>
 8005f4c:	4626      	mov	r6, r4
 8005f4e:	e6d9      	b.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f50:	4a55      	ldr	r2, [pc, #340]	; (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 8005f52:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005f54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f58:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 8005f5a:	2c00      	cmp	r4, #0
 8005f5c:	d14e      	bne.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005f5e:	4a52      	ldr	r2, [pc, #328]	; (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 8005f60:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 8005f62:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8005f64:	f023 0303 	bic.w	r3, r3, #3
 8005f68:	430b      	orrs	r3, r1
 8005f6a:	64d3      	str	r3, [r2, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005f6c:	682b      	ldr	r3, [r5, #0]
 8005f6e:	0259      	lsls	r1, r3, #9
 8005f70:	d54e      	bpl.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005f72:	4f4e      	ldr	r7, [pc, #312]	; (80060ac <HAL_RCCEx_PeriphCLKConfig+0x584>)
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f7a:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 8005f7c:	f7fc fcf6 	bl	800296c <HAL_GetTick>
 8005f80:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	05da      	lsls	r2, r3, #23
 8005f86:	d53b      	bpl.n	8006000 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    if (ret == HAL_OK)
 8005f88:	2c00      	cmp	r4, #0
 8005f8a:	d16d      	bne.n	8006068 <HAL_RCCEx_PeriphCLKConfig+0x540>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005f8c:	4b46      	ldr	r3, [pc, #280]	; (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 8005f8e:	f8d5 00b4 	ldr.w	r0, [r5, #180]	; 0xb4
 8005f92:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005f94:	4042      	eors	r2, r0
 8005f96:	f412 7f40 	tst.w	r2, #768	; 0x300
 8005f9a:	d00b      	beq.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005f9c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 8005f9e:	6f19      	ldr	r1, [r3, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005fa0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8005fa4:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8005fa8:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005faa:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8005fac:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8005fb0:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
 8005fb2:	671a      	str	r2, [r3, #112]	; 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005fb4:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8005fb8:	d041      	beq.n	800603e <HAL_RCCEx_PeriphCLKConfig+0x516>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005fba:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
 8005fbe:	493a      	ldr	r1, [pc, #232]	; (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 8005fc0:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8005fc4:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8005fc8:	d14a      	bne.n	8006060 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8005fca:	6908      	ldr	r0, [r1, #16]
 8005fcc:	4a38      	ldr	r2, [pc, #224]	; (80060b0 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8005fce:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
 8005fd2:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 8005fd6:	4302      	orrs	r2, r0
 8005fd8:	610a      	str	r2, [r1, #16]
 8005fda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005fde:	4a32      	ldr	r2, [pc, #200]	; (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 8005fe0:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8005fe2:	430b      	orrs	r3, r1
 8005fe4:	6713      	str	r3, [r2, #112]	; 0x70
 8005fe6:	e013      	b.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005fe8:	2102      	movs	r1, #2
 8005fea:	f105 0008 	add.w	r0, r5, #8
 8005fee:	f7ff fcab 	bl	8005948 <RCCEx_PLL2_Config>
 8005ff2:	4604      	mov	r4, r0
        break;
 8005ff4:	e7b1      	b.n	8005f5a <HAL_RCCEx_PeriphCLKConfig+0x432>
    switch (PeriphClkInit->FmcClockSelection)
 8005ff6:	2601      	movs	r6, #1
 8005ff8:	4634      	mov	r4, r6
 8005ffa:	e7b7      	b.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0x444>
 8005ffc:	4626      	mov	r6, r4
 8005ffe:	e7b5      	b.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0x444>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006000:	f7fc fcb4 	bl	800296c <HAL_GetTick>
 8006004:	eba0 0008 	sub.w	r0, r0, r8
 8006008:	2864      	cmp	r0, #100	; 0x64
 800600a:	d9ba      	bls.n	8005f82 <HAL_RCCEx_PeriphCLKConfig+0x45a>
        ret = HAL_TIMEOUT;
 800600c:	2603      	movs	r6, #3
 800600e:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006010:	682b      	ldr	r3, [r5, #0]
 8006012:	07d8      	lsls	r0, r3, #31
 8006014:	d508      	bpl.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0x500>
    switch (PeriphClkInit->Usart16ClockSelection)
 8006016:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 8006018:	2b10      	cmp	r3, #16
 800601a:	d03d      	beq.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0x570>
 800601c:	d826      	bhi.n	800606c <HAL_RCCEx_PeriphCLKConfig+0x544>
 800601e:	b35b      	cbz	r3, 8006078 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8006020:	2b08      	cmp	r3, #8
 8006022:	d032      	beq.n	800608a <HAL_RCCEx_PeriphCLKConfig+0x562>
 8006024:	2601      	movs	r6, #1
 8006026:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006028:	682b      	ldr	r3, [r5, #0]
 800602a:	0799      	lsls	r1, r3, #30
 800602c:	d550      	bpl.n	80060d0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
    switch (PeriphClkInit->Usart234578ClockSelection)
 800602e:	6fab      	ldr	r3, [r5, #120]	; 0x78
 8006030:	2b05      	cmp	r3, #5
 8006032:	d863      	bhi.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006034:	e8df f003 	tbb	[pc, r3]
 8006038:	445c3e44 	.word	0x445c3e44
 800603c:	4444      	.short	0x4444
        tickstart = HAL_GetTick();
 800603e:	f7fc fc95 	bl	800296c <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006042:	f8df 8064 	ldr.w	r8, [pc, #100]	; 80060a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
        tickstart = HAL_GetTick();
 8006046:	4607      	mov	r7, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006048:	f241 3988 	movw	r9, #5000	; 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800604c:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 8006050:	079b      	lsls	r3, r3, #30
 8006052:	d4b2      	bmi.n	8005fba <HAL_RCCEx_PeriphCLKConfig+0x492>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006054:	f7fc fc8a 	bl	800296c <HAL_GetTick>
 8006058:	1bc0      	subs	r0, r0, r7
 800605a:	4548      	cmp	r0, r9
 800605c:	d9f6      	bls.n	800604c <HAL_RCCEx_PeriphCLKConfig+0x524>
 800605e:	e7d5      	b.n	800600c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006060:	690a      	ldr	r2, [r1, #16]
 8006062:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8006066:	e7b7      	b.n	8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8006068:	4626      	mov	r6, r4
 800606a:	e7d1      	b.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    switch (PeriphClkInit->Usart16ClockSelection)
 800606c:	f023 0208 	bic.w	r2, r3, #8
 8006070:	2a20      	cmp	r2, #32
 8006072:	d001      	beq.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8006074:	2b18      	cmp	r3, #24
 8006076:	d1d5      	bne.n	8006024 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    if (ret == HAL_OK)
 8006078:	b9a4      	cbnz	r4, 80060a4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800607a:	4a0b      	ldr	r2, [pc, #44]	; (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 800607c:	6fe9      	ldr	r1, [r5, #124]	; 0x7c
 800607e:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8006080:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8006084:	430b      	orrs	r3, r1
 8006086:	6553      	str	r3, [r2, #84]	; 0x54
 8006088:	e7ce      	b.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0x500>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800608a:	2101      	movs	r1, #1
 800608c:	f105 0008 	add.w	r0, r5, #8
 8006090:	f7ff fc5a 	bl	8005948 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006094:	4604      	mov	r4, r0
        break;
 8006096:	e7ef      	b.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0x550>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006098:	2101      	movs	r1, #1
 800609a:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800609e:	f7ff fccb 	bl	8005a38 <RCCEx_PLL3_Config>
 80060a2:	e7f7      	b.n	8006094 <HAL_RCCEx_PeriphCLKConfig+0x56c>
 80060a4:	4626      	mov	r6, r4
 80060a6:	e7bf      	b.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0x500>
 80060a8:	58024400 	.word	0x58024400
 80060ac:	58024800 	.word	0x58024800
 80060b0:	00ffffcf 	.word	0x00ffffcf
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80060b4:	2101      	movs	r1, #1
 80060b6:	f105 0008 	add.w	r0, r5, #8
 80060ba:	f7ff fc45 	bl	8005948 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80060be:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 80060c0:	b9fc      	cbnz	r4, 8006102 <HAL_RCCEx_PeriphCLKConfig+0x5da>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80060c2:	4a11      	ldr	r2, [pc, #68]	; (8006108 <HAL_RCCEx_PeriphCLKConfig+0x5e0>)
 80060c4:	6fa9      	ldr	r1, [r5, #120]	; 0x78
 80060c6:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80060c8:	f023 0307 	bic.w	r3, r3, #7
 80060cc:	430b      	orrs	r3, r1
 80060ce:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80060d0:	682b      	ldr	r3, [r5, #0]
 80060d2:	075a      	lsls	r2, r3, #29
 80060d4:	d52b      	bpl.n	800612e <HAL_RCCEx_PeriphCLKConfig+0x606>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80060d6:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 80060da:	2b05      	cmp	r3, #5
 80060dc:	f200 817c 	bhi.w	80063d8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
 80060e0:	e8df f013 	tbh	[pc, r3, lsl #1]
 80060e4:	0014001a 	.word	0x0014001a
 80060e8:	001a0174 	.word	0x001a0174
 80060ec:	001a001a 	.word	0x001a001a
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80060f0:	2101      	movs	r1, #1
 80060f2:	f105 0028 	add.w	r0, r5, #40	; 0x28
 80060f6:	f7ff fc9f 	bl	8005a38 <RCCEx_PLL3_Config>
 80060fa:	e7e0      	b.n	80060be <HAL_RCCEx_PeriphCLKConfig+0x596>
    switch (PeriphClkInit->Usart234578ClockSelection)
 80060fc:	2601      	movs	r6, #1
 80060fe:	4634      	mov	r4, r6
 8006100:	e7e6      	b.n	80060d0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
 8006102:	4626      	mov	r6, r4
 8006104:	e7e4      	b.n	80060d0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
 8006106:	bf00      	nop
 8006108:	58024400 	.word	0x58024400
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800610c:	2101      	movs	r1, #1
 800610e:	f105 0008 	add.w	r0, r5, #8
 8006112:	f7ff fc19 	bl	8005948 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006116:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 8006118:	2c00      	cmp	r4, #0
 800611a:	f040 8160 	bne.w	80063de <HAL_RCCEx_PeriphCLKConfig+0x8b6>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800611e:	4aaa      	ldr	r2, [pc, #680]	; (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x8a0>)
 8006120:	f8d5 1094 	ldr.w	r1, [r5, #148]	; 0x94
 8006124:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8006126:	f023 0307 	bic.w	r3, r3, #7
 800612a:	430b      	orrs	r3, r1
 800612c:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800612e:	682b      	ldr	r3, [r5, #0]
 8006130:	069b      	lsls	r3, r3, #26
 8006132:	d510      	bpl.n	8006156 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006134:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8006138:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800613c:	f000 816b 	beq.w	8006416 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8006140:	f200 814f 	bhi.w	80063e2 <HAL_RCCEx_PeriphCLKConfig+0x8ba>
 8006144:	2b00      	cmp	r3, #0
 8006146:	f000 8155 	beq.w	80063f4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
 800614a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800614e:	f000 815b 	beq.w	8006408 <HAL_RCCEx_PeriphCLKConfig+0x8e0>
 8006152:	2601      	movs	r6, #1
 8006154:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006156:	682b      	ldr	r3, [r5, #0]
 8006158:	065f      	lsls	r7, r3, #25
 800615a:	d510      	bpl.n	800617e <HAL_RCCEx_PeriphCLKConfig+0x656>
    switch (PeriphClkInit->Lptim2ClockSelection)
 800615c:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
 8006160:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006164:	f000 8179 	beq.w	800645a <HAL_RCCEx_PeriphCLKConfig+0x932>
 8006168:	f200 815d 	bhi.w	8006426 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 800616c:	2b00      	cmp	r3, #0
 800616e:	f000 8163 	beq.w	8006438 <HAL_RCCEx_PeriphCLKConfig+0x910>
 8006172:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006176:	f000 8169 	beq.w	800644c <HAL_RCCEx_PeriphCLKConfig+0x924>
 800617a:	2601      	movs	r6, #1
 800617c:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800617e:	682b      	ldr	r3, [r5, #0]
 8006180:	0618      	lsls	r0, r3, #24
 8006182:	d510      	bpl.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006184:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
 8006188:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800618c:	f000 8187 	beq.w	800649e <HAL_RCCEx_PeriphCLKConfig+0x976>
 8006190:	f200 816b 	bhi.w	800646a <HAL_RCCEx_PeriphCLKConfig+0x942>
 8006194:	2b00      	cmp	r3, #0
 8006196:	f000 8171 	beq.w	800647c <HAL_RCCEx_PeriphCLKConfig+0x954>
 800619a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800619e:	f000 8177 	beq.w	8006490 <HAL_RCCEx_PeriphCLKConfig+0x968>
 80061a2:	2601      	movs	r6, #1
 80061a4:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80061a6:	682b      	ldr	r3, [r5, #0]
 80061a8:	0719      	lsls	r1, r3, #28
 80061aa:	d514      	bpl.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0x6ae>
    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80061ac:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
 80061b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061b4:	d107      	bne.n	80061c6 <HAL_RCCEx_PeriphCLKConfig+0x69e>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80061b6:	2102      	movs	r1, #2
 80061b8:	f105 0028 	add.w	r0, r5, #40	; 0x28
 80061bc:	f7ff fc3c 	bl	8005a38 <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 80061c0:	2800      	cmp	r0, #0
 80061c2:	bf18      	it	ne
 80061c4:	2601      	movne	r6, #1
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80061c6:	4a80      	ldr	r2, [pc, #512]	; (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x8a0>)
 80061c8:	f8d5 1084 	ldr.w	r1, [r5, #132]	; 0x84
 80061cc:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80061ce:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80061d2:	430b      	orrs	r3, r1
 80061d4:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80061d6:	682b      	ldr	r3, [r5, #0]
 80061d8:	06da      	lsls	r2, r3, #27
 80061da:	d514      	bpl.n	8006206 <HAL_RCCEx_PeriphCLKConfig+0x6de>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80061dc:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 80061e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061e4:	d107      	bne.n	80061f6 <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80061e6:	2102      	movs	r1, #2
 80061e8:	f105 0028 	add.w	r0, r5, #40	; 0x28
 80061ec:	f7ff fc24 	bl	8005a38 <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 80061f0:	2800      	cmp	r0, #0
 80061f2:	bf18      	it	ne
 80061f4:	2601      	movne	r6, #1
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80061f6:	4a74      	ldr	r2, [pc, #464]	; (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x8a0>)
 80061f8:	f8d5 1098 	ldr.w	r1, [r5, #152]	; 0x98
 80061fc:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80061fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006202:	430b      	orrs	r3, r1
 8006204:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006206:	682b      	ldr	r3, [r5, #0]
 8006208:	031b      	lsls	r3, r3, #12
 800620a:	d51b      	bpl.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0x71c>
    switch (PeriphClkInit->AdcClockSelection)
 800620c:	f8d5 10a4 	ldr.w	r1, [r5, #164]	; 0xa4
 8006210:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8006214:	f000 814b 	beq.w	80064ae <HAL_RCCEx_PeriphCLKConfig+0x986>
 8006218:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 800621c:	d007      	beq.n	800622e <HAL_RCCEx_PeriphCLKConfig+0x706>
 800621e:	2900      	cmp	r1, #0
 8006220:	f040 814b 	bne.w	80064ba <HAL_RCCEx_PeriphCLKConfig+0x992>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006224:	f105 0008 	add.w	r0, r5, #8
 8006228:	f7ff fb8e 	bl	8005948 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800622c:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 800622e:	2c00      	cmp	r4, #0
 8006230:	f040 8146 	bne.w	80064c0 <HAL_RCCEx_PeriphCLKConfig+0x998>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006234:	4a64      	ldr	r2, [pc, #400]	; (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x8a0>)
 8006236:	f8d5 10a4 	ldr.w	r1, [r5, #164]	; 0xa4
 800623a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800623c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8006240:	430b      	orrs	r3, r1
 8006242:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006244:	682b      	ldr	r3, [r5, #0]
 8006246:	035f      	lsls	r7, r3, #13
 8006248:	d51c      	bpl.n	8006284 <HAL_RCCEx_PeriphCLKConfig+0x75c>
    switch (PeriphClkInit->UsbClockSelection)
 800624a:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 800624e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006252:	f000 8137 	beq.w	80064c4 <HAL_RCCEx_PeriphCLKConfig+0x99c>
 8006256:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800625a:	d008      	beq.n	800626e <HAL_RCCEx_PeriphCLKConfig+0x746>
 800625c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006260:	f040 8137 	bne.w	80064d2 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006264:	4a58      	ldr	r2, [pc, #352]	; (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x8a0>)
 8006266:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8006268:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800626c:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 800626e:	2c00      	cmp	r4, #0
 8006270:	f040 8132 	bne.w	80064d8 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006274:	4a54      	ldr	r2, [pc, #336]	; (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x8a0>)
 8006276:	f8d5 1088 	ldr.w	r1, [r5, #136]	; 0x88
 800627a:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800627c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006280:	430b      	orrs	r3, r1
 8006282:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006284:	682b      	ldr	r3, [r5, #0]
 8006286:	03d8      	lsls	r0, r3, #15
 8006288:	d509      	bpl.n	800629e <HAL_RCCEx_PeriphCLKConfig+0x776>
    switch (PeriphClkInit->SdmmcClockSelection)
 800628a:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800628c:	2b00      	cmp	r3, #0
 800628e:	f000 8125 	beq.w	80064dc <HAL_RCCEx_PeriphCLKConfig+0x9b4>
 8006292:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006296:	f000 812f 	beq.w	80064f8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800629a:	2601      	movs	r6, #1
 800629c:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800629e:	682b      	ldr	r3, [r5, #0]
 80062a0:	0099      	lsls	r1, r3, #2
 80062a2:	d507      	bpl.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0x78c>
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80062a4:	2102      	movs	r1, #2
 80062a6:	f105 0028 	add.w	r0, r5, #40	; 0x28
 80062aa:	f7ff fbc5 	bl	8005a38 <RCCEx_PLL3_Config>
      status = HAL_ERROR;
 80062ae:	2800      	cmp	r0, #0
 80062b0:	bf18      	it	ne
 80062b2:	2601      	movne	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80062b4:	e9d5 3100 	ldrd	r3, r1, [r5]
 80062b8:	039a      	lsls	r2, r3, #14
 80062ba:	d50b      	bpl.n	80062d4 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
    switch (PeriphClkInit->RngClockSelection)
 80062bc:	f8d5 0080 	ldr.w	r0, [r5, #128]	; 0x80
 80062c0:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 80062c4:	f000 812f 	beq.w	8006526 <HAL_RCCEx_PeriphCLKConfig+0x9fe>
 80062c8:	f200 811f 	bhi.w	800650a <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 80062cc:	2800      	cmp	r0, #0
 80062ce:	f000 8122 	beq.w	8006516 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 80062d2:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80062d4:	02df      	lsls	r7, r3, #11
 80062d6:	d506      	bpl.n	80062e6 <HAL_RCCEx_PeriphCLKConfig+0x7be>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80062d8:	483b      	ldr	r0, [pc, #236]	; (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x8a0>)
 80062da:	6f6c      	ldr	r4, [r5, #116]	; 0x74
 80062dc:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80062de:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80062e2:	4322      	orrs	r2, r4
 80062e4:	6502      	str	r2, [r0, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80062e6:	00dc      	lsls	r4, r3, #3
 80062e8:	d507      	bpl.n	80062fa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80062ea:	4837      	ldr	r0, [pc, #220]	; (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x8a0>)
 80062ec:	f8d5 40b8 	ldr.w	r4, [r5, #184]	; 0xb8
 80062f0:	6902      	ldr	r2, [r0, #16]
 80062f2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80062f6:	4322      	orrs	r2, r4
 80062f8:	6102      	str	r2, [r0, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80062fa:	0298      	lsls	r0, r3, #10
 80062fc:	d506      	bpl.n	800630c <HAL_RCCEx_PeriphCLKConfig+0x7e4>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80062fe:	4832      	ldr	r0, [pc, #200]	; (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x8a0>)
 8006300:	6eec      	ldr	r4, [r5, #108]	; 0x6c
 8006302:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8006304:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8006308:	4322      	orrs	r2, r4
 800630a:	6502      	str	r2, [r0, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800630c:	005a      	lsls	r2, r3, #1
 800630e:	d509      	bpl.n	8006324 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006310:	4a2d      	ldr	r2, [pc, #180]	; (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x8a0>)
 8006312:	6910      	ldr	r0, [r2, #16]
 8006314:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
 8006318:	6110      	str	r0, [r2, #16]
 800631a:	6910      	ldr	r0, [r2, #16]
 800631c:	f8d5 40bc 	ldr.w	r4, [r5, #188]	; 0xbc
 8006320:	4320      	orrs	r0, r4
 8006322:	6110      	str	r0, [r2, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006324:	2b00      	cmp	r3, #0
 8006326:	da06      	bge.n	8006336 <HAL_RCCEx_PeriphCLKConfig+0x80e>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006328:	4827      	ldr	r0, [pc, #156]	; (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x8a0>)
 800632a:	6d6c      	ldr	r4, [r5, #84]	; 0x54
 800632c:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 800632e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006332:	4322      	orrs	r2, r4
 8006334:	64c2      	str	r2, [r0, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006336:	021b      	lsls	r3, r3, #8
 8006338:	d507      	bpl.n	800634a <HAL_RCCEx_PeriphCLKConfig+0x822>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800633a:	4a23      	ldr	r2, [pc, #140]	; (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x8a0>)
 800633c:	f8d5 008c 	ldr.w	r0, [r5, #140]	; 0x8c
 8006340:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8006342:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8006346:	4303      	orrs	r3, r0
 8006348:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800634a:	07cf      	lsls	r7, r1, #31
 800634c:	d507      	bpl.n	800635e <HAL_RCCEx_PeriphCLKConfig+0x836>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800634e:	2100      	movs	r1, #0
 8006350:	f105 0008 	add.w	r0, r5, #8
 8006354:	f7ff faf8 	bl	8005948 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 8006358:	2800      	cmp	r0, #0
 800635a:	bf18      	it	ne
 800635c:	4606      	movne	r6, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800635e:	686b      	ldr	r3, [r5, #4]
 8006360:	079c      	lsls	r4, r3, #30
 8006362:	d507      	bpl.n	8006374 <HAL_RCCEx_PeriphCLKConfig+0x84c>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006364:	2101      	movs	r1, #1
 8006366:	f105 0008 	add.w	r0, r5, #8
 800636a:	f7ff faed 	bl	8005948 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 800636e:	2800      	cmp	r0, #0
 8006370:	bf18      	it	ne
 8006372:	4606      	movne	r6, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006374:	686b      	ldr	r3, [r5, #4]
 8006376:	0758      	lsls	r0, r3, #29
 8006378:	d507      	bpl.n	800638a <HAL_RCCEx_PeriphCLKConfig+0x862>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800637a:	2102      	movs	r1, #2
 800637c:	f105 0008 	add.w	r0, r5, #8
 8006380:	f7ff fae2 	bl	8005948 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 8006384:	2800      	cmp	r0, #0
 8006386:	bf18      	it	ne
 8006388:	4606      	movne	r6, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800638a:	686b      	ldr	r3, [r5, #4]
 800638c:	0719      	lsls	r1, r3, #28
 800638e:	d507      	bpl.n	80063a0 <HAL_RCCEx_PeriphCLKConfig+0x878>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006390:	2100      	movs	r1, #0
 8006392:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8006396:	f7ff fb4f 	bl	8005a38 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800639a:	2800      	cmp	r0, #0
 800639c:	bf18      	it	ne
 800639e:	4606      	movne	r6, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80063a0:	686b      	ldr	r3, [r5, #4]
 80063a2:	06da      	lsls	r2, r3, #27
 80063a4:	d507      	bpl.n	80063b6 <HAL_RCCEx_PeriphCLKConfig+0x88e>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80063a6:	2101      	movs	r1, #1
 80063a8:	f105 0028 	add.w	r0, r5, #40	; 0x28
 80063ac:	f7ff fb44 	bl	8005a38 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 80063b0:	2800      	cmp	r0, #0
 80063b2:	bf18      	it	ne
 80063b4:	4606      	movne	r6, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80063b6:	686b      	ldr	r3, [r5, #4]
 80063b8:	069b      	lsls	r3, r3, #26
 80063ba:	f100 80bc 	bmi.w	8006536 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
    return HAL_OK;
 80063be:	1e30      	subs	r0, r6, #0
 80063c0:	bf18      	it	ne
 80063c2:	2001      	movne	r0, #1
}
 80063c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80063c8:	58024400 	.word	0x58024400
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80063cc:	2101      	movs	r1, #1
 80063ce:	f105 0028 	add.w	r0, r5, #40	; 0x28
 80063d2:	f7ff fb31 	bl	8005a38 <RCCEx_PLL3_Config>
 80063d6:	e69e      	b.n	8006116 <HAL_RCCEx_PeriphCLKConfig+0x5ee>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80063d8:	2601      	movs	r6, #1
 80063da:	4634      	mov	r4, r6
 80063dc:	e6a7      	b.n	800612e <HAL_RCCEx_PeriphCLKConfig+0x606>
 80063de:	4626      	mov	r6, r4
 80063e0:	e6a5      	b.n	800612e <HAL_RCCEx_PeriphCLKConfig+0x606>
    switch (PeriphClkInit->Lptim1ClockSelection)
 80063e2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80063e6:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80063ea:	d003      	beq.n	80063f4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
 80063ec:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80063f0:	f47f aeaf 	bne.w	8006152 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    if (ret == HAL_OK)
 80063f4:	b9ac      	cbnz	r4, 8006422 <HAL_RCCEx_PeriphCLKConfig+0x8fa>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80063f6:	4a55      	ldr	r2, [pc, #340]	; (800654c <HAL_RCCEx_PeriphCLKConfig+0xa24>)
 80063f8:	f8d5 1090 	ldr.w	r1, [r5, #144]	; 0x90
 80063fc:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80063fe:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8006402:	430b      	orrs	r3, r1
 8006404:	6553      	str	r3, [r2, #84]	; 0x54
 8006406:	e6a6      	b.n	8006156 <HAL_RCCEx_PeriphCLKConfig+0x62e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006408:	2100      	movs	r1, #0
 800640a:	f105 0008 	add.w	r0, r5, #8
 800640e:	f7ff fa9b 	bl	8005948 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006412:	4604      	mov	r4, r0
        break;
 8006414:	e7ee      	b.n	80063f4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006416:	2102      	movs	r1, #2
 8006418:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800641c:	f7ff fb0c 	bl	8005a38 <RCCEx_PLL3_Config>
 8006420:	e7f7      	b.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0x8ea>
 8006422:	4626      	mov	r6, r4
 8006424:	e697      	b.n	8006156 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006426:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800642a:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800642e:	d003      	beq.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0x910>
 8006430:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006434:	f47f aea1 	bne.w	800617a <HAL_RCCEx_PeriphCLKConfig+0x652>
    if (ret == HAL_OK)
 8006438:	b9ac      	cbnz	r4, 8006466 <HAL_RCCEx_PeriphCLKConfig+0x93e>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800643a:	4a44      	ldr	r2, [pc, #272]	; (800654c <HAL_RCCEx_PeriphCLKConfig+0xa24>)
 800643c:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
 8006440:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8006442:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8006446:	430b      	orrs	r3, r1
 8006448:	6593      	str	r3, [r2, #88]	; 0x58
 800644a:	e698      	b.n	800617e <HAL_RCCEx_PeriphCLKConfig+0x656>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800644c:	2100      	movs	r1, #0
 800644e:	f105 0008 	add.w	r0, r5, #8
 8006452:	f7ff fa79 	bl	8005948 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006456:	4604      	mov	r4, r0
        break;
 8006458:	e7ee      	b.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0x910>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800645a:	2102      	movs	r1, #2
 800645c:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8006460:	f7ff faea 	bl	8005a38 <RCCEx_PLL3_Config>
 8006464:	e7f7      	b.n	8006456 <HAL_RCCEx_PeriphCLKConfig+0x92e>
 8006466:	4626      	mov	r6, r4
 8006468:	e689      	b.n	800617e <HAL_RCCEx_PeriphCLKConfig+0x656>
    switch (PeriphClkInit->Lptim345ClockSelection)
 800646a:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800646e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8006472:	d003      	beq.n	800647c <HAL_RCCEx_PeriphCLKConfig+0x954>
 8006474:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006478:	f47f ae93 	bne.w	80061a2 <HAL_RCCEx_PeriphCLKConfig+0x67a>
    if (ret == HAL_OK)
 800647c:	b9ac      	cbnz	r4, 80064aa <HAL_RCCEx_PeriphCLKConfig+0x982>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800647e:	4a33      	ldr	r2, [pc, #204]	; (800654c <HAL_RCCEx_PeriphCLKConfig+0xa24>)
 8006480:	f8d5 10a0 	ldr.w	r1, [r5, #160]	; 0xa0
 8006484:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8006486:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800648a:	430b      	orrs	r3, r1
 800648c:	6593      	str	r3, [r2, #88]	; 0x58
 800648e:	e68a      	b.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006490:	2100      	movs	r1, #0
 8006492:	f105 0008 	add.w	r0, r5, #8
 8006496:	f7ff fa57 	bl	8005948 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800649a:	4604      	mov	r4, r0
        break;
 800649c:	e7ee      	b.n	800647c <HAL_RCCEx_PeriphCLKConfig+0x954>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800649e:	2102      	movs	r1, #2
 80064a0:	f105 0028 	add.w	r0, r5, #40	; 0x28
 80064a4:	f7ff fac8 	bl	8005a38 <RCCEx_PLL3_Config>
 80064a8:	e7f7      	b.n	800649a <HAL_RCCEx_PeriphCLKConfig+0x972>
 80064aa:	4626      	mov	r6, r4
 80064ac:	e67b      	b.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80064ae:	2102      	movs	r1, #2
 80064b0:	f105 0028 	add.w	r0, r5, #40	; 0x28
 80064b4:	f7ff fac0 	bl	8005a38 <RCCEx_PLL3_Config>
 80064b8:	e6b8      	b.n	800622c <HAL_RCCEx_PeriphCLKConfig+0x704>
    switch (PeriphClkInit->AdcClockSelection)
 80064ba:	2601      	movs	r6, #1
 80064bc:	4634      	mov	r4, r6
 80064be:	e6c1      	b.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80064c0:	4626      	mov	r6, r4
 80064c2:	e6bf      	b.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0x71c>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80064c4:	2101      	movs	r1, #1
 80064c6:	f105 0028 	add.w	r0, r5, #40	; 0x28
 80064ca:	f7ff fab5 	bl	8005a38 <RCCEx_PLL3_Config>
 80064ce:	4604      	mov	r4, r0
        break;
 80064d0:	e6cd      	b.n	800626e <HAL_RCCEx_PeriphCLKConfig+0x746>
    switch (PeriphClkInit->UsbClockSelection)
 80064d2:	2601      	movs	r6, #1
 80064d4:	4634      	mov	r4, r6
 80064d6:	e6d5      	b.n	8006284 <HAL_RCCEx_PeriphCLKConfig+0x75c>
 80064d8:	4626      	mov	r6, r4
 80064da:	e6d3      	b.n	8006284 <HAL_RCCEx_PeriphCLKConfig+0x75c>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064dc:	4a1b      	ldr	r2, [pc, #108]	; (800654c <HAL_RCCEx_PeriphCLKConfig+0xa24>)
 80064de:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80064e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80064e4:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 80064e6:	b974      	cbnz	r4, 8006506 <HAL_RCCEx_PeriphCLKConfig+0x9de>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80064e8:	4a18      	ldr	r2, [pc, #96]	; (800654c <HAL_RCCEx_PeriphCLKConfig+0xa24>)
 80064ea:	6d29      	ldr	r1, [r5, #80]	; 0x50
 80064ec:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80064ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80064f2:	430b      	orrs	r3, r1
 80064f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80064f6:	e6d2      	b.n	800629e <HAL_RCCEx_PeriphCLKConfig+0x776>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80064f8:	2102      	movs	r1, #2
 80064fa:	f105 0008 	add.w	r0, r5, #8
 80064fe:	f7ff fa23 	bl	8005948 <RCCEx_PLL2_Config>
 8006502:	4604      	mov	r4, r0
        break;
 8006504:	e7ef      	b.n	80064e6 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8006506:	4626      	mov	r6, r4
 8006508:	e6c9      	b.n	800629e <HAL_RCCEx_PeriphCLKConfig+0x776>
    switch (PeriphClkInit->RngClockSelection)
 800650a:	f420 7280 	bic.w	r2, r0, #256	; 0x100
 800650e:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8006512:	f47f aede 	bne.w	80062d2 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    if (ret == HAL_OK)
 8006516:	b964      	cbnz	r4, 8006532 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006518:	4c0c      	ldr	r4, [pc, #48]	; (800654c <HAL_RCCEx_PeriphCLKConfig+0xa24>)
 800651a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800651c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006520:	4302      	orrs	r2, r0
 8006522:	6562      	str	r2, [r4, #84]	; 0x54
 8006524:	e6d6      	b.n	80062d4 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006526:	4f09      	ldr	r7, [pc, #36]	; (800654c <HAL_RCCEx_PeriphCLKConfig+0xa24>)
 8006528:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800652a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800652e:	62fa      	str	r2, [r7, #44]	; 0x2c
        break;
 8006530:	e7f1      	b.n	8006516 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 8006532:	4626      	mov	r6, r4
 8006534:	e6ce      	b.n	80062d4 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006536:	2102      	movs	r1, #2
 8006538:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800653c:	f7ff fa7c 	bl	8005a38 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 8006540:	2800      	cmp	r0, #0
 8006542:	f43f af3c 	beq.w	80063be <HAL_RCCEx_PeriphCLKConfig+0x896>
  return HAL_ERROR;
 8006546:	2001      	movs	r0, #1
 8006548:	e73c      	b.n	80063c4 <HAL_RCCEx_PeriphCLKConfig+0x89c>
 800654a:	bf00      	nop
 800654c:	58024400 	.word	0x58024400

08006550 <HAL_RCCEx_GetD3PCLK1Freq>:
{
 8006550:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006552:	f7ff f9b3 	bl	80058bc <HAL_RCC_GetHCLKFreq>
 8006556:	4b05      	ldr	r3, [pc, #20]	; (800656c <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 8006558:	4a05      	ldr	r2, [pc, #20]	; (8006570 <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 800655a:	6a1b      	ldr	r3, [r3, #32]
 800655c:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8006560:	5cd3      	ldrb	r3, [r2, r3]
 8006562:	f003 031f 	and.w	r3, r3, #31
}
 8006566:	40d8      	lsrs	r0, r3
 8006568:	bd08      	pop	{r3, pc}
 800656a:	bf00      	nop
 800656c:	58024400 	.word	0x58024400
 8006570:	08016870 	.word	0x08016870

08006574 <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006574:	4a4e      	ldr	r2, [pc, #312]	; (80066b0 <HAL_RCCEx_GetPLL2ClockFreq+0x13c>)
{
 8006576:	b570      	push	{r4, r5, r6, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006578:	6a94      	ldr	r4, [r2, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800657a:	6a96      	ldr	r6, [r2, #40]	; 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800657c:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
  if (pll2m != 0U)
 800657e:	f416 3f7c 	tst.w	r6, #258048	; 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006582:	f3c6 3105 	ubfx	r1, r6, #12, #6
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006586:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
  if (pll2m != 0U)
 8006588:	f000 808d 	beq.w	80066a6 <HAL_RCCEx_GetPLL2ClockFreq+0x132>
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800658c:	ee07 1a90 	vmov	s15, r1
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006590:	f3c3 03cc 	ubfx	r3, r3, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006594:	f3c5 1100 	ubfx	r1, r5, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006598:	f004 0403 	and.w	r4, r4, #3
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800659c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80065a0:	434b      	muls	r3, r1
    switch (pllsource)
 80065a2:	2c01      	cmp	r4, #1
 80065a4:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80065a8:	ee07 3a90 	vmov	s15, r3
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80065ac:	eefa 7ae9 	vcvt.f32.s32	s15, s15, #13
    switch (pllsource)
 80065b0:	d06b      	beq.n	800668a <HAL_RCCEx_GetPLL2ClockFreq+0x116>
 80065b2:	2c02      	cmp	r4, #2
 80065b4:	d05b      	beq.n	800666e <HAL_RCCEx_GetPLL2ClockFreq+0xfa>
 80065b6:	2c00      	cmp	r4, #0
 80065b8:	d167      	bne.n	800668a <HAL_RCCEx_GetPLL2ClockFreq+0x116>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80065ba:	6813      	ldr	r3, [r2, #0]
 80065bc:	069b      	lsls	r3, r3, #26
 80065be:	d546      	bpl.n	800664e <HAL_RCCEx_GetPLL2ClockFreq+0xda>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80065c0:	6811      	ldr	r1, [r2, #0]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80065c2:	6b93      	ldr	r3, [r2, #56]	; 0x38
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80065c4:	f3c1 01c1 	ubfx	r1, r1, #3, #2
 80065c8:	4a3a      	ldr	r2, [pc, #232]	; (80066b4 <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80065ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80065ce:	40ca      	lsrs	r2, r1
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80065d0:	ee07 2a10 	vmov	s14, r2
 80065d4:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 80065d8:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 80065dc:	ee06 3a90 	vmov	s13, r3
 80065e0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80065e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80065e8:	ee77 7a86 	vadd.f32	s15, s15, s12
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80065ec:	4a30      	ldr	r2, [pc, #192]	; (80066b0 <HAL_RCCEx_GetPLL2ClockFreq+0x13c>)
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80065ee:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80065f2:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80065f4:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80065f8:	ee07 3a10 	vmov	s14, r3
 80065fc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8006600:	ee37 7a06 	vadd.f32	s14, s14, s12
 8006604:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006608:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800660c:	edc0 6a00 	vstr	s13, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8006610:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8006612:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8006616:	ee07 3a10 	vmov	s14, r3
 800661a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800661e:	ee37 7a06 	vadd.f32	s14, s14, s12
 8006622:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006626:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800662a:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800662e:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8006630:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8006634:	ee07 3a10 	vmov	s14, r3
 8006638:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800663c:	ee37 6a06 	vadd.f32	s12, s14, s12
 8006640:	ee87 7a86 	vdiv.f32	s14, s15, s12
 8006644:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8006648:	ed80 7a02 	vstr	s14, [r0, #8]
}
 800664c:	bd70      	pop	{r4, r5, r6, pc}
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800664e:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8006650:	eddf 5a19 	vldr	s11, [pc, #100]	; 80066b8 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 8006654:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006658:	ee07 3a10 	vmov	s14, r3
 800665c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8006660:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006664:	ee77 7a86 	vadd.f32	s15, s15, s12
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006668:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 800666c:	e7be      	b.n	80065ec <HAL_RCCEx_GetPLL2ClockFreq+0x78>
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800666e:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8006670:	eddf 5a12 	vldr	s11, [pc, #72]	; 80066bc <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 8006674:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006678:	ee07 3a10 	vmov	s14, r3
 800667c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8006680:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006684:	ee77 7a86 	vadd.f32	s15, s15, s12
 8006688:	e7ee      	b.n	8006668 <HAL_RCCEx_GetPLL2ClockFreq+0xf4>
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800668a:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800668c:	eddf 5a0c 	vldr	s11, [pc, #48]	; 80066c0 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>
 8006690:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006694:	ee07 3a10 	vmov	s14, r3
 8006698:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800669c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80066a0:	ee77 7a86 	vadd.f32	s15, s15, s12
 80066a4:	e7e0      	b.n	8006668 <HAL_RCCEx_GetPLL2ClockFreq+0xf4>
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80066a6:	e9c0 1100 	strd	r1, r1, [r0]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80066aa:	6081      	str	r1, [r0, #8]
}
 80066ac:	e7ce      	b.n	800664c <HAL_RCCEx_GetPLL2ClockFreq+0xd8>
 80066ae:	bf00      	nop
 80066b0:	58024400 	.word	0x58024400
 80066b4:	03d09000 	.word	0x03d09000
 80066b8:	4c742400 	.word	0x4c742400
 80066bc:	4bbebc20 	.word	0x4bbebc20
 80066c0:	4a742400 	.word	0x4a742400

080066c4 <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80066c4:	4a4e      	ldr	r2, [pc, #312]	; (8006800 <HAL_RCCEx_GetPLL3ClockFreq+0x13c>)
{
 80066c6:	b570      	push	{r4, r5, r6, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80066c8:	6a94      	ldr	r4, [r2, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80066ca:	6a96      	ldr	r6, [r2, #40]	; 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80066cc:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
  if (pll3m != 0U)
 80066ce:	f016 7f7c 	tst.w	r6, #66060288	; 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80066d2:	f3c6 5105 	ubfx	r1, r6, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80066d6:	6c53      	ldr	r3, [r2, #68]	; 0x44
  if (pll3m != 0U)
 80066d8:	f000 808d 	beq.w	80067f6 <HAL_RCCEx_GetPLL3ClockFreq+0x132>
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80066dc:	ee07 1a90 	vmov	s15, r1
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80066e0:	f3c3 03cc 	ubfx	r3, r3, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80066e4:	f3c5 2100 	ubfx	r1, r5, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80066e8:	f004 0403 	and.w	r4, r4, #3
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80066ec:	eef8 6ae7 	vcvt.f32.s32	s13, s15
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80066f0:	434b      	muls	r3, r1
    switch (pllsource)
 80066f2:	2c01      	cmp	r4, #1
 80066f4:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80066f8:	ee07 3a90 	vmov	s15, r3
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80066fc:	eefa 7ae9 	vcvt.f32.s32	s15, s15, #13
    switch (pllsource)
 8006700:	d06b      	beq.n	80067da <HAL_RCCEx_GetPLL3ClockFreq+0x116>
 8006702:	2c02      	cmp	r4, #2
 8006704:	d05b      	beq.n	80067be <HAL_RCCEx_GetPLL3ClockFreq+0xfa>
 8006706:	2c00      	cmp	r4, #0
 8006708:	d167      	bne.n	80067da <HAL_RCCEx_GetPLL3ClockFreq+0x116>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800670a:	6813      	ldr	r3, [r2, #0]
 800670c:	069b      	lsls	r3, r3, #26
 800670e:	d546      	bpl.n	800679e <HAL_RCCEx_GetPLL3ClockFreq+0xda>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006710:	6811      	ldr	r1, [r2, #0]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006712:	6c13      	ldr	r3, [r2, #64]	; 0x40
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006714:	f3c1 01c1 	ubfx	r1, r1, #3, #2
 8006718:	4a3a      	ldr	r2, [pc, #232]	; (8006804 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800671a:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800671e:	40ca      	lsrs	r2, r1
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006720:	ee07 2a10 	vmov	s14, r2
 8006724:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 8006728:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 800672c:	ee06 3a90 	vmov	s13, r3
 8006730:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8006734:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006738:	ee77 7a86 	vadd.f32	s15, s15, s12
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800673c:	4a30      	ldr	r2, [pc, #192]	; (8006800 <HAL_RCCEx_GetPLL3ClockFreq+0x13c>)
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800673e:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006742:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8006744:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8006748:	ee07 3a10 	vmov	s14, r3
 800674c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8006750:	ee37 7a06 	vadd.f32	s14, s14, s12
 8006754:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006758:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800675c:	edc0 6a00 	vstr	s13, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006760:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8006762:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8006766:	ee07 3a10 	vmov	s14, r3
 800676a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800676e:	ee37 7a06 	vadd.f32	s14, s14, s12
 8006772:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006776:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800677a:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800677e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8006780:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8006784:	ee07 3a10 	vmov	s14, r3
 8006788:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800678c:	ee37 6a06 	vadd.f32	s12, s14, s12
 8006790:	ee87 7a86 	vdiv.f32	s14, s15, s12
 8006794:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8006798:	ed80 7a02 	vstr	s14, [r0, #8]
}
 800679c:	bd70      	pop	{r4, r5, r6, pc}
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800679e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80067a0:	eddf 5a19 	vldr	s11, [pc, #100]	; 8006808 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
 80067a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067a8:	ee07 3a10 	vmov	s14, r3
 80067ac:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80067b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80067b4:	ee77 7a86 	vadd.f32	s15, s15, s12
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80067b8:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 80067bc:	e7be      	b.n	800673c <HAL_RCCEx_GetPLL3ClockFreq+0x78>
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80067be:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80067c0:	eddf 5a12 	vldr	s11, [pc, #72]	; 800680c <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 80067c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067c8:	ee07 3a10 	vmov	s14, r3
 80067cc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80067d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80067d4:	ee77 7a86 	vadd.f32	s15, s15, s12
 80067d8:	e7ee      	b.n	80067b8 <HAL_RCCEx_GetPLL3ClockFreq+0xf4>
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80067da:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80067dc:	eddf 5a0c 	vldr	s11, [pc, #48]	; 8006810 <HAL_RCCEx_GetPLL3ClockFreq+0x14c>
 80067e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067e4:	ee07 3a10 	vmov	s14, r3
 80067e8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80067ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80067f0:	ee77 7a86 	vadd.f32	s15, s15, s12
 80067f4:	e7e0      	b.n	80067b8 <HAL_RCCEx_GetPLL3ClockFreq+0xf4>
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80067f6:	e9c0 1100 	strd	r1, r1, [r0]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80067fa:	6081      	str	r1, [r0, #8]
}
 80067fc:	e7ce      	b.n	800679c <HAL_RCCEx_GetPLL3ClockFreq+0xd8>
 80067fe:	bf00      	nop
 8006800:	58024400 	.word	0x58024400
 8006804:	03d09000 	.word	0x03d09000
 8006808:	4c742400 	.word	0x4c742400
 800680c:	4bbebc20 	.word	0x4bbebc20
 8006810:	4a742400 	.word	0x4a742400

08006814 <HAL_RCCEx_GetPLL1ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006814:	4a4e      	ldr	r2, [pc, #312]	; (8006950 <HAL_RCCEx_GetPLL1ClockFreq+0x13c>)
{
 8006816:	b570      	push	{r4, r5, r6, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006818:	6a94      	ldr	r4, [r2, #40]	; 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800681a:	6a96      	ldr	r6, [r2, #40]	; 0x28
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800681c:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
  if (pll1m != 0U)
 800681e:	f416 7f7c 	tst.w	r6, #1008	; 0x3f0
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8006822:	f3c6 1105 	ubfx	r1, r6, #4, #6
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006826:	6b53      	ldr	r3, [r2, #52]	; 0x34
  if (pll1m != 0U)
 8006828:	f000 808d 	beq.w	8006946 <HAL_RCCEx_GetPLL1ClockFreq+0x132>
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800682c:	ee07 1a90 	vmov	s15, r1
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006830:	f3c3 03cc 	ubfx	r3, r3, #3, #13
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8006834:	f005 0101 	and.w	r1, r5, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006838:	f004 0403 	and.w	r4, r4, #3
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800683c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006840:	434b      	muls	r3, r1
    switch (pllsource)
 8006842:	2c01      	cmp	r4, #1
 8006844:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006848:	ee07 3a90 	vmov	s15, r3
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800684c:	eefa 7ae9 	vcvt.f32.s32	s15, s15, #13
    switch (pllsource)
 8006850:	d04d      	beq.n	80068ee <HAL_RCCEx_GetPLL1ClockFreq+0xda>
 8006852:	2c02      	cmp	r4, #2
 8006854:	d05b      	beq.n	800690e <HAL_RCCEx_GetPLL1ClockFreq+0xfa>
 8006856:	2c00      	cmp	r4, #0
 8006858:	d167      	bne.n	800692a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800685a:	6813      	ldr	r3, [r2, #0]
 800685c:	069b      	lsls	r3, r3, #26
 800685e:	d564      	bpl.n	800692a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006860:	6811      	ldr	r1, [r2, #0]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006862:	6b13      	ldr	r3, [r2, #48]	; 0x30
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006864:	f3c1 01c1 	ubfx	r1, r1, #3, #2
 8006868:	4a3a      	ldr	r2, [pc, #232]	; (8006954 <HAL_RCCEx_GetPLL1ClockFreq+0x140>)
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800686a:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800686e:	40ca      	lsrs	r2, r1
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006870:	ee07 2a10 	vmov	s14, r2
 8006874:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 8006878:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 800687c:	ee06 3a90 	vmov	s13, r3
 8006880:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8006884:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006888:	ee77 7a86 	vadd.f32	s15, s15, s12
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800688c:	4a30      	ldr	r2, [pc, #192]	; (8006950 <HAL_RCCEx_GetPLL1ClockFreq+0x13c>)
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800688e:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8006892:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8006894:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8006898:	ee07 3a10 	vmov	s14, r3
 800689c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80068a0:	ee37 7a06 	vadd.f32	s14, s14, s12
 80068a4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80068a8:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80068ac:	edc0 6a00 	vstr	s13, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 80068b0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80068b2:	f3c3 4306 	ubfx	r3, r3, #16, #7
 80068b6:	ee07 3a10 	vmov	s14, r3
 80068ba:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80068be:	ee37 7a06 	vadd.f32	s14, s14, s12
 80068c2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80068c6:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80068ca:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 80068ce:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80068d0:	f3c3 6306 	ubfx	r3, r3, #24, #7
 80068d4:	ee07 3a10 	vmov	s14, r3
 80068d8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80068dc:	ee37 6a06 	vadd.f32	s12, s14, s12
 80068e0:	ee87 7a86 	vdiv.f32	s14, s15, s12
 80068e4:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80068e8:	ed80 7a02 	vstr	s14, [r0, #8]
}
 80068ec:	bd70      	pop	{r4, r5, r6, pc}
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80068ee:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80068f0:	eddf 5a19 	vldr	s11, [pc, #100]	; 8006958 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
 80068f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068f8:	ee07 3a10 	vmov	s14, r3
 80068fc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8006900:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006904:	ee77 7a86 	vadd.f32	s15, s15, s12
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006908:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 800690c:	e7be      	b.n	800688c <HAL_RCCEx_GetPLL1ClockFreq+0x78>
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800690e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8006910:	eddf 5a12 	vldr	s11, [pc, #72]	; 800695c <HAL_RCCEx_GetPLL1ClockFreq+0x148>
 8006914:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006918:	ee07 3a10 	vmov	s14, r3
 800691c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8006920:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006924:	ee77 7a86 	vadd.f32	s15, s15, s12
 8006928:	e7ee      	b.n	8006908 <HAL_RCCEx_GetPLL1ClockFreq+0xf4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800692a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800692c:	eddf 5a0c 	vldr	s11, [pc, #48]	; 8006960 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 8006930:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006934:	ee07 3a10 	vmov	s14, r3
 8006938:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800693c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006940:	ee77 7a86 	vadd.f32	s15, s15, s12
 8006944:	e7e0      	b.n	8006908 <HAL_RCCEx_GetPLL1ClockFreq+0xf4>
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006946:	e9c0 1100 	strd	r1, r1, [r0]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800694a:	6081      	str	r1, [r0, #8]
}
 800694c:	e7ce      	b.n	80068ec <HAL_RCCEx_GetPLL1ClockFreq+0xd8>
 800694e:	bf00      	nop
 8006950:	58024400 	.word	0x58024400
 8006954:	03d09000 	.word	0x03d09000
 8006958:	4a742400 	.word	0x4a742400
 800695c:	4bbebc20 	.word	0x4bbebc20
 8006960:	4c742400 	.word	0x4c742400

08006964 <HAL_RCCEx_GetPeriphCLKFreq>:
{
 8006964:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006966:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
 800696a:	430b      	orrs	r3, r1
 800696c:	d131      	bne.n	80069d2 <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800696e:	4b95      	ldr	r3, [pc, #596]	; (8006bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8006970:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006972:	f002 0207 	and.w	r2, r2, #7
    switch (saiclocksource)
 8006976:	2a04      	cmp	r2, #4
 8006978:	d84c      	bhi.n	8006a14 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
 800697a:	e8df f012 	tbh	[pc, r2, lsl #1]
 800697e:	0110      	.short	0x0110
 8006980:	0005003a 	.word	0x0005003a
 8006984:	000d0170 	.word	0x000d0170
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006988:	6818      	ldr	r0, [r3, #0]
 800698a:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 800698e:	d038      	beq.n	8006a02 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006990:	a801      	add	r0, sp, #4
 8006992:	f7ff fe97 	bl	80066c4 <HAL_RCCEx_GetPLL3ClockFreq>
 8006996:	e033      	b.n	8006a00 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006998:	6cda      	ldr	r2, [r3, #76]	; 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800699a:	6819      	ldr	r1, [r3, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800699c:	f002 5240 	and.w	r2, r2, #805306368	; 0x30000000
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80069a0:	681b      	ldr	r3, [r3, #0]
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80069a2:	0749      	lsls	r1, r1, #29
 80069a4:	d505      	bpl.n	80069b2 <HAL_RCCEx_GetPeriphCLKFreq+0x4e>
 80069a6:	b922      	cbnz	r2, 80069b2 <HAL_RCCEx_GetPeriphCLKFreq+0x4e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80069a8:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80069ac:	4886      	ldr	r0, [pc, #536]	; (8006bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 80069ae:	40d8      	lsrs	r0, r3
 80069b0:	e027      	b.n	8006a02 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80069b2:	05d8      	lsls	r0, r3, #23
 80069b4:	d502      	bpl.n	80069bc <HAL_RCCEx_GetPeriphCLKFreq+0x58>
 80069b6:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 80069ba:	d056      	beq.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0x106>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80069bc:	4b81      	ldr	r3, [pc, #516]	; (8006bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80069be:	6818      	ldr	r0, [r3, #0]
 80069c0:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 80069c4:	d01d      	beq.n	8006a02 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
          frequency = HSE_VALUE;
 80069c6:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 80069ca:	4880      	ldr	r0, [pc, #512]	; (8006bcc <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80069cc:	bf18      	it	ne
 80069ce:	2000      	movne	r0, #0
 80069d0:	e017      	b.n	8006a02 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80069d2:	f5a0 7300 	sub.w	r3, r0, #512	; 0x200
 80069d6:	430b      	orrs	r3, r1
 80069d8:	d11e      	bne.n	8006a18 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 80069da:	4b7a      	ldr	r3, [pc, #488]	; (8006bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 80069dc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80069de:	f402 72e0 	and.w	r2, r2, #448	; 0x1c0
    switch (saiclocksource)
 80069e2:	2a80      	cmp	r2, #128	; 0x80
 80069e4:	d0d0      	beq.n	8006988 <HAL_RCCEx_GetPeriphCLKFreq+0x24>
 80069e6:	d80f      	bhi.n	8006a08 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
 80069e8:	2a00      	cmp	r2, #0
 80069ea:	f000 80d8 	beq.w	8006b9e <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 80069ee:	2a40      	cmp	r2, #64	; 0x40
    switch (srcclk)
 80069f0:	d110      	bne.n	8006a14 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80069f2:	6818      	ldr	r0, [r3, #0]
 80069f4:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 80069f8:	d003      	beq.n	8006a02 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80069fa:	a801      	add	r0, sp, #4
 80069fc:	f7ff fdba 	bl	8006574 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006a00:	9801      	ldr	r0, [sp, #4]
}
 8006a02:	b005      	add	sp, #20
 8006a04:	f85d fb04 	ldr.w	pc, [sp], #4
    switch (saiclocksource)
 8006a08:	2ac0      	cmp	r2, #192	; 0xc0
 8006a0a:	f000 8128 	beq.w	8006c5e <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8006a0e:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
    switch (saiclocksource)
 8006a12:	d01a      	beq.n	8006a4a <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
    switch (srcclk)
 8006a14:	2000      	movs	r0, #0
  return frequency;
 8006a16:	e7f4      	b.n	8006a02 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8006a18:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
 8006a1c:	430b      	orrs	r3, r1
 8006a1e:	d126      	bne.n	8006a6e <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8006a20:	4b68      	ldr	r3, [pc, #416]	; (8006bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8006a22:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006a24:	f402 0260 	and.w	r2, r2, #14680064	; 0xe00000
    switch (saiclocksource)
 8006a28:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 8006a2c:	d0ac      	beq.n	8006988 <HAL_RCCEx_GetPeriphCLKFreq+0x24>
 8006a2e:	d805      	bhi.n	8006a3c <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8006a30:	2a00      	cmp	r2, #0
 8006a32:	f000 80b4 	beq.w	8006b9e <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 8006a36:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8006a3a:	e7d9      	b.n	80069f0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
 8006a3c:	f5b2 0fc0 	cmp.w	r2, #6291456	; 0x600000
 8006a40:	f000 810d 	beq.w	8006c5e <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8006a44:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8006a48:	e7e3      	b.n	8006a12 <HAL_RCCEx_GetPeriphCLKFreq+0xae>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006a4a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006a4c:	6819      	ldr	r1, [r3, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006a4e:	f002 5240 	and.w	r2, r2, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006a52:	0749      	lsls	r1, r1, #29
 8006a54:	d502      	bpl.n	8006a5c <HAL_RCCEx_GetPeriphCLKFreq+0xf8>
 8006a56:	b90a      	cbnz	r2, 8006a5c <HAL_RCCEx_GetPeriphCLKFreq+0xf8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	e7a5      	b.n	80069a8 <HAL_RCCEx_GetPeriphCLKFreq+0x44>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006a5c:	4b59      	ldr	r3, [pc, #356]	; (8006bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006a5e:	6819      	ldr	r1, [r3, #0]
 8006a60:	05c9      	lsls	r1, r1, #23
 8006a62:	d5ac      	bpl.n	80069be <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8006a64:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 8006a68:	d1a9      	bne.n	80069be <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          frequency = CSI_VALUE;
 8006a6a:	4859      	ldr	r0, [pc, #356]	; (8006bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 8006a6c:	e7c9      	b.n	8006a02 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8006a6e:	f5a0 6300 	sub.w	r3, r0, #2048	; 0x800
 8006a72:	430b      	orrs	r3, r1
 8006a74:	d11d      	bne.n	8006ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x14e>
    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8006a76:	4b53      	ldr	r3, [pc, #332]	; (8006bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8006a78:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006a7a:	f002 62e0 	and.w	r2, r2, #117440512	; 0x7000000
    switch (saiclocksource)
 8006a7e:	f1b2 7f00 	cmp.w	r2, #33554432	; 0x2000000
 8006a82:	d081      	beq.n	8006988 <HAL_RCCEx_GetPeriphCLKFreq+0x24>
 8006a84:	d805      	bhi.n	8006a92 <HAL_RCCEx_GetPeriphCLKFreq+0x12e>
 8006a86:	2a00      	cmp	r2, #0
 8006a88:	f000 8089 	beq.w	8006b9e <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 8006a8c:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 8006a90:	e7ae      	b.n	80069f0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
 8006a92:	f1b2 7f40 	cmp.w	r2, #50331648	; 0x3000000
 8006a96:	f000 80e2 	beq.w	8006c5e <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8006a9a:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
    switch (srcclk)
 8006a9e:	d1b9      	bne.n	8006a14 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006aa0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006aa2:	6819      	ldr	r1, [r3, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006aa4:	f002 5240 	and.w	r2, r2, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006aa8:	0748      	lsls	r0, r1, #29
 8006aaa:	d5d8      	bpl.n	8006a5e <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 8006aac:	2a00      	cmp	r2, #0
 8006aae:	d1d6      	bne.n	8006a5e <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 8006ab0:	e7d2      	b.n	8006a58 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8006ab2:	f5a0 5380 	sub.w	r3, r0, #4096	; 0x1000
 8006ab6:	430b      	orrs	r3, r1
 8006ab8:	d114      	bne.n	8006ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x180>
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8006aba:	4b42      	ldr	r3, [pc, #264]	; (8006bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8006abc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006abe:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
    switch (srcclk)
 8006ac2:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8006ac6:	f43f af5f 	beq.w	8006988 <HAL_RCCEx_GetPeriphCLKFreq+0x24>
 8006aca:	d804      	bhi.n	8006ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x172>
 8006acc:	2a00      	cmp	r2, #0
 8006ace:	d066      	beq.n	8006b9e <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 8006ad0:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8006ad4:	e78c      	b.n	80069f0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
 8006ad6:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 8006ada:	f000 80c0 	beq.w	8006c5e <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8006ade:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8006ae2:	e7dc      	b.n	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8006ae4:	f5a0 5300 	sub.w	r3, r0, #8192	; 0x2000
 8006ae8:	430b      	orrs	r3, r1
 8006aea:	d134      	bne.n	8006b56 <HAL_RCCEx_GetPeriphCLKFreq+0x1f2>
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8006aec:	4a35      	ldr	r2, [pc, #212]	; (8006bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8006aee:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8006af0:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
    switch (srcclk)
 8006af4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006af8:	f000 808c 	beq.w	8006c14 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>
 8006afc:	d80c      	bhi.n	8006b18 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8006afe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b02:	d016      	beq.n	8006b32 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8006b04:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b08:	d01c      	beq.n	8006b44 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d182      	bne.n	8006a14 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
}
 8006b0e:	b005      	add	sp, #20
 8006b10:	f85d eb04 	ldr.w	lr, [sp], #4
        frequency = HAL_RCC_GetPCLK1Freq();
 8006b14:	f7fe bef4 	b.w	8005900 <HAL_RCC_GetPCLK1Freq>
    switch (srcclk)
 8006b18:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006b1c:	f000 8081 	beq.w	8006c22 <HAL_RCCEx_GetPeriphCLKFreq+0x2be>
 8006b20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
    switch (srcclk)
 8006b24:	f47f af76 	bne.w	8006a14 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006b28:	6810      	ldr	r0, [r2, #0]
          frequency = HSE_VALUE;
 8006b2a:	4b28      	ldr	r3, [pc, #160]	; (8006bcc <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006b2c:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8006b30:	e07b      	b.n	8006c2a <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006b32:	6810      	ldr	r0, [r2, #0]
 8006b34:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8006b38:	f43f af63 	beq.w	8006a02 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b3c:	a801      	add	r0, sp, #4
 8006b3e:	f7ff fd19 	bl	8006574 <HAL_RCCEx_GetPLL2ClockFreq>
 8006b42:	e034      	b.n	8006bae <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006b44:	6810      	ldr	r0, [r2, #0]
 8006b46:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8006b4a:	f43f af5a 	beq.w	8006a02 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b4e:	a801      	add	r0, sp, #4
 8006b50:	f7ff fdb8 	bl	80066c4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006b54:	e02b      	b.n	8006bae <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8006b56:	f5a0 2300 	sub.w	r3, r0, #524288	; 0x80000
 8006b5a:	430b      	orrs	r3, r1
 8006b5c:	d117      	bne.n	8006b8e <HAL_RCCEx_GetPeriphCLKFreq+0x22a>
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8006b5e:	4b19      	ldr	r3, [pc, #100]	; (8006bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8006b60:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006b62:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
    switch (srcclk)
 8006b66:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8006b6a:	d006      	beq.n	8006b7a <HAL_RCCEx_GetPeriphCLKFreq+0x216>
 8006b6c:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 8006b70:	d096      	beq.n	8006aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
 8006b72:	2a00      	cmp	r2, #0
 8006b74:	f47f af4e 	bne.w	8006a14 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
 8006b78:	e73b      	b.n	80069f2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006b7a:	6818      	ldr	r0, [r3, #0]
 8006b7c:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8006b80:	f43f af3f 	beq.w	8006a02 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b84:	a801      	add	r0, sp, #4
 8006b86:	f7ff fd9d 	bl	80066c4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006b8a:	9803      	ldr	r0, [sp, #12]
 8006b8c:	e739      	b.n	8006a02 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006b8e:	f5a0 3380 	sub.w	r3, r0, #65536	; 0x10000
 8006b92:	430b      	orrs	r3, r1
 8006b94:	d11e      	bne.n	8006bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8006b96:	4b0b      	ldr	r3, [pc, #44]	; (8006bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8006b98:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    switch (srcclk)
 8006b9a:	03d2      	lsls	r2, r2, #15
 8006b9c:	d409      	bmi.n	8006bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x24e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006b9e:	6818      	ldr	r0, [r3, #0]
 8006ba0:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8006ba4:	f43f af2d 	beq.w	8006a02 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006ba8:	a801      	add	r0, sp, #4
 8006baa:	f7ff fe33 	bl	8006814 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006bae:	9802      	ldr	r0, [sp, #8]
 8006bb0:	e727      	b.n	8006a02 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006bb2:	6818      	ldr	r0, [r3, #0]
 8006bb4:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8006bb8:	f43f af23 	beq.w	8006a02 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006bbc:	a801      	add	r0, sp, #4
 8006bbe:	f7ff fcd9 	bl	8006574 <HAL_RCCEx_GetPLL2ClockFreq>
 8006bc2:	e7e2      	b.n	8006b8a <HAL_RCCEx_GetPeriphCLKFreq+0x226>
 8006bc4:	58024400 	.word	0x58024400
 8006bc8:	03d09000 	.word	0x03d09000
 8006bcc:	017d7840 	.word	0x017d7840
 8006bd0:	003d0900 	.word	0x003d0900
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8006bd4:	f5a0 4380 	sub.w	r3, r0, #16384	; 0x4000
 8006bd8:	430b      	orrs	r3, r1
 8006bda:	d129      	bne.n	8006c30 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8006bdc:	4a21      	ldr	r2, [pc, #132]	; (8006c64 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8006bde:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8006be0:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    switch (srcclk)
 8006be4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006be8:	d014      	beq.n	8006c14 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>
 8006bea:	d80d      	bhi.n	8006c08 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
 8006bec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006bf0:	d09f      	beq.n	8006b32 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8006bf2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006bf6:	d0a5      	beq.n	8006b44 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	f47f af0b 	bne.w	8006a14 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
}
 8006bfe:	b005      	add	sp, #20
 8006c00:	f85d eb04 	ldr.w	lr, [sp], #4
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8006c04:	f7ff bca4 	b.w	8006550 <HAL_RCCEx_GetD3PCLK1Freq>
    switch (srcclk)
 8006c08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c0c:	d009      	beq.n	8006c22 <HAL_RCCEx_GetPeriphCLKFreq+0x2be>
 8006c0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006c12:	e787      	b.n	8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006c14:	6810      	ldr	r0, [r2, #0]
 8006c16:	f010 0004 	ands.w	r0, r0, #4
 8006c1a:	f43f aef2 	beq.w	8006a02 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006c1e:	6813      	ldr	r3, [r2, #0]
 8006c20:	e6c2      	b.n	80069a8 <HAL_RCCEx_GetPeriphCLKFreq+0x44>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006c22:	6810      	ldr	r0, [r2, #0]
          frequency = CSI_VALUE;
 8006c24:	4b10      	ldr	r3, [pc, #64]	; (8006c68 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8006c26:	f410 7080 	ands.w	r0, r0, #256	; 0x100
          frequency = HSE_VALUE;
 8006c2a:	bf18      	it	ne
 8006c2c:	4618      	movne	r0, r3
 8006c2e:	e6e8      	b.n	8006a02 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8006c30:	f5a0 4000 	sub.w	r0, r0, #32768	; 0x8000
 8006c34:	ea50 0301 	orrs.w	r3, r0, r1
 8006c38:	f47f aeec 	bne.w	8006a14 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8006c3c:	4a09      	ldr	r2, [pc, #36]	; (8006c64 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8006c3e:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8006c40:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
    switch (srcclk)
 8006c44:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006c48:	d007      	beq.n	8006c5a <HAL_RCCEx_GetPeriphCLKFreq+0x2f6>
 8006c4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c4e:	f43f af70 	beq.w	8006b32 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	f47f aede 	bne.w	8006a14 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
 8006c58:	e766      	b.n	8006b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006c5a:	6810      	ldr	r0, [r2, #0]
 8006c5c:	e7a0      	b.n	8006ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x23c>
        frequency = EXTERNAL_CLOCK_VALUE;
 8006c5e:	4803      	ldr	r0, [pc, #12]	; (8006c6c <HAL_RCCEx_GetPeriphCLKFreq+0x308>)
 8006c60:	e6cf      	b.n	8006a02 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
 8006c62:	bf00      	nop
 8006c64:	58024400 	.word	0x58024400
 8006c68:	003d0900 	.word	0x003d0900
 8006c6c:	00bb8000 	.word	0x00bb8000

08006c70 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006c70:	b538      	push	{r3, r4, r5, lr}

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8006c72:	4a0a      	ldr	r2, [pc, #40]	; (8006c9c <HAL_RTC_WaitForSynchro+0x2c>)
{
 8006c74:	4604      	mov	r4, r0
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8006c76:	6803      	ldr	r3, [r0, #0]
 8006c78:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 8006c7a:	f7fb fe77 	bl	800296c <HAL_GetTick>
 8006c7e:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006c80:	6823      	ldr	r3, [r4, #0]
 8006c82:	68db      	ldr	r3, [r3, #12]
 8006c84:	069b      	lsls	r3, r3, #26
 8006c86:	d501      	bpl.n	8006c8c <HAL_RTC_WaitForSynchro+0x1c>
      {
        return HAL_TIMEOUT;
      }
    }

  return HAL_OK;
 8006c88:	2000      	movs	r0, #0
}
 8006c8a:	bd38      	pop	{r3, r4, r5, pc}
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006c8c:	f7fb fe6e 	bl	800296c <HAL_GetTick>
 8006c90:	1b40      	subs	r0, r0, r5
 8006c92:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8006c96:	d9f3      	bls.n	8006c80 <HAL_RTC_WaitForSynchro+0x10>
        return HAL_TIMEOUT;
 8006c98:	2003      	movs	r0, #3
 8006c9a:	e7f6      	b.n	8006c8a <HAL_RTC_WaitForSynchro+0x1a>
 8006c9c:	0003ff5f 	.word	0x0003ff5f

08006ca0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006ca2:	6803      	ldr	r3, [r0, #0]
{
 8006ca4:	4605      	mov	r5, r0
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006ca6:	68dc      	ldr	r4, [r3, #12]
 8006ca8:	f014 0440 	ands.w	r4, r4, #64	; 0x40
 8006cac:	d118      	bne.n	8006ce0 <RTC_EnterInitMode+0x40>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006cae:	f04f 32ff 	mov.w	r2, #4294967295
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
      {
        status = HAL_TIMEOUT;
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006cb2:	2703      	movs	r7, #3
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006cb4:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8006cb6:	f7fb fe59 	bl	800296c <HAL_GetTick>
 8006cba:	4606      	mov	r6, r0
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006cbc:	682b      	ldr	r3, [r5, #0]
 8006cbe:	68db      	ldr	r3, [r3, #12]
 8006cc0:	065b      	lsls	r3, r3, #25
 8006cc2:	d401      	bmi.n	8006cc8 <RTC_EnterInitMode+0x28>
 8006cc4:	2c03      	cmp	r4, #3
 8006cc6:	d101      	bne.n	8006ccc <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
}
 8006cc8:	4620      	mov	r0, r4
 8006cca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006ccc:	f7fb fe4e 	bl	800296c <HAL_GetTick>
 8006cd0:	1b80      	subs	r0, r0, r6
 8006cd2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8006cd6:	d9f1      	bls.n	8006cbc <RTC_EnterInitMode+0x1c>
        status = HAL_TIMEOUT;
 8006cd8:	2403      	movs	r4, #3
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006cda:	f885 7021 	strb.w	r7, [r5, #33]	; 0x21
 8006cde:	e7ed      	b.n	8006cbc <RTC_EnterInitMode+0x1c>
  HAL_StatusTypeDef status = HAL_OK;
 8006ce0:	2400      	movs	r4, #0
 8006ce2:	e7f1      	b.n	8006cc8 <RTC_EnterInitMode+0x28>

08006ce4 <RTC_ExitInitMode>:

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 8006ce4:	4b10      	ldr	r3, [pc, #64]	; (8006d28 <RTC_ExitInitMode+0x44>)
 8006ce6:	68da      	ldr	r2, [r3, #12]
 8006ce8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
{
 8006cec:	b510      	push	{r4, lr}
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 8006cee:	60da      	str	r2, [r3, #12]
{
 8006cf0:	4604      	mov	r4, r0
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8006cf2:	689a      	ldr	r2, [r3, #8]
 8006cf4:	0692      	lsls	r2, r2, #26
 8006cf6:	d406      	bmi.n	8006d06 <RTC_ExitInitMode+0x22>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006cf8:	f7ff ffba 	bl	8006c70 <HAL_RTC_WaitForSynchro>
 8006cfc:	b110      	cbz	r0, 8006d04 <RTC_ExitInitMode+0x20>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006cfe:	2003      	movs	r0, #3
 8006d00:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
  }

  return status;
}
 8006d04:	bd10      	pop	{r4, pc}
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006d06:	689a      	ldr	r2, [r3, #8]
 8006d08:	f022 0220 	bic.w	r2, r2, #32
 8006d0c:	609a      	str	r2, [r3, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006d0e:	f7ff ffaf 	bl	8006c70 <HAL_RTC_WaitForSynchro>
 8006d12:	b110      	cbz	r0, 8006d1a <RTC_ExitInitMode+0x36>
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006d14:	2003      	movs	r0, #3
 8006d16:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006d1a:	4a03      	ldr	r2, [pc, #12]	; (8006d28 <RTC_ExitInitMode+0x44>)
 8006d1c:	6893      	ldr	r3, [r2, #8]
 8006d1e:	f043 0320 	orr.w	r3, r3, #32
 8006d22:	6093      	str	r3, [r2, #8]
  return status;
 8006d24:	e7ee      	b.n	8006d04 <RTC_ExitInitMode+0x20>
 8006d26:	bf00      	nop
 8006d28:	58004000 	.word	0x58004000

08006d2c <HAL_RTC_Init>:
{
 8006d2c:	b538      	push	{r3, r4, r5, lr}
  if(hrtc != NULL)
 8006d2e:	4604      	mov	r4, r0
 8006d30:	2800      	cmp	r0, #0
 8006d32:	d045      	beq.n	8006dc0 <HAL_RTC_Init+0x94>
    if(hrtc->State == HAL_RTC_STATE_RESET)
 8006d34:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8006d38:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006d3c:	b91b      	cbnz	r3, 8006d46 <HAL_RTC_Init+0x1a>
      hrtc->Lock = HAL_UNLOCKED;
 8006d3e:	f880 2020 	strb.w	r2, [r0, #32]
      HAL_RTC_MspInit(hrtc);
 8006d42:	f7fa fe71 	bl	8001a28 <HAL_RTC_MspInit>
    hrtc->State = HAL_RTC_STATE_BUSY;
 8006d46:	2302      	movs	r3, #2
 8006d48:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8006d4c:	6823      	ldr	r3, [r4, #0]
 8006d4e:	68da      	ldr	r2, [r3, #12]
 8006d50:	06d2      	lsls	r2, r2, #27
 8006d52:	d504      	bpl.n	8006d5e <HAL_RTC_Init+0x32>
      hrtc->State = HAL_RTC_STATE_READY;
 8006d54:	2301      	movs	r3, #1
 8006d56:	2000      	movs	r0, #0
 8006d58:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
}
 8006d5c:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006d5e:	22ca      	movs	r2, #202	; 0xca
      status = RTC_EnterInitMode(hrtc);
 8006d60:	4620      	mov	r0, r4
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006d62:	625a      	str	r2, [r3, #36]	; 0x24
 8006d64:	2253      	movs	r2, #83	; 0x53
 8006d66:	625a      	str	r2, [r3, #36]	; 0x24
      status = RTC_EnterInitMode(hrtc);
 8006d68:	f7ff ff9a 	bl	8006ca0 <RTC_EnterInitMode>
      if (status == HAL_OK)
 8006d6c:	bb10      	cbnz	r0, 8006db4 <HAL_RTC_Init+0x88>
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8006d6e:	6822      	ldr	r2, [r4, #0]
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006d70:	6920      	ldr	r0, [r4, #16]
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8006d72:	6893      	ldr	r3, [r2, #8]
 8006d74:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006d78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d7c:	6093      	str	r3, [r2, #8]
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006d7e:	6863      	ldr	r3, [r4, #4]
 8006d80:	6891      	ldr	r1, [r2, #8]
 8006d82:	4303      	orrs	r3, r0
 8006d84:	69a0      	ldr	r0, [r4, #24]
 8006d86:	4303      	orrs	r3, r0
        status = RTC_ExitInitMode(hrtc);
 8006d88:	4620      	mov	r0, r4
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006d8a:	430b      	orrs	r3, r1
 8006d8c:	6093      	str	r3, [r2, #8]
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 8006d8e:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
 8006d92:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8006d96:	6113      	str	r3, [r2, #16]
        status = RTC_ExitInitMode(hrtc);
 8006d98:	f7ff ffa4 	bl	8006ce4 <RTC_ExitInitMode>
      if(status == HAL_OK)
 8006d9c:	b950      	cbnz	r0, 8006db4 <HAL_RTC_Init+0x88>
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8006d9e:	6822      	ldr	r2, [r4, #0]
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8006da0:	6965      	ldr	r5, [r4, #20]
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8006da2:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8006da4:	f023 0303 	bic.w	r3, r3, #3
 8006da8:	64d3      	str	r3, [r2, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8006daa:	69e3      	ldr	r3, [r4, #28]
 8006dac:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 8006dae:	432b      	orrs	r3, r5
 8006db0:	430b      	orrs	r3, r1
 8006db2:	64d3      	str	r3, [r2, #76]	; 0x4c
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006db4:	6823      	ldr	r3, [r4, #0]
 8006db6:	22ff      	movs	r2, #255	; 0xff
 8006db8:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 8006dba:	2800      	cmp	r0, #0
 8006dbc:	d0ca      	beq.n	8006d54 <HAL_RTC_Init+0x28>
 8006dbe:	e7cd      	b.n	8006d5c <HAL_RTC_Init+0x30>
  HAL_StatusTypeDef status = HAL_ERROR;
 8006dc0:	2001      	movs	r0, #1
 8006dc2:	e7cb      	b.n	8006d5c <HAL_RTC_Init+0x30>

08006dc4 <SAI_Disable>:
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8006dc4:	4b0d      	ldr	r3, [pc, #52]	; (8006dfc <SAI_Disable+0x38>)
  HAL_StatusTypeDef status = HAL_OK;

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8006dc6:	6801      	ldr	r1, [r0, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8006dc8:	681a      	ldr	r2, [r3, #0]
 8006dca:	f641 3358 	movw	r3, #7000	; 0x1b58
 8006dce:	fbb2 f2f3 	udiv	r2, r2, r3
  __HAL_SAI_DISABLE(hsai);
 8006dd2:	680b      	ldr	r3, [r1, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8006dd4:	0092      	lsls	r2, r2, #2
  __HAL_SAI_DISABLE(hsai);
 8006dd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006dda:	600b      	str	r3, [r1, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8006ddc:	b93a      	cbnz	r2, 8006dee <SAI_Disable+0x2a>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8006dde:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
 8006de2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006de6:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
      status = HAL_TIMEOUT;
 8006dea:	2003      	movs	r0, #3
      break;
 8006dec:	4770      	bx	lr
    }
    count--;
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8006dee:	680b      	ldr	r3, [r1, #0]
    count--;
 8006df0:	3a01      	subs	r2, #1
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8006df2:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 8006df6:	d1f1      	bne.n	8006ddc <SAI_Disable+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 8006df8:	4618      	mov	r0, r3

  return status;
}
 8006dfa:	4770      	bx	lr
 8006dfc:	24000000 	.word	0x24000000

08006e00 <HAL_SAI_Init>:
{
 8006e00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (hsai == NULL)
 8006e04:	4604      	mov	r4, r0
 8006e06:	b920      	cbnz	r0, 8006e12 <HAL_SAI_Init+0x12>
    return HAL_ERROR;
 8006e08:	f04f 0801 	mov.w	r8, #1
}
 8006e0c:	4640      	mov	r0, r8
 8006e0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8006e12:	f7fb fdc7 	bl	80029a4 <HAL_GetREVID>
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8006e16:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8006e1a:	f8df 92f4 	ldr.w	r9, [pc, #756]	; 8007110 <HAL_SAI_Init+0x310>
 8006e1e:	2b01      	cmp	r3, #1
 8006e20:	6823      	ldr	r3, [r4, #0]
 8006e22:	d10a      	bne.n	8006e3a <HAL_SAI_Init+0x3a>
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8006e24:	454b      	cmp	r3, r9
 8006e26:	d002      	beq.n	8006e2e <HAL_SAI_Init+0x2e>
 8006e28:	4aaf      	ldr	r2, [pc, #700]	; (80070e8 <HAL_SAI_Init+0x2e8>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d1ec      	bne.n	8006e08 <HAL_SAI_Init+0x8>
 8006e2e:	6862      	ldr	r2, [r4, #4]
 8006e30:	2a01      	cmp	r2, #1
 8006e32:	d1e9      	bne.n	8006e08 <HAL_SAI_Init+0x8>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8006e34:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8006e36:	2a00      	cmp	r2, #0
 8006e38:	d1e6      	bne.n	8006e08 <HAL_SAI_Init+0x8>
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8006e3a:	454b      	cmp	r3, r9
 8006e3c:	d018      	beq.n	8006e70 <HAL_SAI_Init+0x70>
 8006e3e:	4aab      	ldr	r2, [pc, #684]	; (80070ec <HAL_SAI_Init+0x2ec>)
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d015      	beq.n	8006e70 <HAL_SAI_Init+0x70>
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8006e44:	f502 7278 	add.w	r2, r2, #992	; 0x3e0
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d038      	beq.n	8006ebe <HAL_SAI_Init+0xbe>
 8006e4c:	3220      	adds	r2, #32
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d035      	beq.n	8006ebe <HAL_SAI_Init+0xbe>
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8006e52:	f502 7278 	add.w	r2, r2, #992	; 0x3e0
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d033      	beq.n	8006ec2 <HAL_SAI_Init+0xc2>
 8006e5a:	3220      	adds	r2, #32
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d030      	beq.n	8006ec2 <HAL_SAI_Init+0xc2>
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 8006e60:	4aa1      	ldr	r2, [pc, #644]	; (80070e8 <HAL_SAI_Init+0x2e8>)
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d002      	beq.n	8006e6c <HAL_SAI_Init+0x6c>
 8006e66:	3220      	adds	r2, #32
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d1cd      	bne.n	8006e08 <HAL_SAI_Init+0x8>
    SaiBaseAddress = SAI4;
 8006e6c:	4da0      	ldr	r5, [pc, #640]	; (80070f0 <HAL_SAI_Init+0x2f0>)
 8006e6e:	e000      	b.n	8006e72 <HAL_SAI_Init+0x72>
    SaiBaseAddress = SAI1;
 8006e70:	4da0      	ldr	r5, [pc, #640]	; (80070f4 <HAL_SAI_Init+0x2f4>)
  if (hsai->State == HAL_SAI_STATE_RESET)
 8006e72:	f894 3091 	ldrb.w	r3, [r4, #145]	; 0x91
 8006e76:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006e7a:	b923      	cbnz	r3, 8006e86 <HAL_SAI_Init+0x86>
    HAL_SAI_MspInit(hsai);
 8006e7c:	4620      	mov	r0, r4
    hsai->Lock = HAL_UNLOCKED;
 8006e7e:	f884 2090 	strb.w	r2, [r4, #144]	; 0x90
    HAL_SAI_MspInit(hsai);
 8006e82:	f7fb f815 	bl	8001eb0 <HAL_SAI_MspInit>
  if(SAI_Disable(hsai) != HAL_OK)
 8006e86:	4620      	mov	r0, r4
 8006e88:	f7ff ff9c 	bl	8006dc4 <SAI_Disable>
 8006e8c:	4680      	mov	r8, r0
 8006e8e:	2800      	cmp	r0, #0
 8006e90:	d1ba      	bne.n	8006e08 <HAL_SAI_Init+0x8>
  hsai->State = HAL_SAI_STATE_BUSY;
 8006e92:	2302      	movs	r3, #2
 8006e94:	f884 3091 	strb.w	r3, [r4, #145]	; 0x91
  switch (hsai->Init.SynchroExt)
 8006e98:	68e3      	ldr	r3, [r4, #12]
 8006e9a:	2b01      	cmp	r3, #1
 8006e9c:	d013      	beq.n	8006ec6 <HAL_SAI_Init+0xc6>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8006e9e:	2b02      	cmp	r3, #2
 8006ea0:	bf14      	ite	ne
 8006ea2:	2300      	movne	r3, #0
 8006ea4:	2320      	moveq	r3, #32
  switch (hsai->Init.Synchro)
 8006ea6:	68a2      	ldr	r2, [r4, #8]
 8006ea8:	3a01      	subs	r2, #1
 8006eaa:	2a04      	cmp	r2, #4
 8006eac:	f200 8117 	bhi.w	80070de <HAL_SAI_Init+0x2de>
 8006eb0:	e8df f012 	tbh	[pc, r2, lsl #1]
 8006eb4:	010c000b 	.word	0x010c000b
 8006eb8:	010f010a 	.word	0x010f010a
 8006ebc:	0112      	.short	0x0112
    SaiBaseAddress = SAI2;
 8006ebe:	4d8e      	ldr	r5, [pc, #568]	; (80070f8 <HAL_SAI_Init+0x2f8>)
 8006ec0:	e7d7      	b.n	8006e72 <HAL_SAI_Init+0x72>
    SaiBaseAddress = SAI3;
 8006ec2:	4d8e      	ldr	r5, [pc, #568]	; (80070fc <HAL_SAI_Init+0x2fc>)
 8006ec4:	e7d5      	b.n	8006e72 <HAL_SAI_Init+0x72>
  switch (hsai->Init.SynchroExt)
 8006ec6:	2310      	movs	r3, #16
 8006ec8:	e7ed      	b.n	8006ea6 <HAL_SAI_Init+0xa6>
  switch (hsai->Init.Synchro)
 8006eca:	f44f 6780 	mov.w	r7, #1024	; 0x400
  SaiBaseAddress->GCR = tmpregisterGCR;
 8006ece:	602b      	str	r3, [r5, #0]
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8006ed0:	6a23      	ldr	r3, [r4, #32]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d058      	beq.n	8006f88 <HAL_SAI_Init+0x188>
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8006ed6:	6823      	ldr	r3, [r4, #0]
 8006ed8:	454b      	cmp	r3, r9
 8006eda:	d003      	beq.n	8006ee4 <HAL_SAI_Init+0xe4>
 8006edc:	4a83      	ldr	r2, [pc, #524]	; (80070ec <HAL_SAI_Init+0x2ec>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	f040 80ff 	bne.w	80070e2 <HAL_SAI_Init+0x2e2>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8006ee4:	f44f 7080 	mov.w	r0, #256	; 0x100
 8006ee8:	2100      	movs	r1, #0
 8006eea:	f7ff fd3b 	bl	8006964 <HAL_RCCEx_GetPeriphCLKFreq>
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8006eee:	6823      	ldr	r3, [r4, #0]
 8006ef0:	4a83      	ldr	r2, [pc, #524]	; (8007100 <HAL_SAI_Init+0x300>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d002      	beq.n	8006efc <HAL_SAI_Init+0xfc>
 8006ef6:	3220      	adds	r2, #32
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d104      	bne.n	8006f06 <HAL_SAI_Init+0x106>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8006efc:	f44f 7000 	mov.w	r0, #512	; 0x200
 8006f00:	2100      	movs	r1, #0
 8006f02:	f7ff fd2f 	bl	8006964 <HAL_RCCEx_GetPeriphCLKFreq>
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8006f06:	6823      	ldr	r3, [r4, #0]
 8006f08:	4a7e      	ldr	r2, [pc, #504]	; (8007104 <HAL_SAI_Init+0x304>)
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	d002      	beq.n	8006f14 <HAL_SAI_Init+0x114>
 8006f0e:	3220      	adds	r2, #32
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d104      	bne.n	8006f1e <HAL_SAI_Init+0x11e>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 8006f14:	f44f 7000 	mov.w	r0, #512	; 0x200
 8006f18:	2100      	movs	r1, #0
 8006f1a:	f7ff fd23 	bl	8006964 <HAL_RCCEx_GetPeriphCLKFreq>
    if (hsai->Instance == SAI4_Block_A)
 8006f1e:	6822      	ldr	r2, [r4, #0]
 8006f20:	4b71      	ldr	r3, [pc, #452]	; (80070e8 <HAL_SAI_Init+0x2e8>)
 8006f22:	429a      	cmp	r2, r3
 8006f24:	d104      	bne.n	8006f30 <HAL_SAI_Init+0x130>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 8006f26:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8006f2a:	2100      	movs	r1, #0
 8006f2c:	f7ff fd1a 	bl	8006964 <HAL_RCCEx_GetPeriphCLKFreq>
    if (hsai->Instance == SAI4_Block_B)
 8006f30:	6822      	ldr	r2, [r4, #0]
 8006f32:	4b75      	ldr	r3, [pc, #468]	; (8007108 <HAL_SAI_Init+0x308>)
 8006f34:	429a      	cmp	r2, r3
 8006f36:	d104      	bne.n	8006f42 <HAL_SAI_Init+0x142>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 8006f38:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006f3c:	2100      	movs	r1, #0
 8006f3e:	f7ff fd11 	bl	8006964 <HAL_RCCEx_GetPeriphCLKFreq>
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8006f42:	69a3      	ldr	r3, [r4, #24]
      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8006f44:	6c62      	ldr	r2, [r4, #68]	; 0x44
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8006f46:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006f4a:	f8d4 c020 	ldr.w	ip, [r4, #32]
 8006f4e:	f040 80e8 	bne.w	8007122 <HAL_SAI_Init+0x322>
      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8006f52:	2a04      	cmp	r2, #4
 8006f54:	f000 80e0 	beq.w	8007118 <HAL_SAI_Init+0x318>
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 8006f58:	2a08      	cmp	r2, #8
 8006f5a:	f000 80df 	beq.w	800711c <HAL_SAI_Init+0x31c>
        tmpframelength = hsai->FrameInit.FrameLength;
 8006f5e:	6d61      	ldr	r1, [r4, #84]	; 0x54
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8006f60:	260a      	movs	r6, #10
 8006f62:	4346      	muls	r6, r0
 8006f64:	fb0c f001 	mul.w	r0, ip, r1
 8006f68:	fbb6 f0f0 	udiv	r0, r6, r0
    hsai->Init.Mckdiv = tmpval / 10U;
 8006f6c:	210a      	movs	r1, #10
 8006f6e:	fbb0 f3f1 	udiv	r3, r0, r1
    if ((tmpval % 10U) > 8U)
 8006f72:	fb01 0013 	mls	r0, r1, r3, r0
 8006f76:	2809      	cmp	r0, #9
      hsai->Init.Mckdiv += 1U;
 8006f78:	bf08      	it	eq
 8006f7a:	3301      	addeq	r3, #1
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8006f7c:	2a04      	cmp	r2, #4
      hsai->Init.Mckdiv += 1U;
 8006f7e:	6263      	str	r3, [r4, #36]	; 0x24
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8006f80:	bf02      	ittt	eq
 8006f82:	6a63      	ldreq	r3, [r4, #36]	; 0x24
 8006f84:	085b      	lsreq	r3, r3, #1
 8006f86:	6263      	streq	r3, [r4, #36]	; 0x24
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8006f88:	6866      	ldr	r6, [r4, #4]
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8006f8a:	6d23      	ldr	r3, [r4, #80]	; 0x50
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8006f8c:	f036 0602 	bics.w	r6, r6, #2
 8006f90:	f040 80d6 	bne.w	8007140 <HAL_SAI_Init+0x340>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8006f94:	2b01      	cmp	r3, #1
 8006f96:	bf18      	it	ne
 8006f98:	f44f 7600 	movne.w	r6, #512	; 0x200
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8006f9c:	f7fb fd02 	bl	80029a4 <HAL_GetREVID>
 8006fa0:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8006fa4:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8006fa6:	69a1      	ldr	r1, [r4, #24]
 8006fa8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8006faa:	e9d4 3e00 	ldrd	r3, lr, [r4]
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8006fae:	f8d3 a000 	ldr.w	sl, [r3]
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8006fb2:	f0c0 80cb 	bcc.w	800714c <HAL_SAI_Init+0x34c>
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006fb6:	ea4e 0e02 	orr.w	lr, lr, r2
 8006fba:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8006fbc:	f8df c154 	ldr.w	ip, [pc, #340]	; 8007114 <HAL_SAI_Init+0x314>
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006fc0:	ea4e 0e02 	orr.w	lr, lr, r2
 8006fc4:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8006fc6:	ea0a 0c0c 	and.w	ip, sl, ip
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006fca:	ea4e 0e02 	orr.w	lr, lr, r2
 8006fce:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8006fd0:	f8c3 c000 	str.w	ip, [r3]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006fd4:	ea4e 0e02 	orr.w	lr, lr, r2
 8006fd8:	6962      	ldr	r2, [r4, #20]
 8006fda:	f8d3 c000 	ldr.w	ip, [r3]
 8006fde:	ea4e 0202 	orr.w	r2, lr, r2
 8006fe2:	4311      	orrs	r1, r2
 8006fe4:	6922      	ldr	r2, [r4, #16]
 8006fe6:	4308      	orrs	r0, r1
 8006fe8:	4310      	orrs	r0, r2
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006fea:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006fec:	ea40 0c0c 	orr.w	ip, r0, ip
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 8006ff0:	454b      	cmp	r3, r9
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006ff2:	ea4c 5c02 	orr.w	ip, ip, r2, lsl #20
 8006ff6:	ea4c 0707 	orr.w	r7, ip, r7
 8006ffa:	ea46 0607 	orr.w	r6, r6, r7
 8006ffe:	601e      	str	r6, [r3, #0]
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8007000:	685a      	ldr	r2, [r3, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8007002:	6b20      	ldr	r0, [r4, #48]	; 0x30
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8007004:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8007008:	f022 020f 	bic.w	r2, r2, #15
 800700c:	605a      	str	r2, [r3, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800700e:	69e2      	ldr	r2, [r4, #28]
 8007010:	6859      	ldr	r1, [r3, #4]
 8007012:	ea42 0200 	orr.w	r2, r2, r0
 8007016:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8007018:	ea42 0200 	orr.w	r2, r2, r0
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800701c:	6de0      	ldr	r0, [r4, #92]	; 0x5c
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800701e:	ea42 0201 	orr.w	r2, r2, r1
 8007022:	605a      	str	r2, [r3, #4]
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8007024:	4a39      	ldr	r2, [pc, #228]	; (800710c <HAL_SAI_Init+0x30c>)
 8007026:	6899      	ldr	r1, [r3, #8]
 8007028:	ea02 0201 	and.w	r2, r2, r1
 800702c:	609a      	str	r2, [r3, #8]
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800702e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007030:	6899      	ldr	r1, [r3, #8]
 8007032:	ea42 0200 	orr.w	r2, r2, r0
 8007036:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8007038:	ea42 0200 	orr.w	r2, r2, r0
 800703c:	ea42 0201 	orr.w	r2, r2, r1
 8007040:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8007042:	f101 31ff 	add.w	r1, r1, #4294967295
 8007046:	ea42 0201 	orr.w	r2, r2, r1
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800704a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800704c:	f101 31ff 	add.w	r1, r1, #4294967295
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8007050:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8007054:	609a      	str	r2, [r3, #8]
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8007056:	68da      	ldr	r2, [r3, #12]
 8007058:	f422 627d 	bic.w	r2, r2, #4048	; 0xfd0
 800705c:	f022 020f 	bic.w	r2, r2, #15
 8007060:	ea4f 4202 	mov.w	r2, r2, lsl #16
 8007064:	ea4f 4212 	mov.w	r2, r2, lsr #16
 8007068:	60da      	str	r2, [r3, #12]
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800706a:	68d9      	ldr	r1, [r3, #12]
 800706c:	e9d4 201a 	ldrd	r2, r0, [r4, #104]	; 0x68
 8007070:	ea42 0200 	orr.w	r2, r2, r0
 8007074:	ea42 0201 	orr.w	r2, r2, r1
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8007078:	6f61      	ldr	r1, [r4, #116]	; 0x74
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800707a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800707e:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8007080:	f101 31ff 	add.w	r1, r1, #4294967295
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8007084:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8007088:	60da      	str	r2, [r3, #12]
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 800708a:	d002      	beq.n	8007092 <HAL_SAI_Init+0x292>
 800708c:	4a16      	ldr	r2, [pc, #88]	; (80070e8 <HAL_SAI_Init+0x2e8>)
 800708e:	4293      	cmp	r3, r2
 8007090:	d111      	bne.n	80070b6 <HAL_SAI_Init+0x2b6>
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8007092:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8007094:	f023 0301 	bic.w	r3, r3, #1
 8007098:	646b      	str	r3, [r5, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800709a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 800709e:	2b01      	cmp	r3, #1
 80070a0:	d109      	bne.n	80070b6 <HAL_SAI_Init+0x2b6>
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 80070a2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80070a4:	1e5a      	subs	r2, r3, #1
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 80070a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80070a8:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80070ac:	646b      	str	r3, [r5, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 80070ae:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80070b0:	f043 0301 	orr.w	r3, r3, #1
 80070b4:	646b      	str	r3, [r5, #68]	; 0x44
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80070b6:	2300      	movs	r3, #0
  hsai->State = HAL_SAI_STATE_READY;
 80070b8:	2201      	movs	r2, #1
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80070ba:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
  __HAL_UNLOCK(hsai);
 80070be:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
  hsai->State = HAL_SAI_STATE_READY;
 80070c2:	f884 2091 	strb.w	r2, [r4, #145]	; 0x91
  return HAL_OK;
 80070c6:	e6a1      	b.n	8006e0c <HAL_SAI_Init+0xc>
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 80070c8:	f043 0301 	orr.w	r3, r3, #1
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80070cc:	f44f 6700 	mov.w	r7, #2048	; 0x800
      break;
 80070d0:	e6fd      	b.n	8006ece <HAL_SAI_Init+0xce>
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 80070d2:	f043 0302 	orr.w	r3, r3, #2
      break;
 80070d6:	e7f9      	b.n	80070cc <HAL_SAI_Init+0x2cc>
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 80070d8:	f043 0303 	orr.w	r3, r3, #3
 80070dc:	e7f6      	b.n	80070cc <HAL_SAI_Init+0x2cc>
      syncen_bits = 0;
 80070de:	2700      	movs	r7, #0
 80070e0:	e6f5      	b.n	8006ece <HAL_SAI_Init+0xce>
    uint32_t freq = 0;
 80070e2:	2000      	movs	r0, #0
 80070e4:	e703      	b.n	8006eee <HAL_SAI_Init+0xee>
 80070e6:	bf00      	nop
 80070e8:	58005404 	.word	0x58005404
 80070ec:	40015824 	.word	0x40015824
 80070f0:	58005400 	.word	0x58005400
 80070f4:	40015800 	.word	0x40015800
 80070f8:	40015c00 	.word	0x40015c00
 80070fc:	40016000 	.word	0x40016000
 8007100:	40015c04 	.word	0x40015c04
 8007104:	40016004 	.word	0x40016004
 8007108:	58005424 	.word	0x58005424
 800710c:	fff88000 	.word	0xfff88000
 8007110:	40015804 	.word	0x40015804
 8007114:	f005c010 	.word	0xf005c010
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 8007118:	2140      	movs	r1, #64	; 0x40
 800711a:	e721      	b.n	8006f60 <HAL_SAI_Init+0x160>
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 800711c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007120:	e71e      	b.n	8006f60 <HAL_SAI_Init+0x160>
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8007122:	6aa6      	ldr	r6, [r4, #40]	; 0x28
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8007124:	210a      	movs	r1, #10
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8007126:	f1b6 6f80 	cmp.w	r6, #67108864	; 0x4000000
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800712a:	fb01 f000 	mul.w	r0, r1, r0
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800712e:	bf0c      	ite	eq
 8007130:	2302      	moveq	r3, #2
 8007132:	2301      	movne	r3, #1
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8007134:	fb0c f303 	mul.w	r3, ip, r3
 8007138:	021b      	lsls	r3, r3, #8
 800713a:	fbb0 f0f3 	udiv	r0, r0, r3
 800713e:	e715      	b.n	8006f6c <HAL_SAI_Init+0x16c>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8007140:	2b01      	cmp	r3, #1
 8007142:	bf14      	ite	ne
 8007144:	2600      	movne	r6, #0
 8007146:	f44f 7600 	moveq.w	r6, #512	; 0x200
 800714a:	e727      	b.n	8006f9c <HAL_SAI_Init+0x19c>
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800714c:	ea4e 0e02 	orr.w	lr, lr, r2
 8007150:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8007152:	f8df c02c 	ldr.w	ip, [pc, #44]	; 8007180 <HAL_SAI_Init+0x380>
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007156:	ea4e 0e02 	orr.w	lr, lr, r2
 800715a:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800715c:	ea0a 0c0c 	and.w	ip, sl, ip
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007160:	ea4e 0e02 	orr.w	lr, lr, r2
 8007164:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8007166:	f8c3 c000 	str.w	ip, [r3]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800716a:	ea4e 0e02 	orr.w	lr, lr, r2
 800716e:	6962      	ldr	r2, [r4, #20]
 8007170:	f8d3 c000 	ldr.w	ip, [r3]
 8007174:	ea4e 0202 	orr.w	r2, lr, r2
 8007178:	4311      	orrs	r1, r2
 800717a:	4308      	orrs	r0, r1
 800717c:	e735      	b.n	8006fea <HAL_SAI_Init+0x1ea>
 800717e:	bf00      	nop
 8007180:	f805c010 	.word	0xf805c010

08007184 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8007184:	b538      	push	{r3, r4, r5, lr}
 8007186:	460d      	mov	r5, r1
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8007188:	4604      	mov	r4, r0
 800718a:	b1f0      	cbz	r0, 80071ca <HAL_SDRAM_Init+0x46>
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800718c:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8007190:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8007194:	b91b      	cbnz	r3, 800719e <HAL_SDRAM_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8007196:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800719a:	f7fa fe15 	bl	8001dc8 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800719e:	2302      	movs	r3, #2

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80071a0:	1d21      	adds	r1, r4, #4
 80071a2:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80071a4:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80071a8:	f000 fd1d 	bl	8007be6 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 80071ac:	6862      	ldr	r2, [r4, #4]
 80071ae:	4629      	mov	r1, r5
 80071b0:	6820      	ldr	r0, [r4, #0]
 80071b2:	f000 fd53 	bl	8007c5c <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 80071b6:	4a06      	ldr	r2, [pc, #24]	; (80071d0 <HAL_SDRAM_Init+0x4c>)
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;

  return HAL_OK;
 80071b8:	2000      	movs	r0, #0
  __FMC_ENABLE();
 80071ba:	6813      	ldr	r3, [r2, #0]
 80071bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80071c0:	6013      	str	r3, [r2, #0]
  hsdram->State = HAL_SDRAM_STATE_READY;
 80071c2:	2301      	movs	r3, #1
 80071c4:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 80071c8:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80071ca:	2001      	movs	r0, #1
 80071cc:	e7fc      	b.n	80071c8 <HAL_SDRAM_Init+0x44>
 80071ce:	bf00      	nop
 80071d0:	52004000 	.word	0x52004000

080071d4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80071d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80071d6:	4604      	mov	r4, r0
 80071d8:	b908      	cbnz	r0, 80071de <HAL_SPI_Init+0xa>
  {
    return HAL_ERROR;
 80071da:	2001      	movs	r0, #1

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
  hspi->State     = HAL_SPI_STATE_READY;

  return HAL_OK;
}
 80071dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80071de:	6802      	ldr	r2, [r0, #0]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80071e0:	2300      	movs	r3, #0
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80071e2:	494d      	ldr	r1, [pc, #308]	; (8007318 <HAL_SPI_Init+0x144>)
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80071e4:	6283      	str	r3, [r0, #40]	; 0x28
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80071e6:	428a      	cmp	r2, r1
 80071e8:	68c3      	ldr	r3, [r0, #12]
 80071ea:	d009      	beq.n	8007200 <HAL_SPI_Init+0x2c>
 80071ec:	f5a1 4178 	sub.w	r1, r1, #63488	; 0xf800
 80071f0:	428a      	cmp	r2, r1
 80071f2:	d005      	beq.n	8007200 <HAL_SPI_Init+0x2c>
 80071f4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80071f8:	428a      	cmp	r2, r1
 80071fa:	d001      	beq.n	8007200 <HAL_SPI_Init+0x2c>
 80071fc:	2b0f      	cmp	r3, #15
 80071fe:	d8ec      	bhi.n	80071da <HAL_SPI_Init+0x6>
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8007200:	6be1      	ldr	r1, [r4, #60]	; 0x3c
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8007202:	3308      	adds	r3, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8007204:	0949      	lsrs	r1, r1, #5
  data_size = (data_size + 7UL) / 8UL;
 8007206:	08db      	lsrs	r3, r3, #3

  return data_size * fifo_threashold;
 8007208:	fb01 3303 	mla	r3, r1, r3, r3
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800720c:	4942      	ldr	r1, [pc, #264]	; (8007318 <HAL_SPI_Init+0x144>)
 800720e:	428a      	cmp	r2, r1
 8007210:	d073      	beq.n	80072fa <HAL_SPI_Init+0x126>
 8007212:	f5a1 4178 	sub.w	r1, r1, #63488	; 0xf800
 8007216:	428a      	cmp	r2, r1
 8007218:	d06f      	beq.n	80072fa <HAL_SPI_Init+0x126>
 800721a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800721e:	428a      	cmp	r2, r1
 8007220:	d06b      	beq.n	80072fa <HAL_SPI_Init+0x126>
 8007222:	2b08      	cmp	r3, #8
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007224:	d8d9      	bhi.n	80071da <HAL_SPI_Init+0x6>
  if (hspi->State == HAL_SPI_STATE_RESET)
 8007226:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
 800722a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800722e:	b923      	cbnz	r3, 800723a <HAL_SPI_Init+0x66>
    HAL_SPI_MspInit(hspi);
 8007230:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 8007232:	f884 2080 	strb.w	r2, [r4, #128]	; 0x80
    HAL_SPI_MspInit(hspi);
 8007236:	f7fa fc9b 	bl	8001b70 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 800723a:	6822      	ldr	r2, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 800723c:	2302      	movs	r3, #2
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800723e:	6861      	ldr	r1, [r4, #4]
  hspi->State = HAL_SPI_STATE_BUSY;
 8007240:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  __HAL_SPI_DISABLE(hspi);
 8007244:	6813      	ldr	r3, [r2, #0]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007246:	6ba6      	ldr	r6, [r4, #56]	; 0x38
  __HAL_SPI_DISABLE(hspi);
 8007248:	f023 0301 	bic.w	r3, r3, #1
 800724c:	6013      	str	r3, [r2, #0]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800724e:	69a3      	ldr	r3, [r4, #24]
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8007250:	6895      	ldr	r5, [r2, #8]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007252:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8007256:	f405 1cf8 	and.w	ip, r5, #2031616	; 0x1f0000
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800725a:	d104      	bne.n	8007266 <HAL_SPI_Init+0x92>
 800725c:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 8007260:	d14d      	bne.n	80072fe <HAL_SPI_Init+0x12a>
 8007262:	2e00      	cmp	r6, #0
 8007264:	d050      	beq.n	8007308 <HAL_SPI_Init+0x134>
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8007266:	f411 0080 	ands.w	r0, r1, #4194304	; 0x400000
 800726a:	68e5      	ldr	r5, [r4, #12]
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800726c:	6817      	ldr	r7, [r2, #0]
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800726e:	d050      	beq.n	8007312 <HAL_SPI_Init+0x13e>
 8007270:	2d06      	cmp	r5, #6
 8007272:	d94e      	bls.n	8007312 <HAL_SPI_Init+0x13e>
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8007274:	f427 7e80 	bic.w	lr, r7, #256	; 0x100
 8007278:	6d27      	ldr	r7, [r4, #80]	; 0x50
 800727a:	ea4e 0707 	orr.w	r7, lr, r7
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800727e:	6017      	str	r7, [r2, #0]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8007280:	430b      	orrs	r3, r1
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8007282:	69e7      	ldr	r7, [r4, #28]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8007284:	4333      	orrs	r3, r6
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8007286:	433d      	orrs	r5, r7
 8007288:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 800728a:	433d      	orrs	r5, r7
 800728c:	6be7      	ldr	r7, [r4, #60]	; 0x3c
 800728e:	433d      	orrs	r5, r7
 8007290:	ea45 050c 	orr.w	r5, r5, ip
 8007294:	6095      	str	r5, [r2, #8]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8007296:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8007298:	432b      	orrs	r3, r5
 800729a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800729c:	432b      	orrs	r3, r5
 800729e:	6925      	ldr	r5, [r4, #16]
 80072a0:	432b      	orrs	r3, r5
 80072a2:	6965      	ldr	r5, [r4, #20]
 80072a4:	432b      	orrs	r3, r5
 80072a6:	6a25      	ldr	r5, [r4, #32]
 80072a8:	432b      	orrs	r3, r5
 80072aa:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 80072ac:	432b      	orrs	r3, r5
 80072ae:	68a5      	ldr	r5, [r4, #8]
 80072b0:	432b      	orrs	r3, r5
 80072b2:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 80072b4:	432b      	orrs	r3, r5
 80072b6:	6da5      	ldr	r5, [r4, #88]	; 0x58
 80072b8:	432b      	orrs	r3, r5
 80072ba:	60d3      	str	r3, [r2, #12]
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80072bc:	b959      	cbnz	r1, 80072d6 <HAL_SPI_Init+0x102>
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80072be:	6893      	ldr	r3, [r2, #8]
 80072c0:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80072c4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80072c8:	6093      	str	r3, [r2, #8]
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80072ca:	6893      	ldr	r3, [r2, #8]
 80072cc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80072d0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80072d4:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80072d6:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80072d8:	f023 0301 	bic.w	r3, r3, #1
 80072dc:	6513      	str	r3, [r2, #80]	; 0x50
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80072de:	b128      	cbz	r0, 80072ec <HAL_SPI_Init+0x118>
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80072e0:	68d3      	ldr	r3, [r2, #12]
 80072e2:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80072e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80072e8:	430b      	orrs	r3, r1
 80072ea:	60d3      	str	r3, [r2, #12]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80072ec:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 80072ee:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80072f0:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80072f4:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  return HAL_OK;
 80072f8:	e770      	b.n	80071dc <HAL_SPI_Init+0x8>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80072fa:	2b10      	cmp	r3, #16
 80072fc:	e792      	b.n	8007224 <HAL_SPI_Init+0x50>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80072fe:	2900      	cmp	r1, #0
 8007300:	d1b1      	bne.n	8007266 <HAL_SPI_Init+0x92>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007302:	f1b6 5f80 	cmp.w	r6, #268435456	; 0x10000000
 8007306:	d1ae      	bne.n	8007266 <HAL_SPI_Init+0x92>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8007308:	6810      	ldr	r0, [r2, #0]
 800730a:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
 800730e:	6010      	str	r0, [r2, #0]
 8007310:	e7a9      	b.n	8007266 <HAL_SPI_Init+0x92>
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8007312:	f427 7780 	bic.w	r7, r7, #256	; 0x100
 8007316:	e7b2      	b.n	800727e <HAL_SPI_Init+0xaa>
 8007318:	40013000 	.word	0x40013000

0800731c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800731c:	b510      	push	{r4, lr}
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800731e:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007320:	e852 3f00 	ldrex	r3, [r2]
 8007324:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007328:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 800732c:	6802      	ldr	r2, [r0, #0]
 800732e:	2900      	cmp	r1, #0
 8007330:	d1f5      	bne.n	800731e <UART_EndRxTransfer+0x2>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007332:	4c0f      	ldr	r4, [pc, #60]	; (8007370 <UART_EndRxTransfer+0x54>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007334:	f102 0308 	add.w	r3, r2, #8
 8007338:	e853 3f00 	ldrex	r3, [r3]
 800733c:	4023      	ands	r3, r4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800733e:	f102 0c08 	add.w	ip, r2, #8
 8007342:	e84c 3100 	strex	r1, r3, [ip]
 8007346:	2900      	cmp	r1, #0
 8007348:	d1f4      	bne.n	8007334 <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800734a:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800734c:	2b01      	cmp	r3, #1
 800734e:	d107      	bne.n	8007360 <UART_EndRxTransfer+0x44>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007350:	e852 3f00 	ldrex	r3, [r2]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007354:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007358:	e842 3100 	strex	r1, r3, [r2]
 800735c:	2900      	cmp	r1, #0
 800735e:	d1f7      	bne.n	8007350 <UART_EndRxTransfer+0x34>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007360:	2320      	movs	r3, #32
 8007362:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007366:	2300      	movs	r3, #0
 8007368:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800736a:	6743      	str	r3, [r0, #116]	; 0x74
}
 800736c:	bd10      	pop	{r4, pc}
 800736e:	bf00      	nop
 8007370:	effffffe 	.word	0xeffffffe

08007374 <UART_SetConfig>:
{
 8007374:	b530      	push	{r4, r5, lr}
 8007376:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 8007378:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800737a:	69c0      	ldr	r0, [r0, #28]
{
 800737c:	b087      	sub	sp, #28
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800737e:	6921      	ldr	r1, [r4, #16]
 8007380:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007382:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007384:	430a      	orrs	r2, r1
 8007386:	6961      	ldr	r1, [r4, #20]
 8007388:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800738a:	4997      	ldr	r1, [pc, #604]	; (80075e8 <UART_SetConfig+0x274>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800738c:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800738e:	4029      	ands	r1, r5
 8007390:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007392:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007394:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007396:	685a      	ldr	r2, [r3, #4]
 8007398:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800739c:	430a      	orrs	r2, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800739e:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80073a0:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80073a2:	4a92      	ldr	r2, [pc, #584]	; (80075ec <UART_SetConfig+0x278>)
 80073a4:	4293      	cmp	r3, r2
    tmpreg |= huart->Init.OneBitSampling;
 80073a6:	bf1c      	itt	ne
 80073a8:	6a22      	ldrne	r2, [r4, #32]
 80073aa:	4311      	orrne	r1, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80073ac:	689a      	ldr	r2, [r3, #8]
 80073ae:	f022 426e 	bic.w	r2, r2, #3992977408	; 0xee000000
 80073b2:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 80073b6:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80073b8:	6a61      	ldr	r1, [r4, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80073ba:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80073bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073be:	f022 020f 	bic.w	r2, r2, #15
 80073c2:	430a      	orrs	r2, r1
 80073c4:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 80073c6:	4a8a      	ldr	r2, [pc, #552]	; (80075f0 <UART_SetConfig+0x27c>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d11b      	bne.n	8007404 <UART_SetConfig+0x90>
 80073cc:	4b89      	ldr	r3, [pc, #548]	; (80075f4 <UART_SetConfig+0x280>)
 80073ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073d0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80073d4:	2b28      	cmp	r3, #40	; 0x28
 80073d6:	d86c      	bhi.n	80074b2 <UART_SetConfig+0x13e>
 80073d8:	4a87      	ldr	r2, [pc, #540]	; (80075f8 <UART_SetConfig+0x284>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80073da:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80073de:	5cd3      	ldrb	r3, [r2, r3]
 80073e0:	f040 8132 	bne.w	8007648 <UART_SetConfig+0x2d4>
    switch (clocksource)
 80073e4:	2b08      	cmp	r3, #8
 80073e6:	f200 80c0 	bhi.w	800756a <UART_SetConfig+0x1f6>
 80073ea:	2b08      	cmp	r3, #8
 80073ec:	d861      	bhi.n	80074b2 <UART_SetConfig+0x13e>
 80073ee:	e8df f013 	tbh	[pc, r3, lsl #1]
 80073f2:	00e7      	.short	0x00e7
 80073f4:	006000ec 	.word	0x006000ec
 80073f8:	00ef0060 	.word	0x00ef0060
 80073fc:	00600060 	.word	0x00600060
 8007400:	00f40060 	.word	0x00f40060
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007404:	4a7d      	ldr	r2, [pc, #500]	; (80075fc <UART_SetConfig+0x288>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d107      	bne.n	800741a <UART_SetConfig+0xa6>
 800740a:	4b7a      	ldr	r3, [pc, #488]	; (80075f4 <UART_SetConfig+0x280>)
 800740c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800740e:	f003 0307 	and.w	r3, r3, #7
 8007412:	2b05      	cmp	r3, #5
 8007414:	d84d      	bhi.n	80074b2 <UART_SetConfig+0x13e>
 8007416:	4a7a      	ldr	r2, [pc, #488]	; (8007600 <UART_SetConfig+0x28c>)
 8007418:	e7df      	b.n	80073da <UART_SetConfig+0x66>
 800741a:	4a7a      	ldr	r2, [pc, #488]	; (8007604 <UART_SetConfig+0x290>)
 800741c:	4293      	cmp	r3, r2
 800741e:	d107      	bne.n	8007430 <UART_SetConfig+0xbc>
 8007420:	4b74      	ldr	r3, [pc, #464]	; (80075f4 <UART_SetConfig+0x280>)
 8007422:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007424:	f003 0307 	and.w	r3, r3, #7
 8007428:	2b05      	cmp	r3, #5
 800742a:	d842      	bhi.n	80074b2 <UART_SetConfig+0x13e>
 800742c:	4a76      	ldr	r2, [pc, #472]	; (8007608 <UART_SetConfig+0x294>)
 800742e:	e7d4      	b.n	80073da <UART_SetConfig+0x66>
 8007430:	4a76      	ldr	r2, [pc, #472]	; (800760c <UART_SetConfig+0x298>)
 8007432:	4293      	cmp	r3, r2
 8007434:	d107      	bne.n	8007446 <UART_SetConfig+0xd2>
 8007436:	4b6f      	ldr	r3, [pc, #444]	; (80075f4 <UART_SetConfig+0x280>)
 8007438:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800743a:	f003 0307 	and.w	r3, r3, #7
 800743e:	2b05      	cmp	r3, #5
 8007440:	d837      	bhi.n	80074b2 <UART_SetConfig+0x13e>
 8007442:	4a73      	ldr	r2, [pc, #460]	; (8007610 <UART_SetConfig+0x29c>)
 8007444:	e7c9      	b.n	80073da <UART_SetConfig+0x66>
 8007446:	4a73      	ldr	r2, [pc, #460]	; (8007614 <UART_SetConfig+0x2a0>)
 8007448:	4293      	cmp	r3, r2
 800744a:	d107      	bne.n	800745c <UART_SetConfig+0xe8>
 800744c:	4b69      	ldr	r3, [pc, #420]	; (80075f4 <UART_SetConfig+0x280>)
 800744e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007450:	f003 0307 	and.w	r3, r3, #7
 8007454:	2b05      	cmp	r3, #5
 8007456:	d82c      	bhi.n	80074b2 <UART_SetConfig+0x13e>
 8007458:	4a6f      	ldr	r2, [pc, #444]	; (8007618 <UART_SetConfig+0x2a4>)
 800745a:	e7be      	b.n	80073da <UART_SetConfig+0x66>
 800745c:	4a6f      	ldr	r2, [pc, #444]	; (800761c <UART_SetConfig+0x2a8>)
 800745e:	4293      	cmp	r3, r2
 8007460:	d107      	bne.n	8007472 <UART_SetConfig+0xfe>
 8007462:	4b64      	ldr	r3, [pc, #400]	; (80075f4 <UART_SetConfig+0x280>)
 8007464:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007466:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800746a:	2b28      	cmp	r3, #40	; 0x28
 800746c:	d821      	bhi.n	80074b2 <UART_SetConfig+0x13e>
 800746e:	4a6c      	ldr	r2, [pc, #432]	; (8007620 <UART_SetConfig+0x2ac>)
 8007470:	e7b3      	b.n	80073da <UART_SetConfig+0x66>
 8007472:	4a6c      	ldr	r2, [pc, #432]	; (8007624 <UART_SetConfig+0x2b0>)
 8007474:	4293      	cmp	r3, r2
 8007476:	d107      	bne.n	8007488 <UART_SetConfig+0x114>
 8007478:	4b5e      	ldr	r3, [pc, #376]	; (80075f4 <UART_SetConfig+0x280>)
 800747a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800747c:	f003 0307 	and.w	r3, r3, #7
 8007480:	2b05      	cmp	r3, #5
 8007482:	d816      	bhi.n	80074b2 <UART_SetConfig+0x13e>
 8007484:	4a68      	ldr	r2, [pc, #416]	; (8007628 <UART_SetConfig+0x2b4>)
 8007486:	e7a8      	b.n	80073da <UART_SetConfig+0x66>
 8007488:	4a68      	ldr	r2, [pc, #416]	; (800762c <UART_SetConfig+0x2b8>)
 800748a:	4293      	cmp	r3, r2
 800748c:	d107      	bne.n	800749e <UART_SetConfig+0x12a>
 800748e:	4b59      	ldr	r3, [pc, #356]	; (80075f4 <UART_SetConfig+0x280>)
 8007490:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007492:	f003 0307 	and.w	r3, r3, #7
 8007496:	2b05      	cmp	r3, #5
 8007498:	d80b      	bhi.n	80074b2 <UART_SetConfig+0x13e>
 800749a:	4a65      	ldr	r2, [pc, #404]	; (8007630 <UART_SetConfig+0x2bc>)
 800749c:	e79d      	b.n	80073da <UART_SetConfig+0x66>
 800749e:	4a53      	ldr	r2, [pc, #332]	; (80075ec <UART_SetConfig+0x278>)
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d106      	bne.n	80074b2 <UART_SetConfig+0x13e>
 80074a4:	f502 320e 	add.w	r2, r2, #145408	; 0x23800
 80074a8:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80074aa:	f003 0307 	and.w	r3, r3, #7
 80074ae:	2b05      	cmp	r3, #5
 80074b0:	d901      	bls.n	80074b6 <UART_SetConfig+0x142>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80074b2:	2001      	movs	r0, #1
 80074b4:	e00e      	b.n	80074d4 <UART_SetConfig+0x160>
 80074b6:	495f      	ldr	r1, [pc, #380]	; (8007634 <UART_SetConfig+0x2c0>)
 80074b8:	5ccb      	ldrb	r3, [r1, r3]
    switch (clocksource)
 80074ba:	2b10      	cmp	r3, #16
 80074bc:	d023      	beq.n	8007506 <UART_SetConfig+0x192>
 80074be:	d811      	bhi.n	80074e4 <UART_SetConfig+0x170>
 80074c0:	2b04      	cmp	r3, #4
 80074c2:	d016      	beq.n	80074f2 <UART_SetConfig+0x17e>
 80074c4:	2b08      	cmp	r3, #8
 80074c6:	d019      	beq.n	80074fc <UART_SetConfig+0x188>
 80074c8:	2b02      	cmp	r3, #2
 80074ca:	d1f2      	bne.n	80074b2 <UART_SetConfig+0x13e>
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80074cc:	f7ff f840 	bl	8006550 <HAL_RCCEx_GetD3PCLK1Freq>
    if (pclk != 0U)
 80074d0:	bb10      	cbnz	r0, 8007518 <UART_SetConfig+0x1a4>
 80074d2:	2000      	movs	r0, #0
  huart->NbRxDataToProcess = 1;
 80074d4:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 80074d8:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 80074da:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 80074dc:	e9c4 331d 	strd	r3, r3, [r4, #116]	; 0x74
}
 80074e0:	b007      	add	sp, #28
 80074e2:	bd30      	pop	{r4, r5, pc}
    switch (clocksource)
 80074e4:	2b20      	cmp	r3, #32
 80074e6:	d03e      	beq.n	8007566 <UART_SetConfig+0x1f2>
 80074e8:	2b40      	cmp	r3, #64	; 0x40
 80074ea:	d1e2      	bne.n	80074b2 <UART_SetConfig+0x13e>
 80074ec:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80074f0:	e012      	b.n	8007518 <UART_SetConfig+0x1a4>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80074f2:	4668      	mov	r0, sp
 80074f4:	f7ff f83e 	bl	8006574 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80074f8:	9801      	ldr	r0, [sp, #4]
        break;
 80074fa:	e7e9      	b.n	80074d0 <UART_SetConfig+0x15c>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80074fc:	a803      	add	r0, sp, #12
 80074fe:	f7ff f8e1 	bl	80066c4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007502:	9804      	ldr	r0, [sp, #16]
        break;
 8007504:	e7e4      	b.n	80074d0 <UART_SetConfig+0x15c>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007506:	6813      	ldr	r3, [r2, #0]
 8007508:	484b      	ldr	r0, [pc, #300]	; (8007638 <UART_SetConfig+0x2c4>)
 800750a:	f013 0f20 	tst.w	r3, #32
 800750e:	d003      	beq.n	8007518 <UART_SetConfig+0x1a4>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007510:	6813      	ldr	r3, [r2, #0]
 8007512:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8007516:	40d8      	lsrs	r0, r3
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007518:	4b48      	ldr	r3, [pc, #288]	; (800763c <UART_SetConfig+0x2c8>)
 800751a:	6a62      	ldr	r2, [r4, #36]	; 0x24
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800751c:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800751e:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007522:	eb05 0145 	add.w	r1, r5, r5, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007526:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800752a:	4299      	cmp	r1, r3
 800752c:	d8c1      	bhi.n	80074b2 <UART_SetConfig+0x13e>
 800752e:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 8007532:	d8be      	bhi.n	80074b2 <UART_SetConfig+0x13e>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007534:	2300      	movs	r3, #0
 8007536:	4619      	mov	r1, r3
 8007538:	f7f9 f838 	bl	80005ac <__aeabi_uldivmod>
 800753c:	462a      	mov	r2, r5
 800753e:	0209      	lsls	r1, r1, #8
 8007540:	086b      	lsrs	r3, r5, #1
 8007542:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 8007546:	0200      	lsls	r0, r0, #8
 8007548:	18c0      	adds	r0, r0, r3
 800754a:	f04f 0300 	mov.w	r3, #0
 800754e:	f141 0100 	adc.w	r1, r1, #0
 8007552:	f7f9 f82b 	bl	80005ac <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007556:	4b3a      	ldr	r3, [pc, #232]	; (8007640 <UART_SetConfig+0x2cc>)
 8007558:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800755c:	429a      	cmp	r2, r3
 800755e:	d8a8      	bhi.n	80074b2 <UART_SetConfig+0x13e>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007560:	6823      	ldr	r3, [r4, #0]
 8007562:	60d8      	str	r0, [r3, #12]
 8007564:	e7b5      	b.n	80074d2 <UART_SetConfig+0x15e>
        pclk = (uint32_t) CSI_VALUE;
 8007566:	4837      	ldr	r0, [pc, #220]	; (8007644 <UART_SetConfig+0x2d0>)
 8007568:	e7d6      	b.n	8007518 <UART_SetConfig+0x1a4>
    switch (clocksource)
 800756a:	2b20      	cmp	r3, #32
 800756c:	d03a      	beq.n	80075e4 <UART_SetConfig+0x270>
 800756e:	2b40      	cmp	r3, #64	; 0x40
 8007570:	d00b      	beq.n	800758a <UART_SetConfig+0x216>
 8007572:	2b10      	cmp	r3, #16
 8007574:	d19d      	bne.n	80074b2 <UART_SetConfig+0x13e>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007576:	4b1f      	ldr	r3, [pc, #124]	; (80075f4 <UART_SetConfig+0x280>)
 8007578:	482f      	ldr	r0, [pc, #188]	; (8007638 <UART_SetConfig+0x2c4>)
 800757a:	681a      	ldr	r2, [r3, #0]
 800757c:	f012 0f20 	tst.w	r2, #32
 8007580:	d003      	beq.n	800758a <UART_SetConfig+0x216>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8007588:	40d8      	lsrs	r0, r3
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800758a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800758c:	4b2b      	ldr	r3, [pc, #172]	; (800763c <UART_SetConfig+0x2c8>)
 800758e:	6862      	ldr	r2, [r4, #4]
 8007590:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8007594:	fbb0 f3f3 	udiv	r3, r0, r3
 8007598:	0850      	lsrs	r0, r2, #1
 800759a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800759e:	f64f 73ef 	movw	r3, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80075a2:	fbb0 f0f2 	udiv	r0, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80075a6:	f1a0 0210 	sub.w	r2, r0, #16
 80075aa:	429a      	cmp	r2, r3
 80075ac:	d881      	bhi.n	80074b2 <UART_SetConfig+0x13e>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80075ae:	f020 030f 	bic.w	r3, r0, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80075b2:	f3c0 0042 	ubfx	r0, r0, #1, #3
        huart->Instance->BRR = brrtemp;
 80075b6:	6822      	ldr	r2, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80075b8:	b29b      	uxth	r3, r3
        huart->Instance->BRR = brrtemp;
 80075ba:	4318      	orrs	r0, r3
 80075bc:	60d0      	str	r0, [r2, #12]
 80075be:	e788      	b.n	80074d2 <UART_SetConfig+0x15e>
        pclk = HAL_RCC_GetPCLK1Freq();
 80075c0:	f7fe f99e 	bl	8005900 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80075c4:	2800      	cmp	r0, #0
 80075c6:	d084      	beq.n	80074d2 <UART_SetConfig+0x15e>
 80075c8:	e7df      	b.n	800758a <UART_SetConfig+0x216>
        pclk = HAL_RCC_GetPCLK2Freq();
 80075ca:	f7fe f9ab 	bl	8005924 <HAL_RCC_GetPCLK2Freq>
        break;
 80075ce:	e7f9      	b.n	80075c4 <UART_SetConfig+0x250>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80075d0:	4668      	mov	r0, sp
 80075d2:	f7fe ffcf 	bl	8006574 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80075d6:	9801      	ldr	r0, [sp, #4]
        break;
 80075d8:	e7f4      	b.n	80075c4 <UART_SetConfig+0x250>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80075da:	a803      	add	r0, sp, #12
 80075dc:	f7ff f872 	bl	80066c4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80075e0:	9804      	ldr	r0, [sp, #16]
        break;
 80075e2:	e7ef      	b.n	80075c4 <UART_SetConfig+0x250>
        pclk = (uint32_t) CSI_VALUE;
 80075e4:	4817      	ldr	r0, [pc, #92]	; (8007644 <UART_SetConfig+0x2d0>)
 80075e6:	e7d0      	b.n	800758a <UART_SetConfig+0x216>
 80075e8:	cfff69f3 	.word	0xcfff69f3
 80075ec:	58000c00 	.word	0x58000c00
 80075f0:	40011000 	.word	0x40011000
 80075f4:	58024400 	.word	0x58024400
 80075f8:	08016888 	.word	0x08016888
 80075fc:	40004400 	.word	0x40004400
 8007600:	080168b1 	.word	0x080168b1
 8007604:	40004800 	.word	0x40004800
 8007608:	080168b1 	.word	0x080168b1
 800760c:	40004c00 	.word	0x40004c00
 8007610:	080168b1 	.word	0x080168b1
 8007614:	40005000 	.word	0x40005000
 8007618:	080168b1 	.word	0x080168b1
 800761c:	40011400 	.word	0x40011400
 8007620:	08016888 	.word	0x08016888
 8007624:	40007800 	.word	0x40007800
 8007628:	080168b1 	.word	0x080168b1
 800762c:	40007c00 	.word	0x40007c00
 8007630:	080168b1 	.word	0x080168b1
 8007634:	080168b7 	.word	0x080168b7
 8007638:	03d09000 	.word	0x03d09000
 800763c:	080168be 	.word	0x080168be
 8007640:	000ffcff 	.word	0x000ffcff
 8007644:	003d0900 	.word	0x003d0900
    switch (clocksource)
 8007648:	2b08      	cmp	r3, #8
 800764a:	d817      	bhi.n	800767c <UART_SetConfig+0x308>
 800764c:	2b08      	cmp	r3, #8
 800764e:	f63f af30 	bhi.w	80074b2 <UART_SetConfig+0x13e>
 8007652:	a201      	add	r2, pc, #4	; (adr r2, 8007658 <UART_SetConfig+0x2e4>)
 8007654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007658:	080076bf 	.word	0x080076bf
 800765c:	080076cb 	.word	0x080076cb
 8007660:	080074b3 	.word	0x080074b3
 8007664:	080074b3 	.word	0x080074b3
 8007668:	080076d1 	.word	0x080076d1
 800766c:	080074b3 	.word	0x080074b3
 8007670:	080074b3 	.word	0x080074b3
 8007674:	080074b3 	.word	0x080074b3
 8007678:	080076db 	.word	0x080076db
 800767c:	2b20      	cmp	r3, #32
 800767e:	d031      	beq.n	80076e4 <UART_SetConfig+0x370>
 8007680:	2b40      	cmp	r3, #64	; 0x40
 8007682:	d031      	beq.n	80076e8 <UART_SetConfig+0x374>
 8007684:	2b10      	cmp	r3, #16
 8007686:	f47f af14 	bne.w	80074b2 <UART_SetConfig+0x13e>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800768a:	4b19      	ldr	r3, [pc, #100]	; (80076f0 <UART_SetConfig+0x37c>)
 800768c:	4819      	ldr	r0, [pc, #100]	; (80076f4 <UART_SetConfig+0x380>)
 800768e:	681a      	ldr	r2, [r3, #0]
 8007690:	f012 0f20 	tst.w	r2, #32
 8007694:	d003      	beq.n	800769e <UART_SetConfig+0x32a>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800769c:	40d8      	lsrs	r0, r3
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800769e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80076a0:	4a15      	ldr	r2, [pc, #84]	; (80076f8 <UART_SetConfig+0x384>)
 80076a2:	6863      	ldr	r3, [r4, #4]
 80076a4:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 80076a8:	fbb0 f0f2 	udiv	r0, r0, r2
 80076ac:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80076b0:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80076b4:	f64f 73ef 	movw	r3, #65519	; 0xffef
 80076b8:	f1a0 0210 	sub.w	r2, r0, #16
 80076bc:	e74e      	b.n	800755c <UART_SetConfig+0x1e8>
        pclk = HAL_RCC_GetPCLK1Freq();
 80076be:	f7fe f91f 	bl	8005900 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80076c2:	2800      	cmp	r0, #0
 80076c4:	f43f af05 	beq.w	80074d2 <UART_SetConfig+0x15e>
 80076c8:	e7e9      	b.n	800769e <UART_SetConfig+0x32a>
        pclk = HAL_RCC_GetPCLK2Freq();
 80076ca:	f7fe f92b 	bl	8005924 <HAL_RCC_GetPCLK2Freq>
        break;
 80076ce:	e7f8      	b.n	80076c2 <UART_SetConfig+0x34e>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80076d0:	4668      	mov	r0, sp
 80076d2:	f7fe ff4f 	bl	8006574 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80076d6:	9801      	ldr	r0, [sp, #4]
        break;
 80076d8:	e7f3      	b.n	80076c2 <UART_SetConfig+0x34e>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80076da:	a803      	add	r0, sp, #12
 80076dc:	f7fe fff2 	bl	80066c4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80076e0:	9804      	ldr	r0, [sp, #16]
        break;
 80076e2:	e7ee      	b.n	80076c2 <UART_SetConfig+0x34e>
        pclk = (uint32_t) CSI_VALUE;
 80076e4:	4805      	ldr	r0, [pc, #20]	; (80076fc <UART_SetConfig+0x388>)
 80076e6:	e7da      	b.n	800769e <UART_SetConfig+0x32a>
    switch (clocksource)
 80076e8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80076ec:	e7d7      	b.n	800769e <UART_SetConfig+0x32a>
 80076ee:	bf00      	nop
 80076f0:	58024400 	.word	0x58024400
 80076f4:	03d09000 	.word	0x03d09000
 80076f8:	080168be 	.word	0x080168be
 80076fc:	003d0900 	.word	0x003d0900

08007700 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007700:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007702:	07da      	lsls	r2, r3, #31
{
 8007704:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007706:	d506      	bpl.n	8007716 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007708:	6801      	ldr	r1, [r0, #0]
 800770a:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800770c:	684a      	ldr	r2, [r1, #4]
 800770e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8007712:	4322      	orrs	r2, r4
 8007714:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007716:	079c      	lsls	r4, r3, #30
 8007718:	d506      	bpl.n	8007728 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800771a:	6801      	ldr	r1, [r0, #0]
 800771c:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800771e:	684a      	ldr	r2, [r1, #4]
 8007720:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007724:	4322      	orrs	r2, r4
 8007726:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007728:	0759      	lsls	r1, r3, #29
 800772a:	d506      	bpl.n	800773a <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800772c:	6801      	ldr	r1, [r0, #0]
 800772e:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8007730:	684a      	ldr	r2, [r1, #4]
 8007732:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007736:	4322      	orrs	r2, r4
 8007738:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800773a:	071a      	lsls	r2, r3, #28
 800773c:	d506      	bpl.n	800774c <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800773e:	6801      	ldr	r1, [r0, #0]
 8007740:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8007742:	684a      	ldr	r2, [r1, #4]
 8007744:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007748:	4322      	orrs	r2, r4
 800774a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800774c:	06dc      	lsls	r4, r3, #27
 800774e:	d506      	bpl.n	800775e <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007750:	6801      	ldr	r1, [r0, #0]
 8007752:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8007754:	688a      	ldr	r2, [r1, #8]
 8007756:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800775a:	4322      	orrs	r2, r4
 800775c:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800775e:	0699      	lsls	r1, r3, #26
 8007760:	d506      	bpl.n	8007770 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007762:	6801      	ldr	r1, [r0, #0]
 8007764:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8007766:	688a      	ldr	r2, [r1, #8]
 8007768:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800776c:	4322      	orrs	r2, r4
 800776e:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007770:	065a      	lsls	r2, r3, #25
 8007772:	d510      	bpl.n	8007796 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007774:	6801      	ldr	r1, [r0, #0]
 8007776:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8007778:	684a      	ldr	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800777a:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800777e:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8007782:	ea42 0204 	orr.w	r2, r2, r4
 8007786:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007788:	d105      	bne.n	8007796 <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800778a:	684a      	ldr	r2, [r1, #4]
 800778c:	6c84      	ldr	r4, [r0, #72]	; 0x48
 800778e:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8007792:	4322      	orrs	r2, r4
 8007794:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007796:	061b      	lsls	r3, r3, #24
 8007798:	d506      	bpl.n	80077a8 <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800779a:	6802      	ldr	r2, [r0, #0]
 800779c:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800779e:	6853      	ldr	r3, [r2, #4]
 80077a0:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80077a4:	430b      	orrs	r3, r1
 80077a6:	6053      	str	r3, [r2, #4]
}
 80077a8:	bd10      	pop	{r4, pc}

080077aa <UART_WaitOnFlagUntilTimeout>:
{
 80077aa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80077ae:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80077b2:	4604      	mov	r4, r0
 80077b4:	460f      	mov	r7, r1
 80077b6:	4616      	mov	r6, r2
 80077b8:	4698      	mov	r8, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80077ba:	6822      	ldr	r2, [r4, #0]
 80077bc:	69d3      	ldr	r3, [r2, #28]
 80077be:	ea37 0303 	bics.w	r3, r7, r3
 80077c2:	bf0c      	ite	eq
 80077c4:	2301      	moveq	r3, #1
 80077c6:	2300      	movne	r3, #0
 80077c8:	42b3      	cmp	r3, r6
 80077ca:	d001      	beq.n	80077d0 <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 80077cc:	2000      	movs	r0, #0
 80077ce:	e01e      	b.n	800780e <UART_WaitOnFlagUntilTimeout+0x64>
    if (Timeout != HAL_MAX_DELAY)
 80077d0:	f1b9 3fff 	cmp.w	r9, #4294967295
 80077d4:	d0f2      	beq.n	80077bc <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80077d6:	f7fb f8c9 	bl	800296c <HAL_GetTick>
 80077da:	eba0 0008 	sub.w	r0, r0, r8
 80077de:	4548      	cmp	r0, r9
 80077e0:	d825      	bhi.n	800782e <UART_WaitOnFlagUntilTimeout+0x84>
 80077e2:	f1b9 0f00 	cmp.w	r9, #0
 80077e6:	d022      	beq.n	800782e <UART_WaitOnFlagUntilTimeout+0x84>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80077e8:	6820      	ldr	r0, [r4, #0]
 80077ea:	6803      	ldr	r3, [r0, #0]
 80077ec:	075a      	lsls	r2, r3, #29
 80077ee:	d5e4      	bpl.n	80077ba <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80077f0:	69c5      	ldr	r5, [r0, #28]
 80077f2:	f015 0508 	ands.w	r5, r5, #8
 80077f6:	d00c      	beq.n	8007812 <UART_WaitOnFlagUntilTimeout+0x68>
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80077f8:	2508      	movs	r5, #8
 80077fa:	6205      	str	r5, [r0, #32]
           UART_EndRxTransfer(huart);
 80077fc:	4620      	mov	r0, r4
 80077fe:	f7ff fd8d 	bl	800731c <UART_EndRxTransfer>
           __HAL_UNLOCK(huart);
 8007802:	2300      	movs	r3, #0
           return HAL_ERROR;
 8007804:	2001      	movs	r0, #1
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007806:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
           __HAL_UNLOCK(huart);
 800780a:	f884 3084 	strb.w	r3, [r4, #132]	; 0x84
}
 800780e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007812:	69c3      	ldr	r3, [r0, #28]
 8007814:	051b      	lsls	r3, r3, #20
 8007816:	d5d0      	bpl.n	80077ba <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007818:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800781c:	6203      	str	r3, [r0, #32]
          UART_EndRxTransfer(huart);
 800781e:	4620      	mov	r0, r4
 8007820:	f7ff fd7c 	bl	800731c <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007824:	2320      	movs	r3, #32
          __HAL_UNLOCK(huart);
 8007826:	f884 5084 	strb.w	r5, [r4, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800782a:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
        return HAL_TIMEOUT;
 800782e:	2003      	movs	r0, #3
 8007830:	e7ed      	b.n	800780e <UART_WaitOnFlagUntilTimeout+0x64>

08007832 <HAL_UART_Transmit>:
{
 8007832:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8007836:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8007838:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
{
 800783c:	4604      	mov	r4, r0
 800783e:	460e      	mov	r6, r1
  if (huart->gState == HAL_UART_STATE_READY)
 8007840:	2b20      	cmp	r3, #32
{
 8007842:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8007844:	d147      	bne.n	80078d6 <HAL_UART_Transmit+0xa4>
    if ((pData == NULL) || (Size == 0U))
 8007846:	2900      	cmp	r1, #0
 8007848:	d047      	beq.n	80078da <HAL_UART_Transmit+0xa8>
 800784a:	2a00      	cmp	r2, #0
 800784c:	d045      	beq.n	80078da <HAL_UART_Transmit+0xa8>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800784e:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007850:	2500      	movs	r5, #0
 8007852:	f8c0 5090 	str.w	r5, [r0, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007856:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
    tickstart = HAL_GetTick();
 800785a:	f7fb f887 	bl	800296c <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800785e:	68a2      	ldr	r2, [r4, #8]
    tickstart = HAL_GetTick();
 8007860:	4603      	mov	r3, r0
    huart->TxXferSize  = Size;
 8007862:	f8a4 7054 	strh.w	r7, [r4, #84]	; 0x54
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007866:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
    huart->TxXferCount = Size;
 800786a:	f8a4 7056 	strh.w	r7, [r4, #86]	; 0x56
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800786e:	d103      	bne.n	8007878 <HAL_UART_Transmit+0x46>
 8007870:	6922      	ldr	r2, [r4, #16]
 8007872:	b90a      	cbnz	r2, 8007878 <HAL_UART_Transmit+0x46>
 8007874:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8007876:	4616      	mov	r6, r2
    while (huart->TxXferCount > 0U)
 8007878:	f8b4 2056 	ldrh.w	r2, [r4, #86]	; 0x56
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800787c:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 8007880:	b292      	uxth	r2, r2
 8007882:	b952      	cbnz	r2, 800789a <HAL_UART_Transmit+0x68>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007884:	2140      	movs	r1, #64	; 0x40
 8007886:	4620      	mov	r0, r4
 8007888:	f7ff ff8f 	bl	80077aa <UART_WaitOnFlagUntilTimeout>
 800788c:	2320      	movs	r3, #32
      huart->gState = HAL_UART_STATE_READY;
 800788e:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007892:	b968      	cbnz	r0, 80078b0 <HAL_UART_Transmit+0x7e>
}
 8007894:	b004      	add	sp, #16
 8007896:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800789a:	2200      	movs	r2, #0
 800789c:	2180      	movs	r1, #128	; 0x80
 800789e:	4620      	mov	r0, r4
 80078a0:	9303      	str	r3, [sp, #12]
 80078a2:	f7ff ff82 	bl	80077aa <UART_WaitOnFlagUntilTimeout>
 80078a6:	9b03      	ldr	r3, [sp, #12]
 80078a8:	b120      	cbz	r0, 80078b4 <HAL_UART_Transmit+0x82>
        huart->gState = HAL_UART_STATE_READY;
 80078aa:	2320      	movs	r3, #32
 80078ac:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
      return HAL_TIMEOUT;
 80078b0:	2003      	movs	r0, #3
 80078b2:	e7ef      	b.n	8007894 <HAL_UART_Transmit+0x62>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80078b4:	6821      	ldr	r1, [r4, #0]
      if (pdata8bits == NULL)
 80078b6:	b95e      	cbnz	r6, 80078d0 <HAL_UART_Transmit+0x9e>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80078b8:	f835 2b02 	ldrh.w	r2, [r5], #2
 80078bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80078c0:	628a      	str	r2, [r1, #40]	; 0x28
      huart->TxXferCount--;
 80078c2:	f8b4 2056 	ldrh.w	r2, [r4, #86]	; 0x56
 80078c6:	3a01      	subs	r2, #1
 80078c8:	b292      	uxth	r2, r2
 80078ca:	f8a4 2056 	strh.w	r2, [r4, #86]	; 0x56
 80078ce:	e7d3      	b.n	8007878 <HAL_UART_Transmit+0x46>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80078d0:	f816 2b01 	ldrb.w	r2, [r6], #1
 80078d4:	e7f4      	b.n	80078c0 <HAL_UART_Transmit+0x8e>
    return HAL_BUSY;
 80078d6:	2002      	movs	r0, #2
 80078d8:	e7dc      	b.n	8007894 <HAL_UART_Transmit+0x62>
      return  HAL_ERROR;
 80078da:	2001      	movs	r0, #1
 80078dc:	e7da      	b.n	8007894 <HAL_UART_Transmit+0x62>

080078de <HAL_UART_Receive>:
{
 80078de:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80078e2:	461f      	mov	r7, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 80078e4:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
{
 80078e8:	4604      	mov	r4, r0
 80078ea:	460d      	mov	r5, r1
  if (huart->RxState == HAL_UART_STATE_READY)
 80078ec:	2b20      	cmp	r3, #32
{
 80078ee:	4616      	mov	r6, r2
  if (huart->RxState == HAL_UART_STATE_READY)
 80078f0:	d163      	bne.n	80079ba <HAL_UART_Receive+0xdc>
    if ((pData == NULL) || (Size == 0U))
 80078f2:	2900      	cmp	r1, #0
 80078f4:	d063      	beq.n	80079be <HAL_UART_Receive+0xe0>
 80078f6:	2a00      	cmp	r2, #0
 80078f8:	d061      	beq.n	80079be <HAL_UART_Receive+0xe0>
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80078fa:	2322      	movs	r3, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078fc:	f04f 0800 	mov.w	r8, #0
 8007900:	f8c0 8090 	str.w	r8, [r0, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007904:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007908:	f8c0 806c 	str.w	r8, [r0, #108]	; 0x6c
    tickstart = HAL_GetTick();
 800790c:	f7fb f82e 	bl	800296c <HAL_GetTick>
    UART_MASK_COMPUTATION(huart);
 8007910:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 8007912:	4681      	mov	r9, r0
    huart->RxXferSize  = Size;
 8007914:	f8a4 605c 	strh.w	r6, [r4, #92]	; 0x5c
    UART_MASK_COMPUTATION(huart);
 8007918:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->RxXferCount = Size;
 800791c:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
    UART_MASK_COMPUTATION(huart);
 8007920:	d118      	bne.n	8007954 <HAL_UART_Receive+0x76>
 8007922:	6922      	ldr	r2, [r4, #16]
 8007924:	b9a2      	cbnz	r2, 8007950 <HAL_UART_Receive+0x72>
 8007926:	f240 12ff 	movw	r2, #511	; 0x1ff
 800792a:	f8a4 2060 	strh.w	r2, [r4, #96]	; 0x60
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800792e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    uhMask = huart->Mask;
 8007932:	f8b4 8060 	ldrh.w	r8, [r4, #96]	; 0x60
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007936:	d11e      	bne.n	8007976 <HAL_UART_Receive+0x98>
 8007938:	6923      	ldr	r3, [r4, #16]
 800793a:	b9e3      	cbnz	r3, 8007976 <HAL_UART_Receive+0x98>
 800793c:	462e      	mov	r6, r5
      pdata8bits  = NULL;
 800793e:	461d      	mov	r5, r3
    while (huart->RxXferCount > 0U)
 8007940:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
 8007944:	b290      	uxth	r0, r2
 8007946:	b9c0      	cbnz	r0, 800797a <HAL_UART_Receive+0x9c>
    huart->RxState = HAL_UART_STATE_READY;
 8007948:	2320      	movs	r3, #32
 800794a:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
    return HAL_OK;
 800794e:	e020      	b.n	8007992 <HAL_UART_Receive+0xb4>
    UART_MASK_COMPUTATION(huart);
 8007950:	22ff      	movs	r2, #255	; 0xff
 8007952:	e7ea      	b.n	800792a <HAL_UART_Receive+0x4c>
 8007954:	b923      	cbnz	r3, 8007960 <HAL_UART_Receive+0x82>
 8007956:	6922      	ldr	r2, [r4, #16]
 8007958:	2a00      	cmp	r2, #0
 800795a:	d0f9      	beq.n	8007950 <HAL_UART_Receive+0x72>
 800795c:	227f      	movs	r2, #127	; 0x7f
 800795e:	e7e4      	b.n	800792a <HAL_UART_Receive+0x4c>
 8007960:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007964:	d104      	bne.n	8007970 <HAL_UART_Receive+0x92>
 8007966:	6922      	ldr	r2, [r4, #16]
 8007968:	2a00      	cmp	r2, #0
 800796a:	d0f7      	beq.n	800795c <HAL_UART_Receive+0x7e>
 800796c:	223f      	movs	r2, #63	; 0x3f
 800796e:	e7dc      	b.n	800792a <HAL_UART_Receive+0x4c>
 8007970:	f8a4 8060 	strh.w	r8, [r4, #96]	; 0x60
 8007974:	e7db      	b.n	800792e <HAL_UART_Receive+0x50>
      pdata16bits = NULL;
 8007976:	2600      	movs	r6, #0
 8007978:	e7e2      	b.n	8007940 <HAL_UART_Receive+0x62>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800797a:	464b      	mov	r3, r9
 800797c:	2200      	movs	r2, #0
 800797e:	2120      	movs	r1, #32
 8007980:	4620      	mov	r0, r4
 8007982:	9700      	str	r7, [sp, #0]
 8007984:	f7ff ff11 	bl	80077aa <UART_WaitOnFlagUntilTimeout>
 8007988:	b130      	cbz	r0, 8007998 <HAL_UART_Receive+0xba>
        huart->RxState = HAL_UART_STATE_READY;
 800798a:	2320      	movs	r3, #32
        return HAL_TIMEOUT;
 800798c:	2003      	movs	r0, #3
        huart->RxState = HAL_UART_STATE_READY;
 800798e:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
}
 8007992:	b003      	add	sp, #12
 8007994:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8007998:	6823      	ldr	r3, [r4, #0]
 800799a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800799c:	ea08 0303 	and.w	r3, r8, r3
      if (pdata8bits == NULL)
 80079a0:	b945      	cbnz	r5, 80079b4 <HAL_UART_Receive+0xd6>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80079a2:	f826 3b02 	strh.w	r3, [r6], #2
      huart->RxXferCount--;
 80079a6:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
 80079aa:	3a01      	subs	r2, #1
 80079ac:	b292      	uxth	r2, r2
 80079ae:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 80079b2:	e7c5      	b.n	8007940 <HAL_UART_Receive+0x62>
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80079b4:	f805 3b01 	strb.w	r3, [r5], #1
        pdata8bits++;
 80079b8:	e7f5      	b.n	80079a6 <HAL_UART_Receive+0xc8>
    return HAL_BUSY;
 80079ba:	2002      	movs	r0, #2
 80079bc:	e7e9      	b.n	8007992 <HAL_UART_Receive+0xb4>
      return  HAL_ERROR;
 80079be:	2001      	movs	r0, #1
 80079c0:	e7e7      	b.n	8007992 <HAL_UART_Receive+0xb4>

080079c2 <UART_CheckIdleState>:
{
 80079c2:	b530      	push	{r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079c4:	2500      	movs	r5, #0
{
 80079c6:	4604      	mov	r4, r0
 80079c8:	b085      	sub	sp, #20
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079ca:	f8c0 5090 	str.w	r5, [r0, #144]	; 0x90
  tickstart = HAL_GetTick();
 80079ce:	f7fa ffcd 	bl	800296c <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80079d2:	6822      	ldr	r2, [r4, #0]
  tickstart = HAL_GetTick();
 80079d4:	4603      	mov	r3, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80079d6:	6812      	ldr	r2, [r2, #0]
 80079d8:	0711      	lsls	r1, r2, #28
 80079da:	d51c      	bpl.n	8007a16 <UART_CheckIdleState+0x54>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80079dc:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 80079e0:	9003      	str	r0, [sp, #12]
 80079e2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80079e6:	4620      	mov	r0, r4
 80079e8:	9200      	str	r2, [sp, #0]
 80079ea:	462a      	mov	r2, r5
 80079ec:	f7ff fedd 	bl	80077aa <UART_WaitOnFlagUntilTimeout>
 80079f0:	9b03      	ldr	r3, [sp, #12]
 80079f2:	b180      	cbz	r0, 8007a16 <UART_CheckIdleState+0x54>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80079f4:	6821      	ldr	r1, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079f6:	e851 3f00 	ldrex	r3, [r1]
 80079fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079fe:	e841 3200 	strex	r2, r3, [r1]
 8007a02:	2a00      	cmp	r2, #0
 8007a04:	d1f6      	bne.n	80079f4 <UART_CheckIdleState+0x32>
      huart->gState = HAL_UART_STATE_READY;
 8007a06:	2320      	movs	r3, #32
 8007a08:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
      return HAL_TIMEOUT;
 8007a0c:	2003      	movs	r0, #3
      __HAL_UNLOCK(huart);
 8007a0e:	f884 2084 	strb.w	r2, [r4, #132]	; 0x84
}
 8007a12:	b005      	add	sp, #20
 8007a14:	bd30      	pop	{r4, r5, pc}
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007a16:	6822      	ldr	r2, [r4, #0]
 8007a18:	6812      	ldr	r2, [r2, #0]
 8007a1a:	0752      	lsls	r2, r2, #29
 8007a1c:	d523      	bpl.n	8007a66 <UART_CheckIdleState+0xa4>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a1e:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8007a22:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007a26:	4620      	mov	r0, r4
 8007a28:	9200      	str	r2, [sp, #0]
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	f7ff febd 	bl	80077aa <UART_WaitOnFlagUntilTimeout>
 8007a30:	b1c8      	cbz	r0, 8007a66 <UART_CheckIdleState+0xa4>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007a32:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a34:	e852 3f00 	ldrex	r3, [r2]
 8007a38:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a3c:	e842 3000 	strex	r0, r3, [r2]
   return(result);
 8007a40:	6821      	ldr	r1, [r4, #0]
 8007a42:	2800      	cmp	r0, #0
 8007a44:	d1f5      	bne.n	8007a32 <UART_CheckIdleState+0x70>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a46:	f101 0308 	add.w	r3, r1, #8
 8007a4a:	e853 3f00 	ldrex	r3, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a4e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a52:	f101 0008 	add.w	r0, r1, #8
 8007a56:	e840 3200 	strex	r2, r3, [r0]
 8007a5a:	2a00      	cmp	r2, #0
 8007a5c:	d1f3      	bne.n	8007a46 <UART_CheckIdleState+0x84>
      huart->RxState = HAL_UART_STATE_READY;
 8007a5e:	2320      	movs	r3, #32
 8007a60:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8007a64:	e7d2      	b.n	8007a0c <UART_CheckIdleState+0x4a>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a66:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8007a68:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8007a6a:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
  huart->gState = HAL_UART_STATE_READY;
 8007a6e:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007a72:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a76:	66e0      	str	r0, [r4, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007a78:	6720      	str	r0, [r4, #112]	; 0x70
  return HAL_OK;
 8007a7a:	e7ca      	b.n	8007a12 <UART_CheckIdleState+0x50>

08007a7c <HAL_UART_Init>:
{
 8007a7c:	b510      	push	{r4, lr}
  if (huart == NULL)
 8007a7e:	4604      	mov	r4, r0
 8007a80:	b350      	cbz	r0, 8007ad8 <HAL_UART_Init+0x5c>
  if (huart->gState == HAL_UART_STATE_RESET)
 8007a82:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8007a86:	b91b      	cbnz	r3, 8007a90 <HAL_UART_Init+0x14>
    huart->Lock = HAL_UNLOCKED;
 8007a88:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
    HAL_UART_MspInit(huart);
 8007a8c:	f7fa f8f8 	bl	8001c80 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8007a90:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8007a92:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007a94:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 8007a96:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  __HAL_UART_DISABLE(huart);
 8007a9a:	6813      	ldr	r3, [r2, #0]
 8007a9c:	f023 0301 	bic.w	r3, r3, #1
 8007aa0:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007aa2:	f7ff fc67 	bl	8007374 <UART_SetConfig>
 8007aa6:	2801      	cmp	r0, #1
 8007aa8:	d016      	beq.n	8007ad8 <HAL_UART_Init+0x5c>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007aaa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007aac:	b113      	cbz	r3, 8007ab4 <HAL_UART_Init+0x38>
    UART_AdvFeatureConfig(huart);
 8007aae:	4620      	mov	r0, r4
 8007ab0:	f7ff fe26 	bl	8007700 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007ab4:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 8007ab6:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007ab8:	685a      	ldr	r2, [r3, #4]
 8007aba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007abe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007ac0:	689a      	ldr	r2, [r3, #8]
 8007ac2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007ac6:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8007ac8:	681a      	ldr	r2, [r3, #0]
 8007aca:	f042 0201 	orr.w	r2, r2, #1
}
 8007ace:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 8007ad2:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8007ad4:	f7ff bf75 	b.w	80079c2 <UART_CheckIdleState>
}
 8007ad8:	2001      	movs	r0, #1
 8007ada:	bd10      	pop	{r4, pc}

08007adc <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007adc:	6e43      	ldr	r3, [r0, #100]	; 0x64
{
 8007ade:	b530      	push	{r4, r5, lr}
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007ae0:	b91b      	cbnz	r3, 8007aea <UARTEx_SetNbDataToProcess+0xe>
  {
    huart->NbTxDataToProcess = 1U;
    huart->NbRxDataToProcess = 1U;
 8007ae2:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8007ae6:	6683      	str	r3, [r0, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007ae8:	bd30      	pop	{r4, r5, pc}
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007aea:	6803      	ldr	r3, [r0, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007aec:	4d0a      	ldr	r5, [pc, #40]	; (8007b18 <UARTEx_SetNbDataToProcess+0x3c>)
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007aee:	689a      	ldr	r2, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007af0:	6899      	ldr	r1, [r3, #8]
                               (uint16_t)denominator[tx_fifo_threshold];
 8007af2:	4c0a      	ldr	r4, [pc, #40]	; (8007b1c <UARTEx_SetNbDataToProcess+0x40>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007af4:	f3c2 6242 	ubfx	r2, r2, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007af8:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007afa:	5c6b      	ldrb	r3, [r5, r1]
                               (uint16_t)denominator[tx_fifo_threshold];
 8007afc:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007afe:	011b      	lsls	r3, r3, #4
 8007b00:	fbb3 f3f1 	udiv	r3, r3, r1
 8007b04:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007b08:	5cab      	ldrb	r3, [r5, r2]
                               (uint16_t)denominator[rx_fifo_threshold];
 8007b0a:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007b0c:	011b      	lsls	r3, r3, #4
 8007b0e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007b12:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
}
 8007b16:	e7e7      	b.n	8007ae8 <UARTEx_SetNbDataToProcess+0xc>
 8007b18:	080168de 	.word	0x080168de
 8007b1c:	080168d6 	.word	0x080168d6

08007b20 <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 8007b20:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 8007b24:	2b01      	cmp	r3, #1
 8007b26:	d014      	beq.n	8007b52 <HAL_UARTEx_DisableFifoMode+0x32>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007b28:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8007b2a:	2324      	movs	r3, #36	; 0x24
 8007b2c:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007b30:	6811      	ldr	r1, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8007b32:	6813      	ldr	r3, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007b34:	f021 5100 	bic.w	r1, r1, #536870912	; 0x20000000
  __HAL_UART_DISABLE(huart);
 8007b38:	f023 0301 	bic.w	r3, r3, #1
 8007b3c:	6013      	str	r3, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007b3e:	2300      	movs	r3, #0
 8007b40:	6643      	str	r3, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007b42:	6011      	str	r1, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 8007b44:	2220      	movs	r2, #32
  __HAL_UNLOCK(huart);
 8007b46:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  huart->gState = HAL_UART_STATE_READY;
 8007b4a:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  return HAL_OK;
 8007b4e:	4618      	mov	r0, r3
 8007b50:	4770      	bx	lr
  __HAL_LOCK(huart);
 8007b52:	2002      	movs	r0, #2
}
 8007b54:	4770      	bx	lr

08007b56 <HAL_UARTEx_SetTxFifoThreshold>:
{
 8007b56:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8007b58:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
{
 8007b5c:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 8007b5e:	2b01      	cmp	r3, #1
 8007b60:	d01b      	beq.n	8007b9a <HAL_UARTEx_SetTxFifoThreshold+0x44>
 8007b62:	2301      	movs	r3, #1
 8007b64:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 8007b68:	2324      	movs	r3, #36	; 0x24
 8007b6a:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007b6e:	6803      	ldr	r3, [r0, #0]
 8007b70:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8007b72:	681a      	ldr	r2, [r3, #0]
 8007b74:	f022 0201 	bic.w	r2, r2, #1
 8007b78:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007b7a:	689a      	ldr	r2, [r3, #8]
 8007b7c:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 8007b80:	4311      	orrs	r1, r2
 8007b82:	6099      	str	r1, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 8007b84:	f7ff ffaa 	bl	8007adc <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007b88:	6803      	ldr	r3, [r0, #0]
 8007b8a:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8007b8c:	2320      	movs	r3, #32
 8007b8e:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  __HAL_UNLOCK(huart);
 8007b92:	2000      	movs	r0, #0
 8007b94:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
}
 8007b98:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8007b9a:	2002      	movs	r0, #2
 8007b9c:	e7fc      	b.n	8007b98 <HAL_UARTEx_SetTxFifoThreshold+0x42>

08007b9e <HAL_UARTEx_SetRxFifoThreshold>:
{
 8007b9e:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8007ba0:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
{
 8007ba4:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 8007ba6:	2b01      	cmp	r3, #1
 8007ba8:	d01b      	beq.n	8007be2 <HAL_UARTEx_SetRxFifoThreshold+0x44>
 8007baa:	2301      	movs	r3, #1
 8007bac:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 8007bb0:	2324      	movs	r3, #36	; 0x24
 8007bb2:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007bb6:	6803      	ldr	r3, [r0, #0]
 8007bb8:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8007bba:	681a      	ldr	r2, [r3, #0]
 8007bbc:	f022 0201 	bic.w	r2, r2, #1
 8007bc0:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007bc2:	689a      	ldr	r2, [r3, #8]
 8007bc4:	f022 6260 	bic.w	r2, r2, #234881024	; 0xe000000
 8007bc8:	4311      	orrs	r1, r2
 8007bca:	6099      	str	r1, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 8007bcc:	f7ff ff86 	bl	8007adc <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007bd0:	6803      	ldr	r3, [r0, #0]
 8007bd2:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8007bd4:	2320      	movs	r3, #32
 8007bd6:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  __HAL_UNLOCK(huart);
 8007bda:	2000      	movs	r0, #0
 8007bdc:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
}
 8007be0:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8007be2:	2002      	movs	r0, #2
 8007be4:	e7fc      	b.n	8007be0 <HAL_UARTEx_SetRxFifoThreshold+0x42>

08007be6 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8007be6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8007bea:	680a      	ldr	r2, [r1, #0]
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8007bec:	f8d1 9024 	ldr.w	r9, [r1, #36]	; 0x24
 8007bf0:	e9d1 4307 	ldrd	r4, r3, [r1, #28]
 8007bf4:	e9d1 5801 	ldrd	r5, r8, [r1, #4]
 8007bf8:	e9d1 ec03 	ldrd	lr, ip, [r1, #12]
 8007bfc:	e9d1 7605 	ldrd	r7, r6, [r1, #20]
 8007c00:	4323      	orrs	r3, r4
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8007c02:	b9a2      	cbnz	r2, 8007c2e <FMC_SDRAM_Init+0x48>
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8007c04:	ea43 0209 	orr.w	r2, r3, r9
 8007c08:	6801      	ldr	r1, [r0, #0]
 8007c0a:	432a      	orrs	r2, r5
 8007c0c:	f421 41ff 	bic.w	r1, r1, #32640	; 0x7f80
 8007c10:	ea42 0308 	orr.w	r3, r2, r8
 8007c14:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 8007c18:	ea43 030e 	orr.w	r3, r3, lr
 8007c1c:	ea43 030c 	orr.w	r3, r3, ip
 8007c20:	433b      	orrs	r3, r7
 8007c22:	4333      	orrs	r3, r6
 8007c24:	430b      	orrs	r3, r1
 8007c26:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 8007c28:	2000      	movs	r0, #0
 8007c2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8007c2e:	6802      	ldr	r2, [r0, #0]
 8007c30:	ea43 0309 	orr.w	r3, r3, r9
 8007c34:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8007c38:	4313      	orrs	r3, r2
 8007c3a:	6003      	str	r3, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8007c3c:	ea45 0308 	orr.w	r3, r5, r8
 8007c40:	6842      	ldr	r2, [r0, #4]
 8007c42:	ea43 030e 	orr.w	r3, r3, lr
 8007c46:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 8007c4a:	ea43 030c 	orr.w	r3, r3, ip
 8007c4e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8007c52:	433b      	orrs	r3, r7
 8007c54:	4333      	orrs	r3, r6
 8007c56:	4313      	orrs	r3, r2
 8007c58:	6043      	str	r3, [r0, #4]
 8007c5a:	e7e5      	b.n	8007c28 <FMC_SDRAM_Init+0x42>

08007c5c <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8007c5c:	68cb      	ldr	r3, [r1, #12]
 8007c5e:	f103 3cff 	add.w	ip, r3, #4294967295
 8007c62:	694b      	ldr	r3, [r1, #20]
{
 8007c64:	b5f0      	push	{r4, r5, r6, r7, lr}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8007c66:	3b01      	subs	r3, #1
 8007c68:	680f      	ldr	r7, [r1, #0]
 8007c6a:	684c      	ldr	r4, [r1, #4]
 8007c6c:	688e      	ldr	r6, [r1, #8]
 8007c6e:	051b      	lsls	r3, r3, #20
 8007c70:	690d      	ldr	r5, [r1, #16]
 8007c72:	3c01      	subs	r4, #1
 8007c74:	6989      	ldr	r1, [r1, #24]
 8007c76:	3e01      	subs	r6, #1
 8007c78:	3d01      	subs	r5, #1
 8007c7a:	3f01      	subs	r7, #1
 8007c7c:	3901      	subs	r1, #1
 8007c7e:	0124      	lsls	r4, r4, #4
 8007c80:	0236      	lsls	r6, r6, #8
 8007c82:	042d      	lsls	r5, r5, #16
 8007c84:	0609      	lsls	r1, r1, #24
 8007c86:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
  if (Bank == FMC_SDRAM_BANK1)
 8007c8a:	b95a      	cbnz	r2, 8007ca4 <FMC_SDRAM_Timing_Init+0x48>
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8007c8c:	433b      	orrs	r3, r7
 8007c8e:	6882      	ldr	r2, [r0, #8]
 8007c90:	4323      	orrs	r3, r4
 8007c92:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 8007c96:	4333      	orrs	r3, r6
 8007c98:	432b      	orrs	r3, r5
 8007c9a:	430b      	orrs	r3, r1
 8007c9c:	4313      	orrs	r3, r2
 8007c9e:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
}
 8007ca0:	2000      	movs	r0, #0
 8007ca2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8007ca4:	6882      	ldr	r2, [r0, #8]
 8007ca6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8007caa:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 8007cae:	431a      	orrs	r2, r3
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8007cb0:	ea44 0306 	orr.w	r3, r4, r6
 8007cb4:	433b      	orrs	r3, r7
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8007cb6:	6082      	str	r2, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8007cb8:	68c2      	ldr	r2, [r0, #12]
 8007cba:	432b      	orrs	r3, r5
 8007cbc:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 8007cc0:	430b      	orrs	r3, r1
 8007cc2:	4313      	orrs	r3, r2
 8007cc4:	60c3      	str	r3, [r0, #12]
 8007cc6:	e7eb      	b.n	8007ca0 <FMC_SDRAM_Timing_Init+0x44>

08007cc8 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8007cc8:	b084      	sub	sp, #16
 8007cca:	b510      	push	{r4, lr}
 8007ccc:	ac03      	add	r4, sp, #12
 8007cce:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8007cd2:	9b03      	ldr	r3, [sp, #12]
             Init.HardwareFlowControl | \
             Init.ClockDiv
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8007cd4:	6841      	ldr	r1, [r0, #4]
  tmpreg |= (Init.ClockEdge           | \
 8007cd6:	4313      	orrs	r3, r2
             Init.ClockPowerSave      | \
 8007cd8:	9a05      	ldr	r2, [sp, #20]
 8007cda:	4313      	orrs	r3, r2
             Init.BusWide             | \
 8007cdc:	9a06      	ldr	r2, [sp, #24]
 8007cde:	4313      	orrs	r3, r2
             Init.HardwareFlowControl | \
 8007ce0:	9a07      	ldr	r2, [sp, #28]
 8007ce2:	4313      	orrs	r3, r2
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8007ce4:	4a04      	ldr	r2, [pc, #16]	; (8007cf8 <SDMMC_Init+0x30>)
 8007ce6:	400a      	ands	r2, r1

  return HAL_OK;
}
 8007ce8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8007cec:	4313      	orrs	r3, r2
}
 8007cee:	b004      	add	sp, #16
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8007cf0:	6043      	str	r3, [r0, #4]
}
 8007cf2:	2000      	movs	r0, #0
 8007cf4:	4770      	bx	lr
 8007cf6:	bf00      	nop
 8007cf8:	ffc02c00 	.word	0xffc02c00

08007cfc <SDMMC_ReadFIFO>:
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8007cfc:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
}
 8007d00:	4770      	bx	lr

08007d02 <SDMMC_PowerState_ON>:
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8007d02:	6803      	ldr	r3, [r0, #0]
 8007d04:	f043 0303 	orr.w	r3, r3, #3
 8007d08:	6003      	str	r3, [r0, #0]

  return HAL_OK;
}
 8007d0a:	2000      	movs	r0, #0
 8007d0c:	4770      	bx	lr

08007d0e <SDMMC_GetPowerState>:
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8007d0e:	6800      	ldr	r0, [r0, #0]
}
 8007d10:	f000 0003 	and.w	r0, r0, #3
 8007d14:	4770      	bx	lr
	...

08007d18 <SDMMC_SendCommand>:
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8007d18:	680b      	ldr	r3, [r1, #0]
{
 8007d1a:	b510      	push	{r4, lr}
  SDMMCx->ARG = Command->Argument;
 8007d1c:	6083      	str	r3, [r0, #8]
                       Command->Response         | \
                       Command->WaitForInterrupt | \
                       Command->CPSM);

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007d1e:	68c4      	ldr	r4, [r0, #12]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8007d20:	e9d1 3201 	ldrd	r3, r2, [r1, #4]
 8007d24:	4313      	orrs	r3, r2
                       Command->Response         | \
 8007d26:	68ca      	ldr	r2, [r1, #12]
 8007d28:	4313      	orrs	r3, r2
                       Command->WaitForInterrupt | \
 8007d2a:	690a      	ldr	r2, [r1, #16]
 8007d2c:	4313      	orrs	r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007d2e:	4a03      	ldr	r2, [pc, #12]	; (8007d3c <SDMMC_SendCommand+0x24>)
 8007d30:	4022      	ands	r2, r4
 8007d32:	4313      	orrs	r3, r2
 8007d34:	60c3      	str	r3, [r0, #12]

  return HAL_OK;
}
 8007d36:	2000      	movs	r0, #0
 8007d38:	bd10      	pop	{r4, pc}
 8007d3a:	bf00      	nop
 8007d3c:	fffee0c0 	.word	0xfffee0c0

08007d40 <SDMMC_GetResponse>:

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8007d40:	3014      	adds	r0, #20

  return (*(__IO uint32_t *) tmp);
 8007d42:	5840      	ldr	r0, [r0, r1]
}
 8007d44:	4770      	bx	lr

08007d46 <SDMMC_ConfigData>:
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8007d46:	680b      	ldr	r3, [r1, #0]
{
 8007d48:	b510      	push	{r4, lr}
  SDMMCx->DTIMER = Data->DataTimeOut;
 8007d4a:	6243      	str	r3, [r0, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8007d4c:	684b      	ldr	r3, [r1, #4]
 8007d4e:	6283      	str	r3, [r0, #40]	; 0x28
                       Data->TransferDir   | \
                       Data->TransferMode  | \
                       Data->DPSM);

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8007d50:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8007d52:	e9d1 3402 	ldrd	r3, r4, [r1, #8]
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8007d56:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8007d5a:	4323      	orrs	r3, r4
                       Data->TransferDir   | \
 8007d5c:	690c      	ldr	r4, [r1, #16]
                       Data->TransferMode  | \
 8007d5e:	6949      	ldr	r1, [r1, #20]
                       Data->TransferDir   | \
 8007d60:	4323      	orrs	r3, r4
                       Data->TransferMode  | \
 8007d62:	430b      	orrs	r3, r1
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8007d64:	4313      	orrs	r3, r2
 8007d66:	62c3      	str	r3, [r0, #44]	; 0x2c

  return HAL_OK;

}
 8007d68:	2000      	movs	r0, #0
 8007d6a:	bd10      	pop	{r4, pc}

08007d6c <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8007d6c:	b510      	push	{r4, lr}
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8007d6e:	2300      	movs	r3, #0
{
 8007d70:	b086      	sub	sp, #24
 8007d72:	4604      	mov	r4, r0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007d74:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8007d76:	e9cd 3301 	strd	r3, r3, [sp, #4]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007d7a:	e9cd 3303 	strd	r3, r3, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007d7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007d82:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007d84:	f7ff ffc8 	bl	8007d18 <SDMMC_SendCommand>
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8007d88:	4b0a      	ldr	r3, [pc, #40]	; (8007db4 <SDMMC_CmdGoIdleState+0x48>)
 8007d8a:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	fbb3 f3f2 	udiv	r3, r3, r2
 8007d94:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d98:	4353      	muls	r3, r2

  do
  {
    if (count-- == 0U)
 8007d9a:	3b01      	subs	r3, #1
 8007d9c:	d307      	bcc.n	8007dae <SDMMC_CmdGoIdleState+0x42>
    {
      return SDMMC_ERROR_TIMEOUT;
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8007d9e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8007da0:	0612      	lsls	r2, r2, #24
 8007da2:	d5fa      	bpl.n	8007d9a <SDMMC_CmdGoIdleState+0x2e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007da4:	4b04      	ldr	r3, [pc, #16]	; (8007db8 <SDMMC_CmdGoIdleState+0x4c>)

  return SDMMC_ERROR_NONE;
 8007da6:	2000      	movs	r0, #0
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007da8:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8007daa:	b006      	add	sp, #24
 8007dac:	bd10      	pop	{r4, pc}
      return SDMMC_ERROR_TIMEOUT;
 8007dae:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  return errorstate;
 8007db2:	e7fa      	b.n	8007daa <SDMMC_CmdGoIdleState+0x3e>
 8007db4:	24000000 	.word	0x24000000
 8007db8:	002000c5 	.word	0x002000c5

08007dbc <SDMMC_GetCmdResp1>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8007dbc:	4b45      	ldr	r3, [pc, #276]	; (8007ed4 <SDMMC_GetCmdResp1+0x118>)
{
 8007dbe:	b510      	push	{r4, lr}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8007dc0:	681b      	ldr	r3, [r3, #0]
{
 8007dc2:	4604      	mov	r4, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8007dc4:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8007dc8:	fbb3 f3f0 	udiv	r3, r3, r0
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8007dcc:	4842      	ldr	r0, [pc, #264]	; (8007ed8 <SDMMC_GetCmdResp1+0x11c>)
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8007dce:	435a      	muls	r2, r3
    if (count-- == 0U)
 8007dd0:	2a00      	cmp	r2, #0
 8007dd2:	d048      	beq.n	8007e66 <SDMMC_GetCmdResp1+0xaa>
    sta_reg = SDMMCx->STA;
 8007dd4:	6b63      	ldr	r3, [r4, #52]	; 0x34
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8007dd6:	4203      	tst	r3, r0
 8007dd8:	d007      	beq.n	8007dea <SDMMC_GetCmdResp1+0x2e>
 8007dda:	049b      	lsls	r3, r3, #18
 8007ddc:	d405      	bmi.n	8007dea <SDMMC_GetCmdResp1+0x2e>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007dde:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007de0:	0758      	lsls	r0, r3, #29
 8007de2:	d504      	bpl.n	8007dee <SDMMC_GetCmdResp1+0x32>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007de4:	2004      	movs	r0, #4
 8007de6:	63a0      	str	r0, [r4, #56]	; 0x38
}
 8007de8:	bd10      	pop	{r4, pc}
 8007dea:	3a01      	subs	r2, #1
 8007dec:	e7f0      	b.n	8007dd0 <SDMMC_GetCmdResp1+0x14>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007dee:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8007df0:	f010 0001 	ands.w	r0, r0, #1
 8007df4:	d002      	beq.n	8007dfc <SDMMC_GetCmdResp1+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007df6:	2301      	movs	r3, #1
 8007df8:	63a3      	str	r3, [r4, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007dfa:	e7f5      	b.n	8007de8 <SDMMC_GetCmdResp1+0x2c>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007dfc:	4b37      	ldr	r3, [pc, #220]	; (8007edc <SDMMC_GetCmdResp1+0x120>)
 8007dfe:	63a3      	str	r3, [r4, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8007e00:	6923      	ldr	r3, [r4, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8007e02:	b2db      	uxtb	r3, r3
 8007e04:	4299      	cmp	r1, r3
 8007e06:	d131      	bne.n	8007e6c <SDMMC_GetCmdResp1+0xb0>
  return (*(__IO uint32_t *) tmp);
 8007e08:	6963      	ldr	r3, [r4, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8007e0a:	4835      	ldr	r0, [pc, #212]	; (8007ee0 <SDMMC_GetCmdResp1+0x124>)
 8007e0c:	4018      	ands	r0, r3
 8007e0e:	2800      	cmp	r0, #0
 8007e10:	d0ea      	beq.n	8007de8 <SDMMC_GetCmdResp1+0x2c>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	db2c      	blt.n	8007e70 <SDMMC_GetCmdResp1+0xb4>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8007e16:	005a      	lsls	r2, r3, #1
 8007e18:	d42d      	bmi.n	8007e76 <SDMMC_GetCmdResp1+0xba>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8007e1a:	009c      	lsls	r4, r3, #2
 8007e1c:	d42d      	bmi.n	8007e7a <SDMMC_GetCmdResp1+0xbe>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8007e1e:	00d9      	lsls	r1, r3, #3
 8007e20:	d42d      	bmi.n	8007e7e <SDMMC_GetCmdResp1+0xc2>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8007e22:	011a      	lsls	r2, r3, #4
 8007e24:	d42e      	bmi.n	8007e84 <SDMMC_GetCmdResp1+0xc8>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8007e26:	015c      	lsls	r4, r3, #5
 8007e28:	d42f      	bmi.n	8007e8a <SDMMC_GetCmdResp1+0xce>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8007e2a:	01d9      	lsls	r1, r3, #7
 8007e2c:	d430      	bmi.n	8007e90 <SDMMC_GetCmdResp1+0xd4>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8007e2e:	021a      	lsls	r2, r3, #8
 8007e30:	d431      	bmi.n	8007e96 <SDMMC_GetCmdResp1+0xda>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8007e32:	025c      	lsls	r4, r3, #9
 8007e34:	d432      	bmi.n	8007e9c <SDMMC_GetCmdResp1+0xe0>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8007e36:	0299      	lsls	r1, r3, #10
 8007e38:	d433      	bmi.n	8007ea2 <SDMMC_GetCmdResp1+0xe6>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8007e3a:	02da      	lsls	r2, r3, #11
 8007e3c:	d434      	bmi.n	8007ea8 <SDMMC_GetCmdResp1+0xec>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8007e3e:	035c      	lsls	r4, r3, #13
 8007e40:	d435      	bmi.n	8007eae <SDMMC_GetCmdResp1+0xf2>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8007e42:	0399      	lsls	r1, r3, #14
 8007e44:	d436      	bmi.n	8007eb4 <SDMMC_GetCmdResp1+0xf8>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8007e46:	03da      	lsls	r2, r3, #15
 8007e48:	d437      	bmi.n	8007eba <SDMMC_GetCmdResp1+0xfe>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8007e4a:	041c      	lsls	r4, r3, #16
 8007e4c:	d438      	bmi.n	8007ec0 <SDMMC_GetCmdResp1+0x104>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8007e4e:	0459      	lsls	r1, r3, #17
 8007e50:	d439      	bmi.n	8007ec6 <SDMMC_GetCmdResp1+0x10a>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8007e52:	049a      	lsls	r2, r3, #18
 8007e54:	d43a      	bmi.n	8007ecc <SDMMC_GetCmdResp1+0x110>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007e56:	f013 0f08 	tst.w	r3, #8
 8007e5a:	bf14      	ite	ne
 8007e5c:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 8007e60:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 8007e64:	e7c0      	b.n	8007de8 <SDMMC_GetCmdResp1+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 8007e66:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8007e6a:	e7bd      	b.n	8007de8 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007e6c:	2001      	movs	r0, #1
 8007e6e:	e7bb      	b.n	8007de8 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8007e70:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8007e74:	e7b8      	b.n	8007de8 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8007e76:	2040      	movs	r0, #64	; 0x40
 8007e78:	e7b6      	b.n	8007de8 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8007e7a:	2080      	movs	r0, #128	; 0x80
 8007e7c:	e7b4      	b.n	8007de8 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8007e7e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8007e82:	e7b1      	b.n	8007de8 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8007e84:	f44f 7000 	mov.w	r0, #512	; 0x200
 8007e88:	e7ae      	b.n	8007de8 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8007e8a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8007e8e:	e7ab      	b.n	8007de8 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8007e90:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8007e94:	e7a8      	b.n	8007de8 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007e96:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8007e9a:	e7a5      	b.n	8007de8 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007e9c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8007ea0:	e7a2      	b.n	8007de8 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8007ea2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8007ea6:	e79f      	b.n	8007de8 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CC_ERR;
 8007ea8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8007eac:	e79c      	b.n	8007de8 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8007eae:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8007eb2:	e799      	b.n	8007de8 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8007eb4:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8007eb8:	e796      	b.n	8007de8 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8007eba:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8007ebe:	e793      	b.n	8007de8 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8007ec0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8007ec4:	e790      	b.n	8007de8 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8007ec6:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8007eca:	e78d      	b.n	8007de8 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ERASE_RESET;
 8007ecc:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8007ed0:	e78a      	b.n	8007de8 <SDMMC_GetCmdResp1+0x2c>
 8007ed2:	bf00      	nop
 8007ed4:	24000000 	.word	0x24000000
 8007ed8:	00200045 	.word	0x00200045
 8007edc:	002000c5 	.word	0x002000c5
 8007ee0:	fdffe008 	.word	0xfdffe008

08007ee4 <SDMMC_CmdBlockLength>:
{
 8007ee4:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007ee6:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 8007eea:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007eec:	2510      	movs	r5, #16
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007eee:	2200      	movs	r2, #0
{
 8007ef0:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8007ef2:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007ef4:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007ef6:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007efa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007efe:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007f02:	f7ff ff09 	bl	8007d18 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8007f06:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f0a:	4629      	mov	r1, r5
 8007f0c:	4620      	mov	r0, r4
 8007f0e:	f7ff ff55 	bl	8007dbc <SDMMC_GetCmdResp1>
}
 8007f12:	b007      	add	sp, #28
 8007f14:	bd30      	pop	{r4, r5, pc}

08007f16 <SDMMC_CmdSelDesel>:
{
 8007f16:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007f18:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 8007f1c:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007f1e:	2507      	movs	r5, #7
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007f20:	2200      	movs	r2, #0
{
 8007f22:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8007f24:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007f26:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007f28:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007f2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007f30:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007f34:	f7ff fef0 	bl	8007d18 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8007f38:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f3c:	4629      	mov	r1, r5
 8007f3e:	4620      	mov	r0, r4
 8007f40:	f7ff ff3c 	bl	8007dbc <SDMMC_GetCmdResp1>
}
 8007f44:	b007      	add	sp, #28
 8007f46:	bd30      	pop	{r4, r5, pc}

08007f48 <SDMMC_CmdBusWidth>:
{
 8007f48:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007f4a:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 8007f4e:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007f50:	2506      	movs	r5, #6
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007f52:	2200      	movs	r2, #0
{
 8007f54:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8007f56:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007f58:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007f5a:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007f5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007f62:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007f66:	f7ff fed7 	bl	8007d18 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8007f6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f6e:	4629      	mov	r1, r5
 8007f70:	4620      	mov	r0, r4
 8007f72:	f7ff ff23 	bl	8007dbc <SDMMC_GetCmdResp1>
}
 8007f76:	b007      	add	sp, #28
 8007f78:	bd30      	pop	{r4, r5, pc}

08007f7a <SDMMC_CmdSwitch>:
 8007f7a:	f7ff bfe5 	b.w	8007f48 <SDMMC_CmdBusWidth>

08007f7e <SDMMC_CmdSetRelAddMmc>:
{
 8007f7e:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007f80:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 8007f84:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007f86:	2503      	movs	r5, #3
  sdmmc_cmdinit.Argument         = ((uint32_t)RCA << 16U);
 8007f88:	0409      	lsls	r1, r1, #16
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007f8a:	2200      	movs	r2, #0
{
 8007f8c:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = ((uint32_t)RCA << 16U);
 8007f8e:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007f90:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007f92:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007f96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007f9a:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007f9e:	f7ff febb 	bl	8007d18 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_REL_ADDR, SDMMC_CMDTIMEOUT);
 8007fa2:	f241 3288 	movw	r2, #5000	; 0x1388
 8007fa6:	4629      	mov	r1, r5
 8007fa8:	4620      	mov	r0, r4
 8007faa:	f7ff ff07 	bl	8007dbc <SDMMC_GetCmdResp1>
}
 8007fae:	b007      	add	sp, #28
 8007fb0:	bd30      	pop	{r4, r5, pc}

08007fb2 <SDMMC_CmdSendStatus>:
{
 8007fb2:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007fb4:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 8007fb8:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007fba:	250d      	movs	r5, #13
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007fbc:	2200      	movs	r2, #0
{
 8007fbe:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 8007fc0:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007fc2:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007fc4:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007fc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007fcc:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007fd0:	f7ff fea2 	bl	8007d18 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8007fd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8007fd8:	4629      	mov	r1, r5
 8007fda:	4620      	mov	r0, r4
 8007fdc:	f7ff feee 	bl	8007dbc <SDMMC_GetCmdResp1>
}
 8007fe0:	b007      	add	sp, #28
 8007fe2:	bd30      	pop	{r4, r5, pc}

08007fe4 <SDMMC_CmdSendEXTCSD>:
{
 8007fe4:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007fe6:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 8007fea:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007fec:	2508      	movs	r5, #8
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007fee:	2200      	movs	r2, #0
{
 8007ff0:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 8007ff2:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007ff4:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007ff6:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007ffa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007ffe:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008002:	f7ff fe89 	bl	8007d18 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_HS_SEND_EXT_CSD, SDMMC_CMDTIMEOUT);
 8008006:	f241 3288 	movw	r2, #5000	; 0x1388
 800800a:	4629      	mov	r1, r5
 800800c:	4620      	mov	r0, r4
 800800e:	f7ff fed5 	bl	8007dbc <SDMMC_GetCmdResp1>
}
 8008012:	b007      	add	sp, #28
 8008014:	bd30      	pop	{r4, r5, pc}
	...

08008018 <SDMMC_GetCmdResp2>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8008018:	4b11      	ldr	r3, [pc, #68]	; (8008060 <SDMMC_GetCmdResp2+0x48>)
 800801a:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
{
 800801e:	4602      	mov	r2, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	fbb3 f3f1 	udiv	r3, r3, r1
 8008026:	f241 3188 	movw	r1, #5000	; 0x1388
 800802a:	434b      	muls	r3, r1
    if (count-- == 0U)
 800802c:	3b01      	subs	r3, #1
 800802e:	d313      	bcc.n	8008058 <SDMMC_GetCmdResp2+0x40>
    sta_reg = SDMMCx->STA;
 8008030:	6b51      	ldr	r1, [r2, #52]	; 0x34
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8008032:	f011 0f45 	tst.w	r1, #69	; 0x45
 8008036:	d0f9      	beq.n	800802c <SDMMC_GetCmdResp2+0x14>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008038:	0489      	lsls	r1, r1, #18
 800803a:	d4f7      	bmi.n	800802c <SDMMC_GetCmdResp2+0x14>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800803c:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800803e:	075b      	lsls	r3, r3, #29
 8008040:	d502      	bpl.n	8008048 <SDMMC_GetCmdResp2+0x30>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008042:	2004      	movs	r0, #4
 8008044:	6390      	str	r0, [r2, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008046:	4770      	bx	lr
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008048:	6b50      	ldr	r0, [r2, #52]	; 0x34
 800804a:	f010 0001 	ands.w	r0, r0, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800804e:	bf14      	ite	ne
 8008050:	2301      	movne	r3, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008052:	4b04      	ldreq	r3, [pc, #16]	; (8008064 <SDMMC_GetCmdResp2+0x4c>)
 8008054:	6393      	str	r3, [r2, #56]	; 0x38
  return SDMMC_ERROR_NONE;
 8008056:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8008058:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800805c:	4770      	bx	lr
 800805e:	bf00      	nop
 8008060:	24000000 	.word	0x24000000
 8008064:	002000c5 	.word	0x002000c5

08008068 <SDMMC_CmdSendCID>:
{
 8008068:	b510      	push	{r4, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800806a:	2300      	movs	r3, #0
{
 800806c:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800806e:	2202      	movs	r2, #2
{
 8008070:	4604      	mov	r4, r0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008072:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8008074:	e9cd 3201 	strd	r3, r2, [sp, #4]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8008078:	f44f 7240 	mov.w	r2, #768	; 0x300
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800807c:	e9cd 2303 	strd	r2, r3, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008080:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008084:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008086:	f7ff fe47 	bl	8007d18 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800808a:	4620      	mov	r0, r4
 800808c:	f7ff ffc4 	bl	8008018 <SDMMC_GetCmdResp2>
}
 8008090:	b006      	add	sp, #24
 8008092:	bd10      	pop	{r4, pc}

08008094 <SDMMC_CmdSendCSD>:
{
 8008094:	b510      	push	{r4, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8008096:	2209      	movs	r2, #9
{
 8008098:	b086      	sub	sp, #24
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800809a:	f44f 7340 	mov.w	r3, #768	; 0x300
{
 800809e:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 80080a0:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80080a2:	2100      	movs	r1, #0
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80080a4:	e9cd 2302 	strd	r2, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80080a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80080ac:	e9cd 1304 	strd	r1, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80080b0:	a901      	add	r1, sp, #4
 80080b2:	f7ff fe31 	bl	8007d18 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80080b6:	4620      	mov	r0, r4
 80080b8:	f7ff ffae 	bl	8008018 <SDMMC_GetCmdResp2>
}
 80080bc:	b006      	add	sp, #24
 80080be:	bd10      	pop	{r4, pc}

080080c0 <SDMMC_GetCmdResp3>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80080c0:	4b0f      	ldr	r3, [pc, #60]	; (8008100 <SDMMC_GetCmdResp3+0x40>)
 80080c2:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
{
 80080c6:	4602      	mov	r2, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80080ce:	f241 3188 	movw	r1, #5000	; 0x1388
 80080d2:	434b      	muls	r3, r1
    if (count-- == 0U)
 80080d4:	3b01      	subs	r3, #1
 80080d6:	d30f      	bcc.n	80080f8 <SDMMC_GetCmdResp3+0x38>
    sta_reg = SDMMCx->STA;
 80080d8:	6b51      	ldr	r1, [r2, #52]	; 0x34
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80080da:	f011 0f45 	tst.w	r1, #69	; 0x45
 80080de:	d0f9      	beq.n	80080d4 <SDMMC_GetCmdResp3+0x14>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80080e0:	0489      	lsls	r1, r1, #18
 80080e2:	d4f7      	bmi.n	80080d4 <SDMMC_GetCmdResp3+0x14>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80080e4:	6b50      	ldr	r0, [r2, #52]	; 0x34
 80080e6:	f010 0004 	ands.w	r0, r0, #4
 80080ea:	d002      	beq.n	80080f2 <SDMMC_GetCmdResp3+0x32>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80080ec:	2004      	movs	r0, #4
 80080ee:	6390      	str	r0, [r2, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80080f0:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80080f2:	4b04      	ldr	r3, [pc, #16]	; (8008104 <SDMMC_GetCmdResp3+0x44>)
 80080f4:	6393      	str	r3, [r2, #56]	; 0x38
  return SDMMC_ERROR_NONE;
 80080f6:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 80080f8:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 80080fc:	4770      	bx	lr
 80080fe:	bf00      	nop
 8008100:	24000000 	.word	0x24000000
 8008104:	002000c5 	.word	0x002000c5

08008108 <SDMMC_CmdOpCondition>:
{
 8008108:	b510      	push	{r4, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800810a:	2201      	movs	r2, #1
{
 800810c:	b086      	sub	sp, #24
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800810e:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 8008112:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 8008114:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008116:	2100      	movs	r1, #0
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008118:	e9cd 2302 	strd	r2, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800811c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008120:	e9cd 1304 	strd	r1, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008124:	a901      	add	r1, sp, #4
 8008126:	f7ff fdf7 	bl	8007d18 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800812a:	4620      	mov	r0, r4
 800812c:	f7ff ffc8 	bl	80080c0 <SDMMC_GetCmdResp3>
}
 8008130:	b006      	add	sp, #24
 8008132:	bd10      	pop	{r4, pc}

08008134 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008134:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8008136:	2300      	movs	r3, #0
  /* Wait for AHB master IDLE state. */
  do
  {
    count++;

    if (count > 200000U)
 8008138:	4a10      	ldr	r2, [pc, #64]	; (800817c <USB_CoreReset+0x48>)
  __IO uint32_t count = 0U;
 800813a:	9301      	str	r3, [sp, #4]
    count++;
 800813c:	9b01      	ldr	r3, [sp, #4]
 800813e:	3301      	adds	r3, #1
 8008140:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8008142:	9b01      	ldr	r3, [sp, #4]
 8008144:	4293      	cmp	r3, r2
 8008146:	d816      	bhi.n	8008176 <USB_CoreReset+0x42>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008148:	6903      	ldr	r3, [r0, #16]
 800814a:	2b00      	cmp	r3, #0
 800814c:	daf6      	bge.n	800813c <USB_CoreReset+0x8>

  /* Core Soft Reset */
  count = 0U;
 800814e:	2300      	movs	r3, #0

  do
  {
    count++;

    if (count > 200000U)
 8008150:	4a0a      	ldr	r2, [pc, #40]	; (800817c <USB_CoreReset+0x48>)
  count = 0U;
 8008152:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008154:	6903      	ldr	r3, [r0, #16]
 8008156:	f043 0301 	orr.w	r3, r3, #1
 800815a:	6103      	str	r3, [r0, #16]
    count++;
 800815c:	9b01      	ldr	r3, [sp, #4]
 800815e:	3301      	adds	r3, #1
 8008160:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8008162:	9b01      	ldr	r3, [sp, #4]
 8008164:	4293      	cmp	r3, r2
 8008166:	d806      	bhi.n	8008176 <USB_CoreReset+0x42>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008168:	6903      	ldr	r3, [r0, #16]
 800816a:	f013 0301 	ands.w	r3, r3, #1
 800816e:	d1f5      	bne.n	800815c <USB_CoreReset+0x28>

  return HAL_OK;
 8008170:	4618      	mov	r0, r3
}
 8008172:	b002      	add	sp, #8
 8008174:	4770      	bx	lr
      return HAL_TIMEOUT;
 8008176:	2003      	movs	r0, #3
 8008178:	e7fb      	b.n	8008172 <USB_CoreReset+0x3e>
 800817a:	bf00      	nop
 800817c:	00030d40 	.word	0x00030d40

08008180 <USB_CoreInit>:
{
 8008180:	b084      	sub	sp, #16
 8008182:	b538      	push	{r3, r4, r5, lr}
 8008184:	ad05      	add	r5, sp, #20
 8008186:	4604      	mov	r4, r0
 8008188:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800818c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800818e:	2b01      	cmp	r3, #1
 8008190:	d12f      	bne.n	80081f2 <USB_CoreInit+0x72>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008192:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8008194:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008198:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800819a:	68c3      	ldr	r3, [r0, #12]
 800819c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80081a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80081a4:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80081a6:	68c3      	ldr	r3, [r0, #12]
 80081a8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80081ac:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 80081ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80081b0:	2b01      	cmp	r3, #1
 80081b2:	d103      	bne.n	80081bc <USB_CoreInit+0x3c>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80081b4:	68c3      	ldr	r3, [r0, #12]
 80081b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80081ba:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 80081bc:	4620      	mov	r0, r4
 80081be:	f7ff ffb9 	bl	8008134 <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 80081c2:	9b07      	ldr	r3, [sp, #28]
 80081c4:	2b01      	cmp	r3, #1
 80081c6:	d110      	bne.n	80081ea <USB_CoreInit+0x6a>
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80081c8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80081ca:	b29b      	uxth	r3, r3
 80081cc:	65e3      	str	r3, [r4, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80081ce:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80081d0:	f043 737b 	orr.w	r3, r3, #65798144	; 0x3ec0000
 80081d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80081d8:	65e3      	str	r3, [r4, #92]	; 0x5c
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80081da:	68a3      	ldr	r3, [r4, #8]
 80081dc:	f043 0306 	orr.w	r3, r3, #6
 80081e0:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80081e2:	68a3      	ldr	r3, [r4, #8]
 80081e4:	f043 0320 	orr.w	r3, r3, #32
 80081e8:	60a3      	str	r3, [r4, #8]
}
 80081ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80081ee:	b004      	add	sp, #16
 80081f0:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80081f2:	68c3      	ldr	r3, [r0, #12]
 80081f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80081f8:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 80081fa:	f7ff ff9b 	bl	8008134 <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 80081fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008200:	b923      	cbnz	r3, 800820c <USB_CoreInit+0x8c>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008202:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008204:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008208:	63a3      	str	r3, [r4, #56]	; 0x38
 800820a:	e7da      	b.n	80081c2 <USB_CoreInit+0x42>
 800820c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800820e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008212:	e7f9      	b.n	8008208 <USB_CoreInit+0x88>

08008214 <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008214:	6883      	ldr	r3, [r0, #8]
 8008216:	f023 0301 	bic.w	r3, r3, #1
 800821a:	6083      	str	r3, [r0, #8]
}
 800821c:	2000      	movs	r0, #0
 800821e:	4770      	bx	lr

08008220 <USB_SetCurrentMode>:
{
 8008220:	b538      	push	{r3, r4, r5, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008222:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8008224:	2901      	cmp	r1, #1
{
 8008226:	4605      	mov	r5, r0
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008228:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800822c:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800822e:	d10f      	bne.n	8008250 <USB_SetCurrentMode+0x30>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008230:	68c3      	ldr	r3, [r0, #12]
  uint32_t ms = 0U;
 8008232:	2400      	movs	r4, #0
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008234:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008238:	60c3      	str	r3, [r0, #12]
      HAL_Delay(1U);
 800823a:	2001      	movs	r0, #1
      ms++;
 800823c:	3401      	adds	r4, #1
      HAL_Delay(1U);
 800823e:	f7fa fb9b 	bl	8002978 <HAL_Delay>
  return ((USBx->GINTSTS) & 0x1U);
 8008242:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008244:	07d9      	lsls	r1, r3, #31
 8008246:	d414      	bmi.n	8008272 <USB_SetCurrentMode+0x52>
 8008248:	2c32      	cmp	r4, #50	; 0x32
 800824a:	d1f6      	bne.n	800823a <USB_SetCurrentMode+0x1a>
    return HAL_ERROR;
 800824c:	2001      	movs	r0, #1
}
 800824e:	bd38      	pop	{r3, r4, r5, pc}
  else if (mode == USB_DEVICE_MODE)
 8008250:	2900      	cmp	r1, #0
 8008252:	d1fb      	bne.n	800824c <USB_SetCurrentMode+0x2c>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008254:	68c3      	ldr	r3, [r0, #12]
  uint32_t ms = 0U;
 8008256:	460c      	mov	r4, r1
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008258:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800825c:	60c3      	str	r3, [r0, #12]
      HAL_Delay(1U);
 800825e:	2001      	movs	r0, #1
      ms++;
 8008260:	3401      	adds	r4, #1
      HAL_Delay(1U);
 8008262:	f7fa fb89 	bl	8002978 <HAL_Delay>
  return ((USBx->GINTSTS) & 0x1U);
 8008266:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008268:	07da      	lsls	r2, r3, #31
 800826a:	d502      	bpl.n	8008272 <USB_SetCurrentMode+0x52>
 800826c:	2c32      	cmp	r4, #50	; 0x32
 800826e:	d1f6      	bne.n	800825e <USB_SetCurrentMode+0x3e>
 8008270:	e7ec      	b.n	800824c <USB_SetCurrentMode+0x2c>
    return HAL_ERROR;
 8008272:	f1a4 0332 	sub.w	r3, r4, #50	; 0x32
 8008276:	4258      	negs	r0, r3
 8008278:	4158      	adcs	r0, r3
 800827a:	e7e8      	b.n	800824e <USB_SetCurrentMode+0x2e>

0800827c <USB_FlushTxFifo>:
{
 800827c:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 800827e:	2300      	movs	r3, #0
    if (count > 200000U)
 8008280:	4a10      	ldr	r2, [pc, #64]	; (80082c4 <USB_FlushTxFifo+0x48>)
  __IO uint32_t count = 0U;
 8008282:	9301      	str	r3, [sp, #4]
    count++;
 8008284:	9b01      	ldr	r3, [sp, #4]
 8008286:	3301      	adds	r3, #1
 8008288:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 800828a:	9b01      	ldr	r3, [sp, #4]
 800828c:	4293      	cmp	r3, r2
 800828e:	d816      	bhi.n	80082be <USB_FlushTxFifo+0x42>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008290:	6903      	ldr	r3, [r0, #16]
 8008292:	2b00      	cmp	r3, #0
 8008294:	daf6      	bge.n	8008284 <USB_FlushTxFifo+0x8>
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008296:	0189      	lsls	r1, r1, #6
  count = 0U;
 8008298:	2300      	movs	r3, #0
    if (count > 200000U)
 800829a:	4a0a      	ldr	r2, [pc, #40]	; (80082c4 <USB_FlushTxFifo+0x48>)
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800829c:	f041 0120 	orr.w	r1, r1, #32
  count = 0U;
 80082a0:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80082a2:	6101      	str	r1, [r0, #16]
    count++;
 80082a4:	9b01      	ldr	r3, [sp, #4]
 80082a6:	3301      	adds	r3, #1
 80082a8:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 80082aa:	9b01      	ldr	r3, [sp, #4]
 80082ac:	4293      	cmp	r3, r2
 80082ae:	d806      	bhi.n	80082be <USB_FlushTxFifo+0x42>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80082b0:	6903      	ldr	r3, [r0, #16]
 80082b2:	f013 0320 	ands.w	r3, r3, #32
 80082b6:	d1f5      	bne.n	80082a4 <USB_FlushTxFifo+0x28>
  return HAL_OK;
 80082b8:	4618      	mov	r0, r3
}
 80082ba:	b002      	add	sp, #8
 80082bc:	4770      	bx	lr
      return HAL_TIMEOUT;
 80082be:	2003      	movs	r0, #3
 80082c0:	e7fb      	b.n	80082ba <USB_FlushTxFifo+0x3e>
 80082c2:	bf00      	nop
 80082c4:	00030d40 	.word	0x00030d40

080082c8 <USB_FlushRxFifo>:
{
 80082c8:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 80082ca:	2300      	movs	r3, #0
    if (count > 200000U)
 80082cc:	4a0f      	ldr	r2, [pc, #60]	; (800830c <USB_FlushRxFifo+0x44>)
  __IO uint32_t count = 0U;
 80082ce:	9301      	str	r3, [sp, #4]
    count++;
 80082d0:	9b01      	ldr	r3, [sp, #4]
 80082d2:	3301      	adds	r3, #1
 80082d4:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 80082d6:	9b01      	ldr	r3, [sp, #4]
 80082d8:	4293      	cmp	r3, r2
 80082da:	d814      	bhi.n	8008306 <USB_FlushRxFifo+0x3e>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80082dc:	6903      	ldr	r3, [r0, #16]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	daf6      	bge.n	80082d0 <USB_FlushRxFifo+0x8>
  count = 0U;
 80082e2:	2300      	movs	r3, #0
    if (count > 200000U)
 80082e4:	4a09      	ldr	r2, [pc, #36]	; (800830c <USB_FlushRxFifo+0x44>)
  count = 0U;
 80082e6:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80082e8:	2310      	movs	r3, #16
 80082ea:	6103      	str	r3, [r0, #16]
    count++;
 80082ec:	9b01      	ldr	r3, [sp, #4]
 80082ee:	3301      	adds	r3, #1
 80082f0:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 80082f2:	9b01      	ldr	r3, [sp, #4]
 80082f4:	4293      	cmp	r3, r2
 80082f6:	d806      	bhi.n	8008306 <USB_FlushRxFifo+0x3e>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80082f8:	6903      	ldr	r3, [r0, #16]
 80082fa:	f013 0310 	ands.w	r3, r3, #16
 80082fe:	d1f5      	bne.n	80082ec <USB_FlushRxFifo+0x24>
  return HAL_OK;
 8008300:	4618      	mov	r0, r3
}
 8008302:	b002      	add	sp, #8
 8008304:	4770      	bx	lr
      return HAL_TIMEOUT;
 8008306:	2003      	movs	r0, #3
 8008308:	e7fb      	b.n	8008302 <USB_FlushRxFifo+0x3a>
 800830a:	bf00      	nop
 800830c:	00030d40 	.word	0x00030d40

08008310 <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 8008310:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8008314:	4319      	orrs	r1, r3
 8008316:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 800831a:	2000      	movs	r0, #0
 800831c:	4770      	bx	lr
	...

08008320 <USB_DevInit>:
{
 8008320:	b084      	sub	sp, #16
 8008322:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008326:	4604      	mov	r4, r0
 8008328:	a809      	add	r0, sp, #36	; 0x24
 800832a:	460e      	mov	r6, r1
 800832c:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 800832e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  for (i = 0U; i < 15U; i++)
 8008332:	2300      	movs	r3, #0
    USBx->DIEPTXF[i] = 0U;
 8008334:	4619      	mov	r1, r3
 8008336:	f103 0240 	add.w	r2, r3, #64	; 0x40
  for (i = 0U; i < 15U; i++)
 800833a:	3301      	adds	r3, #1
    USBx->DIEPTXF[i] = 0U;
 800833c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  for (i = 0U; i < 15U; i++)
 8008340:	2b0f      	cmp	r3, #15
    USBx->DIEPTXF[i] = 0U;
 8008342:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 8008344:	d1f7      	bne.n	8008336 <USB_DevInit+0x16>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008346:	f504 6700 	add.w	r7, r4, #2048	; 0x800
  if (cfg.vbus_sensing_enable == 0U)
 800834a:	2d00      	cmp	r5, #0
 800834c:	d16c      	bne.n	8008428 <USB_DevInit+0x108>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	f043 0302 	orr.w	r3, r3, #2
 8008354:	607b      	str	r3, [r7, #4]
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008356:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008358:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800835c:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800835e:	6823      	ldr	r3, [r4, #0]
 8008360:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008364:	6023      	str	r3, [r4, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008366:	6823      	ldr	r3, [r4, #0]
 8008368:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800836c:	6023      	str	r3, [r4, #0]
  USBx_PCGCCTL = 0U;
 800836e:	2300      	movs	r3, #0
 8008370:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008374:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 8008378:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800837c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800837e:	2b01      	cmp	r3, #1
 8008380:	d159      	bne.n	8008436 <USB_DevInit+0x116>
    if (cfg.speed == USBD_HS_SPEED)
 8008382:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008384:	2900      	cmp	r1, #0
 8008386:	d154      	bne.n	8008432 <USB_DevInit+0x112>
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008388:	4620      	mov	r0, r4
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800838a:	f64f 387f 	movw	r8, #64383	; 0xfb7f
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800838e:	f7ff ffbf 	bl	8008310 <USB_SetDevSpeed>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008392:	2110      	movs	r1, #16
 8008394:	4620      	mov	r0, r4
 8008396:	f7ff ff71 	bl	800827c <USB_FlushTxFifo>
 800839a:	4601      	mov	r1, r0
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800839c:	4620      	mov	r0, r4
 800839e:	f7ff ff93 	bl	80082c8 <USB_FlushRxFifo>
 80083a2:	4308      	orrs	r0, r1
  USBx_DEVICE->DIEPMSK = 0U;
 80083a4:	2300      	movs	r3, #0
 80083a6:	f504 6210 	add.w	r2, r4, #2304	; 0x900
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80083aa:	b2c0      	uxtb	r0, r0
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80083ac:	f04f 4c90 	mov.w	ip, #1207959552	; 0x48000000
      USBx_INEP(i)->DIEPCTL = 0U;
 80083b0:	4619      	mov	r1, r3
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80083b2:	f04f 6e00 	mov.w	lr, #134217728	; 0x8000000
    ret = HAL_ERROR;
 80083b6:	3800      	subs	r0, #0
  USBx_DEVICE->DIEPMSK = 0U;
 80083b8:	613b      	str	r3, [r7, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80083ba:	617b      	str	r3, [r7, #20]
    ret = HAL_ERROR;
 80083bc:	bf18      	it	ne
 80083be:	2001      	movne	r0, #1
  USBx_DEVICE->DAINTMSK = 0U;
 80083c0:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80083c2:	42b3      	cmp	r3, r6
 80083c4:	d139      	bne.n	800843a <USB_DevInit+0x11a>
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80083c6:	2200      	movs	r2, #0
 80083c8:	f504 6330 	add.w	r3, r4, #2816	; 0xb00
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80083cc:	f04f 4c90 	mov.w	ip, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80083d0:	f04f 6e00 	mov.w	lr, #134217728	; 0x8000000
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80083d4:	4611      	mov	r1, r2
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80083d6:	f64f 387f 	movw	r8, #64383	; 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80083da:	42b2      	cmp	r2, r6
 80083dc:	d140      	bne.n	8008460 <USB_DevInit+0x140>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80083de:	693b      	ldr	r3, [r7, #16]
 80083e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80083e4:	613b      	str	r3, [r7, #16]
  USBx->GINTMSK = 0U;
 80083e6:	2300      	movs	r3, #0
 80083e8:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 80083ea:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 80083ee:	6163      	str	r3, [r4, #20]
  if (cfg.dma_enable == 0U)
 80083f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80083f2:	b91b      	cbnz	r3, 80083fc <USB_DevInit+0xdc>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80083f4:	69a3      	ldr	r3, [r4, #24]
 80083f6:	f043 0310 	orr.w	r3, r3, #16
 80083fa:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80083fc:	69a2      	ldr	r2, [r4, #24]
 80083fe:	4b22      	ldr	r3, [pc, #136]	; (8008488 <USB_DevInit+0x168>)
 8008400:	4313      	orrs	r3, r2
 8008402:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 8008404:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008406:	b11b      	cbz	r3, 8008410 <USB_DevInit+0xf0>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008408:	69a3      	ldr	r3, [r4, #24]
 800840a:	f043 0308 	orr.w	r3, r3, #8
 800840e:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 8008410:	2d01      	cmp	r5, #1
 8008412:	d105      	bne.n	8008420 <USB_DevInit+0x100>
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008414:	69a3      	ldr	r3, [r4, #24]
 8008416:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800841a:	f043 0304 	orr.w	r3, r3, #4
 800841e:	61a3      	str	r3, [r4, #24]
}
 8008420:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008424:	b004      	add	sp, #16
 8008426:	4770      	bx	lr
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008428:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800842a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800842e:	63a3      	str	r3, [r4, #56]	; 0x38
 8008430:	e79d      	b.n	800836e <USB_DevInit+0x4e>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008432:	4619      	mov	r1, r3
 8008434:	e7a8      	b.n	8008388 <USB_DevInit+0x68>
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008436:	2103      	movs	r1, #3
 8008438:	e7a6      	b.n	8008388 <USB_DevInit+0x68>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800843a:	f8d2 9000 	ldr.w	r9, [r2]
 800843e:	f1b9 0f00 	cmp.w	r9, #0
 8008442:	da0b      	bge.n	800845c <USB_DevInit+0x13c>
      if (i == 0U)
 8008444:	b93b      	cbnz	r3, 8008456 <USB_DevInit+0x136>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008446:	f8c2 e000 	str.w	lr, [r2]
    USBx_INEP(i)->DIEPTSIZ = 0U;
 800844a:	6111      	str	r1, [r2, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800844c:	3301      	adds	r3, #1
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800844e:	f8c2 8008 	str.w	r8, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008452:	3220      	adds	r2, #32
 8008454:	e7b5      	b.n	80083c2 <USB_DevInit+0xa2>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008456:	f8c2 c000 	str.w	ip, [r2]
 800845a:	e7f6      	b.n	800844a <USB_DevInit+0x12a>
      USBx_INEP(i)->DIEPCTL = 0U;
 800845c:	6011      	str	r1, [r2, #0]
 800845e:	e7f4      	b.n	800844a <USB_DevInit+0x12a>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008460:	f8d3 9000 	ldr.w	r9, [r3]
 8008464:	f1b9 0f00 	cmp.w	r9, #0
 8008468:	da0b      	bge.n	8008482 <USB_DevInit+0x162>
      if (i == 0U)
 800846a:	b93a      	cbnz	r2, 800847c <USB_DevInit+0x15c>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800846c:	f8c3 e000 	str.w	lr, [r3]
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008470:	6119      	str	r1, [r3, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008472:	3201      	adds	r2, #1
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008474:	f8c3 8008 	str.w	r8, [r3, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008478:	3320      	adds	r3, #32
 800847a:	e7ae      	b.n	80083da <USB_DevInit+0xba>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800847c:	f8c3 c000 	str.w	ip, [r3]
 8008480:	e7f6      	b.n	8008470 <USB_DevInit+0x150>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008482:	6019      	str	r1, [r3, #0]
 8008484:	e7f4      	b.n	8008470 <USB_DevInit+0x150>
 8008486:	bf00      	nop
 8008488:	803c3800 	.word	0x803c3800

0800848c <USB_DevDisconnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800848c:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	; 0xe00
 8008490:	f023 0303 	bic.w	r3, r3, #3
 8008494:	f8c0 3e00 	str.w	r3, [r0, #3584]	; 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008498:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 800849c:	f043 0302 	orr.w	r3, r3, #2
 80084a0:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
}
 80084a4:	2000      	movs	r0, #0
 80084a6:	4770      	bx	lr

080084a8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80084a8:	b508      	push	{r3, lr}
  /*## FatFS: Link the SDRAMDISK driver ###########################*/
  retSDRAMDISK = FATFS_LinkDriver(&SDRAMDISK_Driver, SDRAMDISKPath);
 80084aa:	4903      	ldr	r1, [pc, #12]	; (80084b8 <MX_FATFS_Init+0x10>)
 80084ac:	4803      	ldr	r0, [pc, #12]	; (80084bc <MX_FATFS_Init+0x14>)
 80084ae:	f000 f881 	bl	80085b4 <FATFS_LinkDriver>
 80084b2:	4b03      	ldr	r3, [pc, #12]	; (80084c0 <MX_FATFS_Init+0x18>)
 80084b4:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80084b6:	bd08      	pop	{r3, pc}
 80084b8:	24001878 	.word	0x24001878
 80084bc:	080168e8 	.word	0x080168e8
 80084c0:	2400187c 	.word	0x2400187c

080084c4 <BSP_SDRAM_Init>:
  uint8_t sdramstatus = SDRAM_OK;

  /* place for custom code */

  return sdramstatus;
}
 80084c4:	2000      	movs	r0, #0
 80084c6:	4770      	bx	lr

080084c8 <SDRAMDISK_status>:
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SDRAMDISK_status(BYTE lun)
{
  return Stat;
 80084c8:	4b01      	ldr	r3, [pc, #4]	; (80084d0 <SDRAMDISK_status+0x8>)
 80084ca:	7818      	ldrb	r0, [r3, #0]
}
 80084cc:	4770      	bx	lr
 80084ce:	bf00      	nop
 80084d0:	24000010 	.word	0x24000010

080084d4 <SDRAMDISK_read>:
  */
DRESULT SDRAMDISK_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
  uint32_t *pSrcBuffer = (uint32_t *)buff;
  uint32_t BufferSize = (BLOCK_SIZE * count)/4;
  uint32_t *pSdramAddress = (uint32_t *) (SDRAM_DEVICE_ADDR + (sector * BLOCK_SIZE));
 80084d4:	f502 02d0 	add.w	r2, r2, #6815744	; 0x680000

  for(; BufferSize != 0; BufferSize--)
 80084d8:	eb01 2343 	add.w	r3, r1, r3, lsl #9
 80084dc:	ebc1 2242 	rsb	r2, r1, r2, lsl #9
 80084e0:	4299      	cmp	r1, r3
 80084e2:	eb01 0002 	add.w	r0, r1, r2
 80084e6:	d101      	bne.n	80084ec <SDRAMDISK_read+0x18>
  {
    *pSrcBuffer++ = *(__IO uint32_t *)pSdramAddress++;
  }

  return RES_OK;
}
 80084e8:	2000      	movs	r0, #0
 80084ea:	4770      	bx	lr
    *pSrcBuffer++ = *(__IO uint32_t *)pSdramAddress++;
 80084ec:	6800      	ldr	r0, [r0, #0]
 80084ee:	f841 0b04 	str.w	r0, [r1], #4
  for(; BufferSize != 0; BufferSize--)
 80084f2:	e7f5      	b.n	80084e0 <SDRAMDISK_read+0xc>

080084f4 <SDRAMDISK_write>:
#if _USE_WRITE == 1
DRESULT SDRAMDISK_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
  uint32_t *pDstBuffer = (uint32_t *)buff;
  uint32_t BufferSize = (BLOCK_SIZE * count)/4;
  uint32_t *pSramAddress = (uint32_t *) (SDRAM_DEVICE_ADDR + (sector * BLOCK_SIZE));
 80084f4:	f502 02d0 	add.w	r2, r2, #6815744	; 0x680000

  for(; BufferSize != 0; BufferSize--)
 80084f8:	eb01 2343 	add.w	r3, r1, r3, lsl #9
 80084fc:	ebc1 2242 	rsb	r2, r1, r2, lsl #9
{
 8008500:	b510      	push	{r4, lr}
  for(; BufferSize != 0; BufferSize--)
 8008502:	4299      	cmp	r1, r3
 8008504:	eb01 0002 	add.w	r0, r1, r2
 8008508:	d101      	bne.n	800850e <SDRAMDISK_write+0x1a>
  {
    *(__IO uint32_t *)pSramAddress++ = *pDstBuffer++;
  }

  return RES_OK;
}
 800850a:	2000      	movs	r0, #0
 800850c:	bd10      	pop	{r4, pc}
    *(__IO uint32_t *)pSramAddress++ = *pDstBuffer++;
 800850e:	f851 4b04 	ldr.w	r4, [r1], #4
 8008512:	6004      	str	r4, [r0, #0]
  for(; BufferSize != 0; BufferSize--)
 8008514:	e7f5      	b.n	8008502 <SDRAMDISK_write+0xe>
	...

08008518 <SDRAMDISK_ioctl>:
#if _USE_IOCTL == 1
DRESULT SDRAMDISK_ioctl(BYTE lun, BYTE cmd, void *buff)
{
  DRESULT res = RES_ERROR;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8008518:	4b0d      	ldr	r3, [pc, #52]	; (8008550 <SDRAMDISK_ioctl+0x38>)
 800851a:	7818      	ldrb	r0, [r3, #0]
 800851c:	f010 0001 	ands.w	r0, r0, #1
 8008520:	d111      	bne.n	8008546 <SDRAMDISK_ioctl+0x2e>

  switch (cmd)
 8008522:	2903      	cmp	r1, #3
 8008524:	d803      	bhi.n	800852e <SDRAMDISK_ioctl+0x16>
 8008526:	e8df f001 	tbb	[pc, r1]
 800852a:	0410      	.short	0x0410
 800852c:	0c08      	.short	0x0c08
 800852e:	2004      	movs	r0, #4
 8008530:	4770      	bx	lr
    res = RES_OK;
    break;

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    *(DWORD*)buff = SDRAM_DEVICE_SIZE / BLOCK_SIZE;
 8008532:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    res = RES_OK;
    break;

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    *(DWORD*)buff = 1;
 8008536:	6013      	str	r3, [r2, #0]
	res = RES_OK;
    break;
 8008538:	4770      	bx	lr
    *(WORD*)buff = BLOCK_SIZE;
 800853a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800853e:	8013      	strh	r3, [r2, #0]
    break;
 8008540:	4770      	bx	lr
    *(DWORD*)buff = 1;
 8008542:	2301      	movs	r3, #1
 8008544:	e7f7      	b.n	8008536 <SDRAMDISK_ioctl+0x1e>
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8008546:	2003      	movs	r0, #3
 8008548:	4770      	bx	lr
    res = RES_OK;
 800854a:	4608      	mov	r0, r1
  default:
    res = RES_PARERR;
  }

  return res;
}
 800854c:	4770      	bx	lr
 800854e:	bf00      	nop
 8008550:	24000010 	.word	0x24000010

08008554 <SDRAMDISK_initialize>:
{
 8008554:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
 8008556:	2301      	movs	r3, #1
 8008558:	4c05      	ldr	r4, [pc, #20]	; (8008570 <SDRAMDISK_initialize+0x1c>)
 800855a:	7023      	strb	r3, [r4, #0]
  if(BSP_SDRAM_Init() == SDRAM_OK)
 800855c:	f7ff ffb2 	bl	80084c4 <BSP_SDRAM_Init>
 8008560:	b918      	cbnz	r0, 800856a <SDRAMDISK_initialize+0x16>
    Stat &= ~STA_NOINIT;
 8008562:	7823      	ldrb	r3, [r4, #0]
 8008564:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8008568:	7023      	strb	r3, [r4, #0]
  return Stat;
 800856a:	7820      	ldrb	r0, [r4, #0]
}
 800856c:	bd10      	pop	{r4, pc}
 800856e:	bf00      	nop
 8008570:	24000010 	.word	0x24000010

08008574 <FATFS_LinkDriverEx>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 8008574:	4b0e      	ldr	r3, [pc, #56]	; (80085b0 <FATFS_LinkDriverEx+0x3c>)
{
 8008576:	b530      	push	{r4, r5, lr}
  if(disk.nbr < _VOLUMES)
 8008578:	7a5c      	ldrb	r4, [r3, #9]
{
 800857a:	4605      	mov	r5, r0
  if(disk.nbr < _VOLUMES)
 800857c:	f004 00ff 	and.w	r0, r4, #255	; 0xff
 8008580:	b9a4      	cbnz	r4, 80085ac <FATFS_LinkDriverEx+0x38>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008582:	7a5c      	ldrb	r4, [r3, #9]
 8008584:	5518      	strb	r0, [r3, r4]
    disk.drv[disk.nbr] = drv;
 8008586:	7a5c      	ldrb	r4, [r3, #9]
 8008588:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800858c:	6065      	str	r5, [r4, #4]
    disk.lun[disk.nbr] = lun;
 800858e:	7a5c      	ldrb	r4, [r3, #9]
 8008590:	441c      	add	r4, r3
 8008592:	7222      	strb	r2, [r4, #8]
    DiskNum = disk.nbr++;
 8008594:	7a5a      	ldrb	r2, [r3, #9]
 8008596:	1c54      	adds	r4, r2, #1
    path[0] = DiskNum + '0';
 8008598:	3230      	adds	r2, #48	; 0x30
    DiskNum = disk.nbr++;
 800859a:	b2e4      	uxtb	r4, r4
 800859c:	725c      	strb	r4, [r3, #9]
    path[1] = ':';
 800859e:	233a      	movs	r3, #58	; 0x3a
    path[0] = DiskNum + '0';
 80085a0:	700a      	strb	r2, [r1, #0]
    path[1] = ':';
 80085a2:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 80085a4:	232f      	movs	r3, #47	; 0x2f
    path[3] = 0;
 80085a6:	70c8      	strb	r0, [r1, #3]
    path[2] = '/';
 80085a8:	708b      	strb	r3, [r1, #2]
    ret = 0;
  }

  return ret;
}
 80085aa:	bd30      	pop	{r4, r5, pc}
  uint8_t ret = 1;
 80085ac:	2001      	movs	r0, #1
 80085ae:	e7fc      	b.n	80085aa <FATFS_LinkDriverEx+0x36>
 80085b0:	24001880 	.word	0x24001880

080085b4 <FATFS_LinkDriver>:
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
  return FATFS_LinkDriverEx(drv, path, 0);
 80085b4:	2200      	movs	r2, #0
 80085b6:	f7ff bfdd 	b.w	8008574 <FATFS_LinkDriverEx>
	...

080085bc <write_callback>:
  o_packet.pw = 0;
}

static bool write_callback(pb_ostream_t *stream, const uint8_t *buf,
    size_t count)
{
 80085bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  bool res = true;
 80085be:	2001      	movs	r0, #1
{
 80085c0:	460e      	mov	r6, r1
 80085c2:	4614      	mov	r4, r2
  uint8_t *pr = (uint8_t *)buf;

  UNUSED(stream);

  while (count) {
    for (; o_packet.pw < _PACKET_PAYLOAD_IN_SIZE && count; o_packet.pw++) {
 80085c4:	4d0c      	ldr	r5, [pc, #48]	; (80085f8 <write_callback+0x3c>)
      pr++;
      count--;
    }
    if (o_packet.pw == _PACKET_PAYLOAD_IN_SIZE) {
      res = write_packet();
      o_packet.pw = 0;
 80085c6:	2700      	movs	r7, #0
  while (count) {
 80085c8:	b93c      	cbnz	r4, 80085da <write_callback+0x1e>
 80085ca:	e00b      	b.n	80085e4 <write_callback+0x28>
      o_packet.payload[o_packet.pw] = *pr;
 80085cc:	f816 1b01 	ldrb.w	r1, [r6], #1
 80085d0:	18ea      	adds	r2, r5, r3
      count--;
 80085d2:	3c01      	subs	r4, #1
    for (; o_packet.pw < _PACKET_PAYLOAD_IN_SIZE && count; o_packet.pw++) {
 80085d4:	3301      	adds	r3, #1
      o_packet.payload[o_packet.pw] = *pr;
 80085d6:	7051      	strb	r1, [r2, #1]
    for (; o_packet.pw < _PACKET_PAYLOAD_IN_SIZE && count; o_packet.pw++) {
 80085d8:	702b      	strb	r3, [r5, #0]
 80085da:	782b      	ldrb	r3, [r5, #0]
 80085dc:	2b1f      	cmp	r3, #31
 80085de:	d802      	bhi.n	80085e6 <write_callback+0x2a>
 80085e0:	2c00      	cmp	r4, #0
 80085e2:	d1f3      	bne.n	80085cc <write_callback+0x10>
    }
  }
  return res;
}
 80085e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (o_packet.pw == _PACKET_PAYLOAD_IN_SIZE) {
 80085e6:	2b20      	cmp	r3, #32
 80085e8:	d1ee      	bne.n	80085c8 <write_callback+0xc>
  return ioRawWriteBuffer((uint8_t *)&o_packet, _PACKET_PAYLOAD_IN_SIZE + 1);
 80085ea:	2121      	movs	r1, #33	; 0x21
 80085ec:	4628      	mov	r0, r5
 80085ee:	f000 fc97 	bl	8008f20 <ioRawWriteBuffer>
      o_packet.pw = 0;
 80085f2:	702f      	strb	r7, [r5, #0]
 80085f4:	e7e8      	b.n	80085c8 <write_callback+0xc>
 80085f6:	bf00      	nop
 80085f8:	240018b4 	.word	0x240018b4

080085fc <read_callback>:
  i_packet.pr = 0xFF;
  i_ridx = 0;
}

static bool read_callback(pb_istream_t *stream, uint8_t *buf, size_t count)
{
 80085fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008600:	460f      	mov	r7, r1
  bool res = true;
  uint8_t *pw = (uint8_t *)buf;

  UNUSED(stream);

  if (count == 0)
 8008602:	4614      	mov	r4, r2
 8008604:	b1f2      	cbz	r2, 8008644 <read_callback+0x48>
    return true;

  if (i_packet.pr == 0xFF)
 8008606:	4d1d      	ldr	r5, [pc, #116]	; (800867c <read_callback+0x80>)
 8008608:	4e1d      	ldr	r6, [pc, #116]	; (8008680 <read_callback+0x84>)
 800860a:	782b      	ldrb	r3, [r5, #0]
 800860c:	2bff      	cmp	r3, #255	; 0xff
 800860e:	d11b      	bne.n	8008648 <read_callback+0x4c>
  bool res = ioRawReadBuffer((uint8_t *)&i_packet,
 8008610:	2121      	movs	r1, #33	; 0x21
 8008612:	4628      	mov	r0, r5
 8008614:	f000 fc92 	bl	8008f3c <ioRawReadBuffer>
  i_ridx = 0;
 8008618:	2300      	movs	r3, #0
 800861a:	6033      	str	r3, [r6, #0]
    res = read_packet();

  if (res == false)
 800861c:	b9a0      	cbnz	r0, 8008648 <read_callback+0x4c>
      read_packet();
    }
  }

  return res;
}
 800861e:	b003      	add	sp, #12
 8008620:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      *pw = i_packet.payload[i_ridx];
 8008624:	5cea      	ldrb	r2, [r5, r3]
      count--;
 8008626:	3c01      	subs	r4, #1
      *pw = i_packet.payload[i_ridx];
 8008628:	f807 2b01 	strb.w	r2, [r7], #1
    for (; i_packet.pr > 0 && count; i_packet.pr--) {
 800862c:	782a      	ldrb	r2, [r5, #0]
 800862e:	3a01      	subs	r2, #1
 8008630:	702a      	strb	r2, [r5, #0]
 8008632:	2201      	movs	r2, #1
 8008634:	7828      	ldrb	r0, [r5, #0]
 8008636:	4619      	mov	r1, r3
 8008638:	b158      	cbz	r0, 8008652 <read_callback+0x56>
 800863a:	3301      	adds	r3, #1
 800863c:	2c00      	cmp	r4, #0
 800863e:	d1f1      	bne.n	8008624 <read_callback+0x28>
 8008640:	b102      	cbz	r2, 8008644 <read_callback+0x48>
 8008642:	6031      	str	r1, [r6, #0]
 8008644:	2001      	movs	r0, #1
 8008646:	e7ea      	b.n	800861e <read_callback+0x22>
 8008648:	f04f 0900 	mov.w	r9, #0
  bool res = ioRawReadBuffer((uint8_t *)&i_packet,
 800864c:	f8df 802c 	ldr.w	r8, [pc, #44]	; 800867c <read_callback+0x80>
 8008650:	e011      	b.n	8008676 <read_callback+0x7a>
 8008652:	b102      	cbz	r2, 8008656 <read_callback+0x5a>
 8008654:	6033      	str	r3, [r6, #0]
    if (count && i_packet.pr == 0) {
 8008656:	2c00      	cmp	r4, #0
 8008658:	d0f4      	beq.n	8008644 <read_callback+0x48>
      uint8_t sync = 0xAA;
 800865a:	23aa      	movs	r3, #170	; 0xaa
      ioRawWriteBuffer(&sync, 1);
 800865c:	2101      	movs	r1, #1
 800865e:	f10d 0007 	add.w	r0, sp, #7
      uint8_t sync = 0xAA;
 8008662:	f88d 3007 	strb.w	r3, [sp, #7]
      ioRawWriteBuffer(&sync, 1);
 8008666:	f000 fc5b 	bl	8008f20 <ioRawWriteBuffer>
  bool res = ioRawReadBuffer((uint8_t *)&i_packet,
 800866a:	2121      	movs	r1, #33	; 0x21
 800866c:	4640      	mov	r0, r8
 800866e:	f000 fc65 	bl	8008f3c <ioRawReadBuffer>
  i_ridx = 0;
 8008672:	f8c6 9000 	str.w	r9, [r6]
  while (count) {
 8008676:	6833      	ldr	r3, [r6, #0]
    for (; i_packet.pr > 0 && count; i_packet.pr--) {
 8008678:	2200      	movs	r2, #0
 800867a:	e7db      	b.n	8008634 <read_callback+0x38>
 800867c:	2400188c 	.word	0x2400188c
 8008680:	240018b0 	.word	0x240018b0

08008684 <pb_io_flush_ostream>:
{
 8008684:	b510      	push	{r4, lr}
  o_packet.pw |= (1 << 7); /* Indicate last packet */
 8008686:	4c06      	ldr	r4, [pc, #24]	; (80086a0 <pb_io_flush_ostream+0x1c>)
  return ioRawWriteBuffer((uint8_t *)&o_packet, _PACKET_PAYLOAD_IN_SIZE + 1);
 8008688:	2121      	movs	r1, #33	; 0x21
  o_packet.pw |= (1 << 7); /* Indicate last packet */
 800868a:	7823      	ldrb	r3, [r4, #0]
  return ioRawWriteBuffer((uint8_t *)&o_packet, _PACKET_PAYLOAD_IN_SIZE + 1);
 800868c:	4620      	mov	r0, r4
  o_packet.pw |= (1 << 7); /* Indicate last packet */
 800868e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008692:	7023      	strb	r3, [r4, #0]
  return ioRawWriteBuffer((uint8_t *)&o_packet, _PACKET_PAYLOAD_IN_SIZE + 1);
 8008694:	f000 fc44 	bl	8008f20 <ioRawWriteBuffer>
  o_packet.pw = 0;
 8008698:	2300      	movs	r3, #0
 800869a:	7023      	strb	r3, [r4, #0]
}
 800869c:	bd10      	pop	{r4, pc}
 800869e:	bf00      	nop
 80086a0:	240018b4 	.word	0x240018b4

080086a4 <pb_io_flush_istream>:
  i_packet.pr = 0xFF;
 80086a4:	4b03      	ldr	r3, [pc, #12]	; (80086b4 <pb_io_flush_istream+0x10>)
 80086a6:	22ff      	movs	r2, #255	; 0xff
 80086a8:	701a      	strb	r2, [r3, #0]
  i_ridx = 0;
 80086aa:	2200      	movs	r2, #0
 80086ac:	4b02      	ldr	r3, [pc, #8]	; (80086b8 <pb_io_flush_istream+0x14>)
 80086ae:	601a      	str	r2, [r3, #0]
}
 80086b0:	4770      	bx	lr
 80086b2:	bf00      	nop
 80086b4:	2400188c 	.word	0x2400188c
 80086b8:	240018b0 	.word	0x240018b0

080086bc <pb_io_ostream>:

pb_ostream_t pb_io_ostream(int fd)
{
  pb_ostream_t stream = {&write_callback, (void*)(intptr_t)fd, SIZE_MAX, 0};
 80086bc:	2200      	movs	r2, #0
 80086be:	e9c0 2203 	strd	r2, r2, [r0, #12]
  return stream;
 80086c2:	4a04      	ldr	r2, [pc, #16]	; (80086d4 <pb_io_ostream+0x18>)
 80086c4:	e9c0 2100 	strd	r2, r1, [r0]
 80086c8:	f04f 32ff 	mov.w	r2, #4294967295
{
 80086cc:	b510      	push	{r4, lr}
  return stream;
 80086ce:	6082      	str	r2, [r0, #8]
}
 80086d0:	bd10      	pop	{r4, pc}
 80086d2:	bf00      	nop
 80086d4:	080085bd 	.word	0x080085bd

080086d8 <pb_io_istream>:

pb_istream_t pb_io_istream(int fd)
{
  pb_istream_t stream = {&read_callback, (void*)(intptr_t)fd, SIZE_MAX};
 80086d8:	2200      	movs	r2, #0
 80086da:	60c2      	str	r2, [r0, #12]
  return stream;
 80086dc:	4a03      	ldr	r2, [pc, #12]	; (80086ec <pb_io_istream+0x14>)
 80086de:	e9c0 2100 	strd	r2, r1, [r0]
 80086e2:	f04f 32ff 	mov.w	r2, #4294967295
 80086e6:	6082      	str	r2, [r0, #8]
}
 80086e8:	4770      	bx	lr
 80086ea:	bf00      	nop
 80086ec:	080085fd 	.word	0x080085fd

080086f0 <pb_io_stream_init>:

int pb_io_stream_init(void)
{
 80086f0:	b508      	push	{r3, lr}
  ioRawDisableLLWrite();
 80086f2:	f000 fc31 	bl	8008f58 <ioRawDisableLLWrite>
  return 0;
}
 80086f6:	2000      	movs	r0, #0
 80086f8:	bd08      	pop	{r3, pc}

080086fa <encode_uint32>:
/*
 * Callback function to encode array of uint32
 */
bool encode_uint32(pb_ostream_t *stream, const pb_field_t *field,
                   void * const *arg)
{
 80086fa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  struct _encode_uint32* array = (struct _encode_uint32 *)*arg;
 80086fe:	f8d2 8000 	ldr.w	r8, [r2]
  int offset = (array->offset == 0)?4:array->offset;
  for (int i = 0; i < array->size; i++)
 8008702:	2600      	movs	r6, #0
{
 8008704:	4607      	mov	r7, r0
 8008706:	4689      	mov	r9, r1
  int offset = (array->offset == 0)?4:array->offset;
 8008708:	f8d8 4008 	ldr.w	r4, [r8, #8]
  for (int i = 0; i < array->size; i++)
 800870c:	4635      	mov	r5, r6
 800870e:	2c00      	cmp	r4, #0
 8008710:	bf08      	it	eq
 8008712:	2404      	moveq	r4, #4
 8008714:	f8d8 3000 	ldr.w	r3, [r8]
 8008718:	429d      	cmp	r5, r3
 800871a:	d301      	bcc.n	8008720 <encode_uint32+0x26>
    else
      c_val = *(uint32_t*)((uint8_t *)array->data + i * offset);
    if (!pb_encode_varint(stream, (intptr_t)(c_val)))
      return false;
  }
  return true;
 800871c:	2001      	movs	r0, #1
 800871e:	e005      	b.n	800872c <encode_uint32+0x32>
    if (!pb_encode_tag_for_field(stream, field))
 8008720:	4649      	mov	r1, r9
 8008722:	4638      	mov	r0, r7
 8008724:	f002 ff54 	bl	800b5d0 <pb_encode_tag_for_field>
 8008728:	b910      	cbnz	r0, 8008730 <encode_uint32+0x36>
      return false;
 800872a:	2000      	movs	r0, #0
}
 800872c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      c_val = *(uint16_t*)((uint8_t *)array->data + i * offset);
 8008730:	f8d8 3004 	ldr.w	r3, [r8, #4]
    if (offset == 2)
 8008734:	2c02      	cmp	r4, #2
    if (!pb_encode_varint(stream, (intptr_t)(c_val)))
 8008736:	4638      	mov	r0, r7
      c_val = *(uint32_t*)((uint8_t *)array->data + i * offset);
 8008738:	bf18      	it	ne
 800873a:	599a      	ldrne	r2, [r3, r6]
    if (!pb_encode_varint(stream, (intptr_t)(c_val)))
 800873c:	4426      	add	r6, r4
      c_val = *(uint16_t*)((uint8_t *)array->data + i * offset);
 800873e:	bf08      	it	eq
 8008740:	f833 2015 	ldrheq.w	r2, [r3, r5, lsl #1]
    if (!pb_encode_varint(stream, (intptr_t)(c_val)))
 8008744:	17d3      	asrs	r3, r2, #31
 8008746:	f002 fe65 	bl	800b414 <pb_encode_varint>
 800874a:	2800      	cmp	r0, #0
 800874c:	d0ed      	beq.n	800872a <encode_uint32+0x30>
  for (int i = 0; i < array->size; i++)
 800874e:	3501      	adds	r5, #1
 8008750:	e7e0      	b.n	8008714 <encode_uint32+0x1a>

08008752 <encode_data_cb>:
/*
 * Local callback function to encode datas field from aiDataMsg msg
 */
bool encode_data_cb(pb_ostream_t *stream, const pb_field_t *field,
    void * const *arg)
{
 8008752:	b570      	push	{r4, r5, r6, lr}
  aiPbData *data = (aiPbData *)*arg;
 8008754:	6815      	ldr	r5, [r2, #0]
{
 8008756:	4604      	mov	r4, r0

  pb_byte_t *pr = (pb_byte_t *)data->addr;
 8008758:	68ae      	ldr	r6, [r5, #8]

  if (!pb_encode_tag_for_field(stream, field))
 800875a:	f002 ff39 	bl	800b5d0 <pb_encode_tag_for_field>
 800875e:	b130      	cbz	r0, 800876e <encode_data_cb+0x1c>
    return false;

  if (!pb_encode_string(stream, pr, data->size))
 8008760:	686a      	ldr	r2, [r5, #4]
 8008762:	4631      	mov	r1, r6
 8008764:	4620      	mov	r0, r4
    return false;

  return true;
}
 8008766:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  if (!pb_encode_string(stream, pr, data->size))
 800876a:	f003 b88b 	b.w	800b884 <pb_encode_string>
}
 800876e:	bd70      	pop	{r4, r5, r6, pc}

08008770 <decode_data_cb>:
{
 8008770:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  aiPbData *data = (aiPbData *)*arg;
 8008772:	6814      	ldr	r4, [r2, #0]
{
 8008774:	4605      	mov	r5, r0
  data->nb_read = 0;
 8008776:	2300      	movs	r3, #0
  uint8_t *pw = (uint8_t *)data->addr;
 8008778:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
    data->nb_read += itsize;
 800877c:	60e3      	str	r3, [r4, #12]
  while (stream->bytes_left) {
 800877e:	68ab      	ldr	r3, [r5, #8]
 8008780:	b913      	cbnz	r3, 8008788 <decode_data_cb+0x18>
  return true;
 8008782:	2001      	movs	r0, #1
}
 8008784:	b003      	add	sp, #12
 8008786:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (!pb_read(stream, (pb_byte_t *)&number, itsize))
 8008788:	2201      	movs	r2, #1
 800878a:	4669      	mov	r1, sp
 800878c:	4628      	mov	r0, r5
 800878e:	f002 f909 	bl	800a9a4 <pb_read>
 8008792:	2800      	cmp	r0, #0
 8008794:	d0f6      	beq.n	8008784 <decode_data_cb+0x14>
    if ((pw) && (maxr > 0)) /* additional data are skipped */
 8008796:	b13f      	cbz	r7, 80087a8 <decode_data_cb+0x38>
 8008798:	2e00      	cmp	r6, #0
      *pw = *(uint8_t *)&number;
 800879a:	bfc2      	ittt	gt
 800879c:	f89d 3000 	ldrbgt.w	r3, [sp]
      maxr--;
 80087a0:	f106 36ff 	addgt.w	r6, r6, #4294967295
      *pw = *(uint8_t *)&number;
 80087a4:	f807 3b01 	strbgt.w	r3, [r7], #1
    data->nb_read += itsize;
 80087a8:	68e3      	ldr	r3, [r4, #12]
 80087aa:	3301      	adds	r3, #1
 80087ac:	e7e6      	b.n	800877c <decode_data_cb+0xc>
	...

080087b0 <aiPbMgrInit>:
{
 80087b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80087b2:	b08b      	sub	sp, #44	; 0x2c
  memset(&pbContextMgr, 0, sizeof(struct pbContextMgr));
 80087b4:	4c1a      	ldr	r4, [pc, #104]	; (8008820 <aiPbMgrInit+0x70>)
 80087b6:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 80087ba:	2100      	movs	r1, #0
  pbContextMgr.input = pb_io_istream(0);
 80087bc:	ad06      	add	r5, sp, #24
{
 80087be:	4607      	mov	r7, r0
  memset(&pbContextMgr, 0, sizeof(struct pbContextMgr));
 80087c0:	4620      	mov	r0, r4
  pbContextMgr.output = pb_io_ostream(0);
 80087c2:	f104 0610 	add.w	r6, r4, #16
  memset(&pbContextMgr, 0, sizeof(struct pbContextMgr));
 80087c6:	f00a fbf9 	bl	8012fbc <memset>
  pb_io_stream_init();
 80087ca:	f7ff ff91 	bl	80086f0 <pb_io_stream_init>
  pbContextMgr.input = pb_io_istream(0);
 80087ce:	4628      	mov	r0, r5
 80087d0:	2100      	movs	r1, #0
 80087d2:	f7ff ff81 	bl	80086d8 <pb_io_istream>
 80087d6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
  pbContextMgr.output = pb_io_ostream(0);
 80087da:	466d      	mov	r5, sp
  pbContextMgr.input = pb_io_istream(0);
 80087dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  pbContextMgr.output = pb_io_ostream(0);
 80087e0:	2100      	movs	r1, #0
 80087e2:	4668      	mov	r0, sp
 80087e4:	f7ff ff6a 	bl	80086bc <pb_io_ostream>
 80087e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80087ea:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80087ec:	682b      	ldr	r3, [r5, #0]
 80087ee:	6033      	str	r3, [r6, #0]
  pbContextMgr.n_func = 0;
 80087f0:	2300      	movs	r3, #0
  pbContextMgr.funcs = NULL;
 80087f2:	e9c4 3309 	strd	r3, r3, [r4, #36]	; 0x24
  if (funcs) {
 80087f6:	b97f      	cbnz	r7, 8008818 <aiPbMgrInit+0x68>
  pbContextMgr.state = PB_MGR_READY;
 80087f8:	2301      	movs	r3, #1
 80087fa:	f884 3198 	strb.w	r3, [r4, #408]	; 0x198
}
 80087fe:	b00b      	add	sp, #44	; 0x2c
 8008800:	bdf0      	pop	{r4, r5, r6, r7, pc}
      cfunc++;
 8008802:	320c      	adds	r2, #12
 8008804:	462b      	mov	r3, r5
 8008806:	2101      	movs	r1, #1
    while (cfunc->process) {
 8008808:	6850      	ldr	r0, [r2, #4]
 800880a:	1c5d      	adds	r5, r3, #1
 800880c:	2800      	cmp	r0, #0
 800880e:	d1f8      	bne.n	8008802 <aiPbMgrInit+0x52>
 8008810:	b101      	cbz	r1, 8008814 <aiPbMgrInit+0x64>
 8008812:	62a3      	str	r3, [r4, #40]	; 0x28
    pbContextMgr.funcs = funcs;
 8008814:	6267      	str	r7, [r4, #36]	; 0x24
 8008816:	e7ef      	b.n	80087f8 <aiPbMgrInit+0x48>
 8008818:	463a      	mov	r2, r7
 800881a:	4619      	mov	r1, r3
 800881c:	e7f4      	b.n	8008808 <aiPbMgrInit+0x58>
 800881e:	bf00      	nop
 8008820:	240018d8 	.word	0x240018d8

08008824 <aiPbStrCopy>:
{
 8008824:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8008826:	4616      	mov	r6, r2
  const char undef[] = "UNDEFINED";
 8008828:	4a11      	ldr	r2, [pc, #68]	; (8008870 <aiPbStrCopy+0x4c>)
{
 800882a:	4605      	mov	r5, r0
 800882c:	460c      	mov	r4, r1
  const char undef[] = "UNDEFINED";
 800882e:	6810      	ldr	r0, [r2, #0]
 8008830:	ab01      	add	r3, sp, #4
 8008832:	6851      	ldr	r1, [r2, #4]
 8008834:	8912      	ldrh	r2, [r2, #8]
 8008836:	c303      	stmia	r3!, {r0, r1}
  size_t l = strlen(src);
 8008838:	4628      	mov	r0, r5
  const char undef[] = "UNDEFINED";
 800883a:	801a      	strh	r2, [r3, #0]
  size_t l = strlen(src);
 800883c:	f7f7 fd50 	bl	80002e0 <strlen>
  if (l > max)
 8008840:	42b0      	cmp	r0, r6
    l = max-1;
 8008842:	bf88      	it	hi
 8008844:	f106 30ff 	addhi.w	r0, r6, #4294967295
  if (!dst)
 8008848:	b184      	cbz	r4, 800886c <aiPbStrCopy+0x48>
  if (src && l)
 800884a:	b138      	cbz	r0, 800885c <aiPbStrCopy+0x38>
    memcpy(dst, src, l+1);
 800884c:	1c42      	adds	r2, r0, #1
 800884e:	4629      	mov	r1, r5
 8008850:	4620      	mov	r0, r4
}
 8008852:	b004      	add	sp, #16
 8008854:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    memcpy(dst, src, l+1);
 8008858:	f00a bba2 	b.w	8012fa0 <memcpy>
    memcpy(dst, undef, strlen(undef)+1);
 800885c:	a801      	add	r0, sp, #4
 800885e:	f7f7 fd3f 	bl	80002e0 <strlen>
 8008862:	a901      	add	r1, sp, #4
 8008864:	1c42      	adds	r2, r0, #1
 8008866:	4620      	mov	r0, r4
 8008868:	f00a fb9a 	bl	8012fa0 <memcpy>
}
 800886c:	b004      	add	sp, #16
 800886e:	bd70      	pop	{r4, r5, r6, pc}
 8008870:	080168fc 	.word	0x080168fc

08008874 <encode_tensor_desc>:
{
 8008874:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008878:	4605      	mov	r5, r0
 800887a:	b09c      	sub	sp, #112	; 0x70
 800887c:	4688      	mov	r8, r1
  struct _encode_tensor_desc* tensors = (struct _encode_tensor_desc *)*arg;
 800887e:	6816      	ldr	r6, [r2, #0]
  for (size_t i = 0; i < tensors->size; i++)
 8008880:	2400      	movs	r4, #0
    msg.dims.funcs.encode = encode_uint32;
 8008882:	f8df 9050 	ldr.w	r9, [pc, #80]	; 80088d4 <encode_tensor_desc+0x60>
    if (!pb_encode_submessage(stream, aiTensorDescMsg_fields, &msg))
 8008886:	f8df a050 	ldr.w	sl, [pc, #80]	; 80088d8 <encode_tensor_desc+0x64>
  for (size_t i = 0; i < tensors->size; i++)
 800888a:	6873      	ldr	r3, [r6, #4]
 800888c:	42a3      	cmp	r3, r4
 800888e:	d801      	bhi.n	8008894 <encode_tensor_desc+0x20>
  return true;
 8008890:	2001      	movs	r0, #1
 8008892:	e01c      	b.n	80088ce <encode_tensor_desc+0x5a>
    aiTensorDescMsg msg = aiTensorDescMsg_init_zero;
 8008894:	2264      	movs	r2, #100	; 0x64
 8008896:	2100      	movs	r1, #0
 8008898:	a803      	add	r0, sp, #12
 800889a:	f00a fb8f 	bl	8012fbc <memset>
    tensors->cb(i, tensors->data, &msg, &array_u32);
 800889e:	68b1      	ldr	r1, [r6, #8]
 80088a0:	4620      	mov	r0, r4
 80088a2:	466b      	mov	r3, sp
 80088a4:	aa03      	add	r2, sp, #12
 80088a6:	6837      	ldr	r7, [r6, #0]
 80088a8:	47b8      	blx	r7
    if (!pb_encode_tag_for_field(stream, field))
 80088aa:	4641      	mov	r1, r8
 80088ac:	4628      	mov	r0, r5
    msg.dims.funcs.encode = encode_uint32;
 80088ae:	f8cd 9058 	str.w	r9, [sp, #88]	; 0x58
    msg.dims.arg = &array_u32;
 80088b2:	f8cd d05c 	str.w	sp, [sp, #92]	; 0x5c
    if (!pb_encode_tag_for_field(stream, field))
 80088b6:	f002 fe8b 	bl	800b5d0 <pb_encode_tag_for_field>
 80088ba:	b138      	cbz	r0, 80088cc <encode_tensor_desc+0x58>
    if (!pb_encode_submessage(stream, aiTensorDescMsg_fields, &msg))
 80088bc:	aa03      	add	r2, sp, #12
 80088be:	4651      	mov	r1, sl
 80088c0:	4628      	mov	r0, r5
 80088c2:	f003 f82f 	bl	800b924 <pb_encode_submessage>
 80088c6:	b108      	cbz	r0, 80088cc <encode_tensor_desc+0x58>
  for (size_t i = 0; i < tensors->size; i++)
 80088c8:	3401      	adds	r4, #1
 80088ca:	e7de      	b.n	800888a <encode_tensor_desc+0x16>
      return false;
 80088cc:	2000      	movs	r0, #0
}
 80088ce:	b01c      	add	sp, #112	; 0x70
 80088d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088d4:	080086fb 	.word	0x080086fb
 80088d8:	08016db0 	.word	0x08016db0

080088dc <aiPbMgrSendResp>:

/*---------------------------------------------------------------------------*/

void aiPbMgrSendResp(const reqMsg *req, respMsg *resp,
    EnumState state)
{
 80088dc:	b508      	push	{r3, lr}
  resp->reqid = req->reqid;
 80088de:	6803      	ldr	r3, [r0, #0]
  resp->state = state;
 80088e0:	710a      	strb	r2, [r1, #4]
  pb_encode(&pbContextMgr.output, respMsg_fields, resp);
 80088e2:	460a      	mov	r2, r1
  resp->reqid = req->reqid;
 80088e4:	600b      	str	r3, [r1, #0]
  pb_encode(&pbContextMgr.output, respMsg_fields, resp);
 80088e6:	4804      	ldr	r0, [pc, #16]	; (80088f8 <aiPbMgrSendResp+0x1c>)
 80088e8:	4904      	ldr	r1, [pc, #16]	; (80088fc <aiPbMgrSendResp+0x20>)
 80088ea:	f002 ff97 	bl	800b81c <pb_encode>
  pb_io_flush_ostream();
}
 80088ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  pb_io_flush_ostream();
 80088f2:	f7ff bec7 	b.w	8008684 <pb_io_flush_ostream>
 80088f6:	bf00      	nop
 80088f8:	240018e8 	.word	0x240018e8
 80088fc:	08016f15 	.word	0x08016f15

08008900 <aiPbMgrWaitAndProcess>:
{
 8008900:	b570      	push	{r4, r5, r6, lr}
  if (pb_decode_delimited(&pbContextMgr.input, reqMsg_fields, &(pbContextMgr.req))) {
 8008902:	4c1d      	ldr	r4, [pc, #116]	; (8008978 <aiPbMgrWaitAndProcess+0x78>)
  pb_io_flush_istream();
 8008904:	f7ff fece 	bl	80086a4 <pb_io_flush_istream>
  if (pb_decode_delimited(&pbContextMgr.input, reqMsg_fields, &(pbContextMgr.req))) {
 8008908:	491c      	ldr	r1, [pc, #112]	; (800897c <aiPbMgrWaitAndProcess+0x7c>)
 800890a:	f104 022c 	add.w	r2, r4, #44	; 0x2c
 800890e:	4620      	mov	r0, r4
 8008910:	f002 fc8a 	bl	800b228 <pb_decode_delimited>
 8008914:	b348      	cbz	r0, 800896a <aiPbMgrWaitAndProcess+0x6a>
    pb_io_flush_istream();
 8008916:	f7ff fec5 	bl	80086a4 <pb_io_flush_istream>
    pbContextMgr.state = PB_MGR_ON_GOING;
 800891a:	2302      	movs	r3, #2
    for (idx = 0; idx < pbContextMgr.n_func; idx++) {
 800891c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800891e:	2500      	movs	r5, #0
    pbContextMgr.state = PB_MGR_ON_GOING;
 8008920:	f884 3198 	strb.w	r3, [r4, #408]	; 0x198
      if (cfunc->cmd == pbContextMgr.req.cmd) {
 8008924:	f894 0030 	ldrb.w	r0, [r4, #48]	; 0x30
 8008928:	6a63      	ldr	r3, [r4, #36]	; 0x24
    for (idx = 0; idx < pbContextMgr.n_func; idx++) {
 800892a:	42a9      	cmp	r1, r5
 800892c:	d00d      	beq.n	800894a <aiPbMgrWaitAndProcess+0x4a>
      cfunc = &pbContextMgr.funcs[idx];
 800892e:	461a      	mov	r2, r3
      if (cfunc->cmd == pbContextMgr.req.cmd) {
 8008930:	f813 6b0c 	ldrb.w	r6, [r3], #12
 8008934:	4286      	cmp	r6, r0
 8008936:	d11c      	bne.n	8008972 <aiPbMgrWaitAndProcess+0x72>
        cfunc->process(&(pbContextMgr.req), &(pbContextMgr.resp), cfunc->param);
 8008938:	4911      	ldr	r1, [pc, #68]	; (8008980 <aiPbMgrWaitAndProcess+0x80>)
 800893a:	e9d2 3201 	ldrd	r3, r2, [r2, #4]
 800893e:	f1a1 0054 	sub.w	r0, r1, #84	; 0x54
 8008942:	4798      	blx	r3
    if (idx == pbContextMgr.n_func) {
 8008944:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008946:	42ab      	cmp	r3, r5
 8008948:	d10c      	bne.n	8008964 <aiPbMgrWaitAndProcess+0x64>
    EnumState state, uint32_t param, EnumError error)
{
  resp->which_payload = respMsg_ack_tag;
  resp->payload.ack.param = param;
  resp->payload.ack.error = error;
  aiPbMgrSendResp(req, resp, state);
 800894a:	490d      	ldr	r1, [pc, #52]	; (8008980 <aiPbMgrWaitAndProcess+0x80>)
  resp->payload.ack.param = param;
 800894c:	2204      	movs	r2, #4
  resp->which_payload = respMsg_ack_tag;
 800894e:	230c      	movs	r3, #12
  aiPbMgrSendResp(req, resp, state);
 8008950:	f1a1 0054 	sub.w	r0, r1, #84	; 0x54
  resp->payload.ack.param = param;
 8008954:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
  resp->which_payload = respMsg_ack_tag;
 8008958:	f8a4 3086 	strh.w	r3, [r4, #134]	; 0x86
  resp->payload.ack.error = error;
 800895c:	f884 208c 	strb.w	r2, [r4, #140]	; 0x8c
  aiPbMgrSendResp(req, resp, state);
 8008960:	f7ff ffbc 	bl	80088dc <aiPbMgrSendResp>
    pbContextMgr.state = PB_MGR_READY;
 8008964:	2301      	movs	r3, #1
 8008966:	f884 3198 	strb.w	r3, [r4, #408]	; 0x198
  pb_io_flush_istream();
 800896a:	f7ff fe9b 	bl	80086a4 <pb_io_flush_istream>
}
 800896e:	2000      	movs	r0, #0
 8008970:	bd70      	pop	{r4, r5, r6, pc}
    for (idx = 0; idx < pbContextMgr.n_func; idx++) {
 8008972:	3501      	adds	r5, #1
 8008974:	e7d9      	b.n	800892a <aiPbMgrWaitAndProcess+0x2a>
 8008976:	bf00      	nop
 8008978:	240018d8 	.word	0x240018d8
 800897c:	08016ebb 	.word	0x08016ebb
 8008980:	24001958 	.word	0x24001958

08008984 <aiPbMgrSendAck>:
{
 8008984:	b470      	push	{r4, r5, r6}
  resp->which_payload = respMsg_ack_tag;
 8008986:	260c      	movs	r6, #12
{
 8008988:	f89d 500c 	ldrb.w	r5, [sp, #12]
  resp->payload.ack.param = param;
 800898c:	608b      	str	r3, [r1, #8]
  resp->which_payload = respMsg_ack_tag;
 800898e:	80ce      	strh	r6, [r1, #6]
  resp->payload.ack.error = error;
 8008990:	730d      	strb	r5, [r1, #12]
}
 8008992:	bc70      	pop	{r4, r5, r6}
  aiPbMgrSendResp(req, resp, state);
 8008994:	f7ff bfa2 	b.w	80088dc <aiPbMgrSendResp>

08008998 <aiPbMgrWaitAck>:

bool aiPbMgrWaitAck(void)
{
 8008998:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  bool res;
  ackMsg ack = ackMsg_init_default;
 800899a:	2300      	movs	r3, #0
  res = pb_decode_delimited(&pbContextMgr.input, ackMsg_fields, &ack);
 800899c:	aa02      	add	r2, sp, #8
 800899e:	4907      	ldr	r1, [pc, #28]	; (80089bc <aiPbMgrWaitAck+0x24>)
 80089a0:	4807      	ldr	r0, [pc, #28]	; (80089c0 <aiPbMgrWaitAck+0x28>)
  ackMsg ack = ackMsg_init_default;
 80089a2:	9302      	str	r3, [sp, #8]
 80089a4:	f88d 300c 	strb.w	r3, [sp, #12]
  res = pb_decode_delimited(&pbContextMgr.input, ackMsg_fields, &ack);
 80089a8:	f002 fc3e 	bl	800b228 <pb_decode_delimited>
 80089ac:	9001      	str	r0, [sp, #4]
  pb_io_flush_istream();
 80089ae:	f7ff fe79 	bl	80086a4 <pb_io_flush_istream>
  return res;
}
 80089b2:	9801      	ldr	r0, [sp, #4]
 80089b4:	b005      	add	sp, #20
 80089b6:	f85d fb04 	ldr.w	pc, [sp], #4
 80089ba:	bf00      	nop
 80089bc:	08016bc0 	.word	0x08016bc0
 80089c0:	240018d8 	.word	0x240018d8

080089c4 <aiPbMgrSendLogV2>:
  pb_io_flush_istream();
  return res;
}

bool aiPbMgrSendLogV2(EnumState state, uint32_t lvl, const char *str)
{
 80089c4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  bool res;
  ackMsg ack = ackMsg_init_default;

  if (pbContextMgr.state != PB_MGR_ON_GOING)
 80089c6:	4c19      	ldr	r4, [pc, #100]	; (8008a2c <aiPbMgrSendLogV2+0x68>)
{
 80089c8:	460e      	mov	r6, r1
 80089ca:	4611      	mov	r1, r2
  ackMsg ack = ackMsg_init_default;
 80089cc:	2300      	movs	r3, #0
  if (pbContextMgr.state != PB_MGR_ON_GOING)
 80089ce:	f894 2198 	ldrb.w	r2, [r4, #408]	; 0x198
{
 80089d2:	4605      	mov	r5, r0
  ackMsg ack = ackMsg_init_default;
 80089d4:	9302      	str	r3, [sp, #8]
  if (pbContextMgr.state != PB_MGR_ON_GOING)
 80089d6:	2a02      	cmp	r2, #2
  ackMsg ack = ackMsg_init_default;
 80089d8:	f88d 300c 	strb.w	r3, [sp, #12]
  if (pbContextMgr.state != PB_MGR_ON_GOING)
 80089dc:	d124      	bne.n	8008a28 <aiPbMgrSendLogV2+0x64>
    return false;

  size_t len = strlen(str);
 80089de:	4608      	mov	r0, r1
 80089e0:	9101      	str	r1, [sp, #4]
 80089e2:	f7f7 fc7d 	bl	80002e0 <strlen>
  pbContextMgr.resp.which_payload = respMsg_log_tag;
  pbContextMgr.resp.payload.log.level = lvl;
  if (len >= sizeof(pbContextMgr.resp.payload.log.str))
    len = sizeof(pbContextMgr.resp.payload.log.str) - 1;

  memcpy(&pbContextMgr.resp.payload.log.str[0], str, len+1);
 80089e6:	287f      	cmp	r0, #127	; 0x7f
  pbContextMgr.resp.which_payload = respMsg_log_tag;
 80089e8:	f04f 030d 	mov.w	r3, #13
  memcpy(&pbContextMgr.resp.payload.log.str[0], str, len+1);
 80089ec:	9901      	ldr	r1, [sp, #4]
 80089ee:	bf28      	it	cs
 80089f0:	207f      	movcs	r0, #127	; 0x7f
  pbContextMgr.resp.payload.log.level = lvl;
 80089f2:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
  pbContextMgr.resp.which_payload = respMsg_log_tag;
 80089f6:	f8a4 3086 	strh.w	r3, [r4, #134]	; 0x86
  memcpy(&pbContextMgr.resp.payload.log.str[0], str, len+1);
 80089fa:	1c42      	adds	r2, r0, #1
 80089fc:	f104 008c 	add.w	r0, r4, #140	; 0x8c
 8008a00:	f00a face 	bl	8012fa0 <memcpy>

  aiPbMgrSendResp(&(pbContextMgr.req), &(pbContextMgr.resp), state);
 8008a04:	f104 0180 	add.w	r1, r4, #128	; 0x80
 8008a08:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8008a0c:	462a      	mov	r2, r5
 8008a0e:	f7ff ff65 	bl	80088dc <aiPbMgrSendResp>

  res = pb_decode_delimited(&pbContextMgr.input, ackMsg_fields, &ack);
 8008a12:	4620      	mov	r0, r4
 8008a14:	aa02      	add	r2, sp, #8
 8008a16:	4906      	ldr	r1, [pc, #24]	; (8008a30 <aiPbMgrSendLogV2+0x6c>)
 8008a18:	f002 fc06 	bl	800b228 <pb_decode_delimited>
 8008a1c:	4604      	mov	r4, r0
  pb_io_flush_istream();
 8008a1e:	f7ff fe41 	bl	80086a4 <pb_io_flush_istream>
  return res;
}
 8008a22:	4620      	mov	r0, r4
 8008a24:	b004      	add	sp, #16
 8008a26:	bd70      	pop	{r4, r5, r6, pc}
    return false;
 8008a28:	461c      	mov	r4, r3
 8008a2a:	e7fa      	b.n	8008a22 <aiPbMgrSendLogV2+0x5e>
 8008a2c:	240018d8 	.word	0x240018d8
 8008a30:	08016bc0 	.word	0x08016bc0

08008a34 <aiPbMgrReceiveData>:

bool aiPbMgrReceiveData(aiPbData *data)
{
 8008a34:	b510      	push	{r4, lr}
  aiDataMsg msg;

  msg.datas.funcs.decode = &decode_data_cb;
 8008a36:	4b09      	ldr	r3, [pc, #36]	; (8008a5c <aiPbMgrReceiveData+0x28>)
{
 8008a38:	b086      	sub	sp, #24
 8008a3a:	4604      	mov	r4, r0
  msg.datas.arg = (void *)data;

  /* Waiting and decoding aiDataMsg message */
  pb_decode_delimited(&pbContextMgr.input, aiDataMsg_fields, &msg);
 8008a3c:	4908      	ldr	r1, [pc, #32]	; (8008a60 <aiPbMgrReceiveData+0x2c>)
 8008a3e:	aa01      	add	r2, sp, #4
  msg.datas.arg = (void *)data;
 8008a40:	e9cd 3004 	strd	r3, r0, [sp, #16]
  pb_decode_delimited(&pbContextMgr.input, aiDataMsg_fields, &msg);
 8008a44:	4807      	ldr	r0, [pc, #28]	; (8008a64 <aiPbMgrReceiveData+0x30>)
 8008a46:	f002 fbef 	bl	800b228 <pb_decode_delimited>
  pb_io_flush_istream();
 8008a4a:	f7ff fe2b 	bl	80086a4 <pb_io_flush_istream>

  data->type = msg.type;
 8008a4e:	9b01      	ldr	r3, [sp, #4]
  data->addr = msg.addr;

  return true;
}
 8008a50:	2001      	movs	r0, #1
  data->type = msg.type;
 8008a52:	6023      	str	r3, [r4, #0]
  data->addr = msg.addr;
 8008a54:	9b03      	ldr	r3, [sp, #12]
 8008a56:	60a3      	str	r3, [r4, #8]
}
 8008a58:	b006      	add	sp, #24
 8008a5a:	bd10      	pop	{r4, pc}
 8008a5c:	08008771 	.word	0x08008771
 8008a60:	08016bf4 	.word	0x08016bf4
 8008a64:	240018d8 	.word	0x240018d8

08008a68 <aiPbMgrSendOperator>:


bool aiPbMgrSendOperator(const reqMsg *req, respMsg *resp,
    EnumState state, const char *name, const uint32_t type, const uint32_t id,
    aiOpPerf *perf)
{
 8008a68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a6a:	4617      	mov	r7, r2
 8008a6c:	b085      	sub	sp, #20
  struct _encode_uint32 array;
  resp->which_payload = respMsg_op_tag;
 8008a6e:	2210      	movs	r2, #16
{
 8008a70:	4606      	mov	r6, r0
 8008a72:	460c      	mov	r4, r1
 8008a74:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  if (name)
 8008a76:	4618      	mov	r0, r3
  resp->which_payload = respMsg_op_tag;
 8008a78:	80ca      	strh	r2, [r1, #6]
  if (name)
 8008a7a:	b1fb      	cbz	r3, 8008abc <aiPbMgrSendOperator+0x54>
    aiPbStrCopy(name, &resp->payload.op.name[0], sizeof(resp->payload.op.name));
 8008a7c:	2240      	movs	r2, #64	; 0x40
 8008a7e:	3108      	adds	r1, #8
 8008a80:	f7ff fed0 	bl	8008824 <aiPbStrCopy>
  else
    resp->payload.op.name[0] = 0;
  resp->payload.op.type = type;
 8008a84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a86:	64a3      	str	r3, [r4, #72]	; 0x48
  resp->payload.op.id = id;
 8008a88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a8a:	64e3      	str	r3, [r4, #76]	; 0x4c

  if (perf) {
 8008a8c:	b1d5      	cbz	r5, 8008ac4 <aiPbMgrSendOperator+0x5c>
    resp->payload.op.duration = perf->duration;
 8008a8e:	682b      	ldr	r3, [r5, #0]
 8008a90:	6523      	str	r3, [r4, #80]	; 0x50
    resp->payload.op.counter_type = perf->counter_type;
 8008a92:	686b      	ldr	r3, [r5, #4]
 8008a94:	6563      	str	r3, [r4, #84]	; 0x54
    if (perf->counters) {
 8008a96:	68eb      	ldr	r3, [r5, #12]
 8008a98:	b193      	cbz	r3, 8008ac0 <aiPbMgrSendOperator+0x58>
      array.size = perf->counter_n;
 8008a9a:	68aa      	ldr	r2, [r5, #8]
	  array.data = (void *)perf->counters;
 8008a9c:	e9cd 2301 	strd	r2, r3, [sp, #4]
	  array.offset = 4;
 8008aa0:	2304      	movs	r3, #4
 8008aa2:	9303      	str	r3, [sp, #12]
      resp->payload.op.counters.funcs.encode = encode_uint32;
 8008aa4:	4b0a      	ldr	r3, [pc, #40]	; (8008ad0 <aiPbMgrSendOperator+0x68>)
 8008aa6:	65a3      	str	r3, [r4, #88]	; 0x58
      resp->payload.op.counters.arg = &array;
 8008aa8:	ab01      	add	r3, sp, #4
 8008aaa:	65e3      	str	r3, [r4, #92]	; 0x5c
    resp->payload.op.duration = 0.0f;
    resp->payload.op.counter_type = 0;
    resp->payload.op.counters.funcs.encode = NULL;
  }

  aiPbMgrSendResp(req, resp, state);
 8008aac:	4630      	mov	r0, r6
 8008aae:	463a      	mov	r2, r7
 8008ab0:	4621      	mov	r1, r4
 8008ab2:	f7ff ff13 	bl	80088dc <aiPbMgrSendResp>
  // aiPbMgrWaitAck();

  return true;
}
 8008ab6:	2001      	movs	r0, #1
 8008ab8:	b005      	add	sp, #20
 8008aba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    resp->payload.op.name[0] = 0;
 8008abc:	720b      	strb	r3, [r1, #8]
 8008abe:	e7e1      	b.n	8008a84 <aiPbMgrSendOperator+0x1c>
      resp->payload.op.counters.funcs.encode = NULL;
 8008ac0:	65a3      	str	r3, [r4, #88]	; 0x58
 8008ac2:	e7f3      	b.n	8008aac <aiPbMgrSendOperator+0x44>
    resp->payload.op.duration = 0.0f;
 8008ac4:	2300      	movs	r3, #0
    resp->payload.op.counters.funcs.encode = NULL;
 8008ac6:	e9c4 5515 	strd	r5, r5, [r4, #84]	; 0x54
    resp->payload.op.duration = 0.0f;
 8008aca:	6523      	str	r3, [r4, #80]	; 0x50
    resp->payload.op.counter_type = 0;
 8008acc:	e7ee      	b.n	8008aac <aiPbMgrSendOperator+0x44>
 8008ace:	bf00      	nop
 8008ad0:	080086fb 	.word	0x080086fb

08008ad4 <aiPbCmdSync>:
#define _ARM_TOOLS_ID       EnumTools_AI_MDK_5
#endif


void aiPbCmdSync(const reqMsg *req, respMsg *resp, void *param)
{
 8008ad4:	b410      	push	{r4}
  resp->which_payload = respMsg_sync_tag;
 8008ad6:	240a      	movs	r4, #10
 8008ad8:	80cc      	strh	r4, [r1, #6]
  resp->payload.sync.version =
 8008ada:	f44f 7440 	mov.w	r4, #768	; 0x300
 8008ade:	608c      	str	r4, [r1, #8]
#if defined(AI_PB_TEST) && (AI_PB_TEST == 1)
  resp->payload.sync.capability |= EnumCapability_CAP_SELF_TEST;
#endif

  resp->payload.sync.rtid = (uint32_t)param >> 16;
  resp->payload.sync.capability |= ((uint32_t)param & 0xFFFF);
 8008ae0:	b294      	uxth	r4, r2
  resp->payload.sync.rtid = (uint32_t)param >> 16;
 8008ae2:	0c12      	lsrs	r2, r2, #16
  resp->payload.sync.capability |= ((uint32_t)param & 0xFFFF);
 8008ae4:	60cc      	str	r4, [r1, #12]

  resp->payload.sync.rtid |= (_ARM_TOOLS_ID << 8);
 8008ae6:	f442 7280 	orr.w	r2, r2, #256	; 0x100

  aiPbMgrSendResp(req, resp, EnumState_S_IDLE);
}
 8008aea:	f85d 4b04 	ldr.w	r4, [sp], #4
  resp->payload.sync.rtid |= (_ARM_TOOLS_ID << 8);
 8008aee:	610a      	str	r2, [r1, #16]
  aiPbMgrSendResp(req, resp, EnumState_S_IDLE);
 8008af0:	2200      	movs	r2, #0
 8008af2:	f7ff bef3 	b.w	80088dc <aiPbMgrSendResp>
	...

08008af8 <aiPlatformVersion>:

#include <ai_platform_interface.h>


void aiPlatformVersion(void)
{
 8008af8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  const ai_platform_version rt_ver = ai_platform_runtime_get_version();
 8008afa:	f003 fa8f 	bl	800c01c <ai_platform_runtime_get_version>

  LC_PRINT("\r\nAI platform (API %d.%d.%d - RUNTIME %d.%d.%d)\r\n",
 8008afe:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8008b02:	2201      	movs	r2, #1
 8008b04:	9302      	str	r3, [sp, #8]
 8008b06:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8008b0a:	b2c0      	uxtb	r0, r0
 8008b0c:	4611      	mov	r1, r2
 8008b0e:	9301      	str	r3, [sp, #4]
 8008b10:	2300      	movs	r3, #0
 8008b12:	9000      	str	r0, [sp, #0]
 8008b14:	4802      	ldr	r0, [pc, #8]	; (8008b20 <aiPlatformVersion+0x28>)
 8008b16:	f000 fa45 	bl	8008fa4 <lc_print>
      AI_PLATFORM_API_MINOR,
      AI_PLATFORM_API_MICRO,
      rt_ver.major,
      rt_ver.minor,
      rt_ver.micro);
}
 8008b1a:	b007      	add	sp, #28
 8008b1c:	f85d fb04 	ldr.w	pc, [sp], #4
 8008b20:	080160d4 	.word	0x080160d4

08008b24 <aiLogErr>:

void aiLogErr(const ai_error err, const char *fct)
{
 8008b24:	b410      	push	{r4}
  if (fct)
    LC_PRINT("E: AI error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 8008b26:	f3c0 2317 	ubfx	r3, r0, #8, #24
 8008b2a:	b2c4      	uxtb	r4, r0
  if (fct)
 8008b2c:	b129      	cbz	r1, 8008b3a <aiLogErr+0x16>
    LC_PRINT("E: AI error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 8008b2e:	4622      	mov	r2, r4
 8008b30:	4805      	ldr	r0, [pc, #20]	; (8008b48 <aiLogErr+0x24>)
        err.type, err.code);
  else
    LC_PRINT("E: AI error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
}
 8008b32:	f85d 4b04 	ldr.w	r4, [sp], #4
    LC_PRINT("E: AI error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 8008b36:	f000 ba35 	b.w	8008fa4 <lc_print>
    LC_PRINT("E: AI error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
 8008b3a:	4621      	mov	r1, r4
 8008b3c:	461a      	mov	r2, r3
 8008b3e:	4803      	ldr	r0, [pc, #12]	; (8008b4c <aiLogErr+0x28>)
}
 8008b40:	f85d 4b04 	ldr.w	r4, [sp], #4
    LC_PRINT("E: AI error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
 8008b44:	f000 ba2e 	b.w	8008fa4 <lc_print>
 8008b48:	08016106 	.word	0x08016106
 8008b4c:	08016133 	.word	0x08016133

08008b50 <aiPrintBufferInfo>:
void aiPrintBufferInfo(const ai_buffer *buffer)
{
  const ai_buffer_format fmt = buffer->format;

  /* shape + nb elem */
  LC_PRINT("(%d,%d,%d,",
 8008b50:	6981      	ldr	r1, [r0, #24]
{
 8008b52:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008b56:	4604      	mov	r4, r0
  const ai_buffer_format fmt = buffer->format;
 8008b58:	6806      	ldr	r6, [r0, #0]
  LC_PRINT("(%d,%d,%d,",
 8008b5a:	4871      	ldr	r0, [pc, #452]	; (8008d20 <aiPrintBufferInfo+0x1d0>)
 8008b5c:	e9d1 3202 	ldrd	r3, r2, [r1, #8]
{
 8008b60:	ed2d 8b02 	vpush	{d8}
  LC_PRINT("(%d,%d,%d,",
 8008b64:	6809      	ldr	r1, [r1, #0]
{
 8008b66:	b083      	sub	sp, #12
  LC_PRINT("(%d,%d,%d,",
 8008b68:	f000 fa1c 	bl	8008fa4 <lc_print>
     AI_BUFFER_SHAPE_ELEM(buffer, AI_SHAPE_BATCH),
     AI_BUFFER_SHAPE_ELEM(buffer, AI_SHAPE_HEIGHT),
     AI_BUFFER_SHAPE_ELEM(buffer, AI_SHAPE_WIDTH));

  if (AI_BUFFER_SHAPE_SIZE(buffer) == 5)
 8008b6c:	6962      	ldr	r2, [r4, #20]
 8008b6e:	69a0      	ldr	r0, [r4, #24]
 8008b70:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8008b74:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 8008b78:	d12d      	bne.n	8008bd6 <aiPrintBufferInfo+0x86>
  {
    LC_PRINT("%d,%d)",
 8008b7a:	6842      	ldr	r2, [r0, #4]
 8008b7c:	6901      	ldr	r1, [r0, #16]
 8008b7e:	4869      	ldr	r0, [pc, #420]	; (8008d24 <aiPrintBufferInfo+0x1d4>)
 8008b80:	f000 fa10 	bl	8008fa4 <lc_print>
  } else
  {
    LC_PRINT("%d)", (int)AI_BUFFER_SHAPE_ELEM(buffer, AI_SHAPE_CHANNEL));
  }

  LC_PRINT("%d/", (int)AI_BUFFER_SIZE(buffer));
 8008b84:	2101      	movs	r1, #1
 8008b86:	4620      	mov	r0, r4
    if (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_FLOAT)
 8008b88:	f3c6 4743 	ubfx	r7, r6, #17, #4
  LC_PRINT("%d/", (int)AI_BUFFER_SIZE(buffer));
 8008b8c:	f003 f80c 	bl	800bba8 <ai_buffer_get_size>
 8008b90:	4601      	mov	r1, r0
 8008b92:	4865      	ldr	r0, [pc, #404]	; (8008d28 <aiPrintBufferInfo+0x1d8>)
 8008b94:	f000 fa06 	bl	8008fa4 <lc_print>
    if (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_FLOAT)
 8008b98:	2f01      	cmp	r7, #1
      LC_PRINT("float%d", (int)AI_BUFFER_FMT_GET_BITS(fmt));
 8008b9a:	ea4f 18e6 	mov.w	r8, r6, asr #7
 8008b9e:	f3c6 15c6 	ubfx	r5, r6, #7, #7
    if (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_FLOAT)
 8008ba2:	d127      	bne.n	8008bf4 <aiPrintBufferInfo+0xa4>
      LC_PRINT("float%d", (int)AI_BUFFER_FMT_GET_BITS(fmt));
 8008ba4:	4629      	mov	r1, r5
 8008ba6:	4861      	ldr	r0, [pc, #388]	; (8008d2c <aiPrintBufferInfo+0x1dc>)
      LC_PRINT("bool%d", (int)AI_BUFFER_FMT_GET_BITS(fmt));
 8008ba8:	f000 f9fc 	bl	8008fa4 <lc_print>
          AI_BUFFER_FMT_GET_FBITS(fmt)
      );
    }
  }
  /* @ + size in bytes */
  if (buffer->data)
 8008bac:	6865      	ldr	r5, [r4, #4]
    LC_PRINT(" @0x%X/%d",
 8008bae:	2101      	movs	r1, #1
 8008bb0:	4620      	mov	r0, r4
  if (buffer->data)
 8008bb2:	2d00      	cmp	r5, #0
 8008bb4:	f000 809e 	beq.w	8008cf4 <aiPrintBufferInfo+0x1a4>
    LC_PRINT(" @0x%X/%d",
 8008bb8:	f002 fff6 	bl	800bba8 <ai_buffer_get_size>
 8008bbc:	4631      	mov	r1, r6
 8008bbe:	f003 f827 	bl	800bc10 <ai_buffer_get_byte_size>
 8008bc2:	4629      	mov	r1, r5
 8008bc4:	4602      	mov	r2, r0
 8008bc6:	485a      	ldr	r0, [pc, #360]	; (8008d30 <aiPrintBufferInfo+0x1e0>)
    );
  else
    LC_PRINT(" (User Domain)/%d",
        (int)AI_BUFFER_BYTE_SIZE(AI_BUFFER_SIZE(buffer), fmt)
    );
}
 8008bc8:	b003      	add	sp, #12
 8008bca:	ecbd 8b02 	vpop	{d8}
 8008bce:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    LC_PRINT(" @0x%X/%d",
 8008bd2:	f000 b9e7 	b.w	8008fa4 <lc_print>
  else if (AI_BUFFER_SHAPE_SIZE(buffer) == 6)
 8008bd6:	f5b2 6fc0 	cmp.w	r2, #1536	; 0x600
    LC_PRINT("%d,%d)",
 8008bda:	6843      	ldr	r3, [r0, #4]
  else if (AI_BUFFER_SHAPE_SIZE(buffer) == 6)
 8008bdc:	d105      	bne.n	8008bea <aiPrintBufferInfo+0x9a>
    LC_PRINT("%d,%d,%d)",
 8008bde:	e9d0 1204 	ldrd	r1, r2, [r0, #16]
 8008be2:	4854      	ldr	r0, [pc, #336]	; (8008d34 <aiPrintBufferInfo+0x1e4>)
 8008be4:	f000 f9de 	bl	8008fa4 <lc_print>
 8008be8:	e7cc      	b.n	8008b84 <aiPrintBufferInfo+0x34>
    LC_PRINT("%d)", (int)AI_BUFFER_SHAPE_ELEM(buffer, AI_SHAPE_CHANNEL));
 8008bea:	4619      	mov	r1, r3
 8008bec:	4852      	ldr	r0, [pc, #328]	; (8008d38 <aiPrintBufferInfo+0x1e8>)
 8008bee:	f000 f9d9 	bl	8008fa4 <lc_print>
 8008bf2:	e7c7      	b.n	8008b84 <aiPrintBufferInfo+0x34>
    else if (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_BOOL) {
 8008bf4:	2f03      	cmp	r7, #3
 8008bf6:	d102      	bne.n	8008bfe <aiPrintBufferInfo+0xae>
      LC_PRINT("bool%d", (int)AI_BUFFER_FMT_GET_BITS(fmt));
 8008bf8:	4629      	mov	r1, r5
 8008bfa:	4850      	ldr	r0, [pc, #320]	; (8008d3c <aiPrintBufferInfo+0x1ec>)
 8008bfc:	e7d4      	b.n	8008ba8 <aiPrintBufferInfo+0x58>
      LC_PRINT("%s%d", AI_BUFFER_FMT_GET_SIGN(fmt)?"i":"u",
 8008bfe:	f8df 9154 	ldr.w	r9, [pc, #340]	; 8008d54 <aiPrintBufferInfo+0x204>
 8008c02:	f416 0f00 	tst.w	r6, #8388608	; 0x800000
 8008c06:	462a      	mov	r2, r5
 8008c08:	f109 0102 	add.w	r1, r9, #2
 8008c0c:	f109 003b 	add.w	r0, r9, #59	; 0x3b
 8008c10:	bf18      	it	ne
 8008c12:	4649      	movne	r1, r9
 8008c14:	f000 f9c6 	bl	8008fa4 <lc_print>
  if (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_Q) {
 8008c18:	2f02      	cmp	r7, #2
 8008c1a:	d1c7      	bne.n	8008bac <aiPrintBufferInfo+0x5c>
    if (AI_BUFFER_META_INFO_INTQ(buffer->meta_info)) {
 8008c1c:	68a3      	ldr	r3, [r4, #8]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d057      	beq.n	8008cd2 <aiPrintBufferInfo+0x182>
 8008c22:	681a      	ldr	r2, [r3, #0]
 8008c24:	07d2      	lsls	r2, r2, #31
 8008c26:	d554      	bpl.n	8008cd2 <aiPrintBufferInfo+0x182>
 8008c28:	685b      	ldr	r3, [r3, #4]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d051      	beq.n	8008cd2 <aiPrintBufferInfo+0x182>
      ai_u16 s_ = AI_BUFFER_META_INFO_INTQ_GET_SIZE(buffer->meta_info);
 8008c2e:	f8b3 8002 	ldrh.w	r8, [r3, #2]
      LC_PRINT(" %d:", s_);
 8008c32:	f109 0040 	add.w	r0, r9, #64	; 0x40
      for (int idx=0; idx<max_; idx++) {
 8008c36:	2500      	movs	r5, #0
        ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, idx);
 8008c38:	ed9f 8a41 	vldr	s16, [pc, #260]	; 8008d40 <aiPrintBufferInfo+0x1f0>
      const int max_ = s_> 4?4:s_;
 8008c3c:	4647      	mov	r7, r8
        LC_PRINT("(%f,%d),", (double)scale, zero_point);
 8008c3e:	f109 0945 	add.w	r9, r9, #69	; 0x45
      LC_PRINT(" %d:", s_);
 8008c42:	4641      	mov	r1, r8
      const int max_ = s_> 4?4:s_;
 8008c44:	2f04      	cmp	r7, #4
 8008c46:	bf28      	it	cs
 8008c48:	2704      	movcs	r7, #4
      LC_PRINT(" %d:", s_);
 8008c4a:	f000 f9ab 	bl	8008fa4 <lc_print>
      for (int idx=0; idx<max_; idx++) {
 8008c4e:	42bd      	cmp	r5, r7
 8008c50:	db07      	blt.n	8008c62 <aiPrintBufferInfo+0x112>
      LC_PRINT((s_ > max_)?"..":"");
 8008c52:	4b3c      	ldr	r3, [pc, #240]	; (8008d44 <aiPrintBufferInfo+0x1f4>)
 8008c54:	1cd8      	adds	r0, r3, #3
 8008c56:	4547      	cmp	r7, r8
 8008c58:	bf38      	it	cc
 8008c5a:	4618      	movcc	r0, r3
 8008c5c:	f000 f9a2 	bl	8008fa4 <lc_print>
    if (AI_BUFFER_META_INFO_INTQ(buffer->meta_info)) {
 8008c60:	e7a4      	b.n	8008bac <aiPrintBufferInfo+0x5c>
        ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, idx);
 8008c62:	68a1      	ldr	r1, [r4, #8]
 8008c64:	2900      	cmp	r1, #0
 8008c66:	d053      	beq.n	8008d10 <aiPrintBufferInfo+0x1c0>
 8008c68:	680a      	ldr	r2, [r1, #0]
 8008c6a:	f012 0301 	ands.w	r3, r2, #1
 8008c6e:	d02b      	beq.n	8008cc8 <aiPrintBufferInfo+0x178>
 8008c70:	6849      	ldr	r1, [r1, #4]
 8008c72:	2900      	cmp	r1, #0
 8008c74:	d04c      	beq.n	8008d10 <aiPrintBufferInfo+0x1c0>
 8008c76:	684b      	ldr	r3, [r1, #4]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d04d      	beq.n	8008d18 <aiPrintBufferInfo+0x1c8>
 8008c7c:	884a      	ldrh	r2, [r1, #2]
 8008c7e:	42aa      	cmp	r2, r5
 8008c80:	dd4a      	ble.n	8008d18 <aiPrintBufferInfo+0x1c8>
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8008c88:	edd3 7a00 	vldr	s15, [r3]
        int zero_point = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(buffer->meta_info, idx);
 8008c8c:	2900      	cmp	r1, #0
 8008c8e:	d041      	beq.n	8008d14 <aiPrintBufferInfo+0x1c4>
 8008c90:	880a      	ldrh	r2, [r1, #0]
        ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, idx);
 8008c92:	6848      	ldr	r0, [r1, #4]
        int zero_point = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(buffer->meta_info, idx);
 8008c94:	f012 0302 	ands.w	r3, r2, #2
 8008c98:	d00f      	beq.n	8008cba <aiPrintBufferInfo+0x16a>
 8008c9a:	b1c0      	cbz	r0, 8008cce <aiPrintBufferInfo+0x17e>
 8008c9c:	884b      	ldrh	r3, [r1, #2]
 8008c9e:	42ab      	cmp	r3, r5
 8008ca0:	dd38      	ble.n	8008d14 <aiPrintBufferInfo+0x1c4>
 8008ca2:	6843      	ldr	r3, [r0, #4]
 8008ca4:	5d5b      	ldrb	r3, [r3, r5]
        LC_PRINT("(%f,%d),", (double)scale, zero_point);
 8008ca6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8008caa:	9300      	str	r3, [sp, #0]
 8008cac:	4648      	mov	r0, r9
      for (int idx=0; idx<max_; idx++) {
 8008cae:	3501      	adds	r5, #1
        LC_PRINT("(%f,%d),", (double)scale, zero_point);
 8008cb0:	ec53 2b17 	vmov	r2, r3, d7
 8008cb4:	f000 f976 	bl	8008fa4 <lc_print>
      for (int idx=0; idx<max_; idx++) {
 8008cb8:	e7c9      	b.n	8008c4e <aiPrintBufferInfo+0xfe>
        int zero_point = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(buffer->meta_info, idx);
 8008cba:	b140      	cbz	r0, 8008cce <aiPrintBufferInfo+0x17e>
 8008cbc:	884a      	ldrh	r2, [r1, #2]
 8008cbe:	42aa      	cmp	r2, r5
 8008cc0:	ddf1      	ble.n	8008ca6 <aiPrintBufferInfo+0x156>
 8008cc2:	6843      	ldr	r3, [r0, #4]
 8008cc4:	575b      	ldrsb	r3, [r3, r5]
 8008cc6:	e7ee      	b.n	8008ca6 <aiPrintBufferInfo+0x156>
        ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, idx);
 8008cc8:	eef0 7a48 	vmov.f32	s15, s16
 8008ccc:	e7eb      	b.n	8008ca6 <aiPrintBufferInfo+0x156>
        int zero_point = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(buffer->meta_info, idx);
 8008cce:	4603      	mov	r3, r0
 8008cd0:	e7e9      	b.n	8008ca6 <aiPrintBufferInfo+0x156>
    } else if (AI_BUFFER_FMT_GET_BITS(fmt) < 8) {
 8008cd2:	f018 0f78 	tst.w	r8, #120	; 0x78
 8008cd6:	d102      	bne.n	8008cde <aiPrintBufferInfo+0x18e>
      LC_PRINT(" int32-%db", (int)AI_BUFFER_FMT_GET_BITS(fmt));
 8008cd8:	4629      	mov	r1, r5
 8008cda:	481b      	ldr	r0, [pc, #108]	; (8008d48 <aiPrintBufferInfo+0x1f8>)
 8008cdc:	e764      	b.n	8008ba8 <aiPrintBufferInfo+0x58>
      LC_PRINT(" Q%d.%d",
 8008cde:	f006 027f 	and.w	r2, r6, #127	; 0x7f
 8008ce2:	f3c6 51c0 	ubfx	r1, r6, #23, #1
 8008ce6:	4819      	ldr	r0, [pc, #100]	; (8008d4c <aiPrintBufferInfo+0x1fc>)
 8008ce8:	3a40      	subs	r2, #64	; 0x40
 8008cea:	4411      	add	r1, r2
 8008cec:	1a69      	subs	r1, r5, r1
 8008cee:	f000 f959 	bl	8008fa4 <lc_print>
 8008cf2:	e75b      	b.n	8008bac <aiPrintBufferInfo+0x5c>
    LC_PRINT(" (User Domain)/%d",
 8008cf4:	f002 ff58 	bl	800bba8 <ai_buffer_get_size>
 8008cf8:	4631      	mov	r1, r6
 8008cfa:	f002 ff89 	bl	800bc10 <ai_buffer_get_byte_size>
 8008cfe:	4601      	mov	r1, r0
 8008d00:	4813      	ldr	r0, [pc, #76]	; (8008d50 <aiPrintBufferInfo+0x200>)
}
 8008d02:	b003      	add	sp, #12
 8008d04:	ecbd 8b02 	vpop	{d8}
 8008d08:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    LC_PRINT(" (User Domain)/%d",
 8008d0c:	f000 b94a 	b.w	8008fa4 <lc_print>
        ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, idx);
 8008d10:	eef0 7a48 	vmov.f32	s15, s16
        int zero_point = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(buffer->meta_info, idx);
 8008d14:	2300      	movs	r3, #0
 8008d16:	e7c6      	b.n	8008ca6 <aiPrintBufferInfo+0x156>
        ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, idx);
 8008d18:	eef0 7a48 	vmov.f32	s15, s16
 8008d1c:	e7b6      	b.n	8008c8c <aiPrintBufferInfo+0x13c>
 8008d1e:	bf00      	nop
 8008d20:	08016163 	.word	0x08016163
 8008d24:	0801616e 	.word	0x0801616e
 8008d28:	08016183 	.word	0x08016183
 8008d2c:	08016187 	.word	0x08016187
 8008d30:	080161bc 	.word	0x080161bc
 8008d34:	08016175 	.word	0x08016175
 8008d38:	0801617f 	.word	0x0801617f
 8008d3c:	0801618f 	.word	0x0801618f
 8008d40:	00000000 	.word	0x00000000
 8008d44:	0801615f 	.word	0x0801615f
 8008d48:	080161a9 	.word	0x080161a9
 8008d4c:	080161b4 	.word	0x080161b4
 8008d50:	080161c6 	.word	0x080161c6
 8008d54:	0801615b 	.word	0x0801615b

08008d58 <aiPrintNetworkInfo>:

void aiPrintNetworkInfo(const ai_network_report* report)
{
 8008d58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d5c:	4604      	mov	r4, r0
  LC_PRINT("Network informations...\r\n");
 8008d5e:	484e      	ldr	r0, [pc, #312]	; (8008e98 <aiPrintNetworkInfo+0x140>)
 8008d60:	f000 f920 	bl	8008fa4 <lc_print>
  LC_PRINT(" model name         : %s\r\n", report->model_name);
 8008d64:	484d      	ldr	r0, [pc, #308]	; (8008e9c <aiPrintNetworkInfo+0x144>)
 8008d66:	6821      	ldr	r1, [r4, #0]
 8008d68:	f000 f91c 	bl	8008fa4 <lc_print>
  LC_PRINT(" model signature    : %s\r\n", report->model_signature);
 8008d6c:	6861      	ldr	r1, [r4, #4]
 8008d6e:	484c      	ldr	r0, [pc, #304]	; (8008ea0 <aiPrintNetworkInfo+0x148>)
 8008d70:	f000 f918 	bl	8008fa4 <lc_print>
  LC_PRINT(" model datetime     : %s\r\n", report->model_datetime);
 8008d74:	68a1      	ldr	r1, [r4, #8]
 8008d76:	484b      	ldr	r0, [pc, #300]	; (8008ea4 <aiPrintNetworkInfo+0x14c>)
 8008d78:	f000 f914 	bl	8008fa4 <lc_print>
  LC_PRINT(" compile datetime   : %s\r\n", report->compile_datetime);
 8008d7c:	68e1      	ldr	r1, [r4, #12]
 8008d7e:	484a      	ldr	r0, [pc, #296]	; (8008ea8 <aiPrintNetworkInfo+0x150>)
 8008d80:	f000 f910 	bl	8008fa4 <lc_print>
  LC_PRINT(" runtime version    : %d.%d.%d\r\n",
 8008d84:	7da3      	ldrb	r3, [r4, #22]
 8008d86:	7d21      	ldrb	r1, [r4, #20]
 8008d88:	7d62      	ldrb	r2, [r4, #21]
 8008d8a:	4848      	ldr	r0, [pc, #288]	; (8008eac <aiPrintNetworkInfo+0x154>)
 8008d8c:	f000 f90a 	bl	8008fa4 <lc_print>
      report->runtime_version.major,
      report->runtime_version.minor,
      report->runtime_version.micro);
  if (report->tool_revision[0])
 8008d90:	69a1      	ldr	r1, [r4, #24]
 8008d92:	780b      	ldrb	r3, [r1, #0]
 8008d94:	b113      	cbz	r3, 8008d9c <aiPrintNetworkInfo+0x44>
    LC_PRINT(" Tool revision      : %s\r\n", (report->tool_revision[0])?report->tool_revision:"");
 8008d96:	4846      	ldr	r0, [pc, #280]	; (8008eb0 <aiPrintNetworkInfo+0x158>)
 8008d98:	f000 f904 	bl	8008fa4 <lc_print>
  LC_PRINT(" tools version      : %d.%d.%d\r\n",
 8008d9c:	7fa3      	ldrb	r3, [r4, #30]
      report->tool_version.micro);
  LC_PRINT(" complexity         : %lu MACC\r\n", (unsigned long)report->n_macc);
  LC_PRINT(" c-nodes            : %d\r\n", (int)report->n_nodes);

  LC_PRINT(" map_activations    : %d\r\n", report->map_activations.size);
  for (int idx=0; idx<report->map_activations.size;idx++) {
 8008d9e:	2500      	movs	r5, #0
  LC_PRINT(" tools version      : %d.%d.%d\r\n",
 8008da0:	7f62      	ldrb	r2, [r4, #29]
      const ai_buffer *buffer = &report->map_activations.buffer[idx];
 8008da2:	f04f 081c 	mov.w	r8, #28
  LC_PRINT(" tools version      : %d.%d.%d\r\n",
 8008da6:	7f21      	ldrb	r1, [r4, #28]
 8008da8:	4842      	ldr	r0, [pc, #264]	; (8008eb4 <aiPrintNetworkInfo+0x15c>)
      LC_PRINT("  [%d] ", idx);
 8008daa:	4f43      	ldr	r7, [pc, #268]	; (8008eb8 <aiPrintNetworkInfo+0x160>)
  LC_PRINT(" tools version      : %d.%d.%d\r\n",
 8008dac:	f000 f8fa 	bl	8008fa4 <lc_print>
  LC_PRINT(" complexity         : %lu MACC\r\n", (unsigned long)report->n_macc);
 8008db0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8008db2:	4842      	ldr	r0, [pc, #264]	; (8008ebc <aiPrintNetworkInfo+0x164>)
      aiPrintBufferInfo(buffer);
      LC_PRINT("\r\n");
 8008db4:	f107 0908 	add.w	r9, r7, #8
  LC_PRINT(" complexity         : %lu MACC\r\n", (unsigned long)report->n_macc);
 8008db8:	f000 f8f4 	bl	8008fa4 <lc_print>
  LC_PRINT(" c-nodes            : %d\r\n", (int)report->n_nodes);
 8008dbc:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8008dbe:	4840      	ldr	r0, [pc, #256]	; (8008ec0 <aiPrintNetworkInfo+0x168>)
 8008dc0:	f000 f8f0 	bl	8008fa4 <lc_print>
  LC_PRINT(" map_activations    : %d\r\n", report->map_activations.size);
 8008dc4:	f8b4 104a 	ldrh.w	r1, [r4, #74]	; 0x4a
 8008dc8:	483e      	ldr	r0, [pc, #248]	; (8008ec4 <aiPrintNetworkInfo+0x16c>)
 8008dca:	f000 f8eb 	bl	8008fa4 <lc_print>
  for (int idx=0; idx<report->map_activations.size;idx++) {
 8008dce:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
 8008dd2:	42ab      	cmp	r3, r5
 8008dd4:	dc25      	bgt.n	8008e22 <aiPrintNetworkInfo+0xca>
  }

  LC_PRINT(" map_weights        : %d\r\n", report->map_weights.size);
  for (int idx=0; idx<report->map_weights.size;idx++) {
      const ai_buffer *buffer = &report->map_weights.buffer[idx];
      LC_PRINT("  [%d] ", idx);
 8008dd6:	4f38      	ldr	r7, [pc, #224]	; (8008eb8 <aiPrintNetworkInfo+0x160>)
  for (int idx=0; idx<report->map_weights.size;idx++) {
 8008dd8:	2500      	movs	r5, #0
      const ai_buffer *buffer = &report->map_weights.buffer[idx];
 8008dda:	f04f 081c 	mov.w	r8, #28
  LC_PRINT(" map_weights        : %d\r\n", report->map_weights.size);
 8008dde:	f8b4 1042 	ldrh.w	r1, [r4, #66]	; 0x42
      aiPrintBufferInfo(buffer);
      LC_PRINT("\r\n");
 8008de2:	f107 0908 	add.w	r9, r7, #8
  LC_PRINT(" map_weights        : %d\r\n", report->map_weights.size);
 8008de6:	4838      	ldr	r0, [pc, #224]	; (8008ec8 <aiPrintNetworkInfo+0x170>)
 8008de8:	f000 f8dc 	bl	8008fa4 <lc_print>
  for (int idx=0; idx<report->map_weights.size;idx++) {
 8008dec:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 8008df0:	42ab      	cmp	r3, r5
 8008df2:	dc25      	bgt.n	8008e40 <aiPrintNetworkInfo+0xe8>
  LC_PRINT(" n_inputs/n_outputs : %u/%u\r\n", report->n_inputs,
          report->n_outputs);

  for (int i=0; i<report->n_inputs; i++) {
    // LC_PRINT("  I[%d] %s\r\n", i, aiGetBufferDesc(&report->inputs[i]));
    LC_PRINT("  I[%d] ", i);
 8008df4:	4e35      	ldr	r6, [pc, #212]	; (8008ecc <aiPrintNetworkInfo+0x174>)
  for (int i=0; i<report->n_inputs; i++) {
 8008df6:	2500      	movs	r5, #0
    aiPrintBufferInfo(&report->inputs[i]);
 8008df8:	271c      	movs	r7, #28
  LC_PRINT(" n_inputs/n_outputs : %u/%u\r\n", report->n_inputs,
 8008dfa:	8e62      	ldrh	r2, [r4, #50]	; 0x32
    LC_PRINT("\r\n");
 8008dfc:	f1a6 083c 	sub.w	r8, r6, #60	; 0x3c
  LC_PRINT(" n_inputs/n_outputs : %u/%u\r\n", report->n_inputs,
 8008e00:	8e21      	ldrh	r1, [r4, #48]	; 0x30
 8008e02:	4833      	ldr	r0, [pc, #204]	; (8008ed0 <aiPrintNetworkInfo+0x178>)
 8008e04:	f000 f8ce 	bl	8008fa4 <lc_print>
  for (int i=0; i<report->n_inputs; i++) {
 8008e08:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8008e0a:	42ab      	cmp	r3, r5
 8008e0c:	dc27      	bgt.n	8008e5e <aiPrintNetworkInfo+0x106>
  }

  for (int i=0; i<report->n_outputs; i++) {
    //LC_PRINT("  O[%d] %s\r\n", i, aiGetBufferDesc(&report->outputs[i]));
    LC_PRINT("  O[%d] ", i);
 8008e0e:	4e31      	ldr	r6, [pc, #196]	; (8008ed4 <aiPrintNetworkInfo+0x17c>)
  for (int i=0; i<report->n_outputs; i++) {
 8008e10:	2500      	movs	r5, #0
    aiPrintBufferInfo(&report->outputs[i]);
 8008e12:	271c      	movs	r7, #28
    LC_PRINT("\r\n");
 8008e14:	f1a6 0845 	sub.w	r8, r6, #69	; 0x45
  for (int i=0; i<report->n_outputs; i++) {
 8008e18:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8008e1a:	42ab      	cmp	r3, r5
 8008e1c:	dc2d      	bgt.n	8008e7a <aiPrintNetworkInfo+0x122>
  }
}
 8008e1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      const ai_buffer *buffer = &report->map_activations.buffer[idx];
 8008e22:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
      LC_PRINT("  [%d] ", idx);
 8008e24:	4629      	mov	r1, r5
      const ai_buffer *buffer = &report->map_activations.buffer[idx];
 8008e26:	fb08 0605 	mla	r6, r8, r5, r0
      LC_PRINT("  [%d] ", idx);
 8008e2a:	4638      	mov	r0, r7
 8008e2c:	f000 f8ba 	bl	8008fa4 <lc_print>
  for (int idx=0; idx<report->map_activations.size;idx++) {
 8008e30:	3501      	adds	r5, #1
      aiPrintBufferInfo(buffer);
 8008e32:	4630      	mov	r0, r6
 8008e34:	f7ff fe8c 	bl	8008b50 <aiPrintBufferInfo>
      LC_PRINT("\r\n");
 8008e38:	4648      	mov	r0, r9
 8008e3a:	f000 f8b3 	bl	8008fa4 <lc_print>
  for (int idx=0; idx<report->map_activations.size;idx++) {
 8008e3e:	e7c6      	b.n	8008dce <aiPrintNetworkInfo+0x76>
      const ai_buffer *buffer = &report->map_weights.buffer[idx];
 8008e40:	6c60      	ldr	r0, [r4, #68]	; 0x44
      LC_PRINT("  [%d] ", idx);
 8008e42:	4629      	mov	r1, r5
      const ai_buffer *buffer = &report->map_weights.buffer[idx];
 8008e44:	fb08 0605 	mla	r6, r8, r5, r0
      LC_PRINT("  [%d] ", idx);
 8008e48:	4638      	mov	r0, r7
 8008e4a:	f000 f8ab 	bl	8008fa4 <lc_print>
  for (int idx=0; idx<report->map_weights.size;idx++) {
 8008e4e:	3501      	adds	r5, #1
      aiPrintBufferInfo(buffer);
 8008e50:	4630      	mov	r0, r6
 8008e52:	f7ff fe7d 	bl	8008b50 <aiPrintBufferInfo>
      LC_PRINT("\r\n");
 8008e56:	4648      	mov	r0, r9
 8008e58:	f000 f8a4 	bl	8008fa4 <lc_print>
  for (int idx=0; idx<report->map_weights.size;idx++) {
 8008e5c:	e7c6      	b.n	8008dec <aiPrintNetworkInfo+0x94>
    LC_PRINT("  I[%d] ", i);
 8008e5e:	4629      	mov	r1, r5
 8008e60:	4630      	mov	r0, r6
 8008e62:	f000 f89f 	bl	8008fa4 <lc_print>
    aiPrintBufferInfo(&report->inputs[i]);
 8008e66:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8008e68:	fb07 0005 	mla	r0, r7, r5, r0
  for (int i=0; i<report->n_inputs; i++) {
 8008e6c:	3501      	adds	r5, #1
    aiPrintBufferInfo(&report->inputs[i]);
 8008e6e:	f7ff fe6f 	bl	8008b50 <aiPrintBufferInfo>
    LC_PRINT("\r\n");
 8008e72:	4640      	mov	r0, r8
 8008e74:	f000 f896 	bl	8008fa4 <lc_print>
  for (int i=0; i<report->n_inputs; i++) {
 8008e78:	e7c6      	b.n	8008e08 <aiPrintNetworkInfo+0xb0>
    LC_PRINT("  O[%d] ", i);
 8008e7a:	4629      	mov	r1, r5
 8008e7c:	4630      	mov	r0, r6
 8008e7e:	f000 f891 	bl	8008fa4 <lc_print>
    aiPrintBufferInfo(&report->outputs[i]);
 8008e82:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8008e84:	fb07 0005 	mla	r0, r7, r5, r0
  for (int i=0; i<report->n_outputs; i++) {
 8008e88:	3501      	adds	r5, #1
    aiPrintBufferInfo(&report->outputs[i]);
 8008e8a:	f7ff fe61 	bl	8008b50 <aiPrintBufferInfo>
    LC_PRINT("\r\n");
 8008e8e:	4640      	mov	r0, r8
 8008e90:	f000 f888 	bl	8008fa4 <lc_print>
  for (int i=0; i<report->n_outputs; i++) {
 8008e94:	e7c0      	b.n	8008e18 <aiPrintNetworkInfo+0xc0>
 8008e96:	bf00      	nop
 8008e98:	080161d8 	.word	0x080161d8
 8008e9c:	080161f2 	.word	0x080161f2
 8008ea0:	0801620d 	.word	0x0801620d
 8008ea4:	08016228 	.word	0x08016228
 8008ea8:	08016243 	.word	0x08016243
 8008eac:	0801625e 	.word	0x0801625e
 8008eb0:	0801627f 	.word	0x0801627f
 8008eb4:	0801629a 	.word	0x0801629a
 8008eb8:	08016312 	.word	0x08016312
 8008ebc:	080162bb 	.word	0x080162bb
 8008ec0:	080162dc 	.word	0x080162dc
 8008ec4:	080162f7 	.word	0x080162f7
 8008ec8:	0801631d 	.word	0x0801631d
 8008ecc:	08016356 	.word	0x08016356
 8008ed0:	08016338 	.word	0x08016338
 8008ed4:	0801635f 	.word	0x0801635f

08008ed8 <_put_c_buffer_cb>:
};

static void _put_c_buffer_cb(void *user, const char c)
{
  struct _buffer *buffer = (struct _buffer *)user;
  if (buffer->pos < (buffer->size - 1)) {
 8008ed8:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 8008edc:	3b01      	subs	r3, #1
 8008ede:	429a      	cmp	r2, r3
 8008ee0:	d207      	bcs.n	8008ef2 <_put_c_buffer_cb+0x1a>
    buffer->buffer[buffer->pos] = c;
 8008ee2:	6803      	ldr	r3, [r0, #0]
 8008ee4:	5499      	strb	r1, [r3, r2]
    buffer->pos++;
    buffer->buffer[buffer->pos] = 0;
 8008ee6:	2100      	movs	r1, #0
    buffer->pos++;
 8008ee8:	6883      	ldr	r3, [r0, #8]
    buffer->buffer[buffer->pos] = 0;
 8008eea:	6802      	ldr	r2, [r0, #0]
    buffer->pos++;
 8008eec:	3301      	adds	r3, #1
 8008eee:	6083      	str	r3, [r0, #8]
    buffer->buffer[buffer->pos] = 0;
 8008ef0:	54d1      	strb	r1, [r2, r3]
  }
}
 8008ef2:	4770      	bx	lr

08008ef4 <_put_c_driver>:
  if (_ioWriteAllowed)
 8008ef4:	4b08      	ldr	r3, [pc, #32]	; (8008f18 <_put_c_driver+0x24>)
 8008ef6:	781b      	ldrb	r3, [r3, #0]
{
 8008ef8:	b507      	push	{r0, r1, r2, lr}
 8008efa:	f88d 1007 	strb.w	r1, [sp, #7]
  if (_ioWriteAllowed)
 8008efe:	b13b      	cbz	r3, 8008f10 <_put_c_driver+0x1c>

__STATIC_INLINE bool port_io_write(uint8_t *buff, int count)
{
  HAL_StatusTypeDef status;

  status = HAL_UART_Transmit(&UartHandle, buff, count, HAL_MAX_DELAY);
 8008f00:	f04f 33ff 	mov.w	r3, #4294967295
 8008f04:	2201      	movs	r2, #1
 8008f06:	f10d 0107 	add.w	r1, sp, #7
 8008f0a:	4804      	ldr	r0, [pc, #16]	; (8008f1c <_put_c_driver+0x28>)
 8008f0c:	f7fe fc91 	bl	8007832 <HAL_UART_Transmit>
}
 8008f10:	b003      	add	sp, #12
 8008f12:	f85d fb04 	ldr.w	pc, [sp], #4
 8008f16:	bf00      	nop
 8008f18:	24000011 	.word	0x24000011
 8008f1c:	24001774 	.word	0x24001774

08008f20 <ioRawWriteBuffer>:
 8008f20:	b28a      	uxth	r2, r1
 8008f22:	4601      	mov	r1, r0
 8008f24:	4804      	ldr	r0, [pc, #16]	; (8008f38 <ioRawWriteBuffer+0x18>)
{
 8008f26:	b508      	push	{r3, lr}
 8008f28:	f04f 33ff 	mov.w	r3, #4294967295
 8008f2c:	f7fe fc81 	bl	8007832 <HAL_UART_Transmit>
}
 8008f30:	fab0 f080 	clz	r0, r0
 8008f34:	0940      	lsrs	r0, r0, #5
 8008f36:	bd08      	pop	{r3, pc}
 8008f38:	24001774 	.word	0x24001774

08008f3c <ioRawReadBuffer>:

__STATIC_INLINE bool port_io_read(uint8_t *buff, int count)
{
  HAL_StatusTypeDef status;

  status = HAL_UART_Receive(&UartHandle, buff, count, HAL_MAX_DELAY);
 8008f3c:	b28a      	uxth	r2, r1
 8008f3e:	4601      	mov	r1, r0
 8008f40:	4804      	ldr	r0, [pc, #16]	; (8008f54 <ioRawReadBuffer+0x18>)
{
 8008f42:	b508      	push	{r3, lr}
 8008f44:	f04f 33ff 	mov.w	r3, #4294967295
 8008f48:	f7fe fcc9 	bl	80078de <HAL_UART_Receive>
}
 8008f4c:	fab0 f080 	clz	r0, r0
 8008f50:	0940      	lsrs	r0, r0, #5
 8008f52:	bd08      	pop	{r3, pc}
 8008f54:	24001774 	.word	0x24001774

08008f58 <ioRawDisableLLWrite>:
  _ioWriteAllowed = false;
 8008f58:	4b01      	ldr	r3, [pc, #4]	; (8008f60 <ioRawDisableLLWrite+0x8>)
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	701a      	strb	r2, [r3, #0]
}
 8008f5e:	4770      	bx	lr
 8008f60:	24000011 	.word	0x24000011

08008f64 <_write>:
{
 8008f64:	b510      	push	{r4, lr}
  if ((count < 0) && (fd != STDOUT_FILENO) && (fd != STDERR_FILENO)) {
 8008f66:	1e14      	subs	r4, r2, #0
 8008f68:	da0a      	bge.n	8008f80 <_write+0x1c>
 8008f6a:	3801      	subs	r0, #1
 8008f6c:	2801      	cmp	r0, #1
 8008f6e:	d907      	bls.n	8008f80 <_write+0x1c>
    errno = EBADF;
 8008f70:	f009 ffe4 	bl	8012f3c <__errno>
    return -1;
 8008f74:	f04f 34ff 	mov.w	r4, #4294967295
    errno = EBADF;
 8008f78:	2309      	movs	r3, #9
 8008f7a:	6003      	str	r3, [r0, #0]
}
 8008f7c:	4620      	mov	r0, r4
 8008f7e:	bd10      	pop	{r4, pc}
  if (_ioWriteAllowed)
 8008f80:	4b06      	ldr	r3, [pc, #24]	; (8008f9c <_write+0x38>)
 8008f82:	781b      	ldrb	r3, [r3, #0]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d0f9      	beq.n	8008f7c <_write+0x18>
  status = HAL_UART_Transmit(&UartHandle, buff, count, HAL_MAX_DELAY);
 8008f88:	b2a2      	uxth	r2, r4
 8008f8a:	f04f 33ff 	mov.w	r3, #4294967295
 8008f8e:	4804      	ldr	r0, [pc, #16]	; (8008fa0 <_write+0x3c>)
 8008f90:	f7fe fc4f 	bl	8007832 <HAL_UART_Transmit>
  return (status ? count : 0);
 8008f94:	2800      	cmp	r0, #0
 8008f96:	bf18      	it	ne
 8008f98:	2400      	movne	r4, #0
 8008f9a:	e7ef      	b.n	8008f7c <_write+0x18>
 8008f9c:	24000011 	.word	0x24000011
 8008fa0:	24001774 	.word	0x24001774

08008fa4 <lc_print>:
{
 8008fa4:	b40f      	push	{r0, r1, r2, r3}
 8008fa6:	b507      	push	{r0, r1, r2, lr}
 8008fa8:	ab04      	add	r3, sp, #16
  vlc_print(&_put_c_driver, NULL, fmt, ap);
 8008faa:	2100      	movs	r1, #0
 8008fac:	4805      	ldr	r0, [pc, #20]	; (8008fc4 <lc_print+0x20>)
{
 8008fae:	f853 2b04 	ldr.w	r2, [r3], #4
  va_start(ap, fmt);
 8008fb2:	9301      	str	r3, [sp, #4]
  vlc_print(&_put_c_driver, NULL, fmt, ap);
 8008fb4:	f001 f86a 	bl	800a08c <vlc_print>
}
 8008fb8:	b003      	add	sp, #12
 8008fba:	f85d eb04 	ldr.w	lr, [sp], #4
 8008fbe:	b004      	add	sp, #16
 8008fc0:	4770      	bx	lr
 8008fc2:	bf00      	nop
 8008fc4:	08008ef5 	.word	0x08008ef5

08008fc8 <lc_vsnprint>:

size_t lc_vsnprint(char *buff, size_t size, const char* fmt, va_list vlist)
{
 8008fc8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  struct _buffer buffer = {buff, size, 0};
 8008fca:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8008fce:	2100      	movs	r1, #0
  vlc_print(&_put_c_buffer_cb, &buffer, fmt, vlist);
 8008fd0:	4804      	ldr	r0, [pc, #16]	; (8008fe4 <lc_vsnprint+0x1c>)
  struct _buffer buffer = {buff, size, 0};
 8008fd2:	9103      	str	r1, [sp, #12]
  vlc_print(&_put_c_buffer_cb, &buffer, fmt, vlist);
 8008fd4:	a901      	add	r1, sp, #4
 8008fd6:	f001 f859 	bl	800a08c <vlc_print>
  return buffer.pos - 1;
}
 8008fda:	9803      	ldr	r0, [sp, #12]
 8008fdc:	3801      	subs	r0, #1
 8008fde:	b005      	add	sp, #20
 8008fe0:	f85d fb04 	ldr.w	pc, [sp], #4
 8008fe4:	08008ed9 	.word	0x08008ed9

08008fe8 <__wrap_malloc>:

void* __real_malloc(size_t bytes);
void __real_free(void *ptr);

void* __wrap_malloc(size_t bytes)
{
 8008fe8:	b538      	push	{r3, r4, r5, lr}
  uint8_t *ptr;

  io_malloc.cfg |= 1 << 1;
 8008fea:	4d11      	ldr	r5, [pc, #68]	; (8009030 <__wrap_malloc+0x48>)

  /* ensure alignment for magic number */
  bytes = (bytes + 3) & ~3;
 8008fec:	3003      	adds	r0, #3
  io_malloc.cfg |= 1 << 1;
 8008fee:	682b      	ldr	r3, [r5, #0]
  bytes = (bytes + 3) & ~3;
 8008ff0:	f020 0403 	bic.w	r4, r0, #3
  io_malloc.cfg |= 1 << 1;
 8008ff4:	f043 0302 	orr.w	r3, r3, #2

  /* add 2x32-bit for size and magic  number */
  ptr = (uint8_t*)__real_malloc(bytes + 8);
 8008ff8:	f104 0008 	add.w	r0, r4, #8
  io_malloc.cfg |= 1 << 1;
 8008ffc:	602b      	str	r3, [r5, #0]
  ptr = (uint8_t*)__real_malloc(bytes + 8);
 8008ffe:	f009 ffc7 	bl	8012f90 <malloc>

  /* remember size */
  if (ptr) {
 8009002:	b1a0      	cbz	r0, 800902e <__wrap_malloc+0x46>
    *((uint32_t*)ptr) = bytes;
    *((uint32_t*)(ptr + 4 + bytes)) = MAGIC_MALLOC_NUMBER;
 8009004:	1903      	adds	r3, r0, r4
 8009006:	4a0b      	ldr	r2, [pc, #44]	; (8009034 <__wrap_malloc+0x4c>)
    *((uint32_t*)ptr) = bytes;
 8009008:	6004      	str	r4, [r0, #0]
    *((uint32_t*)(ptr + 4 + bytes)) = MAGIC_MALLOC_NUMBER;
 800900a:	605a      	str	r2, [r3, #4]
  }

  if ((ptr) && (io_malloc.cfg & 1UL)) {
 800900c:	682b      	ldr	r3, [r5, #0]
 800900e:	07db      	lsls	r3, r3, #31
 8009010:	d50c      	bpl.n	800902c <__wrap_malloc+0x44>
    io_malloc.alloc_req++;
 8009012:	68eb      	ldr	r3, [r5, #12]
 8009014:	3301      	adds	r3, #1
 8009016:	60eb      	str	r3, [r5, #12]
    io_malloc.alloc += bytes;
 8009018:	686b      	ldr	r3, [r5, #4]
 800901a:	4423      	add	r3, r4
 800901c:	606b      	str	r3, [r5, #4]

    io_malloc.used += bytes;
 800901e:	69ab      	ldr	r3, [r5, #24]
 8009020:	441c      	add	r4, r3

    if (io_malloc.used > io_malloc.max) {
 8009022:	696b      	ldr	r3, [r5, #20]
 8009024:	429c      	cmp	r4, r3
    io_malloc.used += bytes;
 8009026:	61ac      	str	r4, [r5, #24]
      io_malloc.max = io_malloc.used;
 8009028:	bf88      	it	hi
 800902a:	616c      	strhi	r4, [r5, #20]

    if (io_malloc.a_idx >= _IO_MALLOC_TRACK_MODE)
      io_malloc.a_idx = 0;
#endif
  }
  return ptr?(ptr + 4):NULL;
 800902c:	3004      	adds	r0, #4
}
 800902e:	bd38      	pop	{r3, r4, r5, pc}
 8009030:	24001a84 	.word	0x24001a84
 8009034:	efdcba98 	.word	0xefdcba98

08009038 <crcIpInit>:
{
#if defined(HAS_NO_RCC_IP) && HAS_NO_RCC_IP == 1
#else
#if defined(STM32H7)
  /* By default the CRC IP clock is enabled */
  __HAL_RCC_CRC_CLK_ENABLE();
 8009038:	4b07      	ldr	r3, [pc, #28]	; (8009058 <crcIpInit+0x20>)
{
 800903a:	b082      	sub	sp, #8
  __HAL_RCC_CRC_CLK_ENABLE();
 800903c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8009040:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8009044:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8009048:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800904c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009050:	9301      	str	r3, [sp, #4]
 8009052:	9b01      	ldr	r3, [sp, #4]

  /* By default the CRC IP clock is enabled */
  __HAL_RCC_CRC_CLK_ENABLE();
#endif
#endif
}
 8009054:	b002      	add	sp, #8
 8009056:	4770      	bx	lr
 8009058:	58024400 	.word	0x58024400

0800905c <dwtCyclesToTime>:
  return port_hal_rcc_get_sys_clock_freq();
#endif
}

int dwtCyclesToTime(uint64_t clks, struct dwtTime *t)
{
 800905c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009060:	4604      	mov	r4, r0
 8009062:	468a      	mov	sl, r1
  if (!t)
 8009064:	4617      	mov	r7, r2
 8009066:	b382      	cbz	r2, 80090ca <dwtCyclesToTime+0x6e>
    return -1;
  uint32_t fcpu = systemCoreClock();
  uint64_t s  = clks / fcpu;
  uint64_t ms = (clks * 1000) / fcpu;
 8009068:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
  return port_hal_rcc_get_sys_clock_freq();
 800906c:	f7fc fa60 	bl	8005530 <HAL_RCC_GetSysClockFreq>
  uint64_t s  = clks / fcpu;
 8009070:	2300      	movs	r3, #0
  return port_hal_rcc_get_sys_clock_freq();
 8009072:	4602      	mov	r2, r0
  uint64_t s  = clks / fcpu;
 8009074:	9001      	str	r0, [sp, #4]
 8009076:	4651      	mov	r1, sl
 8009078:	4620      	mov	r0, r4
  uint64_t us = (clks * 1000 * 1000) / fcpu;
 800907a:	f8df 9054 	ldr.w	r9, [pc, #84]	; 80090d0 <dwtCyclesToTime+0x74>
  uint64_t s  = clks / fcpu;
 800907e:	f7f7 fa95 	bl	80005ac <__aeabi_uldivmod>
 8009082:	4683      	mov	fp, r0
  uint64_t ms = (clks * 1000) / fcpu;
 8009084:	fba4 0106 	umull	r0, r1, r4, r6
 8009088:	9a01      	ldr	r2, [sp, #4]
 800908a:	2300      	movs	r3, #0
 800908c:	fb06 110a 	mla	r1, r6, sl, r1
 8009090:	f7f7 fa8c 	bl	80005ac <__aeabi_uldivmod>
  ms -= (s * 1000);
 8009094:	fbab 3106 	umull	r3, r1, fp, r6
  uint64_t us = (clks * 1000 * 1000) / fcpu;
 8009098:	9a01      	ldr	r2, [sp, #4]
  ms -= (s * 1000);
 800909a:	1ac5      	subs	r5, r0, r3
  uint64_t us = (clks * 1000 * 1000) / fcpu;
 800909c:	fba4 0109 	umull	r0, r1, r4, r9
 80090a0:	2300      	movs	r3, #0
 80090a2:	fb09 110a 	mla	r1, r9, sl, r1
  us -= (ms * 1000 + s * 1000000);
 80090a6:	fbab 8909 	umull	r8, r9, fp, r9
  uint64_t us = (clks * 1000 * 1000) / fcpu;
 80090aa:	f7f7 fa7f 	bl	80005ac <__aeabi_uldivmod>
  t->fcpu = fcpu;
  t->s = s;
  t->ms = ms;
 80090ae:	60bd      	str	r5, [r7, #8]
 80090b0:	eba0 0008 	sub.w	r0, r0, r8
  us -= (ms * 1000 + s * 1000000);
 80090b4:	fba5 5606 	umull	r5, r6, r5, r6
  t->fcpu = fcpu;
 80090b8:	9a01      	ldr	r2, [sp, #4]
  us -= (ms * 1000 + s * 1000000);
 80090ba:	1b40      	subs	r0, r0, r5
  t->us = us;
 80090bc:	60f8      	str	r0, [r7, #12]
  return 0;
 80090be:	2000      	movs	r0, #0
  t->s = s;
 80090c0:	e9c7 2b00 	strd	r2, fp, [r7]
}
 80090c4:	b003      	add	sp, #12
 80090c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return -1;
 80090ca:	f04f 30ff 	mov.w	r0, #4294967295
 80090ce:	e7f9      	b.n	80090c4 <dwtCyclesToTime+0x68>
 80090d0:	000f4240 	.word	0x000f4240

080090d4 <dwtCyclesToFloatMs>:

float dwtCyclesToFloatMs(uint64_t clks)
{
 80090d4:	b510      	push	{r4, lr}
 80090d6:	4604      	mov	r4, r0
 80090d8:	ed2d 8b02 	vpush	{d8}
 80090dc:	b082      	sub	sp, #8
 80090de:	9101      	str	r1, [sp, #4]
  return port_hal_rcc_get_sys_clock_freq();
 80090e0:	f7fc fa26 	bl	8005530 <HAL_RCC_GetSysClockFreq>
  float res;
  float fcpu = (float)systemCoreClock();
  res = ((float)clks * (float)1000.0) / fcpu;
 80090e4:	9901      	ldr	r1, [sp, #4]
  return port_hal_rcc_get_sys_clock_freq();
 80090e6:	ee08 0a10 	vmov	s16, r0
  res = ((float)clks * (float)1000.0) / fcpu;
 80090ea:	4620      	mov	r0, r4
 80090ec:	f7f7 fa18 	bl	8000520 <__aeabi_ul2f>
 80090f0:	ed9f 0a06 	vldr	s0, [pc, #24]	; 800910c <dwtCyclesToFloatMs+0x38>
 80090f4:	ee07 0a90 	vmov	s15, r0
  float fcpu = (float)systemCoreClock();
 80090f8:	eeb8 8a48 	vcvt.f32.u32	s16, s16
  res = ((float)clks * (float)1000.0) / fcpu;
 80090fc:	ee27 0a80 	vmul.f32	s0, s15, s0
  return res;
}
 8009100:	ee80 0a08 	vdiv.f32	s0, s0, s16
 8009104:	b002      	add	sp, #8
 8009106:	ecbd 8b02 	vpop	{d8}
 800910a:	bd10      	pop	{r4, pc}
 800910c:	447a0000 	.word	0x447a0000

08009110 <getFlashCacheConf>:

#if defined(STM32H7)

  mconf |= MCONF_H7;

  __I uint32_t acr = FLASH->ACR;
 8009110:	4b0c      	ldr	r3, [pc, #48]	; (8009144 <getFlashCacheConf+0x34>)
{
 8009112:	b082      	sub	sp, #8
  __I uint32_t acr = FLASH->ACR;
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	9300      	str	r3, [sp, #0]
  __I uint32_t ccr = SCB->CCR;
 8009118:	4b0b      	ldr	r3, [pc, #44]	; (8009148 <getFlashCacheConf+0x38>)
 800911a:	695b      	ldr	r3, [r3, #20]
 800911c:	9301      	str	r3, [sp, #4]

  mconf |= (acr & FLASH_ACR_LATENCY_Msk) >> FLASH_ACR_LATENCY_Pos;
 800911e:	9800      	ldr	r0, [sp, #0]
#if !defined(CORE_CM4)
  if (ccr & SCB_CCR_IC_Msk)
 8009120:	9b01      	ldr	r3, [sp, #4]
  mconf |= (acr & FLASH_ACR_LATENCY_Msk) >> FLASH_ACR_LATENCY_Pos;
 8009122:	f000 000f 	and.w	r0, r0, #15
  if (ccr & SCB_CCR_IC_Msk)
 8009126:	039a      	lsls	r2, r3, #14
    mconf |= MCONF_CORE_ICACHE;
  if (ccr & SCB_CCR_DC_Msk)
 8009128:	9b01      	ldr	r3, [sp, #4]
    mconf |= MCONF_CORE_ICACHE;
 800912a:	f040 7040 	orr.w	r0, r0, #50331648	; 0x3000000
 800912e:	bf48      	it	mi
 8009130:	f440 6080 	orrmi.w	r0, r0, #1024	; 0x400
  if (ccr & SCB_CCR_DC_Msk)
 8009134:	03db      	lsls	r3, r3, #15
    mconf |= MCONF_CORE_DCACHE;
 8009136:	bf48      	it	mi
 8009138:	f440 6000 	orrmi.w	r0, r0, #2048	; 0x800
  if (ccr & SCB_CCR_IC_Msk)
    mconf |= MCONF_CORE_ICACHE;
#endif

  return mconf;
}
 800913c:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 8009140:	b002      	add	sp, #8
 8009142:	4770      	bx	lr
 8009144:	52002000 	.word	0x52002000
 8009148:	e000ed00 	.word	0xe000ed00

0800914c <getSysConf.part.0>:
void getSysConf(struct mcu_conf *conf)
 800914c:	b510      	push	{r4, lr}
 800914e:	4604      	mov	r4, r0
  return port_hal_rcc_get_sys_clock_freq();
 8009150:	f7fc f9ee 	bl	8005530 <HAL_RCC_GetSysClockFreq>
  conf->sclk = systemCoreClock();
 8009154:	6020      	str	r0, [r4, #0]
  conf->hclk = port_hal_rcc_get_hclk_freq();
 8009156:	f7fc fbb1 	bl	80058bc <HAL_RCC_GetHCLKFreq>
 800915a:	6060      	str	r0, [r4, #4]
  conf->conf = getFlashCacheConf();
 800915c:	f7ff ffd8 	bl	8009110 <getFlashCacheConf>
 8009160:	60a0      	str	r0, [r4, #8]
  conf->devid = port_hal_get_dev_id();
 8009162:	f7f9 fc25 	bl	80029b0 <HAL_GetDEVID>
 8009166:	60e0      	str	r0, [r4, #12]
  conf->revid = port_hal_get_rev_id();
 8009168:	f7f9 fc1c 	bl	80029a4 <HAL_GetREVID>
 800916c:	6120      	str	r0, [r4, #16]
}
 800916e:	bd10      	pop	{r4, pc}

08009170 <getSysConf>:
  if (!conf)
 8009170:	b108      	cbz	r0, 8009176 <getSysConf+0x6>
 8009172:	f7ff bfeb 	b.w	800914c <getSysConf.part.0>
}
 8009176:	4770      	bx	lr

08009178 <systemSettingLog>:

void systemSettingLog(void)
{
 8009178:	b510      	push	{r4, lr}
 800917a:	b086      	sub	sp, #24
  /* Display ARM Complier version */

#if defined(_IS_AC6_COMPILER) && _IS_AC6_COMPILER
  LC_PRINT("Compiled with MDK-ARM Keil (Arm Compiler 6) %d\r\n", __ARMCC_VERSION);
#elif defined(_IS_GCC_COMPILER) && _IS_GCC_COMPILER
  LC_PRINT("Compiled with GCC %d.%d.%d\r\n", __GNUC__, __GNUC_MINOR__,
 800917c:	2301      	movs	r3, #1
 800917e:	210a      	movs	r1, #10
 8009180:	2203      	movs	r2, #3
 8009182:	482a      	ldr	r0, [pc, #168]	; (800922c <systemSettingLog+0xb4>)
 8009184:	f7ff ff0e 	bl	8008fa4 <lc_print>
  if (!conf)
 8009188:	a801      	add	r0, sp, #4
 800918a:	f7ff ffdf 	bl	800914c <getSysConf.part.0>


  /* Display Device configuration */
  getSysConf(&sys_conf);

  LC_PRINT("STM32 Runtime configuration...\r\n");
 800918e:	4828      	ldr	r0, [pc, #160]	; (8009230 <systemSettingLog+0xb8>)
 8009190:	f7ff ff08 	bl	8008fa4 <lc_print>

  LC_PRINT(" Device       : DevID:0x%04x (%s) RevID:0x%04x\r\n",
 8009194:	9904      	ldr	r1, [sp, #16]
 8009196:	b28b      	uxth	r3, r1
  switch (dev_id) {
 8009198:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800919c:	d042      	beq.n	8009224 <systemSettingLog+0xac>
 800919e:	f240 4283 	movw	r2, #1155	; 0x483
 80091a2:	4293      	cmp	r3, r2
 80091a4:	d040      	beq.n	8009228 <systemSettingLog+0xb0>
  case 0x450: str = "STM32H743/53/50xx and STM32H745/55/47/57xx"; break; /* Shark2M - see RM0433 & RM0399 */
 80091a6:	4a23      	ldr	r2, [pc, #140]	; (8009234 <systemSettingLog+0xbc>)
 80091a8:	f102 0022 	add.w	r0, r2, #34	; 0x22
 80091ac:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80091b0:	bf08      	it	eq
 80091b2:	4602      	moveq	r2, r0
  LC_PRINT(" Device       : DevID:0x%04x (%s) RevID:0x%04x\r\n",
 80091b4:	9b05      	ldr	r3, [sp, #20]
 80091b6:	4820      	ldr	r0, [pc, #128]	; (8009238 <systemSettingLog+0xc0>)
 80091b8:	f7ff fef4 	bl	8008fa4 <lc_print>
      devIdToStr(sys_conf.devid),
      (int)sys_conf.revid
  );

#if (__FPU_PRESENT == 1)
  LC_PRINT(" Core Arch.   : M%d - %s %s\r\n", __CORTEX_M, "FPU ", ((__FPU_USED) ? "used" : "not used!"));
 80091bc:	4b1f      	ldr	r3, [pc, #124]	; (800923c <systemSettingLog+0xc4>)
 80091be:	2107      	movs	r1, #7
#else
  LC_PRINT(" Core Arch.   : M%d - %s\r\n", __CORTEX_M, "no FPU");
#endif

  LC_PRINT(" HAL version  : 0x%08x\r\n", (int)port_hal_get_hal_version());
  LC_PRINT(" SYSCLK clock : %u MHz\r\n", (int)sys_conf.sclk/1000000);
 80091c0:	4c1f      	ldr	r4, [pc, #124]	; (8009240 <systemSettingLog+0xc8>)
  LC_PRINT(" Core Arch.   : M%d - %s %s\r\n", __CORTEX_M, "FPU ", ((__FPU_USED) ? "used" : "not used!"));
 80091c2:	1d5a      	adds	r2, r3, #5
 80091c4:	f103 000a 	add.w	r0, r3, #10
 80091c8:	f7ff feec 	bl	8008fa4 <lc_print>
  LC_PRINT(" HAL version  : 0x%08x\r\n", (int)port_hal_get_hal_version());
 80091cc:	f7f9 fbe6 	bl	800299c <HAL_GetHalVersion>
 80091d0:	4601      	mov	r1, r0
 80091d2:	481c      	ldr	r0, [pc, #112]	; (8009244 <systemSettingLog+0xcc>)
 80091d4:	f7ff fee6 	bl	8008fa4 <lc_print>
  LC_PRINT(" SYSCLK clock : %u MHz\r\n", (int)sys_conf.sclk/1000000);
 80091d8:	9901      	ldr	r1, [sp, #4]
 80091da:	481b      	ldr	r0, [pc, #108]	; (8009248 <systemSettingLog+0xd0>)
 80091dc:	fb91 f1f4 	sdiv	r1, r1, r4
 80091e0:	f7ff fee0 	bl	8008fa4 <lc_print>
  LC_PRINT(" HCLK clock   : %u MHz\r\n", (int)sys_conf.hclk/1000000);
 80091e4:	9902      	ldr	r1, [sp, #8]
 80091e6:	4819      	ldr	r0, [pc, #100]	; (800924c <systemSettingLog+0xd4>)
 80091e8:	fb91 f1f4 	sdiv	r1, r1, r4
 80091ec:	f7ff feda 	bl	8008fa4 <lc_print>
      bitToStr(ccr & SCB_CCR_IC_Msk),
      bitToStr(ccr & SCB_CCR_DC_Msk));
#endif

#if defined(STM32H7)
  uint32_t acr = FLASH->ACR;
 80091f0:	4b17      	ldr	r3, [pc, #92]	; (8009250 <systemSettingLog+0xd8>)
  LC_PRINT(" FLASH conf.  : ACR=0x%08x - latency=%d\r\n",
 80091f2:	4818      	ldr	r0, [pc, #96]	; (8009254 <systemSettingLog+0xdc>)
  uint32_t acr = FLASH->ACR;
 80091f4:	6819      	ldr	r1, [r3, #0]
  LC_PRINT(" FLASH conf.  : ACR=0x%08x - latency=%d\r\n",
 80091f6:	f001 020f 	and.w	r2, r1, #15
 80091fa:	f7ff fed3 	bl	8008fa4 <lc_print>
      (int)acr,
      (int)((acr & FLASH_ACR_LATENCY_Msk) >> FLASH_ACR_LATENCY_Pos));
#if !defined(CORE_CM4)
  uint32_t ccr = SCB->CCR;
 80091fe:	4b16      	ldr	r3, [pc, #88]	; (8009258 <systemSettingLog+0xe0>)
    return "False";
 8009200:	4816      	ldr	r0, [pc, #88]	; (800925c <systemSettingLog+0xe4>)
  uint32_t ccr = SCB->CCR;
 8009202:	695b      	ldr	r3, [r3, #20]
    return "False";
 8009204:	1d42      	adds	r2, r0, #5
 8009206:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800920a:	bf14      	ite	ne
 800920c:	4601      	movne	r1, r0
 800920e:	4611      	moveq	r1, r2
 8009210:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  LC_PRINT(" CACHE conf.  : $I/$D=(%s,%s)\r\n",
 8009214:	bf18      	it	ne
 8009216:	4602      	movne	r2, r0
 8009218:	f200 1017 	addw	r0, r0, #279	; 0x117
 800921c:	f7ff fec2 	bl	8008fa4 <lc_print>
  LC_PRINT(" CACHE conf.  : $I/$D=(%s,%s)\r\n",
      bitToStr(ccr & SCB_CCR_IC_Msk),
      bitToStr(ccr & SCB_CCR_DC_Msk));
#endif

}
 8009220:	b006      	add	sp, #24
 8009222:	bd10      	pop	{r4, pc}
  switch (dev_id) {
 8009224:	4a0e      	ldr	r2, [pc, #56]	; (8009260 <systemSettingLog+0xe8>)
 8009226:	e7c5      	b.n	80091b4 <systemSettingLog+0x3c>
  case 0x483: str = "STM32H7[2,3]x"; break;  /* LittleShark1M */
 8009228:	4a0e      	ldr	r2, [pc, #56]	; (8009264 <systemSettingLog+0xec>)
 800922a:	e7c3      	b.n	80091b4 <systemSettingLog+0x3c>
 800922c:	08016426 	.word	0x08016426
 8009230:	08016443 	.word	0x08016443
 8009234:	080163ce 	.word	0x080163ce
 8009238:	08016464 	.word	0x08016464
 800923c:	08016495 	.word	0x08016495
 8009240:	000f4240 	.word	0x000f4240
 8009244:	080164bd 	.word	0x080164bd
 8009248:	080164d6 	.word	0x080164d6
 800924c:	080164ef 	.word	0x080164ef
 8009250:	52002000 	.word	0x52002000
 8009254:	08016508 	.word	0x08016508
 8009258:	e000ed00 	.word	0xe000ed00
 800925c:	0801641b 	.word	0x0801641b
 8009260:	080163e4 	.word	0x080163e4
 8009264:	080163d6 	.word	0x080163d6

08009268 <dwtIpInit>:

#if !defined(HAS_DEDICATED_PERF_COUNTER)
#if USE_SYSTICK_ONLY == 0

__STATIC_INLINE void dwtIpInit(void) {
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8009268:	4a07      	ldr	r2, [pc, #28]	; (8009288 <dwtIpInit+0x20>)
 800926a:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
 800926e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009272:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc

#ifdef STM32F7
  DWT->LAR = 0xC5ACCE55;
#endif

  DWT->CYCCNT = 0;
 8009276:	2200      	movs	r2, #0
 8009278:	4b04      	ldr	r3, [pc, #16]	; (800928c <dwtIpInit+0x24>)
 800927a:	605a      	str	r2, [r3, #4]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk; //| DWT_CTRL_CPIEVTENA_Msk;
 800927c:	681a      	ldr	r2, [r3, #0]
 800927e:	f042 0201 	orr.w	r2, r2, #1
 8009282:	601a      	str	r2, [r3, #0]
}
 8009284:	4770      	bx	lr
 8009286:	bf00      	nop
 8009288:	e000ed00 	.word	0xe000ed00
 800928c:	e0001000 	.word	0xe0001000

08009290 <fill_tensor_desc_msg>:
                                 struct _encode_uint32 *array_u32,
                                 uint32_t flags,
                                 float scale,
                                 int32_t zero_point
                                 )
{
 8009290:	b530      	push	{r4, r5, lr}
  array_u32->size = buff->shape.size;
 8009292:	6944      	ldr	r4, [r0, #20]
  array_u32->data = (uint32_t *)buff->shape.data;
 8009294:	6985      	ldr	r5, [r0, #24]
  array_u32->size = buff->shape.size;
 8009296:	f3c4 2417 	ubfx	r4, r4, #8, #24
  array_u32->data = (uint32_t *)buff->shape.data;
 800929a:	6055      	str	r5, [r2, #4]
  array_u32->offset = sizeof(buff->shape.data[0]);
 800929c:	2504      	movs	r5, #4
  array_u32->size = buff->shape.size;
 800929e:	6014      	str	r4, [r2, #0]
  array_u32->offset = sizeof(buff->shape.data[0]);
 80092a0:	6095      	str	r5, [r2, #8]

  msg->name[0] = 0;
 80092a2:	2200      	movs	r2, #0
 80092a4:	700a      	strb	r2, [r1, #0]
  msg->format = (uint32_t)buff->format;
 80092a6:	6802      	ldr	r2, [r0, #0]
  msg->flags = flags;
 80092a8:	660b      	str	r3, [r1, #96]	; 0x60

  msg->n_dims = buff->shape.type << 24 | array_u32->size;
 80092aa:	7d03      	ldrb	r3, [r0, #20]
  msg->format = (uint32_t)buff->format;
 80092ac:	640a      	str	r2, [r1, #64]	; 0x40
  msg->n_dims = buff->shape.type << 24 | array_u32->size;
 80092ae:	ea44 6403 	orr.w	r4, r4, r3, lsl #24

  msg->size = buff->size;
 80092b2:	6903      	ldr	r3, [r0, #16]

  const ai_buffer_meta_info *meta_info = AI_BUFFER_META_INFO(buff);

  msg->scale = scale;
  msg->zeropoint = zero_point;
 80092b4:	9a03      	ldr	r2, [sp, #12]
  msg->size = buff->size;
 80092b6:	644b      	str	r3, [r1, #68]	; 0x44
  const ai_buffer_meta_info *meta_info = AI_BUFFER_META_INFO(buff);
 80092b8:	6883      	ldr	r3, [r0, #8]
  msg->n_dims = buff->shape.type << 24 | array_u32->size;
 80092ba:	648c      	str	r4, [r1, #72]	; 0x48
  msg->scale = scale;
 80092bc:	ed81 0a15 	vstr	s0, [r1, #84]	; 0x54
  msg->zeropoint = zero_point;
 80092c0:	658a      	str	r2, [r1, #88]	; 0x58
  if (AI_BUFFER_META_INFO_INTQ(meta_info)) {
 80092c2:	b1a3      	cbz	r3, 80092ee <fill_tensor_desc_msg+0x5e>
 80092c4:	681a      	ldr	r2, [r3, #0]
 80092c6:	07d5      	lsls	r5, r2, #31
 80092c8:	d511      	bpl.n	80092ee <fill_tensor_desc_msg+0x5e>
 80092ca:	685b      	ldr	r3, [r3, #4]
 80092cc:	b17b      	cbz	r3, 80092ee <fill_tensor_desc_msg+0x5e>
    msg->scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(meta_info, 0);
 80092ce:	685a      	ldr	r2, [r3, #4]
 80092d0:	b182      	cbz	r2, 80092f4 <fill_tensor_desc_msg+0x64>
 80092d2:	885c      	ldrh	r4, [r3, #2]
 80092d4:	b174      	cbz	r4, 80092f4 <fill_tensor_desc_msg+0x64>
 80092d6:	6814      	ldr	r4, [r2, #0]
 80092d8:	6824      	ldr	r4, [r4, #0]
 80092da:	654c      	str	r4, [r1, #84]	; 0x54
    msg->zeropoint = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(meta_info, 0);
 80092dc:	881c      	ldrh	r4, [r3, #0]
 80092de:	07a4      	lsls	r4, r4, #30
 80092e0:	d50a      	bpl.n	80092f8 <fill_tensor_desc_msg+0x68>
 80092e2:	b18a      	cbz	r2, 8009308 <fill_tensor_desc_msg+0x78>
 80092e4:	885b      	ldrh	r3, [r3, #2]
 80092e6:	b10b      	cbz	r3, 80092ec <fill_tensor_desc_msg+0x5c>
 80092e8:	6853      	ldr	r3, [r2, #4]
 80092ea:	781b      	ldrb	r3, [r3, #0]
 80092ec:	658b      	str	r3, [r1, #88]	; 0x58
  }

  msg->addr = (uint32_t)buff->data;
 80092ee:	6843      	ldr	r3, [r0, #4]
 80092f0:	65cb      	str	r3, [r1, #92]	; 0x5c
}
 80092f2:	bd30      	pop	{r4, r5, pc}
    msg->scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(meta_info, 0);
 80092f4:	2400      	movs	r4, #0
 80092f6:	e7f0      	b.n	80092da <fill_tensor_desc_msg+0x4a>
    msg->zeropoint = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(meta_info, 0);
 80092f8:	b132      	cbz	r2, 8009308 <fill_tensor_desc_msg+0x78>
 80092fa:	885b      	ldrh	r3, [r3, #2]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d0f5      	beq.n	80092ec <fill_tensor_desc_msg+0x5c>
 8009300:	6853      	ldr	r3, [r2, #4]
 8009302:	f993 3000 	ldrsb.w	r3, [r3]
 8009306:	e7f1      	b.n	80092ec <fill_tensor_desc_msg+0x5c>
 8009308:	4613      	mov	r3, r2
 800930a:	e7ef      	b.n	80092ec <fill_tensor_desc_msg+0x5c>

0800930c <encode_ai_buffer_to_tensor_desc>:

static void encode_ai_buffer_to_tensor_desc(size_t index, void* data, aiTensorDescMsg* msg,
    struct _encode_uint32 *array_u32)
{
 800930c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800930e:	460c      	mov	r4, r1
 8009310:	4611      	mov	r1, r2
 8009312:	461a      	mov	r2, r3
  struct _data_tensor_desc *info = (struct _data_tensor_desc *)data;
  ai_buffer *buff = &((ai_buffer *)(info->buffer))[index];

  fill_tensor_desc_msg(buff, msg, array_u32, info->flags, info->scale, info->zero_point);
 8009314:	68e3      	ldr	r3, [r4, #12]
  ai_buffer *buff = &((ai_buffer *)(info->buffer))[index];
 8009316:	6825      	ldr	r5, [r4, #0]
  fill_tensor_desc_msg(buff, msg, array_u32, info->flags, info->scale, info->zero_point);
 8009318:	9300      	str	r3, [sp, #0]
 800931a:	ed94 0a02 	vldr	s0, [r4, #8]
 800931e:	6863      	ldr	r3, [r4, #4]
 8009320:	241c      	movs	r4, #28
 8009322:	fb04 5000 	mla	r0, r4, r0, r5
 8009326:	f7ff ffb3 	bl	8009290 <fill_tensor_desc_msg>
}
 800932a:	b003      	add	sp, #12
 800932c:	bd30      	pop	{r4, r5, pc}

0800932e <aiPbCmdSysInfo>:
 * Specific test APP commands
 * -----------------------------------------------------------------------------
 */

void aiPbCmdSysInfo(const reqMsg *req, respMsg *resp, void *param)
{
 800932e:	b530      	push	{r4, r5, lr}
 8009330:	b087      	sub	sp, #28
 8009332:	4605      	mov	r5, r0
 8009334:	460c      	mov	r4, r1
  UNUSED(param);
  struct mcu_conf conf;

  getSysConf(&conf);
 8009336:	a801      	add	r0, sp, #4
 8009338:	f7ff ff1a 	bl	8009170 <getSysConf>

  resp->which_payload = respMsg_sinfo_tag;
 800933c:	230b      	movs	r3, #11
  resp->payload.sinfo.devid = conf.devid;
  resp->payload.sinfo.sclock = conf.sclk;
  resp->payload.sinfo.hclock = conf.hclk;
  resp->payload.sinfo.cache = conf.conf;

  aiPbMgrSendResp(req, resp, EnumState_S_IDLE);
 800933e:	2200      	movs	r2, #0
 8009340:	4621      	mov	r1, r4
  resp->which_payload = respMsg_sinfo_tag;
 8009342:	80e3      	strh	r3, [r4, #6]
  aiPbMgrSendResp(req, resp, EnumState_S_IDLE);
 8009344:	4628      	mov	r0, r5
  resp->payload.sinfo.devid = conf.devid;
 8009346:	9b04      	ldr	r3, [sp, #16]
 8009348:	60a3      	str	r3, [r4, #8]
  resp->payload.sinfo.sclock = conf.sclk;
 800934a:	9b01      	ldr	r3, [sp, #4]
 800934c:	60e3      	str	r3, [r4, #12]
  resp->payload.sinfo.hclock = conf.hclk;
 800934e:	9b02      	ldr	r3, [sp, #8]
 8009350:	6123      	str	r3, [r4, #16]
  resp->payload.sinfo.cache = conf.conf;
 8009352:	9b03      	ldr	r3, [sp, #12]
 8009354:	6163      	str	r3, [r4, #20]
  aiPbMgrSendResp(req, resp, EnumState_S_IDLE);
 8009356:	f7ff fac1 	bl	80088dc <aiPbMgrSendResp>
}
 800935a:	b007      	add	sp, #28
 800935c:	bd30      	pop	{r4, r5, pc}
	...

08009360 <encode_mempool_to_tensor_desc>:
{
 8009360:	b570      	push	{r4, r5, r6, lr}
 8009362:	461e      	mov	r6, r3
  array_u32->size = 1;
 8009364:	2301      	movs	r3, #1
  if (info->name)
 8009366:	6808      	ldr	r0, [r1, #0]
{
 8009368:	460d      	mov	r5, r1
  array_u32->size = 1;
 800936a:	6033      	str	r3, [r6, #0]
  array_u32->data = (void *)&info->size;
 800936c:	1d0b      	adds	r3, r1, #4
{
 800936e:	4614      	mov	r4, r2
  array_u32->data = (void *)&info->size;
 8009370:	6073      	str	r3, [r6, #4]
  array_u32->offset = 4;
 8009372:	2304      	movs	r3, #4
 8009374:	60b3      	str	r3, [r6, #8]
  if (info->name)
 8009376:	b1a0      	cbz	r0, 80093a2 <encode_mempool_to_tensor_desc+0x42>
    aiPbStrCopy(info->name, &msg->name[0],
 8009378:	2240      	movs	r2, #64	; 0x40
 800937a:	4621      	mov	r1, r4
 800937c:	f7ff fa52 	bl	8008824 <aiPbStrCopy>
  msg->format = AI_BUFFER_FORMAT_U8;
 8009380:	4b09      	ldr	r3, [pc, #36]	; (80093a8 <encode_mempool_to_tensor_desc+0x48>)
 8009382:	6423      	str	r3, [r4, #64]	; 0x40
  msg->size = info->size;
 8009384:	686b      	ldr	r3, [r5, #4]
 8009386:	6463      	str	r3, [r4, #68]	; 0x44
  msg->n_dims = AI_SHAPE_BCWH << 24 | array_u32->size;
 8009388:	6833      	ldr	r3, [r6, #0]
 800938a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800938e:	64a3      	str	r3, [r4, #72]	; 0x48
  msg->scale = 0.0;
 8009390:	2300      	movs	r3, #0
 8009392:	6563      	str	r3, [r4, #84]	; 0x54
  msg->zeropoint = 0;
 8009394:	2300      	movs	r3, #0
 8009396:	65a3      	str	r3, [r4, #88]	; 0x58
  msg->addr = (uint32_t)info->addr;
 8009398:	68ab      	ldr	r3, [r5, #8]
 800939a:	65e3      	str	r3, [r4, #92]	; 0x5c
  msg->flags = EnumTensorFlag_TENSOR_FLAG_MEMPOOL;
 800939c:	2308      	movs	r3, #8
 800939e:	6623      	str	r3, [r4, #96]	; 0x60
}
 80093a0:	bd70      	pop	{r4, r5, r6, pc}
    msg->name[0] = 0;
 80093a2:	7010      	strb	r0, [r2, #0]
 80093a4:	e7ec      	b.n	8009380 <encode_mempool_to_tensor_desc+0x20>
 80093a6:	bf00      	nop
 80093a8:	00040440 	.word	0x00040440

080093ac <_get_buffer_size>:
{
 80093ac:	b538      	push	{r3, r4, r5, lr}
  const ai_u32 batch_ = AI_BUFFER_SHAPE_ELEM(buffer, AI_SHAPE_BATCH);
 80093ae:	6983      	ldr	r3, [r0, #24]
{
 80093b0:	4604      	mov	r4, r0
  return (size_t)AI_BUFFER_BYTE_SIZE(AI_BUFFER_SIZE(buffer) * batch_, buffer->format);
 80093b2:	2101      	movs	r1, #1
  const ai_u32 batch_ = AI_BUFFER_SHAPE_ELEM(buffer, AI_SHAPE_BATCH);
 80093b4:	681d      	ldr	r5, [r3, #0]
  return (size_t)AI_BUFFER_BYTE_SIZE(AI_BUFFER_SIZE(buffer) * batch_, buffer->format);
 80093b6:	f002 fbf7 	bl	800bba8 <ai_buffer_get_size>
 80093ba:	6821      	ldr	r1, [r4, #0]
 80093bc:	4368      	muls	r0, r5
}
 80093be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return (size_t)AI_BUFFER_BYTE_SIZE(AI_BUFFER_SIZE(buffer) * batch_, buffer->format);
 80093c2:	f002 bc25 	b.w	800bc10 <ai_buffer_get_byte_size>
	...

080093c8 <cyclesCounterStart>:
#endif
#endif  /* !HAS_DEDICATED_PERF_COUNTER */
}

__STATIC_INLINE void cyclesCounterStart(void)
{
 80093c8:	b508      	push	{r3, lr}
#else
#if USE_CORE_CLOCK_ONLY == 1
  dwtReset();
  cyclesCount.dwt_start = dwtGetCycles();
#else
  cyclesCount.tick_start = HAL_GetTick();
 80093ca:	f7f9 facf 	bl	800296c <HAL_GetTick>
 80093ce:	4b04      	ldr	r3, [pc, #16]	; (80093e0 <cyclesCounterStart+0x18>)
  DWT->CYCCNT = 0; /* Clear DWT cycle counter */
 80093d0:	4a04      	ldr	r2, [pc, #16]	; (80093e4 <cyclesCounterStart+0x1c>)
 80093d2:	2100      	movs	r1, #0
  cyclesCount.tick_start = HAL_GetTick();
 80093d4:	6098      	str	r0, [r3, #8]
  DWT->CYCCNT = 0; /* Clear DWT cycle counter */
 80093d6:	6051      	str	r1, [r2, #4]
  return DWT->CYCCNT;
 80093d8:	6852      	ldr	r2, [r2, #4]
  dwtReset();
  cyclesCount.dwt_start = dwtGetCycles();
 80093da:	605a      	str	r2, [r3, #4]
#endif
#endif
#endif  /* !HAS_DEDICATED_PERF_COUNTER */
}
 80093dc:	bd08      	pop	{r3, pc}
 80093de:	bf00      	nop
 80093e0:	24001a78 	.word	0x24001a78
 80093e4:	e0001000 	.word	0xe0001000

080093e8 <cyclesCounterEnd>:

__STATIC_INLINE uint64_t cyclesCounterEnd(void)
{
 80093e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  return DWT->CYCCNT;
 80093ea:	4b0f      	ldr	r3, [pc, #60]	; (8009428 <cyclesCounterEnd+0x40>)
#if USE_CORE_CLOCK_ONLY == 1
  return (uint64_t)(dwtGetCycles() - cyclesCount.dwt_start);
#else
  uint64_t dwt_e;
  uint64_t tick_e;
  dwt_e = dwtGetCycles() - cyclesCount.dwt_start;
 80093ec:	2100      	movs	r1, #0
 80093ee:	4d0f      	ldr	r5, [pc, #60]	; (800942c <cyclesCounterEnd+0x44>)
  return DWT->CYCCNT;
 80093f0:	685c      	ldr	r4, [r3, #4]
  dwt_e = dwtGetCycles() - cyclesCount.dwt_start;
 80093f2:	686b      	ldr	r3, [r5, #4]
 80093f4:	9101      	str	r1, [sp, #4]
 80093f6:	1ae4      	subs	r4, r4, r3
  tick_e = HAL_GetTick() - cyclesCount.tick_start;
 80093f8:	f7f9 fab8 	bl	800296c <HAL_GetTick>
 80093fc:	68ab      	ldr	r3, [r5, #8]
  if (tick_e > cyclesCount.dwt_max) {
 80093fe:	682a      	ldr	r2, [r5, #0]
  tick_e = HAL_GetTick() - cyclesCount.tick_start;
 8009400:	1ac0      	subs	r0, r0, r3
  if (tick_e > cyclesCount.dwt_max) {
 8009402:	9901      	ldr	r1, [sp, #4]
 8009404:	4290      	cmp	r0, r2
 8009406:	d90c      	bls.n	8009422 <cyclesCounterEnd+0x3a>
    /* overflow detected */
    dwt_e = ((tick_e/cyclesCount.dwt_max) * (uint64_t)UINT32_MAX + (uint64_t)dwt_e);
 8009408:	460b      	mov	r3, r1
 800940a:	f7f7 f8cf 	bl	80005ac <__aeabi_uldivmod>
 800940e:	f04f 33ff 	mov.w	r3, #4294967295
 8009412:	fba0 0303 	umull	r0, r3, r0, r3
 8009416:	1900      	adds	r0, r0, r4
 8009418:	eba3 0101 	sub.w	r1, r3, r1
 800941c:	4604      	mov	r4, r0
 800941e:	f141 0100 	adc.w	r1, r1, #0
  }
  return dwt_e;
#endif
#endif
#endif  /* !HAS_DEDICATED_PERF_COUNTER */
}
 8009422:	4620      	mov	r0, r4
 8009424:	b003      	add	sp, #12
 8009426:	bd30      	pop	{r4, r5, pc}
 8009428:	e0001000 	.word	0xe0001000
 800942c:	24001a78 	.word	0x24001a78

08009430 <aiExecCtx>:
{
 8009430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009432:	4604      	mov	r4, r0
  if (!nn_name[0]) {
 8009434:	7800      	ldrb	r0, [r0, #0]
 8009436:	b930      	cbnz	r0, 8009446 <aiExecCtx+0x16>
    if ((pos >= 0) && (pos < AI_MNETWORK_NUMBER) && net_exec_ctx[pos].handle)
 8009438:	b921      	cbnz	r1, 8009444 <aiExecCtx+0x14>
 800943a:	4b10      	ldr	r3, [pc, #64]	; (800947c <aiExecCtx+0x4c>)
 800943c:	6818      	ldr	r0, [r3, #0]
      cur = &net_exec_ctx[pos];
 800943e:	2800      	cmp	r0, #0
 8009440:	bf18      	it	ne
 8009442:	4618      	movne	r0, r3
}
 8009444:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (cur->handle &&
 8009446:	4e0d      	ldr	r6, [pc, #52]	; (800947c <aiExecCtx+0x4c>)
 8009448:	6830      	ldr	r0, [r6, #0]
 800944a:	2800      	cmp	r0, #0
 800944c:	d0fa      	beq.n	8009444 <aiExecCtx+0x14>
          (strlen(cur->report.model_name) == strlen(nn_name)) &&
 800944e:	6877      	ldr	r7, [r6, #4]
 8009450:	4638      	mov	r0, r7
 8009452:	f7f6 ff45 	bl	80002e0 <strlen>
 8009456:	4605      	mov	r5, r0
 8009458:	4620      	mov	r0, r4
 800945a:	f7f6 ff41 	bl	80002e0 <strlen>
      if (cur->handle &&
 800945e:	4285      	cmp	r5, r0
 8009460:	d109      	bne.n	8009476 <aiExecCtx+0x46>
          (strncmp(cur->report.model_name, nn_name,
 8009462:	462a      	mov	r2, r5
 8009464:	4621      	mov	r1, r4
 8009466:	4638      	mov	r0, r7
 8009468:	f00a fae4 	bl	8013a34 <strncmp>
      cur = &net_exec_ctx[pos];
 800946c:	2800      	cmp	r0, #0
 800946e:	bf0c      	ite	eq
 8009470:	4630      	moveq	r0, r6
 8009472:	2000      	movne	r0, #0
 8009474:	e7e6      	b.n	8009444 <aiExecCtx+0x14>
 8009476:	2000      	movs	r0, #0
 8009478:	e7e4      	b.n	8009444 <aiExecCtx+0x14>
 800947a:	bf00      	nop
 800947c:	24001af0 	.word	0x24001af0

08009480 <send_ai_io_tensor.isra.0>:
static bool send_ai_io_tensor(const reqMsg *req, respMsg *resp,
 8009480:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009484:	4605      	mov	r5, r0
 8009486:	b08a      	sub	sp, #40	; 0x28
 8009488:	4618      	mov	r0, r3
  resp->which_payload = respMsg_tensor_tag;
 800948a:	2311      	movs	r3, #17
static bool send_ai_io_tensor(const reqMsg *req, respMsg *resp,
 800948c:	9f10      	ldr	r7, [sp, #64]	; 0x40
  fill_tensor_desc_msg(buffer, &resp->payload.tensor.desc, &array_u32, flags, scale, zero_point);
 800948e:	f10d 080c 	add.w	r8, sp, #12
  resp->which_payload = respMsg_tensor_tag;
 8009492:	80cb      	strh	r3, [r1, #6]
static bool send_ai_io_tensor(const reqMsg *req, respMsg *resp,
 8009494:	460c      	mov	r4, r1
  fill_tensor_desc_msg(buffer, &resp->payload.tensor.desc, &array_u32, flags, scale, zero_point);
 8009496:	9b11      	ldr	r3, [sp, #68]	; 0x44
static bool send_ai_io_tensor(const reqMsg *req, respMsg *resp,
 8009498:	4616      	mov	r6, r2
  fill_tensor_desc_msg(buffer, &resp->payload.tensor.desc, &array_u32, flags, scale, zero_point);
 800949a:	3108      	adds	r1, #8
 800949c:	4642      	mov	r2, r8
 800949e:	9300      	str	r3, [sp, #0]
 80094a0:	463b      	mov	r3, r7
 80094a2:	f7ff fef5 	bl	8009290 <fill_tensor_desc_msg>
  resp->payload.tensor.desc.dims.funcs.encode = encode_uint32;
 80094a6:	4b10      	ldr	r3, [pc, #64]	; (80094e8 <send_ai_io_tensor.isra.0+0x68>)
  if (flags & EnumTensorFlag_TENSOR_FLAG_NO_DATA) {
 80094a8:	f417 7f00 	tst.w	r7, #512	; 0x200
 80094ac:	f04f 0700 	mov.w	r7, #0
  resp->payload.tensor.desc.dims.arg = &array_u32;
 80094b0:	e9c4 3815 	strd	r3, r8, [r4, #84]	; 0x54
  resp->payload.tensor.data.addr = (uint32_t)buffer->data;
 80094b4:	6843      	ldr	r3, [r0, #4]
 80094b6:	6763      	str	r3, [r4, #116]	; 0x74
  if (flags & EnumTensorFlag_TENSOR_FLAG_NO_DATA) {
 80094b8:	d012      	beq.n	80094e0 <send_ai_io_tensor.isra.0+0x60>
    resp->payload.tensor.data.size = 0;
 80094ba:	6727      	str	r7, [r4, #112]	; 0x70
  struct aiPbData data = { 0, resp->payload.tensor.data.size, resp->payload.tensor.data.addr, 0};
 80094bc:	6f23      	ldr	r3, [r4, #112]	; 0x70
  aiPbMgrSendResp(req, resp, state);
 80094be:	4632      	mov	r2, r6
 80094c0:	4621      	mov	r1, r4
 80094c2:	4628      	mov	r0, r5
  struct aiPbData data = { 0, resp->payload.tensor.data.size, resp->payload.tensor.data.addr, 0};
 80094c4:	9307      	str	r3, [sp, #28]
 80094c6:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80094c8:	9706      	str	r7, [sp, #24]
 80094ca:	e9cd 3708 	strd	r3, r7, [sp, #32]
  resp->payload.tensor.data.datas.funcs.encode = &encode_data_cb;
 80094ce:	4b07      	ldr	r3, [pc, #28]	; (80094ec <send_ai_io_tensor.isra.0+0x6c>)
 80094d0:	67a3      	str	r3, [r4, #120]	; 0x78
  resp->payload.tensor.data.datas.arg = (void *)&data;
 80094d2:	ab06      	add	r3, sp, #24
 80094d4:	67e3      	str	r3, [r4, #124]	; 0x7c
  aiPbMgrSendResp(req, resp, state);
 80094d6:	f7ff fa01 	bl	80088dc <aiPbMgrSendResp>
}
 80094da:	b00a      	add	sp, #40	; 0x28
 80094dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    resp->payload.tensor.data.size = _get_buffer_size(buffer);
 80094e0:	f7ff ff64 	bl	80093ac <_get_buffer_size>
 80094e4:	6720      	str	r0, [r4, #112]	; 0x70
 80094e6:	e7e9      	b.n	80094bc <send_ai_io_tensor.isra.0+0x3c>
 80094e8:	080086fb 	.word	0x080086fb
 80094ec:	08008753 	.word	0x08008753

080094f0 <aiOnExecNode_cb>:
    const ai_observer_node *node) {
 80094f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80094f4:	460d      	mov	r5, r1
 80094f6:	4617      	mov	r7, r2
  struct ai_network_user_obs_ctx  *obs_ctx = ctx->obs_ctx;
 80094f8:	f8d0 4084 	ldr.w	r4, [r0, #132]	; 0x84
    const ai_observer_node *node) {
 80094fc:	ed2d 8b02 	vpush	{d8}
 8009500:	b093      	sub	sp, #76	; 0x4c
  volatile uint64_t ts = cyclesCounterEnd(); // dwtGetCycles(); /* time stamp to mark the entry */
 8009502:	f7ff ff71 	bl	80093e8 <cyclesCounterEnd>
  if (flags & AI_OBSERVER_PRE_EVT) {
 8009506:	f015 0602 	ands.w	r6, r5, #2
  volatile uint64_t ts = cyclesCounterEnd(); // dwtGetCycles(); /* time stamp to mark the entry */
 800950a:	e9cd 0104 	strd	r0, r1, [sp, #16]
  if (flags & AI_OBSERVER_PRE_EVT) {
 800950e:	d011      	beq.n	8009534 <aiOnExecNode_cb+0x44>
    obs_ctx->n_cb_in++;
 8009510:	6863      	ldr	r3, [r4, #4]
    if (flags & AI_OBSERVER_FIRST_EVT)
 8009512:	05ea      	lsls	r2, r5, #23
    obs_ctx->n_cb_in++;
 8009514:	f103 0301 	add.w	r3, r3, #1
 8009518:	6063      	str	r3, [r4, #4]
    if (flags & AI_OBSERVER_FIRST_EVT)
 800951a:	d503      	bpl.n	8009524 <aiOnExecNode_cb+0x34>
      obs_ctx->tnodes = ts;
 800951c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009520:	e9c4 2308 	strd	r2, r3, [r4, #32]
  cyclesCounterStart();
 8009524:	f7ff ff50 	bl	80093c8 <cyclesCounterStart>
}
 8009528:	2000      	movs	r0, #0
 800952a:	b013      	add	sp, #76	; 0x4c
 800952c:	ecbd 8b02 	vpop	{d8}
 8009530:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  } else if (flags & AI_OBSERVER_POST_EVT) {
 8009534:	076b      	lsls	r3, r5, #29
 8009536:	d5f5      	bpl.n	8009524 <aiOnExecNode_cb+0x34>
    cyclesCounterStart();
 8009538:	f7ff ff46 	bl	80093c8 <cyclesCounterStart>
    obs_ctx->tnodes += ts;
 800953c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009540:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
 8009544:	181b      	adds	r3, r3, r0
 8009546:	eb42 0201 	adc.w	r2, r2, r1
      type |= (EnumOperatorFlag_OPERATOR_FLAG_LAST << 24);
 800954a:	f415 7f00 	tst.w	r5, #512	; 0x200
    type |= (node->type & (ai_u16)0x7FFF);
 800954e:	887d      	ldrh	r5, [r7, #2]
    obs_ctx->tnodes += ts;
 8009550:	e9c4 3208 	strd	r3, r2, [r4, #32]
    obs_ctx->n_cb_out++;
 8009554:	68a3      	ldr	r3, [r4, #8]
    type |= (node->type & (ai_u16)0x7FFF);
 8009556:	f3c5 050e 	ubfx	r5, r5, #0, #15
    obs_ctx->n_cb_out++;
 800955a:	f103 0301 	add.w	r3, r3, #1
 800955e:	60a3      	str	r3, [r4, #8]
      type |= (EnumOperatorFlag_OPERATOR_FLAG_LAST << 24);
 8009560:	bf0c      	ite	eq
 8009562:	f04f 7380 	moveq.w	r3, #16777216	; 0x1000000
 8009566:	f04f 7340 	movne.w	r3, #50331648	; 0x3000000
    aiOpPerf perf = {dwtCyclesToFloatMs(ts), 0,  2, (uint32_t *)&ts};
 800956a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    type |= (node->type & (ai_u16)0x7FFF);
 800956e:	431d      	orrs	r5, r3
    aiOpPerf perf = {dwtCyclesToFloatMs(ts), 0,  2, (uint32_t *)&ts};
 8009570:	f7ff fdb0 	bl	80090d4 <dwtCyclesToFloatMs>
 8009574:	ab04      	add	r3, sp, #16
 8009576:	2202      	movs	r2, #2
 8009578:	ed8d 0a07 	vstr	s0, [sp, #28]
 800957c:	930a      	str	r3, [sp, #40]	; 0x28
    aiPbMgrSendOperator(obs_ctx->creq, obs_ctx->cresp, EnumState_S_PROCESSING,
 800957e:	ab07      	add	r3, sp, #28
    aiOpPerf perf = {dwtCyclesToFloatMs(ts), 0,  2, (uint32_t *)&ts};
 8009580:	9209      	str	r2, [sp, #36]	; 0x24
    aiPbMgrSendOperator(obs_ctx->creq, obs_ctx->cresp, EnumState_S_PROCESSING,
 8009582:	9302      	str	r3, [sp, #8]
 8009584:	88bb      	ldrh	r3, [r7, #4]
    aiOpPerf perf = {dwtCyclesToFloatMs(ts), 0,  2, (uint32_t *)&ts};
 8009586:	9608      	str	r6, [sp, #32]
    aiPbMgrSendOperator(obs_ctx->creq, obs_ctx->cresp, EnumState_S_PROCESSING,
 8009588:	e9cd 5300 	strd	r5, r3, [sp]
 800958c:	4633      	mov	r3, r6
 800958e:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
 8009592:	f7ff fa69 	bl	8008a68 <aiPbMgrSendOperator>
    tl = GET_TENSOR_LIST_OUT(node->tensors);
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	881a      	ldrh	r2, [r3, #0]
 800959a:	2a01      	cmp	r2, #1
 800959c:	d90e      	bls.n	80095bc <aiOnExecNode_cb+0xcc>
 800959e:	f8d3 8004 	ldr.w	r8, [r3, #4]
        zero_point = AI_TENSOR_INTEGER_GET_ZEROPOINT_I8(t, 0);
 80095a2:	46b1      	mov	r9, r6
      ai_float scale = AI_TENSOR_INTEGER_GET_SCALE(t, 0);
 80095a4:	eddf 8a38 	vldr	s17, [pc, #224]	; 8009688 <aiOnExecNode_cb+0x198>
    AI_FOR_EACH_TENSOR_LIST_DO(i, t, tl) {
 80095a8:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 80095ac:	429e      	cmp	r6, r3
 80095ae:	d205      	bcs.n	80095bc <aiOnExecNode_cb+0xcc>
 80095b0:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80095b4:	b113      	cbz	r3, 80095bc <aiOnExecNode_cb+0xcc>
 80095b6:	f853 7026 	ldr.w	r7, [r3, r6, lsl #2]
 80095ba:	b94f      	cbnz	r7, 80095d0 <aiOnExecNode_cb+0xe0>
    obs_ctx->tcom += cyclesCounterEnd();
 80095bc:	f7ff ff14 	bl	80093e8 <cyclesCounterEnd>
 80095c0:	e9d4 3206 	ldrd	r3, r2, [r4, #24]
 80095c4:	1818      	adds	r0, r3, r0
 80095c6:	eb42 0101 	adc.w	r1, r2, r1
 80095ca:	e9c4 0106 	strd	r0, r1, [r4, #24]
 80095ce:	e7a9      	b.n	8009524 <aiOnExecNode_cb+0x34>
      ai_float scale = AI_TENSOR_INTEGER_GET_SCALE(t, 0);
 80095d0:	683b      	ldr	r3, [r7, #0]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d046      	beq.n	8009664 <aiOnExecNode_cb+0x174>
 80095d6:	685a      	ldr	r2, [r3, #4]
 80095d8:	2a00      	cmp	r2, #0
 80095da:	d043      	beq.n	8009664 <aiOnExecNode_cb+0x174>
 80095dc:	8859      	ldrh	r1, [r3, #2]
 80095de:	2900      	cmp	r1, #0
 80095e0:	d040      	beq.n	8009664 <aiOnExecNode_cb+0x174>
 80095e2:	6812      	ldr	r2, [r2, #0]
 80095e4:	ed92 8a00 	vldr	s16, [r2]
      if (AI_TENSOR_FMT_GET_SIGN(t))
 80095e8:	69b8      	ldr	r0, [r7, #24]
 80095ea:	6802      	ldr	r2, [r0, #0]
 80095ec:	f412 0500 	ands.w	r5, r2, #8388608	; 0x800000
 80095f0:	d03b      	beq.n	800966a <aiOnExecNode_cb+0x17a>
        zero_point = AI_TENSOR_INTEGER_GET_ZEROPOINT_I8(t, 0);
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d044      	beq.n	8009680 <aiOnExecNode_cb+0x190>
 80095f6:	6859      	ldr	r1, [r3, #4]
 80095f8:	2900      	cmp	r1, #0
 80095fa:	d043      	beq.n	8009684 <aiOnExecNode_cb+0x194>
 80095fc:	885d      	ldrh	r5, [r3, #2]
 80095fe:	b115      	cbz	r5, 8009606 <aiOnExecNode_cb+0x116>
 8009600:	684b      	ldr	r3, [r1, #4]
 8009602:	f993 5000 	ldrsb.w	r5, [r3]
      ai_buffer buffer =
 8009606:	68c3      	ldr	r3, [r0, #12]
          AI_BUFFER_INIT(
 8009608:	2101      	movs	r1, #1
 800960a:	4638      	mov	r0, r7
      ai_buffer buffer =
 800960c:	920b      	str	r2, [sp, #44]	; 0x2c
 800960e:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8009612:	e9cd 390c 	strd	r3, r9, [sp, #48]	; 0x30
          AI_BUFFER_INIT(
 8009616:	f002 f9f9 	bl	800ba0c <get_tensor_size>
      ai_buffer buffer =
 800961a:	7a3b      	ldrb	r3, [r7, #8]
 800961c:	900f      	str	r0, [sp, #60]	; 0x3c
 800961e:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
          AI_BUFFER_INIT(
 8009622:	68bb      	ldr	r3, [r7, #8]
      ai_buffer buffer =
 8009624:	9a10      	ldr	r2, [sp, #64]	; 0x40
          AI_BUFFER_INIT(
 8009626:	f3c3 2317 	ubfx	r3, r3, #8, #24
      ai_buffer buffer =
 800962a:	f363 221f 	bfi	r2, r3, #8, #24
 800962e:	9210      	str	r2, [sp, #64]	; 0x40
 8009630:	68fb      	ldr	r3, [r7, #12]
      if (obs_ctx->no_data)
 8009632:	7d22      	ldrb	r2, [r4, #20]
      ai_buffer buffer =
 8009634:	9311      	str	r3, [sp, #68]	; 0x44
      if (i == (GET_TENSOR_LIST_SIZE(tl) - 1))
 8009636:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800963a:	3b01      	subs	r3, #1
        tens_flags |= EnumTensorFlag_TENSOR_FLAG_LAST;
 800963c:	429e      	cmp	r6, r3
 800963e:	bf14      	ite	ne
 8009640:	2304      	movne	r3, #4
 8009642:	f44f 7382 	moveq.w	r3, #260	; 0x104
      if (obs_ctx->no_data)
 8009646:	b10a      	cbz	r2, 800964c <aiOnExecNode_cb+0x15c>
        tens_flags |= EnumTensorFlag_TENSOR_FLAG_NO_DATA;
 8009648:	f443 7300 	orr.w	r3, r3, #512	; 0x200
      send_ai_io_tensor(obs_ctx->creq, obs_ctx->cresp, EnumState_S_PROCESSING,
 800964c:	eeb0 0a48 	vmov.f32	s0, s16
 8009650:	2202      	movs	r2, #2
    AI_FOR_EACH_TENSOR_LIST_DO(i, t, tl) {
 8009652:	3601      	adds	r6, #1
      send_ai_io_tensor(obs_ctx->creq, obs_ctx->cresp, EnumState_S_PROCESSING,
 8009654:	e9cd 3500 	strd	r3, r5, [sp]
 8009658:	ab0b      	add	r3, sp, #44	; 0x2c
 800965a:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
 800965e:	f7ff ff0f 	bl	8009480 <send_ai_io_tensor.isra.0>
    AI_FOR_EACH_TENSOR_LIST_DO(i, t, tl) {
 8009662:	e7a1      	b.n	80095a8 <aiOnExecNode_cb+0xb8>
      ai_float scale = AI_TENSOR_INTEGER_GET_SCALE(t, 0);
 8009664:	eeb0 8a68 	vmov.f32	s16, s17
 8009668:	e7be      	b.n	80095e8 <aiOnExecNode_cb+0xf8>
        zero_point = AI_TENSOR_INTEGER_GET_ZEROPOINT_U8(t, 0);
 800966a:	2b00      	cmp	r3, #0
 800966c:	d0cb      	beq.n	8009606 <aiOnExecNode_cb+0x116>
 800966e:	6859      	ldr	r1, [r3, #4]
 8009670:	2900      	cmp	r1, #0
 8009672:	d0c8      	beq.n	8009606 <aiOnExecNode_cb+0x116>
 8009674:	885b      	ldrh	r3, [r3, #2]
 8009676:	2b00      	cmp	r3, #0
 8009678:	d0c5      	beq.n	8009606 <aiOnExecNode_cb+0x116>
 800967a:	684b      	ldr	r3, [r1, #4]
 800967c:	781d      	ldrb	r5, [r3, #0]
 800967e:	e7c2      	b.n	8009606 <aiOnExecNode_cb+0x116>
        zero_point = AI_TENSOR_INTEGER_GET_ZEROPOINT_I8(t, 0);
 8009680:	461d      	mov	r5, r3
 8009682:	e7c0      	b.n	8009606 <aiOnExecNode_cb+0x116>
 8009684:	460d      	mov	r5, r1
 8009686:	e7be      	b.n	8009606 <aiOnExecNode_cb+0x116>
 8009688:	00000000 	.word	0x00000000

0800968c <aiPbCmdNNInfo>:

void aiPbCmdNNInfo(const reqMsg *req, respMsg *resp, void *param)
{
 800968c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009690:	4606      	mov	r6, r0
 8009692:	b09c      	sub	sp, #112	; 0x70
 8009694:	460c      	mov	r4, r1
  struct ai_network_exec_ctx *ctx;

  UNUSED(param);

  ctx = aiExecCtx(req->name, req->param);
 8009696:	300c      	adds	r0, #12
 8009698:	f850 1c04 	ldr.w	r1, [r0, #-4]
 800969c:	f7ff fec8 	bl	8009430 <aiExecCtx>
  if (ctx)
 80096a0:	4605      	mov	r5, r0
 80096a2:	2800      	cmp	r0, #0
 80096a4:	f000 80a4 	beq.w	80097f0 <aiPbCmdNNInfo+0x164>
  resp->which_payload = respMsg_minfo_tag;
 80096a8:	2316      	movs	r3, #22
    send_model_info(req, resp, EnumState_S_IDLE, &ctx->report,
 80096aa:	f890 7081 	ldrb.w	r7, [r0, #129]	; 0x81
 80096ae:	f890 8080 	ldrb.w	r8, [r0, #128]	; 0x80
  aiPbStrCopy(nn->model_name, &resp->payload.minfo.name[0],
 80096b2:	2240      	movs	r2, #64	; 0x40
 80096b4:	f104 0108 	add.w	r1, r4, #8
 80096b8:	6840      	ldr	r0, [r0, #4]
  resp->which_payload = respMsg_minfo_tag;
 80096ba:	80e3      	strh	r3, [r4, #6]
  aiPbStrCopy(nn->model_name, &resp->payload.minfo.name[0],
 80096bc:	f7ff f8b2 	bl	8008824 <aiPbStrCopy>
  resp->payload.minfo.rtid = _AI_RUNTIME_ID;
 80096c0:	2301      	movs	r3, #1
  aiPbStrCopy(nn->model_signature, &resp->payload.minfo.signature[0],
 80096c2:	2240      	movs	r2, #64	; 0x40
 80096c4:	f104 014c 	add.w	r1, r4, #76	; 0x4c
  resp->payload.minfo.rtid = _AI_RUNTIME_ID;
 80096c8:	64a3      	str	r3, [r4, #72]	; 0x48
  aiPbStrCopy(nn->model_signature, &resp->payload.minfo.signature[0],
 80096ca:	68a8      	ldr	r0, [r5, #8]
 80096cc:	f7ff f8aa 	bl	8008824 <aiPbStrCopy>
  aiPbStrCopy(nn->compile_datetime, &resp->payload.minfo.compile_datetime[0],
 80096d0:	2240      	movs	r2, #64	; 0x40
 80096d2:	f104 018c 	add.w	r1, r4, #140	; 0x8c
 80096d6:	6928      	ldr	r0, [r5, #16]
 80096d8:	f7ff f8a4 	bl	8008824 <aiPbStrCopy>
  resp->payload.minfo.runtime_version = _ai_version_to_uint32(&nn->runtime_version);
 80096dc:	69ab      	ldr	r3, [r5, #24]
  resp->payload.minfo.n_macc = (uint64_t)nn->n_macc;
 80096de:	6b2a      	ldr	r2, [r5, #48]	; 0x30
  struct _data_tensor_desc tensor_desc_ins = {&nn->inputs[0], flags, 0.0, 0};
 80096e0:	f04f 0c00 	mov.w	ip, #0
 80096e4:	ba1b      	rev	r3, r3
 80096e6:	6ba9      	ldr	r1, [r5, #56]	; 0x38
  struct _encode_tensor_desc tensor_ins = {
 80096e8:	4845      	ldr	r0, [pc, #276]	; (8009800 <aiPbCmdNNInfo+0x174>)
  resp->payload.minfo.runtime_version = _ai_version_to_uint32(&nn->runtime_version);
 80096ea:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
  resp->payload.minfo.tool_version = _ai_version_to_uint32(&nn->tool_version);
 80096ee:	6a2b      	ldr	r3, [r5, #32]
  struct _encode_tensor_desc tensor_ins = {
 80096f0:	9002      	str	r0, [sp, #8]
 80096f2:	ba1b      	rev	r3, r3
  struct _encode_tensor_desc tensor_outs = {
 80096f4:	9005      	str	r0, [sp, #20]
 80096f6:	a818      	add	r0, sp, #96	; 0x60
  struct _data_tensor_desc tensor_desc_ins = {&nn->inputs[0], flags, 0.0, 0};
 80096f8:	f8cd c058 	str.w	ip, [sp, #88]	; 0x58
  resp->payload.minfo.tool_version = _ai_version_to_uint32(&nn->tool_version);
 80096fc:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
  resp->payload.minfo.n_macc = (uint64_t)nn->n_macc;
 8009700:	2300      	movs	r3, #0
  struct _data_tensor_desc tensor_desc_outs = {&nn->outputs[0], flags, 0.0, 0};
 8009702:	f8cd c068 	str.w	ip, [sp, #104]	; 0x68
    flags |= EnumTensorFlag_TENSOR_FLAG_IN_MEMPOOL;
 8009706:	4598      	cmp	r8, r3
  struct _data_tensor_desc tensor_desc_ins = {&nn->inputs[0], flags, 0.0, 0};
 8009708:	9317      	str	r3, [sp, #92]	; 0x5c
  struct _data_tensor_desc tensor_desc_outs = {&nn->outputs[0], flags, 0.0, 0};
 800970a:	931b      	str	r3, [sp, #108]	; 0x6c
  struct _encode_tensor_desc tensor_outs = {
 800970c:	9007      	str	r0, [sp, #28]
  resp->payload.minfo.n_macc = (uint64_t)nn->n_macc;
 800970e:	e9c4 2336 	strd	r2, r3, [r4, #216]	; 0xd8
  resp->payload.minfo.n_nodes = nn->n_nodes;
 8009712:	6faa      	ldr	r2, [r5, #120]	; 0x78
 8009714:	f8c4 20e0 	str.w	r2, [r4, #224]	; 0xe0
    flags |= EnumTensorFlag_TENSOR_FLAG_IN_MEMPOOL;
 8009718:	f240 4201 	movw	r2, #1025	; 0x401
 800971c:	bf08      	it	eq
 800971e:	2201      	moveq	r2, #1
    flags |= EnumTensorFlag_TENSOR_FLAG_IN_MEMPOOL;
 8009720:	429f      	cmp	r7, r3
  struct _data_tensor_desc tensor_desc_outs = {&nn->outputs[0], flags, 0.0, 0};
 8009722:	6bef      	ldr	r7, [r5, #60]	; 0x3c
  struct _data_tensor_desc tensor_desc_ins = {&nn->inputs[0], flags, 0.0, 0};
 8009724:	e9cd 1214 	strd	r1, r2, [sp, #80]	; 0x50
      &encode_ai_buffer_to_tensor_desc, nn->n_inputs, &tensor_desc_ins };
 8009728:	8eaa      	ldrh	r2, [r5, #52]	; 0x34
  struct _encode_tensor_desc tensor_ins = {
 800972a:	a914      	add	r1, sp, #80	; 0x50
 800972c:	9203      	str	r2, [sp, #12]
  resp->payload.minfo.n_inputs = nn->n_inputs;
 800972e:	f8c4 20e4 	str.w	r2, [r4, #228]	; 0xe4
  resp->payload.minfo.inputs.arg = (void *)&tensor_ins;
 8009732:	aa02      	add	r2, sp, #8
  struct _encode_tensor_desc tensor_ins = {
 8009734:	9104      	str	r1, [sp, #16]
  resp->payload.minfo.inputs.arg = (void *)&tensor_ins;
 8009736:	f8c4 20ec 	str.w	r2, [r4, #236]	; 0xec
    flags |= EnumTensorFlag_TENSOR_FLAG_IN_MEMPOOL;
 800973a:	f240 4202 	movw	r2, #1026	; 0x402
 800973e:	bf08      	it	eq
 8009740:	2202      	moveq	r2, #2
  resp->payload.minfo.inputs.funcs.encode = encode_tensor_desc;
 8009742:	4930      	ldr	r1, [pc, #192]	; (8009804 <aiPbCmdNNInfo+0x178>)
  struct _data_tensor_desc tensor_desc_outs = {&nn->outputs[0], flags, 0.0, 0};
 8009744:	e9cd 7218 	strd	r7, r2, [sp, #96]	; 0x60
      &encode_ai_buffer_to_tensor_desc, nn->n_outputs, &tensor_desc_outs };
 8009748:	8eea      	ldrh	r2, [r5, #54]	; 0x36
  resp->payload.minfo.inputs.funcs.encode = encode_tensor_desc;
 800974a:	f8c4 10e8 	str.w	r1, [r4, #232]	; 0xe8
  struct _encode_tensor_desc tensor_outs = {
 800974e:	9206      	str	r2, [sp, #24]
  resp->payload.minfo.outputs.funcs.encode = encode_tensor_desc;
 8009750:	e9c4 213c 	strd	r2, r1, [r4, #240]	; 0xf0
  resp->payload.minfo.outputs.arg = (void *)&tensor_outs;
 8009754:	aa05      	add	r2, sp, #20
 8009756:	f8c4 20f8 	str.w	r2, [r4, #248]	; 0xf8
  if (nn->map_activations.size) {
 800975a:	f8b5 704e 	ldrh.w	r7, [r5, #78]	; 0x4e
 800975e:	2f00      	cmp	r7, #0
 8009760:	d042      	beq.n	80097e8 <aiPbCmdNNInfo+0x15c>
      size_acts += nn->map_activations.buffer[i].size;
 8009762:	6d28      	ldr	r0, [r5, #80]	; 0x50
    for (int i=0; i<nn->map_activations.size; i++)
 8009764:	461a      	mov	r2, r3
      size_acts += nn->map_activations.buffer[i].size;
 8009766:	f04f 0e1c 	mov.w	lr, #28
 800976a:	3010      	adds	r0, #16
 800976c:	fb0e fc02 	mul.w	ip, lr, r2
    for (int i=0; i<nn->map_activations.size; i++)
 8009770:	3201      	adds	r2, #1
      size_acts += nn->map_activations.buffer[i].size;
 8009772:	f850 c00c 	ldr.w	ip, [r0, ip]
    for (int i=0; i<nn->map_activations.size; i++)
 8009776:	42ba      	cmp	r2, r7
      size_acts += nn->map_activations.buffer[i].size;
 8009778:	4463      	add	r3, ip
    for (int i=0; i<nn->map_activations.size; i++)
 800977a:	dbf7      	blt.n	800976c <aiPbCmdNNInfo+0xe0>
  struct _mempool_attr_desc tensor_desc_acts = {"acts", size_acts, 0};
 800977c:	4a22      	ldr	r2, [pc, #136]	; (8009808 <aiPbCmdNNInfo+0x17c>)
  struct _encode_tensor_desc tensor_acts = {
 800977e:	a808      	add	r0, sp, #32
 8009780:	4f22      	ldr	r7, [pc, #136]	; (800980c <aiPbCmdNNInfo+0x180>)
 8009782:	900d      	str	r0, [sp, #52]	; 0x34
  if (nn->map_weights.size) {
 8009784:	f8b5 0046 	ldrh.w	r0, [r5, #70]	; 0x46
  struct _encode_tensor_desc tensor_acts = {
 8009788:	970b      	str	r7, [sp, #44]	; 0x2c
  struct _mempool_attr_desc tensor_desc_acts = {"acts", size_acts, 0};
 800978a:	e9cd 2308 	strd	r2, r3, [sp, #32]
  struct _encode_tensor_desc tensor_acts = {
 800978e:	2201      	movs	r2, #1
  struct _mempool_attr_desc tensor_desc_acts = {"acts", size_acts, 0};
 8009790:	2300      	movs	r3, #0
  struct _encode_tensor_desc tensor_acts = {
 8009792:	920c      	str	r2, [sp, #48]	; 0x30
  struct _mempool_attr_desc tensor_desc_acts = {"acts", size_acts, 0};
 8009794:	930a      	str	r3, [sp, #40]	; 0x28
  resp->payload.minfo.activations.funcs.encode = encode_tensor_desc;
 8009796:	e9c4 213f 	strd	r2, r1, [r4, #252]	; 0xfc
  resp->payload.minfo.activations.arg = (void *)&tensor_acts;
 800979a:	aa0b      	add	r2, sp, #44	; 0x2c
 800979c:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
  if (nn->map_weights.size) {
 80097a0:	b320      	cbz	r0, 80097ec <aiPbCmdNNInfo+0x160>
      size_params += nn->map_weights.buffer[i].size;
 80097a2:	6cad      	ldr	r5, [r5, #72]	; 0x48
    for (int i=0; i<nn->map_weights.size; i++)
 80097a4:	461a      	mov	r2, r3
      size_params += nn->map_weights.buffer[i].size;
 80097a6:	f04f 0e1c 	mov.w	lr, #28
 80097aa:	3510      	adds	r5, #16
 80097ac:	fb0e fc02 	mul.w	ip, lr, r2
    for (int i=0; i<nn->map_weights.size; i++)
 80097b0:	3201      	adds	r2, #1
      size_params += nn->map_weights.buffer[i].size;
 80097b2:	f855 c00c 	ldr.w	ip, [r5, ip]
    for (int i=0; i<nn->map_weights.size; i++)
 80097b6:	4282      	cmp	r2, r0
      size_params += nn->map_weights.buffer[i].size;
 80097b8:	4463      	add	r3, ip
    for (int i=0; i<nn->map_weights.size; i++)
 80097ba:	dbf7      	blt.n	80097ac <aiPbCmdNNInfo+0x120>
  struct _mempool_attr_desc tensor_desc_w = {"params", size_params, 0};
 80097bc:	4a14      	ldr	r2, [pc, #80]	; (8009810 <aiPbCmdNNInfo+0x184>)
  struct _encode_tensor_desc tensor_w = {
 80097be:	a80e      	add	r0, sp, #56	; 0x38
  struct _mempool_attr_desc tensor_desc_w = {"params", size_params, 0};
 80097c0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  struct _encode_tensor_desc tensor_w = {
 80097c4:	2301      	movs	r3, #1
  struct _mempool_attr_desc tensor_desc_w = {"params", size_params, 0};
 80097c6:	2200      	movs	r2, #0
  struct _encode_tensor_desc tensor_w = {
 80097c8:	9013      	str	r0, [sp, #76]	; 0x4c
  aiPbMgrSendResp(req, resp, state);
 80097ca:	4630      	mov	r0, r6
  struct _encode_tensor_desc tensor_w = {
 80097cc:	9312      	str	r3, [sp, #72]	; 0x48
  resp->payload.minfo.params.funcs.encode = encode_tensor_desc;
 80097ce:	e9c4 3142 	strd	r3, r1, [r4, #264]	; 0x108
  resp->payload.minfo.params.arg = (void *)&tensor_w;
 80097d2:	ab11      	add	r3, sp, #68	; 0x44
  aiPbMgrSendResp(req, resp, state);
 80097d4:	4621      	mov	r1, r4
  resp->payload.minfo.params.arg = (void *)&tensor_w;
 80097d6:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
  struct _encode_tensor_desc tensor_w = {
 80097da:	e9cd 2710 	strd	r2, r7, [sp, #64]	; 0x40
  aiPbMgrSendResp(req, resp, state);
 80097de:	f7ff f87d 	bl	80088dc <aiPbMgrSendResp>
        ctx->inputs_in_activations, ctx->outputs_in_activations);
  else
    aiPbMgrSendAck(req, resp, EnumState_S_ERROR,
        EnumError_E_INVALID_PARAM, EnumError_E_INVALID_PARAM);
}
 80097e2:	b01c      	add	sp, #112	; 0x70
 80097e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  ai_size size_acts = 0;
 80097e8:	463b      	mov	r3, r7
 80097ea:	e7c7      	b.n	800977c <aiPbCmdNNInfo+0xf0>
  ai_size size_params = 0;
 80097ec:	4603      	mov	r3, r0
 80097ee:	e7e5      	b.n	80097bc <aiPbCmdNNInfo+0x130>
    aiPbMgrSendAck(req, resp, EnumState_S_ERROR,
 80097f0:	2304      	movs	r3, #4
 80097f2:	4621      	mov	r1, r4
 80097f4:	4630      	mov	r0, r6
 80097f6:	461a      	mov	r2, r3
 80097f8:	9300      	str	r3, [sp, #0]
 80097fa:	f7ff f8c3 	bl	8008984 <aiPbMgrSendAck>
}
 80097fe:	e7f0      	b.n	80097e2 <aiPbCmdNNInfo+0x156>
 8009800:	0800930d 	.word	0x0800930d
 8009804:	08008875 	.word	0x08008875
 8009808:	08016552 	.word	0x08016552
 800980c:	08009361 	.word	0x08009361
 8009810:	08016557 	.word	0x08016557

08009814 <_print_debug>:
{
 8009814:	b40e      	push	{r1, r2, r3}
 8009816:	b517      	push	{r0, r1, r2, r4, lr}
  if (!debug)
 8009818:	b178      	cbz	r0, 800983a <_print_debug+0x26>
  s = LC_VSNPRINT(_print_buffer, _PRINT_BUFFER_SIZE, fmt, ap);
 800981a:	4c0f      	ldr	r4, [pc, #60]	; (8009858 <_print_debug+0x44>)
  va_start(ap, fmt);
 800981c:	ab06      	add	r3, sp, #24
  s = LC_VSNPRINT(_print_buffer, _PRINT_BUFFER_SIZE, fmt, ap);
 800981e:	2150      	movs	r1, #80	; 0x50
 8009820:	9a05      	ldr	r2, [sp, #20]
 8009822:	4620      	mov	r0, r4
  va_start(ap, fmt);
 8009824:	9301      	str	r3, [sp, #4]
  s = LC_VSNPRINT(_print_buffer, _PRINT_BUFFER_SIZE, fmt, ap);
 8009826:	f7ff fbcf 	bl	8008fc8 <lc_vsnprint>
      _print_buffer[s] = 0;
 800982a:	2100      	movs	r1, #0
 800982c:	1823      	adds	r3, r4, r0
  while (s) {
 800982e:	b948      	cbnz	r0, 8009844 <_print_debug+0x30>
  aiPbMgrSendLogV2(EnumState_S_WAITING, 1, &_print_buffer[0]);
 8009830:	2101      	movs	r1, #1
 8009832:	4a09      	ldr	r2, [pc, #36]	; (8009858 <_print_debug+0x44>)
 8009834:	4608      	mov	r0, r1
 8009836:	f7ff f8c5 	bl	80089c4 <aiPbMgrSendLogV2>
}
 800983a:	b003      	add	sp, #12
 800983c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009840:	b003      	add	sp, #12
 8009842:	4770      	bx	lr
    if ((_print_buffer[s] == '\n') || (_print_buffer[s] == '\r'))
 8009844:	781a      	ldrb	r2, [r3, #0]
 8009846:	2a0a      	cmp	r2, #10
 8009848:	d001      	beq.n	800984e <_print_debug+0x3a>
 800984a:	2a0d      	cmp	r2, #13
 800984c:	d100      	bne.n	8009850 <_print_debug+0x3c>
      _print_buffer[s] = 0;
 800984e:	7019      	strb	r1, [r3, #0]
    s--;
 8009850:	3801      	subs	r0, #1
 8009852:	3b01      	subs	r3, #1
 8009854:	e7eb      	b.n	800982e <_print_debug+0x1a>
 8009856:	bf00      	nop
 8009858:	24001aa0 	.word	0x24001aa0

0800985c <aiPbCmdNNRun>:

void aiPbCmdNNRun(const reqMsg *req, respMsg *resp, void *param)
{
 800985c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009860:	4605      	mov	r5, r0
 8009862:	460e      	mov	r6, r1
  ai_buffer *ai_output;

  UNUSED(param);

  /* 0 - Check if requested c-name model is available -------------- */
  ctx = aiExecCtx(req->name, -1);
 8009864:	300c      	adds	r0, #12
 8009866:	f04f 31ff 	mov.w	r1, #4294967295
{
 800986a:	ed2d 8b02 	vpush	{d8}
 800986e:	b0a1      	sub	sp, #132	; 0x84
  ctx = aiExecCtx(req->name, -1);
 8009870:	f7ff fdde 	bl	8009430 <aiExecCtx>
  if (!ctx) {
 8009874:	4604      	mov	r4, r0
 8009876:	b910      	cbnz	r0, 800987e <aiPbCmdNNRun+0x22>
    aiPbMgrSendAck(req, resp, EnumState_S_ERROR,
 8009878:	2304      	movs	r3, #4

  batch = ai_mnetwork_run(ctx->handle, ai_input, ai_output);
  if (batch != 1) {
    aiLogErr(ai_mnetwork_get_error(ctx->handle),
        "ai_mnetwork_run");
    aiPbMgrSendAck(req, resp, EnumState_S_ERROR,
 800987a:	9300      	str	r3, [sp, #0]
 800987c:	e099      	b.n	80099b2 <aiPbCmdNNRun+0x156>
  ctx->debug = req->param & EnumRunParam_P_RUN_CONF_DEBUG?true:false;
 800987e:	68ab      	ldr	r3, [r5, #8]
  net_obs_ctx.no_data = true;
 8009880:	2101      	movs	r1, #1
 8009882:	4a9b      	ldr	r2, [pc, #620]	; (8009af0 <aiPbCmdNNRun+0x294>)
  net_obs_ctx.tcom = 0ULL;
 8009884:	f04f 0800 	mov.w	r8, #0
  net_obs_ctx.is_enabled = false;
 8009888:	f013 0702 	ands.w	r7, r3, #2
  net_obs_ctx.tcom = 0ULL;
 800988c:	f04f 0900 	mov.w	r9, #0
  net_obs_ctx.no_data = true;
 8009890:	7511      	strb	r1, [r2, #20]
  ctx->debug = req->param & EnumRunParam_P_RUN_CONF_DEBUG?true:false;
 8009892:	f3c3 2000 	ubfx	r0, r3, #8, #1
  net_obs_ctx.is_enabled = false;
 8009896:	bf18      	it	ne
 8009898:	460f      	movne	r7, r1
  ctx->obs_ctx = &net_obs_ctx;
 800989a:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
  ctx->debug = req->param & EnumRunParam_P_RUN_CONF_DEBUG?true:false;
 800989e:	f884 0082 	strb.w	r0, [r4, #130]	; 0x82
  net_obs_ctx.is_enabled = false;
 80098a2:	7017      	strb	r7, [r2, #0]
  if ((req->param & EnumRunParam_P_RUN_MODE_PER_LAYER_WITH_DATA) ==
 80098a4:	075f      	lsls	r7, r3, #29
  net_obs_ctx.n_cb_in  = 0;
 80098a6:	f04f 0700 	mov.w	r7, #0
    net_obs_ctx.is_enabled = true;
 80098aa:	bf44      	itt	mi
 80098ac:	7011      	strbmi	r1, [r2, #0]
    net_obs_ctx.no_data = false;
 80098ae:	2100      	movmi	r1, #0
  net_obs_ctx.tcom = 0ULL;
 80098b0:	e9c2 8906 	strd	r8, r9, [r2, #24]
    net_obs_ctx.no_data = false;
 80098b4:	bf48      	it	mi
 80098b6:	7511      	strbmi	r1, [r2, #20]
  PB_LC_PRINT(ctx->debug, "RUN: Waiting data.. opt=0x%x, param=0x%x\r\n", req->opt, req->param);
 80098b8:	498e      	ldr	r1, [pc, #568]	; (8009af4 <aiPbCmdNNRun+0x298>)
  net_obs_ctx.tnodes = 0ULL;
 80098ba:	e9c2 8908 	strd	r8, r9, [r2, #32]
  net_obs_ctx.n_cb_out = 0;
 80098be:	e9c2 7701 	strd	r7, r7, [r2, #4]
  bool first_only = req->param & EnumRunParam_P_RUN_CONF_SAME_VALUE?true:false;
 80098c2:	f3c3 2240 	ubfx	r2, r3, #9, #1
 80098c6:	9206      	str	r2, [sp, #24]
  bool direct_write = req->param & EnumRunParam_P_RUN_CONF_DIRECT_WRITE?true:false;
 80098c8:	f3c3 2280 	ubfx	r2, r3, #10, #1
 80098cc:	9205      	str	r2, [sp, #20]
  PB_LC_PRINT(ctx->debug, "RUN: Waiting data.. opt=0x%x, param=0x%x\r\n", req->opt, req->param);
 80098ce:	6cea      	ldr	r2, [r5, #76]	; 0x4c
 80098d0:	f7ff ffa0 	bl	8009814 <_print_debug>
  ai_output = ctx->report.outputs;
 80098d4:	e9d4 a30e 	ldrd	sl, r3, [r4, #56]	; 0x38
      _get_buffer_size(&ai_input[0]), EnumError_E_NONE);
 80098d8:	4650      	mov	r0, sl
 80098da:	46d0      	mov	r8, sl
  ai_output = ctx->report.outputs;
 80098dc:	9307      	str	r3, [sp, #28]
      _get_buffer_size(&ai_input[0]), EnumError_E_NONE);
 80098de:	f7ff fd65 	bl	80093ac <_get_buffer_size>
  aiPbMgrSendAck(req, resp, EnumState_S_WAITING,
 80098e2:	2201      	movs	r2, #1
      _get_buffer_size(&ai_input[0]), EnumError_E_NONE);
 80098e4:	4603      	mov	r3, r0
  aiPbMgrSendAck(req, resp, EnumState_S_WAITING,
 80098e6:	4631      	mov	r1, r6
 80098e8:	4628      	mov	r0, r5
 80098ea:	9700      	str	r7, [sp, #0]
 80098ec:	f7ff f84a 	bl	8008984 <aiPbMgrSendAck>
  for (int i = 0; i < ctx->report.n_inputs; i++) {
 80098f0:	f8b4 9034 	ldrh.w	r9, [r4, #52]	; 0x34
 80098f4:	45b9      	cmp	r9, r7
 80098f6:	dc2b      	bgt.n	8009950 <aiPbCmdNNRun+0xf4>
  struct ai_network_user_obs_ctx  *obs_ctx = ctx->obs_ctx;
 80098f8:	f8d4 7084 	ldr.w	r7, [r4, #132]	; 0x84
  if (obs_ctx->is_enabled == false)
 80098fc:	783b      	ldrb	r3, [r7, #0]
 80098fe:	b18b      	cbz	r3, 8009924 <aiPbCmdNNRun+0xc8>
  if (ctx->handle == AI_HANDLE_NULL)
 8009900:	6820      	ldr	r0, [r4, #0]
 8009902:	b178      	cbz	r0, 8009924 <aiPbCmdNNRun+0xc8>
  ai_mnetwork_get_private_handle(ctx->handle,
 8009904:	a90e      	add	r1, sp, #56	; 0x38
 8009906:	aa12      	add	r2, sp, #72	; 0x48
  obs_ctx->cresp = cresp;
 8009908:	e9c7 5603 	strd	r5, r6, [r7, #12]
  ai_mnetwork_get_private_handle(ctx->handle,
 800990c:	f000 fb10 	bl	8009f30 <ai_mnetwork_get_private_handle>
  obs_ctx->plt_ctx.on_node = aiOnExecNode_cb;
 8009910:	4b79      	ldr	r3, [pc, #484]	; (8009af8 <aiPbCmdNNRun+0x29c>)
  res = ai_platform_observer_register_s(net_hdl, &obs_ctx->plt_ctx);
 8009912:	f107 0128 	add.w	r1, r7, #40	; 0x28
  obs_ctx->plt_ctx.cookie = (ai_handle)ctx;
 8009916:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
  obs_ctx->plt_ctx.flags = AI_OBSERVER_PRE_EVT | AI_OBSERVER_POST_EVT;
 800991a:	2306      	movs	r3, #6
  res = ai_platform_observer_register_s(net_hdl, &obs_ctx->plt_ctx);
 800991c:	980e      	ldr	r0, [sp, #56]	; 0x38
  obs_ctx->plt_ctx.flags = AI_OBSERVER_PRE_EVT | AI_OBSERVER_POST_EVT;
 800991e:	633b      	str	r3, [r7, #48]	; 0x30
  res = ai_platform_observer_register_s(net_hdl, &obs_ctx->plt_ctx);
 8009920:	f004 fb84 	bl	800e02c <ai_platform_observer_register_s>
  PB_LC_PRINT(ctx->debug, "RUN: processing\r\n");
 8009924:	4975      	ldr	r1, [pc, #468]	; (8009afc <aiPbCmdNNRun+0x2a0>)
 8009926:	f894 0082 	ldrb.w	r0, [r4, #130]	; 0x82
 800992a:	f7ff ff73 	bl	8009814 <_print_debug>
  cyclesCounterStart();
 800992e:	f7ff fd4b 	bl	80093c8 <cyclesCounterStart>
  batch = ai_mnetwork_run(ctx->handle, ai_input, ai_output);
 8009932:	9a07      	ldr	r2, [sp, #28]
 8009934:	4651      	mov	r1, sl
 8009936:	6820      	ldr	r0, [r4, #0]
 8009938:	f000 fae9 	bl	8009f0e <ai_mnetwork_run>
  if (batch != 1) {
 800993c:	2801      	cmp	r0, #1
 800993e:	d073      	beq.n	8009a28 <aiPbCmdNNRun+0x1cc>
    aiLogErr(ai_mnetwork_get_error(ctx->handle),
 8009940:	6820      	ldr	r0, [r4, #0]
 8009942:	f000 fab8 	bl	8009eb6 <ai_mnetwork_get_error>
 8009946:	496e      	ldr	r1, [pc, #440]	; (8009b00 <aiPbCmdNNRun+0x2a4>)
 8009948:	f7ff f8ec 	bl	8008b24 <aiLogErr>
    aiPbMgrSendAck(req, resp, EnumState_S_ERROR,
 800994c:	230a      	movs	r3, #10
 800994e:	e794      	b.n	800987a <aiPbCmdNNRun+0x1e>
    if ((i + 1) == ctx->report.n_inputs)
 8009950:	3701      	adds	r7, #1
  aiPbData data = { 0, _get_buffer_size(buffer), (uintptr_t)buffer->data, 0};
 8009952:	4640      	mov	r0, r8
      state = EnumState_S_PROCESSING;
 8009954:	454f      	cmp	r7, r9
 8009956:	bf14      	ite	ne
 8009958:	2301      	movne	r3, #1
 800995a:	2302      	moveq	r3, #2
 800995c:	ee08 3a10 	vmov	s16, r3
  aiPbData data = { 0, _get_buffer_size(buffer), (uintptr_t)buffer->data, 0};
 8009960:	2300      	movs	r3, #0
 8009962:	9312      	str	r3, [sp, #72]	; 0x48
 8009964:	f7ff fd22 	bl	80093ac <_get_buffer_size>
 8009968:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800996c:	9013      	str	r0, [sp, #76]	; 0x4c
 800996e:	9314      	str	r3, [sp, #80]	; 0x50
 8009970:	2300      	movs	r3, #0
 8009972:	9315      	str	r3, [sp, #84]	; 0x54
  if ((first_only) || (direct_write))
 8009974:	9b06      	ldr	r3, [sp, #24]
 8009976:	b90b      	cbnz	r3, 800997c <aiPbCmdNNRun+0x120>
 8009978:	9b05      	ldr	r3, [sp, #20]
 800997a:	b183      	cbz	r3, 800999e <aiPbCmdNNRun+0x142>
    data.size = _get_element_size(buffer);
 800997c:	f8d8 1000 	ldr.w	r1, [r8]
  if (is_binary)
 8009980:	4a60      	ldr	r2, [pc, #384]	; (8009b04 <aiPbCmdNNRun+0x2a8>)
 8009982:	f021 437e 	bic.w	r3, r1, #4261412864	; 0xfe000000
 8009986:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800998a:	4293      	cmp	r3, r2
 800998c:	d01b      	beq.n	80099c6 <aiPbCmdNNRun+0x16a>
  return (size_t)AI_BUFFER_BYTE_SIZE(1, buffer->format);
 800998e:	2001      	movs	r0, #1
 8009990:	f002 f93e 	bl	800bc10 <ai_buffer_get_byte_size>
  if (direct_write)
 8009994:	9b05      	ldr	r3, [sp, #20]
    data.size = _get_element_size(buffer);
 8009996:	9013      	str	r0, [sp, #76]	; 0x4c
  if (direct_write)
 8009998:	b10b      	cbz	r3, 800999e <aiPbCmdNNRun+0x142>
    data.addr = (uintptr_t)&temp;
 800999a:	ab0e      	add	r3, sp, #56	; 0x38
 800999c:	9314      	str	r3, [sp, #80]	; 0x50
  aiPbMgrReceiveData(&data);
 800999e:	a812      	add	r0, sp, #72	; 0x48
 80099a0:	f7ff f848 	bl	8008a34 <aiPbMgrReceiveData>
  if (data.nb_read != data.size) {
 80099a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80099a6:	f8dd 904c 	ldr.w	r9, [sp, #76]	; 0x4c
 80099aa:	454b      	cmp	r3, r9
 80099ac:	d00d      	beq.n	80099ca <aiPbCmdNNRun+0x16e>
    aiPbMgrSendAck(req, resp, EnumState_S_ERROR,
 80099ae:	2201      	movs	r2, #1
 80099b0:	9200      	str	r2, [sp, #0]
 80099b2:	2204      	movs	r2, #4
 80099b4:	4631      	mov	r1, r6
 80099b6:	4628      	mov	r0, r5
 80099b8:	f7fe ffe4 	bl	8008984 <aiPbMgrSendAck>
    }
    send_ai_io_tensor(req, resp, state, &ai_output[i], flags, 0.0, 0);
  }

  aiObserverUnbind(ctx);
}
 80099bc:	b021      	add	sp, #132	; 0x84
 80099be:	ecbd 8b02 	vpop	{d8}
 80099c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return 4;
 80099c6:	2004      	movs	r0, #4
 80099c8:	e7e4      	b.n	8009994 <aiPbCmdNNRun+0x138>
  if ((first_only) && (!direct_write))/* broadcast the value */
 80099ca:	9b06      	ldr	r3, [sp, #24]
 80099cc:	b96b      	cbnz	r3, 80099ea <aiPbCmdNNRun+0x18e>
    aiPbMgrSendAck(req, resp, state, data.size, EnumError_E_NONE);
 80099ce:	2300      	movs	r3, #0
 80099d0:	ee18 2a10 	vmov	r2, s16
 80099d4:	4631      	mov	r1, r6
 80099d6:	4628      	mov	r0, r5
 80099d8:	9300      	str	r3, [sp, #0]
 80099da:	f108 081c 	add.w	r8, r8, #28
 80099de:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80099e0:	f7fe ffd0 	bl	8008984 <aiPbMgrSendAck>
      aiPbMgrWaitAck();
 80099e4:	f7fe ffd8 	bl	8008998 <aiPbMgrWaitAck>
    if (res != true)
 80099e8:	e782      	b.n	80098f0 <aiPbCmdNNRun+0x94>
  if ((first_only) && (!direct_write))/* broadcast the value */
 80099ea:	9b05      	ldr	r3, [sp, #20]
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d1ee      	bne.n	80099ce <aiPbCmdNNRun+0x172>
      const uintptr_t r_ptr = (uintptr_t)buffer->data;
 80099f0:	f8d8 1004 	ldr.w	r1, [r8, #4]
      for (size_t pos = 1; pos <  _get_buffer_size(buffer) / el_s; pos++)
 80099f4:	f04f 0b01 	mov.w	fp, #1
      uintptr_t w_ptr = r_ptr + el_s;
 80099f8:	eb01 0309 	add.w	r3, r1, r9
      for (size_t pos = 1; pos <  _get_buffer_size(buffer) / el_s; pos++)
 80099fc:	4640      	mov	r0, r8
 80099fe:	e9cd 1308 	strd	r1, r3, [sp, #32]
 8009a02:	f7ff fcd3 	bl	80093ac <_get_buffer_size>
 8009a06:	fbb0 f0f9 	udiv	r0, r0, r9
 8009a0a:	4583      	cmp	fp, r0
 8009a0c:	e9dd 1308 	ldrd	r1, r3, [sp, #32]
 8009a10:	d2dd      	bcs.n	80099ce <aiPbCmdNNRun+0x172>
        memcpy((void *)w_ptr, (void *)r_ptr, el_s);
 8009a12:	4618      	mov	r0, r3
 8009a14:	464a      	mov	r2, r9
 8009a16:	9108      	str	r1, [sp, #32]
 8009a18:	f009 fac2 	bl	8012fa0 <memcpy>
 8009a1c:	4603      	mov	r3, r0
      for (size_t pos = 1; pos <  _get_buffer_size(buffer) / el_s; pos++)
 8009a1e:	f10b 0b01 	add.w	fp, fp, #1
 8009a22:	9908      	ldr	r1, [sp, #32]
        w_ptr += el_s;
 8009a24:	444b      	add	r3, r9
      for (size_t pos = 1; pos <  _get_buffer_size(buffer) / el_s; pos++)
 8009a26:	e7e9      	b.n	80099fc <aiPbCmdNNRun+0x1a0>
  tend = cyclesCounterEnd();
 8009a28:	f7ff fcde 	bl	80093e8 <cyclesCounterEnd>
  aiOpPerf perf = {dwtCyclesToFloatMs(tend), 0,  2, (uint32_t *)&tend};
 8009a2c:	2700      	movs	r7, #0
      flags |= EnumTensorFlag_TENSOR_FLAG_NO_DATA;
 8009a2e:	f240 2902 	movw	r9, #514	; 0x202
    send_ai_io_tensor(req, resp, state, &ai_output[i], flags, 0.0, 0);
 8009a32:	ed9f 8a35 	vldr	s16, [pc, #212]	; 8009b08 <aiPbCmdNNRun+0x2ac>
  tend = cyclesCounterEnd();
 8009a36:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  PB_LC_PRINT(ctx->debug, "RUN: processing done\r\n");
 8009a3a:	4934      	ldr	r1, [pc, #208]	; (8009b0c <aiPbCmdNNRun+0x2b0>)
 8009a3c:	f894 0082 	ldrb.w	r0, [r4, #130]	; 0x82
 8009a40:	f7ff fee8 	bl	8009814 <_print_debug>
  tend = aiObserverAdjustInferenceTime(ctx, tend);
 8009a44:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
  tend = obs_ctx->tcom + obs_ctx->tnodes + tend;
 8009a48:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8009a4c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009a50:	1880      	adds	r0, r0, r2
 8009a52:	eb41 0103 	adc.w	r1, r1, r3
 8009a56:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009a58:	18c0      	adds	r0, r0, r3
 8009a5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009a5c:	eb41 0103 	adc.w	r1, r1, r3
  tend = aiObserverAdjustInferenceTime(ctx, tend);
 8009a60:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  aiOpPerf perf = {dwtCyclesToFloatMs(tend), 0,  2, (uint32_t *)&tend};
 8009a64:	f7ff fb36 	bl	80090d4 <dwtCyclesToFloatMs>
 8009a68:	ab0c      	add	r3, sp, #48	; 0x30
 8009a6a:	2202      	movs	r2, #2
  aiPbMgrSendOperator(req, resp, EnumState_S_PROCESSING, ctx->report.model_name, 0, 0, &perf);
 8009a6c:	4631      	mov	r1, r6
  aiOpPerf perf = {dwtCyclesToFloatMs(tend), 0,  2, (uint32_t *)&tend};
 8009a6e:	9311      	str	r3, [sp, #68]	; 0x44
  aiPbMgrSendOperator(req, resp, EnumState_S_PROCESSING, ctx->report.model_name, 0, 0, &perf);
 8009a70:	ab0e      	add	r3, sp, #56	; 0x38
 8009a72:	9700      	str	r7, [sp, #0]
 8009a74:	4628      	mov	r0, r5
  aiOpPerf perf = {dwtCyclesToFloatMs(tend), 0,  2, (uint32_t *)&tend};
 8009a76:	ed8d 0a0e 	vstr	s0, [sp, #56]	; 0x38
  aiPbMgrSendOperator(req, resp, EnumState_S_PROCESSING, ctx->report.model_name, 0, 0, &perf);
 8009a7a:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8009a7e:	6863      	ldr	r3, [r4, #4]
  aiOpPerf perf = {dwtCyclesToFloatMs(tend), 0,  2, (uint32_t *)&tend};
 8009a80:	e9cd 720f 	strd	r7, r2, [sp, #60]	; 0x3c
  aiPbMgrSendOperator(req, resp, EnumState_S_PROCESSING, ctx->report.model_name, 0, 0, &perf);
 8009a84:	f7fe fff0 	bl	8008a68 <aiPbMgrSendOperator>
  PB_LC_PRINT(ctx->debug, "RUN: send output tensors\r\n");
 8009a88:	4921      	ldr	r1, [pc, #132]	; (8009b10 <aiPbCmdNNRun+0x2b4>)
 8009a8a:	f894 0082 	ldrb.w	r0, [r4, #130]	; 0x82
 8009a8e:	f7ff fec1 	bl	8009814 <_print_debug>
  for (int i = 0; i < ctx->report.n_outputs; i++) {
 8009a92:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8009a96:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8009a98:	42ba      	cmp	r2, r7
 8009a9a:	dc0f      	bgt.n	8009abc <aiPbCmdNNRun+0x260>
  struct ai_network_user_obs_ctx  *obs_ctx = ctx->obs_ctx;
 8009a9c:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
  if (obs_ctx->is_enabled == false)
 8009aa0:	782b      	ldrb	r3, [r5, #0]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d08a      	beq.n	80099bc <aiPbCmdNNRun+0x160>
  ai_mnetwork_get_private_handle(ctx->handle, &net_hdl, &pparams);
 8009aa6:	a90b      	add	r1, sp, #44	; 0x2c
 8009aa8:	aa12      	add	r2, sp, #72	; 0x48
 8009aaa:	6820      	ldr	r0, [r4, #0]
 8009aac:	f000 fa40 	bl	8009f30 <ai_mnetwork_get_private_handle>
  ai_platform_observer_unregister_s(net_hdl, &obs_ctx->plt_ctx);
 8009ab0:	f105 0128 	add.w	r1, r5, #40	; 0x28
 8009ab4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8009ab6:	f004 fb7b 	bl	800e1b0 <ai_platform_observer_unregister_s>
  return 0;
 8009aba:	e77f      	b.n	80099bc <aiPbCmdNNRun+0x160>
    if (req->param & EnumRunParam_P_RUN_MODE_PERF) {
 8009abc:	68ab      	ldr	r3, [r5, #8]
    if ((i + 1) == ctx->report.n_outputs) {
 8009abe:	3701      	adds	r7, #1
    send_ai_io_tensor(req, resp, state, &ai_output[i], flags, 0.0, 0);
 8009ac0:	2100      	movs	r1, #0
 8009ac2:	eeb0 0a48 	vmov.f32	s0, s16
      flags |= EnumTensorFlag_TENSOR_FLAG_NO_DATA;
 8009ac6:	f013 0f08 	tst.w	r3, #8
    send_ai_io_tensor(req, resp, state, &ai_output[i], flags, 0.0, 0);
 8009aca:	4628      	mov	r0, r5
      flags |= EnumTensorFlag_TENSOR_FLAG_NO_DATA;
 8009acc:	bf0c      	ite	eq
 8009ace:	2302      	moveq	r3, #2
 8009ad0:	464b      	movne	r3, r9
    if ((i + 1) == ctx->report.n_outputs) {
 8009ad2:	4297      	cmp	r7, r2
      flags |= EnumTensorFlag_TENSOR_FLAG_LAST;
 8009ad4:	bf06      	itte	eq
 8009ad6:	f443 7380 	orreq.w	r3, r3, #256	; 0x100
      state = EnumState_S_DONE;
 8009ada:	2203      	moveq	r2, #3
    EnumState state = EnumState_S_PROCESSING;
 8009adc:	2202      	movne	r2, #2
    send_ai_io_tensor(req, resp, state, &ai_output[i], flags, 0.0, 0);
 8009ade:	e9cd 3100 	strd	r3, r1, [sp]
 8009ae2:	4643      	mov	r3, r8
 8009ae4:	4631      	mov	r1, r6
 8009ae6:	f108 081c 	add.w	r8, r8, #28
 8009aea:	f7ff fcc9 	bl	8009480 <send_ai_io_tensor.isra.0>
  for (int i = 0; i < ctx->report.n_outputs; i++) {
 8009aee:	e7d2      	b.n	8009a96 <aiPbCmdNNRun+0x23a>
 8009af0:	24001b78 	.word	0x24001b78
 8009af4:	0801655e 	.word	0x0801655e
 8009af8:	080094f1 	.word	0x080094f1
 8009afc:	08016589 	.word	0x08016589
 8009b00:	0801659b 	.word	0x0801659b
 8009b04:	000400c0 	.word	0x000400c0
 8009b08:	00000000 	.word	0x00000000
 8009b0c:	080165ab 	.word	0x080165ab
 8009b10:	080165c2 	.word	0x080165c2

08009b14 <aiValidationInit>:
 * Exported/Public functions
 * -----------------------------------------------------------------------------
 */

int aiValidationInit(void)
{
 8009b14:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  LC_PRINT("\r\n#\r\n");
 8009b16:	4c20      	ldr	r4, [pc, #128]	; (8009b98 <aiValidationInit+0x84>)
  DWT->CYCCNT = 0; /* Clear DWT cycle counter */
 8009b18:	2500      	movs	r5, #0
 8009b1a:	4e20      	ldr	r6, [pc, #128]	; (8009b9c <aiValidationInit+0x88>)
 8009b1c:	f104 008b 	add.w	r0, r4, #139	; 0x8b
 8009b20:	f7ff fa40 	bl	8008fa4 <lc_print>
  LC_PRINT("# %s %d.%d\r\n", _APP_NAME_ , _APP_VERSION_MAJOR_, _APP_VERSION_MINOR_);
 8009b24:	2300      	movs	r3, #0
 8009b26:	2207      	movs	r2, #7
 8009b28:	f104 0191 	add.w	r1, r4, #145	; 0x91
 8009b2c:	f104 009f 	add.w	r0, r4, #159	; 0x9f
 8009b30:	f7ff fa38 	bl	8008fa4 <lc_print>
  LC_PRINT("#\r\n");
 8009b34:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 8009b38:	f7ff fa34 	bl	8008fa4 <lc_print>

  systemSettingLog();
 8009b3c:	f7ff fb1c 	bl	8009178 <systemSettingLog>

  crcIpInit();
 8009b40:	f7ff fa7a 	bl	8009038 <crcIpInit>
  HAL_Delay(100);
 8009b44:	2064      	movs	r0, #100	; 0x64
  dwtIpInit();
 8009b46:	f7ff fb8f 	bl	8009268 <dwtIpInit>
  DWT->CYCCNT = 0; /* Clear DWT cycle counter */
 8009b4a:	6075      	str	r5, [r6, #4]
  HAL_Delay(100);
 8009b4c:	f7f8 ff14 	bl	8002978 <HAL_Delay>
  return DWT->CYCCNT;
 8009b50:	6870      	ldr	r0, [r6, #4]
  dwtCyclesToTime(st/100, &t);
 8009b52:	2664      	movs	r6, #100	; 0x64
 8009b54:	466a      	mov	r2, sp
 8009b56:	4629      	mov	r1, r5
 8009b58:	fbb0 f0f6 	udiv	r0, r0, r6
 8009b5c:	f7ff fa7e 	bl	800905c <dwtCyclesToTime>
  LC_PRINT(" Timestamp    : SysTick + DWT (HAL_Delay(1)=%d.%03d ms)\r\n",
 8009b60:	9a03      	ldr	r2, [sp, #12]
 8009b62:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
 8009b66:	e9dd 1301 	ldrd	r1, r3, [sp, #4]
 8009b6a:	fb06 3101 	mla	r1, r6, r1, r3
 8009b6e:	f7ff fa19 	bl	8008fa4 <lc_print>
  dwtCyclesToTime(UINT32_MAX, &t);
 8009b72:	466a      	mov	r2, sp
 8009b74:	2100      	movs	r1, #0
 8009b76:	f04f 30ff 	mov.w	r0, #4294967295
 8009b7a:	f7ff fa6f 	bl	800905c <dwtCyclesToTime>
  cyclesCount.dwt_max = t.s * 1000 + t.ms;
 8009b7e:	9a01      	ldr	r2, [sp, #4]
 8009b80:	9b02      	ldr	r3, [sp, #8]
 8009b82:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
  cyclesCounterInit();

  return 0;
}
 8009b86:	4628      	mov	r0, r5
 8009b88:	fb01 3302 	mla	r3, r1, r2, r3
 8009b8c:	4a04      	ldr	r2, [pc, #16]	; (8009ba0 <aiValidationInit+0x8c>)
 8009b8e:	6013      	str	r3, [r2, #0]
  dwtIpInit();
 8009b90:	f7ff fb6a 	bl	8009268 <dwtIpInit>
 8009b94:	b004      	add	sp, #16
 8009b96:	bd70      	pop	{r4, r5, r6, pc}
 8009b98:	08016552 	.word	0x08016552
 8009b9c:	e0001000 	.word	0xe0001000
 8009ba0:	24001a78 	.word	0x24001a78

08009ba4 <aiValidationProcess>:

int aiValidationProcess(void)
{
 8009ba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    net_exec_ctx[idx].handle = AI_HANDLE_NULL;
 8009ba8:	2700      	movs	r7, #0
 8009baa:	4c65      	ldr	r4, [pc, #404]	; (8009d40 <aiValidationProcess+0x19c>)
  int res = -1;
 8009bac:	f04f 35ff 	mov.w	r5, #4294967295
      LC_PRINT("\r\nFound network \"%s\"\r\n", nn_name);
 8009bb0:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 8009d7c <aiValidationProcess+0x1d8>
      ctx->report.outputs[i].data = AI_HANDLE_PTR(data_outs[i]);
 8009bb4:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 8009d80 <aiValidationProcess+0x1dc>
  aiPlatformVersion();
 8009bb8:	f7fe ff9e 	bl	8008af8 <aiPlatformVersion>
  LC_PRINT("Discovering the network(s)...\r\n");
 8009bbc:	4861      	ldr	r0, [pc, #388]	; (8009d44 <aiValidationProcess+0x1a0>)
    net_exec_ctx[idx].handle = AI_HANDLE_NULL;
 8009bbe:	f844 7b04 	str.w	r7, [r4], #4
  LC_PRINT("Discovering the network(s)...\r\n");
 8009bc2:	f7ff f9ef 	bl	8008fa4 <lc_print>
    nn_name = ai_mnetwork_find(NULL, idx);
 8009bc6:	4639      	mov	r1, r7
 8009bc8:	2000      	movs	r0, #0
 8009bca:	f000 f917 	bl	8009dfc <ai_mnetwork_find>
    if (nn_name) {
 8009bce:	4606      	mov	r6, r0
 8009bd0:	b1a8      	cbz	r0, 8009bfe <aiValidationProcess+0x5a>
      LC_PRINT("\r\nFound network \"%s\"\r\n", nn_name);
 8009bd2:	4601      	mov	r1, r0
 8009bd4:	4640      	mov	r0, r8
 8009bd6:	f7ff f9e5 	bl	8008fa4 <lc_print>
  LC_PRINT("Creating the network \"%s\"..\r\n", nn_name);
 8009bda:	4631      	mov	r1, r6
 8009bdc:	485a      	ldr	r0, [pc, #360]	; (8009d48 <aiValidationProcess+0x1a4>)
 8009bde:	f7ff f9e1 	bl	8008fa4 <lc_print>
  err = ai_mnetwork_create(nn_name, &ctx->handle, NULL);
 8009be2:	2200      	movs	r2, #0
 8009be4:	1f21      	subs	r1, r4, #4
 8009be6:	4630      	mov	r0, r6
 8009be8:	f000 f916 	bl	8009e18 <ai_mnetwork_create>
  if (err.type) {
 8009bec:	f010 05ff 	ands.w	r5, r0, #255	; 0xff
 8009bf0:	d016      	beq.n	8009c20 <aiValidationProcess+0x7c>
        nn_name = NULL;
 8009bf2:	2600      	movs	r6, #0
    return -1;
 8009bf4:	f04f 35ff 	mov.w	r5, #4294967295
    aiLogErr(err, "ai_mnetwork_create");
 8009bf8:	4954      	ldr	r1, [pc, #336]	; (8009d4c <aiValidationProcess+0x1a8>)
 8009bfa:	f7fe ff93 	bl	8008b24 <aiLogErr>
    idx++;
 8009bfe:	3701      	adds	r7, #1
  } while (nn_name);
 8009c00:	3488      	adds	r4, #136	; 0x88
 8009c02:	2e00      	cmp	r6, #0
 8009c04:	d1df      	bne.n	8009bc6 <aiValidationProcess+0x22>
  int r;

  r = aiInit();
  if (r) {
 8009c06:	2d00      	cmp	r5, #0
 8009c08:	d077      	beq.n	8009cfa <aiValidationProcess+0x156>
    LC_PRINT("\r\nE:  aiInit() r=%d\r\n", r);
 8009c0a:	4851      	ldr	r0, [pc, #324]	; (8009d50 <aiValidationProcess+0x1ac>)
 8009c0c:	4629      	mov	r1, r5
 8009c0e:	f7ff f9c9 	bl	8008fa4 <lc_print>
    port_hal_delay(2000);
 8009c12:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8009c16:	f7f8 feaf 	bl	8002978 <HAL_Delay>
  do {
    r = aiPbMgrWaitAndProcess();
  } while (r==0);

  return r;
}
 8009c1a:	4628      	mov	r0, r5
 8009c1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LC_PRINT("Initializing the network\r\n");
 8009c20:	484c      	ldr	r0, [pc, #304]	; (8009d54 <aiValidationProcess+0x1b0>)
 8009c22:	f7ff f9bf 	bl	8008fa4 <lc_print>
  if (!ai_mnetwork_get_report(ctx->handle, &ctx->report)) {
 8009c26:	4621      	mov	r1, r4
 8009c28:	f854 0c04 	ldr.w	r0, [r4, #-4]
 8009c2c:	f000 f938 	bl	8009ea0 <ai_mnetwork_get_report>
 8009c30:	4682      	mov	sl, r0
    err = ai_mnetwork_get_error(ctx->handle);
 8009c32:	f854 0c04 	ldr.w	r0, [r4, #-4]
  if (!ai_mnetwork_get_report(ctx->handle, &ctx->report)) {
 8009c36:	f1ba 0f00 	cmp.w	sl, #0
 8009c3a:	d10e      	bne.n	8009c5a <aiValidationProcess+0xb6>
    err = ai_mnetwork_get_error(ctx->handle);
 8009c3c:	f000 f93b 	bl	8009eb6 <ai_mnetwork_get_error>
    aiLogErr(err, "ai_mnetwork_get_info");
 8009c40:	4945      	ldr	r1, [pc, #276]	; (8009d58 <aiValidationProcess+0x1b4>)
 8009c42:	f7fe ff6f 	bl	8008b24 <aiLogErr>
    ai_mnetwork_destroy(ctx->handle);
 8009c46:	f854 0c04 	ldr.w	r0, [r4, #-4]
 8009c4a:	f000 f913 	bl	8009e74 <ai_mnetwork_destroy>
        nn_name = NULL;
 8009c4e:	4656      	mov	r6, sl
    return -2;
 8009c50:	f06f 0501 	mvn.w	r5, #1
    ctx->handle = AI_HANDLE_NULL;
 8009c54:	f844 ac04 	str.w	sl, [r4, #-4]
      if (res)
 8009c58:	e7d1      	b.n	8009bfe <aiValidationProcess+0x5a>
  if (!ai_mnetwork_init(ctx->handle)) {
 8009c5a:	f000 f939 	bl	8009ed0 <ai_mnetwork_init>
 8009c5e:	4682      	mov	sl, r0
 8009c60:	b980      	cbnz	r0, 8009c84 <aiValidationProcess+0xe0>
    err = ai_mnetwork_get_error(ctx->handle);
 8009c62:	f854 0c04 	ldr.w	r0, [r4, #-4]
        nn_name = NULL;
 8009c66:	4656      	mov	r6, sl
    err = ai_mnetwork_get_error(ctx->handle);
 8009c68:	f000 f925 	bl	8009eb6 <ai_mnetwork_get_error>
    aiLogErr(err, "ai_mnetwork_init");
 8009c6c:	493b      	ldr	r1, [pc, #236]	; (8009d5c <aiValidationProcess+0x1b8>)
 8009c6e:	f7fe ff59 	bl	8008b24 <aiLogErr>
    ai_mnetwork_destroy(ctx->handle);
 8009c72:	f854 0c04 	ldr.w	r0, [r4, #-4]
 8009c76:	f000 f8fd 	bl	8009e74 <ai_mnetwork_destroy>
    return -4;
 8009c7a:	f06f 0503 	mvn.w	r5, #3
    ctx->handle = AI_HANDLE_NULL;
 8009c7e:	f844 ac04 	str.w	sl, [r4, #-4]
      if (res)
 8009c82:	e7bc      	b.n	8009bfe <aiValidationProcess+0x5a>
  if (ai_mnetwork_get_report(ctx->handle,
 8009c84:	4621      	mov	r1, r4
 8009c86:	f854 0c04 	ldr.w	r0, [r4, #-4]
 8009c8a:	f000 f909 	bl	8009ea0 <ai_mnetwork_get_report>
 8009c8e:	4682      	mov	sl, r0
 8009c90:	b1b0      	cbz	r0, 8009cc0 <aiValidationProcess+0x11c>
    aiPrintNetworkInfo(&ctx->report);
 8009c92:	4620      	mov	r0, r4
 8009c94:	f7ff f860 	bl	8008d58 <aiPrintNetworkInfo>
  for (int i = 0; i < ctx->report.n_inputs; i++) {
 8009c98:	462b      	mov	r3, r5
  ctx->inputs_in_activations = false;
 8009c9a:	f884 507c 	strb.w	r5, [r4, #124]	; 0x7c
    if (!ctx->report.inputs[i].data)
 8009c9e:	201c      	movs	r0, #28
  ctx->outputs_in_activations = false;
 8009ca0:	f884 507d 	strb.w	r5, [r4, #125]	; 0x7d
      ctx->inputs_in_activations = true;
 8009ca4:	2501      	movs	r5, #1
      ctx->report.inputs[i].data = AI_HANDLE_PTR(data_ins[i]);
 8009ca6:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 8009d84 <aiValidationProcess+0x1e0>
  for (int i = 0; i < ctx->report.n_inputs; i++) {
 8009caa:	8e22      	ldrh	r2, [r4, #48]	; 0x30
 8009cac:	4293      	cmp	r3, r2
 8009cae:	db0a      	blt.n	8009cc6 <aiValidationProcess+0x122>
  for (int i = 0; i < ctx->report.n_outputs; i++) {
 8009cb0:	2300      	movs	r3, #0
    if (!ctx->report.outputs[i].data)
 8009cb2:	201c      	movs	r0, #28
      ctx->outputs_in_activations = true;
 8009cb4:	2501      	movs	r5, #1
  for (int i = 0; i < ctx->report.n_outputs; i++) {
 8009cb6:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 8009cb8:	4293      	cmp	r3, r2
 8009cba:	db11      	blt.n	8009ce0 <aiValidationProcess+0x13c>
      if (res)
 8009cbc:	2500      	movs	r5, #0
 8009cbe:	e79e      	b.n	8009bfe <aiValidationProcess+0x5a>
    err = ai_mnetwork_get_error(ctx->handle);
 8009cc0:	f854 0c04 	ldr.w	r0, [r4, #-4]
 8009cc4:	e7ba      	b.n	8009c3c <aiValidationProcess+0x98>
    if (!ctx->report.inputs[i].data)
 8009cc6:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8009cc8:	fb00 2203 	mla	r2, r0, r3, r2
 8009ccc:	6851      	ldr	r1, [r2, #4]
 8009cce:	b921      	cbnz	r1, 8009cda <aiValidationProcess+0x136>
      ctx->report.inputs[i].data = AI_HANDLE_PTR(data_ins[i]);
 8009cd0:	f85c 1023 	ldr.w	r1, [ip, r3, lsl #2]
 8009cd4:	6051      	str	r1, [r2, #4]
  for (int i = 0; i < ctx->report.n_inputs; i++) {
 8009cd6:	3301      	adds	r3, #1
 8009cd8:	e7e7      	b.n	8009caa <aiValidationProcess+0x106>
      ctx->inputs_in_activations = true;
 8009cda:	f884 507c 	strb.w	r5, [r4, #124]	; 0x7c
 8009cde:	e7fa      	b.n	8009cd6 <aiValidationProcess+0x132>
    if (!ctx->report.outputs[i].data)
 8009ce0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8009ce2:	fb00 2203 	mla	r2, r0, r3, r2
 8009ce6:	6851      	ldr	r1, [r2, #4]
 8009ce8:	b921      	cbnz	r1, 8009cf4 <aiValidationProcess+0x150>
      ctx->report.outputs[i].data = AI_HANDLE_PTR(data_outs[i]);
 8009cea:	f859 1023 	ldr.w	r1, [r9, r3, lsl #2]
 8009cee:	6051      	str	r1, [r2, #4]
  for (int i = 0; i < ctx->report.n_outputs; i++) {
 8009cf0:	3301      	adds	r3, #1
 8009cf2:	e7e0      	b.n	8009cb6 <aiValidationProcess+0x112>
      ctx->outputs_in_activations = true;
 8009cf4:	f884 507d 	strb.w	r5, [r4, #125]	; 0x7d
 8009cf8:	e7fa      	b.n	8009cf0 <aiValidationProcess+0x14c>
    LC_PRINT("\r\n");
 8009cfa:	4819      	ldr	r0, [pc, #100]	; (8009d60 <aiValidationProcess+0x1bc>)
 8009cfc:	f7ff f952 	bl	8008fa4 <lc_print>
    LC_PRINT("-------------------------------------------\r\n");
 8009d00:	4818      	ldr	r0, [pc, #96]	; (8009d64 <aiValidationProcess+0x1c0>)
 8009d02:	f7ff f94f 	bl	8008fa4 <lc_print>
    LC_PRINT("| READY to receive a CMD from the HOST... |\r\n");
 8009d06:	4818      	ldr	r0, [pc, #96]	; (8009d68 <aiValidationProcess+0x1c4>)
 8009d08:	f7ff f94c 	bl	8008fa4 <lc_print>
    LC_PRINT("-------------------------------------------\r\n");
 8009d0c:	4815      	ldr	r0, [pc, #84]	; (8009d64 <aiValidationProcess+0x1c0>)
 8009d0e:	f7ff f949 	bl	8008fa4 <lc_print>
    LC_PRINT("\r\n");
 8009d12:	4813      	ldr	r0, [pc, #76]	; (8009d60 <aiValidationProcess+0x1bc>)
 8009d14:	f7ff f946 	bl	8008fa4 <lc_print>
    LC_PRINT("# Note: At this point, default ASCII-base terminal should be closed\r\n");
 8009d18:	4814      	ldr	r0, [pc, #80]	; (8009d6c <aiValidationProcess+0x1c8>)
 8009d1a:	f7ff f943 	bl	8008fa4 <lc_print>
    LC_PRINT("# and a stm32com-base interface should be used\r\n");
 8009d1e:	4814      	ldr	r0, [pc, #80]	; (8009d70 <aiValidationProcess+0x1cc>)
 8009d20:	f7ff f940 	bl	8008fa4 <lc_print>
    LC_PRINT("# (i.e. Python ai_runner module). Protocol version = %d.%d\r\n",
 8009d24:	4813      	ldr	r0, [pc, #76]	; (8009d74 <aiValidationProcess+0x1d0>)
 8009d26:	462a      	mov	r2, r5
 8009d28:	2103      	movs	r1, #3
 8009d2a:	f7ff f93b 	bl	8008fa4 <lc_print>
  aiPbMgrInit(pbCmdFuncTab);
 8009d2e:	4812      	ldr	r0, [pc, #72]	; (8009d78 <aiValidationProcess+0x1d4>)
 8009d30:	f7fe fd3e 	bl	80087b0 <aiPbMgrInit>
    r = aiPbMgrWaitAndProcess();
 8009d34:	f7fe fde4 	bl	8008900 <aiPbMgrWaitAndProcess>
  } while (r==0);
 8009d38:	4605      	mov	r5, r0
 8009d3a:	2800      	cmp	r0, #0
 8009d3c:	d0fa      	beq.n	8009d34 <aiValidationProcess+0x190>
 8009d3e:	e76c      	b.n	8009c1a <aiValidationProcess+0x76>
 8009d40:	24001af0 	.word	0x24001af0
 8009d44:	0801663c 	.word	0x0801663c
 8009d48:	08016673 	.word	0x08016673
 8009d4c:	08016691 	.word	0x08016691
 8009d50:	080166e5 	.word	0x080166e5
 8009d54:	080166a4 	.word	0x080166a4
 8009d58:	080166bf 	.word	0x080166bf
 8009d5c:	080166d4 	.word	0x080166d4
 8009d60:	080166fb 	.word	0x080166fb
 8009d64:	080166fe 	.word	0x080166fe
 8009d68:	0801672c 	.word	0x0801672c
 8009d6c:	0801675a 	.word	0x0801675a
 8009d70:	080167a0 	.word	0x080167a0
 8009d74:	080167d1 	.word	0x080167d1
 8009d78:	24000014 	.word	0x24000014
 8009d7c:	0801665c 	.word	0x0801665c
 8009d80:	24000058 	.word	0x24000058
 8009d84:	24000054 	.word	0x24000054

08009d88 <ai_mnetwork_handle>:

AI_DECLARE_STATIC
struct network_instance *ai_mnetwork_handle(struct network_instance *inst)
{
    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
        if ((inst) && (&gnetworks[i] == inst))
 8009d88:	4b05      	ldr	r3, [pc, #20]	; (8009da0 <ai_mnetwork_handle+0x18>)
 8009d8a:	b120      	cbz	r0, 8009d96 <ai_mnetwork_handle+0xe>
            return inst;
        else if ((!inst) && (gnetworks[i].entry == NULL))
            return &gnetworks[i];
    }
    return NULL;
 8009d8c:	4298      	cmp	r0, r3
 8009d8e:	bf0c      	ite	eq
 8009d90:	4618      	moveq	r0, r3
 8009d92:	2000      	movne	r0, #0
 8009d94:	4770      	bx	lr
        else if ((!inst) && (gnetworks[i].entry == NULL))
 8009d96:	681a      	ldr	r2, [r3, #0]
            return inst;
 8009d98:	2a00      	cmp	r2, #0
 8009d9a:	bf08      	it	eq
 8009d9c:	4618      	moveq	r0, r3
}
 8009d9e:	4770      	bx	lr
 8009da0:	24001bc4 	.word	0x24001bc4

08009da4 <ai_mnetwork_is_valid.constprop.0>:
ai_bool ai_mnetwork_is_valid(const char* name,
 8009da4:	b510      	push	{r4, lr}
    if (name && (strlen(entry->name) == strlen(name)) &&
 8009da6:	4604      	mov	r4, r0
 8009da8:	b160      	cbz	r0, 8009dc4 <ai_mnetwork_is_valid.constprop.0+0x20>
 8009daa:	f7f6 fa99 	bl	80002e0 <strlen>
 8009dae:	2814      	cmp	r0, #20
 8009db0:	4602      	mov	r2, r0
 8009db2:	d107      	bne.n	8009dc4 <ai_mnetwork_is_valid.constprop.0+0x20>
            (strncmp(entry->name, name, strlen(entry->name)) == 0))
 8009db4:	4621      	mov	r1, r4
 8009db6:	4804      	ldr	r0, [pc, #16]	; (8009dc8 <ai_mnetwork_is_valid.constprop.0+0x24>)
 8009db8:	f009 fe3c 	bl	8013a34 <strncmp>
    if (name && (strlen(entry->name) == strlen(name)) &&
 8009dbc:	fab0 f080 	clz	r0, r0
 8009dc0:	0940      	lsrs	r0, r0, #5
}
 8009dc2:	bd10      	pop	{r4, pc}
    return false;
 8009dc4:	2000      	movs	r0, #0
 8009dc6:	e7fc      	b.n	8009dc2 <ai_mnetwork_is_valid.constprop.0+0x1e>
 8009dc8:	08016906 	.word	0x08016906

08009dcc <MX_X_CUBE_AI_Init>:
    qspiInit.InterfaceMode=MT25TL01G_QPI_MODE;
 8009dcc:	2303      	movs	r3, #3
{
 8009dce:	b507      	push	{r0, r1, r2, lr}
    qspiInit.InterfaceMode=MT25TL01G_QPI_MODE;
 8009dd0:	f88d 3004 	strb.w	r3, [sp, #4]
    qspiInit.TransferRate= MT25TL01G_DTR_TRANSFER ;
 8009dd4:	2301      	movs	r3, #1
    BSP_QSPI_Init(0,&qspiInit);
 8009dd6:	a901      	add	r1, sp, #4
 8009dd8:	2000      	movs	r0, #0
    qspiInit.TransferRate= MT25TL01G_DTR_TRANSFER ;
 8009dda:	f88d 3005 	strb.w	r3, [sp, #5]
    qspiInit.DualFlashMode= MT25TL01G_DUALFLASH_ENABLE;
 8009dde:	2340      	movs	r3, #64	; 0x40
 8009de0:	f88d 3006 	strb.w	r3, [sp, #6]
    BSP_QSPI_Init(0,&qspiInit);
 8009de4:	f7f8 fbaa 	bl	800253c <BSP_QSPI_Init>
    BSP_QSPI_EnableMemoryMappedMode(0);
 8009de8:	2000      	movs	r0, #0
 8009dea:	f7f8 fb53 	bl	8002494 <BSP_QSPI_EnableMemoryMappedMode>
    aiValidationInit();
 8009dee:	f7ff fe91 	bl	8009b14 <aiValidationInit>
}
 8009df2:	b003      	add	sp, #12
 8009df4:	f85d fb04 	ldr.w	pc, [sp], #4

08009df8 <MX_X_CUBE_AI_Process>:
    aiValidationProcess();
 8009df8:	f7ff bed4 	b.w	8009ba4 <aiValidationProcess>

08009dfc <ai_mnetwork_find>:
    }
}

AI_API_ENTRY
const char* ai_mnetwork_find(const char *name, ai_int idx)
{
 8009dfc:	b510      	push	{r4, lr}
 8009dfe:	460c      	mov	r4, r1
    const ai_network_entry_t *entry;

    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
        entry = &networks[i];
        if (ai_mnetwork_is_valid(name, entry))
 8009e00:	f7ff ffd0 	bl	8009da4 <ai_mnetwork_is_valid.constprop.0>
 8009e04:	b920      	cbnz	r0, 8009e10 <ai_mnetwork_find+0x14>
        else {
            if (!idx--)
                return entry->name;
        }
    }
    return NULL;
 8009e06:	2c00      	cmp	r4, #0
 8009e08:	4802      	ldr	r0, [pc, #8]	; (8009e14 <ai_mnetwork_find+0x18>)
 8009e0a:	bf18      	it	ne
 8009e0c:	2000      	movne	r0, #0
}
 8009e0e:	bd10      	pop	{r4, pc}
            return entry->name;
 8009e10:	4800      	ldr	r0, [pc, #0]	; (8009e14 <ai_mnetwork_find+0x18>)
 8009e12:	e7fc      	b.n	8009e0e <ai_mnetwork_find+0x12>
 8009e14:	08016906 	.word	0x08016906

08009e18 <ai_mnetwork_create>:

AI_API_ENTRY
ai_error ai_mnetwork_create(const char *name, ai_handle* network,
        const ai_buffer* network_config)
{
 8009e18:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009e1a:	4606      	mov	r6, r0
    const ai_network_entry_t *entry;
    const ai_network_entry_t *found = NULL;
    ai_error err;
    struct network_instance *inst = ai_mnetwork_handle(NULL);
 8009e1c:	2000      	movs	r0, #0
{
 8009e1e:	460d      	mov	r5, r1
 8009e20:	4611      	mov	r1, r2
    struct network_instance *inst = ai_mnetwork_handle(NULL);
 8009e22:	f7ff ffb1 	bl	8009d88 <ai_mnetwork_handle>

    if (!inst) {
 8009e26:	4604      	mov	r4, r0
 8009e28:	b930      	cbnz	r0, 8009e38 <ai_mnetwork_create+0x20>
        err.type = AI_ERROR_ALLOCATION_FAILED;
        err.code = AI_ERROR_CODE_NETWORK;
        return err;
 8009e2a:	f241 0031 	movw	r0, #4145	; 0x1031
        inst->handle = *network;
        *network = (ai_handle*)inst;
    }

    return err;
}
 8009e2e:	b002      	add	sp, #8
 8009e30:	bd70      	pop	{r4, r5, r6, pc}
        return err;
 8009e32:	f241 0014 	movw	r0, #4116	; 0x1014
 8009e36:	e7fa      	b.n	8009e2e <ai_mnetwork_create+0x16>
        if (ai_mnetwork_is_valid(name, entry)) {
 8009e38:	4630      	mov	r0, r6
 8009e3a:	9101      	str	r1, [sp, #4]
 8009e3c:	f7ff ffb2 	bl	8009da4 <ai_mnetwork_is_valid.constprop.0>
 8009e40:	9901      	ldr	r1, [sp, #4]
 8009e42:	2800      	cmp	r0, #0
 8009e44:	d0f5      	beq.n	8009e32 <ai_mnetwork_create+0x1a>
        err = found->ai_create(network, network_config);
 8009e46:	4628      	mov	r0, r5
 8009e48:	f000 fb76 	bl	800a538 <ai_modelstrojnegaucenja_create>
 8009e4c:	f3c0 2317 	ubfx	r3, r0, #8, #24
 8009e50:	b2c2      	uxtb	r2, r0
    if ((err.code == AI_ERROR_CODE_NONE) && (err.type == AI_ERROR_NONE)) {
 8009e52:	ea52 2103 	orrs.w	r1, r2, r3, lsl #8
 8009e56:	d104      	bne.n	8009e62 <ai_mnetwork_create+0x4a>
        inst->entry = found;
 8009e58:	4905      	ldr	r1, [pc, #20]	; (8009e70 <ai_mnetwork_create+0x58>)
 8009e5a:	6021      	str	r1, [r4, #0]
        inst->handle = *network;
 8009e5c:	6829      	ldr	r1, [r5, #0]
 8009e5e:	6061      	str	r1, [r4, #4]
        *network = (ai_handle*)inst;
 8009e60:	602c      	str	r4, [r5, #0]
    return err;
 8009e62:	2000      	movs	r0, #0
 8009e64:	f362 0007 	bfi	r0, r2, #0, #8
 8009e68:	f363 201f 	bfi	r0, r3, #8, #24
 8009e6c:	e7df      	b.n	8009e2e <ai_mnetwork_create+0x16>
 8009e6e:	bf00      	nop
 8009e70:	0801691c 	.word	0x0801691c

08009e74 <ai_mnetwork_destroy>:

AI_API_ENTRY
ai_handle ai_mnetwork_destroy(ai_handle network)
{
 8009e74:	b538      	push	{r3, r4, r5, lr}
 8009e76:	4604      	mov	r4, r0
    struct network_instance *inn;
    inn =  ai_mnetwork_handle((struct network_instance *)network);
 8009e78:	f7ff ff86 	bl	8009d88 <ai_mnetwork_handle>
    if (inn) {
 8009e7c:	4605      	mov	r5, r0
 8009e7e:	b158      	cbz	r0, 8009e98 <ai_mnetwork_destroy+0x24>
        ai_handle hdl = inn->entry->ai_destroy(inn->handle);
 8009e80:	6803      	ldr	r3, [r0, #0]
 8009e82:	6840      	ldr	r0, [r0, #4]
 8009e84:	699b      	ldr	r3, [r3, #24]
 8009e86:	4798      	blx	r3
        if (hdl != inn->handle) {
 8009e88:	686b      	ldr	r3, [r5, #4]
 8009e8a:	4283      	cmp	r3, r0
 8009e8c:	d004      	beq.n	8009e98 <ai_mnetwork_destroy+0x24>
        if ((inst) && (&gnetworks[i] == inst)) {
 8009e8e:	4b03      	ldr	r3, [pc, #12]	; (8009e9c <ai_mnetwork_destroy+0x28>)
 8009e90:	2400      	movs	r4, #0
 8009e92:	429d      	cmp	r5, r3
 8009e94:	d100      	bne.n	8009e98 <ai_mnetwork_destroy+0x24>
            gnetworks[i].entry = NULL;
 8009e96:	602c      	str	r4, [r5, #0]
            ai_mnetwork_release_handle(inn);
            network = AI_HANDLE_NULL;
        }
    }
    return network;
}
 8009e98:	4620      	mov	r0, r4
 8009e9a:	bd38      	pop	{r3, r4, r5, pc}
 8009e9c:	24001bc4 	.word	0x24001bc4

08009ea0 <ai_mnetwork_get_report>:

AI_API_ENTRY
ai_bool ai_mnetwork_get_report(ai_handle network, ai_network_report* report)
{
 8009ea0:	b510      	push	{r4, lr}
    struct network_instance *inn;
    inn =  ai_mnetwork_handle((struct network_instance *)network);
 8009ea2:	f7ff ff71 	bl	8009d88 <ai_mnetwork_handle>
    if (inn)
 8009ea6:	b128      	cbz	r0, 8009eb4 <ai_mnetwork_get_report+0x14>
        return inn->entry->ai_get_report(inn->handle, report);
 8009ea8:	6802      	ldr	r2, [r0, #0]
 8009eaa:	6840      	ldr	r0, [r0, #4]
 8009eac:	68d2      	ldr	r2, [r2, #12]
    else
        return false;
}
 8009eae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return inn->entry->ai_get_report(inn->handle, report);
 8009eb2:	4710      	bx	r2
}
 8009eb4:	bd10      	pop	{r4, pc}

08009eb6 <ai_mnetwork_get_error>:

AI_API_ENTRY
ai_error ai_mnetwork_get_error(ai_handle network)
{
 8009eb6:	b510      	push	{r4, lr}
    struct network_instance *inn;
    ai_error err;
    err.type = AI_ERROR_INVALID_PARAM;
    err.code = AI_ERROR_CODE_NETWORK;

    inn =  ai_mnetwork_handle((struct network_instance *)network);
 8009eb8:	f7ff ff66 	bl	8009d88 <ai_mnetwork_handle>
    if (inn)
 8009ebc:	b128      	cbz	r0, 8009eca <ai_mnetwork_get_error+0x14>
        return inn->entry->ai_get_error(inn->handle);
 8009ebe:	6803      	ldr	r3, [r0, #0]
 8009ec0:	6840      	ldr	r0, [r0, #4]
 8009ec2:	695b      	ldr	r3, [r3, #20]
    else
        return err;
}
 8009ec4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return inn->entry->ai_get_error(inn->handle);
 8009ec8:	4718      	bx	r3
}
 8009eca:	f241 0014 	movw	r0, #4116	; 0x1014
 8009ece:	bd10      	pop	{r4, pc}

08009ed0 <ai_mnetwork_init>:

AI_API_ENTRY
ai_bool ai_mnetwork_init(ai_handle network)
{
 8009ed0:	b530      	push	{r4, r5, lr}
 8009ed2:	b08f      	sub	sp, #60	; 0x3c
    struct network_instance *inn;
    ai_network_params par;

    inn =  ai_mnetwork_handle((struct network_instance *)network);
 8009ed4:	f7ff ff58 	bl	8009d88 <ai_mnetwork_handle>
    if (inn) {
 8009ed8:	4604      	mov	r4, r0
 8009eda:	b168      	cbz	r0, 8009ef8 <ai_mnetwork_init+0x28>
        inn->entry->ai_data_params_get(&par);
 8009edc:	6803      	ldr	r3, [r0, #0]
        for (int idx=0; idx < par.map_activations.size; idx++)
 8009ede:	2500      	movs	r5, #0
        inn->entry->ai_data_params_get(&par);
 8009ee0:	4668      	mov	r0, sp
 8009ee2:	689b      	ldr	r3, [r3, #8]
 8009ee4:	4798      	blx	r3
        for (int idx=0; idx < par.map_activations.size; idx++)
 8009ee6:	f8bd 200e 	ldrh.w	r2, [sp, #14]
          AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&par.map_activations, idx, inn->entry->activations[idx]);
 8009eea:	6823      	ldr	r3, [r4, #0]
        for (int idx=0; idx < par.map_activations.size; idx++)
 8009eec:	42aa      	cmp	r2, r5
 8009eee:	dc05      	bgt.n	8009efc <ai_mnetwork_init+0x2c>
        return inn->entry->ai_init(inn->handle, &par);
 8009ef0:	69db      	ldr	r3, [r3, #28]
 8009ef2:	4669      	mov	r1, sp
 8009ef4:	6860      	ldr	r0, [r4, #4]
 8009ef6:	4798      	blx	r3
    }
    else
        return false;
}
 8009ef8:	b00f      	add	sp, #60	; 0x3c
 8009efa:	bd30      	pop	{r4, r5, pc}
          AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&par.map_activations, idx, inn->entry->activations[idx]);
 8009efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009efe:	4629      	mov	r1, r5
 8009f00:	a803      	add	r0, sp, #12
 8009f02:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
        for (int idx=0; idx < par.map_activations.size; idx++)
 8009f06:	3501      	adds	r5, #1
          AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&par.map_activations, idx, inn->entry->activations[idx]);
 8009f08:	f001 fe94 	bl	800bc34 <ai_buffer_array_item_set_address>
        for (int idx=0; idx < par.map_activations.size; idx++)
 8009f0c:	e7eb      	b.n	8009ee6 <ai_mnetwork_init+0x16>

08009f0e <ai_mnetwork_run>:

AI_API_ENTRY
ai_i32 ai_mnetwork_run(ai_handle network, const ai_buffer* input,
        ai_buffer* output)
{
 8009f0e:	b513      	push	{r0, r1, r4, lr}
 8009f10:	9201      	str	r2, [sp, #4]
    struct network_instance* inn;
    inn =  ai_mnetwork_handle((struct network_instance *)network);
 8009f12:	f7ff ff39 	bl	8009d88 <ai_mnetwork_handle>
    if (inn)
 8009f16:	4603      	mov	r3, r0
 8009f18:	b140      	cbz	r0, 8009f2c <ai_mnetwork_run+0x1e>
        return inn->entry->ai_run(inn->handle, input, output);
 8009f1a:	6800      	ldr	r0, [r0, #0]
 8009f1c:	9a01      	ldr	r2, [sp, #4]
 8009f1e:	6a04      	ldr	r4, [r0, #32]
 8009f20:	6858      	ldr	r0, [r3, #4]
 8009f22:	4623      	mov	r3, r4
    else
        return 0;
}
 8009f24:	b002      	add	sp, #8
 8009f26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return inn->entry->ai_run(inn->handle, input, output);
 8009f2a:	4718      	bx	r3
}
 8009f2c:	b002      	add	sp, #8
 8009f2e:	bd10      	pop	{r4, pc}

08009f30 <ai_mnetwork_get_private_handle>:

AI_API_ENTRY
 int ai_mnetwork_get_private_handle(ai_handle network,
         ai_handle *phandle,
         ai_network_params *pparams)
 {
 8009f30:	b538      	push	{r3, r4, r5, lr}
 8009f32:	4615      	mov	r5, r2
     struct network_instance* inn;
     inn =  ai_mnetwork_handle((struct network_instance *)network);
 8009f34:	f7ff ff28 	bl	8009d88 <ai_mnetwork_handle>
     if (inn && phandle && pparams) {
 8009f38:	b188      	cbz	r0, 8009f5e <ai_mnetwork_get_private_handle+0x2e>
 8009f3a:	b181      	cbz	r1, 8009f5e <ai_mnetwork_get_private_handle+0x2e>
 8009f3c:	b17d      	cbz	r5, 8009f5e <ai_mnetwork_get_private_handle+0x2e>
         *phandle = inn->handle;
 8009f3e:	6843      	ldr	r3, [r0, #4]
         *pparams = inn->params;
 8009f40:	f100 0408 	add.w	r4, r0, #8
         *phandle = inn->handle;
 8009f44:	600b      	str	r3, [r1, #0]
         *pparams = inn->params;
 8009f46:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009f48:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009f4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009f4c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009f4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009f50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009f52:	e894 0003 	ldmia.w	r4, {r0, r1}
 8009f56:	e885 0003 	stmia.w	r5, {r0, r1}
         return 0;
 8009f5a:	2000      	movs	r0, #0
     }
     else
         return -1;
 }
 8009f5c:	bd38      	pop	{r3, r4, r5, pc}
         return -1;
 8009f5e:	f04f 30ff 	mov.w	r0, #4294967295
 8009f62:	e7fb      	b.n	8009f5c <ai_mnetwork_get_private_handle+0x2c>

08009f64 <_write_number>:

  return count;
}

static int _write_number(uint64_t number, struct specifier *specifier)
{
 8009f64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  char sign_neg = 0;
  char chr;

  buf[idx--] = 0;

  if (specifier->flags & FLAG_IS_SIGNED) {
 8009f68:	6896      	ldr	r6, [r2, #8]
{
 8009f6a:	b091      	sub	sp, #68	; 0x44
  buf[idx--] = 0;
 8009f6c:	2500      	movs	r5, #0
{
 8009f6e:	4614      	mov	r4, r2
  if (specifier->flags & FLAG_IS_SIGNED) {
 8009f70:	f016 0304 	ands.w	r3, r6, #4
  buf[idx--] = 0;
 8009f74:	f88d 503f 	strb.w	r5, [sp, #63]	; 0x3f
  if (specifier->flags & FLAG_IS_SIGNED) {
 8009f78:	d02a      	beq.n	8009fd0 <_write_number+0x6c>
    if ((int64_t)number < 0) {
 8009f7a:	42a9      	cmp	r1, r5
 8009f7c:	da08      	bge.n	8009f90 <_write_number+0x2c>
      number = -number;
      sign_neg = '-';
      specifier->width -= 1;
 8009f7e:	6813      	ldr	r3, [r2, #0]
      number = -number;
 8009f80:	4240      	negs	r0, r0
      sign_neg = '-';
 8009f82:	f04f 052d 	mov.w	r5, #45	; 0x2d
      specifier->width -= 1;
 8009f86:	f103 33ff 	add.w	r3, r3, #4294967295
      number = -number;
 8009f8a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
      specifier->width -= 1;
 8009f8e:	6013      	str	r3, [r2, #0]
 8009f90:	f016 0f08 	tst.w	r6, #8
 8009f94:	f10d 093e 	add.w	r9, sp, #62	; 0x3e
  do {
    uint64_t t;
    if (specifier->flags & FLAG_HEX) {
      chr = number & 0x0F;
      t = number >> 4;
      chr = (chr >= 10) ? (chr + (specifier->flags & FLAG_CAPS ? 'A' : 'a') - 10) : (chr + '0');
 8009f98:	f04f 073e 	mov.w	r7, #62	; 0x3e
    if (specifier->flags & FLAG_HEX) {
 8009f9c:	f006 0a10 	and.w	sl, r6, #16
 8009fa0:	bf14      	ite	ne
 8009fa2:	f04f 0841 	movne.w	r8, #65	; 0x41
 8009fa6:	f04f 0861 	moveq.w	r8, #97	; 0x61
      chr = (chr >= 10) ? (chr + (specifier->flags & FLAG_CAPS ? 'A' : 'a') - 10) : (chr + '0');
 8009faa:	f1a8 080a 	sub.w	r8, r8, #10
      chr = number & 0x0F;
 8009fae:	fa5f fb80 	uxtb.w	fp, r0
    if (specifier->flags & FLAG_HEX) {
 8009fb2:	f1ba 0f00 	cmp.w	sl, #0
 8009fb6:	d032      	beq.n	800a01e <_write_number+0xba>
      chr = number & 0x0F;
 8009fb8:	f00b 030f 	and.w	r3, fp, #15
      t = number >> 4;
 8009fbc:	0900      	lsrs	r0, r0, #4
      chr = (chr >= 10) ? (chr + (specifier->flags & FLAG_CAPS ? 'A' : 'a') - 10) : (chr + '0');
 8009fbe:	2b09      	cmp	r3, #9
      t = number >> 4;
 8009fc0:	ea40 7001 	orr.w	r0, r0, r1, lsl #28
 8009fc4:	ea4f 1111 	mov.w	r1, r1, lsr #4
      chr = (chr >= 10) ? (chr + (specifier->flags & FLAG_CAPS ? 'A' : 'a') - 10) : (chr + '0');
 8009fc8:	d906      	bls.n	8009fd8 <_write_number+0x74>
 8009fca:	4443      	add	r3, r8
    } else {
      t = number / 10;
      chr = (number - t * 10) + '0';
 8009fcc:	b2db      	uxtb	r3, r3
 8009fce:	e004      	b.n	8009fda <_write_number+0x76>
  char sign_neg = 0;
 8009fd0:	461d      	mov	r5, r3
 8009fd2:	e7dd      	b.n	8009f90 <_write_number+0x2c>
    }
    number = t;
    buf[idx--] = chr;
 8009fd4:	4617      	mov	r7, r2
 8009fd6:	e7ea      	b.n	8009fae <_write_number+0x4a>
      chr = (chr >= 10) ? (chr + (specifier->flags & FLAG_CAPS ? 'A' : 'a') - 10) : (chr + '0');
 8009fd8:	3330      	adds	r3, #48	; 0x30
    buf[idx--] = chr;
 8009fda:	f809 3901 	strb.w	r3, [r9], #-1
    count++;
  } while (number);
 8009fde:	ea50 0301 	orrs.w	r3, r0, r1
    buf[idx--] = chr;
 8009fe2:	f107 32ff 	add.w	r2, r7, #4294967295
    count++;
 8009fe6:	f1c7 0b3f 	rsb	fp, r7, #63	; 0x3f
  } while (number);
 8009fea:	d1f3      	bne.n	8009fd4 <_write_number+0x70>

  if ((sign_neg) && (!(specifier->flags & FLAG_ZERO_EXTEND))) {
 8009fec:	f006 0101 	and.w	r1, r6, #1
 8009ff0:	b14d      	cbz	r5, 800a006 <_write_number+0xa2>
 8009ff2:	b941      	cbnz	r1, 800a006 <_write_number+0xa2>
    buf[idx--] = sign_neg;
 8009ff4:	f102 0340 	add.w	r3, r2, #64	; 0x40
    count++;
 8009ff8:	f1c7 0b40 	rsb	fp, r7, #64	; 0x40
    buf[idx--] = sign_neg;
 8009ffc:	eb0d 0203 	add.w	r2, sp, r3
 800a000:	f802 5c40 	strb.w	r5, [r2, #-64]
 800a004:	1eba      	subs	r2, r7, #2
 800a006:	2900      	cmp	r1, #0
  }

  while ((count < specifier->width) && (!(specifier->flags & FLAG_NEG_PAD))) {
 800a008:	6823      	ldr	r3, [r4, #0]
 800a00a:	f006 0602 	and.w	r6, r6, #2
 800a00e:	bf14      	ite	ne
 800a010:	2130      	movne	r1, #48	; 0x30
 800a012:	2120      	moveq	r1, #32
 800a014:	455b      	cmp	r3, fp
 800a016:	dd13      	ble.n	800a040 <_write_number+0xdc>
 800a018:	b166      	cbz	r6, 800a034 <_write_number+0xd0>
    else
      buf[idx--] = ' ';
    count++;
  }

  if ((sign_neg) && (count < (specifier->width + 1))) {
 800a01a:	b9a5      	cbnz	r5, 800a046 <_write_number+0xe2>
 800a01c:	e01b      	b.n	800a056 <_write_number+0xf2>
      t = number / 10;
 800a01e:	2300      	movs	r3, #0
 800a020:	220a      	movs	r2, #10
      chr = (number - t * 10) + '0';
 800a022:	f10b 0b30 	add.w	fp, fp, #48	; 0x30
      t = number / 10;
 800a026:	f7f6 fac1 	bl	80005ac <__aeabi_uldivmod>
      chr = (number - t * 10) + '0';
 800a02a:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 800a02e:	ebab 0343 	sub.w	r3, fp, r3, lsl #1
 800a032:	e7cb      	b.n	8009fcc <_write_number+0x68>
    if (specifier->flags & FLAG_ZERO_EXTEND)
 800a034:	f80d 1002 	strb.w	r1, [sp, r2]
    count++;
 800a038:	f10b 0b01 	add.w	fp, fp, #1
 800a03c:	3a01      	subs	r2, #1
 800a03e:	e7e9      	b.n	800a014 <_write_number+0xb0>
  if ((sign_neg) && (count < (specifier->width + 1))) {
 800a040:	b14d      	cbz	r5, 800a056 <_write_number+0xf2>
 800a042:	455b      	cmp	r3, fp
 800a044:	d107      	bne.n	800a056 <_write_number+0xf2>
    buf[idx--] = sign_neg;
 800a046:	f102 0340 	add.w	r3, r2, #64	; 0x40
    count++;
 800a04a:	f10b 0b01 	add.w	fp, fp, #1
    buf[idx--] = sign_neg;
 800a04e:	3a01      	subs	r2, #1
 800a050:	446b      	add	r3, sp
 800a052:	f803 5c40 	strb.w	r5, [r3, #-64]
  }

  idx++;


  for(int i = 0; i < count; i++) {
 800a056:	eb0d 0602 	add.w	r6, sp, r2
 800a05a:	2500      	movs	r5, #0
 800a05c:	3501      	adds	r5, #1
    specifier->putc_fct(specifier->user, (buf + idx)[i]);
 800a05e:	68e3      	ldr	r3, [r4, #12]
 800a060:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a064:	6920      	ldr	r0, [r4, #16]
 800a066:	4798      	blx	r3
  for(int i = 0; i < count; i++) {
 800a068:	45ab      	cmp	fp, r5
 800a06a:	d1f7      	bne.n	800a05c <_write_number+0xf8>
  }

  if (specifier->flags & FLAG_NEG_PAD) {
 800a06c:	68a3      	ldr	r3, [r4, #8]
 800a06e:	079b      	lsls	r3, r3, #30
 800a070:	d408      	bmi.n	800a084 <_write_number+0x120>
      _WRITE_C(' ');
    }
  }

  return count;
}
 800a072:	4628      	mov	r0, r5
 800a074:	b011      	add	sp, #68	; 0x44
 800a076:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      _WRITE_C(' ');
 800a07a:	3501      	adds	r5, #1
 800a07c:	68e3      	ldr	r3, [r4, #12]
 800a07e:	2120      	movs	r1, #32
 800a080:	6920      	ldr	r0, [r4, #16]
 800a082:	4798      	blx	r3
    while (count < specifier->width) {
 800a084:	6823      	ldr	r3, [r4, #0]
 800a086:	42ab      	cmp	r3, r5
 800a088:	dcf7      	bgt.n	800a07a <_write_number+0x116>
 800a08a:	e7f2      	b.n	800a072 <_write_number+0x10e>

0800a08c <vlc_print>:
{
  return *(*fmtP)++;
}

int vlc_print(void (*putc_fct)(void*, const char), void *user, const char* fmt, va_list vl)
{
 800a08c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a090:	4683      	mov	fp, r0
 800a092:	460f      	mov	r7, r1
 800a094:	461c      	mov	r4, r3
  char c, t;
  int count = 0;
 800a096:	2500      	movs	r5, #0
{
 800a098:	ed2d 8b02 	vpush	{d8}
 800a09c:	b09b      	sub	sp, #108	; 0x6c
  return *(*fmtP)++;
 800a09e:	4613      	mov	r3, r2
 800a0a0:	f813 1b01 	ldrb.w	r1, [r3], #1
 800a0a4:	9302      	str	r3, [sp, #8]
  bool error = false;

  while (((c = _getChar(&fmt)) != 0) && (!error))
 800a0a6:	b929      	cbnz	r1, 800a0b4 <vlc_print+0x28>
      putc_fct(user, c);
      count++;
    }
  }
  return count;
}
 800a0a8:	4628      	mov	r0, r5
 800a0aa:	b01b      	add	sp, #108	; 0x6c
 800a0ac:	ecbd 8b02 	vpop	{d8}
 800a0b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (c == '\n')
 800a0b4:	290a      	cmp	r1, #10
 800a0b6:	d103      	bne.n	800a0c0 <vlc_print+0x34>
      putc_fct(user, c);
 800a0b8:	4638      	mov	r0, r7
      count++;
 800a0ba:	3501      	adds	r5, #1
      putc_fct(user, c);
 800a0bc:	47d8      	blx	fp
      count++;
 800a0be:	e0c9      	b.n	800a254 <vlc_print+0x1c8>
    else if (c == '%')
 800a0c0:	2925      	cmp	r1, #37	; 0x25
 800a0c2:	d1f9      	bne.n	800a0b8 <vlc_print+0x2c>
      struct specifier specifier = { 0, 0, 0, putc_fct, user };
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	f04f 090a 	mov.w	r9, #10
 800a0ca:	9709      	str	r7, [sp, #36]	; 0x24
 800a0cc:	4698      	mov	r8, r3
 800a0ce:	461a      	mov	r2, r3
 800a0d0:	469e      	mov	lr, r3
 800a0d2:	4618      	mov	r0, r3
      bool has_precision = false;
 800a0d4:	469c      	mov	ip, r3
      struct specifier specifier = { 0, 0, 0, putc_fct, user };
 800a0d6:	9301      	str	r3, [sp, #4]
      bool long_type = false;
 800a0d8:	9303      	str	r3, [sp, #12]
      struct specifier specifier = { 0, 0, 0, putc_fct, user };
 800a0da:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800a0de:	e9cd 3b07 	strd	r3, fp, [sp, #28]
  return *(*fmtP)++;
 800a0e2:	9e02      	ldr	r6, [sp, #8]
 800a0e4:	f816 1b01 	ldrb.w	r1, [r6], #1
 800a0e8:	9602      	str	r6, [sp, #8]
        if (!c)
 800a0ea:	2900      	cmp	r1, #0
 800a0ec:	f000 81be 	beq.w	800a46c <vlc_print+0x3e0>
        else if (c == '0')
 800a0f0:	2930      	cmp	r1, #48	; 0x30
 800a0f2:	d116      	bne.n	800a122 <vlc_print+0x96>
          if (!specifier.width && !specifier.precision) {
 800a0f4:	ea50 0102 	orrs.w	r1, r0, r2
 800a0f8:	d107      	bne.n	800a10a <vlc_print+0x7e>
            specifier.flags |= FLAG_ZERO_EXTEND;
 800a0fa:	9b01      	ldr	r3, [sp, #4]
 800a0fc:	460a      	mov	r2, r1
 800a0fe:	4608      	mov	r0, r1
 800a100:	f043 0301 	orr.w	r3, r3, #1
 800a104:	9301      	str	r3, [sp, #4]
 800a106:	2301      	movs	r3, #1
 800a108:	e7eb      	b.n	800a0e2 <vlc_print+0x56>
          } else if (has_precision) {
 800a10a:	f1bc 0f00 	cmp.w	ip, #0
 800a10e:	d003      	beq.n	800a118 <vlc_print+0x8c>
            specifier.precision = specifier.precision * 10 + (c - '0');
 800a110:	fb09 f202 	mul.w	r2, r9, r2
 800a114:	46e0      	mov	r8, ip
 800a116:	e7e4      	b.n	800a0e2 <vlc_print+0x56>
            specifier.width = specifier.width * 10 + (c - '0');
 800a118:	fb09 f000 	mul.w	r0, r9, r0
            specifier.width = specifier.width * 10 + (c - '0');
 800a11c:	f04f 0e01 	mov.w	lr, #1
 800a120:	e7df      	b.n	800a0e2 <vlc_print+0x56>
        else if (c == '-')
 800a122:	292d      	cmp	r1, #45	; 0x2d
 800a124:	d104      	bne.n	800a130 <vlc_print+0xa4>
          specifier.flags |= FLAG_NEG_PAD;
 800a126:	9b01      	ldr	r3, [sp, #4]
 800a128:	f043 0302 	orr.w	r3, r3, #2
 800a12c:	9301      	str	r3, [sp, #4]
 800a12e:	e7ea      	b.n	800a106 <vlc_print+0x7a>
        else if (c == '.')
 800a130:	292e      	cmp	r1, #46	; 0x2e
 800a132:	f000 81a9 	beq.w	800a488 <vlc_print+0x3fc>
        else if ((c >= '1') && (c <= '9'))
 800a136:	f1a1 0a31 	sub.w	sl, r1, #49	; 0x31
 800a13a:	f1ba 0f08 	cmp.w	sl, #8
 800a13e:	d809      	bhi.n	800a154 <vlc_print+0xc8>
            specifier.precision = specifier.precision * 10 + (c - '0');
 800a140:	3930      	subs	r1, #48	; 0x30
          if (has_precision) {
 800a142:	f1bc 0f00 	cmp.w	ip, #0
 800a146:	d002      	beq.n	800a14e <vlc_print+0xc2>
            specifier.precision = specifier.precision * 10 + (c - '0');
 800a148:	fb09 1202 	mla	r2, r9, r2, r1
 800a14c:	e7e2      	b.n	800a114 <vlc_print+0x88>
            specifier.width = specifier.width * 10 + (c - '0');
 800a14e:	fb09 1000 	mla	r0, r9, r0, r1
 800a152:	e7e3      	b.n	800a11c <vlc_print+0x90>
        else if (c == 'l')
 800a154:	296c      	cmp	r1, #108	; 0x6c
 800a156:	f000 819a 	beq.w	800a48e <vlc_print+0x402>
 800a15a:	f1be 0f00 	cmp.w	lr, #0
 800a15e:	d000      	beq.n	800a162 <vlc_print+0xd6>
 800a160:	9005      	str	r0, [sp, #20]
 800a162:	f1b8 0f00 	cmp.w	r8, #0
 800a166:	d000      	beq.n	800a16a <vlc_print+0xde>
 800a168:	9206      	str	r2, [sp, #24]
 800a16a:	b10b      	cbz	r3, 800a170 <vlc_print+0xe4>
 800a16c:	9b01      	ldr	r3, [sp, #4]
 800a16e:	9307      	str	r3, [sp, #28]
          switch(c)
 800a170:	2978      	cmp	r1, #120	; 0x78
 800a172:	d809      	bhi.n	800a188 <vlc_print+0xfc>
 800a174:	2962      	cmp	r1, #98	; 0x62
 800a176:	d813      	bhi.n	800a1a0 <vlc_print+0x114>
 800a178:	2946      	cmp	r1, #70	; 0x46
 800a17a:	f000 80b3 	beq.w	800a2e4 <vlc_print+0x258>
 800a17e:	2958      	cmp	r1, #88	; 0x58
 800a180:	f000 808f 	beq.w	800a2a2 <vlc_print+0x216>
 800a184:	2925      	cmp	r1, #37	; 0x25
 800a186:	d097      	beq.n	800a0b8 <vlc_print+0x2c>
        putc_fct(user, '<');
 800a188:	213c      	movs	r1, #60	; 0x3c
 800a18a:	4638      	mov	r0, r7
 800a18c:	47d8      	blx	fp
        putc_fct(user, '!');
 800a18e:	2121      	movs	r1, #33	; 0x21
 800a190:	4638      	mov	r0, r7
        va_arg(vl, signed long);
 800a192:	3404      	adds	r4, #4
        putc_fct(user, '!');
 800a194:	47d8      	blx	fp
        putc_fct(user, '>');
 800a196:	213e      	movs	r1, #62	; 0x3e
 800a198:	4638      	mov	r0, r7
        count += 3;
 800a19a:	3503      	adds	r5, #3
        putc_fct(user, '>');
 800a19c:	47d8      	blx	fp
        error = false;
 800a19e:	e059      	b.n	800a254 <vlc_print+0x1c8>
          switch(c)
 800a1a0:	f1a1 0363 	sub.w	r3, r1, #99	; 0x63
 800a1a4:	2b15      	cmp	r3, #21
 800a1a6:	d8ef      	bhi.n	800a188 <vlc_print+0xfc>
 800a1a8:	a201      	add	r2, pc, #4	; (adr r2, 800a1b0 <vlc_print+0x124>)
 800a1aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1ae:	bf00      	nop
 800a1b0:	0800a209 	.word	0x0800a209
 800a1b4:	0800a2c3 	.word	0x0800a2c3
 800a1b8:	0800a189 	.word	0x0800a189
 800a1bc:	0800a2e5 	.word	0x0800a2e5
 800a1c0:	0800a189 	.word	0x0800a189
 800a1c4:	0800a189 	.word	0x0800a189
 800a1c8:	0800a2c3 	.word	0x0800a2c3
 800a1cc:	0800a189 	.word	0x0800a189
 800a1d0:	0800a189 	.word	0x0800a189
 800a1d4:	0800a189 	.word	0x0800a189
 800a1d8:	0800a189 	.word	0x0800a189
 800a1dc:	0800a189 	.word	0x0800a189
 800a1e0:	0800a189 	.word	0x0800a189
 800a1e4:	0800a297 	.word	0x0800a297
 800a1e8:	0800a189 	.word	0x0800a189
 800a1ec:	0800a189 	.word	0x0800a189
 800a1f0:	0800a211 	.word	0x0800a211
 800a1f4:	0800a189 	.word	0x0800a189
 800a1f8:	0800a2cb 	.word	0x0800a2cb
 800a1fc:	0800a189 	.word	0x0800a189
 800a200:	0800a189 	.word	0x0800a189
 800a204:	0800a2ab 	.word	0x0800a2ab
            t = (char)va_arg(vl, signed int);
 800a208:	f854 1b04 	ldr.w	r1, [r4], #4
            putc_fct(user, t);
 800a20c:	b2c9      	uxtb	r1, r1
 800a20e:	e753      	b.n	800a0b8 <vlc_print+0x2c>
            if (!str) str = "(null)";
 800a210:	4ba0      	ldr	r3, [pc, #640]	; (800a494 <vlc_print+0x408>)
            str = va_arg(vl, char*);
 800a212:	f854 9b04 	ldr.w	r9, [r4], #4
            if (!str) str = "(null)";
 800a216:	f1b9 0f00 	cmp.w	r9, #0
 800a21a:	bf08      	it	eq
 800a21c:	4699      	moveq	r9, r3
  int len = strlen(str);
 800a21e:	4648      	mov	r0, r9
 800a220:	f7f6 f85e 	bl	80002e0 <strlen>
  if (specifier->precision) {
 800a224:	9b06      	ldr	r3, [sp, #24]
  int len = strlen(str);
 800a226:	4680      	mov	r8, r0
  if (specifier->precision) {
 800a228:	b113      	cbz	r3, 800a230 <vlc_print+0x1a4>
    len = (len > specifier->precision)?specifier->precision:len;
 800a22a:	4298      	cmp	r0, r3
 800a22c:	bfa8      	it	ge
 800a22e:	4698      	movge	r8, r3
  if (!(specifier->flags & FLAG_NEG_PAD)) {
 800a230:	9e07      	ldr	r6, [sp, #28]
 800a232:	f016 0602 	ands.w	r6, r6, #2
 800a236:	d014      	beq.n	800a262 <vlc_print+0x1d6>
  int count = 0;
 800a238:	2600      	movs	r6, #0
 800a23a:	46ca      	mov	sl, r9
  for (int i = 0; i < len; i++) {
 800a23c:	ebaa 0309 	sub.w	r3, sl, r9
 800a240:	4598      	cmp	r8, r3
 800a242:	dc14      	bgt.n	800a26e <vlc_print+0x1e2>
  if (specifier->flags & FLAG_NEG_PAD) {
 800a244:	9b07      	ldr	r3, [sp, #28]
 800a246:	f1b8 0f00 	cmp.w	r8, #0
 800a24a:	bfa8      	it	ge
 800a24c:	4446      	addge	r6, r8
 800a24e:	079b      	lsls	r3, r3, #30
 800a250:	d41e      	bmi.n	800a290 <vlc_print+0x204>
            count += _write_string(str, &specifier);
 800a252:	4435      	add	r5, r6
  for(int i = 0; i < count; i++) {
 800a254:	9a02      	ldr	r2, [sp, #8]
 800a256:	e722      	b.n	800a09e <vlc_print+0x12>
      _WRITE_C(' ');
 800a258:	3601      	adds	r6, #1
 800a25a:	2120      	movs	r1, #32
 800a25c:	e9dd 3008 	ldrd	r3, r0, [sp, #32]
 800a260:	4798      	blx	r3
    for(int i = len; i < specifier->width; i++) {
 800a262:	eb08 0306 	add.w	r3, r8, r6
 800a266:	9a05      	ldr	r2, [sp, #20]
 800a268:	429a      	cmp	r2, r3
 800a26a:	dcf5      	bgt.n	800a258 <vlc_print+0x1cc>
 800a26c:	e7e5      	b.n	800a23a <vlc_print+0x1ae>
    _WRITE_C(*str++);
 800a26e:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800a272:	e9dd 3008 	ldrd	r3, r0, [sp, #32]
 800a276:	4798      	blx	r3
  for (int i = 0; i < len; i++) {
 800a278:	e7e0      	b.n	800a23c <vlc_print+0x1b0>
      _WRITE_C(' ');
 800a27a:	3601      	adds	r6, #1
 800a27c:	2120      	movs	r1, #32
 800a27e:	e9dd 3008 	ldrd	r3, r0, [sp, #32]
 800a282:	4798      	blx	r3
    for(int i = len; i < specifier->width; i++) {
 800a284:	eb08 0306 	add.w	r3, r8, r6
 800a288:	9a05      	ldr	r2, [sp, #20]
 800a28a:	429a      	cmp	r2, r3
 800a28c:	dcf5      	bgt.n	800a27a <vlc_print+0x1ee>
 800a28e:	e7e0      	b.n	800a252 <vlc_print+0x1c6>
 800a290:	eba8 0806 	sub.w	r8, r8, r6
 800a294:	e7f6      	b.n	800a284 <vlc_print+0x1f8>
            specifier.flags |= FLAG_ZERO_EXTEND;
 800a296:	9b07      	ldr	r3, [sp, #28]
 800a298:	f043 0301 	orr.w	r3, r3, #1
 800a29c:	9307      	str	r3, [sp, #28]
            specifier.width = 8;
 800a29e:	2308      	movs	r3, #8
 800a2a0:	9305      	str	r3, [sp, #20]
            specifier.flags |= FLAG_CAPS;
 800a2a2:	9b07      	ldr	r3, [sp, #28]
 800a2a4:	f043 0308 	orr.w	r3, r3, #8
 800a2a8:	9307      	str	r3, [sp, #28]
            specifier.flags |= FLAG_HEX;
 800a2aa:	9b07      	ldr	r3, [sp, #28]
            count += _write_number(val, &specifier);
 800a2ac:	aa05      	add	r2, sp, #20
 800a2ae:	f854 0b04 	ldr.w	r0, [r4], #4
 800a2b2:	2100      	movs	r1, #0
            specifier.flags |= FLAG_HEX;
 800a2b4:	f043 0310 	orr.w	r3, r3, #16
 800a2b8:	9307      	str	r3, [sp, #28]
            count += _write_number(val, &specifier);
 800a2ba:	f7ff fe53 	bl	8009f64 <_write_number>
 800a2be:	4405      	add	r5, r0
            break;
 800a2c0:	e7c8      	b.n	800a254 <vlc_print+0x1c8>
            specifier.flags |= FLAG_IS_SIGNED;
 800a2c2:	9b07      	ldr	r3, [sp, #28]
 800a2c4:	f043 0304 	orr.w	r3, r3, #4
 800a2c8:	9307      	str	r3, [sp, #28]
            if (c == 'u')
 800a2ca:	2975      	cmp	r1, #117	; 0x75
              val = va_arg(vl, unsigned int);
 800a2cc:	6820      	ldr	r0, [r4, #0]
 800a2ce:	f104 0604 	add.w	r6, r4, #4
            count += _write_number(val, &specifier);
 800a2d2:	aa05      	add	r2, sp, #20
              val = va_arg(vl, unsigned int);
 800a2d4:	bf0c      	ite	eq
 800a2d6:	2100      	moveq	r1, #0
                val = va_arg(vl, signed long);
 800a2d8:	17c1      	asrne	r1, r0, #31
            count += _write_number(val, &specifier);
 800a2da:	f7ff fe43 	bl	8009f64 <_write_number>
            break;
 800a2de:	4634      	mov	r4, r6
            count += _write_number(val, &specifier);
 800a2e0:	4405      	add	r5, r0
            break;
 800a2e2:	e7b7      	b.n	800a254 <vlc_print+0x1c8>
            dbl = va_arg(vl, double);
 800a2e4:	3407      	adds	r4, #7
            if (specifier.precision == 0)
 800a2e6:	9b06      	ldr	r3, [sp, #24]
            dbl = va_arg(vl, double);
 800a2e8:	f024 0407 	bic.w	r4, r4, #7
 800a2ec:	ecb4 8b02 	vldmia	r4!, {d8}
            if (specifier.precision == 0)
 800a2f0:	b90b      	cbnz	r3, 800a2f6 <vlc_print+0x26a>
              specifier.precision = 6;
 800a2f2:	2306      	movs	r3, #6
 800a2f4:	9306      	str	r3, [sp, #24]
  double mul = 1.0;
 800a2f6:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
  for (int i=0;i <specifier->precision; i++)
 800a2fa:	9e06      	ldr	r6, [sp, #24]
    mul *= 10;
 800a2fc:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
  for (int i=0;i <specifier->precision; i++)
 800a300:	2300      	movs	r3, #0
 800a302:	42b3      	cmp	r3, r6
 800a304:	f2c0 80a4 	blt.w	800a450 <vlc_print+0x3c4>
  if (is_signed)
 800a308:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
 800a30c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a310:	f140 80a2 	bpl.w	800a458 <vlc_print+0x3cc>
    number = -number;
 800a314:	eeb1 5b48 	vneg.f64	d5, d8
  number += (half_ / mul);
 800a318:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
  uint32_t count = 0;
 800a31c:	f04f 0800 	mov.w	r8, #0
  uint32_t idx = sizeof(buf) - 1;
 800a320:	f04f 093f 	mov.w	r9, #63	; 0x3f
  number += (half_ / mul);
 800a324:	ee84 6b07 	vdiv.f64	d6, d4, d7
 800a328:	ee36 6b05 	vadd.f64	d6, d6, d5
  val = (uint64_t)(number * mul);
 800a32c:	ee26 7b07 	vmul.f64	d7, d6, d7
 800a330:	ec51 0b17 	vmov	r0, r1, d7
 800a334:	f7f6 f954 	bl	80005e0 <__aeabi_d2ulz>
 800a338:	4603      	mov	r3, r0
    uint64_t t = val / 10;
 800a33a:	469a      	mov	sl, r3
 800a33c:	220a      	movs	r2, #10
 800a33e:	2300      	movs	r3, #0
 800a340:	9101      	str	r1, [sp, #4]
 800a342:	4650      	mov	r0, sl
 800a344:	f7f6 f932 	bl	80005ac <__aeabi_uldivmod>
    chr = (val - t * 10) + '0';
 800a348:	f10a 0c30 	add.w	ip, sl, #48	; 0x30
    uint64_t t = val / 10;
 800a34c:	4603      	mov	r3, r0
    chr = (val - t * 10) + '0';
 800a34e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    buf[idx--] = chr;
 800a352:	f109 32ff 	add.w	r2, r9, #4294967295
    chr = (val - t * 10) + '0';
 800a356:	ebac 0040 	sub.w	r0, ip, r0, lsl #1
    buf[idx--] = chr;
 800a35a:	f109 0c68 	add.w	ip, r9, #104	; 0x68
 800a35e:	44ec      	add	ip, sp
 800a360:	f80c 0c40 	strb.w	r0, [ip, #-64]
    count++;
 800a364:	f108 0001 	add.w	r0, r8, #1
    if (count == specifier->precision) {
 800a368:	4286      	cmp	r6, r0
      buf[idx--] = '.';
 800a36a:	bf05      	ittet	eq
 800a36c:	3268      	addeq	r2, #104	; 0x68
 800a36e:	202e      	moveq	r0, #46	; 0x2e
    buf[idx--] = chr;
 800a370:	4691      	movne	r9, r2
      buf[idx--] = '.';
 800a372:	f1a9 0902 	subeq.w	r9, r9, #2
 800a376:	bf05      	ittet	eq
 800a378:	446a      	addeq	r2, sp
      count++;
 800a37a:	f108 0802 	addeq.w	r8, r8, #2
    count++;
 800a37e:	4680      	movne	r8, r0
      buf[idx--] = '.';
 800a380:	f802 0c40 	strbeq.w	r0, [r2, #-64]
  } while (val);
 800a384:	f1ba 0f0a 	cmp.w	sl, #10
 800a388:	9a01      	ldr	r2, [sp, #4]
 800a38a:	f172 0200 	sbcs.w	r2, r2, #0
 800a38e:	d2d4      	bcs.n	800a33a <vlc_print+0x2ae>
    buf[idx--] = '0';
 800a390:	4546      	cmp	r6, r8
 800a392:	f1c6 0001 	rsb	r0, r6, #1
 800a396:	eba6 0a08 	sub.w	sl, r6, r8
 800a39a:	ab0a      	add	r3, sp, #40	; 0x28
 800a39c:	4440      	add	r0, r8
 800a39e:	bf3c      	itt	cc
 800a3a0:	2001      	movcc	r0, #1
 800a3a2:	f04f 0a00 	movcc.w	sl, #0
 800a3a6:	2130      	movs	r1, #48	; 0x30
 800a3a8:	4448      	add	r0, r9
 800a3aa:	4652      	mov	r2, sl
 800a3ac:	4418      	add	r0, r3
 800a3ae:	f008 fe05 	bl	8012fbc <memset>
 800a3b2:	eba8 0306 	sub.w	r3, r8, r6
 800a3b6:	4546      	cmp	r6, r8
 800a3b8:	bf38      	it	cc
 800a3ba:	2300      	movcc	r3, #0
 800a3bc:	44d0      	add	r8, sl
  if (count == specifier->precision) {
 800a3be:	4546      	cmp	r6, r8
 800a3c0:	4499      	add	r9, r3
 800a3c2:	f106 0601 	add.w	r6, r6, #1
 800a3c6:	d108      	bne.n	800a3da <vlc_print+0x34e>
    buf[idx--] = '.';
 800a3c8:	f109 0368 	add.w	r3, r9, #104	; 0x68
 800a3cc:	222e      	movs	r2, #46	; 0x2e
    count++;
 800a3ce:	46b0      	mov	r8, r6
    buf[idx--] = '.';
 800a3d0:	f109 39ff 	add.w	r9, r9, #4294967295
 800a3d4:	446b      	add	r3, sp
 800a3d6:	f803 2c40 	strb.w	r2, [r3, #-64]
  if (count == specifier->precision + 1)
 800a3da:	4546      	cmp	r6, r8
 800a3dc:	d109      	bne.n	800a3f2 <vlc_print+0x366>
    buf[idx--] = '0';
 800a3de:	f109 0368 	add.w	r3, r9, #104	; 0x68
 800a3e2:	2230      	movs	r2, #48	; 0x30
    count++;
 800a3e4:	f108 0801 	add.w	r8, r8, #1
    buf[idx--] = '0';
 800a3e8:	f109 39ff 	add.w	r9, r9, #4294967295
 800a3ec:	446b      	add	r3, sp
 800a3ee:	f803 2c40 	strb.w	r2, [r3, #-64]
  if (is_signed) {
 800a3f2:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
 800a3f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3fa:	d509      	bpl.n	800a410 <vlc_print+0x384>
    buf[idx--] = '-';
 800a3fc:	f109 0368 	add.w	r3, r9, #104	; 0x68
 800a400:	222d      	movs	r2, #45	; 0x2d
    count++;
 800a402:	f108 0801 	add.w	r8, r8, #1
    buf[idx--] = '-';
 800a406:	f109 39ff 	add.w	r9, r9, #4294967295
 800a40a:	446b      	add	r3, sp
 800a40c:	f803 2c40 	strb.w	r2, [r3, #-64]
  while (count < specifier->width) {
 800a410:	9e05      	ldr	r6, [sp, #20]
    buf[idx--] = ' ';
 800a412:	ab0a      	add	r3, sp, #40	; 0x28
 800a414:	2120      	movs	r1, #32
 800a416:	45b0      	cmp	r8, r6
 800a418:	f1c6 0001 	rsb	r0, r6, #1
 800a41c:	eba6 0a08 	sub.w	sl, r6, r8
 800a420:	4440      	add	r0, r8
 800a422:	bf84      	itt	hi
 800a424:	2001      	movhi	r0, #1
 800a426:	f04f 0a00 	movhi.w	sl, #0
 800a42a:	4448      	add	r0, r9
 800a42c:	4652      	mov	r2, sl
 800a42e:	4418      	add	r0, r3
 800a430:	f008 fdc4 	bl	8012fbc <memset>
  for(int i = 0; i < count; i++) {
 800a434:	eba8 0306 	sub.w	r3, r8, r6
 800a438:	45b0      	cmp	r8, r6
 800a43a:	bf88      	it	hi
 800a43c:	2300      	movhi	r3, #0
 800a43e:	44d0      	add	r8, sl
 800a440:	2600      	movs	r6, #0
 800a442:	4499      	add	r9, r3
 800a444:	ab0a      	add	r3, sp, #40	; 0x28
 800a446:	4499      	add	r9, r3
 800a448:	45b0      	cmp	r8, r6
 800a44a:	d108      	bne.n	800a45e <vlc_print+0x3d2>
            count += _write_double(dbl, &specifier);
 800a44c:	4445      	add	r5, r8
            break;
 800a44e:	e701      	b.n	800a254 <vlc_print+0x1c8>
    mul *= 10;
 800a450:	ee27 7b06 	vmul.f64	d7, d7, d6
  for (int i=0;i <specifier->precision; i++)
 800a454:	3301      	adds	r3, #1
 800a456:	e754      	b.n	800a302 <vlc_print+0x276>
 800a458:	eeb0 5b48 	vmov.f64	d5, d8
 800a45c:	e75c      	b.n	800a318 <vlc_print+0x28c>
    specifier->putc_fct(specifier->user, (buf + idx)[i]);
 800a45e:	f819 1f01 	ldrb.w	r1, [r9, #1]!
  for(int i = 0; i < count; i++) {
 800a462:	3601      	adds	r6, #1
    specifier->putc_fct(specifier->user, (buf + idx)[i]);
 800a464:	e9dd 3008 	ldrd	r3, r0, [sp, #32]
 800a468:	4798      	blx	r3
  for(int i = 0; i < count; i++) {
 800a46a:	e7ed      	b.n	800a448 <vlc_print+0x3bc>
 800a46c:	f1be 0f00 	cmp.w	lr, #0
 800a470:	d000      	beq.n	800a474 <vlc_print+0x3e8>
 800a472:	9005      	str	r0, [sp, #20]
 800a474:	f1b8 0f00 	cmp.w	r8, #0
 800a478:	d000      	beq.n	800a47c <vlc_print+0x3f0>
 800a47a:	9206      	str	r2, [sp, #24]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	f43f ae83 	beq.w	800a188 <vlc_print+0xfc>
 800a482:	9b01      	ldr	r3, [sp, #4]
 800a484:	9307      	str	r3, [sp, #28]
 800a486:	e67f      	b.n	800a188 <vlc_print+0xfc>
          has_precision = true;
 800a488:	f04f 0c01 	mov.w	ip, #1
 800a48c:	e629      	b.n	800a0e2 <vlc_print+0x56>
          long_type = true;
 800a48e:	2101      	movs	r1, #1
 800a490:	9103      	str	r1, [sp, #12]
      while (done == false) {
 800a492:	e626      	b.n	800a0e2 <vlc_print+0x56>
 800a494:	08016948 	.word	0x08016948

0800a498 <ai_modelstrojnegaucenja_get_report>:


AI_API_ENTRY
ai_bool ai_modelstrojnegaucenja_get_report(
  ai_handle network, ai_network_report* report)
{
 800a498:	b570      	push	{r4, r5, r6, lr}
 800a49a:	460d      	mov	r5, r1
 800a49c:	b0a0      	sub	sp, #128	; 0x80
 800a49e:	4606      	mov	r6, r0
  ai_network* net_ctx = AI_NETWORK_ACQUIRE_CTX(network);
 800a4a0:	f001 ff72 	bl	800c388 <ai_platform_context_acquire>
 800a4a4:	4604      	mov	r4, r0

  if (report && net_ctx)
 800a4a6:	2d00      	cmp	r5, #0
 800a4a8:	d035      	beq.n	800a516 <ai_modelstrojnegaucenja_get_report+0x7e>
 800a4aa:	2800      	cmp	r0, #0
 800a4ac:	d030      	beq.n	800a510 <ai_modelstrojnegaucenja_get_report+0x78>
  {
    ai_network_report r = {
 800a4ae:	226c      	movs	r2, #108	; 0x6c
 800a4b0:	2100      	movs	r1, #0
 800a4b2:	a805      	add	r0, sp, #20
 800a4b4:	f008 fd82 	bl	8012fbc <memset>
 800a4b8:	4b18      	ldr	r3, [pc, #96]	; (800a51c <ai_modelstrojnegaucenja_get_report+0x84>)
 800a4ba:	9301      	str	r3, [sp, #4]
 800a4bc:	4b18      	ldr	r3, [pc, #96]	; (800a520 <ai_modelstrojnegaucenja_get_report+0x88>)
 800a4be:	9302      	str	r3, [sp, #8]
 800a4c0:	4b18      	ldr	r3, [pc, #96]	; (800a524 <ai_modelstrojnegaucenja_get_report+0x8c>)
 800a4c2:	9303      	str	r3, [sp, #12]
 800a4c4:	4b18      	ldr	r3, [pc, #96]	; (800a528 <ai_modelstrojnegaucenja_get_report+0x90>)
 800a4c6:	9304      	str	r3, [sp, #16]
      .model_signature   = AI_MODELSTROJNEGAUCENJA_MODEL_SIGNATURE,
      .model_datetime    = AI_TOOLS_DATE_TIME,
      
      .compile_datetime  = AI_TOOLS_COMPILE_TIME,
      
      .runtime_revision  = ai_platform_runtime_get_revision(),
 800a4c8:	f001 fd24 	bl	800bf14 <ai_platform_runtime_get_revision>
    ai_network_report r = {
 800a4cc:	9005      	str	r0, [sp, #20]
      .runtime_version   = ai_platform_runtime_get_version(),
 800a4ce:	f001 fda5 	bl	800c01c <ai_platform_runtime_get_version>
    ai_network_report r = {
 800a4d2:	4b16      	ldr	r3, [pc, #88]	; (800a52c <ai_modelstrojnegaucenja_get_report+0x94>)
      .runtime_version   = ai_platform_runtime_get_version(),
 800a4d4:	9006      	str	r0, [sp, #24]
    ai_network_report r = {
 800a4d6:	9307      	str	r3, [sp, #28]
 800a4d8:	2308      	movs	r3, #8
 800a4da:	f88d 3020 	strb.w	r3, [sp, #32]
 800a4de:	2301      	movs	r3, #1
 800a4e0:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
      .tool_revision     = AI_TOOLS_REVISION_ID,
      .tool_version      = {AI_TOOLS_VERSION_MAJOR, AI_TOOLS_VERSION_MINOR,
                            AI_TOOLS_VERSION_MICRO, 0x0},
      .tool_api_version  = AI_STRUCT_INIT,

      .api_version            = ai_platform_api_get_version(),
 800a4e4:	f001 fe20 	bl	800c128 <ai_platform_api_get_version>
 800a4e8:	900a      	str	r0, [sp, #40]	; 0x28
      .interface_api_version  = ai_platform_interface_api_get_version(),
 800a4ea:	f001 feb5 	bl	800c258 <ai_platform_interface_api_get_version>
    ai_network_report r = {
 800a4ee:	f647 3302 	movw	r3, #31490	; 0x7b02
      .interface_api_version  = ai_platform_interface_api_get_version(),
 800a4f2:	900b      	str	r0, [sp, #44]	; 0x2c
      .map_activations   = AI_STRUCT_INIT,
      .n_nodes           = 0,
      .signature         = 0x0,
    };

    if (!ai_platform_api_get_network_report(network, &r)) return false;
 800a4f4:	a901      	add	r1, sp, #4
 800a4f6:	4630      	mov	r0, r6
    ai_network_report r = {
 800a4f8:	930c      	str	r3, [sp, #48]	; 0x30
 800a4fa:	4b0d      	ldr	r3, [pc, #52]	; (800a530 <ai_modelstrojnegaucenja_get_report+0x98>)
 800a4fc:	9310      	str	r3, [sp, #64]	; 0x40
    if (!ai_platform_api_get_network_report(network, &r)) return false;
 800a4fe:	f002 f8e1 	bl	800c6c4 <ai_platform_api_get_network_report>
 800a502:	4604      	mov	r4, r0
 800a504:	b120      	cbz	r0, 800a510 <ai_modelstrojnegaucenja_get_report+0x78>

    *report = r;
 800a506:	227c      	movs	r2, #124	; 0x7c
 800a508:	a901      	add	r1, sp, #4
 800a50a:	4628      	mov	r0, r5
 800a50c:	f008 fd48 	bl	8012fa0 <memcpy>
    return true;
  }
  return false;
}
 800a510:	4620      	mov	r0, r4
 800a512:	b020      	add	sp, #128	; 0x80
 800a514:	bd70      	pop	{r4, r5, r6, pc}
  return false;
 800a516:	462c      	mov	r4, r5
 800a518:	e7fa      	b.n	800a510 <ai_modelstrojnegaucenja_get_report+0x78>
 800a51a:	bf00      	nop
 800a51c:	08016906 	.word	0x08016906
 800a520:	0801694f 	.word	0x0801694f
 800a524:	08016970 	.word	0x08016970
 800a528:	08016989 	.word	0x08016989
 800a52c:	080172af 	.word	0x080172af
 800a530:	a1facade 	.word	0xa1facade

0800a534 <ai_modelstrojnegaucenja_get_error>:

AI_API_ENTRY
ai_error ai_modelstrojnegaucenja_get_error(ai_handle network)
{
  return ai_platform_network_get_error(network);
 800a534:	f001 bfb4 	b.w	800c4a0 <ai_platform_network_get_error>

0800a538 <ai_modelstrojnegaucenja_create>:
}

AI_API_ENTRY
ai_error ai_modelstrojnegaucenja_create(
  ai_handle* network, const ai_buffer* network_config)
{
 800a538:	b507      	push	{r0, r1, r2, lr}
  return ai_platform_network_create(
 800a53a:	2305      	movs	r3, #5
 800a53c:	2200      	movs	r2, #0
 800a53e:	e9cd 3200 	strd	r3, r2, [sp]
 800a542:	2301      	movs	r3, #1
 800a544:	4a02      	ldr	r2, [pc, #8]	; (800a550 <ai_modelstrojnegaucenja_create+0x18>)
 800a546:	f002 fceb 	bl	800cf20 <ai_platform_network_create>
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 800a54a:	b003      	add	sp, #12
 800a54c:	f85d fb04 	ldr.w	pc, [sp], #4
 800a550:	240003b0 	.word	0x240003b0

0800a554 <ai_modelstrojnegaucenja_destroy>:
}

AI_API_ENTRY
ai_handle ai_modelstrojnegaucenja_destroy(ai_handle network)
{
  return ai_platform_network_destroy(network);
 800a554:	f002 bebe 	b.w	800d2d4 <ai_platform_network_destroy>

0800a558 <ai_modelstrojnegaucenja_init>:
}

AI_API_ENTRY
ai_bool ai_modelstrojnegaucenja_init(
  ai_handle network, const ai_network_params* params)
{
 800a558:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a55c:	4607      	mov	r7, r0
 800a55e:	460e      	mov	r6, r1
  ai_network* net_ctx = ai_platform_network_init(network, params);
 800a560:	f002 ffc0 	bl	800d4e4 <ai_platform_network_init>
  if (!net_ctx) return false;
 800a564:	4604      	mov	r4, r0
 800a566:	2800      	cmp	r0, #0
 800a568:	d07c      	beq.n	800a664 <ai_modelstrojnegaucenja_init+0x10c>
  if (ai_platform_get_weights_map(g_modelstrojnegaucenja_weights_map, 1, params)) {
 800a56a:	f8df 814c 	ldr.w	r8, [pc, #332]	; 800a6b8 <ai_modelstrojnegaucenja_init+0x160>
 800a56e:	4632      	mov	r2, r6
 800a570:	2101      	movs	r1, #1
 800a572:	4640      	mov	r0, r8
 800a574:	f001 fc04 	bl	800bd80 <ai_platform_get_weights_map>
 800a578:	4605      	mov	r5, r0
 800a57a:	2800      	cmp	r0, #0
 800a57c:	d074      	beq.n	800a668 <ai_modelstrojnegaucenja_init+0x110>
    label_rho_array.format |= AI_FMT_FLAG_CONST;
 800a57e:	4a40      	ldr	r2, [pc, #256]	; (800a680 <ai_modelstrojnegaucenja_init+0x128>)
 800a580:	6813      	ldr	r3, [r2, #0]
 800a582:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a586:	6013      	str	r3, [r2, #0]
    label_rho_array.data = AI_PTR(g_modelstrojnegaucenja_weights_map[0] + 0);
 800a588:	f8d8 3000 	ldr.w	r3, [r8]
    label_rho_array.data_start = AI_PTR(g_modelstrojnegaucenja_weights_map[0] + 0);
 800a58c:	e9c2 3302 	strd	r3, r3, [r2, #8]
    label_classlabels_ints_array.format |= AI_FMT_FLAG_CONST;
 800a590:	4a3c      	ldr	r2, [pc, #240]	; (800a684 <ai_modelstrojnegaucenja_init+0x12c>)
 800a592:	6811      	ldr	r1, [r2, #0]
 800a594:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 800a598:	6011      	str	r1, [r2, #0]
    label_classlabels_ints_array.data = AI_PTR(g_modelstrojnegaucenja_weights_map[0] + 40);
 800a59a:	f103 0128 	add.w	r1, r3, #40	; 0x28
    label_classlabels_ints_array.data_start = AI_PTR(g_modelstrojnegaucenja_weights_map[0] + 40);
 800a59e:	e9c2 1102 	strd	r1, r1, [r2, #8]
    label_vectors_per_class_array.format |= AI_FMT_FLAG_CONST;
 800a5a2:	4a39      	ldr	r2, [pc, #228]	; (800a688 <ai_modelstrojnegaucenja_init+0x130>)
 800a5a4:	6811      	ldr	r1, [r2, #0]
 800a5a6:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 800a5aa:	6011      	str	r1, [r2, #0]
    label_vectors_per_class_array.data = AI_PTR(g_modelstrojnegaucenja_weights_map[0] + 48);
 800a5ac:	f103 0130 	add.w	r1, r3, #48	; 0x30
    label_vectors_per_class_array.data_start = AI_PTR(g_modelstrojnegaucenja_weights_map[0] + 48);
 800a5b0:	e9c2 1102 	strd	r1, r1, [r2, #8]
    label_prob_a_array.format |= AI_FMT_FLAG_CONST;
 800a5b4:	4a35      	ldr	r2, [pc, #212]	; (800a68c <ai_modelstrojnegaucenja_init+0x134>)
 800a5b6:	6811      	ldr	r1, [r2, #0]
 800a5b8:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 800a5bc:	6011      	str	r1, [r2, #0]
    label_prob_a_array.data = AI_PTR(g_modelstrojnegaucenja_weights_map[0] + 56);
 800a5be:	f103 0138 	add.w	r1, r3, #56	; 0x38
    label_prob_a_array.data_start = AI_PTR(g_modelstrojnegaucenja_weights_map[0] + 56);
 800a5c2:	e9c2 1102 	strd	r1, r1, [r2, #8]
    label_prob_b_array.format |= AI_FMT_FLAG_CONST;
 800a5c6:	4a32      	ldr	r2, [pc, #200]	; (800a690 <ai_modelstrojnegaucenja_init+0x138>)
 800a5c8:	6811      	ldr	r1, [r2, #0]
 800a5ca:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 800a5ce:	6011      	str	r1, [r2, #0]
    label_prob_b_array.data = AI_PTR(g_modelstrojnegaucenja_weights_map[0] + 96);
 800a5d0:	f103 0160 	add.w	r1, r3, #96	; 0x60
    label_prob_b_array.data_start = AI_PTR(g_modelstrojnegaucenja_weights_map[0] + 96);
 800a5d4:	e9c2 1102 	strd	r1, r1, [r2, #8]
    output_probability_classlabels_ints_array.format |= AI_FMT_FLAG_CONST;
 800a5d8:	4a2e      	ldr	r2, [pc, #184]	; (800a694 <ai_modelstrojnegaucenja_init+0x13c>)
 800a5da:	6811      	ldr	r1, [r2, #0]
 800a5dc:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 800a5e0:	6011      	str	r1, [r2, #0]
    output_probability_classlabels_ints_array.data = AI_PTR(g_modelstrojnegaucenja_weights_map[0] + 136);
 800a5e2:	f103 0188 	add.w	r1, r3, #136	; 0x88
    output_probability_classlabels_ints_array.data_start = AI_PTR(g_modelstrojnegaucenja_weights_map[0] + 136);
 800a5e6:	e9c2 1102 	strd	r1, r1, [r2, #8]
    label_coefficients_array.format |= AI_FMT_FLAG_CONST;
 800a5ea:	4a2b      	ldr	r2, [pc, #172]	; (800a698 <ai_modelstrojnegaucenja_init+0x140>)
 800a5ec:	6811      	ldr	r1, [r2, #0]
 800a5ee:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 800a5f2:	6011      	str	r1, [r2, #0]
    label_coefficients_array.data = AI_PTR(g_modelstrojnegaucenja_weights_map[0] + 144);
 800a5f4:	f103 0190 	add.w	r1, r3, #144	; 0x90
    label_support_vectors_array.data = AI_PTR(g_modelstrojnegaucenja_weights_map[0] + 10640);
 800a5f8:	f503 5326 	add.w	r3, r3, #10624	; 0x2980
    label_coefficients_array.data_start = AI_PTR(g_modelstrojnegaucenja_weights_map[0] + 144);
 800a5fc:	e9c2 1102 	strd	r1, r1, [r2, #8]
    label_support_vectors_array.format |= AI_FMT_FLAG_CONST;
 800a600:	4a26      	ldr	r2, [pc, #152]	; (800a69c <ai_modelstrojnegaucenja_init+0x144>)
    label_support_vectors_array.data = AI_PTR(g_modelstrojnegaucenja_weights_map[0] + 10640);
 800a602:	3310      	adds	r3, #16
    label_support_vectors_array.format |= AI_FMT_FLAG_CONST;
 800a604:	6811      	ldr	r1, [r2, #0]
 800a606:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 800a60a:	6011      	str	r1, [r2, #0]
    label_support_vectors_array.data_start = AI_PTR(g_modelstrojnegaucenja_weights_map[0] + 10640);
 800a60c:	e9c2 3302 	strd	r3, r3, [r2, #8]
  if (ai_platform_get_activations_map(g_modelstrojnegaucenja_activations_map, 1, params)) {
 800a610:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 800a6bc <ai_modelstrojnegaucenja_init+0x164>
 800a614:	4632      	mov	r2, r6
 800a616:	2101      	movs	r1, #1
 800a618:	4640      	mov	r0, r8
 800a61a:	f001 fc09 	bl	800be30 <ai_platform_get_activations_map>
 800a61e:	4606      	mov	r6, r0
 800a620:	b340      	cbz	r0, 800a674 <ai_modelstrojnegaucenja_init+0x11c>
    float_input_output_array.data = AI_PTR(g_modelstrojnegaucenja_activations_map[0] + 0);
 800a622:	f8d8 3000 	ldr.w	r3, [r8]
 800a626:	4a1e      	ldr	r2, [pc, #120]	; (800a6a0 <ai_modelstrojnegaucenja_init+0x148>)
    label_scratch0_array.data = AI_PTR(g_modelstrojnegaucenja_activations_map[0] + 64);
 800a628:	f103 0140 	add.w	r1, r3, #64	; 0x40
    float_input_output_array.data_start = AI_PTR(g_modelstrojnegaucenja_activations_map[0] + 0);
 800a62c:	e9c2 3302 	strd	r3, r3, [r2, #8]
    label_scratch0_array.data = AI_PTR(g_modelstrojnegaucenja_activations_map[0] + 64);
 800a630:	4a1c      	ldr	r2, [pc, #112]	; (800a6a4 <ai_modelstrojnegaucenja_init+0x14c>)
    label_scratch0_array.data_start = AI_PTR(g_modelstrojnegaucenja_activations_map[0] + 64);
 800a632:	e9c2 1102 	strd	r1, r1, [r2, #8]
    label_output0_array.data = AI_PTR(g_modelstrojnegaucenja_activations_map[0] + 2980);
 800a636:	f603 31a4 	addw	r1, r3, #2980	; 0xba4
 800a63a:	4a1b      	ldr	r2, [pc, #108]	; (800a6a8 <ai_modelstrojnegaucenja_init+0x150>)
    label_output0_array.data_start = AI_PTR(g_modelstrojnegaucenja_activations_map[0] + 2980);
 800a63c:	e9c2 1102 	strd	r1, r1, [r2, #8]
    label_output1_array.data = AI_PTR(g_modelstrojnegaucenja_activations_map[0] + 2984);
 800a640:	f603 31a8 	addw	r1, r3, #2984	; 0xba8
 800a644:	4a19      	ldr	r2, [pc, #100]	; (800a6ac <ai_modelstrojnegaucenja_init+0x154>)
    label_output1_array.data_start = AI_PTR(g_modelstrojnegaucenja_activations_map[0] + 2984);
 800a646:	e9c2 1102 	strd	r1, r1, [r2, #8]
    output_probability_output_array.data = AI_PTR(g_modelstrojnegaucenja_activations_map[0] + 0);
 800a64a:	4a19      	ldr	r2, [pc, #100]	; (800a6b0 <ai_modelstrojnegaucenja_init+0x158>)
    output_probability_output_array.data_start = AI_PTR(g_modelstrojnegaucenja_activations_map[0] + 0);
 800a64c:	e9c2 3302 	strd	r3, r3, [r2, #8]
    output_label_output_array.data = AI_PTR(g_modelstrojnegaucenja_activations_map[0] + 40);
 800a650:	3328      	adds	r3, #40	; 0x28
 800a652:	4a18      	ldr	r2, [pc, #96]	; (800a6b4 <ai_modelstrojnegaucenja_init+0x15c>)
    output_label_output_array.data_start = AI_PTR(g_modelstrojnegaucenja_activations_map[0] + 40);
 800a654:	e9c2 3302 	strd	r3, r3, [r2, #8]

  ai_bool ok = true;
  ok &= modelstrojnegaucenja_configure_weights(net_ctx, params);
  ok &= modelstrojnegaucenja_configure_activations(net_ctx, params);

  ok &= ai_platform_network_post_init(network);
 800a658:	4638      	mov	r0, r7
 800a65a:	f003 f8df 	bl	800d81c <ai_platform_network_post_init>
 800a65e:	4030      	ands	r0, r6
 800a660:	4028      	ands	r0, r5
 800a662:	b2c0      	uxtb	r0, r0

  return ok;
}
 800a664:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 800a668:	2212      	movs	r2, #18
 800a66a:	2130      	movs	r1, #48	; 0x30
 800a66c:	4620      	mov	r0, r4
 800a66e:	f002 f823 	bl	800c6b8 <ai_platform_network_set_error>
  return false;
 800a672:	e7cd      	b.n	800a610 <ai_modelstrojnegaucenja_init+0xb8>
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 800a674:	2213      	movs	r2, #19
 800a676:	2130      	movs	r1, #48	; 0x30
 800a678:	4620      	mov	r0, r4
 800a67a:	f002 f81d 	bl	800c6b8 <ai_platform_network_set_error>
  return false;
 800a67e:	e7eb      	b.n	800a658 <ai_modelstrojnegaucenja_init+0x100>
 800a680:	2400054c 	.word	0x2400054c
 800a684:	24000418 	.word	0x24000418
 800a688:	240005d0 	.word	0x240005d0
 800a68c:	240004f4 	.word	0x240004f4
 800a690:	24000520 	.word	0x24000520
 800a694:	24000648 	.word	0x24000648
 800a698:	24000444 	.word	0x24000444
 800a69c:	240005a4 	.word	0x240005a4
 800a6a0:	240003a0 	.word	0x240003a0
 800a6a4:	24000578 	.word	0x24000578
 800a6a8:	2400049c 	.word	0x2400049c
 800a6ac:	240004c8 	.word	0x240004c8
 800a6b0:	24000694 	.word	0x24000694
 800a6b4:	2400061c 	.word	0x2400061c
 800a6b8:	24002888 	.word	0x24002888
 800a6bc:	24002884 	.word	0x24002884

0800a6c0 <ai_modelstrojnegaucenja_run>:

AI_API_ENTRY
ai_i32 ai_modelstrojnegaucenja_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
  return ai_platform_network_process(network, input, output);
 800a6c0:	f003 b9d6 	b.w	800da70 <ai_platform_network_process>

0800a6c4 <ai_modelstrojnegaucenja_forward>:
}

AI_API_ENTRY
ai_i32 ai_modelstrojnegaucenja_forward(ai_handle network, const ai_buffer* input)
{
  return ai_platform_network_process(network, input, NULL);
 800a6c4:	2200      	movs	r2, #0
 800a6c6:	f003 b9d3 	b.w	800da70 <ai_platform_network_process>
	...

0800a6cc <ai_modelstrojnegaucenja_data_params_get>:
 * @ingroup modelstrojnegaucenja_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_modelstrojnegaucenja_data_params_get(ai_network_params* params)
{
 800a6cc:	b530      	push	{r4, r5, lr}
  if (!params) return false;
 800a6ce:	4603      	mov	r3, r0
{
 800a6d0:	b085      	sub	sp, #20
  if (!params) return false;
 800a6d2:	b170      	cbz	r0, 800a6f2 <ai_modelstrojnegaucenja_data_params_get+0x26>
  
  const ai_buffer_array map_activations = 
 800a6d4:	4c08      	ldr	r4, [pc, #32]	; (800a6f8 <ai_modelstrojnegaucenja_data_params_get+0x2c>)
 800a6d6:	466a      	mov	r2, sp
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_MODELSTROJNEGAUCENJA_DATA_ACTIVATIONS_COUNT, g_modelstrojnegaucenja_data_map_activations);
  
  const ai_buffer_array map_weights = 
 800a6d8:	ad02      	add	r5, sp, #8
  const ai_buffer_array map_activations = 
 800a6da:	e894 0003 	ldmia.w	r4, {r0, r1}
 800a6de:	e882 0003 	stmia.w	r2, {r0, r1}
  const ai_buffer_array map_weights = 
 800a6e2:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 800a6e6:	e885 0003 	stmia.w	r5, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_MODELSTROJNEGAUCENJA_DATA_WEIGHTS_COUNT, g_modelstrojnegaucenja_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 800a6ea:	4629      	mov	r1, r5
 800a6ec:	4618      	mov	r0, r3
 800a6ee:	f001 fbf7 	bl	800bee0 <ai_platform_bind_network_params>
}
 800a6f2:	b005      	add	sp, #20
 800a6f4:	bd30      	pop	{r4, r5, pc}
 800a6f6:	bf00      	nop
 800a6f8:	08016850 	.word	0x08016850

0800a6fc <pb_field_iter_begin>:

bool pb_field_iter_begin(pb_field_iter_t *iter, const pb_field_t *fields, void *dest_struct)
{
    iter->start = fields;
    iter->pos = fields;
    iter->required_field_index = 0;
 800a6fc:	2300      	movs	r3, #0
    iter->pos = fields;
 800a6fe:	e9c0 1100 	strd	r1, r1, [r0]
    iter->dest_struct = dest_struct;
 800a702:	e9c0 3202 	strd	r3, r2, [r0, #8]
    iter->pData = (char*)dest_struct + iter->pos->data_offset;
 800a706:	f8b1 3003 	ldrh.w	r3, [r1, #3]
 800a70a:	441a      	add	r2, r3
 800a70c:	6102      	str	r2, [r0, #16]
    iter->pSize = (char*)iter->pData + iter->pos->size_offset;
 800a70e:	f9b1 3005 	ldrsh.w	r3, [r1, #5]
 800a712:	441a      	add	r2, r3
 800a714:	6142      	str	r2, [r0, #20]
    
    return (iter->pos->tag != 0);
 800a716:	8808      	ldrh	r0, [r1, #0]
}
 800a718:	3800      	subs	r0, #0
 800a71a:	bf18      	it	ne
 800a71c:	2001      	movne	r0, #1
 800a71e:	4770      	bx	lr

0800a720 <pb_field_iter_next>:

bool pb_field_iter_next(pb_field_iter_t *iter)
{
    const pb_field_t *prev_field = iter->pos;
 800a720:	6841      	ldr	r1, [r0, #4]
{
 800a722:	4603      	mov	r3, r0

    if (prev_field->tag == 0)
 800a724:	880a      	ldrh	r2, [r1, #0]
{
 800a726:	b570      	push	{r4, r5, r6, lr}
    if (prev_field->tag == 0)
 800a728:	2a00      	cmp	r2, #0
 800a72a:	d038      	beq.n	800a79e <pb_field_iter_next+0x7e>
        /* Handle empty message types, where the first field is already the terminator.
         * In other cases, the iter->pos never points to the terminator. */
        return false;
    }
    
    iter->pos++;
 800a72c:	f101 020f 	add.w	r2, r1, #15
    
    if (iter->pos->tag == 0)
 800a730:	f8b1 400f 	ldrh.w	r4, [r1, #15]
    iter->pos++;
 800a734:	6042      	str	r2, [r0, #4]
    if (iter->pos->tag == 0)
 800a736:	b92c      	cbnz	r4, 800a744 <pb_field_iter_next+0x24>
    {
        /* Wrapped back to beginning, reinitialize */
        (void)pb_field_iter_begin(iter, iter->start, iter->dest_struct);
 800a738:	68c2      	ldr	r2, [r0, #12]
 800a73a:	6801      	ldr	r1, [r0, #0]
 800a73c:	f7ff ffde 	bl	800a6fc <pb_field_iter_begin>
        return false;
 800a740:	4620      	mov	r0, r4
    
        iter->pData = (char*)iter->pData + prev_size + iter->pos->data_offset;
        iter->pSize = (char*)iter->pData + iter->pos->size_offset;
        return true;
    }
}
 800a742:	bd70      	pop	{r4, r5, r6, pc}
        if (PB_HTYPE(prev_field->type) == PB_HTYPE_ONEOF &&
 800a744:	7888      	ldrb	r0, [r1, #2]
        size_t prev_size = prev_field->data_size;
 800a746:	f8b1 2007 	ldrh.w	r2, [r1, #7]
        if (PB_HTYPE(prev_field->type) == PB_HTYPE_ONEOF &&
 800a74a:	f000 0630 	and.w	r6, r0, #48	; 0x30
            iter->pos->data_offset == PB_SIZE_MAX)
 800a74e:	8a4c      	ldrh	r4, [r1, #18]
        if (PB_HTYPE(prev_field->type) == PB_HTYPE_ONEOF &&
 800a750:	2e30      	cmp	r6, #48	; 0x30
 800a752:	d10a      	bne.n	800a76a <pb_field_iter_next+0x4a>
 800a754:	7c4d      	ldrb	r5, [r1, #17]
 800a756:	f005 0530 	and.w	r5, r5, #48	; 0x30
 800a75a:	2d30      	cmp	r5, #48	; 0x30
 800a75c:	d119      	bne.n	800a792 <pb_field_iter_next+0x72>
            PB_HTYPE(iter->pos->type) == PB_HTYPE_ONEOF &&
 800a75e:	f64f 75ff 	movw	r5, #65535	; 0xffff
 800a762:	42ac      	cmp	r4, r5
 800a764:	d115      	bne.n	800a792 <pb_field_iter_next+0x72>
            return true;
 800a766:	2001      	movs	r0, #1
 800a768:	e7eb      	b.n	800a742 <pb_field_iter_next+0x22>
        else if (PB_ATYPE(prev_field->type) == PB_ATYPE_STATIC &&
 800a76a:	f000 05f0 	and.w	r5, r0, #240	; 0xf0
 800a76e:	2d20      	cmp	r5, #32
 800a770:	d10f      	bne.n	800a792 <pb_field_iter_next+0x72>
            prev_size *= prev_field->array_size;
 800a772:	f8b1 0009 	ldrh.w	r0, [r1, #9]
 800a776:	4342      	muls	r2, r0
        if (PB_HTYPE(prev_field->type) == PB_HTYPE_REQUIRED)
 800a778:	b916      	cbnz	r6, 800a780 <pb_field_iter_next+0x60>
            iter->required_field_index++;
 800a77a:	6898      	ldr	r0, [r3, #8]
 800a77c:	3001      	adds	r0, #1
 800a77e:	6098      	str	r0, [r3, #8]
        iter->pData = (char*)iter->pData + prev_size + iter->pos->data_offset;
 800a780:	4414      	add	r4, r2
 800a782:	691a      	ldr	r2, [r3, #16]
 800a784:	4422      	add	r2, r4
 800a786:	611a      	str	r2, [r3, #16]
        iter->pSize = (char*)iter->pData + iter->pos->size_offset;
 800a788:	f9b1 1014 	ldrsh.w	r1, [r1, #20]
 800a78c:	440a      	add	r2, r1
 800a78e:	615a      	str	r2, [r3, #20]
        return true;
 800a790:	e7e9      	b.n	800a766 <pb_field_iter_next+0x46>
        else if (PB_ATYPE(prev_field->type) == PB_ATYPE_POINTER)
 800a792:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
            prev_size = sizeof(void*);
 800a796:	2880      	cmp	r0, #128	; 0x80
 800a798:	bf08      	it	eq
 800a79a:	2204      	moveq	r2, #4
 800a79c:	e7ec      	b.n	800a778 <pb_field_iter_next+0x58>
        return false;
 800a79e:	4610      	mov	r0, r2
 800a7a0:	e7cf      	b.n	800a742 <pb_field_iter_next+0x22>

0800a7a2 <pb_field_iter_find>:

bool pb_field_iter_find(pb_field_iter_t *iter, uint32_t tag)
{
 800a7a2:	b570      	push	{r4, r5, r6, lr}
 800a7a4:	4604      	mov	r4, r0
 800a7a6:	460d      	mov	r5, r1
    const pb_field_t *start = iter->pos;
 800a7a8:	6846      	ldr	r6, [r0, #4]
    
    do {
        if (iter->pos->tag == tag &&
 800a7aa:	6863      	ldr	r3, [r4, #4]
 800a7ac:	881a      	ldrh	r2, [r3, #0]
 800a7ae:	42aa      	cmp	r2, r5
 800a7b0:	d104      	bne.n	800a7bc <pb_field_iter_find+0x1a>
 800a7b2:	789b      	ldrb	r3, [r3, #2]
 800a7b4:	f003 030f 	and.w	r3, r3, #15
 800a7b8:	2b08      	cmp	r3, #8
 800a7ba:	d107      	bne.n	800a7cc <pb_field_iter_find+0x2a>
        {
            /* Found the wanted field */
            return true;
        }
        
        (void)pb_field_iter_next(iter);
 800a7bc:	4620      	mov	r0, r4
 800a7be:	f7ff ffaf 	bl	800a720 <pb_field_iter_next>
    } while (iter->pos != start);
 800a7c2:	6863      	ldr	r3, [r4, #4]
 800a7c4:	42b3      	cmp	r3, r6
 800a7c6:	d1f0      	bne.n	800a7aa <pb_field_iter_find+0x8>
    
    /* Searched all the way back to start, and found nothing. */
    return false;
 800a7c8:	2000      	movs	r0, #0
}
 800a7ca:	bd70      	pop	{r4, r5, r6, pc}
            return true;
 800a7cc:	2001      	movs	r0, #1
 800a7ce:	e7fc      	b.n	800a7ca <pb_field_iter_find+0x28>

0800a7d0 <buf_read>:
/*******************************
 * pb_istream_t implementation *
 *******************************/

static bool checkreturn buf_read(pb_istream_t *stream, pb_byte_t *buf, size_t count)
{
 800a7d0:	b510      	push	{r4, lr}
    size_t i;
    const pb_byte_t *source = (const pb_byte_t*)stream->state;
 800a7d2:	6844      	ldr	r4, [r0, #4]
    stream->state = (pb_byte_t*)stream->state + count;
 800a7d4:	18a3      	adds	r3, r4, r2
 800a7d6:	6043      	str	r3, [r0, #4]
    
    if (buf != NULL)
 800a7d8:	b939      	cbnz	r1, 800a7ea <buf_read+0x1a>
        for (i = 0; i < count; i++)
            buf[i] = source[i];
    }
    
    return true;
}
 800a7da:	2001      	movs	r0, #1
 800a7dc:	bd10      	pop	{r4, pc}
            buf[i] = source[i];
 800a7de:	5ce0      	ldrb	r0, [r4, r3]
 800a7e0:	54c8      	strb	r0, [r1, r3]
        for (i = 0; i < count; i++)
 800a7e2:	3301      	adds	r3, #1
 800a7e4:	4293      	cmp	r3, r2
 800a7e6:	d1fa      	bne.n	800a7de <buf_read+0xe>
 800a7e8:	e7f7      	b.n	800a7da <buf_read+0xa>
 800a7ea:	2300      	movs	r3, #0
 800a7ec:	e7fa      	b.n	800a7e4 <buf_read+0x14>

0800a7ee <pb_field_set_to_default>:
    return false;
}

/* Initialize message fields to default values, recursively */
static void pb_field_set_to_default(pb_field_iter_t *iter)
{
 800a7ee:	b570      	push	{r4, r5, r6, lr}
    pb_type_t type;
    type = iter->pos->type;
 800a7f0:	6845      	ldr	r5, [r0, #4]
{
 800a7f2:	b086      	sub	sp, #24
 800a7f4:	4603      	mov	r3, r0
    type = iter->pos->type;
 800a7f6:	78aa      	ldrb	r2, [r5, #2]
    
    if (PB_LTYPE(type) == PB_LTYPE_EXTENSION)
 800a7f8:	f002 060f 	and.w	r6, r2, #15
 800a7fc:	2e08      	cmp	r6, #8
 800a7fe:	d11e      	bne.n	800a83e <pb_field_set_to_default+0x50>
    {
        pb_extension_t *ext = *(pb_extension_t* const *)iter->pData;
 800a800:	6903      	ldr	r3, [r0, #16]
        while (ext != NULL)
        {
            pb_field_iter_t ext_iter;
            ext->found = false;
 800a802:	2600      	movs	r6, #0
        pb_extension_t *ext = *(pb_extension_t* const *)iter->pData;
 800a804:	681c      	ldr	r4, [r3, #0]
        while (ext != NULL)
 800a806:	b90c      	cbnz	r4, 800a80c <pb_field_set_to_default+0x1e>
    }
    else if (PB_ATYPE(type) == PB_ATYPE_CALLBACK)
    {
        /* Don't overwrite callback */
    }
}
 800a808:	b006      	add	sp, #24
 800a80a:	bd70      	pop	{r4, r5, r6, pc}
    const pb_field_t *field = (const pb_field_t*)extension->type->arg;
 800a80c:	6823      	ldr	r3, [r4, #0]
    (void)pb_field_iter_begin(iter, field, extension->dest);
 800a80e:	4668      	mov	r0, sp
 800a810:	6862      	ldr	r2, [r4, #4]
    const pb_field_t *field = (const pb_field_t*)extension->type->arg;
 800a812:	689d      	ldr	r5, [r3, #8]
            ext->found = false;
 800a814:	7326      	strb	r6, [r4, #12]
    (void)pb_field_iter_begin(iter, field, extension->dest);
 800a816:	4629      	mov	r1, r5
 800a818:	f7ff ff70 	bl	800a6fc <pb_field_iter_begin>
    iter->pData = extension->dest;
 800a81c:	6863      	ldr	r3, [r4, #4]
            pb_field_set_to_default(&ext_iter);
 800a81e:	4668      	mov	r0, sp
    iter->pData = extension->dest;
 800a820:	9304      	str	r3, [sp, #16]
    iter->pSize = &extension->found;
 800a822:	f104 030c 	add.w	r3, r4, #12
 800a826:	9305      	str	r3, [sp, #20]
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 800a828:	78ab      	ldrb	r3, [r5, #2]
 800a82a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a82e:	2b80      	cmp	r3, #128	; 0x80
        iter->pData = &extension->dest;
 800a830:	bf04      	itt	eq
 800a832:	1d23      	addeq	r3, r4, #4
 800a834:	9304      	streq	r3, [sp, #16]
            pb_field_set_to_default(&ext_iter);
 800a836:	f7ff ffda 	bl	800a7ee <pb_field_set_to_default>
            ext = ext->next;
 800a83a:	68a4      	ldr	r4, [r4, #8]
 800a83c:	e7e3      	b.n	800a806 <pb_field_set_to_default+0x18>
    else if (PB_ATYPE(type) == PB_ATYPE_STATIC)
 800a83e:	f012 01c0 	ands.w	r1, r2, #192	; 0xc0
 800a842:	d127      	bne.n	800a894 <pb_field_set_to_default+0xa6>
        if (PB_HTYPE(type) == PB_HTYPE_OPTIONAL && iter->pSize != iter->pData)
 800a844:	f002 0030 	and.w	r0, r2, #48	; 0x30
 800a848:	2810      	cmp	r0, #16
 800a84a:	d110      	bne.n	800a86e <pb_field_set_to_default+0x80>
 800a84c:	e9d3 0204 	ldrd	r0, r2, [r3, #16]
 800a850:	4282      	cmp	r2, r0
 800a852:	d000      	beq.n	800a856 <pb_field_set_to_default+0x68>
            *(bool*)iter->pSize = false;
 800a854:	7011      	strb	r1, [r2, #0]
            if (PB_LTYPE(iter->pos->type) == PB_LTYPE_SUBMESSAGE)
 800a856:	2e07      	cmp	r6, #7
                pb_message_set_to_defaults((const pb_field_t *) iter->pos->ptr, iter->pData);
 800a858:	f8d5 400b 	ldr.w	r4, [r5, #11]
        pb_extension_t *ext = *(pb_extension_t* const *)iter->pData;
 800a85c:	6918      	ldr	r0, [r3, #16]
            if (PB_LTYPE(iter->pos->type) == PB_LTYPE_SUBMESSAGE)
 800a85e:	d10b      	bne.n	800a878 <pb_field_set_to_default+0x8a>
                pb_message_set_to_defaults((const pb_field_t *) iter->pos->ptr, iter->pData);
 800a860:	4601      	mov	r1, r0
 800a862:	4620      	mov	r0, r4
}
 800a864:	b006      	add	sp, #24
 800a866:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                pb_message_set_to_defaults((const pb_field_t *) iter->pos->ptr, iter->pData);
 800a86a:	f000 b81b 	b.w	800a8a4 <pb_message_set_to_defaults>
        else if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 800a86e:	0690      	lsls	r0, r2, #26
 800a870:	d5f1      	bpl.n	800a856 <pb_field_set_to_default+0x68>
            *(pb_size_t*)iter->pSize = 0;
 800a872:	695b      	ldr	r3, [r3, #20]
 800a874:	8019      	strh	r1, [r3, #0]
}
 800a876:	e7c7      	b.n	800a808 <pb_field_set_to_default+0x1a>
                memcpy(iter->pData, iter->pos->ptr, iter->pos->data_size);
 800a878:	f8b5 2007 	ldrh.w	r2, [r5, #7]
 800a87c:	4621      	mov	r1, r4
            else if (iter->pos->ptr != NULL)
 800a87e:	b124      	cbz	r4, 800a88a <pb_field_set_to_default+0x9c>
}
 800a880:	b006      	add	sp, #24
 800a882:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                memcpy(iter->pData, iter->pos->ptr, iter->pos->data_size);
 800a886:	f008 bb8b 	b.w	8012fa0 <memcpy>
}
 800a88a:	b006      	add	sp, #24
 800a88c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                memset(iter->pData, 0, iter->pos->data_size);
 800a890:	f008 bb94 	b.w	8012fbc <memset>
    else if (PB_ATYPE(type) == PB_ATYPE_POINTER)
 800a894:	2980      	cmp	r1, #128	; 0x80
 800a896:	d1b7      	bne.n	800a808 <pb_field_set_to_default+0x1a>
        *(void**)iter->pData = NULL;
 800a898:	6900      	ldr	r0, [r0, #16]
 800a89a:	2100      	movs	r1, #0
        if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 800a89c:	0692      	lsls	r2, r2, #26
        *(void**)iter->pData = NULL;
 800a89e:	6001      	str	r1, [r0, #0]
        if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 800a8a0:	d5b2      	bpl.n	800a808 <pb_field_set_to_default+0x1a>
 800a8a2:	e7e6      	b.n	800a872 <pb_field_set_to_default+0x84>

0800a8a4 <pb_message_set_to_defaults>:

static void pb_message_set_to_defaults(const pb_field_t fields[], void *dest_struct)
{
 800a8a4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800a8a6:	460a      	mov	r2, r1
    pb_field_iter_t iter;

    if (!pb_field_iter_begin(&iter, fields, dest_struct))
 800a8a8:	4601      	mov	r1, r0
 800a8aa:	4668      	mov	r0, sp
 800a8ac:	f7ff ff26 	bl	800a6fc <pb_field_iter_begin>
 800a8b0:	b130      	cbz	r0, 800a8c0 <pb_message_set_to_defaults+0x1c>
        return; /* Empty message type */
    
    do
    {
        pb_field_set_to_default(&iter);
 800a8b2:	4668      	mov	r0, sp
 800a8b4:	f7ff ff9b 	bl	800a7ee <pb_field_set_to_default>
    } while (pb_field_iter_next(&iter));
 800a8b8:	4668      	mov	r0, sp
 800a8ba:	f7ff ff31 	bl	800a720 <pb_field_iter_next>
 800a8be:	e7f7      	b.n	800a8b0 <pb_message_set_to_defaults+0xc>
}
 800a8c0:	b007      	add	sp, #28
 800a8c2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800a8c8 <pb_readbyte>:
    if (stream->bytes_left == 0)
 800a8c8:	6883      	ldr	r3, [r0, #8]
{
 800a8ca:	b510      	push	{r4, lr}
 800a8cc:	4604      	mov	r4, r0
    if (stream->bytes_left == 0)
 800a8ce:	b93b      	cbnz	r3, 800a8e0 <pb_readbyte+0x18>
        PB_RETURN_ERROR(stream, "end-of-stream");
 800a8d0:	68c2      	ldr	r2, [r0, #12]
 800a8d2:	490b      	ldr	r1, [pc, #44]	; (800a900 <pb_readbyte+0x38>)
 800a8d4:	2a00      	cmp	r2, #0
 800a8d6:	bf08      	it	eq
 800a8d8:	460a      	moveq	r2, r1
 800a8da:	60c2      	str	r2, [r0, #12]
 800a8dc:	4618      	mov	r0, r3
}
 800a8de:	bd10      	pop	{r4, pc}
    if (!stream->callback(stream, buf, 1))
 800a8e0:	6803      	ldr	r3, [r0, #0]
 800a8e2:	2201      	movs	r2, #1
 800a8e4:	4798      	blx	r3
 800a8e6:	b930      	cbnz	r0, 800a8f6 <pb_readbyte+0x2e>
        PB_RETURN_ERROR(stream, "io error");
 800a8e8:	68e3      	ldr	r3, [r4, #12]
 800a8ea:	4a06      	ldr	r2, [pc, #24]	; (800a904 <pb_readbyte+0x3c>)
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	bf08      	it	eq
 800a8f0:	4613      	moveq	r3, r2
 800a8f2:	60e3      	str	r3, [r4, #12]
 800a8f4:	e7f3      	b.n	800a8de <pb_readbyte+0x16>
    stream->bytes_left--;
 800a8f6:	68a3      	ldr	r3, [r4, #8]
 800a8f8:	3b01      	subs	r3, #1
 800a8fa:	60a3      	str	r3, [r4, #8]
    return true;    
 800a8fc:	e7ef      	b.n	800a8de <pb_readbyte+0x16>
 800a8fe:	bf00      	nop
 800a900:	080169b8 	.word	0x080169b8
 800a904:	080169c6 	.word	0x080169c6

0800a908 <pb_decode_varint32_eof>:
{
 800a908:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800a90c:	4688      	mov	r8, r1
    if (!pb_readbyte(stream, &byte))
 800a90e:	f10d 0107 	add.w	r1, sp, #7
{
 800a912:	4605      	mov	r5, r0
 800a914:	4614      	mov	r4, r2
    if (!pb_readbyte(stream, &byte))
 800a916:	f7ff ffd7 	bl	800a8c8 <pb_readbyte>
 800a91a:	4606      	mov	r6, r0
 800a91c:	b958      	cbnz	r0, 800a936 <pb_decode_varint32_eof+0x2e>
        if (stream->bytes_left == 0)
 800a91e:	68ab      	ldr	r3, [r5, #8]
 800a920:	b10b      	cbz	r3, 800a926 <pb_decode_varint32_eof+0x1e>
                    PB_RETURN_ERROR(stream, "varint overflow");
 800a922:	2600      	movs	r6, #0
 800a924:	e003      	b.n	800a92e <pb_decode_varint32_eof+0x26>
            if (eof)
 800a926:	2c00      	cmp	r4, #0
 800a928:	d0fb      	beq.n	800a922 <pb_decode_varint32_eof+0x1a>
                *eof = true;
 800a92a:	2301      	movs	r3, #1
 800a92c:	7023      	strb	r3, [r4, #0]
}
 800a92e:	4630      	mov	r0, r6
 800a930:	b002      	add	sp, #8
 800a932:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((byte & 0x80) == 0)
 800a936:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 800a93a:	f89d 4007 	ldrb.w	r4, [sp, #7]
 800a93e:	2b00      	cmp	r3, #0
 800a940:	da2a      	bge.n	800a998 <pb_decode_varint32_eof+0x90>
        result = byte & 0x7F;
 800a942:	f004 047f 	and.w	r4, r4, #127	; 0x7f
        uint_fast8_t bitpos = 7;
 800a946:	2707      	movs	r7, #7
            if (!pb_readbyte(stream, &byte))
 800a948:	f10d 0107 	add.w	r1, sp, #7
 800a94c:	4628      	mov	r0, r5
 800a94e:	f7ff ffbb 	bl	800a8c8 <pb_readbyte>
 800a952:	2800      	cmp	r0, #0
 800a954:	d0e5      	beq.n	800a922 <pb_decode_varint32_eof+0x1a>
                if ((byte & 0x7F) != 0x00 && ((result >> 31) == 0 || byte != sign_extension))
 800a956:	f89d 3007 	ldrb.w	r3, [sp, #7]
            if (bitpos >= 32)
 800a95a:	2f1f      	cmp	r7, #31
 800a95c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a960:	d90f      	bls.n	800a982 <pb_decode_varint32_eof+0x7a>
                uint8_t sign_extension = (bitpos < 63) ? 0xFF : 0x01;
 800a962:	2f3f      	cmp	r7, #63	; 0x3f
 800a964:	bf34      	ite	cc
 800a966:	21ff      	movcc	r1, #255	; 0xff
 800a968:	2101      	movcs	r1, #1
                if ((byte & 0x7F) != 0x00 && ((result >> 31) == 0 || byte != sign_extension))
 800a96a:	b162      	cbz	r2, 800a986 <pb_decode_varint32_eof+0x7e>
 800a96c:	2c00      	cmp	r4, #0
 800a96e:	da01      	bge.n	800a974 <pb_decode_varint32_eof+0x6c>
 800a970:	4299      	cmp	r1, r3
 800a972:	d008      	beq.n	800a986 <pb_decode_varint32_eof+0x7e>
                    PB_RETURN_ERROR(stream, "varint overflow");
 800a974:	68eb      	ldr	r3, [r5, #12]
 800a976:	4a0a      	ldr	r2, [pc, #40]	; (800a9a0 <pb_decode_varint32_eof+0x98>)
 800a978:	2b00      	cmp	r3, #0
 800a97a:	bf08      	it	eq
 800a97c:	4613      	moveq	r3, r2
 800a97e:	60eb      	str	r3, [r5, #12]
 800a980:	e7cf      	b.n	800a922 <pb_decode_varint32_eof+0x1a>
                result |= (uint32_t)(byte & 0x7F) << bitpos;
 800a982:	40ba      	lsls	r2, r7
 800a984:	4314      	orrs	r4, r2
        } while (byte & 0x80);
 800a986:	061a      	lsls	r2, r3, #24
            bitpos = (uint_fast8_t)(bitpos + 7);
 800a988:	f107 0707 	add.w	r7, r7, #7
        } while (byte & 0x80);
 800a98c:	d4dc      	bmi.n	800a948 <pb_decode_varint32_eof+0x40>
        if (bitpos == 35 && (byte & 0x70) != 0)
 800a98e:	2f23      	cmp	r7, #35	; 0x23
 800a990:	d102      	bne.n	800a998 <pb_decode_varint32_eof+0x90>
 800a992:	f013 0f70 	tst.w	r3, #112	; 0x70
 800a996:	d1ed      	bne.n	800a974 <pb_decode_varint32_eof+0x6c>
   *dest = result;
 800a998:	f8c8 4000 	str.w	r4, [r8]
   return true;
 800a99c:	e7c7      	b.n	800a92e <pb_decode_varint32_eof+0x26>
 800a99e:	bf00      	nop
 800a9a0:	080169cf 	.word	0x080169cf

0800a9a4 <pb_read>:
{
 800a9a4:	b530      	push	{r4, r5, lr}
 800a9a6:	4604      	mov	r4, r0
 800a9a8:	b085      	sub	sp, #20
 800a9aa:	4615      	mov	r5, r2
	if (buf == NULL && stream->callback != buf_read)
 800a9ac:	b9a9      	cbnz	r1, 800a9da <pb_read+0x36>
 800a9ae:	6802      	ldr	r2, [r0, #0]
 800a9b0:	4b17      	ldr	r3, [pc, #92]	; (800aa10 <pb_read+0x6c>)
 800a9b2:	429a      	cmp	r2, r3
 800a9b4:	d011      	beq.n	800a9da <pb_read+0x36>
		while (count > 16)
 800a9b6:	2d10      	cmp	r5, #16
 800a9b8:	d806      	bhi.n	800a9c8 <pb_read+0x24>
		return pb_read(stream, tmp, count);
 800a9ba:	462a      	mov	r2, r5
 800a9bc:	4669      	mov	r1, sp
 800a9be:	4620      	mov	r0, r4
 800a9c0:	f7ff fff0 	bl	800a9a4 <pb_read>
}
 800a9c4:	b005      	add	sp, #20
 800a9c6:	bd30      	pop	{r4, r5, pc}
			if (!pb_read(stream, tmp, 16))
 800a9c8:	2210      	movs	r2, #16
 800a9ca:	4669      	mov	r1, sp
 800a9cc:	4620      	mov	r0, r4
 800a9ce:	f7ff ffe9 	bl	800a9a4 <pb_read>
 800a9d2:	2800      	cmp	r0, #0
 800a9d4:	d0f6      	beq.n	800a9c4 <pb_read+0x20>
			count -= 16;
 800a9d6:	3d10      	subs	r5, #16
 800a9d8:	e7ed      	b.n	800a9b6 <pb_read+0x12>
    if (stream->bytes_left < count)
 800a9da:	68a3      	ldr	r3, [r4, #8]
 800a9dc:	42ab      	cmp	r3, r5
 800a9de:	d207      	bcs.n	800a9f0 <pb_read+0x4c>
        PB_RETURN_ERROR(stream, "end-of-stream");
 800a9e0:	68e3      	ldr	r3, [r4, #12]
 800a9e2:	2000      	movs	r0, #0
 800a9e4:	4a0b      	ldr	r2, [pc, #44]	; (800aa14 <pb_read+0x70>)
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	bf08      	it	eq
 800a9ea:	4613      	moveq	r3, r2
 800a9ec:	60e3      	str	r3, [r4, #12]
 800a9ee:	e7e9      	b.n	800a9c4 <pb_read+0x20>
    if (!stream->callback(stream, buf, count))
 800a9f0:	6823      	ldr	r3, [r4, #0]
 800a9f2:	462a      	mov	r2, r5
 800a9f4:	4620      	mov	r0, r4
 800a9f6:	4798      	blx	r3
 800a9f8:	b930      	cbnz	r0, 800aa08 <pb_read+0x64>
        PB_RETURN_ERROR(stream, "io error");
 800a9fa:	68e3      	ldr	r3, [r4, #12]
 800a9fc:	4a06      	ldr	r2, [pc, #24]	; (800aa18 <pb_read+0x74>)
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	bf08      	it	eq
 800aa02:	4613      	moveq	r3, r2
 800aa04:	60e3      	str	r3, [r4, #12]
 800aa06:	e7dd      	b.n	800a9c4 <pb_read+0x20>
    stream->bytes_left -= count;
 800aa08:	68a2      	ldr	r2, [r4, #8]
 800aa0a:	1b52      	subs	r2, r2, r5
 800aa0c:	60a2      	str	r2, [r4, #8]
    return true;
 800aa0e:	e7d9      	b.n	800a9c4 <pb_read+0x20>
 800aa10:	0800a7d1 	.word	0x0800a7d1
 800aa14:	080169b8 	.word	0x080169b8
 800aa18:	080169c6 	.word	0x080169c6

0800aa1c <pb_decode_varint32>:
    return pb_decode_varint32_eof(stream, dest, NULL);
 800aa1c:	2200      	movs	r2, #0
 800aa1e:	f7ff bf73 	b.w	800a908 <pb_decode_varint32_eof>
	...

0800aa24 <pb_dec_fixed_length_bytes>:
        return false;
    return status;
}

static bool checkreturn pb_dec_fixed_length_bytes(pb_istream_t *stream, const pb_field_t *field, void *dest)
{
 800aa24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aa26:	460f      	mov	r7, r1
    uint32_t size;

    if (!pb_decode_varint32(stream, &size))
 800aa28:	a901      	add	r1, sp, #4
{
 800aa2a:	4605      	mov	r5, r0
 800aa2c:	4616      	mov	r6, r2
    if (!pb_decode_varint32(stream, &size))
 800aa2e:	f7ff fff5 	bl	800aa1c <pb_decode_varint32>
 800aa32:	4604      	mov	r4, r0
 800aa34:	b188      	cbz	r0, 800aa5a <pb_dec_fixed_length_bytes+0x36>
        return false;

    if (size > PB_SIZE_MAX)
 800aa36:	9901      	ldr	r1, [sp, #4]
 800aa38:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 800aa3c:	d307      	bcc.n	800aa4e <pb_dec_fixed_length_bytes+0x2a>
        PB_RETURN_ERROR(stream, "bytes overflow");
 800aa3e:	68eb      	ldr	r3, [r5, #12]
 800aa40:	4a0d      	ldr	r2, [pc, #52]	; (800aa78 <pb_dec_fixed_length_bytes+0x54>)
        memset(dest, 0, field->data_size);
        return true;
    }

    if (size != field->data_size)
        PB_RETURN_ERROR(stream, "incorrect fixed length bytes size");
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	bf08      	it	eq
 800aa46:	4613      	moveq	r3, r2
 800aa48:	2400      	movs	r4, #0
 800aa4a:	60eb      	str	r3, [r5, #12]
 800aa4c:	e005      	b.n	800aa5a <pb_dec_fixed_length_bytes+0x36>
        memset(dest, 0, field->data_size);
 800aa4e:	f8b7 2007 	ldrh.w	r2, [r7, #7]
    if (size == 0)
 800aa52:	b929      	cbnz	r1, 800aa60 <pb_dec_fixed_length_bytes+0x3c>
        memset(dest, 0, field->data_size);
 800aa54:	4630      	mov	r0, r6
 800aa56:	f008 fab1 	bl	8012fbc <memset>

    return pb_read(stream, (pb_byte_t*)dest, field->data_size);
}
 800aa5a:	4620      	mov	r0, r4
 800aa5c:	b003      	add	sp, #12
 800aa5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (size != field->data_size)
 800aa60:	4291      	cmp	r1, r2
 800aa62:	d002      	beq.n	800aa6a <pb_dec_fixed_length_bytes+0x46>
        PB_RETURN_ERROR(stream, "incorrect fixed length bytes size");
 800aa64:	68eb      	ldr	r3, [r5, #12]
 800aa66:	4a05      	ldr	r2, [pc, #20]	; (800aa7c <pb_dec_fixed_length_bytes+0x58>)
 800aa68:	e7eb      	b.n	800aa42 <pb_dec_fixed_length_bytes+0x1e>
    return pb_read(stream, (pb_byte_t*)dest, field->data_size);
 800aa6a:	460a      	mov	r2, r1
 800aa6c:	4628      	mov	r0, r5
 800aa6e:	4631      	mov	r1, r6
 800aa70:	f7ff ff98 	bl	800a9a4 <pb_read>
 800aa74:	4604      	mov	r4, r0
 800aa76:	e7f0      	b.n	800aa5a <pb_dec_fixed_length_bytes+0x36>
 800aa78:	080169df 	.word	0x080169df
 800aa7c:	080169ee 	.word	0x080169ee

0800aa80 <pb_dec_string>:
{
 800aa80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aa82:	460f      	mov	r7, r1
    if (!pb_decode_varint32(stream, &size))
 800aa84:	a901      	add	r1, sp, #4
{
 800aa86:	4604      	mov	r4, r0
 800aa88:	4615      	mov	r5, r2
    if (!pb_decode_varint32(stream, &size))
 800aa8a:	f7ff ffc7 	bl	800aa1c <pb_decode_varint32>
 800aa8e:	b190      	cbz	r0, 800aab6 <pb_dec_string+0x36>
    alloc_size = size + 1;
 800aa90:	9a01      	ldr	r2, [sp, #4]
 800aa92:	2600      	movs	r6, #0
 800aa94:	1c51      	adds	r1, r2, #1
 800aa96:	d207      	bcs.n	800aaa8 <pb_dec_string+0x28>
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 800aa98:	78bb      	ldrb	r3, [r7, #2]
 800aa9a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800aa9e:	2b80      	cmp	r3, #128	; 0x80
 800aaa0:	d10b      	bne.n	800aaba <pb_dec_string+0x3a>
        PB_RETURN_ERROR(stream, "no malloc support");
 800aaa2:	68e3      	ldr	r3, [r4, #12]
 800aaa4:	4a0c      	ldr	r2, [pc, #48]	; (800aad8 <pb_dec_string+0x58>)
 800aaa6:	e001      	b.n	800aaac <pb_dec_string+0x2c>
        PB_RETURN_ERROR(stream, "size too large");
 800aaa8:	68e3      	ldr	r3, [r4, #12]
 800aaaa:	4a0c      	ldr	r2, [pc, #48]	; (800aadc <pb_dec_string+0x5c>)
        PB_RETURN_ERROR(stream, "no malloc support");
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	bf08      	it	eq
 800aab0:	4613      	moveq	r3, r2
 800aab2:	4630      	mov	r0, r6
 800aab4:	60e3      	str	r3, [r4, #12]
}
 800aab6:	b003      	add	sp, #12
 800aab8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (alloc_size > field->data_size)
 800aaba:	f8b7 3007 	ldrh.w	r3, [r7, #7]
 800aabe:	428b      	cmp	r3, r1
 800aac0:	d202      	bcs.n	800aac8 <pb_dec_string+0x48>
            PB_RETURN_ERROR(stream, "string overflow");
 800aac2:	68e3      	ldr	r3, [r4, #12]
 800aac4:	4a06      	ldr	r2, [pc, #24]	; (800aae0 <pb_dec_string+0x60>)
 800aac6:	e7f1      	b.n	800aaac <pb_dec_string+0x2c>
    status = pb_read(stream, (pb_byte_t*)dest, size);
 800aac8:	4629      	mov	r1, r5
 800aaca:	4620      	mov	r0, r4
 800aacc:	f7ff ff6a 	bl	800a9a4 <pb_read>
    *((pb_byte_t*)dest + size) = 0;
 800aad0:	9b01      	ldr	r3, [sp, #4]
 800aad2:	54ee      	strb	r6, [r5, r3]
    return status;
 800aad4:	e7ef      	b.n	800aab6 <pb_dec_string+0x36>
 800aad6:	bf00      	nop
 800aad8:	08016a1f 	.word	0x08016a1f
 800aadc:	08016a10 	.word	0x08016a10
 800aae0:	08016a31 	.word	0x08016a31

0800aae4 <pb_dec_bytes>:
{
 800aae4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800aae6:	460e      	mov	r6, r1
    if (!pb_decode_varint32(stream, &size))
 800aae8:	a901      	add	r1, sp, #4
{
 800aaea:	4604      	mov	r4, r0
 800aaec:	4615      	mov	r5, r2
    if (!pb_decode_varint32(stream, &size))
 800aaee:	f7ff ff95 	bl	800aa1c <pb_decode_varint32>
 800aaf2:	b198      	cbz	r0, 800ab1c <pb_dec_bytes+0x38>
    if (size > PB_SIZE_MAX)
 800aaf4:	9a01      	ldr	r2, [sp, #4]
 800aaf6:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800aafa:	d302      	bcc.n	800ab02 <pb_dec_bytes+0x1e>
            PB_RETURN_ERROR(stream, "bytes overflow");
 800aafc:	68e3      	ldr	r3, [r4, #12]
 800aafe:	4a0e      	ldr	r2, [pc, #56]	; (800ab38 <pb_dec_bytes+0x54>)
 800ab00:	e007      	b.n	800ab12 <pb_dec_bytes+0x2e>
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 800ab02:	78b3      	ldrb	r3, [r6, #2]
    alloc_size = PB_BYTES_ARRAY_T_ALLOCSIZE(size);
 800ab04:	1c91      	adds	r1, r2, #2
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 800ab06:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800ab0a:	2b80      	cmp	r3, #128	; 0x80
 800ab0c:	d108      	bne.n	800ab20 <pb_dec_bytes+0x3c>
        PB_RETURN_ERROR(stream, "no malloc support");
 800ab0e:	68e3      	ldr	r3, [r4, #12]
 800ab10:	4a0a      	ldr	r2, [pc, #40]	; (800ab3c <pb_dec_bytes+0x58>)
            PB_RETURN_ERROR(stream, "bytes overflow");
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	bf08      	it	eq
 800ab16:	4613      	moveq	r3, r2
 800ab18:	2000      	movs	r0, #0
 800ab1a:	60e3      	str	r3, [r4, #12]
}
 800ab1c:	b002      	add	sp, #8
 800ab1e:	bd70      	pop	{r4, r5, r6, pc}
        if (alloc_size > field->data_size)
 800ab20:	f8b6 3007 	ldrh.w	r3, [r6, #7]
 800ab24:	428b      	cmp	r3, r1
 800ab26:	d3e9      	bcc.n	800aafc <pb_dec_bytes+0x18>
    bdest->size = (pb_size_t)size;
 800ab28:	4629      	mov	r1, r5
    return pb_read(stream, bdest->bytes, size);
 800ab2a:	4620      	mov	r0, r4
    bdest->size = (pb_size_t)size;
 800ab2c:	f821 2b02 	strh.w	r2, [r1], #2
    return pb_read(stream, bdest->bytes, size);
 800ab30:	f7ff ff38 	bl	800a9a4 <pb_read>
 800ab34:	e7f2      	b.n	800ab1c <pb_dec_bytes+0x38>
 800ab36:	bf00      	nop
 800ab38:	080169df 	.word	0x080169df
 800ab3c:	08016a1f 	.word	0x08016a1f

0800ab40 <pb_decode_varint>:
{
 800ab40:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    uint64_t result = 0;
 800ab44:	2500      	movs	r5, #0
{
 800ab46:	4606      	mov	r6, r0
 800ab48:	460f      	mov	r7, r1
    uint64_t result = 0;
 800ab4a:	46a8      	mov	r8, r5
    uint_fast8_t bitpos = 0;
 800ab4c:	462c      	mov	r4, r5
        if (!pb_readbyte(stream, &byte))
 800ab4e:	f10d 0107 	add.w	r1, sp, #7
 800ab52:	4630      	mov	r0, r6
 800ab54:	f7ff feb8 	bl	800a8c8 <pb_readbyte>
 800ab58:	b320      	cbz	r0, 800aba4 <pb_decode_varint+0x64>
        result |= (uint64_t)(byte & 0x7F) << bitpos;
 800ab5a:	f89d c007 	ldrb.w	ip, [sp, #7]
 800ab5e:	f1a4 0320 	sub.w	r3, r4, #32
 800ab62:	f1c4 0120 	rsb	r1, r4, #32
 800ab66:	f00c 027f 	and.w	r2, ip, #127	; 0x7f
    } while (byte & 0x80);
 800ab6a:	f01c 0f80 	tst.w	ip, #128	; 0x80
        result |= (uint64_t)(byte & 0x7F) << bitpos;
 800ab6e:	fa02 f303 	lsl.w	r3, r2, r3
 800ab72:	fa22 f101 	lsr.w	r1, r2, r1
 800ab76:	fa02 f204 	lsl.w	r2, r2, r4
        bitpos = (uint_fast8_t)(bitpos + 7);
 800ab7a:	f104 0407 	add.w	r4, r4, #7
        result |= (uint64_t)(byte & 0x7F) << bitpos;
 800ab7e:	ea43 0301 	orr.w	r3, r3, r1
 800ab82:	ea45 0502 	orr.w	r5, r5, r2
 800ab86:	ea43 0808 	orr.w	r8, r3, r8
    } while (byte & 0x80);
 800ab8a:	d102      	bne.n	800ab92 <pb_decode_varint+0x52>
    *dest = result;
 800ab8c:	e9c7 5800 	strd	r5, r8, [r7]
    return true;
 800ab90:	e008      	b.n	800aba4 <pb_decode_varint+0x64>
        if (bitpos >= 64)
 800ab92:	2c46      	cmp	r4, #70	; 0x46
 800ab94:	d1db      	bne.n	800ab4e <pb_decode_varint+0xe>
            PB_RETURN_ERROR(stream, "varint overflow");
 800ab96:	68f3      	ldr	r3, [r6, #12]
 800ab98:	2000      	movs	r0, #0
 800ab9a:	4a04      	ldr	r2, [pc, #16]	; (800abac <pb_decode_varint+0x6c>)
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	bf08      	it	eq
 800aba0:	4613      	moveq	r3, r2
 800aba2:	60f3      	str	r3, [r6, #12]
}
 800aba4:	b002      	add	sp, #8
 800aba6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800abaa:	bf00      	nop
 800abac:	080169cf 	.word	0x080169cf

0800abb0 <pb_dec_uvarint>:
{
 800abb0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800abb2:	460e      	mov	r6, r1
    if (!pb_decode_varint(stream, &value))
 800abb4:	4669      	mov	r1, sp
{
 800abb6:	4604      	mov	r4, r0
 800abb8:	4615      	mov	r5, r2
    if (!pb_decode_varint(stream, &value))
 800abba:	f7ff ffc1 	bl	800ab40 <pb_decode_varint>
 800abbe:	b138      	cbz	r0, 800abd0 <pb_dec_uvarint+0x20>
    if (field->data_size == sizeof(pb_uint64_t))
 800abc0:	f8b6 3007 	ldrh.w	r3, [r6, #7]
 800abc4:	2b08      	cmp	r3, #8
 800abc6:	d105      	bne.n	800abd4 <pb_dec_uvarint+0x24>
        clamped = *(pb_uint64_t*)dest = value;
 800abc8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800abcc:	e9c5 2300 	strd	r2, r3, [r5]
}
 800abd0:	b002      	add	sp, #8
 800abd2:	bd70      	pop	{r4, r5, r6, pc}
    else if (field->data_size == sizeof(uint32_t))
 800abd4:	2b04      	cmp	r3, #4
 800abd6:	d10b      	bne.n	800abf0 <pb_dec_uvarint+0x40>
        clamped = *(uint32_t*)dest = (uint32_t)value;
 800abd8:	9b00      	ldr	r3, [sp, #0]
 800abda:	602b      	str	r3, [r5, #0]
 800abdc:	2200      	movs	r2, #0
    if (clamped != value)
 800abde:	e9dd 5100 	ldrd	r5, r1, [sp]
 800abe2:	4291      	cmp	r1, r2
 800abe4:	bf08      	it	eq
 800abe6:	429d      	cmpeq	r5, r3
 800abe8:	d0f2      	beq.n	800abd0 <pb_dec_uvarint+0x20>
        PB_RETURN_ERROR(stream, "integer too large");
 800abea:	68e3      	ldr	r3, [r4, #12]
 800abec:	4a0b      	ldr	r2, [pc, #44]	; (800ac1c <pb_dec_uvarint+0x6c>)
 800abee:	e00e      	b.n	800ac0e <pb_dec_uvarint+0x5e>
    else if (field->data_size == sizeof(uint_least16_t))
 800abf0:	2b02      	cmp	r3, #2
 800abf2:	d103      	bne.n	800abfc <pb_dec_uvarint+0x4c>
        clamped = *(uint_least16_t*)dest = (uint_least16_t)value;
 800abf4:	9b00      	ldr	r3, [sp, #0]
 800abf6:	802b      	strh	r3, [r5, #0]
 800abf8:	b29b      	uxth	r3, r3
 800abfa:	e7ef      	b.n	800abdc <pb_dec_uvarint+0x2c>
    else if (field->data_size == sizeof(uint_least8_t))
 800abfc:	2b01      	cmp	r3, #1
 800abfe:	d104      	bne.n	800ac0a <pb_dec_uvarint+0x5a>
        clamped = *(uint_least8_t*)dest = (uint_least8_t)value;
 800ac00:	9b00      	ldr	r3, [sp, #0]
 800ac02:	702b      	strb	r3, [r5, #0]
 800ac04:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 800ac08:	e7e8      	b.n	800abdc <pb_dec_uvarint+0x2c>
        PB_RETURN_ERROR(stream, "invalid data_size");
 800ac0a:	68e3      	ldr	r3, [r4, #12]
 800ac0c:	4a04      	ldr	r2, [pc, #16]	; (800ac20 <pb_dec_uvarint+0x70>)
        PB_RETURN_ERROR(stream, "integer too large");
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	bf08      	it	eq
 800ac12:	4613      	moveq	r3, r2
 800ac14:	2000      	movs	r0, #0
 800ac16:	60e3      	str	r3, [r4, #12]
 800ac18:	e7da      	b.n	800abd0 <pb_dec_uvarint+0x20>
 800ac1a:	bf00      	nop
 800ac1c:	08016a53 	.word	0x08016a53
 800ac20:	08016a41 	.word	0x08016a41

0800ac24 <pb_dec_varint>:
{
 800ac24:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ac26:	460e      	mov	r6, r1
    if (!pb_decode_varint(stream, &value))
 800ac28:	4669      	mov	r1, sp
{
 800ac2a:	4605      	mov	r5, r0
 800ac2c:	4614      	mov	r4, r2
    if (!pb_decode_varint(stream, &value))
 800ac2e:	f7ff ff87 	bl	800ab40 <pb_decode_varint>
 800ac32:	b138      	cbz	r0, 800ac44 <pb_dec_varint+0x20>
    if (field->data_size == sizeof(pb_int64_t))
 800ac34:	f8b6 3007 	ldrh.w	r3, [r6, #7]
 800ac38:	2b08      	cmp	r3, #8
        svalue = (pb_int64_t)value;
 800ac3a:	e9dd 2100 	ldrd	r2, r1, [sp]
    if (field->data_size == sizeof(pb_int64_t))
 800ac3e:	d103      	bne.n	800ac48 <pb_dec_varint+0x24>
        clamped = *(pb_int64_t*)dest = svalue;
 800ac40:	e9c4 2100 	strd	r2, r1, [r4]
}
 800ac44:	b002      	add	sp, #8
 800ac46:	bd70      	pop	{r4, r5, r6, pc}
    else if (field->data_size == sizeof(int32_t))
 800ac48:	2b04      	cmp	r3, #4
        svalue = (int32_t)value;
 800ac4a:	ea4f 76e2 	mov.w	r6, r2, asr #31
    else if (field->data_size == sizeof(int32_t))
 800ac4e:	d101      	bne.n	800ac54 <pb_dec_varint+0x30>
        clamped = *(int32_t*)dest = (int32_t)svalue;
 800ac50:	6022      	str	r2, [r4, #0]
    if (clamped != svalue)
 800ac52:	e7f7      	b.n	800ac44 <pb_dec_varint+0x20>
    else if (field->data_size == sizeof(int_least16_t))
 800ac54:	2b02      	cmp	r3, #2
 800ac56:	d109      	bne.n	800ac6c <pb_dec_varint+0x48>
        clamped = *(int_least16_t*)dest = (int_least16_t)svalue;
 800ac58:	b213      	sxth	r3, r2
 800ac5a:	8023      	strh	r3, [r4, #0]
        clamped = *(int_least8_t*)dest = (int_least8_t)svalue;
 800ac5c:	17d9      	asrs	r1, r3, #31
    if (clamped != svalue)
 800ac5e:	42b1      	cmp	r1, r6
 800ac60:	bf08      	it	eq
 800ac62:	4293      	cmpeq	r3, r2
 800ac64:	d0ee      	beq.n	800ac44 <pb_dec_varint+0x20>
        PB_RETURN_ERROR(stream, "integer too large");
 800ac66:	68eb      	ldr	r3, [r5, #12]
 800ac68:	4a07      	ldr	r2, [pc, #28]	; (800ac88 <pb_dec_varint+0x64>)
 800ac6a:	e006      	b.n	800ac7a <pb_dec_varint+0x56>
    else if (field->data_size == sizeof(int_least8_t))
 800ac6c:	2b01      	cmp	r3, #1
 800ac6e:	d102      	bne.n	800ac76 <pb_dec_varint+0x52>
        clamped = *(int_least8_t*)dest = (int_least8_t)svalue;
 800ac70:	b253      	sxtb	r3, r2
 800ac72:	7023      	strb	r3, [r4, #0]
 800ac74:	e7f2      	b.n	800ac5c <pb_dec_varint+0x38>
        PB_RETURN_ERROR(stream, "invalid data_size");
 800ac76:	68eb      	ldr	r3, [r5, #12]
 800ac78:	4a04      	ldr	r2, [pc, #16]	; (800ac8c <pb_dec_varint+0x68>)
        PB_RETURN_ERROR(stream, "integer too large");
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	bf08      	it	eq
 800ac7e:	4613      	moveq	r3, r2
 800ac80:	2000      	movs	r0, #0
 800ac82:	60eb      	str	r3, [r5, #12]
 800ac84:	e7de      	b.n	800ac44 <pb_dec_varint+0x20>
 800ac86:	bf00      	nop
 800ac88:	08016a53 	.word	0x08016a53
 800ac8c:	08016a41 	.word	0x08016a41

0800ac90 <pb_decode_tag>:
{
 800ac90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ac92:	461d      	mov	r5, r3
    *eof = false;
 800ac94:	2300      	movs	r3, #0
{
 800ac96:	460e      	mov	r6, r1
 800ac98:	4617      	mov	r7, r2
    *eof = false;
 800ac9a:	702b      	strb	r3, [r5, #0]
    *wire_type = (pb_wire_type_t) 0;
 800ac9c:	700b      	strb	r3, [r1, #0]
    if (!pb_decode_varint32_eof(stream, &temp, eof))
 800ac9e:	a901      	add	r1, sp, #4
    *tag = 0;
 800aca0:	6013      	str	r3, [r2, #0]
    if (!pb_decode_varint32_eof(stream, &temp, eof))
 800aca2:	462a      	mov	r2, r5
 800aca4:	f7ff fe30 	bl	800a908 <pb_decode_varint32_eof>
 800aca8:	b120      	cbz	r0, 800acb4 <pb_decode_tag+0x24>
    if (temp == 0)
 800acaa:	9c01      	ldr	r4, [sp, #4]
 800acac:	b924      	cbnz	r4, 800acb8 <pb_decode_tag+0x28>
        *eof = true; /* Special feature: allow 0-terminated messages. */
 800acae:	2301      	movs	r3, #1
        return false;
 800acb0:	4620      	mov	r0, r4
        *eof = true; /* Special feature: allow 0-terminated messages. */
 800acb2:	702b      	strb	r3, [r5, #0]
}
 800acb4:	b003      	add	sp, #12
 800acb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    *tag = temp >> 3;
 800acb8:	08e3      	lsrs	r3, r4, #3
    *wire_type = (pb_wire_type_t)(temp & 7);
 800acba:	f004 0407 	and.w	r4, r4, #7
    *tag = temp >> 3;
 800acbe:	603b      	str	r3, [r7, #0]
    *wire_type = (pb_wire_type_t)(temp & 7);
 800acc0:	7034      	strb	r4, [r6, #0]
    return true;
 800acc2:	e7f7      	b.n	800acb4 <pb_decode_tag+0x24>

0800acc4 <pb_skip_field>:
{
 800acc4:	b513      	push	{r0, r1, r4, lr}
 800acc6:	4604      	mov	r4, r0
    switch (wire_type)
 800acc8:	2905      	cmp	r1, #5
 800acca:	d825      	bhi.n	800ad18 <pb_skip_field+0x54>
 800accc:	e8df f001 	tbb	[pc, r1]
 800acd0:	24170f03 	.word	0x24170f03
 800acd4:	2224      	.short	0x2224
        if (!pb_read(stream, &byte, 1))
 800acd6:	2201      	movs	r2, #1
 800acd8:	a901      	add	r1, sp, #4
 800acda:	4620      	mov	r0, r4
 800acdc:	f7ff fe62 	bl	800a9a4 <pb_read>
 800ace0:	b118      	cbz	r0, 800acea <pb_skip_field+0x26>
    } while (byte & 0x80);
 800ace2:	f99d 3004 	ldrsb.w	r3, [sp, #4]
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	dbf5      	blt.n	800acd6 <pb_skip_field+0x12>
}
 800acea:	b002      	add	sp, #8
 800acec:	bd10      	pop	{r4, pc}
        case PB_WT_64BIT: return pb_read(stream, NULL, 8);
 800acee:	2208      	movs	r2, #8
        case PB_WT_32BIT: return pb_read(stream, NULL, 4);
 800acf0:	2100      	movs	r1, #0
 800acf2:	4620      	mov	r0, r4
}
 800acf4:	b002      	add	sp, #8
 800acf6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        case PB_WT_32BIT: return pb_read(stream, NULL, 4);
 800acfa:	f7ff be53 	b.w	800a9a4 <pb_read>
    if (!pb_decode_varint32(stream, &length))
 800acfe:	a901      	add	r1, sp, #4
 800ad00:	f7ff fe8c 	bl	800aa1c <pb_decode_varint32>
 800ad04:	2800      	cmp	r0, #0
 800ad06:	d0f0      	beq.n	800acea <pb_skip_field+0x26>
    return pb_read(stream, NULL, length);
 800ad08:	9a01      	ldr	r2, [sp, #4]
 800ad0a:	2100      	movs	r1, #0
 800ad0c:	4620      	mov	r0, r4
 800ad0e:	f7ff fe49 	bl	800a9a4 <pb_read>
        case PB_WT_STRING: return pb_skip_string(stream);
 800ad12:	e7ea      	b.n	800acea <pb_skip_field+0x26>
        case PB_WT_32BIT: return pb_read(stream, NULL, 4);
 800ad14:	2204      	movs	r2, #4
 800ad16:	e7eb      	b.n	800acf0 <pb_skip_field+0x2c>
        default: PB_RETURN_ERROR(stream, "invalid wire_type");
 800ad18:	68c3      	ldr	r3, [r0, #12]
 800ad1a:	4a03      	ldr	r2, [pc, #12]	; (800ad28 <pb_skip_field+0x64>)
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	bf08      	it	eq
 800ad20:	4613      	moveq	r3, r2
 800ad22:	60c3      	str	r3, [r0, #12]
 800ad24:	2000      	movs	r0, #0
 800ad26:	e7e0      	b.n	800acea <pb_skip_field+0x26>
 800ad28:	08016a65 	.word	0x08016a65

0800ad2c <pb_make_string_substream>:
{
 800ad2c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ad2e:	460d      	mov	r5, r1
    if (!pb_decode_varint32(stream, &size))
 800ad30:	a901      	add	r1, sp, #4
{
 800ad32:	4604      	mov	r4, r0
    if (!pb_decode_varint32(stream, &size))
 800ad34:	f7ff fe72 	bl	800aa1c <pb_decode_varint32>
 800ad38:	4606      	mov	r6, r0
 800ad3a:	b168      	cbz	r0, 800ad58 <pb_make_string_substream+0x2c>
    *substream = *stream;
 800ad3c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800ad40:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    if (substream->bytes_left < size)
 800ad44:	9901      	ldr	r1, [sp, #4]
 800ad46:	428a      	cmp	r2, r1
 800ad48:	d209      	bcs.n	800ad5e <pb_make_string_substream+0x32>
        PB_RETURN_ERROR(stream, "parent stream too short");
 800ad4a:	68e3      	ldr	r3, [r4, #12]
 800ad4c:	2600      	movs	r6, #0
 800ad4e:	4a06      	ldr	r2, [pc, #24]	; (800ad68 <pb_make_string_substream+0x3c>)
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	bf08      	it	eq
 800ad54:	4613      	moveq	r3, r2
 800ad56:	60e3      	str	r3, [r4, #12]
}
 800ad58:	4630      	mov	r0, r6
 800ad5a:	b002      	add	sp, #8
 800ad5c:	bd70      	pop	{r4, r5, r6, pc}
    substream->bytes_left = size;
 800ad5e:	60a9      	str	r1, [r5, #8]
    stream->bytes_left -= size;
 800ad60:	68a3      	ldr	r3, [r4, #8]
 800ad62:	1a5b      	subs	r3, r3, r1
 800ad64:	60a3      	str	r3, [r4, #8]
    return true;
 800ad66:	e7f7      	b.n	800ad58 <pb_make_string_substream+0x2c>
 800ad68:	08016a77 	.word	0x08016a77

0800ad6c <pb_close_string_substream>:
    if (substream->bytes_left) {
 800ad6c:	688a      	ldr	r2, [r1, #8]
{
 800ad6e:	b538      	push	{r3, r4, r5, lr}
 800ad70:	4605      	mov	r5, r0
 800ad72:	460c      	mov	r4, r1
    if (substream->bytes_left) {
 800ad74:	b92a      	cbnz	r2, 800ad82 <pb_close_string_substream+0x16>
    stream->state = substream->state;
 800ad76:	6863      	ldr	r3, [r4, #4]
    return true;
 800ad78:	2001      	movs	r0, #1
    stream->state = substream->state;
 800ad7a:	606b      	str	r3, [r5, #4]
    stream->errmsg = substream->errmsg;
 800ad7c:	68e3      	ldr	r3, [r4, #12]
 800ad7e:	60eb      	str	r3, [r5, #12]
}
 800ad80:	bd38      	pop	{r3, r4, r5, pc}
        if (!pb_read(substream, NULL, substream->bytes_left))
 800ad82:	2100      	movs	r1, #0
 800ad84:	4620      	mov	r0, r4
 800ad86:	f7ff fe0d 	bl	800a9a4 <pb_read>
 800ad8a:	2800      	cmp	r0, #0
 800ad8c:	d1f3      	bne.n	800ad76 <pb_close_string_substream+0xa>
 800ad8e:	e7f7      	b.n	800ad80 <pb_close_string_substream+0x14>

0800ad90 <decode_field>:
{
 800ad90:	460b      	mov	r3, r1
    switch (PB_ATYPE(iter->pos->type))
 800ad92:	6851      	ldr	r1, [r2, #4]
{
 800ad94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ad98:	4616      	mov	r6, r2
    switch (PB_ATYPE(iter->pos->type))
 800ad9a:	788a      	ldrb	r2, [r1, #2]
{
 800ad9c:	b089      	sub	sp, #36	; 0x24
 800ad9e:	4605      	mov	r5, r0
    switch (PB_ATYPE(iter->pos->type))
 800ada0:	f002 04c0 	and.w	r4, r2, #192	; 0xc0
 800ada4:	2c40      	cmp	r4, #64	; 0x40
 800ada6:	f000 8083 	beq.w	800aeb0 <decode_field+0x120>
 800adaa:	2c80      	cmp	r4, #128	; 0x80
 800adac:	d07d      	beq.n	800aeaa <decode_field+0x11a>
 800adae:	b964      	cbnz	r4, 800adca <decode_field+0x3a>
    func = PB_DECODERS[PB_LTYPE(type)];
 800adb0:	f002 0c0f 	and.w	ip, r2, #15
 800adb4:	f002 0230 	and.w	r2, r2, #48	; 0x30
 800adb8:	4f6e      	ldr	r7, [pc, #440]	; (800af74 <decode_field+0x1e4>)
    switch (PB_HTYPE(type))
 800adba:	2a20      	cmp	r2, #32
    func = PB_DECODERS[PB_LTYPE(type)];
 800adbc:	f857 702c 	ldr.w	r7, [r7, ip, lsl #2]
    switch (PB_HTYPE(type))
 800adc0:	d02b      	beq.n	800ae1a <decode_field+0x8a>
 800adc2:	d805      	bhi.n	800add0 <decode_field+0x40>
 800adc4:	b1da      	cbz	r2, 800adfe <decode_field+0x6e>
 800adc6:	2a10      	cmp	r2, #16
 800adc8:	d01f      	beq.n	800ae0a <decode_field+0x7a>
            PB_RETURN_ERROR(stream, "invalid field type");
 800adca:	68eb      	ldr	r3, [r5, #12]
 800adcc:	4a6a      	ldr	r2, [pc, #424]	; (800af78 <decode_field+0x1e8>)
 800adce:	e04c      	b.n	800ae6a <decode_field+0xda>
    switch (PB_HTYPE(type))
 800add0:	2a30      	cmp	r2, #48	; 0x30
 800add2:	d1fa      	bne.n	800adca <decode_field+0x3a>
            *(pb_size_t*)iter->pSize = iter->pos->tag;
 800add4:	880a      	ldrh	r2, [r1, #0]
            if (PB_LTYPE(type) == PB_LTYPE_SUBMESSAGE)
 800add6:	f1bc 0f07 	cmp.w	ip, #7
            *(pb_size_t*)iter->pSize = iter->pos->tag;
 800adda:	6973      	ldr	r3, [r6, #20]
 800addc:	801a      	strh	r2, [r3, #0]
            if (PB_LTYPE(type) == PB_LTYPE_SUBMESSAGE)
 800adde:	d10b      	bne.n	800adf8 <decode_field+0x68>
                memset(iter->pData, 0, iter->pos->data_size);
 800ade0:	f8b1 2007 	ldrh.w	r2, [r1, #7]
 800ade4:	4621      	mov	r1, r4
 800ade6:	6930      	ldr	r0, [r6, #16]
 800ade8:	f008 f8e8 	bl	8012fbc <memset>
                pb_message_set_to_defaults((const pb_field_t*)iter->pos->ptr, iter->pData);
 800adec:	6873      	ldr	r3, [r6, #4]
 800adee:	6931      	ldr	r1, [r6, #16]
 800adf0:	f8d3 000b 	ldr.w	r0, [r3, #11]
 800adf4:	f7ff fd56 	bl	800a8a4 <pb_message_set_to_defaults>
            return func(stream, iter->pos, iter->pData);
 800adf8:	6932      	ldr	r2, [r6, #16]
 800adfa:	6871      	ldr	r1, [r6, #4]
 800adfc:	e00b      	b.n	800ae16 <decode_field+0x86>
            return func(stream, iter->pos, iter->pData);
 800adfe:	6932      	ldr	r2, [r6, #16]
            return func(stream, iter->pos, iter->pData);
 800ae00:	463b      	mov	r3, r7
}
 800ae02:	b009      	add	sp, #36	; 0x24
 800ae04:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
            return func(stream, iter->pos, iter->pData);
 800ae08:	4718      	bx	r3
            if (iter->pSize != iter->pData)
 800ae0a:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
 800ae0e:	4293      	cmp	r3, r2
                *(bool*)iter->pSize = true;
 800ae10:	bf1c      	itt	ne
 800ae12:	2001      	movne	r0, #1
 800ae14:	7018      	strbne	r0, [r3, #0]
            return func(stream, iter->pos, iter->pData);
 800ae16:	4628      	mov	r0, r5
 800ae18:	e7f2      	b.n	800ae00 <decode_field+0x70>
            if (wire_type == PB_WT_STRING
 800ae1a:	2b02      	cmp	r3, #2
            if (iter->pSize != iter->pData)
 800ae1c:	f8d6 8014 	ldr.w	r8, [r6, #20]
            if (wire_type == PB_WT_STRING
 800ae20:	d134      	bne.n	800ae8c <decode_field+0xfc>
                && PB_LTYPE(type) <= PB_LTYPE_LAST_PACKABLE)
 800ae22:	f1bc 0f04 	cmp.w	ip, #4
 800ae26:	d831      	bhi.n	800ae8c <decode_field+0xfc>
                if (!pb_make_string_substream(stream, &substream))
 800ae28:	a904      	add	r1, sp, #16
 800ae2a:	f7ff ff7f 	bl	800ad2c <pb_make_string_substream>
 800ae2e:	4604      	mov	r4, r0
 800ae30:	b970      	cbnz	r0, 800ae50 <decode_field+0xc0>
            PB_RETURN_ERROR(stream, "invalid field type");
 800ae32:	2400      	movs	r4, #0
 800ae34:	e026      	b.n	800ae84 <decode_field+0xf4>
                    void *pItem = (char*)iter->pData + iter->pos->data_size * (*size);
 800ae36:	f8b1 0007 	ldrh.w	r0, [r1, #7]
 800ae3a:	6932      	ldr	r2, [r6, #16]
                    if (!func(&substream, iter->pos, pItem))
 800ae3c:	fb03 2200 	mla	r2, r3, r0, r2
 800ae40:	a804      	add	r0, sp, #16
 800ae42:	47b8      	blx	r7
 800ae44:	b1b0      	cbz	r0, 800ae74 <decode_field+0xe4>
                    (*size)++;
 800ae46:	f8b8 3000 	ldrh.w	r3, [r8]
 800ae4a:	3301      	adds	r3, #1
 800ae4c:	f8a8 3000 	strh.w	r3, [r8]
                while (substream.bytes_left > 0 && *size < iter->pos->array_size)
 800ae50:	9b06      	ldr	r3, [sp, #24]
 800ae52:	b133      	cbz	r3, 800ae62 <decode_field+0xd2>
 800ae54:	6871      	ldr	r1, [r6, #4]
 800ae56:	f8b8 3000 	ldrh.w	r3, [r8]
 800ae5a:	f8b1 2009 	ldrh.w	r2, [r1, #9]
 800ae5e:	429a      	cmp	r2, r3
 800ae60:	d8e9      	bhi.n	800ae36 <decode_field+0xa6>
                if (substream.bytes_left != 0)
 800ae62:	9b06      	ldr	r3, [sp, #24]
 800ae64:	b143      	cbz	r3, 800ae78 <decode_field+0xe8>
                    PB_RETURN_ERROR(stream, "array overflow");
 800ae66:	68eb      	ldr	r3, [r5, #12]
 800ae68:	4a44      	ldr	r2, [pc, #272]	; (800af7c <decode_field+0x1ec>)
            PB_RETURN_ERROR(stream, "invalid field type");
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	bf08      	it	eq
 800ae6e:	4613      	moveq	r3, r2
 800ae70:	60eb      	str	r3, [r5, #12]
 800ae72:	e7de      	b.n	800ae32 <decode_field+0xa2>
                        status = false;
 800ae74:	4604      	mov	r4, r0
 800ae76:	e7f4      	b.n	800ae62 <decode_field+0xd2>
                if (!pb_close_string_substream(stream, &substream))
 800ae78:	a904      	add	r1, sp, #16
 800ae7a:	4628      	mov	r0, r5
 800ae7c:	f7ff ff76 	bl	800ad6c <pb_close_string_substream>
 800ae80:	2800      	cmp	r0, #0
 800ae82:	d0d6      	beq.n	800ae32 <decode_field+0xa2>
}
 800ae84:	4620      	mov	r0, r4
 800ae86:	b009      	add	sp, #36	; 0x24
 800ae88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                char *pItem = (char*)iter->pData + iter->pos->data_size * (*size);
 800ae8c:	f8b8 3000 	ldrh.w	r3, [r8]
 800ae90:	6932      	ldr	r2, [r6, #16]
                if ((*size)++ >= iter->pos->array_size)
 800ae92:	1c5c      	adds	r4, r3, #1
                char *pItem = (char*)iter->pData + iter->pos->data_size * (*size);
 800ae94:	f8b1 0007 	ldrh.w	r0, [r1, #7]
                if ((*size)++ >= iter->pos->array_size)
 800ae98:	f8a8 4000 	strh.w	r4, [r8]
 800ae9c:	f8b1 4009 	ldrh.w	r4, [r1, #9]
 800aea0:	429c      	cmp	r4, r3
 800aea2:	d9e0      	bls.n	800ae66 <decode_field+0xd6>
                return func(stream, iter->pos, pItem);
 800aea4:	fb03 2200 	mla	r2, r3, r0, r2
 800aea8:	e7b5      	b.n	800ae16 <decode_field+0x86>
    PB_RETURN_ERROR(stream, "no malloc support");
 800aeaa:	68c3      	ldr	r3, [r0, #12]
 800aeac:	4a34      	ldr	r2, [pc, #208]	; (800af80 <decode_field+0x1f0>)
 800aeae:	e7dc      	b.n	800ae6a <decode_field+0xda>
    pb_callback_t *pCallback = (pb_callback_t*)iter->pData;
 800aeb0:	6937      	ldr	r7, [r6, #16]
    if (pCallback == NULL || pCallback->funcs.decode == NULL)
 800aeb2:	b10f      	cbz	r7, 800aeb8 <decode_field+0x128>
 800aeb4:	683a      	ldr	r2, [r7, #0]
 800aeb6:	b932      	cbnz	r2, 800aec6 <decode_field+0x136>
        return pb_skip_field(stream, wire_type);
 800aeb8:	4619      	mov	r1, r3
 800aeba:	4628      	mov	r0, r5
}
 800aebc:	b009      	add	sp, #36	; 0x24
 800aebe:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        return pb_skip_field(stream, wire_type);
 800aec2:	f7ff beff 	b.w	800acc4 <pb_skip_field>
    if (wire_type == PB_WT_STRING)
 800aec6:	2b02      	cmp	r3, #2
    void **arg = &(pCallback->arg);
 800aec8:	f107 0804 	add.w	r8, r7, #4
    if (wire_type == PB_WT_STRING)
 800aecc:	d11c      	bne.n	800af08 <decode_field+0x178>
        if (!pb_make_string_substream(stream, &substream))
 800aece:	a904      	add	r1, sp, #16
 800aed0:	f7ff ff2c 	bl	800ad2c <pb_make_string_substream>
 800aed4:	4604      	mov	r4, r0
 800aed6:	2800      	cmp	r0, #0
 800aed8:	d0d4      	beq.n	800ae84 <decode_field+0xf4>
            if (!pCallback->funcs.decode(&substream, iter->pos, arg))
 800aeda:	683b      	ldr	r3, [r7, #0]
 800aedc:	4642      	mov	r2, r8
 800aede:	6871      	ldr	r1, [r6, #4]
 800aee0:	a804      	add	r0, sp, #16
 800aee2:	4798      	blx	r3
 800aee4:	4604      	mov	r4, r0
 800aee6:	b930      	cbnz	r0, 800aef6 <decode_field+0x166>
                PB_RETURN_ERROR(stream, "callback failed");
 800aee8:	68eb      	ldr	r3, [r5, #12]
 800aeea:	4a26      	ldr	r2, [pc, #152]	; (800af84 <decode_field+0x1f4>)
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	bf08      	it	eq
 800aef0:	4613      	moveq	r3, r2
 800aef2:	60eb      	str	r3, [r5, #12]
 800aef4:	e7c6      	b.n	800ae84 <decode_field+0xf4>
        } while (substream.bytes_left);
 800aef6:	9b06      	ldr	r3, [sp, #24]
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d1ee      	bne.n	800aeda <decode_field+0x14a>
        if (!pb_close_string_substream(stream, &substream))
 800aefc:	a904      	add	r1, sp, #16
 800aefe:	4628      	mov	r0, r5
 800af00:	f7ff ff34 	bl	800ad6c <pb_close_string_substream>
        return pCallback->funcs.decode(&substream, iter->pos, arg);
 800af04:	4604      	mov	r4, r0
 800af06:	e7bd      	b.n	800ae84 <decode_field+0xf4>
    switch (wire_type)
 800af08:	2b01      	cmp	r3, #1
 800af0a:	d020      	beq.n	800af4e <decode_field+0x1be>
 800af0c:	2b05      	cmp	r3, #5
 800af0e:	d026      	beq.n	800af5e <decode_field+0x1ce>
 800af10:	bb63      	cbnz	r3, 800af6c <decode_field+0x1dc>
 800af12:	461c      	mov	r4, r3
 800af14:	f10d 0904 	add.w	r9, sp, #4
                (*size)++;
 800af18:	3401      	adds	r4, #1
                if (*size > max_size) return false;
 800af1a:	2c0b      	cmp	r4, #11
 800af1c:	d089      	beq.n	800ae32 <decode_field+0xa2>
                if (!pb_read(stream, buf, 1)) return false;
 800af1e:	2201      	movs	r2, #1
 800af20:	4649      	mov	r1, r9
 800af22:	4628      	mov	r0, r5
 800af24:	f7ff fd3e 	bl	800a9a4 <pb_read>
 800af28:	2800      	cmp	r0, #0
 800af2a:	d082      	beq.n	800ae32 <decode_field+0xa2>
            } while (*buf++ & 0x80);
 800af2c:	f919 3b01 	ldrsb.w	r3, [r9], #1
 800af30:	2b00      	cmp	r3, #0
 800af32:	dbf1      	blt.n	800af18 <decode_field+0x188>
        substream = pb_istream_from_buffer(buffer, size);
 800af34:	4b14      	ldr	r3, [pc, #80]	; (800af88 <decode_field+0x1f8>)
        return pCallback->funcs.decode(&substream, iter->pos, arg);
 800af36:	4642      	mov	r2, r8
 800af38:	6871      	ldr	r1, [r6, #4]
 800af3a:	a804      	add	r0, sp, #16
        substream = pb_istream_from_buffer(buffer, size);
 800af3c:	9304      	str	r3, [sp, #16]
 800af3e:	ab01      	add	r3, sp, #4
 800af40:	e9cd 3405 	strd	r3, r4, [sp, #20]
 800af44:	2300      	movs	r3, #0
 800af46:	9307      	str	r3, [sp, #28]
        return pCallback->funcs.decode(&substream, iter->pos, arg);
 800af48:	683b      	ldr	r3, [r7, #0]
 800af4a:	4798      	blx	r3
 800af4c:	e7da      	b.n	800af04 <decode_field+0x174>
            *size = 8;
 800af4e:	2408      	movs	r4, #8
            return pb_read(stream, buf, 8);
 800af50:	2208      	movs	r2, #8
 800af52:	a901      	add	r1, sp, #4
 800af54:	f7ff fd26 	bl	800a9a4 <pb_read>
        if (!read_raw_value(stream, wire_type, buffer, &size))
 800af58:	2800      	cmp	r0, #0
 800af5a:	d1eb      	bne.n	800af34 <decode_field+0x1a4>
 800af5c:	e769      	b.n	800ae32 <decode_field+0xa2>
            return pb_read(stream, buf, 4);
 800af5e:	2204      	movs	r2, #4
            *size = 4;
 800af60:	2404      	movs	r4, #4
            return pb_read(stream, buf, 4);
 800af62:	eb0d 0102 	add.w	r1, sp, r2
 800af66:	f7ff fd1d 	bl	800a9a4 <pb_read>
 800af6a:	e7f5      	b.n	800af58 <decode_field+0x1c8>
        default: PB_RETURN_ERROR(stream, "invalid wire_type");
 800af6c:	68c3      	ldr	r3, [r0, #12]
 800af6e:	4a07      	ldr	r2, [pc, #28]	; (800af8c <decode_field+0x1fc>)
 800af70:	e77b      	b.n	800ae6a <decode_field+0xda>
 800af72:	bf00      	nop
 800af74:	08016b14 	.word	0x08016b14
 800af78:	08016a9e 	.word	0x08016a9e
 800af7c:	08016a8f 	.word	0x08016a8f
 800af80:	08016a1f 	.word	0x08016a1f
 800af84:	08016ab1 	.word	0x08016ab1
 800af88:	0800a7d1 	.word	0x0800a7d1
 800af8c:	08016a65 	.word	0x08016a65

0800af90 <pb_decode_noinit>:
{
 800af90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t fields_seen[(PB_MAX_REQUIRED_FIELDS + 31) / 32] = {0, 0};
 800af94:	2500      	movs	r5, #0
{
 800af96:	b091      	sub	sp, #68	; 0x44
 800af98:	4604      	mov	r4, r0
    uint32_t extension_range_start = 0;
 800af9a:	462f      	mov	r7, r5
    (void)pb_field_iter_begin(&iter, fields, dest_struct);
 800af9c:	a804      	add	r0, sp, #16
    pb_size_t fixed_count_size = 0;
 800af9e:	f8ad 5002 	strh.w	r5, [sp, #2]
    uint32_t fields_seen[(PB_MAX_REQUIRED_FIELDS + 31) / 32] = {0, 0};
 800afa2:	e9cd 5502 	strd	r5, r5, [sp, #8]
    (void)pb_field_iter_begin(&iter, fields, dest_struct);
 800afa6:	f7ff fba9 	bl	800a6fc <pb_field_iter_begin>
    while (stream->bytes_left)
 800afaa:	68a3      	ldr	r3, [r4, #8]
 800afac:	b9f3      	cbnz	r3, 800afec <pb_decode_noinit+0x5c>
    if (fixed_count_field != NULL &&
 800afae:	b135      	cbz	r5, 800afbe <pb_decode_noinit+0x2e>
 800afb0:	f8b5 2009 	ldrh.w	r2, [r5, #9]
 800afb4:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800afb8:	429a      	cmp	r2, r3
 800afba:	f040 8095 	bne.w	800b0e8 <pb_decode_noinit+0x158>
        } while (pb_field_iter_next(&iter));
 800afbe:	a804      	add	r0, sp, #16
            last_type = iter.pos->type;
 800afc0:	e9dd 3505 	ldrd	r3, r5, [sp, #20]
 800afc4:	789e      	ldrb	r6, [r3, #2]
        } while (pb_field_iter_next(&iter));
 800afc6:	f7ff fbab 	bl	800a720 <pb_field_iter_next>
 800afca:	2800      	cmp	r0, #0
 800afcc:	d1f7      	bne.n	800afbe <pb_decode_noinit+0x2e>
        if (PB_HTYPE(last_type) == PB_HTYPE_REQUIRED && iter.pos->tag != 0)
 800afce:	f016 0f30 	tst.w	r6, #48	; 0x30
 800afd2:	d103      	bne.n	800afdc <pb_decode_noinit+0x4c>
 800afd4:	9b05      	ldr	r3, [sp, #20]
 800afd6:	881b      	ldrh	r3, [r3, #0]
 800afd8:	b103      	cbz	r3, 800afdc <pb_decode_noinit+0x4c>
            req_field_count++;
 800afda:	3501      	adds	r5, #1
        if (req_field_count > PB_MAX_REQUIRED_FIELDS)
 800afdc:	2d40      	cmp	r5, #64	; 0x40
 800afde:	f200 80cc 	bhi.w	800b17a <pb_decode_noinit+0x1ea>
        if (req_field_count > 0)
 800afe2:	2d00      	cmp	r5, #0
 800afe4:	f040 80ca 	bne.w	800b17c <pb_decode_noinit+0x1ec>
    return true;
 800afe8:	2001      	movs	r0, #1
 800afea:	e00c      	b.n	800b006 <pb_decode_noinit+0x76>
        if (!pb_decode_tag(stream, &wire_type, &tag, &eof))
 800afec:	f10d 0301 	add.w	r3, sp, #1
 800aff0:	aa01      	add	r2, sp, #4
 800aff2:	4669      	mov	r1, sp
 800aff4:	4620      	mov	r0, r4
 800aff6:	f7ff fe4b 	bl	800ac90 <pb_decode_tag>
 800affa:	b938      	cbnz	r0, 800b00c <pb_decode_noinit+0x7c>
            if (eof)
 800affc:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800b000:	2b00      	cmp	r3, #0
 800b002:	d1d4      	bne.n	800afae <pb_decode_noinit+0x1e>
        PB_RETURN_ERROR(stream, "wrong size for fixed count field");
 800b004:	2000      	movs	r0, #0
}
 800b006:	b011      	add	sp, #68	; 0x44
 800b008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (!pb_field_iter_find(&iter, tag))
 800b00c:	9901      	ldr	r1, [sp, #4]
 800b00e:	a804      	add	r0, sp, #16
 800b010:	f7ff fbc7 	bl	800a7a2 <pb_field_iter_find>
 800b014:	2800      	cmp	r0, #0
 800b016:	d154      	bne.n	800b0c2 <pb_decode_noinit+0x132>
            if (tag >= extension_range_start)
 800b018:	9b01      	ldr	r3, [sp, #4]
 800b01a:	42bb      	cmp	r3, r7
 800b01c:	f0c0 80b5 	bcc.w	800b18a <pb_decode_noinit+0x1fa>
    const pb_field_t *start = iter->pos;
 800b020:	9e05      	ldr	r6, [sp, #20]
        if (PB_LTYPE(iter->pos->type) == PB_LTYPE_EXTENSION)
 800b022:	9a05      	ldr	r2, [sp, #20]
 800b024:	7893      	ldrb	r3, [r2, #2]
 800b026:	f003 030f 	and.w	r3, r3, #15
 800b02a:	2b08      	cmp	r3, #8
 800b02c:	f000 80b6 	beq.w	800b19c <pb_decode_noinit+0x20c>
        (void)pb_field_iter_next(iter);
 800b030:	a804      	add	r0, sp, #16
 800b032:	f7ff fb75 	bl	800a720 <pb_field_iter_next>
    } while (iter->pos != start);
 800b036:	9b05      	ldr	r3, [sp, #20]
 800b038:	429e      	cmp	r6, r3
 800b03a:	d1f2      	bne.n	800b022 <pb_decode_noinit+0x92>
                    extension_range_start = (uint32_t)-1;
 800b03c:	f04f 37ff 	mov.w	r7, #4294967295
                if (tag >= extension_range_start)
 800b040:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b044:	45b8      	cmp	r8, r7
 800b046:	f0c0 80a0 	bcc.w	800b18a <pb_decode_noinit+0x1fa>
    pb_extension_t *extension = *(pb_extension_t* const *)iter->pData;
 800b04a:	9a08      	ldr	r2, [sp, #32]
                    if (!decode_extension(stream, tag, wire_type, &iter))
 800b04c:	f89d b000 	ldrb.w	fp, [sp]
                    size_t pos = stream->bytes_left;
 800b050:	f8d4 9008 	ldr.w	r9, [r4, #8]
    pb_extension_t *extension = *(pb_extension_t* const *)iter->pData;
 800b054:	6816      	ldr	r6, [r2, #0]
    while (extension != NULL && pos == stream->bytes_left)
 800b056:	68a2      	ldr	r2, [r4, #8]
 800b058:	2e00      	cmp	r6, #0
 800b05a:	f000 8093 	beq.w	800b184 <pb_decode_noinit+0x1f4>
 800b05e:	4591      	cmp	r9, r2
 800b060:	d1a3      	bne.n	800afaa <pb_decode_noinit+0x1a>
        if (extension->type->decode)
 800b062:	6832      	ldr	r2, [r6, #0]
 800b064:	f8d2 a000 	ldr.w	sl, [r2]
 800b068:	f1ba 0f00 	cmp.w	sl, #0
 800b06c:	d008      	beq.n	800b080 <pb_decode_noinit+0xf0>
            status = extension->type->decode(stream, extension, tag, wire_type);
 800b06e:	465b      	mov	r3, fp
 800b070:	4642      	mov	r2, r8
 800b072:	4631      	mov	r1, r6
 800b074:	4620      	mov	r0, r4
 800b076:	47d0      	blx	sl
        if (!status)
 800b078:	2800      	cmp	r0, #0
 800b07a:	d0c3      	beq.n	800b004 <pb_decode_noinit+0x74>
        extension = extension->next;
 800b07c:	68b6      	ldr	r6, [r6, #8]
 800b07e:	e7ea      	b.n	800b056 <pb_decode_noinit+0xc6>
    const pb_field_t *field = (const pb_field_t*)extension->type->arg;
 800b080:	f8d2 a008 	ldr.w	sl, [r2, #8]
    if (field->tag != tag)
 800b084:	f8ba 2000 	ldrh.w	r2, [sl]
 800b088:	4590      	cmp	r8, r2
 800b08a:	d1f7      	bne.n	800b07c <pb_decode_noinit+0xec>
    (void)pb_field_iter_begin(iter, field, extension->dest);
 800b08c:	6872      	ldr	r2, [r6, #4]
 800b08e:	4651      	mov	r1, sl
 800b090:	a80a      	add	r0, sp, #40	; 0x28
 800b092:	f7ff fb33 	bl	800a6fc <pb_field_iter_begin>
    iter->pData = extension->dest;
 800b096:	6872      	ldr	r2, [r6, #4]
    extension->found = true;
 800b098:	f04f 0301 	mov.w	r3, #1
    return decode_field(stream, wire_type, &iter);
 800b09c:	4659      	mov	r1, fp
    iter->pData = extension->dest;
 800b09e:	920e      	str	r2, [sp, #56]	; 0x38
    iter->pSize = &extension->found;
 800b0a0:	f106 020c 	add.w	r2, r6, #12
    return decode_field(stream, wire_type, &iter);
 800b0a4:	4620      	mov	r0, r4
    iter->pSize = &extension->found;
 800b0a6:	920f      	str	r2, [sp, #60]	; 0x3c
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 800b0a8:	f89a 2002 	ldrb.w	r2, [sl, #2]
 800b0ac:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 800b0b0:	2a80      	cmp	r2, #128	; 0x80
        iter->pData = &extension->dest;
 800b0b2:	bf04      	itt	eq
 800b0b4:	1d32      	addeq	r2, r6, #4
 800b0b6:	920e      	streq	r2, [sp, #56]	; 0x38
    return decode_field(stream, wire_type, &iter);
 800b0b8:	aa0a      	add	r2, sp, #40	; 0x28
    extension->found = true;
 800b0ba:	7333      	strb	r3, [r6, #12]
    return decode_field(stream, wire_type, &iter);
 800b0bc:	f7ff fe68 	bl	800ad90 <decode_field>
 800b0c0:	e7da      	b.n	800b078 <pb_decode_noinit+0xe8>
        if (PB_HTYPE(iter.pos->type) == PB_HTYPE_REPEATED
 800b0c2:	9a05      	ldr	r2, [sp, #20]
 800b0c4:	7893      	ldrb	r3, [r2, #2]
 800b0c6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800b0ca:	2b20      	cmp	r3, #32
 800b0cc:	d121      	bne.n	800b112 <pb_decode_noinit+0x182>
            && iter.pSize == iter.pData)
 800b0ce:	e9dd 3108 	ldrd	r3, r1, [sp, #32]
 800b0d2:	4299      	cmp	r1, r3
 800b0d4:	d116      	bne.n	800b104 <pb_decode_noinit+0x174>
            if (fixed_count_field != iter.pos) {
 800b0d6:	42aa      	cmp	r2, r5
 800b0d8:	d010      	beq.n	800b0fc <pb_decode_noinit+0x16c>
                if (fixed_count_field != NULL &&
 800b0da:	b165      	cbz	r5, 800b0f6 <pb_decode_noinit+0x166>
 800b0dc:	f8b5 1009 	ldrh.w	r1, [r5, #9]
 800b0e0:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800b0e4:	4299      	cmp	r1, r3
 800b0e6:	d006      	beq.n	800b0f6 <pb_decode_noinit+0x166>
        PB_RETURN_ERROR(stream, "wrong size for fixed count field");
 800b0e8:	68e3      	ldr	r3, [r4, #12]
 800b0ea:	4a2d      	ldr	r2, [pc, #180]	; (800b1a0 <pb_decode_noinit+0x210>)
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	bf08      	it	eq
 800b0f0:	4613      	moveq	r3, r2
 800b0f2:	60e3      	str	r3, [r4, #12]
 800b0f4:	e786      	b.n	800b004 <pb_decode_noinit+0x74>
                fixed_count_size = 0;
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	f8ad 3002 	strh.w	r3, [sp, #2]
            iter.pSize = &fixed_count_size;
 800b0fc:	f10d 0302 	add.w	r3, sp, #2
 800b100:	4615      	mov	r5, r2
 800b102:	9309      	str	r3, [sp, #36]	; 0x24
        if (!decode_field(stream, wire_type, &iter))
 800b104:	aa04      	add	r2, sp, #16
 800b106:	f89d 1000 	ldrb.w	r1, [sp]
 800b10a:	4620      	mov	r0, r4
 800b10c:	f7ff fe40 	bl	800ad90 <decode_field>
 800b110:	e040      	b.n	800b194 <pb_decode_noinit+0x204>
        if (PB_HTYPE(iter.pos->type) == PB_HTYPE_REQUIRED
 800b112:	2b00      	cmp	r3, #0
 800b114:	d1f6      	bne.n	800b104 <pb_decode_noinit+0x174>
            && iter.required_field_index < PB_MAX_REQUIRED_FIELDS)
 800b116:	9a06      	ldr	r2, [sp, #24]
 800b118:	2a3f      	cmp	r2, #63	; 0x3f
 800b11a:	d8f3      	bhi.n	800b104 <pb_decode_noinit+0x174>
            fields_seen[iter.required_field_index >> 5] |= tmp;
 800b11c:	0951      	lsrs	r1, r2, #5
 800b11e:	ab10      	add	r3, sp, #64	; 0x40
            uint32_t tmp = ((uint32_t)1 << (iter.required_field_index & 31));
 800b120:	f002 021f 	and.w	r2, r2, #31
            fields_seen[iter.required_field_index >> 5] |= tmp;
 800b124:	eb03 0181 	add.w	r1, r3, r1, lsl #2
            uint32_t tmp = ((uint32_t)1 << (iter.required_field_index & 31));
 800b128:	2301      	movs	r3, #1
 800b12a:	4093      	lsls	r3, r2
            fields_seen[iter.required_field_index >> 5] |= tmp;
 800b12c:	f851 2c38 	ldr.w	r2, [r1, #-56]
 800b130:	4313      	orrs	r3, r2
 800b132:	f841 3c38 	str.w	r3, [r1, #-56]
 800b136:	e7e5      	b.n	800b104 <pb_decode_noinit+0x174>
                if (fields_seen[i] != allbits)
 800b138:	f851 6b04 	ldr.w	r6, [r1], #4
 800b13c:	3601      	adds	r6, #1
 800b13e:	d006      	beq.n	800b14e <pb_decode_noinit+0x1be>
                    PB_RETURN_ERROR(stream, "missing required field");
 800b140:	68e3      	ldr	r3, [r4, #12]
 800b142:	4a18      	ldr	r2, [pc, #96]	; (800b1a4 <pb_decode_noinit+0x214>)
 800b144:	2b00      	cmp	r3, #0
 800b146:	bf08      	it	eq
 800b148:	4613      	moveq	r3, r2
 800b14a:	60e3      	str	r3, [r4, #12]
 800b14c:	e75b      	b.n	800b006 <pb_decode_noinit+0x76>
            for (i = 0; i < (req_field_count >> 5); i++)
 800b14e:	3201      	adds	r2, #1
 800b150:	4293      	cmp	r3, r2
 800b152:	d1f1      	bne.n	800b138 <pb_decode_noinit+0x1a8>
            if ((req_field_count & 31) != 0)
 800b154:	f015 051f 	ands.w	r5, r5, #31
 800b158:	f43f af46 	beq.w	800afe8 <pb_decode_noinit+0x58>
                if (fields_seen[req_field_count >> 5] !=
 800b15c:	aa10      	add	r2, sp, #64	; 0x40
                    (allbits >> (32 - (req_field_count & 31))))
 800b15e:	f1c5 0520 	rsb	r5, r5, #32
                if (fields_seen[req_field_count >> 5] !=
 800b162:	eb02 0383 	add.w	r3, r2, r3, lsl #2
                    (allbits >> (32 - (req_field_count & 31))))
 800b166:	f04f 32ff 	mov.w	r2, #4294967295
                if (fields_seen[req_field_count >> 5] !=
 800b16a:	f853 3c38 	ldr.w	r3, [r3, #-56]
                    (allbits >> (32 - (req_field_count & 31))))
 800b16e:	fa22 f505 	lsr.w	r5, r2, r5
                if (fields_seen[req_field_count >> 5] !=
 800b172:	42ab      	cmp	r3, r5
 800b174:	f43f af38 	beq.w	800afe8 <pb_decode_noinit+0x58>
 800b178:	e7e2      	b.n	800b140 <pb_decode_noinit+0x1b0>
            req_field_count = PB_MAX_REQUIRED_FIELDS;
 800b17a:	2540      	movs	r5, #64	; 0x40
            for (i = 0; i < (req_field_count >> 5); i++)
 800b17c:	096b      	lsrs	r3, r5, #5
 800b17e:	a902      	add	r1, sp, #8
 800b180:	2200      	movs	r2, #0
 800b182:	e7e5      	b.n	800b150 <pb_decode_noinit+0x1c0>
                    if (pos != stream->bytes_left)
 800b184:	4591      	cmp	r9, r2
 800b186:	f47f af10 	bne.w	800afaa <pb_decode_noinit+0x1a>
            if (!pb_skip_field(stream, wire_type))
 800b18a:	f89d 1000 	ldrb.w	r1, [sp]
 800b18e:	4620      	mov	r0, r4
 800b190:	f7ff fd98 	bl	800acc4 <pb_skip_field>
        if (!decode_field(stream, wire_type, &iter))
 800b194:	2800      	cmp	r0, #0
 800b196:	f47f af08 	bne.w	800afaa <pb_decode_noinit+0x1a>
 800b19a:	e733      	b.n	800b004 <pb_decode_noinit+0x74>
                    extension_range_start = iter.pos->tag;
 800b19c:	8817      	ldrh	r7, [r2, #0]
 800b19e:	e74f      	b.n	800b040 <pb_decode_noinit+0xb0>
 800b1a0:	08016ac1 	.word	0x08016ac1
 800b1a4:	08016ae2 	.word	0x08016ae2

0800b1a8 <pb_decode>:
{
 800b1a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b1aa:	460c      	mov	r4, r1
 800b1ac:	4605      	mov	r5, r0
    pb_message_set_to_defaults(fields, dest_struct);
 800b1ae:	4611      	mov	r1, r2
 800b1b0:	9201      	str	r2, [sp, #4]
 800b1b2:	4620      	mov	r0, r4
 800b1b4:	f7ff fb76 	bl	800a8a4 <pb_message_set_to_defaults>
    status = pb_decode_noinit(stream, fields, dest_struct);
 800b1b8:	9a01      	ldr	r2, [sp, #4]
 800b1ba:	4621      	mov	r1, r4
 800b1bc:	4628      	mov	r0, r5
}
 800b1be:	b003      	add	sp, #12
 800b1c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    status = pb_decode_noinit(stream, fields, dest_struct);
 800b1c4:	f7ff bee4 	b.w	800af90 <pb_decode_noinit>

0800b1c8 <pb_dec_submessage>:
{
 800b1c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b1ca:	b087      	sub	sp, #28
 800b1cc:	460e      	mov	r6, r1
 800b1ce:	4605      	mov	r5, r0
 800b1d0:	9201      	str	r2, [sp, #4]
    const pb_field_t* submsg_fields = (const pb_field_t*)field->ptr;
 800b1d2:	f8d1 700b 	ldr.w	r7, [r1, #11]
    if (!pb_make_string_substream(stream, &substream))
 800b1d6:	a902      	add	r1, sp, #8
 800b1d8:	f7ff fda8 	bl	800ad2c <pb_make_string_substream>
 800b1dc:	b1e0      	cbz	r0, 800b218 <pb_dec_submessage+0x50>
    if (field->ptr == NULL)
 800b1de:	f8d6 400b 	ldr.w	r4, [r6, #11]
 800b1e2:	9a01      	ldr	r2, [sp, #4]
 800b1e4:	b944      	cbnz	r4, 800b1f8 <pb_dec_submessage+0x30>
        PB_RETURN_ERROR(stream, "invalid field descriptor");
 800b1e6:	68eb      	ldr	r3, [r5, #12]
 800b1e8:	4a0e      	ldr	r2, [pc, #56]	; (800b224 <pb_dec_submessage+0x5c>)
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	bf08      	it	eq
 800b1ee:	4613      	moveq	r3, r2
 800b1f0:	60eb      	str	r3, [r5, #12]
}
 800b1f2:	4620      	mov	r0, r4
 800b1f4:	b007      	add	sp, #28
 800b1f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (PB_HTYPE(field->type) == PB_HTYPE_REPEATED)
 800b1f8:	78b3      	ldrb	r3, [r6, #2]
        status = pb_decode(&substream, submsg_fields, dest);
 800b1fa:	4639      	mov	r1, r7
 800b1fc:	a802      	add	r0, sp, #8
    if (PB_HTYPE(field->type) == PB_HTYPE_REPEATED)
 800b1fe:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800b202:	2b20      	cmp	r3, #32
 800b204:	d10a      	bne.n	800b21c <pb_dec_submessage+0x54>
        status = pb_decode(&substream, submsg_fields, dest);
 800b206:	f7ff ffcf 	bl	800b1a8 <pb_decode>
        status = pb_decode_noinit(&substream, submsg_fields, dest);
 800b20a:	4604      	mov	r4, r0
    if (!pb_close_string_substream(stream, &substream))
 800b20c:	a902      	add	r1, sp, #8
 800b20e:	4628      	mov	r0, r5
 800b210:	f7ff fdac 	bl	800ad6c <pb_close_string_substream>
 800b214:	2800      	cmp	r0, #0
 800b216:	d1ec      	bne.n	800b1f2 <pb_dec_submessage+0x2a>
        return false;
 800b218:	2400      	movs	r4, #0
 800b21a:	e7ea      	b.n	800b1f2 <pb_dec_submessage+0x2a>
        status = pb_decode_noinit(&substream, submsg_fields, dest);
 800b21c:	f7ff feb8 	bl	800af90 <pb_decode_noinit>
 800b220:	e7f3      	b.n	800b20a <pb_dec_submessage+0x42>
 800b222:	bf00      	nop
 800b224:	08016af9 	.word	0x08016af9

0800b228 <pb_decode_delimited>:
{
 800b228:	b530      	push	{r4, r5, lr}
 800b22a:	b087      	sub	sp, #28
 800b22c:	460c      	mov	r4, r1
 800b22e:	4605      	mov	r5, r0
    if (!pb_make_string_substream(stream, &substream))
 800b230:	a902      	add	r1, sp, #8
{
 800b232:	9201      	str	r2, [sp, #4]
    if (!pb_make_string_substream(stream, &substream))
 800b234:	f7ff fd7a 	bl	800ad2c <pb_make_string_substream>
 800b238:	b150      	cbz	r0, 800b250 <pb_decode_delimited+0x28>
    status = pb_decode(&substream, fields, dest_struct);
 800b23a:	4621      	mov	r1, r4
 800b23c:	9a01      	ldr	r2, [sp, #4]
 800b23e:	a802      	add	r0, sp, #8
 800b240:	f7ff ffb2 	bl	800b1a8 <pb_decode>
    if (!pb_close_string_substream(stream, &substream))
 800b244:	a902      	add	r1, sp, #8
    status = pb_decode(&substream, fields, dest_struct);
 800b246:	4604      	mov	r4, r0
    if (!pb_close_string_substream(stream, &substream))
 800b248:	4628      	mov	r0, r5
 800b24a:	f7ff fd8f 	bl	800ad6c <pb_close_string_substream>
 800b24e:	b900      	cbnz	r0, 800b252 <pb_decode_delimited+0x2a>
        return false;
 800b250:	2400      	movs	r4, #0
}
 800b252:	4620      	mov	r0, r4
 800b254:	b007      	add	sp, #28
 800b256:	bd30      	pop	{r4, r5, pc}

0800b258 <pb_decode_svarint>:
{
 800b258:	b513      	push	{r0, r1, r4, lr}
 800b25a:	460c      	mov	r4, r1
    if (!pb_decode_varint(stream, &value))
 800b25c:	4669      	mov	r1, sp
 800b25e:	f7ff fc6f 	bl	800ab40 <pb_decode_varint>
 800b262:	b160      	cbz	r0, 800b27e <pb_decode_svarint+0x26>
    if (value & 1)
 800b264:	e9dd 1300 	ldrd	r1, r3, [sp]
        *dest = (pb_int64_t)(~(value >> 1));
 800b268:	084a      	lsrs	r2, r1, #1
    if (value & 1)
 800b26a:	07c9      	lsls	r1, r1, #31
        *dest = (pb_int64_t)(~(value >> 1));
 800b26c:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 800b270:	ea4f 0353 	mov.w	r3, r3, lsr #1
 800b274:	bf44      	itt	mi
 800b276:	43d2      	mvnmi	r2, r2
 800b278:	43db      	mvnmi	r3, r3
        *dest = (pb_int64_t)(value >> 1);
 800b27a:	e9c4 2300 	strd	r2, r3, [r4]
}
 800b27e:	b002      	add	sp, #8
 800b280:	bd10      	pop	{r4, pc}
	...

0800b284 <pb_dec_svarint>:
{
 800b284:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b286:	460e      	mov	r6, r1
    if (!pb_decode_svarint(stream, &value))
 800b288:	4669      	mov	r1, sp
{
 800b28a:	4604      	mov	r4, r0
 800b28c:	4615      	mov	r5, r2
    if (!pb_decode_svarint(stream, &value))
 800b28e:	f7ff ffe3 	bl	800b258 <pb_decode_svarint>
 800b292:	b138      	cbz	r0, 800b2a4 <pb_dec_svarint+0x20>
    if (field->data_size == sizeof(pb_int64_t))
 800b294:	f8b6 3007 	ldrh.w	r3, [r6, #7]
 800b298:	2b08      	cmp	r3, #8
 800b29a:	d105      	bne.n	800b2a8 <pb_dec_svarint+0x24>
        clamped = *(pb_int64_t*)dest = value;
 800b29c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b2a0:	e9c5 2300 	strd	r2, r3, [r5]
}
 800b2a4:	b002      	add	sp, #8
 800b2a6:	bd70      	pop	{r4, r5, r6, pc}
    else if (field->data_size == sizeof(int32_t))
 800b2a8:	2b04      	cmp	r3, #4
 800b2aa:	d10b      	bne.n	800b2c4 <pb_dec_svarint+0x40>
        clamped = *(int32_t*)dest = (int32_t)value;
 800b2ac:	9b00      	ldr	r3, [sp, #0]
 800b2ae:	602b      	str	r3, [r5, #0]
        clamped = *(int_least8_t*)dest = (int_least8_t)value;
 800b2b0:	17da      	asrs	r2, r3, #31
    if (clamped != value)
 800b2b2:	e9dd 5100 	ldrd	r5, r1, [sp]
 800b2b6:	4291      	cmp	r1, r2
 800b2b8:	bf08      	it	eq
 800b2ba:	429d      	cmpeq	r5, r3
 800b2bc:	d0f2      	beq.n	800b2a4 <pb_dec_svarint+0x20>
        PB_RETURN_ERROR(stream, "integer too large");
 800b2be:	68e3      	ldr	r3, [r4, #12]
 800b2c0:	4a0a      	ldr	r2, [pc, #40]	; (800b2ec <pb_dec_svarint+0x68>)
 800b2c2:	e00d      	b.n	800b2e0 <pb_dec_svarint+0x5c>
    else if (field->data_size == sizeof(int_least16_t))
 800b2c4:	2b02      	cmp	r3, #2
 800b2c6:	d103      	bne.n	800b2d0 <pb_dec_svarint+0x4c>
        clamped = *(int_least16_t*)dest = (int_least16_t)value;
 800b2c8:	f9bd 3000 	ldrsh.w	r3, [sp]
 800b2cc:	802b      	strh	r3, [r5, #0]
 800b2ce:	e7ef      	b.n	800b2b0 <pb_dec_svarint+0x2c>
    else if (field->data_size == sizeof(int_least8_t))
 800b2d0:	2b01      	cmp	r3, #1
 800b2d2:	d103      	bne.n	800b2dc <pb_dec_svarint+0x58>
        clamped = *(int_least8_t*)dest = (int_least8_t)value;
 800b2d4:	f99d 3000 	ldrsb.w	r3, [sp]
 800b2d8:	702b      	strb	r3, [r5, #0]
 800b2da:	e7e9      	b.n	800b2b0 <pb_dec_svarint+0x2c>
        PB_RETURN_ERROR(stream, "invalid data_size");
 800b2dc:	68e3      	ldr	r3, [r4, #12]
 800b2de:	4a04      	ldr	r2, [pc, #16]	; (800b2f0 <pb_dec_svarint+0x6c>)
        PB_RETURN_ERROR(stream, "integer too large");
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	bf08      	it	eq
 800b2e4:	4613      	moveq	r3, r2
 800b2e6:	2000      	movs	r0, #0
 800b2e8:	60e3      	str	r3, [r4, #12]
 800b2ea:	e7db      	b.n	800b2a4 <pb_dec_svarint+0x20>
 800b2ec:	08016a53 	.word	0x08016a53
 800b2f0:	08016a41 	.word	0x08016a41

0800b2f4 <pb_decode_fixed32>:
    if (!pb_read(stream, bytes, 4))
 800b2f4:	2204      	movs	r2, #4
{
 800b2f6:	b513      	push	{r0, r1, r4, lr}
 800b2f8:	460c      	mov	r4, r1
    if (!pb_read(stream, bytes, 4))
 800b2fa:	eb0d 0102 	add.w	r1, sp, r2
 800b2fe:	f7ff fb51 	bl	800a9a4 <pb_read>
 800b302:	b108      	cbz	r0, 800b308 <pb_decode_fixed32+0x14>
    *(uint32_t*)dest = ((uint32_t)bytes[0] << 0) |
 800b304:	9b01      	ldr	r3, [sp, #4]
 800b306:	6023      	str	r3, [r4, #0]
}
 800b308:	b002      	add	sp, #8
 800b30a:	bd10      	pop	{r4, pc}

0800b30c <pb_dec_fixed32>:
    return pb_decode_fixed32(stream, dest);
 800b30c:	4611      	mov	r1, r2
 800b30e:	f7ff bff1 	b.w	800b2f4 <pb_decode_fixed32>

0800b312 <pb_decode_fixed64>:
{
 800b312:	b513      	push	{r0, r1, r4, lr}
    if (!pb_read(stream, bytes, 8))
 800b314:	2208      	movs	r2, #8
{
 800b316:	460c      	mov	r4, r1
    if (!pb_read(stream, bytes, 8))
 800b318:	4669      	mov	r1, sp
 800b31a:	f7ff fb43 	bl	800a9a4 <pb_read>
 800b31e:	b118      	cbz	r0, 800b328 <pb_decode_fixed64+0x16>
    *(uint64_t*)dest = ((uint64_t)bytes[0] << 0) |
 800b320:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b324:	e9c4 2300 	strd	r2, r3, [r4]
}
 800b328:	b002      	add	sp, #8
 800b32a:	bd10      	pop	{r4, pc}

0800b32c <pb_dec_fixed64>:
    return pb_decode_fixed64(stream, dest);
 800b32c:	4611      	mov	r1, r2
 800b32e:	f7ff bff0 	b.w	800b312 <pb_decode_fixed64>

0800b332 <pb_check_proto3_default_value>:
}

/* In proto3, all fields are optional and are only encoded if their value is "non-zero".
 * This function implements the check for the zero value. */
static bool pb_check_proto3_default_value(const pb_field_t *field, const void *pData)
{
 800b332:	b510      	push	{r4, lr}
    pb_type_t type = field->type;
 800b334:	7882      	ldrb	r2, [r0, #2]
{
 800b336:	b086      	sub	sp, #24
    const void *pSize = (const char*)pData + field->size_offset;

    if (PB_HTYPE(type) == PB_HTYPE_REQUIRED)
 800b338:	f012 0330 	ands.w	r3, r2, #48	; 0x30
 800b33c:	d043      	beq.n	800b3c6 <pb_check_proto3_default_value+0x94>
    {
        /* Required proto2 fields inside proto3 submessage, pretty rare case */
        return false;
    }
    else if (PB_HTYPE(type) == PB_HTYPE_REPEATED)
 800b33e:	2b20      	cmp	r3, #32
    const void *pSize = (const char*)pData + field->size_offset;
 800b340:	f9b0 4005 	ldrsh.w	r4, [r0, #5]
    else if (PB_HTYPE(type) == PB_HTYPE_REPEATED)
 800b344:	d104      	bne.n	800b350 <pb_check_proto3_default_value+0x1e>
        return *(const pb_size_t*)pSize == 0;
    }
    else if (PB_HTYPE(type) == PB_HTYPE_ONEOF)
    {
        /* Oneof fields */
        return *(const pb_size_t*)pSize == 0;
 800b346:	5b08      	ldrh	r0, [r1, r4]
    if (PB_ATYPE(type) == PB_ATYPE_STATIC)
    {
        if (PB_LTYPE(type) == PB_LTYPE_BYTES)
        {
            const pb_bytes_array_t *bytes = (const pb_bytes_array_t*)pData;
            return bytes->size == 0;
 800b348:	fab0 f080 	clz	r0, r0
 800b34c:	0940      	lsrs	r0, r0, #5
 800b34e:	e007      	b.n	800b360 <pb_check_proto3_default_value+0x2e>
    else if (PB_HTYPE(type) == PB_HTYPE_ONEOF)
 800b350:	2b30      	cmp	r3, #48	; 0x30
 800b352:	d0f8      	beq.n	800b346 <pb_check_proto3_default_value+0x14>
    else if (PB_HTYPE(type) == PB_HTYPE_OPTIONAL && field->size_offset)
 800b354:	2b10      	cmp	r3, #16
 800b356:	d105      	bne.n	800b364 <pb_check_proto3_default_value+0x32>
 800b358:	b124      	cbz	r4, 800b364 <pb_check_proto3_default_value+0x32>
        return *(const bool*)pSize == false;
 800b35a:	5d08      	ldrb	r0, [r1, r4]
 800b35c:	f080 0001 	eor.w	r0, r0, #1
	        }
	    }

	    return true;
	}
}
 800b360:	b006      	add	sp, #24
 800b362:	bd10      	pop	{r4, pc}
    if (PB_ATYPE(type) == PB_ATYPE_STATIC)
 800b364:	f012 0fc0 	tst.w	r2, #192	; 0xc0
 800b368:	d006      	beq.n	800b378 <pb_check_proto3_default_value+0x46>
 800b36a:	f8b0 3007 	ldrh.w	r3, [r0, #7]
 800b36e:	440b      	add	r3, r1
	    for (i = 0; i < field->data_size; i++)
 800b370:	428b      	cmp	r3, r1
 800b372:	d124      	bne.n	800b3be <pb_check_proto3_default_value+0x8c>
	    return true;
 800b374:	2001      	movs	r0, #1
 800b376:	e7f3      	b.n	800b360 <pb_check_proto3_default_value+0x2e>
        if (PB_LTYPE(type) == PB_LTYPE_BYTES)
 800b378:	f002 030f 	and.w	r3, r2, #15
 800b37c:	2b05      	cmp	r3, #5
 800b37e:	d101      	bne.n	800b384 <pb_check_proto3_default_value+0x52>
            return bytes->size == 0;
 800b380:	8808      	ldrh	r0, [r1, #0]
 800b382:	e7e1      	b.n	800b348 <pb_check_proto3_default_value+0x16>
        else if (PB_LTYPE(type) == PB_LTYPE_STRING)
 800b384:	2b06      	cmp	r3, #6
 800b386:	d101      	bne.n	800b38c <pb_check_proto3_default_value+0x5a>
            return *(const char*)pData == '\0';
 800b388:	7808      	ldrb	r0, [r1, #0]
 800b38a:	e7dd      	b.n	800b348 <pb_check_proto3_default_value+0x16>
        else if (PB_LTYPE(type) == PB_LTYPE_FIXED_LENGTH_BYTES)
 800b38c:	2b09      	cmp	r3, #9
 800b38e:	d102      	bne.n	800b396 <pb_check_proto3_default_value+0x64>
            return field->data_size == 0;
 800b390:	f8b0 0007 	ldrh.w	r0, [r0, #7]
 800b394:	e7d8      	b.n	800b348 <pb_check_proto3_default_value+0x16>
        else if (PB_LTYPE(type) == PB_LTYPE_SUBMESSAGE)
 800b396:	2b07      	cmp	r3, #7
 800b398:	d1e7      	bne.n	800b36a <pb_check_proto3_default_value+0x38>
            if (pb_field_iter_begin(&iter, (const pb_field_t*)field->ptr, pb_const_cast(pData)))
 800b39a:	460a      	mov	r2, r1
 800b39c:	f8d0 100b 	ldr.w	r1, [r0, #11]
 800b3a0:	4668      	mov	r0, sp
 800b3a2:	f7ff f9ab 	bl	800a6fc <pb_field_iter_begin>
 800b3a6:	2800      	cmp	r0, #0
 800b3a8:	d0e4      	beq.n	800b374 <pb_check_proto3_default_value+0x42>
                    if (!pb_check_proto3_default_value(iter.pos, iter.pData))
 800b3aa:	9904      	ldr	r1, [sp, #16]
 800b3ac:	9801      	ldr	r0, [sp, #4]
 800b3ae:	f7ff ffc0 	bl	800b332 <pb_check_proto3_default_value>
 800b3b2:	2800      	cmp	r0, #0
 800b3b4:	d0d4      	beq.n	800b360 <pb_check_proto3_default_value+0x2e>
                } while (pb_field_iter_next(&iter));
 800b3b6:	4668      	mov	r0, sp
 800b3b8:	f7ff f9b2 	bl	800a720 <pb_field_iter_next>
 800b3bc:	e7f3      	b.n	800b3a6 <pb_check_proto3_default_value+0x74>
	        if (p[i] != 0)
 800b3be:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b3c2:	2a00      	cmp	r2, #0
 800b3c4:	d0d4      	beq.n	800b370 <pb_check_proto3_default_value+0x3e>
        return false;
 800b3c6:	2000      	movs	r0, #0
 800b3c8:	e7ca      	b.n	800b360 <pb_check_proto3_default_value+0x2e>
	...

0800b3cc <pb_write>:
{
 800b3cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (stream->callback != NULL)
 800b3ce:	6806      	ldr	r6, [r0, #0]
{
 800b3d0:	4604      	mov	r4, r0
 800b3d2:	4615      	mov	r5, r2
    if (stream->callback != NULL)
 800b3d4:	b1ae      	cbz	r6, 800b402 <pb_write+0x36>
        if (stream->bytes_written + count > stream->max_size)
 800b3d6:	68c3      	ldr	r3, [r0, #12]
 800b3d8:	6887      	ldr	r7, [r0, #8]
 800b3da:	4413      	add	r3, r2
 800b3dc:	429f      	cmp	r7, r3
 800b3de:	d207      	bcs.n	800b3f0 <pb_write+0x24>
            PB_RETURN_ERROR(stream, "stream full");
 800b3e0:	6903      	ldr	r3, [r0, #16]
 800b3e2:	4a0a      	ldr	r2, [pc, #40]	; (800b40c <pb_write+0x40>)
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	bf08      	it	eq
 800b3e8:	4613      	moveq	r3, r2
 800b3ea:	6103      	str	r3, [r0, #16]
 800b3ec:	2000      	movs	r0, #0
}
 800b3ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (!stream->callback(stream, buf, count))
 800b3f0:	47b0      	blx	r6
 800b3f2:	b930      	cbnz	r0, 800b402 <pb_write+0x36>
            PB_RETURN_ERROR(stream, "io error");
 800b3f4:	6923      	ldr	r3, [r4, #16]
 800b3f6:	4a06      	ldr	r2, [pc, #24]	; (800b410 <pb_write+0x44>)
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	bf08      	it	eq
 800b3fc:	4613      	moveq	r3, r2
 800b3fe:	6123      	str	r3, [r4, #16]
 800b400:	e7f5      	b.n	800b3ee <pb_write+0x22>
    stream->bytes_written += count;
 800b402:	68e2      	ldr	r2, [r4, #12]
    return true;
 800b404:	2001      	movs	r0, #1
    stream->bytes_written += count;
 800b406:	442a      	add	r2, r5
 800b408:	60e2      	str	r2, [r4, #12]
    return true;
 800b40a:	e7f0      	b.n	800b3ee <pb_write+0x22>
 800b40c:	08016b3c 	.word	0x08016b3c
 800b410:	080169c6 	.word	0x080169c6

0800b414 <pb_encode_varint>:
bool checkreturn pb_encode_varint(pb_ostream_t *stream, pb_uint64_t value)
{
    pb_byte_t buffer[10];
    size_t i = 0;
    
    if (value <= 0x7F)
 800b414:	2a80      	cmp	r2, #128	; 0x80
{
 800b416:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (value <= 0x7F)
 800b418:	f173 0100 	sbcs.w	r1, r3, #0
{
 800b41c:	4605      	mov	r5, r0
    if (value <= 0x7F)
 800b41e:	d207      	bcs.n	800b430 <pb_encode_varint+0x1c>
    {
        pb_byte_t v = (pb_byte_t)value;
 800b420:	f88d 2004 	strb.w	r2, [sp, #4]
        return pb_write(stream, &v, 1);
 800b424:	a901      	add	r1, sp, #4
 800b426:	2201      	movs	r2, #1
        value >>= 7;
        i++;
    }
    buffer[i-1] &= 0x7F; /* Unset top bit on last byte */
    
    return pb_write(stream, buffer, i);
 800b428:	f7ff ffd0 	bl	800b3cc <pb_write>
}
 800b42c:	b004      	add	sp, #16
 800b42e:	bd70      	pop	{r4, r5, r6, pc}
 800b430:	ae01      	add	r6, sp, #4
    size_t i = 0;
 800b432:	2400      	movs	r4, #0
        buffer[i] = (pb_byte_t)((value & 0x7F) | 0x80);
 800b434:	f062 017f 	orn	r1, r2, #127	; 0x7f
 800b438:	b2d0      	uxtb	r0, r2
 800b43a:	f806 1b01 	strb.w	r1, [r6], #1
        value >>= 7;
 800b43e:	09d1      	lsrs	r1, r2, #7
 800b440:	ea41 6243 	orr.w	r2, r1, r3, lsl #25
 800b444:	4621      	mov	r1, r4
 800b446:	09db      	lsrs	r3, r3, #7
        i++;
 800b448:	3401      	adds	r4, #1
    while (value)
 800b44a:	ea52 0c03 	orrs.w	ip, r2, r3
 800b44e:	d1f1      	bne.n	800b434 <pb_encode_varint+0x20>
    buffer[i-1] &= 0x7F; /* Unset top bit on last byte */
 800b450:	f101 0310 	add.w	r3, r1, #16
 800b454:	f000 027f 	and.w	r2, r0, #127	; 0x7f
    return pb_write(stream, buffer, i);
 800b458:	a901      	add	r1, sp, #4
 800b45a:	4628      	mov	r0, r5
    buffer[i-1] &= 0x7F; /* Unset top bit on last byte */
 800b45c:	446b      	add	r3, sp
 800b45e:	f803 2c0c 	strb.w	r2, [r3, #-12]
    return pb_write(stream, buffer, i);
 800b462:	4622      	mov	r2, r4
 800b464:	e7e0      	b.n	800b428 <pb_encode_varint+0x14>
	...

0800b468 <pb_enc_uvarint>:

static bool checkreturn pb_enc_uvarint(pb_ostream_t *stream, const pb_field_t *field, const void *src)
{
    pb_uint64_t value = 0;
    
    if (field->data_size == sizeof(uint_least8_t))
 800b468:	f8b1 3007 	ldrh.w	r3, [r1, #7]
 800b46c:	2b01      	cmp	r3, #1
 800b46e:	d104      	bne.n	800b47a <pb_enc_uvarint+0x12>
        value = *(const uint_least8_t*)src;
 800b470:	7811      	ldrb	r1, [r2, #0]
    else if (field->data_size == sizeof(uint_least16_t))
        value = *(const uint_least16_t*)src;
    else if (field->data_size == sizeof(uint32_t))
        value = *(const uint32_t*)src;
 800b472:	2300      	movs	r3, #0
    else if (field->data_size == sizeof(pb_uint64_t))
        value = *(const pb_uint64_t*)src;
    else
        PB_RETURN_ERROR(stream, "invalid data_size");
    
    return pb_encode_varint(stream, value);
 800b474:	460a      	mov	r2, r1
 800b476:	f7ff bfcd 	b.w	800b414 <pb_encode_varint>
    else if (field->data_size == sizeof(uint_least16_t))
 800b47a:	2b02      	cmp	r3, #2
 800b47c:	d101      	bne.n	800b482 <pb_enc_uvarint+0x1a>
        value = *(const uint_least16_t*)src;
 800b47e:	8811      	ldrh	r1, [r2, #0]
 800b480:	e7f7      	b.n	800b472 <pb_enc_uvarint+0xa>
    else if (field->data_size == sizeof(uint32_t))
 800b482:	2b04      	cmp	r3, #4
 800b484:	d101      	bne.n	800b48a <pb_enc_uvarint+0x22>
        value = *(const uint32_t*)src;
 800b486:	6811      	ldr	r1, [r2, #0]
 800b488:	e7f3      	b.n	800b472 <pb_enc_uvarint+0xa>
    else if (field->data_size == sizeof(pb_uint64_t))
 800b48a:	2b08      	cmp	r3, #8
 800b48c:	d102      	bne.n	800b494 <pb_enc_uvarint+0x2c>
        value = *(const pb_uint64_t*)src;
 800b48e:	e9d2 1300 	ldrd	r1, r3, [r2]
 800b492:	e7ef      	b.n	800b474 <pb_enc_uvarint+0xc>
        PB_RETURN_ERROR(stream, "invalid data_size");
 800b494:	6903      	ldr	r3, [r0, #16]
 800b496:	4a03      	ldr	r2, [pc, #12]	; (800b4a4 <pb_enc_uvarint+0x3c>)
 800b498:	2b00      	cmp	r3, #0
 800b49a:	bf08      	it	eq
 800b49c:	4613      	moveq	r3, r2
 800b49e:	6103      	str	r3, [r0, #16]
}
 800b4a0:	2000      	movs	r0, #0
 800b4a2:	4770      	bx	lr
 800b4a4:	08016a41 	.word	0x08016a41

0800b4a8 <pb_enc_varint>:
{
 800b4a8:	4613      	mov	r3, r2
    if (field->data_size == sizeof(int_least8_t))
 800b4aa:	f8b1 2007 	ldrh.w	r2, [r1, #7]
 800b4ae:	2a01      	cmp	r2, #1
 800b4b0:	d104      	bne.n	800b4bc <pb_enc_varint+0x14>
        value = *(const int_least8_t*)src;
 800b4b2:	f993 2000 	ldrsb.w	r2, [r3]
        value = *(const int32_t*)src;
 800b4b6:	17d3      	asrs	r3, r2, #31
      return pb_encode_varint(stream, (pb_uint64_t)value);
 800b4b8:	f7ff bfac 	b.w	800b414 <pb_encode_varint>
    else if (field->data_size == sizeof(int_least16_t))
 800b4bc:	2a02      	cmp	r2, #2
 800b4be:	d102      	bne.n	800b4c6 <pb_enc_varint+0x1e>
        value = *(const int_least16_t*)src;
 800b4c0:	f9b3 2000 	ldrsh.w	r2, [r3]
 800b4c4:	e7f7      	b.n	800b4b6 <pb_enc_varint+0xe>
    else if (field->data_size == sizeof(int32_t))
 800b4c6:	2a04      	cmp	r2, #4
 800b4c8:	d101      	bne.n	800b4ce <pb_enc_varint+0x26>
        value = *(const int32_t*)src;
 800b4ca:	681a      	ldr	r2, [r3, #0]
 800b4cc:	e7f3      	b.n	800b4b6 <pb_enc_varint+0xe>
    else if (field->data_size == sizeof(pb_int64_t))
 800b4ce:	2a08      	cmp	r2, #8
 800b4d0:	d102      	bne.n	800b4d8 <pb_enc_varint+0x30>
        value = *(const pb_int64_t*)src;
 800b4d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4d6:	e7ef      	b.n	800b4b8 <pb_enc_varint+0x10>
        PB_RETURN_ERROR(stream, "invalid data_size");
 800b4d8:	6903      	ldr	r3, [r0, #16]
 800b4da:	4a03      	ldr	r2, [pc, #12]	; (800b4e8 <pb_enc_varint+0x40>)
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	bf08      	it	eq
 800b4e0:	4613      	moveq	r3, r2
 800b4e2:	6103      	str	r3, [r0, #16]
}
 800b4e4:	2000      	movs	r0, #0
 800b4e6:	4770      	bx	lr
 800b4e8:	08016a41 	.word	0x08016a41

0800b4ec <pb_encode_svarint>:
        zigzagged = ~((pb_uint64_t)value << 1);
 800b4ec:	1892      	adds	r2, r2, r2
{
 800b4ee:	b410      	push	{r4}
 800b4f0:	461c      	mov	r4, r3
        zigzagged = ~((pb_uint64_t)value << 1);
 800b4f2:	eb43 0103 	adc.w	r1, r3, r3
    if (value < 0)
 800b4f6:	2c00      	cmp	r4, #0
        zigzagged = ~((pb_uint64_t)value << 1);
 800b4f8:	460b      	mov	r3, r1
}
 800b4fa:	f85d 4b04 	ldr.w	r4, [sp], #4
        zigzagged = ~((pb_uint64_t)value << 1);
 800b4fe:	bfbc      	itt	lt
 800b500:	43d2      	mvnlt	r2, r2
 800b502:	43cb      	mvnlt	r3, r1
    return pb_encode_varint(stream, zigzagged);
 800b504:	f7ff bf86 	b.w	800b414 <pb_encode_varint>

0800b508 <pb_enc_svarint>:

static bool checkreturn pb_enc_svarint(pb_ostream_t *stream, const pb_field_t *field, const void *src)
{
 800b508:	4613      	mov	r3, r2
    pb_int64_t value = 0;
    
    if (field->data_size == sizeof(int_least8_t))
 800b50a:	f8b1 2007 	ldrh.w	r2, [r1, #7]
 800b50e:	2a01      	cmp	r2, #1
 800b510:	d104      	bne.n	800b51c <pb_enc_svarint+0x14>
        value = *(const int_least8_t*)src;
 800b512:	f993 2000 	ldrsb.w	r2, [r3]
    else if (field->data_size == sizeof(int_least16_t))
        value = *(const int_least16_t*)src;
    else if (field->data_size == sizeof(int32_t))
        value = *(const int32_t*)src;
 800b516:	17d3      	asrs	r3, r2, #31
    else if (field->data_size == sizeof(pb_int64_t))
        value = *(const pb_int64_t*)src;
    else
        PB_RETURN_ERROR(stream, "invalid data_size");
    
    return pb_encode_svarint(stream, value);
 800b518:	f7ff bfe8 	b.w	800b4ec <pb_encode_svarint>
    else if (field->data_size == sizeof(int_least16_t))
 800b51c:	2a02      	cmp	r2, #2
 800b51e:	d102      	bne.n	800b526 <pb_enc_svarint+0x1e>
        value = *(const int_least16_t*)src;
 800b520:	f9b3 2000 	ldrsh.w	r2, [r3]
 800b524:	e7f7      	b.n	800b516 <pb_enc_svarint+0xe>
    else if (field->data_size == sizeof(int32_t))
 800b526:	2a04      	cmp	r2, #4
 800b528:	d101      	bne.n	800b52e <pb_enc_svarint+0x26>
        value = *(const int32_t*)src;
 800b52a:	681a      	ldr	r2, [r3, #0]
 800b52c:	e7f3      	b.n	800b516 <pb_enc_svarint+0xe>
    else if (field->data_size == sizeof(pb_int64_t))
 800b52e:	2a08      	cmp	r2, #8
 800b530:	d102      	bne.n	800b538 <pb_enc_svarint+0x30>
        value = *(const pb_int64_t*)src;
 800b532:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b536:	e7ef      	b.n	800b518 <pb_enc_svarint+0x10>
        PB_RETURN_ERROR(stream, "invalid data_size");
 800b538:	6903      	ldr	r3, [r0, #16]
 800b53a:	4a03      	ldr	r2, [pc, #12]	; (800b548 <pb_enc_svarint+0x40>)
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	bf08      	it	eq
 800b540:	4613      	moveq	r3, r2
 800b542:	6103      	str	r3, [r0, #16]
}
 800b544:	2000      	movs	r0, #0
 800b546:	4770      	bx	lr
 800b548:	08016a41 	.word	0x08016a41

0800b54c <pb_encode_fixed32>:
    uint32_t val = *(const uint32_t*)value;
 800b54c:	680b      	ldr	r3, [r1, #0]
{
 800b54e:	b507      	push	{r0, r1, r2, lr}
    bytes[1] = (pb_byte_t)((val >> 8) & 0xFF);
 800b550:	0a1a      	lsrs	r2, r3, #8
    bytes[0] = (pb_byte_t)(val & 0xFF);
 800b552:	f88d 3004 	strb.w	r3, [sp, #4]
    bytes[1] = (pb_byte_t)((val >> 8) & 0xFF);
 800b556:	f88d 2005 	strb.w	r2, [sp, #5]
    bytes[2] = (pb_byte_t)((val >> 16) & 0xFF);
 800b55a:	0c1a      	lsrs	r2, r3, #16
    bytes[3] = (pb_byte_t)((val >> 24) & 0xFF);
 800b55c:	0e1b      	lsrs	r3, r3, #24
    bytes[2] = (pb_byte_t)((val >> 16) & 0xFF);
 800b55e:	f88d 2006 	strb.w	r2, [sp, #6]
    return pb_write(stream, bytes, 4);
 800b562:	2204      	movs	r2, #4
    bytes[3] = (pb_byte_t)((val >> 24) & 0xFF);
 800b564:	f88d 3007 	strb.w	r3, [sp, #7]
    return pb_write(stream, bytes, 4);
 800b568:	eb0d 0102 	add.w	r1, sp, r2
 800b56c:	f7ff ff2e 	bl	800b3cc <pb_write>
}
 800b570:	b003      	add	sp, #12
 800b572:	f85d fb04 	ldr.w	pc, [sp], #4

0800b576 <pb_enc_fixed32>:
}

static bool checkreturn pb_enc_fixed32(pb_ostream_t *stream, const pb_field_t *field, const void *src)
{
    PB_UNUSED(field);
    return pb_encode_fixed32(stream, src);
 800b576:	4611      	mov	r1, r2
 800b578:	f7ff bfe8 	b.w	800b54c <pb_encode_fixed32>

0800b57c <pb_encode_fixed64>:
{
 800b57c:	b507      	push	{r0, r1, r2, lr}
    uint64_t val = *(const uint64_t*)value;
 800b57e:	e9d1 2300 	ldrd	r2, r3, [r1]
    bytes[1] = (pb_byte_t)((val >> 8) & 0xFF);
 800b582:	0a11      	lsrs	r1, r2, #8
    bytes[0] = (pb_byte_t)(val & 0xFF);
 800b584:	f88d 2000 	strb.w	r2, [sp]
    bytes[4] = (pb_byte_t)((val >> 32) & 0xFF);
 800b588:	f88d 3004 	strb.w	r3, [sp, #4]
    bytes[1] = (pb_byte_t)((val >> 8) & 0xFF);
 800b58c:	f88d 1001 	strb.w	r1, [sp, #1]
    bytes[2] = (pb_byte_t)((val >> 16) & 0xFF);
 800b590:	0c11      	lsrs	r1, r2, #16
    bytes[3] = (pb_byte_t)((val >> 24) & 0xFF);
 800b592:	0e12      	lsrs	r2, r2, #24
    bytes[2] = (pb_byte_t)((val >> 16) & 0xFF);
 800b594:	f88d 1002 	strb.w	r1, [sp, #2]
    return pb_write(stream, bytes, 8);
 800b598:	4669      	mov	r1, sp
    bytes[3] = (pb_byte_t)((val >> 24) & 0xFF);
 800b59a:	f88d 2003 	strb.w	r2, [sp, #3]
    bytes[5] = (pb_byte_t)((val >> 40) & 0xFF);
 800b59e:	0a1a      	lsrs	r2, r3, #8
 800b5a0:	f88d 2005 	strb.w	r2, [sp, #5]
    bytes[6] = (pb_byte_t)((val >> 48) & 0xFF);
 800b5a4:	0c1a      	lsrs	r2, r3, #16
    bytes[7] = (pb_byte_t)((val >> 56) & 0xFF);
 800b5a6:	0e1b      	lsrs	r3, r3, #24
    bytes[6] = (pb_byte_t)((val >> 48) & 0xFF);
 800b5a8:	f88d 2006 	strb.w	r2, [sp, #6]
    return pb_write(stream, bytes, 8);
 800b5ac:	2208      	movs	r2, #8
    bytes[7] = (pb_byte_t)((val >> 56) & 0xFF);
 800b5ae:	f88d 3007 	strb.w	r3, [sp, #7]
    return pb_write(stream, bytes, 8);
 800b5b2:	f7ff ff0b 	bl	800b3cc <pb_write>
}
 800b5b6:	b003      	add	sp, #12
 800b5b8:	f85d fb04 	ldr.w	pc, [sp], #4

0800b5bc <pb_enc_fixed64>:
    return pb_encode_fixed64(stream, src);
 800b5bc:	4611      	mov	r1, r2
 800b5be:	f7ff bfdd 	b.w	800b57c <pb_encode_fixed64>

0800b5c2 <pb_encode_tag>:
{
 800b5c2:	4613      	mov	r3, r2
    return pb_encode_varint(stream, tag);
 800b5c4:	ea41 02c2 	orr.w	r2, r1, r2, lsl #3
 800b5c8:	0f5b      	lsrs	r3, r3, #29
 800b5ca:	f7ff bf23 	b.w	800b414 <pb_encode_varint>
	...

0800b5d0 <pb_encode_tag_for_field>:
    switch (PB_LTYPE(field->type))
 800b5d0:	788a      	ldrb	r2, [r1, #2]
{
 800b5d2:	460b      	mov	r3, r1
    switch (PB_LTYPE(field->type))
 800b5d4:	f002 020f 	and.w	r2, r2, #15
 800b5d8:	2a09      	cmp	r2, #9
 800b5da:	d810      	bhi.n	800b5fe <pb_encode_tag_for_field+0x2e>
 800b5dc:	e8df f002 	tbb	[pc, r2]
 800b5e0:	050b0b0b 	.word	0x050b0b0b
 800b5e4:	0909090d 	.word	0x0909090d
 800b5e8:	090f      	.short	0x090f
 800b5ea:	2105      	movs	r1, #5
    return pb_encode_tag(stream, wiretype, field->tag);
 800b5ec:	881a      	ldrh	r2, [r3, #0]
 800b5ee:	f7ff bfe8 	b.w	800b5c2 <pb_encode_tag>
            wiretype = PB_WT_STRING;
 800b5f2:	2102      	movs	r1, #2
            break;
 800b5f4:	e7fa      	b.n	800b5ec <pb_encode_tag_for_field+0x1c>
            wiretype = PB_WT_VARINT;
 800b5f6:	2100      	movs	r1, #0
 800b5f8:	e7f8      	b.n	800b5ec <pb_encode_tag_for_field+0x1c>
            wiretype = PB_WT_64BIT;
 800b5fa:	2101      	movs	r1, #1
 800b5fc:	e7f6      	b.n	800b5ec <pb_encode_tag_for_field+0x1c>
            PB_RETURN_ERROR(stream, "invalid field type");
 800b5fe:	6903      	ldr	r3, [r0, #16]
 800b600:	4a03      	ldr	r2, [pc, #12]	; (800b610 <pb_encode_tag_for_field+0x40>)
 800b602:	2b00      	cmp	r3, #0
 800b604:	bf08      	it	eq
 800b606:	4613      	moveq	r3, r2
 800b608:	6103      	str	r3, [r0, #16]
}
 800b60a:	2000      	movs	r0, #0
 800b60c:	4770      	bx	lr
 800b60e:	bf00      	nop
 800b610:	08016a9e 	.word	0x08016a9e

0800b614 <encode_field>:
{
 800b614:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b618:	4616      	mov	r6, r2
    switch (PB_ATYPE(field->type))
 800b61a:	788a      	ldrb	r2, [r1, #2]
{
 800b61c:	b086      	sub	sp, #24
 800b61e:	4605      	mov	r5, r0
    switch (PB_ATYPE(field->type))
 800b620:	f002 03c0 	and.w	r3, r2, #192	; 0xc0
{
 800b624:	460c      	mov	r4, r1
    switch (PB_ATYPE(field->type))
 800b626:	2b40      	cmp	r3, #64	; 0x40
 800b628:	f000 80dd 	beq.w	800b7e6 <encode_field+0x1d2>
 800b62c:	0653      	lsls	r3, r2, #25
 800b62e:	d41b      	bmi.n	800b668 <encode_field+0x54>
    func = PB_ENCODERS[PB_LTYPE(field->type)];
 800b630:	4b75      	ldr	r3, [pc, #468]	; (800b808 <encode_field+0x1f4>)
 800b632:	f002 010f 	and.w	r1, r2, #15
 800b636:	f853 7021 	ldr.w	r7, [r3, r1, lsl #2]
    if (field->size_offset)
 800b63a:	f9b4 3005 	ldrsh.w	r3, [r4, #5]
 800b63e:	b1b3      	cbz	r3, 800b66e <encode_field+0x5a>
        pSize = (const char*)pData + field->size_offset;
 800b640:	4433      	add	r3, r6
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 800b642:	78a2      	ldrb	r2, [r4, #2]
 800b644:	f002 00c0 	and.w	r0, r2, #192	; 0xc0
 800b648:	2880      	cmp	r0, #128	; 0x80
 800b64a:	d105      	bne.n	800b658 <encode_field+0x44>
        pData = *(const void* const*)pData;
 800b64c:	6836      	ldr	r6, [r6, #0]
        implicit_has = (pData != NULL);
 800b64e:	1e31      	subs	r1, r6, #0
 800b650:	bf18      	it	ne
 800b652:	2101      	movne	r1, #1
 800b654:	f88d 1003 	strb.w	r1, [sp, #3]
    switch (PB_HTYPE(field->type))
 800b658:	f002 0130 	and.w	r1, r2, #48	; 0x30
 800b65c:	2920      	cmp	r1, #32
 800b65e:	d03e      	beq.n	800b6de <encode_field+0xca>
 800b660:	d818      	bhi.n	800b694 <encode_field+0x80>
 800b662:	b361      	cbz	r1, 800b6be <encode_field+0xaa>
 800b664:	2910      	cmp	r1, #16
 800b666:	d033      	beq.n	800b6d0 <encode_field+0xbc>
            PB_RETURN_ERROR(stream, "invalid field type");
 800b668:	692b      	ldr	r3, [r5, #16]
 800b66a:	4a68      	ldr	r2, [pc, #416]	; (800b80c <encode_field+0x1f8>)
 800b66c:	e02b      	b.n	800b6c6 <encode_field+0xb2>
    else if (PB_HTYPE(field->type) == PB_HTYPE_OPTIONAL)
 800b66e:	f002 0230 	and.w	r2, r2, #48	; 0x30
 800b672:	2a10      	cmp	r2, #16
 800b674:	d10a      	bne.n	800b68c <encode_field+0x78>
        implicit_has = !pb_check_proto3_default_value(field, pData);
 800b676:	4631      	mov	r1, r6
 800b678:	4620      	mov	r0, r4
 800b67a:	f7ff fe5a 	bl	800b332 <pb_check_proto3_default_value>
 800b67e:	f080 0001 	eor.w	r0, r0, #1
 800b682:	f88d 0003 	strb.w	r0, [sp, #3]
    const void *pSize = &implicit_has;
 800b686:	f10d 0303 	add.w	r3, sp, #3
 800b68a:	e7da      	b.n	800b642 <encode_field+0x2e>
        implicit_has = true;
 800b68c:	2301      	movs	r3, #1
 800b68e:	f88d 3003 	strb.w	r3, [sp, #3]
 800b692:	e7f8      	b.n	800b686 <encode_field+0x72>
    switch (PB_HTYPE(field->type))
 800b694:	2930      	cmp	r1, #48	; 0x30
 800b696:	d1e7      	bne.n	800b668 <encode_field+0x54>
            if (*(const pb_size_t*)pSize == field->tag)
 800b698:	881a      	ldrh	r2, [r3, #0]
 800b69a:	8823      	ldrh	r3, [r4, #0]
 800b69c:	429a      	cmp	r2, r3
 800b69e:	d11a      	bne.n	800b6d6 <encode_field+0xc2>
                if (!pb_encode_tag_for_field(stream, field))
 800b6a0:	4621      	mov	r1, r4
 800b6a2:	4628      	mov	r0, r5
 800b6a4:	f7ff ff94 	bl	800b5d0 <pb_encode_tag_for_field>
 800b6a8:	2800      	cmp	r0, #0
 800b6aa:	f000 8090 	beq.w	800b7ce <encode_field+0x1ba>
                if (!func(stream, field, pData))
 800b6ae:	4632      	mov	r2, r6
 800b6b0:	4621      	mov	r1, r4
 800b6b2:	4628      	mov	r0, r5
 800b6b4:	463b      	mov	r3, r7
}
 800b6b6:	b006      	add	sp, #24
 800b6b8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
                if (!func(stream, field, pData))
 800b6bc:	4718      	bx	r3
            if (!pData)
 800b6be:	2e00      	cmp	r6, #0
 800b6c0:	d1ee      	bne.n	800b6a0 <encode_field+0x8c>
                PB_RETURN_ERROR(stream, "missing required field");
 800b6c2:	692b      	ldr	r3, [r5, #16]
 800b6c4:	4a52      	ldr	r2, [pc, #328]	; (800b810 <encode_field+0x1fc>)
            PB_RETURN_ERROR(stream, "invalid field type");
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	bf08      	it	eq
 800b6ca:	4613      	moveq	r3, r2
 800b6cc:	612b      	str	r3, [r5, #16]
 800b6ce:	e07e      	b.n	800b7ce <encode_field+0x1ba>
            if (*(const bool*)pSize)
 800b6d0:	781b      	ldrb	r3, [r3, #0]
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d1e4      	bne.n	800b6a0 <encode_field+0x8c>
    return true;
 800b6d6:	2001      	movs	r0, #1
}
 800b6d8:	b006      	add	sp, #24
 800b6da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            if (field->size_offset != 0) {
 800b6de:	f9b4 1005 	ldrsh.w	r1, [r4, #5]
 800b6e2:	b169      	cbz	r1, 800b700 <encode_field+0xec>
                count = *(const pb_size_t*)pSize;
 800b6e4:	f8b3 8000 	ldrh.w	r8, [r3]
    if (count == 0)
 800b6e8:	f1b8 0f00 	cmp.w	r8, #0
 800b6ec:	d0f3      	beq.n	800b6d6 <encode_field+0xc2>
    if (PB_ATYPE(field->type) != PB_ATYPE_POINTER && count > field->array_size)
 800b6ee:	2880      	cmp	r0, #128	; 0x80
 800b6f0:	d009      	beq.n	800b706 <encode_field+0xf2>
 800b6f2:	f8b4 3009 	ldrh.w	r3, [r4, #9]
 800b6f6:	4598      	cmp	r8, r3
 800b6f8:	d905      	bls.n	800b706 <encode_field+0xf2>
        PB_RETURN_ERROR(stream, "array max size exceeded");
 800b6fa:	692b      	ldr	r3, [r5, #16]
 800b6fc:	4a45      	ldr	r2, [pc, #276]	; (800b814 <encode_field+0x200>)
 800b6fe:	e7e2      	b.n	800b6c6 <encode_field+0xb2>
                count = field->array_size;
 800b700:	f8b4 8009 	ldrh.w	r8, [r4, #9]
 800b704:	e7f0      	b.n	800b6e8 <encode_field+0xd4>
    if (PB_LTYPE(field->type) <= PB_LTYPE_LAST_PACKABLE)
 800b706:	f002 020f 	and.w	r2, r2, #15
 800b70a:	2a04      	cmp	r2, #4
 800b70c:	d849      	bhi.n	800b7a2 <encode_field+0x18e>
        if (!pb_encode_tag(stream, PB_WT_STRING, field->tag))
 800b70e:	8822      	ldrh	r2, [r4, #0]
 800b710:	2102      	movs	r1, #2
 800b712:	4628      	mov	r0, r5
 800b714:	f7ff ff55 	bl	800b5c2 <pb_encode_tag>
 800b718:	2800      	cmp	r0, #0
 800b71a:	d058      	beq.n	800b7ce <encode_field+0x1ba>
        if (PB_LTYPE(field->type) == PB_LTYPE_FIXED32)
 800b71c:	78a3      	ldrb	r3, [r4, #2]
 800b71e:	f003 030f 	and.w	r3, r3, #15
 800b722:	2b03      	cmp	r3, #3
 800b724:	d111      	bne.n	800b74a <encode_field+0x136>
            size = 4 * count;
 800b726:	ea4f 0988 	mov.w	r9, r8, lsl #2
        if (!pb_encode_varint(stream, (pb_uint64_t)size))
 800b72a:	464a      	mov	r2, r9
 800b72c:	2300      	movs	r3, #0
 800b72e:	4628      	mov	r0, r5
 800b730:	f7ff fe70 	bl	800b414 <pb_encode_varint>
 800b734:	2800      	cmp	r0, #0
 800b736:	d04a      	beq.n	800b7ce <encode_field+0x1ba>
        if (stream->callback == NULL)
 800b738:	6829      	ldr	r1, [r5, #0]
 800b73a:	bb19      	cbnz	r1, 800b784 <encode_field+0x170>
            return pb_write(stream, NULL, size); /* Just sizing.. */
 800b73c:	464a      	mov	r2, r9
 800b73e:	4628      	mov	r0, r5
}
 800b740:	b006      	add	sp, #24
 800b742:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
            return pb_write(stream, NULL, size); /* Just sizing.. */
 800b746:	f7ff be41 	b.w	800b3cc <pb_write>
        else if (PB_LTYPE(field->type) == PB_LTYPE_FIXED64)
 800b74a:	2b04      	cmp	r3, #4
 800b74c:	d102      	bne.n	800b754 <encode_field+0x140>
            size = 8 * count;
 800b74e:	ea4f 09c8 	mov.w	r9, r8, lsl #3
 800b752:	e7ea      	b.n	800b72a <encode_field+0x116>
            pb_ostream_t sizestream = PB_OSTREAM_SIZING;
 800b754:	46b2      	mov	sl, r6
            for (i = 0; i < count; i++)
 800b756:	f04f 0900 	mov.w	r9, #0
            pb_ostream_t sizestream = PB_OSTREAM_SIZING;
 800b75a:	2214      	movs	r2, #20
 800b75c:	2100      	movs	r1, #0
 800b75e:	a801      	add	r0, sp, #4
 800b760:	f007 fc2c 	bl	8012fbc <memset>
                if (!func(&sizestream, field, p))
 800b764:	4652      	mov	r2, sl
 800b766:	4621      	mov	r1, r4
 800b768:	a801      	add	r0, sp, #4
 800b76a:	47b8      	blx	r7
 800b76c:	2800      	cmp	r0, #0
 800b76e:	d0b3      	beq.n	800b6d8 <encode_field+0xc4>
            for (i = 0; i < count; i++)
 800b770:	f109 0901 	add.w	r9, r9, #1
                p = (const char*)p + field->data_size;
 800b774:	f8b4 3007 	ldrh.w	r3, [r4, #7]
            for (i = 0; i < count; i++)
 800b778:	45c8      	cmp	r8, r9
                p = (const char*)p + field->data_size;
 800b77a:	449a      	add	sl, r3
            for (i = 0; i < count; i++)
 800b77c:	d8f2      	bhi.n	800b764 <encode_field+0x150>
            size = sizestream.bytes_written;
 800b77e:	f8dd 9010 	ldr.w	r9, [sp, #16]
 800b782:	e7d2      	b.n	800b72a <encode_field+0x116>
        for (i = 0; i < count; i++)
 800b784:	f04f 0900 	mov.w	r9, #0
            if (!func(stream, field, p))
 800b788:	4632      	mov	r2, r6
 800b78a:	4621      	mov	r1, r4
 800b78c:	4628      	mov	r0, r5
 800b78e:	47b8      	blx	r7
 800b790:	b1e8      	cbz	r0, 800b7ce <encode_field+0x1ba>
        for (i = 0; i < count; i++)
 800b792:	f109 0901 	add.w	r9, r9, #1
            p = (const char*)p + field->data_size;
 800b796:	f8b4 3007 	ldrh.w	r3, [r4, #7]
        for (i = 0; i < count; i++)
 800b79a:	45c8      	cmp	r8, r9
            p = (const char*)p + field->data_size;
 800b79c:	441e      	add	r6, r3
        for (i = 0; i < count; i++)
 800b79e:	d8f3      	bhi.n	800b788 <encode_field+0x174>
 800b7a0:	e799      	b.n	800b6d6 <encode_field+0xc2>
        for (i = 0; i < count; i++)
 800b7a2:	f04f 0900 	mov.w	r9, #0
            if (!pb_encode_tag_for_field(stream, field))
 800b7a6:	4621      	mov	r1, r4
 800b7a8:	4628      	mov	r0, r5
 800b7aa:	f7ff ff11 	bl	800b5d0 <pb_encode_tag_for_field>
 800b7ae:	b170      	cbz	r0, 800b7ce <encode_field+0x1ba>
            if (PB_ATYPE(field->type) == PB_ATYPE_POINTER &&
 800b7b0:	78a3      	ldrb	r3, [r4, #2]
 800b7b2:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
 800b7b6:	2a80      	cmp	r2, #128	; 0x80
 800b7b8:	d113      	bne.n	800b7e2 <encode_field+0x1ce>
                (PB_LTYPE(field->type) == PB_LTYPE_STRING ||
 800b7ba:	f003 030f 	and.w	r3, r3, #15
 800b7be:	3b05      	subs	r3, #5
            if (PB_ATYPE(field->type) == PB_ATYPE_POINTER &&
 800b7c0:	2b01      	cmp	r3, #1
 800b7c2:	d80e      	bhi.n	800b7e2 <encode_field+0x1ce>
                if (!func(stream, field, *(const void* const*)p))
 800b7c4:	6832      	ldr	r2, [r6, #0]
                if (!func(stream, field, p))
 800b7c6:	4621      	mov	r1, r4
 800b7c8:	4628      	mov	r0, r5
 800b7ca:	47b8      	blx	r7
 800b7cc:	b908      	cbnz	r0, 800b7d2 <encode_field+0x1be>
            PB_RETURN_ERROR(stream, "invalid field type");
 800b7ce:	2000      	movs	r0, #0
 800b7d0:	e782      	b.n	800b6d8 <encode_field+0xc4>
        for (i = 0; i < count; i++)
 800b7d2:	f109 0901 	add.w	r9, r9, #1
            p = (const char*)p + field->data_size;
 800b7d6:	f8b4 3007 	ldrh.w	r3, [r4, #7]
        for (i = 0; i < count; i++)
 800b7da:	45c8      	cmp	r8, r9
            p = (const char*)p + field->data_size;
 800b7dc:	441e      	add	r6, r3
        for (i = 0; i < count; i++)
 800b7de:	d8e2      	bhi.n	800b7a6 <encode_field+0x192>
 800b7e0:	e779      	b.n	800b6d6 <encode_field+0xc2>
                if (!func(stream, field, p))
 800b7e2:	4632      	mov	r2, r6
 800b7e4:	e7ef      	b.n	800b7c6 <encode_field+0x1b2>
    if (callback->funcs.encode != NULL)
 800b7e6:	6833      	ldr	r3, [r6, #0]
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	f43f af74 	beq.w	800b6d6 <encode_field+0xc2>
        if (!callback->funcs.encode(stream, field, arg))
 800b7ee:	1d32      	adds	r2, r6, #4
 800b7f0:	4798      	blx	r3
 800b7f2:	2800      	cmp	r0, #0
 800b7f4:	f47f af6f 	bne.w	800b6d6 <encode_field+0xc2>
            PB_RETURN_ERROR(stream, "callback error");
 800b7f8:	692b      	ldr	r3, [r5, #16]
 800b7fa:	4a07      	ldr	r2, [pc, #28]	; (800b818 <encode_field+0x204>)
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	bf08      	it	eq
 800b800:	4613      	moveq	r3, r2
 800b802:	612b      	str	r3, [r5, #16]
 800b804:	e768      	b.n	800b6d8 <encode_field+0xc4>
 800b806:	bf00      	nop
 800b808:	08016b98 	.word	0x08016b98
 800b80c:	08016a9e 	.word	0x08016a9e
 800b810:	08016ae2 	.word	0x08016ae2
 800b814:	08016b48 	.word	0x08016b48
 800b818:	08016b60 	.word	0x08016b60

0800b81c <pb_encode>:
{
 800b81c:	b530      	push	{r4, r5, lr}
 800b81e:	b087      	sub	sp, #28
 800b820:	4605      	mov	r5, r0
    if (!pb_field_iter_begin(&iter, fields, pb_const_cast(src_struct)))
 800b822:	4668      	mov	r0, sp
 800b824:	f7fe ff6a 	bl	800a6fc <pb_field_iter_begin>
 800b828:	b910      	cbnz	r0, 800b830 <pb_encode+0x14>
        return true; /* Empty message type */
 800b82a:	2001      	movs	r0, #1
}
 800b82c:	b007      	add	sp, #28
 800b82e:	bd30      	pop	{r4, r5, pc}
        if (PB_LTYPE(iter.pos->type) == PB_LTYPE_EXTENSION)
 800b830:	9901      	ldr	r1, [sp, #4]
            if (!encode_extension_field(stream, iter.pos, iter.pData))
 800b832:	9a04      	ldr	r2, [sp, #16]
        if (PB_LTYPE(iter.pos->type) == PB_LTYPE_EXTENSION)
 800b834:	788b      	ldrb	r3, [r1, #2]
 800b836:	f003 030f 	and.w	r3, r3, #15
 800b83a:	2b08      	cmp	r3, #8
 800b83c:	d11c      	bne.n	800b878 <pb_encode+0x5c>
    const pb_extension_t *extension = *(const pb_extension_t* const *)pData;
 800b83e:	6814      	ldr	r4, [r2, #0]
    while (extension)
 800b840:	b91c      	cbnz	r4, 800b84a <pb_encode+0x2e>
    } while (pb_field_iter_next(&iter));
 800b842:	4668      	mov	r0, sp
 800b844:	f7fe ff6c 	bl	800a720 <pb_field_iter_next>
 800b848:	e7ee      	b.n	800b828 <pb_encode+0xc>
        if (extension->type->encode)
 800b84a:	6823      	ldr	r3, [r4, #0]
 800b84c:	685a      	ldr	r2, [r3, #4]
 800b84e:	b12a      	cbz	r2, 800b85c <pb_encode+0x40>
            status = extension->type->encode(stream, extension);
 800b850:	4621      	mov	r1, r4
 800b852:	4628      	mov	r0, r5
 800b854:	4790      	blx	r2
        if (!status)
 800b856:	b968      	cbnz	r0, 800b874 <pb_encode+0x58>
                return false;
 800b858:	2000      	movs	r0, #0
 800b85a:	e7e7      	b.n	800b82c <pb_encode+0x10>
    const pb_field_t *field = (const pb_field_t*)extension->type->arg;
 800b85c:	6899      	ldr	r1, [r3, #8]
        return encode_field(stream, field, extension->dest);
 800b85e:	4628      	mov	r0, r5
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 800b860:	788b      	ldrb	r3, [r1, #2]
 800b862:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800b866:	2b80      	cmp	r3, #128	; 0x80
        return encode_field(stream, field, &extension->dest);
 800b868:	bf0c      	ite	eq
 800b86a:	1d22      	addeq	r2, r4, #4
        return encode_field(stream, field, extension->dest);
 800b86c:	6862      	ldrne	r2, [r4, #4]
 800b86e:	f7ff fed1 	bl	800b614 <encode_field>
 800b872:	e7f0      	b.n	800b856 <pb_encode+0x3a>
        extension = extension->next;
 800b874:	68a4      	ldr	r4, [r4, #8]
 800b876:	e7e3      	b.n	800b840 <pb_encode+0x24>
            if (!encode_field(stream, iter.pos, iter.pData))
 800b878:	4628      	mov	r0, r5
 800b87a:	f7ff fecb 	bl	800b614 <encode_field>
 800b87e:	2800      	cmp	r0, #0
 800b880:	d1df      	bne.n	800b842 <pb_encode+0x26>
 800b882:	e7e9      	b.n	800b858 <pb_encode+0x3c>

0800b884 <pb_encode_string>:
{
 800b884:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
 800b886:	2300      	movs	r3, #0
{
 800b888:	4604      	mov	r4, r0
 800b88a:	4615      	mov	r5, r2
 800b88c:	9101      	str	r1, [sp, #4]
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
 800b88e:	f7ff fdc1 	bl	800b414 <pb_encode_varint>
 800b892:	b138      	cbz	r0, 800b8a4 <pb_encode_string+0x20>
    return pb_write(stream, buffer, size);
 800b894:	462a      	mov	r2, r5
 800b896:	9901      	ldr	r1, [sp, #4]
 800b898:	4620      	mov	r0, r4
}
 800b89a:	b003      	add	sp, #12
 800b89c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return pb_write(stream, buffer, size);
 800b8a0:	f7ff bd94 	b.w	800b3cc <pb_write>
}
 800b8a4:	b003      	add	sp, #12
 800b8a6:	bd30      	pop	{r4, r5, pc}

0800b8a8 <pb_enc_fixed_length_bytes>:
    
    return pb_encode_submessage(stream, (const pb_field_t*)field->ptr, src);
}

static bool checkreturn pb_enc_fixed_length_bytes(pb_ostream_t *stream, const pb_field_t *field, const void *src)
{
 800b8a8:	4613      	mov	r3, r2
    return pb_encode_string(stream, (const pb_byte_t*)src, field->data_size);
 800b8aa:	f8b1 2007 	ldrh.w	r2, [r1, #7]
 800b8ae:	4619      	mov	r1, r3
 800b8b0:	f7ff bfe8 	b.w	800b884 <pb_encode_string>

0800b8b4 <pb_enc_string>:
{
 800b8b4:	b410      	push	{r4}
    size_t max_size = field->data_size;
 800b8b6:	f8b1 3007 	ldrh.w	r3, [r1, #7]
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 800b8ba:	7889      	ldrb	r1, [r1, #2]
 800b8bc:	f001 01c0 	and.w	r1, r1, #192	; 0xc0
    size_t max_size = field->data_size;
 800b8c0:	2980      	cmp	r1, #128	; 0x80
    if (src == NULL)
 800b8c2:	4611      	mov	r1, r2
    size_t max_size = field->data_size;
 800b8c4:	bf08      	it	eq
 800b8c6:	f04f 33ff 	moveq.w	r3, #4294967295
    if (src == NULL)
 800b8ca:	b122      	cbz	r2, 800b8d6 <pb_enc_string+0x22>
    size_t size = 0;
 800b8cc:	2200      	movs	r2, #0
        while (size < max_size && *p != '\0')
 800b8ce:	429a      	cmp	r2, r3
 800b8d0:	d001      	beq.n	800b8d6 <pb_enc_string+0x22>
 800b8d2:	5c8c      	ldrb	r4, [r1, r2]
 800b8d4:	b91c      	cbnz	r4, 800b8de <pb_enc_string+0x2a>
}
 800b8d6:	f85d 4b04 	ldr.w	r4, [sp], #4
    return pb_encode_string(stream, (const pb_byte_t*)src, size);
 800b8da:	f7ff bfd3 	b.w	800b884 <pb_encode_string>
            size++;
 800b8de:	3201      	adds	r2, #1
            p++;
 800b8e0:	e7f5      	b.n	800b8ce <pb_enc_string+0x1a>
	...

0800b8e4 <pb_enc_bytes>:
{
 800b8e4:	b470      	push	{r4, r5, r6}
 800b8e6:	4603      	mov	r3, r0
 800b8e8:	460c      	mov	r4, r1
    if (src == NULL)
 800b8ea:	4611      	mov	r1, r2
 800b8ec:	b912      	cbnz	r2, 800b8f4 <pb_enc_bytes+0x10>
}
 800b8ee:	bc70      	pop	{r4, r5, r6}
    return pb_encode_string(stream, bytes->bytes, bytes->size);
 800b8f0:	f7ff bfc8 	b.w	800b884 <pb_encode_string>
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 800b8f4:	78a0      	ldrb	r0, [r4, #2]
        PB_BYTES_ARRAY_T_ALLOCSIZE(bytes->size) > field->data_size)
 800b8f6:	8812      	ldrh	r2, [r2, #0]
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 800b8f8:	f010 00c0 	ands.w	r0, r0, #192	; 0xc0
 800b8fc:	d104      	bne.n	800b908 <pb_enc_bytes+0x24>
        PB_BYTES_ARRAY_T_ALLOCSIZE(bytes->size) > field->data_size)
 800b8fe:	1c95      	adds	r5, r2, #2
 800b900:	f8b4 6007 	ldrh.w	r6, [r4, #7]
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 800b904:	42b5      	cmp	r5, r6
 800b906:	d802      	bhi.n	800b90e <pb_enc_bytes+0x2a>
    return pb_encode_string(stream, bytes->bytes, bytes->size);
 800b908:	3102      	adds	r1, #2
 800b90a:	4618      	mov	r0, r3
 800b90c:	e7ef      	b.n	800b8ee <pb_enc_bytes+0xa>
        PB_RETURN_ERROR(stream, "bytes size exceeded");
 800b90e:	691a      	ldr	r2, [r3, #16]
 800b910:	4903      	ldr	r1, [pc, #12]	; (800b920 <pb_enc_bytes+0x3c>)
 800b912:	2a00      	cmp	r2, #0
 800b914:	bf08      	it	eq
 800b916:	460a      	moveq	r2, r1
}
 800b918:	bc70      	pop	{r4, r5, r6}
        PB_RETURN_ERROR(stream, "bytes size exceeded");
 800b91a:	611a      	str	r2, [r3, #16]
}
 800b91c:	4770      	bx	lr
 800b91e:	bf00      	nop
 800b920:	08016b6f 	.word	0x08016b6f

0800b924 <pb_encode_submessage>:
{
 800b924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b928:	b086      	sub	sp, #24
 800b92a:	460f      	mov	r7, r1
 800b92c:	4690      	mov	r8, r2
    pb_ostream_t substream = PB_OSTREAM_SIZING;
 800b92e:	2100      	movs	r1, #0
 800b930:	2214      	movs	r2, #20
{
 800b932:	4604      	mov	r4, r0
    pb_ostream_t substream = PB_OSTREAM_SIZING;
 800b934:	a801      	add	r0, sp, #4
 800b936:	f007 fb41 	bl	8012fbc <memset>
    if (!pb_encode(&substream, fields, src_struct))
 800b93a:	4642      	mov	r2, r8
 800b93c:	4639      	mov	r1, r7
 800b93e:	a801      	add	r0, sp, #4
 800b940:	f7ff ff6c 	bl	800b81c <pb_encode>
 800b944:	b910      	cbnz	r0, 800b94c <pb_encode_submessage+0x28>
        stream->errmsg = substream.errmsg;
 800b946:	9b05      	ldr	r3, [sp, #20]
    stream->errmsg = substream.errmsg;
 800b948:	6123      	str	r3, [r4, #16]
 800b94a:	e00d      	b.n	800b968 <pb_encode_submessage+0x44>
    size = substream.bytes_written;
 800b94c:	9e04      	ldr	r6, [sp, #16]
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
 800b94e:	2500      	movs	r5, #0
 800b950:	4620      	mov	r0, r4
 800b952:	4632      	mov	r2, r6
 800b954:	462b      	mov	r3, r5
 800b956:	f7ff fd5d 	bl	800b414 <pb_encode_varint>
 800b95a:	b128      	cbz	r0, 800b968 <pb_encode_submessage+0x44>
    if (stream->callback == NULL)
 800b95c:	6821      	ldr	r1, [r4, #0]
 800b95e:	b931      	cbnz	r1, 800b96e <pb_encode_submessage+0x4a>
        return pb_write(stream, NULL, size); /* Just sizing */
 800b960:	4632      	mov	r2, r6
 800b962:	4620      	mov	r0, r4
 800b964:	f7ff fd32 	bl	800b3cc <pb_write>
}
 800b968:	b006      	add	sp, #24
 800b96a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (stream->bytes_written + size > stream->max_size)
 800b96e:	68e3      	ldr	r3, [r4, #12]
 800b970:	68a2      	ldr	r2, [r4, #8]
 800b972:	4433      	add	r3, r6
 800b974:	4293      	cmp	r3, r2
 800b976:	d907      	bls.n	800b988 <pb_encode_submessage+0x64>
        PB_RETURN_ERROR(stream, "stream full");
 800b978:	6923      	ldr	r3, [r4, #16]
 800b97a:	4a0e      	ldr	r2, [pc, #56]	; (800b9b4 <pb_encode_submessage+0x90>)
        PB_RETURN_ERROR(stream, "submsg size changed");
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	bf08      	it	eq
 800b980:	4613      	moveq	r3, r2
 800b982:	4628      	mov	r0, r5
 800b984:	6123      	str	r3, [r4, #16]
 800b986:	e7ef      	b.n	800b968 <pb_encode_submessage+0x44>
    substream.state = stream->state;
 800b988:	6863      	ldr	r3, [r4, #4]
    status = pb_encode(&substream, fields, src_struct);
 800b98a:	4642      	mov	r2, r8
    substream.callback = stream->callback;
 800b98c:	9101      	str	r1, [sp, #4]
    status = pb_encode(&substream, fields, src_struct);
 800b98e:	a801      	add	r0, sp, #4
 800b990:	4639      	mov	r1, r7
    substream.max_size = size;
 800b992:	e9cd 3602 	strd	r3, r6, [sp, #8]
    substream.errmsg = NULL;
 800b996:	e9cd 5504 	strd	r5, r5, [sp, #16]
    status = pb_encode(&substream, fields, src_struct);
 800b99a:	f7ff ff3f 	bl	800b81c <pb_encode>
    stream->bytes_written += substream.bytes_written;
 800b99e:	9a04      	ldr	r2, [sp, #16]
 800b9a0:	68e3      	ldr	r3, [r4, #12]
    if (substream.bytes_written != size)
 800b9a2:	42b2      	cmp	r2, r6
    stream->bytes_written += substream.bytes_written;
 800b9a4:	4413      	add	r3, r2
 800b9a6:	60e3      	str	r3, [r4, #12]
    stream->state = substream.state;
 800b9a8:	9b02      	ldr	r3, [sp, #8]
 800b9aa:	6063      	str	r3, [r4, #4]
    stream->errmsg = substream.errmsg;
 800b9ac:	9b05      	ldr	r3, [sp, #20]
    if (substream.bytes_written != size)
 800b9ae:	d0cb      	beq.n	800b948 <pb_encode_submessage+0x24>
        PB_RETURN_ERROR(stream, "submsg size changed");
 800b9b0:	4a01      	ldr	r2, [pc, #4]	; (800b9b8 <pb_encode_submessage+0x94>)
 800b9b2:	e7e3      	b.n	800b97c <pb_encode_submessage+0x58>
 800b9b4:	08016b3c 	.word	0x08016b3c
 800b9b8:	08016b83 	.word	0x08016b83

0800b9bc <pb_enc_submessage>:
    if (field->ptr == NULL)
 800b9bc:	f8d1 100b 	ldr.w	r1, [r1, #11]
{
 800b9c0:	4603      	mov	r3, r0
    if (field->ptr == NULL)
 800b9c2:	b109      	cbz	r1, 800b9c8 <pb_enc_submessage+0xc>
    return pb_encode_submessage(stream, (const pb_field_t*)field->ptr, src);
 800b9c4:	f7ff bfae 	b.w	800b924 <pb_encode_submessage>
        PB_RETURN_ERROR(stream, "invalid field descriptor");
 800b9c8:	6902      	ldr	r2, [r0, #16]
 800b9ca:	4803      	ldr	r0, [pc, #12]	; (800b9d8 <pb_enc_submessage+0x1c>)
 800b9cc:	2a00      	cmp	r2, #0
 800b9ce:	bf08      	it	eq
 800b9d0:	4602      	moveq	r2, r0
}
 800b9d2:	4608      	mov	r0, r1
        PB_RETURN_ERROR(stream, "invalid field descriptor");
 800b9d4:	611a      	str	r2, [r3, #16]
}
 800b9d6:	4770      	bx	lr
 800b9d8:	08016af9 	.word	0x08016af9

0800b9dc <ai_version_get>:
 800b9dc:	0212      	lsls	r2, r2, #8
 800b9de:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800b9e2:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 800b9e6:	4770      	bx	lr

0800b9e8 <ai_platform_version_get>:
 800b9e8:	0e01      	lsrs	r1, r0, #24
 800b9ea:	2300      	movs	r3, #0
 800b9ec:	f3c0 4207 	ubfx	r2, r0, #16, #8
 800b9f0:	f3c0 2007 	ubfx	r0, r0, #8, #8
 800b9f4:	f361 0307 	bfi	r3, r1, #0, #8
 800b9f8:	b082      	sub	sp, #8
 800b9fa:	f362 230f 	bfi	r3, r2, #8, #8
 800b9fe:	f360 4317 	bfi	r3, r0, #16, #8
 800ba02:	f023 407f 	bic.w	r0, r3, #4278190080	; 0xff000000
 800ba06:	b002      	add	sp, #8
 800ba08:	4770      	bx	lr
 800ba0a:	bf00      	nop

0800ba0c <get_tensor_size>:
 800ba0c:	b111      	cbz	r1, 800ba14 <get_tensor_size+0x8>
 800ba0e:	6983      	ldr	r3, [r0, #24]
 800ba10:	6858      	ldr	r0, [r3, #4]
 800ba12:	4770      	bx	lr
 800ba14:	6883      	ldr	r3, [r0, #8]
 800ba16:	0a1b      	lsrs	r3, r3, #8
 800ba18:	d00a      	beq.n	800ba30 <get_tensor_size+0x24>
 800ba1a:	68c1      	ldr	r1, [r0, #12]
 800ba1c:	2001      	movs	r0, #1
 800ba1e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800ba22:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800ba26:	4299      	cmp	r1, r3
 800ba28:	fb02 f000 	mul.w	r0, r2, r0
 800ba2c:	d1f9      	bne.n	800ba22 <get_tensor_size+0x16>
 800ba2e:	4770      	bx	lr
 800ba30:	2001      	movs	r0, #1
 800ba32:	4770      	bx	lr

0800ba34 <get_tensor_byte_size>:
 800ba34:	b430      	push	{r4, r5}
 800ba36:	6985      	ldr	r5, [r0, #24]
 800ba38:	68c4      	ldr	r4, [r0, #12]
 800ba3a:	6941      	ldr	r1, [r0, #20]
 800ba3c:	4b06      	ldr	r3, [pc, #24]	; (800ba58 <get_tensor_byte_size+0x24>)
 800ba3e:	6828      	ldr	r0, [r5, #0]
 800ba40:	4a06      	ldr	r2, [pc, #24]	; (800ba5c <get_tensor_byte_size+0x28>)
 800ba42:	4003      	ands	r3, r0
 800ba44:	68c9      	ldr	r1, [r1, #12]
 800ba46:	68e0      	ldr	r0, [r4, #12]
 800ba48:	4293      	cmp	r3, r2
 800ba4a:	fb01 f000 	mul.w	r0, r1, r0
 800ba4e:	d101      	bne.n	800ba54 <get_tensor_byte_size+0x20>
 800ba50:	3007      	adds	r0, #7
 800ba52:	08c0      	lsrs	r0, r0, #3
 800ba54:	bc30      	pop	{r4, r5}
 800ba56:	4770      	bx	lr
 800ba58:	017fffff 	.word	0x017fffff
 800ba5c:	000400c0 	.word	0x000400c0

0800ba60 <ai_array_to_buffer_fmt>:
 800ba60:	f3c0 4343 	ubfx	r3, r0, #17, #4
 800ba64:	2b02      	cmp	r3, #2
 800ba66:	d050      	beq.n	800bb0a <ai_array_to_buffer_fmt+0xaa>
 800ba68:	f020 427e 	bic.w	r2, r0, #4261412864	; 0xfe000000
 800ba6c:	4b29      	ldr	r3, [pc, #164]	; (800bb14 <ai_array_to_buffer_fmt+0xb4>)
 800ba6e:	429a      	cmp	r2, r3
 800ba70:	d00b      	beq.n	800ba8a <ai_array_to_buffer_fmt+0x2a>
 800ba72:	dc1c      	bgt.n	800baae <ai_array_to_buffer_fmt+0x4e>
 800ba74:	4b28      	ldr	r3, [pc, #160]	; (800bb18 <ai_array_to_buffer_fmt+0xb8>)
 800ba76:	429a      	cmp	r2, r3
 800ba78:	d007      	beq.n	800ba8a <ai_array_to_buffer_fmt+0x2a>
 800ba7a:	dd0b      	ble.n	800ba94 <ai_array_to_buffer_fmt+0x34>
 800ba7c:	4b27      	ldr	r3, [pc, #156]	; (800bb1c <ai_array_to_buffer_fmt+0xbc>)
 800ba7e:	429a      	cmp	r2, r3
 800ba80:	d003      	beq.n	800ba8a <ai_array_to_buffer_fmt+0x2a>
 800ba82:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 800ba86:	429a      	cmp	r2, r3
 800ba88:	d131      	bne.n	800baee <ai_array_to_buffer_fmt+0x8e>
 800ba8a:	4613      	mov	r3, r2
 800ba8c:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800ba90:	4318      	orrs	r0, r3
 800ba92:	4770      	bx	lr
 800ba94:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800ba98:	429a      	cmp	r2, r3
 800ba9a:	d0f6      	beq.n	800ba8a <ai_array_to_buffer_fmt+0x2a>
 800ba9c:	dd2c      	ble.n	800baf8 <ai_array_to_buffer_fmt+0x98>
 800ba9e:	4b20      	ldr	r3, [pc, #128]	; (800bb20 <ai_array_to_buffer_fmt+0xc0>)
 800baa0:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800baa4:	429a      	cmp	r2, r3
 800baa6:	bf18      	it	ne
 800baa8:	2340      	movne	r3, #64	; 0x40
 800baaa:	4318      	orrs	r0, r3
 800baac:	4770      	bx	lr
 800baae:	4b1d      	ldr	r3, [pc, #116]	; (800bb24 <ai_array_to_buffer_fmt+0xc4>)
 800bab0:	429a      	cmp	r2, r3
 800bab2:	d0ea      	beq.n	800ba8a <ai_array_to_buffer_fmt+0x2a>
 800bab4:	dd0e      	ble.n	800bad4 <ai_array_to_buffer_fmt+0x74>
 800bab6:	4b1c      	ldr	r3, [pc, #112]	; (800bb28 <ai_array_to_buffer_fmt+0xc8>)
 800bab8:	429a      	cmp	r2, r3
 800baba:	d0e6      	beq.n	800ba8a <ai_array_to_buffer_fmt+0x2a>
 800babc:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 800bac0:	429a      	cmp	r2, r3
 800bac2:	d0e2      	beq.n	800ba8a <ai_array_to_buffer_fmt+0x2a>
 800bac4:	4b19      	ldr	r3, [pc, #100]	; (800bb2c <ai_array_to_buffer_fmt+0xcc>)
 800bac6:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800baca:	429a      	cmp	r2, r3
 800bacc:	bf18      	it	ne
 800bace:	2340      	movne	r3, #64	; 0x40
 800bad0:	4318      	orrs	r0, r3
 800bad2:	4770      	bx	lr
 800bad4:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800bad8:	429a      	cmp	r2, r3
 800bada:	d0d6      	beq.n	800ba8a <ai_array_to_buffer_fmt+0x2a>
 800badc:	3307      	adds	r3, #7
 800bade:	429a      	cmp	r2, r3
 800bae0:	d0d3      	beq.n	800ba8a <ai_array_to_buffer_fmt+0x2a>
 800bae2:	f2a3 3387 	subw	r3, r3, #903	; 0x387
 800bae6:	429a      	cmp	r2, r3
 800bae8:	bf18      	it	ne
 800baea:	2340      	movne	r3, #64	; 0x40
 800baec:	e7ce      	b.n	800ba8c <ai_array_to_buffer_fmt+0x2c>
 800baee:	4b10      	ldr	r3, [pc, #64]	; (800bb30 <ai_array_to_buffer_fmt+0xd0>)
 800baf0:	429a      	cmp	r2, r3
 800baf2:	bf18      	it	ne
 800baf4:	2340      	movne	r3, #64	; 0x40
 800baf6:	e7c9      	b.n	800ba8c <ai_array_to_buffer_fmt+0x2c>
 800baf8:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800bafc:	429a      	cmp	r2, r3
 800bafe:	d0c4      	beq.n	800ba8a <ai_array_to_buffer_fmt+0x2a>
 800bb00:	3380      	adds	r3, #128	; 0x80
 800bb02:	429a      	cmp	r2, r3
 800bb04:	bf18      	it	ne
 800bb06:	2340      	movne	r3, #64	; 0x40
 800bb08:	e7c0      	b.n	800ba8c <ai_array_to_buffer_fmt+0x2c>
 800bb0a:	4b0a      	ldr	r3, [pc, #40]	; (800bb34 <ai_array_to_buffer_fmt+0xd4>)
 800bb0c:	4003      	ands	r3, r0
 800bb0e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800bb12:	e7bb      	b.n	800ba8c <ai_array_to_buffer_fmt+0x2c>
 800bb14:	00840040 	.word	0x00840040
 800bb18:	00040840 	.word	0x00040840
 800bb1c:	00041040 	.word	0x00041040
 800bb20:	00040447 	.word	0x00040447
 800bb24:	00840840 	.word	0x00840840
 800bb28:	00841040 	.word	0x00841040
 800bb2c:	0084084f 	.word	0x0084084f
 800bb30:	0004084f 	.word	0x0004084f
 800bb34:	00803fff 	.word	0x00803fff

0800bb38 <ai_array_get_byte_size>:
 800bb38:	b319      	cbz	r1, 800bb82 <ai_array_get_byte_size+0x4a>
 800bb3a:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800bb3e:	f3c0 4243 	ubfx	r2, r0, #17, #4
 800bb42:	f3c0 5c41 	ubfx	ip, r0, #21, #2
 800bb46:	11c0      	asrs	r0, r0, #7
 800bb48:	fb03 f101 	mul.w	r1, r3, r1
 800bb4c:	2a04      	cmp	r2, #4
 800bb4e:	f101 0107 	add.w	r1, r1, #7
 800bb52:	f021 0107 	bic.w	r1, r1, #7
 800bb56:	fa21 f10c 	lsr.w	r1, r1, ip
 800bb5a:	d00b      	beq.n	800bb74 <ai_array_get_byte_size+0x3c>
 800bb5c:	2a08      	cmp	r2, #8
 800bb5e:	d002      	beq.n	800bb66 <ai_array_get_byte_size+0x2e>
 800bb60:	3107      	adds	r1, #7
 800bb62:	08c8      	lsrs	r0, r1, #3
 800bb64:	4770      	bx	lr
 800bb66:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800bb6a:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 800bb6e:	3107      	adds	r1, #7
 800bb70:	08c8      	lsrs	r0, r1, #3
 800bb72:	4770      	bx	lr
 800bb74:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800bb78:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 800bb7c:	3107      	adds	r1, #7
 800bb7e:	08c8      	lsrs	r0, r1, #3
 800bb80:	4770      	bx	lr
 800bb82:	4608      	mov	r0, r1
 800bb84:	4770      	bx	lr
 800bb86:	bf00      	nop

0800bb88 <ai_array_get_data_byte_size>:
 800bb88:	b161      	cbz	r1, 800bba4 <ai_array_get_data_byte_size+0x1c>
 800bb8a:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800bb8e:	f3c0 5241 	ubfx	r2, r0, #21, #2
 800bb92:	fb03 f101 	mul.w	r1, r3, r1
 800bb96:	1dc8      	adds	r0, r1, #7
 800bb98:	f020 0007 	bic.w	r0, r0, #7
 800bb9c:	40d0      	lsrs	r0, r2
 800bb9e:	3007      	adds	r0, #7
 800bba0:	08c0      	lsrs	r0, r0, #3
 800bba2:	4770      	bx	lr
 800bba4:	4608      	mov	r0, r1
 800bba6:	4770      	bx	lr

0800bba8 <ai_buffer_get_size>:
 800bba8:	b368      	cbz	r0, 800bc06 <ai_buffer_get_size+0x5e>
 800bbaa:	4b17      	ldr	r3, [pc, #92]	; (800bc08 <ai_buffer_get_size+0x60>)
 800bbac:	4a17      	ldr	r2, [pc, #92]	; (800bc0c <ai_buffer_get_size+0x64>)
 800bbae:	b410      	push	{r4}
 800bbb0:	6804      	ldr	r4, [r0, #0]
 800bbb2:	4023      	ands	r3, r4
 800bbb4:	4293      	cmp	r3, r2
 800bbb6:	d123      	bne.n	800bc00 <ai_buffer_get_size+0x58>
 800bbb8:	b311      	cbz	r1, 800bc00 <ai_buffer_get_size+0x58>
 800bbba:	6984      	ldr	r4, [r0, #24]
 800bbbc:	6862      	ldr	r2, [r4, #4]
 800bbbe:	321f      	adds	r2, #31
 800bbc0:	f022 021f 	bic.w	r2, r2, #31
 800bbc4:	7d03      	ldrb	r3, [r0, #20]
 800bbc6:	6941      	ldr	r1, [r0, #20]
 800bbc8:	f1a3 0301 	sub.w	r3, r3, #1
 800bbcc:	f3c1 2017 	ubfx	r0, r1, #8, #24
 800bbd0:	fab3 f383 	clz	r3, r3
 800bbd4:	095b      	lsrs	r3, r3, #5
 800bbd6:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 800bbda:	da0c      	bge.n	800bbf6 <ai_buffer_get_size+0x4e>
 800bbdc:	2b01      	cmp	r3, #1
 800bbde:	d103      	bne.n	800bbe8 <ai_buffer_get_size+0x40>
 800bbe0:	2802      	cmp	r0, #2
 800bbe2:	f04f 0302 	mov.w	r3, #2
 800bbe6:	d006      	beq.n	800bbf6 <ai_buffer_get_size+0x4e>
 800bbe8:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 800bbec:	3301      	adds	r3, #1
 800bbee:	4298      	cmp	r0, r3
 800bbf0:	fb01 f202 	mul.w	r2, r1, r2
 800bbf4:	d1f2      	bne.n	800bbdc <ai_buffer_get_size+0x34>
 800bbf6:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 800bbfa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bbfe:	4770      	bx	lr
 800bc00:	6984      	ldr	r4, [r0, #24]
 800bc02:	6862      	ldr	r2, [r4, #4]
 800bc04:	e7de      	b.n	800bbc4 <ai_buffer_get_size+0x1c>
 800bc06:	4770      	bx	lr
 800bc08:	017fffff 	.word	0x017fffff
 800bc0c:	000400c0 	.word	0x000400c0

0800bc10 <ai_buffer_get_byte_size>:
 800bc10:	b128      	cbz	r0, 800bc1e <ai_buffer_get_byte_size+0xe>
 800bc12:	f3c1 11c6 	ubfx	r1, r1, #7, #7
 800bc16:	fb01 f000 	mul.w	r0, r1, r0
 800bc1a:	3007      	adds	r0, #7
 800bc1c:	08c0      	lsrs	r0, r0, #3
 800bc1e:	4770      	bx	lr

0800bc20 <ai_buffer_array_sane>:
 800bc20:	b138      	cbz	r0, 800bc32 <ai_buffer_array_sane+0x12>
 800bc22:	6843      	ldr	r3, [r0, #4]
 800bc24:	b123      	cbz	r3, 800bc30 <ai_buffer_array_sane+0x10>
 800bc26:	8840      	ldrh	r0, [r0, #2]
 800bc28:	3800      	subs	r0, #0
 800bc2a:	bf18      	it	ne
 800bc2c:	2001      	movne	r0, #1
 800bc2e:	4770      	bx	lr
 800bc30:	4618      	mov	r0, r3
 800bc32:	4770      	bx	lr

0800bc34 <ai_buffer_array_item_set_address>:
 800bc34:	b150      	cbz	r0, 800bc4c <ai_buffer_array_item_set_address+0x18>
 800bc36:	6843      	ldr	r3, [r0, #4]
 800bc38:	b14b      	cbz	r3, 800bc4e <ai_buffer_array_item_set_address+0x1a>
 800bc3a:	8840      	ldrh	r0, [r0, #2]
 800bc3c:	b900      	cbnz	r0, 800bc40 <ai_buffer_array_item_set_address+0xc>
 800bc3e:	4770      	bx	lr
 800bc40:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800bc44:	2001      	movs	r0, #1
 800bc46:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800bc4a:	604a      	str	r2, [r1, #4]
 800bc4c:	4770      	bx	lr
 800bc4e:	4618      	mov	r0, r3
 800bc50:	4770      	bx	lr
 800bc52:	bf00      	nop

0800bc54 <_platform_observer_node_exec_cb>:
 800bc54:	2a00      	cmp	r2, #0
 800bc56:	d06c      	beq.n	800bd32 <_platform_observer_node_exec_cb+0xde>
 800bc58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bc5c:	6815      	ldr	r5, [r2, #0]
 800bc5e:	b085      	sub	sp, #20
 800bc60:	4614      	mov	r4, r2
 800bc62:	2d00      	cmp	r5, #0
 800bc64:	d067      	beq.n	800bd36 <_platform_observer_node_exec_cb+0xe2>
 800bc66:	8993      	ldrh	r3, [r2, #12]
 800bc68:	f240 2c02 	movw	ip, #514	; 0x202
 800bc6c:	89d2      	ldrh	r2, [r2, #14]
 800bc6e:	460e      	mov	r6, r1
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	f240 3102 	movw	r1, #770	; 0x302
 800bc76:	f102 32ff 	add.w	r2, r2, #4294967295
 800bc7a:	f240 3e01 	movw	lr, #769	; 0x301
 800bc7e:	bf18      	it	ne
 800bc80:	4667      	movne	r7, ip
 800bc82:	f240 2c01 	movw	ip, #513	; 0x201
 800bc86:	bf0d      	iteet	eq
 800bc88:	460f      	moveq	r7, r1
 800bc8a:	f44f 7901 	movne.w	r9, #516	; 0x204
 800bc8e:	46e6      	movne	lr, ip
 800bc90:	f44f 7941 	moveq.w	r9, #772	; 0x304
 800bc94:	f240 1c01 	movw	ip, #257	; 0x101
 800bc98:	bf1b      	ittet	ne
 800bc9a:	f04f 0804 	movne.w	r8, #4
 800bc9e:	f04f 0c01 	movne.w	ip, #1
 800bca2:	f44f 7882 	moveq.w	r8, #260	; 0x104
 800bca6:	2102      	movne	r1, #2
 800bca8:	bf08      	it	eq
 800bcaa:	f44f 7181 	moveq.w	r1, #258	; 0x102
 800bcae:	429a      	cmp	r2, r3
 800bcb0:	d013      	beq.n	800bcda <_platform_observer_node_exec_cb+0x86>
 800bcb2:	b148      	cbz	r0, 800bcc8 <_platform_observer_node_exec_cb+0x74>
 800bcb4:	2801      	cmp	r0, #1
 800bcb6:	d042      	beq.n	800bd3e <_platform_observer_node_exec_cb+0xea>
 800bcb8:	2802      	cmp	r0, #2
 800bcba:	d025      	beq.n	800bd08 <_platform_observer_node_exec_cb+0xb4>
 800bcbc:	2803      	cmp	r0, #3
 800bcbe:	d045      	beq.n	800bd4c <_platform_observer_node_exec_cb+0xf8>
 800bcc0:	2000      	movs	r0, #0
 800bcc2:	b005      	add	sp, #20
 800bcc4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bcc8:	68a2      	ldr	r2, [r4, #8]
 800bcca:	07d7      	lsls	r7, r2, #31
 800bccc:	d40b      	bmi.n	800bce6 <_platform_observer_node_exec_cb+0x92>
 800bcce:	3301      	adds	r3, #1
 800bcd0:	2000      	movs	r0, #0
 800bcd2:	81a3      	strh	r3, [r4, #12]
 800bcd4:	b005      	add	sp, #20
 800bcd6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bcda:	46c8      	mov	r8, r9
 800bcdc:	4639      	mov	r1, r7
 800bcde:	46f4      	mov	ip, lr
 800bce0:	2800      	cmp	r0, #0
 800bce2:	d1e7      	bne.n	800bcb4 <_platform_observer_node_exec_cb+0x60>
 800bce4:	e7f0      	b.n	800bcc8 <_platform_observer_node_exec_cb+0x74>
 800bce6:	f8ad 3000 	strh.w	r3, [sp]
 800bcea:	466a      	mov	r2, sp
 800bcec:	8873      	ldrh	r3, [r6, #2]
 800bcee:	4661      	mov	r1, ip
 800bcf0:	9002      	str	r0, [sp, #8]
 800bcf2:	f8ad 3004 	strh.w	r3, [sp, #4]
 800bcf6:	8833      	ldrh	r3, [r6, #0]
 800bcf8:	6860      	ldr	r0, [r4, #4]
 800bcfa:	f8ad 3002 	strh.w	r3, [sp, #2]
 800bcfe:	69b3      	ldr	r3, [r6, #24]
 800bd00:	9303      	str	r3, [sp, #12]
 800bd02:	47a8      	blx	r5
 800bd04:	89a3      	ldrh	r3, [r4, #12]
 800bd06:	e7e2      	b.n	800bcce <_platform_observer_node_exec_cb+0x7a>
 800bd08:	68a2      	ldr	r2, [r4, #8]
 800bd0a:	6126      	str	r6, [r4, #16]
 800bd0c:	0790      	lsls	r0, r2, #30
 800bd0e:	d5d7      	bpl.n	800bcc0 <_platform_observer_node_exec_cb+0x6c>
 800bd10:	f8ad 3000 	strh.w	r3, [sp]
 800bd14:	8873      	ldrh	r3, [r6, #2]
 800bd16:	8832      	ldrh	r2, [r6, #0]
 800bd18:	6860      	ldr	r0, [r4, #4]
 800bd1a:	2400      	movs	r4, #0
 800bd1c:	f8ad 3004 	strh.w	r3, [sp, #4]
 800bd20:	69b3      	ldr	r3, [r6, #24]
 800bd22:	f8ad 2002 	strh.w	r2, [sp, #2]
 800bd26:	466a      	mov	r2, sp
 800bd28:	e9cd 4302 	strd	r4, r3, [sp, #8]
 800bd2c:	47a8      	blx	r5
 800bd2e:	4620      	mov	r0, r4
 800bd30:	e7d0      	b.n	800bcd4 <_platform_observer_node_exec_cb+0x80>
 800bd32:	2001      	movs	r0, #1
 800bd34:	4770      	bx	lr
 800bd36:	2001      	movs	r0, #1
 800bd38:	b005      	add	sp, #20
 800bd3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bd3e:	2300      	movs	r3, #0
 800bd40:	6126      	str	r6, [r4, #16]
 800bd42:	4618      	mov	r0, r3
 800bd44:	81a3      	strh	r3, [r4, #12]
 800bd46:	b005      	add	sp, #20
 800bd48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bd4c:	68a2      	ldr	r2, [r4, #8]
 800bd4e:	0752      	lsls	r2, r2, #29
 800bd50:	d5bd      	bpl.n	800bcce <_platform_observer_node_exec_cb+0x7a>
 800bd52:	6922      	ldr	r2, [r4, #16]
 800bd54:	2000      	movs	r0, #0
 800bd56:	f8ad 3000 	strh.w	r3, [sp]
 800bd5a:	4641      	mov	r1, r8
 800bd5c:	8853      	ldrh	r3, [r2, #2]
 800bd5e:	f8ad 3004 	strh.w	r3, [sp, #4]
 800bd62:	8813      	ldrh	r3, [r2, #0]
 800bd64:	f8ad 3002 	strh.w	r3, [sp, #2]
 800bd68:	6993      	ldr	r3, [r2, #24]
 800bd6a:	466a      	mov	r2, sp
 800bd6c:	9002      	str	r0, [sp, #8]
 800bd6e:	9303      	str	r3, [sp, #12]
 800bd70:	6860      	ldr	r0, [r4, #4]
 800bd72:	47a8      	blx	r5
 800bd74:	89a3      	ldrh	r3, [r4, #12]
 800bd76:	e7aa      	b.n	800bcce <_platform_observer_node_exec_cb+0x7a>

0800bd78 <_ai_platform_acquire_crc>:
 800bd78:	2001      	movs	r0, #1
 800bd7a:	4770      	bx	lr

0800bd7c <_ai_platform_release_crc>:
 800bd7c:	4770      	bx	lr
 800bd7e:	bf00      	nop

0800bd80 <ai_platform_get_weights_map>:
 800bd80:	2900      	cmp	r1, #0
 800bd82:	bf18      	it	ne
 800bd84:	2800      	cmpne	r0, #0
 800bd86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd88:	bf0c      	ite	eq
 800bd8a:	2401      	moveq	r4, #1
 800bd8c:	2400      	movne	r4, #0
 800bd8e:	2a00      	cmp	r2, #0
 800bd90:	bf08      	it	eq
 800bd92:	f044 0401 	orreq.w	r4, r4, #1
 800bd96:	b114      	cbz	r4, 800bd9e <ai_platform_get_weights_map+0x1e>
 800bd98:	2400      	movs	r4, #0
 800bd9a:	4620      	mov	r0, r4
 800bd9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bd9e:	4616      	mov	r6, r2
 800bda0:	4b22      	ldr	r3, [pc, #136]	; (800be2c <ai_platform_get_weights_map+0xac>)
 800bda2:	6812      	ldr	r2, [r2, #0]
 800bda4:	4605      	mov	r5, r0
 800bda6:	460f      	mov	r7, r1
 800bda8:	429a      	cmp	r2, r3
 800bdaa:	d022      	beq.n	800bdf2 <ai_platform_get_weights_map+0x72>
 800bdac:	6870      	ldr	r0, [r6, #4]
 800bdae:	2800      	cmp	r0, #0
 800bdb0:	d0f2      	beq.n	800bd98 <ai_platform_get_weights_map+0x18>
 800bdb2:	6806      	ldr	r6, [r0, #0]
 800bdb4:	429e      	cmp	r6, r3
 800bdb6:	d006      	beq.n	800bdc6 <ai_platform_get_weights_map+0x46>
 800bdb8:	f1a1 0401 	sub.w	r4, r1, #1
 800bdbc:	6028      	str	r0, [r5, #0]
 800bdbe:	fab4 f484 	clz	r4, r4
 800bdc2:	0964      	lsrs	r4, r4, #5
 800bdc4:	e7e9      	b.n	800bd9a <ai_platform_get_weights_map+0x1a>
 800bdc6:	3d04      	subs	r5, #4
 800bdc8:	4602      	mov	r2, r0
 800bdca:	4621      	mov	r1, r4
 800bdcc:	e000      	b.n	800bdd0 <ai_platform_get_weights_map+0x50>
 800bdce:	4619      	mov	r1, r3
 800bdd0:	f852 3f04 	ldr.w	r3, [r2, #4]!
 800bdd4:	42b3      	cmp	r3, r6
 800bdd6:	d025      	beq.n	800be24 <ai_platform_get_weights_map+0xa4>
 800bdd8:	f845 3f04 	str.w	r3, [r5, #4]!
 800bddc:	1c4b      	adds	r3, r1, #1
 800bdde:	429f      	cmp	r7, r3
 800bde0:	d8f5      	bhi.n	800bdce <ai_platform_get_weights_map+0x4e>
 800bde2:	d1da      	bne.n	800bd9a <ai_platform_get_weights_map+0x1a>
 800bde4:	3102      	adds	r1, #2
 800bde6:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 800bdea:	42b3      	cmp	r3, r6
 800bdec:	d1d5      	bne.n	800bd9a <ai_platform_get_weights_map+0x1a>
 800bdee:	2401      	movs	r4, #1
 800bdf0:	e7d3      	b.n	800bd9a <ai_platform_get_weights_map+0x1a>
 800bdf2:	1d30      	adds	r0, r6, #4
 800bdf4:	f7ff ff14 	bl	800bc20 <ai_buffer_array_sane>
 800bdf8:	2800      	cmp	r0, #0
 800bdfa:	d0cd      	beq.n	800bd98 <ai_platform_get_weights_map+0x18>
 800bdfc:	88f3      	ldrh	r3, [r6, #6]
 800bdfe:	429f      	cmp	r7, r3
 800be00:	d1ca      	bne.n	800bd98 <ai_platform_get_weights_map+0x18>
 800be02:	3d04      	subs	r5, #4
 800be04:	4622      	mov	r2, r4
 800be06:	68b3      	ldr	r3, [r6, #8]
 800be08:	4423      	add	r3, r4
 800be0a:	341c      	adds	r4, #28
 800be0c:	685b      	ldr	r3, [r3, #4]
 800be0e:	b123      	cbz	r3, 800be1a <ai_platform_get_weights_map+0x9a>
 800be10:	3201      	adds	r2, #1
 800be12:	f845 3f04 	str.w	r3, [r5, #4]!
 800be16:	4297      	cmp	r7, r2
 800be18:	d8f5      	bhi.n	800be06 <ai_platform_get_weights_map+0x86>
 800be1a:	1abc      	subs	r4, r7, r2
 800be1c:	fab4 f484 	clz	r4, r4
 800be20:	0964      	lsrs	r4, r4, #5
 800be22:	e7ba      	b.n	800bd9a <ai_platform_get_weights_map+0x1a>
 800be24:	428f      	cmp	r7, r1
 800be26:	d1b8      	bne.n	800bd9a <ai_platform_get_weights_map+0x1a>
 800be28:	e7e1      	b.n	800bdee <ai_platform_get_weights_map+0x6e>
 800be2a:	bf00      	nop
 800be2c:	a1facade 	.word	0xa1facade

0800be30 <ai_platform_get_activations_map>:
 800be30:	2900      	cmp	r1, #0
 800be32:	bf18      	it	ne
 800be34:	2800      	cmpne	r0, #0
 800be36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be38:	bf0c      	ite	eq
 800be3a:	2401      	moveq	r4, #1
 800be3c:	2400      	movne	r4, #0
 800be3e:	2a00      	cmp	r2, #0
 800be40:	bf08      	it	eq
 800be42:	f044 0401 	orreq.w	r4, r4, #1
 800be46:	b114      	cbz	r4, 800be4e <ai_platform_get_activations_map+0x1e>
 800be48:	2400      	movs	r4, #0
 800be4a:	4620      	mov	r0, r4
 800be4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be4e:	4616      	mov	r6, r2
 800be50:	4b22      	ldr	r3, [pc, #136]	; (800bedc <ai_platform_get_activations_map+0xac>)
 800be52:	6812      	ldr	r2, [r2, #0]
 800be54:	4605      	mov	r5, r0
 800be56:	460f      	mov	r7, r1
 800be58:	429a      	cmp	r2, r3
 800be5a:	d022      	beq.n	800bea2 <ai_platform_get_activations_map+0x72>
 800be5c:	6a30      	ldr	r0, [r6, #32]
 800be5e:	2800      	cmp	r0, #0
 800be60:	d0f2      	beq.n	800be48 <ai_platform_get_activations_map+0x18>
 800be62:	6806      	ldr	r6, [r0, #0]
 800be64:	429e      	cmp	r6, r3
 800be66:	d006      	beq.n	800be76 <ai_platform_get_activations_map+0x46>
 800be68:	f1a1 0401 	sub.w	r4, r1, #1
 800be6c:	6028      	str	r0, [r5, #0]
 800be6e:	fab4 f484 	clz	r4, r4
 800be72:	0964      	lsrs	r4, r4, #5
 800be74:	e7e9      	b.n	800be4a <ai_platform_get_activations_map+0x1a>
 800be76:	3d04      	subs	r5, #4
 800be78:	4602      	mov	r2, r0
 800be7a:	4621      	mov	r1, r4
 800be7c:	e000      	b.n	800be80 <ai_platform_get_activations_map+0x50>
 800be7e:	4619      	mov	r1, r3
 800be80:	f852 3f04 	ldr.w	r3, [r2, #4]!
 800be84:	42b3      	cmp	r3, r6
 800be86:	d026      	beq.n	800bed6 <ai_platform_get_activations_map+0xa6>
 800be88:	f845 3f04 	str.w	r3, [r5, #4]!
 800be8c:	1c4b      	adds	r3, r1, #1
 800be8e:	429f      	cmp	r7, r3
 800be90:	d8f5      	bhi.n	800be7e <ai_platform_get_activations_map+0x4e>
 800be92:	d1da      	bne.n	800be4a <ai_platform_get_activations_map+0x1a>
 800be94:	3102      	adds	r1, #2
 800be96:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 800be9a:	42b3      	cmp	r3, r6
 800be9c:	d1d5      	bne.n	800be4a <ai_platform_get_activations_map+0x1a>
 800be9e:	2401      	movs	r4, #1
 800bea0:	e7d3      	b.n	800be4a <ai_platform_get_activations_map+0x1a>
 800bea2:	f106 000c 	add.w	r0, r6, #12
 800bea6:	f7ff febb 	bl	800bc20 <ai_buffer_array_sane>
 800beaa:	2800      	cmp	r0, #0
 800beac:	d0cc      	beq.n	800be48 <ai_platform_get_activations_map+0x18>
 800beae:	89f3      	ldrh	r3, [r6, #14]
 800beb0:	429f      	cmp	r7, r3
 800beb2:	d1c9      	bne.n	800be48 <ai_platform_get_activations_map+0x18>
 800beb4:	3d04      	subs	r5, #4
 800beb6:	4622      	mov	r2, r4
 800beb8:	6933      	ldr	r3, [r6, #16]
 800beba:	4423      	add	r3, r4
 800bebc:	341c      	adds	r4, #28
 800bebe:	685b      	ldr	r3, [r3, #4]
 800bec0:	b123      	cbz	r3, 800becc <ai_platform_get_activations_map+0x9c>
 800bec2:	3201      	adds	r2, #1
 800bec4:	f845 3f04 	str.w	r3, [r5, #4]!
 800bec8:	4297      	cmp	r7, r2
 800beca:	d8f5      	bhi.n	800beb8 <ai_platform_get_activations_map+0x88>
 800becc:	1abc      	subs	r4, r7, r2
 800bece:	fab4 f484 	clz	r4, r4
 800bed2:	0964      	lsrs	r4, r4, #5
 800bed4:	e7b9      	b.n	800be4a <ai_platform_get_activations_map+0x1a>
 800bed6:	428f      	cmp	r7, r1
 800bed8:	d1b7      	bne.n	800be4a <ai_platform_get_activations_map+0x1a>
 800beda:	e7e0      	b.n	800be9e <ai_platform_get_activations_map+0x6e>
 800bedc:	a1facade 	.word	0xa1facade

0800bee0 <ai_platform_bind_network_params>:
 800bee0:	2a00      	cmp	r2, #0
 800bee2:	bf18      	it	ne
 800bee4:	2900      	cmpne	r1, #0
 800bee6:	d010      	beq.n	800bf0a <ai_platform_bind_network_params+0x2a>
 800bee8:	b178      	cbz	r0, 800bf0a <ai_platform_bind_network_params+0x2a>
 800beea:	4603      	mov	r3, r0
 800beec:	4808      	ldr	r0, [pc, #32]	; (800bf10 <ai_platform_bind_network_params+0x30>)
 800beee:	f103 0c0c 	add.w	ip, r3, #12
 800bef2:	f843 0b04 	str.w	r0, [r3], #4
 800bef6:	c903      	ldmia	r1, {r0, r1}
 800bef8:	e883 0003 	stmia.w	r3, {r0, r1}
 800befc:	2301      	movs	r3, #1
 800befe:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bf02:	e88c 0003 	stmia.w	ip, {r0, r1}
 800bf06:	4618      	mov	r0, r3
 800bf08:	4770      	bx	lr
 800bf0a:	2300      	movs	r3, #0
 800bf0c:	4618      	mov	r0, r3
 800bf0e:	4770      	bx	lr
 800bf10:	a1facade 	.word	0xa1facade

0800bf14 <ai_platform_runtime_get_revision>:
 800bf14:	b508      	push	{r3, lr}
 800bf16:	f7ff ff2f 	bl	800bd78 <_ai_platform_acquire_crc>
 800bf1a:	4b39      	ldr	r3, [pc, #228]	; (800c000 <ai_platform_runtime_get_revision+0xec>)
 800bf1c:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bf26:	189a      	adds	r2, r3, r2
 800bf28:	2a01      	cmp	r2, #1
 800bf2a:	d929      	bls.n	800bf80 <ai_platform_runtime_get_revision+0x6c>
 800bf2c:	f240 4249 	movw	r2, #1097	; 0x449
 800bf30:	4293      	cmp	r3, r2
 800bf32:	d025      	beq.n	800bf80 <ai_platform_runtime_get_revision+0x6c>
 800bf34:	4a33      	ldr	r2, [pc, #204]	; (800c004 <ai_platform_runtime_get_revision+0xf0>)
 800bf36:	6813      	ldr	r3, [r2, #0]
 800bf38:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bf3c:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800bf40:	d02b      	beq.n	800bf9a <ai_platform_runtime_get_revision+0x86>
 800bf42:	6813      	ldr	r3, [r2, #0]
 800bf44:	f240 4183 	movw	r1, #1155	; 0x483
 800bf48:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bf4c:	428b      	cmp	r3, r1
 800bf4e:	d046      	beq.n	800bfde <ai_platform_runtime_get_revision+0xca>
 800bf50:	6813      	ldr	r3, [r2, #0]
 800bf52:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bf56:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800bf5a:	d032      	beq.n	800bfc2 <ai_platform_runtime_get_revision+0xae>
 800bf5c:	6813      	ldr	r3, [r2, #0]
 800bf5e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d129      	bne.n	800bfba <ai_platform_runtime_get_revision+0xa6>
 800bf66:	4a28      	ldr	r2, [pc, #160]	; (800c008 <ai_platform_runtime_get_revision+0xf4>)
 800bf68:	2301      	movs	r3, #1
 800bf6a:	6093      	str	r3, [r2, #8]
 800bf6c:	6893      	ldr	r3, [r2, #8]
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d1fc      	bne.n	800bf6c <ai_platform_runtime_get_revision+0x58>
 800bf72:	4926      	ldr	r1, [pc, #152]	; (800c00c <ai_platform_runtime_get_revision+0xf8>)
 800bf74:	4b26      	ldr	r3, [pc, #152]	; (800c010 <ai_platform_runtime_get_revision+0xfc>)
 800bf76:	6011      	str	r1, [r2, #0]
 800bf78:	6812      	ldr	r2, [r2, #0]
 800bf7a:	429a      	cmp	r2, r3
 800bf7c:	d01d      	beq.n	800bfba <ai_platform_runtime_get_revision+0xa6>
 800bf7e:	e7fe      	b.n	800bf7e <ai_platform_runtime_get_revision+0x6a>
 800bf80:	4a21      	ldr	r2, [pc, #132]	; (800c008 <ai_platform_runtime_get_revision+0xf4>)
 800bf82:	2301      	movs	r3, #1
 800bf84:	6093      	str	r3, [r2, #8]
 800bf86:	6893      	ldr	r3, [r2, #8]
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d1fc      	bne.n	800bf86 <ai_platform_runtime_get_revision+0x72>
 800bf8c:	491f      	ldr	r1, [pc, #124]	; (800c00c <ai_platform_runtime_get_revision+0xf8>)
 800bf8e:	4b20      	ldr	r3, [pc, #128]	; (800c010 <ai_platform_runtime_get_revision+0xfc>)
 800bf90:	6011      	str	r1, [r2, #0]
 800bf92:	6812      	ldr	r2, [r2, #0]
 800bf94:	429a      	cmp	r2, r3
 800bf96:	d010      	beq.n	800bfba <ai_platform_runtime_get_revision+0xa6>
 800bf98:	e7fe      	b.n	800bf98 <ai_platform_runtime_get_revision+0x84>
 800bf9a:	4a1e      	ldr	r2, [pc, #120]	; (800c014 <ai_platform_runtime_get_revision+0x100>)
 800bf9c:	2301      	movs	r3, #1
 800bf9e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800bfa2:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d1fb      	bne.n	800bfa2 <ai_platform_runtime_get_revision+0x8e>
 800bfaa:	4918      	ldr	r1, [pc, #96]	; (800c00c <ai_platform_runtime_get_revision+0xf8>)
 800bfac:	4b18      	ldr	r3, [pc, #96]	; (800c010 <ai_platform_runtime_get_revision+0xfc>)
 800bfae:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800bfb2:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800bfb6:	429a      	cmp	r2, r3
 800bfb8:	d110      	bne.n	800bfdc <ai_platform_runtime_get_revision+0xc8>
 800bfba:	f7ff fedf 	bl	800bd7c <_ai_platform_release_crc>
 800bfbe:	4816      	ldr	r0, [pc, #88]	; (800c018 <ai_platform_runtime_get_revision+0x104>)
 800bfc0:	bd08      	pop	{r3, pc}
 800bfc2:	4a11      	ldr	r2, [pc, #68]	; (800c008 <ai_platform_runtime_get_revision+0xf4>)
 800bfc4:	2301      	movs	r3, #1
 800bfc6:	6093      	str	r3, [r2, #8]
 800bfc8:	6893      	ldr	r3, [r2, #8]
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d1fc      	bne.n	800bfc8 <ai_platform_runtime_get_revision+0xb4>
 800bfce:	490f      	ldr	r1, [pc, #60]	; (800c00c <ai_platform_runtime_get_revision+0xf8>)
 800bfd0:	4b0f      	ldr	r3, [pc, #60]	; (800c010 <ai_platform_runtime_get_revision+0xfc>)
 800bfd2:	6011      	str	r1, [r2, #0]
 800bfd4:	6812      	ldr	r2, [r2, #0]
 800bfd6:	429a      	cmp	r2, r3
 800bfd8:	d0ef      	beq.n	800bfba <ai_platform_runtime_get_revision+0xa6>
 800bfda:	e7fe      	b.n	800bfda <ai_platform_runtime_get_revision+0xc6>
 800bfdc:	e7fe      	b.n	800bfdc <ai_platform_runtime_get_revision+0xc8>
 800bfde:	4a0d      	ldr	r2, [pc, #52]	; (800c014 <ai_platform_runtime_get_revision+0x100>)
 800bfe0:	2301      	movs	r3, #1
 800bfe2:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800bfe6:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d1fb      	bne.n	800bfe6 <ai_platform_runtime_get_revision+0xd2>
 800bfee:	4907      	ldr	r1, [pc, #28]	; (800c00c <ai_platform_runtime_get_revision+0xf8>)
 800bff0:	4b07      	ldr	r3, [pc, #28]	; (800c010 <ai_platform_runtime_get_revision+0xfc>)
 800bff2:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800bff6:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800bffa:	429a      	cmp	r2, r3
 800bffc:	d0dd      	beq.n	800bfba <ai_platform_runtime_get_revision+0xa6>
 800bffe:	e7fe      	b.n	800bffe <ai_platform_runtime_get_revision+0xea>
 800c000:	e0042000 	.word	0xe0042000
 800c004:	5c001000 	.word	0x5c001000
 800c008:	40023000 	.word	0x40023000
 800c00c:	f407a5c2 	.word	0xf407a5c2
 800c010:	b5e8b5cd 	.word	0xb5e8b5cd
 800c014:	58024000 	.word	0x58024000
 800c018:	08017044 	.word	0x08017044

0800c01c <ai_platform_runtime_get_version>:
 800c01c:	b500      	push	{lr}
 800c01e:	b083      	sub	sp, #12
 800c020:	f7ff feaa 	bl	800bd78 <_ai_platform_acquire_crc>
 800c024:	4b3a      	ldr	r3, [pc, #232]	; (800c110 <ai_platform_runtime_get_version+0xf4>)
 800c026:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c030:	189a      	adds	r2, r3, r2
 800c032:	2a01      	cmp	r2, #1
 800c034:	d929      	bls.n	800c08a <ai_platform_runtime_get_version+0x6e>
 800c036:	f240 4249 	movw	r2, #1097	; 0x449
 800c03a:	4293      	cmp	r3, r2
 800c03c:	d025      	beq.n	800c08a <ai_platform_runtime_get_version+0x6e>
 800c03e:	4a35      	ldr	r2, [pc, #212]	; (800c114 <ai_platform_runtime_get_version+0xf8>)
 800c040:	6813      	ldr	r3, [r2, #0]
 800c042:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c046:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800c04a:	d02b      	beq.n	800c0a4 <ai_platform_runtime_get_version+0x88>
 800c04c:	6813      	ldr	r3, [r2, #0]
 800c04e:	f240 4183 	movw	r1, #1155	; 0x483
 800c052:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c056:	428b      	cmp	r3, r1
 800c058:	d048      	beq.n	800c0ec <ai_platform_runtime_get_version+0xd0>
 800c05a:	6813      	ldr	r3, [r2, #0]
 800c05c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c060:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800c064:	d034      	beq.n	800c0d0 <ai_platform_runtime_get_version+0xb4>
 800c066:	6813      	ldr	r3, [r2, #0]
 800c068:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d129      	bne.n	800c0c4 <ai_platform_runtime_get_version+0xa8>
 800c070:	4a29      	ldr	r2, [pc, #164]	; (800c118 <ai_platform_runtime_get_version+0xfc>)
 800c072:	2301      	movs	r3, #1
 800c074:	6093      	str	r3, [r2, #8]
 800c076:	6893      	ldr	r3, [r2, #8]
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d1fc      	bne.n	800c076 <ai_platform_runtime_get_version+0x5a>
 800c07c:	4927      	ldr	r1, [pc, #156]	; (800c11c <ai_platform_runtime_get_version+0x100>)
 800c07e:	4b28      	ldr	r3, [pc, #160]	; (800c120 <ai_platform_runtime_get_version+0x104>)
 800c080:	6011      	str	r1, [r2, #0]
 800c082:	6812      	ldr	r2, [r2, #0]
 800c084:	429a      	cmp	r2, r3
 800c086:	d01d      	beq.n	800c0c4 <ai_platform_runtime_get_version+0xa8>
 800c088:	e7fe      	b.n	800c088 <ai_platform_runtime_get_version+0x6c>
 800c08a:	4a23      	ldr	r2, [pc, #140]	; (800c118 <ai_platform_runtime_get_version+0xfc>)
 800c08c:	2301      	movs	r3, #1
 800c08e:	6093      	str	r3, [r2, #8]
 800c090:	6893      	ldr	r3, [r2, #8]
 800c092:	2b00      	cmp	r3, #0
 800c094:	d1fc      	bne.n	800c090 <ai_platform_runtime_get_version+0x74>
 800c096:	4921      	ldr	r1, [pc, #132]	; (800c11c <ai_platform_runtime_get_version+0x100>)
 800c098:	4b21      	ldr	r3, [pc, #132]	; (800c120 <ai_platform_runtime_get_version+0x104>)
 800c09a:	6011      	str	r1, [r2, #0]
 800c09c:	6812      	ldr	r2, [r2, #0]
 800c09e:	429a      	cmp	r2, r3
 800c0a0:	d010      	beq.n	800c0c4 <ai_platform_runtime_get_version+0xa8>
 800c0a2:	e7fe      	b.n	800c0a2 <ai_platform_runtime_get_version+0x86>
 800c0a4:	4a1f      	ldr	r2, [pc, #124]	; (800c124 <ai_platform_runtime_get_version+0x108>)
 800c0a6:	2301      	movs	r3, #1
 800c0a8:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800c0ac:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d1fb      	bne.n	800c0ac <ai_platform_runtime_get_version+0x90>
 800c0b4:	4919      	ldr	r1, [pc, #100]	; (800c11c <ai_platform_runtime_get_version+0x100>)
 800c0b6:	4b1a      	ldr	r3, [pc, #104]	; (800c120 <ai_platform_runtime_get_version+0x104>)
 800c0b8:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800c0bc:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800c0c0:	429a      	cmp	r2, r3
 800c0c2:	d112      	bne.n	800c0ea <ai_platform_runtime_get_version+0xce>
 800c0c4:	f7ff fe5a 	bl	800bd7c <_ai_platform_release_crc>
 800c0c8:	2008      	movs	r0, #8
 800c0ca:	b003      	add	sp, #12
 800c0cc:	f85d fb04 	ldr.w	pc, [sp], #4
 800c0d0:	4a11      	ldr	r2, [pc, #68]	; (800c118 <ai_platform_runtime_get_version+0xfc>)
 800c0d2:	2301      	movs	r3, #1
 800c0d4:	6093      	str	r3, [r2, #8]
 800c0d6:	6893      	ldr	r3, [r2, #8]
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d1fc      	bne.n	800c0d6 <ai_platform_runtime_get_version+0xba>
 800c0dc:	490f      	ldr	r1, [pc, #60]	; (800c11c <ai_platform_runtime_get_version+0x100>)
 800c0de:	4b10      	ldr	r3, [pc, #64]	; (800c120 <ai_platform_runtime_get_version+0x104>)
 800c0e0:	6011      	str	r1, [r2, #0]
 800c0e2:	6812      	ldr	r2, [r2, #0]
 800c0e4:	429a      	cmp	r2, r3
 800c0e6:	d0ed      	beq.n	800c0c4 <ai_platform_runtime_get_version+0xa8>
 800c0e8:	e7fe      	b.n	800c0e8 <ai_platform_runtime_get_version+0xcc>
 800c0ea:	e7fe      	b.n	800c0ea <ai_platform_runtime_get_version+0xce>
 800c0ec:	4a0d      	ldr	r2, [pc, #52]	; (800c124 <ai_platform_runtime_get_version+0x108>)
 800c0ee:	2301      	movs	r3, #1
 800c0f0:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800c0f4:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d1fb      	bne.n	800c0f4 <ai_platform_runtime_get_version+0xd8>
 800c0fc:	4907      	ldr	r1, [pc, #28]	; (800c11c <ai_platform_runtime_get_version+0x100>)
 800c0fe:	4b08      	ldr	r3, [pc, #32]	; (800c120 <ai_platform_runtime_get_version+0x104>)
 800c100:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800c104:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800c108:	429a      	cmp	r2, r3
 800c10a:	d0db      	beq.n	800c0c4 <ai_platform_runtime_get_version+0xa8>
 800c10c:	e7fe      	b.n	800c10c <ai_platform_runtime_get_version+0xf0>
 800c10e:	bf00      	nop
 800c110:	e0042000 	.word	0xe0042000
 800c114:	5c001000 	.word	0x5c001000
 800c118:	40023000 	.word	0x40023000
 800c11c:	f407a5c2 	.word	0xf407a5c2
 800c120:	b5e8b5cd 	.word	0xb5e8b5cd
 800c124:	58024000 	.word	0x58024000

0800c128 <ai_platform_api_get_version>:
 800c128:	b500      	push	{lr}
 800c12a:	b083      	sub	sp, #12
 800c12c:	f7ff fe24 	bl	800bd78 <_ai_platform_acquire_crc>
 800c130:	4b42      	ldr	r3, [pc, #264]	; (800c23c <ai_platform_api_get_version+0x114>)
 800c132:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c13c:	189a      	adds	r2, r3, r2
 800c13e:	2a01      	cmp	r2, #1
 800c140:	d929      	bls.n	800c196 <ai_platform_api_get_version+0x6e>
 800c142:	f240 4249 	movw	r2, #1097	; 0x449
 800c146:	4293      	cmp	r3, r2
 800c148:	d025      	beq.n	800c196 <ai_platform_api_get_version+0x6e>
 800c14a:	4a3d      	ldr	r2, [pc, #244]	; (800c240 <ai_platform_api_get_version+0x118>)
 800c14c:	6813      	ldr	r3, [r2, #0]
 800c14e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c152:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800c156:	d02b      	beq.n	800c1b0 <ai_platform_api_get_version+0x88>
 800c158:	6813      	ldr	r3, [r2, #0]
 800c15a:	f240 4183 	movw	r1, #1155	; 0x483
 800c15e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c162:	428b      	cmp	r3, r1
 800c164:	d059      	beq.n	800c21a <ai_platform_api_get_version+0xf2>
 800c166:	6813      	ldr	r3, [r2, #0]
 800c168:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c16c:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800c170:	d045      	beq.n	800c1fe <ai_platform_api_get_version+0xd6>
 800c172:	6813      	ldr	r3, [r2, #0]
 800c174:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d129      	bne.n	800c1d0 <ai_platform_api_get_version+0xa8>
 800c17c:	4a31      	ldr	r2, [pc, #196]	; (800c244 <ai_platform_api_get_version+0x11c>)
 800c17e:	2301      	movs	r3, #1
 800c180:	6093      	str	r3, [r2, #8]
 800c182:	6893      	ldr	r3, [r2, #8]
 800c184:	2b00      	cmp	r3, #0
 800c186:	d1fc      	bne.n	800c182 <ai_platform_api_get_version+0x5a>
 800c188:	492f      	ldr	r1, [pc, #188]	; (800c248 <ai_platform_api_get_version+0x120>)
 800c18a:	4b30      	ldr	r3, [pc, #192]	; (800c24c <ai_platform_api_get_version+0x124>)
 800c18c:	6011      	str	r1, [r2, #0]
 800c18e:	6812      	ldr	r2, [r2, #0]
 800c190:	429a      	cmp	r2, r3
 800c192:	d01d      	beq.n	800c1d0 <ai_platform_api_get_version+0xa8>
 800c194:	e7fe      	b.n	800c194 <ai_platform_api_get_version+0x6c>
 800c196:	4a2b      	ldr	r2, [pc, #172]	; (800c244 <ai_platform_api_get_version+0x11c>)
 800c198:	2301      	movs	r3, #1
 800c19a:	6093      	str	r3, [r2, #8]
 800c19c:	6893      	ldr	r3, [r2, #8]
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d1fc      	bne.n	800c19c <ai_platform_api_get_version+0x74>
 800c1a2:	4929      	ldr	r1, [pc, #164]	; (800c248 <ai_platform_api_get_version+0x120>)
 800c1a4:	4b29      	ldr	r3, [pc, #164]	; (800c24c <ai_platform_api_get_version+0x124>)
 800c1a6:	6011      	str	r1, [r2, #0]
 800c1a8:	6812      	ldr	r2, [r2, #0]
 800c1aa:	429a      	cmp	r2, r3
 800c1ac:	d010      	beq.n	800c1d0 <ai_platform_api_get_version+0xa8>
 800c1ae:	e7fe      	b.n	800c1ae <ai_platform_api_get_version+0x86>
 800c1b0:	4a27      	ldr	r2, [pc, #156]	; (800c250 <ai_platform_api_get_version+0x128>)
 800c1b2:	2301      	movs	r3, #1
 800c1b4:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800c1b8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d1fb      	bne.n	800c1b8 <ai_platform_api_get_version+0x90>
 800c1c0:	4921      	ldr	r1, [pc, #132]	; (800c248 <ai_platform_api_get_version+0x120>)
 800c1c2:	4b22      	ldr	r3, [pc, #136]	; (800c24c <ai_platform_api_get_version+0x124>)
 800c1c4:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800c1c8:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800c1cc:	429a      	cmp	r2, r3
 800c1ce:	d123      	bne.n	800c218 <ai_platform_api_get_version+0xf0>
 800c1d0:	f7ff fdd4 	bl	800bd7c <_ai_platform_release_crc>
 800c1d4:	4b1f      	ldr	r3, [pc, #124]	; (800c254 <ai_platform_api_get_version+0x12c>)
 800c1d6:	2000      	movs	r0, #0
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	fa5f fc83 	uxtb.w	ip, r3
 800c1de:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800c1e2:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800c1e6:	0e1b      	lsrs	r3, r3, #24
 800c1e8:	f36c 0007 	bfi	r0, ip, #0, #8
 800c1ec:	f361 200f 	bfi	r0, r1, #8, #8
 800c1f0:	f362 4017 	bfi	r0, r2, #16, #8
 800c1f4:	f363 601f 	bfi	r0, r3, #24, #8
 800c1f8:	b003      	add	sp, #12
 800c1fa:	f85d fb04 	ldr.w	pc, [sp], #4
 800c1fe:	4a11      	ldr	r2, [pc, #68]	; (800c244 <ai_platform_api_get_version+0x11c>)
 800c200:	2301      	movs	r3, #1
 800c202:	6093      	str	r3, [r2, #8]
 800c204:	6893      	ldr	r3, [r2, #8]
 800c206:	2b00      	cmp	r3, #0
 800c208:	d1fc      	bne.n	800c204 <ai_platform_api_get_version+0xdc>
 800c20a:	490f      	ldr	r1, [pc, #60]	; (800c248 <ai_platform_api_get_version+0x120>)
 800c20c:	4b0f      	ldr	r3, [pc, #60]	; (800c24c <ai_platform_api_get_version+0x124>)
 800c20e:	6011      	str	r1, [r2, #0]
 800c210:	6812      	ldr	r2, [r2, #0]
 800c212:	429a      	cmp	r2, r3
 800c214:	d0dc      	beq.n	800c1d0 <ai_platform_api_get_version+0xa8>
 800c216:	e7fe      	b.n	800c216 <ai_platform_api_get_version+0xee>
 800c218:	e7fe      	b.n	800c218 <ai_platform_api_get_version+0xf0>
 800c21a:	4a0d      	ldr	r2, [pc, #52]	; (800c250 <ai_platform_api_get_version+0x128>)
 800c21c:	2301      	movs	r3, #1
 800c21e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800c222:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800c226:	2b00      	cmp	r3, #0
 800c228:	d1fb      	bne.n	800c222 <ai_platform_api_get_version+0xfa>
 800c22a:	4907      	ldr	r1, [pc, #28]	; (800c248 <ai_platform_api_get_version+0x120>)
 800c22c:	4b07      	ldr	r3, [pc, #28]	; (800c24c <ai_platform_api_get_version+0x124>)
 800c22e:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800c232:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800c236:	429a      	cmp	r2, r3
 800c238:	d0ca      	beq.n	800c1d0 <ai_platform_api_get_version+0xa8>
 800c23a:	e7fe      	b.n	800c23a <ai_platform_api_get_version+0x112>
 800c23c:	e0042000 	.word	0xe0042000
 800c240:	5c001000 	.word	0x5c001000
 800c244:	40023000 	.word	0x40023000
 800c248:	f407a5c2 	.word	0xf407a5c2
 800c24c:	b5e8b5cd 	.word	0xb5e8b5cd
 800c250:	58024000 	.word	0x58024000
 800c254:	08017048 	.word	0x08017048

0800c258 <ai_platform_interface_api_get_version>:
 800c258:	b500      	push	{lr}
 800c25a:	b083      	sub	sp, #12
 800c25c:	f7ff fd8c 	bl	800bd78 <_ai_platform_acquire_crc>
 800c260:	4b42      	ldr	r3, [pc, #264]	; (800c36c <ai_platform_interface_api_get_version+0x114>)
 800c262:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c26c:	189a      	adds	r2, r3, r2
 800c26e:	2a01      	cmp	r2, #1
 800c270:	d929      	bls.n	800c2c6 <ai_platform_interface_api_get_version+0x6e>
 800c272:	f240 4249 	movw	r2, #1097	; 0x449
 800c276:	4293      	cmp	r3, r2
 800c278:	d025      	beq.n	800c2c6 <ai_platform_interface_api_get_version+0x6e>
 800c27a:	4a3d      	ldr	r2, [pc, #244]	; (800c370 <ai_platform_interface_api_get_version+0x118>)
 800c27c:	6813      	ldr	r3, [r2, #0]
 800c27e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c282:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800c286:	d02b      	beq.n	800c2e0 <ai_platform_interface_api_get_version+0x88>
 800c288:	6813      	ldr	r3, [r2, #0]
 800c28a:	f240 4183 	movw	r1, #1155	; 0x483
 800c28e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c292:	428b      	cmp	r3, r1
 800c294:	d059      	beq.n	800c34a <ai_platform_interface_api_get_version+0xf2>
 800c296:	6813      	ldr	r3, [r2, #0]
 800c298:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c29c:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800c2a0:	d045      	beq.n	800c32e <ai_platform_interface_api_get_version+0xd6>
 800c2a2:	6813      	ldr	r3, [r2, #0]
 800c2a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d129      	bne.n	800c300 <ai_platform_interface_api_get_version+0xa8>
 800c2ac:	4a31      	ldr	r2, [pc, #196]	; (800c374 <ai_platform_interface_api_get_version+0x11c>)
 800c2ae:	2301      	movs	r3, #1
 800c2b0:	6093      	str	r3, [r2, #8]
 800c2b2:	6893      	ldr	r3, [r2, #8]
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d1fc      	bne.n	800c2b2 <ai_platform_interface_api_get_version+0x5a>
 800c2b8:	492f      	ldr	r1, [pc, #188]	; (800c378 <ai_platform_interface_api_get_version+0x120>)
 800c2ba:	4b30      	ldr	r3, [pc, #192]	; (800c37c <ai_platform_interface_api_get_version+0x124>)
 800c2bc:	6011      	str	r1, [r2, #0]
 800c2be:	6812      	ldr	r2, [r2, #0]
 800c2c0:	429a      	cmp	r2, r3
 800c2c2:	d01d      	beq.n	800c300 <ai_platform_interface_api_get_version+0xa8>
 800c2c4:	e7fe      	b.n	800c2c4 <ai_platform_interface_api_get_version+0x6c>
 800c2c6:	4a2b      	ldr	r2, [pc, #172]	; (800c374 <ai_platform_interface_api_get_version+0x11c>)
 800c2c8:	2301      	movs	r3, #1
 800c2ca:	6093      	str	r3, [r2, #8]
 800c2cc:	6893      	ldr	r3, [r2, #8]
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d1fc      	bne.n	800c2cc <ai_platform_interface_api_get_version+0x74>
 800c2d2:	4929      	ldr	r1, [pc, #164]	; (800c378 <ai_platform_interface_api_get_version+0x120>)
 800c2d4:	4b29      	ldr	r3, [pc, #164]	; (800c37c <ai_platform_interface_api_get_version+0x124>)
 800c2d6:	6011      	str	r1, [r2, #0]
 800c2d8:	6812      	ldr	r2, [r2, #0]
 800c2da:	429a      	cmp	r2, r3
 800c2dc:	d010      	beq.n	800c300 <ai_platform_interface_api_get_version+0xa8>
 800c2de:	e7fe      	b.n	800c2de <ai_platform_interface_api_get_version+0x86>
 800c2e0:	4a27      	ldr	r2, [pc, #156]	; (800c380 <ai_platform_interface_api_get_version+0x128>)
 800c2e2:	2301      	movs	r3, #1
 800c2e4:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800c2e8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d1fb      	bne.n	800c2e8 <ai_platform_interface_api_get_version+0x90>
 800c2f0:	4921      	ldr	r1, [pc, #132]	; (800c378 <ai_platform_interface_api_get_version+0x120>)
 800c2f2:	4b22      	ldr	r3, [pc, #136]	; (800c37c <ai_platform_interface_api_get_version+0x124>)
 800c2f4:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800c2f8:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800c2fc:	429a      	cmp	r2, r3
 800c2fe:	d123      	bne.n	800c348 <ai_platform_interface_api_get_version+0xf0>
 800c300:	f7ff fd3c 	bl	800bd7c <_ai_platform_release_crc>
 800c304:	4b1f      	ldr	r3, [pc, #124]	; (800c384 <ai_platform_interface_api_get_version+0x12c>)
 800c306:	2000      	movs	r0, #0
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	fa5f fc83 	uxtb.w	ip, r3
 800c30e:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800c312:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800c316:	0e1b      	lsrs	r3, r3, #24
 800c318:	f36c 0007 	bfi	r0, ip, #0, #8
 800c31c:	f361 200f 	bfi	r0, r1, #8, #8
 800c320:	f362 4017 	bfi	r0, r2, #16, #8
 800c324:	f363 601f 	bfi	r0, r3, #24, #8
 800c328:	b003      	add	sp, #12
 800c32a:	f85d fb04 	ldr.w	pc, [sp], #4
 800c32e:	4a11      	ldr	r2, [pc, #68]	; (800c374 <ai_platform_interface_api_get_version+0x11c>)
 800c330:	2301      	movs	r3, #1
 800c332:	6093      	str	r3, [r2, #8]
 800c334:	6893      	ldr	r3, [r2, #8]
 800c336:	2b00      	cmp	r3, #0
 800c338:	d1fc      	bne.n	800c334 <ai_platform_interface_api_get_version+0xdc>
 800c33a:	490f      	ldr	r1, [pc, #60]	; (800c378 <ai_platform_interface_api_get_version+0x120>)
 800c33c:	4b0f      	ldr	r3, [pc, #60]	; (800c37c <ai_platform_interface_api_get_version+0x124>)
 800c33e:	6011      	str	r1, [r2, #0]
 800c340:	6812      	ldr	r2, [r2, #0]
 800c342:	429a      	cmp	r2, r3
 800c344:	d0dc      	beq.n	800c300 <ai_platform_interface_api_get_version+0xa8>
 800c346:	e7fe      	b.n	800c346 <ai_platform_interface_api_get_version+0xee>
 800c348:	e7fe      	b.n	800c348 <ai_platform_interface_api_get_version+0xf0>
 800c34a:	4a0d      	ldr	r2, [pc, #52]	; (800c380 <ai_platform_interface_api_get_version+0x128>)
 800c34c:	2301      	movs	r3, #1
 800c34e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800c352:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800c356:	2b00      	cmp	r3, #0
 800c358:	d1fb      	bne.n	800c352 <ai_platform_interface_api_get_version+0xfa>
 800c35a:	4907      	ldr	r1, [pc, #28]	; (800c378 <ai_platform_interface_api_get_version+0x120>)
 800c35c:	4b07      	ldr	r3, [pc, #28]	; (800c37c <ai_platform_interface_api_get_version+0x124>)
 800c35e:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800c362:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800c366:	429a      	cmp	r2, r3
 800c368:	d0ca      	beq.n	800c300 <ai_platform_interface_api_get_version+0xa8>
 800c36a:	e7fe      	b.n	800c36a <ai_platform_interface_api_get_version+0x112>
 800c36c:	e0042000 	.word	0xe0042000
 800c370:	5c001000 	.word	0x5c001000
 800c374:	40023000 	.word	0x40023000
 800c378:	f407a5c2 	.word	0xf407a5c2
 800c37c:	b5e8b5cd 	.word	0xb5e8b5cd
 800c380:	58024000 	.word	0x58024000
 800c384:	0801704c 	.word	0x0801704c

0800c388 <ai_platform_context_acquire>:
 800c388:	b510      	push	{r4, lr}
 800c38a:	4604      	mov	r4, r0
 800c38c:	b120      	cbz	r0, 800c398 <ai_platform_context_acquire+0x10>
 800c38e:	4b3d      	ldr	r3, [pc, #244]	; (800c484 <ai_platform_context_acquire+0xfc>)
 800c390:	6802      	ldr	r2, [r0, #0]
 800c392:	429a      	cmp	r2, r3
 800c394:	bf18      	it	ne
 800c396:	2400      	movne	r4, #0
 800c398:	f7ff fcee 	bl	800bd78 <_ai_platform_acquire_crc>
 800c39c:	4b3a      	ldr	r3, [pc, #232]	; (800c488 <ai_platform_context_acquire+0x100>)
 800c39e:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c3a8:	189a      	adds	r2, r3, r2
 800c3aa:	2a01      	cmp	r2, #1
 800c3ac:	d929      	bls.n	800c402 <ai_platform_context_acquire+0x7a>
 800c3ae:	f240 4249 	movw	r2, #1097	; 0x449
 800c3b2:	4293      	cmp	r3, r2
 800c3b4:	d025      	beq.n	800c402 <ai_platform_context_acquire+0x7a>
 800c3b6:	4a35      	ldr	r2, [pc, #212]	; (800c48c <ai_platform_context_acquire+0x104>)
 800c3b8:	6813      	ldr	r3, [r2, #0]
 800c3ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c3be:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800c3c2:	d02b      	beq.n	800c41c <ai_platform_context_acquire+0x94>
 800c3c4:	6813      	ldr	r3, [r2, #0]
 800c3c6:	f240 4183 	movw	r1, #1155	; 0x483
 800c3ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c3ce:	428b      	cmp	r3, r1
 800c3d0:	d046      	beq.n	800c460 <ai_platform_context_acquire+0xd8>
 800c3d2:	6813      	ldr	r3, [r2, #0]
 800c3d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c3d8:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800c3dc:	d033      	beq.n	800c446 <ai_platform_context_acquire+0xbe>
 800c3de:	6813      	ldr	r3, [r2, #0]
 800c3e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d129      	bne.n	800c43c <ai_platform_context_acquire+0xb4>
 800c3e8:	4a29      	ldr	r2, [pc, #164]	; (800c490 <ai_platform_context_acquire+0x108>)
 800c3ea:	2301      	movs	r3, #1
 800c3ec:	6093      	str	r3, [r2, #8]
 800c3ee:	6893      	ldr	r3, [r2, #8]
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d1fc      	bne.n	800c3ee <ai_platform_context_acquire+0x66>
 800c3f4:	4927      	ldr	r1, [pc, #156]	; (800c494 <ai_platform_context_acquire+0x10c>)
 800c3f6:	4b28      	ldr	r3, [pc, #160]	; (800c498 <ai_platform_context_acquire+0x110>)
 800c3f8:	6011      	str	r1, [r2, #0]
 800c3fa:	6812      	ldr	r2, [r2, #0]
 800c3fc:	429a      	cmp	r2, r3
 800c3fe:	d01d      	beq.n	800c43c <ai_platform_context_acquire+0xb4>
 800c400:	e7fe      	b.n	800c400 <ai_platform_context_acquire+0x78>
 800c402:	4a23      	ldr	r2, [pc, #140]	; (800c490 <ai_platform_context_acquire+0x108>)
 800c404:	2301      	movs	r3, #1
 800c406:	6093      	str	r3, [r2, #8]
 800c408:	6893      	ldr	r3, [r2, #8]
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d1fc      	bne.n	800c408 <ai_platform_context_acquire+0x80>
 800c40e:	4921      	ldr	r1, [pc, #132]	; (800c494 <ai_platform_context_acquire+0x10c>)
 800c410:	4b21      	ldr	r3, [pc, #132]	; (800c498 <ai_platform_context_acquire+0x110>)
 800c412:	6011      	str	r1, [r2, #0]
 800c414:	6812      	ldr	r2, [r2, #0]
 800c416:	429a      	cmp	r2, r3
 800c418:	d010      	beq.n	800c43c <ai_platform_context_acquire+0xb4>
 800c41a:	e7fe      	b.n	800c41a <ai_platform_context_acquire+0x92>
 800c41c:	4a1f      	ldr	r2, [pc, #124]	; (800c49c <ai_platform_context_acquire+0x114>)
 800c41e:	2301      	movs	r3, #1
 800c420:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800c424:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d1fb      	bne.n	800c424 <ai_platform_context_acquire+0x9c>
 800c42c:	4919      	ldr	r1, [pc, #100]	; (800c494 <ai_platform_context_acquire+0x10c>)
 800c42e:	4b1a      	ldr	r3, [pc, #104]	; (800c498 <ai_platform_context_acquire+0x110>)
 800c430:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800c434:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800c438:	429a      	cmp	r2, r3
 800c43a:	d103      	bne.n	800c444 <ai_platform_context_acquire+0xbc>
 800c43c:	f7ff fc9e 	bl	800bd7c <_ai_platform_release_crc>
 800c440:	4620      	mov	r0, r4
 800c442:	bd10      	pop	{r4, pc}
 800c444:	e7fe      	b.n	800c444 <ai_platform_context_acquire+0xbc>
 800c446:	4a12      	ldr	r2, [pc, #72]	; (800c490 <ai_platform_context_acquire+0x108>)
 800c448:	2301      	movs	r3, #1
 800c44a:	6093      	str	r3, [r2, #8]
 800c44c:	6893      	ldr	r3, [r2, #8]
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d1fc      	bne.n	800c44c <ai_platform_context_acquire+0xc4>
 800c452:	4910      	ldr	r1, [pc, #64]	; (800c494 <ai_platform_context_acquire+0x10c>)
 800c454:	4b10      	ldr	r3, [pc, #64]	; (800c498 <ai_platform_context_acquire+0x110>)
 800c456:	6011      	str	r1, [r2, #0]
 800c458:	6812      	ldr	r2, [r2, #0]
 800c45a:	429a      	cmp	r2, r3
 800c45c:	d0ee      	beq.n	800c43c <ai_platform_context_acquire+0xb4>
 800c45e:	e7fe      	b.n	800c45e <ai_platform_context_acquire+0xd6>
 800c460:	4a0e      	ldr	r2, [pc, #56]	; (800c49c <ai_platform_context_acquire+0x114>)
 800c462:	2301      	movs	r3, #1
 800c464:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800c468:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d1fb      	bne.n	800c468 <ai_platform_context_acquire+0xe0>
 800c470:	4908      	ldr	r1, [pc, #32]	; (800c494 <ai_platform_context_acquire+0x10c>)
 800c472:	4b09      	ldr	r3, [pc, #36]	; (800c498 <ai_platform_context_acquire+0x110>)
 800c474:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800c478:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800c47c:	429a      	cmp	r2, r3
 800c47e:	d0dd      	beq.n	800c43c <ai_platform_context_acquire+0xb4>
 800c480:	e7fe      	b.n	800c480 <ai_platform_context_acquire+0xf8>
 800c482:	bf00      	nop
 800c484:	a1c00100 	.word	0xa1c00100
 800c488:	e0042000 	.word	0xe0042000
 800c48c:	5c001000 	.word	0x5c001000
 800c490:	40023000 	.word	0x40023000
 800c494:	f407a5c2 	.word	0xf407a5c2
 800c498:	b5e8b5cd 	.word	0xb5e8b5cd
 800c49c:	58024000 	.word	0x58024000

0800c4a0 <ai_platform_network_get_error>:
 800c4a0:	b510      	push	{r4, lr}
 800c4a2:	2800      	cmp	r0, #0
 800c4a4:	d03f      	beq.n	800c526 <ai_platform_network_get_error+0x86>
 800c4a6:	4b7d      	ldr	r3, [pc, #500]	; (800c69c <ai_platform_network_get_error+0x1fc>)
 800c4a8:	4604      	mov	r4, r0
 800c4aa:	6802      	ldr	r2, [r0, #0]
 800c4ac:	429a      	cmp	r2, r3
 800c4ae:	d13a      	bne.n	800c526 <ai_platform_network_get_error+0x86>
 800c4b0:	f7ff fc62 	bl	800bd78 <_ai_platform_acquire_crc>
 800c4b4:	4b7a      	ldr	r3, [pc, #488]	; (800c6a0 <ai_platform_network_get_error+0x200>)
 800c4b6:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c4c0:	189a      	adds	r2, r3, r2
 800c4c2:	2a01      	cmp	r2, #1
 800c4c4:	f240 8086 	bls.w	800c5d4 <ai_platform_network_get_error+0x134>
 800c4c8:	f240 4249 	movw	r2, #1097	; 0x449
 800c4cc:	4293      	cmp	r3, r2
 800c4ce:	f000 8081 	beq.w	800c5d4 <ai_platform_network_get_error+0x134>
 800c4d2:	4a74      	ldr	r2, [pc, #464]	; (800c6a4 <ai_platform_network_get_error+0x204>)
 800c4d4:	6813      	ldr	r3, [r2, #0]
 800c4d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c4da:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800c4de:	f000 8087 	beq.w	800c5f0 <ai_platform_network_get_error+0x150>
 800c4e2:	6813      	ldr	r3, [r2, #0]
 800c4e4:	f240 4183 	movw	r1, #1155	; 0x483
 800c4e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c4ec:	428b      	cmp	r3, r1
 800c4ee:	f000 80a9 	beq.w	800c644 <ai_platform_network_get_error+0x1a4>
 800c4f2:	6813      	ldr	r3, [r2, #0]
 800c4f4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c4f8:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800c4fc:	f000 80c0 	beq.w	800c680 <ai_platform_network_get_error+0x1e0>
 800c500:	6813      	ldr	r3, [r2, #0]
 800c502:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c506:	2b00      	cmp	r3, #0
 800c508:	f040 8082 	bne.w	800c610 <ai_platform_network_get_error+0x170>
 800c50c:	4a66      	ldr	r2, [pc, #408]	; (800c6a8 <ai_platform_network_get_error+0x208>)
 800c50e:	2301      	movs	r3, #1
 800c510:	6093      	str	r3, [r2, #8]
 800c512:	6893      	ldr	r3, [r2, #8]
 800c514:	2b00      	cmp	r3, #0
 800c516:	d1fc      	bne.n	800c512 <ai_platform_network_get_error+0x72>
 800c518:	4964      	ldr	r1, [pc, #400]	; (800c6ac <ai_platform_network_get_error+0x20c>)
 800c51a:	4b65      	ldr	r3, [pc, #404]	; (800c6b0 <ai_platform_network_get_error+0x210>)
 800c51c:	6011      	str	r1, [r2, #0]
 800c51e:	6812      	ldr	r2, [r2, #0]
 800c520:	429a      	cmp	r2, r3
 800c522:	d075      	beq.n	800c610 <ai_platform_network_get_error+0x170>
 800c524:	e7fe      	b.n	800c524 <ai_platform_network_get_error+0x84>
 800c526:	f7ff fc27 	bl	800bd78 <_ai_platform_acquire_crc>
 800c52a:	4b5d      	ldr	r3, [pc, #372]	; (800c6a0 <ai_platform_network_get_error+0x200>)
 800c52c:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c536:	185a      	adds	r2, r3, r1
 800c538:	2a01      	cmp	r2, #1
 800c53a:	d929      	bls.n	800c590 <ai_platform_network_get_error+0xf0>
 800c53c:	f240 4249 	movw	r2, #1097	; 0x449
 800c540:	4293      	cmp	r3, r2
 800c542:	d025      	beq.n	800c590 <ai_platform_network_get_error+0xf0>
 800c544:	4a57      	ldr	r2, [pc, #348]	; (800c6a4 <ai_platform_network_get_error+0x204>)
 800c546:	6813      	ldr	r3, [r2, #0]
 800c548:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c54c:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800c550:	d02b      	beq.n	800c5aa <ai_platform_network_get_error+0x10a>
 800c552:	6813      	ldr	r3, [r2, #0]
 800c554:	f240 4183 	movw	r1, #1155	; 0x483
 800c558:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c55c:	428b      	cmp	r3, r1
 800c55e:	d060      	beq.n	800c622 <ai_platform_network_get_error+0x182>
 800c560:	6813      	ldr	r3, [r2, #0]
 800c562:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c566:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800c56a:	d07c      	beq.n	800c666 <ai_platform_network_get_error+0x1c6>
 800c56c:	6813      	ldr	r3, [r2, #0]
 800c56e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c572:	2b00      	cmp	r3, #0
 800c574:	d129      	bne.n	800c5ca <ai_platform_network_get_error+0x12a>
 800c576:	4a4c      	ldr	r2, [pc, #304]	; (800c6a8 <ai_platform_network_get_error+0x208>)
 800c578:	2301      	movs	r3, #1
 800c57a:	6093      	str	r3, [r2, #8]
 800c57c:	6893      	ldr	r3, [r2, #8]
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d1fc      	bne.n	800c57c <ai_platform_network_get_error+0xdc>
 800c582:	494a      	ldr	r1, [pc, #296]	; (800c6ac <ai_platform_network_get_error+0x20c>)
 800c584:	4b4a      	ldr	r3, [pc, #296]	; (800c6b0 <ai_platform_network_get_error+0x210>)
 800c586:	6011      	str	r1, [r2, #0]
 800c588:	6812      	ldr	r2, [r2, #0]
 800c58a:	429a      	cmp	r2, r3
 800c58c:	d01d      	beq.n	800c5ca <ai_platform_network_get_error+0x12a>
 800c58e:	e7fe      	b.n	800c58e <ai_platform_network_get_error+0xee>
 800c590:	4a45      	ldr	r2, [pc, #276]	; (800c6a8 <ai_platform_network_get_error+0x208>)
 800c592:	2301      	movs	r3, #1
 800c594:	6093      	str	r3, [r2, #8]
 800c596:	6893      	ldr	r3, [r2, #8]
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d1fc      	bne.n	800c596 <ai_platform_network_get_error+0xf6>
 800c59c:	4943      	ldr	r1, [pc, #268]	; (800c6ac <ai_platform_network_get_error+0x20c>)
 800c59e:	4b44      	ldr	r3, [pc, #272]	; (800c6b0 <ai_platform_network_get_error+0x210>)
 800c5a0:	6011      	str	r1, [r2, #0]
 800c5a2:	6812      	ldr	r2, [r2, #0]
 800c5a4:	429a      	cmp	r2, r3
 800c5a6:	d010      	beq.n	800c5ca <ai_platform_network_get_error+0x12a>
 800c5a8:	e7fe      	b.n	800c5a8 <ai_platform_network_get_error+0x108>
 800c5aa:	4a42      	ldr	r2, [pc, #264]	; (800c6b4 <ai_platform_network_get_error+0x214>)
 800c5ac:	2301      	movs	r3, #1
 800c5ae:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800c5b2:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d1fb      	bne.n	800c5b2 <ai_platform_network_get_error+0x112>
 800c5ba:	493c      	ldr	r1, [pc, #240]	; (800c6ac <ai_platform_network_get_error+0x20c>)
 800c5bc:	4b3c      	ldr	r3, [pc, #240]	; (800c6b0 <ai_platform_network_get_error+0x210>)
 800c5be:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800c5c2:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800c5c6:	429a      	cmp	r2, r3
 800c5c8:	d111      	bne.n	800c5ee <ai_platform_network_get_error+0x14e>
 800c5ca:	f7ff fbd7 	bl	800bd7c <_ai_platform_release_crc>
 800c5ce:	f241 0010 	movw	r0, #4112	; 0x1010
 800c5d2:	bd10      	pop	{r4, pc}
 800c5d4:	4a34      	ldr	r2, [pc, #208]	; (800c6a8 <ai_platform_network_get_error+0x208>)
 800c5d6:	2301      	movs	r3, #1
 800c5d8:	6093      	str	r3, [r2, #8]
 800c5da:	6893      	ldr	r3, [r2, #8]
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d1fc      	bne.n	800c5da <ai_platform_network_get_error+0x13a>
 800c5e0:	4932      	ldr	r1, [pc, #200]	; (800c6ac <ai_platform_network_get_error+0x20c>)
 800c5e2:	4b33      	ldr	r3, [pc, #204]	; (800c6b0 <ai_platform_network_get_error+0x210>)
 800c5e4:	6011      	str	r1, [r2, #0]
 800c5e6:	6812      	ldr	r2, [r2, #0]
 800c5e8:	429a      	cmp	r2, r3
 800c5ea:	d011      	beq.n	800c610 <ai_platform_network_get_error+0x170>
 800c5ec:	e7fe      	b.n	800c5ec <ai_platform_network_get_error+0x14c>
 800c5ee:	e7fe      	b.n	800c5ee <ai_platform_network_get_error+0x14e>
 800c5f0:	4a30      	ldr	r2, [pc, #192]	; (800c6b4 <ai_platform_network_get_error+0x214>)
 800c5f2:	2301      	movs	r3, #1
 800c5f4:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800c5f8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d1fb      	bne.n	800c5f8 <ai_platform_network_get_error+0x158>
 800c600:	492a      	ldr	r1, [pc, #168]	; (800c6ac <ai_platform_network_get_error+0x20c>)
 800c602:	4b2b      	ldr	r3, [pc, #172]	; (800c6b0 <ai_platform_network_get_error+0x210>)
 800c604:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800c608:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800c60c:	429a      	cmp	r2, r3
 800c60e:	d107      	bne.n	800c620 <ai_platform_network_get_error+0x180>
 800c610:	f7ff fbb4 	bl	800bd7c <_ai_platform_release_crc>
 800c614:	f104 0010 	add.w	r0, r4, #16
 800c618:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c61c:	f001 be68 	b.w	800e2f0 <core_get_error>
 800c620:	e7fe      	b.n	800c620 <ai_platform_network_get_error+0x180>
 800c622:	4a24      	ldr	r2, [pc, #144]	; (800c6b4 <ai_platform_network_get_error+0x214>)
 800c624:	2301      	movs	r3, #1
 800c626:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800c62a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d1fb      	bne.n	800c62a <ai_platform_network_get_error+0x18a>
 800c632:	491e      	ldr	r1, [pc, #120]	; (800c6ac <ai_platform_network_get_error+0x20c>)
 800c634:	4b1e      	ldr	r3, [pc, #120]	; (800c6b0 <ai_platform_network_get_error+0x210>)
 800c636:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800c63a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800c63e:	429a      	cmp	r2, r3
 800c640:	d0c3      	beq.n	800c5ca <ai_platform_network_get_error+0x12a>
 800c642:	e7fe      	b.n	800c642 <ai_platform_network_get_error+0x1a2>
 800c644:	4a1b      	ldr	r2, [pc, #108]	; (800c6b4 <ai_platform_network_get_error+0x214>)
 800c646:	2301      	movs	r3, #1
 800c648:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800c64c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800c650:	2b00      	cmp	r3, #0
 800c652:	d1fb      	bne.n	800c64c <ai_platform_network_get_error+0x1ac>
 800c654:	4915      	ldr	r1, [pc, #84]	; (800c6ac <ai_platform_network_get_error+0x20c>)
 800c656:	4b16      	ldr	r3, [pc, #88]	; (800c6b0 <ai_platform_network_get_error+0x210>)
 800c658:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800c65c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800c660:	429a      	cmp	r2, r3
 800c662:	d0d5      	beq.n	800c610 <ai_platform_network_get_error+0x170>
 800c664:	e7fe      	b.n	800c664 <ai_platform_network_get_error+0x1c4>
 800c666:	4a10      	ldr	r2, [pc, #64]	; (800c6a8 <ai_platform_network_get_error+0x208>)
 800c668:	2301      	movs	r3, #1
 800c66a:	6093      	str	r3, [r2, #8]
 800c66c:	6893      	ldr	r3, [r2, #8]
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d1fc      	bne.n	800c66c <ai_platform_network_get_error+0x1cc>
 800c672:	490e      	ldr	r1, [pc, #56]	; (800c6ac <ai_platform_network_get_error+0x20c>)
 800c674:	4b0e      	ldr	r3, [pc, #56]	; (800c6b0 <ai_platform_network_get_error+0x210>)
 800c676:	6011      	str	r1, [r2, #0]
 800c678:	6812      	ldr	r2, [r2, #0]
 800c67a:	429a      	cmp	r2, r3
 800c67c:	d0a5      	beq.n	800c5ca <ai_platform_network_get_error+0x12a>
 800c67e:	e7fe      	b.n	800c67e <ai_platform_network_get_error+0x1de>
 800c680:	4a09      	ldr	r2, [pc, #36]	; (800c6a8 <ai_platform_network_get_error+0x208>)
 800c682:	2301      	movs	r3, #1
 800c684:	6093      	str	r3, [r2, #8]
 800c686:	6893      	ldr	r3, [r2, #8]
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d1fc      	bne.n	800c686 <ai_platform_network_get_error+0x1e6>
 800c68c:	4907      	ldr	r1, [pc, #28]	; (800c6ac <ai_platform_network_get_error+0x20c>)
 800c68e:	4b08      	ldr	r3, [pc, #32]	; (800c6b0 <ai_platform_network_get_error+0x210>)
 800c690:	6011      	str	r1, [r2, #0]
 800c692:	6812      	ldr	r2, [r2, #0]
 800c694:	429a      	cmp	r2, r3
 800c696:	d0bb      	beq.n	800c610 <ai_platform_network_get_error+0x170>
 800c698:	e7fe      	b.n	800c698 <ai_platform_network_get_error+0x1f8>
 800c69a:	bf00      	nop
 800c69c:	a1c00100 	.word	0xa1c00100
 800c6a0:	e0042000 	.word	0xe0042000
 800c6a4:	5c001000 	.word	0x5c001000
 800c6a8:	40023000 	.word	0x40023000
 800c6ac:	f407a5c2 	.word	0xf407a5c2
 800c6b0:	b5e8b5cd 	.word	0xb5e8b5cd
 800c6b4:	58024000 	.word	0x58024000

0800c6b8 <ai_platform_network_set_error>:
 800c6b8:	b110      	cbz	r0, 800c6c0 <ai_platform_network_set_error+0x8>
 800c6ba:	3010      	adds	r0, #16
 800c6bc:	f001 be1e 	b.w	800e2fc <core_set_error>
 800c6c0:	4770      	bx	lr
 800c6c2:	bf00      	nop

0800c6c4 <ai_platform_api_get_network_report>:
 800c6c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6c8:	b089      	sub	sp, #36	; 0x24
 800c6ca:	4607      	mov	r7, r0
 800c6cc:	9101      	str	r1, [sp, #4]
 800c6ce:	b120      	cbz	r0, 800c6da <ai_platform_api_get_network_report+0x16>
 800c6d0:	4b87      	ldr	r3, [pc, #540]	; (800c8f0 <ai_platform_api_get_network_report+0x22c>)
 800c6d2:	6802      	ldr	r2, [r0, #0]
 800c6d4:	429a      	cmp	r2, r3
 800c6d6:	bf18      	it	ne
 800c6d8:	2700      	movne	r7, #0
 800c6da:	f7ff fb4d 	bl	800bd78 <_ai_platform_acquire_crc>
 800c6de:	4b85      	ldr	r3, [pc, #532]	; (800c8f4 <ai_platform_api_get_network_report+0x230>)
 800c6e0:	f46f 698a 	mvn.w	r9, #1104	; 0x450
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c6ea:	eb03 0209 	add.w	r2, r3, r9
 800c6ee:	2a01      	cmp	r2, #1
 800c6f0:	d92b      	bls.n	800c74a <ai_platform_api_get_network_report+0x86>
 800c6f2:	f240 4249 	movw	r2, #1097	; 0x449
 800c6f6:	4293      	cmp	r3, r2
 800c6f8:	d027      	beq.n	800c74a <ai_platform_api_get_network_report+0x86>
 800c6fa:	4a7f      	ldr	r2, [pc, #508]	; (800c8f8 <ai_platform_api_get_network_report+0x234>)
 800c6fc:	6813      	ldr	r3, [r2, #0]
 800c6fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c702:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800c706:	d02d      	beq.n	800c764 <ai_platform_api_get_network_report+0xa0>
 800c708:	6813      	ldr	r3, [r2, #0]
 800c70a:	f240 4183 	movw	r1, #1155	; 0x483
 800c70e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c712:	428b      	cmp	r3, r1
 800c714:	f000 80c6 	beq.w	800c8a4 <ai_platform_api_get_network_report+0x1e0>
 800c718:	6813      	ldr	r3, [r2, #0]
 800c71a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c71e:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800c722:	f000 80ab 	beq.w	800c87c <ai_platform_api_get_network_report+0x1b8>
 800c726:	6813      	ldr	r3, [r2, #0]
 800c728:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d129      	bne.n	800c784 <ai_platform_api_get_network_report+0xc0>
 800c730:	4a72      	ldr	r2, [pc, #456]	; (800c8fc <ai_platform_api_get_network_report+0x238>)
 800c732:	2301      	movs	r3, #1
 800c734:	6093      	str	r3, [r2, #8]
 800c736:	6893      	ldr	r3, [r2, #8]
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d1fc      	bne.n	800c736 <ai_platform_api_get_network_report+0x72>
 800c73c:	4b70      	ldr	r3, [pc, #448]	; (800c900 <ai_platform_api_get_network_report+0x23c>)
 800c73e:	6013      	str	r3, [r2, #0]
 800c740:	4b70      	ldr	r3, [pc, #448]	; (800c904 <ai_platform_api_get_network_report+0x240>)
 800c742:	6812      	ldr	r2, [r2, #0]
 800c744:	429a      	cmp	r2, r3
 800c746:	d01d      	beq.n	800c784 <ai_platform_api_get_network_report+0xc0>
 800c748:	e7fe      	b.n	800c748 <ai_platform_api_get_network_report+0x84>
 800c74a:	4a6c      	ldr	r2, [pc, #432]	; (800c8fc <ai_platform_api_get_network_report+0x238>)
 800c74c:	2301      	movs	r3, #1
 800c74e:	6093      	str	r3, [r2, #8]
 800c750:	6893      	ldr	r3, [r2, #8]
 800c752:	2b00      	cmp	r3, #0
 800c754:	d1fc      	bne.n	800c750 <ai_platform_api_get_network_report+0x8c>
 800c756:	4b6a      	ldr	r3, [pc, #424]	; (800c900 <ai_platform_api_get_network_report+0x23c>)
 800c758:	6013      	str	r3, [r2, #0]
 800c75a:	4b6a      	ldr	r3, [pc, #424]	; (800c904 <ai_platform_api_get_network_report+0x240>)
 800c75c:	6812      	ldr	r2, [r2, #0]
 800c75e:	429a      	cmp	r2, r3
 800c760:	d010      	beq.n	800c784 <ai_platform_api_get_network_report+0xc0>
 800c762:	e7fe      	b.n	800c762 <ai_platform_api_get_network_report+0x9e>
 800c764:	4a68      	ldr	r2, [pc, #416]	; (800c908 <ai_platform_api_get_network_report+0x244>)
 800c766:	2301      	movs	r3, #1
 800c768:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800c76c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800c770:	2b00      	cmp	r3, #0
 800c772:	d1fb      	bne.n	800c76c <ai_platform_api_get_network_report+0xa8>
 800c774:	4b62      	ldr	r3, [pc, #392]	; (800c900 <ai_platform_api_get_network_report+0x23c>)
 800c776:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800c77a:	4b62      	ldr	r3, [pc, #392]	; (800c904 <ai_platform_api_get_network_report+0x240>)
 800c77c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800c780:	429a      	cmp	r2, r3
 800c782:	d16c      	bne.n	800c85e <ai_platform_api_get_network_report+0x19a>
 800c784:	f7ff fafa 	bl	800bd7c <_ai_platform_release_crc>
 800c788:	9801      	ldr	r0, [sp, #4]
 800c78a:	2800      	cmp	r0, #0
 800c78c:	bf18      	it	ne
 800c78e:	2f00      	cmpne	r7, #0
 800c790:	bf0c      	ite	eq
 800c792:	2301      	moveq	r3, #1
 800c794:	2300      	movne	r3, #0
 800c796:	9302      	str	r3, [sp, #8]
 800c798:	d07e      	beq.n	800c898 <ai_platform_api_get_network_report+0x1d4>
 800c79a:	6743      	str	r3, [r0, #116]	; 0x74
 800c79c:	4619      	mov	r1, r3
 800c79e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7a0:	b13b      	cbz	r3, 800c7b2 <ai_platform_api_get_network_report+0xee>
 800c7a2:	3101      	adds	r1, #1
 800c7a4:	6741      	str	r1, [r0, #116]	; 0x74
 800c7a6:	691a      	ldr	r2, [r3, #16]
 800c7a8:	b11a      	cbz	r2, 800c7b2 <ai_platform_api_get_network_report+0xee>
 800c7aa:	429a      	cmp	r2, r3
 800c7ac:	d001      	beq.n	800c7b2 <ai_platform_api_get_network_report+0xee>
 800c7ae:	4613      	mov	r3, r2
 800c7b0:	e7f6      	b.n	800c7a0 <ai_platform_api_get_network_report+0xdc>
 800c7b2:	2900      	cmp	r1, #0
 800c7b4:	f000 8165 	beq.w	800ca82 <ai_platform_api_get_network_report+0x3be>
 800c7b8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d050      	beq.n	800c860 <ai_platform_api_get_network_report+0x19c>
 800c7be:	f8d7 9030 	ldr.w	r9, [r7, #48]	; 0x30
 800c7c2:	f1b9 0f00 	cmp.w	r9, #0
 800c7c6:	d04b      	beq.n	800c860 <ai_platform_api_get_network_report+0x19c>
 800c7c8:	f04f 0a00 	mov.w	sl, #0
 800c7cc:	9703      	str	r7, [sp, #12]
 800c7ce:	4655      	mov	r5, sl
 800c7d0:	e016      	b.n	800c800 <ai_platform_api_get_network_report+0x13c>
 800c7d2:	2201      	movs	r2, #1
 800c7d4:	f847 200e 	str.w	r2, [r7, lr]
 800c7d8:	69b2      	ldr	r2, [r6, #24]
 800c7da:	6852      	ldr	r2, [r2, #4]
 800c7dc:	3501      	adds	r5, #1
 800c7de:	60a3      	str	r3, [r4, #8]
 800c7e0:	f04f 0301 	mov.w	r3, #1
 800c7e4:	f10a 0a1c 	add.w	sl, sl, #28
 800c7e8:	6122      	str	r2, [r4, #16]
 800c7ea:	7523      	strb	r3, [r4, #20]
 800c7ec:	2300      	movs	r3, #0
 800c7ee:	f8c4 8018 	str.w	r8, [r4, #24]
 800c7f2:	60e3      	str	r3, [r4, #12]
 800c7f4:	6963      	ldr	r3, [r4, #20]
 800c7f6:	f36b 231f 	bfi	r3, fp, #8, #24
 800c7fa:	e9c4 0100 	strd	r0, r1, [r4]
 800c7fe:	6163      	str	r3, [r4, #20]
 800c800:	f8b9 3000 	ldrh.w	r3, [r9]
 800c804:	b2aa      	uxth	r2, r5
 800c806:	42ab      	cmp	r3, r5
 800c808:	d95e      	bls.n	800c8c8 <ai_platform_api_get_network_report+0x204>
 800c80a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d05a      	beq.n	800c8c8 <ai_platform_api_get_network_report+0x204>
 800c812:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 800c816:	2e00      	cmp	r6, #0
 800c818:	d056      	beq.n	800c8c8 <ai_platform_api_get_network_report+0x204>
 800c81a:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800c81e:	69b2      	ldr	r2, [r6, #24]
 800c820:	f8d6 800c 	ldr.w	r8, [r6, #12]
 800c824:	6810      	ldr	r0, [r2, #0]
 800c826:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 800c82a:	68b3      	ldr	r3, [r6, #8]
 800c82c:	4454      	add	r4, sl
 800c82e:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 800c832:	f7ff f915 	bl	800ba60 <ai_array_to_buffer_fmt>
 800c836:	69b2      	ldr	r2, [r6, #24]
 800c838:	eb07 03c5 	add.w	r3, r7, r5, lsl #3
 800c83c:	ea4f 0ec5 	mov.w	lr, r5, lsl #3
 800c840:	6891      	ldr	r1, [r2, #8]
 800c842:	2b00      	cmp	r3, #0
 800c844:	d0c9      	beq.n	800c7da <ai_platform_api_get_network_report+0x116>
 800c846:	2200      	movs	r2, #0
 800c848:	f847 2035 	str.w	r2, [r7, r5, lsl #3]
 800c84c:	6832      	ldr	r2, [r6, #0]
 800c84e:	605a      	str	r2, [r3, #4]
 800c850:	b112      	cbz	r2, 800c858 <ai_platform_api_get_network_report+0x194>
 800c852:	8852      	ldrh	r2, [r2, #2]
 800c854:	2a00      	cmp	r2, #0
 800c856:	d1bc      	bne.n	800c7d2 <ai_platform_api_get_network_report+0x10e>
 800c858:	69b2      	ldr	r2, [r6, #24]
 800c85a:	2300      	movs	r3, #0
 800c85c:	e7bd      	b.n	800c7da <ai_platform_api_get_network_report+0x116>
 800c85e:	e7fe      	b.n	800c85e <ai_platform_api_get_network_report+0x19a>
 800c860:	9901      	ldr	r1, [sp, #4]
 800c862:	2300      	movs	r3, #0
 800c864:	2218      	movs	r2, #24
 800c866:	f107 0010 	add.w	r0, r7, #16
 800c86a:	634b      	str	r3, [r1, #52]	; 0x34
 800c86c:	860b      	strh	r3, [r1, #48]	; 0x30
 800c86e:	2112      	movs	r1, #18
 800c870:	f001 fd44 	bl	800e2fc <core_set_error>
 800c874:	9802      	ldr	r0, [sp, #8]
 800c876:	b009      	add	sp, #36	; 0x24
 800c878:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c87c:	4a1f      	ldr	r2, [pc, #124]	; (800c8fc <ai_platform_api_get_network_report+0x238>)
 800c87e:	2301      	movs	r3, #1
 800c880:	6093      	str	r3, [r2, #8]
 800c882:	6893      	ldr	r3, [r2, #8]
 800c884:	2b00      	cmp	r3, #0
 800c886:	d1fc      	bne.n	800c882 <ai_platform_api_get_network_report+0x1be>
 800c888:	4b1d      	ldr	r3, [pc, #116]	; (800c900 <ai_platform_api_get_network_report+0x23c>)
 800c88a:	6013      	str	r3, [r2, #0]
 800c88c:	4b1d      	ldr	r3, [pc, #116]	; (800c904 <ai_platform_api_get_network_report+0x240>)
 800c88e:	6812      	ldr	r2, [r2, #0]
 800c890:	429a      	cmp	r2, r3
 800c892:	f43f af77 	beq.w	800c784 <ai_platform_api_get_network_report+0xc0>
 800c896:	e7fe      	b.n	800c896 <ai_platform_api_get_network_report+0x1d2>
 800c898:	2300      	movs	r3, #0
 800c89a:	9302      	str	r3, [sp, #8]
 800c89c:	9802      	ldr	r0, [sp, #8]
 800c89e:	b009      	add	sp, #36	; 0x24
 800c8a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8a4:	4a18      	ldr	r2, [pc, #96]	; (800c908 <ai_platform_api_get_network_report+0x244>)
 800c8a6:	2301      	movs	r3, #1
 800c8a8:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800c8ac:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d1fb      	bne.n	800c8ac <ai_platform_api_get_network_report+0x1e8>
 800c8b4:	4b12      	ldr	r3, [pc, #72]	; (800c900 <ai_platform_api_get_network_report+0x23c>)
 800c8b6:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800c8ba:	4b12      	ldr	r3, [pc, #72]	; (800c904 <ai_platform_api_get_network_report+0x240>)
 800c8bc:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800c8c0:	429a      	cmp	r2, r3
 800c8c2:	f43f af5f 	beq.w	800c784 <ai_platform_api_get_network_report+0xc0>
 800c8c6:	e7fe      	b.n	800c8c6 <ai_platform_api_get_network_report+0x202>
 800c8c8:	9f03      	ldr	r7, [sp, #12]
 800c8ca:	2a00      	cmp	r2, #0
 800c8cc:	d0c8      	beq.n	800c860 <ai_platform_api_get_network_report+0x19c>
 800c8ce:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800c8d2:	9901      	ldr	r1, [sp, #4]
 800c8d4:	685b      	ldr	r3, [r3, #4]
 800c8d6:	860a      	strh	r2, [r1, #48]	; 0x30
 800c8d8:	634b      	str	r3, [r1, #52]	; 0x34
 800c8da:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c8dc:	2b01      	cmp	r3, #1
 800c8de:	f240 80c5 	bls.w	800ca6c <ai_platform_api_get_network_report+0x3a8>
 800c8e2:	f04f 0a00 	mov.w	sl, #0
 800c8e6:	f8d7 9030 	ldr.w	r9, [r7, #48]	; 0x30
 800c8ea:	9703      	str	r7, [sp, #12]
 800c8ec:	4655      	mov	r5, sl
 800c8ee:	e024      	b.n	800c93a <ai_platform_api_get_network_report+0x276>
 800c8f0:	a1c00100 	.word	0xa1c00100
 800c8f4:	e0042000 	.word	0xe0042000
 800c8f8:	5c001000 	.word	0x5c001000
 800c8fc:	40023000 	.word	0x40023000
 800c900:	f407a5c2 	.word	0xf407a5c2
 800c904:	b5e8b5cd 	.word	0xb5e8b5cd
 800c908:	58024000 	.word	0x58024000
 800c90c:	2201      	movs	r2, #1
 800c90e:	f847 200e 	str.w	r2, [r7, lr]
 800c912:	69b2      	ldr	r2, [r6, #24]
 800c914:	6852      	ldr	r2, [r2, #4]
 800c916:	3501      	adds	r5, #1
 800c918:	60a3      	str	r3, [r4, #8]
 800c91a:	f04f 0301 	mov.w	r3, #1
 800c91e:	f10a 0a1c 	add.w	sl, sl, #28
 800c922:	6122      	str	r2, [r4, #16]
 800c924:	7523      	strb	r3, [r4, #20]
 800c926:	2300      	movs	r3, #0
 800c928:	f8c4 8018 	str.w	r8, [r4, #24]
 800c92c:	60e3      	str	r3, [r4, #12]
 800c92e:	6963      	ldr	r3, [r4, #20]
 800c930:	f36b 231f 	bfi	r3, fp, #8, #24
 800c934:	e9c4 0100 	strd	r0, r1, [r4]
 800c938:	6163      	str	r3, [r4, #20]
 800c93a:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800c93e:	b2aa      	uxth	r2, r5
 800c940:	42ab      	cmp	r3, r5
 800c942:	d927      	bls.n	800c994 <ai_platform_api_get_network_report+0x2d0>
 800c944:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c948:	b323      	cbz	r3, 800c994 <ai_platform_api_get_network_report+0x2d0>
 800c94a:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 800c94e:	b30e      	cbz	r6, 800c994 <ai_platform_api_get_network_report+0x2d0>
 800c950:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800c954:	69b2      	ldr	r2, [r6, #24]
 800c956:	f8d6 800c 	ldr.w	r8, [r6, #12]
 800c95a:	6810      	ldr	r0, [r2, #0]
 800c95c:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 800c960:	68b3      	ldr	r3, [r6, #8]
 800c962:	4454      	add	r4, sl
 800c964:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 800c968:	f7ff f87a 	bl	800ba60 <ai_array_to_buffer_fmt>
 800c96c:	69b2      	ldr	r2, [r6, #24]
 800c96e:	eb07 03c5 	add.w	r3, r7, r5, lsl #3
 800c972:	ea4f 0ec5 	mov.w	lr, r5, lsl #3
 800c976:	6891      	ldr	r1, [r2, #8]
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d0cb      	beq.n	800c914 <ai_platform_api_get_network_report+0x250>
 800c97c:	2200      	movs	r2, #0
 800c97e:	f847 2035 	str.w	r2, [r7, r5, lsl #3]
 800c982:	6832      	ldr	r2, [r6, #0]
 800c984:	605a      	str	r2, [r3, #4]
 800c986:	b112      	cbz	r2, 800c98e <ai_platform_api_get_network_report+0x2ca>
 800c988:	8852      	ldrh	r2, [r2, #2]
 800c98a:	2a00      	cmp	r2, #0
 800c98c:	d1be      	bne.n	800c90c <ai_platform_api_get_network_report+0x248>
 800c98e:	69b2      	ldr	r2, [r6, #24]
 800c990:	2300      	movs	r3, #0
 800c992:	e7bf      	b.n	800c914 <ai_platform_api_get_network_report+0x250>
 800c994:	9f03      	ldr	r7, [sp, #12]
 800c996:	2a00      	cmp	r2, #0
 800c998:	d068      	beq.n	800ca6c <ai_platform_api_get_network_report+0x3a8>
 800c99a:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800c99e:	f107 0524 	add.w	r5, r7, #36	; 0x24
 800c9a2:	9901      	ldr	r1, [sp, #4]
 800c9a4:	685b      	ldr	r3, [r3, #4]
 800c9a6:	4628      	mov	r0, r5
 800c9a8:	864a      	strh	r2, [r1, #50]	; 0x32
 800c9aa:	638b      	str	r3, [r1, #56]	; 0x38
 800c9ac:	f7ff f938 	bl	800bc20 <ai_buffer_array_sane>
 800c9b0:	9002      	str	r0, [sp, #8]
 800c9b2:	b960      	cbnz	r0, 800c9ce <ai_platform_api_get_network_report+0x30a>
 800c9b4:	4628      	mov	r0, r5
 800c9b6:	f7ff f933 	bl	800bc20 <ai_buffer_array_sane>
 800c9ba:	b140      	cbz	r0, 800c9ce <ai_platform_api_get_network_report+0x30a>
 800c9bc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c9be:	b133      	cbz	r3, 800c9ce <ai_platform_api_get_network_report+0x30a>
 800c9c0:	2213      	movs	r2, #19
 800c9c2:	2111      	movs	r1, #17
 800c9c4:	f107 0010 	add.w	r0, r7, #16
 800c9c8:	f001 fc98 	bl	800e2fc <core_set_error>
 800c9cc:	e752      	b.n	800c874 <ai_platform_api_get_network_report+0x1b0>
 800c9ce:	f107 061c 	add.w	r6, r7, #28
 800c9d2:	4630      	mov	r0, r6
 800c9d4:	f7ff f924 	bl	800bc20 <ai_buffer_array_sane>
 800c9d8:	9002      	str	r0, [sp, #8]
 800c9da:	b960      	cbnz	r0, 800c9f6 <ai_platform_api_get_network_report+0x332>
 800c9dc:	4630      	mov	r0, r6
 800c9de:	f7ff f91f 	bl	800bc20 <ai_buffer_array_sane>
 800c9e2:	b140      	cbz	r0, 800c9f6 <ai_platform_api_get_network_report+0x332>
 800c9e4:	8bfb      	ldrh	r3, [r7, #30]
 800c9e6:	b133      	cbz	r3, 800c9f6 <ai_platform_api_get_network_report+0x332>
 800c9e8:	2212      	movs	r2, #18
 800c9ea:	2111      	movs	r1, #17
 800c9ec:	f107 0010 	add.w	r0, r7, #16
 800c9f0:	f001 fc84 	bl	800e2fc <core_set_error>
 800c9f4:	e73e      	b.n	800c874 <ai_platform_api_get_network_report+0x1b0>
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	f46f 688a 	mvn.w	r8, #1104	; 0x450
 800c9fc:	9a01      	ldr	r2, [sp, #4]
 800c9fe:	6793      	str	r3, [r2, #120]	; 0x78
 800ca00:	f7ff f9ba 	bl	800bd78 <_ai_platform_acquire_crc>
 800ca04:	4b87      	ldr	r3, [pc, #540]	; (800cc24 <ai_platform_api_get_network_report+0x560>)
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ca0c:	eb03 0208 	add.w	r2, r3, r8
 800ca10:	2a01      	cmp	r2, #1
 800ca12:	d93d      	bls.n	800ca90 <ai_platform_api_get_network_report+0x3cc>
 800ca14:	f240 4249 	movw	r2, #1097	; 0x449
 800ca18:	4293      	cmp	r3, r2
 800ca1a:	d039      	beq.n	800ca90 <ai_platform_api_get_network_report+0x3cc>
 800ca1c:	4b82      	ldr	r3, [pc, #520]	; (800cc28 <ai_platform_api_get_network_report+0x564>)
 800ca1e:	681a      	ldr	r2, [r3, #0]
 800ca20:	f3c2 020a 	ubfx	r2, r2, #0, #11
 800ca24:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 800ca28:	d03f      	beq.n	800caaa <ai_platform_api_get_network_report+0x3e6>
 800ca2a:	681a      	ldr	r2, [r3, #0]
 800ca2c:	f240 4183 	movw	r1, #1155	; 0x483
 800ca30:	f3c2 020a 	ubfx	r2, r2, #0, #11
 800ca34:	428a      	cmp	r2, r1
 800ca36:	f000 80e3 	beq.w	800cc00 <ai_platform_api_get_network_report+0x53c>
 800ca3a:	681a      	ldr	r2, [r3, #0]
 800ca3c:	f3c2 020a 	ubfx	r2, r2, #0, #11
 800ca40:	f5b2 6f90 	cmp.w	r2, #1152	; 0x480
 800ca44:	f000 8148 	beq.w	800ccd8 <ai_platform_api_get_network_report+0x614>
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d13c      	bne.n	800cacc <ai_platform_api_get_network_report+0x408>
 800ca52:	4b76      	ldr	r3, [pc, #472]	; (800cc2c <ai_platform_api_get_network_report+0x568>)
 800ca54:	2201      	movs	r2, #1
 800ca56:	609a      	str	r2, [r3, #8]
 800ca58:	689a      	ldr	r2, [r3, #8]
 800ca5a:	2a00      	cmp	r2, #0
 800ca5c:	d1fc      	bne.n	800ca58 <ai_platform_api_get_network_report+0x394>
 800ca5e:	4a74      	ldr	r2, [pc, #464]	; (800cc30 <ai_platform_api_get_network_report+0x56c>)
 800ca60:	601a      	str	r2, [r3, #0]
 800ca62:	681a      	ldr	r2, [r3, #0]
 800ca64:	4b73      	ldr	r3, [pc, #460]	; (800cc34 <ai_platform_api_get_network_report+0x570>)
 800ca66:	429a      	cmp	r2, r3
 800ca68:	d030      	beq.n	800cacc <ai_platform_api_get_network_report+0x408>
 800ca6a:	e7fe      	b.n	800ca6a <ai_platform_api_get_network_report+0x3a6>
 800ca6c:	9901      	ldr	r1, [sp, #4]
 800ca6e:	2300      	movs	r3, #0
 800ca70:	2218      	movs	r2, #24
 800ca72:	f107 0010 	add.w	r0, r7, #16
 800ca76:	638b      	str	r3, [r1, #56]	; 0x38
 800ca78:	864b      	strh	r3, [r1, #50]	; 0x32
 800ca7a:	2113      	movs	r1, #19
 800ca7c:	f001 fc3e 	bl	800e2fc <core_set_error>
 800ca80:	e6f8      	b.n	800c874 <ai_platform_api_get_network_report+0x1b0>
 800ca82:	2218      	movs	r2, #24
 800ca84:	2111      	movs	r1, #17
 800ca86:	f107 0010 	add.w	r0, r7, #16
 800ca8a:	f001 fc37 	bl	800e2fc <core_set_error>
 800ca8e:	e6f1      	b.n	800c874 <ai_platform_api_get_network_report+0x1b0>
 800ca90:	4a66      	ldr	r2, [pc, #408]	; (800cc2c <ai_platform_api_get_network_report+0x568>)
 800ca92:	2301      	movs	r3, #1
 800ca94:	6093      	str	r3, [r2, #8]
 800ca96:	6893      	ldr	r3, [r2, #8]
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d1fc      	bne.n	800ca96 <ai_platform_api_get_network_report+0x3d2>
 800ca9c:	4b64      	ldr	r3, [pc, #400]	; (800cc30 <ai_platform_api_get_network_report+0x56c>)
 800ca9e:	6013      	str	r3, [r2, #0]
 800caa0:	4b64      	ldr	r3, [pc, #400]	; (800cc34 <ai_platform_api_get_network_report+0x570>)
 800caa2:	6812      	ldr	r2, [r2, #0]
 800caa4:	429a      	cmp	r2, r3
 800caa6:	d011      	beq.n	800cacc <ai_platform_api_get_network_report+0x408>
 800caa8:	e7fe      	b.n	800caa8 <ai_platform_api_get_network_report+0x3e4>
 800caaa:	4b63      	ldr	r3, [pc, #396]	; (800cc38 <ai_platform_api_get_network_report+0x574>)
 800caac:	2201      	movs	r2, #1
 800caae:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 800cab2:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 800cab6:	2a00      	cmp	r2, #0
 800cab8:	d1fb      	bne.n	800cab2 <ai_platform_api_get_network_report+0x3ee>
 800caba:	4a5d      	ldr	r2, [pc, #372]	; (800cc30 <ai_platform_api_get_network_report+0x56c>)
 800cabc:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 800cac0:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 800cac4:	4b5b      	ldr	r3, [pc, #364]	; (800cc34 <ai_platform_api_get_network_report+0x570>)
 800cac6:	429a      	cmp	r2, r3
 800cac8:	f040 8099 	bne.w	800cbfe <ai_platform_api_get_network_report+0x53a>
 800cacc:	f7ff f956 	bl	800bd7c <_ai_platform_release_crc>
 800cad0:	4b5a      	ldr	r3, [pc, #360]	; (800cc3c <ai_platform_api_get_network_report+0x578>)
 800cad2:	9a01      	ldr	r2, [sp, #4]
 800cad4:	6113      	str	r3, [r2, #16]
 800cad6:	f7ff f94f 	bl	800bd78 <_ai_platform_acquire_crc>
 800cada:	4b52      	ldr	r3, [pc, #328]	; (800cc24 <ai_platform_api_get_network_report+0x560>)
 800cadc:	f46f 6e8a 	mvn.w	lr, #1104	; 0x450
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cae6:	eb03 020e 	add.w	r2, r3, lr
 800caea:	2a01      	cmp	r2, #1
 800caec:	d92b      	bls.n	800cb46 <ai_platform_api_get_network_report+0x482>
 800caee:	f240 4249 	movw	r2, #1097	; 0x449
 800caf2:	4293      	cmp	r3, r2
 800caf4:	d027      	beq.n	800cb46 <ai_platform_api_get_network_report+0x482>
 800caf6:	4b4c      	ldr	r3, [pc, #304]	; (800cc28 <ai_platform_api_get_network_report+0x564>)
 800caf8:	681a      	ldr	r2, [r3, #0]
 800cafa:	f3c2 020a 	ubfx	r2, r2, #0, #11
 800cafe:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 800cb02:	d02d      	beq.n	800cb60 <ai_platform_api_get_network_report+0x49c>
 800cb04:	681a      	ldr	r2, [r3, #0]
 800cb06:	f240 4183 	movw	r1, #1155	; 0x483
 800cb0a:	f3c2 020a 	ubfx	r2, r2, #0, #11
 800cb0e:	428a      	cmp	r2, r1
 800cb10:	f000 810f 	beq.w	800cd32 <ai_platform_api_get_network_report+0x66e>
 800cb14:	681a      	ldr	r2, [r3, #0]
 800cb16:	f3c2 020a 	ubfx	r2, r2, #0, #11
 800cb1a:	f5b2 6f90 	cmp.w	r2, #1152	; 0x480
 800cb1e:	f000 80fa 	beq.w	800cd16 <ai_platform_api_get_network_report+0x652>
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d12a      	bne.n	800cb82 <ai_platform_api_get_network_report+0x4be>
 800cb2c:	4b3f      	ldr	r3, [pc, #252]	; (800cc2c <ai_platform_api_get_network_report+0x568>)
 800cb2e:	2201      	movs	r2, #1
 800cb30:	609a      	str	r2, [r3, #8]
 800cb32:	689a      	ldr	r2, [r3, #8]
 800cb34:	2a00      	cmp	r2, #0
 800cb36:	d1fc      	bne.n	800cb32 <ai_platform_api_get_network_report+0x46e>
 800cb38:	4a3d      	ldr	r2, [pc, #244]	; (800cc30 <ai_platform_api_get_network_report+0x56c>)
 800cb3a:	601a      	str	r2, [r3, #0]
 800cb3c:	681a      	ldr	r2, [r3, #0]
 800cb3e:	4b3d      	ldr	r3, [pc, #244]	; (800cc34 <ai_platform_api_get_network_report+0x570>)
 800cb40:	429a      	cmp	r2, r3
 800cb42:	d01e      	beq.n	800cb82 <ai_platform_api_get_network_report+0x4be>
 800cb44:	e7fe      	b.n	800cb44 <ai_platform_api_get_network_report+0x480>
 800cb46:	4a39      	ldr	r2, [pc, #228]	; (800cc2c <ai_platform_api_get_network_report+0x568>)
 800cb48:	2301      	movs	r3, #1
 800cb4a:	6093      	str	r3, [r2, #8]
 800cb4c:	6893      	ldr	r3, [r2, #8]
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d1fc      	bne.n	800cb4c <ai_platform_api_get_network_report+0x488>
 800cb52:	4b37      	ldr	r3, [pc, #220]	; (800cc30 <ai_platform_api_get_network_report+0x56c>)
 800cb54:	6013      	str	r3, [r2, #0]
 800cb56:	4b37      	ldr	r3, [pc, #220]	; (800cc34 <ai_platform_api_get_network_report+0x570>)
 800cb58:	6812      	ldr	r2, [r2, #0]
 800cb5a:	429a      	cmp	r2, r3
 800cb5c:	d011      	beq.n	800cb82 <ai_platform_api_get_network_report+0x4be>
 800cb5e:	e7fe      	b.n	800cb5e <ai_platform_api_get_network_report+0x49a>
 800cb60:	4b35      	ldr	r3, [pc, #212]	; (800cc38 <ai_platform_api_get_network_report+0x574>)
 800cb62:	2201      	movs	r2, #1
 800cb64:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 800cb68:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 800cb6c:	2a00      	cmp	r2, #0
 800cb6e:	d1fb      	bne.n	800cb68 <ai_platform_api_get_network_report+0x4a4>
 800cb70:	4a2f      	ldr	r2, [pc, #188]	; (800cc30 <ai_platform_api_get_network_report+0x56c>)
 800cb72:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 800cb76:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 800cb7a:	4b2e      	ldr	r3, [pc, #184]	; (800cc34 <ai_platform_api_get_network_report+0x570>)
 800cb7c:	429a      	cmp	r2, r3
 800cb7e:	f040 80aa 	bne.w	800ccd6 <ai_platform_api_get_network_report+0x612>
 800cb82:	f7ff f8fb 	bl	800bd7c <_ai_platform_release_crc>
 800cb86:	2308      	movs	r3, #8
 800cb88:	9a01      	ldr	r2, [sp, #4]
 800cb8a:	6153      	str	r3, [r2, #20]
 800cb8c:	f7ff f8f4 	bl	800bd78 <_ai_platform_acquire_crc>
 800cb90:	4b24      	ldr	r3, [pc, #144]	; (800cc24 <ai_platform_api_get_network_report+0x560>)
 800cb92:	f46f 6c8a 	mvn.w	ip, #1104	; 0x450
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cb9c:	eb03 020c 	add.w	r2, r3, ip
 800cba0:	2a01      	cmp	r2, #1
 800cba2:	d94d      	bls.n	800cc40 <ai_platform_api_get_network_report+0x57c>
 800cba4:	f240 4249 	movw	r2, #1097	; 0x449
 800cba8:	4293      	cmp	r3, r2
 800cbaa:	d049      	beq.n	800cc40 <ai_platform_api_get_network_report+0x57c>
 800cbac:	4b1e      	ldr	r3, [pc, #120]	; (800cc28 <ai_platform_api_get_network_report+0x564>)
 800cbae:	681a      	ldr	r2, [r3, #0]
 800cbb0:	f3c2 020a 	ubfx	r2, r2, #0, #11
 800cbb4:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 800cbb8:	f000 809c 	beq.w	800ccf4 <ai_platform_api_get_network_report+0x630>
 800cbbc:	681a      	ldr	r2, [r3, #0]
 800cbbe:	f240 4183 	movw	r1, #1155	; 0x483
 800cbc2:	f3c2 020a 	ubfx	r2, r2, #0, #11
 800cbc6:	428a      	cmp	r2, r1
 800cbc8:	f000 80fd 	beq.w	800cdc6 <ai_platform_api_get_network_report+0x702>
 800cbcc:	681a      	ldr	r2, [r3, #0]
 800cbce:	f3c2 020a 	ubfx	r2, r2, #0, #11
 800cbd2:	f5b2 6f90 	cmp.w	r2, #1152	; 0x480
 800cbd6:	f000 80e8 	beq.w	800cdaa <ai_platform_api_get_network_report+0x6e6>
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d139      	bne.n	800cc58 <ai_platform_api_get_network_report+0x594>
 800cbe4:	4b11      	ldr	r3, [pc, #68]	; (800cc2c <ai_platform_api_get_network_report+0x568>)
 800cbe6:	2201      	movs	r2, #1
 800cbe8:	609a      	str	r2, [r3, #8]
 800cbea:	689a      	ldr	r2, [r3, #8]
 800cbec:	2a00      	cmp	r2, #0
 800cbee:	d1fc      	bne.n	800cbea <ai_platform_api_get_network_report+0x526>
 800cbf0:	4a0f      	ldr	r2, [pc, #60]	; (800cc30 <ai_platform_api_get_network_report+0x56c>)
 800cbf2:	601a      	str	r2, [r3, #0]
 800cbf4:	681a      	ldr	r2, [r3, #0]
 800cbf6:	4b0f      	ldr	r3, [pc, #60]	; (800cc34 <ai_platform_api_get_network_report+0x570>)
 800cbf8:	429a      	cmp	r2, r3
 800cbfa:	d02d      	beq.n	800cc58 <ai_platform_api_get_network_report+0x594>
 800cbfc:	e7fe      	b.n	800cbfc <ai_platform_api_get_network_report+0x538>
 800cbfe:	e7fe      	b.n	800cbfe <ai_platform_api_get_network_report+0x53a>
 800cc00:	4b0d      	ldr	r3, [pc, #52]	; (800cc38 <ai_platform_api_get_network_report+0x574>)
 800cc02:	2201      	movs	r2, #1
 800cc04:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 800cc08:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 800cc0c:	2a00      	cmp	r2, #0
 800cc0e:	d1fb      	bne.n	800cc08 <ai_platform_api_get_network_report+0x544>
 800cc10:	4a07      	ldr	r2, [pc, #28]	; (800cc30 <ai_platform_api_get_network_report+0x56c>)
 800cc12:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 800cc16:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 800cc1a:	4b06      	ldr	r3, [pc, #24]	; (800cc34 <ai_platform_api_get_network_report+0x570>)
 800cc1c:	429a      	cmp	r2, r3
 800cc1e:	f43f af55 	beq.w	800cacc <ai_platform_api_get_network_report+0x408>
 800cc22:	e7fe      	b.n	800cc22 <ai_platform_api_get_network_report+0x55e>
 800cc24:	e0042000 	.word	0xe0042000
 800cc28:	5c001000 	.word	0x5c001000
 800cc2c:	40023000 	.word	0x40023000
 800cc30:	f407a5c2 	.word	0xf407a5c2
 800cc34:	b5e8b5cd 	.word	0xb5e8b5cd
 800cc38:	58024000 	.word	0x58024000
 800cc3c:	08017044 	.word	0x08017044
 800cc40:	4ba5      	ldr	r3, [pc, #660]	; (800ced8 <ai_platform_api_get_network_report+0x814>)
 800cc42:	2201      	movs	r2, #1
 800cc44:	609a      	str	r2, [r3, #8]
 800cc46:	689a      	ldr	r2, [r3, #8]
 800cc48:	2a00      	cmp	r2, #0
 800cc4a:	d1fc      	bne.n	800cc46 <ai_platform_api_get_network_report+0x582>
 800cc4c:	4aa3      	ldr	r2, [pc, #652]	; (800cedc <ai_platform_api_get_network_report+0x818>)
 800cc4e:	601a      	str	r2, [r3, #0]
 800cc50:	681a      	ldr	r2, [r3, #0]
 800cc52:	4ba3      	ldr	r3, [pc, #652]	; (800cee0 <ai_platform_api_get_network_report+0x81c>)
 800cc54:	429a      	cmp	r2, r3
 800cc56:	d13d      	bne.n	800ccd4 <ai_platform_api_get_network_report+0x610>
 800cc58:	f7ff f890 	bl	800bd7c <_ai_platform_release_crc>
 800cc5c:	f240 2301 	movw	r3, #513	; 0x201
 800cc60:	9a01      	ldr	r2, [sp, #4]
 800cc62:	f46f 648a 	mvn.w	r4, #1104	; 0x450
 800cc66:	6253      	str	r3, [r2, #36]	; 0x24
 800cc68:	f7ff f886 	bl	800bd78 <_ai_platform_acquire_crc>
 800cc6c:	4b9d      	ldr	r3, [pc, #628]	; (800cee4 <ai_platform_api_get_network_report+0x820>)
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cc74:	191a      	adds	r2, r3, r4
 800cc76:	2a01      	cmp	r2, #1
 800cc78:	d96d      	bls.n	800cd56 <ai_platform_api_get_network_report+0x692>
 800cc7a:	f240 4249 	movw	r2, #1097	; 0x449
 800cc7e:	4293      	cmp	r3, r2
 800cc80:	d069      	beq.n	800cd56 <ai_platform_api_get_network_report+0x692>
 800cc82:	4b99      	ldr	r3, [pc, #612]	; (800cee8 <ai_platform_api_get_network_report+0x824>)
 800cc84:	681a      	ldr	r2, [r3, #0]
 800cc86:	f3c2 020a 	ubfx	r2, r2, #0, #11
 800cc8a:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 800cc8e:	f000 80ca 	beq.w	800ce26 <ai_platform_api_get_network_report+0x762>
 800cc92:	681a      	ldr	r2, [r3, #0]
 800cc94:	f240 4183 	movw	r1, #1155	; 0x483
 800cc98:	f3c2 020a 	ubfx	r2, r2, #0, #11
 800cc9c:	428a      	cmp	r2, r1
 800cc9e:	f000 80b1 	beq.w	800ce04 <ai_platform_api_get_network_report+0x740>
 800cca2:	681a      	ldr	r2, [r3, #0]
 800cca4:	f3c2 020a 	ubfx	r2, r2, #0, #11
 800cca8:	f5b2 6f90 	cmp.w	r2, #1152	; 0x480
 800ccac:	f000 809d 	beq.w	800cdea <ai_platform_api_get_network_report+0x726>
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d159      	bne.n	800cd6e <ai_platform_api_get_network_report+0x6aa>
 800ccba:	4b87      	ldr	r3, [pc, #540]	; (800ced8 <ai_platform_api_get_network_report+0x814>)
 800ccbc:	2201      	movs	r2, #1
 800ccbe:	609a      	str	r2, [r3, #8]
 800ccc0:	689a      	ldr	r2, [r3, #8]
 800ccc2:	2a00      	cmp	r2, #0
 800ccc4:	d1fc      	bne.n	800ccc0 <ai_platform_api_get_network_report+0x5fc>
 800ccc6:	4a85      	ldr	r2, [pc, #532]	; (800cedc <ai_platform_api_get_network_report+0x818>)
 800ccc8:	601a      	str	r2, [r3, #0]
 800ccca:	681a      	ldr	r2, [r3, #0]
 800cccc:	4b84      	ldr	r3, [pc, #528]	; (800cee0 <ai_platform_api_get_network_report+0x81c>)
 800ccce:	429a      	cmp	r2, r3
 800ccd0:	d04d      	beq.n	800cd6e <ai_platform_api_get_network_report+0x6aa>
 800ccd2:	e7fe      	b.n	800ccd2 <ai_platform_api_get_network_report+0x60e>
 800ccd4:	e7fe      	b.n	800ccd4 <ai_platform_api_get_network_report+0x610>
 800ccd6:	e7fe      	b.n	800ccd6 <ai_platform_api_get_network_report+0x612>
 800ccd8:	4b7f      	ldr	r3, [pc, #508]	; (800ced8 <ai_platform_api_get_network_report+0x814>)
 800ccda:	2201      	movs	r2, #1
 800ccdc:	609a      	str	r2, [r3, #8]
 800ccde:	689a      	ldr	r2, [r3, #8]
 800cce0:	2a00      	cmp	r2, #0
 800cce2:	d1fc      	bne.n	800ccde <ai_platform_api_get_network_report+0x61a>
 800cce4:	4a7d      	ldr	r2, [pc, #500]	; (800cedc <ai_platform_api_get_network_report+0x818>)
 800cce6:	601a      	str	r2, [r3, #0]
 800cce8:	681a      	ldr	r2, [r3, #0]
 800ccea:	4b7d      	ldr	r3, [pc, #500]	; (800cee0 <ai_platform_api_get_network_report+0x81c>)
 800ccec:	429a      	cmp	r2, r3
 800ccee:	f43f aeed 	beq.w	800cacc <ai_platform_api_get_network_report+0x408>
 800ccf2:	e7fe      	b.n	800ccf2 <ai_platform_api_get_network_report+0x62e>
 800ccf4:	4b7d      	ldr	r3, [pc, #500]	; (800ceec <ai_platform_api_get_network_report+0x828>)
 800ccf6:	2201      	movs	r2, #1
 800ccf8:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 800ccfc:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 800cd00:	2a00      	cmp	r2, #0
 800cd02:	d1fb      	bne.n	800ccfc <ai_platform_api_get_network_report+0x638>
 800cd04:	4a75      	ldr	r2, [pc, #468]	; (800cedc <ai_platform_api_get_network_report+0x818>)
 800cd06:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 800cd0a:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 800cd0e:	4b74      	ldr	r3, [pc, #464]	; (800cee0 <ai_platform_api_get_network_report+0x81c>)
 800cd10:	429a      	cmp	r2, r3
 800cd12:	d0a1      	beq.n	800cc58 <ai_platform_api_get_network_report+0x594>
 800cd14:	e7fe      	b.n	800cd14 <ai_platform_api_get_network_report+0x650>
 800cd16:	4b70      	ldr	r3, [pc, #448]	; (800ced8 <ai_platform_api_get_network_report+0x814>)
 800cd18:	2201      	movs	r2, #1
 800cd1a:	609a      	str	r2, [r3, #8]
 800cd1c:	689a      	ldr	r2, [r3, #8]
 800cd1e:	2a00      	cmp	r2, #0
 800cd20:	d1fc      	bne.n	800cd1c <ai_platform_api_get_network_report+0x658>
 800cd22:	4a6e      	ldr	r2, [pc, #440]	; (800cedc <ai_platform_api_get_network_report+0x818>)
 800cd24:	601a      	str	r2, [r3, #0]
 800cd26:	681a      	ldr	r2, [r3, #0]
 800cd28:	4b6d      	ldr	r3, [pc, #436]	; (800cee0 <ai_platform_api_get_network_report+0x81c>)
 800cd2a:	429a      	cmp	r2, r3
 800cd2c:	f43f af29 	beq.w	800cb82 <ai_platform_api_get_network_report+0x4be>
 800cd30:	e7fe      	b.n	800cd30 <ai_platform_api_get_network_report+0x66c>
 800cd32:	4b6e      	ldr	r3, [pc, #440]	; (800ceec <ai_platform_api_get_network_report+0x828>)
 800cd34:	2201      	movs	r2, #1
 800cd36:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 800cd3a:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 800cd3e:	2a00      	cmp	r2, #0
 800cd40:	d1fb      	bne.n	800cd3a <ai_platform_api_get_network_report+0x676>
 800cd42:	4a66      	ldr	r2, [pc, #408]	; (800cedc <ai_platform_api_get_network_report+0x818>)
 800cd44:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 800cd48:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 800cd4c:	4b64      	ldr	r3, [pc, #400]	; (800cee0 <ai_platform_api_get_network_report+0x81c>)
 800cd4e:	429a      	cmp	r2, r3
 800cd50:	f43f af17 	beq.w	800cb82 <ai_platform_api_get_network_report+0x4be>
 800cd54:	e7fe      	b.n	800cd54 <ai_platform_api_get_network_report+0x690>
 800cd56:	4b60      	ldr	r3, [pc, #384]	; (800ced8 <ai_platform_api_get_network_report+0x814>)
 800cd58:	2201      	movs	r2, #1
 800cd5a:	609a      	str	r2, [r3, #8]
 800cd5c:	689a      	ldr	r2, [r3, #8]
 800cd5e:	2a00      	cmp	r2, #0
 800cd60:	d1fc      	bne.n	800cd5c <ai_platform_api_get_network_report+0x698>
 800cd62:	4a5e      	ldr	r2, [pc, #376]	; (800cedc <ai_platform_api_get_network_report+0x818>)
 800cd64:	601a      	str	r2, [r3, #0]
 800cd66:	681a      	ldr	r2, [r3, #0]
 800cd68:	4b5d      	ldr	r3, [pc, #372]	; (800cee0 <ai_platform_api_get_network_report+0x81c>)
 800cd6a:	429a      	cmp	r2, r3
 800cd6c:	d11c      	bne.n	800cda8 <ai_platform_api_get_network_report+0x6e4>
 800cd6e:	f7ff f805 	bl	800bd7c <_ai_platform_release_crc>
 800cd72:	9c01      	ldr	r4, [sp, #4]
 800cd74:	f240 5301 	movw	r3, #1281	; 0x501
 800cd78:	62a3      	str	r3, [r4, #40]	; 0x28
 800cd7a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800cd7c:	f7fe fe34 	bl	800b9e8 <ai_platform_version_get>
 800cd80:	4b5b      	ldr	r3, [pc, #364]	; (800cef0 <ai_platform_api_get_network_report+0x82c>)
 800cd82:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800cd84:	6220      	str	r0, [r4, #32]
 800cd86:	429a      	cmp	r2, r3
 800cd88:	d15e      	bne.n	800ce48 <ai_platform_api_get_network_report+0x784>
 800cd8a:	f104 0248 	add.w	r2, r4, #72	; 0x48
 800cd8e:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800cd92:	e895 0003 	ldmia.w	r5, {r0, r1}
 800cd96:	e882 0003 	stmia.w	r2, {r0, r1}
 800cd9a:	2201      	movs	r2, #1
 800cd9c:	e896 0003 	ldmia.w	r6, {r0, r1}
 800cda0:	9202      	str	r2, [sp, #8]
 800cda2:	e883 0003 	stmia.w	r3, {r0, r1}
 800cda6:	e565      	b.n	800c874 <ai_platform_api_get_network_report+0x1b0>
 800cda8:	e7fe      	b.n	800cda8 <ai_platform_api_get_network_report+0x6e4>
 800cdaa:	4b4b      	ldr	r3, [pc, #300]	; (800ced8 <ai_platform_api_get_network_report+0x814>)
 800cdac:	2201      	movs	r2, #1
 800cdae:	609a      	str	r2, [r3, #8]
 800cdb0:	689a      	ldr	r2, [r3, #8]
 800cdb2:	2a00      	cmp	r2, #0
 800cdb4:	d1fc      	bne.n	800cdb0 <ai_platform_api_get_network_report+0x6ec>
 800cdb6:	4a49      	ldr	r2, [pc, #292]	; (800cedc <ai_platform_api_get_network_report+0x818>)
 800cdb8:	601a      	str	r2, [r3, #0]
 800cdba:	681a      	ldr	r2, [r3, #0]
 800cdbc:	4b48      	ldr	r3, [pc, #288]	; (800cee0 <ai_platform_api_get_network_report+0x81c>)
 800cdbe:	429a      	cmp	r2, r3
 800cdc0:	f43f af4a 	beq.w	800cc58 <ai_platform_api_get_network_report+0x594>
 800cdc4:	e7fe      	b.n	800cdc4 <ai_platform_api_get_network_report+0x700>
 800cdc6:	4b49      	ldr	r3, [pc, #292]	; (800ceec <ai_platform_api_get_network_report+0x828>)
 800cdc8:	2201      	movs	r2, #1
 800cdca:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 800cdce:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 800cdd2:	2a00      	cmp	r2, #0
 800cdd4:	d1fb      	bne.n	800cdce <ai_platform_api_get_network_report+0x70a>
 800cdd6:	4a41      	ldr	r2, [pc, #260]	; (800cedc <ai_platform_api_get_network_report+0x818>)
 800cdd8:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 800cddc:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 800cde0:	4b3f      	ldr	r3, [pc, #252]	; (800cee0 <ai_platform_api_get_network_report+0x81c>)
 800cde2:	429a      	cmp	r2, r3
 800cde4:	f43f af38 	beq.w	800cc58 <ai_platform_api_get_network_report+0x594>
 800cde8:	e7fe      	b.n	800cde8 <ai_platform_api_get_network_report+0x724>
 800cdea:	4b3b      	ldr	r3, [pc, #236]	; (800ced8 <ai_platform_api_get_network_report+0x814>)
 800cdec:	2201      	movs	r2, #1
 800cdee:	609a      	str	r2, [r3, #8]
 800cdf0:	689a      	ldr	r2, [r3, #8]
 800cdf2:	2a00      	cmp	r2, #0
 800cdf4:	d1fc      	bne.n	800cdf0 <ai_platform_api_get_network_report+0x72c>
 800cdf6:	4a39      	ldr	r2, [pc, #228]	; (800cedc <ai_platform_api_get_network_report+0x818>)
 800cdf8:	601a      	str	r2, [r3, #0]
 800cdfa:	681a      	ldr	r2, [r3, #0]
 800cdfc:	4b38      	ldr	r3, [pc, #224]	; (800cee0 <ai_platform_api_get_network_report+0x81c>)
 800cdfe:	429a      	cmp	r2, r3
 800ce00:	d0b5      	beq.n	800cd6e <ai_platform_api_get_network_report+0x6aa>
 800ce02:	e7fe      	b.n	800ce02 <ai_platform_api_get_network_report+0x73e>
 800ce04:	4b39      	ldr	r3, [pc, #228]	; (800ceec <ai_platform_api_get_network_report+0x828>)
 800ce06:	2201      	movs	r2, #1
 800ce08:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 800ce0c:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 800ce10:	2a00      	cmp	r2, #0
 800ce12:	d1fb      	bne.n	800ce0c <ai_platform_api_get_network_report+0x748>
 800ce14:	4a31      	ldr	r2, [pc, #196]	; (800cedc <ai_platform_api_get_network_report+0x818>)
 800ce16:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 800ce1a:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 800ce1e:	4b30      	ldr	r3, [pc, #192]	; (800cee0 <ai_platform_api_get_network_report+0x81c>)
 800ce20:	429a      	cmp	r2, r3
 800ce22:	d0a4      	beq.n	800cd6e <ai_platform_api_get_network_report+0x6aa>
 800ce24:	e7fe      	b.n	800ce24 <ai_platform_api_get_network_report+0x760>
 800ce26:	4b31      	ldr	r3, [pc, #196]	; (800ceec <ai_platform_api_get_network_report+0x828>)
 800ce28:	2201      	movs	r2, #1
 800ce2a:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 800ce2e:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 800ce32:	2a00      	cmp	r2, #0
 800ce34:	d1fb      	bne.n	800ce2e <ai_platform_api_get_network_report+0x76a>
 800ce36:	4a29      	ldr	r2, [pc, #164]	; (800cedc <ai_platform_api_get_network_report+0x818>)
 800ce38:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 800ce3c:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 800ce40:	4b27      	ldr	r3, [pc, #156]	; (800cee0 <ai_platform_api_get_network_report+0x81c>)
 800ce42:	429a      	cmp	r2, r3
 800ce44:	d093      	beq.n	800cd6e <ai_platform_api_get_network_report+0x6aa>
 800ce46:	e7fe      	b.n	800ce46 <ai_platform_api_get_network_report+0x782>
 800ce48:	9901      	ldr	r1, [sp, #4]
 800ce4a:	2200      	movs	r2, #0
 800ce4c:	f10d 0910 	add.w	r9, sp, #16
 800ce50:	4b28      	ldr	r3, [pc, #160]	; (800cef4 <ai_platform_api_get_network_report+0x830>)
 800ce52:	f101 043c 	add.w	r4, r1, #60	; 0x3c
 800ce56:	f101 0858 	add.w	r8, r1, #88	; 0x58
 800ce5a:	f8c1 9054 	str.w	r9, [r1, #84]	; 0x54
 800ce5e:	46a6      	mov	lr, r4
 800ce60:	46c4      	mov	ip, r8
 800ce62:	e9c1 2210 	strd	r2, r2, [r1, #64]	; 0x40
 800ce66:	e9c1 2212 	strd	r2, r2, [r1, #72]	; 0x48
 800ce6a:	4a23      	ldr	r2, [pc, #140]	; (800cef8 <ai_platform_api_get_network_report+0x834>)
 800ce6c:	63ca      	str	r2, [r1, #60]	; 0x3c
 800ce6e:	f240 4201 	movw	r2, #1025	; 0x401
 800ce72:	650a      	str	r2, [r1, #80]	; 0x50
 800ce74:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ce76:	e889 000f 	stmia.w	r9, {r0, r1, r2, r3}
 800ce7a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ce7e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ce82:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 800ce86:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 800ce8a:	4628      	mov	r0, r5
 800ce8c:	f7fe fec8 	bl	800bc20 <ai_buffer_array_sane>
 800ce90:	b990      	cbnz	r0, 800ceb8 <ai_platform_api_get_network_report+0x7f4>
 800ce92:	4630      	mov	r0, r6
 800ce94:	f7fe fec4 	bl	800bc20 <ai_buffer_array_sane>
 800ce98:	b910      	cbnz	r0, 800cea0 <ai_platform_api_get_network_report+0x7dc>
 800ce9a:	2301      	movs	r3, #1
 800ce9c:	9302      	str	r3, [sp, #8]
 800ce9e:	e4e9      	b.n	800c874 <ai_platform_api_get_network_report+0x1b0>
 800cea0:	4630      	mov	r0, r6
 800cea2:	f7fe febd 	bl	800bc20 <ai_buffer_array_sane>
 800cea6:	b348      	cbz	r0, 800cefc <ai_platform_api_get_network_report+0x838>
 800cea8:	6a3d      	ldr	r5, [r7, #32]
 800ceaa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ceac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ceae:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800ceb2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800ceb6:	e7f0      	b.n	800ce9a <ai_platform_api_get_network_report+0x7d6>
 800ceb8:	4628      	mov	r0, r5
 800ceba:	f7fe feb1 	bl	800bc20 <ai_buffer_array_sane>
 800cebe:	b328      	cbz	r0, 800cf0c <ai_platform_api_get_network_report+0x848>
 800cec0:	f8d7 c028 	ldr.w	ip, [r7, #40]	; 0x28
 800cec4:	4645      	mov	r5, r8
 800cec6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ceca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800cecc:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 800ced0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800ced4:	e7dd      	b.n	800ce92 <ai_platform_api_get_network_report+0x7ce>
 800ced6:	bf00      	nop
 800ced8:	40023000 	.word	0x40023000
 800cedc:	f407a5c2 	.word	0xf407a5c2
 800cee0:	b5e8b5cd 	.word	0xb5e8b5cd
 800cee4:	e0042000 	.word	0xe0042000
 800cee8:	5c001000 	.word	0x5c001000
 800ceec:	58024000 	.word	0x58024000
 800cef0:	a1facade 	.word	0xa1facade
 800cef4:	08016860 	.word	0x08016860
 800cef8:	00040440 	.word	0x00040440
 800cefc:	4605      	mov	r5, r0
 800cefe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cf00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cf02:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800cf06:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800cf0a:	deff      	udf	#255	; 0xff
 800cf0c:	4604      	mov	r4, r0
 800cf0e:	4645      	mov	r5, r8
 800cf10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cf12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800cf14:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800cf18:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800cf1c:	deff      	udf	#255	; 0xff
 800cf1e:	bf00      	nop

0800cf20 <ai_platform_network_create>:
 800cf20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cf24:	b083      	sub	sp, #12
 800cf26:	4604      	mov	r4, r0
 800cf28:	4615      	mov	r5, r2
 800cf2a:	461e      	mov	r6, r3
 800cf2c:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 800cf30:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 800cf34:	f7fe ff20 	bl	800bd78 <_ai_platform_acquire_crc>
 800cf38:	2800      	cmp	r0, #0
 800cf3a:	f000 80bd 	beq.w	800d0b8 <ai_platform_network_create+0x198>
 800cf3e:	4ba5      	ldr	r3, [pc, #660]	; (800d1d4 <ai_platform_network_create+0x2b4>)
 800cf40:	f46f 6c8a 	mvn.w	ip, #1104	; 0x450
 800cf44:	4601      	mov	r1, r0
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cf4c:	eb03 020c 	add.w	r2, r3, ip
 800cf50:	2a01      	cmp	r2, #1
 800cf52:	f240 80a8 	bls.w	800d0a6 <ai_platform_network_create+0x186>
 800cf56:	f240 4249 	movw	r2, #1097	; 0x449
 800cf5a:	4293      	cmp	r3, r2
 800cf5c:	f000 80a3 	beq.w	800d0a6 <ai_platform_network_create+0x186>
 800cf60:	4a9d      	ldr	r2, [pc, #628]	; (800d1d8 <ai_platform_network_create+0x2b8>)
 800cf62:	6813      	ldr	r3, [r2, #0]
 800cf64:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cf68:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800cf6c:	f000 80b9 	beq.w	800d0e2 <ai_platform_network_create+0x1c2>
 800cf70:	6813      	ldr	r3, [r2, #0]
 800cf72:	f240 4c83 	movw	ip, #1155	; 0x483
 800cf76:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cf7a:	4563      	cmp	r3, ip
 800cf7c:	f000 80a1 	beq.w	800d0c2 <ai_platform_network_create+0x1a2>
 800cf80:	6813      	ldr	r3, [r2, #0]
 800cf82:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cf86:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800cf8a:	f000 8153 	beq.w	800d234 <ai_platform_network_create+0x314>
 800cf8e:	6813      	ldr	r3, [r2, #0]
 800cf90:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	f040 808d 	bne.w	800d0b4 <ai_platform_network_create+0x194>
 800cf9a:	4a90      	ldr	r2, [pc, #576]	; (800d1dc <ai_platform_network_create+0x2bc>)
 800cf9c:	2318      	movs	r3, #24
 800cf9e:	6093      	str	r3, [r2, #8]
 800cfa0:	6893      	ldr	r3, [r2, #8]
 800cfa2:	2b18      	cmp	r3, #24
 800cfa4:	f040 8086 	bne.w	800d0b4 <ai_platform_network_create+0x194>
 800cfa8:	2301      	movs	r3, #1
 800cfaa:	6093      	str	r3, [r2, #8]
 800cfac:	6893      	ldr	r3, [r2, #8]
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d1fc      	bne.n	800cfac <ai_platform_network_create+0x8c>
 800cfb2:	4608      	mov	r0, r1
 800cfb4:	f7fe fee2 	bl	800bd7c <_ai_platform_release_crc>
 800cfb8:	f7fe fede 	bl	800bd78 <_ai_platform_acquire_crc>
 800cfbc:	4b85      	ldr	r3, [pc, #532]	; (800d1d4 <ai_platform_network_create+0x2b4>)
 800cfbe:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cfc8:	189a      	adds	r2, r3, r2
 800cfca:	2a01      	cmp	r2, #1
 800cfcc:	f240 809f 	bls.w	800d10e <ai_platform_network_create+0x1ee>
 800cfd0:	f240 4249 	movw	r2, #1097	; 0x449
 800cfd4:	4293      	cmp	r3, r2
 800cfd6:	f000 809a 	beq.w	800d10e <ai_platform_network_create+0x1ee>
 800cfda:	4a7f      	ldr	r2, [pc, #508]	; (800d1d8 <ai_platform_network_create+0x2b8>)
 800cfdc:	6813      	ldr	r3, [r2, #0]
 800cfde:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cfe2:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800cfe6:	f000 80a0 	beq.w	800d12a <ai_platform_network_create+0x20a>
 800cfea:	6813      	ldr	r3, [r2, #0]
 800cfec:	f240 4183 	movw	r1, #1155	; 0x483
 800cff0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cff4:	428b      	cmp	r3, r1
 800cff6:	f000 80bf 	beq.w	800d178 <ai_platform_network_create+0x258>
 800cffa:	6813      	ldr	r3, [r2, #0]
 800cffc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d000:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800d004:	f000 8123 	beq.w	800d24e <ai_platform_network_create+0x32e>
 800d008:	6813      	ldr	r3, [r2, #0]
 800d00a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d00e:	2b00      	cmp	r3, #0
 800d010:	f000 80c4 	beq.w	800d19c <ai_platform_network_create+0x27c>
 800d014:	f7fe feb2 	bl	800bd7c <_ai_platform_release_crc>
 800d018:	2c00      	cmp	r4, #0
 800d01a:	f000 80aa 	beq.w	800d172 <ai_platform_network_create+0x252>
 800d01e:	4b70      	ldr	r3, [pc, #448]	; (800d1e0 <ai_platform_network_create+0x2c0>)
 800d020:	602b      	str	r3, [r5, #0]
 800d022:	6025      	str	r5, [r4, #0]
 800d024:	f001 f962 	bl	800e2ec <core_init>
 800d028:	2800      	cmp	r0, #0
 800d02a:	f000 8090 	beq.w	800d14e <ai_platform_network_create+0x22e>
 800d02e:	f7fe fea3 	bl	800bd78 <_ai_platform_acquire_crc>
 800d032:	4b68      	ldr	r3, [pc, #416]	; (800d1d4 <ai_platform_network_create+0x2b4>)
 800d034:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d03e:	185a      	adds	r2, r3, r1
 800d040:	2a01      	cmp	r2, #1
 800d042:	f240 80b9 	bls.w	800d1b8 <ai_platform_network_create+0x298>
 800d046:	f240 4249 	movw	r2, #1097	; 0x449
 800d04a:	4293      	cmp	r3, r2
 800d04c:	f000 80b4 	beq.w	800d1b8 <ai_platform_network_create+0x298>
 800d050:	4a61      	ldr	r2, [pc, #388]	; (800d1d8 <ai_platform_network_create+0x2b8>)
 800d052:	6813      	ldr	r3, [r2, #0]
 800d054:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d058:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800d05c:	f000 80c8 	beq.w	800d1f0 <ai_platform_network_create+0x2d0>
 800d060:	6813      	ldr	r3, [r2, #0]
 800d062:	f240 4183 	movw	r1, #1155	; 0x483
 800d066:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d06a:	428b      	cmp	r3, r1
 800d06c:	f000 8107 	beq.w	800d27e <ai_platform_network_create+0x35e>
 800d070:	6813      	ldr	r3, [r2, #0]
 800d072:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d076:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800d07a:	f000 8111 	beq.w	800d2a0 <ai_platform_network_create+0x380>
 800d07e:	6813      	ldr	r3, [r2, #0]
 800d080:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d084:	2b00      	cmp	r3, #0
 800d086:	f040 80c3 	bne.w	800d210 <ai_platform_network_create+0x2f0>
 800d08a:	4b54      	ldr	r3, [pc, #336]	; (800d1dc <ai_platform_network_create+0x2bc>)
 800d08c:	2201      	movs	r2, #1
 800d08e:	609a      	str	r2, [r3, #8]
 800d090:	689a      	ldr	r2, [r3, #8]
 800d092:	2a00      	cmp	r2, #0
 800d094:	d1fc      	bne.n	800d090 <ai_platform_network_create+0x170>
 800d096:	4a53      	ldr	r2, [pc, #332]	; (800d1e4 <ai_platform_network_create+0x2c4>)
 800d098:	601a      	str	r2, [r3, #0]
 800d09a:	681a      	ldr	r2, [r3, #0]
 800d09c:	4b52      	ldr	r3, [pc, #328]	; (800d1e8 <ai_platform_network_create+0x2c8>)
 800d09e:	429a      	cmp	r2, r3
 800d0a0:	f000 80b6 	beq.w	800d210 <ai_platform_network_create+0x2f0>
 800d0a4:	e7fe      	b.n	800d0a4 <ai_platform_network_create+0x184>
 800d0a6:	4b4d      	ldr	r3, [pc, #308]	; (800d1dc <ai_platform_network_create+0x2bc>)
 800d0a8:	2218      	movs	r2, #24
 800d0aa:	609a      	str	r2, [r3, #8]
 800d0ac:	689a      	ldr	r2, [r3, #8]
 800d0ae:	2a18      	cmp	r2, #24
 800d0b0:	d027      	beq.n	800d102 <ai_platform_network_create+0x1e2>
 800d0b2:	4608      	mov	r0, r1
 800d0b4:	f7fe fe62 	bl	800bd7c <_ai_platform_release_crc>
 800d0b8:	f244 1033 	movw	r0, #16691	; 0x4133
 800d0bc:	b003      	add	sp, #12
 800d0be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d0c2:	4a4a      	ldr	r2, [pc, #296]	; (800d1ec <ai_platform_network_create+0x2cc>)
 800d0c4:	2318      	movs	r3, #24
 800d0c6:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800d0ca:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800d0ce:	2b18      	cmp	r3, #24
 800d0d0:	d1f0      	bne.n	800d0b4 <ai_platform_network_create+0x194>
 800d0d2:	2301      	movs	r3, #1
 800d0d4:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800d0d8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d1fb      	bne.n	800d0d8 <ai_platform_network_create+0x1b8>
 800d0e0:	e767      	b.n	800cfb2 <ai_platform_network_create+0x92>
 800d0e2:	4a42      	ldr	r2, [pc, #264]	; (800d1ec <ai_platform_network_create+0x2cc>)
 800d0e4:	2318      	movs	r3, #24
 800d0e6:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800d0ea:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800d0ee:	2b18      	cmp	r3, #24
 800d0f0:	d1e0      	bne.n	800d0b4 <ai_platform_network_create+0x194>
 800d0f2:	2301      	movs	r3, #1
 800d0f4:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800d0f8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d1fb      	bne.n	800d0f8 <ai_platform_network_create+0x1d8>
 800d100:	e757      	b.n	800cfb2 <ai_platform_network_create+0x92>
 800d102:	2201      	movs	r2, #1
 800d104:	609a      	str	r2, [r3, #8]
 800d106:	689a      	ldr	r2, [r3, #8]
 800d108:	2a00      	cmp	r2, #0
 800d10a:	d1fc      	bne.n	800d106 <ai_platform_network_create+0x1e6>
 800d10c:	e751      	b.n	800cfb2 <ai_platform_network_create+0x92>
 800d10e:	4a33      	ldr	r2, [pc, #204]	; (800d1dc <ai_platform_network_create+0x2bc>)
 800d110:	2301      	movs	r3, #1
 800d112:	6093      	str	r3, [r2, #8]
 800d114:	6891      	ldr	r1, [r2, #8]
 800d116:	2900      	cmp	r1, #0
 800d118:	d1fc      	bne.n	800d114 <ai_platform_network_create+0x1f4>
 800d11a:	4b32      	ldr	r3, [pc, #200]	; (800d1e4 <ai_platform_network_create+0x2c4>)
 800d11c:	6013      	str	r3, [r2, #0]
 800d11e:	4b32      	ldr	r3, [pc, #200]	; (800d1e8 <ai_platform_network_create+0x2c8>)
 800d120:	6812      	ldr	r2, [r2, #0]
 800d122:	429a      	cmp	r2, r3
 800d124:	f43f af76 	beq.w	800d014 <ai_platform_network_create+0xf4>
 800d128:	e7fe      	b.n	800d128 <ai_platform_network_create+0x208>
 800d12a:	4a30      	ldr	r2, [pc, #192]	; (800d1ec <ai_platform_network_create+0x2cc>)
 800d12c:	2301      	movs	r3, #1
 800d12e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800d132:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800d136:	2b00      	cmp	r3, #0
 800d138:	d1fb      	bne.n	800d132 <ai_platform_network_create+0x212>
 800d13a:	4b2a      	ldr	r3, [pc, #168]	; (800d1e4 <ai_platform_network_create+0x2c4>)
 800d13c:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800d140:	4b29      	ldr	r3, [pc, #164]	; (800d1e8 <ai_platform_network_create+0x2c8>)
 800d142:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800d146:	429a      	cmp	r2, r3
 800d148:	f43f af64 	beq.w	800d014 <ai_platform_network_create+0xf4>
 800d14c:	e7fe      	b.n	800d14c <ai_platform_network_create+0x22c>
 800d14e:	f04f 0930 	mov.w	r9, #48	; 0x30
 800d152:	2300      	movs	r3, #0
 800d154:	6023      	str	r3, [r4, #0]
 800d156:	2410      	movs	r4, #16
 800d158:	4642      	mov	r2, r8
 800d15a:	4639      	mov	r1, r7
 800d15c:	4630      	mov	r0, r6
 800d15e:	f7fe fc3d 	bl	800b9dc <ai_version_get>
 800d162:	4603      	mov	r3, r0
 800d164:	2000      	movs	r0, #0
 800d166:	64ab      	str	r3, [r5, #72]	; 0x48
 800d168:	f369 0007 	bfi	r0, r9, #0, #8
 800d16c:	f364 201f 	bfi	r0, r4, #8, #24
 800d170:	e7a4      	b.n	800d0bc <ai_platform_network_create+0x19c>
 800d172:	f241 0010 	movw	r0, #4112	; 0x1010
 800d176:	e7a1      	b.n	800d0bc <ai_platform_network_create+0x19c>
 800d178:	4a1c      	ldr	r2, [pc, #112]	; (800d1ec <ai_platform_network_create+0x2cc>)
 800d17a:	2301      	movs	r3, #1
 800d17c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800d180:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800d184:	2b00      	cmp	r3, #0
 800d186:	d1fb      	bne.n	800d180 <ai_platform_network_create+0x260>
 800d188:	4b16      	ldr	r3, [pc, #88]	; (800d1e4 <ai_platform_network_create+0x2c4>)
 800d18a:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800d18e:	4b16      	ldr	r3, [pc, #88]	; (800d1e8 <ai_platform_network_create+0x2c8>)
 800d190:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800d194:	429a      	cmp	r2, r3
 800d196:	f43f af3d 	beq.w	800d014 <ai_platform_network_create+0xf4>
 800d19a:	e7fe      	b.n	800d19a <ai_platform_network_create+0x27a>
 800d19c:	4a0f      	ldr	r2, [pc, #60]	; (800d1dc <ai_platform_network_create+0x2bc>)
 800d19e:	2301      	movs	r3, #1
 800d1a0:	6093      	str	r3, [r2, #8]
 800d1a2:	6893      	ldr	r3, [r2, #8]
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d1fc      	bne.n	800d1a2 <ai_platform_network_create+0x282>
 800d1a8:	4b0e      	ldr	r3, [pc, #56]	; (800d1e4 <ai_platform_network_create+0x2c4>)
 800d1aa:	6013      	str	r3, [r2, #0]
 800d1ac:	4b0e      	ldr	r3, [pc, #56]	; (800d1e8 <ai_platform_network_create+0x2c8>)
 800d1ae:	6812      	ldr	r2, [r2, #0]
 800d1b0:	429a      	cmp	r2, r3
 800d1b2:	f43f af2f 	beq.w	800d014 <ai_platform_network_create+0xf4>
 800d1b6:	e7fe      	b.n	800d1b6 <ai_platform_network_create+0x296>
 800d1b8:	4a08      	ldr	r2, [pc, #32]	; (800d1dc <ai_platform_network_create+0x2bc>)
 800d1ba:	2301      	movs	r3, #1
 800d1bc:	6093      	str	r3, [r2, #8]
 800d1be:	6893      	ldr	r3, [r2, #8]
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d1fc      	bne.n	800d1be <ai_platform_network_create+0x29e>
 800d1c4:	4b07      	ldr	r3, [pc, #28]	; (800d1e4 <ai_platform_network_create+0x2c4>)
 800d1c6:	6013      	str	r3, [r2, #0]
 800d1c8:	4b07      	ldr	r3, [pc, #28]	; (800d1e8 <ai_platform_network_create+0x2c8>)
 800d1ca:	6812      	ldr	r2, [r2, #0]
 800d1cc:	429a      	cmp	r2, r3
 800d1ce:	d01f      	beq.n	800d210 <ai_platform_network_create+0x2f0>
 800d1d0:	e7fe      	b.n	800d1d0 <ai_platform_network_create+0x2b0>
 800d1d2:	bf00      	nop
 800d1d4:	e0042000 	.word	0xe0042000
 800d1d8:	5c001000 	.word	0x5c001000
 800d1dc:	40023000 	.word	0x40023000
 800d1e0:	a1c00100 	.word	0xa1c00100
 800d1e4:	f407a5c2 	.word	0xf407a5c2
 800d1e8:	b5e8b5cd 	.word	0xb5e8b5cd
 800d1ec:	58024000 	.word	0x58024000
 800d1f0:	4a33      	ldr	r2, [pc, #204]	; (800d2c0 <ai_platform_network_create+0x3a0>)
 800d1f2:	2301      	movs	r3, #1
 800d1f4:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800d1f8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d1fb      	bne.n	800d1f8 <ai_platform_network_create+0x2d8>
 800d200:	4b30      	ldr	r3, [pc, #192]	; (800d2c4 <ai_platform_network_create+0x3a4>)
 800d202:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800d206:	4b30      	ldr	r3, [pc, #192]	; (800d2c8 <ai_platform_network_create+0x3a8>)
 800d208:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800d20c:	429a      	cmp	r2, r3
 800d20e:	d12c      	bne.n	800d26a <ai_platform_network_create+0x34a>
 800d210:	f7fe fdb4 	bl	800bd7c <_ai_platform_release_crc>
 800d214:	2200      	movs	r2, #0
 800d216:	4639      	mov	r1, r7
 800d218:	4630      	mov	r0, r6
 800d21a:	f7fe fbdf 	bl	800b9dc <ai_version_get>
 800d21e:	4681      	mov	r9, r0
 800d220:	2200      	movs	r2, #0
 800d222:	2105      	movs	r1, #5
 800d224:	2001      	movs	r0, #1
 800d226:	f7fe fbd9 	bl	800b9dc <ai_version_get>
 800d22a:	4581      	cmp	r9, r0
 800d22c:	d01e      	beq.n	800d26c <ai_platform_network_create+0x34c>
 800d22e:	f04f 0901 	mov.w	r9, #1
 800d232:	e78e      	b.n	800d152 <ai_platform_network_create+0x232>
 800d234:	4b25      	ldr	r3, [pc, #148]	; (800d2cc <ai_platform_network_create+0x3ac>)
 800d236:	2218      	movs	r2, #24
 800d238:	609a      	str	r2, [r3, #8]
 800d23a:	689a      	ldr	r2, [r3, #8]
 800d23c:	2a18      	cmp	r2, #24
 800d23e:	f47f af39 	bne.w	800d0b4 <ai_platform_network_create+0x194>
 800d242:	2201      	movs	r2, #1
 800d244:	609a      	str	r2, [r3, #8]
 800d246:	689a      	ldr	r2, [r3, #8]
 800d248:	2a00      	cmp	r2, #0
 800d24a:	d1fc      	bne.n	800d246 <ai_platform_network_create+0x326>
 800d24c:	e6b1      	b.n	800cfb2 <ai_platform_network_create+0x92>
 800d24e:	4a1f      	ldr	r2, [pc, #124]	; (800d2cc <ai_platform_network_create+0x3ac>)
 800d250:	2301      	movs	r3, #1
 800d252:	6093      	str	r3, [r2, #8]
 800d254:	6893      	ldr	r3, [r2, #8]
 800d256:	2b00      	cmp	r3, #0
 800d258:	d1fc      	bne.n	800d254 <ai_platform_network_create+0x334>
 800d25a:	4b1a      	ldr	r3, [pc, #104]	; (800d2c4 <ai_platform_network_create+0x3a4>)
 800d25c:	6013      	str	r3, [r2, #0]
 800d25e:	4b1a      	ldr	r3, [pc, #104]	; (800d2c8 <ai_platform_network_create+0x3a8>)
 800d260:	6812      	ldr	r2, [r2, #0]
 800d262:	429a      	cmp	r2, r3
 800d264:	f43f aed6 	beq.w	800d014 <ai_platform_network_create+0xf4>
 800d268:	e7fe      	b.n	800d268 <ai_platform_network_create+0x348>
 800d26a:	e7fe      	b.n	800d26a <ai_platform_network_create+0x34a>
 800d26c:	4b18      	ldr	r3, [pc, #96]	; (800d2d0 <ai_platform_network_create+0x3b0>)
 800d26e:	a801      	add	r0, sp, #4
 800d270:	9301      	str	r3, [sp, #4]
 800d272:	f005 fdbd 	bl	8012df0 <ai_check_custom_types>
 800d276:	b300      	cbz	r0, 800d2ba <ai_platform_network_create+0x39a>
 800d278:	2400      	movs	r4, #0
 800d27a:	46a1      	mov	r9, r4
 800d27c:	e76c      	b.n	800d158 <ai_platform_network_create+0x238>
 800d27e:	4b10      	ldr	r3, [pc, #64]	; (800d2c0 <ai_platform_network_create+0x3a0>)
 800d280:	2201      	movs	r2, #1
 800d282:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 800d286:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 800d28a:	2a00      	cmp	r2, #0
 800d28c:	d1fb      	bne.n	800d286 <ai_platform_network_create+0x366>
 800d28e:	4a0d      	ldr	r2, [pc, #52]	; (800d2c4 <ai_platform_network_create+0x3a4>)
 800d290:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 800d294:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 800d298:	4b0b      	ldr	r3, [pc, #44]	; (800d2c8 <ai_platform_network_create+0x3a8>)
 800d29a:	429a      	cmp	r2, r3
 800d29c:	d0b8      	beq.n	800d210 <ai_platform_network_create+0x2f0>
 800d29e:	e7fe      	b.n	800d29e <ai_platform_network_create+0x37e>
 800d2a0:	4b0a      	ldr	r3, [pc, #40]	; (800d2cc <ai_platform_network_create+0x3ac>)
 800d2a2:	2201      	movs	r2, #1
 800d2a4:	609a      	str	r2, [r3, #8]
 800d2a6:	689a      	ldr	r2, [r3, #8]
 800d2a8:	2a00      	cmp	r2, #0
 800d2aa:	d1fc      	bne.n	800d2a6 <ai_platform_network_create+0x386>
 800d2ac:	4a05      	ldr	r2, [pc, #20]	; (800d2c4 <ai_platform_network_create+0x3a4>)
 800d2ae:	601a      	str	r2, [r3, #0]
 800d2b0:	681a      	ldr	r2, [r3, #0]
 800d2b2:	4b05      	ldr	r3, [pc, #20]	; (800d2c8 <ai_platform_network_create+0x3a8>)
 800d2b4:	429a      	cmp	r2, r3
 800d2b6:	d0ab      	beq.n	800d210 <ai_platform_network_create+0x2f0>
 800d2b8:	e7fe      	b.n	800d2b8 <ai_platform_network_create+0x398>
 800d2ba:	f04f 0902 	mov.w	r9, #2
 800d2be:	e748      	b.n	800d152 <ai_platform_network_create+0x232>
 800d2c0:	58024000 	.word	0x58024000
 800d2c4:	f407a5c2 	.word	0xf407a5c2
 800d2c8:	b5e8b5cd 	.word	0xb5e8b5cd
 800d2cc:	40023000 	.word	0x40023000
 800d2d0:	84048403 	.word	0x84048403

0800d2d4 <ai_platform_network_destroy>:
 800d2d4:	b510      	push	{r4, lr}
 800d2d6:	4604      	mov	r4, r0
 800d2d8:	2800      	cmp	r0, #0
 800d2da:	d03d      	beq.n	800d358 <ai_platform_network_destroy+0x84>
 800d2dc:	4b7a      	ldr	r3, [pc, #488]	; (800d4c8 <ai_platform_network_destroy+0x1f4>)
 800d2de:	6802      	ldr	r2, [r0, #0]
 800d2e0:	429a      	cmp	r2, r3
 800d2e2:	d139      	bne.n	800d358 <ai_platform_network_destroy+0x84>
 800d2e4:	f7fe fd48 	bl	800bd78 <_ai_platform_acquire_crc>
 800d2e8:	4b78      	ldr	r3, [pc, #480]	; (800d4cc <ai_platform_network_destroy+0x1f8>)
 800d2ea:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d2f4:	189a      	adds	r2, r3, r2
 800d2f6:	2a01      	cmp	r2, #1
 800d2f8:	f240 8084 	bls.w	800d404 <ai_platform_network_destroy+0x130>
 800d2fc:	f240 4249 	movw	r2, #1097	; 0x449
 800d300:	4293      	cmp	r3, r2
 800d302:	d07f      	beq.n	800d404 <ai_platform_network_destroy+0x130>
 800d304:	4a72      	ldr	r2, [pc, #456]	; (800d4d0 <ai_platform_network_destroy+0x1fc>)
 800d306:	6813      	ldr	r3, [r2, #0]
 800d308:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d30c:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800d310:	f000 8086 	beq.w	800d420 <ai_platform_network_destroy+0x14c>
 800d314:	6813      	ldr	r3, [r2, #0]
 800d316:	f240 4183 	movw	r1, #1155	; 0x483
 800d31a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d31e:	428b      	cmp	r3, r1
 800d320:	f000 80a7 	beq.w	800d472 <ai_platform_network_destroy+0x19e>
 800d324:	6813      	ldr	r3, [r2, #0]
 800d326:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d32a:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800d32e:	f000 80be 	beq.w	800d4ae <ai_platform_network_destroy+0x1da>
 800d332:	6813      	ldr	r3, [r2, #0]
 800d334:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d338:	2b00      	cmp	r3, #0
 800d33a:	f040 8081 	bne.w	800d440 <ai_platform_network_destroy+0x16c>
 800d33e:	4a65      	ldr	r2, [pc, #404]	; (800d4d4 <ai_platform_network_destroy+0x200>)
 800d340:	2301      	movs	r3, #1
 800d342:	6093      	str	r3, [r2, #8]
 800d344:	6893      	ldr	r3, [r2, #8]
 800d346:	2b00      	cmp	r3, #0
 800d348:	d1fc      	bne.n	800d344 <ai_platform_network_destroy+0x70>
 800d34a:	4963      	ldr	r1, [pc, #396]	; (800d4d8 <ai_platform_network_destroy+0x204>)
 800d34c:	4b63      	ldr	r3, [pc, #396]	; (800d4dc <ai_platform_network_destroy+0x208>)
 800d34e:	6011      	str	r1, [r2, #0]
 800d350:	6812      	ldr	r2, [r2, #0]
 800d352:	429a      	cmp	r2, r3
 800d354:	d074      	beq.n	800d440 <ai_platform_network_destroy+0x16c>
 800d356:	e7fe      	b.n	800d356 <ai_platform_network_destroy+0x82>
 800d358:	f7fe fd0e 	bl	800bd78 <_ai_platform_acquire_crc>
 800d35c:	4b5b      	ldr	r3, [pc, #364]	; (800d4cc <ai_platform_network_destroy+0x1f8>)
 800d35e:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d368:	185a      	adds	r2, r3, r1
 800d36a:	2a01      	cmp	r2, #1
 800d36c:	d929      	bls.n	800d3c2 <ai_platform_network_destroy+0xee>
 800d36e:	f240 4249 	movw	r2, #1097	; 0x449
 800d372:	4293      	cmp	r3, r2
 800d374:	d025      	beq.n	800d3c2 <ai_platform_network_destroy+0xee>
 800d376:	4a56      	ldr	r2, [pc, #344]	; (800d4d0 <ai_platform_network_destroy+0x1fc>)
 800d378:	6813      	ldr	r3, [r2, #0]
 800d37a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d37e:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800d382:	d02b      	beq.n	800d3dc <ai_platform_network_destroy+0x108>
 800d384:	6813      	ldr	r3, [r2, #0]
 800d386:	f240 4183 	movw	r1, #1155	; 0x483
 800d38a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d38e:	428b      	cmp	r3, r1
 800d390:	d05e      	beq.n	800d450 <ai_platform_network_destroy+0x17c>
 800d392:	6813      	ldr	r3, [r2, #0]
 800d394:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d398:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800d39c:	d07a      	beq.n	800d494 <ai_platform_network_destroy+0x1c0>
 800d39e:	6813      	ldr	r3, [r2, #0]
 800d3a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d129      	bne.n	800d3fc <ai_platform_network_destroy+0x128>
 800d3a8:	4a4a      	ldr	r2, [pc, #296]	; (800d4d4 <ai_platform_network_destroy+0x200>)
 800d3aa:	2301      	movs	r3, #1
 800d3ac:	6093      	str	r3, [r2, #8]
 800d3ae:	6893      	ldr	r3, [r2, #8]
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d1fc      	bne.n	800d3ae <ai_platform_network_destroy+0xda>
 800d3b4:	4948      	ldr	r1, [pc, #288]	; (800d4d8 <ai_platform_network_destroy+0x204>)
 800d3b6:	4b49      	ldr	r3, [pc, #292]	; (800d4dc <ai_platform_network_destroy+0x208>)
 800d3b8:	6011      	str	r1, [r2, #0]
 800d3ba:	6812      	ldr	r2, [r2, #0]
 800d3bc:	429a      	cmp	r2, r3
 800d3be:	d01d      	beq.n	800d3fc <ai_platform_network_destroy+0x128>
 800d3c0:	e7fe      	b.n	800d3c0 <ai_platform_network_destroy+0xec>
 800d3c2:	4a44      	ldr	r2, [pc, #272]	; (800d4d4 <ai_platform_network_destroy+0x200>)
 800d3c4:	2301      	movs	r3, #1
 800d3c6:	6093      	str	r3, [r2, #8]
 800d3c8:	6893      	ldr	r3, [r2, #8]
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d1fc      	bne.n	800d3c8 <ai_platform_network_destroy+0xf4>
 800d3ce:	4942      	ldr	r1, [pc, #264]	; (800d4d8 <ai_platform_network_destroy+0x204>)
 800d3d0:	4b42      	ldr	r3, [pc, #264]	; (800d4dc <ai_platform_network_destroy+0x208>)
 800d3d2:	6011      	str	r1, [r2, #0]
 800d3d4:	6812      	ldr	r2, [r2, #0]
 800d3d6:	429a      	cmp	r2, r3
 800d3d8:	d010      	beq.n	800d3fc <ai_platform_network_destroy+0x128>
 800d3da:	e7fe      	b.n	800d3da <ai_platform_network_destroy+0x106>
 800d3dc:	4a40      	ldr	r2, [pc, #256]	; (800d4e0 <ai_platform_network_destroy+0x20c>)
 800d3de:	2301      	movs	r3, #1
 800d3e0:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800d3e4:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d1fb      	bne.n	800d3e4 <ai_platform_network_destroy+0x110>
 800d3ec:	493a      	ldr	r1, [pc, #232]	; (800d4d8 <ai_platform_network_destroy+0x204>)
 800d3ee:	4b3b      	ldr	r3, [pc, #236]	; (800d4dc <ai_platform_network_destroy+0x208>)
 800d3f0:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800d3f4:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800d3f8:	429a      	cmp	r2, r3
 800d3fa:	d110      	bne.n	800d41e <ai_platform_network_destroy+0x14a>
 800d3fc:	f7fe fcbe 	bl	800bd7c <_ai_platform_release_crc>
 800d400:	4620      	mov	r0, r4
 800d402:	bd10      	pop	{r4, pc}
 800d404:	4a33      	ldr	r2, [pc, #204]	; (800d4d4 <ai_platform_network_destroy+0x200>)
 800d406:	2301      	movs	r3, #1
 800d408:	6093      	str	r3, [r2, #8]
 800d40a:	6893      	ldr	r3, [r2, #8]
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d1fc      	bne.n	800d40a <ai_platform_network_destroy+0x136>
 800d410:	4931      	ldr	r1, [pc, #196]	; (800d4d8 <ai_platform_network_destroy+0x204>)
 800d412:	4b32      	ldr	r3, [pc, #200]	; (800d4dc <ai_platform_network_destroy+0x208>)
 800d414:	6011      	str	r1, [r2, #0]
 800d416:	6812      	ldr	r2, [r2, #0]
 800d418:	429a      	cmp	r2, r3
 800d41a:	d011      	beq.n	800d440 <ai_platform_network_destroy+0x16c>
 800d41c:	e7fe      	b.n	800d41c <ai_platform_network_destroy+0x148>
 800d41e:	e7fe      	b.n	800d41e <ai_platform_network_destroy+0x14a>
 800d420:	4a2f      	ldr	r2, [pc, #188]	; (800d4e0 <ai_platform_network_destroy+0x20c>)
 800d422:	2301      	movs	r3, #1
 800d424:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800d428:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d1fb      	bne.n	800d428 <ai_platform_network_destroy+0x154>
 800d430:	4929      	ldr	r1, [pc, #164]	; (800d4d8 <ai_platform_network_destroy+0x204>)
 800d432:	4b2a      	ldr	r3, [pc, #168]	; (800d4dc <ai_platform_network_destroy+0x208>)
 800d434:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800d438:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800d43c:	429a      	cmp	r2, r3
 800d43e:	d106      	bne.n	800d44e <ai_platform_network_destroy+0x17a>
 800d440:	f7fe fc9c 	bl	800bd7c <_ai_platform_release_crc>
 800d444:	4620      	mov	r0, r4
 800d446:	f005 fd65 	bl	8012f14 <ai_layers_destroy_all>
 800d44a:	2000      	movs	r0, #0
 800d44c:	bd10      	pop	{r4, pc}
 800d44e:	e7fe      	b.n	800d44e <ai_platform_network_destroy+0x17a>
 800d450:	4a23      	ldr	r2, [pc, #140]	; (800d4e0 <ai_platform_network_destroy+0x20c>)
 800d452:	2301      	movs	r3, #1
 800d454:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800d458:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d1fb      	bne.n	800d458 <ai_platform_network_destroy+0x184>
 800d460:	491d      	ldr	r1, [pc, #116]	; (800d4d8 <ai_platform_network_destroy+0x204>)
 800d462:	4b1e      	ldr	r3, [pc, #120]	; (800d4dc <ai_platform_network_destroy+0x208>)
 800d464:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800d468:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800d46c:	429a      	cmp	r2, r3
 800d46e:	d0c5      	beq.n	800d3fc <ai_platform_network_destroy+0x128>
 800d470:	e7fe      	b.n	800d470 <ai_platform_network_destroy+0x19c>
 800d472:	4a1b      	ldr	r2, [pc, #108]	; (800d4e0 <ai_platform_network_destroy+0x20c>)
 800d474:	2301      	movs	r3, #1
 800d476:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800d47a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d1fb      	bne.n	800d47a <ai_platform_network_destroy+0x1a6>
 800d482:	4915      	ldr	r1, [pc, #84]	; (800d4d8 <ai_platform_network_destroy+0x204>)
 800d484:	4b15      	ldr	r3, [pc, #84]	; (800d4dc <ai_platform_network_destroy+0x208>)
 800d486:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800d48a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800d48e:	429a      	cmp	r2, r3
 800d490:	d0d6      	beq.n	800d440 <ai_platform_network_destroy+0x16c>
 800d492:	e7fe      	b.n	800d492 <ai_platform_network_destroy+0x1be>
 800d494:	4a0f      	ldr	r2, [pc, #60]	; (800d4d4 <ai_platform_network_destroy+0x200>)
 800d496:	2301      	movs	r3, #1
 800d498:	6093      	str	r3, [r2, #8]
 800d49a:	6893      	ldr	r3, [r2, #8]
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d1fc      	bne.n	800d49a <ai_platform_network_destroy+0x1c6>
 800d4a0:	490d      	ldr	r1, [pc, #52]	; (800d4d8 <ai_platform_network_destroy+0x204>)
 800d4a2:	4b0e      	ldr	r3, [pc, #56]	; (800d4dc <ai_platform_network_destroy+0x208>)
 800d4a4:	6011      	str	r1, [r2, #0]
 800d4a6:	6812      	ldr	r2, [r2, #0]
 800d4a8:	429a      	cmp	r2, r3
 800d4aa:	d0a7      	beq.n	800d3fc <ai_platform_network_destroy+0x128>
 800d4ac:	e7fe      	b.n	800d4ac <ai_platform_network_destroy+0x1d8>
 800d4ae:	4a09      	ldr	r2, [pc, #36]	; (800d4d4 <ai_platform_network_destroy+0x200>)
 800d4b0:	2301      	movs	r3, #1
 800d4b2:	6093      	str	r3, [r2, #8]
 800d4b4:	6893      	ldr	r3, [r2, #8]
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d1fc      	bne.n	800d4b4 <ai_platform_network_destroy+0x1e0>
 800d4ba:	4907      	ldr	r1, [pc, #28]	; (800d4d8 <ai_platform_network_destroy+0x204>)
 800d4bc:	4b07      	ldr	r3, [pc, #28]	; (800d4dc <ai_platform_network_destroy+0x208>)
 800d4be:	6011      	str	r1, [r2, #0]
 800d4c0:	6812      	ldr	r2, [r2, #0]
 800d4c2:	429a      	cmp	r2, r3
 800d4c4:	d0bc      	beq.n	800d440 <ai_platform_network_destroy+0x16c>
 800d4c6:	e7fe      	b.n	800d4c6 <ai_platform_network_destroy+0x1f2>
 800d4c8:	a1c00100 	.word	0xa1c00100
 800d4cc:	e0042000 	.word	0xe0042000
 800d4d0:	5c001000 	.word	0x5c001000
 800d4d4:	40023000 	.word	0x40023000
 800d4d8:	f407a5c2 	.word	0xf407a5c2
 800d4dc:	b5e8b5cd 	.word	0xb5e8b5cd
 800d4e0:	58024000 	.word	0x58024000

0800d4e4 <ai_platform_network_init>:
 800d4e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d4e8:	2800      	cmp	r0, #0
 800d4ea:	d052      	beq.n	800d592 <ai_platform_network_init+0xae>
 800d4ec:	4bab      	ldr	r3, [pc, #684]	; (800d79c <ai_platform_network_init+0x2b8>)
 800d4ee:	4604      	mov	r4, r0
 800d4f0:	6802      	ldr	r2, [r0, #0]
 800d4f2:	429a      	cmp	r2, r3
 800d4f4:	d14d      	bne.n	800d592 <ai_platform_network_init+0xae>
 800d4f6:	460d      	mov	r5, r1
 800d4f8:	f7fe fc3e 	bl	800bd78 <_ai_platform_acquire_crc>
 800d4fc:	4ba8      	ldr	r3, [pc, #672]	; (800d7a0 <ai_platform_network_init+0x2bc>)
 800d4fe:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d508:	189a      	adds	r2, r3, r2
 800d50a:	2a01      	cmp	r2, #1
 800d50c:	f240 809b 	bls.w	800d646 <ai_platform_network_init+0x162>
 800d510:	f240 4249 	movw	r2, #1097	; 0x449
 800d514:	4293      	cmp	r3, r2
 800d516:	f000 8096 	beq.w	800d646 <ai_platform_network_init+0x162>
 800d51a:	4aa2      	ldr	r2, [pc, #648]	; (800d7a4 <ai_platform_network_init+0x2c0>)
 800d51c:	6813      	ldr	r3, [r2, #0]
 800d51e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d522:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800d526:	f000 809d 	beq.w	800d664 <ai_platform_network_init+0x180>
 800d52a:	6813      	ldr	r3, [r2, #0]
 800d52c:	f240 4183 	movw	r1, #1155	; 0x483
 800d530:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d534:	428b      	cmp	r3, r1
 800d536:	f000 80e4 	beq.w	800d702 <ai_platform_network_init+0x21e>
 800d53a:	6813      	ldr	r3, [r2, #0]
 800d53c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d540:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800d544:	f000 811b 	beq.w	800d77e <ai_platform_network_init+0x29a>
 800d548:	6813      	ldr	r3, [r2, #0]
 800d54a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d54e:	2b00      	cmp	r3, #0
 800d550:	f000 80f9 	beq.w	800d746 <ai_platform_network_init+0x262>
 800d554:	f7fe fc12 	bl	800bd7c <_ai_platform_release_crc>
 800d558:	2d00      	cmp	r5, #0
 800d55a:	f000 8147 	beq.w	800d7ec <ai_platform_network_init+0x308>
 800d55e:	4b92      	ldr	r3, [pc, #584]	; (800d7a8 <ai_platform_network_init+0x2c4>)
 800d560:	682a      	ldr	r2, [r5, #0]
 800d562:	429a      	cmp	r2, r3
 800d564:	f040 8090 	bne.w	800d688 <ai_platform_network_init+0x1a4>
 800d568:	692b      	ldr	r3, [r5, #16]
 800d56a:	89ae      	ldrh	r6, [r5, #12]
 800d56c:	f8b5 c00e 	ldrh.w	ip, [r5, #14]
 800d570:	e9d5 1201 	ldrd	r1, r2, [r5, #4]
 800d574:	62a3      	str	r3, [r4, #40]	; 0x28
 800d576:	e9c4 1207 	strd	r1, r2, [r4, #28]
 800d57a:	2303      	movs	r3, #3
 800d57c:	84a6      	strh	r6, [r4, #36]	; 0x24
 800d57e:	4626      	mov	r6, r4
 800d580:	4620      	mov	r0, r4
 800d582:	f8a4 c026 	strh.w	ip, [r4, #38]	; 0x26
 800d586:	60e3      	str	r3, [r4, #12]
 800d588:	f005 fc5a 	bl	8012e40 <ai_layers_init_all>
 800d58c:	4630      	mov	r0, r6
 800d58e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d592:	f7fe fbf1 	bl	800bd78 <_ai_platform_acquire_crc>
 800d596:	4b82      	ldr	r3, [pc, #520]	; (800d7a0 <ai_platform_network_init+0x2bc>)
 800d598:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d5a2:	185a      	adds	r2, r3, r1
 800d5a4:	2a01      	cmp	r2, #1
 800d5a6:	d92b      	bls.n	800d600 <ai_platform_network_init+0x11c>
 800d5a8:	f240 4249 	movw	r2, #1097	; 0x449
 800d5ac:	4293      	cmp	r3, r2
 800d5ae:	d027      	beq.n	800d600 <ai_platform_network_init+0x11c>
 800d5b0:	4a7c      	ldr	r2, [pc, #496]	; (800d7a4 <ai_platform_network_init+0x2c0>)
 800d5b2:	6813      	ldr	r3, [r2, #0]
 800d5b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d5b8:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800d5bc:	d02d      	beq.n	800d61a <ai_platform_network_init+0x136>
 800d5be:	6813      	ldr	r3, [r2, #0]
 800d5c0:	f240 4183 	movw	r1, #1155	; 0x483
 800d5c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d5c8:	428b      	cmp	r3, r1
 800d5ca:	f000 8089 	beq.w	800d6e0 <ai_platform_network_init+0x1fc>
 800d5ce:	6813      	ldr	r3, [r2, #0]
 800d5d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d5d4:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800d5d8:	f000 80c3 	beq.w	800d762 <ai_platform_network_init+0x27e>
 800d5dc:	6813      	ldr	r3, [r2, #0]
 800d5de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d129      	bne.n	800d63a <ai_platform_network_init+0x156>
 800d5e6:	4a71      	ldr	r2, [pc, #452]	; (800d7ac <ai_platform_network_init+0x2c8>)
 800d5e8:	2301      	movs	r3, #1
 800d5ea:	6093      	str	r3, [r2, #8]
 800d5ec:	6893      	ldr	r3, [r2, #8]
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d1fc      	bne.n	800d5ec <ai_platform_network_init+0x108>
 800d5f2:	496f      	ldr	r1, [pc, #444]	; (800d7b0 <ai_platform_network_init+0x2cc>)
 800d5f4:	4b6f      	ldr	r3, [pc, #444]	; (800d7b4 <ai_platform_network_init+0x2d0>)
 800d5f6:	6011      	str	r1, [r2, #0]
 800d5f8:	6812      	ldr	r2, [r2, #0]
 800d5fa:	429a      	cmp	r2, r3
 800d5fc:	d01d      	beq.n	800d63a <ai_platform_network_init+0x156>
 800d5fe:	e7fe      	b.n	800d5fe <ai_platform_network_init+0x11a>
 800d600:	4a6a      	ldr	r2, [pc, #424]	; (800d7ac <ai_platform_network_init+0x2c8>)
 800d602:	2301      	movs	r3, #1
 800d604:	6093      	str	r3, [r2, #8]
 800d606:	6893      	ldr	r3, [r2, #8]
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d1fc      	bne.n	800d606 <ai_platform_network_init+0x122>
 800d60c:	4968      	ldr	r1, [pc, #416]	; (800d7b0 <ai_platform_network_init+0x2cc>)
 800d60e:	4b69      	ldr	r3, [pc, #420]	; (800d7b4 <ai_platform_network_init+0x2d0>)
 800d610:	6011      	str	r1, [r2, #0]
 800d612:	6812      	ldr	r2, [r2, #0]
 800d614:	429a      	cmp	r2, r3
 800d616:	d010      	beq.n	800d63a <ai_platform_network_init+0x156>
 800d618:	e7fe      	b.n	800d618 <ai_platform_network_init+0x134>
 800d61a:	4a67      	ldr	r2, [pc, #412]	; (800d7b8 <ai_platform_network_init+0x2d4>)
 800d61c:	2301      	movs	r3, #1
 800d61e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800d622:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800d626:	2b00      	cmp	r3, #0
 800d628:	d1fb      	bne.n	800d622 <ai_platform_network_init+0x13e>
 800d62a:	4961      	ldr	r1, [pc, #388]	; (800d7b0 <ai_platform_network_init+0x2cc>)
 800d62c:	4b61      	ldr	r3, [pc, #388]	; (800d7b4 <ai_platform_network_init+0x2d0>)
 800d62e:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800d632:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800d636:	429a      	cmp	r2, r3
 800d638:	d113      	bne.n	800d662 <ai_platform_network_init+0x17e>
 800d63a:	2600      	movs	r6, #0
 800d63c:	f7fe fb9e 	bl	800bd7c <_ai_platform_release_crc>
 800d640:	4630      	mov	r0, r6
 800d642:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d646:	4a59      	ldr	r2, [pc, #356]	; (800d7ac <ai_platform_network_init+0x2c8>)
 800d648:	2301      	movs	r3, #1
 800d64a:	6093      	str	r3, [r2, #8]
 800d64c:	6893      	ldr	r3, [r2, #8]
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d1fc      	bne.n	800d64c <ai_platform_network_init+0x168>
 800d652:	4b57      	ldr	r3, [pc, #348]	; (800d7b0 <ai_platform_network_init+0x2cc>)
 800d654:	6013      	str	r3, [r2, #0]
 800d656:	4b57      	ldr	r3, [pc, #348]	; (800d7b4 <ai_platform_network_init+0x2d0>)
 800d658:	6812      	ldr	r2, [r2, #0]
 800d65a:	429a      	cmp	r2, r3
 800d65c:	f43f af7a 	beq.w	800d554 <ai_platform_network_init+0x70>
 800d660:	e7fe      	b.n	800d660 <ai_platform_network_init+0x17c>
 800d662:	e7fe      	b.n	800d662 <ai_platform_network_init+0x17e>
 800d664:	4a54      	ldr	r2, [pc, #336]	; (800d7b8 <ai_platform_network_init+0x2d4>)
 800d666:	2301      	movs	r3, #1
 800d668:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800d66c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800d670:	2b00      	cmp	r3, #0
 800d672:	d1fb      	bne.n	800d66c <ai_platform_network_init+0x188>
 800d674:	4b4e      	ldr	r3, [pc, #312]	; (800d7b0 <ai_platform_network_init+0x2cc>)
 800d676:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800d67a:	4b4e      	ldr	r3, [pc, #312]	; (800d7b4 <ai_platform_network_init+0x2d0>)
 800d67c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800d680:	429a      	cmp	r2, r3
 800d682:	f43f af67 	beq.w	800d554 <ai_platform_network_init+0x70>
 800d686:	e7fe      	b.n	800d686 <ai_platform_network_init+0x1a2>
 800d688:	2101      	movs	r1, #1
 800d68a:	4628      	mov	r0, r5
 800d68c:	f105 081c 	add.w	r8, r5, #28
 800d690:	686e      	ldr	r6, [r5, #4]
 800d692:	f7fe fa89 	bl	800bba8 <ai_buffer_get_size>
 800d696:	4607      	mov	r7, r0
 800d698:	2101      	movs	r1, #1
 800d69a:	4640      	mov	r0, r8
 800d69c:	f8d5 9020 	ldr.w	r9, [r5, #32]
 800d6a0:	f7fe fa82 	bl	800bba8 <ai_buffer_get_size>
 800d6a4:	2f00      	cmp	r7, #0
 800d6a6:	d13e      	bne.n	800d726 <ai_platform_network_init+0x242>
 800d6a8:	2800      	cmp	r0, #0
 800d6aa:	f000 808e 	beq.w	800d7ca <ai_platform_network_init+0x2e6>
 800d6ae:	f1b9 0f00 	cmp.w	r9, #0
 800d6b2:	f000 8094 	beq.w	800d7de <ai_platform_network_init+0x2fa>
 800d6b6:	f04f 0c01 	mov.w	ip, #1
 800d6ba:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800d6bc:	2600      	movs	r6, #0
 800d6be:	83e7      	strh	r7, [r4, #30]
 800d6c0:	4563      	cmp	r3, ip
 800d6c2:	83a6      	strh	r6, [r4, #28]
 800d6c4:	d37a      	bcc.n	800d7bc <ai_platform_network_init+0x2d8>
 800d6c6:	f1bc 0f00 	cmp.w	ip, #0
 800d6ca:	f000 809c 	beq.w	800d806 <ai_platform_network_init+0x322>
 800d6ce:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800d6d0:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
 800d6d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d6d6:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 800d6da:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800d6de:	e74c      	b.n	800d57a <ai_platform_network_init+0x96>
 800d6e0:	4a35      	ldr	r2, [pc, #212]	; (800d7b8 <ai_platform_network_init+0x2d4>)
 800d6e2:	2301      	movs	r3, #1
 800d6e4:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800d6e8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d1fb      	bne.n	800d6e8 <ai_platform_network_init+0x204>
 800d6f0:	492f      	ldr	r1, [pc, #188]	; (800d7b0 <ai_platform_network_init+0x2cc>)
 800d6f2:	4b30      	ldr	r3, [pc, #192]	; (800d7b4 <ai_platform_network_init+0x2d0>)
 800d6f4:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800d6f8:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800d6fc:	429a      	cmp	r2, r3
 800d6fe:	d09c      	beq.n	800d63a <ai_platform_network_init+0x156>
 800d700:	e7fe      	b.n	800d700 <ai_platform_network_init+0x21c>
 800d702:	4a2d      	ldr	r2, [pc, #180]	; (800d7b8 <ai_platform_network_init+0x2d4>)
 800d704:	2301      	movs	r3, #1
 800d706:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800d70a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d1fb      	bne.n	800d70a <ai_platform_network_init+0x226>
 800d712:	4b27      	ldr	r3, [pc, #156]	; (800d7b0 <ai_platform_network_init+0x2cc>)
 800d714:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800d718:	4b26      	ldr	r3, [pc, #152]	; (800d7b4 <ai_platform_network_init+0x2d0>)
 800d71a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800d71e:	429a      	cmp	r2, r3
 800d720:	f43f af18 	beq.w	800d554 <ai_platform_network_init+0x70>
 800d724:	e7fe      	b.n	800d724 <ai_platform_network_init+0x240>
 800d726:	2800      	cmp	r0, #0
 800d728:	d153      	bne.n	800d7d2 <ai_platform_network_init+0x2ee>
 800d72a:	4680      	mov	r8, r0
 800d72c:	4684      	mov	ip, r0
 800d72e:	2e00      	cmp	r6, #0
 800d730:	d063      	beq.n	800d7fa <ai_platform_network_init+0x316>
 800d732:	8be6      	ldrh	r6, [r4, #30]
 800d734:	2e00      	cmp	r6, #0
 800d736:	d168      	bne.n	800d80a <ai_platform_network_init+0x326>
 800d738:	2212      	movs	r2, #18
 800d73a:	2116      	movs	r1, #22
 800d73c:	f104 0010 	add.w	r0, r4, #16
 800d740:	f000 fddc 	bl	800e2fc <core_set_error>
 800d744:	e77c      	b.n	800d640 <ai_platform_network_init+0x15c>
 800d746:	4a19      	ldr	r2, [pc, #100]	; (800d7ac <ai_platform_network_init+0x2c8>)
 800d748:	2301      	movs	r3, #1
 800d74a:	6093      	str	r3, [r2, #8]
 800d74c:	6893      	ldr	r3, [r2, #8]
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d1fc      	bne.n	800d74c <ai_platform_network_init+0x268>
 800d752:	4b17      	ldr	r3, [pc, #92]	; (800d7b0 <ai_platform_network_init+0x2cc>)
 800d754:	6013      	str	r3, [r2, #0]
 800d756:	4b17      	ldr	r3, [pc, #92]	; (800d7b4 <ai_platform_network_init+0x2d0>)
 800d758:	6812      	ldr	r2, [r2, #0]
 800d75a:	429a      	cmp	r2, r3
 800d75c:	f43f aefa 	beq.w	800d554 <ai_platform_network_init+0x70>
 800d760:	e7fe      	b.n	800d760 <ai_platform_network_init+0x27c>
 800d762:	4a12      	ldr	r2, [pc, #72]	; (800d7ac <ai_platform_network_init+0x2c8>)
 800d764:	2301      	movs	r3, #1
 800d766:	6093      	str	r3, [r2, #8]
 800d768:	6893      	ldr	r3, [r2, #8]
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d1fc      	bne.n	800d768 <ai_platform_network_init+0x284>
 800d76e:	4910      	ldr	r1, [pc, #64]	; (800d7b0 <ai_platform_network_init+0x2cc>)
 800d770:	4b10      	ldr	r3, [pc, #64]	; (800d7b4 <ai_platform_network_init+0x2d0>)
 800d772:	6011      	str	r1, [r2, #0]
 800d774:	6812      	ldr	r2, [r2, #0]
 800d776:	429a      	cmp	r2, r3
 800d778:	f43f af5f 	beq.w	800d63a <ai_platform_network_init+0x156>
 800d77c:	e7fe      	b.n	800d77c <ai_platform_network_init+0x298>
 800d77e:	4a0b      	ldr	r2, [pc, #44]	; (800d7ac <ai_platform_network_init+0x2c8>)
 800d780:	2301      	movs	r3, #1
 800d782:	6093      	str	r3, [r2, #8]
 800d784:	6893      	ldr	r3, [r2, #8]
 800d786:	2b00      	cmp	r3, #0
 800d788:	d1fc      	bne.n	800d784 <ai_platform_network_init+0x2a0>
 800d78a:	4b09      	ldr	r3, [pc, #36]	; (800d7b0 <ai_platform_network_init+0x2cc>)
 800d78c:	6013      	str	r3, [r2, #0]
 800d78e:	4b09      	ldr	r3, [pc, #36]	; (800d7b4 <ai_platform_network_init+0x2d0>)
 800d790:	6812      	ldr	r2, [r2, #0]
 800d792:	429a      	cmp	r2, r3
 800d794:	f43f aede 	beq.w	800d554 <ai_platform_network_init+0x70>
 800d798:	e7fe      	b.n	800d798 <ai_platform_network_init+0x2b4>
 800d79a:	bf00      	nop
 800d79c:	a1c00100 	.word	0xa1c00100
 800d7a0:	e0042000 	.word	0xe0042000
 800d7a4:	5c001000 	.word	0x5c001000
 800d7a8:	a1facade 	.word	0xa1facade
 800d7ac:	40023000 	.word	0x40023000
 800d7b0:	f407a5c2 	.word	0xf407a5c2
 800d7b4:	b5e8b5cd 	.word	0xb5e8b5cd
 800d7b8:	58024000 	.word	0x58024000
 800d7bc:	2213      	movs	r2, #19
 800d7be:	2116      	movs	r1, #22
 800d7c0:	f104 0010 	add.w	r0, r4, #16
 800d7c4:	f000 fd9a 	bl	800e2fc <core_set_error>
 800d7c8:	e73a      	b.n	800d640 <ai_platform_network_init+0x15c>
 800d7ca:	4607      	mov	r7, r0
 800d7cc:	4680      	mov	r8, r0
 800d7ce:	4684      	mov	ip, r0
 800d7d0:	e773      	b.n	800d6ba <ai_platform_network_init+0x1d6>
 800d7d2:	f1b9 0f00 	cmp.w	r9, #0
 800d7d6:	d002      	beq.n	800d7de <ai_platform_network_init+0x2fa>
 800d7d8:	f04f 0c01 	mov.w	ip, #1
 800d7dc:	e7a7      	b.n	800d72e <ai_platform_network_init+0x24a>
 800d7de:	2110      	movs	r1, #16
 800d7e0:	2213      	movs	r2, #19
 800d7e2:	2600      	movs	r6, #0
 800d7e4:	1860      	adds	r0, r4, r1
 800d7e6:	f000 fd89 	bl	800e2fc <core_set_error>
 800d7ea:	e729      	b.n	800d640 <ai_platform_network_init+0x15c>
 800d7ec:	2110      	movs	r1, #16
 800d7ee:	2211      	movs	r2, #17
 800d7f0:	462e      	mov	r6, r5
 800d7f2:	1860      	adds	r0, r4, r1
 800d7f4:	f000 fd82 	bl	800e2fc <core_set_error>
 800d7f8:	e722      	b.n	800d640 <ai_platform_network_init+0x15c>
 800d7fa:	2110      	movs	r1, #16
 800d7fc:	2212      	movs	r2, #18
 800d7fe:	1860      	adds	r0, r4, r1
 800d800:	f000 fd7c 	bl	800e2fc <core_set_error>
 800d804:	e71c      	b.n	800d640 <ai_platform_network_init+0x15c>
 800d806:	4666      	mov	r6, ip
 800d808:	e6b7      	b.n	800d57a <ai_platform_network_init+0x96>
 800d80a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d80c:	6a26      	ldr	r6, [r4, #32]
 800d80e:	2701      	movs	r7, #1
 800d810:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800d812:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800d816:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 800d81a:	e74e      	b.n	800d6ba <ai_platform_network_init+0x1d6>

0800d81c <ai_platform_network_post_init>:
 800d81c:	b538      	push	{r3, r4, r5, lr}
 800d81e:	2800      	cmp	r0, #0
 800d820:	d04e      	beq.n	800d8c0 <ai_platform_network_post_init+0xa4>
 800d822:	4b8c      	ldr	r3, [pc, #560]	; (800da54 <ai_platform_network_post_init+0x238>)
 800d824:	4604      	mov	r4, r0
 800d826:	6802      	ldr	r2, [r0, #0]
 800d828:	429a      	cmp	r2, r3
 800d82a:	d149      	bne.n	800d8c0 <ai_platform_network_post_init+0xa4>
 800d82c:	f7fe faa4 	bl	800bd78 <_ai_platform_acquire_crc>
 800d830:	4b89      	ldr	r3, [pc, #548]	; (800da58 <ai_platform_network_post_init+0x23c>)
 800d832:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d83c:	189a      	adds	r2, r3, r2
 800d83e:	2a01      	cmp	r2, #1
 800d840:	f240 8095 	bls.w	800d96e <ai_platform_network_post_init+0x152>
 800d844:	f240 4249 	movw	r2, #1097	; 0x449
 800d848:	4293      	cmp	r3, r2
 800d84a:	f000 8090 	beq.w	800d96e <ai_platform_network_post_init+0x152>
 800d84e:	4a83      	ldr	r2, [pc, #524]	; (800da5c <ai_platform_network_post_init+0x240>)
 800d850:	6813      	ldr	r3, [r2, #0]
 800d852:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d856:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800d85a:	f000 8096 	beq.w	800d98a <ai_platform_network_post_init+0x16e>
 800d85e:	6813      	ldr	r3, [r2, #0]
 800d860:	f240 4183 	movw	r1, #1155	; 0x483
 800d864:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d868:	428b      	cmp	r3, r1
 800d86a:	f000 80b8 	beq.w	800d9de <ai_platform_network_post_init+0x1c2>
 800d86e:	6813      	ldr	r3, [r2, #0]
 800d870:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d874:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800d878:	f000 80de 	beq.w	800da38 <ai_platform_network_post_init+0x21c>
 800d87c:	6813      	ldr	r3, [r2, #0]
 800d87e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d882:	2b00      	cmp	r3, #0
 800d884:	f000 80bd 	beq.w	800da02 <ai_platform_network_post_init+0x1e6>
 800d888:	f7fe fa78 	bl	800bd7c <_ai_platform_release_crc>
 800d88c:	68e3      	ldr	r3, [r4, #12]
 800d88e:	f013 0502 	ands.w	r5, r3, #2
 800d892:	f000 808c 	beq.w	800d9ae <ai_platform_network_post_init+0x192>
 800d896:	4620      	mov	r0, r4
 800d898:	f005 fae0 	bl	8012e5c <ai_layers_post_init_all>
 800d89c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800d89e:	b16b      	cbz	r3, 800d8bc <ai_platform_network_post_init+0xa0>
 800d8a0:	6b65      	ldr	r5, [r4, #52]	; 0x34
 800d8a2:	e007      	b.n	800d8b4 <ai_platform_network_post_init+0x98>
 800d8a4:	e9d4 320f 	ldrd	r3, r2, [r4, #60]	; 0x3c
 800d8a8:	4798      	blx	r3
 800d8aa:	692b      	ldr	r3, [r5, #16]
 800d8ac:	b133      	cbz	r3, 800d8bc <ai_platform_network_post_init+0xa0>
 800d8ae:	42ab      	cmp	r3, r5
 800d8b0:	461d      	mov	r5, r3
 800d8b2:	d003      	beq.n	800d8bc <ai_platform_network_post_init+0xa0>
 800d8b4:	4629      	mov	r1, r5
 800d8b6:	2000      	movs	r0, #0
 800d8b8:	2d00      	cmp	r5, #0
 800d8ba:	d1f3      	bne.n	800d8a4 <ai_platform_network_post_init+0x88>
 800d8bc:	2001      	movs	r0, #1
 800d8be:	bd38      	pop	{r3, r4, r5, pc}
 800d8c0:	f7fe fa5a 	bl	800bd78 <_ai_platform_acquire_crc>
 800d8c4:	4b64      	ldr	r3, [pc, #400]	; (800da58 <ai_platform_network_post_init+0x23c>)
 800d8c6:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d8d0:	185a      	adds	r2, r3, r1
 800d8d2:	2a01      	cmp	r2, #1
 800d8d4:	d92a      	bls.n	800d92c <ai_platform_network_post_init+0x110>
 800d8d6:	f240 4249 	movw	r2, #1097	; 0x449
 800d8da:	4293      	cmp	r3, r2
 800d8dc:	d026      	beq.n	800d92c <ai_platform_network_post_init+0x110>
 800d8de:	4a5f      	ldr	r2, [pc, #380]	; (800da5c <ai_platform_network_post_init+0x240>)
 800d8e0:	6813      	ldr	r3, [r2, #0]
 800d8e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d8e6:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800d8ea:	d02c      	beq.n	800d946 <ai_platform_network_post_init+0x12a>
 800d8ec:	6813      	ldr	r3, [r2, #0]
 800d8ee:	f240 4183 	movw	r1, #1155	; 0x483
 800d8f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d8f6:	428b      	cmp	r3, r1
 800d8f8:	d060      	beq.n	800d9bc <ai_platform_network_post_init+0x1a0>
 800d8fa:	6813      	ldr	r3, [r2, #0]
 800d8fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d900:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800d904:	f000 808b 	beq.w	800da1e <ai_platform_network_post_init+0x202>
 800d908:	6813      	ldr	r3, [r2, #0]
 800d90a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d90e:	2b00      	cmp	r3, #0
 800d910:	d129      	bne.n	800d966 <ai_platform_network_post_init+0x14a>
 800d912:	4a53      	ldr	r2, [pc, #332]	; (800da60 <ai_platform_network_post_init+0x244>)
 800d914:	2301      	movs	r3, #1
 800d916:	6093      	str	r3, [r2, #8]
 800d918:	6893      	ldr	r3, [r2, #8]
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d1fc      	bne.n	800d918 <ai_platform_network_post_init+0xfc>
 800d91e:	4951      	ldr	r1, [pc, #324]	; (800da64 <ai_platform_network_post_init+0x248>)
 800d920:	4b51      	ldr	r3, [pc, #324]	; (800da68 <ai_platform_network_post_init+0x24c>)
 800d922:	6011      	str	r1, [r2, #0]
 800d924:	6812      	ldr	r2, [r2, #0]
 800d926:	429a      	cmp	r2, r3
 800d928:	d01d      	beq.n	800d966 <ai_platform_network_post_init+0x14a>
 800d92a:	e7fe      	b.n	800d92a <ai_platform_network_post_init+0x10e>
 800d92c:	4a4c      	ldr	r2, [pc, #304]	; (800da60 <ai_platform_network_post_init+0x244>)
 800d92e:	2301      	movs	r3, #1
 800d930:	6093      	str	r3, [r2, #8]
 800d932:	6893      	ldr	r3, [r2, #8]
 800d934:	2b00      	cmp	r3, #0
 800d936:	d1fc      	bne.n	800d932 <ai_platform_network_post_init+0x116>
 800d938:	494a      	ldr	r1, [pc, #296]	; (800da64 <ai_platform_network_post_init+0x248>)
 800d93a:	4b4b      	ldr	r3, [pc, #300]	; (800da68 <ai_platform_network_post_init+0x24c>)
 800d93c:	6011      	str	r1, [r2, #0]
 800d93e:	6812      	ldr	r2, [r2, #0]
 800d940:	429a      	cmp	r2, r3
 800d942:	d010      	beq.n	800d966 <ai_platform_network_post_init+0x14a>
 800d944:	e7fe      	b.n	800d944 <ai_platform_network_post_init+0x128>
 800d946:	4a49      	ldr	r2, [pc, #292]	; (800da6c <ai_platform_network_post_init+0x250>)
 800d948:	2301      	movs	r3, #1
 800d94a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800d94e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800d952:	2b00      	cmp	r3, #0
 800d954:	d1fb      	bne.n	800d94e <ai_platform_network_post_init+0x132>
 800d956:	4943      	ldr	r1, [pc, #268]	; (800da64 <ai_platform_network_post_init+0x248>)
 800d958:	4b43      	ldr	r3, [pc, #268]	; (800da68 <ai_platform_network_post_init+0x24c>)
 800d95a:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800d95e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800d962:	429a      	cmp	r2, r3
 800d964:	d110      	bne.n	800d988 <ai_platform_network_post_init+0x16c>
 800d966:	f7fe fa09 	bl	800bd7c <_ai_platform_release_crc>
 800d96a:	2000      	movs	r0, #0
 800d96c:	bd38      	pop	{r3, r4, r5, pc}
 800d96e:	4a3c      	ldr	r2, [pc, #240]	; (800da60 <ai_platform_network_post_init+0x244>)
 800d970:	2301      	movs	r3, #1
 800d972:	6093      	str	r3, [r2, #8]
 800d974:	6893      	ldr	r3, [r2, #8]
 800d976:	2b00      	cmp	r3, #0
 800d978:	d1fc      	bne.n	800d974 <ai_platform_network_post_init+0x158>
 800d97a:	493a      	ldr	r1, [pc, #232]	; (800da64 <ai_platform_network_post_init+0x248>)
 800d97c:	4b3a      	ldr	r3, [pc, #232]	; (800da68 <ai_platform_network_post_init+0x24c>)
 800d97e:	6011      	str	r1, [r2, #0]
 800d980:	6812      	ldr	r2, [r2, #0]
 800d982:	429a      	cmp	r2, r3
 800d984:	d080      	beq.n	800d888 <ai_platform_network_post_init+0x6c>
 800d986:	e7fe      	b.n	800d986 <ai_platform_network_post_init+0x16a>
 800d988:	e7fe      	b.n	800d988 <ai_platform_network_post_init+0x16c>
 800d98a:	4a38      	ldr	r2, [pc, #224]	; (800da6c <ai_platform_network_post_init+0x250>)
 800d98c:	2301      	movs	r3, #1
 800d98e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800d992:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800d996:	2b00      	cmp	r3, #0
 800d998:	d1fb      	bne.n	800d992 <ai_platform_network_post_init+0x176>
 800d99a:	4932      	ldr	r1, [pc, #200]	; (800da64 <ai_platform_network_post_init+0x248>)
 800d99c:	4b32      	ldr	r3, [pc, #200]	; (800da68 <ai_platform_network_post_init+0x24c>)
 800d99e:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800d9a2:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800d9a6:	429a      	cmp	r2, r3
 800d9a8:	f43f af6e 	beq.w	800d888 <ai_platform_network_post_init+0x6c>
 800d9ac:	e7fe      	b.n	800d9ac <ai_platform_network_post_init+0x190>
 800d9ae:	2210      	movs	r2, #16
 800d9b0:	2111      	movs	r1, #17
 800d9b2:	18a0      	adds	r0, r4, r2
 800d9b4:	f000 fca2 	bl	800e2fc <core_set_error>
 800d9b8:	4628      	mov	r0, r5
 800d9ba:	bd38      	pop	{r3, r4, r5, pc}
 800d9bc:	4a2b      	ldr	r2, [pc, #172]	; (800da6c <ai_platform_network_post_init+0x250>)
 800d9be:	2301      	movs	r3, #1
 800d9c0:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800d9c4:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d1fb      	bne.n	800d9c4 <ai_platform_network_post_init+0x1a8>
 800d9cc:	4925      	ldr	r1, [pc, #148]	; (800da64 <ai_platform_network_post_init+0x248>)
 800d9ce:	4b26      	ldr	r3, [pc, #152]	; (800da68 <ai_platform_network_post_init+0x24c>)
 800d9d0:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800d9d4:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800d9d8:	429a      	cmp	r2, r3
 800d9da:	d0c4      	beq.n	800d966 <ai_platform_network_post_init+0x14a>
 800d9dc:	e7fe      	b.n	800d9dc <ai_platform_network_post_init+0x1c0>
 800d9de:	4a23      	ldr	r2, [pc, #140]	; (800da6c <ai_platform_network_post_init+0x250>)
 800d9e0:	2301      	movs	r3, #1
 800d9e2:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800d9e6:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d1fb      	bne.n	800d9e6 <ai_platform_network_post_init+0x1ca>
 800d9ee:	491d      	ldr	r1, [pc, #116]	; (800da64 <ai_platform_network_post_init+0x248>)
 800d9f0:	4b1d      	ldr	r3, [pc, #116]	; (800da68 <ai_platform_network_post_init+0x24c>)
 800d9f2:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800d9f6:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800d9fa:	429a      	cmp	r2, r3
 800d9fc:	f43f af44 	beq.w	800d888 <ai_platform_network_post_init+0x6c>
 800da00:	e7fe      	b.n	800da00 <ai_platform_network_post_init+0x1e4>
 800da02:	4a17      	ldr	r2, [pc, #92]	; (800da60 <ai_platform_network_post_init+0x244>)
 800da04:	2301      	movs	r3, #1
 800da06:	6093      	str	r3, [r2, #8]
 800da08:	6893      	ldr	r3, [r2, #8]
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d1fc      	bne.n	800da08 <ai_platform_network_post_init+0x1ec>
 800da0e:	4915      	ldr	r1, [pc, #84]	; (800da64 <ai_platform_network_post_init+0x248>)
 800da10:	4b15      	ldr	r3, [pc, #84]	; (800da68 <ai_platform_network_post_init+0x24c>)
 800da12:	6011      	str	r1, [r2, #0]
 800da14:	6812      	ldr	r2, [r2, #0]
 800da16:	429a      	cmp	r2, r3
 800da18:	f43f af36 	beq.w	800d888 <ai_platform_network_post_init+0x6c>
 800da1c:	e7fe      	b.n	800da1c <ai_platform_network_post_init+0x200>
 800da1e:	4a10      	ldr	r2, [pc, #64]	; (800da60 <ai_platform_network_post_init+0x244>)
 800da20:	2301      	movs	r3, #1
 800da22:	6093      	str	r3, [r2, #8]
 800da24:	6893      	ldr	r3, [r2, #8]
 800da26:	2b00      	cmp	r3, #0
 800da28:	d1fc      	bne.n	800da24 <ai_platform_network_post_init+0x208>
 800da2a:	490e      	ldr	r1, [pc, #56]	; (800da64 <ai_platform_network_post_init+0x248>)
 800da2c:	4b0e      	ldr	r3, [pc, #56]	; (800da68 <ai_platform_network_post_init+0x24c>)
 800da2e:	6011      	str	r1, [r2, #0]
 800da30:	6812      	ldr	r2, [r2, #0]
 800da32:	429a      	cmp	r2, r3
 800da34:	d097      	beq.n	800d966 <ai_platform_network_post_init+0x14a>
 800da36:	e7fe      	b.n	800da36 <ai_platform_network_post_init+0x21a>
 800da38:	4a09      	ldr	r2, [pc, #36]	; (800da60 <ai_platform_network_post_init+0x244>)
 800da3a:	2301      	movs	r3, #1
 800da3c:	6093      	str	r3, [r2, #8]
 800da3e:	6893      	ldr	r3, [r2, #8]
 800da40:	2b00      	cmp	r3, #0
 800da42:	d1fc      	bne.n	800da3e <ai_platform_network_post_init+0x222>
 800da44:	4907      	ldr	r1, [pc, #28]	; (800da64 <ai_platform_network_post_init+0x248>)
 800da46:	4b08      	ldr	r3, [pc, #32]	; (800da68 <ai_platform_network_post_init+0x24c>)
 800da48:	6011      	str	r1, [r2, #0]
 800da4a:	6812      	ldr	r2, [r2, #0]
 800da4c:	429a      	cmp	r2, r3
 800da4e:	f43f af1b 	beq.w	800d888 <ai_platform_network_post_init+0x6c>
 800da52:	e7fe      	b.n	800da52 <ai_platform_network_post_init+0x236>
 800da54:	a1c00100 	.word	0xa1c00100
 800da58:	e0042000 	.word	0xe0042000
 800da5c:	5c001000 	.word	0x5c001000
 800da60:	40023000 	.word	0x40023000
 800da64:	f407a5c2 	.word	0xf407a5c2
 800da68:	b5e8b5cd 	.word	0xb5e8b5cd
 800da6c:	58024000 	.word	0x58024000

0800da70 <ai_platform_network_process>:
 800da70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da74:	b085      	sub	sp, #20
 800da76:	460e      	mov	r6, r1
 800da78:	4605      	mov	r5, r0
 800da7a:	9201      	str	r2, [sp, #4]
 800da7c:	b120      	cbz	r0, 800da88 <ai_platform_network_process+0x18>
 800da7e:	4b24      	ldr	r3, [pc, #144]	; (800db10 <ai_platform_network_process+0xa0>)
 800da80:	6802      	ldr	r2, [r0, #0]
 800da82:	429a      	cmp	r2, r3
 800da84:	bf18      	it	ne
 800da86:	2500      	movne	r5, #0
 800da88:	f7fe f976 	bl	800bd78 <_ai_platform_acquire_crc>
 800da8c:	4b21      	ldr	r3, [pc, #132]	; (800db14 <ai_platform_network_process+0xa4>)
 800da8e:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800da98:	185a      	adds	r2, r3, r1
 800da9a:	2a01      	cmp	r2, #1
 800da9c:	d92b      	bls.n	800daf6 <ai_platform_network_process+0x86>
 800da9e:	f240 4249 	movw	r2, #1097	; 0x449
 800daa2:	4293      	cmp	r3, r2
 800daa4:	d027      	beq.n	800daf6 <ai_platform_network_process+0x86>
 800daa6:	4a1c      	ldr	r2, [pc, #112]	; (800db18 <ai_platform_network_process+0xa8>)
 800daa8:	6813      	ldr	r3, [r2, #0]
 800daaa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800daae:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800dab2:	d039      	beq.n	800db28 <ai_platform_network_process+0xb8>
 800dab4:	6813      	ldr	r3, [r2, #0]
 800dab6:	f240 4183 	movw	r1, #1155	; 0x483
 800daba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800dabe:	428b      	cmp	r3, r1
 800dac0:	f000 819c 	beq.w	800ddfc <ai_platform_network_process+0x38c>
 800dac4:	6813      	ldr	r3, [r2, #0]
 800dac6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800daca:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800dace:	f000 8179 	beq.w	800ddc4 <ai_platform_network_process+0x354>
 800dad2:	6813      	ldr	r3, [r2, #0]
 800dad4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d136      	bne.n	800db4a <ai_platform_network_process+0xda>
 800dadc:	4a0f      	ldr	r2, [pc, #60]	; (800db1c <ai_platform_network_process+0xac>)
 800dade:	2301      	movs	r3, #1
 800dae0:	6093      	str	r3, [r2, #8]
 800dae2:	6893      	ldr	r3, [r2, #8]
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d1fc      	bne.n	800dae2 <ai_platform_network_process+0x72>
 800dae8:	4b0d      	ldr	r3, [pc, #52]	; (800db20 <ai_platform_network_process+0xb0>)
 800daea:	6013      	str	r3, [r2, #0]
 800daec:	4b0d      	ldr	r3, [pc, #52]	; (800db24 <ai_platform_network_process+0xb4>)
 800daee:	6812      	ldr	r2, [r2, #0]
 800daf0:	429a      	cmp	r2, r3
 800daf2:	d02a      	beq.n	800db4a <ai_platform_network_process+0xda>
 800daf4:	e7fe      	b.n	800daf4 <ai_platform_network_process+0x84>
 800daf6:	4a09      	ldr	r2, [pc, #36]	; (800db1c <ai_platform_network_process+0xac>)
 800daf8:	2301      	movs	r3, #1
 800dafa:	6093      	str	r3, [r2, #8]
 800dafc:	6893      	ldr	r3, [r2, #8]
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d1fc      	bne.n	800dafc <ai_platform_network_process+0x8c>
 800db02:	4b07      	ldr	r3, [pc, #28]	; (800db20 <ai_platform_network_process+0xb0>)
 800db04:	6013      	str	r3, [r2, #0]
 800db06:	4b07      	ldr	r3, [pc, #28]	; (800db24 <ai_platform_network_process+0xb4>)
 800db08:	6812      	ldr	r2, [r2, #0]
 800db0a:	429a      	cmp	r2, r3
 800db0c:	d01d      	beq.n	800db4a <ai_platform_network_process+0xda>
 800db0e:	e7fe      	b.n	800db0e <ai_platform_network_process+0x9e>
 800db10:	a1c00100 	.word	0xa1c00100
 800db14:	e0042000 	.word	0xe0042000
 800db18:	5c001000 	.word	0x5c001000
 800db1c:	40023000 	.word	0x40023000
 800db20:	f407a5c2 	.word	0xf407a5c2
 800db24:	b5e8b5cd 	.word	0xb5e8b5cd
 800db28:	4ab0      	ldr	r2, [pc, #704]	; (800ddec <ai_platform_network_process+0x37c>)
 800db2a:	2301      	movs	r3, #1
 800db2c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800db30:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800db34:	2b00      	cmp	r3, #0
 800db36:	d1fb      	bne.n	800db30 <ai_platform_network_process+0xc0>
 800db38:	4bad      	ldr	r3, [pc, #692]	; (800ddf0 <ai_platform_network_process+0x380>)
 800db3a:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800db3e:	4bad      	ldr	r3, [pc, #692]	; (800ddf4 <ai_platform_network_process+0x384>)
 800db40:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800db44:	429a      	cmp	r2, r3
 800db46:	f040 812b 	bne.w	800dda0 <ai_platform_network_process+0x330>
 800db4a:	f7fe f917 	bl	800bd7c <_ai_platform_release_crc>
 800db4e:	2d00      	cmp	r5, #0
 800db50:	f000 8172 	beq.w	800de38 <ai_platform_network_process+0x3c8>
 800db54:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 800db56:	2b00      	cmp	r3, #0
 800db58:	f000 8123 	beq.w	800dda2 <ai_platform_network_process+0x332>
 800db5c:	68eb      	ldr	r3, [r5, #12]
 800db5e:	2200      	movs	r2, #0
 800db60:	f8d5 8030 	ldr.w	r8, [r5, #48]	; 0x30
 800db64:	f003 0303 	and.w	r3, r3, #3
 800db68:	616a      	str	r2, [r5, #20]
 800db6a:	2b03      	cmp	r3, #3
 800db6c:	f040 811f 	bne.w	800ddae <ai_platform_network_process+0x33e>
 800db70:	2e00      	cmp	r6, #0
 800db72:	f000 8156 	beq.w	800de22 <ai_platform_network_process+0x3b2>
 800db76:	fab8 f788 	clz	r7, r8
 800db7a:	097f      	lsrs	r7, r7, #5
 800db7c:	f1b8 0f00 	cmp.w	r8, #0
 800db80:	f000 814f 	beq.w	800de22 <ai_platform_network_process+0x3b2>
 800db84:	f8b8 3000 	ldrh.w	r3, [r8]
 800db88:	2b00      	cmp	r3, #0
 800db8a:	f000 814a 	beq.w	800de22 <ai_platform_network_process+0x3b2>
 800db8e:	69b3      	ldr	r3, [r6, #24]
 800db90:	681b      	ldr	r3, [r3, #0]
 800db92:	e9cd 3502 	strd	r3, r5, [sp, #8]
 800db96:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	d072      	beq.n	800dc84 <ai_platform_network_process+0x214>
 800db9e:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 800dba2:	2c00      	cmp	r4, #0
 800dba4:	d06e      	beq.n	800dc84 <ai_platform_network_process+0x214>
 800dba6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800dbaa:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 800dbae:	f8d3 a000 	ldr.w	sl, [r3]
 800dbb2:	eb1a 1907 	adds.w	r9, sl, r7, lsl #4
 800dbb6:	f000 8133 	beq.w	800de20 <ai_platform_network_process+0x3b0>
 800dbba:	69a3      	ldr	r3, [r4, #24]
 800dbbc:	2101      	movs	r1, #1
 800dbbe:	4630      	mov	r0, r6
 800dbc0:	685d      	ldr	r5, [r3, #4]
 800dbc2:	f7fd fff1 	bl	800bba8 <ai_buffer_get_size>
 800dbc6:	4285      	cmp	r5, r0
 800dbc8:	f0c0 8138 	bcc.w	800de3c <ai_platform_network_process+0x3cc>
 800dbcc:	68e0      	ldr	r0, [r4, #12]
 800dbce:	69b1      	ldr	r1, [r6, #24]
 800dbd0:	68c2      	ldr	r2, [r0, #12]
 800dbd2:	68cb      	ldr	r3, [r1, #12]
 800dbd4:	429a      	cmp	r2, r3
 800dbd6:	f040 8131 	bne.w	800de3c <ai_platform_network_process+0x3cc>
 800dbda:	6882      	ldr	r2, [r0, #8]
 800dbdc:	688b      	ldr	r3, [r1, #8]
 800dbde:	429a      	cmp	r2, r3
 800dbe0:	f040 812c 	bne.w	800de3c <ai_platform_network_process+0x3cc>
 800dbe4:	6842      	ldr	r2, [r0, #4]
 800dbe6:	684b      	ldr	r3, [r1, #4]
 800dbe8:	429a      	cmp	r2, r3
 800dbea:	f040 8127 	bne.w	800de3c <ai_platform_network_process+0x3cc>
 800dbee:	69a3      	ldr	r3, [r4, #24]
 800dbf0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800dbf4:	f7fd ffc8 	bl	800bb88 <ai_array_get_data_byte_size>
 800dbf8:	4605      	mov	r5, r0
 800dbfa:	4620      	mov	r0, r4
 800dbfc:	f7fd ff1a 	bl	800ba34 <get_tensor_byte_size>
 800dc00:	4285      	cmp	r5, r0
 800dc02:	f0c0 811b 	bcc.w	800de3c <ai_platform_network_process+0x3cc>
 800dc06:	69a3      	ldr	r3, [r4, #24]
 800dc08:	6818      	ldr	r0, [r3, #0]
 800dc0a:	f7fd ff29 	bl	800ba60 <ai_array_to_buffer_fmt>
 800dc0e:	6833      	ldr	r3, [r6, #0]
 800dc10:	4058      	eors	r0, r3
 800dc12:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 800dc16:	f040 81ca 	bne.w	800dfae <ai_platform_network_process+0x53e>
 800dc1a:	6873      	ldr	r3, [r6, #4]
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	f000 81bd 	beq.w	800df9c <ai_platform_network_process+0x52c>
 800dc22:	69b3      	ldr	r3, [r6, #24]
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	f000 81ca 	beq.w	800dfc0 <ai_platform_network_process+0x550>
 800dc2c:	9a02      	ldr	r2, [sp, #8]
 800dc2e:	4620      	mov	r0, r4
 800dc30:	3701      	adds	r7, #1
 800dc32:	361c      	adds	r6, #28
 800dc34:	429a      	cmp	r2, r3
 800dc36:	bf38      	it	cc
 800dc38:	461a      	movcc	r2, r3
 800dc3a:	9202      	str	r2, [sp, #8]
 800dc3c:	f7fd fefa 	bl	800ba34 <get_tensor_byte_size>
 800dc40:	f8c9 0008 	str.w	r0, [r9, #8]
 800dc44:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	fb00 f303 	mul.w	r3, r0, r3
 800dc4e:	f8c9 300c 	str.w	r3, [r9, #12]
 800dc52:	f856 1c18 	ldr.w	r1, [r6, #-24]
 800dc56:	440b      	add	r3, r1
 800dc58:	f8c9 1004 	str.w	r1, [r9, #4]
 800dc5c:	f84a 300b 	str.w	r3, [sl, fp]
 800dc60:	69a0      	ldr	r0, [r4, #24]
 800dc62:	6803      	ldr	r3, [r0, #0]
 800dc64:	009a      	lsls	r2, r3, #2
 800dc66:	f100 80bb 	bmi.w	800dde0 <ai_platform_network_process+0x370>
 800dc6a:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800dc6e:	1a9b      	subs	r3, r3, r2
 800dc70:	4419      	add	r1, r3
 800dc72:	6081      	str	r1, [r0, #8]
 800dc74:	69a3      	ldr	r3, [r4, #24]
 800dc76:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800dc7a:	60da      	str	r2, [r3, #12]
 800dc7c:	f8b8 3000 	ldrh.w	r3, [r8]
 800dc80:	42bb      	cmp	r3, r7
 800dc82:	d888      	bhi.n	800db96 <ai_platform_network_process+0x126>
 800dc84:	9d03      	ldr	r5, [sp, #12]
 800dc86:	9b01      	ldr	r3, [sp, #4]
 800dc88:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	f000 81a1 	beq.w	800dfd2 <ai_platform_network_process+0x562>
 800dc90:	2a01      	cmp	r2, #1
 800dc92:	f240 817b 	bls.w	800df8c <ai_platform_network_process+0x51c>
 800dc96:	f8d5 9030 	ldr.w	r9, [r5, #48]	; 0x30
 800dc9a:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	f000 8174 	beq.w	800df8c <ai_platform_network_process+0x51c>
 800dca4:	9e01      	ldr	r6, [sp, #4]
 800dca6:	2700      	movs	r7, #0
 800dca8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	f000 80d3 	beq.w	800de58 <ai_platform_network_process+0x3e8>
 800dcb2:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 800dcb6:	2c00      	cmp	r4, #0
 800dcb8:	f000 80ce 	beq.w	800de58 <ai_platform_network_process+0x3e8>
 800dcbc:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800dcc0:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 800dcc4:	f8d3 8000 	ldr.w	r8, [r3]
 800dcc8:	eb18 1a07 	adds.w	sl, r8, r7, lsl #4
 800dccc:	f000 819f 	beq.w	800e00e <ai_platform_network_process+0x59e>
 800dcd0:	69a3      	ldr	r3, [r4, #24]
 800dcd2:	2101      	movs	r1, #1
 800dcd4:	4630      	mov	r0, r6
 800dcd6:	685b      	ldr	r3, [r3, #4]
 800dcd8:	9301      	str	r3, [sp, #4]
 800dcda:	f7fd ff65 	bl	800bba8 <ai_buffer_get_size>
 800dcde:	9b01      	ldr	r3, [sp, #4]
 800dce0:	4283      	cmp	r3, r0
 800dce2:	f0c0 8153 	bcc.w	800df8c <ai_platform_network_process+0x51c>
 800dce6:	68e0      	ldr	r0, [r4, #12]
 800dce8:	69b1      	ldr	r1, [r6, #24]
 800dcea:	68c2      	ldr	r2, [r0, #12]
 800dcec:	68cb      	ldr	r3, [r1, #12]
 800dcee:	429a      	cmp	r2, r3
 800dcf0:	f040 814c 	bne.w	800df8c <ai_platform_network_process+0x51c>
 800dcf4:	6882      	ldr	r2, [r0, #8]
 800dcf6:	688b      	ldr	r3, [r1, #8]
 800dcf8:	429a      	cmp	r2, r3
 800dcfa:	f040 8147 	bne.w	800df8c <ai_platform_network_process+0x51c>
 800dcfe:	6842      	ldr	r2, [r0, #4]
 800dd00:	684b      	ldr	r3, [r1, #4]
 800dd02:	429a      	cmp	r2, r3
 800dd04:	f040 8142 	bne.w	800df8c <ai_platform_network_process+0x51c>
 800dd08:	69a3      	ldr	r3, [r4, #24]
 800dd0a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800dd0e:	f7fd ff3b 	bl	800bb88 <ai_array_get_data_byte_size>
 800dd12:	9001      	str	r0, [sp, #4]
 800dd14:	4620      	mov	r0, r4
 800dd16:	f7fd fe8d 	bl	800ba34 <get_tensor_byte_size>
 800dd1a:	9b01      	ldr	r3, [sp, #4]
 800dd1c:	4283      	cmp	r3, r0
 800dd1e:	f0c0 8135 	bcc.w	800df8c <ai_platform_network_process+0x51c>
 800dd22:	69a3      	ldr	r3, [r4, #24]
 800dd24:	6818      	ldr	r0, [r3, #0]
 800dd26:	f7fd fe9b 	bl	800ba60 <ai_array_to_buffer_fmt>
 800dd2a:	6833      	ldr	r3, [r6, #0]
 800dd2c:	4058      	eors	r0, r3
 800dd2e:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 800dd32:	f040 815c 	bne.w	800dfee <ai_platform_network_process+0x57e>
 800dd36:	6873      	ldr	r3, [r6, #4]
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	f000 8150 	beq.w	800dfde <ai_platform_network_process+0x56e>
 800dd3e:	69b3      	ldr	r3, [r6, #24]
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	f000 815b 	beq.w	800dffe <ai_platform_network_process+0x58e>
 800dd48:	9a02      	ldr	r2, [sp, #8]
 800dd4a:	4620      	mov	r0, r4
 800dd4c:	3701      	adds	r7, #1
 800dd4e:	361c      	adds	r6, #28
 800dd50:	429a      	cmp	r2, r3
 800dd52:	bf38      	it	cc
 800dd54:	461a      	movcc	r2, r3
 800dd56:	9202      	str	r2, [sp, #8]
 800dd58:	f7fd fe6c 	bl	800ba34 <get_tensor_byte_size>
 800dd5c:	f8ca 0008 	str.w	r0, [sl, #8]
 800dd60:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	fb00 f303 	mul.w	r3, r0, r3
 800dd6a:	f8ca 300c 	str.w	r3, [sl, #12]
 800dd6e:	f856 1c18 	ldr.w	r1, [r6, #-24]
 800dd72:	440b      	add	r3, r1
 800dd74:	f8ca 1004 	str.w	r1, [sl, #4]
 800dd78:	f848 300b 	str.w	r3, [r8, fp]
 800dd7c:	69a0      	ldr	r0, [r4, #24]
 800dd7e:	6803      	ldr	r3, [r0, #0]
 800dd80:	009b      	lsls	r3, r3, #2
 800dd82:	d464      	bmi.n	800de4e <ai_platform_network_process+0x3de>
 800dd84:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800dd88:	1a9b      	subs	r3, r3, r2
 800dd8a:	4419      	add	r1, r3
 800dd8c:	6081      	str	r1, [r0, #8]
 800dd8e:	69a3      	ldr	r3, [r4, #24]
 800dd90:	f8da 2004 	ldr.w	r2, [sl, #4]
 800dd94:	60da      	str	r2, [r3, #12]
 800dd96:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800dd9a:	429f      	cmp	r7, r3
 800dd9c:	d384      	bcc.n	800dca8 <ai_platform_network_process+0x238>
 800dd9e:	e05b      	b.n	800de58 <ai_platform_network_process+0x3e8>
 800dda0:	e7fe      	b.n	800dda0 <ai_platform_network_process+0x330>
 800dda2:	68ea      	ldr	r2, [r5, #12]
 800dda4:	616b      	str	r3, [r5, #20]
 800dda6:	f002 0203 	and.w	r2, r2, #3
 800ddaa:	2a03      	cmp	r2, #3
 800ddac:	d039      	beq.n	800de22 <ai_platform_network_process+0x3b2>
 800ddae:	2230      	movs	r2, #48	; 0x30
 800ddb0:	2111      	movs	r1, #17
 800ddb2:	f105 0010 	add.w	r0, r5, #16
 800ddb6:	2400      	movs	r4, #0
 800ddb8:	f000 faa0 	bl	800e2fc <core_set_error>
 800ddbc:	4620      	mov	r0, r4
 800ddbe:	b005      	add	sp, #20
 800ddc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddc4:	4a0c      	ldr	r2, [pc, #48]	; (800ddf8 <ai_platform_network_process+0x388>)
 800ddc6:	2301      	movs	r3, #1
 800ddc8:	6093      	str	r3, [r2, #8]
 800ddca:	6893      	ldr	r3, [r2, #8]
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d1fc      	bne.n	800ddca <ai_platform_network_process+0x35a>
 800ddd0:	4b07      	ldr	r3, [pc, #28]	; (800ddf0 <ai_platform_network_process+0x380>)
 800ddd2:	6013      	str	r3, [r2, #0]
 800ddd4:	4b07      	ldr	r3, [pc, #28]	; (800ddf4 <ai_platform_network_process+0x384>)
 800ddd6:	6812      	ldr	r2, [r2, #0]
 800ddd8:	429a      	cmp	r2, r3
 800ddda:	f43f aeb6 	beq.w	800db4a <ai_platform_network_process+0xda>
 800ddde:	e7fe      	b.n	800ddde <ai_platform_network_process+0x36e>
 800dde0:	f8b8 3000 	ldrh.w	r3, [r8]
 800dde4:	429f      	cmp	r7, r3
 800dde6:	f4ff aed6 	bcc.w	800db96 <ai_platform_network_process+0x126>
 800ddea:	e74b      	b.n	800dc84 <ai_platform_network_process+0x214>
 800ddec:	58024000 	.word	0x58024000
 800ddf0:	f407a5c2 	.word	0xf407a5c2
 800ddf4:	b5e8b5cd 	.word	0xb5e8b5cd
 800ddf8:	40023000 	.word	0x40023000
 800ddfc:	4a88      	ldr	r2, [pc, #544]	; (800e020 <ai_platform_network_process+0x5b0>)
 800ddfe:	2301      	movs	r3, #1
 800de00:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800de04:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d1fb      	bne.n	800de04 <ai_platform_network_process+0x394>
 800de0c:	4b85      	ldr	r3, [pc, #532]	; (800e024 <ai_platform_network_process+0x5b4>)
 800de0e:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800de12:	4b85      	ldr	r3, [pc, #532]	; (800e028 <ai_platform_network_process+0x5b8>)
 800de14:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800de18:	429a      	cmp	r2, r3
 800de1a:	f43f ae96 	beq.w	800db4a <ai_platform_network_process+0xda>
 800de1e:	e7fe      	b.n	800de1e <ai_platform_network_process+0x3ae>
 800de20:	9d03      	ldr	r5, [sp, #12]
 800de22:	2400      	movs	r4, #0
 800de24:	2217      	movs	r2, #23
 800de26:	2112      	movs	r1, #18
 800de28:	f105 0010 	add.w	r0, r5, #16
 800de2c:	f000 fa66 	bl	800e2fc <core_set_error>
 800de30:	4620      	mov	r0, r4
 800de32:	b005      	add	sp, #20
 800de34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de38:	462c      	mov	r4, r5
 800de3a:	e7bf      	b.n	800ddbc <ai_platform_network_process+0x34c>
 800de3c:	9d03      	ldr	r5, [sp, #12]
 800de3e:	2218      	movs	r2, #24
 800de40:	2112      	movs	r1, #18
 800de42:	2400      	movs	r4, #0
 800de44:	f105 0010 	add.w	r0, r5, #16
 800de48:	f000 fa58 	bl	800e2fc <core_set_error>
 800de4c:	e7b6      	b.n	800ddbc <ai_platform_network_process+0x34c>
 800de4e:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800de52:	429f      	cmp	r7, r3
 800de54:	f4ff af28 	bcc.w	800dca8 <ai_platform_network_process+0x238>
 800de58:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800de5c:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 800de5e:	82ab      	strh	r3, [r5, #20]
 800de60:	2a00      	cmp	r2, #0
 800de62:	f040 808d 	bne.w	800df80 <ai_platform_network_process+0x510>
 800de66:	4616      	mov	r6, r2
 800de68:	4617      	mov	r7, r2
 800de6a:	8aec      	ldrh	r4, [r5, #22]
 800de6c:	429c      	cmp	r4, r3
 800de6e:	d2a5      	bcs.n	800ddbc <ai_platform_network_process+0x34c>
 800de70:	46ab      	mov	fp, r5
 800de72:	2e00      	cmp	r6, #0
 800de74:	d030      	beq.n	800ded8 <ai_platform_network_process+0x468>
 800de76:	f04f 0800 	mov.w	r8, #0
 800de7a:	e014      	b.n	800dea6 <ai_platform_network_process+0x436>
 800de7c:	6882      	ldr	r2, [r0, #8]
 800de7e:	68c5      	ldr	r5, [r0, #12]
 800de80:	6863      	ldr	r3, [r4, #4]
 800de82:	1b52      	subs	r2, r2, r5
 800de84:	4413      	add	r3, r2
 800de86:	6083      	str	r3, [r0, #8]
 800de88:	698b      	ldr	r3, [r1, #24]
 800de8a:	6862      	ldr	r2, [r4, #4]
 800de8c:	60da      	str	r2, [r3, #12]
 800de8e:	f859 200a 	ldr.w	r2, [r9, sl]
 800de92:	f108 0801 	add.w	r8, r8, #1
 800de96:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 800de9a:	440b      	add	r3, r1
 800de9c:	4293      	cmp	r3, r2
 800de9e:	d301      	bcc.n	800dea4 <ai_platform_network_process+0x434>
 800dea0:	68e3      	ldr	r3, [r4, #12]
 800dea2:	1ad3      	subs	r3, r2, r3
 800dea4:	6063      	str	r3, [r4, #4]
 800dea6:	8833      	ldrh	r3, [r6, #0]
 800dea8:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 800deac:	4543      	cmp	r3, r8
 800deae:	d913      	bls.n	800ded8 <ai_platform_network_process+0x468>
 800deb0:	6873      	ldr	r3, [r6, #4]
 800deb2:	b18b      	cbz	r3, 800ded8 <ai_platform_network_process+0x468>
 800deb4:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 800deb8:	b171      	cbz	r1, 800ded8 <ai_platform_network_process+0x468>
 800deba:	6988      	ldr	r0, [r1, #24]
 800debc:	68b2      	ldr	r2, [r6, #8]
 800debe:	6803      	ldr	r3, [r0, #0]
 800dec0:	f8d2 9000 	ldr.w	r9, [r2]
 800dec4:	009d      	lsls	r5, r3, #2
 800dec6:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 800deca:	d5d7      	bpl.n	800de7c <ai_platform_network_process+0x40c>
 800decc:	6880      	ldr	r0, [r0, #8]
 800dece:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 800ded2:	f005 f865 	bl	8012fa0 <memcpy>
 800ded6:	e7da      	b.n	800de8e <ai_platform_network_process+0x41e>
 800ded8:	4658      	mov	r0, fp
 800deda:	f004 ffd3 	bl	8012e84 <ai_layers_forward_all>
 800dede:	2f00      	cmp	r7, #0
 800dee0:	d03f      	beq.n	800df62 <ai_platform_network_process+0x4f2>
 800dee2:	2400      	movs	r4, #0
 800dee4:	e016      	b.n	800df14 <ai_platform_network_process+0x4a4>
 800dee6:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 800deea:	f859 100a 	ldr.w	r1, [r9, sl]
 800deee:	4413      	add	r3, r2
 800def0:	428b      	cmp	r3, r1
 800def2:	d302      	bcc.n	800defa <ai_platform_network_process+0x48a>
 800def4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800def8:	1acb      	subs	r3, r1, r3
 800defa:	f8c8 3004 	str.w	r3, [r8, #4]
 800defe:	6981      	ldr	r1, [r0, #24]
 800df00:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 800df04:	1b52      	subs	r2, r2, r5
 800df06:	4413      	add	r3, r2
 800df08:	608b      	str	r3, [r1, #8]
 800df0a:	6983      	ldr	r3, [r0, #24]
 800df0c:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800df10:	60da      	str	r2, [r3, #12]
 800df12:	3401      	adds	r4, #1
 800df14:	883b      	ldrh	r3, [r7, #0]
 800df16:	42a3      	cmp	r3, r4
 800df18:	d923      	bls.n	800df62 <ai_platform_network_process+0x4f2>
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	b30b      	cbz	r3, 800df62 <ai_platform_network_process+0x4f2>
 800df1e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800df22:	b1f0      	cbz	r0, 800df62 <ai_platform_network_process+0x4f2>
 800df24:	68ba      	ldr	r2, [r7, #8]
 800df26:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 800df2a:	6983      	ldr	r3, [r0, #24]
 800df2c:	f8d2 9000 	ldr.w	r9, [r2]
 800df30:	681a      	ldr	r2, [r3, #0]
 800df32:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 800df36:	0092      	lsls	r2, r2, #2
 800df38:	d5d5      	bpl.n	800dee6 <ai_platform_network_process+0x476>
 800df3a:	f8d8 2008 	ldr.w	r2, [r8, #8]
 800df3e:	6899      	ldr	r1, [r3, #8]
 800df40:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800df44:	f005 f82c 	bl	8012fa0 <memcpy>
 800df48:	f859 200a 	ldr.w	r2, [r9, sl]
 800df4c:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 800df50:	440b      	add	r3, r1
 800df52:	4293      	cmp	r3, r2
 800df54:	d302      	bcc.n	800df5c <ai_platform_network_process+0x4ec>
 800df56:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800df5a:	1ad3      	subs	r3, r2, r3
 800df5c:	f8c8 3004 	str.w	r3, [r8, #4]
 800df60:	e7d7      	b.n	800df12 <ai_platform_network_process+0x4a2>
 800df62:	f8bb 4016 	ldrh.w	r4, [fp, #22]
 800df66:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 800df6a:	3401      	adds	r4, #1
 800df6c:	b2a4      	uxth	r4, r4
 800df6e:	42a3      	cmp	r3, r4
 800df70:	f8ab 4016 	strh.w	r4, [fp, #22]
 800df74:	f63f af7d 	bhi.w	800de72 <ai_platform_network_process+0x402>
 800df78:	4620      	mov	r0, r4
 800df7a:	b005      	add	sp, #20
 800df7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df80:	2a01      	cmp	r2, #1
 800df82:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 800df84:	d029      	beq.n	800dfda <ai_platform_network_process+0x56a>
 800df86:	f106 070c 	add.w	r7, r6, #12
 800df8a:	e76e      	b.n	800de6a <ai_platform_network_process+0x3fa>
 800df8c:	2218      	movs	r2, #24
 800df8e:	2113      	movs	r1, #19
 800df90:	f105 0010 	add.w	r0, r5, #16
 800df94:	2400      	movs	r4, #0
 800df96:	f000 f9b1 	bl	800e2fc <core_set_error>
 800df9a:	e70f      	b.n	800ddbc <ai_platform_network_process+0x34c>
 800df9c:	9d03      	ldr	r5, [sp, #12]
 800df9e:	4604      	mov	r4, r0
 800dfa0:	2217      	movs	r2, #23
 800dfa2:	2112      	movs	r1, #18
 800dfa4:	f105 0010 	add.w	r0, r5, #16
 800dfa8:	f000 f9a8 	bl	800e2fc <core_set_error>
 800dfac:	e706      	b.n	800ddbc <ai_platform_network_process+0x34c>
 800dfae:	9d03      	ldr	r5, [sp, #12]
 800dfb0:	2219      	movs	r2, #25
 800dfb2:	2112      	movs	r1, #18
 800dfb4:	2400      	movs	r4, #0
 800dfb6:	f105 0010 	add.w	r0, r5, #16
 800dfba:	f000 f99f 	bl	800e2fc <core_set_error>
 800dfbe:	e6fd      	b.n	800ddbc <ai_platform_network_process+0x34c>
 800dfc0:	9d03      	ldr	r5, [sp, #12]
 800dfc2:	4604      	mov	r4, r0
 800dfc4:	2221      	movs	r2, #33	; 0x21
 800dfc6:	2112      	movs	r1, #18
 800dfc8:	f105 0010 	add.w	r0, r5, #16
 800dfcc:	f000 f996 	bl	800e2fc <core_set_error>
 800dfd0:	e6f4      	b.n	800ddbc <ai_platform_network_process+0x34c>
 800dfd2:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800dfd6:	82ab      	strh	r3, [r5, #20]
 800dfd8:	e742      	b.n	800de60 <ai_platform_network_process+0x3f0>
 800dfda:	2700      	movs	r7, #0
 800dfdc:	e745      	b.n	800de6a <ai_platform_network_process+0x3fa>
 800dfde:	4604      	mov	r4, r0
 800dfe0:	2217      	movs	r2, #23
 800dfe2:	2113      	movs	r1, #19
 800dfe4:	f105 0010 	add.w	r0, r5, #16
 800dfe8:	f000 f988 	bl	800e2fc <core_set_error>
 800dfec:	e6e6      	b.n	800ddbc <ai_platform_network_process+0x34c>
 800dfee:	2219      	movs	r2, #25
 800dff0:	2113      	movs	r1, #19
 800dff2:	f105 0010 	add.w	r0, r5, #16
 800dff6:	2400      	movs	r4, #0
 800dff8:	f000 f980 	bl	800e2fc <core_set_error>
 800dffc:	e6de      	b.n	800ddbc <ai_platform_network_process+0x34c>
 800dffe:	4604      	mov	r4, r0
 800e000:	2221      	movs	r2, #33	; 0x21
 800e002:	2113      	movs	r1, #19
 800e004:	f105 0010 	add.w	r0, r5, #16
 800e008:	f000 f978 	bl	800e2fc <core_set_error>
 800e00c:	e6d6      	b.n	800ddbc <ai_platform_network_process+0x34c>
 800e00e:	2217      	movs	r2, #23
 800e010:	2113      	movs	r1, #19
 800e012:	f105 0010 	add.w	r0, r5, #16
 800e016:	4654      	mov	r4, sl
 800e018:	f000 f970 	bl	800e2fc <core_set_error>
 800e01c:	e6ce      	b.n	800ddbc <ai_platform_network_process+0x34c>
 800e01e:	bf00      	nop
 800e020:	58024000 	.word	0x58024000
 800e024:	f407a5c2 	.word	0xf407a5c2
 800e028:	b5e8b5cd 	.word	0xb5e8b5cd

0800e02c <ai_platform_observer_register_s>:
 800e02c:	b570      	push	{r4, r5, r6, lr}
 800e02e:	4604      	mov	r4, r0
 800e030:	460d      	mov	r5, r1
 800e032:	b120      	cbz	r0, 800e03e <ai_platform_observer_register_s+0x12>
 800e034:	4b56      	ldr	r3, [pc, #344]	; (800e190 <ai_platform_observer_register_s+0x164>)
 800e036:	6802      	ldr	r2, [r0, #0]
 800e038:	429a      	cmp	r2, r3
 800e03a:	bf18      	it	ne
 800e03c:	2400      	movne	r4, #0
 800e03e:	f7fd fe9b 	bl	800bd78 <_ai_platform_acquire_crc>
 800e042:	4b54      	ldr	r3, [pc, #336]	; (800e194 <ai_platform_observer_register_s+0x168>)
 800e044:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e04e:	189a      	adds	r2, r3, r2
 800e050:	2a01      	cmp	r2, #1
 800e052:	d929      	bls.n	800e0a8 <ai_platform_observer_register_s+0x7c>
 800e054:	f240 4249 	movw	r2, #1097	; 0x449
 800e058:	4293      	cmp	r3, r2
 800e05a:	d025      	beq.n	800e0a8 <ai_platform_observer_register_s+0x7c>
 800e05c:	4a4e      	ldr	r2, [pc, #312]	; (800e198 <ai_platform_observer_register_s+0x16c>)
 800e05e:	6813      	ldr	r3, [r2, #0]
 800e060:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e064:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800e068:	d02b      	beq.n	800e0c2 <ai_platform_observer_register_s+0x96>
 800e06a:	6813      	ldr	r3, [r2, #0]
 800e06c:	f240 4183 	movw	r1, #1155	; 0x483
 800e070:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e074:	428b      	cmp	r3, r1
 800e076:	d077      	beq.n	800e168 <ai_platform_observer_register_s+0x13c>
 800e078:	6813      	ldr	r3, [r2, #0]
 800e07a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e07e:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800e082:	d05c      	beq.n	800e13e <ai_platform_observer_register_s+0x112>
 800e084:	6813      	ldr	r3, [r2, #0]
 800e086:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d129      	bne.n	800e0e2 <ai_platform_observer_register_s+0xb6>
 800e08e:	4a43      	ldr	r2, [pc, #268]	; (800e19c <ai_platform_observer_register_s+0x170>)
 800e090:	2301      	movs	r3, #1
 800e092:	6093      	str	r3, [r2, #8]
 800e094:	6893      	ldr	r3, [r2, #8]
 800e096:	2b00      	cmp	r3, #0
 800e098:	d1fc      	bne.n	800e094 <ai_platform_observer_register_s+0x68>
 800e09a:	4b41      	ldr	r3, [pc, #260]	; (800e1a0 <ai_platform_observer_register_s+0x174>)
 800e09c:	6013      	str	r3, [r2, #0]
 800e09e:	4b41      	ldr	r3, [pc, #260]	; (800e1a4 <ai_platform_observer_register_s+0x178>)
 800e0a0:	6812      	ldr	r2, [r2, #0]
 800e0a2:	429a      	cmp	r2, r3
 800e0a4:	d01d      	beq.n	800e0e2 <ai_platform_observer_register_s+0xb6>
 800e0a6:	e7fe      	b.n	800e0a6 <ai_platform_observer_register_s+0x7a>
 800e0a8:	4a3c      	ldr	r2, [pc, #240]	; (800e19c <ai_platform_observer_register_s+0x170>)
 800e0aa:	2301      	movs	r3, #1
 800e0ac:	6093      	str	r3, [r2, #8]
 800e0ae:	6893      	ldr	r3, [r2, #8]
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d1fc      	bne.n	800e0ae <ai_platform_observer_register_s+0x82>
 800e0b4:	4b3a      	ldr	r3, [pc, #232]	; (800e1a0 <ai_platform_observer_register_s+0x174>)
 800e0b6:	6013      	str	r3, [r2, #0]
 800e0b8:	4b3a      	ldr	r3, [pc, #232]	; (800e1a4 <ai_platform_observer_register_s+0x178>)
 800e0ba:	6812      	ldr	r2, [r2, #0]
 800e0bc:	429a      	cmp	r2, r3
 800e0be:	d010      	beq.n	800e0e2 <ai_platform_observer_register_s+0xb6>
 800e0c0:	e7fe      	b.n	800e0c0 <ai_platform_observer_register_s+0x94>
 800e0c2:	4a39      	ldr	r2, [pc, #228]	; (800e1a8 <ai_platform_observer_register_s+0x17c>)
 800e0c4:	2301      	movs	r3, #1
 800e0c6:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800e0ca:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d1fb      	bne.n	800e0ca <ai_platform_observer_register_s+0x9e>
 800e0d2:	4b33      	ldr	r3, [pc, #204]	; (800e1a0 <ai_platform_observer_register_s+0x174>)
 800e0d4:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800e0d8:	4b32      	ldr	r3, [pc, #200]	; (800e1a4 <ai_platform_observer_register_s+0x178>)
 800e0da:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800e0de:	429a      	cmp	r2, r3
 800e0e0:	d124      	bne.n	800e12c <ai_platform_observer_register_s+0x100>
 800e0e2:	f7fd fe4b 	bl	800bd7c <_ai_platform_release_crc>
 800e0e6:	2d00      	cmp	r5, #0
 800e0e8:	bf18      	it	ne
 800e0ea:	2c00      	cmpne	r4, #0
 800e0ec:	bf0c      	ite	eq
 800e0ee:	2601      	moveq	r6, #1
 800e0f0:	2600      	movne	r6, #0
 800e0f2:	d031      	beq.n	800e158 <ai_platform_observer_register_s+0x12c>
 800e0f4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e0f6:	b9d3      	cbnz	r3, 800e12e <ai_platform_observer_register_s+0x102>
 800e0f8:	81eb      	strh	r3, [r5, #14]
 800e0fa:	2101      	movs	r1, #1
 800e0fc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e0fe:	e006      	b.n	800e10e <ai_platform_observer_register_s+0xe2>
 800e100:	81e9      	strh	r1, [r5, #14]
 800e102:	b281      	uxth	r1, r0
 800e104:	691a      	ldr	r2, [r3, #16]
 800e106:	429a      	cmp	r2, r3
 800e108:	4613      	mov	r3, r2
 800e10a:	d003      	beq.n	800e114 <ai_platform_observer_register_s+0xe8>
 800e10c:	b112      	cbz	r2, 800e114 <ai_platform_observer_register_s+0xe8>
 800e10e:	1c48      	adds	r0, r1, #1
 800e110:	2b00      	cmp	r3, #0
 800e112:	d1f5      	bne.n	800e100 <ai_platform_observer_register_s+0xd4>
 800e114:	7a2b      	ldrb	r3, [r5, #8]
 800e116:	2100      	movs	r1, #0
 800e118:	4a24      	ldr	r2, [pc, #144]	; (800e1ac <ai_platform_observer_register_s+0x180>)
 800e11a:	2601      	movs	r6, #1
 800e11c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800e120:	81a9      	strh	r1, [r5, #12]
 800e122:	4630      	mov	r0, r6
 800e124:	60ab      	str	r3, [r5, #8]
 800e126:	e9c4 250f 	strd	r2, r5, [r4, #60]	; 0x3c
 800e12a:	bd70      	pop	{r4, r5, r6, pc}
 800e12c:	e7fe      	b.n	800e12c <ai_platform_observer_register_s+0x100>
 800e12e:	2240      	movs	r2, #64	; 0x40
 800e130:	2111      	movs	r1, #17
 800e132:	f104 0010 	add.w	r0, r4, #16
 800e136:	f000 f8e1 	bl	800e2fc <core_set_error>
 800e13a:	4630      	mov	r0, r6
 800e13c:	bd70      	pop	{r4, r5, r6, pc}
 800e13e:	4a17      	ldr	r2, [pc, #92]	; (800e19c <ai_platform_observer_register_s+0x170>)
 800e140:	2301      	movs	r3, #1
 800e142:	6093      	str	r3, [r2, #8]
 800e144:	6893      	ldr	r3, [r2, #8]
 800e146:	2b00      	cmp	r3, #0
 800e148:	d1fc      	bne.n	800e144 <ai_platform_observer_register_s+0x118>
 800e14a:	4b15      	ldr	r3, [pc, #84]	; (800e1a0 <ai_platform_observer_register_s+0x174>)
 800e14c:	6013      	str	r3, [r2, #0]
 800e14e:	4b15      	ldr	r3, [pc, #84]	; (800e1a4 <ai_platform_observer_register_s+0x178>)
 800e150:	6812      	ldr	r2, [r2, #0]
 800e152:	429a      	cmp	r2, r3
 800e154:	d0c5      	beq.n	800e0e2 <ai_platform_observer_register_s+0xb6>
 800e156:	e7fe      	b.n	800e156 <ai_platform_observer_register_s+0x12a>
 800e158:	b1bc      	cbz	r4, 800e18a <ai_platform_observer_register_s+0x15e>
 800e15a:	2110      	movs	r1, #16
 800e15c:	2211      	movs	r2, #17
 800e15e:	2600      	movs	r6, #0
 800e160:	1860      	adds	r0, r4, r1
 800e162:	f000 f8cb 	bl	800e2fc <core_set_error>
 800e166:	e7e8      	b.n	800e13a <ai_platform_observer_register_s+0x10e>
 800e168:	4a0f      	ldr	r2, [pc, #60]	; (800e1a8 <ai_platform_observer_register_s+0x17c>)
 800e16a:	2301      	movs	r3, #1
 800e16c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800e170:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800e174:	2b00      	cmp	r3, #0
 800e176:	d1fb      	bne.n	800e170 <ai_platform_observer_register_s+0x144>
 800e178:	4b09      	ldr	r3, [pc, #36]	; (800e1a0 <ai_platform_observer_register_s+0x174>)
 800e17a:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800e17e:	4b09      	ldr	r3, [pc, #36]	; (800e1a4 <ai_platform_observer_register_s+0x178>)
 800e180:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800e184:	429a      	cmp	r2, r3
 800e186:	d0ac      	beq.n	800e0e2 <ai_platform_observer_register_s+0xb6>
 800e188:	e7fe      	b.n	800e188 <ai_platform_observer_register_s+0x15c>
 800e18a:	4626      	mov	r6, r4
 800e18c:	e7d5      	b.n	800e13a <ai_platform_observer_register_s+0x10e>
 800e18e:	bf00      	nop
 800e190:	a1c00100 	.word	0xa1c00100
 800e194:	e0042000 	.word	0xe0042000
 800e198:	5c001000 	.word	0x5c001000
 800e19c:	40023000 	.word	0x40023000
 800e1a0:	f407a5c2 	.word	0xf407a5c2
 800e1a4:	b5e8b5cd 	.word	0xb5e8b5cd
 800e1a8:	58024000 	.word	0x58024000
 800e1ac:	0800bc55 	.word	0x0800bc55

0800e1b0 <ai_platform_observer_unregister_s>:
 800e1b0:	b538      	push	{r3, r4, r5, lr}
 800e1b2:	4604      	mov	r4, r0
 800e1b4:	460d      	mov	r5, r1
 800e1b6:	b120      	cbz	r0, 800e1c2 <ai_platform_observer_unregister_s+0x12>
 800e1b8:	4b45      	ldr	r3, [pc, #276]	; (800e2d0 <ai_platform_observer_unregister_s+0x120>)
 800e1ba:	6802      	ldr	r2, [r0, #0]
 800e1bc:	429a      	cmp	r2, r3
 800e1be:	bf18      	it	ne
 800e1c0:	2400      	movne	r4, #0
 800e1c2:	f7fd fdd9 	bl	800bd78 <_ai_platform_acquire_crc>
 800e1c6:	4b43      	ldr	r3, [pc, #268]	; (800e2d4 <ai_platform_observer_unregister_s+0x124>)
 800e1c8:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e1d2:	189a      	adds	r2, r3, r2
 800e1d4:	2a01      	cmp	r2, #1
 800e1d6:	d929      	bls.n	800e22c <ai_platform_observer_unregister_s+0x7c>
 800e1d8:	f240 4249 	movw	r2, #1097	; 0x449
 800e1dc:	4293      	cmp	r3, r2
 800e1de:	d025      	beq.n	800e22c <ai_platform_observer_unregister_s+0x7c>
 800e1e0:	4a3d      	ldr	r2, [pc, #244]	; (800e2d8 <ai_platform_observer_unregister_s+0x128>)
 800e1e2:	6813      	ldr	r3, [r2, #0]
 800e1e4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e1e8:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800e1ec:	d02b      	beq.n	800e246 <ai_platform_observer_unregister_s+0x96>
 800e1ee:	6813      	ldr	r3, [r2, #0]
 800e1f0:	f240 4183 	movw	r1, #1155	; 0x483
 800e1f4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e1f8:	428b      	cmp	r3, r1
 800e1fa:	d04d      	beq.n	800e298 <ai_platform_observer_unregister_s+0xe8>
 800e1fc:	6813      	ldr	r3, [r2, #0]
 800e1fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e202:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800e206:	d03a      	beq.n	800e27e <ai_platform_observer_unregister_s+0xce>
 800e208:	6813      	ldr	r3, [r2, #0]
 800e20a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d129      	bne.n	800e266 <ai_platform_observer_unregister_s+0xb6>
 800e212:	4a32      	ldr	r2, [pc, #200]	; (800e2dc <ai_platform_observer_unregister_s+0x12c>)
 800e214:	2301      	movs	r3, #1
 800e216:	6093      	str	r3, [r2, #8]
 800e218:	6893      	ldr	r3, [r2, #8]
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d1fc      	bne.n	800e218 <ai_platform_observer_unregister_s+0x68>
 800e21e:	4b30      	ldr	r3, [pc, #192]	; (800e2e0 <ai_platform_observer_unregister_s+0x130>)
 800e220:	6013      	str	r3, [r2, #0]
 800e222:	4b30      	ldr	r3, [pc, #192]	; (800e2e4 <ai_platform_observer_unregister_s+0x134>)
 800e224:	6812      	ldr	r2, [r2, #0]
 800e226:	429a      	cmp	r2, r3
 800e228:	d01d      	beq.n	800e266 <ai_platform_observer_unregister_s+0xb6>
 800e22a:	e7fe      	b.n	800e22a <ai_platform_observer_unregister_s+0x7a>
 800e22c:	4a2b      	ldr	r2, [pc, #172]	; (800e2dc <ai_platform_observer_unregister_s+0x12c>)
 800e22e:	2301      	movs	r3, #1
 800e230:	6093      	str	r3, [r2, #8]
 800e232:	6893      	ldr	r3, [r2, #8]
 800e234:	2b00      	cmp	r3, #0
 800e236:	d1fc      	bne.n	800e232 <ai_platform_observer_unregister_s+0x82>
 800e238:	4b29      	ldr	r3, [pc, #164]	; (800e2e0 <ai_platform_observer_unregister_s+0x130>)
 800e23a:	6013      	str	r3, [r2, #0]
 800e23c:	4b29      	ldr	r3, [pc, #164]	; (800e2e4 <ai_platform_observer_unregister_s+0x134>)
 800e23e:	6812      	ldr	r2, [r2, #0]
 800e240:	429a      	cmp	r2, r3
 800e242:	d010      	beq.n	800e266 <ai_platform_observer_unregister_s+0xb6>
 800e244:	e7fe      	b.n	800e244 <ai_platform_observer_unregister_s+0x94>
 800e246:	4a28      	ldr	r2, [pc, #160]	; (800e2e8 <ai_platform_observer_unregister_s+0x138>)
 800e248:	2301      	movs	r3, #1
 800e24a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800e24e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800e252:	2b00      	cmp	r3, #0
 800e254:	d1fb      	bne.n	800e24e <ai_platform_observer_unregister_s+0x9e>
 800e256:	4b22      	ldr	r3, [pc, #136]	; (800e2e0 <ai_platform_observer_unregister_s+0x130>)
 800e258:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800e25c:	4b21      	ldr	r3, [pc, #132]	; (800e2e4 <ai_platform_observer_unregister_s+0x134>)
 800e25e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800e262:	429a      	cmp	r2, r3
 800e264:	d10a      	bne.n	800e27c <ai_platform_observer_unregister_s+0xcc>
 800e266:	f7fd fd89 	bl	800bd7c <_ai_platform_release_crc>
 800e26a:	b374      	cbz	r4, 800e2ca <ai_platform_observer_unregister_s+0x11a>
 800e26c:	fab5 f385 	clz	r3, r5
 800e270:	095b      	lsrs	r3, r3, #5
 800e272:	b315      	cbz	r5, 800e2ba <ai_platform_observer_unregister_s+0x10a>
 800e274:	2001      	movs	r0, #1
 800e276:	e9c4 330f 	strd	r3, r3, [r4, #60]	; 0x3c
 800e27a:	bd38      	pop	{r3, r4, r5, pc}
 800e27c:	e7fe      	b.n	800e27c <ai_platform_observer_unregister_s+0xcc>
 800e27e:	4a17      	ldr	r2, [pc, #92]	; (800e2dc <ai_platform_observer_unregister_s+0x12c>)
 800e280:	2301      	movs	r3, #1
 800e282:	6093      	str	r3, [r2, #8]
 800e284:	6893      	ldr	r3, [r2, #8]
 800e286:	2b00      	cmp	r3, #0
 800e288:	d1fc      	bne.n	800e284 <ai_platform_observer_unregister_s+0xd4>
 800e28a:	4b15      	ldr	r3, [pc, #84]	; (800e2e0 <ai_platform_observer_unregister_s+0x130>)
 800e28c:	6013      	str	r3, [r2, #0]
 800e28e:	4b15      	ldr	r3, [pc, #84]	; (800e2e4 <ai_platform_observer_unregister_s+0x134>)
 800e290:	6812      	ldr	r2, [r2, #0]
 800e292:	429a      	cmp	r2, r3
 800e294:	d0e7      	beq.n	800e266 <ai_platform_observer_unregister_s+0xb6>
 800e296:	e7fe      	b.n	800e296 <ai_platform_observer_unregister_s+0xe6>
 800e298:	4a13      	ldr	r2, [pc, #76]	; (800e2e8 <ai_platform_observer_unregister_s+0x138>)
 800e29a:	2301      	movs	r3, #1
 800e29c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800e2a0:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d1fb      	bne.n	800e2a0 <ai_platform_observer_unregister_s+0xf0>
 800e2a8:	4b0d      	ldr	r3, [pc, #52]	; (800e2e0 <ai_platform_observer_unregister_s+0x130>)
 800e2aa:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800e2ae:	4b0d      	ldr	r3, [pc, #52]	; (800e2e4 <ai_platform_observer_unregister_s+0x134>)
 800e2b0:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800e2b4:	429a      	cmp	r2, r3
 800e2b6:	d0d6      	beq.n	800e266 <ai_platform_observer_unregister_s+0xb6>
 800e2b8:	e7fe      	b.n	800e2b8 <ai_platform_observer_unregister_s+0x108>
 800e2ba:	b134      	cbz	r4, 800e2ca <ai_platform_observer_unregister_s+0x11a>
 800e2bc:	2110      	movs	r1, #16
 800e2be:	2211      	movs	r2, #17
 800e2c0:	1860      	adds	r0, r4, r1
 800e2c2:	f000 f81b 	bl	800e2fc <core_set_error>
 800e2c6:	2000      	movs	r0, #0
 800e2c8:	bd38      	pop	{r3, r4, r5, pc}
 800e2ca:	4620      	mov	r0, r4
 800e2cc:	bd38      	pop	{r3, r4, r5, pc}
 800e2ce:	bf00      	nop
 800e2d0:	a1c00100 	.word	0xa1c00100
 800e2d4:	e0042000 	.word	0xe0042000
 800e2d8:	5c001000 	.word	0x5c001000
 800e2dc:	40023000 	.word	0x40023000
 800e2e0:	f407a5c2 	.word	0xf407a5c2
 800e2e4:	b5e8b5cd 	.word	0xb5e8b5cd
 800e2e8:	58024000 	.word	0x58024000

0800e2ec <core_init>:
 800e2ec:	2001      	movs	r0, #1
 800e2ee:	4770      	bx	lr

0800e2f0 <core_get_error>:
 800e2f0:	4603      	mov	r3, r0
 800e2f2:	2200      	movs	r2, #0
 800e2f4:	6800      	ldr	r0, [r0, #0]
 800e2f6:	601a      	str	r2, [r3, #0]
 800e2f8:	4770      	bx	lr
 800e2fa:	bf00      	nop

0800e2fc <core_set_error>:
 800e2fc:	4603      	mov	r3, r0
 800e2fe:	7800      	ldrb	r0, [r0, #0]
 800e300:	b108      	cbz	r0, 800e306 <core_set_error+0xa>
 800e302:	2000      	movs	r0, #0
 800e304:	4770      	bx	lr
 800e306:	7019      	strb	r1, [r3, #0]
 800e308:	2001      	movs	r0, #1
 800e30a:	6819      	ldr	r1, [r3, #0]
 800e30c:	f362 211f 	bfi	r1, r2, #8, #24
 800e310:	6019      	str	r1, [r3, #0]
 800e312:	4770      	bx	lr

0800e314 <_array_handle_get_as_float>:
 800e314:	b508      	push	{r3, lr}
 800e316:	4b33      	ldr	r3, [pc, #204]	; (800e3e4 <_array_handle_get_as_float+0xd0>)
 800e318:	4299      	cmp	r1, r3
 800e31a:	d057      	beq.n	800e3cc <_array_handle_get_as_float+0xb8>
 800e31c:	dc21      	bgt.n	800e362 <_array_handle_get_as_float+0x4e>
 800e31e:	4b32      	ldr	r3, [pc, #200]	; (800e3e8 <_array_handle_get_as_float+0xd4>)
 800e320:	4299      	cmp	r1, r3
 800e322:	d05a      	beq.n	800e3da <_array_handle_get_as_float+0xc6>
 800e324:	dd0f      	ble.n	800e346 <_array_handle_get_as_float+0x32>
 800e326:	4b31      	ldr	r3, [pc, #196]	; (800e3ec <_array_handle_get_as_float+0xd8>)
 800e328:	4299      	cmp	r1, r3
 800e32a:	d034      	beq.n	800e396 <_array_handle_get_as_float+0x82>
 800e32c:	f503 33f2 	add.w	r3, r3, #123904	; 0x1e400
 800e330:	4299      	cmp	r1, r3
 800e332:	d12d      	bne.n	800e390 <_array_handle_get_as_float+0x7c>
 800e334:	7803      	ldrb	r3, [r0, #0]
 800e336:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800e33a:	eddf 7a2d 	vldr	s15, [pc, #180]	; 800e3f0 <_array_handle_get_as_float+0xdc>
 800e33e:	2b00      	cmp	r3, #0
 800e340:	fe07 0a80 	vseleq.f32	s0, s15, s0
 800e344:	bd08      	pop	{r3, pc}
 800e346:	f5a3 6340 	sub.w	r3, r3, #3072	; 0xc00
 800e34a:	4299      	cmp	r1, r3
 800e34c:	d02a      	beq.n	800e3a4 <_array_handle_get_as_float+0x90>
 800e34e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e352:	4299      	cmp	r1, r3
 800e354:	d11c      	bne.n	800e390 <_array_handle_get_as_float+0x7c>
 800e356:	8803      	ldrh	r3, [r0, #0]
 800e358:	ee00 3a10 	vmov	s0, r3
 800e35c:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 800e360:	bd08      	pop	{r3, pc}
 800e362:	4b24      	ldr	r3, [pc, #144]	; (800e3f4 <_array_handle_get_as_float+0xe0>)
 800e364:	4299      	cmp	r1, r3
 800e366:	d023      	beq.n	800e3b0 <_array_handle_get_as_float+0x9c>
 800e368:	dd05      	ble.n	800e376 <_array_handle_get_as_float+0x62>
 800e36a:	4b23      	ldr	r3, [pc, #140]	; (800e3f8 <_array_handle_get_as_float+0xe4>)
 800e36c:	4299      	cmp	r1, r3
 800e36e:	d10f      	bne.n	800e390 <_array_handle_get_as_float+0x7c>
 800e370:	ed90 0a00 	vldr	s0, [r0]
 800e374:	bd08      	pop	{r3, pc}
 800e376:	f5a3 53c0 	sub.w	r3, r3, #6144	; 0x1800
 800e37a:	4299      	cmp	r1, r3
 800e37c:	d01f      	beq.n	800e3be <_array_handle_get_as_float+0xaa>
 800e37e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e382:	4299      	cmp	r1, r3
 800e384:	d104      	bne.n	800e390 <_array_handle_get_as_float+0x7c>
 800e386:	ed90 0a00 	vldr	s0, [r0]
 800e38a:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800e38e:	bd08      	pop	{r3, pc}
 800e390:	ed9f 0a17 	vldr	s0, [pc, #92]	; 800e3f0 <_array_handle_get_as_float+0xdc>
 800e394:	bd08      	pop	{r3, pc}
 800e396:	e9d0 0100 	ldrd	r0, r1, [r0]
 800e39a:	f7f2 f8c1 	bl	8000520 <__aeabi_ul2f>
 800e39e:	ee00 0a10 	vmov	s0, r0
 800e3a2:	bd08      	pop	{r3, pc}
 800e3a4:	7803      	ldrb	r3, [r0, #0]
 800e3a6:	ee00 3a10 	vmov	s0, r3
 800e3aa:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 800e3ae:	bd08      	pop	{r3, pc}
 800e3b0:	e9d0 0100 	ldrd	r0, r1, [r0]
 800e3b4:	f7f2 f8bc 	bl	8000530 <__aeabi_l2f>
 800e3b8:	ee00 0a10 	vmov	s0, r0
 800e3bc:	bd08      	pop	{r3, pc}
 800e3be:	f9b0 3000 	ldrsh.w	r3, [r0]
 800e3c2:	ee00 3a10 	vmov	s0, r3
 800e3c6:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800e3ca:	bd08      	pop	{r3, pc}
 800e3cc:	f990 3000 	ldrsb.w	r3, [r0]
 800e3d0:	ee00 3a10 	vmov	s0, r3
 800e3d4:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800e3d8:	bd08      	pop	{r3, pc}
 800e3da:	ed90 0a00 	vldr	s0, [r0]
 800e3de:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 800e3e2:	bd08      	pop	{r3, pc}
 800e3e4:	00840440 	.word	0x00840440
 800e3e8:	00041040 	.word	0x00041040
 800e3ec:	00042040 	.word	0x00042040
 800e3f0:	00000000 	.word	0x00000000
 800e3f4:	00842040 	.word	0x00842040
 800e3f8:	01821040 	.word	0x01821040

0800e3fc <forward_cast>:
 800e3fc:	6983      	ldr	r3, [r0, #24]
 800e3fe:	881a      	ldrh	r2, [r3, #0]
 800e400:	2a00      	cmp	r2, #0
 800e402:	f000 815c 	beq.w	800e6be <forward_cast+0x2c2>
 800e406:	6859      	ldr	r1, [r3, #4]
 800e408:	684b      	ldr	r3, [r1, #4]
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	f000 81bb 	beq.w	800e786 <forward_cast+0x38a>
 800e410:	2a01      	cmp	r2, #1
 800e412:	681b      	ldr	r3, [r3, #0]
 800e414:	f003 871c 	beq.w	8012250 <forward_cast+0x3e54>
 800e418:	690a      	ldr	r2, [r1, #16]
 800e41a:	2a00      	cmp	r2, #0
 800e41c:	f003 871b 	beq.w	8012256 <forward_cast+0x3e5a>
 800e420:	6812      	ldr	r2, [r2, #0]
 800e422:	b103      	cbz	r3, 800e426 <forward_cast+0x2a>
 800e424:	699b      	ldr	r3, [r3, #24]
 800e426:	2a00      	cmp	r2, #0
 800e428:	f003 8715 	beq.w	8012256 <forward_cast+0x3e5a>
 800e42c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e430:	ed2d 8b02 	vpush	{d8}
 800e434:	6996      	ldr	r6, [r2, #24]
 800e436:	b083      	sub	sp, #12
 800e438:	681a      	ldr	r2, [r3, #0]
 800e43a:	69c7      	ldr	r7, [r0, #28]
 800e43c:	f022 447e 	bic.w	r4, r2, #4261412864	; 0xfe000000
 800e440:	4610      	mov	r0, r2
 800e442:	6832      	ldr	r2, [r6, #0]
 800e444:	f027 477e 	bic.w	r7, r7, #4261412864	; 0xfe000000
 800e448:	f8df 82cc 	ldr.w	r8, [pc, #716]	; 800e718 <forward_cast+0x31c>
 800e44c:	f3c4 2983 	ubfx	r9, r4, #10, #4
 800e450:	f022 4b7e 	bic.w	fp, r2, #4261412864	; 0xfe000000
 800e454:	6859      	ldr	r1, [r3, #4]
 800e456:	68dd      	ldr	r5, [r3, #12]
 800e458:	f7fd fb6e 	bl	800bb38 <ai_array_get_byte_size>
 800e45c:	f3cb 2383 	ubfx	r3, fp, #10, #4
 800e460:	4547      	cmp	r7, r8
 800e462:	68f6      	ldr	r6, [r6, #12]
 800e464:	eb05 0a00 	add.w	sl, r5, r0
 800e468:	9300      	str	r3, [sp, #0]
 800e46a:	f000 81e2 	beq.w	800e832 <forward_cast+0x436>
 800e46e:	f300 8083 	bgt.w	800e578 <forward_cast+0x17c>
 800e472:	4ba2      	ldr	r3, [pc, #648]	; (800e6fc <forward_cast+0x300>)
 800e474:	429f      	cmp	r7, r3
 800e476:	f000 8227 	beq.w	800e8c8 <forward_cast+0x4cc>
 800e47a:	dd2c      	ble.n	800e4d6 <forward_cast+0xda>
 800e47c:	4aa0      	ldr	r2, [pc, #640]	; (800e700 <forward_cast+0x304>)
 800e47e:	4297      	cmp	r7, r2
 800e480:	d124      	bne.n	800e4cc <forward_cast+0xd0>
 800e482:	45c3      	cmp	fp, r8
 800e484:	f001 8052 	beq.w	800f52c <forward_cast+0x1130>
 800e488:	f300 85f2 	bgt.w	800f070 <forward_cast+0xc74>
 800e48c:	459b      	cmp	fp, r3
 800e48e:	f001 85a4 	beq.w	800ffda <forward_cast+0x1bde>
 800e492:	f300 85d3 	bgt.w	800f03c <forward_cast+0xc40>
 800e496:	4b9b      	ldr	r3, [pc, #620]	; (800e704 <forward_cast+0x308>)
 800e498:	459b      	cmp	fp, r3
 800e49a:	f002 8256 	beq.w	801094a <forward_cast+0x254e>
 800e49e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e4a2:	459b      	cmp	fp, r3
 800e4a4:	d112      	bne.n	800e4cc <forward_cast+0xd0>
 800e4a6:	4555      	cmp	r5, sl
 800e4a8:	d210      	bcs.n	800e4cc <forward_cast+0xd0>
 800e4aa:	9f00      	ldr	r7, [sp, #0]
 800e4ac:	4628      	mov	r0, r5
 800e4ae:	4621      	mov	r1, r4
 800e4b0:	f7ff ff30 	bl	800e314 <_array_handle_get_as_float>
 800e4b4:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800e4b8:	444d      	add	r5, r9
 800e4ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4be:	bf14      	ite	ne
 800e4c0:	2301      	movne	r3, #1
 800e4c2:	2300      	moveq	r3, #0
 800e4c4:	45aa      	cmp	sl, r5
 800e4c6:	8033      	strh	r3, [r6, #0]
 800e4c8:	443e      	add	r6, r7
 800e4ca:	d8ef      	bhi.n	800e4ac <forward_cast+0xb0>
 800e4cc:	b003      	add	sp, #12
 800e4ce:	ecbd 8b02 	vpop	{d8}
 800e4d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4d6:	4a8b      	ldr	r2, [pc, #556]	; (800e704 <forward_cast+0x308>)
 800e4d8:	4297      	cmp	r7, r2
 800e4da:	f000 80f2 	beq.w	800e6c2 <forward_cast+0x2c6>
 800e4de:	498a      	ldr	r1, [pc, #552]	; (800e708 <forward_cast+0x30c>)
 800e4e0:	428f      	cmp	r7, r1
 800e4e2:	d1f3      	bne.n	800e4cc <forward_cast+0xd0>
 800e4e4:	45c3      	cmp	fp, r8
 800e4e6:	f000 877e 	beq.w	800f3e6 <forward_cast+0xfea>
 800e4ea:	f300 86e5 	bgt.w	800f2b8 <forward_cast+0xebc>
 800e4ee:	459b      	cmp	fp, r3
 800e4f0:	f001 877e 	beq.w	80103f0 <forward_cast+0x1ff4>
 800e4f4:	4f81      	ldr	r7, [pc, #516]	; (800e6fc <forward_cast+0x300>)
 800e4f6:	45bb      	cmp	fp, r7
 800e4f8:	f300 8552 	bgt.w	800efa0 <forward_cast+0xba4>
 800e4fc:	f8df 8204 	ldr.w	r8, [pc, #516]	; 800e704 <forward_cast+0x308>
 800e500:	45c3      	cmp	fp, r8
 800e502:	f001 8727 	beq.w	8010354 <forward_cast+0x1f58>
 800e506:	4b80      	ldr	r3, [pc, #512]	; (800e708 <forward_cast+0x30c>)
 800e508:	459b      	cmp	fp, r3
 800e50a:	d1df      	bne.n	800e4cc <forward_cast+0xd0>
 800e50c:	4555      	cmp	r5, sl
 800e50e:	d2dd      	bcs.n	800e4cc <forward_cast+0xd0>
 800e510:	f8df b20c 	ldr.w	fp, [pc, #524]	; 800e720 <forward_cast+0x324>
 800e514:	4b7d      	ldr	r3, [pc, #500]	; (800e70c <forward_cast+0x310>)
 800e516:	4a7e      	ldr	r2, [pc, #504]	; (800e710 <forward_cast+0x314>)
 800e518:	e019      	b.n	800e54e <forward_cast+0x152>
 800e51a:	42bc      	cmp	r4, r7
 800e51c:	f003 8425 	beq.w	8011d6a <forward_cast+0x396e>
 800e520:	f341 80bc 	ble.w	800f69c <forward_cast+0x12a0>
 800e524:	497b      	ldr	r1, [pc, #492]	; (800e714 <forward_cast+0x318>)
 800e526:	428c      	cmp	r4, r1
 800e528:	f003 83e9 	beq.w	8011cfe <forward_cast+0x3902>
 800e52c:	f501 31f2 	add.w	r1, r1, #123904	; 0x1e400
 800e530:	428c      	cmp	r4, r1
 800e532:	f041 83a0 	bne.w	800fc76 <forward_cast+0x187a>
 800e536:	7828      	ldrb	r0, [r5, #0]
 800e538:	3800      	subs	r0, #0
 800e53a:	bf18      	it	ne
 800e53c:	2001      	movne	r0, #1
 800e53e:	f380 0010 	usat	r0, #16, r0
 800e542:	444d      	add	r5, r9
 800e544:	9900      	ldr	r1, [sp, #0]
 800e546:	8030      	strh	r0, [r6, #0]
 800e548:	45aa      	cmp	sl, r5
 800e54a:	440e      	add	r6, r1
 800e54c:	d9be      	bls.n	800e4cc <forward_cast+0xd0>
 800e54e:	4972      	ldr	r1, [pc, #456]	; (800e718 <forward_cast+0x31c>)
 800e550:	428c      	cmp	r4, r1
 800e552:	f003 82d9 	beq.w	8011b08 <forward_cast+0x370c>
 800e556:	dde0      	ble.n	800e51a <forward_cast+0x11e>
 800e558:	4970      	ldr	r1, [pc, #448]	; (800e71c <forward_cast+0x320>)
 800e55a:	428c      	cmp	r4, r1
 800e55c:	f002 87aa 	beq.w	80114b4 <forward_cast+0x30b8>
 800e560:	f341 82c1 	ble.w	800fae6 <forward_cast+0x16ea>
 800e564:	455c      	cmp	r4, fp
 800e566:	f041 8386 	bne.w	800fc76 <forward_cast+0x187a>
 800e56a:	edd5 7a00 	vldr	s15, [r5]
 800e56e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e572:	ee17 0a90 	vmov	r0, s15
 800e576:	e7e2      	b.n	800e53e <forward_cast+0x142>
 800e578:	4b65      	ldr	r3, [pc, #404]	; (800e710 <forward_cast+0x314>)
 800e57a:	429f      	cmp	r7, r3
 800e57c:	f000 810c 	beq.w	800e798 <forward_cast+0x39c>
 800e580:	4a67      	ldr	r2, [pc, #412]	; (800e720 <forward_cast+0x324>)
 800e582:	4297      	cmp	r7, r2
 800e584:	d149      	bne.n	800e61a <forward_cast+0x21e>
 800e586:	45c3      	cmp	fp, r8
 800e588:	f000 8763 	beq.w	800f452 <forward_cast+0x1056>
 800e58c:	f300 82cc 	bgt.w	800eb28 <forward_cast+0x72c>
 800e590:	4a5a      	ldr	r2, [pc, #360]	; (800e6fc <forward_cast+0x300>)
 800e592:	4593      	cmp	fp, r2
 800e594:	f001 8478 	beq.w	800fe88 <forward_cast+0x1a8c>
 800e598:	f300 82b0 	bgt.w	800eafc <forward_cast+0x700>
 800e59c:	4b59      	ldr	r3, [pc, #356]	; (800e704 <forward_cast+0x308>)
 800e59e:	459b      	cmp	fp, r3
 800e5a0:	f002 833e 	beq.w	8010c20 <forward_cast+0x2824>
 800e5a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e5a8:	459b      	cmp	fp, r3
 800e5aa:	d18f      	bne.n	800e4cc <forward_cast+0xd0>
 800e5ac:	4555      	cmp	r5, sl
 800e5ae:	d28d      	bcs.n	800e4cc <forward_cast+0xd0>
 800e5b0:	f8df 816c 	ldr.w	r8, [pc, #364]	; 800e720 <forward_cast+0x324>
 800e5b4:	4f55      	ldr	r7, [pc, #340]	; (800e70c <forward_cast+0x310>)
 800e5b6:	f8df b158 	ldr.w	fp, [pc, #344]	; 800e710 <forward_cast+0x314>
 800e5ba:	4b50      	ldr	r3, [pc, #320]	; (800e6fc <forward_cast+0x300>)
 800e5bc:	4a55      	ldr	r2, [pc, #340]	; (800e714 <forward_cast+0x318>)
 800e5be:	e016      	b.n	800e5ee <forward_cast+0x1f2>
 800e5c0:	429c      	cmp	r4, r3
 800e5c2:	f002 853b 	beq.w	801103c <forward_cast+0x2c40>
 800e5c6:	f341 8185 	ble.w	800f8d4 <forward_cast+0x14d8>
 800e5ca:	4294      	cmp	r4, r2
 800e5cc:	f003 824e 	beq.w	8011a6c <forward_cast+0x3670>
 800e5d0:	494b      	ldr	r1, [pc, #300]	; (800e700 <forward_cast+0x304>)
 800e5d2:	428c      	cmp	r4, r1
 800e5d4:	f041 8369 	bne.w	800fcaa <forward_cast+0x18ae>
 800e5d8:	7829      	ldrb	r1, [r5, #0]
 800e5da:	3900      	subs	r1, #0
 800e5dc:	bf18      	it	ne
 800e5de:	2101      	movne	r1, #1
 800e5e0:	444d      	add	r5, r9
 800e5e2:	8031      	strh	r1, [r6, #0]
 800e5e4:	9900      	ldr	r1, [sp, #0]
 800e5e6:	45aa      	cmp	sl, r5
 800e5e8:	440e      	add	r6, r1
 800e5ea:	f67f af6f 	bls.w	800e4cc <forward_cast+0xd0>
 800e5ee:	494a      	ldr	r1, [pc, #296]	; (800e718 <forward_cast+0x31c>)
 800e5f0:	428c      	cmp	r4, r1
 800e5f2:	f002 869f 	beq.w	8011334 <forward_cast+0x2f38>
 800e5f6:	dde3      	ble.n	800e5c0 <forward_cast+0x1c4>
 800e5f8:	4948      	ldr	r1, [pc, #288]	; (800e71c <forward_cast+0x320>)
 800e5fa:	428c      	cmp	r4, r1
 800e5fc:	f002 8768 	beq.w	80114d0 <forward_cast+0x30d4>
 800e600:	f341 8100 	ble.w	800f804 <forward_cast+0x1408>
 800e604:	4544      	cmp	r4, r8
 800e606:	f041 8350 	bne.w	800fcaa <forward_cast+0x18ae>
 800e60a:	edd5 7a00 	vldr	s15, [r5]
 800e60e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e612:	ee17 1a90 	vmov	r1, s15
 800e616:	b289      	uxth	r1, r1
 800e618:	e7e2      	b.n	800e5e0 <forward_cast+0x1e4>
 800e61a:	493c      	ldr	r1, [pc, #240]	; (800e70c <forward_cast+0x310>)
 800e61c:	428f      	cmp	r7, r1
 800e61e:	f47f af55 	bne.w	800e4cc <forward_cast+0xd0>
 800e622:	45c3      	cmp	fp, r8
 800e624:	f000 874b 	beq.w	800f4be <forward_cast+0x10c2>
 800e628:	f300 8544 	bgt.w	800f0b4 <forward_cast+0xcb8>
 800e62c:	4b33      	ldr	r3, [pc, #204]	; (800e6fc <forward_cast+0x300>)
 800e62e:	459b      	cmp	fp, r3
 800e630:	f001 863f 	beq.w	80102b2 <forward_cast+0x1eb6>
 800e634:	f300 8227 	bgt.w	800ea86 <forward_cast+0x68a>
 800e638:	4f32      	ldr	r7, [pc, #200]	; (800e704 <forward_cast+0x308>)
 800e63a:	45bb      	cmp	fp, r7
 800e63c:	f001 85d7 	beq.w	80101ee <forward_cast+0x1df2>
 800e640:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 800e644:	459b      	cmp	fp, r3
 800e646:	f47f af41 	bne.w	800e4cc <forward_cast+0xd0>
 800e64a:	4555      	cmp	r5, sl
 800e64c:	f4bf af3e 	bcs.w	800e4cc <forward_cast+0xd0>
 800e650:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 800e720 <forward_cast+0x324>
 800e654:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 800e70c <forward_cast+0x310>
 800e658:	4b2d      	ldr	r3, [pc, #180]	; (800e710 <forward_cast+0x314>)
 800e65a:	4a28      	ldr	r2, [pc, #160]	; (800e6fc <forward_cast+0x300>)
 800e65c:	e01a      	b.n	800e694 <forward_cast+0x298>
 800e65e:	4294      	cmp	r4, r2
 800e660:	f002 85a1 	beq.w	80111a6 <forward_cast+0x2daa>
 800e664:	f341 80c4 	ble.w	800f7f0 <forward_cast+0x13f4>
 800e668:	492a      	ldr	r1, [pc, #168]	; (800e714 <forward_cast+0x318>)
 800e66a:	428c      	cmp	r4, r1
 800e66c:	f002 858d 	beq.w	801118a <forward_cast+0x2d8e>
 800e670:	f501 31f2 	add.w	r1, r1, #123904	; 0x1e400
 800e674:	428c      	cmp	r4, r1
 800e676:	f041 82ca 	bne.w	800fc0e <forward_cast+0x1812>
 800e67a:	7828      	ldrb	r0, [r5, #0]
 800e67c:	3800      	subs	r0, #0
 800e67e:	bf18      	it	ne
 800e680:	2001      	movne	r0, #1
 800e682:	f300 000f 	ssat	r0, #16, r0
 800e686:	444d      	add	r5, r9
 800e688:	9900      	ldr	r1, [sp, #0]
 800e68a:	8030      	strh	r0, [r6, #0]
 800e68c:	45aa      	cmp	sl, r5
 800e68e:	440e      	add	r6, r1
 800e690:	f67f af1c 	bls.w	800e4cc <forward_cast+0xd0>
 800e694:	4920      	ldr	r1, [pc, #128]	; (800e718 <forward_cast+0x31c>)
 800e696:	428c      	cmp	r4, r1
 800e698:	f002 8557 	beq.w	801114a <forward_cast+0x2d4e>
 800e69c:	dddf      	ble.n	800e65e <forward_cast+0x262>
 800e69e:	491f      	ldr	r1, [pc, #124]	; (800e71c <forward_cast+0x320>)
 800e6a0:	428c      	cmp	r4, r1
 800e6a2:	f003 84ba 	beq.w	801201a <forward_cast+0x3c1e>
 800e6a6:	f341 8093 	ble.w	800f7d0 <forward_cast+0x13d4>
 800e6aa:	4544      	cmp	r4, r8
 800e6ac:	f041 82af 	bne.w	800fc0e <forward_cast+0x1812>
 800e6b0:	edd5 7a00 	vldr	s15, [r5]
 800e6b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e6b8:	ee17 0a90 	vmov	r0, s15
 800e6bc:	e7e1      	b.n	800e682 <forward_cast+0x286>
 800e6be:	6853      	ldr	r3, [r2, #4]
 800e6c0:	deff      	udf	#255	; 0xff
 800e6c2:	45c3      	cmp	fp, r8
 800e6c4:	f001 8545 	beq.w	8010152 <forward_cast+0x1d56>
 800e6c8:	f300 8446 	bgt.w	800ef58 <forward_cast+0xb5c>
 800e6cc:	459b      	cmp	fp, r3
 800e6ce:	f001 84ef 	beq.w	80100b0 <forward_cast+0x1cb4>
 800e6d2:	f300 8428 	bgt.w	800ef26 <forward_cast+0xb2a>
 800e6d6:	4f0b      	ldr	r7, [pc, #44]	; (800e704 <forward_cast+0x308>)
 800e6d8:	45bb      	cmp	fp, r7
 800e6da:	f001 84d4 	beq.w	8010086 <forward_cast+0x1c8a>
 800e6de:	4b0a      	ldr	r3, [pc, #40]	; (800e708 <forward_cast+0x30c>)
 800e6e0:	459b      	cmp	fp, r3
 800e6e2:	f47f aef3 	bne.w	800e4cc <forward_cast+0xd0>
 800e6e6:	4555      	cmp	r5, sl
 800e6e8:	f4bf aef0 	bcs.w	800e4cc <forward_cast+0xd0>
 800e6ec:	f8df 8030 	ldr.w	r8, [pc, #48]	; 800e720 <forward_cast+0x324>
 800e6f0:	f8df b018 	ldr.w	fp, [pc, #24]	; 800e70c <forward_cast+0x310>
 800e6f4:	4b06      	ldr	r3, [pc, #24]	; (800e710 <forward_cast+0x314>)
 800e6f6:	4a01      	ldr	r2, [pc, #4]	; (800e6fc <forward_cast+0x300>)
 800e6f8:	e030      	b.n	800e75c <forward_cast+0x360>
 800e6fa:	bf00      	nop
 800e6fc:	00041040 	.word	0x00041040
 800e700:	00060440 	.word	0x00060440
 800e704:	00040440 	.word	0x00040440
 800e708:	00040840 	.word	0x00040840
 800e70c:	00840840 	.word	0x00840840
 800e710:	00841040 	.word	0x00841040
 800e714:	00042040 	.word	0x00042040
 800e718:	00840440 	.word	0x00840440
 800e71c:	00842040 	.word	0x00842040
 800e720:	01821040 	.word	0x01821040
 800e724:	4294      	cmp	r4, r2
 800e726:	f003 80b9 	beq.w	801189c <forward_cast+0x34a0>
 800e72a:	f340 878e 	ble.w	800f64a <forward_cast+0x124e>
 800e72e:	49b2      	ldr	r1, [pc, #712]	; (800e9f8 <forward_cast+0x5fc>)
 800e730:	428c      	cmp	r4, r1
 800e732:	f003 80a5 	beq.w	8011880 <forward_cast+0x3484>
 800e736:	f501 31f2 	add.w	r1, r1, #123904	; 0x1e400
 800e73a:	428c      	cmp	r4, r1
 800e73c:	f041 8292 	bne.w	800fc64 <forward_cast+0x1868>
 800e740:	7828      	ldrb	r0, [r5, #0]
 800e742:	3800      	subs	r0, #0
 800e744:	bf18      	it	ne
 800e746:	2001      	movne	r0, #1
 800e748:	f380 0008 	usat	r0, #8, r0
 800e74c:	444d      	add	r5, r9
 800e74e:	b2c0      	uxtb	r0, r0
 800e750:	9900      	ldr	r1, [sp, #0]
 800e752:	45aa      	cmp	sl, r5
 800e754:	8030      	strh	r0, [r6, #0]
 800e756:	440e      	add	r6, r1
 800e758:	f67f aeb8 	bls.w	800e4cc <forward_cast+0xd0>
 800e75c:	49a7      	ldr	r1, [pc, #668]	; (800e9fc <forward_cast+0x600>)
 800e75e:	428c      	cmp	r4, r1
 800e760:	f003 8124 	beq.w	80119ac <forward_cast+0x35b0>
 800e764:	ddde      	ble.n	800e724 <forward_cast+0x328>
 800e766:	49a6      	ldr	r1, [pc, #664]	; (800ea00 <forward_cast+0x604>)
 800e768:	428c      	cmp	r4, r1
 800e76a:	f002 86f0 	beq.w	801154e <forward_cast+0x3152>
 800e76e:	f341 80e8 	ble.w	800f942 <forward_cast+0x1546>
 800e772:	4544      	cmp	r4, r8
 800e774:	f041 8276 	bne.w	800fc64 <forward_cast+0x1868>
 800e778:	edd5 7a00 	vldr	s15, [r5]
 800e77c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e780:	ee17 0a90 	vmov	r0, s15
 800e784:	e7e0      	b.n	800e748 <forward_cast+0x34c>
 800e786:	2a01      	cmp	r2, #1
 800e788:	f003 8562 	beq.w	8012250 <forward_cast+0x3e54>
 800e78c:	690a      	ldr	r2, [r1, #16]
 800e78e:	2a00      	cmp	r2, #0
 800e790:	f003 8561 	beq.w	8012256 <forward_cast+0x3e5a>
 800e794:	6812      	ldr	r2, [r2, #0]
 800e796:	e646      	b.n	800e426 <forward_cast+0x2a>
 800e798:	45c3      	cmp	fp, r8
 800e79a:	f002 8292 	beq.w	8010cc2 <forward_cast+0x28c6>
 800e79e:	f300 82cf 	bgt.w	800ed40 <forward_cast+0x944>
 800e7a2:	4b98      	ldr	r3, [pc, #608]	; (800ea04 <forward_cast+0x608>)
 800e7a4:	459b      	cmp	fp, r3
 800e7a6:	f001 87da 	beq.w	801075e <forward_cast+0x2362>
 800e7aa:	f300 81f9 	bgt.w	800eba0 <forward_cast+0x7a4>
 800e7ae:	f5a3 6340 	sub.w	r3, r3, #3072	; 0xc00
 800e7b2:	459b      	cmp	fp, r3
 800e7b4:	f001 8782 	beq.w	80106bc <forward_cast+0x22c0>
 800e7b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e7bc:	459b      	cmp	fp, r3
 800e7be:	f47f ae85 	bne.w	800e4cc <forward_cast+0xd0>
 800e7c2:	4555      	cmp	r5, sl
 800e7c4:	f4bf ae82 	bcs.w	800e4cc <forward_cast+0xd0>
 800e7c8:	f8df 8250 	ldr.w	r8, [pc, #592]	; 800ea1c <forward_cast+0x620>
 800e7cc:	4f8e      	ldr	r7, [pc, #568]	; (800ea08 <forward_cast+0x60c>)
 800e7ce:	f8df b248 	ldr.w	fp, [pc, #584]	; 800ea18 <forward_cast+0x61c>
 800e7d2:	4b8c      	ldr	r3, [pc, #560]	; (800ea04 <forward_cast+0x608>)
 800e7d4:	4a88      	ldr	r2, [pc, #544]	; (800e9f8 <forward_cast+0x5fc>)
 800e7d6:	e016      	b.n	800e806 <forward_cast+0x40a>
 800e7d8:	429c      	cmp	r4, r3
 800e7da:	f003 824c 	beq.w	8011c76 <forward_cast+0x387a>
 800e7de:	f340 878e 	ble.w	800f6fe <forward_cast+0x1302>
 800e7e2:	4294      	cmp	r4, r2
 800e7e4:	f003 81f4 	beq.w	8011bd0 <forward_cast+0x37d4>
 800e7e8:	4988      	ldr	r1, [pc, #544]	; (800ea0c <forward_cast+0x610>)
 800e7ea:	428c      	cmp	r4, r1
 800e7ec:	f041 8249 	bne.w	800fc82 <forward_cast+0x1886>
 800e7f0:	7829      	ldrb	r1, [r5, #0]
 800e7f2:	3900      	subs	r1, #0
 800e7f4:	bf18      	it	ne
 800e7f6:	2101      	movne	r1, #1
 800e7f8:	444d      	add	r5, r9
 800e7fa:	8031      	strh	r1, [r6, #0]
 800e7fc:	9900      	ldr	r1, [sp, #0]
 800e7fe:	45aa      	cmp	sl, r5
 800e800:	440e      	add	r6, r1
 800e802:	f67f ae63 	bls.w	800e4cc <forward_cast+0xd0>
 800e806:	497d      	ldr	r1, [pc, #500]	; (800e9fc <forward_cast+0x600>)
 800e808:	428c      	cmp	r4, r1
 800e80a:	f002 876b 	beq.w	80116e4 <forward_cast+0x32e8>
 800e80e:	dde3      	ble.n	800e7d8 <forward_cast+0x3dc>
 800e810:	497b      	ldr	r1, [pc, #492]	; (800ea00 <forward_cast+0x604>)
 800e812:	428c      	cmp	r4, r1
 800e814:	f003 8443 	beq.w	801209e <forward_cast+0x3ca2>
 800e818:	f341 8154 	ble.w	800fac4 <forward_cast+0x16c8>
 800e81c:	4544      	cmp	r4, r8
 800e81e:	f041 8230 	bne.w	800fc82 <forward_cast+0x1886>
 800e822:	edd5 7a00 	vldr	s15, [r5]
 800e826:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e82a:	ee17 1a90 	vmov	r1, s15
 800e82e:	b289      	uxth	r1, r1
 800e830:	e7e2      	b.n	800e7f8 <forward_cast+0x3fc>
 800e832:	45bb      	cmp	fp, r7
 800e834:	f001 82d8 	beq.w	800fde8 <forward_cast+0x19ec>
 800e838:	f300 80ce 	bgt.w	800e9d8 <forward_cast+0x5dc>
 800e83c:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 800ea04 <forward_cast+0x608>
 800e840:	45c3      	cmp	fp, r8
 800e842:	f001 8689 	beq.w	8010558 <forward_cast+0x215c>
 800e846:	f300 808a 	bgt.w	800e95e <forward_cast+0x562>
 800e84a:	4a71      	ldr	r2, [pc, #452]	; (800ea10 <forward_cast+0x614>)
 800e84c:	4593      	cmp	fp, r2
 800e84e:	f001 8620 	beq.w	8010492 <forward_cast+0x2096>
 800e852:	4b70      	ldr	r3, [pc, #448]	; (800ea14 <forward_cast+0x618>)
 800e854:	459b      	cmp	fp, r3
 800e856:	f47f ae39 	bne.w	800e4cc <forward_cast+0xd0>
 800e85a:	4555      	cmp	r5, sl
 800e85c:	f4bf ae36 	bcs.w	800e4cc <forward_cast+0xd0>
 800e860:	f8df b1b8 	ldr.w	fp, [pc, #440]	; 800ea1c <forward_cast+0x620>
 800e864:	4b68      	ldr	r3, [pc, #416]	; (800ea08 <forward_cast+0x60c>)
 800e866:	e01b      	b.n	800e8a0 <forward_cast+0x4a4>
 800e868:	4544      	cmp	r4, r8
 800e86a:	f003 81f7 	beq.w	8011c5c <forward_cast+0x3860>
 800e86e:	f340 875f 	ble.w	800f730 <forward_cast+0x1334>
 800e872:	4961      	ldr	r1, [pc, #388]	; (800e9f8 <forward_cast+0x5fc>)
 800e874:	428c      	cmp	r4, r1
 800e876:	f003 81e3 	beq.w	8011c40 <forward_cast+0x3844>
 800e87a:	f501 31f2 	add.w	r1, r1, #123904	; 0x1e400
 800e87e:	428c      	cmp	r4, r1
 800e880:	f041 820d 	bne.w	800fc9e <forward_cast+0x18a2>
 800e884:	7828      	ldrb	r0, [r5, #0]
 800e886:	3800      	subs	r0, #0
 800e888:	bf18      	it	ne
 800e88a:	2001      	movne	r0, #1
 800e88c:	f300 0007 	ssat	r0, #8, r0
 800e890:	444d      	add	r5, r9
 800e892:	b240      	sxtb	r0, r0
 800e894:	9900      	ldr	r1, [sp, #0]
 800e896:	45aa      	cmp	sl, r5
 800e898:	8030      	strh	r0, [r6, #0]
 800e89a:	440e      	add	r6, r1
 800e89c:	f67f ae16 	bls.w	800e4cc <forward_cast+0xd0>
 800e8a0:	42bc      	cmp	r4, r7
 800e8a2:	f002 8756 	beq.w	8011752 <forward_cast+0x3356>
 800e8a6:	dddf      	ble.n	800e868 <forward_cast+0x46c>
 800e8a8:	4955      	ldr	r1, [pc, #340]	; (800ea00 <forward_cast+0x604>)
 800e8aa:	428c      	cmp	r4, r1
 800e8ac:	f003 82da 	beq.w	8011e64 <forward_cast+0x3a68>
 800e8b0:	f341 816d 	ble.w	800fb8e <forward_cast+0x1792>
 800e8b4:	455c      	cmp	r4, fp
 800e8b6:	f041 81f2 	bne.w	800fc9e <forward_cast+0x18a2>
 800e8ba:	edd5 7a00 	vldr	s15, [r5]
 800e8be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e8c2:	ee17 0a90 	vmov	r0, s15
 800e8c6:	e7e1      	b.n	800e88c <forward_cast+0x490>
 800e8c8:	45c3      	cmp	fp, r8
 800e8ca:	f001 8325 	beq.w	800ff18 <forward_cast+0x1b1c>
 800e8ce:	f300 81e5 	bgt.w	800ec9c <forward_cast+0x8a0>
 800e8d2:	45bb      	cmp	fp, r7
 800e8d4:	f001 86a7 	beq.w	8010626 <forward_cast+0x222a>
 800e8d8:	f300 81a1 	bgt.w	800ec1e <forward_cast+0x822>
 800e8dc:	4b4c      	ldr	r3, [pc, #304]	; (800ea10 <forward_cast+0x614>)
 800e8de:	459b      	cmp	fp, r3
 800e8e0:	f001 8650 	beq.w	8010584 <forward_cast+0x2188>
 800e8e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e8e8:	459b      	cmp	fp, r3
 800e8ea:	f47f adef 	bne.w	800e4cc <forward_cast+0xd0>
 800e8ee:	4555      	cmp	r5, sl
 800e8f0:	f4bf adec 	bcs.w	800e4cc <forward_cast+0xd0>
 800e8f4:	f8df 8124 	ldr.w	r8, [pc, #292]	; 800ea1c <forward_cast+0x620>
 800e8f8:	4f43      	ldr	r7, [pc, #268]	; (800ea08 <forward_cast+0x60c>)
 800e8fa:	f8df b11c 	ldr.w	fp, [pc, #284]	; 800ea18 <forward_cast+0x61c>
 800e8fe:	4b41      	ldr	r3, [pc, #260]	; (800ea04 <forward_cast+0x608>)
 800e900:	4a3d      	ldr	r2, [pc, #244]	; (800e9f8 <forward_cast+0x5fc>)
 800e902:	e016      	b.n	800e932 <forward_cast+0x536>
 800e904:	429c      	cmp	r4, r3
 800e906:	f002 84f4 	beq.w	80112f2 <forward_cast+0x2ef6>
 800e90a:	f341 8042 	ble.w	800f992 <forward_cast+0x1596>
 800e90e:	4294      	cmp	r4, r2
 800e910:	f002 83bd 	beq.w	801108e <forward_cast+0x2c92>
 800e914:	493d      	ldr	r1, [pc, #244]	; (800ea0c <forward_cast+0x610>)
 800e916:	428c      	cmp	r4, r1
 800e918:	f041 817c 	bne.w	800fc14 <forward_cast+0x1818>
 800e91c:	7829      	ldrb	r1, [r5, #0]
 800e91e:	3900      	subs	r1, #0
 800e920:	bf18      	it	ne
 800e922:	2101      	movne	r1, #1
 800e924:	444d      	add	r5, r9
 800e926:	8031      	strh	r1, [r6, #0]
 800e928:	9900      	ldr	r1, [sp, #0]
 800e92a:	45aa      	cmp	sl, r5
 800e92c:	440e      	add	r6, r1
 800e92e:	f67f adcd 	bls.w	800e4cc <forward_cast+0xd0>
 800e932:	4932      	ldr	r1, [pc, #200]	; (800e9fc <forward_cast+0x600>)
 800e934:	428c      	cmp	r4, r1
 800e936:	f002 8601 	beq.w	801153c <forward_cast+0x3140>
 800e93a:	dde3      	ble.n	800e904 <forward_cast+0x508>
 800e93c:	4930      	ldr	r1, [pc, #192]	; (800ea00 <forward_cast+0x604>)
 800e93e:	428c      	cmp	r4, r1
 800e940:	f003 829e 	beq.w	8011e80 <forward_cast+0x3a84>
 800e944:	f340 87b6 	ble.w	800f8b4 <forward_cast+0x14b8>
 800e948:	4544      	cmp	r4, r8
 800e94a:	f041 8163 	bne.w	800fc14 <forward_cast+0x1818>
 800e94e:	edd5 7a00 	vldr	s15, [r5]
 800e952:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e956:	ee17 1a90 	vmov	r1, s15
 800e95a:	b289      	uxth	r1, r1
 800e95c:	e7e2      	b.n	800e924 <forward_cast+0x528>
 800e95e:	4b2b      	ldr	r3, [pc, #172]	; (800ea0c <forward_cast+0x610>)
 800e960:	459b      	cmp	fp, r3
 800e962:	f47f adb3 	bne.w	800e4cc <forward_cast+0xd0>
 800e966:	4555      	cmp	r5, sl
 800e968:	f4bf adb0 	bcs.w	800e4cc <forward_cast+0xd0>
 800e96c:	2300      	movs	r3, #0
 800e96e:	4a2a      	ldr	r2, [pc, #168]	; (800ea18 <forward_cast+0x61c>)
 800e970:	4619      	mov	r1, r3
 800e972:	464b      	mov	r3, r9
 800e974:	46b9      	mov	r9, r7
 800e976:	4637      	mov	r7, r6
 800e978:	460e      	mov	r6, r1
 800e97a:	e018      	b.n	800e9ae <forward_cast+0x5b2>
 800e97c:	4544      	cmp	r4, r8
 800e97e:	f002 83a4 	beq.w	80110ca <forward_cast+0x2cce>
 800e982:	f340 878b 	ble.w	800f89c <forward_cast+0x14a0>
 800e986:	491c      	ldr	r1, [pc, #112]	; (800e9f8 <forward_cast+0x5fc>)
 800e988:	428c      	cmp	r4, r1
 800e98a:	f002 838f 	beq.w	80110ac <forward_cast+0x2cb0>
 800e98e:	455c      	cmp	r4, fp
 800e990:	f041 8143 	bne.w	800fc1a <forward_cast+0x181e>
 800e994:	7828      	ldrb	r0, [r5, #0]
 800e996:	3800      	subs	r0, #0
 800e998:	bf18      	it	ne
 800e99a:	2001      	movne	r0, #1
 800e99c:	f300 0007 	ssat	r0, #8, r0
 800e9a0:	441d      	add	r5, r3
 800e9a2:	9900      	ldr	r1, [sp, #0]
 800e9a4:	55b8      	strb	r0, [r7, r6]
 800e9a6:	45aa      	cmp	sl, r5
 800e9a8:	440e      	add	r6, r1
 800e9aa:	f67f ad8f 	bls.w	800e4cc <forward_cast+0xd0>
 800e9ae:	454c      	cmp	r4, r9
 800e9b0:	f002 85c9 	beq.w	8011546 <forward_cast+0x314a>
 800e9b4:	dde2      	ble.n	800e97c <forward_cast+0x580>
 800e9b6:	4912      	ldr	r1, [pc, #72]	; (800ea00 <forward_cast+0x604>)
 800e9b8:	428c      	cmp	r4, r1
 800e9ba:	f002 85b0 	beq.w	801151e <forward_cast+0x3122>
 800e9be:	f340 8731 	ble.w	800f824 <forward_cast+0x1428>
 800e9c2:	4916      	ldr	r1, [pc, #88]	; (800ea1c <forward_cast+0x620>)
 800e9c4:	428c      	cmp	r4, r1
 800e9c6:	f041 8128 	bne.w	800fc1a <forward_cast+0x181e>
 800e9ca:	edd5 7a00 	vldr	s15, [r5]
 800e9ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e9d2:	ee17 0a90 	vmov	r0, s15
 800e9d6:	e7e1      	b.n	800e99c <forward_cast+0x5a0>
 800e9d8:	f8df 803c 	ldr.w	r8, [pc, #60]	; 800ea18 <forward_cast+0x61c>
 800e9dc:	45c3      	cmp	fp, r8
 800e9de:	f001 8765 	beq.w	80108ac <forward_cast+0x24b0>
 800e9e2:	4a0e      	ldr	r2, [pc, #56]	; (800ea1c <forward_cast+0x620>)
 800e9e4:	4593      	cmp	fp, r2
 800e9e6:	f040 83aa 	bne.w	800f13e <forward_cast+0xd42>
 800e9ea:	4555      	cmp	r5, sl
 800e9ec:	f4bf ad6e 	bcs.w	800e4cc <forward_cast+0xd0>
 800e9f0:	4b01      	ldr	r3, [pc, #4]	; (800e9f8 <forward_cast+0x5fc>)
 800e9f2:	4a06      	ldr	r2, [pc, #24]	; (800ea0c <forward_cast+0x610>)
 800e9f4:	e033      	b.n	800ea5e <forward_cast+0x662>
 800e9f6:	bf00      	nop
 800e9f8:	00042040 	.word	0x00042040
 800e9fc:	00840440 	.word	0x00840440
 800ea00:	00842040 	.word	0x00842040
 800ea04:	00041040 	.word	0x00041040
 800ea08:	00840840 	.word	0x00840840
 800ea0c:	00060440 	.word	0x00060440
 800ea10:	00040440 	.word	0x00040440
 800ea14:	00040840 	.word	0x00040840
 800ea18:	00841040 	.word	0x00841040
 800ea1c:	01821040 	.word	0x01821040
 800ea20:	49a6      	ldr	r1, [pc, #664]	; (800ecbc <forward_cast+0x8c0>)
 800ea22:	428c      	cmp	r4, r1
 800ea24:	f002 84c1 	beq.w	80113aa <forward_cast+0x2fae>
 800ea28:	f340 85ea 	ble.w	800f600 <forward_cast+0x1204>
 800ea2c:	429c      	cmp	r4, r3
 800ea2e:	f002 84ae 	beq.w	801138e <forward_cast+0x2f92>
 800ea32:	4294      	cmp	r4, r2
 800ea34:	f041 8104 	bne.w	800fc40 <forward_cast+0x1844>
 800ea38:	7828      	ldrb	r0, [r5, #0]
 800ea3a:	3800      	subs	r0, #0
 800ea3c:	bf18      	it	ne
 800ea3e:	2001      	movne	r0, #1
 800ea40:	f300 0007 	ssat	r0, #8, r0
 800ea44:	b240      	sxtb	r0, r0
 800ea46:	444d      	add	r5, r9
 800ea48:	9900      	ldr	r1, [sp, #0]
 800ea4a:	ee07 0a90 	vmov	s15, r0
 800ea4e:	45aa      	cmp	sl, r5
 800ea50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ea54:	edc6 7a00 	vstr	s15, [r6]
 800ea58:	440e      	add	r6, r1
 800ea5a:	f67f ad37 	bls.w	800e4cc <forward_cast+0xd0>
 800ea5e:	42bc      	cmp	r4, r7
 800ea60:	f002 840b 	beq.w	801127a <forward_cast+0x2e7e>
 800ea64:	dddc      	ble.n	800ea20 <forward_cast+0x624>
 800ea66:	4996      	ldr	r1, [pc, #600]	; (800ecc0 <forward_cast+0x8c4>)
 800ea68:	428c      	cmp	r4, r1
 800ea6a:	f002 83f0 	beq.w	801124e <forward_cast+0x2e52>
 800ea6e:	f340 87f7 	ble.w	800fa60 <forward_cast+0x1664>
 800ea72:	455c      	cmp	r4, fp
 800ea74:	f041 80e4 	bne.w	800fc40 <forward_cast+0x1844>
 800ea78:	edd5 7a00 	vldr	s15, [r5]
 800ea7c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ea80:	ee17 0a90 	vmov	r0, s15
 800ea84:	e7dc      	b.n	800ea40 <forward_cast+0x644>
 800ea86:	4b8f      	ldr	r3, [pc, #572]	; (800ecc4 <forward_cast+0x8c8>)
 800ea88:	459b      	cmp	fp, r3
 800ea8a:	f47f ad1f 	bne.w	800e4cc <forward_cast+0xd0>
 800ea8e:	4555      	cmp	r5, sl
 800ea90:	f4bf ad1c 	bcs.w	800e4cc <forward_cast+0xd0>
 800ea94:	2700      	movs	r7, #0
 800ea96:	f8df 8228 	ldr.w	r8, [pc, #552]	; 800ecc0 <forward_cast+0x8c4>
 800ea9a:	4b8b      	ldr	r3, [pc, #556]	; (800ecc8 <forward_cast+0x8cc>)
 800ea9c:	4a87      	ldr	r2, [pc, #540]	; (800ecbc <forward_cast+0x8c0>)
 800ea9e:	e018      	b.n	800ead2 <forward_cast+0x6d6>
 800eaa0:	4294      	cmp	r4, r2
 800eaa2:	f003 8155 	beq.w	8011d50 <forward_cast+0x3954>
 800eaa6:	f340 8603 	ble.w	800f6b0 <forward_cast+0x12b4>
 800eaaa:	4988      	ldr	r1, [pc, #544]	; (800eccc <forward_cast+0x8d0>)
 800eaac:	428c      	cmp	r4, r1
 800eaae:	f003 80fd 	beq.w	8011cac <forward_cast+0x38b0>
 800eab2:	455c      	cmp	r4, fp
 800eab4:	f041 80d9 	bne.w	800fc6a <forward_cast+0x186e>
 800eab8:	7828      	ldrb	r0, [r5, #0]
 800eaba:	3800      	subs	r0, #0
 800eabc:	bf18      	it	ne
 800eabe:	2001      	movne	r0, #1
 800eac0:	f300 000f 	ssat	r0, #16, r0
 800eac4:	444d      	add	r5, r9
 800eac6:	9900      	ldr	r1, [sp, #0]
 800eac8:	55f0      	strb	r0, [r6, r7]
 800eaca:	45aa      	cmp	sl, r5
 800eacc:	440f      	add	r7, r1
 800eace:	f67f acfd 	bls.w	800e4cc <forward_cast+0xd0>
 800ead2:	497f      	ldr	r1, [pc, #508]	; (800ecd0 <forward_cast+0x8d4>)
 800ead4:	428c      	cmp	r4, r1
 800ead6:	f002 8765 	beq.w	80119a4 <forward_cast+0x35a8>
 800eada:	dde1      	ble.n	800eaa0 <forward_cast+0x6a4>
 800eadc:	4544      	cmp	r4, r8
 800eade:	f002 83a0 	beq.w	8011222 <forward_cast+0x2e26>
 800eae2:	f340 87ac 	ble.w	800fa3e <forward_cast+0x1642>
 800eae6:	497b      	ldr	r1, [pc, #492]	; (800ecd4 <forward_cast+0x8d8>)
 800eae8:	428c      	cmp	r4, r1
 800eaea:	f041 80be 	bne.w	800fc6a <forward_cast+0x186e>
 800eaee:	edd5 7a00 	vldr	s15, [r5]
 800eaf2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800eaf6:	ee17 0a90 	vmov	r0, s15
 800eafa:	e7e1      	b.n	800eac0 <forward_cast+0x6c4>
 800eafc:	4b71      	ldr	r3, [pc, #452]	; (800ecc4 <forward_cast+0x8c8>)
 800eafe:	459b      	cmp	fp, r3
 800eb00:	f47f ace4 	bne.w	800e4cc <forward_cast+0xd0>
 800eb04:	4555      	cmp	r5, sl
 800eb06:	f4bf ace1 	bcs.w	800e4cc <forward_cast+0xd0>
 800eb0a:	9f00      	ldr	r7, [sp, #0]
 800eb0c:	4628      	mov	r0, r5
 800eb0e:	4621      	mov	r1, r4
 800eb10:	f7ff fc00 	bl	800e314 <_array_handle_get_as_float>
 800eb14:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800eb18:	444d      	add	r5, r9
 800eb1a:	ee17 3a90 	vmov	r3, s15
 800eb1e:	45aa      	cmp	sl, r5
 800eb20:	7033      	strb	r3, [r6, #0]
 800eb22:	443e      	add	r6, r7
 800eb24:	d8f2      	bhi.n	800eb0c <forward_cast+0x710>
 800eb26:	e4d1      	b.n	800e4cc <forward_cast+0xd0>
 800eb28:	459b      	cmp	fp, r3
 800eb2a:	f001 87de 	beq.w	8010aea <forward_cast+0x26ee>
 800eb2e:	45bb      	cmp	fp, r7
 800eb30:	f040 8145 	bne.w	800edbe <forward_cast+0x9c2>
 800eb34:	4555      	cmp	r5, sl
 800eb36:	f4bf acc9 	bcs.w	800e4cc <forward_cast+0xd0>
 800eb3a:	ed9f 8a67 	vldr	s16, [pc, #412]	; 800ecd8 <forward_cast+0x8dc>
 800eb3e:	4a64      	ldr	r2, [pc, #400]	; (800ecd0 <forward_cast+0x8d4>)
 800eb40:	4b5f      	ldr	r3, [pc, #380]	; (800ecc0 <forward_cast+0x8c4>)
 800eb42:	f8df b190 	ldr.w	fp, [pc, #400]	; 800ecd4 <forward_cast+0x8d8>
 800eb46:	f8df 8174 	ldr.w	r8, [pc, #372]	; 800ecbc <forward_cast+0x8c0>
 800eb4a:	4f60      	ldr	r7, [pc, #384]	; (800eccc <forward_cast+0x8d0>)
 800eb4c:	e019      	b.n	800eb82 <forward_cast+0x786>
 800eb4e:	4544      	cmp	r4, r8
 800eb50:	f002 8477 	beq.w	8011442 <forward_cast+0x3046>
 800eb54:	f340 8510 	ble.w	800f578 <forward_cast+0x117c>
 800eb58:	42bc      	cmp	r4, r7
 800eb5a:	f002 840e 	beq.w	801137a <forward_cast+0x2f7e>
 800eb5e:	4959      	ldr	r1, [pc, #356]	; (800ecc4 <forward_cast+0x8c8>)
 800eb60:	428c      	cmp	r4, r1
 800eb62:	f041 8069 	bne.w	800fc38 <forward_cast+0x183c>
 800eb66:	7829      	ldrb	r1, [r5, #0]
 800eb68:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800eb6c:	2900      	cmp	r1, #0
 800eb6e:	fe48 7a27 	vseleq.f32	s15, s16, s15
 800eb72:	444d      	add	r5, r9
 800eb74:	9900      	ldr	r1, [sp, #0]
 800eb76:	edc6 7a00 	vstr	s15, [r6]
 800eb7a:	45aa      	cmp	sl, r5
 800eb7c:	440e      	add	r6, r1
 800eb7e:	f67f aca5 	bls.w	800e4cc <forward_cast+0xd0>
 800eb82:	4294      	cmp	r4, r2
 800eb84:	f002 819a 	beq.w	8010ebc <forward_cast+0x2ac0>
 800eb88:	dde1      	ble.n	800eb4e <forward_cast+0x752>
 800eb8a:	429c      	cmp	r4, r3
 800eb8c:	f002 8488 	beq.w	80114a0 <forward_cast+0x30a4>
 800eb90:	f340 8746 	ble.w	800fa20 <forward_cast+0x1624>
 800eb94:	455c      	cmp	r4, fp
 800eb96:	f041 804f 	bne.w	800fc38 <forward_cast+0x183c>
 800eb9a:	edd5 7a00 	vldr	s15, [r5]
 800eb9e:	e7e8      	b.n	800eb72 <forward_cast+0x776>
 800eba0:	4b48      	ldr	r3, [pc, #288]	; (800ecc4 <forward_cast+0x8c8>)
 800eba2:	459b      	cmp	fp, r3
 800eba4:	f47f ac92 	bne.w	800e4cc <forward_cast+0xd0>
 800eba8:	4555      	cmp	r5, sl
 800ebaa:	f4bf ac8f 	bcs.w	800e4cc <forward_cast+0xd0>
 800ebae:	2700      	movs	r7, #0
 800ebb0:	f8df 8120 	ldr.w	r8, [pc, #288]	; 800ecd4 <forward_cast+0x8d8>
 800ebb4:	f8df b124 	ldr.w	fp, [pc, #292]	; 800ecdc <forward_cast+0x8e0>
 800ebb8:	4b43      	ldr	r3, [pc, #268]	; (800ecc8 <forward_cast+0x8cc>)
 800ebba:	4a40      	ldr	r2, [pc, #256]	; (800ecbc <forward_cast+0x8c0>)
 800ebbc:	e018      	b.n	800ebf0 <forward_cast+0x7f4>
 800ebbe:	4294      	cmp	r4, r2
 800ebc0:	f002 831f 	beq.w	8011202 <forward_cast+0x2e06>
 800ebc4:	f340 86cd 	ble.w	800f962 <forward_cast+0x1566>
 800ebc8:	4940      	ldr	r1, [pc, #256]	; (800eccc <forward_cast+0x8d0>)
 800ebca:	428c      	cmp	r4, r1
 800ebcc:	f002 8309 	beq.w	80111e2 <forward_cast+0x2de6>
 800ebd0:	f501 31f2 	add.w	r1, r1, #123904	; 0x1e400
 800ebd4:	428c      	cmp	r4, r1
 800ebd6:	f041 8015 	bne.w	800fc04 <forward_cast+0x1808>
 800ebda:	7829      	ldrb	r1, [r5, #0]
 800ebdc:	3900      	subs	r1, #0
 800ebde:	bf18      	it	ne
 800ebe0:	2101      	movne	r1, #1
 800ebe2:	444d      	add	r5, r9
 800ebe4:	55f1      	strb	r1, [r6, r7]
 800ebe6:	9900      	ldr	r1, [sp, #0]
 800ebe8:	45aa      	cmp	sl, r5
 800ebea:	440f      	add	r7, r1
 800ebec:	f67f ac6e 	bls.w	800e4cc <forward_cast+0xd0>
 800ebf0:	4937      	ldr	r1, [pc, #220]	; (800ecd0 <forward_cast+0x8d4>)
 800ebf2:	428c      	cmp	r4, r1
 800ebf4:	f000 86be 	beq.w	800f974 <forward_cast+0x1578>
 800ebf8:	dde1      	ble.n	800ebbe <forward_cast+0x7c2>
 800ebfa:	4931      	ldr	r1, [pc, #196]	; (800ecc0 <forward_cast+0x8c4>)
 800ebfc:	428c      	cmp	r4, r1
 800ebfe:	f002 8557 	beq.w	80116b0 <forward_cast+0x32b4>
 800ec02:	f340 86fc 	ble.w	800f9fe <forward_cast+0x1602>
 800ec06:	4544      	cmp	r4, r8
 800ec08:	f040 87fc 	bne.w	800fc04 <forward_cast+0x1808>
 800ec0c:	edd5 7a00 	vldr	s15, [r5]
 800ec10:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ec14:	edcd 7a01 	vstr	s15, [sp, #4]
 800ec18:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800ec1c:	e7e1      	b.n	800ebe2 <forward_cast+0x7e6>
 800ec1e:	4b29      	ldr	r3, [pc, #164]	; (800ecc4 <forward_cast+0x8c8>)
 800ec20:	459b      	cmp	fp, r3
 800ec22:	f47f ac53 	bne.w	800e4cc <forward_cast+0xd0>
 800ec26:	4555      	cmp	r5, sl
 800ec28:	f4bf ac50 	bcs.w	800e4cc <forward_cast+0xd0>
 800ec2c:	2700      	movs	r7, #0
 800ec2e:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 800ecd4 <forward_cast+0x8d8>
 800ec32:	f8df b0a8 	ldr.w	fp, [pc, #168]	; 800ecdc <forward_cast+0x8e0>
 800ec36:	4b24      	ldr	r3, [pc, #144]	; (800ecc8 <forward_cast+0x8cc>)
 800ec38:	4a20      	ldr	r2, [pc, #128]	; (800ecbc <forward_cast+0x8c0>)
 800ec3a:	e018      	b.n	800ec6e <forward_cast+0x872>
 800ec3c:	4294      	cmp	r4, r2
 800ec3e:	f002 80c9 	beq.w	8010dd4 <forward_cast+0x29d8>
 800ec42:	f340 869a 	ble.w	800f97a <forward_cast+0x157e>
 800ec46:	4921      	ldr	r1, [pc, #132]	; (800eccc <forward_cast+0x8d0>)
 800ec48:	428c      	cmp	r4, r1
 800ec4a:	f002 82ba 	beq.w	80111c2 <forward_cast+0x2dc6>
 800ec4e:	f501 31f2 	add.w	r1, r1, #123904	; 0x1e400
 800ec52:	428c      	cmp	r4, r1
 800ec54:	f040 87d3 	bne.w	800fbfe <forward_cast+0x1802>
 800ec58:	7829      	ldrb	r1, [r5, #0]
 800ec5a:	3900      	subs	r1, #0
 800ec5c:	bf18      	it	ne
 800ec5e:	2101      	movne	r1, #1
 800ec60:	444d      	add	r5, r9
 800ec62:	55f1      	strb	r1, [r6, r7]
 800ec64:	9900      	ldr	r1, [sp, #0]
 800ec66:	45aa      	cmp	sl, r5
 800ec68:	440f      	add	r7, r1
 800ec6a:	f67f ac2f 	bls.w	800e4cc <forward_cast+0xd0>
 800ec6e:	4918      	ldr	r1, [pc, #96]	; (800ecd0 <forward_cast+0x8d4>)
 800ec70:	428c      	cmp	r4, r1
 800ec72:	f000 868b 	beq.w	800f98c <forward_cast+0x1590>
 800ec76:	dde1      	ble.n	800ec3c <forward_cast+0x840>
 800ec78:	4911      	ldr	r1, [pc, #68]	; (800ecc0 <forward_cast+0x8c4>)
 800ec7a:	428c      	cmp	r4, r1
 800ec7c:	f002 81e9 	beq.w	8011052 <forward_cast+0x2c56>
 800ec80:	f340 863e 	ble.w	800f900 <forward_cast+0x1504>
 800ec84:	4544      	cmp	r4, r8
 800ec86:	f040 87ba 	bne.w	800fbfe <forward_cast+0x1802>
 800ec8a:	edd5 7a00 	vldr	s15, [r5]
 800ec8e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ec92:	edcd 7a01 	vstr	s15, [sp, #4]
 800ec96:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800ec9a:	e7e1      	b.n	800ec60 <forward_cast+0x864>
 800ec9c:	4a0a      	ldr	r2, [pc, #40]	; (800ecc8 <forward_cast+0x8cc>)
 800ec9e:	4593      	cmp	fp, r2
 800eca0:	f001 85bb 	beq.w	801081a <forward_cast+0x241e>
 800eca4:	4b0b      	ldr	r3, [pc, #44]	; (800ecd4 <forward_cast+0x8d8>)
 800eca6:	459b      	cmp	fp, r3
 800eca8:	f040 80c5 	bne.w	800ee36 <forward_cast+0xa3a>
 800ecac:	4555      	cmp	r5, sl
 800ecae:	f4bf ac0d 	bcs.w	800e4cc <forward_cast+0xd0>
 800ecb2:	ed9f 8a09 	vldr	s16, [pc, #36]	; 800ecd8 <forward_cast+0x8dc>
 800ecb6:	4b09      	ldr	r3, [pc, #36]	; (800ecdc <forward_cast+0x8e0>)
 800ecb8:	e02e      	b.n	800ed18 <forward_cast+0x91c>
 800ecba:	bf00      	nop
 800ecbc:	00041040 	.word	0x00041040
 800ecc0:	00842040 	.word	0x00842040
 800ecc4:	00060440 	.word	0x00060440
 800ecc8:	00841040 	.word	0x00841040
 800eccc:	00042040 	.word	0x00042040
 800ecd0:	00840440 	.word	0x00840440
 800ecd4:	01821040 	.word	0x01821040
 800ecd8:	00000000 	.word	0x00000000
 800ecdc:	00840840 	.word	0x00840840
 800ece0:	42bc      	cmp	r4, r7
 800ece2:	f002 8126 	beq.w	8010f32 <forward_cast+0x2b36>
 800ece6:	f340 8437 	ble.w	800f558 <forward_cast+0x115c>
 800ecea:	49b3      	ldr	r1, [pc, #716]	; (800efb8 <forward_cast+0xbbc>)
 800ecec:	428c      	cmp	r4, r1
 800ecee:	f002 8138 	beq.w	8010f62 <forward_cast+0x2b66>
 800ecf2:	f501 31f2 	add.w	r1, r1, #123904	; 0x1e400
 800ecf6:	428c      	cmp	r4, r1
 800ecf8:	f040 879a 	bne.w	800fc30 <forward_cast+0x1834>
 800ecfc:	7829      	ldrb	r1, [r5, #0]
 800ecfe:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800ed02:	2900      	cmp	r1, #0
 800ed04:	fe48 7a27 	vseleq.f32	s15, s16, s15
 800ed08:	444d      	add	r5, r9
 800ed0a:	9900      	ldr	r1, [sp, #0]
 800ed0c:	edc6 7a00 	vstr	s15, [r6]
 800ed10:	45aa      	cmp	sl, r5
 800ed12:	440e      	add	r6, r1
 800ed14:	f67f abda 	bls.w	800e4cc <forward_cast+0xd0>
 800ed18:	4544      	cmp	r4, r8
 800ed1a:	f002 80e0 	beq.w	8010ede <forward_cast+0x2ae2>
 800ed1e:	dddf      	ble.n	800ece0 <forward_cast+0x8e4>
 800ed20:	49a6      	ldr	r1, [pc, #664]	; (800efbc <forward_cast+0xbc0>)
 800ed22:	428c      	cmp	r4, r1
 800ed24:	f002 85ff 	beq.w	8011926 <forward_cast+0x352a>
 800ed28:	f340 8743 	ble.w	800fbb2 <forward_cast+0x17b6>
 800ed2c:	455c      	cmp	r4, fp
 800ed2e:	f040 877f 	bne.w	800fc30 <forward_cast+0x1834>
 800ed32:	edd5 7a00 	vldr	s15, [r5]
 800ed36:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ed3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ed3e:	e7e3      	b.n	800ed08 <forward_cast+0x90c>
 800ed40:	45bb      	cmp	fp, r7
 800ed42:	f000 87b5 	beq.w	800fcb0 <forward_cast+0x18b4>
 800ed46:	4b9e      	ldr	r3, [pc, #632]	; (800efc0 <forward_cast+0xbc4>)
 800ed48:	459b      	cmp	fp, r3
 800ed4a:	f040 80b0 	bne.w	800eeae <forward_cast+0xab2>
 800ed4e:	4555      	cmp	r5, sl
 800ed50:	f4bf abbc 	bcs.w	800e4cc <forward_cast+0xd0>
 800ed54:	ed9f 8a9b 	vldr	s16, [pc, #620]	; 800efc4 <forward_cast+0xbc8>
 800ed58:	4a98      	ldr	r2, [pc, #608]	; (800efbc <forward_cast+0xbc0>)
 800ed5a:	4b9b      	ldr	r3, [pc, #620]	; (800efc8 <forward_cast+0xbcc>)
 800ed5c:	e01c      	b.n	800ed98 <forward_cast+0x99c>
 800ed5e:	499b      	ldr	r1, [pc, #620]	; (800efcc <forward_cast+0xbd0>)
 800ed60:	428c      	cmp	r4, r1
 800ed62:	f002 8752 	beq.w	8011c0a <forward_cast+0x380e>
 800ed66:	f340 847a 	ble.w	800f65e <forward_cast+0x1262>
 800ed6a:	4993      	ldr	r1, [pc, #588]	; (800efb8 <forward_cast+0xbbc>)
 800ed6c:	428c      	cmp	r4, r1
 800ed6e:	f002 873e 	beq.w	8011bee <forward_cast+0x37f2>
 800ed72:	f501 31f2 	add.w	r1, r1, #123904	; 0x1e400
 800ed76:	428c      	cmp	r4, r1
 800ed78:	f040 8786 	bne.w	800fc88 <forward_cast+0x188c>
 800ed7c:	7829      	ldrb	r1, [r5, #0]
 800ed7e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800ed82:	2900      	cmp	r1, #0
 800ed84:	fe48 7a27 	vseleq.f32	s15, s16, s15
 800ed88:	444d      	add	r5, r9
 800ed8a:	9900      	ldr	r1, [sp, #0]
 800ed8c:	edc6 7a00 	vstr	s15, [r6]
 800ed90:	45aa      	cmp	sl, r5
 800ed92:	440e      	add	r6, r1
 800ed94:	f67f ab9a 	bls.w	800e4cc <forward_cast+0xd0>
 800ed98:	4544      	cmp	r4, r8
 800ed9a:	f002 8702 	beq.w	8011ba2 <forward_cast+0x37a6>
 800ed9e:	ddde      	ble.n	800ed5e <forward_cast+0x962>
 800eda0:	4294      	cmp	r4, r2
 800eda2:	f002 85ae 	beq.w	8011902 <forward_cast+0x3506>
 800eda6:	f340 866d 	ble.w	800fa84 <forward_cast+0x1688>
 800edaa:	455c      	cmp	r4, fp
 800edac:	f040 876c 	bne.w	800fc88 <forward_cast+0x188c>
 800edb0:	edd5 7a00 	vldr	s15, [r5]
 800edb4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800edb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800edbc:	e7e4      	b.n	800ed88 <forward_cast+0x98c>
 800edbe:	4b82      	ldr	r3, [pc, #520]	; (800efc8 <forward_cast+0xbcc>)
 800edc0:	459b      	cmp	fp, r3
 800edc2:	f47f ab83 	bne.w	800e4cc <forward_cast+0xd0>
 800edc6:	4555      	cmp	r5, sl
 800edc8:	f4bf ab80 	bcs.w	800e4cc <forward_cast+0xd0>
 800edcc:	f8df 81f0 	ldr.w	r8, [pc, #496]	; 800efc0 <forward_cast+0xbc4>
 800edd0:	4f7d      	ldr	r7, [pc, #500]	; (800efc8 <forward_cast+0xbcc>)
 800edd2:	f8df b204 	ldr.w	fp, [pc, #516]	; 800efd8 <forward_cast+0xbdc>
 800edd6:	4b7d      	ldr	r3, [pc, #500]	; (800efcc <forward_cast+0xbd0>)
 800edd8:	4a77      	ldr	r2, [pc, #476]	; (800efb8 <forward_cast+0xbbc>)
 800edda:	e016      	b.n	800ee0a <forward_cast+0xa0e>
 800eddc:	429c      	cmp	r4, r3
 800edde:	f002 8618 	beq.w	8011a12 <forward_cast+0x3616>
 800ede2:	f340 847e 	ble.w	800f6e2 <forward_cast+0x12e6>
 800ede6:	4294      	cmp	r4, r2
 800ede8:	f002 8604 	beq.w	80119f4 <forward_cast+0x35f8>
 800edec:	4978      	ldr	r1, [pc, #480]	; (800efd0 <forward_cast+0xbd4>)
 800edee:	428c      	cmp	r4, r1
 800edf0:	f040 8732 	bne.w	800fc58 <forward_cast+0x185c>
 800edf4:	7829      	ldrb	r1, [r5, #0]
 800edf6:	3900      	subs	r1, #0
 800edf8:	bf18      	it	ne
 800edfa:	2101      	movne	r1, #1
 800edfc:	444d      	add	r5, r9
 800edfe:	8031      	strh	r1, [r6, #0]
 800ee00:	9900      	ldr	r1, [sp, #0]
 800ee02:	45aa      	cmp	sl, r5
 800ee04:	440e      	add	r6, r1
 800ee06:	f67f ab61 	bls.w	800e4cc <forward_cast+0xd0>
 800ee0a:	4972      	ldr	r1, [pc, #456]	; (800efd4 <forward_cast+0xbd8>)
 800ee0c:	428c      	cmp	r4, r1
 800ee0e:	f002 8612 	beq.w	8011a36 <forward_cast+0x363a>
 800ee12:	dde3      	ble.n	800eddc <forward_cast+0x9e0>
 800ee14:	4969      	ldr	r1, [pc, #420]	; (800efbc <forward_cast+0xbc0>)
 800ee16:	428c      	cmp	r4, r1
 800ee18:	f002 8560 	beq.w	80118dc <forward_cast+0x34e0>
 800ee1c:	f340 8683 	ble.w	800fb26 <forward_cast+0x172a>
 800ee20:	4544      	cmp	r4, r8
 800ee22:	f040 8719 	bne.w	800fc58 <forward_cast+0x185c>
 800ee26:	edd5 7a00 	vldr	s15, [r5]
 800ee2a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ee2e:	ee17 1a90 	vmov	r1, s15
 800ee32:	b209      	sxth	r1, r1
 800ee34:	e7e2      	b.n	800edfc <forward_cast+0xa00>
 800ee36:	4b64      	ldr	r3, [pc, #400]	; (800efc8 <forward_cast+0xbcc>)
 800ee38:	459b      	cmp	fp, r3
 800ee3a:	f47f ab47 	bne.w	800e4cc <forward_cast+0xd0>
 800ee3e:	4555      	cmp	r5, sl
 800ee40:	f4bf ab44 	bcs.w	800e4cc <forward_cast+0xd0>
 800ee44:	f8df 8178 	ldr.w	r8, [pc, #376]	; 800efc0 <forward_cast+0xbc4>
 800ee48:	4f5f      	ldr	r7, [pc, #380]	; (800efc8 <forward_cast+0xbcc>)
 800ee4a:	f8df b18c 	ldr.w	fp, [pc, #396]	; 800efd8 <forward_cast+0xbdc>
 800ee4e:	4b5f      	ldr	r3, [pc, #380]	; (800efcc <forward_cast+0xbd0>)
 800ee50:	4a59      	ldr	r2, [pc, #356]	; (800efb8 <forward_cast+0xbbc>)
 800ee52:	e016      	b.n	800ee82 <forward_cast+0xa86>
 800ee54:	429c      	cmp	r4, r3
 800ee56:	f002 8593 	beq.w	8011980 <forward_cast+0x3584>
 800ee5a:	f340 8411 	ble.w	800f680 <forward_cast+0x1284>
 800ee5e:	4294      	cmp	r4, r2
 800ee60:	f002 84ff 	beq.w	8011862 <forward_cast+0x3466>
 800ee64:	495a      	ldr	r1, [pc, #360]	; (800efd0 <forward_cast+0xbd4>)
 800ee66:	428c      	cmp	r4, r1
 800ee68:	f040 86f9 	bne.w	800fc5e <forward_cast+0x1862>
 800ee6c:	7829      	ldrb	r1, [r5, #0]
 800ee6e:	3900      	subs	r1, #0
 800ee70:	bf18      	it	ne
 800ee72:	2101      	movne	r1, #1
 800ee74:	444d      	add	r5, r9
 800ee76:	8031      	strh	r1, [r6, #0]
 800ee78:	9900      	ldr	r1, [sp, #0]
 800ee7a:	45aa      	cmp	sl, r5
 800ee7c:	440e      	add	r6, r1
 800ee7e:	f67f ab25 	bls.w	800e4cc <forward_cast+0xd0>
 800ee82:	4954      	ldr	r1, [pc, #336]	; (800efd4 <forward_cast+0xbd8>)
 800ee84:	428c      	cmp	r4, r1
 800ee86:	f002 85da 	beq.w	8011a3e <forward_cast+0x3642>
 800ee8a:	dde3      	ble.n	800ee54 <forward_cast+0xa58>
 800ee8c:	494b      	ldr	r1, [pc, #300]	; (800efbc <forward_cast+0xbc0>)
 800ee8e:	428c      	cmp	r4, r1
 800ee90:	f002 8590 	beq.w	80119b4 <forward_cast+0x35b8>
 800ee94:	f340 8456 	ble.w	800f744 <forward_cast+0x1348>
 800ee98:	4544      	cmp	r4, r8
 800ee9a:	f040 86e0 	bne.w	800fc5e <forward_cast+0x1862>
 800ee9e:	edd5 7a00 	vldr	s15, [r5]
 800eea2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800eea6:	ee17 1a90 	vmov	r1, s15
 800eeaa:	b209      	sxth	r1, r1
 800eeac:	e7e2      	b.n	800ee74 <forward_cast+0xa78>
 800eeae:	4b46      	ldr	r3, [pc, #280]	; (800efc8 <forward_cast+0xbcc>)
 800eeb0:	459b      	cmp	fp, r3
 800eeb2:	f47f ab0b 	bne.w	800e4cc <forward_cast+0xd0>
 800eeb6:	4555      	cmp	r5, sl
 800eeb8:	f4bf ab08 	bcs.w	800e4cc <forward_cast+0xd0>
 800eebc:	f8df 8100 	ldr.w	r8, [pc, #256]	; 800efc0 <forward_cast+0xbc4>
 800eec0:	4f41      	ldr	r7, [pc, #260]	; (800efc8 <forward_cast+0xbcc>)
 800eec2:	f8df b114 	ldr.w	fp, [pc, #276]	; 800efd8 <forward_cast+0xbdc>
 800eec6:	4b41      	ldr	r3, [pc, #260]	; (800efcc <forward_cast+0xbd0>)
 800eec8:	4a3b      	ldr	r2, [pc, #236]	; (800efb8 <forward_cast+0xbbc>)
 800eeca:	e016      	b.n	800eefa <forward_cast+0xafe>
 800eecc:	429c      	cmp	r4, r3
 800eece:	f002 8670 	beq.w	8011bb2 <forward_cast+0x37b6>
 800eed2:	f340 8586 	ble.w	800f9e2 <forward_cast+0x15e6>
 800eed6:	4294      	cmp	r4, r2
 800eed8:	f002 85b9 	beq.w	8011a4e <forward_cast+0x3652>
 800eedc:	493c      	ldr	r1, [pc, #240]	; (800efd0 <forward_cast+0xbd4>)
 800eede:	428c      	cmp	r4, r1
 800eee0:	f040 86e0 	bne.w	800fca4 <forward_cast+0x18a8>
 800eee4:	7829      	ldrb	r1, [r5, #0]
 800eee6:	3900      	subs	r1, #0
 800eee8:	bf18      	it	ne
 800eeea:	2101      	movne	r1, #1
 800eeec:	444d      	add	r5, r9
 800eeee:	8031      	strh	r1, [r6, #0]
 800eef0:	9900      	ldr	r1, [sp, #0]
 800eef2:	45aa      	cmp	sl, r5
 800eef4:	440e      	add	r6, r1
 800eef6:	f67f aae9 	bls.w	800e4cc <forward_cast+0xd0>
 800eefa:	4936      	ldr	r1, [pc, #216]	; (800efd4 <forward_cast+0xbd8>)
 800eefc:	428c      	cmp	r4, r1
 800eefe:	f002 8215 	beq.w	801132c <forward_cast+0x2f30>
 800ef02:	dde3      	ble.n	800eecc <forward_cast+0xad0>
 800ef04:	492d      	ldr	r1, [pc, #180]	; (800efbc <forward_cast+0xbc0>)
 800ef06:	428c      	cmp	r4, r1
 800ef08:	f002 84d5 	beq.w	80118b6 <forward_cast+0x34ba>
 800ef0c:	f340 849c 	ble.w	800f848 <forward_cast+0x144c>
 800ef10:	4544      	cmp	r4, r8
 800ef12:	f040 86c7 	bne.w	800fca4 <forward_cast+0x18a8>
 800ef16:	edd5 7a00 	vldr	s15, [r5]
 800ef1a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ef1e:	ee17 1a90 	vmov	r1, s15
 800ef22:	b209      	sxth	r1, r1
 800ef24:	e7e2      	b.n	800eeec <forward_cast+0xaf0>
 800ef26:	4b2a      	ldr	r3, [pc, #168]	; (800efd0 <forward_cast+0xbd4>)
 800ef28:	459b      	cmp	fp, r3
 800ef2a:	f47f aacf 	bne.w	800e4cc <forward_cast+0xd0>
 800ef2e:	4555      	cmp	r5, sl
 800ef30:	f4bf aacc 	bcs.w	800e4cc <forward_cast+0xd0>
 800ef34:	9f00      	ldr	r7, [sp, #0]
 800ef36:	4621      	mov	r1, r4
 800ef38:	4628      	mov	r0, r5
 800ef3a:	f7ff f9eb 	bl	800e314 <_array_handle_get_as_float>
 800ef3e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800ef42:	ee17 3a90 	vmov	r3, s15
 800ef46:	f383 0308 	usat	r3, #8, r3
 800ef4a:	444d      	add	r5, r9
 800ef4c:	7033      	strb	r3, [r6, #0]
 800ef4e:	443e      	add	r6, r7
 800ef50:	45aa      	cmp	sl, r5
 800ef52:	d8f0      	bhi.n	800ef36 <forward_cast+0xb3a>
 800ef54:	f7ff baba 	b.w	800e4cc <forward_cast+0xd0>
 800ef58:	4b1f      	ldr	r3, [pc, #124]	; (800efd8 <forward_cast+0xbdc>)
 800ef5a:	459b      	cmp	fp, r3
 800ef5c:	f001 850b 	beq.w	8010976 <forward_cast+0x257a>
 800ef60:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 800ef64:	459b      	cmp	fp, r3
 800ef66:	f040 81ea 	bne.w	800f33e <forward_cast+0xf42>
 800ef6a:	4555      	cmp	r5, sl
 800ef6c:	f4bf aaae 	bcs.w	800e4cc <forward_cast+0xd0>
 800ef70:	9f00      	ldr	r7, [sp, #0]
 800ef72:	4621      	mov	r1, r4
 800ef74:	4628      	mov	r0, r5
 800ef76:	f7ff f9cd 	bl	800e314 <_array_handle_get_as_float>
 800ef7a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800ef7e:	ee17 3a90 	vmov	r3, s15
 800ef82:	f383 0308 	usat	r3, #8, r3
 800ef86:	b2db      	uxtb	r3, r3
 800ef88:	444d      	add	r5, r9
 800ef8a:	ee07 3a90 	vmov	s15, r3
 800ef8e:	45aa      	cmp	sl, r5
 800ef90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ef94:	edc6 7a00 	vstr	s15, [r6]
 800ef98:	443e      	add	r6, r7
 800ef9a:	d8ea      	bhi.n	800ef72 <forward_cast+0xb76>
 800ef9c:	f7ff ba96 	b.w	800e4cc <forward_cast+0xd0>
 800efa0:	4b0b      	ldr	r3, [pc, #44]	; (800efd0 <forward_cast+0xbd4>)
 800efa2:	459b      	cmp	fp, r3
 800efa4:	f47f aa92 	bne.w	800e4cc <forward_cast+0xd0>
 800efa8:	4555      	cmp	r5, sl
 800efaa:	f4bf aa8f 	bcs.w	800e4cc <forward_cast+0xd0>
 800efae:	f04f 0800 	mov.w	r8, #0
 800efb2:	4b05      	ldr	r3, [pc, #20]	; (800efc8 <forward_cast+0xbcc>)
 800efb4:	4a08      	ldr	r2, [pc, #32]	; (800efd8 <forward_cast+0xbdc>)
 800efb6:	e02b      	b.n	800f010 <forward_cast+0xc14>
 800efb8:	00042040 	.word	0x00042040
 800efbc:	00842040 	.word	0x00842040
 800efc0:	01821040 	.word	0x01821040
 800efc4:	00000000 	.word	0x00000000
 800efc8:	00840840 	.word	0x00840840
 800efcc:	00041040 	.word	0x00041040
 800efd0:	00060440 	.word	0x00060440
 800efd4:	00840440 	.word	0x00840440
 800efd8:	00841040 	.word	0x00841040
 800efdc:	42bc      	cmp	r4, r7
 800efde:	f002 8681 	beq.w	8011ce4 <forward_cast+0x38e8>
 800efe2:	f340 8399 	ble.w	800f718 <forward_cast+0x131c>
 800efe6:	49ac      	ldr	r1, [pc, #688]	; (800f298 <forward_cast+0xe9c>)
 800efe8:	428c      	cmp	r4, r1
 800efea:	f002 866d 	beq.w	8011cc8 <forward_cast+0x38cc>
 800efee:	455c      	cmp	r4, fp
 800eff0:	f040 863e 	bne.w	800fc70 <forward_cast+0x1874>
 800eff4:	7828      	ldrb	r0, [r5, #0]
 800eff6:	3800      	subs	r0, #0
 800eff8:	bf18      	it	ne
 800effa:	2001      	movne	r0, #1
 800effc:	f380 0010 	usat	r0, #16, r0
 800f000:	444d      	add	r5, r9
 800f002:	9900      	ldr	r1, [sp, #0]
 800f004:	f806 0008 	strb.w	r0, [r6, r8]
 800f008:	45aa      	cmp	sl, r5
 800f00a:	4488      	add	r8, r1
 800f00c:	f67f aa5e 	bls.w	800e4cc <forward_cast+0xd0>
 800f010:	49a2      	ldr	r1, [pc, #648]	; (800f29c <forward_cast+0xea0>)
 800f012:	428c      	cmp	r4, r1
 800f014:	f002 8517 	beq.w	8011a46 <forward_cast+0x364a>
 800f018:	dde0      	ble.n	800efdc <forward_cast+0xbe0>
 800f01a:	49a1      	ldr	r1, [pc, #644]	; (800f2a0 <forward_cast+0xea4>)
 800f01c:	428c      	cmp	r4, r1
 800f01e:	f002 8269 	beq.w	80114f4 <forward_cast+0x30f8>
 800f022:	f340 8570 	ble.w	800fb06 <forward_cast+0x170a>
 800f026:	499f      	ldr	r1, [pc, #636]	; (800f2a4 <forward_cast+0xea8>)
 800f028:	428c      	cmp	r4, r1
 800f02a:	f040 8621 	bne.w	800fc70 <forward_cast+0x1874>
 800f02e:	edd5 7a00 	vldr	s15, [r5]
 800f032:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f036:	ee17 0a90 	vmov	r0, s15
 800f03a:	e7df      	b.n	800effc <forward_cast+0xc00>
 800f03c:	4b9a      	ldr	r3, [pc, #616]	; (800f2a8 <forward_cast+0xeac>)
 800f03e:	459b      	cmp	fp, r3
 800f040:	f47f aa44 	bne.w	800e4cc <forward_cast+0xd0>
 800f044:	4555      	cmp	r5, sl
 800f046:	f4bf aa41 	bcs.w	800e4cc <forward_cast+0xd0>
 800f04a:	9f00      	ldr	r7, [sp, #0]
 800f04c:	4628      	mov	r0, r5
 800f04e:	4621      	mov	r1, r4
 800f050:	f7ff f960 	bl	800e314 <_array_handle_get_as_float>
 800f054:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800f058:	444d      	add	r5, r9
 800f05a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f05e:	bf14      	ite	ne
 800f060:	2301      	movne	r3, #1
 800f062:	2300      	moveq	r3, #0
 800f064:	45aa      	cmp	sl, r5
 800f066:	7033      	strb	r3, [r6, #0]
 800f068:	443e      	add	r6, r7
 800f06a:	d8ef      	bhi.n	800f04c <forward_cast+0xc50>
 800f06c:	f7ff ba2e 	b.w	800e4cc <forward_cast+0xd0>
 800f070:	4b8e      	ldr	r3, [pc, #568]	; (800f2ac <forward_cast+0xeb0>)
 800f072:	459b      	cmp	fp, r3
 800f074:	f001 84d0 	beq.w	8010a18 <forward_cast+0x261c>
 800f078:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 800f07c:	459b      	cmp	fp, r3
 800f07e:	f040 8096 	bne.w	800f1ae <forward_cast+0xdb2>
 800f082:	4555      	cmp	r5, sl
 800f084:	f4bf aa22 	bcs.w	800e4cc <forward_cast+0xd0>
 800f088:	f04f 587e 	mov.w	r8, #1065353216	; 0x3f800000
 800f08c:	2700      	movs	r7, #0
 800f08e:	4628      	mov	r0, r5
 800f090:	4621      	mov	r1, r4
 800f092:	f7ff f93f 	bl	800e314 <_array_handle_get_as_float>
 800f096:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800f09a:	444d      	add	r5, r9
 800f09c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0a0:	f000 85a5 	beq.w	800fbee <forward_cast+0x17f2>
 800f0a4:	9b00      	ldr	r3, [sp, #0]
 800f0a6:	45aa      	cmp	sl, r5
 800f0a8:	f8c6 8000 	str.w	r8, [r6]
 800f0ac:	441e      	add	r6, r3
 800f0ae:	d8ee      	bhi.n	800f08e <forward_cast+0xc92>
 800f0b0:	f7ff ba0c 	b.w	800e4cc <forward_cast+0xd0>
 800f0b4:	459b      	cmp	fp, r3
 800f0b6:	f001 8562 	beq.w	8010b7e <forward_cast+0x2782>
 800f0ba:	4593      	cmp	fp, r2
 800f0bc:	f040 80b2 	bne.w	800f224 <forward_cast+0xe28>
 800f0c0:	4555      	cmp	r5, sl
 800f0c2:	f4bf aa03 	bcs.w	800e4cc <forward_cast+0xd0>
 800f0c6:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 800f2a4 <forward_cast+0xea8>
 800f0ca:	4f79      	ldr	r7, [pc, #484]	; (800f2b0 <forward_cast+0xeb4>)
 800f0cc:	f8df b1dc 	ldr.w	fp, [pc, #476]	; 800f2ac <forward_cast+0xeb0>
 800f0d0:	4b78      	ldr	r3, [pc, #480]	; (800f2b4 <forward_cast+0xeb8>)
 800f0d2:	4a71      	ldr	r2, [pc, #452]	; (800f298 <forward_cast+0xe9c>)
 800f0d4:	e01e      	b.n	800f114 <forward_cast+0xd18>
 800f0d6:	429c      	cmp	r4, r3
 800f0d8:	f002 862d 	beq.w	8011d36 <forward_cast+0x393a>
 800f0dc:	f340 82a9 	ble.w	800f632 <forward_cast+0x1236>
 800f0e0:	4294      	cmp	r4, r2
 800f0e2:	f002 861a 	beq.w	8011d1a <forward_cast+0x391e>
 800f0e6:	4970      	ldr	r1, [pc, #448]	; (800f2a8 <forward_cast+0xeac>)
 800f0e8:	428c      	cmp	r4, r1
 800f0ea:	f040 85c7 	bne.w	800fc7c <forward_cast+0x1880>
 800f0ee:	7828      	ldrb	r0, [r5, #0]
 800f0f0:	3800      	subs	r0, #0
 800f0f2:	bf18      	it	ne
 800f0f4:	2001      	movne	r0, #1
 800f0f6:	f300 000f 	ssat	r0, #16, r0
 800f0fa:	b200      	sxth	r0, r0
 800f0fc:	444d      	add	r5, r9
 800f0fe:	9900      	ldr	r1, [sp, #0]
 800f100:	ee07 0a90 	vmov	s15, r0
 800f104:	45aa      	cmp	sl, r5
 800f106:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f10a:	edc6 7a00 	vstr	s15, [r6]
 800f10e:	440e      	add	r6, r1
 800f110:	f67f a9dc 	bls.w	800e4cc <forward_cast+0xd0>
 800f114:	4961      	ldr	r1, [pc, #388]	; (800f29c <forward_cast+0xea0>)
 800f116:	428c      	cmp	r4, r1
 800f118:	f002 82ed 	beq.w	80116f6 <forward_cast+0x32fa>
 800f11c:	dddb      	ble.n	800f0d6 <forward_cast+0xcda>
 800f11e:	4960      	ldr	r1, [pc, #384]	; (800f2a0 <forward_cast+0xea4>)
 800f120:	428c      	cmp	r4, r1
 800f122:	f003 8014 	beq.w	801214e <forward_cast+0x3d52>
 800f126:	f340 84bd 	ble.w	800faa4 <forward_cast+0x16a8>
 800f12a:	4544      	cmp	r4, r8
 800f12c:	f040 85a6 	bne.w	800fc7c <forward_cast+0x1880>
 800f130:	edd5 7a00 	vldr	s15, [r5]
 800f134:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f138:	ee17 0a90 	vmov	r0, s15
 800f13c:	e7db      	b.n	800f0f6 <forward_cast+0xcfa>
 800f13e:	4b5c      	ldr	r3, [pc, #368]	; (800f2b0 <forward_cast+0xeb4>)
 800f140:	459b      	cmp	fp, r3
 800f142:	f47f a9c3 	bne.w	800e4cc <forward_cast+0xd0>
 800f146:	4555      	cmp	r5, sl
 800f148:	f4bf a9c0 	bcs.w	800e4cc <forward_cast+0xd0>
 800f14c:	4b52      	ldr	r3, [pc, #328]	; (800f298 <forward_cast+0xe9c>)
 800f14e:	e01a      	b.n	800f186 <forward_cast+0xd8a>
 800f150:	4958      	ldr	r1, [pc, #352]	; (800f2b4 <forward_cast+0xeb8>)
 800f152:	428c      	cmp	r4, r1
 800f154:	f002 8168 	beq.w	8011428 <forward_cast+0x302c>
 800f158:	f340 825f 	ble.w	800f61a <forward_cast+0x121e>
 800f15c:	429c      	cmp	r4, r3
 800f15e:	f002 8155 	beq.w	801140c <forward_cast+0x3010>
 800f162:	4951      	ldr	r1, [pc, #324]	; (800f2a8 <forward_cast+0xeac>)
 800f164:	428c      	cmp	r4, r1
 800f166:	f040 8571 	bne.w	800fc4c <forward_cast+0x1850>
 800f16a:	7828      	ldrb	r0, [r5, #0]
 800f16c:	3800      	subs	r0, #0
 800f16e:	bf18      	it	ne
 800f170:	2001      	movne	r0, #1
 800f172:	f300 0007 	ssat	r0, #8, r0
 800f176:	444d      	add	r5, r9
 800f178:	b240      	sxtb	r0, r0
 800f17a:	9900      	ldr	r1, [sp, #0]
 800f17c:	45aa      	cmp	sl, r5
 800f17e:	8030      	strh	r0, [r6, #0]
 800f180:	440e      	add	r6, r1
 800f182:	f67f a9a3 	bls.w	800e4cc <forward_cast+0xd0>
 800f186:	42bc      	cmp	r4, r7
 800f188:	f002 807b 	beq.w	8011282 <forward_cast+0x2e86>
 800f18c:	dde0      	ble.n	800f150 <forward_cast+0xd54>
 800f18e:	4944      	ldr	r1, [pc, #272]	; (800f2a0 <forward_cast+0xea4>)
 800f190:	428c      	cmp	r4, r1
 800f192:	f002 81ee 	beq.w	8011572 <forward_cast+0x3176>
 800f196:	f340 851b 	ble.w	800fbd0 <forward_cast+0x17d4>
 800f19a:	4294      	cmp	r4, r2
 800f19c:	f040 8556 	bne.w	800fc4c <forward_cast+0x1850>
 800f1a0:	edd5 7a00 	vldr	s15, [r5]
 800f1a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f1a8:	ee17 0a90 	vmov	r0, s15
 800f1ac:	e7e1      	b.n	800f172 <forward_cast+0xd76>
 800f1ae:	4b40      	ldr	r3, [pc, #256]	; (800f2b0 <forward_cast+0xeb4>)
 800f1b0:	459b      	cmp	fp, r3
 800f1b2:	f47f a98b 	bne.w	800e4cc <forward_cast+0xd0>
 800f1b6:	4555      	cmp	r5, sl
 800f1b8:	f4bf a988 	bcs.w	800e4cc <forward_cast+0xd0>
 800f1bc:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 800f2a0 <forward_cast+0xea4>
 800f1c0:	4f38      	ldr	r7, [pc, #224]	; (800f2a4 <forward_cast+0xea8>)
 800f1c2:	4b35      	ldr	r3, [pc, #212]	; (800f298 <forward_cast+0xe9c>)
 800f1c4:	4a38      	ldr	r2, [pc, #224]	; (800f2a8 <forward_cast+0xeac>)
 800f1c6:	e016      	b.n	800f1f6 <forward_cast+0xdfa>
 800f1c8:	493a      	ldr	r1, [pc, #232]	; (800f2b4 <forward_cast+0xeb8>)
 800f1ca:	428c      	cmp	r4, r1
 800f1cc:	f002 8146 	beq.w	801145c <forward_cast+0x3060>
 800f1d0:	f340 81f4 	ble.w	800f5bc <forward_cast+0x11c0>
 800f1d4:	429c      	cmp	r4, r3
 800f1d6:	f002 80f9 	beq.w	80113cc <forward_cast+0x2fd0>
 800f1da:	4294      	cmp	r4, r2
 800f1dc:	f040 8533 	bne.w	800fc46 <forward_cast+0x184a>
 800f1e0:	7829      	ldrb	r1, [r5, #0]
 800f1e2:	3900      	subs	r1, #0
 800f1e4:	bf18      	it	ne
 800f1e6:	2101      	movne	r1, #1
 800f1e8:	444d      	add	r5, r9
 800f1ea:	8031      	strh	r1, [r6, #0]
 800f1ec:	9900      	ldr	r1, [sp, #0]
 800f1ee:	45aa      	cmp	sl, r5
 800f1f0:	440e      	add	r6, r1
 800f1f2:	f67f a96b 	bls.w	800e4cc <forward_cast+0xd0>
 800f1f6:	4929      	ldr	r1, [pc, #164]	; (800f29c <forward_cast+0xea0>)
 800f1f8:	428c      	cmp	r4, r1
 800f1fa:	f002 8046 	beq.w	801128a <forward_cast+0x2e8e>
 800f1fe:	dde3      	ble.n	800f1c8 <forward_cast+0xdcc>
 800f200:	4544      	cmp	r4, r8
 800f202:	f002 83a2 	beq.w	801194a <forward_cast+0x354e>
 800f206:	f340 81e8 	ble.w	800f5da <forward_cast+0x11de>
 800f20a:	42bc      	cmp	r4, r7
 800f20c:	f040 851b 	bne.w	800fc46 <forward_cast+0x184a>
 800f210:	edd5 7a00 	vldr	s15, [r5]
 800f214:	eef5 7a40 	vcmp.f32	s15, #0.0
 800f218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f21c:	bf14      	ite	ne
 800f21e:	2101      	movne	r1, #1
 800f220:	2100      	moveq	r1, #0
 800f222:	e7e1      	b.n	800f1e8 <forward_cast+0xdec>
 800f224:	4b22      	ldr	r3, [pc, #136]	; (800f2b0 <forward_cast+0xeb4>)
 800f226:	459b      	cmp	fp, r3
 800f228:	f47f a950 	bne.w	800e4cc <forward_cast+0xd0>
 800f22c:	4555      	cmp	r5, sl
 800f22e:	f4bf a94d 	bcs.w	800e4cc <forward_cast+0xd0>
 800f232:	f8df 806c 	ldr.w	r8, [pc, #108]	; 800f2a0 <forward_cast+0xea4>
 800f236:	4f1b      	ldr	r7, [pc, #108]	; (800f2a4 <forward_cast+0xea8>)
 800f238:	4b17      	ldr	r3, [pc, #92]	; (800f298 <forward_cast+0xe9c>)
 800f23a:	4a1b      	ldr	r2, [pc, #108]	; (800f2a8 <forward_cast+0xeac>)
 800f23c:	e018      	b.n	800f270 <forward_cast+0xe74>
 800f23e:	491d      	ldr	r1, [pc, #116]	; (800f2b4 <forward_cast+0xeb8>)
 800f240:	428c      	cmp	r4, r1
 800f242:	f002 8526 	beq.w	8011c92 <forward_cast+0x3896>
 800f246:	f340 8240 	ble.w	800f6ca <forward_cast+0x12ce>
 800f24a:	429c      	cmp	r4, r3
 800f24c:	f002 84ea 	beq.w	8011c24 <forward_cast+0x3828>
 800f250:	4294      	cmp	r4, r2
 800f252:	f040 8521 	bne.w	800fc98 <forward_cast+0x189c>
 800f256:	7828      	ldrb	r0, [r5, #0]
 800f258:	3800      	subs	r0, #0
 800f25a:	bf18      	it	ne
 800f25c:	2001      	movne	r0, #1
 800f25e:	f300 000f 	ssat	r0, #16, r0
 800f262:	444d      	add	r5, r9
 800f264:	9900      	ldr	r1, [sp, #0]
 800f266:	8030      	strh	r0, [r6, #0]
 800f268:	45aa      	cmp	sl, r5
 800f26a:	440e      	add	r6, r1
 800f26c:	f67f a92e 	bls.w	800e4cc <forward_cast+0xd0>
 800f270:	490a      	ldr	r1, [pc, #40]	; (800f29c <forward_cast+0xea0>)
 800f272:	428c      	cmp	r4, r1
 800f274:	f002 82f1 	beq.w	801185a <forward_cast+0x345e>
 800f278:	dde1      	ble.n	800f23e <forward_cast+0xe42>
 800f27a:	4544      	cmp	r4, r8
 800f27c:	f002 85e4 	beq.w	8011e48 <forward_cast+0x3a4c>
 800f280:	f340 8462 	ble.w	800fb48 <forward_cast+0x174c>
 800f284:	42bc      	cmp	r4, r7
 800f286:	f040 8507 	bne.w	800fc98 <forward_cast+0x189c>
 800f28a:	edd5 7a00 	vldr	s15, [r5]
 800f28e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f292:	ee17 0a90 	vmov	r0, s15
 800f296:	e7e2      	b.n	800f25e <forward_cast+0xe62>
 800f298:	00042040 	.word	0x00042040
 800f29c:	00840440 	.word	0x00840440
 800f2a0:	00842040 	.word	0x00842040
 800f2a4:	01821040 	.word	0x01821040
 800f2a8:	00060440 	.word	0x00060440
 800f2ac:	00841040 	.word	0x00841040
 800f2b0:	00840840 	.word	0x00840840
 800f2b4:	00041040 	.word	0x00041040
 800f2b8:	4bb7      	ldr	r3, [pc, #732]	; (800f598 <forward_cast+0x119c>)
 800f2ba:	459b      	cmp	fp, r3
 800f2bc:	f000 8543 	beq.w	800fd46 <forward_cast+0x194a>
 800f2c0:	4fb6      	ldr	r7, [pc, #728]	; (800f59c <forward_cast+0x11a0>)
 800f2c2:	45bb      	cmp	fp, r7
 800f2c4:	d155      	bne.n	800f372 <forward_cast+0xf76>
 800f2c6:	4555      	cmp	r5, sl
 800f2c8:	f4bf a900 	bcs.w	800e4cc <forward_cast+0xd0>
 800f2cc:	f8df 82e4 	ldr.w	r8, [pc, #740]	; 800f5b4 <forward_cast+0x11b8>
 800f2d0:	4fb3      	ldr	r7, [pc, #716]	; (800f5a0 <forward_cast+0x11a4>)
 800f2d2:	4bb4      	ldr	r3, [pc, #720]	; (800f5a4 <forward_cast+0x11a8>)
 800f2d4:	4ab4      	ldr	r2, [pc, #720]	; (800f5a8 <forward_cast+0x11ac>)
 800f2d6:	e01e      	b.n	800f316 <forward_cast+0xf1a>
 800f2d8:	49b4      	ldr	r1, [pc, #720]	; (800f5ac <forward_cast+0x11b0>)
 800f2da:	428c      	cmp	r4, r1
 800f2dc:	f002 8346 	beq.w	801196c <forward_cast+0x3570>
 800f2e0:	f340 8240 	ble.w	800f764 <forward_cast+0x1368>
 800f2e4:	429c      	cmp	r4, r3
 800f2e6:	f002 8377 	beq.w	80119d8 <forward_cast+0x35dc>
 800f2ea:	4294      	cmp	r4, r2
 800f2ec:	f040 84b1 	bne.w	800fc52 <forward_cast+0x1856>
 800f2f0:	7828      	ldrb	r0, [r5, #0]
 800f2f2:	3800      	subs	r0, #0
 800f2f4:	bf18      	it	ne
 800f2f6:	2001      	movne	r0, #1
 800f2f8:	f380 0010 	usat	r0, #16, r0
 800f2fc:	b280      	uxth	r0, r0
 800f2fe:	444d      	add	r5, r9
 800f300:	9900      	ldr	r1, [sp, #0]
 800f302:	ee07 0a90 	vmov	s15, r0
 800f306:	45aa      	cmp	sl, r5
 800f308:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f30c:	edc6 7a00 	vstr	s15, [r6]
 800f310:	440e      	add	r6, r1
 800f312:	f67f a8db 	bls.w	800e4cc <forward_cast+0xd0>
 800f316:	49a6      	ldr	r1, [pc, #664]	; (800f5b0 <forward_cast+0x11b4>)
 800f318:	428c      	cmp	r4, r1
 800f31a:	f002 8388 	beq.w	8011a2e <forward_cast+0x3632>
 800f31e:	dddb      	ble.n	800f2d8 <forward_cast+0xedc>
 800f320:	4544      	cmp	r4, r8
 800f322:	f001 86a6 	beq.w	8011072 <forward_cast+0x2c76>
 800f326:	f340 82fc 	ble.w	800f922 <forward_cast+0x1526>
 800f32a:	455c      	cmp	r4, fp
 800f32c:	f040 8491 	bne.w	800fc52 <forward_cast+0x1856>
 800f330:	edd5 7a00 	vldr	s15, [r5]
 800f334:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f338:	ee17 0a90 	vmov	r0, s15
 800f33c:	e7dc      	b.n	800f2f8 <forward_cast+0xefc>
 800f33e:	4b98      	ldr	r3, [pc, #608]	; (800f5a0 <forward_cast+0x11a4>)
 800f340:	459b      	cmp	fp, r3
 800f342:	f47f a8c3 	bne.w	800e4cc <forward_cast+0xd0>
 800f346:	4555      	cmp	r5, sl
 800f348:	f4bf a8c0 	bcs.w	800e4cc <forward_cast+0xd0>
 800f34c:	9f00      	ldr	r7, [sp, #0]
 800f34e:	4621      	mov	r1, r4
 800f350:	4628      	mov	r0, r5
 800f352:	f7fe ffdf 	bl	800e314 <_array_handle_get_as_float>
 800f356:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800f35a:	ee17 3a90 	vmov	r3, s15
 800f35e:	f383 0308 	usat	r3, #8, r3
 800f362:	444d      	add	r5, r9
 800f364:	b2db      	uxtb	r3, r3
 800f366:	45aa      	cmp	sl, r5
 800f368:	8033      	strh	r3, [r6, #0]
 800f36a:	443e      	add	r6, r7
 800f36c:	d8ef      	bhi.n	800f34e <forward_cast+0xf52>
 800f36e:	f7ff b8ad 	b.w	800e4cc <forward_cast+0xd0>
 800f372:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 800f376:	459b      	cmp	fp, r3
 800f378:	f47f a8a8 	bne.w	800e4cc <forward_cast+0xd0>
 800f37c:	4555      	cmp	r5, sl
 800f37e:	f4bf a8a5 	bcs.w	800e4cc <forward_cast+0xd0>
 800f382:	f8df 8230 	ldr.w	r8, [pc, #560]	; 800f5b4 <forward_cast+0x11b8>
 800f386:	4b87      	ldr	r3, [pc, #540]	; (800f5a4 <forward_cast+0x11a8>)
 800f388:	4a87      	ldr	r2, [pc, #540]	; (800f5a8 <forward_cast+0x11ac>)
 800f38a:	e018      	b.n	800f3be <forward_cast+0xfc2>
 800f38c:	4987      	ldr	r1, [pc, #540]	; (800f5ac <forward_cast+0x11b0>)
 800f38e:	428c      	cmp	r4, r1
 800f390:	f001 87ba 	beq.w	8011308 <forward_cast+0x2f0c>
 800f394:	f340 8210 	ble.w	800f7b8 <forward_cast+0x13bc>
 800f398:	429c      	cmp	r4, r3
 800f39a:	f001 86a4 	beq.w	80110e6 <forward_cast+0x2cea>
 800f39e:	4294      	cmp	r4, r2
 800f3a0:	f040 843e 	bne.w	800fc20 <forward_cast+0x1824>
 800f3a4:	7828      	ldrb	r0, [r5, #0]
 800f3a6:	3800      	subs	r0, #0
 800f3a8:	bf18      	it	ne
 800f3aa:	2001      	movne	r0, #1
 800f3ac:	f380 0010 	usat	r0, #16, r0
 800f3b0:	444d      	add	r5, r9
 800f3b2:	9900      	ldr	r1, [sp, #0]
 800f3b4:	8030      	strh	r0, [r6, #0]
 800f3b6:	45aa      	cmp	sl, r5
 800f3b8:	440e      	add	r6, r1
 800f3ba:	f67f a887 	bls.w	800e4cc <forward_cast+0xd0>
 800f3be:	497c      	ldr	r1, [pc, #496]	; (800f5b0 <forward_cast+0x11b4>)
 800f3c0:	428c      	cmp	r4, r1
 800f3c2:	f001 87af 	beq.w	8011324 <forward_cast+0x2f28>
 800f3c6:	dde1      	ble.n	800f38c <forward_cast+0xf90>
 800f3c8:	4544      	cmp	r4, r8
 800f3ca:	f002 814f 	beq.w	801166c <forward_cast+0x3270>
 800f3ce:	f340 8255 	ble.w	800f87c <forward_cast+0x1480>
 800f3d2:	42bc      	cmp	r4, r7
 800f3d4:	f040 8424 	bne.w	800fc20 <forward_cast+0x1824>
 800f3d8:	edd5 7a00 	vldr	s15, [r5]
 800f3dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f3e0:	ee17 0a90 	vmov	r0, s15
 800f3e4:	e7e2      	b.n	800f3ac <forward_cast+0xfb0>
 800f3e6:	4555      	cmp	r5, sl
 800f3e8:	f4bf a870 	bcs.w	800e4cc <forward_cast+0xd0>
 800f3ec:	2700      	movs	r7, #0
 800f3ee:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 800f5b4 <forward_cast+0x11b8>
 800f3f2:	e01a      	b.n	800f42a <forward_cast+0x102e>
 800f3f4:	429c      	cmp	r4, r3
 800f3f6:	f002 8356 	beq.w	8011aa6 <forward_cast+0x36aa>
 800f3fa:	f340 8236 	ble.w	800f86a <forward_cast+0x146e>
 800f3fe:	4969      	ldr	r1, [pc, #420]	; (800f5a4 <forward_cast+0x11a8>)
 800f400:	428c      	cmp	r4, r1
 800f402:	f001 85a0 	beq.w	8010f46 <forward_cast+0x2b4a>
 800f406:	f501 31f2 	add.w	r1, r1, #123904	; 0x1e400
 800f40a:	428c      	cmp	r4, r1
 800f40c:	f040 840d 	bne.w	800fc2a <forward_cast+0x182e>
 800f410:	7828      	ldrb	r0, [r5, #0]
 800f412:	3800      	subs	r0, #0
 800f414:	bf18      	it	ne
 800f416:	2001      	movne	r0, #1
 800f418:	f380 0010 	usat	r0, #16, r0
 800f41c:	444d      	add	r5, r9
 800f41e:	9900      	ldr	r1, [sp, #0]
 800f420:	55f0      	strb	r0, [r6, r7]
 800f422:	45aa      	cmp	sl, r5
 800f424:	440f      	add	r7, r1
 800f426:	f67f a851 	bls.w	800e4cc <forward_cast+0xd0>
 800f42a:	455c      	cmp	r4, fp
 800f42c:	f001 85ee 	beq.w	801100c <forward_cast+0x2c10>
 800f430:	dde0      	ble.n	800f3f4 <forward_cast+0xff8>
 800f432:	4544      	cmp	r4, r8
 800f434:	f002 86a1 	beq.w	801217a <forward_cast+0x3d7e>
 800f438:	f340 81ac 	ble.w	800f794 <forward_cast+0x1398>
 800f43c:	4957      	ldr	r1, [pc, #348]	; (800f59c <forward_cast+0x11a0>)
 800f43e:	428c      	cmp	r4, r1
 800f440:	f040 83f3 	bne.w	800fc2a <forward_cast+0x182e>
 800f444:	edd5 7a00 	vldr	s15, [r5]
 800f448:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f44c:	ee17 0a90 	vmov	r0, s15
 800f450:	e7e2      	b.n	800f418 <forward_cast+0x101c>
 800f452:	4555      	cmp	r5, sl
 800f454:	f4bf a83a 	bcs.w	800e4cc <forward_cast+0xd0>
 800f458:	f04f 0800 	mov.w	r8, #0
 800f45c:	4a51      	ldr	r2, [pc, #324]	; (800f5a4 <forward_cast+0x11a8>)
 800f45e:	e018      	b.n	800f492 <forward_cast+0x1096>
 800f460:	4952      	ldr	r1, [pc, #328]	; (800f5ac <forward_cast+0x11b0>)
 800f462:	428c      	cmp	r4, r1
 800f464:	f001 85c2 	beq.w	8010fec <forward_cast+0x2bf0>
 800f468:	f340 82a0 	ble.w	800f9ac <forward_cast+0x15b0>
 800f46c:	4294      	cmp	r4, r2
 800f46e:	f001 867c 	beq.w	801116a <forward_cast+0x2d6e>
 800f472:	494d      	ldr	r1, [pc, #308]	; (800f5a8 <forward_cast+0x11ac>)
 800f474:	428c      	cmp	r4, r1
 800f476:	f040 83c8 	bne.w	800fc0a <forward_cast+0x180e>
 800f47a:	7829      	ldrb	r1, [r5, #0]
 800f47c:	3900      	subs	r1, #0
 800f47e:	bf18      	it	ne
 800f480:	2101      	movne	r1, #1
 800f482:	444d      	add	r5, r9
 800f484:	f806 1008 	strb.w	r1, [r6, r8]
 800f488:	9900      	ldr	r1, [sp, #0]
 800f48a:	45aa      	cmp	sl, r5
 800f48c:	4488      	add	r8, r1
 800f48e:	f67f a81d 	bls.w	800e4cc <forward_cast+0xd0>
 800f492:	455c      	cmp	r4, fp
 800f494:	f000 8293 	beq.w	800f9be <forward_cast+0x15c2>
 800f498:	dde2      	ble.n	800f460 <forward_cast+0x1064>
 800f49a:	4946      	ldr	r1, [pc, #280]	; (800f5b4 <forward_cast+0x11b8>)
 800f49c:	428c      	cmp	r4, r1
 800f49e:	f002 867d 	beq.w	801219c <forward_cast+0x3da0>
 800f4a2:	f340 8362 	ble.w	800fb6a <forward_cast+0x176e>
 800f4a6:	42bc      	cmp	r4, r7
 800f4a8:	f040 83af 	bne.w	800fc0a <forward_cast+0x180e>
 800f4ac:	edd5 7a00 	vldr	s15, [r5]
 800f4b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f4b4:	edcd 7a01 	vstr	s15, [sp, #4]
 800f4b8:	f99d 1004 	ldrsb.w	r1, [sp, #4]
 800f4bc:	e7e1      	b.n	800f482 <forward_cast+0x1086>
 800f4be:	4555      	cmp	r5, sl
 800f4c0:	f4bf a804 	bcs.w	800e4cc <forward_cast+0xd0>
 800f4c4:	f04f 0800 	mov.w	r8, #0
 800f4c8:	e01c      	b.n	800f504 <forward_cast+0x1108>
 800f4ca:	4938      	ldr	r1, [pc, #224]	; (800f5ac <forward_cast+0x11b0>)
 800f4cc:	428c      	cmp	r4, r1
 800f4ce:	f001 8626 	beq.w	801111e <forward_cast+0x2d22>
 800f4d2:	f340 8153 	ble.w	800f77c <forward_cast+0x1380>
 800f4d6:	4933      	ldr	r1, [pc, #204]	; (800f5a4 <forward_cast+0x11a8>)
 800f4d8:	428c      	cmp	r4, r1
 800f4da:	f001 8612 	beq.w	8011102 <forward_cast+0x2d06>
 800f4de:	f501 31f2 	add.w	r1, r1, #123904	; 0x1e400
 800f4e2:	428c      	cmp	r4, r1
 800f4e4:	f040 839f 	bne.w	800fc26 <forward_cast+0x182a>
 800f4e8:	7828      	ldrb	r0, [r5, #0]
 800f4ea:	3800      	subs	r0, #0
 800f4ec:	bf18      	it	ne
 800f4ee:	2001      	movne	r0, #1
 800f4f0:	f300 000f 	ssat	r0, #16, r0
 800f4f4:	444d      	add	r5, r9
 800f4f6:	9900      	ldr	r1, [sp, #0]
 800f4f8:	f806 0008 	strb.w	r0, [r6, r8]
 800f4fc:	45aa      	cmp	sl, r5
 800f4fe:	4488      	add	r8, r1
 800f500:	f67e afe4 	bls.w	800e4cc <forward_cast+0xd0>
 800f504:	455c      	cmp	r4, fp
 800f506:	f001 857d 	beq.w	8011004 <forward_cast+0x2c08>
 800f50a:	ddde      	ble.n	800f4ca <forward_cast+0x10ce>
 800f50c:	4929      	ldr	r1, [pc, #164]	; (800f5b4 <forward_cast+0x11b8>)
 800f50e:	428c      	cmp	r4, r1
 800f510:	f002 82bb 	beq.w	8011a8a <forward_cast+0x368e>
 800f514:	f340 8256 	ble.w	800f9c4 <forward_cast+0x15c8>
 800f518:	4294      	cmp	r4, r2
 800f51a:	f040 8384 	bne.w	800fc26 <forward_cast+0x182a>
 800f51e:	edd5 7a00 	vldr	s15, [r5]
 800f522:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f526:	ee17 0a90 	vmov	r0, s15
 800f52a:	e7e1      	b.n	800f4f0 <forward_cast+0x10f4>
 800f52c:	4555      	cmp	r5, sl
 800f52e:	f4be afcd 	bcs.w	800e4cc <forward_cast+0xd0>
 800f532:	9f00      	ldr	r7, [sp, #0]
 800f534:	4628      	mov	r0, r5
 800f536:	4621      	mov	r1, r4
 800f538:	f7fe feec 	bl	800e314 <_array_handle_get_as_float>
 800f53c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800f540:	444d      	add	r5, r9
 800f542:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f546:	bf14      	ite	ne
 800f548:	2301      	movne	r3, #1
 800f54a:	2300      	moveq	r3, #0
 800f54c:	45aa      	cmp	sl, r5
 800f54e:	7033      	strb	r3, [r6, #0]
 800f550:	443e      	add	r6, r7
 800f552:	d8ef      	bhi.n	800f534 <forward_cast+0x1138>
 800f554:	f7fe bfba 	b.w	800e4cc <forward_cast+0xd0>
 800f558:	4917      	ldr	r1, [pc, #92]	; (800f5b8 <forward_cast+0x11bc>)
 800f55a:	428c      	cmp	r4, r1
 800f55c:	f001 8777 	beq.w	801144e <forward_cast+0x3052>
 800f560:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800f564:	428c      	cmp	r4, r1
 800f566:	f040 8363 	bne.w	800fc30 <forward_cast+0x1834>
 800f56a:	8829      	ldrh	r1, [r5, #0]
 800f56c:	ee07 1a90 	vmov	s15, r1
 800f570:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f574:	f7ff bbc8 	b.w	800ed08 <forward_cast+0x90c>
 800f578:	490f      	ldr	r1, [pc, #60]	; (800f5b8 <forward_cast+0x11bc>)
 800f57a:	428c      	cmp	r4, r1
 800f57c:	f001 877b 	beq.w	8011476 <forward_cast+0x307a>
 800f580:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800f584:	428c      	cmp	r4, r1
 800f586:	f040 8357 	bne.w	800fc38 <forward_cast+0x183c>
 800f58a:	8829      	ldrh	r1, [r5, #0]
 800f58c:	ee07 1a90 	vmov	s15, r1
 800f590:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f594:	f7ff baed 	b.w	800eb72 <forward_cast+0x776>
 800f598:	00841040 	.word	0x00841040
 800f59c:	01821040 	.word	0x01821040
 800f5a0:	00840840 	.word	0x00840840
 800f5a4:	00042040 	.word	0x00042040
 800f5a8:	00060440 	.word	0x00060440
 800f5ac:	00041040 	.word	0x00041040
 800f5b0:	00840440 	.word	0x00840440
 800f5b4:	00842040 	.word	0x00842040
 800f5b8:	00040440 	.word	0x00040440
 800f5bc:	f5a1 6140 	sub.w	r1, r1, #3072	; 0xc00
 800f5c0:	428c      	cmp	r4, r1
 800f5c2:	f43f ae0d 	beq.w	800f1e0 <forward_cast+0xde4>
 800f5c6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800f5ca:	428c      	cmp	r4, r1
 800f5cc:	f040 833b 	bne.w	800fc46 <forward_cast+0x184a>
 800f5d0:	8829      	ldrh	r1, [r5, #0]
 800f5d2:	3900      	subs	r1, #0
 800f5d4:	bf18      	it	ne
 800f5d6:	2101      	movne	r1, #1
 800f5d8:	e606      	b.n	800f1e8 <forward_cast+0xdec>
 800f5da:	455c      	cmp	r4, fp
 800f5dc:	f001 86ef 	beq.w	80113be <forward_cast+0x2fc2>
 800f5e0:	49c3      	ldr	r1, [pc, #780]	; (800f8f0 <forward_cast+0x14f4>)
 800f5e2:	428c      	cmp	r4, r1
 800f5e4:	f040 832f 	bne.w	800fc46 <forward_cast+0x184a>
 800f5e8:	edd5 7a00 	vldr	s15, [r5]
 800f5ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f5f0:	eef5 7a40 	vcmp.f32	s15, #0.0
 800f5f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5f8:	bf14      	ite	ne
 800f5fa:	2101      	movne	r1, #1
 800f5fc:	2100      	moveq	r1, #0
 800f5fe:	e5f3      	b.n	800f1e8 <forward_cast+0xdec>
 800f600:	f5a1 6140 	sub.w	r1, r1, #3072	; 0xc00
 800f604:	428c      	cmp	r4, r1
 800f606:	f001 8719 	beq.w	801143c <forward_cast+0x3040>
 800f60a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800f60e:	428c      	cmp	r4, r1
 800f610:	f040 8316 	bne.w	800fc40 <forward_cast+0x1844>
 800f614:	8828      	ldrh	r0, [r5, #0]
 800f616:	f7ff ba13 	b.w	800ea40 <forward_cast+0x644>
 800f61a:	f5a1 6140 	sub.w	r1, r1, #3072	; 0xc00
 800f61e:	428c      	cmp	r4, r1
 800f620:	f002 8393 	beq.w	8011d4a <forward_cast+0x394e>
 800f624:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800f628:	428c      	cmp	r4, r1
 800f62a:	f040 830f 	bne.w	800fc4c <forward_cast+0x1850>
 800f62e:	8828      	ldrh	r0, [r5, #0]
 800f630:	e59f      	b.n	800f172 <forward_cast+0xd76>
 800f632:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800f636:	428c      	cmp	r4, r1
 800f638:	f002 813a 	beq.w	80118b0 <forward_cast+0x34b4>
 800f63c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800f640:	428c      	cmp	r4, r1
 800f642:	f040 831b 	bne.w	800fc7c <forward_cast+0x1880>
 800f646:	8828      	ldrh	r0, [r5, #0]
 800f648:	e555      	b.n	800f0f6 <forward_cast+0xcfa>
 800f64a:	42bc      	cmp	r4, r7
 800f64c:	f002 82e7 	beq.w	8011c1e <forward_cast+0x3822>
 800f650:	49a8      	ldr	r1, [pc, #672]	; (800f8f4 <forward_cast+0x14f8>)
 800f652:	428c      	cmp	r4, r1
 800f654:	f040 8306 	bne.w	800fc64 <forward_cast+0x1868>
 800f658:	8828      	ldrh	r0, [r5, #0]
 800f65a:	f7ff b875 	b.w	800e748 <forward_cast+0x34c>
 800f65e:	f5a1 6140 	sub.w	r1, r1, #3072	; 0xc00
 800f662:	428c      	cmp	r4, r1
 800f664:	f002 8197 	beq.w	8011996 <forward_cast+0x359a>
 800f668:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800f66c:	428c      	cmp	r4, r1
 800f66e:	f040 830b 	bne.w	800fc88 <forward_cast+0x188c>
 800f672:	8829      	ldrh	r1, [r5, #0]
 800f674:	ee07 1a90 	vmov	s15, r1
 800f678:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f67c:	f7ff bb84 	b.w	800ed88 <forward_cast+0x98c>
 800f680:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800f684:	428c      	cmp	r4, r1
 800f686:	f002 837a 	beq.w	8011d7e <forward_cast+0x3982>
 800f68a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800f68e:	428c      	cmp	r4, r1
 800f690:	f040 82e5 	bne.w	800fc5e <forward_cast+0x1862>
 800f694:	f9b5 1000 	ldrsh.w	r1, [r5]
 800f698:	f7ff bbec 	b.w	800ee74 <forward_cast+0xa78>
 800f69c:	4544      	cmp	r4, r8
 800f69e:	f002 8361 	beq.w	8011d64 <forward_cast+0x3968>
 800f6a2:	4994      	ldr	r1, [pc, #592]	; (800f8f4 <forward_cast+0x14f8>)
 800f6a4:	428c      	cmp	r4, r1
 800f6a6:	f040 82e6 	bne.w	800fc76 <forward_cast+0x187a>
 800f6aa:	8828      	ldrh	r0, [r5, #0]
 800f6ac:	f7fe bf47 	b.w	800e53e <forward_cast+0x142>
 800f6b0:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800f6b4:	428c      	cmp	r4, r1
 800f6b6:	f002 82f6 	beq.w	8011ca6 <forward_cast+0x38aa>
 800f6ba:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800f6be:	428c      	cmp	r4, r1
 800f6c0:	f040 82d3 	bne.w	800fc6a <forward_cast+0x186e>
 800f6c4:	8828      	ldrh	r0, [r5, #0]
 800f6c6:	f7ff b9fb 	b.w	800eac0 <forward_cast+0x6c4>
 800f6ca:	f5a1 6140 	sub.w	r1, r1, #3072	; 0xc00
 800f6ce:	428c      	cmp	r4, r1
 800f6d0:	f002 81aa 	beq.w	8011a28 <forward_cast+0x362c>
 800f6d4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800f6d8:	428c      	cmp	r4, r1
 800f6da:	f040 82dd 	bne.w	800fc98 <forward_cast+0x189c>
 800f6de:	8828      	ldrh	r0, [r5, #0]
 800f6e0:	e5bd      	b.n	800f25e <forward_cast+0xe62>
 800f6e2:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800f6e6:	428c      	cmp	r4, r1
 800f6e8:	f002 82d0 	beq.w	8011c8c <forward_cast+0x3890>
 800f6ec:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800f6f0:	428c      	cmp	r4, r1
 800f6f2:	f040 82b1 	bne.w	800fc58 <forward_cast+0x185c>
 800f6f6:	f9b5 1000 	ldrsh.w	r1, [r5]
 800f6fa:	f7ff bb7f 	b.w	800edfc <forward_cast+0xa00>
 800f6fe:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800f702:	428c      	cmp	r4, r1
 800f704:	f002 82f8 	beq.w	8011cf8 <forward_cast+0x38fc>
 800f708:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800f70c:	428c      	cmp	r4, r1
 800f70e:	f040 82b8 	bne.w	800fc82 <forward_cast+0x1886>
 800f712:	8829      	ldrh	r1, [r5, #0]
 800f714:	f7ff b870 	b.w	800e7f8 <forward_cast+0x3fc>
 800f718:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800f71c:	428c      	cmp	r4, r1
 800f71e:	f002 82a7 	beq.w	8011c70 <forward_cast+0x3874>
 800f722:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800f726:	428c      	cmp	r4, r1
 800f728:	f040 82a2 	bne.w	800fc70 <forward_cast+0x1874>
 800f72c:	8828      	ldrh	r0, [r5, #0]
 800f72e:	e465      	b.n	800effc <forward_cast+0xc00>
 800f730:	4294      	cmp	r4, r2
 800f732:	f002 814e 	beq.w	80119d2 <forward_cast+0x35d6>
 800f736:	496f      	ldr	r1, [pc, #444]	; (800f8f4 <forward_cast+0x14f8>)
 800f738:	428c      	cmp	r4, r1
 800f73a:	f040 82b0 	bne.w	800fc9e <forward_cast+0x18a2>
 800f73e:	8828      	ldrh	r0, [r5, #0]
 800f740:	f7ff b8a4 	b.w	800e88c <forward_cast+0x490>
 800f744:	42bc      	cmp	r4, r7
 800f746:	d0a5      	beq.n	800f694 <forward_cast+0x1298>
 800f748:	455c      	cmp	r4, fp
 800f74a:	f040 8288 	bne.w	800fc5e <forward_cast+0x1862>
 800f74e:	edd5 7a00 	vldr	s15, [r5]
 800f752:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f756:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f75a:	ee17 1a90 	vmov	r1, s15
 800f75e:	b209      	sxth	r1, r1
 800f760:	f7ff bb88 	b.w	800ee74 <forward_cast+0xa78>
 800f764:	f5a1 6140 	sub.w	r1, r1, #3072	; 0xc00
 800f768:	428c      	cmp	r4, r1
 800f76a:	f001 84e2 	beq.w	8011132 <forward_cast+0x2d36>
 800f76e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800f772:	428c      	cmp	r4, r1
 800f774:	f040 826d 	bne.w	800fc52 <forward_cast+0x1856>
 800f778:	8828      	ldrh	r0, [r5, #0]
 800f77a:	e5bd      	b.n	800f2f8 <forward_cast+0xefc>
 800f77c:	f5a1 6140 	sub.w	r1, r1, #3072	; 0xc00
 800f780:	428c      	cmp	r4, r1
 800f782:	f002 8508 	beq.w	8012196 <forward_cast+0x3d9a>
 800f786:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800f78a:	428c      	cmp	r4, r1
 800f78c:	f040 824b 	bne.w	800fc26 <forward_cast+0x182a>
 800f790:	8828      	ldrh	r0, [r5, #0]
 800f792:	e6ad      	b.n	800f4f0 <forward_cast+0x10f4>
 800f794:	4958      	ldr	r1, [pc, #352]	; (800f8f8 <forward_cast+0x14fc>)
 800f796:	428c      	cmp	r4, r1
 800f798:	f001 85c0 	beq.w	801131c <forward_cast+0x2f20>
 800f79c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f7a0:	428c      	cmp	r4, r1
 800f7a2:	f040 8242 	bne.w	800fc2a <forward_cast+0x182e>
 800f7a6:	edd5 7a00 	vldr	s15, [r5]
 800f7aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f7ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f7b2:	ee17 0a90 	vmov	r0, s15
 800f7b6:	e62f      	b.n	800f418 <forward_cast+0x101c>
 800f7b8:	f5a1 6140 	sub.w	r1, r1, #3072	; 0xc00
 800f7bc:	428c      	cmp	r4, r1
 800f7be:	f002 843a 	beq.w	8012036 <forward_cast+0x3c3a>
 800f7c2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800f7c6:	428c      	cmp	r4, r1
 800f7c8:	f040 822a 	bne.w	800fc20 <forward_cast+0x1824>
 800f7cc:	8828      	ldrh	r0, [r5, #0]
 800f7ce:	e5ed      	b.n	800f3ac <forward_cast+0xfb0>
 800f7d0:	455c      	cmp	r4, fp
 800f7d2:	f001 84f2 	beq.w	80111ba <forward_cast+0x2dbe>
 800f7d6:	429c      	cmp	r4, r3
 800f7d8:	f040 8219 	bne.w	800fc0e <forward_cast+0x1812>
 800f7dc:	edd5 7a00 	vldr	s15, [r5]
 800f7e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f7e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f7e8:	ee17 0a90 	vmov	r0, s15
 800f7ec:	f7fe bf49 	b.w	800e682 <forward_cast+0x286>
 800f7f0:	42bc      	cmp	r4, r7
 800f7f2:	f001 867c 	beq.w	80114ee <forward_cast+0x30f2>
 800f7f6:	493f      	ldr	r1, [pc, #252]	; (800f8f4 <forward_cast+0x14f8>)
 800f7f8:	428c      	cmp	r4, r1
 800f7fa:	f040 8208 	bne.w	800fc0e <forward_cast+0x1812>
 800f7fe:	8828      	ldrh	r0, [r5, #0]
 800f800:	f7fe bf3f 	b.w	800e682 <forward_cast+0x286>
 800f804:	42bc      	cmp	r4, r7
 800f806:	d06f      	beq.n	800f8e8 <forward_cast+0x14ec>
 800f808:	455c      	cmp	r4, fp
 800f80a:	f040 824e 	bne.w	800fcaa <forward_cast+0x18ae>
 800f80e:	edd5 7a00 	vldr	s15, [r5]
 800f812:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f816:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f81a:	ee17 1a90 	vmov	r1, s15
 800f81e:	b289      	uxth	r1, r1
 800f820:	f7fe bede 	b.w	800e5e0 <forward_cast+0x1e4>
 800f824:	f5a1 51c0 	sub.w	r1, r1, #6144	; 0x1800
 800f828:	428c      	cmp	r4, r1
 800f82a:	f002 8053 	beq.w	80118d4 <forward_cast+0x34d8>
 800f82e:	4294      	cmp	r4, r2
 800f830:	f040 81f3 	bne.w	800fc1a <forward_cast+0x181e>
 800f834:	edd5 7a00 	vldr	s15, [r5]
 800f838:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f83c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f840:	ee17 0a90 	vmov	r0, s15
 800f844:	f7ff b8aa 	b.w	800e99c <forward_cast+0x5a0>
 800f848:	42bc      	cmp	r4, r7
 800f84a:	f000 80d4 	beq.w	800f9f6 <forward_cast+0x15fa>
 800f84e:	455c      	cmp	r4, fp
 800f850:	f040 8228 	bne.w	800fca4 <forward_cast+0x18a8>
 800f854:	edd5 7a00 	vldr	s15, [r5]
 800f858:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f85c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f860:	ee17 1a90 	vmov	r1, s15
 800f864:	b209      	sxth	r1, r1
 800f866:	f7ff bb41 	b.w	800eeec <forward_cast+0xaf0>
 800f86a:	4294      	cmp	r4, r2
 800f86c:	f001 870c 	beq.w	8011688 <forward_cast+0x328c>
 800f870:	4920      	ldr	r1, [pc, #128]	; (800f8f4 <forward_cast+0x14f8>)
 800f872:	428c      	cmp	r4, r1
 800f874:	f040 81d9 	bne.w	800fc2a <forward_cast+0x182e>
 800f878:	8828      	ldrh	r0, [r5, #0]
 800f87a:	e5cd      	b.n	800f418 <forward_cast+0x101c>
 800f87c:	455c      	cmp	r4, fp
 800f87e:	f001 842e 	beq.w	80110de <forward_cast+0x2ce2>
 800f882:	491b      	ldr	r1, [pc, #108]	; (800f8f0 <forward_cast+0x14f4>)
 800f884:	428c      	cmp	r4, r1
 800f886:	f040 81cb 	bne.w	800fc20 <forward_cast+0x1824>
 800f88a:	edd5 7a00 	vldr	s15, [r5]
 800f88e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f892:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f896:	ee17 0a90 	vmov	r0, s15
 800f89a:	e587      	b.n	800f3ac <forward_cast+0xfb0>
 800f89c:	4917      	ldr	r1, [pc, #92]	; (800f8fc <forward_cast+0x1500>)
 800f89e:	428c      	cmp	r4, r1
 800f8a0:	f002 82fd 	beq.w	8011e9e <forward_cast+0x3aa2>
 800f8a4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800f8a8:	428c      	cmp	r4, r1
 800f8aa:	f040 81b6 	bne.w	800fc1a <forward_cast+0x181e>
 800f8ae:	8828      	ldrh	r0, [r5, #0]
 800f8b0:	f7ff b874 	b.w	800e99c <forward_cast+0x5a0>
 800f8b4:	42bc      	cmp	r4, r7
 800f8b6:	d076      	beq.n	800f9a6 <forward_cast+0x15aa>
 800f8b8:	455c      	cmp	r4, fp
 800f8ba:	f040 81ab 	bne.w	800fc14 <forward_cast+0x1818>
 800f8be:	edd5 7a00 	vldr	s15, [r5]
 800f8c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f8c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f8ca:	ee17 1a90 	vmov	r1, s15
 800f8ce:	b289      	uxth	r1, r1
 800f8d0:	f7ff b828 	b.w	800e924 <forward_cast+0x528>
 800f8d4:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800f8d8:	428c      	cmp	r4, r1
 800f8da:	f001 861d 	beq.w	8011518 <forward_cast+0x311c>
 800f8de:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800f8e2:	428c      	cmp	r4, r1
 800f8e4:	f040 81e1 	bne.w	800fcaa <forward_cast+0x18ae>
 800f8e8:	8829      	ldrh	r1, [r5, #0]
 800f8ea:	f7fe be79 	b.w	800e5e0 <forward_cast+0x1e4>
 800f8ee:	bf00      	nop
 800f8f0:	00841040 	.word	0x00841040
 800f8f4:	00040840 	.word	0x00040840
 800f8f8:	00840840 	.word	0x00840840
 800f8fc:	00040440 	.word	0x00040440
 800f900:	455c      	cmp	r4, fp
 800f902:	d043      	beq.n	800f98c <forward_cast+0x1590>
 800f904:	429c      	cmp	r4, r3
 800f906:	f040 817a 	bne.w	800fbfe <forward_cast+0x1802>
 800f90a:	edd5 7a00 	vldr	s15, [r5]
 800f90e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f912:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f916:	edcd 7a01 	vstr	s15, [sp, #4]
 800f91a:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800f91e:	f7ff b99f 	b.w	800ec60 <forward_cast+0x864>
 800f922:	42bc      	cmp	r4, r7
 800f924:	f001 8621 	beq.w	801156a <forward_cast+0x316e>
 800f928:	49d9      	ldr	r1, [pc, #868]	; (800fc90 <forward_cast+0x1894>)
 800f92a:	428c      	cmp	r4, r1
 800f92c:	f040 8191 	bne.w	800fc52 <forward_cast+0x1856>
 800f930:	edd5 7a00 	vldr	s15, [r5]
 800f934:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f938:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f93c:	ee17 0a90 	vmov	r0, s15
 800f940:	e4da      	b.n	800f2f8 <forward_cast+0xefc>
 800f942:	455c      	cmp	r4, fp
 800f944:	f001 8469 	beq.w	801121a <forward_cast+0x2e1e>
 800f948:	429c      	cmp	r4, r3
 800f94a:	f040 818b 	bne.w	800fc64 <forward_cast+0x1868>
 800f94e:	edd5 7a00 	vldr	s15, [r5]
 800f952:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f956:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f95a:	ee17 0a90 	vmov	r0, s15
 800f95e:	f7fe bef3 	b.w	800e748 <forward_cast+0x34c>
 800f962:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800f966:	428c      	cmp	r4, r1
 800f968:	d004      	beq.n	800f974 <forward_cast+0x1578>
 800f96a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800f96e:	428c      	cmp	r4, r1
 800f970:	f040 8148 	bne.w	800fc04 <forward_cast+0x1808>
 800f974:	7829      	ldrb	r1, [r5, #0]
 800f976:	f7ff b934 	b.w	800ebe2 <forward_cast+0x7e6>
 800f97a:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800f97e:	428c      	cmp	r4, r1
 800f980:	d004      	beq.n	800f98c <forward_cast+0x1590>
 800f982:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800f986:	428c      	cmp	r4, r1
 800f988:	f040 8139 	bne.w	800fbfe <forward_cast+0x1802>
 800f98c:	7829      	ldrb	r1, [r5, #0]
 800f98e:	f7ff b967 	b.w	800ec60 <forward_cast+0x864>
 800f992:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800f996:	428c      	cmp	r4, r1
 800f998:	f001 833c 	beq.w	8011014 <forward_cast+0x2c18>
 800f99c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800f9a0:	428c      	cmp	r4, r1
 800f9a2:	f040 8137 	bne.w	800fc14 <forward_cast+0x1818>
 800f9a6:	8829      	ldrh	r1, [r5, #0]
 800f9a8:	f7fe bfbc 	b.w	800e924 <forward_cast+0x528>
 800f9ac:	f5a1 6140 	sub.w	r1, r1, #3072	; 0xc00
 800f9b0:	428c      	cmp	r4, r1
 800f9b2:	d004      	beq.n	800f9be <forward_cast+0x15c2>
 800f9b4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800f9b8:	428c      	cmp	r4, r1
 800f9ba:	f040 8126 	bne.w	800fc0a <forward_cast+0x180e>
 800f9be:	f995 1000 	ldrsb.w	r1, [r5]
 800f9c2:	e55e      	b.n	800f482 <forward_cast+0x1086>
 800f9c4:	42bc      	cmp	r4, r7
 800f9c6:	f002 80ff 	beq.w	8011bc8 <forward_cast+0x37cc>
 800f9ca:	429c      	cmp	r4, r3
 800f9cc:	f040 812b 	bne.w	800fc26 <forward_cast+0x182a>
 800f9d0:	edd5 7a00 	vldr	s15, [r5]
 800f9d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f9d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f9dc:	ee17 0a90 	vmov	r0, s15
 800f9e0:	e586      	b.n	800f4f0 <forward_cast+0x10f4>
 800f9e2:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800f9e6:	428c      	cmp	r4, r1
 800f9e8:	f001 865f 	beq.w	80116aa <forward_cast+0x32ae>
 800f9ec:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800f9f0:	428c      	cmp	r4, r1
 800f9f2:	f040 8157 	bne.w	800fca4 <forward_cast+0x18a8>
 800f9f6:	f9b5 1000 	ldrsh.w	r1, [r5]
 800f9fa:	f7ff ba77 	b.w	800eeec <forward_cast+0xaf0>
 800f9fe:	455c      	cmp	r4, fp
 800fa00:	d0b8      	beq.n	800f974 <forward_cast+0x1578>
 800fa02:	429c      	cmp	r4, r3
 800fa04:	f040 80fe 	bne.w	800fc04 <forward_cast+0x1808>
 800fa08:	edd5 7a00 	vldr	s15, [r5]
 800fa0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fa10:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fa14:	edcd 7a01 	vstr	s15, [sp, #4]
 800fa18:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800fa1c:	f7ff b8e1 	b.w	800ebe2 <forward_cast+0x7e6>
 800fa20:	499c      	ldr	r1, [pc, #624]	; (800fc94 <forward_cast+0x1898>)
 800fa22:	428c      	cmp	r4, r1
 800fa24:	f001 840b 	beq.w	801123e <forward_cast+0x2e42>
 800fa28:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fa2c:	428c      	cmp	r4, r1
 800fa2e:	f040 8103 	bne.w	800fc38 <forward_cast+0x183c>
 800fa32:	edd5 7a00 	vldr	s15, [r5]
 800fa36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fa3a:	f7ff b89a 	b.w	800eb72 <forward_cast+0x776>
 800fa3e:	4995      	ldr	r1, [pc, #596]	; (800fc94 <forward_cast+0x1898>)
 800fa40:	428c      	cmp	r4, r1
 800fa42:	f001 8412 	beq.w	801126a <forward_cast+0x2e6e>
 800fa46:	429c      	cmp	r4, r3
 800fa48:	f040 810f 	bne.w	800fc6a <forward_cast+0x186e>
 800fa4c:	edd5 7a00 	vldr	s15, [r5]
 800fa50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fa54:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fa58:	ee17 0a90 	vmov	r0, s15
 800fa5c:	f7ff b830 	b.w	800eac0 <forward_cast+0x6c4>
 800fa60:	f5a1 51c0 	sub.w	r1, r1, #6144	; 0x1800
 800fa64:	428c      	cmp	r4, r1
 800fa66:	f001 875a 	beq.w	801191e <forward_cast+0x3522>
 800fa6a:	4544      	cmp	r4, r8
 800fa6c:	f040 80e8 	bne.w	800fc40 <forward_cast+0x1844>
 800fa70:	edd5 7a00 	vldr	s15, [r5]
 800fa74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fa78:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fa7c:	ee17 0a90 	vmov	r0, s15
 800fa80:	f7fe bfde 	b.w	800ea40 <forward_cast+0x644>
 800fa84:	429c      	cmp	r4, r3
 800fa86:	f002 8370 	beq.w	801216a <forward_cast+0x3d6e>
 800fa8a:	42bc      	cmp	r4, r7
 800fa8c:	f040 80fc 	bne.w	800fc88 <forward_cast+0x188c>
 800fa90:	edd5 7a00 	vldr	s15, [r5]
 800fa94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fa98:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fa9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800faa0:	f7ff b972 	b.w	800ed88 <forward_cast+0x98c>
 800faa4:	42bc      	cmp	r4, r7
 800faa6:	f002 8309 	beq.w	80120bc <forward_cast+0x3cc0>
 800faaa:	455c      	cmp	r4, fp
 800faac:	f040 80e6 	bne.w	800fc7c <forward_cast+0x1880>
 800fab0:	edd5 7a00 	vldr	s15, [r5]
 800fab4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fab8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fabc:	ee17 0a90 	vmov	r0, s15
 800fac0:	f7ff bb19 	b.w	800f0f6 <forward_cast+0xcfa>
 800fac4:	42bc      	cmp	r4, r7
 800fac6:	f43f ae24 	beq.w	800f712 <forward_cast+0x1316>
 800faca:	455c      	cmp	r4, fp
 800facc:	f040 80d9 	bne.w	800fc82 <forward_cast+0x1886>
 800fad0:	edd5 7a00 	vldr	s15, [r5]
 800fad4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fad8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fadc:	ee17 1a90 	vmov	r1, s15
 800fae0:	b289      	uxth	r1, r1
 800fae2:	f7fe be89 	b.w	800e7f8 <forward_cast+0x3fc>
 800fae6:	429c      	cmp	r4, r3
 800fae8:	f001 8512 	beq.w	8011510 <forward_cast+0x3114>
 800faec:	4294      	cmp	r4, r2
 800faee:	f040 80c2 	bne.w	800fc76 <forward_cast+0x187a>
 800faf2:	edd5 7a00 	vldr	s15, [r5]
 800faf6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fafa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fafe:	ee17 0a90 	vmov	r0, s15
 800fb02:	f7fe bd1c 	b.w	800e53e <forward_cast+0x142>
 800fb06:	429c      	cmp	r4, r3
 800fb08:	f001 86f7 	beq.w	80118fa <forward_cast+0x34fe>
 800fb0c:	4294      	cmp	r4, r2
 800fb0e:	f040 80af 	bne.w	800fc70 <forward_cast+0x1874>
 800fb12:	edd5 7a00 	vldr	s15, [r5]
 800fb16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fb1a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fb1e:	ee17 0a90 	vmov	r0, s15
 800fb22:	f7ff ba6b 	b.w	800effc <forward_cast+0xc00>
 800fb26:	42bc      	cmp	r4, r7
 800fb28:	f43f ade5 	beq.w	800f6f6 <forward_cast+0x12fa>
 800fb2c:	455c      	cmp	r4, fp
 800fb2e:	f040 8093 	bne.w	800fc58 <forward_cast+0x185c>
 800fb32:	edd5 7a00 	vldr	s15, [r5]
 800fb36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fb3a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fb3e:	ee17 1a90 	vmov	r1, s15
 800fb42:	b209      	sxth	r1, r1
 800fb44:	f7ff b95a 	b.w	800edfc <forward_cast+0xa00>
 800fb48:	455c      	cmp	r4, fp
 800fb4a:	f002 8337 	beq.w	80121bc <forward_cast+0x3dc0>
 800fb4e:	4950      	ldr	r1, [pc, #320]	; (800fc90 <forward_cast+0x1894>)
 800fb50:	428c      	cmp	r4, r1
 800fb52:	f040 80a1 	bne.w	800fc98 <forward_cast+0x189c>
 800fb56:	edd5 7a00 	vldr	s15, [r5]
 800fb5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fb5e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fb62:	ee17 0a90 	vmov	r0, s15
 800fb66:	f7ff bb7a 	b.w	800f25e <forward_cast+0xe62>
 800fb6a:	f5a1 51c0 	sub.w	r1, r1, #6144	; 0x1800
 800fb6e:	428c      	cmp	r4, r1
 800fb70:	f43f af25 	beq.w	800f9be <forward_cast+0x15c2>
 800fb74:	429c      	cmp	r4, r3
 800fb76:	d148      	bne.n	800fc0a <forward_cast+0x180e>
 800fb78:	edd5 7a00 	vldr	s15, [r5]
 800fb7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fb80:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fb84:	edcd 7a01 	vstr	s15, [sp, #4]
 800fb88:	f99d 1004 	ldrsb.w	r1, [sp, #4]
 800fb8c:	e479      	b.n	800f482 <forward_cast+0x1086>
 800fb8e:	429c      	cmp	r4, r3
 800fb90:	f001 86d7 	beq.w	8011942 <forward_cast+0x3546>
 800fb94:	f5a1 5180 	sub.w	r1, r1, #4096	; 0x1000
 800fb98:	428c      	cmp	r4, r1
 800fb9a:	f040 8080 	bne.w	800fc9e <forward_cast+0x18a2>
 800fb9e:	edd5 7a00 	vldr	s15, [r5]
 800fba2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fba6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fbaa:	ee17 0a90 	vmov	r0, s15
 800fbae:	f7fe be6d 	b.w	800e88c <forward_cast+0x490>
 800fbb2:	429c      	cmp	r4, r3
 800fbb4:	f001 84eb 	beq.w	801158e <forward_cast+0x3192>
 800fbb8:	4294      	cmp	r4, r2
 800fbba:	d139      	bne.n	800fc30 <forward_cast+0x1834>
 800fbbc:	edd5 7a00 	vldr	s15, [r5]
 800fbc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fbc4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fbc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fbcc:	f7ff b89c 	b.w	800ed08 <forward_cast+0x90c>
 800fbd0:	455c      	cmp	r4, fp
 800fbd2:	f001 8461 	beq.w	8011498 <forward_cast+0x309c>
 800fbd6:	4544      	cmp	r4, r8
 800fbd8:	d138      	bne.n	800fc4c <forward_cast+0x1850>
 800fbda:	edd5 7a00 	vldr	s15, [r5]
 800fbde:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fbe2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fbe6:	ee17 0a90 	vmov	r0, s15
 800fbea:	f7ff bac2 	b.w	800f172 <forward_cast+0xd76>
 800fbee:	9b00      	ldr	r3, [sp, #0]
 800fbf0:	45aa      	cmp	sl, r5
 800fbf2:	6037      	str	r7, [r6, #0]
 800fbf4:	441e      	add	r6, r3
 800fbf6:	f63f aa4a 	bhi.w	800f08e <forward_cast+0xc92>
 800fbfa:	f7fe bc67 	b.w	800e4cc <forward_cast+0xd0>
 800fbfe:	2100      	movs	r1, #0
 800fc00:	f7ff b82e 	b.w	800ec60 <forward_cast+0x864>
 800fc04:	2100      	movs	r1, #0
 800fc06:	f7fe bfec 	b.w	800ebe2 <forward_cast+0x7e6>
 800fc0a:	2100      	movs	r1, #0
 800fc0c:	e439      	b.n	800f482 <forward_cast+0x1086>
 800fc0e:	2000      	movs	r0, #0
 800fc10:	f7fe bd37 	b.w	800e682 <forward_cast+0x286>
 800fc14:	2100      	movs	r1, #0
 800fc16:	f7fe be85 	b.w	800e924 <forward_cast+0x528>
 800fc1a:	2000      	movs	r0, #0
 800fc1c:	f7fe bebe 	b.w	800e99c <forward_cast+0x5a0>
 800fc20:	2000      	movs	r0, #0
 800fc22:	f7ff bbc3 	b.w	800f3ac <forward_cast+0xfb0>
 800fc26:	2000      	movs	r0, #0
 800fc28:	e462      	b.n	800f4f0 <forward_cast+0x10f4>
 800fc2a:	2000      	movs	r0, #0
 800fc2c:	f7ff bbf4 	b.w	800f418 <forward_cast+0x101c>
 800fc30:	eef0 7a48 	vmov.f32	s15, s16
 800fc34:	f7ff b868 	b.w	800ed08 <forward_cast+0x90c>
 800fc38:	eef0 7a48 	vmov.f32	s15, s16
 800fc3c:	f7fe bf99 	b.w	800eb72 <forward_cast+0x776>
 800fc40:	2000      	movs	r0, #0
 800fc42:	f7fe befd 	b.w	800ea40 <forward_cast+0x644>
 800fc46:	2100      	movs	r1, #0
 800fc48:	f7ff bace 	b.w	800f1e8 <forward_cast+0xdec>
 800fc4c:	2000      	movs	r0, #0
 800fc4e:	f7ff ba90 	b.w	800f172 <forward_cast+0xd76>
 800fc52:	2000      	movs	r0, #0
 800fc54:	f7ff bb50 	b.w	800f2f8 <forward_cast+0xefc>
 800fc58:	2100      	movs	r1, #0
 800fc5a:	f7ff b8cf 	b.w	800edfc <forward_cast+0xa00>
 800fc5e:	2100      	movs	r1, #0
 800fc60:	f7ff b908 	b.w	800ee74 <forward_cast+0xa78>
 800fc64:	2000      	movs	r0, #0
 800fc66:	f7fe bd6f 	b.w	800e748 <forward_cast+0x34c>
 800fc6a:	2000      	movs	r0, #0
 800fc6c:	f7fe bf28 	b.w	800eac0 <forward_cast+0x6c4>
 800fc70:	2000      	movs	r0, #0
 800fc72:	f7ff b9c3 	b.w	800effc <forward_cast+0xc00>
 800fc76:	2000      	movs	r0, #0
 800fc78:	f7fe bc61 	b.w	800e53e <forward_cast+0x142>
 800fc7c:	2000      	movs	r0, #0
 800fc7e:	f7ff ba3a 	b.w	800f0f6 <forward_cast+0xcfa>
 800fc82:	2100      	movs	r1, #0
 800fc84:	f7fe bdb8 	b.w	800e7f8 <forward_cast+0x3fc>
 800fc88:	eef0 7a48 	vmov.f32	s15, s16
 800fc8c:	f7ff b87c 	b.w	800ed88 <forward_cast+0x98c>
 800fc90:	00841040 	.word	0x00841040
 800fc94:	00840840 	.word	0x00840840
 800fc98:	2000      	movs	r0, #0
 800fc9a:	f7ff bae0 	b.w	800f25e <forward_cast+0xe62>
 800fc9e:	2000      	movs	r0, #0
 800fca0:	f7fe bdf4 	b.w	800e88c <forward_cast+0x490>
 800fca4:	2100      	movs	r1, #0
 800fca6:	f7ff b921 	b.w	800eeec <forward_cast+0xaf0>
 800fcaa:	2100      	movs	r1, #0
 800fcac:	f7fe bc98 	b.w	800e5e0 <forward_cast+0x1e4>
 800fcb0:	4555      	cmp	r5, sl
 800fcb2:	f4be ac0b 	bcs.w	800e4cc <forward_cast+0xd0>
 800fcb6:	4f9c      	ldr	r7, [pc, #624]	; (800ff28 <forward_cast+0x1b2c>)
 800fcb8:	4b9c      	ldr	r3, [pc, #624]	; (800ff2c <forward_cast+0x1b30>)
 800fcba:	4a9d      	ldr	r2, [pc, #628]	; (800ff30 <forward_cast+0x1b34>)
 800fcbc:	e014      	b.n	800fce8 <forward_cast+0x18ec>
 800fcbe:	499d      	ldr	r1, [pc, #628]	; (800ff34 <forward_cast+0x1b38>)
 800fcc0:	428c      	cmp	r4, r1
 800fcc2:	f001 8764 	beq.w	8011b8e <forward_cast+0x3792>
 800fcc6:	dd21      	ble.n	800fd0c <forward_cast+0x1910>
 800fcc8:	429c      	cmp	r4, r3
 800fcca:	f001 8707 	beq.w	8011adc <forward_cast+0x36e0>
 800fcce:	4294      	cmp	r4, r2
 800fcd0:	d137      	bne.n	800fd42 <forward_cast+0x1946>
 800fcd2:	7828      	ldrb	r0, [r5, #0]
 800fcd4:	3800      	subs	r0, #0
 800fcd6:	bf18      	it	ne
 800fcd8:	2001      	movne	r0, #1
 800fcda:	444d      	add	r5, r9
 800fcdc:	9900      	ldr	r1, [sp, #0]
 800fcde:	6030      	str	r0, [r6, #0]
 800fce0:	45aa      	cmp	sl, r5
 800fce2:	440e      	add	r6, r1
 800fce4:	f67e abf2 	bls.w	800e4cc <forward_cast+0xd0>
 800fce8:	4544      	cmp	r4, r8
 800fcea:	f001 8709 	beq.w	8011b00 <forward_cast+0x3704>
 800fcee:	dde6      	ble.n	800fcbe <forward_cast+0x18c2>
 800fcf0:	4991      	ldr	r1, [pc, #580]	; (800ff38 <forward_cast+0x1b3c>)
 800fcf2:	428c      	cmp	r4, r1
 800fcf4:	f001 86e1 	beq.w	8011aba <forward_cast+0x36be>
 800fcf8:	dd13      	ble.n	800fd22 <forward_cast+0x1926>
 800fcfa:	42bc      	cmp	r4, r7
 800fcfc:	d121      	bne.n	800fd42 <forward_cast+0x1946>
 800fcfe:	edd5 7a00 	vldr	s15, [r5]
 800fd02:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fd06:	ee17 0a90 	vmov	r0, s15
 800fd0a:	e7e6      	b.n	800fcda <forward_cast+0x18de>
 800fd0c:	f5a1 6140 	sub.w	r1, r1, #3072	; 0xc00
 800fd10:	428c      	cmp	r4, r1
 800fd12:	f001 86e0 	beq.w	8011ad6 <forward_cast+0x36da>
 800fd16:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800fd1a:	428c      	cmp	r4, r1
 800fd1c:	d111      	bne.n	800fd42 <forward_cast+0x1946>
 800fd1e:	8828      	ldrh	r0, [r5, #0]
 800fd20:	e7db      	b.n	800fcda <forward_cast+0x18de>
 800fd22:	f5a1 51c0 	sub.w	r1, r1, #6144	; 0x1800
 800fd26:	428c      	cmp	r4, r1
 800fd28:	f001 86e6 	beq.w	8011af8 <forward_cast+0x36fc>
 800fd2c:	455c      	cmp	r4, fp
 800fd2e:	d108      	bne.n	800fd42 <forward_cast+0x1946>
 800fd30:	edd5 7a00 	vldr	s15, [r5]
 800fd34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fd38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fd3c:	ee17 0a90 	vmov	r0, s15
 800fd40:	e7cb      	b.n	800fcda <forward_cast+0x18de>
 800fd42:	2000      	movs	r0, #0
 800fd44:	e7c9      	b.n	800fcda <forward_cast+0x18de>
 800fd46:	4555      	cmp	r5, sl
 800fd48:	f4be abc0 	bcs.w	800e4cc <forward_cast+0xd0>
 800fd4c:	f8df 81d8 	ldr.w	r8, [pc, #472]	; 800ff28 <forward_cast+0x1b2c>
 800fd50:	4f7a      	ldr	r7, [pc, #488]	; (800ff3c <forward_cast+0x1b40>)
 800fd52:	f8df b1f4 	ldr.w	fp, [pc, #500]	; 800ff48 <forward_cast+0x1b4c>
 800fd56:	4b77      	ldr	r3, [pc, #476]	; (800ff34 <forward_cast+0x1b38>)
 800fd58:	4a74      	ldr	r2, [pc, #464]	; (800ff2c <forward_cast+0x1b30>)
 800fd5a:	e017      	b.n	800fd8c <forward_cast+0x1990>
 800fd5c:	429c      	cmp	r4, r3
 800fd5e:	f001 86db 	beq.w	8011b18 <forward_cast+0x371c>
 800fd62:	dd26      	ble.n	800fdb2 <forward_cast+0x19b6>
 800fd64:	4294      	cmp	r4, r2
 800fd66:	f001 8700 	beq.w	8011b6a <forward_cast+0x376e>
 800fd6a:	4971      	ldr	r1, [pc, #452]	; (800ff30 <forward_cast+0x1b34>)
 800fd6c:	428c      	cmp	r4, r1
 800fd6e:	d139      	bne.n	800fde4 <forward_cast+0x19e8>
 800fd70:	7828      	ldrb	r0, [r5, #0]
 800fd72:	3800      	subs	r0, #0
 800fd74:	bf18      	it	ne
 800fd76:	2001      	movne	r0, #1
 800fd78:	f380 0010 	usat	r0, #16, r0
 800fd7c:	444d      	add	r5, r9
 800fd7e:	b280      	uxth	r0, r0
 800fd80:	9900      	ldr	r1, [sp, #0]
 800fd82:	45aa      	cmp	sl, r5
 800fd84:	6030      	str	r0, [r6, #0]
 800fd86:	440e      	add	r6, r1
 800fd88:	f67e aba0 	bls.w	800e4cc <forward_cast+0xd0>
 800fd8c:	496c      	ldr	r1, [pc, #432]	; (800ff40 <forward_cast+0x1b44>)
 800fd8e:	428c      	cmp	r4, r1
 800fd90:	f001 86be 	beq.w	8011b10 <forward_cast+0x3714>
 800fd94:	dde2      	ble.n	800fd5c <forward_cast+0x1960>
 800fd96:	4968      	ldr	r1, [pc, #416]	; (800ff38 <forward_cast+0x1b3c>)
 800fd98:	428c      	cmp	r4, r1
 800fd9a:	f001 86d5 	beq.w	8011b48 <forward_cast+0x374c>
 800fd9e:	dd13      	ble.n	800fdc8 <forward_cast+0x19cc>
 800fda0:	4544      	cmp	r4, r8
 800fda2:	d11f      	bne.n	800fde4 <forward_cast+0x19e8>
 800fda4:	edd5 7a00 	vldr	s15, [r5]
 800fda8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fdac:	ee17 0a90 	vmov	r0, s15
 800fdb0:	e7e2      	b.n	800fd78 <forward_cast+0x197c>
 800fdb2:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800fdb6:	428c      	cmp	r4, r1
 800fdb8:	f001 86d4 	beq.w	8011b64 <forward_cast+0x3768>
 800fdbc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800fdc0:	428c      	cmp	r4, r1
 800fdc2:	d10f      	bne.n	800fde4 <forward_cast+0x19e8>
 800fdc4:	8828      	ldrh	r0, [r5, #0]
 800fdc6:	e7d7      	b.n	800fd78 <forward_cast+0x197c>
 800fdc8:	42bc      	cmp	r4, r7
 800fdca:	f001 86dc 	beq.w	8011b86 <forward_cast+0x378a>
 800fdce:	455c      	cmp	r4, fp
 800fdd0:	d108      	bne.n	800fde4 <forward_cast+0x19e8>
 800fdd2:	edd5 7a00 	vldr	s15, [r5]
 800fdd6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fdda:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fdde:	ee17 0a90 	vmov	r0, s15
 800fde2:	e7c9      	b.n	800fd78 <forward_cast+0x197c>
 800fde4:	2000      	movs	r0, #0
 800fde6:	e7c7      	b.n	800fd78 <forward_cast+0x197c>
 800fde8:	4555      	cmp	r5, sl
 800fdea:	f4be ab6f 	bcs.w	800e4cc <forward_cast+0xd0>
 800fdee:	2700      	movs	r7, #0
 800fdf0:	f8df 8134 	ldr.w	r8, [pc, #308]	; 800ff28 <forward_cast+0x1b2c>
 800fdf4:	4b4f      	ldr	r3, [pc, #316]	; (800ff34 <forward_cast+0x1b38>)
 800fdf6:	4a4d      	ldr	r2, [pc, #308]	; (800ff2c <forward_cast+0x1b30>)
 800fdf8:	e016      	b.n	800fe28 <forward_cast+0x1a2c>
 800fdfa:	429c      	cmp	r4, r3
 800fdfc:	f001 8468 	beq.w	80116d0 <forward_cast+0x32d4>
 800fe00:	dd24      	ble.n	800fe4c <forward_cast+0x1a50>
 800fe02:	4294      	cmp	r4, r2
 800fe04:	f001 87cf 	beq.w	8011da6 <forward_cast+0x39aa>
 800fe08:	4949      	ldr	r1, [pc, #292]	; (800ff30 <forward_cast+0x1b34>)
 800fe0a:	428c      	cmp	r4, r1
 800fe0c:	d13a      	bne.n	800fe84 <forward_cast+0x1a88>
 800fe0e:	7828      	ldrb	r0, [r5, #0]
 800fe10:	3800      	subs	r0, #0
 800fe12:	bf18      	it	ne
 800fe14:	2001      	movne	r0, #1
 800fe16:	f300 0007 	ssat	r0, #8, r0
 800fe1a:	444d      	add	r5, r9
 800fe1c:	9900      	ldr	r1, [sp, #0]
 800fe1e:	55f0      	strb	r0, [r6, r7]
 800fe20:	45aa      	cmp	sl, r5
 800fe22:	440f      	add	r7, r1
 800fe24:	f67e ab52 	bls.w	800e4cc <forward_cast+0xd0>
 800fe28:	455c      	cmp	r4, fp
 800fe2a:	f001 8460 	beq.w	80116ee <forward_cast+0x32f2>
 800fe2e:	dde4      	ble.n	800fdfa <forward_cast+0x19fe>
 800fe30:	4941      	ldr	r1, [pc, #260]	; (800ff38 <forward_cast+0x1b3c>)
 800fe32:	428c      	cmp	r4, r1
 800fe34:	f001 87a6 	beq.w	8011d84 <forward_cast+0x3988>
 800fe38:	dd12      	ble.n	800fe60 <forward_cast+0x1a64>
 800fe3a:	4544      	cmp	r4, r8
 800fe3c:	d122      	bne.n	800fe84 <forward_cast+0x1a88>
 800fe3e:	edd5 7a00 	vldr	s15, [r5]
 800fe42:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fe46:	ee17 0a90 	vmov	r0, s15
 800fe4a:	e7e4      	b.n	800fe16 <forward_cast+0x1a1a>
 800fe4c:	493d      	ldr	r1, [pc, #244]	; (800ff44 <forward_cast+0x1b48>)
 800fe4e:	428c      	cmp	r4, r1
 800fe50:	f001 87a6 	beq.w	8011da0 <forward_cast+0x39a4>
 800fe54:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800fe58:	428c      	cmp	r4, r1
 800fe5a:	d113      	bne.n	800fe84 <forward_cast+0x1a88>
 800fe5c:	8828      	ldrh	r0, [r5, #0]
 800fe5e:	e7da      	b.n	800fe16 <forward_cast+0x1a1a>
 800fe60:	f5a1 51c0 	sub.w	r1, r1, #6144	; 0x1800
 800fe64:	428c      	cmp	r4, r1
 800fe66:	f001 87ac 	beq.w	8011dc2 <forward_cast+0x39c6>
 800fe6a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fe6e:	428c      	cmp	r4, r1
 800fe70:	d108      	bne.n	800fe84 <forward_cast+0x1a88>
 800fe72:	edd5 7a00 	vldr	s15, [r5]
 800fe76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fe7a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fe7e:	ee17 0a90 	vmov	r0, s15
 800fe82:	e7c8      	b.n	800fe16 <forward_cast+0x1a1a>
 800fe84:	2000      	movs	r0, #0
 800fe86:	e7c6      	b.n	800fe16 <forward_cast+0x1a1a>
 800fe88:	4555      	cmp	r5, sl
 800fe8a:	f4be ab1f 	bcs.w	800e4cc <forward_cast+0xd0>
 800fe8e:	4a28      	ldr	r2, [pc, #160]	; (800ff30 <forward_cast+0x1b34>)
 800fe90:	e014      	b.n	800febc <forward_cast+0x1ac0>
 800fe92:	455c      	cmp	r4, fp
 800fe94:	f001 8465 	beq.w	8011762 <forward_cast+0x3366>
 800fe98:	dd22      	ble.n	800fee0 <forward_cast+0x1ae4>
 800fe9a:	4924      	ldr	r1, [pc, #144]	; (800ff2c <forward_cast+0x1b30>)
 800fe9c:	428c      	cmp	r4, r1
 800fe9e:	f001 843f 	beq.w	8011720 <forward_cast+0x3324>
 800fea2:	4294      	cmp	r4, r2
 800fea4:	d136      	bne.n	800ff14 <forward_cast+0x1b18>
 800fea6:	7828      	ldrb	r0, [r5, #0]
 800fea8:	3800      	subs	r0, #0
 800feaa:	bf18      	it	ne
 800feac:	2001      	movne	r0, #1
 800feae:	444d      	add	r5, r9
 800feb0:	9900      	ldr	r1, [sp, #0]
 800feb2:	6030      	str	r0, [r6, #0]
 800feb4:	45aa      	cmp	sl, r5
 800feb6:	440e      	add	r6, r1
 800feb8:	f67e ab08 	bls.w	800e4cc <forward_cast+0xd0>
 800febc:	4544      	cmp	r4, r8
 800febe:	f001 844c 	beq.w	801175a <forward_cast+0x335e>
 800fec2:	dde6      	ble.n	800fe92 <forward_cast+0x1a96>
 800fec4:	491c      	ldr	r1, [pc, #112]	; (800ff38 <forward_cast+0x1b3c>)
 800fec6:	428c      	cmp	r4, r1
 800fec8:	f001 8419 	beq.w	80116fe <forward_cast+0x3302>
 800fecc:	dd12      	ble.n	800fef4 <forward_cast+0x1af8>
 800fece:	42bc      	cmp	r4, r7
 800fed0:	d120      	bne.n	800ff14 <forward_cast+0x1b18>
 800fed2:	edd5 7a00 	vldr	s15, [r5]
 800fed6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800feda:	ee17 0a90 	vmov	r0, s15
 800fede:	e7e6      	b.n	800feae <forward_cast+0x1ab2>
 800fee0:	4918      	ldr	r1, [pc, #96]	; (800ff44 <forward_cast+0x1b48>)
 800fee2:	428c      	cmp	r4, r1
 800fee4:	f001 8419 	beq.w	801171a <forward_cast+0x331e>
 800fee8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800feec:	428c      	cmp	r4, r1
 800feee:	d111      	bne.n	800ff14 <forward_cast+0x1b18>
 800fef0:	8828      	ldrh	r0, [r5, #0]
 800fef2:	e7dc      	b.n	800feae <forward_cast+0x1ab2>
 800fef4:	f5a1 51c0 	sub.w	r1, r1, #6144	; 0x1800
 800fef8:	428c      	cmp	r4, r1
 800fefa:	f001 841f 	beq.w	801173c <forward_cast+0x3340>
 800fefe:	429c      	cmp	r4, r3
 800ff00:	d108      	bne.n	800ff14 <forward_cast+0x1b18>
 800ff02:	edd5 7a00 	vldr	s15, [r5]
 800ff06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ff0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ff0e:	ee17 0a90 	vmov	r0, s15
 800ff12:	e7cc      	b.n	800feae <forward_cast+0x1ab2>
 800ff14:	2000      	movs	r0, #0
 800ff16:	e7ca      	b.n	800feae <forward_cast+0x1ab2>
 800ff18:	4555      	cmp	r5, sl
 800ff1a:	f4be aad7 	bcs.w	800e4cc <forward_cast+0xd0>
 800ff1e:	f04f 0800 	mov.w	r8, #0
 800ff22:	4b09      	ldr	r3, [pc, #36]	; (800ff48 <forward_cast+0x1b4c>)
 800ff24:	4a01      	ldr	r2, [pc, #4]	; (800ff2c <forward_cast+0x1b30>)
 800ff26:	e027      	b.n	800ff78 <forward_cast+0x1b7c>
 800ff28:	01821040 	.word	0x01821040
 800ff2c:	00042040 	.word	0x00042040
 800ff30:	00060440 	.word	0x00060440
 800ff34:	00041040 	.word	0x00041040
 800ff38:	00842040 	.word	0x00842040
 800ff3c:	00840840 	.word	0x00840840
 800ff40:	00840440 	.word	0x00840440
 800ff44:	00040440 	.word	0x00040440
 800ff48:	00841040 	.word	0x00841040
 800ff4c:	42bc      	cmp	r4, r7
 800ff4e:	f001 8478 	beq.w	8011842 <forward_cast+0x3446>
 800ff52:	dd25      	ble.n	800ffa0 <forward_cast+0x1ba4>
 800ff54:	4294      	cmp	r4, r2
 800ff56:	f001 8464 	beq.w	8011822 <forward_cast+0x3426>
 800ff5a:	49a9      	ldr	r1, [pc, #676]	; (8010200 <forward_cast+0x1e04>)
 800ff5c:	428c      	cmp	r4, r1
 800ff5e:	d13a      	bne.n	800ffd6 <forward_cast+0x1bda>
 800ff60:	7829      	ldrb	r1, [r5, #0]
 800ff62:	3900      	subs	r1, #0
 800ff64:	bf18      	it	ne
 800ff66:	2101      	movne	r1, #1
 800ff68:	444d      	add	r5, r9
 800ff6a:	f806 1008 	strb.w	r1, [r6, r8]
 800ff6e:	9900      	ldr	r1, [sp, #0]
 800ff70:	45aa      	cmp	sl, r5
 800ff72:	4488      	add	r8, r1
 800ff74:	f67e aaaa 	bls.w	800e4cc <forward_cast+0xd0>
 800ff78:	455c      	cmp	r4, fp
 800ff7a:	d018      	beq.n	800ffae <forward_cast+0x1bb2>
 800ff7c:	dde6      	ble.n	800ff4c <forward_cast+0x1b50>
 800ff7e:	49a1      	ldr	r1, [pc, #644]	; (8010204 <forward_cast+0x1e08>)
 800ff80:	428c      	cmp	r4, r1
 800ff82:	f001 843e 	beq.w	8011802 <forward_cast+0x3406>
 800ff86:	dd15      	ble.n	800ffb4 <forward_cast+0x1bb8>
 800ff88:	499f      	ldr	r1, [pc, #636]	; (8010208 <forward_cast+0x1e0c>)
 800ff8a:	428c      	cmp	r4, r1
 800ff8c:	d123      	bne.n	800ffd6 <forward_cast+0x1bda>
 800ff8e:	edd5 7a00 	vldr	s15, [r5]
 800ff92:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ff96:	edcd 7a01 	vstr	s15, [sp, #4]
 800ff9a:	f99d 1004 	ldrsb.w	r1, [sp, #4]
 800ff9e:	e7e3      	b.n	800ff68 <forward_cast+0x1b6c>
 800ffa0:	499a      	ldr	r1, [pc, #616]	; (801020c <forward_cast+0x1e10>)
 800ffa2:	428c      	cmp	r4, r1
 800ffa4:	d003      	beq.n	800ffae <forward_cast+0x1bb2>
 800ffa6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800ffaa:	428c      	cmp	r4, r1
 800ffac:	d113      	bne.n	800ffd6 <forward_cast+0x1bda>
 800ffae:	f995 1000 	ldrsb.w	r1, [r5]
 800ffb2:	e7d9      	b.n	800ff68 <forward_cast+0x1b6c>
 800ffb4:	f5a1 51c0 	sub.w	r1, r1, #6144	; 0x1800
 800ffb8:	428c      	cmp	r4, r1
 800ffba:	d0f8      	beq.n	800ffae <forward_cast+0x1bb2>
 800ffbc:	429c      	cmp	r4, r3
 800ffbe:	d10a      	bne.n	800ffd6 <forward_cast+0x1bda>
 800ffc0:	edd5 7a00 	vldr	s15, [r5]
 800ffc4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ffc8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ffcc:	edcd 7a01 	vstr	s15, [sp, #4]
 800ffd0:	f99d 1004 	ldrsb.w	r1, [sp, #4]
 800ffd4:	e7c8      	b.n	800ff68 <forward_cast+0x1b6c>
 800ffd6:	2100      	movs	r1, #0
 800ffd8:	e7c6      	b.n	800ff68 <forward_cast+0x1b6c>
 800ffda:	4555      	cmp	r5, sl
 800ffdc:	f4be aa76 	bcs.w	800e4cc <forward_cast+0xd0>
 800ffe0:	f8df 8224 	ldr.w	r8, [pc, #548]	; 8010208 <forward_cast+0x1e0c>
 800ffe4:	4f8a      	ldr	r7, [pc, #552]	; (8010210 <forward_cast+0x1e14>)
 800ffe6:	f8df b238 	ldr.w	fp, [pc, #568]	; 8010220 <forward_cast+0x1e24>
 800ffea:	4b8a      	ldr	r3, [pc, #552]	; (8010214 <forward_cast+0x1e18>)
 800ffec:	4a8a      	ldr	r2, [pc, #552]	; (8010218 <forward_cast+0x1e1c>)
 800ffee:	e014      	b.n	801001a <forward_cast+0x1c1e>
 800fff0:	429c      	cmp	r4, r3
 800fff2:	f001 83c0 	beq.w	8011776 <forward_cast+0x337a>
 800fff6:	dd26      	ble.n	8010046 <forward_cast+0x1c4a>
 800fff8:	4294      	cmp	r4, r2
 800fffa:	f001 83ea 	beq.w	80117d2 <forward_cast+0x33d6>
 800fffe:	4980      	ldr	r1, [pc, #512]	; (8010200 <forward_cast+0x1e04>)
 8010000:	428c      	cmp	r4, r1
 8010002:	d13e      	bne.n	8010082 <forward_cast+0x1c86>
 8010004:	7829      	ldrb	r1, [r5, #0]
 8010006:	3900      	subs	r1, #0
 8010008:	bf18      	it	ne
 801000a:	2101      	movne	r1, #1
 801000c:	444d      	add	r5, r9
 801000e:	6031      	str	r1, [r6, #0]
 8010010:	9900      	ldr	r1, [sp, #0]
 8010012:	45aa      	cmp	sl, r5
 8010014:	440e      	add	r6, r1
 8010016:	f67e aa59 	bls.w	800e4cc <forward_cast+0xd0>
 801001a:	4980      	ldr	r1, [pc, #512]	; (801021c <forward_cast+0x1e20>)
 801001c:	428c      	cmp	r4, r1
 801001e:	f001 8391 	beq.w	8011744 <forward_cast+0x3348>
 8010022:	dde5      	ble.n	800fff0 <forward_cast+0x1bf4>
 8010024:	4977      	ldr	r1, [pc, #476]	; (8010204 <forward_cast+0x1e08>)
 8010026:	428c      	cmp	r4, r1
 8010028:	f001 83c2 	beq.w	80117b0 <forward_cast+0x33b4>
 801002c:	dd18      	ble.n	8010060 <forward_cast+0x1c64>
 801002e:	4544      	cmp	r4, r8
 8010030:	d127      	bne.n	8010082 <forward_cast+0x1c86>
 8010032:	edd5 7a00 	vldr	s15, [r5]
 8010036:	eef5 7a40 	vcmp.f32	s15, #0.0
 801003a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801003e:	bf14      	ite	ne
 8010040:	2101      	movne	r1, #1
 8010042:	2100      	moveq	r1, #0
 8010044:	e7e2      	b.n	801000c <forward_cast+0x1c10>
 8010046:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 801004a:	428c      	cmp	r4, r1
 801004c:	d0da      	beq.n	8010004 <forward_cast+0x1c08>
 801004e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8010052:	428c      	cmp	r4, r1
 8010054:	d115      	bne.n	8010082 <forward_cast+0x1c86>
 8010056:	8829      	ldrh	r1, [r5, #0]
 8010058:	3900      	subs	r1, #0
 801005a:	bf18      	it	ne
 801005c:	2101      	movne	r1, #1
 801005e:	e7d5      	b.n	801000c <forward_cast+0x1c10>
 8010060:	42bc      	cmp	r4, r7
 8010062:	f001 83c7 	beq.w	80117f4 <forward_cast+0x33f8>
 8010066:	455c      	cmp	r4, fp
 8010068:	d10b      	bne.n	8010082 <forward_cast+0x1c86>
 801006a:	edd5 7a00 	vldr	s15, [r5]
 801006e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010072:	eef5 7a40 	vcmp.f32	s15, #0.0
 8010076:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801007a:	bf14      	ite	ne
 801007c:	2101      	movne	r1, #1
 801007e:	2100      	moveq	r1, #0
 8010080:	e7c4      	b.n	801000c <forward_cast+0x1c10>
 8010082:	2100      	movs	r1, #0
 8010084:	e7c2      	b.n	801000c <forward_cast+0x1c10>
 8010086:	4555      	cmp	r5, sl
 8010088:	f4be aa20 	bcs.w	800e4cc <forward_cast+0xd0>
 801008c:	9f00      	ldr	r7, [sp, #0]
 801008e:	4621      	mov	r1, r4
 8010090:	4628      	mov	r0, r5
 8010092:	f7fe f93f 	bl	800e314 <_array_handle_get_as_float>
 8010096:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801009a:	ee17 3a90 	vmov	r3, s15
 801009e:	f383 0308 	usat	r3, #8, r3
 80100a2:	444d      	add	r5, r9
 80100a4:	7033      	strb	r3, [r6, #0]
 80100a6:	443e      	add	r6, r7
 80100a8:	45aa      	cmp	sl, r5
 80100aa:	d8f0      	bhi.n	801008e <forward_cast+0x1c92>
 80100ac:	f7fe ba0e 	b.w	800e4cc <forward_cast+0xd0>
 80100b0:	4555      	cmp	r5, sl
 80100b2:	f4be aa0b 	bcs.w	800e4cc <forward_cast+0xd0>
 80100b6:	f8df 8150 	ldr.w	r8, [pc, #336]	; 8010208 <forward_cast+0x1e0c>
 80100ba:	4f55      	ldr	r7, [pc, #340]	; (8010210 <forward_cast+0x1e14>)
 80100bc:	f8df b160 	ldr.w	fp, [pc, #352]	; 8010220 <forward_cast+0x1e24>
 80100c0:	4b54      	ldr	r3, [pc, #336]	; (8010214 <forward_cast+0x1e18>)
 80100c2:	4a55      	ldr	r2, [pc, #340]	; (8010218 <forward_cast+0x1e1c>)
 80100c4:	e017      	b.n	80100f6 <forward_cast+0x1cfa>
 80100c6:	429c      	cmp	r4, r3
 80100c8:	f001 8726 	beq.w	8011f18 <forward_cast+0x3b1c>
 80100cc:	dd26      	ble.n	801011c <forward_cast+0x1d20>
 80100ce:	4294      	cmp	r4, r2
 80100d0:	f001 8708 	beq.w	8011ee4 <forward_cast+0x3ae8>
 80100d4:	494a      	ldr	r1, [pc, #296]	; (8010200 <forward_cast+0x1e04>)
 80100d6:	428c      	cmp	r4, r1
 80100d8:	d139      	bne.n	801014e <forward_cast+0x1d52>
 80100da:	7828      	ldrb	r0, [r5, #0]
 80100dc:	3800      	subs	r0, #0
 80100de:	bf18      	it	ne
 80100e0:	2001      	movne	r0, #1
 80100e2:	f380 0008 	usat	r0, #8, r0
 80100e6:	444d      	add	r5, r9
 80100e8:	b2c0      	uxtb	r0, r0
 80100ea:	9900      	ldr	r1, [sp, #0]
 80100ec:	45aa      	cmp	sl, r5
 80100ee:	6030      	str	r0, [r6, #0]
 80100f0:	440e      	add	r6, r1
 80100f2:	f67e a9eb 	bls.w	800e4cc <forward_cast+0xd0>
 80100f6:	4949      	ldr	r1, [pc, #292]	; (801021c <forward_cast+0x1e20>)
 80100f8:	428c      	cmp	r4, r1
 80100fa:	f001 8709 	beq.w	8011f10 <forward_cast+0x3b14>
 80100fe:	dde2      	ble.n	80100c6 <forward_cast+0x1cca>
 8010100:	4940      	ldr	r1, [pc, #256]	; (8010204 <forward_cast+0x1e08>)
 8010102:	428c      	cmp	r4, r1
 8010104:	f001 86ce 	beq.w	8011ea4 <forward_cast+0x3aa8>
 8010108:	dd13      	ble.n	8010132 <forward_cast+0x1d36>
 801010a:	4544      	cmp	r4, r8
 801010c:	d11f      	bne.n	801014e <forward_cast+0x1d52>
 801010e:	edd5 7a00 	vldr	s15, [r5]
 8010112:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010116:	ee17 0a90 	vmov	r0, s15
 801011a:	e7e2      	b.n	80100e2 <forward_cast+0x1ce6>
 801011c:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8010120:	428c      	cmp	r4, r1
 8010122:	f001 86cd 	beq.w	8011ec0 <forward_cast+0x3ac4>
 8010126:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 801012a:	428c      	cmp	r4, r1
 801012c:	d10f      	bne.n	801014e <forward_cast+0x1d52>
 801012e:	8828      	ldrh	r0, [r5, #0]
 8010130:	e7d7      	b.n	80100e2 <forward_cast+0x1ce6>
 8010132:	42bc      	cmp	r4, r7
 8010134:	f001 86e4 	beq.w	8011f00 <forward_cast+0x3b04>
 8010138:	455c      	cmp	r4, fp
 801013a:	d108      	bne.n	801014e <forward_cast+0x1d52>
 801013c:	edd5 7a00 	vldr	s15, [r5]
 8010140:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010144:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010148:	ee17 0a90 	vmov	r0, s15
 801014c:	e7c9      	b.n	80100e2 <forward_cast+0x1ce6>
 801014e:	2000      	movs	r0, #0
 8010150:	e7c7      	b.n	80100e2 <forward_cast+0x1ce6>
 8010152:	4555      	cmp	r5, sl
 8010154:	f4be a9ba 	bcs.w	800e4cc <forward_cast+0xd0>
 8010158:	f04f 0800 	mov.w	r8, #0
 801015c:	4a30      	ldr	r2, [pc, #192]	; (8010220 <forward_cast+0x1e24>)
 801015e:	e019      	b.n	8010194 <forward_cast+0x1d98>
 8010160:	429c      	cmp	r4, r3
 8010162:	f001 8636 	beq.w	8011dd2 <forward_cast+0x39d6>
 8010166:	dd28      	ble.n	80101ba <forward_cast+0x1dbe>
 8010168:	492b      	ldr	r1, [pc, #172]	; (8010218 <forward_cast+0x1e1c>)
 801016a:	428c      	cmp	r4, r1
 801016c:	f001 86ef 	beq.w	8011f4e <forward_cast+0x3b52>
 8010170:	f501 31f2 	add.w	r1, r1, #123904	; 0x1e400
 8010174:	428c      	cmp	r4, r1
 8010176:	d138      	bne.n	80101ea <forward_cast+0x1dee>
 8010178:	7828      	ldrb	r0, [r5, #0]
 801017a:	3800      	subs	r0, #0
 801017c:	bf18      	it	ne
 801017e:	2001      	movne	r0, #1
 8010180:	f380 0008 	usat	r0, #8, r0
 8010184:	444d      	add	r5, r9
 8010186:	9900      	ldr	r1, [sp, #0]
 8010188:	f806 0008 	strb.w	r0, [r6, r8]
 801018c:	45aa      	cmp	sl, r5
 801018e:	4488      	add	r8, r1
 8010190:	f67e a99c 	bls.w	800e4cc <forward_cast+0xd0>
 8010194:	455c      	cmp	r4, fp
 8010196:	f001 86b7 	beq.w	8011f08 <forward_cast+0x3b0c>
 801019a:	dde1      	ble.n	8010160 <forward_cast+0x1d64>
 801019c:	4919      	ldr	r1, [pc, #100]	; (8010204 <forward_cast+0x1e08>)
 801019e:	428c      	cmp	r4, r1
 80101a0:	f001 86c4 	beq.w	8011f2c <forward_cast+0x3b30>
 80101a4:	dd11      	ble.n	80101ca <forward_cast+0x1dce>
 80101a6:	4918      	ldr	r1, [pc, #96]	; (8010208 <forward_cast+0x1e0c>)
 80101a8:	428c      	cmp	r4, r1
 80101aa:	d11e      	bne.n	80101ea <forward_cast+0x1dee>
 80101ac:	edd5 7a00 	vldr	s15, [r5]
 80101b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80101b4:	ee17 0a90 	vmov	r0, s15
 80101b8:	e7e2      	b.n	8010180 <forward_cast+0x1d84>
 80101ba:	42bc      	cmp	r4, r7
 80101bc:	f001 86c4 	beq.w	8011f48 <forward_cast+0x3b4c>
 80101c0:	4918      	ldr	r1, [pc, #96]	; (8010224 <forward_cast+0x1e28>)
 80101c2:	428c      	cmp	r4, r1
 80101c4:	d111      	bne.n	80101ea <forward_cast+0x1dee>
 80101c6:	8828      	ldrh	r0, [r5, #0]
 80101c8:	e7da      	b.n	8010180 <forward_cast+0x1d84>
 80101ca:	f5a1 51c0 	sub.w	r1, r1, #6144	; 0x1800
 80101ce:	428c      	cmp	r4, r1
 80101d0:	f001 86cb 	beq.w	8011f6a <forward_cast+0x3b6e>
 80101d4:	4294      	cmp	r4, r2
 80101d6:	d108      	bne.n	80101ea <forward_cast+0x1dee>
 80101d8:	edd5 7a00 	vldr	s15, [r5]
 80101dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80101e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80101e4:	ee17 0a90 	vmov	r0, s15
 80101e8:	e7ca      	b.n	8010180 <forward_cast+0x1d84>
 80101ea:	2000      	movs	r0, #0
 80101ec:	e7c8      	b.n	8010180 <forward_cast+0x1d84>
 80101ee:	4555      	cmp	r5, sl
 80101f0:	f4be a96c 	bcs.w	800e4cc <forward_cast+0xd0>
 80101f4:	2700      	movs	r7, #0
 80101f6:	f8df 800c 	ldr.w	r8, [pc, #12]	; 8010204 <forward_cast+0x1e08>
 80101fa:	4b09      	ldr	r3, [pc, #36]	; (8010220 <forward_cast+0x1e24>)
 80101fc:	4a05      	ldr	r2, [pc, #20]	; (8010214 <forward_cast+0x1e18>)
 80101fe:	e02c      	b.n	801025a <forward_cast+0x1e5e>
 8010200:	00060440 	.word	0x00060440
 8010204:	00842040 	.word	0x00842040
 8010208:	01821040 	.word	0x01821040
 801020c:	00040440 	.word	0x00040440
 8010210:	00840840 	.word	0x00840840
 8010214:	00041040 	.word	0x00041040
 8010218:	00042040 	.word	0x00042040
 801021c:	00840440 	.word	0x00840440
 8010220:	00841040 	.word	0x00841040
 8010224:	00040840 	.word	0x00040840
 8010228:	4294      	cmp	r4, r2
 801022a:	f001 86ec 	beq.w	8012006 <forward_cast+0x3c0a>
 801022e:	dd27      	ble.n	8010280 <forward_cast+0x1e84>
 8010230:	499d      	ldr	r1, [pc, #628]	; (80104a8 <forward_cast+0x20ac>)
 8010232:	428c      	cmp	r4, r1
 8010234:	f001 86ae 	beq.w	8011f94 <forward_cast+0x3b98>
 8010238:	f501 31f2 	add.w	r1, r1, #123904	; 0x1e400
 801023c:	428c      	cmp	r4, r1
 801023e:	d136      	bne.n	80102ae <forward_cast+0x1eb2>
 8010240:	7828      	ldrb	r0, [r5, #0]
 8010242:	3800      	subs	r0, #0
 8010244:	bf18      	it	ne
 8010246:	2001      	movne	r0, #1
 8010248:	f300 000f 	ssat	r0, #16, r0
 801024c:	444d      	add	r5, r9
 801024e:	9900      	ldr	r1, [sp, #0]
 8010250:	55f0      	strb	r0, [r6, r7]
 8010252:	45aa      	cmp	sl, r5
 8010254:	440f      	add	r7, r1
 8010256:	f67e a939 	bls.w	800e4cc <forward_cast+0xd0>
 801025a:	4994      	ldr	r1, [pc, #592]	; (80104ac <forward_cast+0x20b0>)
 801025c:	428c      	cmp	r4, r1
 801025e:	f001 86ce 	beq.w	8011ffe <forward_cast+0x3c02>
 8010262:	dde1      	ble.n	8010228 <forward_cast+0x1e2c>
 8010264:	4544      	cmp	r4, r8
 8010266:	f001 8684 	beq.w	8011f72 <forward_cast+0x3b76>
 801026a:	dd11      	ble.n	8010290 <forward_cast+0x1e94>
 801026c:	4990      	ldr	r1, [pc, #576]	; (80104b0 <forward_cast+0x20b4>)
 801026e:	428c      	cmp	r4, r1
 8010270:	d11d      	bne.n	80102ae <forward_cast+0x1eb2>
 8010272:	edd5 7a00 	vldr	s15, [r5]
 8010276:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801027a:	ee17 0a90 	vmov	r0, s15
 801027e:	e7e3      	b.n	8010248 <forward_cast+0x1e4c>
 8010280:	455c      	cmp	r4, fp
 8010282:	f001 8684 	beq.w	8011f8e <forward_cast+0x3b92>
 8010286:	498b      	ldr	r1, [pc, #556]	; (80104b4 <forward_cast+0x20b8>)
 8010288:	428c      	cmp	r4, r1
 801028a:	d110      	bne.n	80102ae <forward_cast+0x1eb2>
 801028c:	8828      	ldrh	r0, [r5, #0]
 801028e:	e7db      	b.n	8010248 <forward_cast+0x1e4c>
 8010290:	4989      	ldr	r1, [pc, #548]	; (80104b8 <forward_cast+0x20bc>)
 8010292:	428c      	cmp	r4, r1
 8010294:	f001 868c 	beq.w	8011fb0 <forward_cast+0x3bb4>
 8010298:	429c      	cmp	r4, r3
 801029a:	d108      	bne.n	80102ae <forward_cast+0x1eb2>
 801029c:	edd5 7a00 	vldr	s15, [r5]
 80102a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80102a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80102a8:	ee17 0a90 	vmov	r0, s15
 80102ac:	e7cc      	b.n	8010248 <forward_cast+0x1e4c>
 80102ae:	2000      	movs	r0, #0
 80102b0:	e7ca      	b.n	8010248 <forward_cast+0x1e4c>
 80102b2:	4555      	cmp	r5, sl
 80102b4:	f4be a90a 	bcs.w	800e4cc <forward_cast+0xd0>
 80102b8:	f8df 81f4 	ldr.w	r8, [pc, #500]	; 80104b0 <forward_cast+0x20b4>
 80102bc:	4f7e      	ldr	r7, [pc, #504]	; (80104b8 <forward_cast+0x20bc>)
 80102be:	f8df b208 	ldr.w	fp, [pc, #520]	; 80104c8 <forward_cast+0x20cc>
 80102c2:	4b7e      	ldr	r3, [pc, #504]	; (80104bc <forward_cast+0x20c0>)
 80102c4:	4a78      	ldr	r2, [pc, #480]	; (80104a8 <forward_cast+0x20ac>)
 80102c6:	e017      	b.n	80102f8 <forward_cast+0x1efc>
 80102c8:	429c      	cmp	r4, r3
 80102ca:	f001 86de 	beq.w	801208a <forward_cast+0x3c8e>
 80102ce:	dd26      	ble.n	801031e <forward_cast+0x1f22>
 80102d0:	4294      	cmp	r4, r2
 80102d2:	f001 8682 	beq.w	8011fda <forward_cast+0x3bde>
 80102d6:	497a      	ldr	r1, [pc, #488]	; (80104c0 <forward_cast+0x20c4>)
 80102d8:	428c      	cmp	r4, r1
 80102da:	d139      	bne.n	8010350 <forward_cast+0x1f54>
 80102dc:	7828      	ldrb	r0, [r5, #0]
 80102de:	3800      	subs	r0, #0
 80102e0:	bf18      	it	ne
 80102e2:	2001      	movne	r0, #1
 80102e4:	f300 000f 	ssat	r0, #16, r0
 80102e8:	444d      	add	r5, r9
 80102ea:	b200      	sxth	r0, r0
 80102ec:	9900      	ldr	r1, [sp, #0]
 80102ee:	45aa      	cmp	sl, r5
 80102f0:	6030      	str	r0, [r6, #0]
 80102f2:	440e      	add	r6, r1
 80102f4:	f67e a8ea 	bls.w	800e4cc <forward_cast+0xd0>
 80102f8:	496c      	ldr	r1, [pc, #432]	; (80104ac <forward_cast+0x20b0>)
 80102fa:	428c      	cmp	r4, r1
 80102fc:	f001 8565 	beq.w	8011dca <forward_cast+0x39ce>
 8010300:	dde2      	ble.n	80102c8 <forward_cast+0x1ecc>
 8010302:	4970      	ldr	r1, [pc, #448]	; (80104c4 <forward_cast+0x20c8>)
 8010304:	428c      	cmp	r4, r1
 8010306:	f001 8657 	beq.w	8011fb8 <forward_cast+0x3bbc>
 801030a:	dd13      	ble.n	8010334 <forward_cast+0x1f38>
 801030c:	4544      	cmp	r4, r8
 801030e:	d11f      	bne.n	8010350 <forward_cast+0x1f54>
 8010310:	edd5 7a00 	vldr	s15, [r5]
 8010314:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010318:	ee17 0a90 	vmov	r0, s15
 801031c:	e7e2      	b.n	80102e4 <forward_cast+0x1ee8>
 801031e:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8010322:	428c      	cmp	r4, r1
 8010324:	f001 8656 	beq.w	8011fd4 <forward_cast+0x3bd8>
 8010328:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 801032c:	428c      	cmp	r4, r1
 801032e:	d10f      	bne.n	8010350 <forward_cast+0x1f54>
 8010330:	8828      	ldrh	r0, [r5, #0]
 8010332:	e7d7      	b.n	80102e4 <forward_cast+0x1ee8>
 8010334:	42bc      	cmp	r4, r7
 8010336:	f001 865e 	beq.w	8011ff6 <forward_cast+0x3bfa>
 801033a:	455c      	cmp	r4, fp
 801033c:	d108      	bne.n	8010350 <forward_cast+0x1f54>
 801033e:	edd5 7a00 	vldr	s15, [r5]
 8010342:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010346:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801034a:	ee17 0a90 	vmov	r0, s15
 801034e:	e7c9      	b.n	80102e4 <forward_cast+0x1ee8>
 8010350:	2000      	movs	r0, #0
 8010352:	e7c7      	b.n	80102e4 <forward_cast+0x1ee8>
 8010354:	4555      	cmp	r5, sl
 8010356:	f4be a8b9 	bcs.w	800e4cc <forward_cast+0xd0>
 801035a:	f04f 0800 	mov.w	r8, #0
 801035e:	4b56      	ldr	r3, [pc, #344]	; (80104b8 <forward_cast+0x20bc>)
 8010360:	4a59      	ldr	r2, [pc, #356]	; (80104c8 <forward_cast+0x20cc>)
 8010362:	e019      	b.n	8010398 <forward_cast+0x1f9c>
 8010364:	42bc      	cmp	r4, r7
 8010366:	f001 8542 	beq.w	8011dee <forward_cast+0x39f2>
 801036a:	dd29      	ble.n	80103c0 <forward_cast+0x1fc4>
 801036c:	494e      	ldr	r1, [pc, #312]	; (80104a8 <forward_cast+0x20ac>)
 801036e:	428c      	cmp	r4, r1
 8010370:	f001 8558 	beq.w	8011e24 <forward_cast+0x3a28>
 8010374:	f501 31f2 	add.w	r1, r1, #123904	; 0x1e400
 8010378:	428c      	cmp	r4, r1
 801037a:	d137      	bne.n	80103ec <forward_cast+0x1ff0>
 801037c:	7828      	ldrb	r0, [r5, #0]
 801037e:	3800      	subs	r0, #0
 8010380:	bf18      	it	ne
 8010382:	2001      	movne	r0, #1
 8010384:	f380 0010 	usat	r0, #16, r0
 8010388:	444d      	add	r5, r9
 801038a:	9900      	ldr	r1, [sp, #0]
 801038c:	f806 0008 	strb.w	r0, [r6, r8]
 8010390:	45aa      	cmp	sl, r5
 8010392:	4488      	add	r8, r1
 8010394:	f67e a89a 	bls.w	800e4cc <forward_cast+0xd0>
 8010398:	4944      	ldr	r1, [pc, #272]	; (80104ac <forward_cast+0x20b0>)
 801039a:	428c      	cmp	r4, r1
 801039c:	f001 8523 	beq.w	8011de6 <forward_cast+0x39ea>
 80103a0:	dde0      	ble.n	8010364 <forward_cast+0x1f68>
 80103a2:	4948      	ldr	r1, [pc, #288]	; (80104c4 <forward_cast+0x20c8>)
 80103a4:	428c      	cmp	r4, r1
 80103a6:	f001 852c 	beq.w	8011e02 <forward_cast+0x3a06>
 80103aa:	dd11      	ble.n	80103d0 <forward_cast+0x1fd4>
 80103ac:	4940      	ldr	r1, [pc, #256]	; (80104b0 <forward_cast+0x20b4>)
 80103ae:	428c      	cmp	r4, r1
 80103b0:	d11c      	bne.n	80103ec <forward_cast+0x1ff0>
 80103b2:	edd5 7a00 	vldr	s15, [r5]
 80103b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80103ba:	ee17 0a90 	vmov	r0, s15
 80103be:	e7e1      	b.n	8010384 <forward_cast+0x1f88>
 80103c0:	455c      	cmp	r4, fp
 80103c2:	f001 852c 	beq.w	8011e1e <forward_cast+0x3a22>
 80103c6:	493b      	ldr	r1, [pc, #236]	; (80104b4 <forward_cast+0x20b8>)
 80103c8:	428c      	cmp	r4, r1
 80103ca:	d10f      	bne.n	80103ec <forward_cast+0x1ff0>
 80103cc:	8828      	ldrh	r0, [r5, #0]
 80103ce:	e7d9      	b.n	8010384 <forward_cast+0x1f88>
 80103d0:	429c      	cmp	r4, r3
 80103d2:	f001 8535 	beq.w	8011e40 <forward_cast+0x3a44>
 80103d6:	4294      	cmp	r4, r2
 80103d8:	d108      	bne.n	80103ec <forward_cast+0x1ff0>
 80103da:	edd5 7a00 	vldr	s15, [r5]
 80103de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80103e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80103e6:	ee17 0a90 	vmov	r0, s15
 80103ea:	e7cb      	b.n	8010384 <forward_cast+0x1f88>
 80103ec:	2000      	movs	r0, #0
 80103ee:	e7c9      	b.n	8010384 <forward_cast+0x1f88>
 80103f0:	4555      	cmp	r5, sl
 80103f2:	f4be a86b 	bcs.w	800e4cc <forward_cast+0xd0>
 80103f6:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 80104b0 <forward_cast+0x20b4>
 80103fa:	4f2f      	ldr	r7, [pc, #188]	; (80104b8 <forward_cast+0x20bc>)
 80103fc:	f8df b0c8 	ldr.w	fp, [pc, #200]	; 80104c8 <forward_cast+0x20cc>
 8010400:	4b2e      	ldr	r3, [pc, #184]	; (80104bc <forward_cast+0x20c0>)
 8010402:	4a29      	ldr	r2, [pc, #164]	; (80104a8 <forward_cast+0x20ac>)
 8010404:	e017      	b.n	8010436 <forward_cast+0x203a>
 8010406:	429c      	cmp	r4, r3
 8010408:	f001 8126 	beq.w	8011658 <forward_cast+0x325c>
 801040c:	dd26      	ble.n	801045c <forward_cast+0x2060>
 801040e:	4294      	cmp	r4, r2
 8010410:	f001 8625 	beq.w	801205e <forward_cast+0x3c62>
 8010414:	492a      	ldr	r1, [pc, #168]	; (80104c0 <forward_cast+0x20c4>)
 8010416:	428c      	cmp	r4, r1
 8010418:	d139      	bne.n	801048e <forward_cast+0x2092>
 801041a:	7828      	ldrb	r0, [r5, #0]
 801041c:	3800      	subs	r0, #0
 801041e:	bf18      	it	ne
 8010420:	2001      	movne	r0, #1
 8010422:	f380 0010 	usat	r0, #16, r0
 8010426:	444d      	add	r5, r9
 8010428:	b280      	uxth	r0, r0
 801042a:	9900      	ldr	r1, [sp, #0]
 801042c:	45aa      	cmp	sl, r5
 801042e:	6030      	str	r0, [r6, #0]
 8010430:	440e      	add	r6, r1
 8010432:	f67e a84b 	bls.w	800e4cc <forward_cast+0xd0>
 8010436:	491d      	ldr	r1, [pc, #116]	; (80104ac <forward_cast+0x20b0>)
 8010438:	428c      	cmp	r4, r1
 801043a:	f001 8622 	beq.w	8012082 <forward_cast+0x3c86>
 801043e:	dde2      	ble.n	8010406 <forward_cast+0x200a>
 8010440:	4920      	ldr	r1, [pc, #128]	; (80104c4 <forward_cast+0x20c8>)
 8010442:	428c      	cmp	r4, r1
 8010444:	f001 85fa 	beq.w	801203c <forward_cast+0x3c40>
 8010448:	dd13      	ble.n	8010472 <forward_cast+0x2076>
 801044a:	4544      	cmp	r4, r8
 801044c:	d11f      	bne.n	801048e <forward_cast+0x2092>
 801044e:	edd5 7a00 	vldr	s15, [r5]
 8010452:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010456:	ee17 0a90 	vmov	r0, s15
 801045a:	e7e2      	b.n	8010422 <forward_cast+0x2026>
 801045c:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8010460:	428c      	cmp	r4, r1
 8010462:	f001 85f9 	beq.w	8012058 <forward_cast+0x3c5c>
 8010466:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 801046a:	428c      	cmp	r4, r1
 801046c:	d10f      	bne.n	801048e <forward_cast+0x2092>
 801046e:	8828      	ldrh	r0, [r5, #0]
 8010470:	e7d7      	b.n	8010422 <forward_cast+0x2026>
 8010472:	42bc      	cmp	r4, r7
 8010474:	f001 8601 	beq.w	801207a <forward_cast+0x3c7e>
 8010478:	455c      	cmp	r4, fp
 801047a:	d108      	bne.n	801048e <forward_cast+0x2092>
 801047c:	edd5 7a00 	vldr	s15, [r5]
 8010480:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010484:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010488:	ee17 0a90 	vmov	r0, s15
 801048c:	e7c9      	b.n	8010422 <forward_cast+0x2026>
 801048e:	2000      	movs	r0, #0
 8010490:	e7c7      	b.n	8010422 <forward_cast+0x2026>
 8010492:	4555      	cmp	r5, sl
 8010494:	f4be a81a 	bcs.w	800e4cc <forward_cast+0xd0>
 8010498:	2300      	movs	r3, #0
 801049a:	4a0b      	ldr	r2, [pc, #44]	; (80104c8 <forward_cast+0x20cc>)
 801049c:	4619      	mov	r1, r3
 801049e:	464b      	mov	r3, r9
 80104a0:	46b9      	mov	r9, r7
 80104a2:	4637      	mov	r7, r6
 80104a4:	460e      	mov	r6, r1
 80104a6:	e02a      	b.n	80104fe <forward_cast+0x2102>
 80104a8:	00042040 	.word	0x00042040
 80104ac:	00840440 	.word	0x00840440
 80104b0:	01821040 	.word	0x01821040
 80104b4:	00040840 	.word	0x00040840
 80104b8:	00840840 	.word	0x00840840
 80104bc:	00041040 	.word	0x00041040
 80104c0:	00060440 	.word	0x00060440
 80104c4:	00842040 	.word	0x00842040
 80104c8:	00841040 	.word	0x00841040
 80104cc:	4544      	cmp	r4, r8
 80104ce:	f001 80e2 	beq.w	8011696 <forward_cast+0x329a>
 80104d2:	dd27      	ble.n	8010524 <forward_cast+0x2128>
 80104d4:	49a5      	ldr	r1, [pc, #660]	; (801076c <forward_cast+0x2370>)
 80104d6:	428c      	cmp	r4, r1
 80104d8:	f001 8606 	beq.w	80120e8 <forward_cast+0x3cec>
 80104dc:	f501 31f2 	add.w	r1, r1, #123904	; 0x1e400
 80104e0:	428c      	cmp	r4, r1
 80104e2:	d137      	bne.n	8010554 <forward_cast+0x2158>
 80104e4:	7828      	ldrb	r0, [r5, #0]
 80104e6:	3800      	subs	r0, #0
 80104e8:	bf18      	it	ne
 80104ea:	2001      	movne	r0, #1
 80104ec:	f300 0007 	ssat	r0, #8, r0
 80104f0:	441d      	add	r5, r3
 80104f2:	9900      	ldr	r1, [sp, #0]
 80104f4:	55b8      	strb	r0, [r7, r6]
 80104f6:	45aa      	cmp	sl, r5
 80104f8:	440e      	add	r6, r1
 80104fa:	f67d afe7 	bls.w	800e4cc <forward_cast+0xd0>
 80104fe:	454c      	cmp	r4, r9
 8010500:	f001 80c5 	beq.w	801168e <forward_cast+0x3292>
 8010504:	dde2      	ble.n	80104cc <forward_cast+0x20d0>
 8010506:	499a      	ldr	r1, [pc, #616]	; (8010770 <forward_cast+0x2374>)
 8010508:	428c      	cmp	r4, r1
 801050a:	f001 85db 	beq.w	80120c4 <forward_cast+0x3cc8>
 801050e:	dd11      	ble.n	8010534 <forward_cast+0x2138>
 8010510:	4998      	ldr	r1, [pc, #608]	; (8010774 <forward_cast+0x2378>)
 8010512:	428c      	cmp	r4, r1
 8010514:	d11e      	bne.n	8010554 <forward_cast+0x2158>
 8010516:	edd5 7a00 	vldr	s15, [r5]
 801051a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801051e:	ee17 0a90 	vmov	r0, s15
 8010522:	e7e3      	b.n	80104ec <forward_cast+0x20f0>
 8010524:	455c      	cmp	r4, fp
 8010526:	f001 85dc 	beq.w	80120e2 <forward_cast+0x3ce6>
 801052a:	4993      	ldr	r1, [pc, #588]	; (8010778 <forward_cast+0x237c>)
 801052c:	428c      	cmp	r4, r1
 801052e:	d111      	bne.n	8010554 <forward_cast+0x2158>
 8010530:	8828      	ldrh	r0, [r5, #0]
 8010532:	e7db      	b.n	80104ec <forward_cast+0x20f0>
 8010534:	f5a1 51c0 	sub.w	r1, r1, #6144	; 0x1800
 8010538:	428c      	cmp	r4, r1
 801053a:	f001 85e4 	beq.w	8012106 <forward_cast+0x3d0a>
 801053e:	4294      	cmp	r4, r2
 8010540:	d108      	bne.n	8010554 <forward_cast+0x2158>
 8010542:	edd5 7a00 	vldr	s15, [r5]
 8010546:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801054a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801054e:	ee17 0a90 	vmov	r0, s15
 8010552:	e7cb      	b.n	80104ec <forward_cast+0x20f0>
 8010554:	2000      	movs	r0, #0
 8010556:	e7c9      	b.n	80104ec <forward_cast+0x20f0>
 8010558:	4555      	cmp	r5, sl
 801055a:	f4bd afb7 	bcs.w	800e4cc <forward_cast+0xd0>
 801055e:	461f      	mov	r7, r3
 8010560:	4621      	mov	r1, r4
 8010562:	4628      	mov	r0, r5
 8010564:	f7fd fed6 	bl	800e314 <_array_handle_get_as_float>
 8010568:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801056c:	ee17 3a90 	vmov	r3, s15
 8010570:	f303 0307 	ssat	r3, #8, r3
 8010574:	444d      	add	r5, r9
 8010576:	b25b      	sxtb	r3, r3
 8010578:	45aa      	cmp	sl, r5
 801057a:	6033      	str	r3, [r6, #0]
 801057c:	443e      	add	r6, r7
 801057e:	d8ef      	bhi.n	8010560 <forward_cast+0x2164>
 8010580:	f7fd bfa4 	b.w	800e4cc <forward_cast+0xd0>
 8010584:	4555      	cmp	r5, sl
 8010586:	f4bd afa1 	bcs.w	800e4cc <forward_cast+0xd0>
 801058a:	2700      	movs	r7, #0
 801058c:	f8df 81e4 	ldr.w	r8, [pc, #484]	; 8010774 <forward_cast+0x2378>
 8010590:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8010790 <forward_cast+0x2394>
 8010594:	4b79      	ldr	r3, [pc, #484]	; (801077c <forward_cast+0x2380>)
 8010596:	4a7a      	ldr	r2, [pc, #488]	; (8010780 <forward_cast+0x2384>)
 8010598:	e016      	b.n	80105c8 <forward_cast+0x21cc>
 801059a:	4294      	cmp	r4, r2
 801059c:	f000 87ff 	beq.w	801159e <forward_cast+0x31a2>
 80105a0:	dd26      	ble.n	80105f0 <forward_cast+0x21f4>
 80105a2:	4972      	ldr	r1, [pc, #456]	; (801076c <forward_cast+0x2370>)
 80105a4:	428c      	cmp	r4, r1
 80105a6:	f001 8047 	beq.w	8011638 <forward_cast+0x323c>
 80105aa:	f501 31f2 	add.w	r1, r1, #123904	; 0x1e400
 80105ae:	428c      	cmp	r4, r1
 80105b0:	d137      	bne.n	8010622 <forward_cast+0x2226>
 80105b2:	7829      	ldrb	r1, [r5, #0]
 80105b4:	3900      	subs	r1, #0
 80105b6:	bf18      	it	ne
 80105b8:	2101      	movne	r1, #1
 80105ba:	444d      	add	r5, r9
 80105bc:	55f1      	strb	r1, [r6, r7]
 80105be:	9900      	ldr	r1, [sp, #0]
 80105c0:	45aa      	cmp	sl, r5
 80105c2:	440f      	add	r7, r1
 80105c4:	f67d af82 	bls.w	800e4cc <forward_cast+0xd0>
 80105c8:	496e      	ldr	r1, [pc, #440]	; (8010784 <forward_cast+0x2388>)
 80105ca:	428c      	cmp	r4, r1
 80105cc:	d018      	beq.n	8010600 <forward_cast+0x2204>
 80105ce:	dde4      	ble.n	801059a <forward_cast+0x219e>
 80105d0:	4967      	ldr	r1, [pc, #412]	; (8010770 <forward_cast+0x2374>)
 80105d2:	428c      	cmp	r4, r1
 80105d4:	f000 87ef 	beq.w	80115b6 <forward_cast+0x31ba>
 80105d8:	dd14      	ble.n	8010604 <forward_cast+0x2208>
 80105da:	4544      	cmp	r4, r8
 80105dc:	d121      	bne.n	8010622 <forward_cast+0x2226>
 80105de:	edd5 7a00 	vldr	s15, [r5]
 80105e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80105e6:	edcd 7a01 	vstr	s15, [sp, #4]
 80105ea:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80105ee:	e7e4      	b.n	80105ba <forward_cast+0x21be>
 80105f0:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 80105f4:	428c      	cmp	r4, r1
 80105f6:	d003      	beq.n	8010600 <forward_cast+0x2204>
 80105f8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80105fc:	428c      	cmp	r4, r1
 80105fe:	d110      	bne.n	8010622 <forward_cast+0x2226>
 8010600:	7829      	ldrb	r1, [r5, #0]
 8010602:	e7da      	b.n	80105ba <forward_cast+0x21be>
 8010604:	455c      	cmp	r4, fp
 8010606:	d0fb      	beq.n	8010600 <forward_cast+0x2204>
 8010608:	429c      	cmp	r4, r3
 801060a:	d10a      	bne.n	8010622 <forward_cast+0x2226>
 801060c:	edd5 7a00 	vldr	s15, [r5]
 8010610:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010614:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010618:	edcd 7a01 	vstr	s15, [sp, #4]
 801061c:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8010620:	e7cb      	b.n	80105ba <forward_cast+0x21be>
 8010622:	2100      	movs	r1, #0
 8010624:	e7c9      	b.n	80105ba <forward_cast+0x21be>
 8010626:	4555      	cmp	r5, sl
 8010628:	f4bd af50 	bcs.w	800e4cc <forward_cast+0xd0>
 801062c:	4f51      	ldr	r7, [pc, #324]	; (8010774 <forward_cast+0x2378>)
 801062e:	4b4f      	ldr	r3, [pc, #316]	; (801076c <forward_cast+0x2370>)
 8010630:	4a55      	ldr	r2, [pc, #340]	; (8010788 <forward_cast+0x238c>)
 8010632:	e013      	b.n	801065c <forward_cast+0x2260>
 8010634:	455c      	cmp	r4, fp
 8010636:	f000 87d2 	beq.w	80115de <forward_cast+0x31e2>
 801063a:	dd21      	ble.n	8010680 <forward_cast+0x2284>
 801063c:	429c      	cmp	r4, r3
 801063e:	f000 87e9 	beq.w	8011614 <forward_cast+0x3218>
 8010642:	4294      	cmp	r4, r2
 8010644:	d138      	bne.n	80106b8 <forward_cast+0x22bc>
 8010646:	7828      	ldrb	r0, [r5, #0]
 8010648:	3800      	subs	r0, #0
 801064a:	bf18      	it	ne
 801064c:	2001      	movne	r0, #1
 801064e:	444d      	add	r5, r9
 8010650:	9900      	ldr	r1, [sp, #0]
 8010652:	6030      	str	r0, [r6, #0]
 8010654:	45aa      	cmp	sl, r5
 8010656:	440e      	add	r6, r1
 8010658:	f67d af38 	bls.w	800e4cc <forward_cast+0xd0>
 801065c:	4544      	cmp	r4, r8
 801065e:	f000 87ba 	beq.w	80115d6 <forward_cast+0x31da>
 8010662:	dde7      	ble.n	8010634 <forward_cast+0x2238>
 8010664:	4942      	ldr	r1, [pc, #264]	; (8010770 <forward_cast+0x2374>)
 8010666:	428c      	cmp	r4, r1
 8010668:	f000 87c3 	beq.w	80115f2 <forward_cast+0x31f6>
 801066c:	dd12      	ble.n	8010694 <forward_cast+0x2298>
 801066e:	42bc      	cmp	r4, r7
 8010670:	d122      	bne.n	80106b8 <forward_cast+0x22bc>
 8010672:	edd5 7a00 	vldr	s15, [r5]
 8010676:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801067a:	ee17 0a90 	vmov	r0, s15
 801067e:	e7e6      	b.n	801064e <forward_cast+0x2252>
 8010680:	4942      	ldr	r1, [pc, #264]	; (801078c <forward_cast+0x2390>)
 8010682:	428c      	cmp	r4, r1
 8010684:	f000 87c3 	beq.w	801160e <forward_cast+0x3212>
 8010688:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 801068c:	428c      	cmp	r4, r1
 801068e:	d113      	bne.n	80106b8 <forward_cast+0x22bc>
 8010690:	8828      	ldrh	r0, [r5, #0]
 8010692:	e7dc      	b.n	801064e <forward_cast+0x2252>
 8010694:	f5a1 51c0 	sub.w	r1, r1, #6144	; 0x1800
 8010698:	428c      	cmp	r4, r1
 801069a:	f000 87c9 	beq.w	8011630 <forward_cast+0x3234>
 801069e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80106a2:	428c      	cmp	r4, r1
 80106a4:	d108      	bne.n	80106b8 <forward_cast+0x22bc>
 80106a6:	edd5 7a00 	vldr	s15, [r5]
 80106aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80106ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80106b2:	ee17 0a90 	vmov	r0, s15
 80106b6:	e7ca      	b.n	801064e <forward_cast+0x2252>
 80106b8:	2000      	movs	r0, #0
 80106ba:	e7c8      	b.n	801064e <forward_cast+0x2252>
 80106bc:	4555      	cmp	r5, sl
 80106be:	f4bd af05 	bcs.w	800e4cc <forward_cast+0xd0>
 80106c2:	2700      	movs	r7, #0
 80106c4:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 8010774 <forward_cast+0x2378>
 80106c8:	f8df b0c4 	ldr.w	fp, [pc, #196]	; 8010790 <forward_cast+0x2394>
 80106cc:	4b2b      	ldr	r3, [pc, #172]	; (801077c <forward_cast+0x2380>)
 80106ce:	4a2c      	ldr	r2, [pc, #176]	; (8010780 <forward_cast+0x2384>)
 80106d0:	e016      	b.n	8010700 <forward_cast+0x2304>
 80106d2:	4294      	cmp	r4, r2
 80106d4:	f000 8637 	beq.w	8011346 <forward_cast+0x2f4a>
 80106d8:	dd26      	ble.n	8010728 <forward_cast+0x232c>
 80106da:	4924      	ldr	r1, [pc, #144]	; (801076c <forward_cast+0x2370>)
 80106dc:	428c      	cmp	r4, r1
 80106de:	f001 8526 	beq.w	801212e <forward_cast+0x3d32>
 80106e2:	f501 31f2 	add.w	r1, r1, #123904	; 0x1e400
 80106e6:	428c      	cmp	r4, r1
 80106e8:	d137      	bne.n	801075a <forward_cast+0x235e>
 80106ea:	7829      	ldrb	r1, [r5, #0]
 80106ec:	3900      	subs	r1, #0
 80106ee:	bf18      	it	ne
 80106f0:	2101      	movne	r1, #1
 80106f2:	444d      	add	r5, r9
 80106f4:	55f1      	strb	r1, [r6, r7]
 80106f6:	9900      	ldr	r1, [sp, #0]
 80106f8:	45aa      	cmp	sl, r5
 80106fa:	440f      	add	r7, r1
 80106fc:	f67d aee6 	bls.w	800e4cc <forward_cast+0xd0>
 8010700:	4920      	ldr	r1, [pc, #128]	; (8010784 <forward_cast+0x2388>)
 8010702:	428c      	cmp	r4, r1
 8010704:	d018      	beq.n	8010738 <forward_cast+0x233c>
 8010706:	dde4      	ble.n	80106d2 <forward_cast+0x22d6>
 8010708:	4919      	ldr	r1, [pc, #100]	; (8010770 <forward_cast+0x2374>)
 801070a:	428c      	cmp	r4, r1
 801070c:	f001 84ff 	beq.w	801210e <forward_cast+0x3d12>
 8010710:	dd14      	ble.n	801073c <forward_cast+0x2340>
 8010712:	4544      	cmp	r4, r8
 8010714:	d121      	bne.n	801075a <forward_cast+0x235e>
 8010716:	edd5 7a00 	vldr	s15, [r5]
 801071a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801071e:	edcd 7a01 	vstr	s15, [sp, #4]
 8010722:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8010726:	e7e4      	b.n	80106f2 <forward_cast+0x22f6>
 8010728:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 801072c:	428c      	cmp	r4, r1
 801072e:	d003      	beq.n	8010738 <forward_cast+0x233c>
 8010730:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8010734:	428c      	cmp	r4, r1
 8010736:	d110      	bne.n	801075a <forward_cast+0x235e>
 8010738:	7829      	ldrb	r1, [r5, #0]
 801073a:	e7da      	b.n	80106f2 <forward_cast+0x22f6>
 801073c:	455c      	cmp	r4, fp
 801073e:	d0fb      	beq.n	8010738 <forward_cast+0x233c>
 8010740:	429c      	cmp	r4, r3
 8010742:	d10a      	bne.n	801075a <forward_cast+0x235e>
 8010744:	edd5 7a00 	vldr	s15, [r5]
 8010748:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801074c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010750:	edcd 7a01 	vstr	s15, [sp, #4]
 8010754:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8010758:	e7cb      	b.n	80106f2 <forward_cast+0x22f6>
 801075a:	2100      	movs	r1, #0
 801075c:	e7c9      	b.n	80106f2 <forward_cast+0x22f6>
 801075e:	4555      	cmp	r5, sl
 8010760:	f4bd aeb4 	bcs.w	800e4cc <forward_cast+0xd0>
 8010764:	4b01      	ldr	r3, [pc, #4]	; (801076c <forward_cast+0x2370>)
 8010766:	4a08      	ldr	r2, [pc, #32]	; (8010788 <forward_cast+0x238c>)
 8010768:	e028      	b.n	80107bc <forward_cast+0x23c0>
 801076a:	bf00      	nop
 801076c:	00042040 	.word	0x00042040
 8010770:	00842040 	.word	0x00842040
 8010774:	01821040 	.word	0x01821040
 8010778:	00040840 	.word	0x00040840
 801077c:	00841040 	.word	0x00841040
 8010780:	00041040 	.word	0x00041040
 8010784:	00840440 	.word	0x00840440
 8010788:	00060440 	.word	0x00060440
 801078c:	00040440 	.word	0x00040440
 8010790:	00840840 	.word	0x00840840
 8010794:	455c      	cmp	r4, fp
 8010796:	f000 8675 	beq.w	8011484 <forward_cast+0x3088>
 801079a:	dd22      	ble.n	80107e2 <forward_cast+0x23e6>
 801079c:	429c      	cmp	r4, r3
 801079e:	f001 8522 	beq.w	80121e6 <forward_cast+0x3dea>
 80107a2:	4294      	cmp	r4, r2
 80107a4:	d137      	bne.n	8010816 <forward_cast+0x241a>
 80107a6:	7828      	ldrb	r0, [r5, #0]
 80107a8:	3800      	subs	r0, #0
 80107aa:	bf18      	it	ne
 80107ac:	2001      	movne	r0, #1
 80107ae:	444d      	add	r5, r9
 80107b0:	9900      	ldr	r1, [sp, #0]
 80107b2:	6030      	str	r0, [r6, #0]
 80107b4:	45aa      	cmp	sl, r5
 80107b6:	440e      	add	r6, r1
 80107b8:	f67d ae88 	bls.w	800e4cc <forward_cast+0xd0>
 80107bc:	4544      	cmp	r4, r8
 80107be:	f000 85be 	beq.w	801133e <forward_cast+0x2f42>
 80107c2:	dde7      	ble.n	8010794 <forward_cast+0x2398>
 80107c4:	499a      	ldr	r1, [pc, #616]	; (8010a30 <forward_cast+0x2634>)
 80107c6:	428c      	cmp	r4, r1
 80107c8:	f001 84fc 	beq.w	80121c4 <forward_cast+0x3dc8>
 80107cc:	dd13      	ble.n	80107f6 <forward_cast+0x23fa>
 80107ce:	4999      	ldr	r1, [pc, #612]	; (8010a34 <forward_cast+0x2638>)
 80107d0:	428c      	cmp	r4, r1
 80107d2:	d120      	bne.n	8010816 <forward_cast+0x241a>
 80107d4:	edd5 7a00 	vldr	s15, [r5]
 80107d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80107dc:	ee17 0a90 	vmov	r0, s15
 80107e0:	e7e5      	b.n	80107ae <forward_cast+0x23b2>
 80107e2:	4995      	ldr	r1, [pc, #596]	; (8010a38 <forward_cast+0x263c>)
 80107e4:	428c      	cmp	r4, r1
 80107e6:	f001 84fb 	beq.w	80121e0 <forward_cast+0x3de4>
 80107ea:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80107ee:	428c      	cmp	r4, r1
 80107f0:	d111      	bne.n	8010816 <forward_cast+0x241a>
 80107f2:	8828      	ldrh	r0, [r5, #0]
 80107f4:	e7db      	b.n	80107ae <forward_cast+0x23b2>
 80107f6:	f5a1 51c0 	sub.w	r1, r1, #6144	; 0x1800
 80107fa:	428c      	cmp	r4, r1
 80107fc:	f001 8501 	beq.w	8012202 <forward_cast+0x3e06>
 8010800:	42bc      	cmp	r4, r7
 8010802:	d108      	bne.n	8010816 <forward_cast+0x241a>
 8010804:	edd5 7a00 	vldr	s15, [r5]
 8010808:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801080c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010810:	ee17 0a90 	vmov	r0, s15
 8010814:	e7cb      	b.n	80107ae <forward_cast+0x23b2>
 8010816:	2000      	movs	r0, #0
 8010818:	e7c9      	b.n	80107ae <forward_cast+0x23b2>
 801081a:	4555      	cmp	r5, sl
 801081c:	f4bd ae56 	bcs.w	800e4cc <forward_cast+0xd0>
 8010820:	4b86      	ldr	r3, [pc, #536]	; (8010a3c <forward_cast+0x2640>)
 8010822:	4a87      	ldr	r2, [pc, #540]	; (8010a40 <forward_cast+0x2644>)
 8010824:	e013      	b.n	801084e <forward_cast+0x2452>
 8010826:	42bc      	cmp	r4, r7
 8010828:	f000 859d 	beq.w	8011366 <forward_cast+0x2f6a>
 801082c:	dd22      	ble.n	8010874 <forward_cast+0x2478>
 801082e:	429c      	cmp	r4, r3
 8010830:	f001 84fc 	beq.w	801222c <forward_cast+0x3e30>
 8010834:	4294      	cmp	r4, r2
 8010836:	d137      	bne.n	80108a8 <forward_cast+0x24ac>
 8010838:	7828      	ldrb	r0, [r5, #0]
 801083a:	3800      	subs	r0, #0
 801083c:	bf18      	it	ne
 801083e:	2001      	movne	r0, #1
 8010840:	444d      	add	r5, r9
 8010842:	9900      	ldr	r1, [sp, #0]
 8010844:	6030      	str	r0, [r6, #0]
 8010846:	45aa      	cmp	sl, r5
 8010848:	440e      	add	r6, r1
 801084a:	f67d ae3f 	bls.w	800e4cc <forward_cast+0xd0>
 801084e:	4544      	cmp	r4, r8
 8010850:	f000 8585 	beq.w	801135e <forward_cast+0x2f62>
 8010854:	dde7      	ble.n	8010826 <forward_cast+0x242a>
 8010856:	4976      	ldr	r1, [pc, #472]	; (8010a30 <forward_cast+0x2634>)
 8010858:	428c      	cmp	r4, r1
 801085a:	f001 84d6 	beq.w	801220a <forward_cast+0x3e0e>
 801085e:	dd13      	ble.n	8010888 <forward_cast+0x248c>
 8010860:	4974      	ldr	r1, [pc, #464]	; (8010a34 <forward_cast+0x2638>)
 8010862:	428c      	cmp	r4, r1
 8010864:	d120      	bne.n	80108a8 <forward_cast+0x24ac>
 8010866:	edd5 7a00 	vldr	s15, [r5]
 801086a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801086e:	ee17 0a90 	vmov	r0, s15
 8010872:	e7e5      	b.n	8010840 <forward_cast+0x2444>
 8010874:	4970      	ldr	r1, [pc, #448]	; (8010a38 <forward_cast+0x263c>)
 8010876:	428c      	cmp	r4, r1
 8010878:	f001 84d5 	beq.w	8012226 <forward_cast+0x3e2a>
 801087c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8010880:	428c      	cmp	r4, r1
 8010882:	d111      	bne.n	80108a8 <forward_cast+0x24ac>
 8010884:	8828      	ldrh	r0, [r5, #0]
 8010886:	e7db      	b.n	8010840 <forward_cast+0x2444>
 8010888:	f5a1 51c0 	sub.w	r1, r1, #6144	; 0x1800
 801088c:	428c      	cmp	r4, r1
 801088e:	f001 84db 	beq.w	8012248 <forward_cast+0x3e4c>
 8010892:	455c      	cmp	r4, fp
 8010894:	d108      	bne.n	80108a8 <forward_cast+0x24ac>
 8010896:	edd5 7a00 	vldr	s15, [r5]
 801089a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801089e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80108a2:	ee17 0a90 	vmov	r0, s15
 80108a6:	e7cb      	b.n	8010840 <forward_cast+0x2444>
 80108a8:	2000      	movs	r0, #0
 80108aa:	e7c9      	b.n	8010840 <forward_cast+0x2444>
 80108ac:	4555      	cmp	r5, sl
 80108ae:	f4bd ae0d 	bcs.w	800e4cc <forward_cast+0xd0>
 80108b2:	f8df 8180 	ldr.w	r8, [pc, #384]	; 8010a34 <forward_cast+0x2638>
 80108b6:	4b61      	ldr	r3, [pc, #388]	; (8010a3c <forward_cast+0x2640>)
 80108b8:	4a61      	ldr	r2, [pc, #388]	; (8010a40 <forward_cast+0x2644>)
 80108ba:	e017      	b.n	80108ec <forward_cast+0x24f0>
 80108bc:	4961      	ldr	r1, [pc, #388]	; (8010a44 <forward_cast+0x2648>)
 80108be:	428c      	cmp	r4, r1
 80108c0:	f000 850d 	beq.w	80112de <forward_cast+0x2ee2>
 80108c4:	dd24      	ble.n	8010910 <forward_cast+0x2514>
 80108c6:	429c      	cmp	r4, r3
 80108c8:	f000 84f7 	beq.w	80112ba <forward_cast+0x2ebe>
 80108cc:	4294      	cmp	r4, r2
 80108ce:	d13a      	bne.n	8010946 <forward_cast+0x254a>
 80108d0:	7828      	ldrb	r0, [r5, #0]
 80108d2:	3800      	subs	r0, #0
 80108d4:	bf18      	it	ne
 80108d6:	2001      	movne	r0, #1
 80108d8:	f300 0007 	ssat	r0, #8, r0
 80108dc:	444d      	add	r5, r9
 80108de:	b240      	sxtb	r0, r0
 80108e0:	9900      	ldr	r1, [sp, #0]
 80108e2:	45aa      	cmp	sl, r5
 80108e4:	6030      	str	r0, [r6, #0]
 80108e6:	440e      	add	r6, r1
 80108e8:	f67d adf0 	bls.w	800e4cc <forward_cast+0xd0>
 80108ec:	42bc      	cmp	r4, r7
 80108ee:	f000 84c0 	beq.w	8011272 <forward_cast+0x2e76>
 80108f2:	dde3      	ble.n	80108bc <forward_cast+0x24c0>
 80108f4:	494e      	ldr	r1, [pc, #312]	; (8010a30 <forward_cast+0x2634>)
 80108f6:	428c      	cmp	r4, r1
 80108f8:	f000 84ce 	beq.w	8011298 <forward_cast+0x2e9c>
 80108fc:	dd13      	ble.n	8010926 <forward_cast+0x252a>
 80108fe:	4544      	cmp	r4, r8
 8010900:	d121      	bne.n	8010946 <forward_cast+0x254a>
 8010902:	edd5 7a00 	vldr	s15, [r5]
 8010906:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801090a:	ee17 0a90 	vmov	r0, s15
 801090e:	e7e3      	b.n	80108d8 <forward_cast+0x24dc>
 8010910:	f5a1 6140 	sub.w	r1, r1, #3072	; 0xc00
 8010914:	428c      	cmp	r4, r1
 8010916:	f000 84cd 	beq.w	80112b4 <forward_cast+0x2eb8>
 801091a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 801091e:	428c      	cmp	r4, r1
 8010920:	d111      	bne.n	8010946 <forward_cast+0x254a>
 8010922:	8828      	ldrh	r0, [r5, #0]
 8010924:	e7d8      	b.n	80108d8 <forward_cast+0x24dc>
 8010926:	f5a1 51c0 	sub.w	r1, r1, #6144	; 0x1800
 801092a:	428c      	cmp	r4, r1
 801092c:	f000 84d3 	beq.w	80112d6 <forward_cast+0x2eda>
 8010930:	455c      	cmp	r4, fp
 8010932:	d108      	bne.n	8010946 <forward_cast+0x254a>
 8010934:	edd5 7a00 	vldr	s15, [r5]
 8010938:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801093c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010940:	ee17 0a90 	vmov	r0, s15
 8010944:	e7c8      	b.n	80108d8 <forward_cast+0x24dc>
 8010946:	2000      	movs	r0, #0
 8010948:	e7c6      	b.n	80108d8 <forward_cast+0x24dc>
 801094a:	4555      	cmp	r5, sl
 801094c:	f4bd adbe 	bcs.w	800e4cc <forward_cast+0xd0>
 8010950:	9f00      	ldr	r7, [sp, #0]
 8010952:	4628      	mov	r0, r5
 8010954:	4621      	mov	r1, r4
 8010956:	f7fd fcdd 	bl	800e314 <_array_handle_get_as_float>
 801095a:	eeb5 0a40 	vcmp.f32	s0, #0.0
 801095e:	444d      	add	r5, r9
 8010960:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010964:	bf14      	ite	ne
 8010966:	2301      	movne	r3, #1
 8010968:	2300      	moveq	r3, #0
 801096a:	45aa      	cmp	sl, r5
 801096c:	7033      	strb	r3, [r6, #0]
 801096e:	443e      	add	r6, r7
 8010970:	d8ef      	bhi.n	8010952 <forward_cast+0x2556>
 8010972:	f7fd bdab 	b.w	800e4cc <forward_cast+0xd0>
 8010976:	4555      	cmp	r5, sl
 8010978:	f4bd ada8 	bcs.w	800e4cc <forward_cast+0xd0>
 801097c:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 8010a34 <forward_cast+0x2638>
 8010980:	4f31      	ldr	r7, [pc, #196]	; (8010a48 <forward_cast+0x264c>)
 8010982:	f8df b0cc 	ldr.w	fp, [pc, #204]	; 8010a50 <forward_cast+0x2654>
 8010986:	4b2f      	ldr	r3, [pc, #188]	; (8010a44 <forward_cast+0x2648>)
 8010988:	4a2c      	ldr	r2, [pc, #176]	; (8010a3c <forward_cast+0x2640>)
 801098a:	e017      	b.n	80109bc <forward_cast+0x25c0>
 801098c:	429c      	cmp	r4, r3
 801098e:	f000 829d 	beq.w	8010ecc <forward_cast+0x2ad0>
 8010992:	dd26      	ble.n	80109e2 <forward_cast+0x25e6>
 8010994:	4294      	cmp	r4, r2
 8010996:	f000 82b9 	beq.w	8010f0c <forward_cast+0x2b10>
 801099a:	4929      	ldr	r1, [pc, #164]	; (8010a40 <forward_cast+0x2644>)
 801099c:	428c      	cmp	r4, r1
 801099e:	d139      	bne.n	8010a14 <forward_cast+0x2618>
 80109a0:	7828      	ldrb	r0, [r5, #0]
 80109a2:	3800      	subs	r0, #0
 80109a4:	bf18      	it	ne
 80109a6:	2001      	movne	r0, #1
 80109a8:	f380 0008 	usat	r0, #8, r0
 80109ac:	444d      	add	r5, r9
 80109ae:	b2c0      	uxtb	r0, r0
 80109b0:	9900      	ldr	r1, [sp, #0]
 80109b2:	45aa      	cmp	sl, r5
 80109b4:	6030      	str	r0, [r6, #0]
 80109b6:	440e      	add	r6, r1
 80109b8:	f67d ad88 	bls.w	800e4cc <forward_cast+0xd0>
 80109bc:	4923      	ldr	r1, [pc, #140]	; (8010a4c <forward_cast+0x2650>)
 80109be:	428c      	cmp	r4, r1
 80109c0:	f000 82b4 	beq.w	8010f2c <forward_cast+0x2b30>
 80109c4:	dde2      	ble.n	801098c <forward_cast+0x2590>
 80109c6:	491a      	ldr	r1, [pc, #104]	; (8010a30 <forward_cast+0x2634>)
 80109c8:	428c      	cmp	r4, r1
 80109ca:	f000 8290 	beq.w	8010eee <forward_cast+0x2af2>
 80109ce:	dd13      	ble.n	80109f8 <forward_cast+0x25fc>
 80109d0:	4544      	cmp	r4, r8
 80109d2:	d11f      	bne.n	8010a14 <forward_cast+0x2618>
 80109d4:	edd5 7a00 	vldr	s15, [r5]
 80109d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80109dc:	ee17 0a90 	vmov	r0, s15
 80109e0:	e7e2      	b.n	80109a8 <forward_cast+0x25ac>
 80109e2:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 80109e6:	428c      	cmp	r4, r1
 80109e8:	f000 828e 	beq.w	8010f08 <forward_cast+0x2b0c>
 80109ec:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80109f0:	428c      	cmp	r4, r1
 80109f2:	d10f      	bne.n	8010a14 <forward_cast+0x2618>
 80109f4:	8828      	ldrh	r0, [r5, #0]
 80109f6:	e7d7      	b.n	80109a8 <forward_cast+0x25ac>
 80109f8:	42bc      	cmp	r4, r7
 80109fa:	f000 8294 	beq.w	8010f26 <forward_cast+0x2b2a>
 80109fe:	455c      	cmp	r4, fp
 8010a00:	d108      	bne.n	8010a14 <forward_cast+0x2618>
 8010a02:	edd5 7a00 	vldr	s15, [r5]
 8010a06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010a0a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010a0e:	ee17 0a90 	vmov	r0, s15
 8010a12:	e7c9      	b.n	80109a8 <forward_cast+0x25ac>
 8010a14:	2000      	movs	r0, #0
 8010a16:	e7c7      	b.n	80109a8 <forward_cast+0x25ac>
 8010a18:	4555      	cmp	r5, sl
 8010a1a:	f4bd ad57 	bcs.w	800e4cc <forward_cast+0xd0>
 8010a1e:	f8df 8014 	ldr.w	r8, [pc, #20]	; 8010a34 <forward_cast+0x2638>
 8010a22:	4f09      	ldr	r7, [pc, #36]	; (8010a48 <forward_cast+0x264c>)
 8010a24:	f8df b028 	ldr.w	fp, [pc, #40]	; 8010a50 <forward_cast+0x2654>
 8010a28:	4b06      	ldr	r3, [pc, #24]	; (8010a44 <forward_cast+0x2648>)
 8010a2a:	4a04      	ldr	r2, [pc, #16]	; (8010a3c <forward_cast+0x2640>)
 8010a2c:	e027      	b.n	8010a7e <forward_cast+0x2682>
 8010a2e:	bf00      	nop
 8010a30:	00842040 	.word	0x00842040
 8010a34:	01821040 	.word	0x01821040
 8010a38:	00040440 	.word	0x00040440
 8010a3c:	00042040 	.word	0x00042040
 8010a40:	00060440 	.word	0x00060440
 8010a44:	00041040 	.word	0x00041040
 8010a48:	00840840 	.word	0x00840840
 8010a4c:	00840440 	.word	0x00840440
 8010a50:	00841040 	.word	0x00841040
 8010a54:	429c      	cmp	r4, r3
 8010a56:	f000 8298 	beq.w	8010f8a <forward_cast+0x2b8e>
 8010a5a:	dd26      	ble.n	8010aaa <forward_cast+0x26ae>
 8010a5c:	4294      	cmp	r4, r2
 8010a5e:	f000 82a0 	beq.w	8010fa2 <forward_cast+0x2ba6>
 8010a62:	499c      	ldr	r1, [pc, #624]	; (8010cd4 <forward_cast+0x28d8>)
 8010a64:	428c      	cmp	r4, r1
 8010a66:	d13e      	bne.n	8010ae6 <forward_cast+0x26ea>
 8010a68:	7829      	ldrb	r1, [r5, #0]
 8010a6a:	3900      	subs	r1, #0
 8010a6c:	bf18      	it	ne
 8010a6e:	2101      	movne	r1, #1
 8010a70:	444d      	add	r5, r9
 8010a72:	6031      	str	r1, [r6, #0]
 8010a74:	9900      	ldr	r1, [sp, #0]
 8010a76:	45aa      	cmp	sl, r5
 8010a78:	440e      	add	r6, r1
 8010a7a:	f67d ad27 	bls.w	800e4cc <forward_cast+0xd0>
 8010a7e:	4996      	ldr	r1, [pc, #600]	; (8010cd8 <forward_cast+0x28dc>)
 8010a80:	428c      	cmp	r4, r1
 8010a82:	f000 827c 	beq.w	8010f7e <forward_cast+0x2b82>
 8010a86:	dde5      	ble.n	8010a54 <forward_cast+0x2658>
 8010a88:	4994      	ldr	r1, [pc, #592]	; (8010cdc <forward_cast+0x28e0>)
 8010a8a:	428c      	cmp	r4, r1
 8010a8c:	f000 8206 	beq.w	8010e9c <forward_cast+0x2aa0>
 8010a90:	dd18      	ble.n	8010ac4 <forward_cast+0x26c8>
 8010a92:	4544      	cmp	r4, r8
 8010a94:	d127      	bne.n	8010ae6 <forward_cast+0x26ea>
 8010a96:	edd5 7a00 	vldr	s15, [r5]
 8010a9a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8010a9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010aa2:	bf14      	ite	ne
 8010aa4:	2101      	movne	r1, #1
 8010aa6:	2100      	moveq	r1, #0
 8010aa8:	e7e2      	b.n	8010a70 <forward_cast+0x2674>
 8010aaa:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8010aae:	428c      	cmp	r4, r1
 8010ab0:	d0da      	beq.n	8010a68 <forward_cast+0x266c>
 8010ab2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8010ab6:	428c      	cmp	r4, r1
 8010ab8:	d115      	bne.n	8010ae6 <forward_cast+0x26ea>
 8010aba:	8829      	ldrh	r1, [r5, #0]
 8010abc:	3900      	subs	r1, #0
 8010abe:	bf18      	it	ne
 8010ac0:	2101      	movne	r1, #1
 8010ac2:	e7d5      	b.n	8010a70 <forward_cast+0x2674>
 8010ac4:	42bc      	cmp	r4, r7
 8010ac6:	f000 827c 	beq.w	8010fc2 <forward_cast+0x2bc6>
 8010aca:	455c      	cmp	r4, fp
 8010acc:	d10b      	bne.n	8010ae6 <forward_cast+0x26ea>
 8010ace:	edd5 7a00 	vldr	s15, [r5]
 8010ad2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010ad6:	eef5 7a40 	vcmp.f32	s15, #0.0
 8010ada:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ade:	bf14      	ite	ne
 8010ae0:	2101      	movne	r1, #1
 8010ae2:	2100      	moveq	r1, #0
 8010ae4:	e7c4      	b.n	8010a70 <forward_cast+0x2674>
 8010ae6:	2100      	movs	r1, #0
 8010ae8:	e7c2      	b.n	8010a70 <forward_cast+0x2674>
 8010aea:	4555      	cmp	r5, sl
 8010aec:	f4bd acee 	bcs.w	800e4cc <forward_cast+0xd0>
 8010af0:	4b7b      	ldr	r3, [pc, #492]	; (8010ce0 <forward_cast+0x28e4>)
 8010af2:	4a78      	ldr	r2, [pc, #480]	; (8010cd4 <forward_cast+0x28d8>)
 8010af4:	e014      	b.n	8010b20 <forward_cast+0x2724>
 8010af6:	497b      	ldr	r1, [pc, #492]	; (8010ce4 <forward_cast+0x28e8>)
 8010af8:	428c      	cmp	r4, r1
 8010afa:	f000 832d 	beq.w	8011158 <forward_cast+0x2d5c>
 8010afe:	dd21      	ble.n	8010b44 <forward_cast+0x2748>
 8010b00:	429c      	cmp	r4, r3
 8010b02:	f000 819c 	beq.w	8010e3e <forward_cast+0x2a42>
 8010b06:	4294      	cmp	r4, r2
 8010b08:	d137      	bne.n	8010b7a <forward_cast+0x277e>
 8010b0a:	7828      	ldrb	r0, [r5, #0]
 8010b0c:	3800      	subs	r0, #0
 8010b0e:	bf18      	it	ne
 8010b10:	2001      	movne	r0, #1
 8010b12:	444d      	add	r5, r9
 8010b14:	9900      	ldr	r1, [sp, #0]
 8010b16:	6030      	str	r0, [r6, #0]
 8010b18:	45aa      	cmp	sl, r5
 8010b1a:	440e      	add	r6, r1
 8010b1c:	f67d acd6 	bls.w	800e4cc <forward_cast+0xd0>
 8010b20:	4544      	cmp	r4, r8
 8010b22:	f000 8316 	beq.w	8011152 <forward_cast+0x2d56>
 8010b26:	dde6      	ble.n	8010af6 <forward_cast+0x26fa>
 8010b28:	496c      	ldr	r1, [pc, #432]	; (8010cdc <forward_cast+0x28e0>)
 8010b2a:	428c      	cmp	r4, r1
 8010b2c:	f000 8178 	beq.w	8010e20 <forward_cast+0x2a24>
 8010b30:	dd13      	ble.n	8010b5a <forward_cast+0x275e>
 8010b32:	42bc      	cmp	r4, r7
 8010b34:	d121      	bne.n	8010b7a <forward_cast+0x277e>
 8010b36:	edd5 7a00 	vldr	s15, [r5]
 8010b3a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010b3e:	ee17 0a90 	vmov	r0, s15
 8010b42:	e7e6      	b.n	8010b12 <forward_cast+0x2716>
 8010b44:	f5a1 6140 	sub.w	r1, r1, #3072	; 0xc00
 8010b48:	428c      	cmp	r4, r1
 8010b4a:	f000 8176 	beq.w	8010e3a <forward_cast+0x2a3e>
 8010b4e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8010b52:	428c      	cmp	r4, r1
 8010b54:	d111      	bne.n	8010b7a <forward_cast+0x277e>
 8010b56:	8828      	ldrh	r0, [r5, #0]
 8010b58:	e7db      	b.n	8010b12 <forward_cast+0x2716>
 8010b5a:	f5a1 51c0 	sub.w	r1, r1, #6144	; 0x1800
 8010b5e:	428c      	cmp	r4, r1
 8010b60:	f000 817a 	beq.w	8010e58 <forward_cast+0x2a5c>
 8010b64:	455c      	cmp	r4, fp
 8010b66:	d108      	bne.n	8010b7a <forward_cast+0x277e>
 8010b68:	edd5 7a00 	vldr	s15, [r5]
 8010b6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010b70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010b74:	ee17 0a90 	vmov	r0, s15
 8010b78:	e7cb      	b.n	8010b12 <forward_cast+0x2716>
 8010b7a:	2000      	movs	r0, #0
 8010b7c:	e7c9      	b.n	8010b12 <forward_cast+0x2716>
 8010b7e:	4555      	cmp	r5, sl
 8010b80:	f4bd aca4 	bcs.w	800e4cc <forward_cast+0xd0>
 8010b84:	f8df 8168 	ldr.w	r8, [pc, #360]	; 8010cf0 <forward_cast+0x28f4>
 8010b88:	4f57      	ldr	r7, [pc, #348]	; (8010ce8 <forward_cast+0x28ec>)
 8010b8a:	f8df b160 	ldr.w	fp, [pc, #352]	; 8010cec <forward_cast+0x28f0>
 8010b8e:	4b55      	ldr	r3, [pc, #340]	; (8010ce4 <forward_cast+0x28e8>)
 8010b90:	4a53      	ldr	r2, [pc, #332]	; (8010ce0 <forward_cast+0x28e4>)
 8010b92:	e017      	b.n	8010bc4 <forward_cast+0x27c8>
 8010b94:	429c      	cmp	r4, r3
 8010b96:	f000 82cf 	beq.w	8011138 <forward_cast+0x2d3c>
 8010b9a:	dd26      	ble.n	8010bea <forward_cast+0x27ee>
 8010b9c:	4294      	cmp	r4, r2
 8010b9e:	f000 816d 	beq.w	8010e7c <forward_cast+0x2a80>
 8010ba2:	494c      	ldr	r1, [pc, #304]	; (8010cd4 <forward_cast+0x28d8>)
 8010ba4:	428c      	cmp	r4, r1
 8010ba6:	d139      	bne.n	8010c1c <forward_cast+0x2820>
 8010ba8:	7828      	ldrb	r0, [r5, #0]
 8010baa:	3800      	subs	r0, #0
 8010bac:	bf18      	it	ne
 8010bae:	2001      	movne	r0, #1
 8010bb0:	f300 000f 	ssat	r0, #16, r0
 8010bb4:	444d      	add	r5, r9
 8010bb6:	b200      	sxth	r0, r0
 8010bb8:	9900      	ldr	r1, [sp, #0]
 8010bba:	45aa      	cmp	sl, r5
 8010bbc:	6030      	str	r0, [r6, #0]
 8010bbe:	440e      	add	r6, r1
 8010bc0:	f67d ac84 	bls.w	800e4cc <forward_cast+0xd0>
 8010bc4:	4944      	ldr	r1, [pc, #272]	; (8010cd8 <forward_cast+0x28dc>)
 8010bc6:	428c      	cmp	r4, r1
 8010bc8:	f000 8101 	beq.w	8010dce <forward_cast+0x29d2>
 8010bcc:	dde2      	ble.n	8010b94 <forward_cast+0x2798>
 8010bce:	4943      	ldr	r1, [pc, #268]	; (8010cdc <forward_cast+0x28e0>)
 8010bd0:	428c      	cmp	r4, r1
 8010bd2:	f000 8144 	beq.w	8010e5e <forward_cast+0x2a62>
 8010bd6:	dd13      	ble.n	8010c00 <forward_cast+0x2804>
 8010bd8:	4544      	cmp	r4, r8
 8010bda:	d11f      	bne.n	8010c1c <forward_cast+0x2820>
 8010bdc:	edd5 7a00 	vldr	s15, [r5]
 8010be0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010be4:	ee17 0a90 	vmov	r0, s15
 8010be8:	e7e2      	b.n	8010bb0 <forward_cast+0x27b4>
 8010bea:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8010bee:	428c      	cmp	r4, r1
 8010bf0:	f000 8142 	beq.w	8010e78 <forward_cast+0x2a7c>
 8010bf4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8010bf8:	428c      	cmp	r4, r1
 8010bfa:	d10f      	bne.n	8010c1c <forward_cast+0x2820>
 8010bfc:	8828      	ldrh	r0, [r5, #0]
 8010bfe:	e7d7      	b.n	8010bb0 <forward_cast+0x27b4>
 8010c00:	42bc      	cmp	r4, r7
 8010c02:	f000 8148 	beq.w	8010e96 <forward_cast+0x2a9a>
 8010c06:	455c      	cmp	r4, fp
 8010c08:	d108      	bne.n	8010c1c <forward_cast+0x2820>
 8010c0a:	edd5 7a00 	vldr	s15, [r5]
 8010c0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010c12:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010c16:	ee17 0a90 	vmov	r0, s15
 8010c1a:	e7c9      	b.n	8010bb0 <forward_cast+0x27b4>
 8010c1c:	2000      	movs	r0, #0
 8010c1e:	e7c7      	b.n	8010bb0 <forward_cast+0x27b4>
 8010c20:	4555      	cmp	r5, sl
 8010c22:	f4bd ac53 	bcs.w	800e4cc <forward_cast+0xd0>
 8010c26:	2700      	movs	r7, #0
 8010c28:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 8010cf0 <forward_cast+0x28f4>
 8010c2c:	f8df b0b8 	ldr.w	fp, [pc, #184]	; 8010ce8 <forward_cast+0x28ec>
 8010c30:	4b2e      	ldr	r3, [pc, #184]	; (8010cec <forward_cast+0x28f0>)
 8010c32:	4a2c      	ldr	r2, [pc, #176]	; (8010ce4 <forward_cast+0x28e8>)
 8010c34:	e016      	b.n	8010c64 <forward_cast+0x2868>
 8010c36:	4294      	cmp	r4, r2
 8010c38:	f000 80d8 	beq.w	8010dec <forward_cast+0x29f0>
 8010c3c:	dd26      	ble.n	8010c8c <forward_cast+0x2890>
 8010c3e:	4928      	ldr	r1, [pc, #160]	; (8010ce0 <forward_cast+0x28e4>)
 8010c40:	428c      	cmp	r4, r1
 8010c42:	f000 81c4 	beq.w	8010fce <forward_cast+0x2bd2>
 8010c46:	f501 31f2 	add.w	r1, r1, #123904	; 0x1e400
 8010c4a:	428c      	cmp	r4, r1
 8010c4c:	d137      	bne.n	8010cbe <forward_cast+0x28c2>
 8010c4e:	7829      	ldrb	r1, [r5, #0]
 8010c50:	3900      	subs	r1, #0
 8010c52:	bf18      	it	ne
 8010c54:	2101      	movne	r1, #1
 8010c56:	444d      	add	r5, r9
 8010c58:	55f1      	strb	r1, [r6, r7]
 8010c5a:	9900      	ldr	r1, [sp, #0]
 8010c5c:	45aa      	cmp	sl, r5
 8010c5e:	440f      	add	r7, r1
 8010c60:	f67d ac34 	bls.w	800e4cc <forward_cast+0xd0>
 8010c64:	491c      	ldr	r1, [pc, #112]	; (8010cd8 <forward_cast+0x28dc>)
 8010c66:	428c      	cmp	r4, r1
 8010c68:	d018      	beq.n	8010c9c <forward_cast+0x28a0>
 8010c6a:	dde4      	ble.n	8010c36 <forward_cast+0x283a>
 8010c6c:	491b      	ldr	r1, [pc, #108]	; (8010cdc <forward_cast+0x28e0>)
 8010c6e:	428c      	cmp	r4, r1
 8010c70:	f000 80c7 	beq.w	8010e02 <forward_cast+0x2a06>
 8010c74:	dd14      	ble.n	8010ca0 <forward_cast+0x28a4>
 8010c76:	4544      	cmp	r4, r8
 8010c78:	d121      	bne.n	8010cbe <forward_cast+0x28c2>
 8010c7a:	edd5 7a00 	vldr	s15, [r5]
 8010c7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010c82:	edcd 7a01 	vstr	s15, [sp, #4]
 8010c86:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8010c8a:	e7e4      	b.n	8010c56 <forward_cast+0x285a>
 8010c8c:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8010c90:	428c      	cmp	r4, r1
 8010c92:	d003      	beq.n	8010c9c <forward_cast+0x28a0>
 8010c94:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8010c98:	428c      	cmp	r4, r1
 8010c9a:	d110      	bne.n	8010cbe <forward_cast+0x28c2>
 8010c9c:	7829      	ldrb	r1, [r5, #0]
 8010c9e:	e7da      	b.n	8010c56 <forward_cast+0x285a>
 8010ca0:	455c      	cmp	r4, fp
 8010ca2:	d0fb      	beq.n	8010c9c <forward_cast+0x28a0>
 8010ca4:	429c      	cmp	r4, r3
 8010ca6:	d10a      	bne.n	8010cbe <forward_cast+0x28c2>
 8010ca8:	edd5 7a00 	vldr	s15, [r5]
 8010cac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010cb0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010cb4:	edcd 7a01 	vstr	s15, [sp, #4]
 8010cb8:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8010cbc:	e7cb      	b.n	8010c56 <forward_cast+0x285a>
 8010cbe:	2100      	movs	r1, #0
 8010cc0:	e7c9      	b.n	8010c56 <forward_cast+0x285a>
 8010cc2:	4555      	cmp	r5, sl
 8010cc4:	f4bd ac02 	bcs.w	800e4cc <forward_cast+0xd0>
 8010cc8:	f04f 0800 	mov.w	r8, #0
 8010ccc:	4b05      	ldr	r3, [pc, #20]	; (8010ce4 <forward_cast+0x28e8>)
 8010cce:	4a04      	ldr	r2, [pc, #16]	; (8010ce0 <forward_cast+0x28e4>)
 8010cd0:	e024      	b.n	8010d1c <forward_cast+0x2920>
 8010cd2:	bf00      	nop
 8010cd4:	00060440 	.word	0x00060440
 8010cd8:	00840440 	.word	0x00840440
 8010cdc:	00842040 	.word	0x00842040
 8010ce0:	00042040 	.word	0x00042040
 8010ce4:	00041040 	.word	0x00041040
 8010ce8:	00840840 	.word	0x00840840
 8010cec:	00841040 	.word	0x00841040
 8010cf0:	01821040 	.word	0x01821040
 8010cf4:	429c      	cmp	r4, r3
 8010cf6:	d050      	beq.n	8010d9a <forward_cast+0x299e>
 8010cf8:	dd23      	ble.n	8010d42 <forward_cast+0x2946>
 8010cfa:	4294      	cmp	r4, r2
 8010cfc:	d03e      	beq.n	8010d7c <forward_cast+0x2980>
 8010cfe:	49c7      	ldr	r1, [pc, #796]	; (801101c <forward_cast+0x2c20>)
 8010d00:	428c      	cmp	r4, r1
 8010d02:	d139      	bne.n	8010d78 <forward_cast+0x297c>
 8010d04:	7829      	ldrb	r1, [r5, #0]
 8010d06:	3900      	subs	r1, #0
 8010d08:	bf18      	it	ne
 8010d0a:	2101      	movne	r1, #1
 8010d0c:	444d      	add	r5, r9
 8010d0e:	f806 1008 	strb.w	r1, [r6, r8]
 8010d12:	9900      	ldr	r1, [sp, #0]
 8010d14:	45aa      	cmp	sl, r5
 8010d16:	4488      	add	r8, r1
 8010d18:	f67d abd8 	bls.w	800e4cc <forward_cast+0xd0>
 8010d1c:	455c      	cmp	r4, fp
 8010d1e:	d017      	beq.n	8010d50 <forward_cast+0x2954>
 8010d20:	dde8      	ble.n	8010cf4 <forward_cast+0x28f8>
 8010d22:	49bf      	ldr	r1, [pc, #764]	; (8011020 <forward_cast+0x2c24>)
 8010d24:	428c      	cmp	r4, r1
 8010d26:	d043      	beq.n	8010db0 <forward_cast+0x29b4>
 8010d28:	dd15      	ble.n	8010d56 <forward_cast+0x295a>
 8010d2a:	49be      	ldr	r1, [pc, #760]	; (8011024 <forward_cast+0x2c28>)
 8010d2c:	428c      	cmp	r4, r1
 8010d2e:	d123      	bne.n	8010d78 <forward_cast+0x297c>
 8010d30:	edd5 7a00 	vldr	s15, [r5]
 8010d34:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010d38:	edcd 7a01 	vstr	s15, [sp, #4]
 8010d3c:	f99d 1004 	ldrsb.w	r1, [sp, #4]
 8010d40:	e7e4      	b.n	8010d0c <forward_cast+0x2910>
 8010d42:	49b9      	ldr	r1, [pc, #740]	; (8011028 <forward_cast+0x2c2c>)
 8010d44:	428c      	cmp	r4, r1
 8010d46:	d003      	beq.n	8010d50 <forward_cast+0x2954>
 8010d48:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8010d4c:	428c      	cmp	r4, r1
 8010d4e:	d113      	bne.n	8010d78 <forward_cast+0x297c>
 8010d50:	f995 1000 	ldrsb.w	r1, [r5]
 8010d54:	e7da      	b.n	8010d0c <forward_cast+0x2910>
 8010d56:	f5a1 51c0 	sub.w	r1, r1, #6144	; 0x1800
 8010d5a:	428c      	cmp	r4, r1
 8010d5c:	d0f8      	beq.n	8010d50 <forward_cast+0x2954>
 8010d5e:	42bc      	cmp	r4, r7
 8010d60:	d10a      	bne.n	8010d78 <forward_cast+0x297c>
 8010d62:	edd5 7a00 	vldr	s15, [r5]
 8010d66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010d6a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010d6e:	edcd 7a01 	vstr	s15, [sp, #4]
 8010d72:	f99d 1004 	ldrsb.w	r1, [sp, #4]
 8010d76:	e7c9      	b.n	8010d0c <forward_cast+0x2910>
 8010d78:	2100      	movs	r1, #0
 8010d7a:	e7c7      	b.n	8010d0c <forward_cast+0x2910>
 8010d7c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8010d80:	f7ef fbce 	bl	8000520 <__aeabi_ul2f>
 8010d84:	ee07 0a90 	vmov	s15, r0
 8010d88:	4aa8      	ldr	r2, [pc, #672]	; (801102c <forward_cast+0x2c30>)
 8010d8a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010d8e:	4ba8      	ldr	r3, [pc, #672]	; (8011030 <forward_cast+0x2c34>)
 8010d90:	edcd 7a01 	vstr	s15, [sp, #4]
 8010d94:	f99d 1004 	ldrsb.w	r1, [sp, #4]
 8010d98:	e7b8      	b.n	8010d0c <forward_cast+0x2910>
 8010d9a:	edd5 7a00 	vldr	s15, [r5]
 8010d9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010da2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010da6:	edcd 7a01 	vstr	s15, [sp, #4]
 8010daa:	f99d 1004 	ldrsb.w	r1, [sp, #4]
 8010dae:	e7ad      	b.n	8010d0c <forward_cast+0x2910>
 8010db0:	e9d5 0100 	ldrd	r0, r1, [r5]
 8010db4:	f7ef fbbc 	bl	8000530 <__aeabi_l2f>
 8010db8:	ee07 0a90 	vmov	s15, r0
 8010dbc:	4b9c      	ldr	r3, [pc, #624]	; (8011030 <forward_cast+0x2c34>)
 8010dbe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010dc2:	4a9a      	ldr	r2, [pc, #616]	; (801102c <forward_cast+0x2c30>)
 8010dc4:	edcd 7a01 	vstr	s15, [sp, #4]
 8010dc8:	f99d 1004 	ldrsb.w	r1, [sp, #4]
 8010dcc:	e79e      	b.n	8010d0c <forward_cast+0x2910>
 8010dce:	f995 0000 	ldrsb.w	r0, [r5]
 8010dd2:	e6ed      	b.n	8010bb0 <forward_cast+0x27b4>
 8010dd4:	edd5 7a00 	vldr	s15, [r5]
 8010dd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010ddc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010de0:	edcd 7a01 	vstr	s15, [sp, #4]
 8010de4:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8010de8:	f7fd bf3a 	b.w	800ec60 <forward_cast+0x864>
 8010dec:	edd5 7a00 	vldr	s15, [r5]
 8010df0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010df4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010df8:	edcd 7a01 	vstr	s15, [sp, #4]
 8010dfc:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8010e00:	e729      	b.n	8010c56 <forward_cast+0x285a>
 8010e02:	e9d5 0100 	ldrd	r0, r1, [r5]
 8010e06:	f7ef fb93 	bl	8000530 <__aeabi_l2f>
 8010e0a:	ee07 0a90 	vmov	s15, r0
 8010e0e:	4b89      	ldr	r3, [pc, #548]	; (8011034 <forward_cast+0x2c38>)
 8010e10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010e14:	4a86      	ldr	r2, [pc, #536]	; (8011030 <forward_cast+0x2c34>)
 8010e16:	edcd 7a01 	vstr	s15, [sp, #4]
 8010e1a:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8010e1e:	e71a      	b.n	8010c56 <forward_cast+0x285a>
 8010e20:	e9d5 0100 	ldrd	r0, r1, [r5]
 8010e24:	f7ef fb84 	bl	8000530 <__aeabi_l2f>
 8010e28:	ee07 0a90 	vmov	s15, r0
 8010e2c:	4b7f      	ldr	r3, [pc, #508]	; (801102c <forward_cast+0x2c30>)
 8010e2e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010e32:	4a7a      	ldr	r2, [pc, #488]	; (801101c <forward_cast+0x2c20>)
 8010e34:	ee17 0a90 	vmov	r0, s15
 8010e38:	e66b      	b.n	8010b12 <forward_cast+0x2716>
 8010e3a:	7828      	ldrb	r0, [r5, #0]
 8010e3c:	e669      	b.n	8010b12 <forward_cast+0x2716>
 8010e3e:	e9d5 0100 	ldrd	r0, r1, [r5]
 8010e42:	f7ef fb6d 	bl	8000520 <__aeabi_ul2f>
 8010e46:	ee07 0a90 	vmov	s15, r0
 8010e4a:	4a74      	ldr	r2, [pc, #464]	; (801101c <forward_cast+0x2c20>)
 8010e4c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010e50:	4b76      	ldr	r3, [pc, #472]	; (801102c <forward_cast+0x2c30>)
 8010e52:	ee17 0a90 	vmov	r0, s15
 8010e56:	e65c      	b.n	8010b12 <forward_cast+0x2716>
 8010e58:	f9b5 0000 	ldrsh.w	r0, [r5]
 8010e5c:	e659      	b.n	8010b12 <forward_cast+0x2716>
 8010e5e:	e9d5 0100 	ldrd	r0, r1, [r5]
 8010e62:	f7ef fb65 	bl	8000530 <__aeabi_l2f>
 8010e66:	ee07 0a90 	vmov	s15, r0
 8010e6a:	4b71      	ldr	r3, [pc, #452]	; (8011030 <forward_cast+0x2c34>)
 8010e6c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010e70:	4a6e      	ldr	r2, [pc, #440]	; (801102c <forward_cast+0x2c30>)
 8010e72:	ee17 0a90 	vmov	r0, s15
 8010e76:	e69b      	b.n	8010bb0 <forward_cast+0x27b4>
 8010e78:	7828      	ldrb	r0, [r5, #0]
 8010e7a:	e699      	b.n	8010bb0 <forward_cast+0x27b4>
 8010e7c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8010e80:	f7ef fb4e 	bl	8000520 <__aeabi_ul2f>
 8010e84:	ee07 0a90 	vmov	s15, r0
 8010e88:	4a68      	ldr	r2, [pc, #416]	; (801102c <forward_cast+0x2c30>)
 8010e8a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010e8e:	4b68      	ldr	r3, [pc, #416]	; (8011030 <forward_cast+0x2c34>)
 8010e90:	ee17 0a90 	vmov	r0, s15
 8010e94:	e68c      	b.n	8010bb0 <forward_cast+0x27b4>
 8010e96:	f9b5 0000 	ldrsh.w	r0, [r5]
 8010e9a:	e689      	b.n	8010bb0 <forward_cast+0x27b4>
 8010e9c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8010ea0:	f7ef fb46 	bl	8000530 <__aeabi_l2f>
 8010ea4:	ee07 0a90 	vmov	s15, r0
 8010ea8:	4b61      	ldr	r3, [pc, #388]	; (8011030 <forward_cast+0x2c34>)
 8010eaa:	eef5 7a40 	vcmp.f32	s15, #0.0
 8010eae:	4a5f      	ldr	r2, [pc, #380]	; (801102c <forward_cast+0x2c30>)
 8010eb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010eb4:	bf14      	ite	ne
 8010eb6:	2101      	movne	r1, #1
 8010eb8:	2100      	moveq	r1, #0
 8010eba:	e5d9      	b.n	8010a70 <forward_cast+0x2674>
 8010ebc:	f995 1000 	ldrsb.w	r1, [r5]
 8010ec0:	ee07 1a90 	vmov	s15, r1
 8010ec4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010ec8:	f7fd be53 	b.w	800eb72 <forward_cast+0x776>
 8010ecc:	edd5 7a00 	vldr	s15, [r5]
 8010ed0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010ed4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010ed8:	ee17 0a90 	vmov	r0, s15
 8010edc:	e564      	b.n	80109a8 <forward_cast+0x25ac>
 8010ede:	f995 1000 	ldrsb.w	r1, [r5]
 8010ee2:	ee07 1a90 	vmov	s15, r1
 8010ee6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010eea:	f7fd bf0d 	b.w	800ed08 <forward_cast+0x90c>
 8010eee:	e9d5 0100 	ldrd	r0, r1, [r5]
 8010ef2:	f7ef fb1d 	bl	8000530 <__aeabi_l2f>
 8010ef6:	ee07 0a90 	vmov	s15, r0
 8010efa:	4b4d      	ldr	r3, [pc, #308]	; (8011030 <forward_cast+0x2c34>)
 8010efc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010f00:	4a4a      	ldr	r2, [pc, #296]	; (801102c <forward_cast+0x2c30>)
 8010f02:	ee17 0a90 	vmov	r0, s15
 8010f06:	e54f      	b.n	80109a8 <forward_cast+0x25ac>
 8010f08:	7828      	ldrb	r0, [r5, #0]
 8010f0a:	e54d      	b.n	80109a8 <forward_cast+0x25ac>
 8010f0c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8010f10:	f7ef fb06 	bl	8000520 <__aeabi_ul2f>
 8010f14:	ee07 0a90 	vmov	s15, r0
 8010f18:	4a44      	ldr	r2, [pc, #272]	; (801102c <forward_cast+0x2c30>)
 8010f1a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010f1e:	4b44      	ldr	r3, [pc, #272]	; (8011030 <forward_cast+0x2c34>)
 8010f20:	ee17 0a90 	vmov	r0, s15
 8010f24:	e540      	b.n	80109a8 <forward_cast+0x25ac>
 8010f26:	f9b5 0000 	ldrsh.w	r0, [r5]
 8010f2a:	e53d      	b.n	80109a8 <forward_cast+0x25ac>
 8010f2c:	f995 0000 	ldrsb.w	r0, [r5]
 8010f30:	e53a      	b.n	80109a8 <forward_cast+0x25ac>
 8010f32:	edd5 7a00 	vldr	s15, [r5]
 8010f36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010f3a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010f3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010f42:	f7fd bee1 	b.w	800ed08 <forward_cast+0x90c>
 8010f46:	e9d5 0100 	ldrd	r0, r1, [r5]
 8010f4a:	f7ef fae9 	bl	8000520 <__aeabi_ul2f>
 8010f4e:	ee07 0a90 	vmov	s15, r0
 8010f52:	4a35      	ldr	r2, [pc, #212]	; (8011028 <forward_cast+0x2c2c>)
 8010f54:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010f58:	4b35      	ldr	r3, [pc, #212]	; (8011030 <forward_cast+0x2c34>)
 8010f5a:	ee17 0a90 	vmov	r0, s15
 8010f5e:	f7fe ba5b 	b.w	800f418 <forward_cast+0x101c>
 8010f62:	e9d5 0100 	ldrd	r0, r1, [r5]
 8010f66:	f7ef fadb 	bl	8000520 <__aeabi_ul2f>
 8010f6a:	ee07 0a90 	vmov	s15, r0
 8010f6e:	4b32      	ldr	r3, [pc, #200]	; (8011038 <forward_cast+0x2c3c>)
 8010f70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010f74:	4a2f      	ldr	r2, [pc, #188]	; (8011034 <forward_cast+0x2c38>)
 8010f76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010f7a:	f7fd bec5 	b.w	800ed08 <forward_cast+0x90c>
 8010f7e:	f995 1000 	ldrsb.w	r1, [r5]
 8010f82:	3900      	subs	r1, #0
 8010f84:	bf18      	it	ne
 8010f86:	2101      	movne	r1, #1
 8010f88:	e572      	b.n	8010a70 <forward_cast+0x2674>
 8010f8a:	edd5 7a00 	vldr	s15, [r5]
 8010f8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010f92:	eef5 7a40 	vcmp.f32	s15, #0.0
 8010f96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f9a:	bf14      	ite	ne
 8010f9c:	2101      	movne	r1, #1
 8010f9e:	2100      	moveq	r1, #0
 8010fa0:	e566      	b.n	8010a70 <forward_cast+0x2674>
 8010fa2:	e9d5 0100 	ldrd	r0, r1, [r5]
 8010fa6:	f7ef fabb 	bl	8000520 <__aeabi_ul2f>
 8010faa:	ee07 0a90 	vmov	s15, r0
 8010fae:	4a1f      	ldr	r2, [pc, #124]	; (801102c <forward_cast+0x2c30>)
 8010fb0:	eef5 7a40 	vcmp.f32	s15, #0.0
 8010fb4:	4b1e      	ldr	r3, [pc, #120]	; (8011030 <forward_cast+0x2c34>)
 8010fb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010fba:	bf14      	ite	ne
 8010fbc:	2101      	movne	r1, #1
 8010fbe:	2100      	moveq	r1, #0
 8010fc0:	e556      	b.n	8010a70 <forward_cast+0x2674>
 8010fc2:	f9b5 1000 	ldrsh.w	r1, [r5]
 8010fc6:	3900      	subs	r1, #0
 8010fc8:	bf18      	it	ne
 8010fca:	2101      	movne	r1, #1
 8010fcc:	e550      	b.n	8010a70 <forward_cast+0x2674>
 8010fce:	e9d5 0100 	ldrd	r0, r1, [r5]
 8010fd2:	f7ef faa5 	bl	8000520 <__aeabi_ul2f>
 8010fd6:	ee07 0a90 	vmov	s15, r0
 8010fda:	4a15      	ldr	r2, [pc, #84]	; (8011030 <forward_cast+0x2c34>)
 8010fdc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010fe0:	4b14      	ldr	r3, [pc, #80]	; (8011034 <forward_cast+0x2c38>)
 8010fe2:	edcd 7a01 	vstr	s15, [sp, #4]
 8010fe6:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8010fea:	e634      	b.n	8010c56 <forward_cast+0x285a>
 8010fec:	edd5 7a00 	vldr	s15, [r5]
 8010ff0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010ff4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010ff8:	edcd 7a01 	vstr	s15, [sp, #4]
 8010ffc:	f99d 1004 	ldrsb.w	r1, [sp, #4]
 8011000:	f7fe ba3f 	b.w	800f482 <forward_cast+0x1086>
 8011004:	f995 0000 	ldrsb.w	r0, [r5]
 8011008:	f7fe ba72 	b.w	800f4f0 <forward_cast+0x10f4>
 801100c:	f995 0000 	ldrsb.w	r0, [r5]
 8011010:	f7fe ba02 	b.w	800f418 <forward_cast+0x101c>
 8011014:	7829      	ldrb	r1, [r5, #0]
 8011016:	f7fd bc85 	b.w	800e924 <forward_cast+0x528>
 801101a:	bf00      	nop
 801101c:	00060440 	.word	0x00060440
 8011020:	00842040 	.word	0x00842040
 8011024:	01821040 	.word	0x01821040
 8011028:	00040440 	.word	0x00040440
 801102c:	00042040 	.word	0x00042040
 8011030:	00041040 	.word	0x00041040
 8011034:	00841040 	.word	0x00841040
 8011038:	00840840 	.word	0x00840840
 801103c:	edd5 7a00 	vldr	s15, [r5]
 8011040:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011044:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011048:	ee17 1a90 	vmov	r1, s15
 801104c:	b289      	uxth	r1, r1
 801104e:	f7fd bac7 	b.w	800e5e0 <forward_cast+0x1e4>
 8011052:	e9d5 0100 	ldrd	r0, r1, [r5]
 8011056:	f7ef fa6b 	bl	8000530 <__aeabi_l2f>
 801105a:	ee07 0a90 	vmov	s15, r0
 801105e:	4be4      	ldr	r3, [pc, #912]	; (80113f0 <forward_cast+0x2ff4>)
 8011060:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011064:	4ae3      	ldr	r2, [pc, #908]	; (80113f4 <forward_cast+0x2ff8>)
 8011066:	edcd 7a01 	vstr	s15, [sp, #4]
 801106a:	f89d 1004 	ldrb.w	r1, [sp, #4]
 801106e:	f7fd bdf7 	b.w	800ec60 <forward_cast+0x864>
 8011072:	e9d5 0100 	ldrd	r0, r1, [r5]
 8011076:	f7ef fa5b 	bl	8000530 <__aeabi_l2f>
 801107a:	ee07 0a90 	vmov	s15, r0
 801107e:	4bde      	ldr	r3, [pc, #888]	; (80113f8 <forward_cast+0x2ffc>)
 8011080:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011084:	4add      	ldr	r2, [pc, #884]	; (80113fc <forward_cast+0x3000>)
 8011086:	ee17 0a90 	vmov	r0, s15
 801108a:	f7fe b935 	b.w	800f2f8 <forward_cast+0xefc>
 801108e:	e9d5 0100 	ldrd	r0, r1, [r5]
 8011092:	f7ef fa45 	bl	8000520 <__aeabi_ul2f>
 8011096:	ee07 0a90 	vmov	s15, r0
 801109a:	4ad7      	ldr	r2, [pc, #860]	; (80113f8 <forward_cast+0x2ffc>)
 801109c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80110a0:	ee17 3a90 	vmov	r3, s15
 80110a4:	b299      	uxth	r1, r3
 80110a6:	4bd3      	ldr	r3, [pc, #844]	; (80113f4 <forward_cast+0x2ff8>)
 80110a8:	f7fd bc3c 	b.w	800e924 <forward_cast+0x528>
 80110ac:	e9d5 0100 	ldrd	r0, r1, [r5]
 80110b0:	9301      	str	r3, [sp, #4]
 80110b2:	f7ef fa35 	bl	8000520 <__aeabi_ul2f>
 80110b6:	ee07 0a90 	vmov	s15, r0
 80110ba:	9b01      	ldr	r3, [sp, #4]
 80110bc:	4acc      	ldr	r2, [pc, #816]	; (80113f0 <forward_cast+0x2ff4>)
 80110be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80110c2:	ee17 0a90 	vmov	r0, s15
 80110c6:	f7fd bc69 	b.w	800e99c <forward_cast+0x5a0>
 80110ca:	edd5 7a00 	vldr	s15, [r5]
 80110ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80110d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80110d6:	ee17 0a90 	vmov	r0, s15
 80110da:	f7fd bc5f 	b.w	800e99c <forward_cast+0x5a0>
 80110de:	f9b5 0000 	ldrsh.w	r0, [r5]
 80110e2:	f7fe b963 	b.w	800f3ac <forward_cast+0xfb0>
 80110e6:	e9d5 0100 	ldrd	r0, r1, [r5]
 80110ea:	f7ef fa19 	bl	8000520 <__aeabi_ul2f>
 80110ee:	ee07 0a90 	vmov	s15, r0
 80110f2:	4ac2      	ldr	r2, [pc, #776]	; (80113fc <forward_cast+0x3000>)
 80110f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80110f8:	4bbf      	ldr	r3, [pc, #764]	; (80113f8 <forward_cast+0x2ffc>)
 80110fa:	ee17 0a90 	vmov	r0, s15
 80110fe:	f7fe b955 	b.w	800f3ac <forward_cast+0xfb0>
 8011102:	e9d5 0100 	ldrd	r0, r1, [r5]
 8011106:	f7ef fa0b 	bl	8000520 <__aeabi_ul2f>
 801110a:	ee07 0a90 	vmov	s15, r0
 801110e:	4abc      	ldr	r2, [pc, #752]	; (8011400 <forward_cast+0x3004>)
 8011110:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011114:	4bb6      	ldr	r3, [pc, #728]	; (80113f0 <forward_cast+0x2ff4>)
 8011116:	ee17 0a90 	vmov	r0, s15
 801111a:	f7fe b9e9 	b.w	800f4f0 <forward_cast+0x10f4>
 801111e:	edd5 7a00 	vldr	s15, [r5]
 8011122:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011126:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801112a:	ee17 0a90 	vmov	r0, s15
 801112e:	f7fe b9df 	b.w	800f4f0 <forward_cast+0x10f4>
 8011132:	7828      	ldrb	r0, [r5, #0]
 8011134:	f7fe b8e0 	b.w	800f2f8 <forward_cast+0xefc>
 8011138:	edd5 7a00 	vldr	s15, [r5]
 801113c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011140:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011144:	ee17 0a90 	vmov	r0, s15
 8011148:	e532      	b.n	8010bb0 <forward_cast+0x27b4>
 801114a:	f995 0000 	ldrsb.w	r0, [r5]
 801114e:	f7fd ba98 	b.w	800e682 <forward_cast+0x286>
 8011152:	f995 0000 	ldrsb.w	r0, [r5]
 8011156:	e4dc      	b.n	8010b12 <forward_cast+0x2716>
 8011158:	edd5 7a00 	vldr	s15, [r5]
 801115c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011160:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011164:	ee17 0a90 	vmov	r0, s15
 8011168:	e4d3      	b.n	8010b12 <forward_cast+0x2716>
 801116a:	e9d5 0100 	ldrd	r0, r1, [r5]
 801116e:	f7ef f9d7 	bl	8000520 <__aeabi_ul2f>
 8011172:	ee07 0a90 	vmov	s15, r0
 8011176:	4aa0      	ldr	r2, [pc, #640]	; (80113f8 <forward_cast+0x2ffc>)
 8011178:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801117c:	4b9c      	ldr	r3, [pc, #624]	; (80113f0 <forward_cast+0x2ff4>)
 801117e:	edcd 7a01 	vstr	s15, [sp, #4]
 8011182:	f99d 1004 	ldrsb.w	r1, [sp, #4]
 8011186:	f7fe b97c 	b.w	800f482 <forward_cast+0x1086>
 801118a:	e9d5 0100 	ldrd	r0, r1, [r5]
 801118e:	f7ef f9c7 	bl	8000520 <__aeabi_ul2f>
 8011192:	ee07 0a90 	vmov	s15, r0
 8011196:	4a97      	ldr	r2, [pc, #604]	; (80113f4 <forward_cast+0x2ff8>)
 8011198:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801119c:	4b94      	ldr	r3, [pc, #592]	; (80113f0 <forward_cast+0x2ff4>)
 801119e:	ee17 0a90 	vmov	r0, s15
 80111a2:	f7fd ba6e 	b.w	800e682 <forward_cast+0x286>
 80111a6:	edd5 7a00 	vldr	s15, [r5]
 80111aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80111ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80111b2:	ee17 0a90 	vmov	r0, s15
 80111b6:	f7fd ba64 	b.w	800e682 <forward_cast+0x286>
 80111ba:	f9b5 0000 	ldrsh.w	r0, [r5]
 80111be:	f7fd ba60 	b.w	800e682 <forward_cast+0x286>
 80111c2:	e9d5 0100 	ldrd	r0, r1, [r5]
 80111c6:	f7ef f9ab 	bl	8000520 <__aeabi_ul2f>
 80111ca:	ee07 0a90 	vmov	s15, r0
 80111ce:	4a89      	ldr	r2, [pc, #548]	; (80113f4 <forward_cast+0x2ff8>)
 80111d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80111d4:	4b86      	ldr	r3, [pc, #536]	; (80113f0 <forward_cast+0x2ff4>)
 80111d6:	edcd 7a01 	vstr	s15, [sp, #4]
 80111da:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80111de:	f7fd bd3f 	b.w	800ec60 <forward_cast+0x864>
 80111e2:	e9d5 0100 	ldrd	r0, r1, [r5]
 80111e6:	f7ef f99b 	bl	8000520 <__aeabi_ul2f>
 80111ea:	ee07 0a90 	vmov	s15, r0
 80111ee:	4a81      	ldr	r2, [pc, #516]	; (80113f4 <forward_cast+0x2ff8>)
 80111f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80111f4:	4b7e      	ldr	r3, [pc, #504]	; (80113f0 <forward_cast+0x2ff4>)
 80111f6:	edcd 7a01 	vstr	s15, [sp, #4]
 80111fa:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80111fe:	f7fd bcf0 	b.w	800ebe2 <forward_cast+0x7e6>
 8011202:	edd5 7a00 	vldr	s15, [r5]
 8011206:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801120a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801120e:	edcd 7a01 	vstr	s15, [sp, #4]
 8011212:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8011216:	f7fd bce4 	b.w	800ebe2 <forward_cast+0x7e6>
 801121a:	f9b5 0000 	ldrsh.w	r0, [r5]
 801121e:	f7fd ba93 	b.w	800e748 <forward_cast+0x34c>
 8011222:	e9d5 0100 	ldrd	r0, r1, [r5]
 8011226:	f7ef f983 	bl	8000530 <__aeabi_l2f>
 801122a:	ee07 0a90 	vmov	s15, r0
 801122e:	4b70      	ldr	r3, [pc, #448]	; (80113f0 <forward_cast+0x2ff4>)
 8011230:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011234:	4a6f      	ldr	r2, [pc, #444]	; (80113f4 <forward_cast+0x2ff8>)
 8011236:	ee17 0a90 	vmov	r0, s15
 801123a:	f7fd bc41 	b.w	800eac0 <forward_cast+0x6c4>
 801123e:	f9b5 1000 	ldrsh.w	r1, [r5]
 8011242:	ee07 1a90 	vmov	s15, r1
 8011246:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801124a:	f7fd bc92 	b.w	800eb72 <forward_cast+0x776>
 801124e:	e9d5 0100 	ldrd	r0, r1, [r5]
 8011252:	f7ef f96d 	bl	8000530 <__aeabi_l2f>
 8011256:	ee07 0a90 	vmov	s15, r0
 801125a:	4b67      	ldr	r3, [pc, #412]	; (80113f8 <forward_cast+0x2ffc>)
 801125c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011260:	4a66      	ldr	r2, [pc, #408]	; (80113fc <forward_cast+0x3000>)
 8011262:	ee17 0a90 	vmov	r0, s15
 8011266:	f7fd bbeb 	b.w	800ea40 <forward_cast+0x644>
 801126a:	f9b5 0000 	ldrsh.w	r0, [r5]
 801126e:	f7fd bc27 	b.w	800eac0 <forward_cast+0x6c4>
 8011272:	f995 0000 	ldrsb.w	r0, [r5]
 8011276:	f7ff bb2f 	b.w	80108d8 <forward_cast+0x24dc>
 801127a:	f995 0000 	ldrsb.w	r0, [r5]
 801127e:	f7fd bbdf 	b.w	800ea40 <forward_cast+0x644>
 8011282:	f995 0000 	ldrsb.w	r0, [r5]
 8011286:	f7fd bf74 	b.w	800f172 <forward_cast+0xd76>
 801128a:	f995 1000 	ldrsb.w	r1, [r5]
 801128e:	3900      	subs	r1, #0
 8011290:	bf18      	it	ne
 8011292:	2101      	movne	r1, #1
 8011294:	f7fd bfa8 	b.w	800f1e8 <forward_cast+0xdec>
 8011298:	e9d5 0100 	ldrd	r0, r1, [r5]
 801129c:	f7ef f948 	bl	8000530 <__aeabi_l2f>
 80112a0:	ee07 0a90 	vmov	s15, r0
 80112a4:	4b54      	ldr	r3, [pc, #336]	; (80113f8 <forward_cast+0x2ffc>)
 80112a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80112aa:	4a54      	ldr	r2, [pc, #336]	; (80113fc <forward_cast+0x3000>)
 80112ac:	ee17 0a90 	vmov	r0, s15
 80112b0:	f7ff bb12 	b.w	80108d8 <forward_cast+0x24dc>
 80112b4:	7828      	ldrb	r0, [r5, #0]
 80112b6:	f7ff bb0f 	b.w	80108d8 <forward_cast+0x24dc>
 80112ba:	e9d5 0100 	ldrd	r0, r1, [r5]
 80112be:	f7ef f92f 	bl	8000520 <__aeabi_ul2f>
 80112c2:	ee07 0a90 	vmov	s15, r0
 80112c6:	4a4d      	ldr	r2, [pc, #308]	; (80113fc <forward_cast+0x3000>)
 80112c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80112cc:	4b4a      	ldr	r3, [pc, #296]	; (80113f8 <forward_cast+0x2ffc>)
 80112ce:	ee17 0a90 	vmov	r0, s15
 80112d2:	f7ff bb01 	b.w	80108d8 <forward_cast+0x24dc>
 80112d6:	f9b5 0000 	ldrsh.w	r0, [r5]
 80112da:	f7ff bafd 	b.w	80108d8 <forward_cast+0x24dc>
 80112de:	edd5 7a00 	vldr	s15, [r5]
 80112e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80112e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80112ea:	ee17 0a90 	vmov	r0, s15
 80112ee:	f7ff baf3 	b.w	80108d8 <forward_cast+0x24dc>
 80112f2:	edd5 7a00 	vldr	s15, [r5]
 80112f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80112fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80112fe:	ee17 1a90 	vmov	r1, s15
 8011302:	b289      	uxth	r1, r1
 8011304:	f7fd bb0e 	b.w	800e924 <forward_cast+0x528>
 8011308:	edd5 7a00 	vldr	s15, [r5]
 801130c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011310:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011314:	ee17 0a90 	vmov	r0, s15
 8011318:	f7fe b848 	b.w	800f3ac <forward_cast+0xfb0>
 801131c:	f9b5 0000 	ldrsh.w	r0, [r5]
 8011320:	f7fe b87a 	b.w	800f418 <forward_cast+0x101c>
 8011324:	f995 0000 	ldrsb.w	r0, [r5]
 8011328:	f7fe b840 	b.w	800f3ac <forward_cast+0xfb0>
 801132c:	f995 1000 	ldrsb.w	r1, [r5]
 8011330:	f7fd bddc 	b.w	800eeec <forward_cast+0xaf0>
 8011334:	f995 1000 	ldrsb.w	r1, [r5]
 8011338:	b289      	uxth	r1, r1
 801133a:	f7fd b951 	b.w	800e5e0 <forward_cast+0x1e4>
 801133e:	f995 0000 	ldrsb.w	r0, [r5]
 8011342:	f7ff ba34 	b.w	80107ae <forward_cast+0x23b2>
 8011346:	edd5 7a00 	vldr	s15, [r5]
 801134a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801134e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011352:	edcd 7a01 	vstr	s15, [sp, #4]
 8011356:	f89d 1004 	ldrb.w	r1, [sp, #4]
 801135a:	f7ff b9ca 	b.w	80106f2 <forward_cast+0x22f6>
 801135e:	f995 0000 	ldrsb.w	r0, [r5]
 8011362:	f7ff ba6d 	b.w	8010840 <forward_cast+0x2444>
 8011366:	edd5 7a00 	vldr	s15, [r5]
 801136a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801136e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011372:	ee17 0a90 	vmov	r0, s15
 8011376:	f7ff ba63 	b.w	8010840 <forward_cast+0x2444>
 801137a:	e9d5 0100 	ldrd	r0, r1, [r5]
 801137e:	f7ef f8cf 	bl	8000520 <__aeabi_ul2f>
 8011382:	4b20      	ldr	r3, [pc, #128]	; (8011404 <forward_cast+0x3008>)
 8011384:	ee07 0a90 	vmov	s15, r0
 8011388:	4a1f      	ldr	r2, [pc, #124]	; (8011408 <forward_cast+0x300c>)
 801138a:	f7fd bbf2 	b.w	800eb72 <forward_cast+0x776>
 801138e:	e9d5 0100 	ldrd	r0, r1, [r5]
 8011392:	f7ef f8c5 	bl	8000520 <__aeabi_ul2f>
 8011396:	ee07 0a90 	vmov	s15, r0
 801139a:	4a18      	ldr	r2, [pc, #96]	; (80113fc <forward_cast+0x3000>)
 801139c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80113a0:	4b15      	ldr	r3, [pc, #84]	; (80113f8 <forward_cast+0x2ffc>)
 80113a2:	ee17 0a90 	vmov	r0, s15
 80113a6:	f7fd bb4b 	b.w	800ea40 <forward_cast+0x644>
 80113aa:	edd5 7a00 	vldr	s15, [r5]
 80113ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80113b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80113b6:	ee17 0a90 	vmov	r0, s15
 80113ba:	f7fd bb41 	b.w	800ea40 <forward_cast+0x644>
 80113be:	f9b5 1000 	ldrsh.w	r1, [r5]
 80113c2:	3900      	subs	r1, #0
 80113c4:	bf18      	it	ne
 80113c6:	2101      	movne	r1, #1
 80113c8:	f7fd bf0e 	b.w	800f1e8 <forward_cast+0xdec>
 80113cc:	e9d5 0100 	ldrd	r0, r1, [r5]
 80113d0:	f7ef f8a6 	bl	8000520 <__aeabi_ul2f>
 80113d4:	ee07 0a90 	vmov	s15, r0
 80113d8:	4a08      	ldr	r2, [pc, #32]	; (80113fc <forward_cast+0x3000>)
 80113da:	eef5 7a40 	vcmp.f32	s15, #0.0
 80113de:	4b06      	ldr	r3, [pc, #24]	; (80113f8 <forward_cast+0x2ffc>)
 80113e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113e4:	bf14      	ite	ne
 80113e6:	2101      	movne	r1, #1
 80113e8:	2100      	moveq	r1, #0
 80113ea:	f7fd befd 	b.w	800f1e8 <forward_cast+0xdec>
 80113ee:	bf00      	nop
 80113f0:	00841040 	.word	0x00841040
 80113f4:	00041040 	.word	0x00041040
 80113f8:	00042040 	.word	0x00042040
 80113fc:	00060440 	.word	0x00060440
 8011400:	01821040 	.word	0x01821040
 8011404:	00842040 	.word	0x00842040
 8011408:	00840440 	.word	0x00840440
 801140c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8011410:	f7ef f886 	bl	8000520 <__aeabi_ul2f>
 8011414:	ee07 0a90 	vmov	s15, r0
 8011418:	4bdd      	ldr	r3, [pc, #884]	; (8011790 <forward_cast+0x3394>)
 801141a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801141e:	4add      	ldr	r2, [pc, #884]	; (8011794 <forward_cast+0x3398>)
 8011420:	ee17 0a90 	vmov	r0, s15
 8011424:	f7fd bea5 	b.w	800f172 <forward_cast+0xd76>
 8011428:	edd5 7a00 	vldr	s15, [r5]
 801142c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011430:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011434:	ee17 0a90 	vmov	r0, s15
 8011438:	f7fd be9b 	b.w	800f172 <forward_cast+0xd76>
 801143c:	7828      	ldrb	r0, [r5, #0]
 801143e:	f7fd baff 	b.w	800ea40 <forward_cast+0x644>
 8011442:	edd5 7a00 	vldr	s15, [r5]
 8011446:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801144a:	f7fd bb92 	b.w	800eb72 <forward_cast+0x776>
 801144e:	7829      	ldrb	r1, [r5, #0]
 8011450:	ee07 1a90 	vmov	s15, r1
 8011454:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011458:	f7fd bc56 	b.w	800ed08 <forward_cast+0x90c>
 801145c:	edd5 7a00 	vldr	s15, [r5]
 8011460:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011464:	eef5 7a40 	vcmp.f32	s15, #0.0
 8011468:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801146c:	bf14      	ite	ne
 801146e:	2101      	movne	r1, #1
 8011470:	2100      	moveq	r1, #0
 8011472:	f7fd beb9 	b.w	800f1e8 <forward_cast+0xdec>
 8011476:	7829      	ldrb	r1, [r5, #0]
 8011478:	ee07 1a90 	vmov	s15, r1
 801147c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011480:	f7fd bb77 	b.w	800eb72 <forward_cast+0x776>
 8011484:	edd5 7a00 	vldr	s15, [r5]
 8011488:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801148c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011490:	ee17 0a90 	vmov	r0, s15
 8011494:	f7ff b98b 	b.w	80107ae <forward_cast+0x23b2>
 8011498:	f9b5 0000 	ldrsh.w	r0, [r5]
 801149c:	f7fd be69 	b.w	800f172 <forward_cast+0xd76>
 80114a0:	e9d5 0100 	ldrd	r0, r1, [r5]
 80114a4:	f7ef f844 	bl	8000530 <__aeabi_l2f>
 80114a8:	4abb      	ldr	r2, [pc, #748]	; (8011798 <forward_cast+0x339c>)
 80114aa:	ee07 0a90 	vmov	s15, r0
 80114ae:	4bbb      	ldr	r3, [pc, #748]	; (801179c <forward_cast+0x33a0>)
 80114b0:	f7fd bb5f 	b.w	800eb72 <forward_cast+0x776>
 80114b4:	e9d5 0100 	ldrd	r0, r1, [r5]
 80114b8:	f7ef f83a 	bl	8000530 <__aeabi_l2f>
 80114bc:	ee07 0a90 	vmov	s15, r0
 80114c0:	4bb7      	ldr	r3, [pc, #732]	; (80117a0 <forward_cast+0x33a4>)
 80114c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80114c6:	4ab7      	ldr	r2, [pc, #732]	; (80117a4 <forward_cast+0x33a8>)
 80114c8:	ee17 0a90 	vmov	r0, s15
 80114cc:	f7fd b837 	b.w	800e53e <forward_cast+0x142>
 80114d0:	e9d5 0100 	ldrd	r0, r1, [r5]
 80114d4:	f7ef f82c 	bl	8000530 <__aeabi_l2f>
 80114d8:	ee07 0a90 	vmov	s15, r0
 80114dc:	4aac      	ldr	r2, [pc, #688]	; (8011790 <forward_cast+0x3394>)
 80114de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80114e2:	ee17 3a90 	vmov	r3, s15
 80114e6:	b299      	uxth	r1, r3
 80114e8:	4baf      	ldr	r3, [pc, #700]	; (80117a8 <forward_cast+0x33ac>)
 80114ea:	f7fd b879 	b.w	800e5e0 <forward_cast+0x1e4>
 80114ee:	7828      	ldrb	r0, [r5, #0]
 80114f0:	f7fd b8c7 	b.w	800e682 <forward_cast+0x286>
 80114f4:	e9d5 0100 	ldrd	r0, r1, [r5]
 80114f8:	f7ef f81a 	bl	8000530 <__aeabi_l2f>
 80114fc:	ee07 0a90 	vmov	s15, r0
 8011500:	4ba7      	ldr	r3, [pc, #668]	; (80117a0 <forward_cast+0x33a4>)
 8011502:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011506:	4aa7      	ldr	r2, [pc, #668]	; (80117a4 <forward_cast+0x33a8>)
 8011508:	ee17 0a90 	vmov	r0, s15
 801150c:	f7fd bd76 	b.w	800effc <forward_cast+0xc00>
 8011510:	f9b5 0000 	ldrsh.w	r0, [r5]
 8011514:	f7fd b813 	b.w	800e53e <forward_cast+0x142>
 8011518:	7829      	ldrb	r1, [r5, #0]
 801151a:	f7fd b861 	b.w	800e5e0 <forward_cast+0x1e4>
 801151e:	e9d5 0100 	ldrd	r0, r1, [r5]
 8011522:	9301      	str	r3, [sp, #4]
 8011524:	f7ef f804 	bl	8000530 <__aeabi_l2f>
 8011528:	ee07 0a90 	vmov	s15, r0
 801152c:	4a9d      	ldr	r2, [pc, #628]	; (80117a4 <forward_cast+0x33a8>)
 801152e:	9b01      	ldr	r3, [sp, #4]
 8011530:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011534:	ee17 0a90 	vmov	r0, s15
 8011538:	f7fd ba30 	b.w	800e99c <forward_cast+0x5a0>
 801153c:	f995 1000 	ldrsb.w	r1, [r5]
 8011540:	b289      	uxth	r1, r1
 8011542:	f7fd b9ef 	b.w	800e924 <forward_cast+0x528>
 8011546:	f995 0000 	ldrsb.w	r0, [r5]
 801154a:	f7fd ba27 	b.w	800e99c <forward_cast+0x5a0>
 801154e:	e9d5 0100 	ldrd	r0, r1, [r5]
 8011552:	f7ee ffed 	bl	8000530 <__aeabi_l2f>
 8011556:	ee07 0a90 	vmov	s15, r0
 801155a:	4b92      	ldr	r3, [pc, #584]	; (80117a4 <forward_cast+0x33a8>)
 801155c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011560:	4a91      	ldr	r2, [pc, #580]	; (80117a8 <forward_cast+0x33ac>)
 8011562:	ee17 0a90 	vmov	r0, s15
 8011566:	f7fd b8ef 	b.w	800e748 <forward_cast+0x34c>
 801156a:	f9b5 0000 	ldrsh.w	r0, [r5]
 801156e:	f7fd bec3 	b.w	800f2f8 <forward_cast+0xefc>
 8011572:	e9d5 0100 	ldrd	r0, r1, [r5]
 8011576:	f7ee ffdb 	bl	8000530 <__aeabi_l2f>
 801157a:	ee07 0a90 	vmov	s15, r0
 801157e:	4a85      	ldr	r2, [pc, #532]	; (8011794 <forward_cast+0x3398>)
 8011580:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011584:	4b82      	ldr	r3, [pc, #520]	; (8011790 <forward_cast+0x3394>)
 8011586:	ee17 0a90 	vmov	r0, s15
 801158a:	f7fd bdf2 	b.w	800f172 <forward_cast+0xd76>
 801158e:	f9b5 1000 	ldrsh.w	r1, [r5]
 8011592:	ee07 1a90 	vmov	s15, r1
 8011596:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801159a:	f7fd bbb5 	b.w	800ed08 <forward_cast+0x90c>
 801159e:	edd5 7a00 	vldr	s15, [r5]
 80115a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80115a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80115aa:	edcd 7a01 	vstr	s15, [sp, #4]
 80115ae:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80115b2:	f7ff b802 	b.w	80105ba <forward_cast+0x21be>
 80115b6:	e9d5 0100 	ldrd	r0, r1, [r5]
 80115ba:	f7ee ffb9 	bl	8000530 <__aeabi_l2f>
 80115be:	ee07 0a90 	vmov	s15, r0
 80115c2:	4b78      	ldr	r3, [pc, #480]	; (80117a4 <forward_cast+0x33a8>)
 80115c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80115c8:	4a77      	ldr	r2, [pc, #476]	; (80117a8 <forward_cast+0x33ac>)
 80115ca:	edcd 7a01 	vstr	s15, [sp, #4]
 80115ce:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80115d2:	f7fe bff2 	b.w	80105ba <forward_cast+0x21be>
 80115d6:	f995 0000 	ldrsb.w	r0, [r5]
 80115da:	f7ff b838 	b.w	801064e <forward_cast+0x2252>
 80115de:	edd5 7a00 	vldr	s15, [r5]
 80115e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80115e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80115ea:	ee17 0a90 	vmov	r0, s15
 80115ee:	f7ff b82e 	b.w	801064e <forward_cast+0x2252>
 80115f2:	e9d5 0100 	ldrd	r0, r1, [r5]
 80115f6:	f7ee ff9b 	bl	8000530 <__aeabi_l2f>
 80115fa:	ee07 0a90 	vmov	s15, r0
 80115fe:	4b64      	ldr	r3, [pc, #400]	; (8011790 <forward_cast+0x3394>)
 8011600:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011604:	4a69      	ldr	r2, [pc, #420]	; (80117ac <forward_cast+0x33b0>)
 8011606:	ee17 0a90 	vmov	r0, s15
 801160a:	f7ff b820 	b.w	801064e <forward_cast+0x2252>
 801160e:	7828      	ldrb	r0, [r5, #0]
 8011610:	f7ff b81d 	b.w	801064e <forward_cast+0x2252>
 8011614:	e9d5 0100 	ldrd	r0, r1, [r5]
 8011618:	f7ee ff82 	bl	8000520 <__aeabi_ul2f>
 801161c:	ee07 0a90 	vmov	s15, r0
 8011620:	4a62      	ldr	r2, [pc, #392]	; (80117ac <forward_cast+0x33b0>)
 8011622:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011626:	4b5a      	ldr	r3, [pc, #360]	; (8011790 <forward_cast+0x3394>)
 8011628:	ee17 0a90 	vmov	r0, s15
 801162c:	f7ff b80f 	b.w	801064e <forward_cast+0x2252>
 8011630:	f9b5 0000 	ldrsh.w	r0, [r5]
 8011634:	f7ff b80b 	b.w	801064e <forward_cast+0x2252>
 8011638:	e9d5 0100 	ldrd	r0, r1, [r5]
 801163c:	f7ee ff70 	bl	8000520 <__aeabi_ul2f>
 8011640:	ee07 0a90 	vmov	s15, r0
 8011644:	4a58      	ldr	r2, [pc, #352]	; (80117a8 <forward_cast+0x33ac>)
 8011646:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801164a:	4b56      	ldr	r3, [pc, #344]	; (80117a4 <forward_cast+0x33a8>)
 801164c:	edcd 7a01 	vstr	s15, [sp, #4]
 8011650:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8011654:	f7fe bfb1 	b.w	80105ba <forward_cast+0x21be>
 8011658:	edd5 7a00 	vldr	s15, [r5]
 801165c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011660:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011664:	ee17 0a90 	vmov	r0, s15
 8011668:	f7fe bedb 	b.w	8010422 <forward_cast+0x2026>
 801166c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8011670:	f7ee ff5e 	bl	8000530 <__aeabi_l2f>
 8011674:	ee07 0a90 	vmov	s15, r0
 8011678:	4b45      	ldr	r3, [pc, #276]	; (8011790 <forward_cast+0x3394>)
 801167a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801167e:	4a4b      	ldr	r2, [pc, #300]	; (80117ac <forward_cast+0x33b0>)
 8011680:	ee17 0a90 	vmov	r0, s15
 8011684:	f7fd be92 	b.w	800f3ac <forward_cast+0xfb0>
 8011688:	7828      	ldrb	r0, [r5, #0]
 801168a:	f7fd bec5 	b.w	800f418 <forward_cast+0x101c>
 801168e:	f995 0000 	ldrsb.w	r0, [r5]
 8011692:	f7fe bf2b 	b.w	80104ec <forward_cast+0x20f0>
 8011696:	edd5 7a00 	vldr	s15, [r5]
 801169a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801169e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80116a2:	ee17 0a90 	vmov	r0, s15
 80116a6:	f7fe bf21 	b.w	80104ec <forward_cast+0x20f0>
 80116aa:	7829      	ldrb	r1, [r5, #0]
 80116ac:	f7fd bc1e 	b.w	800eeec <forward_cast+0xaf0>
 80116b0:	e9d5 0100 	ldrd	r0, r1, [r5]
 80116b4:	f7ee ff3c 	bl	8000530 <__aeabi_l2f>
 80116b8:	ee07 0a90 	vmov	s15, r0
 80116bc:	4b39      	ldr	r3, [pc, #228]	; (80117a4 <forward_cast+0x33a8>)
 80116be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80116c2:	4a39      	ldr	r2, [pc, #228]	; (80117a8 <forward_cast+0x33ac>)
 80116c4:	edcd 7a01 	vstr	s15, [sp, #4]
 80116c8:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80116cc:	f7fd ba89 	b.w	800ebe2 <forward_cast+0x7e6>
 80116d0:	edd5 7a00 	vldr	s15, [r5]
 80116d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80116d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80116dc:	ee17 0a90 	vmov	r0, s15
 80116e0:	f7fe bb99 	b.w	800fe16 <forward_cast+0x1a1a>
 80116e4:	f995 1000 	ldrsb.w	r1, [r5]
 80116e8:	b289      	uxth	r1, r1
 80116ea:	f7fd b885 	b.w	800e7f8 <forward_cast+0x3fc>
 80116ee:	f995 0000 	ldrsb.w	r0, [r5]
 80116f2:	f7fe bb90 	b.w	800fe16 <forward_cast+0x1a1a>
 80116f6:	f995 0000 	ldrsb.w	r0, [r5]
 80116fa:	f7fd bcfc 	b.w	800f0f6 <forward_cast+0xcfa>
 80116fe:	e9d5 0100 	ldrd	r0, r1, [r5]
 8011702:	f7ee ff15 	bl	8000530 <__aeabi_l2f>
 8011706:	ee07 0a90 	vmov	s15, r0
 801170a:	4b26      	ldr	r3, [pc, #152]	; (80117a4 <forward_cast+0x33a8>)
 801170c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011710:	4a26      	ldr	r2, [pc, #152]	; (80117ac <forward_cast+0x33b0>)
 8011712:	ee17 0a90 	vmov	r0, s15
 8011716:	f7fe bbca 	b.w	800feae <forward_cast+0x1ab2>
 801171a:	7828      	ldrb	r0, [r5, #0]
 801171c:	f7fe bbc7 	b.w	800feae <forward_cast+0x1ab2>
 8011720:	e9d5 0100 	ldrd	r0, r1, [r5]
 8011724:	f7ee fefc 	bl	8000520 <__aeabi_ul2f>
 8011728:	ee07 0a90 	vmov	s15, r0
 801172c:	4a1f      	ldr	r2, [pc, #124]	; (80117ac <forward_cast+0x33b0>)
 801172e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011732:	4b1c      	ldr	r3, [pc, #112]	; (80117a4 <forward_cast+0x33a8>)
 8011734:	ee17 0a90 	vmov	r0, s15
 8011738:	f7fe bbb9 	b.w	800feae <forward_cast+0x1ab2>
 801173c:	f9b5 0000 	ldrsh.w	r0, [r5]
 8011740:	f7fe bbb5 	b.w	800feae <forward_cast+0x1ab2>
 8011744:	f995 1000 	ldrsb.w	r1, [r5]
 8011748:	3900      	subs	r1, #0
 801174a:	bf18      	it	ne
 801174c:	2101      	movne	r1, #1
 801174e:	f7fe bc5d 	b.w	801000c <forward_cast+0x1c10>
 8011752:	f995 0000 	ldrsb.w	r0, [r5]
 8011756:	f7fd b899 	b.w	800e88c <forward_cast+0x490>
 801175a:	f995 0000 	ldrsb.w	r0, [r5]
 801175e:	f7fe bba6 	b.w	800feae <forward_cast+0x1ab2>
 8011762:	edd5 7a00 	vldr	s15, [r5]
 8011766:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801176a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801176e:	ee17 0a90 	vmov	r0, s15
 8011772:	f7fe bb9c 	b.w	800feae <forward_cast+0x1ab2>
 8011776:	edd5 7a00 	vldr	s15, [r5]
 801177a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801177e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8011782:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011786:	bf14      	ite	ne
 8011788:	2101      	movne	r1, #1
 801178a:	2100      	moveq	r1, #0
 801178c:	f7fe bc3e 	b.w	801000c <forward_cast+0x1c10>
 8011790:	00042040 	.word	0x00042040
 8011794:	01821040 	.word	0x01821040
 8011798:	00840440 	.word	0x00840440
 801179c:	00842040 	.word	0x00842040
 80117a0:	00840840 	.word	0x00840840
 80117a4:	00841040 	.word	0x00841040
 80117a8:	00041040 	.word	0x00041040
 80117ac:	00060440 	.word	0x00060440
 80117b0:	e9d5 0100 	ldrd	r0, r1, [r5]
 80117b4:	f7ee febc 	bl	8000530 <__aeabi_l2f>
 80117b8:	ee07 0a90 	vmov	s15, r0
 80117bc:	4bdb      	ldr	r3, [pc, #876]	; (8011b2c <forward_cast+0x3730>)
 80117be:	eef5 7a40 	vcmp.f32	s15, #0.0
 80117c2:	4adb      	ldr	r2, [pc, #876]	; (8011b30 <forward_cast+0x3734>)
 80117c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80117c8:	bf14      	ite	ne
 80117ca:	2101      	movne	r1, #1
 80117cc:	2100      	moveq	r1, #0
 80117ce:	f7fe bc1d 	b.w	801000c <forward_cast+0x1c10>
 80117d2:	e9d5 0100 	ldrd	r0, r1, [r5]
 80117d6:	f7ee fea3 	bl	8000520 <__aeabi_ul2f>
 80117da:	ee07 0a90 	vmov	s15, r0
 80117de:	4ad4      	ldr	r2, [pc, #848]	; (8011b30 <forward_cast+0x3734>)
 80117e0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80117e4:	4bd1      	ldr	r3, [pc, #836]	; (8011b2c <forward_cast+0x3730>)
 80117e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80117ea:	bf14      	ite	ne
 80117ec:	2101      	movne	r1, #1
 80117ee:	2100      	moveq	r1, #0
 80117f0:	f7fe bc0c 	b.w	801000c <forward_cast+0x1c10>
 80117f4:	f9b5 1000 	ldrsh.w	r1, [r5]
 80117f8:	3900      	subs	r1, #0
 80117fa:	bf18      	it	ne
 80117fc:	2101      	movne	r1, #1
 80117fe:	f7fe bc05 	b.w	801000c <forward_cast+0x1c10>
 8011802:	e9d5 0100 	ldrd	r0, r1, [r5]
 8011806:	f7ee fe93 	bl	8000530 <__aeabi_l2f>
 801180a:	ee07 0a90 	vmov	s15, r0
 801180e:	4bc9      	ldr	r3, [pc, #804]	; (8011b34 <forward_cast+0x3738>)
 8011810:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011814:	4ac6      	ldr	r2, [pc, #792]	; (8011b30 <forward_cast+0x3734>)
 8011816:	edcd 7a01 	vstr	s15, [sp, #4]
 801181a:	f99d 1004 	ldrsb.w	r1, [sp, #4]
 801181e:	f7fe bba3 	b.w	800ff68 <forward_cast+0x1b6c>
 8011822:	e9d5 0100 	ldrd	r0, r1, [r5]
 8011826:	f7ee fe7b 	bl	8000520 <__aeabi_ul2f>
 801182a:	ee07 0a90 	vmov	s15, r0
 801182e:	4ac0      	ldr	r2, [pc, #768]	; (8011b30 <forward_cast+0x3734>)
 8011830:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011834:	4bbf      	ldr	r3, [pc, #764]	; (8011b34 <forward_cast+0x3738>)
 8011836:	edcd 7a01 	vstr	s15, [sp, #4]
 801183a:	f99d 1004 	ldrsb.w	r1, [sp, #4]
 801183e:	f7fe bb93 	b.w	800ff68 <forward_cast+0x1b6c>
 8011842:	edd5 7a00 	vldr	s15, [r5]
 8011846:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801184a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801184e:	edcd 7a01 	vstr	s15, [sp, #4]
 8011852:	f99d 1004 	ldrsb.w	r1, [sp, #4]
 8011856:	f7fe bb87 	b.w	800ff68 <forward_cast+0x1b6c>
 801185a:	f995 0000 	ldrsb.w	r0, [r5]
 801185e:	f7fd bcfe 	b.w	800f25e <forward_cast+0xe62>
 8011862:	e9d5 0100 	ldrd	r0, r1, [r5]
 8011866:	f7ee fe5b 	bl	8000520 <__aeabi_ul2f>
 801186a:	ee07 0a90 	vmov	s15, r0
 801186e:	4ab0      	ldr	r2, [pc, #704]	; (8011b30 <forward_cast+0x3734>)
 8011870:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011874:	ee17 3a90 	vmov	r3, s15
 8011878:	b219      	sxth	r1, r3
 801187a:	4bac      	ldr	r3, [pc, #688]	; (8011b2c <forward_cast+0x3730>)
 801187c:	f7fd bafa 	b.w	800ee74 <forward_cast+0xa78>
 8011880:	e9d5 0100 	ldrd	r0, r1, [r5]
 8011884:	f7ee fe4c 	bl	8000520 <__aeabi_ul2f>
 8011888:	ee07 0a90 	vmov	s15, r0
 801188c:	4aa7      	ldr	r2, [pc, #668]	; (8011b2c <forward_cast+0x3730>)
 801188e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011892:	4ba8      	ldr	r3, [pc, #672]	; (8011b34 <forward_cast+0x3738>)
 8011894:	ee17 0a90 	vmov	r0, s15
 8011898:	f7fc bf56 	b.w	800e748 <forward_cast+0x34c>
 801189c:	edd5 7a00 	vldr	s15, [r5]
 80118a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80118a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80118a8:	ee17 0a90 	vmov	r0, s15
 80118ac:	f7fc bf4c 	b.w	800e748 <forward_cast+0x34c>
 80118b0:	7828      	ldrb	r0, [r5, #0]
 80118b2:	f7fd bc20 	b.w	800f0f6 <forward_cast+0xcfa>
 80118b6:	e9d5 0100 	ldrd	r0, r1, [r5]
 80118ba:	f7ee fe39 	bl	8000530 <__aeabi_l2f>
 80118be:	ee07 0a90 	vmov	s15, r0
 80118c2:	4a9b      	ldr	r2, [pc, #620]	; (8011b30 <forward_cast+0x3734>)
 80118c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80118c8:	ee17 3a90 	vmov	r3, s15
 80118cc:	b219      	sxth	r1, r3
 80118ce:	4b97      	ldr	r3, [pc, #604]	; (8011b2c <forward_cast+0x3730>)
 80118d0:	f7fd bb0c 	b.w	800eeec <forward_cast+0xaf0>
 80118d4:	f9b5 0000 	ldrsh.w	r0, [r5]
 80118d8:	f7fd b860 	b.w	800e99c <forward_cast+0x5a0>
 80118dc:	e9d5 0100 	ldrd	r0, r1, [r5]
 80118e0:	f7ee fe26 	bl	8000530 <__aeabi_l2f>
 80118e4:	ee07 0a90 	vmov	s15, r0
 80118e8:	4a91      	ldr	r2, [pc, #580]	; (8011b30 <forward_cast+0x3734>)
 80118ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80118ee:	ee17 3a90 	vmov	r3, s15
 80118f2:	b219      	sxth	r1, r3
 80118f4:	4b8d      	ldr	r3, [pc, #564]	; (8011b2c <forward_cast+0x3730>)
 80118f6:	f7fd ba81 	b.w	800edfc <forward_cast+0xa00>
 80118fa:	f9b5 0000 	ldrsh.w	r0, [r5]
 80118fe:	f7fd bb7d 	b.w	800effc <forward_cast+0xc00>
 8011902:	e9d5 0100 	ldrd	r0, r1, [r5]
 8011906:	f7ee fe13 	bl	8000530 <__aeabi_l2f>
 801190a:	ee07 0a90 	vmov	s15, r0
 801190e:	4a8a      	ldr	r2, [pc, #552]	; (8011b38 <forward_cast+0x373c>)
 8011910:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011914:	4b89      	ldr	r3, [pc, #548]	; (8011b3c <forward_cast+0x3740>)
 8011916:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801191a:	f7fd ba35 	b.w	800ed88 <forward_cast+0x98c>
 801191e:	f9b5 0000 	ldrsh.w	r0, [r5]
 8011922:	f7fd b88d 	b.w	800ea40 <forward_cast+0x644>
 8011926:	e9d5 0100 	ldrd	r0, r1, [r5]
 801192a:	f7ee fe01 	bl	8000530 <__aeabi_l2f>
 801192e:	ee07 0a90 	vmov	s15, r0
 8011932:	4a80      	ldr	r2, [pc, #512]	; (8011b34 <forward_cast+0x3738>)
 8011934:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011938:	4b80      	ldr	r3, [pc, #512]	; (8011b3c <forward_cast+0x3740>)
 801193a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801193e:	f7fd b9e3 	b.w	800ed08 <forward_cast+0x90c>
 8011942:	f9b5 0000 	ldrsh.w	r0, [r5]
 8011946:	f7fc bfa1 	b.w	800e88c <forward_cast+0x490>
 801194a:	e9d5 0100 	ldrd	r0, r1, [r5]
 801194e:	f7ee fdef 	bl	8000530 <__aeabi_l2f>
 8011952:	ee07 0a90 	vmov	s15, r0
 8011956:	4b76      	ldr	r3, [pc, #472]	; (8011b30 <forward_cast+0x3734>)
 8011958:	eef5 7a40 	vcmp.f32	s15, #0.0
 801195c:	4a78      	ldr	r2, [pc, #480]	; (8011b40 <forward_cast+0x3744>)
 801195e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011962:	bf14      	ite	ne
 8011964:	2101      	movne	r1, #1
 8011966:	2100      	moveq	r1, #0
 8011968:	f7fd bc3e 	b.w	800f1e8 <forward_cast+0xdec>
 801196c:	edd5 7a00 	vldr	s15, [r5]
 8011970:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011974:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011978:	ee17 0a90 	vmov	r0, s15
 801197c:	f7fd bcbc 	b.w	800f2f8 <forward_cast+0xefc>
 8011980:	edd5 7a00 	vldr	s15, [r5]
 8011984:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011988:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801198c:	ee17 1a90 	vmov	r1, s15
 8011990:	b209      	sxth	r1, r1
 8011992:	f7fd ba6f 	b.w	800ee74 <forward_cast+0xa78>
 8011996:	7829      	ldrb	r1, [r5, #0]
 8011998:	ee07 1a90 	vmov	s15, r1
 801199c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80119a0:	f7fd b9f2 	b.w	800ed88 <forward_cast+0x98c>
 80119a4:	f995 0000 	ldrsb.w	r0, [r5]
 80119a8:	f7fd b88a 	b.w	800eac0 <forward_cast+0x6c4>
 80119ac:	f995 0000 	ldrsb.w	r0, [r5]
 80119b0:	f7fc beca 	b.w	800e748 <forward_cast+0x34c>
 80119b4:	e9d5 0100 	ldrd	r0, r1, [r5]
 80119b8:	f7ee fdba 	bl	8000530 <__aeabi_l2f>
 80119bc:	ee07 0a90 	vmov	s15, r0
 80119c0:	4a5b      	ldr	r2, [pc, #364]	; (8011b30 <forward_cast+0x3734>)
 80119c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80119c6:	ee17 3a90 	vmov	r3, s15
 80119ca:	b219      	sxth	r1, r3
 80119cc:	4b57      	ldr	r3, [pc, #348]	; (8011b2c <forward_cast+0x3730>)
 80119ce:	f7fd ba51 	b.w	800ee74 <forward_cast+0xa78>
 80119d2:	7828      	ldrb	r0, [r5, #0]
 80119d4:	f7fc bf5a 	b.w	800e88c <forward_cast+0x490>
 80119d8:	e9d5 0100 	ldrd	r0, r1, [r5]
 80119dc:	f7ee fda0 	bl	8000520 <__aeabi_ul2f>
 80119e0:	ee07 0a90 	vmov	s15, r0
 80119e4:	4a56      	ldr	r2, [pc, #344]	; (8011b40 <forward_cast+0x3744>)
 80119e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80119ea:	4b51      	ldr	r3, [pc, #324]	; (8011b30 <forward_cast+0x3734>)
 80119ec:	ee17 0a90 	vmov	r0, s15
 80119f0:	f7fd bc82 	b.w	800f2f8 <forward_cast+0xefc>
 80119f4:	e9d5 0100 	ldrd	r0, r1, [r5]
 80119f8:	f7ee fd92 	bl	8000520 <__aeabi_ul2f>
 80119fc:	ee07 0a90 	vmov	s15, r0
 8011a00:	4a4b      	ldr	r2, [pc, #300]	; (8011b30 <forward_cast+0x3734>)
 8011a02:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011a06:	ee17 3a90 	vmov	r3, s15
 8011a0a:	b219      	sxth	r1, r3
 8011a0c:	4b47      	ldr	r3, [pc, #284]	; (8011b2c <forward_cast+0x3730>)
 8011a0e:	f7fd b9f5 	b.w	800edfc <forward_cast+0xa00>
 8011a12:	edd5 7a00 	vldr	s15, [r5]
 8011a16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011a1a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011a1e:	ee17 1a90 	vmov	r1, s15
 8011a22:	b209      	sxth	r1, r1
 8011a24:	f7fd b9ea 	b.w	800edfc <forward_cast+0xa00>
 8011a28:	7828      	ldrb	r0, [r5, #0]
 8011a2a:	f7fd bc18 	b.w	800f25e <forward_cast+0xe62>
 8011a2e:	f995 0000 	ldrsb.w	r0, [r5]
 8011a32:	f7fd bc61 	b.w	800f2f8 <forward_cast+0xefc>
 8011a36:	f995 1000 	ldrsb.w	r1, [r5]
 8011a3a:	f7fd b9df 	b.w	800edfc <forward_cast+0xa00>
 8011a3e:	f995 1000 	ldrsb.w	r1, [r5]
 8011a42:	f7fd ba17 	b.w	800ee74 <forward_cast+0xa78>
 8011a46:	f995 0000 	ldrsb.w	r0, [r5]
 8011a4a:	f7fd bad7 	b.w	800effc <forward_cast+0xc00>
 8011a4e:	e9d5 0100 	ldrd	r0, r1, [r5]
 8011a52:	f7ee fd65 	bl	8000520 <__aeabi_ul2f>
 8011a56:	ee07 0a90 	vmov	s15, r0
 8011a5a:	4a35      	ldr	r2, [pc, #212]	; (8011b30 <forward_cast+0x3734>)
 8011a5c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011a60:	ee17 3a90 	vmov	r3, s15
 8011a64:	b219      	sxth	r1, r3
 8011a66:	4b31      	ldr	r3, [pc, #196]	; (8011b2c <forward_cast+0x3730>)
 8011a68:	f7fd ba40 	b.w	800eeec <forward_cast+0xaf0>
 8011a6c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8011a70:	f7ee fd56 	bl	8000520 <__aeabi_ul2f>
 8011a74:	ee07 0a90 	vmov	s15, r0
 8011a78:	4a2d      	ldr	r2, [pc, #180]	; (8011b30 <forward_cast+0x3734>)
 8011a7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011a7e:	ee17 3a90 	vmov	r3, s15
 8011a82:	b299      	uxth	r1, r3
 8011a84:	4b29      	ldr	r3, [pc, #164]	; (8011b2c <forward_cast+0x3730>)
 8011a86:	f7fc bdab 	b.w	800e5e0 <forward_cast+0x1e4>
 8011a8a:	e9d5 0100 	ldrd	r0, r1, [r5]
 8011a8e:	f7ee fd4f 	bl	8000530 <__aeabi_l2f>
 8011a92:	ee07 0a90 	vmov	s15, r0
 8011a96:	4b27      	ldr	r3, [pc, #156]	; (8011b34 <forward_cast+0x3738>)
 8011a98:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011a9c:	4a29      	ldr	r2, [pc, #164]	; (8011b44 <forward_cast+0x3748>)
 8011a9e:	ee17 0a90 	vmov	r0, s15
 8011aa2:	f7fd bd25 	b.w	800f4f0 <forward_cast+0x10f4>
 8011aa6:	edd5 7a00 	vldr	s15, [r5]
 8011aaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011aae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011ab2:	ee17 0a90 	vmov	r0, s15
 8011ab6:	f7fd bcaf 	b.w	800f418 <forward_cast+0x101c>
 8011aba:	e9d5 0100 	ldrd	r0, r1, [r5]
 8011abe:	f7ee fd37 	bl	8000530 <__aeabi_l2f>
 8011ac2:	ee07 0a90 	vmov	s15, r0
 8011ac6:	4b1a      	ldr	r3, [pc, #104]	; (8011b30 <forward_cast+0x3734>)
 8011ac8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011acc:	4a1c      	ldr	r2, [pc, #112]	; (8011b40 <forward_cast+0x3744>)
 8011ace:	ee17 0a90 	vmov	r0, s15
 8011ad2:	f7fe b902 	b.w	800fcda <forward_cast+0x18de>
 8011ad6:	7828      	ldrb	r0, [r5, #0]
 8011ad8:	f7fe b8ff 	b.w	800fcda <forward_cast+0x18de>
 8011adc:	e9d5 0100 	ldrd	r0, r1, [r5]
 8011ae0:	f7ee fd1e 	bl	8000520 <__aeabi_ul2f>
 8011ae4:	ee07 0a90 	vmov	s15, r0
 8011ae8:	4a15      	ldr	r2, [pc, #84]	; (8011b40 <forward_cast+0x3744>)
 8011aea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011aee:	4b10      	ldr	r3, [pc, #64]	; (8011b30 <forward_cast+0x3734>)
 8011af0:	ee17 0a90 	vmov	r0, s15
 8011af4:	f7fe b8f1 	b.w	800fcda <forward_cast+0x18de>
 8011af8:	f9b5 0000 	ldrsh.w	r0, [r5]
 8011afc:	f7fe b8ed 	b.w	800fcda <forward_cast+0x18de>
 8011b00:	f995 0000 	ldrsb.w	r0, [r5]
 8011b04:	f7fe b8e9 	b.w	800fcda <forward_cast+0x18de>
 8011b08:	f995 0000 	ldrsb.w	r0, [r5]
 8011b0c:	f7fc bd17 	b.w	800e53e <forward_cast+0x142>
 8011b10:	f995 0000 	ldrsb.w	r0, [r5]
 8011b14:	f7fe b930 	b.w	800fd78 <forward_cast+0x197c>
 8011b18:	edd5 7a00 	vldr	s15, [r5]
 8011b1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011b20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011b24:	ee17 0a90 	vmov	r0, s15
 8011b28:	f7fe b926 	b.w	800fd78 <forward_cast+0x197c>
 8011b2c:	00041040 	.word	0x00041040
 8011b30:	00042040 	.word	0x00042040
 8011b34:	00841040 	.word	0x00841040
 8011b38:	00842040 	.word	0x00842040
 8011b3c:	00840840 	.word	0x00840840
 8011b40:	00060440 	.word	0x00060440
 8011b44:	01821040 	.word	0x01821040
 8011b48:	e9d5 0100 	ldrd	r0, r1, [r5]
 8011b4c:	f7ee fcf0 	bl	8000530 <__aeabi_l2f>
 8011b50:	ee07 0a90 	vmov	s15, r0
 8011b54:	4bdc      	ldr	r3, [pc, #880]	; (8011ec8 <forward_cast+0x3acc>)
 8011b56:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011b5a:	4adc      	ldr	r2, [pc, #880]	; (8011ecc <forward_cast+0x3ad0>)
 8011b5c:	ee17 0a90 	vmov	r0, s15
 8011b60:	f7fe b90a 	b.w	800fd78 <forward_cast+0x197c>
 8011b64:	7828      	ldrb	r0, [r5, #0]
 8011b66:	f7fe b907 	b.w	800fd78 <forward_cast+0x197c>
 8011b6a:	e9d5 0100 	ldrd	r0, r1, [r5]
 8011b6e:	f7ee fcd7 	bl	8000520 <__aeabi_ul2f>
 8011b72:	ee07 0a90 	vmov	s15, r0
 8011b76:	4ad5      	ldr	r2, [pc, #852]	; (8011ecc <forward_cast+0x3ad0>)
 8011b78:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011b7c:	4bd2      	ldr	r3, [pc, #840]	; (8011ec8 <forward_cast+0x3acc>)
 8011b7e:	ee17 0a90 	vmov	r0, s15
 8011b82:	f7fe b8f9 	b.w	800fd78 <forward_cast+0x197c>
 8011b86:	f9b5 0000 	ldrsh.w	r0, [r5]
 8011b8a:	f7fe b8f5 	b.w	800fd78 <forward_cast+0x197c>
 8011b8e:	edd5 7a00 	vldr	s15, [r5]
 8011b92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011b96:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011b9a:	ee17 0a90 	vmov	r0, s15
 8011b9e:	f7fe b89c 	b.w	800fcda <forward_cast+0x18de>
 8011ba2:	f995 1000 	ldrsb.w	r1, [r5]
 8011ba6:	ee07 1a90 	vmov	s15, r1
 8011baa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011bae:	f7fd b8eb 	b.w	800ed88 <forward_cast+0x98c>
 8011bb2:	edd5 7a00 	vldr	s15, [r5]
 8011bb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011bba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011bbe:	ee17 1a90 	vmov	r1, s15
 8011bc2:	b209      	sxth	r1, r1
 8011bc4:	f7fd b992 	b.w	800eeec <forward_cast+0xaf0>
 8011bc8:	f9b5 0000 	ldrsh.w	r0, [r5]
 8011bcc:	f7fd bc90 	b.w	800f4f0 <forward_cast+0x10f4>
 8011bd0:	e9d5 0100 	ldrd	r0, r1, [r5]
 8011bd4:	f7ee fca4 	bl	8000520 <__aeabi_ul2f>
 8011bd8:	ee07 0a90 	vmov	s15, r0
 8011bdc:	4abb      	ldr	r2, [pc, #748]	; (8011ecc <forward_cast+0x3ad0>)
 8011bde:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011be2:	ee17 3a90 	vmov	r3, s15
 8011be6:	b299      	uxth	r1, r3
 8011be8:	4bb7      	ldr	r3, [pc, #732]	; (8011ec8 <forward_cast+0x3acc>)
 8011bea:	f7fc be05 	b.w	800e7f8 <forward_cast+0x3fc>
 8011bee:	e9d5 0100 	ldrd	r0, r1, [r5]
 8011bf2:	f7ee fc95 	bl	8000520 <__aeabi_ul2f>
 8011bf6:	ee07 0a90 	vmov	s15, r0
 8011bfa:	4bb5      	ldr	r3, [pc, #724]	; (8011ed0 <forward_cast+0x3ad4>)
 8011bfc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011c00:	4ab4      	ldr	r2, [pc, #720]	; (8011ed4 <forward_cast+0x3ad8>)
 8011c02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011c06:	f7fd b8bf 	b.w	800ed88 <forward_cast+0x98c>
 8011c0a:	edd5 7a00 	vldr	s15, [r5]
 8011c0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011c12:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011c16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011c1a:	f7fd b8b5 	b.w	800ed88 <forward_cast+0x98c>
 8011c1e:	7828      	ldrb	r0, [r5, #0]
 8011c20:	f7fc bd92 	b.w	800e748 <forward_cast+0x34c>
 8011c24:	e9d5 0100 	ldrd	r0, r1, [r5]
 8011c28:	f7ee fc7a 	bl	8000520 <__aeabi_ul2f>
 8011c2c:	ee07 0a90 	vmov	s15, r0
 8011c30:	4aa9      	ldr	r2, [pc, #676]	; (8011ed8 <forward_cast+0x3adc>)
 8011c32:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011c36:	4ba5      	ldr	r3, [pc, #660]	; (8011ecc <forward_cast+0x3ad0>)
 8011c38:	ee17 0a90 	vmov	r0, s15
 8011c3c:	f7fd bb0f 	b.w	800f25e <forward_cast+0xe62>
 8011c40:	e9d5 0100 	ldrd	r0, r1, [r5]
 8011c44:	f7ee fc6c 	bl	8000520 <__aeabi_ul2f>
 8011c48:	ee07 0a90 	vmov	s15, r0
 8011c4c:	4ba0      	ldr	r3, [pc, #640]	; (8011ed0 <forward_cast+0x3ad4>)
 8011c4e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011c52:	4aa2      	ldr	r2, [pc, #648]	; (8011edc <forward_cast+0x3ae0>)
 8011c54:	ee17 0a90 	vmov	r0, s15
 8011c58:	f7fc be18 	b.w	800e88c <forward_cast+0x490>
 8011c5c:	edd5 7a00 	vldr	s15, [r5]
 8011c60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011c64:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011c68:	ee17 0a90 	vmov	r0, s15
 8011c6c:	f7fc be0e 	b.w	800e88c <forward_cast+0x490>
 8011c70:	7828      	ldrb	r0, [r5, #0]
 8011c72:	f7fd b9c3 	b.w	800effc <forward_cast+0xc00>
 8011c76:	edd5 7a00 	vldr	s15, [r5]
 8011c7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011c7e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011c82:	ee17 1a90 	vmov	r1, s15
 8011c86:	b289      	uxth	r1, r1
 8011c88:	f7fc bdb6 	b.w	800e7f8 <forward_cast+0x3fc>
 8011c8c:	7829      	ldrb	r1, [r5, #0]
 8011c8e:	f7fd b8b5 	b.w	800edfc <forward_cast+0xa00>
 8011c92:	edd5 7a00 	vldr	s15, [r5]
 8011c96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011c9a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011c9e:	ee17 0a90 	vmov	r0, s15
 8011ca2:	f7fd badc 	b.w	800f25e <forward_cast+0xe62>
 8011ca6:	7828      	ldrb	r0, [r5, #0]
 8011ca8:	f7fc bf0a 	b.w	800eac0 <forward_cast+0x6c4>
 8011cac:	e9d5 0100 	ldrd	r0, r1, [r5]
 8011cb0:	f7ee fc36 	bl	8000520 <__aeabi_ul2f>
 8011cb4:	ee07 0a90 	vmov	s15, r0
 8011cb8:	4a83      	ldr	r2, [pc, #524]	; (8011ec8 <forward_cast+0x3acc>)
 8011cba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011cbe:	4b88      	ldr	r3, [pc, #544]	; (8011ee0 <forward_cast+0x3ae4>)
 8011cc0:	ee17 0a90 	vmov	r0, s15
 8011cc4:	f7fc befc 	b.w	800eac0 <forward_cast+0x6c4>
 8011cc8:	e9d5 0100 	ldrd	r0, r1, [r5]
 8011ccc:	f7ee fc28 	bl	8000520 <__aeabi_ul2f>
 8011cd0:	ee07 0a90 	vmov	s15, r0
 8011cd4:	4a82      	ldr	r2, [pc, #520]	; (8011ee0 <forward_cast+0x3ae4>)
 8011cd6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011cda:	4b7d      	ldr	r3, [pc, #500]	; (8011ed0 <forward_cast+0x3ad4>)
 8011cdc:	ee17 0a90 	vmov	r0, s15
 8011ce0:	f7fd b98c 	b.w	800effc <forward_cast+0xc00>
 8011ce4:	edd5 7a00 	vldr	s15, [r5]
 8011ce8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011cec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011cf0:	ee17 0a90 	vmov	r0, s15
 8011cf4:	f7fd b982 	b.w	800effc <forward_cast+0xc00>
 8011cf8:	7829      	ldrb	r1, [r5, #0]
 8011cfa:	f7fc bd7d 	b.w	800e7f8 <forward_cast+0x3fc>
 8011cfe:	e9d5 0100 	ldrd	r0, r1, [r5]
 8011d02:	f7ee fc0d 	bl	8000520 <__aeabi_ul2f>
 8011d06:	ee07 0a90 	vmov	s15, r0
 8011d0a:	4a75      	ldr	r2, [pc, #468]	; (8011ee0 <forward_cast+0x3ae4>)
 8011d0c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011d10:	4b6f      	ldr	r3, [pc, #444]	; (8011ed0 <forward_cast+0x3ad4>)
 8011d12:	ee17 0a90 	vmov	r0, s15
 8011d16:	f7fc bc12 	b.w	800e53e <forward_cast+0x142>
 8011d1a:	e9d5 0100 	ldrd	r0, r1, [r5]
 8011d1e:	f7ee fbff 	bl	8000520 <__aeabi_ul2f>
 8011d22:	ee07 0a90 	vmov	s15, r0
 8011d26:	4a69      	ldr	r2, [pc, #420]	; (8011ecc <forward_cast+0x3ad0>)
 8011d28:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011d2c:	4b66      	ldr	r3, [pc, #408]	; (8011ec8 <forward_cast+0x3acc>)
 8011d2e:	ee17 0a90 	vmov	r0, s15
 8011d32:	f7fd b9e0 	b.w	800f0f6 <forward_cast+0xcfa>
 8011d36:	edd5 7a00 	vldr	s15, [r5]
 8011d3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011d3e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011d42:	ee17 0a90 	vmov	r0, s15
 8011d46:	f7fd b9d6 	b.w	800f0f6 <forward_cast+0xcfa>
 8011d4a:	7828      	ldrb	r0, [r5, #0]
 8011d4c:	f7fd ba11 	b.w	800f172 <forward_cast+0xd76>
 8011d50:	edd5 7a00 	vldr	s15, [r5]
 8011d54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011d58:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011d5c:	ee17 0a90 	vmov	r0, s15
 8011d60:	f7fc beae 	b.w	800eac0 <forward_cast+0x6c4>
 8011d64:	7828      	ldrb	r0, [r5, #0]
 8011d66:	f7fc bbea 	b.w	800e53e <forward_cast+0x142>
 8011d6a:	edd5 7a00 	vldr	s15, [r5]
 8011d6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011d72:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011d76:	ee17 0a90 	vmov	r0, s15
 8011d7a:	f7fc bbe0 	b.w	800e53e <forward_cast+0x142>
 8011d7e:	7829      	ldrb	r1, [r5, #0]
 8011d80:	f7fd b878 	b.w	800ee74 <forward_cast+0xa78>
 8011d84:	e9d5 0100 	ldrd	r0, r1, [r5]
 8011d88:	f7ee fbd2 	bl	8000530 <__aeabi_l2f>
 8011d8c:	ee07 0a90 	vmov	s15, r0
 8011d90:	4b4d      	ldr	r3, [pc, #308]	; (8011ec8 <forward_cast+0x3acc>)
 8011d92:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011d96:	4a4d      	ldr	r2, [pc, #308]	; (8011ecc <forward_cast+0x3ad0>)
 8011d98:	ee17 0a90 	vmov	r0, s15
 8011d9c:	f7fe b83b 	b.w	800fe16 <forward_cast+0x1a1a>
 8011da0:	7828      	ldrb	r0, [r5, #0]
 8011da2:	f7fe b838 	b.w	800fe16 <forward_cast+0x1a1a>
 8011da6:	e9d5 0100 	ldrd	r0, r1, [r5]
 8011daa:	f7ee fbb9 	bl	8000520 <__aeabi_ul2f>
 8011dae:	ee07 0a90 	vmov	s15, r0
 8011db2:	4a46      	ldr	r2, [pc, #280]	; (8011ecc <forward_cast+0x3ad0>)
 8011db4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011db8:	4b43      	ldr	r3, [pc, #268]	; (8011ec8 <forward_cast+0x3acc>)
 8011dba:	ee17 0a90 	vmov	r0, s15
 8011dbe:	f7fe b82a 	b.w	800fe16 <forward_cast+0x1a1a>
 8011dc2:	f9b5 0000 	ldrsh.w	r0, [r5]
 8011dc6:	f7fe b826 	b.w	800fe16 <forward_cast+0x1a1a>
 8011dca:	f995 0000 	ldrsb.w	r0, [r5]
 8011dce:	f7fe ba89 	b.w	80102e4 <forward_cast+0x1ee8>
 8011dd2:	edd5 7a00 	vldr	s15, [r5]
 8011dd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011dda:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011dde:	ee17 0a90 	vmov	r0, s15
 8011de2:	f7fe b9cd 	b.w	8010180 <forward_cast+0x1d84>
 8011de6:	f995 0000 	ldrsb.w	r0, [r5]
 8011dea:	f7fe bacb 	b.w	8010384 <forward_cast+0x1f88>
 8011dee:	edd5 7a00 	vldr	s15, [r5]
 8011df2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011df6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011dfa:	ee17 0a90 	vmov	r0, s15
 8011dfe:	f7fe bac1 	b.w	8010384 <forward_cast+0x1f88>
 8011e02:	e9d5 0100 	ldrd	r0, r1, [r5]
 8011e06:	f7ee fb93 	bl	8000530 <__aeabi_l2f>
 8011e0a:	ee07 0a90 	vmov	s15, r0
 8011e0e:	4b30      	ldr	r3, [pc, #192]	; (8011ed0 <forward_cast+0x3ad4>)
 8011e10:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011e14:	4a32      	ldr	r2, [pc, #200]	; (8011ee0 <forward_cast+0x3ae4>)
 8011e16:	ee17 0a90 	vmov	r0, s15
 8011e1a:	f7fe bab3 	b.w	8010384 <forward_cast+0x1f88>
 8011e1e:	7828      	ldrb	r0, [r5, #0]
 8011e20:	f7fe bab0 	b.w	8010384 <forward_cast+0x1f88>
 8011e24:	e9d5 0100 	ldrd	r0, r1, [r5]
 8011e28:	f7ee fb7a 	bl	8000520 <__aeabi_ul2f>
 8011e2c:	ee07 0a90 	vmov	s15, r0
 8011e30:	4a2b      	ldr	r2, [pc, #172]	; (8011ee0 <forward_cast+0x3ae4>)
 8011e32:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011e36:	4b26      	ldr	r3, [pc, #152]	; (8011ed0 <forward_cast+0x3ad4>)
 8011e38:	ee17 0a90 	vmov	r0, s15
 8011e3c:	f7fe baa2 	b.w	8010384 <forward_cast+0x1f88>
 8011e40:	f9b5 0000 	ldrsh.w	r0, [r5]
 8011e44:	f7fe ba9e 	b.w	8010384 <forward_cast+0x1f88>
 8011e48:	e9d5 0100 	ldrd	r0, r1, [r5]
 8011e4c:	f7ee fb70 	bl	8000530 <__aeabi_l2f>
 8011e50:	ee07 0a90 	vmov	s15, r0
 8011e54:	4b1d      	ldr	r3, [pc, #116]	; (8011ecc <forward_cast+0x3ad0>)
 8011e56:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011e5a:	4a1f      	ldr	r2, [pc, #124]	; (8011ed8 <forward_cast+0x3adc>)
 8011e5c:	ee17 0a90 	vmov	r0, s15
 8011e60:	f7fd b9fd 	b.w	800f25e <forward_cast+0xe62>
 8011e64:	e9d5 0100 	ldrd	r0, r1, [r5]
 8011e68:	f7ee fb62 	bl	8000530 <__aeabi_l2f>
 8011e6c:	ee07 0a90 	vmov	s15, r0
 8011e70:	4a1a      	ldr	r2, [pc, #104]	; (8011edc <forward_cast+0x3ae0>)
 8011e72:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011e76:	4b16      	ldr	r3, [pc, #88]	; (8011ed0 <forward_cast+0x3ad4>)
 8011e78:	ee17 0a90 	vmov	r0, s15
 8011e7c:	f7fc bd06 	b.w	800e88c <forward_cast+0x490>
 8011e80:	e9d5 0100 	ldrd	r0, r1, [r5]
 8011e84:	f7ee fb54 	bl	8000530 <__aeabi_l2f>
 8011e88:	ee07 0a90 	vmov	s15, r0
 8011e8c:	4a0f      	ldr	r2, [pc, #60]	; (8011ecc <forward_cast+0x3ad0>)
 8011e8e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011e92:	ee17 3a90 	vmov	r3, s15
 8011e96:	b299      	uxth	r1, r3
 8011e98:	4b0b      	ldr	r3, [pc, #44]	; (8011ec8 <forward_cast+0x3acc>)
 8011e9a:	f7fc bd43 	b.w	800e924 <forward_cast+0x528>
 8011e9e:	7828      	ldrb	r0, [r5, #0]
 8011ea0:	f7fc bd7c 	b.w	800e99c <forward_cast+0x5a0>
 8011ea4:	e9d5 0100 	ldrd	r0, r1, [r5]
 8011ea8:	f7ee fb42 	bl	8000530 <__aeabi_l2f>
 8011eac:	ee07 0a90 	vmov	s15, r0
 8011eb0:	4b05      	ldr	r3, [pc, #20]	; (8011ec8 <forward_cast+0x3acc>)
 8011eb2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011eb6:	4a05      	ldr	r2, [pc, #20]	; (8011ecc <forward_cast+0x3ad0>)
 8011eb8:	ee17 0a90 	vmov	r0, s15
 8011ebc:	f7fe b911 	b.w	80100e2 <forward_cast+0x1ce6>
 8011ec0:	7828      	ldrb	r0, [r5, #0]
 8011ec2:	f7fe b90e 	b.w	80100e2 <forward_cast+0x1ce6>
 8011ec6:	bf00      	nop
 8011ec8:	00041040 	.word	0x00041040
 8011ecc:	00042040 	.word	0x00042040
 8011ed0:	00840840 	.word	0x00840840
 8011ed4:	00842040 	.word	0x00842040
 8011ed8:	00060440 	.word	0x00060440
 8011edc:	00040440 	.word	0x00040440
 8011ee0:	00841040 	.word	0x00841040
 8011ee4:	e9d5 0100 	ldrd	r0, r1, [r5]
 8011ee8:	f7ee fb1a 	bl	8000520 <__aeabi_ul2f>
 8011eec:	ee07 0a90 	vmov	s15, r0
 8011ef0:	4ada      	ldr	r2, [pc, #872]	; (801225c <forward_cast+0x3e60>)
 8011ef2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011ef6:	4bda      	ldr	r3, [pc, #872]	; (8012260 <forward_cast+0x3e64>)
 8011ef8:	ee17 0a90 	vmov	r0, s15
 8011efc:	f7fe b8f1 	b.w	80100e2 <forward_cast+0x1ce6>
 8011f00:	f9b5 0000 	ldrsh.w	r0, [r5]
 8011f04:	f7fe b8ed 	b.w	80100e2 <forward_cast+0x1ce6>
 8011f08:	f995 0000 	ldrsb.w	r0, [r5]
 8011f0c:	f7fe b938 	b.w	8010180 <forward_cast+0x1d84>
 8011f10:	f995 0000 	ldrsb.w	r0, [r5]
 8011f14:	f7fe b8e5 	b.w	80100e2 <forward_cast+0x1ce6>
 8011f18:	edd5 7a00 	vldr	s15, [r5]
 8011f1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011f20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011f24:	ee17 0a90 	vmov	r0, s15
 8011f28:	f7fe b8db 	b.w	80100e2 <forward_cast+0x1ce6>
 8011f2c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8011f30:	f7ee fafe 	bl	8000530 <__aeabi_l2f>
 8011f34:	ee07 0a90 	vmov	s15, r0
 8011f38:	4bc9      	ldr	r3, [pc, #804]	; (8012260 <forward_cast+0x3e64>)
 8011f3a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011f3e:	4ac9      	ldr	r2, [pc, #804]	; (8012264 <forward_cast+0x3e68>)
 8011f40:	ee17 0a90 	vmov	r0, s15
 8011f44:	f7fe b91c 	b.w	8010180 <forward_cast+0x1d84>
 8011f48:	7828      	ldrb	r0, [r5, #0]
 8011f4a:	f7fe b919 	b.w	8010180 <forward_cast+0x1d84>
 8011f4e:	e9d5 0100 	ldrd	r0, r1, [r5]
 8011f52:	f7ee fae5 	bl	8000520 <__aeabi_ul2f>
 8011f56:	ee07 0a90 	vmov	s15, r0
 8011f5a:	4ac2      	ldr	r2, [pc, #776]	; (8012264 <forward_cast+0x3e68>)
 8011f5c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011f60:	4bbf      	ldr	r3, [pc, #764]	; (8012260 <forward_cast+0x3e64>)
 8011f62:	ee17 0a90 	vmov	r0, s15
 8011f66:	f7fe b90b 	b.w	8010180 <forward_cast+0x1d84>
 8011f6a:	f9b5 0000 	ldrsh.w	r0, [r5]
 8011f6e:	f7fe b907 	b.w	8010180 <forward_cast+0x1d84>
 8011f72:	e9d5 0100 	ldrd	r0, r1, [r5]
 8011f76:	f7ee fadb 	bl	8000530 <__aeabi_l2f>
 8011f7a:	ee07 0a90 	vmov	s15, r0
 8011f7e:	4bb9      	ldr	r3, [pc, #740]	; (8012264 <forward_cast+0x3e68>)
 8011f80:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011f84:	4ab6      	ldr	r2, [pc, #728]	; (8012260 <forward_cast+0x3e64>)
 8011f86:	ee17 0a90 	vmov	r0, s15
 8011f8a:	f7fe b95d 	b.w	8010248 <forward_cast+0x1e4c>
 8011f8e:	7828      	ldrb	r0, [r5, #0]
 8011f90:	f7fe b95a 	b.w	8010248 <forward_cast+0x1e4c>
 8011f94:	e9d5 0100 	ldrd	r0, r1, [r5]
 8011f98:	f7ee fac2 	bl	8000520 <__aeabi_ul2f>
 8011f9c:	ee07 0a90 	vmov	s15, r0
 8011fa0:	4aaf      	ldr	r2, [pc, #700]	; (8012260 <forward_cast+0x3e64>)
 8011fa2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011fa6:	4baf      	ldr	r3, [pc, #700]	; (8012264 <forward_cast+0x3e68>)
 8011fa8:	ee17 0a90 	vmov	r0, s15
 8011fac:	f7fe b94c 	b.w	8010248 <forward_cast+0x1e4c>
 8011fb0:	f9b5 0000 	ldrsh.w	r0, [r5]
 8011fb4:	f7fe b948 	b.w	8010248 <forward_cast+0x1e4c>
 8011fb8:	e9d5 0100 	ldrd	r0, r1, [r5]
 8011fbc:	f7ee fab8 	bl	8000530 <__aeabi_l2f>
 8011fc0:	ee07 0a90 	vmov	s15, r0
 8011fc4:	4ba6      	ldr	r3, [pc, #664]	; (8012260 <forward_cast+0x3e64>)
 8011fc6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011fca:	4aa4      	ldr	r2, [pc, #656]	; (801225c <forward_cast+0x3e60>)
 8011fcc:	ee17 0a90 	vmov	r0, s15
 8011fd0:	f7fe b988 	b.w	80102e4 <forward_cast+0x1ee8>
 8011fd4:	7828      	ldrb	r0, [r5, #0]
 8011fd6:	f7fe b985 	b.w	80102e4 <forward_cast+0x1ee8>
 8011fda:	e9d5 0100 	ldrd	r0, r1, [r5]
 8011fde:	f7ee fa9f 	bl	8000520 <__aeabi_ul2f>
 8011fe2:	ee07 0a90 	vmov	s15, r0
 8011fe6:	4a9d      	ldr	r2, [pc, #628]	; (801225c <forward_cast+0x3e60>)
 8011fe8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011fec:	4b9c      	ldr	r3, [pc, #624]	; (8012260 <forward_cast+0x3e64>)
 8011fee:	ee17 0a90 	vmov	r0, s15
 8011ff2:	f7fe b977 	b.w	80102e4 <forward_cast+0x1ee8>
 8011ff6:	f9b5 0000 	ldrsh.w	r0, [r5]
 8011ffa:	f7fe b973 	b.w	80102e4 <forward_cast+0x1ee8>
 8011ffe:	f995 0000 	ldrsb.w	r0, [r5]
 8012002:	f7fe b921 	b.w	8010248 <forward_cast+0x1e4c>
 8012006:	edd5 7a00 	vldr	s15, [r5]
 801200a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801200e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012012:	ee17 0a90 	vmov	r0, s15
 8012016:	f7fe b917 	b.w	8010248 <forward_cast+0x1e4c>
 801201a:	e9d5 0100 	ldrd	r0, r1, [r5]
 801201e:	f7ee fa87 	bl	8000530 <__aeabi_l2f>
 8012022:	ee07 0a90 	vmov	s15, r0
 8012026:	4b8f      	ldr	r3, [pc, #572]	; (8012264 <forward_cast+0x3e68>)
 8012028:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801202c:	4a8c      	ldr	r2, [pc, #560]	; (8012260 <forward_cast+0x3e64>)
 801202e:	ee17 0a90 	vmov	r0, s15
 8012032:	f7fc bb26 	b.w	800e682 <forward_cast+0x286>
 8012036:	7828      	ldrb	r0, [r5, #0]
 8012038:	f7fd b9b8 	b.w	800f3ac <forward_cast+0xfb0>
 801203c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8012040:	f7ee fa76 	bl	8000530 <__aeabi_l2f>
 8012044:	ee07 0a90 	vmov	s15, r0
 8012048:	4b85      	ldr	r3, [pc, #532]	; (8012260 <forward_cast+0x3e64>)
 801204a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801204e:	4a83      	ldr	r2, [pc, #524]	; (801225c <forward_cast+0x3e60>)
 8012050:	ee17 0a90 	vmov	r0, s15
 8012054:	f7fe b9e5 	b.w	8010422 <forward_cast+0x2026>
 8012058:	7828      	ldrb	r0, [r5, #0]
 801205a:	f7fe b9e2 	b.w	8010422 <forward_cast+0x2026>
 801205e:	e9d5 0100 	ldrd	r0, r1, [r5]
 8012062:	f7ee fa5d 	bl	8000520 <__aeabi_ul2f>
 8012066:	ee07 0a90 	vmov	s15, r0
 801206a:	4a7c      	ldr	r2, [pc, #496]	; (801225c <forward_cast+0x3e60>)
 801206c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012070:	4b7b      	ldr	r3, [pc, #492]	; (8012260 <forward_cast+0x3e64>)
 8012072:	ee17 0a90 	vmov	r0, s15
 8012076:	f7fe b9d4 	b.w	8010422 <forward_cast+0x2026>
 801207a:	f9b5 0000 	ldrsh.w	r0, [r5]
 801207e:	f7fe b9d0 	b.w	8010422 <forward_cast+0x2026>
 8012082:	f995 0000 	ldrsb.w	r0, [r5]
 8012086:	f7fe b9cc 	b.w	8010422 <forward_cast+0x2026>
 801208a:	edd5 7a00 	vldr	s15, [r5]
 801208e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012092:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012096:	ee17 0a90 	vmov	r0, s15
 801209a:	f7fe b923 	b.w	80102e4 <forward_cast+0x1ee8>
 801209e:	e9d5 0100 	ldrd	r0, r1, [r5]
 80120a2:	f7ee fa45 	bl	8000530 <__aeabi_l2f>
 80120a6:	ee07 0a90 	vmov	s15, r0
 80120aa:	4a6c      	ldr	r2, [pc, #432]	; (801225c <forward_cast+0x3e60>)
 80120ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80120b0:	ee17 3a90 	vmov	r3, s15
 80120b4:	b299      	uxth	r1, r3
 80120b6:	4b6a      	ldr	r3, [pc, #424]	; (8012260 <forward_cast+0x3e64>)
 80120b8:	f7fc bb9e 	b.w	800e7f8 <forward_cast+0x3fc>
 80120bc:	f9b5 0000 	ldrsh.w	r0, [r5]
 80120c0:	f7fd b819 	b.w	800f0f6 <forward_cast+0xcfa>
 80120c4:	e9d5 0100 	ldrd	r0, r1, [r5]
 80120c8:	9301      	str	r3, [sp, #4]
 80120ca:	f7ee fa31 	bl	8000530 <__aeabi_l2f>
 80120ce:	ee07 0a90 	vmov	s15, r0
 80120d2:	4a64      	ldr	r2, [pc, #400]	; (8012264 <forward_cast+0x3e68>)
 80120d4:	9b01      	ldr	r3, [sp, #4]
 80120d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80120da:	ee17 0a90 	vmov	r0, s15
 80120de:	f7fe ba05 	b.w	80104ec <forward_cast+0x20f0>
 80120e2:	7828      	ldrb	r0, [r5, #0]
 80120e4:	f7fe ba02 	b.w	80104ec <forward_cast+0x20f0>
 80120e8:	e9d5 0100 	ldrd	r0, r1, [r5]
 80120ec:	9301      	str	r3, [sp, #4]
 80120ee:	f7ee fa17 	bl	8000520 <__aeabi_ul2f>
 80120f2:	ee07 0a90 	vmov	s15, r0
 80120f6:	9b01      	ldr	r3, [sp, #4]
 80120f8:	4a5a      	ldr	r2, [pc, #360]	; (8012264 <forward_cast+0x3e68>)
 80120fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80120fe:	ee17 0a90 	vmov	r0, s15
 8012102:	f7fe b9f3 	b.w	80104ec <forward_cast+0x20f0>
 8012106:	f9b5 0000 	ldrsh.w	r0, [r5]
 801210a:	f7fe b9ef 	b.w	80104ec <forward_cast+0x20f0>
 801210e:	e9d5 0100 	ldrd	r0, r1, [r5]
 8012112:	f7ee fa0d 	bl	8000530 <__aeabi_l2f>
 8012116:	ee07 0a90 	vmov	s15, r0
 801211a:	4b52      	ldr	r3, [pc, #328]	; (8012264 <forward_cast+0x3e68>)
 801211c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012120:	4a4f      	ldr	r2, [pc, #316]	; (8012260 <forward_cast+0x3e64>)
 8012122:	edcd 7a01 	vstr	s15, [sp, #4]
 8012126:	f89d 1004 	ldrb.w	r1, [sp, #4]
 801212a:	f7fe bae2 	b.w	80106f2 <forward_cast+0x22f6>
 801212e:	e9d5 0100 	ldrd	r0, r1, [r5]
 8012132:	f7ee f9f5 	bl	8000520 <__aeabi_ul2f>
 8012136:	ee07 0a90 	vmov	s15, r0
 801213a:	4a49      	ldr	r2, [pc, #292]	; (8012260 <forward_cast+0x3e64>)
 801213c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012140:	4b48      	ldr	r3, [pc, #288]	; (8012264 <forward_cast+0x3e68>)
 8012142:	edcd 7a01 	vstr	s15, [sp, #4]
 8012146:	f89d 1004 	ldrb.w	r1, [sp, #4]
 801214a:	f7fe bad2 	b.w	80106f2 <forward_cast+0x22f6>
 801214e:	e9d5 0100 	ldrd	r0, r1, [r5]
 8012152:	f7ee f9ed 	bl	8000530 <__aeabi_l2f>
 8012156:	ee07 0a90 	vmov	s15, r0
 801215a:	4b41      	ldr	r3, [pc, #260]	; (8012260 <forward_cast+0x3e64>)
 801215c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012160:	4a3e      	ldr	r2, [pc, #248]	; (801225c <forward_cast+0x3e60>)
 8012162:	ee17 0a90 	vmov	r0, s15
 8012166:	f7fc bfc6 	b.w	800f0f6 <forward_cast+0xcfa>
 801216a:	f9b5 1000 	ldrsh.w	r1, [r5]
 801216e:	ee07 1a90 	vmov	s15, r1
 8012172:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012176:	f7fc be07 	b.w	800ed88 <forward_cast+0x98c>
 801217a:	e9d5 0100 	ldrd	r0, r1, [r5]
 801217e:	f7ee f9d7 	bl	8000530 <__aeabi_l2f>
 8012182:	ee07 0a90 	vmov	s15, r0
 8012186:	4b36      	ldr	r3, [pc, #216]	; (8012260 <forward_cast+0x3e64>)
 8012188:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801218c:	4a36      	ldr	r2, [pc, #216]	; (8012268 <forward_cast+0x3e6c>)
 801218e:	ee17 0a90 	vmov	r0, s15
 8012192:	f7fd b941 	b.w	800f418 <forward_cast+0x101c>
 8012196:	7828      	ldrb	r0, [r5, #0]
 8012198:	f7fd b9aa 	b.w	800f4f0 <forward_cast+0x10f4>
 801219c:	e9d5 0100 	ldrd	r0, r1, [r5]
 80121a0:	f7ee f9c6 	bl	8000530 <__aeabi_l2f>
 80121a4:	ee07 0a90 	vmov	s15, r0
 80121a8:	4b2e      	ldr	r3, [pc, #184]	; (8012264 <forward_cast+0x3e68>)
 80121aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80121ae:	4a2b      	ldr	r2, [pc, #172]	; (801225c <forward_cast+0x3e60>)
 80121b0:	edcd 7a01 	vstr	s15, [sp, #4]
 80121b4:	f99d 1004 	ldrsb.w	r1, [sp, #4]
 80121b8:	f7fd b963 	b.w	800f482 <forward_cast+0x1086>
 80121bc:	f9b5 0000 	ldrsh.w	r0, [r5]
 80121c0:	f7fd b84d 	b.w	800f25e <forward_cast+0xe62>
 80121c4:	e9d5 0100 	ldrd	r0, r1, [r5]
 80121c8:	f7ee f9b2 	bl	8000530 <__aeabi_l2f>
 80121cc:	ee07 0a90 	vmov	s15, r0
 80121d0:	4b22      	ldr	r3, [pc, #136]	; (801225c <forward_cast+0x3e60>)
 80121d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80121d6:	4a25      	ldr	r2, [pc, #148]	; (801226c <forward_cast+0x3e70>)
 80121d8:	ee17 0a90 	vmov	r0, s15
 80121dc:	f7fe bae7 	b.w	80107ae <forward_cast+0x23b2>
 80121e0:	7828      	ldrb	r0, [r5, #0]
 80121e2:	f7fe bae4 	b.w	80107ae <forward_cast+0x23b2>
 80121e6:	e9d5 0100 	ldrd	r0, r1, [r5]
 80121ea:	f7ee f999 	bl	8000520 <__aeabi_ul2f>
 80121ee:	ee07 0a90 	vmov	s15, r0
 80121f2:	4a1e      	ldr	r2, [pc, #120]	; (801226c <forward_cast+0x3e70>)
 80121f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80121f8:	4b18      	ldr	r3, [pc, #96]	; (801225c <forward_cast+0x3e60>)
 80121fa:	ee17 0a90 	vmov	r0, s15
 80121fe:	f7fe bad6 	b.w	80107ae <forward_cast+0x23b2>
 8012202:	f9b5 0000 	ldrsh.w	r0, [r5]
 8012206:	f7fe bad2 	b.w	80107ae <forward_cast+0x23b2>
 801220a:	e9d5 0100 	ldrd	r0, r1, [r5]
 801220e:	f7ee f98f 	bl	8000530 <__aeabi_l2f>
 8012212:	ee07 0a90 	vmov	s15, r0
 8012216:	4b11      	ldr	r3, [pc, #68]	; (801225c <forward_cast+0x3e60>)
 8012218:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801221c:	4a13      	ldr	r2, [pc, #76]	; (801226c <forward_cast+0x3e70>)
 801221e:	ee17 0a90 	vmov	r0, s15
 8012222:	f7fe bb0d 	b.w	8010840 <forward_cast+0x2444>
 8012226:	7828      	ldrb	r0, [r5, #0]
 8012228:	f7fe bb0a 	b.w	8010840 <forward_cast+0x2444>
 801222c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8012230:	f7ee f976 	bl	8000520 <__aeabi_ul2f>
 8012234:	ee07 0a90 	vmov	s15, r0
 8012238:	4a0c      	ldr	r2, [pc, #48]	; (801226c <forward_cast+0x3e70>)
 801223a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801223e:	4b07      	ldr	r3, [pc, #28]	; (801225c <forward_cast+0x3e60>)
 8012240:	ee17 0a90 	vmov	r0, s15
 8012244:	f7fe bafc 	b.w	8010840 <forward_cast+0x2444>
 8012248:	f9b5 0000 	ldrsh.w	r0, [r5]
 801224c:	f7fe baf8 	b.w	8010840 <forward_cast+0x2444>
 8012250:	2300      	movs	r3, #0
 8012252:	685b      	ldr	r3, [r3, #4]
 8012254:	deff      	udf	#255	; 0xff
 8012256:	2300      	movs	r3, #0
 8012258:	681b      	ldr	r3, [r3, #0]
 801225a:	deff      	udf	#255	; 0xff
 801225c:	00042040 	.word	0x00042040
 8012260:	00041040 	.word	0x00041040
 8012264:	00841040 	.word	0x00841040
 8012268:	00040440 	.word	0x00040440
 801226c:	00060440 	.word	0x00060440

08012270 <forward_zipmap>:
 8012270:	6983      	ldr	r3, [r0, #24]
 8012272:	881a      	ldrh	r2, [r3, #0]
 8012274:	2a00      	cmp	r2, #0
 8012276:	d061      	beq.n	801233c <forward_zipmap+0xcc>
 8012278:	b470      	push	{r4, r5, r6}
 801227a:	685d      	ldr	r5, [r3, #4]
 801227c:	686b      	ldr	r3, [r5, #4]
 801227e:	b103      	cbz	r3, 8012282 <forward_zipmap+0x12>
 8012280:	681b      	ldr	r3, [r3, #0]
 8012282:	2a01      	cmp	r2, #1
 8012284:	f000 8090 	beq.w	80123a8 <forward_zipmap+0x138>
 8012288:	6929      	ldr	r1, [r5, #16]
 801228a:	2900      	cmp	r1, #0
 801228c:	f000 8088 	beq.w	80123a0 <forward_zipmap+0x130>
 8012290:	680c      	ldr	r4, [r1, #0]
 8012292:	2a02      	cmp	r2, #2
 8012294:	68d8      	ldr	r0, [r3, #12]
 8012296:	6999      	ldr	r1, [r3, #24]
 8012298:	69a3      	ldr	r3, [r4, #24]
 801229a:	68c4      	ldr	r4, [r0, #12]
 801229c:	6840      	ldr	r0, [r0, #4]
 801229e:	6889      	ldr	r1, [r1, #8]
 80122a0:	689b      	ldr	r3, [r3, #8]
 80122a2:	fb00 f404 	mul.w	r4, r0, r4
 80122a6:	f000 8082 	beq.w	80123ae <forward_zipmap+0x13e>
 80122aa:	69ea      	ldr	r2, [r5, #28]
 80122ac:	2a00      	cmp	r2, #0
 80122ae:	d079      	beq.n	80123a4 <forward_zipmap+0x134>
 80122b0:	6812      	ldr	r2, [r2, #0]
 80122b2:	6990      	ldr	r0, [r2, #24]
 80122b4:	68d5      	ldr	r5, [r2, #12]
 80122b6:	6802      	ldr	r2, [r0, #0]
 80122b8:	686d      	ldr	r5, [r5, #4]
 80122ba:	6886      	ldr	r6, [r0, #8]
 80122bc:	f3c2 12c6 	ubfx	r2, r2, #7, #7
 80122c0:	b3d4      	cbz	r4, 8012338 <forward_zipmap+0xc8>
 80122c2:	2a10      	cmp	r2, #16
 80122c4:	d03c      	beq.n	8012340 <forward_zipmap+0xd0>
 80122c6:	2a08      	cmp	r2, #8
 80122c8:	d01c      	beq.n	8012304 <forward_zipmap+0x94>
 80122ca:	2000      	movs	r0, #0
 80122cc:	4684      	mov	ip, r0
 80122ce:	e014      	b.n	80122fa <forward_zipmap+0x8a>
 80122d0:	4602      	mov	r2, r0
 80122d2:	3001      	adds	r0, #1
 80122d4:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 80122d8:	3308      	adds	r3, #8
 80122da:	f10c 0c01 	add.w	ip, ip, #1
 80122de:	ee07 2a90 	vmov	s15, r2
 80122e2:	4564      	cmp	r4, ip
 80122e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80122e8:	ee17 2a90 	vmov	r2, s15
 80122ec:	f843 2c08 	str.w	r2, [r3, #-8]
 80122f0:	f851 2b04 	ldr.w	r2, [r1], #4
 80122f4:	f843 2c04 	str.w	r2, [r3, #-4]
 80122f8:	d01e      	beq.n	8012338 <forward_zipmap+0xc8>
 80122fa:	4285      	cmp	r5, r0
 80122fc:	d1e8      	bne.n	80122d0 <forward_zipmap+0x60>
 80122fe:	2001      	movs	r0, #1
 8012300:	2200      	movs	r2, #0
 8012302:	e7e7      	b.n	80122d4 <forward_zipmap+0x64>
 8012304:	2200      	movs	r2, #0
 8012306:	4610      	mov	r0, r2
 8012308:	4295      	cmp	r5, r2
 801230a:	f100 0001 	add.w	r0, r0, #1
 801230e:	d034      	beq.n	801237a <forward_zipmap+0x10a>
 8012310:	f816 c002 	ldrb.w	ip, [r6, r2]
 8012314:	4284      	cmp	r4, r0
 8012316:	f102 0201 	add.w	r2, r2, #1
 801231a:	f103 0308 	add.w	r3, r3, #8
 801231e:	ee07 ca90 	vmov	s15, ip
 8012322:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012326:	ee17 ca90 	vmov	ip, s15
 801232a:	f843 cc08 	str.w	ip, [r3, #-8]
 801232e:	f851 cb04 	ldr.w	ip, [r1], #4
 8012332:	f843 cc04 	str.w	ip, [r3, #-4]
 8012336:	d1e7      	bne.n	8012308 <forward_zipmap+0x98>
 8012338:	bc70      	pop	{r4, r5, r6}
 801233a:	4770      	bx	lr
 801233c:	6853      	ldr	r3, [r2, #4]
 801233e:	deff      	udf	#255	; 0xff
 8012340:	2000      	movs	r0, #0
 8012342:	4684      	mov	ip, r0
 8012344:	e014      	b.n	8012370 <forward_zipmap+0x100>
 8012346:	4602      	mov	r2, r0
 8012348:	3001      	adds	r0, #1
 801234a:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 801234e:	3308      	adds	r3, #8
 8012350:	f10c 0c01 	add.w	ip, ip, #1
 8012354:	ee07 2a90 	vmov	s15, r2
 8012358:	4564      	cmp	r4, ip
 801235a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801235e:	ee17 2a90 	vmov	r2, s15
 8012362:	f843 2c08 	str.w	r2, [r3, #-8]
 8012366:	f851 2b04 	ldr.w	r2, [r1], #4
 801236a:	f843 2c04 	str.w	r2, [r3, #-4]
 801236e:	d0e3      	beq.n	8012338 <forward_zipmap+0xc8>
 8012370:	4285      	cmp	r5, r0
 8012372:	d1e8      	bne.n	8012346 <forward_zipmap+0xd6>
 8012374:	2001      	movs	r0, #1
 8012376:	2200      	movs	r2, #0
 8012378:	e7e7      	b.n	801234a <forward_zipmap+0xda>
 801237a:	7832      	ldrb	r2, [r6, #0]
 801237c:	4284      	cmp	r4, r0
 801237e:	f103 0308 	add.w	r3, r3, #8
 8012382:	ee07 2a90 	vmov	s15, r2
 8012386:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801238a:	ee17 2a90 	vmov	r2, s15
 801238e:	f843 2c08 	str.w	r2, [r3, #-8]
 8012392:	f851 2b04 	ldr.w	r2, [r1], #4
 8012396:	f843 2c04 	str.w	r2, [r3, #-4]
 801239a:	d0cd      	beq.n	8012338 <forward_zipmap+0xc8>
 801239c:	2201      	movs	r2, #1
 801239e:	e7b3      	b.n	8012308 <forward_zipmap+0x98>
 80123a0:	698b      	ldr	r3, [r1, #24]
 80123a2:	deff      	udf	#255	; 0xff
 80123a4:	68d3      	ldr	r3, [r2, #12]
 80123a6:	deff      	udf	#255	; 0xff
 80123a8:	2300      	movs	r3, #0
 80123aa:	685b      	ldr	r3, [r3, #4]
 80123ac:	deff      	udf	#255	; 0xff
 80123ae:	2300      	movs	r3, #0
 80123b0:	685b      	ldr	r3, [r3, #4]
 80123b2:	deff      	udf	#255	; 0xff

080123b4 <svc_ovo_output>:
 80123b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80123b8:	4604      	mov	r4, r0
 80123ba:	b08d      	sub	sp, #52	; 0x34
 80123bc:	4618      	mov	r0, r3
 80123be:	68a6      	ldr	r6, [r4, #8]
 80123c0:	9307      	str	r3, [sp, #28]
 80123c2:	f8d4 b028 	ldr.w	fp, [r4, #40]	; 0x28
 80123c6:	e9cd 1205 	strd	r1, r2, [sp, #20]
 80123ca:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80123cc:	9108      	str	r1, [sp, #32]
 80123ce:	1e71      	subs	r1, r6, #1
 80123d0:	fb06 f301 	mul.w	r3, r6, r1
 80123d4:	9103      	str	r1, [sp, #12]
 80123d6:	eb00 0c83 	add.w	ip, r0, r3, lsl #2
 80123da:	eb00 0ec3 	add.w	lr, r0, r3, lsl #3
 80123de:	2900      	cmp	r1, #0
 80123e0:	f000 80ae 	beq.w	8012540 <svc_ovo_output+0x18c>
 80123e4:	2e00      	cmp	r6, #0
 80123e6:	d050      	beq.n	801248a <svc_ovo_output+0xd6>
 80123e8:	00b1      	lsls	r1, r6, #2
 80123ea:	46b1      	mov	r9, r6
 80123ec:	46a0      	mov	r8, r4
 80123ee:	9002      	str	r0, [sp, #8]
 80123f0:	9104      	str	r1, [sp, #16]
 80123f2:	2100      	movs	r1, #0
 80123f4:	9309      	str	r3, [sp, #36]	; 0x24
 80123f6:	468a      	mov	sl, r1
 80123f8:	e9cd ec00 	strd	lr, ip, [sp]
 80123fc:	e9cd ce0a 	strd	ip, lr, [sp, #40]	; 0x28
 8012400:	4656      	mov	r6, sl
 8012402:	9d05      	ldr	r5, [sp, #20]
 8012404:	f10a 0a01 	add.w	sl, sl, #1
 8012408:	9f02      	ldr	r7, [sp, #8]
 801240a:	2400      	movs	r4, #0
 801240c:	e9dd ec00 	ldrd	lr, ip, [sp]
 8012410:	f898 3024 	ldrb.w	r3, [r8, #36]	; 0x24
 8012414:	f8d8 2034 	ldr.w	r2, [r8, #52]	; 0x34
 8012418:	2b08      	cmp	r3, #8
 801241a:	f000 809f 	beq.w	801255c <svc_ovo_output+0x1a8>
 801241e:	2b10      	cmp	r3, #16
 8012420:	bf0c      	ite	eq
 8012422:	f832 0014 	ldrheq.w	r0, [r2, r4, lsl #1]
 8012426:	f852 0024 	ldrne.w	r0, [r2, r4, lsl #2]
 801242a:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8012560 <svc_ovo_output+0x1ac>
 801242e:	b178      	cbz	r0, 8012450 <svc_ovo_output+0x9c>
 8012430:	4629      	mov	r1, r5
 8012432:	465a      	mov	r2, fp
 8012434:	2300      	movs	r3, #0
 8012436:	3301      	adds	r3, #1
 8012438:	ecf2 6a01 	vldmia	r2!, {s13}
 801243c:	ecb1 7a01 	vldmia	r1!, {s14}
 8012440:	4283      	cmp	r3, r0
 8012442:	eee6 7a87 	vfma.f32	s15, s13, s14
 8012446:	d1f6      	bne.n	8012436 <svc_ovo_output+0x82>
 8012448:	eb0b 0b83 	add.w	fp, fp, r3, lsl #2
 801244c:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 8012450:	42a6      	cmp	r6, r4
 8012452:	ece7 7a01 	vstmia	r7!, {s15}
 8012456:	f84c 4b04 	str.w	r4, [ip], #4
 801245a:	f104 0401 	add.w	r4, r4, #1
 801245e:	d272      	bcs.n	8012546 <svc_ovo_output+0x192>
 8012460:	45a1      	cmp	r9, r4
 8012462:	f84e 6b04 	str.w	r6, [lr], #4
 8012466:	d1d3      	bne.n	8012410 <svc_ovo_output+0x5c>
 8012468:	9b04      	ldr	r3, [sp, #16]
 801246a:	9a02      	ldr	r2, [sp, #8]
 801246c:	441a      	add	r2, r3
 801246e:	9202      	str	r2, [sp, #8]
 8012470:	9a01      	ldr	r2, [sp, #4]
 8012472:	441a      	add	r2, r3
 8012474:	9201      	str	r2, [sp, #4]
 8012476:	9a00      	ldr	r2, [sp, #0]
 8012478:	441a      	add	r2, r3
 801247a:	9b03      	ldr	r3, [sp, #12]
 801247c:	4553      	cmp	r3, sl
 801247e:	9200      	str	r2, [sp, #0]
 8012480:	d1be      	bne.n	8012400 <svc_ovo_output+0x4c>
 8012482:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012484:	464e      	mov	r6, r9
 8012486:	e9dd ce0a 	ldrd	ip, lr, [sp, #40]	; 0x28
 801248a:	2700      	movs	r7, #0
 801248c:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8012490:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8012494:	46b9      	mov	r9, r7
 8012496:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801249a:	f109 0901 	add.w	r9, r9, #1
 801249e:	454e      	cmp	r6, r9
 80124a0:	d918      	bls.n	80124d4 <svc_ovo_output+0x120>
 80124a2:	464c      	mov	r4, r9
 80124a4:	b19b      	cbz	r3, 80124ce <svc_ovo_output+0x11a>
 80124a6:	f1ae 0104 	sub.w	r1, lr, #4
 80124aa:	4650      	mov	r0, sl
 80124ac:	2200      	movs	r2, #0
 80124ae:	e003      	b.n	80124b8 <svc_ovo_output+0x104>
 80124b0:	3201      	adds	r2, #1
 80124b2:	3004      	adds	r0, #4
 80124b4:	4293      	cmp	r3, r2
 80124b6:	d00a      	beq.n	80124ce <svc_ovo_output+0x11a>
 80124b8:	f851 5f04 	ldr.w	r5, [r1, #4]!
 80124bc:	42a5      	cmp	r5, r4
 80124be:	d1f7      	bne.n	80124b0 <svc_ovo_output+0xfc>
 80124c0:	f85c 5022 	ldr.w	r5, [ip, r2, lsl #2]
 80124c4:	42bd      	cmp	r5, r7
 80124c6:	d1f3      	bne.n	80124b0 <svc_ovo_output+0xfc>
 80124c8:	6802      	ldr	r2, [r0, #0]
 80124ca:	f848 2b04 	str.w	r2, [r8], #4
 80124ce:	3401      	adds	r4, #1
 80124d0:	42a6      	cmp	r6, r4
 80124d2:	d1e7      	bne.n	80124a4 <svc_ovo_output+0xf0>
 80124d4:	45cb      	cmp	fp, r9
 80124d6:	f107 0701 	add.w	r7, r7, #1
 80124da:	d1de      	bne.n	801249a <svc_ovo_output+0xe6>
 80124dc:	f04f 0800 	mov.w	r8, #0
 80124e0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80124e4:	e9dd ba06 	ldrd	fp, sl, [sp, #24]
 80124e8:	4647      	mov	r7, r8
 80124ea:	f108 0801 	add.w	r8, r8, #1
 80124ee:	45b0      	cmp	r8, r6
 80124f0:	d223      	bcs.n	801253a <svc_ovo_output+0x186>
 80124f2:	4644      	mov	r4, r8
 80124f4:	b1f3      	cbz	r3, 8012534 <svc_ovo_output+0x180>
 80124f6:	f1ac 0104 	sub.w	r1, ip, #4
 80124fa:	4650      	mov	r0, sl
 80124fc:	2200      	movs	r2, #0
 80124fe:	e003      	b.n	8012508 <svc_ovo_output+0x154>
 8012500:	3201      	adds	r2, #1
 8012502:	3004      	adds	r0, #4
 8012504:	4293      	cmp	r3, r2
 8012506:	d015      	beq.n	8012534 <svc_ovo_output+0x180>
 8012508:	f851 5f04 	ldr.w	r5, [r1, #4]!
 801250c:	42a5      	cmp	r5, r4
 801250e:	d1f7      	bne.n	8012500 <svc_ovo_output+0x14c>
 8012510:	f85e 5022 	ldr.w	r5, [lr, r2, lsl #2]
 8012514:	42bd      	cmp	r5, r7
 8012516:	d1f3      	bne.n	8012500 <svc_ovo_output+0x14c>
 8012518:	465a      	mov	r2, fp
 801251a:	ecf9 7a01 	vldmia	r9!, {s15}
 801251e:	ed90 7a00 	vldr	s14, [r0]
 8012522:	ecf2 6a01 	vldmia	r2!, {s13}
 8012526:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801252a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801252e:	edcb 7a00 	vstr	s15, [fp]
 8012532:	4693      	mov	fp, r2
 8012534:	3401      	adds	r4, #1
 8012536:	42a6      	cmp	r6, r4
 8012538:	d1dc      	bne.n	80124f4 <svc_ovo_output+0x140>
 801253a:	9a03      	ldr	r2, [sp, #12]
 801253c:	4542      	cmp	r2, r8
 801253e:	d1d3      	bne.n	80124e8 <svc_ovo_output+0x134>
 8012540:	b00d      	add	sp, #52	; 0x34
 8012542:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012546:	45a1      	cmp	r9, r4
 8012548:	f84e ab04 	str.w	sl, [lr], #4
 801254c:	d08c      	beq.n	8012468 <svc_ovo_output+0xb4>
 801254e:	f898 3024 	ldrb.w	r3, [r8, #36]	; 0x24
 8012552:	f8d8 2034 	ldr.w	r2, [r8, #52]	; 0x34
 8012556:	2b08      	cmp	r3, #8
 8012558:	f47f af61 	bne.w	801241e <svc_ovo_output+0x6a>
 801255c:	5d10      	ldrb	r0, [r2, r4]
 801255e:	e764      	b.n	801242a <svc_ovo_output+0x76>
 8012560:	00000000 	.word	0x00000000

08012564 <svc_ovo_classification_vote>:
 8012564:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012568:	6884      	ldr	r4, [r0, #8]
 801256a:	4606      	mov	r6, r0
 801256c:	4692      	mov	sl, r2
 801256e:	b3bc      	cbz	r4, 80125e0 <svc_ovo_classification_vote+0x7c>
 8012570:	ea4f 0884 	mov.w	r8, r4, lsl #2
 8012574:	4618      	mov	r0, r3
 8012576:	460d      	mov	r5, r1
 8012578:	2100      	movs	r1, #0
 801257a:	4642      	mov	r2, r8
 801257c:	f000 fd1e 	bl	8012fbc <memset>
 8012580:	2c01      	cmp	r4, #1
 8012582:	4603      	mov	r3, r0
 8012584:	d02c      	beq.n	80125e0 <svc_ovo_classification_vote+0x7c>
 8012586:	4480      	add	r8, r0
 8012588:	f1a8 0904 	sub.w	r9, r8, #4
 801258c:	4680      	mov	r8, r0
 801258e:	2001      	movs	r0, #1
 8012590:	4641      	mov	r1, r8
 8012592:	f108 0804 	add.w	r8, r8, #4
 8012596:	4684      	mov	ip, r0
 8012598:	462a      	mov	r2, r5
 801259a:	46c6      	mov	lr, r8
 801259c:	e008      	b.n	80125b0 <svc_ovo_classification_vote+0x4c>
 801259e:	680f      	ldr	r7, [r1, #0]
 80125a0:	f10c 0c01 	add.w	ip, ip, #1
 80125a4:	f10e 0e04 	add.w	lr, lr, #4
 80125a8:	3701      	adds	r7, #1
 80125aa:	4564      	cmp	r4, ip
 80125ac:	600f      	str	r7, [r1, #0]
 80125ae:	d911      	bls.n	80125d4 <svc_ovo_classification_vote+0x70>
 80125b0:	ecf2 7a01 	vldmia	r2!, {s15}
 80125b4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80125b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125bc:	dcef      	bgt.n	801259e <svc_ovo_classification_vote+0x3a>
 80125be:	f8de 7000 	ldr.w	r7, [lr]
 80125c2:	f10c 0c01 	add.w	ip, ip, #1
 80125c6:	f10e 0e04 	add.w	lr, lr, #4
 80125ca:	3701      	adds	r7, #1
 80125cc:	4564      	cmp	r4, ip
 80125ce:	f84e 7c04 	str.w	r7, [lr, #-4]
 80125d2:	d8ed      	bhi.n	80125b0 <svc_ovo_classification_vote+0x4c>
 80125d4:	3001      	adds	r0, #1
 80125d6:	eba9 0101 	sub.w	r1, r9, r1
 80125da:	4284      	cmp	r4, r0
 80125dc:	440d      	add	r5, r1
 80125de:	d1d7      	bne.n	8012590 <svc_ovo_classification_vote+0x2c>
 80125e0:	f896 1025 	ldrb.w	r1, [r6, #37]	; 0x25
 80125e4:	6c32      	ldr	r2, [r6, #64]	; 0x40
 80125e6:	2908      	cmp	r1, #8
 80125e8:	d041      	beq.n	801266e <svc_ovo_classification_vote+0x10a>
 80125ea:	2910      	cmp	r1, #16
 80125ec:	d01f      	beq.n	801262e <svc_ovo_classification_vote+0xca>
 80125ee:	edd3 7a00 	vldr	s15, [r3]
 80125f2:	2c01      	cmp	r4, #1
 80125f4:	6811      	ldr	r1, [r2, #0]
 80125f6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80125fa:	d914      	bls.n	8012626 <svc_ovo_classification_vote+0xc2>
 80125fc:	1f18      	subs	r0, r3, #4
 80125fe:	3204      	adds	r2, #4
 8012600:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8012604:	edd3 7a01 	vldr	s15, [r3, #4]
 8012608:	3304      	adds	r3, #4
 801260a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801260e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012612:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012616:	d502      	bpl.n	801261e <svc_ovo_classification_vote+0xba>
 8012618:	eeb0 7a67 	vmov.f32	s14, s15
 801261c:	6811      	ldr	r1, [r2, #0]
 801261e:	429c      	cmp	r4, r3
 8012620:	f102 0204 	add.w	r2, r2, #4
 8012624:	d1ee      	bne.n	8012604 <svc_ovo_classification_vote+0xa0>
 8012626:	f8ca 1000 	str.w	r1, [sl]
 801262a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801262e:	edd3 7a00 	vldr	s15, [r3]
 8012632:	2c01      	cmp	r4, #1
 8012634:	8811      	ldrh	r1, [r2, #0]
 8012636:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801263a:	d9f4      	bls.n	8012626 <svc_ovo_classification_vote+0xc2>
 801263c:	1f18      	subs	r0, r3, #4
 801263e:	3202      	adds	r2, #2
 8012640:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8012644:	edd3 7a01 	vldr	s15, [r3, #4]
 8012648:	3304      	adds	r3, #4
 801264a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801264e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012652:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012656:	dd02      	ble.n	801265e <svc_ovo_classification_vote+0xfa>
 8012658:	eeb0 7a67 	vmov.f32	s14, s15
 801265c:	8811      	ldrh	r1, [r2, #0]
 801265e:	42a3      	cmp	r3, r4
 8012660:	f102 0202 	add.w	r2, r2, #2
 8012664:	d1ee      	bne.n	8012644 <svc_ovo_classification_vote+0xe0>
 8012666:	f8ca 1000 	str.w	r1, [sl]
 801266a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801266e:	edd3 7a00 	vldr	s15, [r3]
 8012672:	2c01      	cmp	r4, #1
 8012674:	7811      	ldrb	r1, [r2, #0]
 8012676:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801267a:	d9d4      	bls.n	8012626 <svc_ovo_classification_vote+0xc2>
 801267c:	1f18      	subs	r0, r3, #4
 801267e:	3201      	adds	r2, #1
 8012680:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8012684:	edd3 7a01 	vldr	s15, [r3, #4]
 8012688:	3304      	adds	r3, #4
 801268a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801268e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012692:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012696:	dd02      	ble.n	801269e <svc_ovo_classification_vote+0x13a>
 8012698:	eeb0 7a67 	vmov.f32	s14, s15
 801269c:	7811      	ldrb	r1, [r2, #0]
 801269e:	42a3      	cmp	r3, r4
 80126a0:	f102 0201 	add.w	r2, r2, #1
 80126a4:	d1ee      	bne.n	8012684 <svc_ovo_classification_vote+0x120>
 80126a6:	f8ca 1000 	str.w	r1, [sl]
 80126aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80126ae:	bf00      	nop

080126b0 <svc_iter_prob_estimate>:
 80126b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80126b4:	b089      	sub	sp, #36	; 0x24
 80126b6:	6883      	ldr	r3, [r0, #8]
 80126b8:	4615      	mov	r5, r2
 80126ba:	fb03 f903 	mul.w	r9, r3, r3
 80126be:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80126c0:	9304      	str	r3, [sp, #16]
 80126c2:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 80126c6:	9203      	str	r2, [sp, #12]
 80126c8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80126ca:	eb02 09c9 	add.w	r9, r2, r9, lsl #3
 80126ce:	2b00      	cmp	r3, #0
 80126d0:	f000 8155 	beq.w	801297e <svc_iter_prob_estimate+0x2ce>
 80126d4:	2b01      	cmp	r3, #1
 80126d6:	f000 8155 	beq.w	8012984 <svc_iter_prob_estimate+0x2d4>
 80126da:	f103 0b01 	add.w	fp, r3, #1
 80126de:	3204      	adds	r2, #4
 80126e0:	f103 3eff 	add.w	lr, r3, #4294967295
 80126e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80126e8:	ea4f 088b 	mov.w	r8, fp, lsl #2
 80126ec:	f8cd 9008 	str.w	r9, [sp, #8]
 80126f0:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80126f4:	f04f 0c01 	mov.w	ip, #1
 80126f8:	f1a8 0604 	sub.w	r6, r8, #4
 80126fc:	f1a8 0a08 	sub.w	sl, r8, #8
 8012700:	4617      	mov	r7, r2
 8012702:	4699      	mov	r9, r3
 8012704:	9201      	str	r2, [sp, #4]
 8012706:	4608      	mov	r0, r1
 8012708:	eb0a 0207 	add.w	r2, sl, r7
 801270c:	463c      	mov	r4, r7
 801270e:	4663      	mov	r3, ip
 8012710:	edd0 7a00 	vldr	s15, [r0]
 8012714:	3301      	adds	r3, #1
 8012716:	ece4 7a01 	vstmia	r4!, {s15}
 801271a:	4599      	cmp	r9, r3
 801271c:	ecf0 7a01 	vldmia	r0!, {s15}
 8012720:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012724:	edc2 7a00 	vstr	s15, [r2]
 8012728:	4432      	add	r2, r6
 801272a:	d8f1      	bhi.n	8012710 <svc_iter_prob_estimate+0x60>
 801272c:	f10c 0c01 	add.w	ip, ip, #1
 8012730:	4471      	add	r1, lr
 8012732:	4447      	add	r7, r8
 8012734:	f1ae 0e04 	sub.w	lr, lr, #4
 8012738:	45e1      	cmp	r9, ip
 801273a:	d1e4      	bne.n	8012706 <svc_iter_prob_estimate+0x56>
 801273c:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8012740:	eddd 7a04 	vldr	s15, [sp, #16]
 8012744:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012748:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801274c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801274e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012752:	9b03      	ldr	r3, [sp, #12]
 8012754:	f1aa 0004 	sub.w	r0, sl, #4
 8012758:	f04f 0e00 	mov.w	lr, #0
 801275c:	f8cd 9018 	str.w	r9, [sp, #24]
 8012760:	461e      	mov	r6, r3
 8012762:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8012766:	1882      	adds	r2, r0, r2
 8012768:	eb03 0b00 	add.w	fp, r3, r0
 801276c:	eddf 6a88 	vldr	s13, [pc, #544]	; 8012990 <svc_iter_prob_estimate+0x2e0>
 8012770:	9202      	str	r2, [sp, #8]
 8012772:	461a      	mov	r2, r3
 8012774:	f8dd 9010 	ldr.w	r9, [sp, #16]
 8012778:	4677      	mov	r7, lr
 801277a:	3204      	adds	r2, #4
 801277c:	46ac      	mov	ip, r5
 801277e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8012782:	9205      	str	r2, [sp, #20]
 8012784:	f1aa 0208 	sub.w	r2, sl, #8
 8012788:	9507      	str	r5, [sp, #28]
 801278a:	9201      	str	r2, [sp, #4]
 801278c:	ecac 6a01 	vstmia	ip!, {s12}
 8012790:	edc3 6a00 	vstr	s13, [r3]
 8012794:	b34f      	cbz	r7, 80127ea <svc_iter_prob_estimate+0x13a>
 8012796:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012798:	2f01      	cmp	r7, #1
 801279a:	9c03      	ldr	r4, [sp, #12]
 801279c:	eb02 0287 	add.w	r2, r2, r7, lsl #2
 80127a0:	edd2 7a00 	vldr	s15, [r2]
 80127a4:	eb04 0287 	add.w	r2, r4, r7, lsl #2
 80127a8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80127ac:	edc3 7a00 	vstr	s15, [r3]
 80127b0:	6811      	ldr	r1, [r2, #0]
 80127b2:	eb04 028e 	add.w	r2, r4, lr, lsl #2
 80127b6:	6011      	str	r1, [r2, #0]
 80127b8:	ea4f 0187 	mov.w	r1, r7, lsl #2
 80127bc:	ea4f 028e 	mov.w	r2, lr, lsl #2
 80127c0:	d013      	beq.n	80127ea <svc_iter_prob_estimate+0x13a>
 80127c2:	9c02      	ldr	r4, [sp, #8]
 80127c4:	4421      	add	r1, r4
 80127c6:	9c05      	ldr	r4, [sp, #20]
 80127c8:	4422      	add	r2, r4
 80127ca:	465c      	mov	r4, fp
 80127cc:	ed91 7a00 	vldr	s14, [r1]
 80127d0:	4401      	add	r1, r0
 80127d2:	edd3 7a00 	vldr	s15, [r3]
 80127d6:	eee7 7a07 	vfma.f32	s15, s14, s14
 80127da:	edc3 7a00 	vstr	s15, [r3]
 80127de:	6825      	ldr	r5, [r4, #0]
 80127e0:	4404      	add	r4, r0
 80127e2:	f842 5b04 	str.w	r5, [r2], #4
 80127e6:	42b2      	cmp	r2, r6
 80127e8:	d1f0      	bne.n	80127cc <svc_iter_prob_estimate+0x11c>
 80127ea:	3701      	adds	r7, #1
 80127ec:	45b9      	cmp	r9, r7
 80127ee:	d020      	beq.n	8012832 <svc_iter_prob_estimate+0x182>
 80127f0:	44ce      	add	lr, r9
 80127f2:	9a01      	ldr	r2, [sp, #4]
 80127f4:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80127f6:	1d34      	adds	r4, r6, #4
 80127f8:	4442      	add	r2, r8
 80127fa:	4641      	mov	r1, r8
 80127fc:	eb05 058e 	add.w	r5, r5, lr, lsl #2
 8012800:	ed92 7a00 	vldr	s14, [r2]
 8012804:	edd3 7a00 	vldr	s15, [r3]
 8012808:	eee7 7a07 	vfma.f32	s15, s14, s14
 801280c:	edc3 7a00 	vstr	s15, [r3]
 8012810:	edd2 7a00 	vldr	s15, [r2]
 8012814:	4402      	add	r2, r0
 8012816:	ecb1 7a01 	vldmia	r1!, {s14}
 801281a:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 801281e:	42a9      	cmp	r1, r5
 8012820:	ece4 7a01 	vstmia	r4!, {s15}
 8012824:	d1ec      	bne.n	8012800 <svc_iter_prob_estimate+0x150>
 8012826:	4453      	add	r3, sl
 8012828:	44d0      	add	r8, sl
 801282a:	4456      	add	r6, sl
 801282c:	f10b 0b04 	add.w	fp, fp, #4
 8012830:	e7ac      	b.n	801278c <svc_iter_prob_estimate+0xdc>
 8012832:	e9dd 9506 	ldrd	r9, r5, [sp, #24]
 8012836:	eddd 7a04 	vldr	s15, [sp, #16]
 801283a:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 801283e:	9b04      	ldr	r3, [sp, #16]
 8012840:	eeb8 3ae7 	vcvt.f32.s32	s6, s15
 8012844:	eddf 7a53 	vldr	s15, [pc, #332]	; 8012994 <svc_iter_prob_estimate+0x2e4>
 8012848:	ebc3 7683 	rsb	r6, r3, r3, lsl #30
 801284c:	9a03      	ldr	r2, [sp, #12]
 801284e:	ea4f 0883 	mov.w	r8, r3, lsl #2
 8012852:	ed9f 4a51 	vldr	s8, [pc, #324]	; 8012998 <svc_iter_prob_estimate+0x2e8>
 8012856:	eec7 3a83 	vdiv.f32	s7, s15, s6
 801285a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801285e:	eb05 0b83 	add.w	fp, r5, r3, lsl #2
 8012862:	eddf 4a4b 	vldr	s9, [pc, #300]	; 8012990 <svc_iter_prob_estimate+0x2e0>
 8012866:	eb09 0783 	add.w	r7, r9, r3, lsl #2
 801286a:	2364      	movs	r3, #100	; 0x64
 801286c:	00b6      	lsls	r6, r6, #2
 801286e:	9202      	str	r2, [sp, #8]
 8012870:	9301      	str	r3, [sp, #4]
 8012872:	9b04      	ldr	r3, [sp, #16]
 8012874:	2b00      	cmp	r3, #0
 8012876:	d077      	beq.n	8012968 <svc_iter_prob_estimate+0x2b8>
 8012878:	462c      	mov	r4, r5
 801287a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8012990 <svc_iter_prob_estimate+0x2e0>
 801287e:	4648      	mov	r0, r9
 8012880:	9902      	ldr	r1, [sp, #8]
 8012882:	eddf 7a43 	vldr	s15, [pc, #268]	; 8012990 <svc_iter_prob_estimate+0x2e0>
 8012886:	1873      	adds	r3, r6, r1
 8012888:	462a      	mov	r2, r5
 801288a:	ece0 4a01 	vstmia	r0!, {s9}
 801288e:	ecf3 6a01 	vldmia	r3!, {s13}
 8012892:	ecb2 7a01 	vldmia	r2!, {s14}
 8012896:	428b      	cmp	r3, r1
 8012898:	eee6 7a87 	vfma.f32	s15, s13, s14
 801289c:	ed40 7a01 	vstr	s15, [r0, #-4]
 80128a0:	d1f5      	bne.n	801288e <svc_iter_prob_estimate+0x1de>
 80128a2:	ecb4 7a01 	vldmia	r4!, {s14}
 80128a6:	eb03 0108 	add.w	r1, r3, r8
 80128aa:	45a3      	cmp	fp, r4
 80128ac:	eee7 5a87 	vfma.f32	s11, s15, s14
 80128b0:	d1e7      	bne.n	8012882 <svc_iter_prob_estimate+0x1d2>
 80128b2:	464b      	mov	r3, r9
 80128b4:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8012990 <svc_iter_prob_estimate+0x2e0>
 80128b8:	ecf3 7a01 	vldmia	r3!, {s15}
 80128bc:	ee77 7ae5 	vsub.f32	s15, s15, s11
 80128c0:	42bb      	cmp	r3, r7
 80128c2:	eef0 7ae7 	vabs.f32	s15, s15
 80128c6:	fe87 7a27 	vmaxnm.f32	s14, s14, s15
 80128ca:	d1f5      	bne.n	80128b8 <svc_iter_prob_estimate+0x208>
 80128cc:	eeb4 7ae3 	vcmpe.f32	s14, s7
 80128d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80128d4:	d445      	bmi.n	8012962 <svc_iter_prob_estimate+0x2b2>
 80128d6:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80128da:	46ae      	mov	lr, r5
 80128dc:	464c      	mov	r4, r9
 80128de:	9802      	ldr	r0, [sp, #8]
 80128e0:	edd4 6a00 	vldr	s13, [r4]
 80128e4:	1831      	adds	r1, r6, r0
 80128e6:	ed9c 7a00 	vldr	s14, [ip]
 80128ea:	462a      	mov	r2, r5
 80128ec:	ee75 6ae6 	vsub.f32	s13, s11, s13
 80128f0:	edde 7a00 	vldr	s15, [lr]
 80128f4:	ee37 7a04 	vadd.f32	s14, s14, s8
 80128f8:	464b      	mov	r3, r9
 80128fa:	ee86 6a87 	vdiv.f32	s12, s13, s14
 80128fe:	ee77 7a86 	vadd.f32	s15, s15, s12
 8012902:	ee76 6a05 	vadd.f32	s13, s12, s10
 8012906:	ecee 7a01 	vstmia	lr!, {s15}
 801290a:	ecf4 7a01 	vldmia	r4!, {s15}
 801290e:	ee66 2aa6 	vmul.f32	s5, s13, s13
 8012912:	ed9c 2a00 	vldr	s4, [ip]
 8012916:	ee85 7a26 	vdiv.f32	s14, s10, s13
 801291a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801291e:	eef0 6a65 	vmov.f32	s13, s11
 8012922:	eee2 7a06 	vfma.f32	s15, s4, s12
 8012926:	eee7 6a86 	vfma.f32	s13, s15, s12
 801292a:	eec6 5aa2 	vdiv.f32	s11, s13, s5
 801292e:	ecf1 6a01 	vldmia	r1!, {s13}
 8012932:	edd3 7a00 	vldr	s15, [r3]
 8012936:	4281      	cmp	r1, r0
 8012938:	eee6 7a86 	vfma.f32	s15, s13, s12
 801293c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012940:	ece3 7a01 	vstmia	r3!, {s15}
 8012944:	edd2 7a00 	vldr	s15, [r2]
 8012948:	ee67 7a87 	vmul.f32	s15, s15, s14
 801294c:	ece2 7a01 	vstmia	r2!, {s15}
 8012950:	d1ed      	bne.n	801292e <svc_iter_prob_estimate+0x27e>
 8012952:	42a7      	cmp	r7, r4
 8012954:	4440      	add	r0, r8
 8012956:	44d4      	add	ip, sl
 8012958:	d1c2      	bne.n	80128e0 <svc_iter_prob_estimate+0x230>
 801295a:	9b01      	ldr	r3, [sp, #4]
 801295c:	3b01      	subs	r3, #1
 801295e:	9301      	str	r3, [sp, #4]
 8012960:	d187      	bne.n	8012872 <svc_iter_prob_estimate+0x1c2>
 8012962:	b009      	add	sp, #36	; 0x24
 8012964:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012968:	eeb5 3ac0 	vcmpe.f32	s6, #0.0
 801296c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012970:	dcf7      	bgt.n	8012962 <svc_iter_prob_estimate+0x2b2>
 8012972:	9b01      	ldr	r3, [sp, #4]
 8012974:	3b01      	subs	r3, #1
 8012976:	9301      	str	r3, [sp, #4]
 8012978:	f47f af7b 	bne.w	8012872 <svc_iter_prob_estimate+0x1c2>
 801297c:	e7f1      	b.n	8012962 <svc_iter_prob_estimate+0x2b2>
 801297e:	f04f 0a04 	mov.w	sl, #4
 8012982:	e758      	b.n	8012836 <svc_iter_prob_estimate+0x186>
 8012984:	4613      	mov	r3, r2
 8012986:	f04f 0b02 	mov.w	fp, #2
 801298a:	3304      	adds	r3, #4
 801298c:	9301      	str	r3, [sp, #4]
 801298e:	e6d7      	b.n	8012740 <svc_iter_prob_estimate+0x90>
 8012990:	00000000 	.word	0x00000000
 8012994:	3ba3d70a 	.word	0x3ba3d70a
 8012998:	34000000 	.word	0x34000000

0801299c <svc_decoder>:
 801299c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80129a0:	ed2d 8b06 	vpush	{d8-d10}
 80129a4:	e9d3 9a01 	ldrd	r9, sl, [r3, #4]
 80129a8:	b087      	sub	sp, #28
 80129aa:	461d      	mov	r5, r3
 80129ac:	f10a 36ff 	add.w	r6, sl, #4294967295
 80129b0:	ee0a 2a10 	vmov	s20, r2
 80129b4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80129b6:	4607      	mov	r7, r0
 80129b8:	fb0a f606 	mul.w	r6, sl, r6
 80129bc:	7d5b      	ldrb	r3, [r3, #21]
 80129be:	eb02 0889 	add.w	r8, r2, r9, lsl #2
 80129c2:	7d2a      	ldrb	r2, [r5, #20]
 80129c4:	0876      	lsrs	r6, r6, #1
 80129c6:	9102      	str	r1, [sp, #8]
 80129c8:	9203      	str	r2, [sp, #12]
 80129ca:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80129ce:	2b03      	cmp	r3, #3
 80129d0:	f200 8146 	bhi.w	8012c60 <svc_decoder+0x2c4>
 80129d4:	e8df f003 	tbb	[pc, r3]
 80129d8:	0258ab8e 	.word	0x0258ab8e
 80129dc:	edd5 8a06 	vldr	s17, [r5, #24]
 80129e0:	ed95 8a07 	vldr	s16, [r5, #28]
 80129e4:	682b      	ldr	r3, [r5, #0]
 80129e6:	6aec      	ldr	r4, [r5, #44]	; 0x2c
 80129e8:	f1b9 0f00 	cmp.w	r9, #0
 80129ec:	d024      	beq.n	8012a38 <svc_decoder+0x9c>
 80129ee:	f8dd b058 	ldr.w	fp, [sp, #88]	; 0x58
 80129f2:	ee09 6a10 	vmov	s18, r6
 80129f6:	ea4f 0983 	mov.w	r9, r3, lsl #2
 80129fa:	461f      	mov	r7, r3
 80129fc:	465e      	mov	r6, fp
 80129fe:	4683      	mov	fp, r0
 8012a00:	2f00      	cmp	r7, #0
 8012a02:	f000 8124 	beq.w	8012c4e <svc_decoder+0x2b2>
 8012a06:	eddf 7a99 	vldr	s15, [pc, #612]	; 8012c6c <svc_decoder+0x2d0>
 8012a0a:	465b      	mov	r3, fp
 8012a0c:	eb04 0209 	add.w	r2, r4, r9
 8012a10:	ecb4 7a01 	vldmia	r4!, {s14}
 8012a14:	ecf3 6a01 	vldmia	r3!, {s13}
 8012a18:	4294      	cmp	r4, r2
 8012a1a:	eee6 7a87 	vfma.f32	s15, s13, s14
 8012a1e:	d1f7      	bne.n	8012a10 <svc_decoder+0x74>
 8012a20:	eeb0 0a48 	vmov.f32	s0, s16
 8012a24:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8012a28:	f003 f92a 	bl	8015c80 <tanhf>
 8012a2c:	eca6 0a01 	vstmia	r6!, {s0}
 8012a30:	45b0      	cmp	r8, r6
 8012a32:	d1e5      	bne.n	8012a00 <svc_decoder+0x64>
 8012a34:	ee19 6a10 	vmov	r6, s18
 8012a38:	2300      	movs	r3, #0
 8012a3a:	ee08 3a90 	vmov	s17, r3
 8012a3e:	9b03      	ldr	r3, [sp, #12]
 8012a40:	9916      	ldr	r1, [sp, #88]	; 0x58
 8012a42:	2b00      	cmp	r3, #0
 8012a44:	f040 80b2 	bne.w	8012bac <svc_decoder+0x210>
 8012a48:	9c02      	ldr	r4, [sp, #8]
 8012a4a:	4633      	mov	r3, r6
 8012a4c:	4628      	mov	r0, r5
 8012a4e:	4622      	mov	r2, r4
 8012a50:	f7ff fcb0 	bl	80123b4 <svc_ovo_output>
 8012a54:	4633      	mov	r3, r6
 8012a56:	ee1a 2a10 	vmov	r2, s20
 8012a5a:	4621      	mov	r1, r4
 8012a5c:	4628      	mov	r0, r5
 8012a5e:	f7ff fd81 	bl	8012564 <svc_ovo_classification_vote>
 8012a62:	f1ba 0f02 	cmp.w	sl, #2
 8012a66:	d108      	bne.n	8012a7a <svc_decoder+0xde>
 8012a68:	9b02      	ldr	r3, [sp, #8]
 8012a6a:	edd3 7a00 	vldr	s15, [r3]
 8012a6e:	eeb1 7a67 	vneg.f32	s14, s15
 8012a72:	edc3 7a01 	vstr	s15, [r3, #4]
 8012a76:	ed83 7a00 	vstr	s14, [r3]
 8012a7a:	ee18 0a90 	vmov	r0, s17
 8012a7e:	b007      	add	sp, #28
 8012a80:	ecbd 8b06 	vpop	{d8-d10}
 8012a84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a88:	ed95 8a06 	vldr	s16, [r5, #24]
 8012a8c:	682a      	ldr	r2, [r5, #0]
 8012a8e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8012a90:	f1b9 0f00 	cmp.w	r9, #0
 8012a94:	d0d0      	beq.n	8012a38 <svc_decoder+0x9c>
 8012a96:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8012a98:	f04f 0b00 	mov.w	fp, #0
 8012a9c:	0091      	lsls	r1, r2, #2
 8012a9e:	ee08 6a90 	vmov	s17, r6
 8012aa2:	9504      	str	r5, [sp, #16]
 8012aa4:	465e      	mov	r6, fp
 8012aa6:	f8cd 8014 	str.w	r8, [sp, #20]
 8012aaa:	468b      	mov	fp, r1
 8012aac:	46a0      	mov	r8, r4
 8012aae:	4605      	mov	r5, r0
 8012ab0:	4617      	mov	r7, r2
 8012ab2:	461c      	mov	r4, r3
 8012ab4:	2f00      	cmp	r7, #0
 8012ab6:	f000 80cd 	beq.w	8012c54 <svc_decoder+0x2b8>
 8012aba:	ed9f 0a6c 	vldr	s0, [pc, #432]	; 8012c6c <svc_decoder+0x2d0>
 8012abe:	462b      	mov	r3, r5
 8012ac0:	eb04 020b 	add.w	r2, r4, fp
 8012ac4:	ecb4 7a01 	vldmia	r4!, {s14}
 8012ac8:	ecf3 7a01 	vldmia	r3!, {s15}
 8012acc:	4294      	cmp	r4, r2
 8012ace:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012ad2:	eea7 0aa7 	vfma.f32	s0, s15, s15
 8012ad6:	d1f5      	bne.n	8012ac4 <svc_decoder+0x128>
 8012ad8:	ee20 0a48 	vnmul.f32	s0, s0, s16
 8012adc:	f002 fee4 	bl	80158a8 <expf>
 8012ae0:	3601      	adds	r6, #1
 8012ae2:	eca8 0a01 	vstmia	r8!, {s0}
 8012ae6:	45b1      	cmp	r9, r6
 8012ae8:	d1e4      	bne.n	8012ab4 <svc_decoder+0x118>
 8012aea:	ee18 6a90 	vmov	r6, s17
 8012aee:	e9dd 5804 	ldrd	r5, r8, [sp, #16]
 8012af2:	e7a1      	b.n	8012a38 <svc_decoder+0x9c>
 8012af4:	682a      	ldr	r2, [r5, #0]
 8012af6:	6aec      	ldr	r4, [r5, #44]	; 0x2c
 8012af8:	f1b9 0f00 	cmp.w	r9, #0
 8012afc:	d09c      	beq.n	8012a38 <svc_decoder+0x9c>
 8012afe:	ea4f 0b82 	mov.w	fp, r2, lsl #2
 8012b02:	9816      	ldr	r0, [sp, #88]	; 0x58
 8012b04:	2100      	movs	r1, #0
 8012b06:	eddf 7a59 	vldr	s15, [pc, #356]	; 8012c6c <svc_decoder+0x2d0>
 8012b0a:	b152      	cbz	r2, 8012b22 <svc_decoder+0x186>
 8012b0c:	463b      	mov	r3, r7
 8012b0e:	eb04 0c0b 	add.w	ip, r4, fp
 8012b12:	ecb4 7a01 	vldmia	r4!, {s14}
 8012b16:	ecf3 6a01 	vldmia	r3!, {s13}
 8012b1a:	4564      	cmp	r4, ip
 8012b1c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8012b20:	d1f7      	bne.n	8012b12 <svc_decoder+0x176>
 8012b22:	3101      	adds	r1, #1
 8012b24:	ece0 7a01 	vstmia	r0!, {s15}
 8012b28:	4589      	cmp	r9, r1
 8012b2a:	d1ec      	bne.n	8012b06 <svc_decoder+0x16a>
 8012b2c:	e784      	b.n	8012a38 <svc_decoder+0x9c>
 8012b2e:	ed95 9a06 	vldr	s18, [r5, #24]
 8012b32:	edd5 8a07 	vldr	s17, [r5, #28]
 8012b36:	682a      	ldr	r2, [r5, #0]
 8012b38:	6a29      	ldr	r1, [r5, #32]
 8012b3a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8012b3c:	f1b9 0f00 	cmp.w	r9, #0
 8012b40:	f43f af7a 	beq.w	8012a38 <svc_decoder+0x9c>
 8012b44:	ee07 1a90 	vmov	s15, r1
 8012b48:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8012b4a:	f04f 0b00 	mov.w	fp, #0
 8012b4e:	0091      	lsls	r1, r2, #2
 8012b50:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8012b54:	ee09 6a90 	vmov	s19, r6
 8012b58:	9504      	str	r5, [sp, #16]
 8012b5a:	465e      	mov	r6, fp
 8012b5c:	f8cd 8014 	str.w	r8, [sp, #20]
 8012b60:	468b      	mov	fp, r1
 8012b62:	46a0      	mov	r8, r4
 8012b64:	4605      	mov	r5, r0
 8012b66:	4617      	mov	r7, r2
 8012b68:	461c      	mov	r4, r3
 8012b6a:	2f00      	cmp	r7, #0
 8012b6c:	d075      	beq.n	8012c5a <svc_decoder+0x2be>
 8012b6e:	eddf 7a3f 	vldr	s15, [pc, #252]	; 8012c6c <svc_decoder+0x2d0>
 8012b72:	462b      	mov	r3, r5
 8012b74:	eb04 020b 	add.w	r2, r4, fp
 8012b78:	ecb4 7a01 	vldmia	r4!, {s14}
 8012b7c:	ecf3 6a01 	vldmia	r3!, {s13}
 8012b80:	4294      	cmp	r4, r2
 8012b82:	eee6 7a87 	vfma.f32	s15, s13, s14
 8012b86:	d1f7      	bne.n	8012b78 <svc_decoder+0x1dc>
 8012b88:	eeb0 0a68 	vmov.f32	s0, s17
 8012b8c:	eea9 0a27 	vfma.f32	s0, s18, s15
 8012b90:	3601      	adds	r6, #1
 8012b92:	eef0 0a48 	vmov.f32	s1, s16
 8012b96:	f002 ff13 	bl	80159c0 <powf>
 8012b9a:	eca8 0a01 	vstmia	r8!, {s0}
 8012b9e:	45b1      	cmp	r9, r6
 8012ba0:	d1e3      	bne.n	8012b6a <svc_decoder+0x1ce>
 8012ba2:	ee19 6a90 	vmov	r6, s19
 8012ba6:	e9dd 5804 	ldrd	r5, r8, [sp, #16]
 8012baa:	e745      	b.n	8012a38 <svc_decoder+0x9c>
 8012bac:	4633      	mov	r3, r6
 8012bae:	4642      	mov	r2, r8
 8012bb0:	4628      	mov	r0, r5
 8012bb2:	f7ff fbff 	bl	80123b4 <svc_ovo_output>
 8012bb6:	4633      	mov	r3, r6
 8012bb8:	ee1a 2a10 	vmov	r2, s20
 8012bbc:	4641      	mov	r1, r8
 8012bbe:	4628      	mov	r0, r5
 8012bc0:	f7ff fcd0 	bl	8012564 <svc_ovo_classification_vote>
 8012bc4:	68ab      	ldr	r3, [r5, #8]
 8012bc6:	f103 3bff 	add.w	fp, r3, #4294967295
 8012bca:	fb03 fb0b 	mul.w	fp, r3, fp
 8012bce:	ea5f 0b5b 	movs.w	fp, fp, lsr #1
 8012bd2:	e9d5 9a0e 	ldrd	r9, sl, [r5, #56]	; 0x38
 8012bd6:	d01d      	beq.n	8012c14 <svc_decoder+0x278>
 8012bd8:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8012bdc:	4647      	mov	r7, r8
 8012bde:	2400      	movs	r4, #0
 8012be0:	ecf7 6a01 	vldmia	r7!, {s13}
 8012be4:	ecb9 7a01 	vldmia	r9!, {s14}
 8012be8:	ecfa 7a01 	vldmia	sl!, {s15}
 8012bec:	eee6 7a87 	vfma.f32	s15, s13, s14
 8012bf0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8012bf4:	eeb1 0a67 	vneg.f32	s0, s15
 8012bf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012bfc:	db19      	blt.n	8012c32 <svc_decoder+0x296>
 8012bfe:	f002 fe53 	bl	80158a8 <expf>
 8012c02:	ee30 7a08 	vadd.f32	s14, s0, s16
 8012c06:	3401      	adds	r4, #1
 8012c08:	eec0 7a07 	vdiv.f32	s15, s0, s14
 8012c0c:	45a3      	cmp	fp, r4
 8012c0e:	ed47 7a01 	vstr	s15, [r7, #-4]
 8012c12:	d1e5      	bne.n	8012be0 <svc_decoder+0x244>
 8012c14:	4628      	mov	r0, r5
 8012c16:	ee1a 3a10 	vmov	r3, s20
 8012c1a:	9a02      	ldr	r2, [sp, #8]
 8012c1c:	4641      	mov	r1, r8
 8012c1e:	9600      	str	r6, [sp, #0]
 8012c20:	f7ff fd46 	bl	80126b0 <svc_iter_prob_estimate>
 8012c24:	ee18 0a90 	vmov	r0, s17
 8012c28:	b007      	add	sp, #28
 8012c2a:	ecbd 8b06 	vpop	{d8-d10}
 8012c2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c32:	eeb0 0a67 	vmov.f32	s0, s15
 8012c36:	3401      	adds	r4, #1
 8012c38:	f002 fe36 	bl	80158a8 <expf>
 8012c3c:	ee30 0a08 	vadd.f32	s0, s0, s16
 8012c40:	45a3      	cmp	fp, r4
 8012c42:	eec8 7a00 	vdiv.f32	s15, s16, s0
 8012c46:	ed47 7a01 	vstr	s15, [r7, #-4]
 8012c4a:	d1c9      	bne.n	8012be0 <svc_decoder+0x244>
 8012c4c:	e7e2      	b.n	8012c14 <svc_decoder+0x278>
 8012c4e:	eeb0 0a48 	vmov.f32	s0, s16
 8012c52:	e6e9      	b.n	8012a28 <svc_decoder+0x8c>
 8012c54:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8012c58:	e742      	b.n	8012ae0 <svc_decoder+0x144>
 8012c5a:	eeb0 0a68 	vmov.f32	s0, s17
 8012c5e:	e797      	b.n	8012b90 <svc_decoder+0x1f4>
 8012c60:	f06f 0301 	mvn.w	r3, #1
 8012c64:	ee08 3a90 	vmov	s17, r3
 8012c68:	e6e9      	b.n	8012a3e <svc_decoder+0xa2>
 8012c6a:	bf00      	nop
 8012c6c:	00000000 	.word	0x00000000

08012c70 <forward_svc>:
 8012c70:	6981      	ldr	r1, [r0, #24]
 8012c72:	880b      	ldrh	r3, [r1, #0]
 8012c74:	2b00      	cmp	r3, #0
 8012c76:	f000 80b7 	beq.w	8012de8 <forward_svc+0x178>
 8012c7a:	2b01      	cmp	r3, #1
 8012c7c:	4602      	mov	r2, r0
 8012c7e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c82:	684f      	ldr	r7, [r1, #4]
 8012c84:	b09b      	sub	sp, #108	; 0x6c
 8012c86:	bf08      	it	eq
 8012c88:	2100      	moveq	r1, #0
 8012c8a:	6878      	ldr	r0, [r7, #4]
 8012c8c:	bf18      	it	ne
 8012c8e:	f107 010c 	addne.w	r1, r7, #12
 8012c92:	b100      	cbz	r0, 8012c96 <forward_svc+0x26>
 8012c94:	6800      	ldr	r0, [r0, #0]
 8012c96:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8012c9a:	f1ba 0f00 	cmp.w	sl, #0
 8012c9e:	f000 8095 	beq.w	8012dcc <forward_svc+0x15c>
 8012ca2:	e9da 8a00 	ldrd	r8, sl, [sl]
 8012ca6:	2b02      	cmp	r3, #2
 8012ca8:	f240 809b 	bls.w	8012de2 <forward_svc+0x172>
 8012cac:	69f9      	ldr	r1, [r7, #28]
 8012cae:	2900      	cmp	r1, #0
 8012cb0:	f000 808e 	beq.w	8012dd0 <forward_svc+0x160>
 8012cb4:	690d      	ldr	r5, [r1, #16]
 8012cb6:	e9d1 6900 	ldrd	r6, r9, [r1]
 8012cba:	e9d1 e402 	ldrd	lr, r4, [r1, #8]
 8012cbe:	2b03      	cmp	r3, #3
 8012cc0:	f000 808c 	beq.w	8012ddc <forward_svc+0x16c>
 8012cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012cc6:	2b00      	cmp	r3, #0
 8012cc8:	f000 8090 	beq.w	8012dec <forward_svc+0x17c>
 8012ccc:	681b      	ldr	r3, [r3, #0]
 8012cce:	699b      	ldr	r3, [r3, #24]
 8012cd0:	689b      	ldr	r3, [r3, #8]
 8012cd2:	9307      	str	r3, [sp, #28]
 8012cd4:	f892 3029 	ldrb.w	r3, [r2, #41]	; 0x29
 8012cd8:	b119      	cbz	r1, 8012ce2 <forward_svc+0x72>
 8012cda:	b113      	cbz	r3, 8012ce2 <forward_svc+0x72>
 8012cdc:	e9d1 c705 	ldrd	ip, r7, [r1, #20]
 8012ce0:	e001      	b.n	8012ce6 <forward_svc+0x76>
 8012ce2:	2700      	movs	r7, #0
 8012ce4:	46bc      	mov	ip, r7
 8012ce6:	69b6      	ldr	r6, [r6, #24]
 8012ce8:	f8d8 8018 	ldr.w	r8, [r8, #24]
 8012cec:	68b6      	ldr	r6, [r6, #8]
 8012cee:	f8da 1018 	ldr.w	r1, [sl, #24]
 8012cf2:	9604      	str	r6, [sp, #16]
 8012cf4:	f8d8 a008 	ldr.w	sl, [r8, #8]
 8012cf8:	68c6      	ldr	r6, [r0, #12]
 8012cfa:	f8d9 800c 	ldr.w	r8, [r9, #12]
 8012cfe:	6876      	ldr	r6, [r6, #4]
 8012d00:	f8d9 9018 	ldr.w	r9, [r9, #24]
 8012d04:	f8d8 800c 	ldr.w	r8, [r8, #12]
 8012d08:	edd1 7a02 	vldr	s15, [r1, #8]
 8012d0c:	f8d9 1008 	ldr.w	r1, [r9, #8]
 8012d10:	69ad      	ldr	r5, [r5, #24]
 8012d12:	9105      	str	r1, [sp, #20]
 8012d14:	6980      	ldr	r0, [r0, #24]
 8012d16:	fbb8 f9f6 	udiv	r9, r8, r6
 8012d1a:	f8d4 800c 	ldr.w	r8, [r4, #12]
 8012d1e:	69a4      	ldr	r4, [r4, #24]
 8012d20:	f8d8 b00c 	ldr.w	fp, [r8, #12]
 8012d24:	f8de 800c 	ldr.w	r8, [lr, #12]
 8012d28:	f8de e018 	ldr.w	lr, [lr, #24]
 8012d2c:	f8d8 100c 	ldr.w	r1, [r8, #12]
 8012d30:	6880      	ldr	r0, [r0, #8]
 8012d32:	9103      	str	r1, [sp, #12]
 8012d34:	f8de 1008 	ldr.w	r1, [lr, #8]
 8012d38:	f8d4 8008 	ldr.w	r8, [r4, #8]
 8012d3c:	f8d5 e008 	ldr.w	lr, [r5, #8]
 8012d40:	9106      	str	r1, [sp, #24]
 8012d42:	2b00      	cmp	r3, #0
 8012d44:	d03f      	beq.n	8012dc6 <forward_svc+0x156>
 8012d46:	f8dc c018 	ldr.w	ip, [ip, #24]
 8012d4a:	69bf      	ldr	r7, [r7, #24]
 8012d4c:	f8dc c008 	ldr.w	ip, [ip, #8]
 8012d50:	68bf      	ldr	r7, [r7, #8]
 8012d52:	6824      	ldr	r4, [r4, #0]
 8012d54:	9907      	ldr	r1, [sp, #28]
 8012d56:	f3c4 14c6 	ubfx	r4, r4, #7, #7
 8012d5a:	682d      	ldr	r5, [r5, #0]
 8012d5c:	9100      	str	r1, [sp, #0]
 8012d5e:	f88d 4049 	strb.w	r4, [sp, #73]	; 0x49
 8012d62:	f3c5 15c6 	ubfx	r5, r5, #7, #7
 8012d66:	f892 4028 	ldrb.w	r4, [r2, #40]	; 0x28
 8012d6a:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
 8012d6e:	9b04      	ldr	r3, [sp, #16]
 8012d70:	f88d 4039 	strb.w	r4, [sp, #57]	; 0x39
 8012d74:	69d4      	ldr	r4, [r2, #28]
 8012d76:	9313      	str	r3, [sp, #76]	; 0x4c
 8012d78:	9b05      	ldr	r3, [sp, #20]
 8012d7a:	940f      	str	r4, [sp, #60]	; 0x3c
 8012d7c:	6a14      	ldr	r4, [r2, #32]
 8012d7e:	9903      	ldr	r1, [sp, #12]
 8012d80:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8012d82:	9314      	str	r3, [sp, #80]	; 0x50
 8012d84:	9b06      	ldr	r3, [sp, #24]
 8012d86:	9410      	str	r4, [sp, #64]	; 0x40
 8012d88:	2400      	movs	r4, #0
 8012d8a:	910d      	str	r1, [sp, #52]	; 0x34
 8012d8c:	ee17 1a90 	vmov	r1, s15
 8012d90:	9315      	str	r3, [sp, #84]	; 0x54
 8012d92:	ab09      	add	r3, sp, #36	; 0x24
 8012d94:	9211      	str	r2, [sp, #68]	; 0x44
 8012d96:	aa08      	add	r2, sp, #32
 8012d98:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8012d9c:	f8cd 8064 	str.w	r8, [sp, #100]	; 0x64
 8012da0:	9718      	str	r7, [sp, #96]	; 0x60
 8012da2:	f88d 5048 	strb.w	r5, [sp, #72]	; 0x48
 8012da6:	9408      	str	r4, [sp, #32]
 8012da8:	e9cd 6909 	strd	r6, r9, [sp, #36]	; 0x24
 8012dac:	e9cd ec16 	strd	lr, ip, [sp, #88]	; 0x58
 8012db0:	f7ff fdf4 	bl	801299c <svc_decoder>
 8012db4:	eddd 7a08 	vldr	s15, [sp, #32]
 8012db8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012dbc:	edca 7a00 	vstr	s15, [sl]
 8012dc0:	b01b      	add	sp, #108	; 0x6c
 8012dc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012dc6:	461f      	mov	r7, r3
 8012dc8:	469c      	mov	ip, r3
 8012dca:	e7c2      	b.n	8012d52 <forward_svc+0xe2>
 8012dcc:	46d0      	mov	r8, sl
 8012dce:	e76a      	b.n	8012ca6 <forward_svc+0x36>
 8012dd0:	460c      	mov	r4, r1
 8012dd2:	468e      	mov	lr, r1
 8012dd4:	4689      	mov	r9, r1
 8012dd6:	460e      	mov	r6, r1
 8012dd8:	460d      	mov	r5, r1
 8012dda:	e770      	b.n	8012cbe <forward_svc+0x4e>
 8012ddc:	2300      	movs	r3, #0
 8012dde:	685b      	ldr	r3, [r3, #4]
 8012de0:	deff      	udf	#255	; 0xff
 8012de2:	2300      	movs	r3, #0
 8012de4:	685b      	ldr	r3, [r3, #4]
 8012de6:	deff      	udf	#255	; 0xff
 8012de8:	685b      	ldr	r3, [r3, #4]
 8012dea:	deff      	udf	#255	; 0xff
 8012dec:	699b      	ldr	r3, [r3, #24]
 8012dee:	deff      	udf	#255	; 0xff

08012df0 <ai_check_custom_types>:
 8012df0:	b082      	sub	sp, #8
 8012df2:	4b12      	ldr	r3, [pc, #72]	; (8012e3c <ai_check_custom_types+0x4c>)
 8012df4:	9301      	str	r3, [sp, #4]
 8012df6:	b118      	cbz	r0, 8012e00 <ai_check_custom_types+0x10>
 8012df8:	7803      	ldrb	r3, [r0, #0]
 8012dfa:	2b03      	cmp	r3, #3
 8012dfc:	d002      	beq.n	8012e04 <ai_check_custom_types+0x14>
 8012dfe:	2000      	movs	r0, #0
 8012e00:	b002      	add	sp, #8
 8012e02:	4770      	bx	lr
 8012e04:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012e08:	4293      	cmp	r3, r2
 8012e0a:	d004      	beq.n	8012e16 <ai_check_custom_types+0x26>
 8012e0c:	2001      	movs	r0, #1
 8012e0e:	f080 0001 	eor.w	r0, r0, #1
 8012e12:	b002      	add	sp, #8
 8012e14:	4770      	bx	lr
 8012e16:	7842      	ldrb	r2, [r0, #1]
 8012e18:	3001      	adds	r0, #1
 8012e1a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8012e1e:	429a      	cmp	r2, r3
 8012e20:	d1f4      	bne.n	8012e0c <ai_check_custom_types+0x1c>
 8012e22:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8012e26:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8012e2a:	429a      	cmp	r2, r3
 8012e2c:	d1ee      	bne.n	8012e0c <ai_check_custom_types+0x1c>
 8012e2e:	7842      	ldrb	r2, [r0, #1]
 8012e30:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8012e34:	429a      	cmp	r2, r3
 8012e36:	d1e9      	bne.n	8012e0c <ai_check_custom_types+0x1c>
 8012e38:	2000      	movs	r0, #0
 8012e3a:	e7e8      	b.n	8012e0e <ai_check_custom_types+0x1e>
 8012e3c:	84048403 	.word	0x84048403

08012e40 <ai_layers_init_all>:
 8012e40:	2100      	movs	r1, #0
 8012e42:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8012e44:	b13b      	cbz	r3, 8012e56 <ai_layers_init_all+0x16>
 8012e46:	691a      	ldr	r2, [r3, #16]
 8012e48:	3101      	adds	r1, #1
 8012e4a:	60d8      	str	r0, [r3, #12]
 8012e4c:	429a      	cmp	r2, r3
 8012e4e:	4613      	mov	r3, r2
 8012e50:	d001      	beq.n	8012e56 <ai_layers_init_all+0x16>
 8012e52:	2a00      	cmp	r2, #0
 8012e54:	d1f6      	bne.n	8012e44 <ai_layers_init_all+0x4>
 8012e56:	4608      	mov	r0, r1
 8012e58:	4770      	bx	lr
 8012e5a:	bf00      	nop

08012e5c <ai_layers_post_init_all>:
 8012e5c:	b538      	push	{r3, r4, r5, lr}
 8012e5e:	2500      	movs	r5, #0
 8012e60:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8012e62:	b16c      	cbz	r4, 8012e80 <ai_layers_post_init_all+0x24>
 8012e64:	6863      	ldr	r3, [r4, #4]
 8012e66:	07db      	lsls	r3, r3, #31
 8012e68:	d504      	bpl.n	8012e74 <ai_layers_post_init_all+0x18>
 8012e6a:	6a23      	ldr	r3, [r4, #32]
 8012e6c:	4620      	mov	r0, r4
 8012e6e:	b10b      	cbz	r3, 8012e74 <ai_layers_post_init_all+0x18>
 8012e70:	3501      	adds	r5, #1
 8012e72:	4798      	blx	r3
 8012e74:	6923      	ldr	r3, [r4, #16]
 8012e76:	42a3      	cmp	r3, r4
 8012e78:	461c      	mov	r4, r3
 8012e7a:	d001      	beq.n	8012e80 <ai_layers_post_init_all+0x24>
 8012e7c:	2b00      	cmp	r3, #0
 8012e7e:	d1f0      	bne.n	8012e62 <ai_layers_post_init_all+0x6>
 8012e80:	4628      	mov	r0, r5
 8012e82:	bd38      	pop	{r3, r4, r5, pc}

08012e84 <ai_layers_forward_all>:
 8012e84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012e88:	f8d0 803c 	ldr.w	r8, [r0, #60]	; 0x3c
 8012e8c:	4604      	mov	r4, r0
 8012e8e:	f1b8 0f00 	cmp.w	r8, #0
 8012e92:	d02a      	beq.n	8012eea <ai_layers_forward_all+0x66>
 8012e94:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8012e96:	6381      	str	r1, [r0, #56]	; 0x38
 8012e98:	b319      	cbz	r1, 8012ee2 <ai_layers_forward_all+0x5e>
 8012e9a:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8012e9c:	2001      	movs	r0, #1
 8012e9e:	47c0      	blx	r8
 8012ea0:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8012ea2:	b1f6      	cbz	r6, 8012ee2 <ai_layers_forward_all+0x5e>
 8012ea4:	2700      	movs	r7, #0
 8012ea6:	4631      	mov	r1, r6
 8012ea8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8012eaa:	2002      	movs	r0, #2
 8012eac:	47c0      	blx	r8
 8012eae:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8012eb0:	4628      	mov	r0, r5
 8012eb2:	696b      	ldr	r3, [r5, #20]
 8012eb4:	4798      	blx	r3
 8012eb6:	692e      	ldr	r6, [r5, #16]
 8012eb8:	2003      	movs	r0, #3
 8012eba:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8012ebc:	42b5      	cmp	r5, r6
 8012ebe:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8012ec0:	d007      	beq.n	8012ed2 <ai_layers_forward_all+0x4e>
 8012ec2:	47c0      	blx	r8
 8012ec4:	3701      	adds	r7, #1
 8012ec6:	63a6      	str	r6, [r4, #56]	; 0x38
 8012ec8:	2e00      	cmp	r6, #0
 8012eca:	d1ec      	bne.n	8012ea6 <ai_layers_forward_all+0x22>
 8012ecc:	4638      	mov	r0, r7
 8012ece:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012ed2:	2003      	movs	r0, #3
 8012ed4:	3701      	adds	r7, #1
 8012ed6:	47c0      	blx	r8
 8012ed8:	2300      	movs	r3, #0
 8012eda:	4638      	mov	r0, r7
 8012edc:	63a3      	str	r3, [r4, #56]	; 0x38
 8012ede:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012ee2:	2700      	movs	r7, #0
 8012ee4:	4638      	mov	r0, r7
 8012ee6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012eea:	6b45      	ldr	r5, [r0, #52]	; 0x34
 8012eec:	6385      	str	r5, [r0, #56]	; 0x38
 8012eee:	2d00      	cmp	r5, #0
 8012ef0:	d0f7      	beq.n	8012ee2 <ai_layers_forward_all+0x5e>
 8012ef2:	4647      	mov	r7, r8
 8012ef4:	696b      	ldr	r3, [r5, #20]
 8012ef6:	4628      	mov	r0, r5
 8012ef8:	4798      	blx	r3
 8012efa:	462b      	mov	r3, r5
 8012efc:	692d      	ldr	r5, [r5, #16]
 8012efe:	429d      	cmp	r5, r3
 8012f00:	d004      	beq.n	8012f0c <ai_layers_forward_all+0x88>
 8012f02:	3701      	adds	r7, #1
 8012f04:	63a5      	str	r5, [r4, #56]	; 0x38
 8012f06:	2d00      	cmp	r5, #0
 8012f08:	d1f4      	bne.n	8012ef4 <ai_layers_forward_all+0x70>
 8012f0a:	e7df      	b.n	8012ecc <ai_layers_forward_all+0x48>
 8012f0c:	2300      	movs	r3, #0
 8012f0e:	3701      	adds	r7, #1
 8012f10:	63a3      	str	r3, [r4, #56]	; 0x38
 8012f12:	e7db      	b.n	8012ecc <ai_layers_forward_all+0x48>

08012f14 <ai_layers_destroy_all>:
 8012f14:	b538      	push	{r3, r4, r5, lr}
 8012f16:	2500      	movs	r5, #0
 8012f18:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8012f1a:	b16c      	cbz	r4, 8012f38 <ai_layers_destroy_all+0x24>
 8012f1c:	6863      	ldr	r3, [r4, #4]
 8012f1e:	075b      	lsls	r3, r3, #29
 8012f20:	d504      	bpl.n	8012f2c <ai_layers_destroy_all+0x18>
 8012f22:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8012f24:	4620      	mov	r0, r4
 8012f26:	b10b      	cbz	r3, 8012f2c <ai_layers_destroy_all+0x18>
 8012f28:	3501      	adds	r5, #1
 8012f2a:	4798      	blx	r3
 8012f2c:	6923      	ldr	r3, [r4, #16]
 8012f2e:	42a3      	cmp	r3, r4
 8012f30:	461c      	mov	r4, r3
 8012f32:	d001      	beq.n	8012f38 <ai_layers_destroy_all+0x24>
 8012f34:	2b00      	cmp	r3, #0
 8012f36:	d1f0      	bne.n	8012f1a <ai_layers_destroy_all+0x6>
 8012f38:	4628      	mov	r0, r5
 8012f3a:	bd38      	pop	{r3, r4, r5, pc}

08012f3c <__errno>:
 8012f3c:	4b01      	ldr	r3, [pc, #4]	; (8012f44 <__errno+0x8>)
 8012f3e:	6818      	ldr	r0, [r3, #0]
 8012f40:	4770      	bx	lr
 8012f42:	bf00      	nop
 8012f44:	240006fc 	.word	0x240006fc

08012f48 <__libc_init_array>:
 8012f48:	b570      	push	{r4, r5, r6, lr}
 8012f4a:	4d0d      	ldr	r5, [pc, #52]	; (8012f80 <__libc_init_array+0x38>)
 8012f4c:	4c0d      	ldr	r4, [pc, #52]	; (8012f84 <__libc_init_array+0x3c>)
 8012f4e:	1b64      	subs	r4, r4, r5
 8012f50:	10a4      	asrs	r4, r4, #2
 8012f52:	2600      	movs	r6, #0
 8012f54:	42a6      	cmp	r6, r4
 8012f56:	d109      	bne.n	8012f6c <__libc_init_array+0x24>
 8012f58:	4d0b      	ldr	r5, [pc, #44]	; (8012f88 <__libc_init_array+0x40>)
 8012f5a:	4c0c      	ldr	r4, [pc, #48]	; (8012f8c <__libc_init_array+0x44>)
 8012f5c:	f003 f886 	bl	801606c <_init>
 8012f60:	1b64      	subs	r4, r4, r5
 8012f62:	10a4      	asrs	r4, r4, #2
 8012f64:	2600      	movs	r6, #0
 8012f66:	42a6      	cmp	r6, r4
 8012f68:	d105      	bne.n	8012f76 <__libc_init_array+0x2e>
 8012f6a:	bd70      	pop	{r4, r5, r6, pc}
 8012f6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8012f70:	4798      	blx	r3
 8012f72:	3601      	adds	r6, #1
 8012f74:	e7ee      	b.n	8012f54 <__libc_init_array+0xc>
 8012f76:	f855 3b04 	ldr.w	r3, [r5], #4
 8012f7a:	4798      	blx	r3
 8012f7c:	3601      	adds	r6, #1
 8012f7e:	e7f2      	b.n	8012f66 <__libc_init_array+0x1e>
 8012f80:	080176a8 	.word	0x080176a8
 8012f84:	080176a8 	.word	0x080176a8
 8012f88:	080176a8 	.word	0x080176a8
 8012f8c:	080176ac 	.word	0x080176ac

08012f90 <malloc>:
 8012f90:	4b02      	ldr	r3, [pc, #8]	; (8012f9c <malloc+0xc>)
 8012f92:	4601      	mov	r1, r0
 8012f94:	6818      	ldr	r0, [r3, #0]
 8012f96:	f000 b885 	b.w	80130a4 <_malloc_r>
 8012f9a:	bf00      	nop
 8012f9c:	240006fc 	.word	0x240006fc

08012fa0 <memcpy>:
 8012fa0:	440a      	add	r2, r1
 8012fa2:	4291      	cmp	r1, r2
 8012fa4:	f100 33ff 	add.w	r3, r0, #4294967295
 8012fa8:	d100      	bne.n	8012fac <memcpy+0xc>
 8012faa:	4770      	bx	lr
 8012fac:	b510      	push	{r4, lr}
 8012fae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012fb2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012fb6:	4291      	cmp	r1, r2
 8012fb8:	d1f9      	bne.n	8012fae <memcpy+0xe>
 8012fba:	bd10      	pop	{r4, pc}

08012fbc <memset>:
 8012fbc:	4402      	add	r2, r0
 8012fbe:	4603      	mov	r3, r0
 8012fc0:	4293      	cmp	r3, r2
 8012fc2:	d100      	bne.n	8012fc6 <memset+0xa>
 8012fc4:	4770      	bx	lr
 8012fc6:	f803 1b01 	strb.w	r1, [r3], #1
 8012fca:	e7f9      	b.n	8012fc0 <memset+0x4>

08012fcc <_free_r>:
 8012fcc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012fce:	2900      	cmp	r1, #0
 8012fd0:	d044      	beq.n	801305c <_free_r+0x90>
 8012fd2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012fd6:	9001      	str	r0, [sp, #4]
 8012fd8:	2b00      	cmp	r3, #0
 8012fda:	f1a1 0404 	sub.w	r4, r1, #4
 8012fde:	bfb8      	it	lt
 8012fe0:	18e4      	addlt	r4, r4, r3
 8012fe2:	f001 fb3b 	bl	801465c <__malloc_lock>
 8012fe6:	4a1e      	ldr	r2, [pc, #120]	; (8013060 <_free_r+0x94>)
 8012fe8:	9801      	ldr	r0, [sp, #4]
 8012fea:	6813      	ldr	r3, [r2, #0]
 8012fec:	b933      	cbnz	r3, 8012ffc <_free_r+0x30>
 8012fee:	6063      	str	r3, [r4, #4]
 8012ff0:	6014      	str	r4, [r2, #0]
 8012ff2:	b003      	add	sp, #12
 8012ff4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012ff8:	f001 bb36 	b.w	8014668 <__malloc_unlock>
 8012ffc:	42a3      	cmp	r3, r4
 8012ffe:	d908      	bls.n	8013012 <_free_r+0x46>
 8013000:	6825      	ldr	r5, [r4, #0]
 8013002:	1961      	adds	r1, r4, r5
 8013004:	428b      	cmp	r3, r1
 8013006:	bf01      	itttt	eq
 8013008:	6819      	ldreq	r1, [r3, #0]
 801300a:	685b      	ldreq	r3, [r3, #4]
 801300c:	1949      	addeq	r1, r1, r5
 801300e:	6021      	streq	r1, [r4, #0]
 8013010:	e7ed      	b.n	8012fee <_free_r+0x22>
 8013012:	461a      	mov	r2, r3
 8013014:	685b      	ldr	r3, [r3, #4]
 8013016:	b10b      	cbz	r3, 801301c <_free_r+0x50>
 8013018:	42a3      	cmp	r3, r4
 801301a:	d9fa      	bls.n	8013012 <_free_r+0x46>
 801301c:	6811      	ldr	r1, [r2, #0]
 801301e:	1855      	adds	r5, r2, r1
 8013020:	42a5      	cmp	r5, r4
 8013022:	d10b      	bne.n	801303c <_free_r+0x70>
 8013024:	6824      	ldr	r4, [r4, #0]
 8013026:	4421      	add	r1, r4
 8013028:	1854      	adds	r4, r2, r1
 801302a:	42a3      	cmp	r3, r4
 801302c:	6011      	str	r1, [r2, #0]
 801302e:	d1e0      	bne.n	8012ff2 <_free_r+0x26>
 8013030:	681c      	ldr	r4, [r3, #0]
 8013032:	685b      	ldr	r3, [r3, #4]
 8013034:	6053      	str	r3, [r2, #4]
 8013036:	4421      	add	r1, r4
 8013038:	6011      	str	r1, [r2, #0]
 801303a:	e7da      	b.n	8012ff2 <_free_r+0x26>
 801303c:	d902      	bls.n	8013044 <_free_r+0x78>
 801303e:	230c      	movs	r3, #12
 8013040:	6003      	str	r3, [r0, #0]
 8013042:	e7d6      	b.n	8012ff2 <_free_r+0x26>
 8013044:	6825      	ldr	r5, [r4, #0]
 8013046:	1961      	adds	r1, r4, r5
 8013048:	428b      	cmp	r3, r1
 801304a:	bf04      	itt	eq
 801304c:	6819      	ldreq	r1, [r3, #0]
 801304e:	685b      	ldreq	r3, [r3, #4]
 8013050:	6063      	str	r3, [r4, #4]
 8013052:	bf04      	itt	eq
 8013054:	1949      	addeq	r1, r1, r5
 8013056:	6021      	streq	r1, [r4, #0]
 8013058:	6054      	str	r4, [r2, #4]
 801305a:	e7ca      	b.n	8012ff2 <_free_r+0x26>
 801305c:	b003      	add	sp, #12
 801305e:	bd30      	pop	{r4, r5, pc}
 8013060:	2400288c 	.word	0x2400288c

08013064 <sbrk_aligned>:
 8013064:	b570      	push	{r4, r5, r6, lr}
 8013066:	4e0e      	ldr	r6, [pc, #56]	; (80130a0 <sbrk_aligned+0x3c>)
 8013068:	460c      	mov	r4, r1
 801306a:	6831      	ldr	r1, [r6, #0]
 801306c:	4605      	mov	r5, r0
 801306e:	b911      	cbnz	r1, 8013076 <sbrk_aligned+0x12>
 8013070:	f000 fcd0 	bl	8013a14 <_sbrk_r>
 8013074:	6030      	str	r0, [r6, #0]
 8013076:	4621      	mov	r1, r4
 8013078:	4628      	mov	r0, r5
 801307a:	f000 fccb 	bl	8013a14 <_sbrk_r>
 801307e:	1c43      	adds	r3, r0, #1
 8013080:	d00a      	beq.n	8013098 <sbrk_aligned+0x34>
 8013082:	1cc4      	adds	r4, r0, #3
 8013084:	f024 0403 	bic.w	r4, r4, #3
 8013088:	42a0      	cmp	r0, r4
 801308a:	d007      	beq.n	801309c <sbrk_aligned+0x38>
 801308c:	1a21      	subs	r1, r4, r0
 801308e:	4628      	mov	r0, r5
 8013090:	f000 fcc0 	bl	8013a14 <_sbrk_r>
 8013094:	3001      	adds	r0, #1
 8013096:	d101      	bne.n	801309c <sbrk_aligned+0x38>
 8013098:	f04f 34ff 	mov.w	r4, #4294967295
 801309c:	4620      	mov	r0, r4
 801309e:	bd70      	pop	{r4, r5, r6, pc}
 80130a0:	24002890 	.word	0x24002890

080130a4 <_malloc_r>:
 80130a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80130a8:	1ccd      	adds	r5, r1, #3
 80130aa:	f025 0503 	bic.w	r5, r5, #3
 80130ae:	3508      	adds	r5, #8
 80130b0:	2d0c      	cmp	r5, #12
 80130b2:	bf38      	it	cc
 80130b4:	250c      	movcc	r5, #12
 80130b6:	2d00      	cmp	r5, #0
 80130b8:	4607      	mov	r7, r0
 80130ba:	db01      	blt.n	80130c0 <_malloc_r+0x1c>
 80130bc:	42a9      	cmp	r1, r5
 80130be:	d905      	bls.n	80130cc <_malloc_r+0x28>
 80130c0:	230c      	movs	r3, #12
 80130c2:	603b      	str	r3, [r7, #0]
 80130c4:	2600      	movs	r6, #0
 80130c6:	4630      	mov	r0, r6
 80130c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80130cc:	4e2e      	ldr	r6, [pc, #184]	; (8013188 <_malloc_r+0xe4>)
 80130ce:	f001 fac5 	bl	801465c <__malloc_lock>
 80130d2:	6833      	ldr	r3, [r6, #0]
 80130d4:	461c      	mov	r4, r3
 80130d6:	bb34      	cbnz	r4, 8013126 <_malloc_r+0x82>
 80130d8:	4629      	mov	r1, r5
 80130da:	4638      	mov	r0, r7
 80130dc:	f7ff ffc2 	bl	8013064 <sbrk_aligned>
 80130e0:	1c43      	adds	r3, r0, #1
 80130e2:	4604      	mov	r4, r0
 80130e4:	d14d      	bne.n	8013182 <_malloc_r+0xde>
 80130e6:	6834      	ldr	r4, [r6, #0]
 80130e8:	4626      	mov	r6, r4
 80130ea:	2e00      	cmp	r6, #0
 80130ec:	d140      	bne.n	8013170 <_malloc_r+0xcc>
 80130ee:	6823      	ldr	r3, [r4, #0]
 80130f0:	4631      	mov	r1, r6
 80130f2:	4638      	mov	r0, r7
 80130f4:	eb04 0803 	add.w	r8, r4, r3
 80130f8:	f000 fc8c 	bl	8013a14 <_sbrk_r>
 80130fc:	4580      	cmp	r8, r0
 80130fe:	d13a      	bne.n	8013176 <_malloc_r+0xd2>
 8013100:	6821      	ldr	r1, [r4, #0]
 8013102:	3503      	adds	r5, #3
 8013104:	1a6d      	subs	r5, r5, r1
 8013106:	f025 0503 	bic.w	r5, r5, #3
 801310a:	3508      	adds	r5, #8
 801310c:	2d0c      	cmp	r5, #12
 801310e:	bf38      	it	cc
 8013110:	250c      	movcc	r5, #12
 8013112:	4629      	mov	r1, r5
 8013114:	4638      	mov	r0, r7
 8013116:	f7ff ffa5 	bl	8013064 <sbrk_aligned>
 801311a:	3001      	adds	r0, #1
 801311c:	d02b      	beq.n	8013176 <_malloc_r+0xd2>
 801311e:	6823      	ldr	r3, [r4, #0]
 8013120:	442b      	add	r3, r5
 8013122:	6023      	str	r3, [r4, #0]
 8013124:	e00e      	b.n	8013144 <_malloc_r+0xa0>
 8013126:	6822      	ldr	r2, [r4, #0]
 8013128:	1b52      	subs	r2, r2, r5
 801312a:	d41e      	bmi.n	801316a <_malloc_r+0xc6>
 801312c:	2a0b      	cmp	r2, #11
 801312e:	d916      	bls.n	801315e <_malloc_r+0xba>
 8013130:	1961      	adds	r1, r4, r5
 8013132:	42a3      	cmp	r3, r4
 8013134:	6025      	str	r5, [r4, #0]
 8013136:	bf18      	it	ne
 8013138:	6059      	strne	r1, [r3, #4]
 801313a:	6863      	ldr	r3, [r4, #4]
 801313c:	bf08      	it	eq
 801313e:	6031      	streq	r1, [r6, #0]
 8013140:	5162      	str	r2, [r4, r5]
 8013142:	604b      	str	r3, [r1, #4]
 8013144:	4638      	mov	r0, r7
 8013146:	f104 060b 	add.w	r6, r4, #11
 801314a:	f001 fa8d 	bl	8014668 <__malloc_unlock>
 801314e:	f026 0607 	bic.w	r6, r6, #7
 8013152:	1d23      	adds	r3, r4, #4
 8013154:	1af2      	subs	r2, r6, r3
 8013156:	d0b6      	beq.n	80130c6 <_malloc_r+0x22>
 8013158:	1b9b      	subs	r3, r3, r6
 801315a:	50a3      	str	r3, [r4, r2]
 801315c:	e7b3      	b.n	80130c6 <_malloc_r+0x22>
 801315e:	6862      	ldr	r2, [r4, #4]
 8013160:	42a3      	cmp	r3, r4
 8013162:	bf0c      	ite	eq
 8013164:	6032      	streq	r2, [r6, #0]
 8013166:	605a      	strne	r2, [r3, #4]
 8013168:	e7ec      	b.n	8013144 <_malloc_r+0xa0>
 801316a:	4623      	mov	r3, r4
 801316c:	6864      	ldr	r4, [r4, #4]
 801316e:	e7b2      	b.n	80130d6 <_malloc_r+0x32>
 8013170:	4634      	mov	r4, r6
 8013172:	6876      	ldr	r6, [r6, #4]
 8013174:	e7b9      	b.n	80130ea <_malloc_r+0x46>
 8013176:	230c      	movs	r3, #12
 8013178:	603b      	str	r3, [r7, #0]
 801317a:	4638      	mov	r0, r7
 801317c:	f001 fa74 	bl	8014668 <__malloc_unlock>
 8013180:	e7a1      	b.n	80130c6 <_malloc_r+0x22>
 8013182:	6025      	str	r5, [r4, #0]
 8013184:	e7de      	b.n	8013144 <_malloc_r+0xa0>
 8013186:	bf00      	nop
 8013188:	2400288c 	.word	0x2400288c

0801318c <__cvt>:
 801318c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801318e:	ed2d 8b02 	vpush	{d8}
 8013192:	eeb0 8b40 	vmov.f64	d8, d0
 8013196:	b085      	sub	sp, #20
 8013198:	4617      	mov	r7, r2
 801319a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801319c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801319e:	ee18 2a90 	vmov	r2, s17
 80131a2:	f025 0520 	bic.w	r5, r5, #32
 80131a6:	2a00      	cmp	r2, #0
 80131a8:	bfb6      	itet	lt
 80131aa:	222d      	movlt	r2, #45	; 0x2d
 80131ac:	2200      	movge	r2, #0
 80131ae:	eeb1 8b40 	vneglt.f64	d8, d0
 80131b2:	2d46      	cmp	r5, #70	; 0x46
 80131b4:	460c      	mov	r4, r1
 80131b6:	701a      	strb	r2, [r3, #0]
 80131b8:	d004      	beq.n	80131c4 <__cvt+0x38>
 80131ba:	2d45      	cmp	r5, #69	; 0x45
 80131bc:	d100      	bne.n	80131c0 <__cvt+0x34>
 80131be:	3401      	adds	r4, #1
 80131c0:	2102      	movs	r1, #2
 80131c2:	e000      	b.n	80131c6 <__cvt+0x3a>
 80131c4:	2103      	movs	r1, #3
 80131c6:	ab03      	add	r3, sp, #12
 80131c8:	9301      	str	r3, [sp, #4]
 80131ca:	ab02      	add	r3, sp, #8
 80131cc:	9300      	str	r3, [sp, #0]
 80131ce:	4622      	mov	r2, r4
 80131d0:	4633      	mov	r3, r6
 80131d2:	eeb0 0b48 	vmov.f64	d0, d8
 80131d6:	f000 fccf 	bl	8013b78 <_dtoa_r>
 80131da:	2d47      	cmp	r5, #71	; 0x47
 80131dc:	d101      	bne.n	80131e2 <__cvt+0x56>
 80131de:	07fb      	lsls	r3, r7, #31
 80131e0:	d51a      	bpl.n	8013218 <__cvt+0x8c>
 80131e2:	2d46      	cmp	r5, #70	; 0x46
 80131e4:	eb00 0204 	add.w	r2, r0, r4
 80131e8:	d10c      	bne.n	8013204 <__cvt+0x78>
 80131ea:	7803      	ldrb	r3, [r0, #0]
 80131ec:	2b30      	cmp	r3, #48	; 0x30
 80131ee:	d107      	bne.n	8013200 <__cvt+0x74>
 80131f0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80131f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80131f8:	bf1c      	itt	ne
 80131fa:	f1c4 0401 	rsbne	r4, r4, #1
 80131fe:	6034      	strne	r4, [r6, #0]
 8013200:	6833      	ldr	r3, [r6, #0]
 8013202:	441a      	add	r2, r3
 8013204:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8013208:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801320c:	bf08      	it	eq
 801320e:	9203      	streq	r2, [sp, #12]
 8013210:	2130      	movs	r1, #48	; 0x30
 8013212:	9b03      	ldr	r3, [sp, #12]
 8013214:	4293      	cmp	r3, r2
 8013216:	d307      	bcc.n	8013228 <__cvt+0x9c>
 8013218:	9b03      	ldr	r3, [sp, #12]
 801321a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801321c:	1a1b      	subs	r3, r3, r0
 801321e:	6013      	str	r3, [r2, #0]
 8013220:	b005      	add	sp, #20
 8013222:	ecbd 8b02 	vpop	{d8}
 8013226:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013228:	1c5c      	adds	r4, r3, #1
 801322a:	9403      	str	r4, [sp, #12]
 801322c:	7019      	strb	r1, [r3, #0]
 801322e:	e7f0      	b.n	8013212 <__cvt+0x86>

08013230 <__exponent>:
 8013230:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013232:	4603      	mov	r3, r0
 8013234:	2900      	cmp	r1, #0
 8013236:	bfb8      	it	lt
 8013238:	4249      	neglt	r1, r1
 801323a:	f803 2b02 	strb.w	r2, [r3], #2
 801323e:	bfb4      	ite	lt
 8013240:	222d      	movlt	r2, #45	; 0x2d
 8013242:	222b      	movge	r2, #43	; 0x2b
 8013244:	2909      	cmp	r1, #9
 8013246:	7042      	strb	r2, [r0, #1]
 8013248:	dd2a      	ble.n	80132a0 <__exponent+0x70>
 801324a:	f10d 0407 	add.w	r4, sp, #7
 801324e:	46a4      	mov	ip, r4
 8013250:	270a      	movs	r7, #10
 8013252:	46a6      	mov	lr, r4
 8013254:	460a      	mov	r2, r1
 8013256:	fb91 f6f7 	sdiv	r6, r1, r7
 801325a:	fb07 1516 	mls	r5, r7, r6, r1
 801325e:	3530      	adds	r5, #48	; 0x30
 8013260:	2a63      	cmp	r2, #99	; 0x63
 8013262:	f104 34ff 	add.w	r4, r4, #4294967295
 8013266:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801326a:	4631      	mov	r1, r6
 801326c:	dcf1      	bgt.n	8013252 <__exponent+0x22>
 801326e:	3130      	adds	r1, #48	; 0x30
 8013270:	f1ae 0502 	sub.w	r5, lr, #2
 8013274:	f804 1c01 	strb.w	r1, [r4, #-1]
 8013278:	1c44      	adds	r4, r0, #1
 801327a:	4629      	mov	r1, r5
 801327c:	4561      	cmp	r1, ip
 801327e:	d30a      	bcc.n	8013296 <__exponent+0x66>
 8013280:	f10d 0209 	add.w	r2, sp, #9
 8013284:	eba2 020e 	sub.w	r2, r2, lr
 8013288:	4565      	cmp	r5, ip
 801328a:	bf88      	it	hi
 801328c:	2200      	movhi	r2, #0
 801328e:	4413      	add	r3, r2
 8013290:	1a18      	subs	r0, r3, r0
 8013292:	b003      	add	sp, #12
 8013294:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013296:	f811 2b01 	ldrb.w	r2, [r1], #1
 801329a:	f804 2f01 	strb.w	r2, [r4, #1]!
 801329e:	e7ed      	b.n	801327c <__exponent+0x4c>
 80132a0:	2330      	movs	r3, #48	; 0x30
 80132a2:	3130      	adds	r1, #48	; 0x30
 80132a4:	7083      	strb	r3, [r0, #2]
 80132a6:	70c1      	strb	r1, [r0, #3]
 80132a8:	1d03      	adds	r3, r0, #4
 80132aa:	e7f1      	b.n	8013290 <__exponent+0x60>
 80132ac:	0000      	movs	r0, r0
	...

080132b0 <_printf_float>:
 80132b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80132b4:	b08b      	sub	sp, #44	; 0x2c
 80132b6:	460c      	mov	r4, r1
 80132b8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 80132bc:	4616      	mov	r6, r2
 80132be:	461f      	mov	r7, r3
 80132c0:	4605      	mov	r5, r0
 80132c2:	f001 f9c7 	bl	8014654 <_localeconv_r>
 80132c6:	f8d0 b000 	ldr.w	fp, [r0]
 80132ca:	4658      	mov	r0, fp
 80132cc:	f7ed f808 	bl	80002e0 <strlen>
 80132d0:	2300      	movs	r3, #0
 80132d2:	9308      	str	r3, [sp, #32]
 80132d4:	f8d8 3000 	ldr.w	r3, [r8]
 80132d8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80132dc:	6822      	ldr	r2, [r4, #0]
 80132de:	3307      	adds	r3, #7
 80132e0:	f023 0307 	bic.w	r3, r3, #7
 80132e4:	f103 0108 	add.w	r1, r3, #8
 80132e8:	f8c8 1000 	str.w	r1, [r8]
 80132ec:	4682      	mov	sl, r0
 80132ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 80132f2:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 80132f6:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8013558 <_printf_float+0x2a8>
 80132fa:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 80132fe:	eeb0 6bc0 	vabs.f64	d6, d0
 8013302:	eeb4 6b47 	vcmp.f64	d6, d7
 8013306:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801330a:	dd24      	ble.n	8013356 <_printf_float+0xa6>
 801330c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8013310:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013314:	d502      	bpl.n	801331c <_printf_float+0x6c>
 8013316:	232d      	movs	r3, #45	; 0x2d
 8013318:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801331c:	4b90      	ldr	r3, [pc, #576]	; (8013560 <_printf_float+0x2b0>)
 801331e:	4891      	ldr	r0, [pc, #580]	; (8013564 <_printf_float+0x2b4>)
 8013320:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8013324:	bf94      	ite	ls
 8013326:	4698      	movls	r8, r3
 8013328:	4680      	movhi	r8, r0
 801332a:	2303      	movs	r3, #3
 801332c:	6123      	str	r3, [r4, #16]
 801332e:	f022 0204 	bic.w	r2, r2, #4
 8013332:	2300      	movs	r3, #0
 8013334:	6022      	str	r2, [r4, #0]
 8013336:	9304      	str	r3, [sp, #16]
 8013338:	9700      	str	r7, [sp, #0]
 801333a:	4633      	mov	r3, r6
 801333c:	aa09      	add	r2, sp, #36	; 0x24
 801333e:	4621      	mov	r1, r4
 8013340:	4628      	mov	r0, r5
 8013342:	f000 f9d3 	bl	80136ec <_printf_common>
 8013346:	3001      	adds	r0, #1
 8013348:	f040 808a 	bne.w	8013460 <_printf_float+0x1b0>
 801334c:	f04f 30ff 	mov.w	r0, #4294967295
 8013350:	b00b      	add	sp, #44	; 0x2c
 8013352:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013356:	eeb4 0b40 	vcmp.f64	d0, d0
 801335a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801335e:	d709      	bvc.n	8013374 <_printf_float+0xc4>
 8013360:	ee10 3a90 	vmov	r3, s1
 8013364:	2b00      	cmp	r3, #0
 8013366:	bfbc      	itt	lt
 8013368:	232d      	movlt	r3, #45	; 0x2d
 801336a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801336e:	487e      	ldr	r0, [pc, #504]	; (8013568 <_printf_float+0x2b8>)
 8013370:	4b7e      	ldr	r3, [pc, #504]	; (801356c <_printf_float+0x2bc>)
 8013372:	e7d5      	b.n	8013320 <_printf_float+0x70>
 8013374:	6863      	ldr	r3, [r4, #4]
 8013376:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 801337a:	9104      	str	r1, [sp, #16]
 801337c:	1c59      	adds	r1, r3, #1
 801337e:	d13c      	bne.n	80133fa <_printf_float+0x14a>
 8013380:	2306      	movs	r3, #6
 8013382:	6063      	str	r3, [r4, #4]
 8013384:	2300      	movs	r3, #0
 8013386:	9303      	str	r3, [sp, #12]
 8013388:	ab08      	add	r3, sp, #32
 801338a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 801338e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8013392:	ab07      	add	r3, sp, #28
 8013394:	6861      	ldr	r1, [r4, #4]
 8013396:	9300      	str	r3, [sp, #0]
 8013398:	6022      	str	r2, [r4, #0]
 801339a:	f10d 031b 	add.w	r3, sp, #27
 801339e:	4628      	mov	r0, r5
 80133a0:	f7ff fef4 	bl	801318c <__cvt>
 80133a4:	9b04      	ldr	r3, [sp, #16]
 80133a6:	9907      	ldr	r1, [sp, #28]
 80133a8:	2b47      	cmp	r3, #71	; 0x47
 80133aa:	4680      	mov	r8, r0
 80133ac:	d108      	bne.n	80133c0 <_printf_float+0x110>
 80133ae:	1cc8      	adds	r0, r1, #3
 80133b0:	db02      	blt.n	80133b8 <_printf_float+0x108>
 80133b2:	6863      	ldr	r3, [r4, #4]
 80133b4:	4299      	cmp	r1, r3
 80133b6:	dd41      	ble.n	801343c <_printf_float+0x18c>
 80133b8:	f1a9 0902 	sub.w	r9, r9, #2
 80133bc:	fa5f f989 	uxtb.w	r9, r9
 80133c0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80133c4:	d820      	bhi.n	8013408 <_printf_float+0x158>
 80133c6:	3901      	subs	r1, #1
 80133c8:	464a      	mov	r2, r9
 80133ca:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80133ce:	9107      	str	r1, [sp, #28]
 80133d0:	f7ff ff2e 	bl	8013230 <__exponent>
 80133d4:	9a08      	ldr	r2, [sp, #32]
 80133d6:	9004      	str	r0, [sp, #16]
 80133d8:	1813      	adds	r3, r2, r0
 80133da:	2a01      	cmp	r2, #1
 80133dc:	6123      	str	r3, [r4, #16]
 80133de:	dc02      	bgt.n	80133e6 <_printf_float+0x136>
 80133e0:	6822      	ldr	r2, [r4, #0]
 80133e2:	07d2      	lsls	r2, r2, #31
 80133e4:	d501      	bpl.n	80133ea <_printf_float+0x13a>
 80133e6:	3301      	adds	r3, #1
 80133e8:	6123      	str	r3, [r4, #16]
 80133ea:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80133ee:	2b00      	cmp	r3, #0
 80133f0:	d0a2      	beq.n	8013338 <_printf_float+0x88>
 80133f2:	232d      	movs	r3, #45	; 0x2d
 80133f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80133f8:	e79e      	b.n	8013338 <_printf_float+0x88>
 80133fa:	9904      	ldr	r1, [sp, #16]
 80133fc:	2947      	cmp	r1, #71	; 0x47
 80133fe:	d1c1      	bne.n	8013384 <_printf_float+0xd4>
 8013400:	2b00      	cmp	r3, #0
 8013402:	d1bf      	bne.n	8013384 <_printf_float+0xd4>
 8013404:	2301      	movs	r3, #1
 8013406:	e7bc      	b.n	8013382 <_printf_float+0xd2>
 8013408:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 801340c:	d118      	bne.n	8013440 <_printf_float+0x190>
 801340e:	2900      	cmp	r1, #0
 8013410:	6863      	ldr	r3, [r4, #4]
 8013412:	dd0b      	ble.n	801342c <_printf_float+0x17c>
 8013414:	6121      	str	r1, [r4, #16]
 8013416:	b913      	cbnz	r3, 801341e <_printf_float+0x16e>
 8013418:	6822      	ldr	r2, [r4, #0]
 801341a:	07d0      	lsls	r0, r2, #31
 801341c:	d502      	bpl.n	8013424 <_printf_float+0x174>
 801341e:	3301      	adds	r3, #1
 8013420:	440b      	add	r3, r1
 8013422:	6123      	str	r3, [r4, #16]
 8013424:	2300      	movs	r3, #0
 8013426:	65a1      	str	r1, [r4, #88]	; 0x58
 8013428:	9304      	str	r3, [sp, #16]
 801342a:	e7de      	b.n	80133ea <_printf_float+0x13a>
 801342c:	b913      	cbnz	r3, 8013434 <_printf_float+0x184>
 801342e:	6822      	ldr	r2, [r4, #0]
 8013430:	07d2      	lsls	r2, r2, #31
 8013432:	d501      	bpl.n	8013438 <_printf_float+0x188>
 8013434:	3302      	adds	r3, #2
 8013436:	e7f4      	b.n	8013422 <_printf_float+0x172>
 8013438:	2301      	movs	r3, #1
 801343a:	e7f2      	b.n	8013422 <_printf_float+0x172>
 801343c:	f04f 0967 	mov.w	r9, #103	; 0x67
 8013440:	9b08      	ldr	r3, [sp, #32]
 8013442:	4299      	cmp	r1, r3
 8013444:	db05      	blt.n	8013452 <_printf_float+0x1a2>
 8013446:	6823      	ldr	r3, [r4, #0]
 8013448:	6121      	str	r1, [r4, #16]
 801344a:	07d8      	lsls	r0, r3, #31
 801344c:	d5ea      	bpl.n	8013424 <_printf_float+0x174>
 801344e:	1c4b      	adds	r3, r1, #1
 8013450:	e7e7      	b.n	8013422 <_printf_float+0x172>
 8013452:	2900      	cmp	r1, #0
 8013454:	bfd4      	ite	le
 8013456:	f1c1 0202 	rsble	r2, r1, #2
 801345a:	2201      	movgt	r2, #1
 801345c:	4413      	add	r3, r2
 801345e:	e7e0      	b.n	8013422 <_printf_float+0x172>
 8013460:	6823      	ldr	r3, [r4, #0]
 8013462:	055a      	lsls	r2, r3, #21
 8013464:	d407      	bmi.n	8013476 <_printf_float+0x1c6>
 8013466:	6923      	ldr	r3, [r4, #16]
 8013468:	4642      	mov	r2, r8
 801346a:	4631      	mov	r1, r6
 801346c:	4628      	mov	r0, r5
 801346e:	47b8      	blx	r7
 8013470:	3001      	adds	r0, #1
 8013472:	d12a      	bne.n	80134ca <_printf_float+0x21a>
 8013474:	e76a      	b.n	801334c <_printf_float+0x9c>
 8013476:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801347a:	f240 80e2 	bls.w	8013642 <_printf_float+0x392>
 801347e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8013482:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8013486:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801348a:	d133      	bne.n	80134f4 <_printf_float+0x244>
 801348c:	4a38      	ldr	r2, [pc, #224]	; (8013570 <_printf_float+0x2c0>)
 801348e:	2301      	movs	r3, #1
 8013490:	4631      	mov	r1, r6
 8013492:	4628      	mov	r0, r5
 8013494:	47b8      	blx	r7
 8013496:	3001      	adds	r0, #1
 8013498:	f43f af58 	beq.w	801334c <_printf_float+0x9c>
 801349c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80134a0:	429a      	cmp	r2, r3
 80134a2:	db02      	blt.n	80134aa <_printf_float+0x1fa>
 80134a4:	6823      	ldr	r3, [r4, #0]
 80134a6:	07d8      	lsls	r0, r3, #31
 80134a8:	d50f      	bpl.n	80134ca <_printf_float+0x21a>
 80134aa:	4653      	mov	r3, sl
 80134ac:	465a      	mov	r2, fp
 80134ae:	4631      	mov	r1, r6
 80134b0:	4628      	mov	r0, r5
 80134b2:	47b8      	blx	r7
 80134b4:	3001      	adds	r0, #1
 80134b6:	f43f af49 	beq.w	801334c <_printf_float+0x9c>
 80134ba:	f04f 0800 	mov.w	r8, #0
 80134be:	f104 091a 	add.w	r9, r4, #26
 80134c2:	9b08      	ldr	r3, [sp, #32]
 80134c4:	3b01      	subs	r3, #1
 80134c6:	4543      	cmp	r3, r8
 80134c8:	dc09      	bgt.n	80134de <_printf_float+0x22e>
 80134ca:	6823      	ldr	r3, [r4, #0]
 80134cc:	079b      	lsls	r3, r3, #30
 80134ce:	f100 8108 	bmi.w	80136e2 <_printf_float+0x432>
 80134d2:	68e0      	ldr	r0, [r4, #12]
 80134d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80134d6:	4298      	cmp	r0, r3
 80134d8:	bfb8      	it	lt
 80134da:	4618      	movlt	r0, r3
 80134dc:	e738      	b.n	8013350 <_printf_float+0xa0>
 80134de:	2301      	movs	r3, #1
 80134e0:	464a      	mov	r2, r9
 80134e2:	4631      	mov	r1, r6
 80134e4:	4628      	mov	r0, r5
 80134e6:	47b8      	blx	r7
 80134e8:	3001      	adds	r0, #1
 80134ea:	f43f af2f 	beq.w	801334c <_printf_float+0x9c>
 80134ee:	f108 0801 	add.w	r8, r8, #1
 80134f2:	e7e6      	b.n	80134c2 <_printf_float+0x212>
 80134f4:	9b07      	ldr	r3, [sp, #28]
 80134f6:	2b00      	cmp	r3, #0
 80134f8:	dc3c      	bgt.n	8013574 <_printf_float+0x2c4>
 80134fa:	4a1d      	ldr	r2, [pc, #116]	; (8013570 <_printf_float+0x2c0>)
 80134fc:	2301      	movs	r3, #1
 80134fe:	4631      	mov	r1, r6
 8013500:	4628      	mov	r0, r5
 8013502:	47b8      	blx	r7
 8013504:	3001      	adds	r0, #1
 8013506:	f43f af21 	beq.w	801334c <_printf_float+0x9c>
 801350a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801350e:	4313      	orrs	r3, r2
 8013510:	d102      	bne.n	8013518 <_printf_float+0x268>
 8013512:	6823      	ldr	r3, [r4, #0]
 8013514:	07d9      	lsls	r1, r3, #31
 8013516:	d5d8      	bpl.n	80134ca <_printf_float+0x21a>
 8013518:	4653      	mov	r3, sl
 801351a:	465a      	mov	r2, fp
 801351c:	4631      	mov	r1, r6
 801351e:	4628      	mov	r0, r5
 8013520:	47b8      	blx	r7
 8013522:	3001      	adds	r0, #1
 8013524:	f43f af12 	beq.w	801334c <_printf_float+0x9c>
 8013528:	f04f 0900 	mov.w	r9, #0
 801352c:	f104 0a1a 	add.w	sl, r4, #26
 8013530:	9b07      	ldr	r3, [sp, #28]
 8013532:	425b      	negs	r3, r3
 8013534:	454b      	cmp	r3, r9
 8013536:	dc01      	bgt.n	801353c <_printf_float+0x28c>
 8013538:	9b08      	ldr	r3, [sp, #32]
 801353a:	e795      	b.n	8013468 <_printf_float+0x1b8>
 801353c:	2301      	movs	r3, #1
 801353e:	4652      	mov	r2, sl
 8013540:	4631      	mov	r1, r6
 8013542:	4628      	mov	r0, r5
 8013544:	47b8      	blx	r7
 8013546:	3001      	adds	r0, #1
 8013548:	f43f af00 	beq.w	801334c <_printf_float+0x9c>
 801354c:	f109 0901 	add.w	r9, r9, #1
 8013550:	e7ee      	b.n	8013530 <_printf_float+0x280>
 8013552:	bf00      	nop
 8013554:	f3af 8000 	nop.w
 8013558:	ffffffff 	.word	0xffffffff
 801355c:	7fefffff 	.word	0x7fefffff
 8013560:	08017054 	.word	0x08017054
 8013564:	08017058 	.word	0x08017058
 8013568:	08017060 	.word	0x08017060
 801356c:	0801705c 	.word	0x0801705c
 8013570:	08017064 	.word	0x08017064
 8013574:	9a08      	ldr	r2, [sp, #32]
 8013576:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8013578:	429a      	cmp	r2, r3
 801357a:	bfa8      	it	ge
 801357c:	461a      	movge	r2, r3
 801357e:	2a00      	cmp	r2, #0
 8013580:	4691      	mov	r9, r2
 8013582:	dc38      	bgt.n	80135f6 <_printf_float+0x346>
 8013584:	2300      	movs	r3, #0
 8013586:	9305      	str	r3, [sp, #20]
 8013588:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801358c:	f104 021a 	add.w	r2, r4, #26
 8013590:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8013592:	9905      	ldr	r1, [sp, #20]
 8013594:	9304      	str	r3, [sp, #16]
 8013596:	eba3 0309 	sub.w	r3, r3, r9
 801359a:	428b      	cmp	r3, r1
 801359c:	dc33      	bgt.n	8013606 <_printf_float+0x356>
 801359e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80135a2:	429a      	cmp	r2, r3
 80135a4:	db3c      	blt.n	8013620 <_printf_float+0x370>
 80135a6:	6823      	ldr	r3, [r4, #0]
 80135a8:	07da      	lsls	r2, r3, #31
 80135aa:	d439      	bmi.n	8013620 <_printf_float+0x370>
 80135ac:	9b08      	ldr	r3, [sp, #32]
 80135ae:	9a04      	ldr	r2, [sp, #16]
 80135b0:	9907      	ldr	r1, [sp, #28]
 80135b2:	1a9a      	subs	r2, r3, r2
 80135b4:	eba3 0901 	sub.w	r9, r3, r1
 80135b8:	4591      	cmp	r9, r2
 80135ba:	bfa8      	it	ge
 80135bc:	4691      	movge	r9, r2
 80135be:	f1b9 0f00 	cmp.w	r9, #0
 80135c2:	dc35      	bgt.n	8013630 <_printf_float+0x380>
 80135c4:	f04f 0800 	mov.w	r8, #0
 80135c8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80135cc:	f104 0a1a 	add.w	sl, r4, #26
 80135d0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80135d4:	1a9b      	subs	r3, r3, r2
 80135d6:	eba3 0309 	sub.w	r3, r3, r9
 80135da:	4543      	cmp	r3, r8
 80135dc:	f77f af75 	ble.w	80134ca <_printf_float+0x21a>
 80135e0:	2301      	movs	r3, #1
 80135e2:	4652      	mov	r2, sl
 80135e4:	4631      	mov	r1, r6
 80135e6:	4628      	mov	r0, r5
 80135e8:	47b8      	blx	r7
 80135ea:	3001      	adds	r0, #1
 80135ec:	f43f aeae 	beq.w	801334c <_printf_float+0x9c>
 80135f0:	f108 0801 	add.w	r8, r8, #1
 80135f4:	e7ec      	b.n	80135d0 <_printf_float+0x320>
 80135f6:	4613      	mov	r3, r2
 80135f8:	4631      	mov	r1, r6
 80135fa:	4642      	mov	r2, r8
 80135fc:	4628      	mov	r0, r5
 80135fe:	47b8      	blx	r7
 8013600:	3001      	adds	r0, #1
 8013602:	d1bf      	bne.n	8013584 <_printf_float+0x2d4>
 8013604:	e6a2      	b.n	801334c <_printf_float+0x9c>
 8013606:	2301      	movs	r3, #1
 8013608:	4631      	mov	r1, r6
 801360a:	4628      	mov	r0, r5
 801360c:	9204      	str	r2, [sp, #16]
 801360e:	47b8      	blx	r7
 8013610:	3001      	adds	r0, #1
 8013612:	f43f ae9b 	beq.w	801334c <_printf_float+0x9c>
 8013616:	9b05      	ldr	r3, [sp, #20]
 8013618:	9a04      	ldr	r2, [sp, #16]
 801361a:	3301      	adds	r3, #1
 801361c:	9305      	str	r3, [sp, #20]
 801361e:	e7b7      	b.n	8013590 <_printf_float+0x2e0>
 8013620:	4653      	mov	r3, sl
 8013622:	465a      	mov	r2, fp
 8013624:	4631      	mov	r1, r6
 8013626:	4628      	mov	r0, r5
 8013628:	47b8      	blx	r7
 801362a:	3001      	adds	r0, #1
 801362c:	d1be      	bne.n	80135ac <_printf_float+0x2fc>
 801362e:	e68d      	b.n	801334c <_printf_float+0x9c>
 8013630:	9a04      	ldr	r2, [sp, #16]
 8013632:	464b      	mov	r3, r9
 8013634:	4442      	add	r2, r8
 8013636:	4631      	mov	r1, r6
 8013638:	4628      	mov	r0, r5
 801363a:	47b8      	blx	r7
 801363c:	3001      	adds	r0, #1
 801363e:	d1c1      	bne.n	80135c4 <_printf_float+0x314>
 8013640:	e684      	b.n	801334c <_printf_float+0x9c>
 8013642:	9a08      	ldr	r2, [sp, #32]
 8013644:	2a01      	cmp	r2, #1
 8013646:	dc01      	bgt.n	801364c <_printf_float+0x39c>
 8013648:	07db      	lsls	r3, r3, #31
 801364a:	d537      	bpl.n	80136bc <_printf_float+0x40c>
 801364c:	2301      	movs	r3, #1
 801364e:	4642      	mov	r2, r8
 8013650:	4631      	mov	r1, r6
 8013652:	4628      	mov	r0, r5
 8013654:	47b8      	blx	r7
 8013656:	3001      	adds	r0, #1
 8013658:	f43f ae78 	beq.w	801334c <_printf_float+0x9c>
 801365c:	4653      	mov	r3, sl
 801365e:	465a      	mov	r2, fp
 8013660:	4631      	mov	r1, r6
 8013662:	4628      	mov	r0, r5
 8013664:	47b8      	blx	r7
 8013666:	3001      	adds	r0, #1
 8013668:	f43f ae70 	beq.w	801334c <_printf_float+0x9c>
 801366c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8013670:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8013674:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013678:	d01b      	beq.n	80136b2 <_printf_float+0x402>
 801367a:	9b08      	ldr	r3, [sp, #32]
 801367c:	f108 0201 	add.w	r2, r8, #1
 8013680:	3b01      	subs	r3, #1
 8013682:	4631      	mov	r1, r6
 8013684:	4628      	mov	r0, r5
 8013686:	47b8      	blx	r7
 8013688:	3001      	adds	r0, #1
 801368a:	d10e      	bne.n	80136aa <_printf_float+0x3fa>
 801368c:	e65e      	b.n	801334c <_printf_float+0x9c>
 801368e:	2301      	movs	r3, #1
 8013690:	464a      	mov	r2, r9
 8013692:	4631      	mov	r1, r6
 8013694:	4628      	mov	r0, r5
 8013696:	47b8      	blx	r7
 8013698:	3001      	adds	r0, #1
 801369a:	f43f ae57 	beq.w	801334c <_printf_float+0x9c>
 801369e:	f108 0801 	add.w	r8, r8, #1
 80136a2:	9b08      	ldr	r3, [sp, #32]
 80136a4:	3b01      	subs	r3, #1
 80136a6:	4543      	cmp	r3, r8
 80136a8:	dcf1      	bgt.n	801368e <_printf_float+0x3de>
 80136aa:	9b04      	ldr	r3, [sp, #16]
 80136ac:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80136b0:	e6db      	b.n	801346a <_printf_float+0x1ba>
 80136b2:	f04f 0800 	mov.w	r8, #0
 80136b6:	f104 091a 	add.w	r9, r4, #26
 80136ba:	e7f2      	b.n	80136a2 <_printf_float+0x3f2>
 80136bc:	2301      	movs	r3, #1
 80136be:	4642      	mov	r2, r8
 80136c0:	e7df      	b.n	8013682 <_printf_float+0x3d2>
 80136c2:	2301      	movs	r3, #1
 80136c4:	464a      	mov	r2, r9
 80136c6:	4631      	mov	r1, r6
 80136c8:	4628      	mov	r0, r5
 80136ca:	47b8      	blx	r7
 80136cc:	3001      	adds	r0, #1
 80136ce:	f43f ae3d 	beq.w	801334c <_printf_float+0x9c>
 80136d2:	f108 0801 	add.w	r8, r8, #1
 80136d6:	68e3      	ldr	r3, [r4, #12]
 80136d8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80136da:	1a5b      	subs	r3, r3, r1
 80136dc:	4543      	cmp	r3, r8
 80136de:	dcf0      	bgt.n	80136c2 <_printf_float+0x412>
 80136e0:	e6f7      	b.n	80134d2 <_printf_float+0x222>
 80136e2:	f04f 0800 	mov.w	r8, #0
 80136e6:	f104 0919 	add.w	r9, r4, #25
 80136ea:	e7f4      	b.n	80136d6 <_printf_float+0x426>

080136ec <_printf_common>:
 80136ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80136f0:	4616      	mov	r6, r2
 80136f2:	4699      	mov	r9, r3
 80136f4:	688a      	ldr	r2, [r1, #8]
 80136f6:	690b      	ldr	r3, [r1, #16]
 80136f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80136fc:	4293      	cmp	r3, r2
 80136fe:	bfb8      	it	lt
 8013700:	4613      	movlt	r3, r2
 8013702:	6033      	str	r3, [r6, #0]
 8013704:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013708:	4607      	mov	r7, r0
 801370a:	460c      	mov	r4, r1
 801370c:	b10a      	cbz	r2, 8013712 <_printf_common+0x26>
 801370e:	3301      	adds	r3, #1
 8013710:	6033      	str	r3, [r6, #0]
 8013712:	6823      	ldr	r3, [r4, #0]
 8013714:	0699      	lsls	r1, r3, #26
 8013716:	bf42      	ittt	mi
 8013718:	6833      	ldrmi	r3, [r6, #0]
 801371a:	3302      	addmi	r3, #2
 801371c:	6033      	strmi	r3, [r6, #0]
 801371e:	6825      	ldr	r5, [r4, #0]
 8013720:	f015 0506 	ands.w	r5, r5, #6
 8013724:	d106      	bne.n	8013734 <_printf_common+0x48>
 8013726:	f104 0a19 	add.w	sl, r4, #25
 801372a:	68e3      	ldr	r3, [r4, #12]
 801372c:	6832      	ldr	r2, [r6, #0]
 801372e:	1a9b      	subs	r3, r3, r2
 8013730:	42ab      	cmp	r3, r5
 8013732:	dc26      	bgt.n	8013782 <_printf_common+0x96>
 8013734:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8013738:	1e13      	subs	r3, r2, #0
 801373a:	6822      	ldr	r2, [r4, #0]
 801373c:	bf18      	it	ne
 801373e:	2301      	movne	r3, #1
 8013740:	0692      	lsls	r2, r2, #26
 8013742:	d42b      	bmi.n	801379c <_printf_common+0xb0>
 8013744:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013748:	4649      	mov	r1, r9
 801374a:	4638      	mov	r0, r7
 801374c:	47c0      	blx	r8
 801374e:	3001      	adds	r0, #1
 8013750:	d01e      	beq.n	8013790 <_printf_common+0xa4>
 8013752:	6823      	ldr	r3, [r4, #0]
 8013754:	68e5      	ldr	r5, [r4, #12]
 8013756:	6832      	ldr	r2, [r6, #0]
 8013758:	f003 0306 	and.w	r3, r3, #6
 801375c:	2b04      	cmp	r3, #4
 801375e:	bf08      	it	eq
 8013760:	1aad      	subeq	r5, r5, r2
 8013762:	68a3      	ldr	r3, [r4, #8]
 8013764:	6922      	ldr	r2, [r4, #16]
 8013766:	bf0c      	ite	eq
 8013768:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801376c:	2500      	movne	r5, #0
 801376e:	4293      	cmp	r3, r2
 8013770:	bfc4      	itt	gt
 8013772:	1a9b      	subgt	r3, r3, r2
 8013774:	18ed      	addgt	r5, r5, r3
 8013776:	2600      	movs	r6, #0
 8013778:	341a      	adds	r4, #26
 801377a:	42b5      	cmp	r5, r6
 801377c:	d11a      	bne.n	80137b4 <_printf_common+0xc8>
 801377e:	2000      	movs	r0, #0
 8013780:	e008      	b.n	8013794 <_printf_common+0xa8>
 8013782:	2301      	movs	r3, #1
 8013784:	4652      	mov	r2, sl
 8013786:	4649      	mov	r1, r9
 8013788:	4638      	mov	r0, r7
 801378a:	47c0      	blx	r8
 801378c:	3001      	adds	r0, #1
 801378e:	d103      	bne.n	8013798 <_printf_common+0xac>
 8013790:	f04f 30ff 	mov.w	r0, #4294967295
 8013794:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013798:	3501      	adds	r5, #1
 801379a:	e7c6      	b.n	801372a <_printf_common+0x3e>
 801379c:	18e1      	adds	r1, r4, r3
 801379e:	1c5a      	adds	r2, r3, #1
 80137a0:	2030      	movs	r0, #48	; 0x30
 80137a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80137a6:	4422      	add	r2, r4
 80137a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80137ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80137b0:	3302      	adds	r3, #2
 80137b2:	e7c7      	b.n	8013744 <_printf_common+0x58>
 80137b4:	2301      	movs	r3, #1
 80137b6:	4622      	mov	r2, r4
 80137b8:	4649      	mov	r1, r9
 80137ba:	4638      	mov	r0, r7
 80137bc:	47c0      	blx	r8
 80137be:	3001      	adds	r0, #1
 80137c0:	d0e6      	beq.n	8013790 <_printf_common+0xa4>
 80137c2:	3601      	adds	r6, #1
 80137c4:	e7d9      	b.n	801377a <_printf_common+0x8e>
	...

080137c8 <_printf_i>:
 80137c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80137cc:	7e0f      	ldrb	r7, [r1, #24]
 80137ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80137d0:	2f78      	cmp	r7, #120	; 0x78
 80137d2:	4691      	mov	r9, r2
 80137d4:	4680      	mov	r8, r0
 80137d6:	460c      	mov	r4, r1
 80137d8:	469a      	mov	sl, r3
 80137da:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80137de:	d807      	bhi.n	80137f0 <_printf_i+0x28>
 80137e0:	2f62      	cmp	r7, #98	; 0x62
 80137e2:	d80a      	bhi.n	80137fa <_printf_i+0x32>
 80137e4:	2f00      	cmp	r7, #0
 80137e6:	f000 80d8 	beq.w	801399a <_printf_i+0x1d2>
 80137ea:	2f58      	cmp	r7, #88	; 0x58
 80137ec:	f000 80a3 	beq.w	8013936 <_printf_i+0x16e>
 80137f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80137f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80137f8:	e03a      	b.n	8013870 <_printf_i+0xa8>
 80137fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80137fe:	2b15      	cmp	r3, #21
 8013800:	d8f6      	bhi.n	80137f0 <_printf_i+0x28>
 8013802:	a101      	add	r1, pc, #4	; (adr r1, 8013808 <_printf_i+0x40>)
 8013804:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013808:	08013861 	.word	0x08013861
 801380c:	08013875 	.word	0x08013875
 8013810:	080137f1 	.word	0x080137f1
 8013814:	080137f1 	.word	0x080137f1
 8013818:	080137f1 	.word	0x080137f1
 801381c:	080137f1 	.word	0x080137f1
 8013820:	08013875 	.word	0x08013875
 8013824:	080137f1 	.word	0x080137f1
 8013828:	080137f1 	.word	0x080137f1
 801382c:	080137f1 	.word	0x080137f1
 8013830:	080137f1 	.word	0x080137f1
 8013834:	08013981 	.word	0x08013981
 8013838:	080138a5 	.word	0x080138a5
 801383c:	08013963 	.word	0x08013963
 8013840:	080137f1 	.word	0x080137f1
 8013844:	080137f1 	.word	0x080137f1
 8013848:	080139a3 	.word	0x080139a3
 801384c:	080137f1 	.word	0x080137f1
 8013850:	080138a5 	.word	0x080138a5
 8013854:	080137f1 	.word	0x080137f1
 8013858:	080137f1 	.word	0x080137f1
 801385c:	0801396b 	.word	0x0801396b
 8013860:	682b      	ldr	r3, [r5, #0]
 8013862:	1d1a      	adds	r2, r3, #4
 8013864:	681b      	ldr	r3, [r3, #0]
 8013866:	602a      	str	r2, [r5, #0]
 8013868:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801386c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013870:	2301      	movs	r3, #1
 8013872:	e0a3      	b.n	80139bc <_printf_i+0x1f4>
 8013874:	6820      	ldr	r0, [r4, #0]
 8013876:	6829      	ldr	r1, [r5, #0]
 8013878:	0606      	lsls	r6, r0, #24
 801387a:	f101 0304 	add.w	r3, r1, #4
 801387e:	d50a      	bpl.n	8013896 <_printf_i+0xce>
 8013880:	680e      	ldr	r6, [r1, #0]
 8013882:	602b      	str	r3, [r5, #0]
 8013884:	2e00      	cmp	r6, #0
 8013886:	da03      	bge.n	8013890 <_printf_i+0xc8>
 8013888:	232d      	movs	r3, #45	; 0x2d
 801388a:	4276      	negs	r6, r6
 801388c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013890:	485e      	ldr	r0, [pc, #376]	; (8013a0c <_printf_i+0x244>)
 8013892:	230a      	movs	r3, #10
 8013894:	e019      	b.n	80138ca <_printf_i+0x102>
 8013896:	680e      	ldr	r6, [r1, #0]
 8013898:	602b      	str	r3, [r5, #0]
 801389a:	f010 0f40 	tst.w	r0, #64	; 0x40
 801389e:	bf18      	it	ne
 80138a0:	b236      	sxthne	r6, r6
 80138a2:	e7ef      	b.n	8013884 <_printf_i+0xbc>
 80138a4:	682b      	ldr	r3, [r5, #0]
 80138a6:	6820      	ldr	r0, [r4, #0]
 80138a8:	1d19      	adds	r1, r3, #4
 80138aa:	6029      	str	r1, [r5, #0]
 80138ac:	0601      	lsls	r1, r0, #24
 80138ae:	d501      	bpl.n	80138b4 <_printf_i+0xec>
 80138b0:	681e      	ldr	r6, [r3, #0]
 80138b2:	e002      	b.n	80138ba <_printf_i+0xf2>
 80138b4:	0646      	lsls	r6, r0, #25
 80138b6:	d5fb      	bpl.n	80138b0 <_printf_i+0xe8>
 80138b8:	881e      	ldrh	r6, [r3, #0]
 80138ba:	4854      	ldr	r0, [pc, #336]	; (8013a0c <_printf_i+0x244>)
 80138bc:	2f6f      	cmp	r7, #111	; 0x6f
 80138be:	bf0c      	ite	eq
 80138c0:	2308      	moveq	r3, #8
 80138c2:	230a      	movne	r3, #10
 80138c4:	2100      	movs	r1, #0
 80138c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80138ca:	6865      	ldr	r5, [r4, #4]
 80138cc:	60a5      	str	r5, [r4, #8]
 80138ce:	2d00      	cmp	r5, #0
 80138d0:	bfa2      	ittt	ge
 80138d2:	6821      	ldrge	r1, [r4, #0]
 80138d4:	f021 0104 	bicge.w	r1, r1, #4
 80138d8:	6021      	strge	r1, [r4, #0]
 80138da:	b90e      	cbnz	r6, 80138e0 <_printf_i+0x118>
 80138dc:	2d00      	cmp	r5, #0
 80138de:	d04d      	beq.n	801397c <_printf_i+0x1b4>
 80138e0:	4615      	mov	r5, r2
 80138e2:	fbb6 f1f3 	udiv	r1, r6, r3
 80138e6:	fb03 6711 	mls	r7, r3, r1, r6
 80138ea:	5dc7      	ldrb	r7, [r0, r7]
 80138ec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80138f0:	4637      	mov	r7, r6
 80138f2:	42bb      	cmp	r3, r7
 80138f4:	460e      	mov	r6, r1
 80138f6:	d9f4      	bls.n	80138e2 <_printf_i+0x11a>
 80138f8:	2b08      	cmp	r3, #8
 80138fa:	d10b      	bne.n	8013914 <_printf_i+0x14c>
 80138fc:	6823      	ldr	r3, [r4, #0]
 80138fe:	07de      	lsls	r6, r3, #31
 8013900:	d508      	bpl.n	8013914 <_printf_i+0x14c>
 8013902:	6923      	ldr	r3, [r4, #16]
 8013904:	6861      	ldr	r1, [r4, #4]
 8013906:	4299      	cmp	r1, r3
 8013908:	bfde      	ittt	le
 801390a:	2330      	movle	r3, #48	; 0x30
 801390c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8013910:	f105 35ff 	addle.w	r5, r5, #4294967295
 8013914:	1b52      	subs	r2, r2, r5
 8013916:	6122      	str	r2, [r4, #16]
 8013918:	f8cd a000 	str.w	sl, [sp]
 801391c:	464b      	mov	r3, r9
 801391e:	aa03      	add	r2, sp, #12
 8013920:	4621      	mov	r1, r4
 8013922:	4640      	mov	r0, r8
 8013924:	f7ff fee2 	bl	80136ec <_printf_common>
 8013928:	3001      	adds	r0, #1
 801392a:	d14c      	bne.n	80139c6 <_printf_i+0x1fe>
 801392c:	f04f 30ff 	mov.w	r0, #4294967295
 8013930:	b004      	add	sp, #16
 8013932:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013936:	4835      	ldr	r0, [pc, #212]	; (8013a0c <_printf_i+0x244>)
 8013938:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801393c:	6829      	ldr	r1, [r5, #0]
 801393e:	6823      	ldr	r3, [r4, #0]
 8013940:	f851 6b04 	ldr.w	r6, [r1], #4
 8013944:	6029      	str	r1, [r5, #0]
 8013946:	061d      	lsls	r5, r3, #24
 8013948:	d514      	bpl.n	8013974 <_printf_i+0x1ac>
 801394a:	07df      	lsls	r7, r3, #31
 801394c:	bf44      	itt	mi
 801394e:	f043 0320 	orrmi.w	r3, r3, #32
 8013952:	6023      	strmi	r3, [r4, #0]
 8013954:	b91e      	cbnz	r6, 801395e <_printf_i+0x196>
 8013956:	6823      	ldr	r3, [r4, #0]
 8013958:	f023 0320 	bic.w	r3, r3, #32
 801395c:	6023      	str	r3, [r4, #0]
 801395e:	2310      	movs	r3, #16
 8013960:	e7b0      	b.n	80138c4 <_printf_i+0xfc>
 8013962:	6823      	ldr	r3, [r4, #0]
 8013964:	f043 0320 	orr.w	r3, r3, #32
 8013968:	6023      	str	r3, [r4, #0]
 801396a:	2378      	movs	r3, #120	; 0x78
 801396c:	4828      	ldr	r0, [pc, #160]	; (8013a10 <_printf_i+0x248>)
 801396e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013972:	e7e3      	b.n	801393c <_printf_i+0x174>
 8013974:	0659      	lsls	r1, r3, #25
 8013976:	bf48      	it	mi
 8013978:	b2b6      	uxthmi	r6, r6
 801397a:	e7e6      	b.n	801394a <_printf_i+0x182>
 801397c:	4615      	mov	r5, r2
 801397e:	e7bb      	b.n	80138f8 <_printf_i+0x130>
 8013980:	682b      	ldr	r3, [r5, #0]
 8013982:	6826      	ldr	r6, [r4, #0]
 8013984:	6961      	ldr	r1, [r4, #20]
 8013986:	1d18      	adds	r0, r3, #4
 8013988:	6028      	str	r0, [r5, #0]
 801398a:	0635      	lsls	r5, r6, #24
 801398c:	681b      	ldr	r3, [r3, #0]
 801398e:	d501      	bpl.n	8013994 <_printf_i+0x1cc>
 8013990:	6019      	str	r1, [r3, #0]
 8013992:	e002      	b.n	801399a <_printf_i+0x1d2>
 8013994:	0670      	lsls	r0, r6, #25
 8013996:	d5fb      	bpl.n	8013990 <_printf_i+0x1c8>
 8013998:	8019      	strh	r1, [r3, #0]
 801399a:	2300      	movs	r3, #0
 801399c:	6123      	str	r3, [r4, #16]
 801399e:	4615      	mov	r5, r2
 80139a0:	e7ba      	b.n	8013918 <_printf_i+0x150>
 80139a2:	682b      	ldr	r3, [r5, #0]
 80139a4:	1d1a      	adds	r2, r3, #4
 80139a6:	602a      	str	r2, [r5, #0]
 80139a8:	681d      	ldr	r5, [r3, #0]
 80139aa:	6862      	ldr	r2, [r4, #4]
 80139ac:	2100      	movs	r1, #0
 80139ae:	4628      	mov	r0, r5
 80139b0:	f7ec fc9e 	bl	80002f0 <memchr>
 80139b4:	b108      	cbz	r0, 80139ba <_printf_i+0x1f2>
 80139b6:	1b40      	subs	r0, r0, r5
 80139b8:	6060      	str	r0, [r4, #4]
 80139ba:	6863      	ldr	r3, [r4, #4]
 80139bc:	6123      	str	r3, [r4, #16]
 80139be:	2300      	movs	r3, #0
 80139c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80139c4:	e7a8      	b.n	8013918 <_printf_i+0x150>
 80139c6:	6923      	ldr	r3, [r4, #16]
 80139c8:	462a      	mov	r2, r5
 80139ca:	4649      	mov	r1, r9
 80139cc:	4640      	mov	r0, r8
 80139ce:	47d0      	blx	sl
 80139d0:	3001      	adds	r0, #1
 80139d2:	d0ab      	beq.n	801392c <_printf_i+0x164>
 80139d4:	6823      	ldr	r3, [r4, #0]
 80139d6:	079b      	lsls	r3, r3, #30
 80139d8:	d413      	bmi.n	8013a02 <_printf_i+0x23a>
 80139da:	68e0      	ldr	r0, [r4, #12]
 80139dc:	9b03      	ldr	r3, [sp, #12]
 80139de:	4298      	cmp	r0, r3
 80139e0:	bfb8      	it	lt
 80139e2:	4618      	movlt	r0, r3
 80139e4:	e7a4      	b.n	8013930 <_printf_i+0x168>
 80139e6:	2301      	movs	r3, #1
 80139e8:	4632      	mov	r2, r6
 80139ea:	4649      	mov	r1, r9
 80139ec:	4640      	mov	r0, r8
 80139ee:	47d0      	blx	sl
 80139f0:	3001      	adds	r0, #1
 80139f2:	d09b      	beq.n	801392c <_printf_i+0x164>
 80139f4:	3501      	adds	r5, #1
 80139f6:	68e3      	ldr	r3, [r4, #12]
 80139f8:	9903      	ldr	r1, [sp, #12]
 80139fa:	1a5b      	subs	r3, r3, r1
 80139fc:	42ab      	cmp	r3, r5
 80139fe:	dcf2      	bgt.n	80139e6 <_printf_i+0x21e>
 8013a00:	e7eb      	b.n	80139da <_printf_i+0x212>
 8013a02:	2500      	movs	r5, #0
 8013a04:	f104 0619 	add.w	r6, r4, #25
 8013a08:	e7f5      	b.n	80139f6 <_printf_i+0x22e>
 8013a0a:	bf00      	nop
 8013a0c:	08017066 	.word	0x08017066
 8013a10:	08017077 	.word	0x08017077

08013a14 <_sbrk_r>:
 8013a14:	b538      	push	{r3, r4, r5, lr}
 8013a16:	4d06      	ldr	r5, [pc, #24]	; (8013a30 <_sbrk_r+0x1c>)
 8013a18:	2300      	movs	r3, #0
 8013a1a:	4604      	mov	r4, r0
 8013a1c:	4608      	mov	r0, r1
 8013a1e:	602b      	str	r3, [r5, #0]
 8013a20:	f7ee fac6 	bl	8001fb0 <_sbrk>
 8013a24:	1c43      	adds	r3, r0, #1
 8013a26:	d102      	bne.n	8013a2e <_sbrk_r+0x1a>
 8013a28:	682b      	ldr	r3, [r5, #0]
 8013a2a:	b103      	cbz	r3, 8013a2e <_sbrk_r+0x1a>
 8013a2c:	6023      	str	r3, [r4, #0]
 8013a2e:	bd38      	pop	{r3, r4, r5, pc}
 8013a30:	24002894 	.word	0x24002894

08013a34 <strncmp>:
 8013a34:	b510      	push	{r4, lr}
 8013a36:	b17a      	cbz	r2, 8013a58 <strncmp+0x24>
 8013a38:	4603      	mov	r3, r0
 8013a3a:	3901      	subs	r1, #1
 8013a3c:	1884      	adds	r4, r0, r2
 8013a3e:	f813 0b01 	ldrb.w	r0, [r3], #1
 8013a42:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8013a46:	4290      	cmp	r0, r2
 8013a48:	d101      	bne.n	8013a4e <strncmp+0x1a>
 8013a4a:	42a3      	cmp	r3, r4
 8013a4c:	d101      	bne.n	8013a52 <strncmp+0x1e>
 8013a4e:	1a80      	subs	r0, r0, r2
 8013a50:	bd10      	pop	{r4, pc}
 8013a52:	2800      	cmp	r0, #0
 8013a54:	d1f3      	bne.n	8013a3e <strncmp+0xa>
 8013a56:	e7fa      	b.n	8013a4e <strncmp+0x1a>
 8013a58:	4610      	mov	r0, r2
 8013a5a:	e7f9      	b.n	8013a50 <strncmp+0x1c>

08013a5c <quorem>:
 8013a5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a60:	6903      	ldr	r3, [r0, #16]
 8013a62:	690c      	ldr	r4, [r1, #16]
 8013a64:	42a3      	cmp	r3, r4
 8013a66:	4607      	mov	r7, r0
 8013a68:	f2c0 8081 	blt.w	8013b6e <quorem+0x112>
 8013a6c:	3c01      	subs	r4, #1
 8013a6e:	f101 0814 	add.w	r8, r1, #20
 8013a72:	f100 0514 	add.w	r5, r0, #20
 8013a76:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013a7a:	9301      	str	r3, [sp, #4]
 8013a7c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8013a80:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013a84:	3301      	adds	r3, #1
 8013a86:	429a      	cmp	r2, r3
 8013a88:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8013a8c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8013a90:	fbb2 f6f3 	udiv	r6, r2, r3
 8013a94:	d331      	bcc.n	8013afa <quorem+0x9e>
 8013a96:	f04f 0e00 	mov.w	lr, #0
 8013a9a:	4640      	mov	r0, r8
 8013a9c:	46ac      	mov	ip, r5
 8013a9e:	46f2      	mov	sl, lr
 8013aa0:	f850 2b04 	ldr.w	r2, [r0], #4
 8013aa4:	b293      	uxth	r3, r2
 8013aa6:	fb06 e303 	mla	r3, r6, r3, lr
 8013aaa:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8013aae:	b29b      	uxth	r3, r3
 8013ab0:	ebaa 0303 	sub.w	r3, sl, r3
 8013ab4:	f8dc a000 	ldr.w	sl, [ip]
 8013ab8:	0c12      	lsrs	r2, r2, #16
 8013aba:	fa13 f38a 	uxtah	r3, r3, sl
 8013abe:	fb06 e202 	mla	r2, r6, r2, lr
 8013ac2:	9300      	str	r3, [sp, #0]
 8013ac4:	9b00      	ldr	r3, [sp, #0]
 8013ac6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8013aca:	b292      	uxth	r2, r2
 8013acc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8013ad0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013ad4:	f8bd 3000 	ldrh.w	r3, [sp]
 8013ad8:	4581      	cmp	r9, r0
 8013ada:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013ade:	f84c 3b04 	str.w	r3, [ip], #4
 8013ae2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8013ae6:	d2db      	bcs.n	8013aa0 <quorem+0x44>
 8013ae8:	f855 300b 	ldr.w	r3, [r5, fp]
 8013aec:	b92b      	cbnz	r3, 8013afa <quorem+0x9e>
 8013aee:	9b01      	ldr	r3, [sp, #4]
 8013af0:	3b04      	subs	r3, #4
 8013af2:	429d      	cmp	r5, r3
 8013af4:	461a      	mov	r2, r3
 8013af6:	d32e      	bcc.n	8013b56 <quorem+0xfa>
 8013af8:	613c      	str	r4, [r7, #16]
 8013afa:	4638      	mov	r0, r7
 8013afc:	f001 f83c 	bl	8014b78 <__mcmp>
 8013b00:	2800      	cmp	r0, #0
 8013b02:	db24      	blt.n	8013b4e <quorem+0xf2>
 8013b04:	3601      	adds	r6, #1
 8013b06:	4628      	mov	r0, r5
 8013b08:	f04f 0c00 	mov.w	ip, #0
 8013b0c:	f858 2b04 	ldr.w	r2, [r8], #4
 8013b10:	f8d0 e000 	ldr.w	lr, [r0]
 8013b14:	b293      	uxth	r3, r2
 8013b16:	ebac 0303 	sub.w	r3, ip, r3
 8013b1a:	0c12      	lsrs	r2, r2, #16
 8013b1c:	fa13 f38e 	uxtah	r3, r3, lr
 8013b20:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8013b24:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013b28:	b29b      	uxth	r3, r3
 8013b2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013b2e:	45c1      	cmp	r9, r8
 8013b30:	f840 3b04 	str.w	r3, [r0], #4
 8013b34:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8013b38:	d2e8      	bcs.n	8013b0c <quorem+0xb0>
 8013b3a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013b3e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013b42:	b922      	cbnz	r2, 8013b4e <quorem+0xf2>
 8013b44:	3b04      	subs	r3, #4
 8013b46:	429d      	cmp	r5, r3
 8013b48:	461a      	mov	r2, r3
 8013b4a:	d30a      	bcc.n	8013b62 <quorem+0x106>
 8013b4c:	613c      	str	r4, [r7, #16]
 8013b4e:	4630      	mov	r0, r6
 8013b50:	b003      	add	sp, #12
 8013b52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b56:	6812      	ldr	r2, [r2, #0]
 8013b58:	3b04      	subs	r3, #4
 8013b5a:	2a00      	cmp	r2, #0
 8013b5c:	d1cc      	bne.n	8013af8 <quorem+0x9c>
 8013b5e:	3c01      	subs	r4, #1
 8013b60:	e7c7      	b.n	8013af2 <quorem+0x96>
 8013b62:	6812      	ldr	r2, [r2, #0]
 8013b64:	3b04      	subs	r3, #4
 8013b66:	2a00      	cmp	r2, #0
 8013b68:	d1f0      	bne.n	8013b4c <quorem+0xf0>
 8013b6a:	3c01      	subs	r4, #1
 8013b6c:	e7eb      	b.n	8013b46 <quorem+0xea>
 8013b6e:	2000      	movs	r0, #0
 8013b70:	e7ee      	b.n	8013b50 <quorem+0xf4>
 8013b72:	0000      	movs	r0, r0
 8013b74:	0000      	movs	r0, r0
	...

08013b78 <_dtoa_r>:
 8013b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b7c:	ed2d 8b02 	vpush	{d8}
 8013b80:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8013b82:	b091      	sub	sp, #68	; 0x44
 8013b84:	ed8d 0b02 	vstr	d0, [sp, #8]
 8013b88:	ec59 8b10 	vmov	r8, r9, d0
 8013b8c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8013b8e:	9106      	str	r1, [sp, #24]
 8013b90:	4606      	mov	r6, r0
 8013b92:	9208      	str	r2, [sp, #32]
 8013b94:	930c      	str	r3, [sp, #48]	; 0x30
 8013b96:	b975      	cbnz	r5, 8013bb6 <_dtoa_r+0x3e>
 8013b98:	2010      	movs	r0, #16
 8013b9a:	f7f5 fa25 	bl	8008fe8 <__wrap_malloc>
 8013b9e:	4602      	mov	r2, r0
 8013ba0:	6270      	str	r0, [r6, #36]	; 0x24
 8013ba2:	b920      	cbnz	r0, 8013bae <_dtoa_r+0x36>
 8013ba4:	4baa      	ldr	r3, [pc, #680]	; (8013e50 <_dtoa_r+0x2d8>)
 8013ba6:	21ea      	movs	r1, #234	; 0xea
 8013ba8:	48aa      	ldr	r0, [pc, #680]	; (8013e54 <_dtoa_r+0x2dc>)
 8013baa:	f001 f8fd 	bl	8014da8 <__assert_func>
 8013bae:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8013bb2:	6005      	str	r5, [r0, #0]
 8013bb4:	60c5      	str	r5, [r0, #12]
 8013bb6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8013bb8:	6819      	ldr	r1, [r3, #0]
 8013bba:	b151      	cbz	r1, 8013bd2 <_dtoa_r+0x5a>
 8013bbc:	685a      	ldr	r2, [r3, #4]
 8013bbe:	604a      	str	r2, [r1, #4]
 8013bc0:	2301      	movs	r3, #1
 8013bc2:	4093      	lsls	r3, r2
 8013bc4:	608b      	str	r3, [r1, #8]
 8013bc6:	4630      	mov	r0, r6
 8013bc8:	f000 fd94 	bl	80146f4 <_Bfree>
 8013bcc:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8013bce:	2200      	movs	r2, #0
 8013bd0:	601a      	str	r2, [r3, #0]
 8013bd2:	f1b9 0300 	subs.w	r3, r9, #0
 8013bd6:	bfbb      	ittet	lt
 8013bd8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8013bdc:	9303      	strlt	r3, [sp, #12]
 8013bde:	2300      	movge	r3, #0
 8013be0:	2201      	movlt	r2, #1
 8013be2:	bfac      	ite	ge
 8013be4:	6023      	strge	r3, [r4, #0]
 8013be6:	6022      	strlt	r2, [r4, #0]
 8013be8:	4b9b      	ldr	r3, [pc, #620]	; (8013e58 <_dtoa_r+0x2e0>)
 8013bea:	9c03      	ldr	r4, [sp, #12]
 8013bec:	43a3      	bics	r3, r4
 8013bee:	d11c      	bne.n	8013c2a <_dtoa_r+0xb2>
 8013bf0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013bf2:	f242 730f 	movw	r3, #9999	; 0x270f
 8013bf6:	6013      	str	r3, [r2, #0]
 8013bf8:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8013bfc:	ea53 0308 	orrs.w	r3, r3, r8
 8013c00:	f000 84fd 	beq.w	80145fe <_dtoa_r+0xa86>
 8013c04:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013c06:	b963      	cbnz	r3, 8013c22 <_dtoa_r+0xaa>
 8013c08:	4b94      	ldr	r3, [pc, #592]	; (8013e5c <_dtoa_r+0x2e4>)
 8013c0a:	e01f      	b.n	8013c4c <_dtoa_r+0xd4>
 8013c0c:	4b94      	ldr	r3, [pc, #592]	; (8013e60 <_dtoa_r+0x2e8>)
 8013c0e:	9301      	str	r3, [sp, #4]
 8013c10:	3308      	adds	r3, #8
 8013c12:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8013c14:	6013      	str	r3, [r2, #0]
 8013c16:	9801      	ldr	r0, [sp, #4]
 8013c18:	b011      	add	sp, #68	; 0x44
 8013c1a:	ecbd 8b02 	vpop	{d8}
 8013c1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c22:	4b8e      	ldr	r3, [pc, #568]	; (8013e5c <_dtoa_r+0x2e4>)
 8013c24:	9301      	str	r3, [sp, #4]
 8013c26:	3303      	adds	r3, #3
 8013c28:	e7f3      	b.n	8013c12 <_dtoa_r+0x9a>
 8013c2a:	ed9d 8b02 	vldr	d8, [sp, #8]
 8013c2e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8013c32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c36:	d10b      	bne.n	8013c50 <_dtoa_r+0xd8>
 8013c38:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013c3a:	2301      	movs	r3, #1
 8013c3c:	6013      	str	r3, [r2, #0]
 8013c3e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013c40:	2b00      	cmp	r3, #0
 8013c42:	f000 84d9 	beq.w	80145f8 <_dtoa_r+0xa80>
 8013c46:	4887      	ldr	r0, [pc, #540]	; (8013e64 <_dtoa_r+0x2ec>)
 8013c48:	6018      	str	r0, [r3, #0]
 8013c4a:	1e43      	subs	r3, r0, #1
 8013c4c:	9301      	str	r3, [sp, #4]
 8013c4e:	e7e2      	b.n	8013c16 <_dtoa_r+0x9e>
 8013c50:	a90f      	add	r1, sp, #60	; 0x3c
 8013c52:	aa0e      	add	r2, sp, #56	; 0x38
 8013c54:	4630      	mov	r0, r6
 8013c56:	eeb0 0b48 	vmov.f64	d0, d8
 8013c5a:	f001 f833 	bl	8014cc4 <__d2b>
 8013c5e:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8013c62:	4605      	mov	r5, r0
 8013c64:	980e      	ldr	r0, [sp, #56]	; 0x38
 8013c66:	2900      	cmp	r1, #0
 8013c68:	d046      	beq.n	8013cf8 <_dtoa_r+0x180>
 8013c6a:	ee18 4a90 	vmov	r4, s17
 8013c6e:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8013c72:	ec53 2b18 	vmov	r2, r3, d8
 8013c76:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8013c7a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8013c7e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8013c82:	2400      	movs	r4, #0
 8013c84:	ec43 2b16 	vmov	d6, r2, r3
 8013c88:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8013c8c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8013e38 <_dtoa_r+0x2c0>
 8013c90:	ee36 7b47 	vsub.f64	d7, d6, d7
 8013c94:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8013e40 <_dtoa_r+0x2c8>
 8013c98:	eea7 6b05 	vfma.f64	d6, d7, d5
 8013c9c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8013e48 <_dtoa_r+0x2d0>
 8013ca0:	ee07 1a90 	vmov	s15, r1
 8013ca4:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8013ca8:	eeb0 7b46 	vmov.f64	d7, d6
 8013cac:	eea4 7b05 	vfma.f64	d7, d4, d5
 8013cb0:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8013cb4:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8013cb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013cbc:	ee16 ba90 	vmov	fp, s13
 8013cc0:	940a      	str	r4, [sp, #40]	; 0x28
 8013cc2:	d508      	bpl.n	8013cd6 <_dtoa_r+0x15e>
 8013cc4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8013cc8:	eeb4 6b47 	vcmp.f64	d6, d7
 8013ccc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013cd0:	bf18      	it	ne
 8013cd2:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8013cd6:	f1bb 0f16 	cmp.w	fp, #22
 8013cda:	d82f      	bhi.n	8013d3c <_dtoa_r+0x1c4>
 8013cdc:	4b62      	ldr	r3, [pc, #392]	; (8013e68 <_dtoa_r+0x2f0>)
 8013cde:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8013ce2:	ed93 7b00 	vldr	d7, [r3]
 8013ce6:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8013cea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013cee:	d501      	bpl.n	8013cf4 <_dtoa_r+0x17c>
 8013cf0:	f10b 3bff 	add.w	fp, fp, #4294967295
 8013cf4:	2300      	movs	r3, #0
 8013cf6:	e022      	b.n	8013d3e <_dtoa_r+0x1c6>
 8013cf8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8013cfa:	4401      	add	r1, r0
 8013cfc:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8013d00:	2b20      	cmp	r3, #32
 8013d02:	bfc1      	itttt	gt
 8013d04:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8013d08:	fa04 f303 	lslgt.w	r3, r4, r3
 8013d0c:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8013d10:	fa28 f804 	lsrgt.w	r8, r8, r4
 8013d14:	bfd6      	itet	le
 8013d16:	f1c3 0320 	rsble	r3, r3, #32
 8013d1a:	ea43 0808 	orrgt.w	r8, r3, r8
 8013d1e:	fa08 f803 	lslle.w	r8, r8, r3
 8013d22:	ee07 8a90 	vmov	s15, r8
 8013d26:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8013d2a:	3901      	subs	r1, #1
 8013d2c:	ee17 4a90 	vmov	r4, s15
 8013d30:	ec53 2b17 	vmov	r2, r3, d7
 8013d34:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8013d38:	2401      	movs	r4, #1
 8013d3a:	e7a3      	b.n	8013c84 <_dtoa_r+0x10c>
 8013d3c:	2301      	movs	r3, #1
 8013d3e:	930b      	str	r3, [sp, #44]	; 0x2c
 8013d40:	1a43      	subs	r3, r0, r1
 8013d42:	1e5a      	subs	r2, r3, #1
 8013d44:	bf45      	ittet	mi
 8013d46:	f1c3 0301 	rsbmi	r3, r3, #1
 8013d4a:	9304      	strmi	r3, [sp, #16]
 8013d4c:	2300      	movpl	r3, #0
 8013d4e:	2300      	movmi	r3, #0
 8013d50:	9205      	str	r2, [sp, #20]
 8013d52:	bf54      	ite	pl
 8013d54:	9304      	strpl	r3, [sp, #16]
 8013d56:	9305      	strmi	r3, [sp, #20]
 8013d58:	f1bb 0f00 	cmp.w	fp, #0
 8013d5c:	db18      	blt.n	8013d90 <_dtoa_r+0x218>
 8013d5e:	9b05      	ldr	r3, [sp, #20]
 8013d60:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8013d64:	445b      	add	r3, fp
 8013d66:	9305      	str	r3, [sp, #20]
 8013d68:	2300      	movs	r3, #0
 8013d6a:	9a06      	ldr	r2, [sp, #24]
 8013d6c:	2a09      	cmp	r2, #9
 8013d6e:	d849      	bhi.n	8013e04 <_dtoa_r+0x28c>
 8013d70:	2a05      	cmp	r2, #5
 8013d72:	bfc4      	itt	gt
 8013d74:	3a04      	subgt	r2, #4
 8013d76:	9206      	strgt	r2, [sp, #24]
 8013d78:	9a06      	ldr	r2, [sp, #24]
 8013d7a:	f1a2 0202 	sub.w	r2, r2, #2
 8013d7e:	bfcc      	ite	gt
 8013d80:	2400      	movgt	r4, #0
 8013d82:	2401      	movle	r4, #1
 8013d84:	2a03      	cmp	r2, #3
 8013d86:	d848      	bhi.n	8013e1a <_dtoa_r+0x2a2>
 8013d88:	e8df f002 	tbb	[pc, r2]
 8013d8c:	3a2c2e0b 	.word	0x3a2c2e0b
 8013d90:	9b04      	ldr	r3, [sp, #16]
 8013d92:	2200      	movs	r2, #0
 8013d94:	eba3 030b 	sub.w	r3, r3, fp
 8013d98:	9304      	str	r3, [sp, #16]
 8013d9a:	9209      	str	r2, [sp, #36]	; 0x24
 8013d9c:	f1cb 0300 	rsb	r3, fp, #0
 8013da0:	e7e3      	b.n	8013d6a <_dtoa_r+0x1f2>
 8013da2:	2200      	movs	r2, #0
 8013da4:	9207      	str	r2, [sp, #28]
 8013da6:	9a08      	ldr	r2, [sp, #32]
 8013da8:	2a00      	cmp	r2, #0
 8013daa:	dc39      	bgt.n	8013e20 <_dtoa_r+0x2a8>
 8013dac:	f04f 0a01 	mov.w	sl, #1
 8013db0:	46d1      	mov	r9, sl
 8013db2:	4652      	mov	r2, sl
 8013db4:	f8cd a020 	str.w	sl, [sp, #32]
 8013db8:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8013dba:	2100      	movs	r1, #0
 8013dbc:	6079      	str	r1, [r7, #4]
 8013dbe:	2004      	movs	r0, #4
 8013dc0:	f100 0c14 	add.w	ip, r0, #20
 8013dc4:	4594      	cmp	ip, r2
 8013dc6:	6879      	ldr	r1, [r7, #4]
 8013dc8:	d92f      	bls.n	8013e2a <_dtoa_r+0x2b2>
 8013dca:	4630      	mov	r0, r6
 8013dcc:	930d      	str	r3, [sp, #52]	; 0x34
 8013dce:	f000 fc51 	bl	8014674 <_Balloc>
 8013dd2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013dd4:	9001      	str	r0, [sp, #4]
 8013dd6:	4602      	mov	r2, r0
 8013dd8:	2800      	cmp	r0, #0
 8013dda:	d149      	bne.n	8013e70 <_dtoa_r+0x2f8>
 8013ddc:	4b23      	ldr	r3, [pc, #140]	; (8013e6c <_dtoa_r+0x2f4>)
 8013dde:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8013de2:	e6e1      	b.n	8013ba8 <_dtoa_r+0x30>
 8013de4:	2201      	movs	r2, #1
 8013de6:	e7dd      	b.n	8013da4 <_dtoa_r+0x22c>
 8013de8:	2200      	movs	r2, #0
 8013dea:	9207      	str	r2, [sp, #28]
 8013dec:	9a08      	ldr	r2, [sp, #32]
 8013dee:	eb0b 0a02 	add.w	sl, fp, r2
 8013df2:	f10a 0901 	add.w	r9, sl, #1
 8013df6:	464a      	mov	r2, r9
 8013df8:	2a01      	cmp	r2, #1
 8013dfa:	bfb8      	it	lt
 8013dfc:	2201      	movlt	r2, #1
 8013dfe:	e7db      	b.n	8013db8 <_dtoa_r+0x240>
 8013e00:	2201      	movs	r2, #1
 8013e02:	e7f2      	b.n	8013dea <_dtoa_r+0x272>
 8013e04:	2401      	movs	r4, #1
 8013e06:	2200      	movs	r2, #0
 8013e08:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8013e0c:	f04f 3aff 	mov.w	sl, #4294967295
 8013e10:	2100      	movs	r1, #0
 8013e12:	46d1      	mov	r9, sl
 8013e14:	2212      	movs	r2, #18
 8013e16:	9108      	str	r1, [sp, #32]
 8013e18:	e7ce      	b.n	8013db8 <_dtoa_r+0x240>
 8013e1a:	2201      	movs	r2, #1
 8013e1c:	9207      	str	r2, [sp, #28]
 8013e1e:	e7f5      	b.n	8013e0c <_dtoa_r+0x294>
 8013e20:	f8dd a020 	ldr.w	sl, [sp, #32]
 8013e24:	46d1      	mov	r9, sl
 8013e26:	4652      	mov	r2, sl
 8013e28:	e7c6      	b.n	8013db8 <_dtoa_r+0x240>
 8013e2a:	3101      	adds	r1, #1
 8013e2c:	6079      	str	r1, [r7, #4]
 8013e2e:	0040      	lsls	r0, r0, #1
 8013e30:	e7c6      	b.n	8013dc0 <_dtoa_r+0x248>
 8013e32:	bf00      	nop
 8013e34:	f3af 8000 	nop.w
 8013e38:	636f4361 	.word	0x636f4361
 8013e3c:	3fd287a7 	.word	0x3fd287a7
 8013e40:	8b60c8b3 	.word	0x8b60c8b3
 8013e44:	3fc68a28 	.word	0x3fc68a28
 8013e48:	509f79fb 	.word	0x509f79fb
 8013e4c:	3fd34413 	.word	0x3fd34413
 8013e50:	08017095 	.word	0x08017095
 8013e54:	080170ac 	.word	0x080170ac
 8013e58:	7ff00000 	.word	0x7ff00000
 8013e5c:	08017091 	.word	0x08017091
 8013e60:	08017088 	.word	0x08017088
 8013e64:	08017065 	.word	0x08017065
 8013e68:	080171a0 	.word	0x080171a0
 8013e6c:	08017107 	.word	0x08017107
 8013e70:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8013e72:	9901      	ldr	r1, [sp, #4]
 8013e74:	6011      	str	r1, [r2, #0]
 8013e76:	f1b9 0f0e 	cmp.w	r9, #14
 8013e7a:	d86c      	bhi.n	8013f56 <_dtoa_r+0x3de>
 8013e7c:	2c00      	cmp	r4, #0
 8013e7e:	d06a      	beq.n	8013f56 <_dtoa_r+0x3de>
 8013e80:	f1bb 0f00 	cmp.w	fp, #0
 8013e84:	f340 80a0 	ble.w	8013fc8 <_dtoa_r+0x450>
 8013e88:	49c1      	ldr	r1, [pc, #772]	; (8014190 <_dtoa_r+0x618>)
 8013e8a:	f00b 020f 	and.w	r2, fp, #15
 8013e8e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8013e92:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8013e96:	ed92 7b00 	vldr	d7, [r2]
 8013e9a:	ea4f 112b 	mov.w	r1, fp, asr #4
 8013e9e:	f000 8087 	beq.w	8013fb0 <_dtoa_r+0x438>
 8013ea2:	4abc      	ldr	r2, [pc, #752]	; (8014194 <_dtoa_r+0x61c>)
 8013ea4:	ed92 6b08 	vldr	d6, [r2, #32]
 8013ea8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8013eac:	ed8d 6b02 	vstr	d6, [sp, #8]
 8013eb0:	f001 010f 	and.w	r1, r1, #15
 8013eb4:	2203      	movs	r2, #3
 8013eb6:	48b7      	ldr	r0, [pc, #732]	; (8014194 <_dtoa_r+0x61c>)
 8013eb8:	2900      	cmp	r1, #0
 8013eba:	d17b      	bne.n	8013fb4 <_dtoa_r+0x43c>
 8013ebc:	ed9d 6b02 	vldr	d6, [sp, #8]
 8013ec0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8013ec4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013ec8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013eca:	2900      	cmp	r1, #0
 8013ecc:	f000 80a2 	beq.w	8014014 <_dtoa_r+0x49c>
 8013ed0:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8013ed4:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013ed8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8013edc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ee0:	f140 8098 	bpl.w	8014014 <_dtoa_r+0x49c>
 8013ee4:	f1b9 0f00 	cmp.w	r9, #0
 8013ee8:	f000 8094 	beq.w	8014014 <_dtoa_r+0x49c>
 8013eec:	f1ba 0f00 	cmp.w	sl, #0
 8013ef0:	dd2f      	ble.n	8013f52 <_dtoa_r+0x3da>
 8013ef2:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8013ef6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013efa:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013efe:	f10b 37ff 	add.w	r7, fp, #4294967295
 8013f02:	3201      	adds	r2, #1
 8013f04:	4650      	mov	r0, sl
 8013f06:	ed9d 6b02 	vldr	d6, [sp, #8]
 8013f0a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8013f0e:	ee07 2a90 	vmov	s15, r2
 8013f12:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8013f16:	eea7 5b06 	vfma.f64	d5, d7, d6
 8013f1a:	ee15 4a90 	vmov	r4, s11
 8013f1e:	ec52 1b15 	vmov	r1, r2, d5
 8013f22:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8013f26:	2800      	cmp	r0, #0
 8013f28:	d177      	bne.n	801401a <_dtoa_r+0x4a2>
 8013f2a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8013f2e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8013f32:	ec42 1b17 	vmov	d7, r1, r2
 8013f36:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8013f3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f3e:	f300 8263 	bgt.w	8014408 <_dtoa_r+0x890>
 8013f42:	eeb1 7b47 	vneg.f64	d7, d7
 8013f46:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8013f4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f4e:	f100 8258 	bmi.w	8014402 <_dtoa_r+0x88a>
 8013f52:	ed8d 8b02 	vstr	d8, [sp, #8]
 8013f56:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013f58:	2a00      	cmp	r2, #0
 8013f5a:	f2c0 811d 	blt.w	8014198 <_dtoa_r+0x620>
 8013f5e:	f1bb 0f0e 	cmp.w	fp, #14
 8013f62:	f300 8119 	bgt.w	8014198 <_dtoa_r+0x620>
 8013f66:	4b8a      	ldr	r3, [pc, #552]	; (8014190 <_dtoa_r+0x618>)
 8013f68:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8013f6c:	ed93 6b00 	vldr	d6, [r3]
 8013f70:	9b08      	ldr	r3, [sp, #32]
 8013f72:	2b00      	cmp	r3, #0
 8013f74:	f280 80b7 	bge.w	80140e6 <_dtoa_r+0x56e>
 8013f78:	f1b9 0f00 	cmp.w	r9, #0
 8013f7c:	f300 80b3 	bgt.w	80140e6 <_dtoa_r+0x56e>
 8013f80:	f040 823f 	bne.w	8014402 <_dtoa_r+0x88a>
 8013f84:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8013f88:	ee26 6b07 	vmul.f64	d6, d6, d7
 8013f8c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013f90:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8013f94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f98:	464c      	mov	r4, r9
 8013f9a:	464f      	mov	r7, r9
 8013f9c:	f280 8215 	bge.w	80143ca <_dtoa_r+0x852>
 8013fa0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8013fa4:	2331      	movs	r3, #49	; 0x31
 8013fa6:	f808 3b01 	strb.w	r3, [r8], #1
 8013faa:	f10b 0b01 	add.w	fp, fp, #1
 8013fae:	e211      	b.n	80143d4 <_dtoa_r+0x85c>
 8013fb0:	2202      	movs	r2, #2
 8013fb2:	e780      	b.n	8013eb6 <_dtoa_r+0x33e>
 8013fb4:	07cc      	lsls	r4, r1, #31
 8013fb6:	d504      	bpl.n	8013fc2 <_dtoa_r+0x44a>
 8013fb8:	ed90 6b00 	vldr	d6, [r0]
 8013fbc:	3201      	adds	r2, #1
 8013fbe:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013fc2:	1049      	asrs	r1, r1, #1
 8013fc4:	3008      	adds	r0, #8
 8013fc6:	e777      	b.n	8013eb8 <_dtoa_r+0x340>
 8013fc8:	d022      	beq.n	8014010 <_dtoa_r+0x498>
 8013fca:	f1cb 0100 	rsb	r1, fp, #0
 8013fce:	4a70      	ldr	r2, [pc, #448]	; (8014190 <_dtoa_r+0x618>)
 8013fd0:	f001 000f 	and.w	r0, r1, #15
 8013fd4:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8013fd8:	ed92 7b00 	vldr	d7, [r2]
 8013fdc:	ee28 7b07 	vmul.f64	d7, d8, d7
 8013fe0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013fe4:	486b      	ldr	r0, [pc, #428]	; (8014194 <_dtoa_r+0x61c>)
 8013fe6:	1109      	asrs	r1, r1, #4
 8013fe8:	2400      	movs	r4, #0
 8013fea:	2202      	movs	r2, #2
 8013fec:	b929      	cbnz	r1, 8013ffa <_dtoa_r+0x482>
 8013fee:	2c00      	cmp	r4, #0
 8013ff0:	f43f af6a 	beq.w	8013ec8 <_dtoa_r+0x350>
 8013ff4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013ff8:	e766      	b.n	8013ec8 <_dtoa_r+0x350>
 8013ffa:	07cf      	lsls	r7, r1, #31
 8013ffc:	d505      	bpl.n	801400a <_dtoa_r+0x492>
 8013ffe:	ed90 6b00 	vldr	d6, [r0]
 8014002:	3201      	adds	r2, #1
 8014004:	2401      	movs	r4, #1
 8014006:	ee27 7b06 	vmul.f64	d7, d7, d6
 801400a:	1049      	asrs	r1, r1, #1
 801400c:	3008      	adds	r0, #8
 801400e:	e7ed      	b.n	8013fec <_dtoa_r+0x474>
 8014010:	2202      	movs	r2, #2
 8014012:	e759      	b.n	8013ec8 <_dtoa_r+0x350>
 8014014:	465f      	mov	r7, fp
 8014016:	4648      	mov	r0, r9
 8014018:	e775      	b.n	8013f06 <_dtoa_r+0x38e>
 801401a:	ec42 1b17 	vmov	d7, r1, r2
 801401e:	4a5c      	ldr	r2, [pc, #368]	; (8014190 <_dtoa_r+0x618>)
 8014020:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8014024:	ed12 4b02 	vldr	d4, [r2, #-8]
 8014028:	9a01      	ldr	r2, [sp, #4]
 801402a:	1814      	adds	r4, r2, r0
 801402c:	9a07      	ldr	r2, [sp, #28]
 801402e:	b352      	cbz	r2, 8014086 <_dtoa_r+0x50e>
 8014030:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8014034:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8014038:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801403c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8014040:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8014044:	ee35 7b47 	vsub.f64	d7, d5, d7
 8014048:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801404c:	ee14 2a90 	vmov	r2, s9
 8014050:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8014054:	3230      	adds	r2, #48	; 0x30
 8014056:	ee36 6b45 	vsub.f64	d6, d6, d5
 801405a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801405e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014062:	f808 2b01 	strb.w	r2, [r8], #1
 8014066:	d439      	bmi.n	80140dc <_dtoa_r+0x564>
 8014068:	ee32 5b46 	vsub.f64	d5, d2, d6
 801406c:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8014070:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014074:	d472      	bmi.n	801415c <_dtoa_r+0x5e4>
 8014076:	45a0      	cmp	r8, r4
 8014078:	f43f af6b 	beq.w	8013f52 <_dtoa_r+0x3da>
 801407c:	ee27 7b03 	vmul.f64	d7, d7, d3
 8014080:	ee26 6b03 	vmul.f64	d6, d6, d3
 8014084:	e7e0      	b.n	8014048 <_dtoa_r+0x4d0>
 8014086:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801408a:	ee27 7b04 	vmul.f64	d7, d7, d4
 801408e:	4621      	mov	r1, r4
 8014090:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8014094:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8014098:	ee14 2a90 	vmov	r2, s9
 801409c:	3230      	adds	r2, #48	; 0x30
 801409e:	f808 2b01 	strb.w	r2, [r8], #1
 80140a2:	45a0      	cmp	r8, r4
 80140a4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80140a8:	ee36 6b45 	vsub.f64	d6, d6, d5
 80140ac:	d118      	bne.n	80140e0 <_dtoa_r+0x568>
 80140ae:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80140b2:	ee37 4b05 	vadd.f64	d4, d7, d5
 80140b6:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80140ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80140be:	dc4d      	bgt.n	801415c <_dtoa_r+0x5e4>
 80140c0:	ee35 7b47 	vsub.f64	d7, d5, d7
 80140c4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80140c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80140cc:	f57f af41 	bpl.w	8013f52 <_dtoa_r+0x3da>
 80140d0:	4688      	mov	r8, r1
 80140d2:	3901      	subs	r1, #1
 80140d4:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 80140d8:	2b30      	cmp	r3, #48	; 0x30
 80140da:	d0f9      	beq.n	80140d0 <_dtoa_r+0x558>
 80140dc:	46bb      	mov	fp, r7
 80140de:	e02a      	b.n	8014136 <_dtoa_r+0x5be>
 80140e0:	ee26 6b03 	vmul.f64	d6, d6, d3
 80140e4:	e7d6      	b.n	8014094 <_dtoa_r+0x51c>
 80140e6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80140ea:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 80140ee:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80140f2:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80140f6:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80140fa:	ee15 3a10 	vmov	r3, s10
 80140fe:	3330      	adds	r3, #48	; 0x30
 8014100:	f808 3b01 	strb.w	r3, [r8], #1
 8014104:	9b01      	ldr	r3, [sp, #4]
 8014106:	eba8 0303 	sub.w	r3, r8, r3
 801410a:	4599      	cmp	r9, r3
 801410c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8014110:	eea3 7b46 	vfms.f64	d7, d3, d6
 8014114:	d133      	bne.n	801417e <_dtoa_r+0x606>
 8014116:	ee37 7b07 	vadd.f64	d7, d7, d7
 801411a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801411e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014122:	dc1a      	bgt.n	801415a <_dtoa_r+0x5e2>
 8014124:	eeb4 7b46 	vcmp.f64	d7, d6
 8014128:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801412c:	d103      	bne.n	8014136 <_dtoa_r+0x5be>
 801412e:	ee15 3a10 	vmov	r3, s10
 8014132:	07d9      	lsls	r1, r3, #31
 8014134:	d411      	bmi.n	801415a <_dtoa_r+0x5e2>
 8014136:	4629      	mov	r1, r5
 8014138:	4630      	mov	r0, r6
 801413a:	f000 fadb 	bl	80146f4 <_Bfree>
 801413e:	2300      	movs	r3, #0
 8014140:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014142:	f888 3000 	strb.w	r3, [r8]
 8014146:	f10b 0301 	add.w	r3, fp, #1
 801414a:	6013      	str	r3, [r2, #0]
 801414c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801414e:	2b00      	cmp	r3, #0
 8014150:	f43f ad61 	beq.w	8013c16 <_dtoa_r+0x9e>
 8014154:	f8c3 8000 	str.w	r8, [r3]
 8014158:	e55d      	b.n	8013c16 <_dtoa_r+0x9e>
 801415a:	465f      	mov	r7, fp
 801415c:	4643      	mov	r3, r8
 801415e:	4698      	mov	r8, r3
 8014160:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8014164:	2a39      	cmp	r2, #57	; 0x39
 8014166:	d106      	bne.n	8014176 <_dtoa_r+0x5fe>
 8014168:	9a01      	ldr	r2, [sp, #4]
 801416a:	429a      	cmp	r2, r3
 801416c:	d1f7      	bne.n	801415e <_dtoa_r+0x5e6>
 801416e:	9901      	ldr	r1, [sp, #4]
 8014170:	2230      	movs	r2, #48	; 0x30
 8014172:	3701      	adds	r7, #1
 8014174:	700a      	strb	r2, [r1, #0]
 8014176:	781a      	ldrb	r2, [r3, #0]
 8014178:	3201      	adds	r2, #1
 801417a:	701a      	strb	r2, [r3, #0]
 801417c:	e7ae      	b.n	80140dc <_dtoa_r+0x564>
 801417e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8014182:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8014186:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801418a:	d1b2      	bne.n	80140f2 <_dtoa_r+0x57a>
 801418c:	e7d3      	b.n	8014136 <_dtoa_r+0x5be>
 801418e:	bf00      	nop
 8014190:	080171a0 	.word	0x080171a0
 8014194:	08017178 	.word	0x08017178
 8014198:	9907      	ldr	r1, [sp, #28]
 801419a:	2900      	cmp	r1, #0
 801419c:	f000 80d0 	beq.w	8014340 <_dtoa_r+0x7c8>
 80141a0:	9906      	ldr	r1, [sp, #24]
 80141a2:	2901      	cmp	r1, #1
 80141a4:	f300 80b4 	bgt.w	8014310 <_dtoa_r+0x798>
 80141a8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80141aa:	2900      	cmp	r1, #0
 80141ac:	f000 80ac 	beq.w	8014308 <_dtoa_r+0x790>
 80141b0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80141b4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80141b8:	461c      	mov	r4, r3
 80141ba:	930a      	str	r3, [sp, #40]	; 0x28
 80141bc:	9b04      	ldr	r3, [sp, #16]
 80141be:	4413      	add	r3, r2
 80141c0:	9304      	str	r3, [sp, #16]
 80141c2:	9b05      	ldr	r3, [sp, #20]
 80141c4:	2101      	movs	r1, #1
 80141c6:	4413      	add	r3, r2
 80141c8:	4630      	mov	r0, r6
 80141ca:	9305      	str	r3, [sp, #20]
 80141cc:	f000 fb4a 	bl	8014864 <__i2b>
 80141d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80141d2:	4607      	mov	r7, r0
 80141d4:	f1b8 0f00 	cmp.w	r8, #0
 80141d8:	dd0d      	ble.n	80141f6 <_dtoa_r+0x67e>
 80141da:	9a05      	ldr	r2, [sp, #20]
 80141dc:	2a00      	cmp	r2, #0
 80141de:	dd0a      	ble.n	80141f6 <_dtoa_r+0x67e>
 80141e0:	4542      	cmp	r2, r8
 80141e2:	9904      	ldr	r1, [sp, #16]
 80141e4:	bfa8      	it	ge
 80141e6:	4642      	movge	r2, r8
 80141e8:	1a89      	subs	r1, r1, r2
 80141ea:	9104      	str	r1, [sp, #16]
 80141ec:	9905      	ldr	r1, [sp, #20]
 80141ee:	eba8 0802 	sub.w	r8, r8, r2
 80141f2:	1a8a      	subs	r2, r1, r2
 80141f4:	9205      	str	r2, [sp, #20]
 80141f6:	b303      	cbz	r3, 801423a <_dtoa_r+0x6c2>
 80141f8:	9a07      	ldr	r2, [sp, #28]
 80141fa:	2a00      	cmp	r2, #0
 80141fc:	f000 80a5 	beq.w	801434a <_dtoa_r+0x7d2>
 8014200:	2c00      	cmp	r4, #0
 8014202:	dd13      	ble.n	801422c <_dtoa_r+0x6b4>
 8014204:	4639      	mov	r1, r7
 8014206:	4622      	mov	r2, r4
 8014208:	4630      	mov	r0, r6
 801420a:	930d      	str	r3, [sp, #52]	; 0x34
 801420c:	f000 fbea 	bl	80149e4 <__pow5mult>
 8014210:	462a      	mov	r2, r5
 8014212:	4601      	mov	r1, r0
 8014214:	4607      	mov	r7, r0
 8014216:	4630      	mov	r0, r6
 8014218:	f000 fb3a 	bl	8014890 <__multiply>
 801421c:	4629      	mov	r1, r5
 801421e:	900a      	str	r0, [sp, #40]	; 0x28
 8014220:	4630      	mov	r0, r6
 8014222:	f000 fa67 	bl	80146f4 <_Bfree>
 8014226:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014228:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801422a:	4615      	mov	r5, r2
 801422c:	1b1a      	subs	r2, r3, r4
 801422e:	d004      	beq.n	801423a <_dtoa_r+0x6c2>
 8014230:	4629      	mov	r1, r5
 8014232:	4630      	mov	r0, r6
 8014234:	f000 fbd6 	bl	80149e4 <__pow5mult>
 8014238:	4605      	mov	r5, r0
 801423a:	2101      	movs	r1, #1
 801423c:	4630      	mov	r0, r6
 801423e:	f000 fb11 	bl	8014864 <__i2b>
 8014242:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014244:	2b00      	cmp	r3, #0
 8014246:	4604      	mov	r4, r0
 8014248:	f340 8081 	ble.w	801434e <_dtoa_r+0x7d6>
 801424c:	461a      	mov	r2, r3
 801424e:	4601      	mov	r1, r0
 8014250:	4630      	mov	r0, r6
 8014252:	f000 fbc7 	bl	80149e4 <__pow5mult>
 8014256:	9b06      	ldr	r3, [sp, #24]
 8014258:	2b01      	cmp	r3, #1
 801425a:	4604      	mov	r4, r0
 801425c:	dd7a      	ble.n	8014354 <_dtoa_r+0x7dc>
 801425e:	2300      	movs	r3, #0
 8014260:	930a      	str	r3, [sp, #40]	; 0x28
 8014262:	6922      	ldr	r2, [r4, #16]
 8014264:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8014268:	6910      	ldr	r0, [r2, #16]
 801426a:	f000 faab 	bl	80147c4 <__hi0bits>
 801426e:	f1c0 0020 	rsb	r0, r0, #32
 8014272:	9b05      	ldr	r3, [sp, #20]
 8014274:	4418      	add	r0, r3
 8014276:	f010 001f 	ands.w	r0, r0, #31
 801427a:	f000 808c 	beq.w	8014396 <_dtoa_r+0x81e>
 801427e:	f1c0 0220 	rsb	r2, r0, #32
 8014282:	2a04      	cmp	r2, #4
 8014284:	f340 8085 	ble.w	8014392 <_dtoa_r+0x81a>
 8014288:	f1c0 001c 	rsb	r0, r0, #28
 801428c:	9b04      	ldr	r3, [sp, #16]
 801428e:	4403      	add	r3, r0
 8014290:	9304      	str	r3, [sp, #16]
 8014292:	9b05      	ldr	r3, [sp, #20]
 8014294:	4403      	add	r3, r0
 8014296:	4480      	add	r8, r0
 8014298:	9305      	str	r3, [sp, #20]
 801429a:	9b04      	ldr	r3, [sp, #16]
 801429c:	2b00      	cmp	r3, #0
 801429e:	dd05      	ble.n	80142ac <_dtoa_r+0x734>
 80142a0:	4629      	mov	r1, r5
 80142a2:	461a      	mov	r2, r3
 80142a4:	4630      	mov	r0, r6
 80142a6:	f000 fbf7 	bl	8014a98 <__lshift>
 80142aa:	4605      	mov	r5, r0
 80142ac:	9b05      	ldr	r3, [sp, #20]
 80142ae:	2b00      	cmp	r3, #0
 80142b0:	dd05      	ble.n	80142be <_dtoa_r+0x746>
 80142b2:	4621      	mov	r1, r4
 80142b4:	461a      	mov	r2, r3
 80142b6:	4630      	mov	r0, r6
 80142b8:	f000 fbee 	bl	8014a98 <__lshift>
 80142bc:	4604      	mov	r4, r0
 80142be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80142c0:	2b00      	cmp	r3, #0
 80142c2:	d06a      	beq.n	801439a <_dtoa_r+0x822>
 80142c4:	4621      	mov	r1, r4
 80142c6:	4628      	mov	r0, r5
 80142c8:	f000 fc56 	bl	8014b78 <__mcmp>
 80142cc:	2800      	cmp	r0, #0
 80142ce:	da64      	bge.n	801439a <_dtoa_r+0x822>
 80142d0:	2300      	movs	r3, #0
 80142d2:	4629      	mov	r1, r5
 80142d4:	220a      	movs	r2, #10
 80142d6:	4630      	mov	r0, r6
 80142d8:	f000 fa2e 	bl	8014738 <__multadd>
 80142dc:	9b07      	ldr	r3, [sp, #28]
 80142de:	f10b 3bff 	add.w	fp, fp, #4294967295
 80142e2:	4605      	mov	r5, r0
 80142e4:	2b00      	cmp	r3, #0
 80142e6:	f000 8191 	beq.w	801460c <_dtoa_r+0xa94>
 80142ea:	4639      	mov	r1, r7
 80142ec:	2300      	movs	r3, #0
 80142ee:	220a      	movs	r2, #10
 80142f0:	4630      	mov	r0, r6
 80142f2:	f000 fa21 	bl	8014738 <__multadd>
 80142f6:	f1ba 0f00 	cmp.w	sl, #0
 80142fa:	4607      	mov	r7, r0
 80142fc:	f300 808d 	bgt.w	801441a <_dtoa_r+0x8a2>
 8014300:	9b06      	ldr	r3, [sp, #24]
 8014302:	2b02      	cmp	r3, #2
 8014304:	dc50      	bgt.n	80143a8 <_dtoa_r+0x830>
 8014306:	e088      	b.n	801441a <_dtoa_r+0x8a2>
 8014308:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801430a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801430e:	e751      	b.n	80141b4 <_dtoa_r+0x63c>
 8014310:	f109 34ff 	add.w	r4, r9, #4294967295
 8014314:	42a3      	cmp	r3, r4
 8014316:	bfbf      	itttt	lt
 8014318:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 801431a:	1ae3      	sublt	r3, r4, r3
 801431c:	18d2      	addlt	r2, r2, r3
 801431e:	9209      	strlt	r2, [sp, #36]	; 0x24
 8014320:	bfb6      	itet	lt
 8014322:	4623      	movlt	r3, r4
 8014324:	1b1c      	subge	r4, r3, r4
 8014326:	2400      	movlt	r4, #0
 8014328:	f1b9 0f00 	cmp.w	r9, #0
 801432c:	bfb5      	itete	lt
 801432e:	9a04      	ldrlt	r2, [sp, #16]
 8014330:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8014334:	eba2 0809 	sublt.w	r8, r2, r9
 8014338:	464a      	movge	r2, r9
 801433a:	bfb8      	it	lt
 801433c:	2200      	movlt	r2, #0
 801433e:	e73c      	b.n	80141ba <_dtoa_r+0x642>
 8014340:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8014344:	9f07      	ldr	r7, [sp, #28]
 8014346:	461c      	mov	r4, r3
 8014348:	e744      	b.n	80141d4 <_dtoa_r+0x65c>
 801434a:	461a      	mov	r2, r3
 801434c:	e770      	b.n	8014230 <_dtoa_r+0x6b8>
 801434e:	9b06      	ldr	r3, [sp, #24]
 8014350:	2b01      	cmp	r3, #1
 8014352:	dc18      	bgt.n	8014386 <_dtoa_r+0x80e>
 8014354:	9b02      	ldr	r3, [sp, #8]
 8014356:	b9b3      	cbnz	r3, 8014386 <_dtoa_r+0x80e>
 8014358:	9b03      	ldr	r3, [sp, #12]
 801435a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801435e:	b9a2      	cbnz	r2, 801438a <_dtoa_r+0x812>
 8014360:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8014364:	0d12      	lsrs	r2, r2, #20
 8014366:	0512      	lsls	r2, r2, #20
 8014368:	b18a      	cbz	r2, 801438e <_dtoa_r+0x816>
 801436a:	9b04      	ldr	r3, [sp, #16]
 801436c:	3301      	adds	r3, #1
 801436e:	9304      	str	r3, [sp, #16]
 8014370:	9b05      	ldr	r3, [sp, #20]
 8014372:	3301      	adds	r3, #1
 8014374:	9305      	str	r3, [sp, #20]
 8014376:	2301      	movs	r3, #1
 8014378:	930a      	str	r3, [sp, #40]	; 0x28
 801437a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801437c:	2b00      	cmp	r3, #0
 801437e:	f47f af70 	bne.w	8014262 <_dtoa_r+0x6ea>
 8014382:	2001      	movs	r0, #1
 8014384:	e775      	b.n	8014272 <_dtoa_r+0x6fa>
 8014386:	2300      	movs	r3, #0
 8014388:	e7f6      	b.n	8014378 <_dtoa_r+0x800>
 801438a:	9b02      	ldr	r3, [sp, #8]
 801438c:	e7f4      	b.n	8014378 <_dtoa_r+0x800>
 801438e:	920a      	str	r2, [sp, #40]	; 0x28
 8014390:	e7f3      	b.n	801437a <_dtoa_r+0x802>
 8014392:	d082      	beq.n	801429a <_dtoa_r+0x722>
 8014394:	4610      	mov	r0, r2
 8014396:	301c      	adds	r0, #28
 8014398:	e778      	b.n	801428c <_dtoa_r+0x714>
 801439a:	f1b9 0f00 	cmp.w	r9, #0
 801439e:	dc37      	bgt.n	8014410 <_dtoa_r+0x898>
 80143a0:	9b06      	ldr	r3, [sp, #24]
 80143a2:	2b02      	cmp	r3, #2
 80143a4:	dd34      	ble.n	8014410 <_dtoa_r+0x898>
 80143a6:	46ca      	mov	sl, r9
 80143a8:	f1ba 0f00 	cmp.w	sl, #0
 80143ac:	d10d      	bne.n	80143ca <_dtoa_r+0x852>
 80143ae:	4621      	mov	r1, r4
 80143b0:	4653      	mov	r3, sl
 80143b2:	2205      	movs	r2, #5
 80143b4:	4630      	mov	r0, r6
 80143b6:	f000 f9bf 	bl	8014738 <__multadd>
 80143ba:	4601      	mov	r1, r0
 80143bc:	4604      	mov	r4, r0
 80143be:	4628      	mov	r0, r5
 80143c0:	f000 fbda 	bl	8014b78 <__mcmp>
 80143c4:	2800      	cmp	r0, #0
 80143c6:	f73f adeb 	bgt.w	8013fa0 <_dtoa_r+0x428>
 80143ca:	9b08      	ldr	r3, [sp, #32]
 80143cc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80143d0:	ea6f 0b03 	mvn.w	fp, r3
 80143d4:	f04f 0900 	mov.w	r9, #0
 80143d8:	4621      	mov	r1, r4
 80143da:	4630      	mov	r0, r6
 80143dc:	f000 f98a 	bl	80146f4 <_Bfree>
 80143e0:	2f00      	cmp	r7, #0
 80143e2:	f43f aea8 	beq.w	8014136 <_dtoa_r+0x5be>
 80143e6:	f1b9 0f00 	cmp.w	r9, #0
 80143ea:	d005      	beq.n	80143f8 <_dtoa_r+0x880>
 80143ec:	45b9      	cmp	r9, r7
 80143ee:	d003      	beq.n	80143f8 <_dtoa_r+0x880>
 80143f0:	4649      	mov	r1, r9
 80143f2:	4630      	mov	r0, r6
 80143f4:	f000 f97e 	bl	80146f4 <_Bfree>
 80143f8:	4639      	mov	r1, r7
 80143fa:	4630      	mov	r0, r6
 80143fc:	f000 f97a 	bl	80146f4 <_Bfree>
 8014400:	e699      	b.n	8014136 <_dtoa_r+0x5be>
 8014402:	2400      	movs	r4, #0
 8014404:	4627      	mov	r7, r4
 8014406:	e7e0      	b.n	80143ca <_dtoa_r+0x852>
 8014408:	46bb      	mov	fp, r7
 801440a:	4604      	mov	r4, r0
 801440c:	4607      	mov	r7, r0
 801440e:	e5c7      	b.n	8013fa0 <_dtoa_r+0x428>
 8014410:	9b07      	ldr	r3, [sp, #28]
 8014412:	46ca      	mov	sl, r9
 8014414:	2b00      	cmp	r3, #0
 8014416:	f000 8100 	beq.w	801461a <_dtoa_r+0xaa2>
 801441a:	f1b8 0f00 	cmp.w	r8, #0
 801441e:	dd05      	ble.n	801442c <_dtoa_r+0x8b4>
 8014420:	4639      	mov	r1, r7
 8014422:	4642      	mov	r2, r8
 8014424:	4630      	mov	r0, r6
 8014426:	f000 fb37 	bl	8014a98 <__lshift>
 801442a:	4607      	mov	r7, r0
 801442c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801442e:	2b00      	cmp	r3, #0
 8014430:	d05d      	beq.n	80144ee <_dtoa_r+0x976>
 8014432:	6879      	ldr	r1, [r7, #4]
 8014434:	4630      	mov	r0, r6
 8014436:	f000 f91d 	bl	8014674 <_Balloc>
 801443a:	4680      	mov	r8, r0
 801443c:	b928      	cbnz	r0, 801444a <_dtoa_r+0x8d2>
 801443e:	4b82      	ldr	r3, [pc, #520]	; (8014648 <_dtoa_r+0xad0>)
 8014440:	4602      	mov	r2, r0
 8014442:	f240 21ea 	movw	r1, #746	; 0x2ea
 8014446:	f7ff bbaf 	b.w	8013ba8 <_dtoa_r+0x30>
 801444a:	693a      	ldr	r2, [r7, #16]
 801444c:	3202      	adds	r2, #2
 801444e:	0092      	lsls	r2, r2, #2
 8014450:	f107 010c 	add.w	r1, r7, #12
 8014454:	300c      	adds	r0, #12
 8014456:	f7fe fda3 	bl	8012fa0 <memcpy>
 801445a:	2201      	movs	r2, #1
 801445c:	4641      	mov	r1, r8
 801445e:	4630      	mov	r0, r6
 8014460:	f000 fb1a 	bl	8014a98 <__lshift>
 8014464:	9b01      	ldr	r3, [sp, #4]
 8014466:	3301      	adds	r3, #1
 8014468:	9304      	str	r3, [sp, #16]
 801446a:	9b01      	ldr	r3, [sp, #4]
 801446c:	4453      	add	r3, sl
 801446e:	9308      	str	r3, [sp, #32]
 8014470:	9b02      	ldr	r3, [sp, #8]
 8014472:	f003 0301 	and.w	r3, r3, #1
 8014476:	46b9      	mov	r9, r7
 8014478:	9307      	str	r3, [sp, #28]
 801447a:	4607      	mov	r7, r0
 801447c:	9b04      	ldr	r3, [sp, #16]
 801447e:	4621      	mov	r1, r4
 8014480:	3b01      	subs	r3, #1
 8014482:	4628      	mov	r0, r5
 8014484:	9302      	str	r3, [sp, #8]
 8014486:	f7ff fae9 	bl	8013a5c <quorem>
 801448a:	4603      	mov	r3, r0
 801448c:	3330      	adds	r3, #48	; 0x30
 801448e:	9005      	str	r0, [sp, #20]
 8014490:	4649      	mov	r1, r9
 8014492:	4628      	mov	r0, r5
 8014494:	9309      	str	r3, [sp, #36]	; 0x24
 8014496:	f000 fb6f 	bl	8014b78 <__mcmp>
 801449a:	463a      	mov	r2, r7
 801449c:	4682      	mov	sl, r0
 801449e:	4621      	mov	r1, r4
 80144a0:	4630      	mov	r0, r6
 80144a2:	f000 fb85 	bl	8014bb0 <__mdiff>
 80144a6:	68c2      	ldr	r2, [r0, #12]
 80144a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80144aa:	4680      	mov	r8, r0
 80144ac:	bb0a      	cbnz	r2, 80144f2 <_dtoa_r+0x97a>
 80144ae:	4601      	mov	r1, r0
 80144b0:	4628      	mov	r0, r5
 80144b2:	f000 fb61 	bl	8014b78 <__mcmp>
 80144b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80144b8:	4602      	mov	r2, r0
 80144ba:	4641      	mov	r1, r8
 80144bc:	4630      	mov	r0, r6
 80144be:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 80144c2:	f000 f917 	bl	80146f4 <_Bfree>
 80144c6:	9b06      	ldr	r3, [sp, #24]
 80144c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80144ca:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80144ce:	ea43 0102 	orr.w	r1, r3, r2
 80144d2:	9b07      	ldr	r3, [sp, #28]
 80144d4:	430b      	orrs	r3, r1
 80144d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80144d8:	d10d      	bne.n	80144f6 <_dtoa_r+0x97e>
 80144da:	2b39      	cmp	r3, #57	; 0x39
 80144dc:	d029      	beq.n	8014532 <_dtoa_r+0x9ba>
 80144de:	f1ba 0f00 	cmp.w	sl, #0
 80144e2:	dd01      	ble.n	80144e8 <_dtoa_r+0x970>
 80144e4:	9b05      	ldr	r3, [sp, #20]
 80144e6:	3331      	adds	r3, #49	; 0x31
 80144e8:	9a02      	ldr	r2, [sp, #8]
 80144ea:	7013      	strb	r3, [r2, #0]
 80144ec:	e774      	b.n	80143d8 <_dtoa_r+0x860>
 80144ee:	4638      	mov	r0, r7
 80144f0:	e7b8      	b.n	8014464 <_dtoa_r+0x8ec>
 80144f2:	2201      	movs	r2, #1
 80144f4:	e7e1      	b.n	80144ba <_dtoa_r+0x942>
 80144f6:	f1ba 0f00 	cmp.w	sl, #0
 80144fa:	db06      	blt.n	801450a <_dtoa_r+0x992>
 80144fc:	9906      	ldr	r1, [sp, #24]
 80144fe:	ea41 0a0a 	orr.w	sl, r1, sl
 8014502:	9907      	ldr	r1, [sp, #28]
 8014504:	ea5a 0101 	orrs.w	r1, sl, r1
 8014508:	d120      	bne.n	801454c <_dtoa_r+0x9d4>
 801450a:	2a00      	cmp	r2, #0
 801450c:	ddec      	ble.n	80144e8 <_dtoa_r+0x970>
 801450e:	4629      	mov	r1, r5
 8014510:	2201      	movs	r2, #1
 8014512:	4630      	mov	r0, r6
 8014514:	9304      	str	r3, [sp, #16]
 8014516:	f000 fabf 	bl	8014a98 <__lshift>
 801451a:	4621      	mov	r1, r4
 801451c:	4605      	mov	r5, r0
 801451e:	f000 fb2b 	bl	8014b78 <__mcmp>
 8014522:	2800      	cmp	r0, #0
 8014524:	9b04      	ldr	r3, [sp, #16]
 8014526:	dc02      	bgt.n	801452e <_dtoa_r+0x9b6>
 8014528:	d1de      	bne.n	80144e8 <_dtoa_r+0x970>
 801452a:	07da      	lsls	r2, r3, #31
 801452c:	d5dc      	bpl.n	80144e8 <_dtoa_r+0x970>
 801452e:	2b39      	cmp	r3, #57	; 0x39
 8014530:	d1d8      	bne.n	80144e4 <_dtoa_r+0x96c>
 8014532:	9a02      	ldr	r2, [sp, #8]
 8014534:	2339      	movs	r3, #57	; 0x39
 8014536:	7013      	strb	r3, [r2, #0]
 8014538:	4643      	mov	r3, r8
 801453a:	4698      	mov	r8, r3
 801453c:	3b01      	subs	r3, #1
 801453e:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8014542:	2a39      	cmp	r2, #57	; 0x39
 8014544:	d051      	beq.n	80145ea <_dtoa_r+0xa72>
 8014546:	3201      	adds	r2, #1
 8014548:	701a      	strb	r2, [r3, #0]
 801454a:	e745      	b.n	80143d8 <_dtoa_r+0x860>
 801454c:	2a00      	cmp	r2, #0
 801454e:	dd03      	ble.n	8014558 <_dtoa_r+0x9e0>
 8014550:	2b39      	cmp	r3, #57	; 0x39
 8014552:	d0ee      	beq.n	8014532 <_dtoa_r+0x9ba>
 8014554:	3301      	adds	r3, #1
 8014556:	e7c7      	b.n	80144e8 <_dtoa_r+0x970>
 8014558:	9a04      	ldr	r2, [sp, #16]
 801455a:	9908      	ldr	r1, [sp, #32]
 801455c:	f802 3c01 	strb.w	r3, [r2, #-1]
 8014560:	428a      	cmp	r2, r1
 8014562:	d02b      	beq.n	80145bc <_dtoa_r+0xa44>
 8014564:	4629      	mov	r1, r5
 8014566:	2300      	movs	r3, #0
 8014568:	220a      	movs	r2, #10
 801456a:	4630      	mov	r0, r6
 801456c:	f000 f8e4 	bl	8014738 <__multadd>
 8014570:	45b9      	cmp	r9, r7
 8014572:	4605      	mov	r5, r0
 8014574:	f04f 0300 	mov.w	r3, #0
 8014578:	f04f 020a 	mov.w	r2, #10
 801457c:	4649      	mov	r1, r9
 801457e:	4630      	mov	r0, r6
 8014580:	d107      	bne.n	8014592 <_dtoa_r+0xa1a>
 8014582:	f000 f8d9 	bl	8014738 <__multadd>
 8014586:	4681      	mov	r9, r0
 8014588:	4607      	mov	r7, r0
 801458a:	9b04      	ldr	r3, [sp, #16]
 801458c:	3301      	adds	r3, #1
 801458e:	9304      	str	r3, [sp, #16]
 8014590:	e774      	b.n	801447c <_dtoa_r+0x904>
 8014592:	f000 f8d1 	bl	8014738 <__multadd>
 8014596:	4639      	mov	r1, r7
 8014598:	4681      	mov	r9, r0
 801459a:	2300      	movs	r3, #0
 801459c:	220a      	movs	r2, #10
 801459e:	4630      	mov	r0, r6
 80145a0:	f000 f8ca 	bl	8014738 <__multadd>
 80145a4:	4607      	mov	r7, r0
 80145a6:	e7f0      	b.n	801458a <_dtoa_r+0xa12>
 80145a8:	f1ba 0f00 	cmp.w	sl, #0
 80145ac:	9a01      	ldr	r2, [sp, #4]
 80145ae:	bfcc      	ite	gt
 80145b0:	46d0      	movgt	r8, sl
 80145b2:	f04f 0801 	movle.w	r8, #1
 80145b6:	4490      	add	r8, r2
 80145b8:	f04f 0900 	mov.w	r9, #0
 80145bc:	4629      	mov	r1, r5
 80145be:	2201      	movs	r2, #1
 80145c0:	4630      	mov	r0, r6
 80145c2:	9302      	str	r3, [sp, #8]
 80145c4:	f000 fa68 	bl	8014a98 <__lshift>
 80145c8:	4621      	mov	r1, r4
 80145ca:	4605      	mov	r5, r0
 80145cc:	f000 fad4 	bl	8014b78 <__mcmp>
 80145d0:	2800      	cmp	r0, #0
 80145d2:	dcb1      	bgt.n	8014538 <_dtoa_r+0x9c0>
 80145d4:	d102      	bne.n	80145dc <_dtoa_r+0xa64>
 80145d6:	9b02      	ldr	r3, [sp, #8]
 80145d8:	07db      	lsls	r3, r3, #31
 80145da:	d4ad      	bmi.n	8014538 <_dtoa_r+0x9c0>
 80145dc:	4643      	mov	r3, r8
 80145de:	4698      	mov	r8, r3
 80145e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80145e4:	2a30      	cmp	r2, #48	; 0x30
 80145e6:	d0fa      	beq.n	80145de <_dtoa_r+0xa66>
 80145e8:	e6f6      	b.n	80143d8 <_dtoa_r+0x860>
 80145ea:	9a01      	ldr	r2, [sp, #4]
 80145ec:	429a      	cmp	r2, r3
 80145ee:	d1a4      	bne.n	801453a <_dtoa_r+0x9c2>
 80145f0:	f10b 0b01 	add.w	fp, fp, #1
 80145f4:	2331      	movs	r3, #49	; 0x31
 80145f6:	e778      	b.n	80144ea <_dtoa_r+0x972>
 80145f8:	4b14      	ldr	r3, [pc, #80]	; (801464c <_dtoa_r+0xad4>)
 80145fa:	f7ff bb27 	b.w	8013c4c <_dtoa_r+0xd4>
 80145fe:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014600:	2b00      	cmp	r3, #0
 8014602:	f47f ab03 	bne.w	8013c0c <_dtoa_r+0x94>
 8014606:	4b12      	ldr	r3, [pc, #72]	; (8014650 <_dtoa_r+0xad8>)
 8014608:	f7ff bb20 	b.w	8013c4c <_dtoa_r+0xd4>
 801460c:	f1ba 0f00 	cmp.w	sl, #0
 8014610:	dc03      	bgt.n	801461a <_dtoa_r+0xaa2>
 8014612:	9b06      	ldr	r3, [sp, #24]
 8014614:	2b02      	cmp	r3, #2
 8014616:	f73f aec7 	bgt.w	80143a8 <_dtoa_r+0x830>
 801461a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801461e:	4621      	mov	r1, r4
 8014620:	4628      	mov	r0, r5
 8014622:	f7ff fa1b 	bl	8013a5c <quorem>
 8014626:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801462a:	f808 3b01 	strb.w	r3, [r8], #1
 801462e:	9a01      	ldr	r2, [sp, #4]
 8014630:	eba8 0202 	sub.w	r2, r8, r2
 8014634:	4592      	cmp	sl, r2
 8014636:	ddb7      	ble.n	80145a8 <_dtoa_r+0xa30>
 8014638:	4629      	mov	r1, r5
 801463a:	2300      	movs	r3, #0
 801463c:	220a      	movs	r2, #10
 801463e:	4630      	mov	r0, r6
 8014640:	f000 f87a 	bl	8014738 <__multadd>
 8014644:	4605      	mov	r5, r0
 8014646:	e7ea      	b.n	801461e <_dtoa_r+0xaa6>
 8014648:	08017107 	.word	0x08017107
 801464c:	08017064 	.word	0x08017064
 8014650:	08017088 	.word	0x08017088

08014654 <_localeconv_r>:
 8014654:	4800      	ldr	r0, [pc, #0]	; (8014658 <_localeconv_r+0x4>)
 8014656:	4770      	bx	lr
 8014658:	24000850 	.word	0x24000850

0801465c <__malloc_lock>:
 801465c:	4801      	ldr	r0, [pc, #4]	; (8014664 <__malloc_lock+0x8>)
 801465e:	f000 bbd4 	b.w	8014e0a <__retarget_lock_acquire_recursive>
 8014662:	bf00      	nop
 8014664:	24002898 	.word	0x24002898

08014668 <__malloc_unlock>:
 8014668:	4801      	ldr	r0, [pc, #4]	; (8014670 <__malloc_unlock+0x8>)
 801466a:	f000 bbcf 	b.w	8014e0c <__retarget_lock_release_recursive>
 801466e:	bf00      	nop
 8014670:	24002898 	.word	0x24002898

08014674 <_Balloc>:
 8014674:	b570      	push	{r4, r5, r6, lr}
 8014676:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8014678:	4604      	mov	r4, r0
 801467a:	460d      	mov	r5, r1
 801467c:	b976      	cbnz	r6, 801469c <_Balloc+0x28>
 801467e:	2010      	movs	r0, #16
 8014680:	f7f4 fcb2 	bl	8008fe8 <__wrap_malloc>
 8014684:	4602      	mov	r2, r0
 8014686:	6260      	str	r0, [r4, #36]	; 0x24
 8014688:	b920      	cbnz	r0, 8014694 <_Balloc+0x20>
 801468a:	4b18      	ldr	r3, [pc, #96]	; (80146ec <_Balloc+0x78>)
 801468c:	4818      	ldr	r0, [pc, #96]	; (80146f0 <_Balloc+0x7c>)
 801468e:	2166      	movs	r1, #102	; 0x66
 8014690:	f000 fb8a 	bl	8014da8 <__assert_func>
 8014694:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014698:	6006      	str	r6, [r0, #0]
 801469a:	60c6      	str	r6, [r0, #12]
 801469c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801469e:	68f3      	ldr	r3, [r6, #12]
 80146a0:	b183      	cbz	r3, 80146c4 <_Balloc+0x50>
 80146a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80146a4:	68db      	ldr	r3, [r3, #12]
 80146a6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80146aa:	b9b8      	cbnz	r0, 80146dc <_Balloc+0x68>
 80146ac:	2101      	movs	r1, #1
 80146ae:	fa01 f605 	lsl.w	r6, r1, r5
 80146b2:	1d72      	adds	r2, r6, #5
 80146b4:	0092      	lsls	r2, r2, #2
 80146b6:	4620      	mov	r0, r4
 80146b8:	f000 fb60 	bl	8014d7c <_calloc_r>
 80146bc:	b160      	cbz	r0, 80146d8 <_Balloc+0x64>
 80146be:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80146c2:	e00e      	b.n	80146e2 <_Balloc+0x6e>
 80146c4:	2221      	movs	r2, #33	; 0x21
 80146c6:	2104      	movs	r1, #4
 80146c8:	4620      	mov	r0, r4
 80146ca:	f000 fb57 	bl	8014d7c <_calloc_r>
 80146ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80146d0:	60f0      	str	r0, [r6, #12]
 80146d2:	68db      	ldr	r3, [r3, #12]
 80146d4:	2b00      	cmp	r3, #0
 80146d6:	d1e4      	bne.n	80146a2 <_Balloc+0x2e>
 80146d8:	2000      	movs	r0, #0
 80146da:	bd70      	pop	{r4, r5, r6, pc}
 80146dc:	6802      	ldr	r2, [r0, #0]
 80146de:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80146e2:	2300      	movs	r3, #0
 80146e4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80146e8:	e7f7      	b.n	80146da <_Balloc+0x66>
 80146ea:	bf00      	nop
 80146ec:	08017095 	.word	0x08017095
 80146f0:	08017118 	.word	0x08017118

080146f4 <_Bfree>:
 80146f4:	b570      	push	{r4, r5, r6, lr}
 80146f6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80146f8:	4605      	mov	r5, r0
 80146fa:	460c      	mov	r4, r1
 80146fc:	b976      	cbnz	r6, 801471c <_Bfree+0x28>
 80146fe:	2010      	movs	r0, #16
 8014700:	f7f4 fc72 	bl	8008fe8 <__wrap_malloc>
 8014704:	4602      	mov	r2, r0
 8014706:	6268      	str	r0, [r5, #36]	; 0x24
 8014708:	b920      	cbnz	r0, 8014714 <_Bfree+0x20>
 801470a:	4b09      	ldr	r3, [pc, #36]	; (8014730 <_Bfree+0x3c>)
 801470c:	4809      	ldr	r0, [pc, #36]	; (8014734 <_Bfree+0x40>)
 801470e:	218a      	movs	r1, #138	; 0x8a
 8014710:	f000 fb4a 	bl	8014da8 <__assert_func>
 8014714:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014718:	6006      	str	r6, [r0, #0]
 801471a:	60c6      	str	r6, [r0, #12]
 801471c:	b13c      	cbz	r4, 801472e <_Bfree+0x3a>
 801471e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8014720:	6862      	ldr	r2, [r4, #4]
 8014722:	68db      	ldr	r3, [r3, #12]
 8014724:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8014728:	6021      	str	r1, [r4, #0]
 801472a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801472e:	bd70      	pop	{r4, r5, r6, pc}
 8014730:	08017095 	.word	0x08017095
 8014734:	08017118 	.word	0x08017118

08014738 <__multadd>:
 8014738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801473c:	690d      	ldr	r5, [r1, #16]
 801473e:	4607      	mov	r7, r0
 8014740:	460c      	mov	r4, r1
 8014742:	461e      	mov	r6, r3
 8014744:	f101 0c14 	add.w	ip, r1, #20
 8014748:	2000      	movs	r0, #0
 801474a:	f8dc 3000 	ldr.w	r3, [ip]
 801474e:	b299      	uxth	r1, r3
 8014750:	fb02 6101 	mla	r1, r2, r1, r6
 8014754:	0c1e      	lsrs	r6, r3, #16
 8014756:	0c0b      	lsrs	r3, r1, #16
 8014758:	fb02 3306 	mla	r3, r2, r6, r3
 801475c:	b289      	uxth	r1, r1
 801475e:	3001      	adds	r0, #1
 8014760:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8014764:	4285      	cmp	r5, r0
 8014766:	f84c 1b04 	str.w	r1, [ip], #4
 801476a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801476e:	dcec      	bgt.n	801474a <__multadd+0x12>
 8014770:	b30e      	cbz	r6, 80147b6 <__multadd+0x7e>
 8014772:	68a3      	ldr	r3, [r4, #8]
 8014774:	42ab      	cmp	r3, r5
 8014776:	dc19      	bgt.n	80147ac <__multadd+0x74>
 8014778:	6861      	ldr	r1, [r4, #4]
 801477a:	4638      	mov	r0, r7
 801477c:	3101      	adds	r1, #1
 801477e:	f7ff ff79 	bl	8014674 <_Balloc>
 8014782:	4680      	mov	r8, r0
 8014784:	b928      	cbnz	r0, 8014792 <__multadd+0x5a>
 8014786:	4602      	mov	r2, r0
 8014788:	4b0c      	ldr	r3, [pc, #48]	; (80147bc <__multadd+0x84>)
 801478a:	480d      	ldr	r0, [pc, #52]	; (80147c0 <__multadd+0x88>)
 801478c:	21b5      	movs	r1, #181	; 0xb5
 801478e:	f000 fb0b 	bl	8014da8 <__assert_func>
 8014792:	6922      	ldr	r2, [r4, #16]
 8014794:	3202      	adds	r2, #2
 8014796:	f104 010c 	add.w	r1, r4, #12
 801479a:	0092      	lsls	r2, r2, #2
 801479c:	300c      	adds	r0, #12
 801479e:	f7fe fbff 	bl	8012fa0 <memcpy>
 80147a2:	4621      	mov	r1, r4
 80147a4:	4638      	mov	r0, r7
 80147a6:	f7ff ffa5 	bl	80146f4 <_Bfree>
 80147aa:	4644      	mov	r4, r8
 80147ac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80147b0:	3501      	adds	r5, #1
 80147b2:	615e      	str	r6, [r3, #20]
 80147b4:	6125      	str	r5, [r4, #16]
 80147b6:	4620      	mov	r0, r4
 80147b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80147bc:	08017107 	.word	0x08017107
 80147c0:	08017118 	.word	0x08017118

080147c4 <__hi0bits>:
 80147c4:	0c03      	lsrs	r3, r0, #16
 80147c6:	041b      	lsls	r3, r3, #16
 80147c8:	b9d3      	cbnz	r3, 8014800 <__hi0bits+0x3c>
 80147ca:	0400      	lsls	r0, r0, #16
 80147cc:	2310      	movs	r3, #16
 80147ce:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80147d2:	bf04      	itt	eq
 80147d4:	0200      	lsleq	r0, r0, #8
 80147d6:	3308      	addeq	r3, #8
 80147d8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80147dc:	bf04      	itt	eq
 80147de:	0100      	lsleq	r0, r0, #4
 80147e0:	3304      	addeq	r3, #4
 80147e2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80147e6:	bf04      	itt	eq
 80147e8:	0080      	lsleq	r0, r0, #2
 80147ea:	3302      	addeq	r3, #2
 80147ec:	2800      	cmp	r0, #0
 80147ee:	db05      	blt.n	80147fc <__hi0bits+0x38>
 80147f0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80147f4:	f103 0301 	add.w	r3, r3, #1
 80147f8:	bf08      	it	eq
 80147fa:	2320      	moveq	r3, #32
 80147fc:	4618      	mov	r0, r3
 80147fe:	4770      	bx	lr
 8014800:	2300      	movs	r3, #0
 8014802:	e7e4      	b.n	80147ce <__hi0bits+0xa>

08014804 <__lo0bits>:
 8014804:	6803      	ldr	r3, [r0, #0]
 8014806:	f013 0207 	ands.w	r2, r3, #7
 801480a:	4601      	mov	r1, r0
 801480c:	d00b      	beq.n	8014826 <__lo0bits+0x22>
 801480e:	07da      	lsls	r2, r3, #31
 8014810:	d423      	bmi.n	801485a <__lo0bits+0x56>
 8014812:	0798      	lsls	r0, r3, #30
 8014814:	bf49      	itett	mi
 8014816:	085b      	lsrmi	r3, r3, #1
 8014818:	089b      	lsrpl	r3, r3, #2
 801481a:	2001      	movmi	r0, #1
 801481c:	600b      	strmi	r3, [r1, #0]
 801481e:	bf5c      	itt	pl
 8014820:	600b      	strpl	r3, [r1, #0]
 8014822:	2002      	movpl	r0, #2
 8014824:	4770      	bx	lr
 8014826:	b298      	uxth	r0, r3
 8014828:	b9a8      	cbnz	r0, 8014856 <__lo0bits+0x52>
 801482a:	0c1b      	lsrs	r3, r3, #16
 801482c:	2010      	movs	r0, #16
 801482e:	b2da      	uxtb	r2, r3
 8014830:	b90a      	cbnz	r2, 8014836 <__lo0bits+0x32>
 8014832:	3008      	adds	r0, #8
 8014834:	0a1b      	lsrs	r3, r3, #8
 8014836:	071a      	lsls	r2, r3, #28
 8014838:	bf04      	itt	eq
 801483a:	091b      	lsreq	r3, r3, #4
 801483c:	3004      	addeq	r0, #4
 801483e:	079a      	lsls	r2, r3, #30
 8014840:	bf04      	itt	eq
 8014842:	089b      	lsreq	r3, r3, #2
 8014844:	3002      	addeq	r0, #2
 8014846:	07da      	lsls	r2, r3, #31
 8014848:	d403      	bmi.n	8014852 <__lo0bits+0x4e>
 801484a:	085b      	lsrs	r3, r3, #1
 801484c:	f100 0001 	add.w	r0, r0, #1
 8014850:	d005      	beq.n	801485e <__lo0bits+0x5a>
 8014852:	600b      	str	r3, [r1, #0]
 8014854:	4770      	bx	lr
 8014856:	4610      	mov	r0, r2
 8014858:	e7e9      	b.n	801482e <__lo0bits+0x2a>
 801485a:	2000      	movs	r0, #0
 801485c:	4770      	bx	lr
 801485e:	2020      	movs	r0, #32
 8014860:	4770      	bx	lr
	...

08014864 <__i2b>:
 8014864:	b510      	push	{r4, lr}
 8014866:	460c      	mov	r4, r1
 8014868:	2101      	movs	r1, #1
 801486a:	f7ff ff03 	bl	8014674 <_Balloc>
 801486e:	4602      	mov	r2, r0
 8014870:	b928      	cbnz	r0, 801487e <__i2b+0x1a>
 8014872:	4b05      	ldr	r3, [pc, #20]	; (8014888 <__i2b+0x24>)
 8014874:	4805      	ldr	r0, [pc, #20]	; (801488c <__i2b+0x28>)
 8014876:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801487a:	f000 fa95 	bl	8014da8 <__assert_func>
 801487e:	2301      	movs	r3, #1
 8014880:	6144      	str	r4, [r0, #20]
 8014882:	6103      	str	r3, [r0, #16]
 8014884:	bd10      	pop	{r4, pc}
 8014886:	bf00      	nop
 8014888:	08017107 	.word	0x08017107
 801488c:	08017118 	.word	0x08017118

08014890 <__multiply>:
 8014890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014894:	4691      	mov	r9, r2
 8014896:	690a      	ldr	r2, [r1, #16]
 8014898:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801489c:	429a      	cmp	r2, r3
 801489e:	bfb8      	it	lt
 80148a0:	460b      	movlt	r3, r1
 80148a2:	460c      	mov	r4, r1
 80148a4:	bfbc      	itt	lt
 80148a6:	464c      	movlt	r4, r9
 80148a8:	4699      	movlt	r9, r3
 80148aa:	6927      	ldr	r7, [r4, #16]
 80148ac:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80148b0:	68a3      	ldr	r3, [r4, #8]
 80148b2:	6861      	ldr	r1, [r4, #4]
 80148b4:	eb07 060a 	add.w	r6, r7, sl
 80148b8:	42b3      	cmp	r3, r6
 80148ba:	b085      	sub	sp, #20
 80148bc:	bfb8      	it	lt
 80148be:	3101      	addlt	r1, #1
 80148c0:	f7ff fed8 	bl	8014674 <_Balloc>
 80148c4:	b930      	cbnz	r0, 80148d4 <__multiply+0x44>
 80148c6:	4602      	mov	r2, r0
 80148c8:	4b44      	ldr	r3, [pc, #272]	; (80149dc <__multiply+0x14c>)
 80148ca:	4845      	ldr	r0, [pc, #276]	; (80149e0 <__multiply+0x150>)
 80148cc:	f240 115d 	movw	r1, #349	; 0x15d
 80148d0:	f000 fa6a 	bl	8014da8 <__assert_func>
 80148d4:	f100 0514 	add.w	r5, r0, #20
 80148d8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80148dc:	462b      	mov	r3, r5
 80148de:	2200      	movs	r2, #0
 80148e0:	4543      	cmp	r3, r8
 80148e2:	d321      	bcc.n	8014928 <__multiply+0x98>
 80148e4:	f104 0314 	add.w	r3, r4, #20
 80148e8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80148ec:	f109 0314 	add.w	r3, r9, #20
 80148f0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80148f4:	9202      	str	r2, [sp, #8]
 80148f6:	1b3a      	subs	r2, r7, r4
 80148f8:	3a15      	subs	r2, #21
 80148fa:	f022 0203 	bic.w	r2, r2, #3
 80148fe:	3204      	adds	r2, #4
 8014900:	f104 0115 	add.w	r1, r4, #21
 8014904:	428f      	cmp	r7, r1
 8014906:	bf38      	it	cc
 8014908:	2204      	movcc	r2, #4
 801490a:	9201      	str	r2, [sp, #4]
 801490c:	9a02      	ldr	r2, [sp, #8]
 801490e:	9303      	str	r3, [sp, #12]
 8014910:	429a      	cmp	r2, r3
 8014912:	d80c      	bhi.n	801492e <__multiply+0x9e>
 8014914:	2e00      	cmp	r6, #0
 8014916:	dd03      	ble.n	8014920 <__multiply+0x90>
 8014918:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801491c:	2b00      	cmp	r3, #0
 801491e:	d05a      	beq.n	80149d6 <__multiply+0x146>
 8014920:	6106      	str	r6, [r0, #16]
 8014922:	b005      	add	sp, #20
 8014924:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014928:	f843 2b04 	str.w	r2, [r3], #4
 801492c:	e7d8      	b.n	80148e0 <__multiply+0x50>
 801492e:	f8b3 a000 	ldrh.w	sl, [r3]
 8014932:	f1ba 0f00 	cmp.w	sl, #0
 8014936:	d024      	beq.n	8014982 <__multiply+0xf2>
 8014938:	f104 0e14 	add.w	lr, r4, #20
 801493c:	46a9      	mov	r9, r5
 801493e:	f04f 0c00 	mov.w	ip, #0
 8014942:	f85e 2b04 	ldr.w	r2, [lr], #4
 8014946:	f8d9 1000 	ldr.w	r1, [r9]
 801494a:	fa1f fb82 	uxth.w	fp, r2
 801494e:	b289      	uxth	r1, r1
 8014950:	fb0a 110b 	mla	r1, sl, fp, r1
 8014954:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8014958:	f8d9 2000 	ldr.w	r2, [r9]
 801495c:	4461      	add	r1, ip
 801495e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8014962:	fb0a c20b 	mla	r2, sl, fp, ip
 8014966:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801496a:	b289      	uxth	r1, r1
 801496c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8014970:	4577      	cmp	r7, lr
 8014972:	f849 1b04 	str.w	r1, [r9], #4
 8014976:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801497a:	d8e2      	bhi.n	8014942 <__multiply+0xb2>
 801497c:	9a01      	ldr	r2, [sp, #4]
 801497e:	f845 c002 	str.w	ip, [r5, r2]
 8014982:	9a03      	ldr	r2, [sp, #12]
 8014984:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8014988:	3304      	adds	r3, #4
 801498a:	f1b9 0f00 	cmp.w	r9, #0
 801498e:	d020      	beq.n	80149d2 <__multiply+0x142>
 8014990:	6829      	ldr	r1, [r5, #0]
 8014992:	f104 0c14 	add.w	ip, r4, #20
 8014996:	46ae      	mov	lr, r5
 8014998:	f04f 0a00 	mov.w	sl, #0
 801499c:	f8bc b000 	ldrh.w	fp, [ip]
 80149a0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80149a4:	fb09 220b 	mla	r2, r9, fp, r2
 80149a8:	4492      	add	sl, r2
 80149aa:	b289      	uxth	r1, r1
 80149ac:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80149b0:	f84e 1b04 	str.w	r1, [lr], #4
 80149b4:	f85c 2b04 	ldr.w	r2, [ip], #4
 80149b8:	f8be 1000 	ldrh.w	r1, [lr]
 80149bc:	0c12      	lsrs	r2, r2, #16
 80149be:	fb09 1102 	mla	r1, r9, r2, r1
 80149c2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80149c6:	4567      	cmp	r7, ip
 80149c8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80149cc:	d8e6      	bhi.n	801499c <__multiply+0x10c>
 80149ce:	9a01      	ldr	r2, [sp, #4]
 80149d0:	50a9      	str	r1, [r5, r2]
 80149d2:	3504      	adds	r5, #4
 80149d4:	e79a      	b.n	801490c <__multiply+0x7c>
 80149d6:	3e01      	subs	r6, #1
 80149d8:	e79c      	b.n	8014914 <__multiply+0x84>
 80149da:	bf00      	nop
 80149dc:	08017107 	.word	0x08017107
 80149e0:	08017118 	.word	0x08017118

080149e4 <__pow5mult>:
 80149e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80149e8:	4615      	mov	r5, r2
 80149ea:	f012 0203 	ands.w	r2, r2, #3
 80149ee:	4606      	mov	r6, r0
 80149f0:	460f      	mov	r7, r1
 80149f2:	d007      	beq.n	8014a04 <__pow5mult+0x20>
 80149f4:	4c25      	ldr	r4, [pc, #148]	; (8014a8c <__pow5mult+0xa8>)
 80149f6:	3a01      	subs	r2, #1
 80149f8:	2300      	movs	r3, #0
 80149fa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80149fe:	f7ff fe9b 	bl	8014738 <__multadd>
 8014a02:	4607      	mov	r7, r0
 8014a04:	10ad      	asrs	r5, r5, #2
 8014a06:	d03d      	beq.n	8014a84 <__pow5mult+0xa0>
 8014a08:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8014a0a:	b97c      	cbnz	r4, 8014a2c <__pow5mult+0x48>
 8014a0c:	2010      	movs	r0, #16
 8014a0e:	f7f4 faeb 	bl	8008fe8 <__wrap_malloc>
 8014a12:	4602      	mov	r2, r0
 8014a14:	6270      	str	r0, [r6, #36]	; 0x24
 8014a16:	b928      	cbnz	r0, 8014a24 <__pow5mult+0x40>
 8014a18:	4b1d      	ldr	r3, [pc, #116]	; (8014a90 <__pow5mult+0xac>)
 8014a1a:	481e      	ldr	r0, [pc, #120]	; (8014a94 <__pow5mult+0xb0>)
 8014a1c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8014a20:	f000 f9c2 	bl	8014da8 <__assert_func>
 8014a24:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8014a28:	6004      	str	r4, [r0, #0]
 8014a2a:	60c4      	str	r4, [r0, #12]
 8014a2c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8014a30:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8014a34:	b94c      	cbnz	r4, 8014a4a <__pow5mult+0x66>
 8014a36:	f240 2171 	movw	r1, #625	; 0x271
 8014a3a:	4630      	mov	r0, r6
 8014a3c:	f7ff ff12 	bl	8014864 <__i2b>
 8014a40:	2300      	movs	r3, #0
 8014a42:	f8c8 0008 	str.w	r0, [r8, #8]
 8014a46:	4604      	mov	r4, r0
 8014a48:	6003      	str	r3, [r0, #0]
 8014a4a:	f04f 0900 	mov.w	r9, #0
 8014a4e:	07eb      	lsls	r3, r5, #31
 8014a50:	d50a      	bpl.n	8014a68 <__pow5mult+0x84>
 8014a52:	4639      	mov	r1, r7
 8014a54:	4622      	mov	r2, r4
 8014a56:	4630      	mov	r0, r6
 8014a58:	f7ff ff1a 	bl	8014890 <__multiply>
 8014a5c:	4639      	mov	r1, r7
 8014a5e:	4680      	mov	r8, r0
 8014a60:	4630      	mov	r0, r6
 8014a62:	f7ff fe47 	bl	80146f4 <_Bfree>
 8014a66:	4647      	mov	r7, r8
 8014a68:	106d      	asrs	r5, r5, #1
 8014a6a:	d00b      	beq.n	8014a84 <__pow5mult+0xa0>
 8014a6c:	6820      	ldr	r0, [r4, #0]
 8014a6e:	b938      	cbnz	r0, 8014a80 <__pow5mult+0x9c>
 8014a70:	4622      	mov	r2, r4
 8014a72:	4621      	mov	r1, r4
 8014a74:	4630      	mov	r0, r6
 8014a76:	f7ff ff0b 	bl	8014890 <__multiply>
 8014a7a:	6020      	str	r0, [r4, #0]
 8014a7c:	f8c0 9000 	str.w	r9, [r0]
 8014a80:	4604      	mov	r4, r0
 8014a82:	e7e4      	b.n	8014a4e <__pow5mult+0x6a>
 8014a84:	4638      	mov	r0, r7
 8014a86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014a8a:	bf00      	nop
 8014a8c:	08017268 	.word	0x08017268
 8014a90:	08017095 	.word	0x08017095
 8014a94:	08017118 	.word	0x08017118

08014a98 <__lshift>:
 8014a98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014a9c:	460c      	mov	r4, r1
 8014a9e:	6849      	ldr	r1, [r1, #4]
 8014aa0:	6923      	ldr	r3, [r4, #16]
 8014aa2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8014aa6:	68a3      	ldr	r3, [r4, #8]
 8014aa8:	4607      	mov	r7, r0
 8014aaa:	4691      	mov	r9, r2
 8014aac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8014ab0:	f108 0601 	add.w	r6, r8, #1
 8014ab4:	42b3      	cmp	r3, r6
 8014ab6:	db0b      	blt.n	8014ad0 <__lshift+0x38>
 8014ab8:	4638      	mov	r0, r7
 8014aba:	f7ff fddb 	bl	8014674 <_Balloc>
 8014abe:	4605      	mov	r5, r0
 8014ac0:	b948      	cbnz	r0, 8014ad6 <__lshift+0x3e>
 8014ac2:	4602      	mov	r2, r0
 8014ac4:	4b2a      	ldr	r3, [pc, #168]	; (8014b70 <__lshift+0xd8>)
 8014ac6:	482b      	ldr	r0, [pc, #172]	; (8014b74 <__lshift+0xdc>)
 8014ac8:	f240 11d9 	movw	r1, #473	; 0x1d9
 8014acc:	f000 f96c 	bl	8014da8 <__assert_func>
 8014ad0:	3101      	adds	r1, #1
 8014ad2:	005b      	lsls	r3, r3, #1
 8014ad4:	e7ee      	b.n	8014ab4 <__lshift+0x1c>
 8014ad6:	2300      	movs	r3, #0
 8014ad8:	f100 0114 	add.w	r1, r0, #20
 8014adc:	f100 0210 	add.w	r2, r0, #16
 8014ae0:	4618      	mov	r0, r3
 8014ae2:	4553      	cmp	r3, sl
 8014ae4:	db37      	blt.n	8014b56 <__lshift+0xbe>
 8014ae6:	6920      	ldr	r0, [r4, #16]
 8014ae8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8014aec:	f104 0314 	add.w	r3, r4, #20
 8014af0:	f019 091f 	ands.w	r9, r9, #31
 8014af4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8014af8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8014afc:	d02f      	beq.n	8014b5e <__lshift+0xc6>
 8014afe:	f1c9 0e20 	rsb	lr, r9, #32
 8014b02:	468a      	mov	sl, r1
 8014b04:	f04f 0c00 	mov.w	ip, #0
 8014b08:	681a      	ldr	r2, [r3, #0]
 8014b0a:	fa02 f209 	lsl.w	r2, r2, r9
 8014b0e:	ea42 020c 	orr.w	r2, r2, ip
 8014b12:	f84a 2b04 	str.w	r2, [sl], #4
 8014b16:	f853 2b04 	ldr.w	r2, [r3], #4
 8014b1a:	4298      	cmp	r0, r3
 8014b1c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8014b20:	d8f2      	bhi.n	8014b08 <__lshift+0x70>
 8014b22:	1b03      	subs	r3, r0, r4
 8014b24:	3b15      	subs	r3, #21
 8014b26:	f023 0303 	bic.w	r3, r3, #3
 8014b2a:	3304      	adds	r3, #4
 8014b2c:	f104 0215 	add.w	r2, r4, #21
 8014b30:	4290      	cmp	r0, r2
 8014b32:	bf38      	it	cc
 8014b34:	2304      	movcc	r3, #4
 8014b36:	f841 c003 	str.w	ip, [r1, r3]
 8014b3a:	f1bc 0f00 	cmp.w	ip, #0
 8014b3e:	d001      	beq.n	8014b44 <__lshift+0xac>
 8014b40:	f108 0602 	add.w	r6, r8, #2
 8014b44:	3e01      	subs	r6, #1
 8014b46:	4638      	mov	r0, r7
 8014b48:	612e      	str	r6, [r5, #16]
 8014b4a:	4621      	mov	r1, r4
 8014b4c:	f7ff fdd2 	bl	80146f4 <_Bfree>
 8014b50:	4628      	mov	r0, r5
 8014b52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014b56:	f842 0f04 	str.w	r0, [r2, #4]!
 8014b5a:	3301      	adds	r3, #1
 8014b5c:	e7c1      	b.n	8014ae2 <__lshift+0x4a>
 8014b5e:	3904      	subs	r1, #4
 8014b60:	f853 2b04 	ldr.w	r2, [r3], #4
 8014b64:	f841 2f04 	str.w	r2, [r1, #4]!
 8014b68:	4298      	cmp	r0, r3
 8014b6a:	d8f9      	bhi.n	8014b60 <__lshift+0xc8>
 8014b6c:	e7ea      	b.n	8014b44 <__lshift+0xac>
 8014b6e:	bf00      	nop
 8014b70:	08017107 	.word	0x08017107
 8014b74:	08017118 	.word	0x08017118

08014b78 <__mcmp>:
 8014b78:	b530      	push	{r4, r5, lr}
 8014b7a:	6902      	ldr	r2, [r0, #16]
 8014b7c:	690c      	ldr	r4, [r1, #16]
 8014b7e:	1b12      	subs	r2, r2, r4
 8014b80:	d10e      	bne.n	8014ba0 <__mcmp+0x28>
 8014b82:	f100 0314 	add.w	r3, r0, #20
 8014b86:	3114      	adds	r1, #20
 8014b88:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8014b8c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8014b90:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8014b94:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8014b98:	42a5      	cmp	r5, r4
 8014b9a:	d003      	beq.n	8014ba4 <__mcmp+0x2c>
 8014b9c:	d305      	bcc.n	8014baa <__mcmp+0x32>
 8014b9e:	2201      	movs	r2, #1
 8014ba0:	4610      	mov	r0, r2
 8014ba2:	bd30      	pop	{r4, r5, pc}
 8014ba4:	4283      	cmp	r3, r0
 8014ba6:	d3f3      	bcc.n	8014b90 <__mcmp+0x18>
 8014ba8:	e7fa      	b.n	8014ba0 <__mcmp+0x28>
 8014baa:	f04f 32ff 	mov.w	r2, #4294967295
 8014bae:	e7f7      	b.n	8014ba0 <__mcmp+0x28>

08014bb0 <__mdiff>:
 8014bb0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014bb4:	460c      	mov	r4, r1
 8014bb6:	4606      	mov	r6, r0
 8014bb8:	4611      	mov	r1, r2
 8014bba:	4620      	mov	r0, r4
 8014bbc:	4690      	mov	r8, r2
 8014bbe:	f7ff ffdb 	bl	8014b78 <__mcmp>
 8014bc2:	1e05      	subs	r5, r0, #0
 8014bc4:	d110      	bne.n	8014be8 <__mdiff+0x38>
 8014bc6:	4629      	mov	r1, r5
 8014bc8:	4630      	mov	r0, r6
 8014bca:	f7ff fd53 	bl	8014674 <_Balloc>
 8014bce:	b930      	cbnz	r0, 8014bde <__mdiff+0x2e>
 8014bd0:	4b3a      	ldr	r3, [pc, #232]	; (8014cbc <__mdiff+0x10c>)
 8014bd2:	4602      	mov	r2, r0
 8014bd4:	f240 2132 	movw	r1, #562	; 0x232
 8014bd8:	4839      	ldr	r0, [pc, #228]	; (8014cc0 <__mdiff+0x110>)
 8014bda:	f000 f8e5 	bl	8014da8 <__assert_func>
 8014bde:	2301      	movs	r3, #1
 8014be0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8014be4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014be8:	bfa4      	itt	ge
 8014bea:	4643      	movge	r3, r8
 8014bec:	46a0      	movge	r8, r4
 8014bee:	4630      	mov	r0, r6
 8014bf0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8014bf4:	bfa6      	itte	ge
 8014bf6:	461c      	movge	r4, r3
 8014bf8:	2500      	movge	r5, #0
 8014bfa:	2501      	movlt	r5, #1
 8014bfc:	f7ff fd3a 	bl	8014674 <_Balloc>
 8014c00:	b920      	cbnz	r0, 8014c0c <__mdiff+0x5c>
 8014c02:	4b2e      	ldr	r3, [pc, #184]	; (8014cbc <__mdiff+0x10c>)
 8014c04:	4602      	mov	r2, r0
 8014c06:	f44f 7110 	mov.w	r1, #576	; 0x240
 8014c0a:	e7e5      	b.n	8014bd8 <__mdiff+0x28>
 8014c0c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8014c10:	6926      	ldr	r6, [r4, #16]
 8014c12:	60c5      	str	r5, [r0, #12]
 8014c14:	f104 0914 	add.w	r9, r4, #20
 8014c18:	f108 0514 	add.w	r5, r8, #20
 8014c1c:	f100 0e14 	add.w	lr, r0, #20
 8014c20:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8014c24:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8014c28:	f108 0210 	add.w	r2, r8, #16
 8014c2c:	46f2      	mov	sl, lr
 8014c2e:	2100      	movs	r1, #0
 8014c30:	f859 3b04 	ldr.w	r3, [r9], #4
 8014c34:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8014c38:	fa1f f883 	uxth.w	r8, r3
 8014c3c:	fa11 f18b 	uxtah	r1, r1, fp
 8014c40:	0c1b      	lsrs	r3, r3, #16
 8014c42:	eba1 0808 	sub.w	r8, r1, r8
 8014c46:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8014c4a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8014c4e:	fa1f f888 	uxth.w	r8, r8
 8014c52:	1419      	asrs	r1, r3, #16
 8014c54:	454e      	cmp	r6, r9
 8014c56:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8014c5a:	f84a 3b04 	str.w	r3, [sl], #4
 8014c5e:	d8e7      	bhi.n	8014c30 <__mdiff+0x80>
 8014c60:	1b33      	subs	r3, r6, r4
 8014c62:	3b15      	subs	r3, #21
 8014c64:	f023 0303 	bic.w	r3, r3, #3
 8014c68:	3304      	adds	r3, #4
 8014c6a:	3415      	adds	r4, #21
 8014c6c:	42a6      	cmp	r6, r4
 8014c6e:	bf38      	it	cc
 8014c70:	2304      	movcc	r3, #4
 8014c72:	441d      	add	r5, r3
 8014c74:	4473      	add	r3, lr
 8014c76:	469e      	mov	lr, r3
 8014c78:	462e      	mov	r6, r5
 8014c7a:	4566      	cmp	r6, ip
 8014c7c:	d30e      	bcc.n	8014c9c <__mdiff+0xec>
 8014c7e:	f10c 0203 	add.w	r2, ip, #3
 8014c82:	1b52      	subs	r2, r2, r5
 8014c84:	f022 0203 	bic.w	r2, r2, #3
 8014c88:	3d03      	subs	r5, #3
 8014c8a:	45ac      	cmp	ip, r5
 8014c8c:	bf38      	it	cc
 8014c8e:	2200      	movcc	r2, #0
 8014c90:	441a      	add	r2, r3
 8014c92:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8014c96:	b17b      	cbz	r3, 8014cb8 <__mdiff+0x108>
 8014c98:	6107      	str	r7, [r0, #16]
 8014c9a:	e7a3      	b.n	8014be4 <__mdiff+0x34>
 8014c9c:	f856 8b04 	ldr.w	r8, [r6], #4
 8014ca0:	fa11 f288 	uxtah	r2, r1, r8
 8014ca4:	1414      	asrs	r4, r2, #16
 8014ca6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8014caa:	b292      	uxth	r2, r2
 8014cac:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8014cb0:	f84e 2b04 	str.w	r2, [lr], #4
 8014cb4:	1421      	asrs	r1, r4, #16
 8014cb6:	e7e0      	b.n	8014c7a <__mdiff+0xca>
 8014cb8:	3f01      	subs	r7, #1
 8014cba:	e7ea      	b.n	8014c92 <__mdiff+0xe2>
 8014cbc:	08017107 	.word	0x08017107
 8014cc0:	08017118 	.word	0x08017118

08014cc4 <__d2b>:
 8014cc4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014cc8:	4689      	mov	r9, r1
 8014cca:	2101      	movs	r1, #1
 8014ccc:	ec57 6b10 	vmov	r6, r7, d0
 8014cd0:	4690      	mov	r8, r2
 8014cd2:	f7ff fccf 	bl	8014674 <_Balloc>
 8014cd6:	4604      	mov	r4, r0
 8014cd8:	b930      	cbnz	r0, 8014ce8 <__d2b+0x24>
 8014cda:	4602      	mov	r2, r0
 8014cdc:	4b25      	ldr	r3, [pc, #148]	; (8014d74 <__d2b+0xb0>)
 8014cde:	4826      	ldr	r0, [pc, #152]	; (8014d78 <__d2b+0xb4>)
 8014ce0:	f240 310a 	movw	r1, #778	; 0x30a
 8014ce4:	f000 f860 	bl	8014da8 <__assert_func>
 8014ce8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8014cec:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8014cf0:	bb35      	cbnz	r5, 8014d40 <__d2b+0x7c>
 8014cf2:	2e00      	cmp	r6, #0
 8014cf4:	9301      	str	r3, [sp, #4]
 8014cf6:	d028      	beq.n	8014d4a <__d2b+0x86>
 8014cf8:	4668      	mov	r0, sp
 8014cfa:	9600      	str	r6, [sp, #0]
 8014cfc:	f7ff fd82 	bl	8014804 <__lo0bits>
 8014d00:	9900      	ldr	r1, [sp, #0]
 8014d02:	b300      	cbz	r0, 8014d46 <__d2b+0x82>
 8014d04:	9a01      	ldr	r2, [sp, #4]
 8014d06:	f1c0 0320 	rsb	r3, r0, #32
 8014d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8014d0e:	430b      	orrs	r3, r1
 8014d10:	40c2      	lsrs	r2, r0
 8014d12:	6163      	str	r3, [r4, #20]
 8014d14:	9201      	str	r2, [sp, #4]
 8014d16:	9b01      	ldr	r3, [sp, #4]
 8014d18:	61a3      	str	r3, [r4, #24]
 8014d1a:	2b00      	cmp	r3, #0
 8014d1c:	bf14      	ite	ne
 8014d1e:	2202      	movne	r2, #2
 8014d20:	2201      	moveq	r2, #1
 8014d22:	6122      	str	r2, [r4, #16]
 8014d24:	b1d5      	cbz	r5, 8014d5c <__d2b+0x98>
 8014d26:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8014d2a:	4405      	add	r5, r0
 8014d2c:	f8c9 5000 	str.w	r5, [r9]
 8014d30:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8014d34:	f8c8 0000 	str.w	r0, [r8]
 8014d38:	4620      	mov	r0, r4
 8014d3a:	b003      	add	sp, #12
 8014d3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014d40:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8014d44:	e7d5      	b.n	8014cf2 <__d2b+0x2e>
 8014d46:	6161      	str	r1, [r4, #20]
 8014d48:	e7e5      	b.n	8014d16 <__d2b+0x52>
 8014d4a:	a801      	add	r0, sp, #4
 8014d4c:	f7ff fd5a 	bl	8014804 <__lo0bits>
 8014d50:	9b01      	ldr	r3, [sp, #4]
 8014d52:	6163      	str	r3, [r4, #20]
 8014d54:	2201      	movs	r2, #1
 8014d56:	6122      	str	r2, [r4, #16]
 8014d58:	3020      	adds	r0, #32
 8014d5a:	e7e3      	b.n	8014d24 <__d2b+0x60>
 8014d5c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8014d60:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8014d64:	f8c9 0000 	str.w	r0, [r9]
 8014d68:	6918      	ldr	r0, [r3, #16]
 8014d6a:	f7ff fd2b 	bl	80147c4 <__hi0bits>
 8014d6e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8014d72:	e7df      	b.n	8014d34 <__d2b+0x70>
 8014d74:	08017107 	.word	0x08017107
 8014d78:	08017118 	.word	0x08017118

08014d7c <_calloc_r>:
 8014d7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014d7e:	fba1 2402 	umull	r2, r4, r1, r2
 8014d82:	b94c      	cbnz	r4, 8014d98 <_calloc_r+0x1c>
 8014d84:	4611      	mov	r1, r2
 8014d86:	9201      	str	r2, [sp, #4]
 8014d88:	f7fe f98c 	bl	80130a4 <_malloc_r>
 8014d8c:	9a01      	ldr	r2, [sp, #4]
 8014d8e:	4605      	mov	r5, r0
 8014d90:	b930      	cbnz	r0, 8014da0 <_calloc_r+0x24>
 8014d92:	4628      	mov	r0, r5
 8014d94:	b003      	add	sp, #12
 8014d96:	bd30      	pop	{r4, r5, pc}
 8014d98:	220c      	movs	r2, #12
 8014d9a:	6002      	str	r2, [r0, #0]
 8014d9c:	2500      	movs	r5, #0
 8014d9e:	e7f8      	b.n	8014d92 <_calloc_r+0x16>
 8014da0:	4621      	mov	r1, r4
 8014da2:	f7fe f90b 	bl	8012fbc <memset>
 8014da6:	e7f4      	b.n	8014d92 <_calloc_r+0x16>

08014da8 <__assert_func>:
 8014da8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014daa:	4614      	mov	r4, r2
 8014dac:	461a      	mov	r2, r3
 8014dae:	4b09      	ldr	r3, [pc, #36]	; (8014dd4 <__assert_func+0x2c>)
 8014db0:	681b      	ldr	r3, [r3, #0]
 8014db2:	4605      	mov	r5, r0
 8014db4:	68d8      	ldr	r0, [r3, #12]
 8014db6:	b14c      	cbz	r4, 8014dcc <__assert_func+0x24>
 8014db8:	4b07      	ldr	r3, [pc, #28]	; (8014dd8 <__assert_func+0x30>)
 8014dba:	9100      	str	r1, [sp, #0]
 8014dbc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014dc0:	4906      	ldr	r1, [pc, #24]	; (8014ddc <__assert_func+0x34>)
 8014dc2:	462b      	mov	r3, r5
 8014dc4:	f000 f80e 	bl	8014de4 <fiprintf>
 8014dc8:	f000 fa5a 	bl	8015280 <abort>
 8014dcc:	4b04      	ldr	r3, [pc, #16]	; (8014de0 <__assert_func+0x38>)
 8014dce:	461c      	mov	r4, r3
 8014dd0:	e7f3      	b.n	8014dba <__assert_func+0x12>
 8014dd2:	bf00      	nop
 8014dd4:	240006fc 	.word	0x240006fc
 8014dd8:	08017274 	.word	0x08017274
 8014ddc:	08017281 	.word	0x08017281
 8014de0:	080172af 	.word	0x080172af

08014de4 <fiprintf>:
 8014de4:	b40e      	push	{r1, r2, r3}
 8014de6:	b503      	push	{r0, r1, lr}
 8014de8:	4601      	mov	r1, r0
 8014dea:	ab03      	add	r3, sp, #12
 8014dec:	4805      	ldr	r0, [pc, #20]	; (8014e04 <fiprintf+0x20>)
 8014dee:	f853 2b04 	ldr.w	r2, [r3], #4
 8014df2:	6800      	ldr	r0, [r0, #0]
 8014df4:	9301      	str	r3, [sp, #4]
 8014df6:	f000 f845 	bl	8014e84 <_vfiprintf_r>
 8014dfa:	b002      	add	sp, #8
 8014dfc:	f85d eb04 	ldr.w	lr, [sp], #4
 8014e00:	b003      	add	sp, #12
 8014e02:	4770      	bx	lr
 8014e04:	240006fc 	.word	0x240006fc

08014e08 <__retarget_lock_init_recursive>:
 8014e08:	4770      	bx	lr

08014e0a <__retarget_lock_acquire_recursive>:
 8014e0a:	4770      	bx	lr

08014e0c <__retarget_lock_release_recursive>:
 8014e0c:	4770      	bx	lr

08014e0e <__ascii_mbtowc>:
 8014e0e:	b082      	sub	sp, #8
 8014e10:	b901      	cbnz	r1, 8014e14 <__ascii_mbtowc+0x6>
 8014e12:	a901      	add	r1, sp, #4
 8014e14:	b142      	cbz	r2, 8014e28 <__ascii_mbtowc+0x1a>
 8014e16:	b14b      	cbz	r3, 8014e2c <__ascii_mbtowc+0x1e>
 8014e18:	7813      	ldrb	r3, [r2, #0]
 8014e1a:	600b      	str	r3, [r1, #0]
 8014e1c:	7812      	ldrb	r2, [r2, #0]
 8014e1e:	1e10      	subs	r0, r2, #0
 8014e20:	bf18      	it	ne
 8014e22:	2001      	movne	r0, #1
 8014e24:	b002      	add	sp, #8
 8014e26:	4770      	bx	lr
 8014e28:	4610      	mov	r0, r2
 8014e2a:	e7fb      	b.n	8014e24 <__ascii_mbtowc+0x16>
 8014e2c:	f06f 0001 	mvn.w	r0, #1
 8014e30:	e7f8      	b.n	8014e24 <__ascii_mbtowc+0x16>

08014e32 <__sfputc_r>:
 8014e32:	6893      	ldr	r3, [r2, #8]
 8014e34:	3b01      	subs	r3, #1
 8014e36:	2b00      	cmp	r3, #0
 8014e38:	b410      	push	{r4}
 8014e3a:	6093      	str	r3, [r2, #8]
 8014e3c:	da08      	bge.n	8014e50 <__sfputc_r+0x1e>
 8014e3e:	6994      	ldr	r4, [r2, #24]
 8014e40:	42a3      	cmp	r3, r4
 8014e42:	db01      	blt.n	8014e48 <__sfputc_r+0x16>
 8014e44:	290a      	cmp	r1, #10
 8014e46:	d103      	bne.n	8014e50 <__sfputc_r+0x1e>
 8014e48:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014e4c:	f000 b94a 	b.w	80150e4 <__swbuf_r>
 8014e50:	6813      	ldr	r3, [r2, #0]
 8014e52:	1c58      	adds	r0, r3, #1
 8014e54:	6010      	str	r0, [r2, #0]
 8014e56:	7019      	strb	r1, [r3, #0]
 8014e58:	4608      	mov	r0, r1
 8014e5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014e5e:	4770      	bx	lr

08014e60 <__sfputs_r>:
 8014e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014e62:	4606      	mov	r6, r0
 8014e64:	460f      	mov	r7, r1
 8014e66:	4614      	mov	r4, r2
 8014e68:	18d5      	adds	r5, r2, r3
 8014e6a:	42ac      	cmp	r4, r5
 8014e6c:	d101      	bne.n	8014e72 <__sfputs_r+0x12>
 8014e6e:	2000      	movs	r0, #0
 8014e70:	e007      	b.n	8014e82 <__sfputs_r+0x22>
 8014e72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014e76:	463a      	mov	r2, r7
 8014e78:	4630      	mov	r0, r6
 8014e7a:	f7ff ffda 	bl	8014e32 <__sfputc_r>
 8014e7e:	1c43      	adds	r3, r0, #1
 8014e80:	d1f3      	bne.n	8014e6a <__sfputs_r+0xa>
 8014e82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08014e84 <_vfiprintf_r>:
 8014e84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e88:	460d      	mov	r5, r1
 8014e8a:	b09d      	sub	sp, #116	; 0x74
 8014e8c:	4614      	mov	r4, r2
 8014e8e:	4698      	mov	r8, r3
 8014e90:	4606      	mov	r6, r0
 8014e92:	b118      	cbz	r0, 8014e9c <_vfiprintf_r+0x18>
 8014e94:	6983      	ldr	r3, [r0, #24]
 8014e96:	b90b      	cbnz	r3, 8014e9c <_vfiprintf_r+0x18>
 8014e98:	f000 fb14 	bl	80154c4 <__sinit>
 8014e9c:	4b89      	ldr	r3, [pc, #548]	; (80150c4 <_vfiprintf_r+0x240>)
 8014e9e:	429d      	cmp	r5, r3
 8014ea0:	d11b      	bne.n	8014eda <_vfiprintf_r+0x56>
 8014ea2:	6875      	ldr	r5, [r6, #4]
 8014ea4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014ea6:	07d9      	lsls	r1, r3, #31
 8014ea8:	d405      	bmi.n	8014eb6 <_vfiprintf_r+0x32>
 8014eaa:	89ab      	ldrh	r3, [r5, #12]
 8014eac:	059a      	lsls	r2, r3, #22
 8014eae:	d402      	bmi.n	8014eb6 <_vfiprintf_r+0x32>
 8014eb0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014eb2:	f7ff ffaa 	bl	8014e0a <__retarget_lock_acquire_recursive>
 8014eb6:	89ab      	ldrh	r3, [r5, #12]
 8014eb8:	071b      	lsls	r3, r3, #28
 8014eba:	d501      	bpl.n	8014ec0 <_vfiprintf_r+0x3c>
 8014ebc:	692b      	ldr	r3, [r5, #16]
 8014ebe:	b9eb      	cbnz	r3, 8014efc <_vfiprintf_r+0x78>
 8014ec0:	4629      	mov	r1, r5
 8014ec2:	4630      	mov	r0, r6
 8014ec4:	f000 f96e 	bl	80151a4 <__swsetup_r>
 8014ec8:	b1c0      	cbz	r0, 8014efc <_vfiprintf_r+0x78>
 8014eca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014ecc:	07dc      	lsls	r4, r3, #31
 8014ece:	d50e      	bpl.n	8014eee <_vfiprintf_r+0x6a>
 8014ed0:	f04f 30ff 	mov.w	r0, #4294967295
 8014ed4:	b01d      	add	sp, #116	; 0x74
 8014ed6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014eda:	4b7b      	ldr	r3, [pc, #492]	; (80150c8 <_vfiprintf_r+0x244>)
 8014edc:	429d      	cmp	r5, r3
 8014ede:	d101      	bne.n	8014ee4 <_vfiprintf_r+0x60>
 8014ee0:	68b5      	ldr	r5, [r6, #8]
 8014ee2:	e7df      	b.n	8014ea4 <_vfiprintf_r+0x20>
 8014ee4:	4b79      	ldr	r3, [pc, #484]	; (80150cc <_vfiprintf_r+0x248>)
 8014ee6:	429d      	cmp	r5, r3
 8014ee8:	bf08      	it	eq
 8014eea:	68f5      	ldreq	r5, [r6, #12]
 8014eec:	e7da      	b.n	8014ea4 <_vfiprintf_r+0x20>
 8014eee:	89ab      	ldrh	r3, [r5, #12]
 8014ef0:	0598      	lsls	r0, r3, #22
 8014ef2:	d4ed      	bmi.n	8014ed0 <_vfiprintf_r+0x4c>
 8014ef4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014ef6:	f7ff ff89 	bl	8014e0c <__retarget_lock_release_recursive>
 8014efa:	e7e9      	b.n	8014ed0 <_vfiprintf_r+0x4c>
 8014efc:	2300      	movs	r3, #0
 8014efe:	9309      	str	r3, [sp, #36]	; 0x24
 8014f00:	2320      	movs	r3, #32
 8014f02:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014f06:	f8cd 800c 	str.w	r8, [sp, #12]
 8014f0a:	2330      	movs	r3, #48	; 0x30
 8014f0c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80150d0 <_vfiprintf_r+0x24c>
 8014f10:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014f14:	f04f 0901 	mov.w	r9, #1
 8014f18:	4623      	mov	r3, r4
 8014f1a:	469a      	mov	sl, r3
 8014f1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014f20:	b10a      	cbz	r2, 8014f26 <_vfiprintf_r+0xa2>
 8014f22:	2a25      	cmp	r2, #37	; 0x25
 8014f24:	d1f9      	bne.n	8014f1a <_vfiprintf_r+0x96>
 8014f26:	ebba 0b04 	subs.w	fp, sl, r4
 8014f2a:	d00b      	beq.n	8014f44 <_vfiprintf_r+0xc0>
 8014f2c:	465b      	mov	r3, fp
 8014f2e:	4622      	mov	r2, r4
 8014f30:	4629      	mov	r1, r5
 8014f32:	4630      	mov	r0, r6
 8014f34:	f7ff ff94 	bl	8014e60 <__sfputs_r>
 8014f38:	3001      	adds	r0, #1
 8014f3a:	f000 80aa 	beq.w	8015092 <_vfiprintf_r+0x20e>
 8014f3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014f40:	445a      	add	r2, fp
 8014f42:	9209      	str	r2, [sp, #36]	; 0x24
 8014f44:	f89a 3000 	ldrb.w	r3, [sl]
 8014f48:	2b00      	cmp	r3, #0
 8014f4a:	f000 80a2 	beq.w	8015092 <_vfiprintf_r+0x20e>
 8014f4e:	2300      	movs	r3, #0
 8014f50:	f04f 32ff 	mov.w	r2, #4294967295
 8014f54:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014f58:	f10a 0a01 	add.w	sl, sl, #1
 8014f5c:	9304      	str	r3, [sp, #16]
 8014f5e:	9307      	str	r3, [sp, #28]
 8014f60:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014f64:	931a      	str	r3, [sp, #104]	; 0x68
 8014f66:	4654      	mov	r4, sl
 8014f68:	2205      	movs	r2, #5
 8014f6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014f6e:	4858      	ldr	r0, [pc, #352]	; (80150d0 <_vfiprintf_r+0x24c>)
 8014f70:	f7eb f9be 	bl	80002f0 <memchr>
 8014f74:	9a04      	ldr	r2, [sp, #16]
 8014f76:	b9d8      	cbnz	r0, 8014fb0 <_vfiprintf_r+0x12c>
 8014f78:	06d1      	lsls	r1, r2, #27
 8014f7a:	bf44      	itt	mi
 8014f7c:	2320      	movmi	r3, #32
 8014f7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014f82:	0713      	lsls	r3, r2, #28
 8014f84:	bf44      	itt	mi
 8014f86:	232b      	movmi	r3, #43	; 0x2b
 8014f88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014f8c:	f89a 3000 	ldrb.w	r3, [sl]
 8014f90:	2b2a      	cmp	r3, #42	; 0x2a
 8014f92:	d015      	beq.n	8014fc0 <_vfiprintf_r+0x13c>
 8014f94:	9a07      	ldr	r2, [sp, #28]
 8014f96:	4654      	mov	r4, sl
 8014f98:	2000      	movs	r0, #0
 8014f9a:	f04f 0c0a 	mov.w	ip, #10
 8014f9e:	4621      	mov	r1, r4
 8014fa0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014fa4:	3b30      	subs	r3, #48	; 0x30
 8014fa6:	2b09      	cmp	r3, #9
 8014fa8:	d94e      	bls.n	8015048 <_vfiprintf_r+0x1c4>
 8014faa:	b1b0      	cbz	r0, 8014fda <_vfiprintf_r+0x156>
 8014fac:	9207      	str	r2, [sp, #28]
 8014fae:	e014      	b.n	8014fda <_vfiprintf_r+0x156>
 8014fb0:	eba0 0308 	sub.w	r3, r0, r8
 8014fb4:	fa09 f303 	lsl.w	r3, r9, r3
 8014fb8:	4313      	orrs	r3, r2
 8014fba:	9304      	str	r3, [sp, #16]
 8014fbc:	46a2      	mov	sl, r4
 8014fbe:	e7d2      	b.n	8014f66 <_vfiprintf_r+0xe2>
 8014fc0:	9b03      	ldr	r3, [sp, #12]
 8014fc2:	1d19      	adds	r1, r3, #4
 8014fc4:	681b      	ldr	r3, [r3, #0]
 8014fc6:	9103      	str	r1, [sp, #12]
 8014fc8:	2b00      	cmp	r3, #0
 8014fca:	bfbb      	ittet	lt
 8014fcc:	425b      	neglt	r3, r3
 8014fce:	f042 0202 	orrlt.w	r2, r2, #2
 8014fd2:	9307      	strge	r3, [sp, #28]
 8014fd4:	9307      	strlt	r3, [sp, #28]
 8014fd6:	bfb8      	it	lt
 8014fd8:	9204      	strlt	r2, [sp, #16]
 8014fda:	7823      	ldrb	r3, [r4, #0]
 8014fdc:	2b2e      	cmp	r3, #46	; 0x2e
 8014fde:	d10c      	bne.n	8014ffa <_vfiprintf_r+0x176>
 8014fe0:	7863      	ldrb	r3, [r4, #1]
 8014fe2:	2b2a      	cmp	r3, #42	; 0x2a
 8014fe4:	d135      	bne.n	8015052 <_vfiprintf_r+0x1ce>
 8014fe6:	9b03      	ldr	r3, [sp, #12]
 8014fe8:	1d1a      	adds	r2, r3, #4
 8014fea:	681b      	ldr	r3, [r3, #0]
 8014fec:	9203      	str	r2, [sp, #12]
 8014fee:	2b00      	cmp	r3, #0
 8014ff0:	bfb8      	it	lt
 8014ff2:	f04f 33ff 	movlt.w	r3, #4294967295
 8014ff6:	3402      	adds	r4, #2
 8014ff8:	9305      	str	r3, [sp, #20]
 8014ffa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80150e0 <_vfiprintf_r+0x25c>
 8014ffe:	7821      	ldrb	r1, [r4, #0]
 8015000:	2203      	movs	r2, #3
 8015002:	4650      	mov	r0, sl
 8015004:	f7eb f974 	bl	80002f0 <memchr>
 8015008:	b140      	cbz	r0, 801501c <_vfiprintf_r+0x198>
 801500a:	2340      	movs	r3, #64	; 0x40
 801500c:	eba0 000a 	sub.w	r0, r0, sl
 8015010:	fa03 f000 	lsl.w	r0, r3, r0
 8015014:	9b04      	ldr	r3, [sp, #16]
 8015016:	4303      	orrs	r3, r0
 8015018:	3401      	adds	r4, #1
 801501a:	9304      	str	r3, [sp, #16]
 801501c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015020:	482c      	ldr	r0, [pc, #176]	; (80150d4 <_vfiprintf_r+0x250>)
 8015022:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015026:	2206      	movs	r2, #6
 8015028:	f7eb f962 	bl	80002f0 <memchr>
 801502c:	2800      	cmp	r0, #0
 801502e:	d03f      	beq.n	80150b0 <_vfiprintf_r+0x22c>
 8015030:	4b29      	ldr	r3, [pc, #164]	; (80150d8 <_vfiprintf_r+0x254>)
 8015032:	bb1b      	cbnz	r3, 801507c <_vfiprintf_r+0x1f8>
 8015034:	9b03      	ldr	r3, [sp, #12]
 8015036:	3307      	adds	r3, #7
 8015038:	f023 0307 	bic.w	r3, r3, #7
 801503c:	3308      	adds	r3, #8
 801503e:	9303      	str	r3, [sp, #12]
 8015040:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015042:	443b      	add	r3, r7
 8015044:	9309      	str	r3, [sp, #36]	; 0x24
 8015046:	e767      	b.n	8014f18 <_vfiprintf_r+0x94>
 8015048:	fb0c 3202 	mla	r2, ip, r2, r3
 801504c:	460c      	mov	r4, r1
 801504e:	2001      	movs	r0, #1
 8015050:	e7a5      	b.n	8014f9e <_vfiprintf_r+0x11a>
 8015052:	2300      	movs	r3, #0
 8015054:	3401      	adds	r4, #1
 8015056:	9305      	str	r3, [sp, #20]
 8015058:	4619      	mov	r1, r3
 801505a:	f04f 0c0a 	mov.w	ip, #10
 801505e:	4620      	mov	r0, r4
 8015060:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015064:	3a30      	subs	r2, #48	; 0x30
 8015066:	2a09      	cmp	r2, #9
 8015068:	d903      	bls.n	8015072 <_vfiprintf_r+0x1ee>
 801506a:	2b00      	cmp	r3, #0
 801506c:	d0c5      	beq.n	8014ffa <_vfiprintf_r+0x176>
 801506e:	9105      	str	r1, [sp, #20]
 8015070:	e7c3      	b.n	8014ffa <_vfiprintf_r+0x176>
 8015072:	fb0c 2101 	mla	r1, ip, r1, r2
 8015076:	4604      	mov	r4, r0
 8015078:	2301      	movs	r3, #1
 801507a:	e7f0      	b.n	801505e <_vfiprintf_r+0x1da>
 801507c:	ab03      	add	r3, sp, #12
 801507e:	9300      	str	r3, [sp, #0]
 8015080:	462a      	mov	r2, r5
 8015082:	4b16      	ldr	r3, [pc, #88]	; (80150dc <_vfiprintf_r+0x258>)
 8015084:	a904      	add	r1, sp, #16
 8015086:	4630      	mov	r0, r6
 8015088:	f7fe f912 	bl	80132b0 <_printf_float>
 801508c:	4607      	mov	r7, r0
 801508e:	1c78      	adds	r0, r7, #1
 8015090:	d1d6      	bne.n	8015040 <_vfiprintf_r+0x1bc>
 8015092:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015094:	07d9      	lsls	r1, r3, #31
 8015096:	d405      	bmi.n	80150a4 <_vfiprintf_r+0x220>
 8015098:	89ab      	ldrh	r3, [r5, #12]
 801509a:	059a      	lsls	r2, r3, #22
 801509c:	d402      	bmi.n	80150a4 <_vfiprintf_r+0x220>
 801509e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80150a0:	f7ff feb4 	bl	8014e0c <__retarget_lock_release_recursive>
 80150a4:	89ab      	ldrh	r3, [r5, #12]
 80150a6:	065b      	lsls	r3, r3, #25
 80150a8:	f53f af12 	bmi.w	8014ed0 <_vfiprintf_r+0x4c>
 80150ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80150ae:	e711      	b.n	8014ed4 <_vfiprintf_r+0x50>
 80150b0:	ab03      	add	r3, sp, #12
 80150b2:	9300      	str	r3, [sp, #0]
 80150b4:	462a      	mov	r2, r5
 80150b6:	4b09      	ldr	r3, [pc, #36]	; (80150dc <_vfiprintf_r+0x258>)
 80150b8:	a904      	add	r1, sp, #16
 80150ba:	4630      	mov	r0, r6
 80150bc:	f7fe fb84 	bl	80137c8 <_printf_i>
 80150c0:	e7e4      	b.n	801508c <_vfiprintf_r+0x208>
 80150c2:	bf00      	nop
 80150c4:	080173ec 	.word	0x080173ec
 80150c8:	0801740c 	.word	0x0801740c
 80150cc:	080173cc 	.word	0x080173cc
 80150d0:	080172ba 	.word	0x080172ba
 80150d4:	080172c4 	.word	0x080172c4
 80150d8:	080132b1 	.word	0x080132b1
 80150dc:	08014e61 	.word	0x08014e61
 80150e0:	080172c0 	.word	0x080172c0

080150e4 <__swbuf_r>:
 80150e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80150e6:	460e      	mov	r6, r1
 80150e8:	4614      	mov	r4, r2
 80150ea:	4605      	mov	r5, r0
 80150ec:	b118      	cbz	r0, 80150f6 <__swbuf_r+0x12>
 80150ee:	6983      	ldr	r3, [r0, #24]
 80150f0:	b90b      	cbnz	r3, 80150f6 <__swbuf_r+0x12>
 80150f2:	f000 f9e7 	bl	80154c4 <__sinit>
 80150f6:	4b21      	ldr	r3, [pc, #132]	; (801517c <__swbuf_r+0x98>)
 80150f8:	429c      	cmp	r4, r3
 80150fa:	d12b      	bne.n	8015154 <__swbuf_r+0x70>
 80150fc:	686c      	ldr	r4, [r5, #4]
 80150fe:	69a3      	ldr	r3, [r4, #24]
 8015100:	60a3      	str	r3, [r4, #8]
 8015102:	89a3      	ldrh	r3, [r4, #12]
 8015104:	071a      	lsls	r2, r3, #28
 8015106:	d52f      	bpl.n	8015168 <__swbuf_r+0x84>
 8015108:	6923      	ldr	r3, [r4, #16]
 801510a:	b36b      	cbz	r3, 8015168 <__swbuf_r+0x84>
 801510c:	6923      	ldr	r3, [r4, #16]
 801510e:	6820      	ldr	r0, [r4, #0]
 8015110:	1ac0      	subs	r0, r0, r3
 8015112:	6963      	ldr	r3, [r4, #20]
 8015114:	b2f6      	uxtb	r6, r6
 8015116:	4283      	cmp	r3, r0
 8015118:	4637      	mov	r7, r6
 801511a:	dc04      	bgt.n	8015126 <__swbuf_r+0x42>
 801511c:	4621      	mov	r1, r4
 801511e:	4628      	mov	r0, r5
 8015120:	f000 f93c 	bl	801539c <_fflush_r>
 8015124:	bb30      	cbnz	r0, 8015174 <__swbuf_r+0x90>
 8015126:	68a3      	ldr	r3, [r4, #8]
 8015128:	3b01      	subs	r3, #1
 801512a:	60a3      	str	r3, [r4, #8]
 801512c:	6823      	ldr	r3, [r4, #0]
 801512e:	1c5a      	adds	r2, r3, #1
 8015130:	6022      	str	r2, [r4, #0]
 8015132:	701e      	strb	r6, [r3, #0]
 8015134:	6963      	ldr	r3, [r4, #20]
 8015136:	3001      	adds	r0, #1
 8015138:	4283      	cmp	r3, r0
 801513a:	d004      	beq.n	8015146 <__swbuf_r+0x62>
 801513c:	89a3      	ldrh	r3, [r4, #12]
 801513e:	07db      	lsls	r3, r3, #31
 8015140:	d506      	bpl.n	8015150 <__swbuf_r+0x6c>
 8015142:	2e0a      	cmp	r6, #10
 8015144:	d104      	bne.n	8015150 <__swbuf_r+0x6c>
 8015146:	4621      	mov	r1, r4
 8015148:	4628      	mov	r0, r5
 801514a:	f000 f927 	bl	801539c <_fflush_r>
 801514e:	b988      	cbnz	r0, 8015174 <__swbuf_r+0x90>
 8015150:	4638      	mov	r0, r7
 8015152:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015154:	4b0a      	ldr	r3, [pc, #40]	; (8015180 <__swbuf_r+0x9c>)
 8015156:	429c      	cmp	r4, r3
 8015158:	d101      	bne.n	801515e <__swbuf_r+0x7a>
 801515a:	68ac      	ldr	r4, [r5, #8]
 801515c:	e7cf      	b.n	80150fe <__swbuf_r+0x1a>
 801515e:	4b09      	ldr	r3, [pc, #36]	; (8015184 <__swbuf_r+0xa0>)
 8015160:	429c      	cmp	r4, r3
 8015162:	bf08      	it	eq
 8015164:	68ec      	ldreq	r4, [r5, #12]
 8015166:	e7ca      	b.n	80150fe <__swbuf_r+0x1a>
 8015168:	4621      	mov	r1, r4
 801516a:	4628      	mov	r0, r5
 801516c:	f000 f81a 	bl	80151a4 <__swsetup_r>
 8015170:	2800      	cmp	r0, #0
 8015172:	d0cb      	beq.n	801510c <__swbuf_r+0x28>
 8015174:	f04f 37ff 	mov.w	r7, #4294967295
 8015178:	e7ea      	b.n	8015150 <__swbuf_r+0x6c>
 801517a:	bf00      	nop
 801517c:	080173ec 	.word	0x080173ec
 8015180:	0801740c 	.word	0x0801740c
 8015184:	080173cc 	.word	0x080173cc

08015188 <__ascii_wctomb>:
 8015188:	b149      	cbz	r1, 801519e <__ascii_wctomb+0x16>
 801518a:	2aff      	cmp	r2, #255	; 0xff
 801518c:	bf85      	ittet	hi
 801518e:	238a      	movhi	r3, #138	; 0x8a
 8015190:	6003      	strhi	r3, [r0, #0]
 8015192:	700a      	strbls	r2, [r1, #0]
 8015194:	f04f 30ff 	movhi.w	r0, #4294967295
 8015198:	bf98      	it	ls
 801519a:	2001      	movls	r0, #1
 801519c:	4770      	bx	lr
 801519e:	4608      	mov	r0, r1
 80151a0:	4770      	bx	lr
	...

080151a4 <__swsetup_r>:
 80151a4:	4b32      	ldr	r3, [pc, #200]	; (8015270 <__swsetup_r+0xcc>)
 80151a6:	b570      	push	{r4, r5, r6, lr}
 80151a8:	681d      	ldr	r5, [r3, #0]
 80151aa:	4606      	mov	r6, r0
 80151ac:	460c      	mov	r4, r1
 80151ae:	b125      	cbz	r5, 80151ba <__swsetup_r+0x16>
 80151b0:	69ab      	ldr	r3, [r5, #24]
 80151b2:	b913      	cbnz	r3, 80151ba <__swsetup_r+0x16>
 80151b4:	4628      	mov	r0, r5
 80151b6:	f000 f985 	bl	80154c4 <__sinit>
 80151ba:	4b2e      	ldr	r3, [pc, #184]	; (8015274 <__swsetup_r+0xd0>)
 80151bc:	429c      	cmp	r4, r3
 80151be:	d10f      	bne.n	80151e0 <__swsetup_r+0x3c>
 80151c0:	686c      	ldr	r4, [r5, #4]
 80151c2:	89a3      	ldrh	r3, [r4, #12]
 80151c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80151c8:	0719      	lsls	r1, r3, #28
 80151ca:	d42c      	bmi.n	8015226 <__swsetup_r+0x82>
 80151cc:	06dd      	lsls	r5, r3, #27
 80151ce:	d411      	bmi.n	80151f4 <__swsetup_r+0x50>
 80151d0:	2309      	movs	r3, #9
 80151d2:	6033      	str	r3, [r6, #0]
 80151d4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80151d8:	81a3      	strh	r3, [r4, #12]
 80151da:	f04f 30ff 	mov.w	r0, #4294967295
 80151de:	e03e      	b.n	801525e <__swsetup_r+0xba>
 80151e0:	4b25      	ldr	r3, [pc, #148]	; (8015278 <__swsetup_r+0xd4>)
 80151e2:	429c      	cmp	r4, r3
 80151e4:	d101      	bne.n	80151ea <__swsetup_r+0x46>
 80151e6:	68ac      	ldr	r4, [r5, #8]
 80151e8:	e7eb      	b.n	80151c2 <__swsetup_r+0x1e>
 80151ea:	4b24      	ldr	r3, [pc, #144]	; (801527c <__swsetup_r+0xd8>)
 80151ec:	429c      	cmp	r4, r3
 80151ee:	bf08      	it	eq
 80151f0:	68ec      	ldreq	r4, [r5, #12]
 80151f2:	e7e6      	b.n	80151c2 <__swsetup_r+0x1e>
 80151f4:	0758      	lsls	r0, r3, #29
 80151f6:	d512      	bpl.n	801521e <__swsetup_r+0x7a>
 80151f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80151fa:	b141      	cbz	r1, 801520e <__swsetup_r+0x6a>
 80151fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015200:	4299      	cmp	r1, r3
 8015202:	d002      	beq.n	801520a <__swsetup_r+0x66>
 8015204:	4630      	mov	r0, r6
 8015206:	f7fd fee1 	bl	8012fcc <_free_r>
 801520a:	2300      	movs	r3, #0
 801520c:	6363      	str	r3, [r4, #52]	; 0x34
 801520e:	89a3      	ldrh	r3, [r4, #12]
 8015210:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8015214:	81a3      	strh	r3, [r4, #12]
 8015216:	2300      	movs	r3, #0
 8015218:	6063      	str	r3, [r4, #4]
 801521a:	6923      	ldr	r3, [r4, #16]
 801521c:	6023      	str	r3, [r4, #0]
 801521e:	89a3      	ldrh	r3, [r4, #12]
 8015220:	f043 0308 	orr.w	r3, r3, #8
 8015224:	81a3      	strh	r3, [r4, #12]
 8015226:	6923      	ldr	r3, [r4, #16]
 8015228:	b94b      	cbnz	r3, 801523e <__swsetup_r+0x9a>
 801522a:	89a3      	ldrh	r3, [r4, #12]
 801522c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8015230:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015234:	d003      	beq.n	801523e <__swsetup_r+0x9a>
 8015236:	4621      	mov	r1, r4
 8015238:	4630      	mov	r0, r6
 801523a:	f000 fa05 	bl	8015648 <__smakebuf_r>
 801523e:	89a0      	ldrh	r0, [r4, #12]
 8015240:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015244:	f010 0301 	ands.w	r3, r0, #1
 8015248:	d00a      	beq.n	8015260 <__swsetup_r+0xbc>
 801524a:	2300      	movs	r3, #0
 801524c:	60a3      	str	r3, [r4, #8]
 801524e:	6963      	ldr	r3, [r4, #20]
 8015250:	425b      	negs	r3, r3
 8015252:	61a3      	str	r3, [r4, #24]
 8015254:	6923      	ldr	r3, [r4, #16]
 8015256:	b943      	cbnz	r3, 801526a <__swsetup_r+0xc6>
 8015258:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801525c:	d1ba      	bne.n	80151d4 <__swsetup_r+0x30>
 801525e:	bd70      	pop	{r4, r5, r6, pc}
 8015260:	0781      	lsls	r1, r0, #30
 8015262:	bf58      	it	pl
 8015264:	6963      	ldrpl	r3, [r4, #20]
 8015266:	60a3      	str	r3, [r4, #8]
 8015268:	e7f4      	b.n	8015254 <__swsetup_r+0xb0>
 801526a:	2000      	movs	r0, #0
 801526c:	e7f7      	b.n	801525e <__swsetup_r+0xba>
 801526e:	bf00      	nop
 8015270:	240006fc 	.word	0x240006fc
 8015274:	080173ec 	.word	0x080173ec
 8015278:	0801740c 	.word	0x0801740c
 801527c:	080173cc 	.word	0x080173cc

08015280 <abort>:
 8015280:	b508      	push	{r3, lr}
 8015282:	2006      	movs	r0, #6
 8015284:	f000 fa48 	bl	8015718 <raise>
 8015288:	2001      	movs	r0, #1
 801528a:	f000 feed 	bl	8016068 <_exit>
	...

08015290 <__sflush_r>:
 8015290:	898a      	ldrh	r2, [r1, #12]
 8015292:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015296:	4605      	mov	r5, r0
 8015298:	0710      	lsls	r0, r2, #28
 801529a:	460c      	mov	r4, r1
 801529c:	d458      	bmi.n	8015350 <__sflush_r+0xc0>
 801529e:	684b      	ldr	r3, [r1, #4]
 80152a0:	2b00      	cmp	r3, #0
 80152a2:	dc05      	bgt.n	80152b0 <__sflush_r+0x20>
 80152a4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80152a6:	2b00      	cmp	r3, #0
 80152a8:	dc02      	bgt.n	80152b0 <__sflush_r+0x20>
 80152aa:	2000      	movs	r0, #0
 80152ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80152b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80152b2:	2e00      	cmp	r6, #0
 80152b4:	d0f9      	beq.n	80152aa <__sflush_r+0x1a>
 80152b6:	2300      	movs	r3, #0
 80152b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80152bc:	682f      	ldr	r7, [r5, #0]
 80152be:	602b      	str	r3, [r5, #0]
 80152c0:	d032      	beq.n	8015328 <__sflush_r+0x98>
 80152c2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80152c4:	89a3      	ldrh	r3, [r4, #12]
 80152c6:	075a      	lsls	r2, r3, #29
 80152c8:	d505      	bpl.n	80152d6 <__sflush_r+0x46>
 80152ca:	6863      	ldr	r3, [r4, #4]
 80152cc:	1ac0      	subs	r0, r0, r3
 80152ce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80152d0:	b10b      	cbz	r3, 80152d6 <__sflush_r+0x46>
 80152d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80152d4:	1ac0      	subs	r0, r0, r3
 80152d6:	2300      	movs	r3, #0
 80152d8:	4602      	mov	r2, r0
 80152da:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80152dc:	6a21      	ldr	r1, [r4, #32]
 80152de:	4628      	mov	r0, r5
 80152e0:	47b0      	blx	r6
 80152e2:	1c43      	adds	r3, r0, #1
 80152e4:	89a3      	ldrh	r3, [r4, #12]
 80152e6:	d106      	bne.n	80152f6 <__sflush_r+0x66>
 80152e8:	6829      	ldr	r1, [r5, #0]
 80152ea:	291d      	cmp	r1, #29
 80152ec:	d82c      	bhi.n	8015348 <__sflush_r+0xb8>
 80152ee:	4a2a      	ldr	r2, [pc, #168]	; (8015398 <__sflush_r+0x108>)
 80152f0:	40ca      	lsrs	r2, r1
 80152f2:	07d6      	lsls	r6, r2, #31
 80152f4:	d528      	bpl.n	8015348 <__sflush_r+0xb8>
 80152f6:	2200      	movs	r2, #0
 80152f8:	6062      	str	r2, [r4, #4]
 80152fa:	04d9      	lsls	r1, r3, #19
 80152fc:	6922      	ldr	r2, [r4, #16]
 80152fe:	6022      	str	r2, [r4, #0]
 8015300:	d504      	bpl.n	801530c <__sflush_r+0x7c>
 8015302:	1c42      	adds	r2, r0, #1
 8015304:	d101      	bne.n	801530a <__sflush_r+0x7a>
 8015306:	682b      	ldr	r3, [r5, #0]
 8015308:	b903      	cbnz	r3, 801530c <__sflush_r+0x7c>
 801530a:	6560      	str	r0, [r4, #84]	; 0x54
 801530c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801530e:	602f      	str	r7, [r5, #0]
 8015310:	2900      	cmp	r1, #0
 8015312:	d0ca      	beq.n	80152aa <__sflush_r+0x1a>
 8015314:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015318:	4299      	cmp	r1, r3
 801531a:	d002      	beq.n	8015322 <__sflush_r+0x92>
 801531c:	4628      	mov	r0, r5
 801531e:	f7fd fe55 	bl	8012fcc <_free_r>
 8015322:	2000      	movs	r0, #0
 8015324:	6360      	str	r0, [r4, #52]	; 0x34
 8015326:	e7c1      	b.n	80152ac <__sflush_r+0x1c>
 8015328:	6a21      	ldr	r1, [r4, #32]
 801532a:	2301      	movs	r3, #1
 801532c:	4628      	mov	r0, r5
 801532e:	47b0      	blx	r6
 8015330:	1c41      	adds	r1, r0, #1
 8015332:	d1c7      	bne.n	80152c4 <__sflush_r+0x34>
 8015334:	682b      	ldr	r3, [r5, #0]
 8015336:	2b00      	cmp	r3, #0
 8015338:	d0c4      	beq.n	80152c4 <__sflush_r+0x34>
 801533a:	2b1d      	cmp	r3, #29
 801533c:	d001      	beq.n	8015342 <__sflush_r+0xb2>
 801533e:	2b16      	cmp	r3, #22
 8015340:	d101      	bne.n	8015346 <__sflush_r+0xb6>
 8015342:	602f      	str	r7, [r5, #0]
 8015344:	e7b1      	b.n	80152aa <__sflush_r+0x1a>
 8015346:	89a3      	ldrh	r3, [r4, #12]
 8015348:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801534c:	81a3      	strh	r3, [r4, #12]
 801534e:	e7ad      	b.n	80152ac <__sflush_r+0x1c>
 8015350:	690f      	ldr	r7, [r1, #16]
 8015352:	2f00      	cmp	r7, #0
 8015354:	d0a9      	beq.n	80152aa <__sflush_r+0x1a>
 8015356:	0793      	lsls	r3, r2, #30
 8015358:	680e      	ldr	r6, [r1, #0]
 801535a:	bf08      	it	eq
 801535c:	694b      	ldreq	r3, [r1, #20]
 801535e:	600f      	str	r7, [r1, #0]
 8015360:	bf18      	it	ne
 8015362:	2300      	movne	r3, #0
 8015364:	eba6 0807 	sub.w	r8, r6, r7
 8015368:	608b      	str	r3, [r1, #8]
 801536a:	f1b8 0f00 	cmp.w	r8, #0
 801536e:	dd9c      	ble.n	80152aa <__sflush_r+0x1a>
 8015370:	6a21      	ldr	r1, [r4, #32]
 8015372:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8015374:	4643      	mov	r3, r8
 8015376:	463a      	mov	r2, r7
 8015378:	4628      	mov	r0, r5
 801537a:	47b0      	blx	r6
 801537c:	2800      	cmp	r0, #0
 801537e:	dc06      	bgt.n	801538e <__sflush_r+0xfe>
 8015380:	89a3      	ldrh	r3, [r4, #12]
 8015382:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015386:	81a3      	strh	r3, [r4, #12]
 8015388:	f04f 30ff 	mov.w	r0, #4294967295
 801538c:	e78e      	b.n	80152ac <__sflush_r+0x1c>
 801538e:	4407      	add	r7, r0
 8015390:	eba8 0800 	sub.w	r8, r8, r0
 8015394:	e7e9      	b.n	801536a <__sflush_r+0xda>
 8015396:	bf00      	nop
 8015398:	20400001 	.word	0x20400001

0801539c <_fflush_r>:
 801539c:	b538      	push	{r3, r4, r5, lr}
 801539e:	690b      	ldr	r3, [r1, #16]
 80153a0:	4605      	mov	r5, r0
 80153a2:	460c      	mov	r4, r1
 80153a4:	b913      	cbnz	r3, 80153ac <_fflush_r+0x10>
 80153a6:	2500      	movs	r5, #0
 80153a8:	4628      	mov	r0, r5
 80153aa:	bd38      	pop	{r3, r4, r5, pc}
 80153ac:	b118      	cbz	r0, 80153b6 <_fflush_r+0x1a>
 80153ae:	6983      	ldr	r3, [r0, #24]
 80153b0:	b90b      	cbnz	r3, 80153b6 <_fflush_r+0x1a>
 80153b2:	f000 f887 	bl	80154c4 <__sinit>
 80153b6:	4b14      	ldr	r3, [pc, #80]	; (8015408 <_fflush_r+0x6c>)
 80153b8:	429c      	cmp	r4, r3
 80153ba:	d11b      	bne.n	80153f4 <_fflush_r+0x58>
 80153bc:	686c      	ldr	r4, [r5, #4]
 80153be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80153c2:	2b00      	cmp	r3, #0
 80153c4:	d0ef      	beq.n	80153a6 <_fflush_r+0xa>
 80153c6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80153c8:	07d0      	lsls	r0, r2, #31
 80153ca:	d404      	bmi.n	80153d6 <_fflush_r+0x3a>
 80153cc:	0599      	lsls	r1, r3, #22
 80153ce:	d402      	bmi.n	80153d6 <_fflush_r+0x3a>
 80153d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80153d2:	f7ff fd1a 	bl	8014e0a <__retarget_lock_acquire_recursive>
 80153d6:	4628      	mov	r0, r5
 80153d8:	4621      	mov	r1, r4
 80153da:	f7ff ff59 	bl	8015290 <__sflush_r>
 80153de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80153e0:	07da      	lsls	r2, r3, #31
 80153e2:	4605      	mov	r5, r0
 80153e4:	d4e0      	bmi.n	80153a8 <_fflush_r+0xc>
 80153e6:	89a3      	ldrh	r3, [r4, #12]
 80153e8:	059b      	lsls	r3, r3, #22
 80153ea:	d4dd      	bmi.n	80153a8 <_fflush_r+0xc>
 80153ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80153ee:	f7ff fd0d 	bl	8014e0c <__retarget_lock_release_recursive>
 80153f2:	e7d9      	b.n	80153a8 <_fflush_r+0xc>
 80153f4:	4b05      	ldr	r3, [pc, #20]	; (801540c <_fflush_r+0x70>)
 80153f6:	429c      	cmp	r4, r3
 80153f8:	d101      	bne.n	80153fe <_fflush_r+0x62>
 80153fa:	68ac      	ldr	r4, [r5, #8]
 80153fc:	e7df      	b.n	80153be <_fflush_r+0x22>
 80153fe:	4b04      	ldr	r3, [pc, #16]	; (8015410 <_fflush_r+0x74>)
 8015400:	429c      	cmp	r4, r3
 8015402:	bf08      	it	eq
 8015404:	68ec      	ldreq	r4, [r5, #12]
 8015406:	e7da      	b.n	80153be <_fflush_r+0x22>
 8015408:	080173ec 	.word	0x080173ec
 801540c:	0801740c 	.word	0x0801740c
 8015410:	080173cc 	.word	0x080173cc

08015414 <std>:
 8015414:	2300      	movs	r3, #0
 8015416:	b510      	push	{r4, lr}
 8015418:	4604      	mov	r4, r0
 801541a:	e9c0 3300 	strd	r3, r3, [r0]
 801541e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8015422:	6083      	str	r3, [r0, #8]
 8015424:	8181      	strh	r1, [r0, #12]
 8015426:	6643      	str	r3, [r0, #100]	; 0x64
 8015428:	81c2      	strh	r2, [r0, #14]
 801542a:	6183      	str	r3, [r0, #24]
 801542c:	4619      	mov	r1, r3
 801542e:	2208      	movs	r2, #8
 8015430:	305c      	adds	r0, #92	; 0x5c
 8015432:	f7fd fdc3 	bl	8012fbc <memset>
 8015436:	4b05      	ldr	r3, [pc, #20]	; (801544c <std+0x38>)
 8015438:	6263      	str	r3, [r4, #36]	; 0x24
 801543a:	4b05      	ldr	r3, [pc, #20]	; (8015450 <std+0x3c>)
 801543c:	62a3      	str	r3, [r4, #40]	; 0x28
 801543e:	4b05      	ldr	r3, [pc, #20]	; (8015454 <std+0x40>)
 8015440:	62e3      	str	r3, [r4, #44]	; 0x2c
 8015442:	4b05      	ldr	r3, [pc, #20]	; (8015458 <std+0x44>)
 8015444:	6224      	str	r4, [r4, #32]
 8015446:	6323      	str	r3, [r4, #48]	; 0x30
 8015448:	bd10      	pop	{r4, pc}
 801544a:	bf00      	nop
 801544c:	08015751 	.word	0x08015751
 8015450:	08015773 	.word	0x08015773
 8015454:	080157ab 	.word	0x080157ab
 8015458:	080157cf 	.word	0x080157cf

0801545c <_cleanup_r>:
 801545c:	4901      	ldr	r1, [pc, #4]	; (8015464 <_cleanup_r+0x8>)
 801545e:	f000 b8af 	b.w	80155c0 <_fwalk_reent>
 8015462:	bf00      	nop
 8015464:	0801539d 	.word	0x0801539d

08015468 <__sfmoreglue>:
 8015468:	b570      	push	{r4, r5, r6, lr}
 801546a:	2268      	movs	r2, #104	; 0x68
 801546c:	1e4d      	subs	r5, r1, #1
 801546e:	4355      	muls	r5, r2
 8015470:	460e      	mov	r6, r1
 8015472:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8015476:	f7fd fe15 	bl	80130a4 <_malloc_r>
 801547a:	4604      	mov	r4, r0
 801547c:	b140      	cbz	r0, 8015490 <__sfmoreglue+0x28>
 801547e:	2100      	movs	r1, #0
 8015480:	e9c0 1600 	strd	r1, r6, [r0]
 8015484:	300c      	adds	r0, #12
 8015486:	60a0      	str	r0, [r4, #8]
 8015488:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801548c:	f7fd fd96 	bl	8012fbc <memset>
 8015490:	4620      	mov	r0, r4
 8015492:	bd70      	pop	{r4, r5, r6, pc}

08015494 <__sfp_lock_acquire>:
 8015494:	4801      	ldr	r0, [pc, #4]	; (801549c <__sfp_lock_acquire+0x8>)
 8015496:	f7ff bcb8 	b.w	8014e0a <__retarget_lock_acquire_recursive>
 801549a:	bf00      	nop
 801549c:	24002899 	.word	0x24002899

080154a0 <__sfp_lock_release>:
 80154a0:	4801      	ldr	r0, [pc, #4]	; (80154a8 <__sfp_lock_release+0x8>)
 80154a2:	f7ff bcb3 	b.w	8014e0c <__retarget_lock_release_recursive>
 80154a6:	bf00      	nop
 80154a8:	24002899 	.word	0x24002899

080154ac <__sinit_lock_acquire>:
 80154ac:	4801      	ldr	r0, [pc, #4]	; (80154b4 <__sinit_lock_acquire+0x8>)
 80154ae:	f7ff bcac 	b.w	8014e0a <__retarget_lock_acquire_recursive>
 80154b2:	bf00      	nop
 80154b4:	2400289a 	.word	0x2400289a

080154b8 <__sinit_lock_release>:
 80154b8:	4801      	ldr	r0, [pc, #4]	; (80154c0 <__sinit_lock_release+0x8>)
 80154ba:	f7ff bca7 	b.w	8014e0c <__retarget_lock_release_recursive>
 80154be:	bf00      	nop
 80154c0:	2400289a 	.word	0x2400289a

080154c4 <__sinit>:
 80154c4:	b510      	push	{r4, lr}
 80154c6:	4604      	mov	r4, r0
 80154c8:	f7ff fff0 	bl	80154ac <__sinit_lock_acquire>
 80154cc:	69a3      	ldr	r3, [r4, #24]
 80154ce:	b11b      	cbz	r3, 80154d8 <__sinit+0x14>
 80154d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80154d4:	f7ff bff0 	b.w	80154b8 <__sinit_lock_release>
 80154d8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80154dc:	6523      	str	r3, [r4, #80]	; 0x50
 80154de:	4b13      	ldr	r3, [pc, #76]	; (801552c <__sinit+0x68>)
 80154e0:	4a13      	ldr	r2, [pc, #76]	; (8015530 <__sinit+0x6c>)
 80154e2:	681b      	ldr	r3, [r3, #0]
 80154e4:	62a2      	str	r2, [r4, #40]	; 0x28
 80154e6:	42a3      	cmp	r3, r4
 80154e8:	bf04      	itt	eq
 80154ea:	2301      	moveq	r3, #1
 80154ec:	61a3      	streq	r3, [r4, #24]
 80154ee:	4620      	mov	r0, r4
 80154f0:	f000 f820 	bl	8015534 <__sfp>
 80154f4:	6060      	str	r0, [r4, #4]
 80154f6:	4620      	mov	r0, r4
 80154f8:	f000 f81c 	bl	8015534 <__sfp>
 80154fc:	60a0      	str	r0, [r4, #8]
 80154fe:	4620      	mov	r0, r4
 8015500:	f000 f818 	bl	8015534 <__sfp>
 8015504:	2200      	movs	r2, #0
 8015506:	60e0      	str	r0, [r4, #12]
 8015508:	2104      	movs	r1, #4
 801550a:	6860      	ldr	r0, [r4, #4]
 801550c:	f7ff ff82 	bl	8015414 <std>
 8015510:	68a0      	ldr	r0, [r4, #8]
 8015512:	2201      	movs	r2, #1
 8015514:	2109      	movs	r1, #9
 8015516:	f7ff ff7d 	bl	8015414 <std>
 801551a:	68e0      	ldr	r0, [r4, #12]
 801551c:	2202      	movs	r2, #2
 801551e:	2112      	movs	r1, #18
 8015520:	f7ff ff78 	bl	8015414 <std>
 8015524:	2301      	movs	r3, #1
 8015526:	61a3      	str	r3, [r4, #24]
 8015528:	e7d2      	b.n	80154d0 <__sinit+0xc>
 801552a:	bf00      	nop
 801552c:	08017050 	.word	0x08017050
 8015530:	0801545d 	.word	0x0801545d

08015534 <__sfp>:
 8015534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015536:	4607      	mov	r7, r0
 8015538:	f7ff ffac 	bl	8015494 <__sfp_lock_acquire>
 801553c:	4b1e      	ldr	r3, [pc, #120]	; (80155b8 <__sfp+0x84>)
 801553e:	681e      	ldr	r6, [r3, #0]
 8015540:	69b3      	ldr	r3, [r6, #24]
 8015542:	b913      	cbnz	r3, 801554a <__sfp+0x16>
 8015544:	4630      	mov	r0, r6
 8015546:	f7ff ffbd 	bl	80154c4 <__sinit>
 801554a:	3648      	adds	r6, #72	; 0x48
 801554c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8015550:	3b01      	subs	r3, #1
 8015552:	d503      	bpl.n	801555c <__sfp+0x28>
 8015554:	6833      	ldr	r3, [r6, #0]
 8015556:	b30b      	cbz	r3, 801559c <__sfp+0x68>
 8015558:	6836      	ldr	r6, [r6, #0]
 801555a:	e7f7      	b.n	801554c <__sfp+0x18>
 801555c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8015560:	b9d5      	cbnz	r5, 8015598 <__sfp+0x64>
 8015562:	4b16      	ldr	r3, [pc, #88]	; (80155bc <__sfp+0x88>)
 8015564:	60e3      	str	r3, [r4, #12]
 8015566:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801556a:	6665      	str	r5, [r4, #100]	; 0x64
 801556c:	f7ff fc4c 	bl	8014e08 <__retarget_lock_init_recursive>
 8015570:	f7ff ff96 	bl	80154a0 <__sfp_lock_release>
 8015574:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8015578:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801557c:	6025      	str	r5, [r4, #0]
 801557e:	61a5      	str	r5, [r4, #24]
 8015580:	2208      	movs	r2, #8
 8015582:	4629      	mov	r1, r5
 8015584:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8015588:	f7fd fd18 	bl	8012fbc <memset>
 801558c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8015590:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8015594:	4620      	mov	r0, r4
 8015596:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015598:	3468      	adds	r4, #104	; 0x68
 801559a:	e7d9      	b.n	8015550 <__sfp+0x1c>
 801559c:	2104      	movs	r1, #4
 801559e:	4638      	mov	r0, r7
 80155a0:	f7ff ff62 	bl	8015468 <__sfmoreglue>
 80155a4:	4604      	mov	r4, r0
 80155a6:	6030      	str	r0, [r6, #0]
 80155a8:	2800      	cmp	r0, #0
 80155aa:	d1d5      	bne.n	8015558 <__sfp+0x24>
 80155ac:	f7ff ff78 	bl	80154a0 <__sfp_lock_release>
 80155b0:	230c      	movs	r3, #12
 80155b2:	603b      	str	r3, [r7, #0]
 80155b4:	e7ee      	b.n	8015594 <__sfp+0x60>
 80155b6:	bf00      	nop
 80155b8:	08017050 	.word	0x08017050
 80155bc:	ffff0001 	.word	0xffff0001

080155c0 <_fwalk_reent>:
 80155c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80155c4:	4606      	mov	r6, r0
 80155c6:	4688      	mov	r8, r1
 80155c8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80155cc:	2700      	movs	r7, #0
 80155ce:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80155d2:	f1b9 0901 	subs.w	r9, r9, #1
 80155d6:	d505      	bpl.n	80155e4 <_fwalk_reent+0x24>
 80155d8:	6824      	ldr	r4, [r4, #0]
 80155da:	2c00      	cmp	r4, #0
 80155dc:	d1f7      	bne.n	80155ce <_fwalk_reent+0xe>
 80155de:	4638      	mov	r0, r7
 80155e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80155e4:	89ab      	ldrh	r3, [r5, #12]
 80155e6:	2b01      	cmp	r3, #1
 80155e8:	d907      	bls.n	80155fa <_fwalk_reent+0x3a>
 80155ea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80155ee:	3301      	adds	r3, #1
 80155f0:	d003      	beq.n	80155fa <_fwalk_reent+0x3a>
 80155f2:	4629      	mov	r1, r5
 80155f4:	4630      	mov	r0, r6
 80155f6:	47c0      	blx	r8
 80155f8:	4307      	orrs	r7, r0
 80155fa:	3568      	adds	r5, #104	; 0x68
 80155fc:	e7e9      	b.n	80155d2 <_fwalk_reent+0x12>

080155fe <__swhatbuf_r>:
 80155fe:	b570      	push	{r4, r5, r6, lr}
 8015600:	460e      	mov	r6, r1
 8015602:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015606:	2900      	cmp	r1, #0
 8015608:	b096      	sub	sp, #88	; 0x58
 801560a:	4614      	mov	r4, r2
 801560c:	461d      	mov	r5, r3
 801560e:	da08      	bge.n	8015622 <__swhatbuf_r+0x24>
 8015610:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8015614:	2200      	movs	r2, #0
 8015616:	602a      	str	r2, [r5, #0]
 8015618:	061a      	lsls	r2, r3, #24
 801561a:	d410      	bmi.n	801563e <__swhatbuf_r+0x40>
 801561c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015620:	e00e      	b.n	8015640 <__swhatbuf_r+0x42>
 8015622:	466a      	mov	r2, sp
 8015624:	f000 f8fa 	bl	801581c <_fstat_r>
 8015628:	2800      	cmp	r0, #0
 801562a:	dbf1      	blt.n	8015610 <__swhatbuf_r+0x12>
 801562c:	9a01      	ldr	r2, [sp, #4]
 801562e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8015632:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8015636:	425a      	negs	r2, r3
 8015638:	415a      	adcs	r2, r3
 801563a:	602a      	str	r2, [r5, #0]
 801563c:	e7ee      	b.n	801561c <__swhatbuf_r+0x1e>
 801563e:	2340      	movs	r3, #64	; 0x40
 8015640:	2000      	movs	r0, #0
 8015642:	6023      	str	r3, [r4, #0]
 8015644:	b016      	add	sp, #88	; 0x58
 8015646:	bd70      	pop	{r4, r5, r6, pc}

08015648 <__smakebuf_r>:
 8015648:	898b      	ldrh	r3, [r1, #12]
 801564a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801564c:	079d      	lsls	r5, r3, #30
 801564e:	4606      	mov	r6, r0
 8015650:	460c      	mov	r4, r1
 8015652:	d507      	bpl.n	8015664 <__smakebuf_r+0x1c>
 8015654:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015658:	6023      	str	r3, [r4, #0]
 801565a:	6123      	str	r3, [r4, #16]
 801565c:	2301      	movs	r3, #1
 801565e:	6163      	str	r3, [r4, #20]
 8015660:	b002      	add	sp, #8
 8015662:	bd70      	pop	{r4, r5, r6, pc}
 8015664:	ab01      	add	r3, sp, #4
 8015666:	466a      	mov	r2, sp
 8015668:	f7ff ffc9 	bl	80155fe <__swhatbuf_r>
 801566c:	9900      	ldr	r1, [sp, #0]
 801566e:	4605      	mov	r5, r0
 8015670:	4630      	mov	r0, r6
 8015672:	f7fd fd17 	bl	80130a4 <_malloc_r>
 8015676:	b948      	cbnz	r0, 801568c <__smakebuf_r+0x44>
 8015678:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801567c:	059a      	lsls	r2, r3, #22
 801567e:	d4ef      	bmi.n	8015660 <__smakebuf_r+0x18>
 8015680:	f023 0303 	bic.w	r3, r3, #3
 8015684:	f043 0302 	orr.w	r3, r3, #2
 8015688:	81a3      	strh	r3, [r4, #12]
 801568a:	e7e3      	b.n	8015654 <__smakebuf_r+0xc>
 801568c:	4b0d      	ldr	r3, [pc, #52]	; (80156c4 <__smakebuf_r+0x7c>)
 801568e:	62b3      	str	r3, [r6, #40]	; 0x28
 8015690:	89a3      	ldrh	r3, [r4, #12]
 8015692:	6020      	str	r0, [r4, #0]
 8015694:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015698:	81a3      	strh	r3, [r4, #12]
 801569a:	9b00      	ldr	r3, [sp, #0]
 801569c:	6163      	str	r3, [r4, #20]
 801569e:	9b01      	ldr	r3, [sp, #4]
 80156a0:	6120      	str	r0, [r4, #16]
 80156a2:	b15b      	cbz	r3, 80156bc <__smakebuf_r+0x74>
 80156a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80156a8:	4630      	mov	r0, r6
 80156aa:	f000 f8c9 	bl	8015840 <_isatty_r>
 80156ae:	b128      	cbz	r0, 80156bc <__smakebuf_r+0x74>
 80156b0:	89a3      	ldrh	r3, [r4, #12]
 80156b2:	f023 0303 	bic.w	r3, r3, #3
 80156b6:	f043 0301 	orr.w	r3, r3, #1
 80156ba:	81a3      	strh	r3, [r4, #12]
 80156bc:	89a0      	ldrh	r0, [r4, #12]
 80156be:	4305      	orrs	r5, r0
 80156c0:	81a5      	strh	r5, [r4, #12]
 80156c2:	e7cd      	b.n	8015660 <__smakebuf_r+0x18>
 80156c4:	0801545d 	.word	0x0801545d

080156c8 <_raise_r>:
 80156c8:	291f      	cmp	r1, #31
 80156ca:	b538      	push	{r3, r4, r5, lr}
 80156cc:	4604      	mov	r4, r0
 80156ce:	460d      	mov	r5, r1
 80156d0:	d904      	bls.n	80156dc <_raise_r+0x14>
 80156d2:	2316      	movs	r3, #22
 80156d4:	6003      	str	r3, [r0, #0]
 80156d6:	f04f 30ff 	mov.w	r0, #4294967295
 80156da:	bd38      	pop	{r3, r4, r5, pc}
 80156dc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80156de:	b112      	cbz	r2, 80156e6 <_raise_r+0x1e>
 80156e0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80156e4:	b94b      	cbnz	r3, 80156fa <_raise_r+0x32>
 80156e6:	4620      	mov	r0, r4
 80156e8:	f000 f830 	bl	801574c <_getpid_r>
 80156ec:	462a      	mov	r2, r5
 80156ee:	4601      	mov	r1, r0
 80156f0:	4620      	mov	r0, r4
 80156f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80156f6:	f000 b817 	b.w	8015728 <_kill_r>
 80156fa:	2b01      	cmp	r3, #1
 80156fc:	d00a      	beq.n	8015714 <_raise_r+0x4c>
 80156fe:	1c59      	adds	r1, r3, #1
 8015700:	d103      	bne.n	801570a <_raise_r+0x42>
 8015702:	2316      	movs	r3, #22
 8015704:	6003      	str	r3, [r0, #0]
 8015706:	2001      	movs	r0, #1
 8015708:	e7e7      	b.n	80156da <_raise_r+0x12>
 801570a:	2400      	movs	r4, #0
 801570c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8015710:	4628      	mov	r0, r5
 8015712:	4798      	blx	r3
 8015714:	2000      	movs	r0, #0
 8015716:	e7e0      	b.n	80156da <_raise_r+0x12>

08015718 <raise>:
 8015718:	4b02      	ldr	r3, [pc, #8]	; (8015724 <raise+0xc>)
 801571a:	4601      	mov	r1, r0
 801571c:	6818      	ldr	r0, [r3, #0]
 801571e:	f7ff bfd3 	b.w	80156c8 <_raise_r>
 8015722:	bf00      	nop
 8015724:	240006fc 	.word	0x240006fc

08015728 <_kill_r>:
 8015728:	b538      	push	{r3, r4, r5, lr}
 801572a:	4d07      	ldr	r5, [pc, #28]	; (8015748 <_kill_r+0x20>)
 801572c:	2300      	movs	r3, #0
 801572e:	4604      	mov	r4, r0
 8015730:	4608      	mov	r0, r1
 8015732:	4611      	mov	r1, r2
 8015734:	602b      	str	r3, [r5, #0]
 8015736:	f000 fc7f 	bl	8016038 <_kill>
 801573a:	1c43      	adds	r3, r0, #1
 801573c:	d102      	bne.n	8015744 <_kill_r+0x1c>
 801573e:	682b      	ldr	r3, [r5, #0]
 8015740:	b103      	cbz	r3, 8015744 <_kill_r+0x1c>
 8015742:	6023      	str	r3, [r4, #0]
 8015744:	bd38      	pop	{r3, r4, r5, pc}
 8015746:	bf00      	nop
 8015748:	24002894 	.word	0x24002894

0801574c <_getpid_r>:
 801574c:	f000 bc64 	b.w	8016018 <_getpid>

08015750 <__sread>:
 8015750:	b510      	push	{r4, lr}
 8015752:	460c      	mov	r4, r1
 8015754:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015758:	f000 f894 	bl	8015884 <_read_r>
 801575c:	2800      	cmp	r0, #0
 801575e:	bfab      	itete	ge
 8015760:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8015762:	89a3      	ldrhlt	r3, [r4, #12]
 8015764:	181b      	addge	r3, r3, r0
 8015766:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801576a:	bfac      	ite	ge
 801576c:	6563      	strge	r3, [r4, #84]	; 0x54
 801576e:	81a3      	strhlt	r3, [r4, #12]
 8015770:	bd10      	pop	{r4, pc}

08015772 <__swrite>:
 8015772:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015776:	461f      	mov	r7, r3
 8015778:	898b      	ldrh	r3, [r1, #12]
 801577a:	05db      	lsls	r3, r3, #23
 801577c:	4605      	mov	r5, r0
 801577e:	460c      	mov	r4, r1
 8015780:	4616      	mov	r6, r2
 8015782:	d505      	bpl.n	8015790 <__swrite+0x1e>
 8015784:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015788:	2302      	movs	r3, #2
 801578a:	2200      	movs	r2, #0
 801578c:	f000 f868 	bl	8015860 <_lseek_r>
 8015790:	89a3      	ldrh	r3, [r4, #12]
 8015792:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015796:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801579a:	81a3      	strh	r3, [r4, #12]
 801579c:	4632      	mov	r2, r6
 801579e:	463b      	mov	r3, r7
 80157a0:	4628      	mov	r0, r5
 80157a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80157a6:	f000 b817 	b.w	80157d8 <_write_r>

080157aa <__sseek>:
 80157aa:	b510      	push	{r4, lr}
 80157ac:	460c      	mov	r4, r1
 80157ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80157b2:	f000 f855 	bl	8015860 <_lseek_r>
 80157b6:	1c43      	adds	r3, r0, #1
 80157b8:	89a3      	ldrh	r3, [r4, #12]
 80157ba:	bf15      	itete	ne
 80157bc:	6560      	strne	r0, [r4, #84]	; 0x54
 80157be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80157c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80157c6:	81a3      	strheq	r3, [r4, #12]
 80157c8:	bf18      	it	ne
 80157ca:	81a3      	strhne	r3, [r4, #12]
 80157cc:	bd10      	pop	{r4, pc}

080157ce <__sclose>:
 80157ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80157d2:	f000 b813 	b.w	80157fc <_close_r>
	...

080157d8 <_write_r>:
 80157d8:	b538      	push	{r3, r4, r5, lr}
 80157da:	4d07      	ldr	r5, [pc, #28]	; (80157f8 <_write_r+0x20>)
 80157dc:	4604      	mov	r4, r0
 80157de:	4608      	mov	r0, r1
 80157e0:	4611      	mov	r1, r2
 80157e2:	2200      	movs	r2, #0
 80157e4:	602a      	str	r2, [r5, #0]
 80157e6:	461a      	mov	r2, r3
 80157e8:	f7f3 fbbc 	bl	8008f64 <_write>
 80157ec:	1c43      	adds	r3, r0, #1
 80157ee:	d102      	bne.n	80157f6 <_write_r+0x1e>
 80157f0:	682b      	ldr	r3, [r5, #0]
 80157f2:	b103      	cbz	r3, 80157f6 <_write_r+0x1e>
 80157f4:	6023      	str	r3, [r4, #0]
 80157f6:	bd38      	pop	{r3, r4, r5, pc}
 80157f8:	24002894 	.word	0x24002894

080157fc <_close_r>:
 80157fc:	b538      	push	{r3, r4, r5, lr}
 80157fe:	4d06      	ldr	r5, [pc, #24]	; (8015818 <_close_r+0x1c>)
 8015800:	2300      	movs	r3, #0
 8015802:	4604      	mov	r4, r0
 8015804:	4608      	mov	r0, r1
 8015806:	602b      	str	r3, [r5, #0]
 8015808:	f000 fbf6 	bl	8015ff8 <_close>
 801580c:	1c43      	adds	r3, r0, #1
 801580e:	d102      	bne.n	8015816 <_close_r+0x1a>
 8015810:	682b      	ldr	r3, [r5, #0]
 8015812:	b103      	cbz	r3, 8015816 <_close_r+0x1a>
 8015814:	6023      	str	r3, [r4, #0]
 8015816:	bd38      	pop	{r3, r4, r5, pc}
 8015818:	24002894 	.word	0x24002894

0801581c <_fstat_r>:
 801581c:	b538      	push	{r3, r4, r5, lr}
 801581e:	4d07      	ldr	r5, [pc, #28]	; (801583c <_fstat_r+0x20>)
 8015820:	2300      	movs	r3, #0
 8015822:	4604      	mov	r4, r0
 8015824:	4608      	mov	r0, r1
 8015826:	4611      	mov	r1, r2
 8015828:	602b      	str	r3, [r5, #0]
 801582a:	f000 fbed 	bl	8016008 <_fstat>
 801582e:	1c43      	adds	r3, r0, #1
 8015830:	d102      	bne.n	8015838 <_fstat_r+0x1c>
 8015832:	682b      	ldr	r3, [r5, #0]
 8015834:	b103      	cbz	r3, 8015838 <_fstat_r+0x1c>
 8015836:	6023      	str	r3, [r4, #0]
 8015838:	bd38      	pop	{r3, r4, r5, pc}
 801583a:	bf00      	nop
 801583c:	24002894 	.word	0x24002894

08015840 <_isatty_r>:
 8015840:	b538      	push	{r3, r4, r5, lr}
 8015842:	4d06      	ldr	r5, [pc, #24]	; (801585c <_isatty_r+0x1c>)
 8015844:	2300      	movs	r3, #0
 8015846:	4604      	mov	r4, r0
 8015848:	4608      	mov	r0, r1
 801584a:	602b      	str	r3, [r5, #0]
 801584c:	f000 fbec 	bl	8016028 <_isatty>
 8015850:	1c43      	adds	r3, r0, #1
 8015852:	d102      	bne.n	801585a <_isatty_r+0x1a>
 8015854:	682b      	ldr	r3, [r5, #0]
 8015856:	b103      	cbz	r3, 801585a <_isatty_r+0x1a>
 8015858:	6023      	str	r3, [r4, #0]
 801585a:	bd38      	pop	{r3, r4, r5, pc}
 801585c:	24002894 	.word	0x24002894

08015860 <_lseek_r>:
 8015860:	b538      	push	{r3, r4, r5, lr}
 8015862:	4d07      	ldr	r5, [pc, #28]	; (8015880 <_lseek_r+0x20>)
 8015864:	4604      	mov	r4, r0
 8015866:	4608      	mov	r0, r1
 8015868:	4611      	mov	r1, r2
 801586a:	2200      	movs	r2, #0
 801586c:	602a      	str	r2, [r5, #0]
 801586e:	461a      	mov	r2, r3
 8015870:	f000 fbea 	bl	8016048 <_lseek>
 8015874:	1c43      	adds	r3, r0, #1
 8015876:	d102      	bne.n	801587e <_lseek_r+0x1e>
 8015878:	682b      	ldr	r3, [r5, #0]
 801587a:	b103      	cbz	r3, 801587e <_lseek_r+0x1e>
 801587c:	6023      	str	r3, [r4, #0]
 801587e:	bd38      	pop	{r3, r4, r5, pc}
 8015880:	24002894 	.word	0x24002894

08015884 <_read_r>:
 8015884:	b538      	push	{r3, r4, r5, lr}
 8015886:	4d07      	ldr	r5, [pc, #28]	; (80158a4 <_read_r+0x20>)
 8015888:	4604      	mov	r4, r0
 801588a:	4608      	mov	r0, r1
 801588c:	4611      	mov	r1, r2
 801588e:	2200      	movs	r2, #0
 8015890:	602a      	str	r2, [r5, #0]
 8015892:	461a      	mov	r2, r3
 8015894:	f000 fbe0 	bl	8016058 <_read>
 8015898:	1c43      	adds	r3, r0, #1
 801589a:	d102      	bne.n	80158a2 <_read_r+0x1e>
 801589c:	682b      	ldr	r3, [r5, #0]
 801589e:	b103      	cbz	r3, 80158a2 <_read_r+0x1e>
 80158a0:	6023      	str	r3, [r4, #0]
 80158a2:	bd38      	pop	{r3, r4, r5, pc}
 80158a4:	24002894 	.word	0x24002894

080158a8 <expf>:
 80158a8:	ee10 2a10 	vmov	r2, s0
 80158ac:	f240 412a 	movw	r1, #1066	; 0x42a
 80158b0:	f3c2 530a 	ubfx	r3, r2, #20, #11
 80158b4:	428b      	cmp	r3, r1
 80158b6:	b430      	push	{r4, r5}
 80158b8:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 80158bc:	d92a      	bls.n	8015914 <expf+0x6c>
 80158be:	f512 0f00 	cmn.w	r2, #8388608	; 0x800000
 80158c2:	d058      	beq.n	8015976 <expf+0xce>
 80158c4:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 80158c8:	d303      	bcc.n	80158d2 <expf+0x2a>
 80158ca:	ee30 0a00 	vadd.f32	s0, s0, s0
 80158ce:	bc30      	pop	{r4, r5}
 80158d0:	4770      	bx	lr
 80158d2:	eddf 7a2a 	vldr	s15, [pc, #168]	; 801597c <expf+0xd4>
 80158d6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80158da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80158de:	dd03      	ble.n	80158e8 <expf+0x40>
 80158e0:	bc30      	pop	{r4, r5}
 80158e2:	2000      	movs	r0, #0
 80158e4:	f000 ba40 	b.w	8015d68 <__math_oflowf>
 80158e8:	eddf 7a25 	vldr	s15, [pc, #148]	; 8015980 <expf+0xd8>
 80158ec:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80158f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80158f4:	d503      	bpl.n	80158fe <expf+0x56>
 80158f6:	bc30      	pop	{r4, r5}
 80158f8:	2000      	movs	r0, #0
 80158fa:	f000 ba29 	b.w	8015d50 <__math_uflowf>
 80158fe:	eddf 7a21 	vldr	s15, [pc, #132]	; 8015984 <expf+0xdc>
 8015902:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8015906:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801590a:	d503      	bpl.n	8015914 <expf+0x6c>
 801590c:	bc30      	pop	{r4, r5}
 801590e:	2000      	movs	r0, #0
 8015910:	f000 ba24 	b.w	8015d5c <__math_may_uflowf>
 8015914:	4b1c      	ldr	r3, [pc, #112]	; (8015988 <expf+0xe0>)
 8015916:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 801591a:	ed93 5b4a 	vldr	d5, [r3, #296]	; 0x128
 801591e:	ed93 4b48 	vldr	d4, [r3, #288]	; 0x120
 8015922:	eeb0 7b44 	vmov.f64	d7, d4
 8015926:	eea5 7b06 	vfma.f64	d7, d5, d6
 801592a:	ee17 0a10 	vmov	r0, s14
 801592e:	ee37 7b44 	vsub.f64	d7, d7, d4
 8015932:	f000 021f 	and.w	r2, r0, #31
 8015936:	ee95 7b06 	vfnms.f64	d7, d5, d6
 801593a:	ed93 5b4c 	vldr	d5, [r3, #304]	; 0x130
 801593e:	ee27 4b07 	vmul.f64	d4, d7, d7
 8015942:	ed93 6b4e 	vldr	d6, [r3, #312]	; 0x138
 8015946:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 801594a:	eea5 6b07 	vfma.f64	d6, d5, d7
 801594e:	f853 4032 	ldr.w	r4, [r3, r2, lsl #3]
 8015952:	684d      	ldr	r5, [r1, #4]
 8015954:	ed93 5b50 	vldr	d5, [r3, #320]	; 0x140
 8015958:	2100      	movs	r1, #0
 801595a:	190a      	adds	r2, r1, r4
 801595c:	eb05 33c0 	add.w	r3, r5, r0, lsl #15
 8015960:	eea5 0b07 	vfma.f64	d0, d5, d7
 8015964:	ec43 2b17 	vmov	d7, r2, r3
 8015968:	eea6 0b04 	vfma.f64	d0, d6, d4
 801596c:	ee20 0b07 	vmul.f64	d0, d0, d7
 8015970:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8015974:	e7ab      	b.n	80158ce <expf+0x26>
 8015976:	ed9f 0a05 	vldr	s0, [pc, #20]	; 801598c <expf+0xe4>
 801597a:	e7a8      	b.n	80158ce <expf+0x26>
 801597c:	42b17217 	.word	0x42b17217
 8015980:	c2cff1b4 	.word	0xc2cff1b4
 8015984:	c2ce8ecf 	.word	0xc2ce8ecf
 8015988:	08017430 	.word	0x08017430
 801598c:	00000000 	.word	0x00000000

08015990 <checkint>:
 8015990:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8015994:	2b7e      	cmp	r3, #126	; 0x7e
 8015996:	dd10      	ble.n	80159ba <checkint+0x2a>
 8015998:	2b96      	cmp	r3, #150	; 0x96
 801599a:	dc0c      	bgt.n	80159b6 <checkint+0x26>
 801599c:	2201      	movs	r2, #1
 801599e:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 80159a2:	fa02 f303 	lsl.w	r3, r2, r3
 80159a6:	1e5a      	subs	r2, r3, #1
 80159a8:	4202      	tst	r2, r0
 80159aa:	d106      	bne.n	80159ba <checkint+0x2a>
 80159ac:	4203      	tst	r3, r0
 80159ae:	bf0c      	ite	eq
 80159b0:	2002      	moveq	r0, #2
 80159b2:	2001      	movne	r0, #1
 80159b4:	4770      	bx	lr
 80159b6:	2002      	movs	r0, #2
 80159b8:	4770      	bx	lr
 80159ba:	2000      	movs	r0, #0
 80159bc:	4770      	bx	lr
	...

080159c0 <powf>:
 80159c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80159c2:	ee10 1a10 	vmov	r1, s0
 80159c6:	ee10 4a90 	vmov	r4, s1
 80159ca:	f5a1 0300 	sub.w	r3, r1, #8388608	; 0x800000
 80159ce:	0062      	lsls	r2, r4, #1
 80159d0:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 80159d4:	eef0 7a40 	vmov.f32	s15, s0
 80159d8:	f102 30ff 	add.w	r0, r2, #4294967295
 80159dc:	f06f 7380 	mvn.w	r3, #16777216	; 0x1000000
 80159e0:	d252      	bcs.n	8015a88 <powf+0xc8>
 80159e2:	4298      	cmp	r0, r3
 80159e4:	d252      	bcs.n	8015a8c <powf+0xcc>
 80159e6:	2000      	movs	r0, #0
 80159e8:	f101 4240 	add.w	r2, r1, #3221225472	; 0xc0000000
 80159ec:	4ca0      	ldr	r4, [pc, #640]	; (8015c70 <powf+0x2b0>)
 80159ee:	eebf 5b00 	vmov.f64	d5, #240	; 0xbf800000 -1.0
 80159f2:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 80159f6:	f3c2 45c3 	ubfx	r5, r2, #19, #4
 80159fa:	0dd2      	lsrs	r2, r2, #23
 80159fc:	05d2      	lsls	r2, r2, #23
 80159fe:	eb04 1505 	add.w	r5, r4, r5, lsl #4
 8015a02:	1a8b      	subs	r3, r1, r2
 8015a04:	ed95 6b00 	vldr	d6, [r5]
 8015a08:	ee07 3a90 	vmov	s15, r3
 8015a0c:	15d2      	asrs	r2, r2, #23
 8015a0e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8015a12:	eea6 5b07 	vfma.f64	d5, d6, d7
 8015a16:	ed95 6b02 	vldr	d6, [r5, #8]
 8015a1a:	ee25 2b05 	vmul.f64	d2, d5, d5
 8015a1e:	ee22 1b02 	vmul.f64	d1, d2, d2
 8015a22:	ee07 2a90 	vmov	s15, r2
 8015a26:	ed94 3b42 	vldr	d3, [r4, #264]	; 0x108
 8015a2a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8015a2e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8015a32:	ed94 6b40 	vldr	d6, [r4, #256]	; 0x100
 8015a36:	ed94 4b44 	vldr	d4, [r4, #272]	; 0x110
 8015a3a:	eea5 3b06 	vfma.f64	d3, d5, d6
 8015a3e:	ed94 6b46 	vldr	d6, [r4, #280]	; 0x118
 8015a42:	eea5 6b04 	vfma.f64	d6, d5, d4
 8015a46:	ed94 4b48 	vldr	d4, [r4, #288]	; 0x120
 8015a4a:	eeb7 0ae0 	vcvt.f64.f32	d0, s1
 8015a4e:	eea5 7b04 	vfma.f64	d7, d5, d4
 8015a52:	eea2 7b06 	vfma.f64	d7, d2, d6
 8015a56:	eea3 7b01 	vfma.f64	d7, d3, d1
 8015a5a:	ee20 0b07 	vmul.f64	d0, d0, d7
 8015a5e:	ee10 3a90 	vmov	r3, s1
 8015a62:	f3c3 32cf 	ubfx	r2, r3, #15, #16
 8015a66:	f248 03bf 	movw	r3, #32959	; 0x80bf
 8015a6a:	429a      	cmp	r2, r3
 8015a6c:	f0c0 80b1 	bcc.w	8015bd2 <powf+0x212>
 8015a70:	ed9f 7b77 	vldr	d7, [pc, #476]	; 8015c50 <powf+0x290>
 8015a74:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8015a78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015a7c:	dd79      	ble.n	8015b72 <powf+0x1b2>
 8015a7e:	b003      	add	sp, #12
 8015a80:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015a84:	f000 b970 	b.w	8015d68 <__math_oflowf>
 8015a88:	4298      	cmp	r0, r3
 8015a8a:	d32d      	bcc.n	8015ae8 <powf+0x128>
 8015a8c:	b952      	cbnz	r2, 8015aa4 <powf+0xe4>
 8015a8e:	f481 0380 	eor.w	r3, r1, #4194304	; 0x400000
 8015a92:	005b      	lsls	r3, r3, #1
 8015a94:	f513 0f00 	cmn.w	r3, #8388608	; 0x800000
 8015a98:	f240 80c9 	bls.w	8015c2e <powf+0x26e>
 8015a9c:	ee37 0aa0 	vadd.f32	s0, s15, s1
 8015aa0:	b003      	add	sp, #12
 8015aa2:	bd30      	pop	{r4, r5, pc}
 8015aa4:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 8015aa8:	d105      	bne.n	8015ab6 <powf+0xf6>
 8015aaa:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 8015aae:	0064      	lsls	r4, r4, #1
 8015ab0:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 8015ab4:	e7f0      	b.n	8015a98 <powf+0xd8>
 8015ab6:	004b      	lsls	r3, r1, #1
 8015ab8:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 8015abc:	d8ee      	bhi.n	8015a9c <powf+0xdc>
 8015abe:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 8015ac2:	d1eb      	bne.n	8015a9c <powf+0xdc>
 8015ac4:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8015ac8:	f000 80b1 	beq.w	8015c2e <powf+0x26e>
 8015acc:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8015ad0:	ea6f 0404 	mvn.w	r4, r4
 8015ad4:	bf34      	ite	cc
 8015ad6:	2300      	movcc	r3, #0
 8015ad8:	2301      	movcs	r3, #1
 8015ada:	0fe4      	lsrs	r4, r4, #31
 8015adc:	42a3      	cmp	r3, r4
 8015ade:	f040 80a9 	bne.w	8015c34 <powf+0x274>
 8015ae2:	ee20 0aa0 	vmul.f32	s0, s1, s1
 8015ae6:	e7db      	b.n	8015aa0 <powf+0xe0>
 8015ae8:	004d      	lsls	r5, r1, #1
 8015aea:	1e6a      	subs	r2, r5, #1
 8015aec:	429a      	cmp	r2, r3
 8015aee:	d31c      	bcc.n	8015b2a <powf+0x16a>
 8015af0:	2900      	cmp	r1, #0
 8015af2:	ee20 0a00 	vmul.f32	s0, s0, s0
 8015af6:	da0f      	bge.n	8015b18 <powf+0x158>
 8015af8:	ee10 0a90 	vmov	r0, s1
 8015afc:	f7ff ff48 	bl	8015990 <checkint>
 8015b00:	2801      	cmp	r0, #1
 8015b02:	d109      	bne.n	8015b18 <powf+0x158>
 8015b04:	eeb1 0a40 	vneg.f32	s0, s0
 8015b08:	b945      	cbnz	r5, 8015b1c <powf+0x15c>
 8015b0a:	2c00      	cmp	r4, #0
 8015b0c:	dac8      	bge.n	8015aa0 <powf+0xe0>
 8015b0e:	b003      	add	sp, #12
 8015b10:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015b14:	f000 b92e 	b.w	8015d74 <__math_divzerof>
 8015b18:	2000      	movs	r0, #0
 8015b1a:	e7f5      	b.n	8015b08 <powf+0x148>
 8015b1c:	2c00      	cmp	r4, #0
 8015b1e:	dabf      	bge.n	8015aa0 <powf+0xe0>
 8015b20:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8015b24:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8015b28:	e7ba      	b.n	8015aa0 <powf+0xe0>
 8015b2a:	2900      	cmp	r1, #0
 8015b2c:	da1f      	bge.n	8015b6e <powf+0x1ae>
 8015b2e:	ee10 0a90 	vmov	r0, s1
 8015b32:	f7ff ff2d 	bl	8015990 <checkint>
 8015b36:	b920      	cbnz	r0, 8015b42 <powf+0x182>
 8015b38:	b003      	add	sp, #12
 8015b3a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015b3e:	f000 b929 	b.w	8015d94 <__math_invalidf>
 8015b42:	2801      	cmp	r0, #1
 8015b44:	bf14      	ite	ne
 8015b46:	2000      	movne	r0, #0
 8015b48:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 8015b4c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8015b50:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8015b54:	f4bf af48 	bcs.w	80159e8 <powf+0x28>
 8015b58:	ed9f 0a46 	vldr	s0, [pc, #280]	; 8015c74 <powf+0x2b4>
 8015b5c:	ee27 0a80 	vmul.f32	s0, s15, s0
 8015b60:	ee10 3a10 	vmov	r3, s0
 8015b64:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015b68:	f1a3 6138 	sub.w	r1, r3, #192937984	; 0xb800000
 8015b6c:	e73c      	b.n	80159e8 <powf+0x28>
 8015b6e:	2000      	movs	r0, #0
 8015b70:	e7ee      	b.n	8015b50 <powf+0x190>
 8015b72:	ed9f 7b39 	vldr	d7, [pc, #228]	; 8015c58 <powf+0x298>
 8015b76:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8015b7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015b7e:	dd10      	ble.n	8015ba2 <powf+0x1e2>
 8015b80:	f04f 534c 	mov.w	r3, #855638016	; 0x33000000
 8015b84:	2800      	cmp	r0, #0
 8015b86:	d158      	bne.n	8015c3a <powf+0x27a>
 8015b88:	9300      	str	r3, [sp, #0]
 8015b8a:	eddd 7a00 	vldr	s15, [sp]
 8015b8e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8015b92:	ee77 7a87 	vadd.f32	s15, s15, s14
 8015b96:	eef4 7a47 	vcmp.f32	s15, s14
 8015b9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015b9e:	f47f af6e 	bne.w	8015a7e <powf+0xbe>
 8015ba2:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8015c60 <powf+0x2a0>
 8015ba6:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8015baa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015bae:	d804      	bhi.n	8015bba <powf+0x1fa>
 8015bb0:	b003      	add	sp, #12
 8015bb2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015bb6:	f000 b8cb 	b.w	8015d50 <__math_uflowf>
 8015bba:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 8015c68 <powf+0x2a8>
 8015bbe:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8015bc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015bc6:	d504      	bpl.n	8015bd2 <powf+0x212>
 8015bc8:	b003      	add	sp, #12
 8015bca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015bce:	f000 b8c5 	b.w	8015d5c <__math_may_uflowf>
 8015bd2:	4b29      	ldr	r3, [pc, #164]	; (8015c78 <powf+0x2b8>)
 8015bd4:	ed93 7b40 	vldr	d7, [r3, #256]	; 0x100
 8015bd8:	ee30 6b07 	vadd.f64	d6, d0, d7
 8015bdc:	ee16 2a10 	vmov	r2, s12
 8015be0:	ee36 7b47 	vsub.f64	d7, d6, d7
 8015be4:	f002 011f 	and.w	r1, r2, #31
 8015be8:	ed93 5b42 	vldr	d5, [r3, #264]	; 0x108
 8015bec:	ee30 7b47 	vsub.f64	d7, d0, d7
 8015bf0:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8015bf4:	ed93 6b44 	vldr	d6, [r3, #272]	; 0x110
 8015bf8:	ee27 4b07 	vmul.f64	d4, d7, d7
 8015bfc:	eb03 05c1 	add.w	r5, r3, r1, lsl #3
 8015c00:	f853 4031 	ldr.w	r4, [r3, r1, lsl #3]
 8015c04:	eea7 6b05 	vfma.f64	d6, d7, d5
 8015c08:	686d      	ldr	r5, [r5, #4]
 8015c0a:	ed93 5b46 	vldr	d5, [r3, #280]	; 0x118
 8015c0e:	1882      	adds	r2, r0, r2
 8015c10:	2300      	movs	r3, #0
 8015c12:	1918      	adds	r0, r3, r4
 8015c14:	eb05 31c2 	add.w	r1, r5, r2, lsl #15
 8015c18:	eea7 0b05 	vfma.f64	d0, d7, d5
 8015c1c:	ec41 0b17 	vmov	d7, r0, r1
 8015c20:	eea6 0b04 	vfma.f64	d0, d6, d4
 8015c24:	ee20 0b07 	vmul.f64	d0, d0, d7
 8015c28:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8015c2c:	e738      	b.n	8015aa0 <powf+0xe0>
 8015c2e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8015c32:	e735      	b.n	8015aa0 <powf+0xe0>
 8015c34:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8015c7c <powf+0x2bc>
 8015c38:	e732      	b.n	8015aa0 <powf+0xe0>
 8015c3a:	9301      	str	r3, [sp, #4]
 8015c3c:	eddd 7a01 	vldr	s15, [sp, #4]
 8015c40:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8015c44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015c48:	e7a5      	b.n	8015b96 <powf+0x1d6>
 8015c4a:	bf00      	nop
 8015c4c:	f3af 8000 	nop.w
 8015c50:	ffd1d571 	.word	0xffd1d571
 8015c54:	405fffff 	.word	0x405fffff
 8015c58:	ffa3aae2 	.word	0xffa3aae2
 8015c5c:	405fffff 	.word	0x405fffff
 8015c60:	00000000 	.word	0x00000000
 8015c64:	c062c000 	.word	0xc062c000
 8015c68:	00000000 	.word	0x00000000
 8015c6c:	c062a000 	.word	0xc062a000
 8015c70:	08017578 	.word	0x08017578
 8015c74:	4b000000 	.word	0x4b000000
 8015c78:	08017430 	.word	0x08017430
 8015c7c:	00000000 	.word	0x00000000

08015c80 <tanhf>:
 8015c80:	b510      	push	{r4, lr}
 8015c82:	ee10 4a10 	vmov	r4, s0
 8015c86:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8015c8a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8015c8e:	ed2d 8b02 	vpush	{d8}
 8015c92:	eeb0 7a40 	vmov.f32	s14, s0
 8015c96:	db0c      	blt.n	8015cb2 <tanhf+0x32>
 8015c98:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8015c9c:	eec0 7a07 	vdiv.f32	s15, s0, s14
 8015ca0:	2c00      	cmp	r4, #0
 8015ca2:	bfac      	ite	ge
 8015ca4:	ee37 0a80 	vaddge.f32	s0, s15, s0
 8015ca8:	ee37 0ac0 	vsublt.f32	s0, s15, s0
 8015cac:	ecbd 8b02 	vpop	{d8}
 8015cb0:	bd10      	pop	{r4, pc}
 8015cb2:	4a1b      	ldr	r2, [pc, #108]	; (8015d20 <tanhf+0xa0>)
 8015cb4:	4293      	cmp	r3, r2
 8015cb6:	dc30      	bgt.n	8015d1a <tanhf+0x9a>
 8015cb8:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
 8015cbc:	da06      	bge.n	8015ccc <tanhf+0x4c>
 8015cbe:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8015cc2:	ee70 7a27 	vadd.f32	s15, s0, s15
 8015cc6:	ee27 0a80 	vmul.f32	s0, s15, s0
 8015cca:	e7ef      	b.n	8015cac <tanhf+0x2c>
 8015ccc:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8015cd0:	eeb0 8a00 	vmov.f32	s16, #0	; 0x40000000  2.0
 8015cd4:	db12      	blt.n	8015cfc <tanhf+0x7c>
 8015cd6:	f000 f987 	bl	8015fe8 <fabsf>
 8015cda:	ee30 0a00 	vadd.f32	s0, s0, s0
 8015cde:	f000 f869 	bl	8015db4 <expm1f>
 8015ce2:	ee30 0a08 	vadd.f32	s0, s0, s16
 8015ce6:	eec8 7a00 	vdiv.f32	s15, s16, s0
 8015cea:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8015cee:	ee30 0a67 	vsub.f32	s0, s0, s15
 8015cf2:	2c00      	cmp	r4, #0
 8015cf4:	bfb8      	it	lt
 8015cf6:	eeb1 0a40 	vneglt.f32	s0, s0
 8015cfa:	e7d7      	b.n	8015cac <tanhf+0x2c>
 8015cfc:	f000 f974 	bl	8015fe8 <fabsf>
 8015d00:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
 8015d04:	ee20 0a27 	vmul.f32	s0, s0, s15
 8015d08:	f000 f854 	bl	8015db4 <expm1f>
 8015d0c:	ee70 7a08 	vadd.f32	s15, s0, s16
 8015d10:	eeb1 7a40 	vneg.f32	s14, s0
 8015d14:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8015d18:	e7eb      	b.n	8015cf2 <tanhf+0x72>
 8015d1a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8015d1e:	e7e8      	b.n	8015cf2 <tanhf+0x72>
 8015d20:	41afffff 	.word	0x41afffff

08015d24 <with_errnof>:
 8015d24:	b513      	push	{r0, r1, r4, lr}
 8015d26:	4604      	mov	r4, r0
 8015d28:	ed8d 0a01 	vstr	s0, [sp, #4]
 8015d2c:	f7fd f906 	bl	8012f3c <__errno>
 8015d30:	ed9d 0a01 	vldr	s0, [sp, #4]
 8015d34:	6004      	str	r4, [r0, #0]
 8015d36:	b002      	add	sp, #8
 8015d38:	bd10      	pop	{r4, pc}

08015d3a <xflowf>:
 8015d3a:	b130      	cbz	r0, 8015d4a <xflowf+0x10>
 8015d3c:	eef1 7a40 	vneg.f32	s15, s0
 8015d40:	ee27 0a80 	vmul.f32	s0, s15, s0
 8015d44:	2022      	movs	r0, #34	; 0x22
 8015d46:	f7ff bfed 	b.w	8015d24 <with_errnof>
 8015d4a:	eef0 7a40 	vmov.f32	s15, s0
 8015d4e:	e7f7      	b.n	8015d40 <xflowf+0x6>

08015d50 <__math_uflowf>:
 8015d50:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8015d58 <__math_uflowf+0x8>
 8015d54:	f7ff bff1 	b.w	8015d3a <xflowf>
 8015d58:	10000000 	.word	0x10000000

08015d5c <__math_may_uflowf>:
 8015d5c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8015d64 <__math_may_uflowf+0x8>
 8015d60:	f7ff bfeb 	b.w	8015d3a <xflowf>
 8015d64:	1a200000 	.word	0x1a200000

08015d68 <__math_oflowf>:
 8015d68:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8015d70 <__math_oflowf+0x8>
 8015d6c:	f7ff bfe5 	b.w	8015d3a <xflowf>
 8015d70:	70000000 	.word	0x70000000

08015d74 <__math_divzerof>:
 8015d74:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8015d78:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8015d7c:	2800      	cmp	r0, #0
 8015d7e:	fe40 7a27 	vseleq.f32	s15, s0, s15
 8015d82:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8015d90 <__math_divzerof+0x1c>
 8015d86:	2022      	movs	r0, #34	; 0x22
 8015d88:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8015d8c:	f7ff bfca 	b.w	8015d24 <with_errnof>
 8015d90:	00000000 	.word	0x00000000

08015d94 <__math_invalidf>:
 8015d94:	eef0 7a40 	vmov.f32	s15, s0
 8015d98:	ee30 7a40 	vsub.f32	s14, s0, s0
 8015d9c:	eef4 7a67 	vcmp.f32	s15, s15
 8015da0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015da4:	ee87 0a07 	vdiv.f32	s0, s14, s14
 8015da8:	d602      	bvs.n	8015db0 <__math_invalidf+0x1c>
 8015daa:	2021      	movs	r0, #33	; 0x21
 8015dac:	f7ff bfba 	b.w	8015d24 <with_errnof>
 8015db0:	4770      	bx	lr
	...

08015db4 <expm1f>:
 8015db4:	ee10 2a10 	vmov	r2, s0
 8015db8:	497c      	ldr	r1, [pc, #496]	; (8015fac <expm1f+0x1f8>)
 8015dba:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8015dbe:	428b      	cmp	r3, r1
 8015dc0:	d920      	bls.n	8015e04 <expm1f+0x50>
 8015dc2:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8015dc6:	d902      	bls.n	8015dce <expm1f+0x1a>
 8015dc8:	ee30 0a00 	vadd.f32	s0, s0, s0
 8015dcc:	4770      	bx	lr
 8015dce:	d105      	bne.n	8015ddc <expm1f+0x28>
 8015dd0:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8015dd4:	2a00      	cmp	r2, #0
 8015dd6:	fe20 0a27 	vselge.f32	s0, s0, s15
 8015dda:	4770      	bx	lr
 8015ddc:	2a00      	cmp	r2, #0
 8015dde:	db05      	blt.n	8015dec <expm1f+0x38>
 8015de0:	4973      	ldr	r1, [pc, #460]	; (8015fb0 <expm1f+0x1fc>)
 8015de2:	428b      	cmp	r3, r1
 8015de4:	d95c      	bls.n	8015ea0 <expm1f+0xec>
 8015de6:	2000      	movs	r0, #0
 8015de8:	f7ff bfbe 	b.w	8015d68 <__math_oflowf>
 8015dec:	eddf 7a71 	vldr	s15, [pc, #452]	; 8015fb4 <expm1f+0x200>
 8015df0:	ee70 7a27 	vadd.f32	s15, s0, s15
 8015df4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8015df8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015dfc:	d550      	bpl.n	8015ea0 <expm1f+0xec>
 8015dfe:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8015e02:	4770      	bx	lr
 8015e04:	496c      	ldr	r1, [pc, #432]	; (8015fb8 <expm1f+0x204>)
 8015e06:	428b      	cmp	r3, r1
 8015e08:	d966      	bls.n	8015ed8 <expm1f+0x124>
 8015e0a:	496c      	ldr	r1, [pc, #432]	; (8015fbc <expm1f+0x208>)
 8015e0c:	428b      	cmp	r3, r1
 8015e0e:	d847      	bhi.n	8015ea0 <expm1f+0xec>
 8015e10:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 8015fc0 <expm1f+0x20c>
 8015e14:	2a00      	cmp	r2, #0
 8015e16:	bfa7      	ittee	ge
 8015e18:	ee30 7a47 	vsubge.f32	s14, s0, s14
 8015e1c:	eddf 7a69 	vldrge	s15, [pc, #420]	; 8015fc4 <expm1f+0x210>
 8015e20:	eddf 7a69 	vldrlt	s15, [pc, #420]	; 8015fc8 <expm1f+0x214>
 8015e24:	ee30 7a07 	vaddlt.f32	s14, s0, s14
 8015e28:	bfac      	ite	ge
 8015e2a:	2301      	movge	r3, #1
 8015e2c:	f04f 33ff 	movlt.w	r3, #4294967295
 8015e30:	ee37 0a67 	vsub.f32	s0, s14, s15
 8015e34:	ee37 7a40 	vsub.f32	s14, s14, s0
 8015e38:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015e3c:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8015e40:	ee20 4a25 	vmul.f32	s8, s0, s11
 8015e44:	ed9f 6a61 	vldr	s12, [pc, #388]	; 8015fcc <expm1f+0x218>
 8015e48:	eddf 6a61 	vldr	s13, [pc, #388]	; 8015fd0 <expm1f+0x21c>
 8015e4c:	ed9f 5a61 	vldr	s10, [pc, #388]	; 8015fd4 <expm1f+0x220>
 8015e50:	ee20 7a04 	vmul.f32	s14, s0, s8
 8015e54:	eef0 4a08 	vmov.f32	s9, #8	; 0x40400000  3.0
 8015e58:	eee7 6a06 	vfma.f32	s13, s14, s12
 8015e5c:	ed9f 6a5e 	vldr	s12, [pc, #376]	; 8015fd8 <expm1f+0x224>
 8015e60:	eea6 6a87 	vfma.f32	s12, s13, s14
 8015e64:	eddf 6a5d 	vldr	s13, [pc, #372]	; 8015fdc <expm1f+0x228>
 8015e68:	eee6 6a07 	vfma.f32	s13, s12, s14
 8015e6c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8015e70:	eea6 5a87 	vfma.f32	s10, s13, s14
 8015e74:	eef0 6a46 	vmov.f32	s13, s12
 8015e78:	eee5 6a07 	vfma.f32	s13, s10, s14
 8015e7c:	eee4 4a66 	vfms.f32	s9, s8, s13
 8015e80:	eeb1 4a08 	vmov.f32	s8, #24	; 0x40c00000  6.0
 8015e84:	eea0 4a64 	vfms.f32	s8, s0, s9
 8015e88:	ee36 5ae4 	vsub.f32	s10, s13, s9
 8015e8c:	eec5 6a04 	vdiv.f32	s13, s10, s8
 8015e90:	ee66 6a87 	vmul.f32	s13, s13, s14
 8015e94:	bb73      	cbnz	r3, 8015ef4 <expm1f+0x140>
 8015e96:	eef0 7a47 	vmov.f32	s15, s14
 8015e9a:	eed0 7a26 	vfnms.f32	s15, s0, s13
 8015e9e:	e024      	b.n	8015eea <expm1f+0x136>
 8015ea0:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8015ea4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8015ea8:	2a00      	cmp	r2, #0
 8015eaa:	fe67 7a87 	vselge.f32	s15, s15, s14
 8015eae:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8015fe0 <expm1f+0x22c>
 8015eb2:	eddf 6a43 	vldr	s13, [pc, #268]	; 8015fc0 <expm1f+0x20c>
 8015eb6:	ee40 7a07 	vmla.f32	s15, s0, s14
 8015eba:	eeb0 7a40 	vmov.f32	s14, s0
 8015ebe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8015ec2:	ee17 3a90 	vmov	r3, s15
 8015ec6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015eca:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8015ece:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8015fc4 <expm1f+0x210>
 8015ed2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8015ed6:	e7ab      	b.n	8015e30 <expm1f+0x7c>
 8015ed8:	f1b3 5f4c 	cmp.w	r3, #855638016	; 0x33000000
 8015edc:	d208      	bcs.n	8015ef0 <expm1f+0x13c>
 8015ede:	eddf 7a41 	vldr	s15, [pc, #260]	; 8015fe4 <expm1f+0x230>
 8015ee2:	ee70 7a27 	vadd.f32	s15, s0, s15
 8015ee6:	ee77 7ae7 	vsub.f32	s15, s15, s15
 8015eea:	ee30 0a67 	vsub.f32	s0, s0, s15
 8015eee:	4770      	bx	lr
 8015ef0:	2300      	movs	r3, #0
 8015ef2:	e7a3      	b.n	8015e3c <expm1f+0x88>
 8015ef4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8015ef8:	1c5a      	adds	r2, r3, #1
 8015efa:	eed6 7a80 	vfnms.f32	s15, s13, s0
 8015efe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015f02:	d106      	bne.n	8015f12 <expm1f+0x15e>
 8015f04:	ee70 7a67 	vsub.f32	s15, s0, s15
 8015f08:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 8015f0c:	eea7 0aa5 	vfma.f32	s0, s15, s11
 8015f10:	4770      	bx	lr
 8015f12:	2b01      	cmp	r3, #1
 8015f14:	d118      	bne.n	8015f48 <expm1f+0x194>
 8015f16:	eebd 7a00 	vmov.f32	s14, #208	; 0xbe800000 -0.250
 8015f1a:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8015f1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f22:	bf5b      	ittet	pl
 8015f24:	ee70 7a67 	vsubpl.f32	s15, s0, s15
 8015f28:	eeb0 7a00 	vmovpl.f32	s14, #0	; 0x40000000  2.0
 8015f2c:	ee30 0a25 	vaddmi.f32	s0, s0, s11
 8015f30:	eea7 6a87 	vfmapl.f32	s12, s15, s14
 8015f34:	bf43      	ittte	mi
 8015f36:	ee77 7ac0 	vsubmi.f32	s15, s15, s0
 8015f3a:	eeb8 0a00 	vmovmi.f32	s0, #128	; 0xc0000000 -2.0
 8015f3e:	ee27 0a80 	vmulmi.f32	s0, s15, s0
 8015f42:	eeb0 0a46 	vmovpl.f32	s0, s12
 8015f46:	4770      	bx	lr
 8015f48:	1c5a      	adds	r2, r3, #1
 8015f4a:	2a39      	cmp	r2, #57	; 0x39
 8015f4c:	ea4f 51c3 	mov.w	r1, r3, lsl #23
 8015f50:	d90b      	bls.n	8015f6a <expm1f+0x1b6>
 8015f52:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8015f56:	ee36 0a40 	vsub.f32	s0, s12, s0
 8015f5a:	ee10 3a10 	vmov	r3, s0
 8015f5e:	440b      	add	r3, r1
 8015f60:	ee00 3a10 	vmov	s0, r3
 8015f64:	ee30 0a46 	vsub.f32	s0, s0, s12
 8015f68:	4770      	bx	lr
 8015f6a:	2b16      	cmp	r3, #22
 8015f6c:	dc11      	bgt.n	8015f92 <expm1f+0x1de>
 8015f6e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8015f72:	fa42 f303 	asr.w	r3, r2, r3
 8015f76:	f1c3 537e 	rsb	r3, r3, #1065353216	; 0x3f800000
 8015f7a:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8015f7e:	ee07 3a90 	vmov	s15, r3
 8015f82:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8015f86:	ee10 3a10 	vmov	r3, s0
 8015f8a:	440b      	add	r3, r1
 8015f8c:	ee00 3a10 	vmov	s0, r3
 8015f90:	4770      	bx	lr
 8015f92:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8015f96:	05db      	lsls	r3, r3, #23
 8015f98:	ee07 3a10 	vmov	s14, r3
 8015f9c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8015fa0:	ee70 7a67 	vsub.f32	s15, s0, s15
 8015fa4:	ee37 0a86 	vadd.f32	s0, s15, s12
 8015fa8:	e7ed      	b.n	8015f86 <expm1f+0x1d2>
 8015faa:	bf00      	nop
 8015fac:	4195b843 	.word	0x4195b843
 8015fb0:	42b17217 	.word	0x42b17217
 8015fb4:	0da24260 	.word	0x0da24260
 8015fb8:	3eb17218 	.word	0x3eb17218
 8015fbc:	3f851591 	.word	0x3f851591
 8015fc0:	3f317180 	.word	0x3f317180
 8015fc4:	3717f7d1 	.word	0x3717f7d1
 8015fc8:	b717f7d1 	.word	0xb717f7d1
 8015fcc:	b457edbb 	.word	0xb457edbb
 8015fd0:	36867e54 	.word	0x36867e54
 8015fd4:	bd088889 	.word	0xbd088889
 8015fd8:	b8a670cd 	.word	0xb8a670cd
 8015fdc:	3ad00d01 	.word	0x3ad00d01
 8015fe0:	3fb8aa3b 	.word	0x3fb8aa3b
 8015fe4:	7149f2ca 	.word	0x7149f2ca

08015fe8 <fabsf>:
 8015fe8:	ee10 3a10 	vmov	r3, s0
 8015fec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015ff0:	ee00 3a10 	vmov	s0, r3
 8015ff4:	4770      	bx	lr
	...

08015ff8 <_close>:
 8015ff8:	4b02      	ldr	r3, [pc, #8]	; (8016004 <_close+0xc>)
 8015ffa:	2258      	movs	r2, #88	; 0x58
 8015ffc:	601a      	str	r2, [r3, #0]
 8015ffe:	f04f 30ff 	mov.w	r0, #4294967295
 8016002:	4770      	bx	lr
 8016004:	24002894 	.word	0x24002894

08016008 <_fstat>:
 8016008:	4b02      	ldr	r3, [pc, #8]	; (8016014 <_fstat+0xc>)
 801600a:	2258      	movs	r2, #88	; 0x58
 801600c:	601a      	str	r2, [r3, #0]
 801600e:	f04f 30ff 	mov.w	r0, #4294967295
 8016012:	4770      	bx	lr
 8016014:	24002894 	.word	0x24002894

08016018 <_getpid>:
 8016018:	4b02      	ldr	r3, [pc, #8]	; (8016024 <_getpid+0xc>)
 801601a:	2258      	movs	r2, #88	; 0x58
 801601c:	601a      	str	r2, [r3, #0]
 801601e:	f04f 30ff 	mov.w	r0, #4294967295
 8016022:	4770      	bx	lr
 8016024:	24002894 	.word	0x24002894

08016028 <_isatty>:
 8016028:	4b02      	ldr	r3, [pc, #8]	; (8016034 <_isatty+0xc>)
 801602a:	2258      	movs	r2, #88	; 0x58
 801602c:	601a      	str	r2, [r3, #0]
 801602e:	2000      	movs	r0, #0
 8016030:	4770      	bx	lr
 8016032:	bf00      	nop
 8016034:	24002894 	.word	0x24002894

08016038 <_kill>:
 8016038:	4b02      	ldr	r3, [pc, #8]	; (8016044 <_kill+0xc>)
 801603a:	2258      	movs	r2, #88	; 0x58
 801603c:	601a      	str	r2, [r3, #0]
 801603e:	f04f 30ff 	mov.w	r0, #4294967295
 8016042:	4770      	bx	lr
 8016044:	24002894 	.word	0x24002894

08016048 <_lseek>:
 8016048:	4b02      	ldr	r3, [pc, #8]	; (8016054 <_lseek+0xc>)
 801604a:	2258      	movs	r2, #88	; 0x58
 801604c:	601a      	str	r2, [r3, #0]
 801604e:	f04f 30ff 	mov.w	r0, #4294967295
 8016052:	4770      	bx	lr
 8016054:	24002894 	.word	0x24002894

08016058 <_read>:
 8016058:	4b02      	ldr	r3, [pc, #8]	; (8016064 <_read+0xc>)
 801605a:	2258      	movs	r2, #88	; 0x58
 801605c:	601a      	str	r2, [r3, #0]
 801605e:	f04f 30ff 	mov.w	r0, #4294967295
 8016062:	4770      	bx	lr
 8016064:	24002894 	.word	0x24002894

08016068 <_exit>:
 8016068:	e7fe      	b.n	8016068 <_exit>
	...

0801606c <_init>:
 801606c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801606e:	bf00      	nop
 8016070:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016072:	bc08      	pop	{r3}
 8016074:	469e      	mov	lr, r3
 8016076:	4770      	bx	lr

08016078 <_fini>:
 8016078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801607a:	bf00      	nop
 801607c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801607e:	bc08      	pop	{r3}
 8016080:	469e      	mov	lr, r3
 8016082:	4770      	bx	lr
