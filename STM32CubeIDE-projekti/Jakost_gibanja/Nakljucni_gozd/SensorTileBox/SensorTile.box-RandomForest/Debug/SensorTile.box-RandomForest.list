
SensorTile.box-RandomForest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000137f0  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007b0  080139c0  080139c0  000239c0  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014170  08014170  00030944  2**0
                  CONTENTS
  4 .ARM          00000000  08014170  08014170  00030944  2**0
                  CONTENTS
  5 .preinit_array 00000000  08014170  08014170  00030944  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014170  08014170  00024170  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014174  08014174  00024174  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000944  20000000  08014178  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000023d0  20000960  08014abc  00030960  2**5
                  ALLOC
 10 ._user_heap_stack 00001000  20002d30  08014abc  00032d30  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030944  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002e25f  00000000  00000000  00030974  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000062c3  00000000  00000000  0005ebd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002678  00000000  00000000  00064e98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002388  00000000  00000000  00067510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003d4f9  00000000  00000000  00069898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00037c96  00000000  00000000  000a6d91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00158f12  00000000  00000000  000dea27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00237939  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000ae60  00000000  00000000  0023798c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         0000009c  00000000  00000000  002427ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000014d  00000000  00000000  00242888  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000960 	.word	0x20000960
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08013998 	.word	0x08013998

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000964 	.word	0x20000964
 80001fc:	08013998 	.word	0x08013998

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2f>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b90:	bf24      	itt	cs
 8000b92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b9a:	d90d      	bls.n	8000bb8 <__aeabi_d2f+0x30>
 8000b9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ba0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ba4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ba8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bb0:	bf08      	it	eq
 8000bb2:	f020 0001 	biceq.w	r0, r0, #1
 8000bb6:	4770      	bx	lr
 8000bb8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bbc:	d121      	bne.n	8000c02 <__aeabi_d2f+0x7a>
 8000bbe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bc2:	bfbc      	itt	lt
 8000bc4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	4770      	bxlt	lr
 8000bca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bce:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bd2:	f1c2 0218 	rsb	r2, r2, #24
 8000bd6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bda:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bde:	fa20 f002 	lsr.w	r0, r0, r2
 8000be2:	bf18      	it	ne
 8000be4:	f040 0001 	orrne.w	r0, r0, #1
 8000be8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bf0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bf4:	ea40 000c 	orr.w	r0, r0, ip
 8000bf8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bfc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c00:	e7cc      	b.n	8000b9c <__aeabi_d2f+0x14>
 8000c02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c06:	d107      	bne.n	8000c18 <__aeabi_d2f+0x90>
 8000c08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c0c:	bf1e      	ittt	ne
 8000c0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c16:	4770      	bxne	lr
 8000c18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop

08000c28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c2c:	f001 faa7 	bl	800217e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c30:	f000 f828 	bl	8000c84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c34:	f000 fc0e 	bl	8001454 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c38:	f000 fbe2 	bl	8001400 <MX_DMA_Init>
  MX_ADC1_Init();
 8000c3c:	f000 f880 	bl	8000d40 <MX_ADC1_Init>
  MX_DFSDM1_Init();
 8000c40:	f000 f908 	bl	8000e54 <MX_DFSDM1_Init>
  MX_I2C1_Init();
 8000c44:	f000 f96a 	bl	8000f1c <MX_I2C1_Init>
  MX_I2C3_Init();
 8000c48:	f000 f9a8 	bl	8000f9c <MX_I2C3_Init>
  MX_RTC_Init();
 8000c4c:	f000 f9e6 	bl	800101c <MX_RTC_Init>
  MX_SDMMC1_SD_Init();
 8000c50:	f000 fa40 	bl	80010d4 <MX_SDMMC1_SD_Init>
  MX_SPI1_Init();
 8000c54:	f000 fa60 	bl	8001118 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000c58:	f000 fa9c 	bl	8001194 <MX_SPI2_Init>
  MX_SPI3_Init();
 8000c5c:	f000 fad8 	bl	8001210 <MX_SPI3_Init>
  MX_TIM2_Init();
 8000c60:	f000 fb14 	bl	800128c <MX_TIM2_Init>
  MX_TIM6_Init();
 8000c64:	f000 fb60 	bl	8001328 <MX_TIM6_Init>
  MX_TIM7_Init();
 8000c68:	f000 fb94 	bl	8001394 <MX_TIM7_Init>
  MX_FATFS_Init();
 8000c6c:	f00c fad8 	bl	800d220 <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 8000c70:	f00e fa34 	bl	800f0dc <MX_USB_DEVICE_Init>
  MX_CRC_Init();
 8000c74:	f000 f8cc 	bl	8000e10 <MX_CRC_Init>
  MX_X_CUBE_AI_Init();
 8000c78:	f00f fb68 	bl	801034c <MX_X_CUBE_AI_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

  MX_X_CUBE_AI_Process();
 8000c7c:	f00f fbcc 	bl	8010418 <MX_X_CUBE_AI_Process>
 8000c80:	e7fc      	b.n	8000c7c <main+0x54>
	...

08000c84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b096      	sub	sp, #88	; 0x58
 8000c88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c8a:	f107 0314 	add.w	r3, r7, #20
 8000c8e:	2244      	movs	r2, #68	; 0x44
 8000c90:	2100      	movs	r1, #0
 8000c92:	4618      	mov	r0, r3
 8000c94:	f011 fb86 	bl	80123a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c98:	463b      	mov	r3, r7
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	601a      	str	r2, [r3, #0]
 8000c9e:	605a      	str	r2, [r3, #4]
 8000ca0:	609a      	str	r2, [r3, #8]
 8000ca2:	60da      	str	r2, [r3, #12]
 8000ca4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000ca6:	2000      	movs	r0, #0
 8000ca8:	f004 fca4 	bl	80055f4 <HAL_PWREx_ControlVoltageScaling>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000cb2:	f000 fd3b 	bl	800172c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000cb6:	f004 fc6d 	bl	8005594 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000cba:	4b20      	ldr	r3, [pc, #128]	; (8000d3c <SystemClock_Config+0xb8>)
 8000cbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000cc0:	4a1e      	ldr	r2, [pc, #120]	; (8000d3c <SystemClock_Config+0xb8>)
 8000cc2:	f023 0318 	bic.w	r3, r3, #24
 8000cc6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE
 8000cca:	2325      	movs	r3, #37	; 0x25
 8000ccc:	617b      	str	r3, [r7, #20]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000cce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cd2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000cd8:	2301      	movs	r3, #1
 8000cda:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cdc:	2302      	movs	r3, #2
 8000cde:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ce0:	2303      	movs	r3, #3
 8000ce2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ce4:	2304      	movs	r3, #4
 8000ce6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000ce8:	233c      	movs	r3, #60	; 0x3c
 8000cea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV5;
 8000cec:	2305      	movs	r3, #5
 8000cee:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000cf0:	2302      	movs	r3, #2
 8000cf2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000cf4:	2302      	movs	r3, #2
 8000cf6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cf8:	f107 0314 	add.w	r3, r7, #20
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f004 fd3d 	bl	800577c <HAL_RCC_OscConfig>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000d08:	f000 fd10 	bl	800172c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d0c:	230f      	movs	r3, #15
 8000d0e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d10:	2303      	movs	r3, #3
 8000d12:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d14:	2300      	movs	r3, #0
 8000d16:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000d20:	463b      	mov	r3, r7
 8000d22:	2105      	movs	r1, #5
 8000d24:	4618      	mov	r0, r3
 8000d26:	f005 f943 	bl	8005fb0 <HAL_RCC_ClockConfig>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000d30:	f000 fcfc 	bl	800172c <Error_Handler>
  }
}
 8000d34:	bf00      	nop
 8000d36:	3758      	adds	r7, #88	; 0x58
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	40021000 	.word	0x40021000

08000d40 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b086      	sub	sp, #24
 8000d44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d46:	463b      	mov	r3, r7
 8000d48:	2200      	movs	r2, #0
 8000d4a:	601a      	str	r2, [r3, #0]
 8000d4c:	605a      	str	r2, [r3, #4]
 8000d4e:	609a      	str	r2, [r3, #8]
 8000d50:	60da      	str	r2, [r3, #12]
 8000d52:	611a      	str	r2, [r3, #16]
 8000d54:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000d56:	4b2b      	ldr	r3, [pc, #172]	; (8000e04 <MX_ADC1_Init+0xc4>)
 8000d58:	4a2b      	ldr	r2, [pc, #172]	; (8000e08 <MX_ADC1_Init+0xc8>)
 8000d5a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000d5c:	4b29      	ldr	r3, [pc, #164]	; (8000e04 <MX_ADC1_Init+0xc4>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d62:	4b28      	ldr	r3, [pc, #160]	; (8000e04 <MX_ADC1_Init+0xc4>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d68:	4b26      	ldr	r3, [pc, #152]	; (8000e04 <MX_ADC1_Init+0xc4>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d6e:	4b25      	ldr	r3, [pc, #148]	; (8000e04 <MX_ADC1_Init+0xc4>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d74:	4b23      	ldr	r3, [pc, #140]	; (8000e04 <MX_ADC1_Init+0xc4>)
 8000d76:	2204      	movs	r2, #4
 8000d78:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000d7a:	4b22      	ldr	r3, [pc, #136]	; (8000e04 <MX_ADC1_Init+0xc4>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000d80:	4b20      	ldr	r3, [pc, #128]	; (8000e04 <MX_ADC1_Init+0xc4>)
 8000d82:	2201      	movs	r2, #1
 8000d84:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000d86:	4b1f      	ldr	r3, [pc, #124]	; (8000e04 <MX_ADC1_Init+0xc4>)
 8000d88:	2201      	movs	r2, #1
 8000d8a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d8c:	4b1d      	ldr	r3, [pc, #116]	; (8000e04 <MX_ADC1_Init+0xc4>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d94:	4b1b      	ldr	r3, [pc, #108]	; (8000e04 <MX_ADC1_Init+0xc4>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d9a:	4b1a      	ldr	r3, [pc, #104]	; (8000e04 <MX_ADC1_Init+0xc4>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000da0:	4b18      	ldr	r3, [pc, #96]	; (8000e04 <MX_ADC1_Init+0xc4>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000da8:	4b16      	ldr	r3, [pc, #88]	; (8000e04 <MX_ADC1_Init+0xc4>)
 8000daa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000dae:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000db0:	4b14      	ldr	r3, [pc, #80]	; (8000e04 <MX_ADC1_Init+0xc4>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.DFSDMConfig = ADC_DFSDM_MODE_ENABLE;
 8000db8:	4b12      	ldr	r3, [pc, #72]	; (8000e04 <MX_ADC1_Init+0xc4>)
 8000dba:	2204      	movs	r2, #4
 8000dbc:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000dbe:	4811      	ldr	r0, [pc, #68]	; (8000e04 <MX_ADC1_Init+0xc4>)
 8000dc0:	f001 fc16 	bl	80025f0 <HAL_ADC_Init>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000dca:	f000 fcaf 	bl	800172c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000dce:	4b0f      	ldr	r3, [pc, #60]	; (8000e0c <MX_ADC1_Init+0xcc>)
 8000dd0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000dd2:	2306      	movs	r3, #6
 8000dd4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 8000dd6:	2302      	movs	r3, #2
 8000dd8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000dda:	237f      	movs	r3, #127	; 0x7f
 8000ddc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000dde:	2304      	movs	r3, #4
 8000de0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000de2:	2300      	movs	r3, #0
 8000de4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000de6:	463b      	mov	r3, r7
 8000de8:	4619      	mov	r1, r3
 8000dea:	4806      	ldr	r0, [pc, #24]	; (8000e04 <MX_ADC1_Init+0xc4>)
 8000dec:	f001 fd4c 	bl	8002888 <HAL_ADC_ConfigChannel>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <MX_ADC1_Init+0xba>
  {
    Error_Handler();
 8000df6:	f000 fc99 	bl	800172c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000dfa:	bf00      	nop
 8000dfc:	3718      	adds	r7, #24
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	2000097c 	.word	0x2000097c
 8000e08:	50040000 	.word	0x50040000
 8000e0c:	21800100 	.word	0x21800100

08000e10 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000e14:	4b0d      	ldr	r3, [pc, #52]	; (8000e4c <MX_CRC_Init+0x3c>)
 8000e16:	4a0e      	ldr	r2, [pc, #56]	; (8000e50 <MX_CRC_Init+0x40>)
 8000e18:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000e1a:	4b0c      	ldr	r3, [pc, #48]	; (8000e4c <MX_CRC_Init+0x3c>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000e20:	4b0a      	ldr	r3, [pc, #40]	; (8000e4c <MX_CRC_Init+0x3c>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000e26:	4b09      	ldr	r3, [pc, #36]	; (8000e4c <MX_CRC_Init+0x3c>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000e2c:	4b07      	ldr	r3, [pc, #28]	; (8000e4c <MX_CRC_Init+0x3c>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000e32:	4b06      	ldr	r3, [pc, #24]	; (8000e4c <MX_CRC_Init+0x3c>)
 8000e34:	2201      	movs	r2, #1
 8000e36:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000e38:	4804      	ldr	r0, [pc, #16]	; (8000e4c <MX_CRC_Init+0x3c>)
 8000e3a:	f002 fa33 	bl	80032a4 <HAL_CRC_Init>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000e44:	f000 fc72 	bl	800172c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000e48:	bf00      	nop
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	200009e4 	.word	0x200009e4
 8000e50:	40023000 	.word	0x40023000

08000e54 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 8000e58:	4b2c      	ldr	r3, [pc, #176]	; (8000f0c <MX_DFSDM1_Init+0xb8>)
 8000e5a:	4a2d      	ldr	r2, [pc, #180]	; (8000f10 <MX_DFSDM1_Init+0xbc>)
 8000e5c:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 8000e5e:	4b2b      	ldr	r3, [pc, #172]	; (8000f0c <MX_DFSDM1_Init+0xb8>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 8000e64:	4b29      	ldr	r3, [pc, #164]	; (8000f0c <MX_DFSDM1_Init+0xb8>)
 8000e66:	2201      	movs	r2, #1
 8000e68:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 8000e6a:	4b28      	ldr	r3, [pc, #160]	; (8000f0c <MX_DFSDM1_Init+0xb8>)
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC2_ORDER;
 8000e70:	4b26      	ldr	r3, [pc, #152]	; (8000f0c <MX_DFSDM1_Init+0xb8>)
 8000e72:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e76:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 192;
 8000e78:	4b24      	ldr	r3, [pc, #144]	; (8000f0c <MX_DFSDM1_Init+0xb8>)
 8000e7a:	22c0      	movs	r2, #192	; 0xc0
 8000e7c:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 8000e7e:	4b23      	ldr	r3, [pc, #140]	; (8000f0c <MX_DFSDM1_Init+0xb8>)
 8000e80:	2201      	movs	r2, #1
 8000e82:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter0) != HAL_OK)
 8000e84:	4821      	ldr	r0, [pc, #132]	; (8000f0c <MX_DFSDM1_Init+0xb8>)
 8000e86:	f002 fbb7 	bl	80035f8 <HAL_DFSDM_FilterInit>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <MX_DFSDM1_Init+0x40>
  {
    Error_Handler();
 8000e90:	f000 fc4c 	bl	800172c <Error_Handler>
  }
  hdfsdm1_channel0.Instance = DFSDM1_Channel0;
 8000e94:	4b1f      	ldr	r3, [pc, #124]	; (8000f14 <MX_DFSDM1_Init+0xc0>)
 8000e96:	4a20      	ldr	r2, [pc, #128]	; (8000f18 <MX_DFSDM1_Init+0xc4>)
 8000e98:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel0.Init.OutputClock.Activation = DISABLE;
 8000e9a:	4b1e      	ldr	r3, [pc, #120]	; (8000f14 <MX_DFSDM1_Init+0xc0>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel0.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000ea0:	4b1c      	ldr	r3, [pc, #112]	; (8000f14 <MX_DFSDM1_Init+0xc0>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel0.Init.OutputClock.Divider = 2;
 8000ea6:	4b1b      	ldr	r3, [pc, #108]	; (8000f14 <MX_DFSDM1_Init+0xc0>)
 8000ea8:	2202      	movs	r2, #2
 8000eaa:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel0.Init.Input.Multiplexer = DFSDM_CHANNEL_ADC_OUTPUT;
 8000eac:	4b19      	ldr	r3, [pc, #100]	; (8000f14 <MX_DFSDM1_Init+0xc0>)
 8000eae:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000eb2:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel0.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000eb4:	4b17      	ldr	r3, [pc, #92]	; (8000f14 <MX_DFSDM1_Init+0xc0>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel0.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000eba:	4b16      	ldr	r3, [pc, #88]	; (8000f14 <MX_DFSDM1_Init+0xc0>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel0.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000ec0:	4b14      	ldr	r3, [pc, #80]	; (8000f14 <MX_DFSDM1_Init+0xc0>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel0.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 8000ec6:	4b13      	ldr	r3, [pc, #76]	; (8000f14 <MX_DFSDM1_Init+0xc0>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel0.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000ecc:	4b11      	ldr	r3, [pc, #68]	; (8000f14 <MX_DFSDM1_Init+0xc0>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel0.Init.Awd.Oversampling = 1;
 8000ed2:	4b10      	ldr	r3, [pc, #64]	; (8000f14 <MX_DFSDM1_Init+0xc0>)
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel0.Init.Offset = 0x00;
 8000ed8:	4b0e      	ldr	r3, [pc, #56]	; (8000f14 <MX_DFSDM1_Init+0xc0>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel0.Init.RightBitShift = 7;
 8000ede:	4b0d      	ldr	r3, [pc, #52]	; (8000f14 <MX_DFSDM1_Init+0xc0>)
 8000ee0:	2207      	movs	r2, #7
 8000ee2:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel0) != HAL_OK)
 8000ee4:	480b      	ldr	r0, [pc, #44]	; (8000f14 <MX_DFSDM1_Init+0xc0>)
 8000ee6:	f002 fac7 	bl	8003478 <HAL_DFSDM_ChannelInit>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <MX_DFSDM1_Init+0xa0>
  {
    Error_Handler();
 8000ef0:	f000 fc1c 	bl	800172c <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_0, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	2101      	movs	r1, #1
 8000ef8:	4804      	ldr	r0, [pc, #16]	; (8000f0c <MX_DFSDM1_Init+0xb8>)
 8000efa:	f002 fc57 	bl	80037ac <HAL_DFSDM_FilterConfigRegChannel>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <MX_DFSDM1_Init+0xb4>
  {
    Error_Handler();
 8000f04:	f000 fc12 	bl	800172c <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000f08:	bf00      	nop
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	20000a08 	.word	0x20000a08
 8000f10:	40016100 	.word	0x40016100
 8000f14:	20000a5c 	.word	0x20000a5c
 8000f18:	40016000 	.word	0x40016000

08000f1c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f20:	4b1b      	ldr	r3, [pc, #108]	; (8000f90 <MX_I2C1_Init+0x74>)
 8000f22:	4a1c      	ldr	r2, [pc, #112]	; (8000f94 <MX_I2C1_Init+0x78>)
 8000f24:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00B03FDB;
 8000f26:	4b1a      	ldr	r3, [pc, #104]	; (8000f90 <MX_I2C1_Init+0x74>)
 8000f28:	4a1b      	ldr	r2, [pc, #108]	; (8000f98 <MX_I2C1_Init+0x7c>)
 8000f2a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000f2c:	4b18      	ldr	r3, [pc, #96]	; (8000f90 <MX_I2C1_Init+0x74>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f32:	4b17      	ldr	r3, [pc, #92]	; (8000f90 <MX_I2C1_Init+0x74>)
 8000f34:	2201      	movs	r2, #1
 8000f36:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f38:	4b15      	ldr	r3, [pc, #84]	; (8000f90 <MX_I2C1_Init+0x74>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000f3e:	4b14      	ldr	r3, [pc, #80]	; (8000f90 <MX_I2C1_Init+0x74>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f44:	4b12      	ldr	r3, [pc, #72]	; (8000f90 <MX_I2C1_Init+0x74>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f4a:	4b11      	ldr	r3, [pc, #68]	; (8000f90 <MX_I2C1_Init+0x74>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f50:	4b0f      	ldr	r3, [pc, #60]	; (8000f90 <MX_I2C1_Init+0x74>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f56:	480e      	ldr	r0, [pc, #56]	; (8000f90 <MX_I2C1_Init+0x74>)
 8000f58:	f003 f836 	bl	8003fc8 <HAL_I2C_Init>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000f62:	f000 fbe3 	bl	800172c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f66:	2100      	movs	r1, #0
 8000f68:	4809      	ldr	r0, [pc, #36]	; (8000f90 <MX_I2C1_Init+0x74>)
 8000f6a:	f003 f8bc 	bl	80040e6 <HAL_I2CEx_ConfigAnalogFilter>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000f74:	f000 fbda 	bl	800172c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000f78:	2100      	movs	r1, #0
 8000f7a:	4805      	ldr	r0, [pc, #20]	; (8000f90 <MX_I2C1_Init+0x74>)
 8000f7c:	f003 f8fe 	bl	800417c <HAL_I2CEx_ConfigDigitalFilter>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000f86:	f000 fbd1 	bl	800172c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f8a:	bf00      	nop
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	20000af4 	.word	0x20000af4
 8000f94:	40005400 	.word	0x40005400
 8000f98:	00b03fdb 	.word	0x00b03fdb

08000f9c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000fa0:	4b1b      	ldr	r3, [pc, #108]	; (8001010 <MX_I2C3_Init+0x74>)
 8000fa2:	4a1c      	ldr	r2, [pc, #112]	; (8001014 <MX_I2C3_Init+0x78>)
 8000fa4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00B03FDB;
 8000fa6:	4b1a      	ldr	r3, [pc, #104]	; (8001010 <MX_I2C3_Init+0x74>)
 8000fa8:	4a1b      	ldr	r2, [pc, #108]	; (8001018 <MX_I2C3_Init+0x7c>)
 8000faa:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000fac:	4b18      	ldr	r3, [pc, #96]	; (8001010 <MX_I2C3_Init+0x74>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fb2:	4b17      	ldr	r3, [pc, #92]	; (8001010 <MX_I2C3_Init+0x74>)
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fb8:	4b15      	ldr	r3, [pc, #84]	; (8001010 <MX_I2C3_Init+0x74>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000fbe:	4b14      	ldr	r3, [pc, #80]	; (8001010 <MX_I2C3_Init+0x74>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000fc4:	4b12      	ldr	r3, [pc, #72]	; (8001010 <MX_I2C3_Init+0x74>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fca:	4b11      	ldr	r3, [pc, #68]	; (8001010 <MX_I2C3_Init+0x74>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fd0:	4b0f      	ldr	r3, [pc, #60]	; (8001010 <MX_I2C3_Init+0x74>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000fd6:	480e      	ldr	r0, [pc, #56]	; (8001010 <MX_I2C3_Init+0x74>)
 8000fd8:	f002 fff6 	bl	8003fc8 <HAL_I2C_Init>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000fe2:	f000 fba3 	bl	800172c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	4809      	ldr	r0, [pc, #36]	; (8001010 <MX_I2C3_Init+0x74>)
 8000fea:	f003 f87c 	bl	80040e6 <HAL_I2CEx_ConfigAnalogFilter>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000ff4:	f000 fb9a 	bl	800172c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	4805      	ldr	r0, [pc, #20]	; (8001010 <MX_I2C3_Init+0x74>)
 8000ffc:	f003 f8be 	bl	800417c <HAL_I2CEx_ConfigDigitalFilter>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001006:	f000 fb91 	bl	800172c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800100a:	bf00      	nop
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	20000b48 	.word	0x20000b48
 8001014:	40005c00 	.word	0x40005c00
 8001018:	00b03fdb 	.word	0x00b03fdb

0800101c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b086      	sub	sp, #24
 8001020:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001022:	1d3b      	adds	r3, r7, #4
 8001024:	2200      	movs	r2, #0
 8001026:	601a      	str	r2, [r3, #0]
 8001028:	605a      	str	r2, [r3, #4]
 800102a:	609a      	str	r2, [r3, #8]
 800102c:	60da      	str	r2, [r3, #12]
 800102e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001030:	2300      	movs	r3, #0
 8001032:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001034:	4b25      	ldr	r3, [pc, #148]	; (80010cc <MX_RTC_Init+0xb0>)
 8001036:	4a26      	ldr	r2, [pc, #152]	; (80010d0 <MX_RTC_Init+0xb4>)
 8001038:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800103a:	4b24      	ldr	r3, [pc, #144]	; (80010cc <MX_RTC_Init+0xb0>)
 800103c:	2200      	movs	r2, #0
 800103e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001040:	4b22      	ldr	r3, [pc, #136]	; (80010cc <MX_RTC_Init+0xb0>)
 8001042:	227f      	movs	r2, #127	; 0x7f
 8001044:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001046:	4b21      	ldr	r3, [pc, #132]	; (80010cc <MX_RTC_Init+0xb0>)
 8001048:	22ff      	movs	r2, #255	; 0xff
 800104a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800104c:	4b1f      	ldr	r3, [pc, #124]	; (80010cc <MX_RTC_Init+0xb0>)
 800104e:	2200      	movs	r2, #0
 8001050:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001052:	4b1e      	ldr	r3, [pc, #120]	; (80010cc <MX_RTC_Init+0xb0>)
 8001054:	2200      	movs	r2, #0
 8001056:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001058:	4b1c      	ldr	r3, [pc, #112]	; (80010cc <MX_RTC_Init+0xb0>)
 800105a:	2200      	movs	r2, #0
 800105c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800105e:	4b1b      	ldr	r3, [pc, #108]	; (80010cc <MX_RTC_Init+0xb0>)
 8001060:	2200      	movs	r2, #0
 8001062:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001064:	4819      	ldr	r0, [pc, #100]	; (80010cc <MX_RTC_Init+0xb0>)
 8001066:	f007 f807 	bl	8008078 <HAL_RTC_Init>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8001070:	f000 fb5c 	bl	800172c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8001074:	2300      	movs	r3, #0
 8001076:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 8001078:	2300      	movs	r3, #0
 800107a:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 800107c:	2300      	movs	r3, #0
 800107e:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001080:	2300      	movs	r3, #0
 8001082:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001084:	2300      	movs	r3, #0
 8001086:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001088:	1d3b      	adds	r3, r7, #4
 800108a:	2200      	movs	r2, #0
 800108c:	4619      	mov	r1, r3
 800108e:	480f      	ldr	r0, [pc, #60]	; (80010cc <MX_RTC_Init+0xb0>)
 8001090:	f007 f86d 	bl	800816e <HAL_RTC_SetTime>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <MX_RTC_Init+0x82>
  {
    Error_Handler();
 800109a:	f000 fb47 	bl	800172c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 800109e:	2302      	movs	r3, #2
 80010a0:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_APRIL;
 80010a2:	2304      	movs	r3, #4
 80010a4:	707b      	strb	r3, [r7, #1]
  sDate.Date = 3;
 80010a6:	2303      	movs	r3, #3
 80010a8:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 20;
 80010aa:	2314      	movs	r3, #20
 80010ac:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80010ae:	463b      	mov	r3, r7
 80010b0:	2200      	movs	r2, #0
 80010b2:	4619      	mov	r1, r3
 80010b4:	4805      	ldr	r0, [pc, #20]	; (80010cc <MX_RTC_Init+0xb0>)
 80010b6:	f007 f8f7 	bl	80082a8 <HAL_RTC_SetDate>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 80010c0:	f000 fb34 	bl	800172c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80010c4:	bf00      	nop
 80010c6:	3718      	adds	r7, #24
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	20000b9c 	.word	0x20000b9c
 80010d0:	40002800 	.word	0x40002800

080010d4 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80010d8:	4b0d      	ldr	r3, [pc, #52]	; (8001110 <MX_SDMMC1_SD_Init+0x3c>)
 80010da:	4a0e      	ldr	r2, [pc, #56]	; (8001114 <MX_SDMMC1_SD_Init+0x40>)
 80010dc:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80010de:	4b0c      	ldr	r3, [pc, #48]	; (8001110 <MX_SDMMC1_SD_Init+0x3c>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80010e4:	4b0a      	ldr	r3, [pc, #40]	; (8001110 <MX_SDMMC1_SD_Init+0x3c>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 80010ea:	4b09      	ldr	r3, [pc, #36]	; (8001110 <MX_SDMMC1_SD_Init+0x3c>)
 80010ec:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010f0:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80010f2:	4b07      	ldr	r3, [pc, #28]	; (8001110 <MX_SDMMC1_SD_Init+0x3c>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 80010f8:	4b05      	ldr	r3, [pc, #20]	; (8001110 <MX_SDMMC1_SD_Init+0x3c>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	615a      	str	r2, [r3, #20]
  hsd1.Init.Transceiver = SDMMC_TRANSCEIVER_ENABLE;
 80010fe:	4b04      	ldr	r3, [pc, #16]	; (8001110 <MX_SDMMC1_SD_Init+0x3c>)
 8001100:	2201      	movs	r2, #1
 8001102:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8001104:	bf00      	nop
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	20000bc0 	.word	0x20000bc0
 8001114:	50062400 	.word	0x50062400

08001118 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800111c:	4b1b      	ldr	r3, [pc, #108]	; (800118c <MX_SPI1_Init+0x74>)
 800111e:	4a1c      	ldr	r2, [pc, #112]	; (8001190 <MX_SPI1_Init+0x78>)
 8001120:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001122:	4b1a      	ldr	r3, [pc, #104]	; (800118c <MX_SPI1_Init+0x74>)
 8001124:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001128:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800112a:	4b18      	ldr	r3, [pc, #96]	; (800118c <MX_SPI1_Init+0x74>)
 800112c:	2200      	movs	r2, #0
 800112e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001130:	4b16      	ldr	r3, [pc, #88]	; (800118c <MX_SPI1_Init+0x74>)
 8001132:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001136:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001138:	4b14      	ldr	r3, [pc, #80]	; (800118c <MX_SPI1_Init+0x74>)
 800113a:	2202      	movs	r2, #2
 800113c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800113e:	4b13      	ldr	r3, [pc, #76]	; (800118c <MX_SPI1_Init+0x74>)
 8001140:	2201      	movs	r2, #1
 8001142:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001144:	4b11      	ldr	r3, [pc, #68]	; (800118c <MX_SPI1_Init+0x74>)
 8001146:	f44f 7200 	mov.w	r2, #512	; 0x200
 800114a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800114c:	4b0f      	ldr	r3, [pc, #60]	; (800118c <MX_SPI1_Init+0x74>)
 800114e:	2218      	movs	r2, #24
 8001150:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001152:	4b0e      	ldr	r3, [pc, #56]	; (800118c <MX_SPI1_Init+0x74>)
 8001154:	2200      	movs	r2, #0
 8001156:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001158:	4b0c      	ldr	r3, [pc, #48]	; (800118c <MX_SPI1_Init+0x74>)
 800115a:	2200      	movs	r2, #0
 800115c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800115e:	4b0b      	ldr	r3, [pc, #44]	; (800118c <MX_SPI1_Init+0x74>)
 8001160:	2200      	movs	r2, #0
 8001162:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001164:	4b09      	ldr	r3, [pc, #36]	; (800118c <MX_SPI1_Init+0x74>)
 8001166:	2207      	movs	r2, #7
 8001168:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800116a:	4b08      	ldr	r3, [pc, #32]	; (800118c <MX_SPI1_Init+0x74>)
 800116c:	2200      	movs	r2, #0
 800116e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001170:	4b06      	ldr	r3, [pc, #24]	; (800118c <MX_SPI1_Init+0x74>)
 8001172:	2200      	movs	r2, #0
 8001174:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001176:	4805      	ldr	r0, [pc, #20]	; (800118c <MX_SPI1_Init+0x74>)
 8001178:	f008 fec9 	bl	8009f0e <HAL_SPI_Init>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001182:	f000 fad3 	bl	800172c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001186:	bf00      	nop
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	20000c40 	.word	0x20000c40
 8001190:	40013000 	.word	0x40013000

08001194 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001198:	4b1b      	ldr	r3, [pc, #108]	; (8001208 <MX_SPI2_Init+0x74>)
 800119a:	4a1c      	ldr	r2, [pc, #112]	; (800120c <MX_SPI2_Init+0x78>)
 800119c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800119e:	4b1a      	ldr	r3, [pc, #104]	; (8001208 <MX_SPI2_Init+0x74>)
 80011a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011a4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80011a6:	4b18      	ldr	r3, [pc, #96]	; (8001208 <MX_SPI2_Init+0x74>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80011ac:	4b16      	ldr	r3, [pc, #88]	; (8001208 <MX_SPI2_Init+0x74>)
 80011ae:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80011b2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011b4:	4b14      	ldr	r3, [pc, #80]	; (8001208 <MX_SPI2_Init+0x74>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80011ba:	4b13      	ldr	r3, [pc, #76]	; (8001208 <MX_SPI2_Init+0x74>)
 80011bc:	2201      	movs	r2, #1
 80011be:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80011c0:	4b11      	ldr	r3, [pc, #68]	; (8001208 <MX_SPI2_Init+0x74>)
 80011c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011c6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80011c8:	4b0f      	ldr	r3, [pc, #60]	; (8001208 <MX_SPI2_Init+0x74>)
 80011ca:	2230      	movs	r2, #48	; 0x30
 80011cc:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011ce:	4b0e      	ldr	r3, [pc, #56]	; (8001208 <MX_SPI2_Init+0x74>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80011d4:	4b0c      	ldr	r3, [pc, #48]	; (8001208 <MX_SPI2_Init+0x74>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011da:	4b0b      	ldr	r3, [pc, #44]	; (8001208 <MX_SPI2_Init+0x74>)
 80011dc:	2200      	movs	r2, #0
 80011de:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80011e0:	4b09      	ldr	r3, [pc, #36]	; (8001208 <MX_SPI2_Init+0x74>)
 80011e2:	2207      	movs	r2, #7
 80011e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80011e6:	4b08      	ldr	r3, [pc, #32]	; (8001208 <MX_SPI2_Init+0x74>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80011ec:	4b06      	ldr	r3, [pc, #24]	; (8001208 <MX_SPI2_Init+0x74>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80011f2:	4805      	ldr	r0, [pc, #20]	; (8001208 <MX_SPI2_Init+0x74>)
 80011f4:	f008 fe8b 	bl	8009f0e <HAL_SPI_Init>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80011fe:	f000 fa95 	bl	800172c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001202:	bf00      	nop
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	20000ca4 	.word	0x20000ca4
 800120c:	40003800 	.word	0x40003800

08001210 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001214:	4b1b      	ldr	r3, [pc, #108]	; (8001284 <MX_SPI3_Init+0x74>)
 8001216:	4a1c      	ldr	r2, [pc, #112]	; (8001288 <MX_SPI3_Init+0x78>)
 8001218:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800121a:	4b1a      	ldr	r3, [pc, #104]	; (8001284 <MX_SPI3_Init+0x74>)
 800121c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001220:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001222:	4b18      	ldr	r3, [pc, #96]	; (8001284 <MX_SPI3_Init+0x74>)
 8001224:	2200      	movs	r2, #0
 8001226:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001228:	4b16      	ldr	r3, [pc, #88]	; (8001284 <MX_SPI3_Init+0x74>)
 800122a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800122e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001230:	4b14      	ldr	r3, [pc, #80]	; (8001284 <MX_SPI3_Init+0x74>)
 8001232:	2202      	movs	r2, #2
 8001234:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001236:	4b13      	ldr	r3, [pc, #76]	; (8001284 <MX_SPI3_Init+0x74>)
 8001238:	2201      	movs	r2, #1
 800123a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800123c:	4b11      	ldr	r3, [pc, #68]	; (8001284 <MX_SPI3_Init+0x74>)
 800123e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001242:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001244:	4b0f      	ldr	r3, [pc, #60]	; (8001284 <MX_SPI3_Init+0x74>)
 8001246:	2218      	movs	r2, #24
 8001248:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800124a:	4b0e      	ldr	r3, [pc, #56]	; (8001284 <MX_SPI3_Init+0x74>)
 800124c:	2200      	movs	r2, #0
 800124e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001250:	4b0c      	ldr	r3, [pc, #48]	; (8001284 <MX_SPI3_Init+0x74>)
 8001252:	2200      	movs	r2, #0
 8001254:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001256:	4b0b      	ldr	r3, [pc, #44]	; (8001284 <MX_SPI3_Init+0x74>)
 8001258:	2200      	movs	r2, #0
 800125a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 800125c:	4b09      	ldr	r3, [pc, #36]	; (8001284 <MX_SPI3_Init+0x74>)
 800125e:	2207      	movs	r2, #7
 8001260:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001262:	4b08      	ldr	r3, [pc, #32]	; (8001284 <MX_SPI3_Init+0x74>)
 8001264:	2200      	movs	r2, #0
 8001266:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001268:	4b06      	ldr	r3, [pc, #24]	; (8001284 <MX_SPI3_Init+0x74>)
 800126a:	2200      	movs	r2, #0
 800126c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800126e:	4805      	ldr	r0, [pc, #20]	; (8001284 <MX_SPI3_Init+0x74>)
 8001270:	f008 fe4d 	bl	8009f0e <HAL_SPI_Init>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800127a:	f000 fa57 	bl	800172c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800127e:	bf00      	nop
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	20000d08 	.word	0x20000d08
 8001288:	40003c00 	.word	0x40003c00

0800128c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b088      	sub	sp, #32
 8001290:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001292:	f107 0310 	add.w	r3, r7, #16
 8001296:	2200      	movs	r2, #0
 8001298:	601a      	str	r2, [r3, #0]
 800129a:	605a      	str	r2, [r3, #4]
 800129c:	609a      	str	r2, [r3, #8]
 800129e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012a0:	1d3b      	adds	r3, r7, #4
 80012a2:	2200      	movs	r2, #0
 80012a4:	601a      	str	r2, [r3, #0]
 80012a6:	605a      	str	r2, [r3, #4]
 80012a8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012aa:	4b1e      	ldr	r3, [pc, #120]	; (8001324 <MX_TIM2_Init+0x98>)
 80012ac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012b0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 119;
 80012b2:	4b1c      	ldr	r3, [pc, #112]	; (8001324 <MX_TIM2_Init+0x98>)
 80012b4:	2277      	movs	r2, #119	; 0x77
 80012b6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012b8:	4b1a      	ldr	r3, [pc, #104]	; (8001324 <MX_TIM2_Init+0x98>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xFFFFFFFF;
 80012be:	4b19      	ldr	r3, [pc, #100]	; (8001324 <MX_TIM2_Init+0x98>)
 80012c0:	f04f 32ff 	mov.w	r2, #4294967295
 80012c4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012c6:	4b17      	ldr	r3, [pc, #92]	; (8001324 <MX_TIM2_Init+0x98>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012cc:	4b15      	ldr	r3, [pc, #84]	; (8001324 <MX_TIM2_Init+0x98>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80012d2:	4814      	ldr	r0, [pc, #80]	; (8001324 <MX_TIM2_Init+0x98>)
 80012d4:	f009 fa36 	bl	800a744 <HAL_TIM_Base_Init>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80012de:	f000 fa25 	bl	800172c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012e6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012e8:	f107 0310 	add.w	r3, r7, #16
 80012ec:	4619      	mov	r1, r3
 80012ee:	480d      	ldr	r0, [pc, #52]	; (8001324 <MX_TIM2_Init+0x98>)
 80012f0:	f009 fb9e 	bl	800aa30 <HAL_TIM_ConfigClockSource>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80012fa:	f000 fa17 	bl	800172c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012fe:	2300      	movs	r3, #0
 8001300:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001302:	2300      	movs	r3, #0
 8001304:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001306:	1d3b      	adds	r3, r7, #4
 8001308:	4619      	mov	r1, r3
 800130a:	4806      	ldr	r0, [pc, #24]	; (8001324 <MX_TIM2_Init+0x98>)
 800130c:	f009 fdc0 	bl	800ae90 <HAL_TIMEx_MasterConfigSynchronization>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001316:	f000 fa09 	bl	800172c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800131a:	bf00      	nop
 800131c:	3720      	adds	r7, #32
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	20000d6c 	.word	0x20000d6c

08001328 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b084      	sub	sp, #16
 800132c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800132e:	1d3b      	adds	r3, r7, #4
 8001330:	2200      	movs	r2, #0
 8001332:	601a      	str	r2, [r3, #0]
 8001334:	605a      	str	r2, [r3, #4]
 8001336:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001338:	4b14      	ldr	r3, [pc, #80]	; (800138c <MX_TIM6_Init+0x64>)
 800133a:	4a15      	ldr	r2, [pc, #84]	; (8001390 <MX_TIM6_Init+0x68>)
 800133c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 119;
 800133e:	4b13      	ldr	r3, [pc, #76]	; (800138c <MX_TIM6_Init+0x64>)
 8001340:	2277      	movs	r2, #119	; 0x77
 8001342:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001344:	4b11      	ldr	r3, [pc, #68]	; (800138c <MX_TIM6_Init+0x64>)
 8001346:	2200      	movs	r2, #0
 8001348:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000;
 800134a:	4b10      	ldr	r3, [pc, #64]	; (800138c <MX_TIM6_Init+0x64>)
 800134c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001350:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001352:	4b0e      	ldr	r3, [pc, #56]	; (800138c <MX_TIM6_Init+0x64>)
 8001354:	2200      	movs	r2, #0
 8001356:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001358:	480c      	ldr	r0, [pc, #48]	; (800138c <MX_TIM6_Init+0x64>)
 800135a:	f009 f9f3 	bl	800a744 <HAL_TIM_Base_Init>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001364:	f000 f9e2 	bl	800172c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001368:	2300      	movs	r3, #0
 800136a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800136c:	2300      	movs	r3, #0
 800136e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001370:	1d3b      	adds	r3, r7, #4
 8001372:	4619      	mov	r1, r3
 8001374:	4805      	ldr	r0, [pc, #20]	; (800138c <MX_TIM6_Init+0x64>)
 8001376:	f009 fd8b 	bl	800ae90 <HAL_TIMEx_MasterConfigSynchronization>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001380:	f000 f9d4 	bl	800172c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001384:	bf00      	nop
 8001386:	3710      	adds	r7, #16
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	20000db8 	.word	0x20000db8
 8001390:	40001000 	.word	0x40001000

08001394 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b084      	sub	sp, #16
 8001398:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800139a:	1d3b      	adds	r3, r7, #4
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]
 80013a0:	605a      	str	r2, [r3, #4]
 80013a2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80013a4:	4b14      	ldr	r3, [pc, #80]	; (80013f8 <MX_TIM7_Init+0x64>)
 80013a6:	4a15      	ldr	r2, [pc, #84]	; (80013fc <MX_TIM7_Init+0x68>)
 80013a8:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 119;
 80013aa:	4b13      	ldr	r3, [pc, #76]	; (80013f8 <MX_TIM7_Init+0x64>)
 80013ac:	2277      	movs	r2, #119	; 0x77
 80013ae:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013b0:	4b11      	ldr	r3, [pc, #68]	; (80013f8 <MX_TIM7_Init+0x64>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 0xFFFF;
 80013b6:	4b10      	ldr	r3, [pc, #64]	; (80013f8 <MX_TIM7_Init+0x64>)
 80013b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013bc:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013be:	4b0e      	ldr	r3, [pc, #56]	; (80013f8 <MX_TIM7_Init+0x64>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80013c4:	480c      	ldr	r0, [pc, #48]	; (80013f8 <MX_TIM7_Init+0x64>)
 80013c6:	f009 f9bd 	bl	800a744 <HAL_TIM_Base_Init>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80013d0:	f000 f9ac 	bl	800172c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013d4:	2300      	movs	r3, #0
 80013d6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013d8:	2300      	movs	r3, #0
 80013da:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80013dc:	1d3b      	adds	r3, r7, #4
 80013de:	4619      	mov	r1, r3
 80013e0:	4805      	ldr	r0, [pc, #20]	; (80013f8 <MX_TIM7_Init+0x64>)
 80013e2:	f009 fd55 	bl	800ae90 <HAL_TIMEx_MasterConfigSynchronization>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80013ec:	f000 f99e 	bl	800172c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80013f0:	bf00      	nop
 80013f2:	3710      	adds	r7, #16
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	20000e04 	.word	0x20000e04
 80013fc:	40001400 	.word	0x40001400

08001400 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001406:	4b12      	ldr	r3, [pc, #72]	; (8001450 <MX_DMA_Init+0x50>)
 8001408:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800140a:	4a11      	ldr	r2, [pc, #68]	; (8001450 <MX_DMA_Init+0x50>)
 800140c:	f043 0304 	orr.w	r3, r3, #4
 8001410:	6493      	str	r3, [r2, #72]	; 0x48
 8001412:	4b0f      	ldr	r3, [pc, #60]	; (8001450 <MX_DMA_Init+0x50>)
 8001414:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001416:	f003 0304 	and.w	r3, r3, #4
 800141a:	607b      	str	r3, [r7, #4]
 800141c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800141e:	4b0c      	ldr	r3, [pc, #48]	; (8001450 <MX_DMA_Init+0x50>)
 8001420:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001422:	4a0b      	ldr	r2, [pc, #44]	; (8001450 <MX_DMA_Init+0x50>)
 8001424:	f043 0301 	orr.w	r3, r3, #1
 8001428:	6493      	str	r3, [r2, #72]	; 0x48
 800142a:	4b09      	ldr	r3, [pc, #36]	; (8001450 <MX_DMA_Init+0x50>)
 800142c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800142e:	f003 0301 	and.w	r3, r3, #1
 8001432:	603b      	str	r3, [r7, #0]
 8001434:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001436:	2200      	movs	r2, #0
 8001438:	2100      	movs	r1, #0
 800143a:	200e      	movs	r0, #14
 800143c:	f001 fefb 	bl	8003236 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001440:	200e      	movs	r0, #14
 8001442:	f001 ff14 	bl	800326e <HAL_NVIC_EnableIRQ>

}
 8001446:	bf00      	nop
 8001448:	3708      	adds	r7, #8
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	40021000 	.word	0x40021000

08001454 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b08e      	sub	sp, #56	; 0x38
 8001458:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800145a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800145e:	2200      	movs	r2, #0
 8001460:	601a      	str	r2, [r3, #0]
 8001462:	605a      	str	r2, [r3, #4]
 8001464:	609a      	str	r2, [r3, #8]
 8001466:	60da      	str	r2, [r3, #12]
 8001468:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800146a:	4ba9      	ldr	r3, [pc, #676]	; (8001710 <MX_GPIO_Init+0x2bc>)
 800146c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800146e:	4aa8      	ldr	r2, [pc, #672]	; (8001710 <MX_GPIO_Init+0x2bc>)
 8001470:	f043 0302 	orr.w	r3, r3, #2
 8001474:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001476:	4ba6      	ldr	r3, [pc, #664]	; (8001710 <MX_GPIO_Init+0x2bc>)
 8001478:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800147a:	f003 0302 	and.w	r3, r3, #2
 800147e:	623b      	str	r3, [r7, #32]
 8001480:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001482:	4ba3      	ldr	r3, [pc, #652]	; (8001710 <MX_GPIO_Init+0x2bc>)
 8001484:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001486:	4aa2      	ldr	r2, [pc, #648]	; (8001710 <MX_GPIO_Init+0x2bc>)
 8001488:	f043 0308 	orr.w	r3, r3, #8
 800148c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800148e:	4ba0      	ldr	r3, [pc, #640]	; (8001710 <MX_GPIO_Init+0x2bc>)
 8001490:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001492:	f003 0308 	and.w	r3, r3, #8
 8001496:	61fb      	str	r3, [r7, #28]
 8001498:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800149a:	4b9d      	ldr	r3, [pc, #628]	; (8001710 <MX_GPIO_Init+0x2bc>)
 800149c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800149e:	4a9c      	ldr	r2, [pc, #624]	; (8001710 <MX_GPIO_Init+0x2bc>)
 80014a0:	f043 0304 	orr.w	r3, r3, #4
 80014a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014a6:	4b9a      	ldr	r3, [pc, #616]	; (8001710 <MX_GPIO_Init+0x2bc>)
 80014a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014aa:	f003 0304 	and.w	r3, r3, #4
 80014ae:	61bb      	str	r3, [r7, #24]
 80014b0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80014b2:	4b97      	ldr	r3, [pc, #604]	; (8001710 <MX_GPIO_Init+0x2bc>)
 80014b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014b6:	4a96      	ldr	r2, [pc, #600]	; (8001710 <MX_GPIO_Init+0x2bc>)
 80014b8:	f043 0310 	orr.w	r3, r3, #16
 80014bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014be:	4b94      	ldr	r3, [pc, #592]	; (8001710 <MX_GPIO_Init+0x2bc>)
 80014c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014c2:	f003 0310 	and.w	r3, r3, #16
 80014c6:	617b      	str	r3, [r7, #20]
 80014c8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ca:	4b91      	ldr	r3, [pc, #580]	; (8001710 <MX_GPIO_Init+0x2bc>)
 80014cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ce:	4a90      	ldr	r2, [pc, #576]	; (8001710 <MX_GPIO_Init+0x2bc>)
 80014d0:	f043 0301 	orr.w	r3, r3, #1
 80014d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014d6:	4b8e      	ldr	r3, [pc, #568]	; (8001710 <MX_GPIO_Init+0x2bc>)
 80014d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014da:	f003 0301 	and.w	r3, r3, #1
 80014de:	613b      	str	r3, [r7, #16]
 80014e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80014e2:	4b8b      	ldr	r3, [pc, #556]	; (8001710 <MX_GPIO_Init+0x2bc>)
 80014e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014e6:	4a8a      	ldr	r2, [pc, #552]	; (8001710 <MX_GPIO_Init+0x2bc>)
 80014e8:	f043 0320 	orr.w	r3, r3, #32
 80014ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014ee:	4b88      	ldr	r3, [pc, #544]	; (8001710 <MX_GPIO_Init+0x2bc>)
 80014f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014f2:	f003 0320 	and.w	r3, r3, #32
 80014f6:	60fb      	str	r3, [r7, #12]
 80014f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80014fa:	4b85      	ldr	r3, [pc, #532]	; (8001710 <MX_GPIO_Init+0x2bc>)
 80014fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014fe:	4a84      	ldr	r2, [pc, #528]	; (8001710 <MX_GPIO_Init+0x2bc>)
 8001500:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001504:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001506:	4b82      	ldr	r3, [pc, #520]	; (8001710 <MX_GPIO_Init+0x2bc>)
 8001508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800150a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800150e:	60bb      	str	r3, [r7, #8]
 8001510:	68bb      	ldr	r3, [r7, #8]
  HAL_PWREx_EnableVddIO2();
 8001512:	f004 f923 	bl	800575c <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001516:	4b7e      	ldr	r3, [pc, #504]	; (8001710 <MX_GPIO_Init+0x2bc>)
 8001518:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800151a:	4a7d      	ldr	r2, [pc, #500]	; (8001710 <MX_GPIO_Init+0x2bc>)
 800151c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001520:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001522:	4b7b      	ldr	r3, [pc, #492]	; (8001710 <MX_GPIO_Init+0x2bc>)
 8001524:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001526:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800152a:	607b      	str	r3, [r7, #4]
 800152c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_LIS2MDL_GPIO_Port, CS_LIS2MDL_Pin, GPIO_PIN_SET);
 800152e:	2201      	movs	r2, #1
 8001530:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001534:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001538:	f002 fd2e 	bl	8003f98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SD_SEL_Pin|SD_EN_Pin|CS_LIS2DW12_Pin|CS_IIS3DHHC_Pin
 800153c:	2201      	movs	r2, #1
 800153e:	f641 4130 	movw	r1, #7216	; 0x1c30
 8001542:	4874      	ldr	r0, [pc, #464]	; (8001714 <MX_GPIO_Init+0x2c0>)
 8001544:	f002 fd28 	bl	8003f98 <HAL_GPIO_WritePin>
                          |CS_LSM6DSOX_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, USER_LED_Pin|BB_MODE_Pin, GPIO_PIN_RESET);
 8001548:	2200      	movs	r2, #0
 800154a:	2105      	movs	r1, #5
 800154c:	4872      	ldr	r0, [pc, #456]	; (8001718 <MX_GPIO_Init+0x2c4>)
 800154e:	f002 fd23 	bl	8003f98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CHG_LED2_GPIO_Port, CHG_LED2_Pin, GPIO_PIN_SET);
 8001552:	2201      	movs	r2, #1
 8001554:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001558:	4870      	ldr	r0, [pc, #448]	; (800171c <MX_GPIO_Init+0x2c8>)
 800155a:	f002 fd1d 	bl	8003f98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LDO_2V7_EN_GPIO_Port, LDO_2V7_EN_Pin, GPIO_PIN_SET);
 800155e:	2201      	movs	r2, #1
 8001560:	2180      	movs	r1, #128	; 0x80
 8001562:	486d      	ldr	r0, [pc, #436]	; (8001718 <MX_GPIO_Init+0x2c4>)
 8001564:	f002 fd18 	bl	8003f98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SW_SEL_GPIO_Port, SW_SEL_Pin, GPIO_PIN_RESET);
 8001568:	2200      	movs	r2, #0
 800156a:	2110      	movs	r1, #16
 800156c:	486b      	ldr	r0, [pc, #428]	; (800171c <MX_GPIO_Init+0x2c8>)
 800156e:	f002 fd13 	bl	8003f98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CPU_LED_GPIO_Port, CPU_LED_Pin, GPIO_PIN_RESET);
 8001572:	2200      	movs	r2, #0
 8001574:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001578:	4869      	ldr	r0, [pc, #420]	; (8001720 <MX_GPIO_Init+0x2cc>)
 800157a:	f002 fd0d 	bl	8003f98 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : INT2_LSM6DSOX_Pin INT2_IIS3DHHC_Pin */
  GPIO_InitStruct.Pin = INT2_LSM6DSOX_Pin|INT2_IIS3DHHC_Pin;
 800157e:	2348      	movs	r3, #72	; 0x48
 8001580:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001582:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001586:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001588:	2300      	movs	r3, #0
 800158a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800158c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001590:	4619      	mov	r1, r3
 8001592:	4860      	ldr	r0, [pc, #384]	; (8001714 <MX_GPIO_Init+0x2c0>)
 8001594:	f002 fb56 	bl	8003c44 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART2_RX_Pin USART2_TX_Pin */
  GPIO_InitStruct.Pin = USART2_RX_Pin|USART2_TX_Pin;
 8001598:	2360      	movs	r3, #96	; 0x60
 800159a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159c:	2302      	movs	r3, #2
 800159e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a0:	2300      	movs	r3, #0
 80015a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015a4:	2303      	movs	r3, #3
 80015a6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015a8:	2307      	movs	r3, #7
 80015aa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015b0:	4619      	mov	r1, r3
 80015b2:	485c      	ldr	r0, [pc, #368]	; (8001724 <MX_GPIO_Init+0x2d0>)
 80015b4:	f002 fb46 	bl	8003c44 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_LIS2MDL_Pin */
  GPIO_InitStruct.Pin = CS_LIS2MDL_Pin;
 80015b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80015bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80015be:	2311      	movs	r3, #17
 80015c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c2:	2300      	movs	r3, #0
 80015c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015c6:	2303      	movs	r3, #3
 80015c8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(CS_LIS2MDL_GPIO_Port, &GPIO_InitStruct);
 80015ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015ce:	4619      	mov	r1, r3
 80015d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015d4:	f002 fb36 	bl	8003c44 <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_SEL_Pin SD_EN_Pin */
  GPIO_InitStruct.Pin = SD_SEL_Pin|SD_EN_Pin;
 80015d8:	2330      	movs	r3, #48	; 0x30
 80015da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015dc:	2301      	movs	r3, #1
 80015de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e0:	2300      	movs	r3, #0
 80015e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e4:	2300      	movs	r3, #0
 80015e6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015ec:	4619      	mov	r1, r3
 80015ee:	4849      	ldr	r0, [pc, #292]	; (8001714 <MX_GPIO_Init+0x2c0>)
 80015f0:	f002 fb28 	bl	8003c44 <HAL_GPIO_Init>

  /*Configure GPIO pins : USER_LED_Pin BB_MODE_Pin LDO_2V7_EN_Pin */
  GPIO_InitStruct.Pin = USER_LED_Pin|BB_MODE_Pin|LDO_2V7_EN_Pin;
 80015f4:	2385      	movs	r3, #133	; 0x85
 80015f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015f8:	2301      	movs	r3, #1
 80015fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fc:	2300      	movs	r3, #0
 80015fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001600:	2300      	movs	r3, #0
 8001602:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001604:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001608:	4619      	mov	r1, r3
 800160a:	4843      	ldr	r0, [pc, #268]	; (8001718 <MX_GPIO_Init+0x2c4>)
 800160c:	f002 fb1a 	bl	8003c44 <HAL_GPIO_Init>

  /*Configure GPIO pins : CHG_LED2_Pin SW_SEL_Pin */
  GPIO_InitStruct.Pin = CHG_LED2_Pin|SW_SEL_Pin;
 8001610:	f44f 6382 	mov.w	r3, #1040	; 0x410
 8001614:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001616:	2301      	movs	r3, #1
 8001618:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161a:	2300      	movs	r3, #0
 800161c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800161e:	2300      	movs	r3, #0
 8001620:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001622:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001626:	4619      	mov	r1, r3
 8001628:	483c      	ldr	r0, [pc, #240]	; (800171c <MX_GPIO_Init+0x2c8>)
 800162a:	f002 fb0b 	bl	8003c44 <HAL_GPIO_Init>

  /*Configure GPIO pin : CHG_LED_Pin */
  GPIO_InitStruct.Pin = CHG_LED_Pin;
 800162e:	2308      	movs	r3, #8
 8001630:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001632:	2300      	movs	r3, #0
 8001634:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001636:	2300      	movs	r3, #0
 8001638:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CHG_LED_GPIO_Port, &GPIO_InitStruct);
 800163a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800163e:	4619      	mov	r1, r3
 8001640:	4836      	ldr	r0, [pc, #216]	; (800171c <MX_GPIO_Init+0x2c8>)
 8001642:	f002 faff 	bl	8003c44 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT_LPS22HH_Pin INT2_LIS2DW12_Pin INT_HTS221_Pin */
  GPIO_InitStruct.Pin = INT_LPS22HH_Pin|INT2_LIS2DW12_Pin|INT_HTS221_Pin;
 8001646:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800164a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800164c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001650:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001652:	2300      	movs	r3, #0
 8001654:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001656:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800165a:	4619      	mov	r1, r3
 800165c:	4831      	ldr	r0, [pc, #196]	; (8001724 <MX_GPIO_Init+0x2d0>)
 800165e:	f002 faf1 	bl	8003c44 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_LIS2DW12_Pin CS_IIS3DHHC_Pin CS_LSM6DSOX_Pin */
  GPIO_InitStruct.Pin = CS_LIS2DW12_Pin|CS_IIS3DHHC_Pin|CS_LSM6DSOX_Pin;
 8001662:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001666:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001668:	2311      	movs	r3, #17
 800166a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166c:	2300      	movs	r3, #0
 800166e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001670:	2303      	movs	r3, #3
 8001672:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001674:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001678:	4619      	mov	r1, r3
 800167a:	4826      	ldr	r0, [pc, #152]	; (8001714 <MX_GPIO_Init+0x2c0>)
 800167c:	f002 fae2 	bl	8003c44 <HAL_GPIO_Init>

  /*Configure GPIO pin : CPU_LED_Pin */
  GPIO_InitStruct.Pin = CPU_LED_Pin;
 8001680:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001684:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001686:	2301      	movs	r3, #1
 8001688:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168a:	2300      	movs	r3, #0
 800168c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800168e:	2300      	movs	r3, #0
 8001690:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(CPU_LED_GPIO_Port, &GPIO_InitStruct);
 8001692:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001696:	4619      	mov	r1, r3
 8001698:	4821      	ldr	r0, [pc, #132]	; (8001720 <MX_GPIO_Init+0x2cc>)
 800169a:	f002 fad3 	bl	8003c44 <HAL_GPIO_Init>

  /*Configure GPIO pin : INT1_LIS2DW12_Pin */
  GPIO_InitStruct.Pin = INT1_LIS2DW12_Pin;
 800169e:	2320      	movs	r3, #32
 80016a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016a2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80016a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a8:	2300      	movs	r3, #0
 80016aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(INT1_LIS2DW12_GPIO_Port, &GPIO_InitStruct);
 80016ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016b0:	4619      	mov	r1, r3
 80016b2:	481d      	ldr	r0, [pc, #116]	; (8001728 <MX_GPIO_Init+0x2d4>)
 80016b4:	f002 fac6 	bl	8003c44 <HAL_GPIO_Init>

  /*Configure GPIO pin : INT1_LSM6DSOX_Pin */
  GPIO_InitStruct.Pin = INT1_LSM6DSOX_Pin;
 80016b8:	2304      	movs	r3, #4
 80016ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016bc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80016c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c2:	2300      	movs	r3, #0
 80016c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(INT1_LSM6DSOX_GPIO_Port, &GPIO_InitStruct);
 80016c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016ca:	4619      	mov	r1, r3
 80016cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016d0:	f002 fab8 	bl	8003c44 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_DETECT_Pin */
  GPIO_InitStruct.Pin = SD_DETECT_Pin;
 80016d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016da:	2300      	movs	r3, #0
 80016dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016de:	2300      	movs	r3, #0
 80016e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SD_DETECT_GPIO_Port, &GPIO_InitStruct);
 80016e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016e6:	4619      	mov	r1, r3
 80016e8:	480d      	ldr	r0, [pc, #52]	; (8001720 <MX_GPIO_Init+0x2cc>)
 80016ea:	f002 faab 	bl	8003c44 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_PB1_Pin */
  GPIO_InitStruct.Pin = USER_PB1_Pin;
 80016ee:	2302      	movs	r3, #2
 80016f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80016f2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80016f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f8:	2300      	movs	r3, #0
 80016fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_PB1_GPIO_Port, &GPIO_InitStruct);
 80016fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001700:	4619      	mov	r1, r3
 8001702:	4806      	ldr	r0, [pc, #24]	; (800171c <MX_GPIO_Init+0x2c8>)
 8001704:	f002 fa9e 	bl	8003c44 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001708:	bf00      	nop
 800170a:	3738      	adds	r7, #56	; 0x38
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	40021000 	.word	0x40021000
 8001714:	48001000 	.word	0x48001000
 8001718:	48001400 	.word	0x48001400
 800171c:	48001800 	.word	0x48001800
 8001720:	48000400 	.word	0x48000400
 8001724:	48000c00 	.word	0x48000c00
 8001728:	48000800 	.word	0x48000800

0800172c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001730:	b672      	cpsid	i
}
 8001732:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001734:	e7fe      	b.n	8001734 <Error_Handler+0x8>
	...

08001738 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800173e:	4b0f      	ldr	r3, [pc, #60]	; (800177c <HAL_MspInit+0x44>)
 8001740:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001742:	4a0e      	ldr	r2, [pc, #56]	; (800177c <HAL_MspInit+0x44>)
 8001744:	f043 0301 	orr.w	r3, r3, #1
 8001748:	6613      	str	r3, [r2, #96]	; 0x60
 800174a:	4b0c      	ldr	r3, [pc, #48]	; (800177c <HAL_MspInit+0x44>)
 800174c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800174e:	f003 0301 	and.w	r3, r3, #1
 8001752:	607b      	str	r3, [r7, #4]
 8001754:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001756:	4b09      	ldr	r3, [pc, #36]	; (800177c <HAL_MspInit+0x44>)
 8001758:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800175a:	4a08      	ldr	r2, [pc, #32]	; (800177c <HAL_MspInit+0x44>)
 800175c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001760:	6593      	str	r3, [r2, #88]	; 0x58
 8001762:	4b06      	ldr	r3, [pc, #24]	; (800177c <HAL_MspInit+0x44>)
 8001764:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001766:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800176a:	603b      	str	r3, [r7, #0]
 800176c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800176e:	bf00      	nop
 8001770:	370c      	adds	r7, #12
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	40021000 	.word	0x40021000

08001780 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b0b2      	sub	sp, #200	; 0xc8
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001788:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800178c:	2200      	movs	r2, #0
 800178e:	601a      	str	r2, [r3, #0]
 8001790:	605a      	str	r2, [r3, #4]
 8001792:	609a      	str	r2, [r3, #8]
 8001794:	60da      	str	r2, [r3, #12]
 8001796:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001798:	f107 0318 	add.w	r3, r7, #24
 800179c:	229c      	movs	r2, #156	; 0x9c
 800179e:	2100      	movs	r1, #0
 80017a0:	4618      	mov	r0, r3
 80017a2:	f010 fdff 	bl	80123a4 <memset>
  if(hadc->Instance==ADC1)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a35      	ldr	r2, [pc, #212]	; (8001880 <HAL_ADC_MspInit+0x100>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d162      	bne.n	8001876 <HAL_ADC_MspInit+0xf6>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80017b0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80017b4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80017b6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80017ba:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 80017be:	2303      	movs	r3, #3
 80017c0:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 5;
 80017c2:	2305      	movs	r3, #5
 80017c4:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 96;
 80017c6:	2360      	movs	r3, #96	; 0x60
 80017c8:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 80017ca:	2302      	movs	r3, #2
 80017cc:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV4;
 80017ce:	2304      	movs	r3, #4
 80017d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV4;
 80017d2:	2304      	movs	r3, #4
 80017d4:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80017d6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80017da:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017dc:	f107 0318 	add.w	r3, r7, #24
 80017e0:	4618      	mov	r0, r3
 80017e2:	f004 fe9f 	bl	8006524 <HAL_RCCEx_PeriphCLKConfig>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d001      	beq.n	80017f0 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80017ec:	f7ff ff9e 	bl	800172c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80017f0:	4b24      	ldr	r3, [pc, #144]	; (8001884 <HAL_ADC_MspInit+0x104>)
 80017f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017f4:	4a23      	ldr	r2, [pc, #140]	; (8001884 <HAL_ADC_MspInit+0x104>)
 80017f6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80017fa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017fc:	4b21      	ldr	r3, [pc, #132]	; (8001884 <HAL_ADC_MspInit+0x104>)
 80017fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001800:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001804:	617b      	str	r3, [r7, #20]
 8001806:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001808:	4b1e      	ldr	r3, [pc, #120]	; (8001884 <HAL_ADC_MspInit+0x104>)
 800180a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800180c:	4a1d      	ldr	r2, [pc, #116]	; (8001884 <HAL_ADC_MspInit+0x104>)
 800180e:	f043 0304 	orr.w	r3, r3, #4
 8001812:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001814:	4b1b      	ldr	r3, [pc, #108]	; (8001884 <HAL_ADC_MspInit+0x104>)
 8001816:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001818:	f003 0304 	and.w	r3, r3, #4
 800181c:	613b      	str	r3, [r7, #16]
 800181e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001820:	4b18      	ldr	r3, [pc, #96]	; (8001884 <HAL_ADC_MspInit+0x104>)
 8001822:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001824:	4a17      	ldr	r2, [pc, #92]	; (8001884 <HAL_ADC_MspInit+0x104>)
 8001826:	f043 0301 	orr.w	r3, r3, #1
 800182a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800182c:	4b15      	ldr	r3, [pc, #84]	; (8001884 <HAL_ADC_MspInit+0x104>)
 800182e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001830:	f003 0301 	and.w	r3, r3, #1
 8001834:	60fb      	str	r3, [r7, #12]
 8001836:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN13
    PA3     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = AN_VBATT_Pin;
 8001838:	2310      	movs	r3, #16
 800183a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800183e:	230b      	movs	r3, #11
 8001840:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001844:	2300      	movs	r3, #0
 8001846:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(AN_VBATT_GPIO_Port, &GPIO_InitStruct);
 800184a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800184e:	4619      	mov	r1, r3
 8001850:	480d      	ldr	r0, [pc, #52]	; (8001888 <HAL_ADC_MspInit+0x108>)
 8001852:	f002 f9f7 	bl	8003c44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC1_IN8_Pin;
 8001856:	2308      	movs	r3, #8
 8001858:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800185c:	230b      	movs	r3, #11
 800185e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001862:	2300      	movs	r3, #0
 8001864:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(ADC1_IN8_GPIO_Port, &GPIO_InitStruct);
 8001868:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800186c:	4619      	mov	r1, r3
 800186e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001872:	f002 f9e7 	bl	8003c44 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001876:	bf00      	nop
 8001878:	37c8      	adds	r7, #200	; 0xc8
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	50040000 	.word	0x50040000
 8001884:	40021000 	.word	0x40021000
 8001888:	48000800 	.word	0x48000800

0800188c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800188c:	b480      	push	{r7}
 800188e:	b085      	sub	sp, #20
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a0a      	ldr	r2, [pc, #40]	; (80018c4 <HAL_CRC_MspInit+0x38>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d10b      	bne.n	80018b6 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800189e:	4b0a      	ldr	r3, [pc, #40]	; (80018c8 <HAL_CRC_MspInit+0x3c>)
 80018a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018a2:	4a09      	ldr	r2, [pc, #36]	; (80018c8 <HAL_CRC_MspInit+0x3c>)
 80018a4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80018a8:	6493      	str	r3, [r2, #72]	; 0x48
 80018aa:	4b07      	ldr	r3, [pc, #28]	; (80018c8 <HAL_CRC_MspInit+0x3c>)
 80018ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018b2:	60fb      	str	r3, [r7, #12]
 80018b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80018b6:	bf00      	nop
 80018b8:	3714      	adds	r7, #20
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	40023000 	.word	0x40023000
 80018c8:	40021000 	.word	0x40021000

080018cc <HAL_DFSDM_FilterMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_filter: DFSDM_Filter handle pointer
* @retval None
*/
void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b0aa      	sub	sp, #168	; 0xa8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018d4:	f107 030c 	add.w	r3, r7, #12
 80018d8:	229c      	movs	r2, #156	; 0x9c
 80018da:	2100      	movs	r1, #0
 80018dc:	4618      	mov	r0, r3
 80018de:	f010 fd61 	bl	80123a4 <memset>
  if(DFSDM1_Init == 0)
 80018e2:	4b34      	ldr	r3, [pc, #208]	; (80019b4 <HAL_DFSDM_FilterMspInit+0xe8>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d129      	bne.n	800193e <HAL_DFSDM_FilterMspInit+0x72>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 80018ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018ee:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 80018f0:	2300      	movs	r3, #0
 80018f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018f6:	f107 030c 	add.w	r3, r7, #12
 80018fa:	4618      	mov	r0, r3
 80018fc:	f004 fe12 	bl	8006524 <HAL_RCCEx_PeriphCLKConfig>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d001      	beq.n	800190a <HAL_DFSDM_FilterMspInit+0x3e>
    {
      Error_Handler();
 8001906:	f7ff ff11 	bl	800172c <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 800190a:	4b2b      	ldr	r3, [pc, #172]	; (80019b8 <HAL_DFSDM_FilterMspInit+0xec>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	3301      	adds	r3, #1
 8001910:	4a29      	ldr	r2, [pc, #164]	; (80019b8 <HAL_DFSDM_FilterMspInit+0xec>)
 8001912:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8001914:	4b28      	ldr	r3, [pc, #160]	; (80019b8 <HAL_DFSDM_FilterMspInit+0xec>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	2b01      	cmp	r3, #1
 800191a:	d10b      	bne.n	8001934 <HAL_DFSDM_FilterMspInit+0x68>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 800191c:	4b27      	ldr	r3, [pc, #156]	; (80019bc <HAL_DFSDM_FilterMspInit+0xf0>)
 800191e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001920:	4a26      	ldr	r2, [pc, #152]	; (80019bc <HAL_DFSDM_FilterMspInit+0xf0>)
 8001922:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001926:	6613      	str	r3, [r2, #96]	; 0x60
 8001928:	4b24      	ldr	r3, [pc, #144]	; (80019bc <HAL_DFSDM_FilterMspInit+0xf0>)
 800192a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800192c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001930:	60bb      	str	r3, [r7, #8]
 8001932:	68bb      	ldr	r3, [r7, #8]
    }
  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8001934:	4b1f      	ldr	r3, [pc, #124]	; (80019b4 <HAL_DFSDM_FilterMspInit+0xe8>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	3301      	adds	r3, #1
 800193a:	4a1e      	ldr	r2, [pc, #120]	; (80019b4 <HAL_DFSDM_FilterMspInit+0xe8>)
 800193c:	6013      	str	r3, [r2, #0]
  }

    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(hdfsdm_filter->Instance == DFSDM1_Filter0){
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a1f      	ldr	r2, [pc, #124]	; (80019c0 <HAL_DFSDM_FilterMspInit+0xf4>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d131      	bne.n	80019ac <HAL_DFSDM_FilterMspInit+0xe0>
    hdma_dfsdm1_flt0.Instance = DMA1_Channel4;
 8001948:	4b1e      	ldr	r3, [pc, #120]	; (80019c4 <HAL_DFSDM_FilterMspInit+0xf8>)
 800194a:	4a1f      	ldr	r2, [pc, #124]	; (80019c8 <HAL_DFSDM_FilterMspInit+0xfc>)
 800194c:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt0.Init.Request = DMA_REQUEST_DFSDM1_FLT0;
 800194e:	4b1d      	ldr	r3, [pc, #116]	; (80019c4 <HAL_DFSDM_FilterMspInit+0xf8>)
 8001950:	2256      	movs	r2, #86	; 0x56
 8001952:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001954:	4b1b      	ldr	r3, [pc, #108]	; (80019c4 <HAL_DFSDM_FilterMspInit+0xf8>)
 8001956:	2200      	movs	r2, #0
 8001958:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 800195a:	4b1a      	ldr	r3, [pc, #104]	; (80019c4 <HAL_DFSDM_FilterMspInit+0xf8>)
 800195c:	2200      	movs	r2, #0
 800195e:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 8001960:	4b18      	ldr	r3, [pc, #96]	; (80019c4 <HAL_DFSDM_FilterMspInit+0xf8>)
 8001962:	2280      	movs	r2, #128	; 0x80
 8001964:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001966:	4b17      	ldr	r3, [pc, #92]	; (80019c4 <HAL_DFSDM_FilterMspInit+0xf8>)
 8001968:	f44f 7200 	mov.w	r2, #512	; 0x200
 800196c:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800196e:	4b15      	ldr	r3, [pc, #84]	; (80019c4 <HAL_DFSDM_FilterMspInit+0xf8>)
 8001970:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001974:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_CIRCULAR;
 8001976:	4b13      	ldr	r3, [pc, #76]	; (80019c4 <HAL_DFSDM_FilterMspInit+0xf8>)
 8001978:	2220      	movs	r2, #32
 800197a:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_HIGH;
 800197c:	4b11      	ldr	r3, [pc, #68]	; (80019c4 <HAL_DFSDM_FilterMspInit+0xf8>)
 800197e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001982:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 8001984:	480f      	ldr	r0, [pc, #60]	; (80019c4 <HAL_DFSDM_FilterMspInit+0xf8>)
 8001986:	f001 ffa3 	bl	80038d0 <HAL_DMA_Init>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d001      	beq.n	8001994 <HAL_DFSDM_FilterMspInit+0xc8>
    {
      Error_Handler();
 8001990:	f7ff fecc 	bl	800172c <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hdfsdm_filter,hdmaInj,hdma_dfsdm1_flt0);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	4a0b      	ldr	r2, [pc, #44]	; (80019c4 <HAL_DFSDM_FilterMspInit+0xf8>)
 8001998:	62da      	str	r2, [r3, #44]	; 0x2c
 800199a:	4a0a      	ldr	r2, [pc, #40]	; (80019c4 <HAL_DFSDM_FilterMspInit+0xf8>)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(hdfsdm_filter,hdmaReg,hdma_dfsdm1_flt0);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	4a08      	ldr	r2, [pc, #32]	; (80019c4 <HAL_DFSDM_FilterMspInit+0xf8>)
 80019a4:	629a      	str	r2, [r3, #40]	; 0x28
 80019a6:	4a07      	ldr	r2, [pc, #28]	; (80019c4 <HAL_DFSDM_FilterMspInit+0xf8>)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6293      	str	r3, [r2, #40]	; 0x28
  }

}
 80019ac:	bf00      	nop
 80019ae:	37a8      	adds	r7, #168	; 0xa8
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	20000e54 	.word	0x20000e54
 80019b8:	20000e50 	.word	0x20000e50
 80019bc:	40021000 	.word	0x40021000
 80019c0:	40016100 	.word	0x40016100
 80019c4:	20000a94 	.word	0x20000a94
 80019c8:	40020044 	.word	0x40020044

080019cc <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b0aa      	sub	sp, #168	; 0xa8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019d4:	f107 030c 	add.w	r3, r7, #12
 80019d8:	229c      	movs	r2, #156	; 0x9c
 80019da:	2100      	movs	r1, #0
 80019dc:	4618      	mov	r0, r3
 80019de:	f010 fce1 	bl	80123a4 <memset>
  if(DFSDM1_Init == 0)
 80019e2:	4b19      	ldr	r3, [pc, #100]	; (8001a48 <HAL_DFSDM_ChannelMspInit+0x7c>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d129      	bne.n	8001a3e <HAL_DFSDM_ChannelMspInit+0x72>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 80019ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019ee:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 80019f0:	2300      	movs	r3, #0
 80019f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019f6:	f107 030c 	add.w	r3, r7, #12
 80019fa:	4618      	mov	r0, r3
 80019fc:	f004 fd92 	bl	8006524 <HAL_RCCEx_PeriphCLKConfig>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d001      	beq.n	8001a0a <HAL_DFSDM_ChannelMspInit+0x3e>
    {
      Error_Handler();
 8001a06:	f7ff fe91 	bl	800172c <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8001a0a:	4b10      	ldr	r3, [pc, #64]	; (8001a4c <HAL_DFSDM_ChannelMspInit+0x80>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	3301      	adds	r3, #1
 8001a10:	4a0e      	ldr	r2, [pc, #56]	; (8001a4c <HAL_DFSDM_ChannelMspInit+0x80>)
 8001a12:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8001a14:	4b0d      	ldr	r3, [pc, #52]	; (8001a4c <HAL_DFSDM_ChannelMspInit+0x80>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d10b      	bne.n	8001a34 <HAL_DFSDM_ChannelMspInit+0x68>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001a1c:	4b0c      	ldr	r3, [pc, #48]	; (8001a50 <HAL_DFSDM_ChannelMspInit+0x84>)
 8001a1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a20:	4a0b      	ldr	r2, [pc, #44]	; (8001a50 <HAL_DFSDM_ChannelMspInit+0x84>)
 8001a22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a26:	6613      	str	r3, [r2, #96]	; 0x60
 8001a28:	4b09      	ldr	r3, [pc, #36]	; (8001a50 <HAL_DFSDM_ChannelMspInit+0x84>)
 8001a2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a30:	60bb      	str	r3, [r7, #8]
 8001a32:	68bb      	ldr	r3, [r7, #8]
    }
  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8001a34:	4b04      	ldr	r3, [pc, #16]	; (8001a48 <HAL_DFSDM_ChannelMspInit+0x7c>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	3301      	adds	r3, #1
 8001a3a:	4a03      	ldr	r2, [pc, #12]	; (8001a48 <HAL_DFSDM_ChannelMspInit+0x7c>)
 8001a3c:	6013      	str	r3, [r2, #0]
  }

}
 8001a3e:	bf00      	nop
 8001a40:	37a8      	adds	r7, #168	; 0xa8
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	20000e54 	.word	0x20000e54
 8001a4c:	20000e50 	.word	0x20000e50
 8001a50:	40021000 	.word	0x40021000

08001a54 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b0b2      	sub	sp, #200	; 0xc8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a5c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001a60:	2200      	movs	r2, #0
 8001a62:	601a      	str	r2, [r3, #0]
 8001a64:	605a      	str	r2, [r3, #4]
 8001a66:	609a      	str	r2, [r3, #8]
 8001a68:	60da      	str	r2, [r3, #12]
 8001a6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a6c:	f107 0318 	add.w	r3, r7, #24
 8001a70:	229c      	movs	r2, #156	; 0x9c
 8001a72:	2100      	movs	r1, #0
 8001a74:	4618      	mov	r0, r3
 8001a76:	f010 fc95 	bl	80123a4 <memset>
  if(hi2c->Instance==I2C1)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a43      	ldr	r2, [pc, #268]	; (8001b8c <HAL_I2C_MspInit+0x138>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d13b      	bne.n	8001afc <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001a84:	2340      	movs	r3, #64	; 0x40
 8001a86:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a8c:	f107 0318 	add.w	r3, r7, #24
 8001a90:	4618      	mov	r0, r3
 8001a92:	f004 fd47 	bl	8006524 <HAL_RCCEx_PeriphCLKConfig>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d001      	beq.n	8001aa0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001a9c:	f7ff fe46 	bl	800172c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aa0:	4b3b      	ldr	r3, [pc, #236]	; (8001b90 <HAL_I2C_MspInit+0x13c>)
 8001aa2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aa4:	4a3a      	ldr	r2, [pc, #232]	; (8001b90 <HAL_I2C_MspInit+0x13c>)
 8001aa6:	f043 0302 	orr.w	r3, r3, #2
 8001aaa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001aac:	4b38      	ldr	r3, [pc, #224]	; (8001b90 <HAL_I2C_MspInit+0x13c>)
 8001aae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ab0:	f003 0302 	and.w	r3, r3, #2
 8001ab4:	617b      	str	r3, [r7, #20]
 8001ab6:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB6     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = I2C1_SDA_Pin|I2C1_SCL_Pin;
 8001ab8:	23c0      	movs	r3, #192	; 0xc0
 8001aba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001abe:	2312      	movs	r3, #18
 8001ac0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aca:	2303      	movs	r3, #3
 8001acc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ad0:	2304      	movs	r3, #4
 8001ad2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ad6:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001ada:	4619      	mov	r1, r3
 8001adc:	482d      	ldr	r0, [pc, #180]	; (8001b94 <HAL_I2C_MspInit+0x140>)
 8001ade:	f002 f8b1 	bl	8003c44 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ae2:	4b2b      	ldr	r3, [pc, #172]	; (8001b90 <HAL_I2C_MspInit+0x13c>)
 8001ae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ae6:	4a2a      	ldr	r2, [pc, #168]	; (8001b90 <HAL_I2C_MspInit+0x13c>)
 8001ae8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001aec:	6593      	str	r3, [r2, #88]	; 0x58
 8001aee:	4b28      	ldr	r3, [pc, #160]	; (8001b90 <HAL_I2C_MspInit+0x13c>)
 8001af0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001af2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001af6:	613b      	str	r3, [r7, #16]
 8001af8:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001afa:	e043      	b.n	8001b84 <HAL_I2C_MspInit+0x130>
  else if(hi2c->Instance==I2C3)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a25      	ldr	r2, [pc, #148]	; (8001b98 <HAL_I2C_MspInit+0x144>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d13e      	bne.n	8001b84 <HAL_I2C_MspInit+0x130>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001b06:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b0a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b10:	f107 0318 	add.w	r3, r7, #24
 8001b14:	4618      	mov	r0, r3
 8001b16:	f004 fd05 	bl	8006524 <HAL_RCCEx_PeriphCLKConfig>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d001      	beq.n	8001b24 <HAL_I2C_MspInit+0xd0>
      Error_Handler();
 8001b20:	f7ff fe04 	bl	800172c <Error_Handler>
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b24:	4b1a      	ldr	r3, [pc, #104]	; (8001b90 <HAL_I2C_MspInit+0x13c>)
 8001b26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b28:	4a19      	ldr	r2, [pc, #100]	; (8001b90 <HAL_I2C_MspInit+0x13c>)
 8001b2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b2e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b30:	4b17      	ldr	r3, [pc, #92]	; (8001b90 <HAL_I2C_MspInit+0x13c>)
 8001b32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b38:	60fb      	str	r3, [r7, #12]
 8001b3a:	68fb      	ldr	r3, [r7, #12]
    HAL_PWREx_EnableVddIO2();
 8001b3c:	f003 fe0e 	bl	800575c <HAL_PWREx_EnableVddIO2>
    GPIO_InitStruct.Pin = I2C3_SDA_Pin|I2C3_SCL_Pin;
 8001b40:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001b44:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b48:	2312      	movs	r3, #18
 8001b4a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b54:	2303      	movs	r3, #3
 8001b56:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001b5a:	2304      	movs	r3, #4
 8001b5c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b60:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001b64:	4619      	mov	r1, r3
 8001b66:	480d      	ldr	r0, [pc, #52]	; (8001b9c <HAL_I2C_MspInit+0x148>)
 8001b68:	f002 f86c 	bl	8003c44 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001b6c:	4b08      	ldr	r3, [pc, #32]	; (8001b90 <HAL_I2C_MspInit+0x13c>)
 8001b6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b70:	4a07      	ldr	r2, [pc, #28]	; (8001b90 <HAL_I2C_MspInit+0x13c>)
 8001b72:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001b76:	6593      	str	r3, [r2, #88]	; 0x58
 8001b78:	4b05      	ldr	r3, [pc, #20]	; (8001b90 <HAL_I2C_MspInit+0x13c>)
 8001b7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b7c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001b80:	60bb      	str	r3, [r7, #8]
 8001b82:	68bb      	ldr	r3, [r7, #8]
}
 8001b84:	bf00      	nop
 8001b86:	37c8      	adds	r7, #200	; 0xc8
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	40005400 	.word	0x40005400
 8001b90:	40021000 	.word	0x40021000
 8001b94:	48000400 	.word	0x48000400
 8001b98:	40005c00 	.word	0x40005c00
 8001b9c:	48001800 	.word	0x48001800

08001ba0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b0aa      	sub	sp, #168	; 0xa8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ba8:	f107 030c 	add.w	r3, r7, #12
 8001bac:	229c      	movs	r2, #156	; 0x9c
 8001bae:	2100      	movs	r1, #0
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f010 fbf7 	bl	80123a4 <memset>
  if(hrtc->Instance==RTC)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a10      	ldr	r2, [pc, #64]	; (8001bfc <HAL_RTC_MspInit+0x5c>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d118      	bne.n	8001bf2 <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001bc0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bc4:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001bc6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001bca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bce:	f107 030c 	add.w	r3, r7, #12
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f004 fca6 	bl	8006524 <HAL_RCCEx_PeriphCLKConfig>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001bde:	f7ff fda5 	bl	800172c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001be2:	4b07      	ldr	r3, [pc, #28]	; (8001c00 <HAL_RTC_MspInit+0x60>)
 8001be4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001be8:	4a05      	ldr	r2, [pc, #20]	; (8001c00 <HAL_RTC_MspInit+0x60>)
 8001bea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001bf2:	bf00      	nop
 8001bf4:	37a8      	adds	r7, #168	; 0xa8
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	40002800 	.word	0x40002800
 8001c00:	40021000 	.word	0x40021000

08001c04 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b0b2      	sub	sp, #200	; 0xc8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c0c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001c10:	2200      	movs	r2, #0
 8001c12:	601a      	str	r2, [r3, #0]
 8001c14:	605a      	str	r2, [r3, #4]
 8001c16:	609a      	str	r2, [r3, #8]
 8001c18:	60da      	str	r2, [r3, #12]
 8001c1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c1c:	f107 0318 	add.w	r3, r7, #24
 8001c20:	229c      	movs	r2, #156	; 0x9c
 8001c22:	2100      	movs	r1, #0
 8001c24:	4618      	mov	r0, r3
 8001c26:	f010 fbbd 	bl	80123a4 <memset>
  if(hsd->Instance==SDMMC1)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a53      	ldr	r2, [pc, #332]	; (8001d7c <HAL_SD_MspInit+0x178>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	f040 809f 	bne.w	8001d74 <HAL_SD_MspInit+0x170>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 8001c36:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001c3a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLP;
 8001c3c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001c40:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c44:	f107 0318 	add.w	r3, r7, #24
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f004 fc6b 	bl	8006524 <HAL_RCCEx_PeriphCLKConfig>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d001      	beq.n	8001c58 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 8001c54:	f7ff fd6a 	bl	800172c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001c58:	4b49      	ldr	r3, [pc, #292]	; (8001d80 <HAL_SD_MspInit+0x17c>)
 8001c5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c5c:	4a48      	ldr	r2, [pc, #288]	; (8001d80 <HAL_SD_MspInit+0x17c>)
 8001c5e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c62:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c64:	4b46      	ldr	r3, [pc, #280]	; (8001d80 <HAL_SD_MspInit+0x17c>)
 8001c66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c6c:	617b      	str	r3, [r7, #20]
 8001c6e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c70:	4b43      	ldr	r3, [pc, #268]	; (8001d80 <HAL_SD_MspInit+0x17c>)
 8001c72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c74:	4a42      	ldr	r2, [pc, #264]	; (8001d80 <HAL_SD_MspInit+0x17c>)
 8001c76:	f043 0302 	orr.w	r3, r3, #2
 8001c7a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c7c:	4b40      	ldr	r3, [pc, #256]	; (8001d80 <HAL_SD_MspInit+0x17c>)
 8001c7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c80:	f003 0302 	and.w	r3, r3, #2
 8001c84:	613b      	str	r3, [r7, #16]
 8001c86:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c88:	4b3d      	ldr	r3, [pc, #244]	; (8001d80 <HAL_SD_MspInit+0x17c>)
 8001c8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c8c:	4a3c      	ldr	r2, [pc, #240]	; (8001d80 <HAL_SD_MspInit+0x17c>)
 8001c8e:	f043 0304 	orr.w	r3, r3, #4
 8001c92:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c94:	4b3a      	ldr	r3, [pc, #232]	; (8001d80 <HAL_SD_MspInit+0x17c>)
 8001c96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c98:	f003 0304 	and.w	r3, r3, #4
 8001c9c:	60fb      	str	r3, [r7, #12]
 8001c9e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ca0:	4b37      	ldr	r3, [pc, #220]	; (8001d80 <HAL_SD_MspInit+0x17c>)
 8001ca2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ca4:	4a36      	ldr	r2, [pc, #216]	; (8001d80 <HAL_SD_MspInit+0x17c>)
 8001ca6:	f043 0308 	orr.w	r3, r3, #8
 8001caa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cac:	4b34      	ldr	r3, [pc, #208]	; (8001d80 <HAL_SD_MspInit+0x17c>)
 8001cae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cb0:	f003 0308 	and.w	r3, r3, #8
 8001cb4:	60bb      	str	r3, [r7, #8]
 8001cb6:	68bb      	ldr	r3, [r7, #8]
    PC12     ------> SDMMC1_CK
    PC6     ------> SDMMC1_D0DIR
    PC7     ------> SDMMC1_D123DIR
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDMMC1_CDIR_Pin|SDMMC1_CKIN_Pin;
 8001cb8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001cbc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc0:	2302      	movs	r3, #2
 8001cc2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_SDMMC1;
 8001cd2:	2308      	movs	r3, #8
 8001cd4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cd8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001cdc:	4619      	mov	r1, r3
 8001cde:	4829      	ldr	r0, [pc, #164]	; (8001d84 <HAL_SD_MspInit+0x180>)
 8001ce0:	f001 ffb0 	bl	8003c44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC1_D3_Pin|SDMMC1_D2_Pin|SDMMC1_D1_Pin|SDMMC1_CK_Pin
 8001ce4:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001ce8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
                          |SDMMC1_D0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cec:	2302      	movs	r3, #2
 8001cee:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001cfe:	230c      	movs	r3, #12
 8001d00:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d04:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001d08:	4619      	mov	r1, r3
 8001d0a:	481f      	ldr	r0, [pc, #124]	; (8001d88 <HAL_SD_MspInit+0x184>)
 8001d0c:	f001 ff9a 	bl	8003c44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC1_CMD_Pin;
 8001d10:	2304      	movs	r3, #4
 8001d12:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d16:	2302      	movs	r3, #2
 8001d18:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d22:	2303      	movs	r3, #3
 8001d24:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001d28:	230c      	movs	r3, #12
 8001d2a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(SDMMC1_CMD_GPIO_Port, &GPIO_InitStruct);
 8001d2e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001d32:	4619      	mov	r1, r3
 8001d34:	4815      	ldr	r0, [pc, #84]	; (8001d8c <HAL_SD_MspInit+0x188>)
 8001d36:	f001 ff85 	bl	8003c44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC1_D0DIR_Pin|SDMMC1_D123DIR_Pin;
 8001d3a:	23c0      	movs	r3, #192	; 0xc0
 8001d3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d40:	2302      	movs	r3, #2
 8001d42:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d46:	2300      	movs	r3, #0
 8001d48:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d4c:	2303      	movs	r3, #3
 8001d4e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_SDMMC1;
 8001d52:	2308      	movs	r3, #8
 8001d54:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d58:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	480a      	ldr	r0, [pc, #40]	; (8001d88 <HAL_SD_MspInit+0x184>)
 8001d60:	f001 ff70 	bl	8003c44 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8001d64:	2200      	movs	r2, #0
 8001d66:	2100      	movs	r1, #0
 8001d68:	2031      	movs	r0, #49	; 0x31
 8001d6a:	f001 fa64 	bl	8003236 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8001d6e:	2031      	movs	r0, #49	; 0x31
 8001d70:	f001 fa7d 	bl	800326e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8001d74:	bf00      	nop
 8001d76:	37c8      	adds	r7, #200	; 0xc8
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	50062400 	.word	0x50062400
 8001d80:	40021000 	.word	0x40021000
 8001d84:	48000400 	.word	0x48000400
 8001d88:	48000800 	.word	0x48000800
 8001d8c:	48000c00 	.word	0x48000c00

08001d90 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b08e      	sub	sp, #56	; 0x38
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	601a      	str	r2, [r3, #0]
 8001da0:	605a      	str	r2, [r3, #4]
 8001da2:	609a      	str	r2, [r3, #8]
 8001da4:	60da      	str	r2, [r3, #12]
 8001da6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a64      	ldr	r2, [pc, #400]	; (8001f40 <HAL_SPI_MspInit+0x1b0>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d13a      	bne.n	8001e28 <HAL_SPI_MspInit+0x98>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001db2:	4b64      	ldr	r3, [pc, #400]	; (8001f44 <HAL_SPI_MspInit+0x1b4>)
 8001db4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001db6:	4a63      	ldr	r2, [pc, #396]	; (8001f44 <HAL_SPI_MspInit+0x1b4>)
 8001db8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001dbc:	6613      	str	r3, [r2, #96]	; 0x60
 8001dbe:	4b61      	ldr	r3, [pc, #388]	; (8001f44 <HAL_SPI_MspInit+0x1b4>)
 8001dc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dc2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001dc6:	623b      	str	r3, [r7, #32]
 8001dc8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001dca:	4b5e      	ldr	r3, [pc, #376]	; (8001f44 <HAL_SPI_MspInit+0x1b4>)
 8001dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dce:	4a5d      	ldr	r2, [pc, #372]	; (8001f44 <HAL_SPI_MspInit+0x1b4>)
 8001dd0:	f043 0310 	orr.w	r3, r3, #16
 8001dd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dd6:	4b5b      	ldr	r3, [pc, #364]	; (8001f44 <HAL_SPI_MspInit+0x1b4>)
 8001dd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dda:	f003 0310 	and.w	r3, r3, #16
 8001dde:	61fb      	str	r3, [r7, #28]
 8001de0:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PE13     ------> SPI1_SCK
    PE15     ------> SPI1_MOSI
    PE14     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = SPI2_SCKE13_Pin;
 8001de2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001de6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de8:	2302      	movs	r3, #2
 8001dea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001dec:	2301      	movs	r3, #1
 8001dee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001df0:	2303      	movs	r3, #3
 8001df2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001df4:	2305      	movs	r3, #5
 8001df6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SPI2_SCKE13_GPIO_Port, &GPIO_InitStruct);
 8001df8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	4852      	ldr	r0, [pc, #328]	; (8001f48 <HAL_SPI_MspInit+0x1b8>)
 8001e00:	f001 ff20 	bl	8003c44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI1_MOSI_Pin|GPIO_PIN_14;
 8001e04:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001e08:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e0a:	2302      	movs	r3, #2
 8001e0c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e12:	2303      	movs	r3, #3
 8001e14:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e16:	2305      	movs	r3, #5
 8001e18:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e1e:	4619      	mov	r1, r3
 8001e20:	4849      	ldr	r0, [pc, #292]	; (8001f48 <HAL_SPI_MspInit+0x1b8>)
 8001e22:	f001 ff0f 	bl	8003c44 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001e26:	e086      	b.n	8001f36 <HAL_SPI_MspInit+0x1a6>
  else if(hspi->Instance==SPI2)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a47      	ldr	r2, [pc, #284]	; (8001f4c <HAL_SPI_MspInit+0x1bc>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d144      	bne.n	8001ebc <HAL_SPI_MspInit+0x12c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001e32:	4b44      	ldr	r3, [pc, #272]	; (8001f44 <HAL_SPI_MspInit+0x1b4>)
 8001e34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e36:	4a43      	ldr	r2, [pc, #268]	; (8001f44 <HAL_SPI_MspInit+0x1b4>)
 8001e38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e3c:	6593      	str	r3, [r2, #88]	; 0x58
 8001e3e:	4b41      	ldr	r3, [pc, #260]	; (8001f44 <HAL_SPI_MspInit+0x1b4>)
 8001e40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e46:	61bb      	str	r3, [r7, #24]
 8001e48:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e4a:	4b3e      	ldr	r3, [pc, #248]	; (8001f44 <HAL_SPI_MspInit+0x1b4>)
 8001e4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e4e:	4a3d      	ldr	r2, [pc, #244]	; (8001f44 <HAL_SPI_MspInit+0x1b4>)
 8001e50:	f043 0308 	orr.w	r3, r3, #8
 8001e54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e56:	4b3b      	ldr	r3, [pc, #236]	; (8001f44 <HAL_SPI_MspInit+0x1b4>)
 8001e58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e5a:	f003 0308 	and.w	r3, r3, #8
 8001e5e:	617b      	str	r3, [r7, #20]
 8001e60:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e62:	4b38      	ldr	r3, [pc, #224]	; (8001f44 <HAL_SPI_MspInit+0x1b4>)
 8001e64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e66:	4a37      	ldr	r2, [pc, #220]	; (8001f44 <HAL_SPI_MspInit+0x1b4>)
 8001e68:	f043 0304 	orr.w	r3, r3, #4
 8001e6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e6e:	4b35      	ldr	r3, [pc, #212]	; (8001f44 <HAL_SPI_MspInit+0x1b4>)
 8001e70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e72:	f003 0304 	and.w	r3, r3, #4
 8001e76:	613b      	str	r3, [r7, #16]
 8001e78:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = SPI2_MISO_Pin|SPI2_SCK_Pin;
 8001e7a:	230a      	movs	r3, #10
 8001e7c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e7e:	2302      	movs	r3, #2
 8001e80:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e82:	2300      	movs	r3, #0
 8001e84:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e86:	2303      	movs	r3, #3
 8001e88:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001e8a:	2305      	movs	r3, #5
 8001e8c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e92:	4619      	mov	r1, r3
 8001e94:	482e      	ldr	r0, [pc, #184]	; (8001f50 <HAL_SPI_MspInit+0x1c0>)
 8001e96:	f001 fed5 	bl	8003c44 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SPI2_MOSI_Pin;
 8001e9a:	2308      	movs	r3, #8
 8001e9c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e9e:	2302      	movs	r3, #2
 8001ea0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001eaa:	2305      	movs	r3, #5
 8001eac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SPI2_MOSI_GPIO_Port, &GPIO_InitStruct);
 8001eae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	4827      	ldr	r0, [pc, #156]	; (8001f54 <HAL_SPI_MspInit+0x1c4>)
 8001eb6:	f001 fec5 	bl	8003c44 <HAL_GPIO_Init>
}
 8001eba:	e03c      	b.n	8001f36 <HAL_SPI_MspInit+0x1a6>
  else if(hspi->Instance==SPI3)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a25      	ldr	r2, [pc, #148]	; (8001f58 <HAL_SPI_MspInit+0x1c8>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d137      	bne.n	8001f36 <HAL_SPI_MspInit+0x1a6>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001ec6:	4b1f      	ldr	r3, [pc, #124]	; (8001f44 <HAL_SPI_MspInit+0x1b4>)
 8001ec8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eca:	4a1e      	ldr	r2, [pc, #120]	; (8001f44 <HAL_SPI_MspInit+0x1b4>)
 8001ecc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ed0:	6593      	str	r3, [r2, #88]	; 0x58
 8001ed2:	4b1c      	ldr	r3, [pc, #112]	; (8001f44 <HAL_SPI_MspInit+0x1b4>)
 8001ed4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ed6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001eda:	60fb      	str	r3, [r7, #12]
 8001edc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ede:	4b19      	ldr	r3, [pc, #100]	; (8001f44 <HAL_SPI_MspInit+0x1b4>)
 8001ee0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ee2:	4a18      	ldr	r2, [pc, #96]	; (8001f44 <HAL_SPI_MspInit+0x1b4>)
 8001ee4:	f043 0302 	orr.w	r3, r3, #2
 8001ee8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001eea:	4b16      	ldr	r3, [pc, #88]	; (8001f44 <HAL_SPI_MspInit+0x1b4>)
 8001eec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eee:	f003 0302 	and.w	r3, r3, #2
 8001ef2:	60bb      	str	r3, [r7, #8]
 8001ef4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SPI3_MISO_Pin|SPI3_MOSI_Pin;
 8001ef6:	2330      	movs	r3, #48	; 0x30
 8001ef8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001efa:	2302      	movs	r3, #2
 8001efc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efe:	2300      	movs	r3, #0
 8001f00:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f02:	2303      	movs	r3, #3
 8001f04:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001f06:	2306      	movs	r3, #6
 8001f08:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f0e:	4619      	mov	r1, r3
 8001f10:	4812      	ldr	r0, [pc, #72]	; (8001f5c <HAL_SPI_MspInit+0x1cc>)
 8001f12:	f001 fe97 	bl	8003c44 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SPI3_SCK_Pin;
 8001f16:	2308      	movs	r3, #8
 8001f18:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f1a:	2302      	movs	r3, #2
 8001f1c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f22:	2303      	movs	r3, #3
 8001f24:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001f26:	2306      	movs	r3, #6
 8001f28:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SPI3_SCK_GPIO_Port, &GPIO_InitStruct);
 8001f2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f2e:	4619      	mov	r1, r3
 8001f30:	480a      	ldr	r0, [pc, #40]	; (8001f5c <HAL_SPI_MspInit+0x1cc>)
 8001f32:	f001 fe87 	bl	8003c44 <HAL_GPIO_Init>
}
 8001f36:	bf00      	nop
 8001f38:	3738      	adds	r7, #56	; 0x38
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	40013000 	.word	0x40013000
 8001f44:	40021000 	.word	0x40021000
 8001f48:	48001000 	.word	0x48001000
 8001f4c:	40003800 	.word	0x40003800
 8001f50:	48000c00 	.word	0x48000c00
 8001f54:	48000800 	.word	0x48000800
 8001f58:	40003c00 	.word	0x40003c00
 8001f5c:	48000400 	.word	0x48000400

08001f60 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b086      	sub	sp, #24
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f70:	d10c      	bne.n	8001f8c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f72:	4b1e      	ldr	r3, [pc, #120]	; (8001fec <HAL_TIM_Base_MspInit+0x8c>)
 8001f74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f76:	4a1d      	ldr	r2, [pc, #116]	; (8001fec <HAL_TIM_Base_MspInit+0x8c>)
 8001f78:	f043 0301 	orr.w	r3, r3, #1
 8001f7c:	6593      	str	r3, [r2, #88]	; 0x58
 8001f7e:	4b1b      	ldr	r3, [pc, #108]	; (8001fec <HAL_TIM_Base_MspInit+0x8c>)
 8001f80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f82:	f003 0301 	and.w	r3, r3, #1
 8001f86:	617b      	str	r3, [r7, #20]
 8001f88:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8001f8a:	e02a      	b.n	8001fe2 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM6)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a17      	ldr	r2, [pc, #92]	; (8001ff0 <HAL_TIM_Base_MspInit+0x90>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d114      	bne.n	8001fc0 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001f96:	4b15      	ldr	r3, [pc, #84]	; (8001fec <HAL_TIM_Base_MspInit+0x8c>)
 8001f98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f9a:	4a14      	ldr	r2, [pc, #80]	; (8001fec <HAL_TIM_Base_MspInit+0x8c>)
 8001f9c:	f043 0310 	orr.w	r3, r3, #16
 8001fa0:	6593      	str	r3, [r2, #88]	; 0x58
 8001fa2:	4b12      	ldr	r3, [pc, #72]	; (8001fec <HAL_TIM_Base_MspInit+0x8c>)
 8001fa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fa6:	f003 0310 	and.w	r3, r3, #16
 8001faa:	613b      	str	r3, [r7, #16]
 8001fac:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001fae:	2200      	movs	r2, #0
 8001fb0:	2100      	movs	r1, #0
 8001fb2:	2036      	movs	r0, #54	; 0x36
 8001fb4:	f001 f93f 	bl	8003236 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001fb8:	2036      	movs	r0, #54	; 0x36
 8001fba:	f001 f958 	bl	800326e <HAL_NVIC_EnableIRQ>
}
 8001fbe:	e010      	b.n	8001fe2 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM7)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a0b      	ldr	r2, [pc, #44]	; (8001ff4 <HAL_TIM_Base_MspInit+0x94>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d10b      	bne.n	8001fe2 <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001fca:	4b08      	ldr	r3, [pc, #32]	; (8001fec <HAL_TIM_Base_MspInit+0x8c>)
 8001fcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fce:	4a07      	ldr	r2, [pc, #28]	; (8001fec <HAL_TIM_Base_MspInit+0x8c>)
 8001fd0:	f043 0320 	orr.w	r3, r3, #32
 8001fd4:	6593      	str	r3, [r2, #88]	; 0x58
 8001fd6:	4b05      	ldr	r3, [pc, #20]	; (8001fec <HAL_TIM_Base_MspInit+0x8c>)
 8001fd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fda:	f003 0320 	and.w	r3, r3, #32
 8001fde:	60fb      	str	r3, [r7, #12]
 8001fe0:	68fb      	ldr	r3, [r7, #12]
}
 8001fe2:	bf00      	nop
 8001fe4:	3718      	adds	r7, #24
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	40021000 	.word	0x40021000
 8001ff0:	40001000 	.word	0x40001000
 8001ff4:	40001400 	.word	0x40001400

08001ff8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ffc:	e7fe      	b.n	8001ffc <NMI_Handler+0x4>

08001ffe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ffe:	b480      	push	{r7}
 8002000:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002002:	e7fe      	b.n	8002002 <HardFault_Handler+0x4>

08002004 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002008:	e7fe      	b.n	8002008 <MemManage_Handler+0x4>

0800200a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800200a:	b480      	push	{r7}
 800200c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800200e:	e7fe      	b.n	800200e <BusFault_Handler+0x4>

08002010 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002014:	e7fe      	b.n	8002014 <UsageFault_Handler+0x4>

08002016 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002016:	b480      	push	{r7}
 8002018:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800201a:	bf00      	nop
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr

08002024 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002028:	bf00      	nop
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr

08002032 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002032:	b480      	push	{r7}
 8002034:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002036:	bf00      	nop
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr

08002040 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002044:	f000 f8f0 	bl	8002228 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002048:	bf00      	nop
 800204a:	bd80      	pop	{r7, pc}

0800204c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 8002050:	4802      	ldr	r0, [pc, #8]	; (800205c <DMA1_Channel4_IRQHandler+0x10>)
 8002052:	f001 fce5 	bl	8003a20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8002056:	bf00      	nop
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	20000a94 	.word	0x20000a94

08002060 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8002064:	4802      	ldr	r0, [pc, #8]	; (8002070 <SDMMC1_IRQHandler+0x10>)
 8002066:	f006 fcd5 	bl	8008a14 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 800206a:	bf00      	nop
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	20000bc0 	.word	0x20000bc0

08002074 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002078:	4802      	ldr	r0, [pc, #8]	; (8002084 <TIM6_DAC_IRQHandler+0x10>)
 800207a:	f008 fbba 	bl	800a7f2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800207e:	bf00      	nop
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	20000db8 	.word	0x20000db8

08002088 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800208c:	4802      	ldr	r0, [pc, #8]	; (8002098 <OTG_FS_IRQHandler+0x10>)
 800208e:	f002 fa14 	bl	80044ba <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002092:	bf00      	nop
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	20002374 	.word	0x20002374

0800209c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b086      	sub	sp, #24
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020a4:	4a14      	ldr	r2, [pc, #80]	; (80020f8 <_sbrk+0x5c>)
 80020a6:	4b15      	ldr	r3, [pc, #84]	; (80020fc <_sbrk+0x60>)
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020b0:	4b13      	ldr	r3, [pc, #76]	; (8002100 <_sbrk+0x64>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d102      	bne.n	80020be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020b8:	4b11      	ldr	r3, [pc, #68]	; (8002100 <_sbrk+0x64>)
 80020ba:	4a12      	ldr	r2, [pc, #72]	; (8002104 <_sbrk+0x68>)
 80020bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020be:	4b10      	ldr	r3, [pc, #64]	; (8002100 <_sbrk+0x64>)
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4413      	add	r3, r2
 80020c6:	693a      	ldr	r2, [r7, #16]
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d207      	bcs.n	80020dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020cc:	f010 f932 	bl	8012334 <__errno>
 80020d0:	4603      	mov	r3, r0
 80020d2:	220c      	movs	r2, #12
 80020d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020d6:	f04f 33ff 	mov.w	r3, #4294967295
 80020da:	e009      	b.n	80020f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020dc:	4b08      	ldr	r3, [pc, #32]	; (8002100 <_sbrk+0x64>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020e2:	4b07      	ldr	r3, [pc, #28]	; (8002100 <_sbrk+0x64>)
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4413      	add	r3, r2
 80020ea:	4a05      	ldr	r2, [pc, #20]	; (8002100 <_sbrk+0x64>)
 80020ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020ee:	68fb      	ldr	r3, [r7, #12]
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3718      	adds	r7, #24
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	200a0000 	.word	0x200a0000
 80020fc:	00000800 	.word	0x00000800
 8002100:	20000e58 	.word	0x20000e58
 8002104:	20002d30 	.word	0x20002d30

08002108 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800210c:	4b06      	ldr	r3, [pc, #24]	; (8002128 <SystemInit+0x20>)
 800210e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002112:	4a05      	ldr	r2, [pc, #20]	; (8002128 <SystemInit+0x20>)
 8002114:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002118:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800211c:	bf00      	nop
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	e000ed00 	.word	0xe000ed00

0800212c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800212c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002164 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002130:	f7ff ffea 	bl	8002108 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002134:	480c      	ldr	r0, [pc, #48]	; (8002168 <LoopForever+0x6>)
  ldr r1, =_edata
 8002136:	490d      	ldr	r1, [pc, #52]	; (800216c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002138:	4a0d      	ldr	r2, [pc, #52]	; (8002170 <LoopForever+0xe>)
  movs r3, #0
 800213a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800213c:	e002      	b.n	8002144 <LoopCopyDataInit>

0800213e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800213e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002140:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002142:	3304      	adds	r3, #4

08002144 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002144:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002146:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002148:	d3f9      	bcc.n	800213e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800214a:	4a0a      	ldr	r2, [pc, #40]	; (8002174 <LoopForever+0x12>)
  ldr r4, =_ebss
 800214c:	4c0a      	ldr	r4, [pc, #40]	; (8002178 <LoopForever+0x16>)
  movs r3, #0
 800214e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002150:	e001      	b.n	8002156 <LoopFillZerobss>

08002152 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002152:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002154:	3204      	adds	r2, #4

08002156 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002156:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002158:	d3fb      	bcc.n	8002152 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800215a:	f010 f8f1 	bl	8012340 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800215e:	f7fe fd63 	bl	8000c28 <main>

08002162 <LoopForever>:

LoopForever:
    b LoopForever
 8002162:	e7fe      	b.n	8002162 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002164:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8002168:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800216c:	20000944 	.word	0x20000944
  ldr r2, =_sidata
 8002170:	08014178 	.word	0x08014178
  ldr r2, =_sbss
 8002174:	20000960 	.word	0x20000960
  ldr r4, =_ebss
 8002178:	20002d30 	.word	0x20002d30

0800217c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800217c:	e7fe      	b.n	800217c <ADC1_IRQHandler>

0800217e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800217e:	b580      	push	{r7, lr}
 8002180:	b082      	sub	sp, #8
 8002182:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002184:	2300      	movs	r3, #0
 8002186:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002188:	2003      	movs	r0, #3
 800218a:	f001 f849 	bl	8003220 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800218e:	2000      	movs	r0, #0
 8002190:	f000 f80e 	bl	80021b0 <HAL_InitTick>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d002      	beq.n	80021a0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	71fb      	strb	r3, [r7, #7]
 800219e:	e001      	b.n	80021a4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80021a0:	f7ff faca 	bl	8001738 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80021a4:	79fb      	ldrb	r3, [r7, #7]
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3708      	adds	r7, #8
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
	...

080021b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b084      	sub	sp, #16
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80021b8:	2300      	movs	r3, #0
 80021ba:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80021bc:	4b17      	ldr	r3, [pc, #92]	; (800221c <HAL_InitTick+0x6c>)
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d023      	beq.n	800220c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80021c4:	4b16      	ldr	r3, [pc, #88]	; (8002220 <HAL_InitTick+0x70>)
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	4b14      	ldr	r3, [pc, #80]	; (800221c <HAL_InitTick+0x6c>)
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	4619      	mov	r1, r3
 80021ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80021d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80021da:	4618      	mov	r0, r3
 80021dc:	f001 f855 	bl	800328a <HAL_SYSTICK_Config>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d10f      	bne.n	8002206 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2b0f      	cmp	r3, #15
 80021ea:	d809      	bhi.n	8002200 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021ec:	2200      	movs	r2, #0
 80021ee:	6879      	ldr	r1, [r7, #4]
 80021f0:	f04f 30ff 	mov.w	r0, #4294967295
 80021f4:	f001 f81f 	bl	8003236 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80021f8:	4a0a      	ldr	r2, [pc, #40]	; (8002224 <HAL_InitTick+0x74>)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6013      	str	r3, [r2, #0]
 80021fe:	e007      	b.n	8002210 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	73fb      	strb	r3, [r7, #15]
 8002204:	e004      	b.n	8002210 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	73fb      	strb	r3, [r7, #15]
 800220a:	e001      	b.n	8002210 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002210:	7bfb      	ldrb	r3, [r7, #15]
}
 8002212:	4618      	mov	r0, r3
 8002214:	3710      	adds	r7, #16
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	20000008 	.word	0x20000008
 8002220:	20000000 	.word	0x20000000
 8002224:	20000004 	.word	0x20000004

08002228 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800222c:	4b06      	ldr	r3, [pc, #24]	; (8002248 <HAL_IncTick+0x20>)
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	461a      	mov	r2, r3
 8002232:	4b06      	ldr	r3, [pc, #24]	; (800224c <HAL_IncTick+0x24>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4413      	add	r3, r2
 8002238:	4a04      	ldr	r2, [pc, #16]	; (800224c <HAL_IncTick+0x24>)
 800223a:	6013      	str	r3, [r2, #0]
}
 800223c:	bf00      	nop
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr
 8002246:	bf00      	nop
 8002248:	20000008 	.word	0x20000008
 800224c:	20000e5c 	.word	0x20000e5c

08002250 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002250:	b480      	push	{r7}
 8002252:	af00      	add	r7, sp, #0
  return uwTick;
 8002254:	4b03      	ldr	r3, [pc, #12]	; (8002264 <HAL_GetTick+0x14>)
 8002256:	681b      	ldr	r3, [r3, #0]
}
 8002258:	4618      	mov	r0, r3
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr
 8002262:	bf00      	nop
 8002264:	20000e5c 	.word	0x20000e5c

08002268 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b084      	sub	sp, #16
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002270:	f7ff ffee 	bl	8002250 <HAL_GetTick>
 8002274:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002280:	d005      	beq.n	800228e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002282:	4b0a      	ldr	r3, [pc, #40]	; (80022ac <HAL_Delay+0x44>)
 8002284:	781b      	ldrb	r3, [r3, #0]
 8002286:	461a      	mov	r2, r3
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	4413      	add	r3, r2
 800228c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800228e:	bf00      	nop
 8002290:	f7ff ffde 	bl	8002250 <HAL_GetTick>
 8002294:	4602      	mov	r2, r0
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	68fa      	ldr	r2, [r7, #12]
 800229c:	429a      	cmp	r2, r3
 800229e:	d8f7      	bhi.n	8002290 <HAL_Delay+0x28>
  {
  }
}
 80022a0:	bf00      	nop
 80022a2:	bf00      	nop
 80022a4:	3710      	adds	r7, #16
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	20000008 	.word	0x20000008

080022b0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
 80022b8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	431a      	orrs	r2, r3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	609a      	str	r2, [r3, #8]
}
 80022ca:	bf00      	nop
 80022cc:	370c      	adds	r7, #12
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr

080022d6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80022d6:	b480      	push	{r7}
 80022d8:	b083      	sub	sp, #12
 80022da:	af00      	add	r7, sp, #0
 80022dc:	6078      	str	r0, [r7, #4]
 80022de:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	431a      	orrs	r2, r3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	609a      	str	r2, [r3, #8]
}
 80022f0:	bf00      	nop
 80022f2:	370c      	adds	r7, #12
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr

080022fc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b083      	sub	sp, #12
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800230c:	4618      	mov	r0, r3
 800230e:	370c      	adds	r7, #12
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr

08002318 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002318:	b480      	push	{r7}
 800231a:	b087      	sub	sp, #28
 800231c:	af00      	add	r7, sp, #0
 800231e:	60f8      	str	r0, [r7, #12]
 8002320:	60b9      	str	r1, [r7, #8]
 8002322:	607a      	str	r2, [r7, #4]
 8002324:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	3360      	adds	r3, #96	; 0x60
 800232a:	461a      	mov	r2, r3
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	4413      	add	r3, r2
 8002332:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	4b08      	ldr	r3, [pc, #32]	; (800235c <LL_ADC_SetOffset+0x44>)
 800233a:	4013      	ands	r3, r2
 800233c:	687a      	ldr	r2, [r7, #4]
 800233e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002342:	683a      	ldr	r2, [r7, #0]
 8002344:	430a      	orrs	r2, r1
 8002346:	4313      	orrs	r3, r2
 8002348:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002350:	bf00      	nop
 8002352:	371c      	adds	r7, #28
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr
 800235c:	03fff000 	.word	0x03fff000

08002360 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002360:	b480      	push	{r7}
 8002362:	b085      	sub	sp, #20
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	3360      	adds	r3, #96	; 0x60
 800236e:	461a      	mov	r2, r3
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	4413      	add	r3, r2
 8002376:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002380:	4618      	mov	r0, r3
 8002382:	3714      	adds	r7, #20
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr

0800238c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800238c:	b480      	push	{r7}
 800238e:	b087      	sub	sp, #28
 8002390:	af00      	add	r7, sp, #0
 8002392:	60f8      	str	r0, [r7, #12]
 8002394:	60b9      	str	r1, [r7, #8]
 8002396:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	3360      	adds	r3, #96	; 0x60
 800239c:	461a      	mov	r2, r3
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	009b      	lsls	r3, r3, #2
 80023a2:	4413      	add	r3, r2
 80023a4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	431a      	orrs	r2, r3
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80023b6:	bf00      	nop
 80023b8:	371c      	adds	r7, #28
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr

080023c2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80023c2:	b480      	push	{r7}
 80023c4:	b083      	sub	sp, #12
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	6078      	str	r0, [r7, #4]
 80023ca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	695b      	ldr	r3, [r3, #20]
 80023d0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	431a      	orrs	r2, r3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	615a      	str	r2, [r3, #20]
}
 80023dc:	bf00      	nop
 80023de:	370c      	adds	r7, #12
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr

080023e8 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b087      	sub	sp, #28
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	60f8      	str	r0, [r7, #12]
 80023f0:	60b9      	str	r1, [r7, #8]
 80023f2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	3330      	adds	r3, #48	; 0x30
 80023f8:	461a      	mov	r2, r3
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	0a1b      	lsrs	r3, r3, #8
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	f003 030c 	and.w	r3, r3, #12
 8002404:	4413      	add	r3, r2
 8002406:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	f003 031f 	and.w	r3, r3, #31
 8002412:	211f      	movs	r1, #31
 8002414:	fa01 f303 	lsl.w	r3, r1, r3
 8002418:	43db      	mvns	r3, r3
 800241a:	401a      	ands	r2, r3
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	0e9b      	lsrs	r3, r3, #26
 8002420:	f003 011f 	and.w	r1, r3, #31
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	f003 031f 	and.w	r3, r3, #31
 800242a:	fa01 f303 	lsl.w	r3, r1, r3
 800242e:	431a      	orrs	r2, r3
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002434:	bf00      	nop
 8002436:	371c      	adds	r7, #28
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr

08002440 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002440:	b480      	push	{r7}
 8002442:	b087      	sub	sp, #28
 8002444:	af00      	add	r7, sp, #0
 8002446:	60f8      	str	r0, [r7, #12]
 8002448:	60b9      	str	r1, [r7, #8]
 800244a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	3314      	adds	r3, #20
 8002450:	461a      	mov	r2, r3
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	0e5b      	lsrs	r3, r3, #25
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	f003 0304 	and.w	r3, r3, #4
 800245c:	4413      	add	r3, r2
 800245e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	0d1b      	lsrs	r3, r3, #20
 8002468:	f003 031f 	and.w	r3, r3, #31
 800246c:	2107      	movs	r1, #7
 800246e:	fa01 f303 	lsl.w	r3, r1, r3
 8002472:	43db      	mvns	r3, r3
 8002474:	401a      	ands	r2, r3
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	0d1b      	lsrs	r3, r3, #20
 800247a:	f003 031f 	and.w	r3, r3, #31
 800247e:	6879      	ldr	r1, [r7, #4]
 8002480:	fa01 f303 	lsl.w	r3, r1, r3
 8002484:	431a      	orrs	r2, r3
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800248a:	bf00      	nop
 800248c:	371c      	adds	r7, #28
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr
	...

08002498 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002498:	b480      	push	{r7}
 800249a:	b085      	sub	sp, #20
 800249c:	af00      	add	r7, sp, #0
 800249e:	60f8      	str	r0, [r7, #12]
 80024a0:	60b9      	str	r1, [r7, #8]
 80024a2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024b0:	43db      	mvns	r3, r3
 80024b2:	401a      	ands	r2, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	f003 0318 	and.w	r3, r3, #24
 80024ba:	4908      	ldr	r1, [pc, #32]	; (80024dc <LL_ADC_SetChannelSingleDiff+0x44>)
 80024bc:	40d9      	lsrs	r1, r3
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	400b      	ands	r3, r1
 80024c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024c6:	431a      	orrs	r2, r3
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80024ce:	bf00      	nop
 80024d0:	3714      	adds	r7, #20
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop
 80024dc:	0007ffff 	.word	0x0007ffff

080024e0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b083      	sub	sp, #12
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80024f0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80024f4:	687a      	ldr	r2, [r7, #4]
 80024f6:	6093      	str	r3, [r2, #8]
}
 80024f8:	bf00      	nop
 80024fa:	370c      	adds	r7, #12
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr

08002504 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002504:	b480      	push	{r7}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002514:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002518:	d101      	bne.n	800251e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800251a:	2301      	movs	r3, #1
 800251c:	e000      	b.n	8002520 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800251e:	2300      	movs	r3, #0
}
 8002520:	4618      	mov	r0, r3
 8002522:	370c      	adds	r7, #12
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr

0800252c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800253c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002540:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002548:	bf00      	nop
 800254a:	370c      	adds	r7, #12
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr

08002554 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002554:	b480      	push	{r7}
 8002556:	b083      	sub	sp, #12
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002564:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002568:	d101      	bne.n	800256e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800256a:	2301      	movs	r3, #1
 800256c:	e000      	b.n	8002570 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800256e:	2300      	movs	r3, #0
}
 8002570:	4618      	mov	r0, r3
 8002572:	370c      	adds	r7, #12
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr

0800257c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800257c:	b480      	push	{r7}
 800257e:	b083      	sub	sp, #12
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	f003 0301 	and.w	r3, r3, #1
 800258c:	2b01      	cmp	r3, #1
 800258e:	d101      	bne.n	8002594 <LL_ADC_IsEnabled+0x18>
 8002590:	2301      	movs	r3, #1
 8002592:	e000      	b.n	8002596 <LL_ADC_IsEnabled+0x1a>
 8002594:	2300      	movs	r3, #0
}
 8002596:	4618      	mov	r0, r3
 8002598:	370c      	adds	r7, #12
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr

080025a2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80025a2:	b480      	push	{r7}
 80025a4:	b083      	sub	sp, #12
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	f003 0304 	and.w	r3, r3, #4
 80025b2:	2b04      	cmp	r3, #4
 80025b4:	d101      	bne.n	80025ba <LL_ADC_REG_IsConversionOngoing+0x18>
 80025b6:	2301      	movs	r3, #1
 80025b8:	e000      	b.n	80025bc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80025ba:	2300      	movs	r3, #0
}
 80025bc:	4618      	mov	r0, r3
 80025be:	370c      	adds	r7, #12
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr

080025c8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	f003 0308 	and.w	r3, r3, #8
 80025d8:	2b08      	cmp	r3, #8
 80025da:	d101      	bne.n	80025e0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80025dc:	2301      	movs	r3, #1
 80025de:	e000      	b.n	80025e2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80025e0:	2300      	movs	r3, #0
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	370c      	adds	r7, #12
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr
	...

080025f0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b088      	sub	sp, #32
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025f8:	2300      	movs	r3, #0
 80025fa:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80025fc:	2300      	movs	r3, #0
 80025fe:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d101      	bne.n	800260a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e12f      	b.n	800286a <HAL_ADC_Init+0x27a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	691b      	ldr	r3, [r3, #16]
 800260e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002614:	2b00      	cmp	r3, #0
 8002616:	d109      	bne.n	800262c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002618:	6878      	ldr	r0, [r7, #4]
 800261a:	f7ff f8b1 	bl	8001780 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2200      	movs	r2, #0
 8002622:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2200      	movs	r2, #0
 8002628:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4618      	mov	r0, r3
 8002632:	f7ff ff67 	bl	8002504 <LL_ADC_IsDeepPowerDownEnabled>
 8002636:	4603      	mov	r3, r0
 8002638:	2b00      	cmp	r3, #0
 800263a:	d004      	beq.n	8002646 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4618      	mov	r0, r3
 8002642:	f7ff ff4d 	bl	80024e0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4618      	mov	r0, r3
 800264c:	f7ff ff82 	bl	8002554 <LL_ADC_IsInternalRegulatorEnabled>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d115      	bne.n	8002682 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4618      	mov	r0, r3
 800265c:	f7ff ff66 	bl	800252c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002660:	4b84      	ldr	r3, [pc, #528]	; (8002874 <HAL_ADC_Init+0x284>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	099b      	lsrs	r3, r3, #6
 8002666:	4a84      	ldr	r2, [pc, #528]	; (8002878 <HAL_ADC_Init+0x288>)
 8002668:	fba2 2303 	umull	r2, r3, r2, r3
 800266c:	099b      	lsrs	r3, r3, #6
 800266e:	3301      	adds	r3, #1
 8002670:	005b      	lsls	r3, r3, #1
 8002672:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002674:	e002      	b.n	800267c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	3b01      	subs	r3, #1
 800267a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d1f9      	bne.n	8002676 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4618      	mov	r0, r3
 8002688:	f7ff ff64 	bl	8002554 <LL_ADC_IsInternalRegulatorEnabled>
 800268c:	4603      	mov	r3, r0
 800268e:	2b00      	cmp	r3, #0
 8002690:	d10d      	bne.n	80026ae <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002696:	f043 0210 	orr.w	r2, r3, #16
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026a2:	f043 0201 	orr.w	r2, r3, #1
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4618      	mov	r0, r3
 80026b4:	f7ff ff75 	bl	80025a2 <LL_ADC_REG_IsConversionOngoing>
 80026b8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026be:	f003 0310 	and.w	r3, r3, #16
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	f040 80c8 	bne.w	8002858 <HAL_ADC_Init+0x268>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	f040 80c4 	bne.w	8002858 <HAL_ADC_Init+0x268>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026d4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80026d8:	f043 0202 	orr.w	r2, r3, #2
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4618      	mov	r0, r3
 80026e6:	f7ff ff49 	bl	800257c <LL_ADC_IsEnabled>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d10b      	bne.n	8002708 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80026f0:	4862      	ldr	r0, [pc, #392]	; (800287c <HAL_ADC_Init+0x28c>)
 80026f2:	f7ff ff43 	bl	800257c <LL_ADC_IsEnabled>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d105      	bne.n	8002708 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	4619      	mov	r1, r3
 8002702:	485f      	ldr	r0, [pc, #380]	; (8002880 <HAL_ADC_Init+0x290>)
 8002704:	f7ff fdd4 	bl	80022b0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	7e5b      	ldrb	r3, [r3, #25]
 800270c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002712:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002718:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800271e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002726:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002728:	4313      	orrs	r3, r2
 800272a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002732:	2b01      	cmp	r3, #1
 8002734:	d106      	bne.n	8002744 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800273a:	3b01      	subs	r3, #1
 800273c:	045b      	lsls	r3, r3, #17
 800273e:	69ba      	ldr	r2, [r7, #24]
 8002740:	4313      	orrs	r3, r2
 8002742:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002748:	2b00      	cmp	r3, #0
 800274a:	d009      	beq.n	8002760 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002750:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002758:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800275a:	69ba      	ldr	r2, [r7, #24]
 800275c:	4313      	orrs	r3, r2
 800275e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	68da      	ldr	r2, [r3, #12]
 8002766:	4b47      	ldr	r3, [pc, #284]	; (8002884 <HAL_ADC_Init+0x294>)
 8002768:	4013      	ands	r3, r2
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	6812      	ldr	r2, [r2, #0]
 800276e:	69b9      	ldr	r1, [r7, #24]
 8002770:	430b      	orrs	r3, r1
 8002772:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4618      	mov	r0, r3
 800277a:	f7ff ff12 	bl	80025a2 <LL_ADC_REG_IsConversionOngoing>
 800277e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4618      	mov	r0, r3
 8002786:	f7ff ff1f 	bl	80025c8 <LL_ADC_INJ_IsConversionOngoing>
 800278a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d140      	bne.n	8002814 <HAL_ADC_Init+0x224>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d13d      	bne.n	8002814 <HAL_ADC_Init+0x224>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	7e1b      	ldrb	r3, [r3, #24]
 80027a0:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80027a2:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80027aa:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80027ac:	4313      	orrs	r3, r2
 80027ae:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	68db      	ldr	r3, [r3, #12]
 80027b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80027ba:	f023 0306 	bic.w	r3, r3, #6
 80027be:	687a      	ldr	r2, [r7, #4]
 80027c0:	6812      	ldr	r2, [r2, #0]
 80027c2:	69b9      	ldr	r1, [r7, #24]
 80027c4:	430b      	orrs	r3, r1
 80027c6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d118      	bne.n	8002804 <HAL_ADC_Init+0x214>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	691b      	ldr	r3, [r3, #16]
 80027d8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80027dc:	f023 0304 	bic.w	r3, r3, #4
 80027e0:	687a      	ldr	r2, [r7, #4]
 80027e2:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80027e4:	687a      	ldr	r2, [r7, #4]
 80027e6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80027e8:	4311      	orrs	r1, r2
 80027ea:	687a      	ldr	r2, [r7, #4]
 80027ec:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80027ee:	4311      	orrs	r1, r2
 80027f0:	687a      	ldr	r2, [r7, #4]
 80027f2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80027f4:	430a      	orrs	r2, r1
 80027f6:	431a      	orrs	r2, r3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f042 0201 	orr.w	r2, r2, #1
 8002800:	611a      	str	r2, [r3, #16]
 8002802:	e007      	b.n	8002814 <HAL_ADC_Init+0x224>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	691a      	ldr	r2, [r3, #16]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f022 0201 	bic.w	r2, r2, #1
 8002812:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	691b      	ldr	r3, [r3, #16]
 8002818:	2b01      	cmp	r3, #1
 800281a:	d10c      	bne.n	8002836 <HAL_ADC_Init+0x246>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002822:	f023 010f 	bic.w	r1, r3, #15
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	69db      	ldr	r3, [r3, #28]
 800282a:	1e5a      	subs	r2, r3, #1
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	430a      	orrs	r2, r1
 8002832:	631a      	str	r2, [r3, #48]	; 0x30
 8002834:	e007      	b.n	8002846 <HAL_ADC_Init+0x256>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f022 020f 	bic.w	r2, r2, #15
 8002844:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800284a:	f023 0303 	bic.w	r3, r3, #3
 800284e:	f043 0201 	orr.w	r2, r3, #1
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	659a      	str	r2, [r3, #88]	; 0x58
 8002856:	e007      	b.n	8002868 <HAL_ADC_Init+0x278>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800285c:	f043 0210 	orr.w	r2, r3, #16
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002868:	7ffb      	ldrb	r3, [r7, #31]
}
 800286a:	4618      	mov	r0, r3
 800286c:	3720      	adds	r7, #32
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	20000000 	.word	0x20000000
 8002878:	053e2d63 	.word	0x053e2d63
 800287c:	50040000 	.word	0x50040000
 8002880:	50040300 	.word	0x50040300
 8002884:	fff0c007 	.word	0xfff0c007

08002888 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b0b6      	sub	sp, #216	; 0xd8
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002892:	2300      	movs	r3, #0
 8002894:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002898:	2300      	movs	r3, #0
 800289a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d101      	bne.n	80028aa <HAL_ADC_ConfigChannel+0x22>
 80028a6:	2302      	movs	r3, #2
 80028a8:	e3d5      	b.n	8003056 <HAL_ADC_ConfigChannel+0x7ce>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2201      	movs	r2, #1
 80028ae:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4618      	mov	r0, r3
 80028b8:	f7ff fe73 	bl	80025a2 <LL_ADC_REG_IsConversionOngoing>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	f040 83ba 	bne.w	8003038 <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	2b05      	cmp	r3, #5
 80028ca:	d824      	bhi.n	8002916 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	3b02      	subs	r3, #2
 80028d2:	2b03      	cmp	r3, #3
 80028d4:	d81b      	bhi.n	800290e <HAL_ADC_ConfigChannel+0x86>
 80028d6:	a201      	add	r2, pc, #4	; (adr r2, 80028dc <HAL_ADC_ConfigChannel+0x54>)
 80028d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028dc:	080028ed 	.word	0x080028ed
 80028e0:	080028f5 	.word	0x080028f5
 80028e4:	080028fd 	.word	0x080028fd
 80028e8:	08002905 	.word	0x08002905
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	220c      	movs	r2, #12
 80028f0:	605a      	str	r2, [r3, #4]
          break;
 80028f2:	e011      	b.n	8002918 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	2212      	movs	r2, #18
 80028f8:	605a      	str	r2, [r3, #4]
          break;
 80028fa:	e00d      	b.n	8002918 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	2218      	movs	r2, #24
 8002900:	605a      	str	r2, [r3, #4]
          break;
 8002902:	e009      	b.n	8002918 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	f44f 7280 	mov.w	r2, #256	; 0x100
 800290a:	605a      	str	r2, [r3, #4]
          break;
 800290c:	e004      	b.n	8002918 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	2206      	movs	r2, #6
 8002912:	605a      	str	r2, [r3, #4]
          break;
 8002914:	e000      	b.n	8002918 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002916:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6818      	ldr	r0, [r3, #0]
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	6859      	ldr	r1, [r3, #4]
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	461a      	mov	r2, r3
 8002926:	f7ff fd5f 	bl	80023e8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4618      	mov	r0, r3
 8002930:	f7ff fe37 	bl	80025a2 <LL_ADC_REG_IsConversionOngoing>
 8002934:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4618      	mov	r0, r3
 800293e:	f7ff fe43 	bl	80025c8 <LL_ADC_INJ_IsConversionOngoing>
 8002942:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002946:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800294a:	2b00      	cmp	r3, #0
 800294c:	f040 81c1 	bne.w	8002cd2 <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002950:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002954:	2b00      	cmp	r3, #0
 8002956:	f040 81bc 	bne.w	8002cd2 <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002962:	d10f      	bne.n	8002984 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6818      	ldr	r0, [r3, #0]
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	2200      	movs	r2, #0
 800296e:	4619      	mov	r1, r3
 8002970:	f7ff fd66 	bl	8002440 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800297c:	4618      	mov	r0, r3
 800297e:	f7ff fd20 	bl	80023c2 <LL_ADC_SetSamplingTimeCommonConfig>
 8002982:	e00e      	b.n	80029a2 <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6818      	ldr	r0, [r3, #0]
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	6819      	ldr	r1, [r3, #0]
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	461a      	mov	r2, r3
 8002992:	f7ff fd55 	bl	8002440 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	2100      	movs	r1, #0
 800299c:	4618      	mov	r0, r3
 800299e:	f7ff fd10 	bl	80023c2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	695a      	ldr	r2, [r3, #20]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	08db      	lsrs	r3, r3, #3
 80029ae:	f003 0303 	and.w	r3, r3, #3
 80029b2:	005b      	lsls	r3, r3, #1
 80029b4:	fa02 f303 	lsl.w	r3, r2, r3
 80029b8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	691b      	ldr	r3, [r3, #16]
 80029c0:	2b04      	cmp	r3, #4
 80029c2:	d00a      	beq.n	80029da <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6818      	ldr	r0, [r3, #0]
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	6919      	ldr	r1, [r3, #16]
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80029d4:	f7ff fca0 	bl	8002318 <LL_ADC_SetOffset>
 80029d8:	e17b      	b.n	8002cd2 <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	2100      	movs	r1, #0
 80029e0:	4618      	mov	r0, r3
 80029e2:	f7ff fcbd 	bl	8002360 <LL_ADC_GetOffsetChannel>
 80029e6:	4603      	mov	r3, r0
 80029e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d10a      	bne.n	8002a06 <HAL_ADC_ConfigChannel+0x17e>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	2100      	movs	r1, #0
 80029f6:	4618      	mov	r0, r3
 80029f8:	f7ff fcb2 	bl	8002360 <LL_ADC_GetOffsetChannel>
 80029fc:	4603      	mov	r3, r0
 80029fe:	0e9b      	lsrs	r3, r3, #26
 8002a00:	f003 021f 	and.w	r2, r3, #31
 8002a04:	e01e      	b.n	8002a44 <HAL_ADC_ConfigChannel+0x1bc>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	2100      	movs	r1, #0
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f7ff fca7 	bl	8002360 <LL_ADC_GetOffsetChannel>
 8002a12:	4603      	mov	r3, r0
 8002a14:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a18:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002a1c:	fa93 f3a3 	rbit	r3, r3
 8002a20:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002a24:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002a28:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002a2c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d101      	bne.n	8002a38 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8002a34:	2320      	movs	r3, #32
 8002a36:	e004      	b.n	8002a42 <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8002a38:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002a3c:	fab3 f383 	clz	r3, r3
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d105      	bne.n	8002a5c <HAL_ADC_ConfigChannel+0x1d4>
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	0e9b      	lsrs	r3, r3, #26
 8002a56:	f003 031f 	and.w	r3, r3, #31
 8002a5a:	e018      	b.n	8002a8e <HAL_ADC_ConfigChannel+0x206>
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a64:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002a68:	fa93 f3a3 	rbit	r3, r3
 8002a6c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002a70:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002a74:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002a78:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d101      	bne.n	8002a84 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8002a80:	2320      	movs	r3, #32
 8002a82:	e004      	b.n	8002a8e <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8002a84:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002a88:	fab3 f383 	clz	r3, r3
 8002a8c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d106      	bne.n	8002aa0 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	2200      	movs	r2, #0
 8002a98:	2100      	movs	r1, #0
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f7ff fc76 	bl	800238c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	2101      	movs	r1, #1
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f7ff fc5a 	bl	8002360 <LL_ADC_GetOffsetChannel>
 8002aac:	4603      	mov	r3, r0
 8002aae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d10a      	bne.n	8002acc <HAL_ADC_ConfigChannel+0x244>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	2101      	movs	r1, #1
 8002abc:	4618      	mov	r0, r3
 8002abe:	f7ff fc4f 	bl	8002360 <LL_ADC_GetOffsetChannel>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	0e9b      	lsrs	r3, r3, #26
 8002ac6:	f003 021f 	and.w	r2, r3, #31
 8002aca:	e01e      	b.n	8002b0a <HAL_ADC_ConfigChannel+0x282>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	2101      	movs	r1, #1
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f7ff fc44 	bl	8002360 <LL_ADC_GetOffsetChannel>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ade:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002ae2:	fa93 f3a3 	rbit	r3, r3
 8002ae6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002aea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002aee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002af2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d101      	bne.n	8002afe <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8002afa:	2320      	movs	r3, #32
 8002afc:	e004      	b.n	8002b08 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8002afe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002b02:	fab3 f383 	clz	r3, r3
 8002b06:	b2db      	uxtb	r3, r3
 8002b08:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d105      	bne.n	8002b22 <HAL_ADC_ConfigChannel+0x29a>
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	0e9b      	lsrs	r3, r3, #26
 8002b1c:	f003 031f 	and.w	r3, r3, #31
 8002b20:	e018      	b.n	8002b54 <HAL_ADC_ConfigChannel+0x2cc>
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b2a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002b2e:	fa93 f3a3 	rbit	r3, r3
 8002b32:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002b36:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002b3a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002b3e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d101      	bne.n	8002b4a <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 8002b46:	2320      	movs	r3, #32
 8002b48:	e004      	b.n	8002b54 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 8002b4a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002b4e:	fab3 f383 	clz	r3, r3
 8002b52:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d106      	bne.n	8002b66 <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	2101      	movs	r1, #1
 8002b60:	4618      	mov	r0, r3
 8002b62:	f7ff fc13 	bl	800238c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	2102      	movs	r1, #2
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f7ff fbf7 	bl	8002360 <LL_ADC_GetOffsetChannel>
 8002b72:	4603      	mov	r3, r0
 8002b74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d10a      	bne.n	8002b92 <HAL_ADC_ConfigChannel+0x30a>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	2102      	movs	r1, #2
 8002b82:	4618      	mov	r0, r3
 8002b84:	f7ff fbec 	bl	8002360 <LL_ADC_GetOffsetChannel>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	0e9b      	lsrs	r3, r3, #26
 8002b8c:	f003 021f 	and.w	r2, r3, #31
 8002b90:	e01e      	b.n	8002bd0 <HAL_ADC_ConfigChannel+0x348>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	2102      	movs	r1, #2
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f7ff fbe1 	bl	8002360 <LL_ADC_GetOffsetChannel>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ba4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ba8:	fa93 f3a3 	rbit	r3, r3
 8002bac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002bb0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002bb4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002bb8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d101      	bne.n	8002bc4 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8002bc0:	2320      	movs	r3, #32
 8002bc2:	e004      	b.n	8002bce <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8002bc4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002bc8:	fab3 f383 	clz	r3, r3
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d105      	bne.n	8002be8 <HAL_ADC_ConfigChannel+0x360>
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	0e9b      	lsrs	r3, r3, #26
 8002be2:	f003 031f 	and.w	r3, r3, #31
 8002be6:	e016      	b.n	8002c16 <HAL_ADC_ConfigChannel+0x38e>
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bf0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002bf4:	fa93 f3a3 	rbit	r3, r3
 8002bf8:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002bfa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002bfc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002c00:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d101      	bne.n	8002c0c <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8002c08:	2320      	movs	r3, #32
 8002c0a:	e004      	b.n	8002c16 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8002c0c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c10:	fab3 f383 	clz	r3, r3
 8002c14:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002c16:	429a      	cmp	r2, r3
 8002c18:	d106      	bne.n	8002c28 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	2102      	movs	r1, #2
 8002c22:	4618      	mov	r0, r3
 8002c24:	f7ff fbb2 	bl	800238c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	2103      	movs	r1, #3
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f7ff fb96 	bl	8002360 <LL_ADC_GetOffsetChannel>
 8002c34:	4603      	mov	r3, r0
 8002c36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d10a      	bne.n	8002c54 <HAL_ADC_ConfigChannel+0x3cc>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	2103      	movs	r1, #3
 8002c44:	4618      	mov	r0, r3
 8002c46:	f7ff fb8b 	bl	8002360 <LL_ADC_GetOffsetChannel>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	0e9b      	lsrs	r3, r3, #26
 8002c4e:	f003 021f 	and.w	r2, r3, #31
 8002c52:	e017      	b.n	8002c84 <HAL_ADC_ConfigChannel+0x3fc>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	2103      	movs	r1, #3
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f7ff fb80 	bl	8002360 <LL_ADC_GetOffsetChannel>
 8002c60:	4603      	mov	r3, r0
 8002c62:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c64:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c66:	fa93 f3a3 	rbit	r3, r3
 8002c6a:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002c6c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c6e:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002c70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d101      	bne.n	8002c7a <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8002c76:	2320      	movs	r3, #32
 8002c78:	e003      	b.n	8002c82 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8002c7a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c7c:	fab3 f383 	clz	r3, r3
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d105      	bne.n	8002c9c <HAL_ADC_ConfigChannel+0x414>
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	0e9b      	lsrs	r3, r3, #26
 8002c96:	f003 031f 	and.w	r3, r3, #31
 8002c9a:	e011      	b.n	8002cc0 <HAL_ADC_ConfigChannel+0x438>
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ca4:	fa93 f3a3 	rbit	r3, r3
 8002ca8:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002caa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002cac:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002cae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d101      	bne.n	8002cb8 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8002cb4:	2320      	movs	r3, #32
 8002cb6:	e003      	b.n	8002cc0 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8002cb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cba:	fab3 f383 	clz	r3, r3
 8002cbe:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d106      	bne.n	8002cd2 <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	2103      	movs	r1, #3
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f7ff fb5d 	bl	800238c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f7ff fc50 	bl	800257c <LL_ADC_IsEnabled>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	f040 8140 	bne.w	8002f64 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6818      	ldr	r0, [r3, #0]
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	6819      	ldr	r1, [r3, #0]
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	68db      	ldr	r3, [r3, #12]
 8002cf0:	461a      	mov	r2, r3
 8002cf2:	f7ff fbd1 	bl	8002498 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	68db      	ldr	r3, [r3, #12]
 8002cfa:	4a8f      	ldr	r2, [pc, #572]	; (8002f38 <HAL_ADC_ConfigChannel+0x6b0>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	f040 8131 	bne.w	8002f64 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d10b      	bne.n	8002d2a <HAL_ADC_ConfigChannel+0x4a2>
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	0e9b      	lsrs	r3, r3, #26
 8002d18:	3301      	adds	r3, #1
 8002d1a:	f003 031f 	and.w	r3, r3, #31
 8002d1e:	2b09      	cmp	r3, #9
 8002d20:	bf94      	ite	ls
 8002d22:	2301      	movls	r3, #1
 8002d24:	2300      	movhi	r3, #0
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	e019      	b.n	8002d5e <HAL_ADC_ConfigChannel+0x4d6>
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d32:	fa93 f3a3 	rbit	r3, r3
 8002d36:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002d38:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d3a:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002d3c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d101      	bne.n	8002d46 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8002d42:	2320      	movs	r3, #32
 8002d44:	e003      	b.n	8002d4e <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8002d46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d48:	fab3 f383 	clz	r3, r3
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	3301      	adds	r3, #1
 8002d50:	f003 031f 	and.w	r3, r3, #31
 8002d54:	2b09      	cmp	r3, #9
 8002d56:	bf94      	ite	ls
 8002d58:	2301      	movls	r3, #1
 8002d5a:	2300      	movhi	r3, #0
 8002d5c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d079      	beq.n	8002e56 <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d107      	bne.n	8002d7e <HAL_ADC_ConfigChannel+0x4f6>
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	0e9b      	lsrs	r3, r3, #26
 8002d74:	3301      	adds	r3, #1
 8002d76:	069b      	lsls	r3, r3, #26
 8002d78:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d7c:	e015      	b.n	8002daa <HAL_ADC_ConfigChannel+0x522>
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d86:	fa93 f3a3 	rbit	r3, r3
 8002d8a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002d8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d8e:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002d90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d101      	bne.n	8002d9a <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 8002d96:	2320      	movs	r3, #32
 8002d98:	e003      	b.n	8002da2 <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8002d9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d9c:	fab3 f383 	clz	r3, r3
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	3301      	adds	r3, #1
 8002da4:	069b      	lsls	r3, r3, #26
 8002da6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d109      	bne.n	8002dca <HAL_ADC_ConfigChannel+0x542>
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	0e9b      	lsrs	r3, r3, #26
 8002dbc:	3301      	adds	r3, #1
 8002dbe:	f003 031f 	and.w	r3, r3, #31
 8002dc2:	2101      	movs	r1, #1
 8002dc4:	fa01 f303 	lsl.w	r3, r1, r3
 8002dc8:	e017      	b.n	8002dfa <HAL_ADC_ConfigChannel+0x572>
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002dd2:	fa93 f3a3 	rbit	r3, r3
 8002dd6:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002dd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002dda:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002ddc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d101      	bne.n	8002de6 <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8002de2:	2320      	movs	r3, #32
 8002de4:	e003      	b.n	8002dee <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8002de6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002de8:	fab3 f383 	clz	r3, r3
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	3301      	adds	r3, #1
 8002df0:	f003 031f 	and.w	r3, r3, #31
 8002df4:	2101      	movs	r1, #1
 8002df6:	fa01 f303 	lsl.w	r3, r1, r3
 8002dfa:	ea42 0103 	orr.w	r1, r2, r3
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d10a      	bne.n	8002e20 <HAL_ADC_ConfigChannel+0x598>
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	0e9b      	lsrs	r3, r3, #26
 8002e10:	3301      	adds	r3, #1
 8002e12:	f003 021f 	and.w	r2, r3, #31
 8002e16:	4613      	mov	r3, r2
 8002e18:	005b      	lsls	r3, r3, #1
 8002e1a:	4413      	add	r3, r2
 8002e1c:	051b      	lsls	r3, r3, #20
 8002e1e:	e018      	b.n	8002e52 <HAL_ADC_ConfigChannel+0x5ca>
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e28:	fa93 f3a3 	rbit	r3, r3
 8002e2c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002e2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e30:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002e32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d101      	bne.n	8002e3c <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8002e38:	2320      	movs	r3, #32
 8002e3a:	e003      	b.n	8002e44 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8002e3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e3e:	fab3 f383 	clz	r3, r3
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	3301      	adds	r3, #1
 8002e46:	f003 021f 	and.w	r2, r3, #31
 8002e4a:	4613      	mov	r3, r2
 8002e4c:	005b      	lsls	r3, r3, #1
 8002e4e:	4413      	add	r3, r2
 8002e50:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e52:	430b      	orrs	r3, r1
 8002e54:	e081      	b.n	8002f5a <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d107      	bne.n	8002e72 <HAL_ADC_ConfigChannel+0x5ea>
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	0e9b      	lsrs	r3, r3, #26
 8002e68:	3301      	adds	r3, #1
 8002e6a:	069b      	lsls	r3, r3, #26
 8002e6c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e70:	e015      	b.n	8002e9e <HAL_ADC_ConfigChannel+0x616>
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e7a:	fa93 f3a3 	rbit	r3, r3
 8002e7e:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e82:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d101      	bne.n	8002e8e <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8002e8a:	2320      	movs	r3, #32
 8002e8c:	e003      	b.n	8002e96 <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8002e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e90:	fab3 f383 	clz	r3, r3
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	3301      	adds	r3, #1
 8002e98:	069b      	lsls	r3, r3, #26
 8002e9a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d109      	bne.n	8002ebe <HAL_ADC_ConfigChannel+0x636>
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	0e9b      	lsrs	r3, r3, #26
 8002eb0:	3301      	adds	r3, #1
 8002eb2:	f003 031f 	and.w	r3, r3, #31
 8002eb6:	2101      	movs	r1, #1
 8002eb8:	fa01 f303 	lsl.w	r3, r1, r3
 8002ebc:	e017      	b.n	8002eee <HAL_ADC_ConfigChannel+0x666>
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ec4:	6a3b      	ldr	r3, [r7, #32]
 8002ec6:	fa93 f3a3 	rbit	r3, r3
 8002eca:	61fb      	str	r3, [r7, #28]
  return result;
 8002ecc:	69fb      	ldr	r3, [r7, #28]
 8002ece:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d101      	bne.n	8002eda <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8002ed6:	2320      	movs	r3, #32
 8002ed8:	e003      	b.n	8002ee2 <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8002eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002edc:	fab3 f383 	clz	r3, r3
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	3301      	adds	r3, #1
 8002ee4:	f003 031f 	and.w	r3, r3, #31
 8002ee8:	2101      	movs	r1, #1
 8002eea:	fa01 f303 	lsl.w	r3, r1, r3
 8002eee:	ea42 0103 	orr.w	r1, r2, r3
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d10d      	bne.n	8002f1a <HAL_ADC_ConfigChannel+0x692>
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	0e9b      	lsrs	r3, r3, #26
 8002f04:	3301      	adds	r3, #1
 8002f06:	f003 021f 	and.w	r2, r3, #31
 8002f0a:	4613      	mov	r3, r2
 8002f0c:	005b      	lsls	r3, r3, #1
 8002f0e:	4413      	add	r3, r2
 8002f10:	3b1e      	subs	r3, #30
 8002f12:	051b      	lsls	r3, r3, #20
 8002f14:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002f18:	e01e      	b.n	8002f58 <HAL_ADC_ConfigChannel+0x6d0>
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	fa93 f3a3 	rbit	r3, r3
 8002f26:	613b      	str	r3, [r7, #16]
  return result;
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002f2c:	69bb      	ldr	r3, [r7, #24]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d104      	bne.n	8002f3c <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8002f32:	2320      	movs	r3, #32
 8002f34:	e006      	b.n	8002f44 <HAL_ADC_ConfigChannel+0x6bc>
 8002f36:	bf00      	nop
 8002f38:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002f3c:	69bb      	ldr	r3, [r7, #24]
 8002f3e:	fab3 f383 	clz	r3, r3
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	3301      	adds	r3, #1
 8002f46:	f003 021f 	and.w	r2, r3, #31
 8002f4a:	4613      	mov	r3, r2
 8002f4c:	005b      	lsls	r3, r3, #1
 8002f4e:	4413      	add	r3, r2
 8002f50:	3b1e      	subs	r3, #30
 8002f52:	051b      	lsls	r3, r3, #20
 8002f54:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f58:	430b      	orrs	r3, r1
 8002f5a:	683a      	ldr	r2, [r7, #0]
 8002f5c:	6892      	ldr	r2, [r2, #8]
 8002f5e:	4619      	mov	r1, r3
 8002f60:	f7ff fa6e 	bl	8002440 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	4b3d      	ldr	r3, [pc, #244]	; (8003060 <HAL_ADC_ConfigChannel+0x7d8>)
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d06c      	beq.n	800304a <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002f70:	483c      	ldr	r0, [pc, #240]	; (8003064 <HAL_ADC_ConfigChannel+0x7dc>)
 8002f72:	f7ff f9c3 	bl	80022fc <LL_ADC_GetCommonPathInternalCh>
 8002f76:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a3a      	ldr	r2, [pc, #232]	; (8003068 <HAL_ADC_ConfigChannel+0x7e0>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d127      	bne.n	8002fd4 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002f84:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f88:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d121      	bne.n	8002fd4 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a35      	ldr	r2, [pc, #212]	; (800306c <HAL_ADC_ConfigChannel+0x7e4>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d157      	bne.n	800304a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f9a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f9e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002fa2:	4619      	mov	r1, r3
 8002fa4:	482f      	ldr	r0, [pc, #188]	; (8003064 <HAL_ADC_ConfigChannel+0x7dc>)
 8002fa6:	f7ff f996 	bl	80022d6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002faa:	4b31      	ldr	r3, [pc, #196]	; (8003070 <HAL_ADC_ConfigChannel+0x7e8>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	099b      	lsrs	r3, r3, #6
 8002fb0:	4a30      	ldr	r2, [pc, #192]	; (8003074 <HAL_ADC_ConfigChannel+0x7ec>)
 8002fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fb6:	099b      	lsrs	r3, r3, #6
 8002fb8:	1c5a      	adds	r2, r3, #1
 8002fba:	4613      	mov	r3, r2
 8002fbc:	005b      	lsls	r3, r3, #1
 8002fbe:	4413      	add	r3, r2
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002fc4:	e002      	b.n	8002fcc <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	3b01      	subs	r3, #1
 8002fca:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d1f9      	bne.n	8002fc6 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002fd2:	e03a      	b.n	800304a <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a27      	ldr	r2, [pc, #156]	; (8003078 <HAL_ADC_ConfigChannel+0x7f0>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d113      	bne.n	8003006 <HAL_ADC_ConfigChannel+0x77e>
 8002fde:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002fe2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d10d      	bne.n	8003006 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a1f      	ldr	r2, [pc, #124]	; (800306c <HAL_ADC_ConfigChannel+0x7e4>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d12a      	bne.n	800304a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ff4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ff8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ffc:	4619      	mov	r1, r3
 8002ffe:	4819      	ldr	r0, [pc, #100]	; (8003064 <HAL_ADC_ConfigChannel+0x7dc>)
 8003000:	f7ff f969 	bl	80022d6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003004:	e021      	b.n	800304a <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a1c      	ldr	r2, [pc, #112]	; (800307c <HAL_ADC_ConfigChannel+0x7f4>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d11c      	bne.n	800304a <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003010:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003014:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003018:	2b00      	cmp	r3, #0
 800301a:	d116      	bne.n	800304a <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a12      	ldr	r2, [pc, #72]	; (800306c <HAL_ADC_ConfigChannel+0x7e4>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d111      	bne.n	800304a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003026:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800302a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800302e:	4619      	mov	r1, r3
 8003030:	480c      	ldr	r0, [pc, #48]	; (8003064 <HAL_ADC_ConfigChannel+0x7dc>)
 8003032:	f7ff f950 	bl	80022d6 <LL_ADC_SetCommonPathInternalCh>
 8003036:	e008      	b.n	800304a <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800303c:	f043 0220 	orr.w	r2, r3, #32
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2200      	movs	r2, #0
 800304e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8003052:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003056:	4618      	mov	r0, r3
 8003058:	37d8      	adds	r7, #216	; 0xd8
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	80080000 	.word	0x80080000
 8003064:	50040300 	.word	0x50040300
 8003068:	c7520000 	.word	0xc7520000
 800306c:	50040000 	.word	0x50040000
 8003070:	20000000 	.word	0x20000000
 8003074:	053e2d63 	.word	0x053e2d63
 8003078:	cb840000 	.word	0xcb840000
 800307c:	80000001 	.word	0x80000001

08003080 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003080:	b480      	push	{r7}
 8003082:	b085      	sub	sp, #20
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	f003 0307 	and.w	r3, r3, #7
 800308e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003090:	4b0c      	ldr	r3, [pc, #48]	; (80030c4 <__NVIC_SetPriorityGrouping+0x44>)
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003096:	68ba      	ldr	r2, [r7, #8]
 8003098:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800309c:	4013      	ands	r3, r2
 800309e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80030ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030b2:	4a04      	ldr	r2, [pc, #16]	; (80030c4 <__NVIC_SetPriorityGrouping+0x44>)
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	60d3      	str	r3, [r2, #12]
}
 80030b8:	bf00      	nop
 80030ba:	3714      	adds	r7, #20
 80030bc:	46bd      	mov	sp, r7
 80030be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c2:	4770      	bx	lr
 80030c4:	e000ed00 	.word	0xe000ed00

080030c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030c8:	b480      	push	{r7}
 80030ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030cc:	4b04      	ldr	r3, [pc, #16]	; (80030e0 <__NVIC_GetPriorityGrouping+0x18>)
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	0a1b      	lsrs	r3, r3, #8
 80030d2:	f003 0307 	and.w	r3, r3, #7
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	46bd      	mov	sp, r7
 80030da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030de:	4770      	bx	lr
 80030e0:	e000ed00 	.word	0xe000ed00

080030e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b083      	sub	sp, #12
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	4603      	mov	r3, r0
 80030ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	db0b      	blt.n	800310e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030f6:	79fb      	ldrb	r3, [r7, #7]
 80030f8:	f003 021f 	and.w	r2, r3, #31
 80030fc:	4907      	ldr	r1, [pc, #28]	; (800311c <__NVIC_EnableIRQ+0x38>)
 80030fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003102:	095b      	lsrs	r3, r3, #5
 8003104:	2001      	movs	r0, #1
 8003106:	fa00 f202 	lsl.w	r2, r0, r2
 800310a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800310e:	bf00      	nop
 8003110:	370c      	adds	r7, #12
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr
 800311a:	bf00      	nop
 800311c:	e000e100 	.word	0xe000e100

08003120 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003120:	b480      	push	{r7}
 8003122:	b083      	sub	sp, #12
 8003124:	af00      	add	r7, sp, #0
 8003126:	4603      	mov	r3, r0
 8003128:	6039      	str	r1, [r7, #0]
 800312a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800312c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003130:	2b00      	cmp	r3, #0
 8003132:	db0a      	blt.n	800314a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	b2da      	uxtb	r2, r3
 8003138:	490c      	ldr	r1, [pc, #48]	; (800316c <__NVIC_SetPriority+0x4c>)
 800313a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800313e:	0112      	lsls	r2, r2, #4
 8003140:	b2d2      	uxtb	r2, r2
 8003142:	440b      	add	r3, r1
 8003144:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003148:	e00a      	b.n	8003160 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	b2da      	uxtb	r2, r3
 800314e:	4908      	ldr	r1, [pc, #32]	; (8003170 <__NVIC_SetPriority+0x50>)
 8003150:	79fb      	ldrb	r3, [r7, #7]
 8003152:	f003 030f 	and.w	r3, r3, #15
 8003156:	3b04      	subs	r3, #4
 8003158:	0112      	lsls	r2, r2, #4
 800315a:	b2d2      	uxtb	r2, r2
 800315c:	440b      	add	r3, r1
 800315e:	761a      	strb	r2, [r3, #24]
}
 8003160:	bf00      	nop
 8003162:	370c      	adds	r7, #12
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr
 800316c:	e000e100 	.word	0xe000e100
 8003170:	e000ed00 	.word	0xe000ed00

08003174 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003174:	b480      	push	{r7}
 8003176:	b089      	sub	sp, #36	; 0x24
 8003178:	af00      	add	r7, sp, #0
 800317a:	60f8      	str	r0, [r7, #12]
 800317c:	60b9      	str	r1, [r7, #8]
 800317e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	f003 0307 	and.w	r3, r3, #7
 8003186:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003188:	69fb      	ldr	r3, [r7, #28]
 800318a:	f1c3 0307 	rsb	r3, r3, #7
 800318e:	2b04      	cmp	r3, #4
 8003190:	bf28      	it	cs
 8003192:	2304      	movcs	r3, #4
 8003194:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003196:	69fb      	ldr	r3, [r7, #28]
 8003198:	3304      	adds	r3, #4
 800319a:	2b06      	cmp	r3, #6
 800319c:	d902      	bls.n	80031a4 <NVIC_EncodePriority+0x30>
 800319e:	69fb      	ldr	r3, [r7, #28]
 80031a0:	3b03      	subs	r3, #3
 80031a2:	e000      	b.n	80031a6 <NVIC_EncodePriority+0x32>
 80031a4:	2300      	movs	r3, #0
 80031a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031a8:	f04f 32ff 	mov.w	r2, #4294967295
 80031ac:	69bb      	ldr	r3, [r7, #24]
 80031ae:	fa02 f303 	lsl.w	r3, r2, r3
 80031b2:	43da      	mvns	r2, r3
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	401a      	ands	r2, r3
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031bc:	f04f 31ff 	mov.w	r1, #4294967295
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	fa01 f303 	lsl.w	r3, r1, r3
 80031c6:	43d9      	mvns	r1, r3
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031cc:	4313      	orrs	r3, r2
         );
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3724      	adds	r7, #36	; 0x24
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr
	...

080031dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b082      	sub	sp, #8
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	3b01      	subs	r3, #1
 80031e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80031ec:	d301      	bcc.n	80031f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031ee:	2301      	movs	r3, #1
 80031f0:	e00f      	b.n	8003212 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031f2:	4a0a      	ldr	r2, [pc, #40]	; (800321c <SysTick_Config+0x40>)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	3b01      	subs	r3, #1
 80031f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031fa:	210f      	movs	r1, #15
 80031fc:	f04f 30ff 	mov.w	r0, #4294967295
 8003200:	f7ff ff8e 	bl	8003120 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003204:	4b05      	ldr	r3, [pc, #20]	; (800321c <SysTick_Config+0x40>)
 8003206:	2200      	movs	r2, #0
 8003208:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800320a:	4b04      	ldr	r3, [pc, #16]	; (800321c <SysTick_Config+0x40>)
 800320c:	2207      	movs	r2, #7
 800320e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003210:	2300      	movs	r3, #0
}
 8003212:	4618      	mov	r0, r3
 8003214:	3708      	adds	r7, #8
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}
 800321a:	bf00      	nop
 800321c:	e000e010 	.word	0xe000e010

08003220 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b082      	sub	sp, #8
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003228:	6878      	ldr	r0, [r7, #4]
 800322a:	f7ff ff29 	bl	8003080 <__NVIC_SetPriorityGrouping>
}
 800322e:	bf00      	nop
 8003230:	3708      	adds	r7, #8
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}

08003236 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003236:	b580      	push	{r7, lr}
 8003238:	b086      	sub	sp, #24
 800323a:	af00      	add	r7, sp, #0
 800323c:	4603      	mov	r3, r0
 800323e:	60b9      	str	r1, [r7, #8]
 8003240:	607a      	str	r2, [r7, #4]
 8003242:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003244:	2300      	movs	r3, #0
 8003246:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003248:	f7ff ff3e 	bl	80030c8 <__NVIC_GetPriorityGrouping>
 800324c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	68b9      	ldr	r1, [r7, #8]
 8003252:	6978      	ldr	r0, [r7, #20]
 8003254:	f7ff ff8e 	bl	8003174 <NVIC_EncodePriority>
 8003258:	4602      	mov	r2, r0
 800325a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800325e:	4611      	mov	r1, r2
 8003260:	4618      	mov	r0, r3
 8003262:	f7ff ff5d 	bl	8003120 <__NVIC_SetPriority>
}
 8003266:	bf00      	nop
 8003268:	3718      	adds	r7, #24
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}

0800326e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800326e:	b580      	push	{r7, lr}
 8003270:	b082      	sub	sp, #8
 8003272:	af00      	add	r7, sp, #0
 8003274:	4603      	mov	r3, r0
 8003276:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003278:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800327c:	4618      	mov	r0, r3
 800327e:	f7ff ff31 	bl	80030e4 <__NVIC_EnableIRQ>
}
 8003282:	bf00      	nop
 8003284:	3708      	adds	r7, #8
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}

0800328a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800328a:	b580      	push	{r7, lr}
 800328c:	b082      	sub	sp, #8
 800328e:	af00      	add	r7, sp, #0
 8003290:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f7ff ffa2 	bl	80031dc <SysTick_Config>
 8003298:	4603      	mov	r3, r0
}
 800329a:	4618      	mov	r0, r3
 800329c:	3708      	adds	r7, #8
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
	...

080032a4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b082      	sub	sp, #8
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d101      	bne.n	80032b6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e054      	b.n	8003360 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	7f5b      	ldrb	r3, [r3, #29]
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d105      	bne.n	80032cc <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2200      	movs	r2, #0
 80032c4:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	f7fe fae0 	bl	800188c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2202      	movs	r2, #2
 80032d0:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	791b      	ldrb	r3, [r3, #4]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d10c      	bne.n	80032f4 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a22      	ldr	r2, [pc, #136]	; (8003368 <HAL_CRC_Init+0xc4>)
 80032e0:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	689a      	ldr	r2, [r3, #8]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f022 0218 	bic.w	r2, r2, #24
 80032f0:	609a      	str	r2, [r3, #8]
 80032f2:	e00c      	b.n	800330e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6899      	ldr	r1, [r3, #8]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	461a      	mov	r2, r3
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f000 f834 	bl	800336c <HAL_CRCEx_Polynomial_Set>
 8003304:	4603      	mov	r3, r0
 8003306:	2b00      	cmp	r3, #0
 8003308:	d001      	beq.n	800330e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e028      	b.n	8003360 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	795b      	ldrb	r3, [r3, #5]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d105      	bne.n	8003322 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f04f 32ff 	mov.w	r2, #4294967295
 800331e:	611a      	str	r2, [r3, #16]
 8003320:	e004      	b.n	800332c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	687a      	ldr	r2, [r7, #4]
 8003328:	6912      	ldr	r2, [r2, #16]
 800332a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	695a      	ldr	r2, [r3, #20]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	430a      	orrs	r2, r1
 8003340:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	699a      	ldr	r2, [r3, #24]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	430a      	orrs	r2, r1
 8003356:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2201      	movs	r2, #1
 800335c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800335e:	2300      	movs	r3, #0
}
 8003360:	4618      	mov	r0, r3
 8003362:	3708      	adds	r7, #8
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}
 8003368:	04c11db7 	.word	0x04c11db7

0800336c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800336c:	b480      	push	{r7}
 800336e:	b087      	sub	sp, #28
 8003370:	af00      	add	r7, sp, #0
 8003372:	60f8      	str	r0, [r7, #12]
 8003374:	60b9      	str	r1, [r7, #8]
 8003376:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003378:	2300      	movs	r3, #0
 800337a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800337c:	231f      	movs	r3, #31
 800337e:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8003380:	bf00      	nop
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	1e5a      	subs	r2, r3, #1
 8003386:	613a      	str	r2, [r7, #16]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d009      	beq.n	80033a0 <HAL_CRCEx_Polynomial_Set+0x34>
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	f003 031f 	and.w	r3, r3, #31
 8003392:	68ba      	ldr	r2, [r7, #8]
 8003394:	fa22 f303 	lsr.w	r3, r2, r3
 8003398:	f003 0301 	and.w	r3, r3, #1
 800339c:	2b00      	cmp	r3, #0
 800339e:	d0f0      	beq.n	8003382 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2b18      	cmp	r3, #24
 80033a4:	d846      	bhi.n	8003434 <HAL_CRCEx_Polynomial_Set+0xc8>
 80033a6:	a201      	add	r2, pc, #4	; (adr r2, 80033ac <HAL_CRCEx_Polynomial_Set+0x40>)
 80033a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033ac:	0800343b 	.word	0x0800343b
 80033b0:	08003435 	.word	0x08003435
 80033b4:	08003435 	.word	0x08003435
 80033b8:	08003435 	.word	0x08003435
 80033bc:	08003435 	.word	0x08003435
 80033c0:	08003435 	.word	0x08003435
 80033c4:	08003435 	.word	0x08003435
 80033c8:	08003435 	.word	0x08003435
 80033cc:	08003429 	.word	0x08003429
 80033d0:	08003435 	.word	0x08003435
 80033d4:	08003435 	.word	0x08003435
 80033d8:	08003435 	.word	0x08003435
 80033dc:	08003435 	.word	0x08003435
 80033e0:	08003435 	.word	0x08003435
 80033e4:	08003435 	.word	0x08003435
 80033e8:	08003435 	.word	0x08003435
 80033ec:	0800341d 	.word	0x0800341d
 80033f0:	08003435 	.word	0x08003435
 80033f4:	08003435 	.word	0x08003435
 80033f8:	08003435 	.word	0x08003435
 80033fc:	08003435 	.word	0x08003435
 8003400:	08003435 	.word	0x08003435
 8003404:	08003435 	.word	0x08003435
 8003408:	08003435 	.word	0x08003435
 800340c:	08003411 	.word	0x08003411
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	2b06      	cmp	r3, #6
 8003414:	d913      	bls.n	800343e <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800341a:	e010      	b.n	800343e <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	2b07      	cmp	r3, #7
 8003420:	d90f      	bls.n	8003442 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003426:	e00c      	b.n	8003442 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	2b0f      	cmp	r3, #15
 800342c:	d90b      	bls.n	8003446 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003432:	e008      	b.n	8003446 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	75fb      	strb	r3, [r7, #23]
      break;
 8003438:	e006      	b.n	8003448 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800343a:	bf00      	nop
 800343c:	e004      	b.n	8003448 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800343e:	bf00      	nop
 8003440:	e002      	b.n	8003448 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003442:	bf00      	nop
 8003444:	e000      	b.n	8003448 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003446:	bf00      	nop
  }
  if (status == HAL_OK)
 8003448:	7dfb      	ldrb	r3, [r7, #23]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d10d      	bne.n	800346a <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	68ba      	ldr	r2, [r7, #8]
 8003454:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	f023 0118 	bic.w	r1, r3, #24
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	687a      	ldr	r2, [r7, #4]
 8003466:	430a      	orrs	r2, r1
 8003468:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800346a:	7dfb      	ldrb	r3, [r7, #23]
}
 800346c:	4618      	mov	r0, r3
 800346e:	371c      	adds	r7, #28
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr

08003478 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b082      	sub	sp, #8
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d101      	bne.n	800348a <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e0ac      	b.n	80035e4 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4618      	mov	r0, r3
 8003490:	f000 f9d2 	bl	8003838 <DFSDM_GetChannelFromInstance>
 8003494:	4603      	mov	r3, r0
 8003496:	4a55      	ldr	r2, [pc, #340]	; (80035ec <HAL_DFSDM_ChannelInit+0x174>)
 8003498:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d001      	beq.n	80034a4 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e09f      	b.n	80035e4 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	f7fe fa91 	bl	80019cc <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 80034aa:	4b51      	ldr	r3, [pc, #324]	; (80035f0 <HAL_DFSDM_ChannelInit+0x178>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	3301      	adds	r3, #1
 80034b0:	4a4f      	ldr	r2, [pc, #316]	; (80035f0 <HAL_DFSDM_ChannelInit+0x178>)
 80034b2:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 80034b4:	4b4e      	ldr	r3, [pc, #312]	; (80035f0 <HAL_DFSDM_ChannelInit+0x178>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d125      	bne.n	8003508 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80034bc:	4b4d      	ldr	r3, [pc, #308]	; (80035f4 <HAL_DFSDM_ChannelInit+0x17c>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a4c      	ldr	r2, [pc, #304]	; (80035f4 <HAL_DFSDM_ChannelInit+0x17c>)
 80034c2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80034c6:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80034c8:	4b4a      	ldr	r3, [pc, #296]	; (80035f4 <HAL_DFSDM_ChannelInit+0x17c>)
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	4948      	ldr	r1, [pc, #288]	; (80035f4 <HAL_DFSDM_ChannelInit+0x17c>)
 80034d2:	4313      	orrs	r3, r2
 80034d4:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80034d6:	4b47      	ldr	r3, [pc, #284]	; (80035f4 <HAL_DFSDM_ChannelInit+0x17c>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a46      	ldr	r2, [pc, #280]	; (80035f4 <HAL_DFSDM_ChannelInit+0x17c>)
 80034dc:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 80034e0:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	791b      	ldrb	r3, [r3, #4]
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	d108      	bne.n	80034fc <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 80034ea:	4b42      	ldr	r3, [pc, #264]	; (80035f4 <HAL_DFSDM_ChannelInit+0x17c>)
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	68db      	ldr	r3, [r3, #12]
 80034f2:	3b01      	subs	r3, #1
 80034f4:	041b      	lsls	r3, r3, #16
 80034f6:	493f      	ldr	r1, [pc, #252]	; (80035f4 <HAL_DFSDM_ChannelInit+0x17c>)
 80034f8:	4313      	orrs	r3, r2
 80034fa:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 80034fc:	4b3d      	ldr	r3, [pc, #244]	; (80035f4 <HAL_DFSDM_ChannelInit+0x17c>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a3c      	ldr	r2, [pc, #240]	; (80035f4 <HAL_DFSDM_ChannelInit+0x17c>)
 8003502:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003506:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8003516:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	6819      	ldr	r1, [r3, #0]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003526:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800352c:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	430a      	orrs	r2, r1
 8003534:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f022 020f 	bic.w	r2, r2, #15
 8003544:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	6819      	ldr	r1, [r3, #0]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003554:	431a      	orrs	r2, r3
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	430a      	orrs	r2, r1
 800355c:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	689a      	ldr	r2, [r3, #8]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 800356c:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	6899      	ldr	r1, [r3, #8]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800357c:	3b01      	subs	r3, #1
 800357e:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8003580:	431a      	orrs	r2, r3
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	430a      	orrs	r2, r1
 8003588:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	685a      	ldr	r2, [r3, #4]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f002 0207 	and.w	r2, r2, #7
 8003598:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	6859      	ldr	r1, [r3, #4]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a4:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035aa:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80035ac:	431a      	orrs	r2, r3
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	430a      	orrs	r2, r1
 80035b4:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80035c4:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2201      	movs	r2, #1
 80035ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4618      	mov	r0, r3
 80035d4:	f000 f930 	bl	8003838 <DFSDM_GetChannelFromInstance>
 80035d8:	4602      	mov	r2, r0
 80035da:	4904      	ldr	r1, [pc, #16]	; (80035ec <HAL_DFSDM_ChannelInit+0x174>)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 80035e2:	2300      	movs	r3, #0
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	3708      	adds	r7, #8
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}
 80035ec:	20000e64 	.word	0x20000e64
 80035f0:	20000e60 	.word	0x20000e60
 80035f4:	40016000 	.word	0x40016000

080035f8 <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b082      	sub	sp, #8
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_filter == NULL)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d101      	bne.n	800360a <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e0ca      	b.n	80037a0 <HAL_DFSDM_FilterInit+0x1a8>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a66      	ldr	r2, [pc, #408]	; (80037a8 <HAL_DFSDM_FilterInit+0x1b0>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d109      	bne.n	8003628 <HAL_DFSDM_FilterInit+0x30>
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	685b      	ldr	r3, [r3, #4]
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8003618:	2b01      	cmp	r3, #1
 800361a:	d003      	beq.n	8003624 <HAL_DFSDM_FilterInit+0x2c>
       (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	68db      	ldr	r3, [r3, #12]
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8003620:	2b01      	cmp	r3, #1
 8003622:	d101      	bne.n	8003628 <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	e0bb      	b.n	80037a0 <HAL_DFSDM_FilterInit+0x1a8>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2200      	movs	r2, #0
 800362c:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2201      	movs	r2, #1
 8003632:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2201      	movs	r2, #1
 8003638:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2200      	movs	r2, #0
 800363e:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f7fe f943 	bl	80018cc <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8003654:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	7a1b      	ldrb	r3, [r3, #8]
 800365a:	2b01      	cmp	r3, #1
 800365c:	d108      	bne.n	8003670 <HAL_DFSDM_FilterInit+0x78>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800366c:	601a      	str	r2, [r3, #0]
 800366e:	e007      	b.n	8003680 <HAL_DFSDM_FilterInit+0x88>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 800367e:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	7a5b      	ldrb	r3, [r3, #9]
 8003684:	2b01      	cmp	r3, #1
 8003686:	d108      	bne.n	800369a <HAL_DFSDM_FilterInit+0xa2>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8003696:	601a      	str	r2, [r3, #0]
 8003698:	e007      	b.n	80036aa <HAL_DFSDM_FilterInit+0xb2>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 80036a8:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	687a      	ldr	r2, [r7, #4]
 80036b2:	6812      	ldr	r2, [r2, #0]
 80036b4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80036b8:	f023 0308 	bic.w	r3, r3, #8
 80036bc:	6013      	str	r3, [r2, #0]
  if (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	68db      	ldr	r3, [r3, #12]
 80036c2:	2b02      	cmp	r3, #2
 80036c4:	d108      	bne.n	80036d8 <HAL_DFSDM_FilterInit+0xe0>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	6819      	ldr	r1, [r3, #0]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	695a      	ldr	r2, [r3, #20]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	430a      	orrs	r2, r1
 80036d6:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	7c1b      	ldrb	r3, [r3, #16]
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d108      	bne.n	80036f2 <HAL_DFSDM_FilterInit+0xfa>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f042 0210 	orr.w	r2, r2, #16
 80036ee:	601a      	str	r2, [r3, #0]
 80036f0:	e007      	b.n	8003702 <HAL_DFSDM_FilterInit+0x10a>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f022 0210 	bic.w	r2, r2, #16
 8003700:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	7c5b      	ldrb	r3, [r3, #17]
 8003706:	2b01      	cmp	r3, #1
 8003708:	d108      	bne.n	800371c <HAL_DFSDM_FilterInit+0x124>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f042 0220 	orr.w	r2, r2, #32
 8003718:	601a      	str	r2, [r3, #0]
 800371a:	e007      	b.n	800372c <HAL_DFSDM_FilterInit+0x134>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f022 0220 	bic.w	r2, r2, #32
 800372a:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	695b      	ldr	r3, [r3, #20]
 8003732:	687a      	ldr	r2, [r7, #4]
 8003734:	6812      	ldr	r2, [r2, #0]
 8003736:	f023 4363 	bic.w	r3, r3, #3808428032	; 0xe3000000
 800373a:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 800373e:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	6959      	ldr	r1, [r3, #20]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	69da      	ldr	r2, [r3, #28]
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6a1b      	ldr	r3, [r3, #32]
 800374e:	3b01      	subs	r3, #1
 8003750:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8003752:	431a      	orrs	r2, r3
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003758:	3b01      	subs	r3, #1
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 800375a:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	430a      	orrs	r2, r1
 8003762:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	685a      	ldr	r2, [r3, #4]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	68da      	ldr	r2, [r3, #12]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	699a      	ldr	r2, [r3, #24]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	7c1a      	ldrb	r2, [r3, #16]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f042 0201 	orr.w	r2, r2, #1
 8003794:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2201      	movs	r2, #1
 800379a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 800379e:	2300      	movs	r3, #0
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	3708      	adds	r7, #8
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}
 80037a8:	40016100 	.word	0x40016100

080037ac <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b087      	sub	sp, #28
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	60f8      	str	r0, [r7, #12]
 80037b4:	60b9      	str	r1, [r7, #8]
 80037b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037b8:	2300      	movs	r3, #0
 80037ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d02e      	beq.n	8003824 <HAL_DFSDM_FilterConfigRegChannel+0x78>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 80037cc:	2bff      	cmp	r3, #255	; 0xff
 80037ce:	d029      	beq.n	8003824 <HAL_DFSDM_FilterConfigRegChannel+0x78>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	68fa      	ldr	r2, [r7, #12]
 80037d8:	6812      	ldr	r2, [r2, #0]
 80037da:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80037de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037e2:	6013      	str	r3, [r2, #0]
    if (ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	d10d      	bne.n	8003806 <HAL_DFSDM_FilterConfigRegChannel+0x5a>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)(((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	021b      	lsls	r3, r3, #8
 80037f4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80037f8:	431a      	orrs	r2, r3
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003802:	601a      	str	r2, [r3, #0]
 8003804:	e00a      	b.n	800381c <HAL_DFSDM_FilterConfigRegChannel+0x70>
                                                    DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	6819      	ldr	r1, [r3, #0]
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	021b      	lsls	r3, r3, #8
 8003810:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	430a      	orrs	r2, r1
 800381a:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	687a      	ldr	r2, [r7, #4]
 8003820:	631a      	str	r2, [r3, #48]	; 0x30
 8003822:	e001      	b.n	8003828 <HAL_DFSDM_FilterConfigRegChannel+0x7c>
  }
  else
  {
    status = HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 8003828:	7dfb      	ldrb	r3, [r7, #23]
}
 800382a:	4618      	mov	r0, r3
 800382c:	371c      	adds	r7, #28
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr
	...

08003838 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8003838:	b480      	push	{r7}
 800383a:	b085      	sub	sp, #20
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	4a1c      	ldr	r2, [pc, #112]	; (80038b4 <DFSDM_GetChannelFromInstance+0x7c>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d102      	bne.n	800384e <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8003848:	2300      	movs	r3, #0
 800384a:	60fb      	str	r3, [r7, #12]
 800384c:	e02b      	b.n	80038a6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	4a19      	ldr	r2, [pc, #100]	; (80038b8 <DFSDM_GetChannelFromInstance+0x80>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d102      	bne.n	800385c <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8003856:	2301      	movs	r3, #1
 8003858:	60fb      	str	r3, [r7, #12]
 800385a:	e024      	b.n	80038a6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	4a17      	ldr	r2, [pc, #92]	; (80038bc <DFSDM_GetChannelFromInstance+0x84>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d102      	bne.n	800386a <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8003864:	2302      	movs	r3, #2
 8003866:	60fb      	str	r3, [r7, #12]
 8003868:	e01d      	b.n	80038a6 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	4a14      	ldr	r2, [pc, #80]	; (80038c0 <DFSDM_GetChannelFromInstance+0x88>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d102      	bne.n	8003878 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8003872:	2304      	movs	r3, #4
 8003874:	60fb      	str	r3, [r7, #12]
 8003876:	e016      	b.n	80038a6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	4a12      	ldr	r2, [pc, #72]	; (80038c4 <DFSDM_GetChannelFromInstance+0x8c>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d102      	bne.n	8003886 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8003880:	2305      	movs	r3, #5
 8003882:	60fb      	str	r3, [r7, #12]
 8003884:	e00f      	b.n	80038a6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	4a0f      	ldr	r2, [pc, #60]	; (80038c8 <DFSDM_GetChannelFromInstance+0x90>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d102      	bne.n	8003894 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 800388e:	2306      	movs	r3, #6
 8003890:	60fb      	str	r3, [r7, #12]
 8003892:	e008      	b.n	80038a6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	4a0d      	ldr	r2, [pc, #52]	; (80038cc <DFSDM_GetChannelFromInstance+0x94>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d102      	bne.n	80038a2 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 800389c:	2307      	movs	r3, #7
 800389e:	60fb      	str	r3, [r7, #12]
 80038a0:	e001      	b.n	80038a6 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 80038a2:	2303      	movs	r3, #3
 80038a4:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 80038a6:	68fb      	ldr	r3, [r7, #12]
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	3714      	adds	r7, #20
 80038ac:	46bd      	mov	sp, r7
 80038ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b2:	4770      	bx	lr
 80038b4:	40016000 	.word	0x40016000
 80038b8:	40016020 	.word	0x40016020
 80038bc:	40016040 	.word	0x40016040
 80038c0:	40016080 	.word	0x40016080
 80038c4:	400160a0 	.word	0x400160a0
 80038c8:	400160c0 	.word	0x400160c0
 80038cc:	400160e0 	.word	0x400160e0

080038d0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b084      	sub	sp, #16
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d101      	bne.n	80038e2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e08d      	b.n	80039fe <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	461a      	mov	r2, r3
 80038e8:	4b47      	ldr	r3, [pc, #284]	; (8003a08 <HAL_DMA_Init+0x138>)
 80038ea:	429a      	cmp	r2, r3
 80038ec:	d80f      	bhi.n	800390e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	461a      	mov	r2, r3
 80038f4:	4b45      	ldr	r3, [pc, #276]	; (8003a0c <HAL_DMA_Init+0x13c>)
 80038f6:	4413      	add	r3, r2
 80038f8:	4a45      	ldr	r2, [pc, #276]	; (8003a10 <HAL_DMA_Init+0x140>)
 80038fa:	fba2 2303 	umull	r2, r3, r2, r3
 80038fe:	091b      	lsrs	r3, r3, #4
 8003900:	009a      	lsls	r2, r3, #2
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	4a42      	ldr	r2, [pc, #264]	; (8003a14 <HAL_DMA_Init+0x144>)
 800390a:	641a      	str	r2, [r3, #64]	; 0x40
 800390c:	e00e      	b.n	800392c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	461a      	mov	r2, r3
 8003914:	4b40      	ldr	r3, [pc, #256]	; (8003a18 <HAL_DMA_Init+0x148>)
 8003916:	4413      	add	r3, r2
 8003918:	4a3d      	ldr	r2, [pc, #244]	; (8003a10 <HAL_DMA_Init+0x140>)
 800391a:	fba2 2303 	umull	r2, r3, r2, r3
 800391e:	091b      	lsrs	r3, r3, #4
 8003920:	009a      	lsls	r2, r3, #2
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4a3c      	ldr	r2, [pc, #240]	; (8003a1c <HAL_DMA_Init+0x14c>)
 800392a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2202      	movs	r2, #2
 8003930:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003942:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003946:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003950:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	691b      	ldr	r3, [r3, #16]
 8003956:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800395c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	699b      	ldr	r3, [r3, #24]
 8003962:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003968:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6a1b      	ldr	r3, [r3, #32]
 800396e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003970:	68fa      	ldr	r2, [r7, #12]
 8003972:	4313      	orrs	r3, r2
 8003974:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	68fa      	ldr	r2, [r7, #12]
 800397c:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f000 f8fe 	bl	8003b80 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800398c:	d102      	bne.n	8003994 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2200      	movs	r2, #0
 8003992:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	685a      	ldr	r2, [r3, #4]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800399c:	b2d2      	uxtb	r2, r2
 800399e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039a4:	687a      	ldr	r2, [r7, #4]
 80039a6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80039a8:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d010      	beq.n	80039d4 <HAL_DMA_Init+0x104>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	2b04      	cmp	r3, #4
 80039b8:	d80c      	bhi.n	80039d4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f000 f91e 	bl	8003bfc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039c4:	2200      	movs	r2, #0
 80039c6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039cc:	687a      	ldr	r2, [r7, #4]
 80039ce:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80039d0:	605a      	str	r2, [r3, #4]
 80039d2:	e008      	b.n	80039e6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2200      	movs	r2, #0
 80039d8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2200      	movs	r2, #0
 80039de:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2200      	movs	r2, #0
 80039e4:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2200      	movs	r2, #0
 80039ea:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2201      	movs	r2, #1
 80039f0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2200      	movs	r2, #0
 80039f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80039fc:	2300      	movs	r3, #0
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3710      	adds	r7, #16
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}
 8003a06:	bf00      	nop
 8003a08:	40020407 	.word	0x40020407
 8003a0c:	bffdfff8 	.word	0xbffdfff8
 8003a10:	cccccccd 	.word	0xcccccccd
 8003a14:	40020000 	.word	0x40020000
 8003a18:	bffdfbf8 	.word	0xbffdfbf8
 8003a1c:	40020400 	.word	0x40020400

08003a20 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b084      	sub	sp, #16
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a3c:	f003 031c 	and.w	r3, r3, #28
 8003a40:	2204      	movs	r2, #4
 8003a42:	409a      	lsls	r2, r3
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	4013      	ands	r3, r2
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d026      	beq.n	8003a9a <HAL_DMA_IRQHandler+0x7a>
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	f003 0304 	and.w	r3, r3, #4
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d021      	beq.n	8003a9a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 0320 	and.w	r3, r3, #32
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d107      	bne.n	8003a74 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f022 0204 	bic.w	r2, r2, #4
 8003a72:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a78:	f003 021c 	and.w	r2, r3, #28
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a80:	2104      	movs	r1, #4
 8003a82:	fa01 f202 	lsl.w	r2, r1, r2
 8003a86:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d071      	beq.n	8003b74 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8003a98:	e06c      	b.n	8003b74 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a9e:	f003 031c 	and.w	r3, r3, #28
 8003aa2:	2202      	movs	r2, #2
 8003aa4:	409a      	lsls	r2, r3
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d02e      	beq.n	8003b0c <HAL_DMA_IRQHandler+0xec>
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	f003 0302 	and.w	r3, r3, #2
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d029      	beq.n	8003b0c <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 0320 	and.w	r3, r3, #32
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d10b      	bne.n	8003ade <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f022 020a 	bic.w	r2, r2, #10
 8003ad4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2201      	movs	r2, #1
 8003ada:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ae2:	f003 021c 	and.w	r2, r3, #28
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aea:	2102      	movs	r1, #2
 8003aec:	fa01 f202 	lsl.w	r2, r1, r2
 8003af0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2200      	movs	r2, #0
 8003af6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d038      	beq.n	8003b74 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003b0a:	e033      	b.n	8003b74 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b10:	f003 031c 	and.w	r3, r3, #28
 8003b14:	2208      	movs	r2, #8
 8003b16:	409a      	lsls	r2, r3
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d02a      	beq.n	8003b76 <HAL_DMA_IRQHandler+0x156>
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	f003 0308 	and.w	r3, r3, #8
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d025      	beq.n	8003b76 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f022 020e 	bic.w	r2, r2, #14
 8003b38:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b3e:	f003 021c 	and.w	r2, r3, #28
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b46:	2101      	movs	r1, #1
 8003b48:	fa01 f202 	lsl.w	r2, r1, r2
 8003b4c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2201      	movs	r2, #1
 8003b52:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2201      	movs	r2, #1
 8003b58:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d004      	beq.n	8003b76 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003b74:	bf00      	nop
 8003b76:	bf00      	nop
}
 8003b78:	3710      	adds	r7, #16
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}
	...

08003b80 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b085      	sub	sp, #20
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	461a      	mov	r2, r3
 8003b8e:	4b17      	ldr	r3, [pc, #92]	; (8003bec <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d80a      	bhi.n	8003baa <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b98:	089b      	lsrs	r3, r3, #2
 8003b9a:	009b      	lsls	r3, r3, #2
 8003b9c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003ba0:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8003ba4:	687a      	ldr	r2, [r7, #4]
 8003ba6:	6493      	str	r3, [r2, #72]	; 0x48
 8003ba8:	e007      	b.n	8003bba <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bae:	089b      	lsrs	r3, r3, #2
 8003bb0:	009a      	lsls	r2, r3, #2
 8003bb2:	4b0f      	ldr	r3, [pc, #60]	; (8003bf0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003bb4:	4413      	add	r3, r2
 8003bb6:	687a      	ldr	r2, [r7, #4]
 8003bb8:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	3b08      	subs	r3, #8
 8003bc2:	4a0c      	ldr	r2, [pc, #48]	; (8003bf4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003bc4:	fba2 2303 	umull	r2, r3, r2, r3
 8003bc8:	091b      	lsrs	r3, r3, #4
 8003bca:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	4a0a      	ldr	r2, [pc, #40]	; (8003bf8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003bd0:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	f003 031f 	and.w	r3, r3, #31
 8003bd8:	2201      	movs	r2, #1
 8003bda:	409a      	lsls	r2, r3
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003be0:	bf00      	nop
 8003be2:	3714      	adds	r7, #20
 8003be4:	46bd      	mov	sp, r7
 8003be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bea:	4770      	bx	lr
 8003bec:	40020407 	.word	0x40020407
 8003bf0:	4002081c 	.word	0x4002081c
 8003bf4:	cccccccd 	.word	0xcccccccd
 8003bf8:	40020880 	.word	0x40020880

08003bfc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b085      	sub	sp, #20
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003c0c:	68fa      	ldr	r2, [r7, #12]
 8003c0e:	4b0b      	ldr	r3, [pc, #44]	; (8003c3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003c10:	4413      	add	r3, r2
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	461a      	mov	r2, r3
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	4a08      	ldr	r2, [pc, #32]	; (8003c40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003c1e:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	3b01      	subs	r3, #1
 8003c24:	f003 0303 	and.w	r3, r3, #3
 8003c28:	2201      	movs	r2, #1
 8003c2a:	409a      	lsls	r2, r3
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003c30:	bf00      	nop
 8003c32:	3714      	adds	r7, #20
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr
 8003c3c:	1000823f 	.word	0x1000823f
 8003c40:	40020940 	.word	0x40020940

08003c44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b087      	sub	sp, #28
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
 8003c4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c52:	e166      	b.n	8003f22 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	2101      	movs	r1, #1
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	fa01 f303 	lsl.w	r3, r1, r3
 8003c60:	4013      	ands	r3, r2
 8003c62:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	f000 8158 	beq.w	8003f1c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	f003 0303 	and.w	r3, r3, #3
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d005      	beq.n	8003c84 <HAL_GPIO_Init+0x40>
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	f003 0303 	and.w	r3, r3, #3
 8003c80:	2b02      	cmp	r3, #2
 8003c82:	d130      	bne.n	8003ce6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	005b      	lsls	r3, r3, #1
 8003c8e:	2203      	movs	r2, #3
 8003c90:	fa02 f303 	lsl.w	r3, r2, r3
 8003c94:	43db      	mvns	r3, r3
 8003c96:	693a      	ldr	r2, [r7, #16]
 8003c98:	4013      	ands	r3, r2
 8003c9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	68da      	ldr	r2, [r3, #12]
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	005b      	lsls	r3, r3, #1
 8003ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca8:	693a      	ldr	r2, [r7, #16]
 8003caa:	4313      	orrs	r3, r2
 8003cac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	693a      	ldr	r2, [r7, #16]
 8003cb2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003cba:	2201      	movs	r2, #1
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc2:	43db      	mvns	r3, r3
 8003cc4:	693a      	ldr	r2, [r7, #16]
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	091b      	lsrs	r3, r3, #4
 8003cd0:	f003 0201 	and.w	r2, r3, #1
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cda:	693a      	ldr	r2, [r7, #16]
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	693a      	ldr	r2, [r7, #16]
 8003ce4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	f003 0303 	and.w	r3, r3, #3
 8003cee:	2b03      	cmp	r3, #3
 8003cf0:	d017      	beq.n	8003d22 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	68db      	ldr	r3, [r3, #12]
 8003cf6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	005b      	lsls	r3, r3, #1
 8003cfc:	2203      	movs	r2, #3
 8003cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8003d02:	43db      	mvns	r3, r3
 8003d04:	693a      	ldr	r2, [r7, #16]
 8003d06:	4013      	ands	r3, r2
 8003d08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	689a      	ldr	r2, [r3, #8]
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	005b      	lsls	r3, r3, #1
 8003d12:	fa02 f303 	lsl.w	r3, r2, r3
 8003d16:	693a      	ldr	r2, [r7, #16]
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	693a      	ldr	r2, [r7, #16]
 8003d20:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	f003 0303 	and.w	r3, r3, #3
 8003d2a:	2b02      	cmp	r3, #2
 8003d2c:	d123      	bne.n	8003d76 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	08da      	lsrs	r2, r3, #3
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	3208      	adds	r2, #8
 8003d36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d3a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	f003 0307 	and.w	r3, r3, #7
 8003d42:	009b      	lsls	r3, r3, #2
 8003d44:	220f      	movs	r2, #15
 8003d46:	fa02 f303 	lsl.w	r3, r2, r3
 8003d4a:	43db      	mvns	r3, r3
 8003d4c:	693a      	ldr	r2, [r7, #16]
 8003d4e:	4013      	ands	r3, r2
 8003d50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	691a      	ldr	r2, [r3, #16]
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	f003 0307 	and.w	r3, r3, #7
 8003d5c:	009b      	lsls	r3, r3, #2
 8003d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d62:	693a      	ldr	r2, [r7, #16]
 8003d64:	4313      	orrs	r3, r2
 8003d66:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	08da      	lsrs	r2, r3, #3
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	3208      	adds	r2, #8
 8003d70:	6939      	ldr	r1, [r7, #16]
 8003d72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	005b      	lsls	r3, r3, #1
 8003d80:	2203      	movs	r2, #3
 8003d82:	fa02 f303 	lsl.w	r3, r2, r3
 8003d86:	43db      	mvns	r3, r3
 8003d88:	693a      	ldr	r2, [r7, #16]
 8003d8a:	4013      	ands	r3, r2
 8003d8c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	f003 0203 	and.w	r2, r3, #3
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	005b      	lsls	r3, r3, #1
 8003d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d9e:	693a      	ldr	r2, [r7, #16]
 8003da0:	4313      	orrs	r3, r2
 8003da2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	693a      	ldr	r2, [r7, #16]
 8003da8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	f000 80b2 	beq.w	8003f1c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003db8:	4b61      	ldr	r3, [pc, #388]	; (8003f40 <HAL_GPIO_Init+0x2fc>)
 8003dba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dbc:	4a60      	ldr	r2, [pc, #384]	; (8003f40 <HAL_GPIO_Init+0x2fc>)
 8003dbe:	f043 0301 	orr.w	r3, r3, #1
 8003dc2:	6613      	str	r3, [r2, #96]	; 0x60
 8003dc4:	4b5e      	ldr	r3, [pc, #376]	; (8003f40 <HAL_GPIO_Init+0x2fc>)
 8003dc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dc8:	f003 0301 	and.w	r3, r3, #1
 8003dcc:	60bb      	str	r3, [r7, #8]
 8003dce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003dd0:	4a5c      	ldr	r2, [pc, #368]	; (8003f44 <HAL_GPIO_Init+0x300>)
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	089b      	lsrs	r3, r3, #2
 8003dd6:	3302      	adds	r3, #2
 8003dd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ddc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	f003 0303 	and.w	r3, r3, #3
 8003de4:	009b      	lsls	r3, r3, #2
 8003de6:	220f      	movs	r2, #15
 8003de8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dec:	43db      	mvns	r3, r3
 8003dee:	693a      	ldr	r2, [r7, #16]
 8003df0:	4013      	ands	r3, r2
 8003df2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003dfa:	d02b      	beq.n	8003e54 <HAL_GPIO_Init+0x210>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	4a52      	ldr	r2, [pc, #328]	; (8003f48 <HAL_GPIO_Init+0x304>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d025      	beq.n	8003e50 <HAL_GPIO_Init+0x20c>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	4a51      	ldr	r2, [pc, #324]	; (8003f4c <HAL_GPIO_Init+0x308>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d01f      	beq.n	8003e4c <HAL_GPIO_Init+0x208>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	4a50      	ldr	r2, [pc, #320]	; (8003f50 <HAL_GPIO_Init+0x30c>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d019      	beq.n	8003e48 <HAL_GPIO_Init+0x204>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	4a4f      	ldr	r2, [pc, #316]	; (8003f54 <HAL_GPIO_Init+0x310>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d013      	beq.n	8003e44 <HAL_GPIO_Init+0x200>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	4a4e      	ldr	r2, [pc, #312]	; (8003f58 <HAL_GPIO_Init+0x314>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d00d      	beq.n	8003e40 <HAL_GPIO_Init+0x1fc>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	4a4d      	ldr	r2, [pc, #308]	; (8003f5c <HAL_GPIO_Init+0x318>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d007      	beq.n	8003e3c <HAL_GPIO_Init+0x1f8>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	4a4c      	ldr	r2, [pc, #304]	; (8003f60 <HAL_GPIO_Init+0x31c>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d101      	bne.n	8003e38 <HAL_GPIO_Init+0x1f4>
 8003e34:	2307      	movs	r3, #7
 8003e36:	e00e      	b.n	8003e56 <HAL_GPIO_Init+0x212>
 8003e38:	2308      	movs	r3, #8
 8003e3a:	e00c      	b.n	8003e56 <HAL_GPIO_Init+0x212>
 8003e3c:	2306      	movs	r3, #6
 8003e3e:	e00a      	b.n	8003e56 <HAL_GPIO_Init+0x212>
 8003e40:	2305      	movs	r3, #5
 8003e42:	e008      	b.n	8003e56 <HAL_GPIO_Init+0x212>
 8003e44:	2304      	movs	r3, #4
 8003e46:	e006      	b.n	8003e56 <HAL_GPIO_Init+0x212>
 8003e48:	2303      	movs	r3, #3
 8003e4a:	e004      	b.n	8003e56 <HAL_GPIO_Init+0x212>
 8003e4c:	2302      	movs	r3, #2
 8003e4e:	e002      	b.n	8003e56 <HAL_GPIO_Init+0x212>
 8003e50:	2301      	movs	r3, #1
 8003e52:	e000      	b.n	8003e56 <HAL_GPIO_Init+0x212>
 8003e54:	2300      	movs	r3, #0
 8003e56:	697a      	ldr	r2, [r7, #20]
 8003e58:	f002 0203 	and.w	r2, r2, #3
 8003e5c:	0092      	lsls	r2, r2, #2
 8003e5e:	4093      	lsls	r3, r2
 8003e60:	693a      	ldr	r2, [r7, #16]
 8003e62:	4313      	orrs	r3, r2
 8003e64:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003e66:	4937      	ldr	r1, [pc, #220]	; (8003f44 <HAL_GPIO_Init+0x300>)
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	089b      	lsrs	r3, r3, #2
 8003e6c:	3302      	adds	r3, #2
 8003e6e:	693a      	ldr	r2, [r7, #16]
 8003e70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003e74:	4b3b      	ldr	r3, [pc, #236]	; (8003f64 <HAL_GPIO_Init+0x320>)
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	43db      	mvns	r3, r3
 8003e7e:	693a      	ldr	r2, [r7, #16]
 8003e80:	4013      	ands	r3, r2
 8003e82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d003      	beq.n	8003e98 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003e90:	693a      	ldr	r2, [r7, #16]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	4313      	orrs	r3, r2
 8003e96:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003e98:	4a32      	ldr	r2, [pc, #200]	; (8003f64 <HAL_GPIO_Init+0x320>)
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003e9e:	4b31      	ldr	r3, [pc, #196]	; (8003f64 <HAL_GPIO_Init+0x320>)
 8003ea0:	68db      	ldr	r3, [r3, #12]
 8003ea2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	43db      	mvns	r3, r3
 8003ea8:	693a      	ldr	r2, [r7, #16]
 8003eaa:	4013      	ands	r3, r2
 8003eac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d003      	beq.n	8003ec2 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8003eba:	693a      	ldr	r2, [r7, #16]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003ec2:	4a28      	ldr	r2, [pc, #160]	; (8003f64 <HAL_GPIO_Init+0x320>)
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003ec8:	4b26      	ldr	r3, [pc, #152]	; (8003f64 <HAL_GPIO_Init+0x320>)
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	43db      	mvns	r3, r3
 8003ed2:	693a      	ldr	r2, [r7, #16]
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d003      	beq.n	8003eec <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8003ee4:	693a      	ldr	r2, [r7, #16]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003eec:	4a1d      	ldr	r2, [pc, #116]	; (8003f64 <HAL_GPIO_Init+0x320>)
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003ef2:	4b1c      	ldr	r3, [pc, #112]	; (8003f64 <HAL_GPIO_Init+0x320>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	43db      	mvns	r3, r3
 8003efc:	693a      	ldr	r2, [r7, #16]
 8003efe:	4013      	ands	r3, r2
 8003f00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d003      	beq.n	8003f16 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8003f0e:	693a      	ldr	r2, [r7, #16]
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	4313      	orrs	r3, r2
 8003f14:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003f16:	4a13      	ldr	r2, [pc, #76]	; (8003f64 <HAL_GPIO_Init+0x320>)
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	3301      	adds	r3, #1
 8003f20:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	fa22 f303 	lsr.w	r3, r2, r3
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	f47f ae91 	bne.w	8003c54 <HAL_GPIO_Init+0x10>
  }
}
 8003f32:	bf00      	nop
 8003f34:	bf00      	nop
 8003f36:	371c      	adds	r7, #28
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3e:	4770      	bx	lr
 8003f40:	40021000 	.word	0x40021000
 8003f44:	40010000 	.word	0x40010000
 8003f48:	48000400 	.word	0x48000400
 8003f4c:	48000800 	.word	0x48000800
 8003f50:	48000c00 	.word	0x48000c00
 8003f54:	48001000 	.word	0x48001000
 8003f58:	48001400 	.word	0x48001400
 8003f5c:	48001800 	.word	0x48001800
 8003f60:	48001c00 	.word	0x48001c00
 8003f64:	40010400 	.word	0x40010400

08003f68 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b085      	sub	sp, #20
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
 8003f70:	460b      	mov	r3, r1
 8003f72:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	691a      	ldr	r2, [r3, #16]
 8003f78:	887b      	ldrh	r3, [r7, #2]
 8003f7a:	4013      	ands	r3, r2
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d002      	beq.n	8003f86 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003f80:	2301      	movs	r3, #1
 8003f82:	73fb      	strb	r3, [r7, #15]
 8003f84:	e001      	b.n	8003f8a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003f86:	2300      	movs	r3, #0
 8003f88:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003f8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	3714      	adds	r7, #20
 8003f90:	46bd      	mov	sp, r7
 8003f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f96:	4770      	bx	lr

08003f98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b083      	sub	sp, #12
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
 8003fa0:	460b      	mov	r3, r1
 8003fa2:	807b      	strh	r3, [r7, #2]
 8003fa4:	4613      	mov	r3, r2
 8003fa6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003fa8:	787b      	ldrb	r3, [r7, #1]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d003      	beq.n	8003fb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003fae:	887a      	ldrh	r2, [r7, #2]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003fb4:	e002      	b.n	8003fbc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003fb6:	887a      	ldrh	r2, [r7, #2]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003fbc:	bf00      	nop
 8003fbe:	370c      	adds	r7, #12
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr

08003fc8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b082      	sub	sp, #8
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d101      	bne.n	8003fda <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e081      	b.n	80040de <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d106      	bne.n	8003ff4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f7fd fd30 	bl	8001a54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2224      	movs	r2, #36	; 0x24
 8003ff8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f022 0201 	bic.w	r2, r2, #1
 800400a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	685a      	ldr	r2, [r3, #4]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004018:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	689a      	ldr	r2, [r3, #8]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004028:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	68db      	ldr	r3, [r3, #12]
 800402e:	2b01      	cmp	r3, #1
 8004030:	d107      	bne.n	8004042 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	689a      	ldr	r2, [r3, #8]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800403e:	609a      	str	r2, [r3, #8]
 8004040:	e006      	b.n	8004050 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	689a      	ldr	r2, [r3, #8]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800404e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	68db      	ldr	r3, [r3, #12]
 8004054:	2b02      	cmp	r3, #2
 8004056:	d104      	bne.n	8004062 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004060:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	687a      	ldr	r2, [r7, #4]
 800406a:	6812      	ldr	r2, [r2, #0]
 800406c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004070:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004074:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	68da      	ldr	r2, [r3, #12]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004084:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	691a      	ldr	r2, [r3, #16]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	695b      	ldr	r3, [r3, #20]
 800408e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	699b      	ldr	r3, [r3, #24]
 8004096:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	430a      	orrs	r2, r1
 800409e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	69d9      	ldr	r1, [r3, #28]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6a1a      	ldr	r2, [r3, #32]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	430a      	orrs	r2, r1
 80040ae:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f042 0201 	orr.w	r2, r2, #1
 80040be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2200      	movs	r2, #0
 80040c4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2220      	movs	r2, #32
 80040ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2200      	movs	r2, #0
 80040d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2200      	movs	r2, #0
 80040d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80040dc:	2300      	movs	r3, #0
}
 80040de:	4618      	mov	r0, r3
 80040e0:	3708      	adds	r7, #8
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}

080040e6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80040e6:	b480      	push	{r7}
 80040e8:	b083      	sub	sp, #12
 80040ea:	af00      	add	r7, sp, #0
 80040ec:	6078      	str	r0, [r7, #4]
 80040ee:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040f6:	b2db      	uxtb	r3, r3
 80040f8:	2b20      	cmp	r3, #32
 80040fa:	d138      	bne.n	800416e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004102:	2b01      	cmp	r3, #1
 8004104:	d101      	bne.n	800410a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004106:	2302      	movs	r3, #2
 8004108:	e032      	b.n	8004170 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2201      	movs	r2, #1
 800410e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2224      	movs	r2, #36	; 0x24
 8004116:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f022 0201 	bic.w	r2, r2, #1
 8004128:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004138:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	6819      	ldr	r1, [r3, #0]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	683a      	ldr	r2, [r7, #0]
 8004146:	430a      	orrs	r2, r1
 8004148:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	681a      	ldr	r2, [r3, #0]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f042 0201 	orr.w	r2, r2, #1
 8004158:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2220      	movs	r2, #32
 800415e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2200      	movs	r2, #0
 8004166:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800416a:	2300      	movs	r3, #0
 800416c:	e000      	b.n	8004170 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800416e:	2302      	movs	r3, #2
  }
}
 8004170:	4618      	mov	r0, r3
 8004172:	370c      	adds	r7, #12
 8004174:	46bd      	mov	sp, r7
 8004176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417a:	4770      	bx	lr

0800417c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800417c:	b480      	push	{r7}
 800417e:	b085      	sub	sp, #20
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
 8004184:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800418c:	b2db      	uxtb	r3, r3
 800418e:	2b20      	cmp	r3, #32
 8004190:	d139      	bne.n	8004206 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004198:	2b01      	cmp	r3, #1
 800419a:	d101      	bne.n	80041a0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800419c:	2302      	movs	r3, #2
 800419e:	e033      	b.n	8004208 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2201      	movs	r2, #1
 80041a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2224      	movs	r2, #36	; 0x24
 80041ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	681a      	ldr	r2, [r3, #0]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f022 0201 	bic.w	r2, r2, #1
 80041be:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80041ce:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	021b      	lsls	r3, r3, #8
 80041d4:	68fa      	ldr	r2, [r7, #12]
 80041d6:	4313      	orrs	r3, r2
 80041d8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	68fa      	ldr	r2, [r7, #12]
 80041e0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f042 0201 	orr.w	r2, r2, #1
 80041f0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2220      	movs	r2, #32
 80041f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2200      	movs	r2, #0
 80041fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004202:	2300      	movs	r3, #0
 8004204:	e000      	b.n	8004208 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004206:	2302      	movs	r3, #2
  }
}
 8004208:	4618      	mov	r0, r3
 800420a:	3714      	adds	r7, #20
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr

08004214 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004214:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004216:	b08f      	sub	sp, #60	; 0x3c
 8004218:	af0a      	add	r7, sp, #40	; 0x28
 800421a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d101      	bne.n	8004226 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	e116      	b.n	8004454 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004232:	b2db      	uxtb	r3, r3
 8004234:	2b00      	cmp	r3, #0
 8004236:	d106      	bne.n	8004246 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2200      	movs	r2, #0
 800423c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004240:	6878      	ldr	r0, [r7, #4]
 8004242:	f00b f963 	bl	800f50c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2203      	movs	r2, #3
 800424a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004252:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004256:	2b00      	cmp	r3, #0
 8004258:	d102      	bne.n	8004260 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2200      	movs	r2, #0
 800425e:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4618      	mov	r0, r3
 8004266:	f007 fd78 	bl	800bd5a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	603b      	str	r3, [r7, #0]
 8004270:	687e      	ldr	r6, [r7, #4]
 8004272:	466d      	mov	r5, sp
 8004274:	f106 0410 	add.w	r4, r6, #16
 8004278:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800427a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800427c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800427e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004280:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004284:	e885 0003 	stmia.w	r5, {r0, r1}
 8004288:	1d33      	adds	r3, r6, #4
 800428a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800428c:	6838      	ldr	r0, [r7, #0]
 800428e:	f007 fc8b 	bl	800bba8 <USB_CoreInit>
 8004292:	4603      	mov	r3, r0
 8004294:	2b00      	cmp	r3, #0
 8004296:	d005      	beq.n	80042a4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2202      	movs	r2, #2
 800429c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	e0d7      	b.n	8004454 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	2100      	movs	r1, #0
 80042aa:	4618      	mov	r0, r3
 80042ac:	f007 fd66 	bl	800bd7c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80042b0:	2300      	movs	r3, #0
 80042b2:	73fb      	strb	r3, [r7, #15]
 80042b4:	e04a      	b.n	800434c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80042b6:	7bfa      	ldrb	r2, [r7, #15]
 80042b8:	6879      	ldr	r1, [r7, #4]
 80042ba:	4613      	mov	r3, r2
 80042bc:	00db      	lsls	r3, r3, #3
 80042be:	4413      	add	r3, r2
 80042c0:	009b      	lsls	r3, r3, #2
 80042c2:	440b      	add	r3, r1
 80042c4:	333d      	adds	r3, #61	; 0x3d
 80042c6:	2201      	movs	r2, #1
 80042c8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80042ca:	7bfa      	ldrb	r2, [r7, #15]
 80042cc:	6879      	ldr	r1, [r7, #4]
 80042ce:	4613      	mov	r3, r2
 80042d0:	00db      	lsls	r3, r3, #3
 80042d2:	4413      	add	r3, r2
 80042d4:	009b      	lsls	r3, r3, #2
 80042d6:	440b      	add	r3, r1
 80042d8:	333c      	adds	r3, #60	; 0x3c
 80042da:	7bfa      	ldrb	r2, [r7, #15]
 80042dc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80042de:	7bfa      	ldrb	r2, [r7, #15]
 80042e0:	7bfb      	ldrb	r3, [r7, #15]
 80042e2:	b298      	uxth	r0, r3
 80042e4:	6879      	ldr	r1, [r7, #4]
 80042e6:	4613      	mov	r3, r2
 80042e8:	00db      	lsls	r3, r3, #3
 80042ea:	4413      	add	r3, r2
 80042ec:	009b      	lsls	r3, r3, #2
 80042ee:	440b      	add	r3, r1
 80042f0:	3344      	adds	r3, #68	; 0x44
 80042f2:	4602      	mov	r2, r0
 80042f4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80042f6:	7bfa      	ldrb	r2, [r7, #15]
 80042f8:	6879      	ldr	r1, [r7, #4]
 80042fa:	4613      	mov	r3, r2
 80042fc:	00db      	lsls	r3, r3, #3
 80042fe:	4413      	add	r3, r2
 8004300:	009b      	lsls	r3, r3, #2
 8004302:	440b      	add	r3, r1
 8004304:	3340      	adds	r3, #64	; 0x40
 8004306:	2200      	movs	r2, #0
 8004308:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800430a:	7bfa      	ldrb	r2, [r7, #15]
 800430c:	6879      	ldr	r1, [r7, #4]
 800430e:	4613      	mov	r3, r2
 8004310:	00db      	lsls	r3, r3, #3
 8004312:	4413      	add	r3, r2
 8004314:	009b      	lsls	r3, r3, #2
 8004316:	440b      	add	r3, r1
 8004318:	3348      	adds	r3, #72	; 0x48
 800431a:	2200      	movs	r2, #0
 800431c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800431e:	7bfa      	ldrb	r2, [r7, #15]
 8004320:	6879      	ldr	r1, [r7, #4]
 8004322:	4613      	mov	r3, r2
 8004324:	00db      	lsls	r3, r3, #3
 8004326:	4413      	add	r3, r2
 8004328:	009b      	lsls	r3, r3, #2
 800432a:	440b      	add	r3, r1
 800432c:	334c      	adds	r3, #76	; 0x4c
 800432e:	2200      	movs	r2, #0
 8004330:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004332:	7bfa      	ldrb	r2, [r7, #15]
 8004334:	6879      	ldr	r1, [r7, #4]
 8004336:	4613      	mov	r3, r2
 8004338:	00db      	lsls	r3, r3, #3
 800433a:	4413      	add	r3, r2
 800433c:	009b      	lsls	r3, r3, #2
 800433e:	440b      	add	r3, r1
 8004340:	3354      	adds	r3, #84	; 0x54
 8004342:	2200      	movs	r2, #0
 8004344:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004346:	7bfb      	ldrb	r3, [r7, #15]
 8004348:	3301      	adds	r3, #1
 800434a:	73fb      	strb	r3, [r7, #15]
 800434c:	7bfa      	ldrb	r2, [r7, #15]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	429a      	cmp	r2, r3
 8004354:	d3af      	bcc.n	80042b6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004356:	2300      	movs	r3, #0
 8004358:	73fb      	strb	r3, [r7, #15]
 800435a:	e044      	b.n	80043e6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800435c:	7bfa      	ldrb	r2, [r7, #15]
 800435e:	6879      	ldr	r1, [r7, #4]
 8004360:	4613      	mov	r3, r2
 8004362:	00db      	lsls	r3, r3, #3
 8004364:	4413      	add	r3, r2
 8004366:	009b      	lsls	r3, r3, #2
 8004368:	440b      	add	r3, r1
 800436a:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800436e:	2200      	movs	r2, #0
 8004370:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004372:	7bfa      	ldrb	r2, [r7, #15]
 8004374:	6879      	ldr	r1, [r7, #4]
 8004376:	4613      	mov	r3, r2
 8004378:	00db      	lsls	r3, r3, #3
 800437a:	4413      	add	r3, r2
 800437c:	009b      	lsls	r3, r3, #2
 800437e:	440b      	add	r3, r1
 8004380:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004384:	7bfa      	ldrb	r2, [r7, #15]
 8004386:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004388:	7bfa      	ldrb	r2, [r7, #15]
 800438a:	6879      	ldr	r1, [r7, #4]
 800438c:	4613      	mov	r3, r2
 800438e:	00db      	lsls	r3, r3, #3
 8004390:	4413      	add	r3, r2
 8004392:	009b      	lsls	r3, r3, #2
 8004394:	440b      	add	r3, r1
 8004396:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800439a:	2200      	movs	r2, #0
 800439c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800439e:	7bfa      	ldrb	r2, [r7, #15]
 80043a0:	6879      	ldr	r1, [r7, #4]
 80043a2:	4613      	mov	r3, r2
 80043a4:	00db      	lsls	r3, r3, #3
 80043a6:	4413      	add	r3, r2
 80043a8:	009b      	lsls	r3, r3, #2
 80043aa:	440b      	add	r3, r1
 80043ac:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80043b0:	2200      	movs	r2, #0
 80043b2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80043b4:	7bfa      	ldrb	r2, [r7, #15]
 80043b6:	6879      	ldr	r1, [r7, #4]
 80043b8:	4613      	mov	r3, r2
 80043ba:	00db      	lsls	r3, r3, #3
 80043bc:	4413      	add	r3, r2
 80043be:	009b      	lsls	r3, r3, #2
 80043c0:	440b      	add	r3, r1
 80043c2:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80043c6:	2200      	movs	r2, #0
 80043c8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80043ca:	7bfa      	ldrb	r2, [r7, #15]
 80043cc:	6879      	ldr	r1, [r7, #4]
 80043ce:	4613      	mov	r3, r2
 80043d0:	00db      	lsls	r3, r3, #3
 80043d2:	4413      	add	r3, r2
 80043d4:	009b      	lsls	r3, r3, #2
 80043d6:	440b      	add	r3, r1
 80043d8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80043dc:	2200      	movs	r2, #0
 80043de:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80043e0:	7bfb      	ldrb	r3, [r7, #15]
 80043e2:	3301      	adds	r3, #1
 80043e4:	73fb      	strb	r3, [r7, #15]
 80043e6:	7bfa      	ldrb	r2, [r7, #15]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d3b5      	bcc.n	800435c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	603b      	str	r3, [r7, #0]
 80043f6:	687e      	ldr	r6, [r7, #4]
 80043f8:	466d      	mov	r5, sp
 80043fa:	f106 0410 	add.w	r4, r6, #16
 80043fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004400:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004402:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004404:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004406:	e894 0003 	ldmia.w	r4, {r0, r1}
 800440a:	e885 0003 	stmia.w	r5, {r0, r1}
 800440e:	1d33      	adds	r3, r6, #4
 8004410:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004412:	6838      	ldr	r0, [r7, #0]
 8004414:	f007 fcfe 	bl	800be14 <USB_DevInit>
 8004418:	4603      	mov	r3, r0
 800441a:	2b00      	cmp	r3, #0
 800441c:	d005      	beq.n	800442a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2202      	movs	r2, #2
 8004422:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	e014      	b.n	8004454 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2200      	movs	r2, #0
 800442e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2201      	movs	r2, #1
 8004436:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800443e:	2b01      	cmp	r3, #1
 8004440:	d102      	bne.n	8004448 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f001 f882 	bl	800554c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4618      	mov	r0, r3
 800444e:	f008 fd86 	bl	800cf5e <USB_DevDisconnect>

  return HAL_OK;
 8004452:	2300      	movs	r3, #0
}
 8004454:	4618      	mov	r0, r3
 8004456:	3714      	adds	r7, #20
 8004458:	46bd      	mov	sp, r7
 800445a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800445c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b084      	sub	sp, #16
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004470:	2b01      	cmp	r3, #1
 8004472:	d101      	bne.n	8004478 <HAL_PCD_Start+0x1c>
 8004474:	2302      	movs	r3, #2
 8004476:	e01c      	b.n	80044b2 <HAL_PCD_Start+0x56>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2201      	movs	r2, #1
 800447c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004484:	2b01      	cmp	r3, #1
 8004486:	d105      	bne.n	8004494 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800448c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4618      	mov	r0, r3
 800449a:	f007 fc4d 	bl	800bd38 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4618      	mov	r0, r3
 80044a4:	f008 fd3a 	bl	800cf1c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2200      	movs	r2, #0
 80044ac:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80044b0:	2300      	movs	r3, #0
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	3710      	adds	r7, #16
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}

080044ba <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80044ba:	b590      	push	{r4, r7, lr}
 80044bc:	b08d      	sub	sp, #52	; 0x34
 80044be:	af00      	add	r7, sp, #0
 80044c0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044c8:	6a3b      	ldr	r3, [r7, #32]
 80044ca:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4618      	mov	r0, r3
 80044d2:	f008 fdf8 	bl	800d0c6 <USB_GetMode>
 80044d6:	4603      	mov	r3, r0
 80044d8:	2b00      	cmp	r3, #0
 80044da:	f040 847e 	bne.w	8004dda <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4618      	mov	r0, r3
 80044e4:	f008 fd5c 	bl	800cfa0 <USB_ReadInterrupts>
 80044e8:	4603      	mov	r3, r0
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	f000 8474 	beq.w	8004dd8 <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80044f0:	69fb      	ldr	r3, [r7, #28]
 80044f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	0a1b      	lsrs	r3, r3, #8
 80044fa:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4618      	mov	r0, r3
 800450a:	f008 fd49 	bl	800cfa0 <USB_ReadInterrupts>
 800450e:	4603      	mov	r3, r0
 8004510:	f003 0302 	and.w	r3, r3, #2
 8004514:	2b02      	cmp	r3, #2
 8004516:	d107      	bne.n	8004528 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	695a      	ldr	r2, [r3, #20]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f002 0202 	and.w	r2, r2, #2
 8004526:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4618      	mov	r0, r3
 800452e:	f008 fd37 	bl	800cfa0 <USB_ReadInterrupts>
 8004532:	4603      	mov	r3, r0
 8004534:	f003 0310 	and.w	r3, r3, #16
 8004538:	2b10      	cmp	r3, #16
 800453a:	d161      	bne.n	8004600 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	699a      	ldr	r2, [r3, #24]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f022 0210 	bic.w	r2, r2, #16
 800454a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800454c:	6a3b      	ldr	r3, [r7, #32]
 800454e:	6a1b      	ldr	r3, [r3, #32]
 8004550:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004552:	69bb      	ldr	r3, [r7, #24]
 8004554:	f003 020f 	and.w	r2, r3, #15
 8004558:	4613      	mov	r3, r2
 800455a:	00db      	lsls	r3, r3, #3
 800455c:	4413      	add	r3, r2
 800455e:	009b      	lsls	r3, r3, #2
 8004560:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004564:	687a      	ldr	r2, [r7, #4]
 8004566:	4413      	add	r3, r2
 8004568:	3304      	adds	r3, #4
 800456a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800456c:	69bb      	ldr	r3, [r7, #24]
 800456e:	0c5b      	lsrs	r3, r3, #17
 8004570:	f003 030f 	and.w	r3, r3, #15
 8004574:	2b02      	cmp	r3, #2
 8004576:	d124      	bne.n	80045c2 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004578:	69ba      	ldr	r2, [r7, #24]
 800457a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800457e:	4013      	ands	r3, r2
 8004580:	2b00      	cmp	r3, #0
 8004582:	d035      	beq.n	80045f0 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004588:	69bb      	ldr	r3, [r7, #24]
 800458a:	091b      	lsrs	r3, r3, #4
 800458c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800458e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004592:	b29b      	uxth	r3, r3
 8004594:	461a      	mov	r2, r3
 8004596:	6a38      	ldr	r0, [r7, #32]
 8004598:	f008 fb6e 	bl	800cc78 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	691a      	ldr	r2, [r3, #16]
 80045a0:	69bb      	ldr	r3, [r7, #24]
 80045a2:	091b      	lsrs	r3, r3, #4
 80045a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80045a8:	441a      	add	r2, r3
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	6a1a      	ldr	r2, [r3, #32]
 80045b2:	69bb      	ldr	r3, [r7, #24]
 80045b4:	091b      	lsrs	r3, r3, #4
 80045b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80045ba:	441a      	add	r2, r3
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	621a      	str	r2, [r3, #32]
 80045c0:	e016      	b.n	80045f0 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80045c2:	69bb      	ldr	r3, [r7, #24]
 80045c4:	0c5b      	lsrs	r3, r3, #17
 80045c6:	f003 030f 	and.w	r3, r3, #15
 80045ca:	2b06      	cmp	r3, #6
 80045cc:	d110      	bne.n	80045f0 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80045d4:	2208      	movs	r2, #8
 80045d6:	4619      	mov	r1, r3
 80045d8:	6a38      	ldr	r0, [r7, #32]
 80045da:	f008 fb4d 	bl	800cc78 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	6a1a      	ldr	r2, [r3, #32]
 80045e2:	69bb      	ldr	r3, [r7, #24]
 80045e4:	091b      	lsrs	r3, r3, #4
 80045e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80045ea:	441a      	add	r2, r3
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	699a      	ldr	r2, [r3, #24]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f042 0210 	orr.w	r2, r2, #16
 80045fe:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4618      	mov	r0, r3
 8004606:	f008 fccb 	bl	800cfa0 <USB_ReadInterrupts>
 800460a:	4603      	mov	r3, r0
 800460c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004610:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004614:	f040 80a7 	bne.w	8004766 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004618:	2300      	movs	r3, #0
 800461a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4618      	mov	r0, r3
 8004622:	f008 fcd0 	bl	800cfc6 <USB_ReadDevAllOutEpInterrupt>
 8004626:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004628:	e099      	b.n	800475e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800462a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800462c:	f003 0301 	and.w	r3, r3, #1
 8004630:	2b00      	cmp	r3, #0
 8004632:	f000 808e 	beq.w	8004752 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800463c:	b2d2      	uxtb	r2, r2
 800463e:	4611      	mov	r1, r2
 8004640:	4618      	mov	r0, r3
 8004642:	f008 fcf4 	bl	800d02e <USB_ReadDevOutEPInterrupt>
 8004646:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	f003 0301 	and.w	r3, r3, #1
 800464e:	2b00      	cmp	r3, #0
 8004650:	d00c      	beq.n	800466c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004654:	015a      	lsls	r2, r3, #5
 8004656:	69fb      	ldr	r3, [r7, #28]
 8004658:	4413      	add	r3, r2
 800465a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800465e:	461a      	mov	r2, r3
 8004660:	2301      	movs	r3, #1
 8004662:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004664:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f000 fe96 	bl	8005398 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	f003 0308 	and.w	r3, r3, #8
 8004672:	2b00      	cmp	r3, #0
 8004674:	d00c      	beq.n	8004690 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004678:	015a      	lsls	r2, r3, #5
 800467a:	69fb      	ldr	r3, [r7, #28]
 800467c:	4413      	add	r3, r2
 800467e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004682:	461a      	mov	r2, r3
 8004684:	2308      	movs	r3, #8
 8004686:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004688:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f000 fed2 	bl	8005434 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	f003 0310 	and.w	r3, r3, #16
 8004696:	2b00      	cmp	r3, #0
 8004698:	d008      	beq.n	80046ac <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800469a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800469c:	015a      	lsls	r2, r3, #5
 800469e:	69fb      	ldr	r3, [r7, #28]
 80046a0:	4413      	add	r3, r2
 80046a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046a6:	461a      	mov	r2, r3
 80046a8:	2310      	movs	r3, #16
 80046aa:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	f003 0302 	and.w	r3, r3, #2
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d030      	beq.n	8004718 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80046b6:	6a3b      	ldr	r3, [r7, #32]
 80046b8:	695b      	ldr	r3, [r3, #20]
 80046ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046be:	2b80      	cmp	r3, #128	; 0x80
 80046c0:	d109      	bne.n	80046d6 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80046c2:	69fb      	ldr	r3, [r7, #28]
 80046c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	69fa      	ldr	r2, [r7, #28]
 80046cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80046d0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80046d4:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80046d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046d8:	4613      	mov	r3, r2
 80046da:	00db      	lsls	r3, r3, #3
 80046dc:	4413      	add	r3, r2
 80046de:	009b      	lsls	r3, r3, #2
 80046e0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80046e4:	687a      	ldr	r2, [r7, #4]
 80046e6:	4413      	add	r3, r2
 80046e8:	3304      	adds	r3, #4
 80046ea:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	78db      	ldrb	r3, [r3, #3]
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d108      	bne.n	8004706 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	2200      	movs	r2, #0
 80046f8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80046fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046fc:	b2db      	uxtb	r3, r3
 80046fe:	4619      	mov	r1, r3
 8004700:	6878      	ldr	r0, [r7, #4]
 8004702:	f00b f847 	bl	800f794 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004708:	015a      	lsls	r2, r3, #5
 800470a:	69fb      	ldr	r3, [r7, #28]
 800470c:	4413      	add	r3, r2
 800470e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004712:	461a      	mov	r2, r3
 8004714:	2302      	movs	r3, #2
 8004716:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	f003 0320 	and.w	r3, r3, #32
 800471e:	2b00      	cmp	r3, #0
 8004720:	d008      	beq.n	8004734 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004724:	015a      	lsls	r2, r3, #5
 8004726:	69fb      	ldr	r3, [r7, #28]
 8004728:	4413      	add	r3, r2
 800472a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800472e:	461a      	mov	r2, r3
 8004730:	2320      	movs	r3, #32
 8004732:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800473a:	2b00      	cmp	r3, #0
 800473c:	d009      	beq.n	8004752 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800473e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004740:	015a      	lsls	r2, r3, #5
 8004742:	69fb      	ldr	r3, [r7, #28]
 8004744:	4413      	add	r3, r2
 8004746:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800474a:	461a      	mov	r2, r3
 800474c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004750:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004754:	3301      	adds	r3, #1
 8004756:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800475a:	085b      	lsrs	r3, r3, #1
 800475c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800475e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004760:	2b00      	cmp	r3, #0
 8004762:	f47f af62 	bne.w	800462a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4618      	mov	r0, r3
 800476c:	f008 fc18 	bl	800cfa0 <USB_ReadInterrupts>
 8004770:	4603      	mov	r3, r0
 8004772:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004776:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800477a:	f040 80a4 	bne.w	80048c6 <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4618      	mov	r0, r3
 8004784:	f008 fc39 	bl	800cffa <USB_ReadDevAllInEpInterrupt>
 8004788:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800478a:	2300      	movs	r3, #0
 800478c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800478e:	e096      	b.n	80048be <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004792:	f003 0301 	and.w	r3, r3, #1
 8004796:	2b00      	cmp	r3, #0
 8004798:	f000 808b 	beq.w	80048b2 <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047a2:	b2d2      	uxtb	r2, r2
 80047a4:	4611      	mov	r1, r2
 80047a6:	4618      	mov	r0, r3
 80047a8:	f008 fc5f 	bl	800d06a <USB_ReadDevInEPInterrupt>
 80047ac:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	f003 0301 	and.w	r3, r3, #1
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d020      	beq.n	80047fa <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80047b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ba:	f003 030f 	and.w	r3, r3, #15
 80047be:	2201      	movs	r2, #1
 80047c0:	fa02 f303 	lsl.w	r3, r2, r3
 80047c4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80047c6:	69fb      	ldr	r3, [r7, #28]
 80047c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	43db      	mvns	r3, r3
 80047d2:	69f9      	ldr	r1, [r7, #28]
 80047d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80047d8:	4013      	ands	r3, r2
 80047da:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80047dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047de:	015a      	lsls	r2, r3, #5
 80047e0:	69fb      	ldr	r3, [r7, #28]
 80047e2:	4413      	add	r3, r2
 80047e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047e8:	461a      	mov	r2, r3
 80047ea:	2301      	movs	r3, #1
 80047ec:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80047ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	4619      	mov	r1, r3
 80047f4:	6878      	ldr	r0, [r7, #4]
 80047f6:	f00a ff38 	bl	800f66a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	f003 0308 	and.w	r3, r3, #8
 8004800:	2b00      	cmp	r3, #0
 8004802:	d008      	beq.n	8004816 <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004806:	015a      	lsls	r2, r3, #5
 8004808:	69fb      	ldr	r3, [r7, #28]
 800480a:	4413      	add	r3, r2
 800480c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004810:	461a      	mov	r2, r3
 8004812:	2308      	movs	r3, #8
 8004814:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	f003 0310 	and.w	r3, r3, #16
 800481c:	2b00      	cmp	r3, #0
 800481e:	d008      	beq.n	8004832 <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004822:	015a      	lsls	r2, r3, #5
 8004824:	69fb      	ldr	r3, [r7, #28]
 8004826:	4413      	add	r3, r2
 8004828:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800482c:	461a      	mov	r2, r3
 800482e:	2310      	movs	r3, #16
 8004830:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004838:	2b00      	cmp	r3, #0
 800483a:	d008      	beq.n	800484e <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800483c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800483e:	015a      	lsls	r2, r3, #5
 8004840:	69fb      	ldr	r3, [r7, #28]
 8004842:	4413      	add	r3, r2
 8004844:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004848:	461a      	mov	r2, r3
 800484a:	2340      	movs	r3, #64	; 0x40
 800484c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	f003 0302 	and.w	r3, r3, #2
 8004854:	2b00      	cmp	r3, #0
 8004856:	d023      	beq.n	80048a0 <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004858:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800485a:	6a38      	ldr	r0, [r7, #32]
 800485c:	f007 fc26 	bl	800c0ac <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004860:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004862:	4613      	mov	r3, r2
 8004864:	00db      	lsls	r3, r3, #3
 8004866:	4413      	add	r3, r2
 8004868:	009b      	lsls	r3, r3, #2
 800486a:	3338      	adds	r3, #56	; 0x38
 800486c:	687a      	ldr	r2, [r7, #4]
 800486e:	4413      	add	r3, r2
 8004870:	3304      	adds	r3, #4
 8004872:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	78db      	ldrb	r3, [r3, #3]
 8004878:	2b01      	cmp	r3, #1
 800487a:	d108      	bne.n	800488e <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	2200      	movs	r2, #0
 8004880:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004884:	b2db      	uxtb	r3, r3
 8004886:	4619      	mov	r1, r3
 8004888:	6878      	ldr	r0, [r7, #4]
 800488a:	f00a ff95 	bl	800f7b8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800488e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004890:	015a      	lsls	r2, r3, #5
 8004892:	69fb      	ldr	r3, [r7, #28]
 8004894:	4413      	add	r3, r2
 8004896:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800489a:	461a      	mov	r2, r3
 800489c:	2302      	movs	r3, #2
 800489e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d003      	beq.n	80048b2 <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80048aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80048ac:	6878      	ldr	r0, [r7, #4]
 80048ae:	f000 fcea 	bl	8005286 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80048b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b4:	3301      	adds	r3, #1
 80048b6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80048b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ba:	085b      	lsrs	r3, r3, #1
 80048bc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80048be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	f47f af65 	bne.w	8004790 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4618      	mov	r0, r3
 80048cc:	f008 fb68 	bl	800cfa0 <USB_ReadInterrupts>
 80048d0:	4603      	mov	r3, r0
 80048d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80048d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80048da:	d122      	bne.n	8004922 <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80048dc:	69fb      	ldr	r3, [r7, #28]
 80048de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	69fa      	ldr	r2, [r7, #28]
 80048e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80048ea:	f023 0301 	bic.w	r3, r3, #1
 80048ee:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d108      	bne.n	800490c <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2200      	movs	r2, #0
 80048fe:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004902:	2100      	movs	r1, #0
 8004904:	6878      	ldr	r0, [r7, #4]
 8004906:	f00b f9c7 	bl	800fc98 <HAL_PCDEx_LPM_Callback>
 800490a:	e002      	b.n	8004912 <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800490c:	6878      	ldr	r0, [r7, #4]
 800490e:	f00a ff19 	bl	800f744 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	695a      	ldr	r2, [r3, #20]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004920:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4618      	mov	r0, r3
 8004928:	f008 fb3a 	bl	800cfa0 <USB_ReadInterrupts>
 800492c:	4603      	mov	r3, r0
 800492e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004932:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004936:	d112      	bne.n	800495e <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004938:	69fb      	ldr	r3, [r7, #28]
 800493a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	f003 0301 	and.w	r3, r3, #1
 8004944:	2b01      	cmp	r3, #1
 8004946:	d102      	bne.n	800494e <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	f00a fed5 	bl	800f6f8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	695a      	ldr	r2, [r3, #20]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800495c:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4618      	mov	r0, r3
 8004964:	f008 fb1c 	bl	800cfa0 <USB_ReadInterrupts>
 8004968:	4603      	mov	r3, r0
 800496a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800496e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004972:	d121      	bne.n	80049b8 <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	695a      	ldr	r2, [r3, #20]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8004982:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800498a:	2b00      	cmp	r3, #0
 800498c:	d111      	bne.n	80049b2 <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2201      	movs	r2, #1
 8004992:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800499c:	089b      	lsrs	r3, r3, #2
 800499e:	f003 020f 	and.w	r2, r3, #15
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80049a8:	2101      	movs	r1, #1
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	f00b f974 	bl	800fc98 <HAL_PCDEx_LPM_Callback>
 80049b0:	e002      	b.n	80049b8 <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f00a fea0 	bl	800f6f8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4618      	mov	r0, r3
 80049be:	f008 faef 	bl	800cfa0 <USB_ReadInterrupts>
 80049c2:	4603      	mov	r3, r0
 80049c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80049c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049cc:	f040 80b5 	bne.w	8004b3a <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80049d0:	69fb      	ldr	r3, [r7, #28]
 80049d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	69fa      	ldr	r2, [r7, #28]
 80049da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80049de:	f023 0301 	bic.w	r3, r3, #1
 80049e2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	2110      	movs	r1, #16
 80049ea:	4618      	mov	r0, r3
 80049ec:	f007 fb5e 	bl	800c0ac <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80049f0:	2300      	movs	r3, #0
 80049f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049f4:	e046      	b.n	8004a84 <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80049f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049f8:	015a      	lsls	r2, r3, #5
 80049fa:	69fb      	ldr	r3, [r7, #28]
 80049fc:	4413      	add	r3, r2
 80049fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a02:	461a      	mov	r2, r3
 8004a04:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004a08:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a0c:	015a      	lsls	r2, r3, #5
 8004a0e:	69fb      	ldr	r3, [r7, #28]
 8004a10:	4413      	add	r3, r2
 8004a12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a1a:	0151      	lsls	r1, r2, #5
 8004a1c:	69fa      	ldr	r2, [r7, #28]
 8004a1e:	440a      	add	r2, r1
 8004a20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a24:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004a28:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a2c:	015a      	lsls	r2, r3, #5
 8004a2e:	69fb      	ldr	r3, [r7, #28]
 8004a30:	4413      	add	r3, r2
 8004a32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a36:	461a      	mov	r2, r3
 8004a38:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004a3c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a40:	015a      	lsls	r2, r3, #5
 8004a42:	69fb      	ldr	r3, [r7, #28]
 8004a44:	4413      	add	r3, r2
 8004a46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a4e:	0151      	lsls	r1, r2, #5
 8004a50:	69fa      	ldr	r2, [r7, #28]
 8004a52:	440a      	add	r2, r1
 8004a54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a58:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004a5c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a60:	015a      	lsls	r2, r3, #5
 8004a62:	69fb      	ldr	r3, [r7, #28]
 8004a64:	4413      	add	r3, r2
 8004a66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a6e:	0151      	lsls	r1, r2, #5
 8004a70:	69fa      	ldr	r2, [r7, #28]
 8004a72:	440a      	add	r2, r1
 8004a74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a78:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004a7c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a80:	3301      	adds	r3, #1
 8004a82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a8a:	429a      	cmp	r2, r3
 8004a8c:	d3b3      	bcc.n	80049f6 <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004a8e:	69fb      	ldr	r3, [r7, #28]
 8004a90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a94:	69db      	ldr	r3, [r3, #28]
 8004a96:	69fa      	ldr	r2, [r7, #28]
 8004a98:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a9c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004aa0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d016      	beq.n	8004ad8 <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004aaa:	69fb      	ldr	r3, [r7, #28]
 8004aac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ab0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ab4:	69fa      	ldr	r2, [r7, #28]
 8004ab6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004aba:	f043 030b 	orr.w	r3, r3, #11
 8004abe:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004ac2:	69fb      	ldr	r3, [r7, #28]
 8004ac4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aca:	69fa      	ldr	r2, [r7, #28]
 8004acc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ad0:	f043 030b 	orr.w	r3, r3, #11
 8004ad4:	6453      	str	r3, [r2, #68]	; 0x44
 8004ad6:	e015      	b.n	8004b04 <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004ad8:	69fb      	ldr	r3, [r7, #28]
 8004ada:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ade:	695b      	ldr	r3, [r3, #20]
 8004ae0:	69fa      	ldr	r2, [r7, #28]
 8004ae2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ae6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004aea:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8004aee:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004af0:	69fb      	ldr	r3, [r7, #28]
 8004af2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004af6:	691b      	ldr	r3, [r3, #16]
 8004af8:	69fa      	ldr	r2, [r7, #28]
 8004afa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004afe:	f043 030b 	orr.w	r3, r3, #11
 8004b02:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004b04:	69fb      	ldr	r3, [r7, #28]
 8004b06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	69fa      	ldr	r2, [r7, #28]
 8004b0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b12:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004b16:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004b22:	4619      	mov	r1, r3
 8004b24:	4610      	mov	r0, r2
 8004b26:	f008 faff 	bl	800d128 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	695a      	ldr	r2, [r3, #20]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004b38:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4618      	mov	r0, r3
 8004b40:	f008 fa2e 	bl	800cfa0 <USB_ReadInterrupts>
 8004b44:	4603      	mov	r3, r0
 8004b46:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004b4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b4e:	d124      	bne.n	8004b9a <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4618      	mov	r0, r3
 8004b56:	f008 fac4 	bl	800d0e2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f007 fb21 	bl	800c1a6 <USB_GetDevSpeed>
 8004b64:	4603      	mov	r3, r0
 8004b66:	461a      	mov	r2, r3
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681c      	ldr	r4, [r3, #0]
 8004b70:	f001 fbe2 	bl	8006338 <HAL_RCC_GetHCLKFreq>
 8004b74:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004b7a:	b2db      	uxtb	r3, r3
 8004b7c:	461a      	mov	r2, r3
 8004b7e:	4620      	mov	r0, r4
 8004b80:	f007 f83e 	bl	800bc00 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004b84:	6878      	ldr	r0, [r7, #4]
 8004b86:	f00a fd98 	bl	800f6ba <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	695a      	ldr	r2, [r3, #20]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004b98:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f008 f9fe 	bl	800cfa0 <USB_ReadInterrupts>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	f003 0308 	and.w	r3, r3, #8
 8004baa:	2b08      	cmp	r3, #8
 8004bac:	d10a      	bne.n	8004bc4 <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f00a fd75 	bl	800f69e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	695a      	ldr	r2, [r3, #20]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f002 0208 	and.w	r2, r2, #8
 8004bc2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4618      	mov	r0, r3
 8004bca:	f008 f9e9 	bl	800cfa0 <USB_ReadInterrupts>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bd4:	2b80      	cmp	r3, #128	; 0x80
 8004bd6:	d122      	bne.n	8004c1e <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004bd8:	6a3b      	ldr	r3, [r7, #32]
 8004bda:	699b      	ldr	r3, [r3, #24]
 8004bdc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004be0:	6a3b      	ldr	r3, [r7, #32]
 8004be2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004be4:	2301      	movs	r3, #1
 8004be6:	627b      	str	r3, [r7, #36]	; 0x24
 8004be8:	e014      	b.n	8004c14 <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004bea:	6879      	ldr	r1, [r7, #4]
 8004bec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bee:	4613      	mov	r3, r2
 8004bf0:	00db      	lsls	r3, r3, #3
 8004bf2:	4413      	add	r3, r2
 8004bf4:	009b      	lsls	r3, r3, #2
 8004bf6:	440b      	add	r3, r1
 8004bf8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004bfc:	781b      	ldrb	r3, [r3, #0]
 8004bfe:	2b01      	cmp	r3, #1
 8004c00:	d105      	bne.n	8004c0e <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c04:	b2db      	uxtb	r3, r3
 8004c06:	4619      	mov	r1, r3
 8004c08:	6878      	ldr	r0, [r7, #4]
 8004c0a:	f000 fb0b 	bl	8005224 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c10:	3301      	adds	r3, #1
 8004c12:	627b      	str	r3, [r7, #36]	; 0x24
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c1a:	429a      	cmp	r2, r3
 8004c1c:	d3e5      	bcc.n	8004bea <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4618      	mov	r0, r3
 8004c24:	f008 f9bc 	bl	800cfa0 <USB_ReadInterrupts>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c32:	d13b      	bne.n	8004cac <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004c34:	2301      	movs	r3, #1
 8004c36:	627b      	str	r3, [r7, #36]	; 0x24
 8004c38:	e02b      	b.n	8004c92 <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c3c:	015a      	lsls	r2, r3, #5
 8004c3e:	69fb      	ldr	r3, [r7, #28]
 8004c40:	4413      	add	r3, r2
 8004c42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004c4a:	6879      	ldr	r1, [r7, #4]
 8004c4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c4e:	4613      	mov	r3, r2
 8004c50:	00db      	lsls	r3, r3, #3
 8004c52:	4413      	add	r3, r2
 8004c54:	009b      	lsls	r3, r3, #2
 8004c56:	440b      	add	r3, r1
 8004c58:	3340      	adds	r3, #64	; 0x40
 8004c5a:	781b      	ldrb	r3, [r3, #0]
 8004c5c:	2b01      	cmp	r3, #1
 8004c5e:	d115      	bne.n	8004c8c <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004c60:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	da12      	bge.n	8004c8c <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004c66:	6879      	ldr	r1, [r7, #4]
 8004c68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c6a:	4613      	mov	r3, r2
 8004c6c:	00db      	lsls	r3, r3, #3
 8004c6e:	4413      	add	r3, r2
 8004c70:	009b      	lsls	r3, r3, #2
 8004c72:	440b      	add	r3, r1
 8004c74:	333f      	adds	r3, #63	; 0x3f
 8004c76:	2201      	movs	r2, #1
 8004c78:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c7c:	b2db      	uxtb	r3, r3
 8004c7e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004c82:	b2db      	uxtb	r3, r3
 8004c84:	4619      	mov	r1, r3
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f000 facc 	bl	8005224 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c8e:	3301      	adds	r3, #1
 8004c90:	627b      	str	r3, [r7, #36]	; 0x24
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c98:	429a      	cmp	r2, r3
 8004c9a:	d3ce      	bcc.n	8004c3a <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	695a      	ldr	r2, [r3, #20]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004caa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	f008 f975 	bl	800cfa0 <USB_ReadInterrupts>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004cbc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004cc0:	d155      	bne.n	8004d6e <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	627b      	str	r3, [r7, #36]	; 0x24
 8004cc6:	e045      	b.n	8004d54 <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cca:	015a      	lsls	r2, r3, #5
 8004ccc:	69fb      	ldr	r3, [r7, #28]
 8004cce:	4413      	add	r3, r2
 8004cd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004cd8:	6879      	ldr	r1, [r7, #4]
 8004cda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cdc:	4613      	mov	r3, r2
 8004cde:	00db      	lsls	r3, r3, #3
 8004ce0:	4413      	add	r3, r2
 8004ce2:	009b      	lsls	r3, r3, #2
 8004ce4:	440b      	add	r3, r1
 8004ce6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004cea:	781b      	ldrb	r3, [r3, #0]
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	d12e      	bne.n	8004d4e <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004cf0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	da2b      	bge.n	8004d4e <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004cf6:	69bb      	ldr	r3, [r7, #24]
 8004cf8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8004d02:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004d06:	429a      	cmp	r2, r3
 8004d08:	d121      	bne.n	8004d4e <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004d0a:	6879      	ldr	r1, [r7, #4]
 8004d0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d0e:	4613      	mov	r3, r2
 8004d10:	00db      	lsls	r3, r3, #3
 8004d12:	4413      	add	r3, r2
 8004d14:	009b      	lsls	r3, r3, #2
 8004d16:	440b      	add	r3, r1
 8004d18:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004d1c:	2201      	movs	r2, #1
 8004d1e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004d20:	6a3b      	ldr	r3, [r7, #32]
 8004d22:	699b      	ldr	r3, [r3, #24]
 8004d24:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004d28:	6a3b      	ldr	r3, [r7, #32]
 8004d2a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004d2c:	6a3b      	ldr	r3, [r7, #32]
 8004d2e:	695b      	ldr	r3, [r3, #20]
 8004d30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d10a      	bne.n	8004d4e <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004d38:	69fb      	ldr	r3, [r7, #28]
 8004d3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	69fa      	ldr	r2, [r7, #28]
 8004d42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004d4a:	6053      	str	r3, [r2, #4]
            break;
 8004d4c:	e007      	b.n	8004d5e <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d50:	3301      	adds	r3, #1
 8004d52:	627b      	str	r3, [r7, #36]	; 0x24
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d5a:	429a      	cmp	r2, r3
 8004d5c:	d3b4      	bcc.n	8004cc8 <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	695a      	ldr	r2, [r3, #20]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004d6c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4618      	mov	r0, r3
 8004d74:	f008 f914 	bl	800cfa0 <USB_ReadInterrupts>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004d7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d82:	d10a      	bne.n	8004d9a <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	f00a fd29 	bl	800f7dc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	695a      	ldr	r2, [r3, #20]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004d98:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f008 f8fe 	bl	800cfa0 <USB_ReadInterrupts>
 8004da4:	4603      	mov	r3, r0
 8004da6:	f003 0304 	and.w	r3, r3, #4
 8004daa:	2b04      	cmp	r3, #4
 8004dac:	d115      	bne.n	8004dda <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004db6:	69bb      	ldr	r3, [r7, #24]
 8004db8:	f003 0304 	and.w	r3, r3, #4
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d002      	beq.n	8004dc6 <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004dc0:	6878      	ldr	r0, [r7, #4]
 8004dc2:	f00a fd19 	bl	800f7f8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	6859      	ldr	r1, [r3, #4]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	69ba      	ldr	r2, [r7, #24]
 8004dd2:	430a      	orrs	r2, r1
 8004dd4:	605a      	str	r2, [r3, #4]
 8004dd6:	e000      	b.n	8004dda <HAL_PCD_IRQHandler+0x920>
      return;
 8004dd8:	bf00      	nop
    }
  }
}
 8004dda:	3734      	adds	r7, #52	; 0x34
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd90      	pop	{r4, r7, pc}

08004de0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b082      	sub	sp, #8
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
 8004de8:	460b      	mov	r3, r1
 8004dea:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004df2:	2b01      	cmp	r3, #1
 8004df4:	d101      	bne.n	8004dfa <HAL_PCD_SetAddress+0x1a>
 8004df6:	2302      	movs	r3, #2
 8004df8:	e013      	b.n	8004e22 <HAL_PCD_SetAddress+0x42>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2201      	movs	r2, #1
 8004dfe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	78fa      	ldrb	r2, [r7, #3]
 8004e06:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	78fa      	ldrb	r2, [r7, #3]
 8004e10:	4611      	mov	r1, r2
 8004e12:	4618      	mov	r0, r3
 8004e14:	f008 f85c 	bl	800ced0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004e20:	2300      	movs	r3, #0
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	3708      	adds	r7, #8
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}

08004e2a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004e2a:	b580      	push	{r7, lr}
 8004e2c:	b084      	sub	sp, #16
 8004e2e:	af00      	add	r7, sp, #0
 8004e30:	6078      	str	r0, [r7, #4]
 8004e32:	4608      	mov	r0, r1
 8004e34:	4611      	mov	r1, r2
 8004e36:	461a      	mov	r2, r3
 8004e38:	4603      	mov	r3, r0
 8004e3a:	70fb      	strb	r3, [r7, #3]
 8004e3c:	460b      	mov	r3, r1
 8004e3e:	803b      	strh	r3, [r7, #0]
 8004e40:	4613      	mov	r3, r2
 8004e42:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004e44:	2300      	movs	r3, #0
 8004e46:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004e48:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	da0f      	bge.n	8004e70 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004e50:	78fb      	ldrb	r3, [r7, #3]
 8004e52:	f003 020f 	and.w	r2, r3, #15
 8004e56:	4613      	mov	r3, r2
 8004e58:	00db      	lsls	r3, r3, #3
 8004e5a:	4413      	add	r3, r2
 8004e5c:	009b      	lsls	r3, r3, #2
 8004e5e:	3338      	adds	r3, #56	; 0x38
 8004e60:	687a      	ldr	r2, [r7, #4]
 8004e62:	4413      	add	r3, r2
 8004e64:	3304      	adds	r3, #4
 8004e66:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	705a      	strb	r2, [r3, #1]
 8004e6e:	e00f      	b.n	8004e90 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004e70:	78fb      	ldrb	r3, [r7, #3]
 8004e72:	f003 020f 	and.w	r2, r3, #15
 8004e76:	4613      	mov	r3, r2
 8004e78:	00db      	lsls	r3, r3, #3
 8004e7a:	4413      	add	r3, r2
 8004e7c:	009b      	lsls	r3, r3, #2
 8004e7e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004e82:	687a      	ldr	r2, [r7, #4]
 8004e84:	4413      	add	r3, r2
 8004e86:	3304      	adds	r3, #4
 8004e88:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004e90:	78fb      	ldrb	r3, [r7, #3]
 8004e92:	f003 030f 	and.w	r3, r3, #15
 8004e96:	b2da      	uxtb	r2, r3
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004e9c:	883a      	ldrh	r2, [r7, #0]
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	78ba      	ldrb	r2, [r7, #2]
 8004ea6:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	785b      	ldrb	r3, [r3, #1]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d004      	beq.n	8004eba <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	781b      	ldrb	r3, [r3, #0]
 8004eb4:	b29a      	uxth	r2, r3
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004eba:	78bb      	ldrb	r3, [r7, #2]
 8004ebc:	2b02      	cmp	r3, #2
 8004ebe:	d102      	bne.n	8004ec6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	d101      	bne.n	8004ed4 <HAL_PCD_EP_Open+0xaa>
 8004ed0:	2302      	movs	r3, #2
 8004ed2:	e00e      	b.n	8004ef2 <HAL_PCD_EP_Open+0xc8>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	68f9      	ldr	r1, [r7, #12]
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f007 f97e 	bl	800c1e4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2200      	movs	r2, #0
 8004eec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8004ef0:	7afb      	ldrb	r3, [r7, #11]
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	3710      	adds	r7, #16
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}

08004efa <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004efa:	b580      	push	{r7, lr}
 8004efc:	b084      	sub	sp, #16
 8004efe:	af00      	add	r7, sp, #0
 8004f00:	6078      	str	r0, [r7, #4]
 8004f02:	460b      	mov	r3, r1
 8004f04:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004f06:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	da0f      	bge.n	8004f2e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004f0e:	78fb      	ldrb	r3, [r7, #3]
 8004f10:	f003 020f 	and.w	r2, r3, #15
 8004f14:	4613      	mov	r3, r2
 8004f16:	00db      	lsls	r3, r3, #3
 8004f18:	4413      	add	r3, r2
 8004f1a:	009b      	lsls	r3, r3, #2
 8004f1c:	3338      	adds	r3, #56	; 0x38
 8004f1e:	687a      	ldr	r2, [r7, #4]
 8004f20:	4413      	add	r3, r2
 8004f22:	3304      	adds	r3, #4
 8004f24:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	2201      	movs	r2, #1
 8004f2a:	705a      	strb	r2, [r3, #1]
 8004f2c:	e00f      	b.n	8004f4e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004f2e:	78fb      	ldrb	r3, [r7, #3]
 8004f30:	f003 020f 	and.w	r2, r3, #15
 8004f34:	4613      	mov	r3, r2
 8004f36:	00db      	lsls	r3, r3, #3
 8004f38:	4413      	add	r3, r2
 8004f3a:	009b      	lsls	r3, r3, #2
 8004f3c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004f40:	687a      	ldr	r2, [r7, #4]
 8004f42:	4413      	add	r3, r2
 8004f44:	3304      	adds	r3, #4
 8004f46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004f4e:	78fb      	ldrb	r3, [r7, #3]
 8004f50:	f003 030f 	and.w	r3, r3, #15
 8004f54:	b2da      	uxtb	r2, r3
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004f60:	2b01      	cmp	r3, #1
 8004f62:	d101      	bne.n	8004f68 <HAL_PCD_EP_Close+0x6e>
 8004f64:	2302      	movs	r3, #2
 8004f66:	e00e      	b.n	8004f86 <HAL_PCD_EP_Close+0x8c>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	68f9      	ldr	r1, [r7, #12]
 8004f76:	4618      	mov	r0, r3
 8004f78:	f007 f9bc 	bl	800c2f4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8004f84:	2300      	movs	r3, #0
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	3710      	adds	r7, #16
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}

08004f8e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004f8e:	b580      	push	{r7, lr}
 8004f90:	b086      	sub	sp, #24
 8004f92:	af00      	add	r7, sp, #0
 8004f94:	60f8      	str	r0, [r7, #12]
 8004f96:	607a      	str	r2, [r7, #4]
 8004f98:	603b      	str	r3, [r7, #0]
 8004f9a:	460b      	mov	r3, r1
 8004f9c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004f9e:	7afb      	ldrb	r3, [r7, #11]
 8004fa0:	f003 020f 	and.w	r2, r3, #15
 8004fa4:	4613      	mov	r3, r2
 8004fa6:	00db      	lsls	r3, r3, #3
 8004fa8:	4413      	add	r3, r2
 8004faa:	009b      	lsls	r3, r3, #2
 8004fac:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004fb0:	68fa      	ldr	r2, [r7, #12]
 8004fb2:	4413      	add	r3, r2
 8004fb4:	3304      	adds	r3, #4
 8004fb6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	687a      	ldr	r2, [r7, #4]
 8004fbc:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	683a      	ldr	r2, [r7, #0]
 8004fc2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004fd0:	7afb      	ldrb	r3, [r7, #11]
 8004fd2:	f003 030f 	and.w	r3, r3, #15
 8004fd6:	b2da      	uxtb	r2, r3
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004fdc:	7afb      	ldrb	r3, [r7, #11]
 8004fde:	f003 030f 	and.w	r3, r3, #15
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d106      	bne.n	8004ff4 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	6979      	ldr	r1, [r7, #20]
 8004fec:	4618      	mov	r0, r3
 8004fee:	f007 fc3d 	bl	800c86c <USB_EP0StartXfer>
 8004ff2:	e005      	b.n	8005000 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	6979      	ldr	r1, [r7, #20]
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f007 fa56 	bl	800c4ac <USB_EPStartXfer>
  }

  return HAL_OK;
 8005000:	2300      	movs	r3, #0
}
 8005002:	4618      	mov	r0, r3
 8005004:	3718      	adds	r7, #24
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}

0800500a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800500a:	b480      	push	{r7}
 800500c:	b083      	sub	sp, #12
 800500e:	af00      	add	r7, sp, #0
 8005010:	6078      	str	r0, [r7, #4]
 8005012:	460b      	mov	r3, r1
 8005014:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005016:	78fb      	ldrb	r3, [r7, #3]
 8005018:	f003 020f 	and.w	r2, r3, #15
 800501c:	6879      	ldr	r1, [r7, #4]
 800501e:	4613      	mov	r3, r2
 8005020:	00db      	lsls	r3, r3, #3
 8005022:	4413      	add	r3, r2
 8005024:	009b      	lsls	r3, r3, #2
 8005026:	440b      	add	r3, r1
 8005028:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800502c:	681b      	ldr	r3, [r3, #0]
}
 800502e:	4618      	mov	r0, r3
 8005030:	370c      	adds	r7, #12
 8005032:	46bd      	mov	sp, r7
 8005034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005038:	4770      	bx	lr

0800503a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800503a:	b580      	push	{r7, lr}
 800503c:	b086      	sub	sp, #24
 800503e:	af00      	add	r7, sp, #0
 8005040:	60f8      	str	r0, [r7, #12]
 8005042:	607a      	str	r2, [r7, #4]
 8005044:	603b      	str	r3, [r7, #0]
 8005046:	460b      	mov	r3, r1
 8005048:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800504a:	7afb      	ldrb	r3, [r7, #11]
 800504c:	f003 020f 	and.w	r2, r3, #15
 8005050:	4613      	mov	r3, r2
 8005052:	00db      	lsls	r3, r3, #3
 8005054:	4413      	add	r3, r2
 8005056:	009b      	lsls	r3, r3, #2
 8005058:	3338      	adds	r3, #56	; 0x38
 800505a:	68fa      	ldr	r2, [r7, #12]
 800505c:	4413      	add	r3, r2
 800505e:	3304      	adds	r3, #4
 8005060:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	687a      	ldr	r2, [r7, #4]
 8005066:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	683a      	ldr	r2, [r7, #0]
 800506c:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	2200      	movs	r2, #0
 8005072:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	2201      	movs	r2, #1
 8005078:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800507a:	7afb      	ldrb	r3, [r7, #11]
 800507c:	f003 030f 	and.w	r3, r3, #15
 8005080:	b2da      	uxtb	r2, r3
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005086:	7afb      	ldrb	r3, [r7, #11]
 8005088:	f003 030f 	and.w	r3, r3, #15
 800508c:	2b00      	cmp	r3, #0
 800508e:	d106      	bne.n	800509e <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	6979      	ldr	r1, [r7, #20]
 8005096:	4618      	mov	r0, r3
 8005098:	f007 fbe8 	bl	800c86c <USB_EP0StartXfer>
 800509c:	e005      	b.n	80050aa <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	6979      	ldr	r1, [r7, #20]
 80050a4:	4618      	mov	r0, r3
 80050a6:	f007 fa01 	bl	800c4ac <USB_EPStartXfer>
  }

  return HAL_OK;
 80050aa:	2300      	movs	r3, #0
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	3718      	adds	r7, #24
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bd80      	pop	{r7, pc}

080050b4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b084      	sub	sp, #16
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
 80050bc:	460b      	mov	r3, r1
 80050be:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80050c0:	78fb      	ldrb	r3, [r7, #3]
 80050c2:	f003 020f 	and.w	r2, r3, #15
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	429a      	cmp	r2, r3
 80050cc:	d901      	bls.n	80050d2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80050ce:	2301      	movs	r3, #1
 80050d0:	e04e      	b.n	8005170 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80050d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	da0f      	bge.n	80050fa <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80050da:	78fb      	ldrb	r3, [r7, #3]
 80050dc:	f003 020f 	and.w	r2, r3, #15
 80050e0:	4613      	mov	r3, r2
 80050e2:	00db      	lsls	r3, r3, #3
 80050e4:	4413      	add	r3, r2
 80050e6:	009b      	lsls	r3, r3, #2
 80050e8:	3338      	adds	r3, #56	; 0x38
 80050ea:	687a      	ldr	r2, [r7, #4]
 80050ec:	4413      	add	r3, r2
 80050ee:	3304      	adds	r3, #4
 80050f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2201      	movs	r2, #1
 80050f6:	705a      	strb	r2, [r3, #1]
 80050f8:	e00d      	b.n	8005116 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80050fa:	78fa      	ldrb	r2, [r7, #3]
 80050fc:	4613      	mov	r3, r2
 80050fe:	00db      	lsls	r3, r3, #3
 8005100:	4413      	add	r3, r2
 8005102:	009b      	lsls	r3, r3, #2
 8005104:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005108:	687a      	ldr	r2, [r7, #4]
 800510a:	4413      	add	r3, r2
 800510c:	3304      	adds	r3, #4
 800510e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	2200      	movs	r2, #0
 8005114:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2201      	movs	r2, #1
 800511a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800511c:	78fb      	ldrb	r3, [r7, #3]
 800511e:	f003 030f 	and.w	r3, r3, #15
 8005122:	b2da      	uxtb	r2, r3
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800512e:	2b01      	cmp	r3, #1
 8005130:	d101      	bne.n	8005136 <HAL_PCD_EP_SetStall+0x82>
 8005132:	2302      	movs	r3, #2
 8005134:	e01c      	b.n	8005170 <HAL_PCD_EP_SetStall+0xbc>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2201      	movs	r2, #1
 800513a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	68f9      	ldr	r1, [r7, #12]
 8005144:	4618      	mov	r0, r3
 8005146:	f007 fdef 	bl	800cd28 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800514a:	78fb      	ldrb	r3, [r7, #3]
 800514c:	f003 030f 	and.w	r3, r3, #15
 8005150:	2b00      	cmp	r3, #0
 8005152:	d108      	bne.n	8005166 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681a      	ldr	r2, [r3, #0]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800515e:	4619      	mov	r1, r3
 8005160:	4610      	mov	r0, r2
 8005162:	f007 ffe1 	bl	800d128 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2200      	movs	r2, #0
 800516a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800516e:	2300      	movs	r3, #0
}
 8005170:	4618      	mov	r0, r3
 8005172:	3710      	adds	r7, #16
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}

08005178 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b084      	sub	sp, #16
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
 8005180:	460b      	mov	r3, r1
 8005182:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005184:	78fb      	ldrb	r3, [r7, #3]
 8005186:	f003 020f 	and.w	r2, r3, #15
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	429a      	cmp	r2, r3
 8005190:	d901      	bls.n	8005196 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005192:	2301      	movs	r3, #1
 8005194:	e042      	b.n	800521c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005196:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800519a:	2b00      	cmp	r3, #0
 800519c:	da0f      	bge.n	80051be <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800519e:	78fb      	ldrb	r3, [r7, #3]
 80051a0:	f003 020f 	and.w	r2, r3, #15
 80051a4:	4613      	mov	r3, r2
 80051a6:	00db      	lsls	r3, r3, #3
 80051a8:	4413      	add	r3, r2
 80051aa:	009b      	lsls	r3, r3, #2
 80051ac:	3338      	adds	r3, #56	; 0x38
 80051ae:	687a      	ldr	r2, [r7, #4]
 80051b0:	4413      	add	r3, r2
 80051b2:	3304      	adds	r3, #4
 80051b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	2201      	movs	r2, #1
 80051ba:	705a      	strb	r2, [r3, #1]
 80051bc:	e00f      	b.n	80051de <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80051be:	78fb      	ldrb	r3, [r7, #3]
 80051c0:	f003 020f 	and.w	r2, r3, #15
 80051c4:	4613      	mov	r3, r2
 80051c6:	00db      	lsls	r3, r3, #3
 80051c8:	4413      	add	r3, r2
 80051ca:	009b      	lsls	r3, r3, #2
 80051cc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80051d0:	687a      	ldr	r2, [r7, #4]
 80051d2:	4413      	add	r3, r2
 80051d4:	3304      	adds	r3, #4
 80051d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	2200      	movs	r2, #0
 80051dc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2200      	movs	r2, #0
 80051e2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80051e4:	78fb      	ldrb	r3, [r7, #3]
 80051e6:	f003 030f 	and.w	r3, r3, #15
 80051ea:	b2da      	uxtb	r2, r3
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80051f6:	2b01      	cmp	r3, #1
 80051f8:	d101      	bne.n	80051fe <HAL_PCD_EP_ClrStall+0x86>
 80051fa:	2302      	movs	r3, #2
 80051fc:	e00e      	b.n	800521c <HAL_PCD_EP_ClrStall+0xa4>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2201      	movs	r2, #1
 8005202:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	68f9      	ldr	r1, [r7, #12]
 800520c:	4618      	mov	r0, r3
 800520e:	f007 fdf9 	bl	800ce04 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2200      	movs	r2, #0
 8005216:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800521a:	2300      	movs	r3, #0
}
 800521c:	4618      	mov	r0, r3
 800521e:	3710      	adds	r7, #16
 8005220:	46bd      	mov	sp, r7
 8005222:	bd80      	pop	{r7, pc}

08005224 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b084      	sub	sp, #16
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
 800522c:	460b      	mov	r3, r1
 800522e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005230:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005234:	2b00      	cmp	r3, #0
 8005236:	da0c      	bge.n	8005252 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005238:	78fb      	ldrb	r3, [r7, #3]
 800523a:	f003 020f 	and.w	r2, r3, #15
 800523e:	4613      	mov	r3, r2
 8005240:	00db      	lsls	r3, r3, #3
 8005242:	4413      	add	r3, r2
 8005244:	009b      	lsls	r3, r3, #2
 8005246:	3338      	adds	r3, #56	; 0x38
 8005248:	687a      	ldr	r2, [r7, #4]
 800524a:	4413      	add	r3, r2
 800524c:	3304      	adds	r3, #4
 800524e:	60fb      	str	r3, [r7, #12]
 8005250:	e00c      	b.n	800526c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005252:	78fb      	ldrb	r3, [r7, #3]
 8005254:	f003 020f 	and.w	r2, r3, #15
 8005258:	4613      	mov	r3, r2
 800525a:	00db      	lsls	r3, r3, #3
 800525c:	4413      	add	r3, r2
 800525e:	009b      	lsls	r3, r3, #2
 8005260:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005264:	687a      	ldr	r2, [r7, #4]
 8005266:	4413      	add	r3, r2
 8005268:	3304      	adds	r3, #4
 800526a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	68f9      	ldr	r1, [r7, #12]
 8005272:	4618      	mov	r0, r3
 8005274:	f007 fc1c 	bl	800cab0 <USB_EPStopXfer>
 8005278:	4603      	mov	r3, r0
 800527a:	72fb      	strb	r3, [r7, #11]

  return ret;
 800527c:	7afb      	ldrb	r3, [r7, #11]
}
 800527e:	4618      	mov	r0, r3
 8005280:	3710      	adds	r7, #16
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}

08005286 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005286:	b580      	push	{r7, lr}
 8005288:	b088      	sub	sp, #32
 800528a:	af00      	add	r7, sp, #0
 800528c:	6078      	str	r0, [r7, #4]
 800528e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800529a:	683a      	ldr	r2, [r7, #0]
 800529c:	4613      	mov	r3, r2
 800529e:	00db      	lsls	r3, r3, #3
 80052a0:	4413      	add	r3, r2
 80052a2:	009b      	lsls	r3, r3, #2
 80052a4:	3338      	adds	r3, #56	; 0x38
 80052a6:	687a      	ldr	r2, [r7, #4]
 80052a8:	4413      	add	r3, r2
 80052aa:	3304      	adds	r3, #4
 80052ac:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	6a1a      	ldr	r2, [r3, #32]
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	699b      	ldr	r3, [r3, #24]
 80052b6:	429a      	cmp	r2, r3
 80052b8:	d901      	bls.n	80052be <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80052ba:	2301      	movs	r3, #1
 80052bc:	e067      	b.n	800538e <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	699a      	ldr	r2, [r3, #24]
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	6a1b      	ldr	r3, [r3, #32]
 80052c6:	1ad3      	subs	r3, r2, r3
 80052c8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	68db      	ldr	r3, [r3, #12]
 80052ce:	69fa      	ldr	r2, [r7, #28]
 80052d0:	429a      	cmp	r2, r3
 80052d2:	d902      	bls.n	80052da <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	68db      	ldr	r3, [r3, #12]
 80052d8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80052da:	69fb      	ldr	r3, [r7, #28]
 80052dc:	3303      	adds	r3, #3
 80052de:	089b      	lsrs	r3, r3, #2
 80052e0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80052e2:	e026      	b.n	8005332 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	699a      	ldr	r2, [r3, #24]
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	6a1b      	ldr	r3, [r3, #32]
 80052ec:	1ad3      	subs	r3, r2, r3
 80052ee:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	68db      	ldr	r3, [r3, #12]
 80052f4:	69fa      	ldr	r2, [r7, #28]
 80052f6:	429a      	cmp	r2, r3
 80052f8:	d902      	bls.n	8005300 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	68db      	ldr	r3, [r3, #12]
 80052fe:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005300:	69fb      	ldr	r3, [r7, #28]
 8005302:	3303      	adds	r3, #3
 8005304:	089b      	lsrs	r3, r3, #2
 8005306:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	6919      	ldr	r1, [r3, #16]
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	b2da      	uxtb	r2, r3
 8005310:	69fb      	ldr	r3, [r7, #28]
 8005312:	b29b      	uxth	r3, r3
 8005314:	6978      	ldr	r0, [r7, #20]
 8005316:	f007 fc75 	bl	800cc04 <USB_WritePacket>

    ep->xfer_buff  += len;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	691a      	ldr	r2, [r3, #16]
 800531e:	69fb      	ldr	r3, [r7, #28]
 8005320:	441a      	add	r2, r3
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	6a1a      	ldr	r2, [r3, #32]
 800532a:	69fb      	ldr	r3, [r7, #28]
 800532c:	441a      	add	r2, r3
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	015a      	lsls	r2, r3, #5
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	4413      	add	r3, r2
 800533a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800533e:	699b      	ldr	r3, [r3, #24]
 8005340:	b29b      	uxth	r3, r3
 8005342:	69ba      	ldr	r2, [r7, #24]
 8005344:	429a      	cmp	r2, r3
 8005346:	d809      	bhi.n	800535c <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	6a1a      	ldr	r2, [r3, #32]
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005350:	429a      	cmp	r2, r3
 8005352:	d203      	bcs.n	800535c <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	699b      	ldr	r3, [r3, #24]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d1c3      	bne.n	80052e4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	699a      	ldr	r2, [r3, #24]
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	6a1b      	ldr	r3, [r3, #32]
 8005364:	429a      	cmp	r2, r3
 8005366:	d811      	bhi.n	800538c <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	f003 030f 	and.w	r3, r3, #15
 800536e:	2201      	movs	r2, #1
 8005370:	fa02 f303 	lsl.w	r3, r2, r3
 8005374:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800537c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	43db      	mvns	r3, r3
 8005382:	6939      	ldr	r1, [r7, #16]
 8005384:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005388:	4013      	ands	r3, r2
 800538a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800538c:	2300      	movs	r3, #0
}
 800538e:	4618      	mov	r0, r3
 8005390:	3720      	adds	r7, #32
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}
	...

08005398 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b086      	sub	sp, #24
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
 80053a0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	333c      	adds	r3, #60	; 0x3c
 80053b0:	3304      	adds	r3, #4
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	015a      	lsls	r2, r3, #5
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	4413      	add	r3, r2
 80053be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053c2:	689b      	ldr	r3, [r3, #8]
 80053c4:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	4a19      	ldr	r2, [pc, #100]	; (8005430 <PCD_EP_OutXfrComplete_int+0x98>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d124      	bne.n	8005418 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d00a      	beq.n	80053ee <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	015a      	lsls	r2, r3, #5
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	4413      	add	r3, r2
 80053e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053e4:	461a      	mov	r2, r3
 80053e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053ea:	6093      	str	r3, [r2, #8]
 80053ec:	e01a      	b.n	8005424 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	f003 0320 	and.w	r3, r3, #32
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d008      	beq.n	800540a <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	015a      	lsls	r2, r3, #5
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	4413      	add	r3, r2
 8005400:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005404:	461a      	mov	r2, r3
 8005406:	2320      	movs	r3, #32
 8005408:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	b2db      	uxtb	r3, r3
 800540e:	4619      	mov	r1, r3
 8005410:	6878      	ldr	r0, [r7, #4]
 8005412:	f00a f90f 	bl	800f634 <HAL_PCD_DataOutStageCallback>
 8005416:	e005      	b.n	8005424 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	b2db      	uxtb	r3, r3
 800541c:	4619      	mov	r1, r3
 800541e:	6878      	ldr	r0, [r7, #4]
 8005420:	f00a f908 	bl	800f634 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8005424:	2300      	movs	r3, #0
}
 8005426:	4618      	mov	r0, r3
 8005428:	3718      	adds	r7, #24
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}
 800542e:	bf00      	nop
 8005430:	4f54310a 	.word	0x4f54310a

08005434 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b086      	sub	sp, #24
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
 800543c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	333c      	adds	r3, #60	; 0x3c
 800544c:	3304      	adds	r3, #4
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	015a      	lsls	r2, r3, #5
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	4413      	add	r3, r2
 800545a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800545e:	689b      	ldr	r3, [r3, #8]
 8005460:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	4a0c      	ldr	r2, [pc, #48]	; (8005498 <PCD_EP_OutSetupPacket_int+0x64>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d90e      	bls.n	8005488 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005470:	2b00      	cmp	r3, #0
 8005472:	d009      	beq.n	8005488 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	015a      	lsls	r2, r3, #5
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	4413      	add	r3, r2
 800547c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005480:	461a      	mov	r2, r3
 8005482:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005486:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005488:	6878      	ldr	r0, [r7, #4]
 800548a:	f00a f8c1 	bl	800f610 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 800548e:	2300      	movs	r3, #0
}
 8005490:	4618      	mov	r0, r3
 8005492:	3718      	adds	r7, #24
 8005494:	46bd      	mov	sp, r7
 8005496:	bd80      	pop	{r7, pc}
 8005498:	4f54300a 	.word	0x4f54300a

0800549c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800549c:	b480      	push	{r7}
 800549e:	b085      	sub	sp, #20
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
 80054a4:	460b      	mov	r3, r1
 80054a6:	70fb      	strb	r3, [r7, #3]
 80054a8:	4613      	mov	r3, r2
 80054aa:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80054b4:	78fb      	ldrb	r3, [r7, #3]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d107      	bne.n	80054ca <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80054ba:	883b      	ldrh	r3, [r7, #0]
 80054bc:	0419      	lsls	r1, r3, #16
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	68ba      	ldr	r2, [r7, #8]
 80054c4:	430a      	orrs	r2, r1
 80054c6:	629a      	str	r2, [r3, #40]	; 0x28
 80054c8:	e028      	b.n	800551c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054d0:	0c1b      	lsrs	r3, r3, #16
 80054d2:	68ba      	ldr	r2, [r7, #8]
 80054d4:	4413      	add	r3, r2
 80054d6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80054d8:	2300      	movs	r3, #0
 80054da:	73fb      	strb	r3, [r7, #15]
 80054dc:	e00d      	b.n	80054fa <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681a      	ldr	r2, [r3, #0]
 80054e2:	7bfb      	ldrb	r3, [r7, #15]
 80054e4:	3340      	adds	r3, #64	; 0x40
 80054e6:	009b      	lsls	r3, r3, #2
 80054e8:	4413      	add	r3, r2
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	0c1b      	lsrs	r3, r3, #16
 80054ee:	68ba      	ldr	r2, [r7, #8]
 80054f0:	4413      	add	r3, r2
 80054f2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80054f4:	7bfb      	ldrb	r3, [r7, #15]
 80054f6:	3301      	adds	r3, #1
 80054f8:	73fb      	strb	r3, [r7, #15]
 80054fa:	7bfa      	ldrb	r2, [r7, #15]
 80054fc:	78fb      	ldrb	r3, [r7, #3]
 80054fe:	3b01      	subs	r3, #1
 8005500:	429a      	cmp	r2, r3
 8005502:	d3ec      	bcc.n	80054de <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005504:	883b      	ldrh	r3, [r7, #0]
 8005506:	0418      	lsls	r0, r3, #16
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6819      	ldr	r1, [r3, #0]
 800550c:	78fb      	ldrb	r3, [r7, #3]
 800550e:	3b01      	subs	r3, #1
 8005510:	68ba      	ldr	r2, [r7, #8]
 8005512:	4302      	orrs	r2, r0
 8005514:	3340      	adds	r3, #64	; 0x40
 8005516:	009b      	lsls	r3, r3, #2
 8005518:	440b      	add	r3, r1
 800551a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800551c:	2300      	movs	r3, #0
}
 800551e:	4618      	mov	r0, r3
 8005520:	3714      	adds	r7, #20
 8005522:	46bd      	mov	sp, r7
 8005524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005528:	4770      	bx	lr

0800552a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800552a:	b480      	push	{r7}
 800552c:	b083      	sub	sp, #12
 800552e:	af00      	add	r7, sp, #0
 8005530:	6078      	str	r0, [r7, #4]
 8005532:	460b      	mov	r3, r1
 8005534:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	887a      	ldrh	r2, [r7, #2]
 800553c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800553e:	2300      	movs	r3, #0
}
 8005540:	4618      	mov	r0, r3
 8005542:	370c      	adds	r7, #12
 8005544:	46bd      	mov	sp, r7
 8005546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554a:	4770      	bx	lr

0800554c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800554c:	b480      	push	{r7}
 800554e:	b085      	sub	sp, #20
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2201      	movs	r2, #1
 800555e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2200      	movs	r2, #0
 8005566:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	699b      	ldr	r3, [r3, #24]
 800556e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800557a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800557e:	f043 0303 	orr.w	r3, r3, #3
 8005582:	68fa      	ldr	r2, [r7, #12]
 8005584:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8005586:	2300      	movs	r3, #0
}
 8005588:	4618      	mov	r0, r3
 800558a:	3714      	adds	r7, #20
 800558c:	46bd      	mov	sp, r7
 800558e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005592:	4770      	bx	lr

08005594 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005594:	b480      	push	{r7}
 8005596:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005598:	4b05      	ldr	r3, [pc, #20]	; (80055b0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a04      	ldr	r2, [pc, #16]	; (80055b0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800559e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055a2:	6013      	str	r3, [r2, #0]
}
 80055a4:	bf00      	nop
 80055a6:	46bd      	mov	sp, r7
 80055a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ac:	4770      	bx	lr
 80055ae:	bf00      	nop
 80055b0:	40007000 	.word	0x40007000

080055b4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80055b4:	b480      	push	{r7}
 80055b6:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80055b8:	4b0d      	ldr	r3, [pc, #52]	; (80055f0 <HAL_PWREx_GetVoltageRange+0x3c>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80055c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055c4:	d102      	bne.n	80055cc <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80055c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80055ca:	e00b      	b.n	80055e4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80055cc:	4b08      	ldr	r3, [pc, #32]	; (80055f0 <HAL_PWREx_GetVoltageRange+0x3c>)
 80055ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80055d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055da:	d102      	bne.n	80055e2 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80055dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80055e0:	e000      	b.n	80055e4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80055e2:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	46bd      	mov	sp, r7
 80055e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ec:	4770      	bx	lr
 80055ee:	bf00      	nop
 80055f0:	40007000 	.word	0x40007000

080055f4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80055f4:	b480      	push	{r7}
 80055f6:	b085      	sub	sp, #20
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d141      	bne.n	8005686 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005602:	4b4b      	ldr	r3, [pc, #300]	; (8005730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800560a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800560e:	d131      	bne.n	8005674 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005610:	4b47      	ldr	r3, [pc, #284]	; (8005730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005612:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005616:	4a46      	ldr	r2, [pc, #280]	; (8005730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005618:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800561c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005620:	4b43      	ldr	r3, [pc, #268]	; (8005730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005628:	4a41      	ldr	r2, [pc, #260]	; (8005730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800562a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800562e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8005630:	4b40      	ldr	r3, [pc, #256]	; (8005734 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	2232      	movs	r2, #50	; 0x32
 8005636:	fb02 f303 	mul.w	r3, r2, r3
 800563a:	4a3f      	ldr	r2, [pc, #252]	; (8005738 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800563c:	fba2 2303 	umull	r2, r3, r2, r3
 8005640:	0c9b      	lsrs	r3, r3, #18
 8005642:	3301      	adds	r3, #1
 8005644:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005646:	e002      	b.n	800564e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	3b01      	subs	r3, #1
 800564c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800564e:	4b38      	ldr	r3, [pc, #224]	; (8005730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005650:	695b      	ldr	r3, [r3, #20]
 8005652:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005656:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800565a:	d102      	bne.n	8005662 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d1f2      	bne.n	8005648 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005662:	4b33      	ldr	r3, [pc, #204]	; (8005730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005664:	695b      	ldr	r3, [r3, #20]
 8005666:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800566a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800566e:	d158      	bne.n	8005722 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005670:	2303      	movs	r3, #3
 8005672:	e057      	b.n	8005724 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005674:	4b2e      	ldr	r3, [pc, #184]	; (8005730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005676:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800567a:	4a2d      	ldr	r2, [pc, #180]	; (8005730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800567c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005680:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005684:	e04d      	b.n	8005722 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800568c:	d141      	bne.n	8005712 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800568e:	4b28      	ldr	r3, [pc, #160]	; (8005730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005696:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800569a:	d131      	bne.n	8005700 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800569c:	4b24      	ldr	r3, [pc, #144]	; (8005730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800569e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80056a2:	4a23      	ldr	r2, [pc, #140]	; (8005730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056a8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80056ac:	4b20      	ldr	r3, [pc, #128]	; (8005730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80056b4:	4a1e      	ldr	r2, [pc, #120]	; (8005730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80056ba:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80056bc:	4b1d      	ldr	r3, [pc, #116]	; (8005734 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	2232      	movs	r2, #50	; 0x32
 80056c2:	fb02 f303 	mul.w	r3, r2, r3
 80056c6:	4a1c      	ldr	r2, [pc, #112]	; (8005738 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80056c8:	fba2 2303 	umull	r2, r3, r2, r3
 80056cc:	0c9b      	lsrs	r3, r3, #18
 80056ce:	3301      	adds	r3, #1
 80056d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80056d2:	e002      	b.n	80056da <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	3b01      	subs	r3, #1
 80056d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80056da:	4b15      	ldr	r3, [pc, #84]	; (8005730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056dc:	695b      	ldr	r3, [r3, #20]
 80056de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056e6:	d102      	bne.n	80056ee <HAL_PWREx_ControlVoltageScaling+0xfa>
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d1f2      	bne.n	80056d4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80056ee:	4b10      	ldr	r3, [pc, #64]	; (8005730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056f0:	695b      	ldr	r3, [r3, #20]
 80056f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056fa:	d112      	bne.n	8005722 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80056fc:	2303      	movs	r3, #3
 80056fe:	e011      	b.n	8005724 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005700:	4b0b      	ldr	r3, [pc, #44]	; (8005730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005702:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005706:	4a0a      	ldr	r2, [pc, #40]	; (8005730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005708:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800570c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005710:	e007      	b.n	8005722 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005712:	4b07      	ldr	r3, [pc, #28]	; (8005730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800571a:	4a05      	ldr	r2, [pc, #20]	; (8005730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800571c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005720:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005722:	2300      	movs	r3, #0
}
 8005724:	4618      	mov	r0, r3
 8005726:	3714      	adds	r7, #20
 8005728:	46bd      	mov	sp, r7
 800572a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572e:	4770      	bx	lr
 8005730:	40007000 	.word	0x40007000
 8005734:	20000000 	.word	0x20000000
 8005738:	431bde83 	.word	0x431bde83

0800573c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800573c:	b480      	push	{r7}
 800573e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8005740:	4b05      	ldr	r3, [pc, #20]	; (8005758 <HAL_PWREx_EnableVddUSB+0x1c>)
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	4a04      	ldr	r2, [pc, #16]	; (8005758 <HAL_PWREx_EnableVddUSB+0x1c>)
 8005746:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800574a:	6053      	str	r3, [r2, #4]
}
 800574c:	bf00      	nop
 800574e:	46bd      	mov	sp, r7
 8005750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005754:	4770      	bx	lr
 8005756:	bf00      	nop
 8005758:	40007000 	.word	0x40007000

0800575c <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800575c:	b480      	push	{r7}
 800575e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8005760:	4b05      	ldr	r3, [pc, #20]	; (8005778 <HAL_PWREx_EnableVddIO2+0x1c>)
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	4a04      	ldr	r2, [pc, #16]	; (8005778 <HAL_PWREx_EnableVddIO2+0x1c>)
 8005766:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800576a:	6053      	str	r3, [r2, #4]
}
 800576c:	bf00      	nop
 800576e:	46bd      	mov	sp, r7
 8005770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005774:	4770      	bx	lr
 8005776:	bf00      	nop
 8005778:	40007000 	.word	0x40007000

0800577c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b088      	sub	sp, #32
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d102      	bne.n	8005790 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800578a:	2301      	movs	r3, #1
 800578c:	f000 bc08 	b.w	8005fa0 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005790:	4b96      	ldr	r3, [pc, #600]	; (80059ec <HAL_RCC_OscConfig+0x270>)
 8005792:	689b      	ldr	r3, [r3, #8]
 8005794:	f003 030c 	and.w	r3, r3, #12
 8005798:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800579a:	4b94      	ldr	r3, [pc, #592]	; (80059ec <HAL_RCC_OscConfig+0x270>)
 800579c:	68db      	ldr	r3, [r3, #12]
 800579e:	f003 0303 	and.w	r3, r3, #3
 80057a2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f003 0310 	and.w	r3, r3, #16
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	f000 80e4 	beq.w	800597a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80057b2:	69bb      	ldr	r3, [r7, #24]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d007      	beq.n	80057c8 <HAL_RCC_OscConfig+0x4c>
 80057b8:	69bb      	ldr	r3, [r7, #24]
 80057ba:	2b0c      	cmp	r3, #12
 80057bc:	f040 808b 	bne.w	80058d6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	2b01      	cmp	r3, #1
 80057c4:	f040 8087 	bne.w	80058d6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80057c8:	4b88      	ldr	r3, [pc, #544]	; (80059ec <HAL_RCC_OscConfig+0x270>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f003 0302 	and.w	r3, r3, #2
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d005      	beq.n	80057e0 <HAL_RCC_OscConfig+0x64>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	699b      	ldr	r3, [r3, #24]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d101      	bne.n	80057e0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80057dc:	2301      	movs	r3, #1
 80057de:	e3df      	b.n	8005fa0 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6a1a      	ldr	r2, [r3, #32]
 80057e4:	4b81      	ldr	r3, [pc, #516]	; (80059ec <HAL_RCC_OscConfig+0x270>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f003 0308 	and.w	r3, r3, #8
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d004      	beq.n	80057fa <HAL_RCC_OscConfig+0x7e>
 80057f0:	4b7e      	ldr	r3, [pc, #504]	; (80059ec <HAL_RCC_OscConfig+0x270>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80057f8:	e005      	b.n	8005806 <HAL_RCC_OscConfig+0x8a>
 80057fa:	4b7c      	ldr	r3, [pc, #496]	; (80059ec <HAL_RCC_OscConfig+0x270>)
 80057fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005800:	091b      	lsrs	r3, r3, #4
 8005802:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005806:	4293      	cmp	r3, r2
 8005808:	d223      	bcs.n	8005852 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6a1b      	ldr	r3, [r3, #32]
 800580e:	4618      	mov	r0, r3
 8005810:	f000 fdca 	bl	80063a8 <RCC_SetFlashLatencyFromMSIRange>
 8005814:	4603      	mov	r3, r0
 8005816:	2b00      	cmp	r3, #0
 8005818:	d001      	beq.n	800581e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800581a:	2301      	movs	r3, #1
 800581c:	e3c0      	b.n	8005fa0 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800581e:	4b73      	ldr	r3, [pc, #460]	; (80059ec <HAL_RCC_OscConfig+0x270>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a72      	ldr	r2, [pc, #456]	; (80059ec <HAL_RCC_OscConfig+0x270>)
 8005824:	f043 0308 	orr.w	r3, r3, #8
 8005828:	6013      	str	r3, [r2, #0]
 800582a:	4b70      	ldr	r3, [pc, #448]	; (80059ec <HAL_RCC_OscConfig+0x270>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6a1b      	ldr	r3, [r3, #32]
 8005836:	496d      	ldr	r1, [pc, #436]	; (80059ec <HAL_RCC_OscConfig+0x270>)
 8005838:	4313      	orrs	r3, r2
 800583a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800583c:	4b6b      	ldr	r3, [pc, #428]	; (80059ec <HAL_RCC_OscConfig+0x270>)
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	69db      	ldr	r3, [r3, #28]
 8005848:	021b      	lsls	r3, r3, #8
 800584a:	4968      	ldr	r1, [pc, #416]	; (80059ec <HAL_RCC_OscConfig+0x270>)
 800584c:	4313      	orrs	r3, r2
 800584e:	604b      	str	r3, [r1, #4]
 8005850:	e025      	b.n	800589e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005852:	4b66      	ldr	r3, [pc, #408]	; (80059ec <HAL_RCC_OscConfig+0x270>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4a65      	ldr	r2, [pc, #404]	; (80059ec <HAL_RCC_OscConfig+0x270>)
 8005858:	f043 0308 	orr.w	r3, r3, #8
 800585c:	6013      	str	r3, [r2, #0]
 800585e:	4b63      	ldr	r3, [pc, #396]	; (80059ec <HAL_RCC_OscConfig+0x270>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6a1b      	ldr	r3, [r3, #32]
 800586a:	4960      	ldr	r1, [pc, #384]	; (80059ec <HAL_RCC_OscConfig+0x270>)
 800586c:	4313      	orrs	r3, r2
 800586e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005870:	4b5e      	ldr	r3, [pc, #376]	; (80059ec <HAL_RCC_OscConfig+0x270>)
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	69db      	ldr	r3, [r3, #28]
 800587c:	021b      	lsls	r3, r3, #8
 800587e:	495b      	ldr	r1, [pc, #364]	; (80059ec <HAL_RCC_OscConfig+0x270>)
 8005880:	4313      	orrs	r3, r2
 8005882:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005884:	69bb      	ldr	r3, [r7, #24]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d109      	bne.n	800589e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6a1b      	ldr	r3, [r3, #32]
 800588e:	4618      	mov	r0, r3
 8005890:	f000 fd8a 	bl	80063a8 <RCC_SetFlashLatencyFromMSIRange>
 8005894:	4603      	mov	r3, r0
 8005896:	2b00      	cmp	r3, #0
 8005898:	d001      	beq.n	800589e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800589a:	2301      	movs	r3, #1
 800589c:	e380      	b.n	8005fa0 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800589e:	f000 fcc1 	bl	8006224 <HAL_RCC_GetSysClockFreq>
 80058a2:	4602      	mov	r2, r0
 80058a4:	4b51      	ldr	r3, [pc, #324]	; (80059ec <HAL_RCC_OscConfig+0x270>)
 80058a6:	689b      	ldr	r3, [r3, #8]
 80058a8:	091b      	lsrs	r3, r3, #4
 80058aa:	f003 030f 	and.w	r3, r3, #15
 80058ae:	4950      	ldr	r1, [pc, #320]	; (80059f0 <HAL_RCC_OscConfig+0x274>)
 80058b0:	5ccb      	ldrb	r3, [r1, r3]
 80058b2:	f003 031f 	and.w	r3, r3, #31
 80058b6:	fa22 f303 	lsr.w	r3, r2, r3
 80058ba:	4a4e      	ldr	r2, [pc, #312]	; (80059f4 <HAL_RCC_OscConfig+0x278>)
 80058bc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80058be:	4b4e      	ldr	r3, [pc, #312]	; (80059f8 <HAL_RCC_OscConfig+0x27c>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4618      	mov	r0, r3
 80058c4:	f7fc fc74 	bl	80021b0 <HAL_InitTick>
 80058c8:	4603      	mov	r3, r0
 80058ca:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80058cc:	7bfb      	ldrb	r3, [r7, #15]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d052      	beq.n	8005978 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80058d2:	7bfb      	ldrb	r3, [r7, #15]
 80058d4:	e364      	b.n	8005fa0 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	699b      	ldr	r3, [r3, #24]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d032      	beq.n	8005944 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80058de:	4b43      	ldr	r3, [pc, #268]	; (80059ec <HAL_RCC_OscConfig+0x270>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a42      	ldr	r2, [pc, #264]	; (80059ec <HAL_RCC_OscConfig+0x270>)
 80058e4:	f043 0301 	orr.w	r3, r3, #1
 80058e8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80058ea:	f7fc fcb1 	bl	8002250 <HAL_GetTick>
 80058ee:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80058f0:	e008      	b.n	8005904 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80058f2:	f7fc fcad 	bl	8002250 <HAL_GetTick>
 80058f6:	4602      	mov	r2, r0
 80058f8:	693b      	ldr	r3, [r7, #16]
 80058fa:	1ad3      	subs	r3, r2, r3
 80058fc:	2b02      	cmp	r3, #2
 80058fe:	d901      	bls.n	8005904 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8005900:	2303      	movs	r3, #3
 8005902:	e34d      	b.n	8005fa0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005904:	4b39      	ldr	r3, [pc, #228]	; (80059ec <HAL_RCC_OscConfig+0x270>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f003 0302 	and.w	r3, r3, #2
 800590c:	2b00      	cmp	r3, #0
 800590e:	d0f0      	beq.n	80058f2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005910:	4b36      	ldr	r3, [pc, #216]	; (80059ec <HAL_RCC_OscConfig+0x270>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a35      	ldr	r2, [pc, #212]	; (80059ec <HAL_RCC_OscConfig+0x270>)
 8005916:	f043 0308 	orr.w	r3, r3, #8
 800591a:	6013      	str	r3, [r2, #0]
 800591c:	4b33      	ldr	r3, [pc, #204]	; (80059ec <HAL_RCC_OscConfig+0x270>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6a1b      	ldr	r3, [r3, #32]
 8005928:	4930      	ldr	r1, [pc, #192]	; (80059ec <HAL_RCC_OscConfig+0x270>)
 800592a:	4313      	orrs	r3, r2
 800592c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800592e:	4b2f      	ldr	r3, [pc, #188]	; (80059ec <HAL_RCC_OscConfig+0x270>)
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	69db      	ldr	r3, [r3, #28]
 800593a:	021b      	lsls	r3, r3, #8
 800593c:	492b      	ldr	r1, [pc, #172]	; (80059ec <HAL_RCC_OscConfig+0x270>)
 800593e:	4313      	orrs	r3, r2
 8005940:	604b      	str	r3, [r1, #4]
 8005942:	e01a      	b.n	800597a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005944:	4b29      	ldr	r3, [pc, #164]	; (80059ec <HAL_RCC_OscConfig+0x270>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a28      	ldr	r2, [pc, #160]	; (80059ec <HAL_RCC_OscConfig+0x270>)
 800594a:	f023 0301 	bic.w	r3, r3, #1
 800594e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005950:	f7fc fc7e 	bl	8002250 <HAL_GetTick>
 8005954:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005956:	e008      	b.n	800596a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005958:	f7fc fc7a 	bl	8002250 <HAL_GetTick>
 800595c:	4602      	mov	r2, r0
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	1ad3      	subs	r3, r2, r3
 8005962:	2b02      	cmp	r3, #2
 8005964:	d901      	bls.n	800596a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8005966:	2303      	movs	r3, #3
 8005968:	e31a      	b.n	8005fa0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800596a:	4b20      	ldr	r3, [pc, #128]	; (80059ec <HAL_RCC_OscConfig+0x270>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f003 0302 	and.w	r3, r3, #2
 8005972:	2b00      	cmp	r3, #0
 8005974:	d1f0      	bne.n	8005958 <HAL_RCC_OscConfig+0x1dc>
 8005976:	e000      	b.n	800597a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005978:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f003 0301 	and.w	r3, r3, #1
 8005982:	2b00      	cmp	r3, #0
 8005984:	d073      	beq.n	8005a6e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005986:	69bb      	ldr	r3, [r7, #24]
 8005988:	2b08      	cmp	r3, #8
 800598a:	d005      	beq.n	8005998 <HAL_RCC_OscConfig+0x21c>
 800598c:	69bb      	ldr	r3, [r7, #24]
 800598e:	2b0c      	cmp	r3, #12
 8005990:	d10e      	bne.n	80059b0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	2b03      	cmp	r3, #3
 8005996:	d10b      	bne.n	80059b0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005998:	4b14      	ldr	r3, [pc, #80]	; (80059ec <HAL_RCC_OscConfig+0x270>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d063      	beq.n	8005a6c <HAL_RCC_OscConfig+0x2f0>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d15f      	bne.n	8005a6c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80059ac:	2301      	movs	r3, #1
 80059ae:	e2f7      	b.n	8005fa0 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059b8:	d106      	bne.n	80059c8 <HAL_RCC_OscConfig+0x24c>
 80059ba:	4b0c      	ldr	r3, [pc, #48]	; (80059ec <HAL_RCC_OscConfig+0x270>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4a0b      	ldr	r2, [pc, #44]	; (80059ec <HAL_RCC_OscConfig+0x270>)
 80059c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059c4:	6013      	str	r3, [r2, #0]
 80059c6:	e025      	b.n	8005a14 <HAL_RCC_OscConfig+0x298>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80059d0:	d114      	bne.n	80059fc <HAL_RCC_OscConfig+0x280>
 80059d2:	4b06      	ldr	r3, [pc, #24]	; (80059ec <HAL_RCC_OscConfig+0x270>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4a05      	ldr	r2, [pc, #20]	; (80059ec <HAL_RCC_OscConfig+0x270>)
 80059d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80059dc:	6013      	str	r3, [r2, #0]
 80059de:	4b03      	ldr	r3, [pc, #12]	; (80059ec <HAL_RCC_OscConfig+0x270>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a02      	ldr	r2, [pc, #8]	; (80059ec <HAL_RCC_OscConfig+0x270>)
 80059e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059e8:	6013      	str	r3, [r2, #0]
 80059ea:	e013      	b.n	8005a14 <HAL_RCC_OscConfig+0x298>
 80059ec:	40021000 	.word	0x40021000
 80059f0:	08013b70 	.word	0x08013b70
 80059f4:	20000000 	.word	0x20000000
 80059f8:	20000004 	.word	0x20000004
 80059fc:	4ba0      	ldr	r3, [pc, #640]	; (8005c80 <HAL_RCC_OscConfig+0x504>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a9f      	ldr	r2, [pc, #636]	; (8005c80 <HAL_RCC_OscConfig+0x504>)
 8005a02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a06:	6013      	str	r3, [r2, #0]
 8005a08:	4b9d      	ldr	r3, [pc, #628]	; (8005c80 <HAL_RCC_OscConfig+0x504>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a9c      	ldr	r2, [pc, #624]	; (8005c80 <HAL_RCC_OscConfig+0x504>)
 8005a0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d013      	beq.n	8005a44 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a1c:	f7fc fc18 	bl	8002250 <HAL_GetTick>
 8005a20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005a22:	e008      	b.n	8005a36 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a24:	f7fc fc14 	bl	8002250 <HAL_GetTick>
 8005a28:	4602      	mov	r2, r0
 8005a2a:	693b      	ldr	r3, [r7, #16]
 8005a2c:	1ad3      	subs	r3, r2, r3
 8005a2e:	2b64      	cmp	r3, #100	; 0x64
 8005a30:	d901      	bls.n	8005a36 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005a32:	2303      	movs	r3, #3
 8005a34:	e2b4      	b.n	8005fa0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005a36:	4b92      	ldr	r3, [pc, #584]	; (8005c80 <HAL_RCC_OscConfig+0x504>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d0f0      	beq.n	8005a24 <HAL_RCC_OscConfig+0x2a8>
 8005a42:	e014      	b.n	8005a6e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a44:	f7fc fc04 	bl	8002250 <HAL_GetTick>
 8005a48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005a4a:	e008      	b.n	8005a5e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a4c:	f7fc fc00 	bl	8002250 <HAL_GetTick>
 8005a50:	4602      	mov	r2, r0
 8005a52:	693b      	ldr	r3, [r7, #16]
 8005a54:	1ad3      	subs	r3, r2, r3
 8005a56:	2b64      	cmp	r3, #100	; 0x64
 8005a58:	d901      	bls.n	8005a5e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005a5a:	2303      	movs	r3, #3
 8005a5c:	e2a0      	b.n	8005fa0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005a5e:	4b88      	ldr	r3, [pc, #544]	; (8005c80 <HAL_RCC_OscConfig+0x504>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d1f0      	bne.n	8005a4c <HAL_RCC_OscConfig+0x2d0>
 8005a6a:	e000      	b.n	8005a6e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f003 0302 	and.w	r3, r3, #2
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d060      	beq.n	8005b3c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005a7a:	69bb      	ldr	r3, [r7, #24]
 8005a7c:	2b04      	cmp	r3, #4
 8005a7e:	d005      	beq.n	8005a8c <HAL_RCC_OscConfig+0x310>
 8005a80:	69bb      	ldr	r3, [r7, #24]
 8005a82:	2b0c      	cmp	r3, #12
 8005a84:	d119      	bne.n	8005aba <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005a86:	697b      	ldr	r3, [r7, #20]
 8005a88:	2b02      	cmp	r3, #2
 8005a8a:	d116      	bne.n	8005aba <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005a8c:	4b7c      	ldr	r3, [pc, #496]	; (8005c80 <HAL_RCC_OscConfig+0x504>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d005      	beq.n	8005aa4 <HAL_RCC_OscConfig+0x328>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	68db      	ldr	r3, [r3, #12]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d101      	bne.n	8005aa4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	e27d      	b.n	8005fa0 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005aa4:	4b76      	ldr	r3, [pc, #472]	; (8005c80 <HAL_RCC_OscConfig+0x504>)
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	691b      	ldr	r3, [r3, #16]
 8005ab0:	061b      	lsls	r3, r3, #24
 8005ab2:	4973      	ldr	r1, [pc, #460]	; (8005c80 <HAL_RCC_OscConfig+0x504>)
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005ab8:	e040      	b.n	8005b3c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	68db      	ldr	r3, [r3, #12]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d023      	beq.n	8005b0a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005ac2:	4b6f      	ldr	r3, [pc, #444]	; (8005c80 <HAL_RCC_OscConfig+0x504>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4a6e      	ldr	r2, [pc, #440]	; (8005c80 <HAL_RCC_OscConfig+0x504>)
 8005ac8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005acc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ace:	f7fc fbbf 	bl	8002250 <HAL_GetTick>
 8005ad2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005ad4:	e008      	b.n	8005ae8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ad6:	f7fc fbbb 	bl	8002250 <HAL_GetTick>
 8005ada:	4602      	mov	r2, r0
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	1ad3      	subs	r3, r2, r3
 8005ae0:	2b02      	cmp	r3, #2
 8005ae2:	d901      	bls.n	8005ae8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005ae4:	2303      	movs	r3, #3
 8005ae6:	e25b      	b.n	8005fa0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005ae8:	4b65      	ldr	r3, [pc, #404]	; (8005c80 <HAL_RCC_OscConfig+0x504>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d0f0      	beq.n	8005ad6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005af4:	4b62      	ldr	r3, [pc, #392]	; (8005c80 <HAL_RCC_OscConfig+0x504>)
 8005af6:	685b      	ldr	r3, [r3, #4]
 8005af8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	691b      	ldr	r3, [r3, #16]
 8005b00:	061b      	lsls	r3, r3, #24
 8005b02:	495f      	ldr	r1, [pc, #380]	; (8005c80 <HAL_RCC_OscConfig+0x504>)
 8005b04:	4313      	orrs	r3, r2
 8005b06:	604b      	str	r3, [r1, #4]
 8005b08:	e018      	b.n	8005b3c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005b0a:	4b5d      	ldr	r3, [pc, #372]	; (8005c80 <HAL_RCC_OscConfig+0x504>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	4a5c      	ldr	r2, [pc, #368]	; (8005c80 <HAL_RCC_OscConfig+0x504>)
 8005b10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b16:	f7fc fb9b 	bl	8002250 <HAL_GetTick>
 8005b1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005b1c:	e008      	b.n	8005b30 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b1e:	f7fc fb97 	bl	8002250 <HAL_GetTick>
 8005b22:	4602      	mov	r2, r0
 8005b24:	693b      	ldr	r3, [r7, #16]
 8005b26:	1ad3      	subs	r3, r2, r3
 8005b28:	2b02      	cmp	r3, #2
 8005b2a:	d901      	bls.n	8005b30 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005b2c:	2303      	movs	r3, #3
 8005b2e:	e237      	b.n	8005fa0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005b30:	4b53      	ldr	r3, [pc, #332]	; (8005c80 <HAL_RCC_OscConfig+0x504>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d1f0      	bne.n	8005b1e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f003 0308 	and.w	r3, r3, #8
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d03c      	beq.n	8005bc2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	695b      	ldr	r3, [r3, #20]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d01c      	beq.n	8005b8a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005b50:	4b4b      	ldr	r3, [pc, #300]	; (8005c80 <HAL_RCC_OscConfig+0x504>)
 8005b52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b56:	4a4a      	ldr	r2, [pc, #296]	; (8005c80 <HAL_RCC_OscConfig+0x504>)
 8005b58:	f043 0301 	orr.w	r3, r3, #1
 8005b5c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b60:	f7fc fb76 	bl	8002250 <HAL_GetTick>
 8005b64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005b66:	e008      	b.n	8005b7a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b68:	f7fc fb72 	bl	8002250 <HAL_GetTick>
 8005b6c:	4602      	mov	r2, r0
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	1ad3      	subs	r3, r2, r3
 8005b72:	2b02      	cmp	r3, #2
 8005b74:	d901      	bls.n	8005b7a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005b76:	2303      	movs	r3, #3
 8005b78:	e212      	b.n	8005fa0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005b7a:	4b41      	ldr	r3, [pc, #260]	; (8005c80 <HAL_RCC_OscConfig+0x504>)
 8005b7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b80:	f003 0302 	and.w	r3, r3, #2
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d0ef      	beq.n	8005b68 <HAL_RCC_OscConfig+0x3ec>
 8005b88:	e01b      	b.n	8005bc2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005b8a:	4b3d      	ldr	r3, [pc, #244]	; (8005c80 <HAL_RCC_OscConfig+0x504>)
 8005b8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b90:	4a3b      	ldr	r2, [pc, #236]	; (8005c80 <HAL_RCC_OscConfig+0x504>)
 8005b92:	f023 0301 	bic.w	r3, r3, #1
 8005b96:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b9a:	f7fc fb59 	bl	8002250 <HAL_GetTick>
 8005b9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005ba0:	e008      	b.n	8005bb4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ba2:	f7fc fb55 	bl	8002250 <HAL_GetTick>
 8005ba6:	4602      	mov	r2, r0
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	1ad3      	subs	r3, r2, r3
 8005bac:	2b02      	cmp	r3, #2
 8005bae:	d901      	bls.n	8005bb4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005bb0:	2303      	movs	r3, #3
 8005bb2:	e1f5      	b.n	8005fa0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005bb4:	4b32      	ldr	r3, [pc, #200]	; (8005c80 <HAL_RCC_OscConfig+0x504>)
 8005bb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005bba:	f003 0302 	and.w	r3, r3, #2
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d1ef      	bne.n	8005ba2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f003 0304 	and.w	r3, r3, #4
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	f000 80a6 	beq.w	8005d1c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005bd4:	4b2a      	ldr	r3, [pc, #168]	; (8005c80 <HAL_RCC_OscConfig+0x504>)
 8005bd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d10d      	bne.n	8005bfc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005be0:	4b27      	ldr	r3, [pc, #156]	; (8005c80 <HAL_RCC_OscConfig+0x504>)
 8005be2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005be4:	4a26      	ldr	r2, [pc, #152]	; (8005c80 <HAL_RCC_OscConfig+0x504>)
 8005be6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bea:	6593      	str	r3, [r2, #88]	; 0x58
 8005bec:	4b24      	ldr	r3, [pc, #144]	; (8005c80 <HAL_RCC_OscConfig+0x504>)
 8005bee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bf4:	60bb      	str	r3, [r7, #8]
 8005bf6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005bfc:	4b21      	ldr	r3, [pc, #132]	; (8005c84 <HAL_RCC_OscConfig+0x508>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d118      	bne.n	8005c3a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005c08:	4b1e      	ldr	r3, [pc, #120]	; (8005c84 <HAL_RCC_OscConfig+0x508>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4a1d      	ldr	r2, [pc, #116]	; (8005c84 <HAL_RCC_OscConfig+0x508>)
 8005c0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c12:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c14:	f7fc fb1c 	bl	8002250 <HAL_GetTick>
 8005c18:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005c1a:	e008      	b.n	8005c2e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c1c:	f7fc fb18 	bl	8002250 <HAL_GetTick>
 8005c20:	4602      	mov	r2, r0
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	1ad3      	subs	r3, r2, r3
 8005c26:	2b02      	cmp	r3, #2
 8005c28:	d901      	bls.n	8005c2e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005c2a:	2303      	movs	r3, #3
 8005c2c:	e1b8      	b.n	8005fa0 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005c2e:	4b15      	ldr	r3, [pc, #84]	; (8005c84 <HAL_RCC_OscConfig+0x508>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d0f0      	beq.n	8005c1c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	689b      	ldr	r3, [r3, #8]
 8005c3e:	2b01      	cmp	r3, #1
 8005c40:	d108      	bne.n	8005c54 <HAL_RCC_OscConfig+0x4d8>
 8005c42:	4b0f      	ldr	r3, [pc, #60]	; (8005c80 <HAL_RCC_OscConfig+0x504>)
 8005c44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c48:	4a0d      	ldr	r2, [pc, #52]	; (8005c80 <HAL_RCC_OscConfig+0x504>)
 8005c4a:	f043 0301 	orr.w	r3, r3, #1
 8005c4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005c52:	e029      	b.n	8005ca8 <HAL_RCC_OscConfig+0x52c>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	689b      	ldr	r3, [r3, #8]
 8005c58:	2b05      	cmp	r3, #5
 8005c5a:	d115      	bne.n	8005c88 <HAL_RCC_OscConfig+0x50c>
 8005c5c:	4b08      	ldr	r3, [pc, #32]	; (8005c80 <HAL_RCC_OscConfig+0x504>)
 8005c5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c62:	4a07      	ldr	r2, [pc, #28]	; (8005c80 <HAL_RCC_OscConfig+0x504>)
 8005c64:	f043 0304 	orr.w	r3, r3, #4
 8005c68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005c6c:	4b04      	ldr	r3, [pc, #16]	; (8005c80 <HAL_RCC_OscConfig+0x504>)
 8005c6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c72:	4a03      	ldr	r2, [pc, #12]	; (8005c80 <HAL_RCC_OscConfig+0x504>)
 8005c74:	f043 0301 	orr.w	r3, r3, #1
 8005c78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005c7c:	e014      	b.n	8005ca8 <HAL_RCC_OscConfig+0x52c>
 8005c7e:	bf00      	nop
 8005c80:	40021000 	.word	0x40021000
 8005c84:	40007000 	.word	0x40007000
 8005c88:	4b9d      	ldr	r3, [pc, #628]	; (8005f00 <HAL_RCC_OscConfig+0x784>)
 8005c8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c8e:	4a9c      	ldr	r2, [pc, #624]	; (8005f00 <HAL_RCC_OscConfig+0x784>)
 8005c90:	f023 0301 	bic.w	r3, r3, #1
 8005c94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005c98:	4b99      	ldr	r3, [pc, #612]	; (8005f00 <HAL_RCC_OscConfig+0x784>)
 8005c9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c9e:	4a98      	ldr	r2, [pc, #608]	; (8005f00 <HAL_RCC_OscConfig+0x784>)
 8005ca0:	f023 0304 	bic.w	r3, r3, #4
 8005ca4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	689b      	ldr	r3, [r3, #8]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d016      	beq.n	8005cde <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cb0:	f7fc face 	bl	8002250 <HAL_GetTick>
 8005cb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005cb6:	e00a      	b.n	8005cce <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005cb8:	f7fc faca 	bl	8002250 <HAL_GetTick>
 8005cbc:	4602      	mov	r2, r0
 8005cbe:	693b      	ldr	r3, [r7, #16]
 8005cc0:	1ad3      	subs	r3, r2, r3
 8005cc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d901      	bls.n	8005cce <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005cca:	2303      	movs	r3, #3
 8005ccc:	e168      	b.n	8005fa0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005cce:	4b8c      	ldr	r3, [pc, #560]	; (8005f00 <HAL_RCC_OscConfig+0x784>)
 8005cd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cd4:	f003 0302 	and.w	r3, r3, #2
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d0ed      	beq.n	8005cb8 <HAL_RCC_OscConfig+0x53c>
 8005cdc:	e015      	b.n	8005d0a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cde:	f7fc fab7 	bl	8002250 <HAL_GetTick>
 8005ce2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005ce4:	e00a      	b.n	8005cfc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ce6:	f7fc fab3 	bl	8002250 <HAL_GetTick>
 8005cea:	4602      	mov	r2, r0
 8005cec:	693b      	ldr	r3, [r7, #16]
 8005cee:	1ad3      	subs	r3, r2, r3
 8005cf0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d901      	bls.n	8005cfc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005cf8:	2303      	movs	r3, #3
 8005cfa:	e151      	b.n	8005fa0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005cfc:	4b80      	ldr	r3, [pc, #512]	; (8005f00 <HAL_RCC_OscConfig+0x784>)
 8005cfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d02:	f003 0302 	and.w	r3, r3, #2
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d1ed      	bne.n	8005ce6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005d0a:	7ffb      	ldrb	r3, [r7, #31]
 8005d0c:	2b01      	cmp	r3, #1
 8005d0e:	d105      	bne.n	8005d1c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d10:	4b7b      	ldr	r3, [pc, #492]	; (8005f00 <HAL_RCC_OscConfig+0x784>)
 8005d12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d14:	4a7a      	ldr	r2, [pc, #488]	; (8005f00 <HAL_RCC_OscConfig+0x784>)
 8005d16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d1a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f003 0320 	and.w	r3, r3, #32
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d03c      	beq.n	8005da2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d01c      	beq.n	8005d6a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005d30:	4b73      	ldr	r3, [pc, #460]	; (8005f00 <HAL_RCC_OscConfig+0x784>)
 8005d32:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005d36:	4a72      	ldr	r2, [pc, #456]	; (8005f00 <HAL_RCC_OscConfig+0x784>)
 8005d38:	f043 0301 	orr.w	r3, r3, #1
 8005d3c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d40:	f7fc fa86 	bl	8002250 <HAL_GetTick>
 8005d44:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005d46:	e008      	b.n	8005d5a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005d48:	f7fc fa82 	bl	8002250 <HAL_GetTick>
 8005d4c:	4602      	mov	r2, r0
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	1ad3      	subs	r3, r2, r3
 8005d52:	2b02      	cmp	r3, #2
 8005d54:	d901      	bls.n	8005d5a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8005d56:	2303      	movs	r3, #3
 8005d58:	e122      	b.n	8005fa0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005d5a:	4b69      	ldr	r3, [pc, #420]	; (8005f00 <HAL_RCC_OscConfig+0x784>)
 8005d5c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005d60:	f003 0302 	and.w	r3, r3, #2
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d0ef      	beq.n	8005d48 <HAL_RCC_OscConfig+0x5cc>
 8005d68:	e01b      	b.n	8005da2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005d6a:	4b65      	ldr	r3, [pc, #404]	; (8005f00 <HAL_RCC_OscConfig+0x784>)
 8005d6c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005d70:	4a63      	ldr	r2, [pc, #396]	; (8005f00 <HAL_RCC_OscConfig+0x784>)
 8005d72:	f023 0301 	bic.w	r3, r3, #1
 8005d76:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d7a:	f7fc fa69 	bl	8002250 <HAL_GetTick>
 8005d7e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005d80:	e008      	b.n	8005d94 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005d82:	f7fc fa65 	bl	8002250 <HAL_GetTick>
 8005d86:	4602      	mov	r2, r0
 8005d88:	693b      	ldr	r3, [r7, #16]
 8005d8a:	1ad3      	subs	r3, r2, r3
 8005d8c:	2b02      	cmp	r3, #2
 8005d8e:	d901      	bls.n	8005d94 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005d90:	2303      	movs	r3, #3
 8005d92:	e105      	b.n	8005fa0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005d94:	4b5a      	ldr	r3, [pc, #360]	; (8005f00 <HAL_RCC_OscConfig+0x784>)
 8005d96:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005d9a:	f003 0302 	and.w	r3, r3, #2
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d1ef      	bne.n	8005d82 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	f000 80f9 	beq.w	8005f9e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005db0:	2b02      	cmp	r3, #2
 8005db2:	f040 80cf 	bne.w	8005f54 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005db6:	4b52      	ldr	r3, [pc, #328]	; (8005f00 <HAL_RCC_OscConfig+0x784>)
 8005db8:	68db      	ldr	r3, [r3, #12]
 8005dba:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	f003 0203 	and.w	r2, r3, #3
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dc6:	429a      	cmp	r2, r3
 8005dc8:	d12c      	bne.n	8005e24 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dd4:	3b01      	subs	r3, #1
 8005dd6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005dd8:	429a      	cmp	r2, r3
 8005dda:	d123      	bne.n	8005e24 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005de6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005de8:	429a      	cmp	r2, r3
 8005dea:	d11b      	bne.n	8005e24 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005df6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005df8:	429a      	cmp	r2, r3
 8005dfa:	d113      	bne.n	8005e24 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e06:	085b      	lsrs	r3, r3, #1
 8005e08:	3b01      	subs	r3, #1
 8005e0a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005e0c:	429a      	cmp	r2, r3
 8005e0e:	d109      	bne.n	8005e24 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005e10:	697b      	ldr	r3, [r7, #20]
 8005e12:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e1a:	085b      	lsrs	r3, r3, #1
 8005e1c:	3b01      	subs	r3, #1
 8005e1e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005e20:	429a      	cmp	r2, r3
 8005e22:	d071      	beq.n	8005f08 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005e24:	69bb      	ldr	r3, [r7, #24]
 8005e26:	2b0c      	cmp	r3, #12
 8005e28:	d068      	beq.n	8005efc <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005e2a:	4b35      	ldr	r3, [pc, #212]	; (8005f00 <HAL_RCC_OscConfig+0x784>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d105      	bne.n	8005e42 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005e36:	4b32      	ldr	r3, [pc, #200]	; (8005f00 <HAL_RCC_OscConfig+0x784>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d001      	beq.n	8005e46 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8005e42:	2301      	movs	r3, #1
 8005e44:	e0ac      	b.n	8005fa0 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005e46:	4b2e      	ldr	r3, [pc, #184]	; (8005f00 <HAL_RCC_OscConfig+0x784>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a2d      	ldr	r2, [pc, #180]	; (8005f00 <HAL_RCC_OscConfig+0x784>)
 8005e4c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005e50:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005e52:	f7fc f9fd 	bl	8002250 <HAL_GetTick>
 8005e56:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e58:	e008      	b.n	8005e6c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e5a:	f7fc f9f9 	bl	8002250 <HAL_GetTick>
 8005e5e:	4602      	mov	r2, r0
 8005e60:	693b      	ldr	r3, [r7, #16]
 8005e62:	1ad3      	subs	r3, r2, r3
 8005e64:	2b02      	cmp	r3, #2
 8005e66:	d901      	bls.n	8005e6c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8005e68:	2303      	movs	r3, #3
 8005e6a:	e099      	b.n	8005fa0 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e6c:	4b24      	ldr	r3, [pc, #144]	; (8005f00 <HAL_RCC_OscConfig+0x784>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d1f0      	bne.n	8005e5a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005e78:	4b21      	ldr	r3, [pc, #132]	; (8005f00 <HAL_RCC_OscConfig+0x784>)
 8005e7a:	68da      	ldr	r2, [r3, #12]
 8005e7c:	4b21      	ldr	r3, [pc, #132]	; (8005f04 <HAL_RCC_OscConfig+0x788>)
 8005e7e:	4013      	ands	r3, r2
 8005e80:	687a      	ldr	r2, [r7, #4]
 8005e82:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005e84:	687a      	ldr	r2, [r7, #4]
 8005e86:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005e88:	3a01      	subs	r2, #1
 8005e8a:	0112      	lsls	r2, r2, #4
 8005e8c:	4311      	orrs	r1, r2
 8005e8e:	687a      	ldr	r2, [r7, #4]
 8005e90:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005e92:	0212      	lsls	r2, r2, #8
 8005e94:	4311      	orrs	r1, r2
 8005e96:	687a      	ldr	r2, [r7, #4]
 8005e98:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005e9a:	0852      	lsrs	r2, r2, #1
 8005e9c:	3a01      	subs	r2, #1
 8005e9e:	0552      	lsls	r2, r2, #21
 8005ea0:	4311      	orrs	r1, r2
 8005ea2:	687a      	ldr	r2, [r7, #4]
 8005ea4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005ea6:	0852      	lsrs	r2, r2, #1
 8005ea8:	3a01      	subs	r2, #1
 8005eaa:	0652      	lsls	r2, r2, #25
 8005eac:	4311      	orrs	r1, r2
 8005eae:	687a      	ldr	r2, [r7, #4]
 8005eb0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005eb2:	06d2      	lsls	r2, r2, #27
 8005eb4:	430a      	orrs	r2, r1
 8005eb6:	4912      	ldr	r1, [pc, #72]	; (8005f00 <HAL_RCC_OscConfig+0x784>)
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005ebc:	4b10      	ldr	r3, [pc, #64]	; (8005f00 <HAL_RCC_OscConfig+0x784>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4a0f      	ldr	r2, [pc, #60]	; (8005f00 <HAL_RCC_OscConfig+0x784>)
 8005ec2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005ec6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005ec8:	4b0d      	ldr	r3, [pc, #52]	; (8005f00 <HAL_RCC_OscConfig+0x784>)
 8005eca:	68db      	ldr	r3, [r3, #12]
 8005ecc:	4a0c      	ldr	r2, [pc, #48]	; (8005f00 <HAL_RCC_OscConfig+0x784>)
 8005ece:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005ed2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005ed4:	f7fc f9bc 	bl	8002250 <HAL_GetTick>
 8005ed8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005eda:	e008      	b.n	8005eee <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005edc:	f7fc f9b8 	bl	8002250 <HAL_GetTick>
 8005ee0:	4602      	mov	r2, r0
 8005ee2:	693b      	ldr	r3, [r7, #16]
 8005ee4:	1ad3      	subs	r3, r2, r3
 8005ee6:	2b02      	cmp	r3, #2
 8005ee8:	d901      	bls.n	8005eee <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8005eea:	2303      	movs	r3, #3
 8005eec:	e058      	b.n	8005fa0 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005eee:	4b04      	ldr	r3, [pc, #16]	; (8005f00 <HAL_RCC_OscConfig+0x784>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d0f0      	beq.n	8005edc <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005efa:	e050      	b.n	8005f9e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005efc:	2301      	movs	r3, #1
 8005efe:	e04f      	b.n	8005fa0 <HAL_RCC_OscConfig+0x824>
 8005f00:	40021000 	.word	0x40021000
 8005f04:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f08:	4b27      	ldr	r3, [pc, #156]	; (8005fa8 <HAL_RCC_OscConfig+0x82c>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d144      	bne.n	8005f9e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005f14:	4b24      	ldr	r3, [pc, #144]	; (8005fa8 <HAL_RCC_OscConfig+0x82c>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4a23      	ldr	r2, [pc, #140]	; (8005fa8 <HAL_RCC_OscConfig+0x82c>)
 8005f1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005f1e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005f20:	4b21      	ldr	r3, [pc, #132]	; (8005fa8 <HAL_RCC_OscConfig+0x82c>)
 8005f22:	68db      	ldr	r3, [r3, #12]
 8005f24:	4a20      	ldr	r2, [pc, #128]	; (8005fa8 <HAL_RCC_OscConfig+0x82c>)
 8005f26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005f2a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005f2c:	f7fc f990 	bl	8002250 <HAL_GetTick>
 8005f30:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f32:	e008      	b.n	8005f46 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f34:	f7fc f98c 	bl	8002250 <HAL_GetTick>
 8005f38:	4602      	mov	r2, r0
 8005f3a:	693b      	ldr	r3, [r7, #16]
 8005f3c:	1ad3      	subs	r3, r2, r3
 8005f3e:	2b02      	cmp	r3, #2
 8005f40:	d901      	bls.n	8005f46 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8005f42:	2303      	movs	r3, #3
 8005f44:	e02c      	b.n	8005fa0 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f46:	4b18      	ldr	r3, [pc, #96]	; (8005fa8 <HAL_RCC_OscConfig+0x82c>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d0f0      	beq.n	8005f34 <HAL_RCC_OscConfig+0x7b8>
 8005f52:	e024      	b.n	8005f9e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005f54:	69bb      	ldr	r3, [r7, #24]
 8005f56:	2b0c      	cmp	r3, #12
 8005f58:	d01f      	beq.n	8005f9a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f5a:	4b13      	ldr	r3, [pc, #76]	; (8005fa8 <HAL_RCC_OscConfig+0x82c>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4a12      	ldr	r2, [pc, #72]	; (8005fa8 <HAL_RCC_OscConfig+0x82c>)
 8005f60:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005f64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f66:	f7fc f973 	bl	8002250 <HAL_GetTick>
 8005f6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005f6c:	e008      	b.n	8005f80 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f6e:	f7fc f96f 	bl	8002250 <HAL_GetTick>
 8005f72:	4602      	mov	r2, r0
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	1ad3      	subs	r3, r2, r3
 8005f78:	2b02      	cmp	r3, #2
 8005f7a:	d901      	bls.n	8005f80 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8005f7c:	2303      	movs	r3, #3
 8005f7e:	e00f      	b.n	8005fa0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005f80:	4b09      	ldr	r3, [pc, #36]	; (8005fa8 <HAL_RCC_OscConfig+0x82c>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d1f0      	bne.n	8005f6e <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005f8c:	4b06      	ldr	r3, [pc, #24]	; (8005fa8 <HAL_RCC_OscConfig+0x82c>)
 8005f8e:	68da      	ldr	r2, [r3, #12]
 8005f90:	4905      	ldr	r1, [pc, #20]	; (8005fa8 <HAL_RCC_OscConfig+0x82c>)
 8005f92:	4b06      	ldr	r3, [pc, #24]	; (8005fac <HAL_RCC_OscConfig+0x830>)
 8005f94:	4013      	ands	r3, r2
 8005f96:	60cb      	str	r3, [r1, #12]
 8005f98:	e001      	b.n	8005f9e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	e000      	b.n	8005fa0 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8005f9e:	2300      	movs	r3, #0
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	3720      	adds	r7, #32
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd80      	pop	{r7, pc}
 8005fa8:	40021000 	.word	0x40021000
 8005fac:	feeefffc 	.word	0xfeeefffc

08005fb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b086      	sub	sp, #24
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
 8005fb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005fba:	2300      	movs	r3, #0
 8005fbc:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d101      	bne.n	8005fc8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	e11d      	b.n	8006204 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005fc8:	4b90      	ldr	r3, [pc, #576]	; (800620c <HAL_RCC_ClockConfig+0x25c>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f003 030f 	and.w	r3, r3, #15
 8005fd0:	683a      	ldr	r2, [r7, #0]
 8005fd2:	429a      	cmp	r2, r3
 8005fd4:	d910      	bls.n	8005ff8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fd6:	4b8d      	ldr	r3, [pc, #564]	; (800620c <HAL_RCC_ClockConfig+0x25c>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f023 020f 	bic.w	r2, r3, #15
 8005fde:	498b      	ldr	r1, [pc, #556]	; (800620c <HAL_RCC_ClockConfig+0x25c>)
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	4313      	orrs	r3, r2
 8005fe4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fe6:	4b89      	ldr	r3, [pc, #548]	; (800620c <HAL_RCC_ClockConfig+0x25c>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f003 030f 	and.w	r3, r3, #15
 8005fee:	683a      	ldr	r2, [r7, #0]
 8005ff0:	429a      	cmp	r2, r3
 8005ff2:	d001      	beq.n	8005ff8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	e105      	b.n	8006204 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f003 0302 	and.w	r3, r3, #2
 8006000:	2b00      	cmp	r3, #0
 8006002:	d010      	beq.n	8006026 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	689a      	ldr	r2, [r3, #8]
 8006008:	4b81      	ldr	r3, [pc, #516]	; (8006210 <HAL_RCC_ClockConfig+0x260>)
 800600a:	689b      	ldr	r3, [r3, #8]
 800600c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006010:	429a      	cmp	r2, r3
 8006012:	d908      	bls.n	8006026 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006014:	4b7e      	ldr	r3, [pc, #504]	; (8006210 <HAL_RCC_ClockConfig+0x260>)
 8006016:	689b      	ldr	r3, [r3, #8]
 8006018:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	689b      	ldr	r3, [r3, #8]
 8006020:	497b      	ldr	r1, [pc, #492]	; (8006210 <HAL_RCC_ClockConfig+0x260>)
 8006022:	4313      	orrs	r3, r2
 8006024:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f003 0301 	and.w	r3, r3, #1
 800602e:	2b00      	cmp	r3, #0
 8006030:	d079      	beq.n	8006126 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	2b03      	cmp	r3, #3
 8006038:	d11e      	bne.n	8006078 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800603a:	4b75      	ldr	r3, [pc, #468]	; (8006210 <HAL_RCC_ClockConfig+0x260>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006042:	2b00      	cmp	r3, #0
 8006044:	d101      	bne.n	800604a <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8006046:	2301      	movs	r3, #1
 8006048:	e0dc      	b.n	8006204 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800604a:	f000 fa07 	bl	800645c <RCC_GetSysClockFreqFromPLLSource>
 800604e:	4603      	mov	r3, r0
 8006050:	4a70      	ldr	r2, [pc, #448]	; (8006214 <HAL_RCC_ClockConfig+0x264>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d946      	bls.n	80060e4 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8006056:	4b6e      	ldr	r3, [pc, #440]	; (8006210 <HAL_RCC_ClockConfig+0x260>)
 8006058:	689b      	ldr	r3, [r3, #8]
 800605a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800605e:	2b00      	cmp	r3, #0
 8006060:	d140      	bne.n	80060e4 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006062:	4b6b      	ldr	r3, [pc, #428]	; (8006210 <HAL_RCC_ClockConfig+0x260>)
 8006064:	689b      	ldr	r3, [r3, #8]
 8006066:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800606a:	4a69      	ldr	r2, [pc, #420]	; (8006210 <HAL_RCC_ClockConfig+0x260>)
 800606c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006070:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006072:	2380      	movs	r3, #128	; 0x80
 8006074:	617b      	str	r3, [r7, #20]
 8006076:	e035      	b.n	80060e4 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	685b      	ldr	r3, [r3, #4]
 800607c:	2b02      	cmp	r3, #2
 800607e:	d107      	bne.n	8006090 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006080:	4b63      	ldr	r3, [pc, #396]	; (8006210 <HAL_RCC_ClockConfig+0x260>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006088:	2b00      	cmp	r3, #0
 800608a:	d115      	bne.n	80060b8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800608c:	2301      	movs	r3, #1
 800608e:	e0b9      	b.n	8006204 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	685b      	ldr	r3, [r3, #4]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d107      	bne.n	80060a8 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006098:	4b5d      	ldr	r3, [pc, #372]	; (8006210 <HAL_RCC_ClockConfig+0x260>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f003 0302 	and.w	r3, r3, #2
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d109      	bne.n	80060b8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80060a4:	2301      	movs	r3, #1
 80060a6:	e0ad      	b.n	8006204 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80060a8:	4b59      	ldr	r3, [pc, #356]	; (8006210 <HAL_RCC_ClockConfig+0x260>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d101      	bne.n	80060b8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80060b4:	2301      	movs	r3, #1
 80060b6:	e0a5      	b.n	8006204 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80060b8:	f000 f8b4 	bl	8006224 <HAL_RCC_GetSysClockFreq>
 80060bc:	4603      	mov	r3, r0
 80060be:	4a55      	ldr	r2, [pc, #340]	; (8006214 <HAL_RCC_ClockConfig+0x264>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d90f      	bls.n	80060e4 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80060c4:	4b52      	ldr	r3, [pc, #328]	; (8006210 <HAL_RCC_ClockConfig+0x260>)
 80060c6:	689b      	ldr	r3, [r3, #8]
 80060c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d109      	bne.n	80060e4 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80060d0:	4b4f      	ldr	r3, [pc, #316]	; (8006210 <HAL_RCC_ClockConfig+0x260>)
 80060d2:	689b      	ldr	r3, [r3, #8]
 80060d4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80060d8:	4a4d      	ldr	r2, [pc, #308]	; (8006210 <HAL_RCC_ClockConfig+0x260>)
 80060da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060de:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80060e0:	2380      	movs	r3, #128	; 0x80
 80060e2:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80060e4:	4b4a      	ldr	r3, [pc, #296]	; (8006210 <HAL_RCC_ClockConfig+0x260>)
 80060e6:	689b      	ldr	r3, [r3, #8]
 80060e8:	f023 0203 	bic.w	r2, r3, #3
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	685b      	ldr	r3, [r3, #4]
 80060f0:	4947      	ldr	r1, [pc, #284]	; (8006210 <HAL_RCC_ClockConfig+0x260>)
 80060f2:	4313      	orrs	r3, r2
 80060f4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80060f6:	f7fc f8ab 	bl	8002250 <HAL_GetTick>
 80060fa:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060fc:	e00a      	b.n	8006114 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80060fe:	f7fc f8a7 	bl	8002250 <HAL_GetTick>
 8006102:	4602      	mov	r2, r0
 8006104:	693b      	ldr	r3, [r7, #16]
 8006106:	1ad3      	subs	r3, r2, r3
 8006108:	f241 3288 	movw	r2, #5000	; 0x1388
 800610c:	4293      	cmp	r3, r2
 800610e:	d901      	bls.n	8006114 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8006110:	2303      	movs	r3, #3
 8006112:	e077      	b.n	8006204 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006114:	4b3e      	ldr	r3, [pc, #248]	; (8006210 <HAL_RCC_ClockConfig+0x260>)
 8006116:	689b      	ldr	r3, [r3, #8]
 8006118:	f003 020c 	and.w	r2, r3, #12
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	685b      	ldr	r3, [r3, #4]
 8006120:	009b      	lsls	r3, r3, #2
 8006122:	429a      	cmp	r2, r3
 8006124:	d1eb      	bne.n	80060fe <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	2b80      	cmp	r3, #128	; 0x80
 800612a:	d105      	bne.n	8006138 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800612c:	4b38      	ldr	r3, [pc, #224]	; (8006210 <HAL_RCC_ClockConfig+0x260>)
 800612e:	689b      	ldr	r3, [r3, #8]
 8006130:	4a37      	ldr	r2, [pc, #220]	; (8006210 <HAL_RCC_ClockConfig+0x260>)
 8006132:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006136:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f003 0302 	and.w	r3, r3, #2
 8006140:	2b00      	cmp	r3, #0
 8006142:	d010      	beq.n	8006166 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	689a      	ldr	r2, [r3, #8]
 8006148:	4b31      	ldr	r3, [pc, #196]	; (8006210 <HAL_RCC_ClockConfig+0x260>)
 800614a:	689b      	ldr	r3, [r3, #8]
 800614c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006150:	429a      	cmp	r2, r3
 8006152:	d208      	bcs.n	8006166 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006154:	4b2e      	ldr	r3, [pc, #184]	; (8006210 <HAL_RCC_ClockConfig+0x260>)
 8006156:	689b      	ldr	r3, [r3, #8]
 8006158:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	689b      	ldr	r3, [r3, #8]
 8006160:	492b      	ldr	r1, [pc, #172]	; (8006210 <HAL_RCC_ClockConfig+0x260>)
 8006162:	4313      	orrs	r3, r2
 8006164:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006166:	4b29      	ldr	r3, [pc, #164]	; (800620c <HAL_RCC_ClockConfig+0x25c>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f003 030f 	and.w	r3, r3, #15
 800616e:	683a      	ldr	r2, [r7, #0]
 8006170:	429a      	cmp	r2, r3
 8006172:	d210      	bcs.n	8006196 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006174:	4b25      	ldr	r3, [pc, #148]	; (800620c <HAL_RCC_ClockConfig+0x25c>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f023 020f 	bic.w	r2, r3, #15
 800617c:	4923      	ldr	r1, [pc, #140]	; (800620c <HAL_RCC_ClockConfig+0x25c>)
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	4313      	orrs	r3, r2
 8006182:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006184:	4b21      	ldr	r3, [pc, #132]	; (800620c <HAL_RCC_ClockConfig+0x25c>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f003 030f 	and.w	r3, r3, #15
 800618c:	683a      	ldr	r2, [r7, #0]
 800618e:	429a      	cmp	r2, r3
 8006190:	d001      	beq.n	8006196 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8006192:	2301      	movs	r3, #1
 8006194:	e036      	b.n	8006204 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f003 0304 	and.w	r3, r3, #4
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d008      	beq.n	80061b4 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80061a2:	4b1b      	ldr	r3, [pc, #108]	; (8006210 <HAL_RCC_ClockConfig+0x260>)
 80061a4:	689b      	ldr	r3, [r3, #8]
 80061a6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	68db      	ldr	r3, [r3, #12]
 80061ae:	4918      	ldr	r1, [pc, #96]	; (8006210 <HAL_RCC_ClockConfig+0x260>)
 80061b0:	4313      	orrs	r3, r2
 80061b2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f003 0308 	and.w	r3, r3, #8
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d009      	beq.n	80061d4 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80061c0:	4b13      	ldr	r3, [pc, #76]	; (8006210 <HAL_RCC_ClockConfig+0x260>)
 80061c2:	689b      	ldr	r3, [r3, #8]
 80061c4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	691b      	ldr	r3, [r3, #16]
 80061cc:	00db      	lsls	r3, r3, #3
 80061ce:	4910      	ldr	r1, [pc, #64]	; (8006210 <HAL_RCC_ClockConfig+0x260>)
 80061d0:	4313      	orrs	r3, r2
 80061d2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80061d4:	f000 f826 	bl	8006224 <HAL_RCC_GetSysClockFreq>
 80061d8:	4602      	mov	r2, r0
 80061da:	4b0d      	ldr	r3, [pc, #52]	; (8006210 <HAL_RCC_ClockConfig+0x260>)
 80061dc:	689b      	ldr	r3, [r3, #8]
 80061de:	091b      	lsrs	r3, r3, #4
 80061e0:	f003 030f 	and.w	r3, r3, #15
 80061e4:	490c      	ldr	r1, [pc, #48]	; (8006218 <HAL_RCC_ClockConfig+0x268>)
 80061e6:	5ccb      	ldrb	r3, [r1, r3]
 80061e8:	f003 031f 	and.w	r3, r3, #31
 80061ec:	fa22 f303 	lsr.w	r3, r2, r3
 80061f0:	4a0a      	ldr	r2, [pc, #40]	; (800621c <HAL_RCC_ClockConfig+0x26c>)
 80061f2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80061f4:	4b0a      	ldr	r3, [pc, #40]	; (8006220 <HAL_RCC_ClockConfig+0x270>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4618      	mov	r0, r3
 80061fa:	f7fb ffd9 	bl	80021b0 <HAL_InitTick>
 80061fe:	4603      	mov	r3, r0
 8006200:	73fb      	strb	r3, [r7, #15]

  return status;
 8006202:	7bfb      	ldrb	r3, [r7, #15]
}
 8006204:	4618      	mov	r0, r3
 8006206:	3718      	adds	r7, #24
 8006208:	46bd      	mov	sp, r7
 800620a:	bd80      	pop	{r7, pc}
 800620c:	40022000 	.word	0x40022000
 8006210:	40021000 	.word	0x40021000
 8006214:	04c4b400 	.word	0x04c4b400
 8006218:	08013b70 	.word	0x08013b70
 800621c:	20000000 	.word	0x20000000
 8006220:	20000004 	.word	0x20000004

08006224 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006224:	b480      	push	{r7}
 8006226:	b089      	sub	sp, #36	; 0x24
 8006228:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800622a:	2300      	movs	r3, #0
 800622c:	61fb      	str	r3, [r7, #28]
 800622e:	2300      	movs	r3, #0
 8006230:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006232:	4b3e      	ldr	r3, [pc, #248]	; (800632c <HAL_RCC_GetSysClockFreq+0x108>)
 8006234:	689b      	ldr	r3, [r3, #8]
 8006236:	f003 030c 	and.w	r3, r3, #12
 800623a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800623c:	4b3b      	ldr	r3, [pc, #236]	; (800632c <HAL_RCC_GetSysClockFreq+0x108>)
 800623e:	68db      	ldr	r3, [r3, #12]
 8006240:	f003 0303 	and.w	r3, r3, #3
 8006244:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006246:	693b      	ldr	r3, [r7, #16]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d005      	beq.n	8006258 <HAL_RCC_GetSysClockFreq+0x34>
 800624c:	693b      	ldr	r3, [r7, #16]
 800624e:	2b0c      	cmp	r3, #12
 8006250:	d121      	bne.n	8006296 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	2b01      	cmp	r3, #1
 8006256:	d11e      	bne.n	8006296 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006258:	4b34      	ldr	r3, [pc, #208]	; (800632c <HAL_RCC_GetSysClockFreq+0x108>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f003 0308 	and.w	r3, r3, #8
 8006260:	2b00      	cmp	r3, #0
 8006262:	d107      	bne.n	8006274 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006264:	4b31      	ldr	r3, [pc, #196]	; (800632c <HAL_RCC_GetSysClockFreq+0x108>)
 8006266:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800626a:	0a1b      	lsrs	r3, r3, #8
 800626c:	f003 030f 	and.w	r3, r3, #15
 8006270:	61fb      	str	r3, [r7, #28]
 8006272:	e005      	b.n	8006280 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006274:	4b2d      	ldr	r3, [pc, #180]	; (800632c <HAL_RCC_GetSysClockFreq+0x108>)
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	091b      	lsrs	r3, r3, #4
 800627a:	f003 030f 	and.w	r3, r3, #15
 800627e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006280:	4a2b      	ldr	r2, [pc, #172]	; (8006330 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006282:	69fb      	ldr	r3, [r7, #28]
 8006284:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006288:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800628a:	693b      	ldr	r3, [r7, #16]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d10d      	bne.n	80062ac <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006290:	69fb      	ldr	r3, [r7, #28]
 8006292:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006294:	e00a      	b.n	80062ac <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006296:	693b      	ldr	r3, [r7, #16]
 8006298:	2b04      	cmp	r3, #4
 800629a:	d102      	bne.n	80062a2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800629c:	4b25      	ldr	r3, [pc, #148]	; (8006334 <HAL_RCC_GetSysClockFreq+0x110>)
 800629e:	61bb      	str	r3, [r7, #24]
 80062a0:	e004      	b.n	80062ac <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80062a2:	693b      	ldr	r3, [r7, #16]
 80062a4:	2b08      	cmp	r3, #8
 80062a6:	d101      	bne.n	80062ac <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80062a8:	4b22      	ldr	r3, [pc, #136]	; (8006334 <HAL_RCC_GetSysClockFreq+0x110>)
 80062aa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80062ac:	693b      	ldr	r3, [r7, #16]
 80062ae:	2b0c      	cmp	r3, #12
 80062b0:	d134      	bne.n	800631c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80062b2:	4b1e      	ldr	r3, [pc, #120]	; (800632c <HAL_RCC_GetSysClockFreq+0x108>)
 80062b4:	68db      	ldr	r3, [r3, #12]
 80062b6:	f003 0303 	and.w	r3, r3, #3
 80062ba:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	2b02      	cmp	r3, #2
 80062c0:	d003      	beq.n	80062ca <HAL_RCC_GetSysClockFreq+0xa6>
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	2b03      	cmp	r3, #3
 80062c6:	d003      	beq.n	80062d0 <HAL_RCC_GetSysClockFreq+0xac>
 80062c8:	e005      	b.n	80062d6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80062ca:	4b1a      	ldr	r3, [pc, #104]	; (8006334 <HAL_RCC_GetSysClockFreq+0x110>)
 80062cc:	617b      	str	r3, [r7, #20]
      break;
 80062ce:	e005      	b.n	80062dc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80062d0:	4b18      	ldr	r3, [pc, #96]	; (8006334 <HAL_RCC_GetSysClockFreq+0x110>)
 80062d2:	617b      	str	r3, [r7, #20]
      break;
 80062d4:	e002      	b.n	80062dc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80062d6:	69fb      	ldr	r3, [r7, #28]
 80062d8:	617b      	str	r3, [r7, #20]
      break;
 80062da:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80062dc:	4b13      	ldr	r3, [pc, #76]	; (800632c <HAL_RCC_GetSysClockFreq+0x108>)
 80062de:	68db      	ldr	r3, [r3, #12]
 80062e0:	091b      	lsrs	r3, r3, #4
 80062e2:	f003 030f 	and.w	r3, r3, #15
 80062e6:	3301      	adds	r3, #1
 80062e8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80062ea:	4b10      	ldr	r3, [pc, #64]	; (800632c <HAL_RCC_GetSysClockFreq+0x108>)
 80062ec:	68db      	ldr	r3, [r3, #12]
 80062ee:	0a1b      	lsrs	r3, r3, #8
 80062f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062f4:	697a      	ldr	r2, [r7, #20]
 80062f6:	fb03 f202 	mul.w	r2, r3, r2
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006300:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006302:	4b0a      	ldr	r3, [pc, #40]	; (800632c <HAL_RCC_GetSysClockFreq+0x108>)
 8006304:	68db      	ldr	r3, [r3, #12]
 8006306:	0e5b      	lsrs	r3, r3, #25
 8006308:	f003 0303 	and.w	r3, r3, #3
 800630c:	3301      	adds	r3, #1
 800630e:	005b      	lsls	r3, r3, #1
 8006310:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006312:	697a      	ldr	r2, [r7, #20]
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	fbb2 f3f3 	udiv	r3, r2, r3
 800631a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800631c:	69bb      	ldr	r3, [r7, #24]
}
 800631e:	4618      	mov	r0, r3
 8006320:	3724      	adds	r7, #36	; 0x24
 8006322:	46bd      	mov	sp, r7
 8006324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006328:	4770      	bx	lr
 800632a:	bf00      	nop
 800632c:	40021000 	.word	0x40021000
 8006330:	08013b88 	.word	0x08013b88
 8006334:	00f42400 	.word	0x00f42400

08006338 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006338:	b480      	push	{r7}
 800633a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800633c:	4b03      	ldr	r3, [pc, #12]	; (800634c <HAL_RCC_GetHCLKFreq+0x14>)
 800633e:	681b      	ldr	r3, [r3, #0]
}
 8006340:	4618      	mov	r0, r3
 8006342:	46bd      	mov	sp, r7
 8006344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006348:	4770      	bx	lr
 800634a:	bf00      	nop
 800634c:	20000000 	.word	0x20000000

08006350 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006354:	f7ff fff0 	bl	8006338 <HAL_RCC_GetHCLKFreq>
 8006358:	4602      	mov	r2, r0
 800635a:	4b06      	ldr	r3, [pc, #24]	; (8006374 <HAL_RCC_GetPCLK1Freq+0x24>)
 800635c:	689b      	ldr	r3, [r3, #8]
 800635e:	0a1b      	lsrs	r3, r3, #8
 8006360:	f003 0307 	and.w	r3, r3, #7
 8006364:	4904      	ldr	r1, [pc, #16]	; (8006378 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006366:	5ccb      	ldrb	r3, [r1, r3]
 8006368:	f003 031f 	and.w	r3, r3, #31
 800636c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006370:	4618      	mov	r0, r3
 8006372:	bd80      	pop	{r7, pc}
 8006374:	40021000 	.word	0x40021000
 8006378:	08013b80 	.word	0x08013b80

0800637c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006380:	f7ff ffda 	bl	8006338 <HAL_RCC_GetHCLKFreq>
 8006384:	4602      	mov	r2, r0
 8006386:	4b06      	ldr	r3, [pc, #24]	; (80063a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006388:	689b      	ldr	r3, [r3, #8]
 800638a:	0adb      	lsrs	r3, r3, #11
 800638c:	f003 0307 	and.w	r3, r3, #7
 8006390:	4904      	ldr	r1, [pc, #16]	; (80063a4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006392:	5ccb      	ldrb	r3, [r1, r3]
 8006394:	f003 031f 	and.w	r3, r3, #31
 8006398:	fa22 f303 	lsr.w	r3, r2, r3
}
 800639c:	4618      	mov	r0, r3
 800639e:	bd80      	pop	{r7, pc}
 80063a0:	40021000 	.word	0x40021000
 80063a4:	08013b80 	.word	0x08013b80

080063a8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b086      	sub	sp, #24
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80063b0:	2300      	movs	r3, #0
 80063b2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80063b4:	4b27      	ldr	r3, [pc, #156]	; (8006454 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80063b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d003      	beq.n	80063c8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80063c0:	f7ff f8f8 	bl	80055b4 <HAL_PWREx_GetVoltageRange>
 80063c4:	6178      	str	r0, [r7, #20]
 80063c6:	e014      	b.n	80063f2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80063c8:	4b22      	ldr	r3, [pc, #136]	; (8006454 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80063ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063cc:	4a21      	ldr	r2, [pc, #132]	; (8006454 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80063ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063d2:	6593      	str	r3, [r2, #88]	; 0x58
 80063d4:	4b1f      	ldr	r3, [pc, #124]	; (8006454 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80063d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063dc:	60fb      	str	r3, [r7, #12]
 80063de:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80063e0:	f7ff f8e8 	bl	80055b4 <HAL_PWREx_GetVoltageRange>
 80063e4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80063e6:	4b1b      	ldr	r3, [pc, #108]	; (8006454 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80063e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063ea:	4a1a      	ldr	r2, [pc, #104]	; (8006454 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80063ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80063f0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80063f2:	697b      	ldr	r3, [r7, #20]
 80063f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063f8:	d10b      	bne.n	8006412 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2b80      	cmp	r3, #128	; 0x80
 80063fe:	d913      	bls.n	8006428 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2ba0      	cmp	r3, #160	; 0xa0
 8006404:	d902      	bls.n	800640c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006406:	2302      	movs	r3, #2
 8006408:	613b      	str	r3, [r7, #16]
 800640a:	e00d      	b.n	8006428 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800640c:	2301      	movs	r3, #1
 800640e:	613b      	str	r3, [r7, #16]
 8006410:	e00a      	b.n	8006428 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2b7f      	cmp	r3, #127	; 0x7f
 8006416:	d902      	bls.n	800641e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8006418:	2302      	movs	r3, #2
 800641a:	613b      	str	r3, [r7, #16]
 800641c:	e004      	b.n	8006428 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2b70      	cmp	r3, #112	; 0x70
 8006422:	d101      	bne.n	8006428 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006424:	2301      	movs	r3, #1
 8006426:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006428:	4b0b      	ldr	r3, [pc, #44]	; (8006458 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f023 020f 	bic.w	r2, r3, #15
 8006430:	4909      	ldr	r1, [pc, #36]	; (8006458 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8006432:	693b      	ldr	r3, [r7, #16]
 8006434:	4313      	orrs	r3, r2
 8006436:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006438:	4b07      	ldr	r3, [pc, #28]	; (8006458 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f003 030f 	and.w	r3, r3, #15
 8006440:	693a      	ldr	r2, [r7, #16]
 8006442:	429a      	cmp	r2, r3
 8006444:	d001      	beq.n	800644a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8006446:	2301      	movs	r3, #1
 8006448:	e000      	b.n	800644c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800644a:	2300      	movs	r3, #0
}
 800644c:	4618      	mov	r0, r3
 800644e:	3718      	adds	r7, #24
 8006450:	46bd      	mov	sp, r7
 8006452:	bd80      	pop	{r7, pc}
 8006454:	40021000 	.word	0x40021000
 8006458:	40022000 	.word	0x40022000

0800645c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800645c:	b480      	push	{r7}
 800645e:	b087      	sub	sp, #28
 8006460:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006462:	4b2d      	ldr	r3, [pc, #180]	; (8006518 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006464:	68db      	ldr	r3, [r3, #12]
 8006466:	f003 0303 	and.w	r3, r3, #3
 800646a:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	2b03      	cmp	r3, #3
 8006470:	d00b      	beq.n	800648a <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	2b03      	cmp	r3, #3
 8006476:	d825      	bhi.n	80064c4 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	2b01      	cmp	r3, #1
 800647c:	d008      	beq.n	8006490 <RCC_GetSysClockFreqFromPLLSource+0x34>
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	2b02      	cmp	r3, #2
 8006482:	d11f      	bne.n	80064c4 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8006484:	4b25      	ldr	r3, [pc, #148]	; (800651c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8006486:	613b      	str	r3, [r7, #16]
    break;
 8006488:	e01f      	b.n	80064ca <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800648a:	4b24      	ldr	r3, [pc, #144]	; (800651c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800648c:	613b      	str	r3, [r7, #16]
    break;
 800648e:	e01c      	b.n	80064ca <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006490:	4b21      	ldr	r3, [pc, #132]	; (8006518 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f003 0308 	and.w	r3, r3, #8
 8006498:	2b00      	cmp	r3, #0
 800649a:	d107      	bne.n	80064ac <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800649c:	4b1e      	ldr	r3, [pc, #120]	; (8006518 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800649e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80064a2:	0a1b      	lsrs	r3, r3, #8
 80064a4:	f003 030f 	and.w	r3, r3, #15
 80064a8:	617b      	str	r3, [r7, #20]
 80064aa:	e005      	b.n	80064b8 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80064ac:	4b1a      	ldr	r3, [pc, #104]	; (8006518 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	091b      	lsrs	r3, r3, #4
 80064b2:	f003 030f 	and.w	r3, r3, #15
 80064b6:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 80064b8:	4a19      	ldr	r2, [pc, #100]	; (8006520 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064c0:	613b      	str	r3, [r7, #16]
    break;
 80064c2:	e002      	b.n	80064ca <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 80064c4:	2300      	movs	r3, #0
 80064c6:	613b      	str	r3, [r7, #16]
    break;
 80064c8:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80064ca:	4b13      	ldr	r3, [pc, #76]	; (8006518 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80064cc:	68db      	ldr	r3, [r3, #12]
 80064ce:	091b      	lsrs	r3, r3, #4
 80064d0:	f003 030f 	and.w	r3, r3, #15
 80064d4:	3301      	adds	r3, #1
 80064d6:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80064d8:	4b0f      	ldr	r3, [pc, #60]	; (8006518 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80064da:	68db      	ldr	r3, [r3, #12]
 80064dc:	0a1b      	lsrs	r3, r3, #8
 80064de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064e2:	693a      	ldr	r2, [r7, #16]
 80064e4:	fb03 f202 	mul.w	r2, r3, r2
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80064ee:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80064f0:	4b09      	ldr	r3, [pc, #36]	; (8006518 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80064f2:	68db      	ldr	r3, [r3, #12]
 80064f4:	0e5b      	lsrs	r3, r3, #25
 80064f6:	f003 0303 	and.w	r3, r3, #3
 80064fa:	3301      	adds	r3, #1
 80064fc:	005b      	lsls	r3, r3, #1
 80064fe:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8006500:	693a      	ldr	r2, [r7, #16]
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	fbb2 f3f3 	udiv	r3, r2, r3
 8006508:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800650a:	683b      	ldr	r3, [r7, #0]
}
 800650c:	4618      	mov	r0, r3
 800650e:	371c      	adds	r7, #28
 8006510:	46bd      	mov	sp, r7
 8006512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006516:	4770      	bx	lr
 8006518:	40021000 	.word	0x40021000
 800651c:	00f42400 	.word	0x00f42400
 8006520:	08013b88 	.word	0x08013b88

08006524 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b086      	sub	sp, #24
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800652c:	2300      	movs	r3, #0
 800652e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006530:	2300      	movs	r3, #0
 8006532:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800653c:	2b00      	cmp	r3, #0
 800653e:	d040      	beq.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006544:	2b80      	cmp	r3, #128	; 0x80
 8006546:	d02a      	beq.n	800659e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006548:	2b80      	cmp	r3, #128	; 0x80
 800654a:	d825      	bhi.n	8006598 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800654c:	2b60      	cmp	r3, #96	; 0x60
 800654e:	d026      	beq.n	800659e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006550:	2b60      	cmp	r3, #96	; 0x60
 8006552:	d821      	bhi.n	8006598 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8006554:	2b40      	cmp	r3, #64	; 0x40
 8006556:	d006      	beq.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8006558:	2b40      	cmp	r3, #64	; 0x40
 800655a:	d81d      	bhi.n	8006598 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800655c:	2b00      	cmp	r3, #0
 800655e:	d009      	beq.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8006560:	2b20      	cmp	r3, #32
 8006562:	d010      	beq.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8006564:	e018      	b.n	8006598 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006566:	4b89      	ldr	r3, [pc, #548]	; (800678c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006568:	68db      	ldr	r3, [r3, #12]
 800656a:	4a88      	ldr	r2, [pc, #544]	; (800678c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800656c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006570:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006572:	e015      	b.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	3304      	adds	r3, #4
 8006578:	2100      	movs	r1, #0
 800657a:	4618      	mov	r0, r3
 800657c:	f001 fa82 	bl	8007a84 <RCCEx_PLLSAI1_Config>
 8006580:	4603      	mov	r3, r0
 8006582:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006584:	e00c      	b.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	3320      	adds	r3, #32
 800658a:	2100      	movs	r1, #0
 800658c:	4618      	mov	r0, r3
 800658e:	f001 fb6d 	bl	8007c6c <RCCEx_PLLSAI2_Config>
 8006592:	4603      	mov	r3, r0
 8006594:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006596:	e003      	b.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006598:	2301      	movs	r3, #1
 800659a:	74fb      	strb	r3, [r7, #19]
      break;
 800659c:	e000      	b.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 800659e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80065a0:	7cfb      	ldrb	r3, [r7, #19]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d10b      	bne.n	80065be <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80065a6:	4b79      	ldr	r3, [pc, #484]	; (800678c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80065a8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80065ac:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065b4:	4975      	ldr	r1, [pc, #468]	; (800678c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80065b6:	4313      	orrs	r3, r2
 80065b8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80065bc:	e001      	b.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065be:	7cfb      	ldrb	r3, [r7, #19]
 80065c0:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d047      	beq.n	800665e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065d6:	d030      	beq.n	800663a <HAL_RCCEx_PeriphCLKConfig+0x116>
 80065d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065dc:	d82a      	bhi.n	8006634 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80065de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80065e2:	d02a      	beq.n	800663a <HAL_RCCEx_PeriphCLKConfig+0x116>
 80065e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80065e8:	d824      	bhi.n	8006634 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80065ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065ee:	d008      	beq.n	8006602 <HAL_RCCEx_PeriphCLKConfig+0xde>
 80065f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065f4:	d81e      	bhi.n	8006634 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d00a      	beq.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80065fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065fe:	d010      	beq.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8006600:	e018      	b.n	8006634 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006602:	4b62      	ldr	r3, [pc, #392]	; (800678c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006604:	68db      	ldr	r3, [r3, #12]
 8006606:	4a61      	ldr	r2, [pc, #388]	; (800678c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006608:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800660c:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800660e:	e015      	b.n	800663c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	3304      	adds	r3, #4
 8006614:	2100      	movs	r1, #0
 8006616:	4618      	mov	r0, r3
 8006618:	f001 fa34 	bl	8007a84 <RCCEx_PLLSAI1_Config>
 800661c:	4603      	mov	r3, r0
 800661e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006620:	e00c      	b.n	800663c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	3320      	adds	r3, #32
 8006626:	2100      	movs	r1, #0
 8006628:	4618      	mov	r0, r3
 800662a:	f001 fb1f 	bl	8007c6c <RCCEx_PLLSAI2_Config>
 800662e:	4603      	mov	r3, r0
 8006630:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006632:	e003      	b.n	800663c <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006634:	2301      	movs	r3, #1
 8006636:	74fb      	strb	r3, [r7, #19]
      break;
 8006638:	e000      	b.n	800663c <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800663a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800663c:	7cfb      	ldrb	r3, [r7, #19]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d10b      	bne.n	800665a <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006642:	4b52      	ldr	r3, [pc, #328]	; (800678c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006644:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006648:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006650:	494e      	ldr	r1, [pc, #312]	; (800678c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006652:	4313      	orrs	r3, r2
 8006654:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8006658:	e001      	b.n	800665e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800665a:	7cfb      	ldrb	r3, [r7, #19]
 800665c:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006666:	2b00      	cmp	r3, #0
 8006668:	f000 809f 	beq.w	80067aa <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 800666c:	2300      	movs	r3, #0
 800666e:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006670:	4b46      	ldr	r3, [pc, #280]	; (800678c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006672:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006674:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006678:	2b00      	cmp	r3, #0
 800667a:	d101      	bne.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800667c:	2301      	movs	r3, #1
 800667e:	e000      	b.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8006680:	2300      	movs	r3, #0
 8006682:	2b00      	cmp	r3, #0
 8006684:	d00d      	beq.n	80066a2 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006686:	4b41      	ldr	r3, [pc, #260]	; (800678c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006688:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800668a:	4a40      	ldr	r2, [pc, #256]	; (800678c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800668c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006690:	6593      	str	r3, [r2, #88]	; 0x58
 8006692:	4b3e      	ldr	r3, [pc, #248]	; (800678c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006694:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006696:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800669a:	60bb      	str	r3, [r7, #8]
 800669c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800669e:	2301      	movs	r3, #1
 80066a0:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80066a2:	4b3b      	ldr	r3, [pc, #236]	; (8006790 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	4a3a      	ldr	r2, [pc, #232]	; (8006790 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80066a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066ac:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80066ae:	f7fb fdcf 	bl	8002250 <HAL_GetTick>
 80066b2:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80066b4:	e009      	b.n	80066ca <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80066b6:	f7fb fdcb 	bl	8002250 <HAL_GetTick>
 80066ba:	4602      	mov	r2, r0
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	1ad3      	subs	r3, r2, r3
 80066c0:	2b02      	cmp	r3, #2
 80066c2:	d902      	bls.n	80066ca <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80066c4:	2303      	movs	r3, #3
 80066c6:	74fb      	strb	r3, [r7, #19]
        break;
 80066c8:	e005      	b.n	80066d6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80066ca:	4b31      	ldr	r3, [pc, #196]	; (8006790 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d0ef      	beq.n	80066b6 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80066d6:	7cfb      	ldrb	r3, [r7, #19]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d15b      	bne.n	8006794 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80066dc:	4b2b      	ldr	r3, [pc, #172]	; (800678c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80066de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066e6:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80066e8:	697b      	ldr	r3, [r7, #20]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d01f      	beq.n	800672e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80066f4:	697a      	ldr	r2, [r7, #20]
 80066f6:	429a      	cmp	r2, r3
 80066f8:	d019      	beq.n	800672e <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80066fa:	4b24      	ldr	r3, [pc, #144]	; (800678c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80066fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006700:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006704:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006706:	4b21      	ldr	r3, [pc, #132]	; (800678c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006708:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800670c:	4a1f      	ldr	r2, [pc, #124]	; (800678c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800670e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006712:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006716:	4b1d      	ldr	r3, [pc, #116]	; (800678c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006718:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800671c:	4a1b      	ldr	r2, [pc, #108]	; (800678c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800671e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006722:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006726:	4a19      	ldr	r2, [pc, #100]	; (800678c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006728:	697b      	ldr	r3, [r7, #20]
 800672a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800672e:	697b      	ldr	r3, [r7, #20]
 8006730:	f003 0301 	and.w	r3, r3, #1
 8006734:	2b00      	cmp	r3, #0
 8006736:	d016      	beq.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006738:	f7fb fd8a 	bl	8002250 <HAL_GetTick>
 800673c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800673e:	e00b      	b.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006740:	f7fb fd86 	bl	8002250 <HAL_GetTick>
 8006744:	4602      	mov	r2, r0
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	1ad3      	subs	r3, r2, r3
 800674a:	f241 3288 	movw	r2, #5000	; 0x1388
 800674e:	4293      	cmp	r3, r2
 8006750:	d902      	bls.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8006752:	2303      	movs	r3, #3
 8006754:	74fb      	strb	r3, [r7, #19]
            break;
 8006756:	e006      	b.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006758:	4b0c      	ldr	r3, [pc, #48]	; (800678c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800675a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800675e:	f003 0302 	and.w	r3, r3, #2
 8006762:	2b00      	cmp	r3, #0
 8006764:	d0ec      	beq.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8006766:	7cfb      	ldrb	r3, [r7, #19]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d10c      	bne.n	8006786 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800676c:	4b07      	ldr	r3, [pc, #28]	; (800678c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800676e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006772:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800677c:	4903      	ldr	r1, [pc, #12]	; (800678c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800677e:	4313      	orrs	r3, r2
 8006780:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006784:	e008      	b.n	8006798 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006786:	7cfb      	ldrb	r3, [r7, #19]
 8006788:	74bb      	strb	r3, [r7, #18]
 800678a:	e005      	b.n	8006798 <HAL_RCCEx_PeriphCLKConfig+0x274>
 800678c:	40021000 	.word	0x40021000
 8006790:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006794:	7cfb      	ldrb	r3, [r7, #19]
 8006796:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006798:	7c7b      	ldrb	r3, [r7, #17]
 800679a:	2b01      	cmp	r3, #1
 800679c:	d105      	bne.n	80067aa <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800679e:	4ba0      	ldr	r3, [pc, #640]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80067a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067a2:	4a9f      	ldr	r2, [pc, #636]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80067a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80067a8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f003 0301 	and.w	r3, r3, #1
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d00a      	beq.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80067b6:	4b9a      	ldr	r3, [pc, #616]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80067b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067bc:	f023 0203 	bic.w	r2, r3, #3
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067c4:	4996      	ldr	r1, [pc, #600]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80067c6:	4313      	orrs	r3, r2
 80067c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f003 0302 	and.w	r3, r3, #2
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d00a      	beq.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80067d8:	4b91      	ldr	r3, [pc, #580]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80067da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067de:	f023 020c 	bic.w	r2, r3, #12
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067e6:	498e      	ldr	r1, [pc, #568]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80067e8:	4313      	orrs	r3, r2
 80067ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f003 0304 	and.w	r3, r3, #4
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d00a      	beq.n	8006810 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80067fa:	4b89      	ldr	r3, [pc, #548]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80067fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006800:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006808:	4985      	ldr	r1, [pc, #532]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800680a:	4313      	orrs	r3, r2
 800680c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f003 0308 	and.w	r3, r3, #8
 8006818:	2b00      	cmp	r3, #0
 800681a:	d00a      	beq.n	8006832 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800681c:	4b80      	ldr	r3, [pc, #512]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800681e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006822:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800682a:	497d      	ldr	r1, [pc, #500]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800682c:	4313      	orrs	r3, r2
 800682e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f003 0310 	and.w	r3, r3, #16
 800683a:	2b00      	cmp	r3, #0
 800683c:	d00a      	beq.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800683e:	4b78      	ldr	r3, [pc, #480]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006840:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006844:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800684c:	4974      	ldr	r1, [pc, #464]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800684e:	4313      	orrs	r3, r2
 8006850:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f003 0320 	and.w	r3, r3, #32
 800685c:	2b00      	cmp	r3, #0
 800685e:	d00a      	beq.n	8006876 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006860:	4b6f      	ldr	r3, [pc, #444]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006862:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006866:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800686e:	496c      	ldr	r1, [pc, #432]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006870:	4313      	orrs	r3, r2
 8006872:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800687e:	2b00      	cmp	r3, #0
 8006880:	d00a      	beq.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006882:	4b67      	ldr	r3, [pc, #412]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006884:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006888:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006890:	4963      	ldr	r1, [pc, #396]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006892:	4313      	orrs	r3, r2
 8006894:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d00a      	beq.n	80068ba <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80068a4:	4b5e      	ldr	r3, [pc, #376]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80068a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068aa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80068b2:	495b      	ldr	r1, [pc, #364]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80068b4:	4313      	orrs	r3, r2
 80068b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d00a      	beq.n	80068dc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80068c6:	4b56      	ldr	r3, [pc, #344]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80068c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068cc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068d4:	4952      	ldr	r1, [pc, #328]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80068d6:	4313      	orrs	r3, r2
 80068d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d00a      	beq.n	80068fe <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80068e8:	4b4d      	ldr	r3, [pc, #308]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80068ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068ee:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068f6:	494a      	ldr	r1, [pc, #296]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80068f8:	4313      	orrs	r3, r2
 80068fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006906:	2b00      	cmp	r3, #0
 8006908:	d00a      	beq.n	8006920 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800690a:	4b45      	ldr	r3, [pc, #276]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800690c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006910:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006918:	4941      	ldr	r1, [pc, #260]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800691a:	4313      	orrs	r3, r2
 800691c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006928:	2b00      	cmp	r3, #0
 800692a:	d00a      	beq.n	8006942 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800692c:	4b3c      	ldr	r3, [pc, #240]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800692e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006932:	f023 0203 	bic.w	r2, r3, #3
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800693a:	4939      	ldr	r1, [pc, #228]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800693c:	4313      	orrs	r3, r2
 800693e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800694a:	2b00      	cmp	r3, #0
 800694c:	d028      	beq.n	80069a0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800694e:	4b34      	ldr	r3, [pc, #208]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006950:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006954:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800695c:	4930      	ldr	r1, [pc, #192]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800695e:	4313      	orrs	r3, r2
 8006960:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006968:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800696c:	d106      	bne.n	800697c <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800696e:	4b2c      	ldr	r3, [pc, #176]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006970:	68db      	ldr	r3, [r3, #12]
 8006972:	4a2b      	ldr	r2, [pc, #172]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006974:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006978:	60d3      	str	r3, [r2, #12]
 800697a:	e011      	b.n	80069a0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006980:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006984:	d10c      	bne.n	80069a0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	3304      	adds	r3, #4
 800698a:	2101      	movs	r1, #1
 800698c:	4618      	mov	r0, r3
 800698e:	f001 f879 	bl	8007a84 <RCCEx_PLLSAI1_Config>
 8006992:	4603      	mov	r3, r0
 8006994:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006996:	7cfb      	ldrb	r3, [r7, #19]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d001      	beq.n	80069a0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 800699c:	7cfb      	ldrb	r3, [r7, #19]
 800699e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d04d      	beq.n	8006a48 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80069b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80069b4:	d108      	bne.n	80069c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80069b6:	4b1a      	ldr	r3, [pc, #104]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80069b8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80069bc:	4a18      	ldr	r2, [pc, #96]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80069be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80069c2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80069c6:	e012      	b.n	80069ee <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80069c8:	4b15      	ldr	r3, [pc, #84]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80069ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80069ce:	4a14      	ldr	r2, [pc, #80]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80069d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80069d4:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80069d8:	4b11      	ldr	r3, [pc, #68]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80069da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069de:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80069e6:	490e      	ldr	r1, [pc, #56]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80069e8:	4313      	orrs	r3, r2
 80069ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80069f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80069f6:	d106      	bne.n	8006a06 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80069f8:	4b09      	ldr	r3, [pc, #36]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80069fa:	68db      	ldr	r3, [r3, #12]
 80069fc:	4a08      	ldr	r2, [pc, #32]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80069fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006a02:	60d3      	str	r3, [r2, #12]
 8006a04:	e020      	b.n	8006a48 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006a0a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a0e:	d109      	bne.n	8006a24 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006a10:	4b03      	ldr	r3, [pc, #12]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006a12:	68db      	ldr	r3, [r3, #12]
 8006a14:	4a02      	ldr	r2, [pc, #8]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006a16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a1a:	60d3      	str	r3, [r2, #12]
 8006a1c:	e014      	b.n	8006a48 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8006a1e:	bf00      	nop
 8006a20:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006a28:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006a2c:	d10c      	bne.n	8006a48 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	3304      	adds	r3, #4
 8006a32:	2101      	movs	r1, #1
 8006a34:	4618      	mov	r0, r3
 8006a36:	f001 f825 	bl	8007a84 <RCCEx_PLLSAI1_Config>
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006a3e:	7cfb      	ldrb	r3, [r7, #19]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d001      	beq.n	8006a48 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8006a44:	7cfb      	ldrb	r3, [r7, #19]
 8006a46:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d028      	beq.n	8006aa6 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006a54:	4b7a      	ldr	r3, [pc, #488]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a5a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a62:	4977      	ldr	r1, [pc, #476]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006a64:	4313      	orrs	r3, r2
 8006a66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a6e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006a72:	d106      	bne.n	8006a82 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006a74:	4b72      	ldr	r3, [pc, #456]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006a76:	68db      	ldr	r3, [r3, #12]
 8006a78:	4a71      	ldr	r2, [pc, #452]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006a7a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006a7e:	60d3      	str	r3, [r2, #12]
 8006a80:	e011      	b.n	8006aa6 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a86:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006a8a:	d10c      	bne.n	8006aa6 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	3304      	adds	r3, #4
 8006a90:	2101      	movs	r1, #1
 8006a92:	4618      	mov	r0, r3
 8006a94:	f000 fff6 	bl	8007a84 <RCCEx_PLLSAI1_Config>
 8006a98:	4603      	mov	r3, r0
 8006a9a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006a9c:	7cfb      	ldrb	r3, [r7, #19]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d001      	beq.n	8006aa6 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8006aa2:	7cfb      	ldrb	r3, [r7, #19]
 8006aa4:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d01e      	beq.n	8006af0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006ab2:	4b63      	ldr	r3, [pc, #396]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006ab4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ab8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ac2:	495f      	ldr	r1, [pc, #380]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006ac4:	4313      	orrs	r3, r2
 8006ac6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ad0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006ad4:	d10c      	bne.n	8006af0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	3304      	adds	r3, #4
 8006ada:	2102      	movs	r1, #2
 8006adc:	4618      	mov	r0, r3
 8006ade:	f000 ffd1 	bl	8007a84 <RCCEx_PLLSAI1_Config>
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006ae6:	7cfb      	ldrb	r3, [r7, #19]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d001      	beq.n	8006af0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8006aec:	7cfb      	ldrb	r3, [r7, #19]
 8006aee:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d00b      	beq.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006afc:	4b50      	ldr	r3, [pc, #320]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006afe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006b02:	f023 0204 	bic.w	r2, r3, #4
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b0c:	494c      	ldr	r1, [pc, #304]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d00b      	beq.n	8006b38 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8006b20:	4b47      	ldr	r3, [pc, #284]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006b22:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006b26:	f023 0218 	bic.w	r2, r3, #24
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b30:	4943      	ldr	r1, [pc, #268]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006b32:	4313      	orrs	r3, r2
 8006b34:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d035      	beq.n	8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006b44:	4b3e      	ldr	r3, [pc, #248]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4a3d      	ldr	r2, [pc, #244]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006b4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b4e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b50:	f7fb fb7e 	bl	8002250 <HAL_GetTick>
 8006b54:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006b56:	e009      	b.n	8006b6c <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006b58:	f7fb fb7a 	bl	8002250 <HAL_GetTick>
 8006b5c:	4602      	mov	r2, r0
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	1ad3      	subs	r3, r2, r3
 8006b62:	2b02      	cmp	r3, #2
 8006b64:	d902      	bls.n	8006b6c <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 8006b66:	2303      	movs	r3, #3
 8006b68:	74fb      	strb	r3, [r7, #19]
        break;
 8006b6a:	e005      	b.n	8006b78 <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006b6c:	4b34      	ldr	r3, [pc, #208]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d1ef      	bne.n	8006b58 <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 8006b78:	7cfb      	ldrb	r3, [r7, #19]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d113      	bne.n	8006ba6 <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 8006b7e:	4b30      	ldr	r3, [pc, #192]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006b80:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006b84:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b8e:	492c      	ldr	r1, [pc, #176]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006b90:	4313      	orrs	r3, r2
 8006b92:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	3320      	adds	r3, #32
 8006b9a:	2102      	movs	r1, #2
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	f001 f865 	bl	8007c6c <RCCEx_PLLSAI2_Config>
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 8006ba6:	7cfb      	ldrb	r3, [r7, #19]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d001      	beq.n	8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 8006bac:	7cfb      	ldrb	r3, [r7, #19]
 8006bae:	74bb      	strb	r3, [r7, #18]
#endif /* LTDC */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d01e      	beq.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0x6d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(PeriphClkInit->DsiClockSelection));

    /* Configure the DSI clock source */
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8006bbc:	4b20      	ldr	r3, [pc, #128]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006bbe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006bc2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bcc:	491c      	ldr	r1, [pc, #112]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006bce:	4313      	orrs	r3, r2
 8006bd0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bde:	d10c      	bne.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0x6d6>
    {
      /* PLLSAI2 input clock, parameters M, N & Q configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_Q_UPDATE);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	3320      	adds	r3, #32
 8006be4:	2101      	movs	r1, #1
 8006be6:	4618      	mov	r0, r3
 8006be8:	f001 f840 	bl	8007c6c <RCCEx_PLLSAI2_Config>
 8006bec:	4603      	mov	r3, r0
 8006bee:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006bf0:	7cfb      	ldrb	r3, [r7, #19]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d001      	beq.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0x6d6>
      {
        /* set overall return value */
        status = ret;
 8006bf6:	7cfb      	ldrb	r3, [r7, #19]
 8006bf8:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d017      	beq.n	8006c36 <HAL_RCCEx_PeriphCLKConfig+0x712>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006c06:	4b0e      	ldr	r3, [pc, #56]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006c08:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006c0c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c16:	490a      	ldr	r1, [pc, #40]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006c18:	4313      	orrs	r3, r2
 8006c1a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c24:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006c28:	d105      	bne.n	8006c36 <HAL_RCCEx_PeriphCLKConfig+0x712>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006c2a:	4b05      	ldr	r3, [pc, #20]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006c2c:	68db      	ldr	r3, [r3, #12]
 8006c2e:	4a04      	ldr	r2, [pc, #16]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006c30:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006c34:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006c36:	7cbb      	ldrb	r3, [r7, #18]
}
 8006c38:	4618      	mov	r0, r3
 8006c3a:	3718      	adds	r7, #24
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bd80      	pop	{r7, pc}
 8006c40:	40021000 	.word	0x40021000

08006c44 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b088      	sub	sp, #32
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c56:	d13e      	bne.n	8006cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8006c58:	4bb6      	ldr	r3, [pc, #728]	; (8006f34 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c62:	60fb      	str	r3, [r7, #12]

    switch(srcclk)
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c6a:	d028      	beq.n	8006cbe <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c72:	f200 86f2 	bhi.w	8007a5a <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c7c:	d005      	beq.n	8006c8a <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c84:	d00e      	beq.n	8006ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8006c86:	f000 bee8 	b.w	8007a5a <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006c8a:	4baa      	ldr	r3, [pc, #680]	; (8006f34 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006c8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c90:	f003 0302 	and.w	r3, r3, #2
 8006c94:	2b02      	cmp	r3, #2
 8006c96:	f040 86e2 	bne.w	8007a5e <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
        frequency = LSE_VALUE;
 8006c9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c9e:	61fb      	str	r3, [r7, #28]
      break;
 8006ca0:	f000 bedd 	b.w	8007a5e <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8006ca4:	4ba3      	ldr	r3, [pc, #652]	; (8006f34 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006ca6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006caa:	f003 0302 	and.w	r3, r3, #2
 8006cae:	2b02      	cmp	r3, #2
 8006cb0:	f040 86d7 	bne.w	8007a62 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = LSI_VALUE;
 8006cb4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006cb8:	61fb      	str	r3, [r7, #28]
      break;
 8006cba:	f000 bed2 	b.w	8007a62 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006cbe:	4b9d      	ldr	r3, [pc, #628]	; (8006f34 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cc6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006cca:	f040 86cc 	bne.w	8007a66 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
        frequency = HSE_VALUE / 32U;
 8006cce:	4b9a      	ldr	r3, [pc, #616]	; (8006f38 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8006cd0:	61fb      	str	r3, [r7, #28]
      break;
 8006cd2:	f000 bec8 	b.w	8007a66 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006cd6:	4b97      	ldr	r3, [pc, #604]	; (8006f34 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006cd8:	68db      	ldr	r3, [r3, #12]
 8006cda:	f003 0303 	and.w	r3, r3, #3
 8006cde:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8006ce0:	693b      	ldr	r3, [r7, #16]
 8006ce2:	2b03      	cmp	r3, #3
 8006ce4:	d036      	beq.n	8006d54 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8006ce6:	693b      	ldr	r3, [r7, #16]
 8006ce8:	2b03      	cmp	r3, #3
 8006cea:	d840      	bhi.n	8006d6e <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8006cec:	693b      	ldr	r3, [r7, #16]
 8006cee:	2b01      	cmp	r3, #1
 8006cf0:	d003      	beq.n	8006cfa <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8006cf2:	693b      	ldr	r3, [r7, #16]
 8006cf4:	2b02      	cmp	r3, #2
 8006cf6:	d020      	beq.n	8006d3a <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8006cf8:	e039      	b.n	8006d6e <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8006cfa:	4b8e      	ldr	r3, [pc, #568]	; (8006f34 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f003 0302 	and.w	r3, r3, #2
 8006d02:	2b02      	cmp	r3, #2
 8006d04:	d116      	bne.n	8006d34 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8006d06:	4b8b      	ldr	r3, [pc, #556]	; (8006f34 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f003 0308 	and.w	r3, r3, #8
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d005      	beq.n	8006d1e <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8006d12:	4b88      	ldr	r3, [pc, #544]	; (8006f34 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	091b      	lsrs	r3, r3, #4
 8006d18:	f003 030f 	and.w	r3, r3, #15
 8006d1c:	e005      	b.n	8006d2a <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8006d1e:	4b85      	ldr	r3, [pc, #532]	; (8006f34 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006d20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006d24:	0a1b      	lsrs	r3, r3, #8
 8006d26:	f003 030f 	and.w	r3, r3, #15
 8006d2a:	4a84      	ldr	r2, [pc, #528]	; (8006f3c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8006d2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d30:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8006d32:	e01f      	b.n	8006d74 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8006d34:	2300      	movs	r3, #0
 8006d36:	61bb      	str	r3, [r7, #24]
      break;
 8006d38:	e01c      	b.n	8006d74 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006d3a:	4b7e      	ldr	r3, [pc, #504]	; (8006f34 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d46:	d102      	bne.n	8006d4e <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8006d48:	4b7d      	ldr	r3, [pc, #500]	; (8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8006d4a:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8006d4c:	e012      	b.n	8006d74 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8006d4e:	2300      	movs	r3, #0
 8006d50:	61bb      	str	r3, [r7, #24]
      break;
 8006d52:	e00f      	b.n	8006d74 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006d54:	4b77      	ldr	r3, [pc, #476]	; (8006f34 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d5c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d60:	d102      	bne.n	8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 8006d62:	4b77      	ldr	r3, [pc, #476]	; (8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8006d64:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8006d66:	e005      	b.n	8006d74 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8006d68:	2300      	movs	r3, #0
 8006d6a:	61bb      	str	r3, [r7, #24]
      break;
 8006d6c:	e002      	b.n	8006d74 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 8006d6e:	2300      	movs	r3, #0
 8006d70:	61bb      	str	r3, [r7, #24]
      break;
 8006d72:	bf00      	nop
    }

    switch(PeriphClk)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006d7a:	f000 8604 	beq.w	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006d84:	f200 8671 	bhi.w	8007a6a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006d8e:	f000 8467 	beq.w	8007660 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006d98:	f200 8667 	bhi.w	8007a6a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006da2:	f000 852f 	beq.w	8007804 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006dac:	f200 865d 	bhi.w	8007a6a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006db6:	f000 8185 	beq.w	80070c4 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006dc0:	f200 8653 	bhi.w	8007a6a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006dca:	f000 80cb 	beq.w	8006f64 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006dd4:	f200 8649 	bhi.w	8007a6a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006dde:	f000 842e 	beq.w	800763e <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006de8:	f200 863f 	bhi.w	8007a6a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006df2:	f000 83e2 	beq.w	80075ba <HAL_RCCEx_GetPeriphCLKFreq+0x976>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006dfc:	f200 8635 	bhi.w	8007a6a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e06:	f000 80ad 	beq.w	8006f64 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e10:	f200 862b 	bhi.w	8007a6a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e1a:	f000 809b 	beq.w	8006f54 <HAL_RCCEx_GetPeriphCLKFreq+0x310>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e24:	f200 8621 	bhi.w	8007a6a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e2e:	f000 8089 	beq.w	8006f44 <HAL_RCCEx_GetPeriphCLKFreq+0x300>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e38:	f200 8617 	bhi.w	8007a6a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e42:	f000 8552 	beq.w	80078ea <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e4c:	f200 860d 	bhi.w	8007a6a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e56:	f000 84fe 	beq.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e60:	f200 8603 	bhi.w	8007a6a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e6a:	f000 849f 	beq.w	80077ac <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e74:	f200 85f9 	bhi.w	8007a6a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2b80      	cmp	r3, #128	; 0x80
 8006e7c:	f000 846a 	beq.w	8007754 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2b80      	cmp	r3, #128	; 0x80
 8006e84:	f200 85f1 	bhi.w	8007a6a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2b20      	cmp	r3, #32
 8006e8c:	d84c      	bhi.n	8006f28 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	f000 85ea 	beq.w	8007a6a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	3b01      	subs	r3, #1
 8006e9a:	2b1f      	cmp	r3, #31
 8006e9c:	f200 85e5 	bhi.w	8007a6a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8006ea0:	a201      	add	r2, pc, #4	; (adr r2, 8006ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8006ea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ea6:	bf00      	nop
 8006ea8:	080072b9 	.word	0x080072b9
 8006eac:	08007327 	.word	0x08007327
 8006eb0:	08007a6b 	.word	0x08007a6b
 8006eb4:	080073bb 	.word	0x080073bb
 8006eb8:	08007a6b 	.word	0x08007a6b
 8006ebc:	08007a6b 	.word	0x08007a6b
 8006ec0:	08007a6b 	.word	0x08007a6b
 8006ec4:	08007433 	.word	0x08007433
 8006ec8:	08007a6b 	.word	0x08007a6b
 8006ecc:	08007a6b 	.word	0x08007a6b
 8006ed0:	08007a6b 	.word	0x08007a6b
 8006ed4:	08007a6b 	.word	0x08007a6b
 8006ed8:	08007a6b 	.word	0x08007a6b
 8006edc:	08007a6b 	.word	0x08007a6b
 8006ee0:	08007a6b 	.word	0x08007a6b
 8006ee4:	080074b7 	.word	0x080074b7
 8006ee8:	08007a6b 	.word	0x08007a6b
 8006eec:	08007a6b 	.word	0x08007a6b
 8006ef0:	08007a6b 	.word	0x08007a6b
 8006ef4:	08007a6b 	.word	0x08007a6b
 8006ef8:	08007a6b 	.word	0x08007a6b
 8006efc:	08007a6b 	.word	0x08007a6b
 8006f00:	08007a6b 	.word	0x08007a6b
 8006f04:	08007a6b 	.word	0x08007a6b
 8006f08:	08007a6b 	.word	0x08007a6b
 8006f0c:	08007a6b 	.word	0x08007a6b
 8006f10:	08007a6b 	.word	0x08007a6b
 8006f14:	08007a6b 	.word	0x08007a6b
 8006f18:	08007a6b 	.word	0x08007a6b
 8006f1c:	08007a6b 	.word	0x08007a6b
 8006f20:	08007a6b 	.word	0x08007a6b
 8006f24:	08007539 	.word	0x08007539
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2b40      	cmp	r3, #64	; 0x40
 8006f2c:	f000 83e6 	beq.w	80076fc <HAL_RCCEx_GetPeriphCLKFreq+0xab8>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8006f30:	f000 bd9b 	b.w	8007a6a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8006f34:	40021000 	.word	0x40021000
 8006f38:	0007a120 	.word	0x0007a120
 8006f3c:	08013b88 	.word	0x08013b88
 8006f40:	00f42400 	.word	0x00f42400
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8006f44:	69b9      	ldr	r1, [r7, #24]
 8006f46:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006f4a:	f000 ff83 	bl	8007e54 <RCCEx_GetSAIxPeriphCLKFreq>
 8006f4e:	61f8      	str	r0, [r7, #28]
      break;
 8006f50:	f000 bd8e 	b.w	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8006f54:	69b9      	ldr	r1, [r7, #24]
 8006f56:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8006f5a:	f000 ff7b 	bl	8007e54 <RCCEx_GetSAIxPeriphCLKFreq>
 8006f5e:	61f8      	str	r0, [r7, #28]
      break;
 8006f60:	f000 bd86 	b.w	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8006f64:	4b9a      	ldr	r3, [pc, #616]	; (80071d0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f6a:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8006f6e:	60fb      	str	r3, [r7, #12]
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006f76:	d015      	beq.n	8006fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006f7e:	f200 8092 	bhi.w	80070a6 <HAL_RCCEx_GetPeriphCLKFreq+0x462>
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006f88:	d029      	beq.n	8006fde <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006f90:	f200 8089 	bhi.w	80070a6 <HAL_RCCEx_GetPeriphCLKFreq+0x462>
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d07b      	beq.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006fa0:	d04a      	beq.n	8007038 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
          break;
 8006fa2:	e080      	b.n	80070a6 <HAL_RCCEx_GetPeriphCLKFreq+0x462>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8006fa4:	4b8a      	ldr	r3, [pc, #552]	; (80071d0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f003 0302 	and.w	r3, r3, #2
 8006fac:	2b02      	cmp	r3, #2
 8006fae:	d17d      	bne.n	80070ac <HAL_RCCEx_GetPeriphCLKFreq+0x468>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8006fb0:	4b87      	ldr	r3, [pc, #540]	; (80071d0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f003 0308 	and.w	r3, r3, #8
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d005      	beq.n	8006fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x384>
 8006fbc:	4b84      	ldr	r3, [pc, #528]	; (80071d0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	091b      	lsrs	r3, r3, #4
 8006fc2:	f003 030f 	and.w	r3, r3, #15
 8006fc6:	e005      	b.n	8006fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x390>
 8006fc8:	4b81      	ldr	r3, [pc, #516]	; (80071d0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006fca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006fce:	0a1b      	lsrs	r3, r3, #8
 8006fd0:	f003 030f 	and.w	r3, r3, #15
 8006fd4:	4a7f      	ldr	r2, [pc, #508]	; (80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006fd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006fda:	61fb      	str	r3, [r7, #28]
          break;
 8006fdc:	e066      	b.n	80070ac <HAL_RCCEx_GetPeriphCLKFreq+0x468>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8006fde:	4b7c      	ldr	r3, [pc, #496]	; (80071d0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fe6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006fea:	d162      	bne.n	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8006fec:	4b78      	ldr	r3, [pc, #480]	; (80071d0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006fee:	68db      	ldr	r3, [r3, #12]
 8006ff0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006ff4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ff8:	d15b      	bne.n	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006ffa:	4b75      	ldr	r3, [pc, #468]	; (80071d0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006ffc:	68db      	ldr	r3, [r3, #12]
 8006ffe:	0a1b      	lsrs	r3, r3, #8
 8007000:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007004:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8007006:	69bb      	ldr	r3, [r7, #24]
 8007008:	68ba      	ldr	r2, [r7, #8]
 800700a:	fb03 f202 	mul.w	r2, r3, r2
 800700e:	4b70      	ldr	r3, [pc, #448]	; (80071d0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007010:	68db      	ldr	r3, [r3, #12]
 8007012:	091b      	lsrs	r3, r3, #4
 8007014:	f003 030f 	and.w	r3, r3, #15
 8007018:	3301      	adds	r3, #1
 800701a:	fbb2 f3f3 	udiv	r3, r2, r3
 800701e:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8007020:	4b6b      	ldr	r3, [pc, #428]	; (80071d0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007022:	68db      	ldr	r3, [r3, #12]
 8007024:	0d5b      	lsrs	r3, r3, #21
 8007026:	f003 0303 	and.w	r3, r3, #3
 800702a:	3301      	adds	r3, #1
 800702c:	005b      	lsls	r3, r3, #1
 800702e:	69ba      	ldr	r2, [r7, #24]
 8007030:	fbb2 f3f3 	udiv	r3, r2, r3
 8007034:	61fb      	str	r3, [r7, #28]
          break;
 8007036:	e03c      	b.n	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8007038:	4b65      	ldr	r3, [pc, #404]	; (80071d0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007040:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007044:	d138      	bne.n	80070b8 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8007046:	4b62      	ldr	r3, [pc, #392]	; (80071d0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007048:	691b      	ldr	r3, [r3, #16]
 800704a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800704e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007052:	d131      	bne.n	80070b8 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8007054:	4b5e      	ldr	r3, [pc, #376]	; (80071d0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007056:	691b      	ldr	r3, [r3, #16]
 8007058:	0a1b      	lsrs	r3, r3, #8
 800705a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800705e:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8007060:	69bb      	ldr	r3, [r7, #24]
 8007062:	68ba      	ldr	r2, [r7, #8]
 8007064:	fb03 f202 	mul.w	r2, r3, r2
 8007068:	4b59      	ldr	r3, [pc, #356]	; (80071d0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800706a:	691b      	ldr	r3, [r3, #16]
 800706c:	091b      	lsrs	r3, r3, #4
 800706e:	f003 030f 	and.w	r3, r3, #15
 8007072:	3301      	adds	r3, #1
 8007074:	fbb2 f3f3 	udiv	r3, r2, r3
 8007078:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 800707a:	4b55      	ldr	r3, [pc, #340]	; (80071d0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800707c:	691b      	ldr	r3, [r3, #16]
 800707e:	0d5b      	lsrs	r3, r3, #21
 8007080:	f003 0303 	and.w	r3, r3, #3
 8007084:	3301      	adds	r3, #1
 8007086:	005b      	lsls	r3, r3, #1
 8007088:	69ba      	ldr	r2, [r7, #24]
 800708a:	fbb2 f3f3 	udiv	r3, r2, r3
 800708e:	61fb      	str	r3, [r7, #28]
          break;
 8007090:	e012      	b.n	80070b8 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8007092:	4b4f      	ldr	r3, [pc, #316]	; (80071d0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007094:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007098:	f003 0302 	and.w	r3, r3, #2
 800709c:	2b02      	cmp	r3, #2
 800709e:	d10e      	bne.n	80070be <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
            frequency = HSI48_VALUE;
 80070a0:	4b4d      	ldr	r3, [pc, #308]	; (80071d8 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80070a2:	61fb      	str	r3, [r7, #28]
          break;
 80070a4:	e00b      	b.n	80070be <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
          break;
 80070a6:	bf00      	nop
 80070a8:	f000 bce2 	b.w	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80070ac:	bf00      	nop
 80070ae:	f000 bcdf 	b.w	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80070b2:	bf00      	nop
 80070b4:	f000 bcdc 	b.w	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80070b8:	bf00      	nop
 80070ba:	f000 bcd9 	b.w	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80070be:	bf00      	nop
        break;
 80070c0:	f000 bcd6 	b.w	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      if(HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL))  /* PLL "P" ? */
 80070c4:	4b42      	ldr	r3, [pc, #264]	; (80071d0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80070c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80070ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80070ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80070d2:	d13d      	bne.n	8007150 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80070d4:	4b3e      	ldr	r3, [pc, #248]	; (80071d0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80070e0:	f040 84c5 	bne.w	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 80070e4:	4b3a      	ldr	r3, [pc, #232]	; (80071d0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80070e6:	68db      	ldr	r3, [r3, #12]
 80070e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80070ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070f0:	f040 84bd 	bne.w	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80070f4:	4b36      	ldr	r3, [pc, #216]	; (80071d0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80070f6:	68db      	ldr	r3, [r3, #12]
 80070f8:	0a1b      	lsrs	r3, r3, #8
 80070fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070fe:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8007100:	69bb      	ldr	r3, [r7, #24]
 8007102:	68ba      	ldr	r2, [r7, #8]
 8007104:	fb03 f202 	mul.w	r2, r3, r2
 8007108:	4b31      	ldr	r3, [pc, #196]	; (80071d0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800710a:	68db      	ldr	r3, [r3, #12]
 800710c:	091b      	lsrs	r3, r3, #4
 800710e:	f003 030f 	and.w	r3, r3, #15
 8007112:	3301      	adds	r3, #1
 8007114:	fbb2 f3f3 	udiv	r3, r2, r3
 8007118:	61bb      	str	r3, [r7, #24]
            pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 800711a:	4b2d      	ldr	r3, [pc, #180]	; (80071d0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800711c:	68db      	ldr	r3, [r3, #12]
 800711e:	0edb      	lsrs	r3, r3, #27
 8007120:	f003 031f 	and.w	r3, r3, #31
 8007124:	617b      	str	r3, [r7, #20]
            if(pllp == 0U)
 8007126:	697b      	ldr	r3, [r7, #20]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d10a      	bne.n	8007142 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
              if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 800712c:	4b28      	ldr	r3, [pc, #160]	; (80071d0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800712e:	68db      	ldr	r3, [r3, #12]
 8007130:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007134:	2b00      	cmp	r3, #0
 8007136:	d002      	beq.n	800713e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
                pllp = 17U;
 8007138:	2311      	movs	r3, #17
 800713a:	617b      	str	r3, [r7, #20]
 800713c:	e001      	b.n	8007142 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
                pllp = 7U;
 800713e:	2307      	movs	r3, #7
 8007140:	617b      	str	r3, [r7, #20]
            frequency = (pllvco / pllp);
 8007142:	69ba      	ldr	r2, [r7, #24]
 8007144:	697b      	ldr	r3, [r7, #20]
 8007146:	fbb2 f3f3 	udiv	r3, r2, r3
 800714a:	61fb      	str	r3, [r7, #28]
      break;
 800714c:	f000 bc8f 	b.w	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8007150:	4b1f      	ldr	r3, [pc, #124]	; (80071d0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007152:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007156:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800715a:	60fb      	str	r3, [r7, #12]
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007162:	d016      	beq.n	8007192 <HAL_RCCEx_GetPeriphCLKFreq+0x54e>
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800716a:	f200 809b 	bhi.w	80072a4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007174:	d032      	beq.n	80071dc <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800717c:	f200 8092 	bhi.w	80072a4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	2b00      	cmp	r3, #0
 8007184:	f000 8084 	beq.w	8007290 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800718e:	d052      	beq.n	8007236 <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
          break;
 8007190:	e088      	b.n	80072a4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8007192:	4b0f      	ldr	r3, [pc, #60]	; (80071d0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f003 0302 	and.w	r3, r3, #2
 800719a:	2b02      	cmp	r3, #2
 800719c:	f040 8084 	bne.w	80072a8 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80071a0:	4b0b      	ldr	r3, [pc, #44]	; (80071d0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f003 0308 	and.w	r3, r3, #8
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d005      	beq.n	80071b8 <HAL_RCCEx_GetPeriphCLKFreq+0x574>
 80071ac:	4b08      	ldr	r3, [pc, #32]	; (80071d0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	091b      	lsrs	r3, r3, #4
 80071b2:	f003 030f 	and.w	r3, r3, #15
 80071b6:	e005      	b.n	80071c4 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
 80071b8:	4b05      	ldr	r3, [pc, #20]	; (80071d0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80071ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80071be:	0a1b      	lsrs	r3, r3, #8
 80071c0:	f003 030f 	and.w	r3, r3, #15
 80071c4:	4a03      	ldr	r2, [pc, #12]	; (80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80071c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071ca:	61fb      	str	r3, [r7, #28]
          break;
 80071cc:	e06c      	b.n	80072a8 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 80071ce:	bf00      	nop
 80071d0:	40021000 	.word	0x40021000
 80071d4:	08013b88 	.word	0x08013b88
 80071d8:	02dc6c00 	.word	0x02dc6c00
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80071dc:	4ba5      	ldr	r3, [pc, #660]	; (8007474 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80071e8:	d160      	bne.n	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 80071ea:	4ba2      	ldr	r3, [pc, #648]	; (8007474 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80071ec:	68db      	ldr	r3, [r3, #12]
 80071ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80071f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80071f6:	d159      	bne.n	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x668>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80071f8:	4b9e      	ldr	r3, [pc, #632]	; (8007474 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80071fa:	68db      	ldr	r3, [r3, #12]
 80071fc:	0a1b      	lsrs	r3, r3, #8
 80071fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007202:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8007204:	69bb      	ldr	r3, [r7, #24]
 8007206:	68ba      	ldr	r2, [r7, #8]
 8007208:	fb03 f202 	mul.w	r2, r3, r2
 800720c:	4b99      	ldr	r3, [pc, #612]	; (8007474 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800720e:	68db      	ldr	r3, [r3, #12]
 8007210:	091b      	lsrs	r3, r3, #4
 8007212:	f003 030f 	and.w	r3, r3, #15
 8007216:	3301      	adds	r3, #1
 8007218:	fbb2 f3f3 	udiv	r3, r2, r3
 800721c:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800721e:	4b95      	ldr	r3, [pc, #596]	; (8007474 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007220:	68db      	ldr	r3, [r3, #12]
 8007222:	0d5b      	lsrs	r3, r3, #21
 8007224:	f003 0303 	and.w	r3, r3, #3
 8007228:	3301      	adds	r3, #1
 800722a:	005b      	lsls	r3, r3, #1
 800722c:	69ba      	ldr	r2, [r7, #24]
 800722e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007232:	61fb      	str	r3, [r7, #28]
          break;
 8007234:	e03a      	b.n	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x668>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8007236:	4b8f      	ldr	r3, [pc, #572]	; (8007474 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800723e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007242:	d135      	bne.n	80072b0 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8007244:	4b8b      	ldr	r3, [pc, #556]	; (8007474 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007246:	691b      	ldr	r3, [r3, #16]
 8007248:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800724c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007250:	d12e      	bne.n	80072b0 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8007252:	4b88      	ldr	r3, [pc, #544]	; (8007474 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007254:	691b      	ldr	r3, [r3, #16]
 8007256:	0a1b      	lsrs	r3, r3, #8
 8007258:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800725c:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800725e:	69bb      	ldr	r3, [r7, #24]
 8007260:	68ba      	ldr	r2, [r7, #8]
 8007262:	fb03 f202 	mul.w	r2, r3, r2
 8007266:	4b83      	ldr	r3, [pc, #524]	; (8007474 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007268:	691b      	ldr	r3, [r3, #16]
 800726a:	091b      	lsrs	r3, r3, #4
 800726c:	f003 030f 	and.w	r3, r3, #15
 8007270:	3301      	adds	r3, #1
 8007272:	fbb2 f3f3 	udiv	r3, r2, r3
 8007276:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8007278:	4b7e      	ldr	r3, [pc, #504]	; (8007474 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800727a:	691b      	ldr	r3, [r3, #16]
 800727c:	0d5b      	lsrs	r3, r3, #21
 800727e:	f003 0303 	and.w	r3, r3, #3
 8007282:	3301      	adds	r3, #1
 8007284:	005b      	lsls	r3, r3, #1
 8007286:	69ba      	ldr	r2, [r7, #24]
 8007288:	fbb2 f3f3 	udiv	r3, r2, r3
 800728c:	61fb      	str	r3, [r7, #28]
          break;
 800728e:	e00f      	b.n	80072b0 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8007290:	4b78      	ldr	r3, [pc, #480]	; (8007474 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007292:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007296:	f003 0302 	and.w	r3, r3, #2
 800729a:	2b02      	cmp	r3, #2
 800729c:	d10a      	bne.n	80072b4 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
            frequency = HSI48_VALUE;
 800729e:	4b76      	ldr	r3, [pc, #472]	; (8007478 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80072a0:	61fb      	str	r3, [r7, #28]
          break;
 80072a2:	e007      	b.n	80072b4 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          break;
 80072a4:	bf00      	nop
 80072a6:	e3e2      	b.n	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 80072a8:	bf00      	nop
 80072aa:	e3e0      	b.n	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 80072ac:	bf00      	nop
 80072ae:	e3de      	b.n	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 80072b0:	bf00      	nop
 80072b2:	e3dc      	b.n	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 80072b4:	bf00      	nop
      break;
 80072b6:	e3da      	b.n	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80072b8:	4b6e      	ldr	r3, [pc, #440]	; (8007474 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80072ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072be:	f003 0303 	and.w	r3, r3, #3
 80072c2:	60fb      	str	r3, [r7, #12]
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	2b03      	cmp	r3, #3
 80072c8:	d827      	bhi.n	800731a <HAL_RCCEx_GetPeriphCLKFreq+0x6d6>
 80072ca:	a201      	add	r2, pc, #4	; (adr r2, 80072d0 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>)
 80072cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072d0:	080072e1 	.word	0x080072e1
 80072d4:	080072e9 	.word	0x080072e9
 80072d8:	080072f1 	.word	0x080072f1
 80072dc:	08007305 	.word	0x08007305
          frequency = HAL_RCC_GetPCLK2Freq();
 80072e0:	f7ff f84c 	bl	800637c <HAL_RCC_GetPCLK2Freq>
 80072e4:	61f8      	str	r0, [r7, #28]
          break;
 80072e6:	e01d      	b.n	8007324 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
          frequency = HAL_RCC_GetSysClockFreq();
 80072e8:	f7fe ff9c 	bl	8006224 <HAL_RCC_GetSysClockFreq>
 80072ec:	61f8      	str	r0, [r7, #28]
          break;
 80072ee:	e019      	b.n	8007324 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80072f0:	4b60      	ldr	r3, [pc, #384]	; (8007474 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80072f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80072fc:	d10f      	bne.n	800731e <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
            frequency = HSI_VALUE;
 80072fe:	4b5f      	ldr	r3, [pc, #380]	; (800747c <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8007300:	61fb      	str	r3, [r7, #28]
          break;
 8007302:	e00c      	b.n	800731e <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007304:	4b5b      	ldr	r3, [pc, #364]	; (8007474 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007306:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800730a:	f003 0302 	and.w	r3, r3, #2
 800730e:	2b02      	cmp	r3, #2
 8007310:	d107      	bne.n	8007322 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
            frequency = LSE_VALUE;
 8007312:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007316:	61fb      	str	r3, [r7, #28]
          break;
 8007318:	e003      	b.n	8007322 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
          break;
 800731a:	bf00      	nop
 800731c:	e3a8      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800731e:	bf00      	nop
 8007320:	e3a6      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8007322:	bf00      	nop
        break;
 8007324:	e3a4      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8007326:	4b53      	ldr	r3, [pc, #332]	; (8007474 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007328:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800732c:	f003 030c 	and.w	r3, r3, #12
 8007330:	60fb      	str	r3, [r7, #12]
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	2b0c      	cmp	r3, #12
 8007336:	d83a      	bhi.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
 8007338:	a201      	add	r2, pc, #4	; (adr r2, 8007340 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>)
 800733a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800733e:	bf00      	nop
 8007340:	08007375 	.word	0x08007375
 8007344:	080073af 	.word	0x080073af
 8007348:	080073af 	.word	0x080073af
 800734c:	080073af 	.word	0x080073af
 8007350:	0800737d 	.word	0x0800737d
 8007354:	080073af 	.word	0x080073af
 8007358:	080073af 	.word	0x080073af
 800735c:	080073af 	.word	0x080073af
 8007360:	08007385 	.word	0x08007385
 8007364:	080073af 	.word	0x080073af
 8007368:	080073af 	.word	0x080073af
 800736c:	080073af 	.word	0x080073af
 8007370:	08007399 	.word	0x08007399
          frequency = HAL_RCC_GetPCLK1Freq();
 8007374:	f7fe ffec 	bl	8006350 <HAL_RCC_GetPCLK1Freq>
 8007378:	61f8      	str	r0, [r7, #28]
          break;
 800737a:	e01d      	b.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x774>
          frequency = HAL_RCC_GetSysClockFreq();
 800737c:	f7fe ff52 	bl	8006224 <HAL_RCC_GetSysClockFreq>
 8007380:	61f8      	str	r0, [r7, #28]
          break;
 8007382:	e019      	b.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x774>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007384:	4b3b      	ldr	r3, [pc, #236]	; (8007474 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800738c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007390:	d10f      	bne.n	80073b2 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
            frequency = HSI_VALUE;
 8007392:	4b3a      	ldr	r3, [pc, #232]	; (800747c <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8007394:	61fb      	str	r3, [r7, #28]
          break;
 8007396:	e00c      	b.n	80073b2 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007398:	4b36      	ldr	r3, [pc, #216]	; (8007474 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800739a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800739e:	f003 0302 	and.w	r3, r3, #2
 80073a2:	2b02      	cmp	r3, #2
 80073a4:	d107      	bne.n	80073b6 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
            frequency = LSE_VALUE;
 80073a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80073aa:	61fb      	str	r3, [r7, #28]
          break;
 80073ac:	e003      	b.n	80073b6 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          break;
 80073ae:	bf00      	nop
 80073b0:	e35e      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80073b2:	bf00      	nop
 80073b4:	e35c      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80073b6:	bf00      	nop
        break;
 80073b8:	e35a      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80073ba:	4b2e      	ldr	r3, [pc, #184]	; (8007474 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80073bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073c0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80073c4:	60fb      	str	r3, [r7, #12]
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	2b30      	cmp	r3, #48	; 0x30
 80073ca:	d021      	beq.n	8007410 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	2b30      	cmp	r3, #48	; 0x30
 80073d0:	d829      	bhi.n	8007426 <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	2b20      	cmp	r3, #32
 80073d6:	d011      	beq.n	80073fc <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	2b20      	cmp	r3, #32
 80073dc:	d823      	bhi.n	8007426 <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d003      	beq.n	80073ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	2b10      	cmp	r3, #16
 80073e8:	d004      	beq.n	80073f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>
          break;
 80073ea:	e01c      	b.n	8007426 <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
          frequency = HAL_RCC_GetPCLK1Freq();
 80073ec:	f7fe ffb0 	bl	8006350 <HAL_RCC_GetPCLK1Freq>
 80073f0:	61f8      	str	r0, [r7, #28]
          break;
 80073f2:	e01d      	b.n	8007430 <HAL_RCCEx_GetPeriphCLKFreq+0x7ec>
          frequency = HAL_RCC_GetSysClockFreq();
 80073f4:	f7fe ff16 	bl	8006224 <HAL_RCC_GetSysClockFreq>
 80073f8:	61f8      	str	r0, [r7, #28]
          break;
 80073fa:	e019      	b.n	8007430 <HAL_RCCEx_GetPeriphCLKFreq+0x7ec>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80073fc:	4b1d      	ldr	r3, [pc, #116]	; (8007474 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007404:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007408:	d10f      	bne.n	800742a <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
            frequency = HSI_VALUE;
 800740a:	4b1c      	ldr	r3, [pc, #112]	; (800747c <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800740c:	61fb      	str	r3, [r7, #28]
          break;
 800740e:	e00c      	b.n	800742a <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007410:	4b18      	ldr	r3, [pc, #96]	; (8007474 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007412:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007416:	f003 0302 	and.w	r3, r3, #2
 800741a:	2b02      	cmp	r3, #2
 800741c:	d107      	bne.n	800742e <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
            frequency = LSE_VALUE;
 800741e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007422:	61fb      	str	r3, [r7, #28]
          break;
 8007424:	e003      	b.n	800742e <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
          break;
 8007426:	bf00      	nop
 8007428:	e322      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800742a:	bf00      	nop
 800742c:	e320      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800742e:	bf00      	nop
        break;
 8007430:	e31e      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8007432:	4b10      	ldr	r3, [pc, #64]	; (8007474 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007434:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007438:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800743c:	60fb      	str	r3, [r7, #12]
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	2bc0      	cmp	r3, #192	; 0xc0
 8007442:	d027      	beq.n	8007494 <HAL_RCCEx_GetPeriphCLKFreq+0x850>
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	2bc0      	cmp	r3, #192	; 0xc0
 8007448:	d82f      	bhi.n	80074aa <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	2b80      	cmp	r3, #128	; 0x80
 800744e:	d017      	beq.n	8007480 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	2b80      	cmp	r3, #128	; 0x80
 8007454:	d829      	bhi.n	80074aa <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d003      	beq.n	8007464 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	2b40      	cmp	r3, #64	; 0x40
 8007460:	d004      	beq.n	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x828>
          break;
 8007462:	e022      	b.n	80074aa <HAL_RCCEx_GetPeriphCLKFreq+0x866>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007464:	f7fe ff74 	bl	8006350 <HAL_RCC_GetPCLK1Freq>
 8007468:	61f8      	str	r0, [r7, #28]
          break;
 800746a:	e023      	b.n	80074b4 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
          frequency = HAL_RCC_GetSysClockFreq();
 800746c:	f7fe feda 	bl	8006224 <HAL_RCC_GetSysClockFreq>
 8007470:	61f8      	str	r0, [r7, #28]
          break;
 8007472:	e01f      	b.n	80074b4 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
 8007474:	40021000 	.word	0x40021000
 8007478:	02dc6c00 	.word	0x02dc6c00
 800747c:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007480:	4b9b      	ldr	r3, [pc, #620]	; (80076f0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007488:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800748c:	d10f      	bne.n	80074ae <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
            frequency = HSI_VALUE;
 800748e:	4b99      	ldr	r3, [pc, #612]	; (80076f4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007490:	61fb      	str	r3, [r7, #28]
          break;
 8007492:	e00c      	b.n	80074ae <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007494:	4b96      	ldr	r3, [pc, #600]	; (80076f0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8007496:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800749a:	f003 0302 	and.w	r3, r3, #2
 800749e:	2b02      	cmp	r3, #2
 80074a0:	d107      	bne.n	80074b2 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
            frequency = LSE_VALUE;
 80074a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80074a6:	61fb      	str	r3, [r7, #28]
          break;
 80074a8:	e003      	b.n	80074b2 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
          break;
 80074aa:	bf00      	nop
 80074ac:	e2e0      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80074ae:	bf00      	nop
 80074b0:	e2de      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80074b2:	bf00      	nop
        break;
 80074b4:	e2dc      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80074b6:	4b8e      	ldr	r3, [pc, #568]	; (80076f0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80074b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80074c0:	60fb      	str	r3, [r7, #12]
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80074c8:	d025      	beq.n	8007516 <HAL_RCCEx_GetPeriphCLKFreq+0x8d2>
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80074d0:	d82c      	bhi.n	800752c <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80074d8:	d013      	beq.n	8007502 <HAL_RCCEx_GetPeriphCLKFreq+0x8be>
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80074e0:	d824      	bhi.n	800752c <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d004      	beq.n	80074f2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074ee:	d004      	beq.n	80074fa <HAL_RCCEx_GetPeriphCLKFreq+0x8b6>
          break;
 80074f0:	e01c      	b.n	800752c <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
          frequency = HAL_RCC_GetPCLK1Freq();
 80074f2:	f7fe ff2d 	bl	8006350 <HAL_RCC_GetPCLK1Freq>
 80074f6:	61f8      	str	r0, [r7, #28]
          break;
 80074f8:	e01d      	b.n	8007536 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
          frequency = HAL_RCC_GetSysClockFreq();
 80074fa:	f7fe fe93 	bl	8006224 <HAL_RCC_GetSysClockFreq>
 80074fe:	61f8      	str	r0, [r7, #28]
          break;
 8007500:	e019      	b.n	8007536 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007502:	4b7b      	ldr	r3, [pc, #492]	; (80076f0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800750a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800750e:	d10f      	bne.n	8007530 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
            frequency = HSI_VALUE;
 8007510:	4b78      	ldr	r3, [pc, #480]	; (80076f4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007512:	61fb      	str	r3, [r7, #28]
          break;
 8007514:	e00c      	b.n	8007530 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007516:	4b76      	ldr	r3, [pc, #472]	; (80076f0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8007518:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800751c:	f003 0302 	and.w	r3, r3, #2
 8007520:	2b02      	cmp	r3, #2
 8007522:	d107      	bne.n	8007534 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
            frequency = LSE_VALUE;
 8007524:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007528:	61fb      	str	r3, [r7, #28]
          break;
 800752a:	e003      	b.n	8007534 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          break;
 800752c:	bf00      	nop
 800752e:	e29f      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8007530:	bf00      	nop
 8007532:	e29d      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8007534:	bf00      	nop
        break;
 8007536:	e29b      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8007538:	4b6d      	ldr	r3, [pc, #436]	; (80076f0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800753a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800753e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007542:	60fb      	str	r3, [r7, #12]
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800754a:	d025      	beq.n	8007598 <HAL_RCCEx_GetPeriphCLKFreq+0x954>
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007552:	d82c      	bhi.n	80075ae <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800755a:	d013      	beq.n	8007584 <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007562:	d824      	bhi.n	80075ae <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d004      	beq.n	8007574 <HAL_RCCEx_GetPeriphCLKFreq+0x930>
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007570:	d004      	beq.n	800757c <HAL_RCCEx_GetPeriphCLKFreq+0x938>
          break;
 8007572:	e01c      	b.n	80075ae <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007574:	f7fe feec 	bl	8006350 <HAL_RCC_GetPCLK1Freq>
 8007578:	61f8      	str	r0, [r7, #28]
          break;
 800757a:	e01d      	b.n	80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
          frequency = HAL_RCC_GetSysClockFreq();
 800757c:	f7fe fe52 	bl	8006224 <HAL_RCC_GetSysClockFreq>
 8007580:	61f8      	str	r0, [r7, #28]
          break;
 8007582:	e019      	b.n	80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007584:	4b5a      	ldr	r3, [pc, #360]	; (80076f0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800758c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007590:	d10f      	bne.n	80075b2 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
            frequency = HSI_VALUE;
 8007592:	4b58      	ldr	r3, [pc, #352]	; (80076f4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007594:	61fb      	str	r3, [r7, #28]
          break;
 8007596:	e00c      	b.n	80075b2 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007598:	4b55      	ldr	r3, [pc, #340]	; (80076f0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800759a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800759e:	f003 0302 	and.w	r3, r3, #2
 80075a2:	2b02      	cmp	r3, #2
 80075a4:	d107      	bne.n	80075b6 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
            frequency = LSE_VALUE;
 80075a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80075aa:	61fb      	str	r3, [r7, #28]
          break;
 80075ac:	e003      	b.n	80075b6 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
          break;
 80075ae:	bf00      	nop
 80075b0:	e25e      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80075b2:	bf00      	nop
 80075b4:	e25c      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80075b6:	bf00      	nop
        break;
 80075b8:	e25a      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80075ba:	4b4d      	ldr	r3, [pc, #308]	; (80076f0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80075bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075c0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80075c4:	60fb      	str	r3, [r7, #12]
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80075cc:	d007      	beq.n	80075de <HAL_RCCEx_GetPeriphCLKFreq+0x99a>
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80075d4:	d12f      	bne.n	8007636 <HAL_RCCEx_GetPeriphCLKFreq+0x9f2>
          frequency = HAL_RCC_GetSysClockFreq();
 80075d6:	f7fe fe25 	bl	8006224 <HAL_RCC_GetSysClockFreq>
 80075da:	61f8      	str	r0, [r7, #28]
          break;
 80075dc:	e02e      	b.n	800763c <HAL_RCCEx_GetPeriphCLKFreq+0x9f8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 80075de:	4b44      	ldr	r3, [pc, #272]	; (80076f0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80075e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80075ea:	d126      	bne.n	800763a <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
 80075ec:	4b40      	ldr	r3, [pc, #256]	; (80076f0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80075ee:	691b      	ldr	r3, [r3, #16]
 80075f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d020      	beq.n	800763a <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80075f8:	4b3d      	ldr	r3, [pc, #244]	; (80076f0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80075fa:	691b      	ldr	r3, [r3, #16]
 80075fc:	0a1b      	lsrs	r3, r3, #8
 80075fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007602:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8007604:	69bb      	ldr	r3, [r7, #24]
 8007606:	68ba      	ldr	r2, [r7, #8]
 8007608:	fb03 f202 	mul.w	r2, r3, r2
 800760c:	4b38      	ldr	r3, [pc, #224]	; (80076f0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800760e:	691b      	ldr	r3, [r3, #16]
 8007610:	091b      	lsrs	r3, r3, #4
 8007612:	f003 030f 	and.w	r3, r3, #15
 8007616:	3301      	adds	r3, #1
 8007618:	fbb2 f3f3 	udiv	r3, r2, r3
 800761c:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 800761e:	4b34      	ldr	r3, [pc, #208]	; (80076f0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8007620:	691b      	ldr	r3, [r3, #16]
 8007622:	0e5b      	lsrs	r3, r3, #25
 8007624:	f003 0303 	and.w	r3, r3, #3
 8007628:	3301      	adds	r3, #1
 800762a:	005b      	lsls	r3, r3, #1
 800762c:	69ba      	ldr	r2, [r7, #24]
 800762e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007632:	61fb      	str	r3, [r7, #28]
          break;
 8007634:	e001      	b.n	800763a <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
          break;
 8007636:	bf00      	nop
 8007638:	e21a      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800763a:	bf00      	nop
        break;
 800763c:	e218      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 800763e:	4b2c      	ldr	r3, [pc, #176]	; (80076f0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8007640:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007644:	f003 0304 	and.w	r3, r3, #4
 8007648:	60fb      	str	r3, [r7, #12]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d103      	bne.n	8007658 <HAL_RCCEx_GetPeriphCLKFreq+0xa14>
          frequency = HAL_RCC_GetPCLK2Freq();
 8007650:	f7fe fe94 	bl	800637c <HAL_RCC_GetPCLK2Freq>
 8007654:	61f8      	str	r0, [r7, #28]
        break;
 8007656:	e20b      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          frequency = HAL_RCC_GetSysClockFreq();
 8007658:	f7fe fde4 	bl	8006224 <HAL_RCC_GetSysClockFreq>
 800765c:	61f8      	str	r0, [r7, #28]
        break;
 800765e:	e207      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 8007660:	4b23      	ldr	r3, [pc, #140]	; (80076f0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8007662:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007666:	f003 0318 	and.w	r3, r3, #24
 800766a:	60fb      	str	r3, [r7, #12]
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	2b10      	cmp	r3, #16
 8007670:	d010      	beq.n	8007694 <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	2b10      	cmp	r3, #16
 8007676:	d834      	bhi.n	80076e2 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d003      	beq.n	8007686 <HAL_RCCEx_GetPeriphCLKFreq+0xa42>
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	2b08      	cmp	r3, #8
 8007682:	d024      	beq.n	80076ce <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
          break;
 8007684:	e02d      	b.n	80076e2 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
          frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8007686:	69b9      	ldr	r1, [r7, #24]
 8007688:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800768c:	f000 fbe2 	bl	8007e54 <RCCEx_GetSAIxPeriphCLKFreq>
 8007690:	61f8      	str	r0, [r7, #28]
          break;
 8007692:	e02b      	b.n	80076ec <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8007694:	4b16      	ldr	r3, [pc, #88]	; (80076f0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f003 0302 	and.w	r3, r3, #2
 800769c:	2b02      	cmp	r3, #2
 800769e:	d122      	bne.n	80076e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80076a0:	4b13      	ldr	r3, [pc, #76]	; (80076f0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f003 0308 	and.w	r3, r3, #8
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d005      	beq.n	80076b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 80076ac:	4b10      	ldr	r3, [pc, #64]	; (80076f0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	091b      	lsrs	r3, r3, #4
 80076b2:	f003 030f 	and.w	r3, r3, #15
 80076b6:	e005      	b.n	80076c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 80076b8:	4b0d      	ldr	r3, [pc, #52]	; (80076f0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80076ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80076be:	0a1b      	lsrs	r3, r3, #8
 80076c0:	f003 030f 	and.w	r3, r3, #15
 80076c4:	4a0c      	ldr	r2, [pc, #48]	; (80076f8 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 80076c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80076ca:	61fb      	str	r3, [r7, #28]
          break;
 80076cc:	e00b      	b.n	80076e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80076ce:	4b08      	ldr	r3, [pc, #32]	; (80076f0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80076d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076da:	d106      	bne.n	80076ea <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
            frequency = HSI_VALUE;
 80076dc:	4b05      	ldr	r3, [pc, #20]	; (80076f4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80076de:	61fb      	str	r3, [r7, #28]
          break;
 80076e0:	e003      	b.n	80076ea <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
          break;
 80076e2:	bf00      	nop
 80076e4:	e1c4      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80076e6:	bf00      	nop
 80076e8:	e1c2      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80076ea:	bf00      	nop
        break;
 80076ec:	e1c0      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
 80076ee:	bf00      	nop
 80076f0:	40021000 	.word	0x40021000
 80076f4:	00f42400 	.word	0x00f42400
 80076f8:	08013b88 	.word	0x08013b88
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80076fc:	4b96      	ldr	r3, [pc, #600]	; (8007958 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 80076fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007702:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007706:	60fb      	str	r3, [r7, #12]
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800770e:	d013      	beq.n	8007738 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007716:	d819      	bhi.n	800774c <HAL_RCCEx_GetPeriphCLKFreq+0xb08>
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d004      	beq.n	8007728 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007724:	d004      	beq.n	8007730 <HAL_RCCEx_GetPeriphCLKFreq+0xaec>
          break;
 8007726:	e011      	b.n	800774c <HAL_RCCEx_GetPeriphCLKFreq+0xb08>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007728:	f7fe fe12 	bl	8006350 <HAL_RCC_GetPCLK1Freq>
 800772c:	61f8      	str	r0, [r7, #28]
          break;
 800772e:	e010      	b.n	8007752 <HAL_RCCEx_GetPeriphCLKFreq+0xb0e>
          frequency = HAL_RCC_GetSysClockFreq();
 8007730:	f7fe fd78 	bl	8006224 <HAL_RCC_GetSysClockFreq>
 8007734:	61f8      	str	r0, [r7, #28]
          break;
 8007736:	e00c      	b.n	8007752 <HAL_RCCEx_GetPeriphCLKFreq+0xb0e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007738:	4b87      	ldr	r3, [pc, #540]	; (8007958 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007740:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007744:	d104      	bne.n	8007750 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
            frequency = HSI_VALUE;
 8007746:	4b85      	ldr	r3, [pc, #532]	; (800795c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8007748:	61fb      	str	r3, [r7, #28]
          break;
 800774a:	e001      	b.n	8007750 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
          break;
 800774c:	bf00      	nop
 800774e:	e18f      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8007750:	bf00      	nop
        break;
 8007752:	e18d      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8007754:	4b80      	ldr	r3, [pc, #512]	; (8007958 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8007756:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800775a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800775e:	60fb      	str	r3, [r7, #12]
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007766:	d013      	beq.n	8007790 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800776e:	d819      	bhi.n	80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d004      	beq.n	8007780 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800777c:	d004      	beq.n	8007788 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>
          break;
 800777e:	e011      	b.n	80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007780:	f7fe fde6 	bl	8006350 <HAL_RCC_GetPCLK1Freq>
 8007784:	61f8      	str	r0, [r7, #28]
          break;
 8007786:	e010      	b.n	80077aa <HAL_RCCEx_GetPeriphCLKFreq+0xb66>
          frequency = HAL_RCC_GetSysClockFreq();
 8007788:	f7fe fd4c 	bl	8006224 <HAL_RCC_GetSysClockFreq>
 800778c:	61f8      	str	r0, [r7, #28]
          break;
 800778e:	e00c      	b.n	80077aa <HAL_RCCEx_GetPeriphCLKFreq+0xb66>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007790:	4b71      	ldr	r3, [pc, #452]	; (8007958 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007798:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800779c:	d104      	bne.n	80077a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
            frequency = HSI_VALUE;
 800779e:	4b6f      	ldr	r3, [pc, #444]	; (800795c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80077a0:	61fb      	str	r3, [r7, #28]
          break;
 80077a2:	e001      	b.n	80077a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
          break;
 80077a4:	bf00      	nop
 80077a6:	e163      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80077a8:	bf00      	nop
        break;
 80077aa:	e161      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80077ac:	4b6a      	ldr	r3, [pc, #424]	; (8007958 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 80077ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077b2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80077b6:	60fb      	str	r3, [r7, #12]
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80077be:	d013      	beq.n	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80077c6:	d819      	bhi.n	80077fc <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d004      	beq.n	80077d8 <HAL_RCCEx_GetPeriphCLKFreq+0xb94>
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077d4:	d004      	beq.n	80077e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
          break;
 80077d6:	e011      	b.n	80077fc <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
          frequency = HAL_RCC_GetPCLK1Freq();
 80077d8:	f7fe fdba 	bl	8006350 <HAL_RCC_GetPCLK1Freq>
 80077dc:	61f8      	str	r0, [r7, #28]
          break;
 80077de:	e010      	b.n	8007802 <HAL_RCCEx_GetPeriphCLKFreq+0xbbe>
          frequency = HAL_RCC_GetSysClockFreq();
 80077e0:	f7fe fd20 	bl	8006224 <HAL_RCC_GetSysClockFreq>
 80077e4:	61f8      	str	r0, [r7, #28]
          break;
 80077e6:	e00c      	b.n	8007802 <HAL_RCCEx_GetPeriphCLKFreq+0xbbe>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80077e8:	4b5b      	ldr	r3, [pc, #364]	; (8007958 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80077f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80077f4:	d104      	bne.n	8007800 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
            frequency = HSI_VALUE;
 80077f6:	4b59      	ldr	r3, [pc, #356]	; (800795c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80077f8:	61fb      	str	r3, [r7, #28]
          break;
 80077fa:	e001      	b.n	8007800 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
          break;
 80077fc:	bf00      	nop
 80077fe:	e137      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8007800:	bf00      	nop
        break;
 8007802:	e135      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8007804:	4b54      	ldr	r3, [pc, #336]	; (8007958 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8007806:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800780a:	f003 0303 	and.w	r3, r3, #3
 800780e:	60fb      	str	r3, [r7, #12]
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	2b02      	cmp	r3, #2
 8007814:	d011      	beq.n	800783a <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	2b02      	cmp	r3, #2
 800781a:	d818      	bhi.n	800784e <HAL_RCCEx_GetPeriphCLKFreq+0xc0a>
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d003      	beq.n	800782a <HAL_RCCEx_GetPeriphCLKFreq+0xbe6>
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	2b01      	cmp	r3, #1
 8007826:	d004      	beq.n	8007832 <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
          break;
 8007828:	e011      	b.n	800784e <HAL_RCCEx_GetPeriphCLKFreq+0xc0a>
          frequency = HAL_RCC_GetPCLK1Freq();
 800782a:	f7fe fd91 	bl	8006350 <HAL_RCC_GetPCLK1Freq>
 800782e:	61f8      	str	r0, [r7, #28]
          break;
 8007830:	e010      	b.n	8007854 <HAL_RCCEx_GetPeriphCLKFreq+0xc10>
          frequency = HAL_RCC_GetSysClockFreq();
 8007832:	f7fe fcf7 	bl	8006224 <HAL_RCC_GetSysClockFreq>
 8007836:	61f8      	str	r0, [r7, #28]
          break;
 8007838:	e00c      	b.n	8007854 <HAL_RCCEx_GetPeriphCLKFreq+0xc10>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800783a:	4b47      	ldr	r3, [pc, #284]	; (8007958 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007842:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007846:	d104      	bne.n	8007852 <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
            frequency = HSI_VALUE;
 8007848:	4b44      	ldr	r3, [pc, #272]	; (800795c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800784a:	61fb      	str	r3, [r7, #28]
          break;
 800784c:	e001      	b.n	8007852 <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
          break;
 800784e:	bf00      	nop
 8007850:	e10e      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8007852:	bf00      	nop
        break;
 8007854:	e10c      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8007856:	4b40      	ldr	r3, [pc, #256]	; (8007958 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8007858:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800785c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8007860:	60fb      	str	r3, [r7, #12]
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007868:	d02c      	beq.n	80078c4 <HAL_RCCEx_GetPeriphCLKFreq+0xc80>
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007870:	d833      	bhi.n	80078da <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007878:	d01a      	beq.n	80078b0 <HAL_RCCEx_GetPeriphCLKFreq+0xc6c>
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007880:	d82b      	bhi.n	80078da <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d004      	beq.n	8007892 <HAL_RCCEx_GetPeriphCLKFreq+0xc4e>
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800788e:	d004      	beq.n	800789a <HAL_RCCEx_GetPeriphCLKFreq+0xc56>
          break;
 8007890:	e023      	b.n	80078da <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007892:	f7fe fd5d 	bl	8006350 <HAL_RCC_GetPCLK1Freq>
 8007896:	61f8      	str	r0, [r7, #28]
          break;
 8007898:	e026      	b.n	80078e8 <HAL_RCCEx_GetPeriphCLKFreq+0xca4>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800789a:	4b2f      	ldr	r3, [pc, #188]	; (8007958 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 800789c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80078a0:	f003 0302 	and.w	r3, r3, #2
 80078a4:	2b02      	cmp	r3, #2
 80078a6:	d11a      	bne.n	80078de <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
              frequency = LSI_VALUE;
 80078a8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80078ac:	61fb      	str	r3, [r7, #28]
          break;
 80078ae:	e016      	b.n	80078de <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80078b0:	4b29      	ldr	r3, [pc, #164]	; (8007958 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80078b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078bc:	d111      	bne.n	80078e2 <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
            frequency = HSI_VALUE;
 80078be:	4b27      	ldr	r3, [pc, #156]	; (800795c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80078c0:	61fb      	str	r3, [r7, #28]
          break;
 80078c2:	e00e      	b.n	80078e2 <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80078c4:	4b24      	ldr	r3, [pc, #144]	; (8007958 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 80078c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078ca:	f003 0302 	and.w	r3, r3, #2
 80078ce:	2b02      	cmp	r3, #2
 80078d0:	d109      	bne.n	80078e6 <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
            frequency = LSE_VALUE;
 80078d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80078d6:	61fb      	str	r3, [r7, #28]
          break;
 80078d8:	e005      	b.n	80078e6 <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
          break;
 80078da:	bf00      	nop
 80078dc:	e0c8      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80078de:	bf00      	nop
 80078e0:	e0c6      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80078e2:	bf00      	nop
 80078e4:	e0c4      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80078e6:	bf00      	nop
        break;
 80078e8:	e0c2      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80078ea:	4b1b      	ldr	r3, [pc, #108]	; (8007958 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 80078ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078f0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80078f4:	60fb      	str	r3, [r7, #12]
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80078fc:	d030      	beq.n	8007960 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007904:	d837      	bhi.n	8007976 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800790c:	d01a      	beq.n	8007944 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007914:	d82f      	bhi.n	8007976 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d004      	beq.n	8007926 <HAL_RCCEx_GetPeriphCLKFreq+0xce2>
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007922:	d004      	beq.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xcea>
          break;
 8007924:	e027      	b.n	8007976 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007926:	f7fe fd13 	bl	8006350 <HAL_RCC_GetPCLK1Freq>
 800792a:	61f8      	str	r0, [r7, #28]
          break;
 800792c:	e02a      	b.n	8007984 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800792e:	4b0a      	ldr	r3, [pc, #40]	; (8007958 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8007930:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007934:	f003 0302 	and.w	r3, r3, #2
 8007938:	2b02      	cmp	r3, #2
 800793a:	d11e      	bne.n	800797a <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
              frequency = LSI_VALUE;
 800793c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007940:	61fb      	str	r3, [r7, #28]
          break;
 8007942:	e01a      	b.n	800797a <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007944:	4b04      	ldr	r3, [pc, #16]	; (8007958 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800794c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007950:	d115      	bne.n	800797e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
            frequency = HSI_VALUE;
 8007952:	4b02      	ldr	r3, [pc, #8]	; (800795c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8007954:	61fb      	str	r3, [r7, #28]
          break;
 8007956:	e012      	b.n	800797e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 8007958:	40021000 	.word	0x40021000
 800795c:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007960:	4b46      	ldr	r3, [pc, #280]	; (8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8007962:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007966:	f003 0302 	and.w	r3, r3, #2
 800796a:	2b02      	cmp	r3, #2
 800796c:	d109      	bne.n	8007982 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
            frequency = LSE_VALUE;
 800796e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007972:	61fb      	str	r3, [r7, #28]
          break;
 8007974:	e005      	b.n	8007982 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
          break;
 8007976:	bf00      	nop
 8007978:	e07a      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800797a:	bf00      	nop
 800797c:	e078      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800797e:	bf00      	nop
 8007980:	e076      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8007982:	bf00      	nop
        break;
 8007984:	e074      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8007986:	4b3d      	ldr	r3, [pc, #244]	; (8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8007988:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800798c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8007990:	60fb      	str	r3, [r7, #12]
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007998:	d02c      	beq.n	80079f4 <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80079a0:	d855      	bhi.n	8007a4e <HAL_RCCEx_GetPeriphCLKFreq+0xe0a>
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d004      	beq.n	80079b2 <HAL_RCCEx_GetPeriphCLKFreq+0xd6e>
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80079ae:	d004      	beq.n	80079ba <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
          break;
 80079b0:	e04d      	b.n	8007a4e <HAL_RCCEx_GetPeriphCLKFreq+0xe0a>
          frequency = HAL_RCC_GetSysClockFreq();
 80079b2:	f7fe fc37 	bl	8006224 <HAL_RCC_GetSysClockFreq>
 80079b6:	61f8      	str	r0, [r7, #28]
          break;
 80079b8:	e04e      	b.n	8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0xe14>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80079ba:	4b30      	ldr	r3, [pc, #192]	; (8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f003 0302 	and.w	r3, r3, #2
 80079c2:	2b02      	cmp	r3, #2
 80079c4:	d145      	bne.n	8007a52 <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80079c6:	4b2d      	ldr	r3, [pc, #180]	; (8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f003 0308 	and.w	r3, r3, #8
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d005      	beq.n	80079de <HAL_RCCEx_GetPeriphCLKFreq+0xd9a>
 80079d2:	4b2a      	ldr	r3, [pc, #168]	; (8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	091b      	lsrs	r3, r3, #4
 80079d8:	f003 030f 	and.w	r3, r3, #15
 80079dc:	e005      	b.n	80079ea <HAL_RCCEx_GetPeriphCLKFreq+0xda6>
 80079de:	4b27      	ldr	r3, [pc, #156]	; (8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 80079e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80079e4:	0a1b      	lsrs	r3, r3, #8
 80079e6:	f003 030f 	and.w	r3, r3, #15
 80079ea:	4a25      	ldr	r2, [pc, #148]	; (8007a80 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80079ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80079f0:	61fb      	str	r3, [r7, #28]
          break;
 80079f2:	e02e      	b.n	8007a52 <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80079f4:	4b21      	ldr	r3, [pc, #132]	; (8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079fc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007a00:	d129      	bne.n	8007a56 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8007a02:	4b1e      	ldr	r3, [pc, #120]	; (8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8007a04:	68db      	ldr	r3, [r3, #12]
 8007a06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007a0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a0e:	d122      	bne.n	8007a56 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8007a10:	4b1a      	ldr	r3, [pc, #104]	; (8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8007a12:	68db      	ldr	r3, [r3, #12]
 8007a14:	0a1b      	lsrs	r3, r3, #8
 8007a16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a1a:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8007a1c:	69bb      	ldr	r3, [r7, #24]
 8007a1e:	68ba      	ldr	r2, [r7, #8]
 8007a20:	fb03 f202 	mul.w	r2, r3, r2
 8007a24:	4b15      	ldr	r3, [pc, #84]	; (8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8007a26:	68db      	ldr	r3, [r3, #12]
 8007a28:	091b      	lsrs	r3, r3, #4
 8007a2a:	f003 030f 	and.w	r3, r3, #15
 8007a2e:	3301      	adds	r3, #1
 8007a30:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a34:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8007a36:	4b11      	ldr	r3, [pc, #68]	; (8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8007a38:	68db      	ldr	r3, [r3, #12]
 8007a3a:	0d5b      	lsrs	r3, r3, #21
 8007a3c:	f003 0303 	and.w	r3, r3, #3
 8007a40:	3301      	adds	r3, #1
 8007a42:	005b      	lsls	r3, r3, #1
 8007a44:	69ba      	ldr	r2, [r7, #24]
 8007a46:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a4a:	61fb      	str	r3, [r7, #28]
          break;
 8007a4c:	e003      	b.n	8007a56 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
          break;
 8007a4e:	bf00      	nop
 8007a50:	e00e      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8007a52:	bf00      	nop
 8007a54:	e00c      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8007a56:	bf00      	nop
        break;
 8007a58:	e00a      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8007a5a:	bf00      	nop
 8007a5c:	e008      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8007a5e:	bf00      	nop
 8007a60:	e006      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8007a62:	bf00      	nop
 8007a64:	e004      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8007a66:	bf00      	nop
 8007a68:	e002      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8007a6a:	bf00      	nop
 8007a6c:	e000      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8007a6e:	bf00      	nop
    }
  }

  return(frequency);
 8007a70:	69fb      	ldr	r3, [r7, #28]
}
 8007a72:	4618      	mov	r0, r3
 8007a74:	3720      	adds	r7, #32
 8007a76:	46bd      	mov	sp, r7
 8007a78:	bd80      	pop	{r7, pc}
 8007a7a:	bf00      	nop
 8007a7c:	40021000 	.word	0x40021000
 8007a80:	08013b88 	.word	0x08013b88

08007a84 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b084      	sub	sp, #16
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
 8007a8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007a8e:	2300      	movs	r3, #0
 8007a90:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007a92:	4b72      	ldr	r3, [pc, #456]	; (8007c5c <RCCEx_PLLSAI1_Config+0x1d8>)
 8007a94:	68db      	ldr	r3, [r3, #12]
 8007a96:	f003 0303 	and.w	r3, r3, #3
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d00e      	beq.n	8007abc <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8007a9e:	4b6f      	ldr	r3, [pc, #444]	; (8007c5c <RCCEx_PLLSAI1_Config+0x1d8>)
 8007aa0:	68db      	ldr	r3, [r3, #12]
 8007aa2:	f003 0203 	and.w	r2, r3, #3
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	429a      	cmp	r2, r3
 8007aac:	d103      	bne.n	8007ab6 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
       ||
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d142      	bne.n	8007b3c <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8007ab6:	2301      	movs	r3, #1
 8007ab8:	73fb      	strb	r3, [r7, #15]
 8007aba:	e03f      	b.n	8007b3c <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	2b03      	cmp	r3, #3
 8007ac2:	d018      	beq.n	8007af6 <RCCEx_PLLSAI1_Config+0x72>
 8007ac4:	2b03      	cmp	r3, #3
 8007ac6:	d825      	bhi.n	8007b14 <RCCEx_PLLSAI1_Config+0x90>
 8007ac8:	2b01      	cmp	r3, #1
 8007aca:	d002      	beq.n	8007ad2 <RCCEx_PLLSAI1_Config+0x4e>
 8007acc:	2b02      	cmp	r3, #2
 8007ace:	d009      	beq.n	8007ae4 <RCCEx_PLLSAI1_Config+0x60>
 8007ad0:	e020      	b.n	8007b14 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007ad2:	4b62      	ldr	r3, [pc, #392]	; (8007c5c <RCCEx_PLLSAI1_Config+0x1d8>)
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f003 0302 	and.w	r3, r3, #2
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d11d      	bne.n	8007b1a <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8007ade:	2301      	movs	r3, #1
 8007ae0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007ae2:	e01a      	b.n	8007b1a <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007ae4:	4b5d      	ldr	r3, [pc, #372]	; (8007c5c <RCCEx_PLLSAI1_Config+0x1d8>)
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d116      	bne.n	8007b1e <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8007af0:	2301      	movs	r3, #1
 8007af2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007af4:	e013      	b.n	8007b1e <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007af6:	4b59      	ldr	r3, [pc, #356]	; (8007c5c <RCCEx_PLLSAI1_Config+0x1d8>)
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d10f      	bne.n	8007b22 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007b02:	4b56      	ldr	r3, [pc, #344]	; (8007c5c <RCCEx_PLLSAI1_Config+0x1d8>)
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d109      	bne.n	8007b22 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8007b0e:	2301      	movs	r3, #1
 8007b10:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007b12:	e006      	b.n	8007b22 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8007b14:	2301      	movs	r3, #1
 8007b16:	73fb      	strb	r3, [r7, #15]
      break;
 8007b18:	e004      	b.n	8007b24 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8007b1a:	bf00      	nop
 8007b1c:	e002      	b.n	8007b24 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8007b1e:	bf00      	nop
 8007b20:	e000      	b.n	8007b24 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8007b22:	bf00      	nop
    }

    if(status == HAL_OK)
 8007b24:	7bfb      	ldrb	r3, [r7, #15]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d108      	bne.n	8007b3c <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8007b2a:	4b4c      	ldr	r3, [pc, #304]	; (8007c5c <RCCEx_PLLSAI1_Config+0x1d8>)
 8007b2c:	68db      	ldr	r3, [r3, #12]
 8007b2e:	f023 0203 	bic.w	r2, r3, #3
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	4949      	ldr	r1, [pc, #292]	; (8007c5c <RCCEx_PLLSAI1_Config+0x1d8>)
 8007b38:	4313      	orrs	r3, r2
 8007b3a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8007b3c:	7bfb      	ldrb	r3, [r7, #15]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	f040 8086 	bne.w	8007c50 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8007b44:	4b45      	ldr	r3, [pc, #276]	; (8007c5c <RCCEx_PLLSAI1_Config+0x1d8>)
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	4a44      	ldr	r2, [pc, #272]	; (8007c5c <RCCEx_PLLSAI1_Config+0x1d8>)
 8007b4a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007b4e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b50:	f7fa fb7e 	bl	8002250 <HAL_GetTick>
 8007b54:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007b56:	e009      	b.n	8007b6c <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007b58:	f7fa fb7a 	bl	8002250 <HAL_GetTick>
 8007b5c:	4602      	mov	r2, r0
 8007b5e:	68bb      	ldr	r3, [r7, #8]
 8007b60:	1ad3      	subs	r3, r2, r3
 8007b62:	2b02      	cmp	r3, #2
 8007b64:	d902      	bls.n	8007b6c <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8007b66:	2303      	movs	r3, #3
 8007b68:	73fb      	strb	r3, [r7, #15]
        break;
 8007b6a:	e005      	b.n	8007b78 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007b6c:	4b3b      	ldr	r3, [pc, #236]	; (8007c5c <RCCEx_PLLSAI1_Config+0x1d8>)
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d1ef      	bne.n	8007b58 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8007b78:	7bfb      	ldrb	r3, [r7, #15]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d168      	bne.n	8007c50 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d113      	bne.n	8007bac <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007b84:	4b35      	ldr	r3, [pc, #212]	; (8007c5c <RCCEx_PLLSAI1_Config+0x1d8>)
 8007b86:	691a      	ldr	r2, [r3, #16]
 8007b88:	4b35      	ldr	r3, [pc, #212]	; (8007c60 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007b8a:	4013      	ands	r3, r2
 8007b8c:	687a      	ldr	r2, [r7, #4]
 8007b8e:	6892      	ldr	r2, [r2, #8]
 8007b90:	0211      	lsls	r1, r2, #8
 8007b92:	687a      	ldr	r2, [r7, #4]
 8007b94:	68d2      	ldr	r2, [r2, #12]
 8007b96:	06d2      	lsls	r2, r2, #27
 8007b98:	4311      	orrs	r1, r2
 8007b9a:	687a      	ldr	r2, [r7, #4]
 8007b9c:	6852      	ldr	r2, [r2, #4]
 8007b9e:	3a01      	subs	r2, #1
 8007ba0:	0112      	lsls	r2, r2, #4
 8007ba2:	430a      	orrs	r2, r1
 8007ba4:	492d      	ldr	r1, [pc, #180]	; (8007c5c <RCCEx_PLLSAI1_Config+0x1d8>)
 8007ba6:	4313      	orrs	r3, r2
 8007ba8:	610b      	str	r3, [r1, #16]
 8007baa:	e02d      	b.n	8007c08 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	2b01      	cmp	r3, #1
 8007bb0:	d115      	bne.n	8007bde <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007bb2:	4b2a      	ldr	r3, [pc, #168]	; (8007c5c <RCCEx_PLLSAI1_Config+0x1d8>)
 8007bb4:	691a      	ldr	r2, [r3, #16]
 8007bb6:	4b2b      	ldr	r3, [pc, #172]	; (8007c64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007bb8:	4013      	ands	r3, r2
 8007bba:	687a      	ldr	r2, [r7, #4]
 8007bbc:	6892      	ldr	r2, [r2, #8]
 8007bbe:	0211      	lsls	r1, r2, #8
 8007bc0:	687a      	ldr	r2, [r7, #4]
 8007bc2:	6912      	ldr	r2, [r2, #16]
 8007bc4:	0852      	lsrs	r2, r2, #1
 8007bc6:	3a01      	subs	r2, #1
 8007bc8:	0552      	lsls	r2, r2, #21
 8007bca:	4311      	orrs	r1, r2
 8007bcc:	687a      	ldr	r2, [r7, #4]
 8007bce:	6852      	ldr	r2, [r2, #4]
 8007bd0:	3a01      	subs	r2, #1
 8007bd2:	0112      	lsls	r2, r2, #4
 8007bd4:	430a      	orrs	r2, r1
 8007bd6:	4921      	ldr	r1, [pc, #132]	; (8007c5c <RCCEx_PLLSAI1_Config+0x1d8>)
 8007bd8:	4313      	orrs	r3, r2
 8007bda:	610b      	str	r3, [r1, #16]
 8007bdc:	e014      	b.n	8007c08 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007bde:	4b1f      	ldr	r3, [pc, #124]	; (8007c5c <RCCEx_PLLSAI1_Config+0x1d8>)
 8007be0:	691a      	ldr	r2, [r3, #16]
 8007be2:	4b21      	ldr	r3, [pc, #132]	; (8007c68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007be4:	4013      	ands	r3, r2
 8007be6:	687a      	ldr	r2, [r7, #4]
 8007be8:	6892      	ldr	r2, [r2, #8]
 8007bea:	0211      	lsls	r1, r2, #8
 8007bec:	687a      	ldr	r2, [r7, #4]
 8007bee:	6952      	ldr	r2, [r2, #20]
 8007bf0:	0852      	lsrs	r2, r2, #1
 8007bf2:	3a01      	subs	r2, #1
 8007bf4:	0652      	lsls	r2, r2, #25
 8007bf6:	4311      	orrs	r1, r2
 8007bf8:	687a      	ldr	r2, [r7, #4]
 8007bfa:	6852      	ldr	r2, [r2, #4]
 8007bfc:	3a01      	subs	r2, #1
 8007bfe:	0112      	lsls	r2, r2, #4
 8007c00:	430a      	orrs	r2, r1
 8007c02:	4916      	ldr	r1, [pc, #88]	; (8007c5c <RCCEx_PLLSAI1_Config+0x1d8>)
 8007c04:	4313      	orrs	r3, r2
 8007c06:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8007c08:	4b14      	ldr	r3, [pc, #80]	; (8007c5c <RCCEx_PLLSAI1_Config+0x1d8>)
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	4a13      	ldr	r2, [pc, #76]	; (8007c5c <RCCEx_PLLSAI1_Config+0x1d8>)
 8007c0e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007c12:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c14:	f7fa fb1c 	bl	8002250 <HAL_GetTick>
 8007c18:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007c1a:	e009      	b.n	8007c30 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007c1c:	f7fa fb18 	bl	8002250 <HAL_GetTick>
 8007c20:	4602      	mov	r2, r0
 8007c22:	68bb      	ldr	r3, [r7, #8]
 8007c24:	1ad3      	subs	r3, r2, r3
 8007c26:	2b02      	cmp	r3, #2
 8007c28:	d902      	bls.n	8007c30 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8007c2a:	2303      	movs	r3, #3
 8007c2c:	73fb      	strb	r3, [r7, #15]
          break;
 8007c2e:	e005      	b.n	8007c3c <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007c30:	4b0a      	ldr	r3, [pc, #40]	; (8007c5c <RCCEx_PLLSAI1_Config+0x1d8>)
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d0ef      	beq.n	8007c1c <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8007c3c:	7bfb      	ldrb	r3, [r7, #15]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d106      	bne.n	8007c50 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8007c42:	4b06      	ldr	r3, [pc, #24]	; (8007c5c <RCCEx_PLLSAI1_Config+0x1d8>)
 8007c44:	691a      	ldr	r2, [r3, #16]
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	699b      	ldr	r3, [r3, #24]
 8007c4a:	4904      	ldr	r1, [pc, #16]	; (8007c5c <RCCEx_PLLSAI1_Config+0x1d8>)
 8007c4c:	4313      	orrs	r3, r2
 8007c4e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8007c50:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c52:	4618      	mov	r0, r3
 8007c54:	3710      	adds	r7, #16
 8007c56:	46bd      	mov	sp, r7
 8007c58:	bd80      	pop	{r7, pc}
 8007c5a:	bf00      	nop
 8007c5c:	40021000 	.word	0x40021000
 8007c60:	07ff800f 	.word	0x07ff800f
 8007c64:	ff9f800f 	.word	0xff9f800f
 8007c68:	f9ff800f 	.word	0xf9ff800f

08007c6c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b084      	sub	sp, #16
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
 8007c74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007c76:	2300      	movs	r3, #0
 8007c78:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007c7a:	4b72      	ldr	r3, [pc, #456]	; (8007e44 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007c7c:	68db      	ldr	r3, [r3, #12]
 8007c7e:	f003 0303 	and.w	r3, r3, #3
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d00e      	beq.n	8007ca4 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8007c86:	4b6f      	ldr	r3, [pc, #444]	; (8007e44 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007c88:	68db      	ldr	r3, [r3, #12]
 8007c8a:	f003 0203 	and.w	r2, r3, #3
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	429a      	cmp	r2, r3
 8007c94:	d103      	bne.n	8007c9e <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
       ||
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d142      	bne.n	8007d24 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8007c9e:	2301      	movs	r3, #1
 8007ca0:	73fb      	strb	r3, [r7, #15]
 8007ca2:	e03f      	b.n	8007d24 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	2b03      	cmp	r3, #3
 8007caa:	d018      	beq.n	8007cde <RCCEx_PLLSAI2_Config+0x72>
 8007cac:	2b03      	cmp	r3, #3
 8007cae:	d825      	bhi.n	8007cfc <RCCEx_PLLSAI2_Config+0x90>
 8007cb0:	2b01      	cmp	r3, #1
 8007cb2:	d002      	beq.n	8007cba <RCCEx_PLLSAI2_Config+0x4e>
 8007cb4:	2b02      	cmp	r3, #2
 8007cb6:	d009      	beq.n	8007ccc <RCCEx_PLLSAI2_Config+0x60>
 8007cb8:	e020      	b.n	8007cfc <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007cba:	4b62      	ldr	r3, [pc, #392]	; (8007e44 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f003 0302 	and.w	r3, r3, #2
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d11d      	bne.n	8007d02 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8007cc6:	2301      	movs	r3, #1
 8007cc8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007cca:	e01a      	b.n	8007d02 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007ccc:	4b5d      	ldr	r3, [pc, #372]	; (8007e44 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d116      	bne.n	8007d06 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8007cd8:	2301      	movs	r3, #1
 8007cda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007cdc:	e013      	b.n	8007d06 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007cde:	4b59      	ldr	r3, [pc, #356]	; (8007e44 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d10f      	bne.n	8007d0a <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007cea:	4b56      	ldr	r3, [pc, #344]	; (8007e44 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d109      	bne.n	8007d0a <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8007cf6:	2301      	movs	r3, #1
 8007cf8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007cfa:	e006      	b.n	8007d0a <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8007cfc:	2301      	movs	r3, #1
 8007cfe:	73fb      	strb	r3, [r7, #15]
      break;
 8007d00:	e004      	b.n	8007d0c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8007d02:	bf00      	nop
 8007d04:	e002      	b.n	8007d0c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8007d06:	bf00      	nop
 8007d08:	e000      	b.n	8007d0c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8007d0a:	bf00      	nop
    }

    if(status == HAL_OK)
 8007d0c:	7bfb      	ldrb	r3, [r7, #15]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d108      	bne.n	8007d24 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8007d12:	4b4c      	ldr	r3, [pc, #304]	; (8007e44 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007d14:	68db      	ldr	r3, [r3, #12]
 8007d16:	f023 0203 	bic.w	r2, r3, #3
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	4949      	ldr	r1, [pc, #292]	; (8007e44 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007d20:	4313      	orrs	r3, r2
 8007d22:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8007d24:	7bfb      	ldrb	r3, [r7, #15]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	f040 8086 	bne.w	8007e38 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8007d2c:	4b45      	ldr	r3, [pc, #276]	; (8007e44 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	4a44      	ldr	r2, [pc, #272]	; (8007e44 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007d32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007d36:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d38:	f7fa fa8a 	bl	8002250 <HAL_GetTick>
 8007d3c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007d3e:	e009      	b.n	8007d54 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007d40:	f7fa fa86 	bl	8002250 <HAL_GetTick>
 8007d44:	4602      	mov	r2, r0
 8007d46:	68bb      	ldr	r3, [r7, #8]
 8007d48:	1ad3      	subs	r3, r2, r3
 8007d4a:	2b02      	cmp	r3, #2
 8007d4c:	d902      	bls.n	8007d54 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8007d4e:	2303      	movs	r3, #3
 8007d50:	73fb      	strb	r3, [r7, #15]
        break;
 8007d52:	e005      	b.n	8007d60 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007d54:	4b3b      	ldr	r3, [pc, #236]	; (8007e44 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d1ef      	bne.n	8007d40 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8007d60:	7bfb      	ldrb	r3, [r7, #15]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d168      	bne.n	8007e38 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d113      	bne.n	8007d94 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007d6c:	4b35      	ldr	r3, [pc, #212]	; (8007e44 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007d6e:	695a      	ldr	r2, [r3, #20]
 8007d70:	4b35      	ldr	r3, [pc, #212]	; (8007e48 <RCCEx_PLLSAI2_Config+0x1dc>)
 8007d72:	4013      	ands	r3, r2
 8007d74:	687a      	ldr	r2, [r7, #4]
 8007d76:	6892      	ldr	r2, [r2, #8]
 8007d78:	0211      	lsls	r1, r2, #8
 8007d7a:	687a      	ldr	r2, [r7, #4]
 8007d7c:	68d2      	ldr	r2, [r2, #12]
 8007d7e:	06d2      	lsls	r2, r2, #27
 8007d80:	4311      	orrs	r1, r2
 8007d82:	687a      	ldr	r2, [r7, #4]
 8007d84:	6852      	ldr	r2, [r2, #4]
 8007d86:	3a01      	subs	r2, #1
 8007d88:	0112      	lsls	r2, r2, #4
 8007d8a:	430a      	orrs	r2, r1
 8007d8c:	492d      	ldr	r1, [pc, #180]	; (8007e44 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007d8e:	4313      	orrs	r3, r2
 8007d90:	614b      	str	r3, [r1, #20]
 8007d92:	e02d      	b.n	8007df0 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	2b01      	cmp	r3, #1
 8007d98:	d115      	bne.n	8007dc6 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007d9a:	4b2a      	ldr	r3, [pc, #168]	; (8007e44 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007d9c:	695a      	ldr	r2, [r3, #20]
 8007d9e:	4b2b      	ldr	r3, [pc, #172]	; (8007e4c <RCCEx_PLLSAI2_Config+0x1e0>)
 8007da0:	4013      	ands	r3, r2
 8007da2:	687a      	ldr	r2, [r7, #4]
 8007da4:	6892      	ldr	r2, [r2, #8]
 8007da6:	0211      	lsls	r1, r2, #8
 8007da8:	687a      	ldr	r2, [r7, #4]
 8007daa:	6912      	ldr	r2, [r2, #16]
 8007dac:	0852      	lsrs	r2, r2, #1
 8007dae:	3a01      	subs	r2, #1
 8007db0:	0552      	lsls	r2, r2, #21
 8007db2:	4311      	orrs	r1, r2
 8007db4:	687a      	ldr	r2, [r7, #4]
 8007db6:	6852      	ldr	r2, [r2, #4]
 8007db8:	3a01      	subs	r2, #1
 8007dba:	0112      	lsls	r2, r2, #4
 8007dbc:	430a      	orrs	r2, r1
 8007dbe:	4921      	ldr	r1, [pc, #132]	; (8007e44 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007dc0:	4313      	orrs	r3, r2
 8007dc2:	614b      	str	r3, [r1, #20]
 8007dc4:	e014      	b.n	8007df0 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007dc6:	4b1f      	ldr	r3, [pc, #124]	; (8007e44 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007dc8:	695a      	ldr	r2, [r3, #20]
 8007dca:	4b21      	ldr	r3, [pc, #132]	; (8007e50 <RCCEx_PLLSAI2_Config+0x1e4>)
 8007dcc:	4013      	ands	r3, r2
 8007dce:	687a      	ldr	r2, [r7, #4]
 8007dd0:	6892      	ldr	r2, [r2, #8]
 8007dd2:	0211      	lsls	r1, r2, #8
 8007dd4:	687a      	ldr	r2, [r7, #4]
 8007dd6:	6952      	ldr	r2, [r2, #20]
 8007dd8:	0852      	lsrs	r2, r2, #1
 8007dda:	3a01      	subs	r2, #1
 8007ddc:	0652      	lsls	r2, r2, #25
 8007dde:	4311      	orrs	r1, r2
 8007de0:	687a      	ldr	r2, [r7, #4]
 8007de2:	6852      	ldr	r2, [r2, #4]
 8007de4:	3a01      	subs	r2, #1
 8007de6:	0112      	lsls	r2, r2, #4
 8007de8:	430a      	orrs	r2, r1
 8007dea:	4916      	ldr	r1, [pc, #88]	; (8007e44 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007dec:	4313      	orrs	r3, r2
 8007dee:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8007df0:	4b14      	ldr	r3, [pc, #80]	; (8007e44 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	4a13      	ldr	r2, [pc, #76]	; (8007e44 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007df6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007dfa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007dfc:	f7fa fa28 	bl	8002250 <HAL_GetTick>
 8007e00:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007e02:	e009      	b.n	8007e18 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007e04:	f7fa fa24 	bl	8002250 <HAL_GetTick>
 8007e08:	4602      	mov	r2, r0
 8007e0a:	68bb      	ldr	r3, [r7, #8]
 8007e0c:	1ad3      	subs	r3, r2, r3
 8007e0e:	2b02      	cmp	r3, #2
 8007e10:	d902      	bls.n	8007e18 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8007e12:	2303      	movs	r3, #3
 8007e14:	73fb      	strb	r3, [r7, #15]
          break;
 8007e16:	e005      	b.n	8007e24 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007e18:	4b0a      	ldr	r3, [pc, #40]	; (8007e44 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d0ef      	beq.n	8007e04 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8007e24:	7bfb      	ldrb	r3, [r7, #15]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d106      	bne.n	8007e38 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8007e2a:	4b06      	ldr	r3, [pc, #24]	; (8007e44 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007e2c:	695a      	ldr	r2, [r3, #20]
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	699b      	ldr	r3, [r3, #24]
 8007e32:	4904      	ldr	r1, [pc, #16]	; (8007e44 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007e34:	4313      	orrs	r3, r2
 8007e36:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8007e38:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	3710      	adds	r7, #16
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	bd80      	pop	{r7, pc}
 8007e42:	bf00      	nop
 8007e44:	40021000 	.word	0x40021000
 8007e48:	07ff800f 	.word	0x07ff800f
 8007e4c:	ff9f800f 	.word	0xff9f800f
 8007e50:	f9ff800f 	.word	0xf9ff800f

08007e54 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8007e54:	b480      	push	{r7}
 8007e56:	b089      	sub	sp, #36	; 0x24
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
 8007e5c:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8007e5e:	2300      	movs	r3, #0
 8007e60:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8007e62:	2300      	movs	r3, #0
 8007e64:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8007e66:	2300      	movs	r3, #0
 8007e68:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e70:	d10b      	bne.n	8007e8a <RCCEx_GetSAIxPeriphCLKFreq+0x36>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8007e72:	4b7e      	ldr	r3, [pc, #504]	; (800806c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007e74:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007e78:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8007e7c:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8007e7e:	69bb      	ldr	r3, [r7, #24]
 8007e80:	2b60      	cmp	r3, #96	; 0x60
 8007e82:	d112      	bne.n	8007eaa <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8007e84:	4b7a      	ldr	r3, [pc, #488]	; (8008070 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 8007e86:	61fb      	str	r3, [r7, #28]
 8007e88:	e00f      	b.n	8007eaa <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e90:	d10b      	bne.n	8007eaa <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8007e92:	4b76      	ldr	r3, [pc, #472]	; (800806c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007e94:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007e98:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007e9c:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8007e9e:	69bb      	ldr	r3, [r7, #24]
 8007ea0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007ea4:	d101      	bne.n	8007eaa <RCCEx_GetSAIxPeriphCLKFreq+0x56>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8007ea6:	4b72      	ldr	r3, [pc, #456]	; (8008070 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 8007ea8:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8007eaa:	69fb      	ldr	r3, [r7, #28]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	f040 80d6 	bne.w	800805e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
  {
    pllvco = InputFrequency;
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8007eb6:	69bb      	ldr	r3, [r7, #24]
 8007eb8:	2b40      	cmp	r3, #64	; 0x40
 8007eba:	d003      	beq.n	8007ec4 <RCCEx_GetSAIxPeriphCLKFreq+0x70>
 8007ebc:	69bb      	ldr	r3, [r7, #24]
 8007ebe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ec2:	d13b      	bne.n	8007f3c <RCCEx_GetSAIxPeriphCLKFreq+0xe8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8007ec4:	4b69      	ldr	r3, [pc, #420]	; (800806c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ecc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007ed0:	f040 80c4 	bne.w	800805c <RCCEx_GetSAIxPeriphCLKFreq+0x208>
 8007ed4:	4b65      	ldr	r3, [pc, #404]	; (800806c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007ed6:	68db      	ldr	r3, [r3, #12]
 8007ed8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	f000 80bd 	beq.w	800805c <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8007ee2:	4b62      	ldr	r3, [pc, #392]	; (800806c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007ee4:	68db      	ldr	r3, [r3, #12]
 8007ee6:	091b      	lsrs	r3, r3, #4
 8007ee8:	f003 030f 	and.w	r3, r3, #15
 8007eec:	3301      	adds	r3, #1
 8007eee:	693a      	ldr	r2, [r7, #16]
 8007ef0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ef4:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8007ef6:	4b5d      	ldr	r3, [pc, #372]	; (800806c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007ef8:	68db      	ldr	r3, [r3, #12]
 8007efa:	0a1b      	lsrs	r3, r3, #8
 8007efc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f00:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8007f02:	4b5a      	ldr	r3, [pc, #360]	; (800806c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007f04:	68db      	ldr	r3, [r3, #12]
 8007f06:	0edb      	lsrs	r3, r3, #27
 8007f08:	f003 031f 	and.w	r3, r3, #31
 8007f0c:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8007f0e:	697b      	ldr	r3, [r7, #20]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d10a      	bne.n	8007f2a <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8007f14:	4b55      	ldr	r3, [pc, #340]	; (800806c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007f16:	68db      	ldr	r3, [r3, #12]
 8007f18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d002      	beq.n	8007f26 <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
          {
            pllp = 17U;
 8007f20:	2311      	movs	r3, #17
 8007f22:	617b      	str	r3, [r7, #20]
 8007f24:	e001      	b.n	8007f2a <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          }
          else
          {
            pllp = 7U;
 8007f26:	2307      	movs	r3, #7
 8007f28:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8007f2a:	693b      	ldr	r3, [r7, #16]
 8007f2c:	68fa      	ldr	r2, [r7, #12]
 8007f2e:	fb03 f202 	mul.w	r2, r3, r2
 8007f32:	697b      	ldr	r3, [r7, #20]
 8007f34:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f38:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8007f3a:	e08f      	b.n	800805c <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8007f3c:	69bb      	ldr	r3, [r7, #24]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d13a      	bne.n	8007fb8 <RCCEx_GetSAIxPeriphCLKFreq+0x164>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 8007f42:	4b4a      	ldr	r3, [pc, #296]	; (800806c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007f4a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007f4e:	f040 8086 	bne.w	800805e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 8007f52:	4b46      	ldr	r3, [pc, #280]	; (800806c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007f54:	691b      	ldr	r3, [r3, #16]
 8007f56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d07f      	beq.n	800805e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8007f5e:	4b43      	ldr	r3, [pc, #268]	; (800806c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007f60:	691b      	ldr	r3, [r3, #16]
 8007f62:	091b      	lsrs	r3, r3, #4
 8007f64:	f003 030f 	and.w	r3, r3, #15
 8007f68:	3301      	adds	r3, #1
 8007f6a:	693a      	ldr	r2, [r7, #16]
 8007f6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f70:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8007f72:	4b3e      	ldr	r3, [pc, #248]	; (800806c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007f74:	691b      	ldr	r3, [r3, #16]
 8007f76:	0a1b      	lsrs	r3, r3, #8
 8007f78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f7c:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 8007f7e:	4b3b      	ldr	r3, [pc, #236]	; (800806c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007f80:	691b      	ldr	r3, [r3, #16]
 8007f82:	0edb      	lsrs	r3, r3, #27
 8007f84:	f003 031f 	and.w	r3, r3, #31
 8007f88:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8007f8a:	697b      	ldr	r3, [r7, #20]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d10a      	bne.n	8007fa6 <RCCEx_GetSAIxPeriphCLKFreq+0x152>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8007f90:	4b36      	ldr	r3, [pc, #216]	; (800806c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007f92:	691b      	ldr	r3, [r3, #16]
 8007f94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d002      	beq.n	8007fa2 <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
          {
            pllp = 17U;
 8007f9c:	2311      	movs	r3, #17
 8007f9e:	617b      	str	r3, [r7, #20]
 8007fa0:	e001      	b.n	8007fa6 <RCCEx_GetSAIxPeriphCLKFreq+0x152>
          }
          else
          {
            pllp = 7U;
 8007fa2:	2307      	movs	r3, #7
 8007fa4:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8007fa6:	693b      	ldr	r3, [r7, #16]
 8007fa8:	68fa      	ldr	r2, [r7, #12]
 8007faa:	fb03 f202 	mul.w	r2, r3, r2
 8007fae:	697b      	ldr	r3, [r7, #20]
 8007fb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fb4:	61fb      	str	r3, [r7, #28]
 8007fb6:	e052      	b.n	800805e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    else if((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 8007fb8:	69bb      	ldr	r3, [r7, #24]
 8007fba:	2b80      	cmp	r3, #128	; 0x80
 8007fbc:	d003      	beq.n	8007fc6 <RCCEx_GetSAIxPeriphCLKFreq+0x172>
 8007fbe:	69bb      	ldr	r3, [r7, #24]
 8007fc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007fc4:	d109      	bne.n	8007fda <RCCEx_GetSAIxPeriphCLKFreq+0x186>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007fc6:	4b29      	ldr	r3, [pc, #164]	; (800806c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007fce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007fd2:	d144      	bne.n	800805e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
        frequency = HSI_VALUE;
 8007fd4:	4b27      	ldr	r3, [pc, #156]	; (8008074 <RCCEx_GetSAIxPeriphCLKFreq+0x220>)
 8007fd6:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007fd8:	e041      	b.n	800805e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8007fda:	69bb      	ldr	r3, [r7, #24]
 8007fdc:	2b20      	cmp	r3, #32
 8007fde:	d003      	beq.n	8007fe8 <RCCEx_GetSAIxPeriphCLKFreq+0x194>
 8007fe0:	69bb      	ldr	r3, [r7, #24]
 8007fe2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007fe6:	d13a      	bne.n	800805e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 8007fe8:	4b20      	ldr	r3, [pc, #128]	; (800806c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007ff0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ff4:	d133      	bne.n	800805e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 8007ff6:	4b1d      	ldr	r3, [pc, #116]	; (800806c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007ff8:	695b      	ldr	r3, [r3, #20]
 8007ffa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d02d      	beq.n	800805e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 8008002:	4b1a      	ldr	r3, [pc, #104]	; (800806c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008004:	695b      	ldr	r3, [r3, #20]
 8008006:	091b      	lsrs	r3, r3, #4
 8008008:	f003 030f 	and.w	r3, r3, #15
 800800c:	3301      	adds	r3, #1
 800800e:	693a      	ldr	r2, [r7, #16]
 8008010:	fbb2 f3f3 	udiv	r3, r2, r3
 8008014:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8008016:	4b15      	ldr	r3, [pc, #84]	; (800806c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008018:	695b      	ldr	r3, [r3, #20]
 800801a:	0a1b      	lsrs	r3, r3, #8
 800801c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008020:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 8008022:	4b12      	ldr	r3, [pc, #72]	; (800806c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008024:	695b      	ldr	r3, [r3, #20]
 8008026:	0edb      	lsrs	r3, r3, #27
 8008028:	f003 031f 	and.w	r3, r3, #31
 800802c:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800802e:	697b      	ldr	r3, [r7, #20]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d10a      	bne.n	800804a <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8008034:	4b0d      	ldr	r3, [pc, #52]	; (800806c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008036:	695b      	ldr	r3, [r3, #20]
 8008038:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800803c:	2b00      	cmp	r3, #0
 800803e:	d002      	beq.n	8008046 <RCCEx_GetSAIxPeriphCLKFreq+0x1f2>
          {
            pllp = 17U;
 8008040:	2311      	movs	r3, #17
 8008042:	617b      	str	r3, [r7, #20]
 8008044:	e001      	b.n	800804a <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
          }
          else
          {
            pllp = 7U;
 8008046:	2307      	movs	r3, #7
 8008048:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800804a:	693b      	ldr	r3, [r7, #16]
 800804c:	68fa      	ldr	r2, [r7, #12]
 800804e:	fb03 f202 	mul.w	r2, r3, r2
 8008052:	697b      	ldr	r3, [r7, #20]
 8008054:	fbb2 f3f3 	udiv	r3, r2, r3
 8008058:	61fb      	str	r3, [r7, #28]
 800805a:	e000      	b.n	800805e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800805c:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 800805e:	69fb      	ldr	r3, [r7, #28]
}
 8008060:	4618      	mov	r0, r3
 8008062:	3724      	adds	r7, #36	; 0x24
 8008064:	46bd      	mov	sp, r7
 8008066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806a:	4770      	bx	lr
 800806c:	40021000 	.word	0x40021000
 8008070:	001fff68 	.word	0x001fff68
 8008074:	00f42400 	.word	0x00f42400

08008078 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b084      	sub	sp, #16
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008080:	2301      	movs	r3, #1
 8008082:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d06c      	beq.n	8008164 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008090:	b2db      	uxtb	r3, r3
 8008092:	2b00      	cmp	r3, #0
 8008094:	d106      	bne.n	80080a4 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	2200      	movs	r2, #0
 800809a:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800809e:	6878      	ldr	r0, [r7, #4]
 80080a0:	f7f9 fd7e 	bl	8001ba0 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2202      	movs	r2, #2
 80080a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	22ca      	movs	r2, #202	; 0xca
 80080b2:	625a      	str	r2, [r3, #36]	; 0x24
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	2253      	movs	r2, #83	; 0x53
 80080ba:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	f000 f9a0 	bl	8008402 <RTC_EnterInitMode>
 80080c2:	4603      	mov	r3, r0
 80080c4:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80080c6:	7bfb      	ldrb	r3, [r7, #15]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d14b      	bne.n	8008164 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	689b      	ldr	r3, [r3, #8]
 80080d2:	687a      	ldr	r2, [r7, #4]
 80080d4:	6812      	ldr	r2, [r2, #0]
 80080d6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80080da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80080de:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	6899      	ldr	r1, [r3, #8]
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	685a      	ldr	r2, [r3, #4]
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	691b      	ldr	r3, [r3, #16]
 80080ee:	431a      	orrs	r2, r3
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	699b      	ldr	r3, [r3, #24]
 80080f4:	431a      	orrs	r2, r3
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	430a      	orrs	r2, r1
 80080fc:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	687a      	ldr	r2, [r7, #4]
 8008104:	68d2      	ldr	r2, [r2, #12]
 8008106:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	6919      	ldr	r1, [r3, #16]
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	689b      	ldr	r3, [r3, #8]
 8008112:	041a      	lsls	r2, r3, #16
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	430a      	orrs	r2, r1
 800811a:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800811c:	6878      	ldr	r0, [r7, #4]
 800811e:	f000 f9a3 	bl	8008468 <RTC_ExitInitMode>
 8008122:	4603      	mov	r3, r0
 8008124:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8008126:	7bfb      	ldrb	r3, [r7, #15]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d11b      	bne.n	8008164 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f022 0203 	bic.w	r2, r2, #3
 800813a:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	69da      	ldr	r2, [r3, #28]
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	695b      	ldr	r3, [r3, #20]
 800814a:	431a      	orrs	r2, r3
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	430a      	orrs	r2, r1
 8008152:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	22ff      	movs	r2, #255	; 0xff
 800815a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2201      	movs	r2, #1
 8008160:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8008164:	7bfb      	ldrb	r3, [r7, #15]
}
 8008166:	4618      	mov	r0, r3
 8008168:	3710      	adds	r7, #16
 800816a:	46bd      	mov	sp, r7
 800816c:	bd80      	pop	{r7, pc}

0800816e <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800816e:	b590      	push	{r4, r7, lr}
 8008170:	b087      	sub	sp, #28
 8008172:	af00      	add	r7, sp, #0
 8008174:	60f8      	str	r0, [r7, #12]
 8008176:	60b9      	str	r1, [r7, #8]
 8008178:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008180:	2b01      	cmp	r3, #1
 8008182:	d101      	bne.n	8008188 <HAL_RTC_SetTime+0x1a>
 8008184:	2302      	movs	r3, #2
 8008186:	e08b      	b.n	80082a0 <HAL_RTC_SetTime+0x132>
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	2201      	movs	r2, #1
 800818c:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	2202      	movs	r2, #2
 8008194:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	22ca      	movs	r2, #202	; 0xca
 800819e:	625a      	str	r2, [r3, #36]	; 0x24
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	2253      	movs	r2, #83	; 0x53
 80081a6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80081a8:	68f8      	ldr	r0, [r7, #12]
 80081aa:	f000 f92a 	bl	8008402 <RTC_EnterInitMode>
 80081ae:	4603      	mov	r3, r0
 80081b0:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80081b2:	7cfb      	ldrb	r3, [r7, #19]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d163      	bne.n	8008280 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d126      	bne.n	800820c <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	689b      	ldr	r3, [r3, #8]
 80081c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d102      	bne.n	80081d2 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80081cc:	68bb      	ldr	r3, [r7, #8]
 80081ce:	2200      	movs	r2, #0
 80081d0:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80081d2:	68bb      	ldr	r3, [r7, #8]
 80081d4:	781b      	ldrb	r3, [r3, #0]
 80081d6:	4618      	mov	r0, r3
 80081d8:	f000 f984 	bl	80084e4 <RTC_ByteToBcd2>
 80081dc:	4603      	mov	r3, r0
 80081de:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80081e0:	68bb      	ldr	r3, [r7, #8]
 80081e2:	785b      	ldrb	r3, [r3, #1]
 80081e4:	4618      	mov	r0, r3
 80081e6:	f000 f97d 	bl	80084e4 <RTC_ByteToBcd2>
 80081ea:	4603      	mov	r3, r0
 80081ec:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80081ee:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80081f0:	68bb      	ldr	r3, [r7, #8]
 80081f2:	789b      	ldrb	r3, [r3, #2]
 80081f4:	4618      	mov	r0, r3
 80081f6:	f000 f975 	bl	80084e4 <RTC_ByteToBcd2>
 80081fa:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80081fc:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8008200:	68bb      	ldr	r3, [r7, #8]
 8008202:	78db      	ldrb	r3, [r3, #3]
 8008204:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008206:	4313      	orrs	r3, r2
 8008208:	617b      	str	r3, [r7, #20]
 800820a:	e018      	b.n	800823e <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	689b      	ldr	r3, [r3, #8]
 8008212:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008216:	2b00      	cmp	r3, #0
 8008218:	d102      	bne.n	8008220 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800821a:	68bb      	ldr	r3, [r7, #8]
 800821c:	2200      	movs	r2, #0
 800821e:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008220:	68bb      	ldr	r3, [r7, #8]
 8008222:	781b      	ldrb	r3, [r3, #0]
 8008224:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008226:	68bb      	ldr	r3, [r7, #8]
 8008228:	785b      	ldrb	r3, [r3, #1]
 800822a:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800822c:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800822e:	68ba      	ldr	r2, [r7, #8]
 8008230:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008232:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8008234:	68bb      	ldr	r3, [r7, #8]
 8008236:	78db      	ldrb	r3, [r3, #3]
 8008238:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800823a:	4313      	orrs	r3, r2
 800823c:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	681a      	ldr	r2, [r3, #0]
 8008242:	697b      	ldr	r3, [r7, #20]
 8008244:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8008248:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800824c:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	689a      	ldr	r2, [r3, #8]
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800825c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	6899      	ldr	r1, [r3, #8]
 8008264:	68bb      	ldr	r3, [r7, #8]
 8008266:	68da      	ldr	r2, [r3, #12]
 8008268:	68bb      	ldr	r3, [r7, #8]
 800826a:	691b      	ldr	r3, [r3, #16]
 800826c:	431a      	orrs	r2, r3
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	430a      	orrs	r2, r1
 8008274:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008276:	68f8      	ldr	r0, [r7, #12]
 8008278:	f000 f8f6 	bl	8008468 <RTC_ExitInitMode>
 800827c:	4603      	mov	r3, r0
 800827e:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	22ff      	movs	r2, #255	; 0xff
 8008286:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8008288:	7cfb      	ldrb	r3, [r7, #19]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d103      	bne.n	8008296 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	2201      	movs	r2, #1
 8008292:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	2200      	movs	r2, #0
 800829a:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800829e:	7cfb      	ldrb	r3, [r7, #19]
}
 80082a0:	4618      	mov	r0, r3
 80082a2:	371c      	adds	r7, #28
 80082a4:	46bd      	mov	sp, r7
 80082a6:	bd90      	pop	{r4, r7, pc}

080082a8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80082a8:	b590      	push	{r4, r7, lr}
 80082aa:	b087      	sub	sp, #28
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	60f8      	str	r0, [r7, #12]
 80082b0:	60b9      	str	r1, [r7, #8]
 80082b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80082ba:	2b01      	cmp	r3, #1
 80082bc:	d101      	bne.n	80082c2 <HAL_RTC_SetDate+0x1a>
 80082be:	2302      	movs	r3, #2
 80082c0:	e075      	b.n	80083ae <HAL_RTC_SetDate+0x106>
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	2201      	movs	r2, #1
 80082c6:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	2202      	movs	r2, #2
 80082ce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d10e      	bne.n	80082f6 <HAL_RTC_SetDate+0x4e>
 80082d8:	68bb      	ldr	r3, [r7, #8]
 80082da:	785b      	ldrb	r3, [r3, #1]
 80082dc:	f003 0310 	and.w	r3, r3, #16
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d008      	beq.n	80082f6 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80082e4:	68bb      	ldr	r3, [r7, #8]
 80082e6:	785b      	ldrb	r3, [r3, #1]
 80082e8:	f023 0310 	bic.w	r3, r3, #16
 80082ec:	b2db      	uxtb	r3, r3
 80082ee:	330a      	adds	r3, #10
 80082f0:	b2da      	uxtb	r2, r3
 80082f2:	68bb      	ldr	r3, [r7, #8]
 80082f4:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d11c      	bne.n	8008336 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80082fc:	68bb      	ldr	r3, [r7, #8]
 80082fe:	78db      	ldrb	r3, [r3, #3]
 8008300:	4618      	mov	r0, r3
 8008302:	f000 f8ef 	bl	80084e4 <RTC_ByteToBcd2>
 8008306:	4603      	mov	r3, r0
 8008308:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800830a:	68bb      	ldr	r3, [r7, #8]
 800830c:	785b      	ldrb	r3, [r3, #1]
 800830e:	4618      	mov	r0, r3
 8008310:	f000 f8e8 	bl	80084e4 <RTC_ByteToBcd2>
 8008314:	4603      	mov	r3, r0
 8008316:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8008318:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800831a:	68bb      	ldr	r3, [r7, #8]
 800831c:	789b      	ldrb	r3, [r3, #2]
 800831e:	4618      	mov	r0, r3
 8008320:	f000 f8e0 	bl	80084e4 <RTC_ByteToBcd2>
 8008324:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008326:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800832a:	68bb      	ldr	r3, [r7, #8]
 800832c:	781b      	ldrb	r3, [r3, #0]
 800832e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8008330:	4313      	orrs	r3, r2
 8008332:	617b      	str	r3, [r7, #20]
 8008334:	e00e      	b.n	8008354 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8008336:	68bb      	ldr	r3, [r7, #8]
 8008338:	78db      	ldrb	r3, [r3, #3]
 800833a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800833c:	68bb      	ldr	r3, [r7, #8]
 800833e:	785b      	ldrb	r3, [r3, #1]
 8008340:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8008342:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8008344:	68ba      	ldr	r2, [r7, #8]
 8008346:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8008348:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800834a:	68bb      	ldr	r3, [r7, #8]
 800834c:	781b      	ldrb	r3, [r3, #0]
 800834e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8008350:	4313      	orrs	r3, r2
 8008352:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	22ca      	movs	r2, #202	; 0xca
 800835a:	625a      	str	r2, [r3, #36]	; 0x24
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	2253      	movs	r2, #83	; 0x53
 8008362:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008364:	68f8      	ldr	r0, [r7, #12]
 8008366:	f000 f84c 	bl	8008402 <RTC_EnterInitMode>
 800836a:	4603      	mov	r3, r0
 800836c:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800836e:	7cfb      	ldrb	r3, [r7, #19]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d10c      	bne.n	800838e <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	681a      	ldr	r2, [r3, #0]
 8008378:	697b      	ldr	r3, [r7, #20]
 800837a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800837e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008382:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008384:	68f8      	ldr	r0, [r7, #12]
 8008386:	f000 f86f 	bl	8008468 <RTC_ExitInitMode>
 800838a:	4603      	mov	r3, r0
 800838c:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	22ff      	movs	r2, #255	; 0xff
 8008394:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8008396:	7cfb      	ldrb	r3, [r7, #19]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d103      	bne.n	80083a4 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	2201      	movs	r2, #1
 80083a0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	2200      	movs	r2, #0
 80083a8:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80083ac:	7cfb      	ldrb	r3, [r7, #19]
}
 80083ae:	4618      	mov	r0, r3
 80083b0:	371c      	adds	r7, #28
 80083b2:	46bd      	mov	sp, r7
 80083b4:	bd90      	pop	{r4, r7, pc}

080083b6 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80083b6:	b580      	push	{r7, lr}
 80083b8:	b084      	sub	sp, #16
 80083ba:	af00      	add	r7, sp, #0
 80083bc:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	68da      	ldr	r2, [r3, #12]
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80083cc:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 80083ce:	f7f9 ff3f 	bl	8002250 <HAL_GetTick>
 80083d2:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80083d4:	e009      	b.n	80083ea <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80083d6:	f7f9 ff3b 	bl	8002250 <HAL_GetTick>
 80083da:	4602      	mov	r2, r0
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	1ad3      	subs	r3, r2, r3
 80083e0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80083e4:	d901      	bls.n	80083ea <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80083e6:	2303      	movs	r3, #3
 80083e8:	e007      	b.n	80083fa <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	68db      	ldr	r3, [r3, #12]
 80083f0:	f003 0320 	and.w	r3, r3, #32
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d0ee      	beq.n	80083d6 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80083f8:	2300      	movs	r3, #0
}
 80083fa:	4618      	mov	r0, r3
 80083fc:	3710      	adds	r7, #16
 80083fe:	46bd      	mov	sp, r7
 8008400:	bd80      	pop	{r7, pc}

08008402 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8008402:	b580      	push	{r7, lr}
 8008404:	b084      	sub	sp, #16
 8008406:	af00      	add	r7, sp, #0
 8008408:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800840a:	2300      	movs	r3, #0
 800840c:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	68db      	ldr	r3, [r3, #12]
 8008414:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008418:	2b00      	cmp	r3, #0
 800841a:	d120      	bne.n	800845e <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	f04f 32ff 	mov.w	r2, #4294967295
 8008424:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8008426:	f7f9 ff13 	bl	8002250 <HAL_GetTick>
 800842a:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800842c:	e00d      	b.n	800844a <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800842e:	f7f9 ff0f 	bl	8002250 <HAL_GetTick>
 8008432:	4602      	mov	r2, r0
 8008434:	68bb      	ldr	r3, [r7, #8]
 8008436:	1ad3      	subs	r3, r2, r3
 8008438:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800843c:	d905      	bls.n	800844a <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800843e:	2303      	movs	r3, #3
 8008440:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	2203      	movs	r2, #3
 8008446:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	68db      	ldr	r3, [r3, #12]
 8008450:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008454:	2b00      	cmp	r3, #0
 8008456:	d102      	bne.n	800845e <RTC_EnterInitMode+0x5c>
 8008458:	7bfb      	ldrb	r3, [r7, #15]
 800845a:	2b03      	cmp	r3, #3
 800845c:	d1e7      	bne.n	800842e <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 800845e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008460:	4618      	mov	r0, r3
 8008462:	3710      	adds	r7, #16
 8008464:	46bd      	mov	sp, r7
 8008466:	bd80      	pop	{r7, pc}

08008468 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b084      	sub	sp, #16
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008470:	2300      	movs	r3, #0
 8008472:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8008474:	4b1a      	ldr	r3, [pc, #104]	; (80084e0 <RTC_ExitInitMode+0x78>)
 8008476:	68db      	ldr	r3, [r3, #12]
 8008478:	4a19      	ldr	r2, [pc, #100]	; (80084e0 <RTC_ExitInitMode+0x78>)
 800847a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800847e:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8008480:	4b17      	ldr	r3, [pc, #92]	; (80084e0 <RTC_ExitInitMode+0x78>)
 8008482:	689b      	ldr	r3, [r3, #8]
 8008484:	f003 0320 	and.w	r3, r3, #32
 8008488:	2b00      	cmp	r3, #0
 800848a:	d10c      	bne.n	80084a6 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800848c:	6878      	ldr	r0, [r7, #4]
 800848e:	f7ff ff92 	bl	80083b6 <HAL_RTC_WaitForSynchro>
 8008492:	4603      	mov	r3, r0
 8008494:	2b00      	cmp	r3, #0
 8008496:	d01e      	beq.n	80084d6 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2203      	movs	r2, #3
 800849c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80084a0:	2303      	movs	r3, #3
 80084a2:	73fb      	strb	r3, [r7, #15]
 80084a4:	e017      	b.n	80084d6 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80084a6:	4b0e      	ldr	r3, [pc, #56]	; (80084e0 <RTC_ExitInitMode+0x78>)
 80084a8:	689b      	ldr	r3, [r3, #8]
 80084aa:	4a0d      	ldr	r2, [pc, #52]	; (80084e0 <RTC_ExitInitMode+0x78>)
 80084ac:	f023 0320 	bic.w	r3, r3, #32
 80084b0:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80084b2:	6878      	ldr	r0, [r7, #4]
 80084b4:	f7ff ff7f 	bl	80083b6 <HAL_RTC_WaitForSynchro>
 80084b8:	4603      	mov	r3, r0
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d005      	beq.n	80084ca <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	2203      	movs	r2, #3
 80084c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80084c6:	2303      	movs	r3, #3
 80084c8:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80084ca:	4b05      	ldr	r3, [pc, #20]	; (80084e0 <RTC_ExitInitMode+0x78>)
 80084cc:	689b      	ldr	r3, [r3, #8]
 80084ce:	4a04      	ldr	r2, [pc, #16]	; (80084e0 <RTC_ExitInitMode+0x78>)
 80084d0:	f043 0320 	orr.w	r3, r3, #32
 80084d4:	6093      	str	r3, [r2, #8]
  }

  return status;
 80084d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80084d8:	4618      	mov	r0, r3
 80084da:	3710      	adds	r7, #16
 80084dc:	46bd      	mov	sp, r7
 80084de:	bd80      	pop	{r7, pc}
 80084e0:	40002800 	.word	0x40002800

080084e4 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80084e4:	b480      	push	{r7}
 80084e6:	b085      	sub	sp, #20
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	4603      	mov	r3, r0
 80084ec:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80084ee:	2300      	movs	r3, #0
 80084f0:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 80084f2:	79fb      	ldrb	r3, [r7, #7]
 80084f4:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 80084f6:	e005      	b.n	8008504 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	3301      	adds	r3, #1
 80084fc:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 80084fe:	7afb      	ldrb	r3, [r7, #11]
 8008500:	3b0a      	subs	r3, #10
 8008502:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8008504:	7afb      	ldrb	r3, [r7, #11]
 8008506:	2b09      	cmp	r3, #9
 8008508:	d8f6      	bhi.n	80084f8 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	b2db      	uxtb	r3, r3
 800850e:	011b      	lsls	r3, r3, #4
 8008510:	b2da      	uxtb	r2, r3
 8008512:	7afb      	ldrb	r3, [r7, #11]
 8008514:	4313      	orrs	r3, r2
 8008516:	b2db      	uxtb	r3, r3
}
 8008518:	4618      	mov	r0, r3
 800851a:	3714      	adds	r7, #20
 800851c:	46bd      	mov	sp, r7
 800851e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008522:	4770      	bx	lr

08008524 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b08a      	sub	sp, #40	; 0x28
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d101      	bne.n	8008536 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8008532:	2301      	movs	r3, #1
 8008534:	e078      	b.n	8008628 <HAL_SD_Init+0x104>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800853c:	b2db      	uxtb	r3, r3
 800853e:	2b00      	cmp	r3, #0
 8008540:	d105      	bne.n	800854e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	2200      	movs	r2, #0
 8008546:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8008548:	6878      	ldr	r0, [r7, #4]
 800854a:	f7f9 fb5b 	bl	8001c04 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	2203      	movs	r2, #3
 8008552:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8008556:	6878      	ldr	r0, [r7, #4]
 8008558:	f000 f86a 	bl	8008630 <HAL_SD_InitCard>
 800855c:	4603      	mov	r3, r0
 800855e:	2b00      	cmp	r3, #0
 8008560:	d001      	beq.n	8008566 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8008562:	2301      	movs	r3, #1
 8008564:	e060      	b.n	8008628 <HAL_SD_Init+0x104>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8008566:	f107 0308 	add.w	r3, r7, #8
 800856a:	4619      	mov	r1, r3
 800856c:	6878      	ldr	r0, [r7, #4]
 800856e:	f000 fdb5 	bl	80090dc <HAL_SD_GetCardStatus>
 8008572:	4603      	mov	r3, r0
 8008574:	2b00      	cmp	r3, #0
 8008576:	d001      	beq.n	800857c <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8008578:	2301      	movs	r3, #1
 800857a:	e055      	b.n	8008628 <HAL_SD_Init+0x104>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800857c:	7e3b      	ldrb	r3, [r7, #24]
 800857e:	b2db      	uxtb	r3, r3
 8008580:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8008582:	7e7b      	ldrb	r3, [r7, #25]
 8008584:	b2db      	uxtb	r3, r3
 8008586:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800858c:	2b01      	cmp	r3, #1
 800858e:	d10a      	bne.n	80085a6 <HAL_SD_Init+0x82>
 8008590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008592:	2b00      	cmp	r3, #0
 8008594:	d102      	bne.n	800859c <HAL_SD_Init+0x78>
 8008596:	6a3b      	ldr	r3, [r7, #32]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d004      	beq.n	80085a6 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80085a2:	65da      	str	r2, [r3, #92]	; 0x5c
 80085a4:	e00b      	b.n	80085be <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085aa:	2b01      	cmp	r3, #1
 80085ac:	d104      	bne.n	80085b8 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80085b4:	65da      	str	r2, [r3, #92]	; 0x5c
 80085b6:	e002      	b.n	80085be <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2200      	movs	r2, #0
 80085bc:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	68db      	ldr	r3, [r3, #12]
 80085c2:	4619      	mov	r1, r3
 80085c4:	6878      	ldr	r0, [r7, #4]
 80085c6:	f000 fe6b 	bl	80092a0 <HAL_SD_ConfigWideBusOperation>
 80085ca:	4603      	mov	r3, r0
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d001      	beq.n	80085d4 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 80085d0:	2301      	movs	r3, #1
 80085d2:	e029      	b.n	8008628 <HAL_SD_Init+0x104>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 80085d4:	f7f9 fe3c 	bl	8002250 <HAL_GetTick>
 80085d8:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 80085da:	e014      	b.n	8008606 <HAL_SD_Init+0xe2>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 80085dc:	f7f9 fe38 	bl	8002250 <HAL_GetTick>
 80085e0:	4602      	mov	r2, r0
 80085e2:	69fb      	ldr	r3, [r7, #28]
 80085e4:	1ad3      	subs	r3, r2, r3
 80085e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085ea:	d10c      	bne.n	8008606 <HAL_SD_Init+0xe2>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80085f2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2201      	movs	r2, #1
 80085f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2200      	movs	r2, #0
 8008600:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 8008602:	2303      	movs	r3, #3
 8008604:	e010      	b.n	8008628 <HAL_SD_Init+0x104>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8008606:	6878      	ldr	r0, [r7, #4]
 8008608:	f000 ff5e 	bl	80094c8 <HAL_SD_GetCardState>
 800860c:	4603      	mov	r3, r0
 800860e:	2b04      	cmp	r3, #4
 8008610:	d1e4      	bne.n	80085dc <HAL_SD_Init+0xb8>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	2200      	movs	r2, #0
 8008616:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2200      	movs	r2, #0
 800861c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2201      	movs	r2, #1
 8008622:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008626:	2300      	movs	r3, #0
}
 8008628:	4618      	mov	r0, r3
 800862a:	3728      	adds	r7, #40	; 0x28
 800862c:	46bd      	mov	sp, r7
 800862e:	bd80      	pop	{r7, pc}

08008630 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008630:	b5b0      	push	{r4, r5, r7, lr}
 8008632:	b08e      	sub	sp, #56	; 0x38
 8008634:	af04      	add	r7, sp, #16
 8008636:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8008638:	2300      	movs	r3, #0
 800863a:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800863c:	2300      	movs	r3, #0
 800863e:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8008640:	2300      	movs	r3, #0
 8008642:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8008644:	2300      	movs	r3, #0
 8008646:	617b      	str	r3, [r7, #20]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8008648:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800864c:	f7fe fafa 	bl	8006c44 <HAL_RCCEx_GetPeriphCLKFreq>
 8008650:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 8008652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008654:	2b00      	cmp	r3, #0
 8008656:	d109      	bne.n	800866c <HAL_SD_InitCard+0x3c>
  {
      hsd->State = HAL_SD_STATE_READY;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	2201      	movs	r2, #1
 800865c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008666:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008668:	2301      	movs	r3, #1
 800866a:	e079      	b.n	8008760 <HAL_SD_InitCard+0x130>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk / SD_INIT_FREQ) - 2U);
#else
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800866c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800866e:	0a1b      	lsrs	r3, r3, #8
 8008670:	4a3d      	ldr	r2, [pc, #244]	; (8008768 <HAL_SD_InitCard+0x138>)
 8008672:	fba2 2303 	umull	r2, r3, r2, r3
 8008676:	091b      	lsrs	r3, r3, #4
 8008678:	61bb      	str	r3, [r7, #24]
#endif

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  Init.Transceiver = hsd->Init.Transceiver;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	699b      	ldr	r3, [r3, #24]
 800867e:	61fb      	str	r3, [r7, #28]
  if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	699b      	ldr	r3, [r3, #24]
 8008684:	2b01      	cmp	r3, #1
 8008686:	d107      	bne.n	8008698 <HAL_SD_InitCard+0x68>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	681a      	ldr	r2, [r3, #0]
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	f042 0210 	orr.w	r2, r2, #16
 8008696:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681d      	ldr	r5, [r3, #0]
 800869c:	466c      	mov	r4, sp
 800869e:	f107 0314 	add.w	r3, r7, #20
 80086a2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80086a6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80086aa:	f107 0308 	add.w	r3, r7, #8
 80086ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80086b0:	4628      	mov	r0, r5
 80086b2:	f002 fc93 	bl	800afdc <SDMMC_Init>
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	4618      	mov	r0, r3
 80086bc:	f002 fcd6 	bl	800b06c <SDMMC_PowerState_ON>
  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 80086c0:	69bb      	ldr	r3, [r7, #24]
 80086c2:	005b      	lsls	r3, r3, #1
 80086c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80086ca:	627b      	str	r3, [r7, #36]	; 0x24
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 80086cc:	4a27      	ldr	r2, [pc, #156]	; (800876c <HAL_SD_InitCard+0x13c>)
 80086ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80086d4:	3301      	adds	r3, #1
 80086d6:	4618      	mov	r0, r3
 80086d8:	f7f9 fdc6 	bl	8002268 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80086dc:	6878      	ldr	r0, [r7, #4]
 80086de:	f000 ffd3 	bl	8009688 <SD_PowerON>
 80086e2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80086e4:	6a3b      	ldr	r3, [r7, #32]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d00b      	beq.n	8008702 <HAL_SD_InitCard+0xd2>
  {
    hsd->State = HAL_SD_STATE_READY;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	2201      	movs	r2, #1
 80086ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80086f6:	6a3b      	ldr	r3, [r7, #32]
 80086f8:	431a      	orrs	r2, r3
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80086fe:	2301      	movs	r3, #1
 8008700:	e02e      	b.n	8008760 <HAL_SD_InitCard+0x130>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8008702:	6878      	ldr	r0, [r7, #4]
 8008704:	f000 ff00 	bl	8009508 <SD_InitCard>
 8008708:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800870a:	6a3b      	ldr	r3, [r7, #32]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d00b      	beq.n	8008728 <HAL_SD_InitCard+0xf8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2201      	movs	r2, #1
 8008714:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800871c:	6a3b      	ldr	r3, [r7, #32]
 800871e:	431a      	orrs	r2, r3
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008724:	2301      	movs	r3, #1
 8008726:	e01b      	b.n	8008760 <HAL_SD_InitCard+0x130>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008730:	4618      	mov	r0, r3
 8008732:	f002 fd31 	bl	800b198 <SDMMC_CmdBlockLength>
 8008736:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008738:	6a3b      	ldr	r3, [r7, #32]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d00f      	beq.n	800875e <HAL_SD_InitCard+0x12e>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	4a0b      	ldr	r2, [pc, #44]	; (8008770 <HAL_SD_InitCard+0x140>)
 8008744:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800874a:	6a3b      	ldr	r3, [r7, #32]
 800874c:	431a      	orrs	r2, r3
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2201      	movs	r2, #1
 8008756:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800875a:	2301      	movs	r3, #1
 800875c:	e000      	b.n	8008760 <HAL_SD_InitCard+0x130>
  }

  return HAL_OK;
 800875e:	2300      	movs	r3, #0
}
 8008760:	4618      	mov	r0, r3
 8008762:	3728      	adds	r7, #40	; 0x28
 8008764:	46bd      	mov	sp, r7
 8008766:	bdb0      	pop	{r4, r5, r7, pc}
 8008768:	014f8b59 	.word	0x014f8b59
 800876c:	00012110 	.word	0x00012110
 8008770:	1fe00fff 	.word	0x1fe00fff

08008774 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd Block Address from where data is to be read
  * @param  NumberOfBlocks Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8008774:	b580      	push	{r7, lr}
 8008776:	b08c      	sub	sp, #48	; 0x30
 8008778:	af00      	add	r7, sp, #0
 800877a:	60f8      	str	r0, [r7, #12]
 800877c:	60b9      	str	r1, [r7, #8]
 800877e:	607a      	str	r2, [r7, #4]
 8008780:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8008786:	68bb      	ldr	r3, [r7, #8]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d107      	bne.n	800879c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008790:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008798:	2301      	movs	r3, #1
 800879a:	e08d      	b.n	80088b8 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80087a2:	b2db      	uxtb	r3, r3
 80087a4:	2b01      	cmp	r3, #1
 80087a6:	f040 8086 	bne.w	80088b6 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	2200      	movs	r2, #0
 80087ae:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80087b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80087b2:	683b      	ldr	r3, [r7, #0]
 80087b4:	441a      	add	r2, r3
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087ba:	429a      	cmp	r2, r3
 80087bc:	d907      	bls.n	80087ce <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087c2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80087ca:	2301      	movs	r3, #1
 80087cc:	e074      	b.n	80088b8 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	2203      	movs	r2, #3
 80087d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	2200      	movs	r2, #0
 80087dc:	62da      	str	r2, [r3, #44]	; 0x2c
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
#else
      hsd->pRxBuffPtr = pData;
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	68ba      	ldr	r2, [r7, #8]
 80087e2:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	025a      	lsls	r2, r3, #9
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087f0:	2b01      	cmp	r3, #1
 80087f2:	d002      	beq.n	80087fa <HAL_SD_ReadBlocks_DMA+0x86>
      {
        add *= 512U;
 80087f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087f6:	025b      	lsls	r3, r3, #9
 80087f8:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80087fa:	f04f 33ff 	mov.w	r3, #4294967295
 80087fe:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	025b      	lsls	r3, r3, #9
 8008804:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008806:	2390      	movs	r3, #144	; 0x90
 8008808:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800880a:	2302      	movs	r3, #2
 800880c:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800880e:	2300      	movs	r3, #0
 8008810:	623b      	str	r3, [r7, #32]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      config.DPSM          = SDMMC_DPSM_DISABLE;
 8008812:	2300      	movs	r3, #0
 8008814:	627b      	str	r3, [r7, #36]	; 0x24
#else
      config.DPSM          = SDMMC_DPSM_ENABLE;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	f107 0210 	add.w	r2, r7, #16
 800881e:	4611      	mov	r1, r2
 8008820:	4618      	mov	r0, r3
 8008822:	f002 fc8d 	bl	800b140 <SDMMC_ConfigData>

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)

      __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	68da      	ldr	r2, [r3, #12]
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008834:	60da      	str	r2, [r3, #12]
      hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	68ba      	ldr	r2, [r7, #8]
 800883c:	659a      	str	r2, [r3, #88]	; 0x58
      hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	2201      	movs	r2, #1
 8008844:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	2b01      	cmp	r3, #1
 800884a:	d90a      	bls.n	8008862 <HAL_SD_ReadBlocks_DMA+0xee>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	2282      	movs	r2, #130	; 0x82
 8008850:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008858:	4618      	mov	r0, r3
 800885a:	f002 fce3 	bl	800b224 <SDMMC_CmdReadMultiBlock>
 800885e:	62f8      	str	r0, [r7, #44]	; 0x2c
 8008860:	e009      	b.n	8008876 <HAL_SD_ReadBlocks_DMA+0x102>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	2281      	movs	r2, #129	; 0x81
 8008866:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800886e:	4618      	mov	r0, r3
 8008870:	f002 fcb5 	bl	800b1de <SDMMC_CmdReadSingleBlock>
 8008874:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8008876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008878:	2b00      	cmp	r3, #0
 800887a:	d012      	beq.n	80088a2 <HAL_SD_ReadBlocks_DMA+0x12e>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	4a0f      	ldr	r2, [pc, #60]	; (80088c0 <HAL_SD_ReadBlocks_DMA+0x14c>)
 8008882:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800888a:	431a      	orrs	r2, r3
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	2201      	movs	r2, #1
 8008894:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	2200      	movs	r2, #0
 800889c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800889e:	2301      	movs	r3, #1
 80088a0:	e00a      	b.n	80088b8 <HAL_SD_ReadBlocks_DMA+0x144>
      }

      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 80088b0:	63da      	str	r2, [r3, #60]	; 0x3c

      return HAL_OK;
 80088b2:	2300      	movs	r3, #0
 80088b4:	e000      	b.n	80088b8 <HAL_SD_ReadBlocks_DMA+0x144>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 80088b6:	2302      	movs	r3, #2
  }
}
 80088b8:	4618      	mov	r0, r3
 80088ba:	3730      	adds	r7, #48	; 0x30
 80088bc:	46bd      	mov	sp, r7
 80088be:	bd80      	pop	{r7, pc}
 80088c0:	1fe00fff 	.word	0x1fe00fff

080088c4 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd Block Address where data will be written
  * @param  NumberOfBlocks Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b08c      	sub	sp, #48	; 0x30
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	60f8      	str	r0, [r7, #12]
 80088cc:	60b9      	str	r1, [r7, #8]
 80088ce:	607a      	str	r2, [r7, #4]
 80088d0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80088d6:	68bb      	ldr	r3, [r7, #8]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d107      	bne.n	80088ec <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088e0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80088e8:	2301      	movs	r3, #1
 80088ea:	e08d      	b.n	8008a08 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80088f2:	b2db      	uxtb	r3, r3
 80088f4:	2b01      	cmp	r3, #1
 80088f6:	f040 8086 	bne.w	8008a06 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	2200      	movs	r2, #0
 80088fe:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008900:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008902:	683b      	ldr	r3, [r7, #0]
 8008904:	441a      	add	r2, r3
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800890a:	429a      	cmp	r2, r3
 800890c:	d907      	bls.n	800891e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008912:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800891a:	2301      	movs	r3, #1
 800891c:	e074      	b.n	8008a08 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	2203      	movs	r2, #3
 8008922:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	2200      	movs	r2, #0
 800892c:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    hsd->pTxBuffPtr = pData;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	68ba      	ldr	r2, [r7, #8]
 8008932:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	025a      	lsls	r2, r3, #9
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008940:	2b01      	cmp	r3, #1
 8008942:	d002      	beq.n	800894a <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 8008944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008946:	025b      	lsls	r3, r3, #9
 8008948:	62bb      	str	r3, [r7, #40]	; 0x28
    }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800894a:	f04f 33ff 	mov.w	r3, #4294967295
 800894e:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	025b      	lsls	r3, r3, #9
 8008954:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008956:	2390      	movs	r3, #144	; 0x90
 8008958:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800895a:	2300      	movs	r3, #0
 800895c:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800895e:	2300      	movs	r3, #0
 8008960:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8008962:	2300      	movs	r3, #0
 8008964:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	f107 0210 	add.w	r2, r7, #16
 800896e:	4611      	mov	r1, r2
 8008970:	4618      	mov	r0, r3
 8008972:	f002 fbe5 	bl	800b140 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	68da      	ldr	r2, [r3, #12]
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008984:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	68ba      	ldr	r2, [r7, #8]
 800898c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	2201      	movs	r2, #1
 8008994:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8008996:	683b      	ldr	r3, [r7, #0]
 8008998:	2b01      	cmp	r3, #1
 800899a:	d90a      	bls.n	80089b2 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	22a0      	movs	r2, #160	; 0xa0
 80089a0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80089a8:	4618      	mov	r0, r3
 80089aa:	f002 fc81 	bl	800b2b0 <SDMMC_CmdWriteMultiBlock>
 80089ae:	62f8      	str	r0, [r7, #44]	; 0x2c
 80089b0:	e009      	b.n	80089c6 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	2290      	movs	r2, #144	; 0x90
 80089b6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80089be:	4618      	mov	r0, r3
 80089c0:	f002 fc53 	bl	800b26a <SDMMC_CmdWriteSingleBlock>
 80089c4:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80089c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d012      	beq.n	80089f2 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	4a0f      	ldr	r2, [pc, #60]	; (8008a10 <HAL_SD_WriteBlocks_DMA+0x14c>)
 80089d2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80089d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089da:	431a      	orrs	r2, r3
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	2201      	movs	r2, #1
 80089e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	2200      	movs	r2, #0
 80089ec:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80089ee:	2301      	movs	r3, #1
 80089f0:	e00a      	b.n	8008a08 <HAL_SD_WriteBlocks_DMA+0x144>

      /* Enable SD Error interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));
#else
      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 8008a00:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      return HAL_OK;
 8008a02:	2300      	movs	r3, #0
 8008a04:	e000      	b.n	8008a08 <HAL_SD_WriteBlocks_DMA+0x144>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 8008a06:	2302      	movs	r3, #2
  }
}
 8008a08:	4618      	mov	r0, r3
 8008a0a:	3730      	adds	r7, #48	; 0x30
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	bd80      	pop	{r7, pc}
 8008a10:	1fe00fff 	.word	0x1fe00fff

08008a14 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b084      	sub	sp, #16
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a20:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d008      	beq.n	8008a42 <HAL_SD_IRQHandler+0x2e>
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	f003 0308 	and.w	r3, r3, #8
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d003      	beq.n	8008a42 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8008a3a:	6878      	ldr	r0, [r7, #4]
 8008a3c:	f001 f98e 	bl	8009d5c <SD_Read_IT>
 8008a40:	e199      	b.n	8008d76 <HAL_SD_IRQHandler+0x362>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	f000 80ae 	beq.w	8008bae <HAL_SD_IRQHandler+0x19a>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008a5a:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a62:	687a      	ldr	r2, [r7, #4]
 8008a64:	6812      	ldr	r2, [r2, #0]
 8008a66:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 8008a6a:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8008a6e:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8008a7e:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	68da      	ldr	r2, [r3, #12]
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008a8e:	60da      	str	r2, [r3, #12]
#else
    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if((context & SD_CONTEXT_IT) != 0U)
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	f003 0308 	and.w	r3, r3, #8
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d038      	beq.n	8008b0c <HAL_SD_IRQHandler+0xf8>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	f003 0302 	and.w	r3, r3, #2
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d104      	bne.n	8008aae <HAL_SD_IRQHandler+0x9a>
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	f003 0320 	and.w	r3, r3, #32
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d011      	beq.n	8008ad2 <HAL_SD_IRQHandler+0xbe>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	f002 fc20 	bl	800b2f8 <SDMMC_CmdStopTransfer>
 8008ab8:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8008aba:	68bb      	ldr	r3, [r7, #8]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d008      	beq.n	8008ad2 <HAL_SD_IRQHandler+0xbe>
        {
          hsd->ErrorCode |= errorstate;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ac4:	68bb      	ldr	r3, [r7, #8]
 8008ac6:	431a      	orrs	r2, r3
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8008acc:	6878      	ldr	r0, [r7, #4]
 8008ace:	f000 f957 	bl	8008d80 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	4a90      	ldr	r2, [pc, #576]	; (8008d18 <HAL_SD_IRQHandler+0x304>)
 8008ad8:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	2201      	movs	r2, #1
 8008ade:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	f003 0301 	and.w	r3, r3, #1
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d104      	bne.n	8008afc <HAL_SD_IRQHandler+0xe8>
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	f003 0302 	and.w	r3, r3, #2
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d003      	beq.n	8008b04 <HAL_SD_IRQHandler+0xf0>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8008afc:	6878      	ldr	r0, [r7, #4]
 8008afe:	f004 fc23 	bl	800d348 <HAL_SD_RxCpltCallback>
 8008b02:	e138      	b.n	8008d76 <HAL_SD_IRQHandler+0x362>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8008b04:	6878      	ldr	r0, [r7, #4]
 8008b06:	f004 fc15 	bl	800d334 <HAL_SD_TxCpltCallback>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else
  {
    /* Nothing to do */
  }
}
 8008b0a:	e134      	b.n	8008d76 <HAL_SD_IRQHandler+0x362>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	f000 812f 	beq.w	8008d76 <HAL_SD_IRQHandler+0x362>
      hsd->Instance->DLEN = 0;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	2200      	movs	r2, #0
 8008b26:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	651a      	str	r2, [r3, #80]	; 0x50
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	f003 0302 	and.w	r3, r3, #2
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d104      	bne.n	8008b44 <HAL_SD_IRQHandler+0x130>
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	f003 0320 	and.w	r3, r3, #32
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d011      	beq.n	8008b68 <HAL_SD_IRQHandler+0x154>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	4618      	mov	r0, r3
 8008b4a:	f002 fbd5 	bl	800b2f8 <SDMMC_CmdStopTransfer>
 8008b4e:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8008b50:	68bb      	ldr	r3, [r7, #8]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d008      	beq.n	8008b68 <HAL_SD_IRQHandler+0x154>
          hsd->ErrorCode |= errorstate;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b5a:	68bb      	ldr	r3, [r7, #8]
 8008b5c:	431a      	orrs	r2, r3
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8008b62:	6878      	ldr	r0, [r7, #4]
 8008b64:	f000 f90c 	bl	8008d80 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2201      	movs	r2, #1
 8008b6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	2200      	movs	r2, #0
 8008b74:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	f003 0310 	and.w	r3, r3, #16
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d104      	bne.n	8008b8a <HAL_SD_IRQHandler+0x176>
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	f003 0320 	and.w	r3, r3, #32
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d002      	beq.n	8008b90 <HAL_SD_IRQHandler+0x17c>
        HAL_SD_TxCpltCallback(hsd);
 8008b8a:	6878      	ldr	r0, [r7, #4]
 8008b8c:	f004 fbd2 	bl	800d334 <HAL_SD_TxCpltCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	f003 0301 	and.w	r3, r3, #1
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d105      	bne.n	8008ba6 <HAL_SD_IRQHandler+0x192>
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	f003 0302 	and.w	r3, r3, #2
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	f000 80e8 	beq.w	8008d76 <HAL_SD_IRQHandler+0x362>
        HAL_SD_RxCpltCallback(hsd);
 8008ba6:	6878      	ldr	r0, [r7, #4]
 8008ba8:	f004 fbce 	bl	800d348 <HAL_SD_RxCpltCallback>
}
 8008bac:	e0e3      	b.n	8008d76 <HAL_SD_IRQHandler+0x362>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d008      	beq.n	8008bce <HAL_SD_IRQHandler+0x1ba>
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	f003 0308 	and.w	r3, r3, #8
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d003      	beq.n	8008bce <HAL_SD_IRQHandler+0x1ba>
    SD_Write_IT(hsd);
 8008bc6:	6878      	ldr	r0, [r7, #4]
 8008bc8:	f001 f919 	bl	8009dfe <SD_Write_IT>
 8008bcc:	e0d3      	b.n	8008d76 <HAL_SD_IRQHandler+0x362>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bd4:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	f000 809f 	beq.w	8008d1c <HAL_SD_IRQHandler+0x308>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008be4:	f003 0302 	and.w	r3, r3, #2
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d005      	beq.n	8008bf8 <HAL_SD_IRQHandler+0x1e4>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bf0:	f043 0202 	orr.w	r2, r3, #2
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bfe:	f003 0308 	and.w	r3, r3, #8
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d005      	beq.n	8008c12 <HAL_SD_IRQHandler+0x1fe>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c0a:	f043 0208 	orr.w	r2, r3, #8
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c18:	f003 0320 	and.w	r3, r3, #32
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d005      	beq.n	8008c2c <HAL_SD_IRQHandler+0x218>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c24:	f043 0220 	orr.w	r2, r3, #32
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c32:	f003 0310 	and.w	r3, r3, #16
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d005      	beq.n	8008c46 <HAL_SD_IRQHandler+0x232>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c3e:	f043 0210 	orr.w	r2, r3, #16
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	4a33      	ldr	r2, [pc, #204]	; (8008d18 <HAL_SD_IRQHandler+0x304>)
 8008c4c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8008c5c:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	68da      	ldr	r2, [r3, #12]
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008c6c:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008c7c:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	68da      	ldr	r2, [r3, #12]
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008c8c:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	4618      	mov	r0, r3
 8008c94:	f002 fb30 	bl	800b2f8 <SDMMC_CmdStopTransfer>
 8008c98:	4602      	mov	r2, r0
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c9e:	431a      	orrs	r2, r3
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	68da      	ldr	r2, [r3, #12]
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008cb2:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008cbc:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	f003 0308 	and.w	r3, r3, #8
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d00a      	beq.n	8008cde <HAL_SD_IRQHandler+0x2ca>
      hsd->State = HAL_SD_STATE_READY;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	2201      	movs	r2, #1
 8008ccc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8008cd6:	6878      	ldr	r0, [r7, #4]
 8008cd8:	f000 f852 	bl	8008d80 <HAL_SD_ErrorCallback>
}
 8008cdc:	e04b      	b.n	8008d76 <HAL_SD_IRQHandler+0x362>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d046      	beq.n	8008d76 <HAL_SD_IRQHandler+0x362>
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d042      	beq.n	8008d76 <HAL_SD_IRQHandler+0x362>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8008cfe:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	2200      	movs	r2, #0
 8008d06:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2201      	movs	r2, #1
 8008d0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_ErrorCallback(hsd);
 8008d10:	6878      	ldr	r0, [r7, #4]
 8008d12:	f000 f835 	bl	8008d80 <HAL_SD_ErrorCallback>
}
 8008d16:	e02e      	b.n	8008d76 <HAL_SD_IRQHandler+0x362>
 8008d18:	18000f3a 	.word	0x18000f3a
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d025      	beq.n	8008d76 <HAL_SD_IRQHandler+0x362>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d32:	639a      	str	r2, [r3, #56]	; 0x38
    if(READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d3a:	f003 0304 	and.w	r3, r3, #4
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d10c      	bne.n	8008d5c <HAL_SD_IRQHandler+0x348>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	f003 0320 	and.w	r3, r3, #32
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d003      	beq.n	8008d54 <HAL_SD_IRQHandler+0x340>
        HAL_SDEx_Write_DMADoubleBuffer1CpltCallback(hsd);
 8008d4c:	6878      	ldr	r0, [r7, #4]
 8008d4e:	f001 f8d4 	bl	8009efa <HAL_SDEx_Write_DMADoubleBuffer1CpltCallback>
}
 8008d52:	e010      	b.n	8008d76 <HAL_SD_IRQHandler+0x362>
        HAL_SDEx_Read_DMADoubleBuffer1CpltCallback(hsd);
 8008d54:	6878      	ldr	r0, [r7, #4]
 8008d56:	f001 f8bc 	bl	8009ed2 <HAL_SDEx_Read_DMADoubleBuffer1CpltCallback>
}
 8008d5a:	e00c      	b.n	8008d76 <HAL_SD_IRQHandler+0x362>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	f003 0320 	and.w	r3, r3, #32
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d003      	beq.n	8008d6e <HAL_SD_IRQHandler+0x35a>
        HAL_SDEx_Write_DMADoubleBuffer0CpltCallback(hsd);
 8008d66:	6878      	ldr	r0, [r7, #4]
 8008d68:	f001 f8bd 	bl	8009ee6 <HAL_SDEx_Write_DMADoubleBuffer0CpltCallback>
}
 8008d6c:	e003      	b.n	8008d76 <HAL_SD_IRQHandler+0x362>
        HAL_SDEx_Read_DMADoubleBuffer0CpltCallback(hsd);
 8008d6e:	6878      	ldr	r0, [r7, #4]
 8008d70:	f001 f8a5 	bl	8009ebe <HAL_SDEx_Read_DMADoubleBuffer0CpltCallback>
}
 8008d74:	e7ff      	b.n	8008d76 <HAL_SD_IRQHandler+0x362>
 8008d76:	bf00      	nop
 8008d78:	3710      	adds	r7, #16
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	bd80      	pop	{r7, pc}
 8008d7e:	bf00      	nop

08008d80 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8008d80:	b480      	push	{r7}
 8008d82:	b083      	sub	sp, #12
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8008d88:	bf00      	nop
 8008d8a:	370c      	adds	r7, #12
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d92:	4770      	bx	lr

08008d94 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8008d94:	b480      	push	{r7}
 8008d96:	b083      	sub	sp, #12
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
 8008d9c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008da2:	0f9b      	lsrs	r3, r3, #30
 8008da4:	b2da      	uxtb	r2, r3
 8008da6:	683b      	ldr	r3, [r7, #0]
 8008da8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008dae:	0e9b      	lsrs	r3, r3, #26
 8008db0:	b2db      	uxtb	r3, r3
 8008db2:	f003 030f 	and.w	r3, r3, #15
 8008db6:	b2da      	uxtb	r2, r3
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008dc0:	0e1b      	lsrs	r3, r3, #24
 8008dc2:	b2db      	uxtb	r3, r3
 8008dc4:	f003 0303 	and.w	r3, r3, #3
 8008dc8:	b2da      	uxtb	r2, r3
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008dd2:	0c1b      	lsrs	r3, r3, #16
 8008dd4:	b2da      	uxtb	r2, r3
 8008dd6:	683b      	ldr	r3, [r7, #0]
 8008dd8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008dde:	0a1b      	lsrs	r3, r3, #8
 8008de0:	b2da      	uxtb	r2, r3
 8008de2:	683b      	ldr	r3, [r7, #0]
 8008de4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008dea:	b2da      	uxtb	r2, r3
 8008dec:	683b      	ldr	r3, [r7, #0]
 8008dee:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008df4:	0d1b      	lsrs	r3, r3, #20
 8008df6:	b29a      	uxth	r2, r3
 8008df8:	683b      	ldr	r3, [r7, #0]
 8008dfa:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008e00:	0c1b      	lsrs	r3, r3, #16
 8008e02:	b2db      	uxtb	r3, r3
 8008e04:	f003 030f 	and.w	r3, r3, #15
 8008e08:	b2da      	uxtb	r2, r3
 8008e0a:	683b      	ldr	r3, [r7, #0]
 8008e0c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008e12:	0bdb      	lsrs	r3, r3, #15
 8008e14:	b2db      	uxtb	r3, r3
 8008e16:	f003 0301 	and.w	r3, r3, #1
 8008e1a:	b2da      	uxtb	r2, r3
 8008e1c:	683b      	ldr	r3, [r7, #0]
 8008e1e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008e24:	0b9b      	lsrs	r3, r3, #14
 8008e26:	b2db      	uxtb	r3, r3
 8008e28:	f003 0301 	and.w	r3, r3, #1
 8008e2c:	b2da      	uxtb	r2, r3
 8008e2e:	683b      	ldr	r3, [r7, #0]
 8008e30:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008e36:	0b5b      	lsrs	r3, r3, #13
 8008e38:	b2db      	uxtb	r3, r3
 8008e3a:	f003 0301 	and.w	r3, r3, #1
 8008e3e:	b2da      	uxtb	r2, r3
 8008e40:	683b      	ldr	r3, [r7, #0]
 8008e42:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008e48:	0b1b      	lsrs	r3, r3, #12
 8008e4a:	b2db      	uxtb	r3, r3
 8008e4c:	f003 0301 	and.w	r3, r3, #1
 8008e50:	b2da      	uxtb	r2, r3
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8008e56:	683b      	ldr	r3, [r7, #0]
 8008e58:	2200      	movs	r2, #0
 8008e5a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d163      	bne.n	8008f2c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008e68:	009a      	lsls	r2, r3, #2
 8008e6a:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008e6e:	4013      	ands	r3, r2
 8008e70:	687a      	ldr	r2, [r7, #4]
 8008e72:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008e74:	0f92      	lsrs	r2, r2, #30
 8008e76:	431a      	orrs	r2, r3
 8008e78:	683b      	ldr	r3, [r7, #0]
 8008e7a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008e80:	0edb      	lsrs	r3, r3, #27
 8008e82:	b2db      	uxtb	r3, r3
 8008e84:	f003 0307 	and.w	r3, r3, #7
 8008e88:	b2da      	uxtb	r2, r3
 8008e8a:	683b      	ldr	r3, [r7, #0]
 8008e8c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008e92:	0e1b      	lsrs	r3, r3, #24
 8008e94:	b2db      	uxtb	r3, r3
 8008e96:	f003 0307 	and.w	r3, r3, #7
 8008e9a:	b2da      	uxtb	r2, r3
 8008e9c:	683b      	ldr	r3, [r7, #0]
 8008e9e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008ea4:	0d5b      	lsrs	r3, r3, #21
 8008ea6:	b2db      	uxtb	r3, r3
 8008ea8:	f003 0307 	and.w	r3, r3, #7
 8008eac:	b2da      	uxtb	r2, r3
 8008eae:	683b      	ldr	r3, [r7, #0]
 8008eb0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008eb6:	0c9b      	lsrs	r3, r3, #18
 8008eb8:	b2db      	uxtb	r3, r3
 8008eba:	f003 0307 	and.w	r3, r3, #7
 8008ebe:	b2da      	uxtb	r2, r3
 8008ec0:	683b      	ldr	r3, [r7, #0]
 8008ec2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008ec8:	0bdb      	lsrs	r3, r3, #15
 8008eca:	b2db      	uxtb	r3, r3
 8008ecc:	f003 0307 	and.w	r3, r3, #7
 8008ed0:	b2da      	uxtb	r2, r3
 8008ed2:	683b      	ldr	r3, [r7, #0]
 8008ed4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8008ed6:	683b      	ldr	r3, [r7, #0]
 8008ed8:	691b      	ldr	r3, [r3, #16]
 8008eda:	1c5a      	adds	r2, r3, #1
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8008ee0:	683b      	ldr	r3, [r7, #0]
 8008ee2:	7e1b      	ldrb	r3, [r3, #24]
 8008ee4:	b2db      	uxtb	r3, r3
 8008ee6:	f003 0307 	and.w	r3, r3, #7
 8008eea:	3302      	adds	r3, #2
 8008eec:	2201      	movs	r2, #1
 8008eee:	fa02 f303 	lsl.w	r3, r2, r3
 8008ef2:	687a      	ldr	r2, [r7, #4]
 8008ef4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8008ef6:	fb03 f202 	mul.w	r2, r3, r2
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8008efe:	683b      	ldr	r3, [r7, #0]
 8008f00:	7a1b      	ldrb	r3, [r3, #8]
 8008f02:	b2db      	uxtb	r3, r3
 8008f04:	f003 030f 	and.w	r3, r3, #15
 8008f08:	2201      	movs	r2, #1
 8008f0a:	409a      	lsls	r2, r3
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f14:	687a      	ldr	r2, [r7, #4]
 8008f16:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8008f18:	0a52      	lsrs	r2, r2, #9
 8008f1a:	fb03 f202 	mul.w	r2, r3, r2
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008f28:	659a      	str	r2, [r3, #88]	; 0x58
 8008f2a:	e031      	b.n	8008f90 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f30:	2b01      	cmp	r3, #1
 8008f32:	d11d      	bne.n	8008f70 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008f38:	041b      	lsls	r3, r3, #16
 8008f3a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008f42:	0c1b      	lsrs	r3, r3, #16
 8008f44:	431a      	orrs	r2, r3
 8008f46:	683b      	ldr	r3, [r7, #0]
 8008f48:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8008f4a:	683b      	ldr	r3, [r7, #0]
 8008f4c:	691b      	ldr	r3, [r3, #16]
 8008f4e:	3301      	adds	r3, #1
 8008f50:	029a      	lsls	r2, r3, #10
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008f64:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	659a      	str	r2, [r3, #88]	; 0x58
 8008f6e:	e00f      	b.n	8008f90 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	4a58      	ldr	r2, [pc, #352]	; (80090d8 <HAL_SD_GetCardCSD+0x344>)
 8008f76:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f7c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2201      	movs	r2, #1
 8008f88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008f8c:	2301      	movs	r3, #1
 8008f8e:	e09d      	b.n	80090cc <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008f94:	0b9b      	lsrs	r3, r3, #14
 8008f96:	b2db      	uxtb	r3, r3
 8008f98:	f003 0301 	and.w	r3, r3, #1
 8008f9c:	b2da      	uxtb	r2, r3
 8008f9e:	683b      	ldr	r3, [r7, #0]
 8008fa0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008fa6:	09db      	lsrs	r3, r3, #7
 8008fa8:	b2db      	uxtb	r3, r3
 8008faa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008fae:	b2da      	uxtb	r2, r3
 8008fb0:	683b      	ldr	r3, [r7, #0]
 8008fb2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008fb8:	b2db      	uxtb	r3, r3
 8008fba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008fbe:	b2da      	uxtb	r2, r3
 8008fc0:	683b      	ldr	r3, [r7, #0]
 8008fc2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008fc8:	0fdb      	lsrs	r3, r3, #31
 8008fca:	b2da      	uxtb	r2, r3
 8008fcc:	683b      	ldr	r3, [r7, #0]
 8008fce:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008fd4:	0f5b      	lsrs	r3, r3, #29
 8008fd6:	b2db      	uxtb	r3, r3
 8008fd8:	f003 0303 	and.w	r3, r3, #3
 8008fdc:	b2da      	uxtb	r2, r3
 8008fde:	683b      	ldr	r3, [r7, #0]
 8008fe0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008fe6:	0e9b      	lsrs	r3, r3, #26
 8008fe8:	b2db      	uxtb	r3, r3
 8008fea:	f003 0307 	and.w	r3, r3, #7
 8008fee:	b2da      	uxtb	r2, r3
 8008ff0:	683b      	ldr	r3, [r7, #0]
 8008ff2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ff8:	0d9b      	lsrs	r3, r3, #22
 8008ffa:	b2db      	uxtb	r3, r3
 8008ffc:	f003 030f 	and.w	r3, r3, #15
 8009000:	b2da      	uxtb	r2, r3
 8009002:	683b      	ldr	r3, [r7, #0]
 8009004:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800900a:	0d5b      	lsrs	r3, r3, #21
 800900c:	b2db      	uxtb	r3, r3
 800900e:	f003 0301 	and.w	r3, r3, #1
 8009012:	b2da      	uxtb	r2, r3
 8009014:	683b      	ldr	r3, [r7, #0]
 8009016:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800901a:	683b      	ldr	r3, [r7, #0]
 800901c:	2200      	movs	r2, #0
 800901e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009026:	0c1b      	lsrs	r3, r3, #16
 8009028:	b2db      	uxtb	r3, r3
 800902a:	f003 0301 	and.w	r3, r3, #1
 800902e:	b2da      	uxtb	r2, r3
 8009030:	683b      	ldr	r3, [r7, #0]
 8009032:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800903a:	0bdb      	lsrs	r3, r3, #15
 800903c:	b2db      	uxtb	r3, r3
 800903e:	f003 0301 	and.w	r3, r3, #1
 8009042:	b2da      	uxtb	r2, r3
 8009044:	683b      	ldr	r3, [r7, #0]
 8009046:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800904e:	0b9b      	lsrs	r3, r3, #14
 8009050:	b2db      	uxtb	r3, r3
 8009052:	f003 0301 	and.w	r3, r3, #1
 8009056:	b2da      	uxtb	r2, r3
 8009058:	683b      	ldr	r3, [r7, #0]
 800905a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009062:	0b5b      	lsrs	r3, r3, #13
 8009064:	b2db      	uxtb	r3, r3
 8009066:	f003 0301 	and.w	r3, r3, #1
 800906a:	b2da      	uxtb	r2, r3
 800906c:	683b      	ldr	r3, [r7, #0]
 800906e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009076:	0b1b      	lsrs	r3, r3, #12
 8009078:	b2db      	uxtb	r3, r3
 800907a:	f003 0301 	and.w	r3, r3, #1
 800907e:	b2da      	uxtb	r2, r3
 8009080:	683b      	ldr	r3, [r7, #0]
 8009082:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800908a:	0a9b      	lsrs	r3, r3, #10
 800908c:	b2db      	uxtb	r3, r3
 800908e:	f003 0303 	and.w	r3, r3, #3
 8009092:	b2da      	uxtb	r2, r3
 8009094:	683b      	ldr	r3, [r7, #0]
 8009096:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800909e:	0a1b      	lsrs	r3, r3, #8
 80090a0:	b2db      	uxtb	r3, r3
 80090a2:	f003 0303 	and.w	r3, r3, #3
 80090a6:	b2da      	uxtb	r2, r3
 80090a8:	683b      	ldr	r3, [r7, #0]
 80090aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80090b2:	085b      	lsrs	r3, r3, #1
 80090b4:	b2db      	uxtb	r3, r3
 80090b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80090ba:	b2da      	uxtb	r2, r3
 80090bc:	683b      	ldr	r3, [r7, #0]
 80090be:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80090c2:	683b      	ldr	r3, [r7, #0]
 80090c4:	2201      	movs	r2, #1
 80090c6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80090ca:	2300      	movs	r3, #0
}
 80090cc:	4618      	mov	r0, r3
 80090ce:	370c      	adds	r7, #12
 80090d0:	46bd      	mov	sp, r7
 80090d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d6:	4770      	bx	lr
 80090d8:	1fe00fff 	.word	0x1fe00fff

080090dc <HAL_SD_GetCardStatus>:
  * @param  pStatus Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	b094      	sub	sp, #80	; 0x50
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
 80090e4:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80090e6:	2300      	movs	r3, #0
 80090e8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 80090ec:	f107 0308 	add.w	r3, r7, #8
 80090f0:	4619      	mov	r1, r3
 80090f2:	6878      	ldr	r0, [r7, #4]
 80090f4:	f000 fbd4 	bl	80098a0 <SD_SendSDStatus>
 80090f8:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 80090fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d011      	beq.n	8009124 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	4a4f      	ldr	r2, [pc, #316]	; (8009244 <HAL_SD_GetCardStatus+0x168>)
 8009106:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800910c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800910e:	431a      	orrs	r2, r3
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	2201      	movs	r2, #1
 8009118:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800911c:	2301      	movs	r3, #1
 800911e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8009122:	e070      	b.n	8009206 <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8009124:	68bb      	ldr	r3, [r7, #8]
 8009126:	099b      	lsrs	r3, r3, #6
 8009128:	b2db      	uxtb	r3, r3
 800912a:	f003 0303 	and.w	r3, r3, #3
 800912e:	b2da      	uxtb	r2, r3
 8009130:	683b      	ldr	r3, [r7, #0]
 8009132:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8009134:	68bb      	ldr	r3, [r7, #8]
 8009136:	095b      	lsrs	r3, r3, #5
 8009138:	b2db      	uxtb	r3, r3
 800913a:	f003 0301 	and.w	r3, r3, #1
 800913e:	b2da      	uxtb	r2, r3
 8009140:	683b      	ldr	r3, [r7, #0]
 8009142:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8009144:	68bb      	ldr	r3, [r7, #8]
 8009146:	0a1b      	lsrs	r3, r3, #8
 8009148:	b29b      	uxth	r3, r3
 800914a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800914e:	b29a      	uxth	r2, r3
 8009150:	68bb      	ldr	r3, [r7, #8]
 8009152:	0e1b      	lsrs	r3, r3, #24
 8009154:	b29b      	uxth	r3, r3
 8009156:	4313      	orrs	r3, r2
 8009158:	b29a      	uxth	r2, r3
 800915a:	683b      	ldr	r3, [r7, #0]
 800915c:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	061a      	lsls	r2, r3, #24
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	021b      	lsls	r3, r3, #8
 8009166:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800916a:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	0a1b      	lsrs	r3, r3, #8
 8009170:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8009174:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	0e1b      	lsrs	r3, r3, #24
 800917a:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800917c:	683b      	ldr	r3, [r7, #0]
 800917e:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8009180:	693b      	ldr	r3, [r7, #16]
 8009182:	b2da      	uxtb	r2, r3
 8009184:	683b      	ldr	r3, [r7, #0]
 8009186:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8009188:	693b      	ldr	r3, [r7, #16]
 800918a:	0a1b      	lsrs	r3, r3, #8
 800918c:	b2da      	uxtb	r2, r3
 800918e:	683b      	ldr	r3, [r7, #0]
 8009190:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8009192:	693b      	ldr	r3, [r7, #16]
 8009194:	0d1b      	lsrs	r3, r3, #20
 8009196:	b2db      	uxtb	r3, r3
 8009198:	f003 030f 	and.w	r3, r3, #15
 800919c:	b2da      	uxtb	r2, r3
 800919e:	683b      	ldr	r3, [r7, #0]
 80091a0:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 80091a2:	693b      	ldr	r3, [r7, #16]
 80091a4:	0c1b      	lsrs	r3, r3, #16
 80091a6:	b29b      	uxth	r3, r3
 80091a8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80091ac:	b29a      	uxth	r2, r3
 80091ae:	697b      	ldr	r3, [r7, #20]
 80091b0:	b29b      	uxth	r3, r3
 80091b2:	b2db      	uxtb	r3, r3
 80091b4:	b29b      	uxth	r3, r3
 80091b6:	4313      	orrs	r3, r2
 80091b8:	b29a      	uxth	r2, r3
 80091ba:	683b      	ldr	r3, [r7, #0]
 80091bc:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 80091be:	697b      	ldr	r3, [r7, #20]
 80091c0:	0a9b      	lsrs	r3, r3, #10
 80091c2:	b2db      	uxtb	r3, r3
 80091c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80091c8:	b2da      	uxtb	r2, r3
 80091ca:	683b      	ldr	r3, [r7, #0]
 80091cc:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 80091ce:	697b      	ldr	r3, [r7, #20]
 80091d0:	0a1b      	lsrs	r3, r3, #8
 80091d2:	b2db      	uxtb	r3, r3
 80091d4:	f003 0303 	and.w	r3, r3, #3
 80091d8:	b2da      	uxtb	r2, r3
 80091da:	683b      	ldr	r3, [r7, #0]
 80091dc:	73da      	strb	r2, [r3, #15]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 80091de:	697b      	ldr	r3, [r7, #20]
 80091e0:	091b      	lsrs	r3, r3, #4
 80091e2:	b2db      	uxtb	r3, r3
 80091e4:	f003 030f 	and.w	r3, r3, #15
 80091e8:	b2da      	uxtb	r2, r3
 80091ea:	683b      	ldr	r3, [r7, #0]
 80091ec:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 80091ee:	697b      	ldr	r3, [r7, #20]
 80091f0:	b2db      	uxtb	r3, r3
 80091f2:	f003 030f 	and.w	r3, r3, #15
 80091f6:	b2da      	uxtb	r2, r3
 80091f8:	683b      	ldr	r3, [r7, #0]
 80091fa:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 80091fc:	69bb      	ldr	r3, [r7, #24]
 80091fe:	0e1b      	lsrs	r3, r3, #24
 8009200:	b2da      	uxtb	r2, r3
 8009202:	683b      	ldr	r3, [r7, #0]
 8009204:	749a      	strb	r2, [r3, #18]
#endif
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800920e:	4618      	mov	r0, r3
 8009210:	f001 ffc2 	bl	800b198 <SDMMC_CmdBlockLength>
 8009214:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 8009216:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009218:	2b00      	cmp	r3, #0
 800921a:	d00d      	beq.n	8009238 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	4a08      	ldr	r2, [pc, #32]	; (8009244 <HAL_SD_GetCardStatus+0x168>)
 8009222:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009228:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	2201      	movs	r2, #1
 800922e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8009232:	2301      	movs	r3, #1
 8009234:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 8009238:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800923c:	4618      	mov	r0, r3
 800923e:	3750      	adds	r7, #80	; 0x50
 8009240:	46bd      	mov	sp, r7
 8009242:	bd80      	pop	{r7, pc}
 8009244:	1fe00fff 	.word	0x1fe00fff

08009248 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8009248:	b480      	push	{r7}
 800924a:	b083      	sub	sp, #12
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
 8009250:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009256:	683b      	ldr	r3, [r7, #0]
 8009258:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800925e:	683b      	ldr	r3, [r7, #0]
 8009260:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009266:	683b      	ldr	r3, [r7, #0]
 8009268:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800926e:	683b      	ldr	r3, [r7, #0]
 8009270:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009276:	683b      	ldr	r3, [r7, #0]
 8009278:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800927e:	683b      	ldr	r3, [r7, #0]
 8009280:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009286:	683b      	ldr	r3, [r7, #0]
 8009288:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800928e:	683b      	ldr	r3, [r7, #0]
 8009290:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8009292:	2300      	movs	r3, #0
}
 8009294:	4618      	mov	r0, r3
 8009296:	370c      	adds	r7, #12
 8009298:	46bd      	mov	sp, r7
 800929a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929e:	4770      	bx	lr

080092a0 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80092a0:	b5b0      	push	{r4, r5, r7, lr}
 80092a2:	b090      	sub	sp, #64	; 0x40
 80092a4:	af04      	add	r7, sp, #16
 80092a6:	6078      	str	r0, [r7, #4]
 80092a8:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 80092aa:	2300      	movs	r3, #0
 80092ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2203      	movs	r2, #3
 80092b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092bc:	2b03      	cmp	r3, #3
 80092be:	d02e      	beq.n	800931e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 80092c0:	683b      	ldr	r3, [r7, #0]
 80092c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80092c6:	d106      	bne.n	80092d6 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092cc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	639a      	str	r2, [r3, #56]	; 0x38
 80092d4:	e029      	b.n	800932a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 80092d6:	683b      	ldr	r3, [r7, #0]
 80092d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80092dc:	d10a      	bne.n	80092f4 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80092de:	6878      	ldr	r0, [r7, #4]
 80092e0:	f000 fbd6 	bl	8009a90 <SD_WideBus_Enable>
 80092e4:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80092ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092ec:	431a      	orrs	r2, r3
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	639a      	str	r2, [r3, #56]	; 0x38
 80092f2:	e01a      	b.n	800932a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 80092f4:	683b      	ldr	r3, [r7, #0]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d10a      	bne.n	8009310 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80092fa:	6878      	ldr	r0, [r7, #4]
 80092fc:	f000 fc13 	bl	8009b26 <SD_WideBus_Disable>
 8009300:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009308:	431a      	orrs	r2, r3
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	639a      	str	r2, [r3, #56]	; 0x38
 800930e:	e00c      	b.n	800932a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009314:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	639a      	str	r2, [r3, #56]	; 0x38
 800931c:	e005      	b.n	800932a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009322:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800932e:	2b00      	cmp	r3, #0
 8009330:	d007      	beq.n	8009342 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	4a60      	ldr	r2, [pc, #384]	; (80094b8 <HAL_SD_ConfigWideBusOperation+0x218>)
 8009338:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800933a:	2301      	movs	r3, #1
 800933c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8009340:	e097      	b.n	8009472 <HAL_SD_ConfigWideBusOperation+0x1d2>
  }
  else
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8009342:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8009346:	f7fd fc7d 	bl	8006c44 <HAL_RCCEx_GetPeriphCLKFreq>
 800934a:	6278      	str	r0, [r7, #36]	; 0x24
    if (sdmmc_clk != 0U)
 800934c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800934e:	2b00      	cmp	r3, #0
 8009350:	f000 8086 	beq.w	8009460 <HAL_SD_ConfigWideBusOperation+0x1c0>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	685b      	ldr	r3, [r3, #4]
 8009358:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
      Init.ClockBypass         = hsd->Init.ClockBypass;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	689b      	ldr	r3, [r3, #8]
 800935e:	613b      	str	r3, [r7, #16]
      Init.BusWide             = WideMode;
 8009360:	683b      	ldr	r3, [r7, #0]
 8009362:	617b      	str	r3, [r7, #20]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	691b      	ldr	r3, [r3, #16]
 8009368:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	695a      	ldr	r2, [r3, #20]
 800936e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009370:	4952      	ldr	r1, [pc, #328]	; (80094bc <HAL_SD_ConfigWideBusOperation+0x21c>)
 8009372:	fba1 1303 	umull	r1, r3, r1, r3
 8009376:	0e1b      	lsrs	r3, r3, #24
 8009378:	429a      	cmp	r2, r3
 800937a:	d303      	bcc.n	8009384 <HAL_SD_ConfigWideBusOperation+0xe4>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	695b      	ldr	r3, [r3, #20]
 8009380:	61fb      	str	r3, [r7, #28]
 8009382:	e05a      	b.n	800943a <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009388:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800938c:	d103      	bne.n	8009396 <HAL_SD_ConfigWideBusOperation+0xf6>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	695b      	ldr	r3, [r3, #20]
 8009392:	61fb      	str	r3, [r7, #28]
 8009394:	e051      	b.n	800943a <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800939a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800939e:	d126      	bne.n	80093ee <HAL_SD_ConfigWideBusOperation+0x14e>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	695b      	ldr	r3, [r3, #20]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d10e      	bne.n	80093c6 <HAL_SD_ConfigWideBusOperation+0x126>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 80093a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093aa:	4a45      	ldr	r2, [pc, #276]	; (80094c0 <HAL_SD_ConfigWideBusOperation+0x220>)
 80093ac:	4293      	cmp	r3, r2
 80093ae:	d906      	bls.n	80093be <HAL_SD_ConfigWideBusOperation+0x11e>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 80093b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093b2:	4a42      	ldr	r2, [pc, #264]	; (80094bc <HAL_SD_ConfigWideBusOperation+0x21c>)
 80093b4:	fba2 2303 	umull	r2, r3, r2, r3
 80093b8:	0e5b      	lsrs	r3, r3, #25
 80093ba:	61fb      	str	r3, [r7, #28]
 80093bc:	e03d      	b.n	800943a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	695b      	ldr	r3, [r3, #20]
 80093c2:	61fb      	str	r3, [r7, #28]
 80093c4:	e039      	b.n	800943a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	695b      	ldr	r3, [r3, #20]
 80093ca:	005b      	lsls	r3, r3, #1
 80093cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80093d2:	4a3b      	ldr	r2, [pc, #236]	; (80094c0 <HAL_SD_ConfigWideBusOperation+0x220>)
 80093d4:	4293      	cmp	r3, r2
 80093d6:	d906      	bls.n	80093e6 <HAL_SD_ConfigWideBusOperation+0x146>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 80093d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093da:	4a38      	ldr	r2, [pc, #224]	; (80094bc <HAL_SD_ConfigWideBusOperation+0x21c>)
 80093dc:	fba2 2303 	umull	r2, r3, r2, r3
 80093e0:	0e5b      	lsrs	r3, r3, #25
 80093e2:	61fb      	str	r3, [r7, #28]
 80093e4:	e029      	b.n	800943a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	695b      	ldr	r3, [r3, #20]
 80093ea:	61fb      	str	r3, [r7, #28]
 80093ec:	e025      	b.n	800943a <HAL_SD_ConfigWideBusOperation+0x19a>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	695b      	ldr	r3, [r3, #20]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d10e      	bne.n	8009414 <HAL_SD_ConfigWideBusOperation+0x174>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 80093f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093f8:	4a32      	ldr	r2, [pc, #200]	; (80094c4 <HAL_SD_ConfigWideBusOperation+0x224>)
 80093fa:	4293      	cmp	r3, r2
 80093fc:	d906      	bls.n	800940c <HAL_SD_ConfigWideBusOperation+0x16c>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80093fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009400:	4a2e      	ldr	r2, [pc, #184]	; (80094bc <HAL_SD_ConfigWideBusOperation+0x21c>)
 8009402:	fba2 2303 	umull	r2, r3, r2, r3
 8009406:	0e1b      	lsrs	r3, r3, #24
 8009408:	61fb      	str	r3, [r7, #28]
 800940a:	e016      	b.n	800943a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	695b      	ldr	r3, [r3, #20]
 8009410:	61fb      	str	r3, [r7, #28]
 8009412:	e012      	b.n	800943a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	695b      	ldr	r3, [r3, #20]
 8009418:	005b      	lsls	r3, r3, #1
 800941a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800941c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009420:	4a28      	ldr	r2, [pc, #160]	; (80094c4 <HAL_SD_ConfigWideBusOperation+0x224>)
 8009422:	4293      	cmp	r3, r2
 8009424:	d906      	bls.n	8009434 <HAL_SD_ConfigWideBusOperation+0x194>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8009426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009428:	4a24      	ldr	r2, [pc, #144]	; (80094bc <HAL_SD_ConfigWideBusOperation+0x21c>)
 800942a:	fba2 2303 	umull	r2, r3, r2, r3
 800942e:	0e1b      	lsrs	r3, r3, #24
 8009430:	61fb      	str	r3, [r7, #28]
 8009432:	e002      	b.n	800943a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	695b      	ldr	r3, [r3, #20]
 8009438:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      Init.Transceiver = hsd->Init.Transceiver;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	699b      	ldr	r3, [r3, #24]
 800943e:	623b      	str	r3, [r7, #32]
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
      }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      (void)SDMMC_Init(hsd->Instance, Init);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681d      	ldr	r5, [r3, #0]
 8009444:	466c      	mov	r4, sp
 8009446:	f107 0318 	add.w	r3, r7, #24
 800944a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800944e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009452:	f107 030c 	add.w	r3, r7, #12
 8009456:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009458:	4628      	mov	r0, r5
 800945a:	f001 fdbf 	bl	800afdc <SDMMC_Init>
 800945e:	e008      	b.n	8009472 <HAL_SD_ConfigWideBusOperation+0x1d2>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009464:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	639a      	str	r2, [r3, #56]	; 0x38
      status = HAL_ERROR;
 800946c:	2301      	movs	r3, #1
 800946e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	f44f 7100 	mov.w	r1, #512	; 0x200
 800947a:	4618      	mov	r0, r3
 800947c:	f001 fe8c 	bl	800b198 <SDMMC_CmdBlockLength>
 8009480:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009484:	2b00      	cmp	r3, #0
 8009486:	d00c      	beq.n	80094a2 <HAL_SD_ConfigWideBusOperation+0x202>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	4a0a      	ldr	r2, [pc, #40]	; (80094b8 <HAL_SD_ConfigWideBusOperation+0x218>)
 800948e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009496:	431a      	orrs	r2, r3
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800949c:	2301      	movs	r3, #1
 800949e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	2201      	movs	r2, #1
 80094a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 80094aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80094ae:	4618      	mov	r0, r3
 80094b0:	3730      	adds	r7, #48	; 0x30
 80094b2:	46bd      	mov	sp, r7
 80094b4:	bdb0      	pop	{r4, r5, r7, pc}
 80094b6:	bf00      	nop
 80094b8:	1fe00fff 	.word	0x1fe00fff
 80094bc:	55e63b89 	.word	0x55e63b89
 80094c0:	02faf080 	.word	0x02faf080
 80094c4:	017d7840 	.word	0x017d7840

080094c8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	b086      	sub	sp, #24
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80094d0:	2300      	movs	r3, #0
 80094d2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80094d4:	f107 030c 	add.w	r3, r7, #12
 80094d8:	4619      	mov	r1, r3
 80094da:	6878      	ldr	r0, [r7, #4]
 80094dc:	f000 fab0 	bl	8009a40 <SD_SendStatus>
 80094e0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80094e2:	697b      	ldr	r3, [r7, #20]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d005      	beq.n	80094f4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80094ec:	697b      	ldr	r3, [r7, #20]
 80094ee:	431a      	orrs	r2, r3
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	0a5b      	lsrs	r3, r3, #9
 80094f8:	f003 030f 	and.w	r3, r3, #15
 80094fc:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80094fe:	693b      	ldr	r3, [r7, #16]
}
 8009500:	4618      	mov	r0, r3
 8009502:	3718      	adds	r7, #24
 8009504:	46bd      	mov	sp, r7
 8009506:	bd80      	pop	{r7, pc}

08009508 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009508:	b5b0      	push	{r4, r5, r7, lr}
 800950a:	b090      	sub	sp, #64	; 0x40
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8009510:	2301      	movs	r3, #1
 8009512:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	4618      	mov	r0, r3
 800951a:	f001 fdb9 	bl	800b090 <SDMMC_GetPowerState>
 800951e:	4603      	mov	r3, r0
 8009520:	2b00      	cmp	r3, #0
 8009522:	d102      	bne.n	800952a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009524:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8009528:	e0a9      	b.n	800967e <SD_InitCard+0x176>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800952e:	2b03      	cmp	r3, #3
 8009530:	d02e      	beq.n	8009590 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	4618      	mov	r0, r3
 8009538:	f001 fffe 	bl	800b538 <SDMMC_CmdSendCID>
 800953c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800953e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009540:	2b00      	cmp	r3, #0
 8009542:	d001      	beq.n	8009548 <SD_InitCard+0x40>
    {
      return errorstate;
 8009544:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009546:	e09a      	b.n	800967e <SD_InitCard+0x176>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	2100      	movs	r1, #0
 800954e:	4618      	mov	r0, r3
 8009550:	f001 fde3 	bl	800b11a <SDMMC_GetResponse>
 8009554:	4602      	mov	r2, r0
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	2104      	movs	r1, #4
 8009560:	4618      	mov	r0, r3
 8009562:	f001 fdda 	bl	800b11a <SDMMC_GetResponse>
 8009566:	4602      	mov	r2, r0
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	2108      	movs	r1, #8
 8009572:	4618      	mov	r0, r3
 8009574:	f001 fdd1 	bl	800b11a <SDMMC_GetResponse>
 8009578:	4602      	mov	r2, r0
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	210c      	movs	r1, #12
 8009584:	4618      	mov	r0, r3
 8009586:	f001 fdc8 	bl	800b11a <SDMMC_GetResponse>
 800958a:	4602      	mov	r2, r0
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009594:	2b03      	cmp	r3, #3
 8009596:	d00d      	beq.n	80095b4 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	f107 020e 	add.w	r2, r7, #14
 80095a0:	4611      	mov	r1, r2
 80095a2:	4618      	mov	r0, r3
 80095a4:	f002 f807 	bl	800b5b6 <SDMMC_CmdSetRelAdd>
 80095a8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80095aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d001      	beq.n	80095b4 <SD_InitCard+0xac>
    {
      return errorstate;
 80095b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095b2:	e064      	b.n	800967e <SD_InitCard+0x176>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095b8:	2b03      	cmp	r3, #3
 80095ba:	d036      	beq.n	800962a <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80095bc:	89fb      	ldrh	r3, [r7, #14]
 80095be:	461a      	mov	r2, r3
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681a      	ldr	r2, [r3, #0]
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80095cc:	041b      	lsls	r3, r3, #16
 80095ce:	4619      	mov	r1, r3
 80095d0:	4610      	mov	r0, r2
 80095d2:	f001 ffd0 	bl	800b576 <SDMMC_CmdSendCSD>
 80095d6:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80095d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d001      	beq.n	80095e2 <SD_InitCard+0xda>
    {
      return errorstate;
 80095de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095e0:	e04d      	b.n	800967e <SD_InitCard+0x176>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	2100      	movs	r1, #0
 80095e8:	4618      	mov	r0, r3
 80095ea:	f001 fd96 	bl	800b11a <SDMMC_GetResponse>
 80095ee:	4602      	mov	r2, r0
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	2104      	movs	r1, #4
 80095fa:	4618      	mov	r0, r3
 80095fc:	f001 fd8d 	bl	800b11a <SDMMC_GetResponse>
 8009600:	4602      	mov	r2, r0
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	2108      	movs	r1, #8
 800960c:	4618      	mov	r0, r3
 800960e:	f001 fd84 	bl	800b11a <SDMMC_GetResponse>
 8009612:	4602      	mov	r2, r0
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	210c      	movs	r1, #12
 800961e:	4618      	mov	r0, r3
 8009620:	f001 fd7b 	bl	800b11a <SDMMC_GetResponse>
 8009624:	4602      	mov	r2, r0
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	2104      	movs	r1, #4
 8009630:	4618      	mov	r0, r3
 8009632:	f001 fd72 	bl	800b11a <SDMMC_GetResponse>
 8009636:	4603      	mov	r3, r0
 8009638:	0d1a      	lsrs	r2, r3, #20
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800963e:	f107 0310 	add.w	r3, r7, #16
 8009642:	4619      	mov	r1, r3
 8009644:	6878      	ldr	r0, [r7, #4]
 8009646:	f7ff fba5 	bl	8008d94 <HAL_SD_GetCardCSD>
 800964a:	4603      	mov	r3, r0
 800964c:	2b00      	cmp	r3, #0
 800964e:	d002      	beq.n	8009656 <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009650:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009654:	e013      	b.n	800967e <SD_InitCard+0x176>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	6819      	ldr	r1, [r3, #0]
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800965e:	041b      	lsls	r3, r3, #16
 8009660:	2200      	movs	r2, #0
 8009662:	461c      	mov	r4, r3
 8009664:	4615      	mov	r5, r2
 8009666:	4622      	mov	r2, r4
 8009668:	462b      	mov	r3, r5
 800966a:	4608      	mov	r0, r1
 800966c:	f001 fe7a 	bl	800b364 <SDMMC_CmdSelDesel>
 8009670:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8009672:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009674:	2b00      	cmp	r3, #0
 8009676:	d001      	beq.n	800967c <SD_InitCard+0x174>
  {
    return errorstate;
 8009678:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800967a:	e000      	b.n	800967e <SD_InitCard+0x176>
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800967c:	2300      	movs	r3, #0
}
 800967e:	4618      	mov	r0, r3
 8009680:	3740      	adds	r7, #64	; 0x40
 8009682:	46bd      	mov	sp, r7
 8009684:	bdb0      	pop	{r4, r5, r7, pc}
	...

08009688 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8009688:	b580      	push	{r7, lr}
 800968a:	b088      	sub	sp, #32
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009690:	2300      	movs	r3, #0
 8009692:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 8009694:	2300      	movs	r3, #0
 8009696:	61fb      	str	r3, [r7, #28]
 8009698:	2300      	movs	r3, #0
 800969a:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
 800969c:	f7f8 fdd8 	bl	8002250 <HAL_GetTick>
 80096a0:	6178      	str	r0, [r7, #20]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	4618      	mov	r0, r3
 80096a8:	f001 fe80 	bl	800b3ac <SDMMC_CmdGoIdleState>
 80096ac:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 80096ae:	693b      	ldr	r3, [r7, #16]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d001      	beq.n	80096b8 <SD_PowerON+0x30>
  {
    return errorstate;
 80096b4:	693b      	ldr	r3, [r7, #16]
 80096b6:	e0ed      	b.n	8009894 <SD_PowerON+0x20c>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	4618      	mov	r0, r3
 80096be:	f001 fe93 	bl	800b3e8 <SDMMC_CmdOperCond>
 80096c2:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 80096c4:	693b      	ldr	r3, [r7, #16]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d00d      	beq.n	80096e6 <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	2200      	movs	r2, #0
 80096ce:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	4618      	mov	r0, r3
 80096d6:	f001 fe69 	bl	800b3ac <SDMMC_CmdGoIdleState>
 80096da:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 80096dc:	693b      	ldr	r3, [r7, #16]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d004      	beq.n	80096ec <SD_PowerON+0x64>
    {
      return errorstate;
 80096e2:	693b      	ldr	r3, [r7, #16]
 80096e4:	e0d6      	b.n	8009894 <SD_PowerON+0x20c>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	2201      	movs	r2, #1
 80096ea:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096f0:	2b01      	cmp	r3, #1
 80096f2:	d137      	bne.n	8009764 <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	2100      	movs	r1, #0
 80096fa:	4618      	mov	r0, r3
 80096fc:	f001 fe94 	bl	800b428 <SDMMC_CmdAppCommand>
 8009700:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009702:	693b      	ldr	r3, [r7, #16]
 8009704:	2b00      	cmp	r3, #0
 8009706:	d02d      	beq.n	8009764 <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009708:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800970c:	e0c2      	b.n	8009894 <SD_PowerON+0x20c>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	2100      	movs	r1, #0
 8009714:	4618      	mov	r0, r3
 8009716:	f001 fe87 	bl	800b428 <SDMMC_CmdAppCommand>
 800971a:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800971c:	693b      	ldr	r3, [r7, #16]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d001      	beq.n	8009726 <SD_PowerON+0x9e>
    {
      return errorstate;
 8009722:	693b      	ldr	r3, [r7, #16]
 8009724:	e0b6      	b.n	8009894 <SD_PowerON+0x20c>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	495c      	ldr	r1, [pc, #368]	; (800989c <SD_PowerON+0x214>)
 800972c:	4618      	mov	r0, r3
 800972e:	f001 fe9e 	bl	800b46e <SDMMC_CmdAppOperCommand>
 8009732:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009734:	693b      	ldr	r3, [r7, #16]
 8009736:	2b00      	cmp	r3, #0
 8009738:	d002      	beq.n	8009740 <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800973a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800973e:	e0a9      	b.n	8009894 <SD_PowerON+0x20c>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	2100      	movs	r1, #0
 8009746:	4618      	mov	r0, r3
 8009748:	f001 fce7 	bl	800b11a <SDMMC_GetResponse>
 800974c:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800974e:	69fb      	ldr	r3, [r7, #28]
 8009750:	0fdb      	lsrs	r3, r3, #31
 8009752:	2b01      	cmp	r3, #1
 8009754:	d101      	bne.n	800975a <SD_PowerON+0xd2>
 8009756:	2301      	movs	r3, #1
 8009758:	e000      	b.n	800975c <SD_PowerON+0xd4>
 800975a:	2300      	movs	r3, #0
 800975c:	61bb      	str	r3, [r7, #24]

    count++;
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	3301      	adds	r3, #1
 8009762:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800976a:	4293      	cmp	r3, r2
 800976c:	d802      	bhi.n	8009774 <SD_PowerON+0xec>
 800976e:	69bb      	ldr	r3, [r7, #24]
 8009770:	2b00      	cmp	r3, #0
 8009772:	d0cc      	beq.n	800970e <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800977a:	4293      	cmp	r3, r2
 800977c:	d902      	bls.n	8009784 <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800977e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009782:	e087      	b.n	8009894 <SD_PowerON+0x20c>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8009784:	69fb      	ldr	r3, [r7, #28]
 8009786:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800978a:	2b00      	cmp	r3, #0
 800978c:	d07e      	beq.n	800988c <SD_PowerON+0x204>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	2201      	movs	r2, #1
 8009792:	63da      	str	r2, [r3, #60]	; 0x3c
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	699b      	ldr	r3, [r3, #24]
 8009798:	2b01      	cmp	r3, #1
 800979a:	d17a      	bne.n	8009892 <SD_PowerON+0x20a>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 800979c:	69fb      	ldr	r3, [r7, #28]
 800979e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d075      	beq.n	8009892 <SD_PowerON+0x20a>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80097ac:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	681a      	ldr	r2, [r3, #0]
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	f042 0208 	orr.w	r2, r2, #8
 80097bc:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	4618      	mov	r0, r3
 80097c4:	f001 ff5e 	bl	800b684 <SDMMC_CmdVoltageSwitch>
 80097c8:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 80097ca:	693b      	ldr	r3, [r7, #16]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d00c      	beq.n	80097ea <SD_PowerON+0x162>
        {
          return errorstate;
 80097d0:	693b      	ldr	r3, [r7, #16]
 80097d2:	e05f      	b.n	8009894 <SD_PowerON+0x20c>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80097d4:	f7f8 fd3c 	bl	8002250 <HAL_GetTick>
 80097d8:	4602      	mov	r2, r0
 80097da:	697b      	ldr	r3, [r7, #20]
 80097dc:	1ad3      	subs	r3, r2, r3
 80097de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097e2:	d102      	bne.n	80097ea <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 80097e4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80097e8:	e054      	b.n	8009894 <SD_PowerON+0x20c>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097f0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80097f4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80097f8:	d1ec      	bne.n	80097d4 <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8009802:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800980a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800980e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009812:	d002      	beq.n	800981a <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 8009814:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009818:	e03c      	b.n	8009894 <SD_PowerON+0x20c>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SDEx_DriveTransceiver_1_8V_Callback(SET);
 800981a:	2001      	movs	r0, #1
 800981c:	f000 fb44 	bl	8009ea8 <HAL_SDEx_DriveTransceiver_1_8V_Callback>
#endif

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	681a      	ldr	r2, [r3, #0]
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	f042 0204 	orr.w	r2, r2, #4
 800982e:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8009830:	e00a      	b.n	8009848 <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009832:	f7f8 fd0d 	bl	8002250 <HAL_GetTick>
 8009836:	4602      	mov	r2, r0
 8009838:	697b      	ldr	r3, [r7, #20]
 800983a:	1ad3      	subs	r3, r2, r3
 800983c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009840:	d102      	bne.n	8009848 <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 8009842:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009846:	e025      	b.n	8009894 <SD_PowerON+0x20c>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800984e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009852:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009856:	d1ec      	bne.n	8009832 <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009860:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009868:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800986c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009870:	d102      	bne.n	8009878 <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009872:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009876:	e00d      	b.n	8009894 <SD_PowerON+0x20c>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	2213      	movs	r2, #19
 800987e:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	f04f 32ff 	mov.w	r2, #4294967295
 8009888:	639a      	str	r2, [r3, #56]	; 0x38
 800988a:	e002      	b.n	8009892 <SD_PowerON+0x20a>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	2200      	movs	r2, #0
 8009890:	63da      	str	r2, [r3, #60]	; 0x3c
  }


  return HAL_SD_ERROR_NONE;
 8009892:	2300      	movs	r3, #0
}
 8009894:	4618      	mov	r0, r3
 8009896:	3720      	adds	r7, #32
 8009898:	46bd      	mov	sp, r7
 800989a:	bd80      	pop	{r7, pc}
 800989c:	c1100000 	.word	0xc1100000

080098a0 <SD_SendSDStatus>:
  * @param  pSDstatus Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 80098a0:	b580      	push	{r7, lr}
 80098a2:	b08c      	sub	sp, #48	; 0x30
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	6078      	str	r0, [r7, #4]
 80098a8:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80098aa:	f7f8 fcd1 	bl	8002250 <HAL_GetTick>
 80098ae:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 80098b0:	683b      	ldr	r3, [r7, #0]
 80098b2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	2100      	movs	r1, #0
 80098ba:	4618      	mov	r0, r3
 80098bc:	f001 fc2d 	bl	800b11a <SDMMC_GetResponse>
 80098c0:	4603      	mov	r3, r0
 80098c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80098c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80098ca:	d102      	bne.n	80098d2 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80098cc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80098d0:	e0b0      	b.n	8009a34 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	2140      	movs	r1, #64	; 0x40
 80098d8:	4618      	mov	r0, r3
 80098da:	f001 fc5d 	bl	800b198 <SDMMC_CmdBlockLength>
 80098de:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80098e0:	6a3b      	ldr	r3, [r7, #32]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d005      	beq.n	80098f2 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 80098ee:	6a3b      	ldr	r3, [r7, #32]
 80098f0:	e0a0      	b.n	8009a34 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681a      	ldr	r2, [r3, #0]
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80098fa:	041b      	lsls	r3, r3, #16
 80098fc:	4619      	mov	r1, r3
 80098fe:	4610      	mov	r0, r2
 8009900:	f001 fd92 	bl	800b428 <SDMMC_CmdAppCommand>
 8009904:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009906:	6a3b      	ldr	r3, [r7, #32]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d005      	beq.n	8009918 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8009914:	6a3b      	ldr	r3, [r7, #32]
 8009916:	e08d      	b.n	8009a34 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009918:	f04f 33ff 	mov.w	r3, #4294967295
 800991c:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800991e:	2340      	movs	r3, #64	; 0x40
 8009920:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8009922:	2360      	movs	r3, #96	; 0x60
 8009924:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009926:	2302      	movs	r3, #2
 8009928:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800992a:	2300      	movs	r3, #0
 800992c:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800992e:	2301      	movs	r3, #1
 8009930:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	f107 0208 	add.w	r2, r7, #8
 800993a:	4611      	mov	r1, r2
 800993c:	4618      	mov	r0, r3
 800993e:	f001 fbff 	bl	800b140 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	4618      	mov	r0, r3
 8009948:	f001 fe7a 	bl	800b640 <SDMMC_CmdStatusRegister>
 800994c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800994e:	6a3b      	ldr	r3, [r7, #32]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d02b      	beq.n	80099ac <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800995c:	6a3b      	ldr	r3, [r7, #32]
 800995e:	e069      	b.n	8009a34 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009966:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800996a:	2b00      	cmp	r3, #0
 800996c:	d013      	beq.n	8009996 <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 800996e:	2300      	movs	r3, #0
 8009970:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009972:	e00d      	b.n	8009990 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	4618      	mov	r0, r3
 800997a:	f001 fb59 	bl	800b030 <SDMMC_ReadFIFO>
 800997e:	4602      	mov	r2, r0
 8009980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009982:	601a      	str	r2, [r3, #0]
        pData++;
 8009984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009986:	3304      	adds	r3, #4
 8009988:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 800998a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800998c:	3301      	adds	r3, #1
 800998e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009992:	2b07      	cmp	r3, #7
 8009994:	d9ee      	bls.n	8009974 <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009996:	f7f8 fc5b 	bl	8002250 <HAL_GetTick>
 800999a:	4602      	mov	r2, r0
 800999c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800999e:	1ad3      	subs	r3, r2, r3
 80099a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099a4:	d102      	bne.n	80099ac <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80099a6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80099aa:	e043      	b.n	8009a34 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099b2:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d0d2      	beq.n	8009960 <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099c0:	f003 0308 	and.w	r3, r3, #8
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d001      	beq.n	80099cc <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 80099c8:	2308      	movs	r3, #8
 80099ca:	e033      	b.n	8009a34 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099d2:	f003 0302 	and.w	r3, r3, #2
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d001      	beq.n	80099de <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80099da:	2302      	movs	r3, #2
 80099dc:	e02a      	b.n	8009a34 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099e4:	f003 0320 	and.w	r3, r3, #32
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d017      	beq.n	8009a1c <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 80099ec:	2320      	movs	r3, #32
 80099ee:	e021      	b.n	8009a34 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
#else
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	4618      	mov	r0, r3
 80099f6:	f001 fb1b 	bl	800b030 <SDMMC_ReadFIFO>
 80099fa:	4602      	mov	r2, r0
 80099fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099fe:	601a      	str	r2, [r3, #0]
    pData++;
 8009a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a02:	3304      	adds	r3, #4
 8009a04:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009a06:	f7f8 fc23 	bl	8002250 <HAL_GetTick>
 8009a0a:	4602      	mov	r2, r0
 8009a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a0e:	1ad3      	subs	r3, r2, r3
 8009a10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a14:	d102      	bne.n	8009a1c <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009a16:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009a1a:	e00b      	b.n	8009a34 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d1e2      	bne.n	80099f0 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	4a03      	ldr	r2, [pc, #12]	; (8009a3c <SD_SendSDStatus+0x19c>)
 8009a30:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8009a32:	2300      	movs	r3, #0
}
 8009a34:	4618      	mov	r0, r3
 8009a36:	3730      	adds	r7, #48	; 0x30
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	bd80      	pop	{r7, pc}
 8009a3c:	18000f3a 	.word	0x18000f3a

08009a40 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b084      	sub	sp, #16
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]
 8009a48:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8009a4a:	683b      	ldr	r3, [r7, #0]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d102      	bne.n	8009a56 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8009a50:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009a54:	e018      	b.n	8009a88 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681a      	ldr	r2, [r3, #0]
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009a5e:	041b      	lsls	r3, r3, #16
 8009a60:	4619      	mov	r1, r3
 8009a62:	4610      	mov	r0, r2
 8009a64:	f001 fdc9 	bl	800b5fa <SDMMC_CmdSendStatus>
 8009a68:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d001      	beq.n	8009a74 <SD_SendStatus+0x34>
  {
    return errorstate;
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	e009      	b.n	8009a88 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	2100      	movs	r1, #0
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	f001 fb4d 	bl	800b11a <SDMMC_GetResponse>
 8009a80:	4602      	mov	r2, r0
 8009a82:	683b      	ldr	r3, [r7, #0]
 8009a84:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8009a86:	2300      	movs	r3, #0
}
 8009a88:	4618      	mov	r0, r3
 8009a8a:	3710      	adds	r7, #16
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	bd80      	pop	{r7, pc}

08009a90 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b086      	sub	sp, #24
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8009a98:	2300      	movs	r3, #0
 8009a9a:	60fb      	str	r3, [r7, #12]
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	2100      	movs	r1, #0
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	f001 fb37 	bl	800b11a <SDMMC_GetResponse>
 8009aac:	4603      	mov	r3, r0
 8009aae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009ab2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009ab6:	d102      	bne.n	8009abe <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009ab8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009abc:	e02f      	b.n	8009b1e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009abe:	f107 030c 	add.w	r3, r7, #12
 8009ac2:	4619      	mov	r1, r3
 8009ac4:	6878      	ldr	r0, [r7, #4]
 8009ac6:	f000 f879 	bl	8009bbc <SD_FindSCR>
 8009aca:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009acc:	697b      	ldr	r3, [r7, #20]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d001      	beq.n	8009ad6 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8009ad2:	697b      	ldr	r3, [r7, #20]
 8009ad4:	e023      	b.n	8009b1e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009ad6:	693b      	ldr	r3, [r7, #16]
 8009ad8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d01c      	beq.n	8009b1a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681a      	ldr	r2, [r3, #0]
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009ae8:	041b      	lsls	r3, r3, #16
 8009aea:	4619      	mov	r1, r3
 8009aec:	4610      	mov	r0, r2
 8009aee:	f001 fc9b 	bl	800b428 <SDMMC_CmdAppCommand>
 8009af2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009af4:	697b      	ldr	r3, [r7, #20]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d001      	beq.n	8009afe <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8009afa:	697b      	ldr	r3, [r7, #20]
 8009afc:	e00f      	b.n	8009b1e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	2102      	movs	r1, #2
 8009b04:	4618      	mov	r0, r3
 8009b06:	f001 fcd2 	bl	800b4ae <SDMMC_CmdBusWidth>
 8009b0a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009b0c:	697b      	ldr	r3, [r7, #20]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d001      	beq.n	8009b16 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8009b12:	697b      	ldr	r3, [r7, #20]
 8009b14:	e003      	b.n	8009b1e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009b16:	2300      	movs	r3, #0
 8009b18:	e001      	b.n	8009b1e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009b1a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009b1e:	4618      	mov	r0, r3
 8009b20:	3718      	adds	r7, #24
 8009b22:	46bd      	mov	sp, r7
 8009b24:	bd80      	pop	{r7, pc}

08009b26 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8009b26:	b580      	push	{r7, lr}
 8009b28:	b086      	sub	sp, #24
 8009b2a:	af00      	add	r7, sp, #0
 8009b2c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8009b2e:	2300      	movs	r3, #0
 8009b30:	60fb      	str	r3, [r7, #12]
 8009b32:	2300      	movs	r3, #0
 8009b34:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	2100      	movs	r1, #0
 8009b3c:	4618      	mov	r0, r3
 8009b3e:	f001 faec 	bl	800b11a <SDMMC_GetResponse>
 8009b42:	4603      	mov	r3, r0
 8009b44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009b48:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009b4c:	d102      	bne.n	8009b54 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009b4e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009b52:	e02f      	b.n	8009bb4 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009b54:	f107 030c 	add.w	r3, r7, #12
 8009b58:	4619      	mov	r1, r3
 8009b5a:	6878      	ldr	r0, [r7, #4]
 8009b5c:	f000 f82e 	bl	8009bbc <SD_FindSCR>
 8009b60:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009b62:	697b      	ldr	r3, [r7, #20]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d001      	beq.n	8009b6c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8009b68:	697b      	ldr	r3, [r7, #20]
 8009b6a:	e023      	b.n	8009bb4 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009b6c:	693b      	ldr	r3, [r7, #16]
 8009b6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d01c      	beq.n	8009bb0 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681a      	ldr	r2, [r3, #0]
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009b7e:	041b      	lsls	r3, r3, #16
 8009b80:	4619      	mov	r1, r3
 8009b82:	4610      	mov	r0, r2
 8009b84:	f001 fc50 	bl	800b428 <SDMMC_CmdAppCommand>
 8009b88:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009b8a:	697b      	ldr	r3, [r7, #20]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d001      	beq.n	8009b94 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8009b90:	697b      	ldr	r3, [r7, #20]
 8009b92:	e00f      	b.n	8009bb4 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	2100      	movs	r1, #0
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	f001 fc87 	bl	800b4ae <SDMMC_CmdBusWidth>
 8009ba0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009ba2:	697b      	ldr	r3, [r7, #20]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d001      	beq.n	8009bac <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8009ba8:	697b      	ldr	r3, [r7, #20]
 8009baa:	e003      	b.n	8009bb4 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009bac:	2300      	movs	r3, #0
 8009bae:	e001      	b.n	8009bb4 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009bb0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009bb4:	4618      	mov	r0, r3
 8009bb6:	3718      	adds	r7, #24
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	bd80      	pop	{r7, pc}

08009bbc <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8009bbc:	b580      	push	{r7, lr}
 8009bbe:	b08e      	sub	sp, #56	; 0x38
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	6078      	str	r0, [r7, #4]
 8009bc4:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009bc6:	f7f8 fb43 	bl	8002250 <HAL_GetTick>
 8009bca:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8009bcc:	2300      	movs	r3, #0
 8009bce:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	60bb      	str	r3, [r7, #8]
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8009bd8:	683b      	ldr	r3, [r7, #0]
 8009bda:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	2108      	movs	r1, #8
 8009be2:	4618      	mov	r0, r3
 8009be4:	f001 fad8 	bl	800b198 <SDMMC_CmdBlockLength>
 8009be8:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d001      	beq.n	8009bf4 <SD_FindSCR+0x38>
  {
    return errorstate;
 8009bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bf2:	e0ad      	b.n	8009d50 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681a      	ldr	r2, [r3, #0]
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009bfc:	041b      	lsls	r3, r3, #16
 8009bfe:	4619      	mov	r1, r3
 8009c00:	4610      	mov	r0, r2
 8009c02:	f001 fc11 	bl	800b428 <SDMMC_CmdAppCommand>
 8009c06:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d001      	beq.n	8009c12 <SD_FindSCR+0x56>
  {
    return errorstate;
 8009c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c10:	e09e      	b.n	8009d50 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009c12:	f04f 33ff 	mov.w	r3, #4294967295
 8009c16:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8009c18:	2308      	movs	r3, #8
 8009c1a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8009c1c:	2330      	movs	r3, #48	; 0x30
 8009c1e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009c20:	2302      	movs	r3, #2
 8009c22:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009c24:	2300      	movs	r3, #0
 8009c26:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8009c28:	2301      	movs	r3, #1
 8009c2a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	f107 0210 	add.w	r2, r7, #16
 8009c34:	4611      	mov	r1, r2
 8009c36:	4618      	mov	r0, r3
 8009c38:	f001 fa82 	bl	800b140 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	4618      	mov	r0, r3
 8009c42:	f001 fc57 	bl	800b4f4 <SDMMC_CmdSendSCR>
 8009c46:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d027      	beq.n	8009c9e <SD_FindSCR+0xe2>
  {
    return errorstate;
 8009c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c50:	e07e      	b.n	8009d50 <SD_FindSCR+0x194>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c58:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d113      	bne.n	8009c88 <SD_FindSCR+0xcc>
 8009c60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d110      	bne.n	8009c88 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	f001 f9e0 	bl	800b030 <SDMMC_ReadFIFO>
 8009c70:	4603      	mov	r3, r0
 8009c72:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	4618      	mov	r0, r3
 8009c7a:	f001 f9d9 	bl	800b030 <SDMMC_ReadFIFO>
 8009c7e:	4603      	mov	r3, r0
 8009c80:	60fb      	str	r3, [r7, #12]
      index++;
 8009c82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c84:	3301      	adds	r3, #1
 8009c86:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009c88:	f7f8 fae2 	bl	8002250 <HAL_GetTick>
 8009c8c:	4602      	mov	r2, r0
 8009c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c90:	1ad3      	subs	r3, r2, r3
 8009c92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c96:	d102      	bne.n	8009c9e <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009c98:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009c9c:	e058      	b.n	8009d50 <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009ca4:	f240 532a 	movw	r3, #1322	; 0x52a
 8009ca8:	4013      	ands	r3, r2
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d0d1      	beq.n	8009c52 <SD_FindSCR+0x96>
      return HAL_SD_ERROR_TIMEOUT;
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cb4:	f003 0308 	and.w	r3, r3, #8
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d005      	beq.n	8009cc8 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	2208      	movs	r2, #8
 8009cc2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009cc4:	2308      	movs	r3, #8
 8009cc6:	e043      	b.n	8009d50 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cce:	f003 0302 	and.w	r3, r3, #2
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d005      	beq.n	8009ce2 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	2202      	movs	r2, #2
 8009cdc:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009cde:	2302      	movs	r3, #2
 8009ce0:	e036      	b.n	8009d50 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ce8:	f003 0320 	and.w	r3, r3, #32
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d005      	beq.n	8009cfc <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	2220      	movs	r2, #32
 8009cf6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8009cf8:	2320      	movs	r3, #32
 8009cfa:	e029      	b.n	8009d50 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	4a15      	ldr	r2, [pc, #84]	; (8009d58 <SD_FindSCR+0x19c>)
 8009d02:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	061a      	lsls	r2, r3, #24
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	021b      	lsls	r3, r3, #8
 8009d0c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009d10:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	0a1b      	lsrs	r3, r3, #8
 8009d16:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009d1a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	0e1b      	lsrs	r3, r3, #24
 8009d20:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d24:	601a      	str	r2, [r3, #0]
    scr++;
 8009d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d28:	3304      	adds	r3, #4
 8009d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009d2c:	68bb      	ldr	r3, [r7, #8]
 8009d2e:	061a      	lsls	r2, r3, #24
 8009d30:	68bb      	ldr	r3, [r7, #8]
 8009d32:	021b      	lsls	r3, r3, #8
 8009d34:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009d38:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009d3a:	68bb      	ldr	r3, [r7, #8]
 8009d3c:	0a1b      	lsrs	r3, r3, #8
 8009d3e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009d42:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009d44:	68bb      	ldr	r3, [r7, #8]
 8009d46:	0e1b      	lsrs	r3, r3, #24
 8009d48:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d4c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8009d4e:	2300      	movs	r3, #0
}
 8009d50:	4618      	mov	r0, r3
 8009d52:	3738      	adds	r7, #56	; 0x38
 8009d54:	46bd      	mov	sp, r7
 8009d56:	bd80      	pop	{r7, pc}
 8009d58:	18000f3a 	.word	0x18000f3a

08009d5c <SD_Read_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	b086      	sub	sp, #24
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d68:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d6e:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8009d70:	693b      	ldr	r3, [r7, #16]
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d03f      	beq.n	8009df6 <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8009d76:	2300      	movs	r3, #0
 8009d78:	617b      	str	r3, [r7, #20]
 8009d7a:	e033      	b.n	8009de4 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	4618      	mov	r0, r3
 8009d82:	f001 f955 	bl	800b030 <SDMMC_ReadFIFO>
 8009d86:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8009d88:	68bb      	ldr	r3, [r7, #8]
 8009d8a:	b2da      	uxtb	r2, r3
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	3301      	adds	r3, #1
 8009d94:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009d96:	693b      	ldr	r3, [r7, #16]
 8009d98:	3b01      	subs	r3, #1
 8009d9a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8009d9c:	68bb      	ldr	r3, [r7, #8]
 8009d9e:	0a1b      	lsrs	r3, r3, #8
 8009da0:	b2da      	uxtb	r2, r3
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	3301      	adds	r3, #1
 8009daa:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009dac:	693b      	ldr	r3, [r7, #16]
 8009dae:	3b01      	subs	r3, #1
 8009db0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8009db2:	68bb      	ldr	r3, [r7, #8]
 8009db4:	0c1b      	lsrs	r3, r3, #16
 8009db6:	b2da      	uxtb	r2, r3
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	3301      	adds	r3, #1
 8009dc0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009dc2:	693b      	ldr	r3, [r7, #16]
 8009dc4:	3b01      	subs	r3, #1
 8009dc6:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8009dc8:	68bb      	ldr	r3, [r7, #8]
 8009dca:	0e1b      	lsrs	r3, r3, #24
 8009dcc:	b2da      	uxtb	r2, r3
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	3301      	adds	r3, #1
 8009dd6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009dd8:	693b      	ldr	r3, [r7, #16]
 8009dda:	3b01      	subs	r3, #1
 8009ddc:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8009dde:	697b      	ldr	r3, [r7, #20]
 8009de0:	3301      	adds	r3, #1
 8009de2:	617b      	str	r3, [r7, #20]
 8009de4:	697b      	ldr	r3, [r7, #20]
 8009de6:	2b07      	cmp	r3, #7
 8009de8:	d9c8      	bls.n	8009d7c <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	68fa      	ldr	r2, [r7, #12]
 8009dee:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	693a      	ldr	r2, [r7, #16]
 8009df4:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8009df6:	bf00      	nop
 8009df8:	3718      	adds	r7, #24
 8009dfa:	46bd      	mov	sp, r7
 8009dfc:	bd80      	pop	{r7, pc}

08009dfe <SD_Write_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8009dfe:	b580      	push	{r7, lr}
 8009e00:	b086      	sub	sp, #24
 8009e02:	af00      	add	r7, sp, #0
 8009e04:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	6a1b      	ldr	r3, [r3, #32]
 8009e0a:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e10:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8009e12:	693b      	ldr	r3, [r7, #16]
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d043      	beq.n	8009ea0 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8009e18:	2300      	movs	r3, #0
 8009e1a:	617b      	str	r3, [r7, #20]
 8009e1c:	e037      	b.n	8009e8e <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	781b      	ldrb	r3, [r3, #0]
 8009e22:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	3301      	adds	r3, #1
 8009e28:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009e2a:	693b      	ldr	r3, [r7, #16]
 8009e2c:	3b01      	subs	r3, #1
 8009e2e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	781b      	ldrb	r3, [r3, #0]
 8009e34:	021a      	lsls	r2, r3, #8
 8009e36:	68bb      	ldr	r3, [r7, #8]
 8009e38:	4313      	orrs	r3, r2
 8009e3a:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	3301      	adds	r3, #1
 8009e40:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009e42:	693b      	ldr	r3, [r7, #16]
 8009e44:	3b01      	subs	r3, #1
 8009e46:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	781b      	ldrb	r3, [r3, #0]
 8009e4c:	041a      	lsls	r2, r3, #16
 8009e4e:	68bb      	ldr	r3, [r7, #8]
 8009e50:	4313      	orrs	r3, r2
 8009e52:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	3301      	adds	r3, #1
 8009e58:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009e5a:	693b      	ldr	r3, [r7, #16]
 8009e5c:	3b01      	subs	r3, #1
 8009e5e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	781b      	ldrb	r3, [r3, #0]
 8009e64:	061a      	lsls	r2, r3, #24
 8009e66:	68bb      	ldr	r3, [r7, #8]
 8009e68:	4313      	orrs	r3, r2
 8009e6a:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	3301      	adds	r3, #1
 8009e70:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009e72:	693b      	ldr	r3, [r7, #16]
 8009e74:	3b01      	subs	r3, #1
 8009e76:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	f107 0208 	add.w	r2, r7, #8
 8009e80:	4611      	mov	r1, r2
 8009e82:	4618      	mov	r0, r3
 8009e84:	f001 f8e1 	bl	800b04a <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8009e88:	697b      	ldr	r3, [r7, #20]
 8009e8a:	3301      	adds	r3, #1
 8009e8c:	617b      	str	r3, [r7, #20]
 8009e8e:	697b      	ldr	r3, [r7, #20]
 8009e90:	2b07      	cmp	r3, #7
 8009e92:	d9c4      	bls.n	8009e1e <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	68fa      	ldr	r2, [r7, #12]
 8009e98:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	693a      	ldr	r2, [r7, #16]
 8009e9e:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8009ea0:	bf00      	nop
 8009ea2:	3718      	adds	r7, #24
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	bd80      	pop	{r7, pc}

08009ea8 <HAL_SDEx_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status Voltage Switch State
  * @retval None
  */
__weak void HAL_SDEx_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 8009ea8:	b480      	push	{r7}
 8009eaa:	b083      	sub	sp, #12
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	4603      	mov	r3, r0
 8009eb0:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SD_EnableTransciver could be implemented in the user file
   */
}
 8009eb2:	bf00      	nop
 8009eb4:	370c      	adds	r7, #12
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ebc:	4770      	bx	lr

08009ebe <HAL_SDEx_Read_DMADoubleBuffer0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuffer0CpltCallback(SD_HandleTypeDef *hsd)
{
 8009ebe:	b480      	push	{r7}
 8009ec0:	b083      	sub	sp, #12
 8009ec2:	af00      	add	r7, sp, #0
 8009ec4:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuffer0CpltCallback can be implemented in the user file
   */
}
 8009ec6:	bf00      	nop
 8009ec8:	370c      	adds	r7, #12
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed0:	4770      	bx	lr

08009ed2 <HAL_SDEx_Read_DMADoubleBuffer1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuffer1CpltCallback(SD_HandleTypeDef *hsd)
{
 8009ed2:	b480      	push	{r7}
 8009ed4:	b083      	sub	sp, #12
 8009ed6:	af00      	add	r7, sp, #0
 8009ed8:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuffer1CpltCallback can be implemented in the user file
   */
}
 8009eda:	bf00      	nop
 8009edc:	370c      	adds	r7, #12
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee4:	4770      	bx	lr

08009ee6 <HAL_SDEx_Write_DMADoubleBuffer0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuffer0CpltCallback(SD_HandleTypeDef *hsd)
{
 8009ee6:	b480      	push	{r7}
 8009ee8:	b083      	sub	sp, #12
 8009eea:	af00      	add	r7, sp, #0
 8009eec:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuffer0CpltCallback can be implemented in the user file
   */
}
 8009eee:	bf00      	nop
 8009ef0:	370c      	adds	r7, #12
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef8:	4770      	bx	lr

08009efa <HAL_SDEx_Write_DMADoubleBuffer1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuffer1CpltCallback(SD_HandleTypeDef *hsd)
{
 8009efa:	b480      	push	{r7}
 8009efc:	b083      	sub	sp, #12
 8009efe:	af00      	add	r7, sp, #0
 8009f00:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuffer0CpltCallback can be implemented in the user file
   */
}
 8009f02:	bf00      	nop
 8009f04:	370c      	adds	r7, #12
 8009f06:	46bd      	mov	sp, r7
 8009f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0c:	4770      	bx	lr

08009f0e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009f0e:	b580      	push	{r7, lr}
 8009f10:	b084      	sub	sp, #16
 8009f12:	af00      	add	r7, sp, #0
 8009f14:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d101      	bne.n	8009f20 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009f1c:	2301      	movs	r3, #1
 8009f1e:	e095      	b.n	800a04c <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d108      	bne.n	8009f3a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	685b      	ldr	r3, [r3, #4]
 8009f2c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009f30:	d009      	beq.n	8009f46 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	2200      	movs	r2, #0
 8009f36:	61da      	str	r2, [r3, #28]
 8009f38:	e005      	b.n	8009f46 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	2200      	movs	r2, #0
 8009f3e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	2200      	movs	r2, #0
 8009f44:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	2200      	movs	r2, #0
 8009f4a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009f52:	b2db      	uxtb	r3, r3
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d106      	bne.n	8009f66 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	2200      	movs	r2, #0
 8009f5c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009f60:	6878      	ldr	r0, [r7, #4]
 8009f62:	f7f7 ff15 	bl	8001d90 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	2202      	movs	r2, #2
 8009f6a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	681a      	ldr	r2, [r3, #0]
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009f7c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	68db      	ldr	r3, [r3, #12]
 8009f82:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009f86:	d902      	bls.n	8009f8e <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009f88:	2300      	movs	r3, #0
 8009f8a:	60fb      	str	r3, [r7, #12]
 8009f8c:	e002      	b.n	8009f94 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009f8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009f92:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	68db      	ldr	r3, [r3, #12]
 8009f98:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8009f9c:	d007      	beq.n	8009fae <HAL_SPI_Init+0xa0>
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	68db      	ldr	r3, [r3, #12]
 8009fa2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009fa6:	d002      	beq.n	8009fae <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	2200      	movs	r2, #0
 8009fac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	685b      	ldr	r3, [r3, #4]
 8009fb2:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	689b      	ldr	r3, [r3, #8]
 8009fba:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8009fbe:	431a      	orrs	r2, r3
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	691b      	ldr	r3, [r3, #16]
 8009fc4:	f003 0302 	and.w	r3, r3, #2
 8009fc8:	431a      	orrs	r2, r3
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	695b      	ldr	r3, [r3, #20]
 8009fce:	f003 0301 	and.w	r3, r3, #1
 8009fd2:	431a      	orrs	r2, r3
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	699b      	ldr	r3, [r3, #24]
 8009fd8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009fdc:	431a      	orrs	r2, r3
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	69db      	ldr	r3, [r3, #28]
 8009fe2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009fe6:	431a      	orrs	r2, r3
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	6a1b      	ldr	r3, [r3, #32]
 8009fec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ff0:	ea42 0103 	orr.w	r1, r2, r3
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ff8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	430a      	orrs	r2, r1
 800a002:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	699b      	ldr	r3, [r3, #24]
 800a008:	0c1b      	lsrs	r3, r3, #16
 800a00a:	f003 0204 	and.w	r2, r3, #4
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a012:	f003 0310 	and.w	r3, r3, #16
 800a016:	431a      	orrs	r2, r3
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a01c:	f003 0308 	and.w	r3, r3, #8
 800a020:	431a      	orrs	r2, r3
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	68db      	ldr	r3, [r3, #12]
 800a026:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800a02a:	ea42 0103 	orr.w	r1, r2, r3
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	430a      	orrs	r2, r1
 800a03a:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	2200      	movs	r2, #0
 800a040:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	2201      	movs	r2, #1
 800a046:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800a04a:	2300      	movs	r3, #0
}
 800a04c:	4618      	mov	r0, r3
 800a04e:	3710      	adds	r7, #16
 800a050:	46bd      	mov	sp, r7
 800a052:	bd80      	pop	{r7, pc}

0800a054 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800a054:	b580      	push	{r7, lr}
 800a056:	b08a      	sub	sp, #40	; 0x28
 800a058:	af00      	add	r7, sp, #0
 800a05a:	60f8      	str	r0, [r7, #12]
 800a05c:	60b9      	str	r1, [r7, #8]
 800a05e:	607a      	str	r2, [r7, #4]
 800a060:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800a062:	2301      	movs	r3, #1
 800a064:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800a066:	2300      	movs	r3, #0
 800a068:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800a072:	2b01      	cmp	r3, #1
 800a074:	d101      	bne.n	800a07a <HAL_SPI_TransmitReceive+0x26>
 800a076:	2302      	movs	r3, #2
 800a078:	e1fb      	b.n	800a472 <HAL_SPI_TransmitReceive+0x41e>
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	2201      	movs	r2, #1
 800a07e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a082:	f7f8 f8e5 	bl	8002250 <HAL_GetTick>
 800a086:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a08e:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	685b      	ldr	r3, [r3, #4]
 800a094:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800a096:	887b      	ldrh	r3, [r7, #2]
 800a098:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800a09a:	887b      	ldrh	r3, [r7, #2]
 800a09c:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a09e:	7efb      	ldrb	r3, [r7, #27]
 800a0a0:	2b01      	cmp	r3, #1
 800a0a2:	d00e      	beq.n	800a0c2 <HAL_SPI_TransmitReceive+0x6e>
 800a0a4:	697b      	ldr	r3, [r7, #20]
 800a0a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a0aa:	d106      	bne.n	800a0ba <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	689b      	ldr	r3, [r3, #8]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d102      	bne.n	800a0ba <HAL_SPI_TransmitReceive+0x66>
 800a0b4:	7efb      	ldrb	r3, [r7, #27]
 800a0b6:	2b04      	cmp	r3, #4
 800a0b8:	d003      	beq.n	800a0c2 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800a0ba:	2302      	movs	r3, #2
 800a0bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800a0c0:	e1cd      	b.n	800a45e <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a0c2:	68bb      	ldr	r3, [r7, #8]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d005      	beq.n	800a0d4 <HAL_SPI_TransmitReceive+0x80>
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d002      	beq.n	800a0d4 <HAL_SPI_TransmitReceive+0x80>
 800a0ce:	887b      	ldrh	r3, [r7, #2]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d103      	bne.n	800a0dc <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800a0d4:	2301      	movs	r3, #1
 800a0d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800a0da:	e1c0      	b.n	800a45e <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a0e2:	b2db      	uxtb	r3, r3
 800a0e4:	2b04      	cmp	r3, #4
 800a0e6:	d003      	beq.n	800a0f0 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	2205      	movs	r2, #5
 800a0ec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	687a      	ldr	r2, [r7, #4]
 800a0fa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	887a      	ldrh	r2, [r7, #2]
 800a100:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	887a      	ldrh	r2, [r7, #2]
 800a108:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	68ba      	ldr	r2, [r7, #8]
 800a110:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	887a      	ldrh	r2, [r7, #2]
 800a116:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	887a      	ldrh	r2, [r7, #2]
 800a11c:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	2200      	movs	r2, #0
 800a122:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	2200      	movs	r2, #0
 800a128:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	68db      	ldr	r3, [r3, #12]
 800a12e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a132:	d802      	bhi.n	800a13a <HAL_SPI_TransmitReceive+0xe6>
 800a134:	8a3b      	ldrh	r3, [r7, #16]
 800a136:	2b01      	cmp	r3, #1
 800a138:	d908      	bls.n	800a14c <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	685a      	ldr	r2, [r3, #4]
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a148:	605a      	str	r2, [r3, #4]
 800a14a:	e007      	b.n	800a15c <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	685a      	ldr	r2, [r3, #4]
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a15a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a166:	2b40      	cmp	r3, #64	; 0x40
 800a168:	d007      	beq.n	800a17a <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	681a      	ldr	r2, [r3, #0]
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a178:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	68db      	ldr	r3, [r3, #12]
 800a17e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a182:	d97c      	bls.n	800a27e <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	685b      	ldr	r3, [r3, #4]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d002      	beq.n	800a192 <HAL_SPI_TransmitReceive+0x13e>
 800a18c:	8a7b      	ldrh	r3, [r7, #18]
 800a18e:	2b01      	cmp	r3, #1
 800a190:	d169      	bne.n	800a266 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a196:	881a      	ldrh	r2, [r3, #0]
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1a2:	1c9a      	adds	r2, r3, #2
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a1ac:	b29b      	uxth	r3, r3
 800a1ae:	3b01      	subs	r3, #1
 800a1b0:	b29a      	uxth	r2, r3
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a1b6:	e056      	b.n	800a266 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	689b      	ldr	r3, [r3, #8]
 800a1be:	f003 0302 	and.w	r3, r3, #2
 800a1c2:	2b02      	cmp	r3, #2
 800a1c4:	d11b      	bne.n	800a1fe <HAL_SPI_TransmitReceive+0x1aa>
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a1ca:	b29b      	uxth	r3, r3
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d016      	beq.n	800a1fe <HAL_SPI_TransmitReceive+0x1aa>
 800a1d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1d2:	2b01      	cmp	r3, #1
 800a1d4:	d113      	bne.n	800a1fe <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1da:	881a      	ldrh	r2, [r3, #0]
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1e6:	1c9a      	adds	r2, r3, #2
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a1f0:	b29b      	uxth	r3, r3
 800a1f2:	3b01      	subs	r3, #1
 800a1f4:	b29a      	uxth	r2, r3
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a1fa:	2300      	movs	r3, #0
 800a1fc:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	689b      	ldr	r3, [r3, #8]
 800a204:	f003 0301 	and.w	r3, r3, #1
 800a208:	2b01      	cmp	r3, #1
 800a20a:	d11c      	bne.n	800a246 <HAL_SPI_TransmitReceive+0x1f2>
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a212:	b29b      	uxth	r3, r3
 800a214:	2b00      	cmp	r3, #0
 800a216:	d016      	beq.n	800a246 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	68da      	ldr	r2, [r3, #12]
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a222:	b292      	uxth	r2, r2
 800a224:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a22a:	1c9a      	adds	r2, r3, #2
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a236:	b29b      	uxth	r3, r3
 800a238:	3b01      	subs	r3, #1
 800a23a:	b29a      	uxth	r2, r3
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a242:	2301      	movs	r3, #1
 800a244:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800a246:	f7f8 f803 	bl	8002250 <HAL_GetTick>
 800a24a:	4602      	mov	r2, r0
 800a24c:	69fb      	ldr	r3, [r7, #28]
 800a24e:	1ad3      	subs	r3, r2, r3
 800a250:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a252:	429a      	cmp	r2, r3
 800a254:	d807      	bhi.n	800a266 <HAL_SPI_TransmitReceive+0x212>
 800a256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a25c:	d003      	beq.n	800a266 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800a25e:	2303      	movs	r3, #3
 800a260:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800a264:	e0fb      	b.n	800a45e <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a26a:	b29b      	uxth	r3, r3
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d1a3      	bne.n	800a1b8 <HAL_SPI_TransmitReceive+0x164>
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a276:	b29b      	uxth	r3, r3
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d19d      	bne.n	800a1b8 <HAL_SPI_TransmitReceive+0x164>
 800a27c:	e0df      	b.n	800a43e <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	685b      	ldr	r3, [r3, #4]
 800a282:	2b00      	cmp	r3, #0
 800a284:	d003      	beq.n	800a28e <HAL_SPI_TransmitReceive+0x23a>
 800a286:	8a7b      	ldrh	r3, [r7, #18]
 800a288:	2b01      	cmp	r3, #1
 800a28a:	f040 80cb 	bne.w	800a424 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a292:	b29b      	uxth	r3, r3
 800a294:	2b01      	cmp	r3, #1
 800a296:	d912      	bls.n	800a2be <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a29c:	881a      	ldrh	r2, [r3, #0]
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2a8:	1c9a      	adds	r2, r3, #2
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a2b2:	b29b      	uxth	r3, r3
 800a2b4:	3b02      	subs	r3, #2
 800a2b6:	b29a      	uxth	r2, r3
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a2bc:	e0b2      	b.n	800a424 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	330c      	adds	r3, #12
 800a2c8:	7812      	ldrb	r2, [r2, #0]
 800a2ca:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2d0:	1c5a      	adds	r2, r3, #1
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a2da:	b29b      	uxth	r3, r3
 800a2dc:	3b01      	subs	r3, #1
 800a2de:	b29a      	uxth	r2, r3
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a2e4:	e09e      	b.n	800a424 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	689b      	ldr	r3, [r3, #8]
 800a2ec:	f003 0302 	and.w	r3, r3, #2
 800a2f0:	2b02      	cmp	r3, #2
 800a2f2:	d134      	bne.n	800a35e <HAL_SPI_TransmitReceive+0x30a>
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a2f8:	b29b      	uxth	r3, r3
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d02f      	beq.n	800a35e <HAL_SPI_TransmitReceive+0x30a>
 800a2fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a300:	2b01      	cmp	r3, #1
 800a302:	d12c      	bne.n	800a35e <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a308:	b29b      	uxth	r3, r3
 800a30a:	2b01      	cmp	r3, #1
 800a30c:	d912      	bls.n	800a334 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a312:	881a      	ldrh	r2, [r3, #0]
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a31e:	1c9a      	adds	r2, r3, #2
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a328:	b29b      	uxth	r3, r3
 800a32a:	3b02      	subs	r3, #2
 800a32c:	b29a      	uxth	r2, r3
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a332:	e012      	b.n	800a35a <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	330c      	adds	r3, #12
 800a33e:	7812      	ldrb	r2, [r2, #0]
 800a340:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a346:	1c5a      	adds	r2, r3, #1
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a350:	b29b      	uxth	r3, r3
 800a352:	3b01      	subs	r3, #1
 800a354:	b29a      	uxth	r2, r3
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a35a:	2300      	movs	r3, #0
 800a35c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	689b      	ldr	r3, [r3, #8]
 800a364:	f003 0301 	and.w	r3, r3, #1
 800a368:	2b01      	cmp	r3, #1
 800a36a:	d148      	bne.n	800a3fe <HAL_SPI_TransmitReceive+0x3aa>
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a372:	b29b      	uxth	r3, r3
 800a374:	2b00      	cmp	r3, #0
 800a376:	d042      	beq.n	800a3fe <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a37e:	b29b      	uxth	r3, r3
 800a380:	2b01      	cmp	r3, #1
 800a382:	d923      	bls.n	800a3cc <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	68da      	ldr	r2, [r3, #12]
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a38e:	b292      	uxth	r2, r2
 800a390:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a396:	1c9a      	adds	r2, r3, #2
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a3a2:	b29b      	uxth	r3, r3
 800a3a4:	3b02      	subs	r3, #2
 800a3a6:	b29a      	uxth	r2, r3
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a3b4:	b29b      	uxth	r3, r3
 800a3b6:	2b01      	cmp	r3, #1
 800a3b8:	d81f      	bhi.n	800a3fa <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	685a      	ldr	r2, [r3, #4]
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a3c8:	605a      	str	r2, [r3, #4]
 800a3ca:	e016      	b.n	800a3fa <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	f103 020c 	add.w	r2, r3, #12
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3d8:	7812      	ldrb	r2, [r2, #0]
 800a3da:	b2d2      	uxtb	r2, r2
 800a3dc:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3e2:	1c5a      	adds	r2, r3, #1
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a3ee:	b29b      	uxth	r3, r3
 800a3f0:	3b01      	subs	r3, #1
 800a3f2:	b29a      	uxth	r2, r3
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a3fa:	2301      	movs	r3, #1
 800a3fc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a3fe:	f7f7 ff27 	bl	8002250 <HAL_GetTick>
 800a402:	4602      	mov	r2, r0
 800a404:	69fb      	ldr	r3, [r7, #28]
 800a406:	1ad3      	subs	r3, r2, r3
 800a408:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a40a:	429a      	cmp	r2, r3
 800a40c:	d803      	bhi.n	800a416 <HAL_SPI_TransmitReceive+0x3c2>
 800a40e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a410:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a414:	d102      	bne.n	800a41c <HAL_SPI_TransmitReceive+0x3c8>
 800a416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d103      	bne.n	800a424 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800a41c:	2303      	movs	r3, #3
 800a41e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800a422:	e01c      	b.n	800a45e <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a428:	b29b      	uxth	r3, r3
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	f47f af5b 	bne.w	800a2e6 <HAL_SPI_TransmitReceive+0x292>
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a436:	b29b      	uxth	r3, r3
 800a438:	2b00      	cmp	r3, #0
 800a43a:	f47f af54 	bne.w	800a2e6 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a43e:	69fa      	ldr	r2, [r7, #28]
 800a440:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a442:	68f8      	ldr	r0, [r7, #12]
 800a444:	f000 f938 	bl	800a6b8 <SPI_EndRxTxTransaction>
 800a448:	4603      	mov	r3, r0
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d006      	beq.n	800a45c <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800a44e:	2301      	movs	r3, #1
 800a450:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	2220      	movs	r2, #32
 800a458:	661a      	str	r2, [r3, #96]	; 0x60
 800a45a:	e000      	b.n	800a45e <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800a45c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	2201      	movs	r2, #1
 800a462:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	2200      	movs	r2, #0
 800a46a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800a46e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800a472:	4618      	mov	r0, r3
 800a474:	3728      	adds	r7, #40	; 0x28
 800a476:	46bd      	mov	sp, r7
 800a478:	bd80      	pop	{r7, pc}
	...

0800a47c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a47c:	b580      	push	{r7, lr}
 800a47e:	b088      	sub	sp, #32
 800a480:	af00      	add	r7, sp, #0
 800a482:	60f8      	str	r0, [r7, #12]
 800a484:	60b9      	str	r1, [r7, #8]
 800a486:	603b      	str	r3, [r7, #0]
 800a488:	4613      	mov	r3, r2
 800a48a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a48c:	f7f7 fee0 	bl	8002250 <HAL_GetTick>
 800a490:	4602      	mov	r2, r0
 800a492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a494:	1a9b      	subs	r3, r3, r2
 800a496:	683a      	ldr	r2, [r7, #0]
 800a498:	4413      	add	r3, r2
 800a49a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a49c:	f7f7 fed8 	bl	8002250 <HAL_GetTick>
 800a4a0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a4a2:	4b39      	ldr	r3, [pc, #228]	; (800a588 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	015b      	lsls	r3, r3, #5
 800a4a8:	0d1b      	lsrs	r3, r3, #20
 800a4aa:	69fa      	ldr	r2, [r7, #28]
 800a4ac:	fb02 f303 	mul.w	r3, r2, r3
 800a4b0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a4b2:	e054      	b.n	800a55e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a4b4:	683b      	ldr	r3, [r7, #0]
 800a4b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4ba:	d050      	beq.n	800a55e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a4bc:	f7f7 fec8 	bl	8002250 <HAL_GetTick>
 800a4c0:	4602      	mov	r2, r0
 800a4c2:	69bb      	ldr	r3, [r7, #24]
 800a4c4:	1ad3      	subs	r3, r2, r3
 800a4c6:	69fa      	ldr	r2, [r7, #28]
 800a4c8:	429a      	cmp	r2, r3
 800a4ca:	d902      	bls.n	800a4d2 <SPI_WaitFlagStateUntilTimeout+0x56>
 800a4cc:	69fb      	ldr	r3, [r7, #28]
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d13d      	bne.n	800a54e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	685a      	ldr	r2, [r3, #4]
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a4e0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	685b      	ldr	r3, [r3, #4]
 800a4e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a4ea:	d111      	bne.n	800a510 <SPI_WaitFlagStateUntilTimeout+0x94>
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	689b      	ldr	r3, [r3, #8]
 800a4f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a4f4:	d004      	beq.n	800a500 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	689b      	ldr	r3, [r3, #8]
 800a4fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a4fe:	d107      	bne.n	800a510 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	681a      	ldr	r2, [r3, #0]
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a50e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a514:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a518:	d10f      	bne.n	800a53a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	681a      	ldr	r2, [r3, #0]
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a528:	601a      	str	r2, [r3, #0]
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	681a      	ldr	r2, [r3, #0]
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a538:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	2201      	movs	r2, #1
 800a53e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	2200      	movs	r2, #0
 800a546:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800a54a:	2303      	movs	r3, #3
 800a54c:	e017      	b.n	800a57e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a54e:	697b      	ldr	r3, [r7, #20]
 800a550:	2b00      	cmp	r3, #0
 800a552:	d101      	bne.n	800a558 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800a554:	2300      	movs	r3, #0
 800a556:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a558:	697b      	ldr	r3, [r7, #20]
 800a55a:	3b01      	subs	r3, #1
 800a55c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	689a      	ldr	r2, [r3, #8]
 800a564:	68bb      	ldr	r3, [r7, #8]
 800a566:	4013      	ands	r3, r2
 800a568:	68ba      	ldr	r2, [r7, #8]
 800a56a:	429a      	cmp	r2, r3
 800a56c:	bf0c      	ite	eq
 800a56e:	2301      	moveq	r3, #1
 800a570:	2300      	movne	r3, #0
 800a572:	b2db      	uxtb	r3, r3
 800a574:	461a      	mov	r2, r3
 800a576:	79fb      	ldrb	r3, [r7, #7]
 800a578:	429a      	cmp	r2, r3
 800a57a:	d19b      	bne.n	800a4b4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a57c:	2300      	movs	r3, #0
}
 800a57e:	4618      	mov	r0, r3
 800a580:	3720      	adds	r7, #32
 800a582:	46bd      	mov	sp, r7
 800a584:	bd80      	pop	{r7, pc}
 800a586:	bf00      	nop
 800a588:	20000000 	.word	0x20000000

0800a58c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a58c:	b580      	push	{r7, lr}
 800a58e:	b08a      	sub	sp, #40	; 0x28
 800a590:	af00      	add	r7, sp, #0
 800a592:	60f8      	str	r0, [r7, #12]
 800a594:	60b9      	str	r1, [r7, #8]
 800a596:	607a      	str	r2, [r7, #4]
 800a598:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800a59a:	2300      	movs	r3, #0
 800a59c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800a59e:	f7f7 fe57 	bl	8002250 <HAL_GetTick>
 800a5a2:	4602      	mov	r2, r0
 800a5a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5a6:	1a9b      	subs	r3, r3, r2
 800a5a8:	683a      	ldr	r2, [r7, #0]
 800a5aa:	4413      	add	r3, r2
 800a5ac:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800a5ae:	f7f7 fe4f 	bl	8002250 <HAL_GetTick>
 800a5b2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	330c      	adds	r3, #12
 800a5ba:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800a5bc:	4b3d      	ldr	r3, [pc, #244]	; (800a6b4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800a5be:	681a      	ldr	r2, [r3, #0]
 800a5c0:	4613      	mov	r3, r2
 800a5c2:	009b      	lsls	r3, r3, #2
 800a5c4:	4413      	add	r3, r2
 800a5c6:	00da      	lsls	r2, r3, #3
 800a5c8:	1ad3      	subs	r3, r2, r3
 800a5ca:	0d1b      	lsrs	r3, r3, #20
 800a5cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a5ce:	fb02 f303 	mul.w	r3, r2, r3
 800a5d2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800a5d4:	e060      	b.n	800a698 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800a5d6:	68bb      	ldr	r3, [r7, #8]
 800a5d8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800a5dc:	d107      	bne.n	800a5ee <SPI_WaitFifoStateUntilTimeout+0x62>
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d104      	bne.n	800a5ee <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800a5e4:	69fb      	ldr	r3, [r7, #28]
 800a5e6:	781b      	ldrb	r3, [r3, #0]
 800a5e8:	b2db      	uxtb	r3, r3
 800a5ea:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800a5ec:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800a5ee:	683b      	ldr	r3, [r7, #0]
 800a5f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5f4:	d050      	beq.n	800a698 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a5f6:	f7f7 fe2b 	bl	8002250 <HAL_GetTick>
 800a5fa:	4602      	mov	r2, r0
 800a5fc:	6a3b      	ldr	r3, [r7, #32]
 800a5fe:	1ad3      	subs	r3, r2, r3
 800a600:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a602:	429a      	cmp	r2, r3
 800a604:	d902      	bls.n	800a60c <SPI_WaitFifoStateUntilTimeout+0x80>
 800a606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d13d      	bne.n	800a688 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	685a      	ldr	r2, [r3, #4]
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a61a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	685b      	ldr	r3, [r3, #4]
 800a620:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a624:	d111      	bne.n	800a64a <SPI_WaitFifoStateUntilTimeout+0xbe>
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	689b      	ldr	r3, [r3, #8]
 800a62a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a62e:	d004      	beq.n	800a63a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	689b      	ldr	r3, [r3, #8]
 800a634:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a638:	d107      	bne.n	800a64a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	681a      	ldr	r2, [r3, #0]
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a648:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a64e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a652:	d10f      	bne.n	800a674 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	681a      	ldr	r2, [r3, #0]
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a662:	601a      	str	r2, [r3, #0]
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	681a      	ldr	r2, [r3, #0]
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a672:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	2201      	movs	r2, #1
 800a678:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	2200      	movs	r2, #0
 800a680:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800a684:	2303      	movs	r3, #3
 800a686:	e010      	b.n	800a6aa <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a688:	69bb      	ldr	r3, [r7, #24]
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d101      	bne.n	800a692 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800a68e:	2300      	movs	r3, #0
 800a690:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800a692:	69bb      	ldr	r3, [r7, #24]
 800a694:	3b01      	subs	r3, #1
 800a696:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	689a      	ldr	r2, [r3, #8]
 800a69e:	68bb      	ldr	r3, [r7, #8]
 800a6a0:	4013      	ands	r3, r2
 800a6a2:	687a      	ldr	r2, [r7, #4]
 800a6a4:	429a      	cmp	r2, r3
 800a6a6:	d196      	bne.n	800a5d6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800a6a8:	2300      	movs	r3, #0
}
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	3728      	adds	r7, #40	; 0x28
 800a6ae:	46bd      	mov	sp, r7
 800a6b0:	bd80      	pop	{r7, pc}
 800a6b2:	bf00      	nop
 800a6b4:	20000000 	.word	0x20000000

0800a6b8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b086      	sub	sp, #24
 800a6bc:	af02      	add	r7, sp, #8
 800a6be:	60f8      	str	r0, [r7, #12]
 800a6c0:	60b9      	str	r1, [r7, #8]
 800a6c2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	9300      	str	r3, [sp, #0]
 800a6c8:	68bb      	ldr	r3, [r7, #8]
 800a6ca:	2200      	movs	r2, #0
 800a6cc:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800a6d0:	68f8      	ldr	r0, [r7, #12]
 800a6d2:	f7ff ff5b 	bl	800a58c <SPI_WaitFifoStateUntilTimeout>
 800a6d6:	4603      	mov	r3, r0
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d007      	beq.n	800a6ec <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a6e0:	f043 0220 	orr.w	r2, r3, #32
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a6e8:	2303      	movs	r3, #3
 800a6ea:	e027      	b.n	800a73c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	9300      	str	r3, [sp, #0]
 800a6f0:	68bb      	ldr	r3, [r7, #8]
 800a6f2:	2200      	movs	r2, #0
 800a6f4:	2180      	movs	r1, #128	; 0x80
 800a6f6:	68f8      	ldr	r0, [r7, #12]
 800a6f8:	f7ff fec0 	bl	800a47c <SPI_WaitFlagStateUntilTimeout>
 800a6fc:	4603      	mov	r3, r0
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d007      	beq.n	800a712 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a706:	f043 0220 	orr.w	r2, r3, #32
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a70e:	2303      	movs	r3, #3
 800a710:	e014      	b.n	800a73c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	9300      	str	r3, [sp, #0]
 800a716:	68bb      	ldr	r3, [r7, #8]
 800a718:	2200      	movs	r2, #0
 800a71a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800a71e:	68f8      	ldr	r0, [r7, #12]
 800a720:	f7ff ff34 	bl	800a58c <SPI_WaitFifoStateUntilTimeout>
 800a724:	4603      	mov	r3, r0
 800a726:	2b00      	cmp	r3, #0
 800a728:	d007      	beq.n	800a73a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a72e:	f043 0220 	orr.w	r2, r3, #32
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a736:	2303      	movs	r3, #3
 800a738:	e000      	b.n	800a73c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800a73a:	2300      	movs	r3, #0
}
 800a73c:	4618      	mov	r0, r3
 800a73e:	3710      	adds	r7, #16
 800a740:	46bd      	mov	sp, r7
 800a742:	bd80      	pop	{r7, pc}

0800a744 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a744:	b580      	push	{r7, lr}
 800a746:	b082      	sub	sp, #8
 800a748:	af00      	add	r7, sp, #0
 800a74a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d101      	bne.n	800a756 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a752:	2301      	movs	r3, #1
 800a754:	e049      	b.n	800a7ea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a75c:	b2db      	uxtb	r3, r3
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d106      	bne.n	800a770 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	2200      	movs	r2, #0
 800a766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a76a:	6878      	ldr	r0, [r7, #4]
 800a76c:	f7f7 fbf8 	bl	8001f60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	2202      	movs	r2, #2
 800a774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	681a      	ldr	r2, [r3, #0]
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	3304      	adds	r3, #4
 800a780:	4619      	mov	r1, r3
 800a782:	4610      	mov	r0, r2
 800a784:	f000 fa50 	bl	800ac28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	2201      	movs	r2, #1
 800a78c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	2201      	movs	r2, #1
 800a794:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	2201      	movs	r2, #1
 800a79c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	2201      	movs	r2, #1
 800a7a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	2201      	movs	r2, #1
 800a7ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	2201      	movs	r2, #1
 800a7b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	2201      	movs	r2, #1
 800a7bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	2201      	movs	r2, #1
 800a7c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	2201      	movs	r2, #1
 800a7cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	2201      	movs	r2, #1
 800a7d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	2201      	movs	r2, #1
 800a7dc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	2201      	movs	r2, #1
 800a7e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a7e8:	2300      	movs	r3, #0
}
 800a7ea:	4618      	mov	r0, r3
 800a7ec:	3708      	adds	r7, #8
 800a7ee:	46bd      	mov	sp, r7
 800a7f0:	bd80      	pop	{r7, pc}

0800a7f2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a7f2:	b580      	push	{r7, lr}
 800a7f4:	b082      	sub	sp, #8
 800a7f6:	af00      	add	r7, sp, #0
 800a7f8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	691b      	ldr	r3, [r3, #16]
 800a800:	f003 0302 	and.w	r3, r3, #2
 800a804:	2b02      	cmp	r3, #2
 800a806:	d122      	bne.n	800a84e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	68db      	ldr	r3, [r3, #12]
 800a80e:	f003 0302 	and.w	r3, r3, #2
 800a812:	2b02      	cmp	r3, #2
 800a814:	d11b      	bne.n	800a84e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	f06f 0202 	mvn.w	r2, #2
 800a81e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	2201      	movs	r2, #1
 800a824:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	699b      	ldr	r3, [r3, #24]
 800a82c:	f003 0303 	and.w	r3, r3, #3
 800a830:	2b00      	cmp	r3, #0
 800a832:	d003      	beq.n	800a83c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a834:	6878      	ldr	r0, [r7, #4]
 800a836:	f000 f9d8 	bl	800abea <HAL_TIM_IC_CaptureCallback>
 800a83a:	e005      	b.n	800a848 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a83c:	6878      	ldr	r0, [r7, #4]
 800a83e:	f000 f9ca 	bl	800abd6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a842:	6878      	ldr	r0, [r7, #4]
 800a844:	f000 f9db 	bl	800abfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	2200      	movs	r2, #0
 800a84c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	691b      	ldr	r3, [r3, #16]
 800a854:	f003 0304 	and.w	r3, r3, #4
 800a858:	2b04      	cmp	r3, #4
 800a85a:	d122      	bne.n	800a8a2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	68db      	ldr	r3, [r3, #12]
 800a862:	f003 0304 	and.w	r3, r3, #4
 800a866:	2b04      	cmp	r3, #4
 800a868:	d11b      	bne.n	800a8a2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	f06f 0204 	mvn.w	r2, #4
 800a872:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	2202      	movs	r2, #2
 800a878:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	699b      	ldr	r3, [r3, #24]
 800a880:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a884:	2b00      	cmp	r3, #0
 800a886:	d003      	beq.n	800a890 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a888:	6878      	ldr	r0, [r7, #4]
 800a88a:	f000 f9ae 	bl	800abea <HAL_TIM_IC_CaptureCallback>
 800a88e:	e005      	b.n	800a89c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a890:	6878      	ldr	r0, [r7, #4]
 800a892:	f000 f9a0 	bl	800abd6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a896:	6878      	ldr	r0, [r7, #4]
 800a898:	f000 f9b1 	bl	800abfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	2200      	movs	r2, #0
 800a8a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	691b      	ldr	r3, [r3, #16]
 800a8a8:	f003 0308 	and.w	r3, r3, #8
 800a8ac:	2b08      	cmp	r3, #8
 800a8ae:	d122      	bne.n	800a8f6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	68db      	ldr	r3, [r3, #12]
 800a8b6:	f003 0308 	and.w	r3, r3, #8
 800a8ba:	2b08      	cmp	r3, #8
 800a8bc:	d11b      	bne.n	800a8f6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	f06f 0208 	mvn.w	r2, #8
 800a8c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	2204      	movs	r2, #4
 800a8cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	69db      	ldr	r3, [r3, #28]
 800a8d4:	f003 0303 	and.w	r3, r3, #3
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d003      	beq.n	800a8e4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a8dc:	6878      	ldr	r0, [r7, #4]
 800a8de:	f000 f984 	bl	800abea <HAL_TIM_IC_CaptureCallback>
 800a8e2:	e005      	b.n	800a8f0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a8e4:	6878      	ldr	r0, [r7, #4]
 800a8e6:	f000 f976 	bl	800abd6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a8ea:	6878      	ldr	r0, [r7, #4]
 800a8ec:	f000 f987 	bl	800abfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	2200      	movs	r2, #0
 800a8f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	691b      	ldr	r3, [r3, #16]
 800a8fc:	f003 0310 	and.w	r3, r3, #16
 800a900:	2b10      	cmp	r3, #16
 800a902:	d122      	bne.n	800a94a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	68db      	ldr	r3, [r3, #12]
 800a90a:	f003 0310 	and.w	r3, r3, #16
 800a90e:	2b10      	cmp	r3, #16
 800a910:	d11b      	bne.n	800a94a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	f06f 0210 	mvn.w	r2, #16
 800a91a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	2208      	movs	r2, #8
 800a920:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	69db      	ldr	r3, [r3, #28]
 800a928:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d003      	beq.n	800a938 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a930:	6878      	ldr	r0, [r7, #4]
 800a932:	f000 f95a 	bl	800abea <HAL_TIM_IC_CaptureCallback>
 800a936:	e005      	b.n	800a944 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a938:	6878      	ldr	r0, [r7, #4]
 800a93a:	f000 f94c 	bl	800abd6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a93e:	6878      	ldr	r0, [r7, #4]
 800a940:	f000 f95d 	bl	800abfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	2200      	movs	r2, #0
 800a948:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	691b      	ldr	r3, [r3, #16]
 800a950:	f003 0301 	and.w	r3, r3, #1
 800a954:	2b01      	cmp	r3, #1
 800a956:	d10e      	bne.n	800a976 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	68db      	ldr	r3, [r3, #12]
 800a95e:	f003 0301 	and.w	r3, r3, #1
 800a962:	2b01      	cmp	r3, #1
 800a964:	d107      	bne.n	800a976 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	f06f 0201 	mvn.w	r2, #1
 800a96e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a970:	6878      	ldr	r0, [r7, #4]
 800a972:	f000 f926 	bl	800abc2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	691b      	ldr	r3, [r3, #16]
 800a97c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a980:	2b80      	cmp	r3, #128	; 0x80
 800a982:	d10e      	bne.n	800a9a2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	68db      	ldr	r3, [r3, #12]
 800a98a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a98e:	2b80      	cmp	r3, #128	; 0x80
 800a990:	d107      	bne.n	800a9a2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a99a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a99c:	6878      	ldr	r0, [r7, #4]
 800a99e:	f000 fb09 	bl	800afb4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	691b      	ldr	r3, [r3, #16]
 800a9a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a9ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a9b0:	d10e      	bne.n	800a9d0 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	68db      	ldr	r3, [r3, #12]
 800a9b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a9bc:	2b80      	cmp	r3, #128	; 0x80
 800a9be:	d107      	bne.n	800a9d0 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a9c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a9ca:	6878      	ldr	r0, [r7, #4]
 800a9cc:	f000 fafc 	bl	800afc8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	691b      	ldr	r3, [r3, #16]
 800a9d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9da:	2b40      	cmp	r3, #64	; 0x40
 800a9dc:	d10e      	bne.n	800a9fc <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	68db      	ldr	r3, [r3, #12]
 800a9e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9e8:	2b40      	cmp	r3, #64	; 0x40
 800a9ea:	d107      	bne.n	800a9fc <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a9f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a9f6:	6878      	ldr	r0, [r7, #4]
 800a9f8:	f000 f90b 	bl	800ac12 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	691b      	ldr	r3, [r3, #16]
 800aa02:	f003 0320 	and.w	r3, r3, #32
 800aa06:	2b20      	cmp	r3, #32
 800aa08:	d10e      	bne.n	800aa28 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	68db      	ldr	r3, [r3, #12]
 800aa10:	f003 0320 	and.w	r3, r3, #32
 800aa14:	2b20      	cmp	r3, #32
 800aa16:	d107      	bne.n	800aa28 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	f06f 0220 	mvn.w	r2, #32
 800aa20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800aa22:	6878      	ldr	r0, [r7, #4]
 800aa24:	f000 fabc 	bl	800afa0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800aa28:	bf00      	nop
 800aa2a:	3708      	adds	r7, #8
 800aa2c:	46bd      	mov	sp, r7
 800aa2e:	bd80      	pop	{r7, pc}

0800aa30 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800aa30:	b580      	push	{r7, lr}
 800aa32:	b084      	sub	sp, #16
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	6078      	str	r0, [r7, #4]
 800aa38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800aa3a:	2300      	movs	r3, #0
 800aa3c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aa44:	2b01      	cmp	r3, #1
 800aa46:	d101      	bne.n	800aa4c <HAL_TIM_ConfigClockSource+0x1c>
 800aa48:	2302      	movs	r3, #2
 800aa4a:	e0b6      	b.n	800abba <HAL_TIM_ConfigClockSource+0x18a>
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	2201      	movs	r2, #1
 800aa50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	2202      	movs	r2, #2
 800aa58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	689b      	ldr	r3, [r3, #8]
 800aa62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800aa64:	68bb      	ldr	r3, [r7, #8]
 800aa66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800aa6a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800aa6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800aa70:	68bb      	ldr	r3, [r7, #8]
 800aa72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800aa76:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	68ba      	ldr	r2, [r7, #8]
 800aa7e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800aa80:	683b      	ldr	r3, [r7, #0]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aa88:	d03e      	beq.n	800ab08 <HAL_TIM_ConfigClockSource+0xd8>
 800aa8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aa8e:	f200 8087 	bhi.w	800aba0 <HAL_TIM_ConfigClockSource+0x170>
 800aa92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa96:	f000 8086 	beq.w	800aba6 <HAL_TIM_ConfigClockSource+0x176>
 800aa9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa9e:	d87f      	bhi.n	800aba0 <HAL_TIM_ConfigClockSource+0x170>
 800aaa0:	2b70      	cmp	r3, #112	; 0x70
 800aaa2:	d01a      	beq.n	800aada <HAL_TIM_ConfigClockSource+0xaa>
 800aaa4:	2b70      	cmp	r3, #112	; 0x70
 800aaa6:	d87b      	bhi.n	800aba0 <HAL_TIM_ConfigClockSource+0x170>
 800aaa8:	2b60      	cmp	r3, #96	; 0x60
 800aaaa:	d050      	beq.n	800ab4e <HAL_TIM_ConfigClockSource+0x11e>
 800aaac:	2b60      	cmp	r3, #96	; 0x60
 800aaae:	d877      	bhi.n	800aba0 <HAL_TIM_ConfigClockSource+0x170>
 800aab0:	2b50      	cmp	r3, #80	; 0x50
 800aab2:	d03c      	beq.n	800ab2e <HAL_TIM_ConfigClockSource+0xfe>
 800aab4:	2b50      	cmp	r3, #80	; 0x50
 800aab6:	d873      	bhi.n	800aba0 <HAL_TIM_ConfigClockSource+0x170>
 800aab8:	2b40      	cmp	r3, #64	; 0x40
 800aaba:	d058      	beq.n	800ab6e <HAL_TIM_ConfigClockSource+0x13e>
 800aabc:	2b40      	cmp	r3, #64	; 0x40
 800aabe:	d86f      	bhi.n	800aba0 <HAL_TIM_ConfigClockSource+0x170>
 800aac0:	2b30      	cmp	r3, #48	; 0x30
 800aac2:	d064      	beq.n	800ab8e <HAL_TIM_ConfigClockSource+0x15e>
 800aac4:	2b30      	cmp	r3, #48	; 0x30
 800aac6:	d86b      	bhi.n	800aba0 <HAL_TIM_ConfigClockSource+0x170>
 800aac8:	2b20      	cmp	r3, #32
 800aaca:	d060      	beq.n	800ab8e <HAL_TIM_ConfigClockSource+0x15e>
 800aacc:	2b20      	cmp	r3, #32
 800aace:	d867      	bhi.n	800aba0 <HAL_TIM_ConfigClockSource+0x170>
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d05c      	beq.n	800ab8e <HAL_TIM_ConfigClockSource+0x15e>
 800aad4:	2b10      	cmp	r3, #16
 800aad6:	d05a      	beq.n	800ab8e <HAL_TIM_ConfigClockSource+0x15e>
 800aad8:	e062      	b.n	800aba0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	6818      	ldr	r0, [r3, #0]
 800aade:	683b      	ldr	r3, [r7, #0]
 800aae0:	6899      	ldr	r1, [r3, #8]
 800aae2:	683b      	ldr	r3, [r7, #0]
 800aae4:	685a      	ldr	r2, [r3, #4]
 800aae6:	683b      	ldr	r3, [r7, #0]
 800aae8:	68db      	ldr	r3, [r3, #12]
 800aaea:	f000 f9b1 	bl	800ae50 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	689b      	ldr	r3, [r3, #8]
 800aaf4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800aaf6:	68bb      	ldr	r3, [r7, #8]
 800aaf8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800aafc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	68ba      	ldr	r2, [r7, #8]
 800ab04:	609a      	str	r2, [r3, #8]
      break;
 800ab06:	e04f      	b.n	800aba8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	6818      	ldr	r0, [r3, #0]
 800ab0c:	683b      	ldr	r3, [r7, #0]
 800ab0e:	6899      	ldr	r1, [r3, #8]
 800ab10:	683b      	ldr	r3, [r7, #0]
 800ab12:	685a      	ldr	r2, [r3, #4]
 800ab14:	683b      	ldr	r3, [r7, #0]
 800ab16:	68db      	ldr	r3, [r3, #12]
 800ab18:	f000 f99a 	bl	800ae50 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	689a      	ldr	r2, [r3, #8]
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ab2a:	609a      	str	r2, [r3, #8]
      break;
 800ab2c:	e03c      	b.n	800aba8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	6818      	ldr	r0, [r3, #0]
 800ab32:	683b      	ldr	r3, [r7, #0]
 800ab34:	6859      	ldr	r1, [r3, #4]
 800ab36:	683b      	ldr	r3, [r7, #0]
 800ab38:	68db      	ldr	r3, [r3, #12]
 800ab3a:	461a      	mov	r2, r3
 800ab3c:	f000 f90e 	bl	800ad5c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	2150      	movs	r1, #80	; 0x50
 800ab46:	4618      	mov	r0, r3
 800ab48:	f000 f967 	bl	800ae1a <TIM_ITRx_SetConfig>
      break;
 800ab4c:	e02c      	b.n	800aba8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	6818      	ldr	r0, [r3, #0]
 800ab52:	683b      	ldr	r3, [r7, #0]
 800ab54:	6859      	ldr	r1, [r3, #4]
 800ab56:	683b      	ldr	r3, [r7, #0]
 800ab58:	68db      	ldr	r3, [r3, #12]
 800ab5a:	461a      	mov	r2, r3
 800ab5c:	f000 f92d 	bl	800adba <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	2160      	movs	r1, #96	; 0x60
 800ab66:	4618      	mov	r0, r3
 800ab68:	f000 f957 	bl	800ae1a <TIM_ITRx_SetConfig>
      break;
 800ab6c:	e01c      	b.n	800aba8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	6818      	ldr	r0, [r3, #0]
 800ab72:	683b      	ldr	r3, [r7, #0]
 800ab74:	6859      	ldr	r1, [r3, #4]
 800ab76:	683b      	ldr	r3, [r7, #0]
 800ab78:	68db      	ldr	r3, [r3, #12]
 800ab7a:	461a      	mov	r2, r3
 800ab7c:	f000 f8ee 	bl	800ad5c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	2140      	movs	r1, #64	; 0x40
 800ab86:	4618      	mov	r0, r3
 800ab88:	f000 f947 	bl	800ae1a <TIM_ITRx_SetConfig>
      break;
 800ab8c:	e00c      	b.n	800aba8 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	681a      	ldr	r2, [r3, #0]
 800ab92:	683b      	ldr	r3, [r7, #0]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	4619      	mov	r1, r3
 800ab98:	4610      	mov	r0, r2
 800ab9a:	f000 f93e 	bl	800ae1a <TIM_ITRx_SetConfig>
      break;
 800ab9e:	e003      	b.n	800aba8 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800aba0:	2301      	movs	r3, #1
 800aba2:	73fb      	strb	r3, [r7, #15]
      break;
 800aba4:	e000      	b.n	800aba8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800aba6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	2201      	movs	r2, #1
 800abac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	2200      	movs	r2, #0
 800abb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800abb8:	7bfb      	ldrb	r3, [r7, #15]
}
 800abba:	4618      	mov	r0, r3
 800abbc:	3710      	adds	r7, #16
 800abbe:	46bd      	mov	sp, r7
 800abc0:	bd80      	pop	{r7, pc}

0800abc2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800abc2:	b480      	push	{r7}
 800abc4:	b083      	sub	sp, #12
 800abc6:	af00      	add	r7, sp, #0
 800abc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800abca:	bf00      	nop
 800abcc:	370c      	adds	r7, #12
 800abce:	46bd      	mov	sp, r7
 800abd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd4:	4770      	bx	lr

0800abd6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800abd6:	b480      	push	{r7}
 800abd8:	b083      	sub	sp, #12
 800abda:	af00      	add	r7, sp, #0
 800abdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800abde:	bf00      	nop
 800abe0:	370c      	adds	r7, #12
 800abe2:	46bd      	mov	sp, r7
 800abe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe8:	4770      	bx	lr

0800abea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800abea:	b480      	push	{r7}
 800abec:	b083      	sub	sp, #12
 800abee:	af00      	add	r7, sp, #0
 800abf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800abf2:	bf00      	nop
 800abf4:	370c      	adds	r7, #12
 800abf6:	46bd      	mov	sp, r7
 800abf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfc:	4770      	bx	lr

0800abfe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800abfe:	b480      	push	{r7}
 800ac00:	b083      	sub	sp, #12
 800ac02:	af00      	add	r7, sp, #0
 800ac04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ac06:	bf00      	nop
 800ac08:	370c      	adds	r7, #12
 800ac0a:	46bd      	mov	sp, r7
 800ac0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac10:	4770      	bx	lr

0800ac12 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ac12:	b480      	push	{r7}
 800ac14:	b083      	sub	sp, #12
 800ac16:	af00      	add	r7, sp, #0
 800ac18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ac1a:	bf00      	nop
 800ac1c:	370c      	adds	r7, #12
 800ac1e:	46bd      	mov	sp, r7
 800ac20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac24:	4770      	bx	lr
	...

0800ac28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ac28:	b480      	push	{r7}
 800ac2a:	b085      	sub	sp, #20
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	6078      	str	r0, [r7, #4]
 800ac30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	4a40      	ldr	r2, [pc, #256]	; (800ad3c <TIM_Base_SetConfig+0x114>)
 800ac3c:	4293      	cmp	r3, r2
 800ac3e:	d013      	beq.n	800ac68 <TIM_Base_SetConfig+0x40>
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ac46:	d00f      	beq.n	800ac68 <TIM_Base_SetConfig+0x40>
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	4a3d      	ldr	r2, [pc, #244]	; (800ad40 <TIM_Base_SetConfig+0x118>)
 800ac4c:	4293      	cmp	r3, r2
 800ac4e:	d00b      	beq.n	800ac68 <TIM_Base_SetConfig+0x40>
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	4a3c      	ldr	r2, [pc, #240]	; (800ad44 <TIM_Base_SetConfig+0x11c>)
 800ac54:	4293      	cmp	r3, r2
 800ac56:	d007      	beq.n	800ac68 <TIM_Base_SetConfig+0x40>
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	4a3b      	ldr	r2, [pc, #236]	; (800ad48 <TIM_Base_SetConfig+0x120>)
 800ac5c:	4293      	cmp	r3, r2
 800ac5e:	d003      	beq.n	800ac68 <TIM_Base_SetConfig+0x40>
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	4a3a      	ldr	r2, [pc, #232]	; (800ad4c <TIM_Base_SetConfig+0x124>)
 800ac64:	4293      	cmp	r3, r2
 800ac66:	d108      	bne.n	800ac7a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ac70:	683b      	ldr	r3, [r7, #0]
 800ac72:	685b      	ldr	r3, [r3, #4]
 800ac74:	68fa      	ldr	r2, [r7, #12]
 800ac76:	4313      	orrs	r3, r2
 800ac78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	4a2f      	ldr	r2, [pc, #188]	; (800ad3c <TIM_Base_SetConfig+0x114>)
 800ac7e:	4293      	cmp	r3, r2
 800ac80:	d01f      	beq.n	800acc2 <TIM_Base_SetConfig+0x9a>
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ac88:	d01b      	beq.n	800acc2 <TIM_Base_SetConfig+0x9a>
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	4a2c      	ldr	r2, [pc, #176]	; (800ad40 <TIM_Base_SetConfig+0x118>)
 800ac8e:	4293      	cmp	r3, r2
 800ac90:	d017      	beq.n	800acc2 <TIM_Base_SetConfig+0x9a>
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	4a2b      	ldr	r2, [pc, #172]	; (800ad44 <TIM_Base_SetConfig+0x11c>)
 800ac96:	4293      	cmp	r3, r2
 800ac98:	d013      	beq.n	800acc2 <TIM_Base_SetConfig+0x9a>
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	4a2a      	ldr	r2, [pc, #168]	; (800ad48 <TIM_Base_SetConfig+0x120>)
 800ac9e:	4293      	cmp	r3, r2
 800aca0:	d00f      	beq.n	800acc2 <TIM_Base_SetConfig+0x9a>
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	4a29      	ldr	r2, [pc, #164]	; (800ad4c <TIM_Base_SetConfig+0x124>)
 800aca6:	4293      	cmp	r3, r2
 800aca8:	d00b      	beq.n	800acc2 <TIM_Base_SetConfig+0x9a>
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	4a28      	ldr	r2, [pc, #160]	; (800ad50 <TIM_Base_SetConfig+0x128>)
 800acae:	4293      	cmp	r3, r2
 800acb0:	d007      	beq.n	800acc2 <TIM_Base_SetConfig+0x9a>
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	4a27      	ldr	r2, [pc, #156]	; (800ad54 <TIM_Base_SetConfig+0x12c>)
 800acb6:	4293      	cmp	r3, r2
 800acb8:	d003      	beq.n	800acc2 <TIM_Base_SetConfig+0x9a>
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	4a26      	ldr	r2, [pc, #152]	; (800ad58 <TIM_Base_SetConfig+0x130>)
 800acbe:	4293      	cmp	r3, r2
 800acc0:	d108      	bne.n	800acd4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800acc8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800acca:	683b      	ldr	r3, [r7, #0]
 800accc:	68db      	ldr	r3, [r3, #12]
 800acce:	68fa      	ldr	r2, [r7, #12]
 800acd0:	4313      	orrs	r3, r2
 800acd2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800acda:	683b      	ldr	r3, [r7, #0]
 800acdc:	695b      	ldr	r3, [r3, #20]
 800acde:	4313      	orrs	r3, r2
 800ace0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	68fa      	ldr	r2, [r7, #12]
 800ace6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ace8:	683b      	ldr	r3, [r7, #0]
 800acea:	689a      	ldr	r2, [r3, #8]
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800acf0:	683b      	ldr	r3, [r7, #0]
 800acf2:	681a      	ldr	r2, [r3, #0]
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	4a10      	ldr	r2, [pc, #64]	; (800ad3c <TIM_Base_SetConfig+0x114>)
 800acfc:	4293      	cmp	r3, r2
 800acfe:	d00f      	beq.n	800ad20 <TIM_Base_SetConfig+0xf8>
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	4a12      	ldr	r2, [pc, #72]	; (800ad4c <TIM_Base_SetConfig+0x124>)
 800ad04:	4293      	cmp	r3, r2
 800ad06:	d00b      	beq.n	800ad20 <TIM_Base_SetConfig+0xf8>
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	4a11      	ldr	r2, [pc, #68]	; (800ad50 <TIM_Base_SetConfig+0x128>)
 800ad0c:	4293      	cmp	r3, r2
 800ad0e:	d007      	beq.n	800ad20 <TIM_Base_SetConfig+0xf8>
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	4a10      	ldr	r2, [pc, #64]	; (800ad54 <TIM_Base_SetConfig+0x12c>)
 800ad14:	4293      	cmp	r3, r2
 800ad16:	d003      	beq.n	800ad20 <TIM_Base_SetConfig+0xf8>
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	4a0f      	ldr	r2, [pc, #60]	; (800ad58 <TIM_Base_SetConfig+0x130>)
 800ad1c:	4293      	cmp	r3, r2
 800ad1e:	d103      	bne.n	800ad28 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ad20:	683b      	ldr	r3, [r7, #0]
 800ad22:	691a      	ldr	r2, [r3, #16]
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	2201      	movs	r2, #1
 800ad2c:	615a      	str	r2, [r3, #20]
}
 800ad2e:	bf00      	nop
 800ad30:	3714      	adds	r7, #20
 800ad32:	46bd      	mov	sp, r7
 800ad34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad38:	4770      	bx	lr
 800ad3a:	bf00      	nop
 800ad3c:	40012c00 	.word	0x40012c00
 800ad40:	40000400 	.word	0x40000400
 800ad44:	40000800 	.word	0x40000800
 800ad48:	40000c00 	.word	0x40000c00
 800ad4c:	40013400 	.word	0x40013400
 800ad50:	40014000 	.word	0x40014000
 800ad54:	40014400 	.word	0x40014400
 800ad58:	40014800 	.word	0x40014800

0800ad5c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ad5c:	b480      	push	{r7}
 800ad5e:	b087      	sub	sp, #28
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	60f8      	str	r0, [r7, #12]
 800ad64:	60b9      	str	r1, [r7, #8]
 800ad66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	6a1b      	ldr	r3, [r3, #32]
 800ad6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	6a1b      	ldr	r3, [r3, #32]
 800ad72:	f023 0201 	bic.w	r2, r3, #1
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	699b      	ldr	r3, [r3, #24]
 800ad7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ad80:	693b      	ldr	r3, [r7, #16]
 800ad82:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ad86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	011b      	lsls	r3, r3, #4
 800ad8c:	693a      	ldr	r2, [r7, #16]
 800ad8e:	4313      	orrs	r3, r2
 800ad90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ad92:	697b      	ldr	r3, [r7, #20]
 800ad94:	f023 030a 	bic.w	r3, r3, #10
 800ad98:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ad9a:	697a      	ldr	r2, [r7, #20]
 800ad9c:	68bb      	ldr	r3, [r7, #8]
 800ad9e:	4313      	orrs	r3, r2
 800ada0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	693a      	ldr	r2, [r7, #16]
 800ada6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	697a      	ldr	r2, [r7, #20]
 800adac:	621a      	str	r2, [r3, #32]
}
 800adae:	bf00      	nop
 800adb0:	371c      	adds	r7, #28
 800adb2:	46bd      	mov	sp, r7
 800adb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb8:	4770      	bx	lr

0800adba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800adba:	b480      	push	{r7}
 800adbc:	b087      	sub	sp, #28
 800adbe:	af00      	add	r7, sp, #0
 800adc0:	60f8      	str	r0, [r7, #12]
 800adc2:	60b9      	str	r1, [r7, #8]
 800adc4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	6a1b      	ldr	r3, [r3, #32]
 800adca:	f023 0210 	bic.w	r2, r3, #16
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	699b      	ldr	r3, [r3, #24]
 800add6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	6a1b      	ldr	r3, [r3, #32]
 800addc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800adde:	697b      	ldr	r3, [r7, #20]
 800ade0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ade4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	031b      	lsls	r3, r3, #12
 800adea:	697a      	ldr	r2, [r7, #20]
 800adec:	4313      	orrs	r3, r2
 800adee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800adf0:	693b      	ldr	r3, [r7, #16]
 800adf2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800adf6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800adf8:	68bb      	ldr	r3, [r7, #8]
 800adfa:	011b      	lsls	r3, r3, #4
 800adfc:	693a      	ldr	r2, [r7, #16]
 800adfe:	4313      	orrs	r3, r2
 800ae00:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	697a      	ldr	r2, [r7, #20]
 800ae06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	693a      	ldr	r2, [r7, #16]
 800ae0c:	621a      	str	r2, [r3, #32]
}
 800ae0e:	bf00      	nop
 800ae10:	371c      	adds	r7, #28
 800ae12:	46bd      	mov	sp, r7
 800ae14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae18:	4770      	bx	lr

0800ae1a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ae1a:	b480      	push	{r7}
 800ae1c:	b085      	sub	sp, #20
 800ae1e:	af00      	add	r7, sp, #0
 800ae20:	6078      	str	r0, [r7, #4]
 800ae22:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	689b      	ldr	r3, [r3, #8]
 800ae28:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae30:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ae32:	683a      	ldr	r2, [r7, #0]
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	4313      	orrs	r3, r2
 800ae38:	f043 0307 	orr.w	r3, r3, #7
 800ae3c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	68fa      	ldr	r2, [r7, #12]
 800ae42:	609a      	str	r2, [r3, #8]
}
 800ae44:	bf00      	nop
 800ae46:	3714      	adds	r7, #20
 800ae48:	46bd      	mov	sp, r7
 800ae4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae4e:	4770      	bx	lr

0800ae50 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ae50:	b480      	push	{r7}
 800ae52:	b087      	sub	sp, #28
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	60f8      	str	r0, [r7, #12]
 800ae58:	60b9      	str	r1, [r7, #8]
 800ae5a:	607a      	str	r2, [r7, #4]
 800ae5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	689b      	ldr	r3, [r3, #8]
 800ae62:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ae64:	697b      	ldr	r3, [r7, #20]
 800ae66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ae6a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ae6c:	683b      	ldr	r3, [r7, #0]
 800ae6e:	021a      	lsls	r2, r3, #8
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	431a      	orrs	r2, r3
 800ae74:	68bb      	ldr	r3, [r7, #8]
 800ae76:	4313      	orrs	r3, r2
 800ae78:	697a      	ldr	r2, [r7, #20]
 800ae7a:	4313      	orrs	r3, r2
 800ae7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	697a      	ldr	r2, [r7, #20]
 800ae82:	609a      	str	r2, [r3, #8]
}
 800ae84:	bf00      	nop
 800ae86:	371c      	adds	r7, #28
 800ae88:	46bd      	mov	sp, r7
 800ae8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae8e:	4770      	bx	lr

0800ae90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ae90:	b480      	push	{r7}
 800ae92:	b085      	sub	sp, #20
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	6078      	str	r0, [r7, #4]
 800ae98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aea0:	2b01      	cmp	r3, #1
 800aea2:	d101      	bne.n	800aea8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800aea4:	2302      	movs	r3, #2
 800aea6:	e068      	b.n	800af7a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	2201      	movs	r2, #1
 800aeac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	2202      	movs	r2, #2
 800aeb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	685b      	ldr	r3, [r3, #4]
 800aebe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	689b      	ldr	r3, [r3, #8]
 800aec6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	4a2e      	ldr	r2, [pc, #184]	; (800af88 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800aece:	4293      	cmp	r3, r2
 800aed0:	d004      	beq.n	800aedc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	4a2d      	ldr	r2, [pc, #180]	; (800af8c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800aed8:	4293      	cmp	r3, r2
 800aeda:	d108      	bne.n	800aeee <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800aee2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800aee4:	683b      	ldr	r3, [r7, #0]
 800aee6:	685b      	ldr	r3, [r3, #4]
 800aee8:	68fa      	ldr	r2, [r7, #12]
 800aeea:	4313      	orrs	r3, r2
 800aeec:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aef4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800aef6:	683b      	ldr	r3, [r7, #0]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	68fa      	ldr	r2, [r7, #12]
 800aefc:	4313      	orrs	r3, r2
 800aefe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	68fa      	ldr	r2, [r7, #12]
 800af06:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	4a1e      	ldr	r2, [pc, #120]	; (800af88 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800af0e:	4293      	cmp	r3, r2
 800af10:	d01d      	beq.n	800af4e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800af1a:	d018      	beq.n	800af4e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	4a1b      	ldr	r2, [pc, #108]	; (800af90 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800af22:	4293      	cmp	r3, r2
 800af24:	d013      	beq.n	800af4e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	4a1a      	ldr	r2, [pc, #104]	; (800af94 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800af2c:	4293      	cmp	r3, r2
 800af2e:	d00e      	beq.n	800af4e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	4a18      	ldr	r2, [pc, #96]	; (800af98 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800af36:	4293      	cmp	r3, r2
 800af38:	d009      	beq.n	800af4e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	4a13      	ldr	r2, [pc, #76]	; (800af8c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800af40:	4293      	cmp	r3, r2
 800af42:	d004      	beq.n	800af4e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	4a14      	ldr	r2, [pc, #80]	; (800af9c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800af4a:	4293      	cmp	r3, r2
 800af4c:	d10c      	bne.n	800af68 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800af4e:	68bb      	ldr	r3, [r7, #8]
 800af50:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800af54:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800af56:	683b      	ldr	r3, [r7, #0]
 800af58:	689b      	ldr	r3, [r3, #8]
 800af5a:	68ba      	ldr	r2, [r7, #8]
 800af5c:	4313      	orrs	r3, r2
 800af5e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	68ba      	ldr	r2, [r7, #8]
 800af66:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	2201      	movs	r2, #1
 800af6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	2200      	movs	r2, #0
 800af74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800af78:	2300      	movs	r3, #0
}
 800af7a:	4618      	mov	r0, r3
 800af7c:	3714      	adds	r7, #20
 800af7e:	46bd      	mov	sp, r7
 800af80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af84:	4770      	bx	lr
 800af86:	bf00      	nop
 800af88:	40012c00 	.word	0x40012c00
 800af8c:	40013400 	.word	0x40013400
 800af90:	40000400 	.word	0x40000400
 800af94:	40000800 	.word	0x40000800
 800af98:	40000c00 	.word	0x40000c00
 800af9c:	40014000 	.word	0x40014000

0800afa0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800afa0:	b480      	push	{r7}
 800afa2:	b083      	sub	sp, #12
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800afa8:	bf00      	nop
 800afaa:	370c      	adds	r7, #12
 800afac:	46bd      	mov	sp, r7
 800afae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb2:	4770      	bx	lr

0800afb4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800afb4:	b480      	push	{r7}
 800afb6:	b083      	sub	sp, #12
 800afb8:	af00      	add	r7, sp, #0
 800afba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800afbc:	bf00      	nop
 800afbe:	370c      	adds	r7, #12
 800afc0:	46bd      	mov	sp, r7
 800afc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc6:	4770      	bx	lr

0800afc8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800afc8:	b480      	push	{r7}
 800afca:	b083      	sub	sp, #12
 800afcc:	af00      	add	r7, sp, #0
 800afce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800afd0:	bf00      	nop
 800afd2:	370c      	adds	r7, #12
 800afd4:	46bd      	mov	sp, r7
 800afd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afda:	4770      	bx	lr

0800afdc <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800afdc:	b084      	sub	sp, #16
 800afde:	b480      	push	{r7}
 800afe0:	b085      	sub	sp, #20
 800afe2:	af00      	add	r7, sp, #0
 800afe4:	6078      	str	r0, [r7, #4]
 800afe6:	f107 001c 	add.w	r0, r7, #28
 800afea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800afee:	2300      	movs	r3, #0
 800aff0:	60fb      	str	r3, [r7, #12]

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
#endif
  tmpreg |= (Init.ClockEdge           |\
 800aff2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 800aff4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800aff6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800aff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 800affa:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800affc:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 800affe:	431a      	orrs	r2, r3
             Init.ClockDiv
 800b000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 800b002:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800b004:	68fa      	ldr	r2, [r7, #12]
 800b006:	4313      	orrs	r3, r2
 800b008:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	685a      	ldr	r2, [r3, #4]
 800b00e:	4b07      	ldr	r3, [pc, #28]	; (800b02c <SDMMC_Init+0x50>)
 800b010:	4013      	ands	r3, r2
 800b012:	68fa      	ldr	r2, [r7, #12]
 800b014:	431a      	orrs	r2, r3
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800b01a:	2300      	movs	r3, #0
}
 800b01c:	4618      	mov	r0, r3
 800b01e:	3714      	adds	r7, #20
 800b020:	46bd      	mov	sp, r7
 800b022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b026:	b004      	add	sp, #16
 800b028:	4770      	bx	lr
 800b02a:	bf00      	nop
 800b02c:	ffc02c00 	.word	0xffc02c00

0800b030 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800b030:	b480      	push	{r7}
 800b032:	b083      	sub	sp, #12
 800b034:	af00      	add	r7, sp, #0
 800b036:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800b03e:	4618      	mov	r0, r3
 800b040:	370c      	adds	r7, #12
 800b042:	46bd      	mov	sp, r7
 800b044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b048:	4770      	bx	lr

0800b04a <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800b04a:	b480      	push	{r7}
 800b04c:	b083      	sub	sp, #12
 800b04e:	af00      	add	r7, sp, #0
 800b050:	6078      	str	r0, [r7, #4]
 800b052:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800b054:	683b      	ldr	r3, [r7, #0]
 800b056:	681a      	ldr	r2, [r3, #0]
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b05e:	2300      	movs	r3, #0
}
 800b060:	4618      	mov	r0, r3
 800b062:	370c      	adds	r7, #12
 800b064:	46bd      	mov	sp, r7
 800b066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b06a:	4770      	bx	lr

0800b06c <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800b06c:	b580      	push	{r7, lr}
 800b06e:	b082      	sub	sp, #8
 800b070:	af00      	add	r7, sp, #0
 800b072:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	f043 0203 	orr.w	r2, r3, #3
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	601a      	str	r2, [r3, #0]
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800b080:	2002      	movs	r0, #2
 800b082:	f7f7 f8f1 	bl	8002268 <HAL_Delay>

  return HAL_OK;
 800b086:	2300      	movs	r3, #0
}
 800b088:	4618      	mov	r0, r3
 800b08a:	3708      	adds	r7, #8
 800b08c:	46bd      	mov	sp, r7
 800b08e:	bd80      	pop	{r7, pc}

0800b090 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800b090:	b480      	push	{r7}
 800b092:	b083      	sub	sp, #12
 800b094:	af00      	add	r7, sp, #0
 800b096:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	f003 0303 	and.w	r3, r3, #3
}
 800b0a0:	4618      	mov	r0, r3
 800b0a2:	370c      	adds	r7, #12
 800b0a4:	46bd      	mov	sp, r7
 800b0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0aa:	4770      	bx	lr

0800b0ac <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800b0ac:	b480      	push	{r7}
 800b0ae:	b085      	sub	sp, #20
 800b0b0:	af00      	add	r7, sp, #0
 800b0b2:	6078      	str	r0, [r7, #4]
 800b0b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800b0ba:	683b      	ldr	r3, [r7, #0]
 800b0bc:	681a      	ldr	r2, [r3, #0]
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b0c2:	683b      	ldr	r3, [r7, #0]
 800b0c4:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800b0c6:	683b      	ldr	r3, [r7, #0]
 800b0c8:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b0ca:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800b0cc:	683b      	ldr	r3, [r7, #0]
 800b0ce:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800b0d0:	431a      	orrs	r2, r3
                       Command->CPSM);
 800b0d2:	683b      	ldr	r3, [r7, #0]
 800b0d4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800b0d6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b0d8:	68fa      	ldr	r2, [r7, #12]
 800b0da:	4313      	orrs	r3, r2
 800b0dc:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	68da      	ldr	r2, [r3, #12]
 800b0e2:	4b06      	ldr	r3, [pc, #24]	; (800b0fc <SDMMC_SendCommand+0x50>)
 800b0e4:	4013      	ands	r3, r2
 800b0e6:	68fa      	ldr	r2, [r7, #12]
 800b0e8:	431a      	orrs	r2, r3
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b0ee:	2300      	movs	r3, #0
}
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	3714      	adds	r7, #20
 800b0f4:	46bd      	mov	sp, r7
 800b0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0fa:	4770      	bx	lr
 800b0fc:	fffee0c0 	.word	0xfffee0c0

0800b100 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800b100:	b480      	push	{r7}
 800b102:	b083      	sub	sp, #12
 800b104:	af00      	add	r7, sp, #0
 800b106:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	691b      	ldr	r3, [r3, #16]
 800b10c:	b2db      	uxtb	r3, r3
}
 800b10e:	4618      	mov	r0, r3
 800b110:	370c      	adds	r7, #12
 800b112:	46bd      	mov	sp, r7
 800b114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b118:	4770      	bx	lr

0800b11a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800b11a:	b480      	push	{r7}
 800b11c:	b085      	sub	sp, #20
 800b11e:	af00      	add	r7, sp, #0
 800b120:	6078      	str	r0, [r7, #4]
 800b122:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	3314      	adds	r3, #20
 800b128:	461a      	mov	r2, r3
 800b12a:	683b      	ldr	r3, [r7, #0]
 800b12c:	4413      	add	r3, r2
 800b12e:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	681b      	ldr	r3, [r3, #0]
}
 800b134:	4618      	mov	r0, r3
 800b136:	3714      	adds	r7, #20
 800b138:	46bd      	mov	sp, r7
 800b13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b13e:	4770      	bx	lr

0800b140 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800b140:	b480      	push	{r7}
 800b142:	b085      	sub	sp, #20
 800b144:	af00      	add	r7, sp, #0
 800b146:	6078      	str	r0, [r7, #4]
 800b148:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b14a:	2300      	movs	r3, #0
 800b14c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800b14e:	683b      	ldr	r3, [r7, #0]
 800b150:	681a      	ldr	r2, [r3, #0]
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800b156:	683b      	ldr	r3, [r7, #0]
 800b158:	685a      	ldr	r2, [r3, #4]
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b15e:	683b      	ldr	r3, [r7, #0]
 800b160:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800b162:	683b      	ldr	r3, [r7, #0]
 800b164:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b166:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800b168:	683b      	ldr	r3, [r7, #0]
 800b16a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800b16c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800b16e:	683b      	ldr	r3, [r7, #0]
 800b170:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800b172:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b174:	68fa      	ldr	r2, [r7, #12]
 800b176:	4313      	orrs	r3, r2
 800b178:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b17e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	431a      	orrs	r2, r3
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800b18a:	2300      	movs	r3, #0

}
 800b18c:	4618      	mov	r0, r3
 800b18e:	3714      	adds	r7, #20
 800b190:	46bd      	mov	sp, r7
 800b192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b196:	4770      	bx	lr

0800b198 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800b198:	b580      	push	{r7, lr}
 800b19a:	b088      	sub	sp, #32
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	6078      	str	r0, [r7, #4]
 800b1a0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800b1a2:	683b      	ldr	r3, [r7, #0]
 800b1a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800b1a6:	2310      	movs	r3, #16
 800b1a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b1aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b1ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b1b0:	2300      	movs	r3, #0
 800b1b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b1b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b1b8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b1ba:	f107 0308 	add.w	r3, r7, #8
 800b1be:	4619      	mov	r1, r3
 800b1c0:	6878      	ldr	r0, [r7, #4]
 800b1c2:	f7ff ff73 	bl	800b0ac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800b1c6:	f241 3288 	movw	r2, #5000	; 0x1388
 800b1ca:	2110      	movs	r1, #16
 800b1cc:	6878      	ldr	r0, [r7, #4]
 800b1ce:	f000 fa7b 	bl	800b6c8 <SDMMC_GetCmdResp1>
 800b1d2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b1d4:	69fb      	ldr	r3, [r7, #28]
}
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	3720      	adds	r7, #32
 800b1da:	46bd      	mov	sp, r7
 800b1dc:	bd80      	pop	{r7, pc}

0800b1de <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800b1de:	b580      	push	{r7, lr}
 800b1e0:	b088      	sub	sp, #32
 800b1e2:	af00      	add	r7, sp, #0
 800b1e4:	6078      	str	r0, [r7, #4]
 800b1e6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b1e8:	683b      	ldr	r3, [r7, #0]
 800b1ea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800b1ec:	2311      	movs	r3, #17
 800b1ee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b1f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b1f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b1f6:	2300      	movs	r3, #0
 800b1f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b1fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b1fe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b200:	f107 0308 	add.w	r3, r7, #8
 800b204:	4619      	mov	r1, r3
 800b206:	6878      	ldr	r0, [r7, #4]
 800b208:	f7ff ff50 	bl	800b0ac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800b20c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b210:	2111      	movs	r1, #17
 800b212:	6878      	ldr	r0, [r7, #4]
 800b214:	f000 fa58 	bl	800b6c8 <SDMMC_GetCmdResp1>
 800b218:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b21a:	69fb      	ldr	r3, [r7, #28]
}
 800b21c:	4618      	mov	r0, r3
 800b21e:	3720      	adds	r7, #32
 800b220:	46bd      	mov	sp, r7
 800b222:	bd80      	pop	{r7, pc}

0800b224 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800b224:	b580      	push	{r7, lr}
 800b226:	b088      	sub	sp, #32
 800b228:	af00      	add	r7, sp, #0
 800b22a:	6078      	str	r0, [r7, #4]
 800b22c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b22e:	683b      	ldr	r3, [r7, #0]
 800b230:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800b232:	2312      	movs	r3, #18
 800b234:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b236:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b23a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b23c:	2300      	movs	r3, #0
 800b23e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b240:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b244:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b246:	f107 0308 	add.w	r3, r7, #8
 800b24a:	4619      	mov	r1, r3
 800b24c:	6878      	ldr	r0, [r7, #4]
 800b24e:	f7ff ff2d 	bl	800b0ac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800b252:	f241 3288 	movw	r2, #5000	; 0x1388
 800b256:	2112      	movs	r1, #18
 800b258:	6878      	ldr	r0, [r7, #4]
 800b25a:	f000 fa35 	bl	800b6c8 <SDMMC_GetCmdResp1>
 800b25e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b260:	69fb      	ldr	r3, [r7, #28]
}
 800b262:	4618      	mov	r0, r3
 800b264:	3720      	adds	r7, #32
 800b266:	46bd      	mov	sp, r7
 800b268:	bd80      	pop	{r7, pc}

0800b26a <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800b26a:	b580      	push	{r7, lr}
 800b26c:	b088      	sub	sp, #32
 800b26e:	af00      	add	r7, sp, #0
 800b270:	6078      	str	r0, [r7, #4]
 800b272:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b274:	683b      	ldr	r3, [r7, #0]
 800b276:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800b278:	2318      	movs	r3, #24
 800b27a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b27c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b280:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b282:	2300      	movs	r3, #0
 800b284:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b286:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b28a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b28c:	f107 0308 	add.w	r3, r7, #8
 800b290:	4619      	mov	r1, r3
 800b292:	6878      	ldr	r0, [r7, #4]
 800b294:	f7ff ff0a 	bl	800b0ac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800b298:	f241 3288 	movw	r2, #5000	; 0x1388
 800b29c:	2118      	movs	r1, #24
 800b29e:	6878      	ldr	r0, [r7, #4]
 800b2a0:	f000 fa12 	bl	800b6c8 <SDMMC_GetCmdResp1>
 800b2a4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b2a6:	69fb      	ldr	r3, [r7, #28]
}
 800b2a8:	4618      	mov	r0, r3
 800b2aa:	3720      	adds	r7, #32
 800b2ac:	46bd      	mov	sp, r7
 800b2ae:	bd80      	pop	{r7, pc}

0800b2b0 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800b2b0:	b580      	push	{r7, lr}
 800b2b2:	b088      	sub	sp, #32
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	6078      	str	r0, [r7, #4]
 800b2b8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b2ba:	683b      	ldr	r3, [r7, #0]
 800b2bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800b2be:	2319      	movs	r3, #25
 800b2c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b2c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b2c6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b2c8:	2300      	movs	r3, #0
 800b2ca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b2cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b2d0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b2d2:	f107 0308 	add.w	r3, r7, #8
 800b2d6:	4619      	mov	r1, r3
 800b2d8:	6878      	ldr	r0, [r7, #4]
 800b2da:	f7ff fee7 	bl	800b0ac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800b2de:	f241 3288 	movw	r2, #5000	; 0x1388
 800b2e2:	2119      	movs	r1, #25
 800b2e4:	6878      	ldr	r0, [r7, #4]
 800b2e6:	f000 f9ef 	bl	800b6c8 <SDMMC_GetCmdResp1>
 800b2ea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b2ec:	69fb      	ldr	r3, [r7, #28]
}
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	3720      	adds	r7, #32
 800b2f2:	46bd      	mov	sp, r7
 800b2f4:	bd80      	pop	{r7, pc}
	...

0800b2f8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800b2f8:	b580      	push	{r7, lr}
 800b2fa:	b088      	sub	sp, #32
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800b300:	2300      	movs	r3, #0
 800b302:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800b304:	230c      	movs	r3, #12
 800b306:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b308:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b30c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b30e:	2300      	movs	r3, #0
 800b310:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b312:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b316:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	68db      	ldr	r3, [r3, #12]
 800b31c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	68db      	ldr	r3, [r3, #12]
 800b328:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b330:	f107 0308 	add.w	r3, r7, #8
 800b334:	4619      	mov	r1, r3
 800b336:	6878      	ldr	r0, [r7, #4]
 800b338:	f7ff feb8 	bl	800b0ac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800b33c:	4a08      	ldr	r2, [pc, #32]	; (800b360 <SDMMC_CmdStopTransfer+0x68>)
 800b33e:	210c      	movs	r1, #12
 800b340:	6878      	ldr	r0, [r7, #4]
 800b342:	f000 f9c1 	bl	800b6c8 <SDMMC_GetCmdResp1>
 800b346:	61f8      	str	r0, [r7, #28]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	68db      	ldr	r3, [r3, #12]
 800b34c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  return errorstate;
 800b354:	69fb      	ldr	r3, [r7, #28]
}
 800b356:	4618      	mov	r0, r3
 800b358:	3720      	adds	r7, #32
 800b35a:	46bd      	mov	sp, r7
 800b35c:	bd80      	pop	{r7, pc}
 800b35e:	bf00      	nop
 800b360:	05f5e100 	.word	0x05f5e100

0800b364 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800b364:	b580      	push	{r7, lr}
 800b366:	b08a      	sub	sp, #40	; 0x28
 800b368:	af00      	add	r7, sp, #0
 800b36a:	60f8      	str	r0, [r7, #12]
 800b36c:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800b370:	683b      	ldr	r3, [r7, #0]
 800b372:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800b374:	2307      	movs	r3, #7
 800b376:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b378:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b37c:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b37e:	2300      	movs	r3, #0
 800b380:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b382:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b386:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b388:	f107 0310 	add.w	r3, r7, #16
 800b38c:	4619      	mov	r1, r3
 800b38e:	68f8      	ldr	r0, [r7, #12]
 800b390:	f7ff fe8c 	bl	800b0ac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800b394:	f241 3288 	movw	r2, #5000	; 0x1388
 800b398:	2107      	movs	r1, #7
 800b39a:	68f8      	ldr	r0, [r7, #12]
 800b39c:	f000 f994 	bl	800b6c8 <SDMMC_GetCmdResp1>
 800b3a0:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800b3a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b3a4:	4618      	mov	r0, r3
 800b3a6:	3728      	adds	r7, #40	; 0x28
 800b3a8:	46bd      	mov	sp, r7
 800b3aa:	bd80      	pop	{r7, pc}

0800b3ac <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800b3ac:	b580      	push	{r7, lr}
 800b3ae:	b088      	sub	sp, #32
 800b3b0:	af00      	add	r7, sp, #0
 800b3b2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800b3b4:	2300      	movs	r3, #0
 800b3b6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800b3b8:	2300      	movs	r3, #0
 800b3ba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800b3bc:	2300      	movs	r3, #0
 800b3be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b3c0:	2300      	movs	r3, #0
 800b3c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b3c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b3c8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b3ca:	f107 0308 	add.w	r3, r7, #8
 800b3ce:	4619      	mov	r1, r3
 800b3d0:	6878      	ldr	r0, [r7, #4]
 800b3d2:	f7ff fe6b 	bl	800b0ac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800b3d6:	6878      	ldr	r0, [r7, #4]
 800b3d8:	f000 fbb8 	bl	800bb4c <SDMMC_GetCmdError>
 800b3dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b3de:	69fb      	ldr	r3, [r7, #28]
}
 800b3e0:	4618      	mov	r0, r3
 800b3e2:	3720      	adds	r7, #32
 800b3e4:	46bd      	mov	sp, r7
 800b3e6:	bd80      	pop	{r7, pc}

0800b3e8 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800b3e8:	b580      	push	{r7, lr}
 800b3ea:	b088      	sub	sp, #32
 800b3ec:	af00      	add	r7, sp, #0
 800b3ee:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800b3f0:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800b3f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800b3f6:	2308      	movs	r3, #8
 800b3f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b3fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b3fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b400:	2300      	movs	r3, #0
 800b402:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b404:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b408:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b40a:	f107 0308 	add.w	r3, r7, #8
 800b40e:	4619      	mov	r1, r3
 800b410:	6878      	ldr	r0, [r7, #4]
 800b412:	f7ff fe4b 	bl	800b0ac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800b416:	6878      	ldr	r0, [r7, #4]
 800b418:	f000 fb4a 	bl	800bab0 <SDMMC_GetCmdResp7>
 800b41c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b41e:	69fb      	ldr	r3, [r7, #28]
}
 800b420:	4618      	mov	r0, r3
 800b422:	3720      	adds	r7, #32
 800b424:	46bd      	mov	sp, r7
 800b426:	bd80      	pop	{r7, pc}

0800b428 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b428:	b580      	push	{r7, lr}
 800b42a:	b088      	sub	sp, #32
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	6078      	str	r0, [r7, #4]
 800b430:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800b432:	683b      	ldr	r3, [r7, #0]
 800b434:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800b436:	2337      	movs	r3, #55	; 0x37
 800b438:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b43a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b43e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b440:	2300      	movs	r3, #0
 800b442:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b444:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b448:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b44a:	f107 0308 	add.w	r3, r7, #8
 800b44e:	4619      	mov	r1, r3
 800b450:	6878      	ldr	r0, [r7, #4]
 800b452:	f7ff fe2b 	bl	800b0ac <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800b456:	f241 3288 	movw	r2, #5000	; 0x1388
 800b45a:	2137      	movs	r1, #55	; 0x37
 800b45c:	6878      	ldr	r0, [r7, #4]
 800b45e:	f000 f933 	bl	800b6c8 <SDMMC_GetCmdResp1>
 800b462:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b464:	69fb      	ldr	r3, [r7, #28]
}
 800b466:	4618      	mov	r0, r3
 800b468:	3720      	adds	r7, #32
 800b46a:	46bd      	mov	sp, r7
 800b46c:	bd80      	pop	{r7, pc}

0800b46e <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b46e:	b580      	push	{r7, lr}
 800b470:	b088      	sub	sp, #32
 800b472:	af00      	add	r7, sp, #0
 800b474:	6078      	str	r0, [r7, #4]
 800b476:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
 800b478:	683b      	ldr	r3, [r7, #0]
 800b47a:	60bb      	str	r3, [r7, #8]
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800b47c:	2329      	movs	r3, #41	; 0x29
 800b47e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b480:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b484:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b486:	2300      	movs	r3, #0
 800b488:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b48a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b48e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b490:	f107 0308 	add.w	r3, r7, #8
 800b494:	4619      	mov	r1, r3
 800b496:	6878      	ldr	r0, [r7, #4]
 800b498:	f7ff fe08 	bl	800b0ac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800b49c:	6878      	ldr	r0, [r7, #4]
 800b49e:	f000 fa4f 	bl	800b940 <SDMMC_GetCmdResp3>
 800b4a2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b4a4:	69fb      	ldr	r3, [r7, #28]
}
 800b4a6:	4618      	mov	r0, r3
 800b4a8:	3720      	adds	r7, #32
 800b4aa:	46bd      	mov	sp, r7
 800b4ac:	bd80      	pop	{r7, pc}

0800b4ae <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800b4ae:	b580      	push	{r7, lr}
 800b4b0:	b088      	sub	sp, #32
 800b4b2:	af00      	add	r7, sp, #0
 800b4b4:	6078      	str	r0, [r7, #4]
 800b4b6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800b4b8:	683b      	ldr	r3, [r7, #0]
 800b4ba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800b4bc:	2306      	movs	r3, #6
 800b4be:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b4c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b4c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b4c6:	2300      	movs	r3, #0
 800b4c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b4ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b4ce:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b4d0:	f107 0308 	add.w	r3, r7, #8
 800b4d4:	4619      	mov	r1, r3
 800b4d6:	6878      	ldr	r0, [r7, #4]
 800b4d8:	f7ff fde8 	bl	800b0ac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800b4dc:	f241 3288 	movw	r2, #5000	; 0x1388
 800b4e0:	2106      	movs	r1, #6
 800b4e2:	6878      	ldr	r0, [r7, #4]
 800b4e4:	f000 f8f0 	bl	800b6c8 <SDMMC_GetCmdResp1>
 800b4e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b4ea:	69fb      	ldr	r3, [r7, #28]
}
 800b4ec:	4618      	mov	r0, r3
 800b4ee:	3720      	adds	r7, #32
 800b4f0:	46bd      	mov	sp, r7
 800b4f2:	bd80      	pop	{r7, pc}

0800b4f4 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800b4f4:	b580      	push	{r7, lr}
 800b4f6:	b088      	sub	sp, #32
 800b4f8:	af00      	add	r7, sp, #0
 800b4fa:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800b4fc:	2300      	movs	r3, #0
 800b4fe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800b500:	2333      	movs	r3, #51	; 0x33
 800b502:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b504:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b508:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b50a:	2300      	movs	r3, #0
 800b50c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b50e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b512:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b514:	f107 0308 	add.w	r3, r7, #8
 800b518:	4619      	mov	r1, r3
 800b51a:	6878      	ldr	r0, [r7, #4]
 800b51c:	f7ff fdc6 	bl	800b0ac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800b520:	f241 3288 	movw	r2, #5000	; 0x1388
 800b524:	2133      	movs	r1, #51	; 0x33
 800b526:	6878      	ldr	r0, [r7, #4]
 800b528:	f000 f8ce 	bl	800b6c8 <SDMMC_GetCmdResp1>
 800b52c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b52e:	69fb      	ldr	r3, [r7, #28]
}
 800b530:	4618      	mov	r0, r3
 800b532:	3720      	adds	r7, #32
 800b534:	46bd      	mov	sp, r7
 800b536:	bd80      	pop	{r7, pc}

0800b538 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800b538:	b580      	push	{r7, lr}
 800b53a:	b088      	sub	sp, #32
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800b540:	2300      	movs	r3, #0
 800b542:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800b544:	2302      	movs	r3, #2
 800b546:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b548:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b54c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b54e:	2300      	movs	r3, #0
 800b550:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b552:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b556:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b558:	f107 0308 	add.w	r3, r7, #8
 800b55c:	4619      	mov	r1, r3
 800b55e:	6878      	ldr	r0, [r7, #4]
 800b560:	f7ff fda4 	bl	800b0ac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b564:	6878      	ldr	r0, [r7, #4]
 800b566:	f000 f9a1 	bl	800b8ac <SDMMC_GetCmdResp2>
 800b56a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b56c:	69fb      	ldr	r3, [r7, #28]
}
 800b56e:	4618      	mov	r0, r3
 800b570:	3720      	adds	r7, #32
 800b572:	46bd      	mov	sp, r7
 800b574:	bd80      	pop	{r7, pc}

0800b576 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b576:	b580      	push	{r7, lr}
 800b578:	b088      	sub	sp, #32
 800b57a:	af00      	add	r7, sp, #0
 800b57c:	6078      	str	r0, [r7, #4]
 800b57e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800b580:	683b      	ldr	r3, [r7, #0]
 800b582:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800b584:	2309      	movs	r3, #9
 800b586:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b588:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b58c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b58e:	2300      	movs	r3, #0
 800b590:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b592:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b596:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b598:	f107 0308 	add.w	r3, r7, #8
 800b59c:	4619      	mov	r1, r3
 800b59e:	6878      	ldr	r0, [r7, #4]
 800b5a0:	f7ff fd84 	bl	800b0ac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b5a4:	6878      	ldr	r0, [r7, #4]
 800b5a6:	f000 f981 	bl	800b8ac <SDMMC_GetCmdResp2>
 800b5aa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b5ac:	69fb      	ldr	r3, [r7, #28]
}
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	3720      	adds	r7, #32
 800b5b2:	46bd      	mov	sp, r7
 800b5b4:	bd80      	pop	{r7, pc}

0800b5b6 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800b5b6:	b580      	push	{r7, lr}
 800b5b8:	b088      	sub	sp, #32
 800b5ba:	af00      	add	r7, sp, #0
 800b5bc:	6078      	str	r0, [r7, #4]
 800b5be:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800b5c0:	2300      	movs	r3, #0
 800b5c2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800b5c4:	2303      	movs	r3, #3
 800b5c6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b5c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b5cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b5d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b5d6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b5d8:	f107 0308 	add.w	r3, r7, #8
 800b5dc:	4619      	mov	r1, r3
 800b5de:	6878      	ldr	r0, [r7, #4]
 800b5e0:	f7ff fd64 	bl	800b0ac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800b5e4:	683a      	ldr	r2, [r7, #0]
 800b5e6:	2103      	movs	r1, #3
 800b5e8:	6878      	ldr	r0, [r7, #4]
 800b5ea:	f000 f9e9 	bl	800b9c0 <SDMMC_GetCmdResp6>
 800b5ee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b5f0:	69fb      	ldr	r3, [r7, #28]
}
 800b5f2:	4618      	mov	r0, r3
 800b5f4:	3720      	adds	r7, #32
 800b5f6:	46bd      	mov	sp, r7
 800b5f8:	bd80      	pop	{r7, pc}

0800b5fa <SDMMC_CmdSendStatus>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b5fa:	b580      	push	{r7, lr}
 800b5fc:	b088      	sub	sp, #32
 800b5fe:	af00      	add	r7, sp, #0
 800b600:	6078      	str	r0, [r7, #4]
 800b602:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800b604:	683b      	ldr	r3, [r7, #0]
 800b606:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800b608:	230d      	movs	r3, #13
 800b60a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b60c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b610:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b612:	2300      	movs	r3, #0
 800b614:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b616:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b61a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b61c:	f107 0308 	add.w	r3, r7, #8
 800b620:	4619      	mov	r1, r3
 800b622:	6878      	ldr	r0, [r7, #4]
 800b624:	f7ff fd42 	bl	800b0ac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800b628:	f241 3288 	movw	r2, #5000	; 0x1388
 800b62c:	210d      	movs	r1, #13
 800b62e:	6878      	ldr	r0, [r7, #4]
 800b630:	f000 f84a 	bl	800b6c8 <SDMMC_GetCmdResp1>
 800b634:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b636:	69fb      	ldr	r3, [r7, #28]
}
 800b638:	4618      	mov	r0, r3
 800b63a:	3720      	adds	r7, #32
 800b63c:	46bd      	mov	sp, r7
 800b63e:	bd80      	pop	{r7, pc}

0800b640 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800b640:	b580      	push	{r7, lr}
 800b642:	b088      	sub	sp, #32
 800b644:	af00      	add	r7, sp, #0
 800b646:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800b648:	2300      	movs	r3, #0
 800b64a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800b64c:	230d      	movs	r3, #13
 800b64e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b650:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b654:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b656:	2300      	movs	r3, #0
 800b658:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b65a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b65e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b660:	f107 0308 	add.w	r3, r7, #8
 800b664:	4619      	mov	r1, r3
 800b666:	6878      	ldr	r0, [r7, #4]
 800b668:	f7ff fd20 	bl	800b0ac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800b66c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b670:	210d      	movs	r1, #13
 800b672:	6878      	ldr	r0, [r7, #4]
 800b674:	f000 f828 	bl	800b6c8 <SDMMC_GetCmdResp1>
 800b678:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b67a:	69fb      	ldr	r3, [r7, #28]
}
 800b67c:	4618      	mov	r0, r3
 800b67e:	3720      	adds	r7, #32
 800b680:	46bd      	mov	sp, r7
 800b682:	bd80      	pop	{r7, pc}

0800b684 <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 800b684:	b580      	push	{r7, lr}
 800b686:	b088      	sub	sp, #32
 800b688:	af00      	add	r7, sp, #0
 800b68a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 800b68c:	2300      	movs	r3, #0
 800b68e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 800b690:	230b      	movs	r3, #11
 800b692:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b694:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b698:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b69a:	2300      	movs	r3, #0
 800b69c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b69e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b6a2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b6a4:	f107 0308 	add.w	r3, r7, #8
 800b6a8:	4619      	mov	r1, r3
 800b6aa:	6878      	ldr	r0, [r7, #4]
 800b6ac:	f7ff fcfe 	bl	800b0ac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 800b6b0:	f241 3288 	movw	r2, #5000	; 0x1388
 800b6b4:	210b      	movs	r1, #11
 800b6b6:	6878      	ldr	r0, [r7, #4]
 800b6b8:	f000 f806 	bl	800b6c8 <SDMMC_GetCmdResp1>
 800b6bc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b6be:	69fb      	ldr	r3, [r7, #28]
}
 800b6c0:	4618      	mov	r0, r3
 800b6c2:	3720      	adds	r7, #32
 800b6c4:	46bd      	mov	sp, r7
 800b6c6:	bd80      	pop	{r7, pc}

0800b6c8 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800b6c8:	b580      	push	{r7, lr}
 800b6ca:	b088      	sub	sp, #32
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	60f8      	str	r0, [r7, #12]
 800b6d0:	460b      	mov	r3, r1
 800b6d2:	607a      	str	r2, [r7, #4]
 800b6d4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b6d6:	4b70      	ldr	r3, [pc, #448]	; (800b898 <SDMMC_GetCmdResp1+0x1d0>)
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	4a70      	ldr	r2, [pc, #448]	; (800b89c <SDMMC_GetCmdResp1+0x1d4>)
 800b6dc:	fba2 2303 	umull	r2, r3, r2, r3
 800b6e0:	0a5a      	lsrs	r2, r3, #9
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	fb02 f303 	mul.w	r3, r2, r3
 800b6e8:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800b6ea:	69fb      	ldr	r3, [r7, #28]
 800b6ec:	1e5a      	subs	r2, r3, #1
 800b6ee:	61fa      	str	r2, [r7, #28]
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d102      	bne.n	800b6fa <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b6f4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b6f8:	e0c9      	b.n	800b88e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b6fe:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800b700:	69ba      	ldr	r2, [r7, #24]
 800b702:	4b67      	ldr	r3, [pc, #412]	; (800b8a0 <SDMMC_GetCmdResp1+0x1d8>)
 800b704:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b706:	2b00      	cmp	r3, #0
 800b708:	d0ef      	beq.n	800b6ea <SDMMC_GetCmdResp1+0x22>
 800b70a:	69bb      	ldr	r3, [r7, #24]
 800b70c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800b710:	2b00      	cmp	r3, #0
 800b712:	d1ea      	bne.n	800b6ea <SDMMC_GetCmdResp1+0x22>
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b718:	f003 0304 	and.w	r3, r3, #4
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d004      	beq.n	800b72a <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	2204      	movs	r2, #4
 800b724:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b726:	2304      	movs	r3, #4
 800b728:	e0b1      	b.n	800b88e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b72e:	f003 0301 	and.w	r3, r3, #1
 800b732:	2b00      	cmp	r3, #0
 800b734:	d004      	beq.n	800b740 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	2201      	movs	r2, #1
 800b73a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b73c:	2301      	movs	r3, #1
 800b73e:	e0a6      	b.n	800b88e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	4a58      	ldr	r2, [pc, #352]	; (800b8a4 <SDMMC_GetCmdResp1+0x1dc>)
 800b744:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b746:	68f8      	ldr	r0, [r7, #12]
 800b748:	f7ff fcda 	bl	800b100 <SDMMC_GetCommandResponse>
 800b74c:	4603      	mov	r3, r0
 800b74e:	461a      	mov	r2, r3
 800b750:	7afb      	ldrb	r3, [r7, #11]
 800b752:	4293      	cmp	r3, r2
 800b754:	d001      	beq.n	800b75a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b756:	2301      	movs	r3, #1
 800b758:	e099      	b.n	800b88e <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b75a:	2100      	movs	r1, #0
 800b75c:	68f8      	ldr	r0, [r7, #12]
 800b75e:	f7ff fcdc 	bl	800b11a <SDMMC_GetResponse>
 800b762:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b764:	697a      	ldr	r2, [r7, #20]
 800b766:	4b50      	ldr	r3, [pc, #320]	; (800b8a8 <SDMMC_GetCmdResp1+0x1e0>)
 800b768:	4013      	ands	r3, r2
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d101      	bne.n	800b772 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800b76e:	2300      	movs	r3, #0
 800b770:	e08d      	b.n	800b88e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b772:	697b      	ldr	r3, [r7, #20]
 800b774:	2b00      	cmp	r3, #0
 800b776:	da02      	bge.n	800b77e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b778:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b77c:	e087      	b.n	800b88e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b77e:	697b      	ldr	r3, [r7, #20]
 800b780:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b784:	2b00      	cmp	r3, #0
 800b786:	d001      	beq.n	800b78c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b788:	2340      	movs	r3, #64	; 0x40
 800b78a:	e080      	b.n	800b88e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b78c:	697b      	ldr	r3, [r7, #20]
 800b78e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b792:	2b00      	cmp	r3, #0
 800b794:	d001      	beq.n	800b79a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b796:	2380      	movs	r3, #128	; 0x80
 800b798:	e079      	b.n	800b88e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b79a:	697b      	ldr	r3, [r7, #20]
 800b79c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d002      	beq.n	800b7aa <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b7a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b7a8:	e071      	b.n	800b88e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b7aa:	697b      	ldr	r3, [r7, #20]
 800b7ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d002      	beq.n	800b7ba <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b7b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b7b8:	e069      	b.n	800b88e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b7ba:	697b      	ldr	r3, [r7, #20]
 800b7bc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d002      	beq.n	800b7ca <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b7c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b7c8:	e061      	b.n	800b88e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b7ca:	697b      	ldr	r3, [r7, #20]
 800b7cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d002      	beq.n	800b7da <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b7d4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b7d8:	e059      	b.n	800b88e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b7da:	697b      	ldr	r3, [r7, #20]
 800b7dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d002      	beq.n	800b7ea <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b7e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b7e8:	e051      	b.n	800b88e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b7ea:	697b      	ldr	r3, [r7, #20]
 800b7ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d002      	beq.n	800b7fa <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b7f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b7f8:	e049      	b.n	800b88e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b7fa:	697b      	ldr	r3, [r7, #20]
 800b7fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b800:	2b00      	cmp	r3, #0
 800b802:	d002      	beq.n	800b80a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b804:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b808:	e041      	b.n	800b88e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b80a:	697b      	ldr	r3, [r7, #20]
 800b80c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b810:	2b00      	cmp	r3, #0
 800b812:	d002      	beq.n	800b81a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800b814:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b818:	e039      	b.n	800b88e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b81a:	697b      	ldr	r3, [r7, #20]
 800b81c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b820:	2b00      	cmp	r3, #0
 800b822:	d002      	beq.n	800b82a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b824:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b828:	e031      	b.n	800b88e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b82a:	697b      	ldr	r3, [r7, #20]
 800b82c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b830:	2b00      	cmp	r3, #0
 800b832:	d002      	beq.n	800b83a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b834:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b838:	e029      	b.n	800b88e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b83a:	697b      	ldr	r3, [r7, #20]
 800b83c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b840:	2b00      	cmp	r3, #0
 800b842:	d002      	beq.n	800b84a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b844:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b848:	e021      	b.n	800b88e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b84a:	697b      	ldr	r3, [r7, #20]
 800b84c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b850:	2b00      	cmp	r3, #0
 800b852:	d002      	beq.n	800b85a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b854:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b858:	e019      	b.n	800b88e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b85a:	697b      	ldr	r3, [r7, #20]
 800b85c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b860:	2b00      	cmp	r3, #0
 800b862:	d002      	beq.n	800b86a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b864:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b868:	e011      	b.n	800b88e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b86a:	697b      	ldr	r3, [r7, #20]
 800b86c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b870:	2b00      	cmp	r3, #0
 800b872:	d002      	beq.n	800b87a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800b874:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b878:	e009      	b.n	800b88e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800b87a:	697b      	ldr	r3, [r7, #20]
 800b87c:	f003 0308 	and.w	r3, r3, #8
 800b880:	2b00      	cmp	r3, #0
 800b882:	d002      	beq.n	800b88a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800b884:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b888:	e001      	b.n	800b88e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b88a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b88e:	4618      	mov	r0, r3
 800b890:	3720      	adds	r7, #32
 800b892:	46bd      	mov	sp, r7
 800b894:	bd80      	pop	{r7, pc}
 800b896:	bf00      	nop
 800b898:	20000000 	.word	0x20000000
 800b89c:	10624dd3 	.word	0x10624dd3
 800b8a0:	00200045 	.word	0x00200045
 800b8a4:	002000c5 	.word	0x002000c5
 800b8a8:	fdffe008 	.word	0xfdffe008

0800b8ac <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800b8ac:	b480      	push	{r7}
 800b8ae:	b085      	sub	sp, #20
 800b8b0:	af00      	add	r7, sp, #0
 800b8b2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b8b4:	4b1f      	ldr	r3, [pc, #124]	; (800b934 <SDMMC_GetCmdResp2+0x88>)
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	4a1f      	ldr	r2, [pc, #124]	; (800b938 <SDMMC_GetCmdResp2+0x8c>)
 800b8ba:	fba2 2303 	umull	r2, r3, r2, r3
 800b8be:	0a5b      	lsrs	r3, r3, #9
 800b8c0:	f241 3288 	movw	r2, #5000	; 0x1388
 800b8c4:	fb02 f303 	mul.w	r3, r2, r3
 800b8c8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	1e5a      	subs	r2, r3, #1
 800b8ce:	60fa      	str	r2, [r7, #12]
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d102      	bne.n	800b8da <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b8d4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b8d8:	e026      	b.n	800b928 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8de:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b8e0:	68bb      	ldr	r3, [r7, #8]
 800b8e2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d0ef      	beq.n	800b8ca <SDMMC_GetCmdResp2+0x1e>
 800b8ea:	68bb      	ldr	r3, [r7, #8]
 800b8ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d1ea      	bne.n	800b8ca <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8f8:	f003 0304 	and.w	r3, r3, #4
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d004      	beq.n	800b90a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	2204      	movs	r2, #4
 800b904:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b906:	2304      	movs	r3, #4
 800b908:	e00e      	b.n	800b928 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b90e:	f003 0301 	and.w	r3, r3, #1
 800b912:	2b00      	cmp	r3, #0
 800b914:	d004      	beq.n	800b920 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	2201      	movs	r2, #1
 800b91a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b91c:	2301      	movs	r3, #1
 800b91e:	e003      	b.n	800b928 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	4a06      	ldr	r2, [pc, #24]	; (800b93c <SDMMC_GetCmdResp2+0x90>)
 800b924:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800b926:	2300      	movs	r3, #0
}
 800b928:	4618      	mov	r0, r3
 800b92a:	3714      	adds	r7, #20
 800b92c:	46bd      	mov	sp, r7
 800b92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b932:	4770      	bx	lr
 800b934:	20000000 	.word	0x20000000
 800b938:	10624dd3 	.word	0x10624dd3
 800b93c:	002000c5 	.word	0x002000c5

0800b940 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800b940:	b480      	push	{r7}
 800b942:	b085      	sub	sp, #20
 800b944:	af00      	add	r7, sp, #0
 800b946:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b948:	4b1a      	ldr	r3, [pc, #104]	; (800b9b4 <SDMMC_GetCmdResp3+0x74>)
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	4a1a      	ldr	r2, [pc, #104]	; (800b9b8 <SDMMC_GetCmdResp3+0x78>)
 800b94e:	fba2 2303 	umull	r2, r3, r2, r3
 800b952:	0a5b      	lsrs	r3, r3, #9
 800b954:	f241 3288 	movw	r2, #5000	; 0x1388
 800b958:	fb02 f303 	mul.w	r3, r2, r3
 800b95c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	1e5a      	subs	r2, r3, #1
 800b962:	60fa      	str	r2, [r7, #12]
 800b964:	2b00      	cmp	r3, #0
 800b966:	d102      	bne.n	800b96e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b968:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b96c:	e01b      	b.n	800b9a6 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b972:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b974:	68bb      	ldr	r3, [r7, #8]
 800b976:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d0ef      	beq.n	800b95e <SDMMC_GetCmdResp3+0x1e>
 800b97e:	68bb      	ldr	r3, [r7, #8]
 800b980:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b984:	2b00      	cmp	r3, #0
 800b986:	d1ea      	bne.n	800b95e <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b98c:	f003 0304 	and.w	r3, r3, #4
 800b990:	2b00      	cmp	r3, #0
 800b992:	d004      	beq.n	800b99e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	2204      	movs	r2, #4
 800b998:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b99a:	2304      	movs	r3, #4
 800b99c:	e003      	b.n	800b9a6 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	4a06      	ldr	r2, [pc, #24]	; (800b9bc <SDMMC_GetCmdResp3+0x7c>)
 800b9a2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800b9a4:	2300      	movs	r3, #0
}
 800b9a6:	4618      	mov	r0, r3
 800b9a8:	3714      	adds	r7, #20
 800b9aa:	46bd      	mov	sp, r7
 800b9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b0:	4770      	bx	lr
 800b9b2:	bf00      	nop
 800b9b4:	20000000 	.word	0x20000000
 800b9b8:	10624dd3 	.word	0x10624dd3
 800b9bc:	002000c5 	.word	0x002000c5

0800b9c0 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800b9c0:	b580      	push	{r7, lr}
 800b9c2:	b088      	sub	sp, #32
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	60f8      	str	r0, [r7, #12]
 800b9c8:	460b      	mov	r3, r1
 800b9ca:	607a      	str	r2, [r7, #4]
 800b9cc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b9ce:	4b35      	ldr	r3, [pc, #212]	; (800baa4 <SDMMC_GetCmdResp6+0xe4>)
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	4a35      	ldr	r2, [pc, #212]	; (800baa8 <SDMMC_GetCmdResp6+0xe8>)
 800b9d4:	fba2 2303 	umull	r2, r3, r2, r3
 800b9d8:	0a5b      	lsrs	r3, r3, #9
 800b9da:	f241 3288 	movw	r2, #5000	; 0x1388
 800b9de:	fb02 f303 	mul.w	r3, r2, r3
 800b9e2:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800b9e4:	69fb      	ldr	r3, [r7, #28]
 800b9e6:	1e5a      	subs	r2, r3, #1
 800b9e8:	61fa      	str	r2, [r7, #28]
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d102      	bne.n	800b9f4 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b9ee:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b9f2:	e052      	b.n	800ba9a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b9f8:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b9fa:	69bb      	ldr	r3, [r7, #24]
 800b9fc:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d0ef      	beq.n	800b9e4 <SDMMC_GetCmdResp6+0x24>
 800ba04:	69bb      	ldr	r3, [r7, #24]
 800ba06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d1ea      	bne.n	800b9e4 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba12:	f003 0304 	and.w	r3, r3, #4
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d004      	beq.n	800ba24 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	2204      	movs	r2, #4
 800ba1e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ba20:	2304      	movs	r3, #4
 800ba22:	e03a      	b.n	800ba9a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba28:	f003 0301 	and.w	r3, r3, #1
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d004      	beq.n	800ba3a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	2201      	movs	r2, #1
 800ba34:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ba36:	2301      	movs	r3, #1
 800ba38:	e02f      	b.n	800ba9a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800ba3a:	68f8      	ldr	r0, [r7, #12]
 800ba3c:	f7ff fb60 	bl	800b100 <SDMMC_GetCommandResponse>
 800ba40:	4603      	mov	r3, r0
 800ba42:	461a      	mov	r2, r3
 800ba44:	7afb      	ldrb	r3, [r7, #11]
 800ba46:	4293      	cmp	r3, r2
 800ba48:	d001      	beq.n	800ba4e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ba4a:	2301      	movs	r3, #1
 800ba4c:	e025      	b.n	800ba9a <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	4a16      	ldr	r2, [pc, #88]	; (800baac <SDMMC_GetCmdResp6+0xec>)
 800ba52:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800ba54:	2100      	movs	r1, #0
 800ba56:	68f8      	ldr	r0, [r7, #12]
 800ba58:	f7ff fb5f 	bl	800b11a <SDMMC_GetResponse>
 800ba5c:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800ba5e:	697b      	ldr	r3, [r7, #20]
 800ba60:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d106      	bne.n	800ba76 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800ba68:	697b      	ldr	r3, [r7, #20]
 800ba6a:	0c1b      	lsrs	r3, r3, #16
 800ba6c:	b29a      	uxth	r2, r3
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800ba72:	2300      	movs	r3, #0
 800ba74:	e011      	b.n	800ba9a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800ba76:	697b      	ldr	r3, [r7, #20]
 800ba78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d002      	beq.n	800ba86 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ba80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ba84:	e009      	b.n	800ba9a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800ba86:	697b      	ldr	r3, [r7, #20]
 800ba88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d002      	beq.n	800ba96 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ba90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ba94:	e001      	b.n	800ba9a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ba96:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800ba9a:	4618      	mov	r0, r3
 800ba9c:	3720      	adds	r7, #32
 800ba9e:	46bd      	mov	sp, r7
 800baa0:	bd80      	pop	{r7, pc}
 800baa2:	bf00      	nop
 800baa4:	20000000 	.word	0x20000000
 800baa8:	10624dd3 	.word	0x10624dd3
 800baac:	002000c5 	.word	0x002000c5

0800bab0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800bab0:	b480      	push	{r7}
 800bab2:	b085      	sub	sp, #20
 800bab4:	af00      	add	r7, sp, #0
 800bab6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bab8:	4b22      	ldr	r3, [pc, #136]	; (800bb44 <SDMMC_GetCmdResp7+0x94>)
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	4a22      	ldr	r2, [pc, #136]	; (800bb48 <SDMMC_GetCmdResp7+0x98>)
 800babe:	fba2 2303 	umull	r2, r3, r2, r3
 800bac2:	0a5b      	lsrs	r3, r3, #9
 800bac4:	f241 3288 	movw	r2, #5000	; 0x1388
 800bac8:	fb02 f303 	mul.w	r3, r2, r3
 800bacc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	1e5a      	subs	r2, r3, #1
 800bad2:	60fa      	str	r2, [r7, #12]
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d102      	bne.n	800bade <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bad8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800badc:	e02c      	b.n	800bb38 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bae2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bae4:	68bb      	ldr	r3, [r7, #8]
 800bae6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800baea:	2b00      	cmp	r3, #0
 800baec:	d0ef      	beq.n	800bace <SDMMC_GetCmdResp7+0x1e>
 800baee:	68bb      	ldr	r3, [r7, #8]
 800baf0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d1ea      	bne.n	800bace <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bafc:	f003 0304 	and.w	r3, r3, #4
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d004      	beq.n	800bb0e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	2204      	movs	r2, #4
 800bb08:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bb0a:	2304      	movs	r3, #4
 800bb0c:	e014      	b.n	800bb38 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb12:	f003 0301 	and.w	r3, r3, #1
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d004      	beq.n	800bb24 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	2201      	movs	r2, #1
 800bb1e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bb20:	2301      	movs	r3, #1
 800bb22:	e009      	b.n	800bb38 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d002      	beq.n	800bb36 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	2240      	movs	r2, #64	; 0x40
 800bb34:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800bb36:	2300      	movs	r3, #0

}
 800bb38:	4618      	mov	r0, r3
 800bb3a:	3714      	adds	r7, #20
 800bb3c:	46bd      	mov	sp, r7
 800bb3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb42:	4770      	bx	lr
 800bb44:	20000000 	.word	0x20000000
 800bb48:	10624dd3 	.word	0x10624dd3

0800bb4c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800bb4c:	b480      	push	{r7}
 800bb4e:	b085      	sub	sp, #20
 800bb50:	af00      	add	r7, sp, #0
 800bb52:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bb54:	4b11      	ldr	r3, [pc, #68]	; (800bb9c <SDMMC_GetCmdError+0x50>)
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	4a11      	ldr	r2, [pc, #68]	; (800bba0 <SDMMC_GetCmdError+0x54>)
 800bb5a:	fba2 2303 	umull	r2, r3, r2, r3
 800bb5e:	0a5b      	lsrs	r3, r3, #9
 800bb60:	f241 3288 	movw	r2, #5000	; 0x1388
 800bb64:	fb02 f303 	mul.w	r3, r2, r3
 800bb68:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	1e5a      	subs	r2, r3, #1
 800bb6e:	60fa      	str	r2, [r7, #12]
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d102      	bne.n	800bb7a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bb74:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bb78:	e009      	b.n	800bb8e <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d0f1      	beq.n	800bb6a <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	4a06      	ldr	r2, [pc, #24]	; (800bba4 <SDMMC_GetCmdError+0x58>)
 800bb8a:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800bb8c:	2300      	movs	r3, #0
}
 800bb8e:	4618      	mov	r0, r3
 800bb90:	3714      	adds	r7, #20
 800bb92:	46bd      	mov	sp, r7
 800bb94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb98:	4770      	bx	lr
 800bb9a:	bf00      	nop
 800bb9c:	20000000 	.word	0x20000000
 800bba0:	10624dd3 	.word	0x10624dd3
 800bba4:	002000c5 	.word	0x002000c5

0800bba8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800bba8:	b084      	sub	sp, #16
 800bbaa:	b580      	push	{r7, lr}
 800bbac:	b084      	sub	sp, #16
 800bbae:	af00      	add	r7, sp, #0
 800bbb0:	6078      	str	r0, [r7, #4]
 800bbb2:	f107 001c 	add.w	r0, r7, #28
 800bbb6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	68db      	ldr	r3, [r3, #12]
 800bbbe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800bbc6:	6878      	ldr	r0, [r7, #4]
 800bbc8:	f001 faf6 	bl	800d1b8 <USB_CoreReset>
 800bbcc:	4603      	mov	r3, r0
 800bbce:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800bbd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d106      	bne.n	800bbe4 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbda:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	639a      	str	r2, [r3, #56]	; 0x38
 800bbe2:	e005      	b.n	800bbf0 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbe8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 800bbf0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbf2:	4618      	mov	r0, r3
 800bbf4:	3710      	adds	r7, #16
 800bbf6:	46bd      	mov	sp, r7
 800bbf8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bbfc:	b004      	add	sp, #16
 800bbfe:	4770      	bx	lr

0800bc00 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800bc00:	b480      	push	{r7}
 800bc02:	b087      	sub	sp, #28
 800bc04:	af00      	add	r7, sp, #0
 800bc06:	60f8      	str	r0, [r7, #12]
 800bc08:	60b9      	str	r1, [r7, #8]
 800bc0a:	4613      	mov	r3, r2
 800bc0c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800bc0e:	79fb      	ldrb	r3, [r7, #7]
 800bc10:	2b02      	cmp	r3, #2
 800bc12:	d165      	bne.n	800bce0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800bc14:	68bb      	ldr	r3, [r7, #8]
 800bc16:	4a3e      	ldr	r2, [pc, #248]	; (800bd10 <USB_SetTurnaroundTime+0x110>)
 800bc18:	4293      	cmp	r3, r2
 800bc1a:	d906      	bls.n	800bc2a <USB_SetTurnaroundTime+0x2a>
 800bc1c:	68bb      	ldr	r3, [r7, #8]
 800bc1e:	4a3d      	ldr	r2, [pc, #244]	; (800bd14 <USB_SetTurnaroundTime+0x114>)
 800bc20:	4293      	cmp	r3, r2
 800bc22:	d202      	bcs.n	800bc2a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800bc24:	230f      	movs	r3, #15
 800bc26:	617b      	str	r3, [r7, #20]
 800bc28:	e05c      	b.n	800bce4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800bc2a:	68bb      	ldr	r3, [r7, #8]
 800bc2c:	4a39      	ldr	r2, [pc, #228]	; (800bd14 <USB_SetTurnaroundTime+0x114>)
 800bc2e:	4293      	cmp	r3, r2
 800bc30:	d306      	bcc.n	800bc40 <USB_SetTurnaroundTime+0x40>
 800bc32:	68bb      	ldr	r3, [r7, #8]
 800bc34:	4a38      	ldr	r2, [pc, #224]	; (800bd18 <USB_SetTurnaroundTime+0x118>)
 800bc36:	4293      	cmp	r3, r2
 800bc38:	d202      	bcs.n	800bc40 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800bc3a:	230e      	movs	r3, #14
 800bc3c:	617b      	str	r3, [r7, #20]
 800bc3e:	e051      	b.n	800bce4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800bc40:	68bb      	ldr	r3, [r7, #8]
 800bc42:	4a35      	ldr	r2, [pc, #212]	; (800bd18 <USB_SetTurnaroundTime+0x118>)
 800bc44:	4293      	cmp	r3, r2
 800bc46:	d306      	bcc.n	800bc56 <USB_SetTurnaroundTime+0x56>
 800bc48:	68bb      	ldr	r3, [r7, #8]
 800bc4a:	4a34      	ldr	r2, [pc, #208]	; (800bd1c <USB_SetTurnaroundTime+0x11c>)
 800bc4c:	4293      	cmp	r3, r2
 800bc4e:	d202      	bcs.n	800bc56 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800bc50:	230d      	movs	r3, #13
 800bc52:	617b      	str	r3, [r7, #20]
 800bc54:	e046      	b.n	800bce4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800bc56:	68bb      	ldr	r3, [r7, #8]
 800bc58:	4a30      	ldr	r2, [pc, #192]	; (800bd1c <USB_SetTurnaroundTime+0x11c>)
 800bc5a:	4293      	cmp	r3, r2
 800bc5c:	d306      	bcc.n	800bc6c <USB_SetTurnaroundTime+0x6c>
 800bc5e:	68bb      	ldr	r3, [r7, #8]
 800bc60:	4a2f      	ldr	r2, [pc, #188]	; (800bd20 <USB_SetTurnaroundTime+0x120>)
 800bc62:	4293      	cmp	r3, r2
 800bc64:	d802      	bhi.n	800bc6c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800bc66:	230c      	movs	r3, #12
 800bc68:	617b      	str	r3, [r7, #20]
 800bc6a:	e03b      	b.n	800bce4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800bc6c:	68bb      	ldr	r3, [r7, #8]
 800bc6e:	4a2c      	ldr	r2, [pc, #176]	; (800bd20 <USB_SetTurnaroundTime+0x120>)
 800bc70:	4293      	cmp	r3, r2
 800bc72:	d906      	bls.n	800bc82 <USB_SetTurnaroundTime+0x82>
 800bc74:	68bb      	ldr	r3, [r7, #8]
 800bc76:	4a2b      	ldr	r2, [pc, #172]	; (800bd24 <USB_SetTurnaroundTime+0x124>)
 800bc78:	4293      	cmp	r3, r2
 800bc7a:	d802      	bhi.n	800bc82 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800bc7c:	230b      	movs	r3, #11
 800bc7e:	617b      	str	r3, [r7, #20]
 800bc80:	e030      	b.n	800bce4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800bc82:	68bb      	ldr	r3, [r7, #8]
 800bc84:	4a27      	ldr	r2, [pc, #156]	; (800bd24 <USB_SetTurnaroundTime+0x124>)
 800bc86:	4293      	cmp	r3, r2
 800bc88:	d906      	bls.n	800bc98 <USB_SetTurnaroundTime+0x98>
 800bc8a:	68bb      	ldr	r3, [r7, #8]
 800bc8c:	4a26      	ldr	r2, [pc, #152]	; (800bd28 <USB_SetTurnaroundTime+0x128>)
 800bc8e:	4293      	cmp	r3, r2
 800bc90:	d802      	bhi.n	800bc98 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800bc92:	230a      	movs	r3, #10
 800bc94:	617b      	str	r3, [r7, #20]
 800bc96:	e025      	b.n	800bce4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800bc98:	68bb      	ldr	r3, [r7, #8]
 800bc9a:	4a23      	ldr	r2, [pc, #140]	; (800bd28 <USB_SetTurnaroundTime+0x128>)
 800bc9c:	4293      	cmp	r3, r2
 800bc9e:	d906      	bls.n	800bcae <USB_SetTurnaroundTime+0xae>
 800bca0:	68bb      	ldr	r3, [r7, #8]
 800bca2:	4a22      	ldr	r2, [pc, #136]	; (800bd2c <USB_SetTurnaroundTime+0x12c>)
 800bca4:	4293      	cmp	r3, r2
 800bca6:	d202      	bcs.n	800bcae <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800bca8:	2309      	movs	r3, #9
 800bcaa:	617b      	str	r3, [r7, #20]
 800bcac:	e01a      	b.n	800bce4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800bcae:	68bb      	ldr	r3, [r7, #8]
 800bcb0:	4a1e      	ldr	r2, [pc, #120]	; (800bd2c <USB_SetTurnaroundTime+0x12c>)
 800bcb2:	4293      	cmp	r3, r2
 800bcb4:	d306      	bcc.n	800bcc4 <USB_SetTurnaroundTime+0xc4>
 800bcb6:	68bb      	ldr	r3, [r7, #8]
 800bcb8:	4a1d      	ldr	r2, [pc, #116]	; (800bd30 <USB_SetTurnaroundTime+0x130>)
 800bcba:	4293      	cmp	r3, r2
 800bcbc:	d802      	bhi.n	800bcc4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800bcbe:	2308      	movs	r3, #8
 800bcc0:	617b      	str	r3, [r7, #20]
 800bcc2:	e00f      	b.n	800bce4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800bcc4:	68bb      	ldr	r3, [r7, #8]
 800bcc6:	4a1a      	ldr	r2, [pc, #104]	; (800bd30 <USB_SetTurnaroundTime+0x130>)
 800bcc8:	4293      	cmp	r3, r2
 800bcca:	d906      	bls.n	800bcda <USB_SetTurnaroundTime+0xda>
 800bccc:	68bb      	ldr	r3, [r7, #8]
 800bcce:	4a19      	ldr	r2, [pc, #100]	; (800bd34 <USB_SetTurnaroundTime+0x134>)
 800bcd0:	4293      	cmp	r3, r2
 800bcd2:	d202      	bcs.n	800bcda <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800bcd4:	2307      	movs	r3, #7
 800bcd6:	617b      	str	r3, [r7, #20]
 800bcd8:	e004      	b.n	800bce4 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800bcda:	2306      	movs	r3, #6
 800bcdc:	617b      	str	r3, [r7, #20]
 800bcde:	e001      	b.n	800bce4 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800bce0:	2309      	movs	r3, #9
 800bce2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	68db      	ldr	r3, [r3, #12]
 800bce8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	68da      	ldr	r2, [r3, #12]
 800bcf4:	697b      	ldr	r3, [r7, #20]
 800bcf6:	029b      	lsls	r3, r3, #10
 800bcf8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800bcfc:	431a      	orrs	r2, r3
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800bd02:	2300      	movs	r3, #0
}
 800bd04:	4618      	mov	r0, r3
 800bd06:	371c      	adds	r7, #28
 800bd08:	46bd      	mov	sp, r7
 800bd0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd0e:	4770      	bx	lr
 800bd10:	00d8acbf 	.word	0x00d8acbf
 800bd14:	00e4e1c0 	.word	0x00e4e1c0
 800bd18:	00f42400 	.word	0x00f42400
 800bd1c:	01067380 	.word	0x01067380
 800bd20:	011a499f 	.word	0x011a499f
 800bd24:	01312cff 	.word	0x01312cff
 800bd28:	014ca43f 	.word	0x014ca43f
 800bd2c:	016e3600 	.word	0x016e3600
 800bd30:	01a6ab1f 	.word	0x01a6ab1f
 800bd34:	01e84800 	.word	0x01e84800

0800bd38 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800bd38:	b480      	push	{r7}
 800bd3a:	b083      	sub	sp, #12
 800bd3c:	af00      	add	r7, sp, #0
 800bd3e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	689b      	ldr	r3, [r3, #8]
 800bd44:	f043 0201 	orr.w	r2, r3, #1
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800bd4c:	2300      	movs	r3, #0
}
 800bd4e:	4618      	mov	r0, r3
 800bd50:	370c      	adds	r7, #12
 800bd52:	46bd      	mov	sp, r7
 800bd54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd58:	4770      	bx	lr

0800bd5a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800bd5a:	b480      	push	{r7}
 800bd5c:	b083      	sub	sp, #12
 800bd5e:	af00      	add	r7, sp, #0
 800bd60:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	689b      	ldr	r3, [r3, #8]
 800bd66:	f023 0201 	bic.w	r2, r3, #1
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800bd6e:	2300      	movs	r3, #0
}
 800bd70:	4618      	mov	r0, r3
 800bd72:	370c      	adds	r7, #12
 800bd74:	46bd      	mov	sp, r7
 800bd76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd7a:	4770      	bx	lr

0800bd7c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800bd7c:	b580      	push	{r7, lr}
 800bd7e:	b084      	sub	sp, #16
 800bd80:	af00      	add	r7, sp, #0
 800bd82:	6078      	str	r0, [r7, #4]
 800bd84:	460b      	mov	r3, r1
 800bd86:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800bd88:	2300      	movs	r3, #0
 800bd8a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	68db      	ldr	r3, [r3, #12]
 800bd90:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800bd98:	78fb      	ldrb	r3, [r7, #3]
 800bd9a:	2b01      	cmp	r3, #1
 800bd9c:	d115      	bne.n	800bdca <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	68db      	ldr	r3, [r3, #12]
 800bda2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800bdaa:	2001      	movs	r0, #1
 800bdac:	f7f6 fa5c 	bl	8002268 <HAL_Delay>
      ms++;
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	3301      	adds	r3, #1
 800bdb4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800bdb6:	6878      	ldr	r0, [r7, #4]
 800bdb8:	f001 f985 	bl	800d0c6 <USB_GetMode>
 800bdbc:	4603      	mov	r3, r0
 800bdbe:	2b01      	cmp	r3, #1
 800bdc0:	d01e      	beq.n	800be00 <USB_SetCurrentMode+0x84>
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	2b31      	cmp	r3, #49	; 0x31
 800bdc6:	d9f0      	bls.n	800bdaa <USB_SetCurrentMode+0x2e>
 800bdc8:	e01a      	b.n	800be00 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800bdca:	78fb      	ldrb	r3, [r7, #3]
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d115      	bne.n	800bdfc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	68db      	ldr	r3, [r3, #12]
 800bdd4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800bddc:	2001      	movs	r0, #1
 800bdde:	f7f6 fa43 	bl	8002268 <HAL_Delay>
      ms++;
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	3301      	adds	r3, #1
 800bde6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800bde8:	6878      	ldr	r0, [r7, #4]
 800bdea:	f001 f96c 	bl	800d0c6 <USB_GetMode>
 800bdee:	4603      	mov	r3, r0
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d005      	beq.n	800be00 <USB_SetCurrentMode+0x84>
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	2b31      	cmp	r3, #49	; 0x31
 800bdf8:	d9f0      	bls.n	800bddc <USB_SetCurrentMode+0x60>
 800bdfa:	e001      	b.n	800be00 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800bdfc:	2301      	movs	r3, #1
 800bdfe:	e005      	b.n	800be0c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	2b32      	cmp	r3, #50	; 0x32
 800be04:	d101      	bne.n	800be0a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800be06:	2301      	movs	r3, #1
 800be08:	e000      	b.n	800be0c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800be0a:	2300      	movs	r3, #0
}
 800be0c:	4618      	mov	r0, r3
 800be0e:	3710      	adds	r7, #16
 800be10:	46bd      	mov	sp, r7
 800be12:	bd80      	pop	{r7, pc}

0800be14 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800be14:	b084      	sub	sp, #16
 800be16:	b580      	push	{r7, lr}
 800be18:	b086      	sub	sp, #24
 800be1a:	af00      	add	r7, sp, #0
 800be1c:	6078      	str	r0, [r7, #4]
 800be1e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800be22:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800be26:	2300      	movs	r3, #0
 800be28:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800be2e:	2300      	movs	r3, #0
 800be30:	613b      	str	r3, [r7, #16]
 800be32:	e009      	b.n	800be48 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800be34:	687a      	ldr	r2, [r7, #4]
 800be36:	693b      	ldr	r3, [r7, #16]
 800be38:	3340      	adds	r3, #64	; 0x40
 800be3a:	009b      	lsls	r3, r3, #2
 800be3c:	4413      	add	r3, r2
 800be3e:	2200      	movs	r2, #0
 800be40:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800be42:	693b      	ldr	r3, [r7, #16]
 800be44:	3301      	adds	r3, #1
 800be46:	613b      	str	r3, [r7, #16]
 800be48:	693b      	ldr	r3, [r7, #16]
 800be4a:	2b0e      	cmp	r3, #14
 800be4c:	d9f2      	bls.n	800be34 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800be4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be50:	2b00      	cmp	r3, #0
 800be52:	d11c      	bne.n	800be8e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be5a:	685b      	ldr	r3, [r3, #4]
 800be5c:	68fa      	ldr	r2, [r7, #12]
 800be5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800be62:	f043 0302 	orr.w	r3, r3, #2
 800be66:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be6c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	601a      	str	r2, [r3, #0]
 800be8c:	e005      	b.n	800be9a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be92:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bea0:	461a      	mov	r2, r3
 800bea2:	2300      	movs	r3, #0
 800bea4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800beac:	4619      	mov	r1, r3
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800beb4:	461a      	mov	r2, r3
 800beb6:	680b      	ldr	r3, [r1, #0]
 800beb8:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800beba:	2103      	movs	r1, #3
 800bebc:	6878      	ldr	r0, [r7, #4]
 800bebe:	f000 f959 	bl	800c174 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800bec2:	2110      	movs	r1, #16
 800bec4:	6878      	ldr	r0, [r7, #4]
 800bec6:	f000 f8f1 	bl	800c0ac <USB_FlushTxFifo>
 800beca:	4603      	mov	r3, r0
 800becc:	2b00      	cmp	r3, #0
 800bece:	d001      	beq.n	800bed4 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 800bed0:	2301      	movs	r3, #1
 800bed2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800bed4:	6878      	ldr	r0, [r7, #4]
 800bed6:	f000 f91d 	bl	800c114 <USB_FlushRxFifo>
 800beda:	4603      	mov	r3, r0
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d001      	beq.n	800bee4 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 800bee0:	2301      	movs	r3, #1
 800bee2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800beea:	461a      	mov	r2, r3
 800beec:	2300      	movs	r3, #0
 800beee:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bef6:	461a      	mov	r2, r3
 800bef8:	2300      	movs	r3, #0
 800befa:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bf02:	461a      	mov	r2, r3
 800bf04:	2300      	movs	r3, #0
 800bf06:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bf08:	2300      	movs	r3, #0
 800bf0a:	613b      	str	r3, [r7, #16]
 800bf0c:	e043      	b.n	800bf96 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800bf0e:	693b      	ldr	r3, [r7, #16]
 800bf10:	015a      	lsls	r2, r3, #5
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	4413      	add	r3, r2
 800bf16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bf20:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bf24:	d118      	bne.n	800bf58 <USB_DevInit+0x144>
    {
      if (i == 0U)
 800bf26:	693b      	ldr	r3, [r7, #16]
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d10a      	bne.n	800bf42 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800bf2c:	693b      	ldr	r3, [r7, #16]
 800bf2e:	015a      	lsls	r2, r3, #5
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	4413      	add	r3, r2
 800bf34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf38:	461a      	mov	r2, r3
 800bf3a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800bf3e:	6013      	str	r3, [r2, #0]
 800bf40:	e013      	b.n	800bf6a <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800bf42:	693b      	ldr	r3, [r7, #16]
 800bf44:	015a      	lsls	r2, r3, #5
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	4413      	add	r3, r2
 800bf4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf4e:	461a      	mov	r2, r3
 800bf50:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800bf54:	6013      	str	r3, [r2, #0]
 800bf56:	e008      	b.n	800bf6a <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800bf58:	693b      	ldr	r3, [r7, #16]
 800bf5a:	015a      	lsls	r2, r3, #5
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	4413      	add	r3, r2
 800bf60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf64:	461a      	mov	r2, r3
 800bf66:	2300      	movs	r3, #0
 800bf68:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800bf6a:	693b      	ldr	r3, [r7, #16]
 800bf6c:	015a      	lsls	r2, r3, #5
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	4413      	add	r3, r2
 800bf72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf76:	461a      	mov	r2, r3
 800bf78:	2300      	movs	r3, #0
 800bf7a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800bf7c:	693b      	ldr	r3, [r7, #16]
 800bf7e:	015a      	lsls	r2, r3, #5
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	4413      	add	r3, r2
 800bf84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf88:	461a      	mov	r2, r3
 800bf8a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800bf8e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bf90:	693b      	ldr	r3, [r7, #16]
 800bf92:	3301      	adds	r3, #1
 800bf94:	613b      	str	r3, [r7, #16]
 800bf96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf98:	693a      	ldr	r2, [r7, #16]
 800bf9a:	429a      	cmp	r2, r3
 800bf9c:	d3b7      	bcc.n	800bf0e <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bf9e:	2300      	movs	r3, #0
 800bfa0:	613b      	str	r3, [r7, #16]
 800bfa2:	e043      	b.n	800c02c <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bfa4:	693b      	ldr	r3, [r7, #16]
 800bfa6:	015a      	lsls	r2, r3, #5
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	4413      	add	r3, r2
 800bfac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bfb6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bfba:	d118      	bne.n	800bfee <USB_DevInit+0x1da>
    {
      if (i == 0U)
 800bfbc:	693b      	ldr	r3, [r7, #16]
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d10a      	bne.n	800bfd8 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800bfc2:	693b      	ldr	r3, [r7, #16]
 800bfc4:	015a      	lsls	r2, r3, #5
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	4413      	add	r3, r2
 800bfca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bfce:	461a      	mov	r2, r3
 800bfd0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800bfd4:	6013      	str	r3, [r2, #0]
 800bfd6:	e013      	b.n	800c000 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800bfd8:	693b      	ldr	r3, [r7, #16]
 800bfda:	015a      	lsls	r2, r3, #5
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	4413      	add	r3, r2
 800bfe0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bfe4:	461a      	mov	r2, r3
 800bfe6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800bfea:	6013      	str	r3, [r2, #0]
 800bfec:	e008      	b.n	800c000 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800bfee:	693b      	ldr	r3, [r7, #16]
 800bff0:	015a      	lsls	r2, r3, #5
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	4413      	add	r3, r2
 800bff6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bffa:	461a      	mov	r2, r3
 800bffc:	2300      	movs	r3, #0
 800bffe:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800c000:	693b      	ldr	r3, [r7, #16]
 800c002:	015a      	lsls	r2, r3, #5
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	4413      	add	r3, r2
 800c008:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c00c:	461a      	mov	r2, r3
 800c00e:	2300      	movs	r3, #0
 800c010:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800c012:	693b      	ldr	r3, [r7, #16]
 800c014:	015a      	lsls	r2, r3, #5
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	4413      	add	r3, r2
 800c01a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c01e:	461a      	mov	r2, r3
 800c020:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c024:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c026:	693b      	ldr	r3, [r7, #16]
 800c028:	3301      	adds	r3, #1
 800c02a:	613b      	str	r3, [r7, #16]
 800c02c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c02e:	693a      	ldr	r2, [r7, #16]
 800c030:	429a      	cmp	r2, r3
 800c032:	d3b7      	bcc.n	800bfa4 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c03a:	691b      	ldr	r3, [r3, #16]
 800c03c:	68fa      	ldr	r2, [r7, #12]
 800c03e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c042:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c046:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	2200      	movs	r2, #0
 800c04c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800c054:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	699b      	ldr	r3, [r3, #24]
 800c05a:	f043 0210 	orr.w	r2, r3, #16
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	699a      	ldr	r2, [r3, #24]
 800c066:	4b10      	ldr	r3, [pc, #64]	; (800c0a8 <USB_DevInit+0x294>)
 800c068:	4313      	orrs	r3, r2
 800c06a:	687a      	ldr	r2, [r7, #4]
 800c06c:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800c06e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c070:	2b00      	cmp	r3, #0
 800c072:	d005      	beq.n	800c080 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	699b      	ldr	r3, [r3, #24]
 800c078:	f043 0208 	orr.w	r2, r3, #8
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800c080:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c082:	2b01      	cmp	r3, #1
 800c084:	d107      	bne.n	800c096 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	699b      	ldr	r3, [r3, #24]
 800c08a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c08e:	f043 0304 	orr.w	r3, r3, #4
 800c092:	687a      	ldr	r2, [r7, #4]
 800c094:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800c096:	7dfb      	ldrb	r3, [r7, #23]
}
 800c098:	4618      	mov	r0, r3
 800c09a:	3718      	adds	r7, #24
 800c09c:	46bd      	mov	sp, r7
 800c09e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c0a2:	b004      	add	sp, #16
 800c0a4:	4770      	bx	lr
 800c0a6:	bf00      	nop
 800c0a8:	803c3800 	.word	0x803c3800

0800c0ac <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800c0ac:	b480      	push	{r7}
 800c0ae:	b085      	sub	sp, #20
 800c0b0:	af00      	add	r7, sp, #0
 800c0b2:	6078      	str	r0, [r7, #4]
 800c0b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800c0b6:	2300      	movs	r3, #0
 800c0b8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	3301      	adds	r3, #1
 800c0be:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	4a13      	ldr	r2, [pc, #76]	; (800c110 <USB_FlushTxFifo+0x64>)
 800c0c4:	4293      	cmp	r3, r2
 800c0c6:	d901      	bls.n	800c0cc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800c0c8:	2303      	movs	r3, #3
 800c0ca:	e01b      	b.n	800c104 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	691b      	ldr	r3, [r3, #16]
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	daf2      	bge.n	800c0ba <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800c0d4:	2300      	movs	r3, #0
 800c0d6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800c0d8:	683b      	ldr	r3, [r7, #0]
 800c0da:	019b      	lsls	r3, r3, #6
 800c0dc:	f043 0220 	orr.w	r2, r3, #32
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	3301      	adds	r3, #1
 800c0e8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	4a08      	ldr	r2, [pc, #32]	; (800c110 <USB_FlushTxFifo+0x64>)
 800c0ee:	4293      	cmp	r3, r2
 800c0f0:	d901      	bls.n	800c0f6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800c0f2:	2303      	movs	r3, #3
 800c0f4:	e006      	b.n	800c104 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	691b      	ldr	r3, [r3, #16]
 800c0fa:	f003 0320 	and.w	r3, r3, #32
 800c0fe:	2b20      	cmp	r3, #32
 800c100:	d0f0      	beq.n	800c0e4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800c102:	2300      	movs	r3, #0
}
 800c104:	4618      	mov	r0, r3
 800c106:	3714      	adds	r7, #20
 800c108:	46bd      	mov	sp, r7
 800c10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c10e:	4770      	bx	lr
 800c110:	00030d40 	.word	0x00030d40

0800c114 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800c114:	b480      	push	{r7}
 800c116:	b085      	sub	sp, #20
 800c118:	af00      	add	r7, sp, #0
 800c11a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c11c:	2300      	movs	r3, #0
 800c11e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	3301      	adds	r3, #1
 800c124:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	4a11      	ldr	r2, [pc, #68]	; (800c170 <USB_FlushRxFifo+0x5c>)
 800c12a:	4293      	cmp	r3, r2
 800c12c:	d901      	bls.n	800c132 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800c12e:	2303      	movs	r3, #3
 800c130:	e018      	b.n	800c164 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	691b      	ldr	r3, [r3, #16]
 800c136:	2b00      	cmp	r3, #0
 800c138:	daf2      	bge.n	800c120 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800c13a:	2300      	movs	r3, #0
 800c13c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	2210      	movs	r2, #16
 800c142:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	3301      	adds	r3, #1
 800c148:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	4a08      	ldr	r2, [pc, #32]	; (800c170 <USB_FlushRxFifo+0x5c>)
 800c14e:	4293      	cmp	r3, r2
 800c150:	d901      	bls.n	800c156 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800c152:	2303      	movs	r3, #3
 800c154:	e006      	b.n	800c164 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	691b      	ldr	r3, [r3, #16]
 800c15a:	f003 0310 	and.w	r3, r3, #16
 800c15e:	2b10      	cmp	r3, #16
 800c160:	d0f0      	beq.n	800c144 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800c162:	2300      	movs	r3, #0
}
 800c164:	4618      	mov	r0, r3
 800c166:	3714      	adds	r7, #20
 800c168:	46bd      	mov	sp, r7
 800c16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c16e:	4770      	bx	lr
 800c170:	00030d40 	.word	0x00030d40

0800c174 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800c174:	b480      	push	{r7}
 800c176:	b085      	sub	sp, #20
 800c178:	af00      	add	r7, sp, #0
 800c17a:	6078      	str	r0, [r7, #4]
 800c17c:	460b      	mov	r3, r1
 800c17e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c18a:	681a      	ldr	r2, [r3, #0]
 800c18c:	78fb      	ldrb	r3, [r7, #3]
 800c18e:	68f9      	ldr	r1, [r7, #12]
 800c190:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c194:	4313      	orrs	r3, r2
 800c196:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800c198:	2300      	movs	r3, #0
}
 800c19a:	4618      	mov	r0, r3
 800c19c:	3714      	adds	r7, #20
 800c19e:	46bd      	mov	sp, r7
 800c1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a4:	4770      	bx	lr

0800c1a6 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800c1a6:	b480      	push	{r7}
 800c1a8:	b087      	sub	sp, #28
 800c1aa:	af00      	add	r7, sp, #0
 800c1ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800c1b2:	693b      	ldr	r3, [r7, #16]
 800c1b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c1b8:	689b      	ldr	r3, [r3, #8]
 800c1ba:	f003 0306 	and.w	r3, r3, #6
 800c1be:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	2b02      	cmp	r3, #2
 800c1c4:	d002      	beq.n	800c1cc <USB_GetDevSpeed+0x26>
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	2b06      	cmp	r3, #6
 800c1ca:	d102      	bne.n	800c1d2 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800c1cc:	2302      	movs	r3, #2
 800c1ce:	75fb      	strb	r3, [r7, #23]
 800c1d0:	e001      	b.n	800c1d6 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 800c1d2:	230f      	movs	r3, #15
 800c1d4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800c1d6:	7dfb      	ldrb	r3, [r7, #23]
}
 800c1d8:	4618      	mov	r0, r3
 800c1da:	371c      	adds	r7, #28
 800c1dc:	46bd      	mov	sp, r7
 800c1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e2:	4770      	bx	lr

0800c1e4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c1e4:	b480      	push	{r7}
 800c1e6:	b085      	sub	sp, #20
 800c1e8:	af00      	add	r7, sp, #0
 800c1ea:	6078      	str	r0, [r7, #4]
 800c1ec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c1f2:	683b      	ldr	r3, [r7, #0]
 800c1f4:	781b      	ldrb	r3, [r3, #0]
 800c1f6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c1f8:	683b      	ldr	r3, [r7, #0]
 800c1fa:	785b      	ldrb	r3, [r3, #1]
 800c1fc:	2b01      	cmp	r3, #1
 800c1fe:	d13a      	bne.n	800c276 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c206:	69da      	ldr	r2, [r3, #28]
 800c208:	683b      	ldr	r3, [r7, #0]
 800c20a:	781b      	ldrb	r3, [r3, #0]
 800c20c:	f003 030f 	and.w	r3, r3, #15
 800c210:	2101      	movs	r1, #1
 800c212:	fa01 f303 	lsl.w	r3, r1, r3
 800c216:	b29b      	uxth	r3, r3
 800c218:	68f9      	ldr	r1, [r7, #12]
 800c21a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c21e:	4313      	orrs	r3, r2
 800c220:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800c222:	68bb      	ldr	r3, [r7, #8]
 800c224:	015a      	lsls	r2, r3, #5
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	4413      	add	r3, r2
 800c22a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c234:	2b00      	cmp	r3, #0
 800c236:	d155      	bne.n	800c2e4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c238:	68bb      	ldr	r3, [r7, #8]
 800c23a:	015a      	lsls	r2, r3, #5
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	4413      	add	r3, r2
 800c240:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c244:	681a      	ldr	r2, [r3, #0]
 800c246:	683b      	ldr	r3, [r7, #0]
 800c248:	68db      	ldr	r3, [r3, #12]
 800c24a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800c24e:	683b      	ldr	r3, [r7, #0]
 800c250:	791b      	ldrb	r3, [r3, #4]
 800c252:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c254:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800c256:	68bb      	ldr	r3, [r7, #8]
 800c258:	059b      	lsls	r3, r3, #22
 800c25a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c25c:	4313      	orrs	r3, r2
 800c25e:	68ba      	ldr	r2, [r7, #8]
 800c260:	0151      	lsls	r1, r2, #5
 800c262:	68fa      	ldr	r2, [r7, #12]
 800c264:	440a      	add	r2, r1
 800c266:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c26a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c26e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c272:	6013      	str	r3, [r2, #0]
 800c274:	e036      	b.n	800c2e4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c27c:	69da      	ldr	r2, [r3, #28]
 800c27e:	683b      	ldr	r3, [r7, #0]
 800c280:	781b      	ldrb	r3, [r3, #0]
 800c282:	f003 030f 	and.w	r3, r3, #15
 800c286:	2101      	movs	r1, #1
 800c288:	fa01 f303 	lsl.w	r3, r1, r3
 800c28c:	041b      	lsls	r3, r3, #16
 800c28e:	68f9      	ldr	r1, [r7, #12]
 800c290:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c294:	4313      	orrs	r3, r2
 800c296:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800c298:	68bb      	ldr	r3, [r7, #8]
 800c29a:	015a      	lsls	r2, r3, #5
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	4413      	add	r3, r2
 800c2a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d11a      	bne.n	800c2e4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800c2ae:	68bb      	ldr	r3, [r7, #8]
 800c2b0:	015a      	lsls	r2, r3, #5
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	4413      	add	r3, r2
 800c2b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c2ba:	681a      	ldr	r2, [r3, #0]
 800c2bc:	683b      	ldr	r3, [r7, #0]
 800c2be:	68db      	ldr	r3, [r3, #12]
 800c2c0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800c2c4:	683b      	ldr	r3, [r7, #0]
 800c2c6:	791b      	ldrb	r3, [r3, #4]
 800c2c8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800c2ca:	430b      	orrs	r3, r1
 800c2cc:	4313      	orrs	r3, r2
 800c2ce:	68ba      	ldr	r2, [r7, #8]
 800c2d0:	0151      	lsls	r1, r2, #5
 800c2d2:	68fa      	ldr	r2, [r7, #12]
 800c2d4:	440a      	add	r2, r1
 800c2d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c2da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c2de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c2e2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800c2e4:	2300      	movs	r3, #0
}
 800c2e6:	4618      	mov	r0, r3
 800c2e8:	3714      	adds	r7, #20
 800c2ea:	46bd      	mov	sp, r7
 800c2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2f0:	4770      	bx	lr
	...

0800c2f4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c2f4:	b480      	push	{r7}
 800c2f6:	b085      	sub	sp, #20
 800c2f8:	af00      	add	r7, sp, #0
 800c2fa:	6078      	str	r0, [r7, #4]
 800c2fc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c302:	683b      	ldr	r3, [r7, #0]
 800c304:	781b      	ldrb	r3, [r3, #0]
 800c306:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800c308:	683b      	ldr	r3, [r7, #0]
 800c30a:	785b      	ldrb	r3, [r3, #1]
 800c30c:	2b01      	cmp	r3, #1
 800c30e:	d161      	bne.n	800c3d4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c310:	68bb      	ldr	r3, [r7, #8]
 800c312:	015a      	lsls	r2, r3, #5
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	4413      	add	r3, r2
 800c318:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c322:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c326:	d11f      	bne.n	800c368 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800c328:	68bb      	ldr	r3, [r7, #8]
 800c32a:	015a      	lsls	r2, r3, #5
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	4413      	add	r3, r2
 800c330:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	68ba      	ldr	r2, [r7, #8]
 800c338:	0151      	lsls	r1, r2, #5
 800c33a:	68fa      	ldr	r2, [r7, #12]
 800c33c:	440a      	add	r2, r1
 800c33e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c342:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c346:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800c348:	68bb      	ldr	r3, [r7, #8]
 800c34a:	015a      	lsls	r2, r3, #5
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	4413      	add	r3, r2
 800c350:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	68ba      	ldr	r2, [r7, #8]
 800c358:	0151      	lsls	r1, r2, #5
 800c35a:	68fa      	ldr	r2, [r7, #12]
 800c35c:	440a      	add	r2, r1
 800c35e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c362:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c366:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c36e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c370:	683b      	ldr	r3, [r7, #0]
 800c372:	781b      	ldrb	r3, [r3, #0]
 800c374:	f003 030f 	and.w	r3, r3, #15
 800c378:	2101      	movs	r1, #1
 800c37a:	fa01 f303 	lsl.w	r3, r1, r3
 800c37e:	b29b      	uxth	r3, r3
 800c380:	43db      	mvns	r3, r3
 800c382:	68f9      	ldr	r1, [r7, #12]
 800c384:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c388:	4013      	ands	r3, r2
 800c38a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c392:	69da      	ldr	r2, [r3, #28]
 800c394:	683b      	ldr	r3, [r7, #0]
 800c396:	781b      	ldrb	r3, [r3, #0]
 800c398:	f003 030f 	and.w	r3, r3, #15
 800c39c:	2101      	movs	r1, #1
 800c39e:	fa01 f303 	lsl.w	r3, r1, r3
 800c3a2:	b29b      	uxth	r3, r3
 800c3a4:	43db      	mvns	r3, r3
 800c3a6:	68f9      	ldr	r1, [r7, #12]
 800c3a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c3ac:	4013      	ands	r3, r2
 800c3ae:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800c3b0:	68bb      	ldr	r3, [r7, #8]
 800c3b2:	015a      	lsls	r2, r3, #5
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	4413      	add	r3, r2
 800c3b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c3bc:	681a      	ldr	r2, [r3, #0]
 800c3be:	68bb      	ldr	r3, [r7, #8]
 800c3c0:	0159      	lsls	r1, r3, #5
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	440b      	add	r3, r1
 800c3c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c3ca:	4619      	mov	r1, r3
 800c3cc:	4b35      	ldr	r3, [pc, #212]	; (800c4a4 <USB_DeactivateEndpoint+0x1b0>)
 800c3ce:	4013      	ands	r3, r2
 800c3d0:	600b      	str	r3, [r1, #0]
 800c3d2:	e060      	b.n	800c496 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c3d4:	68bb      	ldr	r3, [r7, #8]
 800c3d6:	015a      	lsls	r2, r3, #5
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	4413      	add	r3, r2
 800c3dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c3e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c3ea:	d11f      	bne.n	800c42c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800c3ec:	68bb      	ldr	r3, [r7, #8]
 800c3ee:	015a      	lsls	r2, r3, #5
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	4413      	add	r3, r2
 800c3f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	68ba      	ldr	r2, [r7, #8]
 800c3fc:	0151      	lsls	r1, r2, #5
 800c3fe:	68fa      	ldr	r2, [r7, #12]
 800c400:	440a      	add	r2, r1
 800c402:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c406:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c40a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800c40c:	68bb      	ldr	r3, [r7, #8]
 800c40e:	015a      	lsls	r2, r3, #5
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	4413      	add	r3, r2
 800c414:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	68ba      	ldr	r2, [r7, #8]
 800c41c:	0151      	lsls	r1, r2, #5
 800c41e:	68fa      	ldr	r2, [r7, #12]
 800c420:	440a      	add	r2, r1
 800c422:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c426:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c42a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c432:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c434:	683b      	ldr	r3, [r7, #0]
 800c436:	781b      	ldrb	r3, [r3, #0]
 800c438:	f003 030f 	and.w	r3, r3, #15
 800c43c:	2101      	movs	r1, #1
 800c43e:	fa01 f303 	lsl.w	r3, r1, r3
 800c442:	041b      	lsls	r3, r3, #16
 800c444:	43db      	mvns	r3, r3
 800c446:	68f9      	ldr	r1, [r7, #12]
 800c448:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c44c:	4013      	ands	r3, r2
 800c44e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c456:	69da      	ldr	r2, [r3, #28]
 800c458:	683b      	ldr	r3, [r7, #0]
 800c45a:	781b      	ldrb	r3, [r3, #0]
 800c45c:	f003 030f 	and.w	r3, r3, #15
 800c460:	2101      	movs	r1, #1
 800c462:	fa01 f303 	lsl.w	r3, r1, r3
 800c466:	041b      	lsls	r3, r3, #16
 800c468:	43db      	mvns	r3, r3
 800c46a:	68f9      	ldr	r1, [r7, #12]
 800c46c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c470:	4013      	ands	r3, r2
 800c472:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800c474:	68bb      	ldr	r3, [r7, #8]
 800c476:	015a      	lsls	r2, r3, #5
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	4413      	add	r3, r2
 800c47c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c480:	681a      	ldr	r2, [r3, #0]
 800c482:	68bb      	ldr	r3, [r7, #8]
 800c484:	0159      	lsls	r1, r3, #5
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	440b      	add	r3, r1
 800c48a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c48e:	4619      	mov	r1, r3
 800c490:	4b05      	ldr	r3, [pc, #20]	; (800c4a8 <USB_DeactivateEndpoint+0x1b4>)
 800c492:	4013      	ands	r3, r2
 800c494:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800c496:	2300      	movs	r3, #0
}
 800c498:	4618      	mov	r0, r3
 800c49a:	3714      	adds	r7, #20
 800c49c:	46bd      	mov	sp, r7
 800c49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4a2:	4770      	bx	lr
 800c4a4:	ec337800 	.word	0xec337800
 800c4a8:	eff37800 	.word	0xeff37800

0800c4ac <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c4ac:	b580      	push	{r7, lr}
 800c4ae:	b086      	sub	sp, #24
 800c4b0:	af00      	add	r7, sp, #0
 800c4b2:	6078      	str	r0, [r7, #4]
 800c4b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800c4ba:	683b      	ldr	r3, [r7, #0]
 800c4bc:	781b      	ldrb	r3, [r3, #0]
 800c4be:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c4c0:	683b      	ldr	r3, [r7, #0]
 800c4c2:	785b      	ldrb	r3, [r3, #1]
 800c4c4:	2b01      	cmp	r3, #1
 800c4c6:	f040 810a 	bne.w	800c6de <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800c4ca:	683b      	ldr	r3, [r7, #0]
 800c4cc:	699b      	ldr	r3, [r3, #24]
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d132      	bne.n	800c538 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c4d2:	693b      	ldr	r3, [r7, #16]
 800c4d4:	015a      	lsls	r2, r3, #5
 800c4d6:	697b      	ldr	r3, [r7, #20]
 800c4d8:	4413      	add	r3, r2
 800c4da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c4de:	691b      	ldr	r3, [r3, #16]
 800c4e0:	693a      	ldr	r2, [r7, #16]
 800c4e2:	0151      	lsls	r1, r2, #5
 800c4e4:	697a      	ldr	r2, [r7, #20]
 800c4e6:	440a      	add	r2, r1
 800c4e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c4ec:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c4f0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c4f4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c4f6:	693b      	ldr	r3, [r7, #16]
 800c4f8:	015a      	lsls	r2, r3, #5
 800c4fa:	697b      	ldr	r3, [r7, #20]
 800c4fc:	4413      	add	r3, r2
 800c4fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c502:	691b      	ldr	r3, [r3, #16]
 800c504:	693a      	ldr	r2, [r7, #16]
 800c506:	0151      	lsls	r1, r2, #5
 800c508:	697a      	ldr	r2, [r7, #20]
 800c50a:	440a      	add	r2, r1
 800c50c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c510:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c514:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c516:	693b      	ldr	r3, [r7, #16]
 800c518:	015a      	lsls	r2, r3, #5
 800c51a:	697b      	ldr	r3, [r7, #20]
 800c51c:	4413      	add	r3, r2
 800c51e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c522:	691b      	ldr	r3, [r3, #16]
 800c524:	693a      	ldr	r2, [r7, #16]
 800c526:	0151      	lsls	r1, r2, #5
 800c528:	697a      	ldr	r2, [r7, #20]
 800c52a:	440a      	add	r2, r1
 800c52c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c530:	0cdb      	lsrs	r3, r3, #19
 800c532:	04db      	lsls	r3, r3, #19
 800c534:	6113      	str	r3, [r2, #16]
 800c536:	e074      	b.n	800c622 <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c538:	693b      	ldr	r3, [r7, #16]
 800c53a:	015a      	lsls	r2, r3, #5
 800c53c:	697b      	ldr	r3, [r7, #20]
 800c53e:	4413      	add	r3, r2
 800c540:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c544:	691b      	ldr	r3, [r3, #16]
 800c546:	693a      	ldr	r2, [r7, #16]
 800c548:	0151      	lsls	r1, r2, #5
 800c54a:	697a      	ldr	r2, [r7, #20]
 800c54c:	440a      	add	r2, r1
 800c54e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c552:	0cdb      	lsrs	r3, r3, #19
 800c554:	04db      	lsls	r3, r3, #19
 800c556:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c558:	693b      	ldr	r3, [r7, #16]
 800c55a:	015a      	lsls	r2, r3, #5
 800c55c:	697b      	ldr	r3, [r7, #20]
 800c55e:	4413      	add	r3, r2
 800c560:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c564:	691b      	ldr	r3, [r3, #16]
 800c566:	693a      	ldr	r2, [r7, #16]
 800c568:	0151      	lsls	r1, r2, #5
 800c56a:	697a      	ldr	r2, [r7, #20]
 800c56c:	440a      	add	r2, r1
 800c56e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c572:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c576:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c57a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800c57c:	693b      	ldr	r3, [r7, #16]
 800c57e:	015a      	lsls	r2, r3, #5
 800c580:	697b      	ldr	r3, [r7, #20]
 800c582:	4413      	add	r3, r2
 800c584:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c588:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800c58a:	683b      	ldr	r3, [r7, #0]
 800c58c:	6999      	ldr	r1, [r3, #24]
 800c58e:	683b      	ldr	r3, [r7, #0]
 800c590:	68db      	ldr	r3, [r3, #12]
 800c592:	440b      	add	r3, r1
 800c594:	1e59      	subs	r1, r3, #1
 800c596:	683b      	ldr	r3, [r7, #0]
 800c598:	68db      	ldr	r3, [r3, #12]
 800c59a:	fbb1 f3f3 	udiv	r3, r1, r3
 800c59e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800c5a0:	4b9e      	ldr	r3, [pc, #632]	; (800c81c <USB_EPStartXfer+0x370>)
 800c5a2:	400b      	ands	r3, r1
 800c5a4:	6939      	ldr	r1, [r7, #16]
 800c5a6:	0148      	lsls	r0, r1, #5
 800c5a8:	6979      	ldr	r1, [r7, #20]
 800c5aa:	4401      	add	r1, r0
 800c5ac:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c5b0:	4313      	orrs	r3, r2
 800c5b2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c5b4:	693b      	ldr	r3, [r7, #16]
 800c5b6:	015a      	lsls	r2, r3, #5
 800c5b8:	697b      	ldr	r3, [r7, #20]
 800c5ba:	4413      	add	r3, r2
 800c5bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c5c0:	691a      	ldr	r2, [r3, #16]
 800c5c2:	683b      	ldr	r3, [r7, #0]
 800c5c4:	699b      	ldr	r3, [r3, #24]
 800c5c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c5ca:	6939      	ldr	r1, [r7, #16]
 800c5cc:	0148      	lsls	r0, r1, #5
 800c5ce:	6979      	ldr	r1, [r7, #20]
 800c5d0:	4401      	add	r1, r0
 800c5d2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c5d6:	4313      	orrs	r3, r2
 800c5d8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800c5da:	683b      	ldr	r3, [r7, #0]
 800c5dc:	791b      	ldrb	r3, [r3, #4]
 800c5de:	2b01      	cmp	r3, #1
 800c5e0:	d11f      	bne.n	800c622 <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800c5e2:	693b      	ldr	r3, [r7, #16]
 800c5e4:	015a      	lsls	r2, r3, #5
 800c5e6:	697b      	ldr	r3, [r7, #20]
 800c5e8:	4413      	add	r3, r2
 800c5ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c5ee:	691b      	ldr	r3, [r3, #16]
 800c5f0:	693a      	ldr	r2, [r7, #16]
 800c5f2:	0151      	lsls	r1, r2, #5
 800c5f4:	697a      	ldr	r2, [r7, #20]
 800c5f6:	440a      	add	r2, r1
 800c5f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c5fc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800c600:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800c602:	693b      	ldr	r3, [r7, #16]
 800c604:	015a      	lsls	r2, r3, #5
 800c606:	697b      	ldr	r3, [r7, #20]
 800c608:	4413      	add	r3, r2
 800c60a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c60e:	691b      	ldr	r3, [r3, #16]
 800c610:	693a      	ldr	r2, [r7, #16]
 800c612:	0151      	lsls	r1, r2, #5
 800c614:	697a      	ldr	r2, [r7, #20]
 800c616:	440a      	add	r2, r1
 800c618:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c61c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c620:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c622:	693b      	ldr	r3, [r7, #16]
 800c624:	015a      	lsls	r2, r3, #5
 800c626:	697b      	ldr	r3, [r7, #20]
 800c628:	4413      	add	r3, r2
 800c62a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	693a      	ldr	r2, [r7, #16]
 800c632:	0151      	lsls	r1, r2, #5
 800c634:	697a      	ldr	r2, [r7, #20]
 800c636:	440a      	add	r2, r1
 800c638:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c63c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c640:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800c642:	683b      	ldr	r3, [r7, #0]
 800c644:	791b      	ldrb	r3, [r3, #4]
 800c646:	2b01      	cmp	r3, #1
 800c648:	d015      	beq.n	800c676 <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800c64a:	683b      	ldr	r3, [r7, #0]
 800c64c:	699b      	ldr	r3, [r3, #24]
 800c64e:	2b00      	cmp	r3, #0
 800c650:	f000 8106 	beq.w	800c860 <USB_EPStartXfer+0x3b4>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c654:	697b      	ldr	r3, [r7, #20]
 800c656:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c65a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c65c:	683b      	ldr	r3, [r7, #0]
 800c65e:	781b      	ldrb	r3, [r3, #0]
 800c660:	f003 030f 	and.w	r3, r3, #15
 800c664:	2101      	movs	r1, #1
 800c666:	fa01 f303 	lsl.w	r3, r1, r3
 800c66a:	6979      	ldr	r1, [r7, #20]
 800c66c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c670:	4313      	orrs	r3, r2
 800c672:	634b      	str	r3, [r1, #52]	; 0x34
 800c674:	e0f4      	b.n	800c860 <USB_EPStartXfer+0x3b4>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c676:	697b      	ldr	r3, [r7, #20]
 800c678:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c67c:	689b      	ldr	r3, [r3, #8]
 800c67e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c682:	2b00      	cmp	r3, #0
 800c684:	d110      	bne.n	800c6a8 <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c686:	693b      	ldr	r3, [r7, #16]
 800c688:	015a      	lsls	r2, r3, #5
 800c68a:	697b      	ldr	r3, [r7, #20]
 800c68c:	4413      	add	r3, r2
 800c68e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	693a      	ldr	r2, [r7, #16]
 800c696:	0151      	lsls	r1, r2, #5
 800c698:	697a      	ldr	r2, [r7, #20]
 800c69a:	440a      	add	r2, r1
 800c69c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c6a0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c6a4:	6013      	str	r3, [r2, #0]
 800c6a6:	e00f      	b.n	800c6c8 <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c6a8:	693b      	ldr	r3, [r7, #16]
 800c6aa:	015a      	lsls	r2, r3, #5
 800c6ac:	697b      	ldr	r3, [r7, #20]
 800c6ae:	4413      	add	r3, r2
 800c6b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	693a      	ldr	r2, [r7, #16]
 800c6b8:	0151      	lsls	r1, r2, #5
 800c6ba:	697a      	ldr	r2, [r7, #20]
 800c6bc:	440a      	add	r2, r1
 800c6be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c6c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c6c6:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 800c6c8:	683b      	ldr	r3, [r7, #0]
 800c6ca:	6919      	ldr	r1, [r3, #16]
 800c6cc:	683b      	ldr	r3, [r7, #0]
 800c6ce:	781a      	ldrb	r2, [r3, #0]
 800c6d0:	683b      	ldr	r3, [r7, #0]
 800c6d2:	699b      	ldr	r3, [r3, #24]
 800c6d4:	b29b      	uxth	r3, r3
 800c6d6:	6878      	ldr	r0, [r7, #4]
 800c6d8:	f000 fa94 	bl	800cc04 <USB_WritePacket>
 800c6dc:	e0c0      	b.n	800c860 <USB_EPStartXfer+0x3b4>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c6de:	693b      	ldr	r3, [r7, #16]
 800c6e0:	015a      	lsls	r2, r3, #5
 800c6e2:	697b      	ldr	r3, [r7, #20]
 800c6e4:	4413      	add	r3, r2
 800c6e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c6ea:	691b      	ldr	r3, [r3, #16]
 800c6ec:	693a      	ldr	r2, [r7, #16]
 800c6ee:	0151      	lsls	r1, r2, #5
 800c6f0:	697a      	ldr	r2, [r7, #20]
 800c6f2:	440a      	add	r2, r1
 800c6f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c6f8:	0cdb      	lsrs	r3, r3, #19
 800c6fa:	04db      	lsls	r3, r3, #19
 800c6fc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800c6fe:	693b      	ldr	r3, [r7, #16]
 800c700:	015a      	lsls	r2, r3, #5
 800c702:	697b      	ldr	r3, [r7, #20]
 800c704:	4413      	add	r3, r2
 800c706:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c70a:	691b      	ldr	r3, [r3, #16]
 800c70c:	693a      	ldr	r2, [r7, #16]
 800c70e:	0151      	lsls	r1, r2, #5
 800c710:	697a      	ldr	r2, [r7, #20]
 800c712:	440a      	add	r2, r1
 800c714:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c718:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c71c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c720:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800c722:	683b      	ldr	r3, [r7, #0]
 800c724:	699b      	ldr	r3, [r3, #24]
 800c726:	2b00      	cmp	r3, #0
 800c728:	d123      	bne.n	800c772 <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800c72a:	693b      	ldr	r3, [r7, #16]
 800c72c:	015a      	lsls	r2, r3, #5
 800c72e:	697b      	ldr	r3, [r7, #20]
 800c730:	4413      	add	r3, r2
 800c732:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c736:	691a      	ldr	r2, [r3, #16]
 800c738:	683b      	ldr	r3, [r7, #0]
 800c73a:	68db      	ldr	r3, [r3, #12]
 800c73c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c740:	6939      	ldr	r1, [r7, #16]
 800c742:	0148      	lsls	r0, r1, #5
 800c744:	6979      	ldr	r1, [r7, #20]
 800c746:	4401      	add	r1, r0
 800c748:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c74c:	4313      	orrs	r3, r2
 800c74e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c750:	693b      	ldr	r3, [r7, #16]
 800c752:	015a      	lsls	r2, r3, #5
 800c754:	697b      	ldr	r3, [r7, #20]
 800c756:	4413      	add	r3, r2
 800c758:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c75c:	691b      	ldr	r3, [r3, #16]
 800c75e:	693a      	ldr	r2, [r7, #16]
 800c760:	0151      	lsls	r1, r2, #5
 800c762:	697a      	ldr	r2, [r7, #20]
 800c764:	440a      	add	r2, r1
 800c766:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c76a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c76e:	6113      	str	r3, [r2, #16]
 800c770:	e037      	b.n	800c7e2 <USB_EPStartXfer+0x336>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800c772:	683b      	ldr	r3, [r7, #0]
 800c774:	699a      	ldr	r2, [r3, #24]
 800c776:	683b      	ldr	r3, [r7, #0]
 800c778:	68db      	ldr	r3, [r3, #12]
 800c77a:	4413      	add	r3, r2
 800c77c:	1e5a      	subs	r2, r3, #1
 800c77e:	683b      	ldr	r3, [r7, #0]
 800c780:	68db      	ldr	r3, [r3, #12]
 800c782:	fbb2 f3f3 	udiv	r3, r2, r3
 800c786:	81fb      	strh	r3, [r7, #14]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800c788:	683b      	ldr	r3, [r7, #0]
 800c78a:	68db      	ldr	r3, [r3, #12]
 800c78c:	89fa      	ldrh	r2, [r7, #14]
 800c78e:	fb03 f202 	mul.w	r2, r3, r2
 800c792:	683b      	ldr	r3, [r7, #0]
 800c794:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800c796:	693b      	ldr	r3, [r7, #16]
 800c798:	015a      	lsls	r2, r3, #5
 800c79a:	697b      	ldr	r3, [r7, #20]
 800c79c:	4413      	add	r3, r2
 800c79e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c7a2:	691a      	ldr	r2, [r3, #16]
 800c7a4:	89fb      	ldrh	r3, [r7, #14]
 800c7a6:	04d9      	lsls	r1, r3, #19
 800c7a8:	4b1c      	ldr	r3, [pc, #112]	; (800c81c <USB_EPStartXfer+0x370>)
 800c7aa:	400b      	ands	r3, r1
 800c7ac:	6939      	ldr	r1, [r7, #16]
 800c7ae:	0148      	lsls	r0, r1, #5
 800c7b0:	6979      	ldr	r1, [r7, #20]
 800c7b2:	4401      	add	r1, r0
 800c7b4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c7b8:	4313      	orrs	r3, r2
 800c7ba:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800c7bc:	693b      	ldr	r3, [r7, #16]
 800c7be:	015a      	lsls	r2, r3, #5
 800c7c0:	697b      	ldr	r3, [r7, #20]
 800c7c2:	4413      	add	r3, r2
 800c7c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c7c8:	691a      	ldr	r2, [r3, #16]
 800c7ca:	683b      	ldr	r3, [r7, #0]
 800c7cc:	69db      	ldr	r3, [r3, #28]
 800c7ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c7d2:	6939      	ldr	r1, [r7, #16]
 800c7d4:	0148      	lsls	r0, r1, #5
 800c7d6:	6979      	ldr	r1, [r7, #20]
 800c7d8:	4401      	add	r1, r0
 800c7da:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c7de:	4313      	orrs	r3, r2
 800c7e0:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 800c7e2:	683b      	ldr	r3, [r7, #0]
 800c7e4:	791b      	ldrb	r3, [r3, #4]
 800c7e6:	2b01      	cmp	r3, #1
 800c7e8:	d12a      	bne.n	800c840 <USB_EPStartXfer+0x394>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c7ea:	697b      	ldr	r3, [r7, #20]
 800c7ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c7f0:	689b      	ldr	r3, [r3, #8]
 800c7f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d112      	bne.n	800c820 <USB_EPStartXfer+0x374>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800c7fa:	693b      	ldr	r3, [r7, #16]
 800c7fc:	015a      	lsls	r2, r3, #5
 800c7fe:	697b      	ldr	r3, [r7, #20]
 800c800:	4413      	add	r3, r2
 800c802:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	693a      	ldr	r2, [r7, #16]
 800c80a:	0151      	lsls	r1, r2, #5
 800c80c:	697a      	ldr	r2, [r7, #20]
 800c80e:	440a      	add	r2, r1
 800c810:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c814:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c818:	6013      	str	r3, [r2, #0]
 800c81a:	e011      	b.n	800c840 <USB_EPStartXfer+0x394>
 800c81c:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800c820:	693b      	ldr	r3, [r7, #16]
 800c822:	015a      	lsls	r2, r3, #5
 800c824:	697b      	ldr	r3, [r7, #20]
 800c826:	4413      	add	r3, r2
 800c828:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	693a      	ldr	r2, [r7, #16]
 800c830:	0151      	lsls	r1, r2, #5
 800c832:	697a      	ldr	r2, [r7, #20]
 800c834:	440a      	add	r2, r1
 800c836:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c83a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c83e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800c840:	693b      	ldr	r3, [r7, #16]
 800c842:	015a      	lsls	r2, r3, #5
 800c844:	697b      	ldr	r3, [r7, #20]
 800c846:	4413      	add	r3, r2
 800c848:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	693a      	ldr	r2, [r7, #16]
 800c850:	0151      	lsls	r1, r2, #5
 800c852:	697a      	ldr	r2, [r7, #20]
 800c854:	440a      	add	r2, r1
 800c856:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c85a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c85e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c860:	2300      	movs	r3, #0
}
 800c862:	4618      	mov	r0, r3
 800c864:	3718      	adds	r7, #24
 800c866:	46bd      	mov	sp, r7
 800c868:	bd80      	pop	{r7, pc}
 800c86a:	bf00      	nop

0800c86c <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c86c:	b480      	push	{r7}
 800c86e:	b085      	sub	sp, #20
 800c870:	af00      	add	r7, sp, #0
 800c872:	6078      	str	r0, [r7, #4]
 800c874:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c87a:	683b      	ldr	r3, [r7, #0]
 800c87c:	781b      	ldrb	r3, [r3, #0]
 800c87e:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c880:	683b      	ldr	r3, [r7, #0]
 800c882:	785b      	ldrb	r3, [r3, #1]
 800c884:	2b01      	cmp	r3, #1
 800c886:	f040 80ab 	bne.w	800c9e0 <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800c88a:	683b      	ldr	r3, [r7, #0]
 800c88c:	699b      	ldr	r3, [r3, #24]
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d132      	bne.n	800c8f8 <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c892:	68bb      	ldr	r3, [r7, #8]
 800c894:	015a      	lsls	r2, r3, #5
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	4413      	add	r3, r2
 800c89a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c89e:	691b      	ldr	r3, [r3, #16]
 800c8a0:	68ba      	ldr	r2, [r7, #8]
 800c8a2:	0151      	lsls	r1, r2, #5
 800c8a4:	68fa      	ldr	r2, [r7, #12]
 800c8a6:	440a      	add	r2, r1
 800c8a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c8ac:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c8b0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c8b4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c8b6:	68bb      	ldr	r3, [r7, #8]
 800c8b8:	015a      	lsls	r2, r3, #5
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	4413      	add	r3, r2
 800c8be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c8c2:	691b      	ldr	r3, [r3, #16]
 800c8c4:	68ba      	ldr	r2, [r7, #8]
 800c8c6:	0151      	lsls	r1, r2, #5
 800c8c8:	68fa      	ldr	r2, [r7, #12]
 800c8ca:	440a      	add	r2, r1
 800c8cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c8d0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c8d4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c8d6:	68bb      	ldr	r3, [r7, #8]
 800c8d8:	015a      	lsls	r2, r3, #5
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	4413      	add	r3, r2
 800c8de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c8e2:	691b      	ldr	r3, [r3, #16]
 800c8e4:	68ba      	ldr	r2, [r7, #8]
 800c8e6:	0151      	lsls	r1, r2, #5
 800c8e8:	68fa      	ldr	r2, [r7, #12]
 800c8ea:	440a      	add	r2, r1
 800c8ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c8f0:	0cdb      	lsrs	r3, r3, #19
 800c8f2:	04db      	lsls	r3, r3, #19
 800c8f4:	6113      	str	r3, [r2, #16]
 800c8f6:	e04e      	b.n	800c996 <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c8f8:	68bb      	ldr	r3, [r7, #8]
 800c8fa:	015a      	lsls	r2, r3, #5
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	4413      	add	r3, r2
 800c900:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c904:	691b      	ldr	r3, [r3, #16]
 800c906:	68ba      	ldr	r2, [r7, #8]
 800c908:	0151      	lsls	r1, r2, #5
 800c90a:	68fa      	ldr	r2, [r7, #12]
 800c90c:	440a      	add	r2, r1
 800c90e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c912:	0cdb      	lsrs	r3, r3, #19
 800c914:	04db      	lsls	r3, r3, #19
 800c916:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c918:	68bb      	ldr	r3, [r7, #8]
 800c91a:	015a      	lsls	r2, r3, #5
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	4413      	add	r3, r2
 800c920:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c924:	691b      	ldr	r3, [r3, #16]
 800c926:	68ba      	ldr	r2, [r7, #8]
 800c928:	0151      	lsls	r1, r2, #5
 800c92a:	68fa      	ldr	r2, [r7, #12]
 800c92c:	440a      	add	r2, r1
 800c92e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c932:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c936:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c93a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800c93c:	683b      	ldr	r3, [r7, #0]
 800c93e:	699a      	ldr	r2, [r3, #24]
 800c940:	683b      	ldr	r3, [r7, #0]
 800c942:	68db      	ldr	r3, [r3, #12]
 800c944:	429a      	cmp	r2, r3
 800c946:	d903      	bls.n	800c950 <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 800c948:	683b      	ldr	r3, [r7, #0]
 800c94a:	68da      	ldr	r2, [r3, #12]
 800c94c:	683b      	ldr	r3, [r7, #0]
 800c94e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c950:	68bb      	ldr	r3, [r7, #8]
 800c952:	015a      	lsls	r2, r3, #5
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	4413      	add	r3, r2
 800c958:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c95c:	691b      	ldr	r3, [r3, #16]
 800c95e:	68ba      	ldr	r2, [r7, #8]
 800c960:	0151      	lsls	r1, r2, #5
 800c962:	68fa      	ldr	r2, [r7, #12]
 800c964:	440a      	add	r2, r1
 800c966:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c96a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c96e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c970:	68bb      	ldr	r3, [r7, #8]
 800c972:	015a      	lsls	r2, r3, #5
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	4413      	add	r3, r2
 800c978:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c97c:	691a      	ldr	r2, [r3, #16]
 800c97e:	683b      	ldr	r3, [r7, #0]
 800c980:	699b      	ldr	r3, [r3, #24]
 800c982:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c986:	68b9      	ldr	r1, [r7, #8]
 800c988:	0148      	lsls	r0, r1, #5
 800c98a:	68f9      	ldr	r1, [r7, #12]
 800c98c:	4401      	add	r1, r0
 800c98e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c992:	4313      	orrs	r3, r2
 800c994:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c996:	68bb      	ldr	r3, [r7, #8]
 800c998:	015a      	lsls	r2, r3, #5
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	4413      	add	r3, r2
 800c99e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	68ba      	ldr	r2, [r7, #8]
 800c9a6:	0151      	lsls	r1, r2, #5
 800c9a8:	68fa      	ldr	r2, [r7, #12]
 800c9aa:	440a      	add	r2, r1
 800c9ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c9b0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c9b4:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 800c9b6:	683b      	ldr	r3, [r7, #0]
 800c9b8:	699b      	ldr	r3, [r3, #24]
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d071      	beq.n	800caa2 <USB_EP0StartXfer+0x236>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c9c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c9c6:	683b      	ldr	r3, [r7, #0]
 800c9c8:	781b      	ldrb	r3, [r3, #0]
 800c9ca:	f003 030f 	and.w	r3, r3, #15
 800c9ce:	2101      	movs	r1, #1
 800c9d0:	fa01 f303 	lsl.w	r3, r1, r3
 800c9d4:	68f9      	ldr	r1, [r7, #12]
 800c9d6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c9da:	4313      	orrs	r3, r2
 800c9dc:	634b      	str	r3, [r1, #52]	; 0x34
 800c9de:	e060      	b.n	800caa2 <USB_EP0StartXfer+0x236>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c9e0:	68bb      	ldr	r3, [r7, #8]
 800c9e2:	015a      	lsls	r2, r3, #5
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	4413      	add	r3, r2
 800c9e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c9ec:	691b      	ldr	r3, [r3, #16]
 800c9ee:	68ba      	ldr	r2, [r7, #8]
 800c9f0:	0151      	lsls	r1, r2, #5
 800c9f2:	68fa      	ldr	r2, [r7, #12]
 800c9f4:	440a      	add	r2, r1
 800c9f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c9fa:	0cdb      	lsrs	r3, r3, #19
 800c9fc:	04db      	lsls	r3, r3, #19
 800c9fe:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800ca00:	68bb      	ldr	r3, [r7, #8]
 800ca02:	015a      	lsls	r2, r3, #5
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	4413      	add	r3, r2
 800ca08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca0c:	691b      	ldr	r3, [r3, #16]
 800ca0e:	68ba      	ldr	r2, [r7, #8]
 800ca10:	0151      	lsls	r1, r2, #5
 800ca12:	68fa      	ldr	r2, [r7, #12]
 800ca14:	440a      	add	r2, r1
 800ca16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ca1a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ca1e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ca22:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800ca24:	683b      	ldr	r3, [r7, #0]
 800ca26:	699b      	ldr	r3, [r3, #24]
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d003      	beq.n	800ca34 <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 800ca2c:	683b      	ldr	r3, [r7, #0]
 800ca2e:	68da      	ldr	r2, [r3, #12]
 800ca30:	683b      	ldr	r3, [r7, #0]
 800ca32:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800ca34:	683b      	ldr	r3, [r7, #0]
 800ca36:	68da      	ldr	r2, [r3, #12]
 800ca38:	683b      	ldr	r3, [r7, #0]
 800ca3a:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ca3c:	68bb      	ldr	r3, [r7, #8]
 800ca3e:	015a      	lsls	r2, r3, #5
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	4413      	add	r3, r2
 800ca44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca48:	691b      	ldr	r3, [r3, #16]
 800ca4a:	68ba      	ldr	r2, [r7, #8]
 800ca4c:	0151      	lsls	r1, r2, #5
 800ca4e:	68fa      	ldr	r2, [r7, #12]
 800ca50:	440a      	add	r2, r1
 800ca52:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ca56:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ca5a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800ca5c:	68bb      	ldr	r3, [r7, #8]
 800ca5e:	015a      	lsls	r2, r3, #5
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	4413      	add	r3, r2
 800ca64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca68:	691a      	ldr	r2, [r3, #16]
 800ca6a:	683b      	ldr	r3, [r7, #0]
 800ca6c:	69db      	ldr	r3, [r3, #28]
 800ca6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ca72:	68b9      	ldr	r1, [r7, #8]
 800ca74:	0148      	lsls	r0, r1, #5
 800ca76:	68f9      	ldr	r1, [r7, #12]
 800ca78:	4401      	add	r1, r0
 800ca7a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ca7e:	4313      	orrs	r3, r2
 800ca80:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800ca82:	68bb      	ldr	r3, [r7, #8]
 800ca84:	015a      	lsls	r2, r3, #5
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	4413      	add	r3, r2
 800ca8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	68ba      	ldr	r2, [r7, #8]
 800ca92:	0151      	lsls	r1, r2, #5
 800ca94:	68fa      	ldr	r2, [r7, #12]
 800ca96:	440a      	add	r2, r1
 800ca98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ca9c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800caa0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800caa2:	2300      	movs	r3, #0
}
 800caa4:	4618      	mov	r0, r3
 800caa6:	3714      	adds	r7, #20
 800caa8:	46bd      	mov	sp, r7
 800caaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caae:	4770      	bx	lr

0800cab0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800cab0:	b480      	push	{r7}
 800cab2:	b087      	sub	sp, #28
 800cab4:	af00      	add	r7, sp, #0
 800cab6:	6078      	str	r0, [r7, #4]
 800cab8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800caba:	2300      	movs	r3, #0
 800cabc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800cabe:	2300      	movs	r3, #0
 800cac0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800cac6:	683b      	ldr	r3, [r7, #0]
 800cac8:	785b      	ldrb	r3, [r3, #1]
 800caca:	2b01      	cmp	r3, #1
 800cacc:	d14a      	bne.n	800cb64 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800cace:	683b      	ldr	r3, [r7, #0]
 800cad0:	781b      	ldrb	r3, [r3, #0]
 800cad2:	015a      	lsls	r2, r3, #5
 800cad4:	693b      	ldr	r3, [r7, #16]
 800cad6:	4413      	add	r3, r2
 800cad8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cae2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cae6:	f040 8086 	bne.w	800cbf6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800caea:	683b      	ldr	r3, [r7, #0]
 800caec:	781b      	ldrb	r3, [r3, #0]
 800caee:	015a      	lsls	r2, r3, #5
 800caf0:	693b      	ldr	r3, [r7, #16]
 800caf2:	4413      	add	r3, r2
 800caf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	683a      	ldr	r2, [r7, #0]
 800cafc:	7812      	ldrb	r2, [r2, #0]
 800cafe:	0151      	lsls	r1, r2, #5
 800cb00:	693a      	ldr	r2, [r7, #16]
 800cb02:	440a      	add	r2, r1
 800cb04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cb08:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800cb0c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800cb0e:	683b      	ldr	r3, [r7, #0]
 800cb10:	781b      	ldrb	r3, [r3, #0]
 800cb12:	015a      	lsls	r2, r3, #5
 800cb14:	693b      	ldr	r3, [r7, #16]
 800cb16:	4413      	add	r3, r2
 800cb18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	683a      	ldr	r2, [r7, #0]
 800cb20:	7812      	ldrb	r2, [r2, #0]
 800cb22:	0151      	lsls	r1, r2, #5
 800cb24:	693a      	ldr	r2, [r7, #16]
 800cb26:	440a      	add	r2, r1
 800cb28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cb2c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cb30:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	3301      	adds	r3, #1
 800cb36:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	f242 7210 	movw	r2, #10000	; 0x2710
 800cb3e:	4293      	cmp	r3, r2
 800cb40:	d902      	bls.n	800cb48 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800cb42:	2301      	movs	r3, #1
 800cb44:	75fb      	strb	r3, [r7, #23]
          break;
 800cb46:	e056      	b.n	800cbf6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800cb48:	683b      	ldr	r3, [r7, #0]
 800cb4a:	781b      	ldrb	r3, [r3, #0]
 800cb4c:	015a      	lsls	r2, r3, #5
 800cb4e:	693b      	ldr	r3, [r7, #16]
 800cb50:	4413      	add	r3, r2
 800cb52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cb5c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cb60:	d0e7      	beq.n	800cb32 <USB_EPStopXfer+0x82>
 800cb62:	e048      	b.n	800cbf6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800cb64:	683b      	ldr	r3, [r7, #0]
 800cb66:	781b      	ldrb	r3, [r3, #0]
 800cb68:	015a      	lsls	r2, r3, #5
 800cb6a:	693b      	ldr	r3, [r7, #16]
 800cb6c:	4413      	add	r3, r2
 800cb6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cb78:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cb7c:	d13b      	bne.n	800cbf6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800cb7e:	683b      	ldr	r3, [r7, #0]
 800cb80:	781b      	ldrb	r3, [r3, #0]
 800cb82:	015a      	lsls	r2, r3, #5
 800cb84:	693b      	ldr	r3, [r7, #16]
 800cb86:	4413      	add	r3, r2
 800cb88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	683a      	ldr	r2, [r7, #0]
 800cb90:	7812      	ldrb	r2, [r2, #0]
 800cb92:	0151      	lsls	r1, r2, #5
 800cb94:	693a      	ldr	r2, [r7, #16]
 800cb96:	440a      	add	r2, r1
 800cb98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cb9c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800cba0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800cba2:	683b      	ldr	r3, [r7, #0]
 800cba4:	781b      	ldrb	r3, [r3, #0]
 800cba6:	015a      	lsls	r2, r3, #5
 800cba8:	693b      	ldr	r3, [r7, #16]
 800cbaa:	4413      	add	r3, r2
 800cbac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	683a      	ldr	r2, [r7, #0]
 800cbb4:	7812      	ldrb	r2, [r2, #0]
 800cbb6:	0151      	lsls	r1, r2, #5
 800cbb8:	693a      	ldr	r2, [r7, #16]
 800cbba:	440a      	add	r2, r1
 800cbbc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cbc0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cbc4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	3301      	adds	r3, #1
 800cbca:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	f242 7210 	movw	r2, #10000	; 0x2710
 800cbd2:	4293      	cmp	r3, r2
 800cbd4:	d902      	bls.n	800cbdc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800cbd6:	2301      	movs	r3, #1
 800cbd8:	75fb      	strb	r3, [r7, #23]
          break;
 800cbda:	e00c      	b.n	800cbf6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800cbdc:	683b      	ldr	r3, [r7, #0]
 800cbde:	781b      	ldrb	r3, [r3, #0]
 800cbe0:	015a      	lsls	r2, r3, #5
 800cbe2:	693b      	ldr	r3, [r7, #16]
 800cbe4:	4413      	add	r3, r2
 800cbe6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cbf0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cbf4:	d0e7      	beq.n	800cbc6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800cbf6:	7dfb      	ldrb	r3, [r7, #23]
}
 800cbf8:	4618      	mov	r0, r3
 800cbfa:	371c      	adds	r7, #28
 800cbfc:	46bd      	mov	sp, r7
 800cbfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc02:	4770      	bx	lr

0800cc04 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 800cc04:	b480      	push	{r7}
 800cc06:	b089      	sub	sp, #36	; 0x24
 800cc08:	af00      	add	r7, sp, #0
 800cc0a:	60f8      	str	r0, [r7, #12]
 800cc0c:	60b9      	str	r1, [r7, #8]
 800cc0e:	4611      	mov	r1, r2
 800cc10:	461a      	mov	r2, r3
 800cc12:	460b      	mov	r3, r1
 800cc14:	71fb      	strb	r3, [r7, #7]
 800cc16:	4613      	mov	r3, r2
 800cc18:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800cc1e:	68bb      	ldr	r3, [r7, #8]
 800cc20:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 800cc22:	88bb      	ldrh	r3, [r7, #4]
 800cc24:	3303      	adds	r3, #3
 800cc26:	089b      	lsrs	r3, r3, #2
 800cc28:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800cc2a:	2300      	movs	r3, #0
 800cc2c:	61bb      	str	r3, [r7, #24]
 800cc2e:	e018      	b.n	800cc62 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800cc30:	79fb      	ldrb	r3, [r7, #7]
 800cc32:	031a      	lsls	r2, r3, #12
 800cc34:	697b      	ldr	r3, [r7, #20]
 800cc36:	4413      	add	r3, r2
 800cc38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cc3c:	461a      	mov	r2, r3
 800cc3e:	69fb      	ldr	r3, [r7, #28]
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	6013      	str	r3, [r2, #0]
    pSrc++;
 800cc44:	69fb      	ldr	r3, [r7, #28]
 800cc46:	3301      	adds	r3, #1
 800cc48:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800cc4a:	69fb      	ldr	r3, [r7, #28]
 800cc4c:	3301      	adds	r3, #1
 800cc4e:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800cc50:	69fb      	ldr	r3, [r7, #28]
 800cc52:	3301      	adds	r3, #1
 800cc54:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800cc56:	69fb      	ldr	r3, [r7, #28]
 800cc58:	3301      	adds	r3, #1
 800cc5a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800cc5c:	69bb      	ldr	r3, [r7, #24]
 800cc5e:	3301      	adds	r3, #1
 800cc60:	61bb      	str	r3, [r7, #24]
 800cc62:	69ba      	ldr	r2, [r7, #24]
 800cc64:	693b      	ldr	r3, [r7, #16]
 800cc66:	429a      	cmp	r2, r3
 800cc68:	d3e2      	bcc.n	800cc30 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 800cc6a:	2300      	movs	r3, #0
}
 800cc6c:	4618      	mov	r0, r3
 800cc6e:	3724      	adds	r7, #36	; 0x24
 800cc70:	46bd      	mov	sp, r7
 800cc72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc76:	4770      	bx	lr

0800cc78 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800cc78:	b480      	push	{r7}
 800cc7a:	b08b      	sub	sp, #44	; 0x2c
 800cc7c:	af00      	add	r7, sp, #0
 800cc7e:	60f8      	str	r0, [r7, #12]
 800cc80:	60b9      	str	r1, [r7, #8]
 800cc82:	4613      	mov	r3, r2
 800cc84:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800cc8a:	68bb      	ldr	r3, [r7, #8]
 800cc8c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800cc8e:	88fb      	ldrh	r3, [r7, #6]
 800cc90:	089b      	lsrs	r3, r3, #2
 800cc92:	b29b      	uxth	r3, r3
 800cc94:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800cc96:	88fb      	ldrh	r3, [r7, #6]
 800cc98:	f003 0303 	and.w	r3, r3, #3
 800cc9c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800cc9e:	2300      	movs	r3, #0
 800cca0:	623b      	str	r3, [r7, #32]
 800cca2:	e014      	b.n	800ccce <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800cca4:	69bb      	ldr	r3, [r7, #24]
 800cca6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ccaa:	681a      	ldr	r2, [r3, #0]
 800ccac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccae:	601a      	str	r2, [r3, #0]
    pDest++;
 800ccb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccb2:	3301      	adds	r3, #1
 800ccb4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800ccb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccb8:	3301      	adds	r3, #1
 800ccba:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800ccbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccbe:	3301      	adds	r3, #1
 800ccc0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800ccc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccc4:	3301      	adds	r3, #1
 800ccc6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800ccc8:	6a3b      	ldr	r3, [r7, #32]
 800ccca:	3301      	adds	r3, #1
 800cccc:	623b      	str	r3, [r7, #32]
 800ccce:	6a3a      	ldr	r2, [r7, #32]
 800ccd0:	697b      	ldr	r3, [r7, #20]
 800ccd2:	429a      	cmp	r2, r3
 800ccd4:	d3e6      	bcc.n	800cca4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800ccd6:	8bfb      	ldrh	r3, [r7, #30]
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d01e      	beq.n	800cd1a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800ccdc:	2300      	movs	r3, #0
 800ccde:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800cce0:	69bb      	ldr	r3, [r7, #24]
 800cce2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cce6:	461a      	mov	r2, r3
 800cce8:	f107 0310 	add.w	r3, r7, #16
 800ccec:	6812      	ldr	r2, [r2, #0]
 800ccee:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800ccf0:	693a      	ldr	r2, [r7, #16]
 800ccf2:	6a3b      	ldr	r3, [r7, #32]
 800ccf4:	b2db      	uxtb	r3, r3
 800ccf6:	00db      	lsls	r3, r3, #3
 800ccf8:	fa22 f303 	lsr.w	r3, r2, r3
 800ccfc:	b2da      	uxtb	r2, r3
 800ccfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd00:	701a      	strb	r2, [r3, #0]
      i++;
 800cd02:	6a3b      	ldr	r3, [r7, #32]
 800cd04:	3301      	adds	r3, #1
 800cd06:	623b      	str	r3, [r7, #32]
      pDest++;
 800cd08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd0a:	3301      	adds	r3, #1
 800cd0c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800cd0e:	8bfb      	ldrh	r3, [r7, #30]
 800cd10:	3b01      	subs	r3, #1
 800cd12:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800cd14:	8bfb      	ldrh	r3, [r7, #30]
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d1ea      	bne.n	800ccf0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800cd1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cd1c:	4618      	mov	r0, r3
 800cd1e:	372c      	adds	r7, #44	; 0x2c
 800cd20:	46bd      	mov	sp, r7
 800cd22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd26:	4770      	bx	lr

0800cd28 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800cd28:	b480      	push	{r7}
 800cd2a:	b085      	sub	sp, #20
 800cd2c:	af00      	add	r7, sp, #0
 800cd2e:	6078      	str	r0, [r7, #4]
 800cd30:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800cd36:	683b      	ldr	r3, [r7, #0]
 800cd38:	781b      	ldrb	r3, [r3, #0]
 800cd3a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800cd3c:	683b      	ldr	r3, [r7, #0]
 800cd3e:	785b      	ldrb	r3, [r3, #1]
 800cd40:	2b01      	cmp	r3, #1
 800cd42:	d12c      	bne.n	800cd9e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800cd44:	68bb      	ldr	r3, [r7, #8]
 800cd46:	015a      	lsls	r2, r3, #5
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	4413      	add	r3, r2
 800cd4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	db12      	blt.n	800cd7c <USB_EPSetStall+0x54>
 800cd56:	68bb      	ldr	r3, [r7, #8]
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d00f      	beq.n	800cd7c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800cd5c:	68bb      	ldr	r3, [r7, #8]
 800cd5e:	015a      	lsls	r2, r3, #5
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	4413      	add	r3, r2
 800cd64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	68ba      	ldr	r2, [r7, #8]
 800cd6c:	0151      	lsls	r1, r2, #5
 800cd6e:	68fa      	ldr	r2, [r7, #12]
 800cd70:	440a      	add	r2, r1
 800cd72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cd76:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800cd7a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800cd7c:	68bb      	ldr	r3, [r7, #8]
 800cd7e:	015a      	lsls	r2, r3, #5
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	4413      	add	r3, r2
 800cd84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	68ba      	ldr	r2, [r7, #8]
 800cd8c:	0151      	lsls	r1, r2, #5
 800cd8e:	68fa      	ldr	r2, [r7, #12]
 800cd90:	440a      	add	r2, r1
 800cd92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cd96:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800cd9a:	6013      	str	r3, [r2, #0]
 800cd9c:	e02b      	b.n	800cdf6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800cd9e:	68bb      	ldr	r3, [r7, #8]
 800cda0:	015a      	lsls	r2, r3, #5
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	4413      	add	r3, r2
 800cda6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	db12      	blt.n	800cdd6 <USB_EPSetStall+0xae>
 800cdb0:	68bb      	ldr	r3, [r7, #8]
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d00f      	beq.n	800cdd6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800cdb6:	68bb      	ldr	r3, [r7, #8]
 800cdb8:	015a      	lsls	r2, r3, #5
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	4413      	add	r3, r2
 800cdbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	68ba      	ldr	r2, [r7, #8]
 800cdc6:	0151      	lsls	r1, r2, #5
 800cdc8:	68fa      	ldr	r2, [r7, #12]
 800cdca:	440a      	add	r2, r1
 800cdcc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cdd0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800cdd4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800cdd6:	68bb      	ldr	r3, [r7, #8]
 800cdd8:	015a      	lsls	r2, r3, #5
 800cdda:	68fb      	ldr	r3, [r7, #12]
 800cddc:	4413      	add	r3, r2
 800cdde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	68ba      	ldr	r2, [r7, #8]
 800cde6:	0151      	lsls	r1, r2, #5
 800cde8:	68fa      	ldr	r2, [r7, #12]
 800cdea:	440a      	add	r2, r1
 800cdec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cdf0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800cdf4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800cdf6:	2300      	movs	r3, #0
}
 800cdf8:	4618      	mov	r0, r3
 800cdfa:	3714      	adds	r7, #20
 800cdfc:	46bd      	mov	sp, r7
 800cdfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce02:	4770      	bx	lr

0800ce04 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ce04:	b480      	push	{r7}
 800ce06:	b085      	sub	sp, #20
 800ce08:	af00      	add	r7, sp, #0
 800ce0a:	6078      	str	r0, [r7, #4]
 800ce0c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ce12:	683b      	ldr	r3, [r7, #0]
 800ce14:	781b      	ldrb	r3, [r3, #0]
 800ce16:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ce18:	683b      	ldr	r3, [r7, #0]
 800ce1a:	785b      	ldrb	r3, [r3, #1]
 800ce1c:	2b01      	cmp	r3, #1
 800ce1e:	d128      	bne.n	800ce72 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800ce20:	68bb      	ldr	r3, [r7, #8]
 800ce22:	015a      	lsls	r2, r3, #5
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	4413      	add	r3, r2
 800ce28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	68ba      	ldr	r2, [r7, #8]
 800ce30:	0151      	lsls	r1, r2, #5
 800ce32:	68fa      	ldr	r2, [r7, #12]
 800ce34:	440a      	add	r2, r1
 800ce36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ce3a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ce3e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ce40:	683b      	ldr	r3, [r7, #0]
 800ce42:	791b      	ldrb	r3, [r3, #4]
 800ce44:	2b03      	cmp	r3, #3
 800ce46:	d003      	beq.n	800ce50 <USB_EPClearStall+0x4c>
 800ce48:	683b      	ldr	r3, [r7, #0]
 800ce4a:	791b      	ldrb	r3, [r3, #4]
 800ce4c:	2b02      	cmp	r3, #2
 800ce4e:	d138      	bne.n	800cec2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ce50:	68bb      	ldr	r3, [r7, #8]
 800ce52:	015a      	lsls	r2, r3, #5
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	4413      	add	r3, r2
 800ce58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	68ba      	ldr	r2, [r7, #8]
 800ce60:	0151      	lsls	r1, r2, #5
 800ce62:	68fa      	ldr	r2, [r7, #12]
 800ce64:	440a      	add	r2, r1
 800ce66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ce6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ce6e:	6013      	str	r3, [r2, #0]
 800ce70:	e027      	b.n	800cec2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800ce72:	68bb      	ldr	r3, [r7, #8]
 800ce74:	015a      	lsls	r2, r3, #5
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	4413      	add	r3, r2
 800ce7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	68ba      	ldr	r2, [r7, #8]
 800ce82:	0151      	lsls	r1, r2, #5
 800ce84:	68fa      	ldr	r2, [r7, #12]
 800ce86:	440a      	add	r2, r1
 800ce88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ce8c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ce90:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ce92:	683b      	ldr	r3, [r7, #0]
 800ce94:	791b      	ldrb	r3, [r3, #4]
 800ce96:	2b03      	cmp	r3, #3
 800ce98:	d003      	beq.n	800cea2 <USB_EPClearStall+0x9e>
 800ce9a:	683b      	ldr	r3, [r7, #0]
 800ce9c:	791b      	ldrb	r3, [r3, #4]
 800ce9e:	2b02      	cmp	r3, #2
 800cea0:	d10f      	bne.n	800cec2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800cea2:	68bb      	ldr	r3, [r7, #8]
 800cea4:	015a      	lsls	r2, r3, #5
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	4413      	add	r3, r2
 800ceaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	68ba      	ldr	r2, [r7, #8]
 800ceb2:	0151      	lsls	r1, r2, #5
 800ceb4:	68fa      	ldr	r2, [r7, #12]
 800ceb6:	440a      	add	r2, r1
 800ceb8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cebc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cec0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800cec2:	2300      	movs	r3, #0
}
 800cec4:	4618      	mov	r0, r3
 800cec6:	3714      	adds	r7, #20
 800cec8:	46bd      	mov	sp, r7
 800ceca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cece:	4770      	bx	lr

0800ced0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800ced0:	b480      	push	{r7}
 800ced2:	b085      	sub	sp, #20
 800ced4:	af00      	add	r7, sp, #0
 800ced6:	6078      	str	r0, [r7, #4]
 800ced8:	460b      	mov	r3, r1
 800ceda:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	68fa      	ldr	r2, [r7, #12]
 800ceea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ceee:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800cef2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cefa:	681a      	ldr	r2, [r3, #0]
 800cefc:	78fb      	ldrb	r3, [r7, #3]
 800cefe:	011b      	lsls	r3, r3, #4
 800cf00:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800cf04:	68f9      	ldr	r1, [r7, #12]
 800cf06:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cf0a:	4313      	orrs	r3, r2
 800cf0c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800cf0e:	2300      	movs	r3, #0
}
 800cf10:	4618      	mov	r0, r3
 800cf12:	3714      	adds	r7, #20
 800cf14:	46bd      	mov	sp, r7
 800cf16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf1a:	4770      	bx	lr

0800cf1c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800cf1c:	b480      	push	{r7}
 800cf1e:	b085      	sub	sp, #20
 800cf20:	af00      	add	r7, sp, #0
 800cf22:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	68fa      	ldr	r2, [r7, #12]
 800cf32:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800cf36:	f023 0303 	bic.w	r3, r3, #3
 800cf3a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cf42:	685b      	ldr	r3, [r3, #4]
 800cf44:	68fa      	ldr	r2, [r7, #12]
 800cf46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cf4a:	f023 0302 	bic.w	r3, r3, #2
 800cf4e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800cf50:	2300      	movs	r3, #0
}
 800cf52:	4618      	mov	r0, r3
 800cf54:	3714      	adds	r7, #20
 800cf56:	46bd      	mov	sp, r7
 800cf58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf5c:	4770      	bx	lr

0800cf5e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800cf5e:	b480      	push	{r7}
 800cf60:	b085      	sub	sp, #20
 800cf62:	af00      	add	r7, sp, #0
 800cf64:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	68fa      	ldr	r2, [r7, #12]
 800cf74:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800cf78:	f023 0303 	bic.w	r3, r3, #3
 800cf7c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cf84:	685b      	ldr	r3, [r3, #4]
 800cf86:	68fa      	ldr	r2, [r7, #12]
 800cf88:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cf8c:	f043 0302 	orr.w	r3, r3, #2
 800cf90:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800cf92:	2300      	movs	r3, #0
}
 800cf94:	4618      	mov	r0, r3
 800cf96:	3714      	adds	r7, #20
 800cf98:	46bd      	mov	sp, r7
 800cf9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf9e:	4770      	bx	lr

0800cfa0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800cfa0:	b480      	push	{r7}
 800cfa2:	b085      	sub	sp, #20
 800cfa4:	af00      	add	r7, sp, #0
 800cfa6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	695b      	ldr	r3, [r3, #20]
 800cfac:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	699b      	ldr	r3, [r3, #24]
 800cfb2:	68fa      	ldr	r2, [r7, #12]
 800cfb4:	4013      	ands	r3, r2
 800cfb6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800cfb8:	68fb      	ldr	r3, [r7, #12]
}
 800cfba:	4618      	mov	r0, r3
 800cfbc:	3714      	adds	r7, #20
 800cfbe:	46bd      	mov	sp, r7
 800cfc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfc4:	4770      	bx	lr

0800cfc6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800cfc6:	b480      	push	{r7}
 800cfc8:	b085      	sub	sp, #20
 800cfca:	af00      	add	r7, sp, #0
 800cfcc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800cfd2:	68fb      	ldr	r3, [r7, #12]
 800cfd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cfd8:	699b      	ldr	r3, [r3, #24]
 800cfda:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cfe2:	69db      	ldr	r3, [r3, #28]
 800cfe4:	68ba      	ldr	r2, [r7, #8]
 800cfe6:	4013      	ands	r3, r2
 800cfe8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800cfea:	68bb      	ldr	r3, [r7, #8]
 800cfec:	0c1b      	lsrs	r3, r3, #16
}
 800cfee:	4618      	mov	r0, r3
 800cff0:	3714      	adds	r7, #20
 800cff2:	46bd      	mov	sp, r7
 800cff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cff8:	4770      	bx	lr

0800cffa <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800cffa:	b480      	push	{r7}
 800cffc:	b085      	sub	sp, #20
 800cffe:	af00      	add	r7, sp, #0
 800d000:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d00c:	699b      	ldr	r3, [r3, #24]
 800d00e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d016:	69db      	ldr	r3, [r3, #28]
 800d018:	68ba      	ldr	r2, [r7, #8]
 800d01a:	4013      	ands	r3, r2
 800d01c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800d01e:	68bb      	ldr	r3, [r7, #8]
 800d020:	b29b      	uxth	r3, r3
}
 800d022:	4618      	mov	r0, r3
 800d024:	3714      	adds	r7, #20
 800d026:	46bd      	mov	sp, r7
 800d028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d02c:	4770      	bx	lr

0800d02e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800d02e:	b480      	push	{r7}
 800d030:	b085      	sub	sp, #20
 800d032:	af00      	add	r7, sp, #0
 800d034:	6078      	str	r0, [r7, #4]
 800d036:	460b      	mov	r3, r1
 800d038:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800d03e:	78fb      	ldrb	r3, [r7, #3]
 800d040:	015a      	lsls	r2, r3, #5
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	4413      	add	r3, r2
 800d046:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d04a:	689b      	ldr	r3, [r3, #8]
 800d04c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d054:	695b      	ldr	r3, [r3, #20]
 800d056:	68ba      	ldr	r2, [r7, #8]
 800d058:	4013      	ands	r3, r2
 800d05a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d05c:	68bb      	ldr	r3, [r7, #8]
}
 800d05e:	4618      	mov	r0, r3
 800d060:	3714      	adds	r7, #20
 800d062:	46bd      	mov	sp, r7
 800d064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d068:	4770      	bx	lr

0800d06a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800d06a:	b480      	push	{r7}
 800d06c:	b087      	sub	sp, #28
 800d06e:	af00      	add	r7, sp, #0
 800d070:	6078      	str	r0, [r7, #4]
 800d072:	460b      	mov	r3, r1
 800d074:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800d07a:	697b      	ldr	r3, [r7, #20]
 800d07c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d080:	691b      	ldr	r3, [r3, #16]
 800d082:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800d084:	697b      	ldr	r3, [r7, #20]
 800d086:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d08a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d08c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800d08e:	78fb      	ldrb	r3, [r7, #3]
 800d090:	f003 030f 	and.w	r3, r3, #15
 800d094:	68fa      	ldr	r2, [r7, #12]
 800d096:	fa22 f303 	lsr.w	r3, r2, r3
 800d09a:	01db      	lsls	r3, r3, #7
 800d09c:	b2db      	uxtb	r3, r3
 800d09e:	693a      	ldr	r2, [r7, #16]
 800d0a0:	4313      	orrs	r3, r2
 800d0a2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800d0a4:	78fb      	ldrb	r3, [r7, #3]
 800d0a6:	015a      	lsls	r2, r3, #5
 800d0a8:	697b      	ldr	r3, [r7, #20]
 800d0aa:	4413      	add	r3, r2
 800d0ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d0b0:	689b      	ldr	r3, [r3, #8]
 800d0b2:	693a      	ldr	r2, [r7, #16]
 800d0b4:	4013      	ands	r3, r2
 800d0b6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d0b8:	68bb      	ldr	r3, [r7, #8]
}
 800d0ba:	4618      	mov	r0, r3
 800d0bc:	371c      	adds	r7, #28
 800d0be:	46bd      	mov	sp, r7
 800d0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0c4:	4770      	bx	lr

0800d0c6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800d0c6:	b480      	push	{r7}
 800d0c8:	b083      	sub	sp, #12
 800d0ca:	af00      	add	r7, sp, #0
 800d0cc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	695b      	ldr	r3, [r3, #20]
 800d0d2:	f003 0301 	and.w	r3, r3, #1
}
 800d0d6:	4618      	mov	r0, r3
 800d0d8:	370c      	adds	r7, #12
 800d0da:	46bd      	mov	sp, r7
 800d0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0e0:	4770      	bx	lr

0800d0e2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800d0e2:	b480      	push	{r7}
 800d0e4:	b085      	sub	sp, #20
 800d0e6:	af00      	add	r7, sp, #0
 800d0e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	68fa      	ldr	r2, [r7, #12]
 800d0f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d0fc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800d100:	f023 0307 	bic.w	r3, r3, #7
 800d104:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d10c:	685b      	ldr	r3, [r3, #4]
 800d10e:	68fa      	ldr	r2, [r7, #12]
 800d110:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d114:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d118:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d11a:	2300      	movs	r3, #0
}
 800d11c:	4618      	mov	r0, r3
 800d11e:	3714      	adds	r7, #20
 800d120:	46bd      	mov	sp, r7
 800d122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d126:	4770      	bx	lr

0800d128 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 800d128:	b480      	push	{r7}
 800d12a:	b085      	sub	sp, #20
 800d12c:	af00      	add	r7, sp, #0
 800d12e:	6078      	str	r0, [r7, #4]
 800d130:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	333c      	adds	r3, #60	; 0x3c
 800d13a:	3304      	adds	r3, #4
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800d140:	68bb      	ldr	r3, [r7, #8]
 800d142:	4a1c      	ldr	r2, [pc, #112]	; (800d1b4 <USB_EP0_OutStart+0x8c>)
 800d144:	4293      	cmp	r3, r2
 800d146:	d90a      	bls.n	800d15e <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d154:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d158:	d101      	bne.n	800d15e <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 800d15a:	2300      	movs	r3, #0
 800d15c:	e024      	b.n	800d1a8 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d164:	461a      	mov	r2, r3
 800d166:	2300      	movs	r3, #0
 800d168:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d170:	691b      	ldr	r3, [r3, #16]
 800d172:	68fa      	ldr	r2, [r7, #12]
 800d174:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d178:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d17c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800d17e:	68fb      	ldr	r3, [r7, #12]
 800d180:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d184:	691b      	ldr	r3, [r3, #16]
 800d186:	68fa      	ldr	r2, [r7, #12]
 800d188:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d18c:	f043 0318 	orr.w	r3, r3, #24
 800d190:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800d192:	68fb      	ldr	r3, [r7, #12]
 800d194:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d198:	691b      	ldr	r3, [r3, #16]
 800d19a:	68fa      	ldr	r2, [r7, #12]
 800d19c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d1a0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800d1a4:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800d1a6:	2300      	movs	r3, #0
}
 800d1a8:	4618      	mov	r0, r3
 800d1aa:	3714      	adds	r7, #20
 800d1ac:	46bd      	mov	sp, r7
 800d1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1b2:	4770      	bx	lr
 800d1b4:	4f54300a 	.word	0x4f54300a

0800d1b8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800d1b8:	b480      	push	{r7}
 800d1ba:	b085      	sub	sp, #20
 800d1bc:	af00      	add	r7, sp, #0
 800d1be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d1c0:	2300      	movs	r3, #0
 800d1c2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	3301      	adds	r3, #1
 800d1c8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	4a13      	ldr	r2, [pc, #76]	; (800d21c <USB_CoreReset+0x64>)
 800d1ce:	4293      	cmp	r3, r2
 800d1d0:	d901      	bls.n	800d1d6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800d1d2:	2303      	movs	r3, #3
 800d1d4:	e01b      	b.n	800d20e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	691b      	ldr	r3, [r3, #16]
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	daf2      	bge.n	800d1c4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800d1de:	2300      	movs	r3, #0
 800d1e0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	691b      	ldr	r3, [r3, #16]
 800d1e6:	f043 0201 	orr.w	r2, r3, #1
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	3301      	adds	r3, #1
 800d1f2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	4a09      	ldr	r2, [pc, #36]	; (800d21c <USB_CoreReset+0x64>)
 800d1f8:	4293      	cmp	r3, r2
 800d1fa:	d901      	bls.n	800d200 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800d1fc:	2303      	movs	r3, #3
 800d1fe:	e006      	b.n	800d20e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	691b      	ldr	r3, [r3, #16]
 800d204:	f003 0301 	and.w	r3, r3, #1
 800d208:	2b01      	cmp	r3, #1
 800d20a:	d0f0      	beq.n	800d1ee <USB_CoreReset+0x36>

  return HAL_OK;
 800d20c:	2300      	movs	r3, #0
}
 800d20e:	4618      	mov	r0, r3
 800d210:	3714      	adds	r7, #20
 800d212:	46bd      	mov	sp, r7
 800d214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d218:	4770      	bx	lr
 800d21a:	bf00      	nop
 800d21c:	00030d40 	.word	0x00030d40

0800d220 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800d220:	b580      	push	{r7, lr}
 800d222:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800d224:	4904      	ldr	r1, [pc, #16]	; (800d238 <MX_FATFS_Init+0x18>)
 800d226:	4805      	ldr	r0, [pc, #20]	; (800d23c <MX_FATFS_Init+0x1c>)
 800d228:	f001 ff48 	bl	800f0bc <FATFS_LinkDriver>
 800d22c:	4603      	mov	r3, r0
 800d22e:	461a      	mov	r2, r3
 800d230:	4b03      	ldr	r3, [pc, #12]	; (800d240 <MX_FATFS_Init+0x20>)
 800d232:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800d234:	bf00      	nop
 800d236:	bd80      	pop	{r7, pc}
 800d238:	20000e88 	.word	0x20000e88
 800d23c:	08013bb8 	.word	0x08013bb8
 800d240:	20000e84 	.word	0x20000e84

0800d244 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800d244:	b580      	push	{r7, lr}
 800d246:	b082      	sub	sp, #8
 800d248:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800d24a:	2300      	movs	r3, #0
 800d24c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800d24e:	f000 f885 	bl	800d35c <BSP_SD_IsDetected>
 800d252:	4603      	mov	r3, r0
 800d254:	2b01      	cmp	r3, #1
 800d256:	d001      	beq.n	800d25c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800d258:	2302      	movs	r3, #2
 800d25a:	e012      	b.n	800d282 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800d25c:	480b      	ldr	r0, [pc, #44]	; (800d28c <BSP_SD_Init+0x48>)
 800d25e:	f7fb f961 	bl	8008524 <HAL_SD_Init>
 800d262:	4603      	mov	r3, r0
 800d264:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800d266:	79fb      	ldrb	r3, [r7, #7]
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d109      	bne.n	800d280 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800d26c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800d270:	4806      	ldr	r0, [pc, #24]	; (800d28c <BSP_SD_Init+0x48>)
 800d272:	f7fc f815 	bl	80092a0 <HAL_SD_ConfigWideBusOperation>
 800d276:	4603      	mov	r3, r0
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d001      	beq.n	800d280 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800d27c:	2301      	movs	r3, #1
 800d27e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800d280:	79fb      	ldrb	r3, [r7, #7]
}
 800d282:	4618      	mov	r0, r3
 800d284:	3708      	adds	r7, #8
 800d286:	46bd      	mov	sp, r7
 800d288:	bd80      	pop	{r7, pc}
 800d28a:	bf00      	nop
 800d28c:	20000bc0 	.word	0x20000bc0

0800d290 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800d290:	b580      	push	{r7, lr}
 800d292:	b086      	sub	sp, #24
 800d294:	af00      	add	r7, sp, #0
 800d296:	60f8      	str	r0, [r7, #12]
 800d298:	60b9      	str	r1, [r7, #8]
 800d29a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800d29c:	2300      	movs	r3, #0
 800d29e:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	68ba      	ldr	r2, [r7, #8]
 800d2a4:	68f9      	ldr	r1, [r7, #12]
 800d2a6:	4806      	ldr	r0, [pc, #24]	; (800d2c0 <BSP_SD_ReadBlocks_DMA+0x30>)
 800d2a8:	f7fb fa64 	bl	8008774 <HAL_SD_ReadBlocks_DMA>
 800d2ac:	4603      	mov	r3, r0
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d001      	beq.n	800d2b6 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800d2b2:	2301      	movs	r3, #1
 800d2b4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800d2b6:	7dfb      	ldrb	r3, [r7, #23]
}
 800d2b8:	4618      	mov	r0, r3
 800d2ba:	3718      	adds	r7, #24
 800d2bc:	46bd      	mov	sp, r7
 800d2be:	bd80      	pop	{r7, pc}
 800d2c0:	20000bc0 	.word	0x20000bc0

0800d2c4 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800d2c4:	b580      	push	{r7, lr}
 800d2c6:	b086      	sub	sp, #24
 800d2c8:	af00      	add	r7, sp, #0
 800d2ca:	60f8      	str	r0, [r7, #12]
 800d2cc:	60b9      	str	r1, [r7, #8]
 800d2ce:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800d2d0:	2300      	movs	r3, #0
 800d2d2:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	68ba      	ldr	r2, [r7, #8]
 800d2d8:	68f9      	ldr	r1, [r7, #12]
 800d2da:	4806      	ldr	r0, [pc, #24]	; (800d2f4 <BSP_SD_WriteBlocks_DMA+0x30>)
 800d2dc:	f7fb faf2 	bl	80088c4 <HAL_SD_WriteBlocks_DMA>
 800d2e0:	4603      	mov	r3, r0
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d001      	beq.n	800d2ea <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800d2e6:	2301      	movs	r3, #1
 800d2e8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800d2ea:	7dfb      	ldrb	r3, [r7, #23]
}
 800d2ec:	4618      	mov	r0, r3
 800d2ee:	3718      	adds	r7, #24
 800d2f0:	46bd      	mov	sp, r7
 800d2f2:	bd80      	pop	{r7, pc}
 800d2f4:	20000bc0 	.word	0x20000bc0

0800d2f8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800d2f8:	b580      	push	{r7, lr}
 800d2fa:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800d2fc:	4805      	ldr	r0, [pc, #20]	; (800d314 <BSP_SD_GetCardState+0x1c>)
 800d2fe:	f7fc f8e3 	bl	80094c8 <HAL_SD_GetCardState>
 800d302:	4603      	mov	r3, r0
 800d304:	2b04      	cmp	r3, #4
 800d306:	bf14      	ite	ne
 800d308:	2301      	movne	r3, #1
 800d30a:	2300      	moveq	r3, #0
 800d30c:	b2db      	uxtb	r3, r3
}
 800d30e:	4618      	mov	r0, r3
 800d310:	bd80      	pop	{r7, pc}
 800d312:	bf00      	nop
 800d314:	20000bc0 	.word	0x20000bc0

0800d318 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
 800d318:	b580      	push	{r7, lr}
 800d31a:	b082      	sub	sp, #8
 800d31c:	af00      	add	r7, sp, #0
 800d31e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800d320:	6879      	ldr	r1, [r7, #4]
 800d322:	4803      	ldr	r0, [pc, #12]	; (800d330 <BSP_SD_GetCardInfo+0x18>)
 800d324:	f7fb ff90 	bl	8009248 <HAL_SD_GetCardInfo>
}
 800d328:	bf00      	nop
 800d32a:	3708      	adds	r7, #8
 800d32c:	46bd      	mov	sp, r7
 800d32e:	bd80      	pop	{r7, pc}
 800d330:	20000bc0 	.word	0x20000bc0

0800d334 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800d334:	b580      	push	{r7, lr}
 800d336:	b082      	sub	sp, #8
 800d338:	af00      	add	r7, sp, #0
 800d33a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800d33c:	f000 f9a0 	bl	800d680 <BSP_SD_WriteCpltCallback>
}
 800d340:	bf00      	nop
 800d342:	3708      	adds	r7, #8
 800d344:	46bd      	mov	sp, r7
 800d346:	bd80      	pop	{r7, pc}

0800d348 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800d348:	b580      	push	{r7, lr}
 800d34a:	b082      	sub	sp, #8
 800d34c:	af00      	add	r7, sp, #0
 800d34e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800d350:	f000 f9a2 	bl	800d698 <BSP_SD_ReadCpltCallback>
}
 800d354:	bf00      	nop
 800d356:	3708      	adds	r7, #8
 800d358:	46bd      	mov	sp, r7
 800d35a:	bd80      	pop	{r7, pc}

0800d35c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800d35c:	b580      	push	{r7, lr}
 800d35e:	b082      	sub	sp, #8
 800d360:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800d362:	2301      	movs	r3, #1
 800d364:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800d366:	f000 f80b 	bl	800d380 <BSP_PlatformIsDetected>
 800d36a:	4603      	mov	r3, r0
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d101      	bne.n	800d374 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800d370:	2300      	movs	r3, #0
 800d372:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800d374:	79fb      	ldrb	r3, [r7, #7]
 800d376:	b2db      	uxtb	r3, r3
}
 800d378:	4618      	mov	r0, r3
 800d37a:	3708      	adds	r7, #8
 800d37c:	46bd      	mov	sp, r7
 800d37e:	bd80      	pop	{r7, pc}

0800d380 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800d380:	b580      	push	{r7, lr}
 800d382:	b082      	sub	sp, #8
 800d384:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800d386:	2301      	movs	r3, #1
 800d388:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800d38a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800d38e:	4806      	ldr	r0, [pc, #24]	; (800d3a8 <BSP_PlatformIsDetected+0x28>)
 800d390:	f7f6 fdea 	bl	8003f68 <HAL_GPIO_ReadPin>
 800d394:	4603      	mov	r3, r0
 800d396:	2b00      	cmp	r3, #0
 800d398:	d001      	beq.n	800d39e <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800d39a:	2300      	movs	r3, #0
 800d39c:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800d39e:	79fb      	ldrb	r3, [r7, #7]
}
 800d3a0:	4618      	mov	r0, r3
 800d3a2:	3708      	adds	r7, #8
 800d3a4:	46bd      	mov	sp, r7
 800d3a6:	bd80      	pop	{r7, pc}
 800d3a8:	48000400 	.word	0x48000400

0800d3ac <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800d3ac:	b580      	push	{r7, lr}
 800d3ae:	b084      	sub	sp, #16
 800d3b0:	af00      	add	r7, sp, #0
 800d3b2:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800d3b4:	f7f4 ff4c 	bl	8002250 <HAL_GetTick>
 800d3b8:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800d3ba:	e006      	b.n	800d3ca <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d3bc:	f7ff ff9c 	bl	800d2f8 <BSP_SD_GetCardState>
 800d3c0:	4603      	mov	r3, r0
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d101      	bne.n	800d3ca <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800d3c6:	2300      	movs	r3, #0
 800d3c8:	e009      	b.n	800d3de <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800d3ca:	f7f4 ff41 	bl	8002250 <HAL_GetTick>
 800d3ce:	4602      	mov	r2, r0
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	1ad3      	subs	r3, r2, r3
 800d3d4:	687a      	ldr	r2, [r7, #4]
 800d3d6:	429a      	cmp	r2, r3
 800d3d8:	d8f0      	bhi.n	800d3bc <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800d3da:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d3de:	4618      	mov	r0, r3
 800d3e0:	3710      	adds	r7, #16
 800d3e2:	46bd      	mov	sp, r7
 800d3e4:	bd80      	pop	{r7, pc}
	...

0800d3e8 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800d3e8:	b580      	push	{r7, lr}
 800d3ea:	b082      	sub	sp, #8
 800d3ec:	af00      	add	r7, sp, #0
 800d3ee:	4603      	mov	r3, r0
 800d3f0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800d3f2:	4b0b      	ldr	r3, [pc, #44]	; (800d420 <SD_CheckStatus+0x38>)
 800d3f4:	2201      	movs	r2, #1
 800d3f6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800d3f8:	f7ff ff7e 	bl	800d2f8 <BSP_SD_GetCardState>
 800d3fc:	4603      	mov	r3, r0
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d107      	bne.n	800d412 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800d402:	4b07      	ldr	r3, [pc, #28]	; (800d420 <SD_CheckStatus+0x38>)
 800d404:	781b      	ldrb	r3, [r3, #0]
 800d406:	b2db      	uxtb	r3, r3
 800d408:	f023 0301 	bic.w	r3, r3, #1
 800d40c:	b2da      	uxtb	r2, r3
 800d40e:	4b04      	ldr	r3, [pc, #16]	; (800d420 <SD_CheckStatus+0x38>)
 800d410:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800d412:	4b03      	ldr	r3, [pc, #12]	; (800d420 <SD_CheckStatus+0x38>)
 800d414:	781b      	ldrb	r3, [r3, #0]
 800d416:	b2db      	uxtb	r3, r3
}
 800d418:	4618      	mov	r0, r3
 800d41a:	3708      	adds	r7, #8
 800d41c:	46bd      	mov	sp, r7
 800d41e:	bd80      	pop	{r7, pc}
 800d420:	20000009 	.word	0x20000009

0800d424 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800d424:	b580      	push	{r7, lr}
 800d426:	b082      	sub	sp, #8
 800d428:	af00      	add	r7, sp, #0
 800d42a:	4603      	mov	r3, r0
 800d42c:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800d42e:	f7ff ff09 	bl	800d244 <BSP_SD_Init>
 800d432:	4603      	mov	r3, r0
 800d434:	2b00      	cmp	r3, #0
 800d436:	d107      	bne.n	800d448 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800d438:	79fb      	ldrb	r3, [r7, #7]
 800d43a:	4618      	mov	r0, r3
 800d43c:	f7ff ffd4 	bl	800d3e8 <SD_CheckStatus>
 800d440:	4603      	mov	r3, r0
 800d442:	461a      	mov	r2, r3
 800d444:	4b04      	ldr	r3, [pc, #16]	; (800d458 <SD_initialize+0x34>)
 800d446:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800d448:	4b03      	ldr	r3, [pc, #12]	; (800d458 <SD_initialize+0x34>)
 800d44a:	781b      	ldrb	r3, [r3, #0]
 800d44c:	b2db      	uxtb	r3, r3
}
 800d44e:	4618      	mov	r0, r3
 800d450:	3708      	adds	r7, #8
 800d452:	46bd      	mov	sp, r7
 800d454:	bd80      	pop	{r7, pc}
 800d456:	bf00      	nop
 800d458:	20000009 	.word	0x20000009

0800d45c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800d45c:	b580      	push	{r7, lr}
 800d45e:	b082      	sub	sp, #8
 800d460:	af00      	add	r7, sp, #0
 800d462:	4603      	mov	r3, r0
 800d464:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800d466:	79fb      	ldrb	r3, [r7, #7]
 800d468:	4618      	mov	r0, r3
 800d46a:	f7ff ffbd 	bl	800d3e8 <SD_CheckStatus>
 800d46e:	4603      	mov	r3, r0
}
 800d470:	4618      	mov	r0, r3
 800d472:	3708      	adds	r7, #8
 800d474:	46bd      	mov	sp, r7
 800d476:	bd80      	pop	{r7, pc}

0800d478 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800d478:	b580      	push	{r7, lr}
 800d47a:	b086      	sub	sp, #24
 800d47c:	af00      	add	r7, sp, #0
 800d47e:	60b9      	str	r1, [r7, #8]
 800d480:	607a      	str	r2, [r7, #4]
 800d482:	603b      	str	r3, [r7, #0]
 800d484:	4603      	mov	r3, r0
 800d486:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800d488:	2301      	movs	r3, #1
 800d48a:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800d48c:	f247 5030 	movw	r0, #30000	; 0x7530
 800d490:	f7ff ff8c 	bl	800d3ac <SD_CheckStatusWithTimeout>
 800d494:	4603      	mov	r3, r0
 800d496:	2b00      	cmp	r3, #0
 800d498:	da01      	bge.n	800d49e <SD_read+0x26>
  {
    return res;
 800d49a:	7dfb      	ldrb	r3, [r7, #23]
 800d49c:	e03b      	b.n	800d516 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800d49e:	683a      	ldr	r2, [r7, #0]
 800d4a0:	6879      	ldr	r1, [r7, #4]
 800d4a2:	68b8      	ldr	r0, [r7, #8]
 800d4a4:	f7ff fef4 	bl	800d290 <BSP_SD_ReadBlocks_DMA>
 800d4a8:	4603      	mov	r3, r0
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d132      	bne.n	800d514 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800d4ae:	4b1c      	ldr	r3, [pc, #112]	; (800d520 <SD_read+0xa8>)
 800d4b0:	2200      	movs	r2, #0
 800d4b2:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800d4b4:	f7f4 fecc 	bl	8002250 <HAL_GetTick>
 800d4b8:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800d4ba:	bf00      	nop
 800d4bc:	4b18      	ldr	r3, [pc, #96]	; (800d520 <SD_read+0xa8>)
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d108      	bne.n	800d4d6 <SD_read+0x5e>
 800d4c4:	f7f4 fec4 	bl	8002250 <HAL_GetTick>
 800d4c8:	4602      	mov	r2, r0
 800d4ca:	693b      	ldr	r3, [r7, #16]
 800d4cc:	1ad3      	subs	r3, r2, r3
 800d4ce:	f247 522f 	movw	r2, #29999	; 0x752f
 800d4d2:	4293      	cmp	r3, r2
 800d4d4:	d9f2      	bls.n	800d4bc <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800d4d6:	4b12      	ldr	r3, [pc, #72]	; (800d520 <SD_read+0xa8>)
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d102      	bne.n	800d4e4 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800d4de:	2301      	movs	r3, #1
 800d4e0:	75fb      	strb	r3, [r7, #23]
 800d4e2:	e017      	b.n	800d514 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800d4e4:	4b0e      	ldr	r3, [pc, #56]	; (800d520 <SD_read+0xa8>)
 800d4e6:	2200      	movs	r2, #0
 800d4e8:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800d4ea:	f7f4 feb1 	bl	8002250 <HAL_GetTick>
 800d4ee:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800d4f0:	e007      	b.n	800d502 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d4f2:	f7ff ff01 	bl	800d2f8 <BSP_SD_GetCardState>
 800d4f6:	4603      	mov	r3, r0
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d102      	bne.n	800d502 <SD_read+0x8a>
          {
            res = RES_OK;
 800d4fc:	2300      	movs	r3, #0
 800d4fe:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800d500:	e008      	b.n	800d514 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800d502:	f7f4 fea5 	bl	8002250 <HAL_GetTick>
 800d506:	4602      	mov	r2, r0
 800d508:	693b      	ldr	r3, [r7, #16]
 800d50a:	1ad3      	subs	r3, r2, r3
 800d50c:	f247 522f 	movw	r2, #29999	; 0x752f
 800d510:	4293      	cmp	r3, r2
 800d512:	d9ee      	bls.n	800d4f2 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800d514:	7dfb      	ldrb	r3, [r7, #23]
}
 800d516:	4618      	mov	r0, r3
 800d518:	3718      	adds	r7, #24
 800d51a:	46bd      	mov	sp, r7
 800d51c:	bd80      	pop	{r7, pc}
 800d51e:	bf00      	nop
 800d520:	20000e90 	.word	0x20000e90

0800d524 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800d524:	b580      	push	{r7, lr}
 800d526:	b086      	sub	sp, #24
 800d528:	af00      	add	r7, sp, #0
 800d52a:	60b9      	str	r1, [r7, #8]
 800d52c:	607a      	str	r2, [r7, #4]
 800d52e:	603b      	str	r3, [r7, #0]
 800d530:	4603      	mov	r3, r0
 800d532:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800d534:	2301      	movs	r3, #1
 800d536:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800d538:	4b24      	ldr	r3, [pc, #144]	; (800d5cc <SD_write+0xa8>)
 800d53a:	2200      	movs	r2, #0
 800d53c:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800d53e:	f247 5030 	movw	r0, #30000	; 0x7530
 800d542:	f7ff ff33 	bl	800d3ac <SD_CheckStatusWithTimeout>
 800d546:	4603      	mov	r3, r0
 800d548:	2b00      	cmp	r3, #0
 800d54a:	da01      	bge.n	800d550 <SD_write+0x2c>
  {
    return res;
 800d54c:	7dfb      	ldrb	r3, [r7, #23]
 800d54e:	e038      	b.n	800d5c2 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800d550:	683a      	ldr	r2, [r7, #0]
 800d552:	6879      	ldr	r1, [r7, #4]
 800d554:	68b8      	ldr	r0, [r7, #8]
 800d556:	f7ff feb5 	bl	800d2c4 <BSP_SD_WriteBlocks_DMA>
 800d55a:	4603      	mov	r3, r0
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d12f      	bne.n	800d5c0 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800d560:	f7f4 fe76 	bl	8002250 <HAL_GetTick>
 800d564:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800d566:	bf00      	nop
 800d568:	4b18      	ldr	r3, [pc, #96]	; (800d5cc <SD_write+0xa8>)
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d108      	bne.n	800d582 <SD_write+0x5e>
 800d570:	f7f4 fe6e 	bl	8002250 <HAL_GetTick>
 800d574:	4602      	mov	r2, r0
 800d576:	693b      	ldr	r3, [r7, #16]
 800d578:	1ad3      	subs	r3, r2, r3
 800d57a:	f247 522f 	movw	r2, #29999	; 0x752f
 800d57e:	4293      	cmp	r3, r2
 800d580:	d9f2      	bls.n	800d568 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800d582:	4b12      	ldr	r3, [pc, #72]	; (800d5cc <SD_write+0xa8>)
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	2b00      	cmp	r3, #0
 800d588:	d102      	bne.n	800d590 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800d58a:	2301      	movs	r3, #1
 800d58c:	75fb      	strb	r3, [r7, #23]
 800d58e:	e017      	b.n	800d5c0 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800d590:	4b0e      	ldr	r3, [pc, #56]	; (800d5cc <SD_write+0xa8>)
 800d592:	2200      	movs	r2, #0
 800d594:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800d596:	f7f4 fe5b 	bl	8002250 <HAL_GetTick>
 800d59a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800d59c:	e007      	b.n	800d5ae <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d59e:	f7ff feab 	bl	800d2f8 <BSP_SD_GetCardState>
 800d5a2:	4603      	mov	r3, r0
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d102      	bne.n	800d5ae <SD_write+0x8a>
          {
            res = RES_OK;
 800d5a8:	2300      	movs	r3, #0
 800d5aa:	75fb      	strb	r3, [r7, #23]
            break;
 800d5ac:	e008      	b.n	800d5c0 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800d5ae:	f7f4 fe4f 	bl	8002250 <HAL_GetTick>
 800d5b2:	4602      	mov	r2, r0
 800d5b4:	693b      	ldr	r3, [r7, #16]
 800d5b6:	1ad3      	subs	r3, r2, r3
 800d5b8:	f247 522f 	movw	r2, #29999	; 0x752f
 800d5bc:	4293      	cmp	r3, r2
 800d5be:	d9ee      	bls.n	800d59e <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800d5c0:	7dfb      	ldrb	r3, [r7, #23]
}
 800d5c2:	4618      	mov	r0, r3
 800d5c4:	3718      	adds	r7, #24
 800d5c6:	46bd      	mov	sp, r7
 800d5c8:	bd80      	pop	{r7, pc}
 800d5ca:	bf00      	nop
 800d5cc:	20000e8c 	.word	0x20000e8c

0800d5d0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800d5d0:	b580      	push	{r7, lr}
 800d5d2:	b08c      	sub	sp, #48	; 0x30
 800d5d4:	af00      	add	r7, sp, #0
 800d5d6:	4603      	mov	r3, r0
 800d5d8:	603a      	str	r2, [r7, #0]
 800d5da:	71fb      	strb	r3, [r7, #7]
 800d5dc:	460b      	mov	r3, r1
 800d5de:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800d5e0:	2301      	movs	r3, #1
 800d5e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800d5e6:	4b25      	ldr	r3, [pc, #148]	; (800d67c <SD_ioctl+0xac>)
 800d5e8:	781b      	ldrb	r3, [r3, #0]
 800d5ea:	b2db      	uxtb	r3, r3
 800d5ec:	f003 0301 	and.w	r3, r3, #1
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d001      	beq.n	800d5f8 <SD_ioctl+0x28>
 800d5f4:	2303      	movs	r3, #3
 800d5f6:	e03c      	b.n	800d672 <SD_ioctl+0xa2>

  switch (cmd)
 800d5f8:	79bb      	ldrb	r3, [r7, #6]
 800d5fa:	2b03      	cmp	r3, #3
 800d5fc:	d834      	bhi.n	800d668 <SD_ioctl+0x98>
 800d5fe:	a201      	add	r2, pc, #4	; (adr r2, 800d604 <SD_ioctl+0x34>)
 800d600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d604:	0800d615 	.word	0x0800d615
 800d608:	0800d61d 	.word	0x0800d61d
 800d60c:	0800d635 	.word	0x0800d635
 800d610:	0800d64f 	.word	0x0800d64f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800d614:	2300      	movs	r3, #0
 800d616:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d61a:	e028      	b.n	800d66e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800d61c:	f107 0308 	add.w	r3, r7, #8
 800d620:	4618      	mov	r0, r3
 800d622:	f7ff fe79 	bl	800d318 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800d626:	6a3a      	ldr	r2, [r7, #32]
 800d628:	683b      	ldr	r3, [r7, #0]
 800d62a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800d62c:	2300      	movs	r3, #0
 800d62e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d632:	e01c      	b.n	800d66e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800d634:	f107 0308 	add.w	r3, r7, #8
 800d638:	4618      	mov	r0, r3
 800d63a:	f7ff fe6d 	bl	800d318 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800d63e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d640:	b29a      	uxth	r2, r3
 800d642:	683b      	ldr	r3, [r7, #0]
 800d644:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800d646:	2300      	movs	r3, #0
 800d648:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d64c:	e00f      	b.n	800d66e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800d64e:	f107 0308 	add.w	r3, r7, #8
 800d652:	4618      	mov	r0, r3
 800d654:	f7ff fe60 	bl	800d318 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800d658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d65a:	0a5a      	lsrs	r2, r3, #9
 800d65c:	683b      	ldr	r3, [r7, #0]
 800d65e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800d660:	2300      	movs	r3, #0
 800d662:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d666:	e002      	b.n	800d66e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800d668:	2304      	movs	r3, #4
 800d66a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800d66e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800d672:	4618      	mov	r0, r3
 800d674:	3730      	adds	r7, #48	; 0x30
 800d676:	46bd      	mov	sp, r7
 800d678:	bd80      	pop	{r7, pc}
 800d67a:	bf00      	nop
 800d67c:	20000009 	.word	0x20000009

0800d680 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800d680:	b480      	push	{r7}
 800d682:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800d684:	4b03      	ldr	r3, [pc, #12]	; (800d694 <BSP_SD_WriteCpltCallback+0x14>)
 800d686:	2201      	movs	r2, #1
 800d688:	601a      	str	r2, [r3, #0]
}
 800d68a:	bf00      	nop
 800d68c:	46bd      	mov	sp, r7
 800d68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d692:	4770      	bx	lr
 800d694:	20000e8c 	.word	0x20000e8c

0800d698 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800d698:	b480      	push	{r7}
 800d69a:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800d69c:	4b03      	ldr	r3, [pc, #12]	; (800d6ac <BSP_SD_ReadCpltCallback+0x14>)
 800d69e:	2201      	movs	r2, #1
 800d6a0:	601a      	str	r2, [r3, #0]
}
 800d6a2:	bf00      	nop
 800d6a4:	46bd      	mov	sp, r7
 800d6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6aa:	4770      	bx	lr
 800d6ac:	20000e90 	.word	0x20000e90

0800d6b0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d6b0:	b580      	push	{r7, lr}
 800d6b2:	b084      	sub	sp, #16
 800d6b4:	af00      	add	r7, sp, #0
 800d6b6:	6078      	str	r0, [r7, #4]
 800d6b8:	460b      	mov	r3, r1
 800d6ba:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800d6bc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800d6c0:	f002 fb38 	bl	800fd34 <USBD_static_malloc>
 800d6c4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800d6c6:	68fb      	ldr	r3, [r7, #12]
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d105      	bne.n	800d6d8 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	2200      	movs	r2, #0
 800d6d0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800d6d4:	2302      	movs	r3, #2
 800d6d6:	e066      	b.n	800d7a6 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	68fa      	ldr	r2, [r7, #12]
 800d6dc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	7c1b      	ldrb	r3, [r3, #16]
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d119      	bne.n	800d71c <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800d6e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d6ec:	2202      	movs	r2, #2
 800d6ee:	2181      	movs	r1, #129	; 0x81
 800d6f0:	6878      	ldr	r0, [r7, #4]
 800d6f2:	f002 f90b 	bl	800f90c <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	2201      	movs	r2, #1
 800d6fa:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800d6fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d700:	2202      	movs	r2, #2
 800d702:	2101      	movs	r1, #1
 800d704:	6878      	ldr	r0, [r7, #4]
 800d706:	f002 f901 	bl	800f90c <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	2201      	movs	r2, #1
 800d70e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	2210      	movs	r2, #16
 800d716:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800d71a:	e016      	b.n	800d74a <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800d71c:	2340      	movs	r3, #64	; 0x40
 800d71e:	2202      	movs	r2, #2
 800d720:	2181      	movs	r1, #129	; 0x81
 800d722:	6878      	ldr	r0, [r7, #4]
 800d724:	f002 f8f2 	bl	800f90c <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	2201      	movs	r2, #1
 800d72c:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800d72e:	2340      	movs	r3, #64	; 0x40
 800d730:	2202      	movs	r2, #2
 800d732:	2101      	movs	r1, #1
 800d734:	6878      	ldr	r0, [r7, #4]
 800d736:	f002 f8e9 	bl	800f90c <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	2201      	movs	r2, #1
 800d73e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	2210      	movs	r2, #16
 800d746:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800d74a:	2308      	movs	r3, #8
 800d74c:	2203      	movs	r2, #3
 800d74e:	2182      	movs	r1, #130	; 0x82
 800d750:	6878      	ldr	r0, [r7, #4]
 800d752:	f002 f8db 	bl	800f90c <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	2201      	movs	r2, #1
 800d75a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	2200      	movs	r2, #0
 800d76c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800d770:	68fb      	ldr	r3, [r7, #12]
 800d772:	2200      	movs	r2, #0
 800d774:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	7c1b      	ldrb	r3, [r3, #16]
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d109      	bne.n	800d794 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d786:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d78a:	2101      	movs	r1, #1
 800d78c:	6878      	ldr	r0, [r7, #4]
 800d78e:	f002 fa37 	bl	800fc00 <USBD_LL_PrepareReceive>
 800d792:	e007      	b.n	800d7a4 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d79a:	2340      	movs	r3, #64	; 0x40
 800d79c:	2101      	movs	r1, #1
 800d79e:	6878      	ldr	r0, [r7, #4]
 800d7a0:	f002 fa2e 	bl	800fc00 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d7a4:	2300      	movs	r3, #0
}
 800d7a6:	4618      	mov	r0, r3
 800d7a8:	3710      	adds	r7, #16
 800d7aa:	46bd      	mov	sp, r7
 800d7ac:	bd80      	pop	{r7, pc}

0800d7ae <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d7ae:	b580      	push	{r7, lr}
 800d7b0:	b082      	sub	sp, #8
 800d7b2:	af00      	add	r7, sp, #0
 800d7b4:	6078      	str	r0, [r7, #4]
 800d7b6:	460b      	mov	r3, r1
 800d7b8:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800d7ba:	2181      	movs	r1, #129	; 0x81
 800d7bc:	6878      	ldr	r0, [r7, #4]
 800d7be:	f002 f8e3 	bl	800f988 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	2200      	movs	r2, #0
 800d7c6:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800d7c8:	2101      	movs	r1, #1
 800d7ca:	6878      	ldr	r0, [r7, #4]
 800d7cc:	f002 f8dc 	bl	800f988 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	2200      	movs	r2, #0
 800d7d4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800d7d8:	2182      	movs	r1, #130	; 0x82
 800d7da:	6878      	ldr	r0, [r7, #4]
 800d7dc:	f002 f8d4 	bl	800f988 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	2200      	movs	r2, #0
 800d7e4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	2200      	movs	r2, #0
 800d7ec:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d00e      	beq.n	800d818 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d800:	685b      	ldr	r3, [r3, #4]
 800d802:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d80a:	4618      	mov	r0, r3
 800d80c:	f002 faa0 	bl	800fd50 <USBD_static_free>
    pdev->pClassData = NULL;
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	2200      	movs	r2, #0
 800d814:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800d818:	2300      	movs	r3, #0
}
 800d81a:	4618      	mov	r0, r3
 800d81c:	3708      	adds	r7, #8
 800d81e:	46bd      	mov	sp, r7
 800d820:	bd80      	pop	{r7, pc}
	...

0800d824 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800d824:	b580      	push	{r7, lr}
 800d826:	b086      	sub	sp, #24
 800d828:	af00      	add	r7, sp, #0
 800d82a:	6078      	str	r0, [r7, #4]
 800d82c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d834:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800d836:	2300      	movs	r3, #0
 800d838:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800d83a:	2300      	movs	r3, #0
 800d83c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800d83e:	2300      	movs	r3, #0
 800d840:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800d842:	693b      	ldr	r3, [r7, #16]
 800d844:	2b00      	cmp	r3, #0
 800d846:	d101      	bne.n	800d84c <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800d848:	2303      	movs	r3, #3
 800d84a:	e0af      	b.n	800d9ac <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d84c:	683b      	ldr	r3, [r7, #0]
 800d84e:	781b      	ldrb	r3, [r3, #0]
 800d850:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d854:	2b00      	cmp	r3, #0
 800d856:	d03f      	beq.n	800d8d8 <USBD_CDC_Setup+0xb4>
 800d858:	2b20      	cmp	r3, #32
 800d85a:	f040 809f 	bne.w	800d99c <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800d85e:	683b      	ldr	r3, [r7, #0]
 800d860:	88db      	ldrh	r3, [r3, #6]
 800d862:	2b00      	cmp	r3, #0
 800d864:	d02e      	beq.n	800d8c4 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800d866:	683b      	ldr	r3, [r7, #0]
 800d868:	781b      	ldrb	r3, [r3, #0]
 800d86a:	b25b      	sxtb	r3, r3
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	da16      	bge.n	800d89e <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d876:	689b      	ldr	r3, [r3, #8]
 800d878:	683a      	ldr	r2, [r7, #0]
 800d87a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800d87c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d87e:	683a      	ldr	r2, [r7, #0]
 800d880:	88d2      	ldrh	r2, [r2, #6]
 800d882:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800d884:	683b      	ldr	r3, [r7, #0]
 800d886:	88db      	ldrh	r3, [r3, #6]
 800d888:	2b07      	cmp	r3, #7
 800d88a:	bf28      	it	cs
 800d88c:	2307      	movcs	r3, #7
 800d88e:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800d890:	693b      	ldr	r3, [r7, #16]
 800d892:	89fa      	ldrh	r2, [r7, #14]
 800d894:	4619      	mov	r1, r3
 800d896:	6878      	ldr	r0, [r7, #4]
 800d898:	f001 fb43 	bl	800ef22 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800d89c:	e085      	b.n	800d9aa <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800d89e:	683b      	ldr	r3, [r7, #0]
 800d8a0:	785a      	ldrb	r2, [r3, #1]
 800d8a2:	693b      	ldr	r3, [r7, #16]
 800d8a4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800d8a8:	683b      	ldr	r3, [r7, #0]
 800d8aa:	88db      	ldrh	r3, [r3, #6]
 800d8ac:	b2da      	uxtb	r2, r3
 800d8ae:	693b      	ldr	r3, [r7, #16]
 800d8b0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800d8b4:	6939      	ldr	r1, [r7, #16]
 800d8b6:	683b      	ldr	r3, [r7, #0]
 800d8b8:	88db      	ldrh	r3, [r3, #6]
 800d8ba:	461a      	mov	r2, r3
 800d8bc:	6878      	ldr	r0, [r7, #4]
 800d8be:	f001 fb5c 	bl	800ef7a <USBD_CtlPrepareRx>
      break;
 800d8c2:	e072      	b.n	800d9aa <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d8ca:	689b      	ldr	r3, [r3, #8]
 800d8cc:	683a      	ldr	r2, [r7, #0]
 800d8ce:	7850      	ldrb	r0, [r2, #1]
 800d8d0:	2200      	movs	r2, #0
 800d8d2:	6839      	ldr	r1, [r7, #0]
 800d8d4:	4798      	blx	r3
      break;
 800d8d6:	e068      	b.n	800d9aa <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d8d8:	683b      	ldr	r3, [r7, #0]
 800d8da:	785b      	ldrb	r3, [r3, #1]
 800d8dc:	2b0b      	cmp	r3, #11
 800d8de:	d852      	bhi.n	800d986 <USBD_CDC_Setup+0x162>
 800d8e0:	a201      	add	r2, pc, #4	; (adr r2, 800d8e8 <USBD_CDC_Setup+0xc4>)
 800d8e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8e6:	bf00      	nop
 800d8e8:	0800d919 	.word	0x0800d919
 800d8ec:	0800d995 	.word	0x0800d995
 800d8f0:	0800d987 	.word	0x0800d987
 800d8f4:	0800d987 	.word	0x0800d987
 800d8f8:	0800d987 	.word	0x0800d987
 800d8fc:	0800d987 	.word	0x0800d987
 800d900:	0800d987 	.word	0x0800d987
 800d904:	0800d987 	.word	0x0800d987
 800d908:	0800d987 	.word	0x0800d987
 800d90c:	0800d987 	.word	0x0800d987
 800d910:	0800d943 	.word	0x0800d943
 800d914:	0800d96d 	.word	0x0800d96d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d91e:	b2db      	uxtb	r3, r3
 800d920:	2b03      	cmp	r3, #3
 800d922:	d107      	bne.n	800d934 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800d924:	f107 030a 	add.w	r3, r7, #10
 800d928:	2202      	movs	r2, #2
 800d92a:	4619      	mov	r1, r3
 800d92c:	6878      	ldr	r0, [r7, #4]
 800d92e:	f001 faf8 	bl	800ef22 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d932:	e032      	b.n	800d99a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800d934:	6839      	ldr	r1, [r7, #0]
 800d936:	6878      	ldr	r0, [r7, #4]
 800d938:	f001 fa82 	bl	800ee40 <USBD_CtlError>
            ret = USBD_FAIL;
 800d93c:	2303      	movs	r3, #3
 800d93e:	75fb      	strb	r3, [r7, #23]
          break;
 800d940:	e02b      	b.n	800d99a <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d948:	b2db      	uxtb	r3, r3
 800d94a:	2b03      	cmp	r3, #3
 800d94c:	d107      	bne.n	800d95e <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800d94e:	f107 030d 	add.w	r3, r7, #13
 800d952:	2201      	movs	r2, #1
 800d954:	4619      	mov	r1, r3
 800d956:	6878      	ldr	r0, [r7, #4]
 800d958:	f001 fae3 	bl	800ef22 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d95c:	e01d      	b.n	800d99a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800d95e:	6839      	ldr	r1, [r7, #0]
 800d960:	6878      	ldr	r0, [r7, #4]
 800d962:	f001 fa6d 	bl	800ee40 <USBD_CtlError>
            ret = USBD_FAIL;
 800d966:	2303      	movs	r3, #3
 800d968:	75fb      	strb	r3, [r7, #23]
          break;
 800d96a:	e016      	b.n	800d99a <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d972:	b2db      	uxtb	r3, r3
 800d974:	2b03      	cmp	r3, #3
 800d976:	d00f      	beq.n	800d998 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800d978:	6839      	ldr	r1, [r7, #0]
 800d97a:	6878      	ldr	r0, [r7, #4]
 800d97c:	f001 fa60 	bl	800ee40 <USBD_CtlError>
            ret = USBD_FAIL;
 800d980:	2303      	movs	r3, #3
 800d982:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800d984:	e008      	b.n	800d998 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800d986:	6839      	ldr	r1, [r7, #0]
 800d988:	6878      	ldr	r0, [r7, #4]
 800d98a:	f001 fa59 	bl	800ee40 <USBD_CtlError>
          ret = USBD_FAIL;
 800d98e:	2303      	movs	r3, #3
 800d990:	75fb      	strb	r3, [r7, #23]
          break;
 800d992:	e002      	b.n	800d99a <USBD_CDC_Setup+0x176>
          break;
 800d994:	bf00      	nop
 800d996:	e008      	b.n	800d9aa <USBD_CDC_Setup+0x186>
          break;
 800d998:	bf00      	nop
      }
      break;
 800d99a:	e006      	b.n	800d9aa <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800d99c:	6839      	ldr	r1, [r7, #0]
 800d99e:	6878      	ldr	r0, [r7, #4]
 800d9a0:	f001 fa4e 	bl	800ee40 <USBD_CtlError>
      ret = USBD_FAIL;
 800d9a4:	2303      	movs	r3, #3
 800d9a6:	75fb      	strb	r3, [r7, #23]
      break;
 800d9a8:	bf00      	nop
  }

  return (uint8_t)ret;
 800d9aa:	7dfb      	ldrb	r3, [r7, #23]
}
 800d9ac:	4618      	mov	r0, r3
 800d9ae:	3718      	adds	r7, #24
 800d9b0:	46bd      	mov	sp, r7
 800d9b2:	bd80      	pop	{r7, pc}

0800d9b4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d9b4:	b580      	push	{r7, lr}
 800d9b6:	b084      	sub	sp, #16
 800d9b8:	af00      	add	r7, sp, #0
 800d9ba:	6078      	str	r0, [r7, #4]
 800d9bc:	460b      	mov	r3, r1
 800d9be:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d9c6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d101      	bne.n	800d9d6 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d9d2:	2303      	movs	r3, #3
 800d9d4:	e04f      	b.n	800da76 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d9dc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800d9de:	78fa      	ldrb	r2, [r7, #3]
 800d9e0:	6879      	ldr	r1, [r7, #4]
 800d9e2:	4613      	mov	r3, r2
 800d9e4:	009b      	lsls	r3, r3, #2
 800d9e6:	4413      	add	r3, r2
 800d9e8:	009b      	lsls	r3, r3, #2
 800d9ea:	440b      	add	r3, r1
 800d9ec:	3318      	adds	r3, #24
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d029      	beq.n	800da48 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800d9f4:	78fa      	ldrb	r2, [r7, #3]
 800d9f6:	6879      	ldr	r1, [r7, #4]
 800d9f8:	4613      	mov	r3, r2
 800d9fa:	009b      	lsls	r3, r3, #2
 800d9fc:	4413      	add	r3, r2
 800d9fe:	009b      	lsls	r3, r3, #2
 800da00:	440b      	add	r3, r1
 800da02:	3318      	adds	r3, #24
 800da04:	681a      	ldr	r2, [r3, #0]
 800da06:	78f9      	ldrb	r1, [r7, #3]
 800da08:	68f8      	ldr	r0, [r7, #12]
 800da0a:	460b      	mov	r3, r1
 800da0c:	00db      	lsls	r3, r3, #3
 800da0e:	440b      	add	r3, r1
 800da10:	009b      	lsls	r3, r3, #2
 800da12:	4403      	add	r3, r0
 800da14:	3348      	adds	r3, #72	; 0x48
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	fbb2 f1f3 	udiv	r1, r2, r3
 800da1c:	fb01 f303 	mul.w	r3, r1, r3
 800da20:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800da22:	2b00      	cmp	r3, #0
 800da24:	d110      	bne.n	800da48 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800da26:	78fa      	ldrb	r2, [r7, #3]
 800da28:	6879      	ldr	r1, [r7, #4]
 800da2a:	4613      	mov	r3, r2
 800da2c:	009b      	lsls	r3, r3, #2
 800da2e:	4413      	add	r3, r2
 800da30:	009b      	lsls	r3, r3, #2
 800da32:	440b      	add	r3, r1
 800da34:	3318      	adds	r3, #24
 800da36:	2200      	movs	r2, #0
 800da38:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800da3a:	78f9      	ldrb	r1, [r7, #3]
 800da3c:	2300      	movs	r3, #0
 800da3e:	2200      	movs	r2, #0
 800da40:	6878      	ldr	r0, [r7, #4]
 800da42:	f002 f8a5 	bl	800fb90 <USBD_LL_Transmit>
 800da46:	e015      	b.n	800da74 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800da48:	68bb      	ldr	r3, [r7, #8]
 800da4a:	2200      	movs	r2, #0
 800da4c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800da56:	691b      	ldr	r3, [r3, #16]
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d00b      	beq.n	800da74 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800da62:	691b      	ldr	r3, [r3, #16]
 800da64:	68ba      	ldr	r2, [r7, #8]
 800da66:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800da6a:	68ba      	ldr	r2, [r7, #8]
 800da6c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800da70:	78fa      	ldrb	r2, [r7, #3]
 800da72:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800da74:	2300      	movs	r3, #0
}
 800da76:	4618      	mov	r0, r3
 800da78:	3710      	adds	r7, #16
 800da7a:	46bd      	mov	sp, r7
 800da7c:	bd80      	pop	{r7, pc}

0800da7e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800da7e:	b580      	push	{r7, lr}
 800da80:	b084      	sub	sp, #16
 800da82:	af00      	add	r7, sp, #0
 800da84:	6078      	str	r0, [r7, #4]
 800da86:	460b      	mov	r3, r1
 800da88:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800da90:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d101      	bne.n	800daa0 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800da9c:	2303      	movs	r3, #3
 800da9e:	e015      	b.n	800dacc <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800daa0:	78fb      	ldrb	r3, [r7, #3]
 800daa2:	4619      	mov	r1, r3
 800daa4:	6878      	ldr	r0, [r7, #4]
 800daa6:	f002 f8e3 	bl	800fc70 <USBD_LL_GetRxDataSize>
 800daaa:	4602      	mov	r2, r0
 800daac:	68fb      	ldr	r3, [r7, #12]
 800daae:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800dab8:	68db      	ldr	r3, [r3, #12]
 800daba:	68fa      	ldr	r2, [r7, #12]
 800dabc:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800dac0:	68fa      	ldr	r2, [r7, #12]
 800dac2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800dac6:	4611      	mov	r1, r2
 800dac8:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800daca:	2300      	movs	r3, #0
}
 800dacc:	4618      	mov	r0, r3
 800dace:	3710      	adds	r7, #16
 800dad0:	46bd      	mov	sp, r7
 800dad2:	bd80      	pop	{r7, pc}

0800dad4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800dad4:	b580      	push	{r7, lr}
 800dad6:	b084      	sub	sp, #16
 800dad8:	af00      	add	r7, sp, #0
 800dada:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dae2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d101      	bne.n	800daee <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800daea:	2303      	movs	r3, #3
 800daec:	e01b      	b.n	800db26 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d015      	beq.n	800db24 <USBD_CDC_EP0_RxReady+0x50>
 800daf8:	68fb      	ldr	r3, [r7, #12]
 800dafa:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800dafe:	2bff      	cmp	r3, #255	; 0xff
 800db00:	d010      	beq.n	800db24 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800db08:	689b      	ldr	r3, [r3, #8]
 800db0a:	68fa      	ldr	r2, [r7, #12]
 800db0c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800db10:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800db12:	68fa      	ldr	r2, [r7, #12]
 800db14:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800db18:	b292      	uxth	r2, r2
 800db1a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	22ff      	movs	r2, #255	; 0xff
 800db20:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800db24:	2300      	movs	r3, #0
}
 800db26:	4618      	mov	r0, r3
 800db28:	3710      	adds	r7, #16
 800db2a:	46bd      	mov	sp, r7
 800db2c:	bd80      	pop	{r7, pc}
	...

0800db30 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800db30:	b480      	push	{r7}
 800db32:	b083      	sub	sp, #12
 800db34:	af00      	add	r7, sp, #0
 800db36:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	2243      	movs	r2, #67	; 0x43
 800db3c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800db3e:	4b03      	ldr	r3, [pc, #12]	; (800db4c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800db40:	4618      	mov	r0, r3
 800db42:	370c      	adds	r7, #12
 800db44:	46bd      	mov	sp, r7
 800db46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db4a:	4770      	bx	lr
 800db4c:	20000094 	.word	0x20000094

0800db50 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800db50:	b480      	push	{r7}
 800db52:	b083      	sub	sp, #12
 800db54:	af00      	add	r7, sp, #0
 800db56:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	2243      	movs	r2, #67	; 0x43
 800db5c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800db5e:	4b03      	ldr	r3, [pc, #12]	; (800db6c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800db60:	4618      	mov	r0, r3
 800db62:	370c      	adds	r7, #12
 800db64:	46bd      	mov	sp, r7
 800db66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db6a:	4770      	bx	lr
 800db6c:	20000050 	.word	0x20000050

0800db70 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800db70:	b480      	push	{r7}
 800db72:	b083      	sub	sp, #12
 800db74:	af00      	add	r7, sp, #0
 800db76:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	2243      	movs	r2, #67	; 0x43
 800db7c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800db7e:	4b03      	ldr	r3, [pc, #12]	; (800db8c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800db80:	4618      	mov	r0, r3
 800db82:	370c      	adds	r7, #12
 800db84:	46bd      	mov	sp, r7
 800db86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db8a:	4770      	bx	lr
 800db8c:	200000d8 	.word	0x200000d8

0800db90 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800db90:	b480      	push	{r7}
 800db92:	b083      	sub	sp, #12
 800db94:	af00      	add	r7, sp, #0
 800db96:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	220a      	movs	r2, #10
 800db9c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800db9e:	4b03      	ldr	r3, [pc, #12]	; (800dbac <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800dba0:	4618      	mov	r0, r3
 800dba2:	370c      	adds	r7, #12
 800dba4:	46bd      	mov	sp, r7
 800dba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbaa:	4770      	bx	lr
 800dbac:	2000000c 	.word	0x2000000c

0800dbb0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800dbb0:	b480      	push	{r7}
 800dbb2:	b083      	sub	sp, #12
 800dbb4:	af00      	add	r7, sp, #0
 800dbb6:	6078      	str	r0, [r7, #4]
 800dbb8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800dbba:	683b      	ldr	r3, [r7, #0]
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d101      	bne.n	800dbc4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800dbc0:	2303      	movs	r3, #3
 800dbc2:	e004      	b.n	800dbce <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	683a      	ldr	r2, [r7, #0]
 800dbc8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800dbcc:	2300      	movs	r3, #0
}
 800dbce:	4618      	mov	r0, r3
 800dbd0:	370c      	adds	r7, #12
 800dbd2:	46bd      	mov	sp, r7
 800dbd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbd8:	4770      	bx	lr

0800dbda <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800dbda:	b480      	push	{r7}
 800dbdc:	b087      	sub	sp, #28
 800dbde:	af00      	add	r7, sp, #0
 800dbe0:	60f8      	str	r0, [r7, #12]
 800dbe2:	60b9      	str	r1, [r7, #8]
 800dbe4:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800dbe6:	68fb      	ldr	r3, [r7, #12]
 800dbe8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dbec:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800dbee:	697b      	ldr	r3, [r7, #20]
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d101      	bne.n	800dbf8 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800dbf4:	2303      	movs	r3, #3
 800dbf6:	e008      	b.n	800dc0a <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800dbf8:	697b      	ldr	r3, [r7, #20]
 800dbfa:	68ba      	ldr	r2, [r7, #8]
 800dbfc:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800dc00:	697b      	ldr	r3, [r7, #20]
 800dc02:	687a      	ldr	r2, [r7, #4]
 800dc04:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800dc08:	2300      	movs	r3, #0
}
 800dc0a:	4618      	mov	r0, r3
 800dc0c:	371c      	adds	r7, #28
 800dc0e:	46bd      	mov	sp, r7
 800dc10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc14:	4770      	bx	lr

0800dc16 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800dc16:	b480      	push	{r7}
 800dc18:	b085      	sub	sp, #20
 800dc1a:	af00      	add	r7, sp, #0
 800dc1c:	6078      	str	r0, [r7, #4]
 800dc1e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dc26:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d101      	bne.n	800dc32 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800dc2e:	2303      	movs	r3, #3
 800dc30:	e004      	b.n	800dc3c <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	683a      	ldr	r2, [r7, #0]
 800dc36:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800dc3a:	2300      	movs	r3, #0
}
 800dc3c:	4618      	mov	r0, r3
 800dc3e:	3714      	adds	r7, #20
 800dc40:	46bd      	mov	sp, r7
 800dc42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc46:	4770      	bx	lr

0800dc48 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800dc48:	b580      	push	{r7, lr}
 800dc4a:	b084      	sub	sp, #16
 800dc4c:	af00      	add	r7, sp, #0
 800dc4e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dc56:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800dc58:	2301      	movs	r3, #1
 800dc5a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d101      	bne.n	800dc6a <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800dc66:	2303      	movs	r3, #3
 800dc68:	e01a      	b.n	800dca0 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800dc6a:	68bb      	ldr	r3, [r7, #8]
 800dc6c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d114      	bne.n	800dc9e <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800dc74:	68bb      	ldr	r3, [r7, #8]
 800dc76:	2201      	movs	r2, #1
 800dc78:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800dc7c:	68bb      	ldr	r3, [r7, #8]
 800dc7e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800dc86:	68bb      	ldr	r3, [r7, #8]
 800dc88:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800dc8c:	68bb      	ldr	r3, [r7, #8]
 800dc8e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800dc92:	2181      	movs	r1, #129	; 0x81
 800dc94:	6878      	ldr	r0, [r7, #4]
 800dc96:	f001 ff7b 	bl	800fb90 <USBD_LL_Transmit>

    ret = USBD_OK;
 800dc9a:	2300      	movs	r3, #0
 800dc9c:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800dc9e:	7bfb      	ldrb	r3, [r7, #15]
}
 800dca0:	4618      	mov	r0, r3
 800dca2:	3710      	adds	r7, #16
 800dca4:	46bd      	mov	sp, r7
 800dca6:	bd80      	pop	{r7, pc}

0800dca8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800dca8:	b580      	push	{r7, lr}
 800dcaa:	b084      	sub	sp, #16
 800dcac:	af00      	add	r7, sp, #0
 800dcae:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dcb6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d101      	bne.n	800dcc6 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800dcc2:	2303      	movs	r3, #3
 800dcc4:	e016      	b.n	800dcf4 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	7c1b      	ldrb	r3, [r3, #16]
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	d109      	bne.n	800dce2 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800dcce:	68fb      	ldr	r3, [r7, #12]
 800dcd0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800dcd4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dcd8:	2101      	movs	r1, #1
 800dcda:	6878      	ldr	r0, [r7, #4]
 800dcdc:	f001 ff90 	bl	800fc00 <USBD_LL_PrepareReceive>
 800dce0:	e007      	b.n	800dcf2 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800dce8:	2340      	movs	r3, #64	; 0x40
 800dcea:	2101      	movs	r1, #1
 800dcec:	6878      	ldr	r0, [r7, #4]
 800dcee:	f001 ff87 	bl	800fc00 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800dcf2:	2300      	movs	r3, #0
}
 800dcf4:	4618      	mov	r0, r3
 800dcf6:	3710      	adds	r7, #16
 800dcf8:	46bd      	mov	sp, r7
 800dcfa:	bd80      	pop	{r7, pc}

0800dcfc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800dcfc:	b580      	push	{r7, lr}
 800dcfe:	b086      	sub	sp, #24
 800dd00:	af00      	add	r7, sp, #0
 800dd02:	60f8      	str	r0, [r7, #12]
 800dd04:	60b9      	str	r1, [r7, #8]
 800dd06:	4613      	mov	r3, r2
 800dd08:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d101      	bne.n	800dd14 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800dd10:	2303      	movs	r3, #3
 800dd12:	e01f      	b.n	800dd54 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800dd14:	68fb      	ldr	r3, [r7, #12]
 800dd16:	2200      	movs	r2, #0
 800dd18:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800dd1c:	68fb      	ldr	r3, [r7, #12]
 800dd1e:	2200      	movs	r2, #0
 800dd20:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	2200      	movs	r2, #0
 800dd28:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800dd2c:	68bb      	ldr	r3, [r7, #8]
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d003      	beq.n	800dd3a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	68ba      	ldr	r2, [r7, #8]
 800dd36:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	2201      	movs	r2, #1
 800dd3e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	79fa      	ldrb	r2, [r7, #7]
 800dd46:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800dd48:	68f8      	ldr	r0, [r7, #12]
 800dd4a:	f001 fd63 	bl	800f814 <USBD_LL_Init>
 800dd4e:	4603      	mov	r3, r0
 800dd50:	75fb      	strb	r3, [r7, #23]

  return ret;
 800dd52:	7dfb      	ldrb	r3, [r7, #23]
}
 800dd54:	4618      	mov	r0, r3
 800dd56:	3718      	adds	r7, #24
 800dd58:	46bd      	mov	sp, r7
 800dd5a:	bd80      	pop	{r7, pc}

0800dd5c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800dd5c:	b580      	push	{r7, lr}
 800dd5e:	b084      	sub	sp, #16
 800dd60:	af00      	add	r7, sp, #0
 800dd62:	6078      	str	r0, [r7, #4]
 800dd64:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800dd66:	2300      	movs	r3, #0
 800dd68:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800dd6a:	683b      	ldr	r3, [r7, #0]
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d101      	bne.n	800dd74 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800dd70:	2303      	movs	r3, #3
 800dd72:	e016      	b.n	800dda2 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	683a      	ldr	r2, [r7, #0]
 800dd78:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dd82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d00b      	beq.n	800dda0 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dd8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd90:	f107 020e 	add.w	r2, r7, #14
 800dd94:	4610      	mov	r0, r2
 800dd96:	4798      	blx	r3
 800dd98:	4602      	mov	r2, r0
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800dda0:	2300      	movs	r3, #0
}
 800dda2:	4618      	mov	r0, r3
 800dda4:	3710      	adds	r7, #16
 800dda6:	46bd      	mov	sp, r7
 800dda8:	bd80      	pop	{r7, pc}

0800ddaa <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ddaa:	b580      	push	{r7, lr}
 800ddac:	b082      	sub	sp, #8
 800ddae:	af00      	add	r7, sp, #0
 800ddb0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800ddb2:	6878      	ldr	r0, [r7, #4]
 800ddb4:	f001 fd78 	bl	800f8a8 <USBD_LL_Start>
 800ddb8:	4603      	mov	r3, r0
}
 800ddba:	4618      	mov	r0, r3
 800ddbc:	3708      	adds	r7, #8
 800ddbe:	46bd      	mov	sp, r7
 800ddc0:	bd80      	pop	{r7, pc}

0800ddc2 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800ddc2:	b480      	push	{r7}
 800ddc4:	b083      	sub	sp, #12
 800ddc6:	af00      	add	r7, sp, #0
 800ddc8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ddca:	2300      	movs	r3, #0
}
 800ddcc:	4618      	mov	r0, r3
 800ddce:	370c      	adds	r7, #12
 800ddd0:	46bd      	mov	sp, r7
 800ddd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddd6:	4770      	bx	lr

0800ddd8 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ddd8:	b580      	push	{r7, lr}
 800ddda:	b084      	sub	sp, #16
 800dddc:	af00      	add	r7, sp, #0
 800ddde:	6078      	str	r0, [r7, #4]
 800dde0:	460b      	mov	r3, r1
 800dde2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800dde4:	2303      	movs	r3, #3
 800dde6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d009      	beq.n	800de06 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	78fa      	ldrb	r2, [r7, #3]
 800ddfc:	4611      	mov	r1, r2
 800ddfe:	6878      	ldr	r0, [r7, #4]
 800de00:	4798      	blx	r3
 800de02:	4603      	mov	r3, r0
 800de04:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800de06:	7bfb      	ldrb	r3, [r7, #15]
}
 800de08:	4618      	mov	r0, r3
 800de0a:	3710      	adds	r7, #16
 800de0c:	46bd      	mov	sp, r7
 800de0e:	bd80      	pop	{r7, pc}

0800de10 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800de10:	b580      	push	{r7, lr}
 800de12:	b082      	sub	sp, #8
 800de14:	af00      	add	r7, sp, #0
 800de16:	6078      	str	r0, [r7, #4]
 800de18:	460b      	mov	r3, r1
 800de1a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800de22:	2b00      	cmp	r3, #0
 800de24:	d007      	beq.n	800de36 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800de2c:	685b      	ldr	r3, [r3, #4]
 800de2e:	78fa      	ldrb	r2, [r7, #3]
 800de30:	4611      	mov	r1, r2
 800de32:	6878      	ldr	r0, [r7, #4]
 800de34:	4798      	blx	r3
  }

  return USBD_OK;
 800de36:	2300      	movs	r3, #0
}
 800de38:	4618      	mov	r0, r3
 800de3a:	3708      	adds	r7, #8
 800de3c:	46bd      	mov	sp, r7
 800de3e:	bd80      	pop	{r7, pc}

0800de40 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800de40:	b580      	push	{r7, lr}
 800de42:	b084      	sub	sp, #16
 800de44:	af00      	add	r7, sp, #0
 800de46:	6078      	str	r0, [r7, #4]
 800de48:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800de50:	6839      	ldr	r1, [r7, #0]
 800de52:	4618      	mov	r0, r3
 800de54:	f000 ffba 	bl	800edcc <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	2201      	movs	r2, #1
 800de5c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800de66:	461a      	mov	r2, r3
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800de74:	f003 031f 	and.w	r3, r3, #31
 800de78:	2b02      	cmp	r3, #2
 800de7a:	d01a      	beq.n	800deb2 <USBD_LL_SetupStage+0x72>
 800de7c:	2b02      	cmp	r3, #2
 800de7e:	d822      	bhi.n	800dec6 <USBD_LL_SetupStage+0x86>
 800de80:	2b00      	cmp	r3, #0
 800de82:	d002      	beq.n	800de8a <USBD_LL_SetupStage+0x4a>
 800de84:	2b01      	cmp	r3, #1
 800de86:	d00a      	beq.n	800de9e <USBD_LL_SetupStage+0x5e>
 800de88:	e01d      	b.n	800dec6 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800de90:	4619      	mov	r1, r3
 800de92:	6878      	ldr	r0, [r7, #4]
 800de94:	f000 fa62 	bl	800e35c <USBD_StdDevReq>
 800de98:	4603      	mov	r3, r0
 800de9a:	73fb      	strb	r3, [r7, #15]
      break;
 800de9c:	e020      	b.n	800dee0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800dea4:	4619      	mov	r1, r3
 800dea6:	6878      	ldr	r0, [r7, #4]
 800dea8:	f000 fac6 	bl	800e438 <USBD_StdItfReq>
 800deac:	4603      	mov	r3, r0
 800deae:	73fb      	strb	r3, [r7, #15]
      break;
 800deb0:	e016      	b.n	800dee0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800deb8:	4619      	mov	r1, r3
 800deba:	6878      	ldr	r0, [r7, #4]
 800debc:	f000 fb05 	bl	800e4ca <USBD_StdEPReq>
 800dec0:	4603      	mov	r3, r0
 800dec2:	73fb      	strb	r3, [r7, #15]
      break;
 800dec4:	e00c      	b.n	800dee0 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800decc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ded0:	b2db      	uxtb	r3, r3
 800ded2:	4619      	mov	r1, r3
 800ded4:	6878      	ldr	r0, [r7, #4]
 800ded6:	f001 fd8d 	bl	800f9f4 <USBD_LL_StallEP>
 800deda:	4603      	mov	r3, r0
 800dedc:	73fb      	strb	r3, [r7, #15]
      break;
 800dede:	bf00      	nop
  }

  return ret;
 800dee0:	7bfb      	ldrb	r3, [r7, #15]
}
 800dee2:	4618      	mov	r0, r3
 800dee4:	3710      	adds	r7, #16
 800dee6:	46bd      	mov	sp, r7
 800dee8:	bd80      	pop	{r7, pc}

0800deea <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800deea:	b580      	push	{r7, lr}
 800deec:	b086      	sub	sp, #24
 800deee:	af00      	add	r7, sp, #0
 800def0:	60f8      	str	r0, [r7, #12]
 800def2:	460b      	mov	r3, r1
 800def4:	607a      	str	r2, [r7, #4]
 800def6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800def8:	7afb      	ldrb	r3, [r7, #11]
 800defa:	2b00      	cmp	r3, #0
 800defc:	d138      	bne.n	800df70 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800df04:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800df06:	68fb      	ldr	r3, [r7, #12]
 800df08:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800df0c:	2b03      	cmp	r3, #3
 800df0e:	d14a      	bne.n	800dfa6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800df10:	693b      	ldr	r3, [r7, #16]
 800df12:	689a      	ldr	r2, [r3, #8]
 800df14:	693b      	ldr	r3, [r7, #16]
 800df16:	68db      	ldr	r3, [r3, #12]
 800df18:	429a      	cmp	r2, r3
 800df1a:	d913      	bls.n	800df44 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800df1c:	693b      	ldr	r3, [r7, #16]
 800df1e:	689a      	ldr	r2, [r3, #8]
 800df20:	693b      	ldr	r3, [r7, #16]
 800df22:	68db      	ldr	r3, [r3, #12]
 800df24:	1ad2      	subs	r2, r2, r3
 800df26:	693b      	ldr	r3, [r7, #16]
 800df28:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800df2a:	693b      	ldr	r3, [r7, #16]
 800df2c:	68da      	ldr	r2, [r3, #12]
 800df2e:	693b      	ldr	r3, [r7, #16]
 800df30:	689b      	ldr	r3, [r3, #8]
 800df32:	4293      	cmp	r3, r2
 800df34:	bf28      	it	cs
 800df36:	4613      	movcs	r3, r2
 800df38:	461a      	mov	r2, r3
 800df3a:	6879      	ldr	r1, [r7, #4]
 800df3c:	68f8      	ldr	r0, [r7, #12]
 800df3e:	f001 f839 	bl	800efb4 <USBD_CtlContinueRx>
 800df42:	e030      	b.n	800dfa6 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800df4a:	b2db      	uxtb	r3, r3
 800df4c:	2b03      	cmp	r3, #3
 800df4e:	d10b      	bne.n	800df68 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800df50:	68fb      	ldr	r3, [r7, #12]
 800df52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800df56:	691b      	ldr	r3, [r3, #16]
 800df58:	2b00      	cmp	r3, #0
 800df5a:	d005      	beq.n	800df68 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800df5c:	68fb      	ldr	r3, [r7, #12]
 800df5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800df62:	691b      	ldr	r3, [r3, #16]
 800df64:	68f8      	ldr	r0, [r7, #12]
 800df66:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800df68:	68f8      	ldr	r0, [r7, #12]
 800df6a:	f001 f834 	bl	800efd6 <USBD_CtlSendStatus>
 800df6e:	e01a      	b.n	800dfa6 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800df70:	68fb      	ldr	r3, [r7, #12]
 800df72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800df76:	b2db      	uxtb	r3, r3
 800df78:	2b03      	cmp	r3, #3
 800df7a:	d114      	bne.n	800dfa6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800df7c:	68fb      	ldr	r3, [r7, #12]
 800df7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800df82:	699b      	ldr	r3, [r3, #24]
 800df84:	2b00      	cmp	r3, #0
 800df86:	d00e      	beq.n	800dfa6 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800df88:	68fb      	ldr	r3, [r7, #12]
 800df8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800df8e:	699b      	ldr	r3, [r3, #24]
 800df90:	7afa      	ldrb	r2, [r7, #11]
 800df92:	4611      	mov	r1, r2
 800df94:	68f8      	ldr	r0, [r7, #12]
 800df96:	4798      	blx	r3
 800df98:	4603      	mov	r3, r0
 800df9a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800df9c:	7dfb      	ldrb	r3, [r7, #23]
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d001      	beq.n	800dfa6 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800dfa2:	7dfb      	ldrb	r3, [r7, #23]
 800dfa4:	e000      	b.n	800dfa8 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800dfa6:	2300      	movs	r3, #0
}
 800dfa8:	4618      	mov	r0, r3
 800dfaa:	3718      	adds	r7, #24
 800dfac:	46bd      	mov	sp, r7
 800dfae:	bd80      	pop	{r7, pc}

0800dfb0 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800dfb0:	b580      	push	{r7, lr}
 800dfb2:	b086      	sub	sp, #24
 800dfb4:	af00      	add	r7, sp, #0
 800dfb6:	60f8      	str	r0, [r7, #12]
 800dfb8:	460b      	mov	r3, r1
 800dfba:	607a      	str	r2, [r7, #4]
 800dfbc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800dfbe:	7afb      	ldrb	r3, [r7, #11]
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d16b      	bne.n	800e09c <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	3314      	adds	r3, #20
 800dfc8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800dfd0:	2b02      	cmp	r3, #2
 800dfd2:	d156      	bne.n	800e082 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800dfd4:	693b      	ldr	r3, [r7, #16]
 800dfd6:	689a      	ldr	r2, [r3, #8]
 800dfd8:	693b      	ldr	r3, [r7, #16]
 800dfda:	68db      	ldr	r3, [r3, #12]
 800dfdc:	429a      	cmp	r2, r3
 800dfde:	d914      	bls.n	800e00a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800dfe0:	693b      	ldr	r3, [r7, #16]
 800dfe2:	689a      	ldr	r2, [r3, #8]
 800dfe4:	693b      	ldr	r3, [r7, #16]
 800dfe6:	68db      	ldr	r3, [r3, #12]
 800dfe8:	1ad2      	subs	r2, r2, r3
 800dfea:	693b      	ldr	r3, [r7, #16]
 800dfec:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800dfee:	693b      	ldr	r3, [r7, #16]
 800dff0:	689b      	ldr	r3, [r3, #8]
 800dff2:	461a      	mov	r2, r3
 800dff4:	6879      	ldr	r1, [r7, #4]
 800dff6:	68f8      	ldr	r0, [r7, #12]
 800dff8:	f000 ffae 	bl	800ef58 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800dffc:	2300      	movs	r3, #0
 800dffe:	2200      	movs	r2, #0
 800e000:	2100      	movs	r1, #0
 800e002:	68f8      	ldr	r0, [r7, #12]
 800e004:	f001 fdfc 	bl	800fc00 <USBD_LL_PrepareReceive>
 800e008:	e03b      	b.n	800e082 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800e00a:	693b      	ldr	r3, [r7, #16]
 800e00c:	68da      	ldr	r2, [r3, #12]
 800e00e:	693b      	ldr	r3, [r7, #16]
 800e010:	689b      	ldr	r3, [r3, #8]
 800e012:	429a      	cmp	r2, r3
 800e014:	d11c      	bne.n	800e050 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800e016:	693b      	ldr	r3, [r7, #16]
 800e018:	685a      	ldr	r2, [r3, #4]
 800e01a:	693b      	ldr	r3, [r7, #16]
 800e01c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800e01e:	429a      	cmp	r2, r3
 800e020:	d316      	bcc.n	800e050 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800e022:	693b      	ldr	r3, [r7, #16]
 800e024:	685a      	ldr	r2, [r3, #4]
 800e026:	68fb      	ldr	r3, [r7, #12]
 800e028:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800e02c:	429a      	cmp	r2, r3
 800e02e:	d20f      	bcs.n	800e050 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800e030:	2200      	movs	r2, #0
 800e032:	2100      	movs	r1, #0
 800e034:	68f8      	ldr	r0, [r7, #12]
 800e036:	f000 ff8f 	bl	800ef58 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	2200      	movs	r2, #0
 800e03e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e042:	2300      	movs	r3, #0
 800e044:	2200      	movs	r2, #0
 800e046:	2100      	movs	r1, #0
 800e048:	68f8      	ldr	r0, [r7, #12]
 800e04a:	f001 fdd9 	bl	800fc00 <USBD_LL_PrepareReceive>
 800e04e:	e018      	b.n	800e082 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e056:	b2db      	uxtb	r3, r3
 800e058:	2b03      	cmp	r3, #3
 800e05a:	d10b      	bne.n	800e074 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e062:	68db      	ldr	r3, [r3, #12]
 800e064:	2b00      	cmp	r3, #0
 800e066:	d005      	beq.n	800e074 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800e068:	68fb      	ldr	r3, [r7, #12]
 800e06a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e06e:	68db      	ldr	r3, [r3, #12]
 800e070:	68f8      	ldr	r0, [r7, #12]
 800e072:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800e074:	2180      	movs	r1, #128	; 0x80
 800e076:	68f8      	ldr	r0, [r7, #12]
 800e078:	f001 fcbc 	bl	800f9f4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800e07c:	68f8      	ldr	r0, [r7, #12]
 800e07e:	f000 ffbd 	bl	800effc <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800e082:	68fb      	ldr	r3, [r7, #12]
 800e084:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800e088:	2b01      	cmp	r3, #1
 800e08a:	d122      	bne.n	800e0d2 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800e08c:	68f8      	ldr	r0, [r7, #12]
 800e08e:	f7ff fe98 	bl	800ddc2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	2200      	movs	r2, #0
 800e096:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800e09a:	e01a      	b.n	800e0d2 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e09c:	68fb      	ldr	r3, [r7, #12]
 800e09e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e0a2:	b2db      	uxtb	r3, r3
 800e0a4:	2b03      	cmp	r3, #3
 800e0a6:	d114      	bne.n	800e0d2 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e0ae:	695b      	ldr	r3, [r3, #20]
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d00e      	beq.n	800e0d2 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800e0b4:	68fb      	ldr	r3, [r7, #12]
 800e0b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e0ba:	695b      	ldr	r3, [r3, #20]
 800e0bc:	7afa      	ldrb	r2, [r7, #11]
 800e0be:	4611      	mov	r1, r2
 800e0c0:	68f8      	ldr	r0, [r7, #12]
 800e0c2:	4798      	blx	r3
 800e0c4:	4603      	mov	r3, r0
 800e0c6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800e0c8:	7dfb      	ldrb	r3, [r7, #23]
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	d001      	beq.n	800e0d2 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800e0ce:	7dfb      	ldrb	r3, [r7, #23]
 800e0d0:	e000      	b.n	800e0d4 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800e0d2:	2300      	movs	r3, #0
}
 800e0d4:	4618      	mov	r0, r3
 800e0d6:	3718      	adds	r7, #24
 800e0d8:	46bd      	mov	sp, r7
 800e0da:	bd80      	pop	{r7, pc}

0800e0dc <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800e0dc:	b580      	push	{r7, lr}
 800e0de:	b082      	sub	sp, #8
 800e0e0:	af00      	add	r7, sp, #0
 800e0e2:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	2201      	movs	r2, #1
 800e0e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	2200      	movs	r2, #0
 800e0f0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	2200      	movs	r2, #0
 800e0f8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	2200      	movs	r2, #0
 800e0fe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d101      	bne.n	800e110 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800e10c:	2303      	movs	r3, #3
 800e10e:	e02f      	b.n	800e170 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e116:	2b00      	cmp	r3, #0
 800e118:	d00f      	beq.n	800e13a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e120:	685b      	ldr	r3, [r3, #4]
 800e122:	2b00      	cmp	r3, #0
 800e124:	d009      	beq.n	800e13a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e12c:	685b      	ldr	r3, [r3, #4]
 800e12e:	687a      	ldr	r2, [r7, #4]
 800e130:	6852      	ldr	r2, [r2, #4]
 800e132:	b2d2      	uxtb	r2, r2
 800e134:	4611      	mov	r1, r2
 800e136:	6878      	ldr	r0, [r7, #4]
 800e138:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e13a:	2340      	movs	r3, #64	; 0x40
 800e13c:	2200      	movs	r2, #0
 800e13e:	2100      	movs	r1, #0
 800e140:	6878      	ldr	r0, [r7, #4]
 800e142:	f001 fbe3 	bl	800f90c <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	2201      	movs	r2, #1
 800e14a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	2240      	movs	r2, #64	; 0x40
 800e152:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e156:	2340      	movs	r3, #64	; 0x40
 800e158:	2200      	movs	r2, #0
 800e15a:	2180      	movs	r1, #128	; 0x80
 800e15c:	6878      	ldr	r0, [r7, #4]
 800e15e:	f001 fbd5 	bl	800f90c <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	2201      	movs	r2, #1
 800e166:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	2240      	movs	r2, #64	; 0x40
 800e16c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800e16e:	2300      	movs	r3, #0
}
 800e170:	4618      	mov	r0, r3
 800e172:	3708      	adds	r7, #8
 800e174:	46bd      	mov	sp, r7
 800e176:	bd80      	pop	{r7, pc}

0800e178 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800e178:	b480      	push	{r7}
 800e17a:	b083      	sub	sp, #12
 800e17c:	af00      	add	r7, sp, #0
 800e17e:	6078      	str	r0, [r7, #4]
 800e180:	460b      	mov	r3, r1
 800e182:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	78fa      	ldrb	r2, [r7, #3]
 800e188:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800e18a:	2300      	movs	r3, #0
}
 800e18c:	4618      	mov	r0, r3
 800e18e:	370c      	adds	r7, #12
 800e190:	46bd      	mov	sp, r7
 800e192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e196:	4770      	bx	lr

0800e198 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800e198:	b480      	push	{r7}
 800e19a:	b083      	sub	sp, #12
 800e19c:	af00      	add	r7, sp, #0
 800e19e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e1a6:	b2da      	uxtb	r2, r3
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	2204      	movs	r2, #4
 800e1b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800e1b6:	2300      	movs	r3, #0
}
 800e1b8:	4618      	mov	r0, r3
 800e1ba:	370c      	adds	r7, #12
 800e1bc:	46bd      	mov	sp, r7
 800e1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1c2:	4770      	bx	lr

0800e1c4 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800e1c4:	b480      	push	{r7}
 800e1c6:	b083      	sub	sp, #12
 800e1c8:	af00      	add	r7, sp, #0
 800e1ca:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e1d2:	b2db      	uxtb	r3, r3
 800e1d4:	2b04      	cmp	r3, #4
 800e1d6:	d106      	bne.n	800e1e6 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800e1de:	b2da      	uxtb	r2, r3
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800e1e6:	2300      	movs	r3, #0
}
 800e1e8:	4618      	mov	r0, r3
 800e1ea:	370c      	adds	r7, #12
 800e1ec:	46bd      	mov	sp, r7
 800e1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1f2:	4770      	bx	lr

0800e1f4 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800e1f4:	b580      	push	{r7, lr}
 800e1f6:	b082      	sub	sp, #8
 800e1f8:	af00      	add	r7, sp, #0
 800e1fa:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e202:	2b00      	cmp	r3, #0
 800e204:	d101      	bne.n	800e20a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800e206:	2303      	movs	r3, #3
 800e208:	e012      	b.n	800e230 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e210:	b2db      	uxtb	r3, r3
 800e212:	2b03      	cmp	r3, #3
 800e214:	d10b      	bne.n	800e22e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e21c:	69db      	ldr	r3, [r3, #28]
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d005      	beq.n	800e22e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e228:	69db      	ldr	r3, [r3, #28]
 800e22a:	6878      	ldr	r0, [r7, #4]
 800e22c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800e22e:	2300      	movs	r3, #0
}
 800e230:	4618      	mov	r0, r3
 800e232:	3708      	adds	r7, #8
 800e234:	46bd      	mov	sp, r7
 800e236:	bd80      	pop	{r7, pc}

0800e238 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800e238:	b580      	push	{r7, lr}
 800e23a:	b082      	sub	sp, #8
 800e23c:	af00      	add	r7, sp, #0
 800e23e:	6078      	str	r0, [r7, #4]
 800e240:	460b      	mov	r3, r1
 800e242:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d101      	bne.n	800e252 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800e24e:	2303      	movs	r3, #3
 800e250:	e014      	b.n	800e27c <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e258:	b2db      	uxtb	r3, r3
 800e25a:	2b03      	cmp	r3, #3
 800e25c:	d10d      	bne.n	800e27a <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e264:	6a1b      	ldr	r3, [r3, #32]
 800e266:	2b00      	cmp	r3, #0
 800e268:	d007      	beq.n	800e27a <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e270:	6a1b      	ldr	r3, [r3, #32]
 800e272:	78fa      	ldrb	r2, [r7, #3]
 800e274:	4611      	mov	r1, r2
 800e276:	6878      	ldr	r0, [r7, #4]
 800e278:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800e27a:	2300      	movs	r3, #0
}
 800e27c:	4618      	mov	r0, r3
 800e27e:	3708      	adds	r7, #8
 800e280:	46bd      	mov	sp, r7
 800e282:	bd80      	pop	{r7, pc}

0800e284 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800e284:	b580      	push	{r7, lr}
 800e286:	b082      	sub	sp, #8
 800e288:	af00      	add	r7, sp, #0
 800e28a:	6078      	str	r0, [r7, #4]
 800e28c:	460b      	mov	r3, r1
 800e28e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e296:	2b00      	cmp	r3, #0
 800e298:	d101      	bne.n	800e29e <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800e29a:	2303      	movs	r3, #3
 800e29c:	e014      	b.n	800e2c8 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e2a4:	b2db      	uxtb	r3, r3
 800e2a6:	2b03      	cmp	r3, #3
 800e2a8:	d10d      	bne.n	800e2c6 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e2b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	d007      	beq.n	800e2c6 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e2bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2be:	78fa      	ldrb	r2, [r7, #3]
 800e2c0:	4611      	mov	r1, r2
 800e2c2:	6878      	ldr	r0, [r7, #4]
 800e2c4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800e2c6:	2300      	movs	r3, #0
}
 800e2c8:	4618      	mov	r0, r3
 800e2ca:	3708      	adds	r7, #8
 800e2cc:	46bd      	mov	sp, r7
 800e2ce:	bd80      	pop	{r7, pc}

0800e2d0 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800e2d0:	b480      	push	{r7}
 800e2d2:	b083      	sub	sp, #12
 800e2d4:	af00      	add	r7, sp, #0
 800e2d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e2d8:	2300      	movs	r3, #0
}
 800e2da:	4618      	mov	r0, r3
 800e2dc:	370c      	adds	r7, #12
 800e2de:	46bd      	mov	sp, r7
 800e2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2e4:	4770      	bx	lr

0800e2e6 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800e2e6:	b580      	push	{r7, lr}
 800e2e8:	b082      	sub	sp, #8
 800e2ea:	af00      	add	r7, sp, #0
 800e2ec:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	2201      	movs	r2, #1
 800e2f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d009      	beq.n	800e314 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e306:	685b      	ldr	r3, [r3, #4]
 800e308:	687a      	ldr	r2, [r7, #4]
 800e30a:	6852      	ldr	r2, [r2, #4]
 800e30c:	b2d2      	uxtb	r2, r2
 800e30e:	4611      	mov	r1, r2
 800e310:	6878      	ldr	r0, [r7, #4]
 800e312:	4798      	blx	r3
  }

  return USBD_OK;
 800e314:	2300      	movs	r3, #0
}
 800e316:	4618      	mov	r0, r3
 800e318:	3708      	adds	r7, #8
 800e31a:	46bd      	mov	sp, r7
 800e31c:	bd80      	pop	{r7, pc}

0800e31e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800e31e:	b480      	push	{r7}
 800e320:	b087      	sub	sp, #28
 800e322:	af00      	add	r7, sp, #0
 800e324:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800e32a:	697b      	ldr	r3, [r7, #20]
 800e32c:	781b      	ldrb	r3, [r3, #0]
 800e32e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800e330:	697b      	ldr	r3, [r7, #20]
 800e332:	3301      	adds	r3, #1
 800e334:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800e336:	697b      	ldr	r3, [r7, #20]
 800e338:	781b      	ldrb	r3, [r3, #0]
 800e33a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800e33c:	8a3b      	ldrh	r3, [r7, #16]
 800e33e:	021b      	lsls	r3, r3, #8
 800e340:	b21a      	sxth	r2, r3
 800e342:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e346:	4313      	orrs	r3, r2
 800e348:	b21b      	sxth	r3, r3
 800e34a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800e34c:	89fb      	ldrh	r3, [r7, #14]
}
 800e34e:	4618      	mov	r0, r3
 800e350:	371c      	adds	r7, #28
 800e352:	46bd      	mov	sp, r7
 800e354:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e358:	4770      	bx	lr
	...

0800e35c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e35c:	b580      	push	{r7, lr}
 800e35e:	b084      	sub	sp, #16
 800e360:	af00      	add	r7, sp, #0
 800e362:	6078      	str	r0, [r7, #4]
 800e364:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e366:	2300      	movs	r3, #0
 800e368:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e36a:	683b      	ldr	r3, [r7, #0]
 800e36c:	781b      	ldrb	r3, [r3, #0]
 800e36e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e372:	2b40      	cmp	r3, #64	; 0x40
 800e374:	d005      	beq.n	800e382 <USBD_StdDevReq+0x26>
 800e376:	2b40      	cmp	r3, #64	; 0x40
 800e378:	d853      	bhi.n	800e422 <USBD_StdDevReq+0xc6>
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d00b      	beq.n	800e396 <USBD_StdDevReq+0x3a>
 800e37e:	2b20      	cmp	r3, #32
 800e380:	d14f      	bne.n	800e422 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e388:	689b      	ldr	r3, [r3, #8]
 800e38a:	6839      	ldr	r1, [r7, #0]
 800e38c:	6878      	ldr	r0, [r7, #4]
 800e38e:	4798      	blx	r3
 800e390:	4603      	mov	r3, r0
 800e392:	73fb      	strb	r3, [r7, #15]
      break;
 800e394:	e04a      	b.n	800e42c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e396:	683b      	ldr	r3, [r7, #0]
 800e398:	785b      	ldrb	r3, [r3, #1]
 800e39a:	2b09      	cmp	r3, #9
 800e39c:	d83b      	bhi.n	800e416 <USBD_StdDevReq+0xba>
 800e39e:	a201      	add	r2, pc, #4	; (adr r2, 800e3a4 <USBD_StdDevReq+0x48>)
 800e3a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3a4:	0800e3f9 	.word	0x0800e3f9
 800e3a8:	0800e40d 	.word	0x0800e40d
 800e3ac:	0800e417 	.word	0x0800e417
 800e3b0:	0800e403 	.word	0x0800e403
 800e3b4:	0800e417 	.word	0x0800e417
 800e3b8:	0800e3d7 	.word	0x0800e3d7
 800e3bc:	0800e3cd 	.word	0x0800e3cd
 800e3c0:	0800e417 	.word	0x0800e417
 800e3c4:	0800e3ef 	.word	0x0800e3ef
 800e3c8:	0800e3e1 	.word	0x0800e3e1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800e3cc:	6839      	ldr	r1, [r7, #0]
 800e3ce:	6878      	ldr	r0, [r7, #4]
 800e3d0:	f000 f9de 	bl	800e790 <USBD_GetDescriptor>
          break;
 800e3d4:	e024      	b.n	800e420 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800e3d6:	6839      	ldr	r1, [r7, #0]
 800e3d8:	6878      	ldr	r0, [r7, #4]
 800e3da:	f000 fb6d 	bl	800eab8 <USBD_SetAddress>
          break;
 800e3de:	e01f      	b.n	800e420 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800e3e0:	6839      	ldr	r1, [r7, #0]
 800e3e2:	6878      	ldr	r0, [r7, #4]
 800e3e4:	f000 fbac 	bl	800eb40 <USBD_SetConfig>
 800e3e8:	4603      	mov	r3, r0
 800e3ea:	73fb      	strb	r3, [r7, #15]
          break;
 800e3ec:	e018      	b.n	800e420 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800e3ee:	6839      	ldr	r1, [r7, #0]
 800e3f0:	6878      	ldr	r0, [r7, #4]
 800e3f2:	f000 fc4b 	bl	800ec8c <USBD_GetConfig>
          break;
 800e3f6:	e013      	b.n	800e420 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800e3f8:	6839      	ldr	r1, [r7, #0]
 800e3fa:	6878      	ldr	r0, [r7, #4]
 800e3fc:	f000 fc7c 	bl	800ecf8 <USBD_GetStatus>
          break;
 800e400:	e00e      	b.n	800e420 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800e402:	6839      	ldr	r1, [r7, #0]
 800e404:	6878      	ldr	r0, [r7, #4]
 800e406:	f000 fcab 	bl	800ed60 <USBD_SetFeature>
          break;
 800e40a:	e009      	b.n	800e420 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800e40c:	6839      	ldr	r1, [r7, #0]
 800e40e:	6878      	ldr	r0, [r7, #4]
 800e410:	f000 fcba 	bl	800ed88 <USBD_ClrFeature>
          break;
 800e414:	e004      	b.n	800e420 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800e416:	6839      	ldr	r1, [r7, #0]
 800e418:	6878      	ldr	r0, [r7, #4]
 800e41a:	f000 fd11 	bl	800ee40 <USBD_CtlError>
          break;
 800e41e:	bf00      	nop
      }
      break;
 800e420:	e004      	b.n	800e42c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800e422:	6839      	ldr	r1, [r7, #0]
 800e424:	6878      	ldr	r0, [r7, #4]
 800e426:	f000 fd0b 	bl	800ee40 <USBD_CtlError>
      break;
 800e42a:	bf00      	nop
  }

  return ret;
 800e42c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e42e:	4618      	mov	r0, r3
 800e430:	3710      	adds	r7, #16
 800e432:	46bd      	mov	sp, r7
 800e434:	bd80      	pop	{r7, pc}
 800e436:	bf00      	nop

0800e438 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e438:	b580      	push	{r7, lr}
 800e43a:	b084      	sub	sp, #16
 800e43c:	af00      	add	r7, sp, #0
 800e43e:	6078      	str	r0, [r7, #4]
 800e440:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e442:	2300      	movs	r3, #0
 800e444:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e446:	683b      	ldr	r3, [r7, #0]
 800e448:	781b      	ldrb	r3, [r3, #0]
 800e44a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e44e:	2b40      	cmp	r3, #64	; 0x40
 800e450:	d005      	beq.n	800e45e <USBD_StdItfReq+0x26>
 800e452:	2b40      	cmp	r3, #64	; 0x40
 800e454:	d82f      	bhi.n	800e4b6 <USBD_StdItfReq+0x7e>
 800e456:	2b00      	cmp	r3, #0
 800e458:	d001      	beq.n	800e45e <USBD_StdItfReq+0x26>
 800e45a:	2b20      	cmp	r3, #32
 800e45c:	d12b      	bne.n	800e4b6 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e464:	b2db      	uxtb	r3, r3
 800e466:	3b01      	subs	r3, #1
 800e468:	2b02      	cmp	r3, #2
 800e46a:	d81d      	bhi.n	800e4a8 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800e46c:	683b      	ldr	r3, [r7, #0]
 800e46e:	889b      	ldrh	r3, [r3, #4]
 800e470:	b2db      	uxtb	r3, r3
 800e472:	2b01      	cmp	r3, #1
 800e474:	d813      	bhi.n	800e49e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e47c:	689b      	ldr	r3, [r3, #8]
 800e47e:	6839      	ldr	r1, [r7, #0]
 800e480:	6878      	ldr	r0, [r7, #4]
 800e482:	4798      	blx	r3
 800e484:	4603      	mov	r3, r0
 800e486:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800e488:	683b      	ldr	r3, [r7, #0]
 800e48a:	88db      	ldrh	r3, [r3, #6]
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d110      	bne.n	800e4b2 <USBD_StdItfReq+0x7a>
 800e490:	7bfb      	ldrb	r3, [r7, #15]
 800e492:	2b00      	cmp	r3, #0
 800e494:	d10d      	bne.n	800e4b2 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800e496:	6878      	ldr	r0, [r7, #4]
 800e498:	f000 fd9d 	bl	800efd6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800e49c:	e009      	b.n	800e4b2 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800e49e:	6839      	ldr	r1, [r7, #0]
 800e4a0:	6878      	ldr	r0, [r7, #4]
 800e4a2:	f000 fccd 	bl	800ee40 <USBD_CtlError>
          break;
 800e4a6:	e004      	b.n	800e4b2 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800e4a8:	6839      	ldr	r1, [r7, #0]
 800e4aa:	6878      	ldr	r0, [r7, #4]
 800e4ac:	f000 fcc8 	bl	800ee40 <USBD_CtlError>
          break;
 800e4b0:	e000      	b.n	800e4b4 <USBD_StdItfReq+0x7c>
          break;
 800e4b2:	bf00      	nop
      }
      break;
 800e4b4:	e004      	b.n	800e4c0 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800e4b6:	6839      	ldr	r1, [r7, #0]
 800e4b8:	6878      	ldr	r0, [r7, #4]
 800e4ba:	f000 fcc1 	bl	800ee40 <USBD_CtlError>
      break;
 800e4be:	bf00      	nop
  }

  return ret;
 800e4c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e4c2:	4618      	mov	r0, r3
 800e4c4:	3710      	adds	r7, #16
 800e4c6:	46bd      	mov	sp, r7
 800e4c8:	bd80      	pop	{r7, pc}

0800e4ca <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e4ca:	b580      	push	{r7, lr}
 800e4cc:	b084      	sub	sp, #16
 800e4ce:	af00      	add	r7, sp, #0
 800e4d0:	6078      	str	r0, [r7, #4]
 800e4d2:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800e4d4:	2300      	movs	r3, #0
 800e4d6:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800e4d8:	683b      	ldr	r3, [r7, #0]
 800e4da:	889b      	ldrh	r3, [r3, #4]
 800e4dc:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e4de:	683b      	ldr	r3, [r7, #0]
 800e4e0:	781b      	ldrb	r3, [r3, #0]
 800e4e2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e4e6:	2b40      	cmp	r3, #64	; 0x40
 800e4e8:	d007      	beq.n	800e4fa <USBD_StdEPReq+0x30>
 800e4ea:	2b40      	cmp	r3, #64	; 0x40
 800e4ec:	f200 8145 	bhi.w	800e77a <USBD_StdEPReq+0x2b0>
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	d00c      	beq.n	800e50e <USBD_StdEPReq+0x44>
 800e4f4:	2b20      	cmp	r3, #32
 800e4f6:	f040 8140 	bne.w	800e77a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e500:	689b      	ldr	r3, [r3, #8]
 800e502:	6839      	ldr	r1, [r7, #0]
 800e504:	6878      	ldr	r0, [r7, #4]
 800e506:	4798      	blx	r3
 800e508:	4603      	mov	r3, r0
 800e50a:	73fb      	strb	r3, [r7, #15]
      break;
 800e50c:	e13a      	b.n	800e784 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e50e:	683b      	ldr	r3, [r7, #0]
 800e510:	785b      	ldrb	r3, [r3, #1]
 800e512:	2b03      	cmp	r3, #3
 800e514:	d007      	beq.n	800e526 <USBD_StdEPReq+0x5c>
 800e516:	2b03      	cmp	r3, #3
 800e518:	f300 8129 	bgt.w	800e76e <USBD_StdEPReq+0x2a4>
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	d07f      	beq.n	800e620 <USBD_StdEPReq+0x156>
 800e520:	2b01      	cmp	r3, #1
 800e522:	d03c      	beq.n	800e59e <USBD_StdEPReq+0xd4>
 800e524:	e123      	b.n	800e76e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e52c:	b2db      	uxtb	r3, r3
 800e52e:	2b02      	cmp	r3, #2
 800e530:	d002      	beq.n	800e538 <USBD_StdEPReq+0x6e>
 800e532:	2b03      	cmp	r3, #3
 800e534:	d016      	beq.n	800e564 <USBD_StdEPReq+0x9a>
 800e536:	e02c      	b.n	800e592 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e538:	7bbb      	ldrb	r3, [r7, #14]
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d00d      	beq.n	800e55a <USBD_StdEPReq+0x90>
 800e53e:	7bbb      	ldrb	r3, [r7, #14]
 800e540:	2b80      	cmp	r3, #128	; 0x80
 800e542:	d00a      	beq.n	800e55a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e544:	7bbb      	ldrb	r3, [r7, #14]
 800e546:	4619      	mov	r1, r3
 800e548:	6878      	ldr	r0, [r7, #4]
 800e54a:	f001 fa53 	bl	800f9f4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e54e:	2180      	movs	r1, #128	; 0x80
 800e550:	6878      	ldr	r0, [r7, #4]
 800e552:	f001 fa4f 	bl	800f9f4 <USBD_LL_StallEP>
 800e556:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e558:	e020      	b.n	800e59c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800e55a:	6839      	ldr	r1, [r7, #0]
 800e55c:	6878      	ldr	r0, [r7, #4]
 800e55e:	f000 fc6f 	bl	800ee40 <USBD_CtlError>
              break;
 800e562:	e01b      	b.n	800e59c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e564:	683b      	ldr	r3, [r7, #0]
 800e566:	885b      	ldrh	r3, [r3, #2]
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d10e      	bne.n	800e58a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800e56c:	7bbb      	ldrb	r3, [r7, #14]
 800e56e:	2b00      	cmp	r3, #0
 800e570:	d00b      	beq.n	800e58a <USBD_StdEPReq+0xc0>
 800e572:	7bbb      	ldrb	r3, [r7, #14]
 800e574:	2b80      	cmp	r3, #128	; 0x80
 800e576:	d008      	beq.n	800e58a <USBD_StdEPReq+0xc0>
 800e578:	683b      	ldr	r3, [r7, #0]
 800e57a:	88db      	ldrh	r3, [r3, #6]
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	d104      	bne.n	800e58a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800e580:	7bbb      	ldrb	r3, [r7, #14]
 800e582:	4619      	mov	r1, r3
 800e584:	6878      	ldr	r0, [r7, #4]
 800e586:	f001 fa35 	bl	800f9f4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800e58a:	6878      	ldr	r0, [r7, #4]
 800e58c:	f000 fd23 	bl	800efd6 <USBD_CtlSendStatus>

              break;
 800e590:	e004      	b.n	800e59c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800e592:	6839      	ldr	r1, [r7, #0]
 800e594:	6878      	ldr	r0, [r7, #4]
 800e596:	f000 fc53 	bl	800ee40 <USBD_CtlError>
              break;
 800e59a:	bf00      	nop
          }
          break;
 800e59c:	e0ec      	b.n	800e778 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e5a4:	b2db      	uxtb	r3, r3
 800e5a6:	2b02      	cmp	r3, #2
 800e5a8:	d002      	beq.n	800e5b0 <USBD_StdEPReq+0xe6>
 800e5aa:	2b03      	cmp	r3, #3
 800e5ac:	d016      	beq.n	800e5dc <USBD_StdEPReq+0x112>
 800e5ae:	e030      	b.n	800e612 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e5b0:	7bbb      	ldrb	r3, [r7, #14]
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	d00d      	beq.n	800e5d2 <USBD_StdEPReq+0x108>
 800e5b6:	7bbb      	ldrb	r3, [r7, #14]
 800e5b8:	2b80      	cmp	r3, #128	; 0x80
 800e5ba:	d00a      	beq.n	800e5d2 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e5bc:	7bbb      	ldrb	r3, [r7, #14]
 800e5be:	4619      	mov	r1, r3
 800e5c0:	6878      	ldr	r0, [r7, #4]
 800e5c2:	f001 fa17 	bl	800f9f4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e5c6:	2180      	movs	r1, #128	; 0x80
 800e5c8:	6878      	ldr	r0, [r7, #4]
 800e5ca:	f001 fa13 	bl	800f9f4 <USBD_LL_StallEP>
 800e5ce:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e5d0:	e025      	b.n	800e61e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800e5d2:	6839      	ldr	r1, [r7, #0]
 800e5d4:	6878      	ldr	r0, [r7, #4]
 800e5d6:	f000 fc33 	bl	800ee40 <USBD_CtlError>
              break;
 800e5da:	e020      	b.n	800e61e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e5dc:	683b      	ldr	r3, [r7, #0]
 800e5de:	885b      	ldrh	r3, [r3, #2]
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	d11b      	bne.n	800e61c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800e5e4:	7bbb      	ldrb	r3, [r7, #14]
 800e5e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d004      	beq.n	800e5f8 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800e5ee:	7bbb      	ldrb	r3, [r7, #14]
 800e5f0:	4619      	mov	r1, r3
 800e5f2:	6878      	ldr	r0, [r7, #4]
 800e5f4:	f001 fa34 	bl	800fa60 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800e5f8:	6878      	ldr	r0, [r7, #4]
 800e5fa:	f000 fcec 	bl	800efd6 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e604:	689b      	ldr	r3, [r3, #8]
 800e606:	6839      	ldr	r1, [r7, #0]
 800e608:	6878      	ldr	r0, [r7, #4]
 800e60a:	4798      	blx	r3
 800e60c:	4603      	mov	r3, r0
 800e60e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800e610:	e004      	b.n	800e61c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800e612:	6839      	ldr	r1, [r7, #0]
 800e614:	6878      	ldr	r0, [r7, #4]
 800e616:	f000 fc13 	bl	800ee40 <USBD_CtlError>
              break;
 800e61a:	e000      	b.n	800e61e <USBD_StdEPReq+0x154>
              break;
 800e61c:	bf00      	nop
          }
          break;
 800e61e:	e0ab      	b.n	800e778 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e626:	b2db      	uxtb	r3, r3
 800e628:	2b02      	cmp	r3, #2
 800e62a:	d002      	beq.n	800e632 <USBD_StdEPReq+0x168>
 800e62c:	2b03      	cmp	r3, #3
 800e62e:	d032      	beq.n	800e696 <USBD_StdEPReq+0x1cc>
 800e630:	e097      	b.n	800e762 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e632:	7bbb      	ldrb	r3, [r7, #14]
 800e634:	2b00      	cmp	r3, #0
 800e636:	d007      	beq.n	800e648 <USBD_StdEPReq+0x17e>
 800e638:	7bbb      	ldrb	r3, [r7, #14]
 800e63a:	2b80      	cmp	r3, #128	; 0x80
 800e63c:	d004      	beq.n	800e648 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800e63e:	6839      	ldr	r1, [r7, #0]
 800e640:	6878      	ldr	r0, [r7, #4]
 800e642:	f000 fbfd 	bl	800ee40 <USBD_CtlError>
                break;
 800e646:	e091      	b.n	800e76c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e648:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	da0b      	bge.n	800e668 <USBD_StdEPReq+0x19e>
 800e650:	7bbb      	ldrb	r3, [r7, #14]
 800e652:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e656:	4613      	mov	r3, r2
 800e658:	009b      	lsls	r3, r3, #2
 800e65a:	4413      	add	r3, r2
 800e65c:	009b      	lsls	r3, r3, #2
 800e65e:	3310      	adds	r3, #16
 800e660:	687a      	ldr	r2, [r7, #4]
 800e662:	4413      	add	r3, r2
 800e664:	3304      	adds	r3, #4
 800e666:	e00b      	b.n	800e680 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e668:	7bbb      	ldrb	r3, [r7, #14]
 800e66a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e66e:	4613      	mov	r3, r2
 800e670:	009b      	lsls	r3, r3, #2
 800e672:	4413      	add	r3, r2
 800e674:	009b      	lsls	r3, r3, #2
 800e676:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e67a:	687a      	ldr	r2, [r7, #4]
 800e67c:	4413      	add	r3, r2
 800e67e:	3304      	adds	r3, #4
 800e680:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800e682:	68bb      	ldr	r3, [r7, #8]
 800e684:	2200      	movs	r2, #0
 800e686:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e688:	68bb      	ldr	r3, [r7, #8]
 800e68a:	2202      	movs	r2, #2
 800e68c:	4619      	mov	r1, r3
 800e68e:	6878      	ldr	r0, [r7, #4]
 800e690:	f000 fc47 	bl	800ef22 <USBD_CtlSendData>
              break;
 800e694:	e06a      	b.n	800e76c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800e696:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	da11      	bge.n	800e6c2 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800e69e:	7bbb      	ldrb	r3, [r7, #14]
 800e6a0:	f003 020f 	and.w	r2, r3, #15
 800e6a4:	6879      	ldr	r1, [r7, #4]
 800e6a6:	4613      	mov	r3, r2
 800e6a8:	009b      	lsls	r3, r3, #2
 800e6aa:	4413      	add	r3, r2
 800e6ac:	009b      	lsls	r3, r3, #2
 800e6ae:	440b      	add	r3, r1
 800e6b0:	3324      	adds	r3, #36	; 0x24
 800e6b2:	881b      	ldrh	r3, [r3, #0]
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	d117      	bne.n	800e6e8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800e6b8:	6839      	ldr	r1, [r7, #0]
 800e6ba:	6878      	ldr	r0, [r7, #4]
 800e6bc:	f000 fbc0 	bl	800ee40 <USBD_CtlError>
                  break;
 800e6c0:	e054      	b.n	800e76c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800e6c2:	7bbb      	ldrb	r3, [r7, #14]
 800e6c4:	f003 020f 	and.w	r2, r3, #15
 800e6c8:	6879      	ldr	r1, [r7, #4]
 800e6ca:	4613      	mov	r3, r2
 800e6cc:	009b      	lsls	r3, r3, #2
 800e6ce:	4413      	add	r3, r2
 800e6d0:	009b      	lsls	r3, r3, #2
 800e6d2:	440b      	add	r3, r1
 800e6d4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800e6d8:	881b      	ldrh	r3, [r3, #0]
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d104      	bne.n	800e6e8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800e6de:	6839      	ldr	r1, [r7, #0]
 800e6e0:	6878      	ldr	r0, [r7, #4]
 800e6e2:	f000 fbad 	bl	800ee40 <USBD_CtlError>
                  break;
 800e6e6:	e041      	b.n	800e76c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e6e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	da0b      	bge.n	800e708 <USBD_StdEPReq+0x23e>
 800e6f0:	7bbb      	ldrb	r3, [r7, #14]
 800e6f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e6f6:	4613      	mov	r3, r2
 800e6f8:	009b      	lsls	r3, r3, #2
 800e6fa:	4413      	add	r3, r2
 800e6fc:	009b      	lsls	r3, r3, #2
 800e6fe:	3310      	adds	r3, #16
 800e700:	687a      	ldr	r2, [r7, #4]
 800e702:	4413      	add	r3, r2
 800e704:	3304      	adds	r3, #4
 800e706:	e00b      	b.n	800e720 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e708:	7bbb      	ldrb	r3, [r7, #14]
 800e70a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e70e:	4613      	mov	r3, r2
 800e710:	009b      	lsls	r3, r3, #2
 800e712:	4413      	add	r3, r2
 800e714:	009b      	lsls	r3, r3, #2
 800e716:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e71a:	687a      	ldr	r2, [r7, #4]
 800e71c:	4413      	add	r3, r2
 800e71e:	3304      	adds	r3, #4
 800e720:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800e722:	7bbb      	ldrb	r3, [r7, #14]
 800e724:	2b00      	cmp	r3, #0
 800e726:	d002      	beq.n	800e72e <USBD_StdEPReq+0x264>
 800e728:	7bbb      	ldrb	r3, [r7, #14]
 800e72a:	2b80      	cmp	r3, #128	; 0x80
 800e72c:	d103      	bne.n	800e736 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800e72e:	68bb      	ldr	r3, [r7, #8]
 800e730:	2200      	movs	r2, #0
 800e732:	601a      	str	r2, [r3, #0]
 800e734:	e00e      	b.n	800e754 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800e736:	7bbb      	ldrb	r3, [r7, #14]
 800e738:	4619      	mov	r1, r3
 800e73a:	6878      	ldr	r0, [r7, #4]
 800e73c:	f001 f9c6 	bl	800facc <USBD_LL_IsStallEP>
 800e740:	4603      	mov	r3, r0
 800e742:	2b00      	cmp	r3, #0
 800e744:	d003      	beq.n	800e74e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800e746:	68bb      	ldr	r3, [r7, #8]
 800e748:	2201      	movs	r2, #1
 800e74a:	601a      	str	r2, [r3, #0]
 800e74c:	e002      	b.n	800e754 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800e74e:	68bb      	ldr	r3, [r7, #8]
 800e750:	2200      	movs	r2, #0
 800e752:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e754:	68bb      	ldr	r3, [r7, #8]
 800e756:	2202      	movs	r2, #2
 800e758:	4619      	mov	r1, r3
 800e75a:	6878      	ldr	r0, [r7, #4]
 800e75c:	f000 fbe1 	bl	800ef22 <USBD_CtlSendData>
              break;
 800e760:	e004      	b.n	800e76c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800e762:	6839      	ldr	r1, [r7, #0]
 800e764:	6878      	ldr	r0, [r7, #4]
 800e766:	f000 fb6b 	bl	800ee40 <USBD_CtlError>
              break;
 800e76a:	bf00      	nop
          }
          break;
 800e76c:	e004      	b.n	800e778 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800e76e:	6839      	ldr	r1, [r7, #0]
 800e770:	6878      	ldr	r0, [r7, #4]
 800e772:	f000 fb65 	bl	800ee40 <USBD_CtlError>
          break;
 800e776:	bf00      	nop
      }
      break;
 800e778:	e004      	b.n	800e784 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800e77a:	6839      	ldr	r1, [r7, #0]
 800e77c:	6878      	ldr	r0, [r7, #4]
 800e77e:	f000 fb5f 	bl	800ee40 <USBD_CtlError>
      break;
 800e782:	bf00      	nop
  }

  return ret;
 800e784:	7bfb      	ldrb	r3, [r7, #15]
}
 800e786:	4618      	mov	r0, r3
 800e788:	3710      	adds	r7, #16
 800e78a:	46bd      	mov	sp, r7
 800e78c:	bd80      	pop	{r7, pc}
	...

0800e790 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e790:	b580      	push	{r7, lr}
 800e792:	b084      	sub	sp, #16
 800e794:	af00      	add	r7, sp, #0
 800e796:	6078      	str	r0, [r7, #4]
 800e798:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e79a:	2300      	movs	r3, #0
 800e79c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800e79e:	2300      	movs	r3, #0
 800e7a0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800e7a2:	2300      	movs	r3, #0
 800e7a4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800e7a6:	683b      	ldr	r3, [r7, #0]
 800e7a8:	885b      	ldrh	r3, [r3, #2]
 800e7aa:	0a1b      	lsrs	r3, r3, #8
 800e7ac:	b29b      	uxth	r3, r3
 800e7ae:	3b01      	subs	r3, #1
 800e7b0:	2b0e      	cmp	r3, #14
 800e7b2:	f200 8152 	bhi.w	800ea5a <USBD_GetDescriptor+0x2ca>
 800e7b6:	a201      	add	r2, pc, #4	; (adr r2, 800e7bc <USBD_GetDescriptor+0x2c>)
 800e7b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7bc:	0800e82d 	.word	0x0800e82d
 800e7c0:	0800e845 	.word	0x0800e845
 800e7c4:	0800e885 	.word	0x0800e885
 800e7c8:	0800ea5b 	.word	0x0800ea5b
 800e7cc:	0800ea5b 	.word	0x0800ea5b
 800e7d0:	0800e9fb 	.word	0x0800e9fb
 800e7d4:	0800ea27 	.word	0x0800ea27
 800e7d8:	0800ea5b 	.word	0x0800ea5b
 800e7dc:	0800ea5b 	.word	0x0800ea5b
 800e7e0:	0800ea5b 	.word	0x0800ea5b
 800e7e4:	0800ea5b 	.word	0x0800ea5b
 800e7e8:	0800ea5b 	.word	0x0800ea5b
 800e7ec:	0800ea5b 	.word	0x0800ea5b
 800e7f0:	0800ea5b 	.word	0x0800ea5b
 800e7f4:	0800e7f9 	.word	0x0800e7f9
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e7fe:	69db      	ldr	r3, [r3, #28]
 800e800:	2b00      	cmp	r3, #0
 800e802:	d00b      	beq.n	800e81c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e80a:	69db      	ldr	r3, [r3, #28]
 800e80c:	687a      	ldr	r2, [r7, #4]
 800e80e:	7c12      	ldrb	r2, [r2, #16]
 800e810:	f107 0108 	add.w	r1, r7, #8
 800e814:	4610      	mov	r0, r2
 800e816:	4798      	blx	r3
 800e818:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e81a:	e126      	b.n	800ea6a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e81c:	6839      	ldr	r1, [r7, #0]
 800e81e:	6878      	ldr	r0, [r7, #4]
 800e820:	f000 fb0e 	bl	800ee40 <USBD_CtlError>
        err++;
 800e824:	7afb      	ldrb	r3, [r7, #11]
 800e826:	3301      	adds	r3, #1
 800e828:	72fb      	strb	r3, [r7, #11]
      break;
 800e82a:	e11e      	b.n	800ea6a <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	687a      	ldr	r2, [r7, #4]
 800e836:	7c12      	ldrb	r2, [r2, #16]
 800e838:	f107 0108 	add.w	r1, r7, #8
 800e83c:	4610      	mov	r0, r2
 800e83e:	4798      	blx	r3
 800e840:	60f8      	str	r0, [r7, #12]
      break;
 800e842:	e112      	b.n	800ea6a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	7c1b      	ldrb	r3, [r3, #16]
 800e848:	2b00      	cmp	r3, #0
 800e84a:	d10d      	bne.n	800e868 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e854:	f107 0208 	add.w	r2, r7, #8
 800e858:	4610      	mov	r0, r2
 800e85a:	4798      	blx	r3
 800e85c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e85e:	68fb      	ldr	r3, [r7, #12]
 800e860:	3301      	adds	r3, #1
 800e862:	2202      	movs	r2, #2
 800e864:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800e866:	e100      	b.n	800ea6a <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e86e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e870:	f107 0208 	add.w	r2, r7, #8
 800e874:	4610      	mov	r0, r2
 800e876:	4798      	blx	r3
 800e878:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e87a:	68fb      	ldr	r3, [r7, #12]
 800e87c:	3301      	adds	r3, #1
 800e87e:	2202      	movs	r2, #2
 800e880:	701a      	strb	r2, [r3, #0]
      break;
 800e882:	e0f2      	b.n	800ea6a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800e884:	683b      	ldr	r3, [r7, #0]
 800e886:	885b      	ldrh	r3, [r3, #2]
 800e888:	b2db      	uxtb	r3, r3
 800e88a:	2b05      	cmp	r3, #5
 800e88c:	f200 80ac 	bhi.w	800e9e8 <USBD_GetDescriptor+0x258>
 800e890:	a201      	add	r2, pc, #4	; (adr r2, 800e898 <USBD_GetDescriptor+0x108>)
 800e892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e896:	bf00      	nop
 800e898:	0800e8b1 	.word	0x0800e8b1
 800e89c:	0800e8e5 	.word	0x0800e8e5
 800e8a0:	0800e919 	.word	0x0800e919
 800e8a4:	0800e94d 	.word	0x0800e94d
 800e8a8:	0800e981 	.word	0x0800e981
 800e8ac:	0800e9b5 	.word	0x0800e9b5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e8b6:	685b      	ldr	r3, [r3, #4]
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	d00b      	beq.n	800e8d4 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e8c2:	685b      	ldr	r3, [r3, #4]
 800e8c4:	687a      	ldr	r2, [r7, #4]
 800e8c6:	7c12      	ldrb	r2, [r2, #16]
 800e8c8:	f107 0108 	add.w	r1, r7, #8
 800e8cc:	4610      	mov	r0, r2
 800e8ce:	4798      	blx	r3
 800e8d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e8d2:	e091      	b.n	800e9f8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e8d4:	6839      	ldr	r1, [r7, #0]
 800e8d6:	6878      	ldr	r0, [r7, #4]
 800e8d8:	f000 fab2 	bl	800ee40 <USBD_CtlError>
            err++;
 800e8dc:	7afb      	ldrb	r3, [r7, #11]
 800e8de:	3301      	adds	r3, #1
 800e8e0:	72fb      	strb	r3, [r7, #11]
          break;
 800e8e2:	e089      	b.n	800e9f8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e8ea:	689b      	ldr	r3, [r3, #8]
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	d00b      	beq.n	800e908 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e8f6:	689b      	ldr	r3, [r3, #8]
 800e8f8:	687a      	ldr	r2, [r7, #4]
 800e8fa:	7c12      	ldrb	r2, [r2, #16]
 800e8fc:	f107 0108 	add.w	r1, r7, #8
 800e900:	4610      	mov	r0, r2
 800e902:	4798      	blx	r3
 800e904:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e906:	e077      	b.n	800e9f8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e908:	6839      	ldr	r1, [r7, #0]
 800e90a:	6878      	ldr	r0, [r7, #4]
 800e90c:	f000 fa98 	bl	800ee40 <USBD_CtlError>
            err++;
 800e910:	7afb      	ldrb	r3, [r7, #11]
 800e912:	3301      	adds	r3, #1
 800e914:	72fb      	strb	r3, [r7, #11]
          break;
 800e916:	e06f      	b.n	800e9f8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e91e:	68db      	ldr	r3, [r3, #12]
 800e920:	2b00      	cmp	r3, #0
 800e922:	d00b      	beq.n	800e93c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e92a:	68db      	ldr	r3, [r3, #12]
 800e92c:	687a      	ldr	r2, [r7, #4]
 800e92e:	7c12      	ldrb	r2, [r2, #16]
 800e930:	f107 0108 	add.w	r1, r7, #8
 800e934:	4610      	mov	r0, r2
 800e936:	4798      	blx	r3
 800e938:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e93a:	e05d      	b.n	800e9f8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e93c:	6839      	ldr	r1, [r7, #0]
 800e93e:	6878      	ldr	r0, [r7, #4]
 800e940:	f000 fa7e 	bl	800ee40 <USBD_CtlError>
            err++;
 800e944:	7afb      	ldrb	r3, [r7, #11]
 800e946:	3301      	adds	r3, #1
 800e948:	72fb      	strb	r3, [r7, #11]
          break;
 800e94a:	e055      	b.n	800e9f8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e952:	691b      	ldr	r3, [r3, #16]
 800e954:	2b00      	cmp	r3, #0
 800e956:	d00b      	beq.n	800e970 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e95e:	691b      	ldr	r3, [r3, #16]
 800e960:	687a      	ldr	r2, [r7, #4]
 800e962:	7c12      	ldrb	r2, [r2, #16]
 800e964:	f107 0108 	add.w	r1, r7, #8
 800e968:	4610      	mov	r0, r2
 800e96a:	4798      	blx	r3
 800e96c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e96e:	e043      	b.n	800e9f8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e970:	6839      	ldr	r1, [r7, #0]
 800e972:	6878      	ldr	r0, [r7, #4]
 800e974:	f000 fa64 	bl	800ee40 <USBD_CtlError>
            err++;
 800e978:	7afb      	ldrb	r3, [r7, #11]
 800e97a:	3301      	adds	r3, #1
 800e97c:	72fb      	strb	r3, [r7, #11]
          break;
 800e97e:	e03b      	b.n	800e9f8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e986:	695b      	ldr	r3, [r3, #20]
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d00b      	beq.n	800e9a4 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e992:	695b      	ldr	r3, [r3, #20]
 800e994:	687a      	ldr	r2, [r7, #4]
 800e996:	7c12      	ldrb	r2, [r2, #16]
 800e998:	f107 0108 	add.w	r1, r7, #8
 800e99c:	4610      	mov	r0, r2
 800e99e:	4798      	blx	r3
 800e9a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e9a2:	e029      	b.n	800e9f8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e9a4:	6839      	ldr	r1, [r7, #0]
 800e9a6:	6878      	ldr	r0, [r7, #4]
 800e9a8:	f000 fa4a 	bl	800ee40 <USBD_CtlError>
            err++;
 800e9ac:	7afb      	ldrb	r3, [r7, #11]
 800e9ae:	3301      	adds	r3, #1
 800e9b0:	72fb      	strb	r3, [r7, #11]
          break;
 800e9b2:	e021      	b.n	800e9f8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e9ba:	699b      	ldr	r3, [r3, #24]
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	d00b      	beq.n	800e9d8 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e9c6:	699b      	ldr	r3, [r3, #24]
 800e9c8:	687a      	ldr	r2, [r7, #4]
 800e9ca:	7c12      	ldrb	r2, [r2, #16]
 800e9cc:	f107 0108 	add.w	r1, r7, #8
 800e9d0:	4610      	mov	r0, r2
 800e9d2:	4798      	blx	r3
 800e9d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e9d6:	e00f      	b.n	800e9f8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e9d8:	6839      	ldr	r1, [r7, #0]
 800e9da:	6878      	ldr	r0, [r7, #4]
 800e9dc:	f000 fa30 	bl	800ee40 <USBD_CtlError>
            err++;
 800e9e0:	7afb      	ldrb	r3, [r7, #11]
 800e9e2:	3301      	adds	r3, #1
 800e9e4:	72fb      	strb	r3, [r7, #11]
          break;
 800e9e6:	e007      	b.n	800e9f8 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800e9e8:	6839      	ldr	r1, [r7, #0]
 800e9ea:	6878      	ldr	r0, [r7, #4]
 800e9ec:	f000 fa28 	bl	800ee40 <USBD_CtlError>
          err++;
 800e9f0:	7afb      	ldrb	r3, [r7, #11]
 800e9f2:	3301      	adds	r3, #1
 800e9f4:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800e9f6:	bf00      	nop
      }
      break;
 800e9f8:	e037      	b.n	800ea6a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	7c1b      	ldrb	r3, [r3, #16]
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	d109      	bne.n	800ea16 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ea08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea0a:	f107 0208 	add.w	r2, r7, #8
 800ea0e:	4610      	mov	r0, r2
 800ea10:	4798      	blx	r3
 800ea12:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ea14:	e029      	b.n	800ea6a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ea16:	6839      	ldr	r1, [r7, #0]
 800ea18:	6878      	ldr	r0, [r7, #4]
 800ea1a:	f000 fa11 	bl	800ee40 <USBD_CtlError>
        err++;
 800ea1e:	7afb      	ldrb	r3, [r7, #11]
 800ea20:	3301      	adds	r3, #1
 800ea22:	72fb      	strb	r3, [r7, #11]
      break;
 800ea24:	e021      	b.n	800ea6a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	7c1b      	ldrb	r3, [r3, #16]
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	d10d      	bne.n	800ea4a <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ea34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ea36:	f107 0208 	add.w	r2, r7, #8
 800ea3a:	4610      	mov	r0, r2
 800ea3c:	4798      	blx	r3
 800ea3e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ea40:	68fb      	ldr	r3, [r7, #12]
 800ea42:	3301      	adds	r3, #1
 800ea44:	2207      	movs	r2, #7
 800ea46:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ea48:	e00f      	b.n	800ea6a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ea4a:	6839      	ldr	r1, [r7, #0]
 800ea4c:	6878      	ldr	r0, [r7, #4]
 800ea4e:	f000 f9f7 	bl	800ee40 <USBD_CtlError>
        err++;
 800ea52:	7afb      	ldrb	r3, [r7, #11]
 800ea54:	3301      	adds	r3, #1
 800ea56:	72fb      	strb	r3, [r7, #11]
      break;
 800ea58:	e007      	b.n	800ea6a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800ea5a:	6839      	ldr	r1, [r7, #0]
 800ea5c:	6878      	ldr	r0, [r7, #4]
 800ea5e:	f000 f9ef 	bl	800ee40 <USBD_CtlError>
      err++;
 800ea62:	7afb      	ldrb	r3, [r7, #11]
 800ea64:	3301      	adds	r3, #1
 800ea66:	72fb      	strb	r3, [r7, #11]
      break;
 800ea68:	bf00      	nop
  }

  if (err != 0U)
 800ea6a:	7afb      	ldrb	r3, [r7, #11]
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	d11e      	bne.n	800eaae <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800ea70:	683b      	ldr	r3, [r7, #0]
 800ea72:	88db      	ldrh	r3, [r3, #6]
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	d016      	beq.n	800eaa6 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800ea78:	893b      	ldrh	r3, [r7, #8]
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	d00e      	beq.n	800ea9c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800ea7e:	683b      	ldr	r3, [r7, #0]
 800ea80:	88da      	ldrh	r2, [r3, #6]
 800ea82:	893b      	ldrh	r3, [r7, #8]
 800ea84:	4293      	cmp	r3, r2
 800ea86:	bf28      	it	cs
 800ea88:	4613      	movcs	r3, r2
 800ea8a:	b29b      	uxth	r3, r3
 800ea8c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ea8e:	893b      	ldrh	r3, [r7, #8]
 800ea90:	461a      	mov	r2, r3
 800ea92:	68f9      	ldr	r1, [r7, #12]
 800ea94:	6878      	ldr	r0, [r7, #4]
 800ea96:	f000 fa44 	bl	800ef22 <USBD_CtlSendData>
 800ea9a:	e009      	b.n	800eab0 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800ea9c:	6839      	ldr	r1, [r7, #0]
 800ea9e:	6878      	ldr	r0, [r7, #4]
 800eaa0:	f000 f9ce 	bl	800ee40 <USBD_CtlError>
 800eaa4:	e004      	b.n	800eab0 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800eaa6:	6878      	ldr	r0, [r7, #4]
 800eaa8:	f000 fa95 	bl	800efd6 <USBD_CtlSendStatus>
 800eaac:	e000      	b.n	800eab0 <USBD_GetDescriptor+0x320>
    return;
 800eaae:	bf00      	nop
  }
}
 800eab0:	3710      	adds	r7, #16
 800eab2:	46bd      	mov	sp, r7
 800eab4:	bd80      	pop	{r7, pc}
 800eab6:	bf00      	nop

0800eab8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eab8:	b580      	push	{r7, lr}
 800eaba:	b084      	sub	sp, #16
 800eabc:	af00      	add	r7, sp, #0
 800eabe:	6078      	str	r0, [r7, #4]
 800eac0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800eac2:	683b      	ldr	r3, [r7, #0]
 800eac4:	889b      	ldrh	r3, [r3, #4]
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d131      	bne.n	800eb2e <USBD_SetAddress+0x76>
 800eaca:	683b      	ldr	r3, [r7, #0]
 800eacc:	88db      	ldrh	r3, [r3, #6]
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d12d      	bne.n	800eb2e <USBD_SetAddress+0x76>
 800ead2:	683b      	ldr	r3, [r7, #0]
 800ead4:	885b      	ldrh	r3, [r3, #2]
 800ead6:	2b7f      	cmp	r3, #127	; 0x7f
 800ead8:	d829      	bhi.n	800eb2e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800eada:	683b      	ldr	r3, [r7, #0]
 800eadc:	885b      	ldrh	r3, [r3, #2]
 800eade:	b2db      	uxtb	r3, r3
 800eae0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800eae4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eaec:	b2db      	uxtb	r3, r3
 800eaee:	2b03      	cmp	r3, #3
 800eaf0:	d104      	bne.n	800eafc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800eaf2:	6839      	ldr	r1, [r7, #0]
 800eaf4:	6878      	ldr	r0, [r7, #4]
 800eaf6:	f000 f9a3 	bl	800ee40 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eafa:	e01d      	b.n	800eb38 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	7bfa      	ldrb	r2, [r7, #15]
 800eb00:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800eb04:	7bfb      	ldrb	r3, [r7, #15]
 800eb06:	4619      	mov	r1, r3
 800eb08:	6878      	ldr	r0, [r7, #4]
 800eb0a:	f001 f80b 	bl	800fb24 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800eb0e:	6878      	ldr	r0, [r7, #4]
 800eb10:	f000 fa61 	bl	800efd6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800eb14:	7bfb      	ldrb	r3, [r7, #15]
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	d004      	beq.n	800eb24 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	2202      	movs	r2, #2
 800eb1e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eb22:	e009      	b.n	800eb38 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	2201      	movs	r2, #1
 800eb28:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eb2c:	e004      	b.n	800eb38 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800eb2e:	6839      	ldr	r1, [r7, #0]
 800eb30:	6878      	ldr	r0, [r7, #4]
 800eb32:	f000 f985 	bl	800ee40 <USBD_CtlError>
  }
}
 800eb36:	bf00      	nop
 800eb38:	bf00      	nop
 800eb3a:	3710      	adds	r7, #16
 800eb3c:	46bd      	mov	sp, r7
 800eb3e:	bd80      	pop	{r7, pc}

0800eb40 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eb40:	b580      	push	{r7, lr}
 800eb42:	b084      	sub	sp, #16
 800eb44:	af00      	add	r7, sp, #0
 800eb46:	6078      	str	r0, [r7, #4]
 800eb48:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800eb4a:	2300      	movs	r3, #0
 800eb4c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800eb4e:	683b      	ldr	r3, [r7, #0]
 800eb50:	885b      	ldrh	r3, [r3, #2]
 800eb52:	b2da      	uxtb	r2, r3
 800eb54:	4b4c      	ldr	r3, [pc, #304]	; (800ec88 <USBD_SetConfig+0x148>)
 800eb56:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800eb58:	4b4b      	ldr	r3, [pc, #300]	; (800ec88 <USBD_SetConfig+0x148>)
 800eb5a:	781b      	ldrb	r3, [r3, #0]
 800eb5c:	2b01      	cmp	r3, #1
 800eb5e:	d905      	bls.n	800eb6c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800eb60:	6839      	ldr	r1, [r7, #0]
 800eb62:	6878      	ldr	r0, [r7, #4]
 800eb64:	f000 f96c 	bl	800ee40 <USBD_CtlError>
    return USBD_FAIL;
 800eb68:	2303      	movs	r3, #3
 800eb6a:	e088      	b.n	800ec7e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eb72:	b2db      	uxtb	r3, r3
 800eb74:	2b02      	cmp	r3, #2
 800eb76:	d002      	beq.n	800eb7e <USBD_SetConfig+0x3e>
 800eb78:	2b03      	cmp	r3, #3
 800eb7a:	d025      	beq.n	800ebc8 <USBD_SetConfig+0x88>
 800eb7c:	e071      	b.n	800ec62 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800eb7e:	4b42      	ldr	r3, [pc, #264]	; (800ec88 <USBD_SetConfig+0x148>)
 800eb80:	781b      	ldrb	r3, [r3, #0]
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	d01c      	beq.n	800ebc0 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800eb86:	4b40      	ldr	r3, [pc, #256]	; (800ec88 <USBD_SetConfig+0x148>)
 800eb88:	781b      	ldrb	r3, [r3, #0]
 800eb8a:	461a      	mov	r2, r3
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800eb90:	4b3d      	ldr	r3, [pc, #244]	; (800ec88 <USBD_SetConfig+0x148>)
 800eb92:	781b      	ldrb	r3, [r3, #0]
 800eb94:	4619      	mov	r1, r3
 800eb96:	6878      	ldr	r0, [r7, #4]
 800eb98:	f7ff f91e 	bl	800ddd8 <USBD_SetClassConfig>
 800eb9c:	4603      	mov	r3, r0
 800eb9e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800eba0:	7bfb      	ldrb	r3, [r7, #15]
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	d004      	beq.n	800ebb0 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800eba6:	6839      	ldr	r1, [r7, #0]
 800eba8:	6878      	ldr	r0, [r7, #4]
 800ebaa:	f000 f949 	bl	800ee40 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ebae:	e065      	b.n	800ec7c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800ebb0:	6878      	ldr	r0, [r7, #4]
 800ebb2:	f000 fa10 	bl	800efd6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	2203      	movs	r2, #3
 800ebba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800ebbe:	e05d      	b.n	800ec7c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800ebc0:	6878      	ldr	r0, [r7, #4]
 800ebc2:	f000 fa08 	bl	800efd6 <USBD_CtlSendStatus>
      break;
 800ebc6:	e059      	b.n	800ec7c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800ebc8:	4b2f      	ldr	r3, [pc, #188]	; (800ec88 <USBD_SetConfig+0x148>)
 800ebca:	781b      	ldrb	r3, [r3, #0]
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	d112      	bne.n	800ebf6 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	2202      	movs	r2, #2
 800ebd4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800ebd8:	4b2b      	ldr	r3, [pc, #172]	; (800ec88 <USBD_SetConfig+0x148>)
 800ebda:	781b      	ldrb	r3, [r3, #0]
 800ebdc:	461a      	mov	r2, r3
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ebe2:	4b29      	ldr	r3, [pc, #164]	; (800ec88 <USBD_SetConfig+0x148>)
 800ebe4:	781b      	ldrb	r3, [r3, #0]
 800ebe6:	4619      	mov	r1, r3
 800ebe8:	6878      	ldr	r0, [r7, #4]
 800ebea:	f7ff f911 	bl	800de10 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800ebee:	6878      	ldr	r0, [r7, #4]
 800ebf0:	f000 f9f1 	bl	800efd6 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ebf4:	e042      	b.n	800ec7c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800ebf6:	4b24      	ldr	r3, [pc, #144]	; (800ec88 <USBD_SetConfig+0x148>)
 800ebf8:	781b      	ldrb	r3, [r3, #0]
 800ebfa:	461a      	mov	r2, r3
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	685b      	ldr	r3, [r3, #4]
 800ec00:	429a      	cmp	r2, r3
 800ec02:	d02a      	beq.n	800ec5a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	685b      	ldr	r3, [r3, #4]
 800ec08:	b2db      	uxtb	r3, r3
 800ec0a:	4619      	mov	r1, r3
 800ec0c:	6878      	ldr	r0, [r7, #4]
 800ec0e:	f7ff f8ff 	bl	800de10 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800ec12:	4b1d      	ldr	r3, [pc, #116]	; (800ec88 <USBD_SetConfig+0x148>)
 800ec14:	781b      	ldrb	r3, [r3, #0]
 800ec16:	461a      	mov	r2, r3
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ec1c:	4b1a      	ldr	r3, [pc, #104]	; (800ec88 <USBD_SetConfig+0x148>)
 800ec1e:	781b      	ldrb	r3, [r3, #0]
 800ec20:	4619      	mov	r1, r3
 800ec22:	6878      	ldr	r0, [r7, #4]
 800ec24:	f7ff f8d8 	bl	800ddd8 <USBD_SetClassConfig>
 800ec28:	4603      	mov	r3, r0
 800ec2a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800ec2c:	7bfb      	ldrb	r3, [r7, #15]
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d00f      	beq.n	800ec52 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800ec32:	6839      	ldr	r1, [r7, #0]
 800ec34:	6878      	ldr	r0, [r7, #4]
 800ec36:	f000 f903 	bl	800ee40 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	685b      	ldr	r3, [r3, #4]
 800ec3e:	b2db      	uxtb	r3, r3
 800ec40:	4619      	mov	r1, r3
 800ec42:	6878      	ldr	r0, [r7, #4]
 800ec44:	f7ff f8e4 	bl	800de10 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	2202      	movs	r2, #2
 800ec4c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800ec50:	e014      	b.n	800ec7c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800ec52:	6878      	ldr	r0, [r7, #4]
 800ec54:	f000 f9bf 	bl	800efd6 <USBD_CtlSendStatus>
      break;
 800ec58:	e010      	b.n	800ec7c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800ec5a:	6878      	ldr	r0, [r7, #4]
 800ec5c:	f000 f9bb 	bl	800efd6 <USBD_CtlSendStatus>
      break;
 800ec60:	e00c      	b.n	800ec7c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800ec62:	6839      	ldr	r1, [r7, #0]
 800ec64:	6878      	ldr	r0, [r7, #4]
 800ec66:	f000 f8eb 	bl	800ee40 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ec6a:	4b07      	ldr	r3, [pc, #28]	; (800ec88 <USBD_SetConfig+0x148>)
 800ec6c:	781b      	ldrb	r3, [r3, #0]
 800ec6e:	4619      	mov	r1, r3
 800ec70:	6878      	ldr	r0, [r7, #4]
 800ec72:	f7ff f8cd 	bl	800de10 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800ec76:	2303      	movs	r3, #3
 800ec78:	73fb      	strb	r3, [r7, #15]
      break;
 800ec7a:	bf00      	nop
  }

  return ret;
 800ec7c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec7e:	4618      	mov	r0, r3
 800ec80:	3710      	adds	r7, #16
 800ec82:	46bd      	mov	sp, r7
 800ec84:	bd80      	pop	{r7, pc}
 800ec86:	bf00      	nop
 800ec88:	20000e94 	.word	0x20000e94

0800ec8c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ec8c:	b580      	push	{r7, lr}
 800ec8e:	b082      	sub	sp, #8
 800ec90:	af00      	add	r7, sp, #0
 800ec92:	6078      	str	r0, [r7, #4]
 800ec94:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ec96:	683b      	ldr	r3, [r7, #0]
 800ec98:	88db      	ldrh	r3, [r3, #6]
 800ec9a:	2b01      	cmp	r3, #1
 800ec9c:	d004      	beq.n	800eca8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ec9e:	6839      	ldr	r1, [r7, #0]
 800eca0:	6878      	ldr	r0, [r7, #4]
 800eca2:	f000 f8cd 	bl	800ee40 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800eca6:	e023      	b.n	800ecf0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ecae:	b2db      	uxtb	r3, r3
 800ecb0:	2b02      	cmp	r3, #2
 800ecb2:	dc02      	bgt.n	800ecba <USBD_GetConfig+0x2e>
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	dc03      	bgt.n	800ecc0 <USBD_GetConfig+0x34>
 800ecb8:	e015      	b.n	800ece6 <USBD_GetConfig+0x5a>
 800ecba:	2b03      	cmp	r3, #3
 800ecbc:	d00b      	beq.n	800ecd6 <USBD_GetConfig+0x4a>
 800ecbe:	e012      	b.n	800ece6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	2200      	movs	r2, #0
 800ecc4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	3308      	adds	r3, #8
 800ecca:	2201      	movs	r2, #1
 800eccc:	4619      	mov	r1, r3
 800ecce:	6878      	ldr	r0, [r7, #4]
 800ecd0:	f000 f927 	bl	800ef22 <USBD_CtlSendData>
        break;
 800ecd4:	e00c      	b.n	800ecf0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	3304      	adds	r3, #4
 800ecda:	2201      	movs	r2, #1
 800ecdc:	4619      	mov	r1, r3
 800ecde:	6878      	ldr	r0, [r7, #4]
 800ece0:	f000 f91f 	bl	800ef22 <USBD_CtlSendData>
        break;
 800ece4:	e004      	b.n	800ecf0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800ece6:	6839      	ldr	r1, [r7, #0]
 800ece8:	6878      	ldr	r0, [r7, #4]
 800ecea:	f000 f8a9 	bl	800ee40 <USBD_CtlError>
        break;
 800ecee:	bf00      	nop
}
 800ecf0:	bf00      	nop
 800ecf2:	3708      	adds	r7, #8
 800ecf4:	46bd      	mov	sp, r7
 800ecf6:	bd80      	pop	{r7, pc}

0800ecf8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ecf8:	b580      	push	{r7, lr}
 800ecfa:	b082      	sub	sp, #8
 800ecfc:	af00      	add	r7, sp, #0
 800ecfe:	6078      	str	r0, [r7, #4]
 800ed00:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ed08:	b2db      	uxtb	r3, r3
 800ed0a:	3b01      	subs	r3, #1
 800ed0c:	2b02      	cmp	r3, #2
 800ed0e:	d81e      	bhi.n	800ed4e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ed10:	683b      	ldr	r3, [r7, #0]
 800ed12:	88db      	ldrh	r3, [r3, #6]
 800ed14:	2b02      	cmp	r3, #2
 800ed16:	d004      	beq.n	800ed22 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800ed18:	6839      	ldr	r1, [r7, #0]
 800ed1a:	6878      	ldr	r0, [r7, #4]
 800ed1c:	f000 f890 	bl	800ee40 <USBD_CtlError>
        break;
 800ed20:	e01a      	b.n	800ed58 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	2201      	movs	r2, #1
 800ed26:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	d005      	beq.n	800ed3e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	68db      	ldr	r3, [r3, #12]
 800ed36:	f043 0202 	orr.w	r2, r3, #2
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	330c      	adds	r3, #12
 800ed42:	2202      	movs	r2, #2
 800ed44:	4619      	mov	r1, r3
 800ed46:	6878      	ldr	r0, [r7, #4]
 800ed48:	f000 f8eb 	bl	800ef22 <USBD_CtlSendData>
      break;
 800ed4c:	e004      	b.n	800ed58 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800ed4e:	6839      	ldr	r1, [r7, #0]
 800ed50:	6878      	ldr	r0, [r7, #4]
 800ed52:	f000 f875 	bl	800ee40 <USBD_CtlError>
      break;
 800ed56:	bf00      	nop
  }
}
 800ed58:	bf00      	nop
 800ed5a:	3708      	adds	r7, #8
 800ed5c:	46bd      	mov	sp, r7
 800ed5e:	bd80      	pop	{r7, pc}

0800ed60 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ed60:	b580      	push	{r7, lr}
 800ed62:	b082      	sub	sp, #8
 800ed64:	af00      	add	r7, sp, #0
 800ed66:	6078      	str	r0, [r7, #4]
 800ed68:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ed6a:	683b      	ldr	r3, [r7, #0]
 800ed6c:	885b      	ldrh	r3, [r3, #2]
 800ed6e:	2b01      	cmp	r3, #1
 800ed70:	d106      	bne.n	800ed80 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	2201      	movs	r2, #1
 800ed76:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ed7a:	6878      	ldr	r0, [r7, #4]
 800ed7c:	f000 f92b 	bl	800efd6 <USBD_CtlSendStatus>
  }
}
 800ed80:	bf00      	nop
 800ed82:	3708      	adds	r7, #8
 800ed84:	46bd      	mov	sp, r7
 800ed86:	bd80      	pop	{r7, pc}

0800ed88 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ed88:	b580      	push	{r7, lr}
 800ed8a:	b082      	sub	sp, #8
 800ed8c:	af00      	add	r7, sp, #0
 800ed8e:	6078      	str	r0, [r7, #4]
 800ed90:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ed98:	b2db      	uxtb	r3, r3
 800ed9a:	3b01      	subs	r3, #1
 800ed9c:	2b02      	cmp	r3, #2
 800ed9e:	d80b      	bhi.n	800edb8 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800eda0:	683b      	ldr	r3, [r7, #0]
 800eda2:	885b      	ldrh	r3, [r3, #2]
 800eda4:	2b01      	cmp	r3, #1
 800eda6:	d10c      	bne.n	800edc2 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	2200      	movs	r2, #0
 800edac:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800edb0:	6878      	ldr	r0, [r7, #4]
 800edb2:	f000 f910 	bl	800efd6 <USBD_CtlSendStatus>
      }
      break;
 800edb6:	e004      	b.n	800edc2 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800edb8:	6839      	ldr	r1, [r7, #0]
 800edba:	6878      	ldr	r0, [r7, #4]
 800edbc:	f000 f840 	bl	800ee40 <USBD_CtlError>
      break;
 800edc0:	e000      	b.n	800edc4 <USBD_ClrFeature+0x3c>
      break;
 800edc2:	bf00      	nop
  }
}
 800edc4:	bf00      	nop
 800edc6:	3708      	adds	r7, #8
 800edc8:	46bd      	mov	sp, r7
 800edca:	bd80      	pop	{r7, pc}

0800edcc <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800edcc:	b580      	push	{r7, lr}
 800edce:	b084      	sub	sp, #16
 800edd0:	af00      	add	r7, sp, #0
 800edd2:	6078      	str	r0, [r7, #4]
 800edd4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800edd6:	683b      	ldr	r3, [r7, #0]
 800edd8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800edda:	68fb      	ldr	r3, [r7, #12]
 800eddc:	781a      	ldrb	r2, [r3, #0]
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800ede2:	68fb      	ldr	r3, [r7, #12]
 800ede4:	3301      	adds	r3, #1
 800ede6:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800ede8:	68fb      	ldr	r3, [r7, #12]
 800edea:	781a      	ldrb	r2, [r3, #0]
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800edf0:	68fb      	ldr	r3, [r7, #12]
 800edf2:	3301      	adds	r3, #1
 800edf4:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800edf6:	68f8      	ldr	r0, [r7, #12]
 800edf8:	f7ff fa91 	bl	800e31e <SWAPBYTE>
 800edfc:	4603      	mov	r3, r0
 800edfe:	461a      	mov	r2, r3
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800ee04:	68fb      	ldr	r3, [r7, #12]
 800ee06:	3301      	adds	r3, #1
 800ee08:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ee0a:	68fb      	ldr	r3, [r7, #12]
 800ee0c:	3301      	adds	r3, #1
 800ee0e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800ee10:	68f8      	ldr	r0, [r7, #12]
 800ee12:	f7ff fa84 	bl	800e31e <SWAPBYTE>
 800ee16:	4603      	mov	r3, r0
 800ee18:	461a      	mov	r2, r3
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800ee1e:	68fb      	ldr	r3, [r7, #12]
 800ee20:	3301      	adds	r3, #1
 800ee22:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ee24:	68fb      	ldr	r3, [r7, #12]
 800ee26:	3301      	adds	r3, #1
 800ee28:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800ee2a:	68f8      	ldr	r0, [r7, #12]
 800ee2c:	f7ff fa77 	bl	800e31e <SWAPBYTE>
 800ee30:	4603      	mov	r3, r0
 800ee32:	461a      	mov	r2, r3
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	80da      	strh	r2, [r3, #6]
}
 800ee38:	bf00      	nop
 800ee3a:	3710      	adds	r7, #16
 800ee3c:	46bd      	mov	sp, r7
 800ee3e:	bd80      	pop	{r7, pc}

0800ee40 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ee40:	b580      	push	{r7, lr}
 800ee42:	b082      	sub	sp, #8
 800ee44:	af00      	add	r7, sp, #0
 800ee46:	6078      	str	r0, [r7, #4]
 800ee48:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ee4a:	2180      	movs	r1, #128	; 0x80
 800ee4c:	6878      	ldr	r0, [r7, #4]
 800ee4e:	f000 fdd1 	bl	800f9f4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ee52:	2100      	movs	r1, #0
 800ee54:	6878      	ldr	r0, [r7, #4]
 800ee56:	f000 fdcd 	bl	800f9f4 <USBD_LL_StallEP>
}
 800ee5a:	bf00      	nop
 800ee5c:	3708      	adds	r7, #8
 800ee5e:	46bd      	mov	sp, r7
 800ee60:	bd80      	pop	{r7, pc}

0800ee62 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ee62:	b580      	push	{r7, lr}
 800ee64:	b086      	sub	sp, #24
 800ee66:	af00      	add	r7, sp, #0
 800ee68:	60f8      	str	r0, [r7, #12]
 800ee6a:	60b9      	str	r1, [r7, #8]
 800ee6c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ee6e:	2300      	movs	r3, #0
 800ee70:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800ee72:	68fb      	ldr	r3, [r7, #12]
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	d036      	beq.n	800eee6 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800ee78:	68fb      	ldr	r3, [r7, #12]
 800ee7a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800ee7c:	6938      	ldr	r0, [r7, #16]
 800ee7e:	f000 f836 	bl	800eeee <USBD_GetLen>
 800ee82:	4603      	mov	r3, r0
 800ee84:	3301      	adds	r3, #1
 800ee86:	b29b      	uxth	r3, r3
 800ee88:	005b      	lsls	r3, r3, #1
 800ee8a:	b29a      	uxth	r2, r3
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ee90:	7dfb      	ldrb	r3, [r7, #23]
 800ee92:	68ba      	ldr	r2, [r7, #8]
 800ee94:	4413      	add	r3, r2
 800ee96:	687a      	ldr	r2, [r7, #4]
 800ee98:	7812      	ldrb	r2, [r2, #0]
 800ee9a:	701a      	strb	r2, [r3, #0]
  idx++;
 800ee9c:	7dfb      	ldrb	r3, [r7, #23]
 800ee9e:	3301      	adds	r3, #1
 800eea0:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800eea2:	7dfb      	ldrb	r3, [r7, #23]
 800eea4:	68ba      	ldr	r2, [r7, #8]
 800eea6:	4413      	add	r3, r2
 800eea8:	2203      	movs	r2, #3
 800eeaa:	701a      	strb	r2, [r3, #0]
  idx++;
 800eeac:	7dfb      	ldrb	r3, [r7, #23]
 800eeae:	3301      	adds	r3, #1
 800eeb0:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800eeb2:	e013      	b.n	800eedc <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800eeb4:	7dfb      	ldrb	r3, [r7, #23]
 800eeb6:	68ba      	ldr	r2, [r7, #8]
 800eeb8:	4413      	add	r3, r2
 800eeba:	693a      	ldr	r2, [r7, #16]
 800eebc:	7812      	ldrb	r2, [r2, #0]
 800eebe:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800eec0:	693b      	ldr	r3, [r7, #16]
 800eec2:	3301      	adds	r3, #1
 800eec4:	613b      	str	r3, [r7, #16]
    idx++;
 800eec6:	7dfb      	ldrb	r3, [r7, #23]
 800eec8:	3301      	adds	r3, #1
 800eeca:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800eecc:	7dfb      	ldrb	r3, [r7, #23]
 800eece:	68ba      	ldr	r2, [r7, #8]
 800eed0:	4413      	add	r3, r2
 800eed2:	2200      	movs	r2, #0
 800eed4:	701a      	strb	r2, [r3, #0]
    idx++;
 800eed6:	7dfb      	ldrb	r3, [r7, #23]
 800eed8:	3301      	adds	r3, #1
 800eeda:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800eedc:	693b      	ldr	r3, [r7, #16]
 800eede:	781b      	ldrb	r3, [r3, #0]
 800eee0:	2b00      	cmp	r3, #0
 800eee2:	d1e7      	bne.n	800eeb4 <USBD_GetString+0x52>
 800eee4:	e000      	b.n	800eee8 <USBD_GetString+0x86>
    return;
 800eee6:	bf00      	nop
  }
}
 800eee8:	3718      	adds	r7, #24
 800eeea:	46bd      	mov	sp, r7
 800eeec:	bd80      	pop	{r7, pc}

0800eeee <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800eeee:	b480      	push	{r7}
 800eef0:	b085      	sub	sp, #20
 800eef2:	af00      	add	r7, sp, #0
 800eef4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800eef6:	2300      	movs	r3, #0
 800eef8:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800eefe:	e005      	b.n	800ef0c <USBD_GetLen+0x1e>
  {
    len++;
 800ef00:	7bfb      	ldrb	r3, [r7, #15]
 800ef02:	3301      	adds	r3, #1
 800ef04:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ef06:	68bb      	ldr	r3, [r7, #8]
 800ef08:	3301      	adds	r3, #1
 800ef0a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ef0c:	68bb      	ldr	r3, [r7, #8]
 800ef0e:	781b      	ldrb	r3, [r3, #0]
 800ef10:	2b00      	cmp	r3, #0
 800ef12:	d1f5      	bne.n	800ef00 <USBD_GetLen+0x12>
  }

  return len;
 800ef14:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef16:	4618      	mov	r0, r3
 800ef18:	3714      	adds	r7, #20
 800ef1a:	46bd      	mov	sp, r7
 800ef1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef20:	4770      	bx	lr

0800ef22 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ef22:	b580      	push	{r7, lr}
 800ef24:	b084      	sub	sp, #16
 800ef26:	af00      	add	r7, sp, #0
 800ef28:	60f8      	str	r0, [r7, #12]
 800ef2a:	60b9      	str	r1, [r7, #8]
 800ef2c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ef2e:	68fb      	ldr	r3, [r7, #12]
 800ef30:	2202      	movs	r2, #2
 800ef32:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800ef36:	68fb      	ldr	r3, [r7, #12]
 800ef38:	687a      	ldr	r2, [r7, #4]
 800ef3a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ef3c:	68fb      	ldr	r3, [r7, #12]
 800ef3e:	687a      	ldr	r2, [r7, #4]
 800ef40:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	68ba      	ldr	r2, [r7, #8]
 800ef46:	2100      	movs	r1, #0
 800ef48:	68f8      	ldr	r0, [r7, #12]
 800ef4a:	f000 fe21 	bl	800fb90 <USBD_LL_Transmit>

  return USBD_OK;
 800ef4e:	2300      	movs	r3, #0
}
 800ef50:	4618      	mov	r0, r3
 800ef52:	3710      	adds	r7, #16
 800ef54:	46bd      	mov	sp, r7
 800ef56:	bd80      	pop	{r7, pc}

0800ef58 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ef58:	b580      	push	{r7, lr}
 800ef5a:	b084      	sub	sp, #16
 800ef5c:	af00      	add	r7, sp, #0
 800ef5e:	60f8      	str	r0, [r7, #12]
 800ef60:	60b9      	str	r1, [r7, #8]
 800ef62:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	68ba      	ldr	r2, [r7, #8]
 800ef68:	2100      	movs	r1, #0
 800ef6a:	68f8      	ldr	r0, [r7, #12]
 800ef6c:	f000 fe10 	bl	800fb90 <USBD_LL_Transmit>

  return USBD_OK;
 800ef70:	2300      	movs	r3, #0
}
 800ef72:	4618      	mov	r0, r3
 800ef74:	3710      	adds	r7, #16
 800ef76:	46bd      	mov	sp, r7
 800ef78:	bd80      	pop	{r7, pc}

0800ef7a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800ef7a:	b580      	push	{r7, lr}
 800ef7c:	b084      	sub	sp, #16
 800ef7e:	af00      	add	r7, sp, #0
 800ef80:	60f8      	str	r0, [r7, #12]
 800ef82:	60b9      	str	r1, [r7, #8]
 800ef84:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ef86:	68fb      	ldr	r3, [r7, #12]
 800ef88:	2203      	movs	r2, #3
 800ef8a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800ef8e:	68fb      	ldr	r3, [r7, #12]
 800ef90:	687a      	ldr	r2, [r7, #4]
 800ef92:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800ef96:	68fb      	ldr	r3, [r7, #12]
 800ef98:	687a      	ldr	r2, [r7, #4]
 800ef9a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	68ba      	ldr	r2, [r7, #8]
 800efa2:	2100      	movs	r1, #0
 800efa4:	68f8      	ldr	r0, [r7, #12]
 800efa6:	f000 fe2b 	bl	800fc00 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800efaa:	2300      	movs	r3, #0
}
 800efac:	4618      	mov	r0, r3
 800efae:	3710      	adds	r7, #16
 800efb0:	46bd      	mov	sp, r7
 800efb2:	bd80      	pop	{r7, pc}

0800efb4 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800efb4:	b580      	push	{r7, lr}
 800efb6:	b084      	sub	sp, #16
 800efb8:	af00      	add	r7, sp, #0
 800efba:	60f8      	str	r0, [r7, #12]
 800efbc:	60b9      	str	r1, [r7, #8]
 800efbe:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	68ba      	ldr	r2, [r7, #8]
 800efc4:	2100      	movs	r1, #0
 800efc6:	68f8      	ldr	r0, [r7, #12]
 800efc8:	f000 fe1a 	bl	800fc00 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800efcc:	2300      	movs	r3, #0
}
 800efce:	4618      	mov	r0, r3
 800efd0:	3710      	adds	r7, #16
 800efd2:	46bd      	mov	sp, r7
 800efd4:	bd80      	pop	{r7, pc}

0800efd6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800efd6:	b580      	push	{r7, lr}
 800efd8:	b082      	sub	sp, #8
 800efda:	af00      	add	r7, sp, #0
 800efdc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	2204      	movs	r2, #4
 800efe2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800efe6:	2300      	movs	r3, #0
 800efe8:	2200      	movs	r2, #0
 800efea:	2100      	movs	r1, #0
 800efec:	6878      	ldr	r0, [r7, #4]
 800efee:	f000 fdcf 	bl	800fb90 <USBD_LL_Transmit>

  return USBD_OK;
 800eff2:	2300      	movs	r3, #0
}
 800eff4:	4618      	mov	r0, r3
 800eff6:	3708      	adds	r7, #8
 800eff8:	46bd      	mov	sp, r7
 800effa:	bd80      	pop	{r7, pc}

0800effc <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800effc:	b580      	push	{r7, lr}
 800effe:	b082      	sub	sp, #8
 800f000:	af00      	add	r7, sp, #0
 800f002:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	2205      	movs	r2, #5
 800f008:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f00c:	2300      	movs	r3, #0
 800f00e:	2200      	movs	r2, #0
 800f010:	2100      	movs	r1, #0
 800f012:	6878      	ldr	r0, [r7, #4]
 800f014:	f000 fdf4 	bl	800fc00 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f018:	2300      	movs	r3, #0
}
 800f01a:	4618      	mov	r0, r3
 800f01c:	3708      	adds	r7, #8
 800f01e:	46bd      	mov	sp, r7
 800f020:	bd80      	pop	{r7, pc}
	...

0800f024 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800f024:	b480      	push	{r7}
 800f026:	b087      	sub	sp, #28
 800f028:	af00      	add	r7, sp, #0
 800f02a:	60f8      	str	r0, [r7, #12]
 800f02c:	60b9      	str	r1, [r7, #8]
 800f02e:	4613      	mov	r3, r2
 800f030:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800f032:	2301      	movs	r3, #1
 800f034:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800f036:	2300      	movs	r3, #0
 800f038:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800f03a:	4b1f      	ldr	r3, [pc, #124]	; (800f0b8 <FATFS_LinkDriverEx+0x94>)
 800f03c:	7a5b      	ldrb	r3, [r3, #9]
 800f03e:	b2db      	uxtb	r3, r3
 800f040:	2b00      	cmp	r3, #0
 800f042:	d131      	bne.n	800f0a8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800f044:	4b1c      	ldr	r3, [pc, #112]	; (800f0b8 <FATFS_LinkDriverEx+0x94>)
 800f046:	7a5b      	ldrb	r3, [r3, #9]
 800f048:	b2db      	uxtb	r3, r3
 800f04a:	461a      	mov	r2, r3
 800f04c:	4b1a      	ldr	r3, [pc, #104]	; (800f0b8 <FATFS_LinkDriverEx+0x94>)
 800f04e:	2100      	movs	r1, #0
 800f050:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800f052:	4b19      	ldr	r3, [pc, #100]	; (800f0b8 <FATFS_LinkDriverEx+0x94>)
 800f054:	7a5b      	ldrb	r3, [r3, #9]
 800f056:	b2db      	uxtb	r3, r3
 800f058:	4a17      	ldr	r2, [pc, #92]	; (800f0b8 <FATFS_LinkDriverEx+0x94>)
 800f05a:	009b      	lsls	r3, r3, #2
 800f05c:	4413      	add	r3, r2
 800f05e:	68fa      	ldr	r2, [r7, #12]
 800f060:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800f062:	4b15      	ldr	r3, [pc, #84]	; (800f0b8 <FATFS_LinkDriverEx+0x94>)
 800f064:	7a5b      	ldrb	r3, [r3, #9]
 800f066:	b2db      	uxtb	r3, r3
 800f068:	461a      	mov	r2, r3
 800f06a:	4b13      	ldr	r3, [pc, #76]	; (800f0b8 <FATFS_LinkDriverEx+0x94>)
 800f06c:	4413      	add	r3, r2
 800f06e:	79fa      	ldrb	r2, [r7, #7]
 800f070:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800f072:	4b11      	ldr	r3, [pc, #68]	; (800f0b8 <FATFS_LinkDriverEx+0x94>)
 800f074:	7a5b      	ldrb	r3, [r3, #9]
 800f076:	b2db      	uxtb	r3, r3
 800f078:	1c5a      	adds	r2, r3, #1
 800f07a:	b2d1      	uxtb	r1, r2
 800f07c:	4a0e      	ldr	r2, [pc, #56]	; (800f0b8 <FATFS_LinkDriverEx+0x94>)
 800f07e:	7251      	strb	r1, [r2, #9]
 800f080:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800f082:	7dbb      	ldrb	r3, [r7, #22]
 800f084:	3330      	adds	r3, #48	; 0x30
 800f086:	b2da      	uxtb	r2, r3
 800f088:	68bb      	ldr	r3, [r7, #8]
 800f08a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800f08c:	68bb      	ldr	r3, [r7, #8]
 800f08e:	3301      	adds	r3, #1
 800f090:	223a      	movs	r2, #58	; 0x3a
 800f092:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800f094:	68bb      	ldr	r3, [r7, #8]
 800f096:	3302      	adds	r3, #2
 800f098:	222f      	movs	r2, #47	; 0x2f
 800f09a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800f09c:	68bb      	ldr	r3, [r7, #8]
 800f09e:	3303      	adds	r3, #3
 800f0a0:	2200      	movs	r2, #0
 800f0a2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800f0a4:	2300      	movs	r3, #0
 800f0a6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800f0a8:	7dfb      	ldrb	r3, [r7, #23]
}
 800f0aa:	4618      	mov	r0, r3
 800f0ac:	371c      	adds	r7, #28
 800f0ae:	46bd      	mov	sp, r7
 800f0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0b4:	4770      	bx	lr
 800f0b6:	bf00      	nop
 800f0b8:	20000e98 	.word	0x20000e98

0800f0bc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800f0bc:	b580      	push	{r7, lr}
 800f0be:	b082      	sub	sp, #8
 800f0c0:	af00      	add	r7, sp, #0
 800f0c2:	6078      	str	r0, [r7, #4]
 800f0c4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800f0c6:	2200      	movs	r2, #0
 800f0c8:	6839      	ldr	r1, [r7, #0]
 800f0ca:	6878      	ldr	r0, [r7, #4]
 800f0cc:	f7ff ffaa 	bl	800f024 <FATFS_LinkDriverEx>
 800f0d0:	4603      	mov	r3, r0
}
 800f0d2:	4618      	mov	r0, r3
 800f0d4:	3708      	adds	r7, #8
 800f0d6:	46bd      	mov	sp, r7
 800f0d8:	bd80      	pop	{r7, pc}
	...

0800f0dc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800f0dc:	b580      	push	{r7, lr}
 800f0de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800f0e0:	2200      	movs	r2, #0
 800f0e2:	4912      	ldr	r1, [pc, #72]	; (800f12c <MX_USB_DEVICE_Init+0x50>)
 800f0e4:	4812      	ldr	r0, [pc, #72]	; (800f130 <MX_USB_DEVICE_Init+0x54>)
 800f0e6:	f7fe fe09 	bl	800dcfc <USBD_Init>
 800f0ea:	4603      	mov	r3, r0
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d001      	beq.n	800f0f4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800f0f0:	f7f2 fb1c 	bl	800172c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800f0f4:	490f      	ldr	r1, [pc, #60]	; (800f134 <MX_USB_DEVICE_Init+0x58>)
 800f0f6:	480e      	ldr	r0, [pc, #56]	; (800f130 <MX_USB_DEVICE_Init+0x54>)
 800f0f8:	f7fe fe30 	bl	800dd5c <USBD_RegisterClass>
 800f0fc:	4603      	mov	r3, r0
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	d001      	beq.n	800f106 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800f102:	f7f2 fb13 	bl	800172c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800f106:	490c      	ldr	r1, [pc, #48]	; (800f138 <MX_USB_DEVICE_Init+0x5c>)
 800f108:	4809      	ldr	r0, [pc, #36]	; (800f130 <MX_USB_DEVICE_Init+0x54>)
 800f10a:	f7fe fd51 	bl	800dbb0 <USBD_CDC_RegisterInterface>
 800f10e:	4603      	mov	r3, r0
 800f110:	2b00      	cmp	r3, #0
 800f112:	d001      	beq.n	800f118 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800f114:	f7f2 fb0a 	bl	800172c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800f118:	4805      	ldr	r0, [pc, #20]	; (800f130 <MX_USB_DEVICE_Init+0x54>)
 800f11a:	f7fe fe46 	bl	800ddaa <USBD_Start>
 800f11e:	4603      	mov	r3, r0
 800f120:	2b00      	cmp	r3, #0
 800f122:	d001      	beq.n	800f128 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800f124:	f7f2 fb02 	bl	800172c <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800f128:	bf00      	nop
 800f12a:	bd80      	pop	{r7, pc}
 800f12c:	20000130 	.word	0x20000130
 800f130:	20000ea4 	.word	0x20000ea4
 800f134:	20000018 	.word	0x20000018
 800f138:	2000011c 	.word	0x2000011c

0800f13c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800f13c:	b580      	push	{r7, lr}
 800f13e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800f140:	2200      	movs	r2, #0
 800f142:	4905      	ldr	r1, [pc, #20]	; (800f158 <CDC_Init_FS+0x1c>)
 800f144:	4805      	ldr	r0, [pc, #20]	; (800f15c <CDC_Init_FS+0x20>)
 800f146:	f7fe fd48 	bl	800dbda <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800f14a:	4905      	ldr	r1, [pc, #20]	; (800f160 <CDC_Init_FS+0x24>)
 800f14c:	4803      	ldr	r0, [pc, #12]	; (800f15c <CDC_Init_FS+0x20>)
 800f14e:	f7fe fd62 	bl	800dc16 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800f152:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800f154:	4618      	mov	r0, r3
 800f156:	bd80      	pop	{r7, pc}
 800f158:	20001974 	.word	0x20001974
 800f15c:	20000ea4 	.word	0x20000ea4
 800f160:	20001174 	.word	0x20001174

0800f164 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800f164:	b480      	push	{r7}
 800f166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800f168:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800f16a:	4618      	mov	r0, r3
 800f16c:	46bd      	mov	sp, r7
 800f16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f172:	4770      	bx	lr

0800f174 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800f174:	b480      	push	{r7}
 800f176:	b083      	sub	sp, #12
 800f178:	af00      	add	r7, sp, #0
 800f17a:	4603      	mov	r3, r0
 800f17c:	6039      	str	r1, [r7, #0]
 800f17e:	71fb      	strb	r3, [r7, #7]
 800f180:	4613      	mov	r3, r2
 800f182:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800f184:	79fb      	ldrb	r3, [r7, #7]
 800f186:	2b23      	cmp	r3, #35	; 0x23
 800f188:	d84a      	bhi.n	800f220 <CDC_Control_FS+0xac>
 800f18a:	a201      	add	r2, pc, #4	; (adr r2, 800f190 <CDC_Control_FS+0x1c>)
 800f18c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f190:	0800f221 	.word	0x0800f221
 800f194:	0800f221 	.word	0x0800f221
 800f198:	0800f221 	.word	0x0800f221
 800f19c:	0800f221 	.word	0x0800f221
 800f1a0:	0800f221 	.word	0x0800f221
 800f1a4:	0800f221 	.word	0x0800f221
 800f1a8:	0800f221 	.word	0x0800f221
 800f1ac:	0800f221 	.word	0x0800f221
 800f1b0:	0800f221 	.word	0x0800f221
 800f1b4:	0800f221 	.word	0x0800f221
 800f1b8:	0800f221 	.word	0x0800f221
 800f1bc:	0800f221 	.word	0x0800f221
 800f1c0:	0800f221 	.word	0x0800f221
 800f1c4:	0800f221 	.word	0x0800f221
 800f1c8:	0800f221 	.word	0x0800f221
 800f1cc:	0800f221 	.word	0x0800f221
 800f1d0:	0800f221 	.word	0x0800f221
 800f1d4:	0800f221 	.word	0x0800f221
 800f1d8:	0800f221 	.word	0x0800f221
 800f1dc:	0800f221 	.word	0x0800f221
 800f1e0:	0800f221 	.word	0x0800f221
 800f1e4:	0800f221 	.word	0x0800f221
 800f1e8:	0800f221 	.word	0x0800f221
 800f1ec:	0800f221 	.word	0x0800f221
 800f1f0:	0800f221 	.word	0x0800f221
 800f1f4:	0800f221 	.word	0x0800f221
 800f1f8:	0800f221 	.word	0x0800f221
 800f1fc:	0800f221 	.word	0x0800f221
 800f200:	0800f221 	.word	0x0800f221
 800f204:	0800f221 	.word	0x0800f221
 800f208:	0800f221 	.word	0x0800f221
 800f20c:	0800f221 	.word	0x0800f221
 800f210:	0800f221 	.word	0x0800f221
 800f214:	0800f221 	.word	0x0800f221
 800f218:	0800f221 	.word	0x0800f221
 800f21c:	0800f221 	.word	0x0800f221
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800f220:	bf00      	nop
  }

  return (USBD_OK);
 800f222:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800f224:	4618      	mov	r0, r3
 800f226:	370c      	adds	r7, #12
 800f228:	46bd      	mov	sp, r7
 800f22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f22e:	4770      	bx	lr

0800f230 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800f230:	b580      	push	{r7, lr}
 800f232:	b082      	sub	sp, #8
 800f234:	af00      	add	r7, sp, #0
 800f236:	6078      	str	r0, [r7, #4]
 800f238:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800f23a:	6879      	ldr	r1, [r7, #4]
 800f23c:	4805      	ldr	r0, [pc, #20]	; (800f254 <CDC_Receive_FS+0x24>)
 800f23e:	f7fe fcea 	bl	800dc16 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800f242:	4804      	ldr	r0, [pc, #16]	; (800f254 <CDC_Receive_FS+0x24>)
 800f244:	f7fe fd30 	bl	800dca8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800f248:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800f24a:	4618      	mov	r0, r3
 800f24c:	3708      	adds	r7, #8
 800f24e:	46bd      	mov	sp, r7
 800f250:	bd80      	pop	{r7, pc}
 800f252:	bf00      	nop
 800f254:	20000ea4 	.word	0x20000ea4

0800f258 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800f258:	b580      	push	{r7, lr}
 800f25a:	b084      	sub	sp, #16
 800f25c:	af00      	add	r7, sp, #0
 800f25e:	6078      	str	r0, [r7, #4]
 800f260:	460b      	mov	r3, r1
 800f262:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800f264:	2300      	movs	r3, #0
 800f266:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800f268:	4b0d      	ldr	r3, [pc, #52]	; (800f2a0 <CDC_Transmit_FS+0x48>)
 800f26a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f26e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800f270:	68bb      	ldr	r3, [r7, #8]
 800f272:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800f276:	2b00      	cmp	r3, #0
 800f278:	d001      	beq.n	800f27e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800f27a:	2301      	movs	r3, #1
 800f27c:	e00b      	b.n	800f296 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800f27e:	887b      	ldrh	r3, [r7, #2]
 800f280:	461a      	mov	r2, r3
 800f282:	6879      	ldr	r1, [r7, #4]
 800f284:	4806      	ldr	r0, [pc, #24]	; (800f2a0 <CDC_Transmit_FS+0x48>)
 800f286:	f7fe fca8 	bl	800dbda <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800f28a:	4805      	ldr	r0, [pc, #20]	; (800f2a0 <CDC_Transmit_FS+0x48>)
 800f28c:	f7fe fcdc 	bl	800dc48 <USBD_CDC_TransmitPacket>
 800f290:	4603      	mov	r3, r0
 800f292:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800f294:	7bfb      	ldrb	r3, [r7, #15]
}
 800f296:	4618      	mov	r0, r3
 800f298:	3710      	adds	r7, #16
 800f29a:	46bd      	mov	sp, r7
 800f29c:	bd80      	pop	{r7, pc}
 800f29e:	bf00      	nop
 800f2a0:	20000ea4 	.word	0x20000ea4

0800f2a4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800f2a4:	b480      	push	{r7}
 800f2a6:	b087      	sub	sp, #28
 800f2a8:	af00      	add	r7, sp, #0
 800f2aa:	60f8      	str	r0, [r7, #12]
 800f2ac:	60b9      	str	r1, [r7, #8]
 800f2ae:	4613      	mov	r3, r2
 800f2b0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800f2b2:	2300      	movs	r3, #0
 800f2b4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800f2b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f2ba:	4618      	mov	r0, r3
 800f2bc:	371c      	adds	r7, #28
 800f2be:	46bd      	mov	sp, r7
 800f2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2c4:	4770      	bx	lr
	...

0800f2c8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f2c8:	b480      	push	{r7}
 800f2ca:	b083      	sub	sp, #12
 800f2cc:	af00      	add	r7, sp, #0
 800f2ce:	4603      	mov	r3, r0
 800f2d0:	6039      	str	r1, [r7, #0]
 800f2d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800f2d4:	683b      	ldr	r3, [r7, #0]
 800f2d6:	2212      	movs	r2, #18
 800f2d8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800f2da:	4b03      	ldr	r3, [pc, #12]	; (800f2e8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800f2dc:	4618      	mov	r0, r3
 800f2de:	370c      	adds	r7, #12
 800f2e0:	46bd      	mov	sp, r7
 800f2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2e6:	4770      	bx	lr
 800f2e8:	20000150 	.word	0x20000150

0800f2ec <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f2ec:	b480      	push	{r7}
 800f2ee:	b083      	sub	sp, #12
 800f2f0:	af00      	add	r7, sp, #0
 800f2f2:	4603      	mov	r3, r0
 800f2f4:	6039      	str	r1, [r7, #0]
 800f2f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800f2f8:	683b      	ldr	r3, [r7, #0]
 800f2fa:	2204      	movs	r2, #4
 800f2fc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800f2fe:	4b03      	ldr	r3, [pc, #12]	; (800f30c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800f300:	4618      	mov	r0, r3
 800f302:	370c      	adds	r7, #12
 800f304:	46bd      	mov	sp, r7
 800f306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f30a:	4770      	bx	lr
 800f30c:	20000170 	.word	0x20000170

0800f310 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f310:	b580      	push	{r7, lr}
 800f312:	b082      	sub	sp, #8
 800f314:	af00      	add	r7, sp, #0
 800f316:	4603      	mov	r3, r0
 800f318:	6039      	str	r1, [r7, #0]
 800f31a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f31c:	79fb      	ldrb	r3, [r7, #7]
 800f31e:	2b00      	cmp	r3, #0
 800f320:	d105      	bne.n	800f32e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f322:	683a      	ldr	r2, [r7, #0]
 800f324:	4907      	ldr	r1, [pc, #28]	; (800f344 <USBD_FS_ProductStrDescriptor+0x34>)
 800f326:	4808      	ldr	r0, [pc, #32]	; (800f348 <USBD_FS_ProductStrDescriptor+0x38>)
 800f328:	f7ff fd9b 	bl	800ee62 <USBD_GetString>
 800f32c:	e004      	b.n	800f338 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f32e:	683a      	ldr	r2, [r7, #0]
 800f330:	4904      	ldr	r1, [pc, #16]	; (800f344 <USBD_FS_ProductStrDescriptor+0x34>)
 800f332:	4805      	ldr	r0, [pc, #20]	; (800f348 <USBD_FS_ProductStrDescriptor+0x38>)
 800f334:	f7ff fd95 	bl	800ee62 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f338:	4b02      	ldr	r3, [pc, #8]	; (800f344 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800f33a:	4618      	mov	r0, r3
 800f33c:	3708      	adds	r7, #8
 800f33e:	46bd      	mov	sp, r7
 800f340:	bd80      	pop	{r7, pc}
 800f342:	bf00      	nop
 800f344:	20002174 	.word	0x20002174
 800f348:	080139c0 	.word	0x080139c0

0800f34c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f34c:	b580      	push	{r7, lr}
 800f34e:	b082      	sub	sp, #8
 800f350:	af00      	add	r7, sp, #0
 800f352:	4603      	mov	r3, r0
 800f354:	6039      	str	r1, [r7, #0]
 800f356:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800f358:	683a      	ldr	r2, [r7, #0]
 800f35a:	4904      	ldr	r1, [pc, #16]	; (800f36c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800f35c:	4804      	ldr	r0, [pc, #16]	; (800f370 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800f35e:	f7ff fd80 	bl	800ee62 <USBD_GetString>
  return USBD_StrDesc;
 800f362:	4b02      	ldr	r3, [pc, #8]	; (800f36c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800f364:	4618      	mov	r0, r3
 800f366:	3708      	adds	r7, #8
 800f368:	46bd      	mov	sp, r7
 800f36a:	bd80      	pop	{r7, pc}
 800f36c:	20002174 	.word	0x20002174
 800f370:	080139d8 	.word	0x080139d8

0800f374 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f374:	b580      	push	{r7, lr}
 800f376:	b082      	sub	sp, #8
 800f378:	af00      	add	r7, sp, #0
 800f37a:	4603      	mov	r3, r0
 800f37c:	6039      	str	r1, [r7, #0]
 800f37e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800f380:	683b      	ldr	r3, [r7, #0]
 800f382:	221a      	movs	r2, #26
 800f384:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800f386:	f000 f855 	bl	800f434 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800f38a:	4b02      	ldr	r3, [pc, #8]	; (800f394 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800f38c:	4618      	mov	r0, r3
 800f38e:	3708      	adds	r7, #8
 800f390:	46bd      	mov	sp, r7
 800f392:	bd80      	pop	{r7, pc}
 800f394:	20000174 	.word	0x20000174

0800f398 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f398:	b580      	push	{r7, lr}
 800f39a:	b082      	sub	sp, #8
 800f39c:	af00      	add	r7, sp, #0
 800f39e:	4603      	mov	r3, r0
 800f3a0:	6039      	str	r1, [r7, #0]
 800f3a2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800f3a4:	79fb      	ldrb	r3, [r7, #7]
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	d105      	bne.n	800f3b6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f3aa:	683a      	ldr	r2, [r7, #0]
 800f3ac:	4907      	ldr	r1, [pc, #28]	; (800f3cc <USBD_FS_ConfigStrDescriptor+0x34>)
 800f3ae:	4808      	ldr	r0, [pc, #32]	; (800f3d0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f3b0:	f7ff fd57 	bl	800ee62 <USBD_GetString>
 800f3b4:	e004      	b.n	800f3c0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f3b6:	683a      	ldr	r2, [r7, #0]
 800f3b8:	4904      	ldr	r1, [pc, #16]	; (800f3cc <USBD_FS_ConfigStrDescriptor+0x34>)
 800f3ba:	4805      	ldr	r0, [pc, #20]	; (800f3d0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f3bc:	f7ff fd51 	bl	800ee62 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f3c0:	4b02      	ldr	r3, [pc, #8]	; (800f3cc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800f3c2:	4618      	mov	r0, r3
 800f3c4:	3708      	adds	r7, #8
 800f3c6:	46bd      	mov	sp, r7
 800f3c8:	bd80      	pop	{r7, pc}
 800f3ca:	bf00      	nop
 800f3cc:	20002174 	.word	0x20002174
 800f3d0:	080139ec 	.word	0x080139ec

0800f3d4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f3d4:	b580      	push	{r7, lr}
 800f3d6:	b082      	sub	sp, #8
 800f3d8:	af00      	add	r7, sp, #0
 800f3da:	4603      	mov	r3, r0
 800f3dc:	6039      	str	r1, [r7, #0]
 800f3de:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f3e0:	79fb      	ldrb	r3, [r7, #7]
 800f3e2:	2b00      	cmp	r3, #0
 800f3e4:	d105      	bne.n	800f3f2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f3e6:	683a      	ldr	r2, [r7, #0]
 800f3e8:	4907      	ldr	r1, [pc, #28]	; (800f408 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f3ea:	4808      	ldr	r0, [pc, #32]	; (800f40c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f3ec:	f7ff fd39 	bl	800ee62 <USBD_GetString>
 800f3f0:	e004      	b.n	800f3fc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f3f2:	683a      	ldr	r2, [r7, #0]
 800f3f4:	4904      	ldr	r1, [pc, #16]	; (800f408 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f3f6:	4805      	ldr	r0, [pc, #20]	; (800f40c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f3f8:	f7ff fd33 	bl	800ee62 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f3fc:	4b02      	ldr	r3, [pc, #8]	; (800f408 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800f3fe:	4618      	mov	r0, r3
 800f400:	3708      	adds	r7, #8
 800f402:	46bd      	mov	sp, r7
 800f404:	bd80      	pop	{r7, pc}
 800f406:	bf00      	nop
 800f408:	20002174 	.word	0x20002174
 800f40c:	080139f8 	.word	0x080139f8

0800f410 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f410:	b480      	push	{r7}
 800f412:	b083      	sub	sp, #12
 800f414:	af00      	add	r7, sp, #0
 800f416:	4603      	mov	r3, r0
 800f418:	6039      	str	r1, [r7, #0]
 800f41a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800f41c:	683b      	ldr	r3, [r7, #0]
 800f41e:	220c      	movs	r2, #12
 800f420:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800f422:	4b03      	ldr	r3, [pc, #12]	; (800f430 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800f424:	4618      	mov	r0, r3
 800f426:	370c      	adds	r7, #12
 800f428:	46bd      	mov	sp, r7
 800f42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f42e:	4770      	bx	lr
 800f430:	20000164 	.word	0x20000164

0800f434 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800f434:	b580      	push	{r7, lr}
 800f436:	b084      	sub	sp, #16
 800f438:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800f43a:	4b0f      	ldr	r3, [pc, #60]	; (800f478 <Get_SerialNum+0x44>)
 800f43c:	681b      	ldr	r3, [r3, #0]
 800f43e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800f440:	4b0e      	ldr	r3, [pc, #56]	; (800f47c <Get_SerialNum+0x48>)
 800f442:	681b      	ldr	r3, [r3, #0]
 800f444:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800f446:	4b0e      	ldr	r3, [pc, #56]	; (800f480 <Get_SerialNum+0x4c>)
 800f448:	681b      	ldr	r3, [r3, #0]
 800f44a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800f44c:	68fa      	ldr	r2, [r7, #12]
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	4413      	add	r3, r2
 800f452:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800f454:	68fb      	ldr	r3, [r7, #12]
 800f456:	2b00      	cmp	r3, #0
 800f458:	d009      	beq.n	800f46e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800f45a:	2208      	movs	r2, #8
 800f45c:	4909      	ldr	r1, [pc, #36]	; (800f484 <Get_SerialNum+0x50>)
 800f45e:	68f8      	ldr	r0, [r7, #12]
 800f460:	f000 f814 	bl	800f48c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800f464:	2204      	movs	r2, #4
 800f466:	4908      	ldr	r1, [pc, #32]	; (800f488 <Get_SerialNum+0x54>)
 800f468:	68b8      	ldr	r0, [r7, #8]
 800f46a:	f000 f80f 	bl	800f48c <IntToUnicode>
  }
}
 800f46e:	bf00      	nop
 800f470:	3710      	adds	r7, #16
 800f472:	46bd      	mov	sp, r7
 800f474:	bd80      	pop	{r7, pc}
 800f476:	bf00      	nop
 800f478:	1fff7590 	.word	0x1fff7590
 800f47c:	1fff7594 	.word	0x1fff7594
 800f480:	1fff7598 	.word	0x1fff7598
 800f484:	20000176 	.word	0x20000176
 800f488:	20000186 	.word	0x20000186

0800f48c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800f48c:	b480      	push	{r7}
 800f48e:	b087      	sub	sp, #28
 800f490:	af00      	add	r7, sp, #0
 800f492:	60f8      	str	r0, [r7, #12]
 800f494:	60b9      	str	r1, [r7, #8]
 800f496:	4613      	mov	r3, r2
 800f498:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800f49a:	2300      	movs	r3, #0
 800f49c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800f49e:	2300      	movs	r3, #0
 800f4a0:	75fb      	strb	r3, [r7, #23]
 800f4a2:	e027      	b.n	800f4f4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800f4a4:	68fb      	ldr	r3, [r7, #12]
 800f4a6:	0f1b      	lsrs	r3, r3, #28
 800f4a8:	2b09      	cmp	r3, #9
 800f4aa:	d80b      	bhi.n	800f4c4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800f4ac:	68fb      	ldr	r3, [r7, #12]
 800f4ae:	0f1b      	lsrs	r3, r3, #28
 800f4b0:	b2da      	uxtb	r2, r3
 800f4b2:	7dfb      	ldrb	r3, [r7, #23]
 800f4b4:	005b      	lsls	r3, r3, #1
 800f4b6:	4619      	mov	r1, r3
 800f4b8:	68bb      	ldr	r3, [r7, #8]
 800f4ba:	440b      	add	r3, r1
 800f4bc:	3230      	adds	r2, #48	; 0x30
 800f4be:	b2d2      	uxtb	r2, r2
 800f4c0:	701a      	strb	r2, [r3, #0]
 800f4c2:	e00a      	b.n	800f4da <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f4c4:	68fb      	ldr	r3, [r7, #12]
 800f4c6:	0f1b      	lsrs	r3, r3, #28
 800f4c8:	b2da      	uxtb	r2, r3
 800f4ca:	7dfb      	ldrb	r3, [r7, #23]
 800f4cc:	005b      	lsls	r3, r3, #1
 800f4ce:	4619      	mov	r1, r3
 800f4d0:	68bb      	ldr	r3, [r7, #8]
 800f4d2:	440b      	add	r3, r1
 800f4d4:	3237      	adds	r2, #55	; 0x37
 800f4d6:	b2d2      	uxtb	r2, r2
 800f4d8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800f4da:	68fb      	ldr	r3, [r7, #12]
 800f4dc:	011b      	lsls	r3, r3, #4
 800f4de:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800f4e0:	7dfb      	ldrb	r3, [r7, #23]
 800f4e2:	005b      	lsls	r3, r3, #1
 800f4e4:	3301      	adds	r3, #1
 800f4e6:	68ba      	ldr	r2, [r7, #8]
 800f4e8:	4413      	add	r3, r2
 800f4ea:	2200      	movs	r2, #0
 800f4ec:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800f4ee:	7dfb      	ldrb	r3, [r7, #23]
 800f4f0:	3301      	adds	r3, #1
 800f4f2:	75fb      	strb	r3, [r7, #23]
 800f4f4:	7dfa      	ldrb	r2, [r7, #23]
 800f4f6:	79fb      	ldrb	r3, [r7, #7]
 800f4f8:	429a      	cmp	r2, r3
 800f4fa:	d3d3      	bcc.n	800f4a4 <IntToUnicode+0x18>
  }
}
 800f4fc:	bf00      	nop
 800f4fe:	bf00      	nop
 800f500:	371c      	adds	r7, #28
 800f502:	46bd      	mov	sp, r7
 800f504:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f508:	4770      	bx	lr
	...

0800f50c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800f50c:	b580      	push	{r7, lr}
 800f50e:	b0b2      	sub	sp, #200	; 0xc8
 800f510:	af00      	add	r7, sp, #0
 800f512:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f514:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800f518:	2200      	movs	r2, #0
 800f51a:	601a      	str	r2, [r3, #0]
 800f51c:	605a      	str	r2, [r3, #4]
 800f51e:	609a      	str	r2, [r3, #8]
 800f520:	60da      	str	r2, [r3, #12]
 800f522:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800f524:	f107 0318 	add.w	r3, r7, #24
 800f528:	229c      	movs	r2, #156	; 0x9c
 800f52a:	2100      	movs	r1, #0
 800f52c:	4618      	mov	r0, r3
 800f52e:	f002 ff39 	bl	80123a4 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	681b      	ldr	r3, [r3, #0]
 800f536:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f53a:	d163      	bne.n	800f604 <HAL_PCD_MspInit+0xf8>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800f53c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f540:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800f542:	2300      	movs	r3, #0
 800f544:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800f548:	f107 0318 	add.w	r3, r7, #24
 800f54c:	4618      	mov	r0, r3
 800f54e:	f7f6 ffe9 	bl	8006524 <HAL_RCCEx_PeriphCLKConfig>
 800f552:	4603      	mov	r3, r0
 800f554:	2b00      	cmp	r3, #0
 800f556:	d001      	beq.n	800f55c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800f558:	f7f2 f8e8 	bl	800172c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f55c:	4b2b      	ldr	r3, [pc, #172]	; (800f60c <HAL_PCD_MspInit+0x100>)
 800f55e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f560:	4a2a      	ldr	r2, [pc, #168]	; (800f60c <HAL_PCD_MspInit+0x100>)
 800f562:	f043 0301 	orr.w	r3, r3, #1
 800f566:	64d3      	str	r3, [r2, #76]	; 0x4c
 800f568:	4b28      	ldr	r3, [pc, #160]	; (800f60c <HAL_PCD_MspInit+0x100>)
 800f56a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f56c:	f003 0301 	and.w	r3, r3, #1
 800f570:	617b      	str	r3, [r7, #20]
 800f572:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = USB_OTG_DP_Pin|USB_OTG_DM_Pin;
 800f574:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800f578:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f57c:	2302      	movs	r3, #2
 800f57e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f582:	2300      	movs	r3, #0
 800f584:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f588:	2303      	movs	r3, #3
 800f58a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800f58e:	230a      	movs	r3, #10
 800f590:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f594:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800f598:	4619      	mov	r1, r3
 800f59a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800f59e:	f7f4 fb51 	bl	8003c44 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800f5a2:	4b1a      	ldr	r3, [pc, #104]	; (800f60c <HAL_PCD_MspInit+0x100>)
 800f5a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f5a6:	4a19      	ldr	r2, [pc, #100]	; (800f60c <HAL_PCD_MspInit+0x100>)
 800f5a8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800f5ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 800f5ae:	4b17      	ldr	r3, [pc, #92]	; (800f60c <HAL_PCD_MspInit+0x100>)
 800f5b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f5b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800f5b6:	613b      	str	r3, [r7, #16]
 800f5b8:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800f5ba:	4b14      	ldr	r3, [pc, #80]	; (800f60c <HAL_PCD_MspInit+0x100>)
 800f5bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f5be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f5c2:	2b00      	cmp	r3, #0
 800f5c4:	d114      	bne.n	800f5f0 <HAL_PCD_MspInit+0xe4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800f5c6:	4b11      	ldr	r3, [pc, #68]	; (800f60c <HAL_PCD_MspInit+0x100>)
 800f5c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f5ca:	4a10      	ldr	r2, [pc, #64]	; (800f60c <HAL_PCD_MspInit+0x100>)
 800f5cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f5d0:	6593      	str	r3, [r2, #88]	; 0x58
 800f5d2:	4b0e      	ldr	r3, [pc, #56]	; (800f60c <HAL_PCD_MspInit+0x100>)
 800f5d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f5d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f5da:	60fb      	str	r3, [r7, #12]
 800f5dc:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 800f5de:	f7f6 f8ad 	bl	800573c <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800f5e2:	4b0a      	ldr	r3, [pc, #40]	; (800f60c <HAL_PCD_MspInit+0x100>)
 800f5e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f5e6:	4a09      	ldr	r2, [pc, #36]	; (800f60c <HAL_PCD_MspInit+0x100>)
 800f5e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f5ec:	6593      	str	r3, [r2, #88]	; 0x58
 800f5ee:	e001      	b.n	800f5f4 <HAL_PCD_MspInit+0xe8>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800f5f0:	f7f6 f8a4 	bl	800573c <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800f5f4:	2200      	movs	r2, #0
 800f5f6:	2100      	movs	r1, #0
 800f5f8:	2043      	movs	r0, #67	; 0x43
 800f5fa:	f7f3 fe1c 	bl	8003236 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800f5fe:	2043      	movs	r0, #67	; 0x43
 800f600:	f7f3 fe35 	bl	800326e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800f604:	bf00      	nop
 800f606:	37c8      	adds	r7, #200	; 0xc8
 800f608:	46bd      	mov	sp, r7
 800f60a:	bd80      	pop	{r7, pc}
 800f60c:	40021000 	.word	0x40021000

0800f610 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f610:	b580      	push	{r7, lr}
 800f612:	b082      	sub	sp, #8
 800f614:	af00      	add	r7, sp, #0
 800f616:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800f624:	4619      	mov	r1, r3
 800f626:	4610      	mov	r0, r2
 800f628:	f7fe fc0a 	bl	800de40 <USBD_LL_SetupStage>
}
 800f62c:	bf00      	nop
 800f62e:	3708      	adds	r7, #8
 800f630:	46bd      	mov	sp, r7
 800f632:	bd80      	pop	{r7, pc}

0800f634 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f634:	b580      	push	{r7, lr}
 800f636:	b082      	sub	sp, #8
 800f638:	af00      	add	r7, sp, #0
 800f63a:	6078      	str	r0, [r7, #4]
 800f63c:	460b      	mov	r3, r1
 800f63e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800f646:	78fa      	ldrb	r2, [r7, #3]
 800f648:	6879      	ldr	r1, [r7, #4]
 800f64a:	4613      	mov	r3, r2
 800f64c:	00db      	lsls	r3, r3, #3
 800f64e:	4413      	add	r3, r2
 800f650:	009b      	lsls	r3, r3, #2
 800f652:	440b      	add	r3, r1
 800f654:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800f658:	681a      	ldr	r2, [r3, #0]
 800f65a:	78fb      	ldrb	r3, [r7, #3]
 800f65c:	4619      	mov	r1, r3
 800f65e:	f7fe fc44 	bl	800deea <USBD_LL_DataOutStage>
}
 800f662:	bf00      	nop
 800f664:	3708      	adds	r7, #8
 800f666:	46bd      	mov	sp, r7
 800f668:	bd80      	pop	{r7, pc}

0800f66a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f66a:	b580      	push	{r7, lr}
 800f66c:	b082      	sub	sp, #8
 800f66e:	af00      	add	r7, sp, #0
 800f670:	6078      	str	r0, [r7, #4]
 800f672:	460b      	mov	r3, r1
 800f674:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800f67c:	78fa      	ldrb	r2, [r7, #3]
 800f67e:	6879      	ldr	r1, [r7, #4]
 800f680:	4613      	mov	r3, r2
 800f682:	00db      	lsls	r3, r3, #3
 800f684:	4413      	add	r3, r2
 800f686:	009b      	lsls	r3, r3, #2
 800f688:	440b      	add	r3, r1
 800f68a:	334c      	adds	r3, #76	; 0x4c
 800f68c:	681a      	ldr	r2, [r3, #0]
 800f68e:	78fb      	ldrb	r3, [r7, #3]
 800f690:	4619      	mov	r1, r3
 800f692:	f7fe fc8d 	bl	800dfb0 <USBD_LL_DataInStage>
}
 800f696:	bf00      	nop
 800f698:	3708      	adds	r7, #8
 800f69a:	46bd      	mov	sp, r7
 800f69c:	bd80      	pop	{r7, pc}

0800f69e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f69e:	b580      	push	{r7, lr}
 800f6a0:	b082      	sub	sp, #8
 800f6a2:	af00      	add	r7, sp, #0
 800f6a4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f6ac:	4618      	mov	r0, r3
 800f6ae:	f7fe fda1 	bl	800e1f4 <USBD_LL_SOF>
}
 800f6b2:	bf00      	nop
 800f6b4:	3708      	adds	r7, #8
 800f6b6:	46bd      	mov	sp, r7
 800f6b8:	bd80      	pop	{r7, pc}

0800f6ba <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f6ba:	b580      	push	{r7, lr}
 800f6bc:	b084      	sub	sp, #16
 800f6be:	af00      	add	r7, sp, #0
 800f6c0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800f6c2:	2301      	movs	r3, #1
 800f6c4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	68db      	ldr	r3, [r3, #12]
 800f6ca:	2b02      	cmp	r3, #2
 800f6cc:	d001      	beq.n	800f6d2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800f6ce:	f7f2 f82d 	bl	800172c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f6d8:	7bfa      	ldrb	r2, [r7, #15]
 800f6da:	4611      	mov	r1, r2
 800f6dc:	4618      	mov	r0, r3
 800f6de:	f7fe fd4b 	bl	800e178 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f6e8:	4618      	mov	r0, r3
 800f6ea:	f7fe fcf7 	bl	800e0dc <USBD_LL_Reset>
}
 800f6ee:	bf00      	nop
 800f6f0:	3710      	adds	r7, #16
 800f6f2:	46bd      	mov	sp, r7
 800f6f4:	bd80      	pop	{r7, pc}
	...

0800f6f8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f6f8:	b580      	push	{r7, lr}
 800f6fa:	b082      	sub	sp, #8
 800f6fc:	af00      	add	r7, sp, #0
 800f6fe:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	681b      	ldr	r3, [r3, #0]
 800f704:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f708:	681b      	ldr	r3, [r3, #0]
 800f70a:	687a      	ldr	r2, [r7, #4]
 800f70c:	6812      	ldr	r2, [r2, #0]
 800f70e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800f712:	f043 0301 	orr.w	r3, r3, #1
 800f716:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f71e:	4618      	mov	r0, r3
 800f720:	f7fe fd3a 	bl	800e198 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	6a1b      	ldr	r3, [r3, #32]
 800f728:	2b00      	cmp	r3, #0
 800f72a:	d005      	beq.n	800f738 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f72c:	4b04      	ldr	r3, [pc, #16]	; (800f740 <HAL_PCD_SuspendCallback+0x48>)
 800f72e:	691b      	ldr	r3, [r3, #16]
 800f730:	4a03      	ldr	r2, [pc, #12]	; (800f740 <HAL_PCD_SuspendCallback+0x48>)
 800f732:	f043 0306 	orr.w	r3, r3, #6
 800f736:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800f738:	bf00      	nop
 800f73a:	3708      	adds	r7, #8
 800f73c:	46bd      	mov	sp, r7
 800f73e:	bd80      	pop	{r7, pc}
 800f740:	e000ed00 	.word	0xe000ed00

0800f744 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f744:	b580      	push	{r7, lr}
 800f746:	b082      	sub	sp, #8
 800f748:	af00      	add	r7, sp, #0
 800f74a:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	681b      	ldr	r3, [r3, #0]
 800f750:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f754:	681b      	ldr	r3, [r3, #0]
 800f756:	687a      	ldr	r2, [r7, #4]
 800f758:	6812      	ldr	r2, [r2, #0]
 800f75a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800f75e:	f023 0301 	bic.w	r3, r3, #1
 800f762:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	6a1b      	ldr	r3, [r3, #32]
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d007      	beq.n	800f77c <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f76c:	4b08      	ldr	r3, [pc, #32]	; (800f790 <HAL_PCD_ResumeCallback+0x4c>)
 800f76e:	691b      	ldr	r3, [r3, #16]
 800f770:	4a07      	ldr	r2, [pc, #28]	; (800f790 <HAL_PCD_ResumeCallback+0x4c>)
 800f772:	f023 0306 	bic.w	r3, r3, #6
 800f776:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800f778:	f000 faf4 	bl	800fd64 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f782:	4618      	mov	r0, r3
 800f784:	f7fe fd1e 	bl	800e1c4 <USBD_LL_Resume>
}
 800f788:	bf00      	nop
 800f78a:	3708      	adds	r7, #8
 800f78c:	46bd      	mov	sp, r7
 800f78e:	bd80      	pop	{r7, pc}
 800f790:	e000ed00 	.word	0xe000ed00

0800f794 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f794:	b580      	push	{r7, lr}
 800f796:	b082      	sub	sp, #8
 800f798:	af00      	add	r7, sp, #0
 800f79a:	6078      	str	r0, [r7, #4]
 800f79c:	460b      	mov	r3, r1
 800f79e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f7a6:	78fa      	ldrb	r2, [r7, #3]
 800f7a8:	4611      	mov	r1, r2
 800f7aa:	4618      	mov	r0, r3
 800f7ac:	f7fe fd6a 	bl	800e284 <USBD_LL_IsoOUTIncomplete>
}
 800f7b0:	bf00      	nop
 800f7b2:	3708      	adds	r7, #8
 800f7b4:	46bd      	mov	sp, r7
 800f7b6:	bd80      	pop	{r7, pc}

0800f7b8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f7b8:	b580      	push	{r7, lr}
 800f7ba:	b082      	sub	sp, #8
 800f7bc:	af00      	add	r7, sp, #0
 800f7be:	6078      	str	r0, [r7, #4]
 800f7c0:	460b      	mov	r3, r1
 800f7c2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f7ca:	78fa      	ldrb	r2, [r7, #3]
 800f7cc:	4611      	mov	r1, r2
 800f7ce:	4618      	mov	r0, r3
 800f7d0:	f7fe fd32 	bl	800e238 <USBD_LL_IsoINIncomplete>
}
 800f7d4:	bf00      	nop
 800f7d6:	3708      	adds	r7, #8
 800f7d8:	46bd      	mov	sp, r7
 800f7da:	bd80      	pop	{r7, pc}

0800f7dc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f7dc:	b580      	push	{r7, lr}
 800f7de:	b082      	sub	sp, #8
 800f7e0:	af00      	add	r7, sp, #0
 800f7e2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f7ea:	4618      	mov	r0, r3
 800f7ec:	f7fe fd70 	bl	800e2d0 <USBD_LL_DevConnected>
}
 800f7f0:	bf00      	nop
 800f7f2:	3708      	adds	r7, #8
 800f7f4:	46bd      	mov	sp, r7
 800f7f6:	bd80      	pop	{r7, pc}

0800f7f8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f7f8:	b580      	push	{r7, lr}
 800f7fa:	b082      	sub	sp, #8
 800f7fc:	af00      	add	r7, sp, #0
 800f7fe:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f806:	4618      	mov	r0, r3
 800f808:	f7fe fd6d 	bl	800e2e6 <USBD_LL_DevDisconnected>
}
 800f80c:	bf00      	nop
 800f80e:	3708      	adds	r7, #8
 800f810:	46bd      	mov	sp, r7
 800f812:	bd80      	pop	{r7, pc}

0800f814 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800f814:	b580      	push	{r7, lr}
 800f816:	b082      	sub	sp, #8
 800f818:	af00      	add	r7, sp, #0
 800f81a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	781b      	ldrb	r3, [r3, #0]
 800f820:	2b00      	cmp	r3, #0
 800f822:	d139      	bne.n	800f898 <USBD_LL_Init+0x84>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800f824:	4a1f      	ldr	r2, [pc, #124]	; (800f8a4 <USBD_LL_Init+0x90>)
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	4a1d      	ldr	r2, [pc, #116]	; (800f8a4 <USBD_LL_Init+0x90>)
 800f830:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800f834:	4b1b      	ldr	r3, [pc, #108]	; (800f8a4 <USBD_LL_Init+0x90>)
 800f836:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800f83a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800f83c:	4b19      	ldr	r3, [pc, #100]	; (800f8a4 <USBD_LL_Init+0x90>)
 800f83e:	2206      	movs	r2, #6
 800f840:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800f842:	4b18      	ldr	r3, [pc, #96]	; (800f8a4 <USBD_LL_Init+0x90>)
 800f844:	2202      	movs	r2, #2
 800f846:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800f848:	4b16      	ldr	r3, [pc, #88]	; (800f8a4 <USBD_LL_Init+0x90>)
 800f84a:	2200      	movs	r2, #0
 800f84c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800f84e:	4b15      	ldr	r3, [pc, #84]	; (800f8a4 <USBD_LL_Init+0x90>)
 800f850:	2200      	movs	r2, #0
 800f852:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800f854:	4b13      	ldr	r3, [pc, #76]	; (800f8a4 <USBD_LL_Init+0x90>)
 800f856:	2200      	movs	r2, #0
 800f858:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 800f85a:	4b12      	ldr	r3, [pc, #72]	; (800f8a4 <USBD_LL_Init+0x90>)
 800f85c:	2201      	movs	r2, #1
 800f85e:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800f860:	4b10      	ldr	r3, [pc, #64]	; (800f8a4 <USBD_LL_Init+0x90>)
 800f862:	2200      	movs	r2, #0
 800f864:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800f866:	4b0f      	ldr	r3, [pc, #60]	; (800f8a4 <USBD_LL_Init+0x90>)
 800f868:	2200      	movs	r2, #0
 800f86a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800f86c:	480d      	ldr	r0, [pc, #52]	; (800f8a4 <USBD_LL_Init+0x90>)
 800f86e:	f7f4 fcd1 	bl	8004214 <HAL_PCD_Init>
 800f872:	4603      	mov	r3, r0
 800f874:	2b00      	cmp	r3, #0
 800f876:	d001      	beq.n	800f87c <USBD_LL_Init+0x68>
  {
    Error_Handler( );
 800f878:	f7f1 ff58 	bl	800172c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800f87c:	2180      	movs	r1, #128	; 0x80
 800f87e:	4809      	ldr	r0, [pc, #36]	; (800f8a4 <USBD_LL_Init+0x90>)
 800f880:	f7f5 fe53 	bl	800552a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800f884:	2240      	movs	r2, #64	; 0x40
 800f886:	2100      	movs	r1, #0
 800f888:	4806      	ldr	r0, [pc, #24]	; (800f8a4 <USBD_LL_Init+0x90>)
 800f88a:	f7f5 fe07 	bl	800549c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800f88e:	2280      	movs	r2, #128	; 0x80
 800f890:	2101      	movs	r1, #1
 800f892:	4804      	ldr	r0, [pc, #16]	; (800f8a4 <USBD_LL_Init+0x90>)
 800f894:	f7f5 fe02 	bl	800549c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800f898:	2300      	movs	r3, #0
}
 800f89a:	4618      	mov	r0, r3
 800f89c:	3708      	adds	r7, #8
 800f89e:	46bd      	mov	sp, r7
 800f8a0:	bd80      	pop	{r7, pc}
 800f8a2:	bf00      	nop
 800f8a4:	20002374 	.word	0x20002374

0800f8a8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800f8a8:	b580      	push	{r7, lr}
 800f8aa:	b084      	sub	sp, #16
 800f8ac:	af00      	add	r7, sp, #0
 800f8ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f8b0:	2300      	movs	r3, #0
 800f8b2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f8b4:	2300      	movs	r3, #0
 800f8b6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f8be:	4618      	mov	r0, r3
 800f8c0:	f7f4 fdcc 	bl	800445c <HAL_PCD_Start>
 800f8c4:	4603      	mov	r3, r0
 800f8c6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800f8c8:	7bbb      	ldrb	r3, [r7, #14]
 800f8ca:	2b03      	cmp	r3, #3
 800f8cc:	d816      	bhi.n	800f8fc <USBD_LL_Start+0x54>
 800f8ce:	a201      	add	r2, pc, #4	; (adr r2, 800f8d4 <USBD_LL_Start+0x2c>)
 800f8d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f8d4:	0800f8e5 	.word	0x0800f8e5
 800f8d8:	0800f8eb 	.word	0x0800f8eb
 800f8dc:	0800f8f1 	.word	0x0800f8f1
 800f8e0:	0800f8f7 	.word	0x0800f8f7
    case HAL_OK :
      usb_status = USBD_OK;
 800f8e4:	2300      	movs	r3, #0
 800f8e6:	73fb      	strb	r3, [r7, #15]
    break;
 800f8e8:	e00b      	b.n	800f902 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f8ea:	2303      	movs	r3, #3
 800f8ec:	73fb      	strb	r3, [r7, #15]
    break;
 800f8ee:	e008      	b.n	800f902 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f8f0:	2301      	movs	r3, #1
 800f8f2:	73fb      	strb	r3, [r7, #15]
    break;
 800f8f4:	e005      	b.n	800f902 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f8f6:	2303      	movs	r3, #3
 800f8f8:	73fb      	strb	r3, [r7, #15]
    break;
 800f8fa:	e002      	b.n	800f902 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800f8fc:	2303      	movs	r3, #3
 800f8fe:	73fb      	strb	r3, [r7, #15]
    break;
 800f900:	bf00      	nop
  }
  return usb_status;
 800f902:	7bfb      	ldrb	r3, [r7, #15]
}
 800f904:	4618      	mov	r0, r3
 800f906:	3710      	adds	r7, #16
 800f908:	46bd      	mov	sp, r7
 800f90a:	bd80      	pop	{r7, pc}

0800f90c <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800f90c:	b580      	push	{r7, lr}
 800f90e:	b084      	sub	sp, #16
 800f910:	af00      	add	r7, sp, #0
 800f912:	6078      	str	r0, [r7, #4]
 800f914:	4608      	mov	r0, r1
 800f916:	4611      	mov	r1, r2
 800f918:	461a      	mov	r2, r3
 800f91a:	4603      	mov	r3, r0
 800f91c:	70fb      	strb	r3, [r7, #3]
 800f91e:	460b      	mov	r3, r1
 800f920:	70bb      	strb	r3, [r7, #2]
 800f922:	4613      	mov	r3, r2
 800f924:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f926:	2300      	movs	r3, #0
 800f928:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f92a:	2300      	movs	r3, #0
 800f92c:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800f934:	78bb      	ldrb	r3, [r7, #2]
 800f936:	883a      	ldrh	r2, [r7, #0]
 800f938:	78f9      	ldrb	r1, [r7, #3]
 800f93a:	f7f5 fa76 	bl	8004e2a <HAL_PCD_EP_Open>
 800f93e:	4603      	mov	r3, r0
 800f940:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800f942:	7bbb      	ldrb	r3, [r7, #14]
 800f944:	2b03      	cmp	r3, #3
 800f946:	d817      	bhi.n	800f978 <USBD_LL_OpenEP+0x6c>
 800f948:	a201      	add	r2, pc, #4	; (adr r2, 800f950 <USBD_LL_OpenEP+0x44>)
 800f94a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f94e:	bf00      	nop
 800f950:	0800f961 	.word	0x0800f961
 800f954:	0800f967 	.word	0x0800f967
 800f958:	0800f96d 	.word	0x0800f96d
 800f95c:	0800f973 	.word	0x0800f973
    case HAL_OK :
      usb_status = USBD_OK;
 800f960:	2300      	movs	r3, #0
 800f962:	73fb      	strb	r3, [r7, #15]
    break;
 800f964:	e00b      	b.n	800f97e <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f966:	2303      	movs	r3, #3
 800f968:	73fb      	strb	r3, [r7, #15]
    break;
 800f96a:	e008      	b.n	800f97e <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f96c:	2301      	movs	r3, #1
 800f96e:	73fb      	strb	r3, [r7, #15]
    break;
 800f970:	e005      	b.n	800f97e <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f972:	2303      	movs	r3, #3
 800f974:	73fb      	strb	r3, [r7, #15]
    break;
 800f976:	e002      	b.n	800f97e <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800f978:	2303      	movs	r3, #3
 800f97a:	73fb      	strb	r3, [r7, #15]
    break;
 800f97c:	bf00      	nop
  }
  return usb_status;
 800f97e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f980:	4618      	mov	r0, r3
 800f982:	3710      	adds	r7, #16
 800f984:	46bd      	mov	sp, r7
 800f986:	bd80      	pop	{r7, pc}

0800f988 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f988:	b580      	push	{r7, lr}
 800f98a:	b084      	sub	sp, #16
 800f98c:	af00      	add	r7, sp, #0
 800f98e:	6078      	str	r0, [r7, #4]
 800f990:	460b      	mov	r3, r1
 800f992:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f994:	2300      	movs	r3, #0
 800f996:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f998:	2300      	movs	r3, #0
 800f99a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f9a2:	78fa      	ldrb	r2, [r7, #3]
 800f9a4:	4611      	mov	r1, r2
 800f9a6:	4618      	mov	r0, r3
 800f9a8:	f7f5 faa7 	bl	8004efa <HAL_PCD_EP_Close>
 800f9ac:	4603      	mov	r3, r0
 800f9ae:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800f9b0:	7bbb      	ldrb	r3, [r7, #14]
 800f9b2:	2b03      	cmp	r3, #3
 800f9b4:	d816      	bhi.n	800f9e4 <USBD_LL_CloseEP+0x5c>
 800f9b6:	a201      	add	r2, pc, #4	; (adr r2, 800f9bc <USBD_LL_CloseEP+0x34>)
 800f9b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f9bc:	0800f9cd 	.word	0x0800f9cd
 800f9c0:	0800f9d3 	.word	0x0800f9d3
 800f9c4:	0800f9d9 	.word	0x0800f9d9
 800f9c8:	0800f9df 	.word	0x0800f9df
    case HAL_OK :
      usb_status = USBD_OK;
 800f9cc:	2300      	movs	r3, #0
 800f9ce:	73fb      	strb	r3, [r7, #15]
    break;
 800f9d0:	e00b      	b.n	800f9ea <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f9d2:	2303      	movs	r3, #3
 800f9d4:	73fb      	strb	r3, [r7, #15]
    break;
 800f9d6:	e008      	b.n	800f9ea <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f9d8:	2301      	movs	r3, #1
 800f9da:	73fb      	strb	r3, [r7, #15]
    break;
 800f9dc:	e005      	b.n	800f9ea <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f9de:	2303      	movs	r3, #3
 800f9e0:	73fb      	strb	r3, [r7, #15]
    break;
 800f9e2:	e002      	b.n	800f9ea <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800f9e4:	2303      	movs	r3, #3
 800f9e6:	73fb      	strb	r3, [r7, #15]
    break;
 800f9e8:	bf00      	nop
  }
  return usb_status;
 800f9ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800f9ec:	4618      	mov	r0, r3
 800f9ee:	3710      	adds	r7, #16
 800f9f0:	46bd      	mov	sp, r7
 800f9f2:	bd80      	pop	{r7, pc}

0800f9f4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f9f4:	b580      	push	{r7, lr}
 800f9f6:	b084      	sub	sp, #16
 800f9f8:	af00      	add	r7, sp, #0
 800f9fa:	6078      	str	r0, [r7, #4]
 800f9fc:	460b      	mov	r3, r1
 800f9fe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fa00:	2300      	movs	r3, #0
 800fa02:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fa04:	2300      	movs	r3, #0
 800fa06:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800fa0e:	78fa      	ldrb	r2, [r7, #3]
 800fa10:	4611      	mov	r1, r2
 800fa12:	4618      	mov	r0, r3
 800fa14:	f7f5 fb4e 	bl	80050b4 <HAL_PCD_EP_SetStall>
 800fa18:	4603      	mov	r3, r0
 800fa1a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800fa1c:	7bbb      	ldrb	r3, [r7, #14]
 800fa1e:	2b03      	cmp	r3, #3
 800fa20:	d816      	bhi.n	800fa50 <USBD_LL_StallEP+0x5c>
 800fa22:	a201      	add	r2, pc, #4	; (adr r2, 800fa28 <USBD_LL_StallEP+0x34>)
 800fa24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa28:	0800fa39 	.word	0x0800fa39
 800fa2c:	0800fa3f 	.word	0x0800fa3f
 800fa30:	0800fa45 	.word	0x0800fa45
 800fa34:	0800fa4b 	.word	0x0800fa4b
    case HAL_OK :
      usb_status = USBD_OK;
 800fa38:	2300      	movs	r3, #0
 800fa3a:	73fb      	strb	r3, [r7, #15]
    break;
 800fa3c:	e00b      	b.n	800fa56 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800fa3e:	2303      	movs	r3, #3
 800fa40:	73fb      	strb	r3, [r7, #15]
    break;
 800fa42:	e008      	b.n	800fa56 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800fa44:	2301      	movs	r3, #1
 800fa46:	73fb      	strb	r3, [r7, #15]
    break;
 800fa48:	e005      	b.n	800fa56 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800fa4a:	2303      	movs	r3, #3
 800fa4c:	73fb      	strb	r3, [r7, #15]
    break;
 800fa4e:	e002      	b.n	800fa56 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800fa50:	2303      	movs	r3, #3
 800fa52:	73fb      	strb	r3, [r7, #15]
    break;
 800fa54:	bf00      	nop
  }
  return usb_status;
 800fa56:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa58:	4618      	mov	r0, r3
 800fa5a:	3710      	adds	r7, #16
 800fa5c:	46bd      	mov	sp, r7
 800fa5e:	bd80      	pop	{r7, pc}

0800fa60 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fa60:	b580      	push	{r7, lr}
 800fa62:	b084      	sub	sp, #16
 800fa64:	af00      	add	r7, sp, #0
 800fa66:	6078      	str	r0, [r7, #4]
 800fa68:	460b      	mov	r3, r1
 800fa6a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fa6c:	2300      	movs	r3, #0
 800fa6e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fa70:	2300      	movs	r3, #0
 800fa72:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800fa7a:	78fa      	ldrb	r2, [r7, #3]
 800fa7c:	4611      	mov	r1, r2
 800fa7e:	4618      	mov	r0, r3
 800fa80:	f7f5 fb7a 	bl	8005178 <HAL_PCD_EP_ClrStall>
 800fa84:	4603      	mov	r3, r0
 800fa86:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800fa88:	7bbb      	ldrb	r3, [r7, #14]
 800fa8a:	2b03      	cmp	r3, #3
 800fa8c:	d816      	bhi.n	800fabc <USBD_LL_ClearStallEP+0x5c>
 800fa8e:	a201      	add	r2, pc, #4	; (adr r2, 800fa94 <USBD_LL_ClearStallEP+0x34>)
 800fa90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa94:	0800faa5 	.word	0x0800faa5
 800fa98:	0800faab 	.word	0x0800faab
 800fa9c:	0800fab1 	.word	0x0800fab1
 800faa0:	0800fab7 	.word	0x0800fab7
    case HAL_OK :
      usb_status = USBD_OK;
 800faa4:	2300      	movs	r3, #0
 800faa6:	73fb      	strb	r3, [r7, #15]
    break;
 800faa8:	e00b      	b.n	800fac2 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800faaa:	2303      	movs	r3, #3
 800faac:	73fb      	strb	r3, [r7, #15]
    break;
 800faae:	e008      	b.n	800fac2 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800fab0:	2301      	movs	r3, #1
 800fab2:	73fb      	strb	r3, [r7, #15]
    break;
 800fab4:	e005      	b.n	800fac2 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800fab6:	2303      	movs	r3, #3
 800fab8:	73fb      	strb	r3, [r7, #15]
    break;
 800faba:	e002      	b.n	800fac2 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800fabc:	2303      	movs	r3, #3
 800fabe:	73fb      	strb	r3, [r7, #15]
    break;
 800fac0:	bf00      	nop
  }
  return usb_status;
 800fac2:	7bfb      	ldrb	r3, [r7, #15]
}
 800fac4:	4618      	mov	r0, r3
 800fac6:	3710      	adds	r7, #16
 800fac8:	46bd      	mov	sp, r7
 800faca:	bd80      	pop	{r7, pc}

0800facc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800facc:	b480      	push	{r7}
 800face:	b085      	sub	sp, #20
 800fad0:	af00      	add	r7, sp, #0
 800fad2:	6078      	str	r0, [r7, #4]
 800fad4:	460b      	mov	r3, r1
 800fad6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800fade:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800fae0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	da0b      	bge.n	800fb00 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800fae8:	78fb      	ldrb	r3, [r7, #3]
 800faea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800faee:	68f9      	ldr	r1, [r7, #12]
 800faf0:	4613      	mov	r3, r2
 800faf2:	00db      	lsls	r3, r3, #3
 800faf4:	4413      	add	r3, r2
 800faf6:	009b      	lsls	r3, r3, #2
 800faf8:	440b      	add	r3, r1
 800fafa:	333e      	adds	r3, #62	; 0x3e
 800fafc:	781b      	ldrb	r3, [r3, #0]
 800fafe:	e00b      	b.n	800fb18 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800fb00:	78fb      	ldrb	r3, [r7, #3]
 800fb02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fb06:	68f9      	ldr	r1, [r7, #12]
 800fb08:	4613      	mov	r3, r2
 800fb0a:	00db      	lsls	r3, r3, #3
 800fb0c:	4413      	add	r3, r2
 800fb0e:	009b      	lsls	r3, r3, #2
 800fb10:	440b      	add	r3, r1
 800fb12:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800fb16:	781b      	ldrb	r3, [r3, #0]
  }
}
 800fb18:	4618      	mov	r0, r3
 800fb1a:	3714      	adds	r7, #20
 800fb1c:	46bd      	mov	sp, r7
 800fb1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb22:	4770      	bx	lr

0800fb24 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800fb24:	b580      	push	{r7, lr}
 800fb26:	b084      	sub	sp, #16
 800fb28:	af00      	add	r7, sp, #0
 800fb2a:	6078      	str	r0, [r7, #4]
 800fb2c:	460b      	mov	r3, r1
 800fb2e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fb30:	2300      	movs	r3, #0
 800fb32:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fb34:	2300      	movs	r3, #0
 800fb36:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800fb3e:	78fa      	ldrb	r2, [r7, #3]
 800fb40:	4611      	mov	r1, r2
 800fb42:	4618      	mov	r0, r3
 800fb44:	f7f5 f94c 	bl	8004de0 <HAL_PCD_SetAddress>
 800fb48:	4603      	mov	r3, r0
 800fb4a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800fb4c:	7bbb      	ldrb	r3, [r7, #14]
 800fb4e:	2b03      	cmp	r3, #3
 800fb50:	d816      	bhi.n	800fb80 <USBD_LL_SetUSBAddress+0x5c>
 800fb52:	a201      	add	r2, pc, #4	; (adr r2, 800fb58 <USBD_LL_SetUSBAddress+0x34>)
 800fb54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb58:	0800fb69 	.word	0x0800fb69
 800fb5c:	0800fb6f 	.word	0x0800fb6f
 800fb60:	0800fb75 	.word	0x0800fb75
 800fb64:	0800fb7b 	.word	0x0800fb7b
    case HAL_OK :
      usb_status = USBD_OK;
 800fb68:	2300      	movs	r3, #0
 800fb6a:	73fb      	strb	r3, [r7, #15]
    break;
 800fb6c:	e00b      	b.n	800fb86 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800fb6e:	2303      	movs	r3, #3
 800fb70:	73fb      	strb	r3, [r7, #15]
    break;
 800fb72:	e008      	b.n	800fb86 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800fb74:	2301      	movs	r3, #1
 800fb76:	73fb      	strb	r3, [r7, #15]
    break;
 800fb78:	e005      	b.n	800fb86 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800fb7a:	2303      	movs	r3, #3
 800fb7c:	73fb      	strb	r3, [r7, #15]
    break;
 800fb7e:	e002      	b.n	800fb86 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800fb80:	2303      	movs	r3, #3
 800fb82:	73fb      	strb	r3, [r7, #15]
    break;
 800fb84:	bf00      	nop
  }
  return usb_status;
 800fb86:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb88:	4618      	mov	r0, r3
 800fb8a:	3710      	adds	r7, #16
 800fb8c:	46bd      	mov	sp, r7
 800fb8e:	bd80      	pop	{r7, pc}

0800fb90 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800fb90:	b580      	push	{r7, lr}
 800fb92:	b086      	sub	sp, #24
 800fb94:	af00      	add	r7, sp, #0
 800fb96:	60f8      	str	r0, [r7, #12]
 800fb98:	607a      	str	r2, [r7, #4]
 800fb9a:	603b      	str	r3, [r7, #0]
 800fb9c:	460b      	mov	r3, r1
 800fb9e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fba0:	2300      	movs	r3, #0
 800fba2:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fba4:	2300      	movs	r3, #0
 800fba6:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800fba8:	68fb      	ldr	r3, [r7, #12]
 800fbaa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800fbae:	7af9      	ldrb	r1, [r7, #11]
 800fbb0:	683b      	ldr	r3, [r7, #0]
 800fbb2:	687a      	ldr	r2, [r7, #4]
 800fbb4:	f7f5 fa41 	bl	800503a <HAL_PCD_EP_Transmit>
 800fbb8:	4603      	mov	r3, r0
 800fbba:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800fbbc:	7dbb      	ldrb	r3, [r7, #22]
 800fbbe:	2b03      	cmp	r3, #3
 800fbc0:	d816      	bhi.n	800fbf0 <USBD_LL_Transmit+0x60>
 800fbc2:	a201      	add	r2, pc, #4	; (adr r2, 800fbc8 <USBD_LL_Transmit+0x38>)
 800fbc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fbc8:	0800fbd9 	.word	0x0800fbd9
 800fbcc:	0800fbdf 	.word	0x0800fbdf
 800fbd0:	0800fbe5 	.word	0x0800fbe5
 800fbd4:	0800fbeb 	.word	0x0800fbeb
    case HAL_OK :
      usb_status = USBD_OK;
 800fbd8:	2300      	movs	r3, #0
 800fbda:	75fb      	strb	r3, [r7, #23]
    break;
 800fbdc:	e00b      	b.n	800fbf6 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800fbde:	2303      	movs	r3, #3
 800fbe0:	75fb      	strb	r3, [r7, #23]
    break;
 800fbe2:	e008      	b.n	800fbf6 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800fbe4:	2301      	movs	r3, #1
 800fbe6:	75fb      	strb	r3, [r7, #23]
    break;
 800fbe8:	e005      	b.n	800fbf6 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800fbea:	2303      	movs	r3, #3
 800fbec:	75fb      	strb	r3, [r7, #23]
    break;
 800fbee:	e002      	b.n	800fbf6 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800fbf0:	2303      	movs	r3, #3
 800fbf2:	75fb      	strb	r3, [r7, #23]
    break;
 800fbf4:	bf00      	nop
  }
  return usb_status;
 800fbf6:	7dfb      	ldrb	r3, [r7, #23]
}
 800fbf8:	4618      	mov	r0, r3
 800fbfa:	3718      	adds	r7, #24
 800fbfc:	46bd      	mov	sp, r7
 800fbfe:	bd80      	pop	{r7, pc}

0800fc00 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800fc00:	b580      	push	{r7, lr}
 800fc02:	b086      	sub	sp, #24
 800fc04:	af00      	add	r7, sp, #0
 800fc06:	60f8      	str	r0, [r7, #12]
 800fc08:	607a      	str	r2, [r7, #4]
 800fc0a:	603b      	str	r3, [r7, #0]
 800fc0c:	460b      	mov	r3, r1
 800fc0e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fc10:	2300      	movs	r3, #0
 800fc12:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fc14:	2300      	movs	r3, #0
 800fc16:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800fc18:	68fb      	ldr	r3, [r7, #12]
 800fc1a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800fc1e:	7af9      	ldrb	r1, [r7, #11]
 800fc20:	683b      	ldr	r3, [r7, #0]
 800fc22:	687a      	ldr	r2, [r7, #4]
 800fc24:	f7f5 f9b3 	bl	8004f8e <HAL_PCD_EP_Receive>
 800fc28:	4603      	mov	r3, r0
 800fc2a:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800fc2c:	7dbb      	ldrb	r3, [r7, #22]
 800fc2e:	2b03      	cmp	r3, #3
 800fc30:	d816      	bhi.n	800fc60 <USBD_LL_PrepareReceive+0x60>
 800fc32:	a201      	add	r2, pc, #4	; (adr r2, 800fc38 <USBD_LL_PrepareReceive+0x38>)
 800fc34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc38:	0800fc49 	.word	0x0800fc49
 800fc3c:	0800fc4f 	.word	0x0800fc4f
 800fc40:	0800fc55 	.word	0x0800fc55
 800fc44:	0800fc5b 	.word	0x0800fc5b
    case HAL_OK :
      usb_status = USBD_OK;
 800fc48:	2300      	movs	r3, #0
 800fc4a:	75fb      	strb	r3, [r7, #23]
    break;
 800fc4c:	e00b      	b.n	800fc66 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800fc4e:	2303      	movs	r3, #3
 800fc50:	75fb      	strb	r3, [r7, #23]
    break;
 800fc52:	e008      	b.n	800fc66 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800fc54:	2301      	movs	r3, #1
 800fc56:	75fb      	strb	r3, [r7, #23]
    break;
 800fc58:	e005      	b.n	800fc66 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800fc5a:	2303      	movs	r3, #3
 800fc5c:	75fb      	strb	r3, [r7, #23]
    break;
 800fc5e:	e002      	b.n	800fc66 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800fc60:	2303      	movs	r3, #3
 800fc62:	75fb      	strb	r3, [r7, #23]
    break;
 800fc64:	bf00      	nop
  }
  return usb_status;
 800fc66:	7dfb      	ldrb	r3, [r7, #23]
}
 800fc68:	4618      	mov	r0, r3
 800fc6a:	3718      	adds	r7, #24
 800fc6c:	46bd      	mov	sp, r7
 800fc6e:	bd80      	pop	{r7, pc}

0800fc70 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fc70:	b580      	push	{r7, lr}
 800fc72:	b082      	sub	sp, #8
 800fc74:	af00      	add	r7, sp, #0
 800fc76:	6078      	str	r0, [r7, #4]
 800fc78:	460b      	mov	r3, r1
 800fc7a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800fc82:	78fa      	ldrb	r2, [r7, #3]
 800fc84:	4611      	mov	r1, r2
 800fc86:	4618      	mov	r0, r3
 800fc88:	f7f5 f9bf 	bl	800500a <HAL_PCD_EP_GetRxCount>
 800fc8c:	4603      	mov	r3, r0
}
 800fc8e:	4618      	mov	r0, r3
 800fc90:	3708      	adds	r7, #8
 800fc92:	46bd      	mov	sp, r7
 800fc94:	bd80      	pop	{r7, pc}
	...

0800fc98 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800fc98:	b580      	push	{r7, lr}
 800fc9a:	b082      	sub	sp, #8
 800fc9c:	af00      	add	r7, sp, #0
 800fc9e:	6078      	str	r0, [r7, #4]
 800fca0:	460b      	mov	r3, r1
 800fca2:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800fca4:	78fb      	ldrb	r3, [r7, #3]
 800fca6:	2b00      	cmp	r3, #0
 800fca8:	d002      	beq.n	800fcb0 <HAL_PCDEx_LPM_Callback+0x18>
 800fcaa:	2b01      	cmp	r3, #1
 800fcac:	d01f      	beq.n	800fcee <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800fcae:	e03b      	b.n	800fd28 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	6a1b      	ldr	r3, [r3, #32]
 800fcb4:	2b00      	cmp	r3, #0
 800fcb6:	d007      	beq.n	800fcc8 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800fcb8:	f000 f854 	bl	800fd64 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800fcbc:	4b1c      	ldr	r3, [pc, #112]	; (800fd30 <HAL_PCDEx_LPM_Callback+0x98>)
 800fcbe:	691b      	ldr	r3, [r3, #16]
 800fcc0:	4a1b      	ldr	r2, [pc, #108]	; (800fd30 <HAL_PCDEx_LPM_Callback+0x98>)
 800fcc2:	f023 0306 	bic.w	r3, r3, #6
 800fcc6:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	681b      	ldr	r3, [r3, #0]
 800fccc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800fcd0:	681b      	ldr	r3, [r3, #0]
 800fcd2:	687a      	ldr	r2, [r7, #4]
 800fcd4:	6812      	ldr	r2, [r2, #0]
 800fcd6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800fcda:	f023 0301 	bic.w	r3, r3, #1
 800fcde:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800fce6:	4618      	mov	r0, r3
 800fce8:	f7fe fa6c 	bl	800e1c4 <USBD_LL_Resume>
    break;
 800fcec:	e01c      	b.n	800fd28 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	681b      	ldr	r3, [r3, #0]
 800fcf2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800fcf6:	681b      	ldr	r3, [r3, #0]
 800fcf8:	687a      	ldr	r2, [r7, #4]
 800fcfa:	6812      	ldr	r2, [r2, #0]
 800fcfc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800fd00:	f043 0301 	orr.w	r3, r3, #1
 800fd04:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800fd0c:	4618      	mov	r0, r3
 800fd0e:	f7fe fa43 	bl	800e198 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	6a1b      	ldr	r3, [r3, #32]
 800fd16:	2b00      	cmp	r3, #0
 800fd18:	d005      	beq.n	800fd26 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800fd1a:	4b05      	ldr	r3, [pc, #20]	; (800fd30 <HAL_PCDEx_LPM_Callback+0x98>)
 800fd1c:	691b      	ldr	r3, [r3, #16]
 800fd1e:	4a04      	ldr	r2, [pc, #16]	; (800fd30 <HAL_PCDEx_LPM_Callback+0x98>)
 800fd20:	f043 0306 	orr.w	r3, r3, #6
 800fd24:	6113      	str	r3, [r2, #16]
    break;
 800fd26:	bf00      	nop
}
 800fd28:	bf00      	nop
 800fd2a:	3708      	adds	r7, #8
 800fd2c:	46bd      	mov	sp, r7
 800fd2e:	bd80      	pop	{r7, pc}
 800fd30:	e000ed00 	.word	0xe000ed00

0800fd34 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800fd34:	b480      	push	{r7}
 800fd36:	b083      	sub	sp, #12
 800fd38:	af00      	add	r7, sp, #0
 800fd3a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800fd3c:	4b03      	ldr	r3, [pc, #12]	; (800fd4c <USBD_static_malloc+0x18>)
}
 800fd3e:	4618      	mov	r0, r3
 800fd40:	370c      	adds	r7, #12
 800fd42:	46bd      	mov	sp, r7
 800fd44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd48:	4770      	bx	lr
 800fd4a:	bf00      	nop
 800fd4c:	20002880 	.word	0x20002880

0800fd50 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800fd50:	b480      	push	{r7}
 800fd52:	b083      	sub	sp, #12
 800fd54:	af00      	add	r7, sp, #0
 800fd56:	6078      	str	r0, [r7, #4]

}
 800fd58:	bf00      	nop
 800fd5a:	370c      	adds	r7, #12
 800fd5c:	46bd      	mov	sp, r7
 800fd5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd62:	4770      	bx	lr

0800fd64 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800fd64:	b580      	push	{r7, lr}
 800fd66:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800fd68:	f7f0 ff8c 	bl	8000c84 <SystemClock_Config>
}
 800fd6c:	bf00      	nop
 800fd6e:	bd80      	pop	{r7, pc}

0800fd70 <ai_log_err>:

static ai_buffer* ai_input;
static ai_buffer* ai_output;

static void ai_log_err(const ai_error err, const char *fct)
{
 800fd70:	b580      	push	{r7, lr}
 800fd72:	b082      	sub	sp, #8
 800fd74:	af00      	add	r7, sp, #0
 800fd76:	6078      	str	r0, [r7, #4]
 800fd78:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN log */
  if (fct)
 800fd7a:	683b      	ldr	r3, [r7, #0]
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	d009      	beq.n	800fd94 <ai_log_err+0x24>
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
        err.type, err.code);
 800fd80:	793b      	ldrb	r3, [r7, #4]
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 800fd82:	461a      	mov	r2, r3
        err.type, err.code);
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	f3c3 2317 	ubfx	r3, r3, #8, #24
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 800fd8a:	6839      	ldr	r1, [r7, #0]
 800fd8c:	4806      	ldr	r0, [pc, #24]	; (800fda8 <ai_log_err+0x38>)
 800fd8e:	f002 fbf1 	bl	8012574 <iprintf>
 800fd92:	e008      	b.n	800fda6 <ai_log_err+0x36>
  else
    printf("TEMPLATE - Error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
 800fd94:	793b      	ldrb	r3, [r7, #4]
 800fd96:	4619      	mov	r1, r3
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	f3c3 2317 	ubfx	r3, r3, #8, #24
 800fd9e:	461a      	mov	r2, r3
 800fda0:	4802      	ldr	r0, [pc, #8]	; (800fdac <ai_log_err+0x3c>)
 800fda2:	f002 fbe7 	bl	8012574 <iprintf>

  do {} while (1);
 800fda6:	e7fe      	b.n	800fda6 <ai_log_err+0x36>
 800fda8:	08013a34 	.word	0x08013a34
 800fdac:	08013a68 	.word	0x08013a68

0800fdb0 <ai_boostrap>:
  /* USER CODE END log */
}

static int ai_boostrap(ai_handle *act_addr)
{
 800fdb0:	b580      	push	{r7, lr}
 800fdb2:	b086      	sub	sp, #24
 800fdb4:	af00      	add	r7, sp, #0
 800fdb6:	6078      	str	r0, [r7, #4]
  ai_error err;

  /* Create and initialize an instance of the model */
  err = ai_randomforest_create_and_init(&randomforest, act_addr, NULL);
 800fdb8:	2200      	movs	r2, #0
 800fdba:	6879      	ldr	r1, [r7, #4]
 800fdbc:	4828      	ldr	r0, [pc, #160]	; (800fe60 <ai_boostrap+0xb0>)
 800fdbe:	f000 fceb 	bl	8010798 <ai_randomforest_create_and_init>
 800fdc2:	4603      	mov	r3, r0
 800fdc4:	60fb      	str	r3, [r7, #12]
  if (err.type != AI_ERROR_NONE) {
 800fdc6:	7b3b      	ldrb	r3, [r7, #12]
 800fdc8:	2b00      	cmp	r3, #0
 800fdca:	d006      	beq.n	800fdda <ai_boostrap+0x2a>
    ai_log_err(err, "ai_randomforest_create_and_init");
 800fdcc:	4925      	ldr	r1, [pc, #148]	; (800fe64 <ai_boostrap+0xb4>)
 800fdce:	68f8      	ldr	r0, [r7, #12]
 800fdd0:	f7ff ffce 	bl	800fd70 <ai_log_err>
    return -1;
 800fdd4:	f04f 33ff 	mov.w	r3, #4294967295
 800fdd8:	e03e      	b.n	800fe58 <ai_boostrap+0xa8>
  }

  ai_input = ai_randomforest_inputs_get(randomforest, NULL);
 800fdda:	4b21      	ldr	r3, [pc, #132]	; (800fe60 <ai_boostrap+0xb0>)
 800fddc:	681b      	ldr	r3, [r3, #0]
 800fdde:	2100      	movs	r1, #0
 800fde0:	4618      	mov	r0, r3
 800fde2:	f000 fd4d 	bl	8010880 <ai_randomforest_inputs_get>
 800fde6:	4603      	mov	r3, r0
 800fde8:	4a1f      	ldr	r2, [pc, #124]	; (800fe68 <ai_boostrap+0xb8>)
 800fdea:	6013      	str	r3, [r2, #0]
  ai_output = ai_randomforest_outputs_get(randomforest, NULL);
 800fdec:	4b1c      	ldr	r3, [pc, #112]	; (800fe60 <ai_boostrap+0xb0>)
 800fdee:	681b      	ldr	r3, [r3, #0]
 800fdf0:	2100      	movs	r1, #0
 800fdf2:	4618      	mov	r0, r3
 800fdf4:	f000 fd5e 	bl	80108b4 <ai_randomforest_outputs_get>
 800fdf8:	4603      	mov	r3, r0
 800fdfa:	4a1c      	ldr	r2, [pc, #112]	; (800fe6c <ai_boostrap+0xbc>)
 800fdfc:	6013      	str	r3, [r2, #0]

#if defined(AI_RANDOMFOREST_INPUTS_IN_ACTIVATIONS)
  /*  In the case where "--allocate-inputs" option is used, memory buffer can be
   *  used from the activations buffer. This is not mandatory.
   */
  for (int idx=0; idx < AI_RANDOMFOREST_IN_NUM; idx++) {
 800fdfe:	2300      	movs	r3, #0
 800fe00:	617b      	str	r3, [r7, #20]
 800fe02:	e00f      	b.n	800fe24 <ai_boostrap+0x74>
	data_ins[idx] = ai_input[idx].data;
 800fe04:	4b18      	ldr	r3, [pc, #96]	; (800fe68 <ai_boostrap+0xb8>)
 800fe06:	6819      	ldr	r1, [r3, #0]
 800fe08:	697a      	ldr	r2, [r7, #20]
 800fe0a:	4613      	mov	r3, r2
 800fe0c:	00db      	lsls	r3, r3, #3
 800fe0e:	1a9b      	subs	r3, r3, r2
 800fe10:	009b      	lsls	r3, r3, #2
 800fe12:	440b      	add	r3, r1
 800fe14:	685a      	ldr	r2, [r3, #4]
 800fe16:	4916      	ldr	r1, [pc, #88]	; (800fe70 <ai_boostrap+0xc0>)
 800fe18:	697b      	ldr	r3, [r7, #20]
 800fe1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (int idx=0; idx < AI_RANDOMFOREST_IN_NUM; idx++) {
 800fe1e:	697b      	ldr	r3, [r7, #20]
 800fe20:	3301      	adds	r3, #1
 800fe22:	617b      	str	r3, [r7, #20]
 800fe24:	697b      	ldr	r3, [r7, #20]
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	ddec      	ble.n	800fe04 <ai_boostrap+0x54>

#if defined(AI_RANDOMFOREST_OUTPUTS_IN_ACTIVATIONS)
  /*  In the case where "--allocate-outputs" option is used, memory buffer can be
   *  used from the activations buffer. This is no mandatory.
   */
  for (int idx=0; idx < AI_RANDOMFOREST_OUT_NUM; idx++) {
 800fe2a:	2300      	movs	r3, #0
 800fe2c:	613b      	str	r3, [r7, #16]
 800fe2e:	e00f      	b.n	800fe50 <ai_boostrap+0xa0>
	data_outs[idx] = ai_output[idx].data;
 800fe30:	4b0e      	ldr	r3, [pc, #56]	; (800fe6c <ai_boostrap+0xbc>)
 800fe32:	6819      	ldr	r1, [r3, #0]
 800fe34:	693a      	ldr	r2, [r7, #16]
 800fe36:	4613      	mov	r3, r2
 800fe38:	00db      	lsls	r3, r3, #3
 800fe3a:	1a9b      	subs	r3, r3, r2
 800fe3c:	009b      	lsls	r3, r3, #2
 800fe3e:	440b      	add	r3, r1
 800fe40:	685a      	ldr	r2, [r3, #4]
 800fe42:	490c      	ldr	r1, [pc, #48]	; (800fe74 <ai_boostrap+0xc4>)
 800fe44:	693b      	ldr	r3, [r7, #16]
 800fe46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (int idx=0; idx < AI_RANDOMFOREST_OUT_NUM; idx++) {
 800fe4a:	693b      	ldr	r3, [r7, #16]
 800fe4c:	3301      	adds	r3, #1
 800fe4e:	613b      	str	r3, [r7, #16]
 800fe50:	693b      	ldr	r3, [r7, #16]
 800fe52:	2b01      	cmp	r3, #1
 800fe54:	ddec      	ble.n	800fe30 <ai_boostrap+0x80>
  for (int idx=0; idx < AI_RANDOMFOREST_OUT_NUM; idx++) {
	ai_output[idx].data = data_outs[idx];
  }
#endif

  return 0;
 800fe56:	2300      	movs	r3, #0
}
 800fe58:	4618      	mov	r0, r3
 800fe5a:	3718      	adds	r7, #24
 800fe5c:	46bd      	mov	sp, r7
 800fe5e:	bd80      	pop	{r7, pc}
 800fe60:	20002c68 	.word	0x20002c68
 800fe64:	08013a98 	.word	0x08013a98
 800fe68:	20002c6c 	.word	0x20002c6c
 800fe6c:	20002c70 	.word	0x20002c70
 800fe70:	20002c1c 	.word	0x20002c1c
 800fe74:	20002c20 	.word	0x20002c20

0800fe78 <ai_run>:

static int ai_run(void)
{
 800fe78:	b580      	push	{r7, lr}
 800fe7a:	b082      	sub	sp, #8
 800fe7c:	af00      	add	r7, sp, #0
  ai_i32 batch;

  batch = ai_randomforest_run(randomforest, ai_input, ai_output);
 800fe7e:	4b0f      	ldr	r3, [pc, #60]	; (800febc <ai_run+0x44>)
 800fe80:	681b      	ldr	r3, [r3, #0]
 800fe82:	4a0f      	ldr	r2, [pc, #60]	; (800fec0 <ai_run+0x48>)
 800fe84:	6811      	ldr	r1, [r2, #0]
 800fe86:	4a0f      	ldr	r2, [pc, #60]	; (800fec4 <ai_run+0x4c>)
 800fe88:	6812      	ldr	r2, [r2, #0]
 800fe8a:	4618      	mov	r0, r3
 800fe8c:	f000 fd68 	bl	8010960 <ai_randomforest_run>
 800fe90:	6078      	str	r0, [r7, #4]
  if (batch != 1) {
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	2b01      	cmp	r3, #1
 800fe96:	d00c      	beq.n	800feb2 <ai_run+0x3a>
    ai_log_err(ai_randomforest_get_error(randomforest),
 800fe98:	4b08      	ldr	r3, [pc, #32]	; (800febc <ai_run+0x44>)
 800fe9a:	681b      	ldr	r3, [r3, #0]
 800fe9c:	4618      	mov	r0, r3
 800fe9e:	f000 fc59 	bl	8010754 <ai_randomforest_get_error>
 800fea2:	4603      	mov	r3, r0
 800fea4:	4908      	ldr	r1, [pc, #32]	; (800fec8 <ai_run+0x50>)
 800fea6:	4618      	mov	r0, r3
 800fea8:	f7ff ff62 	bl	800fd70 <ai_log_err>
        "ai_randomforest_run");
    return -1;
 800feac:	f04f 33ff 	mov.w	r3, #4294967295
 800feb0:	e000      	b.n	800feb4 <ai_run+0x3c>
  }

  return 0;
 800feb2:	2300      	movs	r3, #0
}
 800feb4:	4618      	mov	r0, r3
 800feb6:	3708      	adds	r7, #8
 800feb8:	46bd      	mov	sp, r7
 800feba:	bd80      	pop	{r7, pc}
 800febc:	20002c68 	.word	0x20002c68
 800fec0:	20002c6c 	.word	0x20002c6c
 800fec4:	20002c70 	.word	0x20002c70
 800fec8:	08013ab8 	.word	0x08013ab8

0800fecc <acquire_and_process_data>:

/* USER CODE BEGIN 2 */
int acquire_and_process_data(ai_float* data[])
{
 800fecc:	b590      	push	{r4, r7, lr}
 800fece:	b095      	sub	sp, #84	; 0x54
 800fed0:	af02      	add	r7, sp, #8
 800fed2:	6078      	str	r0, [r7, #4]
	while(bufVar_len < 26) {
 800fed4:	e14a      	b.n	801016c <acquire_and_process_data+0x2a0>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 800fed6:	2200      	movs	r2, #0
 800fed8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800fedc:	48ae      	ldr	r0, [pc, #696]	; (8010198 <acquire_and_process_data+0x2cc>)
 800fede:	f7f4 f85b 	bl	8003f98 <HAL_GPIO_WritePin>
			outdata[0] = 0x1e | 0x80 ; // read status register if there is new accelerometer data
 800fee2:	4bae      	ldr	r3, [pc, #696]	; (801019c <acquire_and_process_data+0x2d0>)
 800fee4:	229e      	movs	r2, #158	; 0x9e
 800fee6:	701a      	strb	r2, [r3, #0]
			HAL_SPI_TransmitReceive(&hspi1, &outdata, &indata, 2, HAL_MAX_DELAY);
 800fee8:	f04f 33ff 	mov.w	r3, #4294967295
 800feec:	9300      	str	r3, [sp, #0]
 800feee:	2302      	movs	r3, #2
 800fef0:	4aab      	ldr	r2, [pc, #684]	; (80101a0 <acquire_and_process_data+0x2d4>)
 800fef2:	49aa      	ldr	r1, [pc, #680]	; (801019c <acquire_and_process_data+0x2d0>)
 800fef4:	48ab      	ldr	r0, [pc, #684]	; (80101a4 <acquire_and_process_data+0x2d8>)
 800fef6:	f7fa f8ad 	bl	800a054 <HAL_SPI_TransmitReceive>
			newValueAvailable = indata[1] & 0b1; //only accelerometer state
 800fefa:	4ba9      	ldr	r3, [pc, #676]	; (80101a0 <acquire_and_process_data+0x2d4>)
 800fefc:	785b      	ldrb	r3, [r3, #1]
 800fefe:	f003 0301 	and.w	r3, r3, #1
 800ff02:	b2da      	uxtb	r2, r3
 800ff04:	4ba8      	ldr	r3, [pc, #672]	; (80101a8 <acquire_and_process_data+0x2dc>)
 800ff06:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
 800ff08:	2201      	movs	r2, #1
 800ff0a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800ff0e:	48a2      	ldr	r0, [pc, #648]	; (8010198 <acquire_and_process_data+0x2cc>)
 800ff10:	f7f4 f842 	bl	8003f98 <HAL_GPIO_WritePin>

			if(newValueAvailable == 1) {
 800ff14:	4ba4      	ldr	r3, [pc, #656]	; (80101a8 <acquire_and_process_data+0x2dc>)
 800ff16:	781b      	ldrb	r3, [r3, #0]
 800ff18:	2b01      	cmp	r3, #1
 800ff1a:	f040 8127 	bne.w	801016c <acquire_and_process_data+0x2a0>
				bufVar_len++;
 800ff1e:	4ba3      	ldr	r3, [pc, #652]	; (80101ac <acquire_and_process_data+0x2e0>)
 800ff20:	681b      	ldr	r3, [r3, #0]
 800ff22:	3301      	adds	r3, #1
 800ff24:	4aa1      	ldr	r2, [pc, #644]	; (80101ac <acquire_and_process_data+0x2e0>)
 800ff26:	6013      	str	r3, [r2, #0]

				newValueAvailable = 0;
 800ff28:	4b9f      	ldr	r3, [pc, #636]	; (80101a8 <acquire_and_process_data+0x2dc>)
 800ff2a:	2200      	movs	r2, #0
 800ff2c:	701a      	strb	r2, [r3, #0]

				//Read accelerometer measurements
				outdata[0] = 0x29 | 0x80 ; // read x, 0x51
 800ff2e:	4b9b      	ldr	r3, [pc, #620]	; (801019c <acquire_and_process_data+0x2d0>)
 800ff30:	22a9      	movs	r2, #169	; 0xa9
 800ff32:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 800ff34:	2200      	movs	r2, #0
 800ff36:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800ff3a:	4897      	ldr	r0, [pc, #604]	; (8010198 <acquire_and_process_data+0x2cc>)
 800ff3c:	f7f4 f82c 	bl	8003f98 <HAL_GPIO_WritePin>
				HAL_SPI_TransmitReceive(&hspi1, &outdata, &indata, 2, HAL_MAX_DELAY);
 800ff40:	f04f 33ff 	mov.w	r3, #4294967295
 800ff44:	9300      	str	r3, [sp, #0]
 800ff46:	2302      	movs	r3, #2
 800ff48:	4a95      	ldr	r2, [pc, #596]	; (80101a0 <acquire_and_process_data+0x2d4>)
 800ff4a:	4994      	ldr	r1, [pc, #592]	; (801019c <acquire_and_process_data+0x2d0>)
 800ff4c:	4895      	ldr	r0, [pc, #596]	; (80101a4 <acquire_and_process_data+0x2d8>)
 800ff4e:	f7fa f881 	bl	800a054 <HAL_SPI_TransmitReceive>
				AccelX1 = indata[1];
 800ff52:	4b93      	ldr	r3, [pc, #588]	; (80101a0 <acquire_and_process_data+0x2d4>)
 800ff54:	785a      	ldrb	r2, [r3, #1]
 800ff56:	4b96      	ldr	r3, [pc, #600]	; (80101b0 <acquire_and_process_data+0x2e4>)
 800ff58:	701a      	strb	r2, [r3, #0]
				outdata[0] = 0x28 | 0x80 ; // read x, low
 800ff5a:	4b90      	ldr	r3, [pc, #576]	; (801019c <acquire_and_process_data+0x2d0>)
 800ff5c:	22a8      	movs	r2, #168	; 0xa8
 800ff5e:	701a      	strb	r2, [r3, #0]
				HAL_SPI_TransmitReceive(&hspi1, &outdata, &indata, 2, HAL_MAX_DELAY);
 800ff60:	f04f 33ff 	mov.w	r3, #4294967295
 800ff64:	9300      	str	r3, [sp, #0]
 800ff66:	2302      	movs	r3, #2
 800ff68:	4a8d      	ldr	r2, [pc, #564]	; (80101a0 <acquire_and_process_data+0x2d4>)
 800ff6a:	498c      	ldr	r1, [pc, #560]	; (801019c <acquire_and_process_data+0x2d0>)
 800ff6c:	488d      	ldr	r0, [pc, #564]	; (80101a4 <acquire_and_process_data+0x2d8>)
 800ff6e:	f7fa f871 	bl	800a054 <HAL_SPI_TransmitReceive>
				AccelX2 = indata[1];
 800ff72:	4b8b      	ldr	r3, [pc, #556]	; (80101a0 <acquire_and_process_data+0x2d4>)
 800ff74:	785a      	ldrb	r2, [r3, #1]
 800ff76:	4b8f      	ldr	r3, [pc, #572]	; (80101b4 <acquire_and_process_data+0x2e8>)
 800ff78:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
 800ff7a:	2201      	movs	r2, #1
 800ff7c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800ff80:	4885      	ldr	r0, [pc, #532]	; (8010198 <acquire_and_process_data+0x2cc>)
 800ff82:	f7f4 f809 	bl	8003f98 <HAL_GPIO_WritePin>

				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 800ff86:	2200      	movs	r2, #0
 800ff88:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800ff8c:	4882      	ldr	r0, [pc, #520]	; (8010198 <acquire_and_process_data+0x2cc>)
 800ff8e:	f7f4 f803 	bl	8003f98 <HAL_GPIO_WritePin>
				outdata[0] = 0x2b | 0x80 ; // read y, 0x53
 800ff92:	4b82      	ldr	r3, [pc, #520]	; (801019c <acquire_and_process_data+0x2d0>)
 800ff94:	22ab      	movs	r2, #171	; 0xab
 800ff96:	701a      	strb	r2, [r3, #0]
				HAL_SPI_TransmitReceive(&hspi1, &outdata, &indata, 2, HAL_MAX_DELAY);
 800ff98:	f04f 33ff 	mov.w	r3, #4294967295
 800ff9c:	9300      	str	r3, [sp, #0]
 800ff9e:	2302      	movs	r3, #2
 800ffa0:	4a7f      	ldr	r2, [pc, #508]	; (80101a0 <acquire_and_process_data+0x2d4>)
 800ffa2:	497e      	ldr	r1, [pc, #504]	; (801019c <acquire_and_process_data+0x2d0>)
 800ffa4:	487f      	ldr	r0, [pc, #508]	; (80101a4 <acquire_and_process_data+0x2d8>)
 800ffa6:	f7fa f855 	bl	800a054 <HAL_SPI_TransmitReceive>
				AccelY1 = indata[1];
 800ffaa:	4b7d      	ldr	r3, [pc, #500]	; (80101a0 <acquire_and_process_data+0x2d4>)
 800ffac:	785a      	ldrb	r2, [r3, #1]
 800ffae:	4b82      	ldr	r3, [pc, #520]	; (80101b8 <acquire_and_process_data+0x2ec>)
 800ffb0:	701a      	strb	r2, [r3, #0]
				outdata[0] = 0x2a | 0x80 ; // read y, low
 800ffb2:	4b7a      	ldr	r3, [pc, #488]	; (801019c <acquire_and_process_data+0x2d0>)
 800ffb4:	22aa      	movs	r2, #170	; 0xaa
 800ffb6:	701a      	strb	r2, [r3, #0]
				HAL_SPI_TransmitReceive(&hspi1, &outdata, &indata, 2, HAL_MAX_DELAY);
 800ffb8:	f04f 33ff 	mov.w	r3, #4294967295
 800ffbc:	9300      	str	r3, [sp, #0]
 800ffbe:	2302      	movs	r3, #2
 800ffc0:	4a77      	ldr	r2, [pc, #476]	; (80101a0 <acquire_and_process_data+0x2d4>)
 800ffc2:	4976      	ldr	r1, [pc, #472]	; (801019c <acquire_and_process_data+0x2d0>)
 800ffc4:	4877      	ldr	r0, [pc, #476]	; (80101a4 <acquire_and_process_data+0x2d8>)
 800ffc6:	f7fa f845 	bl	800a054 <HAL_SPI_TransmitReceive>
				AccelY2 = indata[1];
 800ffca:	4b75      	ldr	r3, [pc, #468]	; (80101a0 <acquire_and_process_data+0x2d4>)
 800ffcc:	785a      	ldrb	r2, [r3, #1]
 800ffce:	4b7b      	ldr	r3, [pc, #492]	; (80101bc <acquire_and_process_data+0x2f0>)
 800ffd0:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
 800ffd2:	2201      	movs	r2, #1
 800ffd4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800ffd8:	486f      	ldr	r0, [pc, #444]	; (8010198 <acquire_and_process_data+0x2cc>)
 800ffda:	f7f3 ffdd 	bl	8003f98 <HAL_GPIO_WritePin>

				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 800ffde:	2200      	movs	r2, #0
 800ffe0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800ffe4:	486c      	ldr	r0, [pc, #432]	; (8010198 <acquire_and_process_data+0x2cc>)
 800ffe6:	f7f3 ffd7 	bl	8003f98 <HAL_GPIO_WritePin>
				outdata[0] = 0x2d | 0x80 ; // read z, 0x55
 800ffea:	4b6c      	ldr	r3, [pc, #432]	; (801019c <acquire_and_process_data+0x2d0>)
 800ffec:	22ad      	movs	r2, #173	; 0xad
 800ffee:	701a      	strb	r2, [r3, #0]
				HAL_SPI_TransmitReceive(&hspi1, &outdata, &indata, 2, HAL_MAX_DELAY);
 800fff0:	f04f 33ff 	mov.w	r3, #4294967295
 800fff4:	9300      	str	r3, [sp, #0]
 800fff6:	2302      	movs	r3, #2
 800fff8:	4a69      	ldr	r2, [pc, #420]	; (80101a0 <acquire_and_process_data+0x2d4>)
 800fffa:	4968      	ldr	r1, [pc, #416]	; (801019c <acquire_and_process_data+0x2d0>)
 800fffc:	4869      	ldr	r0, [pc, #420]	; (80101a4 <acquire_and_process_data+0x2d8>)
 800fffe:	f7fa f829 	bl	800a054 <HAL_SPI_TransmitReceive>
				AccelZ1 = indata[1];
 8010002:	4b67      	ldr	r3, [pc, #412]	; (80101a0 <acquire_and_process_data+0x2d4>)
 8010004:	785a      	ldrb	r2, [r3, #1]
 8010006:	4b6e      	ldr	r3, [pc, #440]	; (80101c0 <acquire_and_process_data+0x2f4>)
 8010008:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
 801000a:	2201      	movs	r2, #1
 801000c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8010010:	4861      	ldr	r0, [pc, #388]	; (8010198 <acquire_and_process_data+0x2cc>)
 8010012:	f7f3 ffc1 	bl	8003f98 <HAL_GPIO_WritePin>

				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 8010016:	2200      	movs	r2, #0
 8010018:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 801001c:	485e      	ldr	r0, [pc, #376]	; (8010198 <acquire_and_process_data+0x2cc>)
 801001e:	f7f3 ffbb 	bl	8003f98 <HAL_GPIO_WritePin>
				outdata[0] = 0x2c | 0x80 ; // read z, low
 8010022:	4b5e      	ldr	r3, [pc, #376]	; (801019c <acquire_and_process_data+0x2d0>)
 8010024:	22ac      	movs	r2, #172	; 0xac
 8010026:	701a      	strb	r2, [r3, #0]
				HAL_SPI_TransmitReceive(&hspi1, &outdata, &indata, 2, HAL_MAX_DELAY);
 8010028:	f04f 33ff 	mov.w	r3, #4294967295
 801002c:	9300      	str	r3, [sp, #0]
 801002e:	2302      	movs	r3, #2
 8010030:	4a5b      	ldr	r2, [pc, #364]	; (80101a0 <acquire_and_process_data+0x2d4>)
 8010032:	495a      	ldr	r1, [pc, #360]	; (801019c <acquire_and_process_data+0x2d0>)
 8010034:	485b      	ldr	r0, [pc, #364]	; (80101a4 <acquire_and_process_data+0x2d8>)
 8010036:	f7fa f80d 	bl	800a054 <HAL_SPI_TransmitReceive>
				AccelZ2 = indata[1];
 801003a:	4b59      	ldr	r3, [pc, #356]	; (80101a0 <acquire_and_process_data+0x2d4>)
 801003c:	785a      	ldrb	r2, [r3, #1]
 801003e:	4b61      	ldr	r3, [pc, #388]	; (80101c4 <acquire_and_process_data+0x2f8>)
 8010040:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
 8010042:	2201      	movs	r2, #1
 8010044:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8010048:	4853      	ldr	r0, [pc, #332]	; (8010198 <acquire_and_process_data+0x2cc>)
 801004a:	f7f3 ffa5 	bl	8003f98 <HAL_GPIO_WritePin>
				int16_t AccelY;
				int32_t AccelY_mg;
				int16_t AccelZ;
				int32_t AccelZ_mg;

				AccelX= ((int16_t)AccelX1 <<8 ) | AccelX2;
 801004e:	4b58      	ldr	r3, [pc, #352]	; (80101b0 <acquire_and_process_data+0x2e4>)
 8010050:	781b      	ldrb	r3, [r3, #0]
 8010052:	021b      	lsls	r3, r3, #8
 8010054:	b21a      	sxth	r2, r3
 8010056:	4b57      	ldr	r3, [pc, #348]	; (80101b4 <acquire_and_process_data+0x2e8>)
 8010058:	781b      	ldrb	r3, [r3, #0]
 801005a:	b21b      	sxth	r3, r3
 801005c:	4313      	orrs	r3, r2
 801005e:	857b      	strh	r3, [r7, #42]	; 0x2a
				AccelX_mg= (int32_t)((float)AccelX * LSM6DSOX_ACC_SENSITIVITY_FS_4G);
 8010060:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8010064:	ee07 3a90 	vmov	s15, r3
 8010068:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801006c:	ed9f 7a56 	vldr	s14, [pc, #344]	; 80101c8 <acquire_and_process_data+0x2fc>
 8010070:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010074:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010078:	ee17 3a90 	vmov	r3, s15
 801007c:	627b      	str	r3, [r7, #36]	; 0x24
				AccelY= ((int16_t)AccelY1 <<8 ) | AccelY2;
 801007e:	4b4e      	ldr	r3, [pc, #312]	; (80101b8 <acquire_and_process_data+0x2ec>)
 8010080:	781b      	ldrb	r3, [r3, #0]
 8010082:	021b      	lsls	r3, r3, #8
 8010084:	b21a      	sxth	r2, r3
 8010086:	4b4d      	ldr	r3, [pc, #308]	; (80101bc <acquire_and_process_data+0x2f0>)
 8010088:	781b      	ldrb	r3, [r3, #0]
 801008a:	b21b      	sxth	r3, r3
 801008c:	4313      	orrs	r3, r2
 801008e:	847b      	strh	r3, [r7, #34]	; 0x22
				AccelY_mg= (int32_t)((float)AccelY * LSM6DSOX_ACC_SENSITIVITY_FS_4G);
 8010090:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8010094:	ee07 3a90 	vmov	s15, r3
 8010098:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801009c:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 80101c8 <acquire_and_process_data+0x2fc>
 80100a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80100a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80100a8:	ee17 3a90 	vmov	r3, s15
 80100ac:	61fb      	str	r3, [r7, #28]
				AccelZ= ((int16_t)AccelZ1 <<8 ) | AccelZ2;
 80100ae:	4b44      	ldr	r3, [pc, #272]	; (80101c0 <acquire_and_process_data+0x2f4>)
 80100b0:	781b      	ldrb	r3, [r3, #0]
 80100b2:	021b      	lsls	r3, r3, #8
 80100b4:	b21a      	sxth	r2, r3
 80100b6:	4b43      	ldr	r3, [pc, #268]	; (80101c4 <acquire_and_process_data+0x2f8>)
 80100b8:	781b      	ldrb	r3, [r3, #0]
 80100ba:	b21b      	sxth	r3, r3
 80100bc:	4313      	orrs	r3, r2
 80100be:	837b      	strh	r3, [r7, #26]
				AccelZ_mg= (int32_t)((float)AccelZ * LSM6DSOX_ACC_SENSITIVITY_FS_4G);
 80100c0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80100c4:	ee07 3a90 	vmov	s15, r3
 80100c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80100cc:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 80101c8 <acquire_and_process_data+0x2fc>
 80100d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80100d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80100d8:	ee17 3a90 	vmov	r3, s15
 80100dc:	617b      	str	r3, [r7, #20]

				float AccelX_inG = AccelX_mg * 0.001f; //Calculation to get measurements in the unit mG and with /1000 to G
 80100de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100e0:	ee07 3a90 	vmov	s15, r3
 80100e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80100e8:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80101cc <acquire_and_process_data+0x300>
 80100ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80100f0:	edc7 7a04 	vstr	s15, [r7, #16]
				float AccelY_inG = AccelY_mg * 0.001f;
 80100f4:	69fb      	ldr	r3, [r7, #28]
 80100f6:	ee07 3a90 	vmov	s15, r3
 80100fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80100fe:	ed9f 7a33 	vldr	s14, [pc, #204]	; 80101cc <acquire_and_process_data+0x300>
 8010102:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010106:	edc7 7a03 	vstr	s15, [r7, #12]
				float AccelZ_inG = AccelZ_mg * 0.001f;
 801010a:	697b      	ldr	r3, [r7, #20]
 801010c:	ee07 3a90 	vmov	s15, r3
 8010110:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010114:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 80101cc <acquire_and_process_data+0x300>
 8010118:	ee67 7a87 	vmul.f32	s15, s15, s14
 801011c:	edc7 7a02 	vstr	s15, [r7, #8]


				bufVar[bufVar_len - 1] = sqrt(AccelX_inG * AccelX_inG + AccelY_inG * AccelY_inG + AccelZ_inG * AccelZ_inG);
 8010120:	edd7 7a04 	vldr	s15, [r7, #16]
 8010124:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8010128:	edd7 7a03 	vldr	s15, [r7, #12]
 801012c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8010130:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010134:	edd7 7a02 	vldr	s15, [r7, #8]
 8010138:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801013c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010140:	ee17 0a90 	vmov	r0, s15
 8010144:	f7f0 fa18 	bl	8000578 <__aeabi_f2d>
 8010148:	4602      	mov	r2, r0
 801014a:	460b      	mov	r3, r1
 801014c:	ec43 2b10 	vmov	d0, r2, r3
 8010150:	f003 fb14 	bl	801377c <sqrt>
 8010154:	ec51 0b10 	vmov	r0, r1, d0
 8010158:	4b14      	ldr	r3, [pc, #80]	; (80101ac <acquire_and_process_data+0x2e0>)
 801015a:	681b      	ldr	r3, [r3, #0]
 801015c:	1e5c      	subs	r4, r3, #1
 801015e:	f7f0 fd13 	bl	8000b88 <__aeabi_d2f>
 8010162:	4602      	mov	r2, r0
 8010164:	491a      	ldr	r1, [pc, #104]	; (80101d0 <acquire_and_process_data+0x304>)
 8010166:	00a3      	lsls	r3, r4, #2
 8010168:	440b      	add	r3, r1
 801016a:	601a      	str	r2, [r3, #0]
	while(bufVar_len < 26) {
 801016c:	4b0f      	ldr	r3, [pc, #60]	; (80101ac <acquire_and_process_data+0x2e0>)
 801016e:	681b      	ldr	r3, [r3, #0]
 8010170:	2b19      	cmp	r3, #25
 8010172:	f77f aeb0 	ble.w	800fed6 <acquire_and_process_data+0xa>
			}
		}

		if(bufVar_len == 26) {
 8010176:	4b0d      	ldr	r3, [pc, #52]	; (80101ac <acquire_and_process_data+0x2e0>)
 8010178:	681b      	ldr	r3, [r3, #0]
 801017a:	2b1a      	cmp	r3, #26
 801017c:	d17a      	bne.n	8010274 <acquire_and_process_data+0x3a8>
			bufVar_len = 0;
 801017e:	4b0b      	ldr	r3, [pc, #44]	; (80101ac <acquire_and_process_data+0x2e0>)
 8010180:	2200      	movs	r2, #0
 8010182:	601a      	str	r2, [r3, #0]
			float summ = 0;
 8010184:	f04f 0300 	mov.w	r3, #0
 8010188:	647b      	str	r3, [r7, #68]	; 0x44
			float sumOfSquares = 0;
 801018a:	f04f 0300 	mov.w	r3, #0
 801018e:	643b      	str	r3, [r7, #64]	; 0x40
			for(int i = 0; i < 26; i++) {
 8010190:	2300      	movs	r3, #0
 8010192:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010194:	e041      	b.n	801021a <acquire_and_process_data+0x34e>
 8010196:	bf00      	nop
 8010198:	48001000 	.word	0x48001000
 801019c:	20002c10 	.word	0x20002c10
 80101a0:	20002c0c 	.word	0x20002c0c
 80101a4:	20000c40 	.word	0x20000c40
 80101a8:	20002c13 	.word	0x20002c13
 80101ac:	20002c08 	.word	0x20002c08
 80101b0:	20002c14 	.word	0x20002c14
 80101b4:	20002c17 	.word	0x20002c17
 80101b8:	20002c15 	.word	0x20002c15
 80101bc:	20002c18 	.word	0x20002c18
 80101c0:	20002c16 	.word	0x20002c16
 80101c4:	20002c19 	.word	0x20002c19
 80101c8:	3df9db23 	.word	0x3df9db23
 80101cc:	3a83126f 	.word	0x3a83126f
 80101d0:	20002ba0 	.word	0x20002ba0
				summ += bufVar[i];
 80101d4:	4a2a      	ldr	r2, [pc, #168]	; (8010280 <acquire_and_process_data+0x3b4>)
 80101d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80101d8:	009b      	lsls	r3, r3, #2
 80101da:	4413      	add	r3, r2
 80101dc:	edd3 7a00 	vldr	s15, [r3]
 80101e0:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80101e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80101e8:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
				sumOfSquares += bufVar[i] * bufVar[i];
 80101ec:	4a24      	ldr	r2, [pc, #144]	; (8010280 <acquire_and_process_data+0x3b4>)
 80101ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80101f0:	009b      	lsls	r3, r3, #2
 80101f2:	4413      	add	r3, r2
 80101f4:	ed93 7a00 	vldr	s14, [r3]
 80101f8:	4a21      	ldr	r2, [pc, #132]	; (8010280 <acquire_and_process_data+0x3b4>)
 80101fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80101fc:	009b      	lsls	r3, r3, #2
 80101fe:	4413      	add	r3, r2
 8010200:	edd3 7a00 	vldr	s15, [r3]
 8010204:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010208:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 801020c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010210:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
			for(int i = 0; i < 26; i++) {
 8010214:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010216:	3301      	adds	r3, #1
 8010218:	63fb      	str	r3, [r7, #60]	; 0x3c
 801021a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801021c:	2b19      	cmp	r3, #25
 801021e:	ddd9      	ble.n	80101d4 <acquire_and_process_data+0x308>
			}
			float mean = summ / 26;
 8010220:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8010224:	eef3 6a0a 	vmov.f32	s13, #58	; 0x41d00000  26.0
 8010228:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801022c:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
			float meanSquared = mean * mean;
 8010230:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8010234:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8010238:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

			float randomForestInputValue = (sumOfSquares / 26) - meanSquared;
 801023c:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8010240:	eef3 6a0a 	vmov.f32	s13, #58	; 0x41d00000  26.0
 8010244:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8010248:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 801024c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010250:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

			//snprintf(SendBuffer,BUFSIZE,"Vrednost: %f \r\n", randomForestInputValue);
			//CDC_Transmit_FS(SendBuffer,strlen(SendBuffer));

			for (int idx=0; idx < AI_RANDOMFOREST_IN_NUM; idx++ )
 8010254:	2300      	movs	r3, #0
 8010256:	63bb      	str	r3, [r7, #56]	; 0x38
 8010258:	e009      	b.n	801026e <acquire_and_process_data+0x3a2>
			  {
			      data[idx][0] = randomForestInputValue;
 801025a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801025c:	009b      	lsls	r3, r3, #2
 801025e:	687a      	ldr	r2, [r7, #4]
 8010260:	4413      	add	r3, r2
 8010262:	681b      	ldr	r3, [r3, #0]
 8010264:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010266:	601a      	str	r2, [r3, #0]
			for (int idx=0; idx < AI_RANDOMFOREST_IN_NUM; idx++ )
 8010268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801026a:	3301      	adds	r3, #1
 801026c:	63bb      	str	r3, [r7, #56]	; 0x38
 801026e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010270:	2b00      	cmp	r3, #0
 8010272:	ddf2      	ble.n	801025a <acquire_and_process_data+0x38e>
			  }
		}
  return 0;
 8010274:	2300      	movs	r3, #0
}
 8010276:	4618      	mov	r0, r3
 8010278:	374c      	adds	r7, #76	; 0x4c
 801027a:	46bd      	mov	sp, r7
 801027c:	bd90      	pop	{r4, r7, pc}
 801027e:	bf00      	nop
 8010280:	20002ba0 	.word	0x20002ba0

08010284 <post_process>:

int post_process(ai_i8* data[])
{
 8010284:	b580      	push	{r7, lr}
 8010286:	b084      	sub	sp, #16
 8010288:	af02      	add	r7, sp, #8
 801028a:	6078      	str	r0, [r7, #4]
	snprintf(SendBuffer,BUFSIZE,"Razred: %lu, %s \r\n", (int32_t) *data[0], classes[(int) ((int32_t) *data[0])]);///////snprintf(SendBuffer,BUFSIZE,"Razred: %lu, %d, %d, %d, %d \r\n", (int32_t) *data[0], data[0][0], data[0][1], data[0][2], data[0][3]);
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	681b      	ldr	r3, [r3, #0]
 8010290:	f993 3000 	ldrsb.w	r3, [r3]
 8010294:	4619      	mov	r1, r3
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	681b      	ldr	r3, [r3, #0]
 801029a:	f993 3000 	ldrsb.w	r3, [r3]
 801029e:	461a      	mov	r2, r3
 80102a0:	4b24      	ldr	r3, [pc, #144]	; (8010334 <post_process+0xb0>)
 80102a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80102a6:	9300      	str	r3, [sp, #0]
 80102a8:	460b      	mov	r3, r1
 80102aa:	4a23      	ldr	r2, [pc, #140]	; (8010338 <post_process+0xb4>)
 80102ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80102b0:	4822      	ldr	r0, [pc, #136]	; (801033c <post_process+0xb8>)
 80102b2:	f002 f9fd 	bl	80126b0 <sniprintf>
	CDC_Transmit_FS(SendBuffer,strlen(SendBuffer));
 80102b6:	4821      	ldr	r0, [pc, #132]	; (801033c <post_process+0xb8>)
 80102b8:	f7ef ffa2 	bl	8000200 <strlen>
 80102bc:	4603      	mov	r3, r0
 80102be:	4619      	mov	r1, r3
 80102c0:	481e      	ldr	r0, [pc, #120]	; (801033c <post_process+0xb8>)
 80102c2:	f7fe ffc9 	bl	800f258 <CDC_Transmit_FS>

	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, GPIO_PIN_RESET);
 80102c6:	2200      	movs	r2, #0
 80102c8:	2104      	movs	r1, #4
 80102ca:	481d      	ldr	r0, [pc, #116]	; (8010340 <post_process+0xbc>)
 80102cc:	f7f3 fe64 	bl	8003f98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET);
 80102d0:	2201      	movs	r2, #1
 80102d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80102d6:	481b      	ldr	r0, [pc, #108]	; (8010344 <post_process+0xc0>)
 80102d8:	f7f3 fe5e 	bl	8003f98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 80102dc:	2200      	movs	r2, #0
 80102de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80102e2:	4819      	ldr	r0, [pc, #100]	; (8010348 <post_process+0xc4>)
 80102e4:	f7f3 fe58 	bl	8003f98 <HAL_GPIO_WritePin>

	switch((int32_t) *data[0])
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	681b      	ldr	r3, [r3, #0]
 80102ec:	f993 3000 	ldrsb.w	r3, [r3]
 80102f0:	2b02      	cmp	r3, #2
 80102f2:	d013      	beq.n	801031c <post_process+0x98>
 80102f4:	2b02      	cmp	r3, #2
 80102f6:	dc18      	bgt.n	801032a <post_process+0xa6>
 80102f8:	2b00      	cmp	r3, #0
 80102fa:	d002      	beq.n	8010302 <post_process+0x7e>
 80102fc:	2b01      	cmp	r3, #1
 80102fe:	d006      	beq.n	801030e <post_process+0x8a>
 8010300:	e013      	b.n	801032a <post_process+0xa6>
	    {
	        case 0:
	        	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, GPIO_PIN_SET);
 8010302:	2201      	movs	r2, #1
 8010304:	2104      	movs	r1, #4
 8010306:	480e      	ldr	r0, [pc, #56]	; (8010340 <post_process+0xbc>)
 8010308:	f7f3 fe46 	bl	8003f98 <HAL_GPIO_WritePin>
	            break;
 801030c:	e00d      	b.n	801032a <post_process+0xa6>
	        case 1:
	        	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_RESET);
 801030e:	2200      	movs	r2, #0
 8010310:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8010314:	480b      	ldr	r0, [pc, #44]	; (8010344 <post_process+0xc0>)
 8010316:	f7f3 fe3f 	bl	8003f98 <HAL_GPIO_WritePin>
	        	break;
 801031a:	e006      	b.n	801032a <post_process+0xa6>
	        case 2:
	        	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 801031c:	2201      	movs	r2, #1
 801031e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8010322:	4809      	ldr	r0, [pc, #36]	; (8010348 <post_process+0xc4>)
 8010324:	f7f3 fe38 	bl	8003f98 <HAL_GPIO_WritePin>
	        	break;
 8010328:	bf00      	nop
	    }
  return 0;
 801032a:	2300      	movs	r3, #0
}
 801032c:	4618      	mov	r0, r3
 801032e:	3708      	adds	r7, #8
 8010330:	46bd      	mov	sp, r7
 8010332:	bd80      	pop	{r7, pc}
 8010334:	20000190 	.word	0x20000190
 8010338:	08013acc 	.word	0x08013acc
 801033c:	20002aa0 	.word	0x20002aa0
 8010340:	48001400 	.word	0x48001400
 8010344:	48001800 	.word	0x48001800
 8010348:	48000400 	.word	0x48000400

0801034c <MX_X_CUBE_AI_Init>:
/* USER CODE END 2 */

/* Entry points --------------------------------------------------------------*/

void MX_X_CUBE_AI_Init(void)
{
 801034c:	b580      	push	{r7, lr}
 801034e:	b082      	sub	sp, #8
 8010350:	af02      	add	r7, sp, #8
    /* USER CODE BEGIN 5 */
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 8010352:	2200      	movs	r2, #0
 8010354:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8010358:	4826      	ldr	r0, [pc, #152]	; (80103f4 <MX_X_CUBE_AI_Init+0xa8>)
 801035a:	f7f3 fe1d 	bl	8003f98 <HAL_GPIO_WritePin>
	outdata[0] = 0x0f | 0x80 ; // read whoami
 801035e:	4b26      	ldr	r3, [pc, #152]	; (80103f8 <MX_X_CUBE_AI_Init+0xac>)
 8010360:	228f      	movs	r2, #143	; 0x8f
 8010362:	701a      	strb	r2, [r3, #0]
	HAL_SPI_TransmitReceive(&hspi1, &outdata, &indata, 2, HAL_MAX_DELAY);
 8010364:	f04f 33ff 	mov.w	r3, #4294967295
 8010368:	9300      	str	r3, [sp, #0]
 801036a:	2302      	movs	r3, #2
 801036c:	4a23      	ldr	r2, [pc, #140]	; (80103fc <MX_X_CUBE_AI_Init+0xb0>)
 801036e:	4922      	ldr	r1, [pc, #136]	; (80103f8 <MX_X_CUBE_AI_Init+0xac>)
 8010370:	4823      	ldr	r0, [pc, #140]	; (8010400 <MX_X_CUBE_AI_Init+0xb4>)
 8010372:	f7f9 fe6f 	bl	800a054 <HAL_SPI_TransmitReceive>
	lis_id = indata[1];
 8010376:	4b21      	ldr	r3, [pc, #132]	; (80103fc <MX_X_CUBE_AI_Init+0xb0>)
 8010378:	785a      	ldrb	r2, [r3, #1]
 801037a:	4b22      	ldr	r3, [pc, #136]	; (8010404 <MX_X_CUBE_AI_Init+0xb8>)
 801037c:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
 801037e:	2201      	movs	r2, #1
 8010380:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8010384:	481b      	ldr	r0, [pc, #108]	; (80103f4 <MX_X_CUBE_AI_Init+0xa8>)
 8010386:	f7f3 fe07 	bl	8003f98 <HAL_GPIO_WritePin>

	snprintf(SendBuffer,BUFSIZE,"[ID:%02x] \r\n",lis_id);
 801038a:	4b1e      	ldr	r3, [pc, #120]	; (8010404 <MX_X_CUBE_AI_Init+0xb8>)
 801038c:	781b      	ldrb	r3, [r3, #0]
 801038e:	4a1e      	ldr	r2, [pc, #120]	; (8010408 <MX_X_CUBE_AI_Init+0xbc>)
 8010390:	f44f 7180 	mov.w	r1, #256	; 0x100
 8010394:	481d      	ldr	r0, [pc, #116]	; (801040c <MX_X_CUBE_AI_Init+0xc0>)
 8010396:	f002 f98b 	bl	80126b0 <sniprintf>
	CDC_Transmit_FS(SendBuffer,strlen(SendBuffer));
 801039a:	481c      	ldr	r0, [pc, #112]	; (801040c <MX_X_CUBE_AI_Init+0xc0>)
 801039c:	f7ef ff30 	bl	8000200 <strlen>
 80103a0:	4603      	mov	r3, r0
 80103a2:	4619      	mov	r1, r3
 80103a4:	4819      	ldr	r0, [pc, #100]	; (801040c <MX_X_CUBE_AI_Init+0xc0>)
 80103a6:	f7fe ff57 	bl	800f258 <CDC_Transmit_FS>

	// sensor setup (activation and setting frequency)
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 80103aa:	2200      	movs	r2, #0
 80103ac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80103b0:	4810      	ldr	r0, [pc, #64]	; (80103f4 <MX_X_CUBE_AI_Init+0xa8>)
 80103b2:	f7f3 fdf1 	bl	8003f98 <HAL_GPIO_WritePin>

	outdata[0] = 0x10 ; // register used for setting up the accelerometer
 80103b6:	4b10      	ldr	r3, [pc, #64]	; (80103f8 <MX_X_CUBE_AI_Init+0xac>)
 80103b8:	2210      	movs	r2, #16
 80103ba:	701a      	strb	r2, [r3, #0]
	outdata[1] = 0x28 ; // set frequency to 26Hz and FS to 4g
 80103bc:	4b0e      	ldr	r3, [pc, #56]	; (80103f8 <MX_X_CUBE_AI_Init+0xac>)
 80103be:	2228      	movs	r2, #40	; 0x28
 80103c0:	705a      	strb	r2, [r3, #1]
	HAL_SPI_TransmitReceive(&hspi1, &outdata, &indata, 2, HAL_MAX_DELAY);
 80103c2:	f04f 33ff 	mov.w	r3, #4294967295
 80103c6:	9300      	str	r3, [sp, #0]
 80103c8:	2302      	movs	r3, #2
 80103ca:	4a0c      	ldr	r2, [pc, #48]	; (80103fc <MX_X_CUBE_AI_Init+0xb0>)
 80103cc:	490a      	ldr	r1, [pc, #40]	; (80103f8 <MX_X_CUBE_AI_Init+0xac>)
 80103ce:	480c      	ldr	r0, [pc, #48]	; (8010400 <MX_X_CUBE_AI_Init+0xb4>)
 80103d0:	f7f9 fe40 	bl	800a054 <HAL_SPI_TransmitReceive>

	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
 80103d4:	2201      	movs	r2, #1
 80103d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80103da:	4806      	ldr	r0, [pc, #24]	; (80103f4 <MX_X_CUBE_AI_Init+0xa8>)
 80103dc:	f7f3 fddc 	bl	8003f98 <HAL_GPIO_WritePin>


  printf("\r\nTEMPLATE - initialization\r\n");
 80103e0:	480b      	ldr	r0, [pc, #44]	; (8010410 <MX_X_CUBE_AI_Init+0xc4>)
 80103e2:	f002 f94d 	bl	8012680 <puts>

  ai_boostrap(data_activations0);
 80103e6:	480b      	ldr	r0, [pc, #44]	; (8010414 <MX_X_CUBE_AI_Init+0xc8>)
 80103e8:	f7ff fce2 	bl	800fdb0 <ai_boostrap>
    /* USER CODE END 5 */
}
 80103ec:	bf00      	nop
 80103ee:	46bd      	mov	sp, r7
 80103f0:	bd80      	pop	{r7, pc}
 80103f2:	bf00      	nop
 80103f4:	48001000 	.word	0x48001000
 80103f8:	20002c10 	.word	0x20002c10
 80103fc:	20002c0c 	.word	0x20002c0c
 8010400:	20000c40 	.word	0x20000c40
 8010404:	20002c12 	.word	0x20002c12
 8010408:	08013ae0 	.word	0x08013ae0
 801040c:	20002aa0 	.word	0x20002aa0
 8010410:	08013af0 	.word	0x08013af0
 8010414:	2000019c 	.word	0x2000019c

08010418 <MX_X_CUBE_AI_Process>:

void MX_X_CUBE_AI_Process(void)
{
 8010418:	b580      	push	{r7, lr}
 801041a:	b082      	sub	sp, #8
 801041c:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 6 */
  int res = -1;
 801041e:	f04f 33ff 	mov.w	r3, #4294967295
 8010422:	607b      	str	r3, [r7, #4]

  printf("TEMPLATE - run - main loop\r\n");
 8010424:	4816      	ldr	r0, [pc, #88]	; (8010480 <MX_X_CUBE_AI_Process+0x68>)
 8010426:	f002 f92b 	bl	8012680 <puts>

  if (randomforest) {
 801042a:	4b16      	ldr	r3, [pc, #88]	; (8010484 <MX_X_CUBE_AI_Process+0x6c>)
 801042c:	681b      	ldr	r3, [r3, #0]
 801042e:	2b00      	cmp	r3, #0
 8010430:	d013      	beq.n	801045a <MX_X_CUBE_AI_Process+0x42>

    do {
      /* 1 - acquire and pre-process input data */
      res = acquire_and_process_data(data_ins);
 8010432:	4815      	ldr	r0, [pc, #84]	; (8010488 <MX_X_CUBE_AI_Process+0x70>)
 8010434:	f7ff fd4a 	bl	800fecc <acquire_and_process_data>
 8010438:	6078      	str	r0, [r7, #4]
      /* 2 - process the data - call inference engine */
      if (res == 0)
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	2b00      	cmp	r3, #0
 801043e:	d102      	bne.n	8010446 <MX_X_CUBE_AI_Process+0x2e>
        res = ai_run();
 8010440:	f7ff fd1a 	bl	800fe78 <ai_run>
 8010444:	6078      	str	r0, [r7, #4]
      /* 3- post-process the predictions */
      if (res == 0)
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	2b00      	cmp	r3, #0
 801044a:	d103      	bne.n	8010454 <MX_X_CUBE_AI_Process+0x3c>
        res = post_process(data_outs);
 801044c:	480f      	ldr	r0, [pc, #60]	; (801048c <MX_X_CUBE_AI_Process+0x74>)
 801044e:	f7ff ff19 	bl	8010284 <post_process>
 8010452:	6078      	str	r0, [r7, #4]
    } while (res==0);
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	2b00      	cmp	r3, #0
 8010458:	d0eb      	beq.n	8010432 <MX_X_CUBE_AI_Process+0x1a>
  }

  if (res) {
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	2b00      	cmp	r3, #0
 801045e:	d00a      	beq.n	8010476 <MX_X_CUBE_AI_Process+0x5e>
    ai_error err = {AI_ERROR_INVALID_STATE, AI_ERROR_CODE_NETWORK};
 8010460:	2311      	movs	r3, #17
 8010462:	703b      	strb	r3, [r7, #0]
 8010464:	683b      	ldr	r3, [r7, #0]
 8010466:	2210      	movs	r2, #16
 8010468:	f362 231f 	bfi	r3, r2, #8, #24
 801046c:	603b      	str	r3, [r7, #0]
    ai_log_err(err, "Process has FAILED");
 801046e:	4908      	ldr	r1, [pc, #32]	; (8010490 <MX_X_CUBE_AI_Process+0x78>)
 8010470:	6838      	ldr	r0, [r7, #0]
 8010472:	f7ff fc7d 	bl	800fd70 <ai_log_err>
  }
    /* USER CODE END 6 */
}
 8010476:	bf00      	nop
 8010478:	3708      	adds	r7, #8
 801047a:	46bd      	mov	sp, r7
 801047c:	bd80      	pop	{r7, pc}
 801047e:	bf00      	nop
 8010480:	08013b10 	.word	0x08013b10
 8010484:	20002c68 	.word	0x20002c68
 8010488:	20002c1c 	.word	0x20002c1c
 801048c:	20002c20 	.word	0x20002c20
 8010490:	08013b2c 	.word	0x08013b2c

08010494 <randomforest_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool randomforest_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 8010494:	b580      	push	{r7, lr}
 8010496:	b082      	sub	sp, #8
 8010498:	af00      	add	r7, sp, #0
 801049a:	6078      	str	r0, [r7, #4]
 801049c:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_randomforest_activations_map, 1, params)) {
 801049e:	683a      	ldr	r2, [r7, #0]
 80104a0:	2101      	movs	r1, #1
 80104a2:	481c      	ldr	r0, [pc, #112]	; (8010514 <randomforest_configure_activations+0x80>)
 80104a4:	f000 fb3a 	bl	8010b1c <ai_platform_get_activations_map>
 80104a8:	4603      	mov	r3, r0
 80104aa:	2b00      	cmp	r3, #0
 80104ac:	d027      	beq.n	80104fe <randomforest_configure_activations+0x6a>
    /* Updating activations (byte) offsets */
    
    float_input_output_array.data = AI_PTR(g_randomforest_activations_map[0] + 20);
 80104ae:	4b19      	ldr	r3, [pc, #100]	; (8010514 <randomforest_configure_activations+0x80>)
 80104b0:	681b      	ldr	r3, [r3, #0]
 80104b2:	3314      	adds	r3, #20
 80104b4:	4a18      	ldr	r2, [pc, #96]	; (8010518 <randomforest_configure_activations+0x84>)
 80104b6:	6093      	str	r3, [r2, #8]
    float_input_output_array.data_start = AI_PTR(g_randomforest_activations_map[0] + 20);
 80104b8:	4b16      	ldr	r3, [pc, #88]	; (8010514 <randomforest_configure_activations+0x80>)
 80104ba:	681b      	ldr	r3, [r3, #0]
 80104bc:	3314      	adds	r3, #20
 80104be:	4a16      	ldr	r2, [pc, #88]	; (8010518 <randomforest_configure_activations+0x84>)
 80104c0:	60d3      	str	r3, [r2, #12]
    
    label_output0_array.data = AI_PTR(g_randomforest_activations_map[0] + 24);
 80104c2:	4b14      	ldr	r3, [pc, #80]	; (8010514 <randomforest_configure_activations+0x80>)
 80104c4:	681b      	ldr	r3, [r3, #0]
 80104c6:	3318      	adds	r3, #24
 80104c8:	4a14      	ldr	r2, [pc, #80]	; (801051c <randomforest_configure_activations+0x88>)
 80104ca:	6093      	str	r3, [r2, #8]
    label_output0_array.data_start = AI_PTR(g_randomforest_activations_map[0] + 24);
 80104cc:	4b11      	ldr	r3, [pc, #68]	; (8010514 <randomforest_configure_activations+0x80>)
 80104ce:	681b      	ldr	r3, [r3, #0]
 80104d0:	3318      	adds	r3, #24
 80104d2:	4a12      	ldr	r2, [pc, #72]	; (801051c <randomforest_configure_activations+0x88>)
 80104d4:	60d3      	str	r3, [r2, #12]
    
    label_output1_array.data = AI_PTR(g_randomforest_activations_map[0] + 28);
 80104d6:	4b0f      	ldr	r3, [pc, #60]	; (8010514 <randomforest_configure_activations+0x80>)
 80104d8:	681b      	ldr	r3, [r3, #0]
 80104da:	331c      	adds	r3, #28
 80104dc:	4a10      	ldr	r2, [pc, #64]	; (8010520 <randomforest_configure_activations+0x8c>)
 80104de:	6093      	str	r3, [r2, #8]
    label_output1_array.data_start = AI_PTR(g_randomforest_activations_map[0] + 28);
 80104e0:	4b0c      	ldr	r3, [pc, #48]	; (8010514 <randomforest_configure_activations+0x80>)
 80104e2:	681b      	ldr	r3, [r3, #0]
 80104e4:	331c      	adds	r3, #28
 80104e6:	4a0e      	ldr	r2, [pc, #56]	; (8010520 <randomforest_configure_activations+0x8c>)
 80104e8:	60d3      	str	r3, [r2, #12]
    
    output_probability_output_array.data = AI_PTR(g_randomforest_activations_map[0] + 0);
 80104ea:	4b0a      	ldr	r3, [pc, #40]	; (8010514 <randomforest_configure_activations+0x80>)
 80104ec:	681b      	ldr	r3, [r3, #0]
 80104ee:	4a0d      	ldr	r2, [pc, #52]	; (8010524 <randomforest_configure_activations+0x90>)
 80104f0:	6093      	str	r3, [r2, #8]
    output_probability_output_array.data_start = AI_PTR(g_randomforest_activations_map[0] + 0);
 80104f2:	4b08      	ldr	r3, [pc, #32]	; (8010514 <randomforest_configure_activations+0x80>)
 80104f4:	681b      	ldr	r3, [r3, #0]
 80104f6:	4a0b      	ldr	r2, [pc, #44]	; (8010524 <randomforest_configure_activations+0x90>)
 80104f8:	60d3      	str	r3, [r2, #12]
    
    return true;
 80104fa:	2301      	movs	r3, #1
 80104fc:	e005      	b.n	801050a <randomforest_configure_activations+0x76>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 80104fe:	2213      	movs	r2, #19
 8010500:	2130      	movs	r1, #48	; 0x30
 8010502:	6878      	ldr	r0, [r7, #4]
 8010504:	f000 fbee 	bl	8010ce4 <ai_platform_network_set_error>
  return false;
 8010508:	2300      	movs	r3, #0
}
 801050a:	4618      	mov	r0, r3
 801050c:	3708      	adds	r7, #8
 801050e:	46bd      	mov	sp, r7
 8010510:	bd80      	pop	{r7, pc}
 8010512:	bf00      	nop
 8010514:	20002c74 	.word	0x20002c74
 8010518:	20000290 	.word	0x20000290
 801051c:	200001a0 	.word	0x200001a0
 8010520:	200001b0 	.word	0x200001b0
 8010524:	200001d0 	.word	0x200001d0

08010528 <randomforest_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool randomforest_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 8010528:	b580      	push	{r7, lr}
 801052a:	b082      	sub	sp, #8
 801052c:	af00      	add	r7, sp, #0
 801052e:	6078      	str	r0, [r7, #4]
 8010530:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_randomforest_weights_map, 1, params)) {
 8010532:	683a      	ldr	r2, [r7, #0]
 8010534:	2101      	movs	r1, #1
 8010536:	4879      	ldr	r0, [pc, #484]	; (801071c <randomforest_configure_weights+0x1f4>)
 8010538:	f000 fa9c 	bl	8010a74 <ai_platform_get_weights_map>
 801053c:	4603      	mov	r3, r0
 801053e:	2b00      	cmp	r3, #0
 8010540:	f000 80e2 	beq.w	8010708 <randomforest_configure_weights+0x1e0>
    /* Updating weights (byte) offsets */
    
    label_class_nodeids_array.format |= AI_FMT_FLAG_CONST;
 8010544:	4b76      	ldr	r3, [pc, #472]	; (8010720 <randomforest_configure_weights+0x1f8>)
 8010546:	681b      	ldr	r3, [r3, #0]
 8010548:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801054c:	4a74      	ldr	r2, [pc, #464]	; (8010720 <randomforest_configure_weights+0x1f8>)
 801054e:	6013      	str	r3, [r2, #0]
    label_class_nodeids_array.data = AI_PTR(g_randomforest_weights_map[0] + 0);
 8010550:	4b72      	ldr	r3, [pc, #456]	; (801071c <randomforest_configure_weights+0x1f4>)
 8010552:	681b      	ldr	r3, [r3, #0]
 8010554:	4a72      	ldr	r2, [pc, #456]	; (8010720 <randomforest_configure_weights+0x1f8>)
 8010556:	6093      	str	r3, [r2, #8]
    label_class_nodeids_array.data_start = AI_PTR(g_randomforest_weights_map[0] + 0);
 8010558:	4b70      	ldr	r3, [pc, #448]	; (801071c <randomforest_configure_weights+0x1f4>)
 801055a:	681b      	ldr	r3, [r3, #0]
 801055c:	4a70      	ldr	r2, [pc, #448]	; (8010720 <randomforest_configure_weights+0x1f8>)
 801055e:	60d3      	str	r3, [r2, #12]
    
    label_branch_mode_array.format |= AI_FMT_FLAG_CONST;
 8010560:	4b70      	ldr	r3, [pc, #448]	; (8010724 <randomforest_configure_weights+0x1fc>)
 8010562:	681b      	ldr	r3, [r3, #0]
 8010564:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010568:	4a6e      	ldr	r2, [pc, #440]	; (8010724 <randomforest_configure_weights+0x1fc>)
 801056a:	6013      	str	r3, [r2, #0]
    label_branch_mode_array.data = AI_PTR(g_randomforest_weights_map[0] + 180);
 801056c:	4b6b      	ldr	r3, [pc, #428]	; (801071c <randomforest_configure_weights+0x1f4>)
 801056e:	681b      	ldr	r3, [r3, #0]
 8010570:	33b4      	adds	r3, #180	; 0xb4
 8010572:	4a6c      	ldr	r2, [pc, #432]	; (8010724 <randomforest_configure_weights+0x1fc>)
 8010574:	6093      	str	r3, [r2, #8]
    label_branch_mode_array.data_start = AI_PTR(g_randomforest_weights_map[0] + 180);
 8010576:	4b69      	ldr	r3, [pc, #420]	; (801071c <randomforest_configure_weights+0x1f4>)
 8010578:	681b      	ldr	r3, [r3, #0]
 801057a:	33b4      	adds	r3, #180	; 0xb4
 801057c:	4a69      	ldr	r2, [pc, #420]	; (8010724 <randomforest_configure_weights+0x1fc>)
 801057e:	60d3      	str	r3, [r2, #12]
    
    label_nb_class_by_estimator_array.format |= AI_FMT_FLAG_CONST;
 8010580:	4b69      	ldr	r3, [pc, #420]	; (8010728 <randomforest_configure_weights+0x200>)
 8010582:	681b      	ldr	r3, [r3, #0]
 8010584:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010588:	4a67      	ldr	r2, [pc, #412]	; (8010728 <randomforest_configure_weights+0x200>)
 801058a:	6013      	str	r3, [r2, #0]
    label_nb_class_by_estimator_array.data = AI_PTR(g_randomforest_weights_map[0] + 188);
 801058c:	4b63      	ldr	r3, [pc, #396]	; (801071c <randomforest_configure_weights+0x1f4>)
 801058e:	681b      	ldr	r3, [r3, #0]
 8010590:	33bc      	adds	r3, #188	; 0xbc
 8010592:	4a65      	ldr	r2, [pc, #404]	; (8010728 <randomforest_configure_weights+0x200>)
 8010594:	6093      	str	r3, [r2, #8]
    label_nb_class_by_estimator_array.data_start = AI_PTR(g_randomforest_weights_map[0] + 188);
 8010596:	4b61      	ldr	r3, [pc, #388]	; (801071c <randomforest_configure_weights+0x1f4>)
 8010598:	681b      	ldr	r3, [r3, #0]
 801059a:	33bc      	adds	r3, #188	; 0xbc
 801059c:	4a62      	ldr	r2, [pc, #392]	; (8010728 <randomforest_configure_weights+0x200>)
 801059e:	60d3      	str	r3, [r2, #12]
    
    label_nodes_featureids_array.format |= AI_FMT_FLAG_CONST;
 80105a0:	4b62      	ldr	r3, [pc, #392]	; (801072c <randomforest_configure_weights+0x204>)
 80105a2:	681b      	ldr	r3, [r3, #0]
 80105a4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80105a8:	4a60      	ldr	r2, [pc, #384]	; (801072c <randomforest_configure_weights+0x204>)
 80105aa:	6013      	str	r3, [r2, #0]
    label_nodes_featureids_array.data = AI_PTR(g_randomforest_weights_map[0] + 200);
 80105ac:	4b5b      	ldr	r3, [pc, #364]	; (801071c <randomforest_configure_weights+0x1f4>)
 80105ae:	681b      	ldr	r3, [r3, #0]
 80105b0:	33c8      	adds	r3, #200	; 0xc8
 80105b2:	4a5e      	ldr	r2, [pc, #376]	; (801072c <randomforest_configure_weights+0x204>)
 80105b4:	6093      	str	r3, [r2, #8]
    label_nodes_featureids_array.data_start = AI_PTR(g_randomforest_weights_map[0] + 200);
 80105b6:	4b59      	ldr	r3, [pc, #356]	; (801071c <randomforest_configure_weights+0x1f4>)
 80105b8:	681b      	ldr	r3, [r3, #0]
 80105ba:	33c8      	adds	r3, #200	; 0xc8
 80105bc:	4a5b      	ldr	r2, [pc, #364]	; (801072c <randomforest_configure_weights+0x204>)
 80105be:	60d3      	str	r3, [r2, #12]
    
    label_classlabels_int64s_array.format |= AI_FMT_FLAG_CONST;
 80105c0:	4b5b      	ldr	r3, [pc, #364]	; (8010730 <randomforest_configure_weights+0x208>)
 80105c2:	681b      	ldr	r3, [r3, #0]
 80105c4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80105c8:	4a59      	ldr	r2, [pc, #356]	; (8010730 <randomforest_configure_weights+0x208>)
 80105ca:	6013      	str	r3, [r2, #0]
    label_classlabels_int64s_array.data = AI_PTR(g_randomforest_weights_map[0] + 256);
 80105cc:	4b53      	ldr	r3, [pc, #332]	; (801071c <randomforest_configure_weights+0x1f4>)
 80105ce:	681b      	ldr	r3, [r3, #0]
 80105d0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80105d4:	4a56      	ldr	r2, [pc, #344]	; (8010730 <randomforest_configure_weights+0x208>)
 80105d6:	6093      	str	r3, [r2, #8]
    label_classlabels_int64s_array.data_start = AI_PTR(g_randomforest_weights_map[0] + 256);
 80105d8:	4b50      	ldr	r3, [pc, #320]	; (801071c <randomforest_configure_weights+0x1f4>)
 80105da:	681b      	ldr	r3, [r3, #0]
 80105dc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80105e0:	4a53      	ldr	r2, [pc, #332]	; (8010730 <randomforest_configure_weights+0x208>)
 80105e2:	60d3      	str	r3, [r2, #12]
    
    label_nodes_values_array.format |= AI_FMT_FLAG_CONST;
 80105e4:	4b53      	ldr	r3, [pc, #332]	; (8010734 <randomforest_configure_weights+0x20c>)
 80105e6:	681b      	ldr	r3, [r3, #0]
 80105e8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80105ec:	4a51      	ldr	r2, [pc, #324]	; (8010734 <randomforest_configure_weights+0x20c>)
 80105ee:	6013      	str	r3, [r2, #0]
    label_nodes_values_array.data = AI_PTR(g_randomforest_weights_map[0] + 268);
 80105f0:	4b4a      	ldr	r3, [pc, #296]	; (801071c <randomforest_configure_weights+0x1f4>)
 80105f2:	681b      	ldr	r3, [r3, #0]
 80105f4:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80105f8:	4a4e      	ldr	r2, [pc, #312]	; (8010734 <randomforest_configure_weights+0x20c>)
 80105fa:	6093      	str	r3, [r2, #8]
    label_nodes_values_array.data_start = AI_PTR(g_randomforest_weights_map[0] + 268);
 80105fc:	4b47      	ldr	r3, [pc, #284]	; (801071c <randomforest_configure_weights+0x1f4>)
 80105fe:	681b      	ldr	r3, [r3, #0]
 8010600:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8010604:	4a4b      	ldr	r2, [pc, #300]	; (8010734 <randomforest_configure_weights+0x20c>)
 8010606:	60d3      	str	r3, [r2, #12]
    
    label_base_values_array.format |= AI_FMT_FLAG_CONST;
 8010608:	4b4b      	ldr	r3, [pc, #300]	; (8010738 <randomforest_configure_weights+0x210>)
 801060a:	681b      	ldr	r3, [r3, #0]
 801060c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010610:	4a49      	ldr	r2, [pc, #292]	; (8010738 <randomforest_configure_weights+0x210>)
 8010612:	6013      	str	r3, [r2, #0]
    label_base_values_array.data = AI_PTR(g_randomforest_weights_map[0] + 484);
 8010614:	4b41      	ldr	r3, [pc, #260]	; (801071c <randomforest_configure_weights+0x1f4>)
 8010616:	681b      	ldr	r3, [r3, #0]
 8010618:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801061c:	4a46      	ldr	r2, [pc, #280]	; (8010738 <randomforest_configure_weights+0x210>)
 801061e:	6093      	str	r3, [r2, #8]
    label_base_values_array.data_start = AI_PTR(g_randomforest_weights_map[0] + 484);
 8010620:	4b3e      	ldr	r3, [pc, #248]	; (801071c <randomforest_configure_weights+0x1f4>)
 8010622:	681b      	ldr	r3, [r3, #0]
 8010624:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8010628:	4a43      	ldr	r2, [pc, #268]	; (8010738 <randomforest_configure_weights+0x210>)
 801062a:	60d3      	str	r3, [r2, #12]
    
    label_nodes_truenodeids_array.format |= AI_FMT_FLAG_CONST;
 801062c:	4b43      	ldr	r3, [pc, #268]	; (801073c <randomforest_configure_weights+0x214>)
 801062e:	681b      	ldr	r3, [r3, #0]
 8010630:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010634:	4a41      	ldr	r2, [pc, #260]	; (801073c <randomforest_configure_weights+0x214>)
 8010636:	6013      	str	r3, [r2, #0]
    label_nodes_truenodeids_array.data = AI_PTR(g_randomforest_weights_map[0] + 496);
 8010638:	4b38      	ldr	r3, [pc, #224]	; (801071c <randomforest_configure_weights+0x1f4>)
 801063a:	681b      	ldr	r3, [r3, #0]
 801063c:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
 8010640:	4a3e      	ldr	r2, [pc, #248]	; (801073c <randomforest_configure_weights+0x214>)
 8010642:	6093      	str	r3, [r2, #8]
    label_nodes_truenodeids_array.data_start = AI_PTR(g_randomforest_weights_map[0] + 496);
 8010644:	4b35      	ldr	r3, [pc, #212]	; (801071c <randomforest_configure_weights+0x1f4>)
 8010646:	681b      	ldr	r3, [r3, #0]
 8010648:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
 801064c:	4a3b      	ldr	r2, [pc, #236]	; (801073c <randomforest_configure_weights+0x214>)
 801064e:	60d3      	str	r3, [r2, #12]
    
    label_class_ids_array.format |= AI_FMT_FLAG_CONST;
 8010650:	4b3b      	ldr	r3, [pc, #236]	; (8010740 <randomforest_configure_weights+0x218>)
 8010652:	681b      	ldr	r3, [r3, #0]
 8010654:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010658:	4a39      	ldr	r2, [pc, #228]	; (8010740 <randomforest_configure_weights+0x218>)
 801065a:	6013      	str	r3, [r2, #0]
    label_class_ids_array.data = AI_PTR(g_randomforest_weights_map[0] + 604);
 801065c:	4b2f      	ldr	r3, [pc, #188]	; (801071c <randomforest_configure_weights+0x1f4>)
 801065e:	681b      	ldr	r3, [r3, #0]
 8010660:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8010664:	4a36      	ldr	r2, [pc, #216]	; (8010740 <randomforest_configure_weights+0x218>)
 8010666:	6093      	str	r3, [r2, #8]
    label_class_ids_array.data_start = AI_PTR(g_randomforest_weights_map[0] + 604);
 8010668:	4b2c      	ldr	r3, [pc, #176]	; (801071c <randomforest_configure_weights+0x1f4>)
 801066a:	681b      	ldr	r3, [r3, #0]
 801066c:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8010670:	4a33      	ldr	r2, [pc, #204]	; (8010740 <randomforest_configure_weights+0x218>)
 8010672:	60d3      	str	r3, [r2, #12]
    
    output_probability_classlabels_ints_array.format |= AI_FMT_FLAG_CONST;
 8010674:	4b33      	ldr	r3, [pc, #204]	; (8010744 <randomforest_configure_weights+0x21c>)
 8010676:	681b      	ldr	r3, [r3, #0]
 8010678:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801067c:	4a31      	ldr	r2, [pc, #196]	; (8010744 <randomforest_configure_weights+0x21c>)
 801067e:	6013      	str	r3, [r2, #0]
    output_probability_classlabels_ints_array.data = AI_PTR(g_randomforest_weights_map[0] + 784);
 8010680:	4b26      	ldr	r3, [pc, #152]	; (801071c <randomforest_configure_weights+0x1f4>)
 8010682:	681b      	ldr	r3, [r3, #0]
 8010684:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8010688:	4a2e      	ldr	r2, [pc, #184]	; (8010744 <randomforest_configure_weights+0x21c>)
 801068a:	6093      	str	r3, [r2, #8]
    output_probability_classlabels_ints_array.data_start = AI_PTR(g_randomforest_weights_map[0] + 784);
 801068c:	4b23      	ldr	r3, [pc, #140]	; (801071c <randomforest_configure_weights+0x1f4>)
 801068e:	681b      	ldr	r3, [r3, #0]
 8010690:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8010694:	4a2b      	ldr	r2, [pc, #172]	; (8010744 <randomforest_configure_weights+0x21c>)
 8010696:	60d3      	str	r3, [r2, #12]
    
    label_nodes_falsenodeids_array.format |= AI_FMT_FLAG_CONST;
 8010698:	4b2b      	ldr	r3, [pc, #172]	; (8010748 <randomforest_configure_weights+0x220>)
 801069a:	681b      	ldr	r3, [r3, #0]
 801069c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80106a0:	4a29      	ldr	r2, [pc, #164]	; (8010748 <randomforest_configure_weights+0x220>)
 80106a2:	6013      	str	r3, [r2, #0]
    label_nodes_falsenodeids_array.data = AI_PTR(g_randomforest_weights_map[0] + 788);
 80106a4:	4b1d      	ldr	r3, [pc, #116]	; (801071c <randomforest_configure_weights+0x1f4>)
 80106a6:	681b      	ldr	r3, [r3, #0]
 80106a8:	f503 7345 	add.w	r3, r3, #788	; 0x314
 80106ac:	4a26      	ldr	r2, [pc, #152]	; (8010748 <randomforest_configure_weights+0x220>)
 80106ae:	6093      	str	r3, [r2, #8]
    label_nodes_falsenodeids_array.data_start = AI_PTR(g_randomforest_weights_map[0] + 788);
 80106b0:	4b1a      	ldr	r3, [pc, #104]	; (801071c <randomforest_configure_weights+0x1f4>)
 80106b2:	681b      	ldr	r3, [r3, #0]
 80106b4:	f503 7345 	add.w	r3, r3, #788	; 0x314
 80106b8:	4a23      	ldr	r2, [pc, #140]	; (8010748 <randomforest_configure_weights+0x220>)
 80106ba:	60d3      	str	r3, [r2, #12]
    
    label_class_weights_array.format |= AI_FMT_FLAG_CONST;
 80106bc:	4b23      	ldr	r3, [pc, #140]	; (801074c <randomforest_configure_weights+0x224>)
 80106be:	681b      	ldr	r3, [r3, #0]
 80106c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80106c4:	4a21      	ldr	r2, [pc, #132]	; (801074c <randomforest_configure_weights+0x224>)
 80106c6:	6013      	str	r3, [r2, #0]
    label_class_weights_array.data = AI_PTR(g_randomforest_weights_map[0] + 896);
 80106c8:	4b14      	ldr	r3, [pc, #80]	; (801071c <randomforest_configure_weights+0x1f4>)
 80106ca:	681b      	ldr	r3, [r3, #0]
 80106cc:	f503 7360 	add.w	r3, r3, #896	; 0x380
 80106d0:	4a1e      	ldr	r2, [pc, #120]	; (801074c <randomforest_configure_weights+0x224>)
 80106d2:	6093      	str	r3, [r2, #8]
    label_class_weights_array.data_start = AI_PTR(g_randomforest_weights_map[0] + 896);
 80106d4:	4b11      	ldr	r3, [pc, #68]	; (801071c <randomforest_configure_weights+0x1f4>)
 80106d6:	681b      	ldr	r3, [r3, #0]
 80106d8:	f503 7360 	add.w	r3, r3, #896	; 0x380
 80106dc:	4a1b      	ldr	r2, [pc, #108]	; (801074c <randomforest_configure_weights+0x224>)
 80106de:	60d3      	str	r3, [r2, #12]
    
    label_nb_node_by_estimator_array.format |= AI_FMT_FLAG_CONST;
 80106e0:	4b1b      	ldr	r3, [pc, #108]	; (8010750 <randomforest_configure_weights+0x228>)
 80106e2:	681b      	ldr	r3, [r3, #0]
 80106e4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80106e8:	4a19      	ldr	r2, [pc, #100]	; (8010750 <randomforest_configure_weights+0x228>)
 80106ea:	6013      	str	r3, [r2, #0]
    label_nb_node_by_estimator_array.data = AI_PTR(g_randomforest_weights_map[0] + 1256);
 80106ec:	4b0b      	ldr	r3, [pc, #44]	; (801071c <randomforest_configure_weights+0x1f4>)
 80106ee:	681b      	ldr	r3, [r3, #0]
 80106f0:	f503 639d 	add.w	r3, r3, #1256	; 0x4e8
 80106f4:	4a16      	ldr	r2, [pc, #88]	; (8010750 <randomforest_configure_weights+0x228>)
 80106f6:	6093      	str	r3, [r2, #8]
    label_nb_node_by_estimator_array.data_start = AI_PTR(g_randomforest_weights_map[0] + 1256);
 80106f8:	4b08      	ldr	r3, [pc, #32]	; (801071c <randomforest_configure_weights+0x1f4>)
 80106fa:	681b      	ldr	r3, [r3, #0]
 80106fc:	f503 639d 	add.w	r3, r3, #1256	; 0x4e8
 8010700:	4a13      	ldr	r2, [pc, #76]	; (8010750 <randomforest_configure_weights+0x228>)
 8010702:	60d3      	str	r3, [r2, #12]
    
    return true;
 8010704:	2301      	movs	r3, #1
 8010706:	e005      	b.n	8010714 <randomforest_configure_weights+0x1ec>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 8010708:	2212      	movs	r2, #18
 801070a:	2130      	movs	r1, #48	; 0x30
 801070c:	6878      	ldr	r0, [r7, #4]
 801070e:	f000 fae9 	bl	8010ce4 <ai_platform_network_set_error>
  return false;
 8010712:	2300      	movs	r3, #0
}
 8010714:	4618      	mov	r0, r3
 8010716:	3708      	adds	r7, #8
 8010718:	46bd      	mov	sp, r7
 801071a:	bd80      	pop	{r7, pc}
 801071c:	20002c78 	.word	0x20002c78
 8010720:	200001c0 	.word	0x200001c0
 8010724:	200001e0 	.word	0x200001e0
 8010728:	200001f0 	.word	0x200001f0
 801072c:	20000200 	.word	0x20000200
 8010730:	20000210 	.word	0x20000210
 8010734:	20000220 	.word	0x20000220
 8010738:	20000230 	.word	0x20000230
 801073c:	20000240 	.word	0x20000240
 8010740:	20000250 	.word	0x20000250
 8010744:	20000260 	.word	0x20000260
 8010748:	20000270 	.word	0x20000270
 801074c:	20000280 	.word	0x20000280
 8010750:	200002a0 	.word	0x200002a0

08010754 <ai_randomforest_get_error>:
  return false;
}

AI_API_ENTRY
ai_error ai_randomforest_get_error(ai_handle network)
{
 8010754:	b580      	push	{r7, lr}
 8010756:	b082      	sub	sp, #8
 8010758:	af00      	add	r7, sp, #0
 801075a:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 801075c:	6878      	ldr	r0, [r7, #4]
 801075e:	f000 fa53 	bl	8010c08 <ai_platform_network_get_error>
 8010762:	4603      	mov	r3, r0
}
 8010764:	4618      	mov	r0, r3
 8010766:	3708      	adds	r7, #8
 8010768:	46bd      	mov	sp, r7
 801076a:	bd80      	pop	{r7, pc}

0801076c <ai_randomforest_create>:

AI_API_ENTRY
ai_error ai_randomforest_create(
  ai_handle* network, const ai_buffer* network_config)
{
 801076c:	b580      	push	{r7, lr}
 801076e:	b084      	sub	sp, #16
 8010770:	af02      	add	r7, sp, #8
 8010772:	6078      	str	r0, [r7, #4]
 8010774:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 8010776:	2300      	movs	r3, #0
 8010778:	9301      	str	r3, [sp, #4]
 801077a:	2305      	movs	r3, #5
 801077c:	9300      	str	r3, [sp, #0]
 801077e:	2301      	movs	r3, #1
 8010780:	4a04      	ldr	r2, [pc, #16]	; (8010794 <ai_randomforest_create+0x28>)
 8010782:	6839      	ldr	r1, [r7, #0]
 8010784:	6878      	ldr	r0, [r7, #4]
 8010786:	f000 fc59 	bl	801103c <ai_platform_network_create>
 801078a:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 801078c:	4618      	mov	r0, r3
 801078e:	3708      	adds	r7, #8
 8010790:	46bd      	mov	sp, r7
 8010792:	bd80      	pop	{r7, pc}
 8010794:	2000083c 	.word	0x2000083c

08010798 <ai_randomforest_create_and_init>:

AI_API_ENTRY
ai_error ai_randomforest_create_and_init(
  ai_handle* network, const ai_handle activations[], const ai_handle weights[])
{
 8010798:	b580      	push	{r7, lr}
 801079a:	b096      	sub	sp, #88	; 0x58
 801079c:	af00      	add	r7, sp, #0
 801079e:	60f8      	str	r0, [r7, #12]
 80107a0:	60b9      	str	r1, [r7, #8]
 80107a2:	607a      	str	r2, [r7, #4]
    ai_error err;
    ai_network_params params;

    err = ai_randomforest_create(network, AI_RANDOMFOREST_DATA_CONFIG);
 80107a4:	2100      	movs	r1, #0
 80107a6:	68f8      	ldr	r0, [r7, #12]
 80107a8:	f7ff ffe0 	bl	801076c <ai_randomforest_create>
 80107ac:	4603      	mov	r3, r0
 80107ae:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (err.type != AI_ERROR_NONE)
 80107b0:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80107b4:	2b00      	cmp	r3, #0
 80107b6:	d001      	beq.n	80107bc <ai_randomforest_create_and_init+0x24>
        return err;
 80107b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80107ba:	e05d      	b.n	8010878 <ai_randomforest_create_and_init+0xe0>
    if (ai_randomforest_data_params_get(&params) != true) {
 80107bc:	f107 0314 	add.w	r3, r7, #20
 80107c0:	4618      	mov	r0, r3
 80107c2:	f000 f8dd 	bl	8010980 <ai_randomforest_data_params_get>
 80107c6:	4603      	mov	r3, r0
 80107c8:	f083 0301 	eor.w	r3, r3, #1
 80107cc:	b2db      	uxtb	r3, r3
 80107ce:	2b00      	cmp	r3, #0
 80107d0:	d008      	beq.n	80107e4 <ai_randomforest_create_and_init+0x4c>
        err = ai_randomforest_get_error(*network);
 80107d2:	68fb      	ldr	r3, [r7, #12]
 80107d4:	681b      	ldr	r3, [r3, #0]
 80107d6:	4618      	mov	r0, r3
 80107d8:	f7ff ffbc 	bl	8010754 <ai_randomforest_get_error>
 80107dc:	4603      	mov	r3, r0
 80107de:	64fb      	str	r3, [r7, #76]	; 0x4c
        return err;
 80107e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80107e2:	e049      	b.n	8010878 <ai_randomforest_create_and_init+0xe0>
    }
#if defined(AI_RANDOMFOREST_DATA_ACTIVATIONS_COUNT)
    if (activations) {
 80107e4:	68bb      	ldr	r3, [r7, #8]
 80107e6:	2b00      	cmp	r3, #0
 80107e8:	d016      	beq.n	8010818 <ai_randomforest_create_and_init+0x80>
        /* set the addresses of the activations buffers */
        for (int idx=0;idx<params.map_activations.size;idx++)
 80107ea:	2300      	movs	r3, #0
 80107ec:	657b      	str	r3, [r7, #84]	; 0x54
 80107ee:	e00e      	b.n	801080e <ai_randomforest_create_and_init+0x76>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 80107f0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80107f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80107f4:	009b      	lsls	r3, r3, #2
 80107f6:	68ba      	ldr	r2, [r7, #8]
 80107f8:	4413      	add	r3, r2
 80107fa:	681a      	ldr	r2, [r3, #0]
 80107fc:	f107 0314 	add.w	r3, r7, #20
 8010800:	330c      	adds	r3, #12
 8010802:	4618      	mov	r0, r3
 8010804:	f000 f922 	bl	8010a4c <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_activations.size;idx++)
 8010808:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801080a:	3301      	adds	r3, #1
 801080c:	657b      	str	r3, [r7, #84]	; 0x54
 801080e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010810:	461a      	mov	r2, r3
 8010812:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010814:	4293      	cmp	r3, r2
 8010816:	dbeb      	blt.n	80107f0 <ai_randomforest_create_and_init+0x58>
    }
#endif
#if defined(AI_RANDOMFOREST_DATA_WEIGHTS_COUNT)
    if (weights) {
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	2b00      	cmp	r3, #0
 801081c:	d016      	beq.n	801084c <ai_randomforest_create_and_init+0xb4>
        /* set the addresses of the weight buffers */
        for (int idx=0;idx<params.map_weights.size;idx++)
 801081e:	2300      	movs	r3, #0
 8010820:	653b      	str	r3, [r7, #80]	; 0x50
 8010822:	e00e      	b.n	8010842 <ai_randomforest_create_and_init+0xaa>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 8010824:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010826:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010828:	009b      	lsls	r3, r3, #2
 801082a:	687a      	ldr	r2, [r7, #4]
 801082c:	4413      	add	r3, r2
 801082e:	681a      	ldr	r2, [r3, #0]
 8010830:	f107 0314 	add.w	r3, r7, #20
 8010834:	3304      	adds	r3, #4
 8010836:	4618      	mov	r0, r3
 8010838:	f000 f908 	bl	8010a4c <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_weights.size;idx++)
 801083c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801083e:	3301      	adds	r3, #1
 8010840:	653b      	str	r3, [r7, #80]	; 0x50
 8010842:	8b7b      	ldrh	r3, [r7, #26]
 8010844:	461a      	mov	r2, r3
 8010846:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010848:	4293      	cmp	r3, r2
 801084a:	dbeb      	blt.n	8010824 <ai_randomforest_create_and_init+0x8c>
    }
#endif
    if (ai_randomforest_init(*network, &params) != true) {
 801084c:	68fb      	ldr	r3, [r7, #12]
 801084e:	681b      	ldr	r3, [r3, #0]
 8010850:	f107 0214 	add.w	r2, r7, #20
 8010854:	4611      	mov	r1, r2
 8010856:	4618      	mov	r0, r3
 8010858:	f000 f846 	bl	80108e8 <ai_randomforest_init>
 801085c:	4603      	mov	r3, r0
 801085e:	f083 0301 	eor.w	r3, r3, #1
 8010862:	b2db      	uxtb	r3, r3
 8010864:	2b00      	cmp	r3, #0
 8010866:	d006      	beq.n	8010876 <ai_randomforest_create_and_init+0xde>
        err = ai_randomforest_get_error(*network);
 8010868:	68fb      	ldr	r3, [r7, #12]
 801086a:	681b      	ldr	r3, [r3, #0]
 801086c:	4618      	mov	r0, r3
 801086e:	f7ff ff71 	bl	8010754 <ai_randomforest_get_error>
 8010872:	4603      	mov	r3, r0
 8010874:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    return err;
 8010876:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8010878:	4618      	mov	r0, r3
 801087a:	3758      	adds	r7, #88	; 0x58
 801087c:	46bd      	mov	sp, r7
 801087e:	bd80      	pop	{r7, pc}

08010880 <ai_randomforest_inputs_get>:

AI_API_ENTRY
ai_buffer* ai_randomforest_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8010880:	b580      	push	{r7, lr}
 8010882:	b082      	sub	sp, #8
 8010884:	af00      	add	r7, sp, #0
 8010886:	6078      	str	r0, [r7, #4]
 8010888:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	2b00      	cmp	r3, #0
 801088e:	d104      	bne.n	801089a <ai_randomforest_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8010890:	4b06      	ldr	r3, [pc, #24]	; (80108ac <ai_randomforest_inputs_get+0x2c>)
 8010892:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	4a06      	ldr	r2, [pc, #24]	; (80108b0 <ai_randomforest_inputs_get+0x30>)
 8010898:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 801089a:	6839      	ldr	r1, [r7, #0]
 801089c:	6878      	ldr	r0, [r7, #4]
 801089e:	f000 fa27 	bl	8010cf0 <ai_platform_inputs_get>
 80108a2:	4603      	mov	r3, r0
}
 80108a4:	4618      	mov	r0, r3
 80108a6:	3708      	adds	r7, #8
 80108a8:	46bd      	mov	sp, r7
 80108aa:	bd80      	pop	{r7, pc}
 80108ac:	2000083c 	.word	0x2000083c
 80108b0:	a1c00100 	.word	0xa1c00100

080108b4 <ai_randomforest_outputs_get>:

AI_API_ENTRY
ai_buffer* ai_randomforest_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 80108b4:	b580      	push	{r7, lr}
 80108b6:	b082      	sub	sp, #8
 80108b8:	af00      	add	r7, sp, #0
 80108ba:	6078      	str	r0, [r7, #4]
 80108bc:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	2b00      	cmp	r3, #0
 80108c2:	d104      	bne.n	80108ce <ai_randomforest_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 80108c4:	4b06      	ldr	r3, [pc, #24]	; (80108e0 <ai_randomforest_outputs_get+0x2c>)
 80108c6:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	4a06      	ldr	r2, [pc, #24]	; (80108e4 <ai_randomforest_outputs_get+0x30>)
 80108cc:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 80108ce:	6839      	ldr	r1, [r7, #0]
 80108d0:	6878      	ldr	r0, [r7, #4]
 80108d2:	f000 fae3 	bl	8010e9c <ai_platform_outputs_get>
 80108d6:	4603      	mov	r3, r0
}
 80108d8:	4618      	mov	r0, r3
 80108da:	3708      	adds	r7, #8
 80108dc:	46bd      	mov	sp, r7
 80108de:	bd80      	pop	{r7, pc}
 80108e0:	2000083c 	.word	0x2000083c
 80108e4:	a1c00100 	.word	0xa1c00100

080108e8 <ai_randomforest_init>:
}

AI_API_ENTRY
ai_bool ai_randomforest_init(
  ai_handle network, const ai_network_params* params)
{
 80108e8:	b580      	push	{r7, lr}
 80108ea:	b084      	sub	sp, #16
 80108ec:	af00      	add	r7, sp, #0
 80108ee:	6078      	str	r0, [r7, #4]
 80108f0:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 80108f2:	6839      	ldr	r1, [r7, #0]
 80108f4:	6878      	ldr	r0, [r7, #4]
 80108f6:	f000 fc77 	bl	80111e8 <ai_platform_network_init>
 80108fa:	60f8      	str	r0, [r7, #12]
  if (!net_ctx) return false;
 80108fc:	68fb      	ldr	r3, [r7, #12]
 80108fe:	2b00      	cmp	r3, #0
 8010900:	d101      	bne.n	8010906 <ai_randomforest_init+0x1e>
 8010902:	2300      	movs	r3, #0
 8010904:	e028      	b.n	8010958 <ai_randomforest_init+0x70>

  ai_bool ok = true;
 8010906:	2301      	movs	r3, #1
 8010908:	72fb      	strb	r3, [r7, #11]
  ok &= randomforest_configure_weights(net_ctx, params);
 801090a:	6839      	ldr	r1, [r7, #0]
 801090c:	68f8      	ldr	r0, [r7, #12]
 801090e:	f7ff fe0b 	bl	8010528 <randomforest_configure_weights>
 8010912:	4603      	mov	r3, r0
 8010914:	461a      	mov	r2, r3
 8010916:	7afb      	ldrb	r3, [r7, #11]
 8010918:	4013      	ands	r3, r2
 801091a:	2b00      	cmp	r3, #0
 801091c:	bf14      	ite	ne
 801091e:	2301      	movne	r3, #1
 8010920:	2300      	moveq	r3, #0
 8010922:	72fb      	strb	r3, [r7, #11]
  ok &= randomforest_configure_activations(net_ctx, params);
 8010924:	6839      	ldr	r1, [r7, #0]
 8010926:	68f8      	ldr	r0, [r7, #12]
 8010928:	f7ff fdb4 	bl	8010494 <randomforest_configure_activations>
 801092c:	4603      	mov	r3, r0
 801092e:	461a      	mov	r2, r3
 8010930:	7afb      	ldrb	r3, [r7, #11]
 8010932:	4013      	ands	r3, r2
 8010934:	2b00      	cmp	r3, #0
 8010936:	bf14      	ite	ne
 8010938:	2301      	movne	r3, #1
 801093a:	2300      	moveq	r3, #0
 801093c:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 801093e:	6878      	ldr	r0, [r7, #4]
 8010940:	f000 fd40 	bl	80113c4 <ai_platform_network_post_init>
 8010944:	4603      	mov	r3, r0
 8010946:	461a      	mov	r2, r3
 8010948:	7afb      	ldrb	r3, [r7, #11]
 801094a:	4013      	ands	r3, r2
 801094c:	2b00      	cmp	r3, #0
 801094e:	bf14      	ite	ne
 8010950:	2301      	movne	r3, #1
 8010952:	2300      	moveq	r3, #0
 8010954:	72fb      	strb	r3, [r7, #11]

  return ok;
 8010956:	7afb      	ldrb	r3, [r7, #11]
}
 8010958:	4618      	mov	r0, r3
 801095a:	3710      	adds	r7, #16
 801095c:	46bd      	mov	sp, r7
 801095e:	bd80      	pop	{r7, pc}

08010960 <ai_randomforest_run>:


AI_API_ENTRY
ai_i32 ai_randomforest_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 8010960:	b580      	push	{r7, lr}
 8010962:	b084      	sub	sp, #16
 8010964:	af00      	add	r7, sp, #0
 8010966:	60f8      	str	r0, [r7, #12]
 8010968:	60b9      	str	r1, [r7, #8]
 801096a:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 801096c:	687a      	ldr	r2, [r7, #4]
 801096e:	68b9      	ldr	r1, [r7, #8]
 8010970:	68f8      	ldr	r0, [r7, #12]
 8010972:	f000 fdaf 	bl	80114d4 <ai_platform_network_process>
 8010976:	4603      	mov	r3, r0
}
 8010978:	4618      	mov	r0, r3
 801097a:	3710      	adds	r7, #16
 801097c:	46bd      	mov	sp, r7
 801097e:	bd80      	pop	{r7, pc}

08010980 <ai_randomforest_data_params_get>:
 * @ingroup randomforest_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_randomforest_data_params_get(ai_network_params* params)
{
 8010980:	b580      	push	{r7, lr}
 8010982:	b086      	sub	sp, #24
 8010984:	af00      	add	r7, sp, #0
 8010986:	6078      	str	r0, [r7, #4]
  if (!params) return false;
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	2b00      	cmp	r3, #0
 801098c:	d101      	bne.n	8010992 <ai_randomforest_data_params_get+0x12>
 801098e:	2300      	movs	r3, #0
 8010990:	e016      	b.n	80109c0 <ai_randomforest_data_params_get+0x40>
  
  const ai_buffer_array map_activations = 
 8010992:	4a0d      	ldr	r2, [pc, #52]	; (80109c8 <ai_randomforest_data_params_get+0x48>)
 8010994:	f107 0310 	add.w	r3, r7, #16
 8010998:	e892 0003 	ldmia.w	r2, {r0, r1}
 801099c:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_RANDOMFOREST_DATA_ACTIVATIONS_COUNT, g_randomforest_data_map_activations);
  
  const ai_buffer_array map_weights = 
 80109a0:	4a0a      	ldr	r2, [pc, #40]	; (80109cc <ai_randomforest_data_params_get+0x4c>)
 80109a2:	f107 0308 	add.w	r3, r7, #8
 80109a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80109aa:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_RANDOMFOREST_DATA_WEIGHTS_COUNT, g_randomforest_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 80109ae:	f107 0210 	add.w	r2, r7, #16
 80109b2:	f107 0308 	add.w	r3, r7, #8
 80109b6:	4619      	mov	r1, r3
 80109b8:	6878      	ldr	r0, [r7, #4]
 80109ba:	f000 f903 	bl	8010bc4 <ai_platform_bind_network_params>
 80109be:	4603      	mov	r3, r0
}
 80109c0:	4618      	mov	r0, r3
 80109c2:	3718      	adds	r7, #24
 80109c4:	46bd      	mov	sp, r7
 80109c6:	bd80      	pop	{r7, pc}
 80109c8:	08013b60 	.word	0x08013b60
 80109cc:	08013b68 	.word	0x08013b68

080109d0 <ai_buffer_get_size>:
 80109d0:	b378      	cbz	r0, 8010a32 <ai_buffer_get_size+0x62>
 80109d2:	b410      	push	{r4}
 80109d4:	6803      	ldr	r3, [r0, #0]
 80109d6:	4a17      	ldr	r2, [pc, #92]	; (8010a34 <ai_buffer_get_size+0x64>)
 80109d8:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80109dc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80109e0:	4293      	cmp	r3, r2
 80109e2:	d01e      	beq.n	8010a22 <ai_buffer_get_size+0x52>
 80109e4:	6984      	ldr	r4, [r0, #24]
 80109e6:	6862      	ldr	r2, [r4, #4]
 80109e8:	7d03      	ldrb	r3, [r0, #20]
 80109ea:	6941      	ldr	r1, [r0, #20]
 80109ec:	f1a3 0301 	sub.w	r3, r3, #1
 80109f0:	fab3 f383 	clz	r3, r3
 80109f4:	095b      	lsrs	r3, r3, #5
 80109f6:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 80109fa:	f3c1 2017 	ubfx	r0, r1, #8, #24
 80109fe:	da0b      	bge.n	8010a18 <ai_buffer_get_size+0x48>
 8010a00:	2b01      	cmp	r3, #1
 8010a02:	d102      	bne.n	8010a0a <ai_buffer_get_size+0x3a>
 8010a04:	2802      	cmp	r0, #2
 8010a06:	d007      	beq.n	8010a18 <ai_buffer_get_size+0x48>
 8010a08:	2302      	movs	r3, #2
 8010a0a:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 8010a0e:	3301      	adds	r3, #1
 8010a10:	4298      	cmp	r0, r3
 8010a12:	fb01 f202 	mul.w	r2, r1, r2
 8010a16:	d1f3      	bne.n	8010a00 <ai_buffer_get_size+0x30>
 8010a18:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 8010a1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010a20:	4770      	bx	lr
 8010a22:	2900      	cmp	r1, #0
 8010a24:	d0de      	beq.n	80109e4 <ai_buffer_get_size+0x14>
 8010a26:	6984      	ldr	r4, [r0, #24]
 8010a28:	6863      	ldr	r3, [r4, #4]
 8010a2a:	331f      	adds	r3, #31
 8010a2c:	f023 021f 	bic.w	r2, r3, #31
 8010a30:	e7da      	b.n	80109e8 <ai_buffer_get_size+0x18>
 8010a32:	4770      	bx	lr
 8010a34:	000400c0 	.word	0x000400c0

08010a38 <ai_buffer_array_sane>:
 8010a38:	b138      	cbz	r0, 8010a4a <ai_buffer_array_sane+0x12>
 8010a3a:	6843      	ldr	r3, [r0, #4]
 8010a3c:	b123      	cbz	r3, 8010a48 <ai_buffer_array_sane+0x10>
 8010a3e:	8840      	ldrh	r0, [r0, #2]
 8010a40:	3800      	subs	r0, #0
 8010a42:	bf18      	it	ne
 8010a44:	2001      	movne	r0, #1
 8010a46:	4770      	bx	lr
 8010a48:	4618      	mov	r0, r3
 8010a4a:	4770      	bx	lr

08010a4c <ai_buffer_array_item_set_address>:
 8010a4c:	b150      	cbz	r0, 8010a64 <ai_buffer_array_item_set_address+0x18>
 8010a4e:	6843      	ldr	r3, [r0, #4]
 8010a50:	b14b      	cbz	r3, 8010a66 <ai_buffer_array_item_set_address+0x1a>
 8010a52:	8840      	ldrh	r0, [r0, #2]
 8010a54:	b900      	cbnz	r0, 8010a58 <ai_buffer_array_item_set_address+0xc>
 8010a56:	4770      	bx	lr
 8010a58:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8010a5c:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8010a60:	2001      	movs	r0, #1
 8010a62:	604a      	str	r2, [r1, #4]
 8010a64:	4770      	bx	lr
 8010a66:	4618      	mov	r0, r3
 8010a68:	4770      	bx	lr
 8010a6a:	bf00      	nop

08010a6c <_ai_platform_acquire_crc>:
 8010a6c:	2001      	movs	r0, #1
 8010a6e:	4770      	bx	lr

08010a70 <_ai_platform_release_crc>:
 8010a70:	4770      	bx	lr
 8010a72:	bf00      	nop

08010a74 <ai_platform_get_weights_map>:
 8010a74:	2a00      	cmp	r2, #0
 8010a76:	d037      	beq.n	8010ae8 <ai_platform_get_weights_map+0x74>
 8010a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010a7a:	4604      	mov	r4, r0
 8010a7c:	b1a0      	cbz	r0, 8010aa8 <ai_platform_get_weights_map+0x34>
 8010a7e:	460f      	mov	r7, r1
 8010a80:	b191      	cbz	r1, 8010aa8 <ai_platform_get_weights_map+0x34>
 8010a82:	4b25      	ldr	r3, [pc, #148]	; (8010b18 <ai_platform_get_weights_map+0xa4>)
 8010a84:	6810      	ldr	r0, [r2, #0]
 8010a86:	4298      	cmp	r0, r3
 8010a88:	4615      	mov	r5, r2
 8010a8a:	d00f      	beq.n	8010aac <ai_platform_get_weights_map+0x38>
 8010a8c:	6855      	ldr	r5, [r2, #4]
 8010a8e:	b15d      	cbz	r5, 8010aa8 <ai_platform_get_weights_map+0x34>
 8010a90:	682e      	ldr	r6, [r5, #0]
 8010a92:	429e      	cmp	r6, r3
 8010a94:	d02a      	beq.n	8010aec <ai_platform_get_weights_map+0x78>
 8010a96:	f1a1 0001 	sub.w	r0, r1, #1
 8010a9a:	6025      	str	r5, [r4, #0]
 8010a9c:	fab0 f080 	clz	r0, r0
 8010aa0:	0940      	lsrs	r0, r0, #5
 8010aa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010aa4:	42a7      	cmp	r7, r4
 8010aa6:	d034      	beq.n	8010b12 <ai_platform_get_weights_map+0x9e>
 8010aa8:	2000      	movs	r0, #0
 8010aaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010aac:	1d10      	adds	r0, r2, #4
 8010aae:	f7ff ffc3 	bl	8010a38 <ai_buffer_array_sane>
 8010ab2:	2800      	cmp	r0, #0
 8010ab4:	d0f8      	beq.n	8010aa8 <ai_platform_get_weights_map+0x34>
 8010ab6:	88eb      	ldrh	r3, [r5, #6]
 8010ab8:	429f      	cmp	r7, r3
 8010aba:	d1f5      	bne.n	8010aa8 <ai_platform_get_weights_map+0x34>
 8010abc:	f04f 0e00 	mov.w	lr, #0
 8010ac0:	1f23      	subs	r3, r4, #4
 8010ac2:	4670      	mov	r0, lr
 8010ac4:	68aa      	ldr	r2, [r5, #8]
 8010ac6:	eb02 0c0e 	add.w	ip, r2, lr
 8010aca:	f10e 0e1c 	add.w	lr, lr, #28
 8010ace:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8010ad2:	b124      	cbz	r4, 8010ade <ai_platform_get_weights_map+0x6a>
 8010ad4:	3001      	adds	r0, #1
 8010ad6:	4287      	cmp	r7, r0
 8010ad8:	f843 4f04 	str.w	r4, [r3, #4]!
 8010adc:	d1f2      	bne.n	8010ac4 <ai_platform_get_weights_map+0x50>
 8010ade:	1a38      	subs	r0, r7, r0
 8010ae0:	fab0 f080 	clz	r0, r0
 8010ae4:	0940      	lsrs	r0, r0, #5
 8010ae6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010ae8:	2000      	movs	r0, #0
 8010aea:	4770      	bx	lr
 8010aec:	1f23      	subs	r3, r4, #4
 8010aee:	4628      	mov	r0, r5
 8010af0:	2400      	movs	r4, #0
 8010af2:	e000      	b.n	8010af6 <ai_platform_get_weights_map+0x82>
 8010af4:	4614      	mov	r4, r2
 8010af6:	f850 2f04 	ldr.w	r2, [r0, #4]!
 8010afa:	42b2      	cmp	r2, r6
 8010afc:	d0d2      	beq.n	8010aa4 <ai_platform_get_weights_map+0x30>
 8010afe:	f843 2f04 	str.w	r2, [r3, #4]!
 8010b02:	1c62      	adds	r2, r4, #1
 8010b04:	4297      	cmp	r7, r2
 8010b06:	d1f5      	bne.n	8010af4 <ai_platform_get_weights_map+0x80>
 8010b08:	3402      	adds	r4, #2
 8010b0a:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8010b0e:	42b3      	cmp	r3, r6
 8010b10:	d1ca      	bne.n	8010aa8 <ai_platform_get_weights_map+0x34>
 8010b12:	2001      	movs	r0, #1
 8010b14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010b16:	bf00      	nop
 8010b18:	a1facade 	.word	0xa1facade

08010b1c <ai_platform_get_activations_map>:
 8010b1c:	2a00      	cmp	r2, #0
 8010b1e:	d038      	beq.n	8010b92 <ai_platform_get_activations_map+0x76>
 8010b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b22:	4604      	mov	r4, r0
 8010b24:	b1a0      	cbz	r0, 8010b50 <ai_platform_get_activations_map+0x34>
 8010b26:	460f      	mov	r7, r1
 8010b28:	b191      	cbz	r1, 8010b50 <ai_platform_get_activations_map+0x34>
 8010b2a:	4b25      	ldr	r3, [pc, #148]	; (8010bc0 <ai_platform_get_activations_map+0xa4>)
 8010b2c:	6810      	ldr	r0, [r2, #0]
 8010b2e:	4298      	cmp	r0, r3
 8010b30:	4615      	mov	r5, r2
 8010b32:	d00f      	beq.n	8010b54 <ai_platform_get_activations_map+0x38>
 8010b34:	6a15      	ldr	r5, [r2, #32]
 8010b36:	b15d      	cbz	r5, 8010b50 <ai_platform_get_activations_map+0x34>
 8010b38:	682e      	ldr	r6, [r5, #0]
 8010b3a:	429e      	cmp	r6, r3
 8010b3c:	d02b      	beq.n	8010b96 <ai_platform_get_activations_map+0x7a>
 8010b3e:	f1a1 0001 	sub.w	r0, r1, #1
 8010b42:	6025      	str	r5, [r4, #0]
 8010b44:	fab0 f080 	clz	r0, r0
 8010b48:	0940      	lsrs	r0, r0, #5
 8010b4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010b4c:	42a7      	cmp	r7, r4
 8010b4e:	d035      	beq.n	8010bbc <ai_platform_get_activations_map+0xa0>
 8010b50:	2000      	movs	r0, #0
 8010b52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010b54:	f102 000c 	add.w	r0, r2, #12
 8010b58:	f7ff ff6e 	bl	8010a38 <ai_buffer_array_sane>
 8010b5c:	2800      	cmp	r0, #0
 8010b5e:	d0f7      	beq.n	8010b50 <ai_platform_get_activations_map+0x34>
 8010b60:	89eb      	ldrh	r3, [r5, #14]
 8010b62:	429f      	cmp	r7, r3
 8010b64:	d1f4      	bne.n	8010b50 <ai_platform_get_activations_map+0x34>
 8010b66:	f04f 0e00 	mov.w	lr, #0
 8010b6a:	1f23      	subs	r3, r4, #4
 8010b6c:	4670      	mov	r0, lr
 8010b6e:	692a      	ldr	r2, [r5, #16]
 8010b70:	eb02 0c0e 	add.w	ip, r2, lr
 8010b74:	f10e 0e1c 	add.w	lr, lr, #28
 8010b78:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8010b7c:	b124      	cbz	r4, 8010b88 <ai_platform_get_activations_map+0x6c>
 8010b7e:	3001      	adds	r0, #1
 8010b80:	4287      	cmp	r7, r0
 8010b82:	f843 4f04 	str.w	r4, [r3, #4]!
 8010b86:	d1f2      	bne.n	8010b6e <ai_platform_get_activations_map+0x52>
 8010b88:	1a38      	subs	r0, r7, r0
 8010b8a:	fab0 f080 	clz	r0, r0
 8010b8e:	0940      	lsrs	r0, r0, #5
 8010b90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010b92:	2000      	movs	r0, #0
 8010b94:	4770      	bx	lr
 8010b96:	1f23      	subs	r3, r4, #4
 8010b98:	4628      	mov	r0, r5
 8010b9a:	2400      	movs	r4, #0
 8010b9c:	e000      	b.n	8010ba0 <ai_platform_get_activations_map+0x84>
 8010b9e:	4614      	mov	r4, r2
 8010ba0:	f850 2f04 	ldr.w	r2, [r0, #4]!
 8010ba4:	42b2      	cmp	r2, r6
 8010ba6:	d0d1      	beq.n	8010b4c <ai_platform_get_activations_map+0x30>
 8010ba8:	f843 2f04 	str.w	r2, [r3, #4]!
 8010bac:	1c62      	adds	r2, r4, #1
 8010bae:	4297      	cmp	r7, r2
 8010bb0:	d1f5      	bne.n	8010b9e <ai_platform_get_activations_map+0x82>
 8010bb2:	3402      	adds	r4, #2
 8010bb4:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8010bb8:	42b3      	cmp	r3, r6
 8010bba:	d1c9      	bne.n	8010b50 <ai_platform_get_activations_map+0x34>
 8010bbc:	2001      	movs	r0, #1
 8010bbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010bc0:	a1facade 	.word	0xa1facade

08010bc4 <ai_platform_bind_network_params>:
 8010bc4:	b1a0      	cbz	r0, 8010bf0 <ai_platform_bind_network_params+0x2c>
 8010bc6:	b1b1      	cbz	r1, 8010bf6 <ai_platform_bind_network_params+0x32>
 8010bc8:	b1c2      	cbz	r2, 8010bfc <ai_platform_bind_network_params+0x38>
 8010bca:	b410      	push	{r4}
 8010bcc:	4603      	mov	r3, r0
 8010bce:	4c0d      	ldr	r4, [pc, #52]	; (8010c04 <ai_platform_bind_network_params+0x40>)
 8010bd0:	f843 4b04 	str.w	r4, [r3], #4
 8010bd4:	f100 0c0c 	add.w	ip, r0, #12
 8010bd8:	c903      	ldmia	r1, {r0, r1}
 8010bda:	e883 0003 	stmia.w	r3, {r0, r1}
 8010bde:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010be2:	e88c 0003 	stmia.w	ip, {r0, r1}
 8010be6:	2301      	movs	r3, #1
 8010be8:	4618      	mov	r0, r3
 8010bea:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010bee:	4770      	bx	lr
 8010bf0:	4603      	mov	r3, r0
 8010bf2:	4618      	mov	r0, r3
 8010bf4:	4770      	bx	lr
 8010bf6:	460b      	mov	r3, r1
 8010bf8:	4618      	mov	r0, r3
 8010bfa:	4770      	bx	lr
 8010bfc:	4613      	mov	r3, r2
 8010bfe:	4618      	mov	r0, r3
 8010c00:	4770      	bx	lr
 8010c02:	bf00      	nop
 8010c04:	a1facade 	.word	0xa1facade

08010c08 <ai_platform_network_get_error>:
 8010c08:	b510      	push	{r4, lr}
 8010c0a:	b1f0      	cbz	r0, 8010c4a <ai_platform_network_get_error+0x42>
 8010c0c:	4b2f      	ldr	r3, [pc, #188]	; (8010ccc <ai_platform_network_get_error+0xc4>)
 8010c0e:	6802      	ldr	r2, [r0, #0]
 8010c10:	429a      	cmp	r2, r3
 8010c12:	4604      	mov	r4, r0
 8010c14:	d119      	bne.n	8010c4a <ai_platform_network_get_error+0x42>
 8010c16:	f7ff ff29 	bl	8010a6c <_ai_platform_acquire_crc>
 8010c1a:	4b2d      	ldr	r3, [pc, #180]	; (8010cd0 <ai_platform_network_get_error+0xc8>)
 8010c1c:	681b      	ldr	r3, [r3, #0]
 8010c1e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8010c22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010c26:	d03c      	beq.n	8010ca2 <ai_platform_network_get_error+0x9a>
 8010c28:	4a2a      	ldr	r2, [pc, #168]	; (8010cd4 <ai_platform_network_get_error+0xcc>)
 8010c2a:	2301      	movs	r3, #1
 8010c2c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8010c30:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8010c34:	2b00      	cmp	r3, #0
 8010c36:	d1fb      	bne.n	8010c30 <ai_platform_network_get_error+0x28>
 8010c38:	4b27      	ldr	r3, [pc, #156]	; (8010cd8 <ai_platform_network_get_error+0xd0>)
 8010c3a:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8010c3e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8010c42:	4b26      	ldr	r3, [pc, #152]	; (8010cdc <ai_platform_network_get_error+0xd4>)
 8010c44:	429a      	cmp	r2, r3
 8010c46:	d038      	beq.n	8010cba <ai_platform_network_get_error+0xb2>
 8010c48:	e7fe      	b.n	8010c48 <ai_platform_network_get_error+0x40>
 8010c4a:	f7ff ff0f 	bl	8010a6c <_ai_platform_acquire_crc>
 8010c4e:	4b20      	ldr	r3, [pc, #128]	; (8010cd0 <ai_platform_network_get_error+0xc8>)
 8010c50:	681b      	ldr	r3, [r3, #0]
 8010c52:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8010c56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010c5a:	d010      	beq.n	8010c7e <ai_platform_network_get_error+0x76>
 8010c5c:	4a1d      	ldr	r2, [pc, #116]	; (8010cd4 <ai_platform_network_get_error+0xcc>)
 8010c5e:	2301      	movs	r3, #1
 8010c60:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8010c64:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8010c68:	2b00      	cmp	r3, #0
 8010c6a:	d1fb      	bne.n	8010c64 <ai_platform_network_get_error+0x5c>
 8010c6c:	4b1a      	ldr	r3, [pc, #104]	; (8010cd8 <ai_platform_network_get_error+0xd0>)
 8010c6e:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8010c72:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8010c76:	4b19      	ldr	r3, [pc, #100]	; (8010cdc <ai_platform_network_get_error+0xd4>)
 8010c78:	429a      	cmp	r2, r3
 8010c7a:	d00d      	beq.n	8010c98 <ai_platform_network_get_error+0x90>
 8010c7c:	e7fe      	b.n	8010c7c <ai_platform_network_get_error+0x74>
 8010c7e:	4a18      	ldr	r2, [pc, #96]	; (8010ce0 <ai_platform_network_get_error+0xd8>)
 8010c80:	2301      	movs	r3, #1
 8010c82:	6093      	str	r3, [r2, #8]
 8010c84:	6893      	ldr	r3, [r2, #8]
 8010c86:	2b00      	cmp	r3, #0
 8010c88:	d1fc      	bne.n	8010c84 <ai_platform_network_get_error+0x7c>
 8010c8a:	4b13      	ldr	r3, [pc, #76]	; (8010cd8 <ai_platform_network_get_error+0xd0>)
 8010c8c:	6013      	str	r3, [r2, #0]
 8010c8e:	6812      	ldr	r2, [r2, #0]
 8010c90:	4b12      	ldr	r3, [pc, #72]	; (8010cdc <ai_platform_network_get_error+0xd4>)
 8010c92:	429a      	cmp	r2, r3
 8010c94:	d000      	beq.n	8010c98 <ai_platform_network_get_error+0x90>
 8010c96:	e7fe      	b.n	8010c96 <ai_platform_network_get_error+0x8e>
 8010c98:	f7ff feea 	bl	8010a70 <_ai_platform_release_crc>
 8010c9c:	f241 0010 	movw	r0, #4112	; 0x1010
 8010ca0:	bd10      	pop	{r4, pc}
 8010ca2:	4a0f      	ldr	r2, [pc, #60]	; (8010ce0 <ai_platform_network_get_error+0xd8>)
 8010ca4:	2301      	movs	r3, #1
 8010ca6:	6093      	str	r3, [r2, #8]
 8010ca8:	6893      	ldr	r3, [r2, #8]
 8010caa:	2b00      	cmp	r3, #0
 8010cac:	d1fc      	bne.n	8010ca8 <ai_platform_network_get_error+0xa0>
 8010cae:	4b0a      	ldr	r3, [pc, #40]	; (8010cd8 <ai_platform_network_get_error+0xd0>)
 8010cb0:	6013      	str	r3, [r2, #0]
 8010cb2:	6812      	ldr	r2, [r2, #0]
 8010cb4:	4b09      	ldr	r3, [pc, #36]	; (8010cdc <ai_platform_network_get_error+0xd4>)
 8010cb6:	429a      	cmp	r2, r3
 8010cb8:	d107      	bne.n	8010cca <ai_platform_network_get_error+0xc2>
 8010cba:	f7ff fed9 	bl	8010a70 <_ai_platform_release_crc>
 8010cbe:	f104 0010 	add.w	r0, r4, #16
 8010cc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010cc6:	f000 be8d 	b.w	80119e4 <core_get_error>
 8010cca:	e7fe      	b.n	8010cca <ai_platform_network_get_error+0xc2>
 8010ccc:	a1c00100 	.word	0xa1c00100
 8010cd0:	e0042000 	.word	0xe0042000
 8010cd4:	58024000 	.word	0x58024000
 8010cd8:	f407a5c2 	.word	0xf407a5c2
 8010cdc:	b5e8b5cd 	.word	0xb5e8b5cd
 8010ce0:	40023000 	.word	0x40023000

08010ce4 <ai_platform_network_set_error>:
 8010ce4:	b110      	cbz	r0, 8010cec <ai_platform_network_set_error+0x8>
 8010ce6:	3010      	adds	r0, #16
 8010ce8:	f000 be82 	b.w	80119f0 <core_set_error>
 8010cec:	4770      	bx	lr
 8010cee:	bf00      	nop

08010cf0 <ai_platform_inputs_get>:
 8010cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010cf4:	b085      	sub	sp, #20
 8010cf6:	9102      	str	r1, [sp, #8]
 8010cf8:	b1f0      	cbz	r0, 8010d38 <ai_platform_inputs_get+0x48>
 8010cfa:	4b62      	ldr	r3, [pc, #392]	; (8010e84 <ai_platform_inputs_get+0x194>)
 8010cfc:	6802      	ldr	r2, [r0, #0]
 8010cfe:	429a      	cmp	r2, r3
 8010d00:	4607      	mov	r7, r0
 8010d02:	d119      	bne.n	8010d38 <ai_platform_inputs_get+0x48>
 8010d04:	f7ff feb2 	bl	8010a6c <_ai_platform_acquire_crc>
 8010d08:	4b5f      	ldr	r3, [pc, #380]	; (8010e88 <ai_platform_inputs_get+0x198>)
 8010d0a:	681b      	ldr	r3, [r3, #0]
 8010d0c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8010d10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010d14:	d03d      	beq.n	8010d92 <ai_platform_inputs_get+0xa2>
 8010d16:	4a5d      	ldr	r2, [pc, #372]	; (8010e8c <ai_platform_inputs_get+0x19c>)
 8010d18:	2301      	movs	r3, #1
 8010d1a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8010d1e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8010d22:	2b00      	cmp	r3, #0
 8010d24:	d1fb      	bne.n	8010d1e <ai_platform_inputs_get+0x2e>
 8010d26:	4b5a      	ldr	r3, [pc, #360]	; (8010e90 <ai_platform_inputs_get+0x1a0>)
 8010d28:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8010d2c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8010d30:	4b58      	ldr	r3, [pc, #352]	; (8010e94 <ai_platform_inputs_get+0x1a4>)
 8010d32:	429a      	cmp	r2, r3
 8010d34:	d039      	beq.n	8010daa <ai_platform_inputs_get+0xba>
 8010d36:	e7fe      	b.n	8010d36 <ai_platform_inputs_get+0x46>
 8010d38:	f7ff fe98 	bl	8010a6c <_ai_platform_acquire_crc>
 8010d3c:	4b52      	ldr	r3, [pc, #328]	; (8010e88 <ai_platform_inputs_get+0x198>)
 8010d3e:	681b      	ldr	r3, [r3, #0]
 8010d40:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8010d44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010d48:	d010      	beq.n	8010d6c <ai_platform_inputs_get+0x7c>
 8010d4a:	4a50      	ldr	r2, [pc, #320]	; (8010e8c <ai_platform_inputs_get+0x19c>)
 8010d4c:	2301      	movs	r3, #1
 8010d4e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8010d52:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8010d56:	2b00      	cmp	r3, #0
 8010d58:	d1fb      	bne.n	8010d52 <ai_platform_inputs_get+0x62>
 8010d5a:	4b4d      	ldr	r3, [pc, #308]	; (8010e90 <ai_platform_inputs_get+0x1a0>)
 8010d5c:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8010d60:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8010d64:	4b4b      	ldr	r3, [pc, #300]	; (8010e94 <ai_platform_inputs_get+0x1a4>)
 8010d66:	429a      	cmp	r2, r3
 8010d68:	d00d      	beq.n	8010d86 <ai_platform_inputs_get+0x96>
 8010d6a:	e7fe      	b.n	8010d6a <ai_platform_inputs_get+0x7a>
 8010d6c:	4a4a      	ldr	r2, [pc, #296]	; (8010e98 <ai_platform_inputs_get+0x1a8>)
 8010d6e:	2301      	movs	r3, #1
 8010d70:	6093      	str	r3, [r2, #8]
 8010d72:	6893      	ldr	r3, [r2, #8]
 8010d74:	2b00      	cmp	r3, #0
 8010d76:	d1fc      	bne.n	8010d72 <ai_platform_inputs_get+0x82>
 8010d78:	4b45      	ldr	r3, [pc, #276]	; (8010e90 <ai_platform_inputs_get+0x1a0>)
 8010d7a:	6013      	str	r3, [r2, #0]
 8010d7c:	6812      	ldr	r2, [r2, #0]
 8010d7e:	4b45      	ldr	r3, [pc, #276]	; (8010e94 <ai_platform_inputs_get+0x1a4>)
 8010d80:	429a      	cmp	r2, r3
 8010d82:	d000      	beq.n	8010d86 <ai_platform_inputs_get+0x96>
 8010d84:	e7fe      	b.n	8010d84 <ai_platform_inputs_get+0x94>
 8010d86:	f7ff fe73 	bl	8010a70 <_ai_platform_release_crc>
 8010d8a:	2000      	movs	r0, #0
 8010d8c:	b005      	add	sp, #20
 8010d8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d92:	4a41      	ldr	r2, [pc, #260]	; (8010e98 <ai_platform_inputs_get+0x1a8>)
 8010d94:	2301      	movs	r3, #1
 8010d96:	6093      	str	r3, [r2, #8]
 8010d98:	6893      	ldr	r3, [r2, #8]
 8010d9a:	2b00      	cmp	r3, #0
 8010d9c:	d1fc      	bne.n	8010d98 <ai_platform_inputs_get+0xa8>
 8010d9e:	4b3c      	ldr	r3, [pc, #240]	; (8010e90 <ai_platform_inputs_get+0x1a0>)
 8010da0:	6013      	str	r3, [r2, #0]
 8010da2:	6812      	ldr	r2, [r2, #0]
 8010da4:	4b3b      	ldr	r3, [pc, #236]	; (8010e94 <ai_platform_inputs_get+0x1a4>)
 8010da6:	429a      	cmp	r2, r3
 8010da8:	d155      	bne.n	8010e56 <ai_platform_inputs_get+0x166>
 8010daa:	f7ff fe61 	bl	8010a70 <_ai_platform_release_crc>
 8010dae:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8010db0:	2b00      	cmp	r3, #0
 8010db2:	d051      	beq.n	8010e58 <ai_platform_inputs_get+0x168>
 8010db4:	f8d7 a030 	ldr.w	sl, [r7, #48]	; 0x30
 8010db8:	f1ba 0f00 	cmp.w	sl, #0
 8010dbc:	d04c      	beq.n	8010e58 <ai_platform_inputs_get+0x168>
 8010dbe:	f04f 0b00 	mov.w	fp, #0
 8010dc2:	465d      	mov	r5, fp
 8010dc4:	9703      	str	r7, [sp, #12]
 8010dc6:	e016      	b.n	8010df6 <ai_platform_inputs_get+0x106>
 8010dc8:	9901      	ldr	r1, [sp, #4]
 8010dca:	2301      	movs	r3, #1
 8010dcc:	507b      	str	r3, [r7, r1]
 8010dce:	69b1      	ldr	r1, [r6, #24]
 8010dd0:	6849      	ldr	r1, [r1, #4]
 8010dd2:	6121      	str	r1, [r4, #16]
 8010dd4:	f04f 0301 	mov.w	r3, #1
 8010dd8:	7523      	strb	r3, [r4, #20]
 8010dda:	e9c4 c200 	strd	ip, r2, [r4]
 8010dde:	6962      	ldr	r2, [r4, #20]
 8010de0:	60a0      	str	r0, [r4, #8]
 8010de2:	2300      	movs	r3, #0
 8010de4:	f369 221f 	bfi	r2, r9, #8, #24
 8010de8:	f8c4 8018 	str.w	r8, [r4, #24]
 8010dec:	60e3      	str	r3, [r4, #12]
 8010dee:	3501      	adds	r5, #1
 8010df0:	f10b 0b1c 	add.w	fp, fp, #28
 8010df4:	6162      	str	r2, [r4, #20]
 8010df6:	f8ba 3000 	ldrh.w	r3, [sl]
 8010dfa:	42ab      	cmp	r3, r5
 8010dfc:	b2aa      	uxth	r2, r5
 8010dfe:	d93a      	bls.n	8010e76 <ai_platform_inputs_get+0x186>
 8010e00:	f8da 3004 	ldr.w	r3, [sl, #4]
 8010e04:	00e9      	lsls	r1, r5, #3
 8010e06:	9101      	str	r1, [sp, #4]
 8010e08:	2b00      	cmp	r3, #0
 8010e0a:	d034      	beq.n	8010e76 <ai_platform_inputs_get+0x186>
 8010e0c:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8010e10:	2e00      	cmp	r6, #0
 8010e12:	d030      	beq.n	8010e76 <ai_platform_inputs_get+0x186>
 8010e14:	f8da 3008 	ldr.w	r3, [sl, #8]
 8010e18:	69b2      	ldr	r2, [r6, #24]
 8010e1a:	f8d6 800c 	ldr.w	r8, [r6, #12]
 8010e1e:	6810      	ldr	r0, [r2, #0]
 8010e20:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 8010e24:	68b3      	ldr	r3, [r6, #8]
 8010e26:	f3c3 2917 	ubfx	r9, r3, #8, #24
 8010e2a:	f001 fa05 	bl	8012238 <ai_array_to_buffer_fmt>
 8010e2e:	69b1      	ldr	r1, [r6, #24]
 8010e30:	4684      	mov	ip, r0
 8010e32:	eb07 00c5 	add.w	r0, r7, r5, lsl #3
 8010e36:	688a      	ldr	r2, [r1, #8]
 8010e38:	445c      	add	r4, fp
 8010e3a:	2800      	cmp	r0, #0
 8010e3c:	d0c8      	beq.n	8010dd0 <ai_platform_inputs_get+0xe0>
 8010e3e:	2100      	movs	r1, #0
 8010e40:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 8010e44:	6831      	ldr	r1, [r6, #0]
 8010e46:	6041      	str	r1, [r0, #4]
 8010e48:	b111      	cbz	r1, 8010e50 <ai_platform_inputs_get+0x160>
 8010e4a:	8849      	ldrh	r1, [r1, #2]
 8010e4c:	2900      	cmp	r1, #0
 8010e4e:	d1bb      	bne.n	8010dc8 <ai_platform_inputs_get+0xd8>
 8010e50:	69b1      	ldr	r1, [r6, #24]
 8010e52:	2000      	movs	r0, #0
 8010e54:	e7bc      	b.n	8010dd0 <ai_platform_inputs_get+0xe0>
 8010e56:	e7fe      	b.n	8010e56 <ai_platform_inputs_get+0x166>
 8010e58:	2218      	movs	r2, #24
 8010e5a:	2111      	movs	r1, #17
 8010e5c:	f107 0010 	add.w	r0, r7, #16
 8010e60:	f000 fdc6 	bl	80119f0 <core_set_error>
 8010e64:	2200      	movs	r2, #0
 8010e66:	4610      	mov	r0, r2
 8010e68:	9b02      	ldr	r3, [sp, #8]
 8010e6a:	2b00      	cmp	r3, #0
 8010e6c:	d08e      	beq.n	8010d8c <ai_platform_inputs_get+0x9c>
 8010e6e:	801a      	strh	r2, [r3, #0]
 8010e70:	b005      	add	sp, #20
 8010e72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e76:	9f03      	ldr	r7, [sp, #12]
 8010e78:	2a00      	cmp	r2, #0
 8010e7a:	d0ed      	beq.n	8010e58 <ai_platform_inputs_get+0x168>
 8010e7c:	f8da 3008 	ldr.w	r3, [sl, #8]
 8010e80:	6858      	ldr	r0, [r3, #4]
 8010e82:	e7f1      	b.n	8010e68 <ai_platform_inputs_get+0x178>
 8010e84:	a1c00100 	.word	0xa1c00100
 8010e88:	e0042000 	.word	0xe0042000
 8010e8c:	58024000 	.word	0x58024000
 8010e90:	f407a5c2 	.word	0xf407a5c2
 8010e94:	b5e8b5cd 	.word	0xb5e8b5cd
 8010e98:	40023000 	.word	0x40023000

08010e9c <ai_platform_outputs_get>:
 8010e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ea0:	b085      	sub	sp, #20
 8010ea2:	9102      	str	r1, [sp, #8]
 8010ea4:	b1f0      	cbz	r0, 8010ee4 <ai_platform_outputs_get+0x48>
 8010ea6:	4b5f      	ldr	r3, [pc, #380]	; (8011024 <ai_platform_outputs_get+0x188>)
 8010ea8:	6802      	ldr	r2, [r0, #0]
 8010eaa:	429a      	cmp	r2, r3
 8010eac:	4607      	mov	r7, r0
 8010eae:	d119      	bne.n	8010ee4 <ai_platform_outputs_get+0x48>
 8010eb0:	f7ff fddc 	bl	8010a6c <_ai_platform_acquire_crc>
 8010eb4:	4b5c      	ldr	r3, [pc, #368]	; (8011028 <ai_platform_outputs_get+0x18c>)
 8010eb6:	681b      	ldr	r3, [r3, #0]
 8010eb8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8010ebc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010ec0:	d03d      	beq.n	8010f3e <ai_platform_outputs_get+0xa2>
 8010ec2:	4a5a      	ldr	r2, [pc, #360]	; (801102c <ai_platform_outputs_get+0x190>)
 8010ec4:	2301      	movs	r3, #1
 8010ec6:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8010eca:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8010ece:	2b00      	cmp	r3, #0
 8010ed0:	d1fb      	bne.n	8010eca <ai_platform_outputs_get+0x2e>
 8010ed2:	4b57      	ldr	r3, [pc, #348]	; (8011030 <ai_platform_outputs_get+0x194>)
 8010ed4:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8010ed8:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8010edc:	4b55      	ldr	r3, [pc, #340]	; (8011034 <ai_platform_outputs_get+0x198>)
 8010ede:	429a      	cmp	r2, r3
 8010ee0:	d039      	beq.n	8010f56 <ai_platform_outputs_get+0xba>
 8010ee2:	e7fe      	b.n	8010ee2 <ai_platform_outputs_get+0x46>
 8010ee4:	f7ff fdc2 	bl	8010a6c <_ai_platform_acquire_crc>
 8010ee8:	4b4f      	ldr	r3, [pc, #316]	; (8011028 <ai_platform_outputs_get+0x18c>)
 8010eea:	681b      	ldr	r3, [r3, #0]
 8010eec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8010ef0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010ef4:	d010      	beq.n	8010f18 <ai_platform_outputs_get+0x7c>
 8010ef6:	4a4d      	ldr	r2, [pc, #308]	; (801102c <ai_platform_outputs_get+0x190>)
 8010ef8:	2301      	movs	r3, #1
 8010efa:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8010efe:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8010f02:	2b00      	cmp	r3, #0
 8010f04:	d1fb      	bne.n	8010efe <ai_platform_outputs_get+0x62>
 8010f06:	4b4a      	ldr	r3, [pc, #296]	; (8011030 <ai_platform_outputs_get+0x194>)
 8010f08:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8010f0c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8010f10:	4b48      	ldr	r3, [pc, #288]	; (8011034 <ai_platform_outputs_get+0x198>)
 8010f12:	429a      	cmp	r2, r3
 8010f14:	d00d      	beq.n	8010f32 <ai_platform_outputs_get+0x96>
 8010f16:	e7fe      	b.n	8010f16 <ai_platform_outputs_get+0x7a>
 8010f18:	4a47      	ldr	r2, [pc, #284]	; (8011038 <ai_platform_outputs_get+0x19c>)
 8010f1a:	2301      	movs	r3, #1
 8010f1c:	6093      	str	r3, [r2, #8]
 8010f1e:	6893      	ldr	r3, [r2, #8]
 8010f20:	2b00      	cmp	r3, #0
 8010f22:	d1fc      	bne.n	8010f1e <ai_platform_outputs_get+0x82>
 8010f24:	4b42      	ldr	r3, [pc, #264]	; (8011030 <ai_platform_outputs_get+0x194>)
 8010f26:	6013      	str	r3, [r2, #0]
 8010f28:	6812      	ldr	r2, [r2, #0]
 8010f2a:	4b42      	ldr	r3, [pc, #264]	; (8011034 <ai_platform_outputs_get+0x198>)
 8010f2c:	429a      	cmp	r2, r3
 8010f2e:	d000      	beq.n	8010f32 <ai_platform_outputs_get+0x96>
 8010f30:	e7fe      	b.n	8010f30 <ai_platform_outputs_get+0x94>
 8010f32:	f7ff fd9d 	bl	8010a70 <_ai_platform_release_crc>
 8010f36:	2000      	movs	r0, #0
 8010f38:	b005      	add	sp, #20
 8010f3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f3e:	4a3e      	ldr	r2, [pc, #248]	; (8011038 <ai_platform_outputs_get+0x19c>)
 8010f40:	2301      	movs	r3, #1
 8010f42:	6093      	str	r3, [r2, #8]
 8010f44:	6893      	ldr	r3, [r2, #8]
 8010f46:	2b00      	cmp	r3, #0
 8010f48:	d1fc      	bne.n	8010f44 <ai_platform_outputs_get+0xa8>
 8010f4a:	4b39      	ldr	r3, [pc, #228]	; (8011030 <ai_platform_outputs_get+0x194>)
 8010f4c:	6013      	str	r3, [r2, #0]
 8010f4e:	6812      	ldr	r2, [r2, #0]
 8010f50:	4b38      	ldr	r3, [pc, #224]	; (8011034 <ai_platform_outputs_get+0x198>)
 8010f52:	429a      	cmp	r2, r3
 8010f54:	d150      	bne.n	8010ff8 <ai_platform_outputs_get+0x15c>
 8010f56:	f7ff fd8b 	bl	8010a70 <_ai_platform_release_crc>
 8010f5a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8010f5c:	2b01      	cmp	r3, #1
 8010f5e:	d958      	bls.n	8011012 <ai_platform_outputs_get+0x176>
 8010f60:	f04f 0b00 	mov.w	fp, #0
 8010f64:	f8d7 a030 	ldr.w	sl, [r7, #48]	; 0x30
 8010f68:	9703      	str	r7, [sp, #12]
 8010f6a:	465d      	mov	r5, fp
 8010f6c:	e016      	b.n	8010f9c <ai_platform_outputs_get+0x100>
 8010f6e:	9901      	ldr	r1, [sp, #4]
 8010f70:	2301      	movs	r3, #1
 8010f72:	507b      	str	r3, [r7, r1]
 8010f74:	69b1      	ldr	r1, [r6, #24]
 8010f76:	6849      	ldr	r1, [r1, #4]
 8010f78:	6121      	str	r1, [r4, #16]
 8010f7a:	f04f 0301 	mov.w	r3, #1
 8010f7e:	7523      	strb	r3, [r4, #20]
 8010f80:	e9c4 c200 	strd	ip, r2, [r4]
 8010f84:	6962      	ldr	r2, [r4, #20]
 8010f86:	60a0      	str	r0, [r4, #8]
 8010f88:	2300      	movs	r3, #0
 8010f8a:	f369 221f 	bfi	r2, r9, #8, #24
 8010f8e:	f8c4 8018 	str.w	r8, [r4, #24]
 8010f92:	60e3      	str	r3, [r4, #12]
 8010f94:	3501      	adds	r5, #1
 8010f96:	f10b 0b1c 	add.w	fp, fp, #28
 8010f9a:	6162      	str	r2, [r4, #20]
 8010f9c:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8010fa0:	42ab      	cmp	r3, r5
 8010fa2:	b2aa      	uxth	r2, r5
 8010fa4:	d929      	bls.n	8010ffa <ai_platform_outputs_get+0x15e>
 8010fa6:	f8da 3010 	ldr.w	r3, [sl, #16]
 8010faa:	00e9      	lsls	r1, r5, #3
 8010fac:	9101      	str	r1, [sp, #4]
 8010fae:	b323      	cbz	r3, 8010ffa <ai_platform_outputs_get+0x15e>
 8010fb0:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8010fb4:	b30e      	cbz	r6, 8010ffa <ai_platform_outputs_get+0x15e>
 8010fb6:	f8da 3014 	ldr.w	r3, [sl, #20]
 8010fba:	69b2      	ldr	r2, [r6, #24]
 8010fbc:	f8d6 800c 	ldr.w	r8, [r6, #12]
 8010fc0:	6810      	ldr	r0, [r2, #0]
 8010fc2:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 8010fc6:	68b3      	ldr	r3, [r6, #8]
 8010fc8:	f3c3 2917 	ubfx	r9, r3, #8, #24
 8010fcc:	f001 f934 	bl	8012238 <ai_array_to_buffer_fmt>
 8010fd0:	69b1      	ldr	r1, [r6, #24]
 8010fd2:	4684      	mov	ip, r0
 8010fd4:	eb07 00c5 	add.w	r0, r7, r5, lsl #3
 8010fd8:	688a      	ldr	r2, [r1, #8]
 8010fda:	445c      	add	r4, fp
 8010fdc:	2800      	cmp	r0, #0
 8010fde:	d0ca      	beq.n	8010f76 <ai_platform_outputs_get+0xda>
 8010fe0:	2100      	movs	r1, #0
 8010fe2:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 8010fe6:	6831      	ldr	r1, [r6, #0]
 8010fe8:	6041      	str	r1, [r0, #4]
 8010fea:	b111      	cbz	r1, 8010ff2 <ai_platform_outputs_get+0x156>
 8010fec:	8849      	ldrh	r1, [r1, #2]
 8010fee:	2900      	cmp	r1, #0
 8010ff0:	d1bd      	bne.n	8010f6e <ai_platform_outputs_get+0xd2>
 8010ff2:	69b1      	ldr	r1, [r6, #24]
 8010ff4:	2000      	movs	r0, #0
 8010ff6:	e7be      	b.n	8010f76 <ai_platform_outputs_get+0xda>
 8010ff8:	e7fe      	b.n	8010ff8 <ai_platform_outputs_get+0x15c>
 8010ffa:	9f03      	ldr	r7, [sp, #12]
 8010ffc:	b14a      	cbz	r2, 8011012 <ai_platform_outputs_get+0x176>
 8010ffe:	f8da 3014 	ldr.w	r3, [sl, #20]
 8011002:	6858      	ldr	r0, [r3, #4]
 8011004:	9b02      	ldr	r3, [sp, #8]
 8011006:	2b00      	cmp	r3, #0
 8011008:	d096      	beq.n	8010f38 <ai_platform_outputs_get+0x9c>
 801100a:	801a      	strh	r2, [r3, #0]
 801100c:	b005      	add	sp, #20
 801100e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011012:	2218      	movs	r2, #24
 8011014:	2111      	movs	r1, #17
 8011016:	f107 0010 	add.w	r0, r7, #16
 801101a:	f000 fce9 	bl	80119f0 <core_set_error>
 801101e:	2200      	movs	r2, #0
 8011020:	4610      	mov	r0, r2
 8011022:	e7ef      	b.n	8011004 <ai_platform_outputs_get+0x168>
 8011024:	a1c00100 	.word	0xa1c00100
 8011028:	e0042000 	.word	0xe0042000
 801102c:	58024000 	.word	0x58024000
 8011030:	f407a5c2 	.word	0xf407a5c2
 8011034:	b5e8b5cd 	.word	0xb5e8b5cd
 8011038:	40023000 	.word	0x40023000

0801103c <ai_platform_network_create>:
 801103c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011040:	b083      	sub	sp, #12
 8011042:	4606      	mov	r6, r0
 8011044:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
 8011048:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 801104c:	4615      	mov	r5, r2
 801104e:	461f      	mov	r7, r3
 8011050:	f7ff fd0c 	bl	8010a6c <_ai_platform_acquire_crc>
 8011054:	b188      	cbz	r0, 801107a <ai_platform_network_create+0x3e>
 8011056:	4a5d      	ldr	r2, [pc, #372]	; (80111cc <ai_platform_network_create+0x190>)
 8011058:	6812      	ldr	r2, [r2, #0]
 801105a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 801105e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8011062:	4603      	mov	r3, r0
 8011064:	d00e      	beq.n	8011084 <ai_platform_network_create+0x48>
 8011066:	4a5a      	ldr	r2, [pc, #360]	; (80111d0 <ai_platform_network_create+0x194>)
 8011068:	2118      	movs	r1, #24
 801106a:	f8c2 1c08 	str.w	r1, [r2, #3080]	; 0xc08
 801106e:	f8d2 1c08 	ldr.w	r1, [r2, #3080]	; 0xc08
 8011072:	2918      	cmp	r1, #24
 8011074:	d018      	beq.n	80110a8 <ai_platform_network_create+0x6c>
 8011076:	f7ff fcfb 	bl	8010a70 <_ai_platform_release_crc>
 801107a:	f244 1033 	movw	r0, #16691	; 0x4133
 801107e:	b003      	add	sp, #12
 8011080:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011084:	4a53      	ldr	r2, [pc, #332]	; (80111d4 <ai_platform_network_create+0x198>)
 8011086:	2101      	movs	r1, #1
 8011088:	6091      	str	r1, [r2, #8]
 801108a:	2114      	movs	r1, #20
 801108c:	e001      	b.n	8011092 <ai_platform_network_create+0x56>
 801108e:	3901      	subs	r1, #1
 8011090:	d002      	beq.n	8011098 <ai_platform_network_create+0x5c>
 8011092:	6894      	ldr	r4, [r2, #8]
 8011094:	2c00      	cmp	r4, #0
 8011096:	d1fa      	bne.n	801108e <ai_platform_network_create+0x52>
 8011098:	4a4e      	ldr	r2, [pc, #312]	; (80111d4 <ai_platform_network_create+0x198>)
 801109a:	6891      	ldr	r1, [r2, #8]
 801109c:	b911      	cbnz	r1, 80110a4 <ai_platform_network_create+0x68>
 801109e:	6812      	ldr	r2, [r2, #0]
 80110a0:	3201      	adds	r2, #1
 80110a2:	d008      	beq.n	80110b6 <ai_platform_network_create+0x7a>
 80110a4:	4618      	mov	r0, r3
 80110a6:	e7e6      	b.n	8011076 <ai_platform_network_create+0x3a>
 80110a8:	2101      	movs	r1, #1
 80110aa:	f8c2 1c08 	str.w	r1, [r2, #3080]	; 0xc08
 80110ae:	f8d2 1c08 	ldr.w	r1, [r2, #3080]	; 0xc08
 80110b2:	2900      	cmp	r1, #0
 80110b4:	d1fb      	bne.n	80110ae <ai_platform_network_create+0x72>
 80110b6:	4618      	mov	r0, r3
 80110b8:	f7ff fcda 	bl	8010a70 <_ai_platform_release_crc>
 80110bc:	f7ff fcd6 	bl	8010a6c <_ai_platform_acquire_crc>
 80110c0:	4b42      	ldr	r3, [pc, #264]	; (80111cc <ai_platform_network_create+0x190>)
 80110c2:	681b      	ldr	r3, [r3, #0]
 80110c4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80110c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80110cc:	d010      	beq.n	80110f0 <ai_platform_network_create+0xb4>
 80110ce:	4b40      	ldr	r3, [pc, #256]	; (80111d0 <ai_platform_network_create+0x194>)
 80110d0:	2201      	movs	r2, #1
 80110d2:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 80110d6:	f8d3 1c08 	ldr.w	r1, [r3, #3080]	; 0xc08
 80110da:	2900      	cmp	r1, #0
 80110dc:	d1fb      	bne.n	80110d6 <ai_platform_network_create+0x9a>
 80110de:	4a3e      	ldr	r2, [pc, #248]	; (80111d8 <ai_platform_network_create+0x19c>)
 80110e0:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 80110e4:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 80110e8:	4b3c      	ldr	r3, [pc, #240]	; (80111dc <ai_platform_network_create+0x1a0>)
 80110ea:	429a      	cmp	r2, r3
 80110ec:	d00c      	beq.n	8011108 <ai_platform_network_create+0xcc>
 80110ee:	e7fe      	b.n	80110ee <ai_platform_network_create+0xb2>
 80110f0:	4a38      	ldr	r2, [pc, #224]	; (80111d4 <ai_platform_network_create+0x198>)
 80110f2:	2301      	movs	r3, #1
 80110f4:	6093      	str	r3, [r2, #8]
 80110f6:	6893      	ldr	r3, [r2, #8]
 80110f8:	2b00      	cmp	r3, #0
 80110fa:	d1fc      	bne.n	80110f6 <ai_platform_network_create+0xba>
 80110fc:	4b36      	ldr	r3, [pc, #216]	; (80111d8 <ai_platform_network_create+0x19c>)
 80110fe:	6013      	str	r3, [r2, #0]
 8011100:	6812      	ldr	r2, [r2, #0]
 8011102:	4b36      	ldr	r3, [pc, #216]	; (80111dc <ai_platform_network_create+0x1a0>)
 8011104:	429a      	cmp	r2, r3
 8011106:	d122      	bne.n	801114e <ai_platform_network_create+0x112>
 8011108:	f7ff fcb2 	bl	8010a70 <_ai_platform_release_crc>
 801110c:	b38e      	cbz	r6, 8011172 <ai_platform_network_create+0x136>
 801110e:	4b34      	ldr	r3, [pc, #208]	; (80111e0 <ai_platform_network_create+0x1a4>)
 8011110:	602b      	str	r3, [r5, #0]
 8011112:	6035      	str	r5, [r6, #0]
 8011114:	f000 fc64 	bl	80119e0 <core_init>
 8011118:	b1d0      	cbz	r0, 8011150 <ai_platform_network_create+0x114>
 801111a:	f7ff fca7 	bl	8010a6c <_ai_platform_acquire_crc>
 801111e:	4b2b      	ldr	r3, [pc, #172]	; (80111cc <ai_platform_network_create+0x190>)
 8011120:	681b      	ldr	r3, [r3, #0]
 8011122:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8011126:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801112a:	d025      	beq.n	8011178 <ai_platform_network_create+0x13c>
 801112c:	4a28      	ldr	r2, [pc, #160]	; (80111d0 <ai_platform_network_create+0x194>)
 801112e:	2301      	movs	r3, #1
 8011130:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8011134:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8011138:	2b00      	cmp	r3, #0
 801113a:	d1fb      	bne.n	8011134 <ai_platform_network_create+0xf8>
 801113c:	4b26      	ldr	r3, [pc, #152]	; (80111d8 <ai_platform_network_create+0x19c>)
 801113e:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8011142:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8011146:	4b25      	ldr	r3, [pc, #148]	; (80111dc <ai_platform_network_create+0x1a0>)
 8011148:	429a      	cmp	r2, r3
 801114a:	d022      	beq.n	8011192 <ai_platform_network_create+0x156>
 801114c:	e7fe      	b.n	801114c <ai_platform_network_create+0x110>
 801114e:	e7fe      	b.n	801114e <ai_platform_network_create+0x112>
 8011150:	2430      	movs	r4, #48	; 0x30
 8011152:	2300      	movs	r3, #0
 8011154:	6033      	str	r3, [r6, #0]
 8011156:	2610      	movs	r6, #16
 8011158:	464a      	mov	r2, r9
 801115a:	4641      	mov	r1, r8
 801115c:	4638      	mov	r0, r7
 801115e:	f001 f84d 	bl	80121fc <ai_version_get>
 8011162:	4603      	mov	r3, r0
 8011164:	2000      	movs	r0, #0
 8011166:	f364 0007 	bfi	r0, r4, #0, #8
 801116a:	64ab      	str	r3, [r5, #72]	; 0x48
 801116c:	f366 201f 	bfi	r0, r6, #8, #24
 8011170:	e785      	b.n	801107e <ai_platform_network_create+0x42>
 8011172:	f241 0010 	movw	r0, #4112	; 0x1010
 8011176:	e782      	b.n	801107e <ai_platform_network_create+0x42>
 8011178:	4a16      	ldr	r2, [pc, #88]	; (80111d4 <ai_platform_network_create+0x198>)
 801117a:	2301      	movs	r3, #1
 801117c:	6093      	str	r3, [r2, #8]
 801117e:	6893      	ldr	r3, [r2, #8]
 8011180:	2b00      	cmp	r3, #0
 8011182:	d1fc      	bne.n	801117e <ai_platform_network_create+0x142>
 8011184:	4b14      	ldr	r3, [pc, #80]	; (80111d8 <ai_platform_network_create+0x19c>)
 8011186:	6013      	str	r3, [r2, #0]
 8011188:	6812      	ldr	r2, [r2, #0]
 801118a:	4b14      	ldr	r3, [pc, #80]	; (80111dc <ai_platform_network_create+0x1a0>)
 801118c:	429a      	cmp	r2, r3
 801118e:	d000      	beq.n	8011192 <ai_platform_network_create+0x156>
 8011190:	e7fe      	b.n	8011190 <ai_platform_network_create+0x154>
 8011192:	f7ff fc6d 	bl	8010a70 <_ai_platform_release_crc>
 8011196:	2200      	movs	r2, #0
 8011198:	4641      	mov	r1, r8
 801119a:	4638      	mov	r0, r7
 801119c:	f001 f82e 	bl	80121fc <ai_version_get>
 80111a0:	2200      	movs	r2, #0
 80111a2:	4604      	mov	r4, r0
 80111a4:	2105      	movs	r1, #5
 80111a6:	2001      	movs	r0, #1
 80111a8:	f001 f828 	bl	80121fc <ai_version_get>
 80111ac:	4284      	cmp	r4, r0
 80111ae:	d001      	beq.n	80111b4 <ai_platform_network_create+0x178>
 80111b0:	2401      	movs	r4, #1
 80111b2:	e7ce      	b.n	8011152 <ai_platform_network_create+0x116>
 80111b4:	4b0b      	ldr	r3, [pc, #44]	; (80111e4 <ai_platform_network_create+0x1a8>)
 80111b6:	9301      	str	r3, [sp, #4]
 80111b8:	a801      	add	r0, sp, #4
 80111ba:	f000 ff89 	bl	80120d0 <ai_check_custom_types>
 80111be:	b110      	cbz	r0, 80111c6 <ai_platform_network_create+0x18a>
 80111c0:	2600      	movs	r6, #0
 80111c2:	4634      	mov	r4, r6
 80111c4:	e7c8      	b.n	8011158 <ai_platform_network_create+0x11c>
 80111c6:	2402      	movs	r4, #2
 80111c8:	e7c3      	b.n	8011152 <ai_platform_network_create+0x116>
 80111ca:	bf00      	nop
 80111cc:	e0042000 	.word	0xe0042000
 80111d0:	58024000 	.word	0x58024000
 80111d4:	40023000 	.word	0x40023000
 80111d8:	f407a5c2 	.word	0xf407a5c2
 80111dc:	b5e8b5cd 	.word	0xb5e8b5cd
 80111e0:	a1c00100 	.word	0xa1c00100
 80111e4:	84048403 	.word	0x84048403

080111e8 <ai_platform_network_init>:
 80111e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80111ec:	b1f8      	cbz	r0, 801122e <ai_platform_network_init+0x46>
 80111ee:	4b6e      	ldr	r3, [pc, #440]	; (80113a8 <ai_platform_network_init+0x1c0>)
 80111f0:	6802      	ldr	r2, [r0, #0]
 80111f2:	429a      	cmp	r2, r3
 80111f4:	4604      	mov	r4, r0
 80111f6:	d11a      	bne.n	801122e <ai_platform_network_init+0x46>
 80111f8:	460e      	mov	r6, r1
 80111fa:	f7ff fc37 	bl	8010a6c <_ai_platform_acquire_crc>
 80111fe:	4b6b      	ldr	r3, [pc, #428]	; (80113ac <ai_platform_network_init+0x1c4>)
 8011200:	681b      	ldr	r3, [r3, #0]
 8011202:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8011206:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801120a:	d03d      	beq.n	8011288 <ai_platform_network_init+0xa0>
 801120c:	4a68      	ldr	r2, [pc, #416]	; (80113b0 <ai_platform_network_init+0x1c8>)
 801120e:	2301      	movs	r3, #1
 8011210:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8011214:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8011218:	2b00      	cmp	r3, #0
 801121a:	d1fb      	bne.n	8011214 <ai_platform_network_init+0x2c>
 801121c:	4b65      	ldr	r3, [pc, #404]	; (80113b4 <ai_platform_network_init+0x1cc>)
 801121e:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8011222:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8011226:	4b64      	ldr	r3, [pc, #400]	; (80113b8 <ai_platform_network_init+0x1d0>)
 8011228:	429a      	cmp	r2, r3
 801122a:	d039      	beq.n	80112a0 <ai_platform_network_init+0xb8>
 801122c:	e7fe      	b.n	801122c <ai_platform_network_init+0x44>
 801122e:	f7ff fc1d 	bl	8010a6c <_ai_platform_acquire_crc>
 8011232:	4b5e      	ldr	r3, [pc, #376]	; (80113ac <ai_platform_network_init+0x1c4>)
 8011234:	681b      	ldr	r3, [r3, #0]
 8011236:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801123a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801123e:	d010      	beq.n	8011262 <ai_platform_network_init+0x7a>
 8011240:	4a5b      	ldr	r2, [pc, #364]	; (80113b0 <ai_platform_network_init+0x1c8>)
 8011242:	2301      	movs	r3, #1
 8011244:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8011248:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 801124c:	2b00      	cmp	r3, #0
 801124e:	d1fb      	bne.n	8011248 <ai_platform_network_init+0x60>
 8011250:	4b58      	ldr	r3, [pc, #352]	; (80113b4 <ai_platform_network_init+0x1cc>)
 8011252:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8011256:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 801125a:	4b57      	ldr	r3, [pc, #348]	; (80113b8 <ai_platform_network_init+0x1d0>)
 801125c:	429a      	cmp	r2, r3
 801125e:	d00d      	beq.n	801127c <ai_platform_network_init+0x94>
 8011260:	e7fe      	b.n	8011260 <ai_platform_network_init+0x78>
 8011262:	4a56      	ldr	r2, [pc, #344]	; (80113bc <ai_platform_network_init+0x1d4>)
 8011264:	2301      	movs	r3, #1
 8011266:	6093      	str	r3, [r2, #8]
 8011268:	6893      	ldr	r3, [r2, #8]
 801126a:	2b00      	cmp	r3, #0
 801126c:	d1fc      	bne.n	8011268 <ai_platform_network_init+0x80>
 801126e:	4b51      	ldr	r3, [pc, #324]	; (80113b4 <ai_platform_network_init+0x1cc>)
 8011270:	6013      	str	r3, [r2, #0]
 8011272:	6812      	ldr	r2, [r2, #0]
 8011274:	4b50      	ldr	r3, [pc, #320]	; (80113b8 <ai_platform_network_init+0x1d0>)
 8011276:	429a      	cmp	r2, r3
 8011278:	d000      	beq.n	801127c <ai_platform_network_init+0x94>
 801127a:	e7fe      	b.n	801127a <ai_platform_network_init+0x92>
 801127c:	f7ff fbf8 	bl	8010a70 <_ai_platform_release_crc>
 8011280:	2600      	movs	r6, #0
 8011282:	4630      	mov	r0, r6
 8011284:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011288:	4a4c      	ldr	r2, [pc, #304]	; (80113bc <ai_platform_network_init+0x1d4>)
 801128a:	2301      	movs	r3, #1
 801128c:	6093      	str	r3, [r2, #8]
 801128e:	6893      	ldr	r3, [r2, #8]
 8011290:	2b00      	cmp	r3, #0
 8011292:	d1fc      	bne.n	801128e <ai_platform_network_init+0xa6>
 8011294:	4b47      	ldr	r3, [pc, #284]	; (80113b4 <ai_platform_network_init+0x1cc>)
 8011296:	6013      	str	r3, [r2, #0]
 8011298:	6812      	ldr	r2, [r2, #0]
 801129a:	4b47      	ldr	r3, [pc, #284]	; (80113b8 <ai_platform_network_init+0x1d0>)
 801129c:	429a      	cmp	r2, r3
 801129e:	d11c      	bne.n	80112da <ai_platform_network_init+0xf2>
 80112a0:	f7ff fbe6 	bl	8010a70 <_ai_platform_release_crc>
 80112a4:	2e00      	cmp	r6, #0
 80112a6:	d06f      	beq.n	8011388 <ai_platform_network_init+0x1a0>
 80112a8:	4b45      	ldr	r3, [pc, #276]	; (80113c0 <ai_platform_network_init+0x1d8>)
 80112aa:	6832      	ldr	r2, [r6, #0]
 80112ac:	429a      	cmp	r2, r3
 80112ae:	d115      	bne.n	80112dc <ai_platform_network_init+0xf4>
 80112b0:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 80112b4:	6933      	ldr	r3, [r6, #16]
 80112b6:	f8b6 e00c 	ldrh.w	lr, [r6, #12]
 80112ba:	89f7      	ldrh	r7, [r6, #14]
 80112bc:	62a3      	str	r3, [r4, #40]	; 0x28
 80112be:	e9c4 2107 	strd	r2, r1, [r4, #28]
 80112c2:	2303      	movs	r3, #3
 80112c4:	84e7      	strh	r7, [r4, #38]	; 0x26
 80112c6:	f8a4 e024 	strh.w	lr, [r4, #36]	; 0x24
 80112ca:	60e3      	str	r3, [r4, #12]
 80112cc:	4620      	mov	r0, r4
 80112ce:	4626      	mov	r6, r4
 80112d0:	f000 ff28 	bl	8012124 <ai_layers_init_all>
 80112d4:	4630      	mov	r0, r6
 80112d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80112da:	e7fe      	b.n	80112da <ai_platform_network_init+0xf2>
 80112dc:	2101      	movs	r1, #1
 80112de:	4630      	mov	r0, r6
 80112e0:	4635      	mov	r5, r6
 80112e2:	6876      	ldr	r6, [r6, #4]
 80112e4:	f7ff fb74 	bl	80109d0 <ai_buffer_get_size>
 80112e8:	f105 081c 	add.w	r8, r5, #28
 80112ec:	4681      	mov	r9, r0
 80112ee:	2101      	movs	r1, #1
 80112f0:	4640      	mov	r0, r8
 80112f2:	6a2f      	ldr	r7, [r5, #32]
 80112f4:	f7ff fb6c 	bl	80109d0 <ai_buffer_get_size>
 80112f8:	f1b9 0f00 	cmp.w	r9, #0
 80112fc:	d025      	beq.n	801134a <ai_platform_network_init+0x162>
 80112fe:	2201      	movs	r2, #1
 8011300:	4696      	mov	lr, r2
 8011302:	bb30      	cbnz	r0, 8011352 <ai_platform_network_init+0x16a>
 8011304:	4680      	mov	r8, r0
 8011306:	4607      	mov	r7, r0
 8011308:	b376      	cbz	r6, 8011368 <ai_platform_network_init+0x180>
 801130a:	8be3      	ldrh	r3, [r4, #30]
 801130c:	4573      	cmp	r3, lr
 801130e:	d323      	bcc.n	8011358 <ai_platform_network_init+0x170>
 8011310:	b142      	cbz	r2, 8011324 <ai_platform_network_init+0x13c>
 8011312:	46ac      	mov	ip, r5
 8011314:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011318:	6a25      	ldr	r5, [r4, #32]
 801131a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801131c:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8011320:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8011324:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8011326:	f8a4 e01e 	strh.w	lr, [r4, #30]
 801132a:	2600      	movs	r6, #0
 801132c:	42bb      	cmp	r3, r7
 801132e:	83a6      	strh	r6, [r4, #28]
 8011330:	d323      	bcc.n	801137a <ai_platform_network_init+0x192>
 8011332:	b37f      	cbz	r7, 8011394 <ai_platform_network_init+0x1ac>
 8011334:	46c4      	mov	ip, r8
 8011336:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801133a:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 801133c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801133e:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8011342:	46b6      	mov	lr, r6
 8011344:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8011348:	e7bb      	b.n	80112c2 <ai_platform_network_init+0xda>
 801134a:	464a      	mov	r2, r9
 801134c:	46ce      	mov	lr, r9
 801134e:	464d      	mov	r5, r9
 8011350:	e7d7      	b.n	8011302 <ai_platform_network_init+0x11a>
 8011352:	b30f      	cbz	r7, 8011398 <ai_platform_network_init+0x1b0>
 8011354:	2701      	movs	r7, #1
 8011356:	e7d7      	b.n	8011308 <ai_platform_network_init+0x120>
 8011358:	2212      	movs	r2, #18
 801135a:	2116      	movs	r1, #22
 801135c:	f104 0010 	add.w	r0, r4, #16
 8011360:	f000 fb46 	bl	80119f0 <core_set_error>
 8011364:	2600      	movs	r6, #0
 8011366:	e78c      	b.n	8011282 <ai_platform_network_init+0x9a>
 8011368:	f1b9 0f00 	cmp.w	r9, #0
 801136c:	d0cd      	beq.n	801130a <ai_platform_network_init+0x122>
 801136e:	2110      	movs	r1, #16
 8011370:	2212      	movs	r2, #18
 8011372:	1860      	adds	r0, r4, r1
 8011374:	f000 fb3c 	bl	80119f0 <core_set_error>
 8011378:	e783      	b.n	8011282 <ai_platform_network_init+0x9a>
 801137a:	2213      	movs	r2, #19
 801137c:	2116      	movs	r1, #22
 801137e:	f104 0010 	add.w	r0, r4, #16
 8011382:	f000 fb35 	bl	80119f0 <core_set_error>
 8011386:	e77c      	b.n	8011282 <ai_platform_network_init+0x9a>
 8011388:	2110      	movs	r1, #16
 801138a:	2211      	movs	r2, #17
 801138c:	1860      	adds	r0, r4, r1
 801138e:	f000 fb2f 	bl	80119f0 <core_set_error>
 8011392:	e776      	b.n	8011282 <ai_platform_network_init+0x9a>
 8011394:	46be      	mov	lr, r7
 8011396:	e794      	b.n	80112c2 <ai_platform_network_init+0xda>
 8011398:	2110      	movs	r1, #16
 801139a:	2213      	movs	r2, #19
 801139c:	1860      	adds	r0, r4, r1
 801139e:	f000 fb27 	bl	80119f0 <core_set_error>
 80113a2:	463e      	mov	r6, r7
 80113a4:	e76d      	b.n	8011282 <ai_platform_network_init+0x9a>
 80113a6:	bf00      	nop
 80113a8:	a1c00100 	.word	0xa1c00100
 80113ac:	e0042000 	.word	0xe0042000
 80113b0:	58024000 	.word	0x58024000
 80113b4:	f407a5c2 	.word	0xf407a5c2
 80113b8:	b5e8b5cd 	.word	0xb5e8b5cd
 80113bc:	40023000 	.word	0x40023000
 80113c0:	a1facade 	.word	0xa1facade

080113c4 <ai_platform_network_post_init>:
 80113c4:	b538      	push	{r3, r4, r5, lr}
 80113c6:	b1f0      	cbz	r0, 8011406 <ai_platform_network_post_init+0x42>
 80113c8:	4b3c      	ldr	r3, [pc, #240]	; (80114bc <ai_platform_network_post_init+0xf8>)
 80113ca:	6802      	ldr	r2, [r0, #0]
 80113cc:	429a      	cmp	r2, r3
 80113ce:	4604      	mov	r4, r0
 80113d0:	d119      	bne.n	8011406 <ai_platform_network_post_init+0x42>
 80113d2:	f7ff fb4b 	bl	8010a6c <_ai_platform_acquire_crc>
 80113d6:	4b3a      	ldr	r3, [pc, #232]	; (80114c0 <ai_platform_network_post_init+0xfc>)
 80113d8:	681b      	ldr	r3, [r3, #0]
 80113da:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80113de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80113e2:	d03b      	beq.n	801145c <ai_platform_network_post_init+0x98>
 80113e4:	4a37      	ldr	r2, [pc, #220]	; (80114c4 <ai_platform_network_post_init+0x100>)
 80113e6:	2301      	movs	r3, #1
 80113e8:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80113ec:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80113f0:	2b00      	cmp	r3, #0
 80113f2:	d1fb      	bne.n	80113ec <ai_platform_network_post_init+0x28>
 80113f4:	4b34      	ldr	r3, [pc, #208]	; (80114c8 <ai_platform_network_post_init+0x104>)
 80113f6:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80113fa:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80113fe:	4b33      	ldr	r3, [pc, #204]	; (80114cc <ai_platform_network_post_init+0x108>)
 8011400:	429a      	cmp	r2, r3
 8011402:	d037      	beq.n	8011474 <ai_platform_network_post_init+0xb0>
 8011404:	e7fe      	b.n	8011404 <ai_platform_network_post_init+0x40>
 8011406:	f7ff fb31 	bl	8010a6c <_ai_platform_acquire_crc>
 801140a:	4b2d      	ldr	r3, [pc, #180]	; (80114c0 <ai_platform_network_post_init+0xfc>)
 801140c:	681b      	ldr	r3, [r3, #0]
 801140e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8011412:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011416:	d010      	beq.n	801143a <ai_platform_network_post_init+0x76>
 8011418:	4a2a      	ldr	r2, [pc, #168]	; (80114c4 <ai_platform_network_post_init+0x100>)
 801141a:	2301      	movs	r3, #1
 801141c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8011420:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8011424:	2b00      	cmp	r3, #0
 8011426:	d1fb      	bne.n	8011420 <ai_platform_network_post_init+0x5c>
 8011428:	4b27      	ldr	r3, [pc, #156]	; (80114c8 <ai_platform_network_post_init+0x104>)
 801142a:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 801142e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8011432:	4b26      	ldr	r3, [pc, #152]	; (80114cc <ai_platform_network_post_init+0x108>)
 8011434:	429a      	cmp	r2, r3
 8011436:	d00d      	beq.n	8011454 <ai_platform_network_post_init+0x90>
 8011438:	e7fe      	b.n	8011438 <ai_platform_network_post_init+0x74>
 801143a:	4a25      	ldr	r2, [pc, #148]	; (80114d0 <ai_platform_network_post_init+0x10c>)
 801143c:	2301      	movs	r3, #1
 801143e:	6093      	str	r3, [r2, #8]
 8011440:	6893      	ldr	r3, [r2, #8]
 8011442:	2b00      	cmp	r3, #0
 8011444:	d1fc      	bne.n	8011440 <ai_platform_network_post_init+0x7c>
 8011446:	4b20      	ldr	r3, [pc, #128]	; (80114c8 <ai_platform_network_post_init+0x104>)
 8011448:	6013      	str	r3, [r2, #0]
 801144a:	6812      	ldr	r2, [r2, #0]
 801144c:	4b1f      	ldr	r3, [pc, #124]	; (80114cc <ai_platform_network_post_init+0x108>)
 801144e:	429a      	cmp	r2, r3
 8011450:	d000      	beq.n	8011454 <ai_platform_network_post_init+0x90>
 8011452:	e7fe      	b.n	8011452 <ai_platform_network_post_init+0x8e>
 8011454:	f7ff fb0c 	bl	8010a70 <_ai_platform_release_crc>
 8011458:	2000      	movs	r0, #0
 801145a:	bd38      	pop	{r3, r4, r5, pc}
 801145c:	4a1c      	ldr	r2, [pc, #112]	; (80114d0 <ai_platform_network_post_init+0x10c>)
 801145e:	2301      	movs	r3, #1
 8011460:	6093      	str	r3, [r2, #8]
 8011462:	6893      	ldr	r3, [r2, #8]
 8011464:	2b00      	cmp	r3, #0
 8011466:	d1fc      	bne.n	8011462 <ai_platform_network_post_init+0x9e>
 8011468:	4b17      	ldr	r3, [pc, #92]	; (80114c8 <ai_platform_network_post_init+0x104>)
 801146a:	6013      	str	r3, [r2, #0]
 801146c:	6812      	ldr	r2, [r2, #0]
 801146e:	4b17      	ldr	r3, [pc, #92]	; (80114cc <ai_platform_network_post_init+0x108>)
 8011470:	429a      	cmp	r2, r3
 8011472:	d11a      	bne.n	80114aa <ai_platform_network_post_init+0xe6>
 8011474:	f7ff fafc 	bl	8010a70 <_ai_platform_release_crc>
 8011478:	68e3      	ldr	r3, [r4, #12]
 801147a:	f013 0502 	ands.w	r5, r3, #2
 801147e:	d015      	beq.n	80114ac <ai_platform_network_post_init+0xe8>
 8011480:	4620      	mov	r0, r4
 8011482:	f000 fe5d 	bl	8012140 <ai_layers_post_init_all>
 8011486:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8011488:	b16b      	cbz	r3, 80114a6 <ai_platform_network_post_init+0xe2>
 801148a:	6b65      	ldr	r5, [r4, #52]	; 0x34
 801148c:	e007      	b.n	801149e <ai_platform_network_post_init+0xda>
 801148e:	e9d4 320f 	ldrd	r3, r2, [r4, #60]	; 0x3c
 8011492:	4798      	blx	r3
 8011494:	692b      	ldr	r3, [r5, #16]
 8011496:	42ab      	cmp	r3, r5
 8011498:	d005      	beq.n	80114a6 <ai_platform_network_post_init+0xe2>
 801149a:	b123      	cbz	r3, 80114a6 <ai_platform_network_post_init+0xe2>
 801149c:	461d      	mov	r5, r3
 801149e:	4629      	mov	r1, r5
 80114a0:	2000      	movs	r0, #0
 80114a2:	2d00      	cmp	r5, #0
 80114a4:	d1f3      	bne.n	801148e <ai_platform_network_post_init+0xca>
 80114a6:	2001      	movs	r0, #1
 80114a8:	bd38      	pop	{r3, r4, r5, pc}
 80114aa:	e7fe      	b.n	80114aa <ai_platform_network_post_init+0xe6>
 80114ac:	2210      	movs	r2, #16
 80114ae:	2111      	movs	r1, #17
 80114b0:	18a0      	adds	r0, r4, r2
 80114b2:	f000 fa9d 	bl	80119f0 <core_set_error>
 80114b6:	4628      	mov	r0, r5
 80114b8:	bd38      	pop	{r3, r4, r5, pc}
 80114ba:	bf00      	nop
 80114bc:	a1c00100 	.word	0xa1c00100
 80114c0:	e0042000 	.word	0xe0042000
 80114c4:	58024000 	.word	0x58024000
 80114c8:	f407a5c2 	.word	0xf407a5c2
 80114cc:	b5e8b5cd 	.word	0xb5e8b5cd
 80114d0:	40023000 	.word	0x40023000

080114d4 <ai_platform_network_process>:
 80114d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80114d8:	460e      	mov	r6, r1
 80114da:	b085      	sub	sp, #20
 80114dc:	4693      	mov	fp, r2
 80114de:	4605      	mov	r5, r0
 80114e0:	b120      	cbz	r0, 80114ec <ai_platform_network_process+0x18>
 80114e2:	4bb8      	ldr	r3, [pc, #736]	; (80117c4 <ai_platform_network_process+0x2f0>)
 80114e4:	6802      	ldr	r2, [r0, #0]
 80114e6:	429a      	cmp	r2, r3
 80114e8:	bf18      	it	ne
 80114ea:	2500      	movne	r5, #0
 80114ec:	f7ff fabe 	bl	8010a6c <_ai_platform_acquire_crc>
 80114f0:	4bb5      	ldr	r3, [pc, #724]	; (80117c8 <ai_platform_network_process+0x2f4>)
 80114f2:	681b      	ldr	r3, [r3, #0]
 80114f4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80114f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80114fc:	d010      	beq.n	8011520 <ai_platform_network_process+0x4c>
 80114fe:	4ab3      	ldr	r2, [pc, #716]	; (80117cc <ai_platform_network_process+0x2f8>)
 8011500:	2301      	movs	r3, #1
 8011502:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8011506:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 801150a:	2b00      	cmp	r3, #0
 801150c:	d1fb      	bne.n	8011506 <ai_platform_network_process+0x32>
 801150e:	4bb0      	ldr	r3, [pc, #704]	; (80117d0 <ai_platform_network_process+0x2fc>)
 8011510:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8011514:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8011518:	4bae      	ldr	r3, [pc, #696]	; (80117d4 <ai_platform_network_process+0x300>)
 801151a:	429a      	cmp	r2, r3
 801151c:	d00d      	beq.n	801153a <ai_platform_network_process+0x66>
 801151e:	e7fe      	b.n	801151e <ai_platform_network_process+0x4a>
 8011520:	4aad      	ldr	r2, [pc, #692]	; (80117d8 <ai_platform_network_process+0x304>)
 8011522:	2301      	movs	r3, #1
 8011524:	6093      	str	r3, [r2, #8]
 8011526:	6893      	ldr	r3, [r2, #8]
 8011528:	2b00      	cmp	r3, #0
 801152a:	d1fc      	bne.n	8011526 <ai_platform_network_process+0x52>
 801152c:	4ba8      	ldr	r3, [pc, #672]	; (80117d0 <ai_platform_network_process+0x2fc>)
 801152e:	6013      	str	r3, [r2, #0]
 8011530:	6812      	ldr	r2, [r2, #0]
 8011532:	4ba8      	ldr	r3, [pc, #672]	; (80117d4 <ai_platform_network_process+0x300>)
 8011534:	429a      	cmp	r2, r3
 8011536:	f040 812c 	bne.w	8011792 <ai_platform_network_process+0x2be>
 801153a:	f7ff fa99 	bl	8010a70 <_ai_platform_release_crc>
 801153e:	2d00      	cmp	r5, #0
 8011540:	f000 8154 	beq.w	80117ec <ai_platform_network_process+0x318>
 8011544:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 8011546:	2b00      	cmp	r3, #0
 8011548:	f000 8124 	beq.w	8011794 <ai_platform_network_process+0x2c0>
 801154c:	68eb      	ldr	r3, [r5, #12]
 801154e:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
 8011552:	f003 0303 	and.w	r3, r3, #3
 8011556:	2700      	movs	r7, #0
 8011558:	2b03      	cmp	r3, #3
 801155a:	616f      	str	r7, [r5, #20]
 801155c:	f040 813e 	bne.w	80117dc <ai_platform_network_process+0x308>
 8011560:	2e00      	cmp	r6, #0
 8011562:	f000 811d 	beq.w	80117a0 <ai_platform_network_process+0x2cc>
 8011566:	f1ba 0f00 	cmp.w	sl, #0
 801156a:	f000 8119 	beq.w	80117a0 <ai_platform_network_process+0x2cc>
 801156e:	f8ba 3000 	ldrh.w	r3, [sl]
 8011572:	2b00      	cmp	r3, #0
 8011574:	f000 8114 	beq.w	80117a0 <ai_platform_network_process+0x2cc>
 8011578:	69b3      	ldr	r3, [r6, #24]
 801157a:	f8cd b00c 	str.w	fp, [sp, #12]
 801157e:	681b      	ldr	r3, [r3, #0]
 8011580:	e9cd 3501 	strd	r3, r5, [sp, #4]
 8011584:	f8da 3004 	ldr.w	r3, [sl, #4]
 8011588:	2b00      	cmp	r3, #0
 801158a:	d072      	beq.n	8011672 <ai_platform_network_process+0x19e>
 801158c:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 8011590:	2c00      	cmp	r4, #0
 8011592:	d06e      	beq.n	8011672 <ai_platform_network_process+0x19e>
 8011594:	f8da 3008 	ldr.w	r3, [sl, #8]
 8011598:	f8d3 9000 	ldr.w	r9, [r3]
 801159c:	eb19 1807 	adds.w	r8, r9, r7, lsl #4
 80115a0:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 80115a4:	f000 81e0 	beq.w	8011968 <ai_platform_network_process+0x494>
 80115a8:	69a3      	ldr	r3, [r4, #24]
 80115aa:	2101      	movs	r1, #1
 80115ac:	4630      	mov	r0, r6
 80115ae:	685d      	ldr	r5, [r3, #4]
 80115b0:	f7ff fa0e 	bl	80109d0 <ai_buffer_get_size>
 80115b4:	4285      	cmp	r5, r0
 80115b6:	f0c0 811b 	bcc.w	80117f0 <ai_platform_network_process+0x31c>
 80115ba:	68e0      	ldr	r0, [r4, #12]
 80115bc:	69b1      	ldr	r1, [r6, #24]
 80115be:	68c2      	ldr	r2, [r0, #12]
 80115c0:	68cb      	ldr	r3, [r1, #12]
 80115c2:	429a      	cmp	r2, r3
 80115c4:	f040 8114 	bne.w	80117f0 <ai_platform_network_process+0x31c>
 80115c8:	6882      	ldr	r2, [r0, #8]
 80115ca:	688b      	ldr	r3, [r1, #8]
 80115cc:	429a      	cmp	r2, r3
 80115ce:	f040 810f 	bne.w	80117f0 <ai_platform_network_process+0x31c>
 80115d2:	6842      	ldr	r2, [r0, #4]
 80115d4:	684b      	ldr	r3, [r1, #4]
 80115d6:	429a      	cmp	r2, r3
 80115d8:	f040 810a 	bne.w	80117f0 <ai_platform_network_process+0x31c>
 80115dc:	69a3      	ldr	r3, [r4, #24]
 80115de:	e9d3 0100 	ldrd	r0, r1, [r3]
 80115e2:	f000 fe95 	bl	8012310 <ai_array_get_data_byte_size>
 80115e6:	4605      	mov	r5, r0
 80115e8:	4620      	mov	r0, r4
 80115ea:	f000 fe0d 	bl	8012208 <get_tensor_byte_size>
 80115ee:	4285      	cmp	r5, r0
 80115f0:	f0c0 80fe 	bcc.w	80117f0 <ai_platform_network_process+0x31c>
 80115f4:	69a3      	ldr	r3, [r4, #24]
 80115f6:	6818      	ldr	r0, [r3, #0]
 80115f8:	f000 fe1e 	bl	8012238 <ai_array_to_buffer_fmt>
 80115fc:	6833      	ldr	r3, [r6, #0]
 80115fe:	4058      	eors	r0, r3
 8011600:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 8011604:	f040 81bb 	bne.w	801197e <ai_platform_network_process+0x4aa>
 8011608:	6873      	ldr	r3, [r6, #4]
 801160a:	2b00      	cmp	r3, #0
 801160c:	f000 81ae 	beq.w	801196c <ai_platform_network_process+0x498>
 8011610:	69b3      	ldr	r3, [r6, #24]
 8011612:	681b      	ldr	r3, [r3, #0]
 8011614:	2b00      	cmp	r3, #0
 8011616:	f000 819e 	beq.w	8011956 <ai_platform_network_process+0x482>
 801161a:	9a01      	ldr	r2, [sp, #4]
 801161c:	429a      	cmp	r2, r3
 801161e:	bf38      	it	cc
 8011620:	461a      	movcc	r2, r3
 8011622:	4620      	mov	r0, r4
 8011624:	9201      	str	r2, [sp, #4]
 8011626:	f000 fdef 	bl	8012208 <get_tensor_byte_size>
 801162a:	f8c8 0008 	str.w	r0, [r8, #8]
 801162e:	69b3      	ldr	r3, [r6, #24]
 8011630:	681b      	ldr	r3, [r3, #0]
 8011632:	fb00 f303 	mul.w	r3, r0, r3
 8011636:	f8c8 300c 	str.w	r3, [r8, #12]
 801163a:	6871      	ldr	r1, [r6, #4]
 801163c:	f8c8 1004 	str.w	r1, [r8, #4]
 8011640:	440b      	add	r3, r1
 8011642:	f849 300b 	str.w	r3, [r9, fp]
 8011646:	69a0      	ldr	r0, [r4, #24]
 8011648:	6803      	ldr	r3, [r0, #0]
 801164a:	009a      	lsls	r2, r3, #2
 801164c:	f107 0701 	add.w	r7, r7, #1
 8011650:	f106 061c 	add.w	r6, r6, #28
 8011654:	f100 80af 	bmi.w	80117b6 <ai_platform_network_process+0x2e2>
 8011658:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 801165c:	1a9b      	subs	r3, r3, r2
 801165e:	4419      	add	r1, r3
 8011660:	6081      	str	r1, [r0, #8]
 8011662:	69a3      	ldr	r3, [r4, #24]
 8011664:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8011668:	60da      	str	r2, [r3, #12]
 801166a:	f8ba 3000 	ldrh.w	r3, [sl]
 801166e:	42bb      	cmp	r3, r7
 8011670:	d888      	bhi.n	8011584 <ai_platform_network_process+0xb0>
 8011672:	e9dd 5b02 	ldrd	r5, fp, [sp, #8]
 8011676:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 8011678:	f1bb 0f00 	cmp.w	fp, #0
 801167c:	f000 8188 	beq.w	8011990 <ai_platform_network_process+0x4bc>
 8011680:	2a01      	cmp	r2, #1
 8011682:	f240 8160 	bls.w	8011946 <ai_platform_network_process+0x472>
 8011686:	f8d5 9030 	ldr.w	r9, [r5, #48]	; 0x30
 801168a:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 801168e:	2b00      	cmp	r3, #0
 8011690:	f000 8159 	beq.w	8011946 <ai_platform_network_process+0x472>
 8011694:	465e      	mov	r6, fp
 8011696:	2700      	movs	r7, #0
 8011698:	462c      	mov	r4, r5
 801169a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801169e:	2b00      	cmp	r3, #0
 80116a0:	f000 80b4 	beq.w	801180c <ai_platform_network_process+0x338>
 80116a4:	f853 5027 	ldr.w	r5, [r3, r7, lsl #2]
 80116a8:	2d00      	cmp	r5, #0
 80116aa:	f000 80af 	beq.w	801180c <ai_platform_network_process+0x338>
 80116ae:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80116b2:	f8d3 8000 	ldr.w	r8, [r3]
 80116b6:	eb18 1a07 	adds.w	sl, r8, r7, lsl #4
 80116ba:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 80116be:	f000 8173 	beq.w	80119a8 <ai_platform_network_process+0x4d4>
 80116c2:	69ab      	ldr	r3, [r5, #24]
 80116c4:	2101      	movs	r1, #1
 80116c6:	685b      	ldr	r3, [r3, #4]
 80116c8:	9302      	str	r3, [sp, #8]
 80116ca:	4630      	mov	r0, r6
 80116cc:	f7ff f980 	bl	80109d0 <ai_buffer_get_size>
 80116d0:	9b02      	ldr	r3, [sp, #8]
 80116d2:	4283      	cmp	r3, r0
 80116d4:	f0c0 8136 	bcc.w	8011944 <ai_platform_network_process+0x470>
 80116d8:	68e8      	ldr	r0, [r5, #12]
 80116da:	69b1      	ldr	r1, [r6, #24]
 80116dc:	68c2      	ldr	r2, [r0, #12]
 80116de:	68cb      	ldr	r3, [r1, #12]
 80116e0:	429a      	cmp	r2, r3
 80116e2:	f040 812f 	bne.w	8011944 <ai_platform_network_process+0x470>
 80116e6:	6882      	ldr	r2, [r0, #8]
 80116e8:	688b      	ldr	r3, [r1, #8]
 80116ea:	429a      	cmp	r2, r3
 80116ec:	f040 812a 	bne.w	8011944 <ai_platform_network_process+0x470>
 80116f0:	6842      	ldr	r2, [r0, #4]
 80116f2:	684b      	ldr	r3, [r1, #4]
 80116f4:	429a      	cmp	r2, r3
 80116f6:	f040 8125 	bne.w	8011944 <ai_platform_network_process+0x470>
 80116fa:	69ab      	ldr	r3, [r5, #24]
 80116fc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011700:	f000 fe06 	bl	8012310 <ai_array_get_data_byte_size>
 8011704:	9002      	str	r0, [sp, #8]
 8011706:	4628      	mov	r0, r5
 8011708:	f000 fd7e 	bl	8012208 <get_tensor_byte_size>
 801170c:	9b02      	ldr	r3, [sp, #8]
 801170e:	4283      	cmp	r3, r0
 8011710:	f0c0 8118 	bcc.w	8011944 <ai_platform_network_process+0x470>
 8011714:	69ab      	ldr	r3, [r5, #24]
 8011716:	6818      	ldr	r0, [r3, #0]
 8011718:	f000 fd8e 	bl	8012238 <ai_array_to_buffer_fmt>
 801171c:	6833      	ldr	r3, [r6, #0]
 801171e:	4058      	eors	r0, r3
 8011720:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 8011724:	f040 8138 	bne.w	8011998 <ai_platform_network_process+0x4c4>
 8011728:	6873      	ldr	r3, [r6, #4]
 801172a:	2b00      	cmp	r3, #0
 801172c:	f000 814f 	beq.w	80119ce <ai_platform_network_process+0x4fa>
 8011730:	69b3      	ldr	r3, [r6, #24]
 8011732:	681b      	ldr	r3, [r3, #0]
 8011734:	2b00      	cmp	r3, #0
 8011736:	f000 8141 	beq.w	80119bc <ai_platform_network_process+0x4e8>
 801173a:	9a01      	ldr	r2, [sp, #4]
 801173c:	429a      	cmp	r2, r3
 801173e:	bf38      	it	cc
 8011740:	461a      	movcc	r2, r3
 8011742:	4628      	mov	r0, r5
 8011744:	9201      	str	r2, [sp, #4]
 8011746:	f000 fd5f 	bl	8012208 <get_tensor_byte_size>
 801174a:	f8ca 0008 	str.w	r0, [sl, #8]
 801174e:	69b3      	ldr	r3, [r6, #24]
 8011750:	681b      	ldr	r3, [r3, #0]
 8011752:	fb00 f303 	mul.w	r3, r0, r3
 8011756:	f8ca 300c 	str.w	r3, [sl, #12]
 801175a:	6871      	ldr	r1, [r6, #4]
 801175c:	f8ca 1004 	str.w	r1, [sl, #4]
 8011760:	440b      	add	r3, r1
 8011762:	f848 300b 	str.w	r3, [r8, fp]
 8011766:	69a8      	ldr	r0, [r5, #24]
 8011768:	6803      	ldr	r3, [r0, #0]
 801176a:	009b      	lsls	r3, r3, #2
 801176c:	f107 0701 	add.w	r7, r7, #1
 8011770:	f106 061c 	add.w	r6, r6, #28
 8011774:	d445      	bmi.n	8011802 <ai_platform_network_process+0x32e>
 8011776:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 801177a:	1a9b      	subs	r3, r3, r2
 801177c:	4419      	add	r1, r3
 801177e:	6081      	str	r1, [r0, #8]
 8011780:	69ab      	ldr	r3, [r5, #24]
 8011782:	f8da 2004 	ldr.w	r2, [sl, #4]
 8011786:	60da      	str	r2, [r3, #12]
 8011788:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 801178c:	429f      	cmp	r7, r3
 801178e:	d384      	bcc.n	801169a <ai_platform_network_process+0x1c6>
 8011790:	e03c      	b.n	801180c <ai_platform_network_process+0x338>
 8011792:	e7fe      	b.n	8011792 <ai_platform_network_process+0x2be>
 8011794:	68ea      	ldr	r2, [r5, #12]
 8011796:	616b      	str	r3, [r5, #20]
 8011798:	f002 0203 	and.w	r2, r2, #3
 801179c:	2a03      	cmp	r2, #3
 801179e:	d11d      	bne.n	80117dc <ai_platform_network_process+0x308>
 80117a0:	2217      	movs	r2, #23
 80117a2:	2112      	movs	r1, #18
 80117a4:	f105 0010 	add.w	r0, r5, #16
 80117a8:	f000 f922 	bl	80119f0 <core_set_error>
 80117ac:	2400      	movs	r4, #0
 80117ae:	4620      	mov	r0, r4
 80117b0:	b005      	add	sp, #20
 80117b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80117b6:	f8ba 3000 	ldrh.w	r3, [sl]
 80117ba:	429f      	cmp	r7, r3
 80117bc:	f4ff aee2 	bcc.w	8011584 <ai_platform_network_process+0xb0>
 80117c0:	e757      	b.n	8011672 <ai_platform_network_process+0x19e>
 80117c2:	bf00      	nop
 80117c4:	a1c00100 	.word	0xa1c00100
 80117c8:	e0042000 	.word	0xe0042000
 80117cc:	58024000 	.word	0x58024000
 80117d0:	f407a5c2 	.word	0xf407a5c2
 80117d4:	b5e8b5cd 	.word	0xb5e8b5cd
 80117d8:	40023000 	.word	0x40023000
 80117dc:	2230      	movs	r2, #48	; 0x30
 80117de:	2111      	movs	r1, #17
 80117e0:	f105 0010 	add.w	r0, r5, #16
 80117e4:	f000 f904 	bl	80119f0 <core_set_error>
 80117e8:	2400      	movs	r4, #0
 80117ea:	e7e0      	b.n	80117ae <ai_platform_network_process+0x2da>
 80117ec:	462c      	mov	r4, r5
 80117ee:	e7de      	b.n	80117ae <ai_platform_network_process+0x2da>
 80117f0:	9d02      	ldr	r5, [sp, #8]
 80117f2:	2218      	movs	r2, #24
 80117f4:	2112      	movs	r1, #18
 80117f6:	f105 0010 	add.w	r0, r5, #16
 80117fa:	f000 f8f9 	bl	80119f0 <core_set_error>
 80117fe:	2400      	movs	r4, #0
 8011800:	e7d5      	b.n	80117ae <ai_platform_network_process+0x2da>
 8011802:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8011806:	429f      	cmp	r7, r3
 8011808:	f4ff af47 	bcc.w	801169a <ai_platform_network_process+0x1c6>
 801180c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8011810:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8011812:	82a3      	strh	r3, [r4, #20]
 8011814:	4625      	mov	r5, r4
 8011816:	2a00      	cmp	r2, #0
 8011818:	f040 808e 	bne.w	8011938 <ai_platform_network_process+0x464>
 801181c:	4616      	mov	r6, r2
 801181e:	4617      	mov	r7, r2
 8011820:	8aec      	ldrh	r4, [r5, #22]
 8011822:	429c      	cmp	r4, r3
 8011824:	bf38      	it	cc
 8011826:	46ab      	movcc	fp, r5
 8011828:	d2c1      	bcs.n	80117ae <ai_platform_network_process+0x2da>
 801182a:	2e00      	cmp	r6, #0
 801182c:	d030      	beq.n	8011890 <ai_platform_network_process+0x3bc>
 801182e:	f04f 0800 	mov.w	r8, #0
 8011832:	e014      	b.n	801185e <ai_platform_network_process+0x38a>
 8011834:	6882      	ldr	r2, [r0, #8]
 8011836:	68c5      	ldr	r5, [r0, #12]
 8011838:	6863      	ldr	r3, [r4, #4]
 801183a:	1b52      	subs	r2, r2, r5
 801183c:	4413      	add	r3, r2
 801183e:	6083      	str	r3, [r0, #8]
 8011840:	698b      	ldr	r3, [r1, #24]
 8011842:	6862      	ldr	r2, [r4, #4]
 8011844:	60da      	str	r2, [r3, #12]
 8011846:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 801184a:	f859 200a 	ldr.w	r2, [r9, sl]
 801184e:	440b      	add	r3, r1
 8011850:	4293      	cmp	r3, r2
 8011852:	bf24      	itt	cs
 8011854:	68e3      	ldrcs	r3, [r4, #12]
 8011856:	1ad3      	subcs	r3, r2, r3
 8011858:	6063      	str	r3, [r4, #4]
 801185a:	f108 0801 	add.w	r8, r8, #1
 801185e:	8833      	ldrh	r3, [r6, #0]
 8011860:	4543      	cmp	r3, r8
 8011862:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 8011866:	d913      	bls.n	8011890 <ai_platform_network_process+0x3bc>
 8011868:	6873      	ldr	r3, [r6, #4]
 801186a:	b18b      	cbz	r3, 8011890 <ai_platform_network_process+0x3bc>
 801186c:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 8011870:	b171      	cbz	r1, 8011890 <ai_platform_network_process+0x3bc>
 8011872:	6988      	ldr	r0, [r1, #24]
 8011874:	68b2      	ldr	r2, [r6, #8]
 8011876:	6803      	ldr	r3, [r0, #0]
 8011878:	f8d2 9000 	ldr.w	r9, [r2]
 801187c:	009d      	lsls	r5, r3, #2
 801187e:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 8011882:	d5d7      	bpl.n	8011834 <ai_platform_network_process+0x360>
 8011884:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 8011888:	6880      	ldr	r0, [r0, #8]
 801188a:	f000 fd7d 	bl	8012388 <memcpy>
 801188e:	e7da      	b.n	8011846 <ai_platform_network_process+0x372>
 8011890:	4658      	mov	r0, fp
 8011892:	f000 fc69 	bl	8012168 <ai_layers_forward_all>
 8011896:	2f00      	cmp	r7, #0
 8011898:	d03f      	beq.n	801191a <ai_platform_network_process+0x446>
 801189a:	2400      	movs	r4, #0
 801189c:	e016      	b.n	80118cc <ai_platform_network_process+0x3f8>
 801189e:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 80118a2:	f859 100a 	ldr.w	r1, [r9, sl]
 80118a6:	4413      	add	r3, r2
 80118a8:	428b      	cmp	r3, r1
 80118aa:	bf24      	itt	cs
 80118ac:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 80118b0:	1acb      	subcs	r3, r1, r3
 80118b2:	f8c8 3004 	str.w	r3, [r8, #4]
 80118b6:	6981      	ldr	r1, [r0, #24]
 80118b8:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 80118bc:	1b52      	subs	r2, r2, r5
 80118be:	4413      	add	r3, r2
 80118c0:	608b      	str	r3, [r1, #8]
 80118c2:	6983      	ldr	r3, [r0, #24]
 80118c4:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80118c8:	60da      	str	r2, [r3, #12]
 80118ca:	3401      	adds	r4, #1
 80118cc:	883b      	ldrh	r3, [r7, #0]
 80118ce:	42a3      	cmp	r3, r4
 80118d0:	d923      	bls.n	801191a <ai_platform_network_process+0x446>
 80118d2:	687b      	ldr	r3, [r7, #4]
 80118d4:	b30b      	cbz	r3, 801191a <ai_platform_network_process+0x446>
 80118d6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80118da:	b1f0      	cbz	r0, 801191a <ai_platform_network_process+0x446>
 80118dc:	68ba      	ldr	r2, [r7, #8]
 80118de:	6983      	ldr	r3, [r0, #24]
 80118e0:	f8d2 9000 	ldr.w	r9, [r2]
 80118e4:	681a      	ldr	r2, [r3, #0]
 80118e6:	0092      	lsls	r2, r2, #2
 80118e8:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 80118ec:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 80118f0:	d5d5      	bpl.n	801189e <ai_platform_network_process+0x3ca>
 80118f2:	f8d8 2008 	ldr.w	r2, [r8, #8]
 80118f6:	6899      	ldr	r1, [r3, #8]
 80118f8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80118fc:	f000 fd44 	bl	8012388 <memcpy>
 8011900:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 8011904:	f859 200a 	ldr.w	r2, [r9, sl]
 8011908:	440b      	add	r3, r1
 801190a:	4293      	cmp	r3, r2
 801190c:	bf24      	itt	cs
 801190e:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 8011912:	1ad3      	subcs	r3, r2, r3
 8011914:	f8c8 3004 	str.w	r3, [r8, #4]
 8011918:	e7d7      	b.n	80118ca <ai_platform_network_process+0x3f6>
 801191a:	f8bb 4016 	ldrh.w	r4, [fp, #22]
 801191e:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 8011922:	3401      	adds	r4, #1
 8011924:	b2a4      	uxth	r4, r4
 8011926:	42a3      	cmp	r3, r4
 8011928:	f8ab 4016 	strh.w	r4, [fp, #22]
 801192c:	f63f af7d 	bhi.w	801182a <ai_platform_network_process+0x356>
 8011930:	4620      	mov	r0, r4
 8011932:	b005      	add	sp, #20
 8011934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011938:	2a01      	cmp	r2, #1
 801193a:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 801193c:	d03c      	beq.n	80119b8 <ai_platform_network_process+0x4e4>
 801193e:	f106 070c 	add.w	r7, r6, #12
 8011942:	e76d      	b.n	8011820 <ai_platform_network_process+0x34c>
 8011944:	4625      	mov	r5, r4
 8011946:	2218      	movs	r2, #24
 8011948:	2113      	movs	r1, #19
 801194a:	f105 0010 	add.w	r0, r5, #16
 801194e:	f000 f84f 	bl	80119f0 <core_set_error>
 8011952:	2400      	movs	r4, #0
 8011954:	e72b      	b.n	80117ae <ai_platform_network_process+0x2da>
 8011956:	9d02      	ldr	r5, [sp, #8]
 8011958:	4604      	mov	r4, r0
 801195a:	2221      	movs	r2, #33	; 0x21
 801195c:	2112      	movs	r1, #18
 801195e:	f105 0010 	add.w	r0, r5, #16
 8011962:	f000 f845 	bl	80119f0 <core_set_error>
 8011966:	e722      	b.n	80117ae <ai_platform_network_process+0x2da>
 8011968:	9d02      	ldr	r5, [sp, #8]
 801196a:	e719      	b.n	80117a0 <ai_platform_network_process+0x2cc>
 801196c:	9d02      	ldr	r5, [sp, #8]
 801196e:	4604      	mov	r4, r0
 8011970:	2217      	movs	r2, #23
 8011972:	2112      	movs	r1, #18
 8011974:	f105 0010 	add.w	r0, r5, #16
 8011978:	f000 f83a 	bl	80119f0 <core_set_error>
 801197c:	e717      	b.n	80117ae <ai_platform_network_process+0x2da>
 801197e:	9d02      	ldr	r5, [sp, #8]
 8011980:	2219      	movs	r2, #25
 8011982:	2112      	movs	r1, #18
 8011984:	f105 0010 	add.w	r0, r5, #16
 8011988:	f000 f832 	bl	80119f0 <core_set_error>
 801198c:	2400      	movs	r4, #0
 801198e:	e70e      	b.n	80117ae <ai_platform_network_process+0x2da>
 8011990:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8011994:	82ab      	strh	r3, [r5, #20]
 8011996:	e73e      	b.n	8011816 <ai_platform_network_process+0x342>
 8011998:	f104 0010 	add.w	r0, r4, #16
 801199c:	2219      	movs	r2, #25
 801199e:	2113      	movs	r1, #19
 80119a0:	f000 f826 	bl	80119f0 <core_set_error>
 80119a4:	2400      	movs	r4, #0
 80119a6:	e702      	b.n	80117ae <ai_platform_network_process+0x2da>
 80119a8:	f104 0010 	add.w	r0, r4, #16
 80119ac:	2217      	movs	r2, #23
 80119ae:	2113      	movs	r1, #19
 80119b0:	f000 f81e 	bl	80119f0 <core_set_error>
 80119b4:	4654      	mov	r4, sl
 80119b6:	e6fa      	b.n	80117ae <ai_platform_network_process+0x2da>
 80119b8:	2700      	movs	r7, #0
 80119ba:	e731      	b.n	8011820 <ai_platform_network_process+0x34c>
 80119bc:	4625      	mov	r5, r4
 80119be:	2221      	movs	r2, #33	; 0x21
 80119c0:	4604      	mov	r4, r0
 80119c2:	2113      	movs	r1, #19
 80119c4:	f105 0010 	add.w	r0, r5, #16
 80119c8:	f000 f812 	bl	80119f0 <core_set_error>
 80119cc:	e6ef      	b.n	80117ae <ai_platform_network_process+0x2da>
 80119ce:	4625      	mov	r5, r4
 80119d0:	2217      	movs	r2, #23
 80119d2:	4604      	mov	r4, r0
 80119d4:	2113      	movs	r1, #19
 80119d6:	f105 0010 	add.w	r0, r5, #16
 80119da:	f000 f809 	bl	80119f0 <core_set_error>
 80119de:	e6e6      	b.n	80117ae <ai_platform_network_process+0x2da>

080119e0 <core_init>:
 80119e0:	2001      	movs	r0, #1
 80119e2:	4770      	bx	lr

080119e4 <core_get_error>:
 80119e4:	4603      	mov	r3, r0
 80119e6:	2200      	movs	r2, #0
 80119e8:	6800      	ldr	r0, [r0, #0]
 80119ea:	601a      	str	r2, [r3, #0]
 80119ec:	4770      	bx	lr
 80119ee:	bf00      	nop

080119f0 <core_set_error>:
 80119f0:	4603      	mov	r3, r0
 80119f2:	7800      	ldrb	r0, [r0, #0]
 80119f4:	b108      	cbz	r0, 80119fa <core_set_error+0xa>
 80119f6:	2000      	movs	r0, #0
 80119f8:	4770      	bx	lr
 80119fa:	7019      	strb	r1, [r3, #0]
 80119fc:	6819      	ldr	r1, [r3, #0]
 80119fe:	f362 211f 	bfi	r1, r2, #8, #24
 8011a02:	2001      	movs	r0, #1
 8011a04:	6019      	str	r1, [r3, #0]
 8011a06:	4770      	bx	lr

08011a08 <func_dummy>:
 8011a08:	4770      	bx	lr
 8011a0a:	bf00      	nop

08011a0c <decodeEstimator_LEQ_8Bits>:
 8011a0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a10:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 8011a14:	f8bd 8038 	ldrh.w	r8, [sp, #56]	; 0x38
 8011a18:	e9dd a909 	ldrd	sl, r9, [sp, #36]	; 0x24
 8011a1c:	f242 7511 	movw	r5, #10001	; 0x2711
 8011a20:	f04f 0c00 	mov.w	ip, #0
 8011a24:	e00e      	b.n	8011a44 <decodeEstimator_LEQ_8Bits+0x38>
 8011a26:	ed94 7a00 	vldr	s14, [r4]
 8011a2a:	edde 7a00 	vldr	s15, [lr]
 8011a2e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011a32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a36:	fa1f fc86 	uxth.w	ip, r6
 8011a3a:	bf88      	it	hi
 8011a3c:	fa1f fc87 	uxthhi.w	ip, r7
 8011a40:	3d01      	subs	r5, #1
 8011a42:	d05c      	beq.n	8011afe <decodeEstimator_LEQ_8Bits+0xf2>
 8011a44:	f81a 600c 	ldrb.w	r6, [sl, ip]
 8011a48:	f819 700c 	ldrb.w	r7, [r9, ip]
 8011a4c:	f812 400c 	ldrb.w	r4, [r2, ip]
 8011a50:	42be      	cmp	r6, r7
 8011a52:	eb03 0e8c 	add.w	lr, r3, ip, lsl #2
 8011a56:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8011a5a:	d1e4      	bne.n	8011a26 <decodeEstimator_LEQ_8Bits+0x1a>
 8011a5c:	f1b8 0f00 	cmp.w	r8, #0
 8011a60:	d021      	beq.n	8011aa6 <decodeEstimator_LEQ_8Bits+0x9a>
 8011a62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011a64:	2b08      	cmp	r3, #8
 8011a66:	f108 38ff 	add.w	r8, r8, #4294967295
 8011a6a:	d029      	beq.n	8011ac0 <decodeEstimator_LEQ_8Bits+0xb4>
 8011a6c:	2b20      	cmp	r3, #32
 8011a6e:	f10b 33ff 	add.w	r3, fp, #4294967295
 8011a72:	fa1b fb88 	uxtah	fp, fp, r8
 8011a76:	d11b      	bne.n	8011ab0 <decodeEstimator_LEQ_8Bits+0xa4>
 8011a78:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8011a7a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011a7c:	f813 4f01 	ldrb.w	r4, [r3, #1]!
 8011a80:	4564      	cmp	r4, ip
 8011a82:	d10a      	bne.n	8011a9a <decodeEstimator_LEQ_8Bits+0x8e>
 8011a84:	7804      	ldrb	r4, [r0, #0]
 8011a86:	ed92 7a00 	vldr	s14, [r2]
 8011a8a:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 8011a8e:	edd4 7a00 	vldr	s15, [r4]
 8011a92:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011a96:	edc4 7a00 	vstr	s15, [r4]
 8011a9a:	459b      	cmp	fp, r3
 8011a9c:	f100 0001 	add.w	r0, r0, #1
 8011aa0:	f102 0204 	add.w	r2, r2, #4
 8011aa4:	d1ea      	bne.n	8011a7c <decodeEstimator_LEQ_8Bits+0x70>
 8011aa6:	2000      	movs	r0, #0
 8011aa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011aac:	455b      	cmp	r3, fp
 8011aae:	d0fa      	beq.n	8011aa6 <decodeEstimator_LEQ_8Bits+0x9a>
 8011ab0:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8011ab4:	4562      	cmp	r2, ip
 8011ab6:	d1f9      	bne.n	8011aac <decodeEstimator_LEQ_8Bits+0xa0>
 8011ab8:	f06f 0003 	mvn.w	r0, #3
 8011abc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ac0:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8011ac2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011ac4:	f10b 33ff 	add.w	r3, fp, #4294967295
 8011ac8:	fa1b fb88 	uxtah	fp, fp, r8
 8011acc:	f813 4f01 	ldrb.w	r4, [r3, #1]!
 8011ad0:	4564      	cmp	r4, ip
 8011ad2:	d10d      	bne.n	8011af0 <decodeEstimator_LEQ_8Bits+0xe4>
 8011ad4:	7815      	ldrb	r5, [r2, #0]
 8011ad6:	7804      	ldrb	r4, [r0, #0]
 8011ad8:	ee07 5a90 	vmov	s15, r5
 8011adc:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 8011ae0:	ed94 7a00 	vldr	s14, [r4]
 8011ae4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011ae8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011aec:	edc4 7a00 	vstr	s15, [r4]
 8011af0:	459b      	cmp	fp, r3
 8011af2:	f100 0001 	add.w	r0, r0, #1
 8011af6:	f102 0201 	add.w	r2, r2, #1
 8011afa:	d1e7      	bne.n	8011acc <decodeEstimator_LEQ_8Bits+0xc0>
 8011afc:	e7d3      	b.n	8011aa6 <decodeEstimator_LEQ_8Bits+0x9a>
 8011afe:	f06f 0001 	mvn.w	r0, #1
 8011b02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b06:	bf00      	nop

08011b08 <tree_ensemble_classifier_decoder>:
 8011b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b0c:	b09b      	sub	sp, #108	; 0x6c
 8011b0e:	4604      	mov	r4, r0
 8011b10:	9218      	str	r2, [sp, #96]	; 0x60
 8011b12:	4622      	mov	r2, r4
 8011b14:	460d      	mov	r5, r1
 8011b16:	6911      	ldr	r1, [r2, #16]
 8011b18:	9110      	str	r1, [sp, #64]	; 0x40
 8011b1a:	6891      	ldr	r1, [r2, #8]
 8011b1c:	9111      	str	r1, [sp, #68]	; 0x44
 8011b1e:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8011b20:	910d      	str	r1, [sp, #52]	; 0x34
 8011b22:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8011b24:	9114      	str	r1, [sp, #80]	; 0x50
 8011b26:	e9d2 910b 	ldrd	r9, r1, [r2, #44]	; 0x2c
 8011b2a:	900f      	str	r0, [sp, #60]	; 0x3c
 8011b2c:	f8bd 0090 	ldrh.w	r0, [sp, #144]	; 0x90
 8011b30:	f8d2 8004 	ldr.w	r8, [r2, #4]
 8011b34:	9117      	str	r1, [sp, #92]	; 0x5c
 8011b36:	e9d2 6705 	ldrd	r6, r7, [r2, #20]
 8011b3a:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8011b3c:	68d2      	ldr	r2, [r2, #12]
 8011b3e:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
 8011b42:	f8d4 a01c 	ldr.w	sl, [r4, #28]
 8011b46:	9016      	str	r0, [sp, #88]	; 0x58
 8011b48:	6824      	ldr	r4, [r4, #0]
 8011b4a:	9312      	str	r3, [sp, #72]	; 0x48
 8011b4c:	9119      	str	r1, [sp, #100]	; 0x64
 8011b4e:	9215      	str	r2, [sp, #84]	; 0x54
 8011b50:	2800      	cmp	r0, #0
 8011b52:	f000 813a 	beq.w	8011dca <tree_ensemble_classifier_decoder+0x2c2>
 8011b56:	0082      	lsls	r2, r0, #2
 8011b58:	2100      	movs	r1, #0
 8011b5a:	4618      	mov	r0, r3
 8011b5c:	f000 fc22 	bl	80123a4 <memset>
 8011b60:	f1bb 0f00 	cmp.w	fp, #0
 8011b64:	f000 8088 	beq.w	8011c78 <tree_ensemble_classifier_decoder+0x170>
 8011b68:	f10b 33ff 	add.w	r3, fp, #4294967295
 8011b6c:	18e3      	adds	r3, r4, r3
 8011b6e:	f1aa 0202 	sub.w	r2, sl, #2
 8011b72:	920c      	str	r2, [sp, #48]	; 0x30
 8011b74:	9313      	str	r3, [sp, #76]	; 0x4c
 8011b76:	f1a9 0202 	sub.w	r2, r9, #2
 8011b7a:	1e63      	subs	r3, r4, #1
 8011b7c:	f04f 0900 	mov.w	r9, #0
 8011b80:	920b      	str	r2, [sp, #44]	; 0x2c
 8011b82:	9309      	str	r3, [sp, #36]	; 0x24
 8011b84:	464c      	mov	r4, r9
 8011b86:	46cb      	mov	fp, r9
 8011b88:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011b8a:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8011b8e:	9209      	str	r2, [sp, #36]	; 0x24
 8011b90:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011b92:	f832 1f02 	ldrh.w	r1, [r2, #2]!
 8011b96:	920c      	str	r2, [sp, #48]	; 0x30
 8011b98:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011b9a:	910e      	str	r1, [sp, #56]	; 0x38
 8011b9c:	f832 1f02 	ldrh.w	r1, [r2, #2]!
 8011ba0:	2b01      	cmp	r3, #1
 8011ba2:	e9cd 120a 	strd	r1, r2, [sp, #40]	; 0x28
 8011ba6:	f040 80e6 	bne.w	8011d76 <tree_ensemble_classifier_decoder+0x26e>
 8011baa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011bac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011bae:	2a08      	cmp	r2, #8
 8011bb0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8011bb4:	f000 80b2 	beq.w	8011d1c <tree_ensemble_classifier_decoder+0x214>
 8011bb8:	2a20      	cmp	r2, #32
 8011bba:	f040 80d7 	bne.w	8011d6c <tree_ensemble_classifier_decoder+0x264>
 8011bbe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011bc0:	9911      	ldr	r1, [sp, #68]	; 0x44
 8011bc2:	6a12      	ldr	r2, [r2, #32]
 8011bc4:	2a08      	cmp	r2, #8
 8011bc6:	eb01 0a8b 	add.w	sl, r1, fp, lsl #2
 8011bca:	f000 80ae 	beq.w	8011d2a <tree_ensemble_classifier_decoder+0x222>
 8011bce:	f242 7e11 	movw	lr, #10001	; 0x2711
 8011bd2:	2100      	movs	r1, #0
 8011bd4:	e00e      	b.n	8011bf4 <tree_ensemble_classifier_decoder+0xec>
 8011bd6:	ed92 7a00 	vldr	s14, [r2]
 8011bda:	edd9 7a00 	vldr	s15, [r9]
 8011bde:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011be2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011be6:	bf94      	ite	ls
 8011be8:	4661      	movls	r1, ip
 8011bea:	4601      	movhi	r1, r0
 8011bec:	f1be 0e01 	subs.w	lr, lr, #1
 8011bf0:	f000 80b7 	beq.w	8011d62 <tree_ensemble_classifier_decoder+0x25a>
 8011bf4:	1862      	adds	r2, r4, r1
 8011bf6:	eb03 0981 	add.w	r9, r3, r1, lsl #2
 8011bfa:	f836 c012 	ldrh.w	ip, [r6, r2, lsl #1]
 8011bfe:	f837 0012 	ldrh.w	r0, [r7, r2, lsl #1]
 8011c02:	f818 2002 	ldrb.w	r2, [r8, r2]
 8011c06:	4584      	cmp	ip, r0
 8011c08:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 8011c0c:	d1e3      	bne.n	8011bd6 <tree_ensemble_classifier_decoder+0xce>
 8011c0e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011c10:	b332      	cbz	r2, 8011c60 <tree_ensemble_classifier_decoder+0x158>
 8011c12:	f102 3cff 	add.w	ip, r2, #4294967295
 8011c16:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8011c1a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8011c1c:	9814      	ldr	r0, [sp, #80]	; 0x50
 8011c1e:	f8dd e048 	ldr.w	lr, [sp, #72]	; 0x48
 8011c22:	3b01      	subs	r3, #1
 8011c24:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8011c28:	fa1b fc8c 	uxtah	ip, fp, ip
 8011c2c:	eb00 0c4c 	add.w	ip, r0, ip, lsl #1
 8011c30:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8011c34:	3202      	adds	r2, #2
 8011c36:	f833 0f02 	ldrh.w	r0, [r3, #2]!
 8011c3a:	4288      	cmp	r0, r1
 8011c3c:	d10a      	bne.n	8011c54 <tree_ensemble_classifier_decoder+0x14c>
 8011c3e:	8810      	ldrh	r0, [r2, #0]
 8011c40:	ed9a 7a00 	vldr	s14, [sl]
 8011c44:	eb0e 0080 	add.w	r0, lr, r0, lsl #2
 8011c48:	edd0 7a00 	vldr	s15, [r0]
 8011c4c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011c50:	edc0 7a00 	vstr	s15, [r0]
 8011c54:	459c      	cmp	ip, r3
 8011c56:	f102 0202 	add.w	r2, r2, #2
 8011c5a:	f10a 0a04 	add.w	sl, sl, #4
 8011c5e:	d1ea      	bne.n	8011c36 <tree_ensemble_classifier_decoder+0x12e>
 8011c60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011c62:	441c      	add	r4, r3
 8011c64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011c66:	449b      	add	fp, r3
 8011c68:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8011c6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011c6c:	4293      	cmp	r3, r2
 8011c6e:	d18b      	bne.n	8011b88 <tree_ensemble_classifier_decoder+0x80>
 8011c70:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8011c72:	2b00      	cmp	r3, #0
 8011c74:	f000 80ad 	beq.w	8011dd2 <tree_ensemble_classifier_decoder+0x2ca>
 8011c78:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8011c7a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011c7c:	3b01      	subs	r3, #1
 8011c7e:	b29b      	uxth	r3, r3
 8011c80:	1d10      	adds	r0, r2, #4
 8011c82:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8011c86:	4614      	mov	r4, r2
 8011c88:	4613      	mov	r3, r2
 8011c8a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011c8c:	edd3 6a00 	vldr	s13, [r3]
 8011c90:	edd2 7a16 	vldr	s15, [r2, #88]	; 0x58
 8011c94:	ed92 7a15 	vldr	s14, [r2, #84]	; 0x54
 8011c98:	eed6 7a87 	vfnms.f32	s15, s13, s14
 8011c9c:	ece3 7a01 	vstmia	r3!, {s15}
 8011ca0:	4298      	cmp	r0, r3
 8011ca2:	d1f3      	bne.n	8011c8c <tree_ensemble_classifier_decoder+0x184>
 8011ca4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8011ca6:	2b02      	cmp	r3, #2
 8011ca8:	d06a      	beq.n	8011d80 <tree_ensemble_classifier_decoder+0x278>
 8011caa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011cac:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8011cae:	2100      	movs	r1, #0
 8011cb0:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8011cb2:	ed93 7a00 	vldr	s14, [r3]
 8011cb6:	440a      	add	r2, r1
 8011cb8:	edd2 7a00 	vldr	s15, [r2]
 8011cbc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011cc0:	3104      	adds	r1, #4
 8011cc2:	ece3 7a01 	vstmia	r3!, {s15}
 8011cc6:	4283      	cmp	r3, r0
 8011cc8:	d1f2      	bne.n	8011cb0 <tree_ensemble_classifier_decoder+0x1a8>
 8011cca:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011ccc:	9816      	ldr	r0, [sp, #88]	; 0x58
 8011cce:	ed93 7a00 	vldr	s14, [r3]
 8011cd2:	2300      	movs	r3, #0
 8011cd4:	4619      	mov	r1, r3
 8011cd6:	461a      	mov	r2, r3
 8011cd8:	ecf4 7a01 	vldmia	r4!, {s15}
 8011cdc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011ce0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ce4:	f103 0301 	add.w	r3, r3, #1
 8011ce8:	bf48      	it	mi
 8011cea:	4611      	movmi	r1, r2
 8011cec:	b29a      	uxth	r2, r3
 8011cee:	bf48      	it	mi
 8011cf0:	eeb0 7a67 	vmovmi.f32	s14, s15
 8011cf4:	4282      	cmp	r2, r0
 8011cf6:	d3ef      	bcc.n	8011cd8 <tree_ensemble_classifier_decoder+0x1d0>
 8011cf8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011cfa:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8011cfe:	9317      	str	r3, [sp, #92]	; 0x5c
 8011d00:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8011d02:	681b      	ldr	r3, [r3, #0]
 8011d04:	6013      	str	r3, [r2, #0]
 8011d06:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011d08:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8011d0a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8011d0c:	9c19      	ldr	r4, [sp, #100]	; 0x64
 8011d0e:	4608      	mov	r0, r1
 8011d10:	2300      	movs	r3, #0
 8011d12:	47a0      	blx	r4
 8011d14:	2000      	movs	r0, #0
 8011d16:	b01b      	add	sp, #108	; 0x6c
 8011d18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d1c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011d1e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8011d20:	6a12      	ldr	r2, [r2, #32]
 8011d22:	2a08      	cmp	r2, #8
 8011d24:	eb01 0a0b 	add.w	sl, r1, fp
 8011d28:	d120      	bne.n	8011d6c <tree_ensemble_classifier_decoder+0x264>
 8011d2a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011d2c:	9203      	str	r2, [sp, #12]
 8011d2e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8011d30:	990a      	ldr	r1, [sp, #40]	; 0x28
 8011d32:	9105      	str	r1, [sp, #20]
 8011d34:	445a      	add	r2, fp
 8011d36:	9206      	str	r2, [sp, #24]
 8011d38:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011d3a:	f8cd a008 	str.w	sl, [sp, #8]
 8011d3e:	445a      	add	r2, fp
 8011d40:	9204      	str	r2, [sp, #16]
 8011d42:	448b      	add	fp, r1
 8011d44:	193a      	adds	r2, r7, r4
 8011d46:	990e      	ldr	r1, [sp, #56]	; 0x38
 8011d48:	9201      	str	r2, [sp, #4]
 8011d4a:	1932      	adds	r2, r6, r4
 8011d4c:	9200      	str	r2, [sp, #0]
 8011d4e:	4628      	mov	r0, r5
 8011d50:	eb08 0204 	add.w	r2, r8, r4
 8011d54:	440c      	add	r4, r1
 8011d56:	9912      	ldr	r1, [sp, #72]	; 0x48
 8011d58:	f7ff fe58 	bl	8011a0c <decodeEstimator_LEQ_8Bits>
 8011d5c:	2800      	cmp	r0, #0
 8011d5e:	d083      	beq.n	8011c68 <tree_ensemble_classifier_decoder+0x160>
 8011d60:	e001      	b.n	8011d66 <tree_ensemble_classifier_decoder+0x25e>
 8011d62:	f06f 0001 	mvn.w	r0, #1
 8011d66:	b01b      	add	sp, #108	; 0x6c
 8011d68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d6c:	f06f 0003 	mvn.w	r0, #3
 8011d70:	b01b      	add	sp, #108	; 0x6c
 8011d72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d76:	f06f 0002 	mvn.w	r0, #2
 8011d7a:	b01b      	add	sp, #108	; 0x6c
 8011d7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d80:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8011d82:	f891 3040 	ldrb.w	r3, [r1, #64]	; 0x40
 8011d86:	b333      	cbz	r3, 8011dd6 <tree_ensemble_classifier_decoder+0x2ce>
 8011d88:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011d8a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8011d8c:	ed93 7a00 	vldr	s14, [r3]
 8011d90:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011d92:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8011d96:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011d9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d9e:	bfcc      	ite	gt
 8011da0:	685b      	ldrgt	r3, [r3, #4]
 8011da2:	681b      	ldrle	r3, [r3, #0]
 8011da4:	6013      	str	r3, [r2, #0]
 8011da6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011da8:	ed93 7a00 	vldr	s14, [r3]
 8011dac:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8011db0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011db4:	ed83 7a01 	vstr	s14, [r3, #4]
 8011db8:	edc3 7a00 	vstr	s15, [r3]
 8011dbc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011dbe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011dc2:	2b01      	cmp	r3, #1
 8011dc4:	d19f      	bne.n	8011d06 <tree_ensemble_classifier_decoder+0x1fe>
 8011dc6:	2000      	movs	r0, #0
 8011dc8:	e7cd      	b.n	8011d66 <tree_ensemble_classifier_decoder+0x25e>
 8011dca:	f1bb 0f00 	cmp.w	fp, #0
 8011dce:	f47f aecb 	bne.w	8011b68 <tree_ensemble_classifier_decoder+0x60>
 8011dd2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011dd4:	e794      	b.n	8011d00 <tree_ensemble_classifier_decoder+0x1f8>
 8011dd6:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8011dd8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011dda:	edd3 7a00 	vldr	s15, [r3]
 8011dde:	edd2 6a00 	vldr	s13, [r2]
 8011de2:	ed92 7a01 	vldr	s14, [r2, #4]
 8011de6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011dea:	edc2 7a00 	vstr	s15, [r2]
 8011dee:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8011df0:	edd3 6a01 	vldr	s13, [r3, #4]
 8011df4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011df6:	ee37 7a26 	vadd.f32	s14, s14, s13
 8011dfa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8011dfe:	ed82 7a01 	vstr	s14, [r2, #4]
 8011e02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e06:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8011e08:	bfcc      	ite	gt
 8011e0a:	685b      	ldrgt	r3, [r3, #4]
 8011e0c:	681b      	ldrle	r3, [r3, #0]
 8011e0e:	6013      	str	r3, [r2, #0]
 8011e10:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011e12:	edd3 7a00 	vldr	s15, [r3]
 8011e16:	eeb1 7a67 	vneg.f32	s14, s15
 8011e1a:	edc3 7a01 	vstr	s15, [r3, #4]
 8011e1e:	ed83 7a00 	vstr	s14, [r3]
 8011e22:	e7cb      	b.n	8011dbc <tree_ensemble_classifier_decoder+0x2b4>

08011e24 <forward_tree_ensemble_classifier>:
 8011e24:	6982      	ldr	r2, [r0, #24]
 8011e26:	8813      	ldrh	r3, [r2, #0]
 8011e28:	2b00      	cmp	r3, #0
 8011e2a:	f000 80a1 	beq.w	8011f70 <forward_tree_ensemble_classifier+0x14c>
 8011e2e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e32:	6855      	ldr	r5, [r2, #4]
 8011e34:	686a      	ldr	r2, [r5, #4]
 8011e36:	2b01      	cmp	r3, #1
 8011e38:	b0a1      	sub	sp, #132	; 0x84
 8011e3a:	bf14      	ite	ne
 8011e3c:	f105 010c 	addne.w	r1, r5, #12
 8011e40:	2100      	moveq	r1, #0
 8011e42:	b102      	cbz	r2, 8011e46 <forward_tree_ensemble_classifier+0x22>
 8011e44:	6812      	ldr	r2, [r2, #0]
 8011e46:	684c      	ldr	r4, [r1, #4]
 8011e48:	2c00      	cmp	r4, #0
 8011e4a:	f000 808f 	beq.w	8011f6c <forward_tree_ensemble_classifier+0x148>
 8011e4e:	e9d4 1400 	ldrd	r1, r4, [r4]
 8011e52:	2b02      	cmp	r3, #2
 8011e54:	f240 8090 	bls.w	8011f78 <forward_tree_ensemble_classifier+0x154>
 8011e58:	69eb      	ldr	r3, [r5, #28]
 8011e5a:	2b00      	cmp	r3, #0
 8011e5c:	f000 808a 	beq.w	8011f74 <forward_tree_ensemble_classifier+0x150>
 8011e60:	681d      	ldr	r5, [r3, #0]
 8011e62:	699e      	ldr	r6, [r3, #24]
 8011e64:	69ad      	ldr	r5, [r5, #24]
 8011e66:	f8d6 a018 	ldr.w	sl, [r6, #24]
 8011e6a:	f8d5 c008 	ldr.w	ip, [r5, #8]
 8011e6e:	685d      	ldr	r5, [r3, #4]
 8011e70:	69ad      	ldr	r5, [r5, #24]
 8011e72:	68af      	ldr	r7, [r5, #8]
 8011e74:	689d      	ldr	r5, [r3, #8]
 8011e76:	f8d5 e018 	ldr.w	lr, [r5, #24]
 8011e7a:	68dd      	ldr	r5, [r3, #12]
 8011e7c:	f8de b008 	ldr.w	fp, [lr, #8]
 8011e80:	f8d5 8018 	ldr.w	r8, [r5, #24]
 8011e84:	691d      	ldr	r5, [r3, #16]
 8011e86:	69ad      	ldr	r5, [r5, #24]
 8011e88:	68ad      	ldr	r5, [r5, #8]
 8011e8a:	9503      	str	r5, [sp, #12]
 8011e8c:	695d      	ldr	r5, [r3, #20]
 8011e8e:	f8d5 9018 	ldr.w	r9, [r5, #24]
 8011e92:	69dd      	ldr	r5, [r3, #28]
 8011e94:	69ad      	ldr	r5, [r5, #24]
 8011e96:	68ad      	ldr	r5, [r5, #8]
 8011e98:	9506      	str	r5, [sp, #24]
 8011e9a:	6a1d      	ldr	r5, [r3, #32]
 8011e9c:	69ad      	ldr	r5, [r5, #24]
 8011e9e:	68ad      	ldr	r5, [r5, #8]
 8011ea0:	9507      	str	r5, [sp, #28]
 8011ea2:	68f5      	ldr	r5, [r6, #12]
 8011ea4:	f8da 6008 	ldr.w	r6, [sl, #8]
 8011ea8:	686d      	ldr	r5, [r5, #4]
 8011eaa:	9604      	str	r6, [sp, #16]
 8011eac:	9505      	str	r5, [sp, #20]
 8011eae:	f8de 5000 	ldr.w	r5, [lr]
 8011eb2:	f8d8 6000 	ldr.w	r6, [r8]
 8011eb6:	f8d9 e008 	ldr.w	lr, [r9, #8]
 8011eba:	f3c5 1ac6 	ubfx	sl, r5, #7, #7
 8011ebe:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8011ec2:	9502      	str	r5, [sp, #8]
 8011ec4:	f8d9 5000 	ldr.w	r5, [r9]
 8011ec8:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 8011ecc:	f8d2 c018 	ldr.w	ip, [r2, #24]
 8011ed0:	698a      	ldr	r2, [r1, #24]
 8011ed2:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8011ed6:	f8d2 8008 	ldr.w	r8, [r2, #8]
 8011eda:	68e2      	ldr	r2, [r4, #12]
 8011edc:	f8b2 c004 	ldrh.w	ip, [r2, #4]
 8011ee0:	970a      	str	r7, [sp, #40]	; 0x28
 8011ee2:	6a5f      	ldr	r7, [r3, #36]	; 0x24
 8011ee4:	69bf      	ldr	r7, [r7, #24]
 8011ee6:	4642      	mov	r2, r8
 8011ee8:	f8d7 8008 	ldr.w	r8, [r7, #8]
 8011eec:	e9d3 730a 	ldrd	r7, r3, [r3, #40]	; 0x28
 8011ef0:	69bf      	ldr	r7, [r7, #24]
 8011ef2:	699b      	ldr	r3, [r3, #24]
 8011ef4:	f8d7 9008 	ldr.w	r9, [r7, #8]
 8011ef8:	689f      	ldr	r7, [r3, #8]
 8011efa:	69a3      	ldr	r3, [r4, #24]
 8011efc:	f3c6 16c6 	ubfx	r6, r6, #7, #7
 8011f00:	689b      	ldr	r3, [r3, #8]
 8011f02:	9611      	str	r6, [sp, #68]	; 0x44
 8011f04:	9e02      	ldr	r6, [sp, #8]
 8011f06:	960e      	str	r6, [sp, #56]	; 0x38
 8011f08:	9e03      	ldr	r6, [sp, #12]
 8011f0a:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
 8011f0e:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 8011f12:	960f      	str	r6, [sp, #60]	; 0x3c
 8011f14:	9e04      	ldr	r6, [sp, #16]
 8011f16:	9610      	str	r6, [sp, #64]	; 0x40
 8011f18:	9e05      	ldr	r6, [sp, #20]
 8011f1a:	9612      	str	r6, [sp, #72]	; 0x48
 8011f1c:	9e06      	ldr	r6, [sp, #24]
 8011f1e:	9613      	str	r6, [sp, #76]	; 0x4c
 8011f20:	9e07      	ldr	r6, [sp, #28]
 8011f22:	f8df e05c 	ldr.w	lr, [pc, #92]	; 8011f80 <forward_tree_ensemble_classifier+0x15c>
 8011f26:	f8cd 9058 	str.w	r9, [sp, #88]	; 0x58
 8011f2a:	e9cd 6814 	strd	r6, r8, [sp, #80]	; 0x50
 8011f2e:	69c6      	ldr	r6, [r0, #28]
 8011f30:	f8cd c000 	str.w	ip, [sp]
 8011f34:	2e00      	cmp	r6, #0
 8011f36:	bf08      	it	eq
 8011f38:	4676      	moveq	r6, lr
 8011f3a:	e9cd 6417 	strd	r6, r4, [sp, #92]	; 0x5c
 8011f3e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8011f40:	941c      	str	r4, [sp, #112]	; 0x70
 8011f42:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8011f44:	941d      	str	r4, [sp, #116]	; 0x74
 8011f46:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8011f48:	941e      	str	r4, [sp, #120]	; 0x78
 8011f4a:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8011f4c:	f890 0020 	ldrb.w	r0, [r0, #32]
 8011f50:	f88d 0064 	strb.w	r0, [sp, #100]	; 0x64
 8011f54:	f3c5 15c6 	ubfx	r5, r5, #7, #7
 8011f58:	a809      	add	r0, sp, #36	; 0x24
 8011f5a:	e9cd a51a 	strd	sl, r5, [sp, #104]	; 0x68
 8011f5e:	970c      	str	r7, [sp, #48]	; 0x30
 8011f60:	941f      	str	r4, [sp, #124]	; 0x7c
 8011f62:	f7ff fdd1 	bl	8011b08 <tree_ensemble_classifier_decoder>
 8011f66:	b021      	add	sp, #132	; 0x84
 8011f68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f6c:	4621      	mov	r1, r4
 8011f6e:	e770      	b.n	8011e52 <forward_tree_ensemble_classifier+0x2e>
 8011f70:	685b      	ldr	r3, [r3, #4]
 8011f72:	deff      	udf	#255	; 0xff
 8011f74:	699b      	ldr	r3, [r3, #24]
 8011f76:	deff      	udf	#255	; 0xff
 8011f78:	2300      	movs	r3, #0
 8011f7a:	685b      	ldr	r3, [r3, #4]
 8011f7c:	deff      	udf	#255	; 0xff
 8011f7e:	bf00      	nop
 8011f80:	08011a09 	.word	0x08011a09

08011f84 <forward_zipmap>:
 8011f84:	6983      	ldr	r3, [r0, #24]
 8011f86:	881a      	ldrh	r2, [r3, #0]
 8011f88:	2a00      	cmp	r2, #0
 8011f8a:	d047      	beq.n	801201c <forward_zipmap+0x98>
 8011f8c:	b470      	push	{r4, r5, r6}
 8011f8e:	685d      	ldr	r5, [r3, #4]
 8011f90:	686b      	ldr	r3, [r5, #4]
 8011f92:	b103      	cbz	r3, 8011f96 <forward_zipmap+0x12>
 8011f94:	681b      	ldr	r3, [r3, #0]
 8011f96:	2a01      	cmp	r2, #1
 8011f98:	f000 8094 	beq.w	80120c4 <forward_zipmap+0x140>
 8011f9c:	6929      	ldr	r1, [r5, #16]
 8011f9e:	2900      	cmp	r1, #0
 8011fa0:	f000 808c 	beq.w	80120bc <forward_zipmap+0x138>
 8011fa4:	680c      	ldr	r4, [r1, #0]
 8011fa6:	68d8      	ldr	r0, [r3, #12]
 8011fa8:	6999      	ldr	r1, [r3, #24]
 8011faa:	69a3      	ldr	r3, [r4, #24]
 8011fac:	68c4      	ldr	r4, [r0, #12]
 8011fae:	6840      	ldr	r0, [r0, #4]
 8011fb0:	6889      	ldr	r1, [r1, #8]
 8011fb2:	689b      	ldr	r3, [r3, #8]
 8011fb4:	2a02      	cmp	r2, #2
 8011fb6:	fb00 f404 	mul.w	r4, r0, r4
 8011fba:	f000 8086 	beq.w	80120ca <forward_zipmap+0x146>
 8011fbe:	69ea      	ldr	r2, [r5, #28]
 8011fc0:	2a00      	cmp	r2, #0
 8011fc2:	d07d      	beq.n	80120c0 <forward_zipmap+0x13c>
 8011fc4:	6812      	ldr	r2, [r2, #0]
 8011fc6:	6990      	ldr	r0, [r2, #24]
 8011fc8:	68d5      	ldr	r5, [r2, #12]
 8011fca:	6802      	ldr	r2, [r0, #0]
 8011fcc:	686d      	ldr	r5, [r5, #4]
 8011fce:	6886      	ldr	r6, [r0, #8]
 8011fd0:	f3c2 12c6 	ubfx	r2, r2, #7, #7
 8011fd4:	b304      	cbz	r4, 8012018 <forward_zipmap+0x94>
 8011fd6:	2a10      	cmp	r2, #16
 8011fd8:	d022      	beq.n	8012020 <forward_zipmap+0x9c>
 8011fda:	2a08      	cmp	r2, #8
 8011fdc:	d03f      	beq.n	801205e <forward_zipmap+0xda>
 8011fde:	2000      	movs	r0, #0
 8011fe0:	4684      	mov	ip, r0
 8011fe2:	4285      	cmp	r5, r0
 8011fe4:	bf14      	ite	ne
 8011fe6:	4602      	movne	r2, r0
 8011fe8:	2200      	moveq	r2, #0
 8011fea:	f103 0308 	add.w	r3, r3, #8
 8011fee:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 8011ff2:	ee07 2a90 	vmov	s15, r2
 8011ff6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011ffa:	f10c 0c01 	add.w	ip, ip, #1
 8011ffe:	ee17 2a90 	vmov	r2, s15
 8012002:	f843 2c08 	str.w	r2, [r3, #-8]
 8012006:	f851 2b04 	ldr.w	r2, [r1], #4
 801200a:	f843 2c04 	str.w	r2, [r3, #-4]
 801200e:	bf14      	ite	ne
 8012010:	3001      	addne	r0, #1
 8012012:	2001      	moveq	r0, #1
 8012014:	4564      	cmp	r4, ip
 8012016:	d1e4      	bne.n	8011fe2 <forward_zipmap+0x5e>
 8012018:	bc70      	pop	{r4, r5, r6}
 801201a:	4770      	bx	lr
 801201c:	6853      	ldr	r3, [r2, #4]
 801201e:	deff      	udf	#255	; 0xff
 8012020:	2000      	movs	r0, #0
 8012022:	4684      	mov	ip, r0
 8012024:	4285      	cmp	r5, r0
 8012026:	bf14      	ite	ne
 8012028:	4602      	movne	r2, r0
 801202a:	2200      	moveq	r2, #0
 801202c:	f103 0308 	add.w	r3, r3, #8
 8012030:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 8012034:	ee07 2a90 	vmov	s15, r2
 8012038:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801203c:	f10c 0c01 	add.w	ip, ip, #1
 8012040:	ee17 2a90 	vmov	r2, s15
 8012044:	f843 2c08 	str.w	r2, [r3, #-8]
 8012048:	f851 2b04 	ldr.w	r2, [r1], #4
 801204c:	f843 2c04 	str.w	r2, [r3, #-4]
 8012050:	bf14      	ite	ne
 8012052:	3001      	addne	r0, #1
 8012054:	2001      	moveq	r0, #1
 8012056:	4564      	cmp	r4, ip
 8012058:	d1e4      	bne.n	8012024 <forward_zipmap+0xa0>
 801205a:	bc70      	pop	{r4, r5, r6}
 801205c:	4770      	bx	lr
 801205e:	2200      	movs	r2, #0
 8012060:	4610      	mov	r0, r2
 8012062:	4295      	cmp	r5, r2
 8012064:	f100 0001 	add.w	r0, r0, #1
 8012068:	d017      	beq.n	801209a <forward_zipmap+0x116>
 801206a:	f816 c002 	ldrb.w	ip, [r6, r2]
 801206e:	ee07 ca90 	vmov	s15, ip
 8012072:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012076:	4284      	cmp	r4, r0
 8012078:	ee17 ca90 	vmov	ip, s15
 801207c:	f8c3 c000 	str.w	ip, [r3]
 8012080:	f851 cb04 	ldr.w	ip, [r1], #4
 8012084:	f8c3 c004 	str.w	ip, [r3, #4]
 8012088:	f102 0201 	add.w	r2, r2, #1
 801208c:	f103 0308 	add.w	r3, r3, #8
 8012090:	d0c2      	beq.n	8012018 <forward_zipmap+0x94>
 8012092:	4295      	cmp	r5, r2
 8012094:	f100 0001 	add.w	r0, r0, #1
 8012098:	d1e7      	bne.n	801206a <forward_zipmap+0xe6>
 801209a:	7832      	ldrb	r2, [r6, #0]
 801209c:	ee07 2a90 	vmov	s15, r2
 80120a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80120a4:	4284      	cmp	r4, r0
 80120a6:	ee17 2a90 	vmov	r2, s15
 80120aa:	601a      	str	r2, [r3, #0]
 80120ac:	f851 2b04 	ldr.w	r2, [r1], #4
 80120b0:	605a      	str	r2, [r3, #4]
 80120b2:	f103 0308 	add.w	r3, r3, #8
 80120b6:	d0af      	beq.n	8012018 <forward_zipmap+0x94>
 80120b8:	2201      	movs	r2, #1
 80120ba:	e7d2      	b.n	8012062 <forward_zipmap+0xde>
 80120bc:	698b      	ldr	r3, [r1, #24]
 80120be:	deff      	udf	#255	; 0xff
 80120c0:	68d3      	ldr	r3, [r2, #12]
 80120c2:	deff      	udf	#255	; 0xff
 80120c4:	2300      	movs	r3, #0
 80120c6:	685b      	ldr	r3, [r3, #4]
 80120c8:	deff      	udf	#255	; 0xff
 80120ca:	2300      	movs	r3, #0
 80120cc:	685b      	ldr	r3, [r3, #4]
 80120ce:	deff      	udf	#255	; 0xff

080120d0 <ai_check_custom_types>:
 80120d0:	b082      	sub	sp, #8
 80120d2:	4b13      	ldr	r3, [pc, #76]	; (8012120 <ai_check_custom_types+0x50>)
 80120d4:	9301      	str	r3, [sp, #4]
 80120d6:	b118      	cbz	r0, 80120e0 <ai_check_custom_types+0x10>
 80120d8:	7803      	ldrb	r3, [r0, #0]
 80120da:	2b03      	cmp	r3, #3
 80120dc:	d002      	beq.n	80120e4 <ai_check_custom_types+0x14>
 80120de:	2000      	movs	r0, #0
 80120e0:	b002      	add	sp, #8
 80120e2:	4770      	bx	lr
 80120e4:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80120e8:	4293      	cmp	r3, r2
 80120ea:	d004      	beq.n	80120f6 <ai_check_custom_types+0x26>
 80120ec:	2001      	movs	r0, #1
 80120ee:	f080 0001 	eor.w	r0, r0, #1
 80120f2:	b002      	add	sp, #8
 80120f4:	4770      	bx	lr
 80120f6:	7842      	ldrb	r2, [r0, #1]
 80120f8:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80120fc:	429a      	cmp	r2, r3
 80120fe:	f100 0001 	add.w	r0, r0, #1
 8012102:	d1f3      	bne.n	80120ec <ai_check_custom_types+0x1c>
 8012104:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8012108:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801210c:	429a      	cmp	r2, r3
 801210e:	d1ed      	bne.n	80120ec <ai_check_custom_types+0x1c>
 8012110:	7842      	ldrb	r2, [r0, #1]
 8012112:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8012116:	429a      	cmp	r2, r3
 8012118:	d1e8      	bne.n	80120ec <ai_check_custom_types+0x1c>
 801211a:	2000      	movs	r0, #0
 801211c:	e7e7      	b.n	80120ee <ai_check_custom_types+0x1e>
 801211e:	bf00      	nop
 8012120:	84048403 	.word	0x84048403

08012124 <ai_layers_init_all>:
 8012124:	4601      	mov	r1, r0
 8012126:	2000      	movs	r0, #0
 8012128:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 801212a:	b143      	cbz	r3, 801213e <ai_layers_init_all+0x1a>
 801212c:	691a      	ldr	r2, [r3, #16]
 801212e:	60d9      	str	r1, [r3, #12]
 8012130:	429a      	cmp	r2, r3
 8012132:	f100 0001 	add.w	r0, r0, #1
 8012136:	d002      	beq.n	801213e <ai_layers_init_all+0x1a>
 8012138:	b10a      	cbz	r2, 801213e <ai_layers_init_all+0x1a>
 801213a:	4613      	mov	r3, r2
 801213c:	e7f5      	b.n	801212a <ai_layers_init_all+0x6>
 801213e:	4770      	bx	lr

08012140 <ai_layers_post_init_all>:
 8012140:	b538      	push	{r3, r4, r5, lr}
 8012142:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8012144:	2500      	movs	r5, #0
 8012146:	b16c      	cbz	r4, 8012164 <ai_layers_post_init_all+0x24>
 8012148:	6863      	ldr	r3, [r4, #4]
 801214a:	07db      	lsls	r3, r3, #31
 801214c:	d504      	bpl.n	8012158 <ai_layers_post_init_all+0x18>
 801214e:	6a23      	ldr	r3, [r4, #32]
 8012150:	4620      	mov	r0, r4
 8012152:	b10b      	cbz	r3, 8012158 <ai_layers_post_init_all+0x18>
 8012154:	4798      	blx	r3
 8012156:	3501      	adds	r5, #1
 8012158:	6923      	ldr	r3, [r4, #16]
 801215a:	42a3      	cmp	r3, r4
 801215c:	d002      	beq.n	8012164 <ai_layers_post_init_all+0x24>
 801215e:	b10b      	cbz	r3, 8012164 <ai_layers_post_init_all+0x24>
 8012160:	461c      	mov	r4, r3
 8012162:	e7f0      	b.n	8012146 <ai_layers_post_init_all+0x6>
 8012164:	4628      	mov	r0, r5
 8012166:	bd38      	pop	{r3, r4, r5, pc}

08012168 <ai_layers_forward_all>:
 8012168:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801216c:	f8d0 803c 	ldr.w	r8, [r0, #60]	; 0x3c
 8012170:	4604      	mov	r4, r0
 8012172:	f1b8 0f00 	cmp.w	r8, #0
 8012176:	d02b      	beq.n	80121d0 <ai_layers_forward_all+0x68>
 8012178:	6b41      	ldr	r1, [r0, #52]	; 0x34
 801217a:	6381      	str	r1, [r0, #56]	; 0x38
 801217c:	b321      	cbz	r1, 80121c8 <ai_layers_forward_all+0x60>
 801217e:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8012180:	2001      	movs	r0, #1
 8012182:	47c0      	blx	r8
 8012184:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8012186:	b1fe      	cbz	r6, 80121c8 <ai_layers_forward_all+0x60>
 8012188:	2700      	movs	r7, #0
 801218a:	4631      	mov	r1, r6
 801218c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 801218e:	2002      	movs	r0, #2
 8012190:	47c0      	blx	r8
 8012192:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8012194:	4628      	mov	r0, r5
 8012196:	696b      	ldr	r3, [r5, #20]
 8012198:	4798      	blx	r3
 801219a:	692e      	ldr	r6, [r5, #16]
 801219c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 801219e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80121a0:	42b5      	cmp	r5, r6
 80121a2:	f04f 0003 	mov.w	r0, #3
 80121a6:	d007      	beq.n	80121b8 <ai_layers_forward_all+0x50>
 80121a8:	47c0      	blx	r8
 80121aa:	3701      	adds	r7, #1
 80121ac:	63a6      	str	r6, [r4, #56]	; 0x38
 80121ae:	2e00      	cmp	r6, #0
 80121b0:	d1eb      	bne.n	801218a <ai_layers_forward_all+0x22>
 80121b2:	4638      	mov	r0, r7
 80121b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80121b8:	2003      	movs	r0, #3
 80121ba:	47c0      	blx	r8
 80121bc:	2300      	movs	r3, #0
 80121be:	3701      	adds	r7, #1
 80121c0:	63a3      	str	r3, [r4, #56]	; 0x38
 80121c2:	4638      	mov	r0, r7
 80121c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80121c8:	2700      	movs	r7, #0
 80121ca:	4638      	mov	r0, r7
 80121cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80121d0:	6b45      	ldr	r5, [r0, #52]	; 0x34
 80121d2:	6385      	str	r5, [r0, #56]	; 0x38
 80121d4:	2d00      	cmp	r5, #0
 80121d6:	d0f7      	beq.n	80121c8 <ai_layers_forward_all+0x60>
 80121d8:	4647      	mov	r7, r8
 80121da:	696b      	ldr	r3, [r5, #20]
 80121dc:	4628      	mov	r0, r5
 80121de:	4798      	blx	r3
 80121e0:	462b      	mov	r3, r5
 80121e2:	692d      	ldr	r5, [r5, #16]
 80121e4:	429d      	cmp	r5, r3
 80121e6:	d004      	beq.n	80121f2 <ai_layers_forward_all+0x8a>
 80121e8:	63a5      	str	r5, [r4, #56]	; 0x38
 80121ea:	3701      	adds	r7, #1
 80121ec:	2d00      	cmp	r5, #0
 80121ee:	d1f4      	bne.n	80121da <ai_layers_forward_all+0x72>
 80121f0:	e7df      	b.n	80121b2 <ai_layers_forward_all+0x4a>
 80121f2:	2300      	movs	r3, #0
 80121f4:	63a3      	str	r3, [r4, #56]	; 0x38
 80121f6:	3701      	adds	r7, #1
 80121f8:	e7db      	b.n	80121b2 <ai_layers_forward_all+0x4a>
 80121fa:	bf00      	nop

080121fc <ai_version_get>:
 80121fc:	0212      	lsls	r2, r2, #8
 80121fe:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8012202:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 8012206:	4770      	bx	lr

08012208 <get_tensor_byte_size>:
 8012208:	b410      	push	{r4}
 801220a:	6983      	ldr	r3, [r0, #24]
 801220c:	68c4      	ldr	r4, [r0, #12]
 801220e:	6941      	ldr	r1, [r0, #20]
 8012210:	681b      	ldr	r3, [r3, #0]
 8012212:	68e0      	ldr	r0, [r4, #12]
 8012214:	4a07      	ldr	r2, [pc, #28]	; (8012234 <get_tensor_byte_size+0x2c>)
 8012216:	68c9      	ldr	r1, [r1, #12]
 8012218:	f85d 4b04 	ldr.w	r4, [sp], #4
 801221c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8012220:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8012224:	fb01 f000 	mul.w	r0, r1, r0
 8012228:	4293      	cmp	r3, r2
 801222a:	bf04      	itt	eq
 801222c:	3007      	addeq	r0, #7
 801222e:	08c0      	lsreq	r0, r0, #3
 8012230:	4770      	bx	lr
 8012232:	bf00      	nop
 8012234:	000400c0 	.word	0x000400c0

08012238 <ai_array_to_buffer_fmt>:
 8012238:	f3c0 4343 	ubfx	r3, r0, #17, #4
 801223c:	2b02      	cmp	r3, #2
 801223e:	d050      	beq.n	80122e2 <ai_array_to_buffer_fmt+0xaa>
 8012240:	4b2a      	ldr	r3, [pc, #168]	; (80122ec <ai_array_to_buffer_fmt+0xb4>)
 8012242:	f020 427e 	bic.w	r2, r0, #4261412864	; 0xfe000000
 8012246:	429a      	cmp	r2, r3
 8012248:	d00b      	beq.n	8012262 <ai_array_to_buffer_fmt+0x2a>
 801224a:	dc1c      	bgt.n	8012286 <ai_array_to_buffer_fmt+0x4e>
 801224c:	4b28      	ldr	r3, [pc, #160]	; (80122f0 <ai_array_to_buffer_fmt+0xb8>)
 801224e:	429a      	cmp	r2, r3
 8012250:	d007      	beq.n	8012262 <ai_array_to_buffer_fmt+0x2a>
 8012252:	dd0b      	ble.n	801226c <ai_array_to_buffer_fmt+0x34>
 8012254:	4b27      	ldr	r3, [pc, #156]	; (80122f4 <ai_array_to_buffer_fmt+0xbc>)
 8012256:	429a      	cmp	r2, r3
 8012258:	d003      	beq.n	8012262 <ai_array_to_buffer_fmt+0x2a>
 801225a:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 801225e:	429a      	cmp	r2, r3
 8012260:	d131      	bne.n	80122c6 <ai_array_to_buffer_fmt+0x8e>
 8012262:	4613      	mov	r3, r2
 8012264:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8012268:	4318      	orrs	r0, r3
 801226a:	4770      	bx	lr
 801226c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8012270:	429a      	cmp	r2, r3
 8012272:	d0f6      	beq.n	8012262 <ai_array_to_buffer_fmt+0x2a>
 8012274:	dd2c      	ble.n	80122d0 <ai_array_to_buffer_fmt+0x98>
 8012276:	4b20      	ldr	r3, [pc, #128]	; (80122f8 <ai_array_to_buffer_fmt+0xc0>)
 8012278:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 801227c:	429a      	cmp	r2, r3
 801227e:	bf18      	it	ne
 8012280:	2340      	movne	r3, #64	; 0x40
 8012282:	4318      	orrs	r0, r3
 8012284:	4770      	bx	lr
 8012286:	4b1d      	ldr	r3, [pc, #116]	; (80122fc <ai_array_to_buffer_fmt+0xc4>)
 8012288:	429a      	cmp	r2, r3
 801228a:	d0ea      	beq.n	8012262 <ai_array_to_buffer_fmt+0x2a>
 801228c:	dd0e      	ble.n	80122ac <ai_array_to_buffer_fmt+0x74>
 801228e:	4b1c      	ldr	r3, [pc, #112]	; (8012300 <ai_array_to_buffer_fmt+0xc8>)
 8012290:	429a      	cmp	r2, r3
 8012292:	d0e6      	beq.n	8012262 <ai_array_to_buffer_fmt+0x2a>
 8012294:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 8012298:	429a      	cmp	r2, r3
 801229a:	d0e2      	beq.n	8012262 <ai_array_to_buffer_fmt+0x2a>
 801229c:	4b19      	ldr	r3, [pc, #100]	; (8012304 <ai_array_to_buffer_fmt+0xcc>)
 801229e:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 80122a2:	429a      	cmp	r2, r3
 80122a4:	bf18      	it	ne
 80122a6:	2340      	movne	r3, #64	; 0x40
 80122a8:	4318      	orrs	r0, r3
 80122aa:	4770      	bx	lr
 80122ac:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80122b0:	429a      	cmp	r2, r3
 80122b2:	d0d6      	beq.n	8012262 <ai_array_to_buffer_fmt+0x2a>
 80122b4:	3307      	adds	r3, #7
 80122b6:	429a      	cmp	r2, r3
 80122b8:	d0d3      	beq.n	8012262 <ai_array_to_buffer_fmt+0x2a>
 80122ba:	f2a3 3387 	subw	r3, r3, #903	; 0x387
 80122be:	429a      	cmp	r2, r3
 80122c0:	bf18      	it	ne
 80122c2:	2340      	movne	r3, #64	; 0x40
 80122c4:	e7ce      	b.n	8012264 <ai_array_to_buffer_fmt+0x2c>
 80122c6:	4b10      	ldr	r3, [pc, #64]	; (8012308 <ai_array_to_buffer_fmt+0xd0>)
 80122c8:	429a      	cmp	r2, r3
 80122ca:	bf18      	it	ne
 80122cc:	2340      	movne	r3, #64	; 0x40
 80122ce:	e7c9      	b.n	8012264 <ai_array_to_buffer_fmt+0x2c>
 80122d0:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80122d4:	429a      	cmp	r2, r3
 80122d6:	d0c4      	beq.n	8012262 <ai_array_to_buffer_fmt+0x2a>
 80122d8:	3380      	adds	r3, #128	; 0x80
 80122da:	429a      	cmp	r2, r3
 80122dc:	bf18      	it	ne
 80122de:	2340      	movne	r3, #64	; 0x40
 80122e0:	e7c0      	b.n	8012264 <ai_array_to_buffer_fmt+0x2c>
 80122e2:	4b0a      	ldr	r3, [pc, #40]	; (801230c <ai_array_to_buffer_fmt+0xd4>)
 80122e4:	4003      	ands	r3, r0
 80122e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80122ea:	e7bb      	b.n	8012264 <ai_array_to_buffer_fmt+0x2c>
 80122ec:	00840040 	.word	0x00840040
 80122f0:	00040840 	.word	0x00040840
 80122f4:	00041040 	.word	0x00041040
 80122f8:	00040447 	.word	0x00040447
 80122fc:	00840840 	.word	0x00840840
 8012300:	00841040 	.word	0x00841040
 8012304:	0084084f 	.word	0x0084084f
 8012308:	0004084f 	.word	0x0004084f
 801230c:	00803fff 	.word	0x00803fff

08012310 <ai_array_get_data_byte_size>:
 8012310:	b169      	cbz	r1, 801232e <ai_array_get_data_byte_size+0x1e>
 8012312:	f3c0 12c6 	ubfx	r2, r0, #7, #7
 8012316:	fb02 f101 	mul.w	r1, r2, r1
 801231a:	1dcb      	adds	r3, r1, #7
 801231c:	f023 0307 	bic.w	r3, r3, #7
 8012320:	f3c0 5041 	ubfx	r0, r0, #21, #2
 8012324:	fa23 f000 	lsr.w	r0, r3, r0
 8012328:	3007      	adds	r0, #7
 801232a:	08c0      	lsrs	r0, r0, #3
 801232c:	4770      	bx	lr
 801232e:	4608      	mov	r0, r1
 8012330:	4770      	bx	lr
 8012332:	bf00      	nop

08012334 <__errno>:
 8012334:	4b01      	ldr	r3, [pc, #4]	; (801233c <__errno+0x8>)
 8012336:	6818      	ldr	r0, [r3, #0]
 8012338:	4770      	bx	lr
 801233a:	bf00      	nop
 801233c:	200008e0 	.word	0x200008e0

08012340 <__libc_init_array>:
 8012340:	b570      	push	{r4, r5, r6, lr}
 8012342:	4d0d      	ldr	r5, [pc, #52]	; (8012378 <__libc_init_array+0x38>)
 8012344:	4c0d      	ldr	r4, [pc, #52]	; (801237c <__libc_init_array+0x3c>)
 8012346:	1b64      	subs	r4, r4, r5
 8012348:	10a4      	asrs	r4, r4, #2
 801234a:	2600      	movs	r6, #0
 801234c:	42a6      	cmp	r6, r4
 801234e:	d109      	bne.n	8012364 <__libc_init_array+0x24>
 8012350:	4d0b      	ldr	r5, [pc, #44]	; (8012380 <__libc_init_array+0x40>)
 8012352:	4c0c      	ldr	r4, [pc, #48]	; (8012384 <__libc_init_array+0x44>)
 8012354:	f001 fb20 	bl	8013998 <_init>
 8012358:	1b64      	subs	r4, r4, r5
 801235a:	10a4      	asrs	r4, r4, #2
 801235c:	2600      	movs	r6, #0
 801235e:	42a6      	cmp	r6, r4
 8012360:	d105      	bne.n	801236e <__libc_init_array+0x2e>
 8012362:	bd70      	pop	{r4, r5, r6, pc}
 8012364:	f855 3b04 	ldr.w	r3, [r5], #4
 8012368:	4798      	blx	r3
 801236a:	3601      	adds	r6, #1
 801236c:	e7ee      	b.n	801234c <__libc_init_array+0xc>
 801236e:	f855 3b04 	ldr.w	r3, [r5], #4
 8012372:	4798      	blx	r3
 8012374:	3601      	adds	r6, #1
 8012376:	e7f2      	b.n	801235e <__libc_init_array+0x1e>
 8012378:	08014170 	.word	0x08014170
 801237c:	08014170 	.word	0x08014170
 8012380:	08014170 	.word	0x08014170
 8012384:	08014174 	.word	0x08014174

08012388 <memcpy>:
 8012388:	440a      	add	r2, r1
 801238a:	4291      	cmp	r1, r2
 801238c:	f100 33ff 	add.w	r3, r0, #4294967295
 8012390:	d100      	bne.n	8012394 <memcpy+0xc>
 8012392:	4770      	bx	lr
 8012394:	b510      	push	{r4, lr}
 8012396:	f811 4b01 	ldrb.w	r4, [r1], #1
 801239a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801239e:	4291      	cmp	r1, r2
 80123a0:	d1f9      	bne.n	8012396 <memcpy+0xe>
 80123a2:	bd10      	pop	{r4, pc}

080123a4 <memset>:
 80123a4:	4402      	add	r2, r0
 80123a6:	4603      	mov	r3, r0
 80123a8:	4293      	cmp	r3, r2
 80123aa:	d100      	bne.n	80123ae <memset+0xa>
 80123ac:	4770      	bx	lr
 80123ae:	f803 1b01 	strb.w	r1, [r3], #1
 80123b2:	e7f9      	b.n	80123a8 <memset+0x4>

080123b4 <_free_r>:
 80123b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80123b6:	2900      	cmp	r1, #0
 80123b8:	d044      	beq.n	8012444 <_free_r+0x90>
 80123ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80123be:	9001      	str	r0, [sp, #4]
 80123c0:	2b00      	cmp	r3, #0
 80123c2:	f1a1 0404 	sub.w	r4, r1, #4
 80123c6:	bfb8      	it	lt
 80123c8:	18e4      	addlt	r4, r4, r3
 80123ca:	f000 fc85 	bl	8012cd8 <__malloc_lock>
 80123ce:	4a1e      	ldr	r2, [pc, #120]	; (8012448 <_free_r+0x94>)
 80123d0:	9801      	ldr	r0, [sp, #4]
 80123d2:	6813      	ldr	r3, [r2, #0]
 80123d4:	b933      	cbnz	r3, 80123e4 <_free_r+0x30>
 80123d6:	6063      	str	r3, [r4, #4]
 80123d8:	6014      	str	r4, [r2, #0]
 80123da:	b003      	add	sp, #12
 80123dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80123e0:	f000 bc80 	b.w	8012ce4 <__malloc_unlock>
 80123e4:	42a3      	cmp	r3, r4
 80123e6:	d908      	bls.n	80123fa <_free_r+0x46>
 80123e8:	6825      	ldr	r5, [r4, #0]
 80123ea:	1961      	adds	r1, r4, r5
 80123ec:	428b      	cmp	r3, r1
 80123ee:	bf01      	itttt	eq
 80123f0:	6819      	ldreq	r1, [r3, #0]
 80123f2:	685b      	ldreq	r3, [r3, #4]
 80123f4:	1949      	addeq	r1, r1, r5
 80123f6:	6021      	streq	r1, [r4, #0]
 80123f8:	e7ed      	b.n	80123d6 <_free_r+0x22>
 80123fa:	461a      	mov	r2, r3
 80123fc:	685b      	ldr	r3, [r3, #4]
 80123fe:	b10b      	cbz	r3, 8012404 <_free_r+0x50>
 8012400:	42a3      	cmp	r3, r4
 8012402:	d9fa      	bls.n	80123fa <_free_r+0x46>
 8012404:	6811      	ldr	r1, [r2, #0]
 8012406:	1855      	adds	r5, r2, r1
 8012408:	42a5      	cmp	r5, r4
 801240a:	d10b      	bne.n	8012424 <_free_r+0x70>
 801240c:	6824      	ldr	r4, [r4, #0]
 801240e:	4421      	add	r1, r4
 8012410:	1854      	adds	r4, r2, r1
 8012412:	42a3      	cmp	r3, r4
 8012414:	6011      	str	r1, [r2, #0]
 8012416:	d1e0      	bne.n	80123da <_free_r+0x26>
 8012418:	681c      	ldr	r4, [r3, #0]
 801241a:	685b      	ldr	r3, [r3, #4]
 801241c:	6053      	str	r3, [r2, #4]
 801241e:	4421      	add	r1, r4
 8012420:	6011      	str	r1, [r2, #0]
 8012422:	e7da      	b.n	80123da <_free_r+0x26>
 8012424:	d902      	bls.n	801242c <_free_r+0x78>
 8012426:	230c      	movs	r3, #12
 8012428:	6003      	str	r3, [r0, #0]
 801242a:	e7d6      	b.n	80123da <_free_r+0x26>
 801242c:	6825      	ldr	r5, [r4, #0]
 801242e:	1961      	adds	r1, r4, r5
 8012430:	428b      	cmp	r3, r1
 8012432:	bf04      	itt	eq
 8012434:	6819      	ldreq	r1, [r3, #0]
 8012436:	685b      	ldreq	r3, [r3, #4]
 8012438:	6063      	str	r3, [r4, #4]
 801243a:	bf04      	itt	eq
 801243c:	1949      	addeq	r1, r1, r5
 801243e:	6021      	streq	r1, [r4, #0]
 8012440:	6054      	str	r4, [r2, #4]
 8012442:	e7ca      	b.n	80123da <_free_r+0x26>
 8012444:	b003      	add	sp, #12
 8012446:	bd30      	pop	{r4, r5, pc}
 8012448:	20002d20 	.word	0x20002d20

0801244c <sbrk_aligned>:
 801244c:	b570      	push	{r4, r5, r6, lr}
 801244e:	4e0e      	ldr	r6, [pc, #56]	; (8012488 <sbrk_aligned+0x3c>)
 8012450:	460c      	mov	r4, r1
 8012452:	6831      	ldr	r1, [r6, #0]
 8012454:	4605      	mov	r5, r0
 8012456:	b911      	cbnz	r1, 801245e <sbrk_aligned+0x12>
 8012458:	f000 f91a 	bl	8012690 <_sbrk_r>
 801245c:	6030      	str	r0, [r6, #0]
 801245e:	4621      	mov	r1, r4
 8012460:	4628      	mov	r0, r5
 8012462:	f000 f915 	bl	8012690 <_sbrk_r>
 8012466:	1c43      	adds	r3, r0, #1
 8012468:	d00a      	beq.n	8012480 <sbrk_aligned+0x34>
 801246a:	1cc4      	adds	r4, r0, #3
 801246c:	f024 0403 	bic.w	r4, r4, #3
 8012470:	42a0      	cmp	r0, r4
 8012472:	d007      	beq.n	8012484 <sbrk_aligned+0x38>
 8012474:	1a21      	subs	r1, r4, r0
 8012476:	4628      	mov	r0, r5
 8012478:	f000 f90a 	bl	8012690 <_sbrk_r>
 801247c:	3001      	adds	r0, #1
 801247e:	d101      	bne.n	8012484 <sbrk_aligned+0x38>
 8012480:	f04f 34ff 	mov.w	r4, #4294967295
 8012484:	4620      	mov	r0, r4
 8012486:	bd70      	pop	{r4, r5, r6, pc}
 8012488:	20002d24 	.word	0x20002d24

0801248c <_malloc_r>:
 801248c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012490:	1ccd      	adds	r5, r1, #3
 8012492:	f025 0503 	bic.w	r5, r5, #3
 8012496:	3508      	adds	r5, #8
 8012498:	2d0c      	cmp	r5, #12
 801249a:	bf38      	it	cc
 801249c:	250c      	movcc	r5, #12
 801249e:	2d00      	cmp	r5, #0
 80124a0:	4607      	mov	r7, r0
 80124a2:	db01      	blt.n	80124a8 <_malloc_r+0x1c>
 80124a4:	42a9      	cmp	r1, r5
 80124a6:	d905      	bls.n	80124b4 <_malloc_r+0x28>
 80124a8:	230c      	movs	r3, #12
 80124aa:	603b      	str	r3, [r7, #0]
 80124ac:	2600      	movs	r6, #0
 80124ae:	4630      	mov	r0, r6
 80124b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80124b4:	4e2e      	ldr	r6, [pc, #184]	; (8012570 <_malloc_r+0xe4>)
 80124b6:	f000 fc0f 	bl	8012cd8 <__malloc_lock>
 80124ba:	6833      	ldr	r3, [r6, #0]
 80124bc:	461c      	mov	r4, r3
 80124be:	bb34      	cbnz	r4, 801250e <_malloc_r+0x82>
 80124c0:	4629      	mov	r1, r5
 80124c2:	4638      	mov	r0, r7
 80124c4:	f7ff ffc2 	bl	801244c <sbrk_aligned>
 80124c8:	1c43      	adds	r3, r0, #1
 80124ca:	4604      	mov	r4, r0
 80124cc:	d14d      	bne.n	801256a <_malloc_r+0xde>
 80124ce:	6834      	ldr	r4, [r6, #0]
 80124d0:	4626      	mov	r6, r4
 80124d2:	2e00      	cmp	r6, #0
 80124d4:	d140      	bne.n	8012558 <_malloc_r+0xcc>
 80124d6:	6823      	ldr	r3, [r4, #0]
 80124d8:	4631      	mov	r1, r6
 80124da:	4638      	mov	r0, r7
 80124dc:	eb04 0803 	add.w	r8, r4, r3
 80124e0:	f000 f8d6 	bl	8012690 <_sbrk_r>
 80124e4:	4580      	cmp	r8, r0
 80124e6:	d13a      	bne.n	801255e <_malloc_r+0xd2>
 80124e8:	6821      	ldr	r1, [r4, #0]
 80124ea:	3503      	adds	r5, #3
 80124ec:	1a6d      	subs	r5, r5, r1
 80124ee:	f025 0503 	bic.w	r5, r5, #3
 80124f2:	3508      	adds	r5, #8
 80124f4:	2d0c      	cmp	r5, #12
 80124f6:	bf38      	it	cc
 80124f8:	250c      	movcc	r5, #12
 80124fa:	4629      	mov	r1, r5
 80124fc:	4638      	mov	r0, r7
 80124fe:	f7ff ffa5 	bl	801244c <sbrk_aligned>
 8012502:	3001      	adds	r0, #1
 8012504:	d02b      	beq.n	801255e <_malloc_r+0xd2>
 8012506:	6823      	ldr	r3, [r4, #0]
 8012508:	442b      	add	r3, r5
 801250a:	6023      	str	r3, [r4, #0]
 801250c:	e00e      	b.n	801252c <_malloc_r+0xa0>
 801250e:	6822      	ldr	r2, [r4, #0]
 8012510:	1b52      	subs	r2, r2, r5
 8012512:	d41e      	bmi.n	8012552 <_malloc_r+0xc6>
 8012514:	2a0b      	cmp	r2, #11
 8012516:	d916      	bls.n	8012546 <_malloc_r+0xba>
 8012518:	1961      	adds	r1, r4, r5
 801251a:	42a3      	cmp	r3, r4
 801251c:	6025      	str	r5, [r4, #0]
 801251e:	bf18      	it	ne
 8012520:	6059      	strne	r1, [r3, #4]
 8012522:	6863      	ldr	r3, [r4, #4]
 8012524:	bf08      	it	eq
 8012526:	6031      	streq	r1, [r6, #0]
 8012528:	5162      	str	r2, [r4, r5]
 801252a:	604b      	str	r3, [r1, #4]
 801252c:	4638      	mov	r0, r7
 801252e:	f104 060b 	add.w	r6, r4, #11
 8012532:	f000 fbd7 	bl	8012ce4 <__malloc_unlock>
 8012536:	f026 0607 	bic.w	r6, r6, #7
 801253a:	1d23      	adds	r3, r4, #4
 801253c:	1af2      	subs	r2, r6, r3
 801253e:	d0b6      	beq.n	80124ae <_malloc_r+0x22>
 8012540:	1b9b      	subs	r3, r3, r6
 8012542:	50a3      	str	r3, [r4, r2]
 8012544:	e7b3      	b.n	80124ae <_malloc_r+0x22>
 8012546:	6862      	ldr	r2, [r4, #4]
 8012548:	42a3      	cmp	r3, r4
 801254a:	bf0c      	ite	eq
 801254c:	6032      	streq	r2, [r6, #0]
 801254e:	605a      	strne	r2, [r3, #4]
 8012550:	e7ec      	b.n	801252c <_malloc_r+0xa0>
 8012552:	4623      	mov	r3, r4
 8012554:	6864      	ldr	r4, [r4, #4]
 8012556:	e7b2      	b.n	80124be <_malloc_r+0x32>
 8012558:	4634      	mov	r4, r6
 801255a:	6876      	ldr	r6, [r6, #4]
 801255c:	e7b9      	b.n	80124d2 <_malloc_r+0x46>
 801255e:	230c      	movs	r3, #12
 8012560:	603b      	str	r3, [r7, #0]
 8012562:	4638      	mov	r0, r7
 8012564:	f000 fbbe 	bl	8012ce4 <__malloc_unlock>
 8012568:	e7a1      	b.n	80124ae <_malloc_r+0x22>
 801256a:	6025      	str	r5, [r4, #0]
 801256c:	e7de      	b.n	801252c <_malloc_r+0xa0>
 801256e:	bf00      	nop
 8012570:	20002d20 	.word	0x20002d20

08012574 <iprintf>:
 8012574:	b40f      	push	{r0, r1, r2, r3}
 8012576:	4b0a      	ldr	r3, [pc, #40]	; (80125a0 <iprintf+0x2c>)
 8012578:	b513      	push	{r0, r1, r4, lr}
 801257a:	681c      	ldr	r4, [r3, #0]
 801257c:	b124      	cbz	r4, 8012588 <iprintf+0x14>
 801257e:	69a3      	ldr	r3, [r4, #24]
 8012580:	b913      	cbnz	r3, 8012588 <iprintf+0x14>
 8012582:	4620      	mov	r0, r4
 8012584:	f000 faa2 	bl	8012acc <__sinit>
 8012588:	ab05      	add	r3, sp, #20
 801258a:	9a04      	ldr	r2, [sp, #16]
 801258c:	68a1      	ldr	r1, [r4, #8]
 801258e:	9301      	str	r3, [sp, #4]
 8012590:	4620      	mov	r0, r4
 8012592:	f000 fd61 	bl	8013058 <_vfiprintf_r>
 8012596:	b002      	add	sp, #8
 8012598:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801259c:	b004      	add	sp, #16
 801259e:	4770      	bx	lr
 80125a0:	200008e0 	.word	0x200008e0

080125a4 <_puts_r>:
 80125a4:	b570      	push	{r4, r5, r6, lr}
 80125a6:	460e      	mov	r6, r1
 80125a8:	4605      	mov	r5, r0
 80125aa:	b118      	cbz	r0, 80125b4 <_puts_r+0x10>
 80125ac:	6983      	ldr	r3, [r0, #24]
 80125ae:	b90b      	cbnz	r3, 80125b4 <_puts_r+0x10>
 80125b0:	f000 fa8c 	bl	8012acc <__sinit>
 80125b4:	69ab      	ldr	r3, [r5, #24]
 80125b6:	68ac      	ldr	r4, [r5, #8]
 80125b8:	b913      	cbnz	r3, 80125c0 <_puts_r+0x1c>
 80125ba:	4628      	mov	r0, r5
 80125bc:	f000 fa86 	bl	8012acc <__sinit>
 80125c0:	4b2c      	ldr	r3, [pc, #176]	; (8012674 <_puts_r+0xd0>)
 80125c2:	429c      	cmp	r4, r3
 80125c4:	d120      	bne.n	8012608 <_puts_r+0x64>
 80125c6:	686c      	ldr	r4, [r5, #4]
 80125c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80125ca:	07db      	lsls	r3, r3, #31
 80125cc:	d405      	bmi.n	80125da <_puts_r+0x36>
 80125ce:	89a3      	ldrh	r3, [r4, #12]
 80125d0:	0598      	lsls	r0, r3, #22
 80125d2:	d402      	bmi.n	80125da <_puts_r+0x36>
 80125d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80125d6:	f000 fb17 	bl	8012c08 <__retarget_lock_acquire_recursive>
 80125da:	89a3      	ldrh	r3, [r4, #12]
 80125dc:	0719      	lsls	r1, r3, #28
 80125de:	d51d      	bpl.n	801261c <_puts_r+0x78>
 80125e0:	6923      	ldr	r3, [r4, #16]
 80125e2:	b1db      	cbz	r3, 801261c <_puts_r+0x78>
 80125e4:	3e01      	subs	r6, #1
 80125e6:	68a3      	ldr	r3, [r4, #8]
 80125e8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80125ec:	3b01      	subs	r3, #1
 80125ee:	60a3      	str	r3, [r4, #8]
 80125f0:	bb39      	cbnz	r1, 8012642 <_puts_r+0x9e>
 80125f2:	2b00      	cmp	r3, #0
 80125f4:	da38      	bge.n	8012668 <_puts_r+0xc4>
 80125f6:	4622      	mov	r2, r4
 80125f8:	210a      	movs	r1, #10
 80125fa:	4628      	mov	r0, r5
 80125fc:	f000 f88c 	bl	8012718 <__swbuf_r>
 8012600:	3001      	adds	r0, #1
 8012602:	d011      	beq.n	8012628 <_puts_r+0x84>
 8012604:	250a      	movs	r5, #10
 8012606:	e011      	b.n	801262c <_puts_r+0x88>
 8012608:	4b1b      	ldr	r3, [pc, #108]	; (8012678 <_puts_r+0xd4>)
 801260a:	429c      	cmp	r4, r3
 801260c:	d101      	bne.n	8012612 <_puts_r+0x6e>
 801260e:	68ac      	ldr	r4, [r5, #8]
 8012610:	e7da      	b.n	80125c8 <_puts_r+0x24>
 8012612:	4b1a      	ldr	r3, [pc, #104]	; (801267c <_puts_r+0xd8>)
 8012614:	429c      	cmp	r4, r3
 8012616:	bf08      	it	eq
 8012618:	68ec      	ldreq	r4, [r5, #12]
 801261a:	e7d5      	b.n	80125c8 <_puts_r+0x24>
 801261c:	4621      	mov	r1, r4
 801261e:	4628      	mov	r0, r5
 8012620:	f000 f8cc 	bl	80127bc <__swsetup_r>
 8012624:	2800      	cmp	r0, #0
 8012626:	d0dd      	beq.n	80125e4 <_puts_r+0x40>
 8012628:	f04f 35ff 	mov.w	r5, #4294967295
 801262c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801262e:	07da      	lsls	r2, r3, #31
 8012630:	d405      	bmi.n	801263e <_puts_r+0x9a>
 8012632:	89a3      	ldrh	r3, [r4, #12]
 8012634:	059b      	lsls	r3, r3, #22
 8012636:	d402      	bmi.n	801263e <_puts_r+0x9a>
 8012638:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801263a:	f000 fae6 	bl	8012c0a <__retarget_lock_release_recursive>
 801263e:	4628      	mov	r0, r5
 8012640:	bd70      	pop	{r4, r5, r6, pc}
 8012642:	2b00      	cmp	r3, #0
 8012644:	da04      	bge.n	8012650 <_puts_r+0xac>
 8012646:	69a2      	ldr	r2, [r4, #24]
 8012648:	429a      	cmp	r2, r3
 801264a:	dc06      	bgt.n	801265a <_puts_r+0xb6>
 801264c:	290a      	cmp	r1, #10
 801264e:	d004      	beq.n	801265a <_puts_r+0xb6>
 8012650:	6823      	ldr	r3, [r4, #0]
 8012652:	1c5a      	adds	r2, r3, #1
 8012654:	6022      	str	r2, [r4, #0]
 8012656:	7019      	strb	r1, [r3, #0]
 8012658:	e7c5      	b.n	80125e6 <_puts_r+0x42>
 801265a:	4622      	mov	r2, r4
 801265c:	4628      	mov	r0, r5
 801265e:	f000 f85b 	bl	8012718 <__swbuf_r>
 8012662:	3001      	adds	r0, #1
 8012664:	d1bf      	bne.n	80125e6 <_puts_r+0x42>
 8012666:	e7df      	b.n	8012628 <_puts_r+0x84>
 8012668:	6823      	ldr	r3, [r4, #0]
 801266a:	250a      	movs	r5, #10
 801266c:	1c5a      	adds	r2, r3, #1
 801266e:	6022      	str	r2, [r4, #0]
 8012670:	701d      	strb	r5, [r3, #0]
 8012672:	e7db      	b.n	801262c <_puts_r+0x88>
 8012674:	080140fc 	.word	0x080140fc
 8012678:	0801411c 	.word	0x0801411c
 801267c:	080140dc 	.word	0x080140dc

08012680 <puts>:
 8012680:	4b02      	ldr	r3, [pc, #8]	; (801268c <puts+0xc>)
 8012682:	4601      	mov	r1, r0
 8012684:	6818      	ldr	r0, [r3, #0]
 8012686:	f7ff bf8d 	b.w	80125a4 <_puts_r>
 801268a:	bf00      	nop
 801268c:	200008e0 	.word	0x200008e0

08012690 <_sbrk_r>:
 8012690:	b538      	push	{r3, r4, r5, lr}
 8012692:	4d06      	ldr	r5, [pc, #24]	; (80126ac <_sbrk_r+0x1c>)
 8012694:	2300      	movs	r3, #0
 8012696:	4604      	mov	r4, r0
 8012698:	4608      	mov	r0, r1
 801269a:	602b      	str	r3, [r5, #0]
 801269c:	f7ef fcfe 	bl	800209c <_sbrk>
 80126a0:	1c43      	adds	r3, r0, #1
 80126a2:	d102      	bne.n	80126aa <_sbrk_r+0x1a>
 80126a4:	682b      	ldr	r3, [r5, #0]
 80126a6:	b103      	cbz	r3, 80126aa <_sbrk_r+0x1a>
 80126a8:	6023      	str	r3, [r4, #0]
 80126aa:	bd38      	pop	{r3, r4, r5, pc}
 80126ac:	20002d2c 	.word	0x20002d2c

080126b0 <sniprintf>:
 80126b0:	b40c      	push	{r2, r3}
 80126b2:	b530      	push	{r4, r5, lr}
 80126b4:	4b17      	ldr	r3, [pc, #92]	; (8012714 <sniprintf+0x64>)
 80126b6:	1e0c      	subs	r4, r1, #0
 80126b8:	681d      	ldr	r5, [r3, #0]
 80126ba:	b09d      	sub	sp, #116	; 0x74
 80126bc:	da08      	bge.n	80126d0 <sniprintf+0x20>
 80126be:	238b      	movs	r3, #139	; 0x8b
 80126c0:	602b      	str	r3, [r5, #0]
 80126c2:	f04f 30ff 	mov.w	r0, #4294967295
 80126c6:	b01d      	add	sp, #116	; 0x74
 80126c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80126cc:	b002      	add	sp, #8
 80126ce:	4770      	bx	lr
 80126d0:	f44f 7302 	mov.w	r3, #520	; 0x208
 80126d4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80126d8:	bf14      	ite	ne
 80126da:	f104 33ff 	addne.w	r3, r4, #4294967295
 80126de:	4623      	moveq	r3, r4
 80126e0:	9304      	str	r3, [sp, #16]
 80126e2:	9307      	str	r3, [sp, #28]
 80126e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80126e8:	9002      	str	r0, [sp, #8]
 80126ea:	9006      	str	r0, [sp, #24]
 80126ec:	f8ad 3016 	strh.w	r3, [sp, #22]
 80126f0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80126f2:	ab21      	add	r3, sp, #132	; 0x84
 80126f4:	a902      	add	r1, sp, #8
 80126f6:	4628      	mov	r0, r5
 80126f8:	9301      	str	r3, [sp, #4]
 80126fa:	f000 fb83 	bl	8012e04 <_svfiprintf_r>
 80126fe:	1c43      	adds	r3, r0, #1
 8012700:	bfbc      	itt	lt
 8012702:	238b      	movlt	r3, #139	; 0x8b
 8012704:	602b      	strlt	r3, [r5, #0]
 8012706:	2c00      	cmp	r4, #0
 8012708:	d0dd      	beq.n	80126c6 <sniprintf+0x16>
 801270a:	9b02      	ldr	r3, [sp, #8]
 801270c:	2200      	movs	r2, #0
 801270e:	701a      	strb	r2, [r3, #0]
 8012710:	e7d9      	b.n	80126c6 <sniprintf+0x16>
 8012712:	bf00      	nop
 8012714:	200008e0 	.word	0x200008e0

08012718 <__swbuf_r>:
 8012718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801271a:	460e      	mov	r6, r1
 801271c:	4614      	mov	r4, r2
 801271e:	4605      	mov	r5, r0
 8012720:	b118      	cbz	r0, 801272a <__swbuf_r+0x12>
 8012722:	6983      	ldr	r3, [r0, #24]
 8012724:	b90b      	cbnz	r3, 801272a <__swbuf_r+0x12>
 8012726:	f000 f9d1 	bl	8012acc <__sinit>
 801272a:	4b21      	ldr	r3, [pc, #132]	; (80127b0 <__swbuf_r+0x98>)
 801272c:	429c      	cmp	r4, r3
 801272e:	d12b      	bne.n	8012788 <__swbuf_r+0x70>
 8012730:	686c      	ldr	r4, [r5, #4]
 8012732:	69a3      	ldr	r3, [r4, #24]
 8012734:	60a3      	str	r3, [r4, #8]
 8012736:	89a3      	ldrh	r3, [r4, #12]
 8012738:	071a      	lsls	r2, r3, #28
 801273a:	d52f      	bpl.n	801279c <__swbuf_r+0x84>
 801273c:	6923      	ldr	r3, [r4, #16]
 801273e:	b36b      	cbz	r3, 801279c <__swbuf_r+0x84>
 8012740:	6923      	ldr	r3, [r4, #16]
 8012742:	6820      	ldr	r0, [r4, #0]
 8012744:	1ac0      	subs	r0, r0, r3
 8012746:	6963      	ldr	r3, [r4, #20]
 8012748:	b2f6      	uxtb	r6, r6
 801274a:	4283      	cmp	r3, r0
 801274c:	4637      	mov	r7, r6
 801274e:	dc04      	bgt.n	801275a <__swbuf_r+0x42>
 8012750:	4621      	mov	r1, r4
 8012752:	4628      	mov	r0, r5
 8012754:	f000 f926 	bl	80129a4 <_fflush_r>
 8012758:	bb30      	cbnz	r0, 80127a8 <__swbuf_r+0x90>
 801275a:	68a3      	ldr	r3, [r4, #8]
 801275c:	3b01      	subs	r3, #1
 801275e:	60a3      	str	r3, [r4, #8]
 8012760:	6823      	ldr	r3, [r4, #0]
 8012762:	1c5a      	adds	r2, r3, #1
 8012764:	6022      	str	r2, [r4, #0]
 8012766:	701e      	strb	r6, [r3, #0]
 8012768:	6963      	ldr	r3, [r4, #20]
 801276a:	3001      	adds	r0, #1
 801276c:	4283      	cmp	r3, r0
 801276e:	d004      	beq.n	801277a <__swbuf_r+0x62>
 8012770:	89a3      	ldrh	r3, [r4, #12]
 8012772:	07db      	lsls	r3, r3, #31
 8012774:	d506      	bpl.n	8012784 <__swbuf_r+0x6c>
 8012776:	2e0a      	cmp	r6, #10
 8012778:	d104      	bne.n	8012784 <__swbuf_r+0x6c>
 801277a:	4621      	mov	r1, r4
 801277c:	4628      	mov	r0, r5
 801277e:	f000 f911 	bl	80129a4 <_fflush_r>
 8012782:	b988      	cbnz	r0, 80127a8 <__swbuf_r+0x90>
 8012784:	4638      	mov	r0, r7
 8012786:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012788:	4b0a      	ldr	r3, [pc, #40]	; (80127b4 <__swbuf_r+0x9c>)
 801278a:	429c      	cmp	r4, r3
 801278c:	d101      	bne.n	8012792 <__swbuf_r+0x7a>
 801278e:	68ac      	ldr	r4, [r5, #8]
 8012790:	e7cf      	b.n	8012732 <__swbuf_r+0x1a>
 8012792:	4b09      	ldr	r3, [pc, #36]	; (80127b8 <__swbuf_r+0xa0>)
 8012794:	429c      	cmp	r4, r3
 8012796:	bf08      	it	eq
 8012798:	68ec      	ldreq	r4, [r5, #12]
 801279a:	e7ca      	b.n	8012732 <__swbuf_r+0x1a>
 801279c:	4621      	mov	r1, r4
 801279e:	4628      	mov	r0, r5
 80127a0:	f000 f80c 	bl	80127bc <__swsetup_r>
 80127a4:	2800      	cmp	r0, #0
 80127a6:	d0cb      	beq.n	8012740 <__swbuf_r+0x28>
 80127a8:	f04f 37ff 	mov.w	r7, #4294967295
 80127ac:	e7ea      	b.n	8012784 <__swbuf_r+0x6c>
 80127ae:	bf00      	nop
 80127b0:	080140fc 	.word	0x080140fc
 80127b4:	0801411c 	.word	0x0801411c
 80127b8:	080140dc 	.word	0x080140dc

080127bc <__swsetup_r>:
 80127bc:	4b32      	ldr	r3, [pc, #200]	; (8012888 <__swsetup_r+0xcc>)
 80127be:	b570      	push	{r4, r5, r6, lr}
 80127c0:	681d      	ldr	r5, [r3, #0]
 80127c2:	4606      	mov	r6, r0
 80127c4:	460c      	mov	r4, r1
 80127c6:	b125      	cbz	r5, 80127d2 <__swsetup_r+0x16>
 80127c8:	69ab      	ldr	r3, [r5, #24]
 80127ca:	b913      	cbnz	r3, 80127d2 <__swsetup_r+0x16>
 80127cc:	4628      	mov	r0, r5
 80127ce:	f000 f97d 	bl	8012acc <__sinit>
 80127d2:	4b2e      	ldr	r3, [pc, #184]	; (801288c <__swsetup_r+0xd0>)
 80127d4:	429c      	cmp	r4, r3
 80127d6:	d10f      	bne.n	80127f8 <__swsetup_r+0x3c>
 80127d8:	686c      	ldr	r4, [r5, #4]
 80127da:	89a3      	ldrh	r3, [r4, #12]
 80127dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80127e0:	0719      	lsls	r1, r3, #28
 80127e2:	d42c      	bmi.n	801283e <__swsetup_r+0x82>
 80127e4:	06dd      	lsls	r5, r3, #27
 80127e6:	d411      	bmi.n	801280c <__swsetup_r+0x50>
 80127e8:	2309      	movs	r3, #9
 80127ea:	6033      	str	r3, [r6, #0]
 80127ec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80127f0:	81a3      	strh	r3, [r4, #12]
 80127f2:	f04f 30ff 	mov.w	r0, #4294967295
 80127f6:	e03e      	b.n	8012876 <__swsetup_r+0xba>
 80127f8:	4b25      	ldr	r3, [pc, #148]	; (8012890 <__swsetup_r+0xd4>)
 80127fa:	429c      	cmp	r4, r3
 80127fc:	d101      	bne.n	8012802 <__swsetup_r+0x46>
 80127fe:	68ac      	ldr	r4, [r5, #8]
 8012800:	e7eb      	b.n	80127da <__swsetup_r+0x1e>
 8012802:	4b24      	ldr	r3, [pc, #144]	; (8012894 <__swsetup_r+0xd8>)
 8012804:	429c      	cmp	r4, r3
 8012806:	bf08      	it	eq
 8012808:	68ec      	ldreq	r4, [r5, #12]
 801280a:	e7e6      	b.n	80127da <__swsetup_r+0x1e>
 801280c:	0758      	lsls	r0, r3, #29
 801280e:	d512      	bpl.n	8012836 <__swsetup_r+0x7a>
 8012810:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012812:	b141      	cbz	r1, 8012826 <__swsetup_r+0x6a>
 8012814:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012818:	4299      	cmp	r1, r3
 801281a:	d002      	beq.n	8012822 <__swsetup_r+0x66>
 801281c:	4630      	mov	r0, r6
 801281e:	f7ff fdc9 	bl	80123b4 <_free_r>
 8012822:	2300      	movs	r3, #0
 8012824:	6363      	str	r3, [r4, #52]	; 0x34
 8012826:	89a3      	ldrh	r3, [r4, #12]
 8012828:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801282c:	81a3      	strh	r3, [r4, #12]
 801282e:	2300      	movs	r3, #0
 8012830:	6063      	str	r3, [r4, #4]
 8012832:	6923      	ldr	r3, [r4, #16]
 8012834:	6023      	str	r3, [r4, #0]
 8012836:	89a3      	ldrh	r3, [r4, #12]
 8012838:	f043 0308 	orr.w	r3, r3, #8
 801283c:	81a3      	strh	r3, [r4, #12]
 801283e:	6923      	ldr	r3, [r4, #16]
 8012840:	b94b      	cbnz	r3, 8012856 <__swsetup_r+0x9a>
 8012842:	89a3      	ldrh	r3, [r4, #12]
 8012844:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012848:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801284c:	d003      	beq.n	8012856 <__swsetup_r+0x9a>
 801284e:	4621      	mov	r1, r4
 8012850:	4630      	mov	r0, r6
 8012852:	f000 fa01 	bl	8012c58 <__smakebuf_r>
 8012856:	89a0      	ldrh	r0, [r4, #12]
 8012858:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801285c:	f010 0301 	ands.w	r3, r0, #1
 8012860:	d00a      	beq.n	8012878 <__swsetup_r+0xbc>
 8012862:	2300      	movs	r3, #0
 8012864:	60a3      	str	r3, [r4, #8]
 8012866:	6963      	ldr	r3, [r4, #20]
 8012868:	425b      	negs	r3, r3
 801286a:	61a3      	str	r3, [r4, #24]
 801286c:	6923      	ldr	r3, [r4, #16]
 801286e:	b943      	cbnz	r3, 8012882 <__swsetup_r+0xc6>
 8012870:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8012874:	d1ba      	bne.n	80127ec <__swsetup_r+0x30>
 8012876:	bd70      	pop	{r4, r5, r6, pc}
 8012878:	0781      	lsls	r1, r0, #30
 801287a:	bf58      	it	pl
 801287c:	6963      	ldrpl	r3, [r4, #20]
 801287e:	60a3      	str	r3, [r4, #8]
 8012880:	e7f4      	b.n	801286c <__swsetup_r+0xb0>
 8012882:	2000      	movs	r0, #0
 8012884:	e7f7      	b.n	8012876 <__swsetup_r+0xba>
 8012886:	bf00      	nop
 8012888:	200008e0 	.word	0x200008e0
 801288c:	080140fc 	.word	0x080140fc
 8012890:	0801411c 	.word	0x0801411c
 8012894:	080140dc 	.word	0x080140dc

08012898 <__sflush_r>:
 8012898:	898a      	ldrh	r2, [r1, #12]
 801289a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801289e:	4605      	mov	r5, r0
 80128a0:	0710      	lsls	r0, r2, #28
 80128a2:	460c      	mov	r4, r1
 80128a4:	d458      	bmi.n	8012958 <__sflush_r+0xc0>
 80128a6:	684b      	ldr	r3, [r1, #4]
 80128a8:	2b00      	cmp	r3, #0
 80128aa:	dc05      	bgt.n	80128b8 <__sflush_r+0x20>
 80128ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80128ae:	2b00      	cmp	r3, #0
 80128b0:	dc02      	bgt.n	80128b8 <__sflush_r+0x20>
 80128b2:	2000      	movs	r0, #0
 80128b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80128b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80128ba:	2e00      	cmp	r6, #0
 80128bc:	d0f9      	beq.n	80128b2 <__sflush_r+0x1a>
 80128be:	2300      	movs	r3, #0
 80128c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80128c4:	682f      	ldr	r7, [r5, #0]
 80128c6:	602b      	str	r3, [r5, #0]
 80128c8:	d032      	beq.n	8012930 <__sflush_r+0x98>
 80128ca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80128cc:	89a3      	ldrh	r3, [r4, #12]
 80128ce:	075a      	lsls	r2, r3, #29
 80128d0:	d505      	bpl.n	80128de <__sflush_r+0x46>
 80128d2:	6863      	ldr	r3, [r4, #4]
 80128d4:	1ac0      	subs	r0, r0, r3
 80128d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80128d8:	b10b      	cbz	r3, 80128de <__sflush_r+0x46>
 80128da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80128dc:	1ac0      	subs	r0, r0, r3
 80128de:	2300      	movs	r3, #0
 80128e0:	4602      	mov	r2, r0
 80128e2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80128e4:	6a21      	ldr	r1, [r4, #32]
 80128e6:	4628      	mov	r0, r5
 80128e8:	47b0      	blx	r6
 80128ea:	1c43      	adds	r3, r0, #1
 80128ec:	89a3      	ldrh	r3, [r4, #12]
 80128ee:	d106      	bne.n	80128fe <__sflush_r+0x66>
 80128f0:	6829      	ldr	r1, [r5, #0]
 80128f2:	291d      	cmp	r1, #29
 80128f4:	d82c      	bhi.n	8012950 <__sflush_r+0xb8>
 80128f6:	4a2a      	ldr	r2, [pc, #168]	; (80129a0 <__sflush_r+0x108>)
 80128f8:	40ca      	lsrs	r2, r1
 80128fa:	07d6      	lsls	r6, r2, #31
 80128fc:	d528      	bpl.n	8012950 <__sflush_r+0xb8>
 80128fe:	2200      	movs	r2, #0
 8012900:	6062      	str	r2, [r4, #4]
 8012902:	04d9      	lsls	r1, r3, #19
 8012904:	6922      	ldr	r2, [r4, #16]
 8012906:	6022      	str	r2, [r4, #0]
 8012908:	d504      	bpl.n	8012914 <__sflush_r+0x7c>
 801290a:	1c42      	adds	r2, r0, #1
 801290c:	d101      	bne.n	8012912 <__sflush_r+0x7a>
 801290e:	682b      	ldr	r3, [r5, #0]
 8012910:	b903      	cbnz	r3, 8012914 <__sflush_r+0x7c>
 8012912:	6560      	str	r0, [r4, #84]	; 0x54
 8012914:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012916:	602f      	str	r7, [r5, #0]
 8012918:	2900      	cmp	r1, #0
 801291a:	d0ca      	beq.n	80128b2 <__sflush_r+0x1a>
 801291c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012920:	4299      	cmp	r1, r3
 8012922:	d002      	beq.n	801292a <__sflush_r+0x92>
 8012924:	4628      	mov	r0, r5
 8012926:	f7ff fd45 	bl	80123b4 <_free_r>
 801292a:	2000      	movs	r0, #0
 801292c:	6360      	str	r0, [r4, #52]	; 0x34
 801292e:	e7c1      	b.n	80128b4 <__sflush_r+0x1c>
 8012930:	6a21      	ldr	r1, [r4, #32]
 8012932:	2301      	movs	r3, #1
 8012934:	4628      	mov	r0, r5
 8012936:	47b0      	blx	r6
 8012938:	1c41      	adds	r1, r0, #1
 801293a:	d1c7      	bne.n	80128cc <__sflush_r+0x34>
 801293c:	682b      	ldr	r3, [r5, #0]
 801293e:	2b00      	cmp	r3, #0
 8012940:	d0c4      	beq.n	80128cc <__sflush_r+0x34>
 8012942:	2b1d      	cmp	r3, #29
 8012944:	d001      	beq.n	801294a <__sflush_r+0xb2>
 8012946:	2b16      	cmp	r3, #22
 8012948:	d101      	bne.n	801294e <__sflush_r+0xb6>
 801294a:	602f      	str	r7, [r5, #0]
 801294c:	e7b1      	b.n	80128b2 <__sflush_r+0x1a>
 801294e:	89a3      	ldrh	r3, [r4, #12]
 8012950:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012954:	81a3      	strh	r3, [r4, #12]
 8012956:	e7ad      	b.n	80128b4 <__sflush_r+0x1c>
 8012958:	690f      	ldr	r7, [r1, #16]
 801295a:	2f00      	cmp	r7, #0
 801295c:	d0a9      	beq.n	80128b2 <__sflush_r+0x1a>
 801295e:	0793      	lsls	r3, r2, #30
 8012960:	680e      	ldr	r6, [r1, #0]
 8012962:	bf08      	it	eq
 8012964:	694b      	ldreq	r3, [r1, #20]
 8012966:	600f      	str	r7, [r1, #0]
 8012968:	bf18      	it	ne
 801296a:	2300      	movne	r3, #0
 801296c:	eba6 0807 	sub.w	r8, r6, r7
 8012970:	608b      	str	r3, [r1, #8]
 8012972:	f1b8 0f00 	cmp.w	r8, #0
 8012976:	dd9c      	ble.n	80128b2 <__sflush_r+0x1a>
 8012978:	6a21      	ldr	r1, [r4, #32]
 801297a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801297c:	4643      	mov	r3, r8
 801297e:	463a      	mov	r2, r7
 8012980:	4628      	mov	r0, r5
 8012982:	47b0      	blx	r6
 8012984:	2800      	cmp	r0, #0
 8012986:	dc06      	bgt.n	8012996 <__sflush_r+0xfe>
 8012988:	89a3      	ldrh	r3, [r4, #12]
 801298a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801298e:	81a3      	strh	r3, [r4, #12]
 8012990:	f04f 30ff 	mov.w	r0, #4294967295
 8012994:	e78e      	b.n	80128b4 <__sflush_r+0x1c>
 8012996:	4407      	add	r7, r0
 8012998:	eba8 0800 	sub.w	r8, r8, r0
 801299c:	e7e9      	b.n	8012972 <__sflush_r+0xda>
 801299e:	bf00      	nop
 80129a0:	20400001 	.word	0x20400001

080129a4 <_fflush_r>:
 80129a4:	b538      	push	{r3, r4, r5, lr}
 80129a6:	690b      	ldr	r3, [r1, #16]
 80129a8:	4605      	mov	r5, r0
 80129aa:	460c      	mov	r4, r1
 80129ac:	b913      	cbnz	r3, 80129b4 <_fflush_r+0x10>
 80129ae:	2500      	movs	r5, #0
 80129b0:	4628      	mov	r0, r5
 80129b2:	bd38      	pop	{r3, r4, r5, pc}
 80129b4:	b118      	cbz	r0, 80129be <_fflush_r+0x1a>
 80129b6:	6983      	ldr	r3, [r0, #24]
 80129b8:	b90b      	cbnz	r3, 80129be <_fflush_r+0x1a>
 80129ba:	f000 f887 	bl	8012acc <__sinit>
 80129be:	4b14      	ldr	r3, [pc, #80]	; (8012a10 <_fflush_r+0x6c>)
 80129c0:	429c      	cmp	r4, r3
 80129c2:	d11b      	bne.n	80129fc <_fflush_r+0x58>
 80129c4:	686c      	ldr	r4, [r5, #4]
 80129c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80129ca:	2b00      	cmp	r3, #0
 80129cc:	d0ef      	beq.n	80129ae <_fflush_r+0xa>
 80129ce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80129d0:	07d0      	lsls	r0, r2, #31
 80129d2:	d404      	bmi.n	80129de <_fflush_r+0x3a>
 80129d4:	0599      	lsls	r1, r3, #22
 80129d6:	d402      	bmi.n	80129de <_fflush_r+0x3a>
 80129d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80129da:	f000 f915 	bl	8012c08 <__retarget_lock_acquire_recursive>
 80129de:	4628      	mov	r0, r5
 80129e0:	4621      	mov	r1, r4
 80129e2:	f7ff ff59 	bl	8012898 <__sflush_r>
 80129e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80129e8:	07da      	lsls	r2, r3, #31
 80129ea:	4605      	mov	r5, r0
 80129ec:	d4e0      	bmi.n	80129b0 <_fflush_r+0xc>
 80129ee:	89a3      	ldrh	r3, [r4, #12]
 80129f0:	059b      	lsls	r3, r3, #22
 80129f2:	d4dd      	bmi.n	80129b0 <_fflush_r+0xc>
 80129f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80129f6:	f000 f908 	bl	8012c0a <__retarget_lock_release_recursive>
 80129fa:	e7d9      	b.n	80129b0 <_fflush_r+0xc>
 80129fc:	4b05      	ldr	r3, [pc, #20]	; (8012a14 <_fflush_r+0x70>)
 80129fe:	429c      	cmp	r4, r3
 8012a00:	d101      	bne.n	8012a06 <_fflush_r+0x62>
 8012a02:	68ac      	ldr	r4, [r5, #8]
 8012a04:	e7df      	b.n	80129c6 <_fflush_r+0x22>
 8012a06:	4b04      	ldr	r3, [pc, #16]	; (8012a18 <_fflush_r+0x74>)
 8012a08:	429c      	cmp	r4, r3
 8012a0a:	bf08      	it	eq
 8012a0c:	68ec      	ldreq	r4, [r5, #12]
 8012a0e:	e7da      	b.n	80129c6 <_fflush_r+0x22>
 8012a10:	080140fc 	.word	0x080140fc
 8012a14:	0801411c 	.word	0x0801411c
 8012a18:	080140dc 	.word	0x080140dc

08012a1c <std>:
 8012a1c:	2300      	movs	r3, #0
 8012a1e:	b510      	push	{r4, lr}
 8012a20:	4604      	mov	r4, r0
 8012a22:	e9c0 3300 	strd	r3, r3, [r0]
 8012a26:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012a2a:	6083      	str	r3, [r0, #8]
 8012a2c:	8181      	strh	r1, [r0, #12]
 8012a2e:	6643      	str	r3, [r0, #100]	; 0x64
 8012a30:	81c2      	strh	r2, [r0, #14]
 8012a32:	6183      	str	r3, [r0, #24]
 8012a34:	4619      	mov	r1, r3
 8012a36:	2208      	movs	r2, #8
 8012a38:	305c      	adds	r0, #92	; 0x5c
 8012a3a:	f7ff fcb3 	bl	80123a4 <memset>
 8012a3e:	4b05      	ldr	r3, [pc, #20]	; (8012a54 <std+0x38>)
 8012a40:	6263      	str	r3, [r4, #36]	; 0x24
 8012a42:	4b05      	ldr	r3, [pc, #20]	; (8012a58 <std+0x3c>)
 8012a44:	62a3      	str	r3, [r4, #40]	; 0x28
 8012a46:	4b05      	ldr	r3, [pc, #20]	; (8012a5c <std+0x40>)
 8012a48:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012a4a:	4b05      	ldr	r3, [pc, #20]	; (8012a60 <std+0x44>)
 8012a4c:	6224      	str	r4, [r4, #32]
 8012a4e:	6323      	str	r3, [r4, #48]	; 0x30
 8012a50:	bd10      	pop	{r4, pc}
 8012a52:	bf00      	nop
 8012a54:	080135e1 	.word	0x080135e1
 8012a58:	08013603 	.word	0x08013603
 8012a5c:	0801363b 	.word	0x0801363b
 8012a60:	0801365f 	.word	0x0801365f

08012a64 <_cleanup_r>:
 8012a64:	4901      	ldr	r1, [pc, #4]	; (8012a6c <_cleanup_r+0x8>)
 8012a66:	f000 b8af 	b.w	8012bc8 <_fwalk_reent>
 8012a6a:	bf00      	nop
 8012a6c:	080129a5 	.word	0x080129a5

08012a70 <__sfmoreglue>:
 8012a70:	b570      	push	{r4, r5, r6, lr}
 8012a72:	2268      	movs	r2, #104	; 0x68
 8012a74:	1e4d      	subs	r5, r1, #1
 8012a76:	4355      	muls	r5, r2
 8012a78:	460e      	mov	r6, r1
 8012a7a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8012a7e:	f7ff fd05 	bl	801248c <_malloc_r>
 8012a82:	4604      	mov	r4, r0
 8012a84:	b140      	cbz	r0, 8012a98 <__sfmoreglue+0x28>
 8012a86:	2100      	movs	r1, #0
 8012a88:	e9c0 1600 	strd	r1, r6, [r0]
 8012a8c:	300c      	adds	r0, #12
 8012a8e:	60a0      	str	r0, [r4, #8]
 8012a90:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012a94:	f7ff fc86 	bl	80123a4 <memset>
 8012a98:	4620      	mov	r0, r4
 8012a9a:	bd70      	pop	{r4, r5, r6, pc}

08012a9c <__sfp_lock_acquire>:
 8012a9c:	4801      	ldr	r0, [pc, #4]	; (8012aa4 <__sfp_lock_acquire+0x8>)
 8012a9e:	f000 b8b3 	b.w	8012c08 <__retarget_lock_acquire_recursive>
 8012aa2:	bf00      	nop
 8012aa4:	20002d29 	.word	0x20002d29

08012aa8 <__sfp_lock_release>:
 8012aa8:	4801      	ldr	r0, [pc, #4]	; (8012ab0 <__sfp_lock_release+0x8>)
 8012aaa:	f000 b8ae 	b.w	8012c0a <__retarget_lock_release_recursive>
 8012aae:	bf00      	nop
 8012ab0:	20002d29 	.word	0x20002d29

08012ab4 <__sinit_lock_acquire>:
 8012ab4:	4801      	ldr	r0, [pc, #4]	; (8012abc <__sinit_lock_acquire+0x8>)
 8012ab6:	f000 b8a7 	b.w	8012c08 <__retarget_lock_acquire_recursive>
 8012aba:	bf00      	nop
 8012abc:	20002d2a 	.word	0x20002d2a

08012ac0 <__sinit_lock_release>:
 8012ac0:	4801      	ldr	r0, [pc, #4]	; (8012ac8 <__sinit_lock_release+0x8>)
 8012ac2:	f000 b8a2 	b.w	8012c0a <__retarget_lock_release_recursive>
 8012ac6:	bf00      	nop
 8012ac8:	20002d2a 	.word	0x20002d2a

08012acc <__sinit>:
 8012acc:	b510      	push	{r4, lr}
 8012ace:	4604      	mov	r4, r0
 8012ad0:	f7ff fff0 	bl	8012ab4 <__sinit_lock_acquire>
 8012ad4:	69a3      	ldr	r3, [r4, #24]
 8012ad6:	b11b      	cbz	r3, 8012ae0 <__sinit+0x14>
 8012ad8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012adc:	f7ff bff0 	b.w	8012ac0 <__sinit_lock_release>
 8012ae0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8012ae4:	6523      	str	r3, [r4, #80]	; 0x50
 8012ae6:	4b13      	ldr	r3, [pc, #76]	; (8012b34 <__sinit+0x68>)
 8012ae8:	4a13      	ldr	r2, [pc, #76]	; (8012b38 <__sinit+0x6c>)
 8012aea:	681b      	ldr	r3, [r3, #0]
 8012aec:	62a2      	str	r2, [r4, #40]	; 0x28
 8012aee:	42a3      	cmp	r3, r4
 8012af0:	bf04      	itt	eq
 8012af2:	2301      	moveq	r3, #1
 8012af4:	61a3      	streq	r3, [r4, #24]
 8012af6:	4620      	mov	r0, r4
 8012af8:	f000 f820 	bl	8012b3c <__sfp>
 8012afc:	6060      	str	r0, [r4, #4]
 8012afe:	4620      	mov	r0, r4
 8012b00:	f000 f81c 	bl	8012b3c <__sfp>
 8012b04:	60a0      	str	r0, [r4, #8]
 8012b06:	4620      	mov	r0, r4
 8012b08:	f000 f818 	bl	8012b3c <__sfp>
 8012b0c:	2200      	movs	r2, #0
 8012b0e:	60e0      	str	r0, [r4, #12]
 8012b10:	2104      	movs	r1, #4
 8012b12:	6860      	ldr	r0, [r4, #4]
 8012b14:	f7ff ff82 	bl	8012a1c <std>
 8012b18:	68a0      	ldr	r0, [r4, #8]
 8012b1a:	2201      	movs	r2, #1
 8012b1c:	2109      	movs	r1, #9
 8012b1e:	f7ff ff7d 	bl	8012a1c <std>
 8012b22:	68e0      	ldr	r0, [r4, #12]
 8012b24:	2202      	movs	r2, #2
 8012b26:	2112      	movs	r1, #18
 8012b28:	f7ff ff78 	bl	8012a1c <std>
 8012b2c:	2301      	movs	r3, #1
 8012b2e:	61a3      	str	r3, [r4, #24]
 8012b30:	e7d2      	b.n	8012ad8 <__sinit+0xc>
 8012b32:	bf00      	nop
 8012b34:	080140d8 	.word	0x080140d8
 8012b38:	08012a65 	.word	0x08012a65

08012b3c <__sfp>:
 8012b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b3e:	4607      	mov	r7, r0
 8012b40:	f7ff ffac 	bl	8012a9c <__sfp_lock_acquire>
 8012b44:	4b1e      	ldr	r3, [pc, #120]	; (8012bc0 <__sfp+0x84>)
 8012b46:	681e      	ldr	r6, [r3, #0]
 8012b48:	69b3      	ldr	r3, [r6, #24]
 8012b4a:	b913      	cbnz	r3, 8012b52 <__sfp+0x16>
 8012b4c:	4630      	mov	r0, r6
 8012b4e:	f7ff ffbd 	bl	8012acc <__sinit>
 8012b52:	3648      	adds	r6, #72	; 0x48
 8012b54:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012b58:	3b01      	subs	r3, #1
 8012b5a:	d503      	bpl.n	8012b64 <__sfp+0x28>
 8012b5c:	6833      	ldr	r3, [r6, #0]
 8012b5e:	b30b      	cbz	r3, 8012ba4 <__sfp+0x68>
 8012b60:	6836      	ldr	r6, [r6, #0]
 8012b62:	e7f7      	b.n	8012b54 <__sfp+0x18>
 8012b64:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012b68:	b9d5      	cbnz	r5, 8012ba0 <__sfp+0x64>
 8012b6a:	4b16      	ldr	r3, [pc, #88]	; (8012bc4 <__sfp+0x88>)
 8012b6c:	60e3      	str	r3, [r4, #12]
 8012b6e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8012b72:	6665      	str	r5, [r4, #100]	; 0x64
 8012b74:	f000 f847 	bl	8012c06 <__retarget_lock_init_recursive>
 8012b78:	f7ff ff96 	bl	8012aa8 <__sfp_lock_release>
 8012b7c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8012b80:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8012b84:	6025      	str	r5, [r4, #0]
 8012b86:	61a5      	str	r5, [r4, #24]
 8012b88:	2208      	movs	r2, #8
 8012b8a:	4629      	mov	r1, r5
 8012b8c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012b90:	f7ff fc08 	bl	80123a4 <memset>
 8012b94:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012b98:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8012b9c:	4620      	mov	r0, r4
 8012b9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012ba0:	3468      	adds	r4, #104	; 0x68
 8012ba2:	e7d9      	b.n	8012b58 <__sfp+0x1c>
 8012ba4:	2104      	movs	r1, #4
 8012ba6:	4638      	mov	r0, r7
 8012ba8:	f7ff ff62 	bl	8012a70 <__sfmoreglue>
 8012bac:	4604      	mov	r4, r0
 8012bae:	6030      	str	r0, [r6, #0]
 8012bb0:	2800      	cmp	r0, #0
 8012bb2:	d1d5      	bne.n	8012b60 <__sfp+0x24>
 8012bb4:	f7ff ff78 	bl	8012aa8 <__sfp_lock_release>
 8012bb8:	230c      	movs	r3, #12
 8012bba:	603b      	str	r3, [r7, #0]
 8012bbc:	e7ee      	b.n	8012b9c <__sfp+0x60>
 8012bbe:	bf00      	nop
 8012bc0:	080140d8 	.word	0x080140d8
 8012bc4:	ffff0001 	.word	0xffff0001

08012bc8 <_fwalk_reent>:
 8012bc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012bcc:	4606      	mov	r6, r0
 8012bce:	4688      	mov	r8, r1
 8012bd0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8012bd4:	2700      	movs	r7, #0
 8012bd6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012bda:	f1b9 0901 	subs.w	r9, r9, #1
 8012bde:	d505      	bpl.n	8012bec <_fwalk_reent+0x24>
 8012be0:	6824      	ldr	r4, [r4, #0]
 8012be2:	2c00      	cmp	r4, #0
 8012be4:	d1f7      	bne.n	8012bd6 <_fwalk_reent+0xe>
 8012be6:	4638      	mov	r0, r7
 8012be8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012bec:	89ab      	ldrh	r3, [r5, #12]
 8012bee:	2b01      	cmp	r3, #1
 8012bf0:	d907      	bls.n	8012c02 <_fwalk_reent+0x3a>
 8012bf2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012bf6:	3301      	adds	r3, #1
 8012bf8:	d003      	beq.n	8012c02 <_fwalk_reent+0x3a>
 8012bfa:	4629      	mov	r1, r5
 8012bfc:	4630      	mov	r0, r6
 8012bfe:	47c0      	blx	r8
 8012c00:	4307      	orrs	r7, r0
 8012c02:	3568      	adds	r5, #104	; 0x68
 8012c04:	e7e9      	b.n	8012bda <_fwalk_reent+0x12>

08012c06 <__retarget_lock_init_recursive>:
 8012c06:	4770      	bx	lr

08012c08 <__retarget_lock_acquire_recursive>:
 8012c08:	4770      	bx	lr

08012c0a <__retarget_lock_release_recursive>:
 8012c0a:	4770      	bx	lr

08012c0c <__swhatbuf_r>:
 8012c0c:	b570      	push	{r4, r5, r6, lr}
 8012c0e:	460e      	mov	r6, r1
 8012c10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012c14:	2900      	cmp	r1, #0
 8012c16:	b096      	sub	sp, #88	; 0x58
 8012c18:	4614      	mov	r4, r2
 8012c1a:	461d      	mov	r5, r3
 8012c1c:	da08      	bge.n	8012c30 <__swhatbuf_r+0x24>
 8012c1e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8012c22:	2200      	movs	r2, #0
 8012c24:	602a      	str	r2, [r5, #0]
 8012c26:	061a      	lsls	r2, r3, #24
 8012c28:	d410      	bmi.n	8012c4c <__swhatbuf_r+0x40>
 8012c2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012c2e:	e00e      	b.n	8012c4e <__swhatbuf_r+0x42>
 8012c30:	466a      	mov	r2, sp
 8012c32:	f000 fd3b 	bl	80136ac <_fstat_r>
 8012c36:	2800      	cmp	r0, #0
 8012c38:	dbf1      	blt.n	8012c1e <__swhatbuf_r+0x12>
 8012c3a:	9a01      	ldr	r2, [sp, #4]
 8012c3c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8012c40:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8012c44:	425a      	negs	r2, r3
 8012c46:	415a      	adcs	r2, r3
 8012c48:	602a      	str	r2, [r5, #0]
 8012c4a:	e7ee      	b.n	8012c2a <__swhatbuf_r+0x1e>
 8012c4c:	2340      	movs	r3, #64	; 0x40
 8012c4e:	2000      	movs	r0, #0
 8012c50:	6023      	str	r3, [r4, #0]
 8012c52:	b016      	add	sp, #88	; 0x58
 8012c54:	bd70      	pop	{r4, r5, r6, pc}
	...

08012c58 <__smakebuf_r>:
 8012c58:	898b      	ldrh	r3, [r1, #12]
 8012c5a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012c5c:	079d      	lsls	r5, r3, #30
 8012c5e:	4606      	mov	r6, r0
 8012c60:	460c      	mov	r4, r1
 8012c62:	d507      	bpl.n	8012c74 <__smakebuf_r+0x1c>
 8012c64:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012c68:	6023      	str	r3, [r4, #0]
 8012c6a:	6123      	str	r3, [r4, #16]
 8012c6c:	2301      	movs	r3, #1
 8012c6e:	6163      	str	r3, [r4, #20]
 8012c70:	b002      	add	sp, #8
 8012c72:	bd70      	pop	{r4, r5, r6, pc}
 8012c74:	ab01      	add	r3, sp, #4
 8012c76:	466a      	mov	r2, sp
 8012c78:	f7ff ffc8 	bl	8012c0c <__swhatbuf_r>
 8012c7c:	9900      	ldr	r1, [sp, #0]
 8012c7e:	4605      	mov	r5, r0
 8012c80:	4630      	mov	r0, r6
 8012c82:	f7ff fc03 	bl	801248c <_malloc_r>
 8012c86:	b948      	cbnz	r0, 8012c9c <__smakebuf_r+0x44>
 8012c88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012c8c:	059a      	lsls	r2, r3, #22
 8012c8e:	d4ef      	bmi.n	8012c70 <__smakebuf_r+0x18>
 8012c90:	f023 0303 	bic.w	r3, r3, #3
 8012c94:	f043 0302 	orr.w	r3, r3, #2
 8012c98:	81a3      	strh	r3, [r4, #12]
 8012c9a:	e7e3      	b.n	8012c64 <__smakebuf_r+0xc>
 8012c9c:	4b0d      	ldr	r3, [pc, #52]	; (8012cd4 <__smakebuf_r+0x7c>)
 8012c9e:	62b3      	str	r3, [r6, #40]	; 0x28
 8012ca0:	89a3      	ldrh	r3, [r4, #12]
 8012ca2:	6020      	str	r0, [r4, #0]
 8012ca4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012ca8:	81a3      	strh	r3, [r4, #12]
 8012caa:	9b00      	ldr	r3, [sp, #0]
 8012cac:	6163      	str	r3, [r4, #20]
 8012cae:	9b01      	ldr	r3, [sp, #4]
 8012cb0:	6120      	str	r0, [r4, #16]
 8012cb2:	b15b      	cbz	r3, 8012ccc <__smakebuf_r+0x74>
 8012cb4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012cb8:	4630      	mov	r0, r6
 8012cba:	f000 fd09 	bl	80136d0 <_isatty_r>
 8012cbe:	b128      	cbz	r0, 8012ccc <__smakebuf_r+0x74>
 8012cc0:	89a3      	ldrh	r3, [r4, #12]
 8012cc2:	f023 0303 	bic.w	r3, r3, #3
 8012cc6:	f043 0301 	orr.w	r3, r3, #1
 8012cca:	81a3      	strh	r3, [r4, #12]
 8012ccc:	89a0      	ldrh	r0, [r4, #12]
 8012cce:	4305      	orrs	r5, r0
 8012cd0:	81a5      	strh	r5, [r4, #12]
 8012cd2:	e7cd      	b.n	8012c70 <__smakebuf_r+0x18>
 8012cd4:	08012a65 	.word	0x08012a65

08012cd8 <__malloc_lock>:
 8012cd8:	4801      	ldr	r0, [pc, #4]	; (8012ce0 <__malloc_lock+0x8>)
 8012cda:	f7ff bf95 	b.w	8012c08 <__retarget_lock_acquire_recursive>
 8012cde:	bf00      	nop
 8012ce0:	20002d28 	.word	0x20002d28

08012ce4 <__malloc_unlock>:
 8012ce4:	4801      	ldr	r0, [pc, #4]	; (8012cec <__malloc_unlock+0x8>)
 8012ce6:	f7ff bf90 	b.w	8012c0a <__retarget_lock_release_recursive>
 8012cea:	bf00      	nop
 8012cec:	20002d28 	.word	0x20002d28

08012cf0 <_realloc_r>:
 8012cf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012cf4:	4680      	mov	r8, r0
 8012cf6:	4614      	mov	r4, r2
 8012cf8:	460e      	mov	r6, r1
 8012cfa:	b921      	cbnz	r1, 8012d06 <_realloc_r+0x16>
 8012cfc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012d00:	4611      	mov	r1, r2
 8012d02:	f7ff bbc3 	b.w	801248c <_malloc_r>
 8012d06:	b92a      	cbnz	r2, 8012d14 <_realloc_r+0x24>
 8012d08:	f7ff fb54 	bl	80123b4 <_free_r>
 8012d0c:	4625      	mov	r5, r4
 8012d0e:	4628      	mov	r0, r5
 8012d10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012d14:	f000 fd18 	bl	8013748 <_malloc_usable_size_r>
 8012d18:	4284      	cmp	r4, r0
 8012d1a:	4607      	mov	r7, r0
 8012d1c:	d802      	bhi.n	8012d24 <_realloc_r+0x34>
 8012d1e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8012d22:	d812      	bhi.n	8012d4a <_realloc_r+0x5a>
 8012d24:	4621      	mov	r1, r4
 8012d26:	4640      	mov	r0, r8
 8012d28:	f7ff fbb0 	bl	801248c <_malloc_r>
 8012d2c:	4605      	mov	r5, r0
 8012d2e:	2800      	cmp	r0, #0
 8012d30:	d0ed      	beq.n	8012d0e <_realloc_r+0x1e>
 8012d32:	42bc      	cmp	r4, r7
 8012d34:	4622      	mov	r2, r4
 8012d36:	4631      	mov	r1, r6
 8012d38:	bf28      	it	cs
 8012d3a:	463a      	movcs	r2, r7
 8012d3c:	f7ff fb24 	bl	8012388 <memcpy>
 8012d40:	4631      	mov	r1, r6
 8012d42:	4640      	mov	r0, r8
 8012d44:	f7ff fb36 	bl	80123b4 <_free_r>
 8012d48:	e7e1      	b.n	8012d0e <_realloc_r+0x1e>
 8012d4a:	4635      	mov	r5, r6
 8012d4c:	e7df      	b.n	8012d0e <_realloc_r+0x1e>

08012d4e <__ssputs_r>:
 8012d4e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012d52:	688e      	ldr	r6, [r1, #8]
 8012d54:	429e      	cmp	r6, r3
 8012d56:	4682      	mov	sl, r0
 8012d58:	460c      	mov	r4, r1
 8012d5a:	4690      	mov	r8, r2
 8012d5c:	461f      	mov	r7, r3
 8012d5e:	d838      	bhi.n	8012dd2 <__ssputs_r+0x84>
 8012d60:	898a      	ldrh	r2, [r1, #12]
 8012d62:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8012d66:	d032      	beq.n	8012dce <__ssputs_r+0x80>
 8012d68:	6825      	ldr	r5, [r4, #0]
 8012d6a:	6909      	ldr	r1, [r1, #16]
 8012d6c:	eba5 0901 	sub.w	r9, r5, r1
 8012d70:	6965      	ldr	r5, [r4, #20]
 8012d72:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012d76:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012d7a:	3301      	adds	r3, #1
 8012d7c:	444b      	add	r3, r9
 8012d7e:	106d      	asrs	r5, r5, #1
 8012d80:	429d      	cmp	r5, r3
 8012d82:	bf38      	it	cc
 8012d84:	461d      	movcc	r5, r3
 8012d86:	0553      	lsls	r3, r2, #21
 8012d88:	d531      	bpl.n	8012dee <__ssputs_r+0xa0>
 8012d8a:	4629      	mov	r1, r5
 8012d8c:	f7ff fb7e 	bl	801248c <_malloc_r>
 8012d90:	4606      	mov	r6, r0
 8012d92:	b950      	cbnz	r0, 8012daa <__ssputs_r+0x5c>
 8012d94:	230c      	movs	r3, #12
 8012d96:	f8ca 3000 	str.w	r3, [sl]
 8012d9a:	89a3      	ldrh	r3, [r4, #12]
 8012d9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012da0:	81a3      	strh	r3, [r4, #12]
 8012da2:	f04f 30ff 	mov.w	r0, #4294967295
 8012da6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012daa:	6921      	ldr	r1, [r4, #16]
 8012dac:	464a      	mov	r2, r9
 8012dae:	f7ff faeb 	bl	8012388 <memcpy>
 8012db2:	89a3      	ldrh	r3, [r4, #12]
 8012db4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8012db8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012dbc:	81a3      	strh	r3, [r4, #12]
 8012dbe:	6126      	str	r6, [r4, #16]
 8012dc0:	6165      	str	r5, [r4, #20]
 8012dc2:	444e      	add	r6, r9
 8012dc4:	eba5 0509 	sub.w	r5, r5, r9
 8012dc8:	6026      	str	r6, [r4, #0]
 8012dca:	60a5      	str	r5, [r4, #8]
 8012dcc:	463e      	mov	r6, r7
 8012dce:	42be      	cmp	r6, r7
 8012dd0:	d900      	bls.n	8012dd4 <__ssputs_r+0x86>
 8012dd2:	463e      	mov	r6, r7
 8012dd4:	6820      	ldr	r0, [r4, #0]
 8012dd6:	4632      	mov	r2, r6
 8012dd8:	4641      	mov	r1, r8
 8012dda:	f000 fc9b 	bl	8013714 <memmove>
 8012dde:	68a3      	ldr	r3, [r4, #8]
 8012de0:	1b9b      	subs	r3, r3, r6
 8012de2:	60a3      	str	r3, [r4, #8]
 8012de4:	6823      	ldr	r3, [r4, #0]
 8012de6:	4433      	add	r3, r6
 8012de8:	6023      	str	r3, [r4, #0]
 8012dea:	2000      	movs	r0, #0
 8012dec:	e7db      	b.n	8012da6 <__ssputs_r+0x58>
 8012dee:	462a      	mov	r2, r5
 8012df0:	f7ff ff7e 	bl	8012cf0 <_realloc_r>
 8012df4:	4606      	mov	r6, r0
 8012df6:	2800      	cmp	r0, #0
 8012df8:	d1e1      	bne.n	8012dbe <__ssputs_r+0x70>
 8012dfa:	6921      	ldr	r1, [r4, #16]
 8012dfc:	4650      	mov	r0, sl
 8012dfe:	f7ff fad9 	bl	80123b4 <_free_r>
 8012e02:	e7c7      	b.n	8012d94 <__ssputs_r+0x46>

08012e04 <_svfiprintf_r>:
 8012e04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e08:	4698      	mov	r8, r3
 8012e0a:	898b      	ldrh	r3, [r1, #12]
 8012e0c:	061b      	lsls	r3, r3, #24
 8012e0e:	b09d      	sub	sp, #116	; 0x74
 8012e10:	4607      	mov	r7, r0
 8012e12:	460d      	mov	r5, r1
 8012e14:	4614      	mov	r4, r2
 8012e16:	d50e      	bpl.n	8012e36 <_svfiprintf_r+0x32>
 8012e18:	690b      	ldr	r3, [r1, #16]
 8012e1a:	b963      	cbnz	r3, 8012e36 <_svfiprintf_r+0x32>
 8012e1c:	2140      	movs	r1, #64	; 0x40
 8012e1e:	f7ff fb35 	bl	801248c <_malloc_r>
 8012e22:	6028      	str	r0, [r5, #0]
 8012e24:	6128      	str	r0, [r5, #16]
 8012e26:	b920      	cbnz	r0, 8012e32 <_svfiprintf_r+0x2e>
 8012e28:	230c      	movs	r3, #12
 8012e2a:	603b      	str	r3, [r7, #0]
 8012e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8012e30:	e0d1      	b.n	8012fd6 <_svfiprintf_r+0x1d2>
 8012e32:	2340      	movs	r3, #64	; 0x40
 8012e34:	616b      	str	r3, [r5, #20]
 8012e36:	2300      	movs	r3, #0
 8012e38:	9309      	str	r3, [sp, #36]	; 0x24
 8012e3a:	2320      	movs	r3, #32
 8012e3c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012e40:	f8cd 800c 	str.w	r8, [sp, #12]
 8012e44:	2330      	movs	r3, #48	; 0x30
 8012e46:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8012ff0 <_svfiprintf_r+0x1ec>
 8012e4a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012e4e:	f04f 0901 	mov.w	r9, #1
 8012e52:	4623      	mov	r3, r4
 8012e54:	469a      	mov	sl, r3
 8012e56:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012e5a:	b10a      	cbz	r2, 8012e60 <_svfiprintf_r+0x5c>
 8012e5c:	2a25      	cmp	r2, #37	; 0x25
 8012e5e:	d1f9      	bne.n	8012e54 <_svfiprintf_r+0x50>
 8012e60:	ebba 0b04 	subs.w	fp, sl, r4
 8012e64:	d00b      	beq.n	8012e7e <_svfiprintf_r+0x7a>
 8012e66:	465b      	mov	r3, fp
 8012e68:	4622      	mov	r2, r4
 8012e6a:	4629      	mov	r1, r5
 8012e6c:	4638      	mov	r0, r7
 8012e6e:	f7ff ff6e 	bl	8012d4e <__ssputs_r>
 8012e72:	3001      	adds	r0, #1
 8012e74:	f000 80aa 	beq.w	8012fcc <_svfiprintf_r+0x1c8>
 8012e78:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012e7a:	445a      	add	r2, fp
 8012e7c:	9209      	str	r2, [sp, #36]	; 0x24
 8012e7e:	f89a 3000 	ldrb.w	r3, [sl]
 8012e82:	2b00      	cmp	r3, #0
 8012e84:	f000 80a2 	beq.w	8012fcc <_svfiprintf_r+0x1c8>
 8012e88:	2300      	movs	r3, #0
 8012e8a:	f04f 32ff 	mov.w	r2, #4294967295
 8012e8e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012e92:	f10a 0a01 	add.w	sl, sl, #1
 8012e96:	9304      	str	r3, [sp, #16]
 8012e98:	9307      	str	r3, [sp, #28]
 8012e9a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012e9e:	931a      	str	r3, [sp, #104]	; 0x68
 8012ea0:	4654      	mov	r4, sl
 8012ea2:	2205      	movs	r2, #5
 8012ea4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012ea8:	4851      	ldr	r0, [pc, #324]	; (8012ff0 <_svfiprintf_r+0x1ec>)
 8012eaa:	f7ed f9b1 	bl	8000210 <memchr>
 8012eae:	9a04      	ldr	r2, [sp, #16]
 8012eb0:	b9d8      	cbnz	r0, 8012eea <_svfiprintf_r+0xe6>
 8012eb2:	06d0      	lsls	r0, r2, #27
 8012eb4:	bf44      	itt	mi
 8012eb6:	2320      	movmi	r3, #32
 8012eb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012ebc:	0711      	lsls	r1, r2, #28
 8012ebe:	bf44      	itt	mi
 8012ec0:	232b      	movmi	r3, #43	; 0x2b
 8012ec2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012ec6:	f89a 3000 	ldrb.w	r3, [sl]
 8012eca:	2b2a      	cmp	r3, #42	; 0x2a
 8012ecc:	d015      	beq.n	8012efa <_svfiprintf_r+0xf6>
 8012ece:	9a07      	ldr	r2, [sp, #28]
 8012ed0:	4654      	mov	r4, sl
 8012ed2:	2000      	movs	r0, #0
 8012ed4:	f04f 0c0a 	mov.w	ip, #10
 8012ed8:	4621      	mov	r1, r4
 8012eda:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012ede:	3b30      	subs	r3, #48	; 0x30
 8012ee0:	2b09      	cmp	r3, #9
 8012ee2:	d94e      	bls.n	8012f82 <_svfiprintf_r+0x17e>
 8012ee4:	b1b0      	cbz	r0, 8012f14 <_svfiprintf_r+0x110>
 8012ee6:	9207      	str	r2, [sp, #28]
 8012ee8:	e014      	b.n	8012f14 <_svfiprintf_r+0x110>
 8012eea:	eba0 0308 	sub.w	r3, r0, r8
 8012eee:	fa09 f303 	lsl.w	r3, r9, r3
 8012ef2:	4313      	orrs	r3, r2
 8012ef4:	9304      	str	r3, [sp, #16]
 8012ef6:	46a2      	mov	sl, r4
 8012ef8:	e7d2      	b.n	8012ea0 <_svfiprintf_r+0x9c>
 8012efa:	9b03      	ldr	r3, [sp, #12]
 8012efc:	1d19      	adds	r1, r3, #4
 8012efe:	681b      	ldr	r3, [r3, #0]
 8012f00:	9103      	str	r1, [sp, #12]
 8012f02:	2b00      	cmp	r3, #0
 8012f04:	bfbb      	ittet	lt
 8012f06:	425b      	neglt	r3, r3
 8012f08:	f042 0202 	orrlt.w	r2, r2, #2
 8012f0c:	9307      	strge	r3, [sp, #28]
 8012f0e:	9307      	strlt	r3, [sp, #28]
 8012f10:	bfb8      	it	lt
 8012f12:	9204      	strlt	r2, [sp, #16]
 8012f14:	7823      	ldrb	r3, [r4, #0]
 8012f16:	2b2e      	cmp	r3, #46	; 0x2e
 8012f18:	d10c      	bne.n	8012f34 <_svfiprintf_r+0x130>
 8012f1a:	7863      	ldrb	r3, [r4, #1]
 8012f1c:	2b2a      	cmp	r3, #42	; 0x2a
 8012f1e:	d135      	bne.n	8012f8c <_svfiprintf_r+0x188>
 8012f20:	9b03      	ldr	r3, [sp, #12]
 8012f22:	1d1a      	adds	r2, r3, #4
 8012f24:	681b      	ldr	r3, [r3, #0]
 8012f26:	9203      	str	r2, [sp, #12]
 8012f28:	2b00      	cmp	r3, #0
 8012f2a:	bfb8      	it	lt
 8012f2c:	f04f 33ff 	movlt.w	r3, #4294967295
 8012f30:	3402      	adds	r4, #2
 8012f32:	9305      	str	r3, [sp, #20]
 8012f34:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8013000 <_svfiprintf_r+0x1fc>
 8012f38:	7821      	ldrb	r1, [r4, #0]
 8012f3a:	2203      	movs	r2, #3
 8012f3c:	4650      	mov	r0, sl
 8012f3e:	f7ed f967 	bl	8000210 <memchr>
 8012f42:	b140      	cbz	r0, 8012f56 <_svfiprintf_r+0x152>
 8012f44:	2340      	movs	r3, #64	; 0x40
 8012f46:	eba0 000a 	sub.w	r0, r0, sl
 8012f4a:	fa03 f000 	lsl.w	r0, r3, r0
 8012f4e:	9b04      	ldr	r3, [sp, #16]
 8012f50:	4303      	orrs	r3, r0
 8012f52:	3401      	adds	r4, #1
 8012f54:	9304      	str	r3, [sp, #16]
 8012f56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012f5a:	4826      	ldr	r0, [pc, #152]	; (8012ff4 <_svfiprintf_r+0x1f0>)
 8012f5c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012f60:	2206      	movs	r2, #6
 8012f62:	f7ed f955 	bl	8000210 <memchr>
 8012f66:	2800      	cmp	r0, #0
 8012f68:	d038      	beq.n	8012fdc <_svfiprintf_r+0x1d8>
 8012f6a:	4b23      	ldr	r3, [pc, #140]	; (8012ff8 <_svfiprintf_r+0x1f4>)
 8012f6c:	bb1b      	cbnz	r3, 8012fb6 <_svfiprintf_r+0x1b2>
 8012f6e:	9b03      	ldr	r3, [sp, #12]
 8012f70:	3307      	adds	r3, #7
 8012f72:	f023 0307 	bic.w	r3, r3, #7
 8012f76:	3308      	adds	r3, #8
 8012f78:	9303      	str	r3, [sp, #12]
 8012f7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012f7c:	4433      	add	r3, r6
 8012f7e:	9309      	str	r3, [sp, #36]	; 0x24
 8012f80:	e767      	b.n	8012e52 <_svfiprintf_r+0x4e>
 8012f82:	fb0c 3202 	mla	r2, ip, r2, r3
 8012f86:	460c      	mov	r4, r1
 8012f88:	2001      	movs	r0, #1
 8012f8a:	e7a5      	b.n	8012ed8 <_svfiprintf_r+0xd4>
 8012f8c:	2300      	movs	r3, #0
 8012f8e:	3401      	adds	r4, #1
 8012f90:	9305      	str	r3, [sp, #20]
 8012f92:	4619      	mov	r1, r3
 8012f94:	f04f 0c0a 	mov.w	ip, #10
 8012f98:	4620      	mov	r0, r4
 8012f9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012f9e:	3a30      	subs	r2, #48	; 0x30
 8012fa0:	2a09      	cmp	r2, #9
 8012fa2:	d903      	bls.n	8012fac <_svfiprintf_r+0x1a8>
 8012fa4:	2b00      	cmp	r3, #0
 8012fa6:	d0c5      	beq.n	8012f34 <_svfiprintf_r+0x130>
 8012fa8:	9105      	str	r1, [sp, #20]
 8012faa:	e7c3      	b.n	8012f34 <_svfiprintf_r+0x130>
 8012fac:	fb0c 2101 	mla	r1, ip, r1, r2
 8012fb0:	4604      	mov	r4, r0
 8012fb2:	2301      	movs	r3, #1
 8012fb4:	e7f0      	b.n	8012f98 <_svfiprintf_r+0x194>
 8012fb6:	ab03      	add	r3, sp, #12
 8012fb8:	9300      	str	r3, [sp, #0]
 8012fba:	462a      	mov	r2, r5
 8012fbc:	4b0f      	ldr	r3, [pc, #60]	; (8012ffc <_svfiprintf_r+0x1f8>)
 8012fbe:	a904      	add	r1, sp, #16
 8012fc0:	4638      	mov	r0, r7
 8012fc2:	f3af 8000 	nop.w
 8012fc6:	1c42      	adds	r2, r0, #1
 8012fc8:	4606      	mov	r6, r0
 8012fca:	d1d6      	bne.n	8012f7a <_svfiprintf_r+0x176>
 8012fcc:	89ab      	ldrh	r3, [r5, #12]
 8012fce:	065b      	lsls	r3, r3, #25
 8012fd0:	f53f af2c 	bmi.w	8012e2c <_svfiprintf_r+0x28>
 8012fd4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012fd6:	b01d      	add	sp, #116	; 0x74
 8012fd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012fdc:	ab03      	add	r3, sp, #12
 8012fde:	9300      	str	r3, [sp, #0]
 8012fe0:	462a      	mov	r2, r5
 8012fe2:	4b06      	ldr	r3, [pc, #24]	; (8012ffc <_svfiprintf_r+0x1f8>)
 8012fe4:	a904      	add	r1, sp, #16
 8012fe6:	4638      	mov	r0, r7
 8012fe8:	f000 f9d4 	bl	8013394 <_printf_i>
 8012fec:	e7eb      	b.n	8012fc6 <_svfiprintf_r+0x1c2>
 8012fee:	bf00      	nop
 8012ff0:	0801413c 	.word	0x0801413c
 8012ff4:	08014146 	.word	0x08014146
 8012ff8:	00000000 	.word	0x00000000
 8012ffc:	08012d4f 	.word	0x08012d4f
 8013000:	08014142 	.word	0x08014142

08013004 <__sfputc_r>:
 8013004:	6893      	ldr	r3, [r2, #8]
 8013006:	3b01      	subs	r3, #1
 8013008:	2b00      	cmp	r3, #0
 801300a:	b410      	push	{r4}
 801300c:	6093      	str	r3, [r2, #8]
 801300e:	da08      	bge.n	8013022 <__sfputc_r+0x1e>
 8013010:	6994      	ldr	r4, [r2, #24]
 8013012:	42a3      	cmp	r3, r4
 8013014:	db01      	blt.n	801301a <__sfputc_r+0x16>
 8013016:	290a      	cmp	r1, #10
 8013018:	d103      	bne.n	8013022 <__sfputc_r+0x1e>
 801301a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801301e:	f7ff bb7b 	b.w	8012718 <__swbuf_r>
 8013022:	6813      	ldr	r3, [r2, #0]
 8013024:	1c58      	adds	r0, r3, #1
 8013026:	6010      	str	r0, [r2, #0]
 8013028:	7019      	strb	r1, [r3, #0]
 801302a:	4608      	mov	r0, r1
 801302c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013030:	4770      	bx	lr

08013032 <__sfputs_r>:
 8013032:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013034:	4606      	mov	r6, r0
 8013036:	460f      	mov	r7, r1
 8013038:	4614      	mov	r4, r2
 801303a:	18d5      	adds	r5, r2, r3
 801303c:	42ac      	cmp	r4, r5
 801303e:	d101      	bne.n	8013044 <__sfputs_r+0x12>
 8013040:	2000      	movs	r0, #0
 8013042:	e007      	b.n	8013054 <__sfputs_r+0x22>
 8013044:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013048:	463a      	mov	r2, r7
 801304a:	4630      	mov	r0, r6
 801304c:	f7ff ffda 	bl	8013004 <__sfputc_r>
 8013050:	1c43      	adds	r3, r0, #1
 8013052:	d1f3      	bne.n	801303c <__sfputs_r+0xa>
 8013054:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013058 <_vfiprintf_r>:
 8013058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801305c:	460d      	mov	r5, r1
 801305e:	b09d      	sub	sp, #116	; 0x74
 8013060:	4614      	mov	r4, r2
 8013062:	4698      	mov	r8, r3
 8013064:	4606      	mov	r6, r0
 8013066:	b118      	cbz	r0, 8013070 <_vfiprintf_r+0x18>
 8013068:	6983      	ldr	r3, [r0, #24]
 801306a:	b90b      	cbnz	r3, 8013070 <_vfiprintf_r+0x18>
 801306c:	f7ff fd2e 	bl	8012acc <__sinit>
 8013070:	4b89      	ldr	r3, [pc, #548]	; (8013298 <_vfiprintf_r+0x240>)
 8013072:	429d      	cmp	r5, r3
 8013074:	d11b      	bne.n	80130ae <_vfiprintf_r+0x56>
 8013076:	6875      	ldr	r5, [r6, #4]
 8013078:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801307a:	07d9      	lsls	r1, r3, #31
 801307c:	d405      	bmi.n	801308a <_vfiprintf_r+0x32>
 801307e:	89ab      	ldrh	r3, [r5, #12]
 8013080:	059a      	lsls	r2, r3, #22
 8013082:	d402      	bmi.n	801308a <_vfiprintf_r+0x32>
 8013084:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013086:	f7ff fdbf 	bl	8012c08 <__retarget_lock_acquire_recursive>
 801308a:	89ab      	ldrh	r3, [r5, #12]
 801308c:	071b      	lsls	r3, r3, #28
 801308e:	d501      	bpl.n	8013094 <_vfiprintf_r+0x3c>
 8013090:	692b      	ldr	r3, [r5, #16]
 8013092:	b9eb      	cbnz	r3, 80130d0 <_vfiprintf_r+0x78>
 8013094:	4629      	mov	r1, r5
 8013096:	4630      	mov	r0, r6
 8013098:	f7ff fb90 	bl	80127bc <__swsetup_r>
 801309c:	b1c0      	cbz	r0, 80130d0 <_vfiprintf_r+0x78>
 801309e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80130a0:	07dc      	lsls	r4, r3, #31
 80130a2:	d50e      	bpl.n	80130c2 <_vfiprintf_r+0x6a>
 80130a4:	f04f 30ff 	mov.w	r0, #4294967295
 80130a8:	b01d      	add	sp, #116	; 0x74
 80130aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80130ae:	4b7b      	ldr	r3, [pc, #492]	; (801329c <_vfiprintf_r+0x244>)
 80130b0:	429d      	cmp	r5, r3
 80130b2:	d101      	bne.n	80130b8 <_vfiprintf_r+0x60>
 80130b4:	68b5      	ldr	r5, [r6, #8]
 80130b6:	e7df      	b.n	8013078 <_vfiprintf_r+0x20>
 80130b8:	4b79      	ldr	r3, [pc, #484]	; (80132a0 <_vfiprintf_r+0x248>)
 80130ba:	429d      	cmp	r5, r3
 80130bc:	bf08      	it	eq
 80130be:	68f5      	ldreq	r5, [r6, #12]
 80130c0:	e7da      	b.n	8013078 <_vfiprintf_r+0x20>
 80130c2:	89ab      	ldrh	r3, [r5, #12]
 80130c4:	0598      	lsls	r0, r3, #22
 80130c6:	d4ed      	bmi.n	80130a4 <_vfiprintf_r+0x4c>
 80130c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80130ca:	f7ff fd9e 	bl	8012c0a <__retarget_lock_release_recursive>
 80130ce:	e7e9      	b.n	80130a4 <_vfiprintf_r+0x4c>
 80130d0:	2300      	movs	r3, #0
 80130d2:	9309      	str	r3, [sp, #36]	; 0x24
 80130d4:	2320      	movs	r3, #32
 80130d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80130da:	f8cd 800c 	str.w	r8, [sp, #12]
 80130de:	2330      	movs	r3, #48	; 0x30
 80130e0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80132a4 <_vfiprintf_r+0x24c>
 80130e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80130e8:	f04f 0901 	mov.w	r9, #1
 80130ec:	4623      	mov	r3, r4
 80130ee:	469a      	mov	sl, r3
 80130f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80130f4:	b10a      	cbz	r2, 80130fa <_vfiprintf_r+0xa2>
 80130f6:	2a25      	cmp	r2, #37	; 0x25
 80130f8:	d1f9      	bne.n	80130ee <_vfiprintf_r+0x96>
 80130fa:	ebba 0b04 	subs.w	fp, sl, r4
 80130fe:	d00b      	beq.n	8013118 <_vfiprintf_r+0xc0>
 8013100:	465b      	mov	r3, fp
 8013102:	4622      	mov	r2, r4
 8013104:	4629      	mov	r1, r5
 8013106:	4630      	mov	r0, r6
 8013108:	f7ff ff93 	bl	8013032 <__sfputs_r>
 801310c:	3001      	adds	r0, #1
 801310e:	f000 80aa 	beq.w	8013266 <_vfiprintf_r+0x20e>
 8013112:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013114:	445a      	add	r2, fp
 8013116:	9209      	str	r2, [sp, #36]	; 0x24
 8013118:	f89a 3000 	ldrb.w	r3, [sl]
 801311c:	2b00      	cmp	r3, #0
 801311e:	f000 80a2 	beq.w	8013266 <_vfiprintf_r+0x20e>
 8013122:	2300      	movs	r3, #0
 8013124:	f04f 32ff 	mov.w	r2, #4294967295
 8013128:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801312c:	f10a 0a01 	add.w	sl, sl, #1
 8013130:	9304      	str	r3, [sp, #16]
 8013132:	9307      	str	r3, [sp, #28]
 8013134:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013138:	931a      	str	r3, [sp, #104]	; 0x68
 801313a:	4654      	mov	r4, sl
 801313c:	2205      	movs	r2, #5
 801313e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013142:	4858      	ldr	r0, [pc, #352]	; (80132a4 <_vfiprintf_r+0x24c>)
 8013144:	f7ed f864 	bl	8000210 <memchr>
 8013148:	9a04      	ldr	r2, [sp, #16]
 801314a:	b9d8      	cbnz	r0, 8013184 <_vfiprintf_r+0x12c>
 801314c:	06d1      	lsls	r1, r2, #27
 801314e:	bf44      	itt	mi
 8013150:	2320      	movmi	r3, #32
 8013152:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013156:	0713      	lsls	r3, r2, #28
 8013158:	bf44      	itt	mi
 801315a:	232b      	movmi	r3, #43	; 0x2b
 801315c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013160:	f89a 3000 	ldrb.w	r3, [sl]
 8013164:	2b2a      	cmp	r3, #42	; 0x2a
 8013166:	d015      	beq.n	8013194 <_vfiprintf_r+0x13c>
 8013168:	9a07      	ldr	r2, [sp, #28]
 801316a:	4654      	mov	r4, sl
 801316c:	2000      	movs	r0, #0
 801316e:	f04f 0c0a 	mov.w	ip, #10
 8013172:	4621      	mov	r1, r4
 8013174:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013178:	3b30      	subs	r3, #48	; 0x30
 801317a:	2b09      	cmp	r3, #9
 801317c:	d94e      	bls.n	801321c <_vfiprintf_r+0x1c4>
 801317e:	b1b0      	cbz	r0, 80131ae <_vfiprintf_r+0x156>
 8013180:	9207      	str	r2, [sp, #28]
 8013182:	e014      	b.n	80131ae <_vfiprintf_r+0x156>
 8013184:	eba0 0308 	sub.w	r3, r0, r8
 8013188:	fa09 f303 	lsl.w	r3, r9, r3
 801318c:	4313      	orrs	r3, r2
 801318e:	9304      	str	r3, [sp, #16]
 8013190:	46a2      	mov	sl, r4
 8013192:	e7d2      	b.n	801313a <_vfiprintf_r+0xe2>
 8013194:	9b03      	ldr	r3, [sp, #12]
 8013196:	1d19      	adds	r1, r3, #4
 8013198:	681b      	ldr	r3, [r3, #0]
 801319a:	9103      	str	r1, [sp, #12]
 801319c:	2b00      	cmp	r3, #0
 801319e:	bfbb      	ittet	lt
 80131a0:	425b      	neglt	r3, r3
 80131a2:	f042 0202 	orrlt.w	r2, r2, #2
 80131a6:	9307      	strge	r3, [sp, #28]
 80131a8:	9307      	strlt	r3, [sp, #28]
 80131aa:	bfb8      	it	lt
 80131ac:	9204      	strlt	r2, [sp, #16]
 80131ae:	7823      	ldrb	r3, [r4, #0]
 80131b0:	2b2e      	cmp	r3, #46	; 0x2e
 80131b2:	d10c      	bne.n	80131ce <_vfiprintf_r+0x176>
 80131b4:	7863      	ldrb	r3, [r4, #1]
 80131b6:	2b2a      	cmp	r3, #42	; 0x2a
 80131b8:	d135      	bne.n	8013226 <_vfiprintf_r+0x1ce>
 80131ba:	9b03      	ldr	r3, [sp, #12]
 80131bc:	1d1a      	adds	r2, r3, #4
 80131be:	681b      	ldr	r3, [r3, #0]
 80131c0:	9203      	str	r2, [sp, #12]
 80131c2:	2b00      	cmp	r3, #0
 80131c4:	bfb8      	it	lt
 80131c6:	f04f 33ff 	movlt.w	r3, #4294967295
 80131ca:	3402      	adds	r4, #2
 80131cc:	9305      	str	r3, [sp, #20]
 80131ce:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80132b4 <_vfiprintf_r+0x25c>
 80131d2:	7821      	ldrb	r1, [r4, #0]
 80131d4:	2203      	movs	r2, #3
 80131d6:	4650      	mov	r0, sl
 80131d8:	f7ed f81a 	bl	8000210 <memchr>
 80131dc:	b140      	cbz	r0, 80131f0 <_vfiprintf_r+0x198>
 80131de:	2340      	movs	r3, #64	; 0x40
 80131e0:	eba0 000a 	sub.w	r0, r0, sl
 80131e4:	fa03 f000 	lsl.w	r0, r3, r0
 80131e8:	9b04      	ldr	r3, [sp, #16]
 80131ea:	4303      	orrs	r3, r0
 80131ec:	3401      	adds	r4, #1
 80131ee:	9304      	str	r3, [sp, #16]
 80131f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80131f4:	482c      	ldr	r0, [pc, #176]	; (80132a8 <_vfiprintf_r+0x250>)
 80131f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80131fa:	2206      	movs	r2, #6
 80131fc:	f7ed f808 	bl	8000210 <memchr>
 8013200:	2800      	cmp	r0, #0
 8013202:	d03f      	beq.n	8013284 <_vfiprintf_r+0x22c>
 8013204:	4b29      	ldr	r3, [pc, #164]	; (80132ac <_vfiprintf_r+0x254>)
 8013206:	bb1b      	cbnz	r3, 8013250 <_vfiprintf_r+0x1f8>
 8013208:	9b03      	ldr	r3, [sp, #12]
 801320a:	3307      	adds	r3, #7
 801320c:	f023 0307 	bic.w	r3, r3, #7
 8013210:	3308      	adds	r3, #8
 8013212:	9303      	str	r3, [sp, #12]
 8013214:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013216:	443b      	add	r3, r7
 8013218:	9309      	str	r3, [sp, #36]	; 0x24
 801321a:	e767      	b.n	80130ec <_vfiprintf_r+0x94>
 801321c:	fb0c 3202 	mla	r2, ip, r2, r3
 8013220:	460c      	mov	r4, r1
 8013222:	2001      	movs	r0, #1
 8013224:	e7a5      	b.n	8013172 <_vfiprintf_r+0x11a>
 8013226:	2300      	movs	r3, #0
 8013228:	3401      	adds	r4, #1
 801322a:	9305      	str	r3, [sp, #20]
 801322c:	4619      	mov	r1, r3
 801322e:	f04f 0c0a 	mov.w	ip, #10
 8013232:	4620      	mov	r0, r4
 8013234:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013238:	3a30      	subs	r2, #48	; 0x30
 801323a:	2a09      	cmp	r2, #9
 801323c:	d903      	bls.n	8013246 <_vfiprintf_r+0x1ee>
 801323e:	2b00      	cmp	r3, #0
 8013240:	d0c5      	beq.n	80131ce <_vfiprintf_r+0x176>
 8013242:	9105      	str	r1, [sp, #20]
 8013244:	e7c3      	b.n	80131ce <_vfiprintf_r+0x176>
 8013246:	fb0c 2101 	mla	r1, ip, r1, r2
 801324a:	4604      	mov	r4, r0
 801324c:	2301      	movs	r3, #1
 801324e:	e7f0      	b.n	8013232 <_vfiprintf_r+0x1da>
 8013250:	ab03      	add	r3, sp, #12
 8013252:	9300      	str	r3, [sp, #0]
 8013254:	462a      	mov	r2, r5
 8013256:	4b16      	ldr	r3, [pc, #88]	; (80132b0 <_vfiprintf_r+0x258>)
 8013258:	a904      	add	r1, sp, #16
 801325a:	4630      	mov	r0, r6
 801325c:	f3af 8000 	nop.w
 8013260:	4607      	mov	r7, r0
 8013262:	1c78      	adds	r0, r7, #1
 8013264:	d1d6      	bne.n	8013214 <_vfiprintf_r+0x1bc>
 8013266:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013268:	07d9      	lsls	r1, r3, #31
 801326a:	d405      	bmi.n	8013278 <_vfiprintf_r+0x220>
 801326c:	89ab      	ldrh	r3, [r5, #12]
 801326e:	059a      	lsls	r2, r3, #22
 8013270:	d402      	bmi.n	8013278 <_vfiprintf_r+0x220>
 8013272:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013274:	f7ff fcc9 	bl	8012c0a <__retarget_lock_release_recursive>
 8013278:	89ab      	ldrh	r3, [r5, #12]
 801327a:	065b      	lsls	r3, r3, #25
 801327c:	f53f af12 	bmi.w	80130a4 <_vfiprintf_r+0x4c>
 8013280:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013282:	e711      	b.n	80130a8 <_vfiprintf_r+0x50>
 8013284:	ab03      	add	r3, sp, #12
 8013286:	9300      	str	r3, [sp, #0]
 8013288:	462a      	mov	r2, r5
 801328a:	4b09      	ldr	r3, [pc, #36]	; (80132b0 <_vfiprintf_r+0x258>)
 801328c:	a904      	add	r1, sp, #16
 801328e:	4630      	mov	r0, r6
 8013290:	f000 f880 	bl	8013394 <_printf_i>
 8013294:	e7e4      	b.n	8013260 <_vfiprintf_r+0x208>
 8013296:	bf00      	nop
 8013298:	080140fc 	.word	0x080140fc
 801329c:	0801411c 	.word	0x0801411c
 80132a0:	080140dc 	.word	0x080140dc
 80132a4:	0801413c 	.word	0x0801413c
 80132a8:	08014146 	.word	0x08014146
 80132ac:	00000000 	.word	0x00000000
 80132b0:	08013033 	.word	0x08013033
 80132b4:	08014142 	.word	0x08014142

080132b8 <_printf_common>:
 80132b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80132bc:	4616      	mov	r6, r2
 80132be:	4699      	mov	r9, r3
 80132c0:	688a      	ldr	r2, [r1, #8]
 80132c2:	690b      	ldr	r3, [r1, #16]
 80132c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80132c8:	4293      	cmp	r3, r2
 80132ca:	bfb8      	it	lt
 80132cc:	4613      	movlt	r3, r2
 80132ce:	6033      	str	r3, [r6, #0]
 80132d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80132d4:	4607      	mov	r7, r0
 80132d6:	460c      	mov	r4, r1
 80132d8:	b10a      	cbz	r2, 80132de <_printf_common+0x26>
 80132da:	3301      	adds	r3, #1
 80132dc:	6033      	str	r3, [r6, #0]
 80132de:	6823      	ldr	r3, [r4, #0]
 80132e0:	0699      	lsls	r1, r3, #26
 80132e2:	bf42      	ittt	mi
 80132e4:	6833      	ldrmi	r3, [r6, #0]
 80132e6:	3302      	addmi	r3, #2
 80132e8:	6033      	strmi	r3, [r6, #0]
 80132ea:	6825      	ldr	r5, [r4, #0]
 80132ec:	f015 0506 	ands.w	r5, r5, #6
 80132f0:	d106      	bne.n	8013300 <_printf_common+0x48>
 80132f2:	f104 0a19 	add.w	sl, r4, #25
 80132f6:	68e3      	ldr	r3, [r4, #12]
 80132f8:	6832      	ldr	r2, [r6, #0]
 80132fa:	1a9b      	subs	r3, r3, r2
 80132fc:	42ab      	cmp	r3, r5
 80132fe:	dc26      	bgt.n	801334e <_printf_common+0x96>
 8013300:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8013304:	1e13      	subs	r3, r2, #0
 8013306:	6822      	ldr	r2, [r4, #0]
 8013308:	bf18      	it	ne
 801330a:	2301      	movne	r3, #1
 801330c:	0692      	lsls	r2, r2, #26
 801330e:	d42b      	bmi.n	8013368 <_printf_common+0xb0>
 8013310:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013314:	4649      	mov	r1, r9
 8013316:	4638      	mov	r0, r7
 8013318:	47c0      	blx	r8
 801331a:	3001      	adds	r0, #1
 801331c:	d01e      	beq.n	801335c <_printf_common+0xa4>
 801331e:	6823      	ldr	r3, [r4, #0]
 8013320:	68e5      	ldr	r5, [r4, #12]
 8013322:	6832      	ldr	r2, [r6, #0]
 8013324:	f003 0306 	and.w	r3, r3, #6
 8013328:	2b04      	cmp	r3, #4
 801332a:	bf08      	it	eq
 801332c:	1aad      	subeq	r5, r5, r2
 801332e:	68a3      	ldr	r3, [r4, #8]
 8013330:	6922      	ldr	r2, [r4, #16]
 8013332:	bf0c      	ite	eq
 8013334:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013338:	2500      	movne	r5, #0
 801333a:	4293      	cmp	r3, r2
 801333c:	bfc4      	itt	gt
 801333e:	1a9b      	subgt	r3, r3, r2
 8013340:	18ed      	addgt	r5, r5, r3
 8013342:	2600      	movs	r6, #0
 8013344:	341a      	adds	r4, #26
 8013346:	42b5      	cmp	r5, r6
 8013348:	d11a      	bne.n	8013380 <_printf_common+0xc8>
 801334a:	2000      	movs	r0, #0
 801334c:	e008      	b.n	8013360 <_printf_common+0xa8>
 801334e:	2301      	movs	r3, #1
 8013350:	4652      	mov	r2, sl
 8013352:	4649      	mov	r1, r9
 8013354:	4638      	mov	r0, r7
 8013356:	47c0      	blx	r8
 8013358:	3001      	adds	r0, #1
 801335a:	d103      	bne.n	8013364 <_printf_common+0xac>
 801335c:	f04f 30ff 	mov.w	r0, #4294967295
 8013360:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013364:	3501      	adds	r5, #1
 8013366:	e7c6      	b.n	80132f6 <_printf_common+0x3e>
 8013368:	18e1      	adds	r1, r4, r3
 801336a:	1c5a      	adds	r2, r3, #1
 801336c:	2030      	movs	r0, #48	; 0x30
 801336e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013372:	4422      	add	r2, r4
 8013374:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013378:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801337c:	3302      	adds	r3, #2
 801337e:	e7c7      	b.n	8013310 <_printf_common+0x58>
 8013380:	2301      	movs	r3, #1
 8013382:	4622      	mov	r2, r4
 8013384:	4649      	mov	r1, r9
 8013386:	4638      	mov	r0, r7
 8013388:	47c0      	blx	r8
 801338a:	3001      	adds	r0, #1
 801338c:	d0e6      	beq.n	801335c <_printf_common+0xa4>
 801338e:	3601      	adds	r6, #1
 8013390:	e7d9      	b.n	8013346 <_printf_common+0x8e>
	...

08013394 <_printf_i>:
 8013394:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013398:	7e0f      	ldrb	r7, [r1, #24]
 801339a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801339c:	2f78      	cmp	r7, #120	; 0x78
 801339e:	4691      	mov	r9, r2
 80133a0:	4680      	mov	r8, r0
 80133a2:	460c      	mov	r4, r1
 80133a4:	469a      	mov	sl, r3
 80133a6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80133aa:	d807      	bhi.n	80133bc <_printf_i+0x28>
 80133ac:	2f62      	cmp	r7, #98	; 0x62
 80133ae:	d80a      	bhi.n	80133c6 <_printf_i+0x32>
 80133b0:	2f00      	cmp	r7, #0
 80133b2:	f000 80d8 	beq.w	8013566 <_printf_i+0x1d2>
 80133b6:	2f58      	cmp	r7, #88	; 0x58
 80133b8:	f000 80a3 	beq.w	8013502 <_printf_i+0x16e>
 80133bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80133c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80133c4:	e03a      	b.n	801343c <_printf_i+0xa8>
 80133c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80133ca:	2b15      	cmp	r3, #21
 80133cc:	d8f6      	bhi.n	80133bc <_printf_i+0x28>
 80133ce:	a101      	add	r1, pc, #4	; (adr r1, 80133d4 <_printf_i+0x40>)
 80133d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80133d4:	0801342d 	.word	0x0801342d
 80133d8:	08013441 	.word	0x08013441
 80133dc:	080133bd 	.word	0x080133bd
 80133e0:	080133bd 	.word	0x080133bd
 80133e4:	080133bd 	.word	0x080133bd
 80133e8:	080133bd 	.word	0x080133bd
 80133ec:	08013441 	.word	0x08013441
 80133f0:	080133bd 	.word	0x080133bd
 80133f4:	080133bd 	.word	0x080133bd
 80133f8:	080133bd 	.word	0x080133bd
 80133fc:	080133bd 	.word	0x080133bd
 8013400:	0801354d 	.word	0x0801354d
 8013404:	08013471 	.word	0x08013471
 8013408:	0801352f 	.word	0x0801352f
 801340c:	080133bd 	.word	0x080133bd
 8013410:	080133bd 	.word	0x080133bd
 8013414:	0801356f 	.word	0x0801356f
 8013418:	080133bd 	.word	0x080133bd
 801341c:	08013471 	.word	0x08013471
 8013420:	080133bd 	.word	0x080133bd
 8013424:	080133bd 	.word	0x080133bd
 8013428:	08013537 	.word	0x08013537
 801342c:	682b      	ldr	r3, [r5, #0]
 801342e:	1d1a      	adds	r2, r3, #4
 8013430:	681b      	ldr	r3, [r3, #0]
 8013432:	602a      	str	r2, [r5, #0]
 8013434:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013438:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801343c:	2301      	movs	r3, #1
 801343e:	e0a3      	b.n	8013588 <_printf_i+0x1f4>
 8013440:	6820      	ldr	r0, [r4, #0]
 8013442:	6829      	ldr	r1, [r5, #0]
 8013444:	0606      	lsls	r6, r0, #24
 8013446:	f101 0304 	add.w	r3, r1, #4
 801344a:	d50a      	bpl.n	8013462 <_printf_i+0xce>
 801344c:	680e      	ldr	r6, [r1, #0]
 801344e:	602b      	str	r3, [r5, #0]
 8013450:	2e00      	cmp	r6, #0
 8013452:	da03      	bge.n	801345c <_printf_i+0xc8>
 8013454:	232d      	movs	r3, #45	; 0x2d
 8013456:	4276      	negs	r6, r6
 8013458:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801345c:	485e      	ldr	r0, [pc, #376]	; (80135d8 <_printf_i+0x244>)
 801345e:	230a      	movs	r3, #10
 8013460:	e019      	b.n	8013496 <_printf_i+0x102>
 8013462:	680e      	ldr	r6, [r1, #0]
 8013464:	602b      	str	r3, [r5, #0]
 8013466:	f010 0f40 	tst.w	r0, #64	; 0x40
 801346a:	bf18      	it	ne
 801346c:	b236      	sxthne	r6, r6
 801346e:	e7ef      	b.n	8013450 <_printf_i+0xbc>
 8013470:	682b      	ldr	r3, [r5, #0]
 8013472:	6820      	ldr	r0, [r4, #0]
 8013474:	1d19      	adds	r1, r3, #4
 8013476:	6029      	str	r1, [r5, #0]
 8013478:	0601      	lsls	r1, r0, #24
 801347a:	d501      	bpl.n	8013480 <_printf_i+0xec>
 801347c:	681e      	ldr	r6, [r3, #0]
 801347e:	e002      	b.n	8013486 <_printf_i+0xf2>
 8013480:	0646      	lsls	r6, r0, #25
 8013482:	d5fb      	bpl.n	801347c <_printf_i+0xe8>
 8013484:	881e      	ldrh	r6, [r3, #0]
 8013486:	4854      	ldr	r0, [pc, #336]	; (80135d8 <_printf_i+0x244>)
 8013488:	2f6f      	cmp	r7, #111	; 0x6f
 801348a:	bf0c      	ite	eq
 801348c:	2308      	moveq	r3, #8
 801348e:	230a      	movne	r3, #10
 8013490:	2100      	movs	r1, #0
 8013492:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8013496:	6865      	ldr	r5, [r4, #4]
 8013498:	60a5      	str	r5, [r4, #8]
 801349a:	2d00      	cmp	r5, #0
 801349c:	bfa2      	ittt	ge
 801349e:	6821      	ldrge	r1, [r4, #0]
 80134a0:	f021 0104 	bicge.w	r1, r1, #4
 80134a4:	6021      	strge	r1, [r4, #0]
 80134a6:	b90e      	cbnz	r6, 80134ac <_printf_i+0x118>
 80134a8:	2d00      	cmp	r5, #0
 80134aa:	d04d      	beq.n	8013548 <_printf_i+0x1b4>
 80134ac:	4615      	mov	r5, r2
 80134ae:	fbb6 f1f3 	udiv	r1, r6, r3
 80134b2:	fb03 6711 	mls	r7, r3, r1, r6
 80134b6:	5dc7      	ldrb	r7, [r0, r7]
 80134b8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80134bc:	4637      	mov	r7, r6
 80134be:	42bb      	cmp	r3, r7
 80134c0:	460e      	mov	r6, r1
 80134c2:	d9f4      	bls.n	80134ae <_printf_i+0x11a>
 80134c4:	2b08      	cmp	r3, #8
 80134c6:	d10b      	bne.n	80134e0 <_printf_i+0x14c>
 80134c8:	6823      	ldr	r3, [r4, #0]
 80134ca:	07de      	lsls	r6, r3, #31
 80134cc:	d508      	bpl.n	80134e0 <_printf_i+0x14c>
 80134ce:	6923      	ldr	r3, [r4, #16]
 80134d0:	6861      	ldr	r1, [r4, #4]
 80134d2:	4299      	cmp	r1, r3
 80134d4:	bfde      	ittt	le
 80134d6:	2330      	movle	r3, #48	; 0x30
 80134d8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80134dc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80134e0:	1b52      	subs	r2, r2, r5
 80134e2:	6122      	str	r2, [r4, #16]
 80134e4:	f8cd a000 	str.w	sl, [sp]
 80134e8:	464b      	mov	r3, r9
 80134ea:	aa03      	add	r2, sp, #12
 80134ec:	4621      	mov	r1, r4
 80134ee:	4640      	mov	r0, r8
 80134f0:	f7ff fee2 	bl	80132b8 <_printf_common>
 80134f4:	3001      	adds	r0, #1
 80134f6:	d14c      	bne.n	8013592 <_printf_i+0x1fe>
 80134f8:	f04f 30ff 	mov.w	r0, #4294967295
 80134fc:	b004      	add	sp, #16
 80134fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013502:	4835      	ldr	r0, [pc, #212]	; (80135d8 <_printf_i+0x244>)
 8013504:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8013508:	6829      	ldr	r1, [r5, #0]
 801350a:	6823      	ldr	r3, [r4, #0]
 801350c:	f851 6b04 	ldr.w	r6, [r1], #4
 8013510:	6029      	str	r1, [r5, #0]
 8013512:	061d      	lsls	r5, r3, #24
 8013514:	d514      	bpl.n	8013540 <_printf_i+0x1ac>
 8013516:	07df      	lsls	r7, r3, #31
 8013518:	bf44      	itt	mi
 801351a:	f043 0320 	orrmi.w	r3, r3, #32
 801351e:	6023      	strmi	r3, [r4, #0]
 8013520:	b91e      	cbnz	r6, 801352a <_printf_i+0x196>
 8013522:	6823      	ldr	r3, [r4, #0]
 8013524:	f023 0320 	bic.w	r3, r3, #32
 8013528:	6023      	str	r3, [r4, #0]
 801352a:	2310      	movs	r3, #16
 801352c:	e7b0      	b.n	8013490 <_printf_i+0xfc>
 801352e:	6823      	ldr	r3, [r4, #0]
 8013530:	f043 0320 	orr.w	r3, r3, #32
 8013534:	6023      	str	r3, [r4, #0]
 8013536:	2378      	movs	r3, #120	; 0x78
 8013538:	4828      	ldr	r0, [pc, #160]	; (80135dc <_printf_i+0x248>)
 801353a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801353e:	e7e3      	b.n	8013508 <_printf_i+0x174>
 8013540:	0659      	lsls	r1, r3, #25
 8013542:	bf48      	it	mi
 8013544:	b2b6      	uxthmi	r6, r6
 8013546:	e7e6      	b.n	8013516 <_printf_i+0x182>
 8013548:	4615      	mov	r5, r2
 801354a:	e7bb      	b.n	80134c4 <_printf_i+0x130>
 801354c:	682b      	ldr	r3, [r5, #0]
 801354e:	6826      	ldr	r6, [r4, #0]
 8013550:	6961      	ldr	r1, [r4, #20]
 8013552:	1d18      	adds	r0, r3, #4
 8013554:	6028      	str	r0, [r5, #0]
 8013556:	0635      	lsls	r5, r6, #24
 8013558:	681b      	ldr	r3, [r3, #0]
 801355a:	d501      	bpl.n	8013560 <_printf_i+0x1cc>
 801355c:	6019      	str	r1, [r3, #0]
 801355e:	e002      	b.n	8013566 <_printf_i+0x1d2>
 8013560:	0670      	lsls	r0, r6, #25
 8013562:	d5fb      	bpl.n	801355c <_printf_i+0x1c8>
 8013564:	8019      	strh	r1, [r3, #0]
 8013566:	2300      	movs	r3, #0
 8013568:	6123      	str	r3, [r4, #16]
 801356a:	4615      	mov	r5, r2
 801356c:	e7ba      	b.n	80134e4 <_printf_i+0x150>
 801356e:	682b      	ldr	r3, [r5, #0]
 8013570:	1d1a      	adds	r2, r3, #4
 8013572:	602a      	str	r2, [r5, #0]
 8013574:	681d      	ldr	r5, [r3, #0]
 8013576:	6862      	ldr	r2, [r4, #4]
 8013578:	2100      	movs	r1, #0
 801357a:	4628      	mov	r0, r5
 801357c:	f7ec fe48 	bl	8000210 <memchr>
 8013580:	b108      	cbz	r0, 8013586 <_printf_i+0x1f2>
 8013582:	1b40      	subs	r0, r0, r5
 8013584:	6060      	str	r0, [r4, #4]
 8013586:	6863      	ldr	r3, [r4, #4]
 8013588:	6123      	str	r3, [r4, #16]
 801358a:	2300      	movs	r3, #0
 801358c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013590:	e7a8      	b.n	80134e4 <_printf_i+0x150>
 8013592:	6923      	ldr	r3, [r4, #16]
 8013594:	462a      	mov	r2, r5
 8013596:	4649      	mov	r1, r9
 8013598:	4640      	mov	r0, r8
 801359a:	47d0      	blx	sl
 801359c:	3001      	adds	r0, #1
 801359e:	d0ab      	beq.n	80134f8 <_printf_i+0x164>
 80135a0:	6823      	ldr	r3, [r4, #0]
 80135a2:	079b      	lsls	r3, r3, #30
 80135a4:	d413      	bmi.n	80135ce <_printf_i+0x23a>
 80135a6:	68e0      	ldr	r0, [r4, #12]
 80135a8:	9b03      	ldr	r3, [sp, #12]
 80135aa:	4298      	cmp	r0, r3
 80135ac:	bfb8      	it	lt
 80135ae:	4618      	movlt	r0, r3
 80135b0:	e7a4      	b.n	80134fc <_printf_i+0x168>
 80135b2:	2301      	movs	r3, #1
 80135b4:	4632      	mov	r2, r6
 80135b6:	4649      	mov	r1, r9
 80135b8:	4640      	mov	r0, r8
 80135ba:	47d0      	blx	sl
 80135bc:	3001      	adds	r0, #1
 80135be:	d09b      	beq.n	80134f8 <_printf_i+0x164>
 80135c0:	3501      	adds	r5, #1
 80135c2:	68e3      	ldr	r3, [r4, #12]
 80135c4:	9903      	ldr	r1, [sp, #12]
 80135c6:	1a5b      	subs	r3, r3, r1
 80135c8:	42ab      	cmp	r3, r5
 80135ca:	dcf2      	bgt.n	80135b2 <_printf_i+0x21e>
 80135cc:	e7eb      	b.n	80135a6 <_printf_i+0x212>
 80135ce:	2500      	movs	r5, #0
 80135d0:	f104 0619 	add.w	r6, r4, #25
 80135d4:	e7f5      	b.n	80135c2 <_printf_i+0x22e>
 80135d6:	bf00      	nop
 80135d8:	0801414d 	.word	0x0801414d
 80135dc:	0801415e 	.word	0x0801415e

080135e0 <__sread>:
 80135e0:	b510      	push	{r4, lr}
 80135e2:	460c      	mov	r4, r1
 80135e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80135e8:	f000 f8b6 	bl	8013758 <_read_r>
 80135ec:	2800      	cmp	r0, #0
 80135ee:	bfab      	itete	ge
 80135f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80135f2:	89a3      	ldrhlt	r3, [r4, #12]
 80135f4:	181b      	addge	r3, r3, r0
 80135f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80135fa:	bfac      	ite	ge
 80135fc:	6563      	strge	r3, [r4, #84]	; 0x54
 80135fe:	81a3      	strhlt	r3, [r4, #12]
 8013600:	bd10      	pop	{r4, pc}

08013602 <__swrite>:
 8013602:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013606:	461f      	mov	r7, r3
 8013608:	898b      	ldrh	r3, [r1, #12]
 801360a:	05db      	lsls	r3, r3, #23
 801360c:	4605      	mov	r5, r0
 801360e:	460c      	mov	r4, r1
 8013610:	4616      	mov	r6, r2
 8013612:	d505      	bpl.n	8013620 <__swrite+0x1e>
 8013614:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013618:	2302      	movs	r3, #2
 801361a:	2200      	movs	r2, #0
 801361c:	f000 f868 	bl	80136f0 <_lseek_r>
 8013620:	89a3      	ldrh	r3, [r4, #12]
 8013622:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013626:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801362a:	81a3      	strh	r3, [r4, #12]
 801362c:	4632      	mov	r2, r6
 801362e:	463b      	mov	r3, r7
 8013630:	4628      	mov	r0, r5
 8013632:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013636:	f000 b817 	b.w	8013668 <_write_r>

0801363a <__sseek>:
 801363a:	b510      	push	{r4, lr}
 801363c:	460c      	mov	r4, r1
 801363e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013642:	f000 f855 	bl	80136f0 <_lseek_r>
 8013646:	1c43      	adds	r3, r0, #1
 8013648:	89a3      	ldrh	r3, [r4, #12]
 801364a:	bf15      	itete	ne
 801364c:	6560      	strne	r0, [r4, #84]	; 0x54
 801364e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8013652:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013656:	81a3      	strheq	r3, [r4, #12]
 8013658:	bf18      	it	ne
 801365a:	81a3      	strhne	r3, [r4, #12]
 801365c:	bd10      	pop	{r4, pc}

0801365e <__sclose>:
 801365e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013662:	f000 b813 	b.w	801368c <_close_r>
	...

08013668 <_write_r>:
 8013668:	b538      	push	{r3, r4, r5, lr}
 801366a:	4d07      	ldr	r5, [pc, #28]	; (8013688 <_write_r+0x20>)
 801366c:	4604      	mov	r4, r0
 801366e:	4608      	mov	r0, r1
 8013670:	4611      	mov	r1, r2
 8013672:	2200      	movs	r2, #0
 8013674:	602a      	str	r2, [r5, #0]
 8013676:	461a      	mov	r2, r3
 8013678:	f000 f986 	bl	8013988 <_write>
 801367c:	1c43      	adds	r3, r0, #1
 801367e:	d102      	bne.n	8013686 <_write_r+0x1e>
 8013680:	682b      	ldr	r3, [r5, #0]
 8013682:	b103      	cbz	r3, 8013686 <_write_r+0x1e>
 8013684:	6023      	str	r3, [r4, #0]
 8013686:	bd38      	pop	{r3, r4, r5, pc}
 8013688:	20002d2c 	.word	0x20002d2c

0801368c <_close_r>:
 801368c:	b538      	push	{r3, r4, r5, lr}
 801368e:	4d06      	ldr	r5, [pc, #24]	; (80136a8 <_close_r+0x1c>)
 8013690:	2300      	movs	r3, #0
 8013692:	4604      	mov	r4, r0
 8013694:	4608      	mov	r0, r1
 8013696:	602b      	str	r3, [r5, #0]
 8013698:	f000 f94e 	bl	8013938 <_close>
 801369c:	1c43      	adds	r3, r0, #1
 801369e:	d102      	bne.n	80136a6 <_close_r+0x1a>
 80136a0:	682b      	ldr	r3, [r5, #0]
 80136a2:	b103      	cbz	r3, 80136a6 <_close_r+0x1a>
 80136a4:	6023      	str	r3, [r4, #0]
 80136a6:	bd38      	pop	{r3, r4, r5, pc}
 80136a8:	20002d2c 	.word	0x20002d2c

080136ac <_fstat_r>:
 80136ac:	b538      	push	{r3, r4, r5, lr}
 80136ae:	4d07      	ldr	r5, [pc, #28]	; (80136cc <_fstat_r+0x20>)
 80136b0:	2300      	movs	r3, #0
 80136b2:	4604      	mov	r4, r0
 80136b4:	4608      	mov	r0, r1
 80136b6:	4611      	mov	r1, r2
 80136b8:	602b      	str	r3, [r5, #0]
 80136ba:	f000 f945 	bl	8013948 <_fstat>
 80136be:	1c43      	adds	r3, r0, #1
 80136c0:	d102      	bne.n	80136c8 <_fstat_r+0x1c>
 80136c2:	682b      	ldr	r3, [r5, #0]
 80136c4:	b103      	cbz	r3, 80136c8 <_fstat_r+0x1c>
 80136c6:	6023      	str	r3, [r4, #0]
 80136c8:	bd38      	pop	{r3, r4, r5, pc}
 80136ca:	bf00      	nop
 80136cc:	20002d2c 	.word	0x20002d2c

080136d0 <_isatty_r>:
 80136d0:	b538      	push	{r3, r4, r5, lr}
 80136d2:	4d06      	ldr	r5, [pc, #24]	; (80136ec <_isatty_r+0x1c>)
 80136d4:	2300      	movs	r3, #0
 80136d6:	4604      	mov	r4, r0
 80136d8:	4608      	mov	r0, r1
 80136da:	602b      	str	r3, [r5, #0]
 80136dc:	f000 f93c 	bl	8013958 <_isatty>
 80136e0:	1c43      	adds	r3, r0, #1
 80136e2:	d102      	bne.n	80136ea <_isatty_r+0x1a>
 80136e4:	682b      	ldr	r3, [r5, #0]
 80136e6:	b103      	cbz	r3, 80136ea <_isatty_r+0x1a>
 80136e8:	6023      	str	r3, [r4, #0]
 80136ea:	bd38      	pop	{r3, r4, r5, pc}
 80136ec:	20002d2c 	.word	0x20002d2c

080136f0 <_lseek_r>:
 80136f0:	b538      	push	{r3, r4, r5, lr}
 80136f2:	4d07      	ldr	r5, [pc, #28]	; (8013710 <_lseek_r+0x20>)
 80136f4:	4604      	mov	r4, r0
 80136f6:	4608      	mov	r0, r1
 80136f8:	4611      	mov	r1, r2
 80136fa:	2200      	movs	r2, #0
 80136fc:	602a      	str	r2, [r5, #0]
 80136fe:	461a      	mov	r2, r3
 8013700:	f000 f932 	bl	8013968 <_lseek>
 8013704:	1c43      	adds	r3, r0, #1
 8013706:	d102      	bne.n	801370e <_lseek_r+0x1e>
 8013708:	682b      	ldr	r3, [r5, #0]
 801370a:	b103      	cbz	r3, 801370e <_lseek_r+0x1e>
 801370c:	6023      	str	r3, [r4, #0]
 801370e:	bd38      	pop	{r3, r4, r5, pc}
 8013710:	20002d2c 	.word	0x20002d2c

08013714 <memmove>:
 8013714:	4288      	cmp	r0, r1
 8013716:	b510      	push	{r4, lr}
 8013718:	eb01 0402 	add.w	r4, r1, r2
 801371c:	d902      	bls.n	8013724 <memmove+0x10>
 801371e:	4284      	cmp	r4, r0
 8013720:	4623      	mov	r3, r4
 8013722:	d807      	bhi.n	8013734 <memmove+0x20>
 8013724:	1e43      	subs	r3, r0, #1
 8013726:	42a1      	cmp	r1, r4
 8013728:	d008      	beq.n	801373c <memmove+0x28>
 801372a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801372e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013732:	e7f8      	b.n	8013726 <memmove+0x12>
 8013734:	4402      	add	r2, r0
 8013736:	4601      	mov	r1, r0
 8013738:	428a      	cmp	r2, r1
 801373a:	d100      	bne.n	801373e <memmove+0x2a>
 801373c:	bd10      	pop	{r4, pc}
 801373e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013742:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013746:	e7f7      	b.n	8013738 <memmove+0x24>

08013748 <_malloc_usable_size_r>:
 8013748:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801374c:	1f18      	subs	r0, r3, #4
 801374e:	2b00      	cmp	r3, #0
 8013750:	bfbc      	itt	lt
 8013752:	580b      	ldrlt	r3, [r1, r0]
 8013754:	18c0      	addlt	r0, r0, r3
 8013756:	4770      	bx	lr

08013758 <_read_r>:
 8013758:	b538      	push	{r3, r4, r5, lr}
 801375a:	4d07      	ldr	r5, [pc, #28]	; (8013778 <_read_r+0x20>)
 801375c:	4604      	mov	r4, r0
 801375e:	4608      	mov	r0, r1
 8013760:	4611      	mov	r1, r2
 8013762:	2200      	movs	r2, #0
 8013764:	602a      	str	r2, [r5, #0]
 8013766:	461a      	mov	r2, r3
 8013768:	f000 f906 	bl	8013978 <_read>
 801376c:	1c43      	adds	r3, r0, #1
 801376e:	d102      	bne.n	8013776 <_read_r+0x1e>
 8013770:	682b      	ldr	r3, [r5, #0]
 8013772:	b103      	cbz	r3, 8013776 <_read_r+0x1e>
 8013774:	6023      	str	r3, [r4, #0]
 8013776:	bd38      	pop	{r3, r4, r5, pc}
 8013778:	20002d2c 	.word	0x20002d2c

0801377c <sqrt>:
 801377c:	b538      	push	{r3, r4, r5, lr}
 801377e:	ed2d 8b02 	vpush	{d8}
 8013782:	ec55 4b10 	vmov	r4, r5, d0
 8013786:	f000 f825 	bl	80137d4 <__ieee754_sqrt>
 801378a:	4622      	mov	r2, r4
 801378c:	462b      	mov	r3, r5
 801378e:	4620      	mov	r0, r4
 8013790:	4629      	mov	r1, r5
 8013792:	eeb0 8a40 	vmov.f32	s16, s0
 8013796:	eef0 8a60 	vmov.f32	s17, s1
 801379a:	f7ed f9df 	bl	8000b5c <__aeabi_dcmpun>
 801379e:	b990      	cbnz	r0, 80137c6 <sqrt+0x4a>
 80137a0:	2200      	movs	r2, #0
 80137a2:	2300      	movs	r3, #0
 80137a4:	4620      	mov	r0, r4
 80137a6:	4629      	mov	r1, r5
 80137a8:	f7ed f9b0 	bl	8000b0c <__aeabi_dcmplt>
 80137ac:	b158      	cbz	r0, 80137c6 <sqrt+0x4a>
 80137ae:	f7fe fdc1 	bl	8012334 <__errno>
 80137b2:	2321      	movs	r3, #33	; 0x21
 80137b4:	6003      	str	r3, [r0, #0]
 80137b6:	2200      	movs	r2, #0
 80137b8:	2300      	movs	r3, #0
 80137ba:	4610      	mov	r0, r2
 80137bc:	4619      	mov	r1, r3
 80137be:	f7ed f85d 	bl	800087c <__aeabi_ddiv>
 80137c2:	ec41 0b18 	vmov	d8, r0, r1
 80137c6:	eeb0 0a48 	vmov.f32	s0, s16
 80137ca:	eef0 0a68 	vmov.f32	s1, s17
 80137ce:	ecbd 8b02 	vpop	{d8}
 80137d2:	bd38      	pop	{r3, r4, r5, pc}

080137d4 <__ieee754_sqrt>:
 80137d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80137d8:	ec55 4b10 	vmov	r4, r5, d0
 80137dc:	4e55      	ldr	r6, [pc, #340]	; (8013934 <__ieee754_sqrt+0x160>)
 80137de:	43ae      	bics	r6, r5
 80137e0:	ee10 0a10 	vmov	r0, s0
 80137e4:	ee10 3a10 	vmov	r3, s0
 80137e8:	462a      	mov	r2, r5
 80137ea:	4629      	mov	r1, r5
 80137ec:	d110      	bne.n	8013810 <__ieee754_sqrt+0x3c>
 80137ee:	ee10 2a10 	vmov	r2, s0
 80137f2:	462b      	mov	r3, r5
 80137f4:	f7ec ff18 	bl	8000628 <__aeabi_dmul>
 80137f8:	4602      	mov	r2, r0
 80137fa:	460b      	mov	r3, r1
 80137fc:	4620      	mov	r0, r4
 80137fe:	4629      	mov	r1, r5
 8013800:	f7ec fd5c 	bl	80002bc <__adddf3>
 8013804:	4604      	mov	r4, r0
 8013806:	460d      	mov	r5, r1
 8013808:	ec45 4b10 	vmov	d0, r4, r5
 801380c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013810:	2d00      	cmp	r5, #0
 8013812:	dc10      	bgt.n	8013836 <__ieee754_sqrt+0x62>
 8013814:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8013818:	4330      	orrs	r0, r6
 801381a:	d0f5      	beq.n	8013808 <__ieee754_sqrt+0x34>
 801381c:	b15d      	cbz	r5, 8013836 <__ieee754_sqrt+0x62>
 801381e:	ee10 2a10 	vmov	r2, s0
 8013822:	462b      	mov	r3, r5
 8013824:	ee10 0a10 	vmov	r0, s0
 8013828:	f7ec fd46 	bl	80002b8 <__aeabi_dsub>
 801382c:	4602      	mov	r2, r0
 801382e:	460b      	mov	r3, r1
 8013830:	f7ed f824 	bl	800087c <__aeabi_ddiv>
 8013834:	e7e6      	b.n	8013804 <__ieee754_sqrt+0x30>
 8013836:	1512      	asrs	r2, r2, #20
 8013838:	d074      	beq.n	8013924 <__ieee754_sqrt+0x150>
 801383a:	07d4      	lsls	r4, r2, #31
 801383c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8013840:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8013844:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8013848:	bf5e      	ittt	pl
 801384a:	0fda      	lsrpl	r2, r3, #31
 801384c:	005b      	lslpl	r3, r3, #1
 801384e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8013852:	2400      	movs	r4, #0
 8013854:	0fda      	lsrs	r2, r3, #31
 8013856:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 801385a:	107f      	asrs	r7, r7, #1
 801385c:	005b      	lsls	r3, r3, #1
 801385e:	2516      	movs	r5, #22
 8013860:	4620      	mov	r0, r4
 8013862:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8013866:	1886      	adds	r6, r0, r2
 8013868:	428e      	cmp	r6, r1
 801386a:	bfde      	ittt	le
 801386c:	1b89      	suble	r1, r1, r6
 801386e:	18b0      	addle	r0, r6, r2
 8013870:	18a4      	addle	r4, r4, r2
 8013872:	0049      	lsls	r1, r1, #1
 8013874:	3d01      	subs	r5, #1
 8013876:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 801387a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 801387e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8013882:	d1f0      	bne.n	8013866 <__ieee754_sqrt+0x92>
 8013884:	462a      	mov	r2, r5
 8013886:	f04f 0e20 	mov.w	lr, #32
 801388a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 801388e:	4281      	cmp	r1, r0
 8013890:	eb06 0c05 	add.w	ip, r6, r5
 8013894:	dc02      	bgt.n	801389c <__ieee754_sqrt+0xc8>
 8013896:	d113      	bne.n	80138c0 <__ieee754_sqrt+0xec>
 8013898:	459c      	cmp	ip, r3
 801389a:	d811      	bhi.n	80138c0 <__ieee754_sqrt+0xec>
 801389c:	f1bc 0f00 	cmp.w	ip, #0
 80138a0:	eb0c 0506 	add.w	r5, ip, r6
 80138a4:	da43      	bge.n	801392e <__ieee754_sqrt+0x15a>
 80138a6:	2d00      	cmp	r5, #0
 80138a8:	db41      	blt.n	801392e <__ieee754_sqrt+0x15a>
 80138aa:	f100 0801 	add.w	r8, r0, #1
 80138ae:	1a09      	subs	r1, r1, r0
 80138b0:	459c      	cmp	ip, r3
 80138b2:	bf88      	it	hi
 80138b4:	f101 31ff 	addhi.w	r1, r1, #4294967295
 80138b8:	eba3 030c 	sub.w	r3, r3, ip
 80138bc:	4432      	add	r2, r6
 80138be:	4640      	mov	r0, r8
 80138c0:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80138c4:	f1be 0e01 	subs.w	lr, lr, #1
 80138c8:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 80138cc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80138d0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80138d4:	d1db      	bne.n	801388e <__ieee754_sqrt+0xba>
 80138d6:	430b      	orrs	r3, r1
 80138d8:	d006      	beq.n	80138e8 <__ieee754_sqrt+0x114>
 80138da:	1c50      	adds	r0, r2, #1
 80138dc:	bf13      	iteet	ne
 80138de:	3201      	addne	r2, #1
 80138e0:	3401      	addeq	r4, #1
 80138e2:	4672      	moveq	r2, lr
 80138e4:	f022 0201 	bicne.w	r2, r2, #1
 80138e8:	1063      	asrs	r3, r4, #1
 80138ea:	0852      	lsrs	r2, r2, #1
 80138ec:	07e1      	lsls	r1, r4, #31
 80138ee:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80138f2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80138f6:	bf48      	it	mi
 80138f8:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80138fc:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8013900:	4614      	mov	r4, r2
 8013902:	e781      	b.n	8013808 <__ieee754_sqrt+0x34>
 8013904:	0ad9      	lsrs	r1, r3, #11
 8013906:	3815      	subs	r0, #21
 8013908:	055b      	lsls	r3, r3, #21
 801390a:	2900      	cmp	r1, #0
 801390c:	d0fa      	beq.n	8013904 <__ieee754_sqrt+0x130>
 801390e:	02cd      	lsls	r5, r1, #11
 8013910:	d50a      	bpl.n	8013928 <__ieee754_sqrt+0x154>
 8013912:	f1c2 0420 	rsb	r4, r2, #32
 8013916:	fa23 f404 	lsr.w	r4, r3, r4
 801391a:	1e55      	subs	r5, r2, #1
 801391c:	4093      	lsls	r3, r2
 801391e:	4321      	orrs	r1, r4
 8013920:	1b42      	subs	r2, r0, r5
 8013922:	e78a      	b.n	801383a <__ieee754_sqrt+0x66>
 8013924:	4610      	mov	r0, r2
 8013926:	e7f0      	b.n	801390a <__ieee754_sqrt+0x136>
 8013928:	0049      	lsls	r1, r1, #1
 801392a:	3201      	adds	r2, #1
 801392c:	e7ef      	b.n	801390e <__ieee754_sqrt+0x13a>
 801392e:	4680      	mov	r8, r0
 8013930:	e7bd      	b.n	80138ae <__ieee754_sqrt+0xda>
 8013932:	bf00      	nop
 8013934:	7ff00000 	.word	0x7ff00000

08013938 <_close>:
 8013938:	4b02      	ldr	r3, [pc, #8]	; (8013944 <_close+0xc>)
 801393a:	2258      	movs	r2, #88	; 0x58
 801393c:	601a      	str	r2, [r3, #0]
 801393e:	f04f 30ff 	mov.w	r0, #4294967295
 8013942:	4770      	bx	lr
 8013944:	20002d2c 	.word	0x20002d2c

08013948 <_fstat>:
 8013948:	4b02      	ldr	r3, [pc, #8]	; (8013954 <_fstat+0xc>)
 801394a:	2258      	movs	r2, #88	; 0x58
 801394c:	601a      	str	r2, [r3, #0]
 801394e:	f04f 30ff 	mov.w	r0, #4294967295
 8013952:	4770      	bx	lr
 8013954:	20002d2c 	.word	0x20002d2c

08013958 <_isatty>:
 8013958:	4b02      	ldr	r3, [pc, #8]	; (8013964 <_isatty+0xc>)
 801395a:	2258      	movs	r2, #88	; 0x58
 801395c:	601a      	str	r2, [r3, #0]
 801395e:	2000      	movs	r0, #0
 8013960:	4770      	bx	lr
 8013962:	bf00      	nop
 8013964:	20002d2c 	.word	0x20002d2c

08013968 <_lseek>:
 8013968:	4b02      	ldr	r3, [pc, #8]	; (8013974 <_lseek+0xc>)
 801396a:	2258      	movs	r2, #88	; 0x58
 801396c:	601a      	str	r2, [r3, #0]
 801396e:	f04f 30ff 	mov.w	r0, #4294967295
 8013972:	4770      	bx	lr
 8013974:	20002d2c 	.word	0x20002d2c

08013978 <_read>:
 8013978:	4b02      	ldr	r3, [pc, #8]	; (8013984 <_read+0xc>)
 801397a:	2258      	movs	r2, #88	; 0x58
 801397c:	601a      	str	r2, [r3, #0]
 801397e:	f04f 30ff 	mov.w	r0, #4294967295
 8013982:	4770      	bx	lr
 8013984:	20002d2c 	.word	0x20002d2c

08013988 <_write>:
 8013988:	4b02      	ldr	r3, [pc, #8]	; (8013994 <_write+0xc>)
 801398a:	2258      	movs	r2, #88	; 0x58
 801398c:	601a      	str	r2, [r3, #0]
 801398e:	f04f 30ff 	mov.w	r0, #4294967295
 8013992:	4770      	bx	lr
 8013994:	20002d2c 	.word	0x20002d2c

08013998 <_init>:
 8013998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801399a:	bf00      	nop
 801399c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801399e:	bc08      	pop	{r3}
 80139a0:	469e      	mov	lr, r3
 80139a2:	4770      	bx	lr

080139a4 <_fini>:
 80139a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80139a6:	bf00      	nop
 80139a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80139aa:	bc08      	pop	{r3}
 80139ac:	469e      	mov	lr, r3
 80139ae:	4770      	bx	lr
