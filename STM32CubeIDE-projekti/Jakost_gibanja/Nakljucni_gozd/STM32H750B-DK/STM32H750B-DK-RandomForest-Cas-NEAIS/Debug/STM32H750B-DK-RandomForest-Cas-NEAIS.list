
STM32H750B-DK-RandomForest-Cas-NEAIS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cf58  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e98  0800d1f8  0800d1f8  0001d1f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800e090  0800e090  0001e090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800e094  0800e094  0001e094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000045c  24000000  0800e098  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001e4c  2400045c  0800e4f4  0002045c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  240022a8  0800e4f4  000222a8  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  0002045c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001aa35  00000000  00000000  0002048a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000037d4  00000000  00000000  0003aebf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000014c0  00000000  00000000  0003e698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00001338  00000000  00000000  0003fb58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003c155  00000000  00000000  00040e90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001ea7d  00000000  00000000  0007cfe5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00175b58  00000000  00000000  0009ba62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      000000c9  00000000  00000000  002115ba  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00005d44  00000000  00000000  00211684  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400045c 	.word	0x2400045c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800d1e0 	.word	0x0800d1e0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000460 	.word	0x24000460
 80002dc:	0800d1e0 	.word	0x0800d1e0

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	; 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_d2f>:
 8000708:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800070c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000710:	bf24      	itt	cs
 8000712:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000716:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800071a:	d90d      	bls.n	8000738 <__aeabi_d2f+0x30>
 800071c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000720:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000724:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000728:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800072c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000730:	bf08      	it	eq
 8000732:	f020 0001 	biceq.w	r0, r0, #1
 8000736:	4770      	bx	lr
 8000738:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800073c:	d121      	bne.n	8000782 <__aeabi_d2f+0x7a>
 800073e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000742:	bfbc      	itt	lt
 8000744:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000748:	4770      	bxlt	lr
 800074a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800074e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000752:	f1c2 0218 	rsb	r2, r2, #24
 8000756:	f1c2 0c20 	rsb	ip, r2, #32
 800075a:	fa10 f30c 	lsls.w	r3, r0, ip
 800075e:	fa20 f002 	lsr.w	r0, r0, r2
 8000762:	bf18      	it	ne
 8000764:	f040 0001 	orrne.w	r0, r0, #1
 8000768:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800076c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000770:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000774:	ea40 000c 	orr.w	r0, r0, ip
 8000778:	fa23 f302 	lsr.w	r3, r3, r2
 800077c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000780:	e7cc      	b.n	800071c <__aeabi_d2f+0x14>
 8000782:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000786:	d107      	bne.n	8000798 <__aeabi_d2f+0x90>
 8000788:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800078c:	bf1e      	ittt	ne
 800078e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000792:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000796:	4770      	bxne	lr
 8000798:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800079c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80007a0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop

080007a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007ae:	f001 f801 	bl	80017b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007b2:	f000 f83f 	bl	8000834 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007b6:	f000 f947 	bl	8000a48 <MX_GPIO_Init>
  MX_ADC3_Init();
 80007ba:	f000 f8bb 	bl	8000934 <MX_ADC3_Init>
  MX_TIM16_Init();
 80007be:	f000 f91d 	bl	80009fc <MX_TIM16_Init>
  MX_USB_DEVICE_Init();
 80007c2:	f00a ff83 	bl	800b6cc <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_Base_Start(&htim16);
 80007c6:	4816      	ldr	r0, [pc, #88]	; (8000820 <main+0x78>)
 80007c8:	f007 fb58 	bl	8007e7c <HAL_TIM_Base_Start>

    enum neai_state error_code = neai_classification_init(knowledge);
 80007cc:	4815      	ldr	r0, [pc, #84]	; (8000824 <main+0x7c>)
 80007ce:	f00b fcbd 	bl	800c14c <neai_classification_init>
 80007d2:	4603      	mov	r3, r0
 80007d4:	71fb      	strb	r3, [r7, #7]
      if(error_code != NEAI_OK) {
 80007d6:	79fb      	ldrb	r3, [r7, #7]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d010      	beq.n	80007fe <main+0x56>
    	  snprintf(SendBuffer,BUFSIZE,"Napaka pri inicializaciji znanja. \r\n");
 80007dc:	4a12      	ldr	r2, [pc, #72]	; (8000828 <main+0x80>)
 80007de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007e2:	4812      	ldr	r0, [pc, #72]	; (800082c <main+0x84>)
 80007e4:	f00b ff5a 	bl	800c69c <sniprintf>
    	  CDC_Transmit_FS(SendBuffer,strlen(SendBuffer));
 80007e8:	4810      	ldr	r0, [pc, #64]	; (800082c <main+0x84>)
 80007ea:	f7ff fd79 	bl	80002e0 <strlen>
 80007ee:	4603      	mov	r3, r0
 80007f0:	4619      	mov	r1, r3
 80007f2:	480e      	ldr	r0, [pc, #56]	; (800082c <main+0x84>)
 80007f4:	f00b f82a 	bl	800b84c <CDC_Transmit_FS>

    	  Error_Handler();
 80007f8:	f000 fdde 	bl	80013b8 <Error_Handler>
 80007fc:	e00d      	b.n	800081a <main+0x72>
      }
      else {
    	  snprintf(SendBuffer,BUFSIZE,"Opravljena inicializacija znanja. \r\n");
 80007fe:	4a0c      	ldr	r2, [pc, #48]	; (8000830 <main+0x88>)
 8000800:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000804:	4809      	ldr	r0, [pc, #36]	; (800082c <main+0x84>)
 8000806:	f00b ff49 	bl	800c69c <sniprintf>
    	  CDC_Transmit_FS(SendBuffer,strlen(SendBuffer));
 800080a:	4808      	ldr	r0, [pc, #32]	; (800082c <main+0x84>)
 800080c:	f7ff fd68 	bl	80002e0 <strlen>
 8000810:	4603      	mov	r3, r0
 8000812:	4619      	mov	r1, r3
 8000814:	4805      	ldr	r0, [pc, #20]	; (800082c <main+0x84>)
 8000816:	f00b f819 	bl	800b84c <CDC_Transmit_FS>
      }

  while (1)
  {
	  Inference();
 800081a:	f000 fd2b 	bl	8001274 <Inference>
 800081e:	e7fc      	b.n	800081a <main+0x72>
 8000820:	240005fc 	.word	0x240005fc
 8000824:	0800d308 	.word	0x0800d308
 8000828:	0800d22c 	.word	0x0800d22c
 800082c:	24000488 	.word	0x24000488
 8000830:	0800d254 	.word	0x0800d254

08000834 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b09c      	sub	sp, #112	; 0x70
 8000838:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800083a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800083e:	224c      	movs	r2, #76	; 0x4c
 8000840:	2100      	movs	r1, #0
 8000842:	4618      	mov	r0, r3
 8000844:	f00b ff22 	bl	800c68c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000848:	1d3b      	adds	r3, r7, #4
 800084a:	2220      	movs	r2, #32
 800084c:	2100      	movs	r1, #0
 800084e:	4618      	mov	r0, r3
 8000850:	f00b ff1c 	bl	800c68c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000854:	2002      	movs	r0, #2
 8000856:	f003 fda1 	bl	800439c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800085a:	2300      	movs	r3, #0
 800085c:	603b      	str	r3, [r7, #0]
 800085e:	4b33      	ldr	r3, [pc, #204]	; (800092c <SystemClock_Config+0xf8>)
 8000860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000862:	4a32      	ldr	r2, [pc, #200]	; (800092c <SystemClock_Config+0xf8>)
 8000864:	f023 0301 	bic.w	r3, r3, #1
 8000868:	62d3      	str	r3, [r2, #44]	; 0x2c
 800086a:	4b30      	ldr	r3, [pc, #192]	; (800092c <SystemClock_Config+0xf8>)
 800086c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800086e:	f003 0301 	and.w	r3, r3, #1
 8000872:	603b      	str	r3, [r7, #0]
 8000874:	4b2e      	ldr	r3, [pc, #184]	; (8000930 <SystemClock_Config+0xfc>)
 8000876:	699b      	ldr	r3, [r3, #24]
 8000878:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800087c:	4a2c      	ldr	r2, [pc, #176]	; (8000930 <SystemClock_Config+0xfc>)
 800087e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000882:	6193      	str	r3, [r2, #24]
 8000884:	4b2a      	ldr	r3, [pc, #168]	; (8000930 <SystemClock_Config+0xfc>)
 8000886:	699b      	ldr	r3, [r3, #24]
 8000888:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800088c:	603b      	str	r3, [r7, #0]
 800088e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000890:	bf00      	nop
 8000892:	4b27      	ldr	r3, [pc, #156]	; (8000930 <SystemClock_Config+0xfc>)
 8000894:	699b      	ldr	r3, [r3, #24]
 8000896:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800089a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800089e:	d1f8      	bne.n	8000892 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80008a0:	2303      	movs	r3, #3
 80008a2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80008a4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80008a8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80008aa:	2301      	movs	r3, #1
 80008ac:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008ae:	2340      	movs	r3, #64	; 0x40
 80008b0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008b2:	2302      	movs	r3, #2
 80008b4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008b6:	2302      	movs	r3, #2
 80008b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 22;
 80008ba:	2316      	movs	r3, #22
 80008bc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 169;
 80008be:	23a9      	movs	r3, #169	; 0xa9
 80008c0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80008c2:	2302      	movs	r3, #2
 80008c4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008c6:	2304      	movs	r3, #4
 80008c8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008ca:	2302      	movs	r3, #2
 80008cc:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_0;
 80008ce:	2300      	movs	r3, #0
 80008d0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80008d2:	2300      	movs	r3, #0
 80008d4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80008d6:	2300      	movs	r3, #0
 80008d8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008de:	4618      	mov	r0, r3
 80008e0:	f003 fda6 	bl	8004430 <HAL_RCC_OscConfig>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <SystemClock_Config+0xba>
  {
    Error_Handler();
 80008ea:	f000 fd65 	bl	80013b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ee:	233f      	movs	r3, #63	; 0x3f
 80008f0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80008f2:	2300      	movs	r3, #0
 80008f4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008f6:	2300      	movs	r3, #0
 80008f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80008fa:	2300      	movs	r3, #0
 80008fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80008fe:	2300      	movs	r3, #0
 8000900:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000902:	2300      	movs	r3, #0
 8000904:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000906:	2300      	movs	r3, #0
 8000908:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800090a:	2300      	movs	r3, #0
 800090c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800090e:	1d3b      	adds	r3, r7, #4
 8000910:	2101      	movs	r1, #1
 8000912:	4618      	mov	r0, r3
 8000914:	f004 f9e6 	bl	8004ce4 <HAL_RCC_ClockConfig>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <SystemClock_Config+0xee>
  {
    Error_Handler();
 800091e:	f000 fd4b 	bl	80013b8 <Error_Handler>
  }
}
 8000922:	bf00      	nop
 8000924:	3770      	adds	r7, #112	; 0x70
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	58000400 	.word	0x58000400
 8000930:	58024800 	.word	0x58024800

08000934 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b088      	sub	sp, #32
 8000938:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800093a:	1d3b      	adds	r3, r7, #4
 800093c:	2200      	movs	r2, #0
 800093e:	601a      	str	r2, [r3, #0]
 8000940:	605a      	str	r2, [r3, #4]
 8000942:	609a      	str	r2, [r3, #8]
 8000944:	60da      	str	r2, [r3, #12]
 8000946:	611a      	str	r2, [r3, #16]
 8000948:	615a      	str	r2, [r3, #20]
 800094a:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 800094c:	4b27      	ldr	r3, [pc, #156]	; (80009ec <MX_ADC3_Init+0xb8>)
 800094e:	4a28      	ldr	r2, [pc, #160]	; (80009f0 <MX_ADC3_Init+0xbc>)
 8000950:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8000952:	4b26      	ldr	r3, [pc, #152]	; (80009ec <MX_ADC3_Init+0xb8>)
 8000954:	2200      	movs	r2, #0
 8000956:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000958:	4b24      	ldr	r3, [pc, #144]	; (80009ec <MX_ADC3_Init+0xb8>)
 800095a:	2200      	movs	r2, #0
 800095c:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800095e:	4b23      	ldr	r3, [pc, #140]	; (80009ec <MX_ADC3_Init+0xb8>)
 8000960:	2204      	movs	r2, #4
 8000962:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000964:	4b21      	ldr	r3, [pc, #132]	; (80009ec <MX_ADC3_Init+0xb8>)
 8000966:	2200      	movs	r2, #0
 8000968:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800096a:	4b20      	ldr	r3, [pc, #128]	; (80009ec <MX_ADC3_Init+0xb8>)
 800096c:	2200      	movs	r2, #0
 800096e:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 8000970:	4b1e      	ldr	r3, [pc, #120]	; (80009ec <MX_ADC3_Init+0xb8>)
 8000972:	2201      	movs	r2, #1
 8000974:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000976:	4b1d      	ldr	r3, [pc, #116]	; (80009ec <MX_ADC3_Init+0xb8>)
 8000978:	2200      	movs	r2, #0
 800097a:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800097c:	4b1b      	ldr	r3, [pc, #108]	; (80009ec <MX_ADC3_Init+0xb8>)
 800097e:	2200      	movs	r2, #0
 8000980:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000982:	4b1a      	ldr	r3, [pc, #104]	; (80009ec <MX_ADC3_Init+0xb8>)
 8000984:	2200      	movs	r2, #0
 8000986:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000988:	4b18      	ldr	r3, [pc, #96]	; (80009ec <MX_ADC3_Init+0xb8>)
 800098a:	2200      	movs	r2, #0
 800098c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800098e:	4b17      	ldr	r3, [pc, #92]	; (80009ec <MX_ADC3_Init+0xb8>)
 8000990:	2200      	movs	r2, #0
 8000992:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000994:	4b15      	ldr	r3, [pc, #84]	; (80009ec <MX_ADC3_Init+0xb8>)
 8000996:	2200      	movs	r2, #0
 8000998:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 800099a:	4b14      	ldr	r3, [pc, #80]	; (80009ec <MX_ADC3_Init+0xb8>)
 800099c:	2200      	movs	r2, #0
 800099e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80009a2:	4812      	ldr	r0, [pc, #72]	; (80009ec <MX_ADC3_Init+0xb8>)
 80009a4:	f001 f96a 	bl	8001c7c <HAL_ADC_Init>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <MX_ADC3_Init+0x7e>
  {
    Error_Handler();
 80009ae:	f000 fd03 	bl	80013b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80009b2:	4b10      	ldr	r3, [pc, #64]	; (80009f4 <MX_ADC3_Init+0xc0>)
 80009b4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009b6:	2306      	movs	r3, #6
 80009b8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80009ba:	2300      	movs	r3, #0
 80009bc:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 80009be:	4b0e      	ldr	r3, [pc, #56]	; (80009f8 <MX_ADC3_Init+0xc4>)
 80009c0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80009c2:	2304      	movs	r3, #4
 80009c4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80009c6:	2300      	movs	r3, #0
 80009c8:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80009ca:	2300      	movs	r3, #0
 80009cc:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80009ce:	1d3b      	adds	r3, r7, #4
 80009d0:	4619      	mov	r1, r3
 80009d2:	4806      	ldr	r0, [pc, #24]	; (80009ec <MX_ADC3_Init+0xb8>)
 80009d4:	f001 faf4 	bl	8001fc0 <HAL_ADC_ConfigChannel>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <MX_ADC3_Init+0xae>
  {
    Error_Handler();
 80009de:	f000 fceb 	bl	80013b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80009e2:	bf00      	nop
 80009e4:	3720      	adds	r7, #32
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	24000598 	.word	0x24000598
 80009f0:	58026000 	.word	0x58026000
 80009f4:	04300002 	.word	0x04300002
 80009f8:	47ff0000 	.word	0x47ff0000

080009fc <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000a00:	4b0f      	ldr	r3, [pc, #60]	; (8000a40 <MX_TIM16_Init+0x44>)
 8000a02:	4a10      	ldr	r2, [pc, #64]	; (8000a44 <MX_TIM16_Init+0x48>)
 8000a04:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 64 - 1;
 8000a06:	4b0e      	ldr	r3, [pc, #56]	; (8000a40 <MX_TIM16_Init+0x44>)
 8000a08:	223f      	movs	r2, #63	; 0x3f
 8000a0a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a0c:	4b0c      	ldr	r3, [pc, #48]	; (8000a40 <MX_TIM16_Init+0x44>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8000a12:	4b0b      	ldr	r3, [pc, #44]	; (8000a40 <MX_TIM16_Init+0x44>)
 8000a14:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a18:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a1a:	4b09      	ldr	r3, [pc, #36]	; (8000a40 <MX_TIM16_Init+0x44>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000a20:	4b07      	ldr	r3, [pc, #28]	; (8000a40 <MX_TIM16_Init+0x44>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a26:	4b06      	ldr	r3, [pc, #24]	; (8000a40 <MX_TIM16_Init+0x44>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000a2c:	4804      	ldr	r0, [pc, #16]	; (8000a40 <MX_TIM16_Init+0x44>)
 8000a2e:	f007 f9cd 	bl	8007dcc <HAL_TIM_Base_Init>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8000a38:	f000 fcbe 	bl	80013b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000a3c:	bf00      	nop
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	240005fc 	.word	0x240005fc
 8000a44:	40014400 	.word	0x40014400

08000a48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b090      	sub	sp, #64	; 0x40
 8000a4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a4e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a52:	2200      	movs	r2, #0
 8000a54:	601a      	str	r2, [r3, #0]
 8000a56:	605a      	str	r2, [r3, #4]
 8000a58:	609a      	str	r2, [r3, #8]
 8000a5a:	60da      	str	r2, [r3, #12]
 8000a5c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000a5e:	4bbd      	ldr	r3, [pc, #756]	; (8000d54 <MX_GPIO_Init+0x30c>)
 8000a60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a64:	4abb      	ldr	r2, [pc, #748]	; (8000d54 <MX_GPIO_Init+0x30c>)
 8000a66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a6a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a6e:	4bb9      	ldr	r3, [pc, #740]	; (8000d54 <MX_GPIO_Init+0x30c>)
 8000a70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a78:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a7c:	4bb5      	ldr	r3, [pc, #724]	; (8000d54 <MX_GPIO_Init+0x30c>)
 8000a7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a82:	4ab4      	ldr	r2, [pc, #720]	; (8000d54 <MX_GPIO_Init+0x30c>)
 8000a84:	f043 0302 	orr.w	r3, r3, #2
 8000a88:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a8c:	4bb1      	ldr	r3, [pc, #708]	; (8000d54 <MX_GPIO_Init+0x30c>)
 8000a8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a92:	f003 0302 	and.w	r3, r3, #2
 8000a96:	627b      	str	r3, [r7, #36]	; 0x24
 8000a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000a9a:	4bae      	ldr	r3, [pc, #696]	; (8000d54 <MX_GPIO_Init+0x30c>)
 8000a9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aa0:	4aac      	ldr	r2, [pc, #688]	; (8000d54 <MX_GPIO_Init+0x30c>)
 8000aa2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000aa6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aaa:	4baa      	ldr	r3, [pc, #680]	; (8000d54 <MX_GPIO_Init+0x30c>)
 8000aac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ab0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ab4:	623b      	str	r3, [r7, #32]
 8000ab6:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ab8:	4ba6      	ldr	r3, [pc, #664]	; (8000d54 <MX_GPIO_Init+0x30c>)
 8000aba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000abe:	4aa5      	ldr	r2, [pc, #660]	; (8000d54 <MX_GPIO_Init+0x30c>)
 8000ac0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ac4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ac8:	4ba2      	ldr	r3, [pc, #648]	; (8000d54 <MX_GPIO_Init+0x30c>)
 8000aca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ace:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ad2:	61fb      	str	r3, [r7, #28]
 8000ad4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ad6:	4b9f      	ldr	r3, [pc, #636]	; (8000d54 <MX_GPIO_Init+0x30c>)
 8000ad8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000adc:	4a9d      	ldr	r2, [pc, #628]	; (8000d54 <MX_GPIO_Init+0x30c>)
 8000ade:	f043 0304 	orr.w	r3, r3, #4
 8000ae2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ae6:	4b9b      	ldr	r3, [pc, #620]	; (8000d54 <MX_GPIO_Init+0x30c>)
 8000ae8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aec:	f003 0304 	and.w	r3, r3, #4
 8000af0:	61bb      	str	r3, [r7, #24]
 8000af2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000af4:	4b97      	ldr	r3, [pc, #604]	; (8000d54 <MX_GPIO_Init+0x30c>)
 8000af6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000afa:	4a96      	ldr	r2, [pc, #600]	; (8000d54 <MX_GPIO_Init+0x30c>)
 8000afc:	f043 0310 	orr.w	r3, r3, #16
 8000b00:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b04:	4b93      	ldr	r3, [pc, #588]	; (8000d54 <MX_GPIO_Init+0x30c>)
 8000b06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b0a:	f003 0310 	and.w	r3, r3, #16
 8000b0e:	617b      	str	r3, [r7, #20]
 8000b10:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000b12:	4b90      	ldr	r3, [pc, #576]	; (8000d54 <MX_GPIO_Init+0x30c>)
 8000b14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b18:	4a8e      	ldr	r2, [pc, #568]	; (8000d54 <MX_GPIO_Init+0x30c>)
 8000b1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b1e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b22:	4b8c      	ldr	r3, [pc, #560]	; (8000d54 <MX_GPIO_Init+0x30c>)
 8000b24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b28:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b2c:	613b      	str	r3, [r7, #16]
 8000b2e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b30:	4b88      	ldr	r3, [pc, #544]	; (8000d54 <MX_GPIO_Init+0x30c>)
 8000b32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b36:	4a87      	ldr	r2, [pc, #540]	; (8000d54 <MX_GPIO_Init+0x30c>)
 8000b38:	f043 0308 	orr.w	r3, r3, #8
 8000b3c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b40:	4b84      	ldr	r3, [pc, #528]	; (8000d54 <MX_GPIO_Init+0x30c>)
 8000b42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b46:	f003 0308 	and.w	r3, r3, #8
 8000b4a:	60fb      	str	r3, [r7, #12]
 8000b4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b4e:	4b81      	ldr	r3, [pc, #516]	; (8000d54 <MX_GPIO_Init+0x30c>)
 8000b50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b54:	4a7f      	ldr	r2, [pc, #508]	; (8000d54 <MX_GPIO_Init+0x30c>)
 8000b56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b5a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b5e:	4b7d      	ldr	r3, [pc, #500]	; (8000d54 <MX_GPIO_Init+0x30c>)
 8000b60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b68:	60bb      	str	r3, [r7, #8]
 8000b6a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b6c:	4b79      	ldr	r3, [pc, #484]	; (8000d54 <MX_GPIO_Init+0x30c>)
 8000b6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b72:	4a78      	ldr	r2, [pc, #480]	; (8000d54 <MX_GPIO_Init+0x30c>)
 8000b74:	f043 0301 	orr.w	r3, r3, #1
 8000b78:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b7c:	4b75      	ldr	r3, [pc, #468]	; (8000d54 <MX_GPIO_Init+0x30c>)
 8000b7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b82:	f003 0301 	and.w	r3, r3, #1
 8000b86:	607b      	str	r3, [r7, #4]
 8000b88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b8a:	4b72      	ldr	r3, [pc, #456]	; (8000d54 <MX_GPIO_Init+0x30c>)
 8000b8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b90:	4a70      	ldr	r2, [pc, #448]	; (8000d54 <MX_GPIO_Init+0x30c>)
 8000b92:	f043 0320 	orr.w	r3, r3, #32
 8000b96:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b9a:	4b6e      	ldr	r3, [pc, #440]	; (8000d54 <MX_GPIO_Init+0x30c>)
 8000b9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ba0:	f003 0320 	and.w	r3, r3, #32
 8000ba4:	603b      	str	r3, [r7, #0]
 8000ba6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000ba8:	2200      	movs	r2, #0
 8000baa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bae:	486a      	ldr	r0, [pc, #424]	; (8000d58 <MX_GPIO_Init+0x310>)
 8000bb0:	f002 f922 	bl	8002df8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	2104      	movs	r1, #4
 8000bb8:	4868      	ldr	r0, [pc, #416]	; (8000d5c <MX_GPIO_Init+0x314>)
 8000bba:	f002 f91d 	bl	8002df8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bc4:	4866      	ldr	r0, [pc, #408]	; (8000d60 <MX_GPIO_Init+0x318>)
 8000bc6:	f002 f917 	bl	8002df8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PI6 PI5 PI4 PI7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_7;
 8000bca:	23f0      	movs	r3, #240	; 0xf0
 8000bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bce:	2302      	movs	r3, #2
 8000bd0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000bda:	230a      	movs	r3, #10
 8000bdc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000bde:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000be2:	4619      	mov	r1, r3
 8000be4:	485c      	ldr	r0, [pc, #368]	; (8000d58 <MX_GPIO_Init+0x310>)
 8000be6:	f001 ff57 	bl	8002a98 <HAL_GPIO_Init>

  /*Configure GPIO pins : FDCAN2_RX_Pin FDCAN2_TX_Pin */
  GPIO_InitStruct.Pin = FDCAN2_RX_Pin|FDCAN2_TX_Pin;
 8000bea:	f242 0320 	movw	r3, #8224	; 0x2020
 8000bee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf0:	2302      	movs	r3, #2
 8000bf2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8000bfc:	2309      	movs	r3, #9
 8000bfe:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c00:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c04:	4619      	mov	r1, r3
 8000c06:	4856      	ldr	r0, [pc, #344]	; (8000d60 <MX_GPIO_Init+0x318>)
 8000c08:	f001 ff46 	bl	8002a98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PK5 PK4 PK6 PK3
                           PK7 PK2 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_3
 8000c0c:	23fc      	movs	r3, #252	; 0xfc
 8000c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_7|GPIO_PIN_2;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c10:	2302      	movs	r3, #2
 8000c12:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c14:	2300      	movs	r3, #0
 8000c16:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000c1c:	230e      	movs	r3, #14
 8000c1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000c20:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c24:	4619      	mov	r1, r3
 8000c26:	484f      	ldr	r0, [pc, #316]	; (8000d64 <MX_GPIO_Init+0x31c>)
 8000c28:	f001 ff36 	bl	8002a98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000c2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c30:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c32:	2302      	movs	r3, #2
 8000c34:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c36:	2300      	movs	r3, #0
 8000c38:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000c3e:	230a      	movs	r3, #10
 8000c40:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c42:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c46:	4619      	mov	r1, r3
 8000c48:	4847      	ldr	r0, [pc, #284]	; (8000d68 <MX_GPIO_Init+0x320>)
 8000c4a:	f001 ff25 	bl	8002a98 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDIO1_D2_Pin SDIO1_D3_Pin SDIO1_CK_Pin SDIO1_D0_Pin
                           SDIO1_D1_Pin SDIO1_D7_Pin SDIO1_D6_Pin */
  GPIO_InitStruct.Pin = SDIO1_D2_Pin|SDIO1_D3_Pin|SDIO1_CK_Pin|SDIO1_D0_Pin
 8000c4e:	f44f 53fe 	mov.w	r3, #8128	; 0x1fc0
 8000c52:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |SDIO1_D1_Pin|SDIO1_D7_Pin|SDIO1_D6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c54:	2302      	movs	r3, #2
 8000c56:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c5c:	2303      	movs	r3, #3
 8000c5e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8000c60:	230c      	movs	r3, #12
 8000c62:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c64:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c68:	4619      	mov	r1, r3
 8000c6a:	4840      	ldr	r0, [pc, #256]	; (8000d6c <MX_GPIO_Init+0x324>)
 8000c6c:	f001 ff14 	bl	8002a98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PI1 PI0 PI9 PI12
                           PI14 PI15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_9|GPIO_PIN_12
 8000c70:	f24d 2303 	movw	r3, #53763	; 0xd203
 8000c74:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c76:	2302      	movs	r3, #2
 8000c78:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000c82:	230e      	movs	r3, #14
 8000c84:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000c86:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	4832      	ldr	r0, [pc, #200]	; (8000d58 <MX_GPIO_Init+0x310>)
 8000c8e:	f001 ff03 	bl	8002a98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE1 PE0 PE10 PE9
                           PE11 PE12 PE15 PE8
                           PE13 PE7 PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 8000c92:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000c96:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_8
                          |GPIO_PIN_13|GPIO_PIN_7|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c98:	2302      	movs	r3, #2
 8000c9a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca0:	2303      	movs	r3, #3
 8000ca2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ca4:	230c      	movs	r3, #12
 8000ca6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ca8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cac:	4619      	mov	r1, r3
 8000cae:	4830      	ldr	r0, [pc, #192]	; (8000d70 <MX_GPIO_Init+0x328>)
 8000cb0:	f001 fef2 	bl	8002a98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000cb4:	2340      	movs	r3, #64	; 0x40
 8000cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb8:	2302      	movs	r3, #2
 8000cba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000cc4:	230a      	movs	r3, #10
 8000cc6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cc8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ccc:	4619      	mov	r1, r3
 8000cce:	4824      	ldr	r0, [pc, #144]	; (8000d60 <MX_GPIO_Init+0x318>)
 8000cd0:	f001 fee2 	bl	8002a98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000cd4:	2310      	movs	r3, #16
 8000cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd8:	2302      	movs	r3, #2
 8000cda:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8000ce4:	2307      	movs	r3, #7
 8000ce6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ce8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cec:	4619      	mov	r1, r3
 8000cee:	481c      	ldr	r0, [pc, #112]	; (8000d60 <MX_GPIO_Init+0x318>)
 8000cf0:	f001 fed2 	bl	8002a98 <HAL_GPIO_Init>

  /*Configure GPIO pins : MII_TX_EN_Pin MII_TXD1_Pin MII_TXD0_Pin */
  GPIO_InitStruct.Pin = MII_TX_EN_Pin|MII_TXD1_Pin|MII_TXD0_Pin;
 8000cf4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d02:	2300      	movs	r3, #0
 8000d04:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d06:	230b      	movs	r3, #11
 8000d08:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d0a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d0e:	4619      	mov	r1, r3
 8000d10:	4815      	ldr	r0, [pc, #84]	; (8000d68 <MX_GPIO_Init+0x320>)
 8000d12:	f001 fec1 	bl	8002a98 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DISP_Pin PJ14 PJ12 PJ13
                           PJ11 PJ10 PJ9 PJ0
                           PJ8 PJ7 PJ6 PJ1
                           PJ5 PJ3 PJ4 */
  GPIO_InitStruct.Pin = LCD_DISP_Pin|GPIO_PIN_14|GPIO_PIN_12|GPIO_PIN_13
 8000d16:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 8000d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_0
                          |GPIO_PIN_8|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_1
                          |GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1c:	2302      	movs	r3, #2
 8000d1e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d20:	2300      	movs	r3, #0
 8000d22:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d24:	2300      	movs	r3, #0
 8000d26:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000d28:	230e      	movs	r3, #14
 8000d2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000d2c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d30:	4619      	mov	r1, r3
 8000d32:	480a      	ldr	r0, [pc, #40]	; (8000d5c <MX_GPIO_Init+0x314>)
 8000d34:	f001 feb0 	bl	8002a98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000d38:	2308      	movs	r3, #8
 8000d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3c:	2302      	movs	r3, #2
 8000d3e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d40:	2300      	movs	r3, #0
 8000d42:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d44:	2300      	movs	r3, #0
 8000d46:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d48:	2305      	movs	r3, #5
 8000d4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d4c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d50:	4619      	mov	r1, r3
 8000d52:	e00f      	b.n	8000d74 <MX_GPIO_Init+0x32c>
 8000d54:	58024400 	.word	0x58024400
 8000d58:	58022000 	.word	0x58022000
 8000d5c:	58022400 	.word	0x58022400
 8000d60:	58020400 	.word	0x58020400
 8000d64:	58022800 	.word	0x58022800
 8000d68:	58021800 	.word	0x58021800
 8000d6c:	58020800 	.word	0x58020800
 8000d70:	58021000 	.word	0x58021000
 8000d74:	48bc      	ldr	r0, [pc, #752]	; (8001068 <MX_GPIO_Init+0x620>)
 8000d76:	f001 fe8f 	bl	8002a98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PI2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000d7a:	2304      	movs	r3, #4
 8000d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7e:	2302      	movs	r3, #2
 8000d80:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d82:	2300      	movs	r3, #0
 8000d84:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d86:	2300      	movs	r3, #0
 8000d88:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d8a:	2305      	movs	r3, #5
 8000d8c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000d8e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d92:	4619      	mov	r1, r3
 8000d94:	48b5      	ldr	r0, [pc, #724]	; (800106c <MX_GPIO_Init+0x624>)
 8000d96:	f001 fe7f 	bl	8002a98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000d9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da0:	2302      	movs	r3, #2
 8000da2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da4:	2300      	movs	r3, #0
 8000da6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da8:	2300      	movs	r3, #0
 8000daa:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8000dac:	2303      	movs	r3, #3
 8000dae:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000db0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000db4:	4619      	mov	r1, r3
 8000db6:	48ae      	ldr	r0, [pc, #696]	; (8001070 <MX_GPIO_Init+0x628>)
 8000db8:	f001 fe6e 	bl	8002a98 <HAL_GPIO_Init>

  /*Configure GPIO pins : FDCAN1_RX_Pin FDCAN1_TX_Pin */
  GPIO_InitStruct.Pin = FDCAN1_RX_Pin|FDCAN1_TX_Pin;
 8000dbc:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc2:	2302      	movs	r3, #2
 8000dc4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000dce:	2309      	movs	r3, #9
 8000dd0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000dd2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	48a5      	ldr	r0, [pc, #660]	; (8001070 <MX_GPIO_Init+0x628>)
 8000dda:	f001 fe5d 	bl	8002a98 <HAL_GPIO_Init>

  /*Configure GPIO pin : MII_TXD3_Pin */
  GPIO_InitStruct.Pin = MII_TXD3_Pin;
 8000dde:	2304      	movs	r3, #4
 8000de0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de2:	2302      	movs	r3, #2
 8000de4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de6:	2300      	movs	r3, #0
 8000de8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dea:	2300      	movs	r3, #0
 8000dec:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000dee:	230b      	movs	r3, #11
 8000df0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(MII_TXD3_GPIO_Port, &GPIO_InitStruct);
 8000df2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000df6:	4619      	mov	r1, r3
 8000df8:	489e      	ldr	r0, [pc, #632]	; (8001074 <MX_GPIO_Init+0x62c>)
 8000dfa:	f001 fe4d 	bl	8002a98 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DISPD7_Pin */
  GPIO_InitStruct.Pin = LCD_DISPD7_Pin;
 8000dfe:	2380      	movs	r3, #128	; 0x80
 8000e00:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e02:	2300      	movs	r3, #0
 8000e04:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e06:	2300      	movs	r3, #0
 8000e08:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_DISPD7_GPIO_Port, &GPIO_InitStruct);
 8000e0a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e0e:	4619      	mov	r1, r3
 8000e10:	4895      	ldr	r0, [pc, #596]	; (8001068 <MX_GPIO_Init+0x620>)
 8000e12:	f001 fe41 	bl	8002a98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE5 PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
 8000e16:	2330      	movs	r3, #48	; 0x30
 8000e18:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1a:	2302      	movs	r3, #2
 8000e1c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e22:	2300      	movs	r3, #0
 8000e24:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI4;
 8000e26:	230a      	movs	r3, #10
 8000e28:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e2a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e2e:	4619      	mov	r1, r3
 8000e30:	4890      	ldr	r0, [pc, #576]	; (8001074 <MX_GPIO_Init+0x62c>)
 8000e32:	f001 fe31 	bl	8002a98 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDIO1_D5_Pin SDIO1_D4_Pin */
  GPIO_InitStruct.Pin = SDIO1_D5_Pin|SDIO1_D4_Pin;
 8000e36:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3c:	2302      	movs	r3, #2
 8000e3e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e40:	2300      	movs	r3, #0
 8000e42:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e44:	2303      	movs	r3, #3
 8000e46:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8000e48:	230c      	movs	r3, #12
 8000e4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e4c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e50:	4619      	mov	r1, r3
 8000e52:	4889      	ldr	r0, [pc, #548]	; (8001078 <MX_GPIO_Init+0x630>)
 8000e54:	f001 fe20 	bl	8002a98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG15 PG8 PG5 PG4
                           PG0 PG1 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 8000e58:	f248 1333 	movw	r3, #33075	; 0x8133
 8000e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5e:	2302      	movs	r3, #2
 8000e60:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e62:	2300      	movs	r3, #0
 8000e64:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e66:	2303      	movs	r3, #3
 8000e68:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e6a:	230c      	movs	r3, #12
 8000e6c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e6e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e72:	4619      	mov	r1, r3
 8000e74:	4881      	ldr	r0, [pc, #516]	; (800107c <MX_GPIO_Init+0x634>)
 8000e76:	f001 fe0f 	bl	8002a98 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDIO1_CMD_Pin */
  GPIO_InitStruct.Pin = SDIO1_CMD_Pin;
 8000e7a:	2304      	movs	r3, #4
 8000e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7e:	2302      	movs	r3, #2
 8000e80:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e82:	2300      	movs	r3, #0
 8000e84:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e86:	2303      	movs	r3, #3
 8000e88:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8000e8a:	230c      	movs	r3, #12
 8000e8c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDIO1_CMD_GPIO_Port, &GPIO_InitStruct);
 8000e8e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e92:	4619      	mov	r1, r3
 8000e94:	4874      	ldr	r0, [pc, #464]	; (8001068 <MX_GPIO_Init+0x620>)
 8000e96:	f001 fdff 	bl	8002a98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD15 PD14
                           PD10 PD9 PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 8000e9a:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000e9e:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea0:	2302      	movs	r3, #2
 8000ea2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ea8:	2303      	movs	r3, #3
 8000eaa:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000eac:	230c      	movs	r3, #12
 8000eae:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000eb0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	486c      	ldr	r0, [pc, #432]	; (8001068 <MX_GPIO_Init+0x620>)
 8000eb8:	f001 fdee 	bl	8002a98 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS2_ID_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS2_ID_Pin;
 8000ebc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_OTG_FS2_ID_GPIO_Port, &GPIO_InitStruct);
 8000eca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ece:	4619      	mov	r1, r3
 8000ed0:	486b      	ldr	r0, [pc, #428]	; (8001080 <MX_GPIO_Init+0x638>)
 8000ed2:	f001 fde1 	bl	8002a98 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ed6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000eda:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000edc:	2300      	movs	r3, #0
 8000ede:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ee4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ee8:	4619      	mov	r1, r3
 8000eea:	4866      	ldr	r0, [pc, #408]	; (8001084 <MX_GPIO_Init+0x63c>)
 8000eec:	f001 fdd4 	bl	8002a98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000ef0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef6:	2302      	movs	r3, #2
 8000ef8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efa:	2300      	movs	r3, #0
 8000efc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efe:	2300      	movs	r3, #0
 8000f00:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000f02:	2301      	movs	r3, #1
 8000f04:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	485c      	ldr	r0, [pc, #368]	; (8001080 <MX_GPIO_Init+0x638>)
 8000f0e:	f001 fdc3 	bl	8002a98 <HAL_GPIO_Init>

  /*Configure GPIO pin : MII_RX_ER_Pin */
  GPIO_InitStruct.Pin = MII_RX_ER_Pin;
 8000f12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f16:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f18:	2302      	movs	r3, #2
 8000f1a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f20:	2300      	movs	r3, #0
 8000f22:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f24:	230b      	movs	r3, #11
 8000f26:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(MII_RX_ER_GPIO_Port, &GPIO_InitStruct);
 8000f28:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	484f      	ldr	r0, [pc, #316]	; (800106c <MX_GPIO_Init+0x624>)
 8000f30:	f001 fdb2 	bl	8002a98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF2 PF1 PF0 PF3
                           PF5 PF4 PF13 PF14
                           PF12 PF15 PF11 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 8000f34:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000f38:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3a:	2302      	movs	r3, #2
 8000f3c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f42:	2303      	movs	r3, #3
 8000f44:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000f46:	230c      	movs	r3, #12
 8000f48:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f4a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f4e:	4619      	mov	r1, r3
 8000f50:	484d      	ldr	r0, [pc, #308]	; (8001088 <MX_GPIO_Init+0x640>)
 8000f52:	f001 fda1 	bl	8002a98 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000f56:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f60:	2300      	movs	r3, #0
 8000f62:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f64:	2300      	movs	r3, #0
 8000f66:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000f68:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	483f      	ldr	r0, [pc, #252]	; (800106c <MX_GPIO_Init+0x624>)
 8000f70:	f001 fd92 	bl	8002a98 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8000f74:	2304      	movs	r3, #4
 8000f76:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f78:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f7c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000f82:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f86:	4619      	mov	r1, r3
 8000f88:	483c      	ldr	r0, [pc, #240]	; (800107c <MX_GPIO_Init+0x634>)
 8000f8a:	f001 fd85 	bl	8002a98 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f92:	2300      	movs	r3, #0
 8000f94:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f96:	2300      	movs	r3, #0
 8000f98:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 8000f9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	483a      	ldr	r0, [pc, #232]	; (800108c <MX_GPIO_Init+0x644>)
 8000fa2:	f001 fd79 	bl	8002a98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF6 PF7 PF10 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
 8000fa6:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8000faa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fac:	2302      	movs	r3, #2
 8000fae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000fb8:	2309      	movs	r3, #9
 8000fba:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000fbc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	4831      	ldr	r0, [pc, #196]	; (8001088 <MX_GPIO_Init+0x640>)
 8000fc4:	f001 fd68 	bl	8002a98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fcc:	2303      	movs	r3, #3
 8000fce:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fd4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fd8:	4619      	mov	r1, r3
 8000fda:	482a      	ldr	r0, [pc, #168]	; (8001084 <MX_GPIO_Init+0x63c>)
 8000fdc:	f001 fd5c 	bl	8002a98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000fe0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fea:	2300      	movs	r3, #0
 8000fec:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000ff2:	230a      	movs	r3, #10
 8000ff4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000ff6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	4822      	ldr	r0, [pc, #136]	; (8001088 <MX_GPIO_Init+0x640>)
 8000ffe:	f001 fd4b 	bl	8002a98 <HAL_GPIO_Init>

  /*Configure GPIO pins : MII_MDC_Pin MII_TXD2_Pin MII_TX_CLK_Pin MII_RXD0_Pin
                           MII_RXD1_Pin */
  GPIO_InitStruct.Pin = MII_MDC_Pin|MII_TXD2_Pin|MII_TX_CLK_Pin|MII_RXD0_Pin
 8001002:	233e      	movs	r3, #62	; 0x3e
 8001004:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |MII_RXD1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001006:	2302      	movs	r3, #2
 8001008:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100a:	2300      	movs	r3, #0
 800100c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800100e:	2300      	movs	r3, #0
 8001010:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001012:	230b      	movs	r3, #11
 8001014:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001016:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800101a:	4619      	mov	r1, r3
 800101c:	4819      	ldr	r0, [pc, #100]	; (8001084 <MX_GPIO_Init+0x63c>)
 800101e:	f001 fd3b 	bl	8002a98 <HAL_GPIO_Init>

  /*Configure GPIO pins : MII_CRS_Pin MII_COL_Pin */
  GPIO_InitStruct.Pin = MII_CRS_Pin|MII_COL_Pin;
 8001022:	230c      	movs	r3, #12
 8001024:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001026:	2302      	movs	r3, #2
 8001028:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102a:	2300      	movs	r3, #0
 800102c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102e:	2300      	movs	r3, #0
 8001030:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001032:	230b      	movs	r3, #11
 8001034:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001036:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800103a:	4619      	mov	r1, r3
 800103c:	480c      	ldr	r0, [pc, #48]	; (8001070 <MX_GPIO_Init+0x628>)
 800103e:	f001 fd2b 	bl	8002a98 <HAL_GPIO_Init>

  /*Configure GPIO pins : MII_MDIO_Pin MII_RX_CLK_Pin MII_RX_DV_Pin */
  GPIO_InitStruct.Pin = MII_MDIO_Pin|MII_RX_CLK_Pin|MII_RX_DV_Pin;
 8001042:	2386      	movs	r3, #134	; 0x86
 8001044:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001046:	2302      	movs	r3, #2
 8001048:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104a:	2300      	movs	r3, #0
 800104c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800104e:	2300      	movs	r3, #0
 8001050:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001052:	230b      	movs	r3, #11
 8001054:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001056:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800105a:	4619      	mov	r1, r3
 800105c:	4808      	ldr	r0, [pc, #32]	; (8001080 <MX_GPIO_Init+0x638>)
 800105e:	f001 fd1b 	bl	8002a98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH5 PH6 PH7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001062:	23e0      	movs	r3, #224	; 0xe0
 8001064:	e014      	b.n	8001090 <MX_GPIO_Init+0x648>
 8001066:	bf00      	nop
 8001068:	58020c00 	.word	0x58020c00
 800106c:	58022000 	.word	0x58022000
 8001070:	58021c00 	.word	0x58021c00
 8001074:	58021000 	.word	0x58021000
 8001078:	58020400 	.word	0x58020400
 800107c:	58021800 	.word	0x58021800
 8001080:	58020000 	.word	0x58020000
 8001084:	58020800 	.word	0x58020800
 8001088:	58021400 	.word	0x58021400
 800108c:	58022800 	.word	0x58022800
 8001090:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001092:	2302      	movs	r3, #2
 8001094:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001096:	2300      	movs	r3, #0
 8001098:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800109a:	2303      	movs	r3, #3
 800109c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800109e:	230c      	movs	r3, #12
 80010a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80010a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010a6:	4619      	mov	r1, r3
 80010a8:	4850      	ldr	r0, [pc, #320]	; (80011ec <MX_GPIO_Init+0x7a4>)
 80010aa:	f001 fcf5 	bl	8002a98 <HAL_GPIO_Init>

  /*Configure GPIO pins : VCP_TX_Pin VCP_RX_Pin */
  GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 80010ae:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80010b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b4:	2302      	movs	r3, #2
 80010b6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b8:	2300      	movs	r3, #0
 80010ba:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010bc:	2300      	movs	r3, #0
 80010be:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80010c0:	2307      	movs	r3, #7
 80010c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010c8:	4619      	mov	r1, r3
 80010ca:	4849      	ldr	r0, [pc, #292]	; (80011f0 <MX_GPIO_Init+0x7a8>)
 80010cc:	f001 fce4 	bl	8002a98 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS2_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS2_OverCurrent_Pin;
 80010d0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80010d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010d6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80010da:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010dc:	2300      	movs	r3, #0
 80010de:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS2_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80010e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010e4:	4619      	mov	r1, r3
 80010e6:	4841      	ldr	r0, [pc, #260]	; (80011ec <MX_GPIO_Init+0x7a4>)
 80010e8:	f001 fcd6 	bl	8002a98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80010ec:	2340      	movs	r3, #64	; 0x40
 80010ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f0:	2302      	movs	r3, #2
 80010f2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f4:	2300      	movs	r3, #0
 80010f6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f8:	2300      	movs	r3, #0
 80010fa:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 80010fc:	2309      	movs	r3, #9
 80010fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001100:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001104:	4619      	mov	r1, r3
 8001106:	483b      	ldr	r0, [pc, #236]	; (80011f4 <MX_GPIO_Init+0x7ac>)
 8001108:	f001 fcc6 	bl	8002a98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800110c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001110:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001112:	2302      	movs	r3, #2
 8001114:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001116:	2300      	movs	r3, #0
 8001118:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111a:	2300      	movs	r3, #0
 800111c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800111e:	230e      	movs	r3, #14
 8001120:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001122:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001126:	4619      	mov	r1, r3
 8001128:	4830      	ldr	r0, [pc, #192]	; (80011ec <MX_GPIO_Init+0x7a4>)
 800112a:	f001 fcb5 	bl	8002a98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 800112e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001132:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001134:	2302      	movs	r3, #2
 8001136:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001138:	2300      	movs	r3, #0
 800113a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800113c:	2300      	movs	r3, #0
 800113e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001140:	2309      	movs	r3, #9
 8001142:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001144:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001148:	4619      	mov	r1, r3
 800114a:	482b      	ldr	r0, [pc, #172]	; (80011f8 <MX_GPIO_Init+0x7b0>)
 800114c:	f001 fca4 	bl	8002a98 <HAL_GPIO_Init>

  /*Configure GPIO pins : MII_RX_D3_Pin MII_RX_D2_Pin */
  GPIO_InitStruct.Pin = MII_RX_D3_Pin|MII_RX_D2_Pin;
 8001150:	2303      	movs	r3, #3
 8001152:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001154:	2302      	movs	r3, #2
 8001156:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001158:	2300      	movs	r3, #0
 800115a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800115c:	2300      	movs	r3, #0
 800115e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001160:	230b      	movs	r3, #11
 8001162:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001164:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001168:	4619      	mov	r1, r3
 800116a:	4821      	ldr	r0, [pc, #132]	; (80011f0 <MX_GPIO_Init+0x7a8>)
 800116c:	f001 fc94 	bl	8002a98 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8001170:	2304      	movs	r3, #4
 8001172:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001174:	2301      	movs	r3, #1
 8001176:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001178:	2300      	movs	r3, #0
 800117a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117c:	2300      	movs	r3, #0
 800117e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8001180:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001184:	4619      	mov	r1, r3
 8001186:	481d      	ldr	r0, [pc, #116]	; (80011fc <MX_GPIO_Init+0x7b4>)
 8001188:	f001 fc86 	bl	8002a98 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin;
 800118c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001190:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001192:	2301      	movs	r3, #1
 8001194:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001196:	2300      	movs	r3, #0
 8001198:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119a:	2300      	movs	r3, #0
 800119c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_RST_GPIO_Port, &GPIO_InitStruct);
 800119e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011a2:	4619      	mov	r1, r3
 80011a4:	4812      	ldr	r0, [pc, #72]	; (80011f0 <MX_GPIO_Init+0x7a8>)
 80011a6:	f001 fc77 	bl	8002a98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80011aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80011ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b0:	2302      	movs	r3, #2
 80011b2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b4:	2300      	movs	r3, #0
 80011b6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b8:	2300      	movs	r3, #0
 80011ba:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80011bc:	2305      	movs	r3, #5
 80011be:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011c4:	4619      	mov	r1, r3
 80011c6:	480a      	ldr	r0, [pc, #40]	; (80011f0 <MX_GPIO_Init+0x7a8>)
 80011c8:	f001 fc66 	bl	8002a98 <HAL_GPIO_Init>

  /*AnalogSwitch Config */
  HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 80011cc:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 80011d0:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 80011d4:	f000 fbb0 	bl	8001938 <HAL_SYSCFG_AnalogSwitchConfig>

  /*AnalogSwitch Config */
  HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 80011d8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80011dc:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 80011e0:	f000 fbaa 	bl	8001938 <HAL_SYSCFG_AnalogSwitchConfig>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011e4:	bf00      	nop
 80011e6:	3740      	adds	r7, #64	; 0x40
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	58021c00 	.word	0x58021c00
 80011f0:	58020400 	.word	0x58020400
 80011f4:	58020000 	.word	0x58020000
 80011f8:	58020c00 	.word	0x58020c00
 80011fc:	58022400 	.word	0x58022400

08001200 <FillBuffer>:

/* USER CODE BEGIN 4 */

void FillBuffer(float* buffer, uint32_t size)
{
 8001200:	b480      	push	{r7}
 8001202:	b085      	sub	sp, #20
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	6039      	str	r1, [r7, #0]
  uint32_t i = 0;
 800120a:	2300      	movs	r3, #0
 800120c:	60fb      	str	r3, [r7, #12]
  uint32_t step = AXIS_NUMBER; //Jakost gibanja
 800120e:	2301      	movs	r3, #1
 8001210:	60bb      	str	r3, [r7, #8]

  if(counterOfTestData == 0) {
 8001212:	4b14      	ldr	r3, [pc, #80]	; (8001264 <FillBuffer+0x64>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d119      	bne.n	800124e <FillBuffer+0x4e>
	  timestamp = htim16.Instance->CNT;
 800121a:	4b13      	ldr	r3, [pc, #76]	; (8001268 <FillBuffer+0x68>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001220:	4a12      	ldr	r2, [pc, #72]	; (800126c <FillBuffer+0x6c>)
 8001222:	6013      	str	r3, [r2, #0]
  }

  while (i < size)
 8001224:	e013      	b.n	800124e <FillBuffer+0x4e>
  {
	  buffer[i] = testData[counterOfTestData]; //Jakost gibanja
 8001226:	4b0f      	ldr	r3, [pc, #60]	; (8001264 <FillBuffer+0x64>)
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	009b      	lsls	r3, r3, #2
 800122e:	6879      	ldr	r1, [r7, #4]
 8001230:	440b      	add	r3, r1
 8001232:	490f      	ldr	r1, [pc, #60]	; (8001270 <FillBuffer+0x70>)
 8001234:	0092      	lsls	r2, r2, #2
 8001236:	440a      	add	r2, r1
 8001238:	6812      	ldr	r2, [r2, #0]
 800123a:	601a      	str	r2, [r3, #0]

	  counterOfTestData++;
 800123c:	4b09      	ldr	r3, [pc, #36]	; (8001264 <FillBuffer+0x64>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	3301      	adds	r3, #1
 8001242:	4a08      	ldr	r2, [pc, #32]	; (8001264 <FillBuffer+0x64>)
 8001244:	6013      	str	r3, [r2, #0]

	  i += step;
 8001246:	68fa      	ldr	r2, [r7, #12]
 8001248:	68bb      	ldr	r3, [r7, #8]
 800124a:	4413      	add	r3, r2
 800124c:	60fb      	str	r3, [r7, #12]
  while (i < size)
 800124e:	68fa      	ldr	r2, [r7, #12]
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	429a      	cmp	r2, r3
 8001254:	d3e7      	bcc.n	8001226 <FillBuffer+0x26>
  }
}
 8001256:	bf00      	nop
 8001258:	bf00      	nop
 800125a:	3714      	adds	r7, #20
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr
 8001264:	24000588 	.word	0x24000588
 8001268:	240005fc 	.word	0x240005fc
 800126c:	24000594 	.word	0x24000594
 8001270:	24000014 	.word	0x24000014

08001274 <Inference>:


void Inference(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b084      	sub	sp, #16
 8001278:	af02      	add	r7, sp, #8
  uint16_t id_class;

  FillBuffer(input_user_buffer,SIGNAL_SIZE);
 800127a:	2101      	movs	r1, #1
 800127c:	483f      	ldr	r0, [pc, #252]	; (800137c <Inference+0x108>)
 800127e:	f7ff ffbf 	bl	8001200 <FillBuffer>
  neai_classification(input_user_buffer,output_class_buffer,&id_class);
 8001282:	1cbb      	adds	r3, r7, #2
 8001284:	461a      	mov	r2, r3
 8001286:	493e      	ldr	r1, [pc, #248]	; (8001380 <Inference+0x10c>)
 8001288:	483c      	ldr	r0, [pc, #240]	; (800137c <Inference+0x108>)
 800128a:	f00b f85b 	bl	800c344 <neai_classification>

  snprintf(SendBuffer,BUFSIZE,"Class: %s [%u%%]\r\n",id2class[id_class],(uint)(output_class_buffer[id_class-1]*100));
 800128e:	887b      	ldrh	r3, [r7, #2]
 8001290:	461a      	mov	r2, r3
 8001292:	4b3c      	ldr	r3, [pc, #240]	; (8001384 <Inference+0x110>)
 8001294:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001298:	887b      	ldrh	r3, [r7, #2]
 800129a:	3b01      	subs	r3, #1
 800129c:	4938      	ldr	r1, [pc, #224]	; (8001380 <Inference+0x10c>)
 800129e:	009b      	lsls	r3, r3, #2
 80012a0:	440b      	add	r3, r1
 80012a2:	edd3 7a00 	vldr	s15, [r3]
 80012a6:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8001388 <Inference+0x114>
 80012aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012b2:	ee17 3a90 	vmov	r3, s15
 80012b6:	9300      	str	r3, [sp, #0]
 80012b8:	4613      	mov	r3, r2
 80012ba:	4a34      	ldr	r2, [pc, #208]	; (800138c <Inference+0x118>)
 80012bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012c0:	4833      	ldr	r0, [pc, #204]	; (8001390 <Inference+0x11c>)
 80012c2:	f00b f9eb 	bl	800c69c <sniprintf>
  CDC_Transmit_FS(SendBuffer,strlen(SendBuffer));
 80012c6:	4832      	ldr	r0, [pc, #200]	; (8001390 <Inference+0x11c>)
 80012c8:	f7ff f80a 	bl	80002e0 <strlen>
 80012cc:	4603      	mov	r3, r0
 80012ce:	4619      	mov	r1, r3
 80012d0:	482f      	ldr	r0, [pc, #188]	; (8001390 <Inference+0x11c>)
 80012d2:	f00a fabb 	bl	800b84c <CDC_Transmit_FS>

  if(counterOfTestData == sizeOfTestData) {
 80012d6:	4b2f      	ldr	r3, [pc, #188]	; (8001394 <Inference+0x120>)
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	4b2f      	ldr	r3, [pc, #188]	; (8001398 <Inference+0x124>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	429a      	cmp	r2, r3
 80012e0:	d147      	bne.n	8001372 <Inference+0xfe>
	  counterOfTestData = 0;
 80012e2:	4b2c      	ldr	r3, [pc, #176]	; (8001394 <Inference+0x120>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]

	  uint32_t duration = htim16.Instance->CNT;
 80012e8:	4b2c      	ldr	r3, [pc, #176]	; (800139c <Inference+0x128>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ee:	607b      	str	r3, [r7, #4]

	  if(duration >= timestamp)
 80012f0:	4b2b      	ldr	r3, [pc, #172]	; (80013a0 <Inference+0x12c>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	687a      	ldr	r2, [r7, #4]
 80012f6:	429a      	cmp	r2, r3
 80012f8:	d305      	bcc.n	8001306 <Inference+0x92>
	  	duration -= timestamp;
 80012fa:	4b29      	ldr	r3, [pc, #164]	; (80013a0 <Inference+0x12c>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	687a      	ldr	r2, [r7, #4]
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	607b      	str	r3, [r7, #4]
 8001304:	e006      	b.n	8001314 <Inference+0xa0>
	  else
	  	duration += (65535 - timestamp) + 1; //+1 because of counting from 0 onwards
 8001306:	4b26      	ldr	r3, [pc, #152]	; (80013a0 <Inference+0x12c>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	687a      	ldr	r2, [r7, #4]
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001312:	607b      	str	r3, [r7, #4]

	  //snprintf(SendBuffer,BUFSIZE,"Trajanje izvajanja: %lu mikrosekund. \r\n", duration);
	  //CDC_Transmit_FS(SendBuffer,strlen(SendBuffer));

	  averageDurationValue += duration;
 8001314:	4b23      	ldr	r3, [pc, #140]	; (80013a4 <Inference+0x130>)
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	4413      	add	r3, r2
 800131c:	4a21      	ldr	r2, [pc, #132]	; (80013a4 <Inference+0x130>)
 800131e:	6013      	str	r3, [r2, #0]
	  countDurations++;
 8001320:	4b21      	ldr	r3, [pc, #132]	; (80013a8 <Inference+0x134>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	3301      	adds	r3, #1
 8001326:	4a20      	ldr	r2, [pc, #128]	; (80013a8 <Inference+0x134>)
 8001328:	6013      	str	r3, [r2, #0]

	  if(countDurations == numberOfDurations) {
 800132a:	4b1f      	ldr	r3, [pc, #124]	; (80013a8 <Inference+0x134>)
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	4b1f      	ldr	r3, [pc, #124]	; (80013ac <Inference+0x138>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	429a      	cmp	r2, r3
 8001334:	d11d      	bne.n	8001372 <Inference+0xfe>
	  	snprintf(SendBuffer,BUFSIZE,"Trajanje izvajanja: [%lu] %lu mikrosekund. \r\n", averageDurationValue, averageDurationValue / 100);
 8001336:	4b1b      	ldr	r3, [pc, #108]	; (80013a4 <Inference+0x130>)
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	4b1a      	ldr	r3, [pc, #104]	; (80013a4 <Inference+0x130>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	491c      	ldr	r1, [pc, #112]	; (80013b0 <Inference+0x13c>)
 8001340:	fba1 1303 	umull	r1, r3, r1, r3
 8001344:	095b      	lsrs	r3, r3, #5
 8001346:	9300      	str	r3, [sp, #0]
 8001348:	4613      	mov	r3, r2
 800134a:	4a1a      	ldr	r2, [pc, #104]	; (80013b4 <Inference+0x140>)
 800134c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001350:	480f      	ldr	r0, [pc, #60]	; (8001390 <Inference+0x11c>)
 8001352:	f00b f9a3 	bl	800c69c <sniprintf>
	  	CDC_Transmit_FS(SendBuffer,strlen(SendBuffer));
 8001356:	480e      	ldr	r0, [pc, #56]	; (8001390 <Inference+0x11c>)
 8001358:	f7fe ffc2 	bl	80002e0 <strlen>
 800135c:	4603      	mov	r3, r0
 800135e:	4619      	mov	r1, r3
 8001360:	480b      	ldr	r0, [pc, #44]	; (8001390 <Inference+0x11c>)
 8001362:	f00a fa73 	bl	800b84c <CDC_Transmit_FS>

	  	countDurations = 0;
 8001366:	4b10      	ldr	r3, [pc, #64]	; (80013a8 <Inference+0x134>)
 8001368:	2200      	movs	r2, #0
 800136a:	601a      	str	r2, [r3, #0]
	  	averageDurationValue = 0;
 800136c:	4b0d      	ldr	r3, [pc, #52]	; (80013a4 <Inference+0x130>)
 800136e:	2200      	movs	r2, #0
 8001370:	601a      	str	r2, [r3, #0]
	  }
  }

}
 8001372:	bf00      	nop
 8001374:	3708      	adds	r7, #8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	24000478 	.word	0x24000478
 8001380:	2400047c 	.word	0x2400047c
 8001384:	24000000 	.word	0x24000000
 8001388:	42c80000 	.word	0x42c80000
 800138c:	0800d27c 	.word	0x0800d27c
 8001390:	24000488 	.word	0x24000488
 8001394:	24000588 	.word	0x24000588
 8001398:	240002f4 	.word	0x240002f4
 800139c:	240005fc 	.word	0x240005fc
 80013a0:	24000594 	.word	0x24000594
 80013a4:	2400058c 	.word	0x2400058c
 80013a8:	24000590 	.word	0x24000590
 80013ac:	24000010 	.word	0x24000010
 80013b0:	51eb851f 	.word	0x51eb851f
 80013b4:	0800d290 	.word	0x0800d290

080013b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013bc:	b672      	cpsid	i
}
 80013be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013c0:	e7fe      	b.n	80013c0 <Error_Handler+0x8>
	...

080013c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ca:	4b0a      	ldr	r3, [pc, #40]	; (80013f4 <HAL_MspInit+0x30>)
 80013cc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80013d0:	4a08      	ldr	r2, [pc, #32]	; (80013f4 <HAL_MspInit+0x30>)
 80013d2:	f043 0302 	orr.w	r3, r3, #2
 80013d6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80013da:	4b06      	ldr	r3, [pc, #24]	; (80013f4 <HAL_MspInit+0x30>)
 80013dc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80013e0:	f003 0302 	and.w	r3, r3, #2
 80013e4:	607b      	str	r3, [r7, #4]
 80013e6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013e8:	bf00      	nop
 80013ea:	370c      	adds	r7, #12
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr
 80013f4:	58024400 	.word	0x58024400

080013f8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b0bc      	sub	sp, #240	; 0xf0
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001400:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	605a      	str	r2, [r3, #4]
 800140a:	609a      	str	r2, [r3, #8]
 800140c:	60da      	str	r2, [r3, #12]
 800140e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001410:	f107 0318 	add.w	r3, r7, #24
 8001414:	22c0      	movs	r2, #192	; 0xc0
 8001416:	2100      	movs	r1, #0
 8001418:	4618      	mov	r0, r3
 800141a:	f00b f937 	bl	800c68c <memset>
  if(hadc->Instance==ADC3)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a41      	ldr	r2, [pc, #260]	; (8001528 <HAL_ADC_MspInit+0x130>)
 8001424:	4293      	cmp	r3, r2
 8001426:	d17a      	bne.n	800151e <HAL_ADC_MspInit+0x126>

  /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001428:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800142c:	f04f 0300 	mov.w	r3, #0
 8001430:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 2;
 8001434:	2302      	movs	r3, #2
 8001436:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2N = 12;
 8001438:	230c      	movs	r3, #12
 800143a:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2P = 4;
 800143c:	2304      	movs	r3, #4
 800143e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001440:	2302      	movs	r3, #2
 8001442:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001444:	2302      	movs	r3, #2
 8001446:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001448:	23c0      	movs	r3, #192	; 0xc0
 800144a:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 800144c:	2320      	movs	r3, #32
 800144e:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001450:	2300      	movs	r3, #0
 8001452:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001454:	2300      	movs	r3, #0
 8001456:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800145a:	f107 0318 	add.w	r3, r7, #24
 800145e:	4618      	mov	r0, r3
 8001460:	f003 ffb6 	bl	80053d0 <HAL_RCCEx_PeriphCLKConfig>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <HAL_ADC_MspInit+0x76>
    {
      Error_Handler();
 800146a:	f7ff ffa5 	bl	80013b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 800146e:	4b2f      	ldr	r3, [pc, #188]	; (800152c <HAL_ADC_MspInit+0x134>)
 8001470:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001474:	4a2d      	ldr	r2, [pc, #180]	; (800152c <HAL_ADC_MspInit+0x134>)
 8001476:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800147a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800147e:	4b2b      	ldr	r3, [pc, #172]	; (800152c <HAL_ADC_MspInit+0x134>)
 8001480:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001484:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001488:	617b      	str	r3, [r7, #20]
 800148a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800148c:	4b27      	ldr	r3, [pc, #156]	; (800152c <HAL_ADC_MspInit+0x134>)
 800148e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001492:	4a26      	ldr	r2, [pc, #152]	; (800152c <HAL_ADC_MspInit+0x134>)
 8001494:	f043 0320 	orr.w	r3, r3, #32
 8001498:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800149c:	4b23      	ldr	r3, [pc, #140]	; (800152c <HAL_ADC_MspInit+0x134>)
 800149e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014a2:	f003 0320 	and.w	r3, r3, #32
 80014a6:	613b      	str	r3, [r7, #16]
 80014a8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014aa:	4b20      	ldr	r3, [pc, #128]	; (800152c <HAL_ADC_MspInit+0x134>)
 80014ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014b0:	4a1e      	ldr	r2, [pc, #120]	; (800152c <HAL_ADC_MspInit+0x134>)
 80014b2:	f043 0304 	orr.w	r3, r3, #4
 80014b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014ba:	4b1c      	ldr	r3, [pc, #112]	; (800152c <HAL_ADC_MspInit+0x134>)
 80014bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014c0:	f003 0304 	and.w	r3, r3, #4
 80014c4:	60fb      	str	r3, [r7, #12]
 80014c6:	68fb      	ldr	r3, [r7, #12]
    PC0     ------> ADC3_INP10
    PC2_C     ------> ADC3_INP0
    PC2_C     ------> ADC3_INN1
    PC3_C     ------> ADC3_INP1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80014c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014cc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014d0:	2303      	movs	r3, #3
 80014d2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d6:	2300      	movs	r3, #0
 80014d8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80014dc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80014e0:	4619      	mov	r1, r3
 80014e2:	4813      	ldr	r0, [pc, #76]	; (8001530 <HAL_ADC_MspInit+0x138>)
 80014e4:	f001 fad8 	bl	8002a98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80014e8:	2301      	movs	r3, #1
 80014ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014ee:	2303      	movs	r3, #3
 80014f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f4:	2300      	movs	r3, #0
 80014f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014fa:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80014fe:	4619      	mov	r1, r3
 8001500:	480c      	ldr	r0, [pc, #48]	; (8001534 <HAL_ADC_MspInit+0x13c>)
 8001502:	f001 fac9 	bl	8002a98 <HAL_GPIO_Init>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8001506:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 800150a:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800150e:	f000 fa13 	bl	8001938 <HAL_SYSCFG_AnalogSwitchConfig>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8001512:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8001516:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 800151a:	f000 fa0d 	bl	8001938 <HAL_SYSCFG_AnalogSwitchConfig>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800151e:	bf00      	nop
 8001520:	37f0      	adds	r7, #240	; 0xf0
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	58026000 	.word	0x58026000
 800152c:	58024400 	.word	0x58024400
 8001530:	58021400 	.word	0x58021400
 8001534:	58020800 	.word	0x58020800

08001538 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001538:	b480      	push	{r7}
 800153a:	b085      	sub	sp, #20
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a0b      	ldr	r2, [pc, #44]	; (8001574 <HAL_TIM_Base_MspInit+0x3c>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d10e      	bne.n	8001568 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 800154a:	4b0b      	ldr	r3, [pc, #44]	; (8001578 <HAL_TIM_Base_MspInit+0x40>)
 800154c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001550:	4a09      	ldr	r2, [pc, #36]	; (8001578 <HAL_TIM_Base_MspInit+0x40>)
 8001552:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001556:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800155a:	4b07      	ldr	r3, [pc, #28]	; (8001578 <HAL_TIM_Base_MspInit+0x40>)
 800155c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001560:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001564:	60fb      	str	r3, [r7, #12]
 8001566:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001568:	bf00      	nop
 800156a:	3714      	adds	r7, #20
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr
 8001574:	40014400 	.word	0x40014400
 8001578:	58024400 	.word	0x58024400

0800157c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001580:	e7fe      	b.n	8001580 <NMI_Handler+0x4>

08001582 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001582:	b480      	push	{r7}
 8001584:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001586:	e7fe      	b.n	8001586 <HardFault_Handler+0x4>

08001588 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800158c:	e7fe      	b.n	800158c <MemManage_Handler+0x4>

0800158e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800158e:	b480      	push	{r7}
 8001590:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001592:	e7fe      	b.n	8001592 <BusFault_Handler+0x4>

08001594 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001598:	e7fe      	b.n	8001598 <UsageFault_Handler+0x4>

0800159a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800159a:	b480      	push	{r7}
 800159c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800159e:	bf00      	nop
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr

080015a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015ac:	bf00      	nop
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr

080015b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015b6:	b480      	push	{r7}
 80015b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015ba:	bf00      	nop
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr

080015c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015c8:	f000 f966 	bl	8001898 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015cc:	bf00      	nop
 80015ce:	bd80      	pop	{r7, pc}

080015d0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80015d4:	4802      	ldr	r0, [pc, #8]	; (80015e0 <OTG_FS_IRQHandler+0x10>)
 80015d6:	f001 fd81 	bl	80030dc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80015da:	bf00      	nop
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	24001b30 	.word	0x24001b30

080015e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b086      	sub	sp, #24
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015ec:	4a14      	ldr	r2, [pc, #80]	; (8001640 <_sbrk+0x5c>)
 80015ee:	4b15      	ldr	r3, [pc, #84]	; (8001644 <_sbrk+0x60>)
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015f8:	4b13      	ldr	r3, [pc, #76]	; (8001648 <_sbrk+0x64>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d102      	bne.n	8001606 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001600:	4b11      	ldr	r3, [pc, #68]	; (8001648 <_sbrk+0x64>)
 8001602:	4a12      	ldr	r2, [pc, #72]	; (800164c <_sbrk+0x68>)
 8001604:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001606:	4b10      	ldr	r3, [pc, #64]	; (8001648 <_sbrk+0x64>)
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	4413      	add	r3, r2
 800160e:	693a      	ldr	r2, [r7, #16]
 8001610:	429a      	cmp	r2, r3
 8001612:	d207      	bcs.n	8001624 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001614:	f00b f810 	bl	800c638 <__errno>
 8001618:	4603      	mov	r3, r0
 800161a:	220c      	movs	r2, #12
 800161c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800161e:	f04f 33ff 	mov.w	r3, #4294967295
 8001622:	e009      	b.n	8001638 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001624:	4b08      	ldr	r3, [pc, #32]	; (8001648 <_sbrk+0x64>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800162a:	4b07      	ldr	r3, [pc, #28]	; (8001648 <_sbrk+0x64>)
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	4413      	add	r3, r2
 8001632:	4a05      	ldr	r2, [pc, #20]	; (8001648 <_sbrk+0x64>)
 8001634:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001636:	68fb      	ldr	r3, [r7, #12]
}
 8001638:	4618      	mov	r0, r3
 800163a:	3718      	adds	r7, #24
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	24080000 	.word	0x24080000
 8001644:	00000400 	.word	0x00000400
 8001648:	24000648 	.word	0x24000648
 800164c:	240022a8 	.word	0x240022a8

08001650 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001654:	4b37      	ldr	r3, [pc, #220]	; (8001734 <SystemInit+0xe4>)
 8001656:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800165a:	4a36      	ldr	r2, [pc, #216]	; (8001734 <SystemInit+0xe4>)
 800165c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001660:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001664:	4b34      	ldr	r3, [pc, #208]	; (8001738 <SystemInit+0xe8>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f003 030f 	and.w	r3, r3, #15
 800166c:	2b06      	cmp	r3, #6
 800166e:	d807      	bhi.n	8001680 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001670:	4b31      	ldr	r3, [pc, #196]	; (8001738 <SystemInit+0xe8>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f023 030f 	bic.w	r3, r3, #15
 8001678:	4a2f      	ldr	r2, [pc, #188]	; (8001738 <SystemInit+0xe8>)
 800167a:	f043 0307 	orr.w	r3, r3, #7
 800167e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001680:	4b2e      	ldr	r3, [pc, #184]	; (800173c <SystemInit+0xec>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a2d      	ldr	r2, [pc, #180]	; (800173c <SystemInit+0xec>)
 8001686:	f043 0301 	orr.w	r3, r3, #1
 800168a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800168c:	4b2b      	ldr	r3, [pc, #172]	; (800173c <SystemInit+0xec>)
 800168e:	2200      	movs	r2, #0
 8001690:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001692:	4b2a      	ldr	r3, [pc, #168]	; (800173c <SystemInit+0xec>)
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	4929      	ldr	r1, [pc, #164]	; (800173c <SystemInit+0xec>)
 8001698:	4b29      	ldr	r3, [pc, #164]	; (8001740 <SystemInit+0xf0>)
 800169a:	4013      	ands	r3, r2
 800169c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800169e:	4b26      	ldr	r3, [pc, #152]	; (8001738 <SystemInit+0xe8>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 0308 	and.w	r3, r3, #8
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d007      	beq.n	80016ba <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80016aa:	4b23      	ldr	r3, [pc, #140]	; (8001738 <SystemInit+0xe8>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f023 030f 	bic.w	r3, r3, #15
 80016b2:	4a21      	ldr	r2, [pc, #132]	; (8001738 <SystemInit+0xe8>)
 80016b4:	f043 0307 	orr.w	r3, r3, #7
 80016b8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80016ba:	4b20      	ldr	r3, [pc, #128]	; (800173c <SystemInit+0xec>)
 80016bc:	2200      	movs	r2, #0
 80016be:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80016c0:	4b1e      	ldr	r3, [pc, #120]	; (800173c <SystemInit+0xec>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80016c6:	4b1d      	ldr	r3, [pc, #116]	; (800173c <SystemInit+0xec>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80016cc:	4b1b      	ldr	r3, [pc, #108]	; (800173c <SystemInit+0xec>)
 80016ce:	4a1d      	ldr	r2, [pc, #116]	; (8001744 <SystemInit+0xf4>)
 80016d0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80016d2:	4b1a      	ldr	r3, [pc, #104]	; (800173c <SystemInit+0xec>)
 80016d4:	4a1c      	ldr	r2, [pc, #112]	; (8001748 <SystemInit+0xf8>)
 80016d6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80016d8:	4b18      	ldr	r3, [pc, #96]	; (800173c <SystemInit+0xec>)
 80016da:	4a1c      	ldr	r2, [pc, #112]	; (800174c <SystemInit+0xfc>)
 80016dc:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80016de:	4b17      	ldr	r3, [pc, #92]	; (800173c <SystemInit+0xec>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80016e4:	4b15      	ldr	r3, [pc, #84]	; (800173c <SystemInit+0xec>)
 80016e6:	4a19      	ldr	r2, [pc, #100]	; (800174c <SystemInit+0xfc>)
 80016e8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80016ea:	4b14      	ldr	r3, [pc, #80]	; (800173c <SystemInit+0xec>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80016f0:	4b12      	ldr	r3, [pc, #72]	; (800173c <SystemInit+0xec>)
 80016f2:	4a16      	ldr	r2, [pc, #88]	; (800174c <SystemInit+0xfc>)
 80016f4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80016f6:	4b11      	ldr	r3, [pc, #68]	; (800173c <SystemInit+0xec>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80016fc:	4b0f      	ldr	r3, [pc, #60]	; (800173c <SystemInit+0xec>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a0e      	ldr	r2, [pc, #56]	; (800173c <SystemInit+0xec>)
 8001702:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001706:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001708:	4b0c      	ldr	r3, [pc, #48]	; (800173c <SystemInit+0xec>)
 800170a:	2200      	movs	r2, #0
 800170c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800170e:	4b10      	ldr	r3, [pc, #64]	; (8001750 <SystemInit+0x100>)
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	4b10      	ldr	r3, [pc, #64]	; (8001754 <SystemInit+0x104>)
 8001714:	4013      	ands	r3, r2
 8001716:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800171a:	d202      	bcs.n	8001722 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800171c:	4b0e      	ldr	r3, [pc, #56]	; (8001758 <SystemInit+0x108>)
 800171e:	2201      	movs	r2, #1
 8001720:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001722:	4b0e      	ldr	r3, [pc, #56]	; (800175c <SystemInit+0x10c>)
 8001724:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001728:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800172a:	bf00      	nop
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr
 8001734:	e000ed00 	.word	0xe000ed00
 8001738:	52002000 	.word	0x52002000
 800173c:	58024400 	.word	0x58024400
 8001740:	eaf6ed7f 	.word	0xeaf6ed7f
 8001744:	02020200 	.word	0x02020200
 8001748:	01ff0000 	.word	0x01ff0000
 800174c:	01010280 	.word	0x01010280
 8001750:	5c001000 	.word	0x5c001000
 8001754:	ffff0000 	.word	0xffff0000
 8001758:	51008108 	.word	0x51008108
 800175c:	52004000 	.word	0x52004000

08001760 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001760:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001798 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001764:	f7ff ff74 	bl	8001650 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001768:	480c      	ldr	r0, [pc, #48]	; (800179c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800176a:	490d      	ldr	r1, [pc, #52]	; (80017a0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800176c:	4a0d      	ldr	r2, [pc, #52]	; (80017a4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800176e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001770:	e002      	b.n	8001778 <LoopCopyDataInit>

08001772 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001772:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001774:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001776:	3304      	adds	r3, #4

08001778 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001778:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800177a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800177c:	d3f9      	bcc.n	8001772 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800177e:	4a0a      	ldr	r2, [pc, #40]	; (80017a8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001780:	4c0a      	ldr	r4, [pc, #40]	; (80017ac <LoopFillZerobss+0x22>)
  movs r3, #0
 8001782:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001784:	e001      	b.n	800178a <LoopFillZerobss>

08001786 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001786:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001788:	3204      	adds	r2, #4

0800178a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800178a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800178c:	d3fb      	bcc.n	8001786 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800178e:	f00a ff59 	bl	800c644 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001792:	f7ff f809 	bl	80007a8 <main>
  bx  lr
 8001796:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001798:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800179c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80017a0:	2400045c 	.word	0x2400045c
  ldr r2, =_sidata
 80017a4:	0800e098 	.word	0x0800e098
  ldr r2, =_sbss
 80017a8:	2400045c 	.word	0x2400045c
  ldr r4, =_ebss
 80017ac:	240022a8 	.word	0x240022a8

080017b0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017b0:	e7fe      	b.n	80017b0 <ADC3_IRQHandler>
	...

080017b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017ba:	2003      	movs	r0, #3
 80017bc:	f001 f92c 	bl	8002a18 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80017c0:	f003 fc46 	bl	8005050 <HAL_RCC_GetSysClockFreq>
 80017c4:	4602      	mov	r2, r0
 80017c6:	4b15      	ldr	r3, [pc, #84]	; (800181c <HAL_Init+0x68>)
 80017c8:	699b      	ldr	r3, [r3, #24]
 80017ca:	0a1b      	lsrs	r3, r3, #8
 80017cc:	f003 030f 	and.w	r3, r3, #15
 80017d0:	4913      	ldr	r1, [pc, #76]	; (8001820 <HAL_Init+0x6c>)
 80017d2:	5ccb      	ldrb	r3, [r1, r3]
 80017d4:	f003 031f 	and.w	r3, r3, #31
 80017d8:	fa22 f303 	lsr.w	r3, r2, r3
 80017dc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80017de:	4b0f      	ldr	r3, [pc, #60]	; (800181c <HAL_Init+0x68>)
 80017e0:	699b      	ldr	r3, [r3, #24]
 80017e2:	f003 030f 	and.w	r3, r3, #15
 80017e6:	4a0e      	ldr	r2, [pc, #56]	; (8001820 <HAL_Init+0x6c>)
 80017e8:	5cd3      	ldrb	r3, [r2, r3]
 80017ea:	f003 031f 	and.w	r3, r3, #31
 80017ee:	687a      	ldr	r2, [r7, #4]
 80017f0:	fa22 f303 	lsr.w	r3, r2, r3
 80017f4:	4a0b      	ldr	r2, [pc, #44]	; (8001824 <HAL_Init+0x70>)
 80017f6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80017f8:	4a0b      	ldr	r2, [pc, #44]	; (8001828 <HAL_Init+0x74>)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017fe:	2000      	movs	r0, #0
 8001800:	f000 f814 	bl	800182c <HAL_InitTick>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	e002      	b.n	8001814 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800180e:	f7ff fdd9 	bl	80013c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001812:	2300      	movs	r3, #0
}
 8001814:	4618      	mov	r0, r3
 8001816:	3708      	adds	r7, #8
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	58024400 	.word	0x58024400
 8001820:	0800d7d8 	.word	0x0800d7d8
 8001824:	240002fc 	.word	0x240002fc
 8001828:	240002f8 	.word	0x240002f8

0800182c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001834:	4b15      	ldr	r3, [pc, #84]	; (800188c <HAL_InitTick+0x60>)
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d101      	bne.n	8001840 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800183c:	2301      	movs	r3, #1
 800183e:	e021      	b.n	8001884 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001840:	4b13      	ldr	r3, [pc, #76]	; (8001890 <HAL_InitTick+0x64>)
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	4b11      	ldr	r3, [pc, #68]	; (800188c <HAL_InitTick+0x60>)
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	4619      	mov	r1, r3
 800184a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800184e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001852:	fbb2 f3f3 	udiv	r3, r2, r3
 8001856:	4618      	mov	r0, r3
 8001858:	f001 f911 	bl	8002a7e <HAL_SYSTICK_Config>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	e00e      	b.n	8001884 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2b0f      	cmp	r3, #15
 800186a:	d80a      	bhi.n	8001882 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800186c:	2200      	movs	r2, #0
 800186e:	6879      	ldr	r1, [r7, #4]
 8001870:	f04f 30ff 	mov.w	r0, #4294967295
 8001874:	f001 f8db 	bl	8002a2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001878:	4a06      	ldr	r2, [pc, #24]	; (8001894 <HAL_InitTick+0x68>)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800187e:	2300      	movs	r3, #0
 8001880:	e000      	b.n	8001884 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
}
 8001884:	4618      	mov	r0, r3
 8001886:	3708      	adds	r7, #8
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	24000304 	.word	0x24000304
 8001890:	240002f8 	.word	0x240002f8
 8001894:	24000300 	.word	0x24000300

08001898 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800189c:	4b06      	ldr	r3, [pc, #24]	; (80018b8 <HAL_IncTick+0x20>)
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	461a      	mov	r2, r3
 80018a2:	4b06      	ldr	r3, [pc, #24]	; (80018bc <HAL_IncTick+0x24>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4413      	add	r3, r2
 80018a8:	4a04      	ldr	r2, [pc, #16]	; (80018bc <HAL_IncTick+0x24>)
 80018aa:	6013      	str	r3, [r2, #0]
}
 80018ac:	bf00      	nop
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	24000304 	.word	0x24000304
 80018bc:	2400064c 	.word	0x2400064c

080018c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  return uwTick;
 80018c4:	4b03      	ldr	r3, [pc, #12]	; (80018d4 <HAL_GetTick+0x14>)
 80018c6:	681b      	ldr	r3, [r3, #0]
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	2400064c 	.word	0x2400064c

080018d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b084      	sub	sp, #16
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018e0:	f7ff ffee 	bl	80018c0 <HAL_GetTick>
 80018e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018f0:	d005      	beq.n	80018fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018f2:	4b0a      	ldr	r3, [pc, #40]	; (800191c <HAL_Delay+0x44>)
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	461a      	mov	r2, r3
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	4413      	add	r3, r2
 80018fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018fe:	bf00      	nop
 8001900:	f7ff ffde 	bl	80018c0 <HAL_GetTick>
 8001904:	4602      	mov	r2, r0
 8001906:	68bb      	ldr	r3, [r7, #8]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	68fa      	ldr	r2, [r7, #12]
 800190c:	429a      	cmp	r2, r3
 800190e:	d8f7      	bhi.n	8001900 <HAL_Delay+0x28>
  {
  }
}
 8001910:	bf00      	nop
 8001912:	bf00      	nop
 8001914:	3710      	adds	r7, #16
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	24000304 	.word	0x24000304

08001920 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001924:	4b03      	ldr	r3, [pc, #12]	; (8001934 <HAL_GetREVID+0x14>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	0c1b      	lsrs	r3, r3, #16
}
 800192a:	4618      	mov	r0, r3
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr
 8001934:	5c001000 	.word	0x5c001000

08001938 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
 8001940:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8001942:	4b07      	ldr	r3, [pc, #28]	; (8001960 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8001944:	685a      	ldr	r2, [r3, #4]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	43db      	mvns	r3, r3
 800194a:	401a      	ands	r2, r3
 800194c:	4904      	ldr	r1, [pc, #16]	; (8001960 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	4313      	orrs	r3, r2
 8001952:	604b      	str	r3, [r1, #4]
}
 8001954:	bf00      	nop
 8001956:	370c      	adds	r7, #12
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr
 8001960:	58000400 	.word	0x58000400

08001964 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
 800196c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	431a      	orrs	r2, r3
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	609a      	str	r2, [r3, #8]
}
 800197e:	bf00      	nop
 8001980:	370c      	adds	r7, #12
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr

0800198a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800198a:	b480      	push	{r7}
 800198c:	b083      	sub	sp, #12
 800198e:	af00      	add	r7, sp, #0
 8001990:	6078      	str	r0, [r7, #4]
 8001992:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	431a      	orrs	r2, r3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	609a      	str	r2, [r3, #8]
}
 80019a4:	bf00      	nop
 80019a6:	370c      	adds	r7, #12
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr

080019b0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	370c      	adds	r7, #12
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr

080019cc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b087      	sub	sp, #28
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	60f8      	str	r0, [r7, #12]
 80019d4:	60b9      	str	r1, [r7, #8]
 80019d6:	607a      	str	r2, [r7, #4]
 80019d8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	3360      	adds	r3, #96	; 0x60
 80019de:	461a      	mov	r2, r3
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	4413      	add	r3, r2
 80019e6:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	430b      	orrs	r3, r1
 80019fa:	431a      	orrs	r2, r3
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001a00:	bf00      	nop
 8001a02:	371c      	adds	r7, #28
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr

08001a0c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b085      	sub	sp, #20
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	60f8      	str	r0, [r7, #12]
 8001a14:	60b9      	str	r1, [r7, #8]
 8001a16:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	691b      	ldr	r3, [r3, #16]
 8001a1c:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	f003 031f 	and.w	r3, r3, #31
 8001a26:	6879      	ldr	r1, [r7, #4]
 8001a28:	fa01 f303 	lsl.w	r3, r1, r3
 8001a2c:	431a      	orrs	r2, r3
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	611a      	str	r2, [r3, #16]
}
 8001a32:	bf00      	nop
 8001a34:	3714      	adds	r7, #20
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr

08001a3e <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001a3e:	b480      	push	{r7}
 8001a40:	b087      	sub	sp, #28
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	60f8      	str	r0, [r7, #12]
 8001a46:	60b9      	str	r1, [r7, #8]
 8001a48:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	3360      	adds	r3, #96	; 0x60
 8001a4e:	461a      	mov	r2, r3
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	009b      	lsls	r3, r3, #2
 8001a54:	4413      	add	r3, r2
 8001a56:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	431a      	orrs	r2, r3
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	601a      	str	r2, [r3, #0]
  }
}
 8001a68:	bf00      	nop
 8001a6a:	371c      	adds	r7, #28
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr

08001a74 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b087      	sub	sp, #28
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	60f8      	str	r0, [r7, #12]
 8001a7c:	60b9      	str	r1, [r7, #8]
 8001a7e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	3330      	adds	r3, #48	; 0x30
 8001a84:	461a      	mov	r2, r3
 8001a86:	68bb      	ldr	r3, [r7, #8]
 8001a88:	0a1b      	lsrs	r3, r3, #8
 8001a8a:	009b      	lsls	r3, r3, #2
 8001a8c:	f003 030c 	and.w	r3, r3, #12
 8001a90:	4413      	add	r3, r2
 8001a92:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	f003 031f 	and.w	r3, r3, #31
 8001a9e:	211f      	movs	r1, #31
 8001aa0:	fa01 f303 	lsl.w	r3, r1, r3
 8001aa4:	43db      	mvns	r3, r3
 8001aa6:	401a      	ands	r2, r3
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	0e9b      	lsrs	r3, r3, #26
 8001aac:	f003 011f 	and.w	r1, r3, #31
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	f003 031f 	and.w	r3, r3, #31
 8001ab6:	fa01 f303 	lsl.w	r3, r1, r3
 8001aba:	431a      	orrs	r2, r3
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001ac0:	bf00      	nop
 8001ac2:	371c      	adds	r7, #28
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr

08001acc <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b087      	sub	sp, #28
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	60f8      	str	r0, [r7, #12]
 8001ad4:	60b9      	str	r1, [r7, #8]
 8001ad6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	3314      	adds	r3, #20
 8001adc:	461a      	mov	r2, r3
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	0e5b      	lsrs	r3, r3, #25
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	f003 0304 	and.w	r3, r3, #4
 8001ae8:	4413      	add	r3, r2
 8001aea:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	0d1b      	lsrs	r3, r3, #20
 8001af4:	f003 031f 	and.w	r3, r3, #31
 8001af8:	2107      	movs	r1, #7
 8001afa:	fa01 f303 	lsl.w	r3, r1, r3
 8001afe:	43db      	mvns	r3, r3
 8001b00:	401a      	ands	r2, r3
 8001b02:	68bb      	ldr	r3, [r7, #8]
 8001b04:	0d1b      	lsrs	r3, r3, #20
 8001b06:	f003 031f 	and.w	r3, r3, #31
 8001b0a:	6879      	ldr	r1, [r7, #4]
 8001b0c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b10:	431a      	orrs	r2, r3
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001b16:	bf00      	nop
 8001b18:	371c      	adds	r7, #28
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
	...

08001b24 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b085      	sub	sp, #20
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	60f8      	str	r0, [r7, #12]
 8001b2c:	60b9      	str	r1, [r7, #8]
 8001b2e:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001b36:	68bb      	ldr	r3, [r7, #8]
 8001b38:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001b3c:	43db      	mvns	r3, r3
 8001b3e:	401a      	ands	r2, r3
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	f003 0318 	and.w	r3, r3, #24
 8001b46:	4908      	ldr	r1, [pc, #32]	; (8001b68 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001b48:	40d9      	lsrs	r1, r3
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	400b      	ands	r3, r1
 8001b4e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001b52:	431a      	orrs	r2, r3
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001b5a:	bf00      	nop
 8001b5c:	3714      	adds	r7, #20
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	000fffff 	.word	0x000fffff

08001b6c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	689a      	ldr	r2, [r3, #8]
 8001b78:	4b04      	ldr	r3, [pc, #16]	; (8001b8c <LL_ADC_DisableDeepPowerDown+0x20>)
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	687a      	ldr	r2, [r7, #4]
 8001b7e:	6093      	str	r3, [r2, #8]
}
 8001b80:	bf00      	nop
 8001b82:	370c      	adds	r7, #12
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr
 8001b8c:	5fffffc0 	.word	0x5fffffc0

08001b90 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001ba0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001ba4:	d101      	bne.n	8001baa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e000      	b.n	8001bac <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001baa:	2300      	movs	r3, #0
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	370c      	adds	r7, #12
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr

08001bb8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	689a      	ldr	r2, [r3, #8]
 8001bc4:	4b05      	ldr	r3, [pc, #20]	; (8001bdc <LL_ADC_EnableInternalRegulator+0x24>)
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001bd0:	bf00      	nop
 8001bd2:	370c      	adds	r7, #12
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr
 8001bdc:	6fffffc0 	.word	0x6fffffc0

08001be0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bf0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001bf4:	d101      	bne.n	8001bfa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e000      	b.n	8001bfc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001bfa:	2300      	movs	r3, #0
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	370c      	adds	r7, #12
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr

08001c08 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	f003 0301 	and.w	r3, r3, #1
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d101      	bne.n	8001c20 <LL_ADC_IsEnabled+0x18>
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e000      	b.n	8001c22 <LL_ADC_IsEnabled+0x1a>
 8001c20:	2300      	movs	r3, #0
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	370c      	adds	r7, #12
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr

08001c2e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001c2e:	b480      	push	{r7}
 8001c30:	b083      	sub	sp, #12
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	f003 0304 	and.w	r3, r3, #4
 8001c3e:	2b04      	cmp	r3, #4
 8001c40:	d101      	bne.n	8001c46 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001c42:	2301      	movs	r3, #1
 8001c44:	e000      	b.n	8001c48 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001c46:	2300      	movs	r3, #0
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	370c      	adds	r7, #12
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr

08001c54 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	f003 0308 	and.w	r3, r3, #8
 8001c64:	2b08      	cmp	r3, #8
 8001c66:	d101      	bne.n	8001c6c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e000      	b.n	8001c6e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001c6c:	2300      	movs	r3, #0
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	370c      	adds	r7, #12
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr
	...

08001c7c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001c7c:	b590      	push	{r4, r7, lr}
 8001c7e:	b089      	sub	sp, #36	; 0x24
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c84:	2300      	movs	r3, #0
 8001c86:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d101      	bne.n	8001c96 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e18f      	b.n	8001fb6 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	68db      	ldr	r3, [r3, #12]
 8001c9a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d109      	bne.n	8001cb8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	f7ff fba7 	bl	80013f8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2200      	movs	r2, #0
 8001cae:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7ff ff67 	bl	8001b90 <LL_ADC_IsDeepPowerDownEnabled>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d004      	beq.n	8001cd2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7ff ff4d 	bl	8001b6c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f7ff ff82 	bl	8001be0 <LL_ADC_IsInternalRegulatorEnabled>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d114      	bne.n	8001d0c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f7ff ff66 	bl	8001bb8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001cec:	4b87      	ldr	r3, [pc, #540]	; (8001f0c <HAL_ADC_Init+0x290>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	099b      	lsrs	r3, r3, #6
 8001cf2:	4a87      	ldr	r2, [pc, #540]	; (8001f10 <HAL_ADC_Init+0x294>)
 8001cf4:	fba2 2303 	umull	r2, r3, r2, r3
 8001cf8:	099b      	lsrs	r3, r3, #6
 8001cfa:	3301      	adds	r3, #1
 8001cfc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001cfe:	e002      	b.n	8001d06 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	3b01      	subs	r3, #1
 8001d04:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d1f9      	bne.n	8001d00 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4618      	mov	r0, r3
 8001d12:	f7ff ff65 	bl	8001be0 <LL_ADC_IsInternalRegulatorEnabled>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d10d      	bne.n	8001d38 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d20:	f043 0210 	orr.w	r2, r3, #16
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d2c:	f043 0201 	orr.w	r2, r3, #1
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001d34:	2301      	movs	r3, #1
 8001d36:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f7ff ff76 	bl	8001c2e <LL_ADC_REG_IsConversionOngoing>
 8001d42:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d48:	f003 0310 	and.w	r3, r3, #16
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	f040 8129 	bne.w	8001fa4 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	f040 8125 	bne.w	8001fa4 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d5e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001d62:	f043 0202 	orr.w	r2, r3, #2
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f7ff ff4a 	bl	8001c08 <LL_ADC_IsEnabled>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d136      	bne.n	8001de8 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a65      	ldr	r2, [pc, #404]	; (8001f14 <HAL_ADC_Init+0x298>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d004      	beq.n	8001d8e <HAL_ADC_Init+0x112>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a63      	ldr	r2, [pc, #396]	; (8001f18 <HAL_ADC_Init+0x29c>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d10e      	bne.n	8001dac <HAL_ADC_Init+0x130>
 8001d8e:	4861      	ldr	r0, [pc, #388]	; (8001f14 <HAL_ADC_Init+0x298>)
 8001d90:	f7ff ff3a 	bl	8001c08 <LL_ADC_IsEnabled>
 8001d94:	4604      	mov	r4, r0
 8001d96:	4860      	ldr	r0, [pc, #384]	; (8001f18 <HAL_ADC_Init+0x29c>)
 8001d98:	f7ff ff36 	bl	8001c08 <LL_ADC_IsEnabled>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	4323      	orrs	r3, r4
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	bf0c      	ite	eq
 8001da4:	2301      	moveq	r3, #1
 8001da6:	2300      	movne	r3, #0
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	e008      	b.n	8001dbe <HAL_ADC_Init+0x142>
 8001dac:	485b      	ldr	r0, [pc, #364]	; (8001f1c <HAL_ADC_Init+0x2a0>)
 8001dae:	f7ff ff2b 	bl	8001c08 <LL_ADC_IsEnabled>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	bf0c      	ite	eq
 8001db8:	2301      	moveq	r3, #1
 8001dba:	2300      	movne	r3, #0
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d012      	beq.n	8001de8 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a53      	ldr	r2, [pc, #332]	; (8001f14 <HAL_ADC_Init+0x298>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d004      	beq.n	8001dd6 <HAL_ADC_Init+0x15a>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a51      	ldr	r2, [pc, #324]	; (8001f18 <HAL_ADC_Init+0x29c>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d101      	bne.n	8001dda <HAL_ADC_Init+0x15e>
 8001dd6:	4a52      	ldr	r2, [pc, #328]	; (8001f20 <HAL_ADC_Init+0x2a4>)
 8001dd8:	e000      	b.n	8001ddc <HAL_ADC_Init+0x160>
 8001dda:	4a52      	ldr	r2, [pc, #328]	; (8001f24 <HAL_ADC_Init+0x2a8>)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	4619      	mov	r1, r3
 8001de2:	4610      	mov	r0, r2
 8001de4:	f7ff fdbe 	bl	8001964 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001de8:	f7ff fd9a 	bl	8001920 <HAL_GetREVID>
 8001dec:	4603      	mov	r3, r0
 8001dee:	f241 0203 	movw	r2, #4099	; 0x1003
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d914      	bls.n	8001e20 <HAL_ADC_Init+0x1a4>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	2b10      	cmp	r3, #16
 8001dfc:	d110      	bne.n	8001e20 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	7d5b      	ldrb	r3, [r3, #21]
 8001e02:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001e08:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001e0e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	7f1b      	ldrb	r3, [r3, #28]
 8001e14:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001e16:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001e18:	f043 030c 	orr.w	r3, r3, #12
 8001e1c:	61bb      	str	r3, [r7, #24]
 8001e1e:	e00d      	b.n	8001e3c <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	7d5b      	ldrb	r3, [r3, #21]
 8001e24:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001e2a:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001e30:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	7f1b      	ldrb	r3, [r3, #28]
 8001e36:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	7f1b      	ldrb	r3, [r3, #28]
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d106      	bne.n	8001e52 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6a1b      	ldr	r3, [r3, #32]
 8001e48:	3b01      	subs	r3, #1
 8001e4a:	045b      	lsls	r3, r3, #17
 8001e4c:	69ba      	ldr	r2, [r7, #24]
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d009      	beq.n	8001e6e <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e5e:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e66:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e68:	69ba      	ldr	r2, [r7, #24]
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	68da      	ldr	r2, [r3, #12]
 8001e74:	4b2c      	ldr	r3, [pc, #176]	; (8001f28 <HAL_ADC_Init+0x2ac>)
 8001e76:	4013      	ands	r3, r2
 8001e78:	687a      	ldr	r2, [r7, #4]
 8001e7a:	6812      	ldr	r2, [r2, #0]
 8001e7c:	69b9      	ldr	r1, [r7, #24]
 8001e7e:	430b      	orrs	r3, r1
 8001e80:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4618      	mov	r0, r3
 8001e88:	f7ff fed1 	bl	8001c2e <LL_ADC_REG_IsConversionOngoing>
 8001e8c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4618      	mov	r0, r3
 8001e94:	f7ff fede 	bl	8001c54 <LL_ADC_INJ_IsConversionOngoing>
 8001e98:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d15f      	bne.n	8001f60 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d15c      	bne.n	8001f60 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	7d1b      	ldrb	r3, [r3, #20]
 8001eaa:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	68da      	ldr	r2, [r3, #12]
 8001eba:	4b1c      	ldr	r3, [pc, #112]	; (8001f2c <HAL_ADC_Init+0x2b0>)
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	687a      	ldr	r2, [r7, #4]
 8001ec0:	6812      	ldr	r2, [r2, #0]
 8001ec2:	69b9      	ldr	r1, [r7, #24]
 8001ec4:	430b      	orrs	r3, r1
 8001ec6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d130      	bne.n	8001f34 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed6:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	691a      	ldr	r2, [r3, #16]
 8001ede:	4b14      	ldr	r3, [pc, #80]	; (8001f30 <HAL_ADC_Init+0x2b4>)
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	687a      	ldr	r2, [r7, #4]
 8001ee4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001ee6:	3a01      	subs	r2, #1
 8001ee8:	0411      	lsls	r1, r2, #16
 8001eea:	687a      	ldr	r2, [r7, #4]
 8001eec:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001eee:	4311      	orrs	r1, r2
 8001ef0:	687a      	ldr	r2, [r7, #4]
 8001ef2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001ef4:	4311      	orrs	r1, r2
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001efa:	430a      	orrs	r2, r1
 8001efc:	431a      	orrs	r2, r3
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f042 0201 	orr.w	r2, r2, #1
 8001f06:	611a      	str	r2, [r3, #16]
 8001f08:	e01c      	b.n	8001f44 <HAL_ADC_Init+0x2c8>
 8001f0a:	bf00      	nop
 8001f0c:	240002f8 	.word	0x240002f8
 8001f10:	053e2d63 	.word	0x053e2d63
 8001f14:	40022000 	.word	0x40022000
 8001f18:	40022100 	.word	0x40022100
 8001f1c:	58026000 	.word	0x58026000
 8001f20:	40022300 	.word	0x40022300
 8001f24:	58026300 	.word	0x58026300
 8001f28:	fff0c003 	.word	0xfff0c003
 8001f2c:	ffffbffc 	.word	0xffffbffc
 8001f30:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	691a      	ldr	r2, [r3, #16]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f022 0201 	bic.w	r2, r2, #1
 8001f42:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	691b      	ldr	r3, [r3, #16]
 8001f4a:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	430a      	orrs	r2, r1
 8001f58:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f000 fb80 	bl	8002660 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	2b01      	cmp	r3, #1
 8001f66:	d10c      	bne.n	8001f82 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6e:	f023 010f 	bic.w	r1, r3, #15
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	699b      	ldr	r3, [r3, #24]
 8001f76:	1e5a      	subs	r2, r3, #1
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	430a      	orrs	r2, r1
 8001f7e:	631a      	str	r2, [r3, #48]	; 0x30
 8001f80:	e007      	b.n	8001f92 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f022 020f 	bic.w	r2, r2, #15
 8001f90:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f96:	f023 0303 	bic.w	r3, r3, #3
 8001f9a:	f043 0201 	orr.w	r2, r3, #1
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	655a      	str	r2, [r3, #84]	; 0x54
 8001fa2:	e007      	b.n	8001fb4 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fa8:	f043 0210 	orr.w	r2, r3, #16
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001fb4:	7ffb      	ldrb	r3, [r7, #31]
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3724      	adds	r7, #36	; 0x24
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd90      	pop	{r4, r7, pc}
 8001fbe:	bf00      	nop

08001fc0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001fc0:	b590      	push	{r4, r7, lr}
 8001fc2:	b0a1      	sub	sp, #132	; 0x84
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	4a9d      	ldr	r2, [pc, #628]	; (8002250 <HAL_ADC_ConfigChannel+0x290>)
 8001fda:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d101      	bne.n	8001fea <HAL_ADC_ConfigChannel+0x2a>
 8001fe6:	2302      	movs	r3, #2
 8001fe8:	e321      	b.n	800262e <HAL_ADC_ConfigChannel+0x66e>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2201      	movs	r2, #1
 8001fee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f7ff fe19 	bl	8001c2e <LL_ADC_REG_IsConversionOngoing>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	f040 8306 	bne.w	8002610 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800200c:	2b00      	cmp	r3, #0
 800200e:	d108      	bne.n	8002022 <HAL_ADC_ConfigChannel+0x62>
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	0e9b      	lsrs	r3, r3, #26
 8002016:	f003 031f 	and.w	r3, r3, #31
 800201a:	2201      	movs	r2, #1
 800201c:	fa02 f303 	lsl.w	r3, r2, r3
 8002020:	e016      	b.n	8002050 <HAL_ADC_ConfigChannel+0x90>
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002028:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800202a:	fa93 f3a3 	rbit	r3, r3
 800202e:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002030:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002032:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002034:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002036:	2b00      	cmp	r3, #0
 8002038:	d101      	bne.n	800203e <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 800203a:	2320      	movs	r3, #32
 800203c:	e003      	b.n	8002046 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 800203e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002040:	fab3 f383 	clz	r3, r3
 8002044:	b2db      	uxtb	r3, r3
 8002046:	f003 031f 	and.w	r3, r3, #31
 800204a:	2201      	movs	r2, #1
 800204c:	fa02 f303 	lsl.w	r3, r2, r3
 8002050:	687a      	ldr	r2, [r7, #4]
 8002052:	6812      	ldr	r2, [r2, #0]
 8002054:	69d1      	ldr	r1, [r2, #28]
 8002056:	687a      	ldr	r2, [r7, #4]
 8002058:	6812      	ldr	r2, [r2, #0]
 800205a:	430b      	orrs	r3, r1
 800205c:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6818      	ldr	r0, [r3, #0]
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	6859      	ldr	r1, [r3, #4]
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	461a      	mov	r2, r3
 800206c:	f7ff fd02 	bl	8001a74 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4618      	mov	r0, r3
 8002076:	f7ff fdda 	bl	8001c2e <LL_ADC_REG_IsConversionOngoing>
 800207a:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4618      	mov	r0, r3
 8002082:	f7ff fde7 	bl	8001c54 <LL_ADC_INJ_IsConversionOngoing>
 8002086:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002088:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800208a:	2b00      	cmp	r3, #0
 800208c:	f040 80b3 	bne.w	80021f6 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002090:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002092:	2b00      	cmp	r3, #0
 8002094:	f040 80af 	bne.w	80021f6 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6818      	ldr	r0, [r3, #0]
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	6819      	ldr	r1, [r3, #0]
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	461a      	mov	r2, r3
 80020a6:	f7ff fd11 	bl	8001acc <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80020aa:	4b6a      	ldr	r3, [pc, #424]	; (8002254 <HAL_ADC_ConfigChannel+0x294>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80020b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80020b6:	d10b      	bne.n	80020d0 <HAL_ADC_ConfigChannel+0x110>
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	695a      	ldr	r2, [r3, #20]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	68db      	ldr	r3, [r3, #12]
 80020c2:	089b      	lsrs	r3, r3, #2
 80020c4:	f003 0307 	and.w	r3, r3, #7
 80020c8:	005b      	lsls	r3, r3, #1
 80020ca:	fa02 f303 	lsl.w	r3, r2, r3
 80020ce:	e01d      	b.n	800210c <HAL_ADC_ConfigChannel+0x14c>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	68db      	ldr	r3, [r3, #12]
 80020d6:	f003 0310 	and.w	r3, r3, #16
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d10b      	bne.n	80020f6 <HAL_ADC_ConfigChannel+0x136>
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	695a      	ldr	r2, [r3, #20]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	089b      	lsrs	r3, r3, #2
 80020ea:	f003 0307 	and.w	r3, r3, #7
 80020ee:	005b      	lsls	r3, r3, #1
 80020f0:	fa02 f303 	lsl.w	r3, r2, r3
 80020f4:	e00a      	b.n	800210c <HAL_ADC_ConfigChannel+0x14c>
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	695a      	ldr	r2, [r3, #20]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	089b      	lsrs	r3, r3, #2
 8002102:	f003 0304 	and.w	r3, r3, #4
 8002106:	005b      	lsls	r3, r3, #1
 8002108:	fa02 f303 	lsl.w	r3, r2, r3
 800210c:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	691b      	ldr	r3, [r3, #16]
 8002112:	2b04      	cmp	r3, #4
 8002114:	d027      	beq.n	8002166 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6818      	ldr	r0, [r3, #0]
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	6919      	ldr	r1, [r3, #16]
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002124:	f7ff fc52 	bl	80019cc <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6818      	ldr	r0, [r3, #0]
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	6919      	ldr	r1, [r3, #16]
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	7e5b      	ldrb	r3, [r3, #25]
 8002134:	2b01      	cmp	r3, #1
 8002136:	d102      	bne.n	800213e <HAL_ADC_ConfigChannel+0x17e>
 8002138:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800213c:	e000      	b.n	8002140 <HAL_ADC_ConfigChannel+0x180>
 800213e:	2300      	movs	r3, #0
 8002140:	461a      	mov	r2, r3
 8002142:	f7ff fc7c 	bl	8001a3e <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6818      	ldr	r0, [r3, #0]
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	6919      	ldr	r1, [r3, #16]
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	7e1b      	ldrb	r3, [r3, #24]
 8002152:	2b01      	cmp	r3, #1
 8002154:	d102      	bne.n	800215c <HAL_ADC_ConfigChannel+0x19c>
 8002156:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800215a:	e000      	b.n	800215e <HAL_ADC_ConfigChannel+0x19e>
 800215c:	2300      	movs	r3, #0
 800215e:	461a      	mov	r2, r3
 8002160:	f7ff fc54 	bl	8001a0c <LL_ADC_SetDataRightShift>
 8002164:	e047      	b.n	80021f6 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800216c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	069b      	lsls	r3, r3, #26
 8002176:	429a      	cmp	r2, r3
 8002178:	d107      	bne.n	800218a <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002188:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002190:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	069b      	lsls	r3, r3, #26
 800219a:	429a      	cmp	r2, r3
 800219c:	d107      	bne.n	80021ae <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80021ac:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80021b4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	069b      	lsls	r3, r3, #26
 80021be:	429a      	cmp	r2, r3
 80021c0:	d107      	bne.n	80021d2 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80021d0:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021d8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	069b      	lsls	r3, r3, #26
 80021e2:	429a      	cmp	r2, r3
 80021e4:	d107      	bne.n	80021f6 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80021f4:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4618      	mov	r0, r3
 80021fc:	f7ff fd04 	bl	8001c08 <LL_ADC_IsEnabled>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	f040 820d 	bne.w	8002622 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6818      	ldr	r0, [r3, #0]
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	6819      	ldr	r1, [r3, #0]
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	461a      	mov	r2, r3
 8002216:	f7ff fc85 	bl	8001b24 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	68db      	ldr	r3, [r3, #12]
 800221e:	4a0c      	ldr	r2, [pc, #48]	; (8002250 <HAL_ADC_ConfigChannel+0x290>)
 8002220:	4293      	cmp	r3, r2
 8002222:	f040 8133 	bne.w	800248c <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002232:	2b00      	cmp	r3, #0
 8002234:	d110      	bne.n	8002258 <HAL_ADC_ConfigChannel+0x298>
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	0e9b      	lsrs	r3, r3, #26
 800223c:	3301      	adds	r3, #1
 800223e:	f003 031f 	and.w	r3, r3, #31
 8002242:	2b09      	cmp	r3, #9
 8002244:	bf94      	ite	ls
 8002246:	2301      	movls	r3, #1
 8002248:	2300      	movhi	r3, #0
 800224a:	b2db      	uxtb	r3, r3
 800224c:	e01e      	b.n	800228c <HAL_ADC_ConfigChannel+0x2cc>
 800224e:	bf00      	nop
 8002250:	47ff0000 	.word	0x47ff0000
 8002254:	5c001000 	.word	0x5c001000
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800225e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002260:	fa93 f3a3 	rbit	r3, r3
 8002264:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002266:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002268:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800226a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800226c:	2b00      	cmp	r3, #0
 800226e:	d101      	bne.n	8002274 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8002270:	2320      	movs	r3, #32
 8002272:	e003      	b.n	800227c <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8002274:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002276:	fab3 f383 	clz	r3, r3
 800227a:	b2db      	uxtb	r3, r3
 800227c:	3301      	adds	r3, #1
 800227e:	f003 031f 	and.w	r3, r3, #31
 8002282:	2b09      	cmp	r3, #9
 8002284:	bf94      	ite	ls
 8002286:	2301      	movls	r3, #1
 8002288:	2300      	movhi	r3, #0
 800228a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800228c:	2b00      	cmp	r3, #0
 800228e:	d079      	beq.n	8002384 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002298:	2b00      	cmp	r3, #0
 800229a:	d107      	bne.n	80022ac <HAL_ADC_ConfigChannel+0x2ec>
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	0e9b      	lsrs	r3, r3, #26
 80022a2:	3301      	adds	r3, #1
 80022a4:	069b      	lsls	r3, r3, #26
 80022a6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80022aa:	e015      	b.n	80022d8 <HAL_ADC_ConfigChannel+0x318>
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022b4:	fa93 f3a3 	rbit	r3, r3
 80022b8:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80022ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022bc:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80022be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d101      	bne.n	80022c8 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 80022c4:	2320      	movs	r3, #32
 80022c6:	e003      	b.n	80022d0 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80022c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80022ca:	fab3 f383 	clz	r3, r3
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	3301      	adds	r3, #1
 80022d2:	069b      	lsls	r3, r3, #26
 80022d4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d109      	bne.n	80022f8 <HAL_ADC_ConfigChannel+0x338>
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	0e9b      	lsrs	r3, r3, #26
 80022ea:	3301      	adds	r3, #1
 80022ec:	f003 031f 	and.w	r3, r3, #31
 80022f0:	2101      	movs	r1, #1
 80022f2:	fa01 f303 	lsl.w	r3, r1, r3
 80022f6:	e017      	b.n	8002328 <HAL_ADC_ConfigChannel+0x368>
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002300:	fa93 f3a3 	rbit	r3, r3
 8002304:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002306:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002308:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800230a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800230c:	2b00      	cmp	r3, #0
 800230e:	d101      	bne.n	8002314 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8002310:	2320      	movs	r3, #32
 8002312:	e003      	b.n	800231c <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8002314:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002316:	fab3 f383 	clz	r3, r3
 800231a:	b2db      	uxtb	r3, r3
 800231c:	3301      	adds	r3, #1
 800231e:	f003 031f 	and.w	r3, r3, #31
 8002322:	2101      	movs	r1, #1
 8002324:	fa01 f303 	lsl.w	r3, r1, r3
 8002328:	ea42 0103 	orr.w	r1, r2, r3
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002334:	2b00      	cmp	r3, #0
 8002336:	d10a      	bne.n	800234e <HAL_ADC_ConfigChannel+0x38e>
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	0e9b      	lsrs	r3, r3, #26
 800233e:	3301      	adds	r3, #1
 8002340:	f003 021f 	and.w	r2, r3, #31
 8002344:	4613      	mov	r3, r2
 8002346:	005b      	lsls	r3, r3, #1
 8002348:	4413      	add	r3, r2
 800234a:	051b      	lsls	r3, r3, #20
 800234c:	e018      	b.n	8002380 <HAL_ADC_ConfigChannel+0x3c0>
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002354:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002356:	fa93 f3a3 	rbit	r3, r3
 800235a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800235c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800235e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002362:	2b00      	cmp	r3, #0
 8002364:	d101      	bne.n	800236a <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8002366:	2320      	movs	r3, #32
 8002368:	e003      	b.n	8002372 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 800236a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800236c:	fab3 f383 	clz	r3, r3
 8002370:	b2db      	uxtb	r3, r3
 8002372:	3301      	adds	r3, #1
 8002374:	f003 021f 	and.w	r2, r3, #31
 8002378:	4613      	mov	r3, r2
 800237a:	005b      	lsls	r3, r3, #1
 800237c:	4413      	add	r3, r2
 800237e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002380:	430b      	orrs	r3, r1
 8002382:	e07e      	b.n	8002482 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800238c:	2b00      	cmp	r3, #0
 800238e:	d107      	bne.n	80023a0 <HAL_ADC_ConfigChannel+0x3e0>
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	0e9b      	lsrs	r3, r3, #26
 8002396:	3301      	adds	r3, #1
 8002398:	069b      	lsls	r3, r3, #26
 800239a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800239e:	e015      	b.n	80023cc <HAL_ADC_ConfigChannel+0x40c>
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023a8:	fa93 f3a3 	rbit	r3, r3
 80023ac:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80023ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80023b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d101      	bne.n	80023bc <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80023b8:	2320      	movs	r3, #32
 80023ba:	e003      	b.n	80023c4 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80023bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023be:	fab3 f383 	clz	r3, r3
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	3301      	adds	r3, #1
 80023c6:	069b      	lsls	r3, r3, #26
 80023c8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d109      	bne.n	80023ec <HAL_ADC_ConfigChannel+0x42c>
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	0e9b      	lsrs	r3, r3, #26
 80023de:	3301      	adds	r3, #1
 80023e0:	f003 031f 	and.w	r3, r3, #31
 80023e4:	2101      	movs	r1, #1
 80023e6:	fa01 f303 	lsl.w	r3, r1, r3
 80023ea:	e017      	b.n	800241c <HAL_ADC_ConfigChannel+0x45c>
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023f2:	69fb      	ldr	r3, [r7, #28]
 80023f4:	fa93 f3a3 	rbit	r3, r3
 80023f8:	61bb      	str	r3, [r7, #24]
  return result;
 80023fa:	69bb      	ldr	r3, [r7, #24]
 80023fc:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80023fe:	6a3b      	ldr	r3, [r7, #32]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d101      	bne.n	8002408 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8002404:	2320      	movs	r3, #32
 8002406:	e003      	b.n	8002410 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8002408:	6a3b      	ldr	r3, [r7, #32]
 800240a:	fab3 f383 	clz	r3, r3
 800240e:	b2db      	uxtb	r3, r3
 8002410:	3301      	adds	r3, #1
 8002412:	f003 031f 	and.w	r3, r3, #31
 8002416:	2101      	movs	r1, #1
 8002418:	fa01 f303 	lsl.w	r3, r1, r3
 800241c:	ea42 0103 	orr.w	r1, r2, r3
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002428:	2b00      	cmp	r3, #0
 800242a:	d10d      	bne.n	8002448 <HAL_ADC_ConfigChannel+0x488>
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	0e9b      	lsrs	r3, r3, #26
 8002432:	3301      	adds	r3, #1
 8002434:	f003 021f 	and.w	r2, r3, #31
 8002438:	4613      	mov	r3, r2
 800243a:	005b      	lsls	r3, r3, #1
 800243c:	4413      	add	r3, r2
 800243e:	3b1e      	subs	r3, #30
 8002440:	051b      	lsls	r3, r3, #20
 8002442:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002446:	e01b      	b.n	8002480 <HAL_ADC_ConfigChannel+0x4c0>
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	fa93 f3a3 	rbit	r3, r3
 8002454:	60fb      	str	r3, [r7, #12]
  return result;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d101      	bne.n	8002464 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8002460:	2320      	movs	r3, #32
 8002462:	e003      	b.n	800246c <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	fab3 f383 	clz	r3, r3
 800246a:	b2db      	uxtb	r3, r3
 800246c:	3301      	adds	r3, #1
 800246e:	f003 021f 	and.w	r2, r3, #31
 8002472:	4613      	mov	r3, r2
 8002474:	005b      	lsls	r3, r3, #1
 8002476:	4413      	add	r3, r2
 8002478:	3b1e      	subs	r3, #30
 800247a:	051b      	lsls	r3, r3, #20
 800247c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002480:	430b      	orrs	r3, r1
 8002482:	683a      	ldr	r2, [r7, #0]
 8002484:	6892      	ldr	r2, [r2, #8]
 8002486:	4619      	mov	r1, r3
 8002488:	f7ff fb20 	bl	8001acc <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	2b00      	cmp	r3, #0
 8002492:	f280 80c6 	bge.w	8002622 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a67      	ldr	r2, [pc, #412]	; (8002638 <HAL_ADC_ConfigChannel+0x678>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d004      	beq.n	80024aa <HAL_ADC_ConfigChannel+0x4ea>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a65      	ldr	r2, [pc, #404]	; (800263c <HAL_ADC_ConfigChannel+0x67c>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d101      	bne.n	80024ae <HAL_ADC_ConfigChannel+0x4ee>
 80024aa:	4b65      	ldr	r3, [pc, #404]	; (8002640 <HAL_ADC_ConfigChannel+0x680>)
 80024ac:	e000      	b.n	80024b0 <HAL_ADC_ConfigChannel+0x4f0>
 80024ae:	4b65      	ldr	r3, [pc, #404]	; (8002644 <HAL_ADC_ConfigChannel+0x684>)
 80024b0:	4618      	mov	r0, r3
 80024b2:	f7ff fa7d 	bl	80019b0 <LL_ADC_GetCommonPathInternalCh>
 80024b6:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a5e      	ldr	r2, [pc, #376]	; (8002638 <HAL_ADC_ConfigChannel+0x678>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d004      	beq.n	80024cc <HAL_ADC_ConfigChannel+0x50c>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a5d      	ldr	r2, [pc, #372]	; (800263c <HAL_ADC_ConfigChannel+0x67c>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d10e      	bne.n	80024ea <HAL_ADC_ConfigChannel+0x52a>
 80024cc:	485a      	ldr	r0, [pc, #360]	; (8002638 <HAL_ADC_ConfigChannel+0x678>)
 80024ce:	f7ff fb9b 	bl	8001c08 <LL_ADC_IsEnabled>
 80024d2:	4604      	mov	r4, r0
 80024d4:	4859      	ldr	r0, [pc, #356]	; (800263c <HAL_ADC_ConfigChannel+0x67c>)
 80024d6:	f7ff fb97 	bl	8001c08 <LL_ADC_IsEnabled>
 80024da:	4603      	mov	r3, r0
 80024dc:	4323      	orrs	r3, r4
 80024de:	2b00      	cmp	r3, #0
 80024e0:	bf0c      	ite	eq
 80024e2:	2301      	moveq	r3, #1
 80024e4:	2300      	movne	r3, #0
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	e008      	b.n	80024fc <HAL_ADC_ConfigChannel+0x53c>
 80024ea:	4857      	ldr	r0, [pc, #348]	; (8002648 <HAL_ADC_ConfigChannel+0x688>)
 80024ec:	f7ff fb8c 	bl	8001c08 <LL_ADC_IsEnabled>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	bf0c      	ite	eq
 80024f6:	2301      	moveq	r3, #1
 80024f8:	2300      	movne	r3, #0
 80024fa:	b2db      	uxtb	r3, r3
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d07d      	beq.n	80025fc <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a51      	ldr	r2, [pc, #324]	; (800264c <HAL_ADC_ConfigChannel+0x68c>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d130      	bne.n	800256c <HAL_ADC_ConfigChannel+0x5ac>
 800250a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800250c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002510:	2b00      	cmp	r3, #0
 8002512:	d12b      	bne.n	800256c <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a4b      	ldr	r2, [pc, #300]	; (8002648 <HAL_ADC_ConfigChannel+0x688>)
 800251a:	4293      	cmp	r3, r2
 800251c:	f040 8081 	bne.w	8002622 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a44      	ldr	r2, [pc, #272]	; (8002638 <HAL_ADC_ConfigChannel+0x678>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d004      	beq.n	8002534 <HAL_ADC_ConfigChannel+0x574>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a43      	ldr	r2, [pc, #268]	; (800263c <HAL_ADC_ConfigChannel+0x67c>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d101      	bne.n	8002538 <HAL_ADC_ConfigChannel+0x578>
 8002534:	4a42      	ldr	r2, [pc, #264]	; (8002640 <HAL_ADC_ConfigChannel+0x680>)
 8002536:	e000      	b.n	800253a <HAL_ADC_ConfigChannel+0x57a>
 8002538:	4a42      	ldr	r2, [pc, #264]	; (8002644 <HAL_ADC_ConfigChannel+0x684>)
 800253a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800253c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002540:	4619      	mov	r1, r3
 8002542:	4610      	mov	r0, r2
 8002544:	f7ff fa21 	bl	800198a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002548:	4b41      	ldr	r3, [pc, #260]	; (8002650 <HAL_ADC_ConfigChannel+0x690>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	099b      	lsrs	r3, r3, #6
 800254e:	4a41      	ldr	r2, [pc, #260]	; (8002654 <HAL_ADC_ConfigChannel+0x694>)
 8002550:	fba2 2303 	umull	r2, r3, r2, r3
 8002554:	099b      	lsrs	r3, r3, #6
 8002556:	3301      	adds	r3, #1
 8002558:	005b      	lsls	r3, r3, #1
 800255a:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800255c:	e002      	b.n	8002564 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	3b01      	subs	r3, #1
 8002562:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d1f9      	bne.n	800255e <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800256a:	e05a      	b.n	8002622 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a39      	ldr	r2, [pc, #228]	; (8002658 <HAL_ADC_ConfigChannel+0x698>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d11e      	bne.n	80025b4 <HAL_ADC_ConfigChannel+0x5f4>
 8002576:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002578:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800257c:	2b00      	cmp	r3, #0
 800257e:	d119      	bne.n	80025b4 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a30      	ldr	r2, [pc, #192]	; (8002648 <HAL_ADC_ConfigChannel+0x688>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d14b      	bne.n	8002622 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a2a      	ldr	r2, [pc, #168]	; (8002638 <HAL_ADC_ConfigChannel+0x678>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d004      	beq.n	800259e <HAL_ADC_ConfigChannel+0x5de>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a28      	ldr	r2, [pc, #160]	; (800263c <HAL_ADC_ConfigChannel+0x67c>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d101      	bne.n	80025a2 <HAL_ADC_ConfigChannel+0x5e2>
 800259e:	4a28      	ldr	r2, [pc, #160]	; (8002640 <HAL_ADC_ConfigChannel+0x680>)
 80025a0:	e000      	b.n	80025a4 <HAL_ADC_ConfigChannel+0x5e4>
 80025a2:	4a28      	ldr	r2, [pc, #160]	; (8002644 <HAL_ADC_ConfigChannel+0x684>)
 80025a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025aa:	4619      	mov	r1, r3
 80025ac:	4610      	mov	r0, r2
 80025ae:	f7ff f9ec 	bl	800198a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80025b2:	e036      	b.n	8002622 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a28      	ldr	r2, [pc, #160]	; (800265c <HAL_ADC_ConfigChannel+0x69c>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d131      	bne.n	8002622 <HAL_ADC_ConfigChannel+0x662>
 80025be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d12c      	bne.n	8002622 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a1e      	ldr	r2, [pc, #120]	; (8002648 <HAL_ADC_ConfigChannel+0x688>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d127      	bne.n	8002622 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a18      	ldr	r2, [pc, #96]	; (8002638 <HAL_ADC_ConfigChannel+0x678>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d004      	beq.n	80025e6 <HAL_ADC_ConfigChannel+0x626>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a16      	ldr	r2, [pc, #88]	; (800263c <HAL_ADC_ConfigChannel+0x67c>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d101      	bne.n	80025ea <HAL_ADC_ConfigChannel+0x62a>
 80025e6:	4a16      	ldr	r2, [pc, #88]	; (8002640 <HAL_ADC_ConfigChannel+0x680>)
 80025e8:	e000      	b.n	80025ec <HAL_ADC_ConfigChannel+0x62c>
 80025ea:	4a16      	ldr	r2, [pc, #88]	; (8002644 <HAL_ADC_ConfigChannel+0x684>)
 80025ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025ee:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80025f2:	4619      	mov	r1, r3
 80025f4:	4610      	mov	r0, r2
 80025f6:	f7ff f9c8 	bl	800198a <LL_ADC_SetCommonPathInternalCh>
 80025fa:	e012      	b.n	8002622 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002600:	f043 0220 	orr.w	r2, r3, #32
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800260e:	e008      	b.n	8002622 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002614:	f043 0220 	orr.w	r2, r3, #32
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2200      	movs	r2, #0
 8002626:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800262a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800262e:	4618      	mov	r0, r3
 8002630:	3784      	adds	r7, #132	; 0x84
 8002632:	46bd      	mov	sp, r7
 8002634:	bd90      	pop	{r4, r7, pc}
 8002636:	bf00      	nop
 8002638:	40022000 	.word	0x40022000
 800263c:	40022100 	.word	0x40022100
 8002640:	40022300 	.word	0x40022300
 8002644:	58026300 	.word	0x58026300
 8002648:	58026000 	.word	0x58026000
 800264c:	cb840000 	.word	0xcb840000
 8002650:	240002f8 	.word	0x240002f8
 8002654:	053e2d63 	.word	0x053e2d63
 8002658:	c7520000 	.word	0xc7520000
 800265c:	cfb80000 	.word	0xcfb80000

08002660 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b084      	sub	sp, #16
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a7a      	ldr	r2, [pc, #488]	; (8002858 <ADC_ConfigureBoostMode+0x1f8>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d004      	beq.n	800267c <ADC_ConfigureBoostMode+0x1c>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a79      	ldr	r2, [pc, #484]	; (800285c <ADC_ConfigureBoostMode+0x1fc>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d109      	bne.n	8002690 <ADC_ConfigureBoostMode+0x30>
 800267c:	4b78      	ldr	r3, [pc, #480]	; (8002860 <ADC_ConfigureBoostMode+0x200>)
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002684:	2b00      	cmp	r3, #0
 8002686:	bf14      	ite	ne
 8002688:	2301      	movne	r3, #1
 800268a:	2300      	moveq	r3, #0
 800268c:	b2db      	uxtb	r3, r3
 800268e:	e008      	b.n	80026a2 <ADC_ConfigureBoostMode+0x42>
 8002690:	4b74      	ldr	r3, [pc, #464]	; (8002864 <ADC_ConfigureBoostMode+0x204>)
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002698:	2b00      	cmp	r3, #0
 800269a:	bf14      	ite	ne
 800269c:	2301      	movne	r3, #1
 800269e:	2300      	moveq	r3, #0
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d01c      	beq.n	80026e0 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80026a6:	f002 fe4d 	bl	8005344 <HAL_RCC_GetHCLKFreq>
 80026aa:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80026b4:	d010      	beq.n	80026d8 <ADC_ConfigureBoostMode+0x78>
 80026b6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80026ba:	d873      	bhi.n	80027a4 <ADC_ConfigureBoostMode+0x144>
 80026bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026c0:	d002      	beq.n	80026c8 <ADC_ConfigureBoostMode+0x68>
 80026c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80026c6:	d16d      	bne.n	80027a4 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	0c1b      	lsrs	r3, r3, #16
 80026ce:	68fa      	ldr	r2, [r7, #12]
 80026d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80026d4:	60fb      	str	r3, [r7, #12]
        break;
 80026d6:	e068      	b.n	80027aa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	089b      	lsrs	r3, r3, #2
 80026dc:	60fb      	str	r3, [r7, #12]
        break;
 80026de:	e064      	b.n	80027aa <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80026e0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80026e4:	f04f 0100 	mov.w	r1, #0
 80026e8:	f004 f87c 	bl	80067e4 <HAL_RCCEx_GetPeriphCLKFreq>
 80026ec:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80026f6:	d051      	beq.n	800279c <ADC_ConfigureBoostMode+0x13c>
 80026f8:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80026fc:	d854      	bhi.n	80027a8 <ADC_ConfigureBoostMode+0x148>
 80026fe:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002702:	d047      	beq.n	8002794 <ADC_ConfigureBoostMode+0x134>
 8002704:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002708:	d84e      	bhi.n	80027a8 <ADC_ConfigureBoostMode+0x148>
 800270a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800270e:	d03d      	beq.n	800278c <ADC_ConfigureBoostMode+0x12c>
 8002710:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002714:	d848      	bhi.n	80027a8 <ADC_ConfigureBoostMode+0x148>
 8002716:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800271a:	d033      	beq.n	8002784 <ADC_ConfigureBoostMode+0x124>
 800271c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002720:	d842      	bhi.n	80027a8 <ADC_ConfigureBoostMode+0x148>
 8002722:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002726:	d029      	beq.n	800277c <ADC_ConfigureBoostMode+0x11c>
 8002728:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800272c:	d83c      	bhi.n	80027a8 <ADC_ConfigureBoostMode+0x148>
 800272e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002732:	d01a      	beq.n	800276a <ADC_ConfigureBoostMode+0x10a>
 8002734:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002738:	d836      	bhi.n	80027a8 <ADC_ConfigureBoostMode+0x148>
 800273a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800273e:	d014      	beq.n	800276a <ADC_ConfigureBoostMode+0x10a>
 8002740:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002744:	d830      	bhi.n	80027a8 <ADC_ConfigureBoostMode+0x148>
 8002746:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800274a:	d00e      	beq.n	800276a <ADC_ConfigureBoostMode+0x10a>
 800274c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002750:	d82a      	bhi.n	80027a8 <ADC_ConfigureBoostMode+0x148>
 8002752:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002756:	d008      	beq.n	800276a <ADC_ConfigureBoostMode+0x10a>
 8002758:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800275c:	d824      	bhi.n	80027a8 <ADC_ConfigureBoostMode+0x148>
 800275e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002762:	d002      	beq.n	800276a <ADC_ConfigureBoostMode+0x10a>
 8002764:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002768:	d11e      	bne.n	80027a8 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	0c9b      	lsrs	r3, r3, #18
 8002770:	005b      	lsls	r3, r3, #1
 8002772:	68fa      	ldr	r2, [r7, #12]
 8002774:	fbb2 f3f3 	udiv	r3, r2, r3
 8002778:	60fb      	str	r3, [r7, #12]
        break;
 800277a:	e016      	b.n	80027aa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	091b      	lsrs	r3, r3, #4
 8002780:	60fb      	str	r3, [r7, #12]
        break;
 8002782:	e012      	b.n	80027aa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	095b      	lsrs	r3, r3, #5
 8002788:	60fb      	str	r3, [r7, #12]
        break;
 800278a:	e00e      	b.n	80027aa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	099b      	lsrs	r3, r3, #6
 8002790:	60fb      	str	r3, [r7, #12]
        break;
 8002792:	e00a      	b.n	80027aa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	09db      	lsrs	r3, r3, #7
 8002798:	60fb      	str	r3, [r7, #12]
        break;
 800279a:	e006      	b.n	80027aa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	0a1b      	lsrs	r3, r3, #8
 80027a0:	60fb      	str	r3, [r7, #12]
        break;
 80027a2:	e002      	b.n	80027aa <ADC_ConfigureBoostMode+0x14a>
        break;
 80027a4:	bf00      	nop
 80027a6:	e000      	b.n	80027aa <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80027a8:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80027aa:	f7ff f8b9 	bl	8001920 <HAL_GetREVID>
 80027ae:	4603      	mov	r3, r0
 80027b0:	f241 0203 	movw	r2, #4099	; 0x1003
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d815      	bhi.n	80027e4 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	4a2b      	ldr	r2, [pc, #172]	; (8002868 <ADC_ConfigureBoostMode+0x208>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d908      	bls.n	80027d2 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	689a      	ldr	r2, [r3, #8]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027ce:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80027d0:	e03e      	b.n	8002850 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	689a      	ldr	r2, [r3, #8]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80027e0:	609a      	str	r2, [r3, #8]
}
 80027e2:	e035      	b.n	8002850 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	085b      	lsrs	r3, r3, #1
 80027e8:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	4a1f      	ldr	r2, [pc, #124]	; (800286c <ADC_ConfigureBoostMode+0x20c>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d808      	bhi.n	8002804 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	689a      	ldr	r2, [r3, #8]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002800:	609a      	str	r2, [r3, #8]
}
 8002802:	e025      	b.n	8002850 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	4a1a      	ldr	r2, [pc, #104]	; (8002870 <ADC_ConfigureBoostMode+0x210>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d80a      	bhi.n	8002822 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800281e:	609a      	str	r2, [r3, #8]
}
 8002820:	e016      	b.n	8002850 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	4a13      	ldr	r2, [pc, #76]	; (8002874 <ADC_ConfigureBoostMode+0x214>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d80a      	bhi.n	8002840 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800283c:	609a      	str	r2, [r3, #8]
}
 800283e:	e007      	b.n	8002850 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	689a      	ldr	r2, [r3, #8]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800284e:	609a      	str	r2, [r3, #8]
}
 8002850:	bf00      	nop
 8002852:	3710      	adds	r7, #16
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}
 8002858:	40022000 	.word	0x40022000
 800285c:	40022100 	.word	0x40022100
 8002860:	40022300 	.word	0x40022300
 8002864:	58026300 	.word	0x58026300
 8002868:	01312d00 	.word	0x01312d00
 800286c:	005f5e10 	.word	0x005f5e10
 8002870:	00bebc20 	.word	0x00bebc20
 8002874:	017d7840 	.word	0x017d7840

08002878 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002878:	b480      	push	{r7}
 800287a:	b085      	sub	sp, #20
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	f003 0307 	and.w	r3, r3, #7
 8002886:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002888:	4b0b      	ldr	r3, [pc, #44]	; (80028b8 <__NVIC_SetPriorityGrouping+0x40>)
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800288e:	68ba      	ldr	r2, [r7, #8]
 8002890:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002894:	4013      	ands	r3, r2
 8002896:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80028a0:	4b06      	ldr	r3, [pc, #24]	; (80028bc <__NVIC_SetPriorityGrouping+0x44>)
 80028a2:	4313      	orrs	r3, r2
 80028a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028a6:	4a04      	ldr	r2, [pc, #16]	; (80028b8 <__NVIC_SetPriorityGrouping+0x40>)
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	60d3      	str	r3, [r2, #12]
}
 80028ac:	bf00      	nop
 80028ae:	3714      	adds	r7, #20
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr
 80028b8:	e000ed00 	.word	0xe000ed00
 80028bc:	05fa0000 	.word	0x05fa0000

080028c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028c0:	b480      	push	{r7}
 80028c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028c4:	4b04      	ldr	r3, [pc, #16]	; (80028d8 <__NVIC_GetPriorityGrouping+0x18>)
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	0a1b      	lsrs	r3, r3, #8
 80028ca:	f003 0307 	and.w	r3, r3, #7
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr
 80028d8:	e000ed00 	.word	0xe000ed00

080028dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028dc:	b480      	push	{r7}
 80028de:	b083      	sub	sp, #12
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	4603      	mov	r3, r0
 80028e4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80028e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	db0b      	blt.n	8002906 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028ee:	88fb      	ldrh	r3, [r7, #6]
 80028f0:	f003 021f 	and.w	r2, r3, #31
 80028f4:	4907      	ldr	r1, [pc, #28]	; (8002914 <__NVIC_EnableIRQ+0x38>)
 80028f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80028fa:	095b      	lsrs	r3, r3, #5
 80028fc:	2001      	movs	r0, #1
 80028fe:	fa00 f202 	lsl.w	r2, r0, r2
 8002902:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002906:	bf00      	nop
 8002908:	370c      	adds	r7, #12
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr
 8002912:	bf00      	nop
 8002914:	e000e100 	.word	0xe000e100

08002918 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002918:	b480      	push	{r7}
 800291a:	b083      	sub	sp, #12
 800291c:	af00      	add	r7, sp, #0
 800291e:	4603      	mov	r3, r0
 8002920:	6039      	str	r1, [r7, #0]
 8002922:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002924:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002928:	2b00      	cmp	r3, #0
 800292a:	db0a      	blt.n	8002942 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	b2da      	uxtb	r2, r3
 8002930:	490c      	ldr	r1, [pc, #48]	; (8002964 <__NVIC_SetPriority+0x4c>)
 8002932:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002936:	0112      	lsls	r2, r2, #4
 8002938:	b2d2      	uxtb	r2, r2
 800293a:	440b      	add	r3, r1
 800293c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002940:	e00a      	b.n	8002958 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	b2da      	uxtb	r2, r3
 8002946:	4908      	ldr	r1, [pc, #32]	; (8002968 <__NVIC_SetPriority+0x50>)
 8002948:	88fb      	ldrh	r3, [r7, #6]
 800294a:	f003 030f 	and.w	r3, r3, #15
 800294e:	3b04      	subs	r3, #4
 8002950:	0112      	lsls	r2, r2, #4
 8002952:	b2d2      	uxtb	r2, r2
 8002954:	440b      	add	r3, r1
 8002956:	761a      	strb	r2, [r3, #24]
}
 8002958:	bf00      	nop
 800295a:	370c      	adds	r7, #12
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr
 8002964:	e000e100 	.word	0xe000e100
 8002968:	e000ed00 	.word	0xe000ed00

0800296c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800296c:	b480      	push	{r7}
 800296e:	b089      	sub	sp, #36	; 0x24
 8002970:	af00      	add	r7, sp, #0
 8002972:	60f8      	str	r0, [r7, #12]
 8002974:	60b9      	str	r1, [r7, #8]
 8002976:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	f003 0307 	and.w	r3, r3, #7
 800297e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	f1c3 0307 	rsb	r3, r3, #7
 8002986:	2b04      	cmp	r3, #4
 8002988:	bf28      	it	cs
 800298a:	2304      	movcs	r3, #4
 800298c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	3304      	adds	r3, #4
 8002992:	2b06      	cmp	r3, #6
 8002994:	d902      	bls.n	800299c <NVIC_EncodePriority+0x30>
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	3b03      	subs	r3, #3
 800299a:	e000      	b.n	800299e <NVIC_EncodePriority+0x32>
 800299c:	2300      	movs	r3, #0
 800299e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029a0:	f04f 32ff 	mov.w	r2, #4294967295
 80029a4:	69bb      	ldr	r3, [r7, #24]
 80029a6:	fa02 f303 	lsl.w	r3, r2, r3
 80029aa:	43da      	mvns	r2, r3
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	401a      	ands	r2, r3
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029b4:	f04f 31ff 	mov.w	r1, #4294967295
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	fa01 f303 	lsl.w	r3, r1, r3
 80029be:	43d9      	mvns	r1, r3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029c4:	4313      	orrs	r3, r2
         );
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3724      	adds	r7, #36	; 0x24
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr
	...

080029d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b082      	sub	sp, #8
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	3b01      	subs	r3, #1
 80029e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029e4:	d301      	bcc.n	80029ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029e6:	2301      	movs	r3, #1
 80029e8:	e00f      	b.n	8002a0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029ea:	4a0a      	ldr	r2, [pc, #40]	; (8002a14 <SysTick_Config+0x40>)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	3b01      	subs	r3, #1
 80029f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029f2:	210f      	movs	r1, #15
 80029f4:	f04f 30ff 	mov.w	r0, #4294967295
 80029f8:	f7ff ff8e 	bl	8002918 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029fc:	4b05      	ldr	r3, [pc, #20]	; (8002a14 <SysTick_Config+0x40>)
 80029fe:	2200      	movs	r2, #0
 8002a00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a02:	4b04      	ldr	r3, [pc, #16]	; (8002a14 <SysTick_Config+0x40>)
 8002a04:	2207      	movs	r2, #7
 8002a06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a08:	2300      	movs	r3, #0
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3708      	adds	r7, #8
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	e000e010 	.word	0xe000e010

08002a18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b082      	sub	sp, #8
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	f7ff ff29 	bl	8002878 <__NVIC_SetPriorityGrouping>
}
 8002a26:	bf00      	nop
 8002a28:	3708      	adds	r7, #8
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}

08002a2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a2e:	b580      	push	{r7, lr}
 8002a30:	b086      	sub	sp, #24
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	4603      	mov	r3, r0
 8002a36:	60b9      	str	r1, [r7, #8]
 8002a38:	607a      	str	r2, [r7, #4]
 8002a3a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002a3c:	f7ff ff40 	bl	80028c0 <__NVIC_GetPriorityGrouping>
 8002a40:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a42:	687a      	ldr	r2, [r7, #4]
 8002a44:	68b9      	ldr	r1, [r7, #8]
 8002a46:	6978      	ldr	r0, [r7, #20]
 8002a48:	f7ff ff90 	bl	800296c <NVIC_EncodePriority>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002a52:	4611      	mov	r1, r2
 8002a54:	4618      	mov	r0, r3
 8002a56:	f7ff ff5f 	bl	8002918 <__NVIC_SetPriority>
}
 8002a5a:	bf00      	nop
 8002a5c:	3718      	adds	r7, #24
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}

08002a62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a62:	b580      	push	{r7, lr}
 8002a64:	b082      	sub	sp, #8
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	4603      	mov	r3, r0
 8002a6a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a6c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a70:	4618      	mov	r0, r3
 8002a72:	f7ff ff33 	bl	80028dc <__NVIC_EnableIRQ>
}
 8002a76:	bf00      	nop
 8002a78:	3708      	adds	r7, #8
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}

08002a7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a7e:	b580      	push	{r7, lr}
 8002a80:	b082      	sub	sp, #8
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f7ff ffa4 	bl	80029d4 <SysTick_Config>
 8002a8c:	4603      	mov	r3, r0
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3708      	adds	r7, #8
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}
	...

08002a98 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b089      	sub	sp, #36	; 0x24
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002aa6:	4b89      	ldr	r3, [pc, #548]	; (8002ccc <HAL_GPIO_Init+0x234>)
 8002aa8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002aaa:	e194      	b.n	8002dd6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	2101      	movs	r1, #1
 8002ab2:	69fb      	ldr	r3, [r7, #28]
 8002ab4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ab8:	4013      	ands	r3, r2
 8002aba:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	f000 8186 	beq.w	8002dd0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f003 0303 	and.w	r3, r3, #3
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d005      	beq.n	8002adc <HAL_GPIO_Init+0x44>
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f003 0303 	and.w	r3, r3, #3
 8002ad8:	2b02      	cmp	r3, #2
 8002ada:	d130      	bne.n	8002b3e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	005b      	lsls	r3, r3, #1
 8002ae6:	2203      	movs	r2, #3
 8002ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aec:	43db      	mvns	r3, r3
 8002aee:	69ba      	ldr	r2, [r7, #24]
 8002af0:	4013      	ands	r3, r2
 8002af2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	68da      	ldr	r2, [r3, #12]
 8002af8:	69fb      	ldr	r3, [r7, #28]
 8002afa:	005b      	lsls	r3, r3, #1
 8002afc:	fa02 f303 	lsl.w	r3, r2, r3
 8002b00:	69ba      	ldr	r2, [r7, #24]
 8002b02:	4313      	orrs	r3, r2
 8002b04:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	69ba      	ldr	r2, [r7, #24]
 8002b0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002b12:	2201      	movs	r2, #1
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1a:	43db      	mvns	r3, r3
 8002b1c:	69ba      	ldr	r2, [r7, #24]
 8002b1e:	4013      	ands	r3, r2
 8002b20:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	091b      	lsrs	r3, r3, #4
 8002b28:	f003 0201 	and.w	r2, r3, #1
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b32:	69ba      	ldr	r2, [r7, #24]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	69ba      	ldr	r2, [r7, #24]
 8002b3c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	f003 0303 	and.w	r3, r3, #3
 8002b46:	2b03      	cmp	r3, #3
 8002b48:	d017      	beq.n	8002b7a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	68db      	ldr	r3, [r3, #12]
 8002b4e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002b50:	69fb      	ldr	r3, [r7, #28]
 8002b52:	005b      	lsls	r3, r3, #1
 8002b54:	2203      	movs	r2, #3
 8002b56:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5a:	43db      	mvns	r3, r3
 8002b5c:	69ba      	ldr	r2, [r7, #24]
 8002b5e:	4013      	ands	r3, r2
 8002b60:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	689a      	ldr	r2, [r3, #8]
 8002b66:	69fb      	ldr	r3, [r7, #28]
 8002b68:	005b      	lsls	r3, r3, #1
 8002b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6e:	69ba      	ldr	r2, [r7, #24]
 8002b70:	4313      	orrs	r3, r2
 8002b72:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	69ba      	ldr	r2, [r7, #24]
 8002b78:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	f003 0303 	and.w	r3, r3, #3
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d123      	bne.n	8002bce <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	08da      	lsrs	r2, r3, #3
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	3208      	adds	r2, #8
 8002b8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	f003 0307 	and.w	r3, r3, #7
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	220f      	movs	r2, #15
 8002b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba2:	43db      	mvns	r3, r3
 8002ba4:	69ba      	ldr	r2, [r7, #24]
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	691a      	ldr	r2, [r3, #16]
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	f003 0307 	and.w	r3, r3, #7
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bba:	69ba      	ldr	r2, [r7, #24]
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002bc0:	69fb      	ldr	r3, [r7, #28]
 8002bc2:	08da      	lsrs	r2, r3, #3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	3208      	adds	r2, #8
 8002bc8:	69b9      	ldr	r1, [r7, #24]
 8002bca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002bd4:	69fb      	ldr	r3, [r7, #28]
 8002bd6:	005b      	lsls	r3, r3, #1
 8002bd8:	2203      	movs	r2, #3
 8002bda:	fa02 f303 	lsl.w	r3, r2, r3
 8002bde:	43db      	mvns	r3, r3
 8002be0:	69ba      	ldr	r2, [r7, #24]
 8002be2:	4013      	ands	r3, r2
 8002be4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	f003 0203 	and.w	r2, r3, #3
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	005b      	lsls	r3, r3, #1
 8002bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf6:	69ba      	ldr	r2, [r7, #24]
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	69ba      	ldr	r2, [r7, #24]
 8002c00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	f000 80e0 	beq.w	8002dd0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c10:	4b2f      	ldr	r3, [pc, #188]	; (8002cd0 <HAL_GPIO_Init+0x238>)
 8002c12:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002c16:	4a2e      	ldr	r2, [pc, #184]	; (8002cd0 <HAL_GPIO_Init+0x238>)
 8002c18:	f043 0302 	orr.w	r3, r3, #2
 8002c1c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002c20:	4b2b      	ldr	r3, [pc, #172]	; (8002cd0 <HAL_GPIO_Init+0x238>)
 8002c22:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002c26:	f003 0302 	and.w	r3, r3, #2
 8002c2a:	60fb      	str	r3, [r7, #12]
 8002c2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c2e:	4a29      	ldr	r2, [pc, #164]	; (8002cd4 <HAL_GPIO_Init+0x23c>)
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	089b      	lsrs	r3, r3, #2
 8002c34:	3302      	adds	r3, #2
 8002c36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002c3c:	69fb      	ldr	r3, [r7, #28]
 8002c3e:	f003 0303 	and.w	r3, r3, #3
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	220f      	movs	r2, #15
 8002c46:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4a:	43db      	mvns	r3, r3
 8002c4c:	69ba      	ldr	r2, [r7, #24]
 8002c4e:	4013      	ands	r3, r2
 8002c50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	4a20      	ldr	r2, [pc, #128]	; (8002cd8 <HAL_GPIO_Init+0x240>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d052      	beq.n	8002d00 <HAL_GPIO_Init+0x268>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	4a1f      	ldr	r2, [pc, #124]	; (8002cdc <HAL_GPIO_Init+0x244>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d031      	beq.n	8002cc6 <HAL_GPIO_Init+0x22e>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	4a1e      	ldr	r2, [pc, #120]	; (8002ce0 <HAL_GPIO_Init+0x248>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d02b      	beq.n	8002cc2 <HAL_GPIO_Init+0x22a>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	4a1d      	ldr	r2, [pc, #116]	; (8002ce4 <HAL_GPIO_Init+0x24c>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d025      	beq.n	8002cbe <HAL_GPIO_Init+0x226>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	4a1c      	ldr	r2, [pc, #112]	; (8002ce8 <HAL_GPIO_Init+0x250>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d01f      	beq.n	8002cba <HAL_GPIO_Init+0x222>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	4a1b      	ldr	r2, [pc, #108]	; (8002cec <HAL_GPIO_Init+0x254>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d019      	beq.n	8002cb6 <HAL_GPIO_Init+0x21e>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	4a1a      	ldr	r2, [pc, #104]	; (8002cf0 <HAL_GPIO_Init+0x258>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d013      	beq.n	8002cb2 <HAL_GPIO_Init+0x21a>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4a19      	ldr	r2, [pc, #100]	; (8002cf4 <HAL_GPIO_Init+0x25c>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d00d      	beq.n	8002cae <HAL_GPIO_Init+0x216>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	4a18      	ldr	r2, [pc, #96]	; (8002cf8 <HAL_GPIO_Init+0x260>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d007      	beq.n	8002caa <HAL_GPIO_Init+0x212>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	4a17      	ldr	r2, [pc, #92]	; (8002cfc <HAL_GPIO_Init+0x264>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d101      	bne.n	8002ca6 <HAL_GPIO_Init+0x20e>
 8002ca2:	2309      	movs	r3, #9
 8002ca4:	e02d      	b.n	8002d02 <HAL_GPIO_Init+0x26a>
 8002ca6:	230a      	movs	r3, #10
 8002ca8:	e02b      	b.n	8002d02 <HAL_GPIO_Init+0x26a>
 8002caa:	2308      	movs	r3, #8
 8002cac:	e029      	b.n	8002d02 <HAL_GPIO_Init+0x26a>
 8002cae:	2307      	movs	r3, #7
 8002cb0:	e027      	b.n	8002d02 <HAL_GPIO_Init+0x26a>
 8002cb2:	2306      	movs	r3, #6
 8002cb4:	e025      	b.n	8002d02 <HAL_GPIO_Init+0x26a>
 8002cb6:	2305      	movs	r3, #5
 8002cb8:	e023      	b.n	8002d02 <HAL_GPIO_Init+0x26a>
 8002cba:	2304      	movs	r3, #4
 8002cbc:	e021      	b.n	8002d02 <HAL_GPIO_Init+0x26a>
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	e01f      	b.n	8002d02 <HAL_GPIO_Init+0x26a>
 8002cc2:	2302      	movs	r3, #2
 8002cc4:	e01d      	b.n	8002d02 <HAL_GPIO_Init+0x26a>
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e01b      	b.n	8002d02 <HAL_GPIO_Init+0x26a>
 8002cca:	bf00      	nop
 8002ccc:	58000080 	.word	0x58000080
 8002cd0:	58024400 	.word	0x58024400
 8002cd4:	58000400 	.word	0x58000400
 8002cd8:	58020000 	.word	0x58020000
 8002cdc:	58020400 	.word	0x58020400
 8002ce0:	58020800 	.word	0x58020800
 8002ce4:	58020c00 	.word	0x58020c00
 8002ce8:	58021000 	.word	0x58021000
 8002cec:	58021400 	.word	0x58021400
 8002cf0:	58021800 	.word	0x58021800
 8002cf4:	58021c00 	.word	0x58021c00
 8002cf8:	58022000 	.word	0x58022000
 8002cfc:	58022400 	.word	0x58022400
 8002d00:	2300      	movs	r3, #0
 8002d02:	69fa      	ldr	r2, [r7, #28]
 8002d04:	f002 0203 	and.w	r2, r2, #3
 8002d08:	0092      	lsls	r2, r2, #2
 8002d0a:	4093      	lsls	r3, r2
 8002d0c:	69ba      	ldr	r2, [r7, #24]
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d12:	4938      	ldr	r1, [pc, #224]	; (8002df4 <HAL_GPIO_Init+0x35c>)
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	089b      	lsrs	r3, r3, #2
 8002d18:	3302      	adds	r3, #2
 8002d1a:	69ba      	ldr	r2, [r7, #24]
 8002d1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002d20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	43db      	mvns	r3, r3
 8002d2c:	69ba      	ldr	r2, [r7, #24]
 8002d2e:	4013      	ands	r3, r2
 8002d30:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d003      	beq.n	8002d46 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002d3e:	69ba      	ldr	r2, [r7, #24]
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	4313      	orrs	r3, r2
 8002d44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002d46:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d4a:	69bb      	ldr	r3, [r7, #24]
 8002d4c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002d4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	43db      	mvns	r3, r3
 8002d5a:	69ba      	ldr	r2, [r7, #24]
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d003      	beq.n	8002d74 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002d6c:	69ba      	ldr	r2, [r7, #24]
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	4313      	orrs	r3, r2
 8002d72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002d74:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d78:	69bb      	ldr	r3, [r7, #24]
 8002d7a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	43db      	mvns	r3, r3
 8002d86:	69ba      	ldr	r2, [r7, #24]
 8002d88:	4013      	ands	r3, r2
 8002d8a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d003      	beq.n	8002da0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002d98:	69ba      	ldr	r2, [r7, #24]
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	69ba      	ldr	r2, [r7, #24]
 8002da4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	43db      	mvns	r3, r3
 8002db0:	69ba      	ldr	r2, [r7, #24]
 8002db2:	4013      	ands	r3, r2
 8002db4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d003      	beq.n	8002dca <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002dc2:	69ba      	ldr	r2, [r7, #24]
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	69ba      	ldr	r2, [r7, #24]
 8002dce:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002dd0:	69fb      	ldr	r3, [r7, #28]
 8002dd2:	3301      	adds	r3, #1
 8002dd4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	fa22 f303 	lsr.w	r3, r2, r3
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	f47f ae63 	bne.w	8002aac <HAL_GPIO_Init+0x14>
  }
}
 8002de6:	bf00      	nop
 8002de8:	bf00      	nop
 8002dea:	3724      	adds	r7, #36	; 0x24
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr
 8002df4:	58000400 	.word	0x58000400

08002df8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
 8002e00:	460b      	mov	r3, r1
 8002e02:	807b      	strh	r3, [r7, #2]
 8002e04:	4613      	mov	r3, r2
 8002e06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002e08:	787b      	ldrb	r3, [r7, #1]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d003      	beq.n	8002e16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e0e:	887a      	ldrh	r2, [r7, #2]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002e14:	e003      	b.n	8002e1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002e16:	887b      	ldrh	r3, [r7, #2]
 8002e18:	041a      	lsls	r2, r3, #16
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	619a      	str	r2, [r3, #24]
}
 8002e1e:	bf00      	nop
 8002e20:	370c      	adds	r7, #12
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr

08002e2a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002e2a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e2c:	b08f      	sub	sp, #60	; 0x3c
 8002e2e:	af0a      	add	r7, sp, #40	; 0x28
 8002e30:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d101      	bne.n	8002e3c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e116      	b.n	800306a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d106      	bne.n	8002e5c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f008 fe40 	bl	800badc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2203      	movs	r2, #3
 8002e60:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d102      	bne.n	8002e76 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2200      	movs	r2, #0
 8002e74:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f005 fa29 	bl	80082d2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	603b      	str	r3, [r7, #0]
 8002e86:	687e      	ldr	r6, [r7, #4]
 8002e88:	466d      	mov	r5, sp
 8002e8a:	f106 0410 	add.w	r4, r6, #16
 8002e8e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e90:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e94:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e96:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002e9a:	e885 0003 	stmia.w	r5, {r0, r1}
 8002e9e:	1d33      	adds	r3, r6, #4
 8002ea0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ea2:	6838      	ldr	r0, [r7, #0]
 8002ea4:	f005 f8f4 	bl	8008090 <USB_CoreInit>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d005      	beq.n	8002eba <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2202      	movs	r2, #2
 8002eb2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e0d7      	b.n	800306a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	2100      	movs	r1, #0
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f005 fa17 	bl	80082f4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	73fb      	strb	r3, [r7, #15]
 8002eca:	e04a      	b.n	8002f62 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002ecc:	7bfa      	ldrb	r2, [r7, #15]
 8002ece:	6879      	ldr	r1, [r7, #4]
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	00db      	lsls	r3, r3, #3
 8002ed4:	4413      	add	r3, r2
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	440b      	add	r3, r1
 8002eda:	333d      	adds	r3, #61	; 0x3d
 8002edc:	2201      	movs	r2, #1
 8002ede:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002ee0:	7bfa      	ldrb	r2, [r7, #15]
 8002ee2:	6879      	ldr	r1, [r7, #4]
 8002ee4:	4613      	mov	r3, r2
 8002ee6:	00db      	lsls	r3, r3, #3
 8002ee8:	4413      	add	r3, r2
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	440b      	add	r3, r1
 8002eee:	333c      	adds	r3, #60	; 0x3c
 8002ef0:	7bfa      	ldrb	r2, [r7, #15]
 8002ef2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002ef4:	7bfa      	ldrb	r2, [r7, #15]
 8002ef6:	7bfb      	ldrb	r3, [r7, #15]
 8002ef8:	b298      	uxth	r0, r3
 8002efa:	6879      	ldr	r1, [r7, #4]
 8002efc:	4613      	mov	r3, r2
 8002efe:	00db      	lsls	r3, r3, #3
 8002f00:	4413      	add	r3, r2
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	440b      	add	r3, r1
 8002f06:	3356      	adds	r3, #86	; 0x56
 8002f08:	4602      	mov	r2, r0
 8002f0a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002f0c:	7bfa      	ldrb	r2, [r7, #15]
 8002f0e:	6879      	ldr	r1, [r7, #4]
 8002f10:	4613      	mov	r3, r2
 8002f12:	00db      	lsls	r3, r3, #3
 8002f14:	4413      	add	r3, r2
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	440b      	add	r3, r1
 8002f1a:	3340      	adds	r3, #64	; 0x40
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002f20:	7bfa      	ldrb	r2, [r7, #15]
 8002f22:	6879      	ldr	r1, [r7, #4]
 8002f24:	4613      	mov	r3, r2
 8002f26:	00db      	lsls	r3, r3, #3
 8002f28:	4413      	add	r3, r2
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	440b      	add	r3, r1
 8002f2e:	3344      	adds	r3, #68	; 0x44
 8002f30:	2200      	movs	r2, #0
 8002f32:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002f34:	7bfa      	ldrb	r2, [r7, #15]
 8002f36:	6879      	ldr	r1, [r7, #4]
 8002f38:	4613      	mov	r3, r2
 8002f3a:	00db      	lsls	r3, r3, #3
 8002f3c:	4413      	add	r3, r2
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	440b      	add	r3, r1
 8002f42:	3348      	adds	r3, #72	; 0x48
 8002f44:	2200      	movs	r2, #0
 8002f46:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002f48:	7bfa      	ldrb	r2, [r7, #15]
 8002f4a:	6879      	ldr	r1, [r7, #4]
 8002f4c:	4613      	mov	r3, r2
 8002f4e:	00db      	lsls	r3, r3, #3
 8002f50:	4413      	add	r3, r2
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	440b      	add	r3, r1
 8002f56:	334c      	adds	r3, #76	; 0x4c
 8002f58:	2200      	movs	r2, #0
 8002f5a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f5c:	7bfb      	ldrb	r3, [r7, #15]
 8002f5e:	3301      	adds	r3, #1
 8002f60:	73fb      	strb	r3, [r7, #15]
 8002f62:	7bfa      	ldrb	r2, [r7, #15]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d3af      	bcc.n	8002ecc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	73fb      	strb	r3, [r7, #15]
 8002f70:	e044      	b.n	8002ffc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002f72:	7bfa      	ldrb	r2, [r7, #15]
 8002f74:	6879      	ldr	r1, [r7, #4]
 8002f76:	4613      	mov	r3, r2
 8002f78:	00db      	lsls	r3, r3, #3
 8002f7a:	4413      	add	r3, r2
 8002f7c:	009b      	lsls	r3, r3, #2
 8002f7e:	440b      	add	r3, r1
 8002f80:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002f84:	2200      	movs	r2, #0
 8002f86:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002f88:	7bfa      	ldrb	r2, [r7, #15]
 8002f8a:	6879      	ldr	r1, [r7, #4]
 8002f8c:	4613      	mov	r3, r2
 8002f8e:	00db      	lsls	r3, r3, #3
 8002f90:	4413      	add	r3, r2
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	440b      	add	r3, r1
 8002f96:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002f9a:	7bfa      	ldrb	r2, [r7, #15]
 8002f9c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002f9e:	7bfa      	ldrb	r2, [r7, #15]
 8002fa0:	6879      	ldr	r1, [r7, #4]
 8002fa2:	4613      	mov	r3, r2
 8002fa4:	00db      	lsls	r3, r3, #3
 8002fa6:	4413      	add	r3, r2
 8002fa8:	009b      	lsls	r3, r3, #2
 8002faa:	440b      	add	r3, r1
 8002fac:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002fb4:	7bfa      	ldrb	r2, [r7, #15]
 8002fb6:	6879      	ldr	r1, [r7, #4]
 8002fb8:	4613      	mov	r3, r2
 8002fba:	00db      	lsls	r3, r3, #3
 8002fbc:	4413      	add	r3, r2
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	440b      	add	r3, r1
 8002fc2:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002fca:	7bfa      	ldrb	r2, [r7, #15]
 8002fcc:	6879      	ldr	r1, [r7, #4]
 8002fce:	4613      	mov	r3, r2
 8002fd0:	00db      	lsls	r3, r3, #3
 8002fd2:	4413      	add	r3, r2
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	440b      	add	r3, r1
 8002fd8:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002fdc:	2200      	movs	r2, #0
 8002fde:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002fe0:	7bfa      	ldrb	r2, [r7, #15]
 8002fe2:	6879      	ldr	r1, [r7, #4]
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	00db      	lsls	r3, r3, #3
 8002fe8:	4413      	add	r3, r2
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	440b      	add	r3, r1
 8002fee:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ff6:	7bfb      	ldrb	r3, [r7, #15]
 8002ff8:	3301      	adds	r3, #1
 8002ffa:	73fb      	strb	r3, [r7, #15]
 8002ffc:	7bfa      	ldrb	r2, [r7, #15]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	429a      	cmp	r2, r3
 8003004:	d3b5      	bcc.n	8002f72 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	603b      	str	r3, [r7, #0]
 800300c:	687e      	ldr	r6, [r7, #4]
 800300e:	466d      	mov	r5, sp
 8003010:	f106 0410 	add.w	r4, r6, #16
 8003014:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003016:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003018:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800301a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800301c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003020:	e885 0003 	stmia.w	r5, {r0, r1}
 8003024:	1d33      	adds	r3, r6, #4
 8003026:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003028:	6838      	ldr	r0, [r7, #0]
 800302a:	f005 f9af 	bl	800838c <USB_DevInit>
 800302e:	4603      	mov	r3, r0
 8003030:	2b00      	cmp	r3, #0
 8003032:	d005      	beq.n	8003040 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2202      	movs	r2, #2
 8003038:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	e014      	b.n	800306a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2200      	movs	r2, #0
 8003044:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2201      	movs	r2, #1
 800304c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003054:	2b01      	cmp	r3, #1
 8003056:	d102      	bne.n	800305e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	f001 f96f 	bl	800433c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4618      	mov	r0, r3
 8003064:	f006 f9f1 	bl	800944a <USB_DevDisconnect>

  return HAL_OK;
 8003068:	2300      	movs	r3, #0
}
 800306a:	4618      	mov	r0, r3
 800306c:	3714      	adds	r7, #20
 800306e:	46bd      	mov	sp, r7
 8003070:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003072 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003072:	b580      	push	{r7, lr}
 8003074:	b084      	sub	sp, #16
 8003076:	af00      	add	r7, sp, #0
 8003078:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003086:	2b01      	cmp	r3, #1
 8003088:	d101      	bne.n	800308e <HAL_PCD_Start+0x1c>
 800308a:	2302      	movs	r3, #2
 800308c:	e022      	b.n	80030d4 <HAL_PCD_Start+0x62>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2201      	movs	r2, #1
 8003092:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800309a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d109      	bne.n	80030b6 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d105      	bne.n	80030b6 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ae:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4618      	mov	r0, r3
 80030bc:	f005 f8f8 	bl	80082b0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4618      	mov	r0, r3
 80030c6:	f006 f99f 	bl	8009408 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80030d2:	2300      	movs	r3, #0
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	3710      	adds	r7, #16
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}

080030dc <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80030dc:	b590      	push	{r4, r7, lr}
 80030de:	b08d      	sub	sp, #52	; 0x34
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030ea:	6a3b      	ldr	r3, [r7, #32]
 80030ec:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4618      	mov	r0, r3
 80030f4:	f006 fa5d 	bl	80095b2 <USB_GetMode>
 80030f8:	4603      	mov	r3, r0
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	f040 84b7 	bne.w	8003a6e <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4618      	mov	r0, r3
 8003106:	f006 f9c1 	bl	800948c <USB_ReadInterrupts>
 800310a:	4603      	mov	r3, r0
 800310c:	2b00      	cmp	r3, #0
 800310e:	f000 84ad 	beq.w	8003a6c <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	0a1b      	lsrs	r3, r3, #8
 800311c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4618      	mov	r0, r3
 800312c:	f006 f9ae 	bl	800948c <USB_ReadInterrupts>
 8003130:	4603      	mov	r3, r0
 8003132:	f003 0302 	and.w	r3, r3, #2
 8003136:	2b02      	cmp	r3, #2
 8003138:	d107      	bne.n	800314a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	695a      	ldr	r2, [r3, #20]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f002 0202 	and.w	r2, r2, #2
 8003148:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4618      	mov	r0, r3
 8003150:	f006 f99c 	bl	800948c <USB_ReadInterrupts>
 8003154:	4603      	mov	r3, r0
 8003156:	f003 0310 	and.w	r3, r3, #16
 800315a:	2b10      	cmp	r3, #16
 800315c:	d161      	bne.n	8003222 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	699a      	ldr	r2, [r3, #24]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f022 0210 	bic.w	r2, r2, #16
 800316c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800316e:	6a3b      	ldr	r3, [r7, #32]
 8003170:	6a1b      	ldr	r3, [r3, #32]
 8003172:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003174:	69bb      	ldr	r3, [r7, #24]
 8003176:	f003 020f 	and.w	r2, r3, #15
 800317a:	4613      	mov	r3, r2
 800317c:	00db      	lsls	r3, r3, #3
 800317e:	4413      	add	r3, r2
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003186:	687a      	ldr	r2, [r7, #4]
 8003188:	4413      	add	r3, r2
 800318a:	3304      	adds	r3, #4
 800318c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800318e:	69bb      	ldr	r3, [r7, #24]
 8003190:	0c5b      	lsrs	r3, r3, #17
 8003192:	f003 030f 	and.w	r3, r3, #15
 8003196:	2b02      	cmp	r3, #2
 8003198:	d124      	bne.n	80031e4 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800319a:	69ba      	ldr	r2, [r7, #24]
 800319c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80031a0:	4013      	ands	r3, r2
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d035      	beq.n	8003212 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80031aa:	69bb      	ldr	r3, [r7, #24]
 80031ac:	091b      	lsrs	r3, r3, #4
 80031ae:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80031b0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80031b4:	b29b      	uxth	r3, r3
 80031b6:	461a      	mov	r2, r3
 80031b8:	6a38      	ldr	r0, [r7, #32]
 80031ba:	f005 ffd3 	bl	8009164 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	68da      	ldr	r2, [r3, #12]
 80031c2:	69bb      	ldr	r3, [r7, #24]
 80031c4:	091b      	lsrs	r3, r3, #4
 80031c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80031ca:	441a      	add	r2, r3
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	695a      	ldr	r2, [r3, #20]
 80031d4:	69bb      	ldr	r3, [r7, #24]
 80031d6:	091b      	lsrs	r3, r3, #4
 80031d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80031dc:	441a      	add	r2, r3
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	615a      	str	r2, [r3, #20]
 80031e2:	e016      	b.n	8003212 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80031e4:	69bb      	ldr	r3, [r7, #24]
 80031e6:	0c5b      	lsrs	r3, r3, #17
 80031e8:	f003 030f 	and.w	r3, r3, #15
 80031ec:	2b06      	cmp	r3, #6
 80031ee:	d110      	bne.n	8003212 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80031f6:	2208      	movs	r2, #8
 80031f8:	4619      	mov	r1, r3
 80031fa:	6a38      	ldr	r0, [r7, #32]
 80031fc:	f005 ffb2 	bl	8009164 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	695a      	ldr	r2, [r3, #20]
 8003204:	69bb      	ldr	r3, [r7, #24]
 8003206:	091b      	lsrs	r3, r3, #4
 8003208:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800320c:	441a      	add	r2, r3
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	699a      	ldr	r2, [r3, #24]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f042 0210 	orr.w	r2, r2, #16
 8003220:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4618      	mov	r0, r3
 8003228:	f006 f930 	bl	800948c <USB_ReadInterrupts>
 800322c:	4603      	mov	r3, r0
 800322e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003232:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003236:	f040 80a7 	bne.w	8003388 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800323a:	2300      	movs	r3, #0
 800323c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4618      	mov	r0, r3
 8003244:	f006 f935 	bl	80094b2 <USB_ReadDevAllOutEpInterrupt>
 8003248:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800324a:	e099      	b.n	8003380 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800324c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800324e:	f003 0301 	and.w	r3, r3, #1
 8003252:	2b00      	cmp	r3, #0
 8003254:	f000 808e 	beq.w	8003374 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800325e:	b2d2      	uxtb	r2, r2
 8003260:	4611      	mov	r1, r2
 8003262:	4618      	mov	r0, r3
 8003264:	f006 f959 	bl	800951a <USB_ReadDevOutEPInterrupt>
 8003268:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	f003 0301 	and.w	r3, r3, #1
 8003270:	2b00      	cmp	r3, #0
 8003272:	d00c      	beq.n	800328e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003276:	015a      	lsls	r2, r3, #5
 8003278:	69fb      	ldr	r3, [r7, #28]
 800327a:	4413      	add	r3, r2
 800327c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003280:	461a      	mov	r2, r3
 8003282:	2301      	movs	r3, #1
 8003284:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003286:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003288:	6878      	ldr	r0, [r7, #4]
 800328a:	f000 fed1 	bl	8004030 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	f003 0308 	and.w	r3, r3, #8
 8003294:	2b00      	cmp	r3, #0
 8003296:	d00c      	beq.n	80032b2 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800329a:	015a      	lsls	r2, r3, #5
 800329c:	69fb      	ldr	r3, [r7, #28]
 800329e:	4413      	add	r3, r2
 80032a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032a4:	461a      	mov	r2, r3
 80032a6:	2308      	movs	r3, #8
 80032a8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80032aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80032ac:	6878      	ldr	r0, [r7, #4]
 80032ae:	f000 ffa7 	bl	8004200 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	f003 0310 	and.w	r3, r3, #16
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d008      	beq.n	80032ce <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80032bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032be:	015a      	lsls	r2, r3, #5
 80032c0:	69fb      	ldr	r3, [r7, #28]
 80032c2:	4413      	add	r3, r2
 80032c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032c8:	461a      	mov	r2, r3
 80032ca:	2310      	movs	r3, #16
 80032cc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	f003 0302 	and.w	r3, r3, #2
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d030      	beq.n	800333a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80032d8:	6a3b      	ldr	r3, [r7, #32]
 80032da:	695b      	ldr	r3, [r3, #20]
 80032dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032e0:	2b80      	cmp	r3, #128	; 0x80
 80032e2:	d109      	bne.n	80032f8 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80032e4:	69fb      	ldr	r3, [r7, #28]
 80032e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	69fa      	ldr	r2, [r7, #28]
 80032ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80032f6:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80032f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032fa:	4613      	mov	r3, r2
 80032fc:	00db      	lsls	r3, r3, #3
 80032fe:	4413      	add	r3, r2
 8003300:	009b      	lsls	r3, r3, #2
 8003302:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003306:	687a      	ldr	r2, [r7, #4]
 8003308:	4413      	add	r3, r2
 800330a:	3304      	adds	r3, #4
 800330c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	78db      	ldrb	r3, [r3, #3]
 8003312:	2b01      	cmp	r3, #1
 8003314:	d108      	bne.n	8003328 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	2200      	movs	r2, #0
 800331a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800331c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800331e:	b2db      	uxtb	r3, r3
 8003320:	4619      	mov	r1, r3
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f008 fd00 	bl	800bd28 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800332a:	015a      	lsls	r2, r3, #5
 800332c:	69fb      	ldr	r3, [r7, #28]
 800332e:	4413      	add	r3, r2
 8003330:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003334:	461a      	mov	r2, r3
 8003336:	2302      	movs	r3, #2
 8003338:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	f003 0320 	and.w	r3, r3, #32
 8003340:	2b00      	cmp	r3, #0
 8003342:	d008      	beq.n	8003356 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003346:	015a      	lsls	r2, r3, #5
 8003348:	69fb      	ldr	r3, [r7, #28]
 800334a:	4413      	add	r3, r2
 800334c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003350:	461a      	mov	r2, r3
 8003352:	2320      	movs	r3, #32
 8003354:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800335c:	2b00      	cmp	r3, #0
 800335e:	d009      	beq.n	8003374 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003362:	015a      	lsls	r2, r3, #5
 8003364:	69fb      	ldr	r3, [r7, #28]
 8003366:	4413      	add	r3, r2
 8003368:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800336c:	461a      	mov	r2, r3
 800336e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003372:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003376:	3301      	adds	r3, #1
 8003378:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800337a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800337c:	085b      	lsrs	r3, r3, #1
 800337e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003382:	2b00      	cmp	r3, #0
 8003384:	f47f af62 	bne.w	800324c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4618      	mov	r0, r3
 800338e:	f006 f87d 	bl	800948c <USB_ReadInterrupts>
 8003392:	4603      	mov	r3, r0
 8003394:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003398:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800339c:	f040 80db 	bne.w	8003556 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4618      	mov	r0, r3
 80033a6:	f006 f89e 	bl	80094e6 <USB_ReadDevAllInEpInterrupt>
 80033aa:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80033ac:	2300      	movs	r3, #0
 80033ae:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80033b0:	e0cd      	b.n	800354e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80033b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033b4:	f003 0301 	and.w	r3, r3, #1
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	f000 80c2 	beq.w	8003542 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033c4:	b2d2      	uxtb	r2, r2
 80033c6:	4611      	mov	r1, r2
 80033c8:	4618      	mov	r0, r3
 80033ca:	f006 f8c4 	bl	8009556 <USB_ReadDevInEPInterrupt>
 80033ce:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	f003 0301 	and.w	r3, r3, #1
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d057      	beq.n	800348a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80033da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033dc:	f003 030f 	and.w	r3, r3, #15
 80033e0:	2201      	movs	r2, #1
 80033e2:	fa02 f303 	lsl.w	r3, r2, r3
 80033e6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80033e8:	69fb      	ldr	r3, [r7, #28]
 80033ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	43db      	mvns	r3, r3
 80033f4:	69f9      	ldr	r1, [r7, #28]
 80033f6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80033fa:	4013      	ands	r3, r2
 80033fc:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80033fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003400:	015a      	lsls	r2, r3, #5
 8003402:	69fb      	ldr	r3, [r7, #28]
 8003404:	4413      	add	r3, r2
 8003406:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800340a:	461a      	mov	r2, r3
 800340c:	2301      	movs	r3, #1
 800340e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	68db      	ldr	r3, [r3, #12]
 8003414:	2b01      	cmp	r3, #1
 8003416:	d132      	bne.n	800347e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003418:	6879      	ldr	r1, [r7, #4]
 800341a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800341c:	4613      	mov	r3, r2
 800341e:	00db      	lsls	r3, r3, #3
 8003420:	4413      	add	r3, r2
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	440b      	add	r3, r1
 8003426:	3348      	adds	r3, #72	; 0x48
 8003428:	6819      	ldr	r1, [r3, #0]
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800342e:	4613      	mov	r3, r2
 8003430:	00db      	lsls	r3, r3, #3
 8003432:	4413      	add	r3, r2
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	4403      	add	r3, r0
 8003438:	3344      	adds	r3, #68	; 0x44
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4419      	add	r1, r3
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003442:	4613      	mov	r3, r2
 8003444:	00db      	lsls	r3, r3, #3
 8003446:	4413      	add	r3, r2
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	4403      	add	r3, r0
 800344c:	3348      	adds	r3, #72	; 0x48
 800344e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003452:	2b00      	cmp	r3, #0
 8003454:	d113      	bne.n	800347e <HAL_PCD_IRQHandler+0x3a2>
 8003456:	6879      	ldr	r1, [r7, #4]
 8003458:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800345a:	4613      	mov	r3, r2
 800345c:	00db      	lsls	r3, r3, #3
 800345e:	4413      	add	r3, r2
 8003460:	009b      	lsls	r3, r3, #2
 8003462:	440b      	add	r3, r1
 8003464:	334c      	adds	r3, #76	; 0x4c
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d108      	bne.n	800347e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6818      	ldr	r0, [r3, #0]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003476:	461a      	mov	r2, r3
 8003478:	2101      	movs	r1, #1
 800347a:	f006 f8cd 	bl	8009618 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800347e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003480:	b2db      	uxtb	r3, r3
 8003482:	4619      	mov	r1, r3
 8003484:	6878      	ldr	r0, [r7, #4]
 8003486:	f008 fbca 	bl	800bc1e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	f003 0308 	and.w	r3, r3, #8
 8003490:	2b00      	cmp	r3, #0
 8003492:	d008      	beq.n	80034a6 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003496:	015a      	lsls	r2, r3, #5
 8003498:	69fb      	ldr	r3, [r7, #28]
 800349a:	4413      	add	r3, r2
 800349c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034a0:	461a      	mov	r2, r3
 80034a2:	2308      	movs	r3, #8
 80034a4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	f003 0310 	and.w	r3, r3, #16
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d008      	beq.n	80034c2 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80034b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b2:	015a      	lsls	r2, r3, #5
 80034b4:	69fb      	ldr	r3, [r7, #28]
 80034b6:	4413      	add	r3, r2
 80034b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034bc:	461a      	mov	r2, r3
 80034be:	2310      	movs	r3, #16
 80034c0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d008      	beq.n	80034de <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80034cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ce:	015a      	lsls	r2, r3, #5
 80034d0:	69fb      	ldr	r3, [r7, #28]
 80034d2:	4413      	add	r3, r2
 80034d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034d8:	461a      	mov	r2, r3
 80034da:	2340      	movs	r3, #64	; 0x40
 80034dc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	f003 0302 	and.w	r3, r3, #2
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d023      	beq.n	8003530 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80034e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034ea:	6a38      	ldr	r0, [r7, #32]
 80034ec:	f005 f8ac 	bl	8008648 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80034f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034f2:	4613      	mov	r3, r2
 80034f4:	00db      	lsls	r3, r3, #3
 80034f6:	4413      	add	r3, r2
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	3338      	adds	r3, #56	; 0x38
 80034fc:	687a      	ldr	r2, [r7, #4]
 80034fe:	4413      	add	r3, r2
 8003500:	3304      	adds	r3, #4
 8003502:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	78db      	ldrb	r3, [r3, #3]
 8003508:	2b01      	cmp	r3, #1
 800350a:	d108      	bne.n	800351e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	2200      	movs	r2, #0
 8003510:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003514:	b2db      	uxtb	r3, r3
 8003516:	4619      	mov	r1, r3
 8003518:	6878      	ldr	r0, [r7, #4]
 800351a:	f008 fc17 	bl	800bd4c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800351e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003520:	015a      	lsls	r2, r3, #5
 8003522:	69fb      	ldr	r3, [r7, #28]
 8003524:	4413      	add	r3, r2
 8003526:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800352a:	461a      	mov	r2, r3
 800352c:	2302      	movs	r3, #2
 800352e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003536:	2b00      	cmp	r3, #0
 8003538:	d003      	beq.n	8003542 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800353a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f000 fcea 	bl	8003f16 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003544:	3301      	adds	r3, #1
 8003546:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800354a:	085b      	lsrs	r3, r3, #1
 800354c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800354e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003550:	2b00      	cmp	r3, #0
 8003552:	f47f af2e 	bne.w	80033b2 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4618      	mov	r0, r3
 800355c:	f005 ff96 	bl	800948c <USB_ReadInterrupts>
 8003560:	4603      	mov	r3, r0
 8003562:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003566:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800356a:	d122      	bne.n	80035b2 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800356c:	69fb      	ldr	r3, [r7, #28]
 800356e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	69fa      	ldr	r2, [r7, #28]
 8003576:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800357a:	f023 0301 	bic.w	r3, r3, #1
 800357e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003586:	2b01      	cmp	r3, #1
 8003588:	d108      	bne.n	800359c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2200      	movs	r2, #0
 800358e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003592:	2100      	movs	r1, #0
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	f000 fef5 	bl	8004384 <HAL_PCDEx_LPM_Callback>
 800359a:	e002      	b.n	80035a2 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	f008 fbb5 	bl	800bd0c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	695a      	ldr	r2, [r3, #20]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80035b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4618      	mov	r0, r3
 80035b8:	f005 ff68 	bl	800948c <USB_ReadInterrupts>
 80035bc:	4603      	mov	r3, r0
 80035be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035c6:	d112      	bne.n	80035ee <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80035c8:	69fb      	ldr	r3, [r7, #28]
 80035ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	f003 0301 	and.w	r3, r3, #1
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d102      	bne.n	80035de <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80035d8:	6878      	ldr	r0, [r7, #4]
 80035da:	f008 fb71 	bl	800bcc0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	695a      	ldr	r2, [r3, #20]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80035ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4618      	mov	r0, r3
 80035f4:	f005 ff4a 	bl	800948c <USB_ReadInterrupts>
 80035f8:	4603      	mov	r3, r0
 80035fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80035fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003602:	d121      	bne.n	8003648 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	695a      	ldr	r2, [r3, #20]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8003612:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800361a:	2b00      	cmp	r3, #0
 800361c:	d111      	bne.n	8003642 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2201      	movs	r2, #1
 8003622:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800362c:	089b      	lsrs	r3, r3, #2
 800362e:	f003 020f 	and.w	r2, r3, #15
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003638:	2101      	movs	r1, #1
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f000 fea2 	bl	8004384 <HAL_PCDEx_LPM_Callback>
 8003640:	e002      	b.n	8003648 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f008 fb3c 	bl	800bcc0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4618      	mov	r0, r3
 800364e:	f005 ff1d 	bl	800948c <USB_ReadInterrupts>
 8003652:	4603      	mov	r3, r0
 8003654:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003658:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800365c:	f040 80b7 	bne.w	80037ce <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003660:	69fb      	ldr	r3, [r7, #28]
 8003662:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	69fa      	ldr	r2, [r7, #28]
 800366a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800366e:	f023 0301 	bic.w	r3, r3, #1
 8003672:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	2110      	movs	r1, #16
 800367a:	4618      	mov	r0, r3
 800367c:	f004 ffe4 	bl	8008648 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003680:	2300      	movs	r3, #0
 8003682:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003684:	e046      	b.n	8003714 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003688:	015a      	lsls	r2, r3, #5
 800368a:	69fb      	ldr	r3, [r7, #28]
 800368c:	4413      	add	r3, r2
 800368e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003692:	461a      	mov	r2, r3
 8003694:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003698:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800369a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800369c:	015a      	lsls	r2, r3, #5
 800369e:	69fb      	ldr	r3, [r7, #28]
 80036a0:	4413      	add	r3, r2
 80036a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036aa:	0151      	lsls	r1, r2, #5
 80036ac:	69fa      	ldr	r2, [r7, #28]
 80036ae:	440a      	add	r2, r1
 80036b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80036b4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80036b8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80036ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036bc:	015a      	lsls	r2, r3, #5
 80036be:	69fb      	ldr	r3, [r7, #28]
 80036c0:	4413      	add	r3, r2
 80036c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036c6:	461a      	mov	r2, r3
 80036c8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80036cc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80036ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036d0:	015a      	lsls	r2, r3, #5
 80036d2:	69fb      	ldr	r3, [r7, #28]
 80036d4:	4413      	add	r3, r2
 80036d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036de:	0151      	lsls	r1, r2, #5
 80036e0:	69fa      	ldr	r2, [r7, #28]
 80036e2:	440a      	add	r2, r1
 80036e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80036e8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80036ec:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80036ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036f0:	015a      	lsls	r2, r3, #5
 80036f2:	69fb      	ldr	r3, [r7, #28]
 80036f4:	4413      	add	r3, r2
 80036f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036fe:	0151      	lsls	r1, r2, #5
 8003700:	69fa      	ldr	r2, [r7, #28]
 8003702:	440a      	add	r2, r1
 8003704:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003708:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800370c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800370e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003710:	3301      	adds	r3, #1
 8003712:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800371a:	429a      	cmp	r2, r3
 800371c:	d3b3      	bcc.n	8003686 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800371e:	69fb      	ldr	r3, [r7, #28]
 8003720:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003724:	69db      	ldr	r3, [r3, #28]
 8003726:	69fa      	ldr	r2, [r7, #28]
 8003728:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800372c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003730:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003736:	2b00      	cmp	r3, #0
 8003738:	d016      	beq.n	8003768 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800373a:	69fb      	ldr	r3, [r7, #28]
 800373c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003740:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003744:	69fa      	ldr	r2, [r7, #28]
 8003746:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800374a:	f043 030b 	orr.w	r3, r3, #11
 800374e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003752:	69fb      	ldr	r3, [r7, #28]
 8003754:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800375a:	69fa      	ldr	r2, [r7, #28]
 800375c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003760:	f043 030b 	orr.w	r3, r3, #11
 8003764:	6453      	str	r3, [r2, #68]	; 0x44
 8003766:	e015      	b.n	8003794 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003768:	69fb      	ldr	r3, [r7, #28]
 800376a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800376e:	695a      	ldr	r2, [r3, #20]
 8003770:	69fb      	ldr	r3, [r7, #28]
 8003772:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003776:	4619      	mov	r1, r3
 8003778:	f242 032b 	movw	r3, #8235	; 0x202b
 800377c:	4313      	orrs	r3, r2
 800377e:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003780:	69fb      	ldr	r3, [r7, #28]
 8003782:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003786:	691b      	ldr	r3, [r3, #16]
 8003788:	69fa      	ldr	r2, [r7, #28]
 800378a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800378e:	f043 030b 	orr.w	r3, r3, #11
 8003792:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003794:	69fb      	ldr	r3, [r7, #28]
 8003796:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	69fa      	ldr	r2, [r7, #28]
 800379e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037a2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80037a6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6818      	ldr	r0, [r3, #0]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80037b8:	461a      	mov	r2, r3
 80037ba:	f005 ff2d 	bl	8009618 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	695a      	ldr	r2, [r3, #20]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80037cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4618      	mov	r0, r3
 80037d4:	f005 fe5a 	bl	800948c <USB_ReadInterrupts>
 80037d8:	4603      	mov	r3, r0
 80037da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037e2:	d124      	bne.n	800382e <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4618      	mov	r0, r3
 80037ea:	f005 fef1 	bl	80095d0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4618      	mov	r0, r3
 80037f4:	f004 ffa5 	bl	8008742 <USB_GetDevSpeed>
 80037f8:	4603      	mov	r3, r0
 80037fa:	461a      	mov	r2, r3
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681c      	ldr	r4, [r3, #0]
 8003804:	f001 fd9e 	bl	8005344 <HAL_RCC_GetHCLKFreq>
 8003808:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800380e:	b2db      	uxtb	r3, r3
 8003810:	461a      	mov	r2, r3
 8003812:	4620      	mov	r0, r4
 8003814:	f004 fcaa 	bl	800816c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003818:	6878      	ldr	r0, [r7, #4]
 800381a:	f008 fa28 	bl	800bc6e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	695a      	ldr	r2, [r3, #20]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800382c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4618      	mov	r0, r3
 8003834:	f005 fe2a 	bl	800948c <USB_ReadInterrupts>
 8003838:	4603      	mov	r3, r0
 800383a:	f003 0308 	and.w	r3, r3, #8
 800383e:	2b08      	cmp	r3, #8
 8003840:	d10a      	bne.n	8003858 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f008 fa05 	bl	800bc52 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	695a      	ldr	r2, [r3, #20]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f002 0208 	and.w	r2, r2, #8
 8003856:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4618      	mov	r0, r3
 800385e:	f005 fe15 	bl	800948c <USB_ReadInterrupts>
 8003862:	4603      	mov	r3, r0
 8003864:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003868:	2b80      	cmp	r3, #128	; 0x80
 800386a:	d122      	bne.n	80038b2 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800386c:	6a3b      	ldr	r3, [r7, #32]
 800386e:	699b      	ldr	r3, [r3, #24]
 8003870:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003874:	6a3b      	ldr	r3, [r7, #32]
 8003876:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003878:	2301      	movs	r3, #1
 800387a:	627b      	str	r3, [r7, #36]	; 0x24
 800387c:	e014      	b.n	80038a8 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800387e:	6879      	ldr	r1, [r7, #4]
 8003880:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003882:	4613      	mov	r3, r2
 8003884:	00db      	lsls	r3, r3, #3
 8003886:	4413      	add	r3, r2
 8003888:	009b      	lsls	r3, r3, #2
 800388a:	440b      	add	r3, r1
 800388c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003890:	781b      	ldrb	r3, [r3, #0]
 8003892:	2b01      	cmp	r3, #1
 8003894:	d105      	bne.n	80038a2 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003898:	b2db      	uxtb	r3, r3
 800389a:	4619      	mov	r1, r3
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	f000 fb09 	bl	8003eb4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80038a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a4:	3301      	adds	r3, #1
 80038a6:	627b      	str	r3, [r7, #36]	; 0x24
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038ae:	429a      	cmp	r2, r3
 80038b0:	d3e5      	bcc.n	800387e <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4618      	mov	r0, r3
 80038b8:	f005 fde8 	bl	800948c <USB_ReadInterrupts>
 80038bc:	4603      	mov	r3, r0
 80038be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038c6:	d13b      	bne.n	8003940 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80038c8:	2301      	movs	r3, #1
 80038ca:	627b      	str	r3, [r7, #36]	; 0x24
 80038cc:	e02b      	b.n	8003926 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80038ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d0:	015a      	lsls	r2, r3, #5
 80038d2:	69fb      	ldr	r3, [r7, #28]
 80038d4:	4413      	add	r3, r2
 80038d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80038de:	6879      	ldr	r1, [r7, #4]
 80038e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038e2:	4613      	mov	r3, r2
 80038e4:	00db      	lsls	r3, r3, #3
 80038e6:	4413      	add	r3, r2
 80038e8:	009b      	lsls	r3, r3, #2
 80038ea:	440b      	add	r3, r1
 80038ec:	3340      	adds	r3, #64	; 0x40
 80038ee:	781b      	ldrb	r3, [r3, #0]
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d115      	bne.n	8003920 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80038f4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	da12      	bge.n	8003920 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80038fa:	6879      	ldr	r1, [r7, #4]
 80038fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038fe:	4613      	mov	r3, r2
 8003900:	00db      	lsls	r3, r3, #3
 8003902:	4413      	add	r3, r2
 8003904:	009b      	lsls	r3, r3, #2
 8003906:	440b      	add	r3, r1
 8003908:	333f      	adds	r3, #63	; 0x3f
 800390a:	2201      	movs	r2, #1
 800390c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800390e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003910:	b2db      	uxtb	r3, r3
 8003912:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003916:	b2db      	uxtb	r3, r3
 8003918:	4619      	mov	r1, r3
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f000 faca 	bl	8003eb4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003922:	3301      	adds	r3, #1
 8003924:	627b      	str	r3, [r7, #36]	; 0x24
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800392c:	429a      	cmp	r2, r3
 800392e:	d3ce      	bcc.n	80038ce <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	695a      	ldr	r2, [r3, #20]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800393e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4618      	mov	r0, r3
 8003946:	f005 fda1 	bl	800948c <USB_ReadInterrupts>
 800394a:	4603      	mov	r3, r0
 800394c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003950:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003954:	d155      	bne.n	8003a02 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003956:	2301      	movs	r3, #1
 8003958:	627b      	str	r3, [r7, #36]	; 0x24
 800395a:	e045      	b.n	80039e8 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800395c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800395e:	015a      	lsls	r2, r3, #5
 8003960:	69fb      	ldr	r3, [r7, #28]
 8003962:	4413      	add	r3, r2
 8003964:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800396c:	6879      	ldr	r1, [r7, #4]
 800396e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003970:	4613      	mov	r3, r2
 8003972:	00db      	lsls	r3, r3, #3
 8003974:	4413      	add	r3, r2
 8003976:	009b      	lsls	r3, r3, #2
 8003978:	440b      	add	r3, r1
 800397a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800397e:	781b      	ldrb	r3, [r3, #0]
 8003980:	2b01      	cmp	r3, #1
 8003982:	d12e      	bne.n	80039e2 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003984:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003986:	2b00      	cmp	r3, #0
 8003988:	da2b      	bge.n	80039e2 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800398a:	69bb      	ldr	r3, [r7, #24]
 800398c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003996:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800399a:	429a      	cmp	r2, r3
 800399c:	d121      	bne.n	80039e2 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800399e:	6879      	ldr	r1, [r7, #4]
 80039a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039a2:	4613      	mov	r3, r2
 80039a4:	00db      	lsls	r3, r3, #3
 80039a6:	4413      	add	r3, r2
 80039a8:	009b      	lsls	r3, r3, #2
 80039aa:	440b      	add	r3, r1
 80039ac:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80039b0:	2201      	movs	r2, #1
 80039b2:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80039b4:	6a3b      	ldr	r3, [r7, #32]
 80039b6:	699b      	ldr	r3, [r3, #24]
 80039b8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80039bc:	6a3b      	ldr	r3, [r7, #32]
 80039be:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80039c0:	6a3b      	ldr	r3, [r7, #32]
 80039c2:	695b      	ldr	r3, [r3, #20]
 80039c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d10a      	bne.n	80039e2 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80039cc:	69fb      	ldr	r3, [r7, #28]
 80039ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	69fa      	ldr	r2, [r7, #28]
 80039d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80039da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80039de:	6053      	str	r3, [r2, #4]
            break;
 80039e0:	e007      	b.n	80039f2 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80039e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e4:	3301      	adds	r3, #1
 80039e6:	627b      	str	r3, [r7, #36]	; 0x24
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039ee:	429a      	cmp	r2, r3
 80039f0:	d3b4      	bcc.n	800395c <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	695a      	ldr	r2, [r3, #20]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003a00:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4618      	mov	r0, r3
 8003a08:	f005 fd40 	bl	800948c <USB_ReadInterrupts>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003a12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a16:	d10a      	bne.n	8003a2e <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003a18:	6878      	ldr	r0, [r7, #4]
 8003a1a:	f008 f9a9 	bl	800bd70 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	695a      	ldr	r2, [r3, #20]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003a2c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4618      	mov	r0, r3
 8003a34:	f005 fd2a 	bl	800948c <USB_ReadInterrupts>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	f003 0304 	and.w	r3, r3, #4
 8003a3e:	2b04      	cmp	r3, #4
 8003a40:	d115      	bne.n	8003a6e <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003a4a:	69bb      	ldr	r3, [r7, #24]
 8003a4c:	f003 0304 	and.w	r3, r3, #4
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d002      	beq.n	8003a5a <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	f008 f999 	bl	800bd8c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	6859      	ldr	r1, [r3, #4]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	69ba      	ldr	r2, [r7, #24]
 8003a66:	430a      	orrs	r2, r1
 8003a68:	605a      	str	r2, [r3, #4]
 8003a6a:	e000      	b.n	8003a6e <HAL_PCD_IRQHandler+0x992>
      return;
 8003a6c:	bf00      	nop
    }
  }
}
 8003a6e:	3734      	adds	r7, #52	; 0x34
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd90      	pop	{r4, r7, pc}

08003a74 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b082      	sub	sp, #8
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
 8003a7c:	460b      	mov	r3, r1
 8003a7e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003a86:	2b01      	cmp	r3, #1
 8003a88:	d101      	bne.n	8003a8e <HAL_PCD_SetAddress+0x1a>
 8003a8a:	2302      	movs	r3, #2
 8003a8c:	e013      	b.n	8003ab6 <HAL_PCD_SetAddress+0x42>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2201      	movs	r2, #1
 8003a92:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	78fa      	ldrb	r2, [r7, #3]
 8003a9a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	78fa      	ldrb	r2, [r7, #3]
 8003aa4:	4611      	mov	r1, r2
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f005 fc88 	bl	80093bc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003ab4:	2300      	movs	r3, #0
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	3708      	adds	r7, #8
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}

08003abe <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003abe:	b580      	push	{r7, lr}
 8003ac0:	b084      	sub	sp, #16
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	6078      	str	r0, [r7, #4]
 8003ac6:	4608      	mov	r0, r1
 8003ac8:	4611      	mov	r1, r2
 8003aca:	461a      	mov	r2, r3
 8003acc:	4603      	mov	r3, r0
 8003ace:	70fb      	strb	r3, [r7, #3]
 8003ad0:	460b      	mov	r3, r1
 8003ad2:	803b      	strh	r3, [r7, #0]
 8003ad4:	4613      	mov	r3, r2
 8003ad6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003adc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	da0f      	bge.n	8003b04 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ae4:	78fb      	ldrb	r3, [r7, #3]
 8003ae6:	f003 020f 	and.w	r2, r3, #15
 8003aea:	4613      	mov	r3, r2
 8003aec:	00db      	lsls	r3, r3, #3
 8003aee:	4413      	add	r3, r2
 8003af0:	009b      	lsls	r3, r3, #2
 8003af2:	3338      	adds	r3, #56	; 0x38
 8003af4:	687a      	ldr	r2, [r7, #4]
 8003af6:	4413      	add	r3, r2
 8003af8:	3304      	adds	r3, #4
 8003afa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2201      	movs	r2, #1
 8003b00:	705a      	strb	r2, [r3, #1]
 8003b02:	e00f      	b.n	8003b24 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b04:	78fb      	ldrb	r3, [r7, #3]
 8003b06:	f003 020f 	and.w	r2, r3, #15
 8003b0a:	4613      	mov	r3, r2
 8003b0c:	00db      	lsls	r3, r3, #3
 8003b0e:	4413      	add	r3, r2
 8003b10:	009b      	lsls	r3, r3, #2
 8003b12:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003b16:	687a      	ldr	r2, [r7, #4]
 8003b18:	4413      	add	r3, r2
 8003b1a:	3304      	adds	r3, #4
 8003b1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2200      	movs	r2, #0
 8003b22:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003b24:	78fb      	ldrb	r3, [r7, #3]
 8003b26:	f003 030f 	and.w	r3, r3, #15
 8003b2a:	b2da      	uxtb	r2, r3
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003b30:	883a      	ldrh	r2, [r7, #0]
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	78ba      	ldrb	r2, [r7, #2]
 8003b3a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	785b      	ldrb	r3, [r3, #1]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d004      	beq.n	8003b4e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	781b      	ldrb	r3, [r3, #0]
 8003b48:	b29a      	uxth	r2, r3
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003b4e:	78bb      	ldrb	r3, [r7, #2]
 8003b50:	2b02      	cmp	r3, #2
 8003b52:	d102      	bne.n	8003b5a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2200      	movs	r2, #0
 8003b58:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d101      	bne.n	8003b68 <HAL_PCD_EP_Open+0xaa>
 8003b64:	2302      	movs	r3, #2
 8003b66:	e00e      	b.n	8003b86 <HAL_PCD_EP_Open+0xc8>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	68f9      	ldr	r1, [r7, #12]
 8003b76:	4618      	mov	r0, r3
 8003b78:	f004 fe08 	bl	800878c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003b84:	7afb      	ldrb	r3, [r7, #11]
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3710      	adds	r7, #16
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}

08003b8e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b8e:	b580      	push	{r7, lr}
 8003b90:	b084      	sub	sp, #16
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	6078      	str	r0, [r7, #4]
 8003b96:	460b      	mov	r3, r1
 8003b98:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003b9a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	da0f      	bge.n	8003bc2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ba2:	78fb      	ldrb	r3, [r7, #3]
 8003ba4:	f003 020f 	and.w	r2, r3, #15
 8003ba8:	4613      	mov	r3, r2
 8003baa:	00db      	lsls	r3, r3, #3
 8003bac:	4413      	add	r3, r2
 8003bae:	009b      	lsls	r3, r3, #2
 8003bb0:	3338      	adds	r3, #56	; 0x38
 8003bb2:	687a      	ldr	r2, [r7, #4]
 8003bb4:	4413      	add	r3, r2
 8003bb6:	3304      	adds	r3, #4
 8003bb8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	705a      	strb	r2, [r3, #1]
 8003bc0:	e00f      	b.n	8003be2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003bc2:	78fb      	ldrb	r3, [r7, #3]
 8003bc4:	f003 020f 	and.w	r2, r3, #15
 8003bc8:	4613      	mov	r3, r2
 8003bca:	00db      	lsls	r3, r3, #3
 8003bcc:	4413      	add	r3, r2
 8003bce:	009b      	lsls	r3, r3, #2
 8003bd0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003bd4:	687a      	ldr	r2, [r7, #4]
 8003bd6:	4413      	add	r3, r2
 8003bd8:	3304      	adds	r3, #4
 8003bda:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2200      	movs	r2, #0
 8003be0:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003be2:	78fb      	ldrb	r3, [r7, #3]
 8003be4:	f003 030f 	and.w	r3, r3, #15
 8003be8:	b2da      	uxtb	r2, r3
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d101      	bne.n	8003bfc <HAL_PCD_EP_Close+0x6e>
 8003bf8:	2302      	movs	r3, #2
 8003bfa:	e00e      	b.n	8003c1a <HAL_PCD_EP_Close+0x8c>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	68f9      	ldr	r1, [r7, #12]
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f004 fe46 	bl	800889c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2200      	movs	r2, #0
 8003c14:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003c18:	2300      	movs	r3, #0
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3710      	adds	r7, #16
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}

08003c22 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003c22:	b580      	push	{r7, lr}
 8003c24:	b086      	sub	sp, #24
 8003c26:	af00      	add	r7, sp, #0
 8003c28:	60f8      	str	r0, [r7, #12]
 8003c2a:	607a      	str	r2, [r7, #4]
 8003c2c:	603b      	str	r3, [r7, #0]
 8003c2e:	460b      	mov	r3, r1
 8003c30:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c32:	7afb      	ldrb	r3, [r7, #11]
 8003c34:	f003 020f 	and.w	r2, r3, #15
 8003c38:	4613      	mov	r3, r2
 8003c3a:	00db      	lsls	r3, r3, #3
 8003c3c:	4413      	add	r3, r2
 8003c3e:	009b      	lsls	r3, r3, #2
 8003c40:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003c44:	68fa      	ldr	r2, [r7, #12]
 8003c46:	4413      	add	r3, r2
 8003c48:	3304      	adds	r3, #4
 8003c4a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	687a      	ldr	r2, [r7, #4]
 8003c50:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	683a      	ldr	r2, [r7, #0]
 8003c56:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	2200      	movs	r2, #0
 8003c62:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c64:	7afb      	ldrb	r3, [r7, #11]
 8003c66:	f003 030f 	and.w	r3, r3, #15
 8003c6a:	b2da      	uxtb	r2, r3
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d102      	bne.n	8003c7e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003c78:	687a      	ldr	r2, [r7, #4]
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	6818      	ldr	r0, [r3, #0]
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	68db      	ldr	r3, [r3, #12]
 8003c86:	b2db      	uxtb	r3, r3
 8003c88:	461a      	mov	r2, r3
 8003c8a:	6979      	ldr	r1, [r7, #20]
 8003c8c:	f004 fee2 	bl	8008a54 <USB_EPStartXfer>

  return HAL_OK;
 8003c90:	2300      	movs	r3, #0
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	3718      	adds	r7, #24
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}

08003c9a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c9a:	b480      	push	{r7}
 8003c9c:	b083      	sub	sp, #12
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	6078      	str	r0, [r7, #4]
 8003ca2:	460b      	mov	r3, r1
 8003ca4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003ca6:	78fb      	ldrb	r3, [r7, #3]
 8003ca8:	f003 020f 	and.w	r2, r3, #15
 8003cac:	6879      	ldr	r1, [r7, #4]
 8003cae:	4613      	mov	r3, r2
 8003cb0:	00db      	lsls	r3, r3, #3
 8003cb2:	4413      	add	r3, r2
 8003cb4:	009b      	lsls	r3, r3, #2
 8003cb6:	440b      	add	r3, r1
 8003cb8:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8003cbc:	681b      	ldr	r3, [r3, #0]
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	370c      	adds	r7, #12
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc8:	4770      	bx	lr

08003cca <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003cca:	b580      	push	{r7, lr}
 8003ccc:	b086      	sub	sp, #24
 8003cce:	af00      	add	r7, sp, #0
 8003cd0:	60f8      	str	r0, [r7, #12]
 8003cd2:	607a      	str	r2, [r7, #4]
 8003cd4:	603b      	str	r3, [r7, #0]
 8003cd6:	460b      	mov	r3, r1
 8003cd8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003cda:	7afb      	ldrb	r3, [r7, #11]
 8003cdc:	f003 020f 	and.w	r2, r3, #15
 8003ce0:	4613      	mov	r3, r2
 8003ce2:	00db      	lsls	r3, r3, #3
 8003ce4:	4413      	add	r3, r2
 8003ce6:	009b      	lsls	r3, r3, #2
 8003ce8:	3338      	adds	r3, #56	; 0x38
 8003cea:	68fa      	ldr	r2, [r7, #12]
 8003cec:	4413      	add	r3, r2
 8003cee:	3304      	adds	r3, #4
 8003cf0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	687a      	ldr	r2, [r7, #4]
 8003cf6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	683a      	ldr	r2, [r7, #0]
 8003cfc:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	2200      	movs	r2, #0
 8003d02:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	2201      	movs	r2, #1
 8003d08:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d0a:	7afb      	ldrb	r3, [r7, #11]
 8003d0c:	f003 030f 	and.w	r3, r3, #15
 8003d10:	b2da      	uxtb	r2, r3
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	68db      	ldr	r3, [r3, #12]
 8003d1a:	2b01      	cmp	r3, #1
 8003d1c:	d102      	bne.n	8003d24 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003d1e:	687a      	ldr	r2, [r7, #4]
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	6818      	ldr	r0, [r3, #0]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	68db      	ldr	r3, [r3, #12]
 8003d2c:	b2db      	uxtb	r3, r3
 8003d2e:	461a      	mov	r2, r3
 8003d30:	6979      	ldr	r1, [r7, #20]
 8003d32:	f004 fe8f 	bl	8008a54 <USB_EPStartXfer>

  return HAL_OK;
 8003d36:	2300      	movs	r3, #0
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3718      	adds	r7, #24
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}

08003d40 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b084      	sub	sp, #16
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
 8003d48:	460b      	mov	r3, r1
 8003d4a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003d4c:	78fb      	ldrb	r3, [r7, #3]
 8003d4e:	f003 020f 	and.w	r2, r3, #15
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	429a      	cmp	r2, r3
 8003d58:	d901      	bls.n	8003d5e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e050      	b.n	8003e00 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003d5e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	da0f      	bge.n	8003d86 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d66:	78fb      	ldrb	r3, [r7, #3]
 8003d68:	f003 020f 	and.w	r2, r3, #15
 8003d6c:	4613      	mov	r3, r2
 8003d6e:	00db      	lsls	r3, r3, #3
 8003d70:	4413      	add	r3, r2
 8003d72:	009b      	lsls	r3, r3, #2
 8003d74:	3338      	adds	r3, #56	; 0x38
 8003d76:	687a      	ldr	r2, [r7, #4]
 8003d78:	4413      	add	r3, r2
 8003d7a:	3304      	adds	r3, #4
 8003d7c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2201      	movs	r2, #1
 8003d82:	705a      	strb	r2, [r3, #1]
 8003d84:	e00d      	b.n	8003da2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003d86:	78fa      	ldrb	r2, [r7, #3]
 8003d88:	4613      	mov	r3, r2
 8003d8a:	00db      	lsls	r3, r3, #3
 8003d8c:	4413      	add	r3, r2
 8003d8e:	009b      	lsls	r3, r3, #2
 8003d90:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003d94:	687a      	ldr	r2, [r7, #4]
 8003d96:	4413      	add	r3, r2
 8003d98:	3304      	adds	r3, #4
 8003d9a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	2201      	movs	r2, #1
 8003da6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003da8:	78fb      	ldrb	r3, [r7, #3]
 8003daa:	f003 030f 	and.w	r3, r3, #15
 8003dae:	b2da      	uxtb	r2, r3
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003dba:	2b01      	cmp	r3, #1
 8003dbc:	d101      	bne.n	8003dc2 <HAL_PCD_EP_SetStall+0x82>
 8003dbe:	2302      	movs	r3, #2
 8003dc0:	e01e      	b.n	8003e00 <HAL_PCD_EP_SetStall+0xc0>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	68f9      	ldr	r1, [r7, #12]
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f005 fa1f 	bl	8009214 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003dd6:	78fb      	ldrb	r3, [r7, #3]
 8003dd8:	f003 030f 	and.w	r3, r3, #15
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d10a      	bne.n	8003df6 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6818      	ldr	r0, [r3, #0]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	68db      	ldr	r3, [r3, #12]
 8003de8:	b2d9      	uxtb	r1, r3
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003df0:	461a      	mov	r2, r3
 8003df2:	f005 fc11 	bl	8009618 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003dfe:	2300      	movs	r3, #0
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	3710      	adds	r7, #16
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}

08003e08 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b084      	sub	sp, #16
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
 8003e10:	460b      	mov	r3, r1
 8003e12:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003e14:	78fb      	ldrb	r3, [r7, #3]
 8003e16:	f003 020f 	and.w	r2, r3, #15
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	d901      	bls.n	8003e26 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	e042      	b.n	8003eac <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003e26:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	da0f      	bge.n	8003e4e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e2e:	78fb      	ldrb	r3, [r7, #3]
 8003e30:	f003 020f 	and.w	r2, r3, #15
 8003e34:	4613      	mov	r3, r2
 8003e36:	00db      	lsls	r3, r3, #3
 8003e38:	4413      	add	r3, r2
 8003e3a:	009b      	lsls	r3, r3, #2
 8003e3c:	3338      	adds	r3, #56	; 0x38
 8003e3e:	687a      	ldr	r2, [r7, #4]
 8003e40:	4413      	add	r3, r2
 8003e42:	3304      	adds	r3, #4
 8003e44:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2201      	movs	r2, #1
 8003e4a:	705a      	strb	r2, [r3, #1]
 8003e4c:	e00f      	b.n	8003e6e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e4e:	78fb      	ldrb	r3, [r7, #3]
 8003e50:	f003 020f 	and.w	r2, r3, #15
 8003e54:	4613      	mov	r3, r2
 8003e56:	00db      	lsls	r3, r3, #3
 8003e58:	4413      	add	r3, r2
 8003e5a:	009b      	lsls	r3, r3, #2
 8003e5c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003e60:	687a      	ldr	r2, [r7, #4]
 8003e62:	4413      	add	r3, r2
 8003e64:	3304      	adds	r3, #4
 8003e66:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2200      	movs	r2, #0
 8003e72:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e74:	78fb      	ldrb	r3, [r7, #3]
 8003e76:	f003 030f 	and.w	r3, r3, #15
 8003e7a:	b2da      	uxtb	r2, r3
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	d101      	bne.n	8003e8e <HAL_PCD_EP_ClrStall+0x86>
 8003e8a:	2302      	movs	r3, #2
 8003e8c:	e00e      	b.n	8003eac <HAL_PCD_EP_ClrStall+0xa4>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2201      	movs	r2, #1
 8003e92:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	68f9      	ldr	r1, [r7, #12]
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f005 fa27 	bl	80092f0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003eaa:	2300      	movs	r3, #0
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	3710      	adds	r7, #16
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}

08003eb4 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b084      	sub	sp, #16
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
 8003ebc:	460b      	mov	r3, r1
 8003ebe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003ec0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	da0c      	bge.n	8003ee2 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ec8:	78fb      	ldrb	r3, [r7, #3]
 8003eca:	f003 020f 	and.w	r2, r3, #15
 8003ece:	4613      	mov	r3, r2
 8003ed0:	00db      	lsls	r3, r3, #3
 8003ed2:	4413      	add	r3, r2
 8003ed4:	009b      	lsls	r3, r3, #2
 8003ed6:	3338      	adds	r3, #56	; 0x38
 8003ed8:	687a      	ldr	r2, [r7, #4]
 8003eda:	4413      	add	r3, r2
 8003edc:	3304      	adds	r3, #4
 8003ede:	60fb      	str	r3, [r7, #12]
 8003ee0:	e00c      	b.n	8003efc <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ee2:	78fb      	ldrb	r3, [r7, #3]
 8003ee4:	f003 020f 	and.w	r2, r3, #15
 8003ee8:	4613      	mov	r3, r2
 8003eea:	00db      	lsls	r3, r3, #3
 8003eec:	4413      	add	r3, r2
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003ef4:	687a      	ldr	r2, [r7, #4]
 8003ef6:	4413      	add	r3, r2
 8003ef8:	3304      	adds	r3, #4
 8003efa:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	68f9      	ldr	r1, [r7, #12]
 8003f02:	4618      	mov	r0, r3
 8003f04:	f005 f846 	bl	8008f94 <USB_EPStopXfer>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003f0c:	7afb      	ldrb	r3, [r7, #11]
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3710      	adds	r7, #16
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}

08003f16 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003f16:	b580      	push	{r7, lr}
 8003f18:	b08a      	sub	sp, #40	; 0x28
 8003f1a:	af02      	add	r7, sp, #8
 8003f1c:	6078      	str	r0, [r7, #4]
 8003f1e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003f2a:	683a      	ldr	r2, [r7, #0]
 8003f2c:	4613      	mov	r3, r2
 8003f2e:	00db      	lsls	r3, r3, #3
 8003f30:	4413      	add	r3, r2
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	3338      	adds	r3, #56	; 0x38
 8003f36:	687a      	ldr	r2, [r7, #4]
 8003f38:	4413      	add	r3, r2
 8003f3a:	3304      	adds	r3, #4
 8003f3c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	695a      	ldr	r2, [r3, #20]
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	691b      	ldr	r3, [r3, #16]
 8003f46:	429a      	cmp	r2, r3
 8003f48:	d901      	bls.n	8003f4e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e06c      	b.n	8004028 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	691a      	ldr	r2, [r3, #16]
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	695b      	ldr	r3, [r3, #20]
 8003f56:	1ad3      	subs	r3, r2, r3
 8003f58:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	69fa      	ldr	r2, [r7, #28]
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d902      	bls.n	8003f6a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003f6a:	69fb      	ldr	r3, [r7, #28]
 8003f6c:	3303      	adds	r3, #3
 8003f6e:	089b      	lsrs	r3, r3, #2
 8003f70:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003f72:	e02b      	b.n	8003fcc <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	691a      	ldr	r2, [r3, #16]
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	695b      	ldr	r3, [r3, #20]
 8003f7c:	1ad3      	subs	r3, r2, r3
 8003f7e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	69fa      	ldr	r2, [r7, #28]
 8003f86:	429a      	cmp	r2, r3
 8003f88:	d902      	bls.n	8003f90 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003f90:	69fb      	ldr	r3, [r7, #28]
 8003f92:	3303      	adds	r3, #3
 8003f94:	089b      	lsrs	r3, r3, #2
 8003f96:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	68d9      	ldr	r1, [r3, #12]
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	b2da      	uxtb	r2, r3
 8003fa0:	69fb      	ldr	r3, [r7, #28]
 8003fa2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	68db      	ldr	r3, [r3, #12]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	9300      	str	r3, [sp, #0]
 8003fac:	4603      	mov	r3, r0
 8003fae:	6978      	ldr	r0, [r7, #20]
 8003fb0:	f005 f89a 	bl	80090e8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	68da      	ldr	r2, [r3, #12]
 8003fb8:	69fb      	ldr	r3, [r7, #28]
 8003fba:	441a      	add	r2, r3
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	695a      	ldr	r2, [r3, #20]
 8003fc4:	69fb      	ldr	r3, [r7, #28]
 8003fc6:	441a      	add	r2, r3
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	015a      	lsls	r2, r3, #5
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	4413      	add	r3, r2
 8003fd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fd8:	699b      	ldr	r3, [r3, #24]
 8003fda:	b29b      	uxth	r3, r3
 8003fdc:	69ba      	ldr	r2, [r7, #24]
 8003fde:	429a      	cmp	r2, r3
 8003fe0:	d809      	bhi.n	8003ff6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	695a      	ldr	r2, [r3, #20]
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003fea:	429a      	cmp	r2, r3
 8003fec:	d203      	bcs.n	8003ff6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	691b      	ldr	r3, [r3, #16]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d1be      	bne.n	8003f74 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	691a      	ldr	r2, [r3, #16]
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	695b      	ldr	r3, [r3, #20]
 8003ffe:	429a      	cmp	r2, r3
 8004000:	d811      	bhi.n	8004026 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	f003 030f 	and.w	r3, r3, #15
 8004008:	2201      	movs	r2, #1
 800400a:	fa02 f303 	lsl.w	r3, r2, r3
 800400e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004016:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	43db      	mvns	r3, r3
 800401c:	6939      	ldr	r1, [r7, #16]
 800401e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004022:	4013      	ands	r3, r2
 8004024:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004026:	2300      	movs	r3, #0
}
 8004028:	4618      	mov	r0, r3
 800402a:	3720      	adds	r7, #32
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}

08004030 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b088      	sub	sp, #32
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
 8004038:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004040:	69fb      	ldr	r3, [r7, #28]
 8004042:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004044:	69fb      	ldr	r3, [r7, #28]
 8004046:	333c      	adds	r3, #60	; 0x3c
 8004048:	3304      	adds	r3, #4
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	015a      	lsls	r2, r3, #5
 8004052:	69bb      	ldr	r3, [r7, #24]
 8004054:	4413      	add	r3, r2
 8004056:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	68db      	ldr	r3, [r3, #12]
 8004062:	2b01      	cmp	r3, #1
 8004064:	d17b      	bne.n	800415e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	f003 0308 	and.w	r3, r3, #8
 800406c:	2b00      	cmp	r3, #0
 800406e:	d015      	beq.n	800409c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	4a61      	ldr	r2, [pc, #388]	; (80041f8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004074:	4293      	cmp	r3, r2
 8004076:	f240 80b9 	bls.w	80041ec <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004080:	2b00      	cmp	r3, #0
 8004082:	f000 80b3 	beq.w	80041ec <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	015a      	lsls	r2, r3, #5
 800408a:	69bb      	ldr	r3, [r7, #24]
 800408c:	4413      	add	r3, r2
 800408e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004092:	461a      	mov	r2, r3
 8004094:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004098:	6093      	str	r3, [r2, #8]
 800409a:	e0a7      	b.n	80041ec <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	f003 0320 	and.w	r3, r3, #32
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d009      	beq.n	80040ba <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	015a      	lsls	r2, r3, #5
 80040aa:	69bb      	ldr	r3, [r7, #24]
 80040ac:	4413      	add	r3, r2
 80040ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040b2:	461a      	mov	r2, r3
 80040b4:	2320      	movs	r3, #32
 80040b6:	6093      	str	r3, [r2, #8]
 80040b8:	e098      	b.n	80041ec <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	f040 8093 	bne.w	80041ec <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	4a4b      	ldr	r2, [pc, #300]	; (80041f8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d90f      	bls.n	80040ee <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d00a      	beq.n	80040ee <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	015a      	lsls	r2, r3, #5
 80040dc:	69bb      	ldr	r3, [r7, #24]
 80040de:	4413      	add	r3, r2
 80040e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040e4:	461a      	mov	r2, r3
 80040e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040ea:	6093      	str	r3, [r2, #8]
 80040ec:	e07e      	b.n	80041ec <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80040ee:	683a      	ldr	r2, [r7, #0]
 80040f0:	4613      	mov	r3, r2
 80040f2:	00db      	lsls	r3, r3, #3
 80040f4:	4413      	add	r3, r2
 80040f6:	009b      	lsls	r3, r3, #2
 80040f8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80040fc:	687a      	ldr	r2, [r7, #4]
 80040fe:	4413      	add	r3, r2
 8004100:	3304      	adds	r3, #4
 8004102:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	6a1a      	ldr	r2, [r3, #32]
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	0159      	lsls	r1, r3, #5
 800410c:	69bb      	ldr	r3, [r7, #24]
 800410e:	440b      	add	r3, r1
 8004110:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004114:	691b      	ldr	r3, [r3, #16]
 8004116:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800411a:	1ad2      	subs	r2, r2, r3
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d114      	bne.n	8004150 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	691b      	ldr	r3, [r3, #16]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d109      	bne.n	8004142 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6818      	ldr	r0, [r3, #0]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004138:	461a      	mov	r2, r3
 800413a:	2101      	movs	r1, #1
 800413c:	f005 fa6c 	bl	8009618 <USB_EP0_OutStart>
 8004140:	e006      	b.n	8004150 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	68da      	ldr	r2, [r3, #12]
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	695b      	ldr	r3, [r3, #20]
 800414a:	441a      	add	r2, r3
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	b2db      	uxtb	r3, r3
 8004154:	4619      	mov	r1, r3
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f007 fd46 	bl	800bbe8 <HAL_PCD_DataOutStageCallback>
 800415c:	e046      	b.n	80041ec <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	4a26      	ldr	r2, [pc, #152]	; (80041fc <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d124      	bne.n	80041b0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800416c:	2b00      	cmp	r3, #0
 800416e:	d00a      	beq.n	8004186 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	015a      	lsls	r2, r3, #5
 8004174:	69bb      	ldr	r3, [r7, #24]
 8004176:	4413      	add	r3, r2
 8004178:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800417c:	461a      	mov	r2, r3
 800417e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004182:	6093      	str	r3, [r2, #8]
 8004184:	e032      	b.n	80041ec <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	f003 0320 	and.w	r3, r3, #32
 800418c:	2b00      	cmp	r3, #0
 800418e:	d008      	beq.n	80041a2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	015a      	lsls	r2, r3, #5
 8004194:	69bb      	ldr	r3, [r7, #24]
 8004196:	4413      	add	r3, r2
 8004198:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800419c:	461a      	mov	r2, r3
 800419e:	2320      	movs	r3, #32
 80041a0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	4619      	mov	r1, r3
 80041a8:	6878      	ldr	r0, [r7, #4]
 80041aa:	f007 fd1d 	bl	800bbe8 <HAL_PCD_DataOutStageCallback>
 80041ae:	e01d      	b.n	80041ec <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d114      	bne.n	80041e0 <PCD_EP_OutXfrComplete_int+0x1b0>
 80041b6:	6879      	ldr	r1, [r7, #4]
 80041b8:	683a      	ldr	r2, [r7, #0]
 80041ba:	4613      	mov	r3, r2
 80041bc:	00db      	lsls	r3, r3, #3
 80041be:	4413      	add	r3, r2
 80041c0:	009b      	lsls	r3, r3, #2
 80041c2:	440b      	add	r3, r1
 80041c4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d108      	bne.n	80041e0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6818      	ldr	r0, [r3, #0]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80041d8:	461a      	mov	r2, r3
 80041da:	2100      	movs	r1, #0
 80041dc:	f005 fa1c 	bl	8009618 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	b2db      	uxtb	r3, r3
 80041e4:	4619      	mov	r1, r3
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f007 fcfe 	bl	800bbe8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80041ec:	2300      	movs	r3, #0
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	3720      	adds	r7, #32
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}
 80041f6:	bf00      	nop
 80041f8:	4f54300a 	.word	0x4f54300a
 80041fc:	4f54310a 	.word	0x4f54310a

08004200 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b086      	sub	sp, #24
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
 8004208:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	333c      	adds	r3, #60	; 0x3c
 8004218:	3304      	adds	r3, #4
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	015a      	lsls	r2, r3, #5
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	4413      	add	r3, r2
 8004226:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	4a15      	ldr	r2, [pc, #84]	; (8004288 <PCD_EP_OutSetupPacket_int+0x88>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d90e      	bls.n	8004254 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800423c:	2b00      	cmp	r3, #0
 800423e:	d009      	beq.n	8004254 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	015a      	lsls	r2, r3, #5
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	4413      	add	r3, r2
 8004248:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800424c:	461a      	mov	r2, r3
 800424e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004252:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	f007 fcb5 	bl	800bbc4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	4a0a      	ldr	r2, [pc, #40]	; (8004288 <PCD_EP_OutSetupPacket_int+0x88>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d90c      	bls.n	800427c <PCD_EP_OutSetupPacket_int+0x7c>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	68db      	ldr	r3, [r3, #12]
 8004266:	2b01      	cmp	r3, #1
 8004268:	d108      	bne.n	800427c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6818      	ldr	r0, [r3, #0]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004274:	461a      	mov	r2, r3
 8004276:	2101      	movs	r1, #1
 8004278:	f005 f9ce 	bl	8009618 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800427c:	2300      	movs	r3, #0
}
 800427e:	4618      	mov	r0, r3
 8004280:	3718      	adds	r7, #24
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}
 8004286:	bf00      	nop
 8004288:	4f54300a 	.word	0x4f54300a

0800428c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800428c:	b480      	push	{r7}
 800428e:	b085      	sub	sp, #20
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
 8004294:	460b      	mov	r3, r1
 8004296:	70fb      	strb	r3, [r7, #3]
 8004298:	4613      	mov	r3, r2
 800429a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80042a4:	78fb      	ldrb	r3, [r7, #3]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d107      	bne.n	80042ba <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80042aa:	883b      	ldrh	r3, [r7, #0]
 80042ac:	0419      	lsls	r1, r3, #16
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	68ba      	ldr	r2, [r7, #8]
 80042b4:	430a      	orrs	r2, r1
 80042b6:	629a      	str	r2, [r3, #40]	; 0x28
 80042b8:	e028      	b.n	800430c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042c0:	0c1b      	lsrs	r3, r3, #16
 80042c2:	68ba      	ldr	r2, [r7, #8]
 80042c4:	4413      	add	r3, r2
 80042c6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80042c8:	2300      	movs	r3, #0
 80042ca:	73fb      	strb	r3, [r7, #15]
 80042cc:	e00d      	b.n	80042ea <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681a      	ldr	r2, [r3, #0]
 80042d2:	7bfb      	ldrb	r3, [r7, #15]
 80042d4:	3340      	adds	r3, #64	; 0x40
 80042d6:	009b      	lsls	r3, r3, #2
 80042d8:	4413      	add	r3, r2
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	0c1b      	lsrs	r3, r3, #16
 80042de:	68ba      	ldr	r2, [r7, #8]
 80042e0:	4413      	add	r3, r2
 80042e2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80042e4:	7bfb      	ldrb	r3, [r7, #15]
 80042e6:	3301      	adds	r3, #1
 80042e8:	73fb      	strb	r3, [r7, #15]
 80042ea:	7bfa      	ldrb	r2, [r7, #15]
 80042ec:	78fb      	ldrb	r3, [r7, #3]
 80042ee:	3b01      	subs	r3, #1
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d3ec      	bcc.n	80042ce <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80042f4:	883b      	ldrh	r3, [r7, #0]
 80042f6:	0418      	lsls	r0, r3, #16
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6819      	ldr	r1, [r3, #0]
 80042fc:	78fb      	ldrb	r3, [r7, #3]
 80042fe:	3b01      	subs	r3, #1
 8004300:	68ba      	ldr	r2, [r7, #8]
 8004302:	4302      	orrs	r2, r0
 8004304:	3340      	adds	r3, #64	; 0x40
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	440b      	add	r3, r1
 800430a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800430c:	2300      	movs	r3, #0
}
 800430e:	4618      	mov	r0, r3
 8004310:	3714      	adds	r7, #20
 8004312:	46bd      	mov	sp, r7
 8004314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004318:	4770      	bx	lr

0800431a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800431a:	b480      	push	{r7}
 800431c:	b083      	sub	sp, #12
 800431e:	af00      	add	r7, sp, #0
 8004320:	6078      	str	r0, [r7, #4]
 8004322:	460b      	mov	r3, r1
 8004324:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	887a      	ldrh	r2, [r7, #2]
 800432c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800432e:	2300      	movs	r3, #0
}
 8004330:	4618      	mov	r0, r3
 8004332:	370c      	adds	r7, #12
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr

0800433c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800433c:	b480      	push	{r7}
 800433e:	b085      	sub	sp, #20
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2201      	movs	r2, #1
 800434e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2200      	movs	r2, #0
 8004356:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	699b      	ldr	r3, [r3, #24]
 800435e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800436a:	4b05      	ldr	r3, [pc, #20]	; (8004380 <HAL_PCDEx_ActivateLPM+0x44>)
 800436c:	4313      	orrs	r3, r2
 800436e:	68fa      	ldr	r2, [r7, #12]
 8004370:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004372:	2300      	movs	r3, #0
}
 8004374:	4618      	mov	r0, r3
 8004376:	3714      	adds	r7, #20
 8004378:	46bd      	mov	sp, r7
 800437a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437e:	4770      	bx	lr
 8004380:	10000003 	.word	0x10000003

08004384 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004384:	b480      	push	{r7}
 8004386:	b083      	sub	sp, #12
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
 800438c:	460b      	mov	r3, r1
 800438e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004390:	bf00      	nop
 8004392:	370c      	adds	r7, #12
 8004394:	46bd      	mov	sp, r7
 8004396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439a:	4770      	bx	lr

0800439c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b084      	sub	sp, #16
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80043a4:	4b19      	ldr	r3, [pc, #100]	; (800440c <HAL_PWREx_ConfigSupply+0x70>)
 80043a6:	68db      	ldr	r3, [r3, #12]
 80043a8:	f003 0304 	and.w	r3, r3, #4
 80043ac:	2b04      	cmp	r3, #4
 80043ae:	d00a      	beq.n	80043c6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80043b0:	4b16      	ldr	r3, [pc, #88]	; (800440c <HAL_PWREx_ConfigSupply+0x70>)
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	f003 0307 	and.w	r3, r3, #7
 80043b8:	687a      	ldr	r2, [r7, #4]
 80043ba:	429a      	cmp	r2, r3
 80043bc:	d001      	beq.n	80043c2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	e01f      	b.n	8004402 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80043c2:	2300      	movs	r3, #0
 80043c4:	e01d      	b.n	8004402 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80043c6:	4b11      	ldr	r3, [pc, #68]	; (800440c <HAL_PWREx_ConfigSupply+0x70>)
 80043c8:	68db      	ldr	r3, [r3, #12]
 80043ca:	f023 0207 	bic.w	r2, r3, #7
 80043ce:	490f      	ldr	r1, [pc, #60]	; (800440c <HAL_PWREx_ConfigSupply+0x70>)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	4313      	orrs	r3, r2
 80043d4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80043d6:	f7fd fa73 	bl	80018c0 <HAL_GetTick>
 80043da:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80043dc:	e009      	b.n	80043f2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80043de:	f7fd fa6f 	bl	80018c0 <HAL_GetTick>
 80043e2:	4602      	mov	r2, r0
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	1ad3      	subs	r3, r2, r3
 80043e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80043ec:	d901      	bls.n	80043f2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	e007      	b.n	8004402 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80043f2:	4b06      	ldr	r3, [pc, #24]	; (800440c <HAL_PWREx_ConfigSupply+0x70>)
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80043fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043fe:	d1ee      	bne.n	80043de <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004400:	2300      	movs	r3, #0
}
 8004402:	4618      	mov	r0, r3
 8004404:	3710      	adds	r7, #16
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}
 800440a:	bf00      	nop
 800440c:	58024800 	.word	0x58024800

08004410 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8004410:	b480      	push	{r7}
 8004412:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8004414:	4b05      	ldr	r3, [pc, #20]	; (800442c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	4a04      	ldr	r2, [pc, #16]	; (800442c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800441a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800441e:	60d3      	str	r3, [r2, #12]
}
 8004420:	bf00      	nop
 8004422:	46bd      	mov	sp, r7
 8004424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004428:	4770      	bx	lr
 800442a:	bf00      	nop
 800442c:	58024800 	.word	0x58024800

08004430 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b08c      	sub	sp, #48	; 0x30
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d102      	bne.n	8004444 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	f000 bc48 	b.w	8004cd4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f003 0301 	and.w	r3, r3, #1
 800444c:	2b00      	cmp	r3, #0
 800444e:	f000 8088 	beq.w	8004562 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004452:	4b99      	ldr	r3, [pc, #612]	; (80046b8 <HAL_RCC_OscConfig+0x288>)
 8004454:	691b      	ldr	r3, [r3, #16]
 8004456:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800445a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800445c:	4b96      	ldr	r3, [pc, #600]	; (80046b8 <HAL_RCC_OscConfig+0x288>)
 800445e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004460:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004464:	2b10      	cmp	r3, #16
 8004466:	d007      	beq.n	8004478 <HAL_RCC_OscConfig+0x48>
 8004468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800446a:	2b18      	cmp	r3, #24
 800446c:	d111      	bne.n	8004492 <HAL_RCC_OscConfig+0x62>
 800446e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004470:	f003 0303 	and.w	r3, r3, #3
 8004474:	2b02      	cmp	r3, #2
 8004476:	d10c      	bne.n	8004492 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004478:	4b8f      	ldr	r3, [pc, #572]	; (80046b8 <HAL_RCC_OscConfig+0x288>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004480:	2b00      	cmp	r3, #0
 8004482:	d06d      	beq.n	8004560 <HAL_RCC_OscConfig+0x130>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d169      	bne.n	8004560 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	f000 bc21 	b.w	8004cd4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800449a:	d106      	bne.n	80044aa <HAL_RCC_OscConfig+0x7a>
 800449c:	4b86      	ldr	r3, [pc, #536]	; (80046b8 <HAL_RCC_OscConfig+0x288>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a85      	ldr	r2, [pc, #532]	; (80046b8 <HAL_RCC_OscConfig+0x288>)
 80044a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044a6:	6013      	str	r3, [r2, #0]
 80044a8:	e02e      	b.n	8004508 <HAL_RCC_OscConfig+0xd8>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d10c      	bne.n	80044cc <HAL_RCC_OscConfig+0x9c>
 80044b2:	4b81      	ldr	r3, [pc, #516]	; (80046b8 <HAL_RCC_OscConfig+0x288>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a80      	ldr	r2, [pc, #512]	; (80046b8 <HAL_RCC_OscConfig+0x288>)
 80044b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044bc:	6013      	str	r3, [r2, #0]
 80044be:	4b7e      	ldr	r3, [pc, #504]	; (80046b8 <HAL_RCC_OscConfig+0x288>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a7d      	ldr	r2, [pc, #500]	; (80046b8 <HAL_RCC_OscConfig+0x288>)
 80044c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044c8:	6013      	str	r3, [r2, #0]
 80044ca:	e01d      	b.n	8004508 <HAL_RCC_OscConfig+0xd8>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80044d4:	d10c      	bne.n	80044f0 <HAL_RCC_OscConfig+0xc0>
 80044d6:	4b78      	ldr	r3, [pc, #480]	; (80046b8 <HAL_RCC_OscConfig+0x288>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a77      	ldr	r2, [pc, #476]	; (80046b8 <HAL_RCC_OscConfig+0x288>)
 80044dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044e0:	6013      	str	r3, [r2, #0]
 80044e2:	4b75      	ldr	r3, [pc, #468]	; (80046b8 <HAL_RCC_OscConfig+0x288>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a74      	ldr	r2, [pc, #464]	; (80046b8 <HAL_RCC_OscConfig+0x288>)
 80044e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044ec:	6013      	str	r3, [r2, #0]
 80044ee:	e00b      	b.n	8004508 <HAL_RCC_OscConfig+0xd8>
 80044f0:	4b71      	ldr	r3, [pc, #452]	; (80046b8 <HAL_RCC_OscConfig+0x288>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a70      	ldr	r2, [pc, #448]	; (80046b8 <HAL_RCC_OscConfig+0x288>)
 80044f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044fa:	6013      	str	r3, [r2, #0]
 80044fc:	4b6e      	ldr	r3, [pc, #440]	; (80046b8 <HAL_RCC_OscConfig+0x288>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a6d      	ldr	r2, [pc, #436]	; (80046b8 <HAL_RCC_OscConfig+0x288>)
 8004502:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004506:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d013      	beq.n	8004538 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004510:	f7fd f9d6 	bl	80018c0 <HAL_GetTick>
 8004514:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004516:	e008      	b.n	800452a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004518:	f7fd f9d2 	bl	80018c0 <HAL_GetTick>
 800451c:	4602      	mov	r2, r0
 800451e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004520:	1ad3      	subs	r3, r2, r3
 8004522:	2b64      	cmp	r3, #100	; 0x64
 8004524:	d901      	bls.n	800452a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004526:	2303      	movs	r3, #3
 8004528:	e3d4      	b.n	8004cd4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800452a:	4b63      	ldr	r3, [pc, #396]	; (80046b8 <HAL_RCC_OscConfig+0x288>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004532:	2b00      	cmp	r3, #0
 8004534:	d0f0      	beq.n	8004518 <HAL_RCC_OscConfig+0xe8>
 8004536:	e014      	b.n	8004562 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004538:	f7fd f9c2 	bl	80018c0 <HAL_GetTick>
 800453c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800453e:	e008      	b.n	8004552 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004540:	f7fd f9be 	bl	80018c0 <HAL_GetTick>
 8004544:	4602      	mov	r2, r0
 8004546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004548:	1ad3      	subs	r3, r2, r3
 800454a:	2b64      	cmp	r3, #100	; 0x64
 800454c:	d901      	bls.n	8004552 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800454e:	2303      	movs	r3, #3
 8004550:	e3c0      	b.n	8004cd4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004552:	4b59      	ldr	r3, [pc, #356]	; (80046b8 <HAL_RCC_OscConfig+0x288>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800455a:	2b00      	cmp	r3, #0
 800455c:	d1f0      	bne.n	8004540 <HAL_RCC_OscConfig+0x110>
 800455e:	e000      	b.n	8004562 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004560:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f003 0302 	and.w	r3, r3, #2
 800456a:	2b00      	cmp	r3, #0
 800456c:	f000 80ca 	beq.w	8004704 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004570:	4b51      	ldr	r3, [pc, #324]	; (80046b8 <HAL_RCC_OscConfig+0x288>)
 8004572:	691b      	ldr	r3, [r3, #16]
 8004574:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004578:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800457a:	4b4f      	ldr	r3, [pc, #316]	; (80046b8 <HAL_RCC_OscConfig+0x288>)
 800457c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800457e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004580:	6a3b      	ldr	r3, [r7, #32]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d007      	beq.n	8004596 <HAL_RCC_OscConfig+0x166>
 8004586:	6a3b      	ldr	r3, [r7, #32]
 8004588:	2b18      	cmp	r3, #24
 800458a:	d156      	bne.n	800463a <HAL_RCC_OscConfig+0x20a>
 800458c:	69fb      	ldr	r3, [r7, #28]
 800458e:	f003 0303 	and.w	r3, r3, #3
 8004592:	2b00      	cmp	r3, #0
 8004594:	d151      	bne.n	800463a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004596:	4b48      	ldr	r3, [pc, #288]	; (80046b8 <HAL_RCC_OscConfig+0x288>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f003 0304 	and.w	r3, r3, #4
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d005      	beq.n	80045ae <HAL_RCC_OscConfig+0x17e>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	68db      	ldr	r3, [r3, #12]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d101      	bne.n	80045ae <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	e392      	b.n	8004cd4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80045ae:	4b42      	ldr	r3, [pc, #264]	; (80046b8 <HAL_RCC_OscConfig+0x288>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f023 0219 	bic.w	r2, r3, #25
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	68db      	ldr	r3, [r3, #12]
 80045ba:	493f      	ldr	r1, [pc, #252]	; (80046b8 <HAL_RCC_OscConfig+0x288>)
 80045bc:	4313      	orrs	r3, r2
 80045be:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045c0:	f7fd f97e 	bl	80018c0 <HAL_GetTick>
 80045c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80045c6:	e008      	b.n	80045da <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045c8:	f7fd f97a 	bl	80018c0 <HAL_GetTick>
 80045cc:	4602      	mov	r2, r0
 80045ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d0:	1ad3      	subs	r3, r2, r3
 80045d2:	2b02      	cmp	r3, #2
 80045d4:	d901      	bls.n	80045da <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80045d6:	2303      	movs	r3, #3
 80045d8:	e37c      	b.n	8004cd4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80045da:	4b37      	ldr	r3, [pc, #220]	; (80046b8 <HAL_RCC_OscConfig+0x288>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f003 0304 	and.w	r3, r3, #4
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d0f0      	beq.n	80045c8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045e6:	f7fd f99b 	bl	8001920 <HAL_GetREVID>
 80045ea:	4603      	mov	r3, r0
 80045ec:	f241 0203 	movw	r2, #4099	; 0x1003
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d817      	bhi.n	8004624 <HAL_RCC_OscConfig+0x1f4>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	691b      	ldr	r3, [r3, #16]
 80045f8:	2b40      	cmp	r3, #64	; 0x40
 80045fa:	d108      	bne.n	800460e <HAL_RCC_OscConfig+0x1de>
 80045fc:	4b2e      	ldr	r3, [pc, #184]	; (80046b8 <HAL_RCC_OscConfig+0x288>)
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004604:	4a2c      	ldr	r2, [pc, #176]	; (80046b8 <HAL_RCC_OscConfig+0x288>)
 8004606:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800460a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800460c:	e07a      	b.n	8004704 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800460e:	4b2a      	ldr	r3, [pc, #168]	; (80046b8 <HAL_RCC_OscConfig+0x288>)
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	691b      	ldr	r3, [r3, #16]
 800461a:	031b      	lsls	r3, r3, #12
 800461c:	4926      	ldr	r1, [pc, #152]	; (80046b8 <HAL_RCC_OscConfig+0x288>)
 800461e:	4313      	orrs	r3, r2
 8004620:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004622:	e06f      	b.n	8004704 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004624:	4b24      	ldr	r3, [pc, #144]	; (80046b8 <HAL_RCC_OscConfig+0x288>)
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	691b      	ldr	r3, [r3, #16]
 8004630:	061b      	lsls	r3, r3, #24
 8004632:	4921      	ldr	r1, [pc, #132]	; (80046b8 <HAL_RCC_OscConfig+0x288>)
 8004634:	4313      	orrs	r3, r2
 8004636:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004638:	e064      	b.n	8004704 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	68db      	ldr	r3, [r3, #12]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d047      	beq.n	80046d2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004642:	4b1d      	ldr	r3, [pc, #116]	; (80046b8 <HAL_RCC_OscConfig+0x288>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f023 0219 	bic.w	r2, r3, #25
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	68db      	ldr	r3, [r3, #12]
 800464e:	491a      	ldr	r1, [pc, #104]	; (80046b8 <HAL_RCC_OscConfig+0x288>)
 8004650:	4313      	orrs	r3, r2
 8004652:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004654:	f7fd f934 	bl	80018c0 <HAL_GetTick>
 8004658:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800465a:	e008      	b.n	800466e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800465c:	f7fd f930 	bl	80018c0 <HAL_GetTick>
 8004660:	4602      	mov	r2, r0
 8004662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004664:	1ad3      	subs	r3, r2, r3
 8004666:	2b02      	cmp	r3, #2
 8004668:	d901      	bls.n	800466e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800466a:	2303      	movs	r3, #3
 800466c:	e332      	b.n	8004cd4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800466e:	4b12      	ldr	r3, [pc, #72]	; (80046b8 <HAL_RCC_OscConfig+0x288>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f003 0304 	and.w	r3, r3, #4
 8004676:	2b00      	cmp	r3, #0
 8004678:	d0f0      	beq.n	800465c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800467a:	f7fd f951 	bl	8001920 <HAL_GetREVID>
 800467e:	4603      	mov	r3, r0
 8004680:	f241 0203 	movw	r2, #4099	; 0x1003
 8004684:	4293      	cmp	r3, r2
 8004686:	d819      	bhi.n	80046bc <HAL_RCC_OscConfig+0x28c>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	691b      	ldr	r3, [r3, #16]
 800468c:	2b40      	cmp	r3, #64	; 0x40
 800468e:	d108      	bne.n	80046a2 <HAL_RCC_OscConfig+0x272>
 8004690:	4b09      	ldr	r3, [pc, #36]	; (80046b8 <HAL_RCC_OscConfig+0x288>)
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004698:	4a07      	ldr	r2, [pc, #28]	; (80046b8 <HAL_RCC_OscConfig+0x288>)
 800469a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800469e:	6053      	str	r3, [r2, #4]
 80046a0:	e030      	b.n	8004704 <HAL_RCC_OscConfig+0x2d4>
 80046a2:	4b05      	ldr	r3, [pc, #20]	; (80046b8 <HAL_RCC_OscConfig+0x288>)
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	691b      	ldr	r3, [r3, #16]
 80046ae:	031b      	lsls	r3, r3, #12
 80046b0:	4901      	ldr	r1, [pc, #4]	; (80046b8 <HAL_RCC_OscConfig+0x288>)
 80046b2:	4313      	orrs	r3, r2
 80046b4:	604b      	str	r3, [r1, #4]
 80046b6:	e025      	b.n	8004704 <HAL_RCC_OscConfig+0x2d4>
 80046b8:	58024400 	.word	0x58024400
 80046bc:	4b9a      	ldr	r3, [pc, #616]	; (8004928 <HAL_RCC_OscConfig+0x4f8>)
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	691b      	ldr	r3, [r3, #16]
 80046c8:	061b      	lsls	r3, r3, #24
 80046ca:	4997      	ldr	r1, [pc, #604]	; (8004928 <HAL_RCC_OscConfig+0x4f8>)
 80046cc:	4313      	orrs	r3, r2
 80046ce:	604b      	str	r3, [r1, #4]
 80046d0:	e018      	b.n	8004704 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046d2:	4b95      	ldr	r3, [pc, #596]	; (8004928 <HAL_RCC_OscConfig+0x4f8>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a94      	ldr	r2, [pc, #592]	; (8004928 <HAL_RCC_OscConfig+0x4f8>)
 80046d8:	f023 0301 	bic.w	r3, r3, #1
 80046dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046de:	f7fd f8ef 	bl	80018c0 <HAL_GetTick>
 80046e2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80046e4:	e008      	b.n	80046f8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046e6:	f7fd f8eb 	bl	80018c0 <HAL_GetTick>
 80046ea:	4602      	mov	r2, r0
 80046ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ee:	1ad3      	subs	r3, r2, r3
 80046f0:	2b02      	cmp	r3, #2
 80046f2:	d901      	bls.n	80046f8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80046f4:	2303      	movs	r3, #3
 80046f6:	e2ed      	b.n	8004cd4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80046f8:	4b8b      	ldr	r3, [pc, #556]	; (8004928 <HAL_RCC_OscConfig+0x4f8>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f003 0304 	and.w	r3, r3, #4
 8004700:	2b00      	cmp	r3, #0
 8004702:	d1f0      	bne.n	80046e6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f003 0310 	and.w	r3, r3, #16
 800470c:	2b00      	cmp	r3, #0
 800470e:	f000 80a9 	beq.w	8004864 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004712:	4b85      	ldr	r3, [pc, #532]	; (8004928 <HAL_RCC_OscConfig+0x4f8>)
 8004714:	691b      	ldr	r3, [r3, #16]
 8004716:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800471a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800471c:	4b82      	ldr	r3, [pc, #520]	; (8004928 <HAL_RCC_OscConfig+0x4f8>)
 800471e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004720:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004722:	69bb      	ldr	r3, [r7, #24]
 8004724:	2b08      	cmp	r3, #8
 8004726:	d007      	beq.n	8004738 <HAL_RCC_OscConfig+0x308>
 8004728:	69bb      	ldr	r3, [r7, #24]
 800472a:	2b18      	cmp	r3, #24
 800472c:	d13a      	bne.n	80047a4 <HAL_RCC_OscConfig+0x374>
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	f003 0303 	and.w	r3, r3, #3
 8004734:	2b01      	cmp	r3, #1
 8004736:	d135      	bne.n	80047a4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004738:	4b7b      	ldr	r3, [pc, #492]	; (8004928 <HAL_RCC_OscConfig+0x4f8>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004740:	2b00      	cmp	r3, #0
 8004742:	d005      	beq.n	8004750 <HAL_RCC_OscConfig+0x320>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	69db      	ldr	r3, [r3, #28]
 8004748:	2b80      	cmp	r3, #128	; 0x80
 800474a:	d001      	beq.n	8004750 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800474c:	2301      	movs	r3, #1
 800474e:	e2c1      	b.n	8004cd4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004750:	f7fd f8e6 	bl	8001920 <HAL_GetREVID>
 8004754:	4603      	mov	r3, r0
 8004756:	f241 0203 	movw	r2, #4099	; 0x1003
 800475a:	4293      	cmp	r3, r2
 800475c:	d817      	bhi.n	800478e <HAL_RCC_OscConfig+0x35e>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6a1b      	ldr	r3, [r3, #32]
 8004762:	2b20      	cmp	r3, #32
 8004764:	d108      	bne.n	8004778 <HAL_RCC_OscConfig+0x348>
 8004766:	4b70      	ldr	r3, [pc, #448]	; (8004928 <HAL_RCC_OscConfig+0x4f8>)
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800476e:	4a6e      	ldr	r2, [pc, #440]	; (8004928 <HAL_RCC_OscConfig+0x4f8>)
 8004770:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004774:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004776:	e075      	b.n	8004864 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004778:	4b6b      	ldr	r3, [pc, #428]	; (8004928 <HAL_RCC_OscConfig+0x4f8>)
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6a1b      	ldr	r3, [r3, #32]
 8004784:	069b      	lsls	r3, r3, #26
 8004786:	4968      	ldr	r1, [pc, #416]	; (8004928 <HAL_RCC_OscConfig+0x4f8>)
 8004788:	4313      	orrs	r3, r2
 800478a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800478c:	e06a      	b.n	8004864 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800478e:	4b66      	ldr	r3, [pc, #408]	; (8004928 <HAL_RCC_OscConfig+0x4f8>)
 8004790:	68db      	ldr	r3, [r3, #12]
 8004792:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6a1b      	ldr	r3, [r3, #32]
 800479a:	061b      	lsls	r3, r3, #24
 800479c:	4962      	ldr	r1, [pc, #392]	; (8004928 <HAL_RCC_OscConfig+0x4f8>)
 800479e:	4313      	orrs	r3, r2
 80047a0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80047a2:	e05f      	b.n	8004864 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	69db      	ldr	r3, [r3, #28]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d042      	beq.n	8004832 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80047ac:	4b5e      	ldr	r3, [pc, #376]	; (8004928 <HAL_RCC_OscConfig+0x4f8>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a5d      	ldr	r2, [pc, #372]	; (8004928 <HAL_RCC_OscConfig+0x4f8>)
 80047b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047b8:	f7fd f882 	bl	80018c0 <HAL_GetTick>
 80047bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80047be:	e008      	b.n	80047d2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80047c0:	f7fd f87e 	bl	80018c0 <HAL_GetTick>
 80047c4:	4602      	mov	r2, r0
 80047c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c8:	1ad3      	subs	r3, r2, r3
 80047ca:	2b02      	cmp	r3, #2
 80047cc:	d901      	bls.n	80047d2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80047ce:	2303      	movs	r3, #3
 80047d0:	e280      	b.n	8004cd4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80047d2:	4b55      	ldr	r3, [pc, #340]	; (8004928 <HAL_RCC_OscConfig+0x4f8>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d0f0      	beq.n	80047c0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80047de:	f7fd f89f 	bl	8001920 <HAL_GetREVID>
 80047e2:	4603      	mov	r3, r0
 80047e4:	f241 0203 	movw	r2, #4099	; 0x1003
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d817      	bhi.n	800481c <HAL_RCC_OscConfig+0x3ec>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6a1b      	ldr	r3, [r3, #32]
 80047f0:	2b20      	cmp	r3, #32
 80047f2:	d108      	bne.n	8004806 <HAL_RCC_OscConfig+0x3d6>
 80047f4:	4b4c      	ldr	r3, [pc, #304]	; (8004928 <HAL_RCC_OscConfig+0x4f8>)
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80047fc:	4a4a      	ldr	r2, [pc, #296]	; (8004928 <HAL_RCC_OscConfig+0x4f8>)
 80047fe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004802:	6053      	str	r3, [r2, #4]
 8004804:	e02e      	b.n	8004864 <HAL_RCC_OscConfig+0x434>
 8004806:	4b48      	ldr	r3, [pc, #288]	; (8004928 <HAL_RCC_OscConfig+0x4f8>)
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6a1b      	ldr	r3, [r3, #32]
 8004812:	069b      	lsls	r3, r3, #26
 8004814:	4944      	ldr	r1, [pc, #272]	; (8004928 <HAL_RCC_OscConfig+0x4f8>)
 8004816:	4313      	orrs	r3, r2
 8004818:	604b      	str	r3, [r1, #4]
 800481a:	e023      	b.n	8004864 <HAL_RCC_OscConfig+0x434>
 800481c:	4b42      	ldr	r3, [pc, #264]	; (8004928 <HAL_RCC_OscConfig+0x4f8>)
 800481e:	68db      	ldr	r3, [r3, #12]
 8004820:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6a1b      	ldr	r3, [r3, #32]
 8004828:	061b      	lsls	r3, r3, #24
 800482a:	493f      	ldr	r1, [pc, #252]	; (8004928 <HAL_RCC_OscConfig+0x4f8>)
 800482c:	4313      	orrs	r3, r2
 800482e:	60cb      	str	r3, [r1, #12]
 8004830:	e018      	b.n	8004864 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004832:	4b3d      	ldr	r3, [pc, #244]	; (8004928 <HAL_RCC_OscConfig+0x4f8>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a3c      	ldr	r2, [pc, #240]	; (8004928 <HAL_RCC_OscConfig+0x4f8>)
 8004838:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800483c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800483e:	f7fd f83f 	bl	80018c0 <HAL_GetTick>
 8004842:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004844:	e008      	b.n	8004858 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004846:	f7fd f83b 	bl	80018c0 <HAL_GetTick>
 800484a:	4602      	mov	r2, r0
 800484c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800484e:	1ad3      	subs	r3, r2, r3
 8004850:	2b02      	cmp	r3, #2
 8004852:	d901      	bls.n	8004858 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004854:	2303      	movs	r3, #3
 8004856:	e23d      	b.n	8004cd4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004858:	4b33      	ldr	r3, [pc, #204]	; (8004928 <HAL_RCC_OscConfig+0x4f8>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004860:	2b00      	cmp	r3, #0
 8004862:	d1f0      	bne.n	8004846 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f003 0308 	and.w	r3, r3, #8
 800486c:	2b00      	cmp	r3, #0
 800486e:	d036      	beq.n	80048de <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	695b      	ldr	r3, [r3, #20]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d019      	beq.n	80048ac <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004878:	4b2b      	ldr	r3, [pc, #172]	; (8004928 <HAL_RCC_OscConfig+0x4f8>)
 800487a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800487c:	4a2a      	ldr	r2, [pc, #168]	; (8004928 <HAL_RCC_OscConfig+0x4f8>)
 800487e:	f043 0301 	orr.w	r3, r3, #1
 8004882:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004884:	f7fd f81c 	bl	80018c0 <HAL_GetTick>
 8004888:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800488a:	e008      	b.n	800489e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800488c:	f7fd f818 	bl	80018c0 <HAL_GetTick>
 8004890:	4602      	mov	r2, r0
 8004892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004894:	1ad3      	subs	r3, r2, r3
 8004896:	2b02      	cmp	r3, #2
 8004898:	d901      	bls.n	800489e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800489a:	2303      	movs	r3, #3
 800489c:	e21a      	b.n	8004cd4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800489e:	4b22      	ldr	r3, [pc, #136]	; (8004928 <HAL_RCC_OscConfig+0x4f8>)
 80048a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048a2:	f003 0302 	and.w	r3, r3, #2
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d0f0      	beq.n	800488c <HAL_RCC_OscConfig+0x45c>
 80048aa:	e018      	b.n	80048de <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048ac:	4b1e      	ldr	r3, [pc, #120]	; (8004928 <HAL_RCC_OscConfig+0x4f8>)
 80048ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048b0:	4a1d      	ldr	r2, [pc, #116]	; (8004928 <HAL_RCC_OscConfig+0x4f8>)
 80048b2:	f023 0301 	bic.w	r3, r3, #1
 80048b6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048b8:	f7fd f802 	bl	80018c0 <HAL_GetTick>
 80048bc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80048be:	e008      	b.n	80048d2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048c0:	f7fc fffe 	bl	80018c0 <HAL_GetTick>
 80048c4:	4602      	mov	r2, r0
 80048c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c8:	1ad3      	subs	r3, r2, r3
 80048ca:	2b02      	cmp	r3, #2
 80048cc:	d901      	bls.n	80048d2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80048ce:	2303      	movs	r3, #3
 80048d0:	e200      	b.n	8004cd4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80048d2:	4b15      	ldr	r3, [pc, #84]	; (8004928 <HAL_RCC_OscConfig+0x4f8>)
 80048d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048d6:	f003 0302 	and.w	r3, r3, #2
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d1f0      	bne.n	80048c0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f003 0320 	and.w	r3, r3, #32
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d039      	beq.n	800495e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	699b      	ldr	r3, [r3, #24]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d01c      	beq.n	800492c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80048f2:	4b0d      	ldr	r3, [pc, #52]	; (8004928 <HAL_RCC_OscConfig+0x4f8>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a0c      	ldr	r2, [pc, #48]	; (8004928 <HAL_RCC_OscConfig+0x4f8>)
 80048f8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80048fc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80048fe:	f7fc ffdf 	bl	80018c0 <HAL_GetTick>
 8004902:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004904:	e008      	b.n	8004918 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004906:	f7fc ffdb 	bl	80018c0 <HAL_GetTick>
 800490a:	4602      	mov	r2, r0
 800490c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800490e:	1ad3      	subs	r3, r2, r3
 8004910:	2b02      	cmp	r3, #2
 8004912:	d901      	bls.n	8004918 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004914:	2303      	movs	r3, #3
 8004916:	e1dd      	b.n	8004cd4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004918:	4b03      	ldr	r3, [pc, #12]	; (8004928 <HAL_RCC_OscConfig+0x4f8>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004920:	2b00      	cmp	r3, #0
 8004922:	d0f0      	beq.n	8004906 <HAL_RCC_OscConfig+0x4d6>
 8004924:	e01b      	b.n	800495e <HAL_RCC_OscConfig+0x52e>
 8004926:	bf00      	nop
 8004928:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800492c:	4b9b      	ldr	r3, [pc, #620]	; (8004b9c <HAL_RCC_OscConfig+0x76c>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a9a      	ldr	r2, [pc, #616]	; (8004b9c <HAL_RCC_OscConfig+0x76c>)
 8004932:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004936:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004938:	f7fc ffc2 	bl	80018c0 <HAL_GetTick>
 800493c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800493e:	e008      	b.n	8004952 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004940:	f7fc ffbe 	bl	80018c0 <HAL_GetTick>
 8004944:	4602      	mov	r2, r0
 8004946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004948:	1ad3      	subs	r3, r2, r3
 800494a:	2b02      	cmp	r3, #2
 800494c:	d901      	bls.n	8004952 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800494e:	2303      	movs	r3, #3
 8004950:	e1c0      	b.n	8004cd4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004952:	4b92      	ldr	r3, [pc, #584]	; (8004b9c <HAL_RCC_OscConfig+0x76c>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800495a:	2b00      	cmp	r3, #0
 800495c:	d1f0      	bne.n	8004940 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f003 0304 	and.w	r3, r3, #4
 8004966:	2b00      	cmp	r3, #0
 8004968:	f000 8081 	beq.w	8004a6e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800496c:	4b8c      	ldr	r3, [pc, #560]	; (8004ba0 <HAL_RCC_OscConfig+0x770>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a8b      	ldr	r2, [pc, #556]	; (8004ba0 <HAL_RCC_OscConfig+0x770>)
 8004972:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004976:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004978:	f7fc ffa2 	bl	80018c0 <HAL_GetTick>
 800497c:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800497e:	e008      	b.n	8004992 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004980:	f7fc ff9e 	bl	80018c0 <HAL_GetTick>
 8004984:	4602      	mov	r2, r0
 8004986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004988:	1ad3      	subs	r3, r2, r3
 800498a:	2b64      	cmp	r3, #100	; 0x64
 800498c:	d901      	bls.n	8004992 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800498e:	2303      	movs	r3, #3
 8004990:	e1a0      	b.n	8004cd4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004992:	4b83      	ldr	r3, [pc, #524]	; (8004ba0 <HAL_RCC_OscConfig+0x770>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800499a:	2b00      	cmp	r3, #0
 800499c:	d0f0      	beq.n	8004980 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	2b01      	cmp	r3, #1
 80049a4:	d106      	bne.n	80049b4 <HAL_RCC_OscConfig+0x584>
 80049a6:	4b7d      	ldr	r3, [pc, #500]	; (8004b9c <HAL_RCC_OscConfig+0x76c>)
 80049a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049aa:	4a7c      	ldr	r2, [pc, #496]	; (8004b9c <HAL_RCC_OscConfig+0x76c>)
 80049ac:	f043 0301 	orr.w	r3, r3, #1
 80049b0:	6713      	str	r3, [r2, #112]	; 0x70
 80049b2:	e02d      	b.n	8004a10 <HAL_RCC_OscConfig+0x5e0>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	689b      	ldr	r3, [r3, #8]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d10c      	bne.n	80049d6 <HAL_RCC_OscConfig+0x5a6>
 80049bc:	4b77      	ldr	r3, [pc, #476]	; (8004b9c <HAL_RCC_OscConfig+0x76c>)
 80049be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049c0:	4a76      	ldr	r2, [pc, #472]	; (8004b9c <HAL_RCC_OscConfig+0x76c>)
 80049c2:	f023 0301 	bic.w	r3, r3, #1
 80049c6:	6713      	str	r3, [r2, #112]	; 0x70
 80049c8:	4b74      	ldr	r3, [pc, #464]	; (8004b9c <HAL_RCC_OscConfig+0x76c>)
 80049ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049cc:	4a73      	ldr	r2, [pc, #460]	; (8004b9c <HAL_RCC_OscConfig+0x76c>)
 80049ce:	f023 0304 	bic.w	r3, r3, #4
 80049d2:	6713      	str	r3, [r2, #112]	; 0x70
 80049d4:	e01c      	b.n	8004a10 <HAL_RCC_OscConfig+0x5e0>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	2b05      	cmp	r3, #5
 80049dc:	d10c      	bne.n	80049f8 <HAL_RCC_OscConfig+0x5c8>
 80049de:	4b6f      	ldr	r3, [pc, #444]	; (8004b9c <HAL_RCC_OscConfig+0x76c>)
 80049e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049e2:	4a6e      	ldr	r2, [pc, #440]	; (8004b9c <HAL_RCC_OscConfig+0x76c>)
 80049e4:	f043 0304 	orr.w	r3, r3, #4
 80049e8:	6713      	str	r3, [r2, #112]	; 0x70
 80049ea:	4b6c      	ldr	r3, [pc, #432]	; (8004b9c <HAL_RCC_OscConfig+0x76c>)
 80049ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049ee:	4a6b      	ldr	r2, [pc, #428]	; (8004b9c <HAL_RCC_OscConfig+0x76c>)
 80049f0:	f043 0301 	orr.w	r3, r3, #1
 80049f4:	6713      	str	r3, [r2, #112]	; 0x70
 80049f6:	e00b      	b.n	8004a10 <HAL_RCC_OscConfig+0x5e0>
 80049f8:	4b68      	ldr	r3, [pc, #416]	; (8004b9c <HAL_RCC_OscConfig+0x76c>)
 80049fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049fc:	4a67      	ldr	r2, [pc, #412]	; (8004b9c <HAL_RCC_OscConfig+0x76c>)
 80049fe:	f023 0301 	bic.w	r3, r3, #1
 8004a02:	6713      	str	r3, [r2, #112]	; 0x70
 8004a04:	4b65      	ldr	r3, [pc, #404]	; (8004b9c <HAL_RCC_OscConfig+0x76c>)
 8004a06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a08:	4a64      	ldr	r2, [pc, #400]	; (8004b9c <HAL_RCC_OscConfig+0x76c>)
 8004a0a:	f023 0304 	bic.w	r3, r3, #4
 8004a0e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d015      	beq.n	8004a44 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a18:	f7fc ff52 	bl	80018c0 <HAL_GetTick>
 8004a1c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004a1e:	e00a      	b.n	8004a36 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a20:	f7fc ff4e 	bl	80018c0 <HAL_GetTick>
 8004a24:	4602      	mov	r2, r0
 8004a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a28:	1ad3      	subs	r3, r2, r3
 8004a2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d901      	bls.n	8004a36 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004a32:	2303      	movs	r3, #3
 8004a34:	e14e      	b.n	8004cd4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004a36:	4b59      	ldr	r3, [pc, #356]	; (8004b9c <HAL_RCC_OscConfig+0x76c>)
 8004a38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a3a:	f003 0302 	and.w	r3, r3, #2
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d0ee      	beq.n	8004a20 <HAL_RCC_OscConfig+0x5f0>
 8004a42:	e014      	b.n	8004a6e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a44:	f7fc ff3c 	bl	80018c0 <HAL_GetTick>
 8004a48:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004a4a:	e00a      	b.n	8004a62 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a4c:	f7fc ff38 	bl	80018c0 <HAL_GetTick>
 8004a50:	4602      	mov	r2, r0
 8004a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a54:	1ad3      	subs	r3, r2, r3
 8004a56:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d901      	bls.n	8004a62 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004a5e:	2303      	movs	r3, #3
 8004a60:	e138      	b.n	8004cd4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004a62:	4b4e      	ldr	r3, [pc, #312]	; (8004b9c <HAL_RCC_OscConfig+0x76c>)
 8004a64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a66:	f003 0302 	and.w	r3, r3, #2
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d1ee      	bne.n	8004a4c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	f000 812d 	beq.w	8004cd2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004a78:	4b48      	ldr	r3, [pc, #288]	; (8004b9c <HAL_RCC_OscConfig+0x76c>)
 8004a7a:	691b      	ldr	r3, [r3, #16]
 8004a7c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004a80:	2b18      	cmp	r3, #24
 8004a82:	f000 80bd 	beq.w	8004c00 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a8a:	2b02      	cmp	r3, #2
 8004a8c:	f040 809e 	bne.w	8004bcc <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a90:	4b42      	ldr	r3, [pc, #264]	; (8004b9c <HAL_RCC_OscConfig+0x76c>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a41      	ldr	r2, [pc, #260]	; (8004b9c <HAL_RCC_OscConfig+0x76c>)
 8004a96:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a9c:	f7fc ff10 	bl	80018c0 <HAL_GetTick>
 8004aa0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004aa2:	e008      	b.n	8004ab6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004aa4:	f7fc ff0c 	bl	80018c0 <HAL_GetTick>
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aac:	1ad3      	subs	r3, r2, r3
 8004aae:	2b02      	cmp	r3, #2
 8004ab0:	d901      	bls.n	8004ab6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004ab2:	2303      	movs	r3, #3
 8004ab4:	e10e      	b.n	8004cd4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004ab6:	4b39      	ldr	r3, [pc, #228]	; (8004b9c <HAL_RCC_OscConfig+0x76c>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d1f0      	bne.n	8004aa4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ac2:	4b36      	ldr	r3, [pc, #216]	; (8004b9c <HAL_RCC_OscConfig+0x76c>)
 8004ac4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ac6:	4b37      	ldr	r3, [pc, #220]	; (8004ba4 <HAL_RCC_OscConfig+0x774>)
 8004ac8:	4013      	ands	r3, r2
 8004aca:	687a      	ldr	r2, [r7, #4]
 8004acc:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004ad2:	0112      	lsls	r2, r2, #4
 8004ad4:	430a      	orrs	r2, r1
 8004ad6:	4931      	ldr	r1, [pc, #196]	; (8004b9c <HAL_RCC_OscConfig+0x76c>)
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	628b      	str	r3, [r1, #40]	; 0x28
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ae0:	3b01      	subs	r3, #1
 8004ae2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004aea:	3b01      	subs	r3, #1
 8004aec:	025b      	lsls	r3, r3, #9
 8004aee:	b29b      	uxth	r3, r3
 8004af0:	431a      	orrs	r2, r3
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004af6:	3b01      	subs	r3, #1
 8004af8:	041b      	lsls	r3, r3, #16
 8004afa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004afe:	431a      	orrs	r2, r3
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b04:	3b01      	subs	r3, #1
 8004b06:	061b      	lsls	r3, r3, #24
 8004b08:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004b0c:	4923      	ldr	r1, [pc, #140]	; (8004b9c <HAL_RCC_OscConfig+0x76c>)
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004b12:	4b22      	ldr	r3, [pc, #136]	; (8004b9c <HAL_RCC_OscConfig+0x76c>)
 8004b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b16:	4a21      	ldr	r2, [pc, #132]	; (8004b9c <HAL_RCC_OscConfig+0x76c>)
 8004b18:	f023 0301 	bic.w	r3, r3, #1
 8004b1c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004b1e:	4b1f      	ldr	r3, [pc, #124]	; (8004b9c <HAL_RCC_OscConfig+0x76c>)
 8004b20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b22:	4b21      	ldr	r3, [pc, #132]	; (8004ba8 <HAL_RCC_OscConfig+0x778>)
 8004b24:	4013      	ands	r3, r2
 8004b26:	687a      	ldr	r2, [r7, #4]
 8004b28:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004b2a:	00d2      	lsls	r2, r2, #3
 8004b2c:	491b      	ldr	r1, [pc, #108]	; (8004b9c <HAL_RCC_OscConfig+0x76c>)
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004b32:	4b1a      	ldr	r3, [pc, #104]	; (8004b9c <HAL_RCC_OscConfig+0x76c>)
 8004b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b36:	f023 020c 	bic.w	r2, r3, #12
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b3e:	4917      	ldr	r1, [pc, #92]	; (8004b9c <HAL_RCC_OscConfig+0x76c>)
 8004b40:	4313      	orrs	r3, r2
 8004b42:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004b44:	4b15      	ldr	r3, [pc, #84]	; (8004b9c <HAL_RCC_OscConfig+0x76c>)
 8004b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b48:	f023 0202 	bic.w	r2, r3, #2
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b50:	4912      	ldr	r1, [pc, #72]	; (8004b9c <HAL_RCC_OscConfig+0x76c>)
 8004b52:	4313      	orrs	r3, r2
 8004b54:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004b56:	4b11      	ldr	r3, [pc, #68]	; (8004b9c <HAL_RCC_OscConfig+0x76c>)
 8004b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b5a:	4a10      	ldr	r2, [pc, #64]	; (8004b9c <HAL_RCC_OscConfig+0x76c>)
 8004b5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b60:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b62:	4b0e      	ldr	r3, [pc, #56]	; (8004b9c <HAL_RCC_OscConfig+0x76c>)
 8004b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b66:	4a0d      	ldr	r2, [pc, #52]	; (8004b9c <HAL_RCC_OscConfig+0x76c>)
 8004b68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b6c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004b6e:	4b0b      	ldr	r3, [pc, #44]	; (8004b9c <HAL_RCC_OscConfig+0x76c>)
 8004b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b72:	4a0a      	ldr	r2, [pc, #40]	; (8004b9c <HAL_RCC_OscConfig+0x76c>)
 8004b74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b78:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004b7a:	4b08      	ldr	r3, [pc, #32]	; (8004b9c <HAL_RCC_OscConfig+0x76c>)
 8004b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b7e:	4a07      	ldr	r2, [pc, #28]	; (8004b9c <HAL_RCC_OscConfig+0x76c>)
 8004b80:	f043 0301 	orr.w	r3, r3, #1
 8004b84:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b86:	4b05      	ldr	r3, [pc, #20]	; (8004b9c <HAL_RCC_OscConfig+0x76c>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a04      	ldr	r2, [pc, #16]	; (8004b9c <HAL_RCC_OscConfig+0x76c>)
 8004b8c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b92:	f7fc fe95 	bl	80018c0 <HAL_GetTick>
 8004b96:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004b98:	e011      	b.n	8004bbe <HAL_RCC_OscConfig+0x78e>
 8004b9a:	bf00      	nop
 8004b9c:	58024400 	.word	0x58024400
 8004ba0:	58024800 	.word	0x58024800
 8004ba4:	fffffc0c 	.word	0xfffffc0c
 8004ba8:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bac:	f7fc fe88 	bl	80018c0 <HAL_GetTick>
 8004bb0:	4602      	mov	r2, r0
 8004bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb4:	1ad3      	subs	r3, r2, r3
 8004bb6:	2b02      	cmp	r3, #2
 8004bb8:	d901      	bls.n	8004bbe <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004bba:	2303      	movs	r3, #3
 8004bbc:	e08a      	b.n	8004cd4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004bbe:	4b47      	ldr	r3, [pc, #284]	; (8004cdc <HAL_RCC_OscConfig+0x8ac>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d0f0      	beq.n	8004bac <HAL_RCC_OscConfig+0x77c>
 8004bca:	e082      	b.n	8004cd2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bcc:	4b43      	ldr	r3, [pc, #268]	; (8004cdc <HAL_RCC_OscConfig+0x8ac>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a42      	ldr	r2, [pc, #264]	; (8004cdc <HAL_RCC_OscConfig+0x8ac>)
 8004bd2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004bd6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bd8:	f7fc fe72 	bl	80018c0 <HAL_GetTick>
 8004bdc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004bde:	e008      	b.n	8004bf2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004be0:	f7fc fe6e 	bl	80018c0 <HAL_GetTick>
 8004be4:	4602      	mov	r2, r0
 8004be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be8:	1ad3      	subs	r3, r2, r3
 8004bea:	2b02      	cmp	r3, #2
 8004bec:	d901      	bls.n	8004bf2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004bee:	2303      	movs	r3, #3
 8004bf0:	e070      	b.n	8004cd4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004bf2:	4b3a      	ldr	r3, [pc, #232]	; (8004cdc <HAL_RCC_OscConfig+0x8ac>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d1f0      	bne.n	8004be0 <HAL_RCC_OscConfig+0x7b0>
 8004bfe:	e068      	b.n	8004cd2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004c00:	4b36      	ldr	r3, [pc, #216]	; (8004cdc <HAL_RCC_OscConfig+0x8ac>)
 8004c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c04:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004c06:	4b35      	ldr	r3, [pc, #212]	; (8004cdc <HAL_RCC_OscConfig+0x8ac>)
 8004c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c0a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	d031      	beq.n	8004c78 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	f003 0203 	and.w	r2, r3, #3
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	d12a      	bne.n	8004c78 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	091b      	lsrs	r3, r3, #4
 8004c26:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c2e:	429a      	cmp	r2, r3
 8004c30:	d122      	bne.n	8004c78 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c3c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004c3e:	429a      	cmp	r2, r3
 8004c40:	d11a      	bne.n	8004c78 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	0a5b      	lsrs	r3, r3, #9
 8004c46:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c4e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004c50:	429a      	cmp	r2, r3
 8004c52:	d111      	bne.n	8004c78 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	0c1b      	lsrs	r3, r3, #16
 8004c58:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c60:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004c62:	429a      	cmp	r2, r3
 8004c64:	d108      	bne.n	8004c78 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	0e1b      	lsrs	r3, r3, #24
 8004c6a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c72:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004c74:	429a      	cmp	r2, r3
 8004c76:	d001      	beq.n	8004c7c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	e02b      	b.n	8004cd4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004c7c:	4b17      	ldr	r3, [pc, #92]	; (8004cdc <HAL_RCC_OscConfig+0x8ac>)
 8004c7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c80:	08db      	lsrs	r3, r3, #3
 8004c82:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004c86:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c8c:	693a      	ldr	r2, [r7, #16]
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	d01f      	beq.n	8004cd2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004c92:	4b12      	ldr	r3, [pc, #72]	; (8004cdc <HAL_RCC_OscConfig+0x8ac>)
 8004c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c96:	4a11      	ldr	r2, [pc, #68]	; (8004cdc <HAL_RCC_OscConfig+0x8ac>)
 8004c98:	f023 0301 	bic.w	r3, r3, #1
 8004c9c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004c9e:	f7fc fe0f 	bl	80018c0 <HAL_GetTick>
 8004ca2:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004ca4:	bf00      	nop
 8004ca6:	f7fc fe0b 	bl	80018c0 <HAL_GetTick>
 8004caa:	4602      	mov	r2, r0
 8004cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d0f9      	beq.n	8004ca6 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004cb2:	4b0a      	ldr	r3, [pc, #40]	; (8004cdc <HAL_RCC_OscConfig+0x8ac>)
 8004cb4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004cb6:	4b0a      	ldr	r3, [pc, #40]	; (8004ce0 <HAL_RCC_OscConfig+0x8b0>)
 8004cb8:	4013      	ands	r3, r2
 8004cba:	687a      	ldr	r2, [r7, #4]
 8004cbc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004cbe:	00d2      	lsls	r2, r2, #3
 8004cc0:	4906      	ldr	r1, [pc, #24]	; (8004cdc <HAL_RCC_OscConfig+0x8ac>)
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004cc6:	4b05      	ldr	r3, [pc, #20]	; (8004cdc <HAL_RCC_OscConfig+0x8ac>)
 8004cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cca:	4a04      	ldr	r2, [pc, #16]	; (8004cdc <HAL_RCC_OscConfig+0x8ac>)
 8004ccc:	f043 0301 	orr.w	r3, r3, #1
 8004cd0:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004cd2:	2300      	movs	r3, #0
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	3730      	adds	r7, #48	; 0x30
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}
 8004cdc:	58024400 	.word	0x58024400
 8004ce0:	ffff0007 	.word	0xffff0007

08004ce4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b086      	sub	sp, #24
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
 8004cec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d101      	bne.n	8004cf8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	e19c      	b.n	8005032 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004cf8:	4b8a      	ldr	r3, [pc, #552]	; (8004f24 <HAL_RCC_ClockConfig+0x240>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f003 030f 	and.w	r3, r3, #15
 8004d00:	683a      	ldr	r2, [r7, #0]
 8004d02:	429a      	cmp	r2, r3
 8004d04:	d910      	bls.n	8004d28 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d06:	4b87      	ldr	r3, [pc, #540]	; (8004f24 <HAL_RCC_ClockConfig+0x240>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f023 020f 	bic.w	r2, r3, #15
 8004d0e:	4985      	ldr	r1, [pc, #532]	; (8004f24 <HAL_RCC_ClockConfig+0x240>)
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	4313      	orrs	r3, r2
 8004d14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d16:	4b83      	ldr	r3, [pc, #524]	; (8004f24 <HAL_RCC_ClockConfig+0x240>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f003 030f 	and.w	r3, r3, #15
 8004d1e:	683a      	ldr	r2, [r7, #0]
 8004d20:	429a      	cmp	r2, r3
 8004d22:	d001      	beq.n	8004d28 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004d24:	2301      	movs	r3, #1
 8004d26:	e184      	b.n	8005032 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f003 0304 	and.w	r3, r3, #4
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d010      	beq.n	8004d56 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	691a      	ldr	r2, [r3, #16]
 8004d38:	4b7b      	ldr	r3, [pc, #492]	; (8004f28 <HAL_RCC_ClockConfig+0x244>)
 8004d3a:	699b      	ldr	r3, [r3, #24]
 8004d3c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d908      	bls.n	8004d56 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004d44:	4b78      	ldr	r3, [pc, #480]	; (8004f28 <HAL_RCC_ClockConfig+0x244>)
 8004d46:	699b      	ldr	r3, [r3, #24]
 8004d48:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	691b      	ldr	r3, [r3, #16]
 8004d50:	4975      	ldr	r1, [pc, #468]	; (8004f28 <HAL_RCC_ClockConfig+0x244>)
 8004d52:	4313      	orrs	r3, r2
 8004d54:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f003 0308 	and.w	r3, r3, #8
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d010      	beq.n	8004d84 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	695a      	ldr	r2, [r3, #20]
 8004d66:	4b70      	ldr	r3, [pc, #448]	; (8004f28 <HAL_RCC_ClockConfig+0x244>)
 8004d68:	69db      	ldr	r3, [r3, #28]
 8004d6a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004d6e:	429a      	cmp	r2, r3
 8004d70:	d908      	bls.n	8004d84 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004d72:	4b6d      	ldr	r3, [pc, #436]	; (8004f28 <HAL_RCC_ClockConfig+0x244>)
 8004d74:	69db      	ldr	r3, [r3, #28]
 8004d76:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	695b      	ldr	r3, [r3, #20]
 8004d7e:	496a      	ldr	r1, [pc, #424]	; (8004f28 <HAL_RCC_ClockConfig+0x244>)
 8004d80:	4313      	orrs	r3, r2
 8004d82:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f003 0310 	and.w	r3, r3, #16
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d010      	beq.n	8004db2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	699a      	ldr	r2, [r3, #24]
 8004d94:	4b64      	ldr	r3, [pc, #400]	; (8004f28 <HAL_RCC_ClockConfig+0x244>)
 8004d96:	69db      	ldr	r3, [r3, #28]
 8004d98:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004d9c:	429a      	cmp	r2, r3
 8004d9e:	d908      	bls.n	8004db2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004da0:	4b61      	ldr	r3, [pc, #388]	; (8004f28 <HAL_RCC_ClockConfig+0x244>)
 8004da2:	69db      	ldr	r3, [r3, #28]
 8004da4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	699b      	ldr	r3, [r3, #24]
 8004dac:	495e      	ldr	r1, [pc, #376]	; (8004f28 <HAL_RCC_ClockConfig+0x244>)
 8004dae:	4313      	orrs	r3, r2
 8004db0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f003 0320 	and.w	r3, r3, #32
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d010      	beq.n	8004de0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	69da      	ldr	r2, [r3, #28]
 8004dc2:	4b59      	ldr	r3, [pc, #356]	; (8004f28 <HAL_RCC_ClockConfig+0x244>)
 8004dc4:	6a1b      	ldr	r3, [r3, #32]
 8004dc6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	d908      	bls.n	8004de0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004dce:	4b56      	ldr	r3, [pc, #344]	; (8004f28 <HAL_RCC_ClockConfig+0x244>)
 8004dd0:	6a1b      	ldr	r3, [r3, #32]
 8004dd2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	69db      	ldr	r3, [r3, #28]
 8004dda:	4953      	ldr	r1, [pc, #332]	; (8004f28 <HAL_RCC_ClockConfig+0x244>)
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f003 0302 	and.w	r3, r3, #2
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d010      	beq.n	8004e0e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	68da      	ldr	r2, [r3, #12]
 8004df0:	4b4d      	ldr	r3, [pc, #308]	; (8004f28 <HAL_RCC_ClockConfig+0x244>)
 8004df2:	699b      	ldr	r3, [r3, #24]
 8004df4:	f003 030f 	and.w	r3, r3, #15
 8004df8:	429a      	cmp	r2, r3
 8004dfa:	d908      	bls.n	8004e0e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004dfc:	4b4a      	ldr	r3, [pc, #296]	; (8004f28 <HAL_RCC_ClockConfig+0x244>)
 8004dfe:	699b      	ldr	r3, [r3, #24]
 8004e00:	f023 020f 	bic.w	r2, r3, #15
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	68db      	ldr	r3, [r3, #12]
 8004e08:	4947      	ldr	r1, [pc, #284]	; (8004f28 <HAL_RCC_ClockConfig+0x244>)
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f003 0301 	and.w	r3, r3, #1
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d055      	beq.n	8004ec6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004e1a:	4b43      	ldr	r3, [pc, #268]	; (8004f28 <HAL_RCC_ClockConfig+0x244>)
 8004e1c:	699b      	ldr	r3, [r3, #24]
 8004e1e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	689b      	ldr	r3, [r3, #8]
 8004e26:	4940      	ldr	r1, [pc, #256]	; (8004f28 <HAL_RCC_ClockConfig+0x244>)
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	2b02      	cmp	r3, #2
 8004e32:	d107      	bne.n	8004e44 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004e34:	4b3c      	ldr	r3, [pc, #240]	; (8004f28 <HAL_RCC_ClockConfig+0x244>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d121      	bne.n	8004e84 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004e40:	2301      	movs	r3, #1
 8004e42:	e0f6      	b.n	8005032 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	2b03      	cmp	r3, #3
 8004e4a:	d107      	bne.n	8004e5c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004e4c:	4b36      	ldr	r3, [pc, #216]	; (8004f28 <HAL_RCC_ClockConfig+0x244>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d115      	bne.n	8004e84 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	e0ea      	b.n	8005032 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	d107      	bne.n	8004e74 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004e64:	4b30      	ldr	r3, [pc, #192]	; (8004f28 <HAL_RCC_ClockConfig+0x244>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d109      	bne.n	8004e84 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004e70:	2301      	movs	r3, #1
 8004e72:	e0de      	b.n	8005032 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e74:	4b2c      	ldr	r3, [pc, #176]	; (8004f28 <HAL_RCC_ClockConfig+0x244>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f003 0304 	and.w	r3, r3, #4
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d101      	bne.n	8004e84 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004e80:	2301      	movs	r3, #1
 8004e82:	e0d6      	b.n	8005032 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004e84:	4b28      	ldr	r3, [pc, #160]	; (8004f28 <HAL_RCC_ClockConfig+0x244>)
 8004e86:	691b      	ldr	r3, [r3, #16]
 8004e88:	f023 0207 	bic.w	r2, r3, #7
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	4925      	ldr	r1, [pc, #148]	; (8004f28 <HAL_RCC_ClockConfig+0x244>)
 8004e92:	4313      	orrs	r3, r2
 8004e94:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e96:	f7fc fd13 	bl	80018c0 <HAL_GetTick>
 8004e9a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e9c:	e00a      	b.n	8004eb4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e9e:	f7fc fd0f 	bl	80018c0 <HAL_GetTick>
 8004ea2:	4602      	mov	r2, r0
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	1ad3      	subs	r3, r2, r3
 8004ea8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d901      	bls.n	8004eb4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004eb0:	2303      	movs	r3, #3
 8004eb2:	e0be      	b.n	8005032 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004eb4:	4b1c      	ldr	r3, [pc, #112]	; (8004f28 <HAL_RCC_ClockConfig+0x244>)
 8004eb6:	691b      	ldr	r3, [r3, #16]
 8004eb8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	00db      	lsls	r3, r3, #3
 8004ec2:	429a      	cmp	r2, r3
 8004ec4:	d1eb      	bne.n	8004e9e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f003 0302 	and.w	r3, r3, #2
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d010      	beq.n	8004ef4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	68da      	ldr	r2, [r3, #12]
 8004ed6:	4b14      	ldr	r3, [pc, #80]	; (8004f28 <HAL_RCC_ClockConfig+0x244>)
 8004ed8:	699b      	ldr	r3, [r3, #24]
 8004eda:	f003 030f 	and.w	r3, r3, #15
 8004ede:	429a      	cmp	r2, r3
 8004ee0:	d208      	bcs.n	8004ef4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ee2:	4b11      	ldr	r3, [pc, #68]	; (8004f28 <HAL_RCC_ClockConfig+0x244>)
 8004ee4:	699b      	ldr	r3, [r3, #24]
 8004ee6:	f023 020f 	bic.w	r2, r3, #15
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	68db      	ldr	r3, [r3, #12]
 8004eee:	490e      	ldr	r1, [pc, #56]	; (8004f28 <HAL_RCC_ClockConfig+0x244>)
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004ef4:	4b0b      	ldr	r3, [pc, #44]	; (8004f24 <HAL_RCC_ClockConfig+0x240>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f003 030f 	and.w	r3, r3, #15
 8004efc:	683a      	ldr	r2, [r7, #0]
 8004efe:	429a      	cmp	r2, r3
 8004f00:	d214      	bcs.n	8004f2c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f02:	4b08      	ldr	r3, [pc, #32]	; (8004f24 <HAL_RCC_ClockConfig+0x240>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f023 020f 	bic.w	r2, r3, #15
 8004f0a:	4906      	ldr	r1, [pc, #24]	; (8004f24 <HAL_RCC_ClockConfig+0x240>)
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f12:	4b04      	ldr	r3, [pc, #16]	; (8004f24 <HAL_RCC_ClockConfig+0x240>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f003 030f 	and.w	r3, r3, #15
 8004f1a:	683a      	ldr	r2, [r7, #0]
 8004f1c:	429a      	cmp	r2, r3
 8004f1e:	d005      	beq.n	8004f2c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004f20:	2301      	movs	r3, #1
 8004f22:	e086      	b.n	8005032 <HAL_RCC_ClockConfig+0x34e>
 8004f24:	52002000 	.word	0x52002000
 8004f28:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f003 0304 	and.w	r3, r3, #4
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d010      	beq.n	8004f5a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	691a      	ldr	r2, [r3, #16]
 8004f3c:	4b3f      	ldr	r3, [pc, #252]	; (800503c <HAL_RCC_ClockConfig+0x358>)
 8004f3e:	699b      	ldr	r3, [r3, #24]
 8004f40:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004f44:	429a      	cmp	r2, r3
 8004f46:	d208      	bcs.n	8004f5a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004f48:	4b3c      	ldr	r3, [pc, #240]	; (800503c <HAL_RCC_ClockConfig+0x358>)
 8004f4a:	699b      	ldr	r3, [r3, #24]
 8004f4c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	691b      	ldr	r3, [r3, #16]
 8004f54:	4939      	ldr	r1, [pc, #228]	; (800503c <HAL_RCC_ClockConfig+0x358>)
 8004f56:	4313      	orrs	r3, r2
 8004f58:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f003 0308 	and.w	r3, r3, #8
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d010      	beq.n	8004f88 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	695a      	ldr	r2, [r3, #20]
 8004f6a:	4b34      	ldr	r3, [pc, #208]	; (800503c <HAL_RCC_ClockConfig+0x358>)
 8004f6c:	69db      	ldr	r3, [r3, #28]
 8004f6e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004f72:	429a      	cmp	r2, r3
 8004f74:	d208      	bcs.n	8004f88 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004f76:	4b31      	ldr	r3, [pc, #196]	; (800503c <HAL_RCC_ClockConfig+0x358>)
 8004f78:	69db      	ldr	r3, [r3, #28]
 8004f7a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	695b      	ldr	r3, [r3, #20]
 8004f82:	492e      	ldr	r1, [pc, #184]	; (800503c <HAL_RCC_ClockConfig+0x358>)
 8004f84:	4313      	orrs	r3, r2
 8004f86:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f003 0310 	and.w	r3, r3, #16
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d010      	beq.n	8004fb6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	699a      	ldr	r2, [r3, #24]
 8004f98:	4b28      	ldr	r3, [pc, #160]	; (800503c <HAL_RCC_ClockConfig+0x358>)
 8004f9a:	69db      	ldr	r3, [r3, #28]
 8004f9c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004fa0:	429a      	cmp	r2, r3
 8004fa2:	d208      	bcs.n	8004fb6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004fa4:	4b25      	ldr	r3, [pc, #148]	; (800503c <HAL_RCC_ClockConfig+0x358>)
 8004fa6:	69db      	ldr	r3, [r3, #28]
 8004fa8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	699b      	ldr	r3, [r3, #24]
 8004fb0:	4922      	ldr	r1, [pc, #136]	; (800503c <HAL_RCC_ClockConfig+0x358>)
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f003 0320 	and.w	r3, r3, #32
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d010      	beq.n	8004fe4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	69da      	ldr	r2, [r3, #28]
 8004fc6:	4b1d      	ldr	r3, [pc, #116]	; (800503c <HAL_RCC_ClockConfig+0x358>)
 8004fc8:	6a1b      	ldr	r3, [r3, #32]
 8004fca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004fce:	429a      	cmp	r2, r3
 8004fd0:	d208      	bcs.n	8004fe4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004fd2:	4b1a      	ldr	r3, [pc, #104]	; (800503c <HAL_RCC_ClockConfig+0x358>)
 8004fd4:	6a1b      	ldr	r3, [r3, #32]
 8004fd6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	69db      	ldr	r3, [r3, #28]
 8004fde:	4917      	ldr	r1, [pc, #92]	; (800503c <HAL_RCC_ClockConfig+0x358>)
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004fe4:	f000 f834 	bl	8005050 <HAL_RCC_GetSysClockFreq>
 8004fe8:	4602      	mov	r2, r0
 8004fea:	4b14      	ldr	r3, [pc, #80]	; (800503c <HAL_RCC_ClockConfig+0x358>)
 8004fec:	699b      	ldr	r3, [r3, #24]
 8004fee:	0a1b      	lsrs	r3, r3, #8
 8004ff0:	f003 030f 	and.w	r3, r3, #15
 8004ff4:	4912      	ldr	r1, [pc, #72]	; (8005040 <HAL_RCC_ClockConfig+0x35c>)
 8004ff6:	5ccb      	ldrb	r3, [r1, r3]
 8004ff8:	f003 031f 	and.w	r3, r3, #31
 8004ffc:	fa22 f303 	lsr.w	r3, r2, r3
 8005000:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005002:	4b0e      	ldr	r3, [pc, #56]	; (800503c <HAL_RCC_ClockConfig+0x358>)
 8005004:	699b      	ldr	r3, [r3, #24]
 8005006:	f003 030f 	and.w	r3, r3, #15
 800500a:	4a0d      	ldr	r2, [pc, #52]	; (8005040 <HAL_RCC_ClockConfig+0x35c>)
 800500c:	5cd3      	ldrb	r3, [r2, r3]
 800500e:	f003 031f 	and.w	r3, r3, #31
 8005012:	693a      	ldr	r2, [r7, #16]
 8005014:	fa22 f303 	lsr.w	r3, r2, r3
 8005018:	4a0a      	ldr	r2, [pc, #40]	; (8005044 <HAL_RCC_ClockConfig+0x360>)
 800501a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800501c:	4a0a      	ldr	r2, [pc, #40]	; (8005048 <HAL_RCC_ClockConfig+0x364>)
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005022:	4b0a      	ldr	r3, [pc, #40]	; (800504c <HAL_RCC_ClockConfig+0x368>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4618      	mov	r0, r3
 8005028:	f7fc fc00 	bl	800182c <HAL_InitTick>
 800502c:	4603      	mov	r3, r0
 800502e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005030:	7bfb      	ldrb	r3, [r7, #15]
}
 8005032:	4618      	mov	r0, r3
 8005034:	3718      	adds	r7, #24
 8005036:	46bd      	mov	sp, r7
 8005038:	bd80      	pop	{r7, pc}
 800503a:	bf00      	nop
 800503c:	58024400 	.word	0x58024400
 8005040:	0800d7d8 	.word	0x0800d7d8
 8005044:	240002fc 	.word	0x240002fc
 8005048:	240002f8 	.word	0x240002f8
 800504c:	24000300 	.word	0x24000300

08005050 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005050:	b480      	push	{r7}
 8005052:	b089      	sub	sp, #36	; 0x24
 8005054:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005056:	4bb3      	ldr	r3, [pc, #716]	; (8005324 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005058:	691b      	ldr	r3, [r3, #16]
 800505a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800505e:	2b18      	cmp	r3, #24
 8005060:	f200 8155 	bhi.w	800530e <HAL_RCC_GetSysClockFreq+0x2be>
 8005064:	a201      	add	r2, pc, #4	; (adr r2, 800506c <HAL_RCC_GetSysClockFreq+0x1c>)
 8005066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800506a:	bf00      	nop
 800506c:	080050d1 	.word	0x080050d1
 8005070:	0800530f 	.word	0x0800530f
 8005074:	0800530f 	.word	0x0800530f
 8005078:	0800530f 	.word	0x0800530f
 800507c:	0800530f 	.word	0x0800530f
 8005080:	0800530f 	.word	0x0800530f
 8005084:	0800530f 	.word	0x0800530f
 8005088:	0800530f 	.word	0x0800530f
 800508c:	080050f7 	.word	0x080050f7
 8005090:	0800530f 	.word	0x0800530f
 8005094:	0800530f 	.word	0x0800530f
 8005098:	0800530f 	.word	0x0800530f
 800509c:	0800530f 	.word	0x0800530f
 80050a0:	0800530f 	.word	0x0800530f
 80050a4:	0800530f 	.word	0x0800530f
 80050a8:	0800530f 	.word	0x0800530f
 80050ac:	080050fd 	.word	0x080050fd
 80050b0:	0800530f 	.word	0x0800530f
 80050b4:	0800530f 	.word	0x0800530f
 80050b8:	0800530f 	.word	0x0800530f
 80050bc:	0800530f 	.word	0x0800530f
 80050c0:	0800530f 	.word	0x0800530f
 80050c4:	0800530f 	.word	0x0800530f
 80050c8:	0800530f 	.word	0x0800530f
 80050cc:	08005103 	.word	0x08005103
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80050d0:	4b94      	ldr	r3, [pc, #592]	; (8005324 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f003 0320 	and.w	r3, r3, #32
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d009      	beq.n	80050f0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80050dc:	4b91      	ldr	r3, [pc, #580]	; (8005324 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	08db      	lsrs	r3, r3, #3
 80050e2:	f003 0303 	and.w	r3, r3, #3
 80050e6:	4a90      	ldr	r2, [pc, #576]	; (8005328 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80050e8:	fa22 f303 	lsr.w	r3, r2, r3
 80050ec:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80050ee:	e111      	b.n	8005314 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80050f0:	4b8d      	ldr	r3, [pc, #564]	; (8005328 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80050f2:	61bb      	str	r3, [r7, #24]
      break;
 80050f4:	e10e      	b.n	8005314 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80050f6:	4b8d      	ldr	r3, [pc, #564]	; (800532c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80050f8:	61bb      	str	r3, [r7, #24]
      break;
 80050fa:	e10b      	b.n	8005314 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80050fc:	4b8c      	ldr	r3, [pc, #560]	; (8005330 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80050fe:	61bb      	str	r3, [r7, #24]
      break;
 8005100:	e108      	b.n	8005314 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005102:	4b88      	ldr	r3, [pc, #544]	; (8005324 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005106:	f003 0303 	and.w	r3, r3, #3
 800510a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800510c:	4b85      	ldr	r3, [pc, #532]	; (8005324 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800510e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005110:	091b      	lsrs	r3, r3, #4
 8005112:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005116:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005118:	4b82      	ldr	r3, [pc, #520]	; (8005324 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800511a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800511c:	f003 0301 	and.w	r3, r3, #1
 8005120:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005122:	4b80      	ldr	r3, [pc, #512]	; (8005324 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005124:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005126:	08db      	lsrs	r3, r3, #3
 8005128:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800512c:	68fa      	ldr	r2, [r7, #12]
 800512e:	fb02 f303 	mul.w	r3, r2, r3
 8005132:	ee07 3a90 	vmov	s15, r3
 8005136:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800513a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	2b00      	cmp	r3, #0
 8005142:	f000 80e1 	beq.w	8005308 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	2b02      	cmp	r3, #2
 800514a:	f000 8083 	beq.w	8005254 <HAL_RCC_GetSysClockFreq+0x204>
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	2b02      	cmp	r3, #2
 8005152:	f200 80a1 	bhi.w	8005298 <HAL_RCC_GetSysClockFreq+0x248>
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d003      	beq.n	8005164 <HAL_RCC_GetSysClockFreq+0x114>
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	2b01      	cmp	r3, #1
 8005160:	d056      	beq.n	8005210 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005162:	e099      	b.n	8005298 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005164:	4b6f      	ldr	r3, [pc, #444]	; (8005324 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f003 0320 	and.w	r3, r3, #32
 800516c:	2b00      	cmp	r3, #0
 800516e:	d02d      	beq.n	80051cc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005170:	4b6c      	ldr	r3, [pc, #432]	; (8005324 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	08db      	lsrs	r3, r3, #3
 8005176:	f003 0303 	and.w	r3, r3, #3
 800517a:	4a6b      	ldr	r2, [pc, #428]	; (8005328 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800517c:	fa22 f303 	lsr.w	r3, r2, r3
 8005180:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	ee07 3a90 	vmov	s15, r3
 8005188:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800518c:	693b      	ldr	r3, [r7, #16]
 800518e:	ee07 3a90 	vmov	s15, r3
 8005192:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005196:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800519a:	4b62      	ldr	r3, [pc, #392]	; (8005324 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800519c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800519e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051a2:	ee07 3a90 	vmov	s15, r3
 80051a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80051ae:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005334 <HAL_RCC_GetSysClockFreq+0x2e4>
 80051b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80051be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051c6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80051ca:	e087      	b.n	80052dc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	ee07 3a90 	vmov	s15, r3
 80051d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051d6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005338 <HAL_RCC_GetSysClockFreq+0x2e8>
 80051da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051de:	4b51      	ldr	r3, [pc, #324]	; (8005324 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051e6:	ee07 3a90 	vmov	s15, r3
 80051ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80051f2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005334 <HAL_RCC_GetSysClockFreq+0x2e4>
 80051f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005202:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005206:	ee67 7a27 	vmul.f32	s15, s14, s15
 800520a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800520e:	e065      	b.n	80052dc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	ee07 3a90 	vmov	s15, r3
 8005216:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800521a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800533c <HAL_RCC_GetSysClockFreq+0x2ec>
 800521e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005222:	4b40      	ldr	r3, [pc, #256]	; (8005324 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005226:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800522a:	ee07 3a90 	vmov	s15, r3
 800522e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005232:	ed97 6a02 	vldr	s12, [r7, #8]
 8005236:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005334 <HAL_RCC_GetSysClockFreq+0x2e4>
 800523a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800523e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005242:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005246:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800524a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800524e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005252:	e043      	b.n	80052dc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	ee07 3a90 	vmov	s15, r3
 800525a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800525e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005340 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005262:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005266:	4b2f      	ldr	r3, [pc, #188]	; (8005324 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800526a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800526e:	ee07 3a90 	vmov	s15, r3
 8005272:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005276:	ed97 6a02 	vldr	s12, [r7, #8]
 800527a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005334 <HAL_RCC_GetSysClockFreq+0x2e4>
 800527e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005282:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005286:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800528a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800528e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005292:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005296:	e021      	b.n	80052dc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	ee07 3a90 	vmov	s15, r3
 800529e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052a2:	eddf 6a26 	vldr	s13, [pc, #152]	; 800533c <HAL_RCC_GetSysClockFreq+0x2ec>
 80052a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052aa:	4b1e      	ldr	r3, [pc, #120]	; (8005324 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052b2:	ee07 3a90 	vmov	s15, r3
 80052b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80052be:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005334 <HAL_RCC_GetSysClockFreq+0x2e4>
 80052c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80052ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052d6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80052da:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80052dc:	4b11      	ldr	r3, [pc, #68]	; (8005324 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052e0:	0a5b      	lsrs	r3, r3, #9
 80052e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80052e6:	3301      	adds	r3, #1
 80052e8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	ee07 3a90 	vmov	s15, r3
 80052f0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80052f4:	edd7 6a07 	vldr	s13, [r7, #28]
 80052f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80052fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005300:	ee17 3a90 	vmov	r3, s15
 8005304:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005306:	e005      	b.n	8005314 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005308:	2300      	movs	r3, #0
 800530a:	61bb      	str	r3, [r7, #24]
      break;
 800530c:	e002      	b.n	8005314 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800530e:	4b07      	ldr	r3, [pc, #28]	; (800532c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005310:	61bb      	str	r3, [r7, #24]
      break;
 8005312:	bf00      	nop
  }

  return sysclockfreq;
 8005314:	69bb      	ldr	r3, [r7, #24]
}
 8005316:	4618      	mov	r0, r3
 8005318:	3724      	adds	r7, #36	; 0x24
 800531a:	46bd      	mov	sp, r7
 800531c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005320:	4770      	bx	lr
 8005322:	bf00      	nop
 8005324:	58024400 	.word	0x58024400
 8005328:	03d09000 	.word	0x03d09000
 800532c:	003d0900 	.word	0x003d0900
 8005330:	017d7840 	.word	0x017d7840
 8005334:	46000000 	.word	0x46000000
 8005338:	4c742400 	.word	0x4c742400
 800533c:	4a742400 	.word	0x4a742400
 8005340:	4bbebc20 	.word	0x4bbebc20

08005344 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b082      	sub	sp, #8
 8005348:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800534a:	f7ff fe81 	bl	8005050 <HAL_RCC_GetSysClockFreq>
 800534e:	4602      	mov	r2, r0
 8005350:	4b10      	ldr	r3, [pc, #64]	; (8005394 <HAL_RCC_GetHCLKFreq+0x50>)
 8005352:	699b      	ldr	r3, [r3, #24]
 8005354:	0a1b      	lsrs	r3, r3, #8
 8005356:	f003 030f 	and.w	r3, r3, #15
 800535a:	490f      	ldr	r1, [pc, #60]	; (8005398 <HAL_RCC_GetHCLKFreq+0x54>)
 800535c:	5ccb      	ldrb	r3, [r1, r3]
 800535e:	f003 031f 	and.w	r3, r3, #31
 8005362:	fa22 f303 	lsr.w	r3, r2, r3
 8005366:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005368:	4b0a      	ldr	r3, [pc, #40]	; (8005394 <HAL_RCC_GetHCLKFreq+0x50>)
 800536a:	699b      	ldr	r3, [r3, #24]
 800536c:	f003 030f 	and.w	r3, r3, #15
 8005370:	4a09      	ldr	r2, [pc, #36]	; (8005398 <HAL_RCC_GetHCLKFreq+0x54>)
 8005372:	5cd3      	ldrb	r3, [r2, r3]
 8005374:	f003 031f 	and.w	r3, r3, #31
 8005378:	687a      	ldr	r2, [r7, #4]
 800537a:	fa22 f303 	lsr.w	r3, r2, r3
 800537e:	4a07      	ldr	r2, [pc, #28]	; (800539c <HAL_RCC_GetHCLKFreq+0x58>)
 8005380:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005382:	4a07      	ldr	r2, [pc, #28]	; (80053a0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005388:	4b04      	ldr	r3, [pc, #16]	; (800539c <HAL_RCC_GetHCLKFreq+0x58>)
 800538a:	681b      	ldr	r3, [r3, #0]
}
 800538c:	4618      	mov	r0, r3
 800538e:	3708      	adds	r7, #8
 8005390:	46bd      	mov	sp, r7
 8005392:	bd80      	pop	{r7, pc}
 8005394:	58024400 	.word	0x58024400
 8005398:	0800d7d8 	.word	0x0800d7d8
 800539c:	240002fc 	.word	0x240002fc
 80053a0:	240002f8 	.word	0x240002f8

080053a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80053a8:	f7ff ffcc 	bl	8005344 <HAL_RCC_GetHCLKFreq>
 80053ac:	4602      	mov	r2, r0
 80053ae:	4b06      	ldr	r3, [pc, #24]	; (80053c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80053b0:	69db      	ldr	r3, [r3, #28]
 80053b2:	091b      	lsrs	r3, r3, #4
 80053b4:	f003 0307 	and.w	r3, r3, #7
 80053b8:	4904      	ldr	r1, [pc, #16]	; (80053cc <HAL_RCC_GetPCLK1Freq+0x28>)
 80053ba:	5ccb      	ldrb	r3, [r1, r3]
 80053bc:	f003 031f 	and.w	r3, r3, #31
 80053c0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	bd80      	pop	{r7, pc}
 80053c8:	58024400 	.word	0x58024400
 80053cc:	0800d7d8 	.word	0x0800d7d8

080053d0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80053d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80053d4:	b0ca      	sub	sp, #296	; 0x128
 80053d6:	af00      	add	r7, sp, #0
 80053d8:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80053dc:	2300      	movs	r3, #0
 80053de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80053e2:	2300      	movs	r3, #0
 80053e4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80053e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053f0:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80053f4:	2500      	movs	r5, #0
 80053f6:	ea54 0305 	orrs.w	r3, r4, r5
 80053fa:	d049      	beq.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80053fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005400:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005402:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005406:	d02f      	beq.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005408:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800540c:	d828      	bhi.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800540e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005412:	d01a      	beq.n	800544a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005414:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005418:	d822      	bhi.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800541a:	2b00      	cmp	r3, #0
 800541c:	d003      	beq.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800541e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005422:	d007      	beq.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005424:	e01c      	b.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005426:	4bb8      	ldr	r3, [pc, #736]	; (8005708 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800542a:	4ab7      	ldr	r2, [pc, #732]	; (8005708 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800542c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005430:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005432:	e01a      	b.n	800546a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005434:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005438:	3308      	adds	r3, #8
 800543a:	2102      	movs	r1, #2
 800543c:	4618      	mov	r0, r3
 800543e:	f002 fb61 	bl	8007b04 <RCCEx_PLL2_Config>
 8005442:	4603      	mov	r3, r0
 8005444:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005448:	e00f      	b.n	800546a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800544a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800544e:	3328      	adds	r3, #40	; 0x28
 8005450:	2102      	movs	r1, #2
 8005452:	4618      	mov	r0, r3
 8005454:	f002 fc08 	bl	8007c68 <RCCEx_PLL3_Config>
 8005458:	4603      	mov	r3, r0
 800545a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800545e:	e004      	b.n	800546a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005460:	2301      	movs	r3, #1
 8005462:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005466:	e000      	b.n	800546a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005468:	bf00      	nop
    }

    if (ret == HAL_OK)
 800546a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800546e:	2b00      	cmp	r3, #0
 8005470:	d10a      	bne.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005472:	4ba5      	ldr	r3, [pc, #660]	; (8005708 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005474:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005476:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800547a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800547e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005480:	4aa1      	ldr	r2, [pc, #644]	; (8005708 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005482:	430b      	orrs	r3, r1
 8005484:	6513      	str	r3, [r2, #80]	; 0x50
 8005486:	e003      	b.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005488:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800548c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005490:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005498:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800549c:	f04f 0900 	mov.w	r9, #0
 80054a0:	ea58 0309 	orrs.w	r3, r8, r9
 80054a4:	d047      	beq.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80054a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054ac:	2b04      	cmp	r3, #4
 80054ae:	d82a      	bhi.n	8005506 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80054b0:	a201      	add	r2, pc, #4	; (adr r2, 80054b8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80054b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054b6:	bf00      	nop
 80054b8:	080054cd 	.word	0x080054cd
 80054bc:	080054db 	.word	0x080054db
 80054c0:	080054f1 	.word	0x080054f1
 80054c4:	0800550f 	.word	0x0800550f
 80054c8:	0800550f 	.word	0x0800550f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054cc:	4b8e      	ldr	r3, [pc, #568]	; (8005708 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80054ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054d0:	4a8d      	ldr	r2, [pc, #564]	; (8005708 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80054d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80054d6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80054d8:	e01a      	b.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80054da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054de:	3308      	adds	r3, #8
 80054e0:	2100      	movs	r1, #0
 80054e2:	4618      	mov	r0, r3
 80054e4:	f002 fb0e 	bl	8007b04 <RCCEx_PLL2_Config>
 80054e8:	4603      	mov	r3, r0
 80054ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80054ee:	e00f      	b.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80054f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054f4:	3328      	adds	r3, #40	; 0x28
 80054f6:	2100      	movs	r1, #0
 80054f8:	4618      	mov	r0, r3
 80054fa:	f002 fbb5 	bl	8007c68 <RCCEx_PLL3_Config>
 80054fe:	4603      	mov	r3, r0
 8005500:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005504:	e004      	b.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005506:	2301      	movs	r3, #1
 8005508:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800550c:	e000      	b.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800550e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005510:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005514:	2b00      	cmp	r3, #0
 8005516:	d10a      	bne.n	800552e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005518:	4b7b      	ldr	r3, [pc, #492]	; (8005708 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800551a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800551c:	f023 0107 	bic.w	r1, r3, #7
 8005520:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005524:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005526:	4a78      	ldr	r2, [pc, #480]	; (8005708 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005528:	430b      	orrs	r3, r1
 800552a:	6513      	str	r3, [r2, #80]	; 0x50
 800552c:	e003      	b.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800552e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005532:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005536:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800553a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800553e:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8005542:	f04f 0b00 	mov.w	fp, #0
 8005546:	ea5a 030b 	orrs.w	r3, sl, fp
 800554a:	d04c      	beq.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800554c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005550:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005552:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005556:	d030      	beq.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8005558:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800555c:	d829      	bhi.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800555e:	2bc0      	cmp	r3, #192	; 0xc0
 8005560:	d02d      	beq.n	80055be <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005562:	2bc0      	cmp	r3, #192	; 0xc0
 8005564:	d825      	bhi.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005566:	2b80      	cmp	r3, #128	; 0x80
 8005568:	d018      	beq.n	800559c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800556a:	2b80      	cmp	r3, #128	; 0x80
 800556c:	d821      	bhi.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800556e:	2b00      	cmp	r3, #0
 8005570:	d002      	beq.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8005572:	2b40      	cmp	r3, #64	; 0x40
 8005574:	d007      	beq.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8005576:	e01c      	b.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005578:	4b63      	ldr	r3, [pc, #396]	; (8005708 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800557a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800557c:	4a62      	ldr	r2, [pc, #392]	; (8005708 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800557e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005582:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005584:	e01c      	b.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005586:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800558a:	3308      	adds	r3, #8
 800558c:	2100      	movs	r1, #0
 800558e:	4618      	mov	r0, r3
 8005590:	f002 fab8 	bl	8007b04 <RCCEx_PLL2_Config>
 8005594:	4603      	mov	r3, r0
 8005596:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800559a:	e011      	b.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800559c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055a0:	3328      	adds	r3, #40	; 0x28
 80055a2:	2100      	movs	r1, #0
 80055a4:	4618      	mov	r0, r3
 80055a6:	f002 fb5f 	bl	8007c68 <RCCEx_PLL3_Config>
 80055aa:	4603      	mov	r3, r0
 80055ac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80055b0:	e006      	b.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80055b2:	2301      	movs	r3, #1
 80055b4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80055b8:	e002      	b.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80055ba:	bf00      	nop
 80055bc:	e000      	b.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80055be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055c0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d10a      	bne.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80055c8:	4b4f      	ldr	r3, [pc, #316]	; (8005708 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80055ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055cc:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80055d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055d6:	4a4c      	ldr	r2, [pc, #304]	; (8005708 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80055d8:	430b      	orrs	r3, r1
 80055da:	6513      	str	r3, [r2, #80]	; 0x50
 80055dc:	e003      	b.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80055e2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80055e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055ee:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80055f2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80055f6:	2300      	movs	r3, #0
 80055f8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80055fc:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8005600:	460b      	mov	r3, r1
 8005602:	4313      	orrs	r3, r2
 8005604:	d053      	beq.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005606:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800560a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800560e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005612:	d035      	beq.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005614:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005618:	d82e      	bhi.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800561a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800561e:	d031      	beq.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005620:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005624:	d828      	bhi.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005626:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800562a:	d01a      	beq.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800562c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005630:	d822      	bhi.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005632:	2b00      	cmp	r3, #0
 8005634:	d003      	beq.n	800563e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8005636:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800563a:	d007      	beq.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800563c:	e01c      	b.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800563e:	4b32      	ldr	r3, [pc, #200]	; (8005708 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005642:	4a31      	ldr	r2, [pc, #196]	; (8005708 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005644:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005648:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800564a:	e01c      	b.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800564c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005650:	3308      	adds	r3, #8
 8005652:	2100      	movs	r1, #0
 8005654:	4618      	mov	r0, r3
 8005656:	f002 fa55 	bl	8007b04 <RCCEx_PLL2_Config>
 800565a:	4603      	mov	r3, r0
 800565c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005660:	e011      	b.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005662:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005666:	3328      	adds	r3, #40	; 0x28
 8005668:	2100      	movs	r1, #0
 800566a:	4618      	mov	r0, r3
 800566c:	f002 fafc 	bl	8007c68 <RCCEx_PLL3_Config>
 8005670:	4603      	mov	r3, r0
 8005672:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005676:	e006      	b.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005678:	2301      	movs	r3, #1
 800567a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800567e:	e002      	b.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005680:	bf00      	nop
 8005682:	e000      	b.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005684:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005686:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800568a:	2b00      	cmp	r3, #0
 800568c:	d10b      	bne.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800568e:	4b1e      	ldr	r3, [pc, #120]	; (8005708 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005690:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005692:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8005696:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800569a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800569e:	4a1a      	ldr	r2, [pc, #104]	; (8005708 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80056a0:	430b      	orrs	r3, r1
 80056a2:	6593      	str	r3, [r2, #88]	; 0x58
 80056a4:	e003      	b.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80056aa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80056ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056b6:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80056ba:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80056be:	2300      	movs	r3, #0
 80056c0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80056c4:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80056c8:	460b      	mov	r3, r1
 80056ca:	4313      	orrs	r3, r2
 80056cc:	d056      	beq.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80056ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056d2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80056d6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80056da:	d038      	beq.n	800574e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80056dc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80056e0:	d831      	bhi.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80056e2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80056e6:	d034      	beq.n	8005752 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80056e8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80056ec:	d82b      	bhi.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80056ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80056f2:	d01d      	beq.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80056f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80056f8:	d825      	bhi.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d006      	beq.n	800570c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80056fe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005702:	d00a      	beq.n	800571a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005704:	e01f      	b.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005706:	bf00      	nop
 8005708:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800570c:	4ba2      	ldr	r3, [pc, #648]	; (8005998 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800570e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005710:	4aa1      	ldr	r2, [pc, #644]	; (8005998 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005712:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005716:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005718:	e01c      	b.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800571a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800571e:	3308      	adds	r3, #8
 8005720:	2100      	movs	r1, #0
 8005722:	4618      	mov	r0, r3
 8005724:	f002 f9ee 	bl	8007b04 <RCCEx_PLL2_Config>
 8005728:	4603      	mov	r3, r0
 800572a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800572e:	e011      	b.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005730:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005734:	3328      	adds	r3, #40	; 0x28
 8005736:	2100      	movs	r1, #0
 8005738:	4618      	mov	r0, r3
 800573a:	f002 fa95 	bl	8007c68 <RCCEx_PLL3_Config>
 800573e:	4603      	mov	r3, r0
 8005740:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005744:	e006      	b.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005746:	2301      	movs	r3, #1
 8005748:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800574c:	e002      	b.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800574e:	bf00      	nop
 8005750:	e000      	b.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005752:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005754:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005758:	2b00      	cmp	r3, #0
 800575a:	d10b      	bne.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800575c:	4b8e      	ldr	r3, [pc, #568]	; (8005998 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800575e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005760:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8005764:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005768:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800576c:	4a8a      	ldr	r2, [pc, #552]	; (8005998 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800576e:	430b      	orrs	r3, r1
 8005770:	6593      	str	r3, [r2, #88]	; 0x58
 8005772:	e003      	b.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005774:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005778:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800577c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005784:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8005788:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800578c:	2300      	movs	r3, #0
 800578e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005792:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8005796:	460b      	mov	r3, r1
 8005798:	4313      	orrs	r3, r2
 800579a:	d03a      	beq.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800579c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057a2:	2b30      	cmp	r3, #48	; 0x30
 80057a4:	d01f      	beq.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80057a6:	2b30      	cmp	r3, #48	; 0x30
 80057a8:	d819      	bhi.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80057aa:	2b20      	cmp	r3, #32
 80057ac:	d00c      	beq.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80057ae:	2b20      	cmp	r3, #32
 80057b0:	d815      	bhi.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d019      	beq.n	80057ea <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80057b6:	2b10      	cmp	r3, #16
 80057b8:	d111      	bne.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057ba:	4b77      	ldr	r3, [pc, #476]	; (8005998 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80057bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057be:	4a76      	ldr	r2, [pc, #472]	; (8005998 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80057c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057c4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80057c6:	e011      	b.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80057c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057cc:	3308      	adds	r3, #8
 80057ce:	2102      	movs	r1, #2
 80057d0:	4618      	mov	r0, r3
 80057d2:	f002 f997 	bl	8007b04 <RCCEx_PLL2_Config>
 80057d6:	4603      	mov	r3, r0
 80057d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80057dc:	e006      	b.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80057de:	2301      	movs	r3, #1
 80057e0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80057e4:	e002      	b.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80057e6:	bf00      	nop
 80057e8:	e000      	b.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80057ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057ec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d10a      	bne.n	800580a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80057f4:	4b68      	ldr	r3, [pc, #416]	; (8005998 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80057f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057f8:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80057fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005802:	4a65      	ldr	r2, [pc, #404]	; (8005998 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005804:	430b      	orrs	r3, r1
 8005806:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005808:	e003      	b.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800580a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800580e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005812:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800581a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800581e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005822:	2300      	movs	r3, #0
 8005824:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005828:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800582c:	460b      	mov	r3, r1
 800582e:	4313      	orrs	r3, r2
 8005830:	d051      	beq.n	80058d6 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005832:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005836:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005838:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800583c:	d035      	beq.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800583e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005842:	d82e      	bhi.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005844:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005848:	d031      	beq.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800584a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800584e:	d828      	bhi.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005850:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005854:	d01a      	beq.n	800588c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8005856:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800585a:	d822      	bhi.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800585c:	2b00      	cmp	r3, #0
 800585e:	d003      	beq.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8005860:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005864:	d007      	beq.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8005866:	e01c      	b.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005868:	4b4b      	ldr	r3, [pc, #300]	; (8005998 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800586a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800586c:	4a4a      	ldr	r2, [pc, #296]	; (8005998 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800586e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005872:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005874:	e01c      	b.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005876:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800587a:	3308      	adds	r3, #8
 800587c:	2100      	movs	r1, #0
 800587e:	4618      	mov	r0, r3
 8005880:	f002 f940 	bl	8007b04 <RCCEx_PLL2_Config>
 8005884:	4603      	mov	r3, r0
 8005886:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800588a:	e011      	b.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800588c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005890:	3328      	adds	r3, #40	; 0x28
 8005892:	2100      	movs	r1, #0
 8005894:	4618      	mov	r0, r3
 8005896:	f002 f9e7 	bl	8007c68 <RCCEx_PLL3_Config>
 800589a:	4603      	mov	r3, r0
 800589c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80058a0:	e006      	b.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80058a2:	2301      	movs	r3, #1
 80058a4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80058a8:	e002      	b.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80058aa:	bf00      	nop
 80058ac:	e000      	b.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80058ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058b0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d10a      	bne.n	80058ce <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80058b8:	4b37      	ldr	r3, [pc, #220]	; (8005998 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80058ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058bc:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80058c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058c6:	4a34      	ldr	r2, [pc, #208]	; (8005998 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80058c8:	430b      	orrs	r3, r1
 80058ca:	6513      	str	r3, [r2, #80]	; 0x50
 80058cc:	e003      	b.n	80058d6 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80058d2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80058d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058de:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80058e2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80058e6:	2300      	movs	r3, #0
 80058e8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80058ec:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80058f0:	460b      	mov	r3, r1
 80058f2:	4313      	orrs	r3, r2
 80058f4:	d056      	beq.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80058f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80058fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005900:	d033      	beq.n	800596a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005902:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005906:	d82c      	bhi.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005908:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800590c:	d02f      	beq.n	800596e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800590e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005912:	d826      	bhi.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005914:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005918:	d02b      	beq.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800591a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800591e:	d820      	bhi.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005920:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005924:	d012      	beq.n	800594c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8005926:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800592a:	d81a      	bhi.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800592c:	2b00      	cmp	r3, #0
 800592e:	d022      	beq.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005930:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005934:	d115      	bne.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005936:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800593a:	3308      	adds	r3, #8
 800593c:	2101      	movs	r1, #1
 800593e:	4618      	mov	r0, r3
 8005940:	f002 f8e0 	bl	8007b04 <RCCEx_PLL2_Config>
 8005944:	4603      	mov	r3, r0
 8005946:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800594a:	e015      	b.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800594c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005950:	3328      	adds	r3, #40	; 0x28
 8005952:	2101      	movs	r1, #1
 8005954:	4618      	mov	r0, r3
 8005956:	f002 f987 	bl	8007c68 <RCCEx_PLL3_Config>
 800595a:	4603      	mov	r3, r0
 800595c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005960:	e00a      	b.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005962:	2301      	movs	r3, #1
 8005964:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005968:	e006      	b.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800596a:	bf00      	nop
 800596c:	e004      	b.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800596e:	bf00      	nop
 8005970:	e002      	b.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005972:	bf00      	nop
 8005974:	e000      	b.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005976:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005978:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800597c:	2b00      	cmp	r3, #0
 800597e:	d10d      	bne.n	800599c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005980:	4b05      	ldr	r3, [pc, #20]	; (8005998 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005982:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005984:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8005988:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800598c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800598e:	4a02      	ldr	r2, [pc, #8]	; (8005998 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005990:	430b      	orrs	r3, r1
 8005992:	6513      	str	r3, [r2, #80]	; 0x50
 8005994:	e006      	b.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005996:	bf00      	nop
 8005998:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800599c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80059a0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80059a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059ac:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80059b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80059b4:	2300      	movs	r3, #0
 80059b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80059ba:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80059be:	460b      	mov	r3, r1
 80059c0:	4313      	orrs	r3, r2
 80059c2:	d055      	beq.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80059c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059c8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80059cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80059d0:	d033      	beq.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80059d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80059d6:	d82c      	bhi.n	8005a32 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80059d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059dc:	d02f      	beq.n	8005a3e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80059de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059e2:	d826      	bhi.n	8005a32 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80059e4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80059e8:	d02b      	beq.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0x672>
 80059ea:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80059ee:	d820      	bhi.n	8005a32 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80059f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80059f4:	d012      	beq.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80059f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80059fa:	d81a      	bhi.n	8005a32 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d022      	beq.n	8005a46 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005a00:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005a04:	d115      	bne.n	8005a32 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005a06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a0a:	3308      	adds	r3, #8
 8005a0c:	2101      	movs	r1, #1
 8005a0e:	4618      	mov	r0, r3
 8005a10:	f002 f878 	bl	8007b04 <RCCEx_PLL2_Config>
 8005a14:	4603      	mov	r3, r0
 8005a16:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005a1a:	e015      	b.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005a1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a20:	3328      	adds	r3, #40	; 0x28
 8005a22:	2101      	movs	r1, #1
 8005a24:	4618      	mov	r0, r3
 8005a26:	f002 f91f 	bl	8007c68 <RCCEx_PLL3_Config>
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005a30:	e00a      	b.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005a32:	2301      	movs	r3, #1
 8005a34:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005a38:	e006      	b.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005a3a:	bf00      	nop
 8005a3c:	e004      	b.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005a3e:	bf00      	nop
 8005a40:	e002      	b.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005a42:	bf00      	nop
 8005a44:	e000      	b.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005a46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a48:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d10b      	bne.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005a50:	4ba3      	ldr	r3, [pc, #652]	; (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a54:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8005a58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a5c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005a60:	4a9f      	ldr	r2, [pc, #636]	; (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a62:	430b      	orrs	r3, r1
 8005a64:	6593      	str	r3, [r2, #88]	; 0x58
 8005a66:	e003      	b.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a68:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005a6c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005a70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a78:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8005a7c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005a80:	2300      	movs	r3, #0
 8005a82:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005a86:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005a8a:	460b      	mov	r3, r1
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	d037      	beq.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005a90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a9a:	d00e      	beq.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8005a9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005aa0:	d816      	bhi.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d018      	beq.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8005aa6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005aaa:	d111      	bne.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005aac:	4b8c      	ldr	r3, [pc, #560]	; (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ab0:	4a8b      	ldr	r2, [pc, #556]	; (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ab2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ab6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005ab8:	e00f      	b.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005aba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005abe:	3308      	adds	r3, #8
 8005ac0:	2101      	movs	r1, #1
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	f002 f81e 	bl	8007b04 <RCCEx_PLL2_Config>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005ace:	e004      	b.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005ad6:	e000      	b.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8005ad8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ada:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d10a      	bne.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005ae2:	4b7f      	ldr	r3, [pc, #508]	; (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ae4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ae6:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8005aea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005aee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005af0:	4a7b      	ldr	r2, [pc, #492]	; (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005af2:	430b      	orrs	r3, r1
 8005af4:	6513      	str	r3, [r2, #80]	; 0x50
 8005af6:	e003      	b.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005af8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005afc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005b00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b08:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8005b0c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005b10:	2300      	movs	r3, #0
 8005b12:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005b16:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8005b1a:	460b      	mov	r3, r1
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	d039      	beq.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005b20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b26:	2b03      	cmp	r3, #3
 8005b28:	d81c      	bhi.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8005b2a:	a201      	add	r2, pc, #4	; (adr r2, 8005b30 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8005b2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b30:	08005b6d 	.word	0x08005b6d
 8005b34:	08005b41 	.word	0x08005b41
 8005b38:	08005b4f 	.word	0x08005b4f
 8005b3c:	08005b6d 	.word	0x08005b6d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b40:	4b67      	ldr	r3, [pc, #412]	; (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b44:	4a66      	ldr	r2, [pc, #408]	; (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b4a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005b4c:	e00f      	b.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005b4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b52:	3308      	adds	r3, #8
 8005b54:	2102      	movs	r1, #2
 8005b56:	4618      	mov	r0, r3
 8005b58:	f001 ffd4 	bl	8007b04 <RCCEx_PLL2_Config>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005b62:	e004      	b.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005b64:	2301      	movs	r3, #1
 8005b66:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005b6a:	e000      	b.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8005b6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b6e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d10a      	bne.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005b76:	4b5a      	ldr	r3, [pc, #360]	; (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b7a:	f023 0103 	bic.w	r1, r3, #3
 8005b7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b84:	4a56      	ldr	r2, [pc, #344]	; (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b86:	430b      	orrs	r3, r1
 8005b88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005b8a:	e003      	b.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b8c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005b90:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005b94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b9c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8005ba0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005baa:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8005bae:	460b      	mov	r3, r1
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	f000 809f 	beq.w	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005bb6:	4b4b      	ldr	r3, [pc, #300]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4a4a      	ldr	r2, [pc, #296]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005bbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bc0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005bc2:	f7fb fe7d 	bl	80018c0 <HAL_GetTick>
 8005bc6:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005bca:	e00b      	b.n	8005be4 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005bcc:	f7fb fe78 	bl	80018c0 <HAL_GetTick>
 8005bd0:	4602      	mov	r2, r0
 8005bd2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005bd6:	1ad3      	subs	r3, r2, r3
 8005bd8:	2b64      	cmp	r3, #100	; 0x64
 8005bda:	d903      	bls.n	8005be4 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8005bdc:	2303      	movs	r3, #3
 8005bde:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005be2:	e005      	b.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005be4:	4b3f      	ldr	r3, [pc, #252]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d0ed      	beq.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8005bf0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d179      	bne.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005bf8:	4b39      	ldr	r3, [pc, #228]	; (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005bfa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005bfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c00:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005c04:	4053      	eors	r3, r2
 8005c06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d015      	beq.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005c0e:	4b34      	ldr	r3, [pc, #208]	; (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c16:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005c1a:	4b31      	ldr	r3, [pc, #196]	; (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c1e:	4a30      	ldr	r2, [pc, #192]	; (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c24:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005c26:	4b2e      	ldr	r3, [pc, #184]	; (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c2a:	4a2d      	ldr	r2, [pc, #180]	; (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c30:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005c32:	4a2b      	ldr	r2, [pc, #172]	; (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c34:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005c38:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005c3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c3e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005c42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c46:	d118      	bne.n	8005c7a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c48:	f7fb fe3a 	bl	80018c0 <HAL_GetTick>
 8005c4c:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005c50:	e00d      	b.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c52:	f7fb fe35 	bl	80018c0 <HAL_GetTick>
 8005c56:	4602      	mov	r2, r0
 8005c58:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005c5c:	1ad2      	subs	r2, r2, r3
 8005c5e:	f241 3388 	movw	r3, #5000	; 0x1388
 8005c62:	429a      	cmp	r2, r3
 8005c64:	d903      	bls.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8005c66:	2303      	movs	r3, #3
 8005c68:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8005c6c:	e005      	b.n	8005c7a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005c6e:	4b1c      	ldr	r3, [pc, #112]	; (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c72:	f003 0302 	and.w	r3, r3, #2
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d0eb      	beq.n	8005c52 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8005c7a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d129      	bne.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005c82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c86:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005c8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c8e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c92:	d10e      	bne.n	8005cb2 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8005c94:	4b12      	ldr	r3, [pc, #72]	; (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c96:	691b      	ldr	r3, [r3, #16]
 8005c98:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8005c9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ca0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005ca4:	091a      	lsrs	r2, r3, #4
 8005ca6:	4b10      	ldr	r3, [pc, #64]	; (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8005ca8:	4013      	ands	r3, r2
 8005caa:	4a0d      	ldr	r2, [pc, #52]	; (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005cac:	430b      	orrs	r3, r1
 8005cae:	6113      	str	r3, [r2, #16]
 8005cb0:	e005      	b.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8005cb2:	4b0b      	ldr	r3, [pc, #44]	; (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005cb4:	691b      	ldr	r3, [r3, #16]
 8005cb6:	4a0a      	ldr	r2, [pc, #40]	; (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005cb8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005cbc:	6113      	str	r3, [r2, #16]
 8005cbe:	4b08      	ldr	r3, [pc, #32]	; (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005cc0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8005cc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005cc6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005cca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005cce:	4a04      	ldr	r2, [pc, #16]	; (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005cd0:	430b      	orrs	r3, r1
 8005cd2:	6713      	str	r3, [r2, #112]	; 0x70
 8005cd4:	e00e      	b.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005cd6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005cda:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8005cde:	e009      	b.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8005ce0:	58024400 	.word	0x58024400
 8005ce4:	58024800 	.word	0x58024800
 8005ce8:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005cf0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005cf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cfc:	f002 0301 	and.w	r3, r2, #1
 8005d00:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005d04:	2300      	movs	r3, #0
 8005d06:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005d0a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005d0e:	460b      	mov	r3, r1
 8005d10:	4313      	orrs	r3, r2
 8005d12:	f000 8089 	beq.w	8005e28 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005d16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d1a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d1c:	2b28      	cmp	r3, #40	; 0x28
 8005d1e:	d86b      	bhi.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8005d20:	a201      	add	r2, pc, #4	; (adr r2, 8005d28 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005d22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d26:	bf00      	nop
 8005d28:	08005e01 	.word	0x08005e01
 8005d2c:	08005df9 	.word	0x08005df9
 8005d30:	08005df9 	.word	0x08005df9
 8005d34:	08005df9 	.word	0x08005df9
 8005d38:	08005df9 	.word	0x08005df9
 8005d3c:	08005df9 	.word	0x08005df9
 8005d40:	08005df9 	.word	0x08005df9
 8005d44:	08005df9 	.word	0x08005df9
 8005d48:	08005dcd 	.word	0x08005dcd
 8005d4c:	08005df9 	.word	0x08005df9
 8005d50:	08005df9 	.word	0x08005df9
 8005d54:	08005df9 	.word	0x08005df9
 8005d58:	08005df9 	.word	0x08005df9
 8005d5c:	08005df9 	.word	0x08005df9
 8005d60:	08005df9 	.word	0x08005df9
 8005d64:	08005df9 	.word	0x08005df9
 8005d68:	08005de3 	.word	0x08005de3
 8005d6c:	08005df9 	.word	0x08005df9
 8005d70:	08005df9 	.word	0x08005df9
 8005d74:	08005df9 	.word	0x08005df9
 8005d78:	08005df9 	.word	0x08005df9
 8005d7c:	08005df9 	.word	0x08005df9
 8005d80:	08005df9 	.word	0x08005df9
 8005d84:	08005df9 	.word	0x08005df9
 8005d88:	08005e01 	.word	0x08005e01
 8005d8c:	08005df9 	.word	0x08005df9
 8005d90:	08005df9 	.word	0x08005df9
 8005d94:	08005df9 	.word	0x08005df9
 8005d98:	08005df9 	.word	0x08005df9
 8005d9c:	08005df9 	.word	0x08005df9
 8005da0:	08005df9 	.word	0x08005df9
 8005da4:	08005df9 	.word	0x08005df9
 8005da8:	08005e01 	.word	0x08005e01
 8005dac:	08005df9 	.word	0x08005df9
 8005db0:	08005df9 	.word	0x08005df9
 8005db4:	08005df9 	.word	0x08005df9
 8005db8:	08005df9 	.word	0x08005df9
 8005dbc:	08005df9 	.word	0x08005df9
 8005dc0:	08005df9 	.word	0x08005df9
 8005dc4:	08005df9 	.word	0x08005df9
 8005dc8:	08005e01 	.word	0x08005e01
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005dcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005dd0:	3308      	adds	r3, #8
 8005dd2:	2101      	movs	r1, #1
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	f001 fe95 	bl	8007b04 <RCCEx_PLL2_Config>
 8005dda:	4603      	mov	r3, r0
 8005ddc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005de0:	e00f      	b.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005de2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005de6:	3328      	adds	r3, #40	; 0x28
 8005de8:	2101      	movs	r1, #1
 8005dea:	4618      	mov	r0, r3
 8005dec:	f001 ff3c 	bl	8007c68 <RCCEx_PLL3_Config>
 8005df0:	4603      	mov	r3, r0
 8005df2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005df6:	e004      	b.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005df8:	2301      	movs	r3, #1
 8005dfa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005dfe:	e000      	b.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8005e00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e02:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d10a      	bne.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005e0a:	4bbf      	ldr	r3, [pc, #764]	; (8006108 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005e0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e0e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8005e12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e16:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e18:	4abb      	ldr	r2, [pc, #748]	; (8006108 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005e1a:	430b      	orrs	r3, r1
 8005e1c:	6553      	str	r3, [r2, #84]	; 0x54
 8005e1e:	e003      	b.n	8005e28 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e20:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005e24:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005e28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e30:	f002 0302 	and.w	r3, r2, #2
 8005e34:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005e38:	2300      	movs	r3, #0
 8005e3a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005e3e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8005e42:	460b      	mov	r3, r1
 8005e44:	4313      	orrs	r3, r2
 8005e46:	d041      	beq.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005e48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e4e:	2b05      	cmp	r3, #5
 8005e50:	d824      	bhi.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8005e52:	a201      	add	r2, pc, #4	; (adr r2, 8005e58 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8005e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e58:	08005ea5 	.word	0x08005ea5
 8005e5c:	08005e71 	.word	0x08005e71
 8005e60:	08005e87 	.word	0x08005e87
 8005e64:	08005ea5 	.word	0x08005ea5
 8005e68:	08005ea5 	.word	0x08005ea5
 8005e6c:	08005ea5 	.word	0x08005ea5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005e70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e74:	3308      	adds	r3, #8
 8005e76:	2101      	movs	r1, #1
 8005e78:	4618      	mov	r0, r3
 8005e7a:	f001 fe43 	bl	8007b04 <RCCEx_PLL2_Config>
 8005e7e:	4603      	mov	r3, r0
 8005e80:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005e84:	e00f      	b.n	8005ea6 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005e86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e8a:	3328      	adds	r3, #40	; 0x28
 8005e8c:	2101      	movs	r1, #1
 8005e8e:	4618      	mov	r0, r3
 8005e90:	f001 feea 	bl	8007c68 <RCCEx_PLL3_Config>
 8005e94:	4603      	mov	r3, r0
 8005e96:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005e9a:	e004      	b.n	8005ea6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005ea2:	e000      	b.n	8005ea6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8005ea4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ea6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d10a      	bne.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005eae:	4b96      	ldr	r3, [pc, #600]	; (8006108 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005eb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005eb2:	f023 0107 	bic.w	r1, r3, #7
 8005eb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005eba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ebc:	4a92      	ldr	r2, [pc, #584]	; (8006108 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005ebe:	430b      	orrs	r3, r1
 8005ec0:	6553      	str	r3, [r2, #84]	; 0x54
 8005ec2:	e003      	b.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ec4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005ec8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005ecc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ed4:	f002 0304 	and.w	r3, r2, #4
 8005ed8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005edc:	2300      	movs	r3, #0
 8005ede:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005ee2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8005ee6:	460b      	mov	r3, r1
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	d044      	beq.n	8005f76 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005eec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ef0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ef4:	2b05      	cmp	r3, #5
 8005ef6:	d825      	bhi.n	8005f44 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8005ef8:	a201      	add	r2, pc, #4	; (adr r2, 8005f00 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8005efa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005efe:	bf00      	nop
 8005f00:	08005f4d 	.word	0x08005f4d
 8005f04:	08005f19 	.word	0x08005f19
 8005f08:	08005f2f 	.word	0x08005f2f
 8005f0c:	08005f4d 	.word	0x08005f4d
 8005f10:	08005f4d 	.word	0x08005f4d
 8005f14:	08005f4d 	.word	0x08005f4d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005f18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f1c:	3308      	adds	r3, #8
 8005f1e:	2101      	movs	r1, #1
 8005f20:	4618      	mov	r0, r3
 8005f22:	f001 fdef 	bl	8007b04 <RCCEx_PLL2_Config>
 8005f26:	4603      	mov	r3, r0
 8005f28:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005f2c:	e00f      	b.n	8005f4e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005f2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f32:	3328      	adds	r3, #40	; 0x28
 8005f34:	2101      	movs	r1, #1
 8005f36:	4618      	mov	r0, r3
 8005f38:	f001 fe96 	bl	8007c68 <RCCEx_PLL3_Config>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005f42:	e004      	b.n	8005f4e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f44:	2301      	movs	r3, #1
 8005f46:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005f4a:	e000      	b.n	8005f4e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8005f4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f4e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d10b      	bne.n	8005f6e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005f56:	4b6c      	ldr	r3, [pc, #432]	; (8006108 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005f58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f5a:	f023 0107 	bic.w	r1, r3, #7
 8005f5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f66:	4a68      	ldr	r2, [pc, #416]	; (8006108 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005f68:	430b      	orrs	r3, r1
 8005f6a:	6593      	str	r3, [r2, #88]	; 0x58
 8005f6c:	e003      	b.n	8005f76 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f6e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005f72:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005f76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f7e:	f002 0320 	and.w	r3, r2, #32
 8005f82:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005f86:	2300      	movs	r3, #0
 8005f88:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005f8c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005f90:	460b      	mov	r3, r1
 8005f92:	4313      	orrs	r3, r2
 8005f94:	d055      	beq.n	8006042 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005f96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f9e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005fa2:	d033      	beq.n	800600c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8005fa4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005fa8:	d82c      	bhi.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005faa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fae:	d02f      	beq.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8005fb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fb4:	d826      	bhi.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005fb6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005fba:	d02b      	beq.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8005fbc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005fc0:	d820      	bhi.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005fc2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005fc6:	d012      	beq.n	8005fee <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8005fc8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005fcc:	d81a      	bhi.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d022      	beq.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8005fd2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005fd6:	d115      	bne.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005fd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005fdc:	3308      	adds	r3, #8
 8005fde:	2100      	movs	r1, #0
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	f001 fd8f 	bl	8007b04 <RCCEx_PLL2_Config>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005fec:	e015      	b.n	800601a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005fee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ff2:	3328      	adds	r3, #40	; 0x28
 8005ff4:	2102      	movs	r1, #2
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	f001 fe36 	bl	8007c68 <RCCEx_PLL3_Config>
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006002:	e00a      	b.n	800601a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006004:	2301      	movs	r3, #1
 8006006:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800600a:	e006      	b.n	800601a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800600c:	bf00      	nop
 800600e:	e004      	b.n	800601a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006010:	bf00      	nop
 8006012:	e002      	b.n	800601a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006014:	bf00      	nop
 8006016:	e000      	b.n	800601a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006018:	bf00      	nop
    }

    if (ret == HAL_OK)
 800601a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800601e:	2b00      	cmp	r3, #0
 8006020:	d10b      	bne.n	800603a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006022:	4b39      	ldr	r3, [pc, #228]	; (8006108 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006024:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006026:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800602a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800602e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006032:	4a35      	ldr	r2, [pc, #212]	; (8006108 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006034:	430b      	orrs	r3, r1
 8006036:	6553      	str	r3, [r2, #84]	; 0x54
 8006038:	e003      	b.n	8006042 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800603a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800603e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006042:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800604a:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800604e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006052:	2300      	movs	r3, #0
 8006054:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006058:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800605c:	460b      	mov	r3, r1
 800605e:	4313      	orrs	r3, r2
 8006060:	d058      	beq.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006062:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006066:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800606a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800606e:	d033      	beq.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8006070:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006074:	d82c      	bhi.n	80060d0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006076:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800607a:	d02f      	beq.n	80060dc <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800607c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006080:	d826      	bhi.n	80060d0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006082:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006086:	d02b      	beq.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8006088:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800608c:	d820      	bhi.n	80060d0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800608e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006092:	d012      	beq.n	80060ba <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8006094:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006098:	d81a      	bhi.n	80060d0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800609a:	2b00      	cmp	r3, #0
 800609c:	d022      	beq.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800609e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060a2:	d115      	bne.n	80060d0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80060a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060a8:	3308      	adds	r3, #8
 80060aa:	2100      	movs	r1, #0
 80060ac:	4618      	mov	r0, r3
 80060ae:	f001 fd29 	bl	8007b04 <RCCEx_PLL2_Config>
 80060b2:	4603      	mov	r3, r0
 80060b4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80060b8:	e015      	b.n	80060e6 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80060ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060be:	3328      	adds	r3, #40	; 0x28
 80060c0:	2102      	movs	r1, #2
 80060c2:	4618      	mov	r0, r3
 80060c4:	f001 fdd0 	bl	8007c68 <RCCEx_PLL3_Config>
 80060c8:	4603      	mov	r3, r0
 80060ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80060ce:	e00a      	b.n	80060e6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80060d0:	2301      	movs	r3, #1
 80060d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80060d6:	e006      	b.n	80060e6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80060d8:	bf00      	nop
 80060da:	e004      	b.n	80060e6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80060dc:	bf00      	nop
 80060de:	e002      	b.n	80060e6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80060e0:	bf00      	nop
 80060e2:	e000      	b.n	80060e6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80060e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d10e      	bne.n	800610c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80060ee:	4b06      	ldr	r3, [pc, #24]	; (8006108 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80060f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060f2:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80060f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80060fe:	4a02      	ldr	r2, [pc, #8]	; (8006108 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006100:	430b      	orrs	r3, r1
 8006102:	6593      	str	r3, [r2, #88]	; 0x58
 8006104:	e006      	b.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8006106:	bf00      	nop
 8006108:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800610c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006110:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006114:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800611c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8006120:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006124:	2300      	movs	r3, #0
 8006126:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800612a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800612e:	460b      	mov	r3, r1
 8006130:	4313      	orrs	r3, r2
 8006132:	d055      	beq.n	80061e0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006134:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006138:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800613c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006140:	d033      	beq.n	80061aa <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8006142:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006146:	d82c      	bhi.n	80061a2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006148:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800614c:	d02f      	beq.n	80061ae <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800614e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006152:	d826      	bhi.n	80061a2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006154:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006158:	d02b      	beq.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800615a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800615e:	d820      	bhi.n	80061a2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006160:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006164:	d012      	beq.n	800618c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8006166:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800616a:	d81a      	bhi.n	80061a2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800616c:	2b00      	cmp	r3, #0
 800616e:	d022      	beq.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8006170:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006174:	d115      	bne.n	80061a2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006176:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800617a:	3308      	adds	r3, #8
 800617c:	2100      	movs	r1, #0
 800617e:	4618      	mov	r0, r3
 8006180:	f001 fcc0 	bl	8007b04 <RCCEx_PLL2_Config>
 8006184:	4603      	mov	r3, r0
 8006186:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800618a:	e015      	b.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800618c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006190:	3328      	adds	r3, #40	; 0x28
 8006192:	2102      	movs	r1, #2
 8006194:	4618      	mov	r0, r3
 8006196:	f001 fd67 	bl	8007c68 <RCCEx_PLL3_Config>
 800619a:	4603      	mov	r3, r0
 800619c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80061a0:	e00a      	b.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80061a2:	2301      	movs	r3, #1
 80061a4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80061a8:	e006      	b.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80061aa:	bf00      	nop
 80061ac:	e004      	b.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80061ae:	bf00      	nop
 80061b0:	e002      	b.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80061b2:	bf00      	nop
 80061b4:	e000      	b.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80061b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061b8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d10b      	bne.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80061c0:	4ba1      	ldr	r3, [pc, #644]	; (8006448 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80061c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061c4:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80061c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061cc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80061d0:	4a9d      	ldr	r2, [pc, #628]	; (8006448 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80061d2:	430b      	orrs	r3, r1
 80061d4:	6593      	str	r3, [r2, #88]	; 0x58
 80061d6:	e003      	b.n	80061e0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061d8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80061dc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80061e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061e8:	f002 0308 	and.w	r3, r2, #8
 80061ec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80061f0:	2300      	movs	r3, #0
 80061f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80061f6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80061fa:	460b      	mov	r3, r1
 80061fc:	4313      	orrs	r3, r2
 80061fe:	d01e      	beq.n	800623e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006200:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006204:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006208:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800620c:	d10c      	bne.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800620e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006212:	3328      	adds	r3, #40	; 0x28
 8006214:	2102      	movs	r1, #2
 8006216:	4618      	mov	r0, r3
 8006218:	f001 fd26 	bl	8007c68 <RCCEx_PLL3_Config>
 800621c:	4603      	mov	r3, r0
 800621e:	2b00      	cmp	r3, #0
 8006220:	d002      	beq.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8006222:	2301      	movs	r3, #1
 8006224:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006228:	4b87      	ldr	r3, [pc, #540]	; (8006448 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800622a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800622c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006230:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006234:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006238:	4a83      	ldr	r2, [pc, #524]	; (8006448 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800623a:	430b      	orrs	r3, r1
 800623c:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800623e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006246:	f002 0310 	and.w	r3, r2, #16
 800624a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800624e:	2300      	movs	r3, #0
 8006250:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006254:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8006258:	460b      	mov	r3, r1
 800625a:	4313      	orrs	r3, r2
 800625c:	d01e      	beq.n	800629c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800625e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006262:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006266:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800626a:	d10c      	bne.n	8006286 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800626c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006270:	3328      	adds	r3, #40	; 0x28
 8006272:	2102      	movs	r1, #2
 8006274:	4618      	mov	r0, r3
 8006276:	f001 fcf7 	bl	8007c68 <RCCEx_PLL3_Config>
 800627a:	4603      	mov	r3, r0
 800627c:	2b00      	cmp	r3, #0
 800627e:	d002      	beq.n	8006286 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8006280:	2301      	movs	r3, #1
 8006282:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006286:	4b70      	ldr	r3, [pc, #448]	; (8006448 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800628a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800628e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006292:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006296:	4a6c      	ldr	r2, [pc, #432]	; (8006448 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006298:	430b      	orrs	r3, r1
 800629a:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800629c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062a4:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80062a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80062ac:	2300      	movs	r3, #0
 80062ae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80062b2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80062b6:	460b      	mov	r3, r1
 80062b8:	4313      	orrs	r3, r2
 80062ba:	d03e      	beq.n	800633a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80062bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062c0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80062c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80062c8:	d022      	beq.n	8006310 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80062ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80062ce:	d81b      	bhi.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d003      	beq.n	80062dc <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80062d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062d8:	d00b      	beq.n	80062f2 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80062da:	e015      	b.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80062dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062e0:	3308      	adds	r3, #8
 80062e2:	2100      	movs	r1, #0
 80062e4:	4618      	mov	r0, r3
 80062e6:	f001 fc0d 	bl	8007b04 <RCCEx_PLL2_Config>
 80062ea:	4603      	mov	r3, r0
 80062ec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80062f0:	e00f      	b.n	8006312 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80062f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062f6:	3328      	adds	r3, #40	; 0x28
 80062f8:	2102      	movs	r1, #2
 80062fa:	4618      	mov	r0, r3
 80062fc:	f001 fcb4 	bl	8007c68 <RCCEx_PLL3_Config>
 8006300:	4603      	mov	r3, r0
 8006302:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006306:	e004      	b.n	8006312 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006308:	2301      	movs	r3, #1
 800630a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800630e:	e000      	b.n	8006312 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8006310:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006312:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006316:	2b00      	cmp	r3, #0
 8006318:	d10b      	bne.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800631a:	4b4b      	ldr	r3, [pc, #300]	; (8006448 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800631c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800631e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8006322:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006326:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800632a:	4a47      	ldr	r2, [pc, #284]	; (8006448 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800632c:	430b      	orrs	r3, r1
 800632e:	6593      	str	r3, [r2, #88]	; 0x58
 8006330:	e003      	b.n	800633a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006332:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006336:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800633a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800633e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006342:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8006346:	67bb      	str	r3, [r7, #120]	; 0x78
 8006348:	2300      	movs	r3, #0
 800634a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800634c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8006350:	460b      	mov	r3, r1
 8006352:	4313      	orrs	r3, r2
 8006354:	d03b      	beq.n	80063ce <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006356:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800635a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800635e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006362:	d01f      	beq.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8006364:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006368:	d818      	bhi.n	800639c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800636a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800636e:	d003      	beq.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8006370:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006374:	d007      	beq.n	8006386 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8006376:	e011      	b.n	800639c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006378:	4b33      	ldr	r3, [pc, #204]	; (8006448 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800637a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800637c:	4a32      	ldr	r2, [pc, #200]	; (8006448 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800637e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006382:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006384:	e00f      	b.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006386:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800638a:	3328      	adds	r3, #40	; 0x28
 800638c:	2101      	movs	r1, #1
 800638e:	4618      	mov	r0, r3
 8006390:	f001 fc6a 	bl	8007c68 <RCCEx_PLL3_Config>
 8006394:	4603      	mov	r3, r0
 8006396:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800639a:	e004      	b.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800639c:	2301      	movs	r3, #1
 800639e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80063a2:	e000      	b.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80063a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d10b      	bne.n	80063c6 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80063ae:	4b26      	ldr	r3, [pc, #152]	; (8006448 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80063b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063b2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80063b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063be:	4a22      	ldr	r2, [pc, #136]	; (8006448 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80063c0:	430b      	orrs	r3, r1
 80063c2:	6553      	str	r3, [r2, #84]	; 0x54
 80063c4:	e003      	b.n	80063ce <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80063ca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80063ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063d6:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80063da:	673b      	str	r3, [r7, #112]	; 0x70
 80063dc:	2300      	movs	r3, #0
 80063de:	677b      	str	r3, [r7, #116]	; 0x74
 80063e0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80063e4:	460b      	mov	r3, r1
 80063e6:	4313      	orrs	r3, r2
 80063e8:	d034      	beq.n	8006454 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80063ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d003      	beq.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80063f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063f8:	d007      	beq.n	800640a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80063fa:	e011      	b.n	8006420 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063fc:	4b12      	ldr	r3, [pc, #72]	; (8006448 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80063fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006400:	4a11      	ldr	r2, [pc, #68]	; (8006448 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006402:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006406:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006408:	e00e      	b.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800640a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800640e:	3308      	adds	r3, #8
 8006410:	2102      	movs	r1, #2
 8006412:	4618      	mov	r0, r3
 8006414:	f001 fb76 	bl	8007b04 <RCCEx_PLL2_Config>
 8006418:	4603      	mov	r3, r0
 800641a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800641e:	e003      	b.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8006420:	2301      	movs	r3, #1
 8006422:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006426:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006428:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800642c:	2b00      	cmp	r3, #0
 800642e:	d10d      	bne.n	800644c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006430:	4b05      	ldr	r3, [pc, #20]	; (8006448 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006432:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006434:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006438:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800643c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800643e:	4a02      	ldr	r2, [pc, #8]	; (8006448 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006440:	430b      	orrs	r3, r1
 8006442:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006444:	e006      	b.n	8006454 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8006446:	bf00      	nop
 8006448:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800644c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006450:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006454:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800645c:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8006460:	66bb      	str	r3, [r7, #104]	; 0x68
 8006462:	2300      	movs	r3, #0
 8006464:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006466:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800646a:	460b      	mov	r3, r1
 800646c:	4313      	orrs	r3, r2
 800646e:	d00c      	beq.n	800648a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006470:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006474:	3328      	adds	r3, #40	; 0x28
 8006476:	2102      	movs	r1, #2
 8006478:	4618      	mov	r0, r3
 800647a:	f001 fbf5 	bl	8007c68 <RCCEx_PLL3_Config>
 800647e:	4603      	mov	r3, r0
 8006480:	2b00      	cmp	r3, #0
 8006482:	d002      	beq.n	800648a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8006484:	2301      	movs	r3, #1
 8006486:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800648a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800648e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006492:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8006496:	663b      	str	r3, [r7, #96]	; 0x60
 8006498:	2300      	movs	r3, #0
 800649a:	667b      	str	r3, [r7, #100]	; 0x64
 800649c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80064a0:	460b      	mov	r3, r1
 80064a2:	4313      	orrs	r3, r2
 80064a4:	d038      	beq.n	8006518 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80064a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80064ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80064b2:	d018      	beq.n	80064e6 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80064b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80064b8:	d811      	bhi.n	80064de <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80064ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064be:	d014      	beq.n	80064ea <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80064c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064c4:	d80b      	bhi.n	80064de <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d011      	beq.n	80064ee <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80064ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064ce:	d106      	bne.n	80064de <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064d0:	4bc3      	ldr	r3, [pc, #780]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80064d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064d4:	4ac2      	ldr	r2, [pc, #776]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80064d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80064da:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80064dc:	e008      	b.n	80064f0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80064de:	2301      	movs	r3, #1
 80064e0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80064e4:	e004      	b.n	80064f0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80064e6:	bf00      	nop
 80064e8:	e002      	b.n	80064f0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80064ea:	bf00      	nop
 80064ec:	e000      	b.n	80064f0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80064ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064f0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d10b      	bne.n	8006510 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80064f8:	4bb9      	ldr	r3, [pc, #740]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80064fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064fc:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006500:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006504:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006508:	4ab5      	ldr	r2, [pc, #724]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800650a:	430b      	orrs	r3, r1
 800650c:	6553      	str	r3, [r2, #84]	; 0x54
 800650e:	e003      	b.n	8006518 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006510:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006514:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006518:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800651c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006520:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8006524:	65bb      	str	r3, [r7, #88]	; 0x58
 8006526:	2300      	movs	r3, #0
 8006528:	65fb      	str	r3, [r7, #92]	; 0x5c
 800652a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800652e:	460b      	mov	r3, r1
 8006530:	4313      	orrs	r3, r2
 8006532:	d009      	beq.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006534:	4baa      	ldr	r3, [pc, #680]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006536:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006538:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800653c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006540:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006542:	4aa7      	ldr	r2, [pc, #668]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006544:	430b      	orrs	r3, r1
 8006546:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006548:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800654c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006550:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8006554:	653b      	str	r3, [r7, #80]	; 0x50
 8006556:	2300      	movs	r3, #0
 8006558:	657b      	str	r3, [r7, #84]	; 0x54
 800655a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800655e:	460b      	mov	r3, r1
 8006560:	4313      	orrs	r3, r2
 8006562:	d00a      	beq.n	800657a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006564:	4b9e      	ldr	r3, [pc, #632]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006566:	691b      	ldr	r3, [r3, #16]
 8006568:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800656c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006570:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006574:	4a9a      	ldr	r2, [pc, #616]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006576:	430b      	orrs	r3, r1
 8006578:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800657a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800657e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006582:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8006586:	64bb      	str	r3, [r7, #72]	; 0x48
 8006588:	2300      	movs	r3, #0
 800658a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800658c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8006590:	460b      	mov	r3, r1
 8006592:	4313      	orrs	r3, r2
 8006594:	d009      	beq.n	80065aa <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006596:	4b92      	ldr	r3, [pc, #584]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006598:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800659a:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800659e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065a4:	4a8e      	ldr	r2, [pc, #568]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80065a6:	430b      	orrs	r3, r1
 80065a8:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80065aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065b2:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80065b6:	643b      	str	r3, [r7, #64]	; 0x40
 80065b8:	2300      	movs	r3, #0
 80065ba:	647b      	str	r3, [r7, #68]	; 0x44
 80065bc:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80065c0:	460b      	mov	r3, r1
 80065c2:	4313      	orrs	r3, r2
 80065c4:	d00e      	beq.n	80065e4 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80065c6:	4b86      	ldr	r3, [pc, #536]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80065c8:	691b      	ldr	r3, [r3, #16]
 80065ca:	4a85      	ldr	r2, [pc, #532]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80065cc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80065d0:	6113      	str	r3, [r2, #16]
 80065d2:	4b83      	ldr	r3, [pc, #524]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80065d4:	6919      	ldr	r1, [r3, #16]
 80065d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065da:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80065de:	4a80      	ldr	r2, [pc, #512]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80065e0:	430b      	orrs	r3, r1
 80065e2:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80065e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ec:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80065f0:	63bb      	str	r3, [r7, #56]	; 0x38
 80065f2:	2300      	movs	r3, #0
 80065f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80065f6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80065fa:	460b      	mov	r3, r1
 80065fc:	4313      	orrs	r3, r2
 80065fe:	d009      	beq.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006600:	4b77      	ldr	r3, [pc, #476]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006602:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006604:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8006608:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800660c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800660e:	4a74      	ldr	r2, [pc, #464]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006610:	430b      	orrs	r3, r1
 8006612:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006614:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800661c:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8006620:	633b      	str	r3, [r7, #48]	; 0x30
 8006622:	2300      	movs	r3, #0
 8006624:	637b      	str	r3, [r7, #52]	; 0x34
 8006626:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800662a:	460b      	mov	r3, r1
 800662c:	4313      	orrs	r3, r2
 800662e:	d00a      	beq.n	8006646 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006630:	4b6b      	ldr	r3, [pc, #428]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006632:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006634:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8006638:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800663c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006640:	4a67      	ldr	r2, [pc, #412]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006642:	430b      	orrs	r3, r1
 8006644:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006646:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800664a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800664e:	2100      	movs	r1, #0
 8006650:	62b9      	str	r1, [r7, #40]	; 0x28
 8006652:	f003 0301 	and.w	r3, r3, #1
 8006656:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006658:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800665c:	460b      	mov	r3, r1
 800665e:	4313      	orrs	r3, r2
 8006660:	d011      	beq.n	8006686 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006662:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006666:	3308      	adds	r3, #8
 8006668:	2100      	movs	r1, #0
 800666a:	4618      	mov	r0, r3
 800666c:	f001 fa4a 	bl	8007b04 <RCCEx_PLL2_Config>
 8006670:	4603      	mov	r3, r0
 8006672:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8006676:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800667a:	2b00      	cmp	r3, #0
 800667c:	d003      	beq.n	8006686 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800667e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006682:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006686:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800668a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800668e:	2100      	movs	r1, #0
 8006690:	6239      	str	r1, [r7, #32]
 8006692:	f003 0302 	and.w	r3, r3, #2
 8006696:	627b      	str	r3, [r7, #36]	; 0x24
 8006698:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800669c:	460b      	mov	r3, r1
 800669e:	4313      	orrs	r3, r2
 80066a0:	d011      	beq.n	80066c6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80066a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066a6:	3308      	adds	r3, #8
 80066a8:	2101      	movs	r1, #1
 80066aa:	4618      	mov	r0, r3
 80066ac:	f001 fa2a 	bl	8007b04 <RCCEx_PLL2_Config>
 80066b0:	4603      	mov	r3, r0
 80066b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80066b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d003      	beq.n	80066c6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80066c2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80066c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ce:	2100      	movs	r1, #0
 80066d0:	61b9      	str	r1, [r7, #24]
 80066d2:	f003 0304 	and.w	r3, r3, #4
 80066d6:	61fb      	str	r3, [r7, #28]
 80066d8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80066dc:	460b      	mov	r3, r1
 80066de:	4313      	orrs	r3, r2
 80066e0:	d011      	beq.n	8006706 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80066e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066e6:	3308      	adds	r3, #8
 80066e8:	2102      	movs	r1, #2
 80066ea:	4618      	mov	r0, r3
 80066ec:	f001 fa0a 	bl	8007b04 <RCCEx_PLL2_Config>
 80066f0:	4603      	mov	r3, r0
 80066f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80066f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d003      	beq.n	8006706 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006702:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006706:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800670a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800670e:	2100      	movs	r1, #0
 8006710:	6139      	str	r1, [r7, #16]
 8006712:	f003 0308 	and.w	r3, r3, #8
 8006716:	617b      	str	r3, [r7, #20]
 8006718:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800671c:	460b      	mov	r3, r1
 800671e:	4313      	orrs	r3, r2
 8006720:	d011      	beq.n	8006746 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006722:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006726:	3328      	adds	r3, #40	; 0x28
 8006728:	2100      	movs	r1, #0
 800672a:	4618      	mov	r0, r3
 800672c:	f001 fa9c 	bl	8007c68 <RCCEx_PLL3_Config>
 8006730:	4603      	mov	r3, r0
 8006732:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8006736:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800673a:	2b00      	cmp	r3, #0
 800673c:	d003      	beq.n	8006746 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800673e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006742:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006746:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800674a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800674e:	2100      	movs	r1, #0
 8006750:	60b9      	str	r1, [r7, #8]
 8006752:	f003 0310 	and.w	r3, r3, #16
 8006756:	60fb      	str	r3, [r7, #12]
 8006758:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800675c:	460b      	mov	r3, r1
 800675e:	4313      	orrs	r3, r2
 8006760:	d011      	beq.n	8006786 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006762:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006766:	3328      	adds	r3, #40	; 0x28
 8006768:	2101      	movs	r1, #1
 800676a:	4618      	mov	r0, r3
 800676c:	f001 fa7c 	bl	8007c68 <RCCEx_PLL3_Config>
 8006770:	4603      	mov	r3, r0
 8006772:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8006776:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800677a:	2b00      	cmp	r3, #0
 800677c:	d003      	beq.n	8006786 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800677e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006782:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006786:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800678a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800678e:	2100      	movs	r1, #0
 8006790:	6039      	str	r1, [r7, #0]
 8006792:	f003 0320 	and.w	r3, r3, #32
 8006796:	607b      	str	r3, [r7, #4]
 8006798:	e9d7 1200 	ldrd	r1, r2, [r7]
 800679c:	460b      	mov	r3, r1
 800679e:	4313      	orrs	r3, r2
 80067a0:	d011      	beq.n	80067c6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80067a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067a6:	3328      	adds	r3, #40	; 0x28
 80067a8:	2102      	movs	r1, #2
 80067aa:	4618      	mov	r0, r3
 80067ac:	f001 fa5c 	bl	8007c68 <RCCEx_PLL3_Config>
 80067b0:	4603      	mov	r3, r0
 80067b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80067b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d003      	beq.n	80067c6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80067c2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 80067c6:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d101      	bne.n	80067d2 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80067ce:	2300      	movs	r3, #0
 80067d0:	e000      	b.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80067d2:	2301      	movs	r3, #1
}
 80067d4:	4618      	mov	r0, r3
 80067d6:	f507 7794 	add.w	r7, r7, #296	; 0x128
 80067da:	46bd      	mov	sp, r7
 80067dc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80067e0:	58024400 	.word	0x58024400

080067e4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b090      	sub	sp, #64	; 0x40
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80067ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80067f2:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 80067f6:	430b      	orrs	r3, r1
 80067f8:	f040 8094 	bne.w	8006924 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80067fc:	4b9e      	ldr	r3, [pc, #632]	; (8006a78 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80067fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006800:	f003 0307 	and.w	r3, r3, #7
 8006804:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8006806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006808:	2b04      	cmp	r3, #4
 800680a:	f200 8087 	bhi.w	800691c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800680e:	a201      	add	r2, pc, #4	; (adr r2, 8006814 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8006810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006814:	08006829 	.word	0x08006829
 8006818:	08006851 	.word	0x08006851
 800681c:	08006879 	.word	0x08006879
 8006820:	08006915 	.word	0x08006915
 8006824:	080068a1 	.word	0x080068a1
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006828:	4b93      	ldr	r3, [pc, #588]	; (8006a78 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006830:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006834:	d108      	bne.n	8006848 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006836:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800683a:	4618      	mov	r0, r3
 800683c:	f001 f810 	bl	8007860 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006842:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006844:	f000 bd45 	b.w	80072d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006848:	2300      	movs	r3, #0
 800684a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800684c:	f000 bd41 	b.w	80072d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006850:	4b89      	ldr	r3, [pc, #548]	; (8006a78 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006858:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800685c:	d108      	bne.n	8006870 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800685e:	f107 0318 	add.w	r3, r7, #24
 8006862:	4618      	mov	r0, r3
 8006864:	f000 fd54 	bl	8007310 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006868:	69bb      	ldr	r3, [r7, #24]
 800686a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800686c:	f000 bd31 	b.w	80072d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006870:	2300      	movs	r3, #0
 8006872:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006874:	f000 bd2d 	b.w	80072d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006878:	4b7f      	ldr	r3, [pc, #508]	; (8006a78 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006880:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006884:	d108      	bne.n	8006898 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006886:	f107 030c 	add.w	r3, r7, #12
 800688a:	4618      	mov	r0, r3
 800688c:	f000 fe94 	bl	80075b8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006894:	f000 bd1d 	b.w	80072d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006898:	2300      	movs	r3, #0
 800689a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800689c:	f000 bd19 	b.w	80072d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80068a0:	4b75      	ldr	r3, [pc, #468]	; (8006a78 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80068a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068a4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80068a8:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80068aa:	4b73      	ldr	r3, [pc, #460]	; (8006a78 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f003 0304 	and.w	r3, r3, #4
 80068b2:	2b04      	cmp	r3, #4
 80068b4:	d10c      	bne.n	80068d0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80068b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d109      	bne.n	80068d0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80068bc:	4b6e      	ldr	r3, [pc, #440]	; (8006a78 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	08db      	lsrs	r3, r3, #3
 80068c2:	f003 0303 	and.w	r3, r3, #3
 80068c6:	4a6d      	ldr	r2, [pc, #436]	; (8006a7c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80068c8:	fa22 f303 	lsr.w	r3, r2, r3
 80068cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068ce:	e01f      	b.n	8006910 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80068d0:	4b69      	ldr	r3, [pc, #420]	; (8006a78 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068dc:	d106      	bne.n	80068ec <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80068de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80068e4:	d102      	bne.n	80068ec <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80068e6:	4b66      	ldr	r3, [pc, #408]	; (8006a80 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80068e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068ea:	e011      	b.n	8006910 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80068ec:	4b62      	ldr	r3, [pc, #392]	; (8006a78 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80068f8:	d106      	bne.n	8006908 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80068fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006900:	d102      	bne.n	8006908 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006902:	4b60      	ldr	r3, [pc, #384]	; (8006a84 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006904:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006906:	e003      	b.n	8006910 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006908:	2300      	movs	r3, #0
 800690a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800690c:	f000 bce1 	b.w	80072d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006910:	f000 bcdf 	b.w	80072d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006914:	4b5c      	ldr	r3, [pc, #368]	; (8006a88 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006916:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006918:	f000 bcdb 	b.w	80072d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800691c:	2300      	movs	r3, #0
 800691e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006920:	f000 bcd7 	b.w	80072d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8006924:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006928:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800692c:	430b      	orrs	r3, r1
 800692e:	f040 80ad 	bne.w	8006a8c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8006932:	4b51      	ldr	r3, [pc, #324]	; (8006a78 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006934:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006936:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800693a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800693c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800693e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006942:	d056      	beq.n	80069f2 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8006944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006946:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800694a:	f200 8090 	bhi.w	8006a6e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800694e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006950:	2bc0      	cmp	r3, #192	; 0xc0
 8006952:	f000 8088 	beq.w	8006a66 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8006956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006958:	2bc0      	cmp	r3, #192	; 0xc0
 800695a:	f200 8088 	bhi.w	8006a6e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800695e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006960:	2b80      	cmp	r3, #128	; 0x80
 8006962:	d032      	beq.n	80069ca <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8006964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006966:	2b80      	cmp	r3, #128	; 0x80
 8006968:	f200 8081 	bhi.w	8006a6e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800696c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800696e:	2b00      	cmp	r3, #0
 8006970:	d003      	beq.n	800697a <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8006972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006974:	2b40      	cmp	r3, #64	; 0x40
 8006976:	d014      	beq.n	80069a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8006978:	e079      	b.n	8006a6e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800697a:	4b3f      	ldr	r3, [pc, #252]	; (8006a78 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006982:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006986:	d108      	bne.n	800699a <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006988:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800698c:	4618      	mov	r0, r3
 800698e:	f000 ff67 	bl	8007860 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006994:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006996:	f000 bc9c 	b.w	80072d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800699a:	2300      	movs	r3, #0
 800699c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800699e:	f000 bc98 	b.w	80072d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80069a2:	4b35      	ldr	r3, [pc, #212]	; (8006a78 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80069aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80069ae:	d108      	bne.n	80069c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80069b0:	f107 0318 	add.w	r3, r7, #24
 80069b4:	4618      	mov	r0, r3
 80069b6:	f000 fcab 	bl	8007310 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80069ba:	69bb      	ldr	r3, [r7, #24]
 80069bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80069be:	f000 bc88 	b.w	80072d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80069c2:	2300      	movs	r3, #0
 80069c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80069c6:	f000 bc84 	b.w	80072d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80069ca:	4b2b      	ldr	r3, [pc, #172]	; (8006a78 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80069d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80069d6:	d108      	bne.n	80069ea <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80069d8:	f107 030c 	add.w	r3, r7, #12
 80069dc:	4618      	mov	r0, r3
 80069de:	f000 fdeb 	bl	80075b8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80069e6:	f000 bc74 	b.w	80072d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80069ea:	2300      	movs	r3, #0
 80069ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80069ee:	f000 bc70 	b.w	80072d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80069f2:	4b21      	ldr	r3, [pc, #132]	; (8006a78 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80069f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069f6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80069fa:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80069fc:	4b1e      	ldr	r3, [pc, #120]	; (8006a78 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f003 0304 	and.w	r3, r3, #4
 8006a04:	2b04      	cmp	r3, #4
 8006a06:	d10c      	bne.n	8006a22 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8006a08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d109      	bne.n	8006a22 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006a0e:	4b1a      	ldr	r3, [pc, #104]	; (8006a78 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	08db      	lsrs	r3, r3, #3
 8006a14:	f003 0303 	and.w	r3, r3, #3
 8006a18:	4a18      	ldr	r2, [pc, #96]	; (8006a7c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006a1a:	fa22 f303 	lsr.w	r3, r2, r3
 8006a1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a20:	e01f      	b.n	8006a62 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006a22:	4b15      	ldr	r3, [pc, #84]	; (8006a78 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a2e:	d106      	bne.n	8006a3e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8006a30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a32:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006a36:	d102      	bne.n	8006a3e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006a38:	4b11      	ldr	r3, [pc, #68]	; (8006a80 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006a3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a3c:	e011      	b.n	8006a62 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006a3e:	4b0e      	ldr	r3, [pc, #56]	; (8006a78 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a46:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a4a:	d106      	bne.n	8006a5a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8006a4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a52:	d102      	bne.n	8006a5a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006a54:	4b0b      	ldr	r3, [pc, #44]	; (8006a84 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006a56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a58:	e003      	b.n	8006a62 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006a5e:	f000 bc38 	b.w	80072d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006a62:	f000 bc36 	b.w	80072d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006a66:	4b08      	ldr	r3, [pc, #32]	; (8006a88 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006a68:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a6a:	f000 bc32 	b.w	80072d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006a6e:	2300      	movs	r3, #0
 8006a70:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a72:	f000 bc2e 	b.w	80072d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006a76:	bf00      	nop
 8006a78:	58024400 	.word	0x58024400
 8006a7c:	03d09000 	.word	0x03d09000
 8006a80:	003d0900 	.word	0x003d0900
 8006a84:	017d7840 	.word	0x017d7840
 8006a88:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8006a8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a90:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8006a94:	430b      	orrs	r3, r1
 8006a96:	f040 809c 	bne.w	8006bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8006a9a:	4b9e      	ldr	r3, [pc, #632]	; (8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006a9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a9e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8006aa2:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8006aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aa6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006aaa:	d054      	beq.n	8006b56 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8006aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aae:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006ab2:	f200 808b 	bhi.w	8006bcc <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8006ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ab8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006abc:	f000 8083 	beq.w	8006bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8006ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ac2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006ac6:	f200 8081 	bhi.w	8006bcc <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8006aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006acc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006ad0:	d02f      	beq.n	8006b32 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8006ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ad4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006ad8:	d878      	bhi.n	8006bcc <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8006ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d004      	beq.n	8006aea <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8006ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ae2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006ae6:	d012      	beq.n	8006b0e <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8006ae8:	e070      	b.n	8006bcc <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006aea:	4b8a      	ldr	r3, [pc, #552]	; (8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006af2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006af6:	d107      	bne.n	8006b08 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006af8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006afc:	4618      	mov	r0, r3
 8006afe:	f000 feaf 	bl	8007860 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b04:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b06:	e3e4      	b.n	80072d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006b08:	2300      	movs	r3, #0
 8006b0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b0c:	e3e1      	b.n	80072d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006b0e:	4b81      	ldr	r3, [pc, #516]	; (8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b16:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006b1a:	d107      	bne.n	8006b2c <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b1c:	f107 0318 	add.w	r3, r7, #24
 8006b20:	4618      	mov	r0, r3
 8006b22:	f000 fbf5 	bl	8007310 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006b26:	69bb      	ldr	r3, [r7, #24]
 8006b28:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b2a:	e3d2      	b.n	80072d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b30:	e3cf      	b.n	80072d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006b32:	4b78      	ldr	r3, [pc, #480]	; (8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006b3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b3e:	d107      	bne.n	8006b50 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b40:	f107 030c 	add.w	r3, r7, #12
 8006b44:	4618      	mov	r0, r3
 8006b46:	f000 fd37 	bl	80075b8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b4e:	e3c0      	b.n	80072d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006b50:	2300      	movs	r3, #0
 8006b52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b54:	e3bd      	b.n	80072d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006b56:	4b6f      	ldr	r3, [pc, #444]	; (8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006b58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b5a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006b5e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006b60:	4b6c      	ldr	r3, [pc, #432]	; (8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f003 0304 	and.w	r3, r3, #4
 8006b68:	2b04      	cmp	r3, #4
 8006b6a:	d10c      	bne.n	8006b86 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8006b6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d109      	bne.n	8006b86 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006b72:	4b68      	ldr	r3, [pc, #416]	; (8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	08db      	lsrs	r3, r3, #3
 8006b78:	f003 0303 	and.w	r3, r3, #3
 8006b7c:	4a66      	ldr	r2, [pc, #408]	; (8006d18 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8006b7e:	fa22 f303 	lsr.w	r3, r2, r3
 8006b82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b84:	e01e      	b.n	8006bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006b86:	4b63      	ldr	r3, [pc, #396]	; (8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b92:	d106      	bne.n	8006ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8006b94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b96:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006b9a:	d102      	bne.n	8006ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006b9c:	4b5f      	ldr	r3, [pc, #380]	; (8006d1c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8006b9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ba0:	e010      	b.n	8006bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006ba2:	4b5c      	ldr	r3, [pc, #368]	; (8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006baa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006bae:	d106      	bne.n	8006bbe <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8006bb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bb2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006bb6:	d102      	bne.n	8006bbe <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006bb8:	4b59      	ldr	r3, [pc, #356]	; (8006d20 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8006bba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006bbc:	e002      	b.n	8006bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006bc2:	e386      	b.n	80072d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006bc4:	e385      	b.n	80072d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006bc6:	4b57      	ldr	r3, [pc, #348]	; (8006d24 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8006bc8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006bca:	e382      	b.n	80072d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006bcc:	2300      	movs	r3, #0
 8006bce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006bd0:	e37f      	b.n	80072d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8006bd2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006bd6:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8006bda:	430b      	orrs	r3, r1
 8006bdc:	f040 80a7 	bne.w	8006d2e <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8006be0:	4b4c      	ldr	r3, [pc, #304]	; (8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006be2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006be4:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8006be8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8006bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006bf0:	d055      	beq.n	8006c9e <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8006bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bf4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006bf8:	f200 8096 	bhi.w	8006d28 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bfe:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006c02:	f000 8084 	beq.w	8006d0e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8006c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c08:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006c0c:	f200 808c 	bhi.w	8006d28 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c12:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006c16:	d030      	beq.n	8006c7a <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8006c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c1a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006c1e:	f200 8083 	bhi.w	8006d28 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d004      	beq.n	8006c32 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8006c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c2a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006c2e:	d012      	beq.n	8006c56 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8006c30:	e07a      	b.n	8006d28 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006c32:	4b38      	ldr	r3, [pc, #224]	; (8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c3a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006c3e:	d107      	bne.n	8006c50 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006c40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006c44:	4618      	mov	r0, r3
 8006c46:	f000 fe0b 	bl	8007860 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c4e:	e340      	b.n	80072d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006c50:	2300      	movs	r3, #0
 8006c52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c54:	e33d      	b.n	80072d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006c56:	4b2f      	ldr	r3, [pc, #188]	; (8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c5e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006c62:	d107      	bne.n	8006c74 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c64:	f107 0318 	add.w	r3, r7, #24
 8006c68:	4618      	mov	r0, r3
 8006c6a:	f000 fb51 	bl	8007310 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006c6e:	69bb      	ldr	r3, [r7, #24]
 8006c70:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c72:	e32e      	b.n	80072d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006c74:	2300      	movs	r3, #0
 8006c76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c78:	e32b      	b.n	80072d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006c7a:	4b26      	ldr	r3, [pc, #152]	; (8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006c82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c86:	d107      	bne.n	8006c98 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006c88:	f107 030c 	add.w	r3, r7, #12
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	f000 fc93 	bl	80075b8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c96:	e31c      	b.n	80072d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006c98:	2300      	movs	r3, #0
 8006c9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c9c:	e319      	b.n	80072d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006c9e:	4b1d      	ldr	r3, [pc, #116]	; (8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006ca0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ca2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006ca6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006ca8:	4b1a      	ldr	r3, [pc, #104]	; (8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f003 0304 	and.w	r3, r3, #4
 8006cb0:	2b04      	cmp	r3, #4
 8006cb2:	d10c      	bne.n	8006cce <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8006cb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d109      	bne.n	8006cce <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006cba:	4b16      	ldr	r3, [pc, #88]	; (8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	08db      	lsrs	r3, r3, #3
 8006cc0:	f003 0303 	and.w	r3, r3, #3
 8006cc4:	4a14      	ldr	r2, [pc, #80]	; (8006d18 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8006cc6:	fa22 f303 	lsr.w	r3, r2, r3
 8006cca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ccc:	e01e      	b.n	8006d0c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006cce:	4b11      	ldr	r3, [pc, #68]	; (8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006cda:	d106      	bne.n	8006cea <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8006cdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cde:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006ce2:	d102      	bne.n	8006cea <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006ce4:	4b0d      	ldr	r3, [pc, #52]	; (8006d1c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8006ce6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ce8:	e010      	b.n	8006d0c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006cea:	4b0a      	ldr	r3, [pc, #40]	; (8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cf2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006cf6:	d106      	bne.n	8006d06 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8006cf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cfa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006cfe:	d102      	bne.n	8006d06 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006d00:	4b07      	ldr	r3, [pc, #28]	; (8006d20 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8006d02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d04:	e002      	b.n	8006d0c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006d06:	2300      	movs	r3, #0
 8006d08:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006d0a:	e2e2      	b.n	80072d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006d0c:	e2e1      	b.n	80072d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006d0e:	4b05      	ldr	r3, [pc, #20]	; (8006d24 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8006d10:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d12:	e2de      	b.n	80072d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006d14:	58024400 	.word	0x58024400
 8006d18:	03d09000 	.word	0x03d09000
 8006d1c:	003d0900 	.word	0x003d0900
 8006d20:	017d7840 	.word	0x017d7840
 8006d24:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8006d28:	2300      	movs	r3, #0
 8006d2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d2c:	e2d1      	b.n	80072d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8006d2e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d32:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8006d36:	430b      	orrs	r3, r1
 8006d38:	f040 809c 	bne.w	8006e74 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8006d3c:	4b93      	ldr	r3, [pc, #588]	; (8006f8c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006d3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d40:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8006d44:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d48:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006d4c:	d054      	beq.n	8006df8 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8006d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d50:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006d54:	f200 808b 	bhi.w	8006e6e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006d58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d5a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006d5e:	f000 8083 	beq.w	8006e68 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8006d62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d64:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006d68:	f200 8081 	bhi.w	8006e6e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d72:	d02f      	beq.n	8006dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8006d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d7a:	d878      	bhi.n	8006e6e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006d7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d004      	beq.n	8006d8c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8006d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d88:	d012      	beq.n	8006db0 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8006d8a:	e070      	b.n	8006e6e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006d8c:	4b7f      	ldr	r3, [pc, #508]	; (8006f8c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d94:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006d98:	d107      	bne.n	8006daa <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006d9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006d9e:	4618      	mov	r0, r3
 8006da0:	f000 fd5e 	bl	8007860 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006da6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006da8:	e293      	b.n	80072d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006daa:	2300      	movs	r3, #0
 8006dac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006dae:	e290      	b.n	80072d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006db0:	4b76      	ldr	r3, [pc, #472]	; (8006f8c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006db8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006dbc:	d107      	bne.n	8006dce <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006dbe:	f107 0318 	add.w	r3, r7, #24
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	f000 faa4 	bl	8007310 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006dc8:	69bb      	ldr	r3, [r7, #24]
 8006dca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006dcc:	e281      	b.n	80072d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006dce:	2300      	movs	r3, #0
 8006dd0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006dd2:	e27e      	b.n	80072d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006dd4:	4b6d      	ldr	r3, [pc, #436]	; (8006f8c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006ddc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006de0:	d107      	bne.n	8006df2 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006de2:	f107 030c 	add.w	r3, r7, #12
 8006de6:	4618      	mov	r0, r3
 8006de8:	f000 fbe6 	bl	80075b8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006df0:	e26f      	b.n	80072d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006df2:	2300      	movs	r3, #0
 8006df4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006df6:	e26c      	b.n	80072d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006df8:	4b64      	ldr	r3, [pc, #400]	; (8006f8c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006dfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006dfc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006e00:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006e02:	4b62      	ldr	r3, [pc, #392]	; (8006f8c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f003 0304 	and.w	r3, r3, #4
 8006e0a:	2b04      	cmp	r3, #4
 8006e0c:	d10c      	bne.n	8006e28 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8006e0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d109      	bne.n	8006e28 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006e14:	4b5d      	ldr	r3, [pc, #372]	; (8006f8c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	08db      	lsrs	r3, r3, #3
 8006e1a:	f003 0303 	and.w	r3, r3, #3
 8006e1e:	4a5c      	ldr	r2, [pc, #368]	; (8006f90 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8006e20:	fa22 f303 	lsr.w	r3, r2, r3
 8006e24:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e26:	e01e      	b.n	8006e66 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006e28:	4b58      	ldr	r3, [pc, #352]	; (8006f8c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e34:	d106      	bne.n	8006e44 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8006e36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e38:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006e3c:	d102      	bne.n	8006e44 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006e3e:	4b55      	ldr	r3, [pc, #340]	; (8006f94 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006e40:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e42:	e010      	b.n	8006e66 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006e44:	4b51      	ldr	r3, [pc, #324]	; (8006f8c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e4c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006e50:	d106      	bne.n	8006e60 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8006e52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e58:	d102      	bne.n	8006e60 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006e5a:	4b4f      	ldr	r3, [pc, #316]	; (8006f98 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8006e5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e5e:	e002      	b.n	8006e66 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006e60:	2300      	movs	r3, #0
 8006e62:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006e64:	e235      	b.n	80072d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006e66:	e234      	b.n	80072d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006e68:	4b4c      	ldr	r3, [pc, #304]	; (8006f9c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8006e6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e6c:	e231      	b.n	80072d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006e6e:	2300      	movs	r3, #0
 8006e70:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e72:	e22e      	b.n	80072d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8006e74:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e78:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8006e7c:	430b      	orrs	r3, r1
 8006e7e:	f040 808f 	bne.w	8006fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8006e82:	4b42      	ldr	r3, [pc, #264]	; (8006f8c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006e84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e86:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8006e8a:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8006e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e8e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006e92:	d06b      	beq.n	8006f6c <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8006e94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e96:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006e9a:	d874      	bhi.n	8006f86 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006e9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e9e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006ea2:	d056      	beq.n	8006f52 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8006ea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ea6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006eaa:	d86c      	bhi.n	8006f86 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eae:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006eb2:	d03b      	beq.n	8006f2c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8006eb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eb6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006eba:	d864      	bhi.n	8006f86 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ebe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ec2:	d021      	beq.n	8006f08 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8006ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ec6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006eca:	d85c      	bhi.n	8006f86 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d004      	beq.n	8006edc <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8006ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ed4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ed8:	d004      	beq.n	8006ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8006eda:	e054      	b.n	8006f86 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8006edc:	f7fe fa62 	bl	80053a4 <HAL_RCC_GetPCLK1Freq>
 8006ee0:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006ee2:	e1f6      	b.n	80072d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006ee4:	4b29      	ldr	r3, [pc, #164]	; (8006f8c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006eec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006ef0:	d107      	bne.n	8006f02 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006ef2:	f107 0318 	add.w	r3, r7, #24
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	f000 fa0a 	bl	8007310 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006efc:	69fb      	ldr	r3, [r7, #28]
 8006efe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f00:	e1e7      	b.n	80072d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f02:	2300      	movs	r3, #0
 8006f04:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f06:	e1e4      	b.n	80072d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006f08:	4b20      	ldr	r3, [pc, #128]	; (8006f8c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006f10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f14:	d107      	bne.n	8006f26 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006f16:	f107 030c 	add.w	r3, r7, #12
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	f000 fb4c 	bl	80075b8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006f20:	693b      	ldr	r3, [r7, #16]
 8006f22:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f24:	e1d5      	b.n	80072d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f26:	2300      	movs	r3, #0
 8006f28:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f2a:	e1d2      	b.n	80072d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006f2c:	4b17      	ldr	r3, [pc, #92]	; (8006f8c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f003 0304 	and.w	r3, r3, #4
 8006f34:	2b04      	cmp	r3, #4
 8006f36:	d109      	bne.n	8006f4c <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006f38:	4b14      	ldr	r3, [pc, #80]	; (8006f8c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	08db      	lsrs	r3, r3, #3
 8006f3e:	f003 0303 	and.w	r3, r3, #3
 8006f42:	4a13      	ldr	r2, [pc, #76]	; (8006f90 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8006f44:	fa22 f303 	lsr.w	r3, r2, r3
 8006f48:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f4a:	e1c2      	b.n	80072d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f50:	e1bf      	b.n	80072d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006f52:	4b0e      	ldr	r3, [pc, #56]	; (8006f8c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f5e:	d102      	bne.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8006f60:	4b0c      	ldr	r3, [pc, #48]	; (8006f94 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006f62:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f64:	e1b5      	b.n	80072d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f66:	2300      	movs	r3, #0
 8006f68:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f6a:	e1b2      	b.n	80072d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006f6c:	4b07      	ldr	r3, [pc, #28]	; (8006f8c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f74:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006f78:	d102      	bne.n	8006f80 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8006f7a:	4b07      	ldr	r3, [pc, #28]	; (8006f98 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8006f7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f7e:	e1a8      	b.n	80072d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f80:	2300      	movs	r3, #0
 8006f82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f84:	e1a5      	b.n	80072d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006f86:	2300      	movs	r3, #0
 8006f88:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f8a:	e1a2      	b.n	80072d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006f8c:	58024400 	.word	0x58024400
 8006f90:	03d09000 	.word	0x03d09000
 8006f94:	003d0900 	.word	0x003d0900
 8006f98:	017d7840 	.word	0x017d7840
 8006f9c:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8006fa0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006fa4:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8006fa8:	430b      	orrs	r3, r1
 8006faa:	d173      	bne.n	8007094 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8006fac:	4b9c      	ldr	r3, [pc, #624]	; (8007220 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006fae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fb0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006fb4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fb8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006fbc:	d02f      	beq.n	800701e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8006fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fc0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006fc4:	d863      	bhi.n	800708e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8006fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d004      	beq.n	8006fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8006fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fd2:	d012      	beq.n	8006ffa <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8006fd4:	e05b      	b.n	800708e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006fd6:	4b92      	ldr	r3, [pc, #584]	; (8007220 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006fde:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006fe2:	d107      	bne.n	8006ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006fe4:	f107 0318 	add.w	r3, r7, #24
 8006fe8:	4618      	mov	r0, r3
 8006fea:	f000 f991 	bl	8007310 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006fee:	69bb      	ldr	r3, [r7, #24]
 8006ff0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ff2:	e16e      	b.n	80072d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ff8:	e16b      	b.n	80072d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006ffa:	4b89      	ldr	r3, [pc, #548]	; (8007220 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007002:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007006:	d107      	bne.n	8007018 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007008:	f107 030c 	add.w	r3, r7, #12
 800700c:	4618      	mov	r0, r3
 800700e:	f000 fad3 	bl	80075b8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007012:	697b      	ldr	r3, [r7, #20]
 8007014:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007016:	e15c      	b.n	80072d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007018:	2300      	movs	r3, #0
 800701a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800701c:	e159      	b.n	80072d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800701e:	4b80      	ldr	r3, [pc, #512]	; (8007220 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007020:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007022:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007026:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007028:	4b7d      	ldr	r3, [pc, #500]	; (8007220 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f003 0304 	and.w	r3, r3, #4
 8007030:	2b04      	cmp	r3, #4
 8007032:	d10c      	bne.n	800704e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8007034:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007036:	2b00      	cmp	r3, #0
 8007038:	d109      	bne.n	800704e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800703a:	4b79      	ldr	r3, [pc, #484]	; (8007220 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	08db      	lsrs	r3, r3, #3
 8007040:	f003 0303 	and.w	r3, r3, #3
 8007044:	4a77      	ldr	r2, [pc, #476]	; (8007224 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8007046:	fa22 f303 	lsr.w	r3, r2, r3
 800704a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800704c:	e01e      	b.n	800708c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800704e:	4b74      	ldr	r3, [pc, #464]	; (8007220 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007056:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800705a:	d106      	bne.n	800706a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800705c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800705e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007062:	d102      	bne.n	800706a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007064:	4b70      	ldr	r3, [pc, #448]	; (8007228 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8007066:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007068:	e010      	b.n	800708c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800706a:	4b6d      	ldr	r3, [pc, #436]	; (8007220 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007072:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007076:	d106      	bne.n	8007086 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8007078:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800707a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800707e:	d102      	bne.n	8007086 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007080:	4b6a      	ldr	r3, [pc, #424]	; (800722c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8007082:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007084:	e002      	b.n	800708c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007086:	2300      	movs	r3, #0
 8007088:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800708a:	e122      	b.n	80072d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800708c:	e121      	b.n	80072d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800708e:	2300      	movs	r3, #0
 8007090:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007092:	e11e      	b.n	80072d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007094:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007098:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800709c:	430b      	orrs	r3, r1
 800709e:	d133      	bne.n	8007108 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80070a0:	4b5f      	ldr	r3, [pc, #380]	; (8007220 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80070a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80070a8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80070aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d004      	beq.n	80070ba <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 80070b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070b6:	d012      	beq.n	80070de <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 80070b8:	e023      	b.n	8007102 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80070ba:	4b59      	ldr	r3, [pc, #356]	; (8007220 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80070c6:	d107      	bne.n	80070d8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80070c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80070cc:	4618      	mov	r0, r3
 80070ce:	f000 fbc7 	bl	8007860 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80070d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80070d6:	e0fc      	b.n	80072d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80070d8:	2300      	movs	r3, #0
 80070da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80070dc:	e0f9      	b.n	80072d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80070de:	4b50      	ldr	r3, [pc, #320]	; (8007220 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80070e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80070ea:	d107      	bne.n	80070fc <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80070ec:	f107 0318 	add.w	r3, r7, #24
 80070f0:	4618      	mov	r0, r3
 80070f2:	f000 f90d 	bl	8007310 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80070f6:	6a3b      	ldr	r3, [r7, #32]
 80070f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80070fa:	e0ea      	b.n	80072d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80070fc:	2300      	movs	r3, #0
 80070fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007100:	e0e7      	b.n	80072d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8007102:	2300      	movs	r3, #0
 8007104:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007106:	e0e4      	b.n	80072d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8007108:	e9d7 2300 	ldrd	r2, r3, [r7]
 800710c:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8007110:	430b      	orrs	r3, r1
 8007112:	f040 808d 	bne.w	8007230 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8007116:	4b42      	ldr	r3, [pc, #264]	; (8007220 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007118:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800711a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800711e:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8007120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007122:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007126:	d06b      	beq.n	8007200 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8007128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800712a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800712e:	d874      	bhi.n	800721a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007132:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007136:	d056      	beq.n	80071e6 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8007138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800713a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800713e:	d86c      	bhi.n	800721a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007142:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007146:	d03b      	beq.n	80071c0 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8007148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800714a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800714e:	d864      	bhi.n	800721a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007152:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007156:	d021      	beq.n	800719c <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8007158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800715a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800715e:	d85c      	bhi.n	800721a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007162:	2b00      	cmp	r3, #0
 8007164:	d004      	beq.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8007166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007168:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800716c:	d004      	beq.n	8007178 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800716e:	e054      	b.n	800721a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8007170:	f000 f8b8 	bl	80072e4 <HAL_RCCEx_GetD3PCLK1Freq>
 8007174:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007176:	e0ac      	b.n	80072d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007178:	4b29      	ldr	r3, [pc, #164]	; (8007220 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007180:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007184:	d107      	bne.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007186:	f107 0318 	add.w	r3, r7, #24
 800718a:	4618      	mov	r0, r3
 800718c:	f000 f8c0 	bl	8007310 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007190:	69fb      	ldr	r3, [r7, #28]
 8007192:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007194:	e09d      	b.n	80072d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007196:	2300      	movs	r3, #0
 8007198:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800719a:	e09a      	b.n	80072d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800719c:	4b20      	ldr	r3, [pc, #128]	; (8007220 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80071a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80071a8:	d107      	bne.n	80071ba <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80071aa:	f107 030c 	add.w	r3, r7, #12
 80071ae:	4618      	mov	r0, r3
 80071b0:	f000 fa02 	bl	80075b8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80071b4:	693b      	ldr	r3, [r7, #16]
 80071b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80071b8:	e08b      	b.n	80072d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80071ba:	2300      	movs	r3, #0
 80071bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80071be:	e088      	b.n	80072d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80071c0:	4b17      	ldr	r3, [pc, #92]	; (8007220 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f003 0304 	and.w	r3, r3, #4
 80071c8:	2b04      	cmp	r3, #4
 80071ca:	d109      	bne.n	80071e0 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80071cc:	4b14      	ldr	r3, [pc, #80]	; (8007220 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	08db      	lsrs	r3, r3, #3
 80071d2:	f003 0303 	and.w	r3, r3, #3
 80071d6:	4a13      	ldr	r2, [pc, #76]	; (8007224 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80071d8:	fa22 f303 	lsr.w	r3, r2, r3
 80071dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80071de:	e078      	b.n	80072d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80071e0:	2300      	movs	r3, #0
 80071e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80071e4:	e075      	b.n	80072d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80071e6:	4b0e      	ldr	r3, [pc, #56]	; (8007220 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071f2:	d102      	bne.n	80071fa <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 80071f4:	4b0c      	ldr	r3, [pc, #48]	; (8007228 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80071f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80071f8:	e06b      	b.n	80072d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80071fa:	2300      	movs	r3, #0
 80071fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80071fe:	e068      	b.n	80072d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007200:	4b07      	ldr	r3, [pc, #28]	; (8007220 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007208:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800720c:	d102      	bne.n	8007214 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800720e:	4b07      	ldr	r3, [pc, #28]	; (800722c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8007210:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007212:	e05e      	b.n	80072d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007214:	2300      	movs	r3, #0
 8007216:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007218:	e05b      	b.n	80072d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800721a:	2300      	movs	r3, #0
 800721c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800721e:	e058      	b.n	80072d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007220:	58024400 	.word	0x58024400
 8007224:	03d09000 	.word	0x03d09000
 8007228:	003d0900 	.word	0x003d0900
 800722c:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8007230:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007234:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8007238:	430b      	orrs	r3, r1
 800723a:	d148      	bne.n	80072ce <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800723c:	4b27      	ldr	r3, [pc, #156]	; (80072dc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800723e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007240:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007244:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8007246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007248:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800724c:	d02a      	beq.n	80072a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800724e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007250:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007254:	d838      	bhi.n	80072c8 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8007256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007258:	2b00      	cmp	r3, #0
 800725a:	d004      	beq.n	8007266 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800725c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800725e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007262:	d00d      	beq.n	8007280 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8007264:	e030      	b.n	80072c8 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007266:	4b1d      	ldr	r3, [pc, #116]	; (80072dc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800726e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007272:	d102      	bne.n	800727a <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8007274:	4b1a      	ldr	r3, [pc, #104]	; (80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8007276:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007278:	e02b      	b.n	80072d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800727a:	2300      	movs	r3, #0
 800727c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800727e:	e028      	b.n	80072d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007280:	4b16      	ldr	r3, [pc, #88]	; (80072dc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007288:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800728c:	d107      	bne.n	800729e <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800728e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007292:	4618      	mov	r0, r3
 8007294:	f000 fae4 	bl	8007860 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800729a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800729c:	e019      	b.n	80072d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800729e:	2300      	movs	r3, #0
 80072a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80072a2:	e016      	b.n	80072d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80072a4:	4b0d      	ldr	r3, [pc, #52]	; (80072dc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80072ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80072b0:	d107      	bne.n	80072c2 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80072b2:	f107 0318 	add.w	r3, r7, #24
 80072b6:	4618      	mov	r0, r3
 80072b8:	f000 f82a 	bl	8007310 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80072bc:	69fb      	ldr	r3, [r7, #28]
 80072be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80072c0:	e007      	b.n	80072d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80072c2:	2300      	movs	r3, #0
 80072c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80072c6:	e004      	b.n	80072d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80072c8:	2300      	movs	r3, #0
 80072ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80072cc:	e001      	b.n	80072d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 80072ce:	2300      	movs	r3, #0
 80072d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 80072d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80072d4:	4618      	mov	r0, r3
 80072d6:	3740      	adds	r7, #64	; 0x40
 80072d8:	46bd      	mov	sp, r7
 80072da:	bd80      	pop	{r7, pc}
 80072dc:	58024400 	.word	0x58024400
 80072e0:	017d7840 	.word	0x017d7840

080072e4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80072e8:	f7fe f82c 	bl	8005344 <HAL_RCC_GetHCLKFreq>
 80072ec:	4602      	mov	r2, r0
 80072ee:	4b06      	ldr	r3, [pc, #24]	; (8007308 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80072f0:	6a1b      	ldr	r3, [r3, #32]
 80072f2:	091b      	lsrs	r3, r3, #4
 80072f4:	f003 0307 	and.w	r3, r3, #7
 80072f8:	4904      	ldr	r1, [pc, #16]	; (800730c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80072fa:	5ccb      	ldrb	r3, [r1, r3]
 80072fc:	f003 031f 	and.w	r3, r3, #31
 8007300:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007304:	4618      	mov	r0, r3
 8007306:	bd80      	pop	{r7, pc}
 8007308:	58024400 	.word	0x58024400
 800730c:	0800d7d8 	.word	0x0800d7d8

08007310 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007310:	b480      	push	{r7}
 8007312:	b089      	sub	sp, #36	; 0x24
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007318:	4ba1      	ldr	r3, [pc, #644]	; (80075a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800731a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800731c:	f003 0303 	and.w	r3, r3, #3
 8007320:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8007322:	4b9f      	ldr	r3, [pc, #636]	; (80075a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007326:	0b1b      	lsrs	r3, r3, #12
 8007328:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800732c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800732e:	4b9c      	ldr	r3, [pc, #624]	; (80075a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007332:	091b      	lsrs	r3, r3, #4
 8007334:	f003 0301 	and.w	r3, r3, #1
 8007338:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800733a:	4b99      	ldr	r3, [pc, #612]	; (80075a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800733c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800733e:	08db      	lsrs	r3, r3, #3
 8007340:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007344:	693a      	ldr	r2, [r7, #16]
 8007346:	fb02 f303 	mul.w	r3, r2, r3
 800734a:	ee07 3a90 	vmov	s15, r3
 800734e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007352:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007356:	697b      	ldr	r3, [r7, #20]
 8007358:	2b00      	cmp	r3, #0
 800735a:	f000 8111 	beq.w	8007580 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800735e:	69bb      	ldr	r3, [r7, #24]
 8007360:	2b02      	cmp	r3, #2
 8007362:	f000 8083 	beq.w	800746c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007366:	69bb      	ldr	r3, [r7, #24]
 8007368:	2b02      	cmp	r3, #2
 800736a:	f200 80a1 	bhi.w	80074b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800736e:	69bb      	ldr	r3, [r7, #24]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d003      	beq.n	800737c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007374:	69bb      	ldr	r3, [r7, #24]
 8007376:	2b01      	cmp	r3, #1
 8007378:	d056      	beq.n	8007428 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800737a:	e099      	b.n	80074b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800737c:	4b88      	ldr	r3, [pc, #544]	; (80075a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f003 0320 	and.w	r3, r3, #32
 8007384:	2b00      	cmp	r3, #0
 8007386:	d02d      	beq.n	80073e4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007388:	4b85      	ldr	r3, [pc, #532]	; (80075a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	08db      	lsrs	r3, r3, #3
 800738e:	f003 0303 	and.w	r3, r3, #3
 8007392:	4a84      	ldr	r2, [pc, #528]	; (80075a4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007394:	fa22 f303 	lsr.w	r3, r2, r3
 8007398:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	ee07 3a90 	vmov	s15, r3
 80073a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073a4:	697b      	ldr	r3, [r7, #20]
 80073a6:	ee07 3a90 	vmov	s15, r3
 80073aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073b2:	4b7b      	ldr	r3, [pc, #492]	; (80075a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80073b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073ba:	ee07 3a90 	vmov	s15, r3
 80073be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80073c6:	eddf 5a78 	vldr	s11, [pc, #480]	; 80075a8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80073ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80073d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073de:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80073e2:	e087      	b.n	80074f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80073e4:	697b      	ldr	r3, [r7, #20]
 80073e6:	ee07 3a90 	vmov	s15, r3
 80073ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073ee:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80075ac <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80073f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073f6:	4b6a      	ldr	r3, [pc, #424]	; (80075a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80073f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073fe:	ee07 3a90 	vmov	s15, r3
 8007402:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007406:	ed97 6a03 	vldr	s12, [r7, #12]
 800740a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80075a8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800740e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007412:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007416:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800741a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800741e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007422:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007426:	e065      	b.n	80074f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007428:	697b      	ldr	r3, [r7, #20]
 800742a:	ee07 3a90 	vmov	s15, r3
 800742e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007432:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80075b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007436:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800743a:	4b59      	ldr	r3, [pc, #356]	; (80075a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800743c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800743e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007442:	ee07 3a90 	vmov	s15, r3
 8007446:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800744a:	ed97 6a03 	vldr	s12, [r7, #12]
 800744e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80075a8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007452:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007456:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800745a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800745e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007462:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007466:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800746a:	e043      	b.n	80074f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800746c:	697b      	ldr	r3, [r7, #20]
 800746e:	ee07 3a90 	vmov	s15, r3
 8007472:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007476:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80075b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800747a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800747e:	4b48      	ldr	r3, [pc, #288]	; (80075a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007482:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007486:	ee07 3a90 	vmov	s15, r3
 800748a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800748e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007492:	eddf 5a45 	vldr	s11, [pc, #276]	; 80075a8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007496:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800749a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800749e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80074ae:	e021      	b.n	80074f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80074b0:	697b      	ldr	r3, [r7, #20]
 80074b2:	ee07 3a90 	vmov	s15, r3
 80074b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074ba:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80075b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80074be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074c2:	4b37      	ldr	r3, [pc, #220]	; (80075a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80074c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074ca:	ee07 3a90 	vmov	s15, r3
 80074ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80074d6:	eddf 5a34 	vldr	s11, [pc, #208]	; 80075a8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80074da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80074f2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80074f4:	4b2a      	ldr	r3, [pc, #168]	; (80075a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80074f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074f8:	0a5b      	lsrs	r3, r3, #9
 80074fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074fe:	ee07 3a90 	vmov	s15, r3
 8007502:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007506:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800750a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800750e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007512:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007516:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800751a:	ee17 2a90 	vmov	r2, s15
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8007522:	4b1f      	ldr	r3, [pc, #124]	; (80075a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007526:	0c1b      	lsrs	r3, r3, #16
 8007528:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800752c:	ee07 3a90 	vmov	s15, r3
 8007530:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007534:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007538:	ee37 7a87 	vadd.f32	s14, s15, s14
 800753c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007540:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007544:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007548:	ee17 2a90 	vmov	r2, s15
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007550:	4b13      	ldr	r3, [pc, #76]	; (80075a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007554:	0e1b      	lsrs	r3, r3, #24
 8007556:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800755a:	ee07 3a90 	vmov	s15, r3
 800755e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007562:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007566:	ee37 7a87 	vadd.f32	s14, s15, s14
 800756a:	edd7 6a07 	vldr	s13, [r7, #28]
 800756e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007572:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007576:	ee17 2a90 	vmov	r2, s15
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800757e:	e008      	b.n	8007592 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2200      	movs	r2, #0
 8007584:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2200      	movs	r2, #0
 800758a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2200      	movs	r2, #0
 8007590:	609a      	str	r2, [r3, #8]
}
 8007592:	bf00      	nop
 8007594:	3724      	adds	r7, #36	; 0x24
 8007596:	46bd      	mov	sp, r7
 8007598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759c:	4770      	bx	lr
 800759e:	bf00      	nop
 80075a0:	58024400 	.word	0x58024400
 80075a4:	03d09000 	.word	0x03d09000
 80075a8:	46000000 	.word	0x46000000
 80075ac:	4c742400 	.word	0x4c742400
 80075b0:	4a742400 	.word	0x4a742400
 80075b4:	4bbebc20 	.word	0x4bbebc20

080075b8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80075b8:	b480      	push	{r7}
 80075ba:	b089      	sub	sp, #36	; 0x24
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80075c0:	4ba1      	ldr	r3, [pc, #644]	; (8007848 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075c4:	f003 0303 	and.w	r3, r3, #3
 80075c8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80075ca:	4b9f      	ldr	r3, [pc, #636]	; (8007848 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075ce:	0d1b      	lsrs	r3, r3, #20
 80075d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80075d4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80075d6:	4b9c      	ldr	r3, [pc, #624]	; (8007848 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075da:	0a1b      	lsrs	r3, r3, #8
 80075dc:	f003 0301 	and.w	r3, r3, #1
 80075e0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80075e2:	4b99      	ldr	r3, [pc, #612]	; (8007848 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075e6:	08db      	lsrs	r3, r3, #3
 80075e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80075ec:	693a      	ldr	r2, [r7, #16]
 80075ee:	fb02 f303 	mul.w	r3, r2, r3
 80075f2:	ee07 3a90 	vmov	s15, r3
 80075f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075fa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80075fe:	697b      	ldr	r3, [r7, #20]
 8007600:	2b00      	cmp	r3, #0
 8007602:	f000 8111 	beq.w	8007828 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007606:	69bb      	ldr	r3, [r7, #24]
 8007608:	2b02      	cmp	r3, #2
 800760a:	f000 8083 	beq.w	8007714 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800760e:	69bb      	ldr	r3, [r7, #24]
 8007610:	2b02      	cmp	r3, #2
 8007612:	f200 80a1 	bhi.w	8007758 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007616:	69bb      	ldr	r3, [r7, #24]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d003      	beq.n	8007624 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800761c:	69bb      	ldr	r3, [r7, #24]
 800761e:	2b01      	cmp	r3, #1
 8007620:	d056      	beq.n	80076d0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007622:	e099      	b.n	8007758 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007624:	4b88      	ldr	r3, [pc, #544]	; (8007848 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f003 0320 	and.w	r3, r3, #32
 800762c:	2b00      	cmp	r3, #0
 800762e:	d02d      	beq.n	800768c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007630:	4b85      	ldr	r3, [pc, #532]	; (8007848 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	08db      	lsrs	r3, r3, #3
 8007636:	f003 0303 	and.w	r3, r3, #3
 800763a:	4a84      	ldr	r2, [pc, #528]	; (800784c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800763c:	fa22 f303 	lsr.w	r3, r2, r3
 8007640:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007642:	68bb      	ldr	r3, [r7, #8]
 8007644:	ee07 3a90 	vmov	s15, r3
 8007648:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800764c:	697b      	ldr	r3, [r7, #20]
 800764e:	ee07 3a90 	vmov	s15, r3
 8007652:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007656:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800765a:	4b7b      	ldr	r3, [pc, #492]	; (8007848 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800765c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800765e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007662:	ee07 3a90 	vmov	s15, r3
 8007666:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800766a:	ed97 6a03 	vldr	s12, [r7, #12]
 800766e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007850 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007672:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007676:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800767a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800767e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007682:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007686:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800768a:	e087      	b.n	800779c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800768c:	697b      	ldr	r3, [r7, #20]
 800768e:	ee07 3a90 	vmov	s15, r3
 8007692:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007696:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007854 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800769a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800769e:	4b6a      	ldr	r3, [pc, #424]	; (8007848 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80076a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076a6:	ee07 3a90 	vmov	s15, r3
 80076aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80076b2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007850 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80076b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80076c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80076ce:	e065      	b.n	800779c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80076d0:	697b      	ldr	r3, [r7, #20]
 80076d2:	ee07 3a90 	vmov	s15, r3
 80076d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076da:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007858 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80076de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076e2:	4b59      	ldr	r3, [pc, #356]	; (8007848 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80076e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076ea:	ee07 3a90 	vmov	s15, r3
 80076ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80076f6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007850 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80076fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007702:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007706:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800770a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800770e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007712:	e043      	b.n	800779c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007714:	697b      	ldr	r3, [r7, #20]
 8007716:	ee07 3a90 	vmov	s15, r3
 800771a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800771e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800785c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007722:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007726:	4b48      	ldr	r3, [pc, #288]	; (8007848 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800772a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800772e:	ee07 3a90 	vmov	s15, r3
 8007732:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007736:	ed97 6a03 	vldr	s12, [r7, #12]
 800773a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007850 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800773e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007742:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007746:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800774a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800774e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007752:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007756:	e021      	b.n	800779c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007758:	697b      	ldr	r3, [r7, #20]
 800775a:	ee07 3a90 	vmov	s15, r3
 800775e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007762:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007858 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007766:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800776a:	4b37      	ldr	r3, [pc, #220]	; (8007848 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800776c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800776e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007772:	ee07 3a90 	vmov	s15, r3
 8007776:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800777a:	ed97 6a03 	vldr	s12, [r7, #12]
 800777e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007850 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007782:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007786:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800778a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800778e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007792:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007796:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800779a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800779c:	4b2a      	ldr	r3, [pc, #168]	; (8007848 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800779e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077a0:	0a5b      	lsrs	r3, r3, #9
 80077a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077a6:	ee07 3a90 	vmov	s15, r3
 80077aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80077b2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80077b6:	edd7 6a07 	vldr	s13, [r7, #28]
 80077ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80077be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80077c2:	ee17 2a90 	vmov	r2, s15
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80077ca:	4b1f      	ldr	r3, [pc, #124]	; (8007848 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80077cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ce:	0c1b      	lsrs	r3, r3, #16
 80077d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077d4:	ee07 3a90 	vmov	s15, r3
 80077d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80077e0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80077e4:	edd7 6a07 	vldr	s13, [r7, #28]
 80077e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80077ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80077f0:	ee17 2a90 	vmov	r2, s15
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80077f8:	4b13      	ldr	r3, [pc, #76]	; (8007848 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80077fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077fc:	0e1b      	lsrs	r3, r3, #24
 80077fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007802:	ee07 3a90 	vmov	s15, r3
 8007806:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800780a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800780e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007812:	edd7 6a07 	vldr	s13, [r7, #28]
 8007816:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800781a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800781e:	ee17 2a90 	vmov	r2, s15
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007826:	e008      	b.n	800783a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2200      	movs	r2, #0
 800782c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2200      	movs	r2, #0
 8007832:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2200      	movs	r2, #0
 8007838:	609a      	str	r2, [r3, #8]
}
 800783a:	bf00      	nop
 800783c:	3724      	adds	r7, #36	; 0x24
 800783e:	46bd      	mov	sp, r7
 8007840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007844:	4770      	bx	lr
 8007846:	bf00      	nop
 8007848:	58024400 	.word	0x58024400
 800784c:	03d09000 	.word	0x03d09000
 8007850:	46000000 	.word	0x46000000
 8007854:	4c742400 	.word	0x4c742400
 8007858:	4a742400 	.word	0x4a742400
 800785c:	4bbebc20 	.word	0x4bbebc20

08007860 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8007860:	b480      	push	{r7}
 8007862:	b089      	sub	sp, #36	; 0x24
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007868:	4ba0      	ldr	r3, [pc, #640]	; (8007aec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800786a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800786c:	f003 0303 	and.w	r3, r3, #3
 8007870:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8007872:	4b9e      	ldr	r3, [pc, #632]	; (8007aec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007876:	091b      	lsrs	r3, r3, #4
 8007878:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800787c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800787e:	4b9b      	ldr	r3, [pc, #620]	; (8007aec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007882:	f003 0301 	and.w	r3, r3, #1
 8007886:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007888:	4b98      	ldr	r3, [pc, #608]	; (8007aec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800788a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800788c:	08db      	lsrs	r3, r3, #3
 800788e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007892:	693a      	ldr	r2, [r7, #16]
 8007894:	fb02 f303 	mul.w	r3, r2, r3
 8007898:	ee07 3a90 	vmov	s15, r3
 800789c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078a0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80078a4:	697b      	ldr	r3, [r7, #20]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	f000 8111 	beq.w	8007ace <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80078ac:	69bb      	ldr	r3, [r7, #24]
 80078ae:	2b02      	cmp	r3, #2
 80078b0:	f000 8083 	beq.w	80079ba <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80078b4:	69bb      	ldr	r3, [r7, #24]
 80078b6:	2b02      	cmp	r3, #2
 80078b8:	f200 80a1 	bhi.w	80079fe <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80078bc:	69bb      	ldr	r3, [r7, #24]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d003      	beq.n	80078ca <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80078c2:	69bb      	ldr	r3, [r7, #24]
 80078c4:	2b01      	cmp	r3, #1
 80078c6:	d056      	beq.n	8007976 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80078c8:	e099      	b.n	80079fe <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80078ca:	4b88      	ldr	r3, [pc, #544]	; (8007aec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f003 0320 	and.w	r3, r3, #32
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d02d      	beq.n	8007932 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80078d6:	4b85      	ldr	r3, [pc, #532]	; (8007aec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	08db      	lsrs	r3, r3, #3
 80078dc:	f003 0303 	and.w	r3, r3, #3
 80078e0:	4a83      	ldr	r2, [pc, #524]	; (8007af0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80078e2:	fa22 f303 	lsr.w	r3, r2, r3
 80078e6:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80078e8:	68bb      	ldr	r3, [r7, #8]
 80078ea:	ee07 3a90 	vmov	s15, r3
 80078ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078f2:	697b      	ldr	r3, [r7, #20]
 80078f4:	ee07 3a90 	vmov	s15, r3
 80078f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007900:	4b7a      	ldr	r3, [pc, #488]	; (8007aec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007904:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007908:	ee07 3a90 	vmov	s15, r3
 800790c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007910:	ed97 6a03 	vldr	s12, [r7, #12]
 8007914:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007af4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007918:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800791c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007920:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007924:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007928:	ee67 7a27 	vmul.f32	s15, s14, s15
 800792c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007930:	e087      	b.n	8007a42 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007932:	697b      	ldr	r3, [r7, #20]
 8007934:	ee07 3a90 	vmov	s15, r3
 8007938:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800793c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8007af8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007940:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007944:	4b69      	ldr	r3, [pc, #420]	; (8007aec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007948:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800794c:	ee07 3a90 	vmov	s15, r3
 8007950:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007954:	ed97 6a03 	vldr	s12, [r7, #12]
 8007958:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007af4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800795c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007960:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007964:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007968:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800796c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007970:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007974:	e065      	b.n	8007a42 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007976:	697b      	ldr	r3, [r7, #20]
 8007978:	ee07 3a90 	vmov	s15, r3
 800797c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007980:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8007afc <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8007984:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007988:	4b58      	ldr	r3, [pc, #352]	; (8007aec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800798a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800798c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007990:	ee07 3a90 	vmov	s15, r3
 8007994:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007998:	ed97 6a03 	vldr	s12, [r7, #12]
 800799c:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007af4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80079a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80079ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079b4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80079b8:	e043      	b.n	8007a42 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80079ba:	697b      	ldr	r3, [r7, #20]
 80079bc:	ee07 3a90 	vmov	s15, r3
 80079c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079c4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8007b00 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80079c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079cc:	4b47      	ldr	r3, [pc, #284]	; (8007aec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80079ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079d4:	ee07 3a90 	vmov	s15, r3
 80079d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079dc:	ed97 6a03 	vldr	s12, [r7, #12]
 80079e0:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007af4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80079e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80079f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079f8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80079fc:	e021      	b.n	8007a42 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80079fe:	697b      	ldr	r3, [r7, #20]
 8007a00:	ee07 3a90 	vmov	s15, r3
 8007a04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a08:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8007af8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007a0c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a10:	4b36      	ldr	r3, [pc, #216]	; (8007aec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a18:	ee07 3a90 	vmov	s15, r3
 8007a1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a20:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a24:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007af4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007a28:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a2c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a30:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a34:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a3c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007a40:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8007a42:	4b2a      	ldr	r3, [pc, #168]	; (8007aec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a46:	0a5b      	lsrs	r3, r3, #9
 8007a48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a4c:	ee07 3a90 	vmov	s15, r3
 8007a50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a54:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007a58:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007a5c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007a60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a68:	ee17 2a90 	vmov	r2, s15
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8007a70:	4b1e      	ldr	r3, [pc, #120]	; (8007aec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a74:	0c1b      	lsrs	r3, r3, #16
 8007a76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a7a:	ee07 3a90 	vmov	s15, r3
 8007a7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a82:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007a86:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007a8a:	edd7 6a07 	vldr	s13, [r7, #28]
 8007a8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a96:	ee17 2a90 	vmov	r2, s15
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8007a9e:	4b13      	ldr	r3, [pc, #76]	; (8007aec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007aa2:	0e1b      	lsrs	r3, r3, #24
 8007aa4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007aa8:	ee07 3a90 	vmov	s15, r3
 8007aac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ab0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007ab4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007ab8:	edd7 6a07 	vldr	s13, [r7, #28]
 8007abc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ac0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ac4:	ee17 2a90 	vmov	r2, s15
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007acc:	e008      	b.n	8007ae0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2200      	movs	r2, #0
 8007ade:	609a      	str	r2, [r3, #8]
}
 8007ae0:	bf00      	nop
 8007ae2:	3724      	adds	r7, #36	; 0x24
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aea:	4770      	bx	lr
 8007aec:	58024400 	.word	0x58024400
 8007af0:	03d09000 	.word	0x03d09000
 8007af4:	46000000 	.word	0x46000000
 8007af8:	4c742400 	.word	0x4c742400
 8007afc:	4a742400 	.word	0x4a742400
 8007b00:	4bbebc20 	.word	0x4bbebc20

08007b04 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b084      	sub	sp, #16
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
 8007b0c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007b0e:	2300      	movs	r3, #0
 8007b10:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007b12:	4b53      	ldr	r3, [pc, #332]	; (8007c60 <RCCEx_PLL2_Config+0x15c>)
 8007b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b16:	f003 0303 	and.w	r3, r3, #3
 8007b1a:	2b03      	cmp	r3, #3
 8007b1c:	d101      	bne.n	8007b22 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007b1e:	2301      	movs	r3, #1
 8007b20:	e099      	b.n	8007c56 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007b22:	4b4f      	ldr	r3, [pc, #316]	; (8007c60 <RCCEx_PLL2_Config+0x15c>)
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	4a4e      	ldr	r2, [pc, #312]	; (8007c60 <RCCEx_PLL2_Config+0x15c>)
 8007b28:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007b2c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b2e:	f7f9 fec7 	bl	80018c0 <HAL_GetTick>
 8007b32:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007b34:	e008      	b.n	8007b48 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007b36:	f7f9 fec3 	bl	80018c0 <HAL_GetTick>
 8007b3a:	4602      	mov	r2, r0
 8007b3c:	68bb      	ldr	r3, [r7, #8]
 8007b3e:	1ad3      	subs	r3, r2, r3
 8007b40:	2b02      	cmp	r3, #2
 8007b42:	d901      	bls.n	8007b48 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007b44:	2303      	movs	r3, #3
 8007b46:	e086      	b.n	8007c56 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007b48:	4b45      	ldr	r3, [pc, #276]	; (8007c60 <RCCEx_PLL2_Config+0x15c>)
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d1f0      	bne.n	8007b36 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007b54:	4b42      	ldr	r3, [pc, #264]	; (8007c60 <RCCEx_PLL2_Config+0x15c>)
 8007b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b58:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	031b      	lsls	r3, r3, #12
 8007b62:	493f      	ldr	r1, [pc, #252]	; (8007c60 <RCCEx_PLL2_Config+0x15c>)
 8007b64:	4313      	orrs	r3, r2
 8007b66:	628b      	str	r3, [r1, #40]	; 0x28
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	685b      	ldr	r3, [r3, #4]
 8007b6c:	3b01      	subs	r3, #1
 8007b6e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	689b      	ldr	r3, [r3, #8]
 8007b76:	3b01      	subs	r3, #1
 8007b78:	025b      	lsls	r3, r3, #9
 8007b7a:	b29b      	uxth	r3, r3
 8007b7c:	431a      	orrs	r2, r3
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	68db      	ldr	r3, [r3, #12]
 8007b82:	3b01      	subs	r3, #1
 8007b84:	041b      	lsls	r3, r3, #16
 8007b86:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007b8a:	431a      	orrs	r2, r3
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	691b      	ldr	r3, [r3, #16]
 8007b90:	3b01      	subs	r3, #1
 8007b92:	061b      	lsls	r3, r3, #24
 8007b94:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007b98:	4931      	ldr	r1, [pc, #196]	; (8007c60 <RCCEx_PLL2_Config+0x15c>)
 8007b9a:	4313      	orrs	r3, r2
 8007b9c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007b9e:	4b30      	ldr	r3, [pc, #192]	; (8007c60 <RCCEx_PLL2_Config+0x15c>)
 8007ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ba2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	695b      	ldr	r3, [r3, #20]
 8007baa:	492d      	ldr	r1, [pc, #180]	; (8007c60 <RCCEx_PLL2_Config+0x15c>)
 8007bac:	4313      	orrs	r3, r2
 8007bae:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007bb0:	4b2b      	ldr	r3, [pc, #172]	; (8007c60 <RCCEx_PLL2_Config+0x15c>)
 8007bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bb4:	f023 0220 	bic.w	r2, r3, #32
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	699b      	ldr	r3, [r3, #24]
 8007bbc:	4928      	ldr	r1, [pc, #160]	; (8007c60 <RCCEx_PLL2_Config+0x15c>)
 8007bbe:	4313      	orrs	r3, r2
 8007bc0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007bc2:	4b27      	ldr	r3, [pc, #156]	; (8007c60 <RCCEx_PLL2_Config+0x15c>)
 8007bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bc6:	4a26      	ldr	r2, [pc, #152]	; (8007c60 <RCCEx_PLL2_Config+0x15c>)
 8007bc8:	f023 0310 	bic.w	r3, r3, #16
 8007bcc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007bce:	4b24      	ldr	r3, [pc, #144]	; (8007c60 <RCCEx_PLL2_Config+0x15c>)
 8007bd0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007bd2:	4b24      	ldr	r3, [pc, #144]	; (8007c64 <RCCEx_PLL2_Config+0x160>)
 8007bd4:	4013      	ands	r3, r2
 8007bd6:	687a      	ldr	r2, [r7, #4]
 8007bd8:	69d2      	ldr	r2, [r2, #28]
 8007bda:	00d2      	lsls	r2, r2, #3
 8007bdc:	4920      	ldr	r1, [pc, #128]	; (8007c60 <RCCEx_PLL2_Config+0x15c>)
 8007bde:	4313      	orrs	r3, r2
 8007be0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007be2:	4b1f      	ldr	r3, [pc, #124]	; (8007c60 <RCCEx_PLL2_Config+0x15c>)
 8007be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007be6:	4a1e      	ldr	r2, [pc, #120]	; (8007c60 <RCCEx_PLL2_Config+0x15c>)
 8007be8:	f043 0310 	orr.w	r3, r3, #16
 8007bec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d106      	bne.n	8007c02 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007bf4:	4b1a      	ldr	r3, [pc, #104]	; (8007c60 <RCCEx_PLL2_Config+0x15c>)
 8007bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bf8:	4a19      	ldr	r2, [pc, #100]	; (8007c60 <RCCEx_PLL2_Config+0x15c>)
 8007bfa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007bfe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007c00:	e00f      	b.n	8007c22 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	2b01      	cmp	r3, #1
 8007c06:	d106      	bne.n	8007c16 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007c08:	4b15      	ldr	r3, [pc, #84]	; (8007c60 <RCCEx_PLL2_Config+0x15c>)
 8007c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c0c:	4a14      	ldr	r2, [pc, #80]	; (8007c60 <RCCEx_PLL2_Config+0x15c>)
 8007c0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007c12:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007c14:	e005      	b.n	8007c22 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007c16:	4b12      	ldr	r3, [pc, #72]	; (8007c60 <RCCEx_PLL2_Config+0x15c>)
 8007c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c1a:	4a11      	ldr	r2, [pc, #68]	; (8007c60 <RCCEx_PLL2_Config+0x15c>)
 8007c1c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007c20:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007c22:	4b0f      	ldr	r3, [pc, #60]	; (8007c60 <RCCEx_PLL2_Config+0x15c>)
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	4a0e      	ldr	r2, [pc, #56]	; (8007c60 <RCCEx_PLL2_Config+0x15c>)
 8007c28:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007c2c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c2e:	f7f9 fe47 	bl	80018c0 <HAL_GetTick>
 8007c32:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007c34:	e008      	b.n	8007c48 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007c36:	f7f9 fe43 	bl	80018c0 <HAL_GetTick>
 8007c3a:	4602      	mov	r2, r0
 8007c3c:	68bb      	ldr	r3, [r7, #8]
 8007c3e:	1ad3      	subs	r3, r2, r3
 8007c40:	2b02      	cmp	r3, #2
 8007c42:	d901      	bls.n	8007c48 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007c44:	2303      	movs	r3, #3
 8007c46:	e006      	b.n	8007c56 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007c48:	4b05      	ldr	r3, [pc, #20]	; (8007c60 <RCCEx_PLL2_Config+0x15c>)
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d0f0      	beq.n	8007c36 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007c54:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c56:	4618      	mov	r0, r3
 8007c58:	3710      	adds	r7, #16
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	bd80      	pop	{r7, pc}
 8007c5e:	bf00      	nop
 8007c60:	58024400 	.word	0x58024400
 8007c64:	ffff0007 	.word	0xffff0007

08007c68 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b084      	sub	sp, #16
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
 8007c70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007c72:	2300      	movs	r3, #0
 8007c74:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007c76:	4b53      	ldr	r3, [pc, #332]	; (8007dc4 <RCCEx_PLL3_Config+0x15c>)
 8007c78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c7a:	f003 0303 	and.w	r3, r3, #3
 8007c7e:	2b03      	cmp	r3, #3
 8007c80:	d101      	bne.n	8007c86 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007c82:	2301      	movs	r3, #1
 8007c84:	e099      	b.n	8007dba <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007c86:	4b4f      	ldr	r3, [pc, #316]	; (8007dc4 <RCCEx_PLL3_Config+0x15c>)
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	4a4e      	ldr	r2, [pc, #312]	; (8007dc4 <RCCEx_PLL3_Config+0x15c>)
 8007c8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007c90:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c92:	f7f9 fe15 	bl	80018c0 <HAL_GetTick>
 8007c96:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007c98:	e008      	b.n	8007cac <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007c9a:	f7f9 fe11 	bl	80018c0 <HAL_GetTick>
 8007c9e:	4602      	mov	r2, r0
 8007ca0:	68bb      	ldr	r3, [r7, #8]
 8007ca2:	1ad3      	subs	r3, r2, r3
 8007ca4:	2b02      	cmp	r3, #2
 8007ca6:	d901      	bls.n	8007cac <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007ca8:	2303      	movs	r3, #3
 8007caa:	e086      	b.n	8007dba <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007cac:	4b45      	ldr	r3, [pc, #276]	; (8007dc4 <RCCEx_PLL3_Config+0x15c>)
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d1f0      	bne.n	8007c9a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007cb8:	4b42      	ldr	r3, [pc, #264]	; (8007dc4 <RCCEx_PLL3_Config+0x15c>)
 8007cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cbc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	051b      	lsls	r3, r3, #20
 8007cc6:	493f      	ldr	r1, [pc, #252]	; (8007dc4 <RCCEx_PLL3_Config+0x15c>)
 8007cc8:	4313      	orrs	r3, r2
 8007cca:	628b      	str	r3, [r1, #40]	; 0x28
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	685b      	ldr	r3, [r3, #4]
 8007cd0:	3b01      	subs	r3, #1
 8007cd2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	689b      	ldr	r3, [r3, #8]
 8007cda:	3b01      	subs	r3, #1
 8007cdc:	025b      	lsls	r3, r3, #9
 8007cde:	b29b      	uxth	r3, r3
 8007ce0:	431a      	orrs	r2, r3
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	68db      	ldr	r3, [r3, #12]
 8007ce6:	3b01      	subs	r3, #1
 8007ce8:	041b      	lsls	r3, r3, #16
 8007cea:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007cee:	431a      	orrs	r2, r3
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	691b      	ldr	r3, [r3, #16]
 8007cf4:	3b01      	subs	r3, #1
 8007cf6:	061b      	lsls	r3, r3, #24
 8007cf8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007cfc:	4931      	ldr	r1, [pc, #196]	; (8007dc4 <RCCEx_PLL3_Config+0x15c>)
 8007cfe:	4313      	orrs	r3, r2
 8007d00:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007d02:	4b30      	ldr	r3, [pc, #192]	; (8007dc4 <RCCEx_PLL3_Config+0x15c>)
 8007d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d06:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	695b      	ldr	r3, [r3, #20]
 8007d0e:	492d      	ldr	r1, [pc, #180]	; (8007dc4 <RCCEx_PLL3_Config+0x15c>)
 8007d10:	4313      	orrs	r3, r2
 8007d12:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007d14:	4b2b      	ldr	r3, [pc, #172]	; (8007dc4 <RCCEx_PLL3_Config+0x15c>)
 8007d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d18:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	699b      	ldr	r3, [r3, #24]
 8007d20:	4928      	ldr	r1, [pc, #160]	; (8007dc4 <RCCEx_PLL3_Config+0x15c>)
 8007d22:	4313      	orrs	r3, r2
 8007d24:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007d26:	4b27      	ldr	r3, [pc, #156]	; (8007dc4 <RCCEx_PLL3_Config+0x15c>)
 8007d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d2a:	4a26      	ldr	r2, [pc, #152]	; (8007dc4 <RCCEx_PLL3_Config+0x15c>)
 8007d2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007d30:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007d32:	4b24      	ldr	r3, [pc, #144]	; (8007dc4 <RCCEx_PLL3_Config+0x15c>)
 8007d34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007d36:	4b24      	ldr	r3, [pc, #144]	; (8007dc8 <RCCEx_PLL3_Config+0x160>)
 8007d38:	4013      	ands	r3, r2
 8007d3a:	687a      	ldr	r2, [r7, #4]
 8007d3c:	69d2      	ldr	r2, [r2, #28]
 8007d3e:	00d2      	lsls	r2, r2, #3
 8007d40:	4920      	ldr	r1, [pc, #128]	; (8007dc4 <RCCEx_PLL3_Config+0x15c>)
 8007d42:	4313      	orrs	r3, r2
 8007d44:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007d46:	4b1f      	ldr	r3, [pc, #124]	; (8007dc4 <RCCEx_PLL3_Config+0x15c>)
 8007d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d4a:	4a1e      	ldr	r2, [pc, #120]	; (8007dc4 <RCCEx_PLL3_Config+0x15c>)
 8007d4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d50:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d106      	bne.n	8007d66 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007d58:	4b1a      	ldr	r3, [pc, #104]	; (8007dc4 <RCCEx_PLL3_Config+0x15c>)
 8007d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d5c:	4a19      	ldr	r2, [pc, #100]	; (8007dc4 <RCCEx_PLL3_Config+0x15c>)
 8007d5e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007d62:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007d64:	e00f      	b.n	8007d86 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	2b01      	cmp	r3, #1
 8007d6a:	d106      	bne.n	8007d7a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007d6c:	4b15      	ldr	r3, [pc, #84]	; (8007dc4 <RCCEx_PLL3_Config+0x15c>)
 8007d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d70:	4a14      	ldr	r2, [pc, #80]	; (8007dc4 <RCCEx_PLL3_Config+0x15c>)
 8007d72:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007d76:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007d78:	e005      	b.n	8007d86 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007d7a:	4b12      	ldr	r3, [pc, #72]	; (8007dc4 <RCCEx_PLL3_Config+0x15c>)
 8007d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d7e:	4a11      	ldr	r2, [pc, #68]	; (8007dc4 <RCCEx_PLL3_Config+0x15c>)
 8007d80:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007d84:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007d86:	4b0f      	ldr	r3, [pc, #60]	; (8007dc4 <RCCEx_PLL3_Config+0x15c>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	4a0e      	ldr	r2, [pc, #56]	; (8007dc4 <RCCEx_PLL3_Config+0x15c>)
 8007d8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d90:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d92:	f7f9 fd95 	bl	80018c0 <HAL_GetTick>
 8007d96:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007d98:	e008      	b.n	8007dac <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007d9a:	f7f9 fd91 	bl	80018c0 <HAL_GetTick>
 8007d9e:	4602      	mov	r2, r0
 8007da0:	68bb      	ldr	r3, [r7, #8]
 8007da2:	1ad3      	subs	r3, r2, r3
 8007da4:	2b02      	cmp	r3, #2
 8007da6:	d901      	bls.n	8007dac <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007da8:	2303      	movs	r3, #3
 8007daa:	e006      	b.n	8007dba <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007dac:	4b05      	ldr	r3, [pc, #20]	; (8007dc4 <RCCEx_PLL3_Config+0x15c>)
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d0f0      	beq.n	8007d9a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007db8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dba:	4618      	mov	r0, r3
 8007dbc:	3710      	adds	r7, #16
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	bd80      	pop	{r7, pc}
 8007dc2:	bf00      	nop
 8007dc4:	58024400 	.word	0x58024400
 8007dc8:	ffff0007 	.word	0xffff0007

08007dcc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b082      	sub	sp, #8
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d101      	bne.n	8007dde <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007dda:	2301      	movs	r3, #1
 8007ddc:	e049      	b.n	8007e72 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007de4:	b2db      	uxtb	r3, r3
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d106      	bne.n	8007df8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	2200      	movs	r2, #0
 8007dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007df2:	6878      	ldr	r0, [r7, #4]
 8007df4:	f7f9 fba0 	bl	8001538 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2202      	movs	r2, #2
 8007dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681a      	ldr	r2, [r3, #0]
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	3304      	adds	r3, #4
 8007e08:	4619      	mov	r1, r3
 8007e0a:	4610      	mov	r0, r2
 8007e0c:	f000 f8a6 	bl	8007f5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2201      	movs	r2, #1
 8007e14:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2201      	movs	r2, #1
 8007e1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2201      	movs	r2, #1
 8007e24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2201      	movs	r2, #1
 8007e2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2201      	movs	r2, #1
 8007e34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2201      	movs	r2, #1
 8007e3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2201      	movs	r2, #1
 8007e44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2201      	movs	r2, #1
 8007e4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2201      	movs	r2, #1
 8007e54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2201      	movs	r2, #1
 8007e5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2201      	movs	r2, #1
 8007e64:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2201      	movs	r2, #1
 8007e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007e70:	2300      	movs	r3, #0
}
 8007e72:	4618      	mov	r0, r3
 8007e74:	3708      	adds	r7, #8
 8007e76:	46bd      	mov	sp, r7
 8007e78:	bd80      	pop	{r7, pc}
	...

08007e7c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007e7c:	b480      	push	{r7}
 8007e7e:	b085      	sub	sp, #20
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e8a:	b2db      	uxtb	r3, r3
 8007e8c:	2b01      	cmp	r3, #1
 8007e8e:	d001      	beq.n	8007e94 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007e90:	2301      	movs	r3, #1
 8007e92:	e04c      	b.n	8007f2e <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2202      	movs	r2, #2
 8007e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	4a26      	ldr	r2, [pc, #152]	; (8007f3c <HAL_TIM_Base_Start+0xc0>)
 8007ea2:	4293      	cmp	r3, r2
 8007ea4:	d022      	beq.n	8007eec <HAL_TIM_Base_Start+0x70>
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007eae:	d01d      	beq.n	8007eec <HAL_TIM_Base_Start+0x70>
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	4a22      	ldr	r2, [pc, #136]	; (8007f40 <HAL_TIM_Base_Start+0xc4>)
 8007eb6:	4293      	cmp	r3, r2
 8007eb8:	d018      	beq.n	8007eec <HAL_TIM_Base_Start+0x70>
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	4a21      	ldr	r2, [pc, #132]	; (8007f44 <HAL_TIM_Base_Start+0xc8>)
 8007ec0:	4293      	cmp	r3, r2
 8007ec2:	d013      	beq.n	8007eec <HAL_TIM_Base_Start+0x70>
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	4a1f      	ldr	r2, [pc, #124]	; (8007f48 <HAL_TIM_Base_Start+0xcc>)
 8007eca:	4293      	cmp	r3, r2
 8007ecc:	d00e      	beq.n	8007eec <HAL_TIM_Base_Start+0x70>
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	4a1e      	ldr	r2, [pc, #120]	; (8007f4c <HAL_TIM_Base_Start+0xd0>)
 8007ed4:	4293      	cmp	r3, r2
 8007ed6:	d009      	beq.n	8007eec <HAL_TIM_Base_Start+0x70>
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	4a1c      	ldr	r2, [pc, #112]	; (8007f50 <HAL_TIM_Base_Start+0xd4>)
 8007ede:	4293      	cmp	r3, r2
 8007ee0:	d004      	beq.n	8007eec <HAL_TIM_Base_Start+0x70>
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	4a1b      	ldr	r2, [pc, #108]	; (8007f54 <HAL_TIM_Base_Start+0xd8>)
 8007ee8:	4293      	cmp	r3, r2
 8007eea:	d115      	bne.n	8007f18 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	689a      	ldr	r2, [r3, #8]
 8007ef2:	4b19      	ldr	r3, [pc, #100]	; (8007f58 <HAL_TIM_Base_Start+0xdc>)
 8007ef4:	4013      	ands	r3, r2
 8007ef6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	2b06      	cmp	r3, #6
 8007efc:	d015      	beq.n	8007f2a <HAL_TIM_Base_Start+0xae>
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f04:	d011      	beq.n	8007f2a <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	681a      	ldr	r2, [r3, #0]
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	f042 0201 	orr.w	r2, r2, #1
 8007f14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f16:	e008      	b.n	8007f2a <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	681a      	ldr	r2, [r3, #0]
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	f042 0201 	orr.w	r2, r2, #1
 8007f26:	601a      	str	r2, [r3, #0]
 8007f28:	e000      	b.n	8007f2c <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f2a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007f2c:	2300      	movs	r3, #0
}
 8007f2e:	4618      	mov	r0, r3
 8007f30:	3714      	adds	r7, #20
 8007f32:	46bd      	mov	sp, r7
 8007f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f38:	4770      	bx	lr
 8007f3a:	bf00      	nop
 8007f3c:	40010000 	.word	0x40010000
 8007f40:	40000400 	.word	0x40000400
 8007f44:	40000800 	.word	0x40000800
 8007f48:	40000c00 	.word	0x40000c00
 8007f4c:	40010400 	.word	0x40010400
 8007f50:	40001800 	.word	0x40001800
 8007f54:	40014000 	.word	0x40014000
 8007f58:	00010007 	.word	0x00010007

08007f5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007f5c:	b480      	push	{r7}
 8007f5e:	b085      	sub	sp, #20
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
 8007f64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	4a40      	ldr	r2, [pc, #256]	; (8008070 <TIM_Base_SetConfig+0x114>)
 8007f70:	4293      	cmp	r3, r2
 8007f72:	d013      	beq.n	8007f9c <TIM_Base_SetConfig+0x40>
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f7a:	d00f      	beq.n	8007f9c <TIM_Base_SetConfig+0x40>
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	4a3d      	ldr	r2, [pc, #244]	; (8008074 <TIM_Base_SetConfig+0x118>)
 8007f80:	4293      	cmp	r3, r2
 8007f82:	d00b      	beq.n	8007f9c <TIM_Base_SetConfig+0x40>
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	4a3c      	ldr	r2, [pc, #240]	; (8008078 <TIM_Base_SetConfig+0x11c>)
 8007f88:	4293      	cmp	r3, r2
 8007f8a:	d007      	beq.n	8007f9c <TIM_Base_SetConfig+0x40>
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	4a3b      	ldr	r2, [pc, #236]	; (800807c <TIM_Base_SetConfig+0x120>)
 8007f90:	4293      	cmp	r3, r2
 8007f92:	d003      	beq.n	8007f9c <TIM_Base_SetConfig+0x40>
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	4a3a      	ldr	r2, [pc, #232]	; (8008080 <TIM_Base_SetConfig+0x124>)
 8007f98:	4293      	cmp	r3, r2
 8007f9a:	d108      	bne.n	8007fae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fa2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	685b      	ldr	r3, [r3, #4]
 8007fa8:	68fa      	ldr	r2, [r7, #12]
 8007faa:	4313      	orrs	r3, r2
 8007fac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	4a2f      	ldr	r2, [pc, #188]	; (8008070 <TIM_Base_SetConfig+0x114>)
 8007fb2:	4293      	cmp	r3, r2
 8007fb4:	d01f      	beq.n	8007ff6 <TIM_Base_SetConfig+0x9a>
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fbc:	d01b      	beq.n	8007ff6 <TIM_Base_SetConfig+0x9a>
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	4a2c      	ldr	r2, [pc, #176]	; (8008074 <TIM_Base_SetConfig+0x118>)
 8007fc2:	4293      	cmp	r3, r2
 8007fc4:	d017      	beq.n	8007ff6 <TIM_Base_SetConfig+0x9a>
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	4a2b      	ldr	r2, [pc, #172]	; (8008078 <TIM_Base_SetConfig+0x11c>)
 8007fca:	4293      	cmp	r3, r2
 8007fcc:	d013      	beq.n	8007ff6 <TIM_Base_SetConfig+0x9a>
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	4a2a      	ldr	r2, [pc, #168]	; (800807c <TIM_Base_SetConfig+0x120>)
 8007fd2:	4293      	cmp	r3, r2
 8007fd4:	d00f      	beq.n	8007ff6 <TIM_Base_SetConfig+0x9a>
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	4a29      	ldr	r2, [pc, #164]	; (8008080 <TIM_Base_SetConfig+0x124>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d00b      	beq.n	8007ff6 <TIM_Base_SetConfig+0x9a>
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	4a28      	ldr	r2, [pc, #160]	; (8008084 <TIM_Base_SetConfig+0x128>)
 8007fe2:	4293      	cmp	r3, r2
 8007fe4:	d007      	beq.n	8007ff6 <TIM_Base_SetConfig+0x9a>
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	4a27      	ldr	r2, [pc, #156]	; (8008088 <TIM_Base_SetConfig+0x12c>)
 8007fea:	4293      	cmp	r3, r2
 8007fec:	d003      	beq.n	8007ff6 <TIM_Base_SetConfig+0x9a>
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	4a26      	ldr	r2, [pc, #152]	; (800808c <TIM_Base_SetConfig+0x130>)
 8007ff2:	4293      	cmp	r3, r2
 8007ff4:	d108      	bne.n	8008008 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ffc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	68db      	ldr	r3, [r3, #12]
 8008002:	68fa      	ldr	r2, [r7, #12]
 8008004:	4313      	orrs	r3, r2
 8008006:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	695b      	ldr	r3, [r3, #20]
 8008012:	4313      	orrs	r3, r2
 8008014:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	68fa      	ldr	r2, [r7, #12]
 800801a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	689a      	ldr	r2, [r3, #8]
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	681a      	ldr	r2, [r3, #0]
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	4a10      	ldr	r2, [pc, #64]	; (8008070 <TIM_Base_SetConfig+0x114>)
 8008030:	4293      	cmp	r3, r2
 8008032:	d00f      	beq.n	8008054 <TIM_Base_SetConfig+0xf8>
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	4a12      	ldr	r2, [pc, #72]	; (8008080 <TIM_Base_SetConfig+0x124>)
 8008038:	4293      	cmp	r3, r2
 800803a:	d00b      	beq.n	8008054 <TIM_Base_SetConfig+0xf8>
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	4a11      	ldr	r2, [pc, #68]	; (8008084 <TIM_Base_SetConfig+0x128>)
 8008040:	4293      	cmp	r3, r2
 8008042:	d007      	beq.n	8008054 <TIM_Base_SetConfig+0xf8>
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	4a10      	ldr	r2, [pc, #64]	; (8008088 <TIM_Base_SetConfig+0x12c>)
 8008048:	4293      	cmp	r3, r2
 800804a:	d003      	beq.n	8008054 <TIM_Base_SetConfig+0xf8>
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	4a0f      	ldr	r2, [pc, #60]	; (800808c <TIM_Base_SetConfig+0x130>)
 8008050:	4293      	cmp	r3, r2
 8008052:	d103      	bne.n	800805c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	691a      	ldr	r2, [r3, #16]
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2201      	movs	r2, #1
 8008060:	615a      	str	r2, [r3, #20]
}
 8008062:	bf00      	nop
 8008064:	3714      	adds	r7, #20
 8008066:	46bd      	mov	sp, r7
 8008068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806c:	4770      	bx	lr
 800806e:	bf00      	nop
 8008070:	40010000 	.word	0x40010000
 8008074:	40000400 	.word	0x40000400
 8008078:	40000800 	.word	0x40000800
 800807c:	40000c00 	.word	0x40000c00
 8008080:	40010400 	.word	0x40010400
 8008084:	40014000 	.word	0x40014000
 8008088:	40014400 	.word	0x40014400
 800808c:	40014800 	.word	0x40014800

08008090 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008090:	b084      	sub	sp, #16
 8008092:	b580      	push	{r7, lr}
 8008094:	b084      	sub	sp, #16
 8008096:	af00      	add	r7, sp, #0
 8008098:	6078      	str	r0, [r7, #4]
 800809a:	f107 001c 	add.w	r0, r7, #28
 800809e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80080a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080a4:	2b01      	cmp	r3, #1
 80080a6:	d120      	bne.n	80080ea <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080ac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	68da      	ldr	r2, [r3, #12]
 80080b8:	4b2a      	ldr	r3, [pc, #168]	; (8008164 <USB_CoreInit+0xd4>)
 80080ba:	4013      	ands	r3, r2
 80080bc:	687a      	ldr	r2, [r7, #4]
 80080be:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	68db      	ldr	r3, [r3, #12]
 80080c4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80080cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080ce:	2b01      	cmp	r3, #1
 80080d0:	d105      	bne.n	80080de <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	68db      	ldr	r3, [r3, #12]
 80080d6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80080de:	6878      	ldr	r0, [r7, #4]
 80080e0:	f001 faf8 	bl	80096d4 <USB_CoreReset>
 80080e4:	4603      	mov	r3, r0
 80080e6:	73fb      	strb	r3, [r7, #15]
 80080e8:	e01a      	b.n	8008120 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	68db      	ldr	r3, [r3, #12]
 80080ee:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80080f6:	6878      	ldr	r0, [r7, #4]
 80080f8:	f001 faec 	bl	80096d4 <USB_CoreReset>
 80080fc:	4603      	mov	r3, r0
 80080fe:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008100:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008102:	2b00      	cmp	r3, #0
 8008104:	d106      	bne.n	8008114 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800810a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	639a      	str	r2, [r3, #56]	; 0x38
 8008112:	e005      	b.n	8008120 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008118:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008122:	2b01      	cmp	r3, #1
 8008124:	d116      	bne.n	8008154 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800812a:	b29a      	uxth	r2, r3
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008134:	4b0c      	ldr	r3, [pc, #48]	; (8008168 <USB_CoreInit+0xd8>)
 8008136:	4313      	orrs	r3, r2
 8008138:	687a      	ldr	r2, [r7, #4]
 800813a:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	689b      	ldr	r3, [r3, #8]
 8008140:	f043 0206 	orr.w	r2, r3, #6
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	689b      	ldr	r3, [r3, #8]
 800814c:	f043 0220 	orr.w	r2, r3, #32
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008154:	7bfb      	ldrb	r3, [r7, #15]
}
 8008156:	4618      	mov	r0, r3
 8008158:	3710      	adds	r7, #16
 800815a:	46bd      	mov	sp, r7
 800815c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008160:	b004      	add	sp, #16
 8008162:	4770      	bx	lr
 8008164:	ffbdffbf 	.word	0xffbdffbf
 8008168:	03ee0000 	.word	0x03ee0000

0800816c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800816c:	b480      	push	{r7}
 800816e:	b087      	sub	sp, #28
 8008170:	af00      	add	r7, sp, #0
 8008172:	60f8      	str	r0, [r7, #12]
 8008174:	60b9      	str	r1, [r7, #8]
 8008176:	4613      	mov	r3, r2
 8008178:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800817a:	79fb      	ldrb	r3, [r7, #7]
 800817c:	2b02      	cmp	r3, #2
 800817e:	d165      	bne.n	800824c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008180:	68bb      	ldr	r3, [r7, #8]
 8008182:	4a41      	ldr	r2, [pc, #260]	; (8008288 <USB_SetTurnaroundTime+0x11c>)
 8008184:	4293      	cmp	r3, r2
 8008186:	d906      	bls.n	8008196 <USB_SetTurnaroundTime+0x2a>
 8008188:	68bb      	ldr	r3, [r7, #8]
 800818a:	4a40      	ldr	r2, [pc, #256]	; (800828c <USB_SetTurnaroundTime+0x120>)
 800818c:	4293      	cmp	r3, r2
 800818e:	d202      	bcs.n	8008196 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008190:	230f      	movs	r3, #15
 8008192:	617b      	str	r3, [r7, #20]
 8008194:	e062      	b.n	800825c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8008196:	68bb      	ldr	r3, [r7, #8]
 8008198:	4a3c      	ldr	r2, [pc, #240]	; (800828c <USB_SetTurnaroundTime+0x120>)
 800819a:	4293      	cmp	r3, r2
 800819c:	d306      	bcc.n	80081ac <USB_SetTurnaroundTime+0x40>
 800819e:	68bb      	ldr	r3, [r7, #8]
 80081a0:	4a3b      	ldr	r2, [pc, #236]	; (8008290 <USB_SetTurnaroundTime+0x124>)
 80081a2:	4293      	cmp	r3, r2
 80081a4:	d202      	bcs.n	80081ac <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80081a6:	230e      	movs	r3, #14
 80081a8:	617b      	str	r3, [r7, #20]
 80081aa:	e057      	b.n	800825c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	4a38      	ldr	r2, [pc, #224]	; (8008290 <USB_SetTurnaroundTime+0x124>)
 80081b0:	4293      	cmp	r3, r2
 80081b2:	d306      	bcc.n	80081c2 <USB_SetTurnaroundTime+0x56>
 80081b4:	68bb      	ldr	r3, [r7, #8]
 80081b6:	4a37      	ldr	r2, [pc, #220]	; (8008294 <USB_SetTurnaroundTime+0x128>)
 80081b8:	4293      	cmp	r3, r2
 80081ba:	d202      	bcs.n	80081c2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80081bc:	230d      	movs	r3, #13
 80081be:	617b      	str	r3, [r7, #20]
 80081c0:	e04c      	b.n	800825c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80081c2:	68bb      	ldr	r3, [r7, #8]
 80081c4:	4a33      	ldr	r2, [pc, #204]	; (8008294 <USB_SetTurnaroundTime+0x128>)
 80081c6:	4293      	cmp	r3, r2
 80081c8:	d306      	bcc.n	80081d8 <USB_SetTurnaroundTime+0x6c>
 80081ca:	68bb      	ldr	r3, [r7, #8]
 80081cc:	4a32      	ldr	r2, [pc, #200]	; (8008298 <USB_SetTurnaroundTime+0x12c>)
 80081ce:	4293      	cmp	r3, r2
 80081d0:	d802      	bhi.n	80081d8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80081d2:	230c      	movs	r3, #12
 80081d4:	617b      	str	r3, [r7, #20]
 80081d6:	e041      	b.n	800825c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80081d8:	68bb      	ldr	r3, [r7, #8]
 80081da:	4a2f      	ldr	r2, [pc, #188]	; (8008298 <USB_SetTurnaroundTime+0x12c>)
 80081dc:	4293      	cmp	r3, r2
 80081de:	d906      	bls.n	80081ee <USB_SetTurnaroundTime+0x82>
 80081e0:	68bb      	ldr	r3, [r7, #8]
 80081e2:	4a2e      	ldr	r2, [pc, #184]	; (800829c <USB_SetTurnaroundTime+0x130>)
 80081e4:	4293      	cmp	r3, r2
 80081e6:	d802      	bhi.n	80081ee <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80081e8:	230b      	movs	r3, #11
 80081ea:	617b      	str	r3, [r7, #20]
 80081ec:	e036      	b.n	800825c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80081ee:	68bb      	ldr	r3, [r7, #8]
 80081f0:	4a2a      	ldr	r2, [pc, #168]	; (800829c <USB_SetTurnaroundTime+0x130>)
 80081f2:	4293      	cmp	r3, r2
 80081f4:	d906      	bls.n	8008204 <USB_SetTurnaroundTime+0x98>
 80081f6:	68bb      	ldr	r3, [r7, #8]
 80081f8:	4a29      	ldr	r2, [pc, #164]	; (80082a0 <USB_SetTurnaroundTime+0x134>)
 80081fa:	4293      	cmp	r3, r2
 80081fc:	d802      	bhi.n	8008204 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80081fe:	230a      	movs	r3, #10
 8008200:	617b      	str	r3, [r7, #20]
 8008202:	e02b      	b.n	800825c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008204:	68bb      	ldr	r3, [r7, #8]
 8008206:	4a26      	ldr	r2, [pc, #152]	; (80082a0 <USB_SetTurnaroundTime+0x134>)
 8008208:	4293      	cmp	r3, r2
 800820a:	d906      	bls.n	800821a <USB_SetTurnaroundTime+0xae>
 800820c:	68bb      	ldr	r3, [r7, #8]
 800820e:	4a25      	ldr	r2, [pc, #148]	; (80082a4 <USB_SetTurnaroundTime+0x138>)
 8008210:	4293      	cmp	r3, r2
 8008212:	d202      	bcs.n	800821a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008214:	2309      	movs	r3, #9
 8008216:	617b      	str	r3, [r7, #20]
 8008218:	e020      	b.n	800825c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800821a:	68bb      	ldr	r3, [r7, #8]
 800821c:	4a21      	ldr	r2, [pc, #132]	; (80082a4 <USB_SetTurnaroundTime+0x138>)
 800821e:	4293      	cmp	r3, r2
 8008220:	d306      	bcc.n	8008230 <USB_SetTurnaroundTime+0xc4>
 8008222:	68bb      	ldr	r3, [r7, #8]
 8008224:	4a20      	ldr	r2, [pc, #128]	; (80082a8 <USB_SetTurnaroundTime+0x13c>)
 8008226:	4293      	cmp	r3, r2
 8008228:	d802      	bhi.n	8008230 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800822a:	2308      	movs	r3, #8
 800822c:	617b      	str	r3, [r7, #20]
 800822e:	e015      	b.n	800825c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008230:	68bb      	ldr	r3, [r7, #8]
 8008232:	4a1d      	ldr	r2, [pc, #116]	; (80082a8 <USB_SetTurnaroundTime+0x13c>)
 8008234:	4293      	cmp	r3, r2
 8008236:	d906      	bls.n	8008246 <USB_SetTurnaroundTime+0xda>
 8008238:	68bb      	ldr	r3, [r7, #8]
 800823a:	4a1c      	ldr	r2, [pc, #112]	; (80082ac <USB_SetTurnaroundTime+0x140>)
 800823c:	4293      	cmp	r3, r2
 800823e:	d202      	bcs.n	8008246 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008240:	2307      	movs	r3, #7
 8008242:	617b      	str	r3, [r7, #20]
 8008244:	e00a      	b.n	800825c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008246:	2306      	movs	r3, #6
 8008248:	617b      	str	r3, [r7, #20]
 800824a:	e007      	b.n	800825c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800824c:	79fb      	ldrb	r3, [r7, #7]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d102      	bne.n	8008258 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008252:	2309      	movs	r3, #9
 8008254:	617b      	str	r3, [r7, #20]
 8008256:	e001      	b.n	800825c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008258:	2309      	movs	r3, #9
 800825a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	68db      	ldr	r3, [r3, #12]
 8008260:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	68da      	ldr	r2, [r3, #12]
 800826c:	697b      	ldr	r3, [r7, #20]
 800826e:	029b      	lsls	r3, r3, #10
 8008270:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8008274:	431a      	orrs	r2, r3
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800827a:	2300      	movs	r3, #0
}
 800827c:	4618      	mov	r0, r3
 800827e:	371c      	adds	r7, #28
 8008280:	46bd      	mov	sp, r7
 8008282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008286:	4770      	bx	lr
 8008288:	00d8acbf 	.word	0x00d8acbf
 800828c:	00e4e1c0 	.word	0x00e4e1c0
 8008290:	00f42400 	.word	0x00f42400
 8008294:	01067380 	.word	0x01067380
 8008298:	011a499f 	.word	0x011a499f
 800829c:	01312cff 	.word	0x01312cff
 80082a0:	014ca43f 	.word	0x014ca43f
 80082a4:	016e3600 	.word	0x016e3600
 80082a8:	01a6ab1f 	.word	0x01a6ab1f
 80082ac:	01e84800 	.word	0x01e84800

080082b0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80082b0:	b480      	push	{r7}
 80082b2:	b083      	sub	sp, #12
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	689b      	ldr	r3, [r3, #8]
 80082bc:	f043 0201 	orr.w	r2, r3, #1
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80082c4:	2300      	movs	r3, #0
}
 80082c6:	4618      	mov	r0, r3
 80082c8:	370c      	adds	r7, #12
 80082ca:	46bd      	mov	sp, r7
 80082cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d0:	4770      	bx	lr

080082d2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80082d2:	b480      	push	{r7}
 80082d4:	b083      	sub	sp, #12
 80082d6:	af00      	add	r7, sp, #0
 80082d8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	689b      	ldr	r3, [r3, #8]
 80082de:	f023 0201 	bic.w	r2, r3, #1
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80082e6:	2300      	movs	r3, #0
}
 80082e8:	4618      	mov	r0, r3
 80082ea:	370c      	adds	r7, #12
 80082ec:	46bd      	mov	sp, r7
 80082ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f2:	4770      	bx	lr

080082f4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b084      	sub	sp, #16
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
 80082fc:	460b      	mov	r3, r1
 80082fe:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008300:	2300      	movs	r3, #0
 8008302:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	68db      	ldr	r3, [r3, #12]
 8008308:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008310:	78fb      	ldrb	r3, [r7, #3]
 8008312:	2b01      	cmp	r3, #1
 8008314:	d115      	bne.n	8008342 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	68db      	ldr	r3, [r3, #12]
 800831a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008322:	2001      	movs	r0, #1
 8008324:	f7f9 fad8 	bl	80018d8 <HAL_Delay>
      ms++;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	3301      	adds	r3, #1
 800832c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800832e:	6878      	ldr	r0, [r7, #4]
 8008330:	f001 f93f 	bl	80095b2 <USB_GetMode>
 8008334:	4603      	mov	r3, r0
 8008336:	2b01      	cmp	r3, #1
 8008338:	d01e      	beq.n	8008378 <USB_SetCurrentMode+0x84>
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	2b31      	cmp	r3, #49	; 0x31
 800833e:	d9f0      	bls.n	8008322 <USB_SetCurrentMode+0x2e>
 8008340:	e01a      	b.n	8008378 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008342:	78fb      	ldrb	r3, [r7, #3]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d115      	bne.n	8008374 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	68db      	ldr	r3, [r3, #12]
 800834c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008354:	2001      	movs	r0, #1
 8008356:	f7f9 fabf 	bl	80018d8 <HAL_Delay>
      ms++;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	3301      	adds	r3, #1
 800835e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008360:	6878      	ldr	r0, [r7, #4]
 8008362:	f001 f926 	bl	80095b2 <USB_GetMode>
 8008366:	4603      	mov	r3, r0
 8008368:	2b00      	cmp	r3, #0
 800836a:	d005      	beq.n	8008378 <USB_SetCurrentMode+0x84>
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	2b31      	cmp	r3, #49	; 0x31
 8008370:	d9f0      	bls.n	8008354 <USB_SetCurrentMode+0x60>
 8008372:	e001      	b.n	8008378 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008374:	2301      	movs	r3, #1
 8008376:	e005      	b.n	8008384 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	2b32      	cmp	r3, #50	; 0x32
 800837c:	d101      	bne.n	8008382 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800837e:	2301      	movs	r3, #1
 8008380:	e000      	b.n	8008384 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008382:	2300      	movs	r3, #0
}
 8008384:	4618      	mov	r0, r3
 8008386:	3710      	adds	r7, #16
 8008388:	46bd      	mov	sp, r7
 800838a:	bd80      	pop	{r7, pc}

0800838c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800838c:	b084      	sub	sp, #16
 800838e:	b580      	push	{r7, lr}
 8008390:	b086      	sub	sp, #24
 8008392:	af00      	add	r7, sp, #0
 8008394:	6078      	str	r0, [r7, #4]
 8008396:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800839a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800839e:	2300      	movs	r3, #0
 80083a0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80083a6:	2300      	movs	r3, #0
 80083a8:	613b      	str	r3, [r7, #16]
 80083aa:	e009      	b.n	80083c0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80083ac:	687a      	ldr	r2, [r7, #4]
 80083ae:	693b      	ldr	r3, [r7, #16]
 80083b0:	3340      	adds	r3, #64	; 0x40
 80083b2:	009b      	lsls	r3, r3, #2
 80083b4:	4413      	add	r3, r2
 80083b6:	2200      	movs	r2, #0
 80083b8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80083ba:	693b      	ldr	r3, [r7, #16]
 80083bc:	3301      	adds	r3, #1
 80083be:	613b      	str	r3, [r7, #16]
 80083c0:	693b      	ldr	r3, [r7, #16]
 80083c2:	2b0e      	cmp	r3, #14
 80083c4:	d9f2      	bls.n	80083ac <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80083c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d11c      	bne.n	8008406 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083d2:	685b      	ldr	r3, [r3, #4]
 80083d4:	68fa      	ldr	r2, [r7, #12]
 80083d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80083da:	f043 0302 	orr.w	r3, r3, #2
 80083de:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083e4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	601a      	str	r2, [r3, #0]
 8008404:	e005      	b.n	8008412 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800840a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008418:	461a      	mov	r2, r3
 800841a:	2300      	movs	r3, #0
 800841c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008424:	4619      	mov	r1, r3
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800842c:	461a      	mov	r2, r3
 800842e:	680b      	ldr	r3, [r1, #0]
 8008430:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008434:	2b01      	cmp	r3, #1
 8008436:	d10c      	bne.n	8008452 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800843a:	2b00      	cmp	r3, #0
 800843c:	d104      	bne.n	8008448 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800843e:	2100      	movs	r1, #0
 8008440:	6878      	ldr	r0, [r7, #4]
 8008442:	f000 f965 	bl	8008710 <USB_SetDevSpeed>
 8008446:	e008      	b.n	800845a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008448:	2101      	movs	r1, #1
 800844a:	6878      	ldr	r0, [r7, #4]
 800844c:	f000 f960 	bl	8008710 <USB_SetDevSpeed>
 8008450:	e003      	b.n	800845a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008452:	2103      	movs	r1, #3
 8008454:	6878      	ldr	r0, [r7, #4]
 8008456:	f000 f95b 	bl	8008710 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800845a:	2110      	movs	r1, #16
 800845c:	6878      	ldr	r0, [r7, #4]
 800845e:	f000 f8f3 	bl	8008648 <USB_FlushTxFifo>
 8008462:	4603      	mov	r3, r0
 8008464:	2b00      	cmp	r3, #0
 8008466:	d001      	beq.n	800846c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8008468:	2301      	movs	r3, #1
 800846a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800846c:	6878      	ldr	r0, [r7, #4]
 800846e:	f000 f91f 	bl	80086b0 <USB_FlushRxFifo>
 8008472:	4603      	mov	r3, r0
 8008474:	2b00      	cmp	r3, #0
 8008476:	d001      	beq.n	800847c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8008478:	2301      	movs	r3, #1
 800847a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008482:	461a      	mov	r2, r3
 8008484:	2300      	movs	r3, #0
 8008486:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800848e:	461a      	mov	r2, r3
 8008490:	2300      	movs	r3, #0
 8008492:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800849a:	461a      	mov	r2, r3
 800849c:	2300      	movs	r3, #0
 800849e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80084a0:	2300      	movs	r3, #0
 80084a2:	613b      	str	r3, [r7, #16]
 80084a4:	e043      	b.n	800852e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80084a6:	693b      	ldr	r3, [r7, #16]
 80084a8:	015a      	lsls	r2, r3, #5
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	4413      	add	r3, r2
 80084ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80084b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80084bc:	d118      	bne.n	80084f0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80084be:	693b      	ldr	r3, [r7, #16]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d10a      	bne.n	80084da <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80084c4:	693b      	ldr	r3, [r7, #16]
 80084c6:	015a      	lsls	r2, r3, #5
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	4413      	add	r3, r2
 80084cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084d0:	461a      	mov	r2, r3
 80084d2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80084d6:	6013      	str	r3, [r2, #0]
 80084d8:	e013      	b.n	8008502 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80084da:	693b      	ldr	r3, [r7, #16]
 80084dc:	015a      	lsls	r2, r3, #5
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	4413      	add	r3, r2
 80084e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084e6:	461a      	mov	r2, r3
 80084e8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80084ec:	6013      	str	r3, [r2, #0]
 80084ee:	e008      	b.n	8008502 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80084f0:	693b      	ldr	r3, [r7, #16]
 80084f2:	015a      	lsls	r2, r3, #5
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	4413      	add	r3, r2
 80084f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084fc:	461a      	mov	r2, r3
 80084fe:	2300      	movs	r3, #0
 8008500:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008502:	693b      	ldr	r3, [r7, #16]
 8008504:	015a      	lsls	r2, r3, #5
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	4413      	add	r3, r2
 800850a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800850e:	461a      	mov	r2, r3
 8008510:	2300      	movs	r3, #0
 8008512:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008514:	693b      	ldr	r3, [r7, #16]
 8008516:	015a      	lsls	r2, r3, #5
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	4413      	add	r3, r2
 800851c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008520:	461a      	mov	r2, r3
 8008522:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008526:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008528:	693b      	ldr	r3, [r7, #16]
 800852a:	3301      	adds	r3, #1
 800852c:	613b      	str	r3, [r7, #16]
 800852e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008530:	693a      	ldr	r2, [r7, #16]
 8008532:	429a      	cmp	r2, r3
 8008534:	d3b7      	bcc.n	80084a6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008536:	2300      	movs	r3, #0
 8008538:	613b      	str	r3, [r7, #16]
 800853a:	e043      	b.n	80085c4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800853c:	693b      	ldr	r3, [r7, #16]
 800853e:	015a      	lsls	r2, r3, #5
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	4413      	add	r3, r2
 8008544:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800854e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008552:	d118      	bne.n	8008586 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8008554:	693b      	ldr	r3, [r7, #16]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d10a      	bne.n	8008570 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800855a:	693b      	ldr	r3, [r7, #16]
 800855c:	015a      	lsls	r2, r3, #5
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	4413      	add	r3, r2
 8008562:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008566:	461a      	mov	r2, r3
 8008568:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800856c:	6013      	str	r3, [r2, #0]
 800856e:	e013      	b.n	8008598 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008570:	693b      	ldr	r3, [r7, #16]
 8008572:	015a      	lsls	r2, r3, #5
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	4413      	add	r3, r2
 8008578:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800857c:	461a      	mov	r2, r3
 800857e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008582:	6013      	str	r3, [r2, #0]
 8008584:	e008      	b.n	8008598 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008586:	693b      	ldr	r3, [r7, #16]
 8008588:	015a      	lsls	r2, r3, #5
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	4413      	add	r3, r2
 800858e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008592:	461a      	mov	r2, r3
 8008594:	2300      	movs	r3, #0
 8008596:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008598:	693b      	ldr	r3, [r7, #16]
 800859a:	015a      	lsls	r2, r3, #5
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	4413      	add	r3, r2
 80085a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085a4:	461a      	mov	r2, r3
 80085a6:	2300      	movs	r3, #0
 80085a8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80085aa:	693b      	ldr	r3, [r7, #16]
 80085ac:	015a      	lsls	r2, r3, #5
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	4413      	add	r3, r2
 80085b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085b6:	461a      	mov	r2, r3
 80085b8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80085bc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80085be:	693b      	ldr	r3, [r7, #16]
 80085c0:	3301      	adds	r3, #1
 80085c2:	613b      	str	r3, [r7, #16]
 80085c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085c6:	693a      	ldr	r2, [r7, #16]
 80085c8:	429a      	cmp	r2, r3
 80085ca:	d3b7      	bcc.n	800853c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085d2:	691b      	ldr	r3, [r3, #16]
 80085d4:	68fa      	ldr	r2, [r7, #12]
 80085d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80085da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80085de:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2200      	movs	r2, #0
 80085e4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80085ec:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80085ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d105      	bne.n	8008600 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	699b      	ldr	r3, [r3, #24]
 80085f8:	f043 0210 	orr.w	r2, r3, #16
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	699a      	ldr	r2, [r3, #24]
 8008604:	4b0e      	ldr	r3, [pc, #56]	; (8008640 <USB_DevInit+0x2b4>)
 8008606:	4313      	orrs	r3, r2
 8008608:	687a      	ldr	r2, [r7, #4]
 800860a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800860c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800860e:	2b00      	cmp	r3, #0
 8008610:	d005      	beq.n	800861e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	699b      	ldr	r3, [r3, #24]
 8008616:	f043 0208 	orr.w	r2, r3, #8
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800861e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008620:	2b01      	cmp	r3, #1
 8008622:	d105      	bne.n	8008630 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	699a      	ldr	r2, [r3, #24]
 8008628:	4b06      	ldr	r3, [pc, #24]	; (8008644 <USB_DevInit+0x2b8>)
 800862a:	4313      	orrs	r3, r2
 800862c:	687a      	ldr	r2, [r7, #4]
 800862e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008630:	7dfb      	ldrb	r3, [r7, #23]
}
 8008632:	4618      	mov	r0, r3
 8008634:	3718      	adds	r7, #24
 8008636:	46bd      	mov	sp, r7
 8008638:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800863c:	b004      	add	sp, #16
 800863e:	4770      	bx	lr
 8008640:	803c3800 	.word	0x803c3800
 8008644:	40000004 	.word	0x40000004

08008648 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008648:	b480      	push	{r7}
 800864a:	b085      	sub	sp, #20
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
 8008650:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008652:	2300      	movs	r3, #0
 8008654:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	3301      	adds	r3, #1
 800865a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	4a13      	ldr	r2, [pc, #76]	; (80086ac <USB_FlushTxFifo+0x64>)
 8008660:	4293      	cmp	r3, r2
 8008662:	d901      	bls.n	8008668 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008664:	2303      	movs	r3, #3
 8008666:	e01b      	b.n	80086a0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	691b      	ldr	r3, [r3, #16]
 800866c:	2b00      	cmp	r3, #0
 800866e:	daf2      	bge.n	8008656 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008670:	2300      	movs	r3, #0
 8008672:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	019b      	lsls	r3, r3, #6
 8008678:	f043 0220 	orr.w	r2, r3, #32
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	3301      	adds	r3, #1
 8008684:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	4a08      	ldr	r2, [pc, #32]	; (80086ac <USB_FlushTxFifo+0x64>)
 800868a:	4293      	cmp	r3, r2
 800868c:	d901      	bls.n	8008692 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800868e:	2303      	movs	r3, #3
 8008690:	e006      	b.n	80086a0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	691b      	ldr	r3, [r3, #16]
 8008696:	f003 0320 	and.w	r3, r3, #32
 800869a:	2b20      	cmp	r3, #32
 800869c:	d0f0      	beq.n	8008680 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800869e:	2300      	movs	r3, #0
}
 80086a0:	4618      	mov	r0, r3
 80086a2:	3714      	adds	r7, #20
 80086a4:	46bd      	mov	sp, r7
 80086a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086aa:	4770      	bx	lr
 80086ac:	00030d40 	.word	0x00030d40

080086b0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80086b0:	b480      	push	{r7}
 80086b2:	b085      	sub	sp, #20
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80086b8:	2300      	movs	r3, #0
 80086ba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	3301      	adds	r3, #1
 80086c0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	4a11      	ldr	r2, [pc, #68]	; (800870c <USB_FlushRxFifo+0x5c>)
 80086c6:	4293      	cmp	r3, r2
 80086c8:	d901      	bls.n	80086ce <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80086ca:	2303      	movs	r3, #3
 80086cc:	e018      	b.n	8008700 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	691b      	ldr	r3, [r3, #16]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	daf2      	bge.n	80086bc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80086d6:	2300      	movs	r3, #0
 80086d8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	2210      	movs	r2, #16
 80086de:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	3301      	adds	r3, #1
 80086e4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	4a08      	ldr	r2, [pc, #32]	; (800870c <USB_FlushRxFifo+0x5c>)
 80086ea:	4293      	cmp	r3, r2
 80086ec:	d901      	bls.n	80086f2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80086ee:	2303      	movs	r3, #3
 80086f0:	e006      	b.n	8008700 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	691b      	ldr	r3, [r3, #16]
 80086f6:	f003 0310 	and.w	r3, r3, #16
 80086fa:	2b10      	cmp	r3, #16
 80086fc:	d0f0      	beq.n	80086e0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80086fe:	2300      	movs	r3, #0
}
 8008700:	4618      	mov	r0, r3
 8008702:	3714      	adds	r7, #20
 8008704:	46bd      	mov	sp, r7
 8008706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870a:	4770      	bx	lr
 800870c:	00030d40 	.word	0x00030d40

08008710 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008710:	b480      	push	{r7}
 8008712:	b085      	sub	sp, #20
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
 8008718:	460b      	mov	r3, r1
 800871a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008726:	681a      	ldr	r2, [r3, #0]
 8008728:	78fb      	ldrb	r3, [r7, #3]
 800872a:	68f9      	ldr	r1, [r7, #12]
 800872c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008730:	4313      	orrs	r3, r2
 8008732:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008734:	2300      	movs	r3, #0
}
 8008736:	4618      	mov	r0, r3
 8008738:	3714      	adds	r7, #20
 800873a:	46bd      	mov	sp, r7
 800873c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008740:	4770      	bx	lr

08008742 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008742:	b480      	push	{r7}
 8008744:	b087      	sub	sp, #28
 8008746:	af00      	add	r7, sp, #0
 8008748:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800874e:	693b      	ldr	r3, [r7, #16]
 8008750:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008754:	689b      	ldr	r3, [r3, #8]
 8008756:	f003 0306 	and.w	r3, r3, #6
 800875a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d102      	bne.n	8008768 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8008762:	2300      	movs	r3, #0
 8008764:	75fb      	strb	r3, [r7, #23]
 8008766:	e00a      	b.n	800877e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	2b02      	cmp	r3, #2
 800876c:	d002      	beq.n	8008774 <USB_GetDevSpeed+0x32>
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	2b06      	cmp	r3, #6
 8008772:	d102      	bne.n	800877a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008774:	2302      	movs	r3, #2
 8008776:	75fb      	strb	r3, [r7, #23]
 8008778:	e001      	b.n	800877e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800877a:	230f      	movs	r3, #15
 800877c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800877e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008780:	4618      	mov	r0, r3
 8008782:	371c      	adds	r7, #28
 8008784:	46bd      	mov	sp, r7
 8008786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878a:	4770      	bx	lr

0800878c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800878c:	b480      	push	{r7}
 800878e:	b085      	sub	sp, #20
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
 8008794:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	781b      	ldrb	r3, [r3, #0]
 800879e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	785b      	ldrb	r3, [r3, #1]
 80087a4:	2b01      	cmp	r3, #1
 80087a6:	d139      	bne.n	800881c <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087ae:	69da      	ldr	r2, [r3, #28]
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	781b      	ldrb	r3, [r3, #0]
 80087b4:	f003 030f 	and.w	r3, r3, #15
 80087b8:	2101      	movs	r1, #1
 80087ba:	fa01 f303 	lsl.w	r3, r1, r3
 80087be:	b29b      	uxth	r3, r3
 80087c0:	68f9      	ldr	r1, [r7, #12]
 80087c2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80087c6:	4313      	orrs	r3, r2
 80087c8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80087ca:	68bb      	ldr	r3, [r7, #8]
 80087cc:	015a      	lsls	r2, r3, #5
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	4413      	add	r3, r2
 80087d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d153      	bne.n	8008888 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80087e0:	68bb      	ldr	r3, [r7, #8]
 80087e2:	015a      	lsls	r2, r3, #5
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	4413      	add	r3, r2
 80087e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087ec:	681a      	ldr	r2, [r3, #0]
 80087ee:	683b      	ldr	r3, [r7, #0]
 80087f0:	689b      	ldr	r3, [r3, #8]
 80087f2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80087f6:	683b      	ldr	r3, [r7, #0]
 80087f8:	791b      	ldrb	r3, [r3, #4]
 80087fa:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80087fc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80087fe:	68bb      	ldr	r3, [r7, #8]
 8008800:	059b      	lsls	r3, r3, #22
 8008802:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008804:	431a      	orrs	r2, r3
 8008806:	68bb      	ldr	r3, [r7, #8]
 8008808:	0159      	lsls	r1, r3, #5
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	440b      	add	r3, r1
 800880e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008812:	4619      	mov	r1, r3
 8008814:	4b20      	ldr	r3, [pc, #128]	; (8008898 <USB_ActivateEndpoint+0x10c>)
 8008816:	4313      	orrs	r3, r2
 8008818:	600b      	str	r3, [r1, #0]
 800881a:	e035      	b.n	8008888 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008822:	69da      	ldr	r2, [r3, #28]
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	781b      	ldrb	r3, [r3, #0]
 8008828:	f003 030f 	and.w	r3, r3, #15
 800882c:	2101      	movs	r1, #1
 800882e:	fa01 f303 	lsl.w	r3, r1, r3
 8008832:	041b      	lsls	r3, r3, #16
 8008834:	68f9      	ldr	r1, [r7, #12]
 8008836:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800883a:	4313      	orrs	r3, r2
 800883c:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800883e:	68bb      	ldr	r3, [r7, #8]
 8008840:	015a      	lsls	r2, r3, #5
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	4413      	add	r3, r2
 8008846:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008850:	2b00      	cmp	r3, #0
 8008852:	d119      	bne.n	8008888 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008854:	68bb      	ldr	r3, [r7, #8]
 8008856:	015a      	lsls	r2, r3, #5
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	4413      	add	r3, r2
 800885c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008860:	681a      	ldr	r2, [r3, #0]
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	689b      	ldr	r3, [r3, #8]
 8008866:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800886a:	683b      	ldr	r3, [r7, #0]
 800886c:	791b      	ldrb	r3, [r3, #4]
 800886e:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008870:	430b      	orrs	r3, r1
 8008872:	431a      	orrs	r2, r3
 8008874:	68bb      	ldr	r3, [r7, #8]
 8008876:	0159      	lsls	r1, r3, #5
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	440b      	add	r3, r1
 800887c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008880:	4619      	mov	r1, r3
 8008882:	4b05      	ldr	r3, [pc, #20]	; (8008898 <USB_ActivateEndpoint+0x10c>)
 8008884:	4313      	orrs	r3, r2
 8008886:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008888:	2300      	movs	r3, #0
}
 800888a:	4618      	mov	r0, r3
 800888c:	3714      	adds	r7, #20
 800888e:	46bd      	mov	sp, r7
 8008890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008894:	4770      	bx	lr
 8008896:	bf00      	nop
 8008898:	10008000 	.word	0x10008000

0800889c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800889c:	b480      	push	{r7}
 800889e:	b085      	sub	sp, #20
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
 80088a4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80088aa:	683b      	ldr	r3, [r7, #0]
 80088ac:	781b      	ldrb	r3, [r3, #0]
 80088ae:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80088b0:	683b      	ldr	r3, [r7, #0]
 80088b2:	785b      	ldrb	r3, [r3, #1]
 80088b4:	2b01      	cmp	r3, #1
 80088b6:	d161      	bne.n	800897c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80088b8:	68bb      	ldr	r3, [r7, #8]
 80088ba:	015a      	lsls	r2, r3, #5
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	4413      	add	r3, r2
 80088c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80088ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80088ce:	d11f      	bne.n	8008910 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80088d0:	68bb      	ldr	r3, [r7, #8]
 80088d2:	015a      	lsls	r2, r3, #5
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	4413      	add	r3, r2
 80088d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	68ba      	ldr	r2, [r7, #8]
 80088e0:	0151      	lsls	r1, r2, #5
 80088e2:	68fa      	ldr	r2, [r7, #12]
 80088e4:	440a      	add	r2, r1
 80088e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80088ea:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80088ee:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80088f0:	68bb      	ldr	r3, [r7, #8]
 80088f2:	015a      	lsls	r2, r3, #5
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	4413      	add	r3, r2
 80088f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	68ba      	ldr	r2, [r7, #8]
 8008900:	0151      	lsls	r1, r2, #5
 8008902:	68fa      	ldr	r2, [r7, #12]
 8008904:	440a      	add	r2, r1
 8008906:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800890a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800890e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008916:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	781b      	ldrb	r3, [r3, #0]
 800891c:	f003 030f 	and.w	r3, r3, #15
 8008920:	2101      	movs	r1, #1
 8008922:	fa01 f303 	lsl.w	r3, r1, r3
 8008926:	b29b      	uxth	r3, r3
 8008928:	43db      	mvns	r3, r3
 800892a:	68f9      	ldr	r1, [r7, #12]
 800892c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008930:	4013      	ands	r3, r2
 8008932:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800893a:	69da      	ldr	r2, [r3, #28]
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	781b      	ldrb	r3, [r3, #0]
 8008940:	f003 030f 	and.w	r3, r3, #15
 8008944:	2101      	movs	r1, #1
 8008946:	fa01 f303 	lsl.w	r3, r1, r3
 800894a:	b29b      	uxth	r3, r3
 800894c:	43db      	mvns	r3, r3
 800894e:	68f9      	ldr	r1, [r7, #12]
 8008950:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008954:	4013      	ands	r3, r2
 8008956:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008958:	68bb      	ldr	r3, [r7, #8]
 800895a:	015a      	lsls	r2, r3, #5
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	4413      	add	r3, r2
 8008960:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008964:	681a      	ldr	r2, [r3, #0]
 8008966:	68bb      	ldr	r3, [r7, #8]
 8008968:	0159      	lsls	r1, r3, #5
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	440b      	add	r3, r1
 800896e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008972:	4619      	mov	r1, r3
 8008974:	4b35      	ldr	r3, [pc, #212]	; (8008a4c <USB_DeactivateEndpoint+0x1b0>)
 8008976:	4013      	ands	r3, r2
 8008978:	600b      	str	r3, [r1, #0]
 800897a:	e060      	b.n	8008a3e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800897c:	68bb      	ldr	r3, [r7, #8]
 800897e:	015a      	lsls	r2, r3, #5
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	4413      	add	r3, r2
 8008984:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800898e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008992:	d11f      	bne.n	80089d4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008994:	68bb      	ldr	r3, [r7, #8]
 8008996:	015a      	lsls	r2, r3, #5
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	4413      	add	r3, r2
 800899c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	68ba      	ldr	r2, [r7, #8]
 80089a4:	0151      	lsls	r1, r2, #5
 80089a6:	68fa      	ldr	r2, [r7, #12]
 80089a8:	440a      	add	r2, r1
 80089aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80089ae:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80089b2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80089b4:	68bb      	ldr	r3, [r7, #8]
 80089b6:	015a      	lsls	r2, r3, #5
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	4413      	add	r3, r2
 80089bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	68ba      	ldr	r2, [r7, #8]
 80089c4:	0151      	lsls	r1, r2, #5
 80089c6:	68fa      	ldr	r2, [r7, #12]
 80089c8:	440a      	add	r2, r1
 80089ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80089ce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80089d2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80089dc:	683b      	ldr	r3, [r7, #0]
 80089de:	781b      	ldrb	r3, [r3, #0]
 80089e0:	f003 030f 	and.w	r3, r3, #15
 80089e4:	2101      	movs	r1, #1
 80089e6:	fa01 f303 	lsl.w	r3, r1, r3
 80089ea:	041b      	lsls	r3, r3, #16
 80089ec:	43db      	mvns	r3, r3
 80089ee:	68f9      	ldr	r1, [r7, #12]
 80089f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80089f4:	4013      	ands	r3, r2
 80089f6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089fe:	69da      	ldr	r2, [r3, #28]
 8008a00:	683b      	ldr	r3, [r7, #0]
 8008a02:	781b      	ldrb	r3, [r3, #0]
 8008a04:	f003 030f 	and.w	r3, r3, #15
 8008a08:	2101      	movs	r1, #1
 8008a0a:	fa01 f303 	lsl.w	r3, r1, r3
 8008a0e:	041b      	lsls	r3, r3, #16
 8008a10:	43db      	mvns	r3, r3
 8008a12:	68f9      	ldr	r1, [r7, #12]
 8008a14:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008a18:	4013      	ands	r3, r2
 8008a1a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008a1c:	68bb      	ldr	r3, [r7, #8]
 8008a1e:	015a      	lsls	r2, r3, #5
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	4413      	add	r3, r2
 8008a24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a28:	681a      	ldr	r2, [r3, #0]
 8008a2a:	68bb      	ldr	r3, [r7, #8]
 8008a2c:	0159      	lsls	r1, r3, #5
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	440b      	add	r3, r1
 8008a32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a36:	4619      	mov	r1, r3
 8008a38:	4b05      	ldr	r3, [pc, #20]	; (8008a50 <USB_DeactivateEndpoint+0x1b4>)
 8008a3a:	4013      	ands	r3, r2
 8008a3c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008a3e:	2300      	movs	r3, #0
}
 8008a40:	4618      	mov	r0, r3
 8008a42:	3714      	adds	r7, #20
 8008a44:	46bd      	mov	sp, r7
 8008a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4a:	4770      	bx	lr
 8008a4c:	ec337800 	.word	0xec337800
 8008a50:	eff37800 	.word	0xeff37800

08008a54 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b08a      	sub	sp, #40	; 0x28
 8008a58:	af02      	add	r7, sp, #8
 8008a5a:	60f8      	str	r0, [r7, #12]
 8008a5c:	60b9      	str	r1, [r7, #8]
 8008a5e:	4613      	mov	r3, r2
 8008a60:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8008a66:	68bb      	ldr	r3, [r7, #8]
 8008a68:	781b      	ldrb	r3, [r3, #0]
 8008a6a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008a6c:	68bb      	ldr	r3, [r7, #8]
 8008a6e:	785b      	ldrb	r3, [r3, #1]
 8008a70:	2b01      	cmp	r3, #1
 8008a72:	f040 8181 	bne.w	8008d78 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008a76:	68bb      	ldr	r3, [r7, #8]
 8008a78:	691b      	ldr	r3, [r3, #16]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d132      	bne.n	8008ae4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008a7e:	69bb      	ldr	r3, [r7, #24]
 8008a80:	015a      	lsls	r2, r3, #5
 8008a82:	69fb      	ldr	r3, [r7, #28]
 8008a84:	4413      	add	r3, r2
 8008a86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a8a:	691a      	ldr	r2, [r3, #16]
 8008a8c:	69bb      	ldr	r3, [r7, #24]
 8008a8e:	0159      	lsls	r1, r3, #5
 8008a90:	69fb      	ldr	r3, [r7, #28]
 8008a92:	440b      	add	r3, r1
 8008a94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a98:	4619      	mov	r1, r3
 8008a9a:	4ba5      	ldr	r3, [pc, #660]	; (8008d30 <USB_EPStartXfer+0x2dc>)
 8008a9c:	4013      	ands	r3, r2
 8008a9e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008aa0:	69bb      	ldr	r3, [r7, #24]
 8008aa2:	015a      	lsls	r2, r3, #5
 8008aa4:	69fb      	ldr	r3, [r7, #28]
 8008aa6:	4413      	add	r3, r2
 8008aa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008aac:	691b      	ldr	r3, [r3, #16]
 8008aae:	69ba      	ldr	r2, [r7, #24]
 8008ab0:	0151      	lsls	r1, r2, #5
 8008ab2:	69fa      	ldr	r2, [r7, #28]
 8008ab4:	440a      	add	r2, r1
 8008ab6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008aba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008abe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008ac0:	69bb      	ldr	r3, [r7, #24]
 8008ac2:	015a      	lsls	r2, r3, #5
 8008ac4:	69fb      	ldr	r3, [r7, #28]
 8008ac6:	4413      	add	r3, r2
 8008ac8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008acc:	691a      	ldr	r2, [r3, #16]
 8008ace:	69bb      	ldr	r3, [r7, #24]
 8008ad0:	0159      	lsls	r1, r3, #5
 8008ad2:	69fb      	ldr	r3, [r7, #28]
 8008ad4:	440b      	add	r3, r1
 8008ad6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ada:	4619      	mov	r1, r3
 8008adc:	4b95      	ldr	r3, [pc, #596]	; (8008d34 <USB_EPStartXfer+0x2e0>)
 8008ade:	4013      	ands	r3, r2
 8008ae0:	610b      	str	r3, [r1, #16]
 8008ae2:	e092      	b.n	8008c0a <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008ae4:	69bb      	ldr	r3, [r7, #24]
 8008ae6:	015a      	lsls	r2, r3, #5
 8008ae8:	69fb      	ldr	r3, [r7, #28]
 8008aea:	4413      	add	r3, r2
 8008aec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008af0:	691a      	ldr	r2, [r3, #16]
 8008af2:	69bb      	ldr	r3, [r7, #24]
 8008af4:	0159      	lsls	r1, r3, #5
 8008af6:	69fb      	ldr	r3, [r7, #28]
 8008af8:	440b      	add	r3, r1
 8008afa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008afe:	4619      	mov	r1, r3
 8008b00:	4b8c      	ldr	r3, [pc, #560]	; (8008d34 <USB_EPStartXfer+0x2e0>)
 8008b02:	4013      	ands	r3, r2
 8008b04:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008b06:	69bb      	ldr	r3, [r7, #24]
 8008b08:	015a      	lsls	r2, r3, #5
 8008b0a:	69fb      	ldr	r3, [r7, #28]
 8008b0c:	4413      	add	r3, r2
 8008b0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b12:	691a      	ldr	r2, [r3, #16]
 8008b14:	69bb      	ldr	r3, [r7, #24]
 8008b16:	0159      	lsls	r1, r3, #5
 8008b18:	69fb      	ldr	r3, [r7, #28]
 8008b1a:	440b      	add	r3, r1
 8008b1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b20:	4619      	mov	r1, r3
 8008b22:	4b83      	ldr	r3, [pc, #524]	; (8008d30 <USB_EPStartXfer+0x2dc>)
 8008b24:	4013      	ands	r3, r2
 8008b26:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8008b28:	69bb      	ldr	r3, [r7, #24]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d11a      	bne.n	8008b64 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8008b2e:	68bb      	ldr	r3, [r7, #8]
 8008b30:	691a      	ldr	r2, [r3, #16]
 8008b32:	68bb      	ldr	r3, [r7, #8]
 8008b34:	689b      	ldr	r3, [r3, #8]
 8008b36:	429a      	cmp	r2, r3
 8008b38:	d903      	bls.n	8008b42 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8008b3a:	68bb      	ldr	r3, [r7, #8]
 8008b3c:	689a      	ldr	r2, [r3, #8]
 8008b3e:	68bb      	ldr	r3, [r7, #8]
 8008b40:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008b42:	69bb      	ldr	r3, [r7, #24]
 8008b44:	015a      	lsls	r2, r3, #5
 8008b46:	69fb      	ldr	r3, [r7, #28]
 8008b48:	4413      	add	r3, r2
 8008b4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b4e:	691b      	ldr	r3, [r3, #16]
 8008b50:	69ba      	ldr	r2, [r7, #24]
 8008b52:	0151      	lsls	r1, r2, #5
 8008b54:	69fa      	ldr	r2, [r7, #28]
 8008b56:	440a      	add	r2, r1
 8008b58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b5c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008b60:	6113      	str	r3, [r2, #16]
 8008b62:	e01b      	b.n	8008b9c <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008b64:	69bb      	ldr	r3, [r7, #24]
 8008b66:	015a      	lsls	r2, r3, #5
 8008b68:	69fb      	ldr	r3, [r7, #28]
 8008b6a:	4413      	add	r3, r2
 8008b6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b70:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8008b72:	68bb      	ldr	r3, [r7, #8]
 8008b74:	6919      	ldr	r1, [r3, #16]
 8008b76:	68bb      	ldr	r3, [r7, #8]
 8008b78:	689b      	ldr	r3, [r3, #8]
 8008b7a:	440b      	add	r3, r1
 8008b7c:	1e59      	subs	r1, r3, #1
 8008b7e:	68bb      	ldr	r3, [r7, #8]
 8008b80:	689b      	ldr	r3, [r3, #8]
 8008b82:	fbb1 f3f3 	udiv	r3, r1, r3
 8008b86:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008b88:	4b6b      	ldr	r3, [pc, #428]	; (8008d38 <USB_EPStartXfer+0x2e4>)
 8008b8a:	400b      	ands	r3, r1
 8008b8c:	69b9      	ldr	r1, [r7, #24]
 8008b8e:	0148      	lsls	r0, r1, #5
 8008b90:	69f9      	ldr	r1, [r7, #28]
 8008b92:	4401      	add	r1, r0
 8008b94:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008b98:	4313      	orrs	r3, r2
 8008b9a:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008b9c:	69bb      	ldr	r3, [r7, #24]
 8008b9e:	015a      	lsls	r2, r3, #5
 8008ba0:	69fb      	ldr	r3, [r7, #28]
 8008ba2:	4413      	add	r3, r2
 8008ba4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ba8:	691a      	ldr	r2, [r3, #16]
 8008baa:	68bb      	ldr	r3, [r7, #8]
 8008bac:	691b      	ldr	r3, [r3, #16]
 8008bae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008bb2:	69b9      	ldr	r1, [r7, #24]
 8008bb4:	0148      	lsls	r0, r1, #5
 8008bb6:	69f9      	ldr	r1, [r7, #28]
 8008bb8:	4401      	add	r1, r0
 8008bba:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008bbe:	4313      	orrs	r3, r2
 8008bc0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8008bc2:	68bb      	ldr	r3, [r7, #8]
 8008bc4:	791b      	ldrb	r3, [r3, #4]
 8008bc6:	2b01      	cmp	r3, #1
 8008bc8:	d11f      	bne.n	8008c0a <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008bca:	69bb      	ldr	r3, [r7, #24]
 8008bcc:	015a      	lsls	r2, r3, #5
 8008bce:	69fb      	ldr	r3, [r7, #28]
 8008bd0:	4413      	add	r3, r2
 8008bd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bd6:	691b      	ldr	r3, [r3, #16]
 8008bd8:	69ba      	ldr	r2, [r7, #24]
 8008bda:	0151      	lsls	r1, r2, #5
 8008bdc:	69fa      	ldr	r2, [r7, #28]
 8008bde:	440a      	add	r2, r1
 8008be0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008be4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8008be8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8008bea:	69bb      	ldr	r3, [r7, #24]
 8008bec:	015a      	lsls	r2, r3, #5
 8008bee:	69fb      	ldr	r3, [r7, #28]
 8008bf0:	4413      	add	r3, r2
 8008bf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bf6:	691b      	ldr	r3, [r3, #16]
 8008bf8:	69ba      	ldr	r2, [r7, #24]
 8008bfa:	0151      	lsls	r1, r2, #5
 8008bfc:	69fa      	ldr	r2, [r7, #28]
 8008bfe:	440a      	add	r2, r1
 8008c00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c04:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008c08:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8008c0a:	79fb      	ldrb	r3, [r7, #7]
 8008c0c:	2b01      	cmp	r3, #1
 8008c0e:	d14b      	bne.n	8008ca8 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008c10:	68bb      	ldr	r3, [r7, #8]
 8008c12:	69db      	ldr	r3, [r3, #28]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d009      	beq.n	8008c2c <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008c18:	69bb      	ldr	r3, [r7, #24]
 8008c1a:	015a      	lsls	r2, r3, #5
 8008c1c:	69fb      	ldr	r3, [r7, #28]
 8008c1e:	4413      	add	r3, r2
 8008c20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c24:	461a      	mov	r2, r3
 8008c26:	68bb      	ldr	r3, [r7, #8]
 8008c28:	69db      	ldr	r3, [r3, #28]
 8008c2a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008c2c:	68bb      	ldr	r3, [r7, #8]
 8008c2e:	791b      	ldrb	r3, [r3, #4]
 8008c30:	2b01      	cmp	r3, #1
 8008c32:	d128      	bne.n	8008c86 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008c34:	69fb      	ldr	r3, [r7, #28]
 8008c36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c3a:	689b      	ldr	r3, [r3, #8]
 8008c3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d110      	bne.n	8008c66 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008c44:	69bb      	ldr	r3, [r7, #24]
 8008c46:	015a      	lsls	r2, r3, #5
 8008c48:	69fb      	ldr	r3, [r7, #28]
 8008c4a:	4413      	add	r3, r2
 8008c4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	69ba      	ldr	r2, [r7, #24]
 8008c54:	0151      	lsls	r1, r2, #5
 8008c56:	69fa      	ldr	r2, [r7, #28]
 8008c58:	440a      	add	r2, r1
 8008c5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c5e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008c62:	6013      	str	r3, [r2, #0]
 8008c64:	e00f      	b.n	8008c86 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008c66:	69bb      	ldr	r3, [r7, #24]
 8008c68:	015a      	lsls	r2, r3, #5
 8008c6a:	69fb      	ldr	r3, [r7, #28]
 8008c6c:	4413      	add	r3, r2
 8008c6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	69ba      	ldr	r2, [r7, #24]
 8008c76:	0151      	lsls	r1, r2, #5
 8008c78:	69fa      	ldr	r2, [r7, #28]
 8008c7a:	440a      	add	r2, r1
 8008c7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008c84:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008c86:	69bb      	ldr	r3, [r7, #24]
 8008c88:	015a      	lsls	r2, r3, #5
 8008c8a:	69fb      	ldr	r3, [r7, #28]
 8008c8c:	4413      	add	r3, r2
 8008c8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	69ba      	ldr	r2, [r7, #24]
 8008c96:	0151      	lsls	r1, r2, #5
 8008c98:	69fa      	ldr	r2, [r7, #28]
 8008c9a:	440a      	add	r2, r1
 8008c9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ca0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008ca4:	6013      	str	r3, [r2, #0]
 8008ca6:	e16a      	b.n	8008f7e <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008ca8:	69bb      	ldr	r3, [r7, #24]
 8008caa:	015a      	lsls	r2, r3, #5
 8008cac:	69fb      	ldr	r3, [r7, #28]
 8008cae:	4413      	add	r3, r2
 8008cb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	69ba      	ldr	r2, [r7, #24]
 8008cb8:	0151      	lsls	r1, r2, #5
 8008cba:	69fa      	ldr	r2, [r7, #28]
 8008cbc:	440a      	add	r2, r1
 8008cbe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008cc2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008cc6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008cc8:	68bb      	ldr	r3, [r7, #8]
 8008cca:	791b      	ldrb	r3, [r3, #4]
 8008ccc:	2b01      	cmp	r3, #1
 8008cce:	d015      	beq.n	8008cfc <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008cd0:	68bb      	ldr	r3, [r7, #8]
 8008cd2:	691b      	ldr	r3, [r3, #16]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	f000 8152 	beq.w	8008f7e <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008cda:	69fb      	ldr	r3, [r7, #28]
 8008cdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ce0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008ce2:	68bb      	ldr	r3, [r7, #8]
 8008ce4:	781b      	ldrb	r3, [r3, #0]
 8008ce6:	f003 030f 	and.w	r3, r3, #15
 8008cea:	2101      	movs	r1, #1
 8008cec:	fa01 f303 	lsl.w	r3, r1, r3
 8008cf0:	69f9      	ldr	r1, [r7, #28]
 8008cf2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008cf6:	4313      	orrs	r3, r2
 8008cf8:	634b      	str	r3, [r1, #52]	; 0x34
 8008cfa:	e140      	b.n	8008f7e <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008cfc:	69fb      	ldr	r3, [r7, #28]
 8008cfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d02:	689b      	ldr	r3, [r3, #8]
 8008d04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d117      	bne.n	8008d3c <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008d0c:	69bb      	ldr	r3, [r7, #24]
 8008d0e:	015a      	lsls	r2, r3, #5
 8008d10:	69fb      	ldr	r3, [r7, #28]
 8008d12:	4413      	add	r3, r2
 8008d14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	69ba      	ldr	r2, [r7, #24]
 8008d1c:	0151      	lsls	r1, r2, #5
 8008d1e:	69fa      	ldr	r2, [r7, #28]
 8008d20:	440a      	add	r2, r1
 8008d22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d26:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008d2a:	6013      	str	r3, [r2, #0]
 8008d2c:	e016      	b.n	8008d5c <USB_EPStartXfer+0x308>
 8008d2e:	bf00      	nop
 8008d30:	e007ffff 	.word	0xe007ffff
 8008d34:	fff80000 	.word	0xfff80000
 8008d38:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008d3c:	69bb      	ldr	r3, [r7, #24]
 8008d3e:	015a      	lsls	r2, r3, #5
 8008d40:	69fb      	ldr	r3, [r7, #28]
 8008d42:	4413      	add	r3, r2
 8008d44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	69ba      	ldr	r2, [r7, #24]
 8008d4c:	0151      	lsls	r1, r2, #5
 8008d4e:	69fa      	ldr	r2, [r7, #28]
 8008d50:	440a      	add	r2, r1
 8008d52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008d5a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008d5c:	68bb      	ldr	r3, [r7, #8]
 8008d5e:	68d9      	ldr	r1, [r3, #12]
 8008d60:	68bb      	ldr	r3, [r7, #8]
 8008d62:	781a      	ldrb	r2, [r3, #0]
 8008d64:	68bb      	ldr	r3, [r7, #8]
 8008d66:	691b      	ldr	r3, [r3, #16]
 8008d68:	b298      	uxth	r0, r3
 8008d6a:	79fb      	ldrb	r3, [r7, #7]
 8008d6c:	9300      	str	r3, [sp, #0]
 8008d6e:	4603      	mov	r3, r0
 8008d70:	68f8      	ldr	r0, [r7, #12]
 8008d72:	f000 f9b9 	bl	80090e8 <USB_WritePacket>
 8008d76:	e102      	b.n	8008f7e <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008d78:	69bb      	ldr	r3, [r7, #24]
 8008d7a:	015a      	lsls	r2, r3, #5
 8008d7c:	69fb      	ldr	r3, [r7, #28]
 8008d7e:	4413      	add	r3, r2
 8008d80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d84:	691a      	ldr	r2, [r3, #16]
 8008d86:	69bb      	ldr	r3, [r7, #24]
 8008d88:	0159      	lsls	r1, r3, #5
 8008d8a:	69fb      	ldr	r3, [r7, #28]
 8008d8c:	440b      	add	r3, r1
 8008d8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d92:	4619      	mov	r1, r3
 8008d94:	4b7c      	ldr	r3, [pc, #496]	; (8008f88 <USB_EPStartXfer+0x534>)
 8008d96:	4013      	ands	r3, r2
 8008d98:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008d9a:	69bb      	ldr	r3, [r7, #24]
 8008d9c:	015a      	lsls	r2, r3, #5
 8008d9e:	69fb      	ldr	r3, [r7, #28]
 8008da0:	4413      	add	r3, r2
 8008da2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008da6:	691a      	ldr	r2, [r3, #16]
 8008da8:	69bb      	ldr	r3, [r7, #24]
 8008daa:	0159      	lsls	r1, r3, #5
 8008dac:	69fb      	ldr	r3, [r7, #28]
 8008dae:	440b      	add	r3, r1
 8008db0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008db4:	4619      	mov	r1, r3
 8008db6:	4b75      	ldr	r3, [pc, #468]	; (8008f8c <USB_EPStartXfer+0x538>)
 8008db8:	4013      	ands	r3, r2
 8008dba:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 8008dbc:	69bb      	ldr	r3, [r7, #24]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d12f      	bne.n	8008e22 <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 8008dc2:	68bb      	ldr	r3, [r7, #8]
 8008dc4:	691b      	ldr	r3, [r3, #16]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d003      	beq.n	8008dd2 <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 8008dca:	68bb      	ldr	r3, [r7, #8]
 8008dcc:	689a      	ldr	r2, [r3, #8]
 8008dce:	68bb      	ldr	r3, [r7, #8]
 8008dd0:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8008dd2:	68bb      	ldr	r3, [r7, #8]
 8008dd4:	689a      	ldr	r2, [r3, #8]
 8008dd6:	68bb      	ldr	r3, [r7, #8]
 8008dd8:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8008dda:	69bb      	ldr	r3, [r7, #24]
 8008ddc:	015a      	lsls	r2, r3, #5
 8008dde:	69fb      	ldr	r3, [r7, #28]
 8008de0:	4413      	add	r3, r2
 8008de2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008de6:	691a      	ldr	r2, [r3, #16]
 8008de8:	68bb      	ldr	r3, [r7, #8]
 8008dea:	6a1b      	ldr	r3, [r3, #32]
 8008dec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008df0:	69b9      	ldr	r1, [r7, #24]
 8008df2:	0148      	lsls	r0, r1, #5
 8008df4:	69f9      	ldr	r1, [r7, #28]
 8008df6:	4401      	add	r1, r0
 8008df8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008dfc:	4313      	orrs	r3, r2
 8008dfe:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008e00:	69bb      	ldr	r3, [r7, #24]
 8008e02:	015a      	lsls	r2, r3, #5
 8008e04:	69fb      	ldr	r3, [r7, #28]
 8008e06:	4413      	add	r3, r2
 8008e08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e0c:	691b      	ldr	r3, [r3, #16]
 8008e0e:	69ba      	ldr	r2, [r7, #24]
 8008e10:	0151      	lsls	r1, r2, #5
 8008e12:	69fa      	ldr	r2, [r7, #28]
 8008e14:	440a      	add	r2, r1
 8008e16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e1a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008e1e:	6113      	str	r3, [r2, #16]
 8008e20:	e05f      	b.n	8008ee2 <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8008e22:	68bb      	ldr	r3, [r7, #8]
 8008e24:	691b      	ldr	r3, [r3, #16]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d123      	bne.n	8008e72 <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008e2a:	69bb      	ldr	r3, [r7, #24]
 8008e2c:	015a      	lsls	r2, r3, #5
 8008e2e:	69fb      	ldr	r3, [r7, #28]
 8008e30:	4413      	add	r3, r2
 8008e32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e36:	691a      	ldr	r2, [r3, #16]
 8008e38:	68bb      	ldr	r3, [r7, #8]
 8008e3a:	689b      	ldr	r3, [r3, #8]
 8008e3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008e40:	69b9      	ldr	r1, [r7, #24]
 8008e42:	0148      	lsls	r0, r1, #5
 8008e44:	69f9      	ldr	r1, [r7, #28]
 8008e46:	4401      	add	r1, r0
 8008e48:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008e4c:	4313      	orrs	r3, r2
 8008e4e:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008e50:	69bb      	ldr	r3, [r7, #24]
 8008e52:	015a      	lsls	r2, r3, #5
 8008e54:	69fb      	ldr	r3, [r7, #28]
 8008e56:	4413      	add	r3, r2
 8008e58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e5c:	691b      	ldr	r3, [r3, #16]
 8008e5e:	69ba      	ldr	r2, [r7, #24]
 8008e60:	0151      	lsls	r1, r2, #5
 8008e62:	69fa      	ldr	r2, [r7, #28]
 8008e64:	440a      	add	r2, r1
 8008e66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e6a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008e6e:	6113      	str	r3, [r2, #16]
 8008e70:	e037      	b.n	8008ee2 <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008e72:	68bb      	ldr	r3, [r7, #8]
 8008e74:	691a      	ldr	r2, [r3, #16]
 8008e76:	68bb      	ldr	r3, [r7, #8]
 8008e78:	689b      	ldr	r3, [r3, #8]
 8008e7a:	4413      	add	r3, r2
 8008e7c:	1e5a      	subs	r2, r3, #1
 8008e7e:	68bb      	ldr	r3, [r7, #8]
 8008e80:	689b      	ldr	r3, [r3, #8]
 8008e82:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e86:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8008e88:	68bb      	ldr	r3, [r7, #8]
 8008e8a:	689b      	ldr	r3, [r3, #8]
 8008e8c:	8afa      	ldrh	r2, [r7, #22]
 8008e8e:	fb03 f202 	mul.w	r2, r3, r2
 8008e92:	68bb      	ldr	r3, [r7, #8]
 8008e94:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008e96:	69bb      	ldr	r3, [r7, #24]
 8008e98:	015a      	lsls	r2, r3, #5
 8008e9a:	69fb      	ldr	r3, [r7, #28]
 8008e9c:	4413      	add	r3, r2
 8008e9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ea2:	691a      	ldr	r2, [r3, #16]
 8008ea4:	8afb      	ldrh	r3, [r7, #22]
 8008ea6:	04d9      	lsls	r1, r3, #19
 8008ea8:	4b39      	ldr	r3, [pc, #228]	; (8008f90 <USB_EPStartXfer+0x53c>)
 8008eaa:	400b      	ands	r3, r1
 8008eac:	69b9      	ldr	r1, [r7, #24]
 8008eae:	0148      	lsls	r0, r1, #5
 8008eb0:	69f9      	ldr	r1, [r7, #28]
 8008eb2:	4401      	add	r1, r0
 8008eb4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008eb8:	4313      	orrs	r3, r2
 8008eba:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8008ebc:	69bb      	ldr	r3, [r7, #24]
 8008ebe:	015a      	lsls	r2, r3, #5
 8008ec0:	69fb      	ldr	r3, [r7, #28]
 8008ec2:	4413      	add	r3, r2
 8008ec4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ec8:	691a      	ldr	r2, [r3, #16]
 8008eca:	68bb      	ldr	r3, [r7, #8]
 8008ecc:	6a1b      	ldr	r3, [r3, #32]
 8008ece:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008ed2:	69b9      	ldr	r1, [r7, #24]
 8008ed4:	0148      	lsls	r0, r1, #5
 8008ed6:	69f9      	ldr	r1, [r7, #28]
 8008ed8:	4401      	add	r1, r0
 8008eda:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008ede:	4313      	orrs	r3, r2
 8008ee0:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8008ee2:	79fb      	ldrb	r3, [r7, #7]
 8008ee4:	2b01      	cmp	r3, #1
 8008ee6:	d10d      	bne.n	8008f04 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008ee8:	68bb      	ldr	r3, [r7, #8]
 8008eea:	68db      	ldr	r3, [r3, #12]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d009      	beq.n	8008f04 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008ef0:	68bb      	ldr	r3, [r7, #8]
 8008ef2:	68d9      	ldr	r1, [r3, #12]
 8008ef4:	69bb      	ldr	r3, [r7, #24]
 8008ef6:	015a      	lsls	r2, r3, #5
 8008ef8:	69fb      	ldr	r3, [r7, #28]
 8008efa:	4413      	add	r3, r2
 8008efc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f00:	460a      	mov	r2, r1
 8008f02:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008f04:	68bb      	ldr	r3, [r7, #8]
 8008f06:	791b      	ldrb	r3, [r3, #4]
 8008f08:	2b01      	cmp	r3, #1
 8008f0a:	d128      	bne.n	8008f5e <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008f0c:	69fb      	ldr	r3, [r7, #28]
 8008f0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f12:	689b      	ldr	r3, [r3, #8]
 8008f14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d110      	bne.n	8008f3e <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008f1c:	69bb      	ldr	r3, [r7, #24]
 8008f1e:	015a      	lsls	r2, r3, #5
 8008f20:	69fb      	ldr	r3, [r7, #28]
 8008f22:	4413      	add	r3, r2
 8008f24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	69ba      	ldr	r2, [r7, #24]
 8008f2c:	0151      	lsls	r1, r2, #5
 8008f2e:	69fa      	ldr	r2, [r7, #28]
 8008f30:	440a      	add	r2, r1
 8008f32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f36:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008f3a:	6013      	str	r3, [r2, #0]
 8008f3c:	e00f      	b.n	8008f5e <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008f3e:	69bb      	ldr	r3, [r7, #24]
 8008f40:	015a      	lsls	r2, r3, #5
 8008f42:	69fb      	ldr	r3, [r7, #28]
 8008f44:	4413      	add	r3, r2
 8008f46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	69ba      	ldr	r2, [r7, #24]
 8008f4e:	0151      	lsls	r1, r2, #5
 8008f50:	69fa      	ldr	r2, [r7, #28]
 8008f52:	440a      	add	r2, r1
 8008f54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008f5c:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008f5e:	69bb      	ldr	r3, [r7, #24]
 8008f60:	015a      	lsls	r2, r3, #5
 8008f62:	69fb      	ldr	r3, [r7, #28]
 8008f64:	4413      	add	r3, r2
 8008f66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	69ba      	ldr	r2, [r7, #24]
 8008f6e:	0151      	lsls	r1, r2, #5
 8008f70:	69fa      	ldr	r2, [r7, #28]
 8008f72:	440a      	add	r2, r1
 8008f74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f78:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008f7c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008f7e:	2300      	movs	r3, #0
}
 8008f80:	4618      	mov	r0, r3
 8008f82:	3720      	adds	r7, #32
 8008f84:	46bd      	mov	sp, r7
 8008f86:	bd80      	pop	{r7, pc}
 8008f88:	fff80000 	.word	0xfff80000
 8008f8c:	e007ffff 	.word	0xe007ffff
 8008f90:	1ff80000 	.word	0x1ff80000

08008f94 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008f94:	b480      	push	{r7}
 8008f96:	b087      	sub	sp, #28
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
 8008f9c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008faa:	683b      	ldr	r3, [r7, #0]
 8008fac:	785b      	ldrb	r3, [r3, #1]
 8008fae:	2b01      	cmp	r3, #1
 8008fb0:	d14a      	bne.n	8009048 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008fb2:	683b      	ldr	r3, [r7, #0]
 8008fb4:	781b      	ldrb	r3, [r3, #0]
 8008fb6:	015a      	lsls	r2, r3, #5
 8008fb8:	693b      	ldr	r3, [r7, #16]
 8008fba:	4413      	add	r3, r2
 8008fbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008fc6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008fca:	f040 8086 	bne.w	80090da <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8008fce:	683b      	ldr	r3, [r7, #0]
 8008fd0:	781b      	ldrb	r3, [r3, #0]
 8008fd2:	015a      	lsls	r2, r3, #5
 8008fd4:	693b      	ldr	r3, [r7, #16]
 8008fd6:	4413      	add	r3, r2
 8008fd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	683a      	ldr	r2, [r7, #0]
 8008fe0:	7812      	ldrb	r2, [r2, #0]
 8008fe2:	0151      	lsls	r1, r2, #5
 8008fe4:	693a      	ldr	r2, [r7, #16]
 8008fe6:	440a      	add	r2, r1
 8008fe8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008fec:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008ff0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8008ff2:	683b      	ldr	r3, [r7, #0]
 8008ff4:	781b      	ldrb	r3, [r3, #0]
 8008ff6:	015a      	lsls	r2, r3, #5
 8008ff8:	693b      	ldr	r3, [r7, #16]
 8008ffa:	4413      	add	r3, r2
 8008ffc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	683a      	ldr	r2, [r7, #0]
 8009004:	7812      	ldrb	r2, [r2, #0]
 8009006:	0151      	lsls	r1, r2, #5
 8009008:	693a      	ldr	r2, [r7, #16]
 800900a:	440a      	add	r2, r1
 800900c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009010:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009014:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	3301      	adds	r3, #1
 800901a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	f242 7210 	movw	r2, #10000	; 0x2710
 8009022:	4293      	cmp	r3, r2
 8009024:	d902      	bls.n	800902c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8009026:	2301      	movs	r3, #1
 8009028:	75fb      	strb	r3, [r7, #23]
          break;
 800902a:	e056      	b.n	80090da <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	781b      	ldrb	r3, [r3, #0]
 8009030:	015a      	lsls	r2, r3, #5
 8009032:	693b      	ldr	r3, [r7, #16]
 8009034:	4413      	add	r3, r2
 8009036:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009040:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009044:	d0e7      	beq.n	8009016 <USB_EPStopXfer+0x82>
 8009046:	e048      	b.n	80090da <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009048:	683b      	ldr	r3, [r7, #0]
 800904a:	781b      	ldrb	r3, [r3, #0]
 800904c:	015a      	lsls	r2, r3, #5
 800904e:	693b      	ldr	r3, [r7, #16]
 8009050:	4413      	add	r3, r2
 8009052:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800905c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009060:	d13b      	bne.n	80090da <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	781b      	ldrb	r3, [r3, #0]
 8009066:	015a      	lsls	r2, r3, #5
 8009068:	693b      	ldr	r3, [r7, #16]
 800906a:	4413      	add	r3, r2
 800906c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	683a      	ldr	r2, [r7, #0]
 8009074:	7812      	ldrb	r2, [r2, #0]
 8009076:	0151      	lsls	r1, r2, #5
 8009078:	693a      	ldr	r2, [r7, #16]
 800907a:	440a      	add	r2, r1
 800907c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009080:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009084:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8009086:	683b      	ldr	r3, [r7, #0]
 8009088:	781b      	ldrb	r3, [r3, #0]
 800908a:	015a      	lsls	r2, r3, #5
 800908c:	693b      	ldr	r3, [r7, #16]
 800908e:	4413      	add	r3, r2
 8009090:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	683a      	ldr	r2, [r7, #0]
 8009098:	7812      	ldrb	r2, [r2, #0]
 800909a:	0151      	lsls	r1, r2, #5
 800909c:	693a      	ldr	r2, [r7, #16]
 800909e:	440a      	add	r2, r1
 80090a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80090a4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80090a8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	3301      	adds	r3, #1
 80090ae:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	f242 7210 	movw	r2, #10000	; 0x2710
 80090b6:	4293      	cmp	r3, r2
 80090b8:	d902      	bls.n	80090c0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80090ba:	2301      	movs	r3, #1
 80090bc:	75fb      	strb	r3, [r7, #23]
          break;
 80090be:	e00c      	b.n	80090da <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80090c0:	683b      	ldr	r3, [r7, #0]
 80090c2:	781b      	ldrb	r3, [r3, #0]
 80090c4:	015a      	lsls	r2, r3, #5
 80090c6:	693b      	ldr	r3, [r7, #16]
 80090c8:	4413      	add	r3, r2
 80090ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80090d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80090d8:	d0e7      	beq.n	80090aa <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80090da:	7dfb      	ldrb	r3, [r7, #23]
}
 80090dc:	4618      	mov	r0, r3
 80090de:	371c      	adds	r7, #28
 80090e0:	46bd      	mov	sp, r7
 80090e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e6:	4770      	bx	lr

080090e8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80090e8:	b480      	push	{r7}
 80090ea:	b089      	sub	sp, #36	; 0x24
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	60f8      	str	r0, [r7, #12]
 80090f0:	60b9      	str	r1, [r7, #8]
 80090f2:	4611      	mov	r1, r2
 80090f4:	461a      	mov	r2, r3
 80090f6:	460b      	mov	r3, r1
 80090f8:	71fb      	strb	r3, [r7, #7]
 80090fa:	4613      	mov	r3, r2
 80090fc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009102:	68bb      	ldr	r3, [r7, #8]
 8009104:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009106:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800910a:	2b00      	cmp	r3, #0
 800910c:	d123      	bne.n	8009156 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800910e:	88bb      	ldrh	r3, [r7, #4]
 8009110:	3303      	adds	r3, #3
 8009112:	089b      	lsrs	r3, r3, #2
 8009114:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009116:	2300      	movs	r3, #0
 8009118:	61bb      	str	r3, [r7, #24]
 800911a:	e018      	b.n	800914e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800911c:	79fb      	ldrb	r3, [r7, #7]
 800911e:	031a      	lsls	r2, r3, #12
 8009120:	697b      	ldr	r3, [r7, #20]
 8009122:	4413      	add	r3, r2
 8009124:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009128:	461a      	mov	r2, r3
 800912a:	69fb      	ldr	r3, [r7, #28]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009130:	69fb      	ldr	r3, [r7, #28]
 8009132:	3301      	adds	r3, #1
 8009134:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009136:	69fb      	ldr	r3, [r7, #28]
 8009138:	3301      	adds	r3, #1
 800913a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800913c:	69fb      	ldr	r3, [r7, #28]
 800913e:	3301      	adds	r3, #1
 8009140:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009142:	69fb      	ldr	r3, [r7, #28]
 8009144:	3301      	adds	r3, #1
 8009146:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009148:	69bb      	ldr	r3, [r7, #24]
 800914a:	3301      	adds	r3, #1
 800914c:	61bb      	str	r3, [r7, #24]
 800914e:	69ba      	ldr	r2, [r7, #24]
 8009150:	693b      	ldr	r3, [r7, #16]
 8009152:	429a      	cmp	r2, r3
 8009154:	d3e2      	bcc.n	800911c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009156:	2300      	movs	r3, #0
}
 8009158:	4618      	mov	r0, r3
 800915a:	3724      	adds	r7, #36	; 0x24
 800915c:	46bd      	mov	sp, r7
 800915e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009162:	4770      	bx	lr

08009164 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009164:	b480      	push	{r7}
 8009166:	b08b      	sub	sp, #44	; 0x2c
 8009168:	af00      	add	r7, sp, #0
 800916a:	60f8      	str	r0, [r7, #12]
 800916c:	60b9      	str	r1, [r7, #8]
 800916e:	4613      	mov	r3, r2
 8009170:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009176:	68bb      	ldr	r3, [r7, #8]
 8009178:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800917a:	88fb      	ldrh	r3, [r7, #6]
 800917c:	089b      	lsrs	r3, r3, #2
 800917e:	b29b      	uxth	r3, r3
 8009180:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009182:	88fb      	ldrh	r3, [r7, #6]
 8009184:	f003 0303 	and.w	r3, r3, #3
 8009188:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800918a:	2300      	movs	r3, #0
 800918c:	623b      	str	r3, [r7, #32]
 800918e:	e014      	b.n	80091ba <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009190:	69bb      	ldr	r3, [r7, #24]
 8009192:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009196:	681a      	ldr	r2, [r3, #0]
 8009198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800919a:	601a      	str	r2, [r3, #0]
    pDest++;
 800919c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800919e:	3301      	adds	r3, #1
 80091a0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80091a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091a4:	3301      	adds	r3, #1
 80091a6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80091a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091aa:	3301      	adds	r3, #1
 80091ac:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80091ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091b0:	3301      	adds	r3, #1
 80091b2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80091b4:	6a3b      	ldr	r3, [r7, #32]
 80091b6:	3301      	adds	r3, #1
 80091b8:	623b      	str	r3, [r7, #32]
 80091ba:	6a3a      	ldr	r2, [r7, #32]
 80091bc:	697b      	ldr	r3, [r7, #20]
 80091be:	429a      	cmp	r2, r3
 80091c0:	d3e6      	bcc.n	8009190 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80091c2:	8bfb      	ldrh	r3, [r7, #30]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d01e      	beq.n	8009206 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80091c8:	2300      	movs	r3, #0
 80091ca:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80091cc:	69bb      	ldr	r3, [r7, #24]
 80091ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80091d2:	461a      	mov	r2, r3
 80091d4:	f107 0310 	add.w	r3, r7, #16
 80091d8:	6812      	ldr	r2, [r2, #0]
 80091da:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80091dc:	693a      	ldr	r2, [r7, #16]
 80091de:	6a3b      	ldr	r3, [r7, #32]
 80091e0:	b2db      	uxtb	r3, r3
 80091e2:	00db      	lsls	r3, r3, #3
 80091e4:	fa22 f303 	lsr.w	r3, r2, r3
 80091e8:	b2da      	uxtb	r2, r3
 80091ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091ec:	701a      	strb	r2, [r3, #0]
      i++;
 80091ee:	6a3b      	ldr	r3, [r7, #32]
 80091f0:	3301      	adds	r3, #1
 80091f2:	623b      	str	r3, [r7, #32]
      pDest++;
 80091f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091f6:	3301      	adds	r3, #1
 80091f8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80091fa:	8bfb      	ldrh	r3, [r7, #30]
 80091fc:	3b01      	subs	r3, #1
 80091fe:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009200:	8bfb      	ldrh	r3, [r7, #30]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d1ea      	bne.n	80091dc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009208:	4618      	mov	r0, r3
 800920a:	372c      	adds	r7, #44	; 0x2c
 800920c:	46bd      	mov	sp, r7
 800920e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009212:	4770      	bx	lr

08009214 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009214:	b480      	push	{r7}
 8009216:	b085      	sub	sp, #20
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
 800921c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009222:	683b      	ldr	r3, [r7, #0]
 8009224:	781b      	ldrb	r3, [r3, #0]
 8009226:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009228:	683b      	ldr	r3, [r7, #0]
 800922a:	785b      	ldrb	r3, [r3, #1]
 800922c:	2b01      	cmp	r3, #1
 800922e:	d12c      	bne.n	800928a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009230:	68bb      	ldr	r3, [r7, #8]
 8009232:	015a      	lsls	r2, r3, #5
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	4413      	add	r3, r2
 8009238:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	2b00      	cmp	r3, #0
 8009240:	db12      	blt.n	8009268 <USB_EPSetStall+0x54>
 8009242:	68bb      	ldr	r3, [r7, #8]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d00f      	beq.n	8009268 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009248:	68bb      	ldr	r3, [r7, #8]
 800924a:	015a      	lsls	r2, r3, #5
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	4413      	add	r3, r2
 8009250:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	68ba      	ldr	r2, [r7, #8]
 8009258:	0151      	lsls	r1, r2, #5
 800925a:	68fa      	ldr	r2, [r7, #12]
 800925c:	440a      	add	r2, r1
 800925e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009262:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009266:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009268:	68bb      	ldr	r3, [r7, #8]
 800926a:	015a      	lsls	r2, r3, #5
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	4413      	add	r3, r2
 8009270:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	68ba      	ldr	r2, [r7, #8]
 8009278:	0151      	lsls	r1, r2, #5
 800927a:	68fa      	ldr	r2, [r7, #12]
 800927c:	440a      	add	r2, r1
 800927e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009282:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009286:	6013      	str	r3, [r2, #0]
 8009288:	e02b      	b.n	80092e2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800928a:	68bb      	ldr	r3, [r7, #8]
 800928c:	015a      	lsls	r2, r3, #5
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	4413      	add	r3, r2
 8009292:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	2b00      	cmp	r3, #0
 800929a:	db12      	blt.n	80092c2 <USB_EPSetStall+0xae>
 800929c:	68bb      	ldr	r3, [r7, #8]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d00f      	beq.n	80092c2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80092a2:	68bb      	ldr	r3, [r7, #8]
 80092a4:	015a      	lsls	r2, r3, #5
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	4413      	add	r3, r2
 80092aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	68ba      	ldr	r2, [r7, #8]
 80092b2:	0151      	lsls	r1, r2, #5
 80092b4:	68fa      	ldr	r2, [r7, #12]
 80092b6:	440a      	add	r2, r1
 80092b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80092bc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80092c0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80092c2:	68bb      	ldr	r3, [r7, #8]
 80092c4:	015a      	lsls	r2, r3, #5
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	4413      	add	r3, r2
 80092ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	68ba      	ldr	r2, [r7, #8]
 80092d2:	0151      	lsls	r1, r2, #5
 80092d4:	68fa      	ldr	r2, [r7, #12]
 80092d6:	440a      	add	r2, r1
 80092d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80092dc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80092e0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80092e2:	2300      	movs	r3, #0
}
 80092e4:	4618      	mov	r0, r3
 80092e6:	3714      	adds	r7, #20
 80092e8:	46bd      	mov	sp, r7
 80092ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ee:	4770      	bx	lr

080092f0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80092f0:	b480      	push	{r7}
 80092f2:	b085      	sub	sp, #20
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
 80092f8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80092fe:	683b      	ldr	r3, [r7, #0]
 8009300:	781b      	ldrb	r3, [r3, #0]
 8009302:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009304:	683b      	ldr	r3, [r7, #0]
 8009306:	785b      	ldrb	r3, [r3, #1]
 8009308:	2b01      	cmp	r3, #1
 800930a:	d128      	bne.n	800935e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800930c:	68bb      	ldr	r3, [r7, #8]
 800930e:	015a      	lsls	r2, r3, #5
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	4413      	add	r3, r2
 8009314:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	68ba      	ldr	r2, [r7, #8]
 800931c:	0151      	lsls	r1, r2, #5
 800931e:	68fa      	ldr	r2, [r7, #12]
 8009320:	440a      	add	r2, r1
 8009322:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009326:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800932a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800932c:	683b      	ldr	r3, [r7, #0]
 800932e:	791b      	ldrb	r3, [r3, #4]
 8009330:	2b03      	cmp	r3, #3
 8009332:	d003      	beq.n	800933c <USB_EPClearStall+0x4c>
 8009334:	683b      	ldr	r3, [r7, #0]
 8009336:	791b      	ldrb	r3, [r3, #4]
 8009338:	2b02      	cmp	r3, #2
 800933a:	d138      	bne.n	80093ae <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800933c:	68bb      	ldr	r3, [r7, #8]
 800933e:	015a      	lsls	r2, r3, #5
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	4413      	add	r3, r2
 8009344:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	68ba      	ldr	r2, [r7, #8]
 800934c:	0151      	lsls	r1, r2, #5
 800934e:	68fa      	ldr	r2, [r7, #12]
 8009350:	440a      	add	r2, r1
 8009352:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009356:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800935a:	6013      	str	r3, [r2, #0]
 800935c:	e027      	b.n	80093ae <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800935e:	68bb      	ldr	r3, [r7, #8]
 8009360:	015a      	lsls	r2, r3, #5
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	4413      	add	r3, r2
 8009366:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	68ba      	ldr	r2, [r7, #8]
 800936e:	0151      	lsls	r1, r2, #5
 8009370:	68fa      	ldr	r2, [r7, #12]
 8009372:	440a      	add	r2, r1
 8009374:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009378:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800937c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800937e:	683b      	ldr	r3, [r7, #0]
 8009380:	791b      	ldrb	r3, [r3, #4]
 8009382:	2b03      	cmp	r3, #3
 8009384:	d003      	beq.n	800938e <USB_EPClearStall+0x9e>
 8009386:	683b      	ldr	r3, [r7, #0]
 8009388:	791b      	ldrb	r3, [r3, #4]
 800938a:	2b02      	cmp	r3, #2
 800938c:	d10f      	bne.n	80093ae <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800938e:	68bb      	ldr	r3, [r7, #8]
 8009390:	015a      	lsls	r2, r3, #5
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	4413      	add	r3, r2
 8009396:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	68ba      	ldr	r2, [r7, #8]
 800939e:	0151      	lsls	r1, r2, #5
 80093a0:	68fa      	ldr	r2, [r7, #12]
 80093a2:	440a      	add	r2, r1
 80093a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80093a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80093ac:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80093ae:	2300      	movs	r3, #0
}
 80093b0:	4618      	mov	r0, r3
 80093b2:	3714      	adds	r7, #20
 80093b4:	46bd      	mov	sp, r7
 80093b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ba:	4770      	bx	lr

080093bc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80093bc:	b480      	push	{r7}
 80093be:	b085      	sub	sp, #20
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
 80093c4:	460b      	mov	r3, r1
 80093c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	68fa      	ldr	r2, [r7, #12]
 80093d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80093da:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80093de:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093e6:	681a      	ldr	r2, [r3, #0]
 80093e8:	78fb      	ldrb	r3, [r7, #3]
 80093ea:	011b      	lsls	r3, r3, #4
 80093ec:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80093f0:	68f9      	ldr	r1, [r7, #12]
 80093f2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80093f6:	4313      	orrs	r3, r2
 80093f8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80093fa:	2300      	movs	r3, #0
}
 80093fc:	4618      	mov	r0, r3
 80093fe:	3714      	adds	r7, #20
 8009400:	46bd      	mov	sp, r7
 8009402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009406:	4770      	bx	lr

08009408 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009408:	b480      	push	{r7}
 800940a:	b085      	sub	sp, #20
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	68fa      	ldr	r2, [r7, #12]
 800941e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009422:	f023 0303 	bic.w	r3, r3, #3
 8009426:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800942e:	685b      	ldr	r3, [r3, #4]
 8009430:	68fa      	ldr	r2, [r7, #12]
 8009432:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009436:	f023 0302 	bic.w	r3, r3, #2
 800943a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800943c:	2300      	movs	r3, #0
}
 800943e:	4618      	mov	r0, r3
 8009440:	3714      	adds	r7, #20
 8009442:	46bd      	mov	sp, r7
 8009444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009448:	4770      	bx	lr

0800944a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800944a:	b480      	push	{r7}
 800944c:	b085      	sub	sp, #20
 800944e:	af00      	add	r7, sp, #0
 8009450:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	68fa      	ldr	r2, [r7, #12]
 8009460:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009464:	f023 0303 	bic.w	r3, r3, #3
 8009468:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009470:	685b      	ldr	r3, [r3, #4]
 8009472:	68fa      	ldr	r2, [r7, #12]
 8009474:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009478:	f043 0302 	orr.w	r3, r3, #2
 800947c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800947e:	2300      	movs	r3, #0
}
 8009480:	4618      	mov	r0, r3
 8009482:	3714      	adds	r7, #20
 8009484:	46bd      	mov	sp, r7
 8009486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948a:	4770      	bx	lr

0800948c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800948c:	b480      	push	{r7}
 800948e:	b085      	sub	sp, #20
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	695b      	ldr	r3, [r3, #20]
 8009498:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	699b      	ldr	r3, [r3, #24]
 800949e:	68fa      	ldr	r2, [r7, #12]
 80094a0:	4013      	ands	r3, r2
 80094a2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80094a4:	68fb      	ldr	r3, [r7, #12]
}
 80094a6:	4618      	mov	r0, r3
 80094a8:	3714      	adds	r7, #20
 80094aa:	46bd      	mov	sp, r7
 80094ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b0:	4770      	bx	lr

080094b2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80094b2:	b480      	push	{r7}
 80094b4:	b085      	sub	sp, #20
 80094b6:	af00      	add	r7, sp, #0
 80094b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094c4:	699b      	ldr	r3, [r3, #24]
 80094c6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094ce:	69db      	ldr	r3, [r3, #28]
 80094d0:	68ba      	ldr	r2, [r7, #8]
 80094d2:	4013      	ands	r3, r2
 80094d4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80094d6:	68bb      	ldr	r3, [r7, #8]
 80094d8:	0c1b      	lsrs	r3, r3, #16
}
 80094da:	4618      	mov	r0, r3
 80094dc:	3714      	adds	r7, #20
 80094de:	46bd      	mov	sp, r7
 80094e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e4:	4770      	bx	lr

080094e6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80094e6:	b480      	push	{r7}
 80094e8:	b085      	sub	sp, #20
 80094ea:	af00      	add	r7, sp, #0
 80094ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094f8:	699b      	ldr	r3, [r3, #24]
 80094fa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009502:	69db      	ldr	r3, [r3, #28]
 8009504:	68ba      	ldr	r2, [r7, #8]
 8009506:	4013      	ands	r3, r2
 8009508:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800950a:	68bb      	ldr	r3, [r7, #8]
 800950c:	b29b      	uxth	r3, r3
}
 800950e:	4618      	mov	r0, r3
 8009510:	3714      	adds	r7, #20
 8009512:	46bd      	mov	sp, r7
 8009514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009518:	4770      	bx	lr

0800951a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800951a:	b480      	push	{r7}
 800951c:	b085      	sub	sp, #20
 800951e:	af00      	add	r7, sp, #0
 8009520:	6078      	str	r0, [r7, #4]
 8009522:	460b      	mov	r3, r1
 8009524:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800952a:	78fb      	ldrb	r3, [r7, #3]
 800952c:	015a      	lsls	r2, r3, #5
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	4413      	add	r3, r2
 8009532:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009536:	689b      	ldr	r3, [r3, #8]
 8009538:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009540:	695b      	ldr	r3, [r3, #20]
 8009542:	68ba      	ldr	r2, [r7, #8]
 8009544:	4013      	ands	r3, r2
 8009546:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009548:	68bb      	ldr	r3, [r7, #8]
}
 800954a:	4618      	mov	r0, r3
 800954c:	3714      	adds	r7, #20
 800954e:	46bd      	mov	sp, r7
 8009550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009554:	4770      	bx	lr

08009556 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009556:	b480      	push	{r7}
 8009558:	b087      	sub	sp, #28
 800955a:	af00      	add	r7, sp, #0
 800955c:	6078      	str	r0, [r7, #4]
 800955e:	460b      	mov	r3, r1
 8009560:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009566:	697b      	ldr	r3, [r7, #20]
 8009568:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800956c:	691b      	ldr	r3, [r3, #16]
 800956e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009570:	697b      	ldr	r3, [r7, #20]
 8009572:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009576:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009578:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800957a:	78fb      	ldrb	r3, [r7, #3]
 800957c:	f003 030f 	and.w	r3, r3, #15
 8009580:	68fa      	ldr	r2, [r7, #12]
 8009582:	fa22 f303 	lsr.w	r3, r2, r3
 8009586:	01db      	lsls	r3, r3, #7
 8009588:	b2db      	uxtb	r3, r3
 800958a:	693a      	ldr	r2, [r7, #16]
 800958c:	4313      	orrs	r3, r2
 800958e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009590:	78fb      	ldrb	r3, [r7, #3]
 8009592:	015a      	lsls	r2, r3, #5
 8009594:	697b      	ldr	r3, [r7, #20]
 8009596:	4413      	add	r3, r2
 8009598:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800959c:	689b      	ldr	r3, [r3, #8]
 800959e:	693a      	ldr	r2, [r7, #16]
 80095a0:	4013      	ands	r3, r2
 80095a2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80095a4:	68bb      	ldr	r3, [r7, #8]
}
 80095a6:	4618      	mov	r0, r3
 80095a8:	371c      	adds	r7, #28
 80095aa:	46bd      	mov	sp, r7
 80095ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b0:	4770      	bx	lr

080095b2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80095b2:	b480      	push	{r7}
 80095b4:	b083      	sub	sp, #12
 80095b6:	af00      	add	r7, sp, #0
 80095b8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	695b      	ldr	r3, [r3, #20]
 80095be:	f003 0301 	and.w	r3, r3, #1
}
 80095c2:	4618      	mov	r0, r3
 80095c4:	370c      	adds	r7, #12
 80095c6:	46bd      	mov	sp, r7
 80095c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095cc:	4770      	bx	lr
	...

080095d0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80095d0:	b480      	push	{r7}
 80095d2:	b085      	sub	sp, #20
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095e2:	681a      	ldr	r2, [r3, #0]
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095ea:	4619      	mov	r1, r3
 80095ec:	4b09      	ldr	r3, [pc, #36]	; (8009614 <USB_ActivateSetup+0x44>)
 80095ee:	4013      	ands	r3, r2
 80095f0:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095f8:	685b      	ldr	r3, [r3, #4]
 80095fa:	68fa      	ldr	r2, [r7, #12]
 80095fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009600:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009604:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009606:	2300      	movs	r3, #0
}
 8009608:	4618      	mov	r0, r3
 800960a:	3714      	adds	r7, #20
 800960c:	46bd      	mov	sp, r7
 800960e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009612:	4770      	bx	lr
 8009614:	fffff800 	.word	0xfffff800

08009618 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8009618:	b480      	push	{r7}
 800961a:	b087      	sub	sp, #28
 800961c:	af00      	add	r7, sp, #0
 800961e:	60f8      	str	r0, [r7, #12]
 8009620:	460b      	mov	r3, r1
 8009622:	607a      	str	r2, [r7, #4]
 8009624:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	333c      	adds	r3, #60	; 0x3c
 800962e:	3304      	adds	r3, #4
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009634:	693b      	ldr	r3, [r7, #16]
 8009636:	4a26      	ldr	r2, [pc, #152]	; (80096d0 <USB_EP0_OutStart+0xb8>)
 8009638:	4293      	cmp	r3, r2
 800963a:	d90a      	bls.n	8009652 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800963c:	697b      	ldr	r3, [r7, #20]
 800963e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009648:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800964c:	d101      	bne.n	8009652 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800964e:	2300      	movs	r3, #0
 8009650:	e037      	b.n	80096c2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009652:	697b      	ldr	r3, [r7, #20]
 8009654:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009658:	461a      	mov	r2, r3
 800965a:	2300      	movs	r3, #0
 800965c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800965e:	697b      	ldr	r3, [r7, #20]
 8009660:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009664:	691b      	ldr	r3, [r3, #16]
 8009666:	697a      	ldr	r2, [r7, #20]
 8009668:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800966c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009670:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009672:	697b      	ldr	r3, [r7, #20]
 8009674:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009678:	691b      	ldr	r3, [r3, #16]
 800967a:	697a      	ldr	r2, [r7, #20]
 800967c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009680:	f043 0318 	orr.w	r3, r3, #24
 8009684:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009686:	697b      	ldr	r3, [r7, #20]
 8009688:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800968c:	691b      	ldr	r3, [r3, #16]
 800968e:	697a      	ldr	r2, [r7, #20]
 8009690:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009694:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8009698:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800969a:	7afb      	ldrb	r3, [r7, #11]
 800969c:	2b01      	cmp	r3, #1
 800969e:	d10f      	bne.n	80096c0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80096a0:	697b      	ldr	r3, [r7, #20]
 80096a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096a6:	461a      	mov	r2, r3
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80096ac:	697b      	ldr	r3, [r7, #20]
 80096ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	697a      	ldr	r2, [r7, #20]
 80096b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80096ba:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80096be:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80096c0:	2300      	movs	r3, #0
}
 80096c2:	4618      	mov	r0, r3
 80096c4:	371c      	adds	r7, #28
 80096c6:	46bd      	mov	sp, r7
 80096c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096cc:	4770      	bx	lr
 80096ce:	bf00      	nop
 80096d0:	4f54300a 	.word	0x4f54300a

080096d4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80096d4:	b480      	push	{r7}
 80096d6:	b085      	sub	sp, #20
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80096dc:	2300      	movs	r3, #0
 80096de:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	3301      	adds	r3, #1
 80096e4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	4a13      	ldr	r2, [pc, #76]	; (8009738 <USB_CoreReset+0x64>)
 80096ea:	4293      	cmp	r3, r2
 80096ec:	d901      	bls.n	80096f2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80096ee:	2303      	movs	r3, #3
 80096f0:	e01b      	b.n	800972a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	691b      	ldr	r3, [r3, #16]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	daf2      	bge.n	80096e0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80096fa:	2300      	movs	r3, #0
 80096fc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	691b      	ldr	r3, [r3, #16]
 8009702:	f043 0201 	orr.w	r2, r3, #1
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	3301      	adds	r3, #1
 800970e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	4a09      	ldr	r2, [pc, #36]	; (8009738 <USB_CoreReset+0x64>)
 8009714:	4293      	cmp	r3, r2
 8009716:	d901      	bls.n	800971c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009718:	2303      	movs	r3, #3
 800971a:	e006      	b.n	800972a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	691b      	ldr	r3, [r3, #16]
 8009720:	f003 0301 	and.w	r3, r3, #1
 8009724:	2b01      	cmp	r3, #1
 8009726:	d0f0      	beq.n	800970a <USB_CoreReset+0x36>

  return HAL_OK;
 8009728:	2300      	movs	r3, #0
}
 800972a:	4618      	mov	r0, r3
 800972c:	3714      	adds	r7, #20
 800972e:	46bd      	mov	sp, r7
 8009730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009734:	4770      	bx	lr
 8009736:	bf00      	nop
 8009738:	00030d40 	.word	0x00030d40

0800973c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800973c:	b580      	push	{r7, lr}
 800973e:	b084      	sub	sp, #16
 8009740:	af00      	add	r7, sp, #0
 8009742:	6078      	str	r0, [r7, #4]
 8009744:	460b      	mov	r3, r1
 8009746:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009748:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800974c:	f002 fcba 	bl	800c0c4 <USBD_static_malloc>
 8009750:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	2b00      	cmp	r3, #0
 8009756:	d109      	bne.n	800976c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	32b0      	adds	r2, #176	; 0xb0
 8009762:	2100      	movs	r1, #0
 8009764:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8009768:	2302      	movs	r3, #2
 800976a:	e0d4      	b.n	8009916 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800976c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8009770:	2100      	movs	r1, #0
 8009772:	68f8      	ldr	r0, [r7, #12]
 8009774:	f002 ff8a 	bl	800c68c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	32b0      	adds	r2, #176	; 0xb0
 8009782:	68f9      	ldr	r1, [r7, #12]
 8009784:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	32b0      	adds	r2, #176	; 0xb0
 8009792:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	7c1b      	ldrb	r3, [r3, #16]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d138      	bne.n	8009816 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80097a4:	4b5e      	ldr	r3, [pc, #376]	; (8009920 <USBD_CDC_Init+0x1e4>)
 80097a6:	7819      	ldrb	r1, [r3, #0]
 80097a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80097ac:	2202      	movs	r2, #2
 80097ae:	6878      	ldr	r0, [r7, #4]
 80097b0:	f002 fb65 	bl	800be7e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80097b4:	4b5a      	ldr	r3, [pc, #360]	; (8009920 <USBD_CDC_Init+0x1e4>)
 80097b6:	781b      	ldrb	r3, [r3, #0]
 80097b8:	f003 020f 	and.w	r2, r3, #15
 80097bc:	6879      	ldr	r1, [r7, #4]
 80097be:	4613      	mov	r3, r2
 80097c0:	009b      	lsls	r3, r3, #2
 80097c2:	4413      	add	r3, r2
 80097c4:	009b      	lsls	r3, r3, #2
 80097c6:	440b      	add	r3, r1
 80097c8:	3324      	adds	r3, #36	; 0x24
 80097ca:	2201      	movs	r2, #1
 80097cc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80097ce:	4b55      	ldr	r3, [pc, #340]	; (8009924 <USBD_CDC_Init+0x1e8>)
 80097d0:	7819      	ldrb	r1, [r3, #0]
 80097d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80097d6:	2202      	movs	r2, #2
 80097d8:	6878      	ldr	r0, [r7, #4]
 80097da:	f002 fb50 	bl	800be7e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80097de:	4b51      	ldr	r3, [pc, #324]	; (8009924 <USBD_CDC_Init+0x1e8>)
 80097e0:	781b      	ldrb	r3, [r3, #0]
 80097e2:	f003 020f 	and.w	r2, r3, #15
 80097e6:	6879      	ldr	r1, [r7, #4]
 80097e8:	4613      	mov	r3, r2
 80097ea:	009b      	lsls	r3, r3, #2
 80097ec:	4413      	add	r3, r2
 80097ee:	009b      	lsls	r3, r3, #2
 80097f0:	440b      	add	r3, r1
 80097f2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80097f6:	2201      	movs	r2, #1
 80097f8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80097fa:	4b4b      	ldr	r3, [pc, #300]	; (8009928 <USBD_CDC_Init+0x1ec>)
 80097fc:	781b      	ldrb	r3, [r3, #0]
 80097fe:	f003 020f 	and.w	r2, r3, #15
 8009802:	6879      	ldr	r1, [r7, #4]
 8009804:	4613      	mov	r3, r2
 8009806:	009b      	lsls	r3, r3, #2
 8009808:	4413      	add	r3, r2
 800980a:	009b      	lsls	r3, r3, #2
 800980c:	440b      	add	r3, r1
 800980e:	3326      	adds	r3, #38	; 0x26
 8009810:	2210      	movs	r2, #16
 8009812:	801a      	strh	r2, [r3, #0]
 8009814:	e035      	b.n	8009882 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009816:	4b42      	ldr	r3, [pc, #264]	; (8009920 <USBD_CDC_Init+0x1e4>)
 8009818:	7819      	ldrb	r1, [r3, #0]
 800981a:	2340      	movs	r3, #64	; 0x40
 800981c:	2202      	movs	r2, #2
 800981e:	6878      	ldr	r0, [r7, #4]
 8009820:	f002 fb2d 	bl	800be7e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009824:	4b3e      	ldr	r3, [pc, #248]	; (8009920 <USBD_CDC_Init+0x1e4>)
 8009826:	781b      	ldrb	r3, [r3, #0]
 8009828:	f003 020f 	and.w	r2, r3, #15
 800982c:	6879      	ldr	r1, [r7, #4]
 800982e:	4613      	mov	r3, r2
 8009830:	009b      	lsls	r3, r3, #2
 8009832:	4413      	add	r3, r2
 8009834:	009b      	lsls	r3, r3, #2
 8009836:	440b      	add	r3, r1
 8009838:	3324      	adds	r3, #36	; 0x24
 800983a:	2201      	movs	r2, #1
 800983c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800983e:	4b39      	ldr	r3, [pc, #228]	; (8009924 <USBD_CDC_Init+0x1e8>)
 8009840:	7819      	ldrb	r1, [r3, #0]
 8009842:	2340      	movs	r3, #64	; 0x40
 8009844:	2202      	movs	r2, #2
 8009846:	6878      	ldr	r0, [r7, #4]
 8009848:	f002 fb19 	bl	800be7e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800984c:	4b35      	ldr	r3, [pc, #212]	; (8009924 <USBD_CDC_Init+0x1e8>)
 800984e:	781b      	ldrb	r3, [r3, #0]
 8009850:	f003 020f 	and.w	r2, r3, #15
 8009854:	6879      	ldr	r1, [r7, #4]
 8009856:	4613      	mov	r3, r2
 8009858:	009b      	lsls	r3, r3, #2
 800985a:	4413      	add	r3, r2
 800985c:	009b      	lsls	r3, r3, #2
 800985e:	440b      	add	r3, r1
 8009860:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009864:	2201      	movs	r2, #1
 8009866:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009868:	4b2f      	ldr	r3, [pc, #188]	; (8009928 <USBD_CDC_Init+0x1ec>)
 800986a:	781b      	ldrb	r3, [r3, #0]
 800986c:	f003 020f 	and.w	r2, r3, #15
 8009870:	6879      	ldr	r1, [r7, #4]
 8009872:	4613      	mov	r3, r2
 8009874:	009b      	lsls	r3, r3, #2
 8009876:	4413      	add	r3, r2
 8009878:	009b      	lsls	r3, r3, #2
 800987a:	440b      	add	r3, r1
 800987c:	3326      	adds	r3, #38	; 0x26
 800987e:	2210      	movs	r2, #16
 8009880:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009882:	4b29      	ldr	r3, [pc, #164]	; (8009928 <USBD_CDC_Init+0x1ec>)
 8009884:	7819      	ldrb	r1, [r3, #0]
 8009886:	2308      	movs	r3, #8
 8009888:	2203      	movs	r2, #3
 800988a:	6878      	ldr	r0, [r7, #4]
 800988c:	f002 faf7 	bl	800be7e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8009890:	4b25      	ldr	r3, [pc, #148]	; (8009928 <USBD_CDC_Init+0x1ec>)
 8009892:	781b      	ldrb	r3, [r3, #0]
 8009894:	f003 020f 	and.w	r2, r3, #15
 8009898:	6879      	ldr	r1, [r7, #4]
 800989a:	4613      	mov	r3, r2
 800989c:	009b      	lsls	r3, r3, #2
 800989e:	4413      	add	r3, r2
 80098a0:	009b      	lsls	r3, r3, #2
 80098a2:	440b      	add	r3, r1
 80098a4:	3324      	adds	r3, #36	; 0x24
 80098a6:	2201      	movs	r2, #1
 80098a8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	2200      	movs	r2, #0
 80098ae:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80098b8:	687a      	ldr	r2, [r7, #4]
 80098ba:	33b0      	adds	r3, #176	; 0xb0
 80098bc:	009b      	lsls	r3, r3, #2
 80098be:	4413      	add	r3, r2
 80098c0:	685b      	ldr	r3, [r3, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	2200      	movs	r2, #0
 80098ca:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	2200      	movs	r2, #0
 80098d2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d101      	bne.n	80098e4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80098e0:	2302      	movs	r3, #2
 80098e2:	e018      	b.n	8009916 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	7c1b      	ldrb	r3, [r3, #16]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d10a      	bne.n	8009902 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80098ec:	4b0d      	ldr	r3, [pc, #52]	; (8009924 <USBD_CDC_Init+0x1e8>)
 80098ee:	7819      	ldrb	r1, [r3, #0]
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80098f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80098fa:	6878      	ldr	r0, [r7, #4]
 80098fc:	f002 fbae 	bl	800c05c <USBD_LL_PrepareReceive>
 8009900:	e008      	b.n	8009914 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009902:	4b08      	ldr	r3, [pc, #32]	; (8009924 <USBD_CDC_Init+0x1e8>)
 8009904:	7819      	ldrb	r1, [r3, #0]
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800990c:	2340      	movs	r3, #64	; 0x40
 800990e:	6878      	ldr	r0, [r7, #4]
 8009910:	f002 fba4 	bl	800c05c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009914:	2300      	movs	r3, #0
}
 8009916:	4618      	mov	r0, r3
 8009918:	3710      	adds	r7, #16
 800991a:	46bd      	mov	sp, r7
 800991c:	bd80      	pop	{r7, pc}
 800991e:	bf00      	nop
 8009920:	2400038f 	.word	0x2400038f
 8009924:	24000390 	.word	0x24000390
 8009928:	24000391 	.word	0x24000391

0800992c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800992c:	b580      	push	{r7, lr}
 800992e:	b082      	sub	sp, #8
 8009930:	af00      	add	r7, sp, #0
 8009932:	6078      	str	r0, [r7, #4]
 8009934:	460b      	mov	r3, r1
 8009936:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8009938:	4b3a      	ldr	r3, [pc, #232]	; (8009a24 <USBD_CDC_DeInit+0xf8>)
 800993a:	781b      	ldrb	r3, [r3, #0]
 800993c:	4619      	mov	r1, r3
 800993e:	6878      	ldr	r0, [r7, #4]
 8009940:	f002 fac3 	bl	800beca <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8009944:	4b37      	ldr	r3, [pc, #220]	; (8009a24 <USBD_CDC_DeInit+0xf8>)
 8009946:	781b      	ldrb	r3, [r3, #0]
 8009948:	f003 020f 	and.w	r2, r3, #15
 800994c:	6879      	ldr	r1, [r7, #4]
 800994e:	4613      	mov	r3, r2
 8009950:	009b      	lsls	r3, r3, #2
 8009952:	4413      	add	r3, r2
 8009954:	009b      	lsls	r3, r3, #2
 8009956:	440b      	add	r3, r1
 8009958:	3324      	adds	r3, #36	; 0x24
 800995a:	2200      	movs	r2, #0
 800995c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800995e:	4b32      	ldr	r3, [pc, #200]	; (8009a28 <USBD_CDC_DeInit+0xfc>)
 8009960:	781b      	ldrb	r3, [r3, #0]
 8009962:	4619      	mov	r1, r3
 8009964:	6878      	ldr	r0, [r7, #4]
 8009966:	f002 fab0 	bl	800beca <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800996a:	4b2f      	ldr	r3, [pc, #188]	; (8009a28 <USBD_CDC_DeInit+0xfc>)
 800996c:	781b      	ldrb	r3, [r3, #0]
 800996e:	f003 020f 	and.w	r2, r3, #15
 8009972:	6879      	ldr	r1, [r7, #4]
 8009974:	4613      	mov	r3, r2
 8009976:	009b      	lsls	r3, r3, #2
 8009978:	4413      	add	r3, r2
 800997a:	009b      	lsls	r3, r3, #2
 800997c:	440b      	add	r3, r1
 800997e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009982:	2200      	movs	r2, #0
 8009984:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8009986:	4b29      	ldr	r3, [pc, #164]	; (8009a2c <USBD_CDC_DeInit+0x100>)
 8009988:	781b      	ldrb	r3, [r3, #0]
 800998a:	4619      	mov	r1, r3
 800998c:	6878      	ldr	r0, [r7, #4]
 800998e:	f002 fa9c 	bl	800beca <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8009992:	4b26      	ldr	r3, [pc, #152]	; (8009a2c <USBD_CDC_DeInit+0x100>)
 8009994:	781b      	ldrb	r3, [r3, #0]
 8009996:	f003 020f 	and.w	r2, r3, #15
 800999a:	6879      	ldr	r1, [r7, #4]
 800999c:	4613      	mov	r3, r2
 800999e:	009b      	lsls	r3, r3, #2
 80099a0:	4413      	add	r3, r2
 80099a2:	009b      	lsls	r3, r3, #2
 80099a4:	440b      	add	r3, r1
 80099a6:	3324      	adds	r3, #36	; 0x24
 80099a8:	2200      	movs	r2, #0
 80099aa:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80099ac:	4b1f      	ldr	r3, [pc, #124]	; (8009a2c <USBD_CDC_DeInit+0x100>)
 80099ae:	781b      	ldrb	r3, [r3, #0]
 80099b0:	f003 020f 	and.w	r2, r3, #15
 80099b4:	6879      	ldr	r1, [r7, #4]
 80099b6:	4613      	mov	r3, r2
 80099b8:	009b      	lsls	r3, r3, #2
 80099ba:	4413      	add	r3, r2
 80099bc:	009b      	lsls	r3, r3, #2
 80099be:	440b      	add	r3, r1
 80099c0:	3326      	adds	r3, #38	; 0x26
 80099c2:	2200      	movs	r2, #0
 80099c4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	32b0      	adds	r2, #176	; 0xb0
 80099d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d01f      	beq.n	8009a18 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80099de:	687a      	ldr	r2, [r7, #4]
 80099e0:	33b0      	adds	r3, #176	; 0xb0
 80099e2:	009b      	lsls	r3, r3, #2
 80099e4:	4413      	add	r3, r2
 80099e6:	685b      	ldr	r3, [r3, #4]
 80099e8:	685b      	ldr	r3, [r3, #4]
 80099ea:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	32b0      	adds	r2, #176	; 0xb0
 80099f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099fa:	4618      	mov	r0, r3
 80099fc:	f002 fb70 	bl	800c0e0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	32b0      	adds	r2, #176	; 0xb0
 8009a0a:	2100      	movs	r1, #0
 8009a0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	2200      	movs	r2, #0
 8009a14:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009a18:	2300      	movs	r3, #0
}
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	3708      	adds	r7, #8
 8009a1e:	46bd      	mov	sp, r7
 8009a20:	bd80      	pop	{r7, pc}
 8009a22:	bf00      	nop
 8009a24:	2400038f 	.word	0x2400038f
 8009a28:	24000390 	.word	0x24000390
 8009a2c:	24000391 	.word	0x24000391

08009a30 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009a30:	b580      	push	{r7, lr}
 8009a32:	b086      	sub	sp, #24
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	6078      	str	r0, [r7, #4]
 8009a38:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	32b0      	adds	r2, #176	; 0xb0
 8009a44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a48:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009a4e:	2300      	movs	r3, #0
 8009a50:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009a52:	2300      	movs	r3, #0
 8009a54:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009a56:	693b      	ldr	r3, [r7, #16]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d101      	bne.n	8009a60 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8009a5c:	2303      	movs	r3, #3
 8009a5e:	e0bf      	b.n	8009be0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009a60:	683b      	ldr	r3, [r7, #0]
 8009a62:	781b      	ldrb	r3, [r3, #0]
 8009a64:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d050      	beq.n	8009b0e <USBD_CDC_Setup+0xde>
 8009a6c:	2b20      	cmp	r3, #32
 8009a6e:	f040 80af 	bne.w	8009bd0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009a72:	683b      	ldr	r3, [r7, #0]
 8009a74:	88db      	ldrh	r3, [r3, #6]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d03a      	beq.n	8009af0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009a7a:	683b      	ldr	r3, [r7, #0]
 8009a7c:	781b      	ldrb	r3, [r3, #0]
 8009a7e:	b25b      	sxtb	r3, r3
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	da1b      	bge.n	8009abc <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009a8a:	687a      	ldr	r2, [r7, #4]
 8009a8c:	33b0      	adds	r3, #176	; 0xb0
 8009a8e:	009b      	lsls	r3, r3, #2
 8009a90:	4413      	add	r3, r2
 8009a92:	685b      	ldr	r3, [r3, #4]
 8009a94:	689b      	ldr	r3, [r3, #8]
 8009a96:	683a      	ldr	r2, [r7, #0]
 8009a98:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8009a9a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009a9c:	683a      	ldr	r2, [r7, #0]
 8009a9e:	88d2      	ldrh	r2, [r2, #6]
 8009aa0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009aa2:	683b      	ldr	r3, [r7, #0]
 8009aa4:	88db      	ldrh	r3, [r3, #6]
 8009aa6:	2b07      	cmp	r3, #7
 8009aa8:	bf28      	it	cs
 8009aaa:	2307      	movcs	r3, #7
 8009aac:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009aae:	693b      	ldr	r3, [r7, #16]
 8009ab0:	89fa      	ldrh	r2, [r7, #14]
 8009ab2:	4619      	mov	r1, r3
 8009ab4:	6878      	ldr	r0, [r7, #4]
 8009ab6:	f001 fd89 	bl	800b5cc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8009aba:	e090      	b.n	8009bde <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8009abc:	683b      	ldr	r3, [r7, #0]
 8009abe:	785a      	ldrb	r2, [r3, #1]
 8009ac0:	693b      	ldr	r3, [r7, #16]
 8009ac2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8009ac6:	683b      	ldr	r3, [r7, #0]
 8009ac8:	88db      	ldrh	r3, [r3, #6]
 8009aca:	2b3f      	cmp	r3, #63	; 0x3f
 8009acc:	d803      	bhi.n	8009ad6 <USBD_CDC_Setup+0xa6>
 8009ace:	683b      	ldr	r3, [r7, #0]
 8009ad0:	88db      	ldrh	r3, [r3, #6]
 8009ad2:	b2da      	uxtb	r2, r3
 8009ad4:	e000      	b.n	8009ad8 <USBD_CDC_Setup+0xa8>
 8009ad6:	2240      	movs	r2, #64	; 0x40
 8009ad8:	693b      	ldr	r3, [r7, #16]
 8009ada:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8009ade:	6939      	ldr	r1, [r7, #16]
 8009ae0:	693b      	ldr	r3, [r7, #16]
 8009ae2:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8009ae6:	461a      	mov	r2, r3
 8009ae8:	6878      	ldr	r0, [r7, #4]
 8009aea:	f001 fd9b 	bl	800b624 <USBD_CtlPrepareRx>
      break;
 8009aee:	e076      	b.n	8009bde <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009af6:	687a      	ldr	r2, [r7, #4]
 8009af8:	33b0      	adds	r3, #176	; 0xb0
 8009afa:	009b      	lsls	r3, r3, #2
 8009afc:	4413      	add	r3, r2
 8009afe:	685b      	ldr	r3, [r3, #4]
 8009b00:	689b      	ldr	r3, [r3, #8]
 8009b02:	683a      	ldr	r2, [r7, #0]
 8009b04:	7850      	ldrb	r0, [r2, #1]
 8009b06:	2200      	movs	r2, #0
 8009b08:	6839      	ldr	r1, [r7, #0]
 8009b0a:	4798      	blx	r3
      break;
 8009b0c:	e067      	b.n	8009bde <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009b0e:	683b      	ldr	r3, [r7, #0]
 8009b10:	785b      	ldrb	r3, [r3, #1]
 8009b12:	2b0b      	cmp	r3, #11
 8009b14:	d851      	bhi.n	8009bba <USBD_CDC_Setup+0x18a>
 8009b16:	a201      	add	r2, pc, #4	; (adr r2, 8009b1c <USBD_CDC_Setup+0xec>)
 8009b18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b1c:	08009b4d 	.word	0x08009b4d
 8009b20:	08009bc9 	.word	0x08009bc9
 8009b24:	08009bbb 	.word	0x08009bbb
 8009b28:	08009bbb 	.word	0x08009bbb
 8009b2c:	08009bbb 	.word	0x08009bbb
 8009b30:	08009bbb 	.word	0x08009bbb
 8009b34:	08009bbb 	.word	0x08009bbb
 8009b38:	08009bbb 	.word	0x08009bbb
 8009b3c:	08009bbb 	.word	0x08009bbb
 8009b40:	08009bbb 	.word	0x08009bbb
 8009b44:	08009b77 	.word	0x08009b77
 8009b48:	08009ba1 	.word	0x08009ba1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b52:	b2db      	uxtb	r3, r3
 8009b54:	2b03      	cmp	r3, #3
 8009b56:	d107      	bne.n	8009b68 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009b58:	f107 030a 	add.w	r3, r7, #10
 8009b5c:	2202      	movs	r2, #2
 8009b5e:	4619      	mov	r1, r3
 8009b60:	6878      	ldr	r0, [r7, #4]
 8009b62:	f001 fd33 	bl	800b5cc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009b66:	e032      	b.n	8009bce <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009b68:	6839      	ldr	r1, [r7, #0]
 8009b6a:	6878      	ldr	r0, [r7, #4]
 8009b6c:	f001 fcbd 	bl	800b4ea <USBD_CtlError>
            ret = USBD_FAIL;
 8009b70:	2303      	movs	r3, #3
 8009b72:	75fb      	strb	r3, [r7, #23]
          break;
 8009b74:	e02b      	b.n	8009bce <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b7c:	b2db      	uxtb	r3, r3
 8009b7e:	2b03      	cmp	r3, #3
 8009b80:	d107      	bne.n	8009b92 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009b82:	f107 030d 	add.w	r3, r7, #13
 8009b86:	2201      	movs	r2, #1
 8009b88:	4619      	mov	r1, r3
 8009b8a:	6878      	ldr	r0, [r7, #4]
 8009b8c:	f001 fd1e 	bl	800b5cc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009b90:	e01d      	b.n	8009bce <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009b92:	6839      	ldr	r1, [r7, #0]
 8009b94:	6878      	ldr	r0, [r7, #4]
 8009b96:	f001 fca8 	bl	800b4ea <USBD_CtlError>
            ret = USBD_FAIL;
 8009b9a:	2303      	movs	r3, #3
 8009b9c:	75fb      	strb	r3, [r7, #23]
          break;
 8009b9e:	e016      	b.n	8009bce <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ba6:	b2db      	uxtb	r3, r3
 8009ba8:	2b03      	cmp	r3, #3
 8009baa:	d00f      	beq.n	8009bcc <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8009bac:	6839      	ldr	r1, [r7, #0]
 8009bae:	6878      	ldr	r0, [r7, #4]
 8009bb0:	f001 fc9b 	bl	800b4ea <USBD_CtlError>
            ret = USBD_FAIL;
 8009bb4:	2303      	movs	r3, #3
 8009bb6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009bb8:	e008      	b.n	8009bcc <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009bba:	6839      	ldr	r1, [r7, #0]
 8009bbc:	6878      	ldr	r0, [r7, #4]
 8009bbe:	f001 fc94 	bl	800b4ea <USBD_CtlError>
          ret = USBD_FAIL;
 8009bc2:	2303      	movs	r3, #3
 8009bc4:	75fb      	strb	r3, [r7, #23]
          break;
 8009bc6:	e002      	b.n	8009bce <USBD_CDC_Setup+0x19e>
          break;
 8009bc8:	bf00      	nop
 8009bca:	e008      	b.n	8009bde <USBD_CDC_Setup+0x1ae>
          break;
 8009bcc:	bf00      	nop
      }
      break;
 8009bce:	e006      	b.n	8009bde <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8009bd0:	6839      	ldr	r1, [r7, #0]
 8009bd2:	6878      	ldr	r0, [r7, #4]
 8009bd4:	f001 fc89 	bl	800b4ea <USBD_CtlError>
      ret = USBD_FAIL;
 8009bd8:	2303      	movs	r3, #3
 8009bda:	75fb      	strb	r3, [r7, #23]
      break;
 8009bdc:	bf00      	nop
  }

  return (uint8_t)ret;
 8009bde:	7dfb      	ldrb	r3, [r7, #23]
}
 8009be0:	4618      	mov	r0, r3
 8009be2:	3718      	adds	r7, #24
 8009be4:	46bd      	mov	sp, r7
 8009be6:	bd80      	pop	{r7, pc}

08009be8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009be8:	b580      	push	{r7, lr}
 8009bea:	b084      	sub	sp, #16
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]
 8009bf0:	460b      	mov	r3, r1
 8009bf2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009bfa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	32b0      	adds	r2, #176	; 0xb0
 8009c06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d101      	bne.n	8009c12 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8009c0e:	2303      	movs	r3, #3
 8009c10:	e065      	b.n	8009cde <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	32b0      	adds	r2, #176	; 0xb0
 8009c1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c20:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009c22:	78fb      	ldrb	r3, [r7, #3]
 8009c24:	f003 020f 	and.w	r2, r3, #15
 8009c28:	6879      	ldr	r1, [r7, #4]
 8009c2a:	4613      	mov	r3, r2
 8009c2c:	009b      	lsls	r3, r3, #2
 8009c2e:	4413      	add	r3, r2
 8009c30:	009b      	lsls	r3, r3, #2
 8009c32:	440b      	add	r3, r1
 8009c34:	3318      	adds	r3, #24
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d02f      	beq.n	8009c9c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8009c3c:	78fb      	ldrb	r3, [r7, #3]
 8009c3e:	f003 020f 	and.w	r2, r3, #15
 8009c42:	6879      	ldr	r1, [r7, #4]
 8009c44:	4613      	mov	r3, r2
 8009c46:	009b      	lsls	r3, r3, #2
 8009c48:	4413      	add	r3, r2
 8009c4a:	009b      	lsls	r3, r3, #2
 8009c4c:	440b      	add	r3, r1
 8009c4e:	3318      	adds	r3, #24
 8009c50:	681a      	ldr	r2, [r3, #0]
 8009c52:	78fb      	ldrb	r3, [r7, #3]
 8009c54:	f003 010f 	and.w	r1, r3, #15
 8009c58:	68f8      	ldr	r0, [r7, #12]
 8009c5a:	460b      	mov	r3, r1
 8009c5c:	00db      	lsls	r3, r3, #3
 8009c5e:	440b      	add	r3, r1
 8009c60:	009b      	lsls	r3, r3, #2
 8009c62:	4403      	add	r3, r0
 8009c64:	3344      	adds	r3, #68	; 0x44
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	fbb2 f1f3 	udiv	r1, r2, r3
 8009c6c:	fb01 f303 	mul.w	r3, r1, r3
 8009c70:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d112      	bne.n	8009c9c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8009c76:	78fb      	ldrb	r3, [r7, #3]
 8009c78:	f003 020f 	and.w	r2, r3, #15
 8009c7c:	6879      	ldr	r1, [r7, #4]
 8009c7e:	4613      	mov	r3, r2
 8009c80:	009b      	lsls	r3, r3, #2
 8009c82:	4413      	add	r3, r2
 8009c84:	009b      	lsls	r3, r3, #2
 8009c86:	440b      	add	r3, r1
 8009c88:	3318      	adds	r3, #24
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009c8e:	78f9      	ldrb	r1, [r7, #3]
 8009c90:	2300      	movs	r3, #0
 8009c92:	2200      	movs	r2, #0
 8009c94:	6878      	ldr	r0, [r7, #4]
 8009c96:	f002 f9c0 	bl	800c01a <USBD_LL_Transmit>
 8009c9a:	e01f      	b.n	8009cdc <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8009c9c:	68bb      	ldr	r3, [r7, #8]
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009caa:	687a      	ldr	r2, [r7, #4]
 8009cac:	33b0      	adds	r3, #176	; 0xb0
 8009cae:	009b      	lsls	r3, r3, #2
 8009cb0:	4413      	add	r3, r2
 8009cb2:	685b      	ldr	r3, [r3, #4]
 8009cb4:	691b      	ldr	r3, [r3, #16]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d010      	beq.n	8009cdc <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009cc0:	687a      	ldr	r2, [r7, #4]
 8009cc2:	33b0      	adds	r3, #176	; 0xb0
 8009cc4:	009b      	lsls	r3, r3, #2
 8009cc6:	4413      	add	r3, r2
 8009cc8:	685b      	ldr	r3, [r3, #4]
 8009cca:	691b      	ldr	r3, [r3, #16]
 8009ccc:	68ba      	ldr	r2, [r7, #8]
 8009cce:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8009cd2:	68ba      	ldr	r2, [r7, #8]
 8009cd4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8009cd8:	78fa      	ldrb	r2, [r7, #3]
 8009cda:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009cdc:	2300      	movs	r3, #0
}
 8009cde:	4618      	mov	r0, r3
 8009ce0:	3710      	adds	r7, #16
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	bd80      	pop	{r7, pc}

08009ce6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009ce6:	b580      	push	{r7, lr}
 8009ce8:	b084      	sub	sp, #16
 8009cea:	af00      	add	r7, sp, #0
 8009cec:	6078      	str	r0, [r7, #4]
 8009cee:	460b      	mov	r3, r1
 8009cf0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	32b0      	adds	r2, #176	; 0xb0
 8009cfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d00:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	32b0      	adds	r2, #176	; 0xb0
 8009d0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d101      	bne.n	8009d18 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8009d14:	2303      	movs	r3, #3
 8009d16:	e01a      	b.n	8009d4e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009d18:	78fb      	ldrb	r3, [r7, #3]
 8009d1a:	4619      	mov	r1, r3
 8009d1c:	6878      	ldr	r0, [r7, #4]
 8009d1e:	f002 f9be 	bl	800c09e <USBD_LL_GetRxDataSize>
 8009d22:	4602      	mov	r2, r0
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009d30:	687a      	ldr	r2, [r7, #4]
 8009d32:	33b0      	adds	r3, #176	; 0xb0
 8009d34:	009b      	lsls	r3, r3, #2
 8009d36:	4413      	add	r3, r2
 8009d38:	685b      	ldr	r3, [r3, #4]
 8009d3a:	68db      	ldr	r3, [r3, #12]
 8009d3c:	68fa      	ldr	r2, [r7, #12]
 8009d3e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009d42:	68fa      	ldr	r2, [r7, #12]
 8009d44:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8009d48:	4611      	mov	r1, r2
 8009d4a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009d4c:	2300      	movs	r3, #0
}
 8009d4e:	4618      	mov	r0, r3
 8009d50:	3710      	adds	r7, #16
 8009d52:	46bd      	mov	sp, r7
 8009d54:	bd80      	pop	{r7, pc}

08009d56 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009d56:	b580      	push	{r7, lr}
 8009d58:	b084      	sub	sp, #16
 8009d5a:	af00      	add	r7, sp, #0
 8009d5c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	32b0      	adds	r2, #176	; 0xb0
 8009d68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d6c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d101      	bne.n	8009d78 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009d74:	2303      	movs	r3, #3
 8009d76:	e025      	b.n	8009dc4 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009d7e:	687a      	ldr	r2, [r7, #4]
 8009d80:	33b0      	adds	r3, #176	; 0xb0
 8009d82:	009b      	lsls	r3, r3, #2
 8009d84:	4413      	add	r3, r2
 8009d86:	685b      	ldr	r3, [r3, #4]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d01a      	beq.n	8009dc2 <USBD_CDC_EP0_RxReady+0x6c>
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009d92:	2bff      	cmp	r3, #255	; 0xff
 8009d94:	d015      	beq.n	8009dc2 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009d9c:	687a      	ldr	r2, [r7, #4]
 8009d9e:	33b0      	adds	r3, #176	; 0xb0
 8009da0:	009b      	lsls	r3, r3, #2
 8009da2:	4413      	add	r3, r2
 8009da4:	685b      	ldr	r3, [r3, #4]
 8009da6:	689b      	ldr	r3, [r3, #8]
 8009da8:	68fa      	ldr	r2, [r7, #12]
 8009daa:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8009dae:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8009db0:	68fa      	ldr	r2, [r7, #12]
 8009db2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009db6:	b292      	uxth	r2, r2
 8009db8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	22ff      	movs	r2, #255	; 0xff
 8009dbe:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8009dc2:	2300      	movs	r3, #0
}
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	3710      	adds	r7, #16
 8009dc8:	46bd      	mov	sp, r7
 8009dca:	bd80      	pop	{r7, pc}

08009dcc <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	b086      	sub	sp, #24
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009dd4:	2182      	movs	r1, #130	; 0x82
 8009dd6:	4818      	ldr	r0, [pc, #96]	; (8009e38 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009dd8:	f000 fd4f 	bl	800a87a <USBD_GetEpDesc>
 8009ddc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009dde:	2101      	movs	r1, #1
 8009de0:	4815      	ldr	r0, [pc, #84]	; (8009e38 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009de2:	f000 fd4a 	bl	800a87a <USBD_GetEpDesc>
 8009de6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009de8:	2181      	movs	r1, #129	; 0x81
 8009dea:	4813      	ldr	r0, [pc, #76]	; (8009e38 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009dec:	f000 fd45 	bl	800a87a <USBD_GetEpDesc>
 8009df0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009df2:	697b      	ldr	r3, [r7, #20]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d002      	beq.n	8009dfe <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009df8:	697b      	ldr	r3, [r7, #20]
 8009dfa:	2210      	movs	r2, #16
 8009dfc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009dfe:	693b      	ldr	r3, [r7, #16]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d006      	beq.n	8009e12 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009e04:	693b      	ldr	r3, [r7, #16]
 8009e06:	2200      	movs	r2, #0
 8009e08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009e0c:	711a      	strb	r2, [r3, #4]
 8009e0e:	2200      	movs	r2, #0
 8009e10:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d006      	beq.n	8009e26 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009e20:	711a      	strb	r2, [r3, #4]
 8009e22:	2200      	movs	r2, #0
 8009e24:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	2243      	movs	r2, #67	; 0x43
 8009e2a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009e2c:	4b02      	ldr	r3, [pc, #8]	; (8009e38 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8009e2e:	4618      	mov	r0, r3
 8009e30:	3718      	adds	r7, #24
 8009e32:	46bd      	mov	sp, r7
 8009e34:	bd80      	pop	{r7, pc}
 8009e36:	bf00      	nop
 8009e38:	2400034c 	.word	0x2400034c

08009e3c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	b086      	sub	sp, #24
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009e44:	2182      	movs	r1, #130	; 0x82
 8009e46:	4818      	ldr	r0, [pc, #96]	; (8009ea8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009e48:	f000 fd17 	bl	800a87a <USBD_GetEpDesc>
 8009e4c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009e4e:	2101      	movs	r1, #1
 8009e50:	4815      	ldr	r0, [pc, #84]	; (8009ea8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009e52:	f000 fd12 	bl	800a87a <USBD_GetEpDesc>
 8009e56:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009e58:	2181      	movs	r1, #129	; 0x81
 8009e5a:	4813      	ldr	r0, [pc, #76]	; (8009ea8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009e5c:	f000 fd0d 	bl	800a87a <USBD_GetEpDesc>
 8009e60:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009e62:	697b      	ldr	r3, [r7, #20]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d002      	beq.n	8009e6e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8009e68:	697b      	ldr	r3, [r7, #20]
 8009e6a:	2210      	movs	r2, #16
 8009e6c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009e6e:	693b      	ldr	r3, [r7, #16]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d006      	beq.n	8009e82 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009e74:	693b      	ldr	r3, [r7, #16]
 8009e76:	2200      	movs	r2, #0
 8009e78:	711a      	strb	r2, [r3, #4]
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	f042 0202 	orr.w	r2, r2, #2
 8009e80:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d006      	beq.n	8009e96 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	2200      	movs	r2, #0
 8009e8c:	711a      	strb	r2, [r3, #4]
 8009e8e:	2200      	movs	r2, #0
 8009e90:	f042 0202 	orr.w	r2, r2, #2
 8009e94:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	2243      	movs	r2, #67	; 0x43
 8009e9a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009e9c:	4b02      	ldr	r3, [pc, #8]	; (8009ea8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	3718      	adds	r7, #24
 8009ea2:	46bd      	mov	sp, r7
 8009ea4:	bd80      	pop	{r7, pc}
 8009ea6:	bf00      	nop
 8009ea8:	2400034c 	.word	0x2400034c

08009eac <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009eac:	b580      	push	{r7, lr}
 8009eae:	b086      	sub	sp, #24
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009eb4:	2182      	movs	r1, #130	; 0x82
 8009eb6:	4818      	ldr	r0, [pc, #96]	; (8009f18 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009eb8:	f000 fcdf 	bl	800a87a <USBD_GetEpDesc>
 8009ebc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009ebe:	2101      	movs	r1, #1
 8009ec0:	4815      	ldr	r0, [pc, #84]	; (8009f18 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009ec2:	f000 fcda 	bl	800a87a <USBD_GetEpDesc>
 8009ec6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009ec8:	2181      	movs	r1, #129	; 0x81
 8009eca:	4813      	ldr	r0, [pc, #76]	; (8009f18 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009ecc:	f000 fcd5 	bl	800a87a <USBD_GetEpDesc>
 8009ed0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009ed2:	697b      	ldr	r3, [r7, #20]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d002      	beq.n	8009ede <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009ed8:	697b      	ldr	r3, [r7, #20]
 8009eda:	2210      	movs	r2, #16
 8009edc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009ede:	693b      	ldr	r3, [r7, #16]
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d006      	beq.n	8009ef2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009ee4:	693b      	ldr	r3, [r7, #16]
 8009ee6:	2200      	movs	r2, #0
 8009ee8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009eec:	711a      	strb	r2, [r3, #4]
 8009eee:	2200      	movs	r2, #0
 8009ef0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d006      	beq.n	8009f06 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	2200      	movs	r2, #0
 8009efc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009f00:	711a      	strb	r2, [r3, #4]
 8009f02:	2200      	movs	r2, #0
 8009f04:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	2243      	movs	r2, #67	; 0x43
 8009f0a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009f0c:	4b02      	ldr	r3, [pc, #8]	; (8009f18 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8009f0e:	4618      	mov	r0, r3
 8009f10:	3718      	adds	r7, #24
 8009f12:	46bd      	mov	sp, r7
 8009f14:	bd80      	pop	{r7, pc}
 8009f16:	bf00      	nop
 8009f18:	2400034c 	.word	0x2400034c

08009f1c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009f1c:	b480      	push	{r7}
 8009f1e:	b083      	sub	sp, #12
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	220a      	movs	r2, #10
 8009f28:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8009f2a:	4b03      	ldr	r3, [pc, #12]	; (8009f38 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	370c      	adds	r7, #12
 8009f30:	46bd      	mov	sp, r7
 8009f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f36:	4770      	bx	lr
 8009f38:	24000308 	.word	0x24000308

08009f3c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009f3c:	b480      	push	{r7}
 8009f3e:	b083      	sub	sp, #12
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	6078      	str	r0, [r7, #4]
 8009f44:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009f46:	683b      	ldr	r3, [r7, #0]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d101      	bne.n	8009f50 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009f4c:	2303      	movs	r3, #3
 8009f4e:	e009      	b.n	8009f64 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009f56:	687a      	ldr	r2, [r7, #4]
 8009f58:	33b0      	adds	r3, #176	; 0xb0
 8009f5a:	009b      	lsls	r3, r3, #2
 8009f5c:	4413      	add	r3, r2
 8009f5e:	683a      	ldr	r2, [r7, #0]
 8009f60:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8009f62:	2300      	movs	r3, #0
}
 8009f64:	4618      	mov	r0, r3
 8009f66:	370c      	adds	r7, #12
 8009f68:	46bd      	mov	sp, r7
 8009f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6e:	4770      	bx	lr

08009f70 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009f70:	b480      	push	{r7}
 8009f72:	b087      	sub	sp, #28
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	60f8      	str	r0, [r7, #12]
 8009f78:	60b9      	str	r1, [r7, #8]
 8009f7a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	32b0      	adds	r2, #176	; 0xb0
 8009f86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f8a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8009f8c:	697b      	ldr	r3, [r7, #20]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d101      	bne.n	8009f96 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009f92:	2303      	movs	r3, #3
 8009f94:	e008      	b.n	8009fa8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8009f96:	697b      	ldr	r3, [r7, #20]
 8009f98:	68ba      	ldr	r2, [r7, #8]
 8009f9a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009f9e:	697b      	ldr	r3, [r7, #20]
 8009fa0:	687a      	ldr	r2, [r7, #4]
 8009fa2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8009fa6:	2300      	movs	r3, #0
}
 8009fa8:	4618      	mov	r0, r3
 8009faa:	371c      	adds	r7, #28
 8009fac:	46bd      	mov	sp, r7
 8009fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb2:	4770      	bx	lr

08009fb4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009fb4:	b480      	push	{r7}
 8009fb6:	b085      	sub	sp, #20
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
 8009fbc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	32b0      	adds	r2, #176	; 0xb0
 8009fc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fcc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d101      	bne.n	8009fd8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8009fd4:	2303      	movs	r3, #3
 8009fd6:	e004      	b.n	8009fe2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	683a      	ldr	r2, [r7, #0]
 8009fdc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8009fe0:	2300      	movs	r3, #0
}
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	3714      	adds	r7, #20
 8009fe6:	46bd      	mov	sp, r7
 8009fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fec:	4770      	bx	lr
	...

08009ff0 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009ff0:	b580      	push	{r7, lr}
 8009ff2:	b084      	sub	sp, #16
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	32b0      	adds	r2, #176	; 0xb0
 800a002:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a006:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800a008:	2301      	movs	r3, #1
 800a00a:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800a00c:	68bb      	ldr	r3, [r7, #8]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d101      	bne.n	800a016 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a012:	2303      	movs	r3, #3
 800a014:	e025      	b.n	800a062 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800a016:	68bb      	ldr	r3, [r7, #8]
 800a018:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d11f      	bne.n	800a060 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800a020:	68bb      	ldr	r3, [r7, #8]
 800a022:	2201      	movs	r2, #1
 800a024:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800a028:	4b10      	ldr	r3, [pc, #64]	; (800a06c <USBD_CDC_TransmitPacket+0x7c>)
 800a02a:	781b      	ldrb	r3, [r3, #0]
 800a02c:	f003 020f 	and.w	r2, r3, #15
 800a030:	68bb      	ldr	r3, [r7, #8]
 800a032:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800a036:	6878      	ldr	r0, [r7, #4]
 800a038:	4613      	mov	r3, r2
 800a03a:	009b      	lsls	r3, r3, #2
 800a03c:	4413      	add	r3, r2
 800a03e:	009b      	lsls	r3, r3, #2
 800a040:	4403      	add	r3, r0
 800a042:	3318      	adds	r3, #24
 800a044:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800a046:	4b09      	ldr	r3, [pc, #36]	; (800a06c <USBD_CDC_TransmitPacket+0x7c>)
 800a048:	7819      	ldrb	r1, [r3, #0]
 800a04a:	68bb      	ldr	r3, [r7, #8]
 800a04c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800a050:	68bb      	ldr	r3, [r7, #8]
 800a052:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a056:	6878      	ldr	r0, [r7, #4]
 800a058:	f001 ffdf 	bl	800c01a <USBD_LL_Transmit>

    ret = USBD_OK;
 800a05c:	2300      	movs	r3, #0
 800a05e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800a060:	7bfb      	ldrb	r3, [r7, #15]
}
 800a062:	4618      	mov	r0, r3
 800a064:	3710      	adds	r7, #16
 800a066:	46bd      	mov	sp, r7
 800a068:	bd80      	pop	{r7, pc}
 800a06a:	bf00      	nop
 800a06c:	2400038f 	.word	0x2400038f

0800a070 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a070:	b580      	push	{r7, lr}
 800a072:	b084      	sub	sp, #16
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	32b0      	adds	r2, #176	; 0xb0
 800a082:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a086:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	32b0      	adds	r2, #176	; 0xb0
 800a092:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a096:	2b00      	cmp	r3, #0
 800a098:	d101      	bne.n	800a09e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800a09a:	2303      	movs	r3, #3
 800a09c:	e018      	b.n	800a0d0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	7c1b      	ldrb	r3, [r3, #16]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d10a      	bne.n	800a0bc <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a0a6:	4b0c      	ldr	r3, [pc, #48]	; (800a0d8 <USBD_CDC_ReceivePacket+0x68>)
 800a0a8:	7819      	ldrb	r1, [r3, #0]
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a0b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a0b4:	6878      	ldr	r0, [r7, #4]
 800a0b6:	f001 ffd1 	bl	800c05c <USBD_LL_PrepareReceive>
 800a0ba:	e008      	b.n	800a0ce <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a0bc:	4b06      	ldr	r3, [pc, #24]	; (800a0d8 <USBD_CDC_ReceivePacket+0x68>)
 800a0be:	7819      	ldrb	r1, [r3, #0]
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a0c6:	2340      	movs	r3, #64	; 0x40
 800a0c8:	6878      	ldr	r0, [r7, #4]
 800a0ca:	f001 ffc7 	bl	800c05c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a0ce:	2300      	movs	r3, #0
}
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	3710      	adds	r7, #16
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	bd80      	pop	{r7, pc}
 800a0d8:	24000390 	.word	0x24000390

0800a0dc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a0dc:	b580      	push	{r7, lr}
 800a0de:	b086      	sub	sp, #24
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	60f8      	str	r0, [r7, #12]
 800a0e4:	60b9      	str	r1, [r7, #8]
 800a0e6:	4613      	mov	r3, r2
 800a0e8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d101      	bne.n	800a0f4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a0f0:	2303      	movs	r3, #3
 800a0f2:	e01f      	b.n	800a134 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	2200      	movs	r2, #0
 800a0f8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	2200      	movs	r2, #0
 800a100:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	2200      	movs	r2, #0
 800a108:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a10c:	68bb      	ldr	r3, [r7, #8]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d003      	beq.n	800a11a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	68ba      	ldr	r2, [r7, #8]
 800a116:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	2201      	movs	r2, #1
 800a11e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	79fa      	ldrb	r2, [r7, #7]
 800a126:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a128:	68f8      	ldr	r0, [r7, #12]
 800a12a:	f001 fe3d 	bl	800bda8 <USBD_LL_Init>
 800a12e:	4603      	mov	r3, r0
 800a130:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a132:	7dfb      	ldrb	r3, [r7, #23]
}
 800a134:	4618      	mov	r0, r3
 800a136:	3718      	adds	r7, #24
 800a138:	46bd      	mov	sp, r7
 800a13a:	bd80      	pop	{r7, pc}

0800a13c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a13c:	b580      	push	{r7, lr}
 800a13e:	b084      	sub	sp, #16
 800a140:	af00      	add	r7, sp, #0
 800a142:	6078      	str	r0, [r7, #4]
 800a144:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a146:	2300      	movs	r3, #0
 800a148:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a14a:	683b      	ldr	r3, [r7, #0]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d101      	bne.n	800a154 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a150:	2303      	movs	r3, #3
 800a152:	e025      	b.n	800a1a0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	683a      	ldr	r2, [r7, #0]
 800a158:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	32ae      	adds	r2, #174	; 0xae
 800a166:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a16a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d00f      	beq.n	800a190 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	32ae      	adds	r2, #174	; 0xae
 800a17a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a17e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a180:	f107 020e 	add.w	r2, r7, #14
 800a184:	4610      	mov	r0, r2
 800a186:	4798      	blx	r3
 800a188:	4602      	mov	r2, r0
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800a196:	1c5a      	adds	r2, r3, #1
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800a19e:	2300      	movs	r3, #0
}
 800a1a0:	4618      	mov	r0, r3
 800a1a2:	3710      	adds	r7, #16
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	bd80      	pop	{r7, pc}

0800a1a8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	b082      	sub	sp, #8
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a1b0:	6878      	ldr	r0, [r7, #4]
 800a1b2:	f001 fe49 	bl	800be48 <USBD_LL_Start>
 800a1b6:	4603      	mov	r3, r0
}
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	3708      	adds	r7, #8
 800a1bc:	46bd      	mov	sp, r7
 800a1be:	bd80      	pop	{r7, pc}

0800a1c0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800a1c0:	b480      	push	{r7}
 800a1c2:	b083      	sub	sp, #12
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a1c8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	370c      	adds	r7, #12
 800a1ce:	46bd      	mov	sp, r7
 800a1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d4:	4770      	bx	lr

0800a1d6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a1d6:	b580      	push	{r7, lr}
 800a1d8:	b084      	sub	sp, #16
 800a1da:	af00      	add	r7, sp, #0
 800a1dc:	6078      	str	r0, [r7, #4]
 800a1de:	460b      	mov	r3, r1
 800a1e0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d009      	beq.n	800a204 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	78fa      	ldrb	r2, [r7, #3]
 800a1fa:	4611      	mov	r1, r2
 800a1fc:	6878      	ldr	r0, [r7, #4]
 800a1fe:	4798      	blx	r3
 800a200:	4603      	mov	r3, r0
 800a202:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a204:	7bfb      	ldrb	r3, [r7, #15]
}
 800a206:	4618      	mov	r0, r3
 800a208:	3710      	adds	r7, #16
 800a20a:	46bd      	mov	sp, r7
 800a20c:	bd80      	pop	{r7, pc}

0800a20e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a20e:	b580      	push	{r7, lr}
 800a210:	b084      	sub	sp, #16
 800a212:	af00      	add	r7, sp, #0
 800a214:	6078      	str	r0, [r7, #4]
 800a216:	460b      	mov	r3, r1
 800a218:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a21a:	2300      	movs	r3, #0
 800a21c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a224:	685b      	ldr	r3, [r3, #4]
 800a226:	78fa      	ldrb	r2, [r7, #3]
 800a228:	4611      	mov	r1, r2
 800a22a:	6878      	ldr	r0, [r7, #4]
 800a22c:	4798      	blx	r3
 800a22e:	4603      	mov	r3, r0
 800a230:	2b00      	cmp	r3, #0
 800a232:	d001      	beq.n	800a238 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800a234:	2303      	movs	r3, #3
 800a236:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a238:	7bfb      	ldrb	r3, [r7, #15]
}
 800a23a:	4618      	mov	r0, r3
 800a23c:	3710      	adds	r7, #16
 800a23e:	46bd      	mov	sp, r7
 800a240:	bd80      	pop	{r7, pc}

0800a242 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a242:	b580      	push	{r7, lr}
 800a244:	b084      	sub	sp, #16
 800a246:	af00      	add	r7, sp, #0
 800a248:	6078      	str	r0, [r7, #4]
 800a24a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a252:	6839      	ldr	r1, [r7, #0]
 800a254:	4618      	mov	r0, r3
 800a256:	f001 f90e 	bl	800b476 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	2201      	movs	r2, #1
 800a25e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800a268:	461a      	mov	r2, r3
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a276:	f003 031f 	and.w	r3, r3, #31
 800a27a:	2b02      	cmp	r3, #2
 800a27c:	d01a      	beq.n	800a2b4 <USBD_LL_SetupStage+0x72>
 800a27e:	2b02      	cmp	r3, #2
 800a280:	d822      	bhi.n	800a2c8 <USBD_LL_SetupStage+0x86>
 800a282:	2b00      	cmp	r3, #0
 800a284:	d002      	beq.n	800a28c <USBD_LL_SetupStage+0x4a>
 800a286:	2b01      	cmp	r3, #1
 800a288:	d00a      	beq.n	800a2a0 <USBD_LL_SetupStage+0x5e>
 800a28a:	e01d      	b.n	800a2c8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a292:	4619      	mov	r1, r3
 800a294:	6878      	ldr	r0, [r7, #4]
 800a296:	f000 fb65 	bl	800a964 <USBD_StdDevReq>
 800a29a:	4603      	mov	r3, r0
 800a29c:	73fb      	strb	r3, [r7, #15]
      break;
 800a29e:	e020      	b.n	800a2e2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a2a6:	4619      	mov	r1, r3
 800a2a8:	6878      	ldr	r0, [r7, #4]
 800a2aa:	f000 fbcd 	bl	800aa48 <USBD_StdItfReq>
 800a2ae:	4603      	mov	r3, r0
 800a2b0:	73fb      	strb	r3, [r7, #15]
      break;
 800a2b2:	e016      	b.n	800a2e2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a2ba:	4619      	mov	r1, r3
 800a2bc:	6878      	ldr	r0, [r7, #4]
 800a2be:	f000 fc2f 	bl	800ab20 <USBD_StdEPReq>
 800a2c2:	4603      	mov	r3, r0
 800a2c4:	73fb      	strb	r3, [r7, #15]
      break;
 800a2c6:	e00c      	b.n	800a2e2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a2ce:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a2d2:	b2db      	uxtb	r3, r3
 800a2d4:	4619      	mov	r1, r3
 800a2d6:	6878      	ldr	r0, [r7, #4]
 800a2d8:	f001 fe16 	bl	800bf08 <USBD_LL_StallEP>
 800a2dc:	4603      	mov	r3, r0
 800a2de:	73fb      	strb	r3, [r7, #15]
      break;
 800a2e0:	bf00      	nop
  }

  return ret;
 800a2e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	3710      	adds	r7, #16
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	bd80      	pop	{r7, pc}

0800a2ec <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a2ec:	b580      	push	{r7, lr}
 800a2ee:	b086      	sub	sp, #24
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	60f8      	str	r0, [r7, #12]
 800a2f4:	460b      	mov	r3, r1
 800a2f6:	607a      	str	r2, [r7, #4]
 800a2f8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800a2fa:	2300      	movs	r3, #0
 800a2fc:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800a2fe:	7afb      	ldrb	r3, [r7, #11]
 800a300:	2b00      	cmp	r3, #0
 800a302:	d16e      	bne.n	800a3e2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a30a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a312:	2b03      	cmp	r3, #3
 800a314:	f040 8098 	bne.w	800a448 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800a318:	693b      	ldr	r3, [r7, #16]
 800a31a:	689a      	ldr	r2, [r3, #8]
 800a31c:	693b      	ldr	r3, [r7, #16]
 800a31e:	68db      	ldr	r3, [r3, #12]
 800a320:	429a      	cmp	r2, r3
 800a322:	d913      	bls.n	800a34c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800a324:	693b      	ldr	r3, [r7, #16]
 800a326:	689a      	ldr	r2, [r3, #8]
 800a328:	693b      	ldr	r3, [r7, #16]
 800a32a:	68db      	ldr	r3, [r3, #12]
 800a32c:	1ad2      	subs	r2, r2, r3
 800a32e:	693b      	ldr	r3, [r7, #16]
 800a330:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a332:	693b      	ldr	r3, [r7, #16]
 800a334:	68da      	ldr	r2, [r3, #12]
 800a336:	693b      	ldr	r3, [r7, #16]
 800a338:	689b      	ldr	r3, [r3, #8]
 800a33a:	4293      	cmp	r3, r2
 800a33c:	bf28      	it	cs
 800a33e:	4613      	movcs	r3, r2
 800a340:	461a      	mov	r2, r3
 800a342:	6879      	ldr	r1, [r7, #4]
 800a344:	68f8      	ldr	r0, [r7, #12]
 800a346:	f001 f98a 	bl	800b65e <USBD_CtlContinueRx>
 800a34a:	e07d      	b.n	800a448 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a352:	f003 031f 	and.w	r3, r3, #31
 800a356:	2b02      	cmp	r3, #2
 800a358:	d014      	beq.n	800a384 <USBD_LL_DataOutStage+0x98>
 800a35a:	2b02      	cmp	r3, #2
 800a35c:	d81d      	bhi.n	800a39a <USBD_LL_DataOutStage+0xae>
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d002      	beq.n	800a368 <USBD_LL_DataOutStage+0x7c>
 800a362:	2b01      	cmp	r3, #1
 800a364:	d003      	beq.n	800a36e <USBD_LL_DataOutStage+0x82>
 800a366:	e018      	b.n	800a39a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800a368:	2300      	movs	r3, #0
 800a36a:	75bb      	strb	r3, [r7, #22]
            break;
 800a36c:	e018      	b.n	800a3a0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a374:	b2db      	uxtb	r3, r3
 800a376:	4619      	mov	r1, r3
 800a378:	68f8      	ldr	r0, [r7, #12]
 800a37a:	f000 fa64 	bl	800a846 <USBD_CoreFindIF>
 800a37e:	4603      	mov	r3, r0
 800a380:	75bb      	strb	r3, [r7, #22]
            break;
 800a382:	e00d      	b.n	800a3a0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a38a:	b2db      	uxtb	r3, r3
 800a38c:	4619      	mov	r1, r3
 800a38e:	68f8      	ldr	r0, [r7, #12]
 800a390:	f000 fa66 	bl	800a860 <USBD_CoreFindEP>
 800a394:	4603      	mov	r3, r0
 800a396:	75bb      	strb	r3, [r7, #22]
            break;
 800a398:	e002      	b.n	800a3a0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a39a:	2300      	movs	r3, #0
 800a39c:	75bb      	strb	r3, [r7, #22]
            break;
 800a39e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a3a0:	7dbb      	ldrb	r3, [r7, #22]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d119      	bne.n	800a3da <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a3ac:	b2db      	uxtb	r3, r3
 800a3ae:	2b03      	cmp	r3, #3
 800a3b0:	d113      	bne.n	800a3da <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a3b2:	7dba      	ldrb	r2, [r7, #22]
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	32ae      	adds	r2, #174	; 0xae
 800a3b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3bc:	691b      	ldr	r3, [r3, #16]
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d00b      	beq.n	800a3da <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800a3c2:	7dba      	ldrb	r2, [r7, #22]
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a3ca:	7dba      	ldrb	r2, [r7, #22]
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	32ae      	adds	r2, #174	; 0xae
 800a3d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3d4:	691b      	ldr	r3, [r3, #16]
 800a3d6:	68f8      	ldr	r0, [r7, #12]
 800a3d8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a3da:	68f8      	ldr	r0, [r7, #12]
 800a3dc:	f001 f950 	bl	800b680 <USBD_CtlSendStatus>
 800a3e0:	e032      	b.n	800a448 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a3e2:	7afb      	ldrb	r3, [r7, #11]
 800a3e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a3e8:	b2db      	uxtb	r3, r3
 800a3ea:	4619      	mov	r1, r3
 800a3ec:	68f8      	ldr	r0, [r7, #12]
 800a3ee:	f000 fa37 	bl	800a860 <USBD_CoreFindEP>
 800a3f2:	4603      	mov	r3, r0
 800a3f4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a3f6:	7dbb      	ldrb	r3, [r7, #22]
 800a3f8:	2bff      	cmp	r3, #255	; 0xff
 800a3fa:	d025      	beq.n	800a448 <USBD_LL_DataOutStage+0x15c>
 800a3fc:	7dbb      	ldrb	r3, [r7, #22]
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d122      	bne.n	800a448 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a408:	b2db      	uxtb	r3, r3
 800a40a:	2b03      	cmp	r3, #3
 800a40c:	d117      	bne.n	800a43e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a40e:	7dba      	ldrb	r2, [r7, #22]
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	32ae      	adds	r2, #174	; 0xae
 800a414:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a418:	699b      	ldr	r3, [r3, #24]
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d00f      	beq.n	800a43e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800a41e:	7dba      	ldrb	r2, [r7, #22]
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a426:	7dba      	ldrb	r2, [r7, #22]
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	32ae      	adds	r2, #174	; 0xae
 800a42c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a430:	699b      	ldr	r3, [r3, #24]
 800a432:	7afa      	ldrb	r2, [r7, #11]
 800a434:	4611      	mov	r1, r2
 800a436:	68f8      	ldr	r0, [r7, #12]
 800a438:	4798      	blx	r3
 800a43a:	4603      	mov	r3, r0
 800a43c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a43e:	7dfb      	ldrb	r3, [r7, #23]
 800a440:	2b00      	cmp	r3, #0
 800a442:	d001      	beq.n	800a448 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800a444:	7dfb      	ldrb	r3, [r7, #23]
 800a446:	e000      	b.n	800a44a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800a448:	2300      	movs	r3, #0
}
 800a44a:	4618      	mov	r0, r3
 800a44c:	3718      	adds	r7, #24
 800a44e:	46bd      	mov	sp, r7
 800a450:	bd80      	pop	{r7, pc}

0800a452 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a452:	b580      	push	{r7, lr}
 800a454:	b086      	sub	sp, #24
 800a456:	af00      	add	r7, sp, #0
 800a458:	60f8      	str	r0, [r7, #12]
 800a45a:	460b      	mov	r3, r1
 800a45c:	607a      	str	r2, [r7, #4]
 800a45e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800a460:	7afb      	ldrb	r3, [r7, #11]
 800a462:	2b00      	cmp	r3, #0
 800a464:	d16f      	bne.n	800a546 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	3314      	adds	r3, #20
 800a46a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a472:	2b02      	cmp	r3, #2
 800a474:	d15a      	bne.n	800a52c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800a476:	693b      	ldr	r3, [r7, #16]
 800a478:	689a      	ldr	r2, [r3, #8]
 800a47a:	693b      	ldr	r3, [r7, #16]
 800a47c:	68db      	ldr	r3, [r3, #12]
 800a47e:	429a      	cmp	r2, r3
 800a480:	d914      	bls.n	800a4ac <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a482:	693b      	ldr	r3, [r7, #16]
 800a484:	689a      	ldr	r2, [r3, #8]
 800a486:	693b      	ldr	r3, [r7, #16]
 800a488:	68db      	ldr	r3, [r3, #12]
 800a48a:	1ad2      	subs	r2, r2, r3
 800a48c:	693b      	ldr	r3, [r7, #16]
 800a48e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a490:	693b      	ldr	r3, [r7, #16]
 800a492:	689b      	ldr	r3, [r3, #8]
 800a494:	461a      	mov	r2, r3
 800a496:	6879      	ldr	r1, [r7, #4]
 800a498:	68f8      	ldr	r0, [r7, #12]
 800a49a:	f001 f8b2 	bl	800b602 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a49e:	2300      	movs	r3, #0
 800a4a0:	2200      	movs	r2, #0
 800a4a2:	2100      	movs	r1, #0
 800a4a4:	68f8      	ldr	r0, [r7, #12]
 800a4a6:	f001 fdd9 	bl	800c05c <USBD_LL_PrepareReceive>
 800a4aa:	e03f      	b.n	800a52c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a4ac:	693b      	ldr	r3, [r7, #16]
 800a4ae:	68da      	ldr	r2, [r3, #12]
 800a4b0:	693b      	ldr	r3, [r7, #16]
 800a4b2:	689b      	ldr	r3, [r3, #8]
 800a4b4:	429a      	cmp	r2, r3
 800a4b6:	d11c      	bne.n	800a4f2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a4b8:	693b      	ldr	r3, [r7, #16]
 800a4ba:	685a      	ldr	r2, [r3, #4]
 800a4bc:	693b      	ldr	r3, [r7, #16]
 800a4be:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a4c0:	429a      	cmp	r2, r3
 800a4c2:	d316      	bcc.n	800a4f2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a4c4:	693b      	ldr	r3, [r7, #16]
 800a4c6:	685a      	ldr	r2, [r3, #4]
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a4ce:	429a      	cmp	r2, r3
 800a4d0:	d20f      	bcs.n	800a4f2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a4d2:	2200      	movs	r2, #0
 800a4d4:	2100      	movs	r1, #0
 800a4d6:	68f8      	ldr	r0, [r7, #12]
 800a4d8:	f001 f893 	bl	800b602 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	2200      	movs	r2, #0
 800a4e0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	2200      	movs	r2, #0
 800a4e8:	2100      	movs	r1, #0
 800a4ea:	68f8      	ldr	r0, [r7, #12]
 800a4ec:	f001 fdb6 	bl	800c05c <USBD_LL_PrepareReceive>
 800a4f0:	e01c      	b.n	800a52c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a4f8:	b2db      	uxtb	r3, r3
 800a4fa:	2b03      	cmp	r3, #3
 800a4fc:	d10f      	bne.n	800a51e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a504:	68db      	ldr	r3, [r3, #12]
 800a506:	2b00      	cmp	r3, #0
 800a508:	d009      	beq.n	800a51e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	2200      	movs	r2, #0
 800a50e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a518:	68db      	ldr	r3, [r3, #12]
 800a51a:	68f8      	ldr	r0, [r7, #12]
 800a51c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a51e:	2180      	movs	r1, #128	; 0x80
 800a520:	68f8      	ldr	r0, [r7, #12]
 800a522:	f001 fcf1 	bl	800bf08 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a526:	68f8      	ldr	r0, [r7, #12]
 800a528:	f001 f8bd 	bl	800b6a6 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a532:	2b00      	cmp	r3, #0
 800a534:	d03a      	beq.n	800a5ac <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800a536:	68f8      	ldr	r0, [r7, #12]
 800a538:	f7ff fe42 	bl	800a1c0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	2200      	movs	r2, #0
 800a540:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a544:	e032      	b.n	800a5ac <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a546:	7afb      	ldrb	r3, [r7, #11]
 800a548:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a54c:	b2db      	uxtb	r3, r3
 800a54e:	4619      	mov	r1, r3
 800a550:	68f8      	ldr	r0, [r7, #12]
 800a552:	f000 f985 	bl	800a860 <USBD_CoreFindEP>
 800a556:	4603      	mov	r3, r0
 800a558:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a55a:	7dfb      	ldrb	r3, [r7, #23]
 800a55c:	2bff      	cmp	r3, #255	; 0xff
 800a55e:	d025      	beq.n	800a5ac <USBD_LL_DataInStage+0x15a>
 800a560:	7dfb      	ldrb	r3, [r7, #23]
 800a562:	2b00      	cmp	r3, #0
 800a564:	d122      	bne.n	800a5ac <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a56c:	b2db      	uxtb	r3, r3
 800a56e:	2b03      	cmp	r3, #3
 800a570:	d11c      	bne.n	800a5ac <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a572:	7dfa      	ldrb	r2, [r7, #23]
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	32ae      	adds	r2, #174	; 0xae
 800a578:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a57c:	695b      	ldr	r3, [r3, #20]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d014      	beq.n	800a5ac <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800a582:	7dfa      	ldrb	r2, [r7, #23]
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a58a:	7dfa      	ldrb	r2, [r7, #23]
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	32ae      	adds	r2, #174	; 0xae
 800a590:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a594:	695b      	ldr	r3, [r3, #20]
 800a596:	7afa      	ldrb	r2, [r7, #11]
 800a598:	4611      	mov	r1, r2
 800a59a:	68f8      	ldr	r0, [r7, #12]
 800a59c:	4798      	blx	r3
 800a59e:	4603      	mov	r3, r0
 800a5a0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a5a2:	7dbb      	ldrb	r3, [r7, #22]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d001      	beq.n	800a5ac <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800a5a8:	7dbb      	ldrb	r3, [r7, #22]
 800a5aa:	e000      	b.n	800a5ae <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800a5ac:	2300      	movs	r3, #0
}
 800a5ae:	4618      	mov	r0, r3
 800a5b0:	3718      	adds	r7, #24
 800a5b2:	46bd      	mov	sp, r7
 800a5b4:	bd80      	pop	{r7, pc}

0800a5b6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a5b6:	b580      	push	{r7, lr}
 800a5b8:	b084      	sub	sp, #16
 800a5ba:	af00      	add	r7, sp, #0
 800a5bc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a5be:	2300      	movs	r3, #0
 800a5c0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	2201      	movs	r2, #1
 800a5c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	2200      	movs	r2, #0
 800a5ce:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	2200      	movs	r2, #0
 800a5d6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	2200      	movs	r2, #0
 800a5dc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	2200      	movs	r2, #0
 800a5e4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d014      	beq.n	800a61c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a5f8:	685b      	ldr	r3, [r3, #4]
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d00e      	beq.n	800a61c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a604:	685b      	ldr	r3, [r3, #4]
 800a606:	687a      	ldr	r2, [r7, #4]
 800a608:	6852      	ldr	r2, [r2, #4]
 800a60a:	b2d2      	uxtb	r2, r2
 800a60c:	4611      	mov	r1, r2
 800a60e:	6878      	ldr	r0, [r7, #4]
 800a610:	4798      	blx	r3
 800a612:	4603      	mov	r3, r0
 800a614:	2b00      	cmp	r3, #0
 800a616:	d001      	beq.n	800a61c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800a618:	2303      	movs	r3, #3
 800a61a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a61c:	2340      	movs	r3, #64	; 0x40
 800a61e:	2200      	movs	r2, #0
 800a620:	2100      	movs	r1, #0
 800a622:	6878      	ldr	r0, [r7, #4]
 800a624:	f001 fc2b 	bl	800be7e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	2201      	movs	r2, #1
 800a62c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	2240      	movs	r2, #64	; 0x40
 800a634:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a638:	2340      	movs	r3, #64	; 0x40
 800a63a:	2200      	movs	r2, #0
 800a63c:	2180      	movs	r1, #128	; 0x80
 800a63e:	6878      	ldr	r0, [r7, #4]
 800a640:	f001 fc1d 	bl	800be7e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	2201      	movs	r2, #1
 800a648:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	2240      	movs	r2, #64	; 0x40
 800a64e:	621a      	str	r2, [r3, #32]

  return ret;
 800a650:	7bfb      	ldrb	r3, [r7, #15]
}
 800a652:	4618      	mov	r0, r3
 800a654:	3710      	adds	r7, #16
 800a656:	46bd      	mov	sp, r7
 800a658:	bd80      	pop	{r7, pc}

0800a65a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a65a:	b480      	push	{r7}
 800a65c:	b083      	sub	sp, #12
 800a65e:	af00      	add	r7, sp, #0
 800a660:	6078      	str	r0, [r7, #4]
 800a662:	460b      	mov	r3, r1
 800a664:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	78fa      	ldrb	r2, [r7, #3]
 800a66a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a66c:	2300      	movs	r3, #0
}
 800a66e:	4618      	mov	r0, r3
 800a670:	370c      	adds	r7, #12
 800a672:	46bd      	mov	sp, r7
 800a674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a678:	4770      	bx	lr

0800a67a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a67a:	b480      	push	{r7}
 800a67c:	b083      	sub	sp, #12
 800a67e:	af00      	add	r7, sp, #0
 800a680:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a688:	b2db      	uxtb	r3, r3
 800a68a:	2b04      	cmp	r3, #4
 800a68c:	d006      	beq.n	800a69c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a694:	b2da      	uxtb	r2, r3
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	2204      	movs	r2, #4
 800a6a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a6a4:	2300      	movs	r3, #0
}
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	370c      	adds	r7, #12
 800a6aa:	46bd      	mov	sp, r7
 800a6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b0:	4770      	bx	lr

0800a6b2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a6b2:	b480      	push	{r7}
 800a6b4:	b083      	sub	sp, #12
 800a6b6:	af00      	add	r7, sp, #0
 800a6b8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a6c0:	b2db      	uxtb	r3, r3
 800a6c2:	2b04      	cmp	r3, #4
 800a6c4:	d106      	bne.n	800a6d4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800a6cc:	b2da      	uxtb	r2, r3
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a6d4:	2300      	movs	r3, #0
}
 800a6d6:	4618      	mov	r0, r3
 800a6d8:	370c      	adds	r7, #12
 800a6da:	46bd      	mov	sp, r7
 800a6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e0:	4770      	bx	lr

0800a6e2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a6e2:	b580      	push	{r7, lr}
 800a6e4:	b082      	sub	sp, #8
 800a6e6:	af00      	add	r7, sp, #0
 800a6e8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a6f0:	b2db      	uxtb	r3, r3
 800a6f2:	2b03      	cmp	r3, #3
 800a6f4:	d110      	bne.n	800a718 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d00b      	beq.n	800a718 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a706:	69db      	ldr	r3, [r3, #28]
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d005      	beq.n	800a718 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a712:	69db      	ldr	r3, [r3, #28]
 800a714:	6878      	ldr	r0, [r7, #4]
 800a716:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800a718:	2300      	movs	r3, #0
}
 800a71a:	4618      	mov	r0, r3
 800a71c:	3708      	adds	r7, #8
 800a71e:	46bd      	mov	sp, r7
 800a720:	bd80      	pop	{r7, pc}

0800a722 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a722:	b580      	push	{r7, lr}
 800a724:	b082      	sub	sp, #8
 800a726:	af00      	add	r7, sp, #0
 800a728:	6078      	str	r0, [r7, #4]
 800a72a:	460b      	mov	r3, r1
 800a72c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	32ae      	adds	r2, #174	; 0xae
 800a738:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d101      	bne.n	800a744 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800a740:	2303      	movs	r3, #3
 800a742:	e01c      	b.n	800a77e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a74a:	b2db      	uxtb	r3, r3
 800a74c:	2b03      	cmp	r3, #3
 800a74e:	d115      	bne.n	800a77c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	32ae      	adds	r2, #174	; 0xae
 800a75a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a75e:	6a1b      	ldr	r3, [r3, #32]
 800a760:	2b00      	cmp	r3, #0
 800a762:	d00b      	beq.n	800a77c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	32ae      	adds	r2, #174	; 0xae
 800a76e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a772:	6a1b      	ldr	r3, [r3, #32]
 800a774:	78fa      	ldrb	r2, [r7, #3]
 800a776:	4611      	mov	r1, r2
 800a778:	6878      	ldr	r0, [r7, #4]
 800a77a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a77c:	2300      	movs	r3, #0
}
 800a77e:	4618      	mov	r0, r3
 800a780:	3708      	adds	r7, #8
 800a782:	46bd      	mov	sp, r7
 800a784:	bd80      	pop	{r7, pc}

0800a786 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a786:	b580      	push	{r7, lr}
 800a788:	b082      	sub	sp, #8
 800a78a:	af00      	add	r7, sp, #0
 800a78c:	6078      	str	r0, [r7, #4]
 800a78e:	460b      	mov	r3, r1
 800a790:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	32ae      	adds	r2, #174	; 0xae
 800a79c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d101      	bne.n	800a7a8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800a7a4:	2303      	movs	r3, #3
 800a7a6:	e01c      	b.n	800a7e2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a7ae:	b2db      	uxtb	r3, r3
 800a7b0:	2b03      	cmp	r3, #3
 800a7b2:	d115      	bne.n	800a7e0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	32ae      	adds	r2, #174	; 0xae
 800a7be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d00b      	beq.n	800a7e0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	32ae      	adds	r2, #174	; 0xae
 800a7d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7d8:	78fa      	ldrb	r2, [r7, #3]
 800a7da:	4611      	mov	r1, r2
 800a7dc:	6878      	ldr	r0, [r7, #4]
 800a7de:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a7e0:	2300      	movs	r3, #0
}
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	3708      	adds	r7, #8
 800a7e6:	46bd      	mov	sp, r7
 800a7e8:	bd80      	pop	{r7, pc}

0800a7ea <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a7ea:	b480      	push	{r7}
 800a7ec:	b083      	sub	sp, #12
 800a7ee:	af00      	add	r7, sp, #0
 800a7f0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a7f2:	2300      	movs	r3, #0
}
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	370c      	adds	r7, #12
 800a7f8:	46bd      	mov	sp, r7
 800a7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7fe:	4770      	bx	lr

0800a800 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a800:	b580      	push	{r7, lr}
 800a802:	b084      	sub	sp, #16
 800a804:	af00      	add	r7, sp, #0
 800a806:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800a808:	2300      	movs	r3, #0
 800a80a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	2201      	movs	r2, #1
 800a810:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d00e      	beq.n	800a83c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a824:	685b      	ldr	r3, [r3, #4]
 800a826:	687a      	ldr	r2, [r7, #4]
 800a828:	6852      	ldr	r2, [r2, #4]
 800a82a:	b2d2      	uxtb	r2, r2
 800a82c:	4611      	mov	r1, r2
 800a82e:	6878      	ldr	r0, [r7, #4]
 800a830:	4798      	blx	r3
 800a832:	4603      	mov	r3, r0
 800a834:	2b00      	cmp	r3, #0
 800a836:	d001      	beq.n	800a83c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800a838:	2303      	movs	r3, #3
 800a83a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a83c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a83e:	4618      	mov	r0, r3
 800a840:	3710      	adds	r7, #16
 800a842:	46bd      	mov	sp, r7
 800a844:	bd80      	pop	{r7, pc}

0800a846 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a846:	b480      	push	{r7}
 800a848:	b083      	sub	sp, #12
 800a84a:	af00      	add	r7, sp, #0
 800a84c:	6078      	str	r0, [r7, #4]
 800a84e:	460b      	mov	r3, r1
 800a850:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a852:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a854:	4618      	mov	r0, r3
 800a856:	370c      	adds	r7, #12
 800a858:	46bd      	mov	sp, r7
 800a85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a85e:	4770      	bx	lr

0800a860 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a860:	b480      	push	{r7}
 800a862:	b083      	sub	sp, #12
 800a864:	af00      	add	r7, sp, #0
 800a866:	6078      	str	r0, [r7, #4]
 800a868:	460b      	mov	r3, r1
 800a86a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a86c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a86e:	4618      	mov	r0, r3
 800a870:	370c      	adds	r7, #12
 800a872:	46bd      	mov	sp, r7
 800a874:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a878:	4770      	bx	lr

0800a87a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800a87a:	b580      	push	{r7, lr}
 800a87c:	b086      	sub	sp, #24
 800a87e:	af00      	add	r7, sp, #0
 800a880:	6078      	str	r0, [r7, #4]
 800a882:	460b      	mov	r3, r1
 800a884:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800a88e:	2300      	movs	r3, #0
 800a890:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	885b      	ldrh	r3, [r3, #2]
 800a896:	b29a      	uxth	r2, r3
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	781b      	ldrb	r3, [r3, #0]
 800a89c:	b29b      	uxth	r3, r3
 800a89e:	429a      	cmp	r2, r3
 800a8a0:	d920      	bls.n	800a8e4 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	781b      	ldrb	r3, [r3, #0]
 800a8a6:	b29b      	uxth	r3, r3
 800a8a8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800a8aa:	e013      	b.n	800a8d4 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800a8ac:	f107 030a 	add.w	r3, r7, #10
 800a8b0:	4619      	mov	r1, r3
 800a8b2:	6978      	ldr	r0, [r7, #20]
 800a8b4:	f000 f81b 	bl	800a8ee <USBD_GetNextDesc>
 800a8b8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a8ba:	697b      	ldr	r3, [r7, #20]
 800a8bc:	785b      	ldrb	r3, [r3, #1]
 800a8be:	2b05      	cmp	r3, #5
 800a8c0:	d108      	bne.n	800a8d4 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800a8c2:	697b      	ldr	r3, [r7, #20]
 800a8c4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800a8c6:	693b      	ldr	r3, [r7, #16]
 800a8c8:	789b      	ldrb	r3, [r3, #2]
 800a8ca:	78fa      	ldrb	r2, [r7, #3]
 800a8cc:	429a      	cmp	r2, r3
 800a8ce:	d008      	beq.n	800a8e2 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800a8d0:	2300      	movs	r3, #0
 800a8d2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	885b      	ldrh	r3, [r3, #2]
 800a8d8:	b29a      	uxth	r2, r3
 800a8da:	897b      	ldrh	r3, [r7, #10]
 800a8dc:	429a      	cmp	r2, r3
 800a8de:	d8e5      	bhi.n	800a8ac <USBD_GetEpDesc+0x32>
 800a8e0:	e000      	b.n	800a8e4 <USBD_GetEpDesc+0x6a>
          break;
 800a8e2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800a8e4:	693b      	ldr	r3, [r7, #16]
}
 800a8e6:	4618      	mov	r0, r3
 800a8e8:	3718      	adds	r7, #24
 800a8ea:	46bd      	mov	sp, r7
 800a8ec:	bd80      	pop	{r7, pc}

0800a8ee <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a8ee:	b480      	push	{r7}
 800a8f0:	b085      	sub	sp, #20
 800a8f2:	af00      	add	r7, sp, #0
 800a8f4:	6078      	str	r0, [r7, #4]
 800a8f6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800a8fc:	683b      	ldr	r3, [r7, #0]
 800a8fe:	881a      	ldrh	r2, [r3, #0]
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	781b      	ldrb	r3, [r3, #0]
 800a904:	b29b      	uxth	r3, r3
 800a906:	4413      	add	r3, r2
 800a908:	b29a      	uxth	r2, r3
 800a90a:	683b      	ldr	r3, [r7, #0]
 800a90c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	781b      	ldrb	r3, [r3, #0]
 800a912:	461a      	mov	r2, r3
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	4413      	add	r3, r2
 800a918:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a91a:	68fb      	ldr	r3, [r7, #12]
}
 800a91c:	4618      	mov	r0, r3
 800a91e:	3714      	adds	r7, #20
 800a920:	46bd      	mov	sp, r7
 800a922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a926:	4770      	bx	lr

0800a928 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a928:	b480      	push	{r7}
 800a92a:	b087      	sub	sp, #28
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a934:	697b      	ldr	r3, [r7, #20]
 800a936:	781b      	ldrb	r3, [r3, #0]
 800a938:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a93a:	697b      	ldr	r3, [r7, #20]
 800a93c:	3301      	adds	r3, #1
 800a93e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a940:	697b      	ldr	r3, [r7, #20]
 800a942:	781b      	ldrb	r3, [r3, #0]
 800a944:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a946:	8a3b      	ldrh	r3, [r7, #16]
 800a948:	021b      	lsls	r3, r3, #8
 800a94a:	b21a      	sxth	r2, r3
 800a94c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a950:	4313      	orrs	r3, r2
 800a952:	b21b      	sxth	r3, r3
 800a954:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a956:	89fb      	ldrh	r3, [r7, #14]
}
 800a958:	4618      	mov	r0, r3
 800a95a:	371c      	adds	r7, #28
 800a95c:	46bd      	mov	sp, r7
 800a95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a962:	4770      	bx	lr

0800a964 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a964:	b580      	push	{r7, lr}
 800a966:	b084      	sub	sp, #16
 800a968:	af00      	add	r7, sp, #0
 800a96a:	6078      	str	r0, [r7, #4]
 800a96c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a96e:	2300      	movs	r3, #0
 800a970:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a972:	683b      	ldr	r3, [r7, #0]
 800a974:	781b      	ldrb	r3, [r3, #0]
 800a976:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a97a:	2b40      	cmp	r3, #64	; 0x40
 800a97c:	d005      	beq.n	800a98a <USBD_StdDevReq+0x26>
 800a97e:	2b40      	cmp	r3, #64	; 0x40
 800a980:	d857      	bhi.n	800aa32 <USBD_StdDevReq+0xce>
 800a982:	2b00      	cmp	r3, #0
 800a984:	d00f      	beq.n	800a9a6 <USBD_StdDevReq+0x42>
 800a986:	2b20      	cmp	r3, #32
 800a988:	d153      	bne.n	800aa32 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	32ae      	adds	r2, #174	; 0xae
 800a994:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a998:	689b      	ldr	r3, [r3, #8]
 800a99a:	6839      	ldr	r1, [r7, #0]
 800a99c:	6878      	ldr	r0, [r7, #4]
 800a99e:	4798      	blx	r3
 800a9a0:	4603      	mov	r3, r0
 800a9a2:	73fb      	strb	r3, [r7, #15]
      break;
 800a9a4:	e04a      	b.n	800aa3c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a9a6:	683b      	ldr	r3, [r7, #0]
 800a9a8:	785b      	ldrb	r3, [r3, #1]
 800a9aa:	2b09      	cmp	r3, #9
 800a9ac:	d83b      	bhi.n	800aa26 <USBD_StdDevReq+0xc2>
 800a9ae:	a201      	add	r2, pc, #4	; (adr r2, 800a9b4 <USBD_StdDevReq+0x50>)
 800a9b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9b4:	0800aa09 	.word	0x0800aa09
 800a9b8:	0800aa1d 	.word	0x0800aa1d
 800a9bc:	0800aa27 	.word	0x0800aa27
 800a9c0:	0800aa13 	.word	0x0800aa13
 800a9c4:	0800aa27 	.word	0x0800aa27
 800a9c8:	0800a9e7 	.word	0x0800a9e7
 800a9cc:	0800a9dd 	.word	0x0800a9dd
 800a9d0:	0800aa27 	.word	0x0800aa27
 800a9d4:	0800a9ff 	.word	0x0800a9ff
 800a9d8:	0800a9f1 	.word	0x0800a9f1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a9dc:	6839      	ldr	r1, [r7, #0]
 800a9de:	6878      	ldr	r0, [r7, #4]
 800a9e0:	f000 fa3c 	bl	800ae5c <USBD_GetDescriptor>
          break;
 800a9e4:	e024      	b.n	800aa30 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a9e6:	6839      	ldr	r1, [r7, #0]
 800a9e8:	6878      	ldr	r0, [r7, #4]
 800a9ea:	f000 fba1 	bl	800b130 <USBD_SetAddress>
          break;
 800a9ee:	e01f      	b.n	800aa30 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a9f0:	6839      	ldr	r1, [r7, #0]
 800a9f2:	6878      	ldr	r0, [r7, #4]
 800a9f4:	f000 fbe0 	bl	800b1b8 <USBD_SetConfig>
 800a9f8:	4603      	mov	r3, r0
 800a9fa:	73fb      	strb	r3, [r7, #15]
          break;
 800a9fc:	e018      	b.n	800aa30 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a9fe:	6839      	ldr	r1, [r7, #0]
 800aa00:	6878      	ldr	r0, [r7, #4]
 800aa02:	f000 fc83 	bl	800b30c <USBD_GetConfig>
          break;
 800aa06:	e013      	b.n	800aa30 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800aa08:	6839      	ldr	r1, [r7, #0]
 800aa0a:	6878      	ldr	r0, [r7, #4]
 800aa0c:	f000 fcb4 	bl	800b378 <USBD_GetStatus>
          break;
 800aa10:	e00e      	b.n	800aa30 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800aa12:	6839      	ldr	r1, [r7, #0]
 800aa14:	6878      	ldr	r0, [r7, #4]
 800aa16:	f000 fce3 	bl	800b3e0 <USBD_SetFeature>
          break;
 800aa1a:	e009      	b.n	800aa30 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800aa1c:	6839      	ldr	r1, [r7, #0]
 800aa1e:	6878      	ldr	r0, [r7, #4]
 800aa20:	f000 fd07 	bl	800b432 <USBD_ClrFeature>
          break;
 800aa24:	e004      	b.n	800aa30 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800aa26:	6839      	ldr	r1, [r7, #0]
 800aa28:	6878      	ldr	r0, [r7, #4]
 800aa2a:	f000 fd5e 	bl	800b4ea <USBD_CtlError>
          break;
 800aa2e:	bf00      	nop
      }
      break;
 800aa30:	e004      	b.n	800aa3c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800aa32:	6839      	ldr	r1, [r7, #0]
 800aa34:	6878      	ldr	r0, [r7, #4]
 800aa36:	f000 fd58 	bl	800b4ea <USBD_CtlError>
      break;
 800aa3a:	bf00      	nop
  }

  return ret;
 800aa3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa3e:	4618      	mov	r0, r3
 800aa40:	3710      	adds	r7, #16
 800aa42:	46bd      	mov	sp, r7
 800aa44:	bd80      	pop	{r7, pc}
 800aa46:	bf00      	nop

0800aa48 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aa48:	b580      	push	{r7, lr}
 800aa4a:	b084      	sub	sp, #16
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	6078      	str	r0, [r7, #4]
 800aa50:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800aa52:	2300      	movs	r3, #0
 800aa54:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aa56:	683b      	ldr	r3, [r7, #0]
 800aa58:	781b      	ldrb	r3, [r3, #0]
 800aa5a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800aa5e:	2b40      	cmp	r3, #64	; 0x40
 800aa60:	d005      	beq.n	800aa6e <USBD_StdItfReq+0x26>
 800aa62:	2b40      	cmp	r3, #64	; 0x40
 800aa64:	d852      	bhi.n	800ab0c <USBD_StdItfReq+0xc4>
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d001      	beq.n	800aa6e <USBD_StdItfReq+0x26>
 800aa6a:	2b20      	cmp	r3, #32
 800aa6c:	d14e      	bne.n	800ab0c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa74:	b2db      	uxtb	r3, r3
 800aa76:	3b01      	subs	r3, #1
 800aa78:	2b02      	cmp	r3, #2
 800aa7a:	d840      	bhi.n	800aafe <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800aa7c:	683b      	ldr	r3, [r7, #0]
 800aa7e:	889b      	ldrh	r3, [r3, #4]
 800aa80:	b2db      	uxtb	r3, r3
 800aa82:	2b01      	cmp	r3, #1
 800aa84:	d836      	bhi.n	800aaf4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800aa86:	683b      	ldr	r3, [r7, #0]
 800aa88:	889b      	ldrh	r3, [r3, #4]
 800aa8a:	b2db      	uxtb	r3, r3
 800aa8c:	4619      	mov	r1, r3
 800aa8e:	6878      	ldr	r0, [r7, #4]
 800aa90:	f7ff fed9 	bl	800a846 <USBD_CoreFindIF>
 800aa94:	4603      	mov	r3, r0
 800aa96:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800aa98:	7bbb      	ldrb	r3, [r7, #14]
 800aa9a:	2bff      	cmp	r3, #255	; 0xff
 800aa9c:	d01d      	beq.n	800aada <USBD_StdItfReq+0x92>
 800aa9e:	7bbb      	ldrb	r3, [r7, #14]
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d11a      	bne.n	800aada <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800aaa4:	7bba      	ldrb	r2, [r7, #14]
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	32ae      	adds	r2, #174	; 0xae
 800aaaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aaae:	689b      	ldr	r3, [r3, #8]
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d00f      	beq.n	800aad4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800aab4:	7bba      	ldrb	r2, [r7, #14]
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800aabc:	7bba      	ldrb	r2, [r7, #14]
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	32ae      	adds	r2, #174	; 0xae
 800aac2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aac6:	689b      	ldr	r3, [r3, #8]
 800aac8:	6839      	ldr	r1, [r7, #0]
 800aaca:	6878      	ldr	r0, [r7, #4]
 800aacc:	4798      	blx	r3
 800aace:	4603      	mov	r3, r0
 800aad0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800aad2:	e004      	b.n	800aade <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800aad4:	2303      	movs	r3, #3
 800aad6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800aad8:	e001      	b.n	800aade <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800aada:	2303      	movs	r3, #3
 800aadc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800aade:	683b      	ldr	r3, [r7, #0]
 800aae0:	88db      	ldrh	r3, [r3, #6]
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d110      	bne.n	800ab08 <USBD_StdItfReq+0xc0>
 800aae6:	7bfb      	ldrb	r3, [r7, #15]
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d10d      	bne.n	800ab08 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800aaec:	6878      	ldr	r0, [r7, #4]
 800aaee:	f000 fdc7 	bl	800b680 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800aaf2:	e009      	b.n	800ab08 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800aaf4:	6839      	ldr	r1, [r7, #0]
 800aaf6:	6878      	ldr	r0, [r7, #4]
 800aaf8:	f000 fcf7 	bl	800b4ea <USBD_CtlError>
          break;
 800aafc:	e004      	b.n	800ab08 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800aafe:	6839      	ldr	r1, [r7, #0]
 800ab00:	6878      	ldr	r0, [r7, #4]
 800ab02:	f000 fcf2 	bl	800b4ea <USBD_CtlError>
          break;
 800ab06:	e000      	b.n	800ab0a <USBD_StdItfReq+0xc2>
          break;
 800ab08:	bf00      	nop
      }
      break;
 800ab0a:	e004      	b.n	800ab16 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800ab0c:	6839      	ldr	r1, [r7, #0]
 800ab0e:	6878      	ldr	r0, [r7, #4]
 800ab10:	f000 fceb 	bl	800b4ea <USBD_CtlError>
      break;
 800ab14:	bf00      	nop
  }

  return ret;
 800ab16:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab18:	4618      	mov	r0, r3
 800ab1a:	3710      	adds	r7, #16
 800ab1c:	46bd      	mov	sp, r7
 800ab1e:	bd80      	pop	{r7, pc}

0800ab20 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab20:	b580      	push	{r7, lr}
 800ab22:	b084      	sub	sp, #16
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	6078      	str	r0, [r7, #4]
 800ab28:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800ab2a:	2300      	movs	r3, #0
 800ab2c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800ab2e:	683b      	ldr	r3, [r7, #0]
 800ab30:	889b      	ldrh	r3, [r3, #4]
 800ab32:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ab34:	683b      	ldr	r3, [r7, #0]
 800ab36:	781b      	ldrb	r3, [r3, #0]
 800ab38:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ab3c:	2b40      	cmp	r3, #64	; 0x40
 800ab3e:	d007      	beq.n	800ab50 <USBD_StdEPReq+0x30>
 800ab40:	2b40      	cmp	r3, #64	; 0x40
 800ab42:	f200 817f 	bhi.w	800ae44 <USBD_StdEPReq+0x324>
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d02a      	beq.n	800aba0 <USBD_StdEPReq+0x80>
 800ab4a:	2b20      	cmp	r3, #32
 800ab4c:	f040 817a 	bne.w	800ae44 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800ab50:	7bbb      	ldrb	r3, [r7, #14]
 800ab52:	4619      	mov	r1, r3
 800ab54:	6878      	ldr	r0, [r7, #4]
 800ab56:	f7ff fe83 	bl	800a860 <USBD_CoreFindEP>
 800ab5a:	4603      	mov	r3, r0
 800ab5c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ab5e:	7b7b      	ldrb	r3, [r7, #13]
 800ab60:	2bff      	cmp	r3, #255	; 0xff
 800ab62:	f000 8174 	beq.w	800ae4e <USBD_StdEPReq+0x32e>
 800ab66:	7b7b      	ldrb	r3, [r7, #13]
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	f040 8170 	bne.w	800ae4e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800ab6e:	7b7a      	ldrb	r2, [r7, #13]
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800ab76:	7b7a      	ldrb	r2, [r7, #13]
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	32ae      	adds	r2, #174	; 0xae
 800ab7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab80:	689b      	ldr	r3, [r3, #8]
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	f000 8163 	beq.w	800ae4e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800ab88:	7b7a      	ldrb	r2, [r7, #13]
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	32ae      	adds	r2, #174	; 0xae
 800ab8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab92:	689b      	ldr	r3, [r3, #8]
 800ab94:	6839      	ldr	r1, [r7, #0]
 800ab96:	6878      	ldr	r0, [r7, #4]
 800ab98:	4798      	blx	r3
 800ab9a:	4603      	mov	r3, r0
 800ab9c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800ab9e:	e156      	b.n	800ae4e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800aba0:	683b      	ldr	r3, [r7, #0]
 800aba2:	785b      	ldrb	r3, [r3, #1]
 800aba4:	2b03      	cmp	r3, #3
 800aba6:	d008      	beq.n	800abba <USBD_StdEPReq+0x9a>
 800aba8:	2b03      	cmp	r3, #3
 800abaa:	f300 8145 	bgt.w	800ae38 <USBD_StdEPReq+0x318>
 800abae:	2b00      	cmp	r3, #0
 800abb0:	f000 809b 	beq.w	800acea <USBD_StdEPReq+0x1ca>
 800abb4:	2b01      	cmp	r3, #1
 800abb6:	d03c      	beq.n	800ac32 <USBD_StdEPReq+0x112>
 800abb8:	e13e      	b.n	800ae38 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800abc0:	b2db      	uxtb	r3, r3
 800abc2:	2b02      	cmp	r3, #2
 800abc4:	d002      	beq.n	800abcc <USBD_StdEPReq+0xac>
 800abc6:	2b03      	cmp	r3, #3
 800abc8:	d016      	beq.n	800abf8 <USBD_StdEPReq+0xd8>
 800abca:	e02c      	b.n	800ac26 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800abcc:	7bbb      	ldrb	r3, [r7, #14]
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d00d      	beq.n	800abee <USBD_StdEPReq+0xce>
 800abd2:	7bbb      	ldrb	r3, [r7, #14]
 800abd4:	2b80      	cmp	r3, #128	; 0x80
 800abd6:	d00a      	beq.n	800abee <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800abd8:	7bbb      	ldrb	r3, [r7, #14]
 800abda:	4619      	mov	r1, r3
 800abdc:	6878      	ldr	r0, [r7, #4]
 800abde:	f001 f993 	bl	800bf08 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800abe2:	2180      	movs	r1, #128	; 0x80
 800abe4:	6878      	ldr	r0, [r7, #4]
 800abe6:	f001 f98f 	bl	800bf08 <USBD_LL_StallEP>
 800abea:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800abec:	e020      	b.n	800ac30 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800abee:	6839      	ldr	r1, [r7, #0]
 800abf0:	6878      	ldr	r0, [r7, #4]
 800abf2:	f000 fc7a 	bl	800b4ea <USBD_CtlError>
              break;
 800abf6:	e01b      	b.n	800ac30 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800abf8:	683b      	ldr	r3, [r7, #0]
 800abfa:	885b      	ldrh	r3, [r3, #2]
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d10e      	bne.n	800ac1e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ac00:	7bbb      	ldrb	r3, [r7, #14]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d00b      	beq.n	800ac1e <USBD_StdEPReq+0xfe>
 800ac06:	7bbb      	ldrb	r3, [r7, #14]
 800ac08:	2b80      	cmp	r3, #128	; 0x80
 800ac0a:	d008      	beq.n	800ac1e <USBD_StdEPReq+0xfe>
 800ac0c:	683b      	ldr	r3, [r7, #0]
 800ac0e:	88db      	ldrh	r3, [r3, #6]
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d104      	bne.n	800ac1e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800ac14:	7bbb      	ldrb	r3, [r7, #14]
 800ac16:	4619      	mov	r1, r3
 800ac18:	6878      	ldr	r0, [r7, #4]
 800ac1a:	f001 f975 	bl	800bf08 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800ac1e:	6878      	ldr	r0, [r7, #4]
 800ac20:	f000 fd2e 	bl	800b680 <USBD_CtlSendStatus>

              break;
 800ac24:	e004      	b.n	800ac30 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800ac26:	6839      	ldr	r1, [r7, #0]
 800ac28:	6878      	ldr	r0, [r7, #4]
 800ac2a:	f000 fc5e 	bl	800b4ea <USBD_CtlError>
              break;
 800ac2e:	bf00      	nop
          }
          break;
 800ac30:	e107      	b.n	800ae42 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac38:	b2db      	uxtb	r3, r3
 800ac3a:	2b02      	cmp	r3, #2
 800ac3c:	d002      	beq.n	800ac44 <USBD_StdEPReq+0x124>
 800ac3e:	2b03      	cmp	r3, #3
 800ac40:	d016      	beq.n	800ac70 <USBD_StdEPReq+0x150>
 800ac42:	e04b      	b.n	800acdc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ac44:	7bbb      	ldrb	r3, [r7, #14]
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d00d      	beq.n	800ac66 <USBD_StdEPReq+0x146>
 800ac4a:	7bbb      	ldrb	r3, [r7, #14]
 800ac4c:	2b80      	cmp	r3, #128	; 0x80
 800ac4e:	d00a      	beq.n	800ac66 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ac50:	7bbb      	ldrb	r3, [r7, #14]
 800ac52:	4619      	mov	r1, r3
 800ac54:	6878      	ldr	r0, [r7, #4]
 800ac56:	f001 f957 	bl	800bf08 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ac5a:	2180      	movs	r1, #128	; 0x80
 800ac5c:	6878      	ldr	r0, [r7, #4]
 800ac5e:	f001 f953 	bl	800bf08 <USBD_LL_StallEP>
 800ac62:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ac64:	e040      	b.n	800ace8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800ac66:	6839      	ldr	r1, [r7, #0]
 800ac68:	6878      	ldr	r0, [r7, #4]
 800ac6a:	f000 fc3e 	bl	800b4ea <USBD_CtlError>
              break;
 800ac6e:	e03b      	b.n	800ace8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ac70:	683b      	ldr	r3, [r7, #0]
 800ac72:	885b      	ldrh	r3, [r3, #2]
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d136      	bne.n	800ace6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800ac78:	7bbb      	ldrb	r3, [r7, #14]
 800ac7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d004      	beq.n	800ac8c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800ac82:	7bbb      	ldrb	r3, [r7, #14]
 800ac84:	4619      	mov	r1, r3
 800ac86:	6878      	ldr	r0, [r7, #4]
 800ac88:	f001 f95d 	bl	800bf46 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800ac8c:	6878      	ldr	r0, [r7, #4]
 800ac8e:	f000 fcf7 	bl	800b680 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800ac92:	7bbb      	ldrb	r3, [r7, #14]
 800ac94:	4619      	mov	r1, r3
 800ac96:	6878      	ldr	r0, [r7, #4]
 800ac98:	f7ff fde2 	bl	800a860 <USBD_CoreFindEP>
 800ac9c:	4603      	mov	r3, r0
 800ac9e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800aca0:	7b7b      	ldrb	r3, [r7, #13]
 800aca2:	2bff      	cmp	r3, #255	; 0xff
 800aca4:	d01f      	beq.n	800ace6 <USBD_StdEPReq+0x1c6>
 800aca6:	7b7b      	ldrb	r3, [r7, #13]
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d11c      	bne.n	800ace6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800acac:	7b7a      	ldrb	r2, [r7, #13]
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800acb4:	7b7a      	ldrb	r2, [r7, #13]
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	32ae      	adds	r2, #174	; 0xae
 800acba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acbe:	689b      	ldr	r3, [r3, #8]
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d010      	beq.n	800ace6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800acc4:	7b7a      	ldrb	r2, [r7, #13]
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	32ae      	adds	r2, #174	; 0xae
 800acca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acce:	689b      	ldr	r3, [r3, #8]
 800acd0:	6839      	ldr	r1, [r7, #0]
 800acd2:	6878      	ldr	r0, [r7, #4]
 800acd4:	4798      	blx	r3
 800acd6:	4603      	mov	r3, r0
 800acd8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800acda:	e004      	b.n	800ace6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800acdc:	6839      	ldr	r1, [r7, #0]
 800acde:	6878      	ldr	r0, [r7, #4]
 800ace0:	f000 fc03 	bl	800b4ea <USBD_CtlError>
              break;
 800ace4:	e000      	b.n	800ace8 <USBD_StdEPReq+0x1c8>
              break;
 800ace6:	bf00      	nop
          }
          break;
 800ace8:	e0ab      	b.n	800ae42 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800acf0:	b2db      	uxtb	r3, r3
 800acf2:	2b02      	cmp	r3, #2
 800acf4:	d002      	beq.n	800acfc <USBD_StdEPReq+0x1dc>
 800acf6:	2b03      	cmp	r3, #3
 800acf8:	d032      	beq.n	800ad60 <USBD_StdEPReq+0x240>
 800acfa:	e097      	b.n	800ae2c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800acfc:	7bbb      	ldrb	r3, [r7, #14]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d007      	beq.n	800ad12 <USBD_StdEPReq+0x1f2>
 800ad02:	7bbb      	ldrb	r3, [r7, #14]
 800ad04:	2b80      	cmp	r3, #128	; 0x80
 800ad06:	d004      	beq.n	800ad12 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800ad08:	6839      	ldr	r1, [r7, #0]
 800ad0a:	6878      	ldr	r0, [r7, #4]
 800ad0c:	f000 fbed 	bl	800b4ea <USBD_CtlError>
                break;
 800ad10:	e091      	b.n	800ae36 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ad12:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	da0b      	bge.n	800ad32 <USBD_StdEPReq+0x212>
 800ad1a:	7bbb      	ldrb	r3, [r7, #14]
 800ad1c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ad20:	4613      	mov	r3, r2
 800ad22:	009b      	lsls	r3, r3, #2
 800ad24:	4413      	add	r3, r2
 800ad26:	009b      	lsls	r3, r3, #2
 800ad28:	3310      	adds	r3, #16
 800ad2a:	687a      	ldr	r2, [r7, #4]
 800ad2c:	4413      	add	r3, r2
 800ad2e:	3304      	adds	r3, #4
 800ad30:	e00b      	b.n	800ad4a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ad32:	7bbb      	ldrb	r3, [r7, #14]
 800ad34:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ad38:	4613      	mov	r3, r2
 800ad3a:	009b      	lsls	r3, r3, #2
 800ad3c:	4413      	add	r3, r2
 800ad3e:	009b      	lsls	r3, r3, #2
 800ad40:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ad44:	687a      	ldr	r2, [r7, #4]
 800ad46:	4413      	add	r3, r2
 800ad48:	3304      	adds	r3, #4
 800ad4a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ad4c:	68bb      	ldr	r3, [r7, #8]
 800ad4e:	2200      	movs	r2, #0
 800ad50:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ad52:	68bb      	ldr	r3, [r7, #8]
 800ad54:	2202      	movs	r2, #2
 800ad56:	4619      	mov	r1, r3
 800ad58:	6878      	ldr	r0, [r7, #4]
 800ad5a:	f000 fc37 	bl	800b5cc <USBD_CtlSendData>
              break;
 800ad5e:	e06a      	b.n	800ae36 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ad60:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	da11      	bge.n	800ad8c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ad68:	7bbb      	ldrb	r3, [r7, #14]
 800ad6a:	f003 020f 	and.w	r2, r3, #15
 800ad6e:	6879      	ldr	r1, [r7, #4]
 800ad70:	4613      	mov	r3, r2
 800ad72:	009b      	lsls	r3, r3, #2
 800ad74:	4413      	add	r3, r2
 800ad76:	009b      	lsls	r3, r3, #2
 800ad78:	440b      	add	r3, r1
 800ad7a:	3324      	adds	r3, #36	; 0x24
 800ad7c:	881b      	ldrh	r3, [r3, #0]
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d117      	bne.n	800adb2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800ad82:	6839      	ldr	r1, [r7, #0]
 800ad84:	6878      	ldr	r0, [r7, #4]
 800ad86:	f000 fbb0 	bl	800b4ea <USBD_CtlError>
                  break;
 800ad8a:	e054      	b.n	800ae36 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ad8c:	7bbb      	ldrb	r3, [r7, #14]
 800ad8e:	f003 020f 	and.w	r2, r3, #15
 800ad92:	6879      	ldr	r1, [r7, #4]
 800ad94:	4613      	mov	r3, r2
 800ad96:	009b      	lsls	r3, r3, #2
 800ad98:	4413      	add	r3, r2
 800ad9a:	009b      	lsls	r3, r3, #2
 800ad9c:	440b      	add	r3, r1
 800ad9e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ada2:	881b      	ldrh	r3, [r3, #0]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d104      	bne.n	800adb2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800ada8:	6839      	ldr	r1, [r7, #0]
 800adaa:	6878      	ldr	r0, [r7, #4]
 800adac:	f000 fb9d 	bl	800b4ea <USBD_CtlError>
                  break;
 800adb0:	e041      	b.n	800ae36 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800adb2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	da0b      	bge.n	800add2 <USBD_StdEPReq+0x2b2>
 800adba:	7bbb      	ldrb	r3, [r7, #14]
 800adbc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800adc0:	4613      	mov	r3, r2
 800adc2:	009b      	lsls	r3, r3, #2
 800adc4:	4413      	add	r3, r2
 800adc6:	009b      	lsls	r3, r3, #2
 800adc8:	3310      	adds	r3, #16
 800adca:	687a      	ldr	r2, [r7, #4]
 800adcc:	4413      	add	r3, r2
 800adce:	3304      	adds	r3, #4
 800add0:	e00b      	b.n	800adea <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800add2:	7bbb      	ldrb	r3, [r7, #14]
 800add4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800add8:	4613      	mov	r3, r2
 800adda:	009b      	lsls	r3, r3, #2
 800addc:	4413      	add	r3, r2
 800adde:	009b      	lsls	r3, r3, #2
 800ade0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ade4:	687a      	ldr	r2, [r7, #4]
 800ade6:	4413      	add	r3, r2
 800ade8:	3304      	adds	r3, #4
 800adea:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800adec:	7bbb      	ldrb	r3, [r7, #14]
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d002      	beq.n	800adf8 <USBD_StdEPReq+0x2d8>
 800adf2:	7bbb      	ldrb	r3, [r7, #14]
 800adf4:	2b80      	cmp	r3, #128	; 0x80
 800adf6:	d103      	bne.n	800ae00 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800adf8:	68bb      	ldr	r3, [r7, #8]
 800adfa:	2200      	movs	r2, #0
 800adfc:	601a      	str	r2, [r3, #0]
 800adfe:	e00e      	b.n	800ae1e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800ae00:	7bbb      	ldrb	r3, [r7, #14]
 800ae02:	4619      	mov	r1, r3
 800ae04:	6878      	ldr	r0, [r7, #4]
 800ae06:	f001 f8bd 	bl	800bf84 <USBD_LL_IsStallEP>
 800ae0a:	4603      	mov	r3, r0
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d003      	beq.n	800ae18 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800ae10:	68bb      	ldr	r3, [r7, #8]
 800ae12:	2201      	movs	r2, #1
 800ae14:	601a      	str	r2, [r3, #0]
 800ae16:	e002      	b.n	800ae1e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800ae18:	68bb      	ldr	r3, [r7, #8]
 800ae1a:	2200      	movs	r2, #0
 800ae1c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ae1e:	68bb      	ldr	r3, [r7, #8]
 800ae20:	2202      	movs	r2, #2
 800ae22:	4619      	mov	r1, r3
 800ae24:	6878      	ldr	r0, [r7, #4]
 800ae26:	f000 fbd1 	bl	800b5cc <USBD_CtlSendData>
              break;
 800ae2a:	e004      	b.n	800ae36 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800ae2c:	6839      	ldr	r1, [r7, #0]
 800ae2e:	6878      	ldr	r0, [r7, #4]
 800ae30:	f000 fb5b 	bl	800b4ea <USBD_CtlError>
              break;
 800ae34:	bf00      	nop
          }
          break;
 800ae36:	e004      	b.n	800ae42 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800ae38:	6839      	ldr	r1, [r7, #0]
 800ae3a:	6878      	ldr	r0, [r7, #4]
 800ae3c:	f000 fb55 	bl	800b4ea <USBD_CtlError>
          break;
 800ae40:	bf00      	nop
      }
      break;
 800ae42:	e005      	b.n	800ae50 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800ae44:	6839      	ldr	r1, [r7, #0]
 800ae46:	6878      	ldr	r0, [r7, #4]
 800ae48:	f000 fb4f 	bl	800b4ea <USBD_CtlError>
      break;
 800ae4c:	e000      	b.n	800ae50 <USBD_StdEPReq+0x330>
      break;
 800ae4e:	bf00      	nop
  }

  return ret;
 800ae50:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae52:	4618      	mov	r0, r3
 800ae54:	3710      	adds	r7, #16
 800ae56:	46bd      	mov	sp, r7
 800ae58:	bd80      	pop	{r7, pc}
	...

0800ae5c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae5c:	b580      	push	{r7, lr}
 800ae5e:	b084      	sub	sp, #16
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	6078      	str	r0, [r7, #4]
 800ae64:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ae66:	2300      	movs	r3, #0
 800ae68:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ae6e:	2300      	movs	r3, #0
 800ae70:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ae72:	683b      	ldr	r3, [r7, #0]
 800ae74:	885b      	ldrh	r3, [r3, #2]
 800ae76:	0a1b      	lsrs	r3, r3, #8
 800ae78:	b29b      	uxth	r3, r3
 800ae7a:	3b01      	subs	r3, #1
 800ae7c:	2b06      	cmp	r3, #6
 800ae7e:	f200 8128 	bhi.w	800b0d2 <USBD_GetDescriptor+0x276>
 800ae82:	a201      	add	r2, pc, #4	; (adr r2, 800ae88 <USBD_GetDescriptor+0x2c>)
 800ae84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae88:	0800aea5 	.word	0x0800aea5
 800ae8c:	0800aebd 	.word	0x0800aebd
 800ae90:	0800aefd 	.word	0x0800aefd
 800ae94:	0800b0d3 	.word	0x0800b0d3
 800ae98:	0800b0d3 	.word	0x0800b0d3
 800ae9c:	0800b073 	.word	0x0800b073
 800aea0:	0800b09f 	.word	0x0800b09f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	687a      	ldr	r2, [r7, #4]
 800aeae:	7c12      	ldrb	r2, [r2, #16]
 800aeb0:	f107 0108 	add.w	r1, r7, #8
 800aeb4:	4610      	mov	r0, r2
 800aeb6:	4798      	blx	r3
 800aeb8:	60f8      	str	r0, [r7, #12]
      break;
 800aeba:	e112      	b.n	800b0e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	7c1b      	ldrb	r3, [r3, #16]
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d10d      	bne.n	800aee0 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aeca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aecc:	f107 0208 	add.w	r2, r7, #8
 800aed0:	4610      	mov	r0, r2
 800aed2:	4798      	blx	r3
 800aed4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	3301      	adds	r3, #1
 800aeda:	2202      	movs	r2, #2
 800aedc:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800aede:	e100      	b.n	800b0e2 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aee8:	f107 0208 	add.w	r2, r7, #8
 800aeec:	4610      	mov	r0, r2
 800aeee:	4798      	blx	r3
 800aef0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	3301      	adds	r3, #1
 800aef6:	2202      	movs	r2, #2
 800aef8:	701a      	strb	r2, [r3, #0]
      break;
 800aefa:	e0f2      	b.n	800b0e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800aefc:	683b      	ldr	r3, [r7, #0]
 800aefe:	885b      	ldrh	r3, [r3, #2]
 800af00:	b2db      	uxtb	r3, r3
 800af02:	2b05      	cmp	r3, #5
 800af04:	f200 80ac 	bhi.w	800b060 <USBD_GetDescriptor+0x204>
 800af08:	a201      	add	r2, pc, #4	; (adr r2, 800af10 <USBD_GetDescriptor+0xb4>)
 800af0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af0e:	bf00      	nop
 800af10:	0800af29 	.word	0x0800af29
 800af14:	0800af5d 	.word	0x0800af5d
 800af18:	0800af91 	.word	0x0800af91
 800af1c:	0800afc5 	.word	0x0800afc5
 800af20:	0800aff9 	.word	0x0800aff9
 800af24:	0800b02d 	.word	0x0800b02d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af2e:	685b      	ldr	r3, [r3, #4]
 800af30:	2b00      	cmp	r3, #0
 800af32:	d00b      	beq.n	800af4c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af3a:	685b      	ldr	r3, [r3, #4]
 800af3c:	687a      	ldr	r2, [r7, #4]
 800af3e:	7c12      	ldrb	r2, [r2, #16]
 800af40:	f107 0108 	add.w	r1, r7, #8
 800af44:	4610      	mov	r0, r2
 800af46:	4798      	blx	r3
 800af48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800af4a:	e091      	b.n	800b070 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800af4c:	6839      	ldr	r1, [r7, #0]
 800af4e:	6878      	ldr	r0, [r7, #4]
 800af50:	f000 facb 	bl	800b4ea <USBD_CtlError>
            err++;
 800af54:	7afb      	ldrb	r3, [r7, #11]
 800af56:	3301      	adds	r3, #1
 800af58:	72fb      	strb	r3, [r7, #11]
          break;
 800af5a:	e089      	b.n	800b070 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af62:	689b      	ldr	r3, [r3, #8]
 800af64:	2b00      	cmp	r3, #0
 800af66:	d00b      	beq.n	800af80 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af6e:	689b      	ldr	r3, [r3, #8]
 800af70:	687a      	ldr	r2, [r7, #4]
 800af72:	7c12      	ldrb	r2, [r2, #16]
 800af74:	f107 0108 	add.w	r1, r7, #8
 800af78:	4610      	mov	r0, r2
 800af7a:	4798      	blx	r3
 800af7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800af7e:	e077      	b.n	800b070 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800af80:	6839      	ldr	r1, [r7, #0]
 800af82:	6878      	ldr	r0, [r7, #4]
 800af84:	f000 fab1 	bl	800b4ea <USBD_CtlError>
            err++;
 800af88:	7afb      	ldrb	r3, [r7, #11]
 800af8a:	3301      	adds	r3, #1
 800af8c:	72fb      	strb	r3, [r7, #11]
          break;
 800af8e:	e06f      	b.n	800b070 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af96:	68db      	ldr	r3, [r3, #12]
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d00b      	beq.n	800afb4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800afa2:	68db      	ldr	r3, [r3, #12]
 800afa4:	687a      	ldr	r2, [r7, #4]
 800afa6:	7c12      	ldrb	r2, [r2, #16]
 800afa8:	f107 0108 	add.w	r1, r7, #8
 800afac:	4610      	mov	r0, r2
 800afae:	4798      	blx	r3
 800afb0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800afb2:	e05d      	b.n	800b070 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800afb4:	6839      	ldr	r1, [r7, #0]
 800afb6:	6878      	ldr	r0, [r7, #4]
 800afb8:	f000 fa97 	bl	800b4ea <USBD_CtlError>
            err++;
 800afbc:	7afb      	ldrb	r3, [r7, #11]
 800afbe:	3301      	adds	r3, #1
 800afc0:	72fb      	strb	r3, [r7, #11]
          break;
 800afc2:	e055      	b.n	800b070 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800afca:	691b      	ldr	r3, [r3, #16]
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d00b      	beq.n	800afe8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800afd6:	691b      	ldr	r3, [r3, #16]
 800afd8:	687a      	ldr	r2, [r7, #4]
 800afda:	7c12      	ldrb	r2, [r2, #16]
 800afdc:	f107 0108 	add.w	r1, r7, #8
 800afe0:	4610      	mov	r0, r2
 800afe2:	4798      	blx	r3
 800afe4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800afe6:	e043      	b.n	800b070 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800afe8:	6839      	ldr	r1, [r7, #0]
 800afea:	6878      	ldr	r0, [r7, #4]
 800afec:	f000 fa7d 	bl	800b4ea <USBD_CtlError>
            err++;
 800aff0:	7afb      	ldrb	r3, [r7, #11]
 800aff2:	3301      	adds	r3, #1
 800aff4:	72fb      	strb	r3, [r7, #11]
          break;
 800aff6:	e03b      	b.n	800b070 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800affe:	695b      	ldr	r3, [r3, #20]
 800b000:	2b00      	cmp	r3, #0
 800b002:	d00b      	beq.n	800b01c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b00a:	695b      	ldr	r3, [r3, #20]
 800b00c:	687a      	ldr	r2, [r7, #4]
 800b00e:	7c12      	ldrb	r2, [r2, #16]
 800b010:	f107 0108 	add.w	r1, r7, #8
 800b014:	4610      	mov	r0, r2
 800b016:	4798      	blx	r3
 800b018:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b01a:	e029      	b.n	800b070 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b01c:	6839      	ldr	r1, [r7, #0]
 800b01e:	6878      	ldr	r0, [r7, #4]
 800b020:	f000 fa63 	bl	800b4ea <USBD_CtlError>
            err++;
 800b024:	7afb      	ldrb	r3, [r7, #11]
 800b026:	3301      	adds	r3, #1
 800b028:	72fb      	strb	r3, [r7, #11]
          break;
 800b02a:	e021      	b.n	800b070 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b032:	699b      	ldr	r3, [r3, #24]
 800b034:	2b00      	cmp	r3, #0
 800b036:	d00b      	beq.n	800b050 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b03e:	699b      	ldr	r3, [r3, #24]
 800b040:	687a      	ldr	r2, [r7, #4]
 800b042:	7c12      	ldrb	r2, [r2, #16]
 800b044:	f107 0108 	add.w	r1, r7, #8
 800b048:	4610      	mov	r0, r2
 800b04a:	4798      	blx	r3
 800b04c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b04e:	e00f      	b.n	800b070 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b050:	6839      	ldr	r1, [r7, #0]
 800b052:	6878      	ldr	r0, [r7, #4]
 800b054:	f000 fa49 	bl	800b4ea <USBD_CtlError>
            err++;
 800b058:	7afb      	ldrb	r3, [r7, #11]
 800b05a:	3301      	adds	r3, #1
 800b05c:	72fb      	strb	r3, [r7, #11]
          break;
 800b05e:	e007      	b.n	800b070 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b060:	6839      	ldr	r1, [r7, #0]
 800b062:	6878      	ldr	r0, [r7, #4]
 800b064:	f000 fa41 	bl	800b4ea <USBD_CtlError>
          err++;
 800b068:	7afb      	ldrb	r3, [r7, #11]
 800b06a:	3301      	adds	r3, #1
 800b06c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800b06e:	bf00      	nop
      }
      break;
 800b070:	e037      	b.n	800b0e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	7c1b      	ldrb	r3, [r3, #16]
 800b076:	2b00      	cmp	r3, #0
 800b078:	d109      	bne.n	800b08e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b080:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b082:	f107 0208 	add.w	r2, r7, #8
 800b086:	4610      	mov	r0, r2
 800b088:	4798      	blx	r3
 800b08a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b08c:	e029      	b.n	800b0e2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b08e:	6839      	ldr	r1, [r7, #0]
 800b090:	6878      	ldr	r0, [r7, #4]
 800b092:	f000 fa2a 	bl	800b4ea <USBD_CtlError>
        err++;
 800b096:	7afb      	ldrb	r3, [r7, #11]
 800b098:	3301      	adds	r3, #1
 800b09a:	72fb      	strb	r3, [r7, #11]
      break;
 800b09c:	e021      	b.n	800b0e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	7c1b      	ldrb	r3, [r3, #16]
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d10d      	bne.n	800b0c2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b0ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0ae:	f107 0208 	add.w	r2, r7, #8
 800b0b2:	4610      	mov	r0, r2
 800b0b4:	4798      	blx	r3
 800b0b6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	3301      	adds	r3, #1
 800b0bc:	2207      	movs	r2, #7
 800b0be:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b0c0:	e00f      	b.n	800b0e2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b0c2:	6839      	ldr	r1, [r7, #0]
 800b0c4:	6878      	ldr	r0, [r7, #4]
 800b0c6:	f000 fa10 	bl	800b4ea <USBD_CtlError>
        err++;
 800b0ca:	7afb      	ldrb	r3, [r7, #11]
 800b0cc:	3301      	adds	r3, #1
 800b0ce:	72fb      	strb	r3, [r7, #11]
      break;
 800b0d0:	e007      	b.n	800b0e2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b0d2:	6839      	ldr	r1, [r7, #0]
 800b0d4:	6878      	ldr	r0, [r7, #4]
 800b0d6:	f000 fa08 	bl	800b4ea <USBD_CtlError>
      err++;
 800b0da:	7afb      	ldrb	r3, [r7, #11]
 800b0dc:	3301      	adds	r3, #1
 800b0de:	72fb      	strb	r3, [r7, #11]
      break;
 800b0e0:	bf00      	nop
  }

  if (err != 0U)
 800b0e2:	7afb      	ldrb	r3, [r7, #11]
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d11e      	bne.n	800b126 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800b0e8:	683b      	ldr	r3, [r7, #0]
 800b0ea:	88db      	ldrh	r3, [r3, #6]
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d016      	beq.n	800b11e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800b0f0:	893b      	ldrh	r3, [r7, #8]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d00e      	beq.n	800b114 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800b0f6:	683b      	ldr	r3, [r7, #0]
 800b0f8:	88da      	ldrh	r2, [r3, #6]
 800b0fa:	893b      	ldrh	r3, [r7, #8]
 800b0fc:	4293      	cmp	r3, r2
 800b0fe:	bf28      	it	cs
 800b100:	4613      	movcs	r3, r2
 800b102:	b29b      	uxth	r3, r3
 800b104:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b106:	893b      	ldrh	r3, [r7, #8]
 800b108:	461a      	mov	r2, r3
 800b10a:	68f9      	ldr	r1, [r7, #12]
 800b10c:	6878      	ldr	r0, [r7, #4]
 800b10e:	f000 fa5d 	bl	800b5cc <USBD_CtlSendData>
 800b112:	e009      	b.n	800b128 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b114:	6839      	ldr	r1, [r7, #0]
 800b116:	6878      	ldr	r0, [r7, #4]
 800b118:	f000 f9e7 	bl	800b4ea <USBD_CtlError>
 800b11c:	e004      	b.n	800b128 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b11e:	6878      	ldr	r0, [r7, #4]
 800b120:	f000 faae 	bl	800b680 <USBD_CtlSendStatus>
 800b124:	e000      	b.n	800b128 <USBD_GetDescriptor+0x2cc>
    return;
 800b126:	bf00      	nop
  }
}
 800b128:	3710      	adds	r7, #16
 800b12a:	46bd      	mov	sp, r7
 800b12c:	bd80      	pop	{r7, pc}
 800b12e:	bf00      	nop

0800b130 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b130:	b580      	push	{r7, lr}
 800b132:	b084      	sub	sp, #16
 800b134:	af00      	add	r7, sp, #0
 800b136:	6078      	str	r0, [r7, #4]
 800b138:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b13a:	683b      	ldr	r3, [r7, #0]
 800b13c:	889b      	ldrh	r3, [r3, #4]
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d131      	bne.n	800b1a6 <USBD_SetAddress+0x76>
 800b142:	683b      	ldr	r3, [r7, #0]
 800b144:	88db      	ldrh	r3, [r3, #6]
 800b146:	2b00      	cmp	r3, #0
 800b148:	d12d      	bne.n	800b1a6 <USBD_SetAddress+0x76>
 800b14a:	683b      	ldr	r3, [r7, #0]
 800b14c:	885b      	ldrh	r3, [r3, #2]
 800b14e:	2b7f      	cmp	r3, #127	; 0x7f
 800b150:	d829      	bhi.n	800b1a6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b152:	683b      	ldr	r3, [r7, #0]
 800b154:	885b      	ldrh	r3, [r3, #2]
 800b156:	b2db      	uxtb	r3, r3
 800b158:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b15c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b164:	b2db      	uxtb	r3, r3
 800b166:	2b03      	cmp	r3, #3
 800b168:	d104      	bne.n	800b174 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b16a:	6839      	ldr	r1, [r7, #0]
 800b16c:	6878      	ldr	r0, [r7, #4]
 800b16e:	f000 f9bc 	bl	800b4ea <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b172:	e01d      	b.n	800b1b0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	7bfa      	ldrb	r2, [r7, #15]
 800b178:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b17c:	7bfb      	ldrb	r3, [r7, #15]
 800b17e:	4619      	mov	r1, r3
 800b180:	6878      	ldr	r0, [r7, #4]
 800b182:	f000 ff2b 	bl	800bfdc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b186:	6878      	ldr	r0, [r7, #4]
 800b188:	f000 fa7a 	bl	800b680 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b18c:	7bfb      	ldrb	r3, [r7, #15]
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d004      	beq.n	800b19c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	2202      	movs	r2, #2
 800b196:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b19a:	e009      	b.n	800b1b0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	2201      	movs	r2, #1
 800b1a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b1a4:	e004      	b.n	800b1b0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b1a6:	6839      	ldr	r1, [r7, #0]
 800b1a8:	6878      	ldr	r0, [r7, #4]
 800b1aa:	f000 f99e 	bl	800b4ea <USBD_CtlError>
  }
}
 800b1ae:	bf00      	nop
 800b1b0:	bf00      	nop
 800b1b2:	3710      	adds	r7, #16
 800b1b4:	46bd      	mov	sp, r7
 800b1b6:	bd80      	pop	{r7, pc}

0800b1b8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b1b8:	b580      	push	{r7, lr}
 800b1ba:	b084      	sub	sp, #16
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	6078      	str	r0, [r7, #4]
 800b1c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b1c2:	2300      	movs	r3, #0
 800b1c4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b1c6:	683b      	ldr	r3, [r7, #0]
 800b1c8:	885b      	ldrh	r3, [r3, #2]
 800b1ca:	b2da      	uxtb	r2, r3
 800b1cc:	4b4e      	ldr	r3, [pc, #312]	; (800b308 <USBD_SetConfig+0x150>)
 800b1ce:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b1d0:	4b4d      	ldr	r3, [pc, #308]	; (800b308 <USBD_SetConfig+0x150>)
 800b1d2:	781b      	ldrb	r3, [r3, #0]
 800b1d4:	2b01      	cmp	r3, #1
 800b1d6:	d905      	bls.n	800b1e4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b1d8:	6839      	ldr	r1, [r7, #0]
 800b1da:	6878      	ldr	r0, [r7, #4]
 800b1dc:	f000 f985 	bl	800b4ea <USBD_CtlError>
    return USBD_FAIL;
 800b1e0:	2303      	movs	r3, #3
 800b1e2:	e08c      	b.n	800b2fe <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b1ea:	b2db      	uxtb	r3, r3
 800b1ec:	2b02      	cmp	r3, #2
 800b1ee:	d002      	beq.n	800b1f6 <USBD_SetConfig+0x3e>
 800b1f0:	2b03      	cmp	r3, #3
 800b1f2:	d029      	beq.n	800b248 <USBD_SetConfig+0x90>
 800b1f4:	e075      	b.n	800b2e2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b1f6:	4b44      	ldr	r3, [pc, #272]	; (800b308 <USBD_SetConfig+0x150>)
 800b1f8:	781b      	ldrb	r3, [r3, #0]
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d020      	beq.n	800b240 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800b1fe:	4b42      	ldr	r3, [pc, #264]	; (800b308 <USBD_SetConfig+0x150>)
 800b200:	781b      	ldrb	r3, [r3, #0]
 800b202:	461a      	mov	r2, r3
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b208:	4b3f      	ldr	r3, [pc, #252]	; (800b308 <USBD_SetConfig+0x150>)
 800b20a:	781b      	ldrb	r3, [r3, #0]
 800b20c:	4619      	mov	r1, r3
 800b20e:	6878      	ldr	r0, [r7, #4]
 800b210:	f7fe ffe1 	bl	800a1d6 <USBD_SetClassConfig>
 800b214:	4603      	mov	r3, r0
 800b216:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b218:	7bfb      	ldrb	r3, [r7, #15]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d008      	beq.n	800b230 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800b21e:	6839      	ldr	r1, [r7, #0]
 800b220:	6878      	ldr	r0, [r7, #4]
 800b222:	f000 f962 	bl	800b4ea <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	2202      	movs	r2, #2
 800b22a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b22e:	e065      	b.n	800b2fc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b230:	6878      	ldr	r0, [r7, #4]
 800b232:	f000 fa25 	bl	800b680 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	2203      	movs	r2, #3
 800b23a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b23e:	e05d      	b.n	800b2fc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b240:	6878      	ldr	r0, [r7, #4]
 800b242:	f000 fa1d 	bl	800b680 <USBD_CtlSendStatus>
      break;
 800b246:	e059      	b.n	800b2fc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b248:	4b2f      	ldr	r3, [pc, #188]	; (800b308 <USBD_SetConfig+0x150>)
 800b24a:	781b      	ldrb	r3, [r3, #0]
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d112      	bne.n	800b276 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	2202      	movs	r2, #2
 800b254:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800b258:	4b2b      	ldr	r3, [pc, #172]	; (800b308 <USBD_SetConfig+0x150>)
 800b25a:	781b      	ldrb	r3, [r3, #0]
 800b25c:	461a      	mov	r2, r3
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b262:	4b29      	ldr	r3, [pc, #164]	; (800b308 <USBD_SetConfig+0x150>)
 800b264:	781b      	ldrb	r3, [r3, #0]
 800b266:	4619      	mov	r1, r3
 800b268:	6878      	ldr	r0, [r7, #4]
 800b26a:	f7fe ffd0 	bl	800a20e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b26e:	6878      	ldr	r0, [r7, #4]
 800b270:	f000 fa06 	bl	800b680 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b274:	e042      	b.n	800b2fc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800b276:	4b24      	ldr	r3, [pc, #144]	; (800b308 <USBD_SetConfig+0x150>)
 800b278:	781b      	ldrb	r3, [r3, #0]
 800b27a:	461a      	mov	r2, r3
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	685b      	ldr	r3, [r3, #4]
 800b280:	429a      	cmp	r2, r3
 800b282:	d02a      	beq.n	800b2da <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	685b      	ldr	r3, [r3, #4]
 800b288:	b2db      	uxtb	r3, r3
 800b28a:	4619      	mov	r1, r3
 800b28c:	6878      	ldr	r0, [r7, #4]
 800b28e:	f7fe ffbe 	bl	800a20e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b292:	4b1d      	ldr	r3, [pc, #116]	; (800b308 <USBD_SetConfig+0x150>)
 800b294:	781b      	ldrb	r3, [r3, #0]
 800b296:	461a      	mov	r2, r3
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b29c:	4b1a      	ldr	r3, [pc, #104]	; (800b308 <USBD_SetConfig+0x150>)
 800b29e:	781b      	ldrb	r3, [r3, #0]
 800b2a0:	4619      	mov	r1, r3
 800b2a2:	6878      	ldr	r0, [r7, #4]
 800b2a4:	f7fe ff97 	bl	800a1d6 <USBD_SetClassConfig>
 800b2a8:	4603      	mov	r3, r0
 800b2aa:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b2ac:	7bfb      	ldrb	r3, [r7, #15]
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d00f      	beq.n	800b2d2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800b2b2:	6839      	ldr	r1, [r7, #0]
 800b2b4:	6878      	ldr	r0, [r7, #4]
 800b2b6:	f000 f918 	bl	800b4ea <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	685b      	ldr	r3, [r3, #4]
 800b2be:	b2db      	uxtb	r3, r3
 800b2c0:	4619      	mov	r1, r3
 800b2c2:	6878      	ldr	r0, [r7, #4]
 800b2c4:	f7fe ffa3 	bl	800a20e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	2202      	movs	r2, #2
 800b2cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b2d0:	e014      	b.n	800b2fc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b2d2:	6878      	ldr	r0, [r7, #4]
 800b2d4:	f000 f9d4 	bl	800b680 <USBD_CtlSendStatus>
      break;
 800b2d8:	e010      	b.n	800b2fc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b2da:	6878      	ldr	r0, [r7, #4]
 800b2dc:	f000 f9d0 	bl	800b680 <USBD_CtlSendStatus>
      break;
 800b2e0:	e00c      	b.n	800b2fc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800b2e2:	6839      	ldr	r1, [r7, #0]
 800b2e4:	6878      	ldr	r0, [r7, #4]
 800b2e6:	f000 f900 	bl	800b4ea <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b2ea:	4b07      	ldr	r3, [pc, #28]	; (800b308 <USBD_SetConfig+0x150>)
 800b2ec:	781b      	ldrb	r3, [r3, #0]
 800b2ee:	4619      	mov	r1, r3
 800b2f0:	6878      	ldr	r0, [r7, #4]
 800b2f2:	f7fe ff8c 	bl	800a20e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b2f6:	2303      	movs	r3, #3
 800b2f8:	73fb      	strb	r3, [r7, #15]
      break;
 800b2fa:	bf00      	nop
  }

  return ret;
 800b2fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2fe:	4618      	mov	r0, r3
 800b300:	3710      	adds	r7, #16
 800b302:	46bd      	mov	sp, r7
 800b304:	bd80      	pop	{r7, pc}
 800b306:	bf00      	nop
 800b308:	24000650 	.word	0x24000650

0800b30c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b30c:	b580      	push	{r7, lr}
 800b30e:	b082      	sub	sp, #8
 800b310:	af00      	add	r7, sp, #0
 800b312:	6078      	str	r0, [r7, #4]
 800b314:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b316:	683b      	ldr	r3, [r7, #0]
 800b318:	88db      	ldrh	r3, [r3, #6]
 800b31a:	2b01      	cmp	r3, #1
 800b31c:	d004      	beq.n	800b328 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b31e:	6839      	ldr	r1, [r7, #0]
 800b320:	6878      	ldr	r0, [r7, #4]
 800b322:	f000 f8e2 	bl	800b4ea <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b326:	e023      	b.n	800b370 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b32e:	b2db      	uxtb	r3, r3
 800b330:	2b02      	cmp	r3, #2
 800b332:	dc02      	bgt.n	800b33a <USBD_GetConfig+0x2e>
 800b334:	2b00      	cmp	r3, #0
 800b336:	dc03      	bgt.n	800b340 <USBD_GetConfig+0x34>
 800b338:	e015      	b.n	800b366 <USBD_GetConfig+0x5a>
 800b33a:	2b03      	cmp	r3, #3
 800b33c:	d00b      	beq.n	800b356 <USBD_GetConfig+0x4a>
 800b33e:	e012      	b.n	800b366 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	2200      	movs	r2, #0
 800b344:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	3308      	adds	r3, #8
 800b34a:	2201      	movs	r2, #1
 800b34c:	4619      	mov	r1, r3
 800b34e:	6878      	ldr	r0, [r7, #4]
 800b350:	f000 f93c 	bl	800b5cc <USBD_CtlSendData>
        break;
 800b354:	e00c      	b.n	800b370 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	3304      	adds	r3, #4
 800b35a:	2201      	movs	r2, #1
 800b35c:	4619      	mov	r1, r3
 800b35e:	6878      	ldr	r0, [r7, #4]
 800b360:	f000 f934 	bl	800b5cc <USBD_CtlSendData>
        break;
 800b364:	e004      	b.n	800b370 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b366:	6839      	ldr	r1, [r7, #0]
 800b368:	6878      	ldr	r0, [r7, #4]
 800b36a:	f000 f8be 	bl	800b4ea <USBD_CtlError>
        break;
 800b36e:	bf00      	nop
}
 800b370:	bf00      	nop
 800b372:	3708      	adds	r7, #8
 800b374:	46bd      	mov	sp, r7
 800b376:	bd80      	pop	{r7, pc}

0800b378 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b378:	b580      	push	{r7, lr}
 800b37a:	b082      	sub	sp, #8
 800b37c:	af00      	add	r7, sp, #0
 800b37e:	6078      	str	r0, [r7, #4]
 800b380:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b388:	b2db      	uxtb	r3, r3
 800b38a:	3b01      	subs	r3, #1
 800b38c:	2b02      	cmp	r3, #2
 800b38e:	d81e      	bhi.n	800b3ce <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b390:	683b      	ldr	r3, [r7, #0]
 800b392:	88db      	ldrh	r3, [r3, #6]
 800b394:	2b02      	cmp	r3, #2
 800b396:	d004      	beq.n	800b3a2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b398:	6839      	ldr	r1, [r7, #0]
 800b39a:	6878      	ldr	r0, [r7, #4]
 800b39c:	f000 f8a5 	bl	800b4ea <USBD_CtlError>
        break;
 800b3a0:	e01a      	b.n	800b3d8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	2201      	movs	r2, #1
 800b3a6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d005      	beq.n	800b3be <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	68db      	ldr	r3, [r3, #12]
 800b3b6:	f043 0202 	orr.w	r2, r3, #2
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	330c      	adds	r3, #12
 800b3c2:	2202      	movs	r2, #2
 800b3c4:	4619      	mov	r1, r3
 800b3c6:	6878      	ldr	r0, [r7, #4]
 800b3c8:	f000 f900 	bl	800b5cc <USBD_CtlSendData>
      break;
 800b3cc:	e004      	b.n	800b3d8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b3ce:	6839      	ldr	r1, [r7, #0]
 800b3d0:	6878      	ldr	r0, [r7, #4]
 800b3d2:	f000 f88a 	bl	800b4ea <USBD_CtlError>
      break;
 800b3d6:	bf00      	nop
  }
}
 800b3d8:	bf00      	nop
 800b3da:	3708      	adds	r7, #8
 800b3dc:	46bd      	mov	sp, r7
 800b3de:	bd80      	pop	{r7, pc}

0800b3e0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b3e0:	b580      	push	{r7, lr}
 800b3e2:	b082      	sub	sp, #8
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	6078      	str	r0, [r7, #4]
 800b3e8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b3ea:	683b      	ldr	r3, [r7, #0]
 800b3ec:	885b      	ldrh	r3, [r3, #2]
 800b3ee:	2b01      	cmp	r3, #1
 800b3f0:	d107      	bne.n	800b402 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	2201      	movs	r2, #1
 800b3f6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b3fa:	6878      	ldr	r0, [r7, #4]
 800b3fc:	f000 f940 	bl	800b680 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b400:	e013      	b.n	800b42a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b402:	683b      	ldr	r3, [r7, #0]
 800b404:	885b      	ldrh	r3, [r3, #2]
 800b406:	2b02      	cmp	r3, #2
 800b408:	d10b      	bne.n	800b422 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800b40a:	683b      	ldr	r3, [r7, #0]
 800b40c:	889b      	ldrh	r3, [r3, #4]
 800b40e:	0a1b      	lsrs	r3, r3, #8
 800b410:	b29b      	uxth	r3, r3
 800b412:	b2da      	uxtb	r2, r3
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b41a:	6878      	ldr	r0, [r7, #4]
 800b41c:	f000 f930 	bl	800b680 <USBD_CtlSendStatus>
}
 800b420:	e003      	b.n	800b42a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b422:	6839      	ldr	r1, [r7, #0]
 800b424:	6878      	ldr	r0, [r7, #4]
 800b426:	f000 f860 	bl	800b4ea <USBD_CtlError>
}
 800b42a:	bf00      	nop
 800b42c:	3708      	adds	r7, #8
 800b42e:	46bd      	mov	sp, r7
 800b430:	bd80      	pop	{r7, pc}

0800b432 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b432:	b580      	push	{r7, lr}
 800b434:	b082      	sub	sp, #8
 800b436:	af00      	add	r7, sp, #0
 800b438:	6078      	str	r0, [r7, #4]
 800b43a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b442:	b2db      	uxtb	r3, r3
 800b444:	3b01      	subs	r3, #1
 800b446:	2b02      	cmp	r3, #2
 800b448:	d80b      	bhi.n	800b462 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b44a:	683b      	ldr	r3, [r7, #0]
 800b44c:	885b      	ldrh	r3, [r3, #2]
 800b44e:	2b01      	cmp	r3, #1
 800b450:	d10c      	bne.n	800b46c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	2200      	movs	r2, #0
 800b456:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b45a:	6878      	ldr	r0, [r7, #4]
 800b45c:	f000 f910 	bl	800b680 <USBD_CtlSendStatus>
      }
      break;
 800b460:	e004      	b.n	800b46c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b462:	6839      	ldr	r1, [r7, #0]
 800b464:	6878      	ldr	r0, [r7, #4]
 800b466:	f000 f840 	bl	800b4ea <USBD_CtlError>
      break;
 800b46a:	e000      	b.n	800b46e <USBD_ClrFeature+0x3c>
      break;
 800b46c:	bf00      	nop
  }
}
 800b46e:	bf00      	nop
 800b470:	3708      	adds	r7, #8
 800b472:	46bd      	mov	sp, r7
 800b474:	bd80      	pop	{r7, pc}

0800b476 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b476:	b580      	push	{r7, lr}
 800b478:	b084      	sub	sp, #16
 800b47a:	af00      	add	r7, sp, #0
 800b47c:	6078      	str	r0, [r7, #4]
 800b47e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b480:	683b      	ldr	r3, [r7, #0]
 800b482:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	781a      	ldrb	r2, [r3, #0]
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	3301      	adds	r3, #1
 800b490:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	781a      	ldrb	r2, [r3, #0]
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	3301      	adds	r3, #1
 800b49e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b4a0:	68f8      	ldr	r0, [r7, #12]
 800b4a2:	f7ff fa41 	bl	800a928 <SWAPBYTE>
 800b4a6:	4603      	mov	r3, r0
 800b4a8:	461a      	mov	r2, r3
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	3301      	adds	r3, #1
 800b4b2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	3301      	adds	r3, #1
 800b4b8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b4ba:	68f8      	ldr	r0, [r7, #12]
 800b4bc:	f7ff fa34 	bl	800a928 <SWAPBYTE>
 800b4c0:	4603      	mov	r3, r0
 800b4c2:	461a      	mov	r2, r3
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	3301      	adds	r3, #1
 800b4cc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	3301      	adds	r3, #1
 800b4d2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b4d4:	68f8      	ldr	r0, [r7, #12]
 800b4d6:	f7ff fa27 	bl	800a928 <SWAPBYTE>
 800b4da:	4603      	mov	r3, r0
 800b4dc:	461a      	mov	r2, r3
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	80da      	strh	r2, [r3, #6]
}
 800b4e2:	bf00      	nop
 800b4e4:	3710      	adds	r7, #16
 800b4e6:	46bd      	mov	sp, r7
 800b4e8:	bd80      	pop	{r7, pc}

0800b4ea <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b4ea:	b580      	push	{r7, lr}
 800b4ec:	b082      	sub	sp, #8
 800b4ee:	af00      	add	r7, sp, #0
 800b4f0:	6078      	str	r0, [r7, #4]
 800b4f2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b4f4:	2180      	movs	r1, #128	; 0x80
 800b4f6:	6878      	ldr	r0, [r7, #4]
 800b4f8:	f000 fd06 	bl	800bf08 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b4fc:	2100      	movs	r1, #0
 800b4fe:	6878      	ldr	r0, [r7, #4]
 800b500:	f000 fd02 	bl	800bf08 <USBD_LL_StallEP>
}
 800b504:	bf00      	nop
 800b506:	3708      	adds	r7, #8
 800b508:	46bd      	mov	sp, r7
 800b50a:	bd80      	pop	{r7, pc}

0800b50c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b50c:	b580      	push	{r7, lr}
 800b50e:	b086      	sub	sp, #24
 800b510:	af00      	add	r7, sp, #0
 800b512:	60f8      	str	r0, [r7, #12]
 800b514:	60b9      	str	r1, [r7, #8]
 800b516:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b518:	2300      	movs	r3, #0
 800b51a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d036      	beq.n	800b590 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b526:	6938      	ldr	r0, [r7, #16]
 800b528:	f000 f836 	bl	800b598 <USBD_GetLen>
 800b52c:	4603      	mov	r3, r0
 800b52e:	3301      	adds	r3, #1
 800b530:	b29b      	uxth	r3, r3
 800b532:	005b      	lsls	r3, r3, #1
 800b534:	b29a      	uxth	r2, r3
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b53a:	7dfb      	ldrb	r3, [r7, #23]
 800b53c:	68ba      	ldr	r2, [r7, #8]
 800b53e:	4413      	add	r3, r2
 800b540:	687a      	ldr	r2, [r7, #4]
 800b542:	7812      	ldrb	r2, [r2, #0]
 800b544:	701a      	strb	r2, [r3, #0]
  idx++;
 800b546:	7dfb      	ldrb	r3, [r7, #23]
 800b548:	3301      	adds	r3, #1
 800b54a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b54c:	7dfb      	ldrb	r3, [r7, #23]
 800b54e:	68ba      	ldr	r2, [r7, #8]
 800b550:	4413      	add	r3, r2
 800b552:	2203      	movs	r2, #3
 800b554:	701a      	strb	r2, [r3, #0]
  idx++;
 800b556:	7dfb      	ldrb	r3, [r7, #23]
 800b558:	3301      	adds	r3, #1
 800b55a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b55c:	e013      	b.n	800b586 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b55e:	7dfb      	ldrb	r3, [r7, #23]
 800b560:	68ba      	ldr	r2, [r7, #8]
 800b562:	4413      	add	r3, r2
 800b564:	693a      	ldr	r2, [r7, #16]
 800b566:	7812      	ldrb	r2, [r2, #0]
 800b568:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b56a:	693b      	ldr	r3, [r7, #16]
 800b56c:	3301      	adds	r3, #1
 800b56e:	613b      	str	r3, [r7, #16]
    idx++;
 800b570:	7dfb      	ldrb	r3, [r7, #23]
 800b572:	3301      	adds	r3, #1
 800b574:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b576:	7dfb      	ldrb	r3, [r7, #23]
 800b578:	68ba      	ldr	r2, [r7, #8]
 800b57a:	4413      	add	r3, r2
 800b57c:	2200      	movs	r2, #0
 800b57e:	701a      	strb	r2, [r3, #0]
    idx++;
 800b580:	7dfb      	ldrb	r3, [r7, #23]
 800b582:	3301      	adds	r3, #1
 800b584:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b586:	693b      	ldr	r3, [r7, #16]
 800b588:	781b      	ldrb	r3, [r3, #0]
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d1e7      	bne.n	800b55e <USBD_GetString+0x52>
 800b58e:	e000      	b.n	800b592 <USBD_GetString+0x86>
    return;
 800b590:	bf00      	nop
  }
}
 800b592:	3718      	adds	r7, #24
 800b594:	46bd      	mov	sp, r7
 800b596:	bd80      	pop	{r7, pc}

0800b598 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b598:	b480      	push	{r7}
 800b59a:	b085      	sub	sp, #20
 800b59c:	af00      	add	r7, sp, #0
 800b59e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b5a0:	2300      	movs	r3, #0
 800b5a2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b5a8:	e005      	b.n	800b5b6 <USBD_GetLen+0x1e>
  {
    len++;
 800b5aa:	7bfb      	ldrb	r3, [r7, #15]
 800b5ac:	3301      	adds	r3, #1
 800b5ae:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b5b0:	68bb      	ldr	r3, [r7, #8]
 800b5b2:	3301      	adds	r3, #1
 800b5b4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b5b6:	68bb      	ldr	r3, [r7, #8]
 800b5b8:	781b      	ldrb	r3, [r3, #0]
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d1f5      	bne.n	800b5aa <USBD_GetLen+0x12>
  }

  return len;
 800b5be:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5c0:	4618      	mov	r0, r3
 800b5c2:	3714      	adds	r7, #20
 800b5c4:	46bd      	mov	sp, r7
 800b5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ca:	4770      	bx	lr

0800b5cc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b5cc:	b580      	push	{r7, lr}
 800b5ce:	b084      	sub	sp, #16
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	60f8      	str	r0, [r7, #12]
 800b5d4:	60b9      	str	r1, [r7, #8]
 800b5d6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	2202      	movs	r2, #2
 800b5dc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	687a      	ldr	r2, [r7, #4]
 800b5e4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	687a      	ldr	r2, [r7, #4]
 800b5ea:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	68ba      	ldr	r2, [r7, #8]
 800b5f0:	2100      	movs	r1, #0
 800b5f2:	68f8      	ldr	r0, [r7, #12]
 800b5f4:	f000 fd11 	bl	800c01a <USBD_LL_Transmit>

  return USBD_OK;
 800b5f8:	2300      	movs	r3, #0
}
 800b5fa:	4618      	mov	r0, r3
 800b5fc:	3710      	adds	r7, #16
 800b5fe:	46bd      	mov	sp, r7
 800b600:	bd80      	pop	{r7, pc}

0800b602 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b602:	b580      	push	{r7, lr}
 800b604:	b084      	sub	sp, #16
 800b606:	af00      	add	r7, sp, #0
 800b608:	60f8      	str	r0, [r7, #12]
 800b60a:	60b9      	str	r1, [r7, #8]
 800b60c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	68ba      	ldr	r2, [r7, #8]
 800b612:	2100      	movs	r1, #0
 800b614:	68f8      	ldr	r0, [r7, #12]
 800b616:	f000 fd00 	bl	800c01a <USBD_LL_Transmit>

  return USBD_OK;
 800b61a:	2300      	movs	r3, #0
}
 800b61c:	4618      	mov	r0, r3
 800b61e:	3710      	adds	r7, #16
 800b620:	46bd      	mov	sp, r7
 800b622:	bd80      	pop	{r7, pc}

0800b624 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b624:	b580      	push	{r7, lr}
 800b626:	b084      	sub	sp, #16
 800b628:	af00      	add	r7, sp, #0
 800b62a:	60f8      	str	r0, [r7, #12]
 800b62c:	60b9      	str	r1, [r7, #8]
 800b62e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	2203      	movs	r2, #3
 800b634:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	687a      	ldr	r2, [r7, #4]
 800b63c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	687a      	ldr	r2, [r7, #4]
 800b644:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	68ba      	ldr	r2, [r7, #8]
 800b64c:	2100      	movs	r1, #0
 800b64e:	68f8      	ldr	r0, [r7, #12]
 800b650:	f000 fd04 	bl	800c05c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b654:	2300      	movs	r3, #0
}
 800b656:	4618      	mov	r0, r3
 800b658:	3710      	adds	r7, #16
 800b65a:	46bd      	mov	sp, r7
 800b65c:	bd80      	pop	{r7, pc}

0800b65e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b65e:	b580      	push	{r7, lr}
 800b660:	b084      	sub	sp, #16
 800b662:	af00      	add	r7, sp, #0
 800b664:	60f8      	str	r0, [r7, #12]
 800b666:	60b9      	str	r1, [r7, #8]
 800b668:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	68ba      	ldr	r2, [r7, #8]
 800b66e:	2100      	movs	r1, #0
 800b670:	68f8      	ldr	r0, [r7, #12]
 800b672:	f000 fcf3 	bl	800c05c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b676:	2300      	movs	r3, #0
}
 800b678:	4618      	mov	r0, r3
 800b67a:	3710      	adds	r7, #16
 800b67c:	46bd      	mov	sp, r7
 800b67e:	bd80      	pop	{r7, pc}

0800b680 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b680:	b580      	push	{r7, lr}
 800b682:	b082      	sub	sp, #8
 800b684:	af00      	add	r7, sp, #0
 800b686:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	2204      	movs	r2, #4
 800b68c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b690:	2300      	movs	r3, #0
 800b692:	2200      	movs	r2, #0
 800b694:	2100      	movs	r1, #0
 800b696:	6878      	ldr	r0, [r7, #4]
 800b698:	f000 fcbf 	bl	800c01a <USBD_LL_Transmit>

  return USBD_OK;
 800b69c:	2300      	movs	r3, #0
}
 800b69e:	4618      	mov	r0, r3
 800b6a0:	3708      	adds	r7, #8
 800b6a2:	46bd      	mov	sp, r7
 800b6a4:	bd80      	pop	{r7, pc}

0800b6a6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b6a6:	b580      	push	{r7, lr}
 800b6a8:	b082      	sub	sp, #8
 800b6aa:	af00      	add	r7, sp, #0
 800b6ac:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	2205      	movs	r2, #5
 800b6b2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b6b6:	2300      	movs	r3, #0
 800b6b8:	2200      	movs	r2, #0
 800b6ba:	2100      	movs	r1, #0
 800b6bc:	6878      	ldr	r0, [r7, #4]
 800b6be:	f000 fccd 	bl	800c05c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b6c2:	2300      	movs	r3, #0
}
 800b6c4:	4618      	mov	r0, r3
 800b6c6:	3708      	adds	r7, #8
 800b6c8:	46bd      	mov	sp, r7
 800b6ca:	bd80      	pop	{r7, pc}

0800b6cc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b6cc:	b580      	push	{r7, lr}
 800b6ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b6d0:	2200      	movs	r2, #0
 800b6d2:	4913      	ldr	r1, [pc, #76]	; (800b720 <MX_USB_DEVICE_Init+0x54>)
 800b6d4:	4813      	ldr	r0, [pc, #76]	; (800b724 <MX_USB_DEVICE_Init+0x58>)
 800b6d6:	f7fe fd01 	bl	800a0dc <USBD_Init>
 800b6da:	4603      	mov	r3, r0
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d001      	beq.n	800b6e4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b6e0:	f7f5 fe6a 	bl	80013b8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b6e4:	4910      	ldr	r1, [pc, #64]	; (800b728 <MX_USB_DEVICE_Init+0x5c>)
 800b6e6:	480f      	ldr	r0, [pc, #60]	; (800b724 <MX_USB_DEVICE_Init+0x58>)
 800b6e8:	f7fe fd28 	bl	800a13c <USBD_RegisterClass>
 800b6ec:	4603      	mov	r3, r0
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d001      	beq.n	800b6f6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b6f2:	f7f5 fe61 	bl	80013b8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b6f6:	490d      	ldr	r1, [pc, #52]	; (800b72c <MX_USB_DEVICE_Init+0x60>)
 800b6f8:	480a      	ldr	r0, [pc, #40]	; (800b724 <MX_USB_DEVICE_Init+0x58>)
 800b6fa:	f7fe fc1f 	bl	8009f3c <USBD_CDC_RegisterInterface>
 800b6fe:	4603      	mov	r3, r0
 800b700:	2b00      	cmp	r3, #0
 800b702:	d001      	beq.n	800b708 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b704:	f7f5 fe58 	bl	80013b8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b708:	4806      	ldr	r0, [pc, #24]	; (800b724 <MX_USB_DEVICE_Init+0x58>)
 800b70a:	f7fe fd4d 	bl	800a1a8 <USBD_Start>
 800b70e:	4603      	mov	r3, r0
 800b710:	2b00      	cmp	r3, #0
 800b712:	d001      	beq.n	800b718 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b714:	f7f5 fe50 	bl	80013b8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800b718:	f7f8 fe7a 	bl	8004410 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b71c:	bf00      	nop
 800b71e:	bd80      	pop	{r7, pc}
 800b720:	240003a8 	.word	0x240003a8
 800b724:	24000654 	.word	0x24000654
 800b728:	24000314 	.word	0x24000314
 800b72c:	24000394 	.word	0x24000394

0800b730 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b730:	b580      	push	{r7, lr}
 800b732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b734:	2200      	movs	r2, #0
 800b736:	4905      	ldr	r1, [pc, #20]	; (800b74c <CDC_Init_FS+0x1c>)
 800b738:	4805      	ldr	r0, [pc, #20]	; (800b750 <CDC_Init_FS+0x20>)
 800b73a:	f7fe fc19 	bl	8009f70 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b73e:	4905      	ldr	r1, [pc, #20]	; (800b754 <CDC_Init_FS+0x24>)
 800b740:	4803      	ldr	r0, [pc, #12]	; (800b750 <CDC_Init_FS+0x20>)
 800b742:	f7fe fc37 	bl	8009fb4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b746:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b748:	4618      	mov	r0, r3
 800b74a:	bd80      	pop	{r7, pc}
 800b74c:	24001130 	.word	0x24001130
 800b750:	24000654 	.word	0x24000654
 800b754:	24000930 	.word	0x24000930

0800b758 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b758:	b480      	push	{r7}
 800b75a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b75c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b75e:	4618      	mov	r0, r3
 800b760:	46bd      	mov	sp, r7
 800b762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b766:	4770      	bx	lr

0800b768 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b768:	b480      	push	{r7}
 800b76a:	b083      	sub	sp, #12
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	4603      	mov	r3, r0
 800b770:	6039      	str	r1, [r7, #0]
 800b772:	71fb      	strb	r3, [r7, #7]
 800b774:	4613      	mov	r3, r2
 800b776:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b778:	79fb      	ldrb	r3, [r7, #7]
 800b77a:	2b23      	cmp	r3, #35	; 0x23
 800b77c:	d84a      	bhi.n	800b814 <CDC_Control_FS+0xac>
 800b77e:	a201      	add	r2, pc, #4	; (adr r2, 800b784 <CDC_Control_FS+0x1c>)
 800b780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b784:	0800b815 	.word	0x0800b815
 800b788:	0800b815 	.word	0x0800b815
 800b78c:	0800b815 	.word	0x0800b815
 800b790:	0800b815 	.word	0x0800b815
 800b794:	0800b815 	.word	0x0800b815
 800b798:	0800b815 	.word	0x0800b815
 800b79c:	0800b815 	.word	0x0800b815
 800b7a0:	0800b815 	.word	0x0800b815
 800b7a4:	0800b815 	.word	0x0800b815
 800b7a8:	0800b815 	.word	0x0800b815
 800b7ac:	0800b815 	.word	0x0800b815
 800b7b0:	0800b815 	.word	0x0800b815
 800b7b4:	0800b815 	.word	0x0800b815
 800b7b8:	0800b815 	.word	0x0800b815
 800b7bc:	0800b815 	.word	0x0800b815
 800b7c0:	0800b815 	.word	0x0800b815
 800b7c4:	0800b815 	.word	0x0800b815
 800b7c8:	0800b815 	.word	0x0800b815
 800b7cc:	0800b815 	.word	0x0800b815
 800b7d0:	0800b815 	.word	0x0800b815
 800b7d4:	0800b815 	.word	0x0800b815
 800b7d8:	0800b815 	.word	0x0800b815
 800b7dc:	0800b815 	.word	0x0800b815
 800b7e0:	0800b815 	.word	0x0800b815
 800b7e4:	0800b815 	.word	0x0800b815
 800b7e8:	0800b815 	.word	0x0800b815
 800b7ec:	0800b815 	.word	0x0800b815
 800b7f0:	0800b815 	.word	0x0800b815
 800b7f4:	0800b815 	.word	0x0800b815
 800b7f8:	0800b815 	.word	0x0800b815
 800b7fc:	0800b815 	.word	0x0800b815
 800b800:	0800b815 	.word	0x0800b815
 800b804:	0800b815 	.word	0x0800b815
 800b808:	0800b815 	.word	0x0800b815
 800b80c:	0800b815 	.word	0x0800b815
 800b810:	0800b815 	.word	0x0800b815
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b814:	bf00      	nop
  }

  return (USBD_OK);
 800b816:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b818:	4618      	mov	r0, r3
 800b81a:	370c      	adds	r7, #12
 800b81c:	46bd      	mov	sp, r7
 800b81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b822:	4770      	bx	lr

0800b824 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b824:	b580      	push	{r7, lr}
 800b826:	b082      	sub	sp, #8
 800b828:	af00      	add	r7, sp, #0
 800b82a:	6078      	str	r0, [r7, #4]
 800b82c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b82e:	6879      	ldr	r1, [r7, #4]
 800b830:	4805      	ldr	r0, [pc, #20]	; (800b848 <CDC_Receive_FS+0x24>)
 800b832:	f7fe fbbf 	bl	8009fb4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b836:	4804      	ldr	r0, [pc, #16]	; (800b848 <CDC_Receive_FS+0x24>)
 800b838:	f7fe fc1a 	bl	800a070 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b83c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b83e:	4618      	mov	r0, r3
 800b840:	3708      	adds	r7, #8
 800b842:	46bd      	mov	sp, r7
 800b844:	bd80      	pop	{r7, pc}
 800b846:	bf00      	nop
 800b848:	24000654 	.word	0x24000654

0800b84c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800b84c:	b580      	push	{r7, lr}
 800b84e:	b084      	sub	sp, #16
 800b850:	af00      	add	r7, sp, #0
 800b852:	6078      	str	r0, [r7, #4]
 800b854:	460b      	mov	r3, r1
 800b856:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800b858:	2300      	movs	r3, #0
 800b85a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b85c:	4b0d      	ldr	r3, [pc, #52]	; (800b894 <CDC_Transmit_FS+0x48>)
 800b85e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b862:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800b864:	68bb      	ldr	r3, [r7, #8]
 800b866:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d001      	beq.n	800b872 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800b86e:	2301      	movs	r3, #1
 800b870:	e00b      	b.n	800b88a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b872:	887b      	ldrh	r3, [r7, #2]
 800b874:	461a      	mov	r2, r3
 800b876:	6879      	ldr	r1, [r7, #4]
 800b878:	4806      	ldr	r0, [pc, #24]	; (800b894 <CDC_Transmit_FS+0x48>)
 800b87a:	f7fe fb79 	bl	8009f70 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b87e:	4805      	ldr	r0, [pc, #20]	; (800b894 <CDC_Transmit_FS+0x48>)
 800b880:	f7fe fbb6 	bl	8009ff0 <USBD_CDC_TransmitPacket>
 800b884:	4603      	mov	r3, r0
 800b886:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800b888:	7bfb      	ldrb	r3, [r7, #15]
}
 800b88a:	4618      	mov	r0, r3
 800b88c:	3710      	adds	r7, #16
 800b88e:	46bd      	mov	sp, r7
 800b890:	bd80      	pop	{r7, pc}
 800b892:	bf00      	nop
 800b894:	24000654 	.word	0x24000654

0800b898 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b898:	b480      	push	{r7}
 800b89a:	b087      	sub	sp, #28
 800b89c:	af00      	add	r7, sp, #0
 800b89e:	60f8      	str	r0, [r7, #12]
 800b8a0:	60b9      	str	r1, [r7, #8]
 800b8a2:	4613      	mov	r3, r2
 800b8a4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b8a6:	2300      	movs	r3, #0
 800b8a8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800b8aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b8ae:	4618      	mov	r0, r3
 800b8b0:	371c      	adds	r7, #28
 800b8b2:	46bd      	mov	sp, r7
 800b8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b8:	4770      	bx	lr
	...

0800b8bc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b8bc:	b480      	push	{r7}
 800b8be:	b083      	sub	sp, #12
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	4603      	mov	r3, r0
 800b8c4:	6039      	str	r1, [r7, #0]
 800b8c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b8c8:	683b      	ldr	r3, [r7, #0]
 800b8ca:	2212      	movs	r2, #18
 800b8cc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b8ce:	4b03      	ldr	r3, [pc, #12]	; (800b8dc <USBD_FS_DeviceDescriptor+0x20>)
}
 800b8d0:	4618      	mov	r0, r3
 800b8d2:	370c      	adds	r7, #12
 800b8d4:	46bd      	mov	sp, r7
 800b8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8da:	4770      	bx	lr
 800b8dc:	240003c4 	.word	0x240003c4

0800b8e0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b8e0:	b480      	push	{r7}
 800b8e2:	b083      	sub	sp, #12
 800b8e4:	af00      	add	r7, sp, #0
 800b8e6:	4603      	mov	r3, r0
 800b8e8:	6039      	str	r1, [r7, #0]
 800b8ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b8ec:	683b      	ldr	r3, [r7, #0]
 800b8ee:	2204      	movs	r2, #4
 800b8f0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b8f2:	4b03      	ldr	r3, [pc, #12]	; (800b900 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b8f4:	4618      	mov	r0, r3
 800b8f6:	370c      	adds	r7, #12
 800b8f8:	46bd      	mov	sp, r7
 800b8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8fe:	4770      	bx	lr
 800b900:	240003d8 	.word	0x240003d8

0800b904 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b904:	b580      	push	{r7, lr}
 800b906:	b082      	sub	sp, #8
 800b908:	af00      	add	r7, sp, #0
 800b90a:	4603      	mov	r3, r0
 800b90c:	6039      	str	r1, [r7, #0]
 800b90e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b910:	79fb      	ldrb	r3, [r7, #7]
 800b912:	2b00      	cmp	r3, #0
 800b914:	d105      	bne.n	800b922 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b916:	683a      	ldr	r2, [r7, #0]
 800b918:	4907      	ldr	r1, [pc, #28]	; (800b938 <USBD_FS_ProductStrDescriptor+0x34>)
 800b91a:	4808      	ldr	r0, [pc, #32]	; (800b93c <USBD_FS_ProductStrDescriptor+0x38>)
 800b91c:	f7ff fdf6 	bl	800b50c <USBD_GetString>
 800b920:	e004      	b.n	800b92c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b922:	683a      	ldr	r2, [r7, #0]
 800b924:	4904      	ldr	r1, [pc, #16]	; (800b938 <USBD_FS_ProductStrDescriptor+0x34>)
 800b926:	4805      	ldr	r0, [pc, #20]	; (800b93c <USBD_FS_ProductStrDescriptor+0x38>)
 800b928:	f7ff fdf0 	bl	800b50c <USBD_GetString>
  }
  return USBD_StrDesc;
 800b92c:	4b02      	ldr	r3, [pc, #8]	; (800b938 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b92e:	4618      	mov	r0, r3
 800b930:	3708      	adds	r7, #8
 800b932:	46bd      	mov	sp, r7
 800b934:	bd80      	pop	{r7, pc}
 800b936:	bf00      	nop
 800b938:	24001930 	.word	0x24001930
 800b93c:	0800d2c0 	.word	0x0800d2c0

0800b940 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b940:	b580      	push	{r7, lr}
 800b942:	b082      	sub	sp, #8
 800b944:	af00      	add	r7, sp, #0
 800b946:	4603      	mov	r3, r0
 800b948:	6039      	str	r1, [r7, #0]
 800b94a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b94c:	683a      	ldr	r2, [r7, #0]
 800b94e:	4904      	ldr	r1, [pc, #16]	; (800b960 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b950:	4804      	ldr	r0, [pc, #16]	; (800b964 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b952:	f7ff fddb 	bl	800b50c <USBD_GetString>
  return USBD_StrDesc;
 800b956:	4b02      	ldr	r3, [pc, #8]	; (800b960 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b958:	4618      	mov	r0, r3
 800b95a:	3708      	adds	r7, #8
 800b95c:	46bd      	mov	sp, r7
 800b95e:	bd80      	pop	{r7, pc}
 800b960:	24001930 	.word	0x24001930
 800b964:	0800d2d8 	.word	0x0800d2d8

0800b968 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b968:	b580      	push	{r7, lr}
 800b96a:	b082      	sub	sp, #8
 800b96c:	af00      	add	r7, sp, #0
 800b96e:	4603      	mov	r3, r0
 800b970:	6039      	str	r1, [r7, #0]
 800b972:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b974:	683b      	ldr	r3, [r7, #0]
 800b976:	221a      	movs	r2, #26
 800b978:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b97a:	f000 f843 	bl	800ba04 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b97e:	4b02      	ldr	r3, [pc, #8]	; (800b988 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b980:	4618      	mov	r0, r3
 800b982:	3708      	adds	r7, #8
 800b984:	46bd      	mov	sp, r7
 800b986:	bd80      	pop	{r7, pc}
 800b988:	240003dc 	.word	0x240003dc

0800b98c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b98c:	b580      	push	{r7, lr}
 800b98e:	b082      	sub	sp, #8
 800b990:	af00      	add	r7, sp, #0
 800b992:	4603      	mov	r3, r0
 800b994:	6039      	str	r1, [r7, #0]
 800b996:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b998:	79fb      	ldrb	r3, [r7, #7]
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d105      	bne.n	800b9aa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b99e:	683a      	ldr	r2, [r7, #0]
 800b9a0:	4907      	ldr	r1, [pc, #28]	; (800b9c0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b9a2:	4808      	ldr	r0, [pc, #32]	; (800b9c4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b9a4:	f7ff fdb2 	bl	800b50c <USBD_GetString>
 800b9a8:	e004      	b.n	800b9b4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b9aa:	683a      	ldr	r2, [r7, #0]
 800b9ac:	4904      	ldr	r1, [pc, #16]	; (800b9c0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b9ae:	4805      	ldr	r0, [pc, #20]	; (800b9c4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b9b0:	f7ff fdac 	bl	800b50c <USBD_GetString>
  }
  return USBD_StrDesc;
 800b9b4:	4b02      	ldr	r3, [pc, #8]	; (800b9c0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	3708      	adds	r7, #8
 800b9ba:	46bd      	mov	sp, r7
 800b9bc:	bd80      	pop	{r7, pc}
 800b9be:	bf00      	nop
 800b9c0:	24001930 	.word	0x24001930
 800b9c4:	0800d2ec 	.word	0x0800d2ec

0800b9c8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b9c8:	b580      	push	{r7, lr}
 800b9ca:	b082      	sub	sp, #8
 800b9cc:	af00      	add	r7, sp, #0
 800b9ce:	4603      	mov	r3, r0
 800b9d0:	6039      	str	r1, [r7, #0]
 800b9d2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b9d4:	79fb      	ldrb	r3, [r7, #7]
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d105      	bne.n	800b9e6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b9da:	683a      	ldr	r2, [r7, #0]
 800b9dc:	4907      	ldr	r1, [pc, #28]	; (800b9fc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b9de:	4808      	ldr	r0, [pc, #32]	; (800ba00 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b9e0:	f7ff fd94 	bl	800b50c <USBD_GetString>
 800b9e4:	e004      	b.n	800b9f0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b9e6:	683a      	ldr	r2, [r7, #0]
 800b9e8:	4904      	ldr	r1, [pc, #16]	; (800b9fc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b9ea:	4805      	ldr	r0, [pc, #20]	; (800ba00 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b9ec:	f7ff fd8e 	bl	800b50c <USBD_GetString>
  }
  return USBD_StrDesc;
 800b9f0:	4b02      	ldr	r3, [pc, #8]	; (800b9fc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b9f2:	4618      	mov	r0, r3
 800b9f4:	3708      	adds	r7, #8
 800b9f6:	46bd      	mov	sp, r7
 800b9f8:	bd80      	pop	{r7, pc}
 800b9fa:	bf00      	nop
 800b9fc:	24001930 	.word	0x24001930
 800ba00:	0800d2f8 	.word	0x0800d2f8

0800ba04 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ba04:	b580      	push	{r7, lr}
 800ba06:	b084      	sub	sp, #16
 800ba08:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ba0a:	4b0f      	ldr	r3, [pc, #60]	; (800ba48 <Get_SerialNum+0x44>)
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ba10:	4b0e      	ldr	r3, [pc, #56]	; (800ba4c <Get_SerialNum+0x48>)
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ba16:	4b0e      	ldr	r3, [pc, #56]	; (800ba50 <Get_SerialNum+0x4c>)
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ba1c:	68fa      	ldr	r2, [r7, #12]
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	4413      	add	r3, r2
 800ba22:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d009      	beq.n	800ba3e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ba2a:	2208      	movs	r2, #8
 800ba2c:	4909      	ldr	r1, [pc, #36]	; (800ba54 <Get_SerialNum+0x50>)
 800ba2e:	68f8      	ldr	r0, [r7, #12]
 800ba30:	f000 f814 	bl	800ba5c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ba34:	2204      	movs	r2, #4
 800ba36:	4908      	ldr	r1, [pc, #32]	; (800ba58 <Get_SerialNum+0x54>)
 800ba38:	68b8      	ldr	r0, [r7, #8]
 800ba3a:	f000 f80f 	bl	800ba5c <IntToUnicode>
  }
}
 800ba3e:	bf00      	nop
 800ba40:	3710      	adds	r7, #16
 800ba42:	46bd      	mov	sp, r7
 800ba44:	bd80      	pop	{r7, pc}
 800ba46:	bf00      	nop
 800ba48:	1ff1e800 	.word	0x1ff1e800
 800ba4c:	1ff1e804 	.word	0x1ff1e804
 800ba50:	1ff1e808 	.word	0x1ff1e808
 800ba54:	240003de 	.word	0x240003de
 800ba58:	240003ee 	.word	0x240003ee

0800ba5c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ba5c:	b480      	push	{r7}
 800ba5e:	b087      	sub	sp, #28
 800ba60:	af00      	add	r7, sp, #0
 800ba62:	60f8      	str	r0, [r7, #12]
 800ba64:	60b9      	str	r1, [r7, #8]
 800ba66:	4613      	mov	r3, r2
 800ba68:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ba6a:	2300      	movs	r3, #0
 800ba6c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ba6e:	2300      	movs	r3, #0
 800ba70:	75fb      	strb	r3, [r7, #23]
 800ba72:	e027      	b.n	800bac4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	0f1b      	lsrs	r3, r3, #28
 800ba78:	2b09      	cmp	r3, #9
 800ba7a:	d80b      	bhi.n	800ba94 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	0f1b      	lsrs	r3, r3, #28
 800ba80:	b2da      	uxtb	r2, r3
 800ba82:	7dfb      	ldrb	r3, [r7, #23]
 800ba84:	005b      	lsls	r3, r3, #1
 800ba86:	4619      	mov	r1, r3
 800ba88:	68bb      	ldr	r3, [r7, #8]
 800ba8a:	440b      	add	r3, r1
 800ba8c:	3230      	adds	r2, #48	; 0x30
 800ba8e:	b2d2      	uxtb	r2, r2
 800ba90:	701a      	strb	r2, [r3, #0]
 800ba92:	e00a      	b.n	800baaa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	0f1b      	lsrs	r3, r3, #28
 800ba98:	b2da      	uxtb	r2, r3
 800ba9a:	7dfb      	ldrb	r3, [r7, #23]
 800ba9c:	005b      	lsls	r3, r3, #1
 800ba9e:	4619      	mov	r1, r3
 800baa0:	68bb      	ldr	r3, [r7, #8]
 800baa2:	440b      	add	r3, r1
 800baa4:	3237      	adds	r2, #55	; 0x37
 800baa6:	b2d2      	uxtb	r2, r2
 800baa8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	011b      	lsls	r3, r3, #4
 800baae:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800bab0:	7dfb      	ldrb	r3, [r7, #23]
 800bab2:	005b      	lsls	r3, r3, #1
 800bab4:	3301      	adds	r3, #1
 800bab6:	68ba      	ldr	r2, [r7, #8]
 800bab8:	4413      	add	r3, r2
 800baba:	2200      	movs	r2, #0
 800babc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800babe:	7dfb      	ldrb	r3, [r7, #23]
 800bac0:	3301      	adds	r3, #1
 800bac2:	75fb      	strb	r3, [r7, #23]
 800bac4:	7dfa      	ldrb	r2, [r7, #23]
 800bac6:	79fb      	ldrb	r3, [r7, #7]
 800bac8:	429a      	cmp	r2, r3
 800baca:	d3d3      	bcc.n	800ba74 <IntToUnicode+0x18>
  }
}
 800bacc:	bf00      	nop
 800bace:	bf00      	nop
 800bad0:	371c      	adds	r7, #28
 800bad2:	46bd      	mov	sp, r7
 800bad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad8:	4770      	bx	lr
	...

0800badc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800badc:	b580      	push	{r7, lr}
 800bade:	b0ba      	sub	sp, #232	; 0xe8
 800bae0:	af00      	add	r7, sp, #0
 800bae2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bae4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800bae8:	2200      	movs	r2, #0
 800baea:	601a      	str	r2, [r3, #0]
 800baec:	605a      	str	r2, [r3, #4]
 800baee:	609a      	str	r2, [r3, #8]
 800baf0:	60da      	str	r2, [r3, #12]
 800baf2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800baf4:	f107 0310 	add.w	r3, r7, #16
 800baf8:	22c0      	movs	r2, #192	; 0xc0
 800bafa:	2100      	movs	r1, #0
 800bafc:	4618      	mov	r0, r3
 800bafe:	f000 fdc5 	bl	800c68c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	4a2c      	ldr	r2, [pc, #176]	; (800bbb8 <HAL_PCD_MspInit+0xdc>)
 800bb08:	4293      	cmp	r3, r2
 800bb0a:	d151      	bne.n	800bbb0 <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800bb0c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800bb10:	f04f 0300 	mov.w	r3, #0
 800bb14:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800bb18:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800bb1c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800bb20:	f107 0310 	add.w	r3, r7, #16
 800bb24:	4618      	mov	r0, r3
 800bb26:	f7f9 fc53 	bl	80053d0 <HAL_RCCEx_PeriphCLKConfig>
 800bb2a:	4603      	mov	r3, r0
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d001      	beq.n	800bb34 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 800bb30:	f7f5 fc42 	bl	80013b8 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800bb34:	f7f8 fc6c 	bl	8004410 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bb38:	4b20      	ldr	r3, [pc, #128]	; (800bbbc <HAL_PCD_MspInit+0xe0>)
 800bb3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bb3e:	4a1f      	ldr	r2, [pc, #124]	; (800bbbc <HAL_PCD_MspInit+0xe0>)
 800bb40:	f043 0301 	orr.w	r3, r3, #1
 800bb44:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800bb48:	4b1c      	ldr	r3, [pc, #112]	; (800bbbc <HAL_PCD_MspInit+0xe0>)
 800bb4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bb4e:	f003 0301 	and.w	r3, r3, #1
 800bb52:	60fb      	str	r3, [r7, #12]
 800bb54:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = USB_OTG_FS2_P_Pin|USB_OTG_FS2_N_Pin;
 800bb56:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800bb5a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bb5e:	2302      	movs	r3, #2
 800bb60:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bb64:	2300      	movs	r3, #0
 800bb66:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bb6a:	2300      	movs	r3, #0
 800bb6c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800bb70:	230a      	movs	r3, #10
 800bb72:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bb76:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800bb7a:	4619      	mov	r1, r3
 800bb7c:	4810      	ldr	r0, [pc, #64]	; (800bbc0 <HAL_PCD_MspInit+0xe4>)
 800bb7e:	f7f6 ff8b 	bl	8002a98 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800bb82:	4b0e      	ldr	r3, [pc, #56]	; (800bbbc <HAL_PCD_MspInit+0xe0>)
 800bb84:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800bb88:	4a0c      	ldr	r2, [pc, #48]	; (800bbbc <HAL_PCD_MspInit+0xe0>)
 800bb8a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800bb8e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800bb92:	4b0a      	ldr	r3, [pc, #40]	; (800bbbc <HAL_PCD_MspInit+0xe0>)
 800bb94:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800bb98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bb9c:	60bb      	str	r3, [r7, #8]
 800bb9e:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800bba0:	2200      	movs	r2, #0
 800bba2:	2100      	movs	r1, #0
 800bba4:	2065      	movs	r0, #101	; 0x65
 800bba6:	f7f6 ff42 	bl	8002a2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800bbaa:	2065      	movs	r0, #101	; 0x65
 800bbac:	f7f6 ff59 	bl	8002a62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800bbb0:	bf00      	nop
 800bbb2:	37e8      	adds	r7, #232	; 0xe8
 800bbb4:	46bd      	mov	sp, r7
 800bbb6:	bd80      	pop	{r7, pc}
 800bbb8:	40080000 	.word	0x40080000
 800bbbc:	58024400 	.word	0x58024400
 800bbc0:	58020000 	.word	0x58020000

0800bbc4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bbc4:	b580      	push	{r7, lr}
 800bbc6:	b082      	sub	sp, #8
 800bbc8:	af00      	add	r7, sp, #0
 800bbca:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800bbd8:	4619      	mov	r1, r3
 800bbda:	4610      	mov	r0, r2
 800bbdc:	f7fe fb31 	bl	800a242 <USBD_LL_SetupStage>
}
 800bbe0:	bf00      	nop
 800bbe2:	3708      	adds	r7, #8
 800bbe4:	46bd      	mov	sp, r7
 800bbe6:	bd80      	pop	{r7, pc}

0800bbe8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bbe8:	b580      	push	{r7, lr}
 800bbea:	b082      	sub	sp, #8
 800bbec:	af00      	add	r7, sp, #0
 800bbee:	6078      	str	r0, [r7, #4]
 800bbf0:	460b      	mov	r3, r1
 800bbf2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800bbfa:	78fa      	ldrb	r2, [r7, #3]
 800bbfc:	6879      	ldr	r1, [r7, #4]
 800bbfe:	4613      	mov	r3, r2
 800bc00:	00db      	lsls	r3, r3, #3
 800bc02:	4413      	add	r3, r2
 800bc04:	009b      	lsls	r3, r3, #2
 800bc06:	440b      	add	r3, r1
 800bc08:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800bc0c:	681a      	ldr	r2, [r3, #0]
 800bc0e:	78fb      	ldrb	r3, [r7, #3]
 800bc10:	4619      	mov	r1, r3
 800bc12:	f7fe fb6b 	bl	800a2ec <USBD_LL_DataOutStage>
}
 800bc16:	bf00      	nop
 800bc18:	3708      	adds	r7, #8
 800bc1a:	46bd      	mov	sp, r7
 800bc1c:	bd80      	pop	{r7, pc}

0800bc1e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc1e:	b580      	push	{r7, lr}
 800bc20:	b082      	sub	sp, #8
 800bc22:	af00      	add	r7, sp, #0
 800bc24:	6078      	str	r0, [r7, #4]
 800bc26:	460b      	mov	r3, r1
 800bc28:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800bc30:	78fa      	ldrb	r2, [r7, #3]
 800bc32:	6879      	ldr	r1, [r7, #4]
 800bc34:	4613      	mov	r3, r2
 800bc36:	00db      	lsls	r3, r3, #3
 800bc38:	4413      	add	r3, r2
 800bc3a:	009b      	lsls	r3, r3, #2
 800bc3c:	440b      	add	r3, r1
 800bc3e:	3348      	adds	r3, #72	; 0x48
 800bc40:	681a      	ldr	r2, [r3, #0]
 800bc42:	78fb      	ldrb	r3, [r7, #3]
 800bc44:	4619      	mov	r1, r3
 800bc46:	f7fe fc04 	bl	800a452 <USBD_LL_DataInStage>
}
 800bc4a:	bf00      	nop
 800bc4c:	3708      	adds	r7, #8
 800bc4e:	46bd      	mov	sp, r7
 800bc50:	bd80      	pop	{r7, pc}

0800bc52 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc52:	b580      	push	{r7, lr}
 800bc54:	b082      	sub	sp, #8
 800bc56:	af00      	add	r7, sp, #0
 800bc58:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bc60:	4618      	mov	r0, r3
 800bc62:	f7fe fd3e 	bl	800a6e2 <USBD_LL_SOF>
}
 800bc66:	bf00      	nop
 800bc68:	3708      	adds	r7, #8
 800bc6a:	46bd      	mov	sp, r7
 800bc6c:	bd80      	pop	{r7, pc}

0800bc6e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc6e:	b580      	push	{r7, lr}
 800bc70:	b084      	sub	sp, #16
 800bc72:	af00      	add	r7, sp, #0
 800bc74:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800bc76:	2301      	movs	r3, #1
 800bc78:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	691b      	ldr	r3, [r3, #16]
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d102      	bne.n	800bc88 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800bc82:	2300      	movs	r3, #0
 800bc84:	73fb      	strb	r3, [r7, #15]
 800bc86:	e008      	b.n	800bc9a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	691b      	ldr	r3, [r3, #16]
 800bc8c:	2b02      	cmp	r3, #2
 800bc8e:	d102      	bne.n	800bc96 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800bc90:	2301      	movs	r3, #1
 800bc92:	73fb      	strb	r3, [r7, #15]
 800bc94:	e001      	b.n	800bc9a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800bc96:	f7f5 fb8f 	bl	80013b8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bca0:	7bfa      	ldrb	r2, [r7, #15]
 800bca2:	4611      	mov	r1, r2
 800bca4:	4618      	mov	r0, r3
 800bca6:	f7fe fcd8 	bl	800a65a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bcb0:	4618      	mov	r0, r3
 800bcb2:	f7fe fc80 	bl	800a5b6 <USBD_LL_Reset>
}
 800bcb6:	bf00      	nop
 800bcb8:	3710      	adds	r7, #16
 800bcba:	46bd      	mov	sp, r7
 800bcbc:	bd80      	pop	{r7, pc}
	...

0800bcc0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bcc0:	b580      	push	{r7, lr}
 800bcc2:	b082      	sub	sp, #8
 800bcc4:	af00      	add	r7, sp, #0
 800bcc6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bcce:	4618      	mov	r0, r3
 800bcd0:	f7fe fcd3 	bl	800a67a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	687a      	ldr	r2, [r7, #4]
 800bce0:	6812      	ldr	r2, [r2, #0]
 800bce2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800bce6:	f043 0301 	orr.w	r3, r3, #1
 800bcea:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	6a1b      	ldr	r3, [r3, #32]
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d005      	beq.n	800bd00 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bcf4:	4b04      	ldr	r3, [pc, #16]	; (800bd08 <HAL_PCD_SuspendCallback+0x48>)
 800bcf6:	691b      	ldr	r3, [r3, #16]
 800bcf8:	4a03      	ldr	r2, [pc, #12]	; (800bd08 <HAL_PCD_SuspendCallback+0x48>)
 800bcfa:	f043 0306 	orr.w	r3, r3, #6
 800bcfe:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800bd00:	bf00      	nop
 800bd02:	3708      	adds	r7, #8
 800bd04:	46bd      	mov	sp, r7
 800bd06:	bd80      	pop	{r7, pc}
 800bd08:	e000ed00 	.word	0xe000ed00

0800bd0c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bd0c:	b580      	push	{r7, lr}
 800bd0e:	b082      	sub	sp, #8
 800bd10:	af00      	add	r7, sp, #0
 800bd12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bd1a:	4618      	mov	r0, r3
 800bd1c:	f7fe fcc9 	bl	800a6b2 <USBD_LL_Resume>
}
 800bd20:	bf00      	nop
 800bd22:	3708      	adds	r7, #8
 800bd24:	46bd      	mov	sp, r7
 800bd26:	bd80      	pop	{r7, pc}

0800bd28 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bd28:	b580      	push	{r7, lr}
 800bd2a:	b082      	sub	sp, #8
 800bd2c:	af00      	add	r7, sp, #0
 800bd2e:	6078      	str	r0, [r7, #4]
 800bd30:	460b      	mov	r3, r1
 800bd32:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bd3a:	78fa      	ldrb	r2, [r7, #3]
 800bd3c:	4611      	mov	r1, r2
 800bd3e:	4618      	mov	r0, r3
 800bd40:	f7fe fd21 	bl	800a786 <USBD_LL_IsoOUTIncomplete>
}
 800bd44:	bf00      	nop
 800bd46:	3708      	adds	r7, #8
 800bd48:	46bd      	mov	sp, r7
 800bd4a:	bd80      	pop	{r7, pc}

0800bd4c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bd4c:	b580      	push	{r7, lr}
 800bd4e:	b082      	sub	sp, #8
 800bd50:	af00      	add	r7, sp, #0
 800bd52:	6078      	str	r0, [r7, #4]
 800bd54:	460b      	mov	r3, r1
 800bd56:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bd5e:	78fa      	ldrb	r2, [r7, #3]
 800bd60:	4611      	mov	r1, r2
 800bd62:	4618      	mov	r0, r3
 800bd64:	f7fe fcdd 	bl	800a722 <USBD_LL_IsoINIncomplete>
}
 800bd68:	bf00      	nop
 800bd6a:	3708      	adds	r7, #8
 800bd6c:	46bd      	mov	sp, r7
 800bd6e:	bd80      	pop	{r7, pc}

0800bd70 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bd70:	b580      	push	{r7, lr}
 800bd72:	b082      	sub	sp, #8
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bd7e:	4618      	mov	r0, r3
 800bd80:	f7fe fd33 	bl	800a7ea <USBD_LL_DevConnected>
}
 800bd84:	bf00      	nop
 800bd86:	3708      	adds	r7, #8
 800bd88:	46bd      	mov	sp, r7
 800bd8a:	bd80      	pop	{r7, pc}

0800bd8c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bd8c:	b580      	push	{r7, lr}
 800bd8e:	b082      	sub	sp, #8
 800bd90:	af00      	add	r7, sp, #0
 800bd92:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bd9a:	4618      	mov	r0, r3
 800bd9c:	f7fe fd30 	bl	800a800 <USBD_LL_DevDisconnected>
}
 800bda0:	bf00      	nop
 800bda2:	3708      	adds	r7, #8
 800bda4:	46bd      	mov	sp, r7
 800bda6:	bd80      	pop	{r7, pc}

0800bda8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800bda8:	b580      	push	{r7, lr}
 800bdaa:	b082      	sub	sp, #8
 800bdac:	af00      	add	r7, sp, #0
 800bdae:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	781b      	ldrb	r3, [r3, #0]
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d13e      	bne.n	800be36 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800bdb8:	4a21      	ldr	r2, [pc, #132]	; (800be40 <USBD_LL_Init+0x98>)
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	4a1f      	ldr	r2, [pc, #124]	; (800be40 <USBD_LL_Init+0x98>)
 800bdc4:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800bdc8:	4b1d      	ldr	r3, [pc, #116]	; (800be40 <USBD_LL_Init+0x98>)
 800bdca:	4a1e      	ldr	r2, [pc, #120]	; (800be44 <USBD_LL_Init+0x9c>)
 800bdcc:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800bdce:	4b1c      	ldr	r3, [pc, #112]	; (800be40 <USBD_LL_Init+0x98>)
 800bdd0:	2209      	movs	r2, #9
 800bdd2:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800bdd4:	4b1a      	ldr	r3, [pc, #104]	; (800be40 <USBD_LL_Init+0x98>)
 800bdd6:	2202      	movs	r2, #2
 800bdd8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800bdda:	4b19      	ldr	r3, [pc, #100]	; (800be40 <USBD_LL_Init+0x98>)
 800bddc:	2200      	movs	r2, #0
 800bdde:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800bde0:	4b17      	ldr	r3, [pc, #92]	; (800be40 <USBD_LL_Init+0x98>)
 800bde2:	2202      	movs	r2, #2
 800bde4:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800bde6:	4b16      	ldr	r3, [pc, #88]	; (800be40 <USBD_LL_Init+0x98>)
 800bde8:	2200      	movs	r2, #0
 800bdea:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800bdec:	4b14      	ldr	r3, [pc, #80]	; (800be40 <USBD_LL_Init+0x98>)
 800bdee:	2200      	movs	r2, #0
 800bdf0:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800bdf2:	4b13      	ldr	r3, [pc, #76]	; (800be40 <USBD_LL_Init+0x98>)
 800bdf4:	2200      	movs	r2, #0
 800bdf6:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800bdf8:	4b11      	ldr	r3, [pc, #68]	; (800be40 <USBD_LL_Init+0x98>)
 800bdfa:	2200      	movs	r2, #0
 800bdfc:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800bdfe:	4b10      	ldr	r3, [pc, #64]	; (800be40 <USBD_LL_Init+0x98>)
 800be00:	2200      	movs	r2, #0
 800be02:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800be04:	4b0e      	ldr	r3, [pc, #56]	; (800be40 <USBD_LL_Init+0x98>)
 800be06:	2200      	movs	r2, #0
 800be08:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800be0a:	480d      	ldr	r0, [pc, #52]	; (800be40 <USBD_LL_Init+0x98>)
 800be0c:	f7f7 f80d 	bl	8002e2a <HAL_PCD_Init>
 800be10:	4603      	mov	r3, r0
 800be12:	2b00      	cmp	r3, #0
 800be14:	d001      	beq.n	800be1a <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800be16:	f7f5 facf 	bl	80013b8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800be1a:	2180      	movs	r1, #128	; 0x80
 800be1c:	4808      	ldr	r0, [pc, #32]	; (800be40 <USBD_LL_Init+0x98>)
 800be1e:	f7f8 fa7c 	bl	800431a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800be22:	2240      	movs	r2, #64	; 0x40
 800be24:	2100      	movs	r1, #0
 800be26:	4806      	ldr	r0, [pc, #24]	; (800be40 <USBD_LL_Init+0x98>)
 800be28:	f7f8 fa30 	bl	800428c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800be2c:	2280      	movs	r2, #128	; 0x80
 800be2e:	2101      	movs	r1, #1
 800be30:	4803      	ldr	r0, [pc, #12]	; (800be40 <USBD_LL_Init+0x98>)
 800be32:	f7f8 fa2b 	bl	800428c <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 800be36:	2300      	movs	r3, #0
}
 800be38:	4618      	mov	r0, r3
 800be3a:	3708      	adds	r7, #8
 800be3c:	46bd      	mov	sp, r7
 800be3e:	bd80      	pop	{r7, pc}
 800be40:	24001b30 	.word	0x24001b30
 800be44:	40080000 	.word	0x40080000

0800be48 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800be48:	b580      	push	{r7, lr}
 800be4a:	b084      	sub	sp, #16
 800be4c:	af00      	add	r7, sp, #0
 800be4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be50:	2300      	movs	r3, #0
 800be52:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800be54:	2300      	movs	r3, #0
 800be56:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800be5e:	4618      	mov	r0, r3
 800be60:	f7f7 f907 	bl	8003072 <HAL_PCD_Start>
 800be64:	4603      	mov	r3, r0
 800be66:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800be68:	7bfb      	ldrb	r3, [r7, #15]
 800be6a:	4618      	mov	r0, r3
 800be6c:	f000 f942 	bl	800c0f4 <USBD_Get_USB_Status>
 800be70:	4603      	mov	r3, r0
 800be72:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800be74:	7bbb      	ldrb	r3, [r7, #14]
}
 800be76:	4618      	mov	r0, r3
 800be78:	3710      	adds	r7, #16
 800be7a:	46bd      	mov	sp, r7
 800be7c:	bd80      	pop	{r7, pc}

0800be7e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800be7e:	b580      	push	{r7, lr}
 800be80:	b084      	sub	sp, #16
 800be82:	af00      	add	r7, sp, #0
 800be84:	6078      	str	r0, [r7, #4]
 800be86:	4608      	mov	r0, r1
 800be88:	4611      	mov	r1, r2
 800be8a:	461a      	mov	r2, r3
 800be8c:	4603      	mov	r3, r0
 800be8e:	70fb      	strb	r3, [r7, #3]
 800be90:	460b      	mov	r3, r1
 800be92:	70bb      	strb	r3, [r7, #2]
 800be94:	4613      	mov	r3, r2
 800be96:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be98:	2300      	movs	r3, #0
 800be9a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800be9c:	2300      	movs	r3, #0
 800be9e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800bea6:	78bb      	ldrb	r3, [r7, #2]
 800bea8:	883a      	ldrh	r2, [r7, #0]
 800beaa:	78f9      	ldrb	r1, [r7, #3]
 800beac:	f7f7 fe07 	bl	8003abe <HAL_PCD_EP_Open>
 800beb0:	4603      	mov	r3, r0
 800beb2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800beb4:	7bfb      	ldrb	r3, [r7, #15]
 800beb6:	4618      	mov	r0, r3
 800beb8:	f000 f91c 	bl	800c0f4 <USBD_Get_USB_Status>
 800bebc:	4603      	mov	r3, r0
 800bebe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bec0:	7bbb      	ldrb	r3, [r7, #14]
}
 800bec2:	4618      	mov	r0, r3
 800bec4:	3710      	adds	r7, #16
 800bec6:	46bd      	mov	sp, r7
 800bec8:	bd80      	pop	{r7, pc}

0800beca <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800beca:	b580      	push	{r7, lr}
 800becc:	b084      	sub	sp, #16
 800bece:	af00      	add	r7, sp, #0
 800bed0:	6078      	str	r0, [r7, #4]
 800bed2:	460b      	mov	r3, r1
 800bed4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bed6:	2300      	movs	r3, #0
 800bed8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800beda:	2300      	movs	r3, #0
 800bedc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bee4:	78fa      	ldrb	r2, [r7, #3]
 800bee6:	4611      	mov	r1, r2
 800bee8:	4618      	mov	r0, r3
 800beea:	f7f7 fe50 	bl	8003b8e <HAL_PCD_EP_Close>
 800beee:	4603      	mov	r3, r0
 800bef0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bef2:	7bfb      	ldrb	r3, [r7, #15]
 800bef4:	4618      	mov	r0, r3
 800bef6:	f000 f8fd 	bl	800c0f4 <USBD_Get_USB_Status>
 800befa:	4603      	mov	r3, r0
 800befc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800befe:	7bbb      	ldrb	r3, [r7, #14]
}
 800bf00:	4618      	mov	r0, r3
 800bf02:	3710      	adds	r7, #16
 800bf04:	46bd      	mov	sp, r7
 800bf06:	bd80      	pop	{r7, pc}

0800bf08 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bf08:	b580      	push	{r7, lr}
 800bf0a:	b084      	sub	sp, #16
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	6078      	str	r0, [r7, #4]
 800bf10:	460b      	mov	r3, r1
 800bf12:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf14:	2300      	movs	r3, #0
 800bf16:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf18:	2300      	movs	r3, #0
 800bf1a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bf22:	78fa      	ldrb	r2, [r7, #3]
 800bf24:	4611      	mov	r1, r2
 800bf26:	4618      	mov	r0, r3
 800bf28:	f7f7 ff0a 	bl	8003d40 <HAL_PCD_EP_SetStall>
 800bf2c:	4603      	mov	r3, r0
 800bf2e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bf30:	7bfb      	ldrb	r3, [r7, #15]
 800bf32:	4618      	mov	r0, r3
 800bf34:	f000 f8de 	bl	800c0f4 <USBD_Get_USB_Status>
 800bf38:	4603      	mov	r3, r0
 800bf3a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bf3c:	7bbb      	ldrb	r3, [r7, #14]
}
 800bf3e:	4618      	mov	r0, r3
 800bf40:	3710      	adds	r7, #16
 800bf42:	46bd      	mov	sp, r7
 800bf44:	bd80      	pop	{r7, pc}

0800bf46 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bf46:	b580      	push	{r7, lr}
 800bf48:	b084      	sub	sp, #16
 800bf4a:	af00      	add	r7, sp, #0
 800bf4c:	6078      	str	r0, [r7, #4]
 800bf4e:	460b      	mov	r3, r1
 800bf50:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf52:	2300      	movs	r3, #0
 800bf54:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf56:	2300      	movs	r3, #0
 800bf58:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bf60:	78fa      	ldrb	r2, [r7, #3]
 800bf62:	4611      	mov	r1, r2
 800bf64:	4618      	mov	r0, r3
 800bf66:	f7f7 ff4f 	bl	8003e08 <HAL_PCD_EP_ClrStall>
 800bf6a:	4603      	mov	r3, r0
 800bf6c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bf6e:	7bfb      	ldrb	r3, [r7, #15]
 800bf70:	4618      	mov	r0, r3
 800bf72:	f000 f8bf 	bl	800c0f4 <USBD_Get_USB_Status>
 800bf76:	4603      	mov	r3, r0
 800bf78:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bf7a:	7bbb      	ldrb	r3, [r7, #14]
}
 800bf7c:	4618      	mov	r0, r3
 800bf7e:	3710      	adds	r7, #16
 800bf80:	46bd      	mov	sp, r7
 800bf82:	bd80      	pop	{r7, pc}

0800bf84 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bf84:	b480      	push	{r7}
 800bf86:	b085      	sub	sp, #20
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	6078      	str	r0, [r7, #4]
 800bf8c:	460b      	mov	r3, r1
 800bf8e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bf96:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800bf98:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	da0b      	bge.n	800bfb8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800bfa0:	78fb      	ldrb	r3, [r7, #3]
 800bfa2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bfa6:	68f9      	ldr	r1, [r7, #12]
 800bfa8:	4613      	mov	r3, r2
 800bfaa:	00db      	lsls	r3, r3, #3
 800bfac:	4413      	add	r3, r2
 800bfae:	009b      	lsls	r3, r3, #2
 800bfb0:	440b      	add	r3, r1
 800bfb2:	333e      	adds	r3, #62	; 0x3e
 800bfb4:	781b      	ldrb	r3, [r3, #0]
 800bfb6:	e00b      	b.n	800bfd0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800bfb8:	78fb      	ldrb	r3, [r7, #3]
 800bfba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bfbe:	68f9      	ldr	r1, [r7, #12]
 800bfc0:	4613      	mov	r3, r2
 800bfc2:	00db      	lsls	r3, r3, #3
 800bfc4:	4413      	add	r3, r2
 800bfc6:	009b      	lsls	r3, r3, #2
 800bfc8:	440b      	add	r3, r1
 800bfca:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800bfce:	781b      	ldrb	r3, [r3, #0]
  }
}
 800bfd0:	4618      	mov	r0, r3
 800bfd2:	3714      	adds	r7, #20
 800bfd4:	46bd      	mov	sp, r7
 800bfd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfda:	4770      	bx	lr

0800bfdc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800bfdc:	b580      	push	{r7, lr}
 800bfde:	b084      	sub	sp, #16
 800bfe0:	af00      	add	r7, sp, #0
 800bfe2:	6078      	str	r0, [r7, #4]
 800bfe4:	460b      	mov	r3, r1
 800bfe6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bfe8:	2300      	movs	r3, #0
 800bfea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bfec:	2300      	movs	r3, #0
 800bfee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bff6:	78fa      	ldrb	r2, [r7, #3]
 800bff8:	4611      	mov	r1, r2
 800bffa:	4618      	mov	r0, r3
 800bffc:	f7f7 fd3a 	bl	8003a74 <HAL_PCD_SetAddress>
 800c000:	4603      	mov	r3, r0
 800c002:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c004:	7bfb      	ldrb	r3, [r7, #15]
 800c006:	4618      	mov	r0, r3
 800c008:	f000 f874 	bl	800c0f4 <USBD_Get_USB_Status>
 800c00c:	4603      	mov	r3, r0
 800c00e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c010:	7bbb      	ldrb	r3, [r7, #14]
}
 800c012:	4618      	mov	r0, r3
 800c014:	3710      	adds	r7, #16
 800c016:	46bd      	mov	sp, r7
 800c018:	bd80      	pop	{r7, pc}

0800c01a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c01a:	b580      	push	{r7, lr}
 800c01c:	b086      	sub	sp, #24
 800c01e:	af00      	add	r7, sp, #0
 800c020:	60f8      	str	r0, [r7, #12]
 800c022:	607a      	str	r2, [r7, #4]
 800c024:	603b      	str	r3, [r7, #0]
 800c026:	460b      	mov	r3, r1
 800c028:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c02a:	2300      	movs	r3, #0
 800c02c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c02e:	2300      	movs	r3, #0
 800c030:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c038:	7af9      	ldrb	r1, [r7, #11]
 800c03a:	683b      	ldr	r3, [r7, #0]
 800c03c:	687a      	ldr	r2, [r7, #4]
 800c03e:	f7f7 fe44 	bl	8003cca <HAL_PCD_EP_Transmit>
 800c042:	4603      	mov	r3, r0
 800c044:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c046:	7dfb      	ldrb	r3, [r7, #23]
 800c048:	4618      	mov	r0, r3
 800c04a:	f000 f853 	bl	800c0f4 <USBD_Get_USB_Status>
 800c04e:	4603      	mov	r3, r0
 800c050:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c052:	7dbb      	ldrb	r3, [r7, #22]
}
 800c054:	4618      	mov	r0, r3
 800c056:	3718      	adds	r7, #24
 800c058:	46bd      	mov	sp, r7
 800c05a:	bd80      	pop	{r7, pc}

0800c05c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c05c:	b580      	push	{r7, lr}
 800c05e:	b086      	sub	sp, #24
 800c060:	af00      	add	r7, sp, #0
 800c062:	60f8      	str	r0, [r7, #12]
 800c064:	607a      	str	r2, [r7, #4]
 800c066:	603b      	str	r3, [r7, #0]
 800c068:	460b      	mov	r3, r1
 800c06a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c06c:	2300      	movs	r3, #0
 800c06e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c070:	2300      	movs	r3, #0
 800c072:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c07a:	7af9      	ldrb	r1, [r7, #11]
 800c07c:	683b      	ldr	r3, [r7, #0]
 800c07e:	687a      	ldr	r2, [r7, #4]
 800c080:	f7f7 fdcf 	bl	8003c22 <HAL_PCD_EP_Receive>
 800c084:	4603      	mov	r3, r0
 800c086:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c088:	7dfb      	ldrb	r3, [r7, #23]
 800c08a:	4618      	mov	r0, r3
 800c08c:	f000 f832 	bl	800c0f4 <USBD_Get_USB_Status>
 800c090:	4603      	mov	r3, r0
 800c092:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c094:	7dbb      	ldrb	r3, [r7, #22]
}
 800c096:	4618      	mov	r0, r3
 800c098:	3718      	adds	r7, #24
 800c09a:	46bd      	mov	sp, r7
 800c09c:	bd80      	pop	{r7, pc}

0800c09e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c09e:	b580      	push	{r7, lr}
 800c0a0:	b082      	sub	sp, #8
 800c0a2:	af00      	add	r7, sp, #0
 800c0a4:	6078      	str	r0, [r7, #4]
 800c0a6:	460b      	mov	r3, r1
 800c0a8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c0b0:	78fa      	ldrb	r2, [r7, #3]
 800c0b2:	4611      	mov	r1, r2
 800c0b4:	4618      	mov	r0, r3
 800c0b6:	f7f7 fdf0 	bl	8003c9a <HAL_PCD_EP_GetRxCount>
 800c0ba:	4603      	mov	r3, r0
}
 800c0bc:	4618      	mov	r0, r3
 800c0be:	3708      	adds	r7, #8
 800c0c0:	46bd      	mov	sp, r7
 800c0c2:	bd80      	pop	{r7, pc}

0800c0c4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c0c4:	b480      	push	{r7}
 800c0c6:	b083      	sub	sp, #12
 800c0c8:	af00      	add	r7, sp, #0
 800c0ca:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c0cc:	4b03      	ldr	r3, [pc, #12]	; (800c0dc <USBD_static_malloc+0x18>)
}
 800c0ce:	4618      	mov	r0, r3
 800c0d0:	370c      	adds	r7, #12
 800c0d2:	46bd      	mov	sp, r7
 800c0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d8:	4770      	bx	lr
 800c0da:	bf00      	nop
 800c0dc:	2400203c 	.word	0x2400203c

0800c0e0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c0e0:	b480      	push	{r7}
 800c0e2:	b083      	sub	sp, #12
 800c0e4:	af00      	add	r7, sp, #0
 800c0e6:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 800c0e8:	bf00      	nop
 800c0ea:	370c      	adds	r7, #12
 800c0ec:	46bd      	mov	sp, r7
 800c0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f2:	4770      	bx	lr

0800c0f4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c0f4:	b480      	push	{r7}
 800c0f6:	b085      	sub	sp, #20
 800c0f8:	af00      	add	r7, sp, #0
 800c0fa:	4603      	mov	r3, r0
 800c0fc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c0fe:	2300      	movs	r3, #0
 800c100:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c102:	79fb      	ldrb	r3, [r7, #7]
 800c104:	2b03      	cmp	r3, #3
 800c106:	d817      	bhi.n	800c138 <USBD_Get_USB_Status+0x44>
 800c108:	a201      	add	r2, pc, #4	; (adr r2, 800c110 <USBD_Get_USB_Status+0x1c>)
 800c10a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c10e:	bf00      	nop
 800c110:	0800c121 	.word	0x0800c121
 800c114:	0800c127 	.word	0x0800c127
 800c118:	0800c12d 	.word	0x0800c12d
 800c11c:	0800c133 	.word	0x0800c133
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c120:	2300      	movs	r3, #0
 800c122:	73fb      	strb	r3, [r7, #15]
    break;
 800c124:	e00b      	b.n	800c13e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c126:	2303      	movs	r3, #3
 800c128:	73fb      	strb	r3, [r7, #15]
    break;
 800c12a:	e008      	b.n	800c13e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c12c:	2301      	movs	r3, #1
 800c12e:	73fb      	strb	r3, [r7, #15]
    break;
 800c130:	e005      	b.n	800c13e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c132:	2303      	movs	r3, #3
 800c134:	73fb      	strb	r3, [r7, #15]
    break;
 800c136:	e002      	b.n	800c13e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c138:	2303      	movs	r3, #3
 800c13a:	73fb      	strb	r3, [r7, #15]
    break;
 800c13c:	bf00      	nop
  }
  return usb_status;
 800c13e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c140:	4618      	mov	r0, r3
 800c142:	3714      	adds	r7, #20
 800c144:	46bd      	mov	sp, r7
 800c146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c14a:	4770      	bx	lr

0800c14c <neai_classification_init>:
 800c14c:	4b6d      	ldr	r3, [pc, #436]	; (800c304 <neai_classification_init+0x1b8>)
 800c14e:	881b      	ldrh	r3, [r3, #0]
 800c150:	2ba5      	cmp	r3, #165	; 0xa5
 800c152:	f040 80d3 	bne.w	800c2fc <neai_classification_init+0x1b0>
 800c156:	edd0 7a02 	vldr	s15, [r0, #8]
 800c15a:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 800c15e:	f8df c1d4 	ldr.w	ip, [pc, #468]	; 800c334 <neai_classification_init+0x1e8>
 800c162:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c166:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c168:	ee17 6a90 	vmov	r6, s15
 800c16c:	f8df e1c8 	ldr.w	lr, [pc, #456]	; 800c338 <neai_classification_init+0x1ec>
 800c170:	4f65      	ldr	r7, [pc, #404]	; (800c308 <neai_classification_init+0x1bc>)
 800c172:	1d05      	adds	r5, r0, #4
 800c174:	1d33      	adds	r3, r6, #4
 800c176:	1db1      	adds	r1, r6, #6
 800c178:	1c72      	adds	r2, r6, #1
 800c17a:	edce 7a00 	vstr	s15, [lr]
 800c17e:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 800c182:	f100 040c 	add.w	r4, r0, #12
 800c186:	edd6 7a01 	vldr	s15, [r6, #4]
 800c18a:	4633      	mov	r3, r6
 800c18c:	edd6 6a00 	vldr	s13, [r6]
 800c190:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c194:	3308      	adds	r3, #8
 800c196:	f8cc 3000 	str.w	r3, [ip]
 800c19a:	ee17 6a90 	vmov	r6, s15
 800c19e:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 800c1a2:	f8df c198 	ldr.w	ip, [pc, #408]	; 800c33c <neai_classification_init+0x1f0>
 800c1a6:	4431      	add	r1, r6
 800c1a8:	603e      	str	r6, [r7, #0]
 800c1aa:	ee17 3a90 	vmov	r3, s15
 800c1ae:	4432      	add	r2, r6
 800c1b0:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 800c1b4:	1d5e      	adds	r6, r3, #5
 800c1b6:	185f      	adds	r7, r3, r1
 800c1b8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c1bc:	4416      	add	r6, r2
 800c1be:	3205      	adds	r2, #5
 800c1c0:	443b      	add	r3, r7
 800c1c2:	f8cc 1000 	str.w	r1, [ip]
 800c1c6:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 800c1ca:	f8df c174 	ldr.w	ip, [pc, #372]	; 800c340 <neai_classification_init+0x1f4>
 800c1ce:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800c1d2:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800c1d6:	edd3 7a00 	vldr	s15, [r3]
 800c1da:	eb00 0186 	add.w	r1, r0, r6, lsl #2
 800c1de:	f8cc 7000 	str.w	r7, [ip]
 800c1e2:	eef4 7a47 	vcmp.f32	s15, s14
 800c1e6:	4f49      	ldr	r7, [pc, #292]	; (800c30c <neai_classification_init+0x1c0>)
 800c1e8:	4e49      	ldr	r6, [pc, #292]	; (800c310 <neai_classification_init+0x1c4>)
 800c1ea:	603a      	str	r2, [r7, #0]
 800c1ec:	4f49      	ldr	r7, [pc, #292]	; (800c314 <neai_classification_init+0x1c8>)
 800c1ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1f2:	4a49      	ldr	r2, [pc, #292]	; (800c318 <neai_classification_init+0x1cc>)
 800c1f4:	6039      	str	r1, [r7, #0]
 800c1f6:	6010      	str	r0, [r2, #0]
 800c1f8:	4f48      	ldr	r7, [pc, #288]	; (800c31c <neai_classification_init+0x1d0>)
 800c1fa:	4949      	ldr	r1, [pc, #292]	; (800c320 <neai_classification_init+0x1d4>)
 800c1fc:	4a49      	ldr	r2, [pc, #292]	; (800c324 <neai_classification_init+0x1d8>)
 800c1fe:	6033      	str	r3, [r6, #0]
 800c200:	f100 0610 	add.w	r6, r0, #16
 800c204:	603d      	str	r5, [r7, #0]
 800c206:	600c      	str	r4, [r1, #0]
 800c208:	6016      	str	r6, [r2, #0]
 800c20a:	d173      	bne.n	800c2f4 <neai_classification_init+0x1a8>
 800c20c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800c210:	ed93 7a01 	vldr	s14, [r3, #4]
 800c214:	eeb4 7a67 	vcmp.f32	s14, s15
 800c218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c21c:	d16a      	bne.n	800c2f4 <neai_classification_init+0x1a8>
 800c21e:	ed93 7a02 	vldr	s14, [r3, #8]
 800c222:	eeb4 7a67 	vcmp.f32	s14, s15
 800c226:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c22a:	d163      	bne.n	800c2f4 <neai_classification_init+0x1a8>
 800c22c:	ed93 7a03 	vldr	s14, [r3, #12]
 800c230:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800c234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c238:	d15c      	bne.n	800c2f4 <neai_classification_init+0x1a8>
 800c23a:	ed93 7a04 	vldr	s14, [r3, #16]
 800c23e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800c242:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c246:	d155      	bne.n	800c2f4 <neai_classification_init+0x1a8>
 800c248:	ed93 7a05 	vldr	s14, [r3, #20]
 800c24c:	eeb4 7a67 	vcmp.f32	s14, s15
 800c250:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c254:	d14e      	bne.n	800c2f4 <neai_classification_init+0x1a8>
 800c256:	ed93 7a06 	vldr	s14, [r3, #24]
 800c25a:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800c25e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c262:	d147      	bne.n	800c2f4 <neai_classification_init+0x1a8>
 800c264:	ed93 7a07 	vldr	s14, [r3, #28]
 800c268:	eeb4 7a67 	vcmp.f32	s14, s15
 800c26c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c270:	d140      	bne.n	800c2f4 <neai_classification_init+0x1a8>
 800c272:	ed93 7a08 	vldr	s14, [r3, #32]
 800c276:	eeb4 7a67 	vcmp.f32	s14, s15
 800c27a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c27e:	d139      	bne.n	800c2f4 <neai_classification_init+0x1a8>
 800c280:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800c284:	eeb4 7a67 	vcmp.f32	s14, s15
 800c288:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c28c:	d132      	bne.n	800c2f4 <neai_classification_init+0x1a8>
 800c28e:	eddf 7a26 	vldr	s15, [pc, #152]	; 800c328 <neai_classification_init+0x1dc>
 800c292:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800c296:	eeb4 7a67 	vcmp.f32	s14, s15
 800c29a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c29e:	d129      	bne.n	800c2f4 <neai_classification_init+0x1a8>
 800c2a0:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 800c2a4:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800c2a8:	eeb4 7a67 	vcmp.f32	s14, s15
 800c2ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2b0:	d120      	bne.n	800c2f4 <neai_classification_init+0x1a8>
 800c2b2:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800c2b6:	eef5 7a40 	vcmp.f32	s15, #0.0
 800c2ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2be:	d119      	bne.n	800c2f4 <neai_classification_init+0x1a8>
 800c2c0:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800c2c4:	eef5 7a40 	vcmp.f32	s15, #0.0
 800c2c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2cc:	d112      	bne.n	800c2f4 <neai_classification_init+0x1a8>
 800c2ce:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800c2d2:	eef5 7a40 	vcmp.f32	s15, #0.0
 800c2d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2da:	d10b      	bne.n	800c2f4 <neai_classification_init+0x1a8>
 800c2dc:	eddf 7a13 	vldr	s15, [pc, #76]	; 800c32c <neai_classification_init+0x1e0>
 800c2e0:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 800c2e4:	eeb4 7a67 	vcmp.f32	s14, s15
 800c2e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2ec:	bf0c      	ite	eq
 800c2ee:	2000      	moveq	r0, #0
 800c2f0:	207d      	movne	r0, #125	; 0x7d
 800c2f2:	e000      	b.n	800c2f6 <neai_classification_init+0x1aa>
 800c2f4:	207d      	movs	r0, #125	; 0x7d
 800c2f6:	4b0e      	ldr	r3, [pc, #56]	; (800c330 <neai_classification_init+0x1e4>)
 800c2f8:	7018      	strb	r0, [r3, #0]
 800c2fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c2fc:	4b0c      	ldr	r3, [pc, #48]	; (800c330 <neai_classification_init+0x1e4>)
 800c2fe:	207c      	movs	r0, #124	; 0x7c
 800c300:	7018      	strb	r0, [r3, #0]
 800c302:	4770      	bx	lr
 800c304:	1ff1e8a0 	.word	0x1ff1e8a0
 800c308:	24002268 	.word	0x24002268
 800c30c:	24002298 	.word	0x24002298
 800c310:	2400229c 	.word	0x2400229c
 800c314:	24002294 	.word	0x24002294
 800c318:	240022a0 	.word	0x240022a0
 800c31c:	24002284 	.word	0x24002284
 800c320:	240022a4 	.word	0x240022a4
 800c324:	24002290 	.word	0x24002290
 800c328:	42c40000 	.word	0x42c40000
 800c32c:	49742400 	.word	0x49742400
 800c330:	240003f6 	.word	0x240003f6
 800c334:	24002280 	.word	0x24002280
 800c338:	2400226c 	.word	0x2400226c
 800c33c:	24002288 	.word	0x24002288
 800c340:	2400228c 	.word	0x2400228c

0800c344 <neai_classification>:
 800c344:	4bac      	ldr	r3, [pc, #688]	; (800c5f8 <neai_classification+0x2b4>)
 800c346:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c34a:	ed2d 8b04 	vpush	{d8-d9}
 800c34e:	781f      	ldrb	r7, [r3, #0]
 800c350:	b083      	sub	sp, #12
 800c352:	b12f      	cbz	r7, 800c360 <neai_classification+0x1c>
 800c354:	4638      	mov	r0, r7
 800c356:	b003      	add	sp, #12
 800c358:	ecbd 8b04 	vpop	{d8-d9}
 800c35c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c360:	4ba6      	ldr	r3, [pc, #664]	; (800c5fc <neai_classification+0x2b8>)
 800c362:	4616      	mov	r6, r2
 800c364:	edd0 7a00 	vldr	s15, [r0]
 800c368:	681a      	ldr	r2, [r3, #0]
 800c36a:	4ba5      	ldr	r3, [pc, #660]	; (800c600 <neai_classification+0x2bc>)
 800c36c:	ed92 7a00 	vldr	s14, [r2]
 800c370:	681a      	ldr	r2, [r3, #0]
 800c372:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c376:	4ba3      	ldr	r3, [pc, #652]	; (800c604 <neai_classification+0x2c0>)
 800c378:	ed92 7a00 	vldr	s14, [r2]
 800c37c:	4aa2      	ldr	r2, [pc, #648]	; (800c608 <neai_classification+0x2c4>)
 800c37e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c382:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c386:	edc3 7a00 	vstr	s15, [r3]
 800c38a:	4ba0      	ldr	r3, [pc, #640]	; (800c60c <neai_classification+0x2c8>)
 800c38c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	bf48      	it	mi
 800c394:	eef1 7a67 	vnegmi.f32	s15, s15
 800c398:	edc2 7a00 	vstr	s15, [r2]
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	f040 810d 	bne.w	800c5bc <neai_classification+0x278>
 800c3a2:	4a9b      	ldr	r2, [pc, #620]	; (800c610 <neai_classification+0x2cc>)
 800c3a4:	2300      	movs	r3, #0
 800c3a6:	6814      	ldr	r4, [r2, #0]
 800c3a8:	600b      	str	r3, [r1, #0]
 800c3aa:	604b      	str	r3, [r1, #4]
 800c3ac:	608b      	str	r3, [r1, #8]
 800c3ae:	2c00      	cmp	r4, #0
 800c3b0:	d063      	beq.n	800c47a <neai_classification+0x136>
 800c3b2:	ee07 4a90 	vmov	s15, r4
 800c3b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c3ba:	4b96      	ldr	r3, [pc, #600]	; (800c614 <neai_classification+0x2d0>)
 800c3bc:	f06f 4940 	mvn.w	r9, #3221225472	; 0xc0000000
 800c3c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c3c4:	f8df c26c 	ldr.w	ip, [pc, #620]	; 800c634 <neai_classification+0x2f0>
 800c3c8:	681d      	ldr	r5, [r3, #0]
 800c3ca:	4a93      	ldr	r2, [pc, #588]	; (800c618 <neai_classification+0x2d4>)
 800c3cc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800c3d0:	4892      	ldr	r0, [pc, #584]	; (800c61c <neai_classification+0x2d8>)
 800c3d2:	4b93      	ldr	r3, [pc, #588]	; (800c620 <neai_classification+0x2dc>)
 800c3d4:	eb05 0484 	add.w	r4, r5, r4, lsl #2
 800c3d8:	f8dc 8000 	ldr.w	r8, [ip]
 800c3dc:	f8d0 e000 	ldr.w	lr, [r0]
 800c3e0:	f8d2 c000 	ldr.w	ip, [r2]
 800c3e4:	681a      	ldr	r2, [r3, #0]
 800c3e6:	ecf5 7a01 	vldmia	r5!, {s15}
 800c3ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c3ee:	ee17 0a90 	vmov	r0, s15
 800c3f2:	ee17 3a90 	vmov	r3, s15
 800c3f6:	e00b      	b.n	800c410 <neai_classification+0xcc>
 800c3f8:	edda 7a00 	vldr	s15, [sl]
 800c3fc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c400:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c404:	d427      	bmi.n	800c456 <neai_classification+0x112>
 800c406:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c40a:	ee17 3a90 	vmov	r3, s15
 800c40e:	4403      	add	r3, r0
 800c410:	eb08 0b83 	add.w	fp, r8, r3, lsl #2
 800c414:	eb0e 0a83 	add.w	sl, lr, r3, lsl #2
 800c418:	eddb 7a00 	vldr	s15, [fp]
 800c41c:	009b      	lsls	r3, r3, #2
 800c41e:	ed9a 7a00 	vldr	s14, [sl]
 800c422:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c426:	eb02 0a03 	add.w	sl, r2, r3
 800c42a:	4463      	add	r3, ip
 800c42c:	ee17 ba90 	vmov	fp, s15
 800c430:	9301      	str	r3, [sp, #4]
 800c432:	4b7c      	ldr	r3, [pc, #496]	; (800c624 <neai_classification+0x2e0>)
 800c434:	eb03 0b8b 	add.w	fp, r3, fp, lsl #2
 800c438:	eddb 7a00 	vldr	s15, [fp]
 800c43c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c440:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c444:	d4d8      	bmi.n	800c3f8 <neai_classification+0xb4>
 800c446:	9b01      	ldr	r3, [sp, #4]
 800c448:	edd3 7a00 	vldr	s15, [r3]
 800c44c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c450:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c454:	d5d7      	bpl.n	800c406 <neai_classification+0xc2>
 800c456:	eef1 7a67 	vneg.f32	s15, s15
 800c45a:	42ac      	cmp	r4, r5
 800c45c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c460:	ee17 3a90 	vmov	r3, s15
 800c464:	b29b      	uxth	r3, r3
 800c466:	444b      	add	r3, r9
 800c468:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800c46c:	edd3 7a00 	vldr	s15, [r3]
 800c470:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c474:	edc3 7a00 	vstr	s15, [r3]
 800c478:	d1b5      	bne.n	800c3e6 <neai_classification+0xa2>
 800c47a:	460b      	mov	r3, r1
 800c47c:	ba0a      	rev	r2, r1
 800c47e:	2000      	movs	r0, #0
 800c480:	1e5c      	subs	r4, r3, #1
 800c482:	3001      	adds	r0, #1
 800c484:	4023      	ands	r3, r4
 800c486:	d1fb      	bne.n	800c480 <neai_classification+0x13c>
 800c488:	b11a      	cbz	r2, 800c492 <neai_classification+0x14e>
 800c48a:	1e54      	subs	r4, r2, #1
 800c48c:	3301      	adds	r3, #1
 800c48e:	4022      	ands	r2, r4
 800c490:	d1fb      	bne.n	800c48a <neai_classification+0x146>
 800c492:	1ac3      	subs	r3, r0, r3
 800c494:	fab3 f383 	clz	r3, r3
 800c498:	095b      	lsrs	r3, r3, #5
 800c49a:	ea4f 1243 	mov.w	r2, r3, lsl #5
 800c49e:	eba2 0203 	sub.w	r2, r2, r3
 800c4a2:	ea4f 0282 	mov.w	r2, r2, lsl #2
 800c4a6:	441a      	add	r2, r3
 800c4a8:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800c4ac:	441a      	add	r2, r3
 800c4ae:	ea4f 0282 	mov.w	r2, r2, lsl #2
 800c4b2:	eba2 0203 	sub.w	r2, r2, r3
 800c4b6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800c4ba:	eba2 0203 	sub.w	r2, r2, r3
 800c4be:	ea4f 1202 	mov.w	r2, r2, lsl #4
 800c4c2:	441a      	add	r2, r3
 800c4c4:	ea4f 1202 	mov.w	r2, r2, lsl #4
 800c4c8:	eba2 0203 	sub.w	r2, r2, r3
 800c4cc:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800c4d0:	eba2 0203 	sub.w	r2, r2, r3
 800c4d4:	ea4f 1242 	mov.w	r2, r2, lsl #5
 800c4d8:	ea6f 0202 	mvn.w	r2, r2
 800c4dc:	ba12      	rev	r2, r2
 800c4de:	8bd4      	ldrh	r4, [r2, #30]
 800c4e0:	eeb2 9a00 	vmov.f32	s18, #32	; 0x41000000  8.0
 800c4e4:	eddf 8a50 	vldr	s17, [pc, #320]	; 800c628 <neai_classification+0x2e4>
 800c4e8:	1123      	asrs	r3, r4, #4
 800c4ea:	f004 040f 	and.w	r4, r4, #15
 800c4ee:	eba3 1003 	sub.w	r0, r3, r3, lsl #4
 800c4f2:	eba4 1204 	sub.w	r2, r4, r4, lsl #4
 800c4f6:	fb03 0303 	mla	r3, r3, r3, r0
 800c4fa:	fb04 2404 	mla	r4, r4, r4, r2
 800c4fe:	441c      	add	r4, r3
 800c500:	3464      	adds	r4, #100	; 0x64
 800c502:	440c      	add	r4, r1
 800c504:	ed94 8a00 	vldr	s16, [r4]
 800c508:	4625      	mov	r5, r4
 800c50a:	ed94 7a01 	vldr	s14, [r4, #4]
 800c50e:	f104 080c 	add.w	r8, r4, #12
 800c512:	edd4 7a02 	vldr	s15, [r4, #8]
 800c516:	eeb4 8a47 	vcmp.f32	s16, s14
 800c51a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c51e:	bf48      	it	mi
 800c520:	eeb0 8a47 	vmovmi.f32	s16, s14
 800c524:	eef4 7a48 	vcmp.f32	s15, s16
 800c528:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c52c:	bfc8      	it	gt
 800c52e:	eeb0 8a67 	vmovgt.f32	s16, s15
 800c532:	edd4 7a00 	vldr	s15, [r4]
 800c536:	ee77 7ac8 	vsub.f32	s15, s15, s16
 800c53a:	ee67 7a89 	vmul.f32	s15, s15, s18
 800c53e:	ee17 0a90 	vmov	r0, s15
 800c542:	f7f4 f889 	bl	8000658 <__aeabi_f2d>
 800c546:	ec41 0b10 	vmov	d0, r0, r1
 800c54a:	f000 fd29 	bl	800cfa0 <exp>
 800c54e:	ec51 0b10 	vmov	r0, r1, d0
 800c552:	f7f4 f8d9 	bl	8000708 <__aeabi_d2f>
 800c556:	ee07 0a90 	vmov	s15, r0
 800c55a:	f844 0b04 	str.w	r0, [r4], #4
 800c55e:	45a0      	cmp	r8, r4
 800c560:	ee78 8aa7 	vadd.f32	s17, s17, s15
 800c564:	d1e5      	bne.n	800c532 <neai_classification+0x1ee>
 800c566:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800c56a:	ed95 7a00 	vldr	s14, [r5]
 800c56e:	edd5 6a01 	vldr	s13, [r5, #4]
 800c572:	ed95 6a02 	vldr	s12, [r5, #8]
 800c576:	eec5 7aa8 	vdiv.f32	s15, s11, s17
 800c57a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800c57e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800c582:	ee67 7a86 	vmul.f32	s15, s15, s12
 800c586:	ed85 7a00 	vstr	s14, [r5]
 800c58a:	eef4 6ac7 	vcmpe.f32	s13, s14
 800c58e:	edc5 6a01 	vstr	s13, [r5, #4]
 800c592:	edc5 7a02 	vstr	s15, [r5, #8]
 800c596:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c59a:	dd2a      	ble.n	800c5f2 <neai_classification+0x2ae>
 800c59c:	eeb0 7a66 	vmov.f32	s14, s13
 800c5a0:	2302      	movs	r3, #2
 800c5a2:	eeb4 7a67 	vcmp.f32	s14, s15
 800c5a6:	4638      	mov	r0, r7
 800c5a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c5ac:	bf48      	it	mi
 800c5ae:	2303      	movmi	r3, #3
 800c5b0:	8033      	strh	r3, [r6, #0]
 800c5b2:	b003      	add	sp, #12
 800c5b4:	ecbd 8b04 	vpop	{d8-d9}
 800c5b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5bc:	4a1b      	ldr	r2, [pc, #108]	; (800c62c <neai_classification+0x2e8>)
 800c5be:	481c      	ldr	r0, [pc, #112]	; (800c630 <neai_classification+0x2ec>)
 800c5c0:	6812      	ldr	r2, [r2, #0]
 800c5c2:	6804      	ldr	r4, [r0, #0]
 800c5c4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c5c8:	4816      	ldr	r0, [pc, #88]	; (800c624 <neai_classification+0x2e0>)
 800c5ca:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800c628 <neai_classification+0x2e4>
 800c5ce:	ed80 7a00 	vstr	s14, [r0]
 800c5d2:	eef0 5a47 	vmov.f32	s11, s14
 800c5d6:	edd4 6a00 	vldr	s13, [r4]
 800c5da:	ecb2 6a01 	vldmia	r2!, {s12}
 800c5de:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800c5e2:	4293      	cmp	r3, r2
 800c5e4:	eee6 5a86 	vfma.f32	s11, s13, s12
 800c5e8:	ece0 5a01 	vstmia	r0!, {s11}
 800c5ec:	f43f aed9 	beq.w	800c3a2 <neai_classification+0x5e>
 800c5f0:	e7ed      	b.n	800c5ce <neai_classification+0x28a>
 800c5f2:	2301      	movs	r3, #1
 800c5f4:	e7d5      	b.n	800c5a2 <neai_classification+0x25e>
 800c5f6:	bf00      	nop
 800c5f8:	240003f6 	.word	0x240003f6
 800c5fc:	240022a0 	.word	0x240022a0
 800c600:	24002284 	.word	0x24002284
 800c604:	24002260 	.word	0x24002260
 800c608:	2400225c 	.word	0x2400225c
 800c60c:	2400226c 	.word	0x2400226c
 800c610:	24002268 	.word	0x24002268
 800c614:	24002280 	.word	0x24002280
 800c618:	24002288 	.word	0x24002288
 800c61c:	2400228c 	.word	0x2400228c
 800c620:	24002294 	.word	0x24002294
 800c624:	24002264 	.word	0x24002264
 800c628:	00000000 	.word	0x00000000
 800c62c:	24002290 	.word	0x24002290
 800c630:	240022a4 	.word	0x240022a4
 800c634:	24002298 	.word	0x24002298

0800c638 <__errno>:
 800c638:	4b01      	ldr	r3, [pc, #4]	; (800c640 <__errno+0x8>)
 800c63a:	6818      	ldr	r0, [r3, #0]
 800c63c:	4770      	bx	lr
 800c63e:	bf00      	nop
 800c640:	240003f8 	.word	0x240003f8

0800c644 <__libc_init_array>:
 800c644:	b570      	push	{r4, r5, r6, lr}
 800c646:	4d0d      	ldr	r5, [pc, #52]	; (800c67c <__libc_init_array+0x38>)
 800c648:	4c0d      	ldr	r4, [pc, #52]	; (800c680 <__libc_init_array+0x3c>)
 800c64a:	1b64      	subs	r4, r4, r5
 800c64c:	10a4      	asrs	r4, r4, #2
 800c64e:	2600      	movs	r6, #0
 800c650:	42a6      	cmp	r6, r4
 800c652:	d109      	bne.n	800c668 <__libc_init_array+0x24>
 800c654:	4d0b      	ldr	r5, [pc, #44]	; (800c684 <__libc_init_array+0x40>)
 800c656:	4c0c      	ldr	r4, [pc, #48]	; (800c688 <__libc_init_array+0x44>)
 800c658:	f000 fdc2 	bl	800d1e0 <_init>
 800c65c:	1b64      	subs	r4, r4, r5
 800c65e:	10a4      	asrs	r4, r4, #2
 800c660:	2600      	movs	r6, #0
 800c662:	42a6      	cmp	r6, r4
 800c664:	d105      	bne.n	800c672 <__libc_init_array+0x2e>
 800c666:	bd70      	pop	{r4, r5, r6, pc}
 800c668:	f855 3b04 	ldr.w	r3, [r5], #4
 800c66c:	4798      	blx	r3
 800c66e:	3601      	adds	r6, #1
 800c670:	e7ee      	b.n	800c650 <__libc_init_array+0xc>
 800c672:	f855 3b04 	ldr.w	r3, [r5], #4
 800c676:	4798      	blx	r3
 800c678:	3601      	adds	r6, #1
 800c67a:	e7f2      	b.n	800c662 <__libc_init_array+0x1e>
 800c67c:	0800e090 	.word	0x0800e090
 800c680:	0800e090 	.word	0x0800e090
 800c684:	0800e090 	.word	0x0800e090
 800c688:	0800e094 	.word	0x0800e094

0800c68c <memset>:
 800c68c:	4402      	add	r2, r0
 800c68e:	4603      	mov	r3, r0
 800c690:	4293      	cmp	r3, r2
 800c692:	d100      	bne.n	800c696 <memset+0xa>
 800c694:	4770      	bx	lr
 800c696:	f803 1b01 	strb.w	r1, [r3], #1
 800c69a:	e7f9      	b.n	800c690 <memset+0x4>

0800c69c <sniprintf>:
 800c69c:	b40c      	push	{r2, r3}
 800c69e:	b530      	push	{r4, r5, lr}
 800c6a0:	4b17      	ldr	r3, [pc, #92]	; (800c700 <sniprintf+0x64>)
 800c6a2:	1e0c      	subs	r4, r1, #0
 800c6a4:	681d      	ldr	r5, [r3, #0]
 800c6a6:	b09d      	sub	sp, #116	; 0x74
 800c6a8:	da08      	bge.n	800c6bc <sniprintf+0x20>
 800c6aa:	238b      	movs	r3, #139	; 0x8b
 800c6ac:	602b      	str	r3, [r5, #0]
 800c6ae:	f04f 30ff 	mov.w	r0, #4294967295
 800c6b2:	b01d      	add	sp, #116	; 0x74
 800c6b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c6b8:	b002      	add	sp, #8
 800c6ba:	4770      	bx	lr
 800c6bc:	f44f 7302 	mov.w	r3, #520	; 0x208
 800c6c0:	f8ad 3014 	strh.w	r3, [sp, #20]
 800c6c4:	bf14      	ite	ne
 800c6c6:	f104 33ff 	addne.w	r3, r4, #4294967295
 800c6ca:	4623      	moveq	r3, r4
 800c6cc:	9304      	str	r3, [sp, #16]
 800c6ce:	9307      	str	r3, [sp, #28]
 800c6d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c6d4:	9002      	str	r0, [sp, #8]
 800c6d6:	9006      	str	r0, [sp, #24]
 800c6d8:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c6dc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c6de:	ab21      	add	r3, sp, #132	; 0x84
 800c6e0:	a902      	add	r1, sp, #8
 800c6e2:	4628      	mov	r0, r5
 800c6e4:	9301      	str	r3, [sp, #4]
 800c6e6:	f000 f869 	bl	800c7bc <_svfiprintf_r>
 800c6ea:	1c43      	adds	r3, r0, #1
 800c6ec:	bfbc      	itt	lt
 800c6ee:	238b      	movlt	r3, #139	; 0x8b
 800c6f0:	602b      	strlt	r3, [r5, #0]
 800c6f2:	2c00      	cmp	r4, #0
 800c6f4:	d0dd      	beq.n	800c6b2 <sniprintf+0x16>
 800c6f6:	9b02      	ldr	r3, [sp, #8]
 800c6f8:	2200      	movs	r2, #0
 800c6fa:	701a      	strb	r2, [r3, #0]
 800c6fc:	e7d9      	b.n	800c6b2 <sniprintf+0x16>
 800c6fe:	bf00      	nop
 800c700:	240003f8 	.word	0x240003f8

0800c704 <__ssputs_r>:
 800c704:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c708:	688e      	ldr	r6, [r1, #8]
 800c70a:	429e      	cmp	r6, r3
 800c70c:	4682      	mov	sl, r0
 800c70e:	460c      	mov	r4, r1
 800c710:	4690      	mov	r8, r2
 800c712:	461f      	mov	r7, r3
 800c714:	d838      	bhi.n	800c788 <__ssputs_r+0x84>
 800c716:	898a      	ldrh	r2, [r1, #12]
 800c718:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c71c:	d032      	beq.n	800c784 <__ssputs_r+0x80>
 800c71e:	6825      	ldr	r5, [r4, #0]
 800c720:	6909      	ldr	r1, [r1, #16]
 800c722:	eba5 0901 	sub.w	r9, r5, r1
 800c726:	6965      	ldr	r5, [r4, #20]
 800c728:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c72c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c730:	3301      	adds	r3, #1
 800c732:	444b      	add	r3, r9
 800c734:	106d      	asrs	r5, r5, #1
 800c736:	429d      	cmp	r5, r3
 800c738:	bf38      	it	cc
 800c73a:	461d      	movcc	r5, r3
 800c73c:	0553      	lsls	r3, r2, #21
 800c73e:	d531      	bpl.n	800c7a4 <__ssputs_r+0xa0>
 800c740:	4629      	mov	r1, r5
 800c742:	f000 fb63 	bl	800ce0c <_malloc_r>
 800c746:	4606      	mov	r6, r0
 800c748:	b950      	cbnz	r0, 800c760 <__ssputs_r+0x5c>
 800c74a:	230c      	movs	r3, #12
 800c74c:	f8ca 3000 	str.w	r3, [sl]
 800c750:	89a3      	ldrh	r3, [r4, #12]
 800c752:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c756:	81a3      	strh	r3, [r4, #12]
 800c758:	f04f 30ff 	mov.w	r0, #4294967295
 800c75c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c760:	6921      	ldr	r1, [r4, #16]
 800c762:	464a      	mov	r2, r9
 800c764:	f000 fabe 	bl	800cce4 <memcpy>
 800c768:	89a3      	ldrh	r3, [r4, #12]
 800c76a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c76e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c772:	81a3      	strh	r3, [r4, #12]
 800c774:	6126      	str	r6, [r4, #16]
 800c776:	6165      	str	r5, [r4, #20]
 800c778:	444e      	add	r6, r9
 800c77a:	eba5 0509 	sub.w	r5, r5, r9
 800c77e:	6026      	str	r6, [r4, #0]
 800c780:	60a5      	str	r5, [r4, #8]
 800c782:	463e      	mov	r6, r7
 800c784:	42be      	cmp	r6, r7
 800c786:	d900      	bls.n	800c78a <__ssputs_r+0x86>
 800c788:	463e      	mov	r6, r7
 800c78a:	6820      	ldr	r0, [r4, #0]
 800c78c:	4632      	mov	r2, r6
 800c78e:	4641      	mov	r1, r8
 800c790:	f000 fab6 	bl	800cd00 <memmove>
 800c794:	68a3      	ldr	r3, [r4, #8]
 800c796:	1b9b      	subs	r3, r3, r6
 800c798:	60a3      	str	r3, [r4, #8]
 800c79a:	6823      	ldr	r3, [r4, #0]
 800c79c:	4433      	add	r3, r6
 800c79e:	6023      	str	r3, [r4, #0]
 800c7a0:	2000      	movs	r0, #0
 800c7a2:	e7db      	b.n	800c75c <__ssputs_r+0x58>
 800c7a4:	462a      	mov	r2, r5
 800c7a6:	f000 fba5 	bl	800cef4 <_realloc_r>
 800c7aa:	4606      	mov	r6, r0
 800c7ac:	2800      	cmp	r0, #0
 800c7ae:	d1e1      	bne.n	800c774 <__ssputs_r+0x70>
 800c7b0:	6921      	ldr	r1, [r4, #16]
 800c7b2:	4650      	mov	r0, sl
 800c7b4:	f000 fabe 	bl	800cd34 <_free_r>
 800c7b8:	e7c7      	b.n	800c74a <__ssputs_r+0x46>
	...

0800c7bc <_svfiprintf_r>:
 800c7bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7c0:	4698      	mov	r8, r3
 800c7c2:	898b      	ldrh	r3, [r1, #12]
 800c7c4:	061b      	lsls	r3, r3, #24
 800c7c6:	b09d      	sub	sp, #116	; 0x74
 800c7c8:	4607      	mov	r7, r0
 800c7ca:	460d      	mov	r5, r1
 800c7cc:	4614      	mov	r4, r2
 800c7ce:	d50e      	bpl.n	800c7ee <_svfiprintf_r+0x32>
 800c7d0:	690b      	ldr	r3, [r1, #16]
 800c7d2:	b963      	cbnz	r3, 800c7ee <_svfiprintf_r+0x32>
 800c7d4:	2140      	movs	r1, #64	; 0x40
 800c7d6:	f000 fb19 	bl	800ce0c <_malloc_r>
 800c7da:	6028      	str	r0, [r5, #0]
 800c7dc:	6128      	str	r0, [r5, #16]
 800c7de:	b920      	cbnz	r0, 800c7ea <_svfiprintf_r+0x2e>
 800c7e0:	230c      	movs	r3, #12
 800c7e2:	603b      	str	r3, [r7, #0]
 800c7e4:	f04f 30ff 	mov.w	r0, #4294967295
 800c7e8:	e0d1      	b.n	800c98e <_svfiprintf_r+0x1d2>
 800c7ea:	2340      	movs	r3, #64	; 0x40
 800c7ec:	616b      	str	r3, [r5, #20]
 800c7ee:	2300      	movs	r3, #0
 800c7f0:	9309      	str	r3, [sp, #36]	; 0x24
 800c7f2:	2320      	movs	r3, #32
 800c7f4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c7f8:	f8cd 800c 	str.w	r8, [sp, #12]
 800c7fc:	2330      	movs	r3, #48	; 0x30
 800c7fe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c9a8 <_svfiprintf_r+0x1ec>
 800c802:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c806:	f04f 0901 	mov.w	r9, #1
 800c80a:	4623      	mov	r3, r4
 800c80c:	469a      	mov	sl, r3
 800c80e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c812:	b10a      	cbz	r2, 800c818 <_svfiprintf_r+0x5c>
 800c814:	2a25      	cmp	r2, #37	; 0x25
 800c816:	d1f9      	bne.n	800c80c <_svfiprintf_r+0x50>
 800c818:	ebba 0b04 	subs.w	fp, sl, r4
 800c81c:	d00b      	beq.n	800c836 <_svfiprintf_r+0x7a>
 800c81e:	465b      	mov	r3, fp
 800c820:	4622      	mov	r2, r4
 800c822:	4629      	mov	r1, r5
 800c824:	4638      	mov	r0, r7
 800c826:	f7ff ff6d 	bl	800c704 <__ssputs_r>
 800c82a:	3001      	adds	r0, #1
 800c82c:	f000 80aa 	beq.w	800c984 <_svfiprintf_r+0x1c8>
 800c830:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c832:	445a      	add	r2, fp
 800c834:	9209      	str	r2, [sp, #36]	; 0x24
 800c836:	f89a 3000 	ldrb.w	r3, [sl]
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	f000 80a2 	beq.w	800c984 <_svfiprintf_r+0x1c8>
 800c840:	2300      	movs	r3, #0
 800c842:	f04f 32ff 	mov.w	r2, #4294967295
 800c846:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c84a:	f10a 0a01 	add.w	sl, sl, #1
 800c84e:	9304      	str	r3, [sp, #16]
 800c850:	9307      	str	r3, [sp, #28]
 800c852:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c856:	931a      	str	r3, [sp, #104]	; 0x68
 800c858:	4654      	mov	r4, sl
 800c85a:	2205      	movs	r2, #5
 800c85c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c860:	4851      	ldr	r0, [pc, #324]	; (800c9a8 <_svfiprintf_r+0x1ec>)
 800c862:	f7f3 fd45 	bl	80002f0 <memchr>
 800c866:	9a04      	ldr	r2, [sp, #16]
 800c868:	b9d8      	cbnz	r0, 800c8a2 <_svfiprintf_r+0xe6>
 800c86a:	06d0      	lsls	r0, r2, #27
 800c86c:	bf44      	itt	mi
 800c86e:	2320      	movmi	r3, #32
 800c870:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c874:	0711      	lsls	r1, r2, #28
 800c876:	bf44      	itt	mi
 800c878:	232b      	movmi	r3, #43	; 0x2b
 800c87a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c87e:	f89a 3000 	ldrb.w	r3, [sl]
 800c882:	2b2a      	cmp	r3, #42	; 0x2a
 800c884:	d015      	beq.n	800c8b2 <_svfiprintf_r+0xf6>
 800c886:	9a07      	ldr	r2, [sp, #28]
 800c888:	4654      	mov	r4, sl
 800c88a:	2000      	movs	r0, #0
 800c88c:	f04f 0c0a 	mov.w	ip, #10
 800c890:	4621      	mov	r1, r4
 800c892:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c896:	3b30      	subs	r3, #48	; 0x30
 800c898:	2b09      	cmp	r3, #9
 800c89a:	d94e      	bls.n	800c93a <_svfiprintf_r+0x17e>
 800c89c:	b1b0      	cbz	r0, 800c8cc <_svfiprintf_r+0x110>
 800c89e:	9207      	str	r2, [sp, #28]
 800c8a0:	e014      	b.n	800c8cc <_svfiprintf_r+0x110>
 800c8a2:	eba0 0308 	sub.w	r3, r0, r8
 800c8a6:	fa09 f303 	lsl.w	r3, r9, r3
 800c8aa:	4313      	orrs	r3, r2
 800c8ac:	9304      	str	r3, [sp, #16]
 800c8ae:	46a2      	mov	sl, r4
 800c8b0:	e7d2      	b.n	800c858 <_svfiprintf_r+0x9c>
 800c8b2:	9b03      	ldr	r3, [sp, #12]
 800c8b4:	1d19      	adds	r1, r3, #4
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	9103      	str	r1, [sp, #12]
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	bfbb      	ittet	lt
 800c8be:	425b      	neglt	r3, r3
 800c8c0:	f042 0202 	orrlt.w	r2, r2, #2
 800c8c4:	9307      	strge	r3, [sp, #28]
 800c8c6:	9307      	strlt	r3, [sp, #28]
 800c8c8:	bfb8      	it	lt
 800c8ca:	9204      	strlt	r2, [sp, #16]
 800c8cc:	7823      	ldrb	r3, [r4, #0]
 800c8ce:	2b2e      	cmp	r3, #46	; 0x2e
 800c8d0:	d10c      	bne.n	800c8ec <_svfiprintf_r+0x130>
 800c8d2:	7863      	ldrb	r3, [r4, #1]
 800c8d4:	2b2a      	cmp	r3, #42	; 0x2a
 800c8d6:	d135      	bne.n	800c944 <_svfiprintf_r+0x188>
 800c8d8:	9b03      	ldr	r3, [sp, #12]
 800c8da:	1d1a      	adds	r2, r3, #4
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	9203      	str	r2, [sp, #12]
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	bfb8      	it	lt
 800c8e4:	f04f 33ff 	movlt.w	r3, #4294967295
 800c8e8:	3402      	adds	r4, #2
 800c8ea:	9305      	str	r3, [sp, #20]
 800c8ec:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c9b8 <_svfiprintf_r+0x1fc>
 800c8f0:	7821      	ldrb	r1, [r4, #0]
 800c8f2:	2203      	movs	r2, #3
 800c8f4:	4650      	mov	r0, sl
 800c8f6:	f7f3 fcfb 	bl	80002f0 <memchr>
 800c8fa:	b140      	cbz	r0, 800c90e <_svfiprintf_r+0x152>
 800c8fc:	2340      	movs	r3, #64	; 0x40
 800c8fe:	eba0 000a 	sub.w	r0, r0, sl
 800c902:	fa03 f000 	lsl.w	r0, r3, r0
 800c906:	9b04      	ldr	r3, [sp, #16]
 800c908:	4303      	orrs	r3, r0
 800c90a:	3401      	adds	r4, #1
 800c90c:	9304      	str	r3, [sp, #16]
 800c90e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c912:	4826      	ldr	r0, [pc, #152]	; (800c9ac <_svfiprintf_r+0x1f0>)
 800c914:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c918:	2206      	movs	r2, #6
 800c91a:	f7f3 fce9 	bl	80002f0 <memchr>
 800c91e:	2800      	cmp	r0, #0
 800c920:	d038      	beq.n	800c994 <_svfiprintf_r+0x1d8>
 800c922:	4b23      	ldr	r3, [pc, #140]	; (800c9b0 <_svfiprintf_r+0x1f4>)
 800c924:	bb1b      	cbnz	r3, 800c96e <_svfiprintf_r+0x1b2>
 800c926:	9b03      	ldr	r3, [sp, #12]
 800c928:	3307      	adds	r3, #7
 800c92a:	f023 0307 	bic.w	r3, r3, #7
 800c92e:	3308      	adds	r3, #8
 800c930:	9303      	str	r3, [sp, #12]
 800c932:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c934:	4433      	add	r3, r6
 800c936:	9309      	str	r3, [sp, #36]	; 0x24
 800c938:	e767      	b.n	800c80a <_svfiprintf_r+0x4e>
 800c93a:	fb0c 3202 	mla	r2, ip, r2, r3
 800c93e:	460c      	mov	r4, r1
 800c940:	2001      	movs	r0, #1
 800c942:	e7a5      	b.n	800c890 <_svfiprintf_r+0xd4>
 800c944:	2300      	movs	r3, #0
 800c946:	3401      	adds	r4, #1
 800c948:	9305      	str	r3, [sp, #20]
 800c94a:	4619      	mov	r1, r3
 800c94c:	f04f 0c0a 	mov.w	ip, #10
 800c950:	4620      	mov	r0, r4
 800c952:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c956:	3a30      	subs	r2, #48	; 0x30
 800c958:	2a09      	cmp	r2, #9
 800c95a:	d903      	bls.n	800c964 <_svfiprintf_r+0x1a8>
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d0c5      	beq.n	800c8ec <_svfiprintf_r+0x130>
 800c960:	9105      	str	r1, [sp, #20]
 800c962:	e7c3      	b.n	800c8ec <_svfiprintf_r+0x130>
 800c964:	fb0c 2101 	mla	r1, ip, r1, r2
 800c968:	4604      	mov	r4, r0
 800c96a:	2301      	movs	r3, #1
 800c96c:	e7f0      	b.n	800c950 <_svfiprintf_r+0x194>
 800c96e:	ab03      	add	r3, sp, #12
 800c970:	9300      	str	r3, [sp, #0]
 800c972:	462a      	mov	r2, r5
 800c974:	4b0f      	ldr	r3, [pc, #60]	; (800c9b4 <_svfiprintf_r+0x1f8>)
 800c976:	a904      	add	r1, sp, #16
 800c978:	4638      	mov	r0, r7
 800c97a:	f3af 8000 	nop.w
 800c97e:	1c42      	adds	r2, r0, #1
 800c980:	4606      	mov	r6, r0
 800c982:	d1d6      	bne.n	800c932 <_svfiprintf_r+0x176>
 800c984:	89ab      	ldrh	r3, [r5, #12]
 800c986:	065b      	lsls	r3, r3, #25
 800c988:	f53f af2c 	bmi.w	800c7e4 <_svfiprintf_r+0x28>
 800c98c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c98e:	b01d      	add	sp, #116	; 0x74
 800c990:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c994:	ab03      	add	r3, sp, #12
 800c996:	9300      	str	r3, [sp, #0]
 800c998:	462a      	mov	r2, r5
 800c99a:	4b06      	ldr	r3, [pc, #24]	; (800c9b4 <_svfiprintf_r+0x1f8>)
 800c99c:	a904      	add	r1, sp, #16
 800c99e:	4638      	mov	r0, r7
 800c9a0:	f000 f87a 	bl	800ca98 <_printf_i>
 800c9a4:	e7eb      	b.n	800c97e <_svfiprintf_r+0x1c2>
 800c9a6:	bf00      	nop
 800c9a8:	0800d7e8 	.word	0x0800d7e8
 800c9ac:	0800d7f2 	.word	0x0800d7f2
 800c9b0:	00000000 	.word	0x00000000
 800c9b4:	0800c705 	.word	0x0800c705
 800c9b8:	0800d7ee 	.word	0x0800d7ee

0800c9bc <_printf_common>:
 800c9bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c9c0:	4616      	mov	r6, r2
 800c9c2:	4699      	mov	r9, r3
 800c9c4:	688a      	ldr	r2, [r1, #8]
 800c9c6:	690b      	ldr	r3, [r1, #16]
 800c9c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c9cc:	4293      	cmp	r3, r2
 800c9ce:	bfb8      	it	lt
 800c9d0:	4613      	movlt	r3, r2
 800c9d2:	6033      	str	r3, [r6, #0]
 800c9d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c9d8:	4607      	mov	r7, r0
 800c9da:	460c      	mov	r4, r1
 800c9dc:	b10a      	cbz	r2, 800c9e2 <_printf_common+0x26>
 800c9de:	3301      	adds	r3, #1
 800c9e0:	6033      	str	r3, [r6, #0]
 800c9e2:	6823      	ldr	r3, [r4, #0]
 800c9e4:	0699      	lsls	r1, r3, #26
 800c9e6:	bf42      	ittt	mi
 800c9e8:	6833      	ldrmi	r3, [r6, #0]
 800c9ea:	3302      	addmi	r3, #2
 800c9ec:	6033      	strmi	r3, [r6, #0]
 800c9ee:	6825      	ldr	r5, [r4, #0]
 800c9f0:	f015 0506 	ands.w	r5, r5, #6
 800c9f4:	d106      	bne.n	800ca04 <_printf_common+0x48>
 800c9f6:	f104 0a19 	add.w	sl, r4, #25
 800c9fa:	68e3      	ldr	r3, [r4, #12]
 800c9fc:	6832      	ldr	r2, [r6, #0]
 800c9fe:	1a9b      	subs	r3, r3, r2
 800ca00:	42ab      	cmp	r3, r5
 800ca02:	dc26      	bgt.n	800ca52 <_printf_common+0x96>
 800ca04:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ca08:	1e13      	subs	r3, r2, #0
 800ca0a:	6822      	ldr	r2, [r4, #0]
 800ca0c:	bf18      	it	ne
 800ca0e:	2301      	movne	r3, #1
 800ca10:	0692      	lsls	r2, r2, #26
 800ca12:	d42b      	bmi.n	800ca6c <_printf_common+0xb0>
 800ca14:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ca18:	4649      	mov	r1, r9
 800ca1a:	4638      	mov	r0, r7
 800ca1c:	47c0      	blx	r8
 800ca1e:	3001      	adds	r0, #1
 800ca20:	d01e      	beq.n	800ca60 <_printf_common+0xa4>
 800ca22:	6823      	ldr	r3, [r4, #0]
 800ca24:	68e5      	ldr	r5, [r4, #12]
 800ca26:	6832      	ldr	r2, [r6, #0]
 800ca28:	f003 0306 	and.w	r3, r3, #6
 800ca2c:	2b04      	cmp	r3, #4
 800ca2e:	bf08      	it	eq
 800ca30:	1aad      	subeq	r5, r5, r2
 800ca32:	68a3      	ldr	r3, [r4, #8]
 800ca34:	6922      	ldr	r2, [r4, #16]
 800ca36:	bf0c      	ite	eq
 800ca38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ca3c:	2500      	movne	r5, #0
 800ca3e:	4293      	cmp	r3, r2
 800ca40:	bfc4      	itt	gt
 800ca42:	1a9b      	subgt	r3, r3, r2
 800ca44:	18ed      	addgt	r5, r5, r3
 800ca46:	2600      	movs	r6, #0
 800ca48:	341a      	adds	r4, #26
 800ca4a:	42b5      	cmp	r5, r6
 800ca4c:	d11a      	bne.n	800ca84 <_printf_common+0xc8>
 800ca4e:	2000      	movs	r0, #0
 800ca50:	e008      	b.n	800ca64 <_printf_common+0xa8>
 800ca52:	2301      	movs	r3, #1
 800ca54:	4652      	mov	r2, sl
 800ca56:	4649      	mov	r1, r9
 800ca58:	4638      	mov	r0, r7
 800ca5a:	47c0      	blx	r8
 800ca5c:	3001      	adds	r0, #1
 800ca5e:	d103      	bne.n	800ca68 <_printf_common+0xac>
 800ca60:	f04f 30ff 	mov.w	r0, #4294967295
 800ca64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca68:	3501      	adds	r5, #1
 800ca6a:	e7c6      	b.n	800c9fa <_printf_common+0x3e>
 800ca6c:	18e1      	adds	r1, r4, r3
 800ca6e:	1c5a      	adds	r2, r3, #1
 800ca70:	2030      	movs	r0, #48	; 0x30
 800ca72:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ca76:	4422      	add	r2, r4
 800ca78:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ca7c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ca80:	3302      	adds	r3, #2
 800ca82:	e7c7      	b.n	800ca14 <_printf_common+0x58>
 800ca84:	2301      	movs	r3, #1
 800ca86:	4622      	mov	r2, r4
 800ca88:	4649      	mov	r1, r9
 800ca8a:	4638      	mov	r0, r7
 800ca8c:	47c0      	blx	r8
 800ca8e:	3001      	adds	r0, #1
 800ca90:	d0e6      	beq.n	800ca60 <_printf_common+0xa4>
 800ca92:	3601      	adds	r6, #1
 800ca94:	e7d9      	b.n	800ca4a <_printf_common+0x8e>
	...

0800ca98 <_printf_i>:
 800ca98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ca9c:	7e0f      	ldrb	r7, [r1, #24]
 800ca9e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800caa0:	2f78      	cmp	r7, #120	; 0x78
 800caa2:	4691      	mov	r9, r2
 800caa4:	4680      	mov	r8, r0
 800caa6:	460c      	mov	r4, r1
 800caa8:	469a      	mov	sl, r3
 800caaa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800caae:	d807      	bhi.n	800cac0 <_printf_i+0x28>
 800cab0:	2f62      	cmp	r7, #98	; 0x62
 800cab2:	d80a      	bhi.n	800caca <_printf_i+0x32>
 800cab4:	2f00      	cmp	r7, #0
 800cab6:	f000 80d8 	beq.w	800cc6a <_printf_i+0x1d2>
 800caba:	2f58      	cmp	r7, #88	; 0x58
 800cabc:	f000 80a3 	beq.w	800cc06 <_printf_i+0x16e>
 800cac0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cac4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cac8:	e03a      	b.n	800cb40 <_printf_i+0xa8>
 800caca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cace:	2b15      	cmp	r3, #21
 800cad0:	d8f6      	bhi.n	800cac0 <_printf_i+0x28>
 800cad2:	a101      	add	r1, pc, #4	; (adr r1, 800cad8 <_printf_i+0x40>)
 800cad4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cad8:	0800cb31 	.word	0x0800cb31
 800cadc:	0800cb45 	.word	0x0800cb45
 800cae0:	0800cac1 	.word	0x0800cac1
 800cae4:	0800cac1 	.word	0x0800cac1
 800cae8:	0800cac1 	.word	0x0800cac1
 800caec:	0800cac1 	.word	0x0800cac1
 800caf0:	0800cb45 	.word	0x0800cb45
 800caf4:	0800cac1 	.word	0x0800cac1
 800caf8:	0800cac1 	.word	0x0800cac1
 800cafc:	0800cac1 	.word	0x0800cac1
 800cb00:	0800cac1 	.word	0x0800cac1
 800cb04:	0800cc51 	.word	0x0800cc51
 800cb08:	0800cb75 	.word	0x0800cb75
 800cb0c:	0800cc33 	.word	0x0800cc33
 800cb10:	0800cac1 	.word	0x0800cac1
 800cb14:	0800cac1 	.word	0x0800cac1
 800cb18:	0800cc73 	.word	0x0800cc73
 800cb1c:	0800cac1 	.word	0x0800cac1
 800cb20:	0800cb75 	.word	0x0800cb75
 800cb24:	0800cac1 	.word	0x0800cac1
 800cb28:	0800cac1 	.word	0x0800cac1
 800cb2c:	0800cc3b 	.word	0x0800cc3b
 800cb30:	682b      	ldr	r3, [r5, #0]
 800cb32:	1d1a      	adds	r2, r3, #4
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	602a      	str	r2, [r5, #0]
 800cb38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cb3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cb40:	2301      	movs	r3, #1
 800cb42:	e0a3      	b.n	800cc8c <_printf_i+0x1f4>
 800cb44:	6820      	ldr	r0, [r4, #0]
 800cb46:	6829      	ldr	r1, [r5, #0]
 800cb48:	0606      	lsls	r6, r0, #24
 800cb4a:	f101 0304 	add.w	r3, r1, #4
 800cb4e:	d50a      	bpl.n	800cb66 <_printf_i+0xce>
 800cb50:	680e      	ldr	r6, [r1, #0]
 800cb52:	602b      	str	r3, [r5, #0]
 800cb54:	2e00      	cmp	r6, #0
 800cb56:	da03      	bge.n	800cb60 <_printf_i+0xc8>
 800cb58:	232d      	movs	r3, #45	; 0x2d
 800cb5a:	4276      	negs	r6, r6
 800cb5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cb60:	485e      	ldr	r0, [pc, #376]	; (800ccdc <_printf_i+0x244>)
 800cb62:	230a      	movs	r3, #10
 800cb64:	e019      	b.n	800cb9a <_printf_i+0x102>
 800cb66:	680e      	ldr	r6, [r1, #0]
 800cb68:	602b      	str	r3, [r5, #0]
 800cb6a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800cb6e:	bf18      	it	ne
 800cb70:	b236      	sxthne	r6, r6
 800cb72:	e7ef      	b.n	800cb54 <_printf_i+0xbc>
 800cb74:	682b      	ldr	r3, [r5, #0]
 800cb76:	6820      	ldr	r0, [r4, #0]
 800cb78:	1d19      	adds	r1, r3, #4
 800cb7a:	6029      	str	r1, [r5, #0]
 800cb7c:	0601      	lsls	r1, r0, #24
 800cb7e:	d501      	bpl.n	800cb84 <_printf_i+0xec>
 800cb80:	681e      	ldr	r6, [r3, #0]
 800cb82:	e002      	b.n	800cb8a <_printf_i+0xf2>
 800cb84:	0646      	lsls	r6, r0, #25
 800cb86:	d5fb      	bpl.n	800cb80 <_printf_i+0xe8>
 800cb88:	881e      	ldrh	r6, [r3, #0]
 800cb8a:	4854      	ldr	r0, [pc, #336]	; (800ccdc <_printf_i+0x244>)
 800cb8c:	2f6f      	cmp	r7, #111	; 0x6f
 800cb8e:	bf0c      	ite	eq
 800cb90:	2308      	moveq	r3, #8
 800cb92:	230a      	movne	r3, #10
 800cb94:	2100      	movs	r1, #0
 800cb96:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cb9a:	6865      	ldr	r5, [r4, #4]
 800cb9c:	60a5      	str	r5, [r4, #8]
 800cb9e:	2d00      	cmp	r5, #0
 800cba0:	bfa2      	ittt	ge
 800cba2:	6821      	ldrge	r1, [r4, #0]
 800cba4:	f021 0104 	bicge.w	r1, r1, #4
 800cba8:	6021      	strge	r1, [r4, #0]
 800cbaa:	b90e      	cbnz	r6, 800cbb0 <_printf_i+0x118>
 800cbac:	2d00      	cmp	r5, #0
 800cbae:	d04d      	beq.n	800cc4c <_printf_i+0x1b4>
 800cbb0:	4615      	mov	r5, r2
 800cbb2:	fbb6 f1f3 	udiv	r1, r6, r3
 800cbb6:	fb03 6711 	mls	r7, r3, r1, r6
 800cbba:	5dc7      	ldrb	r7, [r0, r7]
 800cbbc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cbc0:	4637      	mov	r7, r6
 800cbc2:	42bb      	cmp	r3, r7
 800cbc4:	460e      	mov	r6, r1
 800cbc6:	d9f4      	bls.n	800cbb2 <_printf_i+0x11a>
 800cbc8:	2b08      	cmp	r3, #8
 800cbca:	d10b      	bne.n	800cbe4 <_printf_i+0x14c>
 800cbcc:	6823      	ldr	r3, [r4, #0]
 800cbce:	07de      	lsls	r6, r3, #31
 800cbd0:	d508      	bpl.n	800cbe4 <_printf_i+0x14c>
 800cbd2:	6923      	ldr	r3, [r4, #16]
 800cbd4:	6861      	ldr	r1, [r4, #4]
 800cbd6:	4299      	cmp	r1, r3
 800cbd8:	bfde      	ittt	le
 800cbda:	2330      	movle	r3, #48	; 0x30
 800cbdc:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cbe0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800cbe4:	1b52      	subs	r2, r2, r5
 800cbe6:	6122      	str	r2, [r4, #16]
 800cbe8:	f8cd a000 	str.w	sl, [sp]
 800cbec:	464b      	mov	r3, r9
 800cbee:	aa03      	add	r2, sp, #12
 800cbf0:	4621      	mov	r1, r4
 800cbf2:	4640      	mov	r0, r8
 800cbf4:	f7ff fee2 	bl	800c9bc <_printf_common>
 800cbf8:	3001      	adds	r0, #1
 800cbfa:	d14c      	bne.n	800cc96 <_printf_i+0x1fe>
 800cbfc:	f04f 30ff 	mov.w	r0, #4294967295
 800cc00:	b004      	add	sp, #16
 800cc02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc06:	4835      	ldr	r0, [pc, #212]	; (800ccdc <_printf_i+0x244>)
 800cc08:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800cc0c:	6829      	ldr	r1, [r5, #0]
 800cc0e:	6823      	ldr	r3, [r4, #0]
 800cc10:	f851 6b04 	ldr.w	r6, [r1], #4
 800cc14:	6029      	str	r1, [r5, #0]
 800cc16:	061d      	lsls	r5, r3, #24
 800cc18:	d514      	bpl.n	800cc44 <_printf_i+0x1ac>
 800cc1a:	07df      	lsls	r7, r3, #31
 800cc1c:	bf44      	itt	mi
 800cc1e:	f043 0320 	orrmi.w	r3, r3, #32
 800cc22:	6023      	strmi	r3, [r4, #0]
 800cc24:	b91e      	cbnz	r6, 800cc2e <_printf_i+0x196>
 800cc26:	6823      	ldr	r3, [r4, #0]
 800cc28:	f023 0320 	bic.w	r3, r3, #32
 800cc2c:	6023      	str	r3, [r4, #0]
 800cc2e:	2310      	movs	r3, #16
 800cc30:	e7b0      	b.n	800cb94 <_printf_i+0xfc>
 800cc32:	6823      	ldr	r3, [r4, #0]
 800cc34:	f043 0320 	orr.w	r3, r3, #32
 800cc38:	6023      	str	r3, [r4, #0]
 800cc3a:	2378      	movs	r3, #120	; 0x78
 800cc3c:	4828      	ldr	r0, [pc, #160]	; (800cce0 <_printf_i+0x248>)
 800cc3e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800cc42:	e7e3      	b.n	800cc0c <_printf_i+0x174>
 800cc44:	0659      	lsls	r1, r3, #25
 800cc46:	bf48      	it	mi
 800cc48:	b2b6      	uxthmi	r6, r6
 800cc4a:	e7e6      	b.n	800cc1a <_printf_i+0x182>
 800cc4c:	4615      	mov	r5, r2
 800cc4e:	e7bb      	b.n	800cbc8 <_printf_i+0x130>
 800cc50:	682b      	ldr	r3, [r5, #0]
 800cc52:	6826      	ldr	r6, [r4, #0]
 800cc54:	6961      	ldr	r1, [r4, #20]
 800cc56:	1d18      	adds	r0, r3, #4
 800cc58:	6028      	str	r0, [r5, #0]
 800cc5a:	0635      	lsls	r5, r6, #24
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	d501      	bpl.n	800cc64 <_printf_i+0x1cc>
 800cc60:	6019      	str	r1, [r3, #0]
 800cc62:	e002      	b.n	800cc6a <_printf_i+0x1d2>
 800cc64:	0670      	lsls	r0, r6, #25
 800cc66:	d5fb      	bpl.n	800cc60 <_printf_i+0x1c8>
 800cc68:	8019      	strh	r1, [r3, #0]
 800cc6a:	2300      	movs	r3, #0
 800cc6c:	6123      	str	r3, [r4, #16]
 800cc6e:	4615      	mov	r5, r2
 800cc70:	e7ba      	b.n	800cbe8 <_printf_i+0x150>
 800cc72:	682b      	ldr	r3, [r5, #0]
 800cc74:	1d1a      	adds	r2, r3, #4
 800cc76:	602a      	str	r2, [r5, #0]
 800cc78:	681d      	ldr	r5, [r3, #0]
 800cc7a:	6862      	ldr	r2, [r4, #4]
 800cc7c:	2100      	movs	r1, #0
 800cc7e:	4628      	mov	r0, r5
 800cc80:	f7f3 fb36 	bl	80002f0 <memchr>
 800cc84:	b108      	cbz	r0, 800cc8a <_printf_i+0x1f2>
 800cc86:	1b40      	subs	r0, r0, r5
 800cc88:	6060      	str	r0, [r4, #4]
 800cc8a:	6863      	ldr	r3, [r4, #4]
 800cc8c:	6123      	str	r3, [r4, #16]
 800cc8e:	2300      	movs	r3, #0
 800cc90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cc94:	e7a8      	b.n	800cbe8 <_printf_i+0x150>
 800cc96:	6923      	ldr	r3, [r4, #16]
 800cc98:	462a      	mov	r2, r5
 800cc9a:	4649      	mov	r1, r9
 800cc9c:	4640      	mov	r0, r8
 800cc9e:	47d0      	blx	sl
 800cca0:	3001      	adds	r0, #1
 800cca2:	d0ab      	beq.n	800cbfc <_printf_i+0x164>
 800cca4:	6823      	ldr	r3, [r4, #0]
 800cca6:	079b      	lsls	r3, r3, #30
 800cca8:	d413      	bmi.n	800ccd2 <_printf_i+0x23a>
 800ccaa:	68e0      	ldr	r0, [r4, #12]
 800ccac:	9b03      	ldr	r3, [sp, #12]
 800ccae:	4298      	cmp	r0, r3
 800ccb0:	bfb8      	it	lt
 800ccb2:	4618      	movlt	r0, r3
 800ccb4:	e7a4      	b.n	800cc00 <_printf_i+0x168>
 800ccb6:	2301      	movs	r3, #1
 800ccb8:	4632      	mov	r2, r6
 800ccba:	4649      	mov	r1, r9
 800ccbc:	4640      	mov	r0, r8
 800ccbe:	47d0      	blx	sl
 800ccc0:	3001      	adds	r0, #1
 800ccc2:	d09b      	beq.n	800cbfc <_printf_i+0x164>
 800ccc4:	3501      	adds	r5, #1
 800ccc6:	68e3      	ldr	r3, [r4, #12]
 800ccc8:	9903      	ldr	r1, [sp, #12]
 800ccca:	1a5b      	subs	r3, r3, r1
 800cccc:	42ab      	cmp	r3, r5
 800ccce:	dcf2      	bgt.n	800ccb6 <_printf_i+0x21e>
 800ccd0:	e7eb      	b.n	800ccaa <_printf_i+0x212>
 800ccd2:	2500      	movs	r5, #0
 800ccd4:	f104 0619 	add.w	r6, r4, #25
 800ccd8:	e7f5      	b.n	800ccc6 <_printf_i+0x22e>
 800ccda:	bf00      	nop
 800ccdc:	0800d7f9 	.word	0x0800d7f9
 800cce0:	0800d80a 	.word	0x0800d80a

0800cce4 <memcpy>:
 800cce4:	440a      	add	r2, r1
 800cce6:	4291      	cmp	r1, r2
 800cce8:	f100 33ff 	add.w	r3, r0, #4294967295
 800ccec:	d100      	bne.n	800ccf0 <memcpy+0xc>
 800ccee:	4770      	bx	lr
 800ccf0:	b510      	push	{r4, lr}
 800ccf2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ccf6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ccfa:	4291      	cmp	r1, r2
 800ccfc:	d1f9      	bne.n	800ccf2 <memcpy+0xe>
 800ccfe:	bd10      	pop	{r4, pc}

0800cd00 <memmove>:
 800cd00:	4288      	cmp	r0, r1
 800cd02:	b510      	push	{r4, lr}
 800cd04:	eb01 0402 	add.w	r4, r1, r2
 800cd08:	d902      	bls.n	800cd10 <memmove+0x10>
 800cd0a:	4284      	cmp	r4, r0
 800cd0c:	4623      	mov	r3, r4
 800cd0e:	d807      	bhi.n	800cd20 <memmove+0x20>
 800cd10:	1e43      	subs	r3, r0, #1
 800cd12:	42a1      	cmp	r1, r4
 800cd14:	d008      	beq.n	800cd28 <memmove+0x28>
 800cd16:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cd1a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cd1e:	e7f8      	b.n	800cd12 <memmove+0x12>
 800cd20:	4402      	add	r2, r0
 800cd22:	4601      	mov	r1, r0
 800cd24:	428a      	cmp	r2, r1
 800cd26:	d100      	bne.n	800cd2a <memmove+0x2a>
 800cd28:	bd10      	pop	{r4, pc}
 800cd2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cd2e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cd32:	e7f7      	b.n	800cd24 <memmove+0x24>

0800cd34 <_free_r>:
 800cd34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cd36:	2900      	cmp	r1, #0
 800cd38:	d044      	beq.n	800cdc4 <_free_r+0x90>
 800cd3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cd3e:	9001      	str	r0, [sp, #4]
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	f1a1 0404 	sub.w	r4, r1, #4
 800cd46:	bfb8      	it	lt
 800cd48:	18e4      	addlt	r4, r4, r3
 800cd4a:	f000 f913 	bl	800cf74 <__malloc_lock>
 800cd4e:	4a1e      	ldr	r2, [pc, #120]	; (800cdc8 <_free_r+0x94>)
 800cd50:	9801      	ldr	r0, [sp, #4]
 800cd52:	6813      	ldr	r3, [r2, #0]
 800cd54:	b933      	cbnz	r3, 800cd64 <_free_r+0x30>
 800cd56:	6063      	str	r3, [r4, #4]
 800cd58:	6014      	str	r4, [r2, #0]
 800cd5a:	b003      	add	sp, #12
 800cd5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cd60:	f000 b90e 	b.w	800cf80 <__malloc_unlock>
 800cd64:	42a3      	cmp	r3, r4
 800cd66:	d908      	bls.n	800cd7a <_free_r+0x46>
 800cd68:	6825      	ldr	r5, [r4, #0]
 800cd6a:	1961      	adds	r1, r4, r5
 800cd6c:	428b      	cmp	r3, r1
 800cd6e:	bf01      	itttt	eq
 800cd70:	6819      	ldreq	r1, [r3, #0]
 800cd72:	685b      	ldreq	r3, [r3, #4]
 800cd74:	1949      	addeq	r1, r1, r5
 800cd76:	6021      	streq	r1, [r4, #0]
 800cd78:	e7ed      	b.n	800cd56 <_free_r+0x22>
 800cd7a:	461a      	mov	r2, r3
 800cd7c:	685b      	ldr	r3, [r3, #4]
 800cd7e:	b10b      	cbz	r3, 800cd84 <_free_r+0x50>
 800cd80:	42a3      	cmp	r3, r4
 800cd82:	d9fa      	bls.n	800cd7a <_free_r+0x46>
 800cd84:	6811      	ldr	r1, [r2, #0]
 800cd86:	1855      	adds	r5, r2, r1
 800cd88:	42a5      	cmp	r5, r4
 800cd8a:	d10b      	bne.n	800cda4 <_free_r+0x70>
 800cd8c:	6824      	ldr	r4, [r4, #0]
 800cd8e:	4421      	add	r1, r4
 800cd90:	1854      	adds	r4, r2, r1
 800cd92:	42a3      	cmp	r3, r4
 800cd94:	6011      	str	r1, [r2, #0]
 800cd96:	d1e0      	bne.n	800cd5a <_free_r+0x26>
 800cd98:	681c      	ldr	r4, [r3, #0]
 800cd9a:	685b      	ldr	r3, [r3, #4]
 800cd9c:	6053      	str	r3, [r2, #4]
 800cd9e:	4421      	add	r1, r4
 800cda0:	6011      	str	r1, [r2, #0]
 800cda2:	e7da      	b.n	800cd5a <_free_r+0x26>
 800cda4:	d902      	bls.n	800cdac <_free_r+0x78>
 800cda6:	230c      	movs	r3, #12
 800cda8:	6003      	str	r3, [r0, #0]
 800cdaa:	e7d6      	b.n	800cd5a <_free_r+0x26>
 800cdac:	6825      	ldr	r5, [r4, #0]
 800cdae:	1961      	adds	r1, r4, r5
 800cdb0:	428b      	cmp	r3, r1
 800cdb2:	bf04      	itt	eq
 800cdb4:	6819      	ldreq	r1, [r3, #0]
 800cdb6:	685b      	ldreq	r3, [r3, #4]
 800cdb8:	6063      	str	r3, [r4, #4]
 800cdba:	bf04      	itt	eq
 800cdbc:	1949      	addeq	r1, r1, r5
 800cdbe:	6021      	streq	r1, [r4, #0]
 800cdc0:	6054      	str	r4, [r2, #4]
 800cdc2:	e7ca      	b.n	800cd5a <_free_r+0x26>
 800cdc4:	b003      	add	sp, #12
 800cdc6:	bd30      	pop	{r4, r5, pc}
 800cdc8:	24002270 	.word	0x24002270

0800cdcc <sbrk_aligned>:
 800cdcc:	b570      	push	{r4, r5, r6, lr}
 800cdce:	4e0e      	ldr	r6, [pc, #56]	; (800ce08 <sbrk_aligned+0x3c>)
 800cdd0:	460c      	mov	r4, r1
 800cdd2:	6831      	ldr	r1, [r6, #0]
 800cdd4:	4605      	mov	r5, r0
 800cdd6:	b911      	cbnz	r1, 800cdde <sbrk_aligned+0x12>
 800cdd8:	f000 f8bc 	bl	800cf54 <_sbrk_r>
 800cddc:	6030      	str	r0, [r6, #0]
 800cdde:	4621      	mov	r1, r4
 800cde0:	4628      	mov	r0, r5
 800cde2:	f000 f8b7 	bl	800cf54 <_sbrk_r>
 800cde6:	1c43      	adds	r3, r0, #1
 800cde8:	d00a      	beq.n	800ce00 <sbrk_aligned+0x34>
 800cdea:	1cc4      	adds	r4, r0, #3
 800cdec:	f024 0403 	bic.w	r4, r4, #3
 800cdf0:	42a0      	cmp	r0, r4
 800cdf2:	d007      	beq.n	800ce04 <sbrk_aligned+0x38>
 800cdf4:	1a21      	subs	r1, r4, r0
 800cdf6:	4628      	mov	r0, r5
 800cdf8:	f000 f8ac 	bl	800cf54 <_sbrk_r>
 800cdfc:	3001      	adds	r0, #1
 800cdfe:	d101      	bne.n	800ce04 <sbrk_aligned+0x38>
 800ce00:	f04f 34ff 	mov.w	r4, #4294967295
 800ce04:	4620      	mov	r0, r4
 800ce06:	bd70      	pop	{r4, r5, r6, pc}
 800ce08:	24002274 	.word	0x24002274

0800ce0c <_malloc_r>:
 800ce0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce10:	1ccd      	adds	r5, r1, #3
 800ce12:	f025 0503 	bic.w	r5, r5, #3
 800ce16:	3508      	adds	r5, #8
 800ce18:	2d0c      	cmp	r5, #12
 800ce1a:	bf38      	it	cc
 800ce1c:	250c      	movcc	r5, #12
 800ce1e:	2d00      	cmp	r5, #0
 800ce20:	4607      	mov	r7, r0
 800ce22:	db01      	blt.n	800ce28 <_malloc_r+0x1c>
 800ce24:	42a9      	cmp	r1, r5
 800ce26:	d905      	bls.n	800ce34 <_malloc_r+0x28>
 800ce28:	230c      	movs	r3, #12
 800ce2a:	603b      	str	r3, [r7, #0]
 800ce2c:	2600      	movs	r6, #0
 800ce2e:	4630      	mov	r0, r6
 800ce30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce34:	4e2e      	ldr	r6, [pc, #184]	; (800cef0 <_malloc_r+0xe4>)
 800ce36:	f000 f89d 	bl	800cf74 <__malloc_lock>
 800ce3a:	6833      	ldr	r3, [r6, #0]
 800ce3c:	461c      	mov	r4, r3
 800ce3e:	bb34      	cbnz	r4, 800ce8e <_malloc_r+0x82>
 800ce40:	4629      	mov	r1, r5
 800ce42:	4638      	mov	r0, r7
 800ce44:	f7ff ffc2 	bl	800cdcc <sbrk_aligned>
 800ce48:	1c43      	adds	r3, r0, #1
 800ce4a:	4604      	mov	r4, r0
 800ce4c:	d14d      	bne.n	800ceea <_malloc_r+0xde>
 800ce4e:	6834      	ldr	r4, [r6, #0]
 800ce50:	4626      	mov	r6, r4
 800ce52:	2e00      	cmp	r6, #0
 800ce54:	d140      	bne.n	800ced8 <_malloc_r+0xcc>
 800ce56:	6823      	ldr	r3, [r4, #0]
 800ce58:	4631      	mov	r1, r6
 800ce5a:	4638      	mov	r0, r7
 800ce5c:	eb04 0803 	add.w	r8, r4, r3
 800ce60:	f000 f878 	bl	800cf54 <_sbrk_r>
 800ce64:	4580      	cmp	r8, r0
 800ce66:	d13a      	bne.n	800cede <_malloc_r+0xd2>
 800ce68:	6821      	ldr	r1, [r4, #0]
 800ce6a:	3503      	adds	r5, #3
 800ce6c:	1a6d      	subs	r5, r5, r1
 800ce6e:	f025 0503 	bic.w	r5, r5, #3
 800ce72:	3508      	adds	r5, #8
 800ce74:	2d0c      	cmp	r5, #12
 800ce76:	bf38      	it	cc
 800ce78:	250c      	movcc	r5, #12
 800ce7a:	4629      	mov	r1, r5
 800ce7c:	4638      	mov	r0, r7
 800ce7e:	f7ff ffa5 	bl	800cdcc <sbrk_aligned>
 800ce82:	3001      	adds	r0, #1
 800ce84:	d02b      	beq.n	800cede <_malloc_r+0xd2>
 800ce86:	6823      	ldr	r3, [r4, #0]
 800ce88:	442b      	add	r3, r5
 800ce8a:	6023      	str	r3, [r4, #0]
 800ce8c:	e00e      	b.n	800ceac <_malloc_r+0xa0>
 800ce8e:	6822      	ldr	r2, [r4, #0]
 800ce90:	1b52      	subs	r2, r2, r5
 800ce92:	d41e      	bmi.n	800ced2 <_malloc_r+0xc6>
 800ce94:	2a0b      	cmp	r2, #11
 800ce96:	d916      	bls.n	800cec6 <_malloc_r+0xba>
 800ce98:	1961      	adds	r1, r4, r5
 800ce9a:	42a3      	cmp	r3, r4
 800ce9c:	6025      	str	r5, [r4, #0]
 800ce9e:	bf18      	it	ne
 800cea0:	6059      	strne	r1, [r3, #4]
 800cea2:	6863      	ldr	r3, [r4, #4]
 800cea4:	bf08      	it	eq
 800cea6:	6031      	streq	r1, [r6, #0]
 800cea8:	5162      	str	r2, [r4, r5]
 800ceaa:	604b      	str	r3, [r1, #4]
 800ceac:	4638      	mov	r0, r7
 800ceae:	f104 060b 	add.w	r6, r4, #11
 800ceb2:	f000 f865 	bl	800cf80 <__malloc_unlock>
 800ceb6:	f026 0607 	bic.w	r6, r6, #7
 800ceba:	1d23      	adds	r3, r4, #4
 800cebc:	1af2      	subs	r2, r6, r3
 800cebe:	d0b6      	beq.n	800ce2e <_malloc_r+0x22>
 800cec0:	1b9b      	subs	r3, r3, r6
 800cec2:	50a3      	str	r3, [r4, r2]
 800cec4:	e7b3      	b.n	800ce2e <_malloc_r+0x22>
 800cec6:	6862      	ldr	r2, [r4, #4]
 800cec8:	42a3      	cmp	r3, r4
 800ceca:	bf0c      	ite	eq
 800cecc:	6032      	streq	r2, [r6, #0]
 800cece:	605a      	strne	r2, [r3, #4]
 800ced0:	e7ec      	b.n	800ceac <_malloc_r+0xa0>
 800ced2:	4623      	mov	r3, r4
 800ced4:	6864      	ldr	r4, [r4, #4]
 800ced6:	e7b2      	b.n	800ce3e <_malloc_r+0x32>
 800ced8:	4634      	mov	r4, r6
 800ceda:	6876      	ldr	r6, [r6, #4]
 800cedc:	e7b9      	b.n	800ce52 <_malloc_r+0x46>
 800cede:	230c      	movs	r3, #12
 800cee0:	603b      	str	r3, [r7, #0]
 800cee2:	4638      	mov	r0, r7
 800cee4:	f000 f84c 	bl	800cf80 <__malloc_unlock>
 800cee8:	e7a1      	b.n	800ce2e <_malloc_r+0x22>
 800ceea:	6025      	str	r5, [r4, #0]
 800ceec:	e7de      	b.n	800ceac <_malloc_r+0xa0>
 800ceee:	bf00      	nop
 800cef0:	24002270 	.word	0x24002270

0800cef4 <_realloc_r>:
 800cef4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cef8:	4680      	mov	r8, r0
 800cefa:	4614      	mov	r4, r2
 800cefc:	460e      	mov	r6, r1
 800cefe:	b921      	cbnz	r1, 800cf0a <_realloc_r+0x16>
 800cf00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cf04:	4611      	mov	r1, r2
 800cf06:	f7ff bf81 	b.w	800ce0c <_malloc_r>
 800cf0a:	b92a      	cbnz	r2, 800cf18 <_realloc_r+0x24>
 800cf0c:	f7ff ff12 	bl	800cd34 <_free_r>
 800cf10:	4625      	mov	r5, r4
 800cf12:	4628      	mov	r0, r5
 800cf14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf18:	f000 f838 	bl	800cf8c <_malloc_usable_size_r>
 800cf1c:	4284      	cmp	r4, r0
 800cf1e:	4607      	mov	r7, r0
 800cf20:	d802      	bhi.n	800cf28 <_realloc_r+0x34>
 800cf22:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cf26:	d812      	bhi.n	800cf4e <_realloc_r+0x5a>
 800cf28:	4621      	mov	r1, r4
 800cf2a:	4640      	mov	r0, r8
 800cf2c:	f7ff ff6e 	bl	800ce0c <_malloc_r>
 800cf30:	4605      	mov	r5, r0
 800cf32:	2800      	cmp	r0, #0
 800cf34:	d0ed      	beq.n	800cf12 <_realloc_r+0x1e>
 800cf36:	42bc      	cmp	r4, r7
 800cf38:	4622      	mov	r2, r4
 800cf3a:	4631      	mov	r1, r6
 800cf3c:	bf28      	it	cs
 800cf3e:	463a      	movcs	r2, r7
 800cf40:	f7ff fed0 	bl	800cce4 <memcpy>
 800cf44:	4631      	mov	r1, r6
 800cf46:	4640      	mov	r0, r8
 800cf48:	f7ff fef4 	bl	800cd34 <_free_r>
 800cf4c:	e7e1      	b.n	800cf12 <_realloc_r+0x1e>
 800cf4e:	4635      	mov	r5, r6
 800cf50:	e7df      	b.n	800cf12 <_realloc_r+0x1e>
	...

0800cf54 <_sbrk_r>:
 800cf54:	b538      	push	{r3, r4, r5, lr}
 800cf56:	4d06      	ldr	r5, [pc, #24]	; (800cf70 <_sbrk_r+0x1c>)
 800cf58:	2300      	movs	r3, #0
 800cf5a:	4604      	mov	r4, r0
 800cf5c:	4608      	mov	r0, r1
 800cf5e:	602b      	str	r3, [r5, #0]
 800cf60:	f7f4 fb40 	bl	80015e4 <_sbrk>
 800cf64:	1c43      	adds	r3, r0, #1
 800cf66:	d102      	bne.n	800cf6e <_sbrk_r+0x1a>
 800cf68:	682b      	ldr	r3, [r5, #0]
 800cf6a:	b103      	cbz	r3, 800cf6e <_sbrk_r+0x1a>
 800cf6c:	6023      	str	r3, [r4, #0]
 800cf6e:	bd38      	pop	{r3, r4, r5, pc}
 800cf70:	24002278 	.word	0x24002278

0800cf74 <__malloc_lock>:
 800cf74:	4801      	ldr	r0, [pc, #4]	; (800cf7c <__malloc_lock+0x8>)
 800cf76:	f000 b811 	b.w	800cf9c <__retarget_lock_acquire_recursive>
 800cf7a:	bf00      	nop
 800cf7c:	2400227c 	.word	0x2400227c

0800cf80 <__malloc_unlock>:
 800cf80:	4801      	ldr	r0, [pc, #4]	; (800cf88 <__malloc_unlock+0x8>)
 800cf82:	f000 b80c 	b.w	800cf9e <__retarget_lock_release_recursive>
 800cf86:	bf00      	nop
 800cf88:	2400227c 	.word	0x2400227c

0800cf8c <_malloc_usable_size_r>:
 800cf8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cf90:	1f18      	subs	r0, r3, #4
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	bfbc      	itt	lt
 800cf96:	580b      	ldrlt	r3, [r1, r0]
 800cf98:	18c0      	addlt	r0, r0, r3
 800cf9a:	4770      	bx	lr

0800cf9c <__retarget_lock_acquire_recursive>:
 800cf9c:	4770      	bx	lr

0800cf9e <__retarget_lock_release_recursive>:
 800cf9e:	4770      	bx	lr

0800cfa0 <exp>:
 800cfa0:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
 800cfa2:	ee10 3a90 	vmov	r3, s1
 800cfa6:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
 800cfaa:	f3c3 540a 	ubfx	r4, r3, #20, #11
 800cfae:	18a2      	adds	r2, r4, r2
 800cfb0:	2a3e      	cmp	r2, #62	; 0x3e
 800cfb2:	ee10 1a10 	vmov	r1, s0
 800cfb6:	d922      	bls.n	800cffe <exp+0x5e>
 800cfb8:	2a00      	cmp	r2, #0
 800cfba:	da06      	bge.n	800cfca <exp+0x2a>
 800cfbc:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800cfc0:	ee30 0b07 	vadd.f64	d0, d0, d7
 800cfc4:	b004      	add	sp, #16
 800cfc6:	bcf0      	pop	{r4, r5, r6, r7}
 800cfc8:	4770      	bx	lr
 800cfca:	f5b4 6f81 	cmp.w	r4, #1032	; 0x408
 800cfce:	f04f 0000 	mov.w	r0, #0
 800cfd2:	d913      	bls.n	800cffc <exp+0x5c>
 800cfd4:	f513 1f80 	cmn.w	r3, #1048576	; 0x100000
 800cfd8:	bf08      	it	eq
 800cfda:	4281      	cmpeq	r1, r0
 800cfdc:	f000 80a0 	beq.w	800d120 <exp+0x180>
 800cfe0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800cfe4:	4294      	cmp	r4, r2
 800cfe6:	d0e9      	beq.n	800cfbc <exp+0x1c>
 800cfe8:	4283      	cmp	r3, r0
 800cfea:	da03      	bge.n	800cff4 <exp+0x54>
 800cfec:	b004      	add	sp, #16
 800cfee:	bcf0      	pop	{r4, r5, r6, r7}
 800cff0:	f000 b8c6 	b.w	800d180 <__math_uflow>
 800cff4:	b004      	add	sp, #16
 800cff6:	bcf0      	pop	{r4, r5, r6, r7}
 800cff8:	f000 b8ca 	b.w	800d190 <__math_oflow>
 800cffc:	4604      	mov	r4, r0
 800cffe:	4950      	ldr	r1, [pc, #320]	; (800d140 <exp+0x1a0>)
 800d000:	ed91 6b02 	vldr	d6, [r1, #8]
 800d004:	ed91 5b00 	vldr	d5, [r1]
 800d008:	eeb0 7b46 	vmov.f64	d7, d6
 800d00c:	eea5 7b00 	vfma.f64	d7, d5, d0
 800d010:	ee17 5a10 	vmov	r5, s14
 800d014:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d018:	ed91 6b04 	vldr	d6, [r1, #16]
 800d01c:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 800d020:	eea6 0b07 	vfma.f64	d0, d6, d7
 800d024:	ed91 6b06 	vldr	d6, [r1, #24]
 800d028:	18d8      	adds	r0, r3, r3
 800d02a:	f100 030f 	add.w	r3, r0, #15
 800d02e:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 800d032:	eea6 0b07 	vfma.f64	d0, d6, d7
 800d036:	ed91 4b0a 	vldr	d4, [r1, #40]	; 0x28
 800d03a:	ee20 7b00 	vmul.f64	d7, d0, d0
 800d03e:	ed90 6b1c 	vldr	d6, [r0, #112]	; 0x70
 800d042:	ed91 5b08 	vldr	d5, [r1, #32]
 800d046:	ee30 6b06 	vadd.f64	d6, d0, d6
 800d04a:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 800d04e:	eea4 5b00 	vfma.f64	d5, d4, d0
 800d052:	ed91 4b0e 	vldr	d4, [r1, #56]	; 0x38
 800d056:	eea5 6b07 	vfma.f64	d6, d5, d7
 800d05a:	ee27 7b07 	vmul.f64	d7, d7, d7
 800d05e:	ed91 5b0c 	vldr	d5, [r1, #48]	; 0x30
 800d062:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
 800d066:	f8d2 c004 	ldr.w	ip, [r2, #4]
 800d06a:	eea4 5b00 	vfma.f64	d5, d4, d0
 800d06e:	2600      	movs	r6, #0
 800d070:	19f2      	adds	r2, r6, r7
 800d072:	eb0c 3345 	add.w	r3, ip, r5, lsl #13
 800d076:	eea7 6b05 	vfma.f64	d6, d7, d5
 800d07a:	2c00      	cmp	r4, #0
 800d07c:	d14b      	bne.n	800d116 <exp+0x176>
 800d07e:	42b5      	cmp	r5, r6
 800d080:	db10      	blt.n	800d0a4 <exp+0x104>
 800d082:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 800d086:	ed9f 7b28 	vldr	d7, [pc, #160]	; 800d128 <exp+0x188>
 800d08a:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 800d08e:	4610      	mov	r0, r2
 800d090:	ec41 0b10 	vmov	d0, r0, r1
 800d094:	eea6 0b00 	vfma.f64	d0, d6, d0
 800d098:	ee20 0b07 	vmul.f64	d0, d0, d7
 800d09c:	b004      	add	sp, #16
 800d09e:	bcf0      	pop	{r4, r5, r6, r7}
 800d0a0:	f000 b88a 	b.w	800d1b8 <__math_check_oflow>
 800d0a4:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 800d0a8:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 800d0ac:	4610      	mov	r0, r2
 800d0ae:	ec41 0b17 	vmov	d7, r0, r1
 800d0b2:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 800d0b6:	ee26 6b07 	vmul.f64	d6, d6, d7
 800d0ba:	ee37 5b06 	vadd.f64	d5, d7, d6
 800d0be:	eeb4 5bc4 	vcmpe.f64	d5, d4
 800d0c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d0c6:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800d130 <exp+0x190>
 800d0ca:	d51e      	bpl.n	800d10a <exp+0x16a>
 800d0cc:	ee35 3b04 	vadd.f64	d3, d5, d4
 800d0d0:	ee37 7b45 	vsub.f64	d7, d7, d5
 800d0d4:	ee37 7b06 	vadd.f64	d7, d7, d6
 800d0d8:	ee34 6b43 	vsub.f64	d6, d4, d3
 800d0dc:	ee36 5b05 	vadd.f64	d5, d6, d5
 800d0e0:	ee35 5b07 	vadd.f64	d5, d5, d7
 800d0e4:	ee35 5b03 	vadd.f64	d5, d5, d3
 800d0e8:	ee35 5b44 	vsub.f64	d5, d5, d4
 800d0ec:	eeb5 5b40 	vcmp.f64	d5, #0.0
 800d0f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d0f4:	d101      	bne.n	800d0fa <exp+0x15a>
 800d0f6:	ed9f 5b10 	vldr	d5, [pc, #64]	; 800d138 <exp+0x198>
 800d0fa:	ed8d 0b00 	vstr	d0, [sp]
 800d0fe:	ed9d 7b00 	vldr	d7, [sp]
 800d102:	ee27 7b00 	vmul.f64	d7, d7, d0
 800d106:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d10a:	ee25 0b00 	vmul.f64	d0, d5, d0
 800d10e:	b004      	add	sp, #16
 800d110:	bcf0      	pop	{r4, r5, r6, r7}
 800d112:	f000 b845 	b.w	800d1a0 <__math_check_uflow>
 800d116:	ec43 2b10 	vmov	d0, r2, r3
 800d11a:	eea6 0b00 	vfma.f64	d0, d6, d0
 800d11e:	e751      	b.n	800cfc4 <exp+0x24>
 800d120:	ed9f 0b05 	vldr	d0, [pc, #20]	; 800d138 <exp+0x198>
 800d124:	e74e      	b.n	800cfc4 <exp+0x24>
 800d126:	bf00      	nop
 800d128:	00000000 	.word	0x00000000
 800d12c:	7f000000 	.word	0x7f000000
 800d130:	00000000 	.word	0x00000000
 800d134:	00100000 	.word	0x00100000
	...
 800d140:	0800d820 	.word	0x0800d820

0800d144 <with_errno>:
 800d144:	b513      	push	{r0, r1, r4, lr}
 800d146:	4604      	mov	r4, r0
 800d148:	ed8d 0b00 	vstr	d0, [sp]
 800d14c:	f7ff fa74 	bl	800c638 <__errno>
 800d150:	ed9d 0b00 	vldr	d0, [sp]
 800d154:	6004      	str	r4, [r0, #0]
 800d156:	b002      	add	sp, #8
 800d158:	bd10      	pop	{r4, pc}

0800d15a <xflow>:
 800d15a:	b082      	sub	sp, #8
 800d15c:	b158      	cbz	r0, 800d176 <xflow+0x1c>
 800d15e:	eeb1 7b40 	vneg.f64	d7, d0
 800d162:	ed8d 7b00 	vstr	d7, [sp]
 800d166:	ed9d 7b00 	vldr	d7, [sp]
 800d16a:	2022      	movs	r0, #34	; 0x22
 800d16c:	ee20 0b07 	vmul.f64	d0, d0, d7
 800d170:	b002      	add	sp, #8
 800d172:	f7ff bfe7 	b.w	800d144 <with_errno>
 800d176:	eeb0 7b40 	vmov.f64	d7, d0
 800d17a:	e7f2      	b.n	800d162 <xflow+0x8>
 800d17c:	0000      	movs	r0, r0
	...

0800d180 <__math_uflow>:
 800d180:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800d188 <__math_uflow+0x8>
 800d184:	f7ff bfe9 	b.w	800d15a <xflow>
 800d188:	00000000 	.word	0x00000000
 800d18c:	10000000 	.word	0x10000000

0800d190 <__math_oflow>:
 800d190:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800d198 <__math_oflow+0x8>
 800d194:	f7ff bfe1 	b.w	800d15a <xflow>
 800d198:	00000000 	.word	0x00000000
 800d19c:	70000000 	.word	0x70000000

0800d1a0 <__math_check_uflow>:
 800d1a0:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800d1a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d1a8:	d102      	bne.n	800d1b0 <__math_check_uflow+0x10>
 800d1aa:	2022      	movs	r0, #34	; 0x22
 800d1ac:	f7ff bfca 	b.w	800d144 <with_errno>
 800d1b0:	4770      	bx	lr
 800d1b2:	0000      	movs	r0, r0
 800d1b4:	0000      	movs	r0, r0
	...

0800d1b8 <__math_check_oflow>:
 800d1b8:	ed9f 6b07 	vldr	d6, [pc, #28]	; 800d1d8 <__math_check_oflow+0x20>
 800d1bc:	eeb0 7bc0 	vabs.f64	d7, d0
 800d1c0:	eeb4 7b46 	vcmp.f64	d7, d6
 800d1c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d1c8:	dd02      	ble.n	800d1d0 <__math_check_oflow+0x18>
 800d1ca:	2022      	movs	r0, #34	; 0x22
 800d1cc:	f7ff bfba 	b.w	800d144 <with_errno>
 800d1d0:	4770      	bx	lr
 800d1d2:	bf00      	nop
 800d1d4:	f3af 8000 	nop.w
 800d1d8:	ffffffff 	.word	0xffffffff
 800d1dc:	7fefffff 	.word	0x7fefffff

0800d1e0 <_init>:
 800d1e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1e2:	bf00      	nop
 800d1e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d1e6:	bc08      	pop	{r3}
 800d1e8:	469e      	mov	lr, r3
 800d1ea:	4770      	bx	lr

0800d1ec <_fini>:
 800d1ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1ee:	bf00      	nop
 800d1f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d1f2:	bc08      	pop	{r3}
 800d1f4:	469e      	mov	lr, r3
 800d1f6:	4770      	bx	lr
