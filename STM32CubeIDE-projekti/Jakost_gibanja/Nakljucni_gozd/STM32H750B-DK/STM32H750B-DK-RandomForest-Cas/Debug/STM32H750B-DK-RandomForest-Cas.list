
STM32H750B-DK-RandomForest-Cas.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001137c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000250  0801161c  0801161c  0002161c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0801186c  0801186c  0002186c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08011870  08011870  00021870  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000b90  24000000  08011874  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001f70  24000ba0  08012404  00030ba0  2**5
                  ALLOC
  7 ._user_heap_stack 00001000  20000000  20000000  00040000  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00030b90  2**0
                  CONTENTS, READONLY
  9 .debug_info   00022fc7  00000000  00000000  00030bbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000049ff  00000000  00000000  00053b85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001928  00000000  00000000  00058588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00001720  00000000  00000000  00059eb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  000400f3  00000000  00000000  0005b5d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00027328  00000000  00000000  0009b6c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00186c77  00000000  00000000  000c29eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  00249662  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000736c  00000000  00000000  002496b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .stab         0000009c  00000000  00000000  00250a20  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .stabstr      0000014d  00000000  00000000  00250abc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000ba0 	.word	0x24000ba0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08011604 	.word	0x08011604

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000ba4 	.word	0x24000ba4
 80002dc:	08011604 	.word	0x08011604

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b084      	sub	sp, #16
 8000394:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000396:	f000 fd81 	bl	8000e9c <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800039a:	4b3b      	ldr	r3, [pc, #236]	; (8000488 <main+0xf8>)
 800039c:	695b      	ldr	r3, [r3, #20]
 800039e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d11b      	bne.n	80003de <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80003a6:	f3bf 8f4f 	dsb	sy
}
 80003aa:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80003ac:	f3bf 8f6f 	isb	sy
}
 80003b0:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80003b2:	4b35      	ldr	r3, [pc, #212]	; (8000488 <main+0xf8>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80003ba:	f3bf 8f4f 	dsb	sy
}
 80003be:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80003c0:	f3bf 8f6f 	isb	sy
}
 80003c4:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80003c6:	4b30      	ldr	r3, [pc, #192]	; (8000488 <main+0xf8>)
 80003c8:	695b      	ldr	r3, [r3, #20]
 80003ca:	4a2f      	ldr	r2, [pc, #188]	; (8000488 <main+0xf8>)
 80003cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003d0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80003d2:	f3bf 8f4f 	dsb	sy
}
 80003d6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80003d8:	f3bf 8f6f 	isb	sy
}
 80003dc:	e000      	b.n	80003e0 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80003de:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80003e0:	4b29      	ldr	r3, [pc, #164]	; (8000488 <main+0xf8>)
 80003e2:	695b      	ldr	r3, [r3, #20]
 80003e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d138      	bne.n	800045e <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80003ec:	4b26      	ldr	r3, [pc, #152]	; (8000488 <main+0xf8>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80003f4:	f3bf 8f4f 	dsb	sy
}
 80003f8:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80003fa:	4b23      	ldr	r3, [pc, #140]	; (8000488 <main+0xf8>)
 80003fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000400:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000402:	68fb      	ldr	r3, [r7, #12]
 8000404:	0b5b      	lsrs	r3, r3, #13
 8000406:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800040a:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800040c:	68fb      	ldr	r3, [r7, #12]
 800040e:	08db      	lsrs	r3, r3, #3
 8000410:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000414:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000416:	68bb      	ldr	r3, [r7, #8]
 8000418:	015a      	lsls	r2, r3, #5
 800041a:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800041e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000420:	687a      	ldr	r2, [r7, #4]
 8000422:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000424:	4918      	ldr	r1, [pc, #96]	; (8000488 <main+0xf8>)
 8000426:	4313      	orrs	r3, r2
 8000428:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	1e5a      	subs	r2, r3, #1
 8000430:	607a      	str	r2, [r7, #4]
 8000432:	2b00      	cmp	r3, #0
 8000434:	d1ef      	bne.n	8000416 <main+0x86>
    } while(sets-- != 0U);
 8000436:	68bb      	ldr	r3, [r7, #8]
 8000438:	1e5a      	subs	r2, r3, #1
 800043a:	60ba      	str	r2, [r7, #8]
 800043c:	2b00      	cmp	r3, #0
 800043e:	d1e5      	bne.n	800040c <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000440:	f3bf 8f4f 	dsb	sy
}
 8000444:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000446:	4b10      	ldr	r3, [pc, #64]	; (8000488 <main+0xf8>)
 8000448:	695b      	ldr	r3, [r3, #20]
 800044a:	4a0f      	ldr	r2, [pc, #60]	; (8000488 <main+0xf8>)
 800044c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000450:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000452:	f3bf 8f4f 	dsb	sy
}
 8000456:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000458:	f3bf 8f6f 	isb	sy
}
 800045c:	e000      	b.n	8000460 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800045e:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000460:	f001 fde4 	bl	800202c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000464:	f000 f812 	bl	800048c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000468:	f000 f93c 	bl	80006e4 <MX_GPIO_Init>
  MX_ADC3_Init();
 800046c:	f000 f88e 	bl	800058c <MX_ADC3_Init>
  MX_CRC_Init();
 8000470:	f000 f8f0 	bl	8000654 <MX_CRC_Init>
  MX_TIM16_Init();
 8000474:	f000 f910 	bl	8000698 <MX_TIM16_Init>
  MX_USB_DEVICE_Init();
 8000478:	f00c fb82 	bl	800cb80 <MX_USB_DEVICE_Init>
  MX_X_CUBE_AI_Init();
 800047c:	f00d fa10 	bl	800d8a0 <MX_X_CUBE_AI_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

  MX_X_CUBE_AI_Process();
 8000480:	f00d fa32 	bl	800d8e8 <MX_X_CUBE_AI_Process>
 8000484:	e7fc      	b.n	8000480 <main+0xf0>
 8000486:	bf00      	nop
 8000488:	e000ed00 	.word	0xe000ed00

0800048c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b09c      	sub	sp, #112	; 0x70
 8000490:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000492:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000496:	224c      	movs	r2, #76	; 0x4c
 8000498:	2100      	movs	r1, #0
 800049a:	4618      	mov	r0, r3
 800049c:	f00f fe96 	bl	80101cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004a0:	1d3b      	adds	r3, r7, #4
 80004a2:	2220      	movs	r2, #32
 80004a4:	2100      	movs	r1, #0
 80004a6:	4618      	mov	r0, r3
 80004a8:	f00f fe90 	bl	80101cc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80004ac:	2002      	movs	r0, #2
 80004ae:	f004 fd1f 	bl	8004ef0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80004b2:	2300      	movs	r3, #0
 80004b4:	603b      	str	r3, [r7, #0]
 80004b6:	4b33      	ldr	r3, [pc, #204]	; (8000584 <SystemClock_Config+0xf8>)
 80004b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004ba:	4a32      	ldr	r2, [pc, #200]	; (8000584 <SystemClock_Config+0xf8>)
 80004bc:	f023 0301 	bic.w	r3, r3, #1
 80004c0:	62d3      	str	r3, [r2, #44]	; 0x2c
 80004c2:	4b30      	ldr	r3, [pc, #192]	; (8000584 <SystemClock_Config+0xf8>)
 80004c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004c6:	f003 0301 	and.w	r3, r3, #1
 80004ca:	603b      	str	r3, [r7, #0]
 80004cc:	4b2e      	ldr	r3, [pc, #184]	; (8000588 <SystemClock_Config+0xfc>)
 80004ce:	699b      	ldr	r3, [r3, #24]
 80004d0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80004d4:	4a2c      	ldr	r2, [pc, #176]	; (8000588 <SystemClock_Config+0xfc>)
 80004d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004da:	6193      	str	r3, [r2, #24]
 80004dc:	4b2a      	ldr	r3, [pc, #168]	; (8000588 <SystemClock_Config+0xfc>)
 80004de:	699b      	ldr	r3, [r3, #24]
 80004e0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80004e4:	603b      	str	r3, [r7, #0]
 80004e6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80004e8:	bf00      	nop
 80004ea:	4b27      	ldr	r3, [pc, #156]	; (8000588 <SystemClock_Config+0xfc>)
 80004ec:	699b      	ldr	r3, [r3, #24]
 80004ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80004f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80004f6:	d1f8      	bne.n	80004ea <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80004f8:	2303      	movs	r3, #3
 80004fa:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80004fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000500:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000502:	2301      	movs	r3, #1
 8000504:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000506:	2340      	movs	r3, #64	; 0x40
 8000508:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800050a:	2302      	movs	r3, #2
 800050c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800050e:	2302      	movs	r3, #2
 8000510:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 22;
 8000512:	2316      	movs	r3, #22
 8000514:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 169;
 8000516:	23a9      	movs	r3, #169	; 0xa9
 8000518:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800051a:	2302      	movs	r3, #2
 800051c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800051e:	2304      	movs	r3, #4
 8000520:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000522:	2302      	movs	r3, #2
 8000524:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_0;
 8000526:	2300      	movs	r3, #0
 8000528:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800052a:	2300      	movs	r3, #0
 800052c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800052e:	2300      	movs	r3, #0
 8000530:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000532:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000536:	4618      	mov	r0, r3
 8000538:	f005 f9d4 	bl	80058e4 <HAL_RCC_OscConfig>
 800053c:	4603      	mov	r3, r0
 800053e:	2b00      	cmp	r3, #0
 8000540:	d001      	beq.n	8000546 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000542:	f000 fcd8 	bl	8000ef6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000546:	233f      	movs	r3, #63	; 0x3f
 8000548:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800054a:	2300      	movs	r3, #0
 800054c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800054e:	2300      	movs	r3, #0
 8000550:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000552:	2300      	movs	r3, #0
 8000554:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000556:	2300      	movs	r3, #0
 8000558:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800055a:	2300      	movs	r3, #0
 800055c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800055e:	2300      	movs	r3, #0
 8000560:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000562:	2300      	movs	r3, #0
 8000564:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000566:	1d3b      	adds	r3, r7, #4
 8000568:	2101      	movs	r1, #1
 800056a:	4618      	mov	r0, r3
 800056c:	f005 fe14 	bl	8006198 <HAL_RCC_ClockConfig>
 8000570:	4603      	mov	r3, r0
 8000572:	2b00      	cmp	r3, #0
 8000574:	d001      	beq.n	800057a <SystemClock_Config+0xee>
  {
    Error_Handler();
 8000576:	f000 fcbe 	bl	8000ef6 <Error_Handler>
  }
}
 800057a:	bf00      	nop
 800057c:	3770      	adds	r7, #112	; 0x70
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	58000400 	.word	0x58000400
 8000588:	58024800 	.word	0x58024800

0800058c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b088      	sub	sp, #32
 8000590:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000592:	1d3b      	adds	r3, r7, #4
 8000594:	2200      	movs	r2, #0
 8000596:	601a      	str	r2, [r3, #0]
 8000598:	605a      	str	r2, [r3, #4]
 800059a:	609a      	str	r2, [r3, #8]
 800059c:	60da      	str	r2, [r3, #12]
 800059e:	611a      	str	r2, [r3, #16]
 80005a0:	615a      	str	r2, [r3, #20]
 80005a2:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80005a4:	4b27      	ldr	r3, [pc, #156]	; (8000644 <MX_ADC3_Init+0xb8>)
 80005a6:	4a28      	ldr	r2, [pc, #160]	; (8000648 <MX_ADC3_Init+0xbc>)
 80005a8:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 80005aa:	4b26      	ldr	r3, [pc, #152]	; (8000644 <MX_ADC3_Init+0xb8>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005b0:	4b24      	ldr	r3, [pc, #144]	; (8000644 <MX_ADC3_Init+0xb8>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005b6:	4b23      	ldr	r3, [pc, #140]	; (8000644 <MX_ADC3_Init+0xb8>)
 80005b8:	2204      	movs	r2, #4
 80005ba:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80005bc:	4b21      	ldr	r3, [pc, #132]	; (8000644 <MX_ADC3_Init+0xb8>)
 80005be:	2200      	movs	r2, #0
 80005c0:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80005c2:	4b20      	ldr	r3, [pc, #128]	; (8000644 <MX_ADC3_Init+0xb8>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 80005c8:	4b1e      	ldr	r3, [pc, #120]	; (8000644 <MX_ADC3_Init+0xb8>)
 80005ca:	2201      	movs	r2, #1
 80005cc:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80005ce:	4b1d      	ldr	r3, [pc, #116]	; (8000644 <MX_ADC3_Init+0xb8>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005d4:	4b1b      	ldr	r3, [pc, #108]	; (8000644 <MX_ADC3_Init+0xb8>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005da:	4b1a      	ldr	r3, [pc, #104]	; (8000644 <MX_ADC3_Init+0xb8>)
 80005dc:	2200      	movs	r2, #0
 80005de:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80005e0:	4b18      	ldr	r3, [pc, #96]	; (8000644 <MX_ADC3_Init+0xb8>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80005e6:	4b17      	ldr	r3, [pc, #92]	; (8000644 <MX_ADC3_Init+0xb8>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80005ec:	4b15      	ldr	r3, [pc, #84]	; (8000644 <MX_ADC3_Init+0xb8>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 80005f2:	4b14      	ldr	r3, [pc, #80]	; (8000644 <MX_ADC3_Init+0xb8>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80005fa:	4812      	ldr	r0, [pc, #72]	; (8000644 <MX_ADC3_Init+0xb8>)
 80005fc:	f001 ff7a 	bl	80024f4 <HAL_ADC_Init>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <MX_ADC3_Init+0x7e>
  {
    Error_Handler();
 8000606:	f000 fc76 	bl	8000ef6 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800060a:	4b10      	ldr	r3, [pc, #64]	; (800064c <MX_ADC3_Init+0xc0>)
 800060c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800060e:	2306      	movs	r3, #6
 8000610:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000612:	2300      	movs	r3, #0
 8000614:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8000616:	4b0e      	ldr	r3, [pc, #56]	; (8000650 <MX_ADC3_Init+0xc4>)
 8000618:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800061a:	2304      	movs	r3, #4
 800061c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800061e:	2300      	movs	r3, #0
 8000620:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000622:	2300      	movs	r3, #0
 8000624:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000626:	1d3b      	adds	r3, r7, #4
 8000628:	4619      	mov	r1, r3
 800062a:	4806      	ldr	r0, [pc, #24]	; (8000644 <MX_ADC3_Init+0xb8>)
 800062c:	f002 f904 	bl	8002838 <HAL_ADC_ConfigChannel>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <MX_ADC3_Init+0xae>
  {
    Error_Handler();
 8000636:	f000 fc5e 	bl	8000ef6 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800063a:	bf00      	nop
 800063c:	3720      	adds	r7, #32
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	24000bbc 	.word	0x24000bbc
 8000648:	58026000 	.word	0x58026000
 800064c:	04300002 	.word	0x04300002
 8000650:	47ff0000 	.word	0x47ff0000

08000654 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000658:	4b0d      	ldr	r3, [pc, #52]	; (8000690 <MX_CRC_Init+0x3c>)
 800065a:	4a0e      	ldr	r2, [pc, #56]	; (8000694 <MX_CRC_Init+0x40>)
 800065c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800065e:	4b0c      	ldr	r3, [pc, #48]	; (8000690 <MX_CRC_Init+0x3c>)
 8000660:	2200      	movs	r2, #0
 8000662:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000664:	4b0a      	ldr	r3, [pc, #40]	; (8000690 <MX_CRC_Init+0x3c>)
 8000666:	2200      	movs	r2, #0
 8000668:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800066a:	4b09      	ldr	r3, [pc, #36]	; (8000690 <MX_CRC_Init+0x3c>)
 800066c:	2200      	movs	r2, #0
 800066e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000670:	4b07      	ldr	r3, [pc, #28]	; (8000690 <MX_CRC_Init+0x3c>)
 8000672:	2200      	movs	r2, #0
 8000674:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000676:	4b06      	ldr	r3, [pc, #24]	; (8000690 <MX_CRC_Init+0x3c>)
 8000678:	2201      	movs	r2, #1
 800067a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800067c:	4804      	ldr	r0, [pc, #16]	; (8000690 <MX_CRC_Init+0x3c>)
 800067e:	f002 fec3 	bl	8003408 <HAL_CRC_Init>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000688:	f000 fc35 	bl	8000ef6 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800068c:	bf00      	nop
 800068e:	bd80      	pop	{r7, pc}
 8000690:	24000c20 	.word	0x24000c20
 8000694:	58024c00 	.word	0x58024c00

08000698 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800069c:	4b0f      	ldr	r3, [pc, #60]	; (80006dc <MX_TIM16_Init+0x44>)
 800069e:	4a10      	ldr	r2, [pc, #64]	; (80006e0 <MX_TIM16_Init+0x48>)
 80006a0:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 64 - 1;
 80006a2:	4b0e      	ldr	r3, [pc, #56]	; (80006dc <MX_TIM16_Init+0x44>)
 80006a4:	223f      	movs	r2, #63	; 0x3f
 80006a6:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006a8:	4b0c      	ldr	r3, [pc, #48]	; (80006dc <MX_TIM16_Init+0x44>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 80006ae:	4b0b      	ldr	r3, [pc, #44]	; (80006dc <MX_TIM16_Init+0x44>)
 80006b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80006b4:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006b6:	4b09      	ldr	r3, [pc, #36]	; (80006dc <MX_TIM16_Init+0x44>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80006bc:	4b07      	ldr	r3, [pc, #28]	; (80006dc <MX_TIM16_Init+0x44>)
 80006be:	2200      	movs	r2, #0
 80006c0:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006c2:	4b06      	ldr	r3, [pc, #24]	; (80006dc <MX_TIM16_Init+0x44>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80006c8:	4804      	ldr	r0, [pc, #16]	; (80006dc <MX_TIM16_Init+0x44>)
 80006ca:	f008 fdd9 	bl	8009280 <HAL_TIM_Base_Init>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 80006d4:	f000 fc0f 	bl	8000ef6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80006d8:	bf00      	nop
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	24000c44 	.word	0x24000c44
 80006e0:	40014400 	.word	0x40014400

080006e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b090      	sub	sp, #64	; 0x40
 80006e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80006ee:	2200      	movs	r2, #0
 80006f0:	601a      	str	r2, [r3, #0]
 80006f2:	605a      	str	r2, [r3, #4]
 80006f4:	609a      	str	r2, [r3, #8]
 80006f6:	60da      	str	r2, [r3, #12]
 80006f8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80006fa:	4bbd      	ldr	r3, [pc, #756]	; (80009f0 <MX_GPIO_Init+0x30c>)
 80006fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000700:	4abb      	ldr	r2, [pc, #748]	; (80009f0 <MX_GPIO_Init+0x30c>)
 8000702:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000706:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800070a:	4bb9      	ldr	r3, [pc, #740]	; (80009f0 <MX_GPIO_Init+0x30c>)
 800070c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000710:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000714:	62bb      	str	r3, [r7, #40]	; 0x28
 8000716:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000718:	4bb5      	ldr	r3, [pc, #724]	; (80009f0 <MX_GPIO_Init+0x30c>)
 800071a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800071e:	4ab4      	ldr	r2, [pc, #720]	; (80009f0 <MX_GPIO_Init+0x30c>)
 8000720:	f043 0302 	orr.w	r3, r3, #2
 8000724:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000728:	4bb1      	ldr	r3, [pc, #708]	; (80009f0 <MX_GPIO_Init+0x30c>)
 800072a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800072e:	f003 0302 	and.w	r3, r3, #2
 8000732:	627b      	str	r3, [r7, #36]	; 0x24
 8000734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000736:	4bae      	ldr	r3, [pc, #696]	; (80009f0 <MX_GPIO_Init+0x30c>)
 8000738:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800073c:	4aac      	ldr	r2, [pc, #688]	; (80009f0 <MX_GPIO_Init+0x30c>)
 800073e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000742:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000746:	4baa      	ldr	r3, [pc, #680]	; (80009f0 <MX_GPIO_Init+0x30c>)
 8000748:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800074c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000750:	623b      	str	r3, [r7, #32]
 8000752:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000754:	4ba6      	ldr	r3, [pc, #664]	; (80009f0 <MX_GPIO_Init+0x30c>)
 8000756:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800075a:	4aa5      	ldr	r2, [pc, #660]	; (80009f0 <MX_GPIO_Init+0x30c>)
 800075c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000760:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000764:	4ba2      	ldr	r3, [pc, #648]	; (80009f0 <MX_GPIO_Init+0x30c>)
 8000766:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800076a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800076e:	61fb      	str	r3, [r7, #28]
 8000770:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000772:	4b9f      	ldr	r3, [pc, #636]	; (80009f0 <MX_GPIO_Init+0x30c>)
 8000774:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000778:	4a9d      	ldr	r2, [pc, #628]	; (80009f0 <MX_GPIO_Init+0x30c>)
 800077a:	f043 0304 	orr.w	r3, r3, #4
 800077e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000782:	4b9b      	ldr	r3, [pc, #620]	; (80009f0 <MX_GPIO_Init+0x30c>)
 8000784:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000788:	f003 0304 	and.w	r3, r3, #4
 800078c:	61bb      	str	r3, [r7, #24]
 800078e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000790:	4b97      	ldr	r3, [pc, #604]	; (80009f0 <MX_GPIO_Init+0x30c>)
 8000792:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000796:	4a96      	ldr	r2, [pc, #600]	; (80009f0 <MX_GPIO_Init+0x30c>)
 8000798:	f043 0310 	orr.w	r3, r3, #16
 800079c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007a0:	4b93      	ldr	r3, [pc, #588]	; (80009f0 <MX_GPIO_Init+0x30c>)
 80007a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007a6:	f003 0310 	and.w	r3, r3, #16
 80007aa:	617b      	str	r3, [r7, #20]
 80007ac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80007ae:	4b90      	ldr	r3, [pc, #576]	; (80009f0 <MX_GPIO_Init+0x30c>)
 80007b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007b4:	4a8e      	ldr	r2, [pc, #568]	; (80009f0 <MX_GPIO_Init+0x30c>)
 80007b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80007ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007be:	4b8c      	ldr	r3, [pc, #560]	; (80009f0 <MX_GPIO_Init+0x30c>)
 80007c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80007c8:	613b      	str	r3, [r7, #16]
 80007ca:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007cc:	4b88      	ldr	r3, [pc, #544]	; (80009f0 <MX_GPIO_Init+0x30c>)
 80007ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007d2:	4a87      	ldr	r2, [pc, #540]	; (80009f0 <MX_GPIO_Init+0x30c>)
 80007d4:	f043 0308 	orr.w	r3, r3, #8
 80007d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007dc:	4b84      	ldr	r3, [pc, #528]	; (80009f0 <MX_GPIO_Init+0x30c>)
 80007de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007e2:	f003 0308 	and.w	r3, r3, #8
 80007e6:	60fb      	str	r3, [r7, #12]
 80007e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ea:	4b81      	ldr	r3, [pc, #516]	; (80009f0 <MX_GPIO_Init+0x30c>)
 80007ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007f0:	4a7f      	ldr	r2, [pc, #508]	; (80009f0 <MX_GPIO_Init+0x30c>)
 80007f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007fa:	4b7d      	ldr	r3, [pc, #500]	; (80009f0 <MX_GPIO_Init+0x30c>)
 80007fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000800:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000804:	60bb      	str	r3, [r7, #8]
 8000806:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000808:	4b79      	ldr	r3, [pc, #484]	; (80009f0 <MX_GPIO_Init+0x30c>)
 800080a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800080e:	4a78      	ldr	r2, [pc, #480]	; (80009f0 <MX_GPIO_Init+0x30c>)
 8000810:	f043 0301 	orr.w	r3, r3, #1
 8000814:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000818:	4b75      	ldr	r3, [pc, #468]	; (80009f0 <MX_GPIO_Init+0x30c>)
 800081a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800081e:	f003 0301 	and.w	r3, r3, #1
 8000822:	607b      	str	r3, [r7, #4]
 8000824:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000826:	4b72      	ldr	r3, [pc, #456]	; (80009f0 <MX_GPIO_Init+0x30c>)
 8000828:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800082c:	4a70      	ldr	r2, [pc, #448]	; (80009f0 <MX_GPIO_Init+0x30c>)
 800082e:	f043 0320 	orr.w	r3, r3, #32
 8000832:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000836:	4b6e      	ldr	r3, [pc, #440]	; (80009f0 <MX_GPIO_Init+0x30c>)
 8000838:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800083c:	f003 0320 	and.w	r3, r3, #32
 8000840:	603b      	str	r3, [r7, #0]
 8000842:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000844:	2200      	movs	r2, #0
 8000846:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800084a:	486a      	ldr	r0, [pc, #424]	; (80009f4 <MX_GPIO_Init+0x310>)
 800084c:	f003 f87e 	bl	800394c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8000850:	2200      	movs	r2, #0
 8000852:	2104      	movs	r1, #4
 8000854:	4868      	ldr	r0, [pc, #416]	; (80009f8 <MX_GPIO_Init+0x314>)
 8000856:	f003 f879 	bl	800394c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 800085a:	2200      	movs	r2, #0
 800085c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000860:	4866      	ldr	r0, [pc, #408]	; (80009fc <MX_GPIO_Init+0x318>)
 8000862:	f003 f873 	bl	800394c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PI6 PI5 PI4 PI7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_7;
 8000866:	23f0      	movs	r3, #240	; 0xf0
 8000868:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800086a:	2302      	movs	r3, #2
 800086c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086e:	2300      	movs	r3, #0
 8000870:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000872:	2300      	movs	r3, #0
 8000874:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000876:	230a      	movs	r3, #10
 8000878:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800087a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800087e:	4619      	mov	r1, r3
 8000880:	485c      	ldr	r0, [pc, #368]	; (80009f4 <MX_GPIO_Init+0x310>)
 8000882:	f002 feb3 	bl	80035ec <HAL_GPIO_Init>

  /*Configure GPIO pins : FDCAN2_RX_Pin FDCAN2_TX_Pin */
  GPIO_InitStruct.Pin = FDCAN2_RX_Pin|FDCAN2_TX_Pin;
 8000886:	f242 0320 	movw	r3, #8224	; 0x2020
 800088a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800088c:	2302      	movs	r3, #2
 800088e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000890:	2300      	movs	r3, #0
 8000892:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000894:	2300      	movs	r3, #0
 8000896:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8000898:	2309      	movs	r3, #9
 800089a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800089c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008a0:	4619      	mov	r1, r3
 80008a2:	4856      	ldr	r0, [pc, #344]	; (80009fc <MX_GPIO_Init+0x318>)
 80008a4:	f002 fea2 	bl	80035ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PK5 PK4 PK6 PK3
                           PK7 PK2 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_3
 80008a8:	23fc      	movs	r3, #252	; 0xfc
 80008aa:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_7|GPIO_PIN_2;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ac:	2302      	movs	r3, #2
 80008ae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b0:	2300      	movs	r3, #0
 80008b2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b4:	2300      	movs	r3, #0
 80008b6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80008b8:	230e      	movs	r3, #14
 80008ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80008bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008c0:	4619      	mov	r1, r3
 80008c2:	484f      	ldr	r0, [pc, #316]	; (8000a00 <MX_GPIO_Init+0x31c>)
 80008c4:	f002 fe92 	bl	80035ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PG10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80008c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ce:	2302      	movs	r3, #2
 80008d0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d2:	2300      	movs	r3, #0
 80008d4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d6:	2300      	movs	r3, #0
 80008d8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80008da:	230a      	movs	r3, #10
 80008dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80008de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008e2:	4619      	mov	r1, r3
 80008e4:	4847      	ldr	r0, [pc, #284]	; (8000a04 <MX_GPIO_Init+0x320>)
 80008e6:	f002 fe81 	bl	80035ec <HAL_GPIO_Init>

  /*Configure GPIO pins : SDIO1_D2_Pin SDIO1_D3_Pin SDIO1_CK_Pin SDIO1_D0_Pin
                           SDIO1_D1_Pin SDIO1_D7_Pin SDIO1_D6_Pin */
  GPIO_InitStruct.Pin = SDIO1_D2_Pin|SDIO1_D3_Pin|SDIO1_CK_Pin|SDIO1_D0_Pin
 80008ea:	f44f 53fe 	mov.w	r3, #8128	; 0x1fc0
 80008ee:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |SDIO1_D1_Pin|SDIO1_D7_Pin|SDIO1_D6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f0:	2302      	movs	r3, #2
 80008f2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	2300      	movs	r3, #0
 80008f6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008f8:	2303      	movs	r3, #3
 80008fa:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80008fc:	230c      	movs	r3, #12
 80008fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000900:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000904:	4619      	mov	r1, r3
 8000906:	4840      	ldr	r0, [pc, #256]	; (8000a08 <MX_GPIO_Init+0x324>)
 8000908:	f002 fe70 	bl	80035ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PI1 PI0 PI9 PI12
                           PI14 PI15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_9|GPIO_PIN_12
 800090c:	f24d 2303 	movw	r3, #53763	; 0xd203
 8000910:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000912:	2302      	movs	r3, #2
 8000914:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000916:	2300      	movs	r3, #0
 8000918:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091a:	2300      	movs	r3, #0
 800091c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800091e:	230e      	movs	r3, #14
 8000920:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000922:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000926:	4619      	mov	r1, r3
 8000928:	4832      	ldr	r0, [pc, #200]	; (80009f4 <MX_GPIO_Init+0x310>)
 800092a:	f002 fe5f 	bl	80035ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PE1 PE0 PE10 PE9
                           PE11 PE12 PE15 PE8
                           PE13 PE7 PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 800092e:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000932:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_8
                          |GPIO_PIN_13|GPIO_PIN_7|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000934:	2302      	movs	r3, #2
 8000936:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000938:	2300      	movs	r3, #0
 800093a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800093c:	2303      	movs	r3, #3
 800093e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000940:	230c      	movs	r3, #12
 8000942:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000944:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000948:	4619      	mov	r1, r3
 800094a:	4830      	ldr	r0, [pc, #192]	; (8000a0c <MX_GPIO_Init+0x328>)
 800094c:	f002 fe4e 	bl	80035ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000950:	2340      	movs	r3, #64	; 0x40
 8000952:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000954:	2302      	movs	r3, #2
 8000956:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000958:	2300      	movs	r3, #0
 800095a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095c:	2300      	movs	r3, #0
 800095e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000960:	230a      	movs	r3, #10
 8000962:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000964:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000968:	4619      	mov	r1, r3
 800096a:	4824      	ldr	r0, [pc, #144]	; (80009fc <MX_GPIO_Init+0x318>)
 800096c:	f002 fe3e 	bl	80035ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000970:	2310      	movs	r3, #16
 8000972:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000974:	2302      	movs	r3, #2
 8000976:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000978:	2300      	movs	r3, #0
 800097a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097c:	2300      	movs	r3, #0
 800097e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8000980:	2307      	movs	r3, #7
 8000982:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000984:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000988:	4619      	mov	r1, r3
 800098a:	481c      	ldr	r0, [pc, #112]	; (80009fc <MX_GPIO_Init+0x318>)
 800098c:	f002 fe2e 	bl	80035ec <HAL_GPIO_Init>

  /*Configure GPIO pins : MII_TX_EN_Pin MII_TXD1_Pin MII_TXD0_Pin */
  GPIO_InitStruct.Pin = MII_TX_EN_Pin|MII_TXD1_Pin|MII_TXD0_Pin;
 8000990:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000994:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000996:	2302      	movs	r3, #2
 8000998:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099a:	2300      	movs	r3, #0
 800099c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099e:	2300      	movs	r3, #0
 80009a0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009a2:	230b      	movs	r3, #11
 80009a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80009a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009aa:	4619      	mov	r1, r3
 80009ac:	4815      	ldr	r0, [pc, #84]	; (8000a04 <MX_GPIO_Init+0x320>)
 80009ae:	f002 fe1d 	bl	80035ec <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DISP_Pin PJ14 PJ12 PJ13
                           PJ11 PJ10 PJ9 PJ0
                           PJ8 PJ7 PJ6 PJ1
                           PJ5 PJ3 PJ4 */
  GPIO_InitStruct.Pin = LCD_DISP_Pin|GPIO_PIN_14|GPIO_PIN_12|GPIO_PIN_13
 80009b2:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 80009b6:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_0
                          |GPIO_PIN_8|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_1
                          |GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b8:	2302      	movs	r3, #2
 80009ba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009bc:	2300      	movs	r3, #0
 80009be:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c0:	2300      	movs	r3, #0
 80009c2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80009c4:	230e      	movs	r3, #14
 80009c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80009c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009cc:	4619      	mov	r1, r3
 80009ce:	480a      	ldr	r0, [pc, #40]	; (80009f8 <MX_GPIO_Init+0x314>)
 80009d0:	f002 fe0c 	bl	80035ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80009d4:	2308      	movs	r3, #8
 80009d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d8:	2302      	movs	r3, #2
 80009da:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009dc:	2300      	movs	r3, #0
 80009de:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e0:	2300      	movs	r3, #0
 80009e2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009e4:	2305      	movs	r3, #5
 80009e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009ec:	4619      	mov	r1, r3
 80009ee:	e00f      	b.n	8000a10 <MX_GPIO_Init+0x32c>
 80009f0:	58024400 	.word	0x58024400
 80009f4:	58022000 	.word	0x58022000
 80009f8:	58022400 	.word	0x58022400
 80009fc:	58020400 	.word	0x58020400
 8000a00:	58022800 	.word	0x58022800
 8000a04:	58021800 	.word	0x58021800
 8000a08:	58020800 	.word	0x58020800
 8000a0c:	58021000 	.word	0x58021000
 8000a10:	48bc      	ldr	r0, [pc, #752]	; (8000d04 <MX_GPIO_Init+0x620>)
 8000a12:	f002 fdeb 	bl	80035ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PI2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000a16:	2304      	movs	r3, #4
 8000a18:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1a:	2302      	movs	r3, #2
 8000a1c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a22:	2300      	movs	r3, #0
 8000a24:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a26:	2305      	movs	r3, #5
 8000a28:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000a2a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a2e:	4619      	mov	r1, r3
 8000a30:	48b5      	ldr	r0, [pc, #724]	; (8000d08 <MX_GPIO_Init+0x624>)
 8000a32:	f002 fddb 	bl	80035ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PH15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000a36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3c:	2302      	movs	r3, #2
 8000a3e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a40:	2300      	movs	r3, #0
 8000a42:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a44:	2300      	movs	r3, #0
 8000a46:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8000a48:	2303      	movs	r3, #3
 8000a4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000a4c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a50:	4619      	mov	r1, r3
 8000a52:	48ae      	ldr	r0, [pc, #696]	; (8000d0c <MX_GPIO_Init+0x628>)
 8000a54:	f002 fdca 	bl	80035ec <HAL_GPIO_Init>

  /*Configure GPIO pins : FDCAN1_RX_Pin FDCAN1_TX_Pin */
  GPIO_InitStruct.Pin = FDCAN1_RX_Pin|FDCAN1_TX_Pin;
 8000a58:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a5e:	2302      	movs	r3, #2
 8000a60:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a62:	2300      	movs	r3, #0
 8000a64:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a66:	2300      	movs	r3, #0
 8000a68:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000a6a:	2309      	movs	r3, #9
 8000a6c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000a6e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a72:	4619      	mov	r1, r3
 8000a74:	48a5      	ldr	r0, [pc, #660]	; (8000d0c <MX_GPIO_Init+0x628>)
 8000a76:	f002 fdb9 	bl	80035ec <HAL_GPIO_Init>

  /*Configure GPIO pin : MII_TXD3_Pin */
  GPIO_InitStruct.Pin = MII_TXD3_Pin;
 8000a7a:	2304      	movs	r3, #4
 8000a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a7e:	2302      	movs	r3, #2
 8000a80:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a82:	2300      	movs	r3, #0
 8000a84:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a86:	2300      	movs	r3, #0
 8000a88:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a8a:	230b      	movs	r3, #11
 8000a8c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(MII_TXD3_GPIO_Port, &GPIO_InitStruct);
 8000a8e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a92:	4619      	mov	r1, r3
 8000a94:	489e      	ldr	r0, [pc, #632]	; (8000d10 <MX_GPIO_Init+0x62c>)
 8000a96:	f002 fda9 	bl	80035ec <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DISPD7_Pin */
  GPIO_InitStruct.Pin = LCD_DISPD7_Pin;
 8000a9a:	2380      	movs	r3, #128	; 0x80
 8000a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_DISPD7_GPIO_Port, &GPIO_InitStruct);
 8000aa6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000aaa:	4619      	mov	r1, r3
 8000aac:	4895      	ldr	r0, [pc, #596]	; (8000d04 <MX_GPIO_Init+0x620>)
 8000aae:	f002 fd9d 	bl	80035ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PE5 PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
 8000ab2:	2330      	movs	r3, #48	; 0x30
 8000ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab6:	2302      	movs	r3, #2
 8000ab8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aba:	2300      	movs	r3, #0
 8000abc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI4;
 8000ac2:	230a      	movs	r3, #10
 8000ac4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ac6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000aca:	4619      	mov	r1, r3
 8000acc:	4890      	ldr	r0, [pc, #576]	; (8000d10 <MX_GPIO_Init+0x62c>)
 8000ace:	f002 fd8d 	bl	80035ec <HAL_GPIO_Init>

  /*Configure GPIO pins : SDIO1_D5_Pin SDIO1_D4_Pin */
  GPIO_InitStruct.Pin = SDIO1_D5_Pin|SDIO1_D4_Pin;
 8000ad2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad8:	2302      	movs	r3, #2
 8000ada:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000adc:	2300      	movs	r3, #0
 8000ade:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae0:	2303      	movs	r3, #3
 8000ae2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8000ae4:	230c      	movs	r3, #12
 8000ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ae8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000aec:	4619      	mov	r1, r3
 8000aee:	4889      	ldr	r0, [pc, #548]	; (8000d14 <MX_GPIO_Init+0x630>)
 8000af0:	f002 fd7c 	bl	80035ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PG15 PG8 PG5 PG4
                           PG0 PG1 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 8000af4:	f248 1333 	movw	r3, #33075	; 0x8133
 8000af8:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afa:	2302      	movs	r3, #2
 8000afc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afe:	2300      	movs	r3, #0
 8000b00:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b02:	2303      	movs	r3, #3
 8000b04:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b06:	230c      	movs	r3, #12
 8000b08:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b0a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b0e:	4619      	mov	r1, r3
 8000b10:	4881      	ldr	r0, [pc, #516]	; (8000d18 <MX_GPIO_Init+0x634>)
 8000b12:	f002 fd6b 	bl	80035ec <HAL_GPIO_Init>

  /*Configure GPIO pin : SDIO1_CMD_Pin */
  GPIO_InitStruct.Pin = SDIO1_CMD_Pin;
 8000b16:	2304      	movs	r3, #4
 8000b18:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1a:	2302      	movs	r3, #2
 8000b1c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b22:	2303      	movs	r3, #3
 8000b24:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8000b26:	230c      	movs	r3, #12
 8000b28:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDIO1_CMD_GPIO_Port, &GPIO_InitStruct);
 8000b2a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b2e:	4619      	mov	r1, r3
 8000b30:	4874      	ldr	r0, [pc, #464]	; (8000d04 <MX_GPIO_Init+0x620>)
 8000b32:	f002 fd5b 	bl	80035ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD15 PD14
                           PD10 PD9 PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 8000b36:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3c:	2302      	movs	r3, #2
 8000b3e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b40:	2300      	movs	r3, #0
 8000b42:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b44:	2303      	movs	r3, #3
 8000b46:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b48:	230c      	movs	r3, #12
 8000b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b4c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b50:	4619      	mov	r1, r3
 8000b52:	486c      	ldr	r0, [pc, #432]	; (8000d04 <MX_GPIO_Init+0x620>)
 8000b54:	f002 fd4a 	bl	80035ec <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS2_ID_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS2_ID_Pin;
 8000b58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b62:	2300      	movs	r3, #0
 8000b64:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_OTG_FS2_ID_GPIO_Port, &GPIO_InitStruct);
 8000b66:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	486b      	ldr	r0, [pc, #428]	; (8000d1c <MX_GPIO_Init+0x638>)
 8000b6e:	f002 fd3d 	bl	80035ec <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b72:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b76:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b84:	4619      	mov	r1, r3
 8000b86:	4866      	ldr	r0, [pc, #408]	; (8000d20 <MX_GPIO_Init+0x63c>)
 8000b88:	f002 fd30 	bl	80035ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000b8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b90:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b92:	2302      	movs	r3, #2
 8000b94:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b96:	2300      	movs	r3, #0
 8000b98:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	485c      	ldr	r0, [pc, #368]	; (8000d1c <MX_GPIO_Init+0x638>)
 8000baa:	f002 fd1f 	bl	80035ec <HAL_GPIO_Init>

  /*Configure GPIO pin : MII_RX_ER_Pin */
  GPIO_InitStruct.Pin = MII_RX_ER_Pin;
 8000bae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb4:	2302      	movs	r3, #2
 8000bb6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bc0:	230b      	movs	r3, #11
 8000bc2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(MII_RX_ER_GPIO_Port, &GPIO_InitStruct);
 8000bc4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bc8:	4619      	mov	r1, r3
 8000bca:	484f      	ldr	r0, [pc, #316]	; (8000d08 <MX_GPIO_Init+0x624>)
 8000bcc:	f002 fd0e 	bl	80035ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PF2 PF1 PF0 PF3
                           PF5 PF4 PF13 PF14
                           PF12 PF15 PF11 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 8000bd0:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd6:	2302      	movs	r3, #2
 8000bd8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bde:	2303      	movs	r3, #3
 8000be0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000be2:	230c      	movs	r3, #12
 8000be4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000be6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bea:	4619      	mov	r1, r3
 8000bec:	484d      	ldr	r0, [pc, #308]	; (8000d24 <MX_GPIO_Init+0x640>)
 8000bee:	f002 fcfd 	bl	80035ec <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000bf2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c00:	2300      	movs	r3, #0
 8000c02:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c04:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c08:	4619      	mov	r1, r3
 8000c0a:	483f      	ldr	r0, [pc, #252]	; (8000d08 <MX_GPIO_Init+0x624>)
 8000c0c:	f002 fcee 	bl	80035ec <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8000c10:	2304      	movs	r3, #4
 8000c12:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c14:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c18:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000c1e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c22:	4619      	mov	r1, r3
 8000c24:	483c      	ldr	r0, [pc, #240]	; (8000d18 <MX_GPIO_Init+0x634>)
 8000c26:	f002 fce1 	bl	80035ec <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c32:	2300      	movs	r3, #0
 8000c34:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 8000c36:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	483a      	ldr	r0, [pc, #232]	; (8000d28 <MX_GPIO_Init+0x644>)
 8000c3e:	f002 fcd5 	bl	80035ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PF6 PF7 PF10 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
 8000c42:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8000c46:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c50:	2300      	movs	r3, #0
 8000c52:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000c54:	2309      	movs	r3, #9
 8000c56:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000c58:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	4831      	ldr	r0, [pc, #196]	; (8000d24 <MX_GPIO_Init+0x640>)
 8000c60:	f002 fcc4 	bl	80035ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c64:	2301      	movs	r3, #1
 8000c66:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c68:	2303      	movs	r3, #3
 8000c6a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c70:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c74:	4619      	mov	r1, r3
 8000c76:	482a      	ldr	r0, [pc, #168]	; (8000d20 <MX_GPIO_Init+0x63c>)
 8000c78:	f002 fcb8 	bl	80035ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PF9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000c7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c80:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c82:	2302      	movs	r3, #2
 8000c84:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c86:	2300      	movs	r3, #0
 8000c88:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000c8e:	230a      	movs	r3, #10
 8000c90:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000c92:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c96:	4619      	mov	r1, r3
 8000c98:	4822      	ldr	r0, [pc, #136]	; (8000d24 <MX_GPIO_Init+0x640>)
 8000c9a:	f002 fca7 	bl	80035ec <HAL_GPIO_Init>

  /*Configure GPIO pins : MII_MDC_Pin MII_TXD2_Pin MII_TX_CLK_Pin MII_RXD0_Pin
                           MII_RXD1_Pin */
  GPIO_InitStruct.Pin = MII_MDC_Pin|MII_TXD2_Pin|MII_TX_CLK_Pin|MII_RXD0_Pin
 8000c9e:	233e      	movs	r3, #62	; 0x3e
 8000ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |MII_RXD1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000caa:	2300      	movs	r3, #0
 8000cac:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cae:	230b      	movs	r3, #11
 8000cb0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cb2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	4819      	ldr	r0, [pc, #100]	; (8000d20 <MX_GPIO_Init+0x63c>)
 8000cba:	f002 fc97 	bl	80035ec <HAL_GPIO_Init>

  /*Configure GPIO pins : MII_CRS_Pin MII_COL_Pin */
  GPIO_InitStruct.Pin = MII_CRS_Pin|MII_COL_Pin;
 8000cbe:	230c      	movs	r3, #12
 8000cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc2:	2302      	movs	r3, #2
 8000cc4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cce:	230b      	movs	r3, #11
 8000cd0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000cd2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	480c      	ldr	r0, [pc, #48]	; (8000d0c <MX_GPIO_Init+0x628>)
 8000cda:	f002 fc87 	bl	80035ec <HAL_GPIO_Init>

  /*Configure GPIO pins : MII_MDIO_Pin MII_RX_CLK_Pin MII_RX_DV_Pin */
  GPIO_InitStruct.Pin = MII_MDIO_Pin|MII_RX_CLK_Pin|MII_RX_DV_Pin;
 8000cde:	2386      	movs	r3, #134	; 0x86
 8000ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce2:	2302      	movs	r3, #2
 8000ce4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cea:	2300      	movs	r3, #0
 8000cec:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cee:	230b      	movs	r3, #11
 8000cf0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	4808      	ldr	r0, [pc, #32]	; (8000d1c <MX_GPIO_Init+0x638>)
 8000cfa:	f002 fc77 	bl	80035ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PH5 PH6 PH7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000cfe:	23e0      	movs	r3, #224	; 0xe0
 8000d00:	e014      	b.n	8000d2c <MX_GPIO_Init+0x648>
 8000d02:	bf00      	nop
 8000d04:	58020c00 	.word	0x58020c00
 8000d08:	58022000 	.word	0x58022000
 8000d0c:	58021c00 	.word	0x58021c00
 8000d10:	58021000 	.word	0x58021000
 8000d14:	58020400 	.word	0x58020400
 8000d18:	58021800 	.word	0x58021800
 8000d1c:	58020000 	.word	0x58020000
 8000d20:	58020800 	.word	0x58020800
 8000d24:	58021400 	.word	0x58021400
 8000d28:	58022800 	.word	0x58022800
 8000d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2e:	2302      	movs	r3, #2
 8000d30:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d32:	2300      	movs	r3, #0
 8000d34:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d36:	2303      	movs	r3, #3
 8000d38:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d3a:	230c      	movs	r3, #12
 8000d3c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000d3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d42:	4619      	mov	r1, r3
 8000d44:	4850      	ldr	r0, [pc, #320]	; (8000e88 <MX_GPIO_Init+0x7a4>)
 8000d46:	f002 fc51 	bl	80035ec <HAL_GPIO_Init>

  /*Configure GPIO pins : VCP_TX_Pin VCP_RX_Pin */
  GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8000d4a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d50:	2302      	movs	r3, #2
 8000d52:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d54:	2300      	movs	r3, #0
 8000d56:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d5c:	2307      	movs	r3, #7
 8000d5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d60:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d64:	4619      	mov	r1, r3
 8000d66:	4849      	ldr	r0, [pc, #292]	; (8000e8c <MX_GPIO_Init+0x7a8>)
 8000d68:	f002 fc40 	bl	80035ec <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS2_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS2_OverCurrent_Pin;
 8000d6c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d70:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d72:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d76:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS2_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000d7c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d80:	4619      	mov	r1, r3
 8000d82:	4841      	ldr	r0, [pc, #260]	; (8000e88 <MX_GPIO_Init+0x7a4>)
 8000d84:	f002 fc32 	bl	80035ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000d88:	2340      	movs	r3, #64	; 0x40
 8000d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d8c:	2302      	movs	r3, #2
 8000d8e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d90:	2300      	movs	r3, #0
 8000d92:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d94:	2300      	movs	r3, #0
 8000d96:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8000d98:	2309      	movs	r3, #9
 8000d9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d9c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000da0:	4619      	mov	r1, r3
 8000da2:	483b      	ldr	r0, [pc, #236]	; (8000e90 <MX_GPIO_Init+0x7ac>)
 8000da4:	f002 fc22 	bl	80035ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PH9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000da8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000dac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dae:	2302      	movs	r3, #2
 8000db0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db2:	2300      	movs	r3, #0
 8000db4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db6:	2300      	movs	r3, #0
 8000db8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000dba:	230e      	movs	r3, #14
 8000dbc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000dbe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	4830      	ldr	r0, [pc, #192]	; (8000e88 <MX_GPIO_Init+0x7a4>)
 8000dc6:	f002 fc11 	bl	80035ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000dca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000dce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd0:	2302      	movs	r3, #2
 8000dd2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000ddc:	2309      	movs	r3, #9
 8000dde:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000de0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000de4:	4619      	mov	r1, r3
 8000de6:	482b      	ldr	r0, [pc, #172]	; (8000e94 <MX_GPIO_Init+0x7b0>)
 8000de8:	f002 fc00 	bl	80035ec <HAL_GPIO_Init>

  /*Configure GPIO pins : MII_RX_D3_Pin MII_RX_D2_Pin */
  GPIO_InitStruct.Pin = MII_RX_D3_Pin|MII_RX_D2_Pin;
 8000dec:	2303      	movs	r3, #3
 8000dee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df0:	2302      	movs	r3, #2
 8000df2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df4:	2300      	movs	r3, #0
 8000df6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000dfc:	230b      	movs	r3, #11
 8000dfe:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e00:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e04:	4619      	mov	r1, r3
 8000e06:	4821      	ldr	r0, [pc, #132]	; (8000e8c <MX_GPIO_Init+0x7a8>)
 8000e08:	f002 fbf0 	bl	80035ec <HAL_GPIO_Init>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8000e0c:	2304      	movs	r3, #4
 8000e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e10:	2301      	movs	r3, #1
 8000e12:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e14:	2300      	movs	r3, #0
 8000e16:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8000e1c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e20:	4619      	mov	r1, r3
 8000e22:	481d      	ldr	r0, [pc, #116]	; (8000e98 <MX_GPIO_Init+0x7b4>)
 8000e24:	f002 fbe2 	bl	80035ec <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin;
 8000e28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e32:	2300      	movs	r3, #0
 8000e34:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e36:	2300      	movs	r3, #0
 8000e38:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_RST_GPIO_Port, &GPIO_InitStruct);
 8000e3a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e3e:	4619      	mov	r1, r3
 8000e40:	4812      	ldr	r0, [pc, #72]	; (8000e8c <MX_GPIO_Init+0x7a8>)
 8000e42:	f002 fbd3 	bl	80035ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000e46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4c:	2302      	movs	r3, #2
 8000e4e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e50:	2300      	movs	r3, #0
 8000e52:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e54:	2300      	movs	r3, #0
 8000e56:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e58:	2305      	movs	r3, #5
 8000e5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e5c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e60:	4619      	mov	r1, r3
 8000e62:	480a      	ldr	r0, [pc, #40]	; (8000e8c <MX_GPIO_Init+0x7a8>)
 8000e64:	f002 fbc2 	bl	80035ec <HAL_GPIO_Init>

  /*AnalogSwitch Config */
  HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 8000e68:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8000e6c:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8000e70:	f001 f99e 	bl	80021b0 <HAL_SYSCFG_AnalogSwitchConfig>

  /*AnalogSwitch Config */
  HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 8000e74:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8000e78:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8000e7c:	f001 f998 	bl	80021b0 <HAL_SYSCFG_AnalogSwitchConfig>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e80:	bf00      	nop
 8000e82:	3740      	adds	r7, #64	; 0x40
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	58021c00 	.word	0x58021c00
 8000e8c:	58020400 	.word	0x58020400
 8000e90:	58020000 	.word	0x58020000
 8000e94:	58020c00 	.word	0x58020c00
 8000e98:	58022400 	.word	0x58022400

08000e9c <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b084      	sub	sp, #16
 8000ea0:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000ea2:	463b      	mov	r3, r7
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	601a      	str	r2, [r3, #0]
 8000ea8:	605a      	str	r2, [r3, #4]
 8000eaa:	609a      	str	r2, [r3, #8]
 8000eac:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000eae:	f002 fa2f 	bl	8003310 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x90000000;
 8000eba:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
 8000ebe:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16MB;
 8000ec0:	2317      	movs	r3, #23
 8000ec2:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000ecc:	2303      	movs	r3, #3
 8000ece:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000edc:	2301      	movs	r3, #1
 8000ede:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000ee0:	463b      	mov	r3, r7
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f002 fa4c 	bl	8003380 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000ee8:	2004      	movs	r0, #4
 8000eea:	f002 fa29 	bl	8003340 <HAL_MPU_Enable>

}
 8000eee:	bf00      	nop
 8000ef0:	3710      	adds	r7, #16
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}

08000ef6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ef6:	b480      	push	{r7}
 8000ef8:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000efa:	b672      	cpsid	i
}
 8000efc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000efe:	e7fe      	b.n	8000efe <Error_Handler+0x8>

08000f00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f06:	4b0a      	ldr	r3, [pc, #40]	; (8000f30 <HAL_MspInit+0x30>)
 8000f08:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f0c:	4a08      	ldr	r2, [pc, #32]	; (8000f30 <HAL_MspInit+0x30>)
 8000f0e:	f043 0302 	orr.w	r3, r3, #2
 8000f12:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000f16:	4b06      	ldr	r3, [pc, #24]	; (8000f30 <HAL_MspInit+0x30>)
 8000f18:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f1c:	f003 0302 	and.w	r3, r3, #2
 8000f20:	607b      	str	r3, [r7, #4]
 8000f22:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f24:	bf00      	nop
 8000f26:	370c      	adds	r7, #12
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr
 8000f30:	58024400 	.word	0x58024400

08000f34 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b0bc      	sub	sp, #240	; 0xf0
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f3c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]
 8000f44:	605a      	str	r2, [r3, #4]
 8000f46:	609a      	str	r2, [r3, #8]
 8000f48:	60da      	str	r2, [r3, #12]
 8000f4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f4c:	f107 0318 	add.w	r3, r7, #24
 8000f50:	22c0      	movs	r2, #192	; 0xc0
 8000f52:	2100      	movs	r1, #0
 8000f54:	4618      	mov	r0, r3
 8000f56:	f00f f939 	bl	80101cc <memset>
  if(hadc->Instance==ADC3)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4a41      	ldr	r2, [pc, #260]	; (8001064 <HAL_ADC_MspInit+0x130>)
 8000f60:	4293      	cmp	r3, r2
 8000f62:	d17a      	bne.n	800105a <HAL_ADC_MspInit+0x126>

  /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000f64:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000f68:	f04f 0300 	mov.w	r3, #0
 8000f6c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 2;
 8000f70:	2302      	movs	r3, #2
 8000f72:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2N = 12;
 8000f74:	230c      	movs	r3, #12
 8000f76:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2P = 4;
 8000f78:	2304      	movs	r3, #4
 8000f7a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000f7c:	2302      	movs	r3, #2
 8000f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000f80:	2302      	movs	r3, #2
 8000f82:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000f84:	23c0      	movs	r3, #192	; 0xc0
 8000f86:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000f88:	2320      	movs	r3, #32
 8000f8a:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000f90:	2300      	movs	r3, #0
 8000f92:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f96:	f107 0318 	add.w	r3, r7, #24
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f005 fc72 	bl	8006884 <HAL_RCCEx_PeriphCLKConfig>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <HAL_ADC_MspInit+0x76>
    {
      Error_Handler();
 8000fa6:	f7ff ffa6 	bl	8000ef6 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000faa:	4b2f      	ldr	r3, [pc, #188]	; (8001068 <HAL_ADC_MspInit+0x134>)
 8000fac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fb0:	4a2d      	ldr	r2, [pc, #180]	; (8001068 <HAL_ADC_MspInit+0x134>)
 8000fb2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000fb6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fba:	4b2b      	ldr	r3, [pc, #172]	; (8001068 <HAL_ADC_MspInit+0x134>)
 8000fbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fc0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000fc4:	617b      	str	r3, [r7, #20]
 8000fc6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000fc8:	4b27      	ldr	r3, [pc, #156]	; (8001068 <HAL_ADC_MspInit+0x134>)
 8000fca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fce:	4a26      	ldr	r2, [pc, #152]	; (8001068 <HAL_ADC_MspInit+0x134>)
 8000fd0:	f043 0320 	orr.w	r3, r3, #32
 8000fd4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fd8:	4b23      	ldr	r3, [pc, #140]	; (8001068 <HAL_ADC_MspInit+0x134>)
 8000fda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fde:	f003 0320 	and.w	r3, r3, #32
 8000fe2:	613b      	str	r3, [r7, #16]
 8000fe4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fe6:	4b20      	ldr	r3, [pc, #128]	; (8001068 <HAL_ADC_MspInit+0x134>)
 8000fe8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fec:	4a1e      	ldr	r2, [pc, #120]	; (8001068 <HAL_ADC_MspInit+0x134>)
 8000fee:	f043 0304 	orr.w	r3, r3, #4
 8000ff2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ff6:	4b1c      	ldr	r3, [pc, #112]	; (8001068 <HAL_ADC_MspInit+0x134>)
 8000ff8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ffc:	f003 0304 	and.w	r3, r3, #4
 8001000:	60fb      	str	r3, [r7, #12]
 8001002:	68fb      	ldr	r3, [r7, #12]
    PC0     ------> ADC3_INP10
    PC2_C     ------> ADC3_INP0
    PC2_C     ------> ADC3_INN1
    PC3_C     ------> ADC3_INP1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001004:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001008:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800100c:	2303      	movs	r3, #3
 800100e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001012:	2300      	movs	r3, #0
 8001014:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001018:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800101c:	4619      	mov	r1, r3
 800101e:	4813      	ldr	r0, [pc, #76]	; (800106c <HAL_ADC_MspInit+0x138>)
 8001020:	f002 fae4 	bl	80035ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001024:	2301      	movs	r3, #1
 8001026:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800102a:	2303      	movs	r3, #3
 800102c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001030:	2300      	movs	r3, #0
 8001032:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001036:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800103a:	4619      	mov	r1, r3
 800103c:	480c      	ldr	r0, [pc, #48]	; (8001070 <HAL_ADC_MspInit+0x13c>)
 800103e:	f002 fad5 	bl	80035ec <HAL_GPIO_Init>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8001042:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8001046:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800104a:	f001 f8b1 	bl	80021b0 <HAL_SYSCFG_AnalogSwitchConfig>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 800104e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8001052:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8001056:	f001 f8ab 	bl	80021b0 <HAL_SYSCFG_AnalogSwitchConfig>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800105a:	bf00      	nop
 800105c:	37f0      	adds	r7, #240	; 0xf0
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	58026000 	.word	0x58026000
 8001068:	58024400 	.word	0x58024400
 800106c:	58021400 	.word	0x58021400
 8001070:	58020800 	.word	0x58020800

08001074 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001074:	b480      	push	{r7}
 8001076:	b085      	sub	sp, #20
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a0b      	ldr	r2, [pc, #44]	; (80010b0 <HAL_CRC_MspInit+0x3c>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d10e      	bne.n	80010a4 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001086:	4b0b      	ldr	r3, [pc, #44]	; (80010b4 <HAL_CRC_MspInit+0x40>)
 8001088:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800108c:	4a09      	ldr	r2, [pc, #36]	; (80010b4 <HAL_CRC_MspInit+0x40>)
 800108e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001092:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001096:	4b07      	ldr	r3, [pc, #28]	; (80010b4 <HAL_CRC_MspInit+0x40>)
 8001098:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800109c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80010a0:	60fb      	str	r3, [r7, #12]
 80010a2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80010a4:	bf00      	nop
 80010a6:	3714      	adds	r7, #20
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr
 80010b0:	58024c00 	.word	0x58024c00
 80010b4:	58024400 	.word	0x58024400

080010b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b085      	sub	sp, #20
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a0b      	ldr	r2, [pc, #44]	; (80010f4 <HAL_TIM_Base_MspInit+0x3c>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d10e      	bne.n	80010e8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 80010ca:	4b0b      	ldr	r3, [pc, #44]	; (80010f8 <HAL_TIM_Base_MspInit+0x40>)
 80010cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80010d0:	4a09      	ldr	r2, [pc, #36]	; (80010f8 <HAL_TIM_Base_MspInit+0x40>)
 80010d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010d6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80010da:	4b07      	ldr	r3, [pc, #28]	; (80010f8 <HAL_TIM_Base_MspInit+0x40>)
 80010dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80010e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010e4:	60fb      	str	r3, [r7, #12]
 80010e6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80010e8:	bf00      	nop
 80010ea:	3714      	adds	r7, #20
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr
 80010f4:	40014400 	.word	0x40014400
 80010f8:	58024400 	.word	0x58024400

080010fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001100:	e7fe      	b.n	8001100 <NMI_Handler+0x4>

08001102 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001102:	b480      	push	{r7}
 8001104:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001106:	e7fe      	b.n	8001106 <HardFault_Handler+0x4>

08001108 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800110c:	e7fe      	b.n	800110c <MemManage_Handler+0x4>

0800110e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800110e:	b480      	push	{r7}
 8001110:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001112:	e7fe      	b.n	8001112 <BusFault_Handler+0x4>

08001114 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001118:	e7fe      	b.n	8001118 <UsageFault_Handler+0x4>

0800111a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800111a:	b480      	push	{r7}
 800111c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800111e:	bf00      	nop
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr

08001128 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800112c:	bf00      	nop
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr

08001136 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001136:	b480      	push	{r7}
 8001138:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800113a:	bf00      	nop
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr

08001144 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001148:	f000 ffe2 	bl	8002110 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800114c:	bf00      	nop
 800114e:	bd80      	pop	{r7, pc}

08001150 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001154:	4802      	ldr	r0, [pc, #8]	; (8001160 <OTG_FS_IRQHandler+0x10>)
 8001156:	f002 fd6b 	bl	8003c30 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800115a:	bf00      	nop
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	240021d0 	.word	0x240021d0

08001164 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b086      	sub	sp, #24
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800116c:	4a14      	ldr	r2, [pc, #80]	; (80011c0 <_sbrk+0x5c>)
 800116e:	4b15      	ldr	r3, [pc, #84]	; (80011c4 <_sbrk+0x60>)
 8001170:	1ad3      	subs	r3, r2, r3
 8001172:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001178:	4b13      	ldr	r3, [pc, #76]	; (80011c8 <_sbrk+0x64>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d102      	bne.n	8001186 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001180:	4b11      	ldr	r3, [pc, #68]	; (80011c8 <_sbrk+0x64>)
 8001182:	4a12      	ldr	r2, [pc, #72]	; (80011cc <_sbrk+0x68>)
 8001184:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001186:	4b10      	ldr	r3, [pc, #64]	; (80011c8 <_sbrk+0x64>)
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4413      	add	r3, r2
 800118e:	693a      	ldr	r2, [r7, #16]
 8001190:	429a      	cmp	r2, r3
 8001192:	d207      	bcs.n	80011a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001194:	f00e ffe2 	bl	801015c <__errno>
 8001198:	4603      	mov	r3, r0
 800119a:	220c      	movs	r2, #12
 800119c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800119e:	f04f 33ff 	mov.w	r3, #4294967295
 80011a2:	e009      	b.n	80011b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011a4:	4b08      	ldr	r3, [pc, #32]	; (80011c8 <_sbrk+0x64>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011aa:	4b07      	ldr	r3, [pc, #28]	; (80011c8 <_sbrk+0x64>)
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4413      	add	r3, r2
 80011b2:	4a05      	ldr	r2, [pc, #20]	; (80011c8 <_sbrk+0x64>)
 80011b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011b6:	68fb      	ldr	r3, [r7, #12]
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	3718      	adds	r7, #24
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	24080000 	.word	0x24080000
 80011c4:	00000800 	.word	0x00000800
 80011c8:	24000c90 	.word	0x24000c90
 80011cc:	20000000 	.word	0x20000000

080011d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80011d4:	4b37      	ldr	r3, [pc, #220]	; (80012b4 <SystemInit+0xe4>)
 80011d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011da:	4a36      	ldr	r2, [pc, #216]	; (80012b4 <SystemInit+0xe4>)
 80011dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80011e4:	4b34      	ldr	r3, [pc, #208]	; (80012b8 <SystemInit+0xe8>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f003 030f 	and.w	r3, r3, #15
 80011ec:	2b06      	cmp	r3, #6
 80011ee:	d807      	bhi.n	8001200 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80011f0:	4b31      	ldr	r3, [pc, #196]	; (80012b8 <SystemInit+0xe8>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f023 030f 	bic.w	r3, r3, #15
 80011f8:	4a2f      	ldr	r2, [pc, #188]	; (80012b8 <SystemInit+0xe8>)
 80011fa:	f043 0307 	orr.w	r3, r3, #7
 80011fe:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001200:	4b2e      	ldr	r3, [pc, #184]	; (80012bc <SystemInit+0xec>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a2d      	ldr	r2, [pc, #180]	; (80012bc <SystemInit+0xec>)
 8001206:	f043 0301 	orr.w	r3, r3, #1
 800120a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800120c:	4b2b      	ldr	r3, [pc, #172]	; (80012bc <SystemInit+0xec>)
 800120e:	2200      	movs	r2, #0
 8001210:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001212:	4b2a      	ldr	r3, [pc, #168]	; (80012bc <SystemInit+0xec>)
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	4929      	ldr	r1, [pc, #164]	; (80012bc <SystemInit+0xec>)
 8001218:	4b29      	ldr	r3, [pc, #164]	; (80012c0 <SystemInit+0xf0>)
 800121a:	4013      	ands	r3, r2
 800121c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800121e:	4b26      	ldr	r3, [pc, #152]	; (80012b8 <SystemInit+0xe8>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f003 0308 	and.w	r3, r3, #8
 8001226:	2b00      	cmp	r3, #0
 8001228:	d007      	beq.n	800123a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800122a:	4b23      	ldr	r3, [pc, #140]	; (80012b8 <SystemInit+0xe8>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f023 030f 	bic.w	r3, r3, #15
 8001232:	4a21      	ldr	r2, [pc, #132]	; (80012b8 <SystemInit+0xe8>)
 8001234:	f043 0307 	orr.w	r3, r3, #7
 8001238:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800123a:	4b20      	ldr	r3, [pc, #128]	; (80012bc <SystemInit+0xec>)
 800123c:	2200      	movs	r2, #0
 800123e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001240:	4b1e      	ldr	r3, [pc, #120]	; (80012bc <SystemInit+0xec>)
 8001242:	2200      	movs	r2, #0
 8001244:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001246:	4b1d      	ldr	r3, [pc, #116]	; (80012bc <SystemInit+0xec>)
 8001248:	2200      	movs	r2, #0
 800124a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800124c:	4b1b      	ldr	r3, [pc, #108]	; (80012bc <SystemInit+0xec>)
 800124e:	4a1d      	ldr	r2, [pc, #116]	; (80012c4 <SystemInit+0xf4>)
 8001250:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001252:	4b1a      	ldr	r3, [pc, #104]	; (80012bc <SystemInit+0xec>)
 8001254:	4a1c      	ldr	r2, [pc, #112]	; (80012c8 <SystemInit+0xf8>)
 8001256:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001258:	4b18      	ldr	r3, [pc, #96]	; (80012bc <SystemInit+0xec>)
 800125a:	4a1c      	ldr	r2, [pc, #112]	; (80012cc <SystemInit+0xfc>)
 800125c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800125e:	4b17      	ldr	r3, [pc, #92]	; (80012bc <SystemInit+0xec>)
 8001260:	2200      	movs	r2, #0
 8001262:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001264:	4b15      	ldr	r3, [pc, #84]	; (80012bc <SystemInit+0xec>)
 8001266:	4a19      	ldr	r2, [pc, #100]	; (80012cc <SystemInit+0xfc>)
 8001268:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800126a:	4b14      	ldr	r3, [pc, #80]	; (80012bc <SystemInit+0xec>)
 800126c:	2200      	movs	r2, #0
 800126e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001270:	4b12      	ldr	r3, [pc, #72]	; (80012bc <SystemInit+0xec>)
 8001272:	4a16      	ldr	r2, [pc, #88]	; (80012cc <SystemInit+0xfc>)
 8001274:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001276:	4b11      	ldr	r3, [pc, #68]	; (80012bc <SystemInit+0xec>)
 8001278:	2200      	movs	r2, #0
 800127a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800127c:	4b0f      	ldr	r3, [pc, #60]	; (80012bc <SystemInit+0xec>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a0e      	ldr	r2, [pc, #56]	; (80012bc <SystemInit+0xec>)
 8001282:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001286:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001288:	4b0c      	ldr	r3, [pc, #48]	; (80012bc <SystemInit+0xec>)
 800128a:	2200      	movs	r2, #0
 800128c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800128e:	4b10      	ldr	r3, [pc, #64]	; (80012d0 <SystemInit+0x100>)
 8001290:	681a      	ldr	r2, [r3, #0]
 8001292:	4b10      	ldr	r3, [pc, #64]	; (80012d4 <SystemInit+0x104>)
 8001294:	4013      	ands	r3, r2
 8001296:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800129a:	d202      	bcs.n	80012a2 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800129c:	4b0e      	ldr	r3, [pc, #56]	; (80012d8 <SystemInit+0x108>)
 800129e:	2201      	movs	r2, #1
 80012a0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80012a2:	4b0e      	ldr	r3, [pc, #56]	; (80012dc <SystemInit+0x10c>)
 80012a4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80012a8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80012aa:	bf00      	nop
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr
 80012b4:	e000ed00 	.word	0xe000ed00
 80012b8:	52002000 	.word	0x52002000
 80012bc:	58024400 	.word	0x58024400
 80012c0:	eaf6ed7f 	.word	0xeaf6ed7f
 80012c4:	02020200 	.word	0x02020200
 80012c8:	01ff0000 	.word	0x01ff0000
 80012cc:	01010280 	.word	0x01010280
 80012d0:	5c001000 	.word	0x5c001000
 80012d4:	ffff0000 	.word	0xffff0000
 80012d8:	51008108 	.word	0x51008108
 80012dc:	52004000 	.word	0x52004000

080012e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80012e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001318 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80012e4:	f7ff ff74 	bl	80011d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012e8:	480c      	ldr	r0, [pc, #48]	; (800131c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80012ea:	490d      	ldr	r1, [pc, #52]	; (8001320 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80012ec:	4a0d      	ldr	r2, [pc, #52]	; (8001324 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80012ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012f0:	e002      	b.n	80012f8 <LoopCopyDataInit>

080012f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012f6:	3304      	adds	r3, #4

080012f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012fc:	d3f9      	bcc.n	80012f2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012fe:	4a0a      	ldr	r2, [pc, #40]	; (8001328 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001300:	4c0a      	ldr	r4, [pc, #40]	; (800132c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001302:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001304:	e001      	b.n	800130a <LoopFillZerobss>

08001306 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001306:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001308:	3204      	adds	r2, #4

0800130a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800130a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800130c:	d3fb      	bcc.n	8001306 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800130e:	f00e ff2b 	bl	8010168 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001312:	f7ff f83d 	bl	8000390 <main>
  bx  lr
 8001316:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001318:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800131c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001320:	24000b90 	.word	0x24000b90
  ldr r2, =_sidata
 8001324:	08011874 	.word	0x08011874
  ldr r2, =_sbss
 8001328:	24000ba0 	.word	0x24000ba0
  ldr r4, =_ebss
 800132c:	24002b10 	.word	0x24002b10

08001330 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001330:	e7fe      	b.n	8001330 <ADC3_IRQHandler>

08001332 <MT25TL01G_GetFlashInfo>:
  * @brief  Return the configuration of the QSPI memory.
  * @param  pInfo pointer on the configuration structure
  * @retval QSPI memory status
  */
int32_t MT25TL01G_GetFlashInfo(MT25TL01G_Info_t *pInfo)
{
 8001332:	b480      	push	{r7}
 8001334:	b083      	sub	sp, #12
 8001336:	af00      	add	r7, sp, #0
 8001338:	6078      	str	r0, [r7, #4]
  pInfo->FlashSize          = MT25TL01G_FLASH_SIZE;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001340:	601a      	str	r2, [r3, #0]
  pInfo->EraseSectorSize    = (2 * MT25TL01G_SUBSECTOR_SIZE);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001348:	605a      	str	r2, [r3, #4]
  pInfo->ProgPageSize       = MT25TL01G_PAGE_SIZE;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001350:	60da      	str	r2, [r3, #12]
  pInfo->EraseSectorsNumber = (MT25TL01G_FLASH_SIZE/pInfo->EraseSectorSize);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800135a:	fbb2 f2f3 	udiv	r2, r2, r3
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	609a      	str	r2, [r3, #8]
  pInfo->ProgPagesNumber    = (MT25TL01G_FLASH_SIZE/pInfo->ProgPageSize);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	68db      	ldr	r3, [r3, #12]
 8001366:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800136a:	fbb2 f2f3 	udiv	r2, r2, r3
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	611a      	str	r2, [r3, #16]
  return MT25TL01G_OK;
 8001372:	2300      	movs	r3, #0
}
 8001374:	4618      	mov	r0, r3
 8001376:	370c      	adds	r7, #12
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr

08001380 <MT25TL01G_Enter4BytesAddressMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_Enter4BytesAddressMode(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b090      	sub	sp, #64	; 0x40
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	460b      	mov	r3, r1
 800138a:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef s_command;

  /* Initialize the command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800138c:	78fb      	ldrb	r3, [r7, #3]
 800138e:	2b03      	cmp	r3, #3
 8001390:	d102      	bne.n	8001398 <MT25TL01G_Enter4BytesAddressMode+0x18>
 8001392:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001396:	e001      	b.n	800139c <MT25TL01G_Enter4BytesAddressMode+0x1c>
 8001398:	f44f 7380 	mov.w	r3, #256	; 0x100
 800139c:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_ENTER_4_BYTE_ADDR_MODE_CMD;
 800139e:	23b7      	movs	r3, #183	; 0xb7
 80013a0:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80013a2:	2300      	movs	r3, #0
 80013a4:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80013a6:	2300      	movs	r3, #0
 80013a8:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 80013aa:	2300      	movs	r3, #0
 80013ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 80013ae:	2300      	movs	r3, #0
 80013b0:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80013b2:	2300      	movs	r3, #0
 80013b4:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80013b6:	2300      	movs	r3, #0
 80013b8:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80013ba:	2300      	movs	r3, #0
 80013bc:	63fb      	str	r3, [r7, #60]	; 0x3c

  /*write enable */
  if( MT25TL01G_WriteEnable(Ctx,Mode)!=MT25TL01G_OK)
 80013be:	78fb      	ldrb	r3, [r7, #3]
 80013c0:	4619      	mov	r1, r3
 80013c2:	6878      	ldr	r0, [r7, #4]
 80013c4:	f000 f860 	bl	8001488 <MT25TL01G_WriteEnable>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d002      	beq.n	80013d4 <MT25TL01G_Enter4BytesAddressMode+0x54>
  {
    return MT25TL01G_ERROR_COMMAND;
 80013ce:	f06f 0301 	mvn.w	r3, #1
 80013d2:	e019      	b.n	8001408 <MT25TL01G_Enter4BytesAddressMode+0x88>
  }
  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80013d4:	f107 0308 	add.w	r3, r7, #8
 80013d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80013dc:	4619      	mov	r1, r3
 80013de:	6878      	ldr	r0, [r7, #4]
 80013e0:	f003 fe4e 	bl	8005080 <HAL_QSPI_Command>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d002      	beq.n	80013f0 <MT25TL01G_Enter4BytesAddressMode+0x70>
  {
    return MT25TL01G_ERROR_COMMAND;
 80013ea:	f06f 0301 	mvn.w	r3, #1
 80013ee:	e00b      	b.n	8001408 <MT25TL01G_Enter4BytesAddressMode+0x88>
  }

  /* Configure automatic polling mode to wait the memory is ready */
  else if(MT25TL01G_AutoPollingMemReady(Ctx,Mode)!=MT25TL01G_OK)
 80013f0:	78fb      	ldrb	r3, [r7, #3]
 80013f2:	4619      	mov	r1, r3
 80013f4:	6878      	ldr	r0, [r7, #4]
 80013f6:	f000 f80b 	bl	8001410 <MT25TL01G_AutoPollingMemReady>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d002      	beq.n	8001406 <MT25TL01G_Enter4BytesAddressMode+0x86>
  {
    return MT25TL01G_ERROR_COMMAND;
 8001400:	f06f 0301 	mvn.w	r3, #1
 8001404:	e000      	b.n	8001408 <MT25TL01G_Enter4BytesAddressMode+0x88>
  }

  return MT25TL01G_OK;
 8001406:	2300      	movs	r3, #0
}
 8001408:	4618      	mov	r0, r3
 800140a:	3740      	adds	r7, #64	; 0x40
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}

08001410 <MT25TL01G_AutoPollingMemReady>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_AutoPollingMemReady(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b096      	sub	sp, #88	; 0x58
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
 8001418:	460b      	mov	r3, r1
 800141a:	70fb      	strb	r3, [r7, #3]

  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800141c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001420:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
 8001422:	2305      	movs	r3, #5
 8001424:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8001426:	2300      	movs	r3, #0
 8001428:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800142a:	2300      	movs	r3, #0
 800142c:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_4_LINES;
 800142e:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8001432:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 2;
 8001434:	2302      	movs	r3, #2
 8001436:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8001438:	2300      	movs	r3, #0
 800143a:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800143c:	2300      	movs	r3, #0
 800143e:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001440:	2300      	movs	r3, #0
 8001442:	657b      	str	r3, [r7, #84]	; 0x54

  s_config.Match           = 0;
 8001444:	2300      	movs	r3, #0
 8001446:	60bb      	str	r3, [r7, #8]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8001448:	2300      	movs	r3, #0
 800144a:	61bb      	str	r3, [r7, #24]
  s_config.Interval        = 0x10;
 800144c:	2310      	movs	r3, #16
 800144e:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8001450:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001454:	61fb      	str	r3, [r7, #28]
  s_config.Mask            = MT25TL01G_SR_WIP | (MT25TL01G_SR_WIP <<8);
 8001456:	f240 1301 	movw	r3, #257	; 0x101
 800145a:	60fb      	str	r3, [r7, #12]
  s_config.StatusBytesSize = 2;
 800145c:	2302      	movs	r3, #2
 800145e:	617b      	str	r3, [r7, #20]

  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001460:	f107 0208 	add.w	r2, r7, #8
 8001464:	f107 0120 	add.w	r1, r7, #32
 8001468:	f241 3388 	movw	r3, #5000	; 0x1388
 800146c:	6878      	ldr	r0, [r7, #4]
 800146e:	f003 ff94 	bl	800539a <HAL_QSPI_AutoPolling>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d002      	beq.n	800147e <MT25TL01G_AutoPollingMemReady+0x6e>
  {
    return MT25TL01G_ERROR_AUTOPOLLING;
 8001478:	f06f 0304 	mvn.w	r3, #4
 800147c:	e000      	b.n	8001480 <MT25TL01G_AutoPollingMemReady+0x70>
  }

  return MT25TL01G_OK;
 800147e:	2300      	movs	r3, #0

}
 8001480:	4618      	mov	r0, r3
 8001482:	3758      	adds	r7, #88	; 0x58
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}

08001488 <MT25TL01G_WriteEnable>:
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */

int32_t MT25TL01G_WriteEnable(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b096      	sub	sp, #88	; 0x58
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	460b      	mov	r3, r1
 8001492:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Enable write operations */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8001494:	78fb      	ldrb	r3, [r7, #3]
 8001496:	2b03      	cmp	r3, #3
 8001498:	d102      	bne.n	80014a0 <MT25TL01G_WriteEnable+0x18>
 800149a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800149e:	e001      	b.n	80014a4 <MT25TL01G_WriteEnable+0x1c>
 80014a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014a4:	63bb      	str	r3, [r7, #56]	; 0x38

  s_command.Instruction       = MT25TL01G_WRITE_ENABLE_CMD;
 80014a6:	2306      	movs	r3, #6
 80014a8:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80014aa:	2300      	movs	r3, #0
 80014ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80014ae:	2300      	movs	r3, #0
 80014b0:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_NONE;
 80014b2:	2300      	movs	r3, #0
 80014b4:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 0;
 80014b6:	2300      	movs	r3, #0
 80014b8:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80014ba:	2300      	movs	r3, #0
 80014bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80014be:	2300      	movs	r3, #0
 80014c0:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80014c2:	2300      	movs	r3, #0
 80014c4:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80014c6:	f107 0320 	add.w	r3, r7, #32
 80014ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80014ce:	4619      	mov	r1, r3
 80014d0:	6878      	ldr	r0, [r7, #4]
 80014d2:	f003 fdd5 	bl	8005080 <HAL_QSPI_Command>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d002      	beq.n	80014e2 <MT25TL01G_WriteEnable+0x5a>
  {
    return MT25TL01G_ERROR_COMMAND;
 80014dc:	f06f 0301 	mvn.w	r3, #1
 80014e0:	e029      	b.n	8001536 <MT25TL01G_WriteEnable+0xae>
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_config.Match           = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 80014e2:	f240 2302 	movw	r3, #514	; 0x202
 80014e6:	60bb      	str	r3, [r7, #8]
  s_config.Mask            = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 80014e8:	f240 2302 	movw	r3, #514	; 0x202
 80014ec:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 80014ee:	2300      	movs	r3, #0
 80014f0:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 2;
 80014f2:	2302      	movs	r3, #2
 80014f4:	617b      	str	r3, [r7, #20]
  s_config.Interval        = 0x10;
 80014f6:	2310      	movs	r3, #16
 80014f8:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 80014fa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80014fe:	61fb      	str	r3, [r7, #28]

  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 8001500:	2305      	movs	r3, #5
 8001502:	623b      	str	r3, [r7, #32]
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 8001504:	78fb      	ldrb	r3, [r7, #3]
 8001506:	2b03      	cmp	r3, #3
 8001508:	d102      	bne.n	8001510 <MT25TL01G_WriteEnable+0x88>
 800150a:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800150e:	e001      	b.n	8001514 <MT25TL01G_WriteEnable+0x8c>
 8001510:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001514:	647b      	str	r3, [r7, #68]	; 0x44


  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001516:	f107 0208 	add.w	r2, r7, #8
 800151a:	f107 0120 	add.w	r1, r7, #32
 800151e:	f241 3388 	movw	r3, #5000	; 0x1388
 8001522:	6878      	ldr	r0, [r7, #4]
 8001524:	f003 ff39 	bl	800539a <HAL_QSPI_AutoPolling>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d002      	beq.n	8001534 <MT25TL01G_WriteEnable+0xac>
  {
    return MT25TL01G_ERROR_AUTOPOLLING;
 800152e:	f06f 0304 	mvn.w	r3, #4
 8001532:	e000      	b.n	8001536 <MT25TL01G_WriteEnable+0xae>
  }

  return MT25TL01G_OK;
 8001534:	2300      	movs	r3, #0
}
 8001536:	4618      	mov	r0, r3
 8001538:	3758      	adds	r7, #88	; 0x58
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}

0800153e <MT25TL01G_EnterQPIMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_EnterQPIMode(QSPI_HandleTypeDef *Ctx)
{
 800153e:	b580      	push	{r7, lr}
 8001540:	b090      	sub	sp, #64	; 0x40
 8001542:	af00      	add	r7, sp, #0
 8001544:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;

  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001546:	f44f 7380 	mov.w	r3, #256	; 0x100
 800154a:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_ENTER_QUAD_CMD;
 800154c:	2335      	movs	r3, #53	; 0x35
 800154e:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8001550:	2300      	movs	r3, #0
 8001552:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001554:	2300      	movs	r3, #0
 8001556:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 8001558:	2300      	movs	r3, #0
 800155a:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 800155c:	2300      	movs	r3, #0
 800155e:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8001560:	2300      	movs	r3, #0
 8001562:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8001564:	2300      	movs	r3, #0
 8001566:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001568:	2300      	movs	r3, #0
 800156a:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800156c:	f107 0308 	add.w	r3, r7, #8
 8001570:	f241 3288 	movw	r2, #5000	; 0x1388
 8001574:	4619      	mov	r1, r3
 8001576:	6878      	ldr	r0, [r7, #4]
 8001578:	f003 fd82 	bl	8005080 <HAL_QSPI_Command>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d002      	beq.n	8001588 <MT25TL01G_EnterQPIMode+0x4a>
  {
    return MT25TL01G_ERROR_COMMAND;
 8001582:	f06f 0301 	mvn.w	r3, #1
 8001586:	e000      	b.n	800158a <MT25TL01G_EnterQPIMode+0x4c>
  }

  return MT25TL01G_OK;
 8001588:	2300      	movs	r3, #0
}
 800158a:	4618      	mov	r0, r3
 800158c:	3740      	adds	r7, #64	; 0x40
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}

08001592 <MT25TL01G_ExitQPIMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_ExitQPIMode(QSPI_HandleTypeDef *Ctx)
{
 8001592:	b580      	push	{r7, lr}
 8001594:	b090      	sub	sp, #64	; 0x40
 8001596:	af00      	add	r7, sp, #0
 8001598:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;

  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800159a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800159e:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_EXIT_QUAD_CMD;
 80015a0:	23f5      	movs	r3, #245	; 0xf5
 80015a2:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80015a4:	2300      	movs	r3, #0
 80015a6:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80015a8:	2300      	movs	r3, #0
 80015aa:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 80015ac:	2300      	movs	r3, #0
 80015ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 80015b0:	2300      	movs	r3, #0
 80015b2:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80015b4:	2300      	movs	r3, #0
 80015b6:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80015b8:	2300      	movs	r3, #0
 80015ba:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80015bc:	2300      	movs	r3, #0
 80015be:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80015c0:	f107 0308 	add.w	r3, r7, #8
 80015c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80015c8:	4619      	mov	r1, r3
 80015ca:	6878      	ldr	r0, [r7, #4]
 80015cc:	f003 fd58 	bl	8005080 <HAL_QSPI_Command>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d002      	beq.n	80015dc <MT25TL01G_ExitQPIMode+0x4a>
  {
    return MT25TL01G_ERROR_COMMAND;
 80015d6:	f06f 0301 	mvn.w	r3, #1
 80015da:	e000      	b.n	80015de <MT25TL01G_ExitQPIMode+0x4c>
  }

  return MT25TL01G_OK;
 80015dc:	2300      	movs	r3, #0
}
 80015de:	4618      	mov	r0, r3
 80015e0:	3740      	adds	r7, #64	; 0x40
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
	...

080015e8 <MT25TL01G_EnableMemoryMappedModeDTR>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_EnableMemoryMappedModeDTR(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b092      	sub	sp, #72	; 0x48
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
 80015f0:	460b      	mov	r3, r1
 80015f2:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;
  switch(Mode)
 80015f4:	78fb      	ldrb	r3, [r7, #3]
 80015f6:	2b03      	cmp	r3, #3
 80015f8:	d83a      	bhi.n	8001670 <MT25TL01G_EnableMemoryMappedModeDTR+0x88>
 80015fa:	a201      	add	r2, pc, #4	; (adr r2, 8001600 <MT25TL01G_EnableMemoryMappedModeDTR+0x18>)
 80015fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001600:	08001611 	.word	0x08001611
 8001604:	08001629 	.word	0x08001629
 8001608:	08001641 	.word	0x08001641
 800160c:	08001659 	.word	0x08001659
  {
  case MT25TL01G_SPI_MODE:                /* 1-1-1 commands, Power on H/W default setting */
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001610:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001614:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_DTR_CMD;
 8001616:	230e      	movs	r3, #14
 8001618:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 800161a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800161e:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_1_LINE;
 8001620:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001624:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 8001626:	e023      	b.n	8001670 <MT25TL01G_EnableMemoryMappedModeDTR+0x88>
  case MT25TL01G_SPI_2IO_MODE:           /* 1-1-2 read commands */

    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001628:	f44f 7380 	mov.w	r3, #256	; 0x100
 800162c:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_DUAL_OUT_FAST_READ_DTR_CMD;
 800162e:	233d      	movs	r3, #61	; 0x3d
 8001630:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 8001632:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001636:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_2_LINES;
 8001638:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800163c:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 800163e:	e017      	b.n	8001670 <MT25TL01G_EnableMemoryMappedModeDTR+0x88>
  case MT25TL01G_SPI_4IO_MODE:             /* 1-4-4 read commands */

    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001640:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001644:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_DTR_CMD;
 8001646:	23ee      	movs	r3, #238	; 0xee
 8001648:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 800164a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800164e:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8001650:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8001654:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 8001656:	e00b      	b.n	8001670 <MT25TL01G_EnableMemoryMappedModeDTR+0x88>
  case MT25TL01G_QPI_MODE:                 /* 4-4-4 commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8001658:	f44f 7340 	mov.w	r3, #768	; 0x300
 800165c:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
 800165e:	23ed      	movs	r3, #237	; 0xed
 8001660:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8001662:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001666:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8001668:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800166c:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 800166e:	bf00      	nop
  }
  /* Configure the command for the read instruction */
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8001670:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001674:	61fb      	str	r3, [r7, #28]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001676:	2300      	movs	r3, #0
 8001678:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ_QUAD_DTR;
 800167a:	2308      	movs	r3, #8
 800167c:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.DdrMode           = QSPI_DDR_MODE_ENABLE;
 800167e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001682:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 8001684:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001688:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800168a:	2300      	movs	r3, #0
 800168c:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
 800168e:	2300      	movs	r3, #0
 8001690:	60fb      	str	r3, [r7, #12]
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 8001692:	2300      	movs	r3, #0
 8001694:	60bb      	str	r3, [r7, #8]

  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8001696:	f107 0208 	add.w	r2, r7, #8
 800169a:	f107 0310 	add.w	r3, r7, #16
 800169e:	4619      	mov	r1, r3
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	f003 fef1 	bl	8005488 <HAL_QSPI_MemoryMapped>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d002      	beq.n	80016b2 <MT25TL01G_EnableMemoryMappedModeDTR+0xca>
  {
    return MT25TL01G_ERROR_MEMORYMAPPED;
 80016ac:	f06f 0305 	mvn.w	r3, #5
 80016b0:	e000      	b.n	80016b4 <MT25TL01G_EnableMemoryMappedModeDTR+0xcc>
  }

  return MT25TL01G_OK;
 80016b2:	2300      	movs	r3, #0
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	3748      	adds	r7, #72	; 0x48
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}

080016bc <MT25TL01G_EnableMemoryMappedModeSTR>:
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */

int32_t MT25TL01G_EnableMemoryMappedModeSTR(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b092      	sub	sp, #72	; 0x48
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
 80016c4:	460b      	mov	r3, r1
 80016c6:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;
  switch(Mode)
 80016c8:	78fb      	ldrb	r3, [r7, #3]
 80016ca:	2b03      	cmp	r3, #3
 80016cc:	d83a      	bhi.n	8001744 <MT25TL01G_EnableMemoryMappedModeSTR+0x88>
 80016ce:	a201      	add	r2, pc, #4	; (adr r2, 80016d4 <MT25TL01G_EnableMemoryMappedModeSTR+0x18>)
 80016d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016d4:	080016e5 	.word	0x080016e5
 80016d8:	080016fd 	.word	0x080016fd
 80016dc:	08001715 	.word	0x08001715
 80016e0:	0800172d 	.word	0x0800172d
  {
  case MT25TL01G_SPI_MODE:           /* 1-1-1 read commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80016e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016e8:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_ADDR_CMD;
 80016ea:	230c      	movs	r3, #12
 80016ec:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 80016ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_1_LINE;
 80016f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80016f8:	637b      	str	r3, [r7, #52]	; 0x34


    break;
 80016fa:	e023      	b.n	8001744 <MT25TL01G_EnableMemoryMappedModeSTR+0x88>
  case MT25TL01G_SPI_2IO_MODE:           /* 1-2-2 read commands */

    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80016fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001700:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_DUAL_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 8001702:	23bc      	movs	r3, #188	; 0xbc
 8001704:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_2_LINES;
 8001706:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800170a:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_2_LINES;
 800170c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001710:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 8001712:	e017      	b.n	8001744 <MT25TL01G_EnableMemoryMappedModeSTR+0x88>

  case MT25TL01G_SPI_4IO_MODE:             /* 1-4-4 read commands */

    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001714:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001718:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 800171a:	23ec      	movs	r3, #236	; 0xec
 800171c:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 800171e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001722:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8001724:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8001728:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 800172a:	e00b      	b.n	8001744 <MT25TL01G_EnableMemoryMappedModeSTR+0x88>

  case MT25TL01G_QPI_MODE:                 /* 4-4-4 commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800172c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001730:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
 8001732:	23eb      	movs	r3, #235	; 0xeb
 8001734:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8001736:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800173a:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_4_LINES;
 800173c:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8001740:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 8001742:	bf00      	nop

  }
  /* Configure the command for the read instruction */
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ;
 8001744:	2308      	movs	r3, #8
 8001746:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8001748:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800174c:	61fb      	str	r3, [r7, #28]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800174e:	2300      	movs	r3, #0
 8001750:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8001752:	2300      	movs	r3, #0
 8001754:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8001756:	2300      	movs	r3, #0
 8001758:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800175a:	2300      	movs	r3, #0
 800175c:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
 800175e:	2300      	movs	r3, #0
 8001760:	60fb      	str	r3, [r7, #12]
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 8001762:	2300      	movs	r3, #0
 8001764:	60bb      	str	r3, [r7, #8]

  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8001766:	f107 0208 	add.w	r2, r7, #8
 800176a:	f107 0310 	add.w	r3, r7, #16
 800176e:	4619      	mov	r1, r3
 8001770:	6878      	ldr	r0, [r7, #4]
 8001772:	f003 fe89 	bl	8005488 <HAL_QSPI_MemoryMapped>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d002      	beq.n	8001782 <MT25TL01G_EnableMemoryMappedModeSTR+0xc6>
  {
    return MT25TL01G_ERROR_MEMORYMAPPED;
 800177c:	f06f 0305 	mvn.w	r3, #5
 8001780:	e000      	b.n	8001784 <MT25TL01G_EnableMemoryMappedModeSTR+0xc8>
  }

  return MT25TL01G_OK;
 8001782:	2300      	movs	r3, #0
}
 8001784:	4618      	mov	r0, r3
 8001786:	3748      	adds	r7, #72	; 0x48
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}

0800178c <MT25TL01G_ResetEnable>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_ResetEnable(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b090      	sub	sp, #64	; 0x40
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
 8001794:	460b      	mov	r3, r1
 8001796:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8001798:	78fb      	ldrb	r3, [r7, #3]
 800179a:	2b03      	cmp	r3, #3
 800179c:	d102      	bne.n	80017a4 <MT25TL01G_ResetEnable+0x18>
 800179e:	f44f 7340 	mov.w	r3, #768	; 0x300
 80017a2:	e001      	b.n	80017a8 <MT25TL01G_ResetEnable+0x1c>
 80017a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017a8:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_RESET_ENABLE_CMD;
 80017aa:	2366      	movs	r3, #102	; 0x66
 80017ac:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80017ae:	2300      	movs	r3, #0
 80017b0:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80017b2:	2300      	movs	r3, #0
 80017b4:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 80017b6:	2300      	movs	r3, #0
 80017b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 80017ba:	2300      	movs	r3, #0
 80017bc:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80017be:	2300      	movs	r3, #0
 80017c0:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80017c2:	2300      	movs	r3, #0
 80017c4:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80017c6:	2300      	movs	r3, #0
 80017c8:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80017ca:	f107 0308 	add.w	r3, r7, #8
 80017ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80017d2:	4619      	mov	r1, r3
 80017d4:	6878      	ldr	r0, [r7, #4]
 80017d6:	f003 fc53 	bl	8005080 <HAL_QSPI_Command>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d002      	beq.n	80017e6 <MT25TL01G_ResetEnable+0x5a>
  {
    return MT25TL01G_ERROR_COMMAND;
 80017e0:	f06f 0301 	mvn.w	r3, #1
 80017e4:	e000      	b.n	80017e8 <MT25TL01G_ResetEnable+0x5c>
  }

  return MT25TL01G_OK;
 80017e6:	2300      	movs	r3, #0
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	3740      	adds	r7, #64	; 0x40
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}

080017f0 <MT25TL01G_ResetMemory>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_ResetMemory(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b090      	sub	sp, #64	; 0x40
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	460b      	mov	r3, r1
 80017fa:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80017fc:	78fb      	ldrb	r3, [r7, #3]
 80017fe:	2b03      	cmp	r3, #3
 8001800:	d102      	bne.n	8001808 <MT25TL01G_ResetMemory+0x18>
 8001802:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001806:	e001      	b.n	800180c <MT25TL01G_ResetMemory+0x1c>
 8001808:	f44f 7380 	mov.w	r3, #256	; 0x100
 800180c:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_RESET_MEMORY_CMD ;
 800180e:	2399      	movs	r3, #153	; 0x99
 8001810:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8001812:	2300      	movs	r3, #0
 8001814:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001816:	2300      	movs	r3, #0
 8001818:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 800181a:	2300      	movs	r3, #0
 800181c:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 800181e:	2300      	movs	r3, #0
 8001820:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8001822:	2300      	movs	r3, #0
 8001824:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8001826:	2300      	movs	r3, #0
 8001828:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800182a:	2300      	movs	r3, #0
 800182c:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800182e:	f107 0308 	add.w	r3, r7, #8
 8001832:	f241 3288 	movw	r2, #5000	; 0x1388
 8001836:	4619      	mov	r1, r3
 8001838:	6878      	ldr	r0, [r7, #4]
 800183a:	f003 fc21 	bl	8005080 <HAL_QSPI_Command>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d002      	beq.n	800184a <MT25TL01G_ResetMemory+0x5a>
  {
    return MT25TL01G_ERROR_COMMAND;
 8001844:	f06f 0301 	mvn.w	r3, #1
 8001848:	e000      	b.n	800184c <MT25TL01G_ResetMemory+0x5c>
  }

  return MT25TL01G_OK;
 800184a:	2300      	movs	r3, #0
}
 800184c:	4618      	mov	r0, r3
 800184e:	3740      	adds	r7, #64	; 0x40
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}

08001854 <BSP_QSPI_Init>:
  * @param  Instance   QSPI Instance
  * @param  Init       QSPI Init structure
  * @retval BSP status
  */
int32_t BSP_QSPI_Init(uint32_t Instance, BSP_QSPI_Init_t *Init)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b090      	sub	sp, #64	; 0x40
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800185e:	2300      	movs	r3, #0
 8001860:	63fb      	str	r3, [r7, #60]	; 0x3c
  3: For DTR mode to reach max 54Mhz
  */
  static const uint32_t PrescalerTab[2] = {1, 3};

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d003      	beq.n	8001870 <BSP_QSPI_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001868:	f06f 0301 	mvn.w	r3, #1
 800186c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800186e:	e090      	b.n	8001992 <BSP_QSPI_Init+0x13e>
  }
  else
  {
    /* Check if instance is already initialized */
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_NONE)
 8001870:	494a      	ldr	r1, [pc, #296]	; (800199c <BSP_QSPI_Init+0x148>)
 8001872:	687a      	ldr	r2, [r7, #4]
 8001874:	4613      	mov	r3, r2
 8001876:	005b      	lsls	r3, r3, #1
 8001878:	4413      	add	r3, r2
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	440b      	add	r3, r1
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	2b00      	cmp	r3, #0
 8001882:	f040 8086 	bne.w	8001992 <BSP_QSPI_Init+0x13e>
          ret = BSP_ERROR_PERIPH_FAILURE;
        }
      }
#else
      /* Msp QSPI initialization */
      QSPI_MspInit(&hqspi);
 8001886:	4846      	ldr	r0, [pc, #280]	; (80019a0 <BSP_QSPI_Init+0x14c>)
 8001888:	f000 f99c 	bl	8001bc4 <QSPI_MspInit>
#endif /* USE_HAL_QSPI_REGISTER_CALLBACKS */

      if(ret == BSP_ERROR_NONE)
 800188c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800188e:	2b00      	cmp	r3, #0
 8001890:	d17f      	bne.n	8001992 <BSP_QSPI_Init+0x13e>
      {
        /* STM32 QSPI interface initialization */
        (void)MT25TL01G_GetFlashInfo(&pInfo);
 8001892:	f107 031c 	add.w	r3, r7, #28
 8001896:	4618      	mov	r0, r3
 8001898:	f7ff fd4b 	bl	8001332 <MT25TL01G_GetFlashInfo>
        qspi_init.ClockPrescaler = PrescalerTab[Init->TransferRate];
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	785b      	ldrb	r3, [r3, #1]
 80018a0:	461a      	mov	r2, r3
 80018a2:	4b40      	ldr	r3, [pc, #256]	; (80019a4 <BSP_QSPI_Init+0x150>)
 80018a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018a8:	613b      	str	r3, [r7, #16]
        qspi_init.DualFlashMode  = QSPI_DUALFLASH_ENABLE;
 80018aa:	2340      	movs	r3, #64	; 0x40
 80018ac:	61bb      	str	r3, [r7, #24]
        qspi_init.FlashSize      = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize) - 1U;
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018b4:	fa93 f3a3 	rbit	r3, r3
 80018b8:	633b      	str	r3, [r7, #48]	; 0x30
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80018ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018bc:	63bb      	str	r3, [r7, #56]	; 0x38
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80018be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d101      	bne.n	80018c8 <BSP_QSPI_Init+0x74>
  {
    return 32U;
 80018c4:	2320      	movs	r3, #32
 80018c6:	e003      	b.n	80018d0 <BSP_QSPI_Init+0x7c>
  }
  return __builtin_clz(value);
 80018c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018ca:	fab3 f383 	clz	r3, r3
 80018ce:	b2db      	uxtb	r3, r3
 80018d0:	3b01      	subs	r3, #1
 80018d2:	60fb      	str	r3, [r7, #12]
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	785b      	ldrb	r3, [r3, #1]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d101      	bne.n	80018e0 <BSP_QSPI_Init+0x8c>
 80018dc:	2310      	movs	r3, #16
 80018de:	e000      	b.n	80018e2 <BSP_QSPI_Init+0x8e>
 80018e0:	2300      	movs	r3, #0
 80018e2:	617b      	str	r3, [r7, #20]

        if(MX_QSPI_Init(&hqspi, &qspi_init) != HAL_OK)
 80018e4:	f107 030c 	add.w	r3, r7, #12
 80018e8:	4619      	mov	r1, r3
 80018ea:	482d      	ldr	r0, [pc, #180]	; (80019a0 <BSP_QSPI_Init+0x14c>)
 80018ec:	f000 f85c 	bl	80019a8 <MX_QSPI_Init>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d003      	beq.n	80018fe <BSP_QSPI_Init+0xaa>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 80018f6:	f06f 0303 	mvn.w	r3, #3
 80018fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80018fc:	e049      	b.n	8001992 <BSP_QSPI_Init+0x13e>
        }/* QSPI memory reset */
        else if(QSPI_ResetMemory(Instance) != BSP_ERROR_NONE)
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f000 faa8 	bl	8001e54 <QSPI_ResetMemory>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d003      	beq.n	8001912 <BSP_QSPI_Init+0xbe>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800190a:	f06f 0304 	mvn.w	r3, #4
 800190e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001910:	e03f      	b.n	8001992 <BSP_QSPI_Init+0x13e>
        }/* Force Flash enter 4 Byte address mode */
        else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8001912:	4922      	ldr	r1, [pc, #136]	; (800199c <BSP_QSPI_Init+0x148>)
 8001914:	687a      	ldr	r2, [r7, #4]
 8001916:	4613      	mov	r3, r2
 8001918:	005b      	lsls	r3, r3, #1
 800191a:	4413      	add	r3, r2
 800191c:	009b      	lsls	r3, r3, #2
 800191e:	440b      	add	r3, r1
 8001920:	3301      	adds	r3, #1
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	4619      	mov	r1, r3
 8001926:	481e      	ldr	r0, [pc, #120]	; (80019a0 <BSP_QSPI_Init+0x14c>)
 8001928:	f7ff fd72 	bl	8001410 <MT25TL01G_AutoPollingMemReady>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d003      	beq.n	800193a <BSP_QSPI_Init+0xe6>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 8001932:	f06f 0304 	mvn.w	r3, #4
 8001936:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001938:	e02b      	b.n	8001992 <BSP_QSPI_Init+0x13e>
        }
        else if(MT25TL01G_Enter4BytesAddressMode(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800193a:	4918      	ldr	r1, [pc, #96]	; (800199c <BSP_QSPI_Init+0x148>)
 800193c:	687a      	ldr	r2, [r7, #4]
 800193e:	4613      	mov	r3, r2
 8001940:	005b      	lsls	r3, r3, #1
 8001942:	4413      	add	r3, r2
 8001944:	009b      	lsls	r3, r3, #2
 8001946:	440b      	add	r3, r1
 8001948:	3301      	adds	r3, #1
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	4619      	mov	r1, r3
 800194e:	4814      	ldr	r0, [pc, #80]	; (80019a0 <BSP_QSPI_Init+0x14c>)
 8001950:	f7ff fd16 	bl	8001380 <MT25TL01G_Enter4BytesAddressMode>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d003      	beq.n	8001962 <BSP_QSPI_Init+0x10e>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800195a:	f06f 0304 	mvn.w	r3, #4
 800195e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001960:	e017      	b.n	8001992 <BSP_QSPI_Init+0x13e>
        }/* Configuration of the dummy cycles on QSPI memory side */
        else if(QSPI_DummyCyclesCfg(Instance) != BSP_ERROR_NONE)
 8001962:	6878      	ldr	r0, [r7, #4]
 8001964:	f000 fae2 	bl	8001f2c <QSPI_DummyCyclesCfg>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d003      	beq.n	8001976 <BSP_QSPI_Init+0x122>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800196e:	f06f 0304 	mvn.w	r3, #4
 8001972:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001974:	e00d      	b.n	8001992 <BSP_QSPI_Init+0x13e>
        }
        else
        {
          /* Configure Flash to desired mode */
          if(BSP_QSPI_ConfigFlash(Instance, Init->InterfaceMode, Init->TransferRate) != BSP_ERROR_NONE)
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	7819      	ldrb	r1, [r3, #0]
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	785b      	ldrb	r3, [r3, #1]
 800197e:	461a      	mov	r2, r3
 8001980:	6878      	ldr	r0, [r7, #4]
 8001982:	f000 f89d 	bl	8001ac0 <BSP_QSPI_ConfigFlash>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d002      	beq.n	8001992 <BSP_QSPI_Init+0x13e>
          {
            ret = BSP_ERROR_COMPONENT_FAILURE;
 800198c:	f06f 0304 	mvn.w	r3, #4
 8001990:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
  }

  /* Return BSP status */
  return ret;
 8001992:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8001994:	4618      	mov	r0, r3
 8001996:	3740      	adds	r7, #64	; 0x40
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	24000ce0 	.word	0x24000ce0
 80019a0:	24000c94 	.word	0x24000c94
 80019a4:	080117bc 	.word	0x080117bc

080019a8 <MX_QSPI_Init>:
  * @param  hQspi       QSPI handle
  * @param  Config      QSPI configuration structure
  * @retval BSP status
  */
__weak HAL_StatusTypeDef MX_QSPI_Init(QSPI_HandleTypeDef *hQspi, MX_QSPI_Init_t *Config)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	6039      	str	r1, [r7, #0]
  /* QSPI initialization */
  /* QSPI freq = SYSCLK /(1 + ClockPrescaler) Mhz */
  hQspi->Instance                = QUADSPI;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	4a13      	ldr	r2, [pc, #76]	; (8001a04 <MX_QSPI_Init+0x5c>)
 80019b6:	601a      	str	r2, [r3, #0]
  hQspi->Init.ClockPrescaler     = Config->ClockPrescaler;
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	685a      	ldr	r2, [r3, #4]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	605a      	str	r2, [r3, #4]
  hQspi->Init.FifoThreshold      = 1;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2201      	movs	r2, #1
 80019c4:	609a      	str	r2, [r3, #8]
  hQspi->Init.SampleShifting     = Config->SampleShifting;
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	689a      	ldr	r2, [r3, #8]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	60da      	str	r2, [r3, #12]
  hQspi->Init.FlashSize          = Config->FlashSize;
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	611a      	str	r2, [r3, #16]
  hQspi->Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_4_CYCLE; /* Min 50ns for nonRead */
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	f44f 7240 	mov.w	r2, #768	; 0x300
 80019dc:	615a      	str	r2, [r3, #20]
  hQspi->Init.ClockMode          = QSPI_CLOCK_MODE_0;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2200      	movs	r2, #0
 80019e2:	619a      	str	r2, [r3, #24]
  hQspi->Init.FlashID            = QSPI_FLASH_ID_1;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2200      	movs	r2, #0
 80019e8:	61da      	str	r2, [r3, #28]
  hQspi->Init.DualFlash          = Config->DualFlashMode;
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	68da      	ldr	r2, [r3, #12]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	621a      	str	r2, [r3, #32]

  return HAL_QSPI_Init(hQspi);
 80019f2:	6878      	ldr	r0, [r7, #4]
 80019f4:	f003 fac6 	bl	8004f84 <HAL_QSPI_Init>
 80019f8:	4603      	mov	r3, r0
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3708      	adds	r7, #8
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	52005000 	.word	0x52005000

08001a08 <BSP_QSPI_EnableMemoryMappedMode>:
  *         Only 1 Instance can running MMP mode. And it will lock system at this mode.
  * @param  Instance  QSPI instance
  * @retval BSP status
  */
int32_t BSP_QSPI_EnableMemoryMappedMode(uint32_t Instance)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b084      	sub	sp, #16
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8001a10:	2300      	movs	r3, #0
 8001a12:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d003      	beq.n	8001a22 <BSP_QSPI_EnableMemoryMappedMode+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001a1a:	f06f 0301 	mvn.w	r3, #1
 8001a1e:	60fb      	str	r3, [r7, #12]
 8001a20:	e045      	b.n	8001aae <BSP_QSPI_EnableMemoryMappedMode+0xa6>
  }
  else
  {
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
 8001a22:	4925      	ldr	r1, [pc, #148]	; (8001ab8 <BSP_QSPI_EnableMemoryMappedMode+0xb0>)
 8001a24:	687a      	ldr	r2, [r7, #4]
 8001a26:	4613      	mov	r3, r2
 8001a28:	005b      	lsls	r3, r3, #1
 8001a2a:	4413      	add	r3, r2
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	440b      	add	r3, r1
 8001a30:	3302      	adds	r3, #2
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d11d      	bne.n	8001a74 <BSP_QSPI_EnableMemoryMappedMode+0x6c>
    {
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8001a38:	491f      	ldr	r1, [pc, #124]	; (8001ab8 <BSP_QSPI_EnableMemoryMappedMode+0xb0>)
 8001a3a:	687a      	ldr	r2, [r7, #4]
 8001a3c:	4613      	mov	r3, r2
 8001a3e:	005b      	lsls	r3, r3, #1
 8001a40:	4413      	add	r3, r2
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	440b      	add	r3, r1
 8001a46:	3301      	adds	r3, #1
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	481b      	ldr	r0, [pc, #108]	; (8001abc <BSP_QSPI_EnableMemoryMappedMode+0xb4>)
 8001a4e:	f7ff fe35 	bl	80016bc <MT25TL01G_EnableMemoryMappedModeSTR>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d003      	beq.n	8001a60 <BSP_QSPI_EnableMemoryMappedMode+0x58>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8001a58:	f06f 0304 	mvn.w	r3, #4
 8001a5c:	60fb      	str	r3, [r7, #12]
 8001a5e:	e026      	b.n	8001aae <BSP_QSPI_EnableMemoryMappedMode+0xa6>
      }
      else /* Update QSPI context if all operations are well done */
      {
        QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_MMP;
 8001a60:	4915      	ldr	r1, [pc, #84]	; (8001ab8 <BSP_QSPI_EnableMemoryMappedMode+0xb0>)
 8001a62:	687a      	ldr	r2, [r7, #4]
 8001a64:	4613      	mov	r3, r2
 8001a66:	005b      	lsls	r3, r3, #1
 8001a68:	4413      	add	r3, r2
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	440b      	add	r3, r1
 8001a6e:	2202      	movs	r2, #2
 8001a70:	701a      	strb	r2, [r3, #0]
 8001a72:	e01c      	b.n	8001aae <BSP_QSPI_EnableMemoryMappedMode+0xa6>
      }
    }
    else
    {
      if(MT25TL01G_EnableMemoryMappedModeDTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8001a74:	4910      	ldr	r1, [pc, #64]	; (8001ab8 <BSP_QSPI_EnableMemoryMappedMode+0xb0>)
 8001a76:	687a      	ldr	r2, [r7, #4]
 8001a78:	4613      	mov	r3, r2
 8001a7a:	005b      	lsls	r3, r3, #1
 8001a7c:	4413      	add	r3, r2
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	440b      	add	r3, r1
 8001a82:	3301      	adds	r3, #1
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	4619      	mov	r1, r3
 8001a88:	480c      	ldr	r0, [pc, #48]	; (8001abc <BSP_QSPI_EnableMemoryMappedMode+0xb4>)
 8001a8a:	f7ff fdad 	bl	80015e8 <MT25TL01G_EnableMemoryMappedModeDTR>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d003      	beq.n	8001a9c <BSP_QSPI_EnableMemoryMappedMode+0x94>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8001a94:	f06f 0304 	mvn.w	r3, #4
 8001a98:	60fb      	str	r3, [r7, #12]
 8001a9a:	e008      	b.n	8001aae <BSP_QSPI_EnableMemoryMappedMode+0xa6>
      }
      else /* Update QSPI context if all operations are well done */
      {
        QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_MMP;
 8001a9c:	4906      	ldr	r1, [pc, #24]	; (8001ab8 <BSP_QSPI_EnableMemoryMappedMode+0xb0>)
 8001a9e:	687a      	ldr	r2, [r7, #4]
 8001aa0:	4613      	mov	r3, r2
 8001aa2:	005b      	lsls	r3, r3, #1
 8001aa4:	4413      	add	r3, r2
 8001aa6:	009b      	lsls	r3, r3, #2
 8001aa8:	440b      	add	r3, r1
 8001aaa:	2202      	movs	r2, #2
 8001aac:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Return BSP status */
  return ret;
 8001aae:	68fb      	ldr	r3, [r7, #12]
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3710      	adds	r7, #16
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	24000ce0 	.word	0x24000ce0
 8001abc:	24000c94 	.word	0x24000c94

08001ac0 <BSP_QSPI_ConfigFlash>:
  * @param  Mode      QSPI mode
  * @param  Rate      QSPI transfer rate
  * @retval BSP status
  */
int32_t BSP_QSPI_ConfigFlash(uint32_t Instance, BSP_QSPI_Interface_t Mode, BSP_QSPI_Transfer_t Rate)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b084      	sub	sp, #16
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	460b      	mov	r3, r1
 8001aca:	70fb      	strb	r3, [r7, #3]
 8001acc:	4613      	mov	r3, r2
 8001ace:	70bb      	strb	r3, [r7, #2]
  int32_t ret = BSP_ERROR_NONE;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d003      	beq.n	8001ae2 <BSP_QSPI_ConfigFlash+0x22>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001ada:	f06f 0301 	mvn.w	r3, #1
 8001ade:	60fb      	str	r3, [r7, #12]
 8001ae0:	e067      	b.n	8001bb2 <BSP_QSPI_ConfigFlash+0xf2>
  }
  else
  {
    /* Check if MMP mode locked ************************************************/
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_MMP)
 8001ae2:	4936      	ldr	r1, [pc, #216]	; (8001bbc <BSP_QSPI_ConfigFlash+0xfc>)
 8001ae4:	687a      	ldr	r2, [r7, #4]
 8001ae6:	4613      	mov	r3, r2
 8001ae8:	005b      	lsls	r3, r3, #1
 8001aea:	4413      	add	r3, r2
 8001aec:	009b      	lsls	r3, r3, #2
 8001aee:	440b      	add	r3, r1
 8001af0:	781b      	ldrb	r3, [r3, #0]
 8001af2:	2b02      	cmp	r3, #2
 8001af4:	d103      	bne.n	8001afe <BSP_QSPI_ConfigFlash+0x3e>
    {
      ret = BSP_ERROR_QSPI_MMP_LOCK_FAILURE;
 8001af6:	f06f 0319 	mvn.w	r3, #25
 8001afa:	60fb      	str	r3, [r7, #12]
 8001afc:	e059      	b.n	8001bb2 <BSP_QSPI_ConfigFlash+0xf2>
    }
    else
    {
      /* Setup MCU transfer rate setting ***************************************************/
      hqspi.Init.SampleShifting = (Rate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 8001afe:	78bb      	ldrb	r3, [r7, #2]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d101      	bne.n	8001b08 <BSP_QSPI_ConfigFlash+0x48>
 8001b04:	2310      	movs	r3, #16
 8001b06:	e000      	b.n	8001b0a <BSP_QSPI_ConfigFlash+0x4a>
 8001b08:	2300      	movs	r3, #0
 8001b0a:	4a2d      	ldr	r2, [pc, #180]	; (8001bc0 <BSP_QSPI_ConfigFlash+0x100>)
 8001b0c:	60d3      	str	r3, [r2, #12]

      if(HAL_QSPI_Init(&hqspi)!= HAL_OK)
 8001b0e:	482c      	ldr	r0, [pc, #176]	; (8001bc0 <BSP_QSPI_ConfigFlash+0x100>)
 8001b10:	f003 fa38 	bl	8004f84 <HAL_QSPI_Init>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d003      	beq.n	8001b22 <BSP_QSPI_ConfigFlash+0x62>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
 8001b1a:	f06f 0303 	mvn.w	r3, #3
 8001b1e:	60fb      	str	r3, [r7, #12]
 8001b20:	e047      	b.n	8001bb2 <BSP_QSPI_ConfigFlash+0xf2>
      }
      else
      {
        /* Setup Flash interface ***************************************************/
        switch(QSPI_Ctx[Instance].InterfaceMode)
 8001b22:	4926      	ldr	r1, [pc, #152]	; (8001bbc <BSP_QSPI_ConfigFlash+0xfc>)
 8001b24:	687a      	ldr	r2, [r7, #4]
 8001b26:	4613      	mov	r3, r2
 8001b28:	005b      	lsls	r3, r3, #1
 8001b2a:	4413      	add	r3, r2
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	440b      	add	r3, r1
 8001b30:	3301      	adds	r3, #1
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	2b03      	cmp	r3, #3
 8001b36:	d10c      	bne.n	8001b52 <BSP_QSPI_ConfigFlash+0x92>
        {
        case MT25TL01G_QPI_MODE :               /* 4-4-4 commands */
          if(Mode != MT25TL01G_QPI_MODE)
 8001b38:	78fb      	ldrb	r3, [r7, #3]
 8001b3a:	2b03      	cmp	r3, #3
 8001b3c:	d016      	beq.n	8001b6c <BSP_QSPI_ConfigFlash+0xac>
          {
            if(MT25TL01G_ExitQPIMode(&hqspi) != MT25TL01G_OK)
 8001b3e:	4820      	ldr	r0, [pc, #128]	; (8001bc0 <BSP_QSPI_ConfigFlash+0x100>)
 8001b40:	f7ff fd27 	bl	8001592 <MT25TL01G_ExitQPIMode>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d010      	beq.n	8001b6c <BSP_QSPI_ConfigFlash+0xac>
            {
              ret = BSP_ERROR_COMPONENT_FAILURE;
 8001b4a:	f06f 0304 	mvn.w	r3, #4
 8001b4e:	60fb      	str	r3, [r7, #12]
            }
          }
          break;
 8001b50:	e00c      	b.n	8001b6c <BSP_QSPI_ConfigFlash+0xac>

        case BSP_QSPI_SPI_MODE :               /* 1-1-1 commands, Power on H/W default setting */
        case BSP_QSPI_SPI_2IO_MODE :           /* 1-2-2 read commands */
        case BSP_QSPI_SPI_4IO_MODE :           /* 1-4-4 read commands */
        default :
          if(Mode == MT25TL01G_QPI_MODE)
 8001b52:	78fb      	ldrb	r3, [r7, #3]
 8001b54:	2b03      	cmp	r3, #3
 8001b56:	d10b      	bne.n	8001b70 <BSP_QSPI_ConfigFlash+0xb0>
          {
            if(MT25TL01G_EnterQPIMode(&hqspi) != MT25TL01G_OK)
 8001b58:	4819      	ldr	r0, [pc, #100]	; (8001bc0 <BSP_QSPI_ConfigFlash+0x100>)
 8001b5a:	f7ff fcf0 	bl	800153e <MT25TL01G_EnterQPIMode>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d005      	beq.n	8001b70 <BSP_QSPI_ConfigFlash+0xb0>
            {
              ret = BSP_ERROR_COMPONENT_FAILURE;
 8001b64:	f06f 0304 	mvn.w	r3, #4
 8001b68:	60fb      	str	r3, [r7, #12]
            }
          }
          break;
 8001b6a:	e001      	b.n	8001b70 <BSP_QSPI_ConfigFlash+0xb0>
          break;
 8001b6c:	bf00      	nop
 8001b6e:	e000      	b.n	8001b72 <BSP_QSPI_ConfigFlash+0xb2>
          break;
 8001b70:	bf00      	nop
        }

        /* Update QSPI context if all operations are well done */
        if(ret == BSP_ERROR_NONE)
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d11c      	bne.n	8001bb2 <BSP_QSPI_ConfigFlash+0xf2>
        {
          /* Update current status parameter *****************************************/
          QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;
 8001b78:	4910      	ldr	r1, [pc, #64]	; (8001bbc <BSP_QSPI_ConfigFlash+0xfc>)
 8001b7a:	687a      	ldr	r2, [r7, #4]
 8001b7c:	4613      	mov	r3, r2
 8001b7e:	005b      	lsls	r3, r3, #1
 8001b80:	4413      	add	r3, r2
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	440b      	add	r3, r1
 8001b86:	2201      	movs	r2, #1
 8001b88:	701a      	strb	r2, [r3, #0]
          QSPI_Ctx[Instance].InterfaceMode = Mode;
 8001b8a:	490c      	ldr	r1, [pc, #48]	; (8001bbc <BSP_QSPI_ConfigFlash+0xfc>)
 8001b8c:	687a      	ldr	r2, [r7, #4]
 8001b8e:	4613      	mov	r3, r2
 8001b90:	005b      	lsls	r3, r3, #1
 8001b92:	4413      	add	r3, r2
 8001b94:	009b      	lsls	r3, r3, #2
 8001b96:	440b      	add	r3, r1
 8001b98:	3301      	adds	r3, #1
 8001b9a:	78fa      	ldrb	r2, [r7, #3]
 8001b9c:	701a      	strb	r2, [r3, #0]
          QSPI_Ctx[Instance].TransferRate  = Rate;
 8001b9e:	4907      	ldr	r1, [pc, #28]	; (8001bbc <BSP_QSPI_ConfigFlash+0xfc>)
 8001ba0:	687a      	ldr	r2, [r7, #4]
 8001ba2:	4613      	mov	r3, r2
 8001ba4:	005b      	lsls	r3, r3, #1
 8001ba6:	4413      	add	r3, r2
 8001ba8:	009b      	lsls	r3, r3, #2
 8001baa:	440b      	add	r3, r1
 8001bac:	3302      	adds	r3, #2
 8001bae:	78ba      	ldrb	r2, [r7, #2]
 8001bb0:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Return BSP status */
  return ret;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3710      	adds	r7, #16
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	24000ce0 	.word	0x24000ce0
 8001bc0:	24000c94 	.word	0x24000c94

08001bc4 <QSPI_MspInit>:
  *           - Peripheral's GPIO Configuration
  *           - NVIC configuration for QSPI interrupt
  * @retval None
  */
static void QSPI_MspInit(QSPI_HandleTypeDef *hQspi)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b094      	sub	sp, #80	; 0x50
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hQspi);

  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable the QuadSPI memory interface clock */
  QSPI_CLK_ENABLE();
 8001bcc:	4b9c      	ldr	r3, [pc, #624]	; (8001e40 <QSPI_MspInit+0x27c>)
 8001bce:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001bd2:	4a9b      	ldr	r2, [pc, #620]	; (8001e40 <QSPI_MspInit+0x27c>)
 8001bd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bd8:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8001bdc:	4b98      	ldr	r3, [pc, #608]	; (8001e40 <QSPI_MspInit+0x27c>)
 8001bde:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001be2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001be6:	63bb      	str	r3, [r7, #56]	; 0x38
 8001be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  /* Reset the QuadSPI memory interface */
  QSPI_FORCE_RESET();
 8001bea:	4b95      	ldr	r3, [pc, #596]	; (8001e40 <QSPI_MspInit+0x27c>)
 8001bec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001bee:	4a94      	ldr	r2, [pc, #592]	; (8001e40 <QSPI_MspInit+0x27c>)
 8001bf0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bf4:	67d3      	str	r3, [r2, #124]	; 0x7c
  QSPI_RELEASE_RESET();
 8001bf6:	4b92      	ldr	r3, [pc, #584]	; (8001e40 <QSPI_MspInit+0x27c>)
 8001bf8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001bfa:	4a91      	ldr	r2, [pc, #580]	; (8001e40 <QSPI_MspInit+0x27c>)
 8001bfc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001c00:	67d3      	str	r3, [r2, #124]	; 0x7c
  /* Enable GPIO clocks */
  QSPI_CLK_GPIO_CLK_ENABLE();
 8001c02:	4b8f      	ldr	r3, [pc, #572]	; (8001e40 <QSPI_MspInit+0x27c>)
 8001c04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c08:	4a8d      	ldr	r2, [pc, #564]	; (8001e40 <QSPI_MspInit+0x27c>)
 8001c0a:	f043 0320 	orr.w	r3, r3, #32
 8001c0e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c12:	4b8b      	ldr	r3, [pc, #556]	; (8001e40 <QSPI_MspInit+0x27c>)
 8001c14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c18:	f003 0320 	and.w	r3, r3, #32
 8001c1c:	637b      	str	r3, [r7, #52]	; 0x34
 8001c1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  QSPI_BK1_CS_GPIO_CLK_ENABLE();
 8001c20:	4b87      	ldr	r3, [pc, #540]	; (8001e40 <QSPI_MspInit+0x27c>)
 8001c22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c26:	4a86      	ldr	r2, [pc, #536]	; (8001e40 <QSPI_MspInit+0x27c>)
 8001c28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c2c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c30:	4b83      	ldr	r3, [pc, #524]	; (8001e40 <QSPI_MspInit+0x27c>)
 8001c32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c3a:	633b      	str	r3, [r7, #48]	; 0x30
 8001c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  QSPI_BK1_D0_GPIO_CLK_ENABLE();
 8001c3e:	4b80      	ldr	r3, [pc, #512]	; (8001e40 <QSPI_MspInit+0x27c>)
 8001c40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c44:	4a7e      	ldr	r2, [pc, #504]	; (8001e40 <QSPI_MspInit+0x27c>)
 8001c46:	f043 0308 	orr.w	r3, r3, #8
 8001c4a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c4e:	4b7c      	ldr	r3, [pc, #496]	; (8001e40 <QSPI_MspInit+0x27c>)
 8001c50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c54:	f003 0308 	and.w	r3, r3, #8
 8001c58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  QSPI_BK1_D1_GPIO_CLK_ENABLE();
 8001c5c:	4b78      	ldr	r3, [pc, #480]	; (8001e40 <QSPI_MspInit+0x27c>)
 8001c5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c62:	4a77      	ldr	r2, [pc, #476]	; (8001e40 <QSPI_MspInit+0x27c>)
 8001c64:	f043 0320 	orr.w	r3, r3, #32
 8001c68:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c6c:	4b74      	ldr	r3, [pc, #464]	; (8001e40 <QSPI_MspInit+0x27c>)
 8001c6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c72:	f003 0320 	and.w	r3, r3, #32
 8001c76:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
  QSPI_BK1_D2_GPIO_CLK_ENABLE();
 8001c7a:	4b71      	ldr	r3, [pc, #452]	; (8001e40 <QSPI_MspInit+0x27c>)
 8001c7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c80:	4a6f      	ldr	r2, [pc, #444]	; (8001e40 <QSPI_MspInit+0x27c>)
 8001c82:	f043 0320 	orr.w	r3, r3, #32
 8001c86:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c8a:	4b6d      	ldr	r3, [pc, #436]	; (8001e40 <QSPI_MspInit+0x27c>)
 8001c8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c90:	f003 0320 	and.w	r3, r3, #32
 8001c94:	627b      	str	r3, [r7, #36]	; 0x24
 8001c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  QSPI_BK1_D3_GPIO_CLK_ENABLE();
 8001c98:	4b69      	ldr	r3, [pc, #420]	; (8001e40 <QSPI_MspInit+0x27c>)
 8001c9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c9e:	4a68      	ldr	r2, [pc, #416]	; (8001e40 <QSPI_MspInit+0x27c>)
 8001ca0:	f043 0320 	orr.w	r3, r3, #32
 8001ca4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ca8:	4b65      	ldr	r3, [pc, #404]	; (8001e40 <QSPI_MspInit+0x27c>)
 8001caa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cae:	f003 0320 	and.w	r3, r3, #32
 8001cb2:	623b      	str	r3, [r7, #32]
 8001cb4:	6a3b      	ldr	r3, [r7, #32]

  QSPI_BK2_CS_GPIO_CLK_ENABLE();
 8001cb6:	4b62      	ldr	r3, [pc, #392]	; (8001e40 <QSPI_MspInit+0x27c>)
 8001cb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cbc:	4a60      	ldr	r2, [pc, #384]	; (8001e40 <QSPI_MspInit+0x27c>)
 8001cbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001cc2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cc6:	4b5e      	ldr	r3, [pc, #376]	; (8001e40 <QSPI_MspInit+0x27c>)
 8001cc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ccc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cd0:	61fb      	str	r3, [r7, #28]
 8001cd2:	69fb      	ldr	r3, [r7, #28]
  QSPI_BK2_D0_GPIO_CLK_ENABLE();
 8001cd4:	4b5a      	ldr	r3, [pc, #360]	; (8001e40 <QSPI_MspInit+0x27c>)
 8001cd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cda:	4a59      	ldr	r2, [pc, #356]	; (8001e40 <QSPI_MspInit+0x27c>)
 8001cdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ce0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ce4:	4b56      	ldr	r3, [pc, #344]	; (8001e40 <QSPI_MspInit+0x27c>)
 8001ce6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cee:	61bb      	str	r3, [r7, #24]
 8001cf0:	69bb      	ldr	r3, [r7, #24]
  QSPI_BK2_D1_GPIO_CLK_ENABLE();
 8001cf2:	4b53      	ldr	r3, [pc, #332]	; (8001e40 <QSPI_MspInit+0x27c>)
 8001cf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cf8:	4a51      	ldr	r2, [pc, #324]	; (8001e40 <QSPI_MspInit+0x27c>)
 8001cfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cfe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d02:	4b4f      	ldr	r3, [pc, #316]	; (8001e40 <QSPI_MspInit+0x27c>)
 8001d04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d0c:	617b      	str	r3, [r7, #20]
 8001d0e:	697b      	ldr	r3, [r7, #20]
  QSPI_BK2_D2_GPIO_CLK_ENABLE();
 8001d10:	4b4b      	ldr	r3, [pc, #300]	; (8001e40 <QSPI_MspInit+0x27c>)
 8001d12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d16:	4a4a      	ldr	r2, [pc, #296]	; (8001e40 <QSPI_MspInit+0x27c>)
 8001d18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d1c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d20:	4b47      	ldr	r3, [pc, #284]	; (8001e40 <QSPI_MspInit+0x27c>)
 8001d22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d2a:	613b      	str	r3, [r7, #16]
 8001d2c:	693b      	ldr	r3, [r7, #16]
  QSPI_BK2_D3_GPIO_CLK_ENABLE();
 8001d2e:	4b44      	ldr	r3, [pc, #272]	; (8001e40 <QSPI_MspInit+0x27c>)
 8001d30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d34:	4a42      	ldr	r2, [pc, #264]	; (8001e40 <QSPI_MspInit+0x27c>)
 8001d36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d3a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d3e:	4b40      	ldr	r3, [pc, #256]	; (8001e40 <QSPI_MspInit+0x27c>)
 8001d40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d48:	60fb      	str	r3, [r7, #12]
 8001d4a:	68fb      	ldr	r3, [r7, #12]

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* QSPI CLK GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
 8001d4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d50:	63fb      	str	r3, [r7, #60]	; 0x3c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001d52:	2302      	movs	r3, #2
 8001d54:	643b      	str	r3, [r7, #64]	; 0x40
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d56:	2303      	movs	r3, #3
 8001d58:	64bb      	str	r3, [r7, #72]	; 0x48
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	647b      	str	r3, [r7, #68]	; 0x44
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8001d5e:	2309      	movs	r3, #9
 8001d60:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 8001d62:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001d66:	4619      	mov	r1, r3
 8001d68:	4836      	ldr	r0, [pc, #216]	; (8001e44 <QSPI_MspInit+0x280>)
 8001d6a:	f001 fc3f 	bl	80035ec <HAL_GPIO_Init>

  /* QSPI CS GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_CS_PIN;
 8001d6e:	2340      	movs	r3, #64	; 0x40
 8001d70:	63fb      	str	r3, [r7, #60]	; 0x3c
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8001d72:	2301      	movs	r3, #1
 8001d74:	647b      	str	r3, [r7, #68]	; 0x44
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 8001d76:	230a      	movs	r3, #10
 8001d78:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(QSPI_BK1_CS_GPIO_PORT, &gpio_init_structure);
 8001d7a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001d7e:	4619      	mov	r1, r3
 8001d80:	4831      	ldr	r0, [pc, #196]	; (8001e48 <QSPI_MspInit+0x284>)
 8001d82:	f001 fc33 	bl	80035ec <HAL_GPIO_Init>

  /* QSPI D0 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D0_PIN;
 8001d86:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	647b      	str	r3, [r7, #68]	; 0x44
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8001d90:	2309      	movs	r3, #9
 8001d92:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(QSPI_BK1_D0_GPIO_PORT, &gpio_init_structure);
 8001d94:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001d98:	4619      	mov	r1, r3
 8001d9a:	482c      	ldr	r0, [pc, #176]	; (8001e4c <QSPI_MspInit+0x288>)
 8001d9c:	f001 fc26 	bl	80035ec <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D0_PIN;
 8001da0:	2304      	movs	r3, #4
 8001da2:	63fb      	str	r3, [r7, #60]	; 0x3c
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8001da4:	2309      	movs	r3, #9
 8001da6:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 8001da8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001dac:	4619      	mov	r1, r3
 8001dae:	4828      	ldr	r0, [pc, #160]	; (8001e50 <QSPI_MspInit+0x28c>)
 8001db0:	f001 fc1c 	bl	80035ec <HAL_GPIO_Init>

  /* QSPI D1 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D1_PIN;
 8001db4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001db8:	63fb      	str	r3, [r7, #60]	; 0x3c
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 8001dba:	230a      	movs	r3, #10
 8001dbc:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(QSPI_BK1_D1_GPIO_PORT, &gpio_init_structure);
 8001dbe:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	481f      	ldr	r0, [pc, #124]	; (8001e44 <QSPI_MspInit+0x280>)
 8001dc6:	f001 fc11 	bl	80035ec <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D1_PIN;
 8001dca:	2308      	movs	r3, #8
 8001dcc:	63fb      	str	r3, [r7, #60]	; 0x3c
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8001dce:	2309      	movs	r3, #9
 8001dd0:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(QSPI_BK2_D1_GPIO_PORT, &gpio_init_structure);
 8001dd2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	481d      	ldr	r0, [pc, #116]	; (8001e50 <QSPI_MspInit+0x28c>)
 8001dda:	f001 fc07 	bl	80035ec <HAL_GPIO_Init>

  /* QSPI D2 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D2_PIN;
 8001dde:	2380      	movs	r3, #128	; 0x80
 8001de0:	63fb      	str	r3, [r7, #60]	; 0x3c
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8001de2:	2309      	movs	r3, #9
 8001de4:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(QSPI_BK1_D2_GPIO_PORT, &gpio_init_structure);
 8001de6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001dea:	4619      	mov	r1, r3
 8001dec:	4815      	ldr	r0, [pc, #84]	; (8001e44 <QSPI_MspInit+0x280>)
 8001dee:	f001 fbfd 	bl	80035ec <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D2_PIN;
 8001df2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001df6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_BK2_D2_GPIO_PORT, &gpio_init_structure);
 8001df8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	4812      	ldr	r0, [pc, #72]	; (8001e48 <QSPI_MspInit+0x284>)
 8001e00:	f001 fbf4 	bl	80035ec <HAL_GPIO_Init>

  /* QSPI D3 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D3_PIN;
 8001e04:	2340      	movs	r3, #64	; 0x40
 8001e06:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_BK1_D3_GPIO_PORT, &gpio_init_structure);
 8001e08:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	480d      	ldr	r0, [pc, #52]	; (8001e44 <QSPI_MspInit+0x280>)
 8001e10:	f001 fbec 	bl	80035ec <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D3_PIN;
 8001e14:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001e18:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_BK2_D3_GPIO_PORT, &gpio_init_structure);
 8001e1a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001e1e:	4619      	mov	r1, r3
 8001e20:	4809      	ldr	r0, [pc, #36]	; (8001e48 <QSPI_MspInit+0x284>)
 8001e22:	f001 fbe3 	bl	80035ec <HAL_GPIO_Init>

  /*##-3- Configure the NVIC for QSPI #########################################*/
  /* NVIC configuration for QSPI interrupt */
  HAL_NVIC_SetPriority(QUADSPI_IRQn, 0x0F, 0);
 8001e26:	2200      	movs	r2, #0
 8001e28:	210f      	movs	r1, #15
 8001e2a:	205c      	movs	r0, #92	; 0x5c
 8001e2c:	f001 fa3b 	bl	80032a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 8001e30:	205c      	movs	r0, #92	; 0x5c
 8001e32:	f001 fa52 	bl	80032da <HAL_NVIC_EnableIRQ>
}
 8001e36:	bf00      	nop
 8001e38:	3750      	adds	r7, #80	; 0x50
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	58024400 	.word	0x58024400
 8001e44:	58021400 	.word	0x58021400
 8001e48:	58021800 	.word	0x58021800
 8001e4c:	58020c00 	.word	0x58020c00
 8001e50:	58021c00 	.word	0x58021c00

08001e54 <QSPI_ResetMemory>:
  *         Flash accept 1-1-1, 1-1-2, 1-2-2 commands after reset.
  * @param  Instance  QSPI instance
  * @retval BSP status
  */
static int32_t QSPI_ResetMemory(uint32_t Instance)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b084      	sub	sp, #16
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	60fb      	str	r3, [r7, #12]

  /* Send RESET ENABLE command in QPI mode (QUAD I/Os, 4-4-4) */
  if(MT25TL01G_ResetEnable(&hqspi, MT25TL01G_QPI_MODE) != MT25TL01G_OK)
 8001e60:	2103      	movs	r1, #3
 8001e62:	4830      	ldr	r0, [pc, #192]	; (8001f24 <QSPI_ResetMemory+0xd0>)
 8001e64:	f7ff fc92 	bl	800178c <MT25TL01G_ResetEnable>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d003      	beq.n	8001e76 <QSPI_ResetMemory+0x22>
  {
    ret =BSP_ERROR_COMPONENT_FAILURE;
 8001e6e:	f06f 0304 	mvn.w	r3, #4
 8001e72:	60fb      	str	r3, [r7, #12]
 8001e74:	e051      	b.n	8001f1a <QSPI_ResetMemory+0xc6>
  }/* Send RESET memory command in QPI mode (QUAD I/Os, 4-4-4) */
  else if(MT25TL01G_ResetMemory(&hqspi, MT25TL01G_QPI_MODE) != MT25TL01G_OK)
 8001e76:	2103      	movs	r1, #3
 8001e78:	482a      	ldr	r0, [pc, #168]	; (8001f24 <QSPI_ResetMemory+0xd0>)
 8001e7a:	f7ff fcb9 	bl	80017f0 <MT25TL01G_ResetMemory>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d003      	beq.n	8001e8c <QSPI_ResetMemory+0x38>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8001e84:	f06f 0304 	mvn.w	r3, #4
 8001e88:	60fb      	str	r3, [r7, #12]
 8001e8a:	e046      	b.n	8001f1a <QSPI_ResetMemory+0xc6>
  }/* Wait Flash ready */
  else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8001e8c:	4926      	ldr	r1, [pc, #152]	; (8001f28 <QSPI_ResetMemory+0xd4>)
 8001e8e:	687a      	ldr	r2, [r7, #4]
 8001e90:	4613      	mov	r3, r2
 8001e92:	005b      	lsls	r3, r3, #1
 8001e94:	4413      	add	r3, r2
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	440b      	add	r3, r1
 8001e9a:	3301      	adds	r3, #1
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	4820      	ldr	r0, [pc, #128]	; (8001f24 <QSPI_ResetMemory+0xd0>)
 8001ea2:	f7ff fab5 	bl	8001410 <MT25TL01G_AutoPollingMemReady>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d003      	beq.n	8001eb4 <QSPI_ResetMemory+0x60>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8001eac:	f06f 0304 	mvn.w	r3, #4
 8001eb0:	60fb      	str	r3, [r7, #12]
 8001eb2:	e032      	b.n	8001f1a <QSPI_ResetMemory+0xc6>
  }/* Send RESET ENABLE command in SPI mode (1-1-1) */
  else if(MT25TL01G_ResetEnable(&hqspi, BSP_QSPI_SPI_MODE) != MT25TL01G_OK)
 8001eb4:	2100      	movs	r1, #0
 8001eb6:	481b      	ldr	r0, [pc, #108]	; (8001f24 <QSPI_ResetMemory+0xd0>)
 8001eb8:	f7ff fc68 	bl	800178c <MT25TL01G_ResetEnable>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d003      	beq.n	8001eca <QSPI_ResetMemory+0x76>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8001ec2:	f06f 0304 	mvn.w	r3, #4
 8001ec6:	60fb      	str	r3, [r7, #12]
 8001ec8:	e027      	b.n	8001f1a <QSPI_ResetMemory+0xc6>
  }/* Send RESET memory command in SPI mode (1-1-1) */
  else if(MT25TL01G_ResetMemory(&hqspi, BSP_QSPI_SPI_MODE) != MT25TL01G_OK)
 8001eca:	2100      	movs	r1, #0
 8001ecc:	4815      	ldr	r0, [pc, #84]	; (8001f24 <QSPI_ResetMemory+0xd0>)
 8001ece:	f7ff fc8f 	bl	80017f0 <MT25TL01G_ResetMemory>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d003      	beq.n	8001ee0 <QSPI_ResetMemory+0x8c>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8001ed8:	f06f 0304 	mvn.w	r3, #4
 8001edc:	60fb      	str	r3, [r7, #12]
 8001ede:	e01c      	b.n	8001f1a <QSPI_ResetMemory+0xc6>
  }
  else
  {
    QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;  /* After reset S/W setting to indirect access   */
 8001ee0:	4911      	ldr	r1, [pc, #68]	; (8001f28 <QSPI_ResetMemory+0xd4>)
 8001ee2:	687a      	ldr	r2, [r7, #4]
 8001ee4:	4613      	mov	r3, r2
 8001ee6:	005b      	lsls	r3, r3, #1
 8001ee8:	4413      	add	r3, r2
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	440b      	add	r3, r1
 8001eee:	2201      	movs	r2, #1
 8001ef0:	701a      	strb	r2, [r3, #0]
    QSPI_Ctx[Instance].InterfaceMode = BSP_QSPI_SPI_MODE;     /* After reset H/W back to SPI mode by default  */
 8001ef2:	490d      	ldr	r1, [pc, #52]	; (8001f28 <QSPI_ResetMemory+0xd4>)
 8001ef4:	687a      	ldr	r2, [r7, #4]
 8001ef6:	4613      	mov	r3, r2
 8001ef8:	005b      	lsls	r3, r3, #1
 8001efa:	4413      	add	r3, r2
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	440b      	add	r3, r1
 8001f00:	3301      	adds	r3, #1
 8001f02:	2200      	movs	r2, #0
 8001f04:	701a      	strb	r2, [r3, #0]
    QSPI_Ctx[Instance].TransferRate  = BSP_QSPI_STR_TRANSFER; /* After reset S/W setting to STR mode          */
 8001f06:	4908      	ldr	r1, [pc, #32]	; (8001f28 <QSPI_ResetMemory+0xd4>)
 8001f08:	687a      	ldr	r2, [r7, #4]
 8001f0a:	4613      	mov	r3, r2
 8001f0c:	005b      	lsls	r3, r3, #1
 8001f0e:	4413      	add	r3, r2
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	440b      	add	r3, r1
 8001f14:	3302      	adds	r3, #2
 8001f16:	2200      	movs	r2, #0
 8001f18:	701a      	strb	r2, [r3, #0]

  }

  /* Return BSP status */
  return ret;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3710      	adds	r7, #16
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	24000c94 	.word	0x24000c94
 8001f28:	24000ce0 	.word	0x24000ce0

08001f2c <QSPI_DummyCyclesCfg>:
  *         Dummy cycle bit locate in Configuration Register[7:6]
  * @param  Instance  QSPI instance
  * @retval BSP status
  */
static int32_t QSPI_DummyCyclesCfg(uint32_t Instance)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b092      	sub	sp, #72	; 0x48
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
    int32_t ret= BSP_ERROR_NONE;
 8001f34:	2300      	movs	r3, #0
 8001f36:	647b      	str	r3, [r7, #68]	; 0x44
    QSPI_CommandTypeDef s_command;
  uint16_t reg=0;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	817b      	strh	r3, [r7, #10]

  /* Initialize the read volatile configuration register command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8001f3c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001f40:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
 8001f42:	2385      	movs	r3, #133	; 0x85
 8001f44:	60fb      	str	r3, [r7, #12]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8001f46:	2300      	movs	r3, #0
 8001f48:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8001f4e:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8001f52:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DummyCycles       = 0;
 8001f54:	2300      	movs	r3, #0
 8001f56:	623b      	str	r3, [r7, #32]
  s_command.NbData            = 2;
 8001f58:	2302      	movs	r3, #2
 8001f5a:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8001f60:	2300      	movs	r3, #0
 8001f62:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001f64:	2300      	movs	r3, #0
 8001f66:	643b      	str	r3, [r7, #64]	; 0x40

  /* Configure the command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001f68:	f107 030c 	add.w	r3, r7, #12
 8001f6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f70:	4619      	mov	r1, r3
 8001f72:	482b      	ldr	r0, [pc, #172]	; (8002020 <QSPI_DummyCyclesCfg+0xf4>)
 8001f74:	f003 f884 	bl	8005080 <HAL_QSPI_Command>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d002      	beq.n	8001f84 <QSPI_DummyCyclesCfg+0x58>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
 8001f7e:	f06f 0304 	mvn.w	r3, #4
 8001f82:	e048      	b.n	8002016 <QSPI_DummyCyclesCfg+0xea>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(&hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001f84:	f107 030a 	add.w	r3, r7, #10
 8001f88:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	4824      	ldr	r0, [pc, #144]	; (8002020 <QSPI_DummyCyclesCfg+0xf4>)
 8001f90:	f003 f966 	bl	8005260 <HAL_QSPI_Receive>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d002      	beq.n	8001fa0 <QSPI_DummyCyclesCfg+0x74>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
 8001f9a:	f06f 0304 	mvn.w	r3, #4
 8001f9e:	e03a      	b.n	8002016 <QSPI_DummyCyclesCfg+0xea>
  }

  /* Enable write operations */
  if (MT25TL01G_WriteEnable(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8001fa0:	4920      	ldr	r1, [pc, #128]	; (8002024 <QSPI_DummyCyclesCfg+0xf8>)
 8001fa2:	687a      	ldr	r2, [r7, #4]
 8001fa4:	4613      	mov	r3, r2
 8001fa6:	005b      	lsls	r3, r3, #1
 8001fa8:	4413      	add	r3, r2
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	440b      	add	r3, r1
 8001fae:	3301      	adds	r3, #1
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	481a      	ldr	r0, [pc, #104]	; (8002020 <QSPI_DummyCyclesCfg+0xf4>)
 8001fb6:	f7ff fa67 	bl	8001488 <MT25TL01G_WriteEnable>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d002      	beq.n	8001fc6 <QSPI_DummyCyclesCfg+0x9a>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
 8001fc0:	f06f 0304 	mvn.w	r3, #4
 8001fc4:	e027      	b.n	8002016 <QSPI_DummyCyclesCfg+0xea>
  }

  /* Update volatile configuration register (with new dummy cycles) */
  s_command.Instruction = MT25TL01G_WRITE_VOL_CFG_REG_CMD;
 8001fc6:	2381      	movs	r3, #129	; 0x81
 8001fc8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(reg, 0xF0F0, ((MT25TL01G_DUMMY_CYCLES_READ_QUAD << 4) |
 8001fca:	897a      	ldrh	r2, [r7, #10]
 8001fcc:	f640 730f 	movw	r3, #3855	; 0xf0f
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	b29a      	uxth	r2, r3
 8001fd4:	4b14      	ldr	r3, [pc, #80]	; (8002028 <QSPI_DummyCyclesCfg+0xfc>)
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	b29b      	uxth	r3, r3
 8001fda:	817b      	strh	r3, [r7, #10]
                               (MT25TL01G_DUMMY_CYCLES_READ_QUAD << 12)));

  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001fdc:	f107 030c 	add.w	r3, r7, #12
 8001fe0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	480e      	ldr	r0, [pc, #56]	; (8002020 <QSPI_DummyCyclesCfg+0xf4>)
 8001fe8:	f003 f84a 	bl	8005080 <HAL_QSPI_Command>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d002      	beq.n	8001ff8 <QSPI_DummyCyclesCfg+0xcc>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
 8001ff2:	f06f 0304 	mvn.w	r3, #4
 8001ff6:	e00e      	b.n	8002016 <QSPI_DummyCyclesCfg+0xea>
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(&hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001ff8:	f107 030a 	add.w	r3, r7, #10
 8001ffc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002000:	4619      	mov	r1, r3
 8002002:	4807      	ldr	r0, [pc, #28]	; (8002020 <QSPI_DummyCyclesCfg+0xf4>)
 8002004:	f003 f89a 	bl	800513c <HAL_QSPI_Transmit>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d002      	beq.n	8002014 <QSPI_DummyCyclesCfg+0xe8>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
 800200e:	f06f 0304 	mvn.w	r3, #4
 8002012:	e000      	b.n	8002016 <QSPI_DummyCyclesCfg+0xea>
  }

  /* Return BSP status */
  return ret;
 8002014:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8002016:	4618      	mov	r0, r3
 8002018:	3748      	adds	r7, #72	; 0x48
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	24000c94 	.word	0x24000c94
 8002024:	24000ce0 	.word	0x24000ce0
 8002028:	ffff8080 	.word	0xffff8080

0800202c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b082      	sub	sp, #8
 8002030:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002032:	2003      	movs	r0, #3
 8002034:	f001 f92c 	bl	8003290 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002038:	f004 fa64 	bl	8006504 <HAL_RCC_GetSysClockFreq>
 800203c:	4602      	mov	r2, r0
 800203e:	4b15      	ldr	r3, [pc, #84]	; (8002094 <HAL_Init+0x68>)
 8002040:	699b      	ldr	r3, [r3, #24]
 8002042:	0a1b      	lsrs	r3, r3, #8
 8002044:	f003 030f 	and.w	r3, r3, #15
 8002048:	4913      	ldr	r1, [pc, #76]	; (8002098 <HAL_Init+0x6c>)
 800204a:	5ccb      	ldrb	r3, [r1, r3]
 800204c:	f003 031f 	and.w	r3, r3, #31
 8002050:	fa22 f303 	lsr.w	r3, r2, r3
 8002054:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002056:	4b0f      	ldr	r3, [pc, #60]	; (8002094 <HAL_Init+0x68>)
 8002058:	699b      	ldr	r3, [r3, #24]
 800205a:	f003 030f 	and.w	r3, r3, #15
 800205e:	4a0e      	ldr	r2, [pc, #56]	; (8002098 <HAL_Init+0x6c>)
 8002060:	5cd3      	ldrb	r3, [r2, r3]
 8002062:	f003 031f 	and.w	r3, r3, #31
 8002066:	687a      	ldr	r2, [r7, #4]
 8002068:	fa22 f303 	lsr.w	r3, r2, r3
 800206c:	4a0b      	ldr	r2, [pc, #44]	; (800209c <HAL_Init+0x70>)
 800206e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002070:	4a0b      	ldr	r2, [pc, #44]	; (80020a0 <HAL_Init+0x74>)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002076:	2000      	movs	r0, #0
 8002078:	f000 f814 	bl	80020a4 <HAL_InitTick>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d001      	beq.n	8002086 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e002      	b.n	800208c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002086:	f7fe ff3b 	bl	8000f00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800208a:	2300      	movs	r3, #0
}
 800208c:	4618      	mov	r0, r3
 800208e:	3708      	adds	r7, #8
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	58024400 	.word	0x58024400
 8002098:	080117ac 	.word	0x080117ac
 800209c:	24000004 	.word	0x24000004
 80020a0:	24000000 	.word	0x24000000

080020a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b082      	sub	sp, #8
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80020ac:	4b15      	ldr	r3, [pc, #84]	; (8002104 <HAL_InitTick+0x60>)
 80020ae:	781b      	ldrb	r3, [r3, #0]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d101      	bne.n	80020b8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e021      	b.n	80020fc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80020b8:	4b13      	ldr	r3, [pc, #76]	; (8002108 <HAL_InitTick+0x64>)
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	4b11      	ldr	r3, [pc, #68]	; (8002104 <HAL_InitTick+0x60>)
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	4619      	mov	r1, r3
 80020c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80020ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80020ce:	4618      	mov	r0, r3
 80020d0:	f001 f911 	bl	80032f6 <HAL_SYSTICK_Config>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d001      	beq.n	80020de <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e00e      	b.n	80020fc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2b0f      	cmp	r3, #15
 80020e2:	d80a      	bhi.n	80020fa <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020e4:	2200      	movs	r2, #0
 80020e6:	6879      	ldr	r1, [r7, #4]
 80020e8:	f04f 30ff 	mov.w	r0, #4294967295
 80020ec:	f001 f8db 	bl	80032a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020f0:	4a06      	ldr	r2, [pc, #24]	; (800210c <HAL_InitTick+0x68>)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020f6:	2300      	movs	r3, #0
 80020f8:	e000      	b.n	80020fc <HAL_InitTick+0x58>
    return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	3708      	adds	r7, #8
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}
 8002104:	2400000c 	.word	0x2400000c
 8002108:	24000000 	.word	0x24000000
 800210c:	24000008 	.word	0x24000008

08002110 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002114:	4b06      	ldr	r3, [pc, #24]	; (8002130 <HAL_IncTick+0x20>)
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	461a      	mov	r2, r3
 800211a:	4b06      	ldr	r3, [pc, #24]	; (8002134 <HAL_IncTick+0x24>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4413      	add	r3, r2
 8002120:	4a04      	ldr	r2, [pc, #16]	; (8002134 <HAL_IncTick+0x24>)
 8002122:	6013      	str	r3, [r2, #0]
}
 8002124:	bf00      	nop
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr
 800212e:	bf00      	nop
 8002130:	2400000c 	.word	0x2400000c
 8002134:	24000cec 	.word	0x24000cec

08002138 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002138:	b480      	push	{r7}
 800213a:	af00      	add	r7, sp, #0
  return uwTick;
 800213c:	4b03      	ldr	r3, [pc, #12]	; (800214c <HAL_GetTick+0x14>)
 800213e:	681b      	ldr	r3, [r3, #0]
}
 8002140:	4618      	mov	r0, r3
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop
 800214c:	24000cec 	.word	0x24000cec

08002150 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b084      	sub	sp, #16
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002158:	f7ff ffee 	bl	8002138 <HAL_GetTick>
 800215c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002168:	d005      	beq.n	8002176 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800216a:	4b0a      	ldr	r3, [pc, #40]	; (8002194 <HAL_Delay+0x44>)
 800216c:	781b      	ldrb	r3, [r3, #0]
 800216e:	461a      	mov	r2, r3
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	4413      	add	r3, r2
 8002174:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002176:	bf00      	nop
 8002178:	f7ff ffde 	bl	8002138 <HAL_GetTick>
 800217c:	4602      	mov	r2, r0
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	68fa      	ldr	r2, [r7, #12]
 8002184:	429a      	cmp	r2, r3
 8002186:	d8f7      	bhi.n	8002178 <HAL_Delay+0x28>
  {
  }
}
 8002188:	bf00      	nop
 800218a:	bf00      	nop
 800218c:	3710      	adds	r7, #16
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	2400000c 	.word	0x2400000c

08002198 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800219c:	4b03      	ldr	r3, [pc, #12]	; (80021ac <HAL_GetREVID+0x14>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	0c1b      	lsrs	r3, r3, #16
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr
 80021ac:	5c001000 	.word	0x5c001000

080021b0 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 80021b0:	b480      	push	{r7}
 80021b2:	b083      	sub	sp, #12
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
 80021b8:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 80021ba:	4b07      	ldr	r3, [pc, #28]	; (80021d8 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80021bc:	685a      	ldr	r2, [r3, #4]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	43db      	mvns	r3, r3
 80021c2:	401a      	ands	r2, r3
 80021c4:	4904      	ldr	r1, [pc, #16]	; (80021d8 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	4313      	orrs	r3, r2
 80021ca:	604b      	str	r3, [r1, #4]
}
 80021cc:	bf00      	nop
 80021ce:	370c      	adds	r7, #12
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr
 80021d8:	58000400 	.word	0x58000400

080021dc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
 80021e4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	431a      	orrs	r2, r3
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	609a      	str	r2, [r3, #8]
}
 80021f6:	bf00      	nop
 80021f8:	370c      	adds	r7, #12
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr

08002202 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002202:	b480      	push	{r7}
 8002204:	b083      	sub	sp, #12
 8002206:	af00      	add	r7, sp, #0
 8002208:	6078      	str	r0, [r7, #4]
 800220a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	431a      	orrs	r2, r3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	609a      	str	r2, [r3, #8]
}
 800221c:	bf00      	nop
 800221e:	370c      	adds	r7, #12
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr

08002228 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002228:	b480      	push	{r7}
 800222a:	b083      	sub	sp, #12
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002238:	4618      	mov	r0, r3
 800223a:	370c      	adds	r7, #12
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr

08002244 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002244:	b480      	push	{r7}
 8002246:	b087      	sub	sp, #28
 8002248:	af00      	add	r7, sp, #0
 800224a:	60f8      	str	r0, [r7, #12]
 800224c:	60b9      	str	r1, [r7, #8]
 800224e:	607a      	str	r2, [r7, #4]
 8002250:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	3360      	adds	r3, #96	; 0x60
 8002256:	461a      	mov	r2, r3
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	4413      	add	r3, r2
 800225e:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	430b      	orrs	r3, r1
 8002272:	431a      	orrs	r2, r3
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002278:	bf00      	nop
 800227a:	371c      	adds	r7, #28
 800227c:	46bd      	mov	sp, r7
 800227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002282:	4770      	bx	lr

08002284 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002284:	b480      	push	{r7}
 8002286:	b085      	sub	sp, #20
 8002288:	af00      	add	r7, sp, #0
 800228a:	60f8      	str	r0, [r7, #12]
 800228c:	60b9      	str	r1, [r7, #8]
 800228e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	691b      	ldr	r3, [r3, #16]
 8002294:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	f003 031f 	and.w	r3, r3, #31
 800229e:	6879      	ldr	r1, [r7, #4]
 80022a0:	fa01 f303 	lsl.w	r3, r1, r3
 80022a4:	431a      	orrs	r2, r3
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	611a      	str	r2, [r3, #16]
}
 80022aa:	bf00      	nop
 80022ac:	3714      	adds	r7, #20
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr

080022b6 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80022b6:	b480      	push	{r7}
 80022b8:	b087      	sub	sp, #28
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	60f8      	str	r0, [r7, #12]
 80022be:	60b9      	str	r1, [r7, #8]
 80022c0:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	3360      	adds	r3, #96	; 0x60
 80022c6:	461a      	mov	r2, r3
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	4413      	add	r3, r2
 80022ce:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	431a      	orrs	r2, r3
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	601a      	str	r2, [r3, #0]
  }
}
 80022e0:	bf00      	nop
 80022e2:	371c      	adds	r7, #28
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr

080022ec <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b087      	sub	sp, #28
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	60f8      	str	r0, [r7, #12]
 80022f4:	60b9      	str	r1, [r7, #8]
 80022f6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	3330      	adds	r3, #48	; 0x30
 80022fc:	461a      	mov	r2, r3
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	0a1b      	lsrs	r3, r3, #8
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	f003 030c 	and.w	r3, r3, #12
 8002308:	4413      	add	r3, r2
 800230a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	f003 031f 	and.w	r3, r3, #31
 8002316:	211f      	movs	r1, #31
 8002318:	fa01 f303 	lsl.w	r3, r1, r3
 800231c:	43db      	mvns	r3, r3
 800231e:	401a      	ands	r2, r3
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	0e9b      	lsrs	r3, r3, #26
 8002324:	f003 011f 	and.w	r1, r3, #31
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	f003 031f 	and.w	r3, r3, #31
 800232e:	fa01 f303 	lsl.w	r3, r1, r3
 8002332:	431a      	orrs	r2, r3
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002338:	bf00      	nop
 800233a:	371c      	adds	r7, #28
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr

08002344 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002344:	b480      	push	{r7}
 8002346:	b087      	sub	sp, #28
 8002348:	af00      	add	r7, sp, #0
 800234a:	60f8      	str	r0, [r7, #12]
 800234c:	60b9      	str	r1, [r7, #8]
 800234e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	3314      	adds	r3, #20
 8002354:	461a      	mov	r2, r3
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	0e5b      	lsrs	r3, r3, #25
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	f003 0304 	and.w	r3, r3, #4
 8002360:	4413      	add	r3, r2
 8002362:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	0d1b      	lsrs	r3, r3, #20
 800236c:	f003 031f 	and.w	r3, r3, #31
 8002370:	2107      	movs	r1, #7
 8002372:	fa01 f303 	lsl.w	r3, r1, r3
 8002376:	43db      	mvns	r3, r3
 8002378:	401a      	ands	r2, r3
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	0d1b      	lsrs	r3, r3, #20
 800237e:	f003 031f 	and.w	r3, r3, #31
 8002382:	6879      	ldr	r1, [r7, #4]
 8002384:	fa01 f303 	lsl.w	r3, r1, r3
 8002388:	431a      	orrs	r2, r3
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800238e:	bf00      	nop
 8002390:	371c      	adds	r7, #28
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
	...

0800239c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800239c:	b480      	push	{r7}
 800239e:	b085      	sub	sp, #20
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	60f8      	str	r0, [r7, #12]
 80023a4:	60b9      	str	r1, [r7, #8]
 80023a6:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80023b4:	43db      	mvns	r3, r3
 80023b6:	401a      	ands	r2, r3
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	f003 0318 	and.w	r3, r3, #24
 80023be:	4908      	ldr	r1, [pc, #32]	; (80023e0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80023c0:	40d9      	lsrs	r1, r3
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	400b      	ands	r3, r1
 80023c6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80023ca:	431a      	orrs	r2, r3
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80023d2:	bf00      	nop
 80023d4:	3714      	adds	r7, #20
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr
 80023de:	bf00      	nop
 80023e0:	000fffff 	.word	0x000fffff

080023e4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	689a      	ldr	r2, [r3, #8]
 80023f0:	4b04      	ldr	r3, [pc, #16]	; (8002404 <LL_ADC_DisableDeepPowerDown+0x20>)
 80023f2:	4013      	ands	r3, r2
 80023f4:	687a      	ldr	r2, [r7, #4]
 80023f6:	6093      	str	r3, [r2, #8]
}
 80023f8:	bf00      	nop
 80023fa:	370c      	adds	r7, #12
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr
 8002404:	5fffffc0 	.word	0x5fffffc0

08002408 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002418:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800241c:	d101      	bne.n	8002422 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800241e:	2301      	movs	r3, #1
 8002420:	e000      	b.n	8002424 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002422:	2300      	movs	r3, #0
}
 8002424:	4618      	mov	r0, r3
 8002426:	370c      	adds	r7, #12
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr

08002430 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	689a      	ldr	r2, [r3, #8]
 800243c:	4b05      	ldr	r3, [pc, #20]	; (8002454 <LL_ADC_EnableInternalRegulator+0x24>)
 800243e:	4013      	ands	r3, r2
 8002440:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002448:	bf00      	nop
 800244a:	370c      	adds	r7, #12
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr
 8002454:	6fffffc0 	.word	0x6fffffc0

08002458 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002458:	b480      	push	{r7}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002468:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800246c:	d101      	bne.n	8002472 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800246e:	2301      	movs	r3, #1
 8002470:	e000      	b.n	8002474 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002472:	2300      	movs	r3, #0
}
 8002474:	4618      	mov	r0, r3
 8002476:	370c      	adds	r7, #12
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr

08002480 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002480:	b480      	push	{r7}
 8002482:	b083      	sub	sp, #12
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	f003 0301 	and.w	r3, r3, #1
 8002490:	2b01      	cmp	r3, #1
 8002492:	d101      	bne.n	8002498 <LL_ADC_IsEnabled+0x18>
 8002494:	2301      	movs	r3, #1
 8002496:	e000      	b.n	800249a <LL_ADC_IsEnabled+0x1a>
 8002498:	2300      	movs	r3, #0
}
 800249a:	4618      	mov	r0, r3
 800249c:	370c      	adds	r7, #12
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr

080024a6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80024a6:	b480      	push	{r7}
 80024a8:	b083      	sub	sp, #12
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	f003 0304 	and.w	r3, r3, #4
 80024b6:	2b04      	cmp	r3, #4
 80024b8:	d101      	bne.n	80024be <LL_ADC_REG_IsConversionOngoing+0x18>
 80024ba:	2301      	movs	r3, #1
 80024bc:	e000      	b.n	80024c0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80024be:	2300      	movs	r3, #0
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	370c      	adds	r7, #12
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr

080024cc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b083      	sub	sp, #12
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	f003 0308 	and.w	r3, r3, #8
 80024dc:	2b08      	cmp	r3, #8
 80024de:	d101      	bne.n	80024e4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80024e0:	2301      	movs	r3, #1
 80024e2:	e000      	b.n	80024e6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80024e4:	2300      	movs	r3, #0
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	370c      	adds	r7, #12
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr
	...

080024f4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80024f4:	b590      	push	{r4, r7, lr}
 80024f6:	b089      	sub	sp, #36	; 0x24
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024fc:	2300      	movs	r3, #0
 80024fe:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002500:	2300      	movs	r3, #0
 8002502:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d101      	bne.n	800250e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e18f      	b.n	800282e <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	68db      	ldr	r3, [r3, #12]
 8002512:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002518:	2b00      	cmp	r3, #0
 800251a:	d109      	bne.n	8002530 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	f7fe fd09 	bl	8000f34 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2200      	movs	r2, #0
 8002526:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2200      	movs	r2, #0
 800252c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4618      	mov	r0, r3
 8002536:	f7ff ff67 	bl	8002408 <LL_ADC_IsDeepPowerDownEnabled>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d004      	beq.n	800254a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4618      	mov	r0, r3
 8002546:	f7ff ff4d 	bl	80023e4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4618      	mov	r0, r3
 8002550:	f7ff ff82 	bl	8002458 <LL_ADC_IsInternalRegulatorEnabled>
 8002554:	4603      	mov	r3, r0
 8002556:	2b00      	cmp	r3, #0
 8002558:	d114      	bne.n	8002584 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4618      	mov	r0, r3
 8002560:	f7ff ff66 	bl	8002430 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002564:	4b87      	ldr	r3, [pc, #540]	; (8002784 <HAL_ADC_Init+0x290>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	099b      	lsrs	r3, r3, #6
 800256a:	4a87      	ldr	r2, [pc, #540]	; (8002788 <HAL_ADC_Init+0x294>)
 800256c:	fba2 2303 	umull	r2, r3, r2, r3
 8002570:	099b      	lsrs	r3, r3, #6
 8002572:	3301      	adds	r3, #1
 8002574:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002576:	e002      	b.n	800257e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	3b01      	subs	r3, #1
 800257c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d1f9      	bne.n	8002578 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4618      	mov	r0, r3
 800258a:	f7ff ff65 	bl	8002458 <LL_ADC_IsInternalRegulatorEnabled>
 800258e:	4603      	mov	r3, r0
 8002590:	2b00      	cmp	r3, #0
 8002592:	d10d      	bne.n	80025b0 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002598:	f043 0210 	orr.w	r2, r3, #16
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025a4:	f043 0201 	orr.w	r2, r3, #1
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4618      	mov	r0, r3
 80025b6:	f7ff ff76 	bl	80024a6 <LL_ADC_REG_IsConversionOngoing>
 80025ba:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025c0:	f003 0310 	and.w	r3, r3, #16
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	f040 8129 	bne.w	800281c <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	f040 8125 	bne.w	800281c <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025d6:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80025da:	f043 0202 	orr.w	r2, r3, #2
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4618      	mov	r0, r3
 80025e8:	f7ff ff4a 	bl	8002480 <LL_ADC_IsEnabled>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d136      	bne.n	8002660 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a65      	ldr	r2, [pc, #404]	; (800278c <HAL_ADC_Init+0x298>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d004      	beq.n	8002606 <HAL_ADC_Init+0x112>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a63      	ldr	r2, [pc, #396]	; (8002790 <HAL_ADC_Init+0x29c>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d10e      	bne.n	8002624 <HAL_ADC_Init+0x130>
 8002606:	4861      	ldr	r0, [pc, #388]	; (800278c <HAL_ADC_Init+0x298>)
 8002608:	f7ff ff3a 	bl	8002480 <LL_ADC_IsEnabled>
 800260c:	4604      	mov	r4, r0
 800260e:	4860      	ldr	r0, [pc, #384]	; (8002790 <HAL_ADC_Init+0x29c>)
 8002610:	f7ff ff36 	bl	8002480 <LL_ADC_IsEnabled>
 8002614:	4603      	mov	r3, r0
 8002616:	4323      	orrs	r3, r4
 8002618:	2b00      	cmp	r3, #0
 800261a:	bf0c      	ite	eq
 800261c:	2301      	moveq	r3, #1
 800261e:	2300      	movne	r3, #0
 8002620:	b2db      	uxtb	r3, r3
 8002622:	e008      	b.n	8002636 <HAL_ADC_Init+0x142>
 8002624:	485b      	ldr	r0, [pc, #364]	; (8002794 <HAL_ADC_Init+0x2a0>)
 8002626:	f7ff ff2b 	bl	8002480 <LL_ADC_IsEnabled>
 800262a:	4603      	mov	r3, r0
 800262c:	2b00      	cmp	r3, #0
 800262e:	bf0c      	ite	eq
 8002630:	2301      	moveq	r3, #1
 8002632:	2300      	movne	r3, #0
 8002634:	b2db      	uxtb	r3, r3
 8002636:	2b00      	cmp	r3, #0
 8002638:	d012      	beq.n	8002660 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a53      	ldr	r2, [pc, #332]	; (800278c <HAL_ADC_Init+0x298>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d004      	beq.n	800264e <HAL_ADC_Init+0x15a>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a51      	ldr	r2, [pc, #324]	; (8002790 <HAL_ADC_Init+0x29c>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d101      	bne.n	8002652 <HAL_ADC_Init+0x15e>
 800264e:	4a52      	ldr	r2, [pc, #328]	; (8002798 <HAL_ADC_Init+0x2a4>)
 8002650:	e000      	b.n	8002654 <HAL_ADC_Init+0x160>
 8002652:	4a52      	ldr	r2, [pc, #328]	; (800279c <HAL_ADC_Init+0x2a8>)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	4619      	mov	r1, r3
 800265a:	4610      	mov	r0, r2
 800265c:	f7ff fdbe 	bl	80021dc <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002660:	f7ff fd9a 	bl	8002198 <HAL_GetREVID>
 8002664:	4603      	mov	r3, r0
 8002666:	f241 0203 	movw	r2, #4099	; 0x1003
 800266a:	4293      	cmp	r3, r2
 800266c:	d914      	bls.n	8002698 <HAL_ADC_Init+0x1a4>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	2b10      	cmp	r3, #16
 8002674:	d110      	bne.n	8002698 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	7d5b      	ldrb	r3, [r3, #21]
 800267a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002680:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002686:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	7f1b      	ldrb	r3, [r3, #28]
 800268c:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800268e:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002690:	f043 030c 	orr.w	r3, r3, #12
 8002694:	61bb      	str	r3, [r7, #24]
 8002696:	e00d      	b.n	80026b4 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	7d5b      	ldrb	r3, [r3, #21]
 800269c:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80026a2:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80026a8:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	7f1b      	ldrb	r3, [r3, #28]
 80026ae:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80026b0:	4313      	orrs	r3, r2
 80026b2:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	7f1b      	ldrb	r3, [r3, #28]
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d106      	bne.n	80026ca <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6a1b      	ldr	r3, [r3, #32]
 80026c0:	3b01      	subs	r3, #1
 80026c2:	045b      	lsls	r3, r3, #17
 80026c4:	69ba      	ldr	r2, [r7, #24]
 80026c6:	4313      	orrs	r3, r2
 80026c8:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d009      	beq.n	80026e6 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d6:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026de:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80026e0:	69ba      	ldr	r2, [r7, #24]
 80026e2:	4313      	orrs	r3, r2
 80026e4:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	68da      	ldr	r2, [r3, #12]
 80026ec:	4b2c      	ldr	r3, [pc, #176]	; (80027a0 <HAL_ADC_Init+0x2ac>)
 80026ee:	4013      	ands	r3, r2
 80026f0:	687a      	ldr	r2, [r7, #4]
 80026f2:	6812      	ldr	r2, [r2, #0]
 80026f4:	69b9      	ldr	r1, [r7, #24]
 80026f6:	430b      	orrs	r3, r1
 80026f8:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4618      	mov	r0, r3
 8002700:	f7ff fed1 	bl	80024a6 <LL_ADC_REG_IsConversionOngoing>
 8002704:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4618      	mov	r0, r3
 800270c:	f7ff fede 	bl	80024cc <LL_ADC_INJ_IsConversionOngoing>
 8002710:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d15f      	bne.n	80027d8 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d15c      	bne.n	80027d8 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	7d1b      	ldrb	r3, [r3, #20]
 8002722:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8002728:	4313      	orrs	r3, r2
 800272a:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	68da      	ldr	r2, [r3, #12]
 8002732:	4b1c      	ldr	r3, [pc, #112]	; (80027a4 <HAL_ADC_Init+0x2b0>)
 8002734:	4013      	ands	r3, r2
 8002736:	687a      	ldr	r2, [r7, #4]
 8002738:	6812      	ldr	r2, [r2, #0]
 800273a:	69b9      	ldr	r1, [r7, #24]
 800273c:	430b      	orrs	r3, r1
 800273e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002746:	2b01      	cmp	r3, #1
 8002748:	d130      	bne.n	80027ac <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800274e:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	691a      	ldr	r2, [r3, #16]
 8002756:	4b14      	ldr	r3, [pc, #80]	; (80027a8 <HAL_ADC_Init+0x2b4>)
 8002758:	4013      	ands	r3, r2
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800275e:	3a01      	subs	r2, #1
 8002760:	0411      	lsls	r1, r2, #16
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002766:	4311      	orrs	r1, r2
 8002768:	687a      	ldr	r2, [r7, #4]
 800276a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800276c:	4311      	orrs	r1, r2
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002772:	430a      	orrs	r2, r1
 8002774:	431a      	orrs	r2, r3
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f042 0201 	orr.w	r2, r2, #1
 800277e:	611a      	str	r2, [r3, #16]
 8002780:	e01c      	b.n	80027bc <HAL_ADC_Init+0x2c8>
 8002782:	bf00      	nop
 8002784:	24000000 	.word	0x24000000
 8002788:	053e2d63 	.word	0x053e2d63
 800278c:	40022000 	.word	0x40022000
 8002790:	40022100 	.word	0x40022100
 8002794:	58026000 	.word	0x58026000
 8002798:	40022300 	.word	0x40022300
 800279c:	58026300 	.word	0x58026300
 80027a0:	fff0c003 	.word	0xfff0c003
 80027a4:	ffffbffc 	.word	0xffffbffc
 80027a8:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	691a      	ldr	r2, [r3, #16]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f022 0201 	bic.w	r2, r2, #1
 80027ba:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	691b      	ldr	r3, [r3, #16]
 80027c2:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	430a      	orrs	r2, r1
 80027d0:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f000 fb80 	bl	8002ed8 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d10c      	bne.n	80027fa <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e6:	f023 010f 	bic.w	r1, r3, #15
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	699b      	ldr	r3, [r3, #24]
 80027ee:	1e5a      	subs	r2, r3, #1
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	430a      	orrs	r2, r1
 80027f6:	631a      	str	r2, [r3, #48]	; 0x30
 80027f8:	e007      	b.n	800280a <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f022 020f 	bic.w	r2, r2, #15
 8002808:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800280e:	f023 0303 	bic.w	r3, r3, #3
 8002812:	f043 0201 	orr.w	r2, r3, #1
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	655a      	str	r2, [r3, #84]	; 0x54
 800281a:	e007      	b.n	800282c <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002820:	f043 0210 	orr.w	r2, r3, #16
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800282c:	7ffb      	ldrb	r3, [r7, #31]
}
 800282e:	4618      	mov	r0, r3
 8002830:	3724      	adds	r7, #36	; 0x24
 8002832:	46bd      	mov	sp, r7
 8002834:	bd90      	pop	{r4, r7, pc}
 8002836:	bf00      	nop

08002838 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002838:	b590      	push	{r4, r7, lr}
 800283a:	b0a1      	sub	sp, #132	; 0x84
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
 8002840:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002842:	2300      	movs	r3, #0
 8002844:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002848:	2300      	movs	r3, #0
 800284a:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	4a9d      	ldr	r2, [pc, #628]	; (8002ac8 <HAL_ADC_ConfigChannel+0x290>)
 8002852:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800285a:	2b01      	cmp	r3, #1
 800285c:	d101      	bne.n	8002862 <HAL_ADC_ConfigChannel+0x2a>
 800285e:	2302      	movs	r3, #2
 8002860:	e321      	b.n	8002ea6 <HAL_ADC_ConfigChannel+0x66e>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2201      	movs	r2, #1
 8002866:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4618      	mov	r0, r3
 8002870:	f7ff fe19 	bl	80024a6 <LL_ADC_REG_IsConversionOngoing>
 8002874:	4603      	mov	r3, r0
 8002876:	2b00      	cmp	r3, #0
 8002878:	f040 8306 	bne.w	8002e88 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002884:	2b00      	cmp	r3, #0
 8002886:	d108      	bne.n	800289a <HAL_ADC_ConfigChannel+0x62>
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	0e9b      	lsrs	r3, r3, #26
 800288e:	f003 031f 	and.w	r3, r3, #31
 8002892:	2201      	movs	r2, #1
 8002894:	fa02 f303 	lsl.w	r3, r2, r3
 8002898:	e016      	b.n	80028c8 <HAL_ADC_ConfigChannel+0x90>
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80028a2:	fa93 f3a3 	rbit	r3, r3
 80028a6:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 80028a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80028aa:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 80028ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d101      	bne.n	80028b6 <HAL_ADC_ConfigChannel+0x7e>
    return 32U;
 80028b2:	2320      	movs	r3, #32
 80028b4:	e003      	b.n	80028be <HAL_ADC_ConfigChannel+0x86>
  return __builtin_clz(value);
 80028b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80028b8:	fab3 f383 	clz	r3, r3
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	f003 031f 	and.w	r3, r3, #31
 80028c2:	2201      	movs	r2, #1
 80028c4:	fa02 f303 	lsl.w	r3, r2, r3
 80028c8:	687a      	ldr	r2, [r7, #4]
 80028ca:	6812      	ldr	r2, [r2, #0]
 80028cc:	69d1      	ldr	r1, [r2, #28]
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	6812      	ldr	r2, [r2, #0]
 80028d2:	430b      	orrs	r3, r1
 80028d4:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6818      	ldr	r0, [r3, #0]
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	6859      	ldr	r1, [r3, #4]
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	461a      	mov	r2, r3
 80028e4:	f7ff fd02 	bl	80022ec <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4618      	mov	r0, r3
 80028ee:	f7ff fdda 	bl	80024a6 <LL_ADC_REG_IsConversionOngoing>
 80028f2:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4618      	mov	r0, r3
 80028fa:	f7ff fde7 	bl	80024cc <LL_ADC_INJ_IsConversionOngoing>
 80028fe:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002900:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002902:	2b00      	cmp	r3, #0
 8002904:	f040 80b3 	bne.w	8002a6e <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002908:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800290a:	2b00      	cmp	r3, #0
 800290c:	f040 80af 	bne.w	8002a6e <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6818      	ldr	r0, [r3, #0]
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	6819      	ldr	r1, [r3, #0]
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	461a      	mov	r2, r3
 800291e:	f7ff fd11 	bl	8002344 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002922:	4b6a      	ldr	r3, [pc, #424]	; (8002acc <HAL_ADC_ConfigChannel+0x294>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800292a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800292e:	d10b      	bne.n	8002948 <HAL_ADC_ConfigChannel+0x110>
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	695a      	ldr	r2, [r3, #20]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	68db      	ldr	r3, [r3, #12]
 800293a:	089b      	lsrs	r3, r3, #2
 800293c:	f003 0307 	and.w	r3, r3, #7
 8002940:	005b      	lsls	r3, r3, #1
 8002942:	fa02 f303 	lsl.w	r3, r2, r3
 8002946:	e01d      	b.n	8002984 <HAL_ADC_ConfigChannel+0x14c>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	68db      	ldr	r3, [r3, #12]
 800294e:	f003 0310 	and.w	r3, r3, #16
 8002952:	2b00      	cmp	r3, #0
 8002954:	d10b      	bne.n	800296e <HAL_ADC_ConfigChannel+0x136>
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	695a      	ldr	r2, [r3, #20]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	089b      	lsrs	r3, r3, #2
 8002962:	f003 0307 	and.w	r3, r3, #7
 8002966:	005b      	lsls	r3, r3, #1
 8002968:	fa02 f303 	lsl.w	r3, r2, r3
 800296c:	e00a      	b.n	8002984 <HAL_ADC_ConfigChannel+0x14c>
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	695a      	ldr	r2, [r3, #20]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	089b      	lsrs	r3, r3, #2
 800297a:	f003 0304 	and.w	r3, r3, #4
 800297e:	005b      	lsls	r3, r3, #1
 8002980:	fa02 f303 	lsl.w	r3, r2, r3
 8002984:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	691b      	ldr	r3, [r3, #16]
 800298a:	2b04      	cmp	r3, #4
 800298c:	d027      	beq.n	80029de <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6818      	ldr	r0, [r3, #0]
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	6919      	ldr	r1, [r3, #16]
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800299c:	f7ff fc52 	bl	8002244 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6818      	ldr	r0, [r3, #0]
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	6919      	ldr	r1, [r3, #16]
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	7e5b      	ldrb	r3, [r3, #25]
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d102      	bne.n	80029b6 <HAL_ADC_ConfigChannel+0x17e>
 80029b0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80029b4:	e000      	b.n	80029b8 <HAL_ADC_ConfigChannel+0x180>
 80029b6:	2300      	movs	r3, #0
 80029b8:	461a      	mov	r2, r3
 80029ba:	f7ff fc7c 	bl	80022b6 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6818      	ldr	r0, [r3, #0]
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	6919      	ldr	r1, [r3, #16]
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	7e1b      	ldrb	r3, [r3, #24]
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d102      	bne.n	80029d4 <HAL_ADC_ConfigChannel+0x19c>
 80029ce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80029d2:	e000      	b.n	80029d6 <HAL_ADC_ConfigChannel+0x19e>
 80029d4:	2300      	movs	r3, #0
 80029d6:	461a      	mov	r2, r3
 80029d8:	f7ff fc54 	bl	8002284 <LL_ADC_SetDataRightShift>
 80029dc:	e047      	b.n	8002a6e <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029e4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	069b      	lsls	r3, r3, #26
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d107      	bne.n	8002a02 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002a00:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a08:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	069b      	lsls	r3, r3, #26
 8002a12:	429a      	cmp	r2, r3
 8002a14:	d107      	bne.n	8002a26 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002a24:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a2c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	069b      	lsls	r3, r3, #26
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d107      	bne.n	8002a4a <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002a48:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a50:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	069b      	lsls	r3, r3, #26
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	d107      	bne.n	8002a6e <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002a6c:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4618      	mov	r0, r3
 8002a74:	f7ff fd04 	bl	8002480 <LL_ADC_IsEnabled>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	f040 820d 	bne.w	8002e9a <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6818      	ldr	r0, [r3, #0]
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	6819      	ldr	r1, [r3, #0]
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	f7ff fc85 	bl	800239c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	68db      	ldr	r3, [r3, #12]
 8002a96:	4a0c      	ldr	r2, [pc, #48]	; (8002ac8 <HAL_ADC_ConfigChannel+0x290>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	f040 8133 	bne.w	8002d04 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d110      	bne.n	8002ad0 <HAL_ADC_ConfigChannel+0x298>
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	0e9b      	lsrs	r3, r3, #26
 8002ab4:	3301      	adds	r3, #1
 8002ab6:	f003 031f 	and.w	r3, r3, #31
 8002aba:	2b09      	cmp	r3, #9
 8002abc:	bf94      	ite	ls
 8002abe:	2301      	movls	r3, #1
 8002ac0:	2300      	movhi	r3, #0
 8002ac2:	b2db      	uxtb	r3, r3
 8002ac4:	e01e      	b.n	8002b04 <HAL_ADC_ConfigChannel+0x2cc>
 8002ac6:	bf00      	nop
 8002ac8:	47ff0000 	.word	0x47ff0000
 8002acc:	5c001000 	.word	0x5c001000
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ad8:	fa93 f3a3 	rbit	r3, r3
 8002adc:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002ade:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ae0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002ae2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d101      	bne.n	8002aec <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8002ae8:	2320      	movs	r3, #32
 8002aea:	e003      	b.n	8002af4 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8002aec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002aee:	fab3 f383 	clz	r3, r3
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	3301      	adds	r3, #1
 8002af6:	f003 031f 	and.w	r3, r3, #31
 8002afa:	2b09      	cmp	r3, #9
 8002afc:	bf94      	ite	ls
 8002afe:	2301      	movls	r3, #1
 8002b00:	2300      	movhi	r3, #0
 8002b02:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d079      	beq.n	8002bfc <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d107      	bne.n	8002b24 <HAL_ADC_ConfigChannel+0x2ec>
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	0e9b      	lsrs	r3, r3, #26
 8002b1a:	3301      	adds	r3, #1
 8002b1c:	069b      	lsls	r3, r3, #26
 8002b1e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b22:	e015      	b.n	8002b50 <HAL_ADC_ConfigChannel+0x318>
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b2c:	fa93 f3a3 	rbit	r3, r3
 8002b30:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002b32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b34:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002b36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d101      	bne.n	8002b40 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8002b3c:	2320      	movs	r3, #32
 8002b3e:	e003      	b.n	8002b48 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002b40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b42:	fab3 f383 	clz	r3, r3
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	3301      	adds	r3, #1
 8002b4a:	069b      	lsls	r3, r3, #26
 8002b4c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d109      	bne.n	8002b70 <HAL_ADC_ConfigChannel+0x338>
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	0e9b      	lsrs	r3, r3, #26
 8002b62:	3301      	adds	r3, #1
 8002b64:	f003 031f 	and.w	r3, r3, #31
 8002b68:	2101      	movs	r1, #1
 8002b6a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b6e:	e017      	b.n	8002ba0 <HAL_ADC_ConfigChannel+0x368>
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b78:	fa93 f3a3 	rbit	r3, r3
 8002b7c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002b7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b80:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002b82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d101      	bne.n	8002b8c <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8002b88:	2320      	movs	r3, #32
 8002b8a:	e003      	b.n	8002b94 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8002b8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b8e:	fab3 f383 	clz	r3, r3
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	3301      	adds	r3, #1
 8002b96:	f003 031f 	and.w	r3, r3, #31
 8002b9a:	2101      	movs	r1, #1
 8002b9c:	fa01 f303 	lsl.w	r3, r1, r3
 8002ba0:	ea42 0103 	orr.w	r1, r2, r3
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d10a      	bne.n	8002bc6 <HAL_ADC_ConfigChannel+0x38e>
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	0e9b      	lsrs	r3, r3, #26
 8002bb6:	3301      	adds	r3, #1
 8002bb8:	f003 021f 	and.w	r2, r3, #31
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	005b      	lsls	r3, r3, #1
 8002bc0:	4413      	add	r3, r2
 8002bc2:	051b      	lsls	r3, r3, #20
 8002bc4:	e018      	b.n	8002bf8 <HAL_ADC_ConfigChannel+0x3c0>
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bce:	fa93 f3a3 	rbit	r3, r3
 8002bd2:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bd6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d101      	bne.n	8002be2 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8002bde:	2320      	movs	r3, #32
 8002be0:	e003      	b.n	8002bea <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8002be2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002be4:	fab3 f383 	clz	r3, r3
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	3301      	adds	r3, #1
 8002bec:	f003 021f 	and.w	r2, r3, #31
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	005b      	lsls	r3, r3, #1
 8002bf4:	4413      	add	r3, r2
 8002bf6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002bf8:	430b      	orrs	r3, r1
 8002bfa:	e07e      	b.n	8002cfa <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d107      	bne.n	8002c18 <HAL_ADC_ConfigChannel+0x3e0>
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	0e9b      	lsrs	r3, r3, #26
 8002c0e:	3301      	adds	r3, #1
 8002c10:	069b      	lsls	r3, r3, #26
 8002c12:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c16:	e015      	b.n	8002c44 <HAL_ADC_ConfigChannel+0x40c>
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c20:	fa93 f3a3 	rbit	r3, r3
 8002c24:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c28:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d101      	bne.n	8002c34 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002c30:	2320      	movs	r3, #32
 8002c32:	e003      	b.n	8002c3c <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c36:	fab3 f383 	clz	r3, r3
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	3301      	adds	r3, #1
 8002c3e:	069b      	lsls	r3, r3, #26
 8002c40:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d109      	bne.n	8002c64 <HAL_ADC_ConfigChannel+0x42c>
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	0e9b      	lsrs	r3, r3, #26
 8002c56:	3301      	adds	r3, #1
 8002c58:	f003 031f 	and.w	r3, r3, #31
 8002c5c:	2101      	movs	r1, #1
 8002c5e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c62:	e017      	b.n	8002c94 <HAL_ADC_ConfigChannel+0x45c>
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	fa93 f3a3 	rbit	r3, r3
 8002c70:	61bb      	str	r3, [r7, #24]
  return result;
 8002c72:	69bb      	ldr	r3, [r7, #24]
 8002c74:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002c76:	6a3b      	ldr	r3, [r7, #32]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d101      	bne.n	8002c80 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8002c7c:	2320      	movs	r3, #32
 8002c7e:	e003      	b.n	8002c88 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8002c80:	6a3b      	ldr	r3, [r7, #32]
 8002c82:	fab3 f383 	clz	r3, r3
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	3301      	adds	r3, #1
 8002c8a:	f003 031f 	and.w	r3, r3, #31
 8002c8e:	2101      	movs	r1, #1
 8002c90:	fa01 f303 	lsl.w	r3, r1, r3
 8002c94:	ea42 0103 	orr.w	r1, r2, r3
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d10d      	bne.n	8002cc0 <HAL_ADC_ConfigChannel+0x488>
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	0e9b      	lsrs	r3, r3, #26
 8002caa:	3301      	adds	r3, #1
 8002cac:	f003 021f 	and.w	r2, r3, #31
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	005b      	lsls	r3, r3, #1
 8002cb4:	4413      	add	r3, r2
 8002cb6:	3b1e      	subs	r3, #30
 8002cb8:	051b      	lsls	r3, r3, #20
 8002cba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002cbe:	e01b      	b.n	8002cf8 <HAL_ADC_ConfigChannel+0x4c0>
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	fa93 f3a3 	rbit	r3, r3
 8002ccc:	60fb      	str	r3, [r7, #12]
  return result;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d101      	bne.n	8002cdc <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8002cd8:	2320      	movs	r3, #32
 8002cda:	e003      	b.n	8002ce4 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	fab3 f383 	clz	r3, r3
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	3301      	adds	r3, #1
 8002ce6:	f003 021f 	and.w	r2, r3, #31
 8002cea:	4613      	mov	r3, r2
 8002cec:	005b      	lsls	r3, r3, #1
 8002cee:	4413      	add	r3, r2
 8002cf0:	3b1e      	subs	r3, #30
 8002cf2:	051b      	lsls	r3, r3, #20
 8002cf4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002cf8:	430b      	orrs	r3, r1
 8002cfa:	683a      	ldr	r2, [r7, #0]
 8002cfc:	6892      	ldr	r2, [r2, #8]
 8002cfe:	4619      	mov	r1, r3
 8002d00:	f7ff fb20 	bl	8002344 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	f280 80c6 	bge.w	8002e9a <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a67      	ldr	r2, [pc, #412]	; (8002eb0 <HAL_ADC_ConfigChannel+0x678>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d004      	beq.n	8002d22 <HAL_ADC_ConfigChannel+0x4ea>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a65      	ldr	r2, [pc, #404]	; (8002eb4 <HAL_ADC_ConfigChannel+0x67c>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d101      	bne.n	8002d26 <HAL_ADC_ConfigChannel+0x4ee>
 8002d22:	4b65      	ldr	r3, [pc, #404]	; (8002eb8 <HAL_ADC_ConfigChannel+0x680>)
 8002d24:	e000      	b.n	8002d28 <HAL_ADC_ConfigChannel+0x4f0>
 8002d26:	4b65      	ldr	r3, [pc, #404]	; (8002ebc <HAL_ADC_ConfigChannel+0x684>)
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f7ff fa7d 	bl	8002228 <LL_ADC_GetCommonPathInternalCh>
 8002d2e:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a5e      	ldr	r2, [pc, #376]	; (8002eb0 <HAL_ADC_ConfigChannel+0x678>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d004      	beq.n	8002d44 <HAL_ADC_ConfigChannel+0x50c>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a5d      	ldr	r2, [pc, #372]	; (8002eb4 <HAL_ADC_ConfigChannel+0x67c>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d10e      	bne.n	8002d62 <HAL_ADC_ConfigChannel+0x52a>
 8002d44:	485a      	ldr	r0, [pc, #360]	; (8002eb0 <HAL_ADC_ConfigChannel+0x678>)
 8002d46:	f7ff fb9b 	bl	8002480 <LL_ADC_IsEnabled>
 8002d4a:	4604      	mov	r4, r0
 8002d4c:	4859      	ldr	r0, [pc, #356]	; (8002eb4 <HAL_ADC_ConfigChannel+0x67c>)
 8002d4e:	f7ff fb97 	bl	8002480 <LL_ADC_IsEnabled>
 8002d52:	4603      	mov	r3, r0
 8002d54:	4323      	orrs	r3, r4
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	bf0c      	ite	eq
 8002d5a:	2301      	moveq	r3, #1
 8002d5c:	2300      	movne	r3, #0
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	e008      	b.n	8002d74 <HAL_ADC_ConfigChannel+0x53c>
 8002d62:	4857      	ldr	r0, [pc, #348]	; (8002ec0 <HAL_ADC_ConfigChannel+0x688>)
 8002d64:	f7ff fb8c 	bl	8002480 <LL_ADC_IsEnabled>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	bf0c      	ite	eq
 8002d6e:	2301      	moveq	r3, #1
 8002d70:	2300      	movne	r3, #0
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d07d      	beq.n	8002e74 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a51      	ldr	r2, [pc, #324]	; (8002ec4 <HAL_ADC_ConfigChannel+0x68c>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d130      	bne.n	8002de4 <HAL_ADC_ConfigChannel+0x5ac>
 8002d82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d84:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d12b      	bne.n	8002de4 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a4b      	ldr	r2, [pc, #300]	; (8002ec0 <HAL_ADC_ConfigChannel+0x688>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	f040 8081 	bne.w	8002e9a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a44      	ldr	r2, [pc, #272]	; (8002eb0 <HAL_ADC_ConfigChannel+0x678>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d004      	beq.n	8002dac <HAL_ADC_ConfigChannel+0x574>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a43      	ldr	r2, [pc, #268]	; (8002eb4 <HAL_ADC_ConfigChannel+0x67c>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d101      	bne.n	8002db0 <HAL_ADC_ConfigChannel+0x578>
 8002dac:	4a42      	ldr	r2, [pc, #264]	; (8002eb8 <HAL_ADC_ConfigChannel+0x680>)
 8002dae:	e000      	b.n	8002db2 <HAL_ADC_ConfigChannel+0x57a>
 8002db0:	4a42      	ldr	r2, [pc, #264]	; (8002ebc <HAL_ADC_ConfigChannel+0x684>)
 8002db2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002db4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002db8:	4619      	mov	r1, r3
 8002dba:	4610      	mov	r0, r2
 8002dbc:	f7ff fa21 	bl	8002202 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002dc0:	4b41      	ldr	r3, [pc, #260]	; (8002ec8 <HAL_ADC_ConfigChannel+0x690>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	099b      	lsrs	r3, r3, #6
 8002dc6:	4a41      	ldr	r2, [pc, #260]	; (8002ecc <HAL_ADC_ConfigChannel+0x694>)
 8002dc8:	fba2 2303 	umull	r2, r3, r2, r3
 8002dcc:	099b      	lsrs	r3, r3, #6
 8002dce:	3301      	adds	r3, #1
 8002dd0:	005b      	lsls	r3, r3, #1
 8002dd2:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002dd4:	e002      	b.n	8002ddc <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	3b01      	subs	r3, #1
 8002dda:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d1f9      	bne.n	8002dd6 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002de2:	e05a      	b.n	8002e9a <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a39      	ldr	r2, [pc, #228]	; (8002ed0 <HAL_ADC_ConfigChannel+0x698>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d11e      	bne.n	8002e2c <HAL_ADC_ConfigChannel+0x5f4>
 8002dee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002df0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d119      	bne.n	8002e2c <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a30      	ldr	r2, [pc, #192]	; (8002ec0 <HAL_ADC_ConfigChannel+0x688>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d14b      	bne.n	8002e9a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a2a      	ldr	r2, [pc, #168]	; (8002eb0 <HAL_ADC_ConfigChannel+0x678>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d004      	beq.n	8002e16 <HAL_ADC_ConfigChannel+0x5de>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a28      	ldr	r2, [pc, #160]	; (8002eb4 <HAL_ADC_ConfigChannel+0x67c>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d101      	bne.n	8002e1a <HAL_ADC_ConfigChannel+0x5e2>
 8002e16:	4a28      	ldr	r2, [pc, #160]	; (8002eb8 <HAL_ADC_ConfigChannel+0x680>)
 8002e18:	e000      	b.n	8002e1c <HAL_ADC_ConfigChannel+0x5e4>
 8002e1a:	4a28      	ldr	r2, [pc, #160]	; (8002ebc <HAL_ADC_ConfigChannel+0x684>)
 8002e1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e22:	4619      	mov	r1, r3
 8002e24:	4610      	mov	r0, r2
 8002e26:	f7ff f9ec 	bl	8002202 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e2a:	e036      	b.n	8002e9a <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a28      	ldr	r2, [pc, #160]	; (8002ed4 <HAL_ADC_ConfigChannel+0x69c>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d131      	bne.n	8002e9a <HAL_ADC_ConfigChannel+0x662>
 8002e36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d12c      	bne.n	8002e9a <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a1e      	ldr	r2, [pc, #120]	; (8002ec0 <HAL_ADC_ConfigChannel+0x688>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d127      	bne.n	8002e9a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a18      	ldr	r2, [pc, #96]	; (8002eb0 <HAL_ADC_ConfigChannel+0x678>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d004      	beq.n	8002e5e <HAL_ADC_ConfigChannel+0x626>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a16      	ldr	r2, [pc, #88]	; (8002eb4 <HAL_ADC_ConfigChannel+0x67c>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d101      	bne.n	8002e62 <HAL_ADC_ConfigChannel+0x62a>
 8002e5e:	4a16      	ldr	r2, [pc, #88]	; (8002eb8 <HAL_ADC_ConfigChannel+0x680>)
 8002e60:	e000      	b.n	8002e64 <HAL_ADC_ConfigChannel+0x62c>
 8002e62:	4a16      	ldr	r2, [pc, #88]	; (8002ebc <HAL_ADC_ConfigChannel+0x684>)
 8002e64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e66:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002e6a:	4619      	mov	r1, r3
 8002e6c:	4610      	mov	r0, r2
 8002e6e:	f7ff f9c8 	bl	8002202 <LL_ADC_SetCommonPathInternalCh>
 8002e72:	e012      	b.n	8002e9a <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e78:	f043 0220 	orr.w	r2, r3, #32
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002e86:	e008      	b.n	8002e9a <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e8c:	f043 0220 	orr.w	r2, r3, #32
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002ea2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3784      	adds	r7, #132	; 0x84
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd90      	pop	{r4, r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	40022000 	.word	0x40022000
 8002eb4:	40022100 	.word	0x40022100
 8002eb8:	40022300 	.word	0x40022300
 8002ebc:	58026300 	.word	0x58026300
 8002ec0:	58026000 	.word	0x58026000
 8002ec4:	cb840000 	.word	0xcb840000
 8002ec8:	24000000 	.word	0x24000000
 8002ecc:	053e2d63 	.word	0x053e2d63
 8002ed0:	c7520000 	.word	0xc7520000
 8002ed4:	cfb80000 	.word	0xcfb80000

08002ed8 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b084      	sub	sp, #16
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a7a      	ldr	r2, [pc, #488]	; (80030d0 <ADC_ConfigureBoostMode+0x1f8>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d004      	beq.n	8002ef4 <ADC_ConfigureBoostMode+0x1c>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a79      	ldr	r2, [pc, #484]	; (80030d4 <ADC_ConfigureBoostMode+0x1fc>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d109      	bne.n	8002f08 <ADC_ConfigureBoostMode+0x30>
 8002ef4:	4b78      	ldr	r3, [pc, #480]	; (80030d8 <ADC_ConfigureBoostMode+0x200>)
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	bf14      	ite	ne
 8002f00:	2301      	movne	r3, #1
 8002f02:	2300      	moveq	r3, #0
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	e008      	b.n	8002f1a <ADC_ConfigureBoostMode+0x42>
 8002f08:	4b74      	ldr	r3, [pc, #464]	; (80030dc <ADC_ConfigureBoostMode+0x204>)
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	bf14      	ite	ne
 8002f14:	2301      	movne	r3, #1
 8002f16:	2300      	moveq	r3, #0
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d01c      	beq.n	8002f58 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002f1e:	f003 fc6b 	bl	80067f8 <HAL_RCC_GetHCLKFreq>
 8002f22:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002f2c:	d010      	beq.n	8002f50 <ADC_ConfigureBoostMode+0x78>
 8002f2e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002f32:	d873      	bhi.n	800301c <ADC_ConfigureBoostMode+0x144>
 8002f34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f38:	d002      	beq.n	8002f40 <ADC_ConfigureBoostMode+0x68>
 8002f3a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002f3e:	d16d      	bne.n	800301c <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	0c1b      	lsrs	r3, r3, #16
 8002f46:	68fa      	ldr	r2, [r7, #12]
 8002f48:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f4c:	60fb      	str	r3, [r7, #12]
        break;
 8002f4e:	e068      	b.n	8003022 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	089b      	lsrs	r3, r3, #2
 8002f54:	60fb      	str	r3, [r7, #12]
        break;
 8002f56:	e064      	b.n	8003022 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002f58:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002f5c:	f04f 0100 	mov.w	r1, #0
 8002f60:	f004 fe9a 	bl	8007c98 <HAL_RCCEx_GetPeriphCLKFreq>
 8002f64:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002f6e:	d051      	beq.n	8003014 <ADC_ConfigureBoostMode+0x13c>
 8002f70:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002f74:	d854      	bhi.n	8003020 <ADC_ConfigureBoostMode+0x148>
 8002f76:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002f7a:	d047      	beq.n	800300c <ADC_ConfigureBoostMode+0x134>
 8002f7c:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002f80:	d84e      	bhi.n	8003020 <ADC_ConfigureBoostMode+0x148>
 8002f82:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002f86:	d03d      	beq.n	8003004 <ADC_ConfigureBoostMode+0x12c>
 8002f88:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002f8c:	d848      	bhi.n	8003020 <ADC_ConfigureBoostMode+0x148>
 8002f8e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002f92:	d033      	beq.n	8002ffc <ADC_ConfigureBoostMode+0x124>
 8002f94:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002f98:	d842      	bhi.n	8003020 <ADC_ConfigureBoostMode+0x148>
 8002f9a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002f9e:	d029      	beq.n	8002ff4 <ADC_ConfigureBoostMode+0x11c>
 8002fa0:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002fa4:	d83c      	bhi.n	8003020 <ADC_ConfigureBoostMode+0x148>
 8002fa6:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002faa:	d01a      	beq.n	8002fe2 <ADC_ConfigureBoostMode+0x10a>
 8002fac:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002fb0:	d836      	bhi.n	8003020 <ADC_ConfigureBoostMode+0x148>
 8002fb2:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002fb6:	d014      	beq.n	8002fe2 <ADC_ConfigureBoostMode+0x10a>
 8002fb8:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002fbc:	d830      	bhi.n	8003020 <ADC_ConfigureBoostMode+0x148>
 8002fbe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002fc2:	d00e      	beq.n	8002fe2 <ADC_ConfigureBoostMode+0x10a>
 8002fc4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002fc8:	d82a      	bhi.n	8003020 <ADC_ConfigureBoostMode+0x148>
 8002fca:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002fce:	d008      	beq.n	8002fe2 <ADC_ConfigureBoostMode+0x10a>
 8002fd0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002fd4:	d824      	bhi.n	8003020 <ADC_ConfigureBoostMode+0x148>
 8002fd6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002fda:	d002      	beq.n	8002fe2 <ADC_ConfigureBoostMode+0x10a>
 8002fdc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002fe0:	d11e      	bne.n	8003020 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	0c9b      	lsrs	r3, r3, #18
 8002fe8:	005b      	lsls	r3, r3, #1
 8002fea:	68fa      	ldr	r2, [r7, #12]
 8002fec:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ff0:	60fb      	str	r3, [r7, #12]
        break;
 8002ff2:	e016      	b.n	8003022 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	091b      	lsrs	r3, r3, #4
 8002ff8:	60fb      	str	r3, [r7, #12]
        break;
 8002ffa:	e012      	b.n	8003022 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	095b      	lsrs	r3, r3, #5
 8003000:	60fb      	str	r3, [r7, #12]
        break;
 8003002:	e00e      	b.n	8003022 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	099b      	lsrs	r3, r3, #6
 8003008:	60fb      	str	r3, [r7, #12]
        break;
 800300a:	e00a      	b.n	8003022 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	09db      	lsrs	r3, r3, #7
 8003010:	60fb      	str	r3, [r7, #12]
        break;
 8003012:	e006      	b.n	8003022 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	0a1b      	lsrs	r3, r3, #8
 8003018:	60fb      	str	r3, [r7, #12]
        break;
 800301a:	e002      	b.n	8003022 <ADC_ConfigureBoostMode+0x14a>
        break;
 800301c:	bf00      	nop
 800301e:	e000      	b.n	8003022 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8003020:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003022:	f7ff f8b9 	bl	8002198 <HAL_GetREVID>
 8003026:	4603      	mov	r3, r0
 8003028:	f241 0203 	movw	r2, #4099	; 0x1003
 800302c:	4293      	cmp	r3, r2
 800302e:	d815      	bhi.n	800305c <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	4a2b      	ldr	r2, [pc, #172]	; (80030e0 <ADC_ConfigureBoostMode+0x208>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d908      	bls.n	800304a <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	689a      	ldr	r2, [r3, #8]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003046:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003048:	e03e      	b.n	80030c8 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	689a      	ldr	r2, [r3, #8]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003058:	609a      	str	r2, [r3, #8]
}
 800305a:	e035      	b.n	80030c8 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	085b      	lsrs	r3, r3, #1
 8003060:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	4a1f      	ldr	r2, [pc, #124]	; (80030e4 <ADC_ConfigureBoostMode+0x20c>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d808      	bhi.n	800307c <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	689a      	ldr	r2, [r3, #8]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003078:	609a      	str	r2, [r3, #8]
}
 800307a:	e025      	b.n	80030c8 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	4a1a      	ldr	r2, [pc, #104]	; (80030e8 <ADC_ConfigureBoostMode+0x210>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d80a      	bhi.n	800309a <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003096:	609a      	str	r2, [r3, #8]
}
 8003098:	e016      	b.n	80030c8 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	4a13      	ldr	r2, [pc, #76]	; (80030ec <ADC_ConfigureBoostMode+0x214>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d80a      	bhi.n	80030b8 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030b4:	609a      	str	r2, [r3, #8]
}
 80030b6:	e007      	b.n	80030c8 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	689a      	ldr	r2, [r3, #8]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80030c6:	609a      	str	r2, [r3, #8]
}
 80030c8:	bf00      	nop
 80030ca:	3710      	adds	r7, #16
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}
 80030d0:	40022000 	.word	0x40022000
 80030d4:	40022100 	.word	0x40022100
 80030d8:	40022300 	.word	0x40022300
 80030dc:	58026300 	.word	0x58026300
 80030e0:	01312d00 	.word	0x01312d00
 80030e4:	005f5e10 	.word	0x005f5e10
 80030e8:	00bebc20 	.word	0x00bebc20
 80030ec:	017d7840 	.word	0x017d7840

080030f0 <__NVIC_SetPriorityGrouping>:
{
 80030f0:	b480      	push	{r7}
 80030f2:	b085      	sub	sp, #20
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	f003 0307 	and.w	r3, r3, #7
 80030fe:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003100:	4b0b      	ldr	r3, [pc, #44]	; (8003130 <__NVIC_SetPriorityGrouping+0x40>)
 8003102:	68db      	ldr	r3, [r3, #12]
 8003104:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003106:	68ba      	ldr	r2, [r7, #8]
 8003108:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800310c:	4013      	ands	r3, r2
 800310e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003118:	4b06      	ldr	r3, [pc, #24]	; (8003134 <__NVIC_SetPriorityGrouping+0x44>)
 800311a:	4313      	orrs	r3, r2
 800311c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800311e:	4a04      	ldr	r2, [pc, #16]	; (8003130 <__NVIC_SetPriorityGrouping+0x40>)
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	60d3      	str	r3, [r2, #12]
}
 8003124:	bf00      	nop
 8003126:	3714      	adds	r7, #20
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr
 8003130:	e000ed00 	.word	0xe000ed00
 8003134:	05fa0000 	.word	0x05fa0000

08003138 <__NVIC_GetPriorityGrouping>:
{
 8003138:	b480      	push	{r7}
 800313a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800313c:	4b04      	ldr	r3, [pc, #16]	; (8003150 <__NVIC_GetPriorityGrouping+0x18>)
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	0a1b      	lsrs	r3, r3, #8
 8003142:	f003 0307 	and.w	r3, r3, #7
}
 8003146:	4618      	mov	r0, r3
 8003148:	46bd      	mov	sp, r7
 800314a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314e:	4770      	bx	lr
 8003150:	e000ed00 	.word	0xe000ed00

08003154 <__NVIC_EnableIRQ>:
{
 8003154:	b480      	push	{r7}
 8003156:	b083      	sub	sp, #12
 8003158:	af00      	add	r7, sp, #0
 800315a:	4603      	mov	r3, r0
 800315c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800315e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003162:	2b00      	cmp	r3, #0
 8003164:	db0b      	blt.n	800317e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003166:	88fb      	ldrh	r3, [r7, #6]
 8003168:	f003 021f 	and.w	r2, r3, #31
 800316c:	4907      	ldr	r1, [pc, #28]	; (800318c <__NVIC_EnableIRQ+0x38>)
 800316e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003172:	095b      	lsrs	r3, r3, #5
 8003174:	2001      	movs	r0, #1
 8003176:	fa00 f202 	lsl.w	r2, r0, r2
 800317a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800317e:	bf00      	nop
 8003180:	370c      	adds	r7, #12
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr
 800318a:	bf00      	nop
 800318c:	e000e100 	.word	0xe000e100

08003190 <__NVIC_SetPriority>:
{
 8003190:	b480      	push	{r7}
 8003192:	b083      	sub	sp, #12
 8003194:	af00      	add	r7, sp, #0
 8003196:	4603      	mov	r3, r0
 8003198:	6039      	str	r1, [r7, #0]
 800319a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800319c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	db0a      	blt.n	80031ba <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	b2da      	uxtb	r2, r3
 80031a8:	490c      	ldr	r1, [pc, #48]	; (80031dc <__NVIC_SetPriority+0x4c>)
 80031aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80031ae:	0112      	lsls	r2, r2, #4
 80031b0:	b2d2      	uxtb	r2, r2
 80031b2:	440b      	add	r3, r1
 80031b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80031b8:	e00a      	b.n	80031d0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	b2da      	uxtb	r2, r3
 80031be:	4908      	ldr	r1, [pc, #32]	; (80031e0 <__NVIC_SetPriority+0x50>)
 80031c0:	88fb      	ldrh	r3, [r7, #6]
 80031c2:	f003 030f 	and.w	r3, r3, #15
 80031c6:	3b04      	subs	r3, #4
 80031c8:	0112      	lsls	r2, r2, #4
 80031ca:	b2d2      	uxtb	r2, r2
 80031cc:	440b      	add	r3, r1
 80031ce:	761a      	strb	r2, [r3, #24]
}
 80031d0:	bf00      	nop
 80031d2:	370c      	adds	r7, #12
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr
 80031dc:	e000e100 	.word	0xe000e100
 80031e0:	e000ed00 	.word	0xe000ed00

080031e4 <NVIC_EncodePriority>:
{
 80031e4:	b480      	push	{r7}
 80031e6:	b089      	sub	sp, #36	; 0x24
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	60f8      	str	r0, [r7, #12]
 80031ec:	60b9      	str	r1, [r7, #8]
 80031ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	f003 0307 	and.w	r3, r3, #7
 80031f6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031f8:	69fb      	ldr	r3, [r7, #28]
 80031fa:	f1c3 0307 	rsb	r3, r3, #7
 80031fe:	2b04      	cmp	r3, #4
 8003200:	bf28      	it	cs
 8003202:	2304      	movcs	r3, #4
 8003204:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003206:	69fb      	ldr	r3, [r7, #28]
 8003208:	3304      	adds	r3, #4
 800320a:	2b06      	cmp	r3, #6
 800320c:	d902      	bls.n	8003214 <NVIC_EncodePriority+0x30>
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	3b03      	subs	r3, #3
 8003212:	e000      	b.n	8003216 <NVIC_EncodePriority+0x32>
 8003214:	2300      	movs	r3, #0
 8003216:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003218:	f04f 32ff 	mov.w	r2, #4294967295
 800321c:	69bb      	ldr	r3, [r7, #24]
 800321e:	fa02 f303 	lsl.w	r3, r2, r3
 8003222:	43da      	mvns	r2, r3
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	401a      	ands	r2, r3
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800322c:	f04f 31ff 	mov.w	r1, #4294967295
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	fa01 f303 	lsl.w	r3, r1, r3
 8003236:	43d9      	mvns	r1, r3
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800323c:	4313      	orrs	r3, r2
}
 800323e:	4618      	mov	r0, r3
 8003240:	3724      	adds	r7, #36	; 0x24
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr
	...

0800324c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b082      	sub	sp, #8
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	3b01      	subs	r3, #1
 8003258:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800325c:	d301      	bcc.n	8003262 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800325e:	2301      	movs	r3, #1
 8003260:	e00f      	b.n	8003282 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003262:	4a0a      	ldr	r2, [pc, #40]	; (800328c <SysTick_Config+0x40>)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	3b01      	subs	r3, #1
 8003268:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800326a:	210f      	movs	r1, #15
 800326c:	f04f 30ff 	mov.w	r0, #4294967295
 8003270:	f7ff ff8e 	bl	8003190 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003274:	4b05      	ldr	r3, [pc, #20]	; (800328c <SysTick_Config+0x40>)
 8003276:	2200      	movs	r2, #0
 8003278:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800327a:	4b04      	ldr	r3, [pc, #16]	; (800328c <SysTick_Config+0x40>)
 800327c:	2207      	movs	r2, #7
 800327e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003280:	2300      	movs	r3, #0
}
 8003282:	4618      	mov	r0, r3
 8003284:	3708      	adds	r7, #8
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop
 800328c:	e000e010 	.word	0xe000e010

08003290 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b082      	sub	sp, #8
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003298:	6878      	ldr	r0, [r7, #4]
 800329a:	f7ff ff29 	bl	80030f0 <__NVIC_SetPriorityGrouping>
}
 800329e:	bf00      	nop
 80032a0:	3708      	adds	r7, #8
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}

080032a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032a6:	b580      	push	{r7, lr}
 80032a8:	b086      	sub	sp, #24
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	4603      	mov	r3, r0
 80032ae:	60b9      	str	r1, [r7, #8]
 80032b0:	607a      	str	r2, [r7, #4]
 80032b2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80032b4:	f7ff ff40 	bl	8003138 <__NVIC_GetPriorityGrouping>
 80032b8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032ba:	687a      	ldr	r2, [r7, #4]
 80032bc:	68b9      	ldr	r1, [r7, #8]
 80032be:	6978      	ldr	r0, [r7, #20]
 80032c0:	f7ff ff90 	bl	80031e4 <NVIC_EncodePriority>
 80032c4:	4602      	mov	r2, r0
 80032c6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80032ca:	4611      	mov	r1, r2
 80032cc:	4618      	mov	r0, r3
 80032ce:	f7ff ff5f 	bl	8003190 <__NVIC_SetPriority>
}
 80032d2:	bf00      	nop
 80032d4:	3718      	adds	r7, #24
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}

080032da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032da:	b580      	push	{r7, lr}
 80032dc:	b082      	sub	sp, #8
 80032de:	af00      	add	r7, sp, #0
 80032e0:	4603      	mov	r3, r0
 80032e2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80032e8:	4618      	mov	r0, r3
 80032ea:	f7ff ff33 	bl	8003154 <__NVIC_EnableIRQ>
}
 80032ee:	bf00      	nop
 80032f0:	3708      	adds	r7, #8
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}

080032f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80032f6:	b580      	push	{r7, lr}
 80032f8:	b082      	sub	sp, #8
 80032fa:	af00      	add	r7, sp, #0
 80032fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f7ff ffa4 	bl	800324c <SysTick_Config>
 8003304:	4603      	mov	r3, r0
}
 8003306:	4618      	mov	r0, r3
 8003308:	3708      	adds	r7, #8
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
	...

08003310 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8003310:	b480      	push	{r7}
 8003312:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8003314:	f3bf 8f5f 	dmb	sy
}
 8003318:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800331a:	4b07      	ldr	r3, [pc, #28]	; (8003338 <HAL_MPU_Disable+0x28>)
 800331c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800331e:	4a06      	ldr	r2, [pc, #24]	; (8003338 <HAL_MPU_Disable+0x28>)
 8003320:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003324:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8003326:	4b05      	ldr	r3, [pc, #20]	; (800333c <HAL_MPU_Disable+0x2c>)
 8003328:	2200      	movs	r2, #0
 800332a:	605a      	str	r2, [r3, #4]
}
 800332c:	bf00      	nop
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr
 8003336:	bf00      	nop
 8003338:	e000ed00 	.word	0xe000ed00
 800333c:	e000ed90 	.word	0xe000ed90

08003340 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8003340:	b480      	push	{r7}
 8003342:	b083      	sub	sp, #12
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8003348:	4a0b      	ldr	r2, [pc, #44]	; (8003378 <HAL_MPU_Enable+0x38>)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	f043 0301 	orr.w	r3, r3, #1
 8003350:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8003352:	4b0a      	ldr	r3, [pc, #40]	; (800337c <HAL_MPU_Enable+0x3c>)
 8003354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003356:	4a09      	ldr	r2, [pc, #36]	; (800337c <HAL_MPU_Enable+0x3c>)
 8003358:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800335c:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800335e:	f3bf 8f4f 	dsb	sy
}
 8003362:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003364:	f3bf 8f6f 	isb	sy
}
 8003368:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800336a:	bf00      	nop
 800336c:	370c      	adds	r7, #12
 800336e:	46bd      	mov	sp, r7
 8003370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003374:	4770      	bx	lr
 8003376:	bf00      	nop
 8003378:	e000ed90 	.word	0xe000ed90
 800337c:	e000ed00 	.word	0xe000ed00

08003380 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8003380:	b480      	push	{r7}
 8003382:	b083      	sub	sp, #12
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	785a      	ldrb	r2, [r3, #1]
 800338c:	4b1d      	ldr	r3, [pc, #116]	; (8003404 <HAL_MPU_ConfigRegion+0x84>)
 800338e:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	781b      	ldrb	r3, [r3, #0]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d029      	beq.n	80033ec <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8003398:	4a1a      	ldr	r2, [pc, #104]	; (8003404 <HAL_MPU_ConfigRegion+0x84>)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	7b1b      	ldrb	r3, [r3, #12]
 80033a4:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	7adb      	ldrb	r3, [r3, #11]
 80033aa:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80033ac:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	7a9b      	ldrb	r3, [r3, #10]
 80033b2:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80033b4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	7b5b      	ldrb	r3, [r3, #13]
 80033ba:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80033bc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	7b9b      	ldrb	r3, [r3, #14]
 80033c2:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80033c4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	7bdb      	ldrb	r3, [r3, #15]
 80033ca:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80033cc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	7a5b      	ldrb	r3, [r3, #9]
 80033d2:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80033d4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	7a1b      	ldrb	r3, [r3, #8]
 80033da:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80033dc:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80033de:	687a      	ldr	r2, [r7, #4]
 80033e0:	7812      	ldrb	r2, [r2, #0]
 80033e2:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80033e4:	4a07      	ldr	r2, [pc, #28]	; (8003404 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80033e6:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80033e8:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80033ea:	e005      	b.n	80033f8 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 80033ec:	4b05      	ldr	r3, [pc, #20]	; (8003404 <HAL_MPU_ConfigRegion+0x84>)
 80033ee:	2200      	movs	r2, #0
 80033f0:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 80033f2:	4b04      	ldr	r3, [pc, #16]	; (8003404 <HAL_MPU_ConfigRegion+0x84>)
 80033f4:	2200      	movs	r2, #0
 80033f6:	611a      	str	r2, [r3, #16]
}
 80033f8:	bf00      	nop
 80033fa:	370c      	adds	r7, #12
 80033fc:	46bd      	mov	sp, r7
 80033fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003402:	4770      	bx	lr
 8003404:	e000ed90 	.word	0xe000ed90

08003408 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b082      	sub	sp, #8
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d101      	bne.n	800341a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	e054      	b.n	80034c4 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	7f5b      	ldrb	r3, [r3, #29]
 800341e:	b2db      	uxtb	r3, r3
 8003420:	2b00      	cmp	r3, #0
 8003422:	d105      	bne.n	8003430 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2200      	movs	r2, #0
 8003428:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f7fd fe22 	bl	8001074 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2202      	movs	r2, #2
 8003434:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	791b      	ldrb	r3, [r3, #4]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d10c      	bne.n	8003458 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a22      	ldr	r2, [pc, #136]	; (80034cc <HAL_CRC_Init+0xc4>)
 8003444:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	689a      	ldr	r2, [r3, #8]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f022 0218 	bic.w	r2, r2, #24
 8003454:	609a      	str	r2, [r3, #8]
 8003456:	e00c      	b.n	8003472 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6899      	ldr	r1, [r3, #8]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	461a      	mov	r2, r3
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f000 f834 	bl	80034d0 <HAL_CRCEx_Polynomial_Set>
 8003468:	4603      	mov	r3, r0
 800346a:	2b00      	cmp	r3, #0
 800346c:	d001      	beq.n	8003472 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	e028      	b.n	80034c4 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	795b      	ldrb	r3, [r3, #5]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d105      	bne.n	8003486 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f04f 32ff 	mov.w	r2, #4294967295
 8003482:	611a      	str	r2, [r3, #16]
 8003484:	e004      	b.n	8003490 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	6912      	ldr	r2, [r2, #16]
 800348e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	695a      	ldr	r2, [r3, #20]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	430a      	orrs	r2, r1
 80034a4:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	699a      	ldr	r2, [r3, #24]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	430a      	orrs	r2, r1
 80034ba:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2201      	movs	r2, #1
 80034c0:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80034c2:	2300      	movs	r3, #0
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	3708      	adds	r7, #8
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}
 80034cc:	04c11db7 	.word	0x04c11db7

080034d0 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b087      	sub	sp, #28
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	60f8      	str	r0, [r7, #12]
 80034d8:	60b9      	str	r1, [r7, #8]
 80034da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034dc:	2300      	movs	r3, #0
 80034de:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80034e0:	231f      	movs	r3, #31
 80034e2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */ 
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	f003 0301 	and.w	r3, r3, #1
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d102      	bne.n	80034f4 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	75fb      	strb	r3, [r7, #23]
 80034f2:	e063      	b.n	80035bc <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80034f4:	bf00      	nop
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	1e5a      	subs	r2, r3, #1
 80034fa:	613a      	str	r2, [r7, #16]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d009      	beq.n	8003514 <HAL_CRCEx_Polynomial_Set+0x44>
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	f003 031f 	and.w	r3, r3, #31
 8003506:	68ba      	ldr	r2, [r7, #8]
 8003508:	fa22 f303 	lsr.w	r3, r2, r3
 800350c:	f003 0301 	and.w	r3, r3, #1
 8003510:	2b00      	cmp	r3, #0
 8003512:	d0f0      	beq.n	80034f6 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2b18      	cmp	r3, #24
 8003518:	d846      	bhi.n	80035a8 <HAL_CRCEx_Polynomial_Set+0xd8>
 800351a:	a201      	add	r2, pc, #4	; (adr r2, 8003520 <HAL_CRCEx_Polynomial_Set+0x50>)
 800351c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003520:	080035af 	.word	0x080035af
 8003524:	080035a9 	.word	0x080035a9
 8003528:	080035a9 	.word	0x080035a9
 800352c:	080035a9 	.word	0x080035a9
 8003530:	080035a9 	.word	0x080035a9
 8003534:	080035a9 	.word	0x080035a9
 8003538:	080035a9 	.word	0x080035a9
 800353c:	080035a9 	.word	0x080035a9
 8003540:	0800359d 	.word	0x0800359d
 8003544:	080035a9 	.word	0x080035a9
 8003548:	080035a9 	.word	0x080035a9
 800354c:	080035a9 	.word	0x080035a9
 8003550:	080035a9 	.word	0x080035a9
 8003554:	080035a9 	.word	0x080035a9
 8003558:	080035a9 	.word	0x080035a9
 800355c:	080035a9 	.word	0x080035a9
 8003560:	08003591 	.word	0x08003591
 8003564:	080035a9 	.word	0x080035a9
 8003568:	080035a9 	.word	0x080035a9
 800356c:	080035a9 	.word	0x080035a9
 8003570:	080035a9 	.word	0x080035a9
 8003574:	080035a9 	.word	0x080035a9
 8003578:	080035a9 	.word	0x080035a9
 800357c:	080035a9 	.word	0x080035a9
 8003580:	08003585 	.word	0x08003585
    {
          
      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	2b06      	cmp	r3, #6
 8003588:	d913      	bls.n	80035b2 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800358e:	e010      	b.n	80035b2 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	2b07      	cmp	r3, #7
 8003594:	d90f      	bls.n	80035b6 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800359a:	e00c      	b.n	80035b6 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	2b0f      	cmp	r3, #15
 80035a0:	d90b      	bls.n	80035ba <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80035a6:	e008      	b.n	80035ba <HAL_CRCEx_Polynomial_Set+0xea>
 
      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	75fb      	strb	r3, [r7, #23]
        break;
 80035ac:	e006      	b.n	80035bc <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80035ae:	bf00      	nop
 80035b0:	e004      	b.n	80035bc <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80035b2:	bf00      	nop
 80035b4:	e002      	b.n	80035bc <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80035b6:	bf00      	nop
 80035b8:	e000      	b.n	80035bc <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80035ba:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 80035bc:	7dfb      	ldrb	r3, [r7, #23]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d10d      	bne.n	80035de <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	68ba      	ldr	r2, [r7, #8]
 80035c8:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	f023 0118 	bic.w	r1, r3, #24
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	687a      	ldr	r2, [r7, #4]
 80035da:	430a      	orrs	r2, r1
 80035dc:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80035de:	7dfb      	ldrb	r3, [r7, #23]
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	371c      	adds	r7, #28
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr

080035ec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b089      	sub	sp, #36	; 0x24
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
 80035f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80035f6:	2300      	movs	r3, #0
 80035f8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80035fa:	4b89      	ldr	r3, [pc, #548]	; (8003820 <HAL_GPIO_Init+0x234>)
 80035fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80035fe:	e194      	b.n	800392a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	2101      	movs	r1, #1
 8003606:	69fb      	ldr	r3, [r7, #28]
 8003608:	fa01 f303 	lsl.w	r3, r1, r3
 800360c:	4013      	ands	r3, r2
 800360e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	2b00      	cmp	r3, #0
 8003614:	f000 8186 	beq.w	8003924 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	f003 0303 	and.w	r3, r3, #3
 8003620:	2b01      	cmp	r3, #1
 8003622:	d005      	beq.n	8003630 <HAL_GPIO_Init+0x44>
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	f003 0303 	and.w	r3, r3, #3
 800362c:	2b02      	cmp	r3, #2
 800362e:	d130      	bne.n	8003692 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	005b      	lsls	r3, r3, #1
 800363a:	2203      	movs	r2, #3
 800363c:	fa02 f303 	lsl.w	r3, r2, r3
 8003640:	43db      	mvns	r3, r3
 8003642:	69ba      	ldr	r2, [r7, #24]
 8003644:	4013      	ands	r3, r2
 8003646:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	68da      	ldr	r2, [r3, #12]
 800364c:	69fb      	ldr	r3, [r7, #28]
 800364e:	005b      	lsls	r3, r3, #1
 8003650:	fa02 f303 	lsl.w	r3, r2, r3
 8003654:	69ba      	ldr	r2, [r7, #24]
 8003656:	4313      	orrs	r3, r2
 8003658:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	69ba      	ldr	r2, [r7, #24]
 800365e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003666:	2201      	movs	r2, #1
 8003668:	69fb      	ldr	r3, [r7, #28]
 800366a:	fa02 f303 	lsl.w	r3, r2, r3
 800366e:	43db      	mvns	r3, r3
 8003670:	69ba      	ldr	r2, [r7, #24]
 8003672:	4013      	ands	r3, r2
 8003674:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	091b      	lsrs	r3, r3, #4
 800367c:	f003 0201 	and.w	r2, r3, #1
 8003680:	69fb      	ldr	r3, [r7, #28]
 8003682:	fa02 f303 	lsl.w	r3, r2, r3
 8003686:	69ba      	ldr	r2, [r7, #24]
 8003688:	4313      	orrs	r3, r2
 800368a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	69ba      	ldr	r2, [r7, #24]
 8003690:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	f003 0303 	and.w	r3, r3, #3
 800369a:	2b03      	cmp	r3, #3
 800369c:	d017      	beq.n	80036ce <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	68db      	ldr	r3, [r3, #12]
 80036a2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80036a4:	69fb      	ldr	r3, [r7, #28]
 80036a6:	005b      	lsls	r3, r3, #1
 80036a8:	2203      	movs	r2, #3
 80036aa:	fa02 f303 	lsl.w	r3, r2, r3
 80036ae:	43db      	mvns	r3, r3
 80036b0:	69ba      	ldr	r2, [r7, #24]
 80036b2:	4013      	ands	r3, r2
 80036b4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	689a      	ldr	r2, [r3, #8]
 80036ba:	69fb      	ldr	r3, [r7, #28]
 80036bc:	005b      	lsls	r3, r3, #1
 80036be:	fa02 f303 	lsl.w	r3, r2, r3
 80036c2:	69ba      	ldr	r2, [r7, #24]
 80036c4:	4313      	orrs	r3, r2
 80036c6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	69ba      	ldr	r2, [r7, #24]
 80036cc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	f003 0303 	and.w	r3, r3, #3
 80036d6:	2b02      	cmp	r3, #2
 80036d8:	d123      	bne.n	8003722 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80036da:	69fb      	ldr	r3, [r7, #28]
 80036dc:	08da      	lsrs	r2, r3, #3
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	3208      	adds	r2, #8
 80036e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80036e8:	69fb      	ldr	r3, [r7, #28]
 80036ea:	f003 0307 	and.w	r3, r3, #7
 80036ee:	009b      	lsls	r3, r3, #2
 80036f0:	220f      	movs	r2, #15
 80036f2:	fa02 f303 	lsl.w	r3, r2, r3
 80036f6:	43db      	mvns	r3, r3
 80036f8:	69ba      	ldr	r2, [r7, #24]
 80036fa:	4013      	ands	r3, r2
 80036fc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	691a      	ldr	r2, [r3, #16]
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	f003 0307 	and.w	r3, r3, #7
 8003708:	009b      	lsls	r3, r3, #2
 800370a:	fa02 f303 	lsl.w	r3, r2, r3
 800370e:	69ba      	ldr	r2, [r7, #24]
 8003710:	4313      	orrs	r3, r2
 8003712:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003714:	69fb      	ldr	r3, [r7, #28]
 8003716:	08da      	lsrs	r2, r3, #3
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	3208      	adds	r2, #8
 800371c:	69b9      	ldr	r1, [r7, #24]
 800371e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003728:	69fb      	ldr	r3, [r7, #28]
 800372a:	005b      	lsls	r3, r3, #1
 800372c:	2203      	movs	r2, #3
 800372e:	fa02 f303 	lsl.w	r3, r2, r3
 8003732:	43db      	mvns	r3, r3
 8003734:	69ba      	ldr	r2, [r7, #24]
 8003736:	4013      	ands	r3, r2
 8003738:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	f003 0203 	and.w	r2, r3, #3
 8003742:	69fb      	ldr	r3, [r7, #28]
 8003744:	005b      	lsls	r3, r3, #1
 8003746:	fa02 f303 	lsl.w	r3, r2, r3
 800374a:	69ba      	ldr	r2, [r7, #24]
 800374c:	4313      	orrs	r3, r2
 800374e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	69ba      	ldr	r2, [r7, #24]
 8003754:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800375e:	2b00      	cmp	r3, #0
 8003760:	f000 80e0 	beq.w	8003924 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003764:	4b2f      	ldr	r3, [pc, #188]	; (8003824 <HAL_GPIO_Init+0x238>)
 8003766:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800376a:	4a2e      	ldr	r2, [pc, #184]	; (8003824 <HAL_GPIO_Init+0x238>)
 800376c:	f043 0302 	orr.w	r3, r3, #2
 8003770:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003774:	4b2b      	ldr	r3, [pc, #172]	; (8003824 <HAL_GPIO_Init+0x238>)
 8003776:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800377a:	f003 0302 	and.w	r3, r3, #2
 800377e:	60fb      	str	r3, [r7, #12]
 8003780:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003782:	4a29      	ldr	r2, [pc, #164]	; (8003828 <HAL_GPIO_Init+0x23c>)
 8003784:	69fb      	ldr	r3, [r7, #28]
 8003786:	089b      	lsrs	r3, r3, #2
 8003788:	3302      	adds	r3, #2
 800378a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800378e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003790:	69fb      	ldr	r3, [r7, #28]
 8003792:	f003 0303 	and.w	r3, r3, #3
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	220f      	movs	r2, #15
 800379a:	fa02 f303 	lsl.w	r3, r2, r3
 800379e:	43db      	mvns	r3, r3
 80037a0:	69ba      	ldr	r2, [r7, #24]
 80037a2:	4013      	ands	r3, r2
 80037a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	4a20      	ldr	r2, [pc, #128]	; (800382c <HAL_GPIO_Init+0x240>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d052      	beq.n	8003854 <HAL_GPIO_Init+0x268>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	4a1f      	ldr	r2, [pc, #124]	; (8003830 <HAL_GPIO_Init+0x244>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d031      	beq.n	800381a <HAL_GPIO_Init+0x22e>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	4a1e      	ldr	r2, [pc, #120]	; (8003834 <HAL_GPIO_Init+0x248>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d02b      	beq.n	8003816 <HAL_GPIO_Init+0x22a>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	4a1d      	ldr	r2, [pc, #116]	; (8003838 <HAL_GPIO_Init+0x24c>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d025      	beq.n	8003812 <HAL_GPIO_Init+0x226>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	4a1c      	ldr	r2, [pc, #112]	; (800383c <HAL_GPIO_Init+0x250>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d01f      	beq.n	800380e <HAL_GPIO_Init+0x222>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	4a1b      	ldr	r2, [pc, #108]	; (8003840 <HAL_GPIO_Init+0x254>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d019      	beq.n	800380a <HAL_GPIO_Init+0x21e>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	4a1a      	ldr	r2, [pc, #104]	; (8003844 <HAL_GPIO_Init+0x258>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d013      	beq.n	8003806 <HAL_GPIO_Init+0x21a>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	4a19      	ldr	r2, [pc, #100]	; (8003848 <HAL_GPIO_Init+0x25c>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d00d      	beq.n	8003802 <HAL_GPIO_Init+0x216>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	4a18      	ldr	r2, [pc, #96]	; (800384c <HAL_GPIO_Init+0x260>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d007      	beq.n	80037fe <HAL_GPIO_Init+0x212>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	4a17      	ldr	r2, [pc, #92]	; (8003850 <HAL_GPIO_Init+0x264>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d101      	bne.n	80037fa <HAL_GPIO_Init+0x20e>
 80037f6:	2309      	movs	r3, #9
 80037f8:	e02d      	b.n	8003856 <HAL_GPIO_Init+0x26a>
 80037fa:	230a      	movs	r3, #10
 80037fc:	e02b      	b.n	8003856 <HAL_GPIO_Init+0x26a>
 80037fe:	2308      	movs	r3, #8
 8003800:	e029      	b.n	8003856 <HAL_GPIO_Init+0x26a>
 8003802:	2307      	movs	r3, #7
 8003804:	e027      	b.n	8003856 <HAL_GPIO_Init+0x26a>
 8003806:	2306      	movs	r3, #6
 8003808:	e025      	b.n	8003856 <HAL_GPIO_Init+0x26a>
 800380a:	2305      	movs	r3, #5
 800380c:	e023      	b.n	8003856 <HAL_GPIO_Init+0x26a>
 800380e:	2304      	movs	r3, #4
 8003810:	e021      	b.n	8003856 <HAL_GPIO_Init+0x26a>
 8003812:	2303      	movs	r3, #3
 8003814:	e01f      	b.n	8003856 <HAL_GPIO_Init+0x26a>
 8003816:	2302      	movs	r3, #2
 8003818:	e01d      	b.n	8003856 <HAL_GPIO_Init+0x26a>
 800381a:	2301      	movs	r3, #1
 800381c:	e01b      	b.n	8003856 <HAL_GPIO_Init+0x26a>
 800381e:	bf00      	nop
 8003820:	58000080 	.word	0x58000080
 8003824:	58024400 	.word	0x58024400
 8003828:	58000400 	.word	0x58000400
 800382c:	58020000 	.word	0x58020000
 8003830:	58020400 	.word	0x58020400
 8003834:	58020800 	.word	0x58020800
 8003838:	58020c00 	.word	0x58020c00
 800383c:	58021000 	.word	0x58021000
 8003840:	58021400 	.word	0x58021400
 8003844:	58021800 	.word	0x58021800
 8003848:	58021c00 	.word	0x58021c00
 800384c:	58022000 	.word	0x58022000
 8003850:	58022400 	.word	0x58022400
 8003854:	2300      	movs	r3, #0
 8003856:	69fa      	ldr	r2, [r7, #28]
 8003858:	f002 0203 	and.w	r2, r2, #3
 800385c:	0092      	lsls	r2, r2, #2
 800385e:	4093      	lsls	r3, r2
 8003860:	69ba      	ldr	r2, [r7, #24]
 8003862:	4313      	orrs	r3, r2
 8003864:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003866:	4938      	ldr	r1, [pc, #224]	; (8003948 <HAL_GPIO_Init+0x35c>)
 8003868:	69fb      	ldr	r3, [r7, #28]
 800386a:	089b      	lsrs	r3, r3, #2
 800386c:	3302      	adds	r3, #2
 800386e:	69ba      	ldr	r2, [r7, #24]
 8003870:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003874:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	43db      	mvns	r3, r3
 8003880:	69ba      	ldr	r2, [r7, #24]
 8003882:	4013      	ands	r3, r2
 8003884:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800388e:	2b00      	cmp	r3, #0
 8003890:	d003      	beq.n	800389a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003892:	69ba      	ldr	r2, [r7, #24]
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	4313      	orrs	r3, r2
 8003898:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800389a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800389e:	69bb      	ldr	r3, [r7, #24]
 80038a0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80038a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	43db      	mvns	r3, r3
 80038ae:	69ba      	ldr	r2, [r7, #24]
 80038b0:	4013      	ands	r3, r2
 80038b2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d003      	beq.n	80038c8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80038c0:	69ba      	ldr	r2, [r7, #24]
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	4313      	orrs	r3, r2
 80038c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80038c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80038cc:	69bb      	ldr	r3, [r7, #24]
 80038ce:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	43db      	mvns	r3, r3
 80038da:	69ba      	ldr	r2, [r7, #24]
 80038dc:	4013      	ands	r3, r2
 80038de:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d003      	beq.n	80038f4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80038ec:	69ba      	ldr	r2, [r7, #24]
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	4313      	orrs	r3, r2
 80038f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	69ba      	ldr	r2, [r7, #24]
 80038f8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	43db      	mvns	r3, r3
 8003904:	69ba      	ldr	r2, [r7, #24]
 8003906:	4013      	ands	r3, r2
 8003908:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003912:	2b00      	cmp	r3, #0
 8003914:	d003      	beq.n	800391e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003916:	69ba      	ldr	r2, [r7, #24]
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	4313      	orrs	r3, r2
 800391c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	69ba      	ldr	r2, [r7, #24]
 8003922:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003924:	69fb      	ldr	r3, [r7, #28]
 8003926:	3301      	adds	r3, #1
 8003928:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	69fb      	ldr	r3, [r7, #28]
 8003930:	fa22 f303 	lsr.w	r3, r2, r3
 8003934:	2b00      	cmp	r3, #0
 8003936:	f47f ae63 	bne.w	8003600 <HAL_GPIO_Init+0x14>
  }
}
 800393a:	bf00      	nop
 800393c:	bf00      	nop
 800393e:	3724      	adds	r7, #36	; 0x24
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr
 8003948:	58000400 	.word	0x58000400

0800394c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800394c:	b480      	push	{r7}
 800394e:	b083      	sub	sp, #12
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	460b      	mov	r3, r1
 8003956:	807b      	strh	r3, [r7, #2]
 8003958:	4613      	mov	r3, r2
 800395a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800395c:	787b      	ldrb	r3, [r7, #1]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d003      	beq.n	800396a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003962:	887a      	ldrh	r2, [r7, #2]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003968:	e003      	b.n	8003972 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800396a:	887b      	ldrh	r3, [r7, #2]
 800396c:	041a      	lsls	r2, r3, #16
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	619a      	str	r2, [r3, #24]
}
 8003972:	bf00      	nop
 8003974:	370c      	adds	r7, #12
 8003976:	46bd      	mov	sp, r7
 8003978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397c:	4770      	bx	lr

0800397e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800397e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003980:	b08f      	sub	sp, #60	; 0x3c
 8003982:	af0a      	add	r7, sp, #40	; 0x28
 8003984:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d101      	bne.n	8003990 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	e116      	b.n	8003bbe <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800399c:	b2db      	uxtb	r3, r3
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d106      	bne.n	80039b0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2200      	movs	r2, #0
 80039a6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f009 faf0 	bl	800cf90 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2203      	movs	r2, #3
 80039b4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d102      	bne.n	80039ca <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2200      	movs	r2, #0
 80039c8:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4618      	mov	r0, r3
 80039d0:	f005 fed9 	bl	8009786 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	603b      	str	r3, [r7, #0]
 80039da:	687e      	ldr	r6, [r7, #4]
 80039dc:	466d      	mov	r5, sp
 80039de:	f106 0410 	add.w	r4, r6, #16
 80039e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80039e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80039e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80039e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80039ea:	e894 0003 	ldmia.w	r4, {r0, r1}
 80039ee:	e885 0003 	stmia.w	r5, {r0, r1}
 80039f2:	1d33      	adds	r3, r6, #4
 80039f4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80039f6:	6838      	ldr	r0, [r7, #0]
 80039f8:	f005 fda4 	bl	8009544 <USB_CoreInit>
 80039fc:	4603      	mov	r3, r0
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d005      	beq.n	8003a0e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2202      	movs	r2, #2
 8003a06:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e0d7      	b.n	8003bbe <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	2100      	movs	r1, #0
 8003a14:	4618      	mov	r0, r3
 8003a16:	f005 fec7 	bl	80097a8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	73fb      	strb	r3, [r7, #15]
 8003a1e:	e04a      	b.n	8003ab6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003a20:	7bfa      	ldrb	r2, [r7, #15]
 8003a22:	6879      	ldr	r1, [r7, #4]
 8003a24:	4613      	mov	r3, r2
 8003a26:	00db      	lsls	r3, r3, #3
 8003a28:	4413      	add	r3, r2
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	440b      	add	r3, r1
 8003a2e:	333d      	adds	r3, #61	; 0x3d
 8003a30:	2201      	movs	r2, #1
 8003a32:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003a34:	7bfa      	ldrb	r2, [r7, #15]
 8003a36:	6879      	ldr	r1, [r7, #4]
 8003a38:	4613      	mov	r3, r2
 8003a3a:	00db      	lsls	r3, r3, #3
 8003a3c:	4413      	add	r3, r2
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	440b      	add	r3, r1
 8003a42:	333c      	adds	r3, #60	; 0x3c
 8003a44:	7bfa      	ldrb	r2, [r7, #15]
 8003a46:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003a48:	7bfa      	ldrb	r2, [r7, #15]
 8003a4a:	7bfb      	ldrb	r3, [r7, #15]
 8003a4c:	b298      	uxth	r0, r3
 8003a4e:	6879      	ldr	r1, [r7, #4]
 8003a50:	4613      	mov	r3, r2
 8003a52:	00db      	lsls	r3, r3, #3
 8003a54:	4413      	add	r3, r2
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	440b      	add	r3, r1
 8003a5a:	3356      	adds	r3, #86	; 0x56
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003a60:	7bfa      	ldrb	r2, [r7, #15]
 8003a62:	6879      	ldr	r1, [r7, #4]
 8003a64:	4613      	mov	r3, r2
 8003a66:	00db      	lsls	r3, r3, #3
 8003a68:	4413      	add	r3, r2
 8003a6a:	009b      	lsls	r3, r3, #2
 8003a6c:	440b      	add	r3, r1
 8003a6e:	3340      	adds	r3, #64	; 0x40
 8003a70:	2200      	movs	r2, #0
 8003a72:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003a74:	7bfa      	ldrb	r2, [r7, #15]
 8003a76:	6879      	ldr	r1, [r7, #4]
 8003a78:	4613      	mov	r3, r2
 8003a7a:	00db      	lsls	r3, r3, #3
 8003a7c:	4413      	add	r3, r2
 8003a7e:	009b      	lsls	r3, r3, #2
 8003a80:	440b      	add	r3, r1
 8003a82:	3344      	adds	r3, #68	; 0x44
 8003a84:	2200      	movs	r2, #0
 8003a86:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003a88:	7bfa      	ldrb	r2, [r7, #15]
 8003a8a:	6879      	ldr	r1, [r7, #4]
 8003a8c:	4613      	mov	r3, r2
 8003a8e:	00db      	lsls	r3, r3, #3
 8003a90:	4413      	add	r3, r2
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	440b      	add	r3, r1
 8003a96:	3348      	adds	r3, #72	; 0x48
 8003a98:	2200      	movs	r2, #0
 8003a9a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003a9c:	7bfa      	ldrb	r2, [r7, #15]
 8003a9e:	6879      	ldr	r1, [r7, #4]
 8003aa0:	4613      	mov	r3, r2
 8003aa2:	00db      	lsls	r3, r3, #3
 8003aa4:	4413      	add	r3, r2
 8003aa6:	009b      	lsls	r3, r3, #2
 8003aa8:	440b      	add	r3, r1
 8003aaa:	334c      	adds	r3, #76	; 0x4c
 8003aac:	2200      	movs	r2, #0
 8003aae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ab0:	7bfb      	ldrb	r3, [r7, #15]
 8003ab2:	3301      	adds	r3, #1
 8003ab4:	73fb      	strb	r3, [r7, #15]
 8003ab6:	7bfa      	ldrb	r2, [r7, #15]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	429a      	cmp	r2, r3
 8003abe:	d3af      	bcc.n	8003a20 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	73fb      	strb	r3, [r7, #15]
 8003ac4:	e044      	b.n	8003b50 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003ac6:	7bfa      	ldrb	r2, [r7, #15]
 8003ac8:	6879      	ldr	r1, [r7, #4]
 8003aca:	4613      	mov	r3, r2
 8003acc:	00db      	lsls	r3, r3, #3
 8003ace:	4413      	add	r3, r2
 8003ad0:	009b      	lsls	r3, r3, #2
 8003ad2:	440b      	add	r3, r1
 8003ad4:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003ad8:	2200      	movs	r2, #0
 8003ada:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003adc:	7bfa      	ldrb	r2, [r7, #15]
 8003ade:	6879      	ldr	r1, [r7, #4]
 8003ae0:	4613      	mov	r3, r2
 8003ae2:	00db      	lsls	r3, r3, #3
 8003ae4:	4413      	add	r3, r2
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	440b      	add	r3, r1
 8003aea:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003aee:	7bfa      	ldrb	r2, [r7, #15]
 8003af0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003af2:	7bfa      	ldrb	r2, [r7, #15]
 8003af4:	6879      	ldr	r1, [r7, #4]
 8003af6:	4613      	mov	r3, r2
 8003af8:	00db      	lsls	r3, r3, #3
 8003afa:	4413      	add	r3, r2
 8003afc:	009b      	lsls	r3, r3, #2
 8003afe:	440b      	add	r3, r1
 8003b00:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003b04:	2200      	movs	r2, #0
 8003b06:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003b08:	7bfa      	ldrb	r2, [r7, #15]
 8003b0a:	6879      	ldr	r1, [r7, #4]
 8003b0c:	4613      	mov	r3, r2
 8003b0e:	00db      	lsls	r3, r3, #3
 8003b10:	4413      	add	r3, r2
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	440b      	add	r3, r1
 8003b16:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003b1e:	7bfa      	ldrb	r2, [r7, #15]
 8003b20:	6879      	ldr	r1, [r7, #4]
 8003b22:	4613      	mov	r3, r2
 8003b24:	00db      	lsls	r3, r3, #3
 8003b26:	4413      	add	r3, r2
 8003b28:	009b      	lsls	r3, r3, #2
 8003b2a:	440b      	add	r3, r1
 8003b2c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003b30:	2200      	movs	r2, #0
 8003b32:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003b34:	7bfa      	ldrb	r2, [r7, #15]
 8003b36:	6879      	ldr	r1, [r7, #4]
 8003b38:	4613      	mov	r3, r2
 8003b3a:	00db      	lsls	r3, r3, #3
 8003b3c:	4413      	add	r3, r2
 8003b3e:	009b      	lsls	r3, r3, #2
 8003b40:	440b      	add	r3, r1
 8003b42:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003b46:	2200      	movs	r2, #0
 8003b48:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b4a:	7bfb      	ldrb	r3, [r7, #15]
 8003b4c:	3301      	adds	r3, #1
 8003b4e:	73fb      	strb	r3, [r7, #15]
 8003b50:	7bfa      	ldrb	r2, [r7, #15]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	429a      	cmp	r2, r3
 8003b58:	d3b5      	bcc.n	8003ac6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	603b      	str	r3, [r7, #0]
 8003b60:	687e      	ldr	r6, [r7, #4]
 8003b62:	466d      	mov	r5, sp
 8003b64:	f106 0410 	add.w	r4, r6, #16
 8003b68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b6a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b6e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b70:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003b74:	e885 0003 	stmia.w	r5, {r0, r1}
 8003b78:	1d33      	adds	r3, r6, #4
 8003b7a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003b7c:	6838      	ldr	r0, [r7, #0]
 8003b7e:	f005 fe5f 	bl	8009840 <USB_DevInit>
 8003b82:	4603      	mov	r3, r0
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d005      	beq.n	8003b94 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2202      	movs	r2, #2
 8003b8c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	e014      	b.n	8003bbe <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2200      	movs	r2, #0
 8003b98:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d102      	bne.n	8003bb2 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003bac:	6878      	ldr	r0, [r7, #4]
 8003bae:	f001 f96f 	bl	8004e90 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f006 fea1 	bl	800a8fe <USB_DevDisconnect>

  return HAL_OK;
 8003bbc:	2300      	movs	r3, #0
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3714      	adds	r7, #20
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003bc6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003bc6:	b580      	push	{r7, lr}
 8003bc8:	b084      	sub	sp, #16
 8003bca:	af00      	add	r7, sp, #0
 8003bcc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003bda:	2b01      	cmp	r3, #1
 8003bdc:	d101      	bne.n	8003be2 <HAL_PCD_Start+0x1c>
 8003bde:	2302      	movs	r3, #2
 8003be0:	e022      	b.n	8003c28 <HAL_PCD_Start+0x62>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2201      	movs	r2, #1
 8003be6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d109      	bne.n	8003c0a <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 8003bfa:	2b01      	cmp	r3, #1
 8003bfc:	d105      	bne.n	8003c0a <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c02:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f005 fda8 	bl	8009764 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f006 fe4f 	bl	800a8bc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2200      	movs	r2, #0
 8003c22:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003c26:	2300      	movs	r3, #0
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	3710      	adds	r7, #16
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}

08003c30 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003c30:	b590      	push	{r4, r7, lr}
 8003c32:	b08d      	sub	sp, #52	; 0x34
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c3e:	6a3b      	ldr	r3, [r7, #32]
 8003c40:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4618      	mov	r0, r3
 8003c48:	f006 ff0d 	bl	800aa66 <USB_GetMode>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	f040 84b7 	bne.w	80045c2 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4618      	mov	r0, r3
 8003c5a:	f006 fe71 	bl	800a940 <USB_ReadInterrupts>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	f000 84ad 	beq.w	80045c0 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003c66:	69fb      	ldr	r3, [r7, #28]
 8003c68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	0a1b      	lsrs	r3, r3, #8
 8003c70:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f006 fe5e 	bl	800a940 <USB_ReadInterrupts>
 8003c84:	4603      	mov	r3, r0
 8003c86:	f003 0302 	and.w	r3, r3, #2
 8003c8a:	2b02      	cmp	r3, #2
 8003c8c:	d107      	bne.n	8003c9e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	695a      	ldr	r2, [r3, #20]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f002 0202 	and.w	r2, r2, #2
 8003c9c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f006 fe4c 	bl	800a940 <USB_ReadInterrupts>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	f003 0310 	and.w	r3, r3, #16
 8003cae:	2b10      	cmp	r3, #16
 8003cb0:	d161      	bne.n	8003d76 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	699a      	ldr	r2, [r3, #24]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f022 0210 	bic.w	r2, r2, #16
 8003cc0:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003cc2:	6a3b      	ldr	r3, [r7, #32]
 8003cc4:	6a1b      	ldr	r3, [r3, #32]
 8003cc6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003cc8:	69bb      	ldr	r3, [r7, #24]
 8003cca:	f003 020f 	and.w	r2, r3, #15
 8003cce:	4613      	mov	r3, r2
 8003cd0:	00db      	lsls	r3, r3, #3
 8003cd2:	4413      	add	r3, r2
 8003cd4:	009b      	lsls	r3, r3, #2
 8003cd6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	4413      	add	r3, r2
 8003cde:	3304      	adds	r3, #4
 8003ce0:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003ce2:	69bb      	ldr	r3, [r7, #24]
 8003ce4:	0c5b      	lsrs	r3, r3, #17
 8003ce6:	f003 030f 	and.w	r3, r3, #15
 8003cea:	2b02      	cmp	r3, #2
 8003cec:	d124      	bne.n	8003d38 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003cee:	69ba      	ldr	r2, [r7, #24]
 8003cf0:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d035      	beq.n	8003d66 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003cfe:	69bb      	ldr	r3, [r7, #24]
 8003d00:	091b      	lsrs	r3, r3, #4
 8003d02:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003d04:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d08:	b29b      	uxth	r3, r3
 8003d0a:	461a      	mov	r2, r3
 8003d0c:	6a38      	ldr	r0, [r7, #32]
 8003d0e:	f006 fc83 	bl	800a618 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	68da      	ldr	r2, [r3, #12]
 8003d16:	69bb      	ldr	r3, [r7, #24]
 8003d18:	091b      	lsrs	r3, r3, #4
 8003d1a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d1e:	441a      	add	r2, r3
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	695a      	ldr	r2, [r3, #20]
 8003d28:	69bb      	ldr	r3, [r7, #24]
 8003d2a:	091b      	lsrs	r3, r3, #4
 8003d2c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d30:	441a      	add	r2, r3
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	615a      	str	r2, [r3, #20]
 8003d36:	e016      	b.n	8003d66 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003d38:	69bb      	ldr	r3, [r7, #24]
 8003d3a:	0c5b      	lsrs	r3, r3, #17
 8003d3c:	f003 030f 	and.w	r3, r3, #15
 8003d40:	2b06      	cmp	r3, #6
 8003d42:	d110      	bne.n	8003d66 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003d4a:	2208      	movs	r2, #8
 8003d4c:	4619      	mov	r1, r3
 8003d4e:	6a38      	ldr	r0, [r7, #32]
 8003d50:	f006 fc62 	bl	800a618 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	695a      	ldr	r2, [r3, #20]
 8003d58:	69bb      	ldr	r3, [r7, #24]
 8003d5a:	091b      	lsrs	r3, r3, #4
 8003d5c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d60:	441a      	add	r2, r3
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	699a      	ldr	r2, [r3, #24]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f042 0210 	orr.w	r2, r2, #16
 8003d74:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f006 fde0 	bl	800a940 <USB_ReadInterrupts>
 8003d80:	4603      	mov	r3, r0
 8003d82:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d86:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003d8a:	f040 80a7 	bne.w	8003edc <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4618      	mov	r0, r3
 8003d98:	f006 fde5 	bl	800a966 <USB_ReadDevAllOutEpInterrupt>
 8003d9c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003d9e:	e099      	b.n	8003ed4 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003da2:	f003 0301 	and.w	r3, r3, #1
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	f000 808e 	beq.w	8003ec8 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003db2:	b2d2      	uxtb	r2, r2
 8003db4:	4611      	mov	r1, r2
 8003db6:	4618      	mov	r0, r3
 8003db8:	f006 fe09 	bl	800a9ce <USB_ReadDevOutEPInterrupt>
 8003dbc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	f003 0301 	and.w	r3, r3, #1
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d00c      	beq.n	8003de2 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dca:	015a      	lsls	r2, r3, #5
 8003dcc:	69fb      	ldr	r3, [r7, #28]
 8003dce:	4413      	add	r3, r2
 8003dd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dd4:	461a      	mov	r2, r3
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003dda:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003ddc:	6878      	ldr	r0, [r7, #4]
 8003dde:	f000 fed1 	bl	8004b84 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	f003 0308 	and.w	r3, r3, #8
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d00c      	beq.n	8003e06 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dee:	015a      	lsls	r2, r3, #5
 8003df0:	69fb      	ldr	r3, [r7, #28]
 8003df2:	4413      	add	r3, r2
 8003df4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003df8:	461a      	mov	r2, r3
 8003dfa:	2308      	movs	r3, #8
 8003dfc:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003dfe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003e00:	6878      	ldr	r0, [r7, #4]
 8003e02:	f000 ffa7 	bl	8004d54 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	f003 0310 	and.w	r3, r3, #16
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d008      	beq.n	8003e22 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e12:	015a      	lsls	r2, r3, #5
 8003e14:	69fb      	ldr	r3, [r7, #28]
 8003e16:	4413      	add	r3, r2
 8003e18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e1c:	461a      	mov	r2, r3
 8003e1e:	2310      	movs	r3, #16
 8003e20:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	f003 0302 	and.w	r3, r3, #2
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d030      	beq.n	8003e8e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003e2c:	6a3b      	ldr	r3, [r7, #32]
 8003e2e:	695b      	ldr	r3, [r3, #20]
 8003e30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e34:	2b80      	cmp	r3, #128	; 0x80
 8003e36:	d109      	bne.n	8003e4c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003e38:	69fb      	ldr	r3, [r7, #28]
 8003e3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	69fa      	ldr	r2, [r7, #28]
 8003e42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e4a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003e4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e4e:	4613      	mov	r3, r2
 8003e50:	00db      	lsls	r3, r3, #3
 8003e52:	4413      	add	r3, r2
 8003e54:	009b      	lsls	r3, r3, #2
 8003e56:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003e5a:	687a      	ldr	r2, [r7, #4]
 8003e5c:	4413      	add	r3, r2
 8003e5e:	3304      	adds	r3, #4
 8003e60:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	78db      	ldrb	r3, [r3, #3]
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	d108      	bne.n	8003e7c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e72:	b2db      	uxtb	r3, r3
 8003e74:	4619      	mov	r1, r3
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	f009 f9b0 	bl	800d1dc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e7e:	015a      	lsls	r2, r3, #5
 8003e80:	69fb      	ldr	r3, [r7, #28]
 8003e82:	4413      	add	r3, r2
 8003e84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e88:	461a      	mov	r2, r3
 8003e8a:	2302      	movs	r3, #2
 8003e8c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	f003 0320 	and.w	r3, r3, #32
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d008      	beq.n	8003eaa <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9a:	015a      	lsls	r2, r3, #5
 8003e9c:	69fb      	ldr	r3, [r7, #28]
 8003e9e:	4413      	add	r3, r2
 8003ea0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ea4:	461a      	mov	r2, r3
 8003ea6:	2320      	movs	r3, #32
 8003ea8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d009      	beq.n	8003ec8 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb6:	015a      	lsls	r2, r3, #5
 8003eb8:	69fb      	ldr	r3, [r7, #28]
 8003eba:	4413      	add	r3, r2
 8003ebc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ec0:	461a      	mov	r2, r3
 8003ec2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003ec6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eca:	3301      	adds	r3, #1
 8003ecc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ed0:	085b      	lsrs	r3, r3, #1
 8003ed2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	f47f af62 	bne.w	8003da0 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f006 fd2d 	bl	800a940 <USB_ReadInterrupts>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003eec:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003ef0:	f040 80db 	bne.w	80040aa <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f006 fd4e 	bl	800a99a <USB_ReadDevAllInEpInterrupt>
 8003efe:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003f00:	2300      	movs	r3, #0
 8003f02:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003f04:	e0cd      	b.n	80040a2 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f08:	f003 0301 	and.w	r3, r3, #1
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	f000 80c2 	beq.w	8004096 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f18:	b2d2      	uxtb	r2, r2
 8003f1a:	4611      	mov	r1, r2
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f006 fd74 	bl	800aa0a <USB_ReadDevInEPInterrupt>
 8003f22:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	f003 0301 	and.w	r3, r3, #1
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d057      	beq.n	8003fde <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f30:	f003 030f 	and.w	r3, r3, #15
 8003f34:	2201      	movs	r2, #1
 8003f36:	fa02 f303 	lsl.w	r3, r2, r3
 8003f3a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003f3c:	69fb      	ldr	r3, [r7, #28]
 8003f3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	43db      	mvns	r3, r3
 8003f48:	69f9      	ldr	r1, [r7, #28]
 8003f4a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f4e:	4013      	ands	r3, r2
 8003f50:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f54:	015a      	lsls	r2, r3, #5
 8003f56:	69fb      	ldr	r3, [r7, #28]
 8003f58:	4413      	add	r3, r2
 8003f5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f5e:	461a      	mov	r2, r3
 8003f60:	2301      	movs	r3, #1
 8003f62:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	68db      	ldr	r3, [r3, #12]
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	d132      	bne.n	8003fd2 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003f6c:	6879      	ldr	r1, [r7, #4]
 8003f6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f70:	4613      	mov	r3, r2
 8003f72:	00db      	lsls	r3, r3, #3
 8003f74:	4413      	add	r3, r2
 8003f76:	009b      	lsls	r3, r3, #2
 8003f78:	440b      	add	r3, r1
 8003f7a:	3348      	adds	r3, #72	; 0x48
 8003f7c:	6819      	ldr	r1, [r3, #0]
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f82:	4613      	mov	r3, r2
 8003f84:	00db      	lsls	r3, r3, #3
 8003f86:	4413      	add	r3, r2
 8003f88:	009b      	lsls	r3, r3, #2
 8003f8a:	4403      	add	r3, r0
 8003f8c:	3344      	adds	r3, #68	; 0x44
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4419      	add	r1, r3
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f96:	4613      	mov	r3, r2
 8003f98:	00db      	lsls	r3, r3, #3
 8003f9a:	4413      	add	r3, r2
 8003f9c:	009b      	lsls	r3, r3, #2
 8003f9e:	4403      	add	r3, r0
 8003fa0:	3348      	adds	r3, #72	; 0x48
 8003fa2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d113      	bne.n	8003fd2 <HAL_PCD_IRQHandler+0x3a2>
 8003faa:	6879      	ldr	r1, [r7, #4]
 8003fac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fae:	4613      	mov	r3, r2
 8003fb0:	00db      	lsls	r3, r3, #3
 8003fb2:	4413      	add	r3, r2
 8003fb4:	009b      	lsls	r3, r3, #2
 8003fb6:	440b      	add	r3, r1
 8003fb8:	334c      	adds	r3, #76	; 0x4c
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d108      	bne.n	8003fd2 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6818      	ldr	r0, [r3, #0]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003fca:	461a      	mov	r2, r3
 8003fcc:	2101      	movs	r1, #1
 8003fce:	f006 fd7d 	bl	800aacc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd4:	b2db      	uxtb	r3, r3
 8003fd6:	4619      	mov	r1, r3
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f009 f87a 	bl	800d0d2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	f003 0308 	and.w	r3, r3, #8
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d008      	beq.n	8003ffa <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fea:	015a      	lsls	r2, r3, #5
 8003fec:	69fb      	ldr	r3, [r7, #28]
 8003fee:	4413      	add	r3, r2
 8003ff0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ff4:	461a      	mov	r2, r3
 8003ff6:	2308      	movs	r3, #8
 8003ff8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	f003 0310 	and.w	r3, r3, #16
 8004000:	2b00      	cmp	r3, #0
 8004002:	d008      	beq.n	8004016 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004006:	015a      	lsls	r2, r3, #5
 8004008:	69fb      	ldr	r3, [r7, #28]
 800400a:	4413      	add	r3, r2
 800400c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004010:	461a      	mov	r2, r3
 8004012:	2310      	movs	r3, #16
 8004014:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800401c:	2b00      	cmp	r3, #0
 800401e:	d008      	beq.n	8004032 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004022:	015a      	lsls	r2, r3, #5
 8004024:	69fb      	ldr	r3, [r7, #28]
 8004026:	4413      	add	r3, r2
 8004028:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800402c:	461a      	mov	r2, r3
 800402e:	2340      	movs	r3, #64	; 0x40
 8004030:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	f003 0302 	and.w	r3, r3, #2
 8004038:	2b00      	cmp	r3, #0
 800403a:	d023      	beq.n	8004084 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800403c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800403e:	6a38      	ldr	r0, [r7, #32]
 8004040:	f005 fd5c 	bl	8009afc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004044:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004046:	4613      	mov	r3, r2
 8004048:	00db      	lsls	r3, r3, #3
 800404a:	4413      	add	r3, r2
 800404c:	009b      	lsls	r3, r3, #2
 800404e:	3338      	adds	r3, #56	; 0x38
 8004050:	687a      	ldr	r2, [r7, #4]
 8004052:	4413      	add	r3, r2
 8004054:	3304      	adds	r3, #4
 8004056:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	78db      	ldrb	r3, [r3, #3]
 800405c:	2b01      	cmp	r3, #1
 800405e:	d108      	bne.n	8004072 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	2200      	movs	r2, #0
 8004064:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004068:	b2db      	uxtb	r3, r3
 800406a:	4619      	mov	r1, r3
 800406c:	6878      	ldr	r0, [r7, #4]
 800406e:	f009 f8c7 	bl	800d200 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004074:	015a      	lsls	r2, r3, #5
 8004076:	69fb      	ldr	r3, [r7, #28]
 8004078:	4413      	add	r3, r2
 800407a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800407e:	461a      	mov	r2, r3
 8004080:	2302      	movs	r3, #2
 8004082:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800408a:	2b00      	cmp	r3, #0
 800408c:	d003      	beq.n	8004096 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800408e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004090:	6878      	ldr	r0, [r7, #4]
 8004092:	f000 fcea 	bl	8004a6a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004098:	3301      	adds	r3, #1
 800409a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800409c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800409e:	085b      	lsrs	r3, r3, #1
 80040a0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80040a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	f47f af2e 	bne.w	8003f06 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4618      	mov	r0, r3
 80040b0:	f006 fc46 	bl	800a940 <USB_ReadInterrupts>
 80040b4:	4603      	mov	r3, r0
 80040b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80040ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80040be:	d122      	bne.n	8004106 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80040c0:	69fb      	ldr	r3, [r7, #28]
 80040c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	69fa      	ldr	r2, [r7, #28]
 80040ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80040ce:	f023 0301 	bic.w	r3, r3, #1
 80040d2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80040da:	2b01      	cmp	r3, #1
 80040dc:	d108      	bne.n	80040f0 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2200      	movs	r2, #0
 80040e2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80040e6:	2100      	movs	r1, #0
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	f000 fef5 	bl	8004ed8 <HAL_PCDEx_LPM_Callback>
 80040ee:	e002      	b.n	80040f6 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	f009 f865 	bl	800d1c0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	695a      	ldr	r2, [r3, #20]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004104:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4618      	mov	r0, r3
 800410c:	f006 fc18 	bl	800a940 <USB_ReadInterrupts>
 8004110:	4603      	mov	r3, r0
 8004112:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004116:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800411a:	d112      	bne.n	8004142 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800411c:	69fb      	ldr	r3, [r7, #28]
 800411e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	f003 0301 	and.w	r3, r3, #1
 8004128:	2b01      	cmp	r3, #1
 800412a:	d102      	bne.n	8004132 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800412c:	6878      	ldr	r0, [r7, #4]
 800412e:	f009 f821 	bl	800d174 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	695a      	ldr	r2, [r3, #20]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004140:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4618      	mov	r0, r3
 8004148:	f006 fbfa 	bl	800a940 <USB_ReadInterrupts>
 800414c:	4603      	mov	r3, r0
 800414e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004152:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004156:	d121      	bne.n	800419c <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	695a      	ldr	r2, [r3, #20]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8004166:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800416e:	2b00      	cmp	r3, #0
 8004170:	d111      	bne.n	8004196 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2201      	movs	r2, #1
 8004176:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004180:	089b      	lsrs	r3, r3, #2
 8004182:	f003 020f 	and.w	r2, r3, #15
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800418c:	2101      	movs	r1, #1
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	f000 fea2 	bl	8004ed8 <HAL_PCDEx_LPM_Callback>
 8004194:	e002      	b.n	800419c <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	f008 ffec 	bl	800d174 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4618      	mov	r0, r3
 80041a2:	f006 fbcd 	bl	800a940 <USB_ReadInterrupts>
 80041a6:	4603      	mov	r3, r0
 80041a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041b0:	f040 80b7 	bne.w	8004322 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80041b4:	69fb      	ldr	r3, [r7, #28]
 80041b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	69fa      	ldr	r2, [r7, #28]
 80041be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80041c2:	f023 0301 	bic.w	r3, r3, #1
 80041c6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	2110      	movs	r1, #16
 80041ce:	4618      	mov	r0, r3
 80041d0:	f005 fc94 	bl	8009afc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80041d4:	2300      	movs	r3, #0
 80041d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041d8:	e046      	b.n	8004268 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80041da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041dc:	015a      	lsls	r2, r3, #5
 80041de:	69fb      	ldr	r3, [r7, #28]
 80041e0:	4413      	add	r3, r2
 80041e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041e6:	461a      	mov	r2, r3
 80041e8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80041ec:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80041ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041f0:	015a      	lsls	r2, r3, #5
 80041f2:	69fb      	ldr	r3, [r7, #28]
 80041f4:	4413      	add	r3, r2
 80041f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041fe:	0151      	lsls	r1, r2, #5
 8004200:	69fa      	ldr	r2, [r7, #28]
 8004202:	440a      	add	r2, r1
 8004204:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004208:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800420c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800420e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004210:	015a      	lsls	r2, r3, #5
 8004212:	69fb      	ldr	r3, [r7, #28]
 8004214:	4413      	add	r3, r2
 8004216:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800421a:	461a      	mov	r2, r3
 800421c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004220:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004224:	015a      	lsls	r2, r3, #5
 8004226:	69fb      	ldr	r3, [r7, #28]
 8004228:	4413      	add	r3, r2
 800422a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004232:	0151      	lsls	r1, r2, #5
 8004234:	69fa      	ldr	r2, [r7, #28]
 8004236:	440a      	add	r2, r1
 8004238:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800423c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004240:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004244:	015a      	lsls	r2, r3, #5
 8004246:	69fb      	ldr	r3, [r7, #28]
 8004248:	4413      	add	r3, r2
 800424a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004252:	0151      	lsls	r1, r2, #5
 8004254:	69fa      	ldr	r2, [r7, #28]
 8004256:	440a      	add	r2, r1
 8004258:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800425c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004260:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004264:	3301      	adds	r3, #1
 8004266:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800426e:	429a      	cmp	r2, r3
 8004270:	d3b3      	bcc.n	80041da <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004272:	69fb      	ldr	r3, [r7, #28]
 8004274:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004278:	69db      	ldr	r3, [r3, #28]
 800427a:	69fa      	ldr	r2, [r7, #28]
 800427c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004280:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004284:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800428a:	2b00      	cmp	r3, #0
 800428c:	d016      	beq.n	80042bc <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800428e:	69fb      	ldr	r3, [r7, #28]
 8004290:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004294:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004298:	69fa      	ldr	r2, [r7, #28]
 800429a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800429e:	f043 030b 	orr.w	r3, r3, #11
 80042a2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80042a6:	69fb      	ldr	r3, [r7, #28]
 80042a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ae:	69fa      	ldr	r2, [r7, #28]
 80042b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80042b4:	f043 030b 	orr.w	r3, r3, #11
 80042b8:	6453      	str	r3, [r2, #68]	; 0x44
 80042ba:	e015      	b.n	80042e8 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80042bc:	69fb      	ldr	r3, [r7, #28]
 80042be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042c2:	695a      	ldr	r2, [r3, #20]
 80042c4:	69fb      	ldr	r3, [r7, #28]
 80042c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042ca:	4619      	mov	r1, r3
 80042cc:	f242 032b 	movw	r3, #8235	; 0x202b
 80042d0:	4313      	orrs	r3, r2
 80042d2:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80042d4:	69fb      	ldr	r3, [r7, #28]
 80042d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042da:	691b      	ldr	r3, [r3, #16]
 80042dc:	69fa      	ldr	r2, [r7, #28]
 80042de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80042e2:	f043 030b 	orr.w	r3, r3, #11
 80042e6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80042e8:	69fb      	ldr	r3, [r7, #28]
 80042ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	69fa      	ldr	r2, [r7, #28]
 80042f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80042f6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80042fa:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6818      	ldr	r0, [r3, #0]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	68db      	ldr	r3, [r3, #12]
 8004304:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800430c:	461a      	mov	r2, r3
 800430e:	f006 fbdd 	bl	800aacc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	695a      	ldr	r2, [r3, #20]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004320:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4618      	mov	r0, r3
 8004328:	f006 fb0a 	bl	800a940 <USB_ReadInterrupts>
 800432c:	4603      	mov	r3, r0
 800432e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004332:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004336:	d124      	bne.n	8004382 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4618      	mov	r0, r3
 800433e:	f006 fba1 	bl	800aa84 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4618      	mov	r0, r3
 8004348:	f005 fc55 	bl	8009bf6 <USB_GetDevSpeed>
 800434c:	4603      	mov	r3, r0
 800434e:	461a      	mov	r2, r3
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681c      	ldr	r4, [r3, #0]
 8004358:	f002 fa4e 	bl	80067f8 <HAL_RCC_GetHCLKFreq>
 800435c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004362:	b2db      	uxtb	r3, r3
 8004364:	461a      	mov	r2, r3
 8004366:	4620      	mov	r0, r4
 8004368:	f005 f95a 	bl	8009620 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800436c:	6878      	ldr	r0, [r7, #4]
 800436e:	f008 fed8 	bl	800d122 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	695a      	ldr	r2, [r3, #20]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004380:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4618      	mov	r0, r3
 8004388:	f006 fada 	bl	800a940 <USB_ReadInterrupts>
 800438c:	4603      	mov	r3, r0
 800438e:	f003 0308 	and.w	r3, r3, #8
 8004392:	2b08      	cmp	r3, #8
 8004394:	d10a      	bne.n	80043ac <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f008 feb5 	bl	800d106 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	695a      	ldr	r2, [r3, #20]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f002 0208 	and.w	r2, r2, #8
 80043aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4618      	mov	r0, r3
 80043b2:	f006 fac5 	bl	800a940 <USB_ReadInterrupts>
 80043b6:	4603      	mov	r3, r0
 80043b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043bc:	2b80      	cmp	r3, #128	; 0x80
 80043be:	d122      	bne.n	8004406 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80043c0:	6a3b      	ldr	r3, [r7, #32]
 80043c2:	699b      	ldr	r3, [r3, #24]
 80043c4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80043c8:	6a3b      	ldr	r3, [r7, #32]
 80043ca:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80043cc:	2301      	movs	r3, #1
 80043ce:	627b      	str	r3, [r7, #36]	; 0x24
 80043d0:	e014      	b.n	80043fc <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80043d2:	6879      	ldr	r1, [r7, #4]
 80043d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043d6:	4613      	mov	r3, r2
 80043d8:	00db      	lsls	r3, r3, #3
 80043da:	4413      	add	r3, r2
 80043dc:	009b      	lsls	r3, r3, #2
 80043de:	440b      	add	r3, r1
 80043e0:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80043e4:	781b      	ldrb	r3, [r3, #0]
 80043e6:	2b01      	cmp	r3, #1
 80043e8:	d105      	bne.n	80043f6 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80043ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ec:	b2db      	uxtb	r3, r3
 80043ee:	4619      	mov	r1, r3
 80043f0:	6878      	ldr	r0, [r7, #4]
 80043f2:	f000 fb09 	bl	8004a08 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80043f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f8:	3301      	adds	r3, #1
 80043fa:	627b      	str	r3, [r7, #36]	; 0x24
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004402:	429a      	cmp	r2, r3
 8004404:	d3e5      	bcc.n	80043d2 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4618      	mov	r0, r3
 800440c:	f006 fa98 	bl	800a940 <USB_ReadInterrupts>
 8004410:	4603      	mov	r3, r0
 8004412:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004416:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800441a:	d13b      	bne.n	8004494 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800441c:	2301      	movs	r3, #1
 800441e:	627b      	str	r3, [r7, #36]	; 0x24
 8004420:	e02b      	b.n	800447a <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004424:	015a      	lsls	r2, r3, #5
 8004426:	69fb      	ldr	r3, [r7, #28]
 8004428:	4413      	add	r3, r2
 800442a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004432:	6879      	ldr	r1, [r7, #4]
 8004434:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004436:	4613      	mov	r3, r2
 8004438:	00db      	lsls	r3, r3, #3
 800443a:	4413      	add	r3, r2
 800443c:	009b      	lsls	r3, r3, #2
 800443e:	440b      	add	r3, r1
 8004440:	3340      	adds	r3, #64	; 0x40
 8004442:	781b      	ldrb	r3, [r3, #0]
 8004444:	2b01      	cmp	r3, #1
 8004446:	d115      	bne.n	8004474 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004448:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800444a:	2b00      	cmp	r3, #0
 800444c:	da12      	bge.n	8004474 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800444e:	6879      	ldr	r1, [r7, #4]
 8004450:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004452:	4613      	mov	r3, r2
 8004454:	00db      	lsls	r3, r3, #3
 8004456:	4413      	add	r3, r2
 8004458:	009b      	lsls	r3, r3, #2
 800445a:	440b      	add	r3, r1
 800445c:	333f      	adds	r3, #63	; 0x3f
 800445e:	2201      	movs	r2, #1
 8004460:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004464:	b2db      	uxtb	r3, r3
 8004466:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800446a:	b2db      	uxtb	r3, r3
 800446c:	4619      	mov	r1, r3
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f000 faca 	bl	8004a08 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004476:	3301      	adds	r3, #1
 8004478:	627b      	str	r3, [r7, #36]	; 0x24
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004480:	429a      	cmp	r2, r3
 8004482:	d3ce      	bcc.n	8004422 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	695a      	ldr	r2, [r3, #20]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004492:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4618      	mov	r0, r3
 800449a:	f006 fa51 	bl	800a940 <USB_ReadInterrupts>
 800449e:	4603      	mov	r3, r0
 80044a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80044a8:	d155      	bne.n	8004556 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80044aa:	2301      	movs	r3, #1
 80044ac:	627b      	str	r3, [r7, #36]	; 0x24
 80044ae:	e045      	b.n	800453c <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80044b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b2:	015a      	lsls	r2, r3, #5
 80044b4:	69fb      	ldr	r3, [r7, #28]
 80044b6:	4413      	add	r3, r2
 80044b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80044c0:	6879      	ldr	r1, [r7, #4]
 80044c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044c4:	4613      	mov	r3, r2
 80044c6:	00db      	lsls	r3, r3, #3
 80044c8:	4413      	add	r3, r2
 80044ca:	009b      	lsls	r3, r3, #2
 80044cc:	440b      	add	r3, r1
 80044ce:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80044d2:	781b      	ldrb	r3, [r3, #0]
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d12e      	bne.n	8004536 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80044d8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80044da:	2b00      	cmp	r3, #0
 80044dc:	da2b      	bge.n	8004536 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80044de:	69bb      	ldr	r3, [r7, #24]
 80044e0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80044ea:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80044ee:	429a      	cmp	r2, r3
 80044f0:	d121      	bne.n	8004536 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80044f2:	6879      	ldr	r1, [r7, #4]
 80044f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044f6:	4613      	mov	r3, r2
 80044f8:	00db      	lsls	r3, r3, #3
 80044fa:	4413      	add	r3, r2
 80044fc:	009b      	lsls	r3, r3, #2
 80044fe:	440b      	add	r3, r1
 8004500:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004504:	2201      	movs	r2, #1
 8004506:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004508:	6a3b      	ldr	r3, [r7, #32]
 800450a:	699b      	ldr	r3, [r3, #24]
 800450c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004510:	6a3b      	ldr	r3, [r7, #32]
 8004512:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004514:	6a3b      	ldr	r3, [r7, #32]
 8004516:	695b      	ldr	r3, [r3, #20]
 8004518:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800451c:	2b00      	cmp	r3, #0
 800451e:	d10a      	bne.n	8004536 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004520:	69fb      	ldr	r3, [r7, #28]
 8004522:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	69fa      	ldr	r2, [r7, #28]
 800452a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800452e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004532:	6053      	str	r3, [r2, #4]
            break;
 8004534:	e007      	b.n	8004546 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004538:	3301      	adds	r3, #1
 800453a:	627b      	str	r3, [r7, #36]	; 0x24
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004542:	429a      	cmp	r2, r3
 8004544:	d3b4      	bcc.n	80044b0 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	695a      	ldr	r2, [r3, #20]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004554:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4618      	mov	r0, r3
 800455c:	f006 f9f0 	bl	800a940 <USB_ReadInterrupts>
 8004560:	4603      	mov	r3, r0
 8004562:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004566:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800456a:	d10a      	bne.n	8004582 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800456c:	6878      	ldr	r0, [r7, #4]
 800456e:	f008 fe59 	bl	800d224 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	695a      	ldr	r2, [r3, #20]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004580:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4618      	mov	r0, r3
 8004588:	f006 f9da 	bl	800a940 <USB_ReadInterrupts>
 800458c:	4603      	mov	r3, r0
 800458e:	f003 0304 	and.w	r3, r3, #4
 8004592:	2b04      	cmp	r3, #4
 8004594:	d115      	bne.n	80045c2 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800459e:	69bb      	ldr	r3, [r7, #24]
 80045a0:	f003 0304 	and.w	r3, r3, #4
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d002      	beq.n	80045ae <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80045a8:	6878      	ldr	r0, [r7, #4]
 80045aa:	f008 fe49 	bl	800d240 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	6859      	ldr	r1, [r3, #4]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	69ba      	ldr	r2, [r7, #24]
 80045ba:	430a      	orrs	r2, r1
 80045bc:	605a      	str	r2, [r3, #4]
 80045be:	e000      	b.n	80045c2 <HAL_PCD_IRQHandler+0x992>
      return;
 80045c0:	bf00      	nop
    }
  }
}
 80045c2:	3734      	adds	r7, #52	; 0x34
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd90      	pop	{r4, r7, pc}

080045c8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b082      	sub	sp, #8
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
 80045d0:	460b      	mov	r3, r1
 80045d2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80045da:	2b01      	cmp	r3, #1
 80045dc:	d101      	bne.n	80045e2 <HAL_PCD_SetAddress+0x1a>
 80045de:	2302      	movs	r3, #2
 80045e0:	e013      	b.n	800460a <HAL_PCD_SetAddress+0x42>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2201      	movs	r2, #1
 80045e6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	78fa      	ldrb	r2, [r7, #3]
 80045ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	78fa      	ldrb	r2, [r7, #3]
 80045f8:	4611      	mov	r1, r2
 80045fa:	4618      	mov	r0, r3
 80045fc:	f006 f938 	bl	800a870 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2200      	movs	r2, #0
 8004604:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004608:	2300      	movs	r3, #0
}
 800460a:	4618      	mov	r0, r3
 800460c:	3708      	adds	r7, #8
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}

08004612 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004612:	b580      	push	{r7, lr}
 8004614:	b084      	sub	sp, #16
 8004616:	af00      	add	r7, sp, #0
 8004618:	6078      	str	r0, [r7, #4]
 800461a:	4608      	mov	r0, r1
 800461c:	4611      	mov	r1, r2
 800461e:	461a      	mov	r2, r3
 8004620:	4603      	mov	r3, r0
 8004622:	70fb      	strb	r3, [r7, #3]
 8004624:	460b      	mov	r3, r1
 8004626:	803b      	strh	r3, [r7, #0]
 8004628:	4613      	mov	r3, r2
 800462a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800462c:	2300      	movs	r3, #0
 800462e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004630:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004634:	2b00      	cmp	r3, #0
 8004636:	da0f      	bge.n	8004658 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004638:	78fb      	ldrb	r3, [r7, #3]
 800463a:	f003 020f 	and.w	r2, r3, #15
 800463e:	4613      	mov	r3, r2
 8004640:	00db      	lsls	r3, r3, #3
 8004642:	4413      	add	r3, r2
 8004644:	009b      	lsls	r3, r3, #2
 8004646:	3338      	adds	r3, #56	; 0x38
 8004648:	687a      	ldr	r2, [r7, #4]
 800464a:	4413      	add	r3, r2
 800464c:	3304      	adds	r3, #4
 800464e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2201      	movs	r2, #1
 8004654:	705a      	strb	r2, [r3, #1]
 8004656:	e00f      	b.n	8004678 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004658:	78fb      	ldrb	r3, [r7, #3]
 800465a:	f003 020f 	and.w	r2, r3, #15
 800465e:	4613      	mov	r3, r2
 8004660:	00db      	lsls	r3, r3, #3
 8004662:	4413      	add	r3, r2
 8004664:	009b      	lsls	r3, r3, #2
 8004666:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800466a:	687a      	ldr	r2, [r7, #4]
 800466c:	4413      	add	r3, r2
 800466e:	3304      	adds	r3, #4
 8004670:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2200      	movs	r2, #0
 8004676:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004678:	78fb      	ldrb	r3, [r7, #3]
 800467a:	f003 030f 	and.w	r3, r3, #15
 800467e:	b2da      	uxtb	r2, r3
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004684:	883a      	ldrh	r2, [r7, #0]
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	78ba      	ldrb	r2, [r7, #2]
 800468e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	785b      	ldrb	r3, [r3, #1]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d004      	beq.n	80046a2 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	781b      	ldrb	r3, [r3, #0]
 800469c:	b29a      	uxth	r2, r3
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80046a2:	78bb      	ldrb	r3, [r7, #2]
 80046a4:	2b02      	cmp	r3, #2
 80046a6:	d102      	bne.n	80046ae <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2200      	movs	r2, #0
 80046ac:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	d101      	bne.n	80046bc <HAL_PCD_EP_Open+0xaa>
 80046b8:	2302      	movs	r3, #2
 80046ba:	e00e      	b.n	80046da <HAL_PCD_EP_Open+0xc8>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2201      	movs	r2, #1
 80046c0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	68f9      	ldr	r1, [r7, #12]
 80046ca:	4618      	mov	r0, r3
 80046cc:	f005 fab8 	bl	8009c40 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2200      	movs	r2, #0
 80046d4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80046d8:	7afb      	ldrb	r3, [r7, #11]
}
 80046da:	4618      	mov	r0, r3
 80046dc:	3710      	adds	r7, #16
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}

080046e2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80046e2:	b580      	push	{r7, lr}
 80046e4:	b084      	sub	sp, #16
 80046e6:	af00      	add	r7, sp, #0
 80046e8:	6078      	str	r0, [r7, #4]
 80046ea:	460b      	mov	r3, r1
 80046ec:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80046ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	da0f      	bge.n	8004716 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80046f6:	78fb      	ldrb	r3, [r7, #3]
 80046f8:	f003 020f 	and.w	r2, r3, #15
 80046fc:	4613      	mov	r3, r2
 80046fe:	00db      	lsls	r3, r3, #3
 8004700:	4413      	add	r3, r2
 8004702:	009b      	lsls	r3, r3, #2
 8004704:	3338      	adds	r3, #56	; 0x38
 8004706:	687a      	ldr	r2, [r7, #4]
 8004708:	4413      	add	r3, r2
 800470a:	3304      	adds	r3, #4
 800470c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	2201      	movs	r2, #1
 8004712:	705a      	strb	r2, [r3, #1]
 8004714:	e00f      	b.n	8004736 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004716:	78fb      	ldrb	r3, [r7, #3]
 8004718:	f003 020f 	and.w	r2, r3, #15
 800471c:	4613      	mov	r3, r2
 800471e:	00db      	lsls	r3, r3, #3
 8004720:	4413      	add	r3, r2
 8004722:	009b      	lsls	r3, r3, #2
 8004724:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004728:	687a      	ldr	r2, [r7, #4]
 800472a:	4413      	add	r3, r2
 800472c:	3304      	adds	r3, #4
 800472e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2200      	movs	r2, #0
 8004734:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004736:	78fb      	ldrb	r3, [r7, #3]
 8004738:	f003 030f 	and.w	r3, r3, #15
 800473c:	b2da      	uxtb	r2, r3
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004748:	2b01      	cmp	r3, #1
 800474a:	d101      	bne.n	8004750 <HAL_PCD_EP_Close+0x6e>
 800474c:	2302      	movs	r3, #2
 800474e:	e00e      	b.n	800476e <HAL_PCD_EP_Close+0x8c>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2201      	movs	r2, #1
 8004754:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	68f9      	ldr	r1, [r7, #12]
 800475e:	4618      	mov	r0, r3
 8004760:	f005 faf6 	bl	8009d50 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2200      	movs	r2, #0
 8004768:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800476c:	2300      	movs	r3, #0
}
 800476e:	4618      	mov	r0, r3
 8004770:	3710      	adds	r7, #16
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}

08004776 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004776:	b580      	push	{r7, lr}
 8004778:	b086      	sub	sp, #24
 800477a:	af00      	add	r7, sp, #0
 800477c:	60f8      	str	r0, [r7, #12]
 800477e:	607a      	str	r2, [r7, #4]
 8004780:	603b      	str	r3, [r7, #0]
 8004782:	460b      	mov	r3, r1
 8004784:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004786:	7afb      	ldrb	r3, [r7, #11]
 8004788:	f003 020f 	and.w	r2, r3, #15
 800478c:	4613      	mov	r3, r2
 800478e:	00db      	lsls	r3, r3, #3
 8004790:	4413      	add	r3, r2
 8004792:	009b      	lsls	r3, r3, #2
 8004794:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004798:	68fa      	ldr	r2, [r7, #12]
 800479a:	4413      	add	r3, r2
 800479c:	3304      	adds	r3, #4
 800479e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	687a      	ldr	r2, [r7, #4]
 80047a4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	683a      	ldr	r2, [r7, #0]
 80047aa:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	2200      	movs	r2, #0
 80047b0:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	2200      	movs	r2, #0
 80047b6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80047b8:	7afb      	ldrb	r3, [r7, #11]
 80047ba:	f003 030f 	and.w	r3, r3, #15
 80047be:	b2da      	uxtb	r2, r3
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	68db      	ldr	r3, [r3, #12]
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	d102      	bne.n	80047d2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80047cc:	687a      	ldr	r2, [r7, #4]
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	6818      	ldr	r0, [r3, #0]
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	68db      	ldr	r3, [r3, #12]
 80047da:	b2db      	uxtb	r3, r3
 80047dc:	461a      	mov	r2, r3
 80047de:	6979      	ldr	r1, [r7, #20]
 80047e0:	f005 fb92 	bl	8009f08 <USB_EPStartXfer>

  return HAL_OK;
 80047e4:	2300      	movs	r3, #0
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	3718      	adds	r7, #24
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}

080047ee <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80047ee:	b480      	push	{r7}
 80047f0:	b083      	sub	sp, #12
 80047f2:	af00      	add	r7, sp, #0
 80047f4:	6078      	str	r0, [r7, #4]
 80047f6:	460b      	mov	r3, r1
 80047f8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80047fa:	78fb      	ldrb	r3, [r7, #3]
 80047fc:	f003 020f 	and.w	r2, r3, #15
 8004800:	6879      	ldr	r1, [r7, #4]
 8004802:	4613      	mov	r3, r2
 8004804:	00db      	lsls	r3, r3, #3
 8004806:	4413      	add	r3, r2
 8004808:	009b      	lsls	r3, r3, #2
 800480a:	440b      	add	r3, r1
 800480c:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8004810:	681b      	ldr	r3, [r3, #0]
}
 8004812:	4618      	mov	r0, r3
 8004814:	370c      	adds	r7, #12
 8004816:	46bd      	mov	sp, r7
 8004818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481c:	4770      	bx	lr

0800481e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800481e:	b580      	push	{r7, lr}
 8004820:	b086      	sub	sp, #24
 8004822:	af00      	add	r7, sp, #0
 8004824:	60f8      	str	r0, [r7, #12]
 8004826:	607a      	str	r2, [r7, #4]
 8004828:	603b      	str	r3, [r7, #0]
 800482a:	460b      	mov	r3, r1
 800482c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800482e:	7afb      	ldrb	r3, [r7, #11]
 8004830:	f003 020f 	and.w	r2, r3, #15
 8004834:	4613      	mov	r3, r2
 8004836:	00db      	lsls	r3, r3, #3
 8004838:	4413      	add	r3, r2
 800483a:	009b      	lsls	r3, r3, #2
 800483c:	3338      	adds	r3, #56	; 0x38
 800483e:	68fa      	ldr	r2, [r7, #12]
 8004840:	4413      	add	r3, r2
 8004842:	3304      	adds	r3, #4
 8004844:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	687a      	ldr	r2, [r7, #4]
 800484a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	683a      	ldr	r2, [r7, #0]
 8004850:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	2200      	movs	r2, #0
 8004856:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	2201      	movs	r2, #1
 800485c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800485e:	7afb      	ldrb	r3, [r7, #11]
 8004860:	f003 030f 	and.w	r3, r3, #15
 8004864:	b2da      	uxtb	r2, r3
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	68db      	ldr	r3, [r3, #12]
 800486e:	2b01      	cmp	r3, #1
 8004870:	d102      	bne.n	8004878 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004872:	687a      	ldr	r2, [r7, #4]
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	6818      	ldr	r0, [r3, #0]
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	68db      	ldr	r3, [r3, #12]
 8004880:	b2db      	uxtb	r3, r3
 8004882:	461a      	mov	r2, r3
 8004884:	6979      	ldr	r1, [r7, #20]
 8004886:	f005 fb3f 	bl	8009f08 <USB_EPStartXfer>

  return HAL_OK;
 800488a:	2300      	movs	r3, #0
}
 800488c:	4618      	mov	r0, r3
 800488e:	3718      	adds	r7, #24
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}

08004894 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b084      	sub	sp, #16
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
 800489c:	460b      	mov	r3, r1
 800489e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80048a0:	78fb      	ldrb	r3, [r7, #3]
 80048a2:	f003 020f 	and.w	r2, r3, #15
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	429a      	cmp	r2, r3
 80048ac:	d901      	bls.n	80048b2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	e050      	b.n	8004954 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80048b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	da0f      	bge.n	80048da <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80048ba:	78fb      	ldrb	r3, [r7, #3]
 80048bc:	f003 020f 	and.w	r2, r3, #15
 80048c0:	4613      	mov	r3, r2
 80048c2:	00db      	lsls	r3, r3, #3
 80048c4:	4413      	add	r3, r2
 80048c6:	009b      	lsls	r3, r3, #2
 80048c8:	3338      	adds	r3, #56	; 0x38
 80048ca:	687a      	ldr	r2, [r7, #4]
 80048cc:	4413      	add	r3, r2
 80048ce:	3304      	adds	r3, #4
 80048d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2201      	movs	r2, #1
 80048d6:	705a      	strb	r2, [r3, #1]
 80048d8:	e00d      	b.n	80048f6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80048da:	78fa      	ldrb	r2, [r7, #3]
 80048dc:	4613      	mov	r3, r2
 80048de:	00db      	lsls	r3, r3, #3
 80048e0:	4413      	add	r3, r2
 80048e2:	009b      	lsls	r3, r3, #2
 80048e4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80048e8:	687a      	ldr	r2, [r7, #4]
 80048ea:	4413      	add	r3, r2
 80048ec:	3304      	adds	r3, #4
 80048ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2200      	movs	r2, #0
 80048f4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2201      	movs	r2, #1
 80048fa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80048fc:	78fb      	ldrb	r3, [r7, #3]
 80048fe:	f003 030f 	and.w	r3, r3, #15
 8004902:	b2da      	uxtb	r2, r3
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800490e:	2b01      	cmp	r3, #1
 8004910:	d101      	bne.n	8004916 <HAL_PCD_EP_SetStall+0x82>
 8004912:	2302      	movs	r3, #2
 8004914:	e01e      	b.n	8004954 <HAL_PCD_EP_SetStall+0xc0>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2201      	movs	r2, #1
 800491a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	68f9      	ldr	r1, [r7, #12]
 8004924:	4618      	mov	r0, r3
 8004926:	f005 fecf 	bl	800a6c8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800492a:	78fb      	ldrb	r3, [r7, #3]
 800492c:	f003 030f 	and.w	r3, r3, #15
 8004930:	2b00      	cmp	r3, #0
 8004932:	d10a      	bne.n	800494a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6818      	ldr	r0, [r3, #0]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	68db      	ldr	r3, [r3, #12]
 800493c:	b2d9      	uxtb	r1, r3
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004944:	461a      	mov	r2, r3
 8004946:	f006 f8c1 	bl	800aacc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2200      	movs	r2, #0
 800494e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004952:	2300      	movs	r3, #0
}
 8004954:	4618      	mov	r0, r3
 8004956:	3710      	adds	r7, #16
 8004958:	46bd      	mov	sp, r7
 800495a:	bd80      	pop	{r7, pc}

0800495c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b084      	sub	sp, #16
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
 8004964:	460b      	mov	r3, r1
 8004966:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004968:	78fb      	ldrb	r3, [r7, #3]
 800496a:	f003 020f 	and.w	r2, r3, #15
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	429a      	cmp	r2, r3
 8004974:	d901      	bls.n	800497a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004976:	2301      	movs	r3, #1
 8004978:	e042      	b.n	8004a00 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800497a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800497e:	2b00      	cmp	r3, #0
 8004980:	da0f      	bge.n	80049a2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004982:	78fb      	ldrb	r3, [r7, #3]
 8004984:	f003 020f 	and.w	r2, r3, #15
 8004988:	4613      	mov	r3, r2
 800498a:	00db      	lsls	r3, r3, #3
 800498c:	4413      	add	r3, r2
 800498e:	009b      	lsls	r3, r3, #2
 8004990:	3338      	adds	r3, #56	; 0x38
 8004992:	687a      	ldr	r2, [r7, #4]
 8004994:	4413      	add	r3, r2
 8004996:	3304      	adds	r3, #4
 8004998:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	2201      	movs	r2, #1
 800499e:	705a      	strb	r2, [r3, #1]
 80049a0:	e00f      	b.n	80049c2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80049a2:	78fb      	ldrb	r3, [r7, #3]
 80049a4:	f003 020f 	and.w	r2, r3, #15
 80049a8:	4613      	mov	r3, r2
 80049aa:	00db      	lsls	r3, r3, #3
 80049ac:	4413      	add	r3, r2
 80049ae:	009b      	lsls	r3, r3, #2
 80049b0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80049b4:	687a      	ldr	r2, [r7, #4]
 80049b6:	4413      	add	r3, r2
 80049b8:	3304      	adds	r3, #4
 80049ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2200      	movs	r2, #0
 80049c0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2200      	movs	r2, #0
 80049c6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80049c8:	78fb      	ldrb	r3, [r7, #3]
 80049ca:	f003 030f 	and.w	r3, r3, #15
 80049ce:	b2da      	uxtb	r2, r3
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80049da:	2b01      	cmp	r3, #1
 80049dc:	d101      	bne.n	80049e2 <HAL_PCD_EP_ClrStall+0x86>
 80049de:	2302      	movs	r3, #2
 80049e0:	e00e      	b.n	8004a00 <HAL_PCD_EP_ClrStall+0xa4>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2201      	movs	r2, #1
 80049e6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	68f9      	ldr	r1, [r7, #12]
 80049f0:	4618      	mov	r0, r3
 80049f2:	f005 fed7 	bl	800a7a4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2200      	movs	r2, #0
 80049fa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80049fe:	2300      	movs	r3, #0
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	3710      	adds	r7, #16
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}

08004a08 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b084      	sub	sp, #16
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
 8004a10:	460b      	mov	r3, r1
 8004a12:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004a14:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	da0c      	bge.n	8004a36 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a1c:	78fb      	ldrb	r3, [r7, #3]
 8004a1e:	f003 020f 	and.w	r2, r3, #15
 8004a22:	4613      	mov	r3, r2
 8004a24:	00db      	lsls	r3, r3, #3
 8004a26:	4413      	add	r3, r2
 8004a28:	009b      	lsls	r3, r3, #2
 8004a2a:	3338      	adds	r3, #56	; 0x38
 8004a2c:	687a      	ldr	r2, [r7, #4]
 8004a2e:	4413      	add	r3, r2
 8004a30:	3304      	adds	r3, #4
 8004a32:	60fb      	str	r3, [r7, #12]
 8004a34:	e00c      	b.n	8004a50 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004a36:	78fb      	ldrb	r3, [r7, #3]
 8004a38:	f003 020f 	and.w	r2, r3, #15
 8004a3c:	4613      	mov	r3, r2
 8004a3e:	00db      	lsls	r3, r3, #3
 8004a40:	4413      	add	r3, r2
 8004a42:	009b      	lsls	r3, r3, #2
 8004a44:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004a48:	687a      	ldr	r2, [r7, #4]
 8004a4a:	4413      	add	r3, r2
 8004a4c:	3304      	adds	r3, #4
 8004a4e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	68f9      	ldr	r1, [r7, #12]
 8004a56:	4618      	mov	r0, r3
 8004a58:	f005 fcf6 	bl	800a448 <USB_EPStopXfer>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004a60:	7afb      	ldrb	r3, [r7, #11]
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	3710      	adds	r7, #16
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd80      	pop	{r7, pc}

08004a6a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004a6a:	b580      	push	{r7, lr}
 8004a6c:	b08a      	sub	sp, #40	; 0x28
 8004a6e:	af02      	add	r7, sp, #8
 8004a70:	6078      	str	r0, [r7, #4]
 8004a72:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004a7e:	683a      	ldr	r2, [r7, #0]
 8004a80:	4613      	mov	r3, r2
 8004a82:	00db      	lsls	r3, r3, #3
 8004a84:	4413      	add	r3, r2
 8004a86:	009b      	lsls	r3, r3, #2
 8004a88:	3338      	adds	r3, #56	; 0x38
 8004a8a:	687a      	ldr	r2, [r7, #4]
 8004a8c:	4413      	add	r3, r2
 8004a8e:	3304      	adds	r3, #4
 8004a90:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	695a      	ldr	r2, [r3, #20]
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	691b      	ldr	r3, [r3, #16]
 8004a9a:	429a      	cmp	r2, r3
 8004a9c:	d901      	bls.n	8004aa2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e06c      	b.n	8004b7c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	691a      	ldr	r2, [r3, #16]
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	695b      	ldr	r3, [r3, #20]
 8004aaa:	1ad3      	subs	r3, r2, r3
 8004aac:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	69fa      	ldr	r2, [r7, #28]
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	d902      	bls.n	8004abe <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004abe:	69fb      	ldr	r3, [r7, #28]
 8004ac0:	3303      	adds	r3, #3
 8004ac2:	089b      	lsrs	r3, r3, #2
 8004ac4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004ac6:	e02b      	b.n	8004b20 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	691a      	ldr	r2, [r3, #16]
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	695b      	ldr	r3, [r3, #20]
 8004ad0:	1ad3      	subs	r3, r2, r3
 8004ad2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	69fa      	ldr	r2, [r7, #28]
 8004ada:	429a      	cmp	r2, r3
 8004adc:	d902      	bls.n	8004ae4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004ae4:	69fb      	ldr	r3, [r7, #28]
 8004ae6:	3303      	adds	r3, #3
 8004ae8:	089b      	lsrs	r3, r3, #2
 8004aea:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	68d9      	ldr	r1, [r3, #12]
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	b2da      	uxtb	r2, r3
 8004af4:	69fb      	ldr	r3, [r7, #28]
 8004af6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	68db      	ldr	r3, [r3, #12]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004afc:	b2db      	uxtb	r3, r3
 8004afe:	9300      	str	r3, [sp, #0]
 8004b00:	4603      	mov	r3, r0
 8004b02:	6978      	ldr	r0, [r7, #20]
 8004b04:	f005 fd4a 	bl	800a59c <USB_WritePacket>

    ep->xfer_buff  += len;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	68da      	ldr	r2, [r3, #12]
 8004b0c:	69fb      	ldr	r3, [r7, #28]
 8004b0e:	441a      	add	r2, r3
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	695a      	ldr	r2, [r3, #20]
 8004b18:	69fb      	ldr	r3, [r7, #28]
 8004b1a:	441a      	add	r2, r3
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	015a      	lsls	r2, r3, #5
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	4413      	add	r3, r2
 8004b28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b2c:	699b      	ldr	r3, [r3, #24]
 8004b2e:	b29b      	uxth	r3, r3
 8004b30:	69ba      	ldr	r2, [r7, #24]
 8004b32:	429a      	cmp	r2, r3
 8004b34:	d809      	bhi.n	8004b4a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	695a      	ldr	r2, [r3, #20]
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004b3e:	429a      	cmp	r2, r3
 8004b40:	d203      	bcs.n	8004b4a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	691b      	ldr	r3, [r3, #16]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d1be      	bne.n	8004ac8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	691a      	ldr	r2, [r3, #16]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	695b      	ldr	r3, [r3, #20]
 8004b52:	429a      	cmp	r2, r3
 8004b54:	d811      	bhi.n	8004b7a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	f003 030f 	and.w	r3, r3, #15
 8004b5c:	2201      	movs	r2, #1
 8004b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b62:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	43db      	mvns	r3, r3
 8004b70:	6939      	ldr	r1, [r7, #16]
 8004b72:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b76:	4013      	ands	r3, r2
 8004b78:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004b7a:	2300      	movs	r3, #0
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	3720      	adds	r7, #32
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}

08004b84 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b088      	sub	sp, #32
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
 8004b8c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b94:	69fb      	ldr	r3, [r7, #28]
 8004b96:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004b98:	69fb      	ldr	r3, [r7, #28]
 8004b9a:	333c      	adds	r3, #60	; 0x3c
 8004b9c:	3304      	adds	r3, #4
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	015a      	lsls	r2, r3, #5
 8004ba6:	69bb      	ldr	r3, [r7, #24]
 8004ba8:	4413      	add	r3, r2
 8004baa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	68db      	ldr	r3, [r3, #12]
 8004bb6:	2b01      	cmp	r3, #1
 8004bb8:	d17b      	bne.n	8004cb2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	f003 0308 	and.w	r3, r3, #8
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d015      	beq.n	8004bf0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	4a61      	ldr	r2, [pc, #388]	; (8004d4c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	f240 80b9 	bls.w	8004d40 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	f000 80b3 	beq.w	8004d40 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	015a      	lsls	r2, r3, #5
 8004bde:	69bb      	ldr	r3, [r7, #24]
 8004be0:	4413      	add	r3, r2
 8004be2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004be6:	461a      	mov	r2, r3
 8004be8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004bec:	6093      	str	r3, [r2, #8]
 8004bee:	e0a7      	b.n	8004d40 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	f003 0320 	and.w	r3, r3, #32
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d009      	beq.n	8004c0e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	015a      	lsls	r2, r3, #5
 8004bfe:	69bb      	ldr	r3, [r7, #24]
 8004c00:	4413      	add	r3, r2
 8004c02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c06:	461a      	mov	r2, r3
 8004c08:	2320      	movs	r3, #32
 8004c0a:	6093      	str	r3, [r2, #8]
 8004c0c:	e098      	b.n	8004d40 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	f040 8093 	bne.w	8004d40 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	4a4b      	ldr	r2, [pc, #300]	; (8004d4c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d90f      	bls.n	8004c42 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d00a      	beq.n	8004c42 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	015a      	lsls	r2, r3, #5
 8004c30:	69bb      	ldr	r3, [r7, #24]
 8004c32:	4413      	add	r3, r2
 8004c34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c38:	461a      	mov	r2, r3
 8004c3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c3e:	6093      	str	r3, [r2, #8]
 8004c40:	e07e      	b.n	8004d40 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004c42:	683a      	ldr	r2, [r7, #0]
 8004c44:	4613      	mov	r3, r2
 8004c46:	00db      	lsls	r3, r3, #3
 8004c48:	4413      	add	r3, r2
 8004c4a:	009b      	lsls	r3, r3, #2
 8004c4c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004c50:	687a      	ldr	r2, [r7, #4]
 8004c52:	4413      	add	r3, r2
 8004c54:	3304      	adds	r3, #4
 8004c56:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	6a1a      	ldr	r2, [r3, #32]
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	0159      	lsls	r1, r3, #5
 8004c60:	69bb      	ldr	r3, [r7, #24]
 8004c62:	440b      	add	r3, r1
 8004c64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c68:	691b      	ldr	r3, [r3, #16]
 8004c6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c6e:	1ad2      	subs	r2, r2, r3
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d114      	bne.n	8004ca4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	691b      	ldr	r3, [r3, #16]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d109      	bne.n	8004c96 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6818      	ldr	r0, [r3, #0]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004c8c:	461a      	mov	r2, r3
 8004c8e:	2101      	movs	r1, #1
 8004c90:	f005 ff1c 	bl	800aacc <USB_EP0_OutStart>
 8004c94:	e006      	b.n	8004ca4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	68da      	ldr	r2, [r3, #12]
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	695b      	ldr	r3, [r3, #20]
 8004c9e:	441a      	add	r2, r3
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	b2db      	uxtb	r3, r3
 8004ca8:	4619      	mov	r1, r3
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f008 f9f6 	bl	800d09c <HAL_PCD_DataOutStageCallback>
 8004cb0:	e046      	b.n	8004d40 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	4a26      	ldr	r2, [pc, #152]	; (8004d50 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d124      	bne.n	8004d04 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d00a      	beq.n	8004cda <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	015a      	lsls	r2, r3, #5
 8004cc8:	69bb      	ldr	r3, [r7, #24]
 8004cca:	4413      	add	r3, r2
 8004ccc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cd0:	461a      	mov	r2, r3
 8004cd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004cd6:	6093      	str	r3, [r2, #8]
 8004cd8:	e032      	b.n	8004d40 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	f003 0320 	and.w	r3, r3, #32
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d008      	beq.n	8004cf6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	015a      	lsls	r2, r3, #5
 8004ce8:	69bb      	ldr	r3, [r7, #24]
 8004cea:	4413      	add	r3, r2
 8004cec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cf0:	461a      	mov	r2, r3
 8004cf2:	2320      	movs	r3, #32
 8004cf4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	b2db      	uxtb	r3, r3
 8004cfa:	4619      	mov	r1, r3
 8004cfc:	6878      	ldr	r0, [r7, #4]
 8004cfe:	f008 f9cd 	bl	800d09c <HAL_PCD_DataOutStageCallback>
 8004d02:	e01d      	b.n	8004d40 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d114      	bne.n	8004d34 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004d0a:	6879      	ldr	r1, [r7, #4]
 8004d0c:	683a      	ldr	r2, [r7, #0]
 8004d0e:	4613      	mov	r3, r2
 8004d10:	00db      	lsls	r3, r3, #3
 8004d12:	4413      	add	r3, r2
 8004d14:	009b      	lsls	r3, r3, #2
 8004d16:	440b      	add	r3, r1
 8004d18:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d108      	bne.n	8004d34 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6818      	ldr	r0, [r3, #0]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004d2c:	461a      	mov	r2, r3
 8004d2e:	2100      	movs	r1, #0
 8004d30:	f005 fecc 	bl	800aacc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	b2db      	uxtb	r3, r3
 8004d38:	4619      	mov	r1, r3
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	f008 f9ae 	bl	800d09c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004d40:	2300      	movs	r3, #0
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3720      	adds	r7, #32
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}
 8004d4a:	bf00      	nop
 8004d4c:	4f54300a 	.word	0x4f54300a
 8004d50:	4f54310a 	.word	0x4f54310a

08004d54 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b086      	sub	sp, #24
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
 8004d5c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	333c      	adds	r3, #60	; 0x3c
 8004d6c:	3304      	adds	r3, #4
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	015a      	lsls	r2, r3, #5
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	4413      	add	r3, r2
 8004d7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	4a15      	ldr	r2, [pc, #84]	; (8004ddc <PCD_EP_OutSetupPacket_int+0x88>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d90e      	bls.n	8004da8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d009      	beq.n	8004da8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	015a      	lsls	r2, r3, #5
 8004d98:	693b      	ldr	r3, [r7, #16]
 8004d9a:	4413      	add	r3, r2
 8004d9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004da0:	461a      	mov	r2, r3
 8004da2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004da6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004da8:	6878      	ldr	r0, [r7, #4]
 8004daa:	f008 f965 	bl	800d078 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	4a0a      	ldr	r2, [pc, #40]	; (8004ddc <PCD_EP_OutSetupPacket_int+0x88>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d90c      	bls.n	8004dd0 <PCD_EP_OutSetupPacket_int+0x7c>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	68db      	ldr	r3, [r3, #12]
 8004dba:	2b01      	cmp	r3, #1
 8004dbc:	d108      	bne.n	8004dd0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6818      	ldr	r0, [r3, #0]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004dc8:	461a      	mov	r2, r3
 8004dca:	2101      	movs	r1, #1
 8004dcc:	f005 fe7e 	bl	800aacc <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004dd0:	2300      	movs	r3, #0
}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	3718      	adds	r7, #24
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}
 8004dda:	bf00      	nop
 8004ddc:	4f54300a 	.word	0x4f54300a

08004de0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b085      	sub	sp, #20
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
 8004de8:	460b      	mov	r3, r1
 8004dea:	70fb      	strb	r3, [r7, #3]
 8004dec:	4613      	mov	r3, r2
 8004dee:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004df8:	78fb      	ldrb	r3, [r7, #3]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d107      	bne.n	8004e0e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004dfe:	883b      	ldrh	r3, [r7, #0]
 8004e00:	0419      	lsls	r1, r3, #16
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	68ba      	ldr	r2, [r7, #8]
 8004e08:	430a      	orrs	r2, r1
 8004e0a:	629a      	str	r2, [r3, #40]	; 0x28
 8004e0c:	e028      	b.n	8004e60 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e14:	0c1b      	lsrs	r3, r3, #16
 8004e16:	68ba      	ldr	r2, [r7, #8]
 8004e18:	4413      	add	r3, r2
 8004e1a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	73fb      	strb	r3, [r7, #15]
 8004e20:	e00d      	b.n	8004e3e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681a      	ldr	r2, [r3, #0]
 8004e26:	7bfb      	ldrb	r3, [r7, #15]
 8004e28:	3340      	adds	r3, #64	; 0x40
 8004e2a:	009b      	lsls	r3, r3, #2
 8004e2c:	4413      	add	r3, r2
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	0c1b      	lsrs	r3, r3, #16
 8004e32:	68ba      	ldr	r2, [r7, #8]
 8004e34:	4413      	add	r3, r2
 8004e36:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004e38:	7bfb      	ldrb	r3, [r7, #15]
 8004e3a:	3301      	adds	r3, #1
 8004e3c:	73fb      	strb	r3, [r7, #15]
 8004e3e:	7bfa      	ldrb	r2, [r7, #15]
 8004e40:	78fb      	ldrb	r3, [r7, #3]
 8004e42:	3b01      	subs	r3, #1
 8004e44:	429a      	cmp	r2, r3
 8004e46:	d3ec      	bcc.n	8004e22 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004e48:	883b      	ldrh	r3, [r7, #0]
 8004e4a:	0418      	lsls	r0, r3, #16
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6819      	ldr	r1, [r3, #0]
 8004e50:	78fb      	ldrb	r3, [r7, #3]
 8004e52:	3b01      	subs	r3, #1
 8004e54:	68ba      	ldr	r2, [r7, #8]
 8004e56:	4302      	orrs	r2, r0
 8004e58:	3340      	adds	r3, #64	; 0x40
 8004e5a:	009b      	lsls	r3, r3, #2
 8004e5c:	440b      	add	r3, r1
 8004e5e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004e60:	2300      	movs	r3, #0
}
 8004e62:	4618      	mov	r0, r3
 8004e64:	3714      	adds	r7, #20
 8004e66:	46bd      	mov	sp, r7
 8004e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6c:	4770      	bx	lr

08004e6e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004e6e:	b480      	push	{r7}
 8004e70:	b083      	sub	sp, #12
 8004e72:	af00      	add	r7, sp, #0
 8004e74:	6078      	str	r0, [r7, #4]
 8004e76:	460b      	mov	r3, r1
 8004e78:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	887a      	ldrh	r2, [r7, #2]
 8004e80:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004e82:	2300      	movs	r3, #0
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	370c      	adds	r7, #12
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8e:	4770      	bx	lr

08004e90 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004e90:	b480      	push	{r7}
 8004e92:	b085      	sub	sp, #20
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2201      	movs	r2, #1
 8004ea2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	699b      	ldr	r3, [r3, #24]
 8004eb2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004ebe:	4b05      	ldr	r3, [pc, #20]	; (8004ed4 <HAL_PCDEx_ActivateLPM+0x44>)
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	68fa      	ldr	r2, [r7, #12]
 8004ec4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004ec6:	2300      	movs	r3, #0
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	3714      	adds	r7, #20
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed2:	4770      	bx	lr
 8004ed4:	10000003 	.word	0x10000003

08004ed8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b083      	sub	sp, #12
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
 8004ee0:	460b      	mov	r3, r1
 8004ee2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004ee4:	bf00      	nop
 8004ee6:	370c      	adds	r7, #12
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eee:	4770      	bx	lr

08004ef0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b084      	sub	sp, #16
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004ef8:	4b19      	ldr	r3, [pc, #100]	; (8004f60 <HAL_PWREx_ConfigSupply+0x70>)
 8004efa:	68db      	ldr	r3, [r3, #12]
 8004efc:	f003 0304 	and.w	r3, r3, #4
 8004f00:	2b04      	cmp	r3, #4
 8004f02:	d00a      	beq.n	8004f1a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004f04:	4b16      	ldr	r3, [pc, #88]	; (8004f60 <HAL_PWREx_ConfigSupply+0x70>)
 8004f06:	68db      	ldr	r3, [r3, #12]
 8004f08:	f003 0307 	and.w	r3, r3, #7
 8004f0c:	687a      	ldr	r2, [r7, #4]
 8004f0e:	429a      	cmp	r2, r3
 8004f10:	d001      	beq.n	8004f16 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004f12:	2301      	movs	r3, #1
 8004f14:	e01f      	b.n	8004f56 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004f16:	2300      	movs	r3, #0
 8004f18:	e01d      	b.n	8004f56 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004f1a:	4b11      	ldr	r3, [pc, #68]	; (8004f60 <HAL_PWREx_ConfigSupply+0x70>)
 8004f1c:	68db      	ldr	r3, [r3, #12]
 8004f1e:	f023 0207 	bic.w	r2, r3, #7
 8004f22:	490f      	ldr	r1, [pc, #60]	; (8004f60 <HAL_PWREx_ConfigSupply+0x70>)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	4313      	orrs	r3, r2
 8004f28:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004f2a:	f7fd f905 	bl	8002138 <HAL_GetTick>
 8004f2e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004f30:	e009      	b.n	8004f46 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004f32:	f7fd f901 	bl	8002138 <HAL_GetTick>
 8004f36:	4602      	mov	r2, r0
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	1ad3      	subs	r3, r2, r3
 8004f3c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004f40:	d901      	bls.n	8004f46 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004f42:	2301      	movs	r3, #1
 8004f44:	e007      	b.n	8004f56 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004f46:	4b06      	ldr	r3, [pc, #24]	; (8004f60 <HAL_PWREx_ConfigSupply+0x70>)
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f52:	d1ee      	bne.n	8004f32 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004f54:	2300      	movs	r3, #0
}
 8004f56:	4618      	mov	r0, r3
 8004f58:	3710      	adds	r7, #16
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bd80      	pop	{r7, pc}
 8004f5e:	bf00      	nop
 8004f60:	58024800 	.word	0x58024800

08004f64 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8004f64:	b480      	push	{r7}
 8004f66:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8004f68:	4b05      	ldr	r3, [pc, #20]	; (8004f80 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8004f6a:	68db      	ldr	r3, [r3, #12]
 8004f6c:	4a04      	ldr	r2, [pc, #16]	; (8004f80 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8004f6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f72:	60d3      	str	r3, [r2, #12]
}
 8004f74:	bf00      	nop
 8004f76:	46bd      	mov	sp, r7
 8004f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7c:	4770      	bx	lr
 8004f7e:	bf00      	nop
 8004f80:	58024800 	.word	0x58024800

08004f84 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b086      	sub	sp, #24
 8004f88:	af02      	add	r7, sp, #8
 8004f8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8004f8c:	f7fd f8d4 	bl	8002138 <HAL_GetTick>
 8004f90:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d101      	bne.n	8004f9c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8004f98:	2301      	movs	r3, #1
 8004f9a:	e05f      	b.n	800505c <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004fa2:	b2db      	uxtb	r3, r3
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d107      	bne.n	8004fb8 <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8004fa8:	6878      	ldr	r0, [r7, #4]
 8004faa:	f000 f85f 	bl	800506c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8004fae:	f241 3188 	movw	r1, #5000	; 0x1388
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f000 faca 	bl	800554c <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	689b      	ldr	r3, [r3, #8]
 8004fc6:	3b01      	subs	r3, #1
 8004fc8:	021a      	lsls	r2, r3, #8
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	430a      	orrs	r2, r1
 8004fd0:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fd6:	9300      	str	r3, [sp, #0]
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	2120      	movs	r1, #32
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f000 fac2 	bl	8005568 <QSPI_WaitFlagStateUntilTimeout>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8004fe8:	7afb      	ldrb	r3, [r7, #11]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d135      	bne.n	800505a <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	681a      	ldr	r2, [r3, #0]
 8004ff4:	4b1b      	ldr	r3, [pc, #108]	; (8005064 <HAL_QSPI_Init+0xe0>)
 8004ff6:	4013      	ands	r3, r2
 8004ff8:	687a      	ldr	r2, [r7, #4]
 8004ffa:	6852      	ldr	r2, [r2, #4]
 8004ffc:	0611      	lsls	r1, r2, #24
 8004ffe:	687a      	ldr	r2, [r7, #4]
 8005000:	68d2      	ldr	r2, [r2, #12]
 8005002:	4311      	orrs	r1, r2
 8005004:	687a      	ldr	r2, [r7, #4]
 8005006:	69d2      	ldr	r2, [r2, #28]
 8005008:	4311      	orrs	r1, r2
 800500a:	687a      	ldr	r2, [r7, #4]
 800500c:	6a12      	ldr	r2, [r2, #32]
 800500e:	4311      	orrs	r1, r2
 8005010:	687a      	ldr	r2, [r7, #4]
 8005012:	6812      	ldr	r2, [r2, #0]
 8005014:	430b      	orrs	r3, r1
 8005016:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	685a      	ldr	r2, [r3, #4]
 800501e:	4b12      	ldr	r3, [pc, #72]	; (8005068 <HAL_QSPI_Init+0xe4>)
 8005020:	4013      	ands	r3, r2
 8005022:	687a      	ldr	r2, [r7, #4]
 8005024:	6912      	ldr	r2, [r2, #16]
 8005026:	0411      	lsls	r1, r2, #16
 8005028:	687a      	ldr	r2, [r7, #4]
 800502a:	6952      	ldr	r2, [r2, #20]
 800502c:	4311      	orrs	r1, r2
 800502e:	687a      	ldr	r2, [r7, #4]
 8005030:	6992      	ldr	r2, [r2, #24]
 8005032:	4311      	orrs	r1, r2
 8005034:	687a      	ldr	r2, [r7, #4]
 8005036:	6812      	ldr	r2, [r2, #0]
 8005038:	430b      	orrs	r3, r1
 800503a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	681a      	ldr	r2, [r3, #0]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f042 0201 	orr.w	r2, r2, #1
 800504a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2200      	movs	r2, #0
 8005050:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2201      	movs	r2, #1
 8005056:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 800505a:	7afb      	ldrb	r3, [r7, #11]
}
 800505c:	4618      	mov	r0, r3
 800505e:	3710      	adds	r7, #16
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}
 8005064:	00ffff2f 	.word	0x00ffff2f
 8005068:	ffe0f8fe 	.word	0xffe0f8fe

0800506c <HAL_QSPI_MspInit>:
  * @brief Initialize the QSPI MSP.
  * @param hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_MspInit(QSPI_HandleTypeDef *hqspi)
{
 800506c:	b480      	push	{r7}
 800506e:	b083      	sub	sp, #12
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_MspInit can be implemented in the user file
   */
}
 8005074:	bf00      	nop
 8005076:	370c      	adds	r7, #12
 8005078:	46bd      	mov	sp, r7
 800507a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507e:	4770      	bx	lr

08005080 <HAL_QSPI_Command>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b088      	sub	sp, #32
 8005084:	af02      	add	r7, sp, #8
 8005086:	60f8      	str	r0, [r7, #12]
 8005088:	60b9      	str	r1, [r7, #8]
 800508a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800508c:	f7fd f854 	bl	8002138 <HAL_GetTick>
 8005090:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005098:	b2db      	uxtb	r3, r3
 800509a:	2b01      	cmp	r3, #1
 800509c:	d101      	bne.n	80050a2 <HAL_QSPI_Command+0x22>
 800509e:	2302      	movs	r3, #2
 80050a0:	e048      	b.n	8005134 <HAL_QSPI_Command+0xb4>
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	2201      	movs	r2, #1
 80050a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050b0:	b2db      	uxtb	r3, r3
 80050b2:	2b01      	cmp	r3, #1
 80050b4:	d137      	bne.n	8005126 <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2200      	movs	r2, #0
 80050ba:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2202      	movs	r2, #2
 80050c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	9300      	str	r3, [sp, #0]
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	2200      	movs	r2, #0
 80050cc:	2120      	movs	r1, #32
 80050ce:	68f8      	ldr	r0, [r7, #12]
 80050d0:	f000 fa4a 	bl	8005568 <QSPI_WaitFlagStateUntilTimeout>
 80050d4:	4603      	mov	r3, r0
 80050d6:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 80050d8:	7dfb      	ldrb	r3, [r7, #23]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d125      	bne.n	800512a <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 80050de:	2200      	movs	r2, #0
 80050e0:	68b9      	ldr	r1, [r7, #8]
 80050e2:	68f8      	ldr	r0, [r7, #12]
 80050e4:	f000 fa77 	bl	80055d6 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d115      	bne.n	800511c <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	9300      	str	r3, [sp, #0]
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	2201      	movs	r2, #1
 80050f8:	2102      	movs	r1, #2
 80050fa:	68f8      	ldr	r0, [r7, #12]
 80050fc:	f000 fa34 	bl	8005568 <QSPI_WaitFlagStateUntilTimeout>
 8005100:	4603      	mov	r3, r0
 8005102:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8005104:	7dfb      	ldrb	r3, [r7, #23]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d10f      	bne.n	800512a <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	2202      	movs	r2, #2
 8005110:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	2201      	movs	r2, #1
 8005116:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800511a:	e006      	b.n	800512a <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	2201      	movs	r2, #1
 8005120:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005124:	e001      	b.n	800512a <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8005126:	2302      	movs	r3, #2
 8005128:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	2200      	movs	r2, #0
 800512e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8005132:	7dfb      	ldrb	r3, [r7, #23]
}
 8005134:	4618      	mov	r0, r3
 8005136:	3718      	adds	r7, #24
 8005138:	46bd      	mov	sp, r7
 800513a:	bd80      	pop	{r7, pc}

0800513c <HAL_QSPI_Transmit>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b08a      	sub	sp, #40	; 0x28
 8005140:	af02      	add	r7, sp, #8
 8005142:	60f8      	str	r0, [r7, #12]
 8005144:	60b9      	str	r1, [r7, #8]
 8005146:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005148:	2300      	movs	r3, #0
 800514a:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800514c:	f7fc fff4 	bl	8002138 <HAL_GetTick>
 8005150:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	3320      	adds	r3, #32
 8005158:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005160:	b2db      	uxtb	r3, r3
 8005162:	2b01      	cmp	r3, #1
 8005164:	d101      	bne.n	800516a <HAL_QSPI_Transmit+0x2e>
 8005166:	2302      	movs	r3, #2
 8005168:	e076      	b.n	8005258 <HAL_QSPI_Transmit+0x11c>
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2201      	movs	r2, #1
 800516e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005178:	b2db      	uxtb	r3, r3
 800517a:	2b01      	cmp	r3, #1
 800517c:	d165      	bne.n	800524a <HAL_QSPI_Transmit+0x10e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2200      	movs	r2, #0
 8005182:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d056      	beq.n	8005238 <HAL_QSPI_Transmit+0xfc>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2212      	movs	r2, #18
 800518e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	691b      	ldr	r3, [r3, #16]
 8005198:	1c5a      	adds	r2, r3, #1
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	691b      	ldr	r3, [r3, #16]
 80051a4:	1c5a      	adds	r2, r3, #1
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	68ba      	ldr	r2, [r7, #8]
 80051ae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	695a      	ldr	r2, [r3, #20]
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 80051be:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 80051c0:	e01b      	b.n	80051fa <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	9300      	str	r3, [sp, #0]
 80051c6:	69bb      	ldr	r3, [r7, #24]
 80051c8:	2201      	movs	r2, #1
 80051ca:	2104      	movs	r1, #4
 80051cc:	68f8      	ldr	r0, [r7, #12]
 80051ce:	f000 f9cb 	bl	8005568 <QSPI_WaitFlagStateUntilTimeout>
 80051d2:	4603      	mov	r3, r0
 80051d4:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 80051d6:	7ffb      	ldrb	r3, [r7, #31]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d113      	bne.n	8005204 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e0:	781a      	ldrb	r2, [r3, #0]
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ea:	1c5a      	adds	r2, r3, #1
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051f4:	1e5a      	subs	r2, r3, #1
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d1df      	bne.n	80051c2 <HAL_QSPI_Transmit+0x86>
 8005202:	e000      	b.n	8005206 <HAL_QSPI_Transmit+0xca>
          break;
 8005204:	bf00      	nop
      }

      if (status == HAL_OK)
 8005206:	7ffb      	ldrb	r3, [r7, #31]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d110      	bne.n	800522e <HAL_QSPI_Transmit+0xf2>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	9300      	str	r3, [sp, #0]
 8005210:	69bb      	ldr	r3, [r7, #24]
 8005212:	2201      	movs	r2, #1
 8005214:	2102      	movs	r1, #2
 8005216:	68f8      	ldr	r0, [r7, #12]
 8005218:	f000 f9a6 	bl	8005568 <QSPI_WaitFlagStateUntilTimeout>
 800521c:	4603      	mov	r3, r0
 800521e:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8005220:	7ffb      	ldrb	r3, [r7, #31]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d103      	bne.n	800522e <HAL_QSPI_Transmit+0xf2>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	2202      	movs	r2, #2
 800522c:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	2201      	movs	r2, #1
 8005232:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005236:	e00a      	b.n	800524e <HAL_QSPI_Transmit+0x112>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800523c:	f043 0208 	orr.w	r2, r3, #8
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 8005244:	2301      	movs	r3, #1
 8005246:	77fb      	strb	r3, [r7, #31]
 8005248:	e001      	b.n	800524e <HAL_QSPI_Transmit+0x112>
    }
  }
  else
  {
    status = HAL_BUSY;
 800524a:	2302      	movs	r3, #2
 800524c:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	2200      	movs	r2, #0
 8005252:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 8005256:	7ffb      	ldrb	r3, [r7, #31]
}
 8005258:	4618      	mov	r0, r3
 800525a:	3720      	adds	r7, #32
 800525c:	46bd      	mov	sp, r7
 800525e:	bd80      	pop	{r7, pc}

08005260 <HAL_QSPI_Receive>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b08a      	sub	sp, #40	; 0x28
 8005264:	af02      	add	r7, sp, #8
 8005266:	60f8      	str	r0, [r7, #12]
 8005268:	60b9      	str	r1, [r7, #8]
 800526a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800526c:	2300      	movs	r3, #0
 800526e:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8005270:	f7fc ff62 	bl	8002138 <HAL_GetTick>
 8005274:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	699b      	ldr	r3, [r3, #24]
 800527c:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	3320      	adds	r3, #32
 8005284:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800528c:	b2db      	uxtb	r3, r3
 800528e:	2b01      	cmp	r3, #1
 8005290:	d101      	bne.n	8005296 <HAL_QSPI_Receive+0x36>
 8005292:	2302      	movs	r3, #2
 8005294:	e07d      	b.n	8005392 <HAL_QSPI_Receive+0x132>
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2201      	movs	r2, #1
 800529a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052a4:	b2db      	uxtb	r3, r3
 80052a6:	2b01      	cmp	r3, #1
 80052a8:	d16c      	bne.n	8005384 <HAL_QSPI_Receive+0x124>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	2200      	movs	r2, #0
 80052ae:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d05d      	beq.n	8005372 <HAL_QSPI_Receive+0x112>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2222      	movs	r2, #34	; 0x22
 80052ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	691b      	ldr	r3, [r3, #16]
 80052c4:	1c5a      	adds	r2, r3, #1
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	691b      	ldr	r3, [r3, #16]
 80052d0:	1c5a      	adds	r2, r3, #1
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	68ba      	ldr	r2, [r7, #8]
 80052da:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	695b      	ldr	r3, [r3, #20]
 80052e2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80052ee:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	697a      	ldr	r2, [r7, #20]
 80052f6:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 80052f8:	e01c      	b.n	8005334 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	9300      	str	r3, [sp, #0]
 80052fe:	69bb      	ldr	r3, [r7, #24]
 8005300:	2201      	movs	r2, #1
 8005302:	2106      	movs	r1, #6
 8005304:	68f8      	ldr	r0, [r7, #12]
 8005306:	f000 f92f 	bl	8005568 <QSPI_WaitFlagStateUntilTimeout>
 800530a:	4603      	mov	r3, r0
 800530c:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 800530e:	7ffb      	ldrb	r3, [r7, #31]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d114      	bne.n	800533e <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005318:	693a      	ldr	r2, [r7, #16]
 800531a:	7812      	ldrb	r2, [r2, #0]
 800531c:	b2d2      	uxtb	r2, r2
 800531e:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005324:	1c5a      	adds	r2, r3, #1
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800532e:	1e5a      	subs	r2, r3, #1
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005338:	2b00      	cmp	r3, #0
 800533a:	d1de      	bne.n	80052fa <HAL_QSPI_Receive+0x9a>
 800533c:	e000      	b.n	8005340 <HAL_QSPI_Receive+0xe0>
          break;
 800533e:	bf00      	nop
      }

      if (status == HAL_OK)
 8005340:	7ffb      	ldrb	r3, [r7, #31]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d110      	bne.n	8005368 <HAL_QSPI_Receive+0x108>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	9300      	str	r3, [sp, #0]
 800534a:	69bb      	ldr	r3, [r7, #24]
 800534c:	2201      	movs	r2, #1
 800534e:	2102      	movs	r1, #2
 8005350:	68f8      	ldr	r0, [r7, #12]
 8005352:	f000 f909 	bl	8005568 <QSPI_WaitFlagStateUntilTimeout>
 8005356:	4603      	mov	r3, r0
 8005358:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 800535a:	7ffb      	ldrb	r3, [r7, #31]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d103      	bne.n	8005368 <HAL_QSPI_Receive+0x108>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	2202      	movs	r2, #2
 8005366:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	2201      	movs	r2, #1
 800536c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005370:	e00a      	b.n	8005388 <HAL_QSPI_Receive+0x128>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005376:	f043 0208 	orr.w	r2, r3, #8
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 800537e:	2301      	movs	r3, #1
 8005380:	77fb      	strb	r3, [r7, #31]
 8005382:	e001      	b.n	8005388 <HAL_QSPI_Receive+0x128>
    }
  }
  else
  {
    status = HAL_BUSY;
 8005384:	2302      	movs	r3, #2
 8005386:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	2200      	movs	r2, #0
 800538c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 8005390:	7ffb      	ldrb	r3, [r7, #31]
}
 8005392:	4618      	mov	r0, r3
 8005394:	3720      	adds	r7, #32
 8005396:	46bd      	mov	sp, r7
 8005398:	bd80      	pop	{r7, pc}

0800539a <HAL_QSPI_AutoPolling>:
  * @param  Timeout Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 800539a:	b580      	push	{r7, lr}
 800539c:	b088      	sub	sp, #32
 800539e:	af02      	add	r7, sp, #8
 80053a0:	60f8      	str	r0, [r7, #12]
 80053a2:	60b9      	str	r1, [r7, #8]
 80053a4:	607a      	str	r2, [r7, #4]
 80053a6:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80053a8:	f7fc fec6 	bl	8002138 <HAL_GetTick>
 80053ac:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80053b4:	b2db      	uxtb	r3, r3
 80053b6:	2b01      	cmp	r3, #1
 80053b8:	d101      	bne.n	80053be <HAL_QSPI_AutoPolling+0x24>
 80053ba:	2302      	movs	r3, #2
 80053bc:	e060      	b.n	8005480 <HAL_QSPI_AutoPolling+0xe6>
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2201      	movs	r2, #1
 80053c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053cc:	b2db      	uxtb	r3, r3
 80053ce:	2b01      	cmp	r3, #1
 80053d0:	d14f      	bne.n	8005472 <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2200      	movs	r2, #0
 80053d6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	2242      	movs	r2, #66	; 0x42
 80053dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	9300      	str	r3, [sp, #0]
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	2200      	movs	r2, #0
 80053e8:	2120      	movs	r1, #32
 80053ea:	68f8      	ldr	r0, [r7, #12]
 80053ec:	f000 f8bc 	bl	8005568 <QSPI_WaitFlagStateUntilTimeout>
 80053f0:	4603      	mov	r3, r0
 80053f2:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 80053f4:	7dfb      	ldrb	r3, [r7, #23]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d13d      	bne.n	8005476 <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	687a      	ldr	r2, [r7, #4]
 8005400:	6812      	ldr	r2, [r2, #0]
 8005402:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	687a      	ldr	r2, [r7, #4]
 800540a:	6852      	ldr	r2, [r2, #4]
 800540c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	687a      	ldr	r2, [r7, #4]
 8005414:	6892      	ldr	r2, [r2, #8]
 8005416:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	691b      	ldr	r3, [r3, #16]
 8005426:	431a      	orrs	r2, r3
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8005430:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	68da      	ldr	r2, [r3, #12]
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800543a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800543e:	68b9      	ldr	r1, [r7, #8]
 8005440:	68f8      	ldr	r0, [r7, #12]
 8005442:	f000 f8c8 	bl	80055d6 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	9300      	str	r3, [sp, #0]
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	2201      	movs	r2, #1
 800544e:	2108      	movs	r1, #8
 8005450:	68f8      	ldr	r0, [r7, #12]
 8005452:	f000 f889 	bl	8005568 <QSPI_WaitFlagStateUntilTimeout>
 8005456:	4603      	mov	r3, r0
 8005458:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 800545a:	7dfb      	ldrb	r3, [r7, #23]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d10a      	bne.n	8005476 <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	2208      	movs	r2, #8
 8005466:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	2201      	movs	r2, #1
 800546c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005470:	e001      	b.n	8005476 <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8005472:	2302      	movs	r3, #2
 8005474:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2200      	movs	r2, #0
 800547a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800547e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005480:	4618      	mov	r0, r3
 8005482:	3718      	adds	r7, #24
 8005484:	46bd      	mov	sp, r7
 8005486:	bd80      	pop	{r7, pc}

08005488 <HAL_QSPI_MemoryMapped>:
  * @param  cfg structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_MemoryMapped(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_MemoryMappedTypeDef *cfg)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b088      	sub	sp, #32
 800548c:	af02      	add	r7, sp, #8
 800548e:	60f8      	str	r0, [r7, #12]
 8005490:	60b9      	str	r1, [r7, #8]
 8005492:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8005494:	f7fc fe50 	bl	8002138 <HAL_GetTick>
 8005498:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  assert_param(IS_QSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80054a0:	b2db      	uxtb	r3, r3
 80054a2:	2b01      	cmp	r3, #1
 80054a4:	d101      	bne.n	80054aa <HAL_QSPI_MemoryMapped+0x22>
 80054a6:	2302      	movs	r3, #2
 80054a8:	e04c      	b.n	8005544 <HAL_QSPI_MemoryMapped+0xbc>
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	2201      	movs	r2, #1
 80054ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80054b8:	b2db      	uxtb	r3, r3
 80054ba:	2b01      	cmp	r3, #1
 80054bc:	d13b      	bne.n	8005536 <HAL_QSPI_MemoryMapped+0xae>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2200      	movs	r2, #0
 80054c2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	2282      	movs	r2, #130	; 0x82
 80054c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054d0:	9300      	str	r3, [sp, #0]
 80054d2:	693b      	ldr	r3, [r7, #16]
 80054d4:	2200      	movs	r2, #0
 80054d6:	2120      	movs	r1, #32
 80054d8:	68f8      	ldr	r0, [r7, #12]
 80054da:	f000 f845 	bl	8005568 <QSPI_WaitFlagStateUntilTimeout>
 80054de:	4603      	mov	r3, r0
 80054e0:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 80054e2:	7dfb      	ldrb	r3, [r7, #23]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d128      	bne.n	800553a <HAL_QSPI_MemoryMapped+0xb2>
    {
      /* Configure QSPI: CR register with timeout counter enable */
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f023 0108 	bic.w	r1, r3, #8
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	685a      	ldr	r2, [r3, #4]
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	430a      	orrs	r2, r1
 80054fc:	601a      	str	r2, [r3, #0]

    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	2b08      	cmp	r3, #8
 8005504:	d110      	bne.n	8005528 <HAL_QSPI_MemoryMapped+0xa0>
      {
        assert_param(IS_QSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure QSPI: LPTR register with the low-power timeout value */
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	687a      	ldr	r2, [r7, #4]
 800550c:	6812      	ldr	r2, [r2, #0]
 800550e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	2210      	movs	r2, #16
 8005516:	60da      	str	r2, [r3, #12]

        /* Enable the QSPI TimeOut Interrupt */
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	681a      	ldr	r2, [r3, #0]
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005526:	601a      	str	r2, [r3, #0]
      }

      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 8005528:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800552c:	68b9      	ldr	r1, [r7, #8]
 800552e:	68f8      	ldr	r0, [r7, #12]
 8005530:	f000 f851 	bl	80055d6 <QSPI_Config>
 8005534:	e001      	b.n	800553a <HAL_QSPI_MemoryMapped+0xb2>
    }
  }
  else
  {
    status = HAL_BUSY;
 8005536:	2302      	movs	r3, #2
 8005538:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2200      	movs	r2, #0
 800553e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8005542:	7dfb      	ldrb	r3, [r7, #23]
}
 8005544:	4618      	mov	r0, r3
 8005546:	3718      	adds	r7, #24
 8005548:	46bd      	mov	sp, r7
 800554a:	bd80      	pop	{r7, pc}

0800554c <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800554c:	b480      	push	{r7}
 800554e:	b083      	sub	sp, #12
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
 8005554:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	683a      	ldr	r2, [r7, #0]
 800555a:	649a      	str	r2, [r3, #72]	; 0x48
}
 800555c:	bf00      	nop
 800555e:	370c      	adds	r7, #12
 8005560:	46bd      	mov	sp, r7
 8005562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005566:	4770      	bx	lr

08005568 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b084      	sub	sp, #16
 800556c:	af00      	add	r7, sp, #0
 800556e:	60f8      	str	r0, [r7, #12]
 8005570:	60b9      	str	r1, [r7, #8]
 8005572:	603b      	str	r3, [r7, #0]
 8005574:	4613      	mov	r3, r2
 8005576:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005578:	e01a      	b.n	80055b0 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800557a:	69bb      	ldr	r3, [r7, #24]
 800557c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005580:	d016      	beq.n	80055b0 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005582:	f7fc fdd9 	bl	8002138 <HAL_GetTick>
 8005586:	4602      	mov	r2, r0
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	1ad3      	subs	r3, r2, r3
 800558c:	69ba      	ldr	r2, [r7, #24]
 800558e:	429a      	cmp	r2, r3
 8005590:	d302      	bcc.n	8005598 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8005592:	69bb      	ldr	r3, [r7, #24]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d10b      	bne.n	80055b0 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	2204      	movs	r2, #4
 800559c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055a4:	f043 0201 	orr.w	r2, r3, #1
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 80055ac:	2301      	movs	r3, #1
 80055ae:	e00e      	b.n	80055ce <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	689a      	ldr	r2, [r3, #8]
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	4013      	ands	r3, r2
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	bf14      	ite	ne
 80055be:	2301      	movne	r3, #1
 80055c0:	2300      	moveq	r3, #0
 80055c2:	b2db      	uxtb	r3, r3
 80055c4:	461a      	mov	r2, r3
 80055c6:	79fb      	ldrb	r3, [r7, #7]
 80055c8:	429a      	cmp	r2, r3
 80055ca:	d1d6      	bne.n	800557a <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80055cc:	2300      	movs	r3, #0
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	3710      	adds	r7, #16
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}

080055d6 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 80055d6:	b480      	push	{r7}
 80055d8:	b085      	sub	sp, #20
 80055da:	af00      	add	r7, sp, #0
 80055dc:	60f8      	str	r0, [r7, #12]
 80055de:	60b9      	str	r1, [r7, #8]
 80055e0:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d009      	beq.n	80055fe <QSPI_Config+0x28>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80055f0:	d005      	beq.n	80055fe <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	3a01      	subs	r2, #1
 80055fc:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	699b      	ldr	r3, [r3, #24]
 8005602:	2b00      	cmp	r3, #0
 8005604:	f000 80b9 	beq.w	800577a <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	6a1b      	ldr	r3, [r3, #32]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d05f      	beq.n	80056d0 <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	68ba      	ldr	r2, [r7, #8]
 8005616:	6892      	ldr	r2, [r2, #8]
 8005618:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	69db      	ldr	r3, [r3, #28]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d031      	beq.n	8005686 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800562a:	431a      	orrs	r2, r3
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005630:	431a      	orrs	r2, r3
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005636:	431a      	orrs	r2, r3
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	695b      	ldr	r3, [r3, #20]
 800563c:	049b      	lsls	r3, r3, #18
 800563e:	431a      	orrs	r2, r3
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	691b      	ldr	r3, [r3, #16]
 8005644:	431a      	orrs	r2, r3
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	6a1b      	ldr	r3, [r3, #32]
 800564a:	431a      	orrs	r2, r3
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	68db      	ldr	r3, [r3, #12]
 8005650:	431a      	orrs	r2, r3
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	69db      	ldr	r3, [r3, #28]
 8005656:	431a      	orrs	r2, r3
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	699b      	ldr	r3, [r3, #24]
 800565c:	431a      	orrs	r2, r3
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	ea42 0103 	orr.w	r1, r2, r3
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	687a      	ldr	r2, [r7, #4]
 800566c:	430a      	orrs	r2, r1
 800566e:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005676:	f000 812e 	beq.w	80058d6 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	68ba      	ldr	r2, [r7, #8]
 8005680:	6852      	ldr	r2, [r2, #4]
 8005682:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 8005684:	e127      	b.n	80058d6 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800568e:	431a      	orrs	r2, r3
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005694:	431a      	orrs	r2, r3
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800569a:	431a      	orrs	r2, r3
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	695b      	ldr	r3, [r3, #20]
 80056a0:	049b      	lsls	r3, r3, #18
 80056a2:	431a      	orrs	r2, r3
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	691b      	ldr	r3, [r3, #16]
 80056a8:	431a      	orrs	r2, r3
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	6a1b      	ldr	r3, [r3, #32]
 80056ae:	431a      	orrs	r2, r3
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	69db      	ldr	r3, [r3, #28]
 80056b4:	431a      	orrs	r2, r3
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	699b      	ldr	r3, [r3, #24]
 80056ba:	431a      	orrs	r2, r3
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	ea42 0103 	orr.w	r1, r2, r3
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	687a      	ldr	r2, [r7, #4]
 80056ca:	430a      	orrs	r2, r1
 80056cc:	615a      	str	r2, [r3, #20]
}
 80056ce:	e102      	b.n	80058d6 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	69db      	ldr	r3, [r3, #28]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d02e      	beq.n	8005736 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056e0:	431a      	orrs	r2, r3
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056e6:	431a      	orrs	r2, r3
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ec:	431a      	orrs	r2, r3
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	695b      	ldr	r3, [r3, #20]
 80056f2:	049b      	lsls	r3, r3, #18
 80056f4:	431a      	orrs	r2, r3
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	6a1b      	ldr	r3, [r3, #32]
 80056fa:	431a      	orrs	r2, r3
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	68db      	ldr	r3, [r3, #12]
 8005700:	431a      	orrs	r2, r3
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	69db      	ldr	r3, [r3, #28]
 8005706:	431a      	orrs	r2, r3
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	699b      	ldr	r3, [r3, #24]
 800570c:	431a      	orrs	r2, r3
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	ea42 0103 	orr.w	r1, r2, r3
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	687a      	ldr	r2, [r7, #4]
 800571c:	430a      	orrs	r2, r1
 800571e:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005726:	f000 80d6 	beq.w	80058d6 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	68ba      	ldr	r2, [r7, #8]
 8005730:	6852      	ldr	r2, [r2, #4]
 8005732:	619a      	str	r2, [r3, #24]
}
 8005734:	e0cf      	b.n	80058d6 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800573e:	431a      	orrs	r2, r3
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005744:	431a      	orrs	r2, r3
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800574a:	431a      	orrs	r2, r3
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	695b      	ldr	r3, [r3, #20]
 8005750:	049b      	lsls	r3, r3, #18
 8005752:	431a      	orrs	r2, r3
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	6a1b      	ldr	r3, [r3, #32]
 8005758:	431a      	orrs	r2, r3
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	69db      	ldr	r3, [r3, #28]
 800575e:	431a      	orrs	r2, r3
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	699b      	ldr	r3, [r3, #24]
 8005764:	431a      	orrs	r2, r3
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	ea42 0103 	orr.w	r1, r2, r3
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	687a      	ldr	r2, [r7, #4]
 8005774:	430a      	orrs	r2, r1
 8005776:	615a      	str	r2, [r3, #20]
}
 8005778:	e0ad      	b.n	80058d6 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	6a1b      	ldr	r3, [r3, #32]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d058      	beq.n	8005834 <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	68ba      	ldr	r2, [r7, #8]
 8005788:	6892      	ldr	r2, [r2, #8]
 800578a:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	69db      	ldr	r3, [r3, #28]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d02d      	beq.n	80057f0 <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800579c:	431a      	orrs	r2, r3
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057a2:	431a      	orrs	r2, r3
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a8:	431a      	orrs	r2, r3
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	695b      	ldr	r3, [r3, #20]
 80057ae:	049b      	lsls	r3, r3, #18
 80057b0:	431a      	orrs	r2, r3
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	691b      	ldr	r3, [r3, #16]
 80057b6:	431a      	orrs	r2, r3
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	6a1b      	ldr	r3, [r3, #32]
 80057bc:	431a      	orrs	r2, r3
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	68db      	ldr	r3, [r3, #12]
 80057c2:	431a      	orrs	r2, r3
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	69db      	ldr	r3, [r3, #28]
 80057c8:	431a      	orrs	r2, r3
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	699b      	ldr	r3, [r3, #24]
 80057ce:	ea42 0103 	orr.w	r1, r2, r3
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	687a      	ldr	r2, [r7, #4]
 80057d8:	430a      	orrs	r2, r1
 80057da:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80057e2:	d078      	beq.n	80058d6 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	68ba      	ldr	r2, [r7, #8]
 80057ea:	6852      	ldr	r2, [r2, #4]
 80057ec:	619a      	str	r2, [r3, #24]
}
 80057ee:	e072      	b.n	80058d6 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057f8:	431a      	orrs	r2, r3
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057fe:	431a      	orrs	r2, r3
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005804:	431a      	orrs	r2, r3
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	695b      	ldr	r3, [r3, #20]
 800580a:	049b      	lsls	r3, r3, #18
 800580c:	431a      	orrs	r2, r3
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	691b      	ldr	r3, [r3, #16]
 8005812:	431a      	orrs	r2, r3
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	6a1b      	ldr	r3, [r3, #32]
 8005818:	431a      	orrs	r2, r3
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	69db      	ldr	r3, [r3, #28]
 800581e:	431a      	orrs	r2, r3
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	699b      	ldr	r3, [r3, #24]
 8005824:	ea42 0103 	orr.w	r1, r2, r3
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	687a      	ldr	r2, [r7, #4]
 800582e:	430a      	orrs	r2, r1
 8005830:	615a      	str	r2, [r3, #20]
}
 8005832:	e050      	b.n	80058d6 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	69db      	ldr	r3, [r3, #28]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d02a      	beq.n	8005892 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005844:	431a      	orrs	r2, r3
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800584a:	431a      	orrs	r2, r3
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005850:	431a      	orrs	r2, r3
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	695b      	ldr	r3, [r3, #20]
 8005856:	049b      	lsls	r3, r3, #18
 8005858:	431a      	orrs	r2, r3
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	6a1b      	ldr	r3, [r3, #32]
 800585e:	431a      	orrs	r2, r3
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	68db      	ldr	r3, [r3, #12]
 8005864:	431a      	orrs	r2, r3
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	69db      	ldr	r3, [r3, #28]
 800586a:	431a      	orrs	r2, r3
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	699b      	ldr	r3, [r3, #24]
 8005870:	ea42 0103 	orr.w	r1, r2, r3
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	687a      	ldr	r2, [r7, #4]
 800587a:	430a      	orrs	r2, r1
 800587c:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005884:	d027      	beq.n	80058d6 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	68ba      	ldr	r2, [r7, #8]
 800588c:	6852      	ldr	r2, [r2, #4]
 800588e:	619a      	str	r2, [r3, #24]
}
 8005890:	e021      	b.n	80058d6 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005896:	2b00      	cmp	r3, #0
 8005898:	d01d      	beq.n	80058d6 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058a2:	431a      	orrs	r2, r3
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058a8:	431a      	orrs	r2, r3
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ae:	431a      	orrs	r2, r3
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	695b      	ldr	r3, [r3, #20]
 80058b4:	049b      	lsls	r3, r3, #18
 80058b6:	431a      	orrs	r2, r3
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	6a1b      	ldr	r3, [r3, #32]
 80058bc:	431a      	orrs	r2, r3
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	69db      	ldr	r3, [r3, #28]
 80058c2:	431a      	orrs	r2, r3
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	699b      	ldr	r3, [r3, #24]
 80058c8:	ea42 0103 	orr.w	r1, r2, r3
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	687a      	ldr	r2, [r7, #4]
 80058d2:	430a      	orrs	r2, r1
 80058d4:	615a      	str	r2, [r3, #20]
}
 80058d6:	bf00      	nop
 80058d8:	3714      	adds	r7, #20
 80058da:	46bd      	mov	sp, r7
 80058dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e0:	4770      	bx	lr
	...

080058e4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b08c      	sub	sp, #48	; 0x30
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d102      	bne.n	80058f8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80058f2:	2301      	movs	r3, #1
 80058f4:	f000 bc48 	b.w	8006188 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f003 0301 	and.w	r3, r3, #1
 8005900:	2b00      	cmp	r3, #0
 8005902:	f000 8088 	beq.w	8005a16 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005906:	4b99      	ldr	r3, [pc, #612]	; (8005b6c <HAL_RCC_OscConfig+0x288>)
 8005908:	691b      	ldr	r3, [r3, #16]
 800590a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800590e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005910:	4b96      	ldr	r3, [pc, #600]	; (8005b6c <HAL_RCC_OscConfig+0x288>)
 8005912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005914:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005918:	2b10      	cmp	r3, #16
 800591a:	d007      	beq.n	800592c <HAL_RCC_OscConfig+0x48>
 800591c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800591e:	2b18      	cmp	r3, #24
 8005920:	d111      	bne.n	8005946 <HAL_RCC_OscConfig+0x62>
 8005922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005924:	f003 0303 	and.w	r3, r3, #3
 8005928:	2b02      	cmp	r3, #2
 800592a:	d10c      	bne.n	8005946 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800592c:	4b8f      	ldr	r3, [pc, #572]	; (8005b6c <HAL_RCC_OscConfig+0x288>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005934:	2b00      	cmp	r3, #0
 8005936:	d06d      	beq.n	8005a14 <HAL_RCC_OscConfig+0x130>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	685b      	ldr	r3, [r3, #4]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d169      	bne.n	8005a14 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005940:	2301      	movs	r3, #1
 8005942:	f000 bc21 	b.w	8006188 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800594e:	d106      	bne.n	800595e <HAL_RCC_OscConfig+0x7a>
 8005950:	4b86      	ldr	r3, [pc, #536]	; (8005b6c <HAL_RCC_OscConfig+0x288>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a85      	ldr	r2, [pc, #532]	; (8005b6c <HAL_RCC_OscConfig+0x288>)
 8005956:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800595a:	6013      	str	r3, [r2, #0]
 800595c:	e02e      	b.n	80059bc <HAL_RCC_OscConfig+0xd8>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d10c      	bne.n	8005980 <HAL_RCC_OscConfig+0x9c>
 8005966:	4b81      	ldr	r3, [pc, #516]	; (8005b6c <HAL_RCC_OscConfig+0x288>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a80      	ldr	r2, [pc, #512]	; (8005b6c <HAL_RCC_OscConfig+0x288>)
 800596c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005970:	6013      	str	r3, [r2, #0]
 8005972:	4b7e      	ldr	r3, [pc, #504]	; (8005b6c <HAL_RCC_OscConfig+0x288>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a7d      	ldr	r2, [pc, #500]	; (8005b6c <HAL_RCC_OscConfig+0x288>)
 8005978:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800597c:	6013      	str	r3, [r2, #0]
 800597e:	e01d      	b.n	80059bc <HAL_RCC_OscConfig+0xd8>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005988:	d10c      	bne.n	80059a4 <HAL_RCC_OscConfig+0xc0>
 800598a:	4b78      	ldr	r3, [pc, #480]	; (8005b6c <HAL_RCC_OscConfig+0x288>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a77      	ldr	r2, [pc, #476]	; (8005b6c <HAL_RCC_OscConfig+0x288>)
 8005990:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005994:	6013      	str	r3, [r2, #0]
 8005996:	4b75      	ldr	r3, [pc, #468]	; (8005b6c <HAL_RCC_OscConfig+0x288>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a74      	ldr	r2, [pc, #464]	; (8005b6c <HAL_RCC_OscConfig+0x288>)
 800599c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059a0:	6013      	str	r3, [r2, #0]
 80059a2:	e00b      	b.n	80059bc <HAL_RCC_OscConfig+0xd8>
 80059a4:	4b71      	ldr	r3, [pc, #452]	; (8005b6c <HAL_RCC_OscConfig+0x288>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a70      	ldr	r2, [pc, #448]	; (8005b6c <HAL_RCC_OscConfig+0x288>)
 80059aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059ae:	6013      	str	r3, [r2, #0]
 80059b0:	4b6e      	ldr	r3, [pc, #440]	; (8005b6c <HAL_RCC_OscConfig+0x288>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a6d      	ldr	r2, [pc, #436]	; (8005b6c <HAL_RCC_OscConfig+0x288>)
 80059b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80059ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	685b      	ldr	r3, [r3, #4]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d013      	beq.n	80059ec <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059c4:	f7fc fbb8 	bl	8002138 <HAL_GetTick>
 80059c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80059ca:	e008      	b.n	80059de <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80059cc:	f7fc fbb4 	bl	8002138 <HAL_GetTick>
 80059d0:	4602      	mov	r2, r0
 80059d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d4:	1ad3      	subs	r3, r2, r3
 80059d6:	2b64      	cmp	r3, #100	; 0x64
 80059d8:	d901      	bls.n	80059de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80059da:	2303      	movs	r3, #3
 80059dc:	e3d4      	b.n	8006188 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80059de:	4b63      	ldr	r3, [pc, #396]	; (8005b6c <HAL_RCC_OscConfig+0x288>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d0f0      	beq.n	80059cc <HAL_RCC_OscConfig+0xe8>
 80059ea:	e014      	b.n	8005a16 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059ec:	f7fc fba4 	bl	8002138 <HAL_GetTick>
 80059f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80059f2:	e008      	b.n	8005a06 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80059f4:	f7fc fba0 	bl	8002138 <HAL_GetTick>
 80059f8:	4602      	mov	r2, r0
 80059fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059fc:	1ad3      	subs	r3, r2, r3
 80059fe:	2b64      	cmp	r3, #100	; 0x64
 8005a00:	d901      	bls.n	8005a06 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005a02:	2303      	movs	r3, #3
 8005a04:	e3c0      	b.n	8006188 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005a06:	4b59      	ldr	r3, [pc, #356]	; (8005b6c <HAL_RCC_OscConfig+0x288>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d1f0      	bne.n	80059f4 <HAL_RCC_OscConfig+0x110>
 8005a12:	e000      	b.n	8005a16 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f003 0302 	and.w	r3, r3, #2
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	f000 80ca 	beq.w	8005bb8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a24:	4b51      	ldr	r3, [pc, #324]	; (8005b6c <HAL_RCC_OscConfig+0x288>)
 8005a26:	691b      	ldr	r3, [r3, #16]
 8005a28:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005a2c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005a2e:	4b4f      	ldr	r3, [pc, #316]	; (8005b6c <HAL_RCC_OscConfig+0x288>)
 8005a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a32:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005a34:	6a3b      	ldr	r3, [r7, #32]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d007      	beq.n	8005a4a <HAL_RCC_OscConfig+0x166>
 8005a3a:	6a3b      	ldr	r3, [r7, #32]
 8005a3c:	2b18      	cmp	r3, #24
 8005a3e:	d156      	bne.n	8005aee <HAL_RCC_OscConfig+0x20a>
 8005a40:	69fb      	ldr	r3, [r7, #28]
 8005a42:	f003 0303 	and.w	r3, r3, #3
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d151      	bne.n	8005aee <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005a4a:	4b48      	ldr	r3, [pc, #288]	; (8005b6c <HAL_RCC_OscConfig+0x288>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f003 0304 	and.w	r3, r3, #4
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d005      	beq.n	8005a62 <HAL_RCC_OscConfig+0x17e>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	68db      	ldr	r3, [r3, #12]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d101      	bne.n	8005a62 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8005a5e:	2301      	movs	r3, #1
 8005a60:	e392      	b.n	8006188 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005a62:	4b42      	ldr	r3, [pc, #264]	; (8005b6c <HAL_RCC_OscConfig+0x288>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f023 0219 	bic.w	r2, r3, #25
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	68db      	ldr	r3, [r3, #12]
 8005a6e:	493f      	ldr	r1, [pc, #252]	; (8005b6c <HAL_RCC_OscConfig+0x288>)
 8005a70:	4313      	orrs	r3, r2
 8005a72:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a74:	f7fc fb60 	bl	8002138 <HAL_GetTick>
 8005a78:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005a7a:	e008      	b.n	8005a8e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a7c:	f7fc fb5c 	bl	8002138 <HAL_GetTick>
 8005a80:	4602      	mov	r2, r0
 8005a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a84:	1ad3      	subs	r3, r2, r3
 8005a86:	2b02      	cmp	r3, #2
 8005a88:	d901      	bls.n	8005a8e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005a8a:	2303      	movs	r3, #3
 8005a8c:	e37c      	b.n	8006188 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005a8e:	4b37      	ldr	r3, [pc, #220]	; (8005b6c <HAL_RCC_OscConfig+0x288>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f003 0304 	and.w	r3, r3, #4
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d0f0      	beq.n	8005a7c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a9a:	f7fc fb7d 	bl	8002198 <HAL_GetREVID>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	f241 0203 	movw	r2, #4099	; 0x1003
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d817      	bhi.n	8005ad8 <HAL_RCC_OscConfig+0x1f4>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	691b      	ldr	r3, [r3, #16]
 8005aac:	2b40      	cmp	r3, #64	; 0x40
 8005aae:	d108      	bne.n	8005ac2 <HAL_RCC_OscConfig+0x1de>
 8005ab0:	4b2e      	ldr	r3, [pc, #184]	; (8005b6c <HAL_RCC_OscConfig+0x288>)
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005ab8:	4a2c      	ldr	r2, [pc, #176]	; (8005b6c <HAL_RCC_OscConfig+0x288>)
 8005aba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005abe:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005ac0:	e07a      	b.n	8005bb8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ac2:	4b2a      	ldr	r3, [pc, #168]	; (8005b6c <HAL_RCC_OscConfig+0x288>)
 8005ac4:	685b      	ldr	r3, [r3, #4]
 8005ac6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	691b      	ldr	r3, [r3, #16]
 8005ace:	031b      	lsls	r3, r3, #12
 8005ad0:	4926      	ldr	r1, [pc, #152]	; (8005b6c <HAL_RCC_OscConfig+0x288>)
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005ad6:	e06f      	b.n	8005bb8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ad8:	4b24      	ldr	r3, [pc, #144]	; (8005b6c <HAL_RCC_OscConfig+0x288>)
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	691b      	ldr	r3, [r3, #16]
 8005ae4:	061b      	lsls	r3, r3, #24
 8005ae6:	4921      	ldr	r1, [pc, #132]	; (8005b6c <HAL_RCC_OscConfig+0x288>)
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005aec:	e064      	b.n	8005bb8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	68db      	ldr	r3, [r3, #12]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d047      	beq.n	8005b86 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005af6:	4b1d      	ldr	r3, [pc, #116]	; (8005b6c <HAL_RCC_OscConfig+0x288>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f023 0219 	bic.w	r2, r3, #25
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	68db      	ldr	r3, [r3, #12]
 8005b02:	491a      	ldr	r1, [pc, #104]	; (8005b6c <HAL_RCC_OscConfig+0x288>)
 8005b04:	4313      	orrs	r3, r2
 8005b06:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b08:	f7fc fb16 	bl	8002138 <HAL_GetTick>
 8005b0c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005b0e:	e008      	b.n	8005b22 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b10:	f7fc fb12 	bl	8002138 <HAL_GetTick>
 8005b14:	4602      	mov	r2, r0
 8005b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b18:	1ad3      	subs	r3, r2, r3
 8005b1a:	2b02      	cmp	r3, #2
 8005b1c:	d901      	bls.n	8005b22 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8005b1e:	2303      	movs	r3, #3
 8005b20:	e332      	b.n	8006188 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005b22:	4b12      	ldr	r3, [pc, #72]	; (8005b6c <HAL_RCC_OscConfig+0x288>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f003 0304 	and.w	r3, r3, #4
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d0f0      	beq.n	8005b10 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b2e:	f7fc fb33 	bl	8002198 <HAL_GetREVID>
 8005b32:	4603      	mov	r3, r0
 8005b34:	f241 0203 	movw	r2, #4099	; 0x1003
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d819      	bhi.n	8005b70 <HAL_RCC_OscConfig+0x28c>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	691b      	ldr	r3, [r3, #16]
 8005b40:	2b40      	cmp	r3, #64	; 0x40
 8005b42:	d108      	bne.n	8005b56 <HAL_RCC_OscConfig+0x272>
 8005b44:	4b09      	ldr	r3, [pc, #36]	; (8005b6c <HAL_RCC_OscConfig+0x288>)
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005b4c:	4a07      	ldr	r2, [pc, #28]	; (8005b6c <HAL_RCC_OscConfig+0x288>)
 8005b4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b52:	6053      	str	r3, [r2, #4]
 8005b54:	e030      	b.n	8005bb8 <HAL_RCC_OscConfig+0x2d4>
 8005b56:	4b05      	ldr	r3, [pc, #20]	; (8005b6c <HAL_RCC_OscConfig+0x288>)
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	691b      	ldr	r3, [r3, #16]
 8005b62:	031b      	lsls	r3, r3, #12
 8005b64:	4901      	ldr	r1, [pc, #4]	; (8005b6c <HAL_RCC_OscConfig+0x288>)
 8005b66:	4313      	orrs	r3, r2
 8005b68:	604b      	str	r3, [r1, #4]
 8005b6a:	e025      	b.n	8005bb8 <HAL_RCC_OscConfig+0x2d4>
 8005b6c:	58024400 	.word	0x58024400
 8005b70:	4b9a      	ldr	r3, [pc, #616]	; (8005ddc <HAL_RCC_OscConfig+0x4f8>)
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	691b      	ldr	r3, [r3, #16]
 8005b7c:	061b      	lsls	r3, r3, #24
 8005b7e:	4997      	ldr	r1, [pc, #604]	; (8005ddc <HAL_RCC_OscConfig+0x4f8>)
 8005b80:	4313      	orrs	r3, r2
 8005b82:	604b      	str	r3, [r1, #4]
 8005b84:	e018      	b.n	8005bb8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005b86:	4b95      	ldr	r3, [pc, #596]	; (8005ddc <HAL_RCC_OscConfig+0x4f8>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a94      	ldr	r2, [pc, #592]	; (8005ddc <HAL_RCC_OscConfig+0x4f8>)
 8005b8c:	f023 0301 	bic.w	r3, r3, #1
 8005b90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b92:	f7fc fad1 	bl	8002138 <HAL_GetTick>
 8005b96:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005b98:	e008      	b.n	8005bac <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b9a:	f7fc facd 	bl	8002138 <HAL_GetTick>
 8005b9e:	4602      	mov	r2, r0
 8005ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba2:	1ad3      	subs	r3, r2, r3
 8005ba4:	2b02      	cmp	r3, #2
 8005ba6:	d901      	bls.n	8005bac <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8005ba8:	2303      	movs	r3, #3
 8005baa:	e2ed      	b.n	8006188 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005bac:	4b8b      	ldr	r3, [pc, #556]	; (8005ddc <HAL_RCC_OscConfig+0x4f8>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f003 0304 	and.w	r3, r3, #4
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d1f0      	bne.n	8005b9a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f003 0310 	and.w	r3, r3, #16
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	f000 80a9 	beq.w	8005d18 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005bc6:	4b85      	ldr	r3, [pc, #532]	; (8005ddc <HAL_RCC_OscConfig+0x4f8>)
 8005bc8:	691b      	ldr	r3, [r3, #16]
 8005bca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005bce:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005bd0:	4b82      	ldr	r3, [pc, #520]	; (8005ddc <HAL_RCC_OscConfig+0x4f8>)
 8005bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bd4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005bd6:	69bb      	ldr	r3, [r7, #24]
 8005bd8:	2b08      	cmp	r3, #8
 8005bda:	d007      	beq.n	8005bec <HAL_RCC_OscConfig+0x308>
 8005bdc:	69bb      	ldr	r3, [r7, #24]
 8005bde:	2b18      	cmp	r3, #24
 8005be0:	d13a      	bne.n	8005c58 <HAL_RCC_OscConfig+0x374>
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	f003 0303 	and.w	r3, r3, #3
 8005be8:	2b01      	cmp	r3, #1
 8005bea:	d135      	bne.n	8005c58 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005bec:	4b7b      	ldr	r3, [pc, #492]	; (8005ddc <HAL_RCC_OscConfig+0x4f8>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d005      	beq.n	8005c04 <HAL_RCC_OscConfig+0x320>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	69db      	ldr	r3, [r3, #28]
 8005bfc:	2b80      	cmp	r3, #128	; 0x80
 8005bfe:	d001      	beq.n	8005c04 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8005c00:	2301      	movs	r3, #1
 8005c02:	e2c1      	b.n	8006188 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005c04:	f7fc fac8 	bl	8002198 <HAL_GetREVID>
 8005c08:	4603      	mov	r3, r0
 8005c0a:	f241 0203 	movw	r2, #4099	; 0x1003
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d817      	bhi.n	8005c42 <HAL_RCC_OscConfig+0x35e>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6a1b      	ldr	r3, [r3, #32]
 8005c16:	2b20      	cmp	r3, #32
 8005c18:	d108      	bne.n	8005c2c <HAL_RCC_OscConfig+0x348>
 8005c1a:	4b70      	ldr	r3, [pc, #448]	; (8005ddc <HAL_RCC_OscConfig+0x4f8>)
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005c22:	4a6e      	ldr	r2, [pc, #440]	; (8005ddc <HAL_RCC_OscConfig+0x4f8>)
 8005c24:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005c28:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005c2a:	e075      	b.n	8005d18 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005c2c:	4b6b      	ldr	r3, [pc, #428]	; (8005ddc <HAL_RCC_OscConfig+0x4f8>)
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6a1b      	ldr	r3, [r3, #32]
 8005c38:	069b      	lsls	r3, r3, #26
 8005c3a:	4968      	ldr	r1, [pc, #416]	; (8005ddc <HAL_RCC_OscConfig+0x4f8>)
 8005c3c:	4313      	orrs	r3, r2
 8005c3e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005c40:	e06a      	b.n	8005d18 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005c42:	4b66      	ldr	r3, [pc, #408]	; (8005ddc <HAL_RCC_OscConfig+0x4f8>)
 8005c44:	68db      	ldr	r3, [r3, #12]
 8005c46:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6a1b      	ldr	r3, [r3, #32]
 8005c4e:	061b      	lsls	r3, r3, #24
 8005c50:	4962      	ldr	r1, [pc, #392]	; (8005ddc <HAL_RCC_OscConfig+0x4f8>)
 8005c52:	4313      	orrs	r3, r2
 8005c54:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005c56:	e05f      	b.n	8005d18 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	69db      	ldr	r3, [r3, #28]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d042      	beq.n	8005ce6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005c60:	4b5e      	ldr	r3, [pc, #376]	; (8005ddc <HAL_RCC_OscConfig+0x4f8>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a5d      	ldr	r2, [pc, #372]	; (8005ddc <HAL_RCC_OscConfig+0x4f8>)
 8005c66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c6c:	f7fc fa64 	bl	8002138 <HAL_GetTick>
 8005c70:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005c72:	e008      	b.n	8005c86 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005c74:	f7fc fa60 	bl	8002138 <HAL_GetTick>
 8005c78:	4602      	mov	r2, r0
 8005c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c7c:	1ad3      	subs	r3, r2, r3
 8005c7e:	2b02      	cmp	r3, #2
 8005c80:	d901      	bls.n	8005c86 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8005c82:	2303      	movs	r3, #3
 8005c84:	e280      	b.n	8006188 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005c86:	4b55      	ldr	r3, [pc, #340]	; (8005ddc <HAL_RCC_OscConfig+0x4f8>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d0f0      	beq.n	8005c74 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005c92:	f7fc fa81 	bl	8002198 <HAL_GetREVID>
 8005c96:	4603      	mov	r3, r0
 8005c98:	f241 0203 	movw	r2, #4099	; 0x1003
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d817      	bhi.n	8005cd0 <HAL_RCC_OscConfig+0x3ec>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6a1b      	ldr	r3, [r3, #32]
 8005ca4:	2b20      	cmp	r3, #32
 8005ca6:	d108      	bne.n	8005cba <HAL_RCC_OscConfig+0x3d6>
 8005ca8:	4b4c      	ldr	r3, [pc, #304]	; (8005ddc <HAL_RCC_OscConfig+0x4f8>)
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005cb0:	4a4a      	ldr	r2, [pc, #296]	; (8005ddc <HAL_RCC_OscConfig+0x4f8>)
 8005cb2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005cb6:	6053      	str	r3, [r2, #4]
 8005cb8:	e02e      	b.n	8005d18 <HAL_RCC_OscConfig+0x434>
 8005cba:	4b48      	ldr	r3, [pc, #288]	; (8005ddc <HAL_RCC_OscConfig+0x4f8>)
 8005cbc:	685b      	ldr	r3, [r3, #4]
 8005cbe:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6a1b      	ldr	r3, [r3, #32]
 8005cc6:	069b      	lsls	r3, r3, #26
 8005cc8:	4944      	ldr	r1, [pc, #272]	; (8005ddc <HAL_RCC_OscConfig+0x4f8>)
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	604b      	str	r3, [r1, #4]
 8005cce:	e023      	b.n	8005d18 <HAL_RCC_OscConfig+0x434>
 8005cd0:	4b42      	ldr	r3, [pc, #264]	; (8005ddc <HAL_RCC_OscConfig+0x4f8>)
 8005cd2:	68db      	ldr	r3, [r3, #12]
 8005cd4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6a1b      	ldr	r3, [r3, #32]
 8005cdc:	061b      	lsls	r3, r3, #24
 8005cde:	493f      	ldr	r1, [pc, #252]	; (8005ddc <HAL_RCC_OscConfig+0x4f8>)
 8005ce0:	4313      	orrs	r3, r2
 8005ce2:	60cb      	str	r3, [r1, #12]
 8005ce4:	e018      	b.n	8005d18 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005ce6:	4b3d      	ldr	r3, [pc, #244]	; (8005ddc <HAL_RCC_OscConfig+0x4f8>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4a3c      	ldr	r2, [pc, #240]	; (8005ddc <HAL_RCC_OscConfig+0x4f8>)
 8005cec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005cf0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cf2:	f7fc fa21 	bl	8002138 <HAL_GetTick>
 8005cf6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005cf8:	e008      	b.n	8005d0c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005cfa:	f7fc fa1d 	bl	8002138 <HAL_GetTick>
 8005cfe:	4602      	mov	r2, r0
 8005d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d02:	1ad3      	subs	r3, r2, r3
 8005d04:	2b02      	cmp	r3, #2
 8005d06:	d901      	bls.n	8005d0c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005d08:	2303      	movs	r3, #3
 8005d0a:	e23d      	b.n	8006188 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005d0c:	4b33      	ldr	r3, [pc, #204]	; (8005ddc <HAL_RCC_OscConfig+0x4f8>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d1f0      	bne.n	8005cfa <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f003 0308 	and.w	r3, r3, #8
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d036      	beq.n	8005d92 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	695b      	ldr	r3, [r3, #20]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d019      	beq.n	8005d60 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005d2c:	4b2b      	ldr	r3, [pc, #172]	; (8005ddc <HAL_RCC_OscConfig+0x4f8>)
 8005d2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d30:	4a2a      	ldr	r2, [pc, #168]	; (8005ddc <HAL_RCC_OscConfig+0x4f8>)
 8005d32:	f043 0301 	orr.w	r3, r3, #1
 8005d36:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d38:	f7fc f9fe 	bl	8002138 <HAL_GetTick>
 8005d3c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005d3e:	e008      	b.n	8005d52 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d40:	f7fc f9fa 	bl	8002138 <HAL_GetTick>
 8005d44:	4602      	mov	r2, r0
 8005d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d48:	1ad3      	subs	r3, r2, r3
 8005d4a:	2b02      	cmp	r3, #2
 8005d4c:	d901      	bls.n	8005d52 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8005d4e:	2303      	movs	r3, #3
 8005d50:	e21a      	b.n	8006188 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005d52:	4b22      	ldr	r3, [pc, #136]	; (8005ddc <HAL_RCC_OscConfig+0x4f8>)
 8005d54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d56:	f003 0302 	and.w	r3, r3, #2
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d0f0      	beq.n	8005d40 <HAL_RCC_OscConfig+0x45c>
 8005d5e:	e018      	b.n	8005d92 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005d60:	4b1e      	ldr	r3, [pc, #120]	; (8005ddc <HAL_RCC_OscConfig+0x4f8>)
 8005d62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d64:	4a1d      	ldr	r2, [pc, #116]	; (8005ddc <HAL_RCC_OscConfig+0x4f8>)
 8005d66:	f023 0301 	bic.w	r3, r3, #1
 8005d6a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d6c:	f7fc f9e4 	bl	8002138 <HAL_GetTick>
 8005d70:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005d72:	e008      	b.n	8005d86 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d74:	f7fc f9e0 	bl	8002138 <HAL_GetTick>
 8005d78:	4602      	mov	r2, r0
 8005d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d7c:	1ad3      	subs	r3, r2, r3
 8005d7e:	2b02      	cmp	r3, #2
 8005d80:	d901      	bls.n	8005d86 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8005d82:	2303      	movs	r3, #3
 8005d84:	e200      	b.n	8006188 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005d86:	4b15      	ldr	r3, [pc, #84]	; (8005ddc <HAL_RCC_OscConfig+0x4f8>)
 8005d88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d8a:	f003 0302 	and.w	r3, r3, #2
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d1f0      	bne.n	8005d74 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f003 0320 	and.w	r3, r3, #32
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d039      	beq.n	8005e12 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	699b      	ldr	r3, [r3, #24]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d01c      	beq.n	8005de0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005da6:	4b0d      	ldr	r3, [pc, #52]	; (8005ddc <HAL_RCC_OscConfig+0x4f8>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a0c      	ldr	r2, [pc, #48]	; (8005ddc <HAL_RCC_OscConfig+0x4f8>)
 8005dac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005db0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005db2:	f7fc f9c1 	bl	8002138 <HAL_GetTick>
 8005db6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005db8:	e008      	b.n	8005dcc <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005dba:	f7fc f9bd 	bl	8002138 <HAL_GetTick>
 8005dbe:	4602      	mov	r2, r0
 8005dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc2:	1ad3      	subs	r3, r2, r3
 8005dc4:	2b02      	cmp	r3, #2
 8005dc6:	d901      	bls.n	8005dcc <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8005dc8:	2303      	movs	r3, #3
 8005dca:	e1dd      	b.n	8006188 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005dcc:	4b03      	ldr	r3, [pc, #12]	; (8005ddc <HAL_RCC_OscConfig+0x4f8>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d0f0      	beq.n	8005dba <HAL_RCC_OscConfig+0x4d6>
 8005dd8:	e01b      	b.n	8005e12 <HAL_RCC_OscConfig+0x52e>
 8005dda:	bf00      	nop
 8005ddc:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005de0:	4b9b      	ldr	r3, [pc, #620]	; (8006050 <HAL_RCC_OscConfig+0x76c>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a9a      	ldr	r2, [pc, #616]	; (8006050 <HAL_RCC_OscConfig+0x76c>)
 8005de6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005dea:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005dec:	f7fc f9a4 	bl	8002138 <HAL_GetTick>
 8005df0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005df2:	e008      	b.n	8005e06 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005df4:	f7fc f9a0 	bl	8002138 <HAL_GetTick>
 8005df8:	4602      	mov	r2, r0
 8005dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dfc:	1ad3      	subs	r3, r2, r3
 8005dfe:	2b02      	cmp	r3, #2
 8005e00:	d901      	bls.n	8005e06 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8005e02:	2303      	movs	r3, #3
 8005e04:	e1c0      	b.n	8006188 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005e06:	4b92      	ldr	r3, [pc, #584]	; (8006050 <HAL_RCC_OscConfig+0x76c>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d1f0      	bne.n	8005df4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f003 0304 	and.w	r3, r3, #4
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	f000 8081 	beq.w	8005f22 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005e20:	4b8c      	ldr	r3, [pc, #560]	; (8006054 <HAL_RCC_OscConfig+0x770>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a8b      	ldr	r2, [pc, #556]	; (8006054 <HAL_RCC_OscConfig+0x770>)
 8005e26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e2a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005e2c:	f7fc f984 	bl	8002138 <HAL_GetTick>
 8005e30:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005e32:	e008      	b.n	8005e46 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e34:	f7fc f980 	bl	8002138 <HAL_GetTick>
 8005e38:	4602      	mov	r2, r0
 8005e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e3c:	1ad3      	subs	r3, r2, r3
 8005e3e:	2b64      	cmp	r3, #100	; 0x64
 8005e40:	d901      	bls.n	8005e46 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8005e42:	2303      	movs	r3, #3
 8005e44:	e1a0      	b.n	8006188 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005e46:	4b83      	ldr	r3, [pc, #524]	; (8006054 <HAL_RCC_OscConfig+0x770>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d0f0      	beq.n	8005e34 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	689b      	ldr	r3, [r3, #8]
 8005e56:	2b01      	cmp	r3, #1
 8005e58:	d106      	bne.n	8005e68 <HAL_RCC_OscConfig+0x584>
 8005e5a:	4b7d      	ldr	r3, [pc, #500]	; (8006050 <HAL_RCC_OscConfig+0x76c>)
 8005e5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e5e:	4a7c      	ldr	r2, [pc, #496]	; (8006050 <HAL_RCC_OscConfig+0x76c>)
 8005e60:	f043 0301 	orr.w	r3, r3, #1
 8005e64:	6713      	str	r3, [r2, #112]	; 0x70
 8005e66:	e02d      	b.n	8005ec4 <HAL_RCC_OscConfig+0x5e0>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	689b      	ldr	r3, [r3, #8]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d10c      	bne.n	8005e8a <HAL_RCC_OscConfig+0x5a6>
 8005e70:	4b77      	ldr	r3, [pc, #476]	; (8006050 <HAL_RCC_OscConfig+0x76c>)
 8005e72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e74:	4a76      	ldr	r2, [pc, #472]	; (8006050 <HAL_RCC_OscConfig+0x76c>)
 8005e76:	f023 0301 	bic.w	r3, r3, #1
 8005e7a:	6713      	str	r3, [r2, #112]	; 0x70
 8005e7c:	4b74      	ldr	r3, [pc, #464]	; (8006050 <HAL_RCC_OscConfig+0x76c>)
 8005e7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e80:	4a73      	ldr	r2, [pc, #460]	; (8006050 <HAL_RCC_OscConfig+0x76c>)
 8005e82:	f023 0304 	bic.w	r3, r3, #4
 8005e86:	6713      	str	r3, [r2, #112]	; 0x70
 8005e88:	e01c      	b.n	8005ec4 <HAL_RCC_OscConfig+0x5e0>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	689b      	ldr	r3, [r3, #8]
 8005e8e:	2b05      	cmp	r3, #5
 8005e90:	d10c      	bne.n	8005eac <HAL_RCC_OscConfig+0x5c8>
 8005e92:	4b6f      	ldr	r3, [pc, #444]	; (8006050 <HAL_RCC_OscConfig+0x76c>)
 8005e94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e96:	4a6e      	ldr	r2, [pc, #440]	; (8006050 <HAL_RCC_OscConfig+0x76c>)
 8005e98:	f043 0304 	orr.w	r3, r3, #4
 8005e9c:	6713      	str	r3, [r2, #112]	; 0x70
 8005e9e:	4b6c      	ldr	r3, [pc, #432]	; (8006050 <HAL_RCC_OscConfig+0x76c>)
 8005ea0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ea2:	4a6b      	ldr	r2, [pc, #428]	; (8006050 <HAL_RCC_OscConfig+0x76c>)
 8005ea4:	f043 0301 	orr.w	r3, r3, #1
 8005ea8:	6713      	str	r3, [r2, #112]	; 0x70
 8005eaa:	e00b      	b.n	8005ec4 <HAL_RCC_OscConfig+0x5e0>
 8005eac:	4b68      	ldr	r3, [pc, #416]	; (8006050 <HAL_RCC_OscConfig+0x76c>)
 8005eae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005eb0:	4a67      	ldr	r2, [pc, #412]	; (8006050 <HAL_RCC_OscConfig+0x76c>)
 8005eb2:	f023 0301 	bic.w	r3, r3, #1
 8005eb6:	6713      	str	r3, [r2, #112]	; 0x70
 8005eb8:	4b65      	ldr	r3, [pc, #404]	; (8006050 <HAL_RCC_OscConfig+0x76c>)
 8005eba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ebc:	4a64      	ldr	r2, [pc, #400]	; (8006050 <HAL_RCC_OscConfig+0x76c>)
 8005ebe:	f023 0304 	bic.w	r3, r3, #4
 8005ec2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	689b      	ldr	r3, [r3, #8]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d015      	beq.n	8005ef8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ecc:	f7fc f934 	bl	8002138 <HAL_GetTick>
 8005ed0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005ed2:	e00a      	b.n	8005eea <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ed4:	f7fc f930 	bl	8002138 <HAL_GetTick>
 8005ed8:	4602      	mov	r2, r0
 8005eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005edc:	1ad3      	subs	r3, r2, r3
 8005ede:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d901      	bls.n	8005eea <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8005ee6:	2303      	movs	r3, #3
 8005ee8:	e14e      	b.n	8006188 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005eea:	4b59      	ldr	r3, [pc, #356]	; (8006050 <HAL_RCC_OscConfig+0x76c>)
 8005eec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005eee:	f003 0302 	and.w	r3, r3, #2
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d0ee      	beq.n	8005ed4 <HAL_RCC_OscConfig+0x5f0>
 8005ef6:	e014      	b.n	8005f22 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ef8:	f7fc f91e 	bl	8002138 <HAL_GetTick>
 8005efc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005efe:	e00a      	b.n	8005f16 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f00:	f7fc f91a 	bl	8002138 <HAL_GetTick>
 8005f04:	4602      	mov	r2, r0
 8005f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f08:	1ad3      	subs	r3, r2, r3
 8005f0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d901      	bls.n	8005f16 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8005f12:	2303      	movs	r3, #3
 8005f14:	e138      	b.n	8006188 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005f16:	4b4e      	ldr	r3, [pc, #312]	; (8006050 <HAL_RCC_OscConfig+0x76c>)
 8005f18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f1a:	f003 0302 	and.w	r3, r3, #2
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d1ee      	bne.n	8005f00 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	f000 812d 	beq.w	8006186 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005f2c:	4b48      	ldr	r3, [pc, #288]	; (8006050 <HAL_RCC_OscConfig+0x76c>)
 8005f2e:	691b      	ldr	r3, [r3, #16]
 8005f30:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005f34:	2b18      	cmp	r3, #24
 8005f36:	f000 80bd 	beq.w	80060b4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f3e:	2b02      	cmp	r3, #2
 8005f40:	f040 809e 	bne.w	8006080 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f44:	4b42      	ldr	r3, [pc, #264]	; (8006050 <HAL_RCC_OscConfig+0x76c>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4a41      	ldr	r2, [pc, #260]	; (8006050 <HAL_RCC_OscConfig+0x76c>)
 8005f4a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005f4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f50:	f7fc f8f2 	bl	8002138 <HAL_GetTick>
 8005f54:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005f56:	e008      	b.n	8005f6a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f58:	f7fc f8ee 	bl	8002138 <HAL_GetTick>
 8005f5c:	4602      	mov	r2, r0
 8005f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f60:	1ad3      	subs	r3, r2, r3
 8005f62:	2b02      	cmp	r3, #2
 8005f64:	d901      	bls.n	8005f6a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8005f66:	2303      	movs	r3, #3
 8005f68:	e10e      	b.n	8006188 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005f6a:	4b39      	ldr	r3, [pc, #228]	; (8006050 <HAL_RCC_OscConfig+0x76c>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d1f0      	bne.n	8005f58 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005f76:	4b36      	ldr	r3, [pc, #216]	; (8006050 <HAL_RCC_OscConfig+0x76c>)
 8005f78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005f7a:	4b37      	ldr	r3, [pc, #220]	; (8006058 <HAL_RCC_OscConfig+0x774>)
 8005f7c:	4013      	ands	r3, r2
 8005f7e:	687a      	ldr	r2, [r7, #4]
 8005f80:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005f82:	687a      	ldr	r2, [r7, #4]
 8005f84:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005f86:	0112      	lsls	r2, r2, #4
 8005f88:	430a      	orrs	r2, r1
 8005f8a:	4931      	ldr	r1, [pc, #196]	; (8006050 <HAL_RCC_OscConfig+0x76c>)
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	628b      	str	r3, [r1, #40]	; 0x28
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f94:	3b01      	subs	r3, #1
 8005f96:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f9e:	3b01      	subs	r3, #1
 8005fa0:	025b      	lsls	r3, r3, #9
 8005fa2:	b29b      	uxth	r3, r3
 8005fa4:	431a      	orrs	r2, r3
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005faa:	3b01      	subs	r3, #1
 8005fac:	041b      	lsls	r3, r3, #16
 8005fae:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005fb2:	431a      	orrs	r2, r3
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fb8:	3b01      	subs	r3, #1
 8005fba:	061b      	lsls	r3, r3, #24
 8005fbc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005fc0:	4923      	ldr	r1, [pc, #140]	; (8006050 <HAL_RCC_OscConfig+0x76c>)
 8005fc2:	4313      	orrs	r3, r2
 8005fc4:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005fc6:	4b22      	ldr	r3, [pc, #136]	; (8006050 <HAL_RCC_OscConfig+0x76c>)
 8005fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fca:	4a21      	ldr	r2, [pc, #132]	; (8006050 <HAL_RCC_OscConfig+0x76c>)
 8005fcc:	f023 0301 	bic.w	r3, r3, #1
 8005fd0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005fd2:	4b1f      	ldr	r3, [pc, #124]	; (8006050 <HAL_RCC_OscConfig+0x76c>)
 8005fd4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005fd6:	4b21      	ldr	r3, [pc, #132]	; (800605c <HAL_RCC_OscConfig+0x778>)
 8005fd8:	4013      	ands	r3, r2
 8005fda:	687a      	ldr	r2, [r7, #4]
 8005fdc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005fde:	00d2      	lsls	r2, r2, #3
 8005fe0:	491b      	ldr	r1, [pc, #108]	; (8006050 <HAL_RCC_OscConfig+0x76c>)
 8005fe2:	4313      	orrs	r3, r2
 8005fe4:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005fe6:	4b1a      	ldr	r3, [pc, #104]	; (8006050 <HAL_RCC_OscConfig+0x76c>)
 8005fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fea:	f023 020c 	bic.w	r2, r3, #12
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ff2:	4917      	ldr	r1, [pc, #92]	; (8006050 <HAL_RCC_OscConfig+0x76c>)
 8005ff4:	4313      	orrs	r3, r2
 8005ff6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005ff8:	4b15      	ldr	r3, [pc, #84]	; (8006050 <HAL_RCC_OscConfig+0x76c>)
 8005ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ffc:	f023 0202 	bic.w	r2, r3, #2
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006004:	4912      	ldr	r1, [pc, #72]	; (8006050 <HAL_RCC_OscConfig+0x76c>)
 8006006:	4313      	orrs	r3, r2
 8006008:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800600a:	4b11      	ldr	r3, [pc, #68]	; (8006050 <HAL_RCC_OscConfig+0x76c>)
 800600c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800600e:	4a10      	ldr	r2, [pc, #64]	; (8006050 <HAL_RCC_OscConfig+0x76c>)
 8006010:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006014:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006016:	4b0e      	ldr	r3, [pc, #56]	; (8006050 <HAL_RCC_OscConfig+0x76c>)
 8006018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800601a:	4a0d      	ldr	r2, [pc, #52]	; (8006050 <HAL_RCC_OscConfig+0x76c>)
 800601c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006020:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006022:	4b0b      	ldr	r3, [pc, #44]	; (8006050 <HAL_RCC_OscConfig+0x76c>)
 8006024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006026:	4a0a      	ldr	r2, [pc, #40]	; (8006050 <HAL_RCC_OscConfig+0x76c>)
 8006028:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800602c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800602e:	4b08      	ldr	r3, [pc, #32]	; (8006050 <HAL_RCC_OscConfig+0x76c>)
 8006030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006032:	4a07      	ldr	r2, [pc, #28]	; (8006050 <HAL_RCC_OscConfig+0x76c>)
 8006034:	f043 0301 	orr.w	r3, r3, #1
 8006038:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800603a:	4b05      	ldr	r3, [pc, #20]	; (8006050 <HAL_RCC_OscConfig+0x76c>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4a04      	ldr	r2, [pc, #16]	; (8006050 <HAL_RCC_OscConfig+0x76c>)
 8006040:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006044:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006046:	f7fc f877 	bl	8002138 <HAL_GetTick>
 800604a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800604c:	e011      	b.n	8006072 <HAL_RCC_OscConfig+0x78e>
 800604e:	bf00      	nop
 8006050:	58024400 	.word	0x58024400
 8006054:	58024800 	.word	0x58024800
 8006058:	fffffc0c 	.word	0xfffffc0c
 800605c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006060:	f7fc f86a 	bl	8002138 <HAL_GetTick>
 8006064:	4602      	mov	r2, r0
 8006066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006068:	1ad3      	subs	r3, r2, r3
 800606a:	2b02      	cmp	r3, #2
 800606c:	d901      	bls.n	8006072 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800606e:	2303      	movs	r3, #3
 8006070:	e08a      	b.n	8006188 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006072:	4b47      	ldr	r3, [pc, #284]	; (8006190 <HAL_RCC_OscConfig+0x8ac>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800607a:	2b00      	cmp	r3, #0
 800607c:	d0f0      	beq.n	8006060 <HAL_RCC_OscConfig+0x77c>
 800607e:	e082      	b.n	8006186 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006080:	4b43      	ldr	r3, [pc, #268]	; (8006190 <HAL_RCC_OscConfig+0x8ac>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4a42      	ldr	r2, [pc, #264]	; (8006190 <HAL_RCC_OscConfig+0x8ac>)
 8006086:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800608a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800608c:	f7fc f854 	bl	8002138 <HAL_GetTick>
 8006090:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006092:	e008      	b.n	80060a6 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006094:	f7fc f850 	bl	8002138 <HAL_GetTick>
 8006098:	4602      	mov	r2, r0
 800609a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800609c:	1ad3      	subs	r3, r2, r3
 800609e:	2b02      	cmp	r3, #2
 80060a0:	d901      	bls.n	80060a6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80060a2:	2303      	movs	r3, #3
 80060a4:	e070      	b.n	8006188 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80060a6:	4b3a      	ldr	r3, [pc, #232]	; (8006190 <HAL_RCC_OscConfig+0x8ac>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d1f0      	bne.n	8006094 <HAL_RCC_OscConfig+0x7b0>
 80060b2:	e068      	b.n	8006186 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80060b4:	4b36      	ldr	r3, [pc, #216]	; (8006190 <HAL_RCC_OscConfig+0x8ac>)
 80060b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060b8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80060ba:	4b35      	ldr	r3, [pc, #212]	; (8006190 <HAL_RCC_OscConfig+0x8ac>)
 80060bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060be:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c4:	2b01      	cmp	r3, #1
 80060c6:	d031      	beq.n	800612c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80060c8:	693b      	ldr	r3, [r7, #16]
 80060ca:	f003 0203 	and.w	r2, r3, #3
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80060d2:	429a      	cmp	r2, r3
 80060d4:	d12a      	bne.n	800612c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80060d6:	693b      	ldr	r3, [r7, #16]
 80060d8:	091b      	lsrs	r3, r3, #4
 80060da:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80060e2:	429a      	cmp	r2, r3
 80060e4:	d122      	bne.n	800612c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060f0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80060f2:	429a      	cmp	r2, r3
 80060f4:	d11a      	bne.n	800612c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	0a5b      	lsrs	r3, r3, #9
 80060fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006102:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006104:	429a      	cmp	r2, r3
 8006106:	d111      	bne.n	800612c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	0c1b      	lsrs	r3, r3, #16
 800610c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006114:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006116:	429a      	cmp	r2, r3
 8006118:	d108      	bne.n	800612c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	0e1b      	lsrs	r3, r3, #24
 800611e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006126:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006128:	429a      	cmp	r2, r3
 800612a:	d001      	beq.n	8006130 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800612c:	2301      	movs	r3, #1
 800612e:	e02b      	b.n	8006188 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006130:	4b17      	ldr	r3, [pc, #92]	; (8006190 <HAL_RCC_OscConfig+0x8ac>)
 8006132:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006134:	08db      	lsrs	r3, r3, #3
 8006136:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800613a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006140:	693a      	ldr	r2, [r7, #16]
 8006142:	429a      	cmp	r2, r3
 8006144:	d01f      	beq.n	8006186 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8006146:	4b12      	ldr	r3, [pc, #72]	; (8006190 <HAL_RCC_OscConfig+0x8ac>)
 8006148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800614a:	4a11      	ldr	r2, [pc, #68]	; (8006190 <HAL_RCC_OscConfig+0x8ac>)
 800614c:	f023 0301 	bic.w	r3, r3, #1
 8006150:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006152:	f7fb fff1 	bl	8002138 <HAL_GetTick>
 8006156:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8006158:	bf00      	nop
 800615a:	f7fb ffed 	bl	8002138 <HAL_GetTick>
 800615e:	4602      	mov	r2, r0
 8006160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006162:	4293      	cmp	r3, r2
 8006164:	d0f9      	beq.n	800615a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006166:	4b0a      	ldr	r3, [pc, #40]	; (8006190 <HAL_RCC_OscConfig+0x8ac>)
 8006168:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800616a:	4b0a      	ldr	r3, [pc, #40]	; (8006194 <HAL_RCC_OscConfig+0x8b0>)
 800616c:	4013      	ands	r3, r2
 800616e:	687a      	ldr	r2, [r7, #4]
 8006170:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006172:	00d2      	lsls	r2, r2, #3
 8006174:	4906      	ldr	r1, [pc, #24]	; (8006190 <HAL_RCC_OscConfig+0x8ac>)
 8006176:	4313      	orrs	r3, r2
 8006178:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800617a:	4b05      	ldr	r3, [pc, #20]	; (8006190 <HAL_RCC_OscConfig+0x8ac>)
 800617c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800617e:	4a04      	ldr	r2, [pc, #16]	; (8006190 <HAL_RCC_OscConfig+0x8ac>)
 8006180:	f043 0301 	orr.w	r3, r3, #1
 8006184:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8006186:	2300      	movs	r3, #0
}
 8006188:	4618      	mov	r0, r3
 800618a:	3730      	adds	r7, #48	; 0x30
 800618c:	46bd      	mov	sp, r7
 800618e:	bd80      	pop	{r7, pc}
 8006190:	58024400 	.word	0x58024400
 8006194:	ffff0007 	.word	0xffff0007

08006198 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b086      	sub	sp, #24
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
 80061a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d101      	bne.n	80061ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80061a8:	2301      	movs	r3, #1
 80061aa:	e19c      	b.n	80064e6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80061ac:	4b8a      	ldr	r3, [pc, #552]	; (80063d8 <HAL_RCC_ClockConfig+0x240>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f003 030f 	and.w	r3, r3, #15
 80061b4:	683a      	ldr	r2, [r7, #0]
 80061b6:	429a      	cmp	r2, r3
 80061b8:	d910      	bls.n	80061dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061ba:	4b87      	ldr	r3, [pc, #540]	; (80063d8 <HAL_RCC_ClockConfig+0x240>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f023 020f 	bic.w	r2, r3, #15
 80061c2:	4985      	ldr	r1, [pc, #532]	; (80063d8 <HAL_RCC_ClockConfig+0x240>)
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	4313      	orrs	r3, r2
 80061c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80061ca:	4b83      	ldr	r3, [pc, #524]	; (80063d8 <HAL_RCC_ClockConfig+0x240>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f003 030f 	and.w	r3, r3, #15
 80061d2:	683a      	ldr	r2, [r7, #0]
 80061d4:	429a      	cmp	r2, r3
 80061d6:	d001      	beq.n	80061dc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80061d8:	2301      	movs	r3, #1
 80061da:	e184      	b.n	80064e6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f003 0304 	and.w	r3, r3, #4
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d010      	beq.n	800620a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	691a      	ldr	r2, [r3, #16]
 80061ec:	4b7b      	ldr	r3, [pc, #492]	; (80063dc <HAL_RCC_ClockConfig+0x244>)
 80061ee:	699b      	ldr	r3, [r3, #24]
 80061f0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80061f4:	429a      	cmp	r2, r3
 80061f6:	d908      	bls.n	800620a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80061f8:	4b78      	ldr	r3, [pc, #480]	; (80063dc <HAL_RCC_ClockConfig+0x244>)
 80061fa:	699b      	ldr	r3, [r3, #24]
 80061fc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	691b      	ldr	r3, [r3, #16]
 8006204:	4975      	ldr	r1, [pc, #468]	; (80063dc <HAL_RCC_ClockConfig+0x244>)
 8006206:	4313      	orrs	r3, r2
 8006208:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f003 0308 	and.w	r3, r3, #8
 8006212:	2b00      	cmp	r3, #0
 8006214:	d010      	beq.n	8006238 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	695a      	ldr	r2, [r3, #20]
 800621a:	4b70      	ldr	r3, [pc, #448]	; (80063dc <HAL_RCC_ClockConfig+0x244>)
 800621c:	69db      	ldr	r3, [r3, #28]
 800621e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006222:	429a      	cmp	r2, r3
 8006224:	d908      	bls.n	8006238 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006226:	4b6d      	ldr	r3, [pc, #436]	; (80063dc <HAL_RCC_ClockConfig+0x244>)
 8006228:	69db      	ldr	r3, [r3, #28]
 800622a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	695b      	ldr	r3, [r3, #20]
 8006232:	496a      	ldr	r1, [pc, #424]	; (80063dc <HAL_RCC_ClockConfig+0x244>)
 8006234:	4313      	orrs	r3, r2
 8006236:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f003 0310 	and.w	r3, r3, #16
 8006240:	2b00      	cmp	r3, #0
 8006242:	d010      	beq.n	8006266 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	699a      	ldr	r2, [r3, #24]
 8006248:	4b64      	ldr	r3, [pc, #400]	; (80063dc <HAL_RCC_ClockConfig+0x244>)
 800624a:	69db      	ldr	r3, [r3, #28]
 800624c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006250:	429a      	cmp	r2, r3
 8006252:	d908      	bls.n	8006266 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006254:	4b61      	ldr	r3, [pc, #388]	; (80063dc <HAL_RCC_ClockConfig+0x244>)
 8006256:	69db      	ldr	r3, [r3, #28]
 8006258:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	699b      	ldr	r3, [r3, #24]
 8006260:	495e      	ldr	r1, [pc, #376]	; (80063dc <HAL_RCC_ClockConfig+0x244>)
 8006262:	4313      	orrs	r3, r2
 8006264:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f003 0320 	and.w	r3, r3, #32
 800626e:	2b00      	cmp	r3, #0
 8006270:	d010      	beq.n	8006294 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	69da      	ldr	r2, [r3, #28]
 8006276:	4b59      	ldr	r3, [pc, #356]	; (80063dc <HAL_RCC_ClockConfig+0x244>)
 8006278:	6a1b      	ldr	r3, [r3, #32]
 800627a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800627e:	429a      	cmp	r2, r3
 8006280:	d908      	bls.n	8006294 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006282:	4b56      	ldr	r3, [pc, #344]	; (80063dc <HAL_RCC_ClockConfig+0x244>)
 8006284:	6a1b      	ldr	r3, [r3, #32]
 8006286:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	69db      	ldr	r3, [r3, #28]
 800628e:	4953      	ldr	r1, [pc, #332]	; (80063dc <HAL_RCC_ClockConfig+0x244>)
 8006290:	4313      	orrs	r3, r2
 8006292:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f003 0302 	and.w	r3, r3, #2
 800629c:	2b00      	cmp	r3, #0
 800629e:	d010      	beq.n	80062c2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	68da      	ldr	r2, [r3, #12]
 80062a4:	4b4d      	ldr	r3, [pc, #308]	; (80063dc <HAL_RCC_ClockConfig+0x244>)
 80062a6:	699b      	ldr	r3, [r3, #24]
 80062a8:	f003 030f 	and.w	r3, r3, #15
 80062ac:	429a      	cmp	r2, r3
 80062ae:	d908      	bls.n	80062c2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80062b0:	4b4a      	ldr	r3, [pc, #296]	; (80063dc <HAL_RCC_ClockConfig+0x244>)
 80062b2:	699b      	ldr	r3, [r3, #24]
 80062b4:	f023 020f 	bic.w	r2, r3, #15
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	68db      	ldr	r3, [r3, #12]
 80062bc:	4947      	ldr	r1, [pc, #284]	; (80063dc <HAL_RCC_ClockConfig+0x244>)
 80062be:	4313      	orrs	r3, r2
 80062c0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f003 0301 	and.w	r3, r3, #1
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d055      	beq.n	800637a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80062ce:	4b43      	ldr	r3, [pc, #268]	; (80063dc <HAL_RCC_ClockConfig+0x244>)
 80062d0:	699b      	ldr	r3, [r3, #24]
 80062d2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	689b      	ldr	r3, [r3, #8]
 80062da:	4940      	ldr	r1, [pc, #256]	; (80063dc <HAL_RCC_ClockConfig+0x244>)
 80062dc:	4313      	orrs	r3, r2
 80062de:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	685b      	ldr	r3, [r3, #4]
 80062e4:	2b02      	cmp	r3, #2
 80062e6:	d107      	bne.n	80062f8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80062e8:	4b3c      	ldr	r3, [pc, #240]	; (80063dc <HAL_RCC_ClockConfig+0x244>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d121      	bne.n	8006338 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80062f4:	2301      	movs	r3, #1
 80062f6:	e0f6      	b.n	80064e6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	685b      	ldr	r3, [r3, #4]
 80062fc:	2b03      	cmp	r3, #3
 80062fe:	d107      	bne.n	8006310 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006300:	4b36      	ldr	r3, [pc, #216]	; (80063dc <HAL_RCC_ClockConfig+0x244>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006308:	2b00      	cmp	r3, #0
 800630a:	d115      	bne.n	8006338 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800630c:	2301      	movs	r3, #1
 800630e:	e0ea      	b.n	80064e6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	685b      	ldr	r3, [r3, #4]
 8006314:	2b01      	cmp	r3, #1
 8006316:	d107      	bne.n	8006328 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006318:	4b30      	ldr	r3, [pc, #192]	; (80063dc <HAL_RCC_ClockConfig+0x244>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006320:	2b00      	cmp	r3, #0
 8006322:	d109      	bne.n	8006338 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006324:	2301      	movs	r3, #1
 8006326:	e0de      	b.n	80064e6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006328:	4b2c      	ldr	r3, [pc, #176]	; (80063dc <HAL_RCC_ClockConfig+0x244>)
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f003 0304 	and.w	r3, r3, #4
 8006330:	2b00      	cmp	r3, #0
 8006332:	d101      	bne.n	8006338 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006334:	2301      	movs	r3, #1
 8006336:	e0d6      	b.n	80064e6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006338:	4b28      	ldr	r3, [pc, #160]	; (80063dc <HAL_RCC_ClockConfig+0x244>)
 800633a:	691b      	ldr	r3, [r3, #16]
 800633c:	f023 0207 	bic.w	r2, r3, #7
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	685b      	ldr	r3, [r3, #4]
 8006344:	4925      	ldr	r1, [pc, #148]	; (80063dc <HAL_RCC_ClockConfig+0x244>)
 8006346:	4313      	orrs	r3, r2
 8006348:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800634a:	f7fb fef5 	bl	8002138 <HAL_GetTick>
 800634e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006350:	e00a      	b.n	8006368 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006352:	f7fb fef1 	bl	8002138 <HAL_GetTick>
 8006356:	4602      	mov	r2, r0
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	1ad3      	subs	r3, r2, r3
 800635c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006360:	4293      	cmp	r3, r2
 8006362:	d901      	bls.n	8006368 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006364:	2303      	movs	r3, #3
 8006366:	e0be      	b.n	80064e6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006368:	4b1c      	ldr	r3, [pc, #112]	; (80063dc <HAL_RCC_ClockConfig+0x244>)
 800636a:	691b      	ldr	r3, [r3, #16]
 800636c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	00db      	lsls	r3, r3, #3
 8006376:	429a      	cmp	r2, r3
 8006378:	d1eb      	bne.n	8006352 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f003 0302 	and.w	r3, r3, #2
 8006382:	2b00      	cmp	r3, #0
 8006384:	d010      	beq.n	80063a8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	68da      	ldr	r2, [r3, #12]
 800638a:	4b14      	ldr	r3, [pc, #80]	; (80063dc <HAL_RCC_ClockConfig+0x244>)
 800638c:	699b      	ldr	r3, [r3, #24]
 800638e:	f003 030f 	and.w	r3, r3, #15
 8006392:	429a      	cmp	r2, r3
 8006394:	d208      	bcs.n	80063a8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006396:	4b11      	ldr	r3, [pc, #68]	; (80063dc <HAL_RCC_ClockConfig+0x244>)
 8006398:	699b      	ldr	r3, [r3, #24]
 800639a:	f023 020f 	bic.w	r2, r3, #15
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	68db      	ldr	r3, [r3, #12]
 80063a2:	490e      	ldr	r1, [pc, #56]	; (80063dc <HAL_RCC_ClockConfig+0x244>)
 80063a4:	4313      	orrs	r3, r2
 80063a6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80063a8:	4b0b      	ldr	r3, [pc, #44]	; (80063d8 <HAL_RCC_ClockConfig+0x240>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f003 030f 	and.w	r3, r3, #15
 80063b0:	683a      	ldr	r2, [r7, #0]
 80063b2:	429a      	cmp	r2, r3
 80063b4:	d214      	bcs.n	80063e0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063b6:	4b08      	ldr	r3, [pc, #32]	; (80063d8 <HAL_RCC_ClockConfig+0x240>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f023 020f 	bic.w	r2, r3, #15
 80063be:	4906      	ldr	r1, [pc, #24]	; (80063d8 <HAL_RCC_ClockConfig+0x240>)
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	4313      	orrs	r3, r2
 80063c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80063c6:	4b04      	ldr	r3, [pc, #16]	; (80063d8 <HAL_RCC_ClockConfig+0x240>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f003 030f 	and.w	r3, r3, #15
 80063ce:	683a      	ldr	r2, [r7, #0]
 80063d0:	429a      	cmp	r2, r3
 80063d2:	d005      	beq.n	80063e0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80063d4:	2301      	movs	r3, #1
 80063d6:	e086      	b.n	80064e6 <HAL_RCC_ClockConfig+0x34e>
 80063d8:	52002000 	.word	0x52002000
 80063dc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f003 0304 	and.w	r3, r3, #4
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d010      	beq.n	800640e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	691a      	ldr	r2, [r3, #16]
 80063f0:	4b3f      	ldr	r3, [pc, #252]	; (80064f0 <HAL_RCC_ClockConfig+0x358>)
 80063f2:	699b      	ldr	r3, [r3, #24]
 80063f4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80063f8:	429a      	cmp	r2, r3
 80063fa:	d208      	bcs.n	800640e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80063fc:	4b3c      	ldr	r3, [pc, #240]	; (80064f0 <HAL_RCC_ClockConfig+0x358>)
 80063fe:	699b      	ldr	r3, [r3, #24]
 8006400:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	691b      	ldr	r3, [r3, #16]
 8006408:	4939      	ldr	r1, [pc, #228]	; (80064f0 <HAL_RCC_ClockConfig+0x358>)
 800640a:	4313      	orrs	r3, r2
 800640c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f003 0308 	and.w	r3, r3, #8
 8006416:	2b00      	cmp	r3, #0
 8006418:	d010      	beq.n	800643c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	695a      	ldr	r2, [r3, #20]
 800641e:	4b34      	ldr	r3, [pc, #208]	; (80064f0 <HAL_RCC_ClockConfig+0x358>)
 8006420:	69db      	ldr	r3, [r3, #28]
 8006422:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006426:	429a      	cmp	r2, r3
 8006428:	d208      	bcs.n	800643c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800642a:	4b31      	ldr	r3, [pc, #196]	; (80064f0 <HAL_RCC_ClockConfig+0x358>)
 800642c:	69db      	ldr	r3, [r3, #28]
 800642e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	695b      	ldr	r3, [r3, #20]
 8006436:	492e      	ldr	r1, [pc, #184]	; (80064f0 <HAL_RCC_ClockConfig+0x358>)
 8006438:	4313      	orrs	r3, r2
 800643a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f003 0310 	and.w	r3, r3, #16
 8006444:	2b00      	cmp	r3, #0
 8006446:	d010      	beq.n	800646a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	699a      	ldr	r2, [r3, #24]
 800644c:	4b28      	ldr	r3, [pc, #160]	; (80064f0 <HAL_RCC_ClockConfig+0x358>)
 800644e:	69db      	ldr	r3, [r3, #28]
 8006450:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006454:	429a      	cmp	r2, r3
 8006456:	d208      	bcs.n	800646a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006458:	4b25      	ldr	r3, [pc, #148]	; (80064f0 <HAL_RCC_ClockConfig+0x358>)
 800645a:	69db      	ldr	r3, [r3, #28]
 800645c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	699b      	ldr	r3, [r3, #24]
 8006464:	4922      	ldr	r1, [pc, #136]	; (80064f0 <HAL_RCC_ClockConfig+0x358>)
 8006466:	4313      	orrs	r3, r2
 8006468:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f003 0320 	and.w	r3, r3, #32
 8006472:	2b00      	cmp	r3, #0
 8006474:	d010      	beq.n	8006498 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	69da      	ldr	r2, [r3, #28]
 800647a:	4b1d      	ldr	r3, [pc, #116]	; (80064f0 <HAL_RCC_ClockConfig+0x358>)
 800647c:	6a1b      	ldr	r3, [r3, #32]
 800647e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006482:	429a      	cmp	r2, r3
 8006484:	d208      	bcs.n	8006498 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006486:	4b1a      	ldr	r3, [pc, #104]	; (80064f0 <HAL_RCC_ClockConfig+0x358>)
 8006488:	6a1b      	ldr	r3, [r3, #32]
 800648a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	69db      	ldr	r3, [r3, #28]
 8006492:	4917      	ldr	r1, [pc, #92]	; (80064f0 <HAL_RCC_ClockConfig+0x358>)
 8006494:	4313      	orrs	r3, r2
 8006496:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006498:	f000 f834 	bl	8006504 <HAL_RCC_GetSysClockFreq>
 800649c:	4602      	mov	r2, r0
 800649e:	4b14      	ldr	r3, [pc, #80]	; (80064f0 <HAL_RCC_ClockConfig+0x358>)
 80064a0:	699b      	ldr	r3, [r3, #24]
 80064a2:	0a1b      	lsrs	r3, r3, #8
 80064a4:	f003 030f 	and.w	r3, r3, #15
 80064a8:	4912      	ldr	r1, [pc, #72]	; (80064f4 <HAL_RCC_ClockConfig+0x35c>)
 80064aa:	5ccb      	ldrb	r3, [r1, r3]
 80064ac:	f003 031f 	and.w	r3, r3, #31
 80064b0:	fa22 f303 	lsr.w	r3, r2, r3
 80064b4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80064b6:	4b0e      	ldr	r3, [pc, #56]	; (80064f0 <HAL_RCC_ClockConfig+0x358>)
 80064b8:	699b      	ldr	r3, [r3, #24]
 80064ba:	f003 030f 	and.w	r3, r3, #15
 80064be:	4a0d      	ldr	r2, [pc, #52]	; (80064f4 <HAL_RCC_ClockConfig+0x35c>)
 80064c0:	5cd3      	ldrb	r3, [r2, r3]
 80064c2:	f003 031f 	and.w	r3, r3, #31
 80064c6:	693a      	ldr	r2, [r7, #16]
 80064c8:	fa22 f303 	lsr.w	r3, r2, r3
 80064cc:	4a0a      	ldr	r2, [pc, #40]	; (80064f8 <HAL_RCC_ClockConfig+0x360>)
 80064ce:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80064d0:	4a0a      	ldr	r2, [pc, #40]	; (80064fc <HAL_RCC_ClockConfig+0x364>)
 80064d2:	693b      	ldr	r3, [r7, #16]
 80064d4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80064d6:	4b0a      	ldr	r3, [pc, #40]	; (8006500 <HAL_RCC_ClockConfig+0x368>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4618      	mov	r0, r3
 80064dc:	f7fb fde2 	bl	80020a4 <HAL_InitTick>
 80064e0:	4603      	mov	r3, r0
 80064e2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80064e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80064e6:	4618      	mov	r0, r3
 80064e8:	3718      	adds	r7, #24
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bd80      	pop	{r7, pc}
 80064ee:	bf00      	nop
 80064f0:	58024400 	.word	0x58024400
 80064f4:	080117ac 	.word	0x080117ac
 80064f8:	24000004 	.word	0x24000004
 80064fc:	24000000 	.word	0x24000000
 8006500:	24000008 	.word	0x24000008

08006504 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006504:	b480      	push	{r7}
 8006506:	b089      	sub	sp, #36	; 0x24
 8006508:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800650a:	4bb3      	ldr	r3, [pc, #716]	; (80067d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800650c:	691b      	ldr	r3, [r3, #16]
 800650e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006512:	2b18      	cmp	r3, #24
 8006514:	f200 8155 	bhi.w	80067c2 <HAL_RCC_GetSysClockFreq+0x2be>
 8006518:	a201      	add	r2, pc, #4	; (adr r2, 8006520 <HAL_RCC_GetSysClockFreq+0x1c>)
 800651a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800651e:	bf00      	nop
 8006520:	08006585 	.word	0x08006585
 8006524:	080067c3 	.word	0x080067c3
 8006528:	080067c3 	.word	0x080067c3
 800652c:	080067c3 	.word	0x080067c3
 8006530:	080067c3 	.word	0x080067c3
 8006534:	080067c3 	.word	0x080067c3
 8006538:	080067c3 	.word	0x080067c3
 800653c:	080067c3 	.word	0x080067c3
 8006540:	080065ab 	.word	0x080065ab
 8006544:	080067c3 	.word	0x080067c3
 8006548:	080067c3 	.word	0x080067c3
 800654c:	080067c3 	.word	0x080067c3
 8006550:	080067c3 	.word	0x080067c3
 8006554:	080067c3 	.word	0x080067c3
 8006558:	080067c3 	.word	0x080067c3
 800655c:	080067c3 	.word	0x080067c3
 8006560:	080065b1 	.word	0x080065b1
 8006564:	080067c3 	.word	0x080067c3
 8006568:	080067c3 	.word	0x080067c3
 800656c:	080067c3 	.word	0x080067c3
 8006570:	080067c3 	.word	0x080067c3
 8006574:	080067c3 	.word	0x080067c3
 8006578:	080067c3 	.word	0x080067c3
 800657c:	080067c3 	.word	0x080067c3
 8006580:	080065b7 	.word	0x080065b7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006584:	4b94      	ldr	r3, [pc, #592]	; (80067d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f003 0320 	and.w	r3, r3, #32
 800658c:	2b00      	cmp	r3, #0
 800658e:	d009      	beq.n	80065a4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006590:	4b91      	ldr	r3, [pc, #580]	; (80067d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	08db      	lsrs	r3, r3, #3
 8006596:	f003 0303 	and.w	r3, r3, #3
 800659a:	4a90      	ldr	r2, [pc, #576]	; (80067dc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800659c:	fa22 f303 	lsr.w	r3, r2, r3
 80065a0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80065a2:	e111      	b.n	80067c8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80065a4:	4b8d      	ldr	r3, [pc, #564]	; (80067dc <HAL_RCC_GetSysClockFreq+0x2d8>)
 80065a6:	61bb      	str	r3, [r7, #24]
      break;
 80065a8:	e10e      	b.n	80067c8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80065aa:	4b8d      	ldr	r3, [pc, #564]	; (80067e0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80065ac:	61bb      	str	r3, [r7, #24]
      break;
 80065ae:	e10b      	b.n	80067c8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80065b0:	4b8c      	ldr	r3, [pc, #560]	; (80067e4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80065b2:	61bb      	str	r3, [r7, #24]
      break;
 80065b4:	e108      	b.n	80067c8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80065b6:	4b88      	ldr	r3, [pc, #544]	; (80067d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80065b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065ba:	f003 0303 	and.w	r3, r3, #3
 80065be:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80065c0:	4b85      	ldr	r3, [pc, #532]	; (80067d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80065c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065c4:	091b      	lsrs	r3, r3, #4
 80065c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80065ca:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80065cc:	4b82      	ldr	r3, [pc, #520]	; (80067d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80065ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065d0:	f003 0301 	and.w	r3, r3, #1
 80065d4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80065d6:	4b80      	ldr	r3, [pc, #512]	; (80067d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80065d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065da:	08db      	lsrs	r3, r3, #3
 80065dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80065e0:	68fa      	ldr	r2, [r7, #12]
 80065e2:	fb02 f303 	mul.w	r3, r2, r3
 80065e6:	ee07 3a90 	vmov	s15, r3
 80065ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065ee:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80065f2:	693b      	ldr	r3, [r7, #16]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	f000 80e1 	beq.w	80067bc <HAL_RCC_GetSysClockFreq+0x2b8>
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	2b02      	cmp	r3, #2
 80065fe:	f000 8083 	beq.w	8006708 <HAL_RCC_GetSysClockFreq+0x204>
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	2b02      	cmp	r3, #2
 8006606:	f200 80a1 	bhi.w	800674c <HAL_RCC_GetSysClockFreq+0x248>
 800660a:	697b      	ldr	r3, [r7, #20]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d003      	beq.n	8006618 <HAL_RCC_GetSysClockFreq+0x114>
 8006610:	697b      	ldr	r3, [r7, #20]
 8006612:	2b01      	cmp	r3, #1
 8006614:	d056      	beq.n	80066c4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006616:	e099      	b.n	800674c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006618:	4b6f      	ldr	r3, [pc, #444]	; (80067d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f003 0320 	and.w	r3, r3, #32
 8006620:	2b00      	cmp	r3, #0
 8006622:	d02d      	beq.n	8006680 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006624:	4b6c      	ldr	r3, [pc, #432]	; (80067d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	08db      	lsrs	r3, r3, #3
 800662a:	f003 0303 	and.w	r3, r3, #3
 800662e:	4a6b      	ldr	r2, [pc, #428]	; (80067dc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006630:	fa22 f303 	lsr.w	r3, r2, r3
 8006634:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	ee07 3a90 	vmov	s15, r3
 800663c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	ee07 3a90 	vmov	s15, r3
 8006646:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800664a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800664e:	4b62      	ldr	r3, [pc, #392]	; (80067d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006652:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006656:	ee07 3a90 	vmov	s15, r3
 800665a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800665e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006662:	eddf 5a61 	vldr	s11, [pc, #388]	; 80067e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006666:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800666a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800666e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006672:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006676:	ee67 7a27 	vmul.f32	s15, s14, s15
 800667a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800667e:	e087      	b.n	8006790 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006680:	693b      	ldr	r3, [r7, #16]
 8006682:	ee07 3a90 	vmov	s15, r3
 8006686:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800668a:	eddf 6a58 	vldr	s13, [pc, #352]	; 80067ec <HAL_RCC_GetSysClockFreq+0x2e8>
 800668e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006692:	4b51      	ldr	r3, [pc, #324]	; (80067d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006696:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800669a:	ee07 3a90 	vmov	s15, r3
 800669e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80066a6:	eddf 5a50 	vldr	s11, [pc, #320]	; 80067e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80066aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80066b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066be:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80066c2:	e065      	b.n	8006790 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80066c4:	693b      	ldr	r3, [r7, #16]
 80066c6:	ee07 3a90 	vmov	s15, r3
 80066ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066ce:	eddf 6a48 	vldr	s13, [pc, #288]	; 80067f0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80066d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066d6:	4b40      	ldr	r3, [pc, #256]	; (80067d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80066d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066de:	ee07 3a90 	vmov	s15, r3
 80066e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80066ea:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80067e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80066ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80066fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006702:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006706:	e043      	b.n	8006790 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006708:	693b      	ldr	r3, [r7, #16]
 800670a:	ee07 3a90 	vmov	s15, r3
 800670e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006712:	eddf 6a38 	vldr	s13, [pc, #224]	; 80067f4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006716:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800671a:	4b2f      	ldr	r3, [pc, #188]	; (80067d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800671c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800671e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006722:	ee07 3a90 	vmov	s15, r3
 8006726:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800672a:	ed97 6a02 	vldr	s12, [r7, #8]
 800672e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80067e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006732:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006736:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800673a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800673e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006742:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006746:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800674a:	e021      	b.n	8006790 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800674c:	693b      	ldr	r3, [r7, #16]
 800674e:	ee07 3a90 	vmov	s15, r3
 8006752:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006756:	eddf 6a26 	vldr	s13, [pc, #152]	; 80067f0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800675a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800675e:	4b1e      	ldr	r3, [pc, #120]	; (80067d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006762:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006766:	ee07 3a90 	vmov	s15, r3
 800676a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800676e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006772:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80067e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006776:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800677a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800677e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006782:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006786:	ee67 7a27 	vmul.f32	s15, s14, s15
 800678a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800678e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006790:	4b11      	ldr	r3, [pc, #68]	; (80067d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006794:	0a5b      	lsrs	r3, r3, #9
 8006796:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800679a:	3301      	adds	r3, #1
 800679c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	ee07 3a90 	vmov	s15, r3
 80067a4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80067a8:	edd7 6a07 	vldr	s13, [r7, #28]
 80067ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80067b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80067b4:	ee17 3a90 	vmov	r3, s15
 80067b8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80067ba:	e005      	b.n	80067c8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80067bc:	2300      	movs	r3, #0
 80067be:	61bb      	str	r3, [r7, #24]
      break;
 80067c0:	e002      	b.n	80067c8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80067c2:	4b07      	ldr	r3, [pc, #28]	; (80067e0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80067c4:	61bb      	str	r3, [r7, #24]
      break;
 80067c6:	bf00      	nop
  }

  return sysclockfreq;
 80067c8:	69bb      	ldr	r3, [r7, #24]
}
 80067ca:	4618      	mov	r0, r3
 80067cc:	3724      	adds	r7, #36	; 0x24
 80067ce:	46bd      	mov	sp, r7
 80067d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d4:	4770      	bx	lr
 80067d6:	bf00      	nop
 80067d8:	58024400 	.word	0x58024400
 80067dc:	03d09000 	.word	0x03d09000
 80067e0:	003d0900 	.word	0x003d0900
 80067e4:	017d7840 	.word	0x017d7840
 80067e8:	46000000 	.word	0x46000000
 80067ec:	4c742400 	.word	0x4c742400
 80067f0:	4a742400 	.word	0x4a742400
 80067f4:	4bbebc20 	.word	0x4bbebc20

080067f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b082      	sub	sp, #8
 80067fc:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80067fe:	f7ff fe81 	bl	8006504 <HAL_RCC_GetSysClockFreq>
 8006802:	4602      	mov	r2, r0
 8006804:	4b10      	ldr	r3, [pc, #64]	; (8006848 <HAL_RCC_GetHCLKFreq+0x50>)
 8006806:	699b      	ldr	r3, [r3, #24]
 8006808:	0a1b      	lsrs	r3, r3, #8
 800680a:	f003 030f 	and.w	r3, r3, #15
 800680e:	490f      	ldr	r1, [pc, #60]	; (800684c <HAL_RCC_GetHCLKFreq+0x54>)
 8006810:	5ccb      	ldrb	r3, [r1, r3]
 8006812:	f003 031f 	and.w	r3, r3, #31
 8006816:	fa22 f303 	lsr.w	r3, r2, r3
 800681a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800681c:	4b0a      	ldr	r3, [pc, #40]	; (8006848 <HAL_RCC_GetHCLKFreq+0x50>)
 800681e:	699b      	ldr	r3, [r3, #24]
 8006820:	f003 030f 	and.w	r3, r3, #15
 8006824:	4a09      	ldr	r2, [pc, #36]	; (800684c <HAL_RCC_GetHCLKFreq+0x54>)
 8006826:	5cd3      	ldrb	r3, [r2, r3]
 8006828:	f003 031f 	and.w	r3, r3, #31
 800682c:	687a      	ldr	r2, [r7, #4]
 800682e:	fa22 f303 	lsr.w	r3, r2, r3
 8006832:	4a07      	ldr	r2, [pc, #28]	; (8006850 <HAL_RCC_GetHCLKFreq+0x58>)
 8006834:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006836:	4a07      	ldr	r2, [pc, #28]	; (8006854 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800683c:	4b04      	ldr	r3, [pc, #16]	; (8006850 <HAL_RCC_GetHCLKFreq+0x58>)
 800683e:	681b      	ldr	r3, [r3, #0]
}
 8006840:	4618      	mov	r0, r3
 8006842:	3708      	adds	r7, #8
 8006844:	46bd      	mov	sp, r7
 8006846:	bd80      	pop	{r7, pc}
 8006848:	58024400 	.word	0x58024400
 800684c:	080117ac 	.word	0x080117ac
 8006850:	24000004 	.word	0x24000004
 8006854:	24000000 	.word	0x24000000

08006858 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800685c:	f7ff ffcc 	bl	80067f8 <HAL_RCC_GetHCLKFreq>
 8006860:	4602      	mov	r2, r0
 8006862:	4b06      	ldr	r3, [pc, #24]	; (800687c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006864:	69db      	ldr	r3, [r3, #28]
 8006866:	091b      	lsrs	r3, r3, #4
 8006868:	f003 0307 	and.w	r3, r3, #7
 800686c:	4904      	ldr	r1, [pc, #16]	; (8006880 <HAL_RCC_GetPCLK1Freq+0x28>)
 800686e:	5ccb      	ldrb	r3, [r1, r3]
 8006870:	f003 031f 	and.w	r3, r3, #31
 8006874:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006878:	4618      	mov	r0, r3
 800687a:	bd80      	pop	{r7, pc}
 800687c:	58024400 	.word	0x58024400
 8006880:	080117ac 	.word	0x080117ac

08006884 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006884:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006888:	b0ca      	sub	sp, #296	; 0x128
 800688a:	af00      	add	r7, sp, #0
 800688c:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006890:	2300      	movs	r3, #0
 8006892:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006896:	2300      	movs	r3, #0
 8006898:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800689c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068a4:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80068a8:	2500      	movs	r5, #0
 80068aa:	ea54 0305 	orrs.w	r3, r4, r5
 80068ae:	d049      	beq.n	8006944 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80068b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80068b6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80068ba:	d02f      	beq.n	800691c <HAL_RCCEx_PeriphCLKConfig+0x98>
 80068bc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80068c0:	d828      	bhi.n	8006914 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80068c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80068c6:	d01a      	beq.n	80068fe <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80068c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80068cc:	d822      	bhi.n	8006914 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d003      	beq.n	80068da <HAL_RCCEx_PeriphCLKConfig+0x56>
 80068d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80068d6:	d007      	beq.n	80068e8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80068d8:	e01c      	b.n	8006914 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80068da:	4bb8      	ldr	r3, [pc, #736]	; (8006bbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80068dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068de:	4ab7      	ldr	r2, [pc, #732]	; (8006bbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80068e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80068e4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80068e6:	e01a      	b.n	800691e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80068e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068ec:	3308      	adds	r3, #8
 80068ee:	2102      	movs	r1, #2
 80068f0:	4618      	mov	r0, r3
 80068f2:	f002 fb61 	bl	8008fb8 <RCCEx_PLL2_Config>
 80068f6:	4603      	mov	r3, r0
 80068f8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80068fc:	e00f      	b.n	800691e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80068fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006902:	3328      	adds	r3, #40	; 0x28
 8006904:	2102      	movs	r1, #2
 8006906:	4618      	mov	r0, r3
 8006908:	f002 fc08 	bl	800911c <RCCEx_PLL3_Config>
 800690c:	4603      	mov	r3, r0
 800690e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006912:	e004      	b.n	800691e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006914:	2301      	movs	r3, #1
 8006916:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800691a:	e000      	b.n	800691e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800691c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800691e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006922:	2b00      	cmp	r3, #0
 8006924:	d10a      	bne.n	800693c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006926:	4ba5      	ldr	r3, [pc, #660]	; (8006bbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006928:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800692a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800692e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006932:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006934:	4aa1      	ldr	r2, [pc, #644]	; (8006bbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006936:	430b      	orrs	r3, r1
 8006938:	6513      	str	r3, [r2, #80]	; 0x50
 800693a:	e003      	b.n	8006944 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800693c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006940:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006944:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800694c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8006950:	f04f 0900 	mov.w	r9, #0
 8006954:	ea58 0309 	orrs.w	r3, r8, r9
 8006958:	d047      	beq.n	80069ea <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800695a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800695e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006960:	2b04      	cmp	r3, #4
 8006962:	d82a      	bhi.n	80069ba <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006964:	a201      	add	r2, pc, #4	; (adr r2, 800696c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006966:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800696a:	bf00      	nop
 800696c:	08006981 	.word	0x08006981
 8006970:	0800698f 	.word	0x0800698f
 8006974:	080069a5 	.word	0x080069a5
 8006978:	080069c3 	.word	0x080069c3
 800697c:	080069c3 	.word	0x080069c3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006980:	4b8e      	ldr	r3, [pc, #568]	; (8006bbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006984:	4a8d      	ldr	r2, [pc, #564]	; (8006bbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006986:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800698a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800698c:	e01a      	b.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800698e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006992:	3308      	adds	r3, #8
 8006994:	2100      	movs	r1, #0
 8006996:	4618      	mov	r0, r3
 8006998:	f002 fb0e 	bl	8008fb8 <RCCEx_PLL2_Config>
 800699c:	4603      	mov	r3, r0
 800699e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80069a2:	e00f      	b.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80069a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069a8:	3328      	adds	r3, #40	; 0x28
 80069aa:	2100      	movs	r1, #0
 80069ac:	4618      	mov	r0, r3
 80069ae:	f002 fbb5 	bl	800911c <RCCEx_PLL3_Config>
 80069b2:	4603      	mov	r3, r0
 80069b4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80069b8:	e004      	b.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80069ba:	2301      	movs	r3, #1
 80069bc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80069c0:	e000      	b.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80069c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069c4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d10a      	bne.n	80069e2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80069cc:	4b7b      	ldr	r3, [pc, #492]	; (8006bbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80069ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069d0:	f023 0107 	bic.w	r1, r3, #7
 80069d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069da:	4a78      	ldr	r2, [pc, #480]	; (8006bbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80069dc:	430b      	orrs	r3, r1
 80069de:	6513      	str	r3, [r2, #80]	; 0x50
 80069e0:	e003      	b.n	80069ea <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80069e6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80069ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069f2:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80069f6:	f04f 0b00 	mov.w	fp, #0
 80069fa:	ea5a 030b 	orrs.w	r3, sl, fp
 80069fe:	d04c      	beq.n	8006a9a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8006a00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a0a:	d030      	beq.n	8006a6e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8006a0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a10:	d829      	bhi.n	8006a66 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006a12:	2bc0      	cmp	r3, #192	; 0xc0
 8006a14:	d02d      	beq.n	8006a72 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006a16:	2bc0      	cmp	r3, #192	; 0xc0
 8006a18:	d825      	bhi.n	8006a66 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006a1a:	2b80      	cmp	r3, #128	; 0x80
 8006a1c:	d018      	beq.n	8006a50 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8006a1e:	2b80      	cmp	r3, #128	; 0x80
 8006a20:	d821      	bhi.n	8006a66 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d002      	beq.n	8006a2c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8006a26:	2b40      	cmp	r3, #64	; 0x40
 8006a28:	d007      	beq.n	8006a3a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8006a2a:	e01c      	b.n	8006a66 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a2c:	4b63      	ldr	r3, [pc, #396]	; (8006bbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a30:	4a62      	ldr	r2, [pc, #392]	; (8006bbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006a32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a36:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006a38:	e01c      	b.n	8006a74 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006a3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a3e:	3308      	adds	r3, #8
 8006a40:	2100      	movs	r1, #0
 8006a42:	4618      	mov	r0, r3
 8006a44:	f002 fab8 	bl	8008fb8 <RCCEx_PLL2_Config>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006a4e:	e011      	b.n	8006a74 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006a50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a54:	3328      	adds	r3, #40	; 0x28
 8006a56:	2100      	movs	r1, #0
 8006a58:	4618      	mov	r0, r3
 8006a5a:	f002 fb5f 	bl	800911c <RCCEx_PLL3_Config>
 8006a5e:	4603      	mov	r3, r0
 8006a60:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006a64:	e006      	b.n	8006a74 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a66:	2301      	movs	r3, #1
 8006a68:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006a6c:	e002      	b.n	8006a74 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006a6e:	bf00      	nop
 8006a70:	e000      	b.n	8006a74 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006a72:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a74:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d10a      	bne.n	8006a92 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006a7c:	4b4f      	ldr	r3, [pc, #316]	; (8006bbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006a7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a80:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8006a84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a8a:	4a4c      	ldr	r2, [pc, #304]	; (8006bbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006a8c:	430b      	orrs	r3, r1
 8006a8e:	6513      	str	r3, [r2, #80]	; 0x50
 8006a90:	e003      	b.n	8006a9a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a92:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006a96:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006a9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aa2:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8006aa6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006aaa:	2300      	movs	r3, #0
 8006aac:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006ab0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8006ab4:	460b      	mov	r3, r1
 8006ab6:	4313      	orrs	r3, r2
 8006ab8:	d053      	beq.n	8006b62 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8006aba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006abe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006ac2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006ac6:	d035      	beq.n	8006b34 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8006ac8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006acc:	d82e      	bhi.n	8006b2c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006ace:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006ad2:	d031      	beq.n	8006b38 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8006ad4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006ad8:	d828      	bhi.n	8006b2c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006ada:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006ade:	d01a      	beq.n	8006b16 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8006ae0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006ae4:	d822      	bhi.n	8006b2c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d003      	beq.n	8006af2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8006aea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006aee:	d007      	beq.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8006af0:	e01c      	b.n	8006b2c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006af2:	4b32      	ldr	r3, [pc, #200]	; (8006bbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006af6:	4a31      	ldr	r2, [pc, #196]	; (8006bbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006af8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006afc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006afe:	e01c      	b.n	8006b3a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006b00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b04:	3308      	adds	r3, #8
 8006b06:	2100      	movs	r1, #0
 8006b08:	4618      	mov	r0, r3
 8006b0a:	f002 fa55 	bl	8008fb8 <RCCEx_PLL2_Config>
 8006b0e:	4603      	mov	r3, r0
 8006b10:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006b14:	e011      	b.n	8006b3a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006b16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b1a:	3328      	adds	r3, #40	; 0x28
 8006b1c:	2100      	movs	r1, #0
 8006b1e:	4618      	mov	r0, r3
 8006b20:	f002 fafc 	bl	800911c <RCCEx_PLL3_Config>
 8006b24:	4603      	mov	r3, r0
 8006b26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006b2a:	e006      	b.n	8006b3a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006b32:	e002      	b.n	8006b3a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006b34:	bf00      	nop
 8006b36:	e000      	b.n	8006b3a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006b38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b3a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d10b      	bne.n	8006b5a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006b42:	4b1e      	ldr	r3, [pc, #120]	; (8006bbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006b44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b46:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8006b4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b4e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006b52:	4a1a      	ldr	r2, [pc, #104]	; (8006bbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006b54:	430b      	orrs	r3, r1
 8006b56:	6593      	str	r3, [r2, #88]	; 0x58
 8006b58:	e003      	b.n	8006b62 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b5a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006b5e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006b62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b6a:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8006b6e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006b72:	2300      	movs	r3, #0
 8006b74:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006b78:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8006b7c:	460b      	mov	r3, r1
 8006b7e:	4313      	orrs	r3, r2
 8006b80:	d056      	beq.n	8006c30 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8006b82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b86:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006b8a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006b8e:	d038      	beq.n	8006c02 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8006b90:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006b94:	d831      	bhi.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006b96:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006b9a:	d034      	beq.n	8006c06 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8006b9c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006ba0:	d82b      	bhi.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006ba2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006ba6:	d01d      	beq.n	8006be4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8006ba8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006bac:	d825      	bhi.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d006      	beq.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8006bb2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006bb6:	d00a      	beq.n	8006bce <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006bb8:	e01f      	b.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006bba:	bf00      	nop
 8006bbc:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006bc0:	4ba2      	ldr	r3, [pc, #648]	; (8006e4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bc4:	4aa1      	ldr	r2, [pc, #644]	; (8006e4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006bc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006bca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006bcc:	e01c      	b.n	8006c08 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006bce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006bd2:	3308      	adds	r3, #8
 8006bd4:	2100      	movs	r1, #0
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	f002 f9ee 	bl	8008fb8 <RCCEx_PLL2_Config>
 8006bdc:	4603      	mov	r3, r0
 8006bde:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006be2:	e011      	b.n	8006c08 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006be4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006be8:	3328      	adds	r3, #40	; 0x28
 8006bea:	2100      	movs	r1, #0
 8006bec:	4618      	mov	r0, r3
 8006bee:	f002 fa95 	bl	800911c <RCCEx_PLL3_Config>
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006bf8:	e006      	b.n	8006c08 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006c00:	e002      	b.n	8006c08 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006c02:	bf00      	nop
 8006c04:	e000      	b.n	8006c08 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006c06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c08:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d10b      	bne.n	8006c28 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006c10:	4b8e      	ldr	r3, [pc, #568]	; (8006e4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006c12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c14:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8006c18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c1c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006c20:	4a8a      	ldr	r2, [pc, #552]	; (8006e4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006c22:	430b      	orrs	r3, r1
 8006c24:	6593      	str	r3, [r2, #88]	; 0x58
 8006c26:	e003      	b.n	8006c30 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c28:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006c2c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006c30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c38:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8006c3c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006c40:	2300      	movs	r3, #0
 8006c42:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006c46:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8006c4a:	460b      	mov	r3, r1
 8006c4c:	4313      	orrs	r3, r2
 8006c4e:	d03a      	beq.n	8006cc6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8006c50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c56:	2b30      	cmp	r3, #48	; 0x30
 8006c58:	d01f      	beq.n	8006c9a <HAL_RCCEx_PeriphCLKConfig+0x416>
 8006c5a:	2b30      	cmp	r3, #48	; 0x30
 8006c5c:	d819      	bhi.n	8006c92 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006c5e:	2b20      	cmp	r3, #32
 8006c60:	d00c      	beq.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8006c62:	2b20      	cmp	r3, #32
 8006c64:	d815      	bhi.n	8006c92 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d019      	beq.n	8006c9e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8006c6a:	2b10      	cmp	r3, #16
 8006c6c:	d111      	bne.n	8006c92 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c6e:	4b77      	ldr	r3, [pc, #476]	; (8006e4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c72:	4a76      	ldr	r2, [pc, #472]	; (8006e4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006c74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c78:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006c7a:	e011      	b.n	8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006c7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c80:	3308      	adds	r3, #8
 8006c82:	2102      	movs	r1, #2
 8006c84:	4618      	mov	r0, r3
 8006c86:	f002 f997 	bl	8008fb8 <RCCEx_PLL2_Config>
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006c90:	e006      	b.n	8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006c92:	2301      	movs	r3, #1
 8006c94:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006c98:	e002      	b.n	8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006c9a:	bf00      	nop
 8006c9c:	e000      	b.n	8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006c9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ca0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d10a      	bne.n	8006cbe <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006ca8:	4b68      	ldr	r3, [pc, #416]	; (8006e4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006caa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cac:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8006cb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006cb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cb6:	4a65      	ldr	r2, [pc, #404]	; (8006e4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006cb8:	430b      	orrs	r3, r1
 8006cba:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006cbc:	e003      	b.n	8006cc6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cbe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006cc2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006cc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cce:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8006cd2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006cdc:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8006ce0:	460b      	mov	r3, r1
 8006ce2:	4313      	orrs	r3, r2
 8006ce4:	d051      	beq.n	8006d8a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8006ce6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006cea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006cec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006cf0:	d035      	beq.n	8006d5e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8006cf2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006cf6:	d82e      	bhi.n	8006d56 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006cf8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006cfc:	d031      	beq.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8006cfe:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006d02:	d828      	bhi.n	8006d56 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006d04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d08:	d01a      	beq.n	8006d40 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8006d0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d0e:	d822      	bhi.n	8006d56 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d003      	beq.n	8006d1c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8006d14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d18:	d007      	beq.n	8006d2a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8006d1a:	e01c      	b.n	8006d56 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d1c:	4b4b      	ldr	r3, [pc, #300]	; (8006e4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d20:	4a4a      	ldr	r2, [pc, #296]	; (8006e4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006d22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d26:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006d28:	e01c      	b.n	8006d64 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006d2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d2e:	3308      	adds	r3, #8
 8006d30:	2100      	movs	r1, #0
 8006d32:	4618      	mov	r0, r3
 8006d34:	f002 f940 	bl	8008fb8 <RCCEx_PLL2_Config>
 8006d38:	4603      	mov	r3, r0
 8006d3a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006d3e:	e011      	b.n	8006d64 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006d40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d44:	3328      	adds	r3, #40	; 0x28
 8006d46:	2100      	movs	r1, #0
 8006d48:	4618      	mov	r0, r3
 8006d4a:	f002 f9e7 	bl	800911c <RCCEx_PLL3_Config>
 8006d4e:	4603      	mov	r3, r0
 8006d50:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006d54:	e006      	b.n	8006d64 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d56:	2301      	movs	r3, #1
 8006d58:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006d5c:	e002      	b.n	8006d64 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006d5e:	bf00      	nop
 8006d60:	e000      	b.n	8006d64 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006d62:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d64:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d10a      	bne.n	8006d82 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006d6c:	4b37      	ldr	r3, [pc, #220]	; (8006e4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006d6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d70:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8006d74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d7a:	4a34      	ldr	r2, [pc, #208]	; (8006e4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006d7c:	430b      	orrs	r3, r1
 8006d7e:	6513      	str	r3, [r2, #80]	; 0x50
 8006d80:	e003      	b.n	8006d8a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d82:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006d86:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006d8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d92:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8006d96:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006da0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8006da4:	460b      	mov	r3, r1
 8006da6:	4313      	orrs	r3, r2
 8006da8:	d056      	beq.n	8006e58 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8006daa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006dae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006db0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006db4:	d033      	beq.n	8006e1e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8006db6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006dba:	d82c      	bhi.n	8006e16 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006dbc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006dc0:	d02f      	beq.n	8006e22 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8006dc2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006dc6:	d826      	bhi.n	8006e16 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006dc8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006dcc:	d02b      	beq.n	8006e26 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8006dce:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006dd2:	d820      	bhi.n	8006e16 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006dd4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006dd8:	d012      	beq.n	8006e00 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8006dda:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006dde:	d81a      	bhi.n	8006e16 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d022      	beq.n	8006e2a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8006de4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006de8:	d115      	bne.n	8006e16 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006dea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006dee:	3308      	adds	r3, #8
 8006df0:	2101      	movs	r1, #1
 8006df2:	4618      	mov	r0, r3
 8006df4:	f002 f8e0 	bl	8008fb8 <RCCEx_PLL2_Config>
 8006df8:	4603      	mov	r3, r0
 8006dfa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006dfe:	e015      	b.n	8006e2c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006e00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e04:	3328      	adds	r3, #40	; 0x28
 8006e06:	2101      	movs	r1, #1
 8006e08:	4618      	mov	r0, r3
 8006e0a:	f002 f987 	bl	800911c <RCCEx_PLL3_Config>
 8006e0e:	4603      	mov	r3, r0
 8006e10:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006e14:	e00a      	b.n	8006e2c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e16:	2301      	movs	r3, #1
 8006e18:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006e1c:	e006      	b.n	8006e2c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006e1e:	bf00      	nop
 8006e20:	e004      	b.n	8006e2c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006e22:	bf00      	nop
 8006e24:	e002      	b.n	8006e2c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006e26:	bf00      	nop
 8006e28:	e000      	b.n	8006e2c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006e2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e2c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d10d      	bne.n	8006e50 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006e34:	4b05      	ldr	r3, [pc, #20]	; (8006e4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006e36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e38:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8006e3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e42:	4a02      	ldr	r2, [pc, #8]	; (8006e4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006e44:	430b      	orrs	r3, r1
 8006e46:	6513      	str	r3, [r2, #80]	; 0x50
 8006e48:	e006      	b.n	8006e58 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006e4a:	bf00      	nop
 8006e4c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e50:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006e54:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006e58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e60:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8006e64:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006e68:	2300      	movs	r3, #0
 8006e6a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006e6e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8006e72:	460b      	mov	r3, r1
 8006e74:	4313      	orrs	r3, r2
 8006e76:	d055      	beq.n	8006f24 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006e78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e7c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006e80:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006e84:	d033      	beq.n	8006eee <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8006e86:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006e8a:	d82c      	bhi.n	8006ee6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006e8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e90:	d02f      	beq.n	8006ef2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8006e92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e96:	d826      	bhi.n	8006ee6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006e98:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006e9c:	d02b      	beq.n	8006ef6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8006e9e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006ea2:	d820      	bhi.n	8006ee6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006ea4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ea8:	d012      	beq.n	8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8006eaa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006eae:	d81a      	bhi.n	8006ee6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d022      	beq.n	8006efa <HAL_RCCEx_PeriphCLKConfig+0x676>
 8006eb4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006eb8:	d115      	bne.n	8006ee6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006eba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ebe:	3308      	adds	r3, #8
 8006ec0:	2101      	movs	r1, #1
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	f002 f878 	bl	8008fb8 <RCCEx_PLL2_Config>
 8006ec8:	4603      	mov	r3, r0
 8006eca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006ece:	e015      	b.n	8006efc <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006ed0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ed4:	3328      	adds	r3, #40	; 0x28
 8006ed6:	2101      	movs	r1, #1
 8006ed8:	4618      	mov	r0, r3
 8006eda:	f002 f91f 	bl	800911c <RCCEx_PLL3_Config>
 8006ede:	4603      	mov	r3, r0
 8006ee0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006ee4:	e00a      	b.n	8006efc <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006eec:	e006      	b.n	8006efc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006eee:	bf00      	nop
 8006ef0:	e004      	b.n	8006efc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006ef2:	bf00      	nop
 8006ef4:	e002      	b.n	8006efc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006ef6:	bf00      	nop
 8006ef8:	e000      	b.n	8006efc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006efa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006efc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d10b      	bne.n	8006f1c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006f04:	4ba3      	ldr	r3, [pc, #652]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006f06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f08:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8006f0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f10:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006f14:	4a9f      	ldr	r2, [pc, #636]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006f16:	430b      	orrs	r3, r1
 8006f18:	6593      	str	r3, [r2, #88]	; 0x58
 8006f1a:	e003      	b.n	8006f24 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f1c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006f20:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006f24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f2c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8006f30:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006f34:	2300      	movs	r3, #0
 8006f36:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006f3a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006f3e:	460b      	mov	r3, r1
 8006f40:	4313      	orrs	r3, r2
 8006f42:	d037      	beq.n	8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006f44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f4e:	d00e      	beq.n	8006f6e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8006f50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f54:	d816      	bhi.n	8006f84 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d018      	beq.n	8006f8c <HAL_RCCEx_PeriphCLKConfig+0x708>
 8006f5a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006f5e:	d111      	bne.n	8006f84 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f60:	4b8c      	ldr	r3, [pc, #560]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f64:	4a8b      	ldr	r2, [pc, #556]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006f66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f6a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006f6c:	e00f      	b.n	8006f8e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006f6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f72:	3308      	adds	r3, #8
 8006f74:	2101      	movs	r1, #1
 8006f76:	4618      	mov	r0, r3
 8006f78:	f002 f81e 	bl	8008fb8 <RCCEx_PLL2_Config>
 8006f7c:	4603      	mov	r3, r0
 8006f7e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006f82:	e004      	b.n	8006f8e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f84:	2301      	movs	r3, #1
 8006f86:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006f8a:	e000      	b.n	8006f8e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8006f8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f8e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d10a      	bne.n	8006fac <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006f96:	4b7f      	ldr	r3, [pc, #508]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006f98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f9a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8006f9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006fa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fa4:	4a7b      	ldr	r2, [pc, #492]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006fa6:	430b      	orrs	r3, r1
 8006fa8:	6513      	str	r3, [r2, #80]	; 0x50
 8006faa:	e003      	b.n	8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006fb0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006fb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fbc:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8006fc0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006fca:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8006fce:	460b      	mov	r3, r1
 8006fd0:	4313      	orrs	r3, r2
 8006fd2:	d039      	beq.n	8007048 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006fd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006fd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006fda:	2b03      	cmp	r3, #3
 8006fdc:	d81c      	bhi.n	8007018 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8006fde:	a201      	add	r2, pc, #4	; (adr r2, 8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8006fe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fe4:	08007021 	.word	0x08007021
 8006fe8:	08006ff5 	.word	0x08006ff5
 8006fec:	08007003 	.word	0x08007003
 8006ff0:	08007021 	.word	0x08007021
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ff4:	4b67      	ldr	r3, [pc, #412]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ff8:	4a66      	ldr	r2, [pc, #408]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006ffa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ffe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007000:	e00f      	b.n	8007022 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007002:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007006:	3308      	adds	r3, #8
 8007008:	2102      	movs	r1, #2
 800700a:	4618      	mov	r0, r3
 800700c:	f001 ffd4 	bl	8008fb8 <RCCEx_PLL2_Config>
 8007010:	4603      	mov	r3, r0
 8007012:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007016:	e004      	b.n	8007022 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007018:	2301      	movs	r3, #1
 800701a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800701e:	e000      	b.n	8007022 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8007020:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007022:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007026:	2b00      	cmp	r3, #0
 8007028:	d10a      	bne.n	8007040 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800702a:	4b5a      	ldr	r3, [pc, #360]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800702c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800702e:	f023 0103 	bic.w	r1, r3, #3
 8007032:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007036:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007038:	4a56      	ldr	r2, [pc, #344]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800703a:	430b      	orrs	r3, r1
 800703c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800703e:	e003      	b.n	8007048 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007040:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007044:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007048:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800704c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007050:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8007054:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007058:	2300      	movs	r3, #0
 800705a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800705e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8007062:	460b      	mov	r3, r1
 8007064:	4313      	orrs	r3, r2
 8007066:	f000 809f 	beq.w	80071a8 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800706a:	4b4b      	ldr	r3, [pc, #300]	; (8007198 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	4a4a      	ldr	r2, [pc, #296]	; (8007198 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007070:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007074:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007076:	f7fb f85f 	bl	8002138 <HAL_GetTick>
 800707a:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800707e:	e00b      	b.n	8007098 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007080:	f7fb f85a 	bl	8002138 <HAL_GetTick>
 8007084:	4602      	mov	r2, r0
 8007086:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800708a:	1ad3      	subs	r3, r2, r3
 800708c:	2b64      	cmp	r3, #100	; 0x64
 800708e:	d903      	bls.n	8007098 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8007090:	2303      	movs	r3, #3
 8007092:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007096:	e005      	b.n	80070a4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007098:	4b3f      	ldr	r3, [pc, #252]	; (8007198 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d0ed      	beq.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80070a4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d179      	bne.n	80071a0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80070ac:	4b39      	ldr	r3, [pc, #228]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80070ae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80070b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80070b4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80070b8:	4053      	eors	r3, r2
 80070ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d015      	beq.n	80070ee <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80070c2:	4b34      	ldr	r3, [pc, #208]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80070c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070ca:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80070ce:	4b31      	ldr	r3, [pc, #196]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80070d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070d2:	4a30      	ldr	r2, [pc, #192]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80070d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80070d8:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80070da:	4b2e      	ldr	r3, [pc, #184]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80070dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070de:	4a2d      	ldr	r2, [pc, #180]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80070e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80070e4:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80070e6:	4a2b      	ldr	r2, [pc, #172]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80070e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80070ec:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80070ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80070f2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80070f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070fa:	d118      	bne.n	800712e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070fc:	f7fb f81c 	bl	8002138 <HAL_GetTick>
 8007100:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007104:	e00d      	b.n	8007122 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007106:	f7fb f817 	bl	8002138 <HAL_GetTick>
 800710a:	4602      	mov	r2, r0
 800710c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007110:	1ad2      	subs	r2, r2, r3
 8007112:	f241 3388 	movw	r3, #5000	; 0x1388
 8007116:	429a      	cmp	r2, r3
 8007118:	d903      	bls.n	8007122 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800711a:	2303      	movs	r3, #3
 800711c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8007120:	e005      	b.n	800712e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007122:	4b1c      	ldr	r3, [pc, #112]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007126:	f003 0302 	and.w	r3, r3, #2
 800712a:	2b00      	cmp	r3, #0
 800712c:	d0eb      	beq.n	8007106 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800712e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007132:	2b00      	cmp	r3, #0
 8007134:	d129      	bne.n	800718a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007136:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800713a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800713e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007142:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007146:	d10e      	bne.n	8007166 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8007148:	4b12      	ldr	r3, [pc, #72]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800714a:	691b      	ldr	r3, [r3, #16]
 800714c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8007150:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007154:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007158:	091a      	lsrs	r2, r3, #4
 800715a:	4b10      	ldr	r3, [pc, #64]	; (800719c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800715c:	4013      	ands	r3, r2
 800715e:	4a0d      	ldr	r2, [pc, #52]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007160:	430b      	orrs	r3, r1
 8007162:	6113      	str	r3, [r2, #16]
 8007164:	e005      	b.n	8007172 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8007166:	4b0b      	ldr	r3, [pc, #44]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007168:	691b      	ldr	r3, [r3, #16]
 800716a:	4a0a      	ldr	r2, [pc, #40]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800716c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007170:	6113      	str	r3, [r2, #16]
 8007172:	4b08      	ldr	r3, [pc, #32]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007174:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8007176:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800717a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800717e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007182:	4a04      	ldr	r2, [pc, #16]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007184:	430b      	orrs	r3, r1
 8007186:	6713      	str	r3, [r2, #112]	; 0x70
 8007188:	e00e      	b.n	80071a8 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800718a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800718e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8007192:	e009      	b.n	80071a8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8007194:	58024400 	.word	0x58024400
 8007198:	58024800 	.word	0x58024800
 800719c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071a0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80071a4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80071a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071b0:	f002 0301 	and.w	r3, r2, #1
 80071b4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80071b8:	2300      	movs	r3, #0
 80071ba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80071be:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80071c2:	460b      	mov	r3, r1
 80071c4:	4313      	orrs	r3, r2
 80071c6:	f000 8089 	beq.w	80072dc <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80071ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80071d0:	2b28      	cmp	r3, #40	; 0x28
 80071d2:	d86b      	bhi.n	80072ac <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80071d4:	a201      	add	r2, pc, #4	; (adr r2, 80071dc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80071d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071da:	bf00      	nop
 80071dc:	080072b5 	.word	0x080072b5
 80071e0:	080072ad 	.word	0x080072ad
 80071e4:	080072ad 	.word	0x080072ad
 80071e8:	080072ad 	.word	0x080072ad
 80071ec:	080072ad 	.word	0x080072ad
 80071f0:	080072ad 	.word	0x080072ad
 80071f4:	080072ad 	.word	0x080072ad
 80071f8:	080072ad 	.word	0x080072ad
 80071fc:	08007281 	.word	0x08007281
 8007200:	080072ad 	.word	0x080072ad
 8007204:	080072ad 	.word	0x080072ad
 8007208:	080072ad 	.word	0x080072ad
 800720c:	080072ad 	.word	0x080072ad
 8007210:	080072ad 	.word	0x080072ad
 8007214:	080072ad 	.word	0x080072ad
 8007218:	080072ad 	.word	0x080072ad
 800721c:	08007297 	.word	0x08007297
 8007220:	080072ad 	.word	0x080072ad
 8007224:	080072ad 	.word	0x080072ad
 8007228:	080072ad 	.word	0x080072ad
 800722c:	080072ad 	.word	0x080072ad
 8007230:	080072ad 	.word	0x080072ad
 8007234:	080072ad 	.word	0x080072ad
 8007238:	080072ad 	.word	0x080072ad
 800723c:	080072b5 	.word	0x080072b5
 8007240:	080072ad 	.word	0x080072ad
 8007244:	080072ad 	.word	0x080072ad
 8007248:	080072ad 	.word	0x080072ad
 800724c:	080072ad 	.word	0x080072ad
 8007250:	080072ad 	.word	0x080072ad
 8007254:	080072ad 	.word	0x080072ad
 8007258:	080072ad 	.word	0x080072ad
 800725c:	080072b5 	.word	0x080072b5
 8007260:	080072ad 	.word	0x080072ad
 8007264:	080072ad 	.word	0x080072ad
 8007268:	080072ad 	.word	0x080072ad
 800726c:	080072ad 	.word	0x080072ad
 8007270:	080072ad 	.word	0x080072ad
 8007274:	080072ad 	.word	0x080072ad
 8007278:	080072ad 	.word	0x080072ad
 800727c:	080072b5 	.word	0x080072b5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007280:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007284:	3308      	adds	r3, #8
 8007286:	2101      	movs	r1, #1
 8007288:	4618      	mov	r0, r3
 800728a:	f001 fe95 	bl	8008fb8 <RCCEx_PLL2_Config>
 800728e:	4603      	mov	r3, r0
 8007290:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007294:	e00f      	b.n	80072b6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007296:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800729a:	3328      	adds	r3, #40	; 0x28
 800729c:	2101      	movs	r1, #1
 800729e:	4618      	mov	r0, r3
 80072a0:	f001 ff3c 	bl	800911c <RCCEx_PLL3_Config>
 80072a4:	4603      	mov	r3, r0
 80072a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80072aa:	e004      	b.n	80072b6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80072ac:	2301      	movs	r3, #1
 80072ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80072b2:	e000      	b.n	80072b6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80072b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80072b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d10a      	bne.n	80072d4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80072be:	4bbf      	ldr	r3, [pc, #764]	; (80075bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80072c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072c2:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80072c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80072cc:	4abb      	ldr	r2, [pc, #748]	; (80075bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80072ce:	430b      	orrs	r3, r1
 80072d0:	6553      	str	r3, [r2, #84]	; 0x54
 80072d2:	e003      	b.n	80072dc <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072d4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80072d8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80072dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072e4:	f002 0302 	and.w	r3, r2, #2
 80072e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80072ec:	2300      	movs	r3, #0
 80072ee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80072f2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80072f6:	460b      	mov	r3, r1
 80072f8:	4313      	orrs	r3, r2
 80072fa:	d041      	beq.n	8007380 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80072fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007300:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007302:	2b05      	cmp	r3, #5
 8007304:	d824      	bhi.n	8007350 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8007306:	a201      	add	r2, pc, #4	; (adr r2, 800730c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8007308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800730c:	08007359 	.word	0x08007359
 8007310:	08007325 	.word	0x08007325
 8007314:	0800733b 	.word	0x0800733b
 8007318:	08007359 	.word	0x08007359
 800731c:	08007359 	.word	0x08007359
 8007320:	08007359 	.word	0x08007359
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007324:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007328:	3308      	adds	r3, #8
 800732a:	2101      	movs	r1, #1
 800732c:	4618      	mov	r0, r3
 800732e:	f001 fe43 	bl	8008fb8 <RCCEx_PLL2_Config>
 8007332:	4603      	mov	r3, r0
 8007334:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007338:	e00f      	b.n	800735a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800733a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800733e:	3328      	adds	r3, #40	; 0x28
 8007340:	2101      	movs	r1, #1
 8007342:	4618      	mov	r0, r3
 8007344:	f001 feea 	bl	800911c <RCCEx_PLL3_Config>
 8007348:	4603      	mov	r3, r0
 800734a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800734e:	e004      	b.n	800735a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007350:	2301      	movs	r3, #1
 8007352:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007356:	e000      	b.n	800735a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8007358:	bf00      	nop
    }

    if (ret == HAL_OK)
 800735a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800735e:	2b00      	cmp	r3, #0
 8007360:	d10a      	bne.n	8007378 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007362:	4b96      	ldr	r3, [pc, #600]	; (80075bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007364:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007366:	f023 0107 	bic.w	r1, r3, #7
 800736a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800736e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007370:	4a92      	ldr	r2, [pc, #584]	; (80075bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007372:	430b      	orrs	r3, r1
 8007374:	6553      	str	r3, [r2, #84]	; 0x54
 8007376:	e003      	b.n	8007380 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007378:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800737c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007380:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007388:	f002 0304 	and.w	r3, r2, #4
 800738c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007390:	2300      	movs	r3, #0
 8007392:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007396:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800739a:	460b      	mov	r3, r1
 800739c:	4313      	orrs	r3, r2
 800739e:	d044      	beq.n	800742a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80073a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80073a8:	2b05      	cmp	r3, #5
 80073aa:	d825      	bhi.n	80073f8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80073ac:	a201      	add	r2, pc, #4	; (adr r2, 80073b4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80073ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073b2:	bf00      	nop
 80073b4:	08007401 	.word	0x08007401
 80073b8:	080073cd 	.word	0x080073cd
 80073bc:	080073e3 	.word	0x080073e3
 80073c0:	08007401 	.word	0x08007401
 80073c4:	08007401 	.word	0x08007401
 80073c8:	08007401 	.word	0x08007401
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80073cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073d0:	3308      	adds	r3, #8
 80073d2:	2101      	movs	r1, #1
 80073d4:	4618      	mov	r0, r3
 80073d6:	f001 fdef 	bl	8008fb8 <RCCEx_PLL2_Config>
 80073da:	4603      	mov	r3, r0
 80073dc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80073e0:	e00f      	b.n	8007402 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80073e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073e6:	3328      	adds	r3, #40	; 0x28
 80073e8:	2101      	movs	r1, #1
 80073ea:	4618      	mov	r0, r3
 80073ec:	f001 fe96 	bl	800911c <RCCEx_PLL3_Config>
 80073f0:	4603      	mov	r3, r0
 80073f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80073f6:	e004      	b.n	8007402 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80073f8:	2301      	movs	r3, #1
 80073fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80073fe:	e000      	b.n	8007402 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8007400:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007402:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007406:	2b00      	cmp	r3, #0
 8007408:	d10b      	bne.n	8007422 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800740a:	4b6c      	ldr	r3, [pc, #432]	; (80075bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800740c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800740e:	f023 0107 	bic.w	r1, r3, #7
 8007412:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007416:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800741a:	4a68      	ldr	r2, [pc, #416]	; (80075bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800741c:	430b      	orrs	r3, r1
 800741e:	6593      	str	r3, [r2, #88]	; 0x58
 8007420:	e003      	b.n	800742a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007422:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007426:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800742a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800742e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007432:	f002 0320 	and.w	r3, r2, #32
 8007436:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800743a:	2300      	movs	r3, #0
 800743c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007440:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007444:	460b      	mov	r3, r1
 8007446:	4313      	orrs	r3, r2
 8007448:	d055      	beq.n	80074f6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800744a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800744e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007452:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007456:	d033      	beq.n	80074c0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8007458:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800745c:	d82c      	bhi.n	80074b8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800745e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007462:	d02f      	beq.n	80074c4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8007464:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007468:	d826      	bhi.n	80074b8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800746a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800746e:	d02b      	beq.n	80074c8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8007470:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007474:	d820      	bhi.n	80074b8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007476:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800747a:	d012      	beq.n	80074a2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800747c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007480:	d81a      	bhi.n	80074b8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007482:	2b00      	cmp	r3, #0
 8007484:	d022      	beq.n	80074cc <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8007486:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800748a:	d115      	bne.n	80074b8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800748c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007490:	3308      	adds	r3, #8
 8007492:	2100      	movs	r1, #0
 8007494:	4618      	mov	r0, r3
 8007496:	f001 fd8f 	bl	8008fb8 <RCCEx_PLL2_Config>
 800749a:	4603      	mov	r3, r0
 800749c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80074a0:	e015      	b.n	80074ce <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80074a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074a6:	3328      	adds	r3, #40	; 0x28
 80074a8:	2102      	movs	r1, #2
 80074aa:	4618      	mov	r0, r3
 80074ac:	f001 fe36 	bl	800911c <RCCEx_PLL3_Config>
 80074b0:	4603      	mov	r3, r0
 80074b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80074b6:	e00a      	b.n	80074ce <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80074b8:	2301      	movs	r3, #1
 80074ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80074be:	e006      	b.n	80074ce <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80074c0:	bf00      	nop
 80074c2:	e004      	b.n	80074ce <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80074c4:	bf00      	nop
 80074c6:	e002      	b.n	80074ce <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80074c8:	bf00      	nop
 80074ca:	e000      	b.n	80074ce <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80074cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80074ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d10b      	bne.n	80074ee <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80074d6:	4b39      	ldr	r3, [pc, #228]	; (80075bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80074d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074da:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80074de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074e6:	4a35      	ldr	r2, [pc, #212]	; (80075bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80074e8:	430b      	orrs	r3, r1
 80074ea:	6553      	str	r3, [r2, #84]	; 0x54
 80074ec:	e003      	b.n	80074f6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80074f2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80074f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074fe:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8007502:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007506:	2300      	movs	r3, #0
 8007508:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800750c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8007510:	460b      	mov	r3, r1
 8007512:	4313      	orrs	r3, r2
 8007514:	d058      	beq.n	80075c8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007516:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800751a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800751e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007522:	d033      	beq.n	800758c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8007524:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007528:	d82c      	bhi.n	8007584 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800752a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800752e:	d02f      	beq.n	8007590 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8007530:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007534:	d826      	bhi.n	8007584 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007536:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800753a:	d02b      	beq.n	8007594 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800753c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007540:	d820      	bhi.n	8007584 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007542:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007546:	d012      	beq.n	800756e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8007548:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800754c:	d81a      	bhi.n	8007584 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800754e:	2b00      	cmp	r3, #0
 8007550:	d022      	beq.n	8007598 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8007552:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007556:	d115      	bne.n	8007584 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007558:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800755c:	3308      	adds	r3, #8
 800755e:	2100      	movs	r1, #0
 8007560:	4618      	mov	r0, r3
 8007562:	f001 fd29 	bl	8008fb8 <RCCEx_PLL2_Config>
 8007566:	4603      	mov	r3, r0
 8007568:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800756c:	e015      	b.n	800759a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800756e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007572:	3328      	adds	r3, #40	; 0x28
 8007574:	2102      	movs	r1, #2
 8007576:	4618      	mov	r0, r3
 8007578:	f001 fdd0 	bl	800911c <RCCEx_PLL3_Config>
 800757c:	4603      	mov	r3, r0
 800757e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007582:	e00a      	b.n	800759a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007584:	2301      	movs	r3, #1
 8007586:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800758a:	e006      	b.n	800759a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800758c:	bf00      	nop
 800758e:	e004      	b.n	800759a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007590:	bf00      	nop
 8007592:	e002      	b.n	800759a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007594:	bf00      	nop
 8007596:	e000      	b.n	800759a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007598:	bf00      	nop
    }

    if (ret == HAL_OK)
 800759a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d10e      	bne.n	80075c0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80075a2:	4b06      	ldr	r3, [pc, #24]	; (80075bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80075a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075a6:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80075aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80075b2:	4a02      	ldr	r2, [pc, #8]	; (80075bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80075b4:	430b      	orrs	r3, r1
 80075b6:	6593      	str	r3, [r2, #88]	; 0x58
 80075b8:	e006      	b.n	80075c8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80075ba:	bf00      	nop
 80075bc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075c0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80075c4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80075c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075d0:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80075d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80075d8:	2300      	movs	r3, #0
 80075da:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80075de:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80075e2:	460b      	mov	r3, r1
 80075e4:	4313      	orrs	r3, r2
 80075e6:	d055      	beq.n	8007694 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80075e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075ec:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80075f0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80075f4:	d033      	beq.n	800765e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80075f6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80075fa:	d82c      	bhi.n	8007656 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80075fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007600:	d02f      	beq.n	8007662 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8007602:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007606:	d826      	bhi.n	8007656 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007608:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800760c:	d02b      	beq.n	8007666 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800760e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007612:	d820      	bhi.n	8007656 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007614:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007618:	d012      	beq.n	8007640 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800761a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800761e:	d81a      	bhi.n	8007656 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007620:	2b00      	cmp	r3, #0
 8007622:	d022      	beq.n	800766a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8007624:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007628:	d115      	bne.n	8007656 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800762a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800762e:	3308      	adds	r3, #8
 8007630:	2100      	movs	r1, #0
 8007632:	4618      	mov	r0, r3
 8007634:	f001 fcc0 	bl	8008fb8 <RCCEx_PLL2_Config>
 8007638:	4603      	mov	r3, r0
 800763a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800763e:	e015      	b.n	800766c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007640:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007644:	3328      	adds	r3, #40	; 0x28
 8007646:	2102      	movs	r1, #2
 8007648:	4618      	mov	r0, r3
 800764a:	f001 fd67 	bl	800911c <RCCEx_PLL3_Config>
 800764e:	4603      	mov	r3, r0
 8007650:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007654:	e00a      	b.n	800766c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007656:	2301      	movs	r3, #1
 8007658:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800765c:	e006      	b.n	800766c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800765e:	bf00      	nop
 8007660:	e004      	b.n	800766c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007662:	bf00      	nop
 8007664:	e002      	b.n	800766c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007666:	bf00      	nop
 8007668:	e000      	b.n	800766c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800766a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800766c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007670:	2b00      	cmp	r3, #0
 8007672:	d10b      	bne.n	800768c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007674:	4ba1      	ldr	r3, [pc, #644]	; (80078fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007676:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007678:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800767c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007680:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007684:	4a9d      	ldr	r2, [pc, #628]	; (80078fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007686:	430b      	orrs	r3, r1
 8007688:	6593      	str	r3, [r2, #88]	; 0x58
 800768a:	e003      	b.n	8007694 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800768c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007690:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007694:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800769c:	f002 0308 	and.w	r3, r2, #8
 80076a0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80076a4:	2300      	movs	r3, #0
 80076a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80076aa:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80076ae:	460b      	mov	r3, r1
 80076b0:	4313      	orrs	r3, r2
 80076b2:	d01e      	beq.n	80076f2 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80076b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80076bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076c0:	d10c      	bne.n	80076dc <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80076c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076c6:	3328      	adds	r3, #40	; 0x28
 80076c8:	2102      	movs	r1, #2
 80076ca:	4618      	mov	r0, r3
 80076cc:	f001 fd26 	bl	800911c <RCCEx_PLL3_Config>
 80076d0:	4603      	mov	r3, r0
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d002      	beq.n	80076dc <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80076d6:	2301      	movs	r3, #1
 80076d8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80076dc:	4b87      	ldr	r3, [pc, #540]	; (80078fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80076de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076e0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80076e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80076ec:	4a83      	ldr	r2, [pc, #524]	; (80078fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80076ee:	430b      	orrs	r3, r1
 80076f0:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80076f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076fa:	f002 0310 	and.w	r3, r2, #16
 80076fe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007702:	2300      	movs	r3, #0
 8007704:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007708:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800770c:	460b      	mov	r3, r1
 800770e:	4313      	orrs	r3, r2
 8007710:	d01e      	beq.n	8007750 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8007712:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007716:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800771a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800771e:	d10c      	bne.n	800773a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007720:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007724:	3328      	adds	r3, #40	; 0x28
 8007726:	2102      	movs	r1, #2
 8007728:	4618      	mov	r0, r3
 800772a:	f001 fcf7 	bl	800911c <RCCEx_PLL3_Config>
 800772e:	4603      	mov	r3, r0
 8007730:	2b00      	cmp	r3, #0
 8007732:	d002      	beq.n	800773a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8007734:	2301      	movs	r3, #1
 8007736:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800773a:	4b70      	ldr	r3, [pc, #448]	; (80078fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800773c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800773e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007742:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007746:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800774a:	4a6c      	ldr	r2, [pc, #432]	; (80078fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800774c:	430b      	orrs	r3, r1
 800774e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007750:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007758:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800775c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007760:	2300      	movs	r3, #0
 8007762:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007766:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800776a:	460b      	mov	r3, r1
 800776c:	4313      	orrs	r3, r2
 800776e:	d03e      	beq.n	80077ee <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007770:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007774:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007778:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800777c:	d022      	beq.n	80077c4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800777e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007782:	d81b      	bhi.n	80077bc <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8007784:	2b00      	cmp	r3, #0
 8007786:	d003      	beq.n	8007790 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8007788:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800778c:	d00b      	beq.n	80077a6 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800778e:	e015      	b.n	80077bc <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007790:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007794:	3308      	adds	r3, #8
 8007796:	2100      	movs	r1, #0
 8007798:	4618      	mov	r0, r3
 800779a:	f001 fc0d 	bl	8008fb8 <RCCEx_PLL2_Config>
 800779e:	4603      	mov	r3, r0
 80077a0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80077a4:	e00f      	b.n	80077c6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80077a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077aa:	3328      	adds	r3, #40	; 0x28
 80077ac:	2102      	movs	r1, #2
 80077ae:	4618      	mov	r0, r3
 80077b0:	f001 fcb4 	bl	800911c <RCCEx_PLL3_Config>
 80077b4:	4603      	mov	r3, r0
 80077b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80077ba:	e004      	b.n	80077c6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80077bc:	2301      	movs	r3, #1
 80077be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80077c2:	e000      	b.n	80077c6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80077c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80077c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d10b      	bne.n	80077e6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80077ce:	4b4b      	ldr	r3, [pc, #300]	; (80078fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80077d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077d2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80077d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077da:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80077de:	4a47      	ldr	r2, [pc, #284]	; (80078fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80077e0:	430b      	orrs	r3, r1
 80077e2:	6593      	str	r3, [r2, #88]	; 0x58
 80077e4:	e003      	b.n	80077ee <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80077ea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80077ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077f6:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80077fa:	67bb      	str	r3, [r7, #120]	; 0x78
 80077fc:	2300      	movs	r3, #0
 80077fe:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007800:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8007804:	460b      	mov	r3, r1
 8007806:	4313      	orrs	r3, r2
 8007808:	d03b      	beq.n	8007882 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800780a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800780e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007812:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007816:	d01f      	beq.n	8007858 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8007818:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800781c:	d818      	bhi.n	8007850 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800781e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007822:	d003      	beq.n	800782c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8007824:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007828:	d007      	beq.n	800783a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800782a:	e011      	b.n	8007850 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800782c:	4b33      	ldr	r3, [pc, #204]	; (80078fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800782e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007830:	4a32      	ldr	r2, [pc, #200]	; (80078fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007832:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007836:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007838:	e00f      	b.n	800785a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800783a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800783e:	3328      	adds	r3, #40	; 0x28
 8007840:	2101      	movs	r1, #1
 8007842:	4618      	mov	r0, r3
 8007844:	f001 fc6a 	bl	800911c <RCCEx_PLL3_Config>
 8007848:	4603      	mov	r3, r0
 800784a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800784e:	e004      	b.n	800785a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007850:	2301      	movs	r3, #1
 8007852:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007856:	e000      	b.n	800785a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8007858:	bf00      	nop
    }

    if (ret == HAL_OK)
 800785a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800785e:	2b00      	cmp	r3, #0
 8007860:	d10b      	bne.n	800787a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007862:	4b26      	ldr	r3, [pc, #152]	; (80078fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007864:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007866:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800786a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800786e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007872:	4a22      	ldr	r2, [pc, #136]	; (80078fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007874:	430b      	orrs	r3, r1
 8007876:	6553      	str	r3, [r2, #84]	; 0x54
 8007878:	e003      	b.n	8007882 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800787a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800787e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007882:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800788a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800788e:	673b      	str	r3, [r7, #112]	; 0x70
 8007890:	2300      	movs	r3, #0
 8007892:	677b      	str	r3, [r7, #116]	; 0x74
 8007894:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8007898:	460b      	mov	r3, r1
 800789a:	4313      	orrs	r3, r2
 800789c:	d034      	beq.n	8007908 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800789e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d003      	beq.n	80078b0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80078a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80078ac:	d007      	beq.n	80078be <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80078ae:	e011      	b.n	80078d4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80078b0:	4b12      	ldr	r3, [pc, #72]	; (80078fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80078b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078b4:	4a11      	ldr	r2, [pc, #68]	; (80078fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80078b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80078ba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80078bc:	e00e      	b.n	80078dc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80078be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078c2:	3308      	adds	r3, #8
 80078c4:	2102      	movs	r1, #2
 80078c6:	4618      	mov	r0, r3
 80078c8:	f001 fb76 	bl	8008fb8 <RCCEx_PLL2_Config>
 80078cc:	4603      	mov	r3, r0
 80078ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80078d2:	e003      	b.n	80078dc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80078d4:	2301      	movs	r3, #1
 80078d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80078da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80078dc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d10d      	bne.n	8007900 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80078e4:	4b05      	ldr	r3, [pc, #20]	; (80078fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80078e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078e8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80078ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078f2:	4a02      	ldr	r2, [pc, #8]	; (80078fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80078f4:	430b      	orrs	r3, r1
 80078f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80078f8:	e006      	b.n	8007908 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80078fa:	bf00      	nop
 80078fc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007900:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007904:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007908:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800790c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007910:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8007914:	66bb      	str	r3, [r7, #104]	; 0x68
 8007916:	2300      	movs	r3, #0
 8007918:	66fb      	str	r3, [r7, #108]	; 0x6c
 800791a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800791e:	460b      	mov	r3, r1
 8007920:	4313      	orrs	r3, r2
 8007922:	d00c      	beq.n	800793e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007924:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007928:	3328      	adds	r3, #40	; 0x28
 800792a:	2102      	movs	r1, #2
 800792c:	4618      	mov	r0, r3
 800792e:	f001 fbf5 	bl	800911c <RCCEx_PLL3_Config>
 8007932:	4603      	mov	r3, r0
 8007934:	2b00      	cmp	r3, #0
 8007936:	d002      	beq.n	800793e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8007938:	2301      	movs	r3, #1
 800793a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800793e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007946:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800794a:	663b      	str	r3, [r7, #96]	; 0x60
 800794c:	2300      	movs	r3, #0
 800794e:	667b      	str	r3, [r7, #100]	; 0x64
 8007950:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8007954:	460b      	mov	r3, r1
 8007956:	4313      	orrs	r3, r2
 8007958:	d038      	beq.n	80079cc <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800795a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800795e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007962:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007966:	d018      	beq.n	800799a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8007968:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800796c:	d811      	bhi.n	8007992 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800796e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007972:	d014      	beq.n	800799e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8007974:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007978:	d80b      	bhi.n	8007992 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800797a:	2b00      	cmp	r3, #0
 800797c:	d011      	beq.n	80079a2 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800797e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007982:	d106      	bne.n	8007992 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007984:	4bc3      	ldr	r3, [pc, #780]	; (8007c94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007988:	4ac2      	ldr	r2, [pc, #776]	; (8007c94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800798a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800798e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007990:	e008      	b.n	80079a4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007992:	2301      	movs	r3, #1
 8007994:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007998:	e004      	b.n	80079a4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800799a:	bf00      	nop
 800799c:	e002      	b.n	80079a4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800799e:	bf00      	nop
 80079a0:	e000      	b.n	80079a4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80079a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80079a4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d10b      	bne.n	80079c4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80079ac:	4bb9      	ldr	r3, [pc, #740]	; (8007c94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80079ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079b0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80079b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80079bc:	4ab5      	ldr	r2, [pc, #724]	; (8007c94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80079be:	430b      	orrs	r3, r1
 80079c0:	6553      	str	r3, [r2, #84]	; 0x54
 80079c2:	e003      	b.n	80079cc <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079c4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80079c8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80079cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079d4:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80079d8:	65bb      	str	r3, [r7, #88]	; 0x58
 80079da:	2300      	movs	r3, #0
 80079dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80079de:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80079e2:	460b      	mov	r3, r1
 80079e4:	4313      	orrs	r3, r2
 80079e6:	d009      	beq.n	80079fc <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80079e8:	4baa      	ldr	r3, [pc, #680]	; (8007c94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80079ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079ec:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80079f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079f6:	4aa7      	ldr	r2, [pc, #668]	; (8007c94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80079f8:	430b      	orrs	r3, r1
 80079fa:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80079fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a04:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8007a08:	653b      	str	r3, [r7, #80]	; 0x50
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	657b      	str	r3, [r7, #84]	; 0x54
 8007a0e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8007a12:	460b      	mov	r3, r1
 8007a14:	4313      	orrs	r3, r2
 8007a16:	d00a      	beq.n	8007a2e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007a18:	4b9e      	ldr	r3, [pc, #632]	; (8007c94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007a1a:	691b      	ldr	r3, [r3, #16]
 8007a1c:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8007a20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a24:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007a28:	4a9a      	ldr	r2, [pc, #616]	; (8007c94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007a2a:	430b      	orrs	r3, r1
 8007a2c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007a2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a36:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8007a3a:	64bb      	str	r3, [r7, #72]	; 0x48
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a40:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8007a44:	460b      	mov	r3, r1
 8007a46:	4313      	orrs	r3, r2
 8007a48:	d009      	beq.n	8007a5e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007a4a:	4b92      	ldr	r3, [pc, #584]	; (8007c94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007a4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a4e:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8007a52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a58:	4a8e      	ldr	r2, [pc, #568]	; (8007c94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007a5a:	430b      	orrs	r3, r1
 8007a5c:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007a5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a66:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8007a6a:	643b      	str	r3, [r7, #64]	; 0x40
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	647b      	str	r3, [r7, #68]	; 0x44
 8007a70:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8007a74:	460b      	mov	r3, r1
 8007a76:	4313      	orrs	r3, r2
 8007a78:	d00e      	beq.n	8007a98 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007a7a:	4b86      	ldr	r3, [pc, #536]	; (8007c94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007a7c:	691b      	ldr	r3, [r3, #16]
 8007a7e:	4a85      	ldr	r2, [pc, #532]	; (8007c94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007a80:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007a84:	6113      	str	r3, [r2, #16]
 8007a86:	4b83      	ldr	r3, [pc, #524]	; (8007c94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007a88:	6919      	ldr	r1, [r3, #16]
 8007a8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a8e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007a92:	4a80      	ldr	r2, [pc, #512]	; (8007c94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007a94:	430b      	orrs	r3, r1
 8007a96:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007a98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aa0:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8007aa4:	63bb      	str	r3, [r7, #56]	; 0x38
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007aaa:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8007aae:	460b      	mov	r3, r1
 8007ab0:	4313      	orrs	r3, r2
 8007ab2:	d009      	beq.n	8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007ab4:	4b77      	ldr	r3, [pc, #476]	; (8007c94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007ab6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ab8:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8007abc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ac0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ac2:	4a74      	ldr	r2, [pc, #464]	; (8007c94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007ac4:	430b      	orrs	r3, r1
 8007ac6:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007ac8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ad0:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8007ad4:	633b      	str	r3, [r7, #48]	; 0x30
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	637b      	str	r3, [r7, #52]	; 0x34
 8007ada:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8007ade:	460b      	mov	r3, r1
 8007ae0:	4313      	orrs	r3, r2
 8007ae2:	d00a      	beq.n	8007afa <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007ae4:	4b6b      	ldr	r3, [pc, #428]	; (8007c94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007ae6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ae8:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8007aec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007af0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007af4:	4a67      	ldr	r2, [pc, #412]	; (8007c94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007af6:	430b      	orrs	r3, r1
 8007af8:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007afa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b02:	2100      	movs	r1, #0
 8007b04:	62b9      	str	r1, [r7, #40]	; 0x28
 8007b06:	f003 0301 	and.w	r3, r3, #1
 8007b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b0c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8007b10:	460b      	mov	r3, r1
 8007b12:	4313      	orrs	r3, r2
 8007b14:	d011      	beq.n	8007b3a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007b16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b1a:	3308      	adds	r3, #8
 8007b1c:	2100      	movs	r1, #0
 8007b1e:	4618      	mov	r0, r3
 8007b20:	f001 fa4a 	bl	8008fb8 <RCCEx_PLL2_Config>
 8007b24:	4603      	mov	r3, r0
 8007b26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8007b2a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d003      	beq.n	8007b3a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b32:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007b36:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007b3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b42:	2100      	movs	r1, #0
 8007b44:	6239      	str	r1, [r7, #32]
 8007b46:	f003 0302 	and.w	r3, r3, #2
 8007b4a:	627b      	str	r3, [r7, #36]	; 0x24
 8007b4c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007b50:	460b      	mov	r3, r1
 8007b52:	4313      	orrs	r3, r2
 8007b54:	d011      	beq.n	8007b7a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007b56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b5a:	3308      	adds	r3, #8
 8007b5c:	2101      	movs	r1, #1
 8007b5e:	4618      	mov	r0, r3
 8007b60:	f001 fa2a 	bl	8008fb8 <RCCEx_PLL2_Config>
 8007b64:	4603      	mov	r3, r0
 8007b66:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8007b6a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d003      	beq.n	8007b7a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b72:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007b76:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007b7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b82:	2100      	movs	r1, #0
 8007b84:	61b9      	str	r1, [r7, #24]
 8007b86:	f003 0304 	and.w	r3, r3, #4
 8007b8a:	61fb      	str	r3, [r7, #28]
 8007b8c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007b90:	460b      	mov	r3, r1
 8007b92:	4313      	orrs	r3, r2
 8007b94:	d011      	beq.n	8007bba <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007b96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b9a:	3308      	adds	r3, #8
 8007b9c:	2102      	movs	r1, #2
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	f001 fa0a 	bl	8008fb8 <RCCEx_PLL2_Config>
 8007ba4:	4603      	mov	r3, r0
 8007ba6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8007baa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d003      	beq.n	8007bba <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bb2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007bb6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007bba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bc2:	2100      	movs	r1, #0
 8007bc4:	6139      	str	r1, [r7, #16]
 8007bc6:	f003 0308 	and.w	r3, r3, #8
 8007bca:	617b      	str	r3, [r7, #20]
 8007bcc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007bd0:	460b      	mov	r3, r1
 8007bd2:	4313      	orrs	r3, r2
 8007bd4:	d011      	beq.n	8007bfa <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007bd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007bda:	3328      	adds	r3, #40	; 0x28
 8007bdc:	2100      	movs	r1, #0
 8007bde:	4618      	mov	r0, r3
 8007be0:	f001 fa9c 	bl	800911c <RCCEx_PLL3_Config>
 8007be4:	4603      	mov	r3, r0
 8007be6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8007bea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d003      	beq.n	8007bfa <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bf2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007bf6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007bfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c02:	2100      	movs	r1, #0
 8007c04:	60b9      	str	r1, [r7, #8]
 8007c06:	f003 0310 	and.w	r3, r3, #16
 8007c0a:	60fb      	str	r3, [r7, #12]
 8007c0c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007c10:	460b      	mov	r3, r1
 8007c12:	4313      	orrs	r3, r2
 8007c14:	d011      	beq.n	8007c3a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007c16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c1a:	3328      	adds	r3, #40	; 0x28
 8007c1c:	2101      	movs	r1, #1
 8007c1e:	4618      	mov	r0, r3
 8007c20:	f001 fa7c 	bl	800911c <RCCEx_PLL3_Config>
 8007c24:	4603      	mov	r3, r0
 8007c26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8007c2a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d003      	beq.n	8007c3a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c32:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007c36:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007c3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c42:	2100      	movs	r1, #0
 8007c44:	6039      	str	r1, [r7, #0]
 8007c46:	f003 0320 	and.w	r3, r3, #32
 8007c4a:	607b      	str	r3, [r7, #4]
 8007c4c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007c50:	460b      	mov	r3, r1
 8007c52:	4313      	orrs	r3, r2
 8007c54:	d011      	beq.n	8007c7a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007c56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c5a:	3328      	adds	r3, #40	; 0x28
 8007c5c:	2102      	movs	r1, #2
 8007c5e:	4618      	mov	r0, r3
 8007c60:	f001 fa5c 	bl	800911c <RCCEx_PLL3_Config>
 8007c64:	4603      	mov	r3, r0
 8007c66:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8007c6a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d003      	beq.n	8007c7a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c72:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007c76:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8007c7a:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d101      	bne.n	8007c86 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8007c82:	2300      	movs	r3, #0
 8007c84:	e000      	b.n	8007c88 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8007c86:	2301      	movs	r3, #1
}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007c94:	58024400 	.word	0x58024400

08007c98 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b090      	sub	sp, #64	; 0x40
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007ca2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ca6:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8007caa:	430b      	orrs	r3, r1
 8007cac:	f040 8094 	bne.w	8007dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8007cb0:	4b9e      	ldr	r3, [pc, #632]	; (8007f2c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007cb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cb4:	f003 0307 	and.w	r3, r3, #7
 8007cb8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8007cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cbc:	2b04      	cmp	r3, #4
 8007cbe:	f200 8087 	bhi.w	8007dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8007cc2:	a201      	add	r2, pc, #4	; (adr r2, 8007cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8007cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cc8:	08007cdd 	.word	0x08007cdd
 8007ccc:	08007d05 	.word	0x08007d05
 8007cd0:	08007d2d 	.word	0x08007d2d
 8007cd4:	08007dc9 	.word	0x08007dc9
 8007cd8:	08007d55 	.word	0x08007d55
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007cdc:	4b93      	ldr	r3, [pc, #588]	; (8007f2c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ce4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007ce8:	d108      	bne.n	8007cfc <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007cea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007cee:	4618      	mov	r0, r3
 8007cf0:	f001 f810 	bl	8008d14 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cf6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007cf8:	f000 bd45 	b.w	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d00:	f000 bd41 	b.w	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007d04:	4b89      	ldr	r3, [pc, #548]	; (8007f2c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007d0c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007d10:	d108      	bne.n	8007d24 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d12:	f107 0318 	add.w	r3, r7, #24
 8007d16:	4618      	mov	r0, r3
 8007d18:	f000 fd54 	bl	80087c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007d1c:	69bb      	ldr	r3, [r7, #24]
 8007d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007d20:	f000 bd31 	b.w	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007d24:	2300      	movs	r3, #0
 8007d26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d28:	f000 bd2d 	b.w	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007d2c:	4b7f      	ldr	r3, [pc, #508]	; (8007f2c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007d34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d38:	d108      	bne.n	8007d4c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007d3a:	f107 030c 	add.w	r3, r7, #12
 8007d3e:	4618      	mov	r0, r3
 8007d40:	f000 fe94 	bl	8008a6c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007d48:	f000 bd1d 	b.w	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d50:	f000 bd19 	b.w	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007d54:	4b75      	ldr	r3, [pc, #468]	; (8007f2c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007d56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d58:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007d5c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007d5e:	4b73      	ldr	r3, [pc, #460]	; (8007f2c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f003 0304 	and.w	r3, r3, #4
 8007d66:	2b04      	cmp	r3, #4
 8007d68:	d10c      	bne.n	8007d84 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8007d6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d109      	bne.n	8007d84 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007d70:	4b6e      	ldr	r3, [pc, #440]	; (8007f2c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	08db      	lsrs	r3, r3, #3
 8007d76:	f003 0303 	and.w	r3, r3, #3
 8007d7a:	4a6d      	ldr	r2, [pc, #436]	; (8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007d7c:	fa22 f303 	lsr.w	r3, r2, r3
 8007d80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d82:	e01f      	b.n	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007d84:	4b69      	ldr	r3, [pc, #420]	; (8007f2c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d90:	d106      	bne.n	8007da0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8007d92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d94:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007d98:	d102      	bne.n	8007da0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007d9a:	4b66      	ldr	r3, [pc, #408]	; (8007f34 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007d9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d9e:	e011      	b.n	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007da0:	4b62      	ldr	r3, [pc, #392]	; (8007f2c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007da8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007dac:	d106      	bne.n	8007dbc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8007dae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007db0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007db4:	d102      	bne.n	8007dbc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007db6:	4b60      	ldr	r3, [pc, #384]	; (8007f38 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007db8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007dba:	e003      	b.n	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007dc0:	f000 bce1 	b.w	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007dc4:	f000 bcdf 	b.w	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007dc8:	4b5c      	ldr	r3, [pc, #368]	; (8007f3c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007dca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007dcc:	f000 bcdb 	b.w	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007dd4:	f000 bcd7 	b.w	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8007dd8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ddc:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8007de0:	430b      	orrs	r3, r1
 8007de2:	f040 80ad 	bne.w	8007f40 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8007de6:	4b51      	ldr	r3, [pc, #324]	; (8007f2c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007de8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007dea:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8007dee:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8007df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007df2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007df6:	d056      	beq.n	8007ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8007df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007dfe:	f200 8090 	bhi.w	8007f22 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8007e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e04:	2bc0      	cmp	r3, #192	; 0xc0
 8007e06:	f000 8088 	beq.w	8007f1a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8007e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e0c:	2bc0      	cmp	r3, #192	; 0xc0
 8007e0e:	f200 8088 	bhi.w	8007f22 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8007e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e14:	2b80      	cmp	r3, #128	; 0x80
 8007e16:	d032      	beq.n	8007e7e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8007e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e1a:	2b80      	cmp	r3, #128	; 0x80
 8007e1c:	f200 8081 	bhi.w	8007f22 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8007e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d003      	beq.n	8007e2e <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8007e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e28:	2b40      	cmp	r3, #64	; 0x40
 8007e2a:	d014      	beq.n	8007e56 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8007e2c:	e079      	b.n	8007f22 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007e2e:	4b3f      	ldr	r3, [pc, #252]	; (8007f2c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e36:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007e3a:	d108      	bne.n	8007e4e <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007e3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007e40:	4618      	mov	r0, r3
 8007e42:	f000 ff67 	bl	8008d14 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e48:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e4a:	f000 bc9c 	b.w	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007e4e:	2300      	movs	r3, #0
 8007e50:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e52:	f000 bc98 	b.w	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007e56:	4b35      	ldr	r3, [pc, #212]	; (8007f2c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007e5e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007e62:	d108      	bne.n	8007e76 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e64:	f107 0318 	add.w	r3, r7, #24
 8007e68:	4618      	mov	r0, r3
 8007e6a:	f000 fcab 	bl	80087c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007e6e:	69bb      	ldr	r3, [r7, #24]
 8007e70:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e72:	f000 bc88 	b.w	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007e76:	2300      	movs	r3, #0
 8007e78:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e7a:	f000 bc84 	b.w	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007e7e:	4b2b      	ldr	r3, [pc, #172]	; (8007f2c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007e86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e8a:	d108      	bne.n	8007e9e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007e8c:	f107 030c 	add.w	r3, r7, #12
 8007e90:	4618      	mov	r0, r3
 8007e92:	f000 fdeb 	bl	8008a6c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e9a:	f000 bc74 	b.w	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ea2:	f000 bc70 	b.w	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007ea6:	4b21      	ldr	r3, [pc, #132]	; (8007f2c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007ea8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007eaa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007eae:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007eb0:	4b1e      	ldr	r3, [pc, #120]	; (8007f2c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	f003 0304 	and.w	r3, r3, #4
 8007eb8:	2b04      	cmp	r3, #4
 8007eba:	d10c      	bne.n	8007ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8007ebc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d109      	bne.n	8007ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007ec2:	4b1a      	ldr	r3, [pc, #104]	; (8007f2c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	08db      	lsrs	r3, r3, #3
 8007ec8:	f003 0303 	and.w	r3, r3, #3
 8007ecc:	4a18      	ldr	r2, [pc, #96]	; (8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007ece:	fa22 f303 	lsr.w	r3, r2, r3
 8007ed2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ed4:	e01f      	b.n	8007f16 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007ed6:	4b15      	ldr	r3, [pc, #84]	; (8007f2c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ede:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ee2:	d106      	bne.n	8007ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8007ee4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ee6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007eea:	d102      	bne.n	8007ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007eec:	4b11      	ldr	r3, [pc, #68]	; (8007f34 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007eee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ef0:	e011      	b.n	8007f16 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007ef2:	4b0e      	ldr	r3, [pc, #56]	; (8007f2c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007efa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007efe:	d106      	bne.n	8007f0e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8007f00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f06:	d102      	bne.n	8007f0e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007f08:	4b0b      	ldr	r3, [pc, #44]	; (8007f38 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007f0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f0c:	e003      	b.n	8007f16 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007f0e:	2300      	movs	r3, #0
 8007f10:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007f12:	f000 bc38 	b.w	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007f16:	f000 bc36 	b.w	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007f1a:	4b08      	ldr	r3, [pc, #32]	; (8007f3c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007f1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f1e:	f000 bc32 	b.w	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007f22:	2300      	movs	r3, #0
 8007f24:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f26:	f000 bc2e 	b.w	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007f2a:	bf00      	nop
 8007f2c:	58024400 	.word	0x58024400
 8007f30:	03d09000 	.word	0x03d09000
 8007f34:	003d0900 	.word	0x003d0900
 8007f38:	017d7840 	.word	0x017d7840
 8007f3c:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8007f40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f44:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8007f48:	430b      	orrs	r3, r1
 8007f4a:	f040 809c 	bne.w	8008086 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8007f4e:	4b9e      	ldr	r3, [pc, #632]	; (80081c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007f50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f52:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8007f56:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8007f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f5a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007f5e:	d054      	beq.n	800800a <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8007f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f62:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007f66:	f200 808b 	bhi.w	8008080 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8007f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f6c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007f70:	f000 8083 	beq.w	800807a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8007f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f76:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007f7a:	f200 8081 	bhi.w	8008080 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8007f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f80:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007f84:	d02f      	beq.n	8007fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8007f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f88:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007f8c:	d878      	bhi.n	8008080 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8007f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d004      	beq.n	8007f9e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8007f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f96:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007f9a:	d012      	beq.n	8007fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8007f9c:	e070      	b.n	8008080 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007f9e:	4b8a      	ldr	r3, [pc, #552]	; (80081c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007fa6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007faa:	d107      	bne.n	8007fbc <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007fac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	f000 feaf 	bl	8008d14 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007fba:	e3e4      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007fc0:	e3e1      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007fc2:	4b81      	ldr	r3, [pc, #516]	; (80081c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007fca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007fce:	d107      	bne.n	8007fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007fd0:	f107 0318 	add.w	r3, r7, #24
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	f000 fbf5 	bl	80087c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007fda:	69bb      	ldr	r3, [r7, #24]
 8007fdc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007fde:	e3d2      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007fe4:	e3cf      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007fe6:	4b78      	ldr	r3, [pc, #480]	; (80081c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007fee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ff2:	d107      	bne.n	8008004 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007ff4:	f107 030c 	add.w	r3, r7, #12
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	f000 fd37 	bl	8008a6c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008002:	e3c0      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008004:	2300      	movs	r3, #0
 8008006:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008008:	e3bd      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800800a:	4b6f      	ldr	r3, [pc, #444]	; (80081c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800800c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800800e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008012:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008014:	4b6c      	ldr	r3, [pc, #432]	; (80081c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f003 0304 	and.w	r3, r3, #4
 800801c:	2b04      	cmp	r3, #4
 800801e:	d10c      	bne.n	800803a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8008020:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008022:	2b00      	cmp	r3, #0
 8008024:	d109      	bne.n	800803a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008026:	4b68      	ldr	r3, [pc, #416]	; (80081c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	08db      	lsrs	r3, r3, #3
 800802c:	f003 0303 	and.w	r3, r3, #3
 8008030:	4a66      	ldr	r2, [pc, #408]	; (80081cc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8008032:	fa22 f303 	lsr.w	r3, r2, r3
 8008036:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008038:	e01e      	b.n	8008078 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800803a:	4b63      	ldr	r3, [pc, #396]	; (80081c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008042:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008046:	d106      	bne.n	8008056 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8008048:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800804a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800804e:	d102      	bne.n	8008056 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008050:	4b5f      	ldr	r3, [pc, #380]	; (80081d0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8008052:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008054:	e010      	b.n	8008078 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008056:	4b5c      	ldr	r3, [pc, #368]	; (80081c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800805e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008062:	d106      	bne.n	8008072 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8008064:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008066:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800806a:	d102      	bne.n	8008072 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800806c:	4b59      	ldr	r3, [pc, #356]	; (80081d4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800806e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008070:	e002      	b.n	8008078 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008072:	2300      	movs	r3, #0
 8008074:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008076:	e386      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008078:	e385      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800807a:	4b57      	ldr	r3, [pc, #348]	; (80081d8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800807c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800807e:	e382      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8008080:	2300      	movs	r3, #0
 8008082:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008084:	e37f      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8008086:	e9d7 2300 	ldrd	r2, r3, [r7]
 800808a:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800808e:	430b      	orrs	r3, r1
 8008090:	f040 80a7 	bne.w	80081e2 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8008094:	4b4c      	ldr	r3, [pc, #304]	; (80081c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008096:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008098:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800809c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800809e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080a0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80080a4:	d055      	beq.n	8008152 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 80080a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80080ac:	f200 8096 	bhi.w	80081dc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80080b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080b2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80080b6:	f000 8084 	beq.w	80081c2 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 80080ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080bc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80080c0:	f200 808c 	bhi.w	80081dc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80080c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80080ca:	d030      	beq.n	800812e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 80080cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080ce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80080d2:	f200 8083 	bhi.w	80081dc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80080d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d004      	beq.n	80080e6 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 80080dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080de:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80080e2:	d012      	beq.n	800810a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 80080e4:	e07a      	b.n	80081dc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80080e6:	4b38      	ldr	r3, [pc, #224]	; (80081c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80080f2:	d107      	bne.n	8008104 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80080f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80080f8:	4618      	mov	r0, r3
 80080fa:	f000 fe0b 	bl	8008d14 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80080fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008100:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008102:	e340      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008104:	2300      	movs	r3, #0
 8008106:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008108:	e33d      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800810a:	4b2f      	ldr	r3, [pc, #188]	; (80081c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008112:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008116:	d107      	bne.n	8008128 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008118:	f107 0318 	add.w	r3, r7, #24
 800811c:	4618      	mov	r0, r3
 800811e:	f000 fb51 	bl	80087c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008122:	69bb      	ldr	r3, [r7, #24]
 8008124:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008126:	e32e      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008128:	2300      	movs	r3, #0
 800812a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800812c:	e32b      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800812e:	4b26      	ldr	r3, [pc, #152]	; (80081c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008136:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800813a:	d107      	bne.n	800814c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800813c:	f107 030c 	add.w	r3, r7, #12
 8008140:	4618      	mov	r0, r3
 8008142:	f000 fc93 	bl	8008a6c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800814a:	e31c      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800814c:	2300      	movs	r3, #0
 800814e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008150:	e319      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008152:	4b1d      	ldr	r3, [pc, #116]	; (80081c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008154:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008156:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800815a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800815c:	4b1a      	ldr	r3, [pc, #104]	; (80081c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f003 0304 	and.w	r3, r3, #4
 8008164:	2b04      	cmp	r3, #4
 8008166:	d10c      	bne.n	8008182 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8008168:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800816a:	2b00      	cmp	r3, #0
 800816c:	d109      	bne.n	8008182 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800816e:	4b16      	ldr	r3, [pc, #88]	; (80081c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	08db      	lsrs	r3, r3, #3
 8008174:	f003 0303 	and.w	r3, r3, #3
 8008178:	4a14      	ldr	r2, [pc, #80]	; (80081cc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800817a:	fa22 f303 	lsr.w	r3, r2, r3
 800817e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008180:	e01e      	b.n	80081c0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008182:	4b11      	ldr	r3, [pc, #68]	; (80081c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800818a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800818e:	d106      	bne.n	800819e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8008190:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008192:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008196:	d102      	bne.n	800819e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008198:	4b0d      	ldr	r3, [pc, #52]	; (80081d0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800819a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800819c:	e010      	b.n	80081c0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800819e:	4b0a      	ldr	r3, [pc, #40]	; (80081c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80081aa:	d106      	bne.n	80081ba <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 80081ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80081b2:	d102      	bne.n	80081ba <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80081b4:	4b07      	ldr	r3, [pc, #28]	; (80081d4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80081b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80081b8:	e002      	b.n	80081c0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80081ba:	2300      	movs	r3, #0
 80081bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80081be:	e2e2      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80081c0:	e2e1      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80081c2:	4b05      	ldr	r3, [pc, #20]	; (80081d8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80081c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80081c6:	e2de      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80081c8:	58024400 	.word	0x58024400
 80081cc:	03d09000 	.word	0x03d09000
 80081d0:	003d0900 	.word	0x003d0900
 80081d4:	017d7840 	.word	0x017d7840
 80081d8:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 80081dc:	2300      	movs	r3, #0
 80081de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80081e0:	e2d1      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80081e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80081e6:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 80081ea:	430b      	orrs	r3, r1
 80081ec:	f040 809c 	bne.w	8008328 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80081f0:	4b93      	ldr	r3, [pc, #588]	; (8008440 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80081f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081f4:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80081f8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80081fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008200:	d054      	beq.n	80082ac <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8008202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008204:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008208:	f200 808b 	bhi.w	8008322 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800820c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800820e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008212:	f000 8083 	beq.w	800831c <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8008216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008218:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800821c:	f200 8081 	bhi.w	8008322 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008222:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008226:	d02f      	beq.n	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8008228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800822a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800822e:	d878      	bhi.n	8008322 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008232:	2b00      	cmp	r3, #0
 8008234:	d004      	beq.n	8008240 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8008236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008238:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800823c:	d012      	beq.n	8008264 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800823e:	e070      	b.n	8008322 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008240:	4b7f      	ldr	r3, [pc, #508]	; (8008440 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008248:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800824c:	d107      	bne.n	800825e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800824e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008252:	4618      	mov	r0, r3
 8008254:	f000 fd5e 	bl	8008d14 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800825a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800825c:	e293      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800825e:	2300      	movs	r3, #0
 8008260:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008262:	e290      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008264:	4b76      	ldr	r3, [pc, #472]	; (8008440 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800826c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008270:	d107      	bne.n	8008282 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008272:	f107 0318 	add.w	r3, r7, #24
 8008276:	4618      	mov	r0, r3
 8008278:	f000 faa4 	bl	80087c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800827c:	69bb      	ldr	r3, [r7, #24]
 800827e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008280:	e281      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008282:	2300      	movs	r3, #0
 8008284:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008286:	e27e      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008288:	4b6d      	ldr	r3, [pc, #436]	; (8008440 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008290:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008294:	d107      	bne.n	80082a6 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008296:	f107 030c 	add.w	r3, r7, #12
 800829a:	4618      	mov	r0, r3
 800829c:	f000 fbe6 	bl	8008a6c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80082a4:	e26f      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80082a6:	2300      	movs	r3, #0
 80082a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80082aa:	e26c      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80082ac:	4b64      	ldr	r3, [pc, #400]	; (8008440 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80082ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082b0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80082b4:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80082b6:	4b62      	ldr	r3, [pc, #392]	; (8008440 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	f003 0304 	and.w	r3, r3, #4
 80082be:	2b04      	cmp	r3, #4
 80082c0:	d10c      	bne.n	80082dc <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 80082c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d109      	bne.n	80082dc <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80082c8:	4b5d      	ldr	r3, [pc, #372]	; (8008440 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	08db      	lsrs	r3, r3, #3
 80082ce:	f003 0303 	and.w	r3, r3, #3
 80082d2:	4a5c      	ldr	r2, [pc, #368]	; (8008444 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80082d4:	fa22 f303 	lsr.w	r3, r2, r3
 80082d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80082da:	e01e      	b.n	800831a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80082dc:	4b58      	ldr	r3, [pc, #352]	; (8008440 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80082e8:	d106      	bne.n	80082f8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 80082ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082ec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80082f0:	d102      	bne.n	80082f8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80082f2:	4b55      	ldr	r3, [pc, #340]	; (8008448 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80082f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80082f6:	e010      	b.n	800831a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80082f8:	4b51      	ldr	r3, [pc, #324]	; (8008440 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008300:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008304:	d106      	bne.n	8008314 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8008306:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008308:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800830c:	d102      	bne.n	8008314 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800830e:	4b4f      	ldr	r3, [pc, #316]	; (800844c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8008310:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008312:	e002      	b.n	800831a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008314:	2300      	movs	r3, #0
 8008316:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008318:	e235      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800831a:	e234      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800831c:	4b4c      	ldr	r3, [pc, #304]	; (8008450 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800831e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008320:	e231      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008322:	2300      	movs	r3, #0
 8008324:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008326:	e22e      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8008328:	e9d7 2300 	ldrd	r2, r3, [r7]
 800832c:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8008330:	430b      	orrs	r3, r1
 8008332:	f040 808f 	bne.w	8008454 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8008336:	4b42      	ldr	r3, [pc, #264]	; (8008440 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008338:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800833a:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800833e:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8008340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008342:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008346:	d06b      	beq.n	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8008348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800834a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800834e:	d874      	bhi.n	800843a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008352:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008356:	d056      	beq.n	8008406 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8008358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800835a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800835e:	d86c      	bhi.n	800843a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008362:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008366:	d03b      	beq.n	80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8008368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800836a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800836e:	d864      	bhi.n	800843a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008372:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008376:	d021      	beq.n	80083bc <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8008378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800837a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800837e:	d85c      	bhi.n	800843a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008382:	2b00      	cmp	r3, #0
 8008384:	d004      	beq.n	8008390 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8008386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008388:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800838c:	d004      	beq.n	8008398 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800838e:	e054      	b.n	800843a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8008390:	f7fe fa62 	bl	8006858 <HAL_RCC_GetPCLK1Freq>
 8008394:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008396:	e1f6      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008398:	4b29      	ldr	r3, [pc, #164]	; (8008440 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80083a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80083a4:	d107      	bne.n	80083b6 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80083a6:	f107 0318 	add.w	r3, r7, #24
 80083aa:	4618      	mov	r0, r3
 80083ac:	f000 fa0a 	bl	80087c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80083b0:	69fb      	ldr	r3, [r7, #28]
 80083b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80083b4:	e1e7      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80083b6:	2300      	movs	r3, #0
 80083b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80083ba:	e1e4      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80083bc:	4b20      	ldr	r3, [pc, #128]	; (8008440 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80083c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80083c8:	d107      	bne.n	80083da <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80083ca:	f107 030c 	add.w	r3, r7, #12
 80083ce:	4618      	mov	r0, r3
 80083d0:	f000 fb4c 	bl	8008a6c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80083d4:	693b      	ldr	r3, [r7, #16]
 80083d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80083d8:	e1d5      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80083da:	2300      	movs	r3, #0
 80083dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80083de:	e1d2      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80083e0:	4b17      	ldr	r3, [pc, #92]	; (8008440 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f003 0304 	and.w	r3, r3, #4
 80083e8:	2b04      	cmp	r3, #4
 80083ea:	d109      	bne.n	8008400 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80083ec:	4b14      	ldr	r3, [pc, #80]	; (8008440 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	08db      	lsrs	r3, r3, #3
 80083f2:	f003 0303 	and.w	r3, r3, #3
 80083f6:	4a13      	ldr	r2, [pc, #76]	; (8008444 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80083f8:	fa22 f303 	lsr.w	r3, r2, r3
 80083fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80083fe:	e1c2      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008400:	2300      	movs	r3, #0
 8008402:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008404:	e1bf      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008406:	4b0e      	ldr	r3, [pc, #56]	; (8008440 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800840e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008412:	d102      	bne.n	800841a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8008414:	4b0c      	ldr	r3, [pc, #48]	; (8008448 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008416:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008418:	e1b5      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800841a:	2300      	movs	r3, #0
 800841c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800841e:	e1b2      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008420:	4b07      	ldr	r3, [pc, #28]	; (8008440 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008428:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800842c:	d102      	bne.n	8008434 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800842e:	4b07      	ldr	r3, [pc, #28]	; (800844c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8008430:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008432:	e1a8      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008434:	2300      	movs	r3, #0
 8008436:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008438:	e1a5      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800843a:	2300      	movs	r3, #0
 800843c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800843e:	e1a2      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008440:	58024400 	.word	0x58024400
 8008444:	03d09000 	.word	0x03d09000
 8008448:	003d0900 	.word	0x003d0900
 800844c:	017d7840 	.word	0x017d7840
 8008450:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8008454:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008458:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800845c:	430b      	orrs	r3, r1
 800845e:	d173      	bne.n	8008548 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8008460:	4b9c      	ldr	r3, [pc, #624]	; (80086d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008462:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008464:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008468:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800846a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800846c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008470:	d02f      	beq.n	80084d2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8008472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008474:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008478:	d863      	bhi.n	8008542 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800847a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800847c:	2b00      	cmp	r3, #0
 800847e:	d004      	beq.n	800848a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8008480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008482:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008486:	d012      	beq.n	80084ae <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8008488:	e05b      	b.n	8008542 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800848a:	4b92      	ldr	r3, [pc, #584]	; (80086d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008492:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008496:	d107      	bne.n	80084a8 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008498:	f107 0318 	add.w	r3, r7, #24
 800849c:	4618      	mov	r0, r3
 800849e:	f000 f991 	bl	80087c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80084a2:	69bb      	ldr	r3, [r7, #24]
 80084a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80084a6:	e16e      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80084a8:	2300      	movs	r3, #0
 80084aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80084ac:	e16b      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80084ae:	4b89      	ldr	r3, [pc, #548]	; (80086d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80084b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80084ba:	d107      	bne.n	80084cc <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80084bc:	f107 030c 	add.w	r3, r7, #12
 80084c0:	4618      	mov	r0, r3
 80084c2:	f000 fad3 	bl	8008a6c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80084c6:	697b      	ldr	r3, [r7, #20]
 80084c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80084ca:	e15c      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80084cc:	2300      	movs	r3, #0
 80084ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80084d0:	e159      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80084d2:	4b80      	ldr	r3, [pc, #512]	; (80086d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80084d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084d6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80084da:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80084dc:	4b7d      	ldr	r3, [pc, #500]	; (80086d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f003 0304 	and.w	r3, r3, #4
 80084e4:	2b04      	cmp	r3, #4
 80084e6:	d10c      	bne.n	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 80084e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d109      	bne.n	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80084ee:	4b79      	ldr	r3, [pc, #484]	; (80086d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	08db      	lsrs	r3, r3, #3
 80084f4:	f003 0303 	and.w	r3, r3, #3
 80084f8:	4a77      	ldr	r2, [pc, #476]	; (80086d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80084fa:	fa22 f303 	lsr.w	r3, r2, r3
 80084fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008500:	e01e      	b.n	8008540 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008502:	4b74      	ldr	r3, [pc, #464]	; (80086d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800850a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800850e:	d106      	bne.n	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8008510:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008512:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008516:	d102      	bne.n	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008518:	4b70      	ldr	r3, [pc, #448]	; (80086dc <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800851a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800851c:	e010      	b.n	8008540 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800851e:	4b6d      	ldr	r3, [pc, #436]	; (80086d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008526:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800852a:	d106      	bne.n	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800852c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800852e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008532:	d102      	bne.n	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008534:	4b6a      	ldr	r3, [pc, #424]	; (80086e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8008536:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008538:	e002      	b.n	8008540 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800853a:	2300      	movs	r3, #0
 800853c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800853e:	e122      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008540:	e121      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8008542:	2300      	movs	r3, #0
 8008544:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008546:	e11e      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008548:	e9d7 2300 	ldrd	r2, r3, [r7]
 800854c:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8008550:	430b      	orrs	r3, r1
 8008552:	d133      	bne.n	80085bc <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8008554:	4b5f      	ldr	r3, [pc, #380]	; (80086d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008556:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008558:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800855c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800855e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008560:	2b00      	cmp	r3, #0
 8008562:	d004      	beq.n	800856e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8008564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008566:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800856a:	d012      	beq.n	8008592 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800856c:	e023      	b.n	80085b6 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800856e:	4b59      	ldr	r3, [pc, #356]	; (80086d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008576:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800857a:	d107      	bne.n	800858c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800857c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008580:	4618      	mov	r0, r3
 8008582:	f000 fbc7 	bl	8008d14 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008588:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800858a:	e0fc      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800858c:	2300      	movs	r3, #0
 800858e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008590:	e0f9      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008592:	4b50      	ldr	r3, [pc, #320]	; (80086d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800859a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800859e:	d107      	bne.n	80085b0 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80085a0:	f107 0318 	add.w	r3, r7, #24
 80085a4:	4618      	mov	r0, r3
 80085a6:	f000 f90d 	bl	80087c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80085aa:	6a3b      	ldr	r3, [r7, #32]
 80085ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80085ae:	e0ea      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80085b0:	2300      	movs	r3, #0
 80085b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80085b4:	e0e7      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80085b6:	2300      	movs	r3, #0
 80085b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80085ba:	e0e4      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80085bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80085c0:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 80085c4:	430b      	orrs	r3, r1
 80085c6:	f040 808d 	bne.w	80086e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 80085ca:	4b42      	ldr	r3, [pc, #264]	; (80086d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80085cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085ce:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80085d2:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80085d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80085da:	d06b      	beq.n	80086b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 80085dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80085e2:	d874      	bhi.n	80086ce <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80085e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085ea:	d056      	beq.n	800869a <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 80085ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085f2:	d86c      	bhi.n	80086ce <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80085f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085f6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80085fa:	d03b      	beq.n	8008674 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 80085fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085fe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008602:	d864      	bhi.n	80086ce <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008606:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800860a:	d021      	beq.n	8008650 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800860c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800860e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008612:	d85c      	bhi.n	80086ce <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008616:	2b00      	cmp	r3, #0
 8008618:	d004      	beq.n	8008624 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800861a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800861c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008620:	d004      	beq.n	800862c <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8008622:	e054      	b.n	80086ce <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008624:	f000 f8b8 	bl	8008798 <HAL_RCCEx_GetD3PCLK1Freq>
 8008628:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800862a:	e0ac      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800862c:	4b29      	ldr	r3, [pc, #164]	; (80086d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008634:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008638:	d107      	bne.n	800864a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800863a:	f107 0318 	add.w	r3, r7, #24
 800863e:	4618      	mov	r0, r3
 8008640:	f000 f8c0 	bl	80087c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008644:	69fb      	ldr	r3, [r7, #28]
 8008646:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008648:	e09d      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800864a:	2300      	movs	r3, #0
 800864c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800864e:	e09a      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008650:	4b20      	ldr	r3, [pc, #128]	; (80086d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008658:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800865c:	d107      	bne.n	800866e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800865e:	f107 030c 	add.w	r3, r7, #12
 8008662:	4618      	mov	r0, r3
 8008664:	f000 fa02 	bl	8008a6c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008668:	693b      	ldr	r3, [r7, #16]
 800866a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800866c:	e08b      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800866e:	2300      	movs	r3, #0
 8008670:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008672:	e088      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008674:	4b17      	ldr	r3, [pc, #92]	; (80086d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	f003 0304 	and.w	r3, r3, #4
 800867c:	2b04      	cmp	r3, #4
 800867e:	d109      	bne.n	8008694 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008680:	4b14      	ldr	r3, [pc, #80]	; (80086d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	08db      	lsrs	r3, r3, #3
 8008686:	f003 0303 	and.w	r3, r3, #3
 800868a:	4a13      	ldr	r2, [pc, #76]	; (80086d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800868c:	fa22 f303 	lsr.w	r3, r2, r3
 8008690:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008692:	e078      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008694:	2300      	movs	r3, #0
 8008696:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008698:	e075      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800869a:	4b0e      	ldr	r3, [pc, #56]	; (80086d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80086a6:	d102      	bne.n	80086ae <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 80086a8:	4b0c      	ldr	r3, [pc, #48]	; (80086dc <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80086aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80086ac:	e06b      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80086ae:	2300      	movs	r3, #0
 80086b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80086b2:	e068      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80086b4:	4b07      	ldr	r3, [pc, #28]	; (80086d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80086c0:	d102      	bne.n	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 80086c2:	4b07      	ldr	r3, [pc, #28]	; (80086e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80086c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80086c6:	e05e      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80086c8:	2300      	movs	r3, #0
 80086ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80086cc:	e05b      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 80086ce:	2300      	movs	r3, #0
 80086d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80086d2:	e058      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80086d4:	58024400 	.word	0x58024400
 80086d8:	03d09000 	.word	0x03d09000
 80086dc:	003d0900 	.word	0x003d0900
 80086e0:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80086e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80086e8:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 80086ec:	430b      	orrs	r3, r1
 80086ee:	d148      	bne.n	8008782 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80086f0:	4b27      	ldr	r3, [pc, #156]	; (8008790 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80086f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086f4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80086f8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80086fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008700:	d02a      	beq.n	8008758 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8008702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008704:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008708:	d838      	bhi.n	800877c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800870a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800870c:	2b00      	cmp	r3, #0
 800870e:	d004      	beq.n	800871a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8008710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008712:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008716:	d00d      	beq.n	8008734 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8008718:	e030      	b.n	800877c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800871a:	4b1d      	ldr	r3, [pc, #116]	; (8008790 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008722:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008726:	d102      	bne.n	800872e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8008728:	4b1a      	ldr	r3, [pc, #104]	; (8008794 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800872a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800872c:	e02b      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800872e:	2300      	movs	r3, #0
 8008730:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008732:	e028      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008734:	4b16      	ldr	r3, [pc, #88]	; (8008790 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800873c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008740:	d107      	bne.n	8008752 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008742:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008746:	4618      	mov	r0, r3
 8008748:	f000 fae4 	bl	8008d14 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800874c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800874e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008750:	e019      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008752:	2300      	movs	r3, #0
 8008754:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008756:	e016      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008758:	4b0d      	ldr	r3, [pc, #52]	; (8008790 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008760:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008764:	d107      	bne.n	8008776 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008766:	f107 0318 	add.w	r3, r7, #24
 800876a:	4618      	mov	r0, r3
 800876c:	f000 f82a 	bl	80087c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008770:	69fb      	ldr	r3, [r7, #28]
 8008772:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008774:	e007      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008776:	2300      	movs	r3, #0
 8008778:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800877a:	e004      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800877c:	2300      	movs	r3, #0
 800877e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008780:	e001      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8008782:	2300      	movs	r3, #0
 8008784:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 8008786:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008788:	4618      	mov	r0, r3
 800878a:	3740      	adds	r7, #64	; 0x40
 800878c:	46bd      	mov	sp, r7
 800878e:	bd80      	pop	{r7, pc}
 8008790:	58024400 	.word	0x58024400
 8008794:	017d7840 	.word	0x017d7840

08008798 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800879c:	f7fe f82c 	bl	80067f8 <HAL_RCC_GetHCLKFreq>
 80087a0:	4602      	mov	r2, r0
 80087a2:	4b06      	ldr	r3, [pc, #24]	; (80087bc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80087a4:	6a1b      	ldr	r3, [r3, #32]
 80087a6:	091b      	lsrs	r3, r3, #4
 80087a8:	f003 0307 	and.w	r3, r3, #7
 80087ac:	4904      	ldr	r1, [pc, #16]	; (80087c0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80087ae:	5ccb      	ldrb	r3, [r1, r3]
 80087b0:	f003 031f 	and.w	r3, r3, #31
 80087b4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80087b8:	4618      	mov	r0, r3
 80087ba:	bd80      	pop	{r7, pc}
 80087bc:	58024400 	.word	0x58024400
 80087c0:	080117ac 	.word	0x080117ac

080087c4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80087c4:	b480      	push	{r7}
 80087c6:	b089      	sub	sp, #36	; 0x24
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80087cc:	4ba1      	ldr	r3, [pc, #644]	; (8008a54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80087ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087d0:	f003 0303 	and.w	r3, r3, #3
 80087d4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80087d6:	4b9f      	ldr	r3, [pc, #636]	; (8008a54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80087d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087da:	0b1b      	lsrs	r3, r3, #12
 80087dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80087e0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80087e2:	4b9c      	ldr	r3, [pc, #624]	; (8008a54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80087e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087e6:	091b      	lsrs	r3, r3, #4
 80087e8:	f003 0301 	and.w	r3, r3, #1
 80087ec:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80087ee:	4b99      	ldr	r3, [pc, #612]	; (8008a54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80087f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087f2:	08db      	lsrs	r3, r3, #3
 80087f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80087f8:	693a      	ldr	r2, [r7, #16]
 80087fa:	fb02 f303 	mul.w	r3, r2, r3
 80087fe:	ee07 3a90 	vmov	s15, r3
 8008802:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008806:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800880a:	697b      	ldr	r3, [r7, #20]
 800880c:	2b00      	cmp	r3, #0
 800880e:	f000 8111 	beq.w	8008a34 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008812:	69bb      	ldr	r3, [r7, #24]
 8008814:	2b02      	cmp	r3, #2
 8008816:	f000 8083 	beq.w	8008920 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800881a:	69bb      	ldr	r3, [r7, #24]
 800881c:	2b02      	cmp	r3, #2
 800881e:	f200 80a1 	bhi.w	8008964 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008822:	69bb      	ldr	r3, [r7, #24]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d003      	beq.n	8008830 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008828:	69bb      	ldr	r3, [r7, #24]
 800882a:	2b01      	cmp	r3, #1
 800882c:	d056      	beq.n	80088dc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800882e:	e099      	b.n	8008964 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008830:	4b88      	ldr	r3, [pc, #544]	; (8008a54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	f003 0320 	and.w	r3, r3, #32
 8008838:	2b00      	cmp	r3, #0
 800883a:	d02d      	beq.n	8008898 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800883c:	4b85      	ldr	r3, [pc, #532]	; (8008a54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	08db      	lsrs	r3, r3, #3
 8008842:	f003 0303 	and.w	r3, r3, #3
 8008846:	4a84      	ldr	r2, [pc, #528]	; (8008a58 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008848:	fa22 f303 	lsr.w	r3, r2, r3
 800884c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800884e:	68bb      	ldr	r3, [r7, #8]
 8008850:	ee07 3a90 	vmov	s15, r3
 8008854:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008858:	697b      	ldr	r3, [r7, #20]
 800885a:	ee07 3a90 	vmov	s15, r3
 800885e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008862:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008866:	4b7b      	ldr	r3, [pc, #492]	; (8008a54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800886a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800886e:	ee07 3a90 	vmov	s15, r3
 8008872:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008876:	ed97 6a03 	vldr	s12, [r7, #12]
 800887a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008a5c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800887e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008882:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008886:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800888a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800888e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008892:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008896:	e087      	b.n	80089a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008898:	697b      	ldr	r3, [r7, #20]
 800889a:	ee07 3a90 	vmov	s15, r3
 800889e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088a2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008a60 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80088a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088aa:	4b6a      	ldr	r3, [pc, #424]	; (8008a54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80088ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088b2:	ee07 3a90 	vmov	s15, r3
 80088b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80088be:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008a5c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80088c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80088ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80088da:	e065      	b.n	80089a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80088dc:	697b      	ldr	r3, [r7, #20]
 80088de:	ee07 3a90 	vmov	s15, r3
 80088e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088e6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008a64 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80088ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088ee:	4b59      	ldr	r3, [pc, #356]	; (8008a54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80088f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088f6:	ee07 3a90 	vmov	s15, r3
 80088fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8008902:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008a5c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008906:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800890a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800890e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008912:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008916:	ee67 7a27 	vmul.f32	s15, s14, s15
 800891a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800891e:	e043      	b.n	80089a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008920:	697b      	ldr	r3, [r7, #20]
 8008922:	ee07 3a90 	vmov	s15, r3
 8008926:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800892a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008a68 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800892e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008932:	4b48      	ldr	r3, [pc, #288]	; (8008a54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008936:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800893a:	ee07 3a90 	vmov	s15, r3
 800893e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008942:	ed97 6a03 	vldr	s12, [r7, #12]
 8008946:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008a5c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800894a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800894e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008952:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008956:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800895a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800895e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008962:	e021      	b.n	80089a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008964:	697b      	ldr	r3, [r7, #20]
 8008966:	ee07 3a90 	vmov	s15, r3
 800896a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800896e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008a64 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008972:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008976:	4b37      	ldr	r3, [pc, #220]	; (8008a54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800897a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800897e:	ee07 3a90 	vmov	s15, r3
 8008982:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008986:	ed97 6a03 	vldr	s12, [r7, #12]
 800898a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008a5c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800898e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008992:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008996:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800899a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800899e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80089a6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80089a8:	4b2a      	ldr	r3, [pc, #168]	; (8008a54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80089aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089ac:	0a5b      	lsrs	r3, r3, #9
 80089ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089b2:	ee07 3a90 	vmov	s15, r3
 80089b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80089be:	ee37 7a87 	vadd.f32	s14, s15, s14
 80089c2:	edd7 6a07 	vldr	s13, [r7, #28]
 80089c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80089ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80089ce:	ee17 2a90 	vmov	r2, s15
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80089d6:	4b1f      	ldr	r3, [pc, #124]	; (8008a54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80089d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089da:	0c1b      	lsrs	r3, r3, #16
 80089dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089e0:	ee07 3a90 	vmov	s15, r3
 80089e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80089ec:	ee37 7a87 	vadd.f32	s14, s15, s14
 80089f0:	edd7 6a07 	vldr	s13, [r7, #28]
 80089f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80089f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80089fc:	ee17 2a90 	vmov	r2, s15
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008a04:	4b13      	ldr	r3, [pc, #76]	; (8008a54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a08:	0e1b      	lsrs	r3, r3, #24
 8008a0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a0e:	ee07 3a90 	vmov	s15, r3
 8008a12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a16:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008a1a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008a1e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008a22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a2a:	ee17 2a90 	vmov	r2, s15
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008a32:	e008      	b.n	8008a46 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2200      	movs	r2, #0
 8008a38:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	2200      	movs	r2, #0
 8008a44:	609a      	str	r2, [r3, #8]
}
 8008a46:	bf00      	nop
 8008a48:	3724      	adds	r7, #36	; 0x24
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a50:	4770      	bx	lr
 8008a52:	bf00      	nop
 8008a54:	58024400 	.word	0x58024400
 8008a58:	03d09000 	.word	0x03d09000
 8008a5c:	46000000 	.word	0x46000000
 8008a60:	4c742400 	.word	0x4c742400
 8008a64:	4a742400 	.word	0x4a742400
 8008a68:	4bbebc20 	.word	0x4bbebc20

08008a6c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008a6c:	b480      	push	{r7}
 8008a6e:	b089      	sub	sp, #36	; 0x24
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008a74:	4ba1      	ldr	r3, [pc, #644]	; (8008cfc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a78:	f003 0303 	and.w	r3, r3, #3
 8008a7c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8008a7e:	4b9f      	ldr	r3, [pc, #636]	; (8008cfc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a82:	0d1b      	lsrs	r3, r3, #20
 8008a84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008a88:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008a8a:	4b9c      	ldr	r3, [pc, #624]	; (8008cfc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a8e:	0a1b      	lsrs	r3, r3, #8
 8008a90:	f003 0301 	and.w	r3, r3, #1
 8008a94:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8008a96:	4b99      	ldr	r3, [pc, #612]	; (8008cfc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a9a:	08db      	lsrs	r3, r3, #3
 8008a9c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008aa0:	693a      	ldr	r2, [r7, #16]
 8008aa2:	fb02 f303 	mul.w	r3, r2, r3
 8008aa6:	ee07 3a90 	vmov	s15, r3
 8008aaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008aae:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008ab2:	697b      	ldr	r3, [r7, #20]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	f000 8111 	beq.w	8008cdc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008aba:	69bb      	ldr	r3, [r7, #24]
 8008abc:	2b02      	cmp	r3, #2
 8008abe:	f000 8083 	beq.w	8008bc8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008ac2:	69bb      	ldr	r3, [r7, #24]
 8008ac4:	2b02      	cmp	r3, #2
 8008ac6:	f200 80a1 	bhi.w	8008c0c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008aca:	69bb      	ldr	r3, [r7, #24]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d003      	beq.n	8008ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008ad0:	69bb      	ldr	r3, [r7, #24]
 8008ad2:	2b01      	cmp	r3, #1
 8008ad4:	d056      	beq.n	8008b84 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008ad6:	e099      	b.n	8008c0c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008ad8:	4b88      	ldr	r3, [pc, #544]	; (8008cfc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	f003 0320 	and.w	r3, r3, #32
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d02d      	beq.n	8008b40 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008ae4:	4b85      	ldr	r3, [pc, #532]	; (8008cfc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	08db      	lsrs	r3, r3, #3
 8008aea:	f003 0303 	and.w	r3, r3, #3
 8008aee:	4a84      	ldr	r2, [pc, #528]	; (8008d00 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008af0:	fa22 f303 	lsr.w	r3, r2, r3
 8008af4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008af6:	68bb      	ldr	r3, [r7, #8]
 8008af8:	ee07 3a90 	vmov	s15, r3
 8008afc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b00:	697b      	ldr	r3, [r7, #20]
 8008b02:	ee07 3a90 	vmov	s15, r3
 8008b06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b0e:	4b7b      	ldr	r3, [pc, #492]	; (8008cfc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b16:	ee07 3a90 	vmov	s15, r3
 8008b1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b22:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008d04 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008b26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008b32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b3a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008b3e:	e087      	b.n	8008c50 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008b40:	697b      	ldr	r3, [r7, #20]
 8008b42:	ee07 3a90 	vmov	s15, r3
 8008b46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b4a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008d08 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008b4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b52:	4b6a      	ldr	r3, [pc, #424]	; (8008cfc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b5a:	ee07 3a90 	vmov	s15, r3
 8008b5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b62:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b66:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008d04 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008b6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008b76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008b82:	e065      	b.n	8008c50 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008b84:	697b      	ldr	r3, [r7, #20]
 8008b86:	ee07 3a90 	vmov	s15, r3
 8008b8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b8e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008d0c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008b92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b96:	4b59      	ldr	r3, [pc, #356]	; (8008cfc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b9e:	ee07 3a90 	vmov	s15, r3
 8008ba2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ba6:	ed97 6a03 	vldr	s12, [r7, #12]
 8008baa:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008d04 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008bae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008bb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008bb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008bba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008bbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008bc2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008bc6:	e043      	b.n	8008c50 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008bc8:	697b      	ldr	r3, [r7, #20]
 8008bca:	ee07 3a90 	vmov	s15, r3
 8008bce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bd2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008d10 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008bd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008bda:	4b48      	ldr	r3, [pc, #288]	; (8008cfc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008be2:	ee07 3a90 	vmov	s15, r3
 8008be6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008bea:	ed97 6a03 	vldr	s12, [r7, #12]
 8008bee:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008d04 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008bf2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008bf6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008bfa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008bfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008c0a:	e021      	b.n	8008c50 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008c0c:	697b      	ldr	r3, [r7, #20]
 8008c0e:	ee07 3a90 	vmov	s15, r3
 8008c12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c16:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008d0c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008c1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c1e:	4b37      	ldr	r3, [pc, #220]	; (8008cfc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c26:	ee07 3a90 	vmov	s15, r3
 8008c2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c32:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008d04 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008c36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008c4e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8008c50:	4b2a      	ldr	r3, [pc, #168]	; (8008cfc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c54:	0a5b      	lsrs	r3, r3, #9
 8008c56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c5a:	ee07 3a90 	vmov	s15, r3
 8008c5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c62:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008c66:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008c6a:	edd7 6a07 	vldr	s13, [r7, #28]
 8008c6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008c72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008c76:	ee17 2a90 	vmov	r2, s15
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8008c7e:	4b1f      	ldr	r3, [pc, #124]	; (8008cfc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c82:	0c1b      	lsrs	r3, r3, #16
 8008c84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c88:	ee07 3a90 	vmov	s15, r3
 8008c8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c90:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008c94:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008c98:	edd7 6a07 	vldr	s13, [r7, #28]
 8008c9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008ca0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008ca4:	ee17 2a90 	vmov	r2, s15
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008cac:	4b13      	ldr	r3, [pc, #76]	; (8008cfc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cb0:	0e1b      	lsrs	r3, r3, #24
 8008cb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008cb6:	ee07 3a90 	vmov	s15, r3
 8008cba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cbe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008cc2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008cc6:	edd7 6a07 	vldr	s13, [r7, #28]
 8008cca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008cce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008cd2:	ee17 2a90 	vmov	r2, s15
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008cda:	e008      	b.n	8008cee <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	2200      	movs	r2, #0
 8008ce0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	2200      	movs	r2, #0
 8008cec:	609a      	str	r2, [r3, #8]
}
 8008cee:	bf00      	nop
 8008cf0:	3724      	adds	r7, #36	; 0x24
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf8:	4770      	bx	lr
 8008cfa:	bf00      	nop
 8008cfc:	58024400 	.word	0x58024400
 8008d00:	03d09000 	.word	0x03d09000
 8008d04:	46000000 	.word	0x46000000
 8008d08:	4c742400 	.word	0x4c742400
 8008d0c:	4a742400 	.word	0x4a742400
 8008d10:	4bbebc20 	.word	0x4bbebc20

08008d14 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8008d14:	b480      	push	{r7}
 8008d16:	b089      	sub	sp, #36	; 0x24
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008d1c:	4ba0      	ldr	r3, [pc, #640]	; (8008fa0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d20:	f003 0303 	and.w	r3, r3, #3
 8008d24:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8008d26:	4b9e      	ldr	r3, [pc, #632]	; (8008fa0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d2a:	091b      	lsrs	r3, r3, #4
 8008d2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008d30:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8008d32:	4b9b      	ldr	r3, [pc, #620]	; (8008fa0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d36:	f003 0301 	and.w	r3, r3, #1
 8008d3a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008d3c:	4b98      	ldr	r3, [pc, #608]	; (8008fa0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008d3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d40:	08db      	lsrs	r3, r3, #3
 8008d42:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008d46:	693a      	ldr	r2, [r7, #16]
 8008d48:	fb02 f303 	mul.w	r3, r2, r3
 8008d4c:	ee07 3a90 	vmov	s15, r3
 8008d50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d54:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8008d58:	697b      	ldr	r3, [r7, #20]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	f000 8111 	beq.w	8008f82 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8008d60:	69bb      	ldr	r3, [r7, #24]
 8008d62:	2b02      	cmp	r3, #2
 8008d64:	f000 8083 	beq.w	8008e6e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8008d68:	69bb      	ldr	r3, [r7, #24]
 8008d6a:	2b02      	cmp	r3, #2
 8008d6c:	f200 80a1 	bhi.w	8008eb2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8008d70:	69bb      	ldr	r3, [r7, #24]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d003      	beq.n	8008d7e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8008d76:	69bb      	ldr	r3, [r7, #24]
 8008d78:	2b01      	cmp	r3, #1
 8008d7a:	d056      	beq.n	8008e2a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8008d7c:	e099      	b.n	8008eb2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008d7e:	4b88      	ldr	r3, [pc, #544]	; (8008fa0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	f003 0320 	and.w	r3, r3, #32
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d02d      	beq.n	8008de6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008d8a:	4b85      	ldr	r3, [pc, #532]	; (8008fa0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	08db      	lsrs	r3, r3, #3
 8008d90:	f003 0303 	and.w	r3, r3, #3
 8008d94:	4a83      	ldr	r2, [pc, #524]	; (8008fa4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8008d96:	fa22 f303 	lsr.w	r3, r2, r3
 8008d9a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008d9c:	68bb      	ldr	r3, [r7, #8]
 8008d9e:	ee07 3a90 	vmov	s15, r3
 8008da2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008da6:	697b      	ldr	r3, [r7, #20]
 8008da8:	ee07 3a90 	vmov	s15, r3
 8008dac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008db0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008db4:	4b7a      	ldr	r3, [pc, #488]	; (8008fa0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008db8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008dbc:	ee07 3a90 	vmov	s15, r3
 8008dc0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008dc4:	ed97 6a03 	vldr	s12, [r7, #12]
 8008dc8:	eddf 5a77 	vldr	s11, [pc, #476]	; 8008fa8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008dcc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008dd0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008dd4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008dd8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ddc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008de0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008de4:	e087      	b.n	8008ef6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008de6:	697b      	ldr	r3, [r7, #20]
 8008de8:	ee07 3a90 	vmov	s15, r3
 8008dec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008df0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8008fac <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008df4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008df8:	4b69      	ldr	r3, [pc, #420]	; (8008fa0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e00:	ee07 3a90 	vmov	s15, r3
 8008e04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e08:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e0c:	eddf 5a66 	vldr	s11, [pc, #408]	; 8008fa8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008e10:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e14:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e18:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008e1c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e24:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008e28:	e065      	b.n	8008ef6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008e2a:	697b      	ldr	r3, [r7, #20]
 8008e2c:	ee07 3a90 	vmov	s15, r3
 8008e30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e34:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8008fb0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8008e38:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e3c:	4b58      	ldr	r3, [pc, #352]	; (8008fa0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e44:	ee07 3a90 	vmov	s15, r3
 8008e48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e4c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e50:	eddf 5a55 	vldr	s11, [pc, #340]	; 8008fa8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008e54:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e58:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e5c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008e60:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e68:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008e6c:	e043      	b.n	8008ef6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008e6e:	697b      	ldr	r3, [r7, #20]
 8008e70:	ee07 3a90 	vmov	s15, r3
 8008e74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e78:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8008fb4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8008e7c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e80:	4b47      	ldr	r3, [pc, #284]	; (8008fa0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e88:	ee07 3a90 	vmov	s15, r3
 8008e8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e90:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e94:	eddf 5a44 	vldr	s11, [pc, #272]	; 8008fa8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008e98:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e9c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ea0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008ea4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ea8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008eac:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008eb0:	e021      	b.n	8008ef6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008eb2:	697b      	ldr	r3, [r7, #20]
 8008eb4:	ee07 3a90 	vmov	s15, r3
 8008eb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ebc:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8008fac <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008ec0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ec4:	4b36      	ldr	r3, [pc, #216]	; (8008fa0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ec8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ecc:	ee07 3a90 	vmov	s15, r3
 8008ed0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ed4:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ed8:	eddf 5a33 	vldr	s11, [pc, #204]	; 8008fa8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008edc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ee0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ee4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008ee8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008eec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ef0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008ef4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8008ef6:	4b2a      	ldr	r3, [pc, #168]	; (8008fa0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008efa:	0a5b      	lsrs	r3, r3, #9
 8008efc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f00:	ee07 3a90 	vmov	s15, r3
 8008f04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f08:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008f0c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008f10:	edd7 6a07 	vldr	s13, [r7, #28]
 8008f14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f1c:	ee17 2a90 	vmov	r2, s15
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8008f24:	4b1e      	ldr	r3, [pc, #120]	; (8008fa0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f28:	0c1b      	lsrs	r3, r3, #16
 8008f2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f2e:	ee07 3a90 	vmov	s15, r3
 8008f32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f36:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008f3a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008f3e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008f42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f4a:	ee17 2a90 	vmov	r2, s15
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8008f52:	4b13      	ldr	r3, [pc, #76]	; (8008fa0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f56:	0e1b      	lsrs	r3, r3, #24
 8008f58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f5c:	ee07 3a90 	vmov	s15, r3
 8008f60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f64:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008f68:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008f6c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008f70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f78:	ee17 2a90 	vmov	r2, s15
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008f80:	e008      	b.n	8008f94 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	2200      	movs	r2, #0
 8008f86:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	2200      	movs	r2, #0
 8008f92:	609a      	str	r2, [r3, #8]
}
 8008f94:	bf00      	nop
 8008f96:	3724      	adds	r7, #36	; 0x24
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9e:	4770      	bx	lr
 8008fa0:	58024400 	.word	0x58024400
 8008fa4:	03d09000 	.word	0x03d09000
 8008fa8:	46000000 	.word	0x46000000
 8008fac:	4c742400 	.word	0x4c742400
 8008fb0:	4a742400 	.word	0x4a742400
 8008fb4:	4bbebc20 	.word	0x4bbebc20

08008fb8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b084      	sub	sp, #16
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
 8008fc0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008fc6:	4b53      	ldr	r3, [pc, #332]	; (8009114 <RCCEx_PLL2_Config+0x15c>)
 8008fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fca:	f003 0303 	and.w	r3, r3, #3
 8008fce:	2b03      	cmp	r3, #3
 8008fd0:	d101      	bne.n	8008fd6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008fd2:	2301      	movs	r3, #1
 8008fd4:	e099      	b.n	800910a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008fd6:	4b4f      	ldr	r3, [pc, #316]	; (8009114 <RCCEx_PLL2_Config+0x15c>)
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	4a4e      	ldr	r2, [pc, #312]	; (8009114 <RCCEx_PLL2_Config+0x15c>)
 8008fdc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008fe0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008fe2:	f7f9 f8a9 	bl	8002138 <HAL_GetTick>
 8008fe6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008fe8:	e008      	b.n	8008ffc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008fea:	f7f9 f8a5 	bl	8002138 <HAL_GetTick>
 8008fee:	4602      	mov	r2, r0
 8008ff0:	68bb      	ldr	r3, [r7, #8]
 8008ff2:	1ad3      	subs	r3, r2, r3
 8008ff4:	2b02      	cmp	r3, #2
 8008ff6:	d901      	bls.n	8008ffc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008ff8:	2303      	movs	r3, #3
 8008ffa:	e086      	b.n	800910a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008ffc:	4b45      	ldr	r3, [pc, #276]	; (8009114 <RCCEx_PLL2_Config+0x15c>)
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009004:	2b00      	cmp	r3, #0
 8009006:	d1f0      	bne.n	8008fea <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009008:	4b42      	ldr	r3, [pc, #264]	; (8009114 <RCCEx_PLL2_Config+0x15c>)
 800900a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800900c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	031b      	lsls	r3, r3, #12
 8009016:	493f      	ldr	r1, [pc, #252]	; (8009114 <RCCEx_PLL2_Config+0x15c>)
 8009018:	4313      	orrs	r3, r2
 800901a:	628b      	str	r3, [r1, #40]	; 0x28
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	685b      	ldr	r3, [r3, #4]
 8009020:	3b01      	subs	r3, #1
 8009022:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	689b      	ldr	r3, [r3, #8]
 800902a:	3b01      	subs	r3, #1
 800902c:	025b      	lsls	r3, r3, #9
 800902e:	b29b      	uxth	r3, r3
 8009030:	431a      	orrs	r2, r3
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	68db      	ldr	r3, [r3, #12]
 8009036:	3b01      	subs	r3, #1
 8009038:	041b      	lsls	r3, r3, #16
 800903a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800903e:	431a      	orrs	r2, r3
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	691b      	ldr	r3, [r3, #16]
 8009044:	3b01      	subs	r3, #1
 8009046:	061b      	lsls	r3, r3, #24
 8009048:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800904c:	4931      	ldr	r1, [pc, #196]	; (8009114 <RCCEx_PLL2_Config+0x15c>)
 800904e:	4313      	orrs	r3, r2
 8009050:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009052:	4b30      	ldr	r3, [pc, #192]	; (8009114 <RCCEx_PLL2_Config+0x15c>)
 8009054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009056:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	695b      	ldr	r3, [r3, #20]
 800905e:	492d      	ldr	r1, [pc, #180]	; (8009114 <RCCEx_PLL2_Config+0x15c>)
 8009060:	4313      	orrs	r3, r2
 8009062:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009064:	4b2b      	ldr	r3, [pc, #172]	; (8009114 <RCCEx_PLL2_Config+0x15c>)
 8009066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009068:	f023 0220 	bic.w	r2, r3, #32
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	699b      	ldr	r3, [r3, #24]
 8009070:	4928      	ldr	r1, [pc, #160]	; (8009114 <RCCEx_PLL2_Config+0x15c>)
 8009072:	4313      	orrs	r3, r2
 8009074:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009076:	4b27      	ldr	r3, [pc, #156]	; (8009114 <RCCEx_PLL2_Config+0x15c>)
 8009078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800907a:	4a26      	ldr	r2, [pc, #152]	; (8009114 <RCCEx_PLL2_Config+0x15c>)
 800907c:	f023 0310 	bic.w	r3, r3, #16
 8009080:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009082:	4b24      	ldr	r3, [pc, #144]	; (8009114 <RCCEx_PLL2_Config+0x15c>)
 8009084:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009086:	4b24      	ldr	r3, [pc, #144]	; (8009118 <RCCEx_PLL2_Config+0x160>)
 8009088:	4013      	ands	r3, r2
 800908a:	687a      	ldr	r2, [r7, #4]
 800908c:	69d2      	ldr	r2, [r2, #28]
 800908e:	00d2      	lsls	r2, r2, #3
 8009090:	4920      	ldr	r1, [pc, #128]	; (8009114 <RCCEx_PLL2_Config+0x15c>)
 8009092:	4313      	orrs	r3, r2
 8009094:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009096:	4b1f      	ldr	r3, [pc, #124]	; (8009114 <RCCEx_PLL2_Config+0x15c>)
 8009098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800909a:	4a1e      	ldr	r2, [pc, #120]	; (8009114 <RCCEx_PLL2_Config+0x15c>)
 800909c:	f043 0310 	orr.w	r3, r3, #16
 80090a0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80090a2:	683b      	ldr	r3, [r7, #0]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d106      	bne.n	80090b6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80090a8:	4b1a      	ldr	r3, [pc, #104]	; (8009114 <RCCEx_PLL2_Config+0x15c>)
 80090aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090ac:	4a19      	ldr	r2, [pc, #100]	; (8009114 <RCCEx_PLL2_Config+0x15c>)
 80090ae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80090b2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80090b4:	e00f      	b.n	80090d6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80090b6:	683b      	ldr	r3, [r7, #0]
 80090b8:	2b01      	cmp	r3, #1
 80090ba:	d106      	bne.n	80090ca <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80090bc:	4b15      	ldr	r3, [pc, #84]	; (8009114 <RCCEx_PLL2_Config+0x15c>)
 80090be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090c0:	4a14      	ldr	r2, [pc, #80]	; (8009114 <RCCEx_PLL2_Config+0x15c>)
 80090c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80090c6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80090c8:	e005      	b.n	80090d6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80090ca:	4b12      	ldr	r3, [pc, #72]	; (8009114 <RCCEx_PLL2_Config+0x15c>)
 80090cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090ce:	4a11      	ldr	r2, [pc, #68]	; (8009114 <RCCEx_PLL2_Config+0x15c>)
 80090d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80090d4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80090d6:	4b0f      	ldr	r3, [pc, #60]	; (8009114 <RCCEx_PLL2_Config+0x15c>)
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	4a0e      	ldr	r2, [pc, #56]	; (8009114 <RCCEx_PLL2_Config+0x15c>)
 80090dc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80090e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80090e2:	f7f9 f829 	bl	8002138 <HAL_GetTick>
 80090e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80090e8:	e008      	b.n	80090fc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80090ea:	f7f9 f825 	bl	8002138 <HAL_GetTick>
 80090ee:	4602      	mov	r2, r0
 80090f0:	68bb      	ldr	r3, [r7, #8]
 80090f2:	1ad3      	subs	r3, r2, r3
 80090f4:	2b02      	cmp	r3, #2
 80090f6:	d901      	bls.n	80090fc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80090f8:	2303      	movs	r3, #3
 80090fa:	e006      	b.n	800910a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80090fc:	4b05      	ldr	r3, [pc, #20]	; (8009114 <RCCEx_PLL2_Config+0x15c>)
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009104:	2b00      	cmp	r3, #0
 8009106:	d0f0      	beq.n	80090ea <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009108:	7bfb      	ldrb	r3, [r7, #15]
}
 800910a:	4618      	mov	r0, r3
 800910c:	3710      	adds	r7, #16
 800910e:	46bd      	mov	sp, r7
 8009110:	bd80      	pop	{r7, pc}
 8009112:	bf00      	nop
 8009114:	58024400 	.word	0x58024400
 8009118:	ffff0007 	.word	0xffff0007

0800911c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800911c:	b580      	push	{r7, lr}
 800911e:	b084      	sub	sp, #16
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
 8009124:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009126:	2300      	movs	r3, #0
 8009128:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800912a:	4b53      	ldr	r3, [pc, #332]	; (8009278 <RCCEx_PLL3_Config+0x15c>)
 800912c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800912e:	f003 0303 	and.w	r3, r3, #3
 8009132:	2b03      	cmp	r3, #3
 8009134:	d101      	bne.n	800913a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009136:	2301      	movs	r3, #1
 8009138:	e099      	b.n	800926e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800913a:	4b4f      	ldr	r3, [pc, #316]	; (8009278 <RCCEx_PLL3_Config+0x15c>)
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	4a4e      	ldr	r2, [pc, #312]	; (8009278 <RCCEx_PLL3_Config+0x15c>)
 8009140:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009144:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009146:	f7f8 fff7 	bl	8002138 <HAL_GetTick>
 800914a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800914c:	e008      	b.n	8009160 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800914e:	f7f8 fff3 	bl	8002138 <HAL_GetTick>
 8009152:	4602      	mov	r2, r0
 8009154:	68bb      	ldr	r3, [r7, #8]
 8009156:	1ad3      	subs	r3, r2, r3
 8009158:	2b02      	cmp	r3, #2
 800915a:	d901      	bls.n	8009160 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800915c:	2303      	movs	r3, #3
 800915e:	e086      	b.n	800926e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009160:	4b45      	ldr	r3, [pc, #276]	; (8009278 <RCCEx_PLL3_Config+0x15c>)
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009168:	2b00      	cmp	r3, #0
 800916a:	d1f0      	bne.n	800914e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800916c:	4b42      	ldr	r3, [pc, #264]	; (8009278 <RCCEx_PLL3_Config+0x15c>)
 800916e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009170:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	051b      	lsls	r3, r3, #20
 800917a:	493f      	ldr	r1, [pc, #252]	; (8009278 <RCCEx_PLL3_Config+0x15c>)
 800917c:	4313      	orrs	r3, r2
 800917e:	628b      	str	r3, [r1, #40]	; 0x28
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	685b      	ldr	r3, [r3, #4]
 8009184:	3b01      	subs	r3, #1
 8009186:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	689b      	ldr	r3, [r3, #8]
 800918e:	3b01      	subs	r3, #1
 8009190:	025b      	lsls	r3, r3, #9
 8009192:	b29b      	uxth	r3, r3
 8009194:	431a      	orrs	r2, r3
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	68db      	ldr	r3, [r3, #12]
 800919a:	3b01      	subs	r3, #1
 800919c:	041b      	lsls	r3, r3, #16
 800919e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80091a2:	431a      	orrs	r2, r3
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	691b      	ldr	r3, [r3, #16]
 80091a8:	3b01      	subs	r3, #1
 80091aa:	061b      	lsls	r3, r3, #24
 80091ac:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80091b0:	4931      	ldr	r1, [pc, #196]	; (8009278 <RCCEx_PLL3_Config+0x15c>)
 80091b2:	4313      	orrs	r3, r2
 80091b4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80091b6:	4b30      	ldr	r3, [pc, #192]	; (8009278 <RCCEx_PLL3_Config+0x15c>)
 80091b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091ba:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	695b      	ldr	r3, [r3, #20]
 80091c2:	492d      	ldr	r1, [pc, #180]	; (8009278 <RCCEx_PLL3_Config+0x15c>)
 80091c4:	4313      	orrs	r3, r2
 80091c6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80091c8:	4b2b      	ldr	r3, [pc, #172]	; (8009278 <RCCEx_PLL3_Config+0x15c>)
 80091ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091cc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	699b      	ldr	r3, [r3, #24]
 80091d4:	4928      	ldr	r1, [pc, #160]	; (8009278 <RCCEx_PLL3_Config+0x15c>)
 80091d6:	4313      	orrs	r3, r2
 80091d8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80091da:	4b27      	ldr	r3, [pc, #156]	; (8009278 <RCCEx_PLL3_Config+0x15c>)
 80091dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091de:	4a26      	ldr	r2, [pc, #152]	; (8009278 <RCCEx_PLL3_Config+0x15c>)
 80091e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80091e4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80091e6:	4b24      	ldr	r3, [pc, #144]	; (8009278 <RCCEx_PLL3_Config+0x15c>)
 80091e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80091ea:	4b24      	ldr	r3, [pc, #144]	; (800927c <RCCEx_PLL3_Config+0x160>)
 80091ec:	4013      	ands	r3, r2
 80091ee:	687a      	ldr	r2, [r7, #4]
 80091f0:	69d2      	ldr	r2, [r2, #28]
 80091f2:	00d2      	lsls	r2, r2, #3
 80091f4:	4920      	ldr	r1, [pc, #128]	; (8009278 <RCCEx_PLL3_Config+0x15c>)
 80091f6:	4313      	orrs	r3, r2
 80091f8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80091fa:	4b1f      	ldr	r3, [pc, #124]	; (8009278 <RCCEx_PLL3_Config+0x15c>)
 80091fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091fe:	4a1e      	ldr	r2, [pc, #120]	; (8009278 <RCCEx_PLL3_Config+0x15c>)
 8009200:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009204:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009206:	683b      	ldr	r3, [r7, #0]
 8009208:	2b00      	cmp	r3, #0
 800920a:	d106      	bne.n	800921a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800920c:	4b1a      	ldr	r3, [pc, #104]	; (8009278 <RCCEx_PLL3_Config+0x15c>)
 800920e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009210:	4a19      	ldr	r2, [pc, #100]	; (8009278 <RCCEx_PLL3_Config+0x15c>)
 8009212:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009216:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009218:	e00f      	b.n	800923a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800921a:	683b      	ldr	r3, [r7, #0]
 800921c:	2b01      	cmp	r3, #1
 800921e:	d106      	bne.n	800922e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009220:	4b15      	ldr	r3, [pc, #84]	; (8009278 <RCCEx_PLL3_Config+0x15c>)
 8009222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009224:	4a14      	ldr	r2, [pc, #80]	; (8009278 <RCCEx_PLL3_Config+0x15c>)
 8009226:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800922a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800922c:	e005      	b.n	800923a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800922e:	4b12      	ldr	r3, [pc, #72]	; (8009278 <RCCEx_PLL3_Config+0x15c>)
 8009230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009232:	4a11      	ldr	r2, [pc, #68]	; (8009278 <RCCEx_PLL3_Config+0x15c>)
 8009234:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009238:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800923a:	4b0f      	ldr	r3, [pc, #60]	; (8009278 <RCCEx_PLL3_Config+0x15c>)
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	4a0e      	ldr	r2, [pc, #56]	; (8009278 <RCCEx_PLL3_Config+0x15c>)
 8009240:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009244:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009246:	f7f8 ff77 	bl	8002138 <HAL_GetTick>
 800924a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800924c:	e008      	b.n	8009260 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800924e:	f7f8 ff73 	bl	8002138 <HAL_GetTick>
 8009252:	4602      	mov	r2, r0
 8009254:	68bb      	ldr	r3, [r7, #8]
 8009256:	1ad3      	subs	r3, r2, r3
 8009258:	2b02      	cmp	r3, #2
 800925a:	d901      	bls.n	8009260 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800925c:	2303      	movs	r3, #3
 800925e:	e006      	b.n	800926e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009260:	4b05      	ldr	r3, [pc, #20]	; (8009278 <RCCEx_PLL3_Config+0x15c>)
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009268:	2b00      	cmp	r3, #0
 800926a:	d0f0      	beq.n	800924e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800926c:	7bfb      	ldrb	r3, [r7, #15]
}
 800926e:	4618      	mov	r0, r3
 8009270:	3710      	adds	r7, #16
 8009272:	46bd      	mov	sp, r7
 8009274:	bd80      	pop	{r7, pc}
 8009276:	bf00      	nop
 8009278:	58024400 	.word	0x58024400
 800927c:	ffff0007 	.word	0xffff0007

08009280 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009280:	b580      	push	{r7, lr}
 8009282:	b082      	sub	sp, #8
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2b00      	cmp	r3, #0
 800928c:	d101      	bne.n	8009292 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800928e:	2301      	movs	r3, #1
 8009290:	e049      	b.n	8009326 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009298:	b2db      	uxtb	r3, r3
 800929a:	2b00      	cmp	r3, #0
 800929c:	d106      	bne.n	80092ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	2200      	movs	r2, #0
 80092a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80092a6:	6878      	ldr	r0, [r7, #4]
 80092a8:	f7f7 ff06 	bl	80010b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	2202      	movs	r2, #2
 80092b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681a      	ldr	r2, [r3, #0]
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	3304      	adds	r3, #4
 80092bc:	4619      	mov	r1, r3
 80092be:	4610      	mov	r0, r2
 80092c0:	f000 f8a6 	bl	8009410 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	2201      	movs	r2, #1
 80092c8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	2201      	movs	r2, #1
 80092d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	2201      	movs	r2, #1
 80092d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2201      	movs	r2, #1
 80092e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	2201      	movs	r2, #1
 80092e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	2201      	movs	r2, #1
 80092f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	2201      	movs	r2, #1
 80092f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	2201      	movs	r2, #1
 8009300:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	2201      	movs	r2, #1
 8009308:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	2201      	movs	r2, #1
 8009310:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	2201      	movs	r2, #1
 8009318:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	2201      	movs	r2, #1
 8009320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009324:	2300      	movs	r3, #0
}
 8009326:	4618      	mov	r0, r3
 8009328:	3708      	adds	r7, #8
 800932a:	46bd      	mov	sp, r7
 800932c:	bd80      	pop	{r7, pc}
	...

08009330 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009330:	b480      	push	{r7}
 8009332:	b085      	sub	sp, #20
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800933e:	b2db      	uxtb	r3, r3
 8009340:	2b01      	cmp	r3, #1
 8009342:	d001      	beq.n	8009348 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009344:	2301      	movs	r3, #1
 8009346:	e04c      	b.n	80093e2 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	2202      	movs	r2, #2
 800934c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	4a26      	ldr	r2, [pc, #152]	; (80093f0 <HAL_TIM_Base_Start+0xc0>)
 8009356:	4293      	cmp	r3, r2
 8009358:	d022      	beq.n	80093a0 <HAL_TIM_Base_Start+0x70>
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009362:	d01d      	beq.n	80093a0 <HAL_TIM_Base_Start+0x70>
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	4a22      	ldr	r2, [pc, #136]	; (80093f4 <HAL_TIM_Base_Start+0xc4>)
 800936a:	4293      	cmp	r3, r2
 800936c:	d018      	beq.n	80093a0 <HAL_TIM_Base_Start+0x70>
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	4a21      	ldr	r2, [pc, #132]	; (80093f8 <HAL_TIM_Base_Start+0xc8>)
 8009374:	4293      	cmp	r3, r2
 8009376:	d013      	beq.n	80093a0 <HAL_TIM_Base_Start+0x70>
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	4a1f      	ldr	r2, [pc, #124]	; (80093fc <HAL_TIM_Base_Start+0xcc>)
 800937e:	4293      	cmp	r3, r2
 8009380:	d00e      	beq.n	80093a0 <HAL_TIM_Base_Start+0x70>
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	4a1e      	ldr	r2, [pc, #120]	; (8009400 <HAL_TIM_Base_Start+0xd0>)
 8009388:	4293      	cmp	r3, r2
 800938a:	d009      	beq.n	80093a0 <HAL_TIM_Base_Start+0x70>
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	4a1c      	ldr	r2, [pc, #112]	; (8009404 <HAL_TIM_Base_Start+0xd4>)
 8009392:	4293      	cmp	r3, r2
 8009394:	d004      	beq.n	80093a0 <HAL_TIM_Base_Start+0x70>
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	4a1b      	ldr	r2, [pc, #108]	; (8009408 <HAL_TIM_Base_Start+0xd8>)
 800939c:	4293      	cmp	r3, r2
 800939e:	d115      	bne.n	80093cc <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	689a      	ldr	r2, [r3, #8]
 80093a6:	4b19      	ldr	r3, [pc, #100]	; (800940c <HAL_TIM_Base_Start+0xdc>)
 80093a8:	4013      	ands	r3, r2
 80093aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	2b06      	cmp	r3, #6
 80093b0:	d015      	beq.n	80093de <HAL_TIM_Base_Start+0xae>
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80093b8:	d011      	beq.n	80093de <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	681a      	ldr	r2, [r3, #0]
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	f042 0201 	orr.w	r2, r2, #1
 80093c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80093ca:	e008      	b.n	80093de <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	681a      	ldr	r2, [r3, #0]
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	f042 0201 	orr.w	r2, r2, #1
 80093da:	601a      	str	r2, [r3, #0]
 80093dc:	e000      	b.n	80093e0 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80093de:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80093e0:	2300      	movs	r3, #0
}
 80093e2:	4618      	mov	r0, r3
 80093e4:	3714      	adds	r7, #20
 80093e6:	46bd      	mov	sp, r7
 80093e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ec:	4770      	bx	lr
 80093ee:	bf00      	nop
 80093f0:	40010000 	.word	0x40010000
 80093f4:	40000400 	.word	0x40000400
 80093f8:	40000800 	.word	0x40000800
 80093fc:	40000c00 	.word	0x40000c00
 8009400:	40010400 	.word	0x40010400
 8009404:	40001800 	.word	0x40001800
 8009408:	40014000 	.word	0x40014000
 800940c:	00010007 	.word	0x00010007

08009410 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009410:	b480      	push	{r7}
 8009412:	b085      	sub	sp, #20
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
 8009418:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	4a40      	ldr	r2, [pc, #256]	; (8009524 <TIM_Base_SetConfig+0x114>)
 8009424:	4293      	cmp	r3, r2
 8009426:	d013      	beq.n	8009450 <TIM_Base_SetConfig+0x40>
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800942e:	d00f      	beq.n	8009450 <TIM_Base_SetConfig+0x40>
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	4a3d      	ldr	r2, [pc, #244]	; (8009528 <TIM_Base_SetConfig+0x118>)
 8009434:	4293      	cmp	r3, r2
 8009436:	d00b      	beq.n	8009450 <TIM_Base_SetConfig+0x40>
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	4a3c      	ldr	r2, [pc, #240]	; (800952c <TIM_Base_SetConfig+0x11c>)
 800943c:	4293      	cmp	r3, r2
 800943e:	d007      	beq.n	8009450 <TIM_Base_SetConfig+0x40>
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	4a3b      	ldr	r2, [pc, #236]	; (8009530 <TIM_Base_SetConfig+0x120>)
 8009444:	4293      	cmp	r3, r2
 8009446:	d003      	beq.n	8009450 <TIM_Base_SetConfig+0x40>
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	4a3a      	ldr	r2, [pc, #232]	; (8009534 <TIM_Base_SetConfig+0x124>)
 800944c:	4293      	cmp	r3, r2
 800944e:	d108      	bne.n	8009462 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009456:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009458:	683b      	ldr	r3, [r7, #0]
 800945a:	685b      	ldr	r3, [r3, #4]
 800945c:	68fa      	ldr	r2, [r7, #12]
 800945e:	4313      	orrs	r3, r2
 8009460:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	4a2f      	ldr	r2, [pc, #188]	; (8009524 <TIM_Base_SetConfig+0x114>)
 8009466:	4293      	cmp	r3, r2
 8009468:	d01f      	beq.n	80094aa <TIM_Base_SetConfig+0x9a>
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009470:	d01b      	beq.n	80094aa <TIM_Base_SetConfig+0x9a>
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	4a2c      	ldr	r2, [pc, #176]	; (8009528 <TIM_Base_SetConfig+0x118>)
 8009476:	4293      	cmp	r3, r2
 8009478:	d017      	beq.n	80094aa <TIM_Base_SetConfig+0x9a>
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	4a2b      	ldr	r2, [pc, #172]	; (800952c <TIM_Base_SetConfig+0x11c>)
 800947e:	4293      	cmp	r3, r2
 8009480:	d013      	beq.n	80094aa <TIM_Base_SetConfig+0x9a>
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	4a2a      	ldr	r2, [pc, #168]	; (8009530 <TIM_Base_SetConfig+0x120>)
 8009486:	4293      	cmp	r3, r2
 8009488:	d00f      	beq.n	80094aa <TIM_Base_SetConfig+0x9a>
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	4a29      	ldr	r2, [pc, #164]	; (8009534 <TIM_Base_SetConfig+0x124>)
 800948e:	4293      	cmp	r3, r2
 8009490:	d00b      	beq.n	80094aa <TIM_Base_SetConfig+0x9a>
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	4a28      	ldr	r2, [pc, #160]	; (8009538 <TIM_Base_SetConfig+0x128>)
 8009496:	4293      	cmp	r3, r2
 8009498:	d007      	beq.n	80094aa <TIM_Base_SetConfig+0x9a>
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	4a27      	ldr	r2, [pc, #156]	; (800953c <TIM_Base_SetConfig+0x12c>)
 800949e:	4293      	cmp	r3, r2
 80094a0:	d003      	beq.n	80094aa <TIM_Base_SetConfig+0x9a>
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	4a26      	ldr	r2, [pc, #152]	; (8009540 <TIM_Base_SetConfig+0x130>)
 80094a6:	4293      	cmp	r3, r2
 80094a8:	d108      	bne.n	80094bc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80094b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80094b2:	683b      	ldr	r3, [r7, #0]
 80094b4:	68db      	ldr	r3, [r3, #12]
 80094b6:	68fa      	ldr	r2, [r7, #12]
 80094b8:	4313      	orrs	r3, r2
 80094ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80094c2:	683b      	ldr	r3, [r7, #0]
 80094c4:	695b      	ldr	r3, [r3, #20]
 80094c6:	4313      	orrs	r3, r2
 80094c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	68fa      	ldr	r2, [r7, #12]
 80094ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80094d0:	683b      	ldr	r3, [r7, #0]
 80094d2:	689a      	ldr	r2, [r3, #8]
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80094d8:	683b      	ldr	r3, [r7, #0]
 80094da:	681a      	ldr	r2, [r3, #0]
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	4a10      	ldr	r2, [pc, #64]	; (8009524 <TIM_Base_SetConfig+0x114>)
 80094e4:	4293      	cmp	r3, r2
 80094e6:	d00f      	beq.n	8009508 <TIM_Base_SetConfig+0xf8>
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	4a12      	ldr	r2, [pc, #72]	; (8009534 <TIM_Base_SetConfig+0x124>)
 80094ec:	4293      	cmp	r3, r2
 80094ee:	d00b      	beq.n	8009508 <TIM_Base_SetConfig+0xf8>
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	4a11      	ldr	r2, [pc, #68]	; (8009538 <TIM_Base_SetConfig+0x128>)
 80094f4:	4293      	cmp	r3, r2
 80094f6:	d007      	beq.n	8009508 <TIM_Base_SetConfig+0xf8>
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	4a10      	ldr	r2, [pc, #64]	; (800953c <TIM_Base_SetConfig+0x12c>)
 80094fc:	4293      	cmp	r3, r2
 80094fe:	d003      	beq.n	8009508 <TIM_Base_SetConfig+0xf8>
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	4a0f      	ldr	r2, [pc, #60]	; (8009540 <TIM_Base_SetConfig+0x130>)
 8009504:	4293      	cmp	r3, r2
 8009506:	d103      	bne.n	8009510 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009508:	683b      	ldr	r3, [r7, #0]
 800950a:	691a      	ldr	r2, [r3, #16]
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	2201      	movs	r2, #1
 8009514:	615a      	str	r2, [r3, #20]
}
 8009516:	bf00      	nop
 8009518:	3714      	adds	r7, #20
 800951a:	46bd      	mov	sp, r7
 800951c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009520:	4770      	bx	lr
 8009522:	bf00      	nop
 8009524:	40010000 	.word	0x40010000
 8009528:	40000400 	.word	0x40000400
 800952c:	40000800 	.word	0x40000800
 8009530:	40000c00 	.word	0x40000c00
 8009534:	40010400 	.word	0x40010400
 8009538:	40014000 	.word	0x40014000
 800953c:	40014400 	.word	0x40014400
 8009540:	40014800 	.word	0x40014800

08009544 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009544:	b084      	sub	sp, #16
 8009546:	b580      	push	{r7, lr}
 8009548:	b084      	sub	sp, #16
 800954a:	af00      	add	r7, sp, #0
 800954c:	6078      	str	r0, [r7, #4]
 800954e:	f107 001c 	add.w	r0, r7, #28
 8009552:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009558:	2b01      	cmp	r3, #1
 800955a:	d120      	bne.n	800959e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009560:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	68da      	ldr	r2, [r3, #12]
 800956c:	4b2a      	ldr	r3, [pc, #168]	; (8009618 <USB_CoreInit+0xd4>)
 800956e:	4013      	ands	r3, r2
 8009570:	687a      	ldr	r2, [r7, #4]
 8009572:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	68db      	ldr	r3, [r3, #12]
 8009578:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009580:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009582:	2b01      	cmp	r3, #1
 8009584:	d105      	bne.n	8009592 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	68db      	ldr	r3, [r3, #12]
 800958a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009592:	6878      	ldr	r0, [r7, #4]
 8009594:	f001 faf8 	bl	800ab88 <USB_CoreReset>
 8009598:	4603      	mov	r3, r0
 800959a:	73fb      	strb	r3, [r7, #15]
 800959c:	e01a      	b.n	80095d4 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	68db      	ldr	r3, [r3, #12]
 80095a2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80095aa:	6878      	ldr	r0, [r7, #4]
 80095ac:	f001 faec 	bl	800ab88 <USB_CoreReset>
 80095b0:	4603      	mov	r3, r0
 80095b2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80095b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d106      	bne.n	80095c8 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095be:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	639a      	str	r2, [r3, #56]	; 0x38
 80095c6:	e005      	b.n	80095d4 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095cc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80095d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095d6:	2b01      	cmp	r3, #1
 80095d8:	d116      	bne.n	8009608 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80095de:	b29a      	uxth	r2, r3
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80095e8:	4b0c      	ldr	r3, [pc, #48]	; (800961c <USB_CoreInit+0xd8>)
 80095ea:	4313      	orrs	r3, r2
 80095ec:	687a      	ldr	r2, [r7, #4]
 80095ee:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	689b      	ldr	r3, [r3, #8]
 80095f4:	f043 0206 	orr.w	r2, r3, #6
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	689b      	ldr	r3, [r3, #8]
 8009600:	f043 0220 	orr.w	r2, r3, #32
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009608:	7bfb      	ldrb	r3, [r7, #15]
}
 800960a:	4618      	mov	r0, r3
 800960c:	3710      	adds	r7, #16
 800960e:	46bd      	mov	sp, r7
 8009610:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009614:	b004      	add	sp, #16
 8009616:	4770      	bx	lr
 8009618:	ffbdffbf 	.word	0xffbdffbf
 800961c:	03ee0000 	.word	0x03ee0000

08009620 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8009620:	b480      	push	{r7}
 8009622:	b087      	sub	sp, #28
 8009624:	af00      	add	r7, sp, #0
 8009626:	60f8      	str	r0, [r7, #12]
 8009628:	60b9      	str	r1, [r7, #8]
 800962a:	4613      	mov	r3, r2
 800962c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800962e:	79fb      	ldrb	r3, [r7, #7]
 8009630:	2b02      	cmp	r3, #2
 8009632:	d165      	bne.n	8009700 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009634:	68bb      	ldr	r3, [r7, #8]
 8009636:	4a41      	ldr	r2, [pc, #260]	; (800973c <USB_SetTurnaroundTime+0x11c>)
 8009638:	4293      	cmp	r3, r2
 800963a:	d906      	bls.n	800964a <USB_SetTurnaroundTime+0x2a>
 800963c:	68bb      	ldr	r3, [r7, #8]
 800963e:	4a40      	ldr	r2, [pc, #256]	; (8009740 <USB_SetTurnaroundTime+0x120>)
 8009640:	4293      	cmp	r3, r2
 8009642:	d202      	bcs.n	800964a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8009644:	230f      	movs	r3, #15
 8009646:	617b      	str	r3, [r7, #20]
 8009648:	e062      	b.n	8009710 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800964a:	68bb      	ldr	r3, [r7, #8]
 800964c:	4a3c      	ldr	r2, [pc, #240]	; (8009740 <USB_SetTurnaroundTime+0x120>)
 800964e:	4293      	cmp	r3, r2
 8009650:	d306      	bcc.n	8009660 <USB_SetTurnaroundTime+0x40>
 8009652:	68bb      	ldr	r3, [r7, #8]
 8009654:	4a3b      	ldr	r2, [pc, #236]	; (8009744 <USB_SetTurnaroundTime+0x124>)
 8009656:	4293      	cmp	r3, r2
 8009658:	d202      	bcs.n	8009660 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800965a:	230e      	movs	r3, #14
 800965c:	617b      	str	r3, [r7, #20]
 800965e:	e057      	b.n	8009710 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009660:	68bb      	ldr	r3, [r7, #8]
 8009662:	4a38      	ldr	r2, [pc, #224]	; (8009744 <USB_SetTurnaroundTime+0x124>)
 8009664:	4293      	cmp	r3, r2
 8009666:	d306      	bcc.n	8009676 <USB_SetTurnaroundTime+0x56>
 8009668:	68bb      	ldr	r3, [r7, #8]
 800966a:	4a37      	ldr	r2, [pc, #220]	; (8009748 <USB_SetTurnaroundTime+0x128>)
 800966c:	4293      	cmp	r3, r2
 800966e:	d202      	bcs.n	8009676 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009670:	230d      	movs	r3, #13
 8009672:	617b      	str	r3, [r7, #20]
 8009674:	e04c      	b.n	8009710 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8009676:	68bb      	ldr	r3, [r7, #8]
 8009678:	4a33      	ldr	r2, [pc, #204]	; (8009748 <USB_SetTurnaroundTime+0x128>)
 800967a:	4293      	cmp	r3, r2
 800967c:	d306      	bcc.n	800968c <USB_SetTurnaroundTime+0x6c>
 800967e:	68bb      	ldr	r3, [r7, #8]
 8009680:	4a32      	ldr	r2, [pc, #200]	; (800974c <USB_SetTurnaroundTime+0x12c>)
 8009682:	4293      	cmp	r3, r2
 8009684:	d802      	bhi.n	800968c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8009686:	230c      	movs	r3, #12
 8009688:	617b      	str	r3, [r7, #20]
 800968a:	e041      	b.n	8009710 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800968c:	68bb      	ldr	r3, [r7, #8]
 800968e:	4a2f      	ldr	r2, [pc, #188]	; (800974c <USB_SetTurnaroundTime+0x12c>)
 8009690:	4293      	cmp	r3, r2
 8009692:	d906      	bls.n	80096a2 <USB_SetTurnaroundTime+0x82>
 8009694:	68bb      	ldr	r3, [r7, #8]
 8009696:	4a2e      	ldr	r2, [pc, #184]	; (8009750 <USB_SetTurnaroundTime+0x130>)
 8009698:	4293      	cmp	r3, r2
 800969a:	d802      	bhi.n	80096a2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800969c:	230b      	movs	r3, #11
 800969e:	617b      	str	r3, [r7, #20]
 80096a0:	e036      	b.n	8009710 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80096a2:	68bb      	ldr	r3, [r7, #8]
 80096a4:	4a2a      	ldr	r2, [pc, #168]	; (8009750 <USB_SetTurnaroundTime+0x130>)
 80096a6:	4293      	cmp	r3, r2
 80096a8:	d906      	bls.n	80096b8 <USB_SetTurnaroundTime+0x98>
 80096aa:	68bb      	ldr	r3, [r7, #8]
 80096ac:	4a29      	ldr	r2, [pc, #164]	; (8009754 <USB_SetTurnaroundTime+0x134>)
 80096ae:	4293      	cmp	r3, r2
 80096b0:	d802      	bhi.n	80096b8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80096b2:	230a      	movs	r3, #10
 80096b4:	617b      	str	r3, [r7, #20]
 80096b6:	e02b      	b.n	8009710 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80096b8:	68bb      	ldr	r3, [r7, #8]
 80096ba:	4a26      	ldr	r2, [pc, #152]	; (8009754 <USB_SetTurnaroundTime+0x134>)
 80096bc:	4293      	cmp	r3, r2
 80096be:	d906      	bls.n	80096ce <USB_SetTurnaroundTime+0xae>
 80096c0:	68bb      	ldr	r3, [r7, #8]
 80096c2:	4a25      	ldr	r2, [pc, #148]	; (8009758 <USB_SetTurnaroundTime+0x138>)
 80096c4:	4293      	cmp	r3, r2
 80096c6:	d202      	bcs.n	80096ce <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80096c8:	2309      	movs	r3, #9
 80096ca:	617b      	str	r3, [r7, #20]
 80096cc:	e020      	b.n	8009710 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80096ce:	68bb      	ldr	r3, [r7, #8]
 80096d0:	4a21      	ldr	r2, [pc, #132]	; (8009758 <USB_SetTurnaroundTime+0x138>)
 80096d2:	4293      	cmp	r3, r2
 80096d4:	d306      	bcc.n	80096e4 <USB_SetTurnaroundTime+0xc4>
 80096d6:	68bb      	ldr	r3, [r7, #8]
 80096d8:	4a20      	ldr	r2, [pc, #128]	; (800975c <USB_SetTurnaroundTime+0x13c>)
 80096da:	4293      	cmp	r3, r2
 80096dc:	d802      	bhi.n	80096e4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80096de:	2308      	movs	r3, #8
 80096e0:	617b      	str	r3, [r7, #20]
 80096e2:	e015      	b.n	8009710 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80096e4:	68bb      	ldr	r3, [r7, #8]
 80096e6:	4a1d      	ldr	r2, [pc, #116]	; (800975c <USB_SetTurnaroundTime+0x13c>)
 80096e8:	4293      	cmp	r3, r2
 80096ea:	d906      	bls.n	80096fa <USB_SetTurnaroundTime+0xda>
 80096ec:	68bb      	ldr	r3, [r7, #8]
 80096ee:	4a1c      	ldr	r2, [pc, #112]	; (8009760 <USB_SetTurnaroundTime+0x140>)
 80096f0:	4293      	cmp	r3, r2
 80096f2:	d202      	bcs.n	80096fa <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80096f4:	2307      	movs	r3, #7
 80096f6:	617b      	str	r3, [r7, #20]
 80096f8:	e00a      	b.n	8009710 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80096fa:	2306      	movs	r3, #6
 80096fc:	617b      	str	r3, [r7, #20]
 80096fe:	e007      	b.n	8009710 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8009700:	79fb      	ldrb	r3, [r7, #7]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d102      	bne.n	800970c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8009706:	2309      	movs	r3, #9
 8009708:	617b      	str	r3, [r7, #20]
 800970a:	e001      	b.n	8009710 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800970c:	2309      	movs	r3, #9
 800970e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	68db      	ldr	r3, [r3, #12]
 8009714:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	68da      	ldr	r2, [r3, #12]
 8009720:	697b      	ldr	r3, [r7, #20]
 8009722:	029b      	lsls	r3, r3, #10
 8009724:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8009728:	431a      	orrs	r2, r3
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800972e:	2300      	movs	r3, #0
}
 8009730:	4618      	mov	r0, r3
 8009732:	371c      	adds	r7, #28
 8009734:	46bd      	mov	sp, r7
 8009736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973a:	4770      	bx	lr
 800973c:	00d8acbf 	.word	0x00d8acbf
 8009740:	00e4e1c0 	.word	0x00e4e1c0
 8009744:	00f42400 	.word	0x00f42400
 8009748:	01067380 	.word	0x01067380
 800974c:	011a499f 	.word	0x011a499f
 8009750:	01312cff 	.word	0x01312cff
 8009754:	014ca43f 	.word	0x014ca43f
 8009758:	016e3600 	.word	0x016e3600
 800975c:	01a6ab1f 	.word	0x01a6ab1f
 8009760:	01e84800 	.word	0x01e84800

08009764 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009764:	b480      	push	{r7}
 8009766:	b083      	sub	sp, #12
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	689b      	ldr	r3, [r3, #8]
 8009770:	f043 0201 	orr.w	r2, r3, #1
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009778:	2300      	movs	r3, #0
}
 800977a:	4618      	mov	r0, r3
 800977c:	370c      	adds	r7, #12
 800977e:	46bd      	mov	sp, r7
 8009780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009784:	4770      	bx	lr

08009786 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009786:	b480      	push	{r7}
 8009788:	b083      	sub	sp, #12
 800978a:	af00      	add	r7, sp, #0
 800978c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	689b      	ldr	r3, [r3, #8]
 8009792:	f023 0201 	bic.w	r2, r3, #1
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800979a:	2300      	movs	r3, #0
}
 800979c:	4618      	mov	r0, r3
 800979e:	370c      	adds	r7, #12
 80097a0:	46bd      	mov	sp, r7
 80097a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a6:	4770      	bx	lr

080097a8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b084      	sub	sp, #16
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
 80097b0:	460b      	mov	r3, r1
 80097b2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80097b4:	2300      	movs	r3, #0
 80097b6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	68db      	ldr	r3, [r3, #12]
 80097bc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80097c4:	78fb      	ldrb	r3, [r7, #3]
 80097c6:	2b01      	cmp	r3, #1
 80097c8:	d115      	bne.n	80097f6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	68db      	ldr	r3, [r3, #12]
 80097ce:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80097d6:	2001      	movs	r0, #1
 80097d8:	f7f8 fcba 	bl	8002150 <HAL_Delay>
      ms++;
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	3301      	adds	r3, #1
 80097e0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80097e2:	6878      	ldr	r0, [r7, #4]
 80097e4:	f001 f93f 	bl	800aa66 <USB_GetMode>
 80097e8:	4603      	mov	r3, r0
 80097ea:	2b01      	cmp	r3, #1
 80097ec:	d01e      	beq.n	800982c <USB_SetCurrentMode+0x84>
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	2b31      	cmp	r3, #49	; 0x31
 80097f2:	d9f0      	bls.n	80097d6 <USB_SetCurrentMode+0x2e>
 80097f4:	e01a      	b.n	800982c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80097f6:	78fb      	ldrb	r3, [r7, #3]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d115      	bne.n	8009828 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	68db      	ldr	r3, [r3, #12]
 8009800:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009808:	2001      	movs	r0, #1
 800980a:	f7f8 fca1 	bl	8002150 <HAL_Delay>
      ms++;
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	3301      	adds	r3, #1
 8009812:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8009814:	6878      	ldr	r0, [r7, #4]
 8009816:	f001 f926 	bl	800aa66 <USB_GetMode>
 800981a:	4603      	mov	r3, r0
 800981c:	2b00      	cmp	r3, #0
 800981e:	d005      	beq.n	800982c <USB_SetCurrentMode+0x84>
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	2b31      	cmp	r3, #49	; 0x31
 8009824:	d9f0      	bls.n	8009808 <USB_SetCurrentMode+0x60>
 8009826:	e001      	b.n	800982c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009828:	2301      	movs	r3, #1
 800982a:	e005      	b.n	8009838 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	2b32      	cmp	r3, #50	; 0x32
 8009830:	d101      	bne.n	8009836 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009832:	2301      	movs	r3, #1
 8009834:	e000      	b.n	8009838 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009836:	2300      	movs	r3, #0
}
 8009838:	4618      	mov	r0, r3
 800983a:	3710      	adds	r7, #16
 800983c:	46bd      	mov	sp, r7
 800983e:	bd80      	pop	{r7, pc}

08009840 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009840:	b084      	sub	sp, #16
 8009842:	b580      	push	{r7, lr}
 8009844:	b086      	sub	sp, #24
 8009846:	af00      	add	r7, sp, #0
 8009848:	6078      	str	r0, [r7, #4]
 800984a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800984e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009852:	2300      	movs	r3, #0
 8009854:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800985a:	2300      	movs	r3, #0
 800985c:	613b      	str	r3, [r7, #16]
 800985e:	e009      	b.n	8009874 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009860:	687a      	ldr	r2, [r7, #4]
 8009862:	693b      	ldr	r3, [r7, #16]
 8009864:	3340      	adds	r3, #64	; 0x40
 8009866:	009b      	lsls	r3, r3, #2
 8009868:	4413      	add	r3, r2
 800986a:	2200      	movs	r2, #0
 800986c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800986e:	693b      	ldr	r3, [r7, #16]
 8009870:	3301      	adds	r3, #1
 8009872:	613b      	str	r3, [r7, #16]
 8009874:	693b      	ldr	r3, [r7, #16]
 8009876:	2b0e      	cmp	r3, #14
 8009878:	d9f2      	bls.n	8009860 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800987a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800987c:	2b00      	cmp	r3, #0
 800987e:	d11c      	bne.n	80098ba <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009886:	685b      	ldr	r3, [r3, #4]
 8009888:	68fa      	ldr	r2, [r7, #12]
 800988a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800988e:	f043 0302 	orr.w	r3, r3, #2
 8009892:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009898:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	601a      	str	r2, [r3, #0]
 80098b8:	e005      	b.n	80098c6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098be:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80098cc:	461a      	mov	r2, r3
 80098ce:	2300      	movs	r3, #0
 80098d0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098d8:	4619      	mov	r1, r3
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098e0:	461a      	mov	r2, r3
 80098e2:	680b      	ldr	r3, [r1, #0]
 80098e4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80098e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098e8:	2b01      	cmp	r3, #1
 80098ea:	d10c      	bne.n	8009906 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80098ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d104      	bne.n	80098fc <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80098f2:	2100      	movs	r1, #0
 80098f4:	6878      	ldr	r0, [r7, #4]
 80098f6:	f000 f965 	bl	8009bc4 <USB_SetDevSpeed>
 80098fa:	e008      	b.n	800990e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80098fc:	2101      	movs	r1, #1
 80098fe:	6878      	ldr	r0, [r7, #4]
 8009900:	f000 f960 	bl	8009bc4 <USB_SetDevSpeed>
 8009904:	e003      	b.n	800990e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009906:	2103      	movs	r1, #3
 8009908:	6878      	ldr	r0, [r7, #4]
 800990a:	f000 f95b 	bl	8009bc4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800990e:	2110      	movs	r1, #16
 8009910:	6878      	ldr	r0, [r7, #4]
 8009912:	f000 f8f3 	bl	8009afc <USB_FlushTxFifo>
 8009916:	4603      	mov	r3, r0
 8009918:	2b00      	cmp	r3, #0
 800991a:	d001      	beq.n	8009920 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800991c:	2301      	movs	r3, #1
 800991e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009920:	6878      	ldr	r0, [r7, #4]
 8009922:	f000 f91f 	bl	8009b64 <USB_FlushRxFifo>
 8009926:	4603      	mov	r3, r0
 8009928:	2b00      	cmp	r3, #0
 800992a:	d001      	beq.n	8009930 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800992c:	2301      	movs	r3, #1
 800992e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009936:	461a      	mov	r2, r3
 8009938:	2300      	movs	r3, #0
 800993a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009942:	461a      	mov	r2, r3
 8009944:	2300      	movs	r3, #0
 8009946:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800994e:	461a      	mov	r2, r3
 8009950:	2300      	movs	r3, #0
 8009952:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009954:	2300      	movs	r3, #0
 8009956:	613b      	str	r3, [r7, #16]
 8009958:	e043      	b.n	80099e2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800995a:	693b      	ldr	r3, [r7, #16]
 800995c:	015a      	lsls	r2, r3, #5
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	4413      	add	r3, r2
 8009962:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800996c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009970:	d118      	bne.n	80099a4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8009972:	693b      	ldr	r3, [r7, #16]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d10a      	bne.n	800998e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009978:	693b      	ldr	r3, [r7, #16]
 800997a:	015a      	lsls	r2, r3, #5
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	4413      	add	r3, r2
 8009980:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009984:	461a      	mov	r2, r3
 8009986:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800998a:	6013      	str	r3, [r2, #0]
 800998c:	e013      	b.n	80099b6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800998e:	693b      	ldr	r3, [r7, #16]
 8009990:	015a      	lsls	r2, r3, #5
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	4413      	add	r3, r2
 8009996:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800999a:	461a      	mov	r2, r3
 800999c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80099a0:	6013      	str	r3, [r2, #0]
 80099a2:	e008      	b.n	80099b6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80099a4:	693b      	ldr	r3, [r7, #16]
 80099a6:	015a      	lsls	r2, r3, #5
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	4413      	add	r3, r2
 80099ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099b0:	461a      	mov	r2, r3
 80099b2:	2300      	movs	r3, #0
 80099b4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80099b6:	693b      	ldr	r3, [r7, #16]
 80099b8:	015a      	lsls	r2, r3, #5
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	4413      	add	r3, r2
 80099be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099c2:	461a      	mov	r2, r3
 80099c4:	2300      	movs	r3, #0
 80099c6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80099c8:	693b      	ldr	r3, [r7, #16]
 80099ca:	015a      	lsls	r2, r3, #5
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	4413      	add	r3, r2
 80099d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099d4:	461a      	mov	r2, r3
 80099d6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80099da:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80099dc:	693b      	ldr	r3, [r7, #16]
 80099de:	3301      	adds	r3, #1
 80099e0:	613b      	str	r3, [r7, #16]
 80099e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099e4:	693a      	ldr	r2, [r7, #16]
 80099e6:	429a      	cmp	r2, r3
 80099e8:	d3b7      	bcc.n	800995a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80099ea:	2300      	movs	r3, #0
 80099ec:	613b      	str	r3, [r7, #16]
 80099ee:	e043      	b.n	8009a78 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80099f0:	693b      	ldr	r3, [r7, #16]
 80099f2:	015a      	lsls	r2, r3, #5
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	4413      	add	r3, r2
 80099f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009a02:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009a06:	d118      	bne.n	8009a3a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8009a08:	693b      	ldr	r3, [r7, #16]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d10a      	bne.n	8009a24 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009a0e:	693b      	ldr	r3, [r7, #16]
 8009a10:	015a      	lsls	r2, r3, #5
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	4413      	add	r3, r2
 8009a16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a1a:	461a      	mov	r2, r3
 8009a1c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009a20:	6013      	str	r3, [r2, #0]
 8009a22:	e013      	b.n	8009a4c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009a24:	693b      	ldr	r3, [r7, #16]
 8009a26:	015a      	lsls	r2, r3, #5
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	4413      	add	r3, r2
 8009a2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a30:	461a      	mov	r2, r3
 8009a32:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009a36:	6013      	str	r3, [r2, #0]
 8009a38:	e008      	b.n	8009a4c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009a3a:	693b      	ldr	r3, [r7, #16]
 8009a3c:	015a      	lsls	r2, r3, #5
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	4413      	add	r3, r2
 8009a42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a46:	461a      	mov	r2, r3
 8009a48:	2300      	movs	r3, #0
 8009a4a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009a4c:	693b      	ldr	r3, [r7, #16]
 8009a4e:	015a      	lsls	r2, r3, #5
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	4413      	add	r3, r2
 8009a54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a58:	461a      	mov	r2, r3
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009a5e:	693b      	ldr	r3, [r7, #16]
 8009a60:	015a      	lsls	r2, r3, #5
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	4413      	add	r3, r2
 8009a66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a6a:	461a      	mov	r2, r3
 8009a6c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009a70:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009a72:	693b      	ldr	r3, [r7, #16]
 8009a74:	3301      	adds	r3, #1
 8009a76:	613b      	str	r3, [r7, #16]
 8009a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a7a:	693a      	ldr	r2, [r7, #16]
 8009a7c:	429a      	cmp	r2, r3
 8009a7e:	d3b7      	bcc.n	80099f0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a86:	691b      	ldr	r3, [r3, #16]
 8009a88:	68fa      	ldr	r2, [r7, #12]
 8009a8a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009a8e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009a92:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	2200      	movs	r2, #0
 8009a98:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009aa0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d105      	bne.n	8009ab4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	699b      	ldr	r3, [r3, #24]
 8009aac:	f043 0210 	orr.w	r2, r3, #16
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	699a      	ldr	r2, [r3, #24]
 8009ab8:	4b0e      	ldr	r3, [pc, #56]	; (8009af4 <USB_DevInit+0x2b4>)
 8009aba:	4313      	orrs	r3, r2
 8009abc:	687a      	ldr	r2, [r7, #4]
 8009abe:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009ac0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d005      	beq.n	8009ad2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	699b      	ldr	r3, [r3, #24]
 8009aca:	f043 0208 	orr.w	r2, r3, #8
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009ad2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ad4:	2b01      	cmp	r3, #1
 8009ad6:	d105      	bne.n	8009ae4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	699a      	ldr	r2, [r3, #24]
 8009adc:	4b06      	ldr	r3, [pc, #24]	; (8009af8 <USB_DevInit+0x2b8>)
 8009ade:	4313      	orrs	r3, r2
 8009ae0:	687a      	ldr	r2, [r7, #4]
 8009ae2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009ae4:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	3718      	adds	r7, #24
 8009aea:	46bd      	mov	sp, r7
 8009aec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009af0:	b004      	add	sp, #16
 8009af2:	4770      	bx	lr
 8009af4:	803c3800 	.word	0x803c3800
 8009af8:	40000004 	.word	0x40000004

08009afc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009afc:	b480      	push	{r7}
 8009afe:	b085      	sub	sp, #20
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	6078      	str	r0, [r7, #4]
 8009b04:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009b06:	2300      	movs	r3, #0
 8009b08:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	3301      	adds	r3, #1
 8009b0e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	4a13      	ldr	r2, [pc, #76]	; (8009b60 <USB_FlushTxFifo+0x64>)
 8009b14:	4293      	cmp	r3, r2
 8009b16:	d901      	bls.n	8009b1c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009b18:	2303      	movs	r3, #3
 8009b1a:	e01b      	b.n	8009b54 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	691b      	ldr	r3, [r3, #16]
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	daf2      	bge.n	8009b0a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009b24:	2300      	movs	r3, #0
 8009b26:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009b28:	683b      	ldr	r3, [r7, #0]
 8009b2a:	019b      	lsls	r3, r3, #6
 8009b2c:	f043 0220 	orr.w	r2, r3, #32
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	3301      	adds	r3, #1
 8009b38:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	4a08      	ldr	r2, [pc, #32]	; (8009b60 <USB_FlushTxFifo+0x64>)
 8009b3e:	4293      	cmp	r3, r2
 8009b40:	d901      	bls.n	8009b46 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009b42:	2303      	movs	r3, #3
 8009b44:	e006      	b.n	8009b54 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	691b      	ldr	r3, [r3, #16]
 8009b4a:	f003 0320 	and.w	r3, r3, #32
 8009b4e:	2b20      	cmp	r3, #32
 8009b50:	d0f0      	beq.n	8009b34 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009b52:	2300      	movs	r3, #0
}
 8009b54:	4618      	mov	r0, r3
 8009b56:	3714      	adds	r7, #20
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5e:	4770      	bx	lr
 8009b60:	00030d40 	.word	0x00030d40

08009b64 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009b64:	b480      	push	{r7}
 8009b66:	b085      	sub	sp, #20
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	3301      	adds	r3, #1
 8009b74:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	4a11      	ldr	r2, [pc, #68]	; (8009bc0 <USB_FlushRxFifo+0x5c>)
 8009b7a:	4293      	cmp	r3, r2
 8009b7c:	d901      	bls.n	8009b82 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009b7e:	2303      	movs	r3, #3
 8009b80:	e018      	b.n	8009bb4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	691b      	ldr	r3, [r3, #16]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	daf2      	bge.n	8009b70 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	2210      	movs	r2, #16
 8009b92:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	3301      	adds	r3, #1
 8009b98:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	4a08      	ldr	r2, [pc, #32]	; (8009bc0 <USB_FlushRxFifo+0x5c>)
 8009b9e:	4293      	cmp	r3, r2
 8009ba0:	d901      	bls.n	8009ba6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009ba2:	2303      	movs	r3, #3
 8009ba4:	e006      	b.n	8009bb4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	691b      	ldr	r3, [r3, #16]
 8009baa:	f003 0310 	and.w	r3, r3, #16
 8009bae:	2b10      	cmp	r3, #16
 8009bb0:	d0f0      	beq.n	8009b94 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009bb2:	2300      	movs	r3, #0
}
 8009bb4:	4618      	mov	r0, r3
 8009bb6:	3714      	adds	r7, #20
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bbe:	4770      	bx	lr
 8009bc0:	00030d40 	.word	0x00030d40

08009bc4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009bc4:	b480      	push	{r7}
 8009bc6:	b085      	sub	sp, #20
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	6078      	str	r0, [r7, #4]
 8009bcc:	460b      	mov	r3, r1
 8009bce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009bda:	681a      	ldr	r2, [r3, #0]
 8009bdc:	78fb      	ldrb	r3, [r7, #3]
 8009bde:	68f9      	ldr	r1, [r7, #12]
 8009be0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009be4:	4313      	orrs	r3, r2
 8009be6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009be8:	2300      	movs	r3, #0
}
 8009bea:	4618      	mov	r0, r3
 8009bec:	3714      	adds	r7, #20
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf4:	4770      	bx	lr

08009bf6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8009bf6:	b480      	push	{r7}
 8009bf8:	b087      	sub	sp, #28
 8009bfa:	af00      	add	r7, sp, #0
 8009bfc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009c02:	693b      	ldr	r3, [r7, #16]
 8009c04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c08:	689b      	ldr	r3, [r3, #8]
 8009c0a:	f003 0306 	and.w	r3, r3, #6
 8009c0e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d102      	bne.n	8009c1c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8009c16:	2300      	movs	r3, #0
 8009c18:	75fb      	strb	r3, [r7, #23]
 8009c1a:	e00a      	b.n	8009c32 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	2b02      	cmp	r3, #2
 8009c20:	d002      	beq.n	8009c28 <USB_GetDevSpeed+0x32>
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	2b06      	cmp	r3, #6
 8009c26:	d102      	bne.n	8009c2e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009c28:	2302      	movs	r3, #2
 8009c2a:	75fb      	strb	r3, [r7, #23]
 8009c2c:	e001      	b.n	8009c32 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8009c2e:	230f      	movs	r3, #15
 8009c30:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8009c32:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c34:	4618      	mov	r0, r3
 8009c36:	371c      	adds	r7, #28
 8009c38:	46bd      	mov	sp, r7
 8009c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c3e:	4770      	bx	lr

08009c40 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009c40:	b480      	push	{r7}
 8009c42:	b085      	sub	sp, #20
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	6078      	str	r0, [r7, #4]
 8009c48:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009c4e:	683b      	ldr	r3, [r7, #0]
 8009c50:	781b      	ldrb	r3, [r3, #0]
 8009c52:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009c54:	683b      	ldr	r3, [r7, #0]
 8009c56:	785b      	ldrb	r3, [r3, #1]
 8009c58:	2b01      	cmp	r3, #1
 8009c5a:	d139      	bne.n	8009cd0 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c62:	69da      	ldr	r2, [r3, #28]
 8009c64:	683b      	ldr	r3, [r7, #0]
 8009c66:	781b      	ldrb	r3, [r3, #0]
 8009c68:	f003 030f 	and.w	r3, r3, #15
 8009c6c:	2101      	movs	r1, #1
 8009c6e:	fa01 f303 	lsl.w	r3, r1, r3
 8009c72:	b29b      	uxth	r3, r3
 8009c74:	68f9      	ldr	r1, [r7, #12]
 8009c76:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009c7a:	4313      	orrs	r3, r2
 8009c7c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009c7e:	68bb      	ldr	r3, [r7, #8]
 8009c80:	015a      	lsls	r2, r3, #5
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	4413      	add	r3, r2
 8009c86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d153      	bne.n	8009d3c <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009c94:	68bb      	ldr	r3, [r7, #8]
 8009c96:	015a      	lsls	r2, r3, #5
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	4413      	add	r3, r2
 8009c9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ca0:	681a      	ldr	r2, [r3, #0]
 8009ca2:	683b      	ldr	r3, [r7, #0]
 8009ca4:	689b      	ldr	r3, [r3, #8]
 8009ca6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009caa:	683b      	ldr	r3, [r7, #0]
 8009cac:	791b      	ldrb	r3, [r3, #4]
 8009cae:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009cb0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009cb2:	68bb      	ldr	r3, [r7, #8]
 8009cb4:	059b      	lsls	r3, r3, #22
 8009cb6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009cb8:	431a      	orrs	r2, r3
 8009cba:	68bb      	ldr	r3, [r7, #8]
 8009cbc:	0159      	lsls	r1, r3, #5
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	440b      	add	r3, r1
 8009cc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009cc6:	4619      	mov	r1, r3
 8009cc8:	4b20      	ldr	r3, [pc, #128]	; (8009d4c <USB_ActivateEndpoint+0x10c>)
 8009cca:	4313      	orrs	r3, r2
 8009ccc:	600b      	str	r3, [r1, #0]
 8009cce:	e035      	b.n	8009d3c <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009cd6:	69da      	ldr	r2, [r3, #28]
 8009cd8:	683b      	ldr	r3, [r7, #0]
 8009cda:	781b      	ldrb	r3, [r3, #0]
 8009cdc:	f003 030f 	and.w	r3, r3, #15
 8009ce0:	2101      	movs	r1, #1
 8009ce2:	fa01 f303 	lsl.w	r3, r1, r3
 8009ce6:	041b      	lsls	r3, r3, #16
 8009ce8:	68f9      	ldr	r1, [r7, #12]
 8009cea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009cee:	4313      	orrs	r3, r2
 8009cf0:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009cf2:	68bb      	ldr	r3, [r7, #8]
 8009cf4:	015a      	lsls	r2, r3, #5
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	4413      	add	r3, r2
 8009cfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d119      	bne.n	8009d3c <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009d08:	68bb      	ldr	r3, [r7, #8]
 8009d0a:	015a      	lsls	r2, r3, #5
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	4413      	add	r3, r2
 8009d10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d14:	681a      	ldr	r2, [r3, #0]
 8009d16:	683b      	ldr	r3, [r7, #0]
 8009d18:	689b      	ldr	r3, [r3, #8]
 8009d1a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009d1e:	683b      	ldr	r3, [r7, #0]
 8009d20:	791b      	ldrb	r3, [r3, #4]
 8009d22:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009d24:	430b      	orrs	r3, r1
 8009d26:	431a      	orrs	r2, r3
 8009d28:	68bb      	ldr	r3, [r7, #8]
 8009d2a:	0159      	lsls	r1, r3, #5
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	440b      	add	r3, r1
 8009d30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d34:	4619      	mov	r1, r3
 8009d36:	4b05      	ldr	r3, [pc, #20]	; (8009d4c <USB_ActivateEndpoint+0x10c>)
 8009d38:	4313      	orrs	r3, r2
 8009d3a:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009d3c:	2300      	movs	r3, #0
}
 8009d3e:	4618      	mov	r0, r3
 8009d40:	3714      	adds	r7, #20
 8009d42:	46bd      	mov	sp, r7
 8009d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d48:	4770      	bx	lr
 8009d4a:	bf00      	nop
 8009d4c:	10008000 	.word	0x10008000

08009d50 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009d50:	b480      	push	{r7}
 8009d52:	b085      	sub	sp, #20
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	6078      	str	r0, [r7, #4]
 8009d58:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009d5e:	683b      	ldr	r3, [r7, #0]
 8009d60:	781b      	ldrb	r3, [r3, #0]
 8009d62:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009d64:	683b      	ldr	r3, [r7, #0]
 8009d66:	785b      	ldrb	r3, [r3, #1]
 8009d68:	2b01      	cmp	r3, #1
 8009d6a:	d161      	bne.n	8009e30 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009d6c:	68bb      	ldr	r3, [r7, #8]
 8009d6e:	015a      	lsls	r2, r3, #5
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	4413      	add	r3, r2
 8009d74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009d7e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009d82:	d11f      	bne.n	8009dc4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009d84:	68bb      	ldr	r3, [r7, #8]
 8009d86:	015a      	lsls	r2, r3, #5
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	4413      	add	r3, r2
 8009d8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	68ba      	ldr	r2, [r7, #8]
 8009d94:	0151      	lsls	r1, r2, #5
 8009d96:	68fa      	ldr	r2, [r7, #12]
 8009d98:	440a      	add	r2, r1
 8009d9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009d9e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009da2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009da4:	68bb      	ldr	r3, [r7, #8]
 8009da6:	015a      	lsls	r2, r3, #5
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	4413      	add	r3, r2
 8009dac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	68ba      	ldr	r2, [r7, #8]
 8009db4:	0151      	lsls	r1, r2, #5
 8009db6:	68fa      	ldr	r2, [r7, #12]
 8009db8:	440a      	add	r2, r1
 8009dba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009dbe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009dc2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009dca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009dcc:	683b      	ldr	r3, [r7, #0]
 8009dce:	781b      	ldrb	r3, [r3, #0]
 8009dd0:	f003 030f 	and.w	r3, r3, #15
 8009dd4:	2101      	movs	r1, #1
 8009dd6:	fa01 f303 	lsl.w	r3, r1, r3
 8009dda:	b29b      	uxth	r3, r3
 8009ddc:	43db      	mvns	r3, r3
 8009dde:	68f9      	ldr	r1, [r7, #12]
 8009de0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009de4:	4013      	ands	r3, r2
 8009de6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009dee:	69da      	ldr	r2, [r3, #28]
 8009df0:	683b      	ldr	r3, [r7, #0]
 8009df2:	781b      	ldrb	r3, [r3, #0]
 8009df4:	f003 030f 	and.w	r3, r3, #15
 8009df8:	2101      	movs	r1, #1
 8009dfa:	fa01 f303 	lsl.w	r3, r1, r3
 8009dfe:	b29b      	uxth	r3, r3
 8009e00:	43db      	mvns	r3, r3
 8009e02:	68f9      	ldr	r1, [r7, #12]
 8009e04:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009e08:	4013      	ands	r3, r2
 8009e0a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009e0c:	68bb      	ldr	r3, [r7, #8]
 8009e0e:	015a      	lsls	r2, r3, #5
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	4413      	add	r3, r2
 8009e14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e18:	681a      	ldr	r2, [r3, #0]
 8009e1a:	68bb      	ldr	r3, [r7, #8]
 8009e1c:	0159      	lsls	r1, r3, #5
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	440b      	add	r3, r1
 8009e22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e26:	4619      	mov	r1, r3
 8009e28:	4b35      	ldr	r3, [pc, #212]	; (8009f00 <USB_DeactivateEndpoint+0x1b0>)
 8009e2a:	4013      	ands	r3, r2
 8009e2c:	600b      	str	r3, [r1, #0]
 8009e2e:	e060      	b.n	8009ef2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009e30:	68bb      	ldr	r3, [r7, #8]
 8009e32:	015a      	lsls	r2, r3, #5
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	4413      	add	r3, r2
 8009e38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009e42:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009e46:	d11f      	bne.n	8009e88 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009e48:	68bb      	ldr	r3, [r7, #8]
 8009e4a:	015a      	lsls	r2, r3, #5
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	4413      	add	r3, r2
 8009e50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	68ba      	ldr	r2, [r7, #8]
 8009e58:	0151      	lsls	r1, r2, #5
 8009e5a:	68fa      	ldr	r2, [r7, #12]
 8009e5c:	440a      	add	r2, r1
 8009e5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009e62:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009e66:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009e68:	68bb      	ldr	r3, [r7, #8]
 8009e6a:	015a      	lsls	r2, r3, #5
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	4413      	add	r3, r2
 8009e70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	68ba      	ldr	r2, [r7, #8]
 8009e78:	0151      	lsls	r1, r2, #5
 8009e7a:	68fa      	ldr	r2, [r7, #12]
 8009e7c:	440a      	add	r2, r1
 8009e7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009e82:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009e86:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009e90:	683b      	ldr	r3, [r7, #0]
 8009e92:	781b      	ldrb	r3, [r3, #0]
 8009e94:	f003 030f 	and.w	r3, r3, #15
 8009e98:	2101      	movs	r1, #1
 8009e9a:	fa01 f303 	lsl.w	r3, r1, r3
 8009e9e:	041b      	lsls	r3, r3, #16
 8009ea0:	43db      	mvns	r3, r3
 8009ea2:	68f9      	ldr	r1, [r7, #12]
 8009ea4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009ea8:	4013      	ands	r3, r2
 8009eaa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009eb2:	69da      	ldr	r2, [r3, #28]
 8009eb4:	683b      	ldr	r3, [r7, #0]
 8009eb6:	781b      	ldrb	r3, [r3, #0]
 8009eb8:	f003 030f 	and.w	r3, r3, #15
 8009ebc:	2101      	movs	r1, #1
 8009ebe:	fa01 f303 	lsl.w	r3, r1, r3
 8009ec2:	041b      	lsls	r3, r3, #16
 8009ec4:	43db      	mvns	r3, r3
 8009ec6:	68f9      	ldr	r1, [r7, #12]
 8009ec8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009ecc:	4013      	ands	r3, r2
 8009ece:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009ed0:	68bb      	ldr	r3, [r7, #8]
 8009ed2:	015a      	lsls	r2, r3, #5
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	4413      	add	r3, r2
 8009ed8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009edc:	681a      	ldr	r2, [r3, #0]
 8009ede:	68bb      	ldr	r3, [r7, #8]
 8009ee0:	0159      	lsls	r1, r3, #5
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	440b      	add	r3, r1
 8009ee6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009eea:	4619      	mov	r1, r3
 8009eec:	4b05      	ldr	r3, [pc, #20]	; (8009f04 <USB_DeactivateEndpoint+0x1b4>)
 8009eee:	4013      	ands	r3, r2
 8009ef0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8009ef2:	2300      	movs	r3, #0
}
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	3714      	adds	r7, #20
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009efe:	4770      	bx	lr
 8009f00:	ec337800 	.word	0xec337800
 8009f04:	eff37800 	.word	0xeff37800

08009f08 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	b08a      	sub	sp, #40	; 0x28
 8009f0c:	af02      	add	r7, sp, #8
 8009f0e:	60f8      	str	r0, [r7, #12]
 8009f10:	60b9      	str	r1, [r7, #8]
 8009f12:	4613      	mov	r3, r2
 8009f14:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8009f1a:	68bb      	ldr	r3, [r7, #8]
 8009f1c:	781b      	ldrb	r3, [r3, #0]
 8009f1e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009f20:	68bb      	ldr	r3, [r7, #8]
 8009f22:	785b      	ldrb	r3, [r3, #1]
 8009f24:	2b01      	cmp	r3, #1
 8009f26:	f040 8181 	bne.w	800a22c <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009f2a:	68bb      	ldr	r3, [r7, #8]
 8009f2c:	691b      	ldr	r3, [r3, #16]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d132      	bne.n	8009f98 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009f32:	69bb      	ldr	r3, [r7, #24]
 8009f34:	015a      	lsls	r2, r3, #5
 8009f36:	69fb      	ldr	r3, [r7, #28]
 8009f38:	4413      	add	r3, r2
 8009f3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f3e:	691a      	ldr	r2, [r3, #16]
 8009f40:	69bb      	ldr	r3, [r7, #24]
 8009f42:	0159      	lsls	r1, r3, #5
 8009f44:	69fb      	ldr	r3, [r7, #28]
 8009f46:	440b      	add	r3, r1
 8009f48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f4c:	4619      	mov	r1, r3
 8009f4e:	4ba5      	ldr	r3, [pc, #660]	; (800a1e4 <USB_EPStartXfer+0x2dc>)
 8009f50:	4013      	ands	r3, r2
 8009f52:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009f54:	69bb      	ldr	r3, [r7, #24]
 8009f56:	015a      	lsls	r2, r3, #5
 8009f58:	69fb      	ldr	r3, [r7, #28]
 8009f5a:	4413      	add	r3, r2
 8009f5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f60:	691b      	ldr	r3, [r3, #16]
 8009f62:	69ba      	ldr	r2, [r7, #24]
 8009f64:	0151      	lsls	r1, r2, #5
 8009f66:	69fa      	ldr	r2, [r7, #28]
 8009f68:	440a      	add	r2, r1
 8009f6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f6e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009f72:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009f74:	69bb      	ldr	r3, [r7, #24]
 8009f76:	015a      	lsls	r2, r3, #5
 8009f78:	69fb      	ldr	r3, [r7, #28]
 8009f7a:	4413      	add	r3, r2
 8009f7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f80:	691a      	ldr	r2, [r3, #16]
 8009f82:	69bb      	ldr	r3, [r7, #24]
 8009f84:	0159      	lsls	r1, r3, #5
 8009f86:	69fb      	ldr	r3, [r7, #28]
 8009f88:	440b      	add	r3, r1
 8009f8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f8e:	4619      	mov	r1, r3
 8009f90:	4b95      	ldr	r3, [pc, #596]	; (800a1e8 <USB_EPStartXfer+0x2e0>)
 8009f92:	4013      	ands	r3, r2
 8009f94:	610b      	str	r3, [r1, #16]
 8009f96:	e092      	b.n	800a0be <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009f98:	69bb      	ldr	r3, [r7, #24]
 8009f9a:	015a      	lsls	r2, r3, #5
 8009f9c:	69fb      	ldr	r3, [r7, #28]
 8009f9e:	4413      	add	r3, r2
 8009fa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fa4:	691a      	ldr	r2, [r3, #16]
 8009fa6:	69bb      	ldr	r3, [r7, #24]
 8009fa8:	0159      	lsls	r1, r3, #5
 8009faa:	69fb      	ldr	r3, [r7, #28]
 8009fac:	440b      	add	r3, r1
 8009fae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fb2:	4619      	mov	r1, r3
 8009fb4:	4b8c      	ldr	r3, [pc, #560]	; (800a1e8 <USB_EPStartXfer+0x2e0>)
 8009fb6:	4013      	ands	r3, r2
 8009fb8:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009fba:	69bb      	ldr	r3, [r7, #24]
 8009fbc:	015a      	lsls	r2, r3, #5
 8009fbe:	69fb      	ldr	r3, [r7, #28]
 8009fc0:	4413      	add	r3, r2
 8009fc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fc6:	691a      	ldr	r2, [r3, #16]
 8009fc8:	69bb      	ldr	r3, [r7, #24]
 8009fca:	0159      	lsls	r1, r3, #5
 8009fcc:	69fb      	ldr	r3, [r7, #28]
 8009fce:	440b      	add	r3, r1
 8009fd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fd4:	4619      	mov	r1, r3
 8009fd6:	4b83      	ldr	r3, [pc, #524]	; (800a1e4 <USB_EPStartXfer+0x2dc>)
 8009fd8:	4013      	ands	r3, r2
 8009fda:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8009fdc:	69bb      	ldr	r3, [r7, #24]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d11a      	bne.n	800a018 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8009fe2:	68bb      	ldr	r3, [r7, #8]
 8009fe4:	691a      	ldr	r2, [r3, #16]
 8009fe6:	68bb      	ldr	r3, [r7, #8]
 8009fe8:	689b      	ldr	r3, [r3, #8]
 8009fea:	429a      	cmp	r2, r3
 8009fec:	d903      	bls.n	8009ff6 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8009fee:	68bb      	ldr	r3, [r7, #8]
 8009ff0:	689a      	ldr	r2, [r3, #8]
 8009ff2:	68bb      	ldr	r3, [r7, #8]
 8009ff4:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009ff6:	69bb      	ldr	r3, [r7, #24]
 8009ff8:	015a      	lsls	r2, r3, #5
 8009ffa:	69fb      	ldr	r3, [r7, #28]
 8009ffc:	4413      	add	r3, r2
 8009ffe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a002:	691b      	ldr	r3, [r3, #16]
 800a004:	69ba      	ldr	r2, [r7, #24]
 800a006:	0151      	lsls	r1, r2, #5
 800a008:	69fa      	ldr	r2, [r7, #28]
 800a00a:	440a      	add	r2, r1
 800a00c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a010:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a014:	6113      	str	r3, [r2, #16]
 800a016:	e01b      	b.n	800a050 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800a018:	69bb      	ldr	r3, [r7, #24]
 800a01a:	015a      	lsls	r2, r3, #5
 800a01c:	69fb      	ldr	r3, [r7, #28]
 800a01e:	4413      	add	r3, r2
 800a020:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a024:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800a026:	68bb      	ldr	r3, [r7, #8]
 800a028:	6919      	ldr	r1, [r3, #16]
 800a02a:	68bb      	ldr	r3, [r7, #8]
 800a02c:	689b      	ldr	r3, [r3, #8]
 800a02e:	440b      	add	r3, r1
 800a030:	1e59      	subs	r1, r3, #1
 800a032:	68bb      	ldr	r3, [r7, #8]
 800a034:	689b      	ldr	r3, [r3, #8]
 800a036:	fbb1 f3f3 	udiv	r3, r1, r3
 800a03a:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800a03c:	4b6b      	ldr	r3, [pc, #428]	; (800a1ec <USB_EPStartXfer+0x2e4>)
 800a03e:	400b      	ands	r3, r1
 800a040:	69b9      	ldr	r1, [r7, #24]
 800a042:	0148      	lsls	r0, r1, #5
 800a044:	69f9      	ldr	r1, [r7, #28]
 800a046:	4401      	add	r1, r0
 800a048:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a04c:	4313      	orrs	r3, r2
 800a04e:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a050:	69bb      	ldr	r3, [r7, #24]
 800a052:	015a      	lsls	r2, r3, #5
 800a054:	69fb      	ldr	r3, [r7, #28]
 800a056:	4413      	add	r3, r2
 800a058:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a05c:	691a      	ldr	r2, [r3, #16]
 800a05e:	68bb      	ldr	r3, [r7, #8]
 800a060:	691b      	ldr	r3, [r3, #16]
 800a062:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a066:	69b9      	ldr	r1, [r7, #24]
 800a068:	0148      	lsls	r0, r1, #5
 800a06a:	69f9      	ldr	r1, [r7, #28]
 800a06c:	4401      	add	r1, r0
 800a06e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a072:	4313      	orrs	r3, r2
 800a074:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800a076:	68bb      	ldr	r3, [r7, #8]
 800a078:	791b      	ldrb	r3, [r3, #4]
 800a07a:	2b01      	cmp	r3, #1
 800a07c:	d11f      	bne.n	800a0be <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800a07e:	69bb      	ldr	r3, [r7, #24]
 800a080:	015a      	lsls	r2, r3, #5
 800a082:	69fb      	ldr	r3, [r7, #28]
 800a084:	4413      	add	r3, r2
 800a086:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a08a:	691b      	ldr	r3, [r3, #16]
 800a08c:	69ba      	ldr	r2, [r7, #24]
 800a08e:	0151      	lsls	r1, r2, #5
 800a090:	69fa      	ldr	r2, [r7, #28]
 800a092:	440a      	add	r2, r1
 800a094:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a098:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800a09c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800a09e:	69bb      	ldr	r3, [r7, #24]
 800a0a0:	015a      	lsls	r2, r3, #5
 800a0a2:	69fb      	ldr	r3, [r7, #28]
 800a0a4:	4413      	add	r3, r2
 800a0a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0aa:	691b      	ldr	r3, [r3, #16]
 800a0ac:	69ba      	ldr	r2, [r7, #24]
 800a0ae:	0151      	lsls	r1, r2, #5
 800a0b0:	69fa      	ldr	r2, [r7, #28]
 800a0b2:	440a      	add	r2, r1
 800a0b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a0b8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a0bc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800a0be:	79fb      	ldrb	r3, [r7, #7]
 800a0c0:	2b01      	cmp	r3, #1
 800a0c2:	d14b      	bne.n	800a15c <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a0c4:	68bb      	ldr	r3, [r7, #8]
 800a0c6:	69db      	ldr	r3, [r3, #28]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d009      	beq.n	800a0e0 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a0cc:	69bb      	ldr	r3, [r7, #24]
 800a0ce:	015a      	lsls	r2, r3, #5
 800a0d0:	69fb      	ldr	r3, [r7, #28]
 800a0d2:	4413      	add	r3, r2
 800a0d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0d8:	461a      	mov	r2, r3
 800a0da:	68bb      	ldr	r3, [r7, #8]
 800a0dc:	69db      	ldr	r3, [r3, #28]
 800a0de:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800a0e0:	68bb      	ldr	r3, [r7, #8]
 800a0e2:	791b      	ldrb	r3, [r3, #4]
 800a0e4:	2b01      	cmp	r3, #1
 800a0e6:	d128      	bne.n	800a13a <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a0e8:	69fb      	ldr	r3, [r7, #28]
 800a0ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a0ee:	689b      	ldr	r3, [r3, #8]
 800a0f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d110      	bne.n	800a11a <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a0f8:	69bb      	ldr	r3, [r7, #24]
 800a0fa:	015a      	lsls	r2, r3, #5
 800a0fc:	69fb      	ldr	r3, [r7, #28]
 800a0fe:	4413      	add	r3, r2
 800a100:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	69ba      	ldr	r2, [r7, #24]
 800a108:	0151      	lsls	r1, r2, #5
 800a10a:	69fa      	ldr	r2, [r7, #28]
 800a10c:	440a      	add	r2, r1
 800a10e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a112:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a116:	6013      	str	r3, [r2, #0]
 800a118:	e00f      	b.n	800a13a <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a11a:	69bb      	ldr	r3, [r7, #24]
 800a11c:	015a      	lsls	r2, r3, #5
 800a11e:	69fb      	ldr	r3, [r7, #28]
 800a120:	4413      	add	r3, r2
 800a122:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	69ba      	ldr	r2, [r7, #24]
 800a12a:	0151      	lsls	r1, r2, #5
 800a12c:	69fa      	ldr	r2, [r7, #28]
 800a12e:	440a      	add	r2, r1
 800a130:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a134:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a138:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a13a:	69bb      	ldr	r3, [r7, #24]
 800a13c:	015a      	lsls	r2, r3, #5
 800a13e:	69fb      	ldr	r3, [r7, #28]
 800a140:	4413      	add	r3, r2
 800a142:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	69ba      	ldr	r2, [r7, #24]
 800a14a:	0151      	lsls	r1, r2, #5
 800a14c:	69fa      	ldr	r2, [r7, #28]
 800a14e:	440a      	add	r2, r1
 800a150:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a154:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a158:	6013      	str	r3, [r2, #0]
 800a15a:	e16a      	b.n	800a432 <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a15c:	69bb      	ldr	r3, [r7, #24]
 800a15e:	015a      	lsls	r2, r3, #5
 800a160:	69fb      	ldr	r3, [r7, #28]
 800a162:	4413      	add	r3, r2
 800a164:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	69ba      	ldr	r2, [r7, #24]
 800a16c:	0151      	lsls	r1, r2, #5
 800a16e:	69fa      	ldr	r2, [r7, #28]
 800a170:	440a      	add	r2, r1
 800a172:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a176:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a17a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a17c:	68bb      	ldr	r3, [r7, #8]
 800a17e:	791b      	ldrb	r3, [r3, #4]
 800a180:	2b01      	cmp	r3, #1
 800a182:	d015      	beq.n	800a1b0 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800a184:	68bb      	ldr	r3, [r7, #8]
 800a186:	691b      	ldr	r3, [r3, #16]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	f000 8152 	beq.w	800a432 <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a18e:	69fb      	ldr	r3, [r7, #28]
 800a190:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a194:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a196:	68bb      	ldr	r3, [r7, #8]
 800a198:	781b      	ldrb	r3, [r3, #0]
 800a19a:	f003 030f 	and.w	r3, r3, #15
 800a19e:	2101      	movs	r1, #1
 800a1a0:	fa01 f303 	lsl.w	r3, r1, r3
 800a1a4:	69f9      	ldr	r1, [r7, #28]
 800a1a6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a1aa:	4313      	orrs	r3, r2
 800a1ac:	634b      	str	r3, [r1, #52]	; 0x34
 800a1ae:	e140      	b.n	800a432 <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a1b0:	69fb      	ldr	r3, [r7, #28]
 800a1b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a1b6:	689b      	ldr	r3, [r3, #8]
 800a1b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d117      	bne.n	800a1f0 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a1c0:	69bb      	ldr	r3, [r7, #24]
 800a1c2:	015a      	lsls	r2, r3, #5
 800a1c4:	69fb      	ldr	r3, [r7, #28]
 800a1c6:	4413      	add	r3, r2
 800a1c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	69ba      	ldr	r2, [r7, #24]
 800a1d0:	0151      	lsls	r1, r2, #5
 800a1d2:	69fa      	ldr	r2, [r7, #28]
 800a1d4:	440a      	add	r2, r1
 800a1d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a1da:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a1de:	6013      	str	r3, [r2, #0]
 800a1e0:	e016      	b.n	800a210 <USB_EPStartXfer+0x308>
 800a1e2:	bf00      	nop
 800a1e4:	e007ffff 	.word	0xe007ffff
 800a1e8:	fff80000 	.word	0xfff80000
 800a1ec:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a1f0:	69bb      	ldr	r3, [r7, #24]
 800a1f2:	015a      	lsls	r2, r3, #5
 800a1f4:	69fb      	ldr	r3, [r7, #28]
 800a1f6:	4413      	add	r3, r2
 800a1f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	69ba      	ldr	r2, [r7, #24]
 800a200:	0151      	lsls	r1, r2, #5
 800a202:	69fa      	ldr	r2, [r7, #28]
 800a204:	440a      	add	r2, r1
 800a206:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a20a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a20e:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800a210:	68bb      	ldr	r3, [r7, #8]
 800a212:	68d9      	ldr	r1, [r3, #12]
 800a214:	68bb      	ldr	r3, [r7, #8]
 800a216:	781a      	ldrb	r2, [r3, #0]
 800a218:	68bb      	ldr	r3, [r7, #8]
 800a21a:	691b      	ldr	r3, [r3, #16]
 800a21c:	b298      	uxth	r0, r3
 800a21e:	79fb      	ldrb	r3, [r7, #7]
 800a220:	9300      	str	r3, [sp, #0]
 800a222:	4603      	mov	r3, r0
 800a224:	68f8      	ldr	r0, [r7, #12]
 800a226:	f000 f9b9 	bl	800a59c <USB_WritePacket>
 800a22a:	e102      	b.n	800a432 <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a22c:	69bb      	ldr	r3, [r7, #24]
 800a22e:	015a      	lsls	r2, r3, #5
 800a230:	69fb      	ldr	r3, [r7, #28]
 800a232:	4413      	add	r3, r2
 800a234:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a238:	691a      	ldr	r2, [r3, #16]
 800a23a:	69bb      	ldr	r3, [r7, #24]
 800a23c:	0159      	lsls	r1, r3, #5
 800a23e:	69fb      	ldr	r3, [r7, #28]
 800a240:	440b      	add	r3, r1
 800a242:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a246:	4619      	mov	r1, r3
 800a248:	4b7c      	ldr	r3, [pc, #496]	; (800a43c <USB_EPStartXfer+0x534>)
 800a24a:	4013      	ands	r3, r2
 800a24c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a24e:	69bb      	ldr	r3, [r7, #24]
 800a250:	015a      	lsls	r2, r3, #5
 800a252:	69fb      	ldr	r3, [r7, #28]
 800a254:	4413      	add	r3, r2
 800a256:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a25a:	691a      	ldr	r2, [r3, #16]
 800a25c:	69bb      	ldr	r3, [r7, #24]
 800a25e:	0159      	lsls	r1, r3, #5
 800a260:	69fb      	ldr	r3, [r7, #28]
 800a262:	440b      	add	r3, r1
 800a264:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a268:	4619      	mov	r1, r3
 800a26a:	4b75      	ldr	r3, [pc, #468]	; (800a440 <USB_EPStartXfer+0x538>)
 800a26c:	4013      	ands	r3, r2
 800a26e:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 800a270:	69bb      	ldr	r3, [r7, #24]
 800a272:	2b00      	cmp	r3, #0
 800a274:	d12f      	bne.n	800a2d6 <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 800a276:	68bb      	ldr	r3, [r7, #8]
 800a278:	691b      	ldr	r3, [r3, #16]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d003      	beq.n	800a286 <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 800a27e:	68bb      	ldr	r3, [r7, #8]
 800a280:	689a      	ldr	r2, [r3, #8]
 800a282:	68bb      	ldr	r3, [r7, #8]
 800a284:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800a286:	68bb      	ldr	r3, [r7, #8]
 800a288:	689a      	ldr	r2, [r3, #8]
 800a28a:	68bb      	ldr	r3, [r7, #8]
 800a28c:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800a28e:	69bb      	ldr	r3, [r7, #24]
 800a290:	015a      	lsls	r2, r3, #5
 800a292:	69fb      	ldr	r3, [r7, #28]
 800a294:	4413      	add	r3, r2
 800a296:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a29a:	691a      	ldr	r2, [r3, #16]
 800a29c:	68bb      	ldr	r3, [r7, #8]
 800a29e:	6a1b      	ldr	r3, [r3, #32]
 800a2a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a2a4:	69b9      	ldr	r1, [r7, #24]
 800a2a6:	0148      	lsls	r0, r1, #5
 800a2a8:	69f9      	ldr	r1, [r7, #28]
 800a2aa:	4401      	add	r1, r0
 800a2ac:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a2b0:	4313      	orrs	r3, r2
 800a2b2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a2b4:	69bb      	ldr	r3, [r7, #24]
 800a2b6:	015a      	lsls	r2, r3, #5
 800a2b8:	69fb      	ldr	r3, [r7, #28]
 800a2ba:	4413      	add	r3, r2
 800a2bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2c0:	691b      	ldr	r3, [r3, #16]
 800a2c2:	69ba      	ldr	r2, [r7, #24]
 800a2c4:	0151      	lsls	r1, r2, #5
 800a2c6:	69fa      	ldr	r2, [r7, #28]
 800a2c8:	440a      	add	r2, r1
 800a2ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a2ce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a2d2:	6113      	str	r3, [r2, #16]
 800a2d4:	e05f      	b.n	800a396 <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800a2d6:	68bb      	ldr	r3, [r7, #8]
 800a2d8:	691b      	ldr	r3, [r3, #16]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d123      	bne.n	800a326 <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a2de:	69bb      	ldr	r3, [r7, #24]
 800a2e0:	015a      	lsls	r2, r3, #5
 800a2e2:	69fb      	ldr	r3, [r7, #28]
 800a2e4:	4413      	add	r3, r2
 800a2e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2ea:	691a      	ldr	r2, [r3, #16]
 800a2ec:	68bb      	ldr	r3, [r7, #8]
 800a2ee:	689b      	ldr	r3, [r3, #8]
 800a2f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a2f4:	69b9      	ldr	r1, [r7, #24]
 800a2f6:	0148      	lsls	r0, r1, #5
 800a2f8:	69f9      	ldr	r1, [r7, #28]
 800a2fa:	4401      	add	r1, r0
 800a2fc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a300:	4313      	orrs	r3, r2
 800a302:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a304:	69bb      	ldr	r3, [r7, #24]
 800a306:	015a      	lsls	r2, r3, #5
 800a308:	69fb      	ldr	r3, [r7, #28]
 800a30a:	4413      	add	r3, r2
 800a30c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a310:	691b      	ldr	r3, [r3, #16]
 800a312:	69ba      	ldr	r2, [r7, #24]
 800a314:	0151      	lsls	r1, r2, #5
 800a316:	69fa      	ldr	r2, [r7, #28]
 800a318:	440a      	add	r2, r1
 800a31a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a31e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a322:	6113      	str	r3, [r2, #16]
 800a324:	e037      	b.n	800a396 <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a326:	68bb      	ldr	r3, [r7, #8]
 800a328:	691a      	ldr	r2, [r3, #16]
 800a32a:	68bb      	ldr	r3, [r7, #8]
 800a32c:	689b      	ldr	r3, [r3, #8]
 800a32e:	4413      	add	r3, r2
 800a330:	1e5a      	subs	r2, r3, #1
 800a332:	68bb      	ldr	r3, [r7, #8]
 800a334:	689b      	ldr	r3, [r3, #8]
 800a336:	fbb2 f3f3 	udiv	r3, r2, r3
 800a33a:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800a33c:	68bb      	ldr	r3, [r7, #8]
 800a33e:	689b      	ldr	r3, [r3, #8]
 800a340:	8afa      	ldrh	r2, [r7, #22]
 800a342:	fb03 f202 	mul.w	r2, r3, r2
 800a346:	68bb      	ldr	r3, [r7, #8]
 800a348:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a34a:	69bb      	ldr	r3, [r7, #24]
 800a34c:	015a      	lsls	r2, r3, #5
 800a34e:	69fb      	ldr	r3, [r7, #28]
 800a350:	4413      	add	r3, r2
 800a352:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a356:	691a      	ldr	r2, [r3, #16]
 800a358:	8afb      	ldrh	r3, [r7, #22]
 800a35a:	04d9      	lsls	r1, r3, #19
 800a35c:	4b39      	ldr	r3, [pc, #228]	; (800a444 <USB_EPStartXfer+0x53c>)
 800a35e:	400b      	ands	r3, r1
 800a360:	69b9      	ldr	r1, [r7, #24]
 800a362:	0148      	lsls	r0, r1, #5
 800a364:	69f9      	ldr	r1, [r7, #28]
 800a366:	4401      	add	r1, r0
 800a368:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a36c:	4313      	orrs	r3, r2
 800a36e:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800a370:	69bb      	ldr	r3, [r7, #24]
 800a372:	015a      	lsls	r2, r3, #5
 800a374:	69fb      	ldr	r3, [r7, #28]
 800a376:	4413      	add	r3, r2
 800a378:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a37c:	691a      	ldr	r2, [r3, #16]
 800a37e:	68bb      	ldr	r3, [r7, #8]
 800a380:	6a1b      	ldr	r3, [r3, #32]
 800a382:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a386:	69b9      	ldr	r1, [r7, #24]
 800a388:	0148      	lsls	r0, r1, #5
 800a38a:	69f9      	ldr	r1, [r7, #28]
 800a38c:	4401      	add	r1, r0
 800a38e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a392:	4313      	orrs	r3, r2
 800a394:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800a396:	79fb      	ldrb	r3, [r7, #7]
 800a398:	2b01      	cmp	r3, #1
 800a39a:	d10d      	bne.n	800a3b8 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a39c:	68bb      	ldr	r3, [r7, #8]
 800a39e:	68db      	ldr	r3, [r3, #12]
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d009      	beq.n	800a3b8 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a3a4:	68bb      	ldr	r3, [r7, #8]
 800a3a6:	68d9      	ldr	r1, [r3, #12]
 800a3a8:	69bb      	ldr	r3, [r7, #24]
 800a3aa:	015a      	lsls	r2, r3, #5
 800a3ac:	69fb      	ldr	r3, [r7, #28]
 800a3ae:	4413      	add	r3, r2
 800a3b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3b4:	460a      	mov	r2, r1
 800a3b6:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800a3b8:	68bb      	ldr	r3, [r7, #8]
 800a3ba:	791b      	ldrb	r3, [r3, #4]
 800a3bc:	2b01      	cmp	r3, #1
 800a3be:	d128      	bne.n	800a412 <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a3c0:	69fb      	ldr	r3, [r7, #28]
 800a3c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a3c6:	689b      	ldr	r3, [r3, #8]
 800a3c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d110      	bne.n	800a3f2 <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a3d0:	69bb      	ldr	r3, [r7, #24]
 800a3d2:	015a      	lsls	r2, r3, #5
 800a3d4:	69fb      	ldr	r3, [r7, #28]
 800a3d6:	4413      	add	r3, r2
 800a3d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	69ba      	ldr	r2, [r7, #24]
 800a3e0:	0151      	lsls	r1, r2, #5
 800a3e2:	69fa      	ldr	r2, [r7, #28]
 800a3e4:	440a      	add	r2, r1
 800a3e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a3ea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a3ee:	6013      	str	r3, [r2, #0]
 800a3f0:	e00f      	b.n	800a412 <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a3f2:	69bb      	ldr	r3, [r7, #24]
 800a3f4:	015a      	lsls	r2, r3, #5
 800a3f6:	69fb      	ldr	r3, [r7, #28]
 800a3f8:	4413      	add	r3, r2
 800a3fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	69ba      	ldr	r2, [r7, #24]
 800a402:	0151      	lsls	r1, r2, #5
 800a404:	69fa      	ldr	r2, [r7, #28]
 800a406:	440a      	add	r2, r1
 800a408:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a40c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a410:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a412:	69bb      	ldr	r3, [r7, #24]
 800a414:	015a      	lsls	r2, r3, #5
 800a416:	69fb      	ldr	r3, [r7, #28]
 800a418:	4413      	add	r3, r2
 800a41a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	69ba      	ldr	r2, [r7, #24]
 800a422:	0151      	lsls	r1, r2, #5
 800a424:	69fa      	ldr	r2, [r7, #28]
 800a426:	440a      	add	r2, r1
 800a428:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a42c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a430:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a432:	2300      	movs	r3, #0
}
 800a434:	4618      	mov	r0, r3
 800a436:	3720      	adds	r7, #32
 800a438:	46bd      	mov	sp, r7
 800a43a:	bd80      	pop	{r7, pc}
 800a43c:	fff80000 	.word	0xfff80000
 800a440:	e007ffff 	.word	0xe007ffff
 800a444:	1ff80000 	.word	0x1ff80000

0800a448 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a448:	b480      	push	{r7}
 800a44a:	b087      	sub	sp, #28
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	6078      	str	r0, [r7, #4]
 800a450:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a452:	2300      	movs	r3, #0
 800a454:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800a456:	2300      	movs	r3, #0
 800a458:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a45e:	683b      	ldr	r3, [r7, #0]
 800a460:	785b      	ldrb	r3, [r3, #1]
 800a462:	2b01      	cmp	r3, #1
 800a464:	d14a      	bne.n	800a4fc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a466:	683b      	ldr	r3, [r7, #0]
 800a468:	781b      	ldrb	r3, [r3, #0]
 800a46a:	015a      	lsls	r2, r3, #5
 800a46c:	693b      	ldr	r3, [r7, #16]
 800a46e:	4413      	add	r3, r2
 800a470:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a47a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a47e:	f040 8086 	bne.w	800a58e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800a482:	683b      	ldr	r3, [r7, #0]
 800a484:	781b      	ldrb	r3, [r3, #0]
 800a486:	015a      	lsls	r2, r3, #5
 800a488:	693b      	ldr	r3, [r7, #16]
 800a48a:	4413      	add	r3, r2
 800a48c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	683a      	ldr	r2, [r7, #0]
 800a494:	7812      	ldrb	r2, [r2, #0]
 800a496:	0151      	lsls	r1, r2, #5
 800a498:	693a      	ldr	r2, [r7, #16]
 800a49a:	440a      	add	r2, r1
 800a49c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a4a0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a4a4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800a4a6:	683b      	ldr	r3, [r7, #0]
 800a4a8:	781b      	ldrb	r3, [r3, #0]
 800a4aa:	015a      	lsls	r2, r3, #5
 800a4ac:	693b      	ldr	r3, [r7, #16]
 800a4ae:	4413      	add	r3, r2
 800a4b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	683a      	ldr	r2, [r7, #0]
 800a4b8:	7812      	ldrb	r2, [r2, #0]
 800a4ba:	0151      	lsls	r1, r2, #5
 800a4bc:	693a      	ldr	r2, [r7, #16]
 800a4be:	440a      	add	r2, r1
 800a4c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a4c4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a4c8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	3301      	adds	r3, #1
 800a4ce:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	f242 7210 	movw	r2, #10000	; 0x2710
 800a4d6:	4293      	cmp	r3, r2
 800a4d8:	d902      	bls.n	800a4e0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800a4da:	2301      	movs	r3, #1
 800a4dc:	75fb      	strb	r3, [r7, #23]
          break;
 800a4de:	e056      	b.n	800a58e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800a4e0:	683b      	ldr	r3, [r7, #0]
 800a4e2:	781b      	ldrb	r3, [r3, #0]
 800a4e4:	015a      	lsls	r2, r3, #5
 800a4e6:	693b      	ldr	r3, [r7, #16]
 800a4e8:	4413      	add	r3, r2
 800a4ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a4f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a4f8:	d0e7      	beq.n	800a4ca <USB_EPStopXfer+0x82>
 800a4fa:	e048      	b.n	800a58e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a4fc:	683b      	ldr	r3, [r7, #0]
 800a4fe:	781b      	ldrb	r3, [r3, #0]
 800a500:	015a      	lsls	r2, r3, #5
 800a502:	693b      	ldr	r3, [r7, #16]
 800a504:	4413      	add	r3, r2
 800a506:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a510:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a514:	d13b      	bne.n	800a58e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800a516:	683b      	ldr	r3, [r7, #0]
 800a518:	781b      	ldrb	r3, [r3, #0]
 800a51a:	015a      	lsls	r2, r3, #5
 800a51c:	693b      	ldr	r3, [r7, #16]
 800a51e:	4413      	add	r3, r2
 800a520:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	683a      	ldr	r2, [r7, #0]
 800a528:	7812      	ldrb	r2, [r2, #0]
 800a52a:	0151      	lsls	r1, r2, #5
 800a52c:	693a      	ldr	r2, [r7, #16]
 800a52e:	440a      	add	r2, r1
 800a530:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a534:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a538:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800a53a:	683b      	ldr	r3, [r7, #0]
 800a53c:	781b      	ldrb	r3, [r3, #0]
 800a53e:	015a      	lsls	r2, r3, #5
 800a540:	693b      	ldr	r3, [r7, #16]
 800a542:	4413      	add	r3, r2
 800a544:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	683a      	ldr	r2, [r7, #0]
 800a54c:	7812      	ldrb	r2, [r2, #0]
 800a54e:	0151      	lsls	r1, r2, #5
 800a550:	693a      	ldr	r2, [r7, #16]
 800a552:	440a      	add	r2, r1
 800a554:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a558:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a55c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	3301      	adds	r3, #1
 800a562:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	f242 7210 	movw	r2, #10000	; 0x2710
 800a56a:	4293      	cmp	r3, r2
 800a56c:	d902      	bls.n	800a574 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800a56e:	2301      	movs	r3, #1
 800a570:	75fb      	strb	r3, [r7, #23]
          break;
 800a572:	e00c      	b.n	800a58e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800a574:	683b      	ldr	r3, [r7, #0]
 800a576:	781b      	ldrb	r3, [r3, #0]
 800a578:	015a      	lsls	r2, r3, #5
 800a57a:	693b      	ldr	r3, [r7, #16]
 800a57c:	4413      	add	r3, r2
 800a57e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a588:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a58c:	d0e7      	beq.n	800a55e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800a58e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a590:	4618      	mov	r0, r3
 800a592:	371c      	adds	r7, #28
 800a594:	46bd      	mov	sp, r7
 800a596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a59a:	4770      	bx	lr

0800a59c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a59c:	b480      	push	{r7}
 800a59e:	b089      	sub	sp, #36	; 0x24
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	60f8      	str	r0, [r7, #12]
 800a5a4:	60b9      	str	r1, [r7, #8]
 800a5a6:	4611      	mov	r1, r2
 800a5a8:	461a      	mov	r2, r3
 800a5aa:	460b      	mov	r3, r1
 800a5ac:	71fb      	strb	r3, [r7, #7]
 800a5ae:	4613      	mov	r3, r2
 800a5b0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a5b6:	68bb      	ldr	r3, [r7, #8]
 800a5b8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a5ba:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d123      	bne.n	800a60a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a5c2:	88bb      	ldrh	r3, [r7, #4]
 800a5c4:	3303      	adds	r3, #3
 800a5c6:	089b      	lsrs	r3, r3, #2
 800a5c8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a5ca:	2300      	movs	r3, #0
 800a5cc:	61bb      	str	r3, [r7, #24]
 800a5ce:	e018      	b.n	800a602 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a5d0:	79fb      	ldrb	r3, [r7, #7]
 800a5d2:	031a      	lsls	r2, r3, #12
 800a5d4:	697b      	ldr	r3, [r7, #20]
 800a5d6:	4413      	add	r3, r2
 800a5d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a5dc:	461a      	mov	r2, r3
 800a5de:	69fb      	ldr	r3, [r7, #28]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a5e4:	69fb      	ldr	r3, [r7, #28]
 800a5e6:	3301      	adds	r3, #1
 800a5e8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a5ea:	69fb      	ldr	r3, [r7, #28]
 800a5ec:	3301      	adds	r3, #1
 800a5ee:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a5f0:	69fb      	ldr	r3, [r7, #28]
 800a5f2:	3301      	adds	r3, #1
 800a5f4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a5f6:	69fb      	ldr	r3, [r7, #28]
 800a5f8:	3301      	adds	r3, #1
 800a5fa:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a5fc:	69bb      	ldr	r3, [r7, #24]
 800a5fe:	3301      	adds	r3, #1
 800a600:	61bb      	str	r3, [r7, #24]
 800a602:	69ba      	ldr	r2, [r7, #24]
 800a604:	693b      	ldr	r3, [r7, #16]
 800a606:	429a      	cmp	r2, r3
 800a608:	d3e2      	bcc.n	800a5d0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a60a:	2300      	movs	r3, #0
}
 800a60c:	4618      	mov	r0, r3
 800a60e:	3724      	adds	r7, #36	; 0x24
 800a610:	46bd      	mov	sp, r7
 800a612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a616:	4770      	bx	lr

0800a618 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a618:	b480      	push	{r7}
 800a61a:	b08b      	sub	sp, #44	; 0x2c
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	60f8      	str	r0, [r7, #12]
 800a620:	60b9      	str	r1, [r7, #8]
 800a622:	4613      	mov	r3, r2
 800a624:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a62a:	68bb      	ldr	r3, [r7, #8]
 800a62c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a62e:	88fb      	ldrh	r3, [r7, #6]
 800a630:	089b      	lsrs	r3, r3, #2
 800a632:	b29b      	uxth	r3, r3
 800a634:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a636:	88fb      	ldrh	r3, [r7, #6]
 800a638:	f003 0303 	and.w	r3, r3, #3
 800a63c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a63e:	2300      	movs	r3, #0
 800a640:	623b      	str	r3, [r7, #32]
 800a642:	e014      	b.n	800a66e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a644:	69bb      	ldr	r3, [r7, #24]
 800a646:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a64a:	681a      	ldr	r2, [r3, #0]
 800a64c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a64e:	601a      	str	r2, [r3, #0]
    pDest++;
 800a650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a652:	3301      	adds	r3, #1
 800a654:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a658:	3301      	adds	r3, #1
 800a65a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a65c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a65e:	3301      	adds	r3, #1
 800a660:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a664:	3301      	adds	r3, #1
 800a666:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800a668:	6a3b      	ldr	r3, [r7, #32]
 800a66a:	3301      	adds	r3, #1
 800a66c:	623b      	str	r3, [r7, #32]
 800a66e:	6a3a      	ldr	r2, [r7, #32]
 800a670:	697b      	ldr	r3, [r7, #20]
 800a672:	429a      	cmp	r2, r3
 800a674:	d3e6      	bcc.n	800a644 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a676:	8bfb      	ldrh	r3, [r7, #30]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d01e      	beq.n	800a6ba <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a67c:	2300      	movs	r3, #0
 800a67e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a680:	69bb      	ldr	r3, [r7, #24]
 800a682:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a686:	461a      	mov	r2, r3
 800a688:	f107 0310 	add.w	r3, r7, #16
 800a68c:	6812      	ldr	r2, [r2, #0]
 800a68e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a690:	693a      	ldr	r2, [r7, #16]
 800a692:	6a3b      	ldr	r3, [r7, #32]
 800a694:	b2db      	uxtb	r3, r3
 800a696:	00db      	lsls	r3, r3, #3
 800a698:	fa22 f303 	lsr.w	r3, r2, r3
 800a69c:	b2da      	uxtb	r2, r3
 800a69e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6a0:	701a      	strb	r2, [r3, #0]
      i++;
 800a6a2:	6a3b      	ldr	r3, [r7, #32]
 800a6a4:	3301      	adds	r3, #1
 800a6a6:	623b      	str	r3, [r7, #32]
      pDest++;
 800a6a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6aa:	3301      	adds	r3, #1
 800a6ac:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800a6ae:	8bfb      	ldrh	r3, [r7, #30]
 800a6b0:	3b01      	subs	r3, #1
 800a6b2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a6b4:	8bfb      	ldrh	r3, [r7, #30]
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d1ea      	bne.n	800a690 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a6ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a6bc:	4618      	mov	r0, r3
 800a6be:	372c      	adds	r7, #44	; 0x2c
 800a6c0:	46bd      	mov	sp, r7
 800a6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c6:	4770      	bx	lr

0800a6c8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a6c8:	b480      	push	{r7}
 800a6ca:	b085      	sub	sp, #20
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	6078      	str	r0, [r7, #4]
 800a6d0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a6d6:	683b      	ldr	r3, [r7, #0]
 800a6d8:	781b      	ldrb	r3, [r3, #0]
 800a6da:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a6dc:	683b      	ldr	r3, [r7, #0]
 800a6de:	785b      	ldrb	r3, [r3, #1]
 800a6e0:	2b01      	cmp	r3, #1
 800a6e2:	d12c      	bne.n	800a73e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a6e4:	68bb      	ldr	r3, [r7, #8]
 800a6e6:	015a      	lsls	r2, r3, #5
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	4413      	add	r3, r2
 800a6ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	db12      	blt.n	800a71c <USB_EPSetStall+0x54>
 800a6f6:	68bb      	ldr	r3, [r7, #8]
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d00f      	beq.n	800a71c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a6fc:	68bb      	ldr	r3, [r7, #8]
 800a6fe:	015a      	lsls	r2, r3, #5
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	4413      	add	r3, r2
 800a704:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	68ba      	ldr	r2, [r7, #8]
 800a70c:	0151      	lsls	r1, r2, #5
 800a70e:	68fa      	ldr	r2, [r7, #12]
 800a710:	440a      	add	r2, r1
 800a712:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a716:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a71a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a71c:	68bb      	ldr	r3, [r7, #8]
 800a71e:	015a      	lsls	r2, r3, #5
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	4413      	add	r3, r2
 800a724:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	68ba      	ldr	r2, [r7, #8]
 800a72c:	0151      	lsls	r1, r2, #5
 800a72e:	68fa      	ldr	r2, [r7, #12]
 800a730:	440a      	add	r2, r1
 800a732:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a736:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a73a:	6013      	str	r3, [r2, #0]
 800a73c:	e02b      	b.n	800a796 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a73e:	68bb      	ldr	r3, [r7, #8]
 800a740:	015a      	lsls	r2, r3, #5
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	4413      	add	r3, r2
 800a746:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	db12      	blt.n	800a776 <USB_EPSetStall+0xae>
 800a750:	68bb      	ldr	r3, [r7, #8]
 800a752:	2b00      	cmp	r3, #0
 800a754:	d00f      	beq.n	800a776 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a756:	68bb      	ldr	r3, [r7, #8]
 800a758:	015a      	lsls	r2, r3, #5
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	4413      	add	r3, r2
 800a75e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	68ba      	ldr	r2, [r7, #8]
 800a766:	0151      	lsls	r1, r2, #5
 800a768:	68fa      	ldr	r2, [r7, #12]
 800a76a:	440a      	add	r2, r1
 800a76c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a770:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a774:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a776:	68bb      	ldr	r3, [r7, #8]
 800a778:	015a      	lsls	r2, r3, #5
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	4413      	add	r3, r2
 800a77e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	68ba      	ldr	r2, [r7, #8]
 800a786:	0151      	lsls	r1, r2, #5
 800a788:	68fa      	ldr	r2, [r7, #12]
 800a78a:	440a      	add	r2, r1
 800a78c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a790:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a794:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a796:	2300      	movs	r3, #0
}
 800a798:	4618      	mov	r0, r3
 800a79a:	3714      	adds	r7, #20
 800a79c:	46bd      	mov	sp, r7
 800a79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a2:	4770      	bx	lr

0800a7a4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a7a4:	b480      	push	{r7}
 800a7a6:	b085      	sub	sp, #20
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	6078      	str	r0, [r7, #4]
 800a7ac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a7b2:	683b      	ldr	r3, [r7, #0]
 800a7b4:	781b      	ldrb	r3, [r3, #0]
 800a7b6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a7b8:	683b      	ldr	r3, [r7, #0]
 800a7ba:	785b      	ldrb	r3, [r3, #1]
 800a7bc:	2b01      	cmp	r3, #1
 800a7be:	d128      	bne.n	800a812 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a7c0:	68bb      	ldr	r3, [r7, #8]
 800a7c2:	015a      	lsls	r2, r3, #5
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	4413      	add	r3, r2
 800a7c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	68ba      	ldr	r2, [r7, #8]
 800a7d0:	0151      	lsls	r1, r2, #5
 800a7d2:	68fa      	ldr	r2, [r7, #12]
 800a7d4:	440a      	add	r2, r1
 800a7d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a7da:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a7de:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a7e0:	683b      	ldr	r3, [r7, #0]
 800a7e2:	791b      	ldrb	r3, [r3, #4]
 800a7e4:	2b03      	cmp	r3, #3
 800a7e6:	d003      	beq.n	800a7f0 <USB_EPClearStall+0x4c>
 800a7e8:	683b      	ldr	r3, [r7, #0]
 800a7ea:	791b      	ldrb	r3, [r3, #4]
 800a7ec:	2b02      	cmp	r3, #2
 800a7ee:	d138      	bne.n	800a862 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a7f0:	68bb      	ldr	r3, [r7, #8]
 800a7f2:	015a      	lsls	r2, r3, #5
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	4413      	add	r3, r2
 800a7f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	68ba      	ldr	r2, [r7, #8]
 800a800:	0151      	lsls	r1, r2, #5
 800a802:	68fa      	ldr	r2, [r7, #12]
 800a804:	440a      	add	r2, r1
 800a806:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a80a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a80e:	6013      	str	r3, [r2, #0]
 800a810:	e027      	b.n	800a862 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a812:	68bb      	ldr	r3, [r7, #8]
 800a814:	015a      	lsls	r2, r3, #5
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	4413      	add	r3, r2
 800a81a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	68ba      	ldr	r2, [r7, #8]
 800a822:	0151      	lsls	r1, r2, #5
 800a824:	68fa      	ldr	r2, [r7, #12]
 800a826:	440a      	add	r2, r1
 800a828:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a82c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a830:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a832:	683b      	ldr	r3, [r7, #0]
 800a834:	791b      	ldrb	r3, [r3, #4]
 800a836:	2b03      	cmp	r3, #3
 800a838:	d003      	beq.n	800a842 <USB_EPClearStall+0x9e>
 800a83a:	683b      	ldr	r3, [r7, #0]
 800a83c:	791b      	ldrb	r3, [r3, #4]
 800a83e:	2b02      	cmp	r3, #2
 800a840:	d10f      	bne.n	800a862 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a842:	68bb      	ldr	r3, [r7, #8]
 800a844:	015a      	lsls	r2, r3, #5
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	4413      	add	r3, r2
 800a84a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	68ba      	ldr	r2, [r7, #8]
 800a852:	0151      	lsls	r1, r2, #5
 800a854:	68fa      	ldr	r2, [r7, #12]
 800a856:	440a      	add	r2, r1
 800a858:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a85c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a860:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a862:	2300      	movs	r3, #0
}
 800a864:	4618      	mov	r0, r3
 800a866:	3714      	adds	r7, #20
 800a868:	46bd      	mov	sp, r7
 800a86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a86e:	4770      	bx	lr

0800a870 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a870:	b480      	push	{r7}
 800a872:	b085      	sub	sp, #20
 800a874:	af00      	add	r7, sp, #0
 800a876:	6078      	str	r0, [r7, #4]
 800a878:	460b      	mov	r3, r1
 800a87a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	68fa      	ldr	r2, [r7, #12]
 800a88a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a88e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800a892:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a89a:	681a      	ldr	r2, [r3, #0]
 800a89c:	78fb      	ldrb	r3, [r7, #3]
 800a89e:	011b      	lsls	r3, r3, #4
 800a8a0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800a8a4:	68f9      	ldr	r1, [r7, #12]
 800a8a6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a8aa:	4313      	orrs	r3, r2
 800a8ac:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a8ae:	2300      	movs	r3, #0
}
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	3714      	adds	r7, #20
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ba:	4770      	bx	lr

0800a8bc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a8bc:	b480      	push	{r7}
 800a8be:	b085      	sub	sp, #20
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	68fa      	ldr	r2, [r7, #12]
 800a8d2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a8d6:	f023 0303 	bic.w	r3, r3, #3
 800a8da:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a8e2:	685b      	ldr	r3, [r3, #4]
 800a8e4:	68fa      	ldr	r2, [r7, #12]
 800a8e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a8ea:	f023 0302 	bic.w	r3, r3, #2
 800a8ee:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a8f0:	2300      	movs	r3, #0
}
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	3714      	adds	r7, #20
 800a8f6:	46bd      	mov	sp, r7
 800a8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8fc:	4770      	bx	lr

0800a8fe <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a8fe:	b480      	push	{r7}
 800a900:	b085      	sub	sp, #20
 800a902:	af00      	add	r7, sp, #0
 800a904:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	68fa      	ldr	r2, [r7, #12]
 800a914:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a918:	f023 0303 	bic.w	r3, r3, #3
 800a91c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a924:	685b      	ldr	r3, [r3, #4]
 800a926:	68fa      	ldr	r2, [r7, #12]
 800a928:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a92c:	f043 0302 	orr.w	r3, r3, #2
 800a930:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a932:	2300      	movs	r3, #0
}
 800a934:	4618      	mov	r0, r3
 800a936:	3714      	adds	r7, #20
 800a938:	46bd      	mov	sp, r7
 800a93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a93e:	4770      	bx	lr

0800a940 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800a940:	b480      	push	{r7}
 800a942:	b085      	sub	sp, #20
 800a944:	af00      	add	r7, sp, #0
 800a946:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	695b      	ldr	r3, [r3, #20]
 800a94c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	699b      	ldr	r3, [r3, #24]
 800a952:	68fa      	ldr	r2, [r7, #12]
 800a954:	4013      	ands	r3, r2
 800a956:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a958:	68fb      	ldr	r3, [r7, #12]
}
 800a95a:	4618      	mov	r0, r3
 800a95c:	3714      	adds	r7, #20
 800a95e:	46bd      	mov	sp, r7
 800a960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a964:	4770      	bx	lr

0800a966 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a966:	b480      	push	{r7}
 800a968:	b085      	sub	sp, #20
 800a96a:	af00      	add	r7, sp, #0
 800a96c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a978:	699b      	ldr	r3, [r3, #24]
 800a97a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a982:	69db      	ldr	r3, [r3, #28]
 800a984:	68ba      	ldr	r2, [r7, #8]
 800a986:	4013      	ands	r3, r2
 800a988:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a98a:	68bb      	ldr	r3, [r7, #8]
 800a98c:	0c1b      	lsrs	r3, r3, #16
}
 800a98e:	4618      	mov	r0, r3
 800a990:	3714      	adds	r7, #20
 800a992:	46bd      	mov	sp, r7
 800a994:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a998:	4770      	bx	lr

0800a99a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a99a:	b480      	push	{r7}
 800a99c:	b085      	sub	sp, #20
 800a99e:	af00      	add	r7, sp, #0
 800a9a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a9ac:	699b      	ldr	r3, [r3, #24]
 800a9ae:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a9b6:	69db      	ldr	r3, [r3, #28]
 800a9b8:	68ba      	ldr	r2, [r7, #8]
 800a9ba:	4013      	ands	r3, r2
 800a9bc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a9be:	68bb      	ldr	r3, [r7, #8]
 800a9c0:	b29b      	uxth	r3, r3
}
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	3714      	adds	r7, #20
 800a9c6:	46bd      	mov	sp, r7
 800a9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9cc:	4770      	bx	lr

0800a9ce <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a9ce:	b480      	push	{r7}
 800a9d0:	b085      	sub	sp, #20
 800a9d2:	af00      	add	r7, sp, #0
 800a9d4:	6078      	str	r0, [r7, #4]
 800a9d6:	460b      	mov	r3, r1
 800a9d8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a9de:	78fb      	ldrb	r3, [r7, #3]
 800a9e0:	015a      	lsls	r2, r3, #5
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	4413      	add	r3, r2
 800a9e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9ea:	689b      	ldr	r3, [r3, #8]
 800a9ec:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a9f4:	695b      	ldr	r3, [r3, #20]
 800a9f6:	68ba      	ldr	r2, [r7, #8]
 800a9f8:	4013      	ands	r3, r2
 800a9fa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a9fc:	68bb      	ldr	r3, [r7, #8]
}
 800a9fe:	4618      	mov	r0, r3
 800aa00:	3714      	adds	r7, #20
 800aa02:	46bd      	mov	sp, r7
 800aa04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa08:	4770      	bx	lr

0800aa0a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800aa0a:	b480      	push	{r7}
 800aa0c:	b087      	sub	sp, #28
 800aa0e:	af00      	add	r7, sp, #0
 800aa10:	6078      	str	r0, [r7, #4]
 800aa12:	460b      	mov	r3, r1
 800aa14:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800aa1a:	697b      	ldr	r3, [r7, #20]
 800aa1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa20:	691b      	ldr	r3, [r3, #16]
 800aa22:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800aa24:	697b      	ldr	r3, [r7, #20]
 800aa26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa2c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800aa2e:	78fb      	ldrb	r3, [r7, #3]
 800aa30:	f003 030f 	and.w	r3, r3, #15
 800aa34:	68fa      	ldr	r2, [r7, #12]
 800aa36:	fa22 f303 	lsr.w	r3, r2, r3
 800aa3a:	01db      	lsls	r3, r3, #7
 800aa3c:	b2db      	uxtb	r3, r3
 800aa3e:	693a      	ldr	r2, [r7, #16]
 800aa40:	4313      	orrs	r3, r2
 800aa42:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800aa44:	78fb      	ldrb	r3, [r7, #3]
 800aa46:	015a      	lsls	r2, r3, #5
 800aa48:	697b      	ldr	r3, [r7, #20]
 800aa4a:	4413      	add	r3, r2
 800aa4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa50:	689b      	ldr	r3, [r3, #8]
 800aa52:	693a      	ldr	r2, [r7, #16]
 800aa54:	4013      	ands	r3, r2
 800aa56:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800aa58:	68bb      	ldr	r3, [r7, #8]
}
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	371c      	adds	r7, #28
 800aa5e:	46bd      	mov	sp, r7
 800aa60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa64:	4770      	bx	lr

0800aa66 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800aa66:	b480      	push	{r7}
 800aa68:	b083      	sub	sp, #12
 800aa6a:	af00      	add	r7, sp, #0
 800aa6c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	695b      	ldr	r3, [r3, #20]
 800aa72:	f003 0301 	and.w	r3, r3, #1
}
 800aa76:	4618      	mov	r0, r3
 800aa78:	370c      	adds	r7, #12
 800aa7a:	46bd      	mov	sp, r7
 800aa7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa80:	4770      	bx	lr
	...

0800aa84 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800aa84:	b480      	push	{r7}
 800aa86:	b085      	sub	sp, #20
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa96:	681a      	ldr	r2, [r3, #0]
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa9e:	4619      	mov	r1, r3
 800aaa0:	4b09      	ldr	r3, [pc, #36]	; (800aac8 <USB_ActivateSetup+0x44>)
 800aaa2:	4013      	ands	r3, r2
 800aaa4:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aaac:	685b      	ldr	r3, [r3, #4]
 800aaae:	68fa      	ldr	r2, [r7, #12]
 800aab0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800aab4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aab8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800aaba:	2300      	movs	r3, #0
}
 800aabc:	4618      	mov	r0, r3
 800aabe:	3714      	adds	r7, #20
 800aac0:	46bd      	mov	sp, r7
 800aac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac6:	4770      	bx	lr
 800aac8:	fffff800 	.word	0xfffff800

0800aacc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800aacc:	b480      	push	{r7}
 800aace:	b087      	sub	sp, #28
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	60f8      	str	r0, [r7, #12]
 800aad4:	460b      	mov	r3, r1
 800aad6:	607a      	str	r2, [r7, #4]
 800aad8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	333c      	adds	r3, #60	; 0x3c
 800aae2:	3304      	adds	r3, #4
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800aae8:	693b      	ldr	r3, [r7, #16]
 800aaea:	4a26      	ldr	r2, [pc, #152]	; (800ab84 <USB_EP0_OutStart+0xb8>)
 800aaec:	4293      	cmp	r3, r2
 800aaee:	d90a      	bls.n	800ab06 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800aaf0:	697b      	ldr	r3, [r7, #20]
 800aaf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800aafc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ab00:	d101      	bne.n	800ab06 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800ab02:	2300      	movs	r3, #0
 800ab04:	e037      	b.n	800ab76 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800ab06:	697b      	ldr	r3, [r7, #20]
 800ab08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab0c:	461a      	mov	r2, r3
 800ab0e:	2300      	movs	r3, #0
 800ab10:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ab12:	697b      	ldr	r3, [r7, #20]
 800ab14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab18:	691b      	ldr	r3, [r3, #16]
 800ab1a:	697a      	ldr	r2, [r7, #20]
 800ab1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ab20:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ab24:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800ab26:	697b      	ldr	r3, [r7, #20]
 800ab28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab2c:	691b      	ldr	r3, [r3, #16]
 800ab2e:	697a      	ldr	r2, [r7, #20]
 800ab30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ab34:	f043 0318 	orr.w	r3, r3, #24
 800ab38:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800ab3a:	697b      	ldr	r3, [r7, #20]
 800ab3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab40:	691b      	ldr	r3, [r3, #16]
 800ab42:	697a      	ldr	r2, [r7, #20]
 800ab44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ab48:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800ab4c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800ab4e:	7afb      	ldrb	r3, [r7, #11]
 800ab50:	2b01      	cmp	r3, #1
 800ab52:	d10f      	bne.n	800ab74 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800ab54:	697b      	ldr	r3, [r7, #20]
 800ab56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab5a:	461a      	mov	r2, r3
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800ab60:	697b      	ldr	r3, [r7, #20]
 800ab62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	697a      	ldr	r2, [r7, #20]
 800ab6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ab6e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800ab72:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ab74:	2300      	movs	r3, #0
}
 800ab76:	4618      	mov	r0, r3
 800ab78:	371c      	adds	r7, #28
 800ab7a:	46bd      	mov	sp, r7
 800ab7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab80:	4770      	bx	lr
 800ab82:	bf00      	nop
 800ab84:	4f54300a 	.word	0x4f54300a

0800ab88 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ab88:	b480      	push	{r7}
 800ab8a:	b085      	sub	sp, #20
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ab90:	2300      	movs	r3, #0
 800ab92:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	3301      	adds	r3, #1
 800ab98:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	4a13      	ldr	r2, [pc, #76]	; (800abec <USB_CoreReset+0x64>)
 800ab9e:	4293      	cmp	r3, r2
 800aba0:	d901      	bls.n	800aba6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800aba2:	2303      	movs	r3, #3
 800aba4:	e01b      	b.n	800abde <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	691b      	ldr	r3, [r3, #16]
 800abaa:	2b00      	cmp	r3, #0
 800abac:	daf2      	bge.n	800ab94 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800abae:	2300      	movs	r3, #0
 800abb0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	691b      	ldr	r3, [r3, #16]
 800abb6:	f043 0201 	orr.w	r2, r3, #1
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	3301      	adds	r3, #1
 800abc2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	4a09      	ldr	r2, [pc, #36]	; (800abec <USB_CoreReset+0x64>)
 800abc8:	4293      	cmp	r3, r2
 800abca:	d901      	bls.n	800abd0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800abcc:	2303      	movs	r3, #3
 800abce:	e006      	b.n	800abde <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	691b      	ldr	r3, [r3, #16]
 800abd4:	f003 0301 	and.w	r3, r3, #1
 800abd8:	2b01      	cmp	r3, #1
 800abda:	d0f0      	beq.n	800abbe <USB_CoreReset+0x36>

  return HAL_OK;
 800abdc:	2300      	movs	r3, #0
}
 800abde:	4618      	mov	r0, r3
 800abe0:	3714      	adds	r7, #20
 800abe2:	46bd      	mov	sp, r7
 800abe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe8:	4770      	bx	lr
 800abea:	bf00      	nop
 800abec:	00030d40 	.word	0x00030d40

0800abf0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800abf0:	b580      	push	{r7, lr}
 800abf2:	b084      	sub	sp, #16
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	6078      	str	r0, [r7, #4]
 800abf8:	460b      	mov	r3, r1
 800abfa:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800abfc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800ac00:	f002 fcba 	bl	800d578 <USBD_static_malloc>
 800ac04:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d109      	bne.n	800ac20 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	32b0      	adds	r2, #176	; 0xb0
 800ac16:	2100      	movs	r1, #0
 800ac18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800ac1c:	2302      	movs	r3, #2
 800ac1e:	e0d4      	b.n	800adca <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800ac20:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800ac24:	2100      	movs	r1, #0
 800ac26:	68f8      	ldr	r0, [r7, #12]
 800ac28:	f005 fad0 	bl	80101cc <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	32b0      	adds	r2, #176	; 0xb0
 800ac36:	68f9      	ldr	r1, [r7, #12]
 800ac38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	32b0      	adds	r2, #176	; 0xb0
 800ac46:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	7c1b      	ldrb	r3, [r3, #16]
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d138      	bne.n	800acca <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800ac58:	4b5e      	ldr	r3, [pc, #376]	; (800add4 <USBD_CDC_Init+0x1e4>)
 800ac5a:	7819      	ldrb	r1, [r3, #0]
 800ac5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ac60:	2202      	movs	r2, #2
 800ac62:	6878      	ldr	r0, [r7, #4]
 800ac64:	f002 fb65 	bl	800d332 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800ac68:	4b5a      	ldr	r3, [pc, #360]	; (800add4 <USBD_CDC_Init+0x1e4>)
 800ac6a:	781b      	ldrb	r3, [r3, #0]
 800ac6c:	f003 020f 	and.w	r2, r3, #15
 800ac70:	6879      	ldr	r1, [r7, #4]
 800ac72:	4613      	mov	r3, r2
 800ac74:	009b      	lsls	r3, r3, #2
 800ac76:	4413      	add	r3, r2
 800ac78:	009b      	lsls	r3, r3, #2
 800ac7a:	440b      	add	r3, r1
 800ac7c:	3324      	adds	r3, #36	; 0x24
 800ac7e:	2201      	movs	r2, #1
 800ac80:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800ac82:	4b55      	ldr	r3, [pc, #340]	; (800add8 <USBD_CDC_Init+0x1e8>)
 800ac84:	7819      	ldrb	r1, [r3, #0]
 800ac86:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ac8a:	2202      	movs	r2, #2
 800ac8c:	6878      	ldr	r0, [r7, #4]
 800ac8e:	f002 fb50 	bl	800d332 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800ac92:	4b51      	ldr	r3, [pc, #324]	; (800add8 <USBD_CDC_Init+0x1e8>)
 800ac94:	781b      	ldrb	r3, [r3, #0]
 800ac96:	f003 020f 	and.w	r2, r3, #15
 800ac9a:	6879      	ldr	r1, [r7, #4]
 800ac9c:	4613      	mov	r3, r2
 800ac9e:	009b      	lsls	r3, r3, #2
 800aca0:	4413      	add	r3, r2
 800aca2:	009b      	lsls	r3, r3, #2
 800aca4:	440b      	add	r3, r1
 800aca6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800acaa:	2201      	movs	r2, #1
 800acac:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800acae:	4b4b      	ldr	r3, [pc, #300]	; (800addc <USBD_CDC_Init+0x1ec>)
 800acb0:	781b      	ldrb	r3, [r3, #0]
 800acb2:	f003 020f 	and.w	r2, r3, #15
 800acb6:	6879      	ldr	r1, [r7, #4]
 800acb8:	4613      	mov	r3, r2
 800acba:	009b      	lsls	r3, r3, #2
 800acbc:	4413      	add	r3, r2
 800acbe:	009b      	lsls	r3, r3, #2
 800acc0:	440b      	add	r3, r1
 800acc2:	3326      	adds	r3, #38	; 0x26
 800acc4:	2210      	movs	r2, #16
 800acc6:	801a      	strh	r2, [r3, #0]
 800acc8:	e035      	b.n	800ad36 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800acca:	4b42      	ldr	r3, [pc, #264]	; (800add4 <USBD_CDC_Init+0x1e4>)
 800accc:	7819      	ldrb	r1, [r3, #0]
 800acce:	2340      	movs	r3, #64	; 0x40
 800acd0:	2202      	movs	r2, #2
 800acd2:	6878      	ldr	r0, [r7, #4]
 800acd4:	f002 fb2d 	bl	800d332 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800acd8:	4b3e      	ldr	r3, [pc, #248]	; (800add4 <USBD_CDC_Init+0x1e4>)
 800acda:	781b      	ldrb	r3, [r3, #0]
 800acdc:	f003 020f 	and.w	r2, r3, #15
 800ace0:	6879      	ldr	r1, [r7, #4]
 800ace2:	4613      	mov	r3, r2
 800ace4:	009b      	lsls	r3, r3, #2
 800ace6:	4413      	add	r3, r2
 800ace8:	009b      	lsls	r3, r3, #2
 800acea:	440b      	add	r3, r1
 800acec:	3324      	adds	r3, #36	; 0x24
 800acee:	2201      	movs	r2, #1
 800acf0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800acf2:	4b39      	ldr	r3, [pc, #228]	; (800add8 <USBD_CDC_Init+0x1e8>)
 800acf4:	7819      	ldrb	r1, [r3, #0]
 800acf6:	2340      	movs	r3, #64	; 0x40
 800acf8:	2202      	movs	r2, #2
 800acfa:	6878      	ldr	r0, [r7, #4]
 800acfc:	f002 fb19 	bl	800d332 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800ad00:	4b35      	ldr	r3, [pc, #212]	; (800add8 <USBD_CDC_Init+0x1e8>)
 800ad02:	781b      	ldrb	r3, [r3, #0]
 800ad04:	f003 020f 	and.w	r2, r3, #15
 800ad08:	6879      	ldr	r1, [r7, #4]
 800ad0a:	4613      	mov	r3, r2
 800ad0c:	009b      	lsls	r3, r3, #2
 800ad0e:	4413      	add	r3, r2
 800ad10:	009b      	lsls	r3, r3, #2
 800ad12:	440b      	add	r3, r1
 800ad14:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ad18:	2201      	movs	r2, #1
 800ad1a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800ad1c:	4b2f      	ldr	r3, [pc, #188]	; (800addc <USBD_CDC_Init+0x1ec>)
 800ad1e:	781b      	ldrb	r3, [r3, #0]
 800ad20:	f003 020f 	and.w	r2, r3, #15
 800ad24:	6879      	ldr	r1, [r7, #4]
 800ad26:	4613      	mov	r3, r2
 800ad28:	009b      	lsls	r3, r3, #2
 800ad2a:	4413      	add	r3, r2
 800ad2c:	009b      	lsls	r3, r3, #2
 800ad2e:	440b      	add	r3, r1
 800ad30:	3326      	adds	r3, #38	; 0x26
 800ad32:	2210      	movs	r2, #16
 800ad34:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800ad36:	4b29      	ldr	r3, [pc, #164]	; (800addc <USBD_CDC_Init+0x1ec>)
 800ad38:	7819      	ldrb	r1, [r3, #0]
 800ad3a:	2308      	movs	r3, #8
 800ad3c:	2203      	movs	r2, #3
 800ad3e:	6878      	ldr	r0, [r7, #4]
 800ad40:	f002 faf7 	bl	800d332 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800ad44:	4b25      	ldr	r3, [pc, #148]	; (800addc <USBD_CDC_Init+0x1ec>)
 800ad46:	781b      	ldrb	r3, [r3, #0]
 800ad48:	f003 020f 	and.w	r2, r3, #15
 800ad4c:	6879      	ldr	r1, [r7, #4]
 800ad4e:	4613      	mov	r3, r2
 800ad50:	009b      	lsls	r3, r3, #2
 800ad52:	4413      	add	r3, r2
 800ad54:	009b      	lsls	r3, r3, #2
 800ad56:	440b      	add	r3, r1
 800ad58:	3324      	adds	r3, #36	; 0x24
 800ad5a:	2201      	movs	r2, #1
 800ad5c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	2200      	movs	r2, #0
 800ad62:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ad6c:	687a      	ldr	r2, [r7, #4]
 800ad6e:	33b0      	adds	r3, #176	; 0xb0
 800ad70:	009b      	lsls	r3, r3, #2
 800ad72:	4413      	add	r3, r2
 800ad74:	685b      	ldr	r3, [r3, #4]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	2200      	movs	r2, #0
 800ad7e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	2200      	movs	r2, #0
 800ad86:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d101      	bne.n	800ad98 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800ad94:	2302      	movs	r3, #2
 800ad96:	e018      	b.n	800adca <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	7c1b      	ldrb	r3, [r3, #16]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d10a      	bne.n	800adb6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ada0:	4b0d      	ldr	r3, [pc, #52]	; (800add8 <USBD_CDC_Init+0x1e8>)
 800ada2:	7819      	ldrb	r1, [r3, #0]
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800adaa:	f44f 7300 	mov.w	r3, #512	; 0x200
 800adae:	6878      	ldr	r0, [r7, #4]
 800adb0:	f002 fbae 	bl	800d510 <USBD_LL_PrepareReceive>
 800adb4:	e008      	b.n	800adc8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800adb6:	4b08      	ldr	r3, [pc, #32]	; (800add8 <USBD_CDC_Init+0x1e8>)
 800adb8:	7819      	ldrb	r1, [r3, #0]
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800adc0:	2340      	movs	r3, #64	; 0x40
 800adc2:	6878      	ldr	r0, [r7, #4]
 800adc4:	f002 fba4 	bl	800d510 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800adc8:	2300      	movs	r3, #0
}
 800adca:	4618      	mov	r0, r3
 800adcc:	3710      	adds	r7, #16
 800adce:	46bd      	mov	sp, r7
 800add0:	bd80      	pop	{r7, pc}
 800add2:	bf00      	nop
 800add4:	24000097 	.word	0x24000097
 800add8:	24000098 	.word	0x24000098
 800addc:	24000099 	.word	0x24000099

0800ade0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ade0:	b580      	push	{r7, lr}
 800ade2:	b082      	sub	sp, #8
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	6078      	str	r0, [r7, #4]
 800ade8:	460b      	mov	r3, r1
 800adea:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800adec:	4b3a      	ldr	r3, [pc, #232]	; (800aed8 <USBD_CDC_DeInit+0xf8>)
 800adee:	781b      	ldrb	r3, [r3, #0]
 800adf0:	4619      	mov	r1, r3
 800adf2:	6878      	ldr	r0, [r7, #4]
 800adf4:	f002 fac3 	bl	800d37e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800adf8:	4b37      	ldr	r3, [pc, #220]	; (800aed8 <USBD_CDC_DeInit+0xf8>)
 800adfa:	781b      	ldrb	r3, [r3, #0]
 800adfc:	f003 020f 	and.w	r2, r3, #15
 800ae00:	6879      	ldr	r1, [r7, #4]
 800ae02:	4613      	mov	r3, r2
 800ae04:	009b      	lsls	r3, r3, #2
 800ae06:	4413      	add	r3, r2
 800ae08:	009b      	lsls	r3, r3, #2
 800ae0a:	440b      	add	r3, r1
 800ae0c:	3324      	adds	r3, #36	; 0x24
 800ae0e:	2200      	movs	r2, #0
 800ae10:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800ae12:	4b32      	ldr	r3, [pc, #200]	; (800aedc <USBD_CDC_DeInit+0xfc>)
 800ae14:	781b      	ldrb	r3, [r3, #0]
 800ae16:	4619      	mov	r1, r3
 800ae18:	6878      	ldr	r0, [r7, #4]
 800ae1a:	f002 fab0 	bl	800d37e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800ae1e:	4b2f      	ldr	r3, [pc, #188]	; (800aedc <USBD_CDC_DeInit+0xfc>)
 800ae20:	781b      	ldrb	r3, [r3, #0]
 800ae22:	f003 020f 	and.w	r2, r3, #15
 800ae26:	6879      	ldr	r1, [r7, #4]
 800ae28:	4613      	mov	r3, r2
 800ae2a:	009b      	lsls	r3, r3, #2
 800ae2c:	4413      	add	r3, r2
 800ae2e:	009b      	lsls	r3, r3, #2
 800ae30:	440b      	add	r3, r1
 800ae32:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ae36:	2200      	movs	r2, #0
 800ae38:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800ae3a:	4b29      	ldr	r3, [pc, #164]	; (800aee0 <USBD_CDC_DeInit+0x100>)
 800ae3c:	781b      	ldrb	r3, [r3, #0]
 800ae3e:	4619      	mov	r1, r3
 800ae40:	6878      	ldr	r0, [r7, #4]
 800ae42:	f002 fa9c 	bl	800d37e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800ae46:	4b26      	ldr	r3, [pc, #152]	; (800aee0 <USBD_CDC_DeInit+0x100>)
 800ae48:	781b      	ldrb	r3, [r3, #0]
 800ae4a:	f003 020f 	and.w	r2, r3, #15
 800ae4e:	6879      	ldr	r1, [r7, #4]
 800ae50:	4613      	mov	r3, r2
 800ae52:	009b      	lsls	r3, r3, #2
 800ae54:	4413      	add	r3, r2
 800ae56:	009b      	lsls	r3, r3, #2
 800ae58:	440b      	add	r3, r1
 800ae5a:	3324      	adds	r3, #36	; 0x24
 800ae5c:	2200      	movs	r2, #0
 800ae5e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800ae60:	4b1f      	ldr	r3, [pc, #124]	; (800aee0 <USBD_CDC_DeInit+0x100>)
 800ae62:	781b      	ldrb	r3, [r3, #0]
 800ae64:	f003 020f 	and.w	r2, r3, #15
 800ae68:	6879      	ldr	r1, [r7, #4]
 800ae6a:	4613      	mov	r3, r2
 800ae6c:	009b      	lsls	r3, r3, #2
 800ae6e:	4413      	add	r3, r2
 800ae70:	009b      	lsls	r3, r3, #2
 800ae72:	440b      	add	r3, r1
 800ae74:	3326      	adds	r3, #38	; 0x26
 800ae76:	2200      	movs	r2, #0
 800ae78:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	32b0      	adds	r2, #176	; 0xb0
 800ae84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d01f      	beq.n	800aecc <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ae92:	687a      	ldr	r2, [r7, #4]
 800ae94:	33b0      	adds	r3, #176	; 0xb0
 800ae96:	009b      	lsls	r3, r3, #2
 800ae98:	4413      	add	r3, r2
 800ae9a:	685b      	ldr	r3, [r3, #4]
 800ae9c:	685b      	ldr	r3, [r3, #4]
 800ae9e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	32b0      	adds	r2, #176	; 0xb0
 800aeaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aeae:	4618      	mov	r0, r3
 800aeb0:	f002 fb70 	bl	800d594 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	32b0      	adds	r2, #176	; 0xb0
 800aebe:	2100      	movs	r1, #0
 800aec0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	2200      	movs	r2, #0
 800aec8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800aecc:	2300      	movs	r3, #0
}
 800aece:	4618      	mov	r0, r3
 800aed0:	3708      	adds	r7, #8
 800aed2:	46bd      	mov	sp, r7
 800aed4:	bd80      	pop	{r7, pc}
 800aed6:	bf00      	nop
 800aed8:	24000097 	.word	0x24000097
 800aedc:	24000098 	.word	0x24000098
 800aee0:	24000099 	.word	0x24000099

0800aee4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800aee4:	b580      	push	{r7, lr}
 800aee6:	b086      	sub	sp, #24
 800aee8:	af00      	add	r7, sp, #0
 800aeea:	6078      	str	r0, [r7, #4]
 800aeec:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	32b0      	adds	r2, #176	; 0xb0
 800aef8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aefc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800aefe:	2300      	movs	r3, #0
 800af00:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800af02:	2300      	movs	r3, #0
 800af04:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800af06:	2300      	movs	r3, #0
 800af08:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800af0a:	693b      	ldr	r3, [r7, #16]
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d101      	bne.n	800af14 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800af10:	2303      	movs	r3, #3
 800af12:	e0bf      	b.n	800b094 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800af14:	683b      	ldr	r3, [r7, #0]
 800af16:	781b      	ldrb	r3, [r3, #0]
 800af18:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d050      	beq.n	800afc2 <USBD_CDC_Setup+0xde>
 800af20:	2b20      	cmp	r3, #32
 800af22:	f040 80af 	bne.w	800b084 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800af26:	683b      	ldr	r3, [r7, #0]
 800af28:	88db      	ldrh	r3, [r3, #6]
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d03a      	beq.n	800afa4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800af2e:	683b      	ldr	r3, [r7, #0]
 800af30:	781b      	ldrb	r3, [r3, #0]
 800af32:	b25b      	sxtb	r3, r3
 800af34:	2b00      	cmp	r3, #0
 800af36:	da1b      	bge.n	800af70 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800af3e:	687a      	ldr	r2, [r7, #4]
 800af40:	33b0      	adds	r3, #176	; 0xb0
 800af42:	009b      	lsls	r3, r3, #2
 800af44:	4413      	add	r3, r2
 800af46:	685b      	ldr	r3, [r3, #4]
 800af48:	689b      	ldr	r3, [r3, #8]
 800af4a:	683a      	ldr	r2, [r7, #0]
 800af4c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800af4e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800af50:	683a      	ldr	r2, [r7, #0]
 800af52:	88d2      	ldrh	r2, [r2, #6]
 800af54:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800af56:	683b      	ldr	r3, [r7, #0]
 800af58:	88db      	ldrh	r3, [r3, #6]
 800af5a:	2b07      	cmp	r3, #7
 800af5c:	bf28      	it	cs
 800af5e:	2307      	movcs	r3, #7
 800af60:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800af62:	693b      	ldr	r3, [r7, #16]
 800af64:	89fa      	ldrh	r2, [r7, #14]
 800af66:	4619      	mov	r1, r3
 800af68:	6878      	ldr	r0, [r7, #4]
 800af6a:	f001 fd89 	bl	800ca80 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800af6e:	e090      	b.n	800b092 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800af70:	683b      	ldr	r3, [r7, #0]
 800af72:	785a      	ldrb	r2, [r3, #1]
 800af74:	693b      	ldr	r3, [r7, #16]
 800af76:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800af7a:	683b      	ldr	r3, [r7, #0]
 800af7c:	88db      	ldrh	r3, [r3, #6]
 800af7e:	2b3f      	cmp	r3, #63	; 0x3f
 800af80:	d803      	bhi.n	800af8a <USBD_CDC_Setup+0xa6>
 800af82:	683b      	ldr	r3, [r7, #0]
 800af84:	88db      	ldrh	r3, [r3, #6]
 800af86:	b2da      	uxtb	r2, r3
 800af88:	e000      	b.n	800af8c <USBD_CDC_Setup+0xa8>
 800af8a:	2240      	movs	r2, #64	; 0x40
 800af8c:	693b      	ldr	r3, [r7, #16]
 800af8e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800af92:	6939      	ldr	r1, [r7, #16]
 800af94:	693b      	ldr	r3, [r7, #16]
 800af96:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800af9a:	461a      	mov	r2, r3
 800af9c:	6878      	ldr	r0, [r7, #4]
 800af9e:	f001 fd9b 	bl	800cad8 <USBD_CtlPrepareRx>
      break;
 800afa2:	e076      	b.n	800b092 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800afaa:	687a      	ldr	r2, [r7, #4]
 800afac:	33b0      	adds	r3, #176	; 0xb0
 800afae:	009b      	lsls	r3, r3, #2
 800afb0:	4413      	add	r3, r2
 800afb2:	685b      	ldr	r3, [r3, #4]
 800afb4:	689b      	ldr	r3, [r3, #8]
 800afb6:	683a      	ldr	r2, [r7, #0]
 800afb8:	7850      	ldrb	r0, [r2, #1]
 800afba:	2200      	movs	r2, #0
 800afbc:	6839      	ldr	r1, [r7, #0]
 800afbe:	4798      	blx	r3
      break;
 800afc0:	e067      	b.n	800b092 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800afc2:	683b      	ldr	r3, [r7, #0]
 800afc4:	785b      	ldrb	r3, [r3, #1]
 800afc6:	2b0b      	cmp	r3, #11
 800afc8:	d851      	bhi.n	800b06e <USBD_CDC_Setup+0x18a>
 800afca:	a201      	add	r2, pc, #4	; (adr r2, 800afd0 <USBD_CDC_Setup+0xec>)
 800afcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afd0:	0800b001 	.word	0x0800b001
 800afd4:	0800b07d 	.word	0x0800b07d
 800afd8:	0800b06f 	.word	0x0800b06f
 800afdc:	0800b06f 	.word	0x0800b06f
 800afe0:	0800b06f 	.word	0x0800b06f
 800afe4:	0800b06f 	.word	0x0800b06f
 800afe8:	0800b06f 	.word	0x0800b06f
 800afec:	0800b06f 	.word	0x0800b06f
 800aff0:	0800b06f 	.word	0x0800b06f
 800aff4:	0800b06f 	.word	0x0800b06f
 800aff8:	0800b02b 	.word	0x0800b02b
 800affc:	0800b055 	.word	0x0800b055
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b006:	b2db      	uxtb	r3, r3
 800b008:	2b03      	cmp	r3, #3
 800b00a:	d107      	bne.n	800b01c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b00c:	f107 030a 	add.w	r3, r7, #10
 800b010:	2202      	movs	r2, #2
 800b012:	4619      	mov	r1, r3
 800b014:	6878      	ldr	r0, [r7, #4]
 800b016:	f001 fd33 	bl	800ca80 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b01a:	e032      	b.n	800b082 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b01c:	6839      	ldr	r1, [r7, #0]
 800b01e:	6878      	ldr	r0, [r7, #4]
 800b020:	f001 fcbd 	bl	800c99e <USBD_CtlError>
            ret = USBD_FAIL;
 800b024:	2303      	movs	r3, #3
 800b026:	75fb      	strb	r3, [r7, #23]
          break;
 800b028:	e02b      	b.n	800b082 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b030:	b2db      	uxtb	r3, r3
 800b032:	2b03      	cmp	r3, #3
 800b034:	d107      	bne.n	800b046 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b036:	f107 030d 	add.w	r3, r7, #13
 800b03a:	2201      	movs	r2, #1
 800b03c:	4619      	mov	r1, r3
 800b03e:	6878      	ldr	r0, [r7, #4]
 800b040:	f001 fd1e 	bl	800ca80 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b044:	e01d      	b.n	800b082 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b046:	6839      	ldr	r1, [r7, #0]
 800b048:	6878      	ldr	r0, [r7, #4]
 800b04a:	f001 fca8 	bl	800c99e <USBD_CtlError>
            ret = USBD_FAIL;
 800b04e:	2303      	movs	r3, #3
 800b050:	75fb      	strb	r3, [r7, #23]
          break;
 800b052:	e016      	b.n	800b082 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b05a:	b2db      	uxtb	r3, r3
 800b05c:	2b03      	cmp	r3, #3
 800b05e:	d00f      	beq.n	800b080 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800b060:	6839      	ldr	r1, [r7, #0]
 800b062:	6878      	ldr	r0, [r7, #4]
 800b064:	f001 fc9b 	bl	800c99e <USBD_CtlError>
            ret = USBD_FAIL;
 800b068:	2303      	movs	r3, #3
 800b06a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b06c:	e008      	b.n	800b080 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b06e:	6839      	ldr	r1, [r7, #0]
 800b070:	6878      	ldr	r0, [r7, #4]
 800b072:	f001 fc94 	bl	800c99e <USBD_CtlError>
          ret = USBD_FAIL;
 800b076:	2303      	movs	r3, #3
 800b078:	75fb      	strb	r3, [r7, #23]
          break;
 800b07a:	e002      	b.n	800b082 <USBD_CDC_Setup+0x19e>
          break;
 800b07c:	bf00      	nop
 800b07e:	e008      	b.n	800b092 <USBD_CDC_Setup+0x1ae>
          break;
 800b080:	bf00      	nop
      }
      break;
 800b082:	e006      	b.n	800b092 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800b084:	6839      	ldr	r1, [r7, #0]
 800b086:	6878      	ldr	r0, [r7, #4]
 800b088:	f001 fc89 	bl	800c99e <USBD_CtlError>
      ret = USBD_FAIL;
 800b08c:	2303      	movs	r3, #3
 800b08e:	75fb      	strb	r3, [r7, #23]
      break;
 800b090:	bf00      	nop
  }

  return (uint8_t)ret;
 800b092:	7dfb      	ldrb	r3, [r7, #23]
}
 800b094:	4618      	mov	r0, r3
 800b096:	3718      	adds	r7, #24
 800b098:	46bd      	mov	sp, r7
 800b09a:	bd80      	pop	{r7, pc}

0800b09c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b09c:	b580      	push	{r7, lr}
 800b09e:	b084      	sub	sp, #16
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	6078      	str	r0, [r7, #4]
 800b0a4:	460b      	mov	r3, r1
 800b0a6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b0ae:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	32b0      	adds	r2, #176	; 0xb0
 800b0ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d101      	bne.n	800b0c6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800b0c2:	2303      	movs	r3, #3
 800b0c4:	e065      	b.n	800b192 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	32b0      	adds	r2, #176	; 0xb0
 800b0d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0d4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b0d6:	78fb      	ldrb	r3, [r7, #3]
 800b0d8:	f003 020f 	and.w	r2, r3, #15
 800b0dc:	6879      	ldr	r1, [r7, #4]
 800b0de:	4613      	mov	r3, r2
 800b0e0:	009b      	lsls	r3, r3, #2
 800b0e2:	4413      	add	r3, r2
 800b0e4:	009b      	lsls	r3, r3, #2
 800b0e6:	440b      	add	r3, r1
 800b0e8:	3318      	adds	r3, #24
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d02f      	beq.n	800b150 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800b0f0:	78fb      	ldrb	r3, [r7, #3]
 800b0f2:	f003 020f 	and.w	r2, r3, #15
 800b0f6:	6879      	ldr	r1, [r7, #4]
 800b0f8:	4613      	mov	r3, r2
 800b0fa:	009b      	lsls	r3, r3, #2
 800b0fc:	4413      	add	r3, r2
 800b0fe:	009b      	lsls	r3, r3, #2
 800b100:	440b      	add	r3, r1
 800b102:	3318      	adds	r3, #24
 800b104:	681a      	ldr	r2, [r3, #0]
 800b106:	78fb      	ldrb	r3, [r7, #3]
 800b108:	f003 010f 	and.w	r1, r3, #15
 800b10c:	68f8      	ldr	r0, [r7, #12]
 800b10e:	460b      	mov	r3, r1
 800b110:	00db      	lsls	r3, r3, #3
 800b112:	440b      	add	r3, r1
 800b114:	009b      	lsls	r3, r3, #2
 800b116:	4403      	add	r3, r0
 800b118:	3344      	adds	r3, #68	; 0x44
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	fbb2 f1f3 	udiv	r1, r2, r3
 800b120:	fb01 f303 	mul.w	r3, r1, r3
 800b124:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b126:	2b00      	cmp	r3, #0
 800b128:	d112      	bne.n	800b150 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800b12a:	78fb      	ldrb	r3, [r7, #3]
 800b12c:	f003 020f 	and.w	r2, r3, #15
 800b130:	6879      	ldr	r1, [r7, #4]
 800b132:	4613      	mov	r3, r2
 800b134:	009b      	lsls	r3, r3, #2
 800b136:	4413      	add	r3, r2
 800b138:	009b      	lsls	r3, r3, #2
 800b13a:	440b      	add	r3, r1
 800b13c:	3318      	adds	r3, #24
 800b13e:	2200      	movs	r2, #0
 800b140:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b142:	78f9      	ldrb	r1, [r7, #3]
 800b144:	2300      	movs	r3, #0
 800b146:	2200      	movs	r2, #0
 800b148:	6878      	ldr	r0, [r7, #4]
 800b14a:	f002 f9c0 	bl	800d4ce <USBD_LL_Transmit>
 800b14e:	e01f      	b.n	800b190 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800b150:	68bb      	ldr	r3, [r7, #8]
 800b152:	2200      	movs	r2, #0
 800b154:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b15e:	687a      	ldr	r2, [r7, #4]
 800b160:	33b0      	adds	r3, #176	; 0xb0
 800b162:	009b      	lsls	r3, r3, #2
 800b164:	4413      	add	r3, r2
 800b166:	685b      	ldr	r3, [r3, #4]
 800b168:	691b      	ldr	r3, [r3, #16]
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d010      	beq.n	800b190 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b174:	687a      	ldr	r2, [r7, #4]
 800b176:	33b0      	adds	r3, #176	; 0xb0
 800b178:	009b      	lsls	r3, r3, #2
 800b17a:	4413      	add	r3, r2
 800b17c:	685b      	ldr	r3, [r3, #4]
 800b17e:	691b      	ldr	r3, [r3, #16]
 800b180:	68ba      	ldr	r2, [r7, #8]
 800b182:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800b186:	68ba      	ldr	r2, [r7, #8]
 800b188:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800b18c:	78fa      	ldrb	r2, [r7, #3]
 800b18e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b190:	2300      	movs	r3, #0
}
 800b192:	4618      	mov	r0, r3
 800b194:	3710      	adds	r7, #16
 800b196:	46bd      	mov	sp, r7
 800b198:	bd80      	pop	{r7, pc}

0800b19a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b19a:	b580      	push	{r7, lr}
 800b19c:	b084      	sub	sp, #16
 800b19e:	af00      	add	r7, sp, #0
 800b1a0:	6078      	str	r0, [r7, #4]
 800b1a2:	460b      	mov	r3, r1
 800b1a4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	32b0      	adds	r2, #176	; 0xb0
 800b1b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1b4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	32b0      	adds	r2, #176	; 0xb0
 800b1c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d101      	bne.n	800b1cc <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800b1c8:	2303      	movs	r3, #3
 800b1ca:	e01a      	b.n	800b202 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b1cc:	78fb      	ldrb	r3, [r7, #3]
 800b1ce:	4619      	mov	r1, r3
 800b1d0:	6878      	ldr	r0, [r7, #4]
 800b1d2:	f002 f9be 	bl	800d552 <USBD_LL_GetRxDataSize>
 800b1d6:	4602      	mov	r2, r0
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b1e4:	687a      	ldr	r2, [r7, #4]
 800b1e6:	33b0      	adds	r3, #176	; 0xb0
 800b1e8:	009b      	lsls	r3, r3, #2
 800b1ea:	4413      	add	r3, r2
 800b1ec:	685b      	ldr	r3, [r3, #4]
 800b1ee:	68db      	ldr	r3, [r3, #12]
 800b1f0:	68fa      	ldr	r2, [r7, #12]
 800b1f2:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800b1f6:	68fa      	ldr	r2, [r7, #12]
 800b1f8:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800b1fc:	4611      	mov	r1, r2
 800b1fe:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b200:	2300      	movs	r3, #0
}
 800b202:	4618      	mov	r0, r3
 800b204:	3710      	adds	r7, #16
 800b206:	46bd      	mov	sp, r7
 800b208:	bd80      	pop	{r7, pc}

0800b20a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b20a:	b580      	push	{r7, lr}
 800b20c:	b084      	sub	sp, #16
 800b20e:	af00      	add	r7, sp, #0
 800b210:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	32b0      	adds	r2, #176	; 0xb0
 800b21c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b220:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	2b00      	cmp	r3, #0
 800b226:	d101      	bne.n	800b22c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b228:	2303      	movs	r3, #3
 800b22a:	e025      	b.n	800b278 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b232:	687a      	ldr	r2, [r7, #4]
 800b234:	33b0      	adds	r3, #176	; 0xb0
 800b236:	009b      	lsls	r3, r3, #2
 800b238:	4413      	add	r3, r2
 800b23a:	685b      	ldr	r3, [r3, #4]
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d01a      	beq.n	800b276 <USBD_CDC_EP0_RxReady+0x6c>
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800b246:	2bff      	cmp	r3, #255	; 0xff
 800b248:	d015      	beq.n	800b276 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b250:	687a      	ldr	r2, [r7, #4]
 800b252:	33b0      	adds	r3, #176	; 0xb0
 800b254:	009b      	lsls	r3, r3, #2
 800b256:	4413      	add	r3, r2
 800b258:	685b      	ldr	r3, [r3, #4]
 800b25a:	689b      	ldr	r3, [r3, #8]
 800b25c:	68fa      	ldr	r2, [r7, #12]
 800b25e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800b262:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800b264:	68fa      	ldr	r2, [r7, #12]
 800b266:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b26a:	b292      	uxth	r2, r2
 800b26c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	22ff      	movs	r2, #255	; 0xff
 800b272:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800b276:	2300      	movs	r3, #0
}
 800b278:	4618      	mov	r0, r3
 800b27a:	3710      	adds	r7, #16
 800b27c:	46bd      	mov	sp, r7
 800b27e:	bd80      	pop	{r7, pc}

0800b280 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b280:	b580      	push	{r7, lr}
 800b282:	b086      	sub	sp, #24
 800b284:	af00      	add	r7, sp, #0
 800b286:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b288:	2182      	movs	r1, #130	; 0x82
 800b28a:	4818      	ldr	r0, [pc, #96]	; (800b2ec <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b28c:	f000 fd4f 	bl	800bd2e <USBD_GetEpDesc>
 800b290:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b292:	2101      	movs	r1, #1
 800b294:	4815      	ldr	r0, [pc, #84]	; (800b2ec <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b296:	f000 fd4a 	bl	800bd2e <USBD_GetEpDesc>
 800b29a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b29c:	2181      	movs	r1, #129	; 0x81
 800b29e:	4813      	ldr	r0, [pc, #76]	; (800b2ec <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b2a0:	f000 fd45 	bl	800bd2e <USBD_GetEpDesc>
 800b2a4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b2a6:	697b      	ldr	r3, [r7, #20]
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d002      	beq.n	800b2b2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b2ac:	697b      	ldr	r3, [r7, #20]
 800b2ae:	2210      	movs	r2, #16
 800b2b0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b2b2:	693b      	ldr	r3, [r7, #16]
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d006      	beq.n	800b2c6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b2b8:	693b      	ldr	r3, [r7, #16]
 800b2ba:	2200      	movs	r2, #0
 800b2bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b2c0:	711a      	strb	r2, [r3, #4]
 800b2c2:	2200      	movs	r2, #0
 800b2c4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d006      	beq.n	800b2da <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	2200      	movs	r2, #0
 800b2d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b2d4:	711a      	strb	r2, [r3, #4]
 800b2d6:	2200      	movs	r2, #0
 800b2d8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	2243      	movs	r2, #67	; 0x43
 800b2de:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b2e0:	4b02      	ldr	r3, [pc, #8]	; (800b2ec <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800b2e2:	4618      	mov	r0, r3
 800b2e4:	3718      	adds	r7, #24
 800b2e6:	46bd      	mov	sp, r7
 800b2e8:	bd80      	pop	{r7, pc}
 800b2ea:	bf00      	nop
 800b2ec:	24000054 	.word	0x24000054

0800b2f0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b2f0:	b580      	push	{r7, lr}
 800b2f2:	b086      	sub	sp, #24
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b2f8:	2182      	movs	r1, #130	; 0x82
 800b2fa:	4818      	ldr	r0, [pc, #96]	; (800b35c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b2fc:	f000 fd17 	bl	800bd2e <USBD_GetEpDesc>
 800b300:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b302:	2101      	movs	r1, #1
 800b304:	4815      	ldr	r0, [pc, #84]	; (800b35c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b306:	f000 fd12 	bl	800bd2e <USBD_GetEpDesc>
 800b30a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b30c:	2181      	movs	r1, #129	; 0x81
 800b30e:	4813      	ldr	r0, [pc, #76]	; (800b35c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b310:	f000 fd0d 	bl	800bd2e <USBD_GetEpDesc>
 800b314:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b316:	697b      	ldr	r3, [r7, #20]
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d002      	beq.n	800b322 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800b31c:	697b      	ldr	r3, [r7, #20]
 800b31e:	2210      	movs	r2, #16
 800b320:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b322:	693b      	ldr	r3, [r7, #16]
 800b324:	2b00      	cmp	r3, #0
 800b326:	d006      	beq.n	800b336 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b328:	693b      	ldr	r3, [r7, #16]
 800b32a:	2200      	movs	r2, #0
 800b32c:	711a      	strb	r2, [r3, #4]
 800b32e:	2200      	movs	r2, #0
 800b330:	f042 0202 	orr.w	r2, r2, #2
 800b334:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d006      	beq.n	800b34a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	2200      	movs	r2, #0
 800b340:	711a      	strb	r2, [r3, #4]
 800b342:	2200      	movs	r2, #0
 800b344:	f042 0202 	orr.w	r2, r2, #2
 800b348:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	2243      	movs	r2, #67	; 0x43
 800b34e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b350:	4b02      	ldr	r3, [pc, #8]	; (800b35c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800b352:	4618      	mov	r0, r3
 800b354:	3718      	adds	r7, #24
 800b356:	46bd      	mov	sp, r7
 800b358:	bd80      	pop	{r7, pc}
 800b35a:	bf00      	nop
 800b35c:	24000054 	.word	0x24000054

0800b360 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b360:	b580      	push	{r7, lr}
 800b362:	b086      	sub	sp, #24
 800b364:	af00      	add	r7, sp, #0
 800b366:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b368:	2182      	movs	r1, #130	; 0x82
 800b36a:	4818      	ldr	r0, [pc, #96]	; (800b3cc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b36c:	f000 fcdf 	bl	800bd2e <USBD_GetEpDesc>
 800b370:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b372:	2101      	movs	r1, #1
 800b374:	4815      	ldr	r0, [pc, #84]	; (800b3cc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b376:	f000 fcda 	bl	800bd2e <USBD_GetEpDesc>
 800b37a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b37c:	2181      	movs	r1, #129	; 0x81
 800b37e:	4813      	ldr	r0, [pc, #76]	; (800b3cc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b380:	f000 fcd5 	bl	800bd2e <USBD_GetEpDesc>
 800b384:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b386:	697b      	ldr	r3, [r7, #20]
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d002      	beq.n	800b392 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b38c:	697b      	ldr	r3, [r7, #20]
 800b38e:	2210      	movs	r2, #16
 800b390:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b392:	693b      	ldr	r3, [r7, #16]
 800b394:	2b00      	cmp	r3, #0
 800b396:	d006      	beq.n	800b3a6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b398:	693b      	ldr	r3, [r7, #16]
 800b39a:	2200      	movs	r2, #0
 800b39c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b3a0:	711a      	strb	r2, [r3, #4]
 800b3a2:	2200      	movs	r2, #0
 800b3a4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d006      	beq.n	800b3ba <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	2200      	movs	r2, #0
 800b3b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b3b4:	711a      	strb	r2, [r3, #4]
 800b3b6:	2200      	movs	r2, #0
 800b3b8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	2243      	movs	r2, #67	; 0x43
 800b3be:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b3c0:	4b02      	ldr	r3, [pc, #8]	; (800b3cc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800b3c2:	4618      	mov	r0, r3
 800b3c4:	3718      	adds	r7, #24
 800b3c6:	46bd      	mov	sp, r7
 800b3c8:	bd80      	pop	{r7, pc}
 800b3ca:	bf00      	nop
 800b3cc:	24000054 	.word	0x24000054

0800b3d0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b3d0:	b480      	push	{r7}
 800b3d2:	b083      	sub	sp, #12
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	220a      	movs	r2, #10
 800b3dc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b3de:	4b03      	ldr	r3, [pc, #12]	; (800b3ec <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b3e0:	4618      	mov	r0, r3
 800b3e2:	370c      	adds	r7, #12
 800b3e4:	46bd      	mov	sp, r7
 800b3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ea:	4770      	bx	lr
 800b3ec:	24000010 	.word	0x24000010

0800b3f0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b3f0:	b480      	push	{r7}
 800b3f2:	b083      	sub	sp, #12
 800b3f4:	af00      	add	r7, sp, #0
 800b3f6:	6078      	str	r0, [r7, #4]
 800b3f8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b3fa:	683b      	ldr	r3, [r7, #0]
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d101      	bne.n	800b404 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b400:	2303      	movs	r3, #3
 800b402:	e009      	b.n	800b418 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b40a:	687a      	ldr	r2, [r7, #4]
 800b40c:	33b0      	adds	r3, #176	; 0xb0
 800b40e:	009b      	lsls	r3, r3, #2
 800b410:	4413      	add	r3, r2
 800b412:	683a      	ldr	r2, [r7, #0]
 800b414:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800b416:	2300      	movs	r3, #0
}
 800b418:	4618      	mov	r0, r3
 800b41a:	370c      	adds	r7, #12
 800b41c:	46bd      	mov	sp, r7
 800b41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b422:	4770      	bx	lr

0800b424 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b424:	b480      	push	{r7}
 800b426:	b087      	sub	sp, #28
 800b428:	af00      	add	r7, sp, #0
 800b42a:	60f8      	str	r0, [r7, #12]
 800b42c:	60b9      	str	r1, [r7, #8]
 800b42e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	32b0      	adds	r2, #176	; 0xb0
 800b43a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b43e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b440:	697b      	ldr	r3, [r7, #20]
 800b442:	2b00      	cmp	r3, #0
 800b444:	d101      	bne.n	800b44a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b446:	2303      	movs	r3, #3
 800b448:	e008      	b.n	800b45c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800b44a:	697b      	ldr	r3, [r7, #20]
 800b44c:	68ba      	ldr	r2, [r7, #8]
 800b44e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800b452:	697b      	ldr	r3, [r7, #20]
 800b454:	687a      	ldr	r2, [r7, #4]
 800b456:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800b45a:	2300      	movs	r3, #0
}
 800b45c:	4618      	mov	r0, r3
 800b45e:	371c      	adds	r7, #28
 800b460:	46bd      	mov	sp, r7
 800b462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b466:	4770      	bx	lr

0800b468 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b468:	b480      	push	{r7}
 800b46a:	b085      	sub	sp, #20
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	6078      	str	r0, [r7, #4]
 800b470:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	32b0      	adds	r2, #176	; 0xb0
 800b47c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b480:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	2b00      	cmp	r3, #0
 800b486:	d101      	bne.n	800b48c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800b488:	2303      	movs	r3, #3
 800b48a:	e004      	b.n	800b496 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	683a      	ldr	r2, [r7, #0]
 800b490:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800b494:	2300      	movs	r3, #0
}
 800b496:	4618      	mov	r0, r3
 800b498:	3714      	adds	r7, #20
 800b49a:	46bd      	mov	sp, r7
 800b49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a0:	4770      	bx	lr
	...

0800b4a4 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b4a4:	b580      	push	{r7, lr}
 800b4a6:	b084      	sub	sp, #16
 800b4a8:	af00      	add	r7, sp, #0
 800b4aa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	32b0      	adds	r2, #176	; 0xb0
 800b4b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4ba:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800b4bc:	2301      	movs	r3, #1
 800b4be:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b4c0:	68bb      	ldr	r3, [r7, #8]
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d101      	bne.n	800b4ca <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b4c6:	2303      	movs	r3, #3
 800b4c8:	e025      	b.n	800b516 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800b4ca:	68bb      	ldr	r3, [r7, #8]
 800b4cc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d11f      	bne.n	800b514 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800b4d4:	68bb      	ldr	r3, [r7, #8]
 800b4d6:	2201      	movs	r2, #1
 800b4d8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800b4dc:	4b10      	ldr	r3, [pc, #64]	; (800b520 <USBD_CDC_TransmitPacket+0x7c>)
 800b4de:	781b      	ldrb	r3, [r3, #0]
 800b4e0:	f003 020f 	and.w	r2, r3, #15
 800b4e4:	68bb      	ldr	r3, [r7, #8]
 800b4e6:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800b4ea:	6878      	ldr	r0, [r7, #4]
 800b4ec:	4613      	mov	r3, r2
 800b4ee:	009b      	lsls	r3, r3, #2
 800b4f0:	4413      	add	r3, r2
 800b4f2:	009b      	lsls	r3, r3, #2
 800b4f4:	4403      	add	r3, r0
 800b4f6:	3318      	adds	r3, #24
 800b4f8:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800b4fa:	4b09      	ldr	r3, [pc, #36]	; (800b520 <USBD_CDC_TransmitPacket+0x7c>)
 800b4fc:	7819      	ldrb	r1, [r3, #0]
 800b4fe:	68bb      	ldr	r3, [r7, #8]
 800b500:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800b504:	68bb      	ldr	r3, [r7, #8]
 800b506:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800b50a:	6878      	ldr	r0, [r7, #4]
 800b50c:	f001 ffdf 	bl	800d4ce <USBD_LL_Transmit>

    ret = USBD_OK;
 800b510:	2300      	movs	r3, #0
 800b512:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800b514:	7bfb      	ldrb	r3, [r7, #15]
}
 800b516:	4618      	mov	r0, r3
 800b518:	3710      	adds	r7, #16
 800b51a:	46bd      	mov	sp, r7
 800b51c:	bd80      	pop	{r7, pc}
 800b51e:	bf00      	nop
 800b520:	24000097 	.word	0x24000097

0800b524 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b524:	b580      	push	{r7, lr}
 800b526:	b084      	sub	sp, #16
 800b528:	af00      	add	r7, sp, #0
 800b52a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	32b0      	adds	r2, #176	; 0xb0
 800b536:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b53a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	32b0      	adds	r2, #176	; 0xb0
 800b546:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d101      	bne.n	800b552 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800b54e:	2303      	movs	r3, #3
 800b550:	e018      	b.n	800b584 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	7c1b      	ldrb	r3, [r3, #16]
 800b556:	2b00      	cmp	r3, #0
 800b558:	d10a      	bne.n	800b570 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b55a:	4b0c      	ldr	r3, [pc, #48]	; (800b58c <USBD_CDC_ReceivePacket+0x68>)
 800b55c:	7819      	ldrb	r1, [r3, #0]
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b564:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b568:	6878      	ldr	r0, [r7, #4]
 800b56a:	f001 ffd1 	bl	800d510 <USBD_LL_PrepareReceive>
 800b56e:	e008      	b.n	800b582 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b570:	4b06      	ldr	r3, [pc, #24]	; (800b58c <USBD_CDC_ReceivePacket+0x68>)
 800b572:	7819      	ldrb	r1, [r3, #0]
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b57a:	2340      	movs	r3, #64	; 0x40
 800b57c:	6878      	ldr	r0, [r7, #4]
 800b57e:	f001 ffc7 	bl	800d510 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b582:	2300      	movs	r3, #0
}
 800b584:	4618      	mov	r0, r3
 800b586:	3710      	adds	r7, #16
 800b588:	46bd      	mov	sp, r7
 800b58a:	bd80      	pop	{r7, pc}
 800b58c:	24000098 	.word	0x24000098

0800b590 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b590:	b580      	push	{r7, lr}
 800b592:	b086      	sub	sp, #24
 800b594:	af00      	add	r7, sp, #0
 800b596:	60f8      	str	r0, [r7, #12]
 800b598:	60b9      	str	r1, [r7, #8]
 800b59a:	4613      	mov	r3, r2
 800b59c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d101      	bne.n	800b5a8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b5a4:	2303      	movs	r3, #3
 800b5a6:	e01f      	b.n	800b5e8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	2200      	movs	r2, #0
 800b5ac:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	2200      	movs	r2, #0
 800b5b4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	2200      	movs	r2, #0
 800b5bc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b5c0:	68bb      	ldr	r3, [r7, #8]
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d003      	beq.n	800b5ce <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	68ba      	ldr	r2, [r7, #8]
 800b5ca:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	2201      	movs	r2, #1
 800b5d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	79fa      	ldrb	r2, [r7, #7]
 800b5da:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b5dc:	68f8      	ldr	r0, [r7, #12]
 800b5de:	f001 fe3d 	bl	800d25c <USBD_LL_Init>
 800b5e2:	4603      	mov	r3, r0
 800b5e4:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b5e6:	7dfb      	ldrb	r3, [r7, #23]
}
 800b5e8:	4618      	mov	r0, r3
 800b5ea:	3718      	adds	r7, #24
 800b5ec:	46bd      	mov	sp, r7
 800b5ee:	bd80      	pop	{r7, pc}

0800b5f0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b5f0:	b580      	push	{r7, lr}
 800b5f2:	b084      	sub	sp, #16
 800b5f4:	af00      	add	r7, sp, #0
 800b5f6:	6078      	str	r0, [r7, #4]
 800b5f8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b5fa:	2300      	movs	r3, #0
 800b5fc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b5fe:	683b      	ldr	r3, [r7, #0]
 800b600:	2b00      	cmp	r3, #0
 800b602:	d101      	bne.n	800b608 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b604:	2303      	movs	r3, #3
 800b606:	e025      	b.n	800b654 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	683a      	ldr	r2, [r7, #0]
 800b60c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	32ae      	adds	r2, #174	; 0xae
 800b61a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b61e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b620:	2b00      	cmp	r3, #0
 800b622:	d00f      	beq.n	800b644 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	32ae      	adds	r2, #174	; 0xae
 800b62e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b634:	f107 020e 	add.w	r2, r7, #14
 800b638:	4610      	mov	r0, r2
 800b63a:	4798      	blx	r3
 800b63c:	4602      	mov	r2, r0
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800b64a:	1c5a      	adds	r2, r3, #1
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800b652:	2300      	movs	r3, #0
}
 800b654:	4618      	mov	r0, r3
 800b656:	3710      	adds	r7, #16
 800b658:	46bd      	mov	sp, r7
 800b65a:	bd80      	pop	{r7, pc}

0800b65c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b65c:	b580      	push	{r7, lr}
 800b65e:	b082      	sub	sp, #8
 800b660:	af00      	add	r7, sp, #0
 800b662:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b664:	6878      	ldr	r0, [r7, #4]
 800b666:	f001 fe49 	bl	800d2fc <USBD_LL_Start>
 800b66a:	4603      	mov	r3, r0
}
 800b66c:	4618      	mov	r0, r3
 800b66e:	3708      	adds	r7, #8
 800b670:	46bd      	mov	sp, r7
 800b672:	bd80      	pop	{r7, pc}

0800b674 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800b674:	b480      	push	{r7}
 800b676:	b083      	sub	sp, #12
 800b678:	af00      	add	r7, sp, #0
 800b67a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b67c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800b67e:	4618      	mov	r0, r3
 800b680:	370c      	adds	r7, #12
 800b682:	46bd      	mov	sp, r7
 800b684:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b688:	4770      	bx	lr

0800b68a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b68a:	b580      	push	{r7, lr}
 800b68c:	b084      	sub	sp, #16
 800b68e:	af00      	add	r7, sp, #0
 800b690:	6078      	str	r0, [r7, #4]
 800b692:	460b      	mov	r3, r1
 800b694:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b696:	2300      	movs	r3, #0
 800b698:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d009      	beq.n	800b6b8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	78fa      	ldrb	r2, [r7, #3]
 800b6ae:	4611      	mov	r1, r2
 800b6b0:	6878      	ldr	r0, [r7, #4]
 800b6b2:	4798      	blx	r3
 800b6b4:	4603      	mov	r3, r0
 800b6b6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b6b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6ba:	4618      	mov	r0, r3
 800b6bc:	3710      	adds	r7, #16
 800b6be:	46bd      	mov	sp, r7
 800b6c0:	bd80      	pop	{r7, pc}

0800b6c2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b6c2:	b580      	push	{r7, lr}
 800b6c4:	b084      	sub	sp, #16
 800b6c6:	af00      	add	r7, sp, #0
 800b6c8:	6078      	str	r0, [r7, #4]
 800b6ca:	460b      	mov	r3, r1
 800b6cc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b6ce:	2300      	movs	r3, #0
 800b6d0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b6d8:	685b      	ldr	r3, [r3, #4]
 800b6da:	78fa      	ldrb	r2, [r7, #3]
 800b6dc:	4611      	mov	r1, r2
 800b6de:	6878      	ldr	r0, [r7, #4]
 800b6e0:	4798      	blx	r3
 800b6e2:	4603      	mov	r3, r0
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d001      	beq.n	800b6ec <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800b6e8:	2303      	movs	r3, #3
 800b6ea:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b6ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	3710      	adds	r7, #16
 800b6f2:	46bd      	mov	sp, r7
 800b6f4:	bd80      	pop	{r7, pc}

0800b6f6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b6f6:	b580      	push	{r7, lr}
 800b6f8:	b084      	sub	sp, #16
 800b6fa:	af00      	add	r7, sp, #0
 800b6fc:	6078      	str	r0, [r7, #4]
 800b6fe:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b706:	6839      	ldr	r1, [r7, #0]
 800b708:	4618      	mov	r0, r3
 800b70a:	f001 f90e 	bl	800c92a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	2201      	movs	r2, #1
 800b712:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800b71c:	461a      	mov	r2, r3
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b72a:	f003 031f 	and.w	r3, r3, #31
 800b72e:	2b02      	cmp	r3, #2
 800b730:	d01a      	beq.n	800b768 <USBD_LL_SetupStage+0x72>
 800b732:	2b02      	cmp	r3, #2
 800b734:	d822      	bhi.n	800b77c <USBD_LL_SetupStage+0x86>
 800b736:	2b00      	cmp	r3, #0
 800b738:	d002      	beq.n	800b740 <USBD_LL_SetupStage+0x4a>
 800b73a:	2b01      	cmp	r3, #1
 800b73c:	d00a      	beq.n	800b754 <USBD_LL_SetupStage+0x5e>
 800b73e:	e01d      	b.n	800b77c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b746:	4619      	mov	r1, r3
 800b748:	6878      	ldr	r0, [r7, #4]
 800b74a:	f000 fb65 	bl	800be18 <USBD_StdDevReq>
 800b74e:	4603      	mov	r3, r0
 800b750:	73fb      	strb	r3, [r7, #15]
      break;
 800b752:	e020      	b.n	800b796 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b75a:	4619      	mov	r1, r3
 800b75c:	6878      	ldr	r0, [r7, #4]
 800b75e:	f000 fbcd 	bl	800befc <USBD_StdItfReq>
 800b762:	4603      	mov	r3, r0
 800b764:	73fb      	strb	r3, [r7, #15]
      break;
 800b766:	e016      	b.n	800b796 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b76e:	4619      	mov	r1, r3
 800b770:	6878      	ldr	r0, [r7, #4]
 800b772:	f000 fc2f 	bl	800bfd4 <USBD_StdEPReq>
 800b776:	4603      	mov	r3, r0
 800b778:	73fb      	strb	r3, [r7, #15]
      break;
 800b77a:	e00c      	b.n	800b796 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b782:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b786:	b2db      	uxtb	r3, r3
 800b788:	4619      	mov	r1, r3
 800b78a:	6878      	ldr	r0, [r7, #4]
 800b78c:	f001 fe16 	bl	800d3bc <USBD_LL_StallEP>
 800b790:	4603      	mov	r3, r0
 800b792:	73fb      	strb	r3, [r7, #15]
      break;
 800b794:	bf00      	nop
  }

  return ret;
 800b796:	7bfb      	ldrb	r3, [r7, #15]
}
 800b798:	4618      	mov	r0, r3
 800b79a:	3710      	adds	r7, #16
 800b79c:	46bd      	mov	sp, r7
 800b79e:	bd80      	pop	{r7, pc}

0800b7a0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b7a0:	b580      	push	{r7, lr}
 800b7a2:	b086      	sub	sp, #24
 800b7a4:	af00      	add	r7, sp, #0
 800b7a6:	60f8      	str	r0, [r7, #12]
 800b7a8:	460b      	mov	r3, r1
 800b7aa:	607a      	str	r2, [r7, #4]
 800b7ac:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800b7ae:	2300      	movs	r3, #0
 800b7b0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800b7b2:	7afb      	ldrb	r3, [r7, #11]
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d16e      	bne.n	800b896 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b7be:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b7c6:	2b03      	cmp	r3, #3
 800b7c8:	f040 8098 	bne.w	800b8fc <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800b7cc:	693b      	ldr	r3, [r7, #16]
 800b7ce:	689a      	ldr	r2, [r3, #8]
 800b7d0:	693b      	ldr	r3, [r7, #16]
 800b7d2:	68db      	ldr	r3, [r3, #12]
 800b7d4:	429a      	cmp	r2, r3
 800b7d6:	d913      	bls.n	800b800 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800b7d8:	693b      	ldr	r3, [r7, #16]
 800b7da:	689a      	ldr	r2, [r3, #8]
 800b7dc:	693b      	ldr	r3, [r7, #16]
 800b7de:	68db      	ldr	r3, [r3, #12]
 800b7e0:	1ad2      	subs	r2, r2, r3
 800b7e2:	693b      	ldr	r3, [r7, #16]
 800b7e4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b7e6:	693b      	ldr	r3, [r7, #16]
 800b7e8:	68da      	ldr	r2, [r3, #12]
 800b7ea:	693b      	ldr	r3, [r7, #16]
 800b7ec:	689b      	ldr	r3, [r3, #8]
 800b7ee:	4293      	cmp	r3, r2
 800b7f0:	bf28      	it	cs
 800b7f2:	4613      	movcs	r3, r2
 800b7f4:	461a      	mov	r2, r3
 800b7f6:	6879      	ldr	r1, [r7, #4]
 800b7f8:	68f8      	ldr	r0, [r7, #12]
 800b7fa:	f001 f98a 	bl	800cb12 <USBD_CtlContinueRx>
 800b7fe:	e07d      	b.n	800b8fc <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b806:	f003 031f 	and.w	r3, r3, #31
 800b80a:	2b02      	cmp	r3, #2
 800b80c:	d014      	beq.n	800b838 <USBD_LL_DataOutStage+0x98>
 800b80e:	2b02      	cmp	r3, #2
 800b810:	d81d      	bhi.n	800b84e <USBD_LL_DataOutStage+0xae>
 800b812:	2b00      	cmp	r3, #0
 800b814:	d002      	beq.n	800b81c <USBD_LL_DataOutStage+0x7c>
 800b816:	2b01      	cmp	r3, #1
 800b818:	d003      	beq.n	800b822 <USBD_LL_DataOutStage+0x82>
 800b81a:	e018      	b.n	800b84e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800b81c:	2300      	movs	r3, #0
 800b81e:	75bb      	strb	r3, [r7, #22]
            break;
 800b820:	e018      	b.n	800b854 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b828:	b2db      	uxtb	r3, r3
 800b82a:	4619      	mov	r1, r3
 800b82c:	68f8      	ldr	r0, [r7, #12]
 800b82e:	f000 fa64 	bl	800bcfa <USBD_CoreFindIF>
 800b832:	4603      	mov	r3, r0
 800b834:	75bb      	strb	r3, [r7, #22]
            break;
 800b836:	e00d      	b.n	800b854 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b83e:	b2db      	uxtb	r3, r3
 800b840:	4619      	mov	r1, r3
 800b842:	68f8      	ldr	r0, [r7, #12]
 800b844:	f000 fa66 	bl	800bd14 <USBD_CoreFindEP>
 800b848:	4603      	mov	r3, r0
 800b84a:	75bb      	strb	r3, [r7, #22]
            break;
 800b84c:	e002      	b.n	800b854 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800b84e:	2300      	movs	r3, #0
 800b850:	75bb      	strb	r3, [r7, #22]
            break;
 800b852:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800b854:	7dbb      	ldrb	r3, [r7, #22]
 800b856:	2b00      	cmp	r3, #0
 800b858:	d119      	bne.n	800b88e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b860:	b2db      	uxtb	r3, r3
 800b862:	2b03      	cmp	r3, #3
 800b864:	d113      	bne.n	800b88e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800b866:	7dba      	ldrb	r2, [r7, #22]
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	32ae      	adds	r2, #174	; 0xae
 800b86c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b870:	691b      	ldr	r3, [r3, #16]
 800b872:	2b00      	cmp	r3, #0
 800b874:	d00b      	beq.n	800b88e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800b876:	7dba      	ldrb	r2, [r7, #22]
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800b87e:	7dba      	ldrb	r2, [r7, #22]
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	32ae      	adds	r2, #174	; 0xae
 800b884:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b888:	691b      	ldr	r3, [r3, #16]
 800b88a:	68f8      	ldr	r0, [r7, #12]
 800b88c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b88e:	68f8      	ldr	r0, [r7, #12]
 800b890:	f001 f950 	bl	800cb34 <USBD_CtlSendStatus>
 800b894:	e032      	b.n	800b8fc <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800b896:	7afb      	ldrb	r3, [r7, #11]
 800b898:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b89c:	b2db      	uxtb	r3, r3
 800b89e:	4619      	mov	r1, r3
 800b8a0:	68f8      	ldr	r0, [r7, #12]
 800b8a2:	f000 fa37 	bl	800bd14 <USBD_CoreFindEP>
 800b8a6:	4603      	mov	r3, r0
 800b8a8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b8aa:	7dbb      	ldrb	r3, [r7, #22]
 800b8ac:	2bff      	cmp	r3, #255	; 0xff
 800b8ae:	d025      	beq.n	800b8fc <USBD_LL_DataOutStage+0x15c>
 800b8b0:	7dbb      	ldrb	r3, [r7, #22]
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d122      	bne.n	800b8fc <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b8bc:	b2db      	uxtb	r3, r3
 800b8be:	2b03      	cmp	r3, #3
 800b8c0:	d117      	bne.n	800b8f2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800b8c2:	7dba      	ldrb	r2, [r7, #22]
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	32ae      	adds	r2, #174	; 0xae
 800b8c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8cc:	699b      	ldr	r3, [r3, #24]
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d00f      	beq.n	800b8f2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800b8d2:	7dba      	ldrb	r2, [r7, #22]
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800b8da:	7dba      	ldrb	r2, [r7, #22]
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	32ae      	adds	r2, #174	; 0xae
 800b8e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8e4:	699b      	ldr	r3, [r3, #24]
 800b8e6:	7afa      	ldrb	r2, [r7, #11]
 800b8e8:	4611      	mov	r1, r2
 800b8ea:	68f8      	ldr	r0, [r7, #12]
 800b8ec:	4798      	blx	r3
 800b8ee:	4603      	mov	r3, r0
 800b8f0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800b8f2:	7dfb      	ldrb	r3, [r7, #23]
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d001      	beq.n	800b8fc <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800b8f8:	7dfb      	ldrb	r3, [r7, #23]
 800b8fa:	e000      	b.n	800b8fe <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800b8fc:	2300      	movs	r3, #0
}
 800b8fe:	4618      	mov	r0, r3
 800b900:	3718      	adds	r7, #24
 800b902:	46bd      	mov	sp, r7
 800b904:	bd80      	pop	{r7, pc}

0800b906 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b906:	b580      	push	{r7, lr}
 800b908:	b086      	sub	sp, #24
 800b90a:	af00      	add	r7, sp, #0
 800b90c:	60f8      	str	r0, [r7, #12]
 800b90e:	460b      	mov	r3, r1
 800b910:	607a      	str	r2, [r7, #4]
 800b912:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800b914:	7afb      	ldrb	r3, [r7, #11]
 800b916:	2b00      	cmp	r3, #0
 800b918:	d16f      	bne.n	800b9fa <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	3314      	adds	r3, #20
 800b91e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b926:	2b02      	cmp	r3, #2
 800b928:	d15a      	bne.n	800b9e0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800b92a:	693b      	ldr	r3, [r7, #16]
 800b92c:	689a      	ldr	r2, [r3, #8]
 800b92e:	693b      	ldr	r3, [r7, #16]
 800b930:	68db      	ldr	r3, [r3, #12]
 800b932:	429a      	cmp	r2, r3
 800b934:	d914      	bls.n	800b960 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b936:	693b      	ldr	r3, [r7, #16]
 800b938:	689a      	ldr	r2, [r3, #8]
 800b93a:	693b      	ldr	r3, [r7, #16]
 800b93c:	68db      	ldr	r3, [r3, #12]
 800b93e:	1ad2      	subs	r2, r2, r3
 800b940:	693b      	ldr	r3, [r7, #16]
 800b942:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b944:	693b      	ldr	r3, [r7, #16]
 800b946:	689b      	ldr	r3, [r3, #8]
 800b948:	461a      	mov	r2, r3
 800b94a:	6879      	ldr	r1, [r7, #4]
 800b94c:	68f8      	ldr	r0, [r7, #12]
 800b94e:	f001 f8b2 	bl	800cab6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b952:	2300      	movs	r3, #0
 800b954:	2200      	movs	r2, #0
 800b956:	2100      	movs	r1, #0
 800b958:	68f8      	ldr	r0, [r7, #12]
 800b95a:	f001 fdd9 	bl	800d510 <USBD_LL_PrepareReceive>
 800b95e:	e03f      	b.n	800b9e0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b960:	693b      	ldr	r3, [r7, #16]
 800b962:	68da      	ldr	r2, [r3, #12]
 800b964:	693b      	ldr	r3, [r7, #16]
 800b966:	689b      	ldr	r3, [r3, #8]
 800b968:	429a      	cmp	r2, r3
 800b96a:	d11c      	bne.n	800b9a6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b96c:	693b      	ldr	r3, [r7, #16]
 800b96e:	685a      	ldr	r2, [r3, #4]
 800b970:	693b      	ldr	r3, [r7, #16]
 800b972:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b974:	429a      	cmp	r2, r3
 800b976:	d316      	bcc.n	800b9a6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b978:	693b      	ldr	r3, [r7, #16]
 800b97a:	685a      	ldr	r2, [r3, #4]
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b982:	429a      	cmp	r2, r3
 800b984:	d20f      	bcs.n	800b9a6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b986:	2200      	movs	r2, #0
 800b988:	2100      	movs	r1, #0
 800b98a:	68f8      	ldr	r0, [r7, #12]
 800b98c:	f001 f893 	bl	800cab6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	2200      	movs	r2, #0
 800b994:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b998:	2300      	movs	r3, #0
 800b99a:	2200      	movs	r2, #0
 800b99c:	2100      	movs	r1, #0
 800b99e:	68f8      	ldr	r0, [r7, #12]
 800b9a0:	f001 fdb6 	bl	800d510 <USBD_LL_PrepareReceive>
 800b9a4:	e01c      	b.n	800b9e0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b9ac:	b2db      	uxtb	r3, r3
 800b9ae:	2b03      	cmp	r3, #3
 800b9b0:	d10f      	bne.n	800b9d2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b9b8:	68db      	ldr	r3, [r3, #12]
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d009      	beq.n	800b9d2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	2200      	movs	r2, #0
 800b9c2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b9cc:	68db      	ldr	r3, [r3, #12]
 800b9ce:	68f8      	ldr	r0, [r7, #12]
 800b9d0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b9d2:	2180      	movs	r1, #128	; 0x80
 800b9d4:	68f8      	ldr	r0, [r7, #12]
 800b9d6:	f001 fcf1 	bl	800d3bc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b9da:	68f8      	ldr	r0, [r7, #12]
 800b9dc:	f001 f8bd 	bl	800cb5a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d03a      	beq.n	800ba60 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800b9ea:	68f8      	ldr	r0, [r7, #12]
 800b9ec:	f7ff fe42 	bl	800b674 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	2200      	movs	r2, #0
 800b9f4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800b9f8:	e032      	b.n	800ba60 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800b9fa:	7afb      	ldrb	r3, [r7, #11]
 800b9fc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ba00:	b2db      	uxtb	r3, r3
 800ba02:	4619      	mov	r1, r3
 800ba04:	68f8      	ldr	r0, [r7, #12]
 800ba06:	f000 f985 	bl	800bd14 <USBD_CoreFindEP>
 800ba0a:	4603      	mov	r3, r0
 800ba0c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ba0e:	7dfb      	ldrb	r3, [r7, #23]
 800ba10:	2bff      	cmp	r3, #255	; 0xff
 800ba12:	d025      	beq.n	800ba60 <USBD_LL_DataInStage+0x15a>
 800ba14:	7dfb      	ldrb	r3, [r7, #23]
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d122      	bne.n	800ba60 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba20:	b2db      	uxtb	r3, r3
 800ba22:	2b03      	cmp	r3, #3
 800ba24:	d11c      	bne.n	800ba60 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800ba26:	7dfa      	ldrb	r2, [r7, #23]
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	32ae      	adds	r2, #174	; 0xae
 800ba2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba30:	695b      	ldr	r3, [r3, #20]
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d014      	beq.n	800ba60 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800ba36:	7dfa      	ldrb	r2, [r7, #23]
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800ba3e:	7dfa      	ldrb	r2, [r7, #23]
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	32ae      	adds	r2, #174	; 0xae
 800ba44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba48:	695b      	ldr	r3, [r3, #20]
 800ba4a:	7afa      	ldrb	r2, [r7, #11]
 800ba4c:	4611      	mov	r1, r2
 800ba4e:	68f8      	ldr	r0, [r7, #12]
 800ba50:	4798      	blx	r3
 800ba52:	4603      	mov	r3, r0
 800ba54:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800ba56:	7dbb      	ldrb	r3, [r7, #22]
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d001      	beq.n	800ba60 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800ba5c:	7dbb      	ldrb	r3, [r7, #22]
 800ba5e:	e000      	b.n	800ba62 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800ba60:	2300      	movs	r3, #0
}
 800ba62:	4618      	mov	r0, r3
 800ba64:	3718      	adds	r7, #24
 800ba66:	46bd      	mov	sp, r7
 800ba68:	bd80      	pop	{r7, pc}

0800ba6a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ba6a:	b580      	push	{r7, lr}
 800ba6c:	b084      	sub	sp, #16
 800ba6e:	af00      	add	r7, sp, #0
 800ba70:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800ba72:	2300      	movs	r3, #0
 800ba74:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	2201      	movs	r2, #1
 800ba7a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	2200      	movs	r2, #0
 800ba82:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	2200      	movs	r2, #0
 800ba8a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	2200      	movs	r2, #0
 800ba90:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	2200      	movs	r2, #0
 800ba98:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d014      	beq.n	800bad0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800baac:	685b      	ldr	r3, [r3, #4]
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d00e      	beq.n	800bad0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bab8:	685b      	ldr	r3, [r3, #4]
 800baba:	687a      	ldr	r2, [r7, #4]
 800babc:	6852      	ldr	r2, [r2, #4]
 800babe:	b2d2      	uxtb	r2, r2
 800bac0:	4611      	mov	r1, r2
 800bac2:	6878      	ldr	r0, [r7, #4]
 800bac4:	4798      	blx	r3
 800bac6:	4603      	mov	r3, r0
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d001      	beq.n	800bad0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800bacc:	2303      	movs	r3, #3
 800bace:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bad0:	2340      	movs	r3, #64	; 0x40
 800bad2:	2200      	movs	r2, #0
 800bad4:	2100      	movs	r1, #0
 800bad6:	6878      	ldr	r0, [r7, #4]
 800bad8:	f001 fc2b 	bl	800d332 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	2201      	movs	r2, #1
 800bae0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	2240      	movs	r2, #64	; 0x40
 800bae8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800baec:	2340      	movs	r3, #64	; 0x40
 800baee:	2200      	movs	r2, #0
 800baf0:	2180      	movs	r1, #128	; 0x80
 800baf2:	6878      	ldr	r0, [r7, #4]
 800baf4:	f001 fc1d 	bl	800d332 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	2201      	movs	r2, #1
 800bafc:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	2240      	movs	r2, #64	; 0x40
 800bb02:	621a      	str	r2, [r3, #32]

  return ret;
 800bb04:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb06:	4618      	mov	r0, r3
 800bb08:	3710      	adds	r7, #16
 800bb0a:	46bd      	mov	sp, r7
 800bb0c:	bd80      	pop	{r7, pc}

0800bb0e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800bb0e:	b480      	push	{r7}
 800bb10:	b083      	sub	sp, #12
 800bb12:	af00      	add	r7, sp, #0
 800bb14:	6078      	str	r0, [r7, #4]
 800bb16:	460b      	mov	r3, r1
 800bb18:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	78fa      	ldrb	r2, [r7, #3]
 800bb1e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800bb20:	2300      	movs	r3, #0
}
 800bb22:	4618      	mov	r0, r3
 800bb24:	370c      	adds	r7, #12
 800bb26:	46bd      	mov	sp, r7
 800bb28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb2c:	4770      	bx	lr

0800bb2e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800bb2e:	b480      	push	{r7}
 800bb30:	b083      	sub	sp, #12
 800bb32:	af00      	add	r7, sp, #0
 800bb34:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb3c:	b2db      	uxtb	r3, r3
 800bb3e:	2b04      	cmp	r3, #4
 800bb40:	d006      	beq.n	800bb50 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb48:	b2da      	uxtb	r2, r3
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	2204      	movs	r2, #4
 800bb54:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800bb58:	2300      	movs	r3, #0
}
 800bb5a:	4618      	mov	r0, r3
 800bb5c:	370c      	adds	r7, #12
 800bb5e:	46bd      	mov	sp, r7
 800bb60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb64:	4770      	bx	lr

0800bb66 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800bb66:	b480      	push	{r7}
 800bb68:	b083      	sub	sp, #12
 800bb6a:	af00      	add	r7, sp, #0
 800bb6c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb74:	b2db      	uxtb	r3, r3
 800bb76:	2b04      	cmp	r3, #4
 800bb78:	d106      	bne.n	800bb88 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800bb80:	b2da      	uxtb	r2, r3
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800bb88:	2300      	movs	r3, #0
}
 800bb8a:	4618      	mov	r0, r3
 800bb8c:	370c      	adds	r7, #12
 800bb8e:	46bd      	mov	sp, r7
 800bb90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb94:	4770      	bx	lr

0800bb96 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800bb96:	b580      	push	{r7, lr}
 800bb98:	b082      	sub	sp, #8
 800bb9a:	af00      	add	r7, sp, #0
 800bb9c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bba4:	b2db      	uxtb	r3, r3
 800bba6:	2b03      	cmp	r3, #3
 800bba8:	d110      	bne.n	800bbcc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d00b      	beq.n	800bbcc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bbba:	69db      	ldr	r3, [r3, #28]
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d005      	beq.n	800bbcc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bbc6:	69db      	ldr	r3, [r3, #28]
 800bbc8:	6878      	ldr	r0, [r7, #4]
 800bbca:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800bbcc:	2300      	movs	r3, #0
}
 800bbce:	4618      	mov	r0, r3
 800bbd0:	3708      	adds	r7, #8
 800bbd2:	46bd      	mov	sp, r7
 800bbd4:	bd80      	pop	{r7, pc}

0800bbd6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800bbd6:	b580      	push	{r7, lr}
 800bbd8:	b082      	sub	sp, #8
 800bbda:	af00      	add	r7, sp, #0
 800bbdc:	6078      	str	r0, [r7, #4]
 800bbde:	460b      	mov	r3, r1
 800bbe0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	32ae      	adds	r2, #174	; 0xae
 800bbec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d101      	bne.n	800bbf8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800bbf4:	2303      	movs	r3, #3
 800bbf6:	e01c      	b.n	800bc32 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bbfe:	b2db      	uxtb	r3, r3
 800bc00:	2b03      	cmp	r3, #3
 800bc02:	d115      	bne.n	800bc30 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	32ae      	adds	r2, #174	; 0xae
 800bc0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc12:	6a1b      	ldr	r3, [r3, #32]
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d00b      	beq.n	800bc30 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	32ae      	adds	r2, #174	; 0xae
 800bc22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc26:	6a1b      	ldr	r3, [r3, #32]
 800bc28:	78fa      	ldrb	r2, [r7, #3]
 800bc2a:	4611      	mov	r1, r2
 800bc2c:	6878      	ldr	r0, [r7, #4]
 800bc2e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bc30:	2300      	movs	r3, #0
}
 800bc32:	4618      	mov	r0, r3
 800bc34:	3708      	adds	r7, #8
 800bc36:	46bd      	mov	sp, r7
 800bc38:	bd80      	pop	{r7, pc}

0800bc3a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800bc3a:	b580      	push	{r7, lr}
 800bc3c:	b082      	sub	sp, #8
 800bc3e:	af00      	add	r7, sp, #0
 800bc40:	6078      	str	r0, [r7, #4]
 800bc42:	460b      	mov	r3, r1
 800bc44:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	32ae      	adds	r2, #174	; 0xae
 800bc50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d101      	bne.n	800bc5c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800bc58:	2303      	movs	r3, #3
 800bc5a:	e01c      	b.n	800bc96 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc62:	b2db      	uxtb	r3, r3
 800bc64:	2b03      	cmp	r3, #3
 800bc66:	d115      	bne.n	800bc94 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	32ae      	adds	r2, #174	; 0xae
 800bc72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d00b      	beq.n	800bc94 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	32ae      	adds	r2, #174	; 0xae
 800bc86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc8c:	78fa      	ldrb	r2, [r7, #3]
 800bc8e:	4611      	mov	r1, r2
 800bc90:	6878      	ldr	r0, [r7, #4]
 800bc92:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bc94:	2300      	movs	r3, #0
}
 800bc96:	4618      	mov	r0, r3
 800bc98:	3708      	adds	r7, #8
 800bc9a:	46bd      	mov	sp, r7
 800bc9c:	bd80      	pop	{r7, pc}

0800bc9e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800bc9e:	b480      	push	{r7}
 800bca0:	b083      	sub	sp, #12
 800bca2:	af00      	add	r7, sp, #0
 800bca4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bca6:	2300      	movs	r3, #0
}
 800bca8:	4618      	mov	r0, r3
 800bcaa:	370c      	adds	r7, #12
 800bcac:	46bd      	mov	sp, r7
 800bcae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb2:	4770      	bx	lr

0800bcb4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800bcb4:	b580      	push	{r7, lr}
 800bcb6:	b084      	sub	sp, #16
 800bcb8:	af00      	add	r7, sp, #0
 800bcba:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800bcbc:	2300      	movs	r3, #0
 800bcbe:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	2201      	movs	r2, #1
 800bcc4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d00e      	beq.n	800bcf0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bcd8:	685b      	ldr	r3, [r3, #4]
 800bcda:	687a      	ldr	r2, [r7, #4]
 800bcdc:	6852      	ldr	r2, [r2, #4]
 800bcde:	b2d2      	uxtb	r2, r2
 800bce0:	4611      	mov	r1, r2
 800bce2:	6878      	ldr	r0, [r7, #4]
 800bce4:	4798      	blx	r3
 800bce6:	4603      	mov	r3, r0
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d001      	beq.n	800bcf0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800bcec:	2303      	movs	r3, #3
 800bcee:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800bcf0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcf2:	4618      	mov	r0, r3
 800bcf4:	3710      	adds	r7, #16
 800bcf6:	46bd      	mov	sp, r7
 800bcf8:	bd80      	pop	{r7, pc}

0800bcfa <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800bcfa:	b480      	push	{r7}
 800bcfc:	b083      	sub	sp, #12
 800bcfe:	af00      	add	r7, sp, #0
 800bd00:	6078      	str	r0, [r7, #4]
 800bd02:	460b      	mov	r3, r1
 800bd04:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800bd06:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800bd08:	4618      	mov	r0, r3
 800bd0a:	370c      	adds	r7, #12
 800bd0c:	46bd      	mov	sp, r7
 800bd0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd12:	4770      	bx	lr

0800bd14 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800bd14:	b480      	push	{r7}
 800bd16:	b083      	sub	sp, #12
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	6078      	str	r0, [r7, #4]
 800bd1c:	460b      	mov	r3, r1
 800bd1e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800bd20:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800bd22:	4618      	mov	r0, r3
 800bd24:	370c      	adds	r7, #12
 800bd26:	46bd      	mov	sp, r7
 800bd28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd2c:	4770      	bx	lr

0800bd2e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800bd2e:	b580      	push	{r7, lr}
 800bd30:	b086      	sub	sp, #24
 800bd32:	af00      	add	r7, sp, #0
 800bd34:	6078      	str	r0, [r7, #4]
 800bd36:	460b      	mov	r3, r1
 800bd38:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800bd42:	2300      	movs	r3, #0
 800bd44:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	885b      	ldrh	r3, [r3, #2]
 800bd4a:	b29a      	uxth	r2, r3
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	781b      	ldrb	r3, [r3, #0]
 800bd50:	b29b      	uxth	r3, r3
 800bd52:	429a      	cmp	r2, r3
 800bd54:	d920      	bls.n	800bd98 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	781b      	ldrb	r3, [r3, #0]
 800bd5a:	b29b      	uxth	r3, r3
 800bd5c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800bd5e:	e013      	b.n	800bd88 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800bd60:	f107 030a 	add.w	r3, r7, #10
 800bd64:	4619      	mov	r1, r3
 800bd66:	6978      	ldr	r0, [r7, #20]
 800bd68:	f000 f81b 	bl	800bda2 <USBD_GetNextDesc>
 800bd6c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800bd6e:	697b      	ldr	r3, [r7, #20]
 800bd70:	785b      	ldrb	r3, [r3, #1]
 800bd72:	2b05      	cmp	r3, #5
 800bd74:	d108      	bne.n	800bd88 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800bd76:	697b      	ldr	r3, [r7, #20]
 800bd78:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800bd7a:	693b      	ldr	r3, [r7, #16]
 800bd7c:	789b      	ldrb	r3, [r3, #2]
 800bd7e:	78fa      	ldrb	r2, [r7, #3]
 800bd80:	429a      	cmp	r2, r3
 800bd82:	d008      	beq.n	800bd96 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800bd84:	2300      	movs	r3, #0
 800bd86:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	885b      	ldrh	r3, [r3, #2]
 800bd8c:	b29a      	uxth	r2, r3
 800bd8e:	897b      	ldrh	r3, [r7, #10]
 800bd90:	429a      	cmp	r2, r3
 800bd92:	d8e5      	bhi.n	800bd60 <USBD_GetEpDesc+0x32>
 800bd94:	e000      	b.n	800bd98 <USBD_GetEpDesc+0x6a>
          break;
 800bd96:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800bd98:	693b      	ldr	r3, [r7, #16]
}
 800bd9a:	4618      	mov	r0, r3
 800bd9c:	3718      	adds	r7, #24
 800bd9e:	46bd      	mov	sp, r7
 800bda0:	bd80      	pop	{r7, pc}

0800bda2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800bda2:	b480      	push	{r7}
 800bda4:	b085      	sub	sp, #20
 800bda6:	af00      	add	r7, sp, #0
 800bda8:	6078      	str	r0, [r7, #4]
 800bdaa:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800bdb0:	683b      	ldr	r3, [r7, #0]
 800bdb2:	881a      	ldrh	r2, [r3, #0]
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	781b      	ldrb	r3, [r3, #0]
 800bdb8:	b29b      	uxth	r3, r3
 800bdba:	4413      	add	r3, r2
 800bdbc:	b29a      	uxth	r2, r3
 800bdbe:	683b      	ldr	r3, [r7, #0]
 800bdc0:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	781b      	ldrb	r3, [r3, #0]
 800bdc6:	461a      	mov	r2, r3
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	4413      	add	r3, r2
 800bdcc:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800bdce:	68fb      	ldr	r3, [r7, #12]
}
 800bdd0:	4618      	mov	r0, r3
 800bdd2:	3714      	adds	r7, #20
 800bdd4:	46bd      	mov	sp, r7
 800bdd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdda:	4770      	bx	lr

0800bddc <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800bddc:	b480      	push	{r7}
 800bdde:	b087      	sub	sp, #28
 800bde0:	af00      	add	r7, sp, #0
 800bde2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800bde8:	697b      	ldr	r3, [r7, #20]
 800bdea:	781b      	ldrb	r3, [r3, #0]
 800bdec:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800bdee:	697b      	ldr	r3, [r7, #20]
 800bdf0:	3301      	adds	r3, #1
 800bdf2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800bdf4:	697b      	ldr	r3, [r7, #20]
 800bdf6:	781b      	ldrb	r3, [r3, #0]
 800bdf8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800bdfa:	8a3b      	ldrh	r3, [r7, #16]
 800bdfc:	021b      	lsls	r3, r3, #8
 800bdfe:	b21a      	sxth	r2, r3
 800be00:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800be04:	4313      	orrs	r3, r2
 800be06:	b21b      	sxth	r3, r3
 800be08:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800be0a:	89fb      	ldrh	r3, [r7, #14]
}
 800be0c:	4618      	mov	r0, r3
 800be0e:	371c      	adds	r7, #28
 800be10:	46bd      	mov	sp, r7
 800be12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be16:	4770      	bx	lr

0800be18 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800be18:	b580      	push	{r7, lr}
 800be1a:	b084      	sub	sp, #16
 800be1c:	af00      	add	r7, sp, #0
 800be1e:	6078      	str	r0, [r7, #4]
 800be20:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800be22:	2300      	movs	r3, #0
 800be24:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800be26:	683b      	ldr	r3, [r7, #0]
 800be28:	781b      	ldrb	r3, [r3, #0]
 800be2a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800be2e:	2b40      	cmp	r3, #64	; 0x40
 800be30:	d005      	beq.n	800be3e <USBD_StdDevReq+0x26>
 800be32:	2b40      	cmp	r3, #64	; 0x40
 800be34:	d857      	bhi.n	800bee6 <USBD_StdDevReq+0xce>
 800be36:	2b00      	cmp	r3, #0
 800be38:	d00f      	beq.n	800be5a <USBD_StdDevReq+0x42>
 800be3a:	2b20      	cmp	r3, #32
 800be3c:	d153      	bne.n	800bee6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	32ae      	adds	r2, #174	; 0xae
 800be48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be4c:	689b      	ldr	r3, [r3, #8]
 800be4e:	6839      	ldr	r1, [r7, #0]
 800be50:	6878      	ldr	r0, [r7, #4]
 800be52:	4798      	blx	r3
 800be54:	4603      	mov	r3, r0
 800be56:	73fb      	strb	r3, [r7, #15]
      break;
 800be58:	e04a      	b.n	800bef0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800be5a:	683b      	ldr	r3, [r7, #0]
 800be5c:	785b      	ldrb	r3, [r3, #1]
 800be5e:	2b09      	cmp	r3, #9
 800be60:	d83b      	bhi.n	800beda <USBD_StdDevReq+0xc2>
 800be62:	a201      	add	r2, pc, #4	; (adr r2, 800be68 <USBD_StdDevReq+0x50>)
 800be64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be68:	0800bebd 	.word	0x0800bebd
 800be6c:	0800bed1 	.word	0x0800bed1
 800be70:	0800bedb 	.word	0x0800bedb
 800be74:	0800bec7 	.word	0x0800bec7
 800be78:	0800bedb 	.word	0x0800bedb
 800be7c:	0800be9b 	.word	0x0800be9b
 800be80:	0800be91 	.word	0x0800be91
 800be84:	0800bedb 	.word	0x0800bedb
 800be88:	0800beb3 	.word	0x0800beb3
 800be8c:	0800bea5 	.word	0x0800bea5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800be90:	6839      	ldr	r1, [r7, #0]
 800be92:	6878      	ldr	r0, [r7, #4]
 800be94:	f000 fa3c 	bl	800c310 <USBD_GetDescriptor>
          break;
 800be98:	e024      	b.n	800bee4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800be9a:	6839      	ldr	r1, [r7, #0]
 800be9c:	6878      	ldr	r0, [r7, #4]
 800be9e:	f000 fba1 	bl	800c5e4 <USBD_SetAddress>
          break;
 800bea2:	e01f      	b.n	800bee4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800bea4:	6839      	ldr	r1, [r7, #0]
 800bea6:	6878      	ldr	r0, [r7, #4]
 800bea8:	f000 fbe0 	bl	800c66c <USBD_SetConfig>
 800beac:	4603      	mov	r3, r0
 800beae:	73fb      	strb	r3, [r7, #15]
          break;
 800beb0:	e018      	b.n	800bee4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800beb2:	6839      	ldr	r1, [r7, #0]
 800beb4:	6878      	ldr	r0, [r7, #4]
 800beb6:	f000 fc83 	bl	800c7c0 <USBD_GetConfig>
          break;
 800beba:	e013      	b.n	800bee4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800bebc:	6839      	ldr	r1, [r7, #0]
 800bebe:	6878      	ldr	r0, [r7, #4]
 800bec0:	f000 fcb4 	bl	800c82c <USBD_GetStatus>
          break;
 800bec4:	e00e      	b.n	800bee4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800bec6:	6839      	ldr	r1, [r7, #0]
 800bec8:	6878      	ldr	r0, [r7, #4]
 800beca:	f000 fce3 	bl	800c894 <USBD_SetFeature>
          break;
 800bece:	e009      	b.n	800bee4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800bed0:	6839      	ldr	r1, [r7, #0]
 800bed2:	6878      	ldr	r0, [r7, #4]
 800bed4:	f000 fd07 	bl	800c8e6 <USBD_ClrFeature>
          break;
 800bed8:	e004      	b.n	800bee4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800beda:	6839      	ldr	r1, [r7, #0]
 800bedc:	6878      	ldr	r0, [r7, #4]
 800bede:	f000 fd5e 	bl	800c99e <USBD_CtlError>
          break;
 800bee2:	bf00      	nop
      }
      break;
 800bee4:	e004      	b.n	800bef0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800bee6:	6839      	ldr	r1, [r7, #0]
 800bee8:	6878      	ldr	r0, [r7, #4]
 800beea:	f000 fd58 	bl	800c99e <USBD_CtlError>
      break;
 800beee:	bf00      	nop
  }

  return ret;
 800bef0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bef2:	4618      	mov	r0, r3
 800bef4:	3710      	adds	r7, #16
 800bef6:	46bd      	mov	sp, r7
 800bef8:	bd80      	pop	{r7, pc}
 800befa:	bf00      	nop

0800befc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800befc:	b580      	push	{r7, lr}
 800befe:	b084      	sub	sp, #16
 800bf00:	af00      	add	r7, sp, #0
 800bf02:	6078      	str	r0, [r7, #4]
 800bf04:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bf06:	2300      	movs	r3, #0
 800bf08:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bf0a:	683b      	ldr	r3, [r7, #0]
 800bf0c:	781b      	ldrb	r3, [r3, #0]
 800bf0e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bf12:	2b40      	cmp	r3, #64	; 0x40
 800bf14:	d005      	beq.n	800bf22 <USBD_StdItfReq+0x26>
 800bf16:	2b40      	cmp	r3, #64	; 0x40
 800bf18:	d852      	bhi.n	800bfc0 <USBD_StdItfReq+0xc4>
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d001      	beq.n	800bf22 <USBD_StdItfReq+0x26>
 800bf1e:	2b20      	cmp	r3, #32
 800bf20:	d14e      	bne.n	800bfc0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bf28:	b2db      	uxtb	r3, r3
 800bf2a:	3b01      	subs	r3, #1
 800bf2c:	2b02      	cmp	r3, #2
 800bf2e:	d840      	bhi.n	800bfb2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800bf30:	683b      	ldr	r3, [r7, #0]
 800bf32:	889b      	ldrh	r3, [r3, #4]
 800bf34:	b2db      	uxtb	r3, r3
 800bf36:	2b01      	cmp	r3, #1
 800bf38:	d836      	bhi.n	800bfa8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800bf3a:	683b      	ldr	r3, [r7, #0]
 800bf3c:	889b      	ldrh	r3, [r3, #4]
 800bf3e:	b2db      	uxtb	r3, r3
 800bf40:	4619      	mov	r1, r3
 800bf42:	6878      	ldr	r0, [r7, #4]
 800bf44:	f7ff fed9 	bl	800bcfa <USBD_CoreFindIF>
 800bf48:	4603      	mov	r3, r0
 800bf4a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bf4c:	7bbb      	ldrb	r3, [r7, #14]
 800bf4e:	2bff      	cmp	r3, #255	; 0xff
 800bf50:	d01d      	beq.n	800bf8e <USBD_StdItfReq+0x92>
 800bf52:	7bbb      	ldrb	r3, [r7, #14]
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d11a      	bne.n	800bf8e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800bf58:	7bba      	ldrb	r2, [r7, #14]
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	32ae      	adds	r2, #174	; 0xae
 800bf5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf62:	689b      	ldr	r3, [r3, #8]
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d00f      	beq.n	800bf88 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800bf68:	7bba      	ldrb	r2, [r7, #14]
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800bf70:	7bba      	ldrb	r2, [r7, #14]
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	32ae      	adds	r2, #174	; 0xae
 800bf76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf7a:	689b      	ldr	r3, [r3, #8]
 800bf7c:	6839      	ldr	r1, [r7, #0]
 800bf7e:	6878      	ldr	r0, [r7, #4]
 800bf80:	4798      	blx	r3
 800bf82:	4603      	mov	r3, r0
 800bf84:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800bf86:	e004      	b.n	800bf92 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800bf88:	2303      	movs	r3, #3
 800bf8a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800bf8c:	e001      	b.n	800bf92 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800bf8e:	2303      	movs	r3, #3
 800bf90:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800bf92:	683b      	ldr	r3, [r7, #0]
 800bf94:	88db      	ldrh	r3, [r3, #6]
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d110      	bne.n	800bfbc <USBD_StdItfReq+0xc0>
 800bf9a:	7bfb      	ldrb	r3, [r7, #15]
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d10d      	bne.n	800bfbc <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800bfa0:	6878      	ldr	r0, [r7, #4]
 800bfa2:	f000 fdc7 	bl	800cb34 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800bfa6:	e009      	b.n	800bfbc <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800bfa8:	6839      	ldr	r1, [r7, #0]
 800bfaa:	6878      	ldr	r0, [r7, #4]
 800bfac:	f000 fcf7 	bl	800c99e <USBD_CtlError>
          break;
 800bfb0:	e004      	b.n	800bfbc <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800bfb2:	6839      	ldr	r1, [r7, #0]
 800bfb4:	6878      	ldr	r0, [r7, #4]
 800bfb6:	f000 fcf2 	bl	800c99e <USBD_CtlError>
          break;
 800bfba:	e000      	b.n	800bfbe <USBD_StdItfReq+0xc2>
          break;
 800bfbc:	bf00      	nop
      }
      break;
 800bfbe:	e004      	b.n	800bfca <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800bfc0:	6839      	ldr	r1, [r7, #0]
 800bfc2:	6878      	ldr	r0, [r7, #4]
 800bfc4:	f000 fceb 	bl	800c99e <USBD_CtlError>
      break;
 800bfc8:	bf00      	nop
  }

  return ret;
 800bfca:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfcc:	4618      	mov	r0, r3
 800bfce:	3710      	adds	r7, #16
 800bfd0:	46bd      	mov	sp, r7
 800bfd2:	bd80      	pop	{r7, pc}

0800bfd4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bfd4:	b580      	push	{r7, lr}
 800bfd6:	b084      	sub	sp, #16
 800bfd8:	af00      	add	r7, sp, #0
 800bfda:	6078      	str	r0, [r7, #4]
 800bfdc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800bfde:	2300      	movs	r3, #0
 800bfe0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800bfe2:	683b      	ldr	r3, [r7, #0]
 800bfe4:	889b      	ldrh	r3, [r3, #4]
 800bfe6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bfe8:	683b      	ldr	r3, [r7, #0]
 800bfea:	781b      	ldrb	r3, [r3, #0]
 800bfec:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bff0:	2b40      	cmp	r3, #64	; 0x40
 800bff2:	d007      	beq.n	800c004 <USBD_StdEPReq+0x30>
 800bff4:	2b40      	cmp	r3, #64	; 0x40
 800bff6:	f200 817f 	bhi.w	800c2f8 <USBD_StdEPReq+0x324>
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d02a      	beq.n	800c054 <USBD_StdEPReq+0x80>
 800bffe:	2b20      	cmp	r3, #32
 800c000:	f040 817a 	bne.w	800c2f8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800c004:	7bbb      	ldrb	r3, [r7, #14]
 800c006:	4619      	mov	r1, r3
 800c008:	6878      	ldr	r0, [r7, #4]
 800c00a:	f7ff fe83 	bl	800bd14 <USBD_CoreFindEP>
 800c00e:	4603      	mov	r3, r0
 800c010:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c012:	7b7b      	ldrb	r3, [r7, #13]
 800c014:	2bff      	cmp	r3, #255	; 0xff
 800c016:	f000 8174 	beq.w	800c302 <USBD_StdEPReq+0x32e>
 800c01a:	7b7b      	ldrb	r3, [r7, #13]
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	f040 8170 	bne.w	800c302 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800c022:	7b7a      	ldrb	r2, [r7, #13]
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800c02a:	7b7a      	ldrb	r2, [r7, #13]
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	32ae      	adds	r2, #174	; 0xae
 800c030:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c034:	689b      	ldr	r3, [r3, #8]
 800c036:	2b00      	cmp	r3, #0
 800c038:	f000 8163 	beq.w	800c302 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800c03c:	7b7a      	ldrb	r2, [r7, #13]
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	32ae      	adds	r2, #174	; 0xae
 800c042:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c046:	689b      	ldr	r3, [r3, #8]
 800c048:	6839      	ldr	r1, [r7, #0]
 800c04a:	6878      	ldr	r0, [r7, #4]
 800c04c:	4798      	blx	r3
 800c04e:	4603      	mov	r3, r0
 800c050:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800c052:	e156      	b.n	800c302 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c054:	683b      	ldr	r3, [r7, #0]
 800c056:	785b      	ldrb	r3, [r3, #1]
 800c058:	2b03      	cmp	r3, #3
 800c05a:	d008      	beq.n	800c06e <USBD_StdEPReq+0x9a>
 800c05c:	2b03      	cmp	r3, #3
 800c05e:	f300 8145 	bgt.w	800c2ec <USBD_StdEPReq+0x318>
 800c062:	2b00      	cmp	r3, #0
 800c064:	f000 809b 	beq.w	800c19e <USBD_StdEPReq+0x1ca>
 800c068:	2b01      	cmp	r3, #1
 800c06a:	d03c      	beq.n	800c0e6 <USBD_StdEPReq+0x112>
 800c06c:	e13e      	b.n	800c2ec <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c074:	b2db      	uxtb	r3, r3
 800c076:	2b02      	cmp	r3, #2
 800c078:	d002      	beq.n	800c080 <USBD_StdEPReq+0xac>
 800c07a:	2b03      	cmp	r3, #3
 800c07c:	d016      	beq.n	800c0ac <USBD_StdEPReq+0xd8>
 800c07e:	e02c      	b.n	800c0da <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c080:	7bbb      	ldrb	r3, [r7, #14]
 800c082:	2b00      	cmp	r3, #0
 800c084:	d00d      	beq.n	800c0a2 <USBD_StdEPReq+0xce>
 800c086:	7bbb      	ldrb	r3, [r7, #14]
 800c088:	2b80      	cmp	r3, #128	; 0x80
 800c08a:	d00a      	beq.n	800c0a2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c08c:	7bbb      	ldrb	r3, [r7, #14]
 800c08e:	4619      	mov	r1, r3
 800c090:	6878      	ldr	r0, [r7, #4]
 800c092:	f001 f993 	bl	800d3bc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c096:	2180      	movs	r1, #128	; 0x80
 800c098:	6878      	ldr	r0, [r7, #4]
 800c09a:	f001 f98f 	bl	800d3bc <USBD_LL_StallEP>
 800c09e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c0a0:	e020      	b.n	800c0e4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800c0a2:	6839      	ldr	r1, [r7, #0]
 800c0a4:	6878      	ldr	r0, [r7, #4]
 800c0a6:	f000 fc7a 	bl	800c99e <USBD_CtlError>
              break;
 800c0aa:	e01b      	b.n	800c0e4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c0ac:	683b      	ldr	r3, [r7, #0]
 800c0ae:	885b      	ldrh	r3, [r3, #2]
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d10e      	bne.n	800c0d2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c0b4:	7bbb      	ldrb	r3, [r7, #14]
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d00b      	beq.n	800c0d2 <USBD_StdEPReq+0xfe>
 800c0ba:	7bbb      	ldrb	r3, [r7, #14]
 800c0bc:	2b80      	cmp	r3, #128	; 0x80
 800c0be:	d008      	beq.n	800c0d2 <USBD_StdEPReq+0xfe>
 800c0c0:	683b      	ldr	r3, [r7, #0]
 800c0c2:	88db      	ldrh	r3, [r3, #6]
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d104      	bne.n	800c0d2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c0c8:	7bbb      	ldrb	r3, [r7, #14]
 800c0ca:	4619      	mov	r1, r3
 800c0cc:	6878      	ldr	r0, [r7, #4]
 800c0ce:	f001 f975 	bl	800d3bc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c0d2:	6878      	ldr	r0, [r7, #4]
 800c0d4:	f000 fd2e 	bl	800cb34 <USBD_CtlSendStatus>

              break;
 800c0d8:	e004      	b.n	800c0e4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800c0da:	6839      	ldr	r1, [r7, #0]
 800c0dc:	6878      	ldr	r0, [r7, #4]
 800c0de:	f000 fc5e 	bl	800c99e <USBD_CtlError>
              break;
 800c0e2:	bf00      	nop
          }
          break;
 800c0e4:	e107      	b.n	800c2f6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c0ec:	b2db      	uxtb	r3, r3
 800c0ee:	2b02      	cmp	r3, #2
 800c0f0:	d002      	beq.n	800c0f8 <USBD_StdEPReq+0x124>
 800c0f2:	2b03      	cmp	r3, #3
 800c0f4:	d016      	beq.n	800c124 <USBD_StdEPReq+0x150>
 800c0f6:	e04b      	b.n	800c190 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c0f8:	7bbb      	ldrb	r3, [r7, #14]
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d00d      	beq.n	800c11a <USBD_StdEPReq+0x146>
 800c0fe:	7bbb      	ldrb	r3, [r7, #14]
 800c100:	2b80      	cmp	r3, #128	; 0x80
 800c102:	d00a      	beq.n	800c11a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c104:	7bbb      	ldrb	r3, [r7, #14]
 800c106:	4619      	mov	r1, r3
 800c108:	6878      	ldr	r0, [r7, #4]
 800c10a:	f001 f957 	bl	800d3bc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c10e:	2180      	movs	r1, #128	; 0x80
 800c110:	6878      	ldr	r0, [r7, #4]
 800c112:	f001 f953 	bl	800d3bc <USBD_LL_StallEP>
 800c116:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c118:	e040      	b.n	800c19c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800c11a:	6839      	ldr	r1, [r7, #0]
 800c11c:	6878      	ldr	r0, [r7, #4]
 800c11e:	f000 fc3e 	bl	800c99e <USBD_CtlError>
              break;
 800c122:	e03b      	b.n	800c19c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c124:	683b      	ldr	r3, [r7, #0]
 800c126:	885b      	ldrh	r3, [r3, #2]
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d136      	bne.n	800c19a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c12c:	7bbb      	ldrb	r3, [r7, #14]
 800c12e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c132:	2b00      	cmp	r3, #0
 800c134:	d004      	beq.n	800c140 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c136:	7bbb      	ldrb	r3, [r7, #14]
 800c138:	4619      	mov	r1, r3
 800c13a:	6878      	ldr	r0, [r7, #4]
 800c13c:	f001 f95d 	bl	800d3fa <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c140:	6878      	ldr	r0, [r7, #4]
 800c142:	f000 fcf7 	bl	800cb34 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800c146:	7bbb      	ldrb	r3, [r7, #14]
 800c148:	4619      	mov	r1, r3
 800c14a:	6878      	ldr	r0, [r7, #4]
 800c14c:	f7ff fde2 	bl	800bd14 <USBD_CoreFindEP>
 800c150:	4603      	mov	r3, r0
 800c152:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c154:	7b7b      	ldrb	r3, [r7, #13]
 800c156:	2bff      	cmp	r3, #255	; 0xff
 800c158:	d01f      	beq.n	800c19a <USBD_StdEPReq+0x1c6>
 800c15a:	7b7b      	ldrb	r3, [r7, #13]
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d11c      	bne.n	800c19a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800c160:	7b7a      	ldrb	r2, [r7, #13]
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800c168:	7b7a      	ldrb	r2, [r7, #13]
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	32ae      	adds	r2, #174	; 0xae
 800c16e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c172:	689b      	ldr	r3, [r3, #8]
 800c174:	2b00      	cmp	r3, #0
 800c176:	d010      	beq.n	800c19a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c178:	7b7a      	ldrb	r2, [r7, #13]
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	32ae      	adds	r2, #174	; 0xae
 800c17e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c182:	689b      	ldr	r3, [r3, #8]
 800c184:	6839      	ldr	r1, [r7, #0]
 800c186:	6878      	ldr	r0, [r7, #4]
 800c188:	4798      	blx	r3
 800c18a:	4603      	mov	r3, r0
 800c18c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800c18e:	e004      	b.n	800c19a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800c190:	6839      	ldr	r1, [r7, #0]
 800c192:	6878      	ldr	r0, [r7, #4]
 800c194:	f000 fc03 	bl	800c99e <USBD_CtlError>
              break;
 800c198:	e000      	b.n	800c19c <USBD_StdEPReq+0x1c8>
              break;
 800c19a:	bf00      	nop
          }
          break;
 800c19c:	e0ab      	b.n	800c2f6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c1a4:	b2db      	uxtb	r3, r3
 800c1a6:	2b02      	cmp	r3, #2
 800c1a8:	d002      	beq.n	800c1b0 <USBD_StdEPReq+0x1dc>
 800c1aa:	2b03      	cmp	r3, #3
 800c1ac:	d032      	beq.n	800c214 <USBD_StdEPReq+0x240>
 800c1ae:	e097      	b.n	800c2e0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c1b0:	7bbb      	ldrb	r3, [r7, #14]
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d007      	beq.n	800c1c6 <USBD_StdEPReq+0x1f2>
 800c1b6:	7bbb      	ldrb	r3, [r7, #14]
 800c1b8:	2b80      	cmp	r3, #128	; 0x80
 800c1ba:	d004      	beq.n	800c1c6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800c1bc:	6839      	ldr	r1, [r7, #0]
 800c1be:	6878      	ldr	r0, [r7, #4]
 800c1c0:	f000 fbed 	bl	800c99e <USBD_CtlError>
                break;
 800c1c4:	e091      	b.n	800c2ea <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c1c6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	da0b      	bge.n	800c1e6 <USBD_StdEPReq+0x212>
 800c1ce:	7bbb      	ldrb	r3, [r7, #14]
 800c1d0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c1d4:	4613      	mov	r3, r2
 800c1d6:	009b      	lsls	r3, r3, #2
 800c1d8:	4413      	add	r3, r2
 800c1da:	009b      	lsls	r3, r3, #2
 800c1dc:	3310      	adds	r3, #16
 800c1de:	687a      	ldr	r2, [r7, #4]
 800c1e0:	4413      	add	r3, r2
 800c1e2:	3304      	adds	r3, #4
 800c1e4:	e00b      	b.n	800c1fe <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c1e6:	7bbb      	ldrb	r3, [r7, #14]
 800c1e8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c1ec:	4613      	mov	r3, r2
 800c1ee:	009b      	lsls	r3, r3, #2
 800c1f0:	4413      	add	r3, r2
 800c1f2:	009b      	lsls	r3, r3, #2
 800c1f4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c1f8:	687a      	ldr	r2, [r7, #4]
 800c1fa:	4413      	add	r3, r2
 800c1fc:	3304      	adds	r3, #4
 800c1fe:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c200:	68bb      	ldr	r3, [r7, #8]
 800c202:	2200      	movs	r2, #0
 800c204:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c206:	68bb      	ldr	r3, [r7, #8]
 800c208:	2202      	movs	r2, #2
 800c20a:	4619      	mov	r1, r3
 800c20c:	6878      	ldr	r0, [r7, #4]
 800c20e:	f000 fc37 	bl	800ca80 <USBD_CtlSendData>
              break;
 800c212:	e06a      	b.n	800c2ea <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c214:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c218:	2b00      	cmp	r3, #0
 800c21a:	da11      	bge.n	800c240 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c21c:	7bbb      	ldrb	r3, [r7, #14]
 800c21e:	f003 020f 	and.w	r2, r3, #15
 800c222:	6879      	ldr	r1, [r7, #4]
 800c224:	4613      	mov	r3, r2
 800c226:	009b      	lsls	r3, r3, #2
 800c228:	4413      	add	r3, r2
 800c22a:	009b      	lsls	r3, r3, #2
 800c22c:	440b      	add	r3, r1
 800c22e:	3324      	adds	r3, #36	; 0x24
 800c230:	881b      	ldrh	r3, [r3, #0]
 800c232:	2b00      	cmp	r3, #0
 800c234:	d117      	bne.n	800c266 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c236:	6839      	ldr	r1, [r7, #0]
 800c238:	6878      	ldr	r0, [r7, #4]
 800c23a:	f000 fbb0 	bl	800c99e <USBD_CtlError>
                  break;
 800c23e:	e054      	b.n	800c2ea <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c240:	7bbb      	ldrb	r3, [r7, #14]
 800c242:	f003 020f 	and.w	r2, r3, #15
 800c246:	6879      	ldr	r1, [r7, #4]
 800c248:	4613      	mov	r3, r2
 800c24a:	009b      	lsls	r3, r3, #2
 800c24c:	4413      	add	r3, r2
 800c24e:	009b      	lsls	r3, r3, #2
 800c250:	440b      	add	r3, r1
 800c252:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c256:	881b      	ldrh	r3, [r3, #0]
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d104      	bne.n	800c266 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c25c:	6839      	ldr	r1, [r7, #0]
 800c25e:	6878      	ldr	r0, [r7, #4]
 800c260:	f000 fb9d 	bl	800c99e <USBD_CtlError>
                  break;
 800c264:	e041      	b.n	800c2ea <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c266:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	da0b      	bge.n	800c286 <USBD_StdEPReq+0x2b2>
 800c26e:	7bbb      	ldrb	r3, [r7, #14]
 800c270:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c274:	4613      	mov	r3, r2
 800c276:	009b      	lsls	r3, r3, #2
 800c278:	4413      	add	r3, r2
 800c27a:	009b      	lsls	r3, r3, #2
 800c27c:	3310      	adds	r3, #16
 800c27e:	687a      	ldr	r2, [r7, #4]
 800c280:	4413      	add	r3, r2
 800c282:	3304      	adds	r3, #4
 800c284:	e00b      	b.n	800c29e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c286:	7bbb      	ldrb	r3, [r7, #14]
 800c288:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c28c:	4613      	mov	r3, r2
 800c28e:	009b      	lsls	r3, r3, #2
 800c290:	4413      	add	r3, r2
 800c292:	009b      	lsls	r3, r3, #2
 800c294:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c298:	687a      	ldr	r2, [r7, #4]
 800c29a:	4413      	add	r3, r2
 800c29c:	3304      	adds	r3, #4
 800c29e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c2a0:	7bbb      	ldrb	r3, [r7, #14]
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d002      	beq.n	800c2ac <USBD_StdEPReq+0x2d8>
 800c2a6:	7bbb      	ldrb	r3, [r7, #14]
 800c2a8:	2b80      	cmp	r3, #128	; 0x80
 800c2aa:	d103      	bne.n	800c2b4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800c2ac:	68bb      	ldr	r3, [r7, #8]
 800c2ae:	2200      	movs	r2, #0
 800c2b0:	601a      	str	r2, [r3, #0]
 800c2b2:	e00e      	b.n	800c2d2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c2b4:	7bbb      	ldrb	r3, [r7, #14]
 800c2b6:	4619      	mov	r1, r3
 800c2b8:	6878      	ldr	r0, [r7, #4]
 800c2ba:	f001 f8bd 	bl	800d438 <USBD_LL_IsStallEP>
 800c2be:	4603      	mov	r3, r0
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d003      	beq.n	800c2cc <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800c2c4:	68bb      	ldr	r3, [r7, #8]
 800c2c6:	2201      	movs	r2, #1
 800c2c8:	601a      	str	r2, [r3, #0]
 800c2ca:	e002      	b.n	800c2d2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800c2cc:	68bb      	ldr	r3, [r7, #8]
 800c2ce:	2200      	movs	r2, #0
 800c2d0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c2d2:	68bb      	ldr	r3, [r7, #8]
 800c2d4:	2202      	movs	r2, #2
 800c2d6:	4619      	mov	r1, r3
 800c2d8:	6878      	ldr	r0, [r7, #4]
 800c2da:	f000 fbd1 	bl	800ca80 <USBD_CtlSendData>
              break;
 800c2de:	e004      	b.n	800c2ea <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800c2e0:	6839      	ldr	r1, [r7, #0]
 800c2e2:	6878      	ldr	r0, [r7, #4]
 800c2e4:	f000 fb5b 	bl	800c99e <USBD_CtlError>
              break;
 800c2e8:	bf00      	nop
          }
          break;
 800c2ea:	e004      	b.n	800c2f6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800c2ec:	6839      	ldr	r1, [r7, #0]
 800c2ee:	6878      	ldr	r0, [r7, #4]
 800c2f0:	f000 fb55 	bl	800c99e <USBD_CtlError>
          break;
 800c2f4:	bf00      	nop
      }
      break;
 800c2f6:	e005      	b.n	800c304 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800c2f8:	6839      	ldr	r1, [r7, #0]
 800c2fa:	6878      	ldr	r0, [r7, #4]
 800c2fc:	f000 fb4f 	bl	800c99e <USBD_CtlError>
      break;
 800c300:	e000      	b.n	800c304 <USBD_StdEPReq+0x330>
      break;
 800c302:	bf00      	nop
  }

  return ret;
 800c304:	7bfb      	ldrb	r3, [r7, #15]
}
 800c306:	4618      	mov	r0, r3
 800c308:	3710      	adds	r7, #16
 800c30a:	46bd      	mov	sp, r7
 800c30c:	bd80      	pop	{r7, pc}
	...

0800c310 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c310:	b580      	push	{r7, lr}
 800c312:	b084      	sub	sp, #16
 800c314:	af00      	add	r7, sp, #0
 800c316:	6078      	str	r0, [r7, #4]
 800c318:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c31a:	2300      	movs	r3, #0
 800c31c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c31e:	2300      	movs	r3, #0
 800c320:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c322:	2300      	movs	r3, #0
 800c324:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c326:	683b      	ldr	r3, [r7, #0]
 800c328:	885b      	ldrh	r3, [r3, #2]
 800c32a:	0a1b      	lsrs	r3, r3, #8
 800c32c:	b29b      	uxth	r3, r3
 800c32e:	3b01      	subs	r3, #1
 800c330:	2b06      	cmp	r3, #6
 800c332:	f200 8128 	bhi.w	800c586 <USBD_GetDescriptor+0x276>
 800c336:	a201      	add	r2, pc, #4	; (adr r2, 800c33c <USBD_GetDescriptor+0x2c>)
 800c338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c33c:	0800c359 	.word	0x0800c359
 800c340:	0800c371 	.word	0x0800c371
 800c344:	0800c3b1 	.word	0x0800c3b1
 800c348:	0800c587 	.word	0x0800c587
 800c34c:	0800c587 	.word	0x0800c587
 800c350:	0800c527 	.word	0x0800c527
 800c354:	0800c553 	.word	0x0800c553
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	687a      	ldr	r2, [r7, #4]
 800c362:	7c12      	ldrb	r2, [r2, #16]
 800c364:	f107 0108 	add.w	r1, r7, #8
 800c368:	4610      	mov	r0, r2
 800c36a:	4798      	blx	r3
 800c36c:	60f8      	str	r0, [r7, #12]
      break;
 800c36e:	e112      	b.n	800c596 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	7c1b      	ldrb	r3, [r3, #16]
 800c374:	2b00      	cmp	r3, #0
 800c376:	d10d      	bne.n	800c394 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c37e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c380:	f107 0208 	add.w	r2, r7, #8
 800c384:	4610      	mov	r0, r2
 800c386:	4798      	blx	r3
 800c388:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	3301      	adds	r3, #1
 800c38e:	2202      	movs	r2, #2
 800c390:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c392:	e100      	b.n	800c596 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c39a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c39c:	f107 0208 	add.w	r2, r7, #8
 800c3a0:	4610      	mov	r0, r2
 800c3a2:	4798      	blx	r3
 800c3a4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	3301      	adds	r3, #1
 800c3aa:	2202      	movs	r2, #2
 800c3ac:	701a      	strb	r2, [r3, #0]
      break;
 800c3ae:	e0f2      	b.n	800c596 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c3b0:	683b      	ldr	r3, [r7, #0]
 800c3b2:	885b      	ldrh	r3, [r3, #2]
 800c3b4:	b2db      	uxtb	r3, r3
 800c3b6:	2b05      	cmp	r3, #5
 800c3b8:	f200 80ac 	bhi.w	800c514 <USBD_GetDescriptor+0x204>
 800c3bc:	a201      	add	r2, pc, #4	; (adr r2, 800c3c4 <USBD_GetDescriptor+0xb4>)
 800c3be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3c2:	bf00      	nop
 800c3c4:	0800c3dd 	.word	0x0800c3dd
 800c3c8:	0800c411 	.word	0x0800c411
 800c3cc:	0800c445 	.word	0x0800c445
 800c3d0:	0800c479 	.word	0x0800c479
 800c3d4:	0800c4ad 	.word	0x0800c4ad
 800c3d8:	0800c4e1 	.word	0x0800c4e1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c3e2:	685b      	ldr	r3, [r3, #4]
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d00b      	beq.n	800c400 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c3ee:	685b      	ldr	r3, [r3, #4]
 800c3f0:	687a      	ldr	r2, [r7, #4]
 800c3f2:	7c12      	ldrb	r2, [r2, #16]
 800c3f4:	f107 0108 	add.w	r1, r7, #8
 800c3f8:	4610      	mov	r0, r2
 800c3fa:	4798      	blx	r3
 800c3fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c3fe:	e091      	b.n	800c524 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c400:	6839      	ldr	r1, [r7, #0]
 800c402:	6878      	ldr	r0, [r7, #4]
 800c404:	f000 facb 	bl	800c99e <USBD_CtlError>
            err++;
 800c408:	7afb      	ldrb	r3, [r7, #11]
 800c40a:	3301      	adds	r3, #1
 800c40c:	72fb      	strb	r3, [r7, #11]
          break;
 800c40e:	e089      	b.n	800c524 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c416:	689b      	ldr	r3, [r3, #8]
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d00b      	beq.n	800c434 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c422:	689b      	ldr	r3, [r3, #8]
 800c424:	687a      	ldr	r2, [r7, #4]
 800c426:	7c12      	ldrb	r2, [r2, #16]
 800c428:	f107 0108 	add.w	r1, r7, #8
 800c42c:	4610      	mov	r0, r2
 800c42e:	4798      	blx	r3
 800c430:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c432:	e077      	b.n	800c524 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c434:	6839      	ldr	r1, [r7, #0]
 800c436:	6878      	ldr	r0, [r7, #4]
 800c438:	f000 fab1 	bl	800c99e <USBD_CtlError>
            err++;
 800c43c:	7afb      	ldrb	r3, [r7, #11]
 800c43e:	3301      	adds	r3, #1
 800c440:	72fb      	strb	r3, [r7, #11]
          break;
 800c442:	e06f      	b.n	800c524 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c44a:	68db      	ldr	r3, [r3, #12]
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d00b      	beq.n	800c468 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c456:	68db      	ldr	r3, [r3, #12]
 800c458:	687a      	ldr	r2, [r7, #4]
 800c45a:	7c12      	ldrb	r2, [r2, #16]
 800c45c:	f107 0108 	add.w	r1, r7, #8
 800c460:	4610      	mov	r0, r2
 800c462:	4798      	blx	r3
 800c464:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c466:	e05d      	b.n	800c524 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c468:	6839      	ldr	r1, [r7, #0]
 800c46a:	6878      	ldr	r0, [r7, #4]
 800c46c:	f000 fa97 	bl	800c99e <USBD_CtlError>
            err++;
 800c470:	7afb      	ldrb	r3, [r7, #11]
 800c472:	3301      	adds	r3, #1
 800c474:	72fb      	strb	r3, [r7, #11]
          break;
 800c476:	e055      	b.n	800c524 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c47e:	691b      	ldr	r3, [r3, #16]
 800c480:	2b00      	cmp	r3, #0
 800c482:	d00b      	beq.n	800c49c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c48a:	691b      	ldr	r3, [r3, #16]
 800c48c:	687a      	ldr	r2, [r7, #4]
 800c48e:	7c12      	ldrb	r2, [r2, #16]
 800c490:	f107 0108 	add.w	r1, r7, #8
 800c494:	4610      	mov	r0, r2
 800c496:	4798      	blx	r3
 800c498:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c49a:	e043      	b.n	800c524 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c49c:	6839      	ldr	r1, [r7, #0]
 800c49e:	6878      	ldr	r0, [r7, #4]
 800c4a0:	f000 fa7d 	bl	800c99e <USBD_CtlError>
            err++;
 800c4a4:	7afb      	ldrb	r3, [r7, #11]
 800c4a6:	3301      	adds	r3, #1
 800c4a8:	72fb      	strb	r3, [r7, #11]
          break;
 800c4aa:	e03b      	b.n	800c524 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c4b2:	695b      	ldr	r3, [r3, #20]
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d00b      	beq.n	800c4d0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c4be:	695b      	ldr	r3, [r3, #20]
 800c4c0:	687a      	ldr	r2, [r7, #4]
 800c4c2:	7c12      	ldrb	r2, [r2, #16]
 800c4c4:	f107 0108 	add.w	r1, r7, #8
 800c4c8:	4610      	mov	r0, r2
 800c4ca:	4798      	blx	r3
 800c4cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c4ce:	e029      	b.n	800c524 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c4d0:	6839      	ldr	r1, [r7, #0]
 800c4d2:	6878      	ldr	r0, [r7, #4]
 800c4d4:	f000 fa63 	bl	800c99e <USBD_CtlError>
            err++;
 800c4d8:	7afb      	ldrb	r3, [r7, #11]
 800c4da:	3301      	adds	r3, #1
 800c4dc:	72fb      	strb	r3, [r7, #11]
          break;
 800c4de:	e021      	b.n	800c524 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c4e6:	699b      	ldr	r3, [r3, #24]
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d00b      	beq.n	800c504 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c4f2:	699b      	ldr	r3, [r3, #24]
 800c4f4:	687a      	ldr	r2, [r7, #4]
 800c4f6:	7c12      	ldrb	r2, [r2, #16]
 800c4f8:	f107 0108 	add.w	r1, r7, #8
 800c4fc:	4610      	mov	r0, r2
 800c4fe:	4798      	blx	r3
 800c500:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c502:	e00f      	b.n	800c524 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c504:	6839      	ldr	r1, [r7, #0]
 800c506:	6878      	ldr	r0, [r7, #4]
 800c508:	f000 fa49 	bl	800c99e <USBD_CtlError>
            err++;
 800c50c:	7afb      	ldrb	r3, [r7, #11]
 800c50e:	3301      	adds	r3, #1
 800c510:	72fb      	strb	r3, [r7, #11]
          break;
 800c512:	e007      	b.n	800c524 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c514:	6839      	ldr	r1, [r7, #0]
 800c516:	6878      	ldr	r0, [r7, #4]
 800c518:	f000 fa41 	bl	800c99e <USBD_CtlError>
          err++;
 800c51c:	7afb      	ldrb	r3, [r7, #11]
 800c51e:	3301      	adds	r3, #1
 800c520:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800c522:	bf00      	nop
      }
      break;
 800c524:	e037      	b.n	800c596 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	7c1b      	ldrb	r3, [r3, #16]
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d109      	bne.n	800c542 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c534:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c536:	f107 0208 	add.w	r2, r7, #8
 800c53a:	4610      	mov	r0, r2
 800c53c:	4798      	blx	r3
 800c53e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c540:	e029      	b.n	800c596 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c542:	6839      	ldr	r1, [r7, #0]
 800c544:	6878      	ldr	r0, [r7, #4]
 800c546:	f000 fa2a 	bl	800c99e <USBD_CtlError>
        err++;
 800c54a:	7afb      	ldrb	r3, [r7, #11]
 800c54c:	3301      	adds	r3, #1
 800c54e:	72fb      	strb	r3, [r7, #11]
      break;
 800c550:	e021      	b.n	800c596 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	7c1b      	ldrb	r3, [r3, #16]
 800c556:	2b00      	cmp	r3, #0
 800c558:	d10d      	bne.n	800c576 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c562:	f107 0208 	add.w	r2, r7, #8
 800c566:	4610      	mov	r0, r2
 800c568:	4798      	blx	r3
 800c56a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	3301      	adds	r3, #1
 800c570:	2207      	movs	r2, #7
 800c572:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c574:	e00f      	b.n	800c596 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c576:	6839      	ldr	r1, [r7, #0]
 800c578:	6878      	ldr	r0, [r7, #4]
 800c57a:	f000 fa10 	bl	800c99e <USBD_CtlError>
        err++;
 800c57e:	7afb      	ldrb	r3, [r7, #11]
 800c580:	3301      	adds	r3, #1
 800c582:	72fb      	strb	r3, [r7, #11]
      break;
 800c584:	e007      	b.n	800c596 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800c586:	6839      	ldr	r1, [r7, #0]
 800c588:	6878      	ldr	r0, [r7, #4]
 800c58a:	f000 fa08 	bl	800c99e <USBD_CtlError>
      err++;
 800c58e:	7afb      	ldrb	r3, [r7, #11]
 800c590:	3301      	adds	r3, #1
 800c592:	72fb      	strb	r3, [r7, #11]
      break;
 800c594:	bf00      	nop
  }

  if (err != 0U)
 800c596:	7afb      	ldrb	r3, [r7, #11]
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d11e      	bne.n	800c5da <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800c59c:	683b      	ldr	r3, [r7, #0]
 800c59e:	88db      	ldrh	r3, [r3, #6]
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d016      	beq.n	800c5d2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800c5a4:	893b      	ldrh	r3, [r7, #8]
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d00e      	beq.n	800c5c8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800c5aa:	683b      	ldr	r3, [r7, #0]
 800c5ac:	88da      	ldrh	r2, [r3, #6]
 800c5ae:	893b      	ldrh	r3, [r7, #8]
 800c5b0:	4293      	cmp	r3, r2
 800c5b2:	bf28      	it	cs
 800c5b4:	4613      	movcs	r3, r2
 800c5b6:	b29b      	uxth	r3, r3
 800c5b8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c5ba:	893b      	ldrh	r3, [r7, #8]
 800c5bc:	461a      	mov	r2, r3
 800c5be:	68f9      	ldr	r1, [r7, #12]
 800c5c0:	6878      	ldr	r0, [r7, #4]
 800c5c2:	f000 fa5d 	bl	800ca80 <USBD_CtlSendData>
 800c5c6:	e009      	b.n	800c5dc <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c5c8:	6839      	ldr	r1, [r7, #0]
 800c5ca:	6878      	ldr	r0, [r7, #4]
 800c5cc:	f000 f9e7 	bl	800c99e <USBD_CtlError>
 800c5d0:	e004      	b.n	800c5dc <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c5d2:	6878      	ldr	r0, [r7, #4]
 800c5d4:	f000 faae 	bl	800cb34 <USBD_CtlSendStatus>
 800c5d8:	e000      	b.n	800c5dc <USBD_GetDescriptor+0x2cc>
    return;
 800c5da:	bf00      	nop
  }
}
 800c5dc:	3710      	adds	r7, #16
 800c5de:	46bd      	mov	sp, r7
 800c5e0:	bd80      	pop	{r7, pc}
 800c5e2:	bf00      	nop

0800c5e4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c5e4:	b580      	push	{r7, lr}
 800c5e6:	b084      	sub	sp, #16
 800c5e8:	af00      	add	r7, sp, #0
 800c5ea:	6078      	str	r0, [r7, #4]
 800c5ec:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c5ee:	683b      	ldr	r3, [r7, #0]
 800c5f0:	889b      	ldrh	r3, [r3, #4]
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d131      	bne.n	800c65a <USBD_SetAddress+0x76>
 800c5f6:	683b      	ldr	r3, [r7, #0]
 800c5f8:	88db      	ldrh	r3, [r3, #6]
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d12d      	bne.n	800c65a <USBD_SetAddress+0x76>
 800c5fe:	683b      	ldr	r3, [r7, #0]
 800c600:	885b      	ldrh	r3, [r3, #2]
 800c602:	2b7f      	cmp	r3, #127	; 0x7f
 800c604:	d829      	bhi.n	800c65a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c606:	683b      	ldr	r3, [r7, #0]
 800c608:	885b      	ldrh	r3, [r3, #2]
 800c60a:	b2db      	uxtb	r3, r3
 800c60c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c610:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c618:	b2db      	uxtb	r3, r3
 800c61a:	2b03      	cmp	r3, #3
 800c61c:	d104      	bne.n	800c628 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c61e:	6839      	ldr	r1, [r7, #0]
 800c620:	6878      	ldr	r0, [r7, #4]
 800c622:	f000 f9bc 	bl	800c99e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c626:	e01d      	b.n	800c664 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	7bfa      	ldrb	r2, [r7, #15]
 800c62c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c630:	7bfb      	ldrb	r3, [r7, #15]
 800c632:	4619      	mov	r1, r3
 800c634:	6878      	ldr	r0, [r7, #4]
 800c636:	f000 ff2b 	bl	800d490 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c63a:	6878      	ldr	r0, [r7, #4]
 800c63c:	f000 fa7a 	bl	800cb34 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c640:	7bfb      	ldrb	r3, [r7, #15]
 800c642:	2b00      	cmp	r3, #0
 800c644:	d004      	beq.n	800c650 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	2202      	movs	r2, #2
 800c64a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c64e:	e009      	b.n	800c664 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	2201      	movs	r2, #1
 800c654:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c658:	e004      	b.n	800c664 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c65a:	6839      	ldr	r1, [r7, #0]
 800c65c:	6878      	ldr	r0, [r7, #4]
 800c65e:	f000 f99e 	bl	800c99e <USBD_CtlError>
  }
}
 800c662:	bf00      	nop
 800c664:	bf00      	nop
 800c666:	3710      	adds	r7, #16
 800c668:	46bd      	mov	sp, r7
 800c66a:	bd80      	pop	{r7, pc}

0800c66c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c66c:	b580      	push	{r7, lr}
 800c66e:	b084      	sub	sp, #16
 800c670:	af00      	add	r7, sp, #0
 800c672:	6078      	str	r0, [r7, #4]
 800c674:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c676:	2300      	movs	r3, #0
 800c678:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c67a:	683b      	ldr	r3, [r7, #0]
 800c67c:	885b      	ldrh	r3, [r3, #2]
 800c67e:	b2da      	uxtb	r2, r3
 800c680:	4b4e      	ldr	r3, [pc, #312]	; (800c7bc <USBD_SetConfig+0x150>)
 800c682:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c684:	4b4d      	ldr	r3, [pc, #308]	; (800c7bc <USBD_SetConfig+0x150>)
 800c686:	781b      	ldrb	r3, [r3, #0]
 800c688:	2b01      	cmp	r3, #1
 800c68a:	d905      	bls.n	800c698 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c68c:	6839      	ldr	r1, [r7, #0]
 800c68e:	6878      	ldr	r0, [r7, #4]
 800c690:	f000 f985 	bl	800c99e <USBD_CtlError>
    return USBD_FAIL;
 800c694:	2303      	movs	r3, #3
 800c696:	e08c      	b.n	800c7b2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c69e:	b2db      	uxtb	r3, r3
 800c6a0:	2b02      	cmp	r3, #2
 800c6a2:	d002      	beq.n	800c6aa <USBD_SetConfig+0x3e>
 800c6a4:	2b03      	cmp	r3, #3
 800c6a6:	d029      	beq.n	800c6fc <USBD_SetConfig+0x90>
 800c6a8:	e075      	b.n	800c796 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c6aa:	4b44      	ldr	r3, [pc, #272]	; (800c7bc <USBD_SetConfig+0x150>)
 800c6ac:	781b      	ldrb	r3, [r3, #0]
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d020      	beq.n	800c6f4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800c6b2:	4b42      	ldr	r3, [pc, #264]	; (800c7bc <USBD_SetConfig+0x150>)
 800c6b4:	781b      	ldrb	r3, [r3, #0]
 800c6b6:	461a      	mov	r2, r3
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c6bc:	4b3f      	ldr	r3, [pc, #252]	; (800c7bc <USBD_SetConfig+0x150>)
 800c6be:	781b      	ldrb	r3, [r3, #0]
 800c6c0:	4619      	mov	r1, r3
 800c6c2:	6878      	ldr	r0, [r7, #4]
 800c6c4:	f7fe ffe1 	bl	800b68a <USBD_SetClassConfig>
 800c6c8:	4603      	mov	r3, r0
 800c6ca:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c6cc:	7bfb      	ldrb	r3, [r7, #15]
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d008      	beq.n	800c6e4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800c6d2:	6839      	ldr	r1, [r7, #0]
 800c6d4:	6878      	ldr	r0, [r7, #4]
 800c6d6:	f000 f962 	bl	800c99e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	2202      	movs	r2, #2
 800c6de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c6e2:	e065      	b.n	800c7b0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c6e4:	6878      	ldr	r0, [r7, #4]
 800c6e6:	f000 fa25 	bl	800cb34 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	2203      	movs	r2, #3
 800c6ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c6f2:	e05d      	b.n	800c7b0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c6f4:	6878      	ldr	r0, [r7, #4]
 800c6f6:	f000 fa1d 	bl	800cb34 <USBD_CtlSendStatus>
      break;
 800c6fa:	e059      	b.n	800c7b0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c6fc:	4b2f      	ldr	r3, [pc, #188]	; (800c7bc <USBD_SetConfig+0x150>)
 800c6fe:	781b      	ldrb	r3, [r3, #0]
 800c700:	2b00      	cmp	r3, #0
 800c702:	d112      	bne.n	800c72a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	2202      	movs	r2, #2
 800c708:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800c70c:	4b2b      	ldr	r3, [pc, #172]	; (800c7bc <USBD_SetConfig+0x150>)
 800c70e:	781b      	ldrb	r3, [r3, #0]
 800c710:	461a      	mov	r2, r3
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c716:	4b29      	ldr	r3, [pc, #164]	; (800c7bc <USBD_SetConfig+0x150>)
 800c718:	781b      	ldrb	r3, [r3, #0]
 800c71a:	4619      	mov	r1, r3
 800c71c:	6878      	ldr	r0, [r7, #4]
 800c71e:	f7fe ffd0 	bl	800b6c2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c722:	6878      	ldr	r0, [r7, #4]
 800c724:	f000 fa06 	bl	800cb34 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c728:	e042      	b.n	800c7b0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800c72a:	4b24      	ldr	r3, [pc, #144]	; (800c7bc <USBD_SetConfig+0x150>)
 800c72c:	781b      	ldrb	r3, [r3, #0]
 800c72e:	461a      	mov	r2, r3
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	685b      	ldr	r3, [r3, #4]
 800c734:	429a      	cmp	r2, r3
 800c736:	d02a      	beq.n	800c78e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	685b      	ldr	r3, [r3, #4]
 800c73c:	b2db      	uxtb	r3, r3
 800c73e:	4619      	mov	r1, r3
 800c740:	6878      	ldr	r0, [r7, #4]
 800c742:	f7fe ffbe 	bl	800b6c2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c746:	4b1d      	ldr	r3, [pc, #116]	; (800c7bc <USBD_SetConfig+0x150>)
 800c748:	781b      	ldrb	r3, [r3, #0]
 800c74a:	461a      	mov	r2, r3
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c750:	4b1a      	ldr	r3, [pc, #104]	; (800c7bc <USBD_SetConfig+0x150>)
 800c752:	781b      	ldrb	r3, [r3, #0]
 800c754:	4619      	mov	r1, r3
 800c756:	6878      	ldr	r0, [r7, #4]
 800c758:	f7fe ff97 	bl	800b68a <USBD_SetClassConfig>
 800c75c:	4603      	mov	r3, r0
 800c75e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c760:	7bfb      	ldrb	r3, [r7, #15]
 800c762:	2b00      	cmp	r3, #0
 800c764:	d00f      	beq.n	800c786 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800c766:	6839      	ldr	r1, [r7, #0]
 800c768:	6878      	ldr	r0, [r7, #4]
 800c76a:	f000 f918 	bl	800c99e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	685b      	ldr	r3, [r3, #4]
 800c772:	b2db      	uxtb	r3, r3
 800c774:	4619      	mov	r1, r3
 800c776:	6878      	ldr	r0, [r7, #4]
 800c778:	f7fe ffa3 	bl	800b6c2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	2202      	movs	r2, #2
 800c780:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c784:	e014      	b.n	800c7b0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c786:	6878      	ldr	r0, [r7, #4]
 800c788:	f000 f9d4 	bl	800cb34 <USBD_CtlSendStatus>
      break;
 800c78c:	e010      	b.n	800c7b0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c78e:	6878      	ldr	r0, [r7, #4]
 800c790:	f000 f9d0 	bl	800cb34 <USBD_CtlSendStatus>
      break;
 800c794:	e00c      	b.n	800c7b0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800c796:	6839      	ldr	r1, [r7, #0]
 800c798:	6878      	ldr	r0, [r7, #4]
 800c79a:	f000 f900 	bl	800c99e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c79e:	4b07      	ldr	r3, [pc, #28]	; (800c7bc <USBD_SetConfig+0x150>)
 800c7a0:	781b      	ldrb	r3, [r3, #0]
 800c7a2:	4619      	mov	r1, r3
 800c7a4:	6878      	ldr	r0, [r7, #4]
 800c7a6:	f7fe ff8c 	bl	800b6c2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c7aa:	2303      	movs	r3, #3
 800c7ac:	73fb      	strb	r3, [r7, #15]
      break;
 800c7ae:	bf00      	nop
  }

  return ret;
 800c7b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7b2:	4618      	mov	r0, r3
 800c7b4:	3710      	adds	r7, #16
 800c7b6:	46bd      	mov	sp, r7
 800c7b8:	bd80      	pop	{r7, pc}
 800c7ba:	bf00      	nop
 800c7bc:	24000cf0 	.word	0x24000cf0

0800c7c0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c7c0:	b580      	push	{r7, lr}
 800c7c2:	b082      	sub	sp, #8
 800c7c4:	af00      	add	r7, sp, #0
 800c7c6:	6078      	str	r0, [r7, #4]
 800c7c8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c7ca:	683b      	ldr	r3, [r7, #0]
 800c7cc:	88db      	ldrh	r3, [r3, #6]
 800c7ce:	2b01      	cmp	r3, #1
 800c7d0:	d004      	beq.n	800c7dc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c7d2:	6839      	ldr	r1, [r7, #0]
 800c7d4:	6878      	ldr	r0, [r7, #4]
 800c7d6:	f000 f8e2 	bl	800c99e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c7da:	e023      	b.n	800c824 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c7e2:	b2db      	uxtb	r3, r3
 800c7e4:	2b02      	cmp	r3, #2
 800c7e6:	dc02      	bgt.n	800c7ee <USBD_GetConfig+0x2e>
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	dc03      	bgt.n	800c7f4 <USBD_GetConfig+0x34>
 800c7ec:	e015      	b.n	800c81a <USBD_GetConfig+0x5a>
 800c7ee:	2b03      	cmp	r3, #3
 800c7f0:	d00b      	beq.n	800c80a <USBD_GetConfig+0x4a>
 800c7f2:	e012      	b.n	800c81a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	2200      	movs	r2, #0
 800c7f8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	3308      	adds	r3, #8
 800c7fe:	2201      	movs	r2, #1
 800c800:	4619      	mov	r1, r3
 800c802:	6878      	ldr	r0, [r7, #4]
 800c804:	f000 f93c 	bl	800ca80 <USBD_CtlSendData>
        break;
 800c808:	e00c      	b.n	800c824 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	3304      	adds	r3, #4
 800c80e:	2201      	movs	r2, #1
 800c810:	4619      	mov	r1, r3
 800c812:	6878      	ldr	r0, [r7, #4]
 800c814:	f000 f934 	bl	800ca80 <USBD_CtlSendData>
        break;
 800c818:	e004      	b.n	800c824 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c81a:	6839      	ldr	r1, [r7, #0]
 800c81c:	6878      	ldr	r0, [r7, #4]
 800c81e:	f000 f8be 	bl	800c99e <USBD_CtlError>
        break;
 800c822:	bf00      	nop
}
 800c824:	bf00      	nop
 800c826:	3708      	adds	r7, #8
 800c828:	46bd      	mov	sp, r7
 800c82a:	bd80      	pop	{r7, pc}

0800c82c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c82c:	b580      	push	{r7, lr}
 800c82e:	b082      	sub	sp, #8
 800c830:	af00      	add	r7, sp, #0
 800c832:	6078      	str	r0, [r7, #4]
 800c834:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c83c:	b2db      	uxtb	r3, r3
 800c83e:	3b01      	subs	r3, #1
 800c840:	2b02      	cmp	r3, #2
 800c842:	d81e      	bhi.n	800c882 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c844:	683b      	ldr	r3, [r7, #0]
 800c846:	88db      	ldrh	r3, [r3, #6]
 800c848:	2b02      	cmp	r3, #2
 800c84a:	d004      	beq.n	800c856 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c84c:	6839      	ldr	r1, [r7, #0]
 800c84e:	6878      	ldr	r0, [r7, #4]
 800c850:	f000 f8a5 	bl	800c99e <USBD_CtlError>
        break;
 800c854:	e01a      	b.n	800c88c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	2201      	movs	r2, #1
 800c85a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c862:	2b00      	cmp	r3, #0
 800c864:	d005      	beq.n	800c872 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	68db      	ldr	r3, [r3, #12]
 800c86a:	f043 0202 	orr.w	r2, r3, #2
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	330c      	adds	r3, #12
 800c876:	2202      	movs	r2, #2
 800c878:	4619      	mov	r1, r3
 800c87a:	6878      	ldr	r0, [r7, #4]
 800c87c:	f000 f900 	bl	800ca80 <USBD_CtlSendData>
      break;
 800c880:	e004      	b.n	800c88c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c882:	6839      	ldr	r1, [r7, #0]
 800c884:	6878      	ldr	r0, [r7, #4]
 800c886:	f000 f88a 	bl	800c99e <USBD_CtlError>
      break;
 800c88a:	bf00      	nop
  }
}
 800c88c:	bf00      	nop
 800c88e:	3708      	adds	r7, #8
 800c890:	46bd      	mov	sp, r7
 800c892:	bd80      	pop	{r7, pc}

0800c894 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c894:	b580      	push	{r7, lr}
 800c896:	b082      	sub	sp, #8
 800c898:	af00      	add	r7, sp, #0
 800c89a:	6078      	str	r0, [r7, #4]
 800c89c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c89e:	683b      	ldr	r3, [r7, #0]
 800c8a0:	885b      	ldrh	r3, [r3, #2]
 800c8a2:	2b01      	cmp	r3, #1
 800c8a4:	d107      	bne.n	800c8b6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	2201      	movs	r2, #1
 800c8aa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c8ae:	6878      	ldr	r0, [r7, #4]
 800c8b0:	f000 f940 	bl	800cb34 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800c8b4:	e013      	b.n	800c8de <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800c8b6:	683b      	ldr	r3, [r7, #0]
 800c8b8:	885b      	ldrh	r3, [r3, #2]
 800c8ba:	2b02      	cmp	r3, #2
 800c8bc:	d10b      	bne.n	800c8d6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800c8be:	683b      	ldr	r3, [r7, #0]
 800c8c0:	889b      	ldrh	r3, [r3, #4]
 800c8c2:	0a1b      	lsrs	r3, r3, #8
 800c8c4:	b29b      	uxth	r3, r3
 800c8c6:	b2da      	uxtb	r2, r3
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800c8ce:	6878      	ldr	r0, [r7, #4]
 800c8d0:	f000 f930 	bl	800cb34 <USBD_CtlSendStatus>
}
 800c8d4:	e003      	b.n	800c8de <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800c8d6:	6839      	ldr	r1, [r7, #0]
 800c8d8:	6878      	ldr	r0, [r7, #4]
 800c8da:	f000 f860 	bl	800c99e <USBD_CtlError>
}
 800c8de:	bf00      	nop
 800c8e0:	3708      	adds	r7, #8
 800c8e2:	46bd      	mov	sp, r7
 800c8e4:	bd80      	pop	{r7, pc}

0800c8e6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c8e6:	b580      	push	{r7, lr}
 800c8e8:	b082      	sub	sp, #8
 800c8ea:	af00      	add	r7, sp, #0
 800c8ec:	6078      	str	r0, [r7, #4]
 800c8ee:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c8f6:	b2db      	uxtb	r3, r3
 800c8f8:	3b01      	subs	r3, #1
 800c8fa:	2b02      	cmp	r3, #2
 800c8fc:	d80b      	bhi.n	800c916 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c8fe:	683b      	ldr	r3, [r7, #0]
 800c900:	885b      	ldrh	r3, [r3, #2]
 800c902:	2b01      	cmp	r3, #1
 800c904:	d10c      	bne.n	800c920 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	2200      	movs	r2, #0
 800c90a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c90e:	6878      	ldr	r0, [r7, #4]
 800c910:	f000 f910 	bl	800cb34 <USBD_CtlSendStatus>
      }
      break;
 800c914:	e004      	b.n	800c920 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c916:	6839      	ldr	r1, [r7, #0]
 800c918:	6878      	ldr	r0, [r7, #4]
 800c91a:	f000 f840 	bl	800c99e <USBD_CtlError>
      break;
 800c91e:	e000      	b.n	800c922 <USBD_ClrFeature+0x3c>
      break;
 800c920:	bf00      	nop
  }
}
 800c922:	bf00      	nop
 800c924:	3708      	adds	r7, #8
 800c926:	46bd      	mov	sp, r7
 800c928:	bd80      	pop	{r7, pc}

0800c92a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c92a:	b580      	push	{r7, lr}
 800c92c:	b084      	sub	sp, #16
 800c92e:	af00      	add	r7, sp, #0
 800c930:	6078      	str	r0, [r7, #4]
 800c932:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c934:	683b      	ldr	r3, [r7, #0]
 800c936:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	781a      	ldrb	r2, [r3, #0]
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	3301      	adds	r3, #1
 800c944:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	781a      	ldrb	r2, [r3, #0]
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	3301      	adds	r3, #1
 800c952:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c954:	68f8      	ldr	r0, [r7, #12]
 800c956:	f7ff fa41 	bl	800bddc <SWAPBYTE>
 800c95a:	4603      	mov	r3, r0
 800c95c:	461a      	mov	r2, r3
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	3301      	adds	r3, #1
 800c966:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	3301      	adds	r3, #1
 800c96c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c96e:	68f8      	ldr	r0, [r7, #12]
 800c970:	f7ff fa34 	bl	800bddc <SWAPBYTE>
 800c974:	4603      	mov	r3, r0
 800c976:	461a      	mov	r2, r3
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	3301      	adds	r3, #1
 800c980:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	3301      	adds	r3, #1
 800c986:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c988:	68f8      	ldr	r0, [r7, #12]
 800c98a:	f7ff fa27 	bl	800bddc <SWAPBYTE>
 800c98e:	4603      	mov	r3, r0
 800c990:	461a      	mov	r2, r3
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	80da      	strh	r2, [r3, #6]
}
 800c996:	bf00      	nop
 800c998:	3710      	adds	r7, #16
 800c99a:	46bd      	mov	sp, r7
 800c99c:	bd80      	pop	{r7, pc}

0800c99e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c99e:	b580      	push	{r7, lr}
 800c9a0:	b082      	sub	sp, #8
 800c9a2:	af00      	add	r7, sp, #0
 800c9a4:	6078      	str	r0, [r7, #4]
 800c9a6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c9a8:	2180      	movs	r1, #128	; 0x80
 800c9aa:	6878      	ldr	r0, [r7, #4]
 800c9ac:	f000 fd06 	bl	800d3bc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c9b0:	2100      	movs	r1, #0
 800c9b2:	6878      	ldr	r0, [r7, #4]
 800c9b4:	f000 fd02 	bl	800d3bc <USBD_LL_StallEP>
}
 800c9b8:	bf00      	nop
 800c9ba:	3708      	adds	r7, #8
 800c9bc:	46bd      	mov	sp, r7
 800c9be:	bd80      	pop	{r7, pc}

0800c9c0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c9c0:	b580      	push	{r7, lr}
 800c9c2:	b086      	sub	sp, #24
 800c9c4:	af00      	add	r7, sp, #0
 800c9c6:	60f8      	str	r0, [r7, #12]
 800c9c8:	60b9      	str	r1, [r7, #8]
 800c9ca:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c9cc:	2300      	movs	r3, #0
 800c9ce:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d036      	beq.n	800ca44 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c9da:	6938      	ldr	r0, [r7, #16]
 800c9dc:	f000 f836 	bl	800ca4c <USBD_GetLen>
 800c9e0:	4603      	mov	r3, r0
 800c9e2:	3301      	adds	r3, #1
 800c9e4:	b29b      	uxth	r3, r3
 800c9e6:	005b      	lsls	r3, r3, #1
 800c9e8:	b29a      	uxth	r2, r3
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c9ee:	7dfb      	ldrb	r3, [r7, #23]
 800c9f0:	68ba      	ldr	r2, [r7, #8]
 800c9f2:	4413      	add	r3, r2
 800c9f4:	687a      	ldr	r2, [r7, #4]
 800c9f6:	7812      	ldrb	r2, [r2, #0]
 800c9f8:	701a      	strb	r2, [r3, #0]
  idx++;
 800c9fa:	7dfb      	ldrb	r3, [r7, #23]
 800c9fc:	3301      	adds	r3, #1
 800c9fe:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ca00:	7dfb      	ldrb	r3, [r7, #23]
 800ca02:	68ba      	ldr	r2, [r7, #8]
 800ca04:	4413      	add	r3, r2
 800ca06:	2203      	movs	r2, #3
 800ca08:	701a      	strb	r2, [r3, #0]
  idx++;
 800ca0a:	7dfb      	ldrb	r3, [r7, #23]
 800ca0c:	3301      	adds	r3, #1
 800ca0e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ca10:	e013      	b.n	800ca3a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800ca12:	7dfb      	ldrb	r3, [r7, #23]
 800ca14:	68ba      	ldr	r2, [r7, #8]
 800ca16:	4413      	add	r3, r2
 800ca18:	693a      	ldr	r2, [r7, #16]
 800ca1a:	7812      	ldrb	r2, [r2, #0]
 800ca1c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ca1e:	693b      	ldr	r3, [r7, #16]
 800ca20:	3301      	adds	r3, #1
 800ca22:	613b      	str	r3, [r7, #16]
    idx++;
 800ca24:	7dfb      	ldrb	r3, [r7, #23]
 800ca26:	3301      	adds	r3, #1
 800ca28:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ca2a:	7dfb      	ldrb	r3, [r7, #23]
 800ca2c:	68ba      	ldr	r2, [r7, #8]
 800ca2e:	4413      	add	r3, r2
 800ca30:	2200      	movs	r2, #0
 800ca32:	701a      	strb	r2, [r3, #0]
    idx++;
 800ca34:	7dfb      	ldrb	r3, [r7, #23]
 800ca36:	3301      	adds	r3, #1
 800ca38:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ca3a:	693b      	ldr	r3, [r7, #16]
 800ca3c:	781b      	ldrb	r3, [r3, #0]
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d1e7      	bne.n	800ca12 <USBD_GetString+0x52>
 800ca42:	e000      	b.n	800ca46 <USBD_GetString+0x86>
    return;
 800ca44:	bf00      	nop
  }
}
 800ca46:	3718      	adds	r7, #24
 800ca48:	46bd      	mov	sp, r7
 800ca4a:	bd80      	pop	{r7, pc}

0800ca4c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ca4c:	b480      	push	{r7}
 800ca4e:	b085      	sub	sp, #20
 800ca50:	af00      	add	r7, sp, #0
 800ca52:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ca54:	2300      	movs	r3, #0
 800ca56:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ca5c:	e005      	b.n	800ca6a <USBD_GetLen+0x1e>
  {
    len++;
 800ca5e:	7bfb      	ldrb	r3, [r7, #15]
 800ca60:	3301      	adds	r3, #1
 800ca62:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ca64:	68bb      	ldr	r3, [r7, #8]
 800ca66:	3301      	adds	r3, #1
 800ca68:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ca6a:	68bb      	ldr	r3, [r7, #8]
 800ca6c:	781b      	ldrb	r3, [r3, #0]
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d1f5      	bne.n	800ca5e <USBD_GetLen+0x12>
  }

  return len;
 800ca72:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca74:	4618      	mov	r0, r3
 800ca76:	3714      	adds	r7, #20
 800ca78:	46bd      	mov	sp, r7
 800ca7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca7e:	4770      	bx	lr

0800ca80 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ca80:	b580      	push	{r7, lr}
 800ca82:	b084      	sub	sp, #16
 800ca84:	af00      	add	r7, sp, #0
 800ca86:	60f8      	str	r0, [r7, #12]
 800ca88:	60b9      	str	r1, [r7, #8]
 800ca8a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	2202      	movs	r2, #2
 800ca90:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	687a      	ldr	r2, [r7, #4]
 800ca98:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	687a      	ldr	r2, [r7, #4]
 800ca9e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	68ba      	ldr	r2, [r7, #8]
 800caa4:	2100      	movs	r1, #0
 800caa6:	68f8      	ldr	r0, [r7, #12]
 800caa8:	f000 fd11 	bl	800d4ce <USBD_LL_Transmit>

  return USBD_OK;
 800caac:	2300      	movs	r3, #0
}
 800caae:	4618      	mov	r0, r3
 800cab0:	3710      	adds	r7, #16
 800cab2:	46bd      	mov	sp, r7
 800cab4:	bd80      	pop	{r7, pc}

0800cab6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800cab6:	b580      	push	{r7, lr}
 800cab8:	b084      	sub	sp, #16
 800caba:	af00      	add	r7, sp, #0
 800cabc:	60f8      	str	r0, [r7, #12]
 800cabe:	60b9      	str	r1, [r7, #8]
 800cac0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	68ba      	ldr	r2, [r7, #8]
 800cac6:	2100      	movs	r1, #0
 800cac8:	68f8      	ldr	r0, [r7, #12]
 800caca:	f000 fd00 	bl	800d4ce <USBD_LL_Transmit>

  return USBD_OK;
 800cace:	2300      	movs	r3, #0
}
 800cad0:	4618      	mov	r0, r3
 800cad2:	3710      	adds	r7, #16
 800cad4:	46bd      	mov	sp, r7
 800cad6:	bd80      	pop	{r7, pc}

0800cad8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800cad8:	b580      	push	{r7, lr}
 800cada:	b084      	sub	sp, #16
 800cadc:	af00      	add	r7, sp, #0
 800cade:	60f8      	str	r0, [r7, #12]
 800cae0:	60b9      	str	r1, [r7, #8]
 800cae2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	2203      	movs	r2, #3
 800cae8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	687a      	ldr	r2, [r7, #4]
 800caf0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	687a      	ldr	r2, [r7, #4]
 800caf8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	68ba      	ldr	r2, [r7, #8]
 800cb00:	2100      	movs	r1, #0
 800cb02:	68f8      	ldr	r0, [r7, #12]
 800cb04:	f000 fd04 	bl	800d510 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cb08:	2300      	movs	r3, #0
}
 800cb0a:	4618      	mov	r0, r3
 800cb0c:	3710      	adds	r7, #16
 800cb0e:	46bd      	mov	sp, r7
 800cb10:	bd80      	pop	{r7, pc}

0800cb12 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800cb12:	b580      	push	{r7, lr}
 800cb14:	b084      	sub	sp, #16
 800cb16:	af00      	add	r7, sp, #0
 800cb18:	60f8      	str	r0, [r7, #12]
 800cb1a:	60b9      	str	r1, [r7, #8]
 800cb1c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	68ba      	ldr	r2, [r7, #8]
 800cb22:	2100      	movs	r1, #0
 800cb24:	68f8      	ldr	r0, [r7, #12]
 800cb26:	f000 fcf3 	bl	800d510 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cb2a:	2300      	movs	r3, #0
}
 800cb2c:	4618      	mov	r0, r3
 800cb2e:	3710      	adds	r7, #16
 800cb30:	46bd      	mov	sp, r7
 800cb32:	bd80      	pop	{r7, pc}

0800cb34 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800cb34:	b580      	push	{r7, lr}
 800cb36:	b082      	sub	sp, #8
 800cb38:	af00      	add	r7, sp, #0
 800cb3a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	2204      	movs	r2, #4
 800cb40:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800cb44:	2300      	movs	r3, #0
 800cb46:	2200      	movs	r2, #0
 800cb48:	2100      	movs	r1, #0
 800cb4a:	6878      	ldr	r0, [r7, #4]
 800cb4c:	f000 fcbf 	bl	800d4ce <USBD_LL_Transmit>

  return USBD_OK;
 800cb50:	2300      	movs	r3, #0
}
 800cb52:	4618      	mov	r0, r3
 800cb54:	3708      	adds	r7, #8
 800cb56:	46bd      	mov	sp, r7
 800cb58:	bd80      	pop	{r7, pc}

0800cb5a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800cb5a:	b580      	push	{r7, lr}
 800cb5c:	b082      	sub	sp, #8
 800cb5e:	af00      	add	r7, sp, #0
 800cb60:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	2205      	movs	r2, #5
 800cb66:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cb6a:	2300      	movs	r3, #0
 800cb6c:	2200      	movs	r2, #0
 800cb6e:	2100      	movs	r1, #0
 800cb70:	6878      	ldr	r0, [r7, #4]
 800cb72:	f000 fccd 	bl	800d510 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cb76:	2300      	movs	r3, #0
}
 800cb78:	4618      	mov	r0, r3
 800cb7a:	3708      	adds	r7, #8
 800cb7c:	46bd      	mov	sp, r7
 800cb7e:	bd80      	pop	{r7, pc}

0800cb80 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800cb80:	b580      	push	{r7, lr}
 800cb82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800cb84:	2200      	movs	r2, #0
 800cb86:	4913      	ldr	r1, [pc, #76]	; (800cbd4 <MX_USB_DEVICE_Init+0x54>)
 800cb88:	4813      	ldr	r0, [pc, #76]	; (800cbd8 <MX_USB_DEVICE_Init+0x58>)
 800cb8a:	f7fe fd01 	bl	800b590 <USBD_Init>
 800cb8e:	4603      	mov	r3, r0
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d001      	beq.n	800cb98 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800cb94:	f7f4 f9af 	bl	8000ef6 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800cb98:	4910      	ldr	r1, [pc, #64]	; (800cbdc <MX_USB_DEVICE_Init+0x5c>)
 800cb9a:	480f      	ldr	r0, [pc, #60]	; (800cbd8 <MX_USB_DEVICE_Init+0x58>)
 800cb9c:	f7fe fd28 	bl	800b5f0 <USBD_RegisterClass>
 800cba0:	4603      	mov	r3, r0
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d001      	beq.n	800cbaa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800cba6:	f7f4 f9a6 	bl	8000ef6 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800cbaa:	490d      	ldr	r1, [pc, #52]	; (800cbe0 <MX_USB_DEVICE_Init+0x60>)
 800cbac:	480a      	ldr	r0, [pc, #40]	; (800cbd8 <MX_USB_DEVICE_Init+0x58>)
 800cbae:	f7fe fc1f 	bl	800b3f0 <USBD_CDC_RegisterInterface>
 800cbb2:	4603      	mov	r3, r0
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d001      	beq.n	800cbbc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800cbb8:	f7f4 f99d 	bl	8000ef6 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800cbbc:	4806      	ldr	r0, [pc, #24]	; (800cbd8 <MX_USB_DEVICE_Init+0x58>)
 800cbbe:	f7fe fd4d 	bl	800b65c <USBD_Start>
 800cbc2:	4603      	mov	r3, r0
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d001      	beq.n	800cbcc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800cbc8:	f7f4 f995 	bl	8000ef6 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800cbcc:	f7f8 f9ca 	bl	8004f64 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800cbd0:	bf00      	nop
 800cbd2:	bd80      	pop	{r7, pc}
 800cbd4:	240000b0 	.word	0x240000b0
 800cbd8:	24000cf4 	.word	0x24000cf4
 800cbdc:	2400001c 	.word	0x2400001c
 800cbe0:	2400009c 	.word	0x2400009c

0800cbe4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800cbe4:	b580      	push	{r7, lr}
 800cbe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800cbe8:	2200      	movs	r2, #0
 800cbea:	4905      	ldr	r1, [pc, #20]	; (800cc00 <CDC_Init_FS+0x1c>)
 800cbec:	4805      	ldr	r0, [pc, #20]	; (800cc04 <CDC_Init_FS+0x20>)
 800cbee:	f7fe fc19 	bl	800b424 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800cbf2:	4905      	ldr	r1, [pc, #20]	; (800cc08 <CDC_Init_FS+0x24>)
 800cbf4:	4803      	ldr	r0, [pc, #12]	; (800cc04 <CDC_Init_FS+0x20>)
 800cbf6:	f7fe fc37 	bl	800b468 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800cbfa:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800cbfc:	4618      	mov	r0, r3
 800cbfe:	bd80      	pop	{r7, pc}
 800cc00:	240017d0 	.word	0x240017d0
 800cc04:	24000cf4 	.word	0x24000cf4
 800cc08:	24000fd0 	.word	0x24000fd0

0800cc0c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800cc0c:	b480      	push	{r7}
 800cc0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800cc10:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800cc12:	4618      	mov	r0, r3
 800cc14:	46bd      	mov	sp, r7
 800cc16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc1a:	4770      	bx	lr

0800cc1c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800cc1c:	b480      	push	{r7}
 800cc1e:	b083      	sub	sp, #12
 800cc20:	af00      	add	r7, sp, #0
 800cc22:	4603      	mov	r3, r0
 800cc24:	6039      	str	r1, [r7, #0]
 800cc26:	71fb      	strb	r3, [r7, #7]
 800cc28:	4613      	mov	r3, r2
 800cc2a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800cc2c:	79fb      	ldrb	r3, [r7, #7]
 800cc2e:	2b23      	cmp	r3, #35	; 0x23
 800cc30:	d84a      	bhi.n	800ccc8 <CDC_Control_FS+0xac>
 800cc32:	a201      	add	r2, pc, #4	; (adr r2, 800cc38 <CDC_Control_FS+0x1c>)
 800cc34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc38:	0800ccc9 	.word	0x0800ccc9
 800cc3c:	0800ccc9 	.word	0x0800ccc9
 800cc40:	0800ccc9 	.word	0x0800ccc9
 800cc44:	0800ccc9 	.word	0x0800ccc9
 800cc48:	0800ccc9 	.word	0x0800ccc9
 800cc4c:	0800ccc9 	.word	0x0800ccc9
 800cc50:	0800ccc9 	.word	0x0800ccc9
 800cc54:	0800ccc9 	.word	0x0800ccc9
 800cc58:	0800ccc9 	.word	0x0800ccc9
 800cc5c:	0800ccc9 	.word	0x0800ccc9
 800cc60:	0800ccc9 	.word	0x0800ccc9
 800cc64:	0800ccc9 	.word	0x0800ccc9
 800cc68:	0800ccc9 	.word	0x0800ccc9
 800cc6c:	0800ccc9 	.word	0x0800ccc9
 800cc70:	0800ccc9 	.word	0x0800ccc9
 800cc74:	0800ccc9 	.word	0x0800ccc9
 800cc78:	0800ccc9 	.word	0x0800ccc9
 800cc7c:	0800ccc9 	.word	0x0800ccc9
 800cc80:	0800ccc9 	.word	0x0800ccc9
 800cc84:	0800ccc9 	.word	0x0800ccc9
 800cc88:	0800ccc9 	.word	0x0800ccc9
 800cc8c:	0800ccc9 	.word	0x0800ccc9
 800cc90:	0800ccc9 	.word	0x0800ccc9
 800cc94:	0800ccc9 	.word	0x0800ccc9
 800cc98:	0800ccc9 	.word	0x0800ccc9
 800cc9c:	0800ccc9 	.word	0x0800ccc9
 800cca0:	0800ccc9 	.word	0x0800ccc9
 800cca4:	0800ccc9 	.word	0x0800ccc9
 800cca8:	0800ccc9 	.word	0x0800ccc9
 800ccac:	0800ccc9 	.word	0x0800ccc9
 800ccb0:	0800ccc9 	.word	0x0800ccc9
 800ccb4:	0800ccc9 	.word	0x0800ccc9
 800ccb8:	0800ccc9 	.word	0x0800ccc9
 800ccbc:	0800ccc9 	.word	0x0800ccc9
 800ccc0:	0800ccc9 	.word	0x0800ccc9
 800ccc4:	0800ccc9 	.word	0x0800ccc9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800ccc8:	bf00      	nop
  }

  return (USBD_OK);
 800ccca:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800cccc:	4618      	mov	r0, r3
 800ccce:	370c      	adds	r7, #12
 800ccd0:	46bd      	mov	sp, r7
 800ccd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccd6:	4770      	bx	lr

0800ccd8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ccd8:	b580      	push	{r7, lr}
 800ccda:	b082      	sub	sp, #8
 800ccdc:	af00      	add	r7, sp, #0
 800ccde:	6078      	str	r0, [r7, #4]
 800cce0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800cce2:	6879      	ldr	r1, [r7, #4]
 800cce4:	4805      	ldr	r0, [pc, #20]	; (800ccfc <CDC_Receive_FS+0x24>)
 800cce6:	f7fe fbbf 	bl	800b468 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ccea:	4804      	ldr	r0, [pc, #16]	; (800ccfc <CDC_Receive_FS+0x24>)
 800ccec:	f7fe fc1a 	bl	800b524 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800ccf0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800ccf2:	4618      	mov	r0, r3
 800ccf4:	3708      	adds	r7, #8
 800ccf6:	46bd      	mov	sp, r7
 800ccf8:	bd80      	pop	{r7, pc}
 800ccfa:	bf00      	nop
 800ccfc:	24000cf4 	.word	0x24000cf4

0800cd00 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800cd00:	b580      	push	{r7, lr}
 800cd02:	b084      	sub	sp, #16
 800cd04:	af00      	add	r7, sp, #0
 800cd06:	6078      	str	r0, [r7, #4]
 800cd08:	460b      	mov	r3, r1
 800cd0a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800cd0c:	2300      	movs	r3, #0
 800cd0e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800cd10:	4b0d      	ldr	r3, [pc, #52]	; (800cd48 <CDC_Transmit_FS+0x48>)
 800cd12:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cd16:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800cd18:	68bb      	ldr	r3, [r7, #8]
 800cd1a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d001      	beq.n	800cd26 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800cd22:	2301      	movs	r3, #1
 800cd24:	e00b      	b.n	800cd3e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800cd26:	887b      	ldrh	r3, [r7, #2]
 800cd28:	461a      	mov	r2, r3
 800cd2a:	6879      	ldr	r1, [r7, #4]
 800cd2c:	4806      	ldr	r0, [pc, #24]	; (800cd48 <CDC_Transmit_FS+0x48>)
 800cd2e:	f7fe fb79 	bl	800b424 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800cd32:	4805      	ldr	r0, [pc, #20]	; (800cd48 <CDC_Transmit_FS+0x48>)
 800cd34:	f7fe fbb6 	bl	800b4a4 <USBD_CDC_TransmitPacket>
 800cd38:	4603      	mov	r3, r0
 800cd3a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800cd3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd3e:	4618      	mov	r0, r3
 800cd40:	3710      	adds	r7, #16
 800cd42:	46bd      	mov	sp, r7
 800cd44:	bd80      	pop	{r7, pc}
 800cd46:	bf00      	nop
 800cd48:	24000cf4 	.word	0x24000cf4

0800cd4c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800cd4c:	b480      	push	{r7}
 800cd4e:	b087      	sub	sp, #28
 800cd50:	af00      	add	r7, sp, #0
 800cd52:	60f8      	str	r0, [r7, #12]
 800cd54:	60b9      	str	r1, [r7, #8]
 800cd56:	4613      	mov	r3, r2
 800cd58:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800cd5a:	2300      	movs	r3, #0
 800cd5c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800cd5e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cd62:	4618      	mov	r0, r3
 800cd64:	371c      	adds	r7, #28
 800cd66:	46bd      	mov	sp, r7
 800cd68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd6c:	4770      	bx	lr
	...

0800cd70 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cd70:	b480      	push	{r7}
 800cd72:	b083      	sub	sp, #12
 800cd74:	af00      	add	r7, sp, #0
 800cd76:	4603      	mov	r3, r0
 800cd78:	6039      	str	r1, [r7, #0]
 800cd7a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800cd7c:	683b      	ldr	r3, [r7, #0]
 800cd7e:	2212      	movs	r2, #18
 800cd80:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800cd82:	4b03      	ldr	r3, [pc, #12]	; (800cd90 <USBD_FS_DeviceDescriptor+0x20>)
}
 800cd84:	4618      	mov	r0, r3
 800cd86:	370c      	adds	r7, #12
 800cd88:	46bd      	mov	sp, r7
 800cd8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd8e:	4770      	bx	lr
 800cd90:	240000cc 	.word	0x240000cc

0800cd94 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cd94:	b480      	push	{r7}
 800cd96:	b083      	sub	sp, #12
 800cd98:	af00      	add	r7, sp, #0
 800cd9a:	4603      	mov	r3, r0
 800cd9c:	6039      	str	r1, [r7, #0]
 800cd9e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800cda0:	683b      	ldr	r3, [r7, #0]
 800cda2:	2204      	movs	r2, #4
 800cda4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800cda6:	4b03      	ldr	r3, [pc, #12]	; (800cdb4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800cda8:	4618      	mov	r0, r3
 800cdaa:	370c      	adds	r7, #12
 800cdac:	46bd      	mov	sp, r7
 800cdae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdb2:	4770      	bx	lr
 800cdb4:	240000e0 	.word	0x240000e0

0800cdb8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cdb8:	b580      	push	{r7, lr}
 800cdba:	b082      	sub	sp, #8
 800cdbc:	af00      	add	r7, sp, #0
 800cdbe:	4603      	mov	r3, r0
 800cdc0:	6039      	str	r1, [r7, #0]
 800cdc2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cdc4:	79fb      	ldrb	r3, [r7, #7]
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d105      	bne.n	800cdd6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cdca:	683a      	ldr	r2, [r7, #0]
 800cdcc:	4907      	ldr	r1, [pc, #28]	; (800cdec <USBD_FS_ProductStrDescriptor+0x34>)
 800cdce:	4808      	ldr	r0, [pc, #32]	; (800cdf0 <USBD_FS_ProductStrDescriptor+0x38>)
 800cdd0:	f7ff fdf6 	bl	800c9c0 <USBD_GetString>
 800cdd4:	e004      	b.n	800cde0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cdd6:	683a      	ldr	r2, [r7, #0]
 800cdd8:	4904      	ldr	r1, [pc, #16]	; (800cdec <USBD_FS_ProductStrDescriptor+0x34>)
 800cdda:	4805      	ldr	r0, [pc, #20]	; (800cdf0 <USBD_FS_ProductStrDescriptor+0x38>)
 800cddc:	f7ff fdf0 	bl	800c9c0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cde0:	4b02      	ldr	r3, [pc, #8]	; (800cdec <USBD_FS_ProductStrDescriptor+0x34>)
}
 800cde2:	4618      	mov	r0, r3
 800cde4:	3708      	adds	r7, #8
 800cde6:	46bd      	mov	sp, r7
 800cde8:	bd80      	pop	{r7, pc}
 800cdea:	bf00      	nop
 800cdec:	24001fd0 	.word	0x24001fd0
 800cdf0:	0801161c 	.word	0x0801161c

0800cdf4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cdf4:	b580      	push	{r7, lr}
 800cdf6:	b082      	sub	sp, #8
 800cdf8:	af00      	add	r7, sp, #0
 800cdfa:	4603      	mov	r3, r0
 800cdfc:	6039      	str	r1, [r7, #0]
 800cdfe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ce00:	683a      	ldr	r2, [r7, #0]
 800ce02:	4904      	ldr	r1, [pc, #16]	; (800ce14 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800ce04:	4804      	ldr	r0, [pc, #16]	; (800ce18 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800ce06:	f7ff fddb 	bl	800c9c0 <USBD_GetString>
  return USBD_StrDesc;
 800ce0a:	4b02      	ldr	r3, [pc, #8]	; (800ce14 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800ce0c:	4618      	mov	r0, r3
 800ce0e:	3708      	adds	r7, #8
 800ce10:	46bd      	mov	sp, r7
 800ce12:	bd80      	pop	{r7, pc}
 800ce14:	24001fd0 	.word	0x24001fd0
 800ce18:	08011634 	.word	0x08011634

0800ce1c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ce1c:	b580      	push	{r7, lr}
 800ce1e:	b082      	sub	sp, #8
 800ce20:	af00      	add	r7, sp, #0
 800ce22:	4603      	mov	r3, r0
 800ce24:	6039      	str	r1, [r7, #0]
 800ce26:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ce28:	683b      	ldr	r3, [r7, #0]
 800ce2a:	221a      	movs	r2, #26
 800ce2c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ce2e:	f000 f843 	bl	800ceb8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800ce32:	4b02      	ldr	r3, [pc, #8]	; (800ce3c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800ce34:	4618      	mov	r0, r3
 800ce36:	3708      	adds	r7, #8
 800ce38:	46bd      	mov	sp, r7
 800ce3a:	bd80      	pop	{r7, pc}
 800ce3c:	240000e4 	.word	0x240000e4

0800ce40 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ce40:	b580      	push	{r7, lr}
 800ce42:	b082      	sub	sp, #8
 800ce44:	af00      	add	r7, sp, #0
 800ce46:	4603      	mov	r3, r0
 800ce48:	6039      	str	r1, [r7, #0]
 800ce4a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ce4c:	79fb      	ldrb	r3, [r7, #7]
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d105      	bne.n	800ce5e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ce52:	683a      	ldr	r2, [r7, #0]
 800ce54:	4907      	ldr	r1, [pc, #28]	; (800ce74 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ce56:	4808      	ldr	r0, [pc, #32]	; (800ce78 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ce58:	f7ff fdb2 	bl	800c9c0 <USBD_GetString>
 800ce5c:	e004      	b.n	800ce68 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ce5e:	683a      	ldr	r2, [r7, #0]
 800ce60:	4904      	ldr	r1, [pc, #16]	; (800ce74 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ce62:	4805      	ldr	r0, [pc, #20]	; (800ce78 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ce64:	f7ff fdac 	bl	800c9c0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ce68:	4b02      	ldr	r3, [pc, #8]	; (800ce74 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800ce6a:	4618      	mov	r0, r3
 800ce6c:	3708      	adds	r7, #8
 800ce6e:	46bd      	mov	sp, r7
 800ce70:	bd80      	pop	{r7, pc}
 800ce72:	bf00      	nop
 800ce74:	24001fd0 	.word	0x24001fd0
 800ce78:	08011648 	.word	0x08011648

0800ce7c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ce7c:	b580      	push	{r7, lr}
 800ce7e:	b082      	sub	sp, #8
 800ce80:	af00      	add	r7, sp, #0
 800ce82:	4603      	mov	r3, r0
 800ce84:	6039      	str	r1, [r7, #0]
 800ce86:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ce88:	79fb      	ldrb	r3, [r7, #7]
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d105      	bne.n	800ce9a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ce8e:	683a      	ldr	r2, [r7, #0]
 800ce90:	4907      	ldr	r1, [pc, #28]	; (800ceb0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ce92:	4808      	ldr	r0, [pc, #32]	; (800ceb4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ce94:	f7ff fd94 	bl	800c9c0 <USBD_GetString>
 800ce98:	e004      	b.n	800cea4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ce9a:	683a      	ldr	r2, [r7, #0]
 800ce9c:	4904      	ldr	r1, [pc, #16]	; (800ceb0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ce9e:	4805      	ldr	r0, [pc, #20]	; (800ceb4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cea0:	f7ff fd8e 	bl	800c9c0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cea4:	4b02      	ldr	r3, [pc, #8]	; (800ceb0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800cea6:	4618      	mov	r0, r3
 800cea8:	3708      	adds	r7, #8
 800ceaa:	46bd      	mov	sp, r7
 800ceac:	bd80      	pop	{r7, pc}
 800ceae:	bf00      	nop
 800ceb0:	24001fd0 	.word	0x24001fd0
 800ceb4:	08011654 	.word	0x08011654

0800ceb8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ceb8:	b580      	push	{r7, lr}
 800ceba:	b084      	sub	sp, #16
 800cebc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800cebe:	4b0f      	ldr	r3, [pc, #60]	; (800cefc <Get_SerialNum+0x44>)
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800cec4:	4b0e      	ldr	r3, [pc, #56]	; (800cf00 <Get_SerialNum+0x48>)
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ceca:	4b0e      	ldr	r3, [pc, #56]	; (800cf04 <Get_SerialNum+0x4c>)
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ced0:	68fa      	ldr	r2, [r7, #12]
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	4413      	add	r3, r2
 800ced6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d009      	beq.n	800cef2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800cede:	2208      	movs	r2, #8
 800cee0:	4909      	ldr	r1, [pc, #36]	; (800cf08 <Get_SerialNum+0x50>)
 800cee2:	68f8      	ldr	r0, [r7, #12]
 800cee4:	f000 f814 	bl	800cf10 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800cee8:	2204      	movs	r2, #4
 800ceea:	4908      	ldr	r1, [pc, #32]	; (800cf0c <Get_SerialNum+0x54>)
 800ceec:	68b8      	ldr	r0, [r7, #8]
 800ceee:	f000 f80f 	bl	800cf10 <IntToUnicode>
  }
}
 800cef2:	bf00      	nop
 800cef4:	3710      	adds	r7, #16
 800cef6:	46bd      	mov	sp, r7
 800cef8:	bd80      	pop	{r7, pc}
 800cefa:	bf00      	nop
 800cefc:	1ff1e800 	.word	0x1ff1e800
 800cf00:	1ff1e804 	.word	0x1ff1e804
 800cf04:	1ff1e808 	.word	0x1ff1e808
 800cf08:	240000e6 	.word	0x240000e6
 800cf0c:	240000f6 	.word	0x240000f6

0800cf10 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800cf10:	b480      	push	{r7}
 800cf12:	b087      	sub	sp, #28
 800cf14:	af00      	add	r7, sp, #0
 800cf16:	60f8      	str	r0, [r7, #12]
 800cf18:	60b9      	str	r1, [r7, #8]
 800cf1a:	4613      	mov	r3, r2
 800cf1c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800cf1e:	2300      	movs	r3, #0
 800cf20:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800cf22:	2300      	movs	r3, #0
 800cf24:	75fb      	strb	r3, [r7, #23]
 800cf26:	e027      	b.n	800cf78 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	0f1b      	lsrs	r3, r3, #28
 800cf2c:	2b09      	cmp	r3, #9
 800cf2e:	d80b      	bhi.n	800cf48 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	0f1b      	lsrs	r3, r3, #28
 800cf34:	b2da      	uxtb	r2, r3
 800cf36:	7dfb      	ldrb	r3, [r7, #23]
 800cf38:	005b      	lsls	r3, r3, #1
 800cf3a:	4619      	mov	r1, r3
 800cf3c:	68bb      	ldr	r3, [r7, #8]
 800cf3e:	440b      	add	r3, r1
 800cf40:	3230      	adds	r2, #48	; 0x30
 800cf42:	b2d2      	uxtb	r2, r2
 800cf44:	701a      	strb	r2, [r3, #0]
 800cf46:	e00a      	b.n	800cf5e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	0f1b      	lsrs	r3, r3, #28
 800cf4c:	b2da      	uxtb	r2, r3
 800cf4e:	7dfb      	ldrb	r3, [r7, #23]
 800cf50:	005b      	lsls	r3, r3, #1
 800cf52:	4619      	mov	r1, r3
 800cf54:	68bb      	ldr	r3, [r7, #8]
 800cf56:	440b      	add	r3, r1
 800cf58:	3237      	adds	r2, #55	; 0x37
 800cf5a:	b2d2      	uxtb	r2, r2
 800cf5c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	011b      	lsls	r3, r3, #4
 800cf62:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800cf64:	7dfb      	ldrb	r3, [r7, #23]
 800cf66:	005b      	lsls	r3, r3, #1
 800cf68:	3301      	adds	r3, #1
 800cf6a:	68ba      	ldr	r2, [r7, #8]
 800cf6c:	4413      	add	r3, r2
 800cf6e:	2200      	movs	r2, #0
 800cf70:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800cf72:	7dfb      	ldrb	r3, [r7, #23]
 800cf74:	3301      	adds	r3, #1
 800cf76:	75fb      	strb	r3, [r7, #23]
 800cf78:	7dfa      	ldrb	r2, [r7, #23]
 800cf7a:	79fb      	ldrb	r3, [r7, #7]
 800cf7c:	429a      	cmp	r2, r3
 800cf7e:	d3d3      	bcc.n	800cf28 <IntToUnicode+0x18>
  }
}
 800cf80:	bf00      	nop
 800cf82:	bf00      	nop
 800cf84:	371c      	adds	r7, #28
 800cf86:	46bd      	mov	sp, r7
 800cf88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf8c:	4770      	bx	lr
	...

0800cf90 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800cf90:	b580      	push	{r7, lr}
 800cf92:	b0ba      	sub	sp, #232	; 0xe8
 800cf94:	af00      	add	r7, sp, #0
 800cf96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cf98:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800cf9c:	2200      	movs	r2, #0
 800cf9e:	601a      	str	r2, [r3, #0]
 800cfa0:	605a      	str	r2, [r3, #4]
 800cfa2:	609a      	str	r2, [r3, #8]
 800cfa4:	60da      	str	r2, [r3, #12]
 800cfa6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800cfa8:	f107 0310 	add.w	r3, r7, #16
 800cfac:	22c0      	movs	r2, #192	; 0xc0
 800cfae:	2100      	movs	r1, #0
 800cfb0:	4618      	mov	r0, r3
 800cfb2:	f003 f90b 	bl	80101cc <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	4a2c      	ldr	r2, [pc, #176]	; (800d06c <HAL_PCD_MspInit+0xdc>)
 800cfbc:	4293      	cmp	r3, r2
 800cfbe:	d151      	bne.n	800d064 <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800cfc0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800cfc4:	f04f 0300 	mov.w	r3, #0
 800cfc8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800cfcc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800cfd0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800cfd4:	f107 0310 	add.w	r3, r7, #16
 800cfd8:	4618      	mov	r0, r3
 800cfda:	f7f9 fc53 	bl	8006884 <HAL_RCCEx_PeriphCLKConfig>
 800cfde:	4603      	mov	r3, r0
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d001      	beq.n	800cfe8 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 800cfe4:	f7f3 ff87 	bl	8000ef6 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800cfe8:	f7f7 ffbc 	bl	8004f64 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cfec:	4b20      	ldr	r3, [pc, #128]	; (800d070 <HAL_PCD_MspInit+0xe0>)
 800cfee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800cff2:	4a1f      	ldr	r2, [pc, #124]	; (800d070 <HAL_PCD_MspInit+0xe0>)
 800cff4:	f043 0301 	orr.w	r3, r3, #1
 800cff8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800cffc:	4b1c      	ldr	r3, [pc, #112]	; (800d070 <HAL_PCD_MspInit+0xe0>)
 800cffe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d002:	f003 0301 	and.w	r3, r3, #1
 800d006:	60fb      	str	r3, [r7, #12]
 800d008:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = USB_OTG_FS2_P_Pin|USB_OTG_FS2_N_Pin;
 800d00a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800d00e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d012:	2302      	movs	r3, #2
 800d014:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d018:	2300      	movs	r3, #0
 800d01a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d01e:	2300      	movs	r3, #0
 800d020:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800d024:	230a      	movs	r3, #10
 800d026:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d02a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800d02e:	4619      	mov	r1, r3
 800d030:	4810      	ldr	r0, [pc, #64]	; (800d074 <HAL_PCD_MspInit+0xe4>)
 800d032:	f7f6 fadb 	bl	80035ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d036:	4b0e      	ldr	r3, [pc, #56]	; (800d070 <HAL_PCD_MspInit+0xe0>)
 800d038:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800d03c:	4a0c      	ldr	r2, [pc, #48]	; (800d070 <HAL_PCD_MspInit+0xe0>)
 800d03e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800d042:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800d046:	4b0a      	ldr	r3, [pc, #40]	; (800d070 <HAL_PCD_MspInit+0xe0>)
 800d048:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800d04c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d050:	60bb      	str	r3, [r7, #8]
 800d052:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800d054:	2200      	movs	r2, #0
 800d056:	2100      	movs	r1, #0
 800d058:	2065      	movs	r0, #101	; 0x65
 800d05a:	f7f6 f924 	bl	80032a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d05e:	2065      	movs	r0, #101	; 0x65
 800d060:	f7f6 f93b 	bl	80032da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d064:	bf00      	nop
 800d066:	37e8      	adds	r7, #232	; 0xe8
 800d068:	46bd      	mov	sp, r7
 800d06a:	bd80      	pop	{r7, pc}
 800d06c:	40080000 	.word	0x40080000
 800d070:	58024400 	.word	0x58024400
 800d074:	58020000 	.word	0x58020000

0800d078 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d078:	b580      	push	{r7, lr}
 800d07a:	b082      	sub	sp, #8
 800d07c:	af00      	add	r7, sp, #0
 800d07e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800d08c:	4619      	mov	r1, r3
 800d08e:	4610      	mov	r0, r2
 800d090:	f7fe fb31 	bl	800b6f6 <USBD_LL_SetupStage>
}
 800d094:	bf00      	nop
 800d096:	3708      	adds	r7, #8
 800d098:	46bd      	mov	sp, r7
 800d09a:	bd80      	pop	{r7, pc}

0800d09c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d09c:	b580      	push	{r7, lr}
 800d09e:	b082      	sub	sp, #8
 800d0a0:	af00      	add	r7, sp, #0
 800d0a2:	6078      	str	r0, [r7, #4]
 800d0a4:	460b      	mov	r3, r1
 800d0a6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800d0ae:	78fa      	ldrb	r2, [r7, #3]
 800d0b0:	6879      	ldr	r1, [r7, #4]
 800d0b2:	4613      	mov	r3, r2
 800d0b4:	00db      	lsls	r3, r3, #3
 800d0b6:	4413      	add	r3, r2
 800d0b8:	009b      	lsls	r3, r3, #2
 800d0ba:	440b      	add	r3, r1
 800d0bc:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800d0c0:	681a      	ldr	r2, [r3, #0]
 800d0c2:	78fb      	ldrb	r3, [r7, #3]
 800d0c4:	4619      	mov	r1, r3
 800d0c6:	f7fe fb6b 	bl	800b7a0 <USBD_LL_DataOutStage>
}
 800d0ca:	bf00      	nop
 800d0cc:	3708      	adds	r7, #8
 800d0ce:	46bd      	mov	sp, r7
 800d0d0:	bd80      	pop	{r7, pc}

0800d0d2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d0d2:	b580      	push	{r7, lr}
 800d0d4:	b082      	sub	sp, #8
 800d0d6:	af00      	add	r7, sp, #0
 800d0d8:	6078      	str	r0, [r7, #4]
 800d0da:	460b      	mov	r3, r1
 800d0dc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800d0e4:	78fa      	ldrb	r2, [r7, #3]
 800d0e6:	6879      	ldr	r1, [r7, #4]
 800d0e8:	4613      	mov	r3, r2
 800d0ea:	00db      	lsls	r3, r3, #3
 800d0ec:	4413      	add	r3, r2
 800d0ee:	009b      	lsls	r3, r3, #2
 800d0f0:	440b      	add	r3, r1
 800d0f2:	3348      	adds	r3, #72	; 0x48
 800d0f4:	681a      	ldr	r2, [r3, #0]
 800d0f6:	78fb      	ldrb	r3, [r7, #3]
 800d0f8:	4619      	mov	r1, r3
 800d0fa:	f7fe fc04 	bl	800b906 <USBD_LL_DataInStage>
}
 800d0fe:	bf00      	nop
 800d100:	3708      	adds	r7, #8
 800d102:	46bd      	mov	sp, r7
 800d104:	bd80      	pop	{r7, pc}

0800d106 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d106:	b580      	push	{r7, lr}
 800d108:	b082      	sub	sp, #8
 800d10a:	af00      	add	r7, sp, #0
 800d10c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d114:	4618      	mov	r0, r3
 800d116:	f7fe fd3e 	bl	800bb96 <USBD_LL_SOF>
}
 800d11a:	bf00      	nop
 800d11c:	3708      	adds	r7, #8
 800d11e:	46bd      	mov	sp, r7
 800d120:	bd80      	pop	{r7, pc}

0800d122 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d122:	b580      	push	{r7, lr}
 800d124:	b084      	sub	sp, #16
 800d126:	af00      	add	r7, sp, #0
 800d128:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d12a:	2301      	movs	r3, #1
 800d12c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	691b      	ldr	r3, [r3, #16]
 800d132:	2b00      	cmp	r3, #0
 800d134:	d102      	bne.n	800d13c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800d136:	2300      	movs	r3, #0
 800d138:	73fb      	strb	r3, [r7, #15]
 800d13a:	e008      	b.n	800d14e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	691b      	ldr	r3, [r3, #16]
 800d140:	2b02      	cmp	r3, #2
 800d142:	d102      	bne.n	800d14a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800d144:	2301      	movs	r3, #1
 800d146:	73fb      	strb	r3, [r7, #15]
 800d148:	e001      	b.n	800d14e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800d14a:	f7f3 fed4 	bl	8000ef6 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d154:	7bfa      	ldrb	r2, [r7, #15]
 800d156:	4611      	mov	r1, r2
 800d158:	4618      	mov	r0, r3
 800d15a:	f7fe fcd8 	bl	800bb0e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d164:	4618      	mov	r0, r3
 800d166:	f7fe fc80 	bl	800ba6a <USBD_LL_Reset>
}
 800d16a:	bf00      	nop
 800d16c:	3710      	adds	r7, #16
 800d16e:	46bd      	mov	sp, r7
 800d170:	bd80      	pop	{r7, pc}
	...

0800d174 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d174:	b580      	push	{r7, lr}
 800d176:	b082      	sub	sp, #8
 800d178:	af00      	add	r7, sp, #0
 800d17a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d182:	4618      	mov	r0, r3
 800d184:	f7fe fcd3 	bl	800bb2e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	687a      	ldr	r2, [r7, #4]
 800d194:	6812      	ldr	r2, [r2, #0]
 800d196:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d19a:	f043 0301 	orr.w	r3, r3, #1
 800d19e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	6a1b      	ldr	r3, [r3, #32]
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d005      	beq.n	800d1b4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d1a8:	4b04      	ldr	r3, [pc, #16]	; (800d1bc <HAL_PCD_SuspendCallback+0x48>)
 800d1aa:	691b      	ldr	r3, [r3, #16]
 800d1ac:	4a03      	ldr	r2, [pc, #12]	; (800d1bc <HAL_PCD_SuspendCallback+0x48>)
 800d1ae:	f043 0306 	orr.w	r3, r3, #6
 800d1b2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d1b4:	bf00      	nop
 800d1b6:	3708      	adds	r7, #8
 800d1b8:	46bd      	mov	sp, r7
 800d1ba:	bd80      	pop	{r7, pc}
 800d1bc:	e000ed00 	.word	0xe000ed00

0800d1c0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d1c0:	b580      	push	{r7, lr}
 800d1c2:	b082      	sub	sp, #8
 800d1c4:	af00      	add	r7, sp, #0
 800d1c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d1ce:	4618      	mov	r0, r3
 800d1d0:	f7fe fcc9 	bl	800bb66 <USBD_LL_Resume>
}
 800d1d4:	bf00      	nop
 800d1d6:	3708      	adds	r7, #8
 800d1d8:	46bd      	mov	sp, r7
 800d1da:	bd80      	pop	{r7, pc}

0800d1dc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d1dc:	b580      	push	{r7, lr}
 800d1de:	b082      	sub	sp, #8
 800d1e0:	af00      	add	r7, sp, #0
 800d1e2:	6078      	str	r0, [r7, #4]
 800d1e4:	460b      	mov	r3, r1
 800d1e6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d1ee:	78fa      	ldrb	r2, [r7, #3]
 800d1f0:	4611      	mov	r1, r2
 800d1f2:	4618      	mov	r0, r3
 800d1f4:	f7fe fd21 	bl	800bc3a <USBD_LL_IsoOUTIncomplete>
}
 800d1f8:	bf00      	nop
 800d1fa:	3708      	adds	r7, #8
 800d1fc:	46bd      	mov	sp, r7
 800d1fe:	bd80      	pop	{r7, pc}

0800d200 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d200:	b580      	push	{r7, lr}
 800d202:	b082      	sub	sp, #8
 800d204:	af00      	add	r7, sp, #0
 800d206:	6078      	str	r0, [r7, #4]
 800d208:	460b      	mov	r3, r1
 800d20a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d212:	78fa      	ldrb	r2, [r7, #3]
 800d214:	4611      	mov	r1, r2
 800d216:	4618      	mov	r0, r3
 800d218:	f7fe fcdd 	bl	800bbd6 <USBD_LL_IsoINIncomplete>
}
 800d21c:	bf00      	nop
 800d21e:	3708      	adds	r7, #8
 800d220:	46bd      	mov	sp, r7
 800d222:	bd80      	pop	{r7, pc}

0800d224 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d224:	b580      	push	{r7, lr}
 800d226:	b082      	sub	sp, #8
 800d228:	af00      	add	r7, sp, #0
 800d22a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d232:	4618      	mov	r0, r3
 800d234:	f7fe fd33 	bl	800bc9e <USBD_LL_DevConnected>
}
 800d238:	bf00      	nop
 800d23a:	3708      	adds	r7, #8
 800d23c:	46bd      	mov	sp, r7
 800d23e:	bd80      	pop	{r7, pc}

0800d240 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d240:	b580      	push	{r7, lr}
 800d242:	b082      	sub	sp, #8
 800d244:	af00      	add	r7, sp, #0
 800d246:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d24e:	4618      	mov	r0, r3
 800d250:	f7fe fd30 	bl	800bcb4 <USBD_LL_DevDisconnected>
}
 800d254:	bf00      	nop
 800d256:	3708      	adds	r7, #8
 800d258:	46bd      	mov	sp, r7
 800d25a:	bd80      	pop	{r7, pc}

0800d25c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d25c:	b580      	push	{r7, lr}
 800d25e:	b082      	sub	sp, #8
 800d260:	af00      	add	r7, sp, #0
 800d262:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	781b      	ldrb	r3, [r3, #0]
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d13e      	bne.n	800d2ea <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800d26c:	4a21      	ldr	r2, [pc, #132]	; (800d2f4 <USBD_LL_Init+0x98>)
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	4a1f      	ldr	r2, [pc, #124]	; (800d2f4 <USBD_LL_Init+0x98>)
 800d278:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d27c:	4b1d      	ldr	r3, [pc, #116]	; (800d2f4 <USBD_LL_Init+0x98>)
 800d27e:	4a1e      	ldr	r2, [pc, #120]	; (800d2f8 <USBD_LL_Init+0x9c>)
 800d280:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800d282:	4b1c      	ldr	r3, [pc, #112]	; (800d2f4 <USBD_LL_Init+0x98>)
 800d284:	2209      	movs	r2, #9
 800d286:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800d288:	4b1a      	ldr	r3, [pc, #104]	; (800d2f4 <USBD_LL_Init+0x98>)
 800d28a:	2202      	movs	r2, #2
 800d28c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d28e:	4b19      	ldr	r3, [pc, #100]	; (800d2f4 <USBD_LL_Init+0x98>)
 800d290:	2200      	movs	r2, #0
 800d292:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d294:	4b17      	ldr	r3, [pc, #92]	; (800d2f4 <USBD_LL_Init+0x98>)
 800d296:	2202      	movs	r2, #2
 800d298:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d29a:	4b16      	ldr	r3, [pc, #88]	; (800d2f4 <USBD_LL_Init+0x98>)
 800d29c:	2200      	movs	r2, #0
 800d29e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800d2a0:	4b14      	ldr	r3, [pc, #80]	; (800d2f4 <USBD_LL_Init+0x98>)
 800d2a2:	2200      	movs	r2, #0
 800d2a4:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800d2a6:	4b13      	ldr	r3, [pc, #76]	; (800d2f4 <USBD_LL_Init+0x98>)
 800d2a8:	2200      	movs	r2, #0
 800d2aa:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800d2ac:	4b11      	ldr	r3, [pc, #68]	; (800d2f4 <USBD_LL_Init+0x98>)
 800d2ae:	2200      	movs	r2, #0
 800d2b0:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800d2b2:	4b10      	ldr	r3, [pc, #64]	; (800d2f4 <USBD_LL_Init+0x98>)
 800d2b4:	2200      	movs	r2, #0
 800d2b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800d2b8:	4b0e      	ldr	r3, [pc, #56]	; (800d2f4 <USBD_LL_Init+0x98>)
 800d2ba:	2200      	movs	r2, #0
 800d2bc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800d2be:	480d      	ldr	r0, [pc, #52]	; (800d2f4 <USBD_LL_Init+0x98>)
 800d2c0:	f7f6 fb5d 	bl	800397e <HAL_PCD_Init>
 800d2c4:	4603      	mov	r3, r0
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d001      	beq.n	800d2ce <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800d2ca:	f7f3 fe14 	bl	8000ef6 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800d2ce:	2180      	movs	r1, #128	; 0x80
 800d2d0:	4808      	ldr	r0, [pc, #32]	; (800d2f4 <USBD_LL_Init+0x98>)
 800d2d2:	f7f7 fdcc 	bl	8004e6e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800d2d6:	2240      	movs	r2, #64	; 0x40
 800d2d8:	2100      	movs	r1, #0
 800d2da:	4806      	ldr	r0, [pc, #24]	; (800d2f4 <USBD_LL_Init+0x98>)
 800d2dc:	f7f7 fd80 	bl	8004de0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800d2e0:	2280      	movs	r2, #128	; 0x80
 800d2e2:	2101      	movs	r1, #1
 800d2e4:	4803      	ldr	r0, [pc, #12]	; (800d2f4 <USBD_LL_Init+0x98>)
 800d2e6:	f7f7 fd7b 	bl	8004de0 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 800d2ea:	2300      	movs	r3, #0
}
 800d2ec:	4618      	mov	r0, r3
 800d2ee:	3708      	adds	r7, #8
 800d2f0:	46bd      	mov	sp, r7
 800d2f2:	bd80      	pop	{r7, pc}
 800d2f4:	240021d0 	.word	0x240021d0
 800d2f8:	40080000 	.word	0x40080000

0800d2fc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d2fc:	b580      	push	{r7, lr}
 800d2fe:	b084      	sub	sp, #16
 800d300:	af00      	add	r7, sp, #0
 800d302:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d304:	2300      	movs	r3, #0
 800d306:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d308:	2300      	movs	r3, #0
 800d30a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d312:	4618      	mov	r0, r3
 800d314:	f7f6 fc57 	bl	8003bc6 <HAL_PCD_Start>
 800d318:	4603      	mov	r3, r0
 800d31a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d31c:	7bfb      	ldrb	r3, [r7, #15]
 800d31e:	4618      	mov	r0, r3
 800d320:	f000 f942 	bl	800d5a8 <USBD_Get_USB_Status>
 800d324:	4603      	mov	r3, r0
 800d326:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d328:	7bbb      	ldrb	r3, [r7, #14]
}
 800d32a:	4618      	mov	r0, r3
 800d32c:	3710      	adds	r7, #16
 800d32e:	46bd      	mov	sp, r7
 800d330:	bd80      	pop	{r7, pc}

0800d332 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d332:	b580      	push	{r7, lr}
 800d334:	b084      	sub	sp, #16
 800d336:	af00      	add	r7, sp, #0
 800d338:	6078      	str	r0, [r7, #4]
 800d33a:	4608      	mov	r0, r1
 800d33c:	4611      	mov	r1, r2
 800d33e:	461a      	mov	r2, r3
 800d340:	4603      	mov	r3, r0
 800d342:	70fb      	strb	r3, [r7, #3]
 800d344:	460b      	mov	r3, r1
 800d346:	70bb      	strb	r3, [r7, #2]
 800d348:	4613      	mov	r3, r2
 800d34a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d34c:	2300      	movs	r3, #0
 800d34e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d350:	2300      	movs	r3, #0
 800d352:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800d35a:	78bb      	ldrb	r3, [r7, #2]
 800d35c:	883a      	ldrh	r2, [r7, #0]
 800d35e:	78f9      	ldrb	r1, [r7, #3]
 800d360:	f7f7 f957 	bl	8004612 <HAL_PCD_EP_Open>
 800d364:	4603      	mov	r3, r0
 800d366:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d368:	7bfb      	ldrb	r3, [r7, #15]
 800d36a:	4618      	mov	r0, r3
 800d36c:	f000 f91c 	bl	800d5a8 <USBD_Get_USB_Status>
 800d370:	4603      	mov	r3, r0
 800d372:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d374:	7bbb      	ldrb	r3, [r7, #14]
}
 800d376:	4618      	mov	r0, r3
 800d378:	3710      	adds	r7, #16
 800d37a:	46bd      	mov	sp, r7
 800d37c:	bd80      	pop	{r7, pc}

0800d37e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d37e:	b580      	push	{r7, lr}
 800d380:	b084      	sub	sp, #16
 800d382:	af00      	add	r7, sp, #0
 800d384:	6078      	str	r0, [r7, #4]
 800d386:	460b      	mov	r3, r1
 800d388:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d38a:	2300      	movs	r3, #0
 800d38c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d38e:	2300      	movs	r3, #0
 800d390:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d398:	78fa      	ldrb	r2, [r7, #3]
 800d39a:	4611      	mov	r1, r2
 800d39c:	4618      	mov	r0, r3
 800d39e:	f7f7 f9a0 	bl	80046e2 <HAL_PCD_EP_Close>
 800d3a2:	4603      	mov	r3, r0
 800d3a4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d3a6:	7bfb      	ldrb	r3, [r7, #15]
 800d3a8:	4618      	mov	r0, r3
 800d3aa:	f000 f8fd 	bl	800d5a8 <USBD_Get_USB_Status>
 800d3ae:	4603      	mov	r3, r0
 800d3b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d3b2:	7bbb      	ldrb	r3, [r7, #14]
}
 800d3b4:	4618      	mov	r0, r3
 800d3b6:	3710      	adds	r7, #16
 800d3b8:	46bd      	mov	sp, r7
 800d3ba:	bd80      	pop	{r7, pc}

0800d3bc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d3bc:	b580      	push	{r7, lr}
 800d3be:	b084      	sub	sp, #16
 800d3c0:	af00      	add	r7, sp, #0
 800d3c2:	6078      	str	r0, [r7, #4]
 800d3c4:	460b      	mov	r3, r1
 800d3c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d3c8:	2300      	movs	r3, #0
 800d3ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d3cc:	2300      	movs	r3, #0
 800d3ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d3d6:	78fa      	ldrb	r2, [r7, #3]
 800d3d8:	4611      	mov	r1, r2
 800d3da:	4618      	mov	r0, r3
 800d3dc:	f7f7 fa5a 	bl	8004894 <HAL_PCD_EP_SetStall>
 800d3e0:	4603      	mov	r3, r0
 800d3e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d3e4:	7bfb      	ldrb	r3, [r7, #15]
 800d3e6:	4618      	mov	r0, r3
 800d3e8:	f000 f8de 	bl	800d5a8 <USBD_Get_USB_Status>
 800d3ec:	4603      	mov	r3, r0
 800d3ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d3f0:	7bbb      	ldrb	r3, [r7, #14]
}
 800d3f2:	4618      	mov	r0, r3
 800d3f4:	3710      	adds	r7, #16
 800d3f6:	46bd      	mov	sp, r7
 800d3f8:	bd80      	pop	{r7, pc}

0800d3fa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d3fa:	b580      	push	{r7, lr}
 800d3fc:	b084      	sub	sp, #16
 800d3fe:	af00      	add	r7, sp, #0
 800d400:	6078      	str	r0, [r7, #4]
 800d402:	460b      	mov	r3, r1
 800d404:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d406:	2300      	movs	r3, #0
 800d408:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d40a:	2300      	movs	r3, #0
 800d40c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d414:	78fa      	ldrb	r2, [r7, #3]
 800d416:	4611      	mov	r1, r2
 800d418:	4618      	mov	r0, r3
 800d41a:	f7f7 fa9f 	bl	800495c <HAL_PCD_EP_ClrStall>
 800d41e:	4603      	mov	r3, r0
 800d420:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d422:	7bfb      	ldrb	r3, [r7, #15]
 800d424:	4618      	mov	r0, r3
 800d426:	f000 f8bf 	bl	800d5a8 <USBD_Get_USB_Status>
 800d42a:	4603      	mov	r3, r0
 800d42c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d42e:	7bbb      	ldrb	r3, [r7, #14]
}
 800d430:	4618      	mov	r0, r3
 800d432:	3710      	adds	r7, #16
 800d434:	46bd      	mov	sp, r7
 800d436:	bd80      	pop	{r7, pc}

0800d438 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d438:	b480      	push	{r7}
 800d43a:	b085      	sub	sp, #20
 800d43c:	af00      	add	r7, sp, #0
 800d43e:	6078      	str	r0, [r7, #4]
 800d440:	460b      	mov	r3, r1
 800d442:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d44a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d44c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d450:	2b00      	cmp	r3, #0
 800d452:	da0b      	bge.n	800d46c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d454:	78fb      	ldrb	r3, [r7, #3]
 800d456:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d45a:	68f9      	ldr	r1, [r7, #12]
 800d45c:	4613      	mov	r3, r2
 800d45e:	00db      	lsls	r3, r3, #3
 800d460:	4413      	add	r3, r2
 800d462:	009b      	lsls	r3, r3, #2
 800d464:	440b      	add	r3, r1
 800d466:	333e      	adds	r3, #62	; 0x3e
 800d468:	781b      	ldrb	r3, [r3, #0]
 800d46a:	e00b      	b.n	800d484 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d46c:	78fb      	ldrb	r3, [r7, #3]
 800d46e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d472:	68f9      	ldr	r1, [r7, #12]
 800d474:	4613      	mov	r3, r2
 800d476:	00db      	lsls	r3, r3, #3
 800d478:	4413      	add	r3, r2
 800d47a:	009b      	lsls	r3, r3, #2
 800d47c:	440b      	add	r3, r1
 800d47e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800d482:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d484:	4618      	mov	r0, r3
 800d486:	3714      	adds	r7, #20
 800d488:	46bd      	mov	sp, r7
 800d48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d48e:	4770      	bx	lr

0800d490 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d490:	b580      	push	{r7, lr}
 800d492:	b084      	sub	sp, #16
 800d494:	af00      	add	r7, sp, #0
 800d496:	6078      	str	r0, [r7, #4]
 800d498:	460b      	mov	r3, r1
 800d49a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d49c:	2300      	movs	r3, #0
 800d49e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d4a0:	2300      	movs	r3, #0
 800d4a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d4aa:	78fa      	ldrb	r2, [r7, #3]
 800d4ac:	4611      	mov	r1, r2
 800d4ae:	4618      	mov	r0, r3
 800d4b0:	f7f7 f88a 	bl	80045c8 <HAL_PCD_SetAddress>
 800d4b4:	4603      	mov	r3, r0
 800d4b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d4b8:	7bfb      	ldrb	r3, [r7, #15]
 800d4ba:	4618      	mov	r0, r3
 800d4bc:	f000 f874 	bl	800d5a8 <USBD_Get_USB_Status>
 800d4c0:	4603      	mov	r3, r0
 800d4c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d4c4:	7bbb      	ldrb	r3, [r7, #14]
}
 800d4c6:	4618      	mov	r0, r3
 800d4c8:	3710      	adds	r7, #16
 800d4ca:	46bd      	mov	sp, r7
 800d4cc:	bd80      	pop	{r7, pc}

0800d4ce <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d4ce:	b580      	push	{r7, lr}
 800d4d0:	b086      	sub	sp, #24
 800d4d2:	af00      	add	r7, sp, #0
 800d4d4:	60f8      	str	r0, [r7, #12]
 800d4d6:	607a      	str	r2, [r7, #4]
 800d4d8:	603b      	str	r3, [r7, #0]
 800d4da:	460b      	mov	r3, r1
 800d4dc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d4de:	2300      	movs	r3, #0
 800d4e0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d4e2:	2300      	movs	r3, #0
 800d4e4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800d4ec:	7af9      	ldrb	r1, [r7, #11]
 800d4ee:	683b      	ldr	r3, [r7, #0]
 800d4f0:	687a      	ldr	r2, [r7, #4]
 800d4f2:	f7f7 f994 	bl	800481e <HAL_PCD_EP_Transmit>
 800d4f6:	4603      	mov	r3, r0
 800d4f8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d4fa:	7dfb      	ldrb	r3, [r7, #23]
 800d4fc:	4618      	mov	r0, r3
 800d4fe:	f000 f853 	bl	800d5a8 <USBD_Get_USB_Status>
 800d502:	4603      	mov	r3, r0
 800d504:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d506:	7dbb      	ldrb	r3, [r7, #22]
}
 800d508:	4618      	mov	r0, r3
 800d50a:	3718      	adds	r7, #24
 800d50c:	46bd      	mov	sp, r7
 800d50e:	bd80      	pop	{r7, pc}

0800d510 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d510:	b580      	push	{r7, lr}
 800d512:	b086      	sub	sp, #24
 800d514:	af00      	add	r7, sp, #0
 800d516:	60f8      	str	r0, [r7, #12]
 800d518:	607a      	str	r2, [r7, #4]
 800d51a:	603b      	str	r3, [r7, #0]
 800d51c:	460b      	mov	r3, r1
 800d51e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d520:	2300      	movs	r3, #0
 800d522:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d524:	2300      	movs	r3, #0
 800d526:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800d52e:	7af9      	ldrb	r1, [r7, #11]
 800d530:	683b      	ldr	r3, [r7, #0]
 800d532:	687a      	ldr	r2, [r7, #4]
 800d534:	f7f7 f91f 	bl	8004776 <HAL_PCD_EP_Receive>
 800d538:	4603      	mov	r3, r0
 800d53a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d53c:	7dfb      	ldrb	r3, [r7, #23]
 800d53e:	4618      	mov	r0, r3
 800d540:	f000 f832 	bl	800d5a8 <USBD_Get_USB_Status>
 800d544:	4603      	mov	r3, r0
 800d546:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d548:	7dbb      	ldrb	r3, [r7, #22]
}
 800d54a:	4618      	mov	r0, r3
 800d54c:	3718      	adds	r7, #24
 800d54e:	46bd      	mov	sp, r7
 800d550:	bd80      	pop	{r7, pc}

0800d552 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d552:	b580      	push	{r7, lr}
 800d554:	b082      	sub	sp, #8
 800d556:	af00      	add	r7, sp, #0
 800d558:	6078      	str	r0, [r7, #4]
 800d55a:	460b      	mov	r3, r1
 800d55c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d564:	78fa      	ldrb	r2, [r7, #3]
 800d566:	4611      	mov	r1, r2
 800d568:	4618      	mov	r0, r3
 800d56a:	f7f7 f940 	bl	80047ee <HAL_PCD_EP_GetRxCount>
 800d56e:	4603      	mov	r3, r0
}
 800d570:	4618      	mov	r0, r3
 800d572:	3708      	adds	r7, #8
 800d574:	46bd      	mov	sp, r7
 800d576:	bd80      	pop	{r7, pc}

0800d578 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d578:	b480      	push	{r7}
 800d57a:	b083      	sub	sp, #12
 800d57c:	af00      	add	r7, sp, #0
 800d57e:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d580:	4b03      	ldr	r3, [pc, #12]	; (800d590 <USBD_static_malloc+0x18>)
}
 800d582:	4618      	mov	r0, r3
 800d584:	370c      	adds	r7, #12
 800d586:	46bd      	mov	sp, r7
 800d588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d58c:	4770      	bx	lr
 800d58e:	bf00      	nop
 800d590:	240026dc 	.word	0x240026dc

0800d594 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d594:	b480      	push	{r7}
 800d596:	b083      	sub	sp, #12
 800d598:	af00      	add	r7, sp, #0
 800d59a:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 800d59c:	bf00      	nop
 800d59e:	370c      	adds	r7, #12
 800d5a0:	46bd      	mov	sp, r7
 800d5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5a6:	4770      	bx	lr

0800d5a8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d5a8:	b480      	push	{r7}
 800d5aa:	b085      	sub	sp, #20
 800d5ac:	af00      	add	r7, sp, #0
 800d5ae:	4603      	mov	r3, r0
 800d5b0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d5b2:	2300      	movs	r3, #0
 800d5b4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d5b6:	79fb      	ldrb	r3, [r7, #7]
 800d5b8:	2b03      	cmp	r3, #3
 800d5ba:	d817      	bhi.n	800d5ec <USBD_Get_USB_Status+0x44>
 800d5bc:	a201      	add	r2, pc, #4	; (adr r2, 800d5c4 <USBD_Get_USB_Status+0x1c>)
 800d5be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5c2:	bf00      	nop
 800d5c4:	0800d5d5 	.word	0x0800d5d5
 800d5c8:	0800d5db 	.word	0x0800d5db
 800d5cc:	0800d5e1 	.word	0x0800d5e1
 800d5d0:	0800d5e7 	.word	0x0800d5e7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d5d4:	2300      	movs	r3, #0
 800d5d6:	73fb      	strb	r3, [r7, #15]
    break;
 800d5d8:	e00b      	b.n	800d5f2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d5da:	2303      	movs	r3, #3
 800d5dc:	73fb      	strb	r3, [r7, #15]
    break;
 800d5de:	e008      	b.n	800d5f2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d5e0:	2301      	movs	r3, #1
 800d5e2:	73fb      	strb	r3, [r7, #15]
    break;
 800d5e4:	e005      	b.n	800d5f2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d5e6:	2303      	movs	r3, #3
 800d5e8:	73fb      	strb	r3, [r7, #15]
    break;
 800d5ea:	e002      	b.n	800d5f2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d5ec:	2303      	movs	r3, #3
 800d5ee:	73fb      	strb	r3, [r7, #15]
    break;
 800d5f0:	bf00      	nop
  }
  return usb_status;
 800d5f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5f4:	4618      	mov	r0, r3
 800d5f6:	3714      	adds	r7, #20
 800d5f8:	46bd      	mov	sp, r7
 800d5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5fe:	4770      	bx	lr

0800d600 <ai_log_err>:

static ai_buffer* ai_input;
static ai_buffer* ai_output;

static void ai_log_err(const ai_error err, const char *fct)
{
 800d600:	b580      	push	{r7, lr}
 800d602:	b082      	sub	sp, #8
 800d604:	af00      	add	r7, sp, #0
 800d606:	6078      	str	r0, [r7, #4]
 800d608:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN log */
  if (fct)
 800d60a:	683b      	ldr	r3, [r7, #0]
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d009      	beq.n	800d624 <ai_log_err+0x24>
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
        err.type, err.code);
 800d610:	793b      	ldrb	r3, [r7, #4]
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 800d612:	461a      	mov	r2, r3
        err.type, err.code);
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	f3c3 2317 	ubfx	r3, r3, #8, #24
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 800d61a:	6839      	ldr	r1, [r7, #0]
 800d61c:	4806      	ldr	r0, [pc, #24]	; (800d638 <ai_log_err+0x38>)
 800d61e:	f002 febd 	bl	801039c <iprintf>
 800d622:	e008      	b.n	800d636 <ai_log_err+0x36>
  else
    printf("TEMPLATE - Error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
 800d624:	793b      	ldrb	r3, [r7, #4]
 800d626:	4619      	mov	r1, r3
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	f3c3 2317 	ubfx	r3, r3, #8, #24
 800d62e:	461a      	mov	r2, r3
 800d630:	4802      	ldr	r0, [pc, #8]	; (800d63c <ai_log_err+0x3c>)
 800d632:	f002 feb3 	bl	801039c <iprintf>

  do {} while (1);
 800d636:	e7fe      	b.n	800d636 <ai_log_err+0x36>
 800d638:	08011664 	.word	0x08011664
 800d63c:	08011698 	.word	0x08011698

0800d640 <ai_boostrap>:
  /* USER CODE END log */
}

static int ai_boostrap(ai_handle *act_addr)
{
 800d640:	b580      	push	{r7, lr}
 800d642:	b086      	sub	sp, #24
 800d644:	af00      	add	r7, sp, #0
 800d646:	6078      	str	r0, [r7, #4]
  ai_error err;

  /* Create and initialize an instance of the model */
  err = ai_randomforest_create_and_init(&randomforest, act_addr, NULL);
 800d648:	2200      	movs	r2, #0
 800d64a:	6879      	ldr	r1, [r7, #4]
 800d64c:	4828      	ldr	r0, [pc, #160]	; (800d6f0 <ai_boostrap+0xb0>)
 800d64e:	f000 fb0b 	bl	800dc68 <ai_randomforest_create_and_init>
 800d652:	4603      	mov	r3, r0
 800d654:	60fb      	str	r3, [r7, #12]
  if (err.type != AI_ERROR_NONE) {
 800d656:	7b3b      	ldrb	r3, [r7, #12]
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d006      	beq.n	800d66a <ai_boostrap+0x2a>
    ai_log_err(err, "ai_randomforest_create_and_init");
 800d65c:	4925      	ldr	r1, [pc, #148]	; (800d6f4 <ai_boostrap+0xb4>)
 800d65e:	68f8      	ldr	r0, [r7, #12]
 800d660:	f7ff ffce 	bl	800d600 <ai_log_err>
    return -1;
 800d664:	f04f 33ff 	mov.w	r3, #4294967295
 800d668:	e03e      	b.n	800d6e8 <ai_boostrap+0xa8>
  }

  ai_input = ai_randomforest_inputs_get(randomforest, NULL);
 800d66a:	4b21      	ldr	r3, [pc, #132]	; (800d6f0 <ai_boostrap+0xb0>)
 800d66c:	681b      	ldr	r3, [r3, #0]
 800d66e:	2100      	movs	r1, #0
 800d670:	4618      	mov	r0, r3
 800d672:	f000 fb6d 	bl	800dd50 <ai_randomforest_inputs_get>
 800d676:	4603      	mov	r3, r0
 800d678:	4a1f      	ldr	r2, [pc, #124]	; (800d6f8 <ai_boostrap+0xb8>)
 800d67a:	6013      	str	r3, [r2, #0]
  ai_output = ai_randomforest_outputs_get(randomforest, NULL);
 800d67c:	4b1c      	ldr	r3, [pc, #112]	; (800d6f0 <ai_boostrap+0xb0>)
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	2100      	movs	r1, #0
 800d682:	4618      	mov	r0, r3
 800d684:	f000 fb7e 	bl	800dd84 <ai_randomforest_outputs_get>
 800d688:	4603      	mov	r3, r0
 800d68a:	4a1c      	ldr	r2, [pc, #112]	; (800d6fc <ai_boostrap+0xbc>)
 800d68c:	6013      	str	r3, [r2, #0]

#if defined(AI_RANDOMFOREST_INPUTS_IN_ACTIVATIONS)
  /*  In the case where "--allocate-inputs" option is used, memory buffer can be
   *  used from the activations buffer. This is not mandatory.
   */
  for (int idx=0; idx < AI_RANDOMFOREST_IN_NUM; idx++) {
 800d68e:	2300      	movs	r3, #0
 800d690:	617b      	str	r3, [r7, #20]
 800d692:	e00f      	b.n	800d6b4 <ai_boostrap+0x74>
	data_ins[idx] = ai_input[idx].data;
 800d694:	4b18      	ldr	r3, [pc, #96]	; (800d6f8 <ai_boostrap+0xb8>)
 800d696:	6819      	ldr	r1, [r3, #0]
 800d698:	697a      	ldr	r2, [r7, #20]
 800d69a:	4613      	mov	r3, r2
 800d69c:	00db      	lsls	r3, r3, #3
 800d69e:	1a9b      	subs	r3, r3, r2
 800d6a0:	009b      	lsls	r3, r3, #2
 800d6a2:	440b      	add	r3, r1
 800d6a4:	685a      	ldr	r2, [r3, #4]
 800d6a6:	4916      	ldr	r1, [pc, #88]	; (800d700 <ai_boostrap+0xc0>)
 800d6a8:	697b      	ldr	r3, [r7, #20]
 800d6aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (int idx=0; idx < AI_RANDOMFOREST_IN_NUM; idx++) {
 800d6ae:	697b      	ldr	r3, [r7, #20]
 800d6b0:	3301      	adds	r3, #1
 800d6b2:	617b      	str	r3, [r7, #20]
 800d6b4:	697b      	ldr	r3, [r7, #20]
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	ddec      	ble.n	800d694 <ai_boostrap+0x54>

#if defined(AI_RANDOMFOREST_OUTPUTS_IN_ACTIVATIONS)
  /*  In the case where "--allocate-outputs" option is used, memory buffer can be
   *  used from the activations buffer. This is no mandatory.
   */
  for (int idx=0; idx < AI_RANDOMFOREST_OUT_NUM; idx++) {
 800d6ba:	2300      	movs	r3, #0
 800d6bc:	613b      	str	r3, [r7, #16]
 800d6be:	e00f      	b.n	800d6e0 <ai_boostrap+0xa0>
	data_outs[idx] = ai_output[idx].data;
 800d6c0:	4b0e      	ldr	r3, [pc, #56]	; (800d6fc <ai_boostrap+0xbc>)
 800d6c2:	6819      	ldr	r1, [r3, #0]
 800d6c4:	693a      	ldr	r2, [r7, #16]
 800d6c6:	4613      	mov	r3, r2
 800d6c8:	00db      	lsls	r3, r3, #3
 800d6ca:	1a9b      	subs	r3, r3, r2
 800d6cc:	009b      	lsls	r3, r3, #2
 800d6ce:	440b      	add	r3, r1
 800d6d0:	685a      	ldr	r2, [r3, #4]
 800d6d2:	490c      	ldr	r1, [pc, #48]	; (800d704 <ai_boostrap+0xc4>)
 800d6d4:	693b      	ldr	r3, [r7, #16]
 800d6d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (int idx=0; idx < AI_RANDOMFOREST_OUT_NUM; idx++) {
 800d6da:	693b      	ldr	r3, [r7, #16]
 800d6dc:	3301      	adds	r3, #1
 800d6de:	613b      	str	r3, [r7, #16]
 800d6e0:	693b      	ldr	r3, [r7, #16]
 800d6e2:	2b01      	cmp	r3, #1
 800d6e4:	ddec      	ble.n	800d6c0 <ai_boostrap+0x80>
  for (int idx=0; idx < AI_RANDOMFOREST_OUT_NUM; idx++) {
	ai_output[idx].data = data_outs[idx];
  }
#endif

  return 0;
 800d6e6:	2300      	movs	r3, #0
}
 800d6e8:	4618      	mov	r0, r3
 800d6ea:	3718      	adds	r7, #24
 800d6ec:	46bd      	mov	sp, r7
 800d6ee:	bd80      	pop	{r7, pc}
 800d6f0:	24002a48 	.word	0x24002a48
 800d6f4:	080116c8 	.word	0x080116c8
 800d6f8:	24002a4c 	.word	0x24002a4c
 800d6fc:	24002a50 	.word	0x24002a50
 800d700:	24002a0c 	.word	0x24002a0c
 800d704:	24002a10 	.word	0x24002a10

0800d708 <ai_run>:

static int ai_run(void)
{
 800d708:	b580      	push	{r7, lr}
 800d70a:	b082      	sub	sp, #8
 800d70c:	af00      	add	r7, sp, #0
  ai_i32 batch;

  batch = ai_randomforest_run(randomforest, ai_input, ai_output);
 800d70e:	4b0f      	ldr	r3, [pc, #60]	; (800d74c <ai_run+0x44>)
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	4a0f      	ldr	r2, [pc, #60]	; (800d750 <ai_run+0x48>)
 800d714:	6811      	ldr	r1, [r2, #0]
 800d716:	4a0f      	ldr	r2, [pc, #60]	; (800d754 <ai_run+0x4c>)
 800d718:	6812      	ldr	r2, [r2, #0]
 800d71a:	4618      	mov	r0, r3
 800d71c:	f000 fb88 	bl	800de30 <ai_randomforest_run>
 800d720:	6078      	str	r0, [r7, #4]
  if (batch != 1) {
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	2b01      	cmp	r3, #1
 800d726:	d00c      	beq.n	800d742 <ai_run+0x3a>
    ai_log_err(ai_randomforest_get_error(randomforest),
 800d728:	4b08      	ldr	r3, [pc, #32]	; (800d74c <ai_run+0x44>)
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	4618      	mov	r0, r3
 800d72e:	f000 fa79 	bl	800dc24 <ai_randomforest_get_error>
 800d732:	4603      	mov	r3, r0
 800d734:	4908      	ldr	r1, [pc, #32]	; (800d758 <ai_run+0x50>)
 800d736:	4618      	mov	r0, r3
 800d738:	f7ff ff62 	bl	800d600 <ai_log_err>
        "ai_randomforest_run");
    return -1;
 800d73c:	f04f 33ff 	mov.w	r3, #4294967295
 800d740:	e000      	b.n	800d744 <ai_run+0x3c>
  }

  return 0;
 800d742:	2300      	movs	r3, #0
}
 800d744:	4618      	mov	r0, r3
 800d746:	3708      	adds	r7, #8
 800d748:	46bd      	mov	sp, r7
 800d74a:	bd80      	pop	{r7, pc}
 800d74c:	24002a48 	.word	0x24002a48
 800d750:	24002a4c 	.word	0x24002a4c
 800d754:	24002a50 	.word	0x24002a50
 800d758:	080116e8 	.word	0x080116e8

0800d75c <acquire_and_process_data>:

/* USER CODE BEGIN 2 */
int acquire_and_process_data(ai_float* data[])
{
 800d75c:	b480      	push	{r7}
 800d75e:	b085      	sub	sp, #20
 800d760:	af00      	add	r7, sp, #0
 800d762:	6078      	str	r0, [r7, #4]
	if(counterOfTestData == 0) {
 800d764:	4b14      	ldr	r3, [pc, #80]	; (800d7b8 <acquire_and_process_data+0x5c>)
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d104      	bne.n	800d776 <acquire_and_process_data+0x1a>
		timestamp = htim16.Instance->CNT;
 800d76c:	4b13      	ldr	r3, [pc, #76]	; (800d7bc <acquire_and_process_data+0x60>)
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d772:	4a13      	ldr	r2, [pc, #76]	; (800d7c0 <acquire_and_process_data+0x64>)
 800d774:	6013      	str	r3, [r2, #0]
	}

	for (int idx=0; idx < AI_RANDOMFOREST_IN_NUM; idx++ ) //RF jakost
 800d776:	2300      	movs	r3, #0
 800d778:	60fb      	str	r3, [r7, #12]
 800d77a:	e00e      	b.n	800d79a <acquire_and_process_data+0x3e>
	{
	    data[idx][0] = testData[counterOfTestData];
 800d77c:	4b0e      	ldr	r3, [pc, #56]	; (800d7b8 <acquire_and_process_data+0x5c>)
 800d77e:	681a      	ldr	r2, [r3, #0]
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	009b      	lsls	r3, r3, #2
 800d784:	6879      	ldr	r1, [r7, #4]
 800d786:	440b      	add	r3, r1
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	490e      	ldr	r1, [pc, #56]	; (800d7c4 <acquire_and_process_data+0x68>)
 800d78c:	0092      	lsls	r2, r2, #2
 800d78e:	440a      	add	r2, r1
 800d790:	6812      	ldr	r2, [r2, #0]
 800d792:	601a      	str	r2, [r3, #0]
	for (int idx=0; idx < AI_RANDOMFOREST_IN_NUM; idx++ ) //RF jakost
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	3301      	adds	r3, #1
 800d798:	60fb      	str	r3, [r7, #12]
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	dded      	ble.n	800d77c <acquire_and_process_data+0x20>
	}

	counterOfTestData++;
 800d7a0:	4b05      	ldr	r3, [pc, #20]	; (800d7b8 <acquire_and_process_data+0x5c>)
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	3301      	adds	r3, #1
 800d7a6:	4a04      	ldr	r2, [pc, #16]	; (800d7b8 <acquire_and_process_data+0x5c>)
 800d7a8:	6013      	str	r3, [r2, #0]

  return 0;
 800d7aa:	2300      	movs	r3, #0
}
 800d7ac:	4618      	mov	r0, r3
 800d7ae:	3714      	adds	r7, #20
 800d7b0:	46bd      	mov	sp, r7
 800d7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7b6:	4770      	bx	lr
 800d7b8:	240029fc 	.word	0x240029fc
 800d7bc:	24000c44 	.word	0x24000c44
 800d7c0:	24002a08 	.word	0x24002a08
 800d7c4:	24000104 	.word	0x24000104

0800d7c8 <post_process>:

int post_process(ai_i8* data[])
{
 800d7c8:	b580      	push	{r7, lr}
 800d7ca:	b086      	sub	sp, #24
 800d7cc:	af02      	add	r7, sp, #8
 800d7ce:	6078      	str	r0, [r7, #4]
	if(counterOfTestData == size) {
 800d7d0:	4b29      	ldr	r3, [pc, #164]	; (800d878 <post_process+0xb0>)
 800d7d2:	681a      	ldr	r2, [r3, #0]
 800d7d4:	4b29      	ldr	r3, [pc, #164]	; (800d87c <post_process+0xb4>)
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	429a      	cmp	r2, r3
 800d7da:	d147      	bne.n	800d86c <post_process+0xa4>

		counterOfTestData = 0;
 800d7dc:	4b26      	ldr	r3, [pc, #152]	; (800d878 <post_process+0xb0>)
 800d7de:	2200      	movs	r2, #0
 800d7e0:	601a      	str	r2, [r3, #0]

		countDurations++;
 800d7e2:	4b27      	ldr	r3, [pc, #156]	; (800d880 <post_process+0xb8>)
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	3301      	adds	r3, #1
 800d7e8:	4a25      	ldr	r2, [pc, #148]	; (800d880 <post_process+0xb8>)
 800d7ea:	6013      	str	r3, [r2, #0]

		uint32_t duration = htim16.Instance->CNT;
 800d7ec:	4b25      	ldr	r3, [pc, #148]	; (800d884 <post_process+0xbc>)
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7f2:	60fb      	str	r3, [r7, #12]

		if(duration >= timestamp)
 800d7f4:	4b24      	ldr	r3, [pc, #144]	; (800d888 <post_process+0xc0>)
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	68fa      	ldr	r2, [r7, #12]
 800d7fa:	429a      	cmp	r2, r3
 800d7fc:	d305      	bcc.n	800d80a <post_process+0x42>
			duration -= timestamp;
 800d7fe:	4b22      	ldr	r3, [pc, #136]	; (800d888 <post_process+0xc0>)
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	68fa      	ldr	r2, [r7, #12]
 800d804:	1ad3      	subs	r3, r2, r3
 800d806:	60fb      	str	r3, [r7, #12]
 800d808:	e006      	b.n	800d818 <post_process+0x50>
		else
			duration += (65535 - timestamp) + 1; //+1 because of counting from 0 onwards
 800d80a:	4b1f      	ldr	r3, [pc, #124]	; (800d888 <post_process+0xc0>)
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	68fa      	ldr	r2, [r7, #12]
 800d810:	1ad3      	subs	r3, r2, r3
 800d812:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800d816:	60fb      	str	r3, [r7, #12]

		//snprintf(SendBuffer,BUFSIZE,"1 Trajanje izvajanja: %lu mikrosekund. \r\n", duration);
		//CDC_Transmit_FS(SendBuffer,strlen(SendBuffer));
		averageDurationValue += duration;
 800d818:	4b1c      	ldr	r3, [pc, #112]	; (800d88c <post_process+0xc4>)
 800d81a:	681a      	ldr	r2, [r3, #0]
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	4413      	add	r3, r2
 800d820:	4a1a      	ldr	r2, [pc, #104]	; (800d88c <post_process+0xc4>)
 800d822:	6013      	str	r3, [r2, #0]

		if(countDurations == numberOfDurations) {
 800d824:	4b16      	ldr	r3, [pc, #88]	; (800d880 <post_process+0xb8>)
 800d826:	681a      	ldr	r2, [r3, #0]
 800d828:	4b19      	ldr	r3, [pc, #100]	; (800d890 <post_process+0xc8>)
 800d82a:	681b      	ldr	r3, [r3, #0]
 800d82c:	429a      	cmp	r2, r3
 800d82e:	d11d      	bne.n	800d86c <post_process+0xa4>
			snprintf(SendBuffer,BUFSIZE,"Trajanje izvajanja: [%lu] %lu mikrosekund. \r\n", averageDurationValue, averageDurationValue / 100);
 800d830:	4b16      	ldr	r3, [pc, #88]	; (800d88c <post_process+0xc4>)
 800d832:	681a      	ldr	r2, [r3, #0]
 800d834:	4b15      	ldr	r3, [pc, #84]	; (800d88c <post_process+0xc4>)
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	4916      	ldr	r1, [pc, #88]	; (800d894 <post_process+0xcc>)
 800d83a:	fba1 1303 	umull	r1, r3, r1, r3
 800d83e:	095b      	lsrs	r3, r3, #5
 800d840:	9300      	str	r3, [sp, #0]
 800d842:	4613      	mov	r3, r2
 800d844:	4a14      	ldr	r2, [pc, #80]	; (800d898 <post_process+0xd0>)
 800d846:	f44f 7180 	mov.w	r1, #256	; 0x100
 800d84a:	4814      	ldr	r0, [pc, #80]	; (800d89c <post_process+0xd4>)
 800d84c:	f002 fe44 	bl	80104d8 <sniprintf>
			CDC_Transmit_FS(SendBuffer,strlen(SendBuffer));
 800d850:	4812      	ldr	r0, [pc, #72]	; (800d89c <post_process+0xd4>)
 800d852:	f7f2 fd45 	bl	80002e0 <strlen>
 800d856:	4603      	mov	r3, r0
 800d858:	4619      	mov	r1, r3
 800d85a:	4810      	ldr	r0, [pc, #64]	; (800d89c <post_process+0xd4>)
 800d85c:	f7ff fa50 	bl	800cd00 <CDC_Transmit_FS>

			countDurations = 0;
 800d860:	4b07      	ldr	r3, [pc, #28]	; (800d880 <post_process+0xb8>)
 800d862:	2200      	movs	r2, #0
 800d864:	601a      	str	r2, [r3, #0]
			averageDurationValue = 0;
 800d866:	4b09      	ldr	r3, [pc, #36]	; (800d88c <post_process+0xc4>)
 800d868:	2200      	movs	r2, #0
 800d86a:	601a      	str	r2, [r3, #0]
		}
	}

  return 0;
 800d86c:	2300      	movs	r3, #0
}
 800d86e:	4618      	mov	r0, r3
 800d870:	3710      	adds	r7, #16
 800d872:	46bd      	mov	sp, r7
 800d874:	bd80      	pop	{r7, pc}
 800d876:	bf00      	nop
 800d878:	240029fc 	.word	0x240029fc
 800d87c:	240003e4 	.word	0x240003e4
 800d880:	24002a04 	.word	0x24002a04
 800d884:	24000c44 	.word	0x24000c44
 800d888:	24002a08 	.word	0x24002a08
 800d88c:	24002a00 	.word	0x24002a00
 800d890:	24000100 	.word	0x24000100
 800d894:	51eb851f 	.word	0x51eb851f
 800d898:	080116fc 	.word	0x080116fc
 800d89c:	240028fc 	.word	0x240028fc

0800d8a0 <MX_X_CUBE_AI_Init>:
/* USER CODE END 2 */

/* Entry points --------------------------------------------------------------*/

void MX_X_CUBE_AI_Init(void)
{
 800d8a0:	b580      	push	{r7, lr}
 800d8a2:	b082      	sub	sp, #8
 800d8a4:	af00      	add	r7, sp, #0
    BSP_QSPI_Init_t qspiInit;
    qspiInit.InterfaceMode=MT25TL01G_QPI_MODE;
 800d8a6:	2303      	movs	r3, #3
 800d8a8:	713b      	strb	r3, [r7, #4]
    qspiInit.TransferRate= MT25TL01G_DTR_TRANSFER ;
 800d8aa:	2301      	movs	r3, #1
 800d8ac:	717b      	strb	r3, [r7, #5]
    qspiInit.DualFlashMode= MT25TL01G_DUALFLASH_ENABLE;
 800d8ae:	2340      	movs	r3, #64	; 0x40
 800d8b0:	71bb      	strb	r3, [r7, #6]
    BSP_QSPI_Init(0,&qspiInit);
 800d8b2:	1d3b      	adds	r3, r7, #4
 800d8b4:	4619      	mov	r1, r3
 800d8b6:	2000      	movs	r0, #0
 800d8b8:	f7f3 ffcc 	bl	8001854 <BSP_QSPI_Init>
    BSP_QSPI_EnableMemoryMappedMode(0);
 800d8bc:	2000      	movs	r0, #0
 800d8be:	f7f4 f8a3 	bl	8001a08 <BSP_QSPI_EnableMemoryMappedMode>
    /* USER CODE BEGIN 5 */

    HAL_TIM_Base_Start(&htim16);
 800d8c2:	4806      	ldr	r0, [pc, #24]	; (800d8dc <MX_X_CUBE_AI_Init+0x3c>)
 800d8c4:	f7fb fd34 	bl	8009330 <HAL_TIM_Base_Start>

  printf("\r\nTEMPLATE - initialization\r\n");
 800d8c8:	4805      	ldr	r0, [pc, #20]	; (800d8e0 <MX_X_CUBE_AI_Init+0x40>)
 800d8ca:	f002 fded 	bl	80104a8 <puts>

  ai_boostrap(data_activations0);
 800d8ce:	4805      	ldr	r0, [pc, #20]	; (800d8e4 <MX_X_CUBE_AI_Init+0x44>)
 800d8d0:	f7ff feb6 	bl	800d640 <ai_boostrap>
    /* USER CODE END 5 */
}
 800d8d4:	bf00      	nop
 800d8d6:	3708      	adds	r7, #8
 800d8d8:	46bd      	mov	sp, r7
 800d8da:	bd80      	pop	{r7, pc}
 800d8dc:	24000c44 	.word	0x24000c44
 800d8e0:	0801172c 	.word	0x0801172c
 800d8e4:	240003e8 	.word	0x240003e8

0800d8e8 <MX_X_CUBE_AI_Process>:

void MX_X_CUBE_AI_Process(void)
{
 800d8e8:	b580      	push	{r7, lr}
 800d8ea:	b082      	sub	sp, #8
 800d8ec:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 6 */
  int res = -1;
 800d8ee:	f04f 33ff 	mov.w	r3, #4294967295
 800d8f2:	607b      	str	r3, [r7, #4]

  printf("TEMPLATE - run - main loop\r\n");
 800d8f4:	4816      	ldr	r0, [pc, #88]	; (800d950 <MX_X_CUBE_AI_Process+0x68>)
 800d8f6:	f002 fdd7 	bl	80104a8 <puts>

  if (randomforest) {
 800d8fa:	4b16      	ldr	r3, [pc, #88]	; (800d954 <MX_X_CUBE_AI_Process+0x6c>)
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d013      	beq.n	800d92a <MX_X_CUBE_AI_Process+0x42>

    do {
      /* 1 - acquire and pre-process input data */
      res = acquire_and_process_data(data_ins);
 800d902:	4815      	ldr	r0, [pc, #84]	; (800d958 <MX_X_CUBE_AI_Process+0x70>)
 800d904:	f7ff ff2a 	bl	800d75c <acquire_and_process_data>
 800d908:	6078      	str	r0, [r7, #4]
      /* 2 - process the data - call inference engine */
      if (res == 0)
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d102      	bne.n	800d916 <MX_X_CUBE_AI_Process+0x2e>
        res = ai_run();
 800d910:	f7ff fefa 	bl	800d708 <ai_run>
 800d914:	6078      	str	r0, [r7, #4]
      /* 3- post-process the predictions */
      if (res == 0)
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d103      	bne.n	800d924 <MX_X_CUBE_AI_Process+0x3c>
        res = post_process(data_outs);
 800d91c:	480f      	ldr	r0, [pc, #60]	; (800d95c <MX_X_CUBE_AI_Process+0x74>)
 800d91e:	f7ff ff53 	bl	800d7c8 <post_process>
 800d922:	6078      	str	r0, [r7, #4]
    } while (res==0);
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	2b00      	cmp	r3, #0
 800d928:	d0eb      	beq.n	800d902 <MX_X_CUBE_AI_Process+0x1a>
  }

  if (res) {
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d00a      	beq.n	800d946 <MX_X_CUBE_AI_Process+0x5e>
    ai_error err = {AI_ERROR_INVALID_STATE, AI_ERROR_CODE_NETWORK};
 800d930:	2311      	movs	r3, #17
 800d932:	703b      	strb	r3, [r7, #0]
 800d934:	683b      	ldr	r3, [r7, #0]
 800d936:	2210      	movs	r2, #16
 800d938:	f362 231f 	bfi	r3, r2, #8, #24
 800d93c:	603b      	str	r3, [r7, #0]
    ai_log_err(err, "Process has FAILED");
 800d93e:	4908      	ldr	r1, [pc, #32]	; (800d960 <MX_X_CUBE_AI_Process+0x78>)
 800d940:	6838      	ldr	r0, [r7, #0]
 800d942:	f7ff fe5d 	bl	800d600 <ai_log_err>
  }
    /* USER CODE END 6 */
}
 800d946:	bf00      	nop
 800d948:	3708      	adds	r7, #8
 800d94a:	46bd      	mov	sp, r7
 800d94c:	bd80      	pop	{r7, pc}
 800d94e:	bf00      	nop
 800d950:	0801174c 	.word	0x0801174c
 800d954:	24002a48 	.word	0x24002a48
 800d958:	24002a0c 	.word	0x24002a0c
 800d95c:	24002a10 	.word	0x24002a10
 800d960:	08011768 	.word	0x08011768

0800d964 <randomforest_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool randomforest_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 800d964:	b580      	push	{r7, lr}
 800d966:	b082      	sub	sp, #8
 800d968:	af00      	add	r7, sp, #0
 800d96a:	6078      	str	r0, [r7, #4]
 800d96c:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_randomforest_activations_map, 1, params)) {
 800d96e:	683a      	ldr	r2, [r7, #0]
 800d970:	2101      	movs	r1, #1
 800d972:	481c      	ldr	r0, [pc, #112]	; (800d9e4 <randomforest_configure_activations+0x80>)
 800d974:	f000 fb3e 	bl	800dff4 <ai_platform_get_activations_map>
 800d978:	4603      	mov	r3, r0
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	d027      	beq.n	800d9ce <randomforest_configure_activations+0x6a>
    /* Updating activations (byte) offsets */
    
    float_input_output_array.data = AI_PTR(g_randomforest_activations_map[0] + 20);
 800d97e:	4b19      	ldr	r3, [pc, #100]	; (800d9e4 <randomforest_configure_activations+0x80>)
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	3314      	adds	r3, #20
 800d984:	4a18      	ldr	r2, [pc, #96]	; (800d9e8 <randomforest_configure_activations+0x84>)
 800d986:	6093      	str	r3, [r2, #8]
    float_input_output_array.data_start = AI_PTR(g_randomforest_activations_map[0] + 20);
 800d988:	4b16      	ldr	r3, [pc, #88]	; (800d9e4 <randomforest_configure_activations+0x80>)
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	3314      	adds	r3, #20
 800d98e:	4a16      	ldr	r2, [pc, #88]	; (800d9e8 <randomforest_configure_activations+0x84>)
 800d990:	60d3      	str	r3, [r2, #12]
    
    label_output0_array.data = AI_PTR(g_randomforest_activations_map[0] + 24);
 800d992:	4b14      	ldr	r3, [pc, #80]	; (800d9e4 <randomforest_configure_activations+0x80>)
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	3318      	adds	r3, #24
 800d998:	4a14      	ldr	r2, [pc, #80]	; (800d9ec <randomforest_configure_activations+0x88>)
 800d99a:	6093      	str	r3, [r2, #8]
    label_output0_array.data_start = AI_PTR(g_randomforest_activations_map[0] + 24);
 800d99c:	4b11      	ldr	r3, [pc, #68]	; (800d9e4 <randomforest_configure_activations+0x80>)
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	3318      	adds	r3, #24
 800d9a2:	4a12      	ldr	r2, [pc, #72]	; (800d9ec <randomforest_configure_activations+0x88>)
 800d9a4:	60d3      	str	r3, [r2, #12]
    
    label_output1_array.data = AI_PTR(g_randomforest_activations_map[0] + 28);
 800d9a6:	4b0f      	ldr	r3, [pc, #60]	; (800d9e4 <randomforest_configure_activations+0x80>)
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	331c      	adds	r3, #28
 800d9ac:	4a10      	ldr	r2, [pc, #64]	; (800d9f0 <randomforest_configure_activations+0x8c>)
 800d9ae:	6093      	str	r3, [r2, #8]
    label_output1_array.data_start = AI_PTR(g_randomforest_activations_map[0] + 28);
 800d9b0:	4b0c      	ldr	r3, [pc, #48]	; (800d9e4 <randomforest_configure_activations+0x80>)
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	331c      	adds	r3, #28
 800d9b6:	4a0e      	ldr	r2, [pc, #56]	; (800d9f0 <randomforest_configure_activations+0x8c>)
 800d9b8:	60d3      	str	r3, [r2, #12]
    
    output_probability_output_array.data = AI_PTR(g_randomforest_activations_map[0] + 0);
 800d9ba:	4b0a      	ldr	r3, [pc, #40]	; (800d9e4 <randomforest_configure_activations+0x80>)
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	4a0d      	ldr	r2, [pc, #52]	; (800d9f4 <randomforest_configure_activations+0x90>)
 800d9c0:	6093      	str	r3, [r2, #8]
    output_probability_output_array.data_start = AI_PTR(g_randomforest_activations_map[0] + 0);
 800d9c2:	4b08      	ldr	r3, [pc, #32]	; (800d9e4 <randomforest_configure_activations+0x80>)
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	4a0b      	ldr	r2, [pc, #44]	; (800d9f4 <randomforest_configure_activations+0x90>)
 800d9c8:	60d3      	str	r3, [r2, #12]
    
    return true;
 800d9ca:	2301      	movs	r3, #1
 800d9cc:	e005      	b.n	800d9da <randomforest_configure_activations+0x76>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 800d9ce:	2213      	movs	r2, #19
 800d9d0:	2130      	movs	r1, #48	; 0x30
 800d9d2:	6878      	ldr	r0, [r7, #4]
 800d9d4:	f000 fc8c 	bl	800e2f0 <ai_platform_network_set_error>
  return false;
 800d9d8:	2300      	movs	r3, #0
}
 800d9da:	4618      	mov	r0, r3
 800d9dc:	3708      	adds	r7, #8
 800d9de:	46bd      	mov	sp, r7
 800d9e0:	bd80      	pop	{r7, pc}
 800d9e2:	bf00      	nop
 800d9e4:	24002a54 	.word	0x24002a54
 800d9e8:	240004dc 	.word	0x240004dc
 800d9ec:	240003ec 	.word	0x240003ec
 800d9f0:	240003fc 	.word	0x240003fc
 800d9f4:	2400041c 	.word	0x2400041c

0800d9f8 <randomforest_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool randomforest_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 800d9f8:	b580      	push	{r7, lr}
 800d9fa:	b082      	sub	sp, #8
 800d9fc:	af00      	add	r7, sp, #0
 800d9fe:	6078      	str	r0, [r7, #4]
 800da00:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_randomforest_weights_map, 1, params)) {
 800da02:	683a      	ldr	r2, [r7, #0]
 800da04:	2101      	movs	r1, #1
 800da06:	4879      	ldr	r0, [pc, #484]	; (800dbec <randomforest_configure_weights+0x1f4>)
 800da08:	f000 fa9c 	bl	800df44 <ai_platform_get_weights_map>
 800da0c:	4603      	mov	r3, r0
 800da0e:	2b00      	cmp	r3, #0
 800da10:	f000 80e2 	beq.w	800dbd8 <randomforest_configure_weights+0x1e0>
    /* Updating weights (byte) offsets */
    
    label_class_nodeids_array.format |= AI_FMT_FLAG_CONST;
 800da14:	4b76      	ldr	r3, [pc, #472]	; (800dbf0 <randomforest_configure_weights+0x1f8>)
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800da1c:	4a74      	ldr	r2, [pc, #464]	; (800dbf0 <randomforest_configure_weights+0x1f8>)
 800da1e:	6013      	str	r3, [r2, #0]
    label_class_nodeids_array.data = AI_PTR(g_randomforest_weights_map[0] + 0);
 800da20:	4b72      	ldr	r3, [pc, #456]	; (800dbec <randomforest_configure_weights+0x1f4>)
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	4a72      	ldr	r2, [pc, #456]	; (800dbf0 <randomforest_configure_weights+0x1f8>)
 800da26:	6093      	str	r3, [r2, #8]
    label_class_nodeids_array.data_start = AI_PTR(g_randomforest_weights_map[0] + 0);
 800da28:	4b70      	ldr	r3, [pc, #448]	; (800dbec <randomforest_configure_weights+0x1f4>)
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	4a70      	ldr	r2, [pc, #448]	; (800dbf0 <randomforest_configure_weights+0x1f8>)
 800da2e:	60d3      	str	r3, [r2, #12]
    
    label_branch_mode_array.format |= AI_FMT_FLAG_CONST;
 800da30:	4b70      	ldr	r3, [pc, #448]	; (800dbf4 <randomforest_configure_weights+0x1fc>)
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800da38:	4a6e      	ldr	r2, [pc, #440]	; (800dbf4 <randomforest_configure_weights+0x1fc>)
 800da3a:	6013      	str	r3, [r2, #0]
    label_branch_mode_array.data = AI_PTR(g_randomforest_weights_map[0] + 180);
 800da3c:	4b6b      	ldr	r3, [pc, #428]	; (800dbec <randomforest_configure_weights+0x1f4>)
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	33b4      	adds	r3, #180	; 0xb4
 800da42:	4a6c      	ldr	r2, [pc, #432]	; (800dbf4 <randomforest_configure_weights+0x1fc>)
 800da44:	6093      	str	r3, [r2, #8]
    label_branch_mode_array.data_start = AI_PTR(g_randomforest_weights_map[0] + 180);
 800da46:	4b69      	ldr	r3, [pc, #420]	; (800dbec <randomforest_configure_weights+0x1f4>)
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	33b4      	adds	r3, #180	; 0xb4
 800da4c:	4a69      	ldr	r2, [pc, #420]	; (800dbf4 <randomforest_configure_weights+0x1fc>)
 800da4e:	60d3      	str	r3, [r2, #12]
    
    label_nb_class_by_estimator_array.format |= AI_FMT_FLAG_CONST;
 800da50:	4b69      	ldr	r3, [pc, #420]	; (800dbf8 <randomforest_configure_weights+0x200>)
 800da52:	681b      	ldr	r3, [r3, #0]
 800da54:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800da58:	4a67      	ldr	r2, [pc, #412]	; (800dbf8 <randomforest_configure_weights+0x200>)
 800da5a:	6013      	str	r3, [r2, #0]
    label_nb_class_by_estimator_array.data = AI_PTR(g_randomforest_weights_map[0] + 188);
 800da5c:	4b63      	ldr	r3, [pc, #396]	; (800dbec <randomforest_configure_weights+0x1f4>)
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	33bc      	adds	r3, #188	; 0xbc
 800da62:	4a65      	ldr	r2, [pc, #404]	; (800dbf8 <randomforest_configure_weights+0x200>)
 800da64:	6093      	str	r3, [r2, #8]
    label_nb_class_by_estimator_array.data_start = AI_PTR(g_randomforest_weights_map[0] + 188);
 800da66:	4b61      	ldr	r3, [pc, #388]	; (800dbec <randomforest_configure_weights+0x1f4>)
 800da68:	681b      	ldr	r3, [r3, #0]
 800da6a:	33bc      	adds	r3, #188	; 0xbc
 800da6c:	4a62      	ldr	r2, [pc, #392]	; (800dbf8 <randomforest_configure_weights+0x200>)
 800da6e:	60d3      	str	r3, [r2, #12]
    
    label_nodes_featureids_array.format |= AI_FMT_FLAG_CONST;
 800da70:	4b62      	ldr	r3, [pc, #392]	; (800dbfc <randomforest_configure_weights+0x204>)
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800da78:	4a60      	ldr	r2, [pc, #384]	; (800dbfc <randomforest_configure_weights+0x204>)
 800da7a:	6013      	str	r3, [r2, #0]
    label_nodes_featureids_array.data = AI_PTR(g_randomforest_weights_map[0] + 200);
 800da7c:	4b5b      	ldr	r3, [pc, #364]	; (800dbec <randomforest_configure_weights+0x1f4>)
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	33c8      	adds	r3, #200	; 0xc8
 800da82:	4a5e      	ldr	r2, [pc, #376]	; (800dbfc <randomforest_configure_weights+0x204>)
 800da84:	6093      	str	r3, [r2, #8]
    label_nodes_featureids_array.data_start = AI_PTR(g_randomforest_weights_map[0] + 200);
 800da86:	4b59      	ldr	r3, [pc, #356]	; (800dbec <randomforest_configure_weights+0x1f4>)
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	33c8      	adds	r3, #200	; 0xc8
 800da8c:	4a5b      	ldr	r2, [pc, #364]	; (800dbfc <randomforest_configure_weights+0x204>)
 800da8e:	60d3      	str	r3, [r2, #12]
    
    label_classlabels_int64s_array.format |= AI_FMT_FLAG_CONST;
 800da90:	4b5b      	ldr	r3, [pc, #364]	; (800dc00 <randomforest_configure_weights+0x208>)
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800da98:	4a59      	ldr	r2, [pc, #356]	; (800dc00 <randomforest_configure_weights+0x208>)
 800da9a:	6013      	str	r3, [r2, #0]
    label_classlabels_int64s_array.data = AI_PTR(g_randomforest_weights_map[0] + 256);
 800da9c:	4b53      	ldr	r3, [pc, #332]	; (800dbec <randomforest_configure_weights+0x1f4>)
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800daa4:	4a56      	ldr	r2, [pc, #344]	; (800dc00 <randomforest_configure_weights+0x208>)
 800daa6:	6093      	str	r3, [r2, #8]
    label_classlabels_int64s_array.data_start = AI_PTR(g_randomforest_weights_map[0] + 256);
 800daa8:	4b50      	ldr	r3, [pc, #320]	; (800dbec <randomforest_configure_weights+0x1f4>)
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800dab0:	4a53      	ldr	r2, [pc, #332]	; (800dc00 <randomforest_configure_weights+0x208>)
 800dab2:	60d3      	str	r3, [r2, #12]
    
    label_nodes_values_array.format |= AI_FMT_FLAG_CONST;
 800dab4:	4b53      	ldr	r3, [pc, #332]	; (800dc04 <randomforest_configure_weights+0x20c>)
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800dabc:	4a51      	ldr	r2, [pc, #324]	; (800dc04 <randomforest_configure_weights+0x20c>)
 800dabe:	6013      	str	r3, [r2, #0]
    label_nodes_values_array.data = AI_PTR(g_randomforest_weights_map[0] + 268);
 800dac0:	4b4a      	ldr	r3, [pc, #296]	; (800dbec <randomforest_configure_weights+0x1f4>)
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 800dac8:	4a4e      	ldr	r2, [pc, #312]	; (800dc04 <randomforest_configure_weights+0x20c>)
 800daca:	6093      	str	r3, [r2, #8]
    label_nodes_values_array.data_start = AI_PTR(g_randomforest_weights_map[0] + 268);
 800dacc:	4b47      	ldr	r3, [pc, #284]	; (800dbec <randomforest_configure_weights+0x1f4>)
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 800dad4:	4a4b      	ldr	r2, [pc, #300]	; (800dc04 <randomforest_configure_weights+0x20c>)
 800dad6:	60d3      	str	r3, [r2, #12]
    
    label_base_values_array.format |= AI_FMT_FLAG_CONST;
 800dad8:	4b4b      	ldr	r3, [pc, #300]	; (800dc08 <randomforest_configure_weights+0x210>)
 800dada:	681b      	ldr	r3, [r3, #0]
 800dadc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800dae0:	4a49      	ldr	r2, [pc, #292]	; (800dc08 <randomforest_configure_weights+0x210>)
 800dae2:	6013      	str	r3, [r2, #0]
    label_base_values_array.data = AI_PTR(g_randomforest_weights_map[0] + 484);
 800dae4:	4b41      	ldr	r3, [pc, #260]	; (800dbec <randomforest_configure_weights+0x1f4>)
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800daec:	4a46      	ldr	r2, [pc, #280]	; (800dc08 <randomforest_configure_weights+0x210>)
 800daee:	6093      	str	r3, [r2, #8]
    label_base_values_array.data_start = AI_PTR(g_randomforest_weights_map[0] + 484);
 800daf0:	4b3e      	ldr	r3, [pc, #248]	; (800dbec <randomforest_configure_weights+0x1f4>)
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800daf8:	4a43      	ldr	r2, [pc, #268]	; (800dc08 <randomforest_configure_weights+0x210>)
 800dafa:	60d3      	str	r3, [r2, #12]
    
    label_nodes_truenodeids_array.format |= AI_FMT_FLAG_CONST;
 800dafc:	4b43      	ldr	r3, [pc, #268]	; (800dc0c <randomforest_configure_weights+0x214>)
 800dafe:	681b      	ldr	r3, [r3, #0]
 800db00:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800db04:	4a41      	ldr	r2, [pc, #260]	; (800dc0c <randomforest_configure_weights+0x214>)
 800db06:	6013      	str	r3, [r2, #0]
    label_nodes_truenodeids_array.data = AI_PTR(g_randomforest_weights_map[0] + 496);
 800db08:	4b38      	ldr	r3, [pc, #224]	; (800dbec <randomforest_configure_weights+0x1f4>)
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
 800db10:	4a3e      	ldr	r2, [pc, #248]	; (800dc0c <randomforest_configure_weights+0x214>)
 800db12:	6093      	str	r3, [r2, #8]
    label_nodes_truenodeids_array.data_start = AI_PTR(g_randomforest_weights_map[0] + 496);
 800db14:	4b35      	ldr	r3, [pc, #212]	; (800dbec <randomforest_configure_weights+0x1f4>)
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
 800db1c:	4a3b      	ldr	r2, [pc, #236]	; (800dc0c <randomforest_configure_weights+0x214>)
 800db1e:	60d3      	str	r3, [r2, #12]
    
    label_class_ids_array.format |= AI_FMT_FLAG_CONST;
 800db20:	4b3b      	ldr	r3, [pc, #236]	; (800dc10 <randomforest_configure_weights+0x218>)
 800db22:	681b      	ldr	r3, [r3, #0]
 800db24:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800db28:	4a39      	ldr	r2, [pc, #228]	; (800dc10 <randomforest_configure_weights+0x218>)
 800db2a:	6013      	str	r3, [r2, #0]
    label_class_ids_array.data = AI_PTR(g_randomforest_weights_map[0] + 604);
 800db2c:	4b2f      	ldr	r3, [pc, #188]	; (800dbec <randomforest_configure_weights+0x1f4>)
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 800db34:	4a36      	ldr	r2, [pc, #216]	; (800dc10 <randomforest_configure_weights+0x218>)
 800db36:	6093      	str	r3, [r2, #8]
    label_class_ids_array.data_start = AI_PTR(g_randomforest_weights_map[0] + 604);
 800db38:	4b2c      	ldr	r3, [pc, #176]	; (800dbec <randomforest_configure_weights+0x1f4>)
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 800db40:	4a33      	ldr	r2, [pc, #204]	; (800dc10 <randomforest_configure_weights+0x218>)
 800db42:	60d3      	str	r3, [r2, #12]
    
    output_probability_classlabels_ints_array.format |= AI_FMT_FLAG_CONST;
 800db44:	4b33      	ldr	r3, [pc, #204]	; (800dc14 <randomforest_configure_weights+0x21c>)
 800db46:	681b      	ldr	r3, [r3, #0]
 800db48:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800db4c:	4a31      	ldr	r2, [pc, #196]	; (800dc14 <randomforest_configure_weights+0x21c>)
 800db4e:	6013      	str	r3, [r2, #0]
    output_probability_classlabels_ints_array.data = AI_PTR(g_randomforest_weights_map[0] + 784);
 800db50:	4b26      	ldr	r3, [pc, #152]	; (800dbec <randomforest_configure_weights+0x1f4>)
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	f503 7344 	add.w	r3, r3, #784	; 0x310
 800db58:	4a2e      	ldr	r2, [pc, #184]	; (800dc14 <randomforest_configure_weights+0x21c>)
 800db5a:	6093      	str	r3, [r2, #8]
    output_probability_classlabels_ints_array.data_start = AI_PTR(g_randomforest_weights_map[0] + 784);
 800db5c:	4b23      	ldr	r3, [pc, #140]	; (800dbec <randomforest_configure_weights+0x1f4>)
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	f503 7344 	add.w	r3, r3, #784	; 0x310
 800db64:	4a2b      	ldr	r2, [pc, #172]	; (800dc14 <randomforest_configure_weights+0x21c>)
 800db66:	60d3      	str	r3, [r2, #12]
    
    label_nodes_falsenodeids_array.format |= AI_FMT_FLAG_CONST;
 800db68:	4b2b      	ldr	r3, [pc, #172]	; (800dc18 <randomforest_configure_weights+0x220>)
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800db70:	4a29      	ldr	r2, [pc, #164]	; (800dc18 <randomforest_configure_weights+0x220>)
 800db72:	6013      	str	r3, [r2, #0]
    label_nodes_falsenodeids_array.data = AI_PTR(g_randomforest_weights_map[0] + 788);
 800db74:	4b1d      	ldr	r3, [pc, #116]	; (800dbec <randomforest_configure_weights+0x1f4>)
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	f503 7345 	add.w	r3, r3, #788	; 0x314
 800db7c:	4a26      	ldr	r2, [pc, #152]	; (800dc18 <randomforest_configure_weights+0x220>)
 800db7e:	6093      	str	r3, [r2, #8]
    label_nodes_falsenodeids_array.data_start = AI_PTR(g_randomforest_weights_map[0] + 788);
 800db80:	4b1a      	ldr	r3, [pc, #104]	; (800dbec <randomforest_configure_weights+0x1f4>)
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	f503 7345 	add.w	r3, r3, #788	; 0x314
 800db88:	4a23      	ldr	r2, [pc, #140]	; (800dc18 <randomforest_configure_weights+0x220>)
 800db8a:	60d3      	str	r3, [r2, #12]
    
    label_class_weights_array.format |= AI_FMT_FLAG_CONST;
 800db8c:	4b23      	ldr	r3, [pc, #140]	; (800dc1c <randomforest_configure_weights+0x224>)
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800db94:	4a21      	ldr	r2, [pc, #132]	; (800dc1c <randomforest_configure_weights+0x224>)
 800db96:	6013      	str	r3, [r2, #0]
    label_class_weights_array.data = AI_PTR(g_randomforest_weights_map[0] + 896);
 800db98:	4b14      	ldr	r3, [pc, #80]	; (800dbec <randomforest_configure_weights+0x1f4>)
 800db9a:	681b      	ldr	r3, [r3, #0]
 800db9c:	f503 7360 	add.w	r3, r3, #896	; 0x380
 800dba0:	4a1e      	ldr	r2, [pc, #120]	; (800dc1c <randomforest_configure_weights+0x224>)
 800dba2:	6093      	str	r3, [r2, #8]
    label_class_weights_array.data_start = AI_PTR(g_randomforest_weights_map[0] + 896);
 800dba4:	4b11      	ldr	r3, [pc, #68]	; (800dbec <randomforest_configure_weights+0x1f4>)
 800dba6:	681b      	ldr	r3, [r3, #0]
 800dba8:	f503 7360 	add.w	r3, r3, #896	; 0x380
 800dbac:	4a1b      	ldr	r2, [pc, #108]	; (800dc1c <randomforest_configure_weights+0x224>)
 800dbae:	60d3      	str	r3, [r2, #12]
    
    label_nb_node_by_estimator_array.format |= AI_FMT_FLAG_CONST;
 800dbb0:	4b1b      	ldr	r3, [pc, #108]	; (800dc20 <randomforest_configure_weights+0x228>)
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800dbb8:	4a19      	ldr	r2, [pc, #100]	; (800dc20 <randomforest_configure_weights+0x228>)
 800dbba:	6013      	str	r3, [r2, #0]
    label_nb_node_by_estimator_array.data = AI_PTR(g_randomforest_weights_map[0] + 1256);
 800dbbc:	4b0b      	ldr	r3, [pc, #44]	; (800dbec <randomforest_configure_weights+0x1f4>)
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	f503 639d 	add.w	r3, r3, #1256	; 0x4e8
 800dbc4:	4a16      	ldr	r2, [pc, #88]	; (800dc20 <randomforest_configure_weights+0x228>)
 800dbc6:	6093      	str	r3, [r2, #8]
    label_nb_node_by_estimator_array.data_start = AI_PTR(g_randomforest_weights_map[0] + 1256);
 800dbc8:	4b08      	ldr	r3, [pc, #32]	; (800dbec <randomforest_configure_weights+0x1f4>)
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	f503 639d 	add.w	r3, r3, #1256	; 0x4e8
 800dbd0:	4a13      	ldr	r2, [pc, #76]	; (800dc20 <randomforest_configure_weights+0x228>)
 800dbd2:	60d3      	str	r3, [r2, #12]
    
    return true;
 800dbd4:	2301      	movs	r3, #1
 800dbd6:	e005      	b.n	800dbe4 <randomforest_configure_weights+0x1ec>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 800dbd8:	2212      	movs	r2, #18
 800dbda:	2130      	movs	r1, #48	; 0x30
 800dbdc:	6878      	ldr	r0, [r7, #4]
 800dbde:	f000 fb87 	bl	800e2f0 <ai_platform_network_set_error>
  return false;
 800dbe2:	2300      	movs	r3, #0
}
 800dbe4:	4618      	mov	r0, r3
 800dbe6:	3708      	adds	r7, #8
 800dbe8:	46bd      	mov	sp, r7
 800dbea:	bd80      	pop	{r7, pc}
 800dbec:	24002a58 	.word	0x24002a58
 800dbf0:	2400040c 	.word	0x2400040c
 800dbf4:	2400042c 	.word	0x2400042c
 800dbf8:	2400043c 	.word	0x2400043c
 800dbfc:	2400044c 	.word	0x2400044c
 800dc00:	2400045c 	.word	0x2400045c
 800dc04:	2400046c 	.word	0x2400046c
 800dc08:	2400047c 	.word	0x2400047c
 800dc0c:	2400048c 	.word	0x2400048c
 800dc10:	2400049c 	.word	0x2400049c
 800dc14:	240004ac 	.word	0x240004ac
 800dc18:	240004bc 	.word	0x240004bc
 800dc1c:	240004cc 	.word	0x240004cc
 800dc20:	240004ec 	.word	0x240004ec

0800dc24 <ai_randomforest_get_error>:
  return false;
}

AI_API_ENTRY
ai_error ai_randomforest_get_error(ai_handle network)
{
 800dc24:	b580      	push	{r7, lr}
 800dc26:	b082      	sub	sp, #8
 800dc28:	af00      	add	r7, sp, #0
 800dc2a:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 800dc2c:	6878      	ldr	r0, [r7, #4]
 800dc2e:	f000 fa53 	bl	800e0d8 <ai_platform_network_get_error>
 800dc32:	4603      	mov	r3, r0
}
 800dc34:	4618      	mov	r0, r3
 800dc36:	3708      	adds	r7, #8
 800dc38:	46bd      	mov	sp, r7
 800dc3a:	bd80      	pop	{r7, pc}

0800dc3c <ai_randomforest_create>:

AI_API_ENTRY
ai_error ai_randomforest_create(
  ai_handle* network, const ai_buffer* network_config)
{
 800dc3c:	b580      	push	{r7, lr}
 800dc3e:	b084      	sub	sp, #16
 800dc40:	af02      	add	r7, sp, #8
 800dc42:	6078      	str	r0, [r7, #4]
 800dc44:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 800dc46:	2300      	movs	r3, #0
 800dc48:	9301      	str	r3, [sp, #4]
 800dc4a:	2305      	movs	r3, #5
 800dc4c:	9300      	str	r3, [sp, #0]
 800dc4e:	2301      	movs	r3, #1
 800dc50:	4a04      	ldr	r2, [pc, #16]	; (800dc64 <ai_randomforest_create+0x28>)
 800dc52:	6839      	ldr	r1, [r7, #0]
 800dc54:	6878      	ldr	r0, [r7, #4]
 800dc56:	f000 fe65 	bl	800e924 <ai_platform_network_create>
 800dc5a:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 800dc5c:	4618      	mov	r0, r3
 800dc5e:	3708      	adds	r7, #8
 800dc60:	46bd      	mov	sp, r7
 800dc62:	bd80      	pop	{r7, pc}
 800dc64:	24000a88 	.word	0x24000a88

0800dc68 <ai_randomforest_create_and_init>:

AI_API_ENTRY
ai_error ai_randomforest_create_and_init(
  ai_handle* network, const ai_handle activations[], const ai_handle weights[])
{
 800dc68:	b580      	push	{r7, lr}
 800dc6a:	b096      	sub	sp, #88	; 0x58
 800dc6c:	af00      	add	r7, sp, #0
 800dc6e:	60f8      	str	r0, [r7, #12]
 800dc70:	60b9      	str	r1, [r7, #8]
 800dc72:	607a      	str	r2, [r7, #4]
    ai_error err;
    ai_network_params params;

    err = ai_randomforest_create(network, AI_RANDOMFOREST_DATA_CONFIG);
 800dc74:	2100      	movs	r1, #0
 800dc76:	68f8      	ldr	r0, [r7, #12]
 800dc78:	f7ff ffe0 	bl	800dc3c <ai_randomforest_create>
 800dc7c:	4603      	mov	r3, r0
 800dc7e:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (err.type != AI_ERROR_NONE)
 800dc80:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d001      	beq.n	800dc8c <ai_randomforest_create_and_init+0x24>
        return err;
 800dc88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc8a:	e05d      	b.n	800dd48 <ai_randomforest_create_and_init+0xe0>
    if (ai_randomforest_data_params_get(&params) != true) {
 800dc8c:	f107 0314 	add.w	r3, r7, #20
 800dc90:	4618      	mov	r0, r3
 800dc92:	f000 f8dd 	bl	800de50 <ai_randomforest_data_params_get>
 800dc96:	4603      	mov	r3, r0
 800dc98:	f083 0301 	eor.w	r3, r3, #1
 800dc9c:	b2db      	uxtb	r3, r3
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d008      	beq.n	800dcb4 <ai_randomforest_create_and_init+0x4c>
        err = ai_randomforest_get_error(*network);
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	4618      	mov	r0, r3
 800dca8:	f7ff ffbc 	bl	800dc24 <ai_randomforest_get_error>
 800dcac:	4603      	mov	r3, r0
 800dcae:	64fb      	str	r3, [r7, #76]	; 0x4c
        return err;
 800dcb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dcb2:	e049      	b.n	800dd48 <ai_randomforest_create_and_init+0xe0>
    }
#if defined(AI_RANDOMFOREST_DATA_ACTIVATIONS_COUNT)
    if (activations) {
 800dcb4:	68bb      	ldr	r3, [r7, #8]
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d016      	beq.n	800dce8 <ai_randomforest_create_and_init+0x80>
        /* set the addresses of the activations buffers */
        for (int idx=0;idx<params.map_activations.size;idx++)
 800dcba:	2300      	movs	r3, #0
 800dcbc:	657b      	str	r3, [r7, #84]	; 0x54
 800dcbe:	e00e      	b.n	800dcde <ai_randomforest_create_and_init+0x76>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 800dcc0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800dcc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dcc4:	009b      	lsls	r3, r3, #2
 800dcc6:	68ba      	ldr	r2, [r7, #8]
 800dcc8:	4413      	add	r3, r2
 800dcca:	681a      	ldr	r2, [r3, #0]
 800dccc:	f107 0314 	add.w	r3, r7, #20
 800dcd0:	330c      	adds	r3, #12
 800dcd2:	4618      	mov	r0, r3
 800dcd4:	f000 f922 	bl	800df1c <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_activations.size;idx++)
 800dcd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dcda:	3301      	adds	r3, #1
 800dcdc:	657b      	str	r3, [r7, #84]	; 0x54
 800dcde:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dce0:	461a      	mov	r2, r3
 800dce2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dce4:	4293      	cmp	r3, r2
 800dce6:	dbeb      	blt.n	800dcc0 <ai_randomforest_create_and_init+0x58>
    }
#endif
#if defined(AI_RANDOMFOREST_DATA_WEIGHTS_COUNT)
    if (weights) {
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d016      	beq.n	800dd1c <ai_randomforest_create_and_init+0xb4>
        /* set the addresses of the weight buffers */
        for (int idx=0;idx<params.map_weights.size;idx++)
 800dcee:	2300      	movs	r3, #0
 800dcf0:	653b      	str	r3, [r7, #80]	; 0x50
 800dcf2:	e00e      	b.n	800dd12 <ai_randomforest_create_and_init+0xaa>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 800dcf4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800dcf6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dcf8:	009b      	lsls	r3, r3, #2
 800dcfa:	687a      	ldr	r2, [r7, #4]
 800dcfc:	4413      	add	r3, r2
 800dcfe:	681a      	ldr	r2, [r3, #0]
 800dd00:	f107 0314 	add.w	r3, r7, #20
 800dd04:	3304      	adds	r3, #4
 800dd06:	4618      	mov	r0, r3
 800dd08:	f000 f908 	bl	800df1c <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_weights.size;idx++)
 800dd0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dd0e:	3301      	adds	r3, #1
 800dd10:	653b      	str	r3, [r7, #80]	; 0x50
 800dd12:	8b7b      	ldrh	r3, [r7, #26]
 800dd14:	461a      	mov	r2, r3
 800dd16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dd18:	4293      	cmp	r3, r2
 800dd1a:	dbeb      	blt.n	800dcf4 <ai_randomforest_create_and_init+0x8c>
    }
#endif
    if (ai_randomforest_init(*network, &params) != true) {
 800dd1c:	68fb      	ldr	r3, [r7, #12]
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	f107 0214 	add.w	r2, r7, #20
 800dd24:	4611      	mov	r1, r2
 800dd26:	4618      	mov	r0, r3
 800dd28:	f000 f846 	bl	800ddb8 <ai_randomforest_init>
 800dd2c:	4603      	mov	r3, r0
 800dd2e:	f083 0301 	eor.w	r3, r3, #1
 800dd32:	b2db      	uxtb	r3, r3
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d006      	beq.n	800dd46 <ai_randomforest_create_and_init+0xde>
        err = ai_randomforest_get_error(*network);
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	681b      	ldr	r3, [r3, #0]
 800dd3c:	4618      	mov	r0, r3
 800dd3e:	f7ff ff71 	bl	800dc24 <ai_randomforest_get_error>
 800dd42:	4603      	mov	r3, r0
 800dd44:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    return err;
 800dd46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 800dd48:	4618      	mov	r0, r3
 800dd4a:	3758      	adds	r7, #88	; 0x58
 800dd4c:	46bd      	mov	sp, r7
 800dd4e:	bd80      	pop	{r7, pc}

0800dd50 <ai_randomforest_inputs_get>:

AI_API_ENTRY
ai_buffer* ai_randomforest_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 800dd50:	b580      	push	{r7, lr}
 800dd52:	b082      	sub	sp, #8
 800dd54:	af00      	add	r7, sp, #0
 800dd56:	6078      	str	r0, [r7, #4]
 800dd58:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d104      	bne.n	800dd6a <ai_randomforest_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 800dd60:	4b06      	ldr	r3, [pc, #24]	; (800dd7c <ai_randomforest_inputs_get+0x2c>)
 800dd62:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	4a06      	ldr	r2, [pc, #24]	; (800dd80 <ai_randomforest_inputs_get+0x30>)
 800dd68:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 800dd6a:	6839      	ldr	r1, [r7, #0]
 800dd6c:	6878      	ldr	r0, [r7, #4]
 800dd6e:	f000 fac5 	bl	800e2fc <ai_platform_inputs_get>
 800dd72:	4603      	mov	r3, r0
}
 800dd74:	4618      	mov	r0, r3
 800dd76:	3708      	adds	r7, #8
 800dd78:	46bd      	mov	sp, r7
 800dd7a:	bd80      	pop	{r7, pc}
 800dd7c:	24000a88 	.word	0x24000a88
 800dd80:	a1c00100 	.word	0xa1c00100

0800dd84 <ai_randomforest_outputs_get>:

AI_API_ENTRY
ai_buffer* ai_randomforest_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 800dd84:	b580      	push	{r7, lr}
 800dd86:	b082      	sub	sp, #8
 800dd88:	af00      	add	r7, sp, #0
 800dd8a:	6078      	str	r0, [r7, #4]
 800dd8c:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	d104      	bne.n	800dd9e <ai_randomforest_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 800dd94:	4b06      	ldr	r3, [pc, #24]	; (800ddb0 <ai_randomforest_outputs_get+0x2c>)
 800dd96:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	4a06      	ldr	r2, [pc, #24]	; (800ddb4 <ai_randomforest_outputs_get+0x30>)
 800dd9c:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 800dd9e:	6839      	ldr	r1, [r7, #0]
 800dda0:	6878      	ldr	r0, [r7, #4]
 800dda2:	f000 fc37 	bl	800e614 <ai_platform_outputs_get>
 800dda6:	4603      	mov	r3, r0
}
 800dda8:	4618      	mov	r0, r3
 800ddaa:	3708      	adds	r7, #8
 800ddac:	46bd      	mov	sp, r7
 800ddae:	bd80      	pop	{r7, pc}
 800ddb0:	24000a88 	.word	0x24000a88
 800ddb4:	a1c00100 	.word	0xa1c00100

0800ddb8 <ai_randomforest_init>:
}

AI_API_ENTRY
ai_bool ai_randomforest_init(
  ai_handle network, const ai_network_params* params)
{
 800ddb8:	b580      	push	{r7, lr}
 800ddba:	b084      	sub	sp, #16
 800ddbc:	af00      	add	r7, sp, #0
 800ddbe:	6078      	str	r0, [r7, #4]
 800ddc0:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 800ddc2:	6839      	ldr	r1, [r7, #0]
 800ddc4:	6878      	ldr	r0, [r7, #4]
 800ddc6:	f000 ff87 	bl	800ecd8 <ai_platform_network_init>
 800ddca:	60f8      	str	r0, [r7, #12]
  if (!net_ctx) return false;
 800ddcc:	68fb      	ldr	r3, [r7, #12]
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d101      	bne.n	800ddd6 <ai_randomforest_init+0x1e>
 800ddd2:	2300      	movs	r3, #0
 800ddd4:	e028      	b.n	800de28 <ai_randomforest_init+0x70>

  ai_bool ok = true;
 800ddd6:	2301      	movs	r3, #1
 800ddd8:	72fb      	strb	r3, [r7, #11]
  ok &= randomforest_configure_weights(net_ctx, params);
 800ddda:	6839      	ldr	r1, [r7, #0]
 800dddc:	68f8      	ldr	r0, [r7, #12]
 800ddde:	f7ff fe0b 	bl	800d9f8 <randomforest_configure_weights>
 800dde2:	4603      	mov	r3, r0
 800dde4:	461a      	mov	r2, r3
 800dde6:	7afb      	ldrb	r3, [r7, #11]
 800dde8:	4013      	ands	r3, r2
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	bf14      	ite	ne
 800ddee:	2301      	movne	r3, #1
 800ddf0:	2300      	moveq	r3, #0
 800ddf2:	72fb      	strb	r3, [r7, #11]
  ok &= randomforest_configure_activations(net_ctx, params);
 800ddf4:	6839      	ldr	r1, [r7, #0]
 800ddf6:	68f8      	ldr	r0, [r7, #12]
 800ddf8:	f7ff fdb4 	bl	800d964 <randomforest_configure_activations>
 800ddfc:	4603      	mov	r3, r0
 800ddfe:	461a      	mov	r2, r3
 800de00:	7afb      	ldrb	r3, [r7, #11]
 800de02:	4013      	ands	r3, r2
 800de04:	2b00      	cmp	r3, #0
 800de06:	bf14      	ite	ne
 800de08:	2301      	movne	r3, #1
 800de0a:	2300      	moveq	r3, #0
 800de0c:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 800de0e:	6878      	ldr	r0, [r7, #4]
 800de10:	f001 f8fe 	bl	800f010 <ai_platform_network_post_init>
 800de14:	4603      	mov	r3, r0
 800de16:	461a      	mov	r2, r3
 800de18:	7afb      	ldrb	r3, [r7, #11]
 800de1a:	4013      	ands	r3, r2
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	bf14      	ite	ne
 800de20:	2301      	movne	r3, #1
 800de22:	2300      	moveq	r3, #0
 800de24:	72fb      	strb	r3, [r7, #11]

  return ok;
 800de26:	7afb      	ldrb	r3, [r7, #11]
}
 800de28:	4618      	mov	r0, r3
 800de2a:	3710      	adds	r7, #16
 800de2c:	46bd      	mov	sp, r7
 800de2e:	bd80      	pop	{r7, pc}

0800de30 <ai_randomforest_run>:


AI_API_ENTRY
ai_i32 ai_randomforest_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 800de30:	b580      	push	{r7, lr}
 800de32:	b084      	sub	sp, #16
 800de34:	af00      	add	r7, sp, #0
 800de36:	60f8      	str	r0, [r7, #12]
 800de38:	60b9      	str	r1, [r7, #8]
 800de3a:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 800de3c:	687a      	ldr	r2, [r7, #4]
 800de3e:	68b9      	ldr	r1, [r7, #8]
 800de40:	68f8      	ldr	r0, [r7, #12]
 800de42:	f001 fa0f 	bl	800f264 <ai_platform_network_process>
 800de46:	4603      	mov	r3, r0
}
 800de48:	4618      	mov	r0, r3
 800de4a:	3710      	adds	r7, #16
 800de4c:	46bd      	mov	sp, r7
 800de4e:	bd80      	pop	{r7, pc}

0800de50 <ai_randomforest_data_params_get>:
 * @ingroup randomforest_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_randomforest_data_params_get(ai_network_params* params)
{
 800de50:	b580      	push	{r7, lr}
 800de52:	b086      	sub	sp, #24
 800de54:	af00      	add	r7, sp, #0
 800de56:	6078      	str	r0, [r7, #4]
  if (!params) return false;
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d101      	bne.n	800de62 <ai_randomforest_data_params_get+0x12>
 800de5e:	2300      	movs	r3, #0
 800de60:	e016      	b.n	800de90 <ai_randomforest_data_params_get+0x40>
  
  const ai_buffer_array map_activations = 
 800de62:	4a0d      	ldr	r2, [pc, #52]	; (800de98 <ai_randomforest_data_params_get+0x48>)
 800de64:	f107 0310 	add.w	r3, r7, #16
 800de68:	e892 0003 	ldmia.w	r2, {r0, r1}
 800de6c:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_RANDOMFOREST_DATA_ACTIVATIONS_COUNT, g_randomforest_data_map_activations);
  
  const ai_buffer_array map_weights = 
 800de70:	4a0a      	ldr	r2, [pc, #40]	; (800de9c <ai_randomforest_data_params_get+0x4c>)
 800de72:	f107 0308 	add.w	r3, r7, #8
 800de76:	e892 0003 	ldmia.w	r2, {r0, r1}
 800de7a:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_RANDOMFOREST_DATA_WEIGHTS_COUNT, g_randomforest_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 800de7e:	f107 0210 	add.w	r2, r7, #16
 800de82:	f107 0308 	add.w	r3, r7, #8
 800de86:	4619      	mov	r1, r3
 800de88:	6878      	ldr	r0, [r7, #4]
 800de8a:	f000 f90b 	bl	800e0a4 <ai_platform_bind_network_params>
 800de8e:	4603      	mov	r3, r0
}
 800de90:	4618      	mov	r0, r3
 800de92:	3718      	adds	r7, #24
 800de94:	46bd      	mov	sp, r7
 800de96:	bd80      	pop	{r7, pc}
 800de98:	0801179c 	.word	0x0801179c
 800de9c:	080117a4 	.word	0x080117a4

0800dea0 <ai_buffer_get_size>:
 800dea0:	b368      	cbz	r0, 800defe <ai_buffer_get_size+0x5e>
 800dea2:	4b17      	ldr	r3, [pc, #92]	; (800df00 <ai_buffer_get_size+0x60>)
 800dea4:	4a17      	ldr	r2, [pc, #92]	; (800df04 <ai_buffer_get_size+0x64>)
 800dea6:	b410      	push	{r4}
 800dea8:	6804      	ldr	r4, [r0, #0]
 800deaa:	4023      	ands	r3, r4
 800deac:	4293      	cmp	r3, r2
 800deae:	d123      	bne.n	800def8 <ai_buffer_get_size+0x58>
 800deb0:	b311      	cbz	r1, 800def8 <ai_buffer_get_size+0x58>
 800deb2:	6984      	ldr	r4, [r0, #24]
 800deb4:	6862      	ldr	r2, [r4, #4]
 800deb6:	321f      	adds	r2, #31
 800deb8:	f022 021f 	bic.w	r2, r2, #31
 800debc:	7d03      	ldrb	r3, [r0, #20]
 800debe:	6941      	ldr	r1, [r0, #20]
 800dec0:	f1a3 0301 	sub.w	r3, r3, #1
 800dec4:	f3c1 2017 	ubfx	r0, r1, #8, #24
 800dec8:	fab3 f383 	clz	r3, r3
 800decc:	095b      	lsrs	r3, r3, #5
 800dece:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 800ded2:	da0c      	bge.n	800deee <ai_buffer_get_size+0x4e>
 800ded4:	2b01      	cmp	r3, #1
 800ded6:	d103      	bne.n	800dee0 <ai_buffer_get_size+0x40>
 800ded8:	2802      	cmp	r0, #2
 800deda:	f04f 0302 	mov.w	r3, #2
 800dede:	d006      	beq.n	800deee <ai_buffer_get_size+0x4e>
 800dee0:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 800dee4:	3301      	adds	r3, #1
 800dee6:	4298      	cmp	r0, r3
 800dee8:	fb01 f202 	mul.w	r2, r1, r2
 800deec:	d1f2      	bne.n	800ded4 <ai_buffer_get_size+0x34>
 800deee:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 800def2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800def6:	4770      	bx	lr
 800def8:	6984      	ldr	r4, [r0, #24]
 800defa:	6862      	ldr	r2, [r4, #4]
 800defc:	e7de      	b.n	800debc <ai_buffer_get_size+0x1c>
 800defe:	4770      	bx	lr
 800df00:	017fffff 	.word	0x017fffff
 800df04:	000400c0 	.word	0x000400c0

0800df08 <ai_buffer_array_sane>:
 800df08:	b138      	cbz	r0, 800df1a <ai_buffer_array_sane+0x12>
 800df0a:	6843      	ldr	r3, [r0, #4]
 800df0c:	b123      	cbz	r3, 800df18 <ai_buffer_array_sane+0x10>
 800df0e:	8840      	ldrh	r0, [r0, #2]
 800df10:	3800      	subs	r0, #0
 800df12:	bf18      	it	ne
 800df14:	2001      	movne	r0, #1
 800df16:	4770      	bx	lr
 800df18:	4618      	mov	r0, r3
 800df1a:	4770      	bx	lr

0800df1c <ai_buffer_array_item_set_address>:
 800df1c:	b150      	cbz	r0, 800df34 <ai_buffer_array_item_set_address+0x18>
 800df1e:	6843      	ldr	r3, [r0, #4]
 800df20:	b14b      	cbz	r3, 800df36 <ai_buffer_array_item_set_address+0x1a>
 800df22:	8840      	ldrh	r0, [r0, #2]
 800df24:	b900      	cbnz	r0, 800df28 <ai_buffer_array_item_set_address+0xc>
 800df26:	4770      	bx	lr
 800df28:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800df2c:	2001      	movs	r0, #1
 800df2e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800df32:	604a      	str	r2, [r1, #4]
 800df34:	4770      	bx	lr
 800df36:	4618      	mov	r0, r3
 800df38:	4770      	bx	lr
 800df3a:	bf00      	nop

0800df3c <_ai_platform_acquire_crc>:
 800df3c:	2001      	movs	r0, #1
 800df3e:	4770      	bx	lr

0800df40 <_ai_platform_release_crc>:
 800df40:	4770      	bx	lr
 800df42:	bf00      	nop

0800df44 <ai_platform_get_weights_map>:
 800df44:	2900      	cmp	r1, #0
 800df46:	bf18      	it	ne
 800df48:	2800      	cmpne	r0, #0
 800df4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df4c:	bf0c      	ite	eq
 800df4e:	2401      	moveq	r4, #1
 800df50:	2400      	movne	r4, #0
 800df52:	2a00      	cmp	r2, #0
 800df54:	bf08      	it	eq
 800df56:	f044 0401 	orreq.w	r4, r4, #1
 800df5a:	b114      	cbz	r4, 800df62 <ai_platform_get_weights_map+0x1e>
 800df5c:	2400      	movs	r4, #0
 800df5e:	4620      	mov	r0, r4
 800df60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800df62:	4616      	mov	r6, r2
 800df64:	4b22      	ldr	r3, [pc, #136]	; (800dff0 <ai_platform_get_weights_map+0xac>)
 800df66:	6812      	ldr	r2, [r2, #0]
 800df68:	4605      	mov	r5, r0
 800df6a:	460f      	mov	r7, r1
 800df6c:	429a      	cmp	r2, r3
 800df6e:	d022      	beq.n	800dfb6 <ai_platform_get_weights_map+0x72>
 800df70:	6870      	ldr	r0, [r6, #4]
 800df72:	2800      	cmp	r0, #0
 800df74:	d0f2      	beq.n	800df5c <ai_platform_get_weights_map+0x18>
 800df76:	6806      	ldr	r6, [r0, #0]
 800df78:	429e      	cmp	r6, r3
 800df7a:	d006      	beq.n	800df8a <ai_platform_get_weights_map+0x46>
 800df7c:	f1a1 0401 	sub.w	r4, r1, #1
 800df80:	6028      	str	r0, [r5, #0]
 800df82:	fab4 f484 	clz	r4, r4
 800df86:	0964      	lsrs	r4, r4, #5
 800df88:	e7e9      	b.n	800df5e <ai_platform_get_weights_map+0x1a>
 800df8a:	3d04      	subs	r5, #4
 800df8c:	4602      	mov	r2, r0
 800df8e:	4621      	mov	r1, r4
 800df90:	e000      	b.n	800df94 <ai_platform_get_weights_map+0x50>
 800df92:	4619      	mov	r1, r3
 800df94:	f852 3f04 	ldr.w	r3, [r2, #4]!
 800df98:	42b3      	cmp	r3, r6
 800df9a:	d025      	beq.n	800dfe8 <ai_platform_get_weights_map+0xa4>
 800df9c:	f845 3f04 	str.w	r3, [r5, #4]!
 800dfa0:	1c4b      	adds	r3, r1, #1
 800dfa2:	429f      	cmp	r7, r3
 800dfa4:	d8f5      	bhi.n	800df92 <ai_platform_get_weights_map+0x4e>
 800dfa6:	d1da      	bne.n	800df5e <ai_platform_get_weights_map+0x1a>
 800dfa8:	3102      	adds	r1, #2
 800dfaa:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 800dfae:	42b3      	cmp	r3, r6
 800dfb0:	d1d5      	bne.n	800df5e <ai_platform_get_weights_map+0x1a>
 800dfb2:	2401      	movs	r4, #1
 800dfb4:	e7d3      	b.n	800df5e <ai_platform_get_weights_map+0x1a>
 800dfb6:	1d30      	adds	r0, r6, #4
 800dfb8:	f7ff ffa6 	bl	800df08 <ai_buffer_array_sane>
 800dfbc:	2800      	cmp	r0, #0
 800dfbe:	d0cd      	beq.n	800df5c <ai_platform_get_weights_map+0x18>
 800dfc0:	88f3      	ldrh	r3, [r6, #6]
 800dfc2:	429f      	cmp	r7, r3
 800dfc4:	d1ca      	bne.n	800df5c <ai_platform_get_weights_map+0x18>
 800dfc6:	3d04      	subs	r5, #4
 800dfc8:	4622      	mov	r2, r4
 800dfca:	68b3      	ldr	r3, [r6, #8]
 800dfcc:	4423      	add	r3, r4
 800dfce:	341c      	adds	r4, #28
 800dfd0:	685b      	ldr	r3, [r3, #4]
 800dfd2:	b123      	cbz	r3, 800dfde <ai_platform_get_weights_map+0x9a>
 800dfd4:	3201      	adds	r2, #1
 800dfd6:	f845 3f04 	str.w	r3, [r5, #4]!
 800dfda:	4297      	cmp	r7, r2
 800dfdc:	d8f5      	bhi.n	800dfca <ai_platform_get_weights_map+0x86>
 800dfde:	1abc      	subs	r4, r7, r2
 800dfe0:	fab4 f484 	clz	r4, r4
 800dfe4:	0964      	lsrs	r4, r4, #5
 800dfe6:	e7ba      	b.n	800df5e <ai_platform_get_weights_map+0x1a>
 800dfe8:	428f      	cmp	r7, r1
 800dfea:	d1b8      	bne.n	800df5e <ai_platform_get_weights_map+0x1a>
 800dfec:	e7e1      	b.n	800dfb2 <ai_platform_get_weights_map+0x6e>
 800dfee:	bf00      	nop
 800dff0:	a1facade 	.word	0xa1facade

0800dff4 <ai_platform_get_activations_map>:
 800dff4:	2900      	cmp	r1, #0
 800dff6:	bf18      	it	ne
 800dff8:	2800      	cmpne	r0, #0
 800dffa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dffc:	bf0c      	ite	eq
 800dffe:	2401      	moveq	r4, #1
 800e000:	2400      	movne	r4, #0
 800e002:	2a00      	cmp	r2, #0
 800e004:	bf08      	it	eq
 800e006:	f044 0401 	orreq.w	r4, r4, #1
 800e00a:	b114      	cbz	r4, 800e012 <ai_platform_get_activations_map+0x1e>
 800e00c:	2400      	movs	r4, #0
 800e00e:	4620      	mov	r0, r4
 800e010:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e012:	4616      	mov	r6, r2
 800e014:	4b22      	ldr	r3, [pc, #136]	; (800e0a0 <ai_platform_get_activations_map+0xac>)
 800e016:	6812      	ldr	r2, [r2, #0]
 800e018:	4605      	mov	r5, r0
 800e01a:	460f      	mov	r7, r1
 800e01c:	429a      	cmp	r2, r3
 800e01e:	d022      	beq.n	800e066 <ai_platform_get_activations_map+0x72>
 800e020:	6a30      	ldr	r0, [r6, #32]
 800e022:	2800      	cmp	r0, #0
 800e024:	d0f2      	beq.n	800e00c <ai_platform_get_activations_map+0x18>
 800e026:	6806      	ldr	r6, [r0, #0]
 800e028:	429e      	cmp	r6, r3
 800e02a:	d006      	beq.n	800e03a <ai_platform_get_activations_map+0x46>
 800e02c:	f1a1 0401 	sub.w	r4, r1, #1
 800e030:	6028      	str	r0, [r5, #0]
 800e032:	fab4 f484 	clz	r4, r4
 800e036:	0964      	lsrs	r4, r4, #5
 800e038:	e7e9      	b.n	800e00e <ai_platform_get_activations_map+0x1a>
 800e03a:	3d04      	subs	r5, #4
 800e03c:	4602      	mov	r2, r0
 800e03e:	4621      	mov	r1, r4
 800e040:	e000      	b.n	800e044 <ai_platform_get_activations_map+0x50>
 800e042:	4619      	mov	r1, r3
 800e044:	f852 3f04 	ldr.w	r3, [r2, #4]!
 800e048:	42b3      	cmp	r3, r6
 800e04a:	d026      	beq.n	800e09a <ai_platform_get_activations_map+0xa6>
 800e04c:	f845 3f04 	str.w	r3, [r5, #4]!
 800e050:	1c4b      	adds	r3, r1, #1
 800e052:	429f      	cmp	r7, r3
 800e054:	d8f5      	bhi.n	800e042 <ai_platform_get_activations_map+0x4e>
 800e056:	d1da      	bne.n	800e00e <ai_platform_get_activations_map+0x1a>
 800e058:	3102      	adds	r1, #2
 800e05a:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 800e05e:	42b3      	cmp	r3, r6
 800e060:	d1d5      	bne.n	800e00e <ai_platform_get_activations_map+0x1a>
 800e062:	2401      	movs	r4, #1
 800e064:	e7d3      	b.n	800e00e <ai_platform_get_activations_map+0x1a>
 800e066:	f106 000c 	add.w	r0, r6, #12
 800e06a:	f7ff ff4d 	bl	800df08 <ai_buffer_array_sane>
 800e06e:	2800      	cmp	r0, #0
 800e070:	d0cc      	beq.n	800e00c <ai_platform_get_activations_map+0x18>
 800e072:	89f3      	ldrh	r3, [r6, #14]
 800e074:	429f      	cmp	r7, r3
 800e076:	d1c9      	bne.n	800e00c <ai_platform_get_activations_map+0x18>
 800e078:	3d04      	subs	r5, #4
 800e07a:	4622      	mov	r2, r4
 800e07c:	6933      	ldr	r3, [r6, #16]
 800e07e:	4423      	add	r3, r4
 800e080:	341c      	adds	r4, #28
 800e082:	685b      	ldr	r3, [r3, #4]
 800e084:	b123      	cbz	r3, 800e090 <ai_platform_get_activations_map+0x9c>
 800e086:	3201      	adds	r2, #1
 800e088:	f845 3f04 	str.w	r3, [r5, #4]!
 800e08c:	4297      	cmp	r7, r2
 800e08e:	d8f5      	bhi.n	800e07c <ai_platform_get_activations_map+0x88>
 800e090:	1abc      	subs	r4, r7, r2
 800e092:	fab4 f484 	clz	r4, r4
 800e096:	0964      	lsrs	r4, r4, #5
 800e098:	e7b9      	b.n	800e00e <ai_platform_get_activations_map+0x1a>
 800e09a:	428f      	cmp	r7, r1
 800e09c:	d1b7      	bne.n	800e00e <ai_platform_get_activations_map+0x1a>
 800e09e:	e7e0      	b.n	800e062 <ai_platform_get_activations_map+0x6e>
 800e0a0:	a1facade 	.word	0xa1facade

0800e0a4 <ai_platform_bind_network_params>:
 800e0a4:	2a00      	cmp	r2, #0
 800e0a6:	bf18      	it	ne
 800e0a8:	2900      	cmpne	r1, #0
 800e0aa:	d010      	beq.n	800e0ce <ai_platform_bind_network_params+0x2a>
 800e0ac:	b178      	cbz	r0, 800e0ce <ai_platform_bind_network_params+0x2a>
 800e0ae:	4603      	mov	r3, r0
 800e0b0:	4808      	ldr	r0, [pc, #32]	; (800e0d4 <ai_platform_bind_network_params+0x30>)
 800e0b2:	f103 0c0c 	add.w	ip, r3, #12
 800e0b6:	f843 0b04 	str.w	r0, [r3], #4
 800e0ba:	c903      	ldmia	r1, {r0, r1}
 800e0bc:	e883 0003 	stmia.w	r3, {r0, r1}
 800e0c0:	2301      	movs	r3, #1
 800e0c2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e0c6:	e88c 0003 	stmia.w	ip, {r0, r1}
 800e0ca:	4618      	mov	r0, r3
 800e0cc:	4770      	bx	lr
 800e0ce:	2300      	movs	r3, #0
 800e0d0:	4618      	mov	r0, r3
 800e0d2:	4770      	bx	lr
 800e0d4:	a1facade 	.word	0xa1facade

0800e0d8 <ai_platform_network_get_error>:
 800e0d8:	b510      	push	{r4, lr}
 800e0da:	2800      	cmp	r0, #0
 800e0dc:	d03f      	beq.n	800e15e <ai_platform_network_get_error+0x86>
 800e0de:	4b7d      	ldr	r3, [pc, #500]	; (800e2d4 <ai_platform_network_get_error+0x1fc>)
 800e0e0:	4604      	mov	r4, r0
 800e0e2:	6802      	ldr	r2, [r0, #0]
 800e0e4:	429a      	cmp	r2, r3
 800e0e6:	d13a      	bne.n	800e15e <ai_platform_network_get_error+0x86>
 800e0e8:	f7ff ff28 	bl	800df3c <_ai_platform_acquire_crc>
 800e0ec:	4b7a      	ldr	r3, [pc, #488]	; (800e2d8 <ai_platform_network_get_error+0x200>)
 800e0ee:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800e0f2:	681b      	ldr	r3, [r3, #0]
 800e0f4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e0f8:	189a      	adds	r2, r3, r2
 800e0fa:	2a01      	cmp	r2, #1
 800e0fc:	f240 8086 	bls.w	800e20c <ai_platform_network_get_error+0x134>
 800e100:	f240 4249 	movw	r2, #1097	; 0x449
 800e104:	4293      	cmp	r3, r2
 800e106:	f000 8081 	beq.w	800e20c <ai_platform_network_get_error+0x134>
 800e10a:	4a74      	ldr	r2, [pc, #464]	; (800e2dc <ai_platform_network_get_error+0x204>)
 800e10c:	6813      	ldr	r3, [r2, #0]
 800e10e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e112:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800e116:	f000 8087 	beq.w	800e228 <ai_platform_network_get_error+0x150>
 800e11a:	6813      	ldr	r3, [r2, #0]
 800e11c:	f240 4183 	movw	r1, #1155	; 0x483
 800e120:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e124:	428b      	cmp	r3, r1
 800e126:	f000 80a9 	beq.w	800e27c <ai_platform_network_get_error+0x1a4>
 800e12a:	6813      	ldr	r3, [r2, #0]
 800e12c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e130:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800e134:	f000 80c0 	beq.w	800e2b8 <ai_platform_network_get_error+0x1e0>
 800e138:	6813      	ldr	r3, [r2, #0]
 800e13a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e13e:	2b00      	cmp	r3, #0
 800e140:	f040 8082 	bne.w	800e248 <ai_platform_network_get_error+0x170>
 800e144:	4a66      	ldr	r2, [pc, #408]	; (800e2e0 <ai_platform_network_get_error+0x208>)
 800e146:	2301      	movs	r3, #1
 800e148:	6093      	str	r3, [r2, #8]
 800e14a:	6893      	ldr	r3, [r2, #8]
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	d1fc      	bne.n	800e14a <ai_platform_network_get_error+0x72>
 800e150:	4964      	ldr	r1, [pc, #400]	; (800e2e4 <ai_platform_network_get_error+0x20c>)
 800e152:	4b65      	ldr	r3, [pc, #404]	; (800e2e8 <ai_platform_network_get_error+0x210>)
 800e154:	6011      	str	r1, [r2, #0]
 800e156:	6812      	ldr	r2, [r2, #0]
 800e158:	429a      	cmp	r2, r3
 800e15a:	d075      	beq.n	800e248 <ai_platform_network_get_error+0x170>
 800e15c:	e7fe      	b.n	800e15c <ai_platform_network_get_error+0x84>
 800e15e:	f7ff feed 	bl	800df3c <_ai_platform_acquire_crc>
 800e162:	4b5d      	ldr	r3, [pc, #372]	; (800e2d8 <ai_platform_network_get_error+0x200>)
 800e164:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e16e:	185a      	adds	r2, r3, r1
 800e170:	2a01      	cmp	r2, #1
 800e172:	d929      	bls.n	800e1c8 <ai_platform_network_get_error+0xf0>
 800e174:	f240 4249 	movw	r2, #1097	; 0x449
 800e178:	4293      	cmp	r3, r2
 800e17a:	d025      	beq.n	800e1c8 <ai_platform_network_get_error+0xf0>
 800e17c:	4a57      	ldr	r2, [pc, #348]	; (800e2dc <ai_platform_network_get_error+0x204>)
 800e17e:	6813      	ldr	r3, [r2, #0]
 800e180:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e184:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800e188:	d02b      	beq.n	800e1e2 <ai_platform_network_get_error+0x10a>
 800e18a:	6813      	ldr	r3, [r2, #0]
 800e18c:	f240 4183 	movw	r1, #1155	; 0x483
 800e190:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e194:	428b      	cmp	r3, r1
 800e196:	d060      	beq.n	800e25a <ai_platform_network_get_error+0x182>
 800e198:	6813      	ldr	r3, [r2, #0]
 800e19a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e19e:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800e1a2:	d07c      	beq.n	800e29e <ai_platform_network_get_error+0x1c6>
 800e1a4:	6813      	ldr	r3, [r2, #0]
 800e1a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	d129      	bne.n	800e202 <ai_platform_network_get_error+0x12a>
 800e1ae:	4a4c      	ldr	r2, [pc, #304]	; (800e2e0 <ai_platform_network_get_error+0x208>)
 800e1b0:	2301      	movs	r3, #1
 800e1b2:	6093      	str	r3, [r2, #8]
 800e1b4:	6893      	ldr	r3, [r2, #8]
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d1fc      	bne.n	800e1b4 <ai_platform_network_get_error+0xdc>
 800e1ba:	494a      	ldr	r1, [pc, #296]	; (800e2e4 <ai_platform_network_get_error+0x20c>)
 800e1bc:	4b4a      	ldr	r3, [pc, #296]	; (800e2e8 <ai_platform_network_get_error+0x210>)
 800e1be:	6011      	str	r1, [r2, #0]
 800e1c0:	6812      	ldr	r2, [r2, #0]
 800e1c2:	429a      	cmp	r2, r3
 800e1c4:	d01d      	beq.n	800e202 <ai_platform_network_get_error+0x12a>
 800e1c6:	e7fe      	b.n	800e1c6 <ai_platform_network_get_error+0xee>
 800e1c8:	4a45      	ldr	r2, [pc, #276]	; (800e2e0 <ai_platform_network_get_error+0x208>)
 800e1ca:	2301      	movs	r3, #1
 800e1cc:	6093      	str	r3, [r2, #8]
 800e1ce:	6893      	ldr	r3, [r2, #8]
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	d1fc      	bne.n	800e1ce <ai_platform_network_get_error+0xf6>
 800e1d4:	4943      	ldr	r1, [pc, #268]	; (800e2e4 <ai_platform_network_get_error+0x20c>)
 800e1d6:	4b44      	ldr	r3, [pc, #272]	; (800e2e8 <ai_platform_network_get_error+0x210>)
 800e1d8:	6011      	str	r1, [r2, #0]
 800e1da:	6812      	ldr	r2, [r2, #0]
 800e1dc:	429a      	cmp	r2, r3
 800e1de:	d010      	beq.n	800e202 <ai_platform_network_get_error+0x12a>
 800e1e0:	e7fe      	b.n	800e1e0 <ai_platform_network_get_error+0x108>
 800e1e2:	4a42      	ldr	r2, [pc, #264]	; (800e2ec <ai_platform_network_get_error+0x214>)
 800e1e4:	2301      	movs	r3, #1
 800e1e6:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800e1ea:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d1fb      	bne.n	800e1ea <ai_platform_network_get_error+0x112>
 800e1f2:	493c      	ldr	r1, [pc, #240]	; (800e2e4 <ai_platform_network_get_error+0x20c>)
 800e1f4:	4b3c      	ldr	r3, [pc, #240]	; (800e2e8 <ai_platform_network_get_error+0x210>)
 800e1f6:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800e1fa:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800e1fe:	429a      	cmp	r2, r3
 800e200:	d111      	bne.n	800e226 <ai_platform_network_get_error+0x14e>
 800e202:	f7ff fe9d 	bl	800df40 <_ai_platform_release_crc>
 800e206:	f241 0010 	movw	r0, #4112	; 0x1010
 800e20a:	bd10      	pop	{r4, pc}
 800e20c:	4a34      	ldr	r2, [pc, #208]	; (800e2e0 <ai_platform_network_get_error+0x208>)
 800e20e:	2301      	movs	r3, #1
 800e210:	6093      	str	r3, [r2, #8]
 800e212:	6893      	ldr	r3, [r2, #8]
 800e214:	2b00      	cmp	r3, #0
 800e216:	d1fc      	bne.n	800e212 <ai_platform_network_get_error+0x13a>
 800e218:	4932      	ldr	r1, [pc, #200]	; (800e2e4 <ai_platform_network_get_error+0x20c>)
 800e21a:	4b33      	ldr	r3, [pc, #204]	; (800e2e8 <ai_platform_network_get_error+0x210>)
 800e21c:	6011      	str	r1, [r2, #0]
 800e21e:	6812      	ldr	r2, [r2, #0]
 800e220:	429a      	cmp	r2, r3
 800e222:	d011      	beq.n	800e248 <ai_platform_network_get_error+0x170>
 800e224:	e7fe      	b.n	800e224 <ai_platform_network_get_error+0x14c>
 800e226:	e7fe      	b.n	800e226 <ai_platform_network_get_error+0x14e>
 800e228:	4a30      	ldr	r2, [pc, #192]	; (800e2ec <ai_platform_network_get_error+0x214>)
 800e22a:	2301      	movs	r3, #1
 800e22c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800e230:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800e234:	2b00      	cmp	r3, #0
 800e236:	d1fb      	bne.n	800e230 <ai_platform_network_get_error+0x158>
 800e238:	492a      	ldr	r1, [pc, #168]	; (800e2e4 <ai_platform_network_get_error+0x20c>)
 800e23a:	4b2b      	ldr	r3, [pc, #172]	; (800e2e8 <ai_platform_network_get_error+0x210>)
 800e23c:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800e240:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800e244:	429a      	cmp	r2, r3
 800e246:	d107      	bne.n	800e258 <ai_platform_network_get_error+0x180>
 800e248:	f7ff fe7a 	bl	800df40 <_ai_platform_release_crc>
 800e24c:	f104 0010 	add.w	r0, r4, #16
 800e250:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e254:	f001 bae6 	b.w	800f824 <core_get_error>
 800e258:	e7fe      	b.n	800e258 <ai_platform_network_get_error+0x180>
 800e25a:	4a24      	ldr	r2, [pc, #144]	; (800e2ec <ai_platform_network_get_error+0x214>)
 800e25c:	2301      	movs	r3, #1
 800e25e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800e262:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800e266:	2b00      	cmp	r3, #0
 800e268:	d1fb      	bne.n	800e262 <ai_platform_network_get_error+0x18a>
 800e26a:	491e      	ldr	r1, [pc, #120]	; (800e2e4 <ai_platform_network_get_error+0x20c>)
 800e26c:	4b1e      	ldr	r3, [pc, #120]	; (800e2e8 <ai_platform_network_get_error+0x210>)
 800e26e:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800e272:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800e276:	429a      	cmp	r2, r3
 800e278:	d0c3      	beq.n	800e202 <ai_platform_network_get_error+0x12a>
 800e27a:	e7fe      	b.n	800e27a <ai_platform_network_get_error+0x1a2>
 800e27c:	4a1b      	ldr	r2, [pc, #108]	; (800e2ec <ai_platform_network_get_error+0x214>)
 800e27e:	2301      	movs	r3, #1
 800e280:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800e284:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d1fb      	bne.n	800e284 <ai_platform_network_get_error+0x1ac>
 800e28c:	4915      	ldr	r1, [pc, #84]	; (800e2e4 <ai_platform_network_get_error+0x20c>)
 800e28e:	4b16      	ldr	r3, [pc, #88]	; (800e2e8 <ai_platform_network_get_error+0x210>)
 800e290:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800e294:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800e298:	429a      	cmp	r2, r3
 800e29a:	d0d5      	beq.n	800e248 <ai_platform_network_get_error+0x170>
 800e29c:	e7fe      	b.n	800e29c <ai_platform_network_get_error+0x1c4>
 800e29e:	4a10      	ldr	r2, [pc, #64]	; (800e2e0 <ai_platform_network_get_error+0x208>)
 800e2a0:	2301      	movs	r3, #1
 800e2a2:	6093      	str	r3, [r2, #8]
 800e2a4:	6893      	ldr	r3, [r2, #8]
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	d1fc      	bne.n	800e2a4 <ai_platform_network_get_error+0x1cc>
 800e2aa:	490e      	ldr	r1, [pc, #56]	; (800e2e4 <ai_platform_network_get_error+0x20c>)
 800e2ac:	4b0e      	ldr	r3, [pc, #56]	; (800e2e8 <ai_platform_network_get_error+0x210>)
 800e2ae:	6011      	str	r1, [r2, #0]
 800e2b0:	6812      	ldr	r2, [r2, #0]
 800e2b2:	429a      	cmp	r2, r3
 800e2b4:	d0a5      	beq.n	800e202 <ai_platform_network_get_error+0x12a>
 800e2b6:	e7fe      	b.n	800e2b6 <ai_platform_network_get_error+0x1de>
 800e2b8:	4a09      	ldr	r2, [pc, #36]	; (800e2e0 <ai_platform_network_get_error+0x208>)
 800e2ba:	2301      	movs	r3, #1
 800e2bc:	6093      	str	r3, [r2, #8]
 800e2be:	6893      	ldr	r3, [r2, #8]
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d1fc      	bne.n	800e2be <ai_platform_network_get_error+0x1e6>
 800e2c4:	4907      	ldr	r1, [pc, #28]	; (800e2e4 <ai_platform_network_get_error+0x20c>)
 800e2c6:	4b08      	ldr	r3, [pc, #32]	; (800e2e8 <ai_platform_network_get_error+0x210>)
 800e2c8:	6011      	str	r1, [r2, #0]
 800e2ca:	6812      	ldr	r2, [r2, #0]
 800e2cc:	429a      	cmp	r2, r3
 800e2ce:	d0bb      	beq.n	800e248 <ai_platform_network_get_error+0x170>
 800e2d0:	e7fe      	b.n	800e2d0 <ai_platform_network_get_error+0x1f8>
 800e2d2:	bf00      	nop
 800e2d4:	a1c00100 	.word	0xa1c00100
 800e2d8:	e0042000 	.word	0xe0042000
 800e2dc:	5c001000 	.word	0x5c001000
 800e2e0:	40023000 	.word	0x40023000
 800e2e4:	f407a5c2 	.word	0xf407a5c2
 800e2e8:	b5e8b5cd 	.word	0xb5e8b5cd
 800e2ec:	58024000 	.word	0x58024000

0800e2f0 <ai_platform_network_set_error>:
 800e2f0:	b110      	cbz	r0, 800e2f8 <ai_platform_network_set_error+0x8>
 800e2f2:	3010      	adds	r0, #16
 800e2f4:	f001 ba9c 	b.w	800f830 <core_set_error>
 800e2f8:	4770      	bx	lr
 800e2fa:	bf00      	nop

0800e2fc <ai_platform_inputs_get>:
 800e2fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e300:	b085      	sub	sp, #20
 800e302:	9102      	str	r1, [sp, #8]
 800e304:	2800      	cmp	r0, #0
 800e306:	f000 8093 	beq.w	800e430 <ai_platform_inputs_get+0x134>
 800e30a:	4baa      	ldr	r3, [pc, #680]	; (800e5b4 <ai_platform_inputs_get+0x2b8>)
 800e30c:	4681      	mov	r9, r0
 800e30e:	6802      	ldr	r2, [r0, #0]
 800e310:	429a      	cmp	r2, r3
 800e312:	f040 808d 	bne.w	800e430 <ai_platform_inputs_get+0x134>
 800e316:	f7ff fe11 	bl	800df3c <_ai_platform_acquire_crc>
 800e31a:	4ba7      	ldr	r3, [pc, #668]	; (800e5b8 <ai_platform_inputs_get+0x2bc>)
 800e31c:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800e320:	681b      	ldr	r3, [r3, #0]
 800e322:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e326:	189a      	adds	r2, r3, r2
 800e328:	2a01      	cmp	r2, #1
 800e32a:	f240 80da 	bls.w	800e4e2 <ai_platform_inputs_get+0x1e6>
 800e32e:	f240 4249 	movw	r2, #1097	; 0x449
 800e332:	4293      	cmp	r3, r2
 800e334:	f000 80d5 	beq.w	800e4e2 <ai_platform_inputs_get+0x1e6>
 800e338:	4aa0      	ldr	r2, [pc, #640]	; (800e5bc <ai_platform_inputs_get+0x2c0>)
 800e33a:	6813      	ldr	r3, [r2, #0]
 800e33c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e340:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800e344:	f000 80dc 	beq.w	800e500 <ai_platform_inputs_get+0x204>
 800e348:	6813      	ldr	r3, [r2, #0]
 800e34a:	f240 4183 	movw	r1, #1155	; 0x483
 800e34e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e352:	428b      	cmp	r3, r1
 800e354:	f000 810e 	beq.w	800e574 <ai_platform_inputs_get+0x278>
 800e358:	6813      	ldr	r3, [r2, #0]
 800e35a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e35e:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800e362:	f000 8143 	beq.w	800e5ec <ai_platform_inputs_get+0x2f0>
 800e366:	6813      	ldr	r3, [r2, #0]
 800e368:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	f000 8113 	beq.w	800e598 <ai_platform_inputs_get+0x29c>
 800e372:	f7ff fde5 	bl	800df40 <_ai_platform_release_crc>
 800e376:	f8b9 302c 	ldrh.w	r3, [r9, #44]	; 0x2c
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	f000 80d2 	beq.w	800e524 <ai_platform_inputs_get+0x228>
 800e380:	f8d9 a030 	ldr.w	sl, [r9, #48]	; 0x30
 800e384:	f1ba 0f00 	cmp.w	sl, #0
 800e388:	f000 80cc 	beq.w	800e524 <ai_platform_inputs_get+0x228>
 800e38c:	2100      	movs	r1, #0
 800e38e:	f8cd 900c 	str.w	r9, [sp, #12]
 800e392:	460d      	mov	r5, r1
 800e394:	4689      	mov	r9, r1
 800e396:	e016      	b.n	800e3c6 <ai_platform_inputs_get+0xca>
 800e398:	9a01      	ldr	r2, [sp, #4]
 800e39a:	2301      	movs	r3, #1
 800e39c:	f848 3002 	str.w	r3, [r8, r2]
 800e3a0:	69b2      	ldr	r2, [r6, #24]
 800e3a2:	f04f 0301 	mov.w	r3, #1
 800e3a6:	6856      	ldr	r6, [r2, #4]
 800e3a8:	3501      	adds	r5, #1
 800e3aa:	f109 091c 	add.w	r9, r9, #28
 800e3ae:	7523      	strb	r3, [r4, #20]
 800e3b0:	2300      	movs	r3, #0
 800e3b2:	6962      	ldr	r2, [r4, #20]
 800e3b4:	60a7      	str	r7, [r4, #8]
 800e3b6:	f36b 221f 	bfi	r2, fp, #8, #24
 800e3ba:	6126      	str	r6, [r4, #16]
 800e3bc:	61a1      	str	r1, [r4, #24]
 800e3be:	60e3      	str	r3, [r4, #12]
 800e3c0:	6162      	str	r2, [r4, #20]
 800e3c2:	e9c4 0c00 	strd	r0, ip, [r4]
 800e3c6:	f8ba 3000 	ldrh.w	r3, [sl]
 800e3ca:	b2ac      	uxth	r4, r5
 800e3cc:	42ab      	cmp	r3, r5
 800e3ce:	ea4f 03c5 	mov.w	r3, r5, lsl #3
 800e3d2:	9301      	str	r3, [sp, #4]
 800e3d4:	f240 80b5 	bls.w	800e542 <ai_platform_inputs_get+0x246>
 800e3d8:	f8da 3004 	ldr.w	r3, [sl, #4]
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	f000 80b0 	beq.w	800e542 <ai_platform_inputs_get+0x246>
 800e3e2:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 800e3e6:	2e00      	cmp	r6, #0
 800e3e8:	f000 80ab 	beq.w	800e542 <ai_platform_inputs_get+0x246>
 800e3ec:	f8da 3008 	ldr.w	r3, [sl, #8]
 800e3f0:	69b2      	ldr	r2, [r6, #24]
 800e3f2:	68f1      	ldr	r1, [r6, #12]
 800e3f4:	6810      	ldr	r0, [r2, #0]
 800e3f6:	9100      	str	r1, [sp, #0]
 800e3f8:	e9d3 4801 	ldrd	r4, r8, [r3, #4]
 800e3fc:	68b3      	ldr	r3, [r6, #8]
 800e3fe:	eb08 07c5 	add.w	r7, r8, r5, lsl #3
 800e402:	444c      	add	r4, r9
 800e404:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 800e408:	f001 fe2c 	bl	8010064 <ai_array_to_buffer_fmt>
 800e40c:	69b2      	ldr	r2, [r6, #24]
 800e40e:	9900      	ldr	r1, [sp, #0]
 800e410:	f8d2 c008 	ldr.w	ip, [r2, #8]
 800e414:	2f00      	cmp	r7, #0
 800e416:	d0c4      	beq.n	800e3a2 <ai_platform_inputs_get+0xa6>
 800e418:	2200      	movs	r2, #0
 800e41a:	f848 2035 	str.w	r2, [r8, r5, lsl #3]
 800e41e:	6832      	ldr	r2, [r6, #0]
 800e420:	607a      	str	r2, [r7, #4]
 800e422:	b112      	cbz	r2, 800e42a <ai_platform_inputs_get+0x12e>
 800e424:	8852      	ldrh	r2, [r2, #2]
 800e426:	2a00      	cmp	r2, #0
 800e428:	d1b6      	bne.n	800e398 <ai_platform_inputs_get+0x9c>
 800e42a:	69b2      	ldr	r2, [r6, #24]
 800e42c:	2700      	movs	r7, #0
 800e42e:	e7b8      	b.n	800e3a2 <ai_platform_inputs_get+0xa6>
 800e430:	f7ff fd84 	bl	800df3c <_ai_platform_acquire_crc>
 800e434:	4b60      	ldr	r3, [pc, #384]	; (800e5b8 <ai_platform_inputs_get+0x2bc>)
 800e436:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800e43a:	681b      	ldr	r3, [r3, #0]
 800e43c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e440:	185a      	adds	r2, r3, r1
 800e442:	2a01      	cmp	r2, #1
 800e444:	d92a      	bls.n	800e49c <ai_platform_inputs_get+0x1a0>
 800e446:	f240 4249 	movw	r2, #1097	; 0x449
 800e44a:	4293      	cmp	r3, r2
 800e44c:	d026      	beq.n	800e49c <ai_platform_inputs_get+0x1a0>
 800e44e:	4a5b      	ldr	r2, [pc, #364]	; (800e5bc <ai_platform_inputs_get+0x2c0>)
 800e450:	6813      	ldr	r3, [r2, #0]
 800e452:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e456:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800e45a:	d02c      	beq.n	800e4b6 <ai_platform_inputs_get+0x1ba>
 800e45c:	6813      	ldr	r3, [r2, #0]
 800e45e:	f240 4183 	movw	r1, #1155	; 0x483
 800e462:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e466:	428b      	cmp	r3, r1
 800e468:	d073      	beq.n	800e552 <ai_platform_inputs_get+0x256>
 800e46a:	6813      	ldr	r3, [r2, #0]
 800e46c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e470:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800e474:	f000 80ac 	beq.w	800e5d0 <ai_platform_inputs_get+0x2d4>
 800e478:	6813      	ldr	r3, [r2, #0]
 800e47a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d129      	bne.n	800e4d6 <ai_platform_inputs_get+0x1da>
 800e482:	4a4f      	ldr	r2, [pc, #316]	; (800e5c0 <ai_platform_inputs_get+0x2c4>)
 800e484:	2301      	movs	r3, #1
 800e486:	6093      	str	r3, [r2, #8]
 800e488:	6893      	ldr	r3, [r2, #8]
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d1fc      	bne.n	800e488 <ai_platform_inputs_get+0x18c>
 800e48e:	494d      	ldr	r1, [pc, #308]	; (800e5c4 <ai_platform_inputs_get+0x2c8>)
 800e490:	4b4d      	ldr	r3, [pc, #308]	; (800e5c8 <ai_platform_inputs_get+0x2cc>)
 800e492:	6011      	str	r1, [r2, #0]
 800e494:	6812      	ldr	r2, [r2, #0]
 800e496:	429a      	cmp	r2, r3
 800e498:	d01d      	beq.n	800e4d6 <ai_platform_inputs_get+0x1da>
 800e49a:	e7fe      	b.n	800e49a <ai_platform_inputs_get+0x19e>
 800e49c:	4a48      	ldr	r2, [pc, #288]	; (800e5c0 <ai_platform_inputs_get+0x2c4>)
 800e49e:	2301      	movs	r3, #1
 800e4a0:	6093      	str	r3, [r2, #8]
 800e4a2:	6893      	ldr	r3, [r2, #8]
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d1fc      	bne.n	800e4a2 <ai_platform_inputs_get+0x1a6>
 800e4a8:	4946      	ldr	r1, [pc, #280]	; (800e5c4 <ai_platform_inputs_get+0x2c8>)
 800e4aa:	4b47      	ldr	r3, [pc, #284]	; (800e5c8 <ai_platform_inputs_get+0x2cc>)
 800e4ac:	6011      	str	r1, [r2, #0]
 800e4ae:	6812      	ldr	r2, [r2, #0]
 800e4b0:	429a      	cmp	r2, r3
 800e4b2:	d010      	beq.n	800e4d6 <ai_platform_inputs_get+0x1da>
 800e4b4:	e7fe      	b.n	800e4b4 <ai_platform_inputs_get+0x1b8>
 800e4b6:	4a45      	ldr	r2, [pc, #276]	; (800e5cc <ai_platform_inputs_get+0x2d0>)
 800e4b8:	2301      	movs	r3, #1
 800e4ba:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800e4be:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d1fb      	bne.n	800e4be <ai_platform_inputs_get+0x1c2>
 800e4c6:	493f      	ldr	r1, [pc, #252]	; (800e5c4 <ai_platform_inputs_get+0x2c8>)
 800e4c8:	4b3f      	ldr	r3, [pc, #252]	; (800e5c8 <ai_platform_inputs_get+0x2cc>)
 800e4ca:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800e4ce:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800e4d2:	429a      	cmp	r2, r3
 800e4d4:	d113      	bne.n	800e4fe <ai_platform_inputs_get+0x202>
 800e4d6:	f7ff fd33 	bl	800df40 <_ai_platform_release_crc>
 800e4da:	2000      	movs	r0, #0
 800e4dc:	b005      	add	sp, #20
 800e4de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4e2:	4a37      	ldr	r2, [pc, #220]	; (800e5c0 <ai_platform_inputs_get+0x2c4>)
 800e4e4:	2301      	movs	r3, #1
 800e4e6:	6093      	str	r3, [r2, #8]
 800e4e8:	6893      	ldr	r3, [r2, #8]
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d1fc      	bne.n	800e4e8 <ai_platform_inputs_get+0x1ec>
 800e4ee:	4b35      	ldr	r3, [pc, #212]	; (800e5c4 <ai_platform_inputs_get+0x2c8>)
 800e4f0:	6013      	str	r3, [r2, #0]
 800e4f2:	4b35      	ldr	r3, [pc, #212]	; (800e5c8 <ai_platform_inputs_get+0x2cc>)
 800e4f4:	6812      	ldr	r2, [r2, #0]
 800e4f6:	429a      	cmp	r2, r3
 800e4f8:	f43f af3b 	beq.w	800e372 <ai_platform_inputs_get+0x76>
 800e4fc:	e7fe      	b.n	800e4fc <ai_platform_inputs_get+0x200>
 800e4fe:	e7fe      	b.n	800e4fe <ai_platform_inputs_get+0x202>
 800e500:	4a32      	ldr	r2, [pc, #200]	; (800e5cc <ai_platform_inputs_get+0x2d0>)
 800e502:	2301      	movs	r3, #1
 800e504:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800e508:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d1fb      	bne.n	800e508 <ai_platform_inputs_get+0x20c>
 800e510:	4b2c      	ldr	r3, [pc, #176]	; (800e5c4 <ai_platform_inputs_get+0x2c8>)
 800e512:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800e516:	4b2c      	ldr	r3, [pc, #176]	; (800e5c8 <ai_platform_inputs_get+0x2cc>)
 800e518:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800e51c:	429a      	cmp	r2, r3
 800e51e:	f43f af28 	beq.w	800e372 <ai_platform_inputs_get+0x76>
 800e522:	e7fe      	b.n	800e522 <ai_platform_inputs_get+0x226>
 800e524:	2400      	movs	r4, #0
 800e526:	2218      	movs	r2, #24
 800e528:	2111      	movs	r1, #17
 800e52a:	f109 0010 	add.w	r0, r9, #16
 800e52e:	f001 f97f 	bl	800f830 <core_set_error>
 800e532:	4620      	mov	r0, r4
 800e534:	9b02      	ldr	r3, [sp, #8]
 800e536:	2b00      	cmp	r3, #0
 800e538:	d0d0      	beq.n	800e4dc <ai_platform_inputs_get+0x1e0>
 800e53a:	801c      	strh	r4, [r3, #0]
 800e53c:	b005      	add	sp, #20
 800e53e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e542:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800e546:	2c00      	cmp	r4, #0
 800e548:	d0ec      	beq.n	800e524 <ai_platform_inputs_get+0x228>
 800e54a:	f8da 3008 	ldr.w	r3, [sl, #8]
 800e54e:	6858      	ldr	r0, [r3, #4]
 800e550:	e7f0      	b.n	800e534 <ai_platform_inputs_get+0x238>
 800e552:	4a1e      	ldr	r2, [pc, #120]	; (800e5cc <ai_platform_inputs_get+0x2d0>)
 800e554:	2301      	movs	r3, #1
 800e556:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800e55a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d1fb      	bne.n	800e55a <ai_platform_inputs_get+0x25e>
 800e562:	4918      	ldr	r1, [pc, #96]	; (800e5c4 <ai_platform_inputs_get+0x2c8>)
 800e564:	4b18      	ldr	r3, [pc, #96]	; (800e5c8 <ai_platform_inputs_get+0x2cc>)
 800e566:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800e56a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800e56e:	429a      	cmp	r2, r3
 800e570:	d0b1      	beq.n	800e4d6 <ai_platform_inputs_get+0x1da>
 800e572:	e7fe      	b.n	800e572 <ai_platform_inputs_get+0x276>
 800e574:	4a15      	ldr	r2, [pc, #84]	; (800e5cc <ai_platform_inputs_get+0x2d0>)
 800e576:	2301      	movs	r3, #1
 800e578:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800e57c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800e580:	2b00      	cmp	r3, #0
 800e582:	d1fb      	bne.n	800e57c <ai_platform_inputs_get+0x280>
 800e584:	4b0f      	ldr	r3, [pc, #60]	; (800e5c4 <ai_platform_inputs_get+0x2c8>)
 800e586:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800e58a:	4b0f      	ldr	r3, [pc, #60]	; (800e5c8 <ai_platform_inputs_get+0x2cc>)
 800e58c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800e590:	429a      	cmp	r2, r3
 800e592:	f43f aeee 	beq.w	800e372 <ai_platform_inputs_get+0x76>
 800e596:	e7fe      	b.n	800e596 <ai_platform_inputs_get+0x29a>
 800e598:	4a09      	ldr	r2, [pc, #36]	; (800e5c0 <ai_platform_inputs_get+0x2c4>)
 800e59a:	2301      	movs	r3, #1
 800e59c:	6093      	str	r3, [r2, #8]
 800e59e:	6893      	ldr	r3, [r2, #8]
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	d1fc      	bne.n	800e59e <ai_platform_inputs_get+0x2a2>
 800e5a4:	4b07      	ldr	r3, [pc, #28]	; (800e5c4 <ai_platform_inputs_get+0x2c8>)
 800e5a6:	6013      	str	r3, [r2, #0]
 800e5a8:	4b07      	ldr	r3, [pc, #28]	; (800e5c8 <ai_platform_inputs_get+0x2cc>)
 800e5aa:	6812      	ldr	r2, [r2, #0]
 800e5ac:	429a      	cmp	r2, r3
 800e5ae:	f43f aee0 	beq.w	800e372 <ai_platform_inputs_get+0x76>
 800e5b2:	e7fe      	b.n	800e5b2 <ai_platform_inputs_get+0x2b6>
 800e5b4:	a1c00100 	.word	0xa1c00100
 800e5b8:	e0042000 	.word	0xe0042000
 800e5bc:	5c001000 	.word	0x5c001000
 800e5c0:	40023000 	.word	0x40023000
 800e5c4:	f407a5c2 	.word	0xf407a5c2
 800e5c8:	b5e8b5cd 	.word	0xb5e8b5cd
 800e5cc:	58024000 	.word	0x58024000
 800e5d0:	4a0d      	ldr	r2, [pc, #52]	; (800e608 <ai_platform_inputs_get+0x30c>)
 800e5d2:	2301      	movs	r3, #1
 800e5d4:	6093      	str	r3, [r2, #8]
 800e5d6:	6893      	ldr	r3, [r2, #8]
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d1fc      	bne.n	800e5d6 <ai_platform_inputs_get+0x2da>
 800e5dc:	490b      	ldr	r1, [pc, #44]	; (800e60c <ai_platform_inputs_get+0x310>)
 800e5de:	4b0c      	ldr	r3, [pc, #48]	; (800e610 <ai_platform_inputs_get+0x314>)
 800e5e0:	6011      	str	r1, [r2, #0]
 800e5e2:	6812      	ldr	r2, [r2, #0]
 800e5e4:	429a      	cmp	r2, r3
 800e5e6:	f43f af76 	beq.w	800e4d6 <ai_platform_inputs_get+0x1da>
 800e5ea:	e7fe      	b.n	800e5ea <ai_platform_inputs_get+0x2ee>
 800e5ec:	4a06      	ldr	r2, [pc, #24]	; (800e608 <ai_platform_inputs_get+0x30c>)
 800e5ee:	2301      	movs	r3, #1
 800e5f0:	6093      	str	r3, [r2, #8]
 800e5f2:	6893      	ldr	r3, [r2, #8]
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d1fc      	bne.n	800e5f2 <ai_platform_inputs_get+0x2f6>
 800e5f8:	4b04      	ldr	r3, [pc, #16]	; (800e60c <ai_platform_inputs_get+0x310>)
 800e5fa:	6013      	str	r3, [r2, #0]
 800e5fc:	4b04      	ldr	r3, [pc, #16]	; (800e610 <ai_platform_inputs_get+0x314>)
 800e5fe:	6812      	ldr	r2, [r2, #0]
 800e600:	429a      	cmp	r2, r3
 800e602:	f43f aeb6 	beq.w	800e372 <ai_platform_inputs_get+0x76>
 800e606:	e7fe      	b.n	800e606 <ai_platform_inputs_get+0x30a>
 800e608:	40023000 	.word	0x40023000
 800e60c:	f407a5c2 	.word	0xf407a5c2
 800e610:	b5e8b5cd 	.word	0xb5e8b5cd

0800e614 <ai_platform_outputs_get>:
 800e614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e618:	b085      	sub	sp, #20
 800e61a:	9102      	str	r1, [sp, #8]
 800e61c:	2800      	cmp	r0, #0
 800e61e:	f000 808f 	beq.w	800e740 <ai_platform_outputs_get+0x12c>
 800e622:	4ba8      	ldr	r3, [pc, #672]	; (800e8c4 <ai_platform_outputs_get+0x2b0>)
 800e624:	4681      	mov	r9, r0
 800e626:	6802      	ldr	r2, [r0, #0]
 800e628:	429a      	cmp	r2, r3
 800e62a:	f040 8089 	bne.w	800e740 <ai_platform_outputs_get+0x12c>
 800e62e:	f7ff fc85 	bl	800df3c <_ai_platform_acquire_crc>
 800e632:	4ba5      	ldr	r3, [pc, #660]	; (800e8c8 <ai_platform_outputs_get+0x2b4>)
 800e634:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800e638:	681b      	ldr	r3, [r3, #0]
 800e63a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e63e:	189a      	adds	r2, r3, r2
 800e640:	2a01      	cmp	r2, #1
 800e642:	f240 80d6 	bls.w	800e7f2 <ai_platform_outputs_get+0x1de>
 800e646:	f240 4249 	movw	r2, #1097	; 0x449
 800e64a:	4293      	cmp	r3, r2
 800e64c:	f000 80d1 	beq.w	800e7f2 <ai_platform_outputs_get+0x1de>
 800e650:	4a9e      	ldr	r2, [pc, #632]	; (800e8cc <ai_platform_outputs_get+0x2b8>)
 800e652:	6813      	ldr	r3, [r2, #0]
 800e654:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e658:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800e65c:	f000 80d8 	beq.w	800e810 <ai_platform_outputs_get+0x1fc>
 800e660:	6813      	ldr	r3, [r2, #0]
 800e662:	f240 4183 	movw	r1, #1155	; 0x483
 800e666:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e66a:	428b      	cmp	r3, r1
 800e66c:	f000 8109 	beq.w	800e882 <ai_platform_outputs_get+0x26e>
 800e670:	6813      	ldr	r3, [r2, #0]
 800e672:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e676:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800e67a:	f000 813f 	beq.w	800e8fc <ai_platform_outputs_get+0x2e8>
 800e67e:	6813      	ldr	r3, [r2, #0]
 800e680:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e684:	2b00      	cmp	r3, #0
 800e686:	f000 810e 	beq.w	800e8a6 <ai_platform_outputs_get+0x292>
 800e68a:	f7ff fc59 	bl	800df40 <_ai_platform_release_crc>
 800e68e:	f8b9 302c 	ldrh.w	r3, [r9, #44]	; 0x2c
 800e692:	2b01      	cmp	r3, #1
 800e694:	f240 80db 	bls.w	800e84e <ai_platform_outputs_get+0x23a>
 800e698:	2100      	movs	r1, #0
 800e69a:	f8d9 a030 	ldr.w	sl, [r9, #48]	; 0x30
 800e69e:	f8cd 900c 	str.w	r9, [sp, #12]
 800e6a2:	460d      	mov	r5, r1
 800e6a4:	4689      	mov	r9, r1
 800e6a6:	e016      	b.n	800e6d6 <ai_platform_outputs_get+0xc2>
 800e6a8:	9a01      	ldr	r2, [sp, #4]
 800e6aa:	2301      	movs	r3, #1
 800e6ac:	f848 3002 	str.w	r3, [r8, r2]
 800e6b0:	69b2      	ldr	r2, [r6, #24]
 800e6b2:	f04f 0301 	mov.w	r3, #1
 800e6b6:	6856      	ldr	r6, [r2, #4]
 800e6b8:	3501      	adds	r5, #1
 800e6ba:	f109 091c 	add.w	r9, r9, #28
 800e6be:	7523      	strb	r3, [r4, #20]
 800e6c0:	2300      	movs	r3, #0
 800e6c2:	6962      	ldr	r2, [r4, #20]
 800e6c4:	60a7      	str	r7, [r4, #8]
 800e6c6:	f36b 221f 	bfi	r2, fp, #8, #24
 800e6ca:	6126      	str	r6, [r4, #16]
 800e6cc:	61a1      	str	r1, [r4, #24]
 800e6ce:	60e3      	str	r3, [r4, #12]
 800e6d0:	6162      	str	r2, [r4, #20]
 800e6d2:	e9c4 0c00 	strd	r0, ip, [r4]
 800e6d6:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 800e6da:	b2ac      	uxth	r4, r5
 800e6dc:	42ab      	cmp	r3, r5
 800e6de:	ea4f 03c5 	mov.w	r3, r5, lsl #3
 800e6e2:	9301      	str	r3, [sp, #4]
 800e6e4:	f240 80a6 	bls.w	800e834 <ai_platform_outputs_get+0x220>
 800e6e8:	f8da 3010 	ldr.w	r3, [sl, #16]
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	f000 80a1 	beq.w	800e834 <ai_platform_outputs_get+0x220>
 800e6f2:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 800e6f6:	2e00      	cmp	r6, #0
 800e6f8:	f000 809c 	beq.w	800e834 <ai_platform_outputs_get+0x220>
 800e6fc:	f8da 3014 	ldr.w	r3, [sl, #20]
 800e700:	69b2      	ldr	r2, [r6, #24]
 800e702:	68f1      	ldr	r1, [r6, #12]
 800e704:	6810      	ldr	r0, [r2, #0]
 800e706:	9100      	str	r1, [sp, #0]
 800e708:	e9d3 4801 	ldrd	r4, r8, [r3, #4]
 800e70c:	68b3      	ldr	r3, [r6, #8]
 800e70e:	eb08 07c5 	add.w	r7, r8, r5, lsl #3
 800e712:	444c      	add	r4, r9
 800e714:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 800e718:	f001 fca4 	bl	8010064 <ai_array_to_buffer_fmt>
 800e71c:	69b2      	ldr	r2, [r6, #24]
 800e71e:	9900      	ldr	r1, [sp, #0]
 800e720:	f8d2 c008 	ldr.w	ip, [r2, #8]
 800e724:	2f00      	cmp	r7, #0
 800e726:	d0c4      	beq.n	800e6b2 <ai_platform_outputs_get+0x9e>
 800e728:	2200      	movs	r2, #0
 800e72a:	f848 2035 	str.w	r2, [r8, r5, lsl #3]
 800e72e:	6832      	ldr	r2, [r6, #0]
 800e730:	607a      	str	r2, [r7, #4]
 800e732:	b112      	cbz	r2, 800e73a <ai_platform_outputs_get+0x126>
 800e734:	8852      	ldrh	r2, [r2, #2]
 800e736:	2a00      	cmp	r2, #0
 800e738:	d1b6      	bne.n	800e6a8 <ai_platform_outputs_get+0x94>
 800e73a:	69b2      	ldr	r2, [r6, #24]
 800e73c:	2700      	movs	r7, #0
 800e73e:	e7b8      	b.n	800e6b2 <ai_platform_outputs_get+0x9e>
 800e740:	f7ff fbfc 	bl	800df3c <_ai_platform_acquire_crc>
 800e744:	4b60      	ldr	r3, [pc, #384]	; (800e8c8 <ai_platform_outputs_get+0x2b4>)
 800e746:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800e74a:	681b      	ldr	r3, [r3, #0]
 800e74c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e750:	185a      	adds	r2, r3, r1
 800e752:	2a01      	cmp	r2, #1
 800e754:	d92a      	bls.n	800e7ac <ai_platform_outputs_get+0x198>
 800e756:	f240 4249 	movw	r2, #1097	; 0x449
 800e75a:	4293      	cmp	r3, r2
 800e75c:	d026      	beq.n	800e7ac <ai_platform_outputs_get+0x198>
 800e75e:	4a5b      	ldr	r2, [pc, #364]	; (800e8cc <ai_platform_outputs_get+0x2b8>)
 800e760:	6813      	ldr	r3, [r2, #0]
 800e762:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e766:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800e76a:	d02c      	beq.n	800e7c6 <ai_platform_outputs_get+0x1b2>
 800e76c:	6813      	ldr	r3, [r2, #0]
 800e76e:	f240 4183 	movw	r1, #1155	; 0x483
 800e772:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e776:	428b      	cmp	r3, r1
 800e778:	d072      	beq.n	800e860 <ai_platform_outputs_get+0x24c>
 800e77a:	6813      	ldr	r3, [r2, #0]
 800e77c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e780:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800e784:	f000 80ac 	beq.w	800e8e0 <ai_platform_outputs_get+0x2cc>
 800e788:	6813      	ldr	r3, [r2, #0]
 800e78a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d129      	bne.n	800e7e6 <ai_platform_outputs_get+0x1d2>
 800e792:	4a4f      	ldr	r2, [pc, #316]	; (800e8d0 <ai_platform_outputs_get+0x2bc>)
 800e794:	2301      	movs	r3, #1
 800e796:	6093      	str	r3, [r2, #8]
 800e798:	6893      	ldr	r3, [r2, #8]
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	d1fc      	bne.n	800e798 <ai_platform_outputs_get+0x184>
 800e79e:	494d      	ldr	r1, [pc, #308]	; (800e8d4 <ai_platform_outputs_get+0x2c0>)
 800e7a0:	4b4d      	ldr	r3, [pc, #308]	; (800e8d8 <ai_platform_outputs_get+0x2c4>)
 800e7a2:	6011      	str	r1, [r2, #0]
 800e7a4:	6812      	ldr	r2, [r2, #0]
 800e7a6:	429a      	cmp	r2, r3
 800e7a8:	d01d      	beq.n	800e7e6 <ai_platform_outputs_get+0x1d2>
 800e7aa:	e7fe      	b.n	800e7aa <ai_platform_outputs_get+0x196>
 800e7ac:	4a48      	ldr	r2, [pc, #288]	; (800e8d0 <ai_platform_outputs_get+0x2bc>)
 800e7ae:	2301      	movs	r3, #1
 800e7b0:	6093      	str	r3, [r2, #8]
 800e7b2:	6893      	ldr	r3, [r2, #8]
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	d1fc      	bne.n	800e7b2 <ai_platform_outputs_get+0x19e>
 800e7b8:	4946      	ldr	r1, [pc, #280]	; (800e8d4 <ai_platform_outputs_get+0x2c0>)
 800e7ba:	4b47      	ldr	r3, [pc, #284]	; (800e8d8 <ai_platform_outputs_get+0x2c4>)
 800e7bc:	6011      	str	r1, [r2, #0]
 800e7be:	6812      	ldr	r2, [r2, #0]
 800e7c0:	429a      	cmp	r2, r3
 800e7c2:	d010      	beq.n	800e7e6 <ai_platform_outputs_get+0x1d2>
 800e7c4:	e7fe      	b.n	800e7c4 <ai_platform_outputs_get+0x1b0>
 800e7c6:	4a45      	ldr	r2, [pc, #276]	; (800e8dc <ai_platform_outputs_get+0x2c8>)
 800e7c8:	2301      	movs	r3, #1
 800e7ca:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800e7ce:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	d1fb      	bne.n	800e7ce <ai_platform_outputs_get+0x1ba>
 800e7d6:	493f      	ldr	r1, [pc, #252]	; (800e8d4 <ai_platform_outputs_get+0x2c0>)
 800e7d8:	4b3f      	ldr	r3, [pc, #252]	; (800e8d8 <ai_platform_outputs_get+0x2c4>)
 800e7da:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800e7de:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800e7e2:	429a      	cmp	r2, r3
 800e7e4:	d113      	bne.n	800e80e <ai_platform_outputs_get+0x1fa>
 800e7e6:	f7ff fbab 	bl	800df40 <_ai_platform_release_crc>
 800e7ea:	2000      	movs	r0, #0
 800e7ec:	b005      	add	sp, #20
 800e7ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7f2:	4a37      	ldr	r2, [pc, #220]	; (800e8d0 <ai_platform_outputs_get+0x2bc>)
 800e7f4:	2301      	movs	r3, #1
 800e7f6:	6093      	str	r3, [r2, #8]
 800e7f8:	6893      	ldr	r3, [r2, #8]
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d1fc      	bne.n	800e7f8 <ai_platform_outputs_get+0x1e4>
 800e7fe:	4b35      	ldr	r3, [pc, #212]	; (800e8d4 <ai_platform_outputs_get+0x2c0>)
 800e800:	6013      	str	r3, [r2, #0]
 800e802:	4b35      	ldr	r3, [pc, #212]	; (800e8d8 <ai_platform_outputs_get+0x2c4>)
 800e804:	6812      	ldr	r2, [r2, #0]
 800e806:	429a      	cmp	r2, r3
 800e808:	f43f af3f 	beq.w	800e68a <ai_platform_outputs_get+0x76>
 800e80c:	e7fe      	b.n	800e80c <ai_platform_outputs_get+0x1f8>
 800e80e:	e7fe      	b.n	800e80e <ai_platform_outputs_get+0x1fa>
 800e810:	4a32      	ldr	r2, [pc, #200]	; (800e8dc <ai_platform_outputs_get+0x2c8>)
 800e812:	2301      	movs	r3, #1
 800e814:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800e818:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d1fb      	bne.n	800e818 <ai_platform_outputs_get+0x204>
 800e820:	4b2c      	ldr	r3, [pc, #176]	; (800e8d4 <ai_platform_outputs_get+0x2c0>)
 800e822:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800e826:	4b2c      	ldr	r3, [pc, #176]	; (800e8d8 <ai_platform_outputs_get+0x2c4>)
 800e828:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800e82c:	429a      	cmp	r2, r3
 800e82e:	f43f af2c 	beq.w	800e68a <ai_platform_outputs_get+0x76>
 800e832:	e7fe      	b.n	800e832 <ai_platform_outputs_get+0x21e>
 800e834:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800e838:	b14c      	cbz	r4, 800e84e <ai_platform_outputs_get+0x23a>
 800e83a:	f8da 3014 	ldr.w	r3, [sl, #20]
 800e83e:	6858      	ldr	r0, [r3, #4]
 800e840:	9b02      	ldr	r3, [sp, #8]
 800e842:	2b00      	cmp	r3, #0
 800e844:	d0d2      	beq.n	800e7ec <ai_platform_outputs_get+0x1d8>
 800e846:	801c      	strh	r4, [r3, #0]
 800e848:	b005      	add	sp, #20
 800e84a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e84e:	2400      	movs	r4, #0
 800e850:	2218      	movs	r2, #24
 800e852:	2111      	movs	r1, #17
 800e854:	f109 0010 	add.w	r0, r9, #16
 800e858:	f000 ffea 	bl	800f830 <core_set_error>
 800e85c:	4620      	mov	r0, r4
 800e85e:	e7ef      	b.n	800e840 <ai_platform_outputs_get+0x22c>
 800e860:	4a1e      	ldr	r2, [pc, #120]	; (800e8dc <ai_platform_outputs_get+0x2c8>)
 800e862:	2301      	movs	r3, #1
 800e864:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800e868:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	d1fb      	bne.n	800e868 <ai_platform_outputs_get+0x254>
 800e870:	4918      	ldr	r1, [pc, #96]	; (800e8d4 <ai_platform_outputs_get+0x2c0>)
 800e872:	4b19      	ldr	r3, [pc, #100]	; (800e8d8 <ai_platform_outputs_get+0x2c4>)
 800e874:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800e878:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800e87c:	429a      	cmp	r2, r3
 800e87e:	d0b2      	beq.n	800e7e6 <ai_platform_outputs_get+0x1d2>
 800e880:	e7fe      	b.n	800e880 <ai_platform_outputs_get+0x26c>
 800e882:	4a16      	ldr	r2, [pc, #88]	; (800e8dc <ai_platform_outputs_get+0x2c8>)
 800e884:	2301      	movs	r3, #1
 800e886:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800e88a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800e88e:	2b00      	cmp	r3, #0
 800e890:	d1fb      	bne.n	800e88a <ai_platform_outputs_get+0x276>
 800e892:	4b10      	ldr	r3, [pc, #64]	; (800e8d4 <ai_platform_outputs_get+0x2c0>)
 800e894:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800e898:	4b0f      	ldr	r3, [pc, #60]	; (800e8d8 <ai_platform_outputs_get+0x2c4>)
 800e89a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800e89e:	429a      	cmp	r2, r3
 800e8a0:	f43f aef3 	beq.w	800e68a <ai_platform_outputs_get+0x76>
 800e8a4:	e7fe      	b.n	800e8a4 <ai_platform_outputs_get+0x290>
 800e8a6:	4a0a      	ldr	r2, [pc, #40]	; (800e8d0 <ai_platform_outputs_get+0x2bc>)
 800e8a8:	2301      	movs	r3, #1
 800e8aa:	6093      	str	r3, [r2, #8]
 800e8ac:	6893      	ldr	r3, [r2, #8]
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	d1fc      	bne.n	800e8ac <ai_platform_outputs_get+0x298>
 800e8b2:	4b08      	ldr	r3, [pc, #32]	; (800e8d4 <ai_platform_outputs_get+0x2c0>)
 800e8b4:	6013      	str	r3, [r2, #0]
 800e8b6:	4b08      	ldr	r3, [pc, #32]	; (800e8d8 <ai_platform_outputs_get+0x2c4>)
 800e8b8:	6812      	ldr	r2, [r2, #0]
 800e8ba:	429a      	cmp	r2, r3
 800e8bc:	f43f aee5 	beq.w	800e68a <ai_platform_outputs_get+0x76>
 800e8c0:	e7fe      	b.n	800e8c0 <ai_platform_outputs_get+0x2ac>
 800e8c2:	bf00      	nop
 800e8c4:	a1c00100 	.word	0xa1c00100
 800e8c8:	e0042000 	.word	0xe0042000
 800e8cc:	5c001000 	.word	0x5c001000
 800e8d0:	40023000 	.word	0x40023000
 800e8d4:	f407a5c2 	.word	0xf407a5c2
 800e8d8:	b5e8b5cd 	.word	0xb5e8b5cd
 800e8dc:	58024000 	.word	0x58024000
 800e8e0:	4a0d      	ldr	r2, [pc, #52]	; (800e918 <ai_platform_outputs_get+0x304>)
 800e8e2:	2301      	movs	r3, #1
 800e8e4:	6093      	str	r3, [r2, #8]
 800e8e6:	6893      	ldr	r3, [r2, #8]
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	d1fc      	bne.n	800e8e6 <ai_platform_outputs_get+0x2d2>
 800e8ec:	490b      	ldr	r1, [pc, #44]	; (800e91c <ai_platform_outputs_get+0x308>)
 800e8ee:	4b0c      	ldr	r3, [pc, #48]	; (800e920 <ai_platform_outputs_get+0x30c>)
 800e8f0:	6011      	str	r1, [r2, #0]
 800e8f2:	6812      	ldr	r2, [r2, #0]
 800e8f4:	429a      	cmp	r2, r3
 800e8f6:	f43f af76 	beq.w	800e7e6 <ai_platform_outputs_get+0x1d2>
 800e8fa:	e7fe      	b.n	800e8fa <ai_platform_outputs_get+0x2e6>
 800e8fc:	4a06      	ldr	r2, [pc, #24]	; (800e918 <ai_platform_outputs_get+0x304>)
 800e8fe:	2301      	movs	r3, #1
 800e900:	6093      	str	r3, [r2, #8]
 800e902:	6893      	ldr	r3, [r2, #8]
 800e904:	2b00      	cmp	r3, #0
 800e906:	d1fc      	bne.n	800e902 <ai_platform_outputs_get+0x2ee>
 800e908:	4b04      	ldr	r3, [pc, #16]	; (800e91c <ai_platform_outputs_get+0x308>)
 800e90a:	6013      	str	r3, [r2, #0]
 800e90c:	4b04      	ldr	r3, [pc, #16]	; (800e920 <ai_platform_outputs_get+0x30c>)
 800e90e:	6812      	ldr	r2, [r2, #0]
 800e910:	429a      	cmp	r2, r3
 800e912:	f43f aeba 	beq.w	800e68a <ai_platform_outputs_get+0x76>
 800e916:	e7fe      	b.n	800e916 <ai_platform_outputs_get+0x302>
 800e918:	40023000 	.word	0x40023000
 800e91c:	f407a5c2 	.word	0xf407a5c2
 800e920:	b5e8b5cd 	.word	0xb5e8b5cd

0800e924 <ai_platform_network_create>:
 800e924:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e928:	b083      	sub	sp, #12
 800e92a:	4604      	mov	r4, r0
 800e92c:	4615      	mov	r5, r2
 800e92e:	461e      	mov	r6, r3
 800e930:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 800e934:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 800e938:	f7ff fb00 	bl	800df3c <_ai_platform_acquire_crc>
 800e93c:	2800      	cmp	r0, #0
 800e93e:	f000 80bd 	beq.w	800eabc <ai_platform_network_create+0x198>
 800e942:	4ba5      	ldr	r3, [pc, #660]	; (800ebd8 <ai_platform_network_create+0x2b4>)
 800e944:	f46f 6c8a 	mvn.w	ip, #1104	; 0x450
 800e948:	4601      	mov	r1, r0
 800e94a:	681b      	ldr	r3, [r3, #0]
 800e94c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e950:	eb03 020c 	add.w	r2, r3, ip
 800e954:	2a01      	cmp	r2, #1
 800e956:	f240 80a8 	bls.w	800eaaa <ai_platform_network_create+0x186>
 800e95a:	f240 4249 	movw	r2, #1097	; 0x449
 800e95e:	4293      	cmp	r3, r2
 800e960:	f000 80a3 	beq.w	800eaaa <ai_platform_network_create+0x186>
 800e964:	4a9d      	ldr	r2, [pc, #628]	; (800ebdc <ai_platform_network_create+0x2b8>)
 800e966:	6813      	ldr	r3, [r2, #0]
 800e968:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e96c:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800e970:	f000 80b9 	beq.w	800eae6 <ai_platform_network_create+0x1c2>
 800e974:	6813      	ldr	r3, [r2, #0]
 800e976:	f240 4c83 	movw	ip, #1155	; 0x483
 800e97a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e97e:	4563      	cmp	r3, ip
 800e980:	f000 80a1 	beq.w	800eac6 <ai_platform_network_create+0x1a2>
 800e984:	6813      	ldr	r3, [r2, #0]
 800e986:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e98a:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800e98e:	f000 8153 	beq.w	800ec38 <ai_platform_network_create+0x314>
 800e992:	6813      	ldr	r3, [r2, #0]
 800e994:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e998:	2b00      	cmp	r3, #0
 800e99a:	f040 808d 	bne.w	800eab8 <ai_platform_network_create+0x194>
 800e99e:	4a90      	ldr	r2, [pc, #576]	; (800ebe0 <ai_platform_network_create+0x2bc>)
 800e9a0:	2318      	movs	r3, #24
 800e9a2:	6093      	str	r3, [r2, #8]
 800e9a4:	6893      	ldr	r3, [r2, #8]
 800e9a6:	2b18      	cmp	r3, #24
 800e9a8:	f040 8086 	bne.w	800eab8 <ai_platform_network_create+0x194>
 800e9ac:	2301      	movs	r3, #1
 800e9ae:	6093      	str	r3, [r2, #8]
 800e9b0:	6893      	ldr	r3, [r2, #8]
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	d1fc      	bne.n	800e9b0 <ai_platform_network_create+0x8c>
 800e9b6:	4608      	mov	r0, r1
 800e9b8:	f7ff fac2 	bl	800df40 <_ai_platform_release_crc>
 800e9bc:	f7ff fabe 	bl	800df3c <_ai_platform_acquire_crc>
 800e9c0:	4b85      	ldr	r3, [pc, #532]	; (800ebd8 <ai_platform_network_create+0x2b4>)
 800e9c2:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800e9c6:	681b      	ldr	r3, [r3, #0]
 800e9c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e9cc:	189a      	adds	r2, r3, r2
 800e9ce:	2a01      	cmp	r2, #1
 800e9d0:	f240 809f 	bls.w	800eb12 <ai_platform_network_create+0x1ee>
 800e9d4:	f240 4249 	movw	r2, #1097	; 0x449
 800e9d8:	4293      	cmp	r3, r2
 800e9da:	f000 809a 	beq.w	800eb12 <ai_platform_network_create+0x1ee>
 800e9de:	4a7f      	ldr	r2, [pc, #508]	; (800ebdc <ai_platform_network_create+0x2b8>)
 800e9e0:	6813      	ldr	r3, [r2, #0]
 800e9e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e9e6:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800e9ea:	f000 80a0 	beq.w	800eb2e <ai_platform_network_create+0x20a>
 800e9ee:	6813      	ldr	r3, [r2, #0]
 800e9f0:	f240 4183 	movw	r1, #1155	; 0x483
 800e9f4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e9f8:	428b      	cmp	r3, r1
 800e9fa:	f000 80bf 	beq.w	800eb7c <ai_platform_network_create+0x258>
 800e9fe:	6813      	ldr	r3, [r2, #0]
 800ea00:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ea04:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800ea08:	f000 8123 	beq.w	800ec52 <ai_platform_network_create+0x32e>
 800ea0c:	6813      	ldr	r3, [r2, #0]
 800ea0e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	f000 80c4 	beq.w	800eba0 <ai_platform_network_create+0x27c>
 800ea18:	f7ff fa92 	bl	800df40 <_ai_platform_release_crc>
 800ea1c:	2c00      	cmp	r4, #0
 800ea1e:	f000 80aa 	beq.w	800eb76 <ai_platform_network_create+0x252>
 800ea22:	4b70      	ldr	r3, [pc, #448]	; (800ebe4 <ai_platform_network_create+0x2c0>)
 800ea24:	602b      	str	r3, [r5, #0]
 800ea26:	6025      	str	r5, [r4, #0]
 800ea28:	f000 fefa 	bl	800f820 <core_init>
 800ea2c:	2800      	cmp	r0, #0
 800ea2e:	f000 8090 	beq.w	800eb52 <ai_platform_network_create+0x22e>
 800ea32:	f7ff fa83 	bl	800df3c <_ai_platform_acquire_crc>
 800ea36:	4b68      	ldr	r3, [pc, #416]	; (800ebd8 <ai_platform_network_create+0x2b4>)
 800ea38:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800ea3c:	681b      	ldr	r3, [r3, #0]
 800ea3e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ea42:	185a      	adds	r2, r3, r1
 800ea44:	2a01      	cmp	r2, #1
 800ea46:	f240 80b9 	bls.w	800ebbc <ai_platform_network_create+0x298>
 800ea4a:	f240 4249 	movw	r2, #1097	; 0x449
 800ea4e:	4293      	cmp	r3, r2
 800ea50:	f000 80b4 	beq.w	800ebbc <ai_platform_network_create+0x298>
 800ea54:	4a61      	ldr	r2, [pc, #388]	; (800ebdc <ai_platform_network_create+0x2b8>)
 800ea56:	6813      	ldr	r3, [r2, #0]
 800ea58:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ea5c:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800ea60:	f000 80c8 	beq.w	800ebf4 <ai_platform_network_create+0x2d0>
 800ea64:	6813      	ldr	r3, [r2, #0]
 800ea66:	f240 4183 	movw	r1, #1155	; 0x483
 800ea6a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ea6e:	428b      	cmp	r3, r1
 800ea70:	f000 8107 	beq.w	800ec82 <ai_platform_network_create+0x35e>
 800ea74:	6813      	ldr	r3, [r2, #0]
 800ea76:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ea7a:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800ea7e:	f000 8111 	beq.w	800eca4 <ai_platform_network_create+0x380>
 800ea82:	6813      	ldr	r3, [r2, #0]
 800ea84:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	f040 80c3 	bne.w	800ec14 <ai_platform_network_create+0x2f0>
 800ea8e:	4b54      	ldr	r3, [pc, #336]	; (800ebe0 <ai_platform_network_create+0x2bc>)
 800ea90:	2201      	movs	r2, #1
 800ea92:	609a      	str	r2, [r3, #8]
 800ea94:	689a      	ldr	r2, [r3, #8]
 800ea96:	2a00      	cmp	r2, #0
 800ea98:	d1fc      	bne.n	800ea94 <ai_platform_network_create+0x170>
 800ea9a:	4a53      	ldr	r2, [pc, #332]	; (800ebe8 <ai_platform_network_create+0x2c4>)
 800ea9c:	601a      	str	r2, [r3, #0]
 800ea9e:	681a      	ldr	r2, [r3, #0]
 800eaa0:	4b52      	ldr	r3, [pc, #328]	; (800ebec <ai_platform_network_create+0x2c8>)
 800eaa2:	429a      	cmp	r2, r3
 800eaa4:	f000 80b6 	beq.w	800ec14 <ai_platform_network_create+0x2f0>
 800eaa8:	e7fe      	b.n	800eaa8 <ai_platform_network_create+0x184>
 800eaaa:	4b4d      	ldr	r3, [pc, #308]	; (800ebe0 <ai_platform_network_create+0x2bc>)
 800eaac:	2218      	movs	r2, #24
 800eaae:	609a      	str	r2, [r3, #8]
 800eab0:	689a      	ldr	r2, [r3, #8]
 800eab2:	2a18      	cmp	r2, #24
 800eab4:	d027      	beq.n	800eb06 <ai_platform_network_create+0x1e2>
 800eab6:	4608      	mov	r0, r1
 800eab8:	f7ff fa42 	bl	800df40 <_ai_platform_release_crc>
 800eabc:	f244 1033 	movw	r0, #16691	; 0x4133
 800eac0:	b003      	add	sp, #12
 800eac2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eac6:	4a4a      	ldr	r2, [pc, #296]	; (800ebf0 <ai_platform_network_create+0x2cc>)
 800eac8:	2318      	movs	r3, #24
 800eaca:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800eace:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800ead2:	2b18      	cmp	r3, #24
 800ead4:	d1f0      	bne.n	800eab8 <ai_platform_network_create+0x194>
 800ead6:	2301      	movs	r3, #1
 800ead8:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800eadc:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	d1fb      	bne.n	800eadc <ai_platform_network_create+0x1b8>
 800eae4:	e767      	b.n	800e9b6 <ai_platform_network_create+0x92>
 800eae6:	4a42      	ldr	r2, [pc, #264]	; (800ebf0 <ai_platform_network_create+0x2cc>)
 800eae8:	2318      	movs	r3, #24
 800eaea:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800eaee:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800eaf2:	2b18      	cmp	r3, #24
 800eaf4:	d1e0      	bne.n	800eab8 <ai_platform_network_create+0x194>
 800eaf6:	2301      	movs	r3, #1
 800eaf8:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800eafc:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d1fb      	bne.n	800eafc <ai_platform_network_create+0x1d8>
 800eb04:	e757      	b.n	800e9b6 <ai_platform_network_create+0x92>
 800eb06:	2201      	movs	r2, #1
 800eb08:	609a      	str	r2, [r3, #8]
 800eb0a:	689a      	ldr	r2, [r3, #8]
 800eb0c:	2a00      	cmp	r2, #0
 800eb0e:	d1fc      	bne.n	800eb0a <ai_platform_network_create+0x1e6>
 800eb10:	e751      	b.n	800e9b6 <ai_platform_network_create+0x92>
 800eb12:	4a33      	ldr	r2, [pc, #204]	; (800ebe0 <ai_platform_network_create+0x2bc>)
 800eb14:	2301      	movs	r3, #1
 800eb16:	6093      	str	r3, [r2, #8]
 800eb18:	6891      	ldr	r1, [r2, #8]
 800eb1a:	2900      	cmp	r1, #0
 800eb1c:	d1fc      	bne.n	800eb18 <ai_platform_network_create+0x1f4>
 800eb1e:	4b32      	ldr	r3, [pc, #200]	; (800ebe8 <ai_platform_network_create+0x2c4>)
 800eb20:	6013      	str	r3, [r2, #0]
 800eb22:	4b32      	ldr	r3, [pc, #200]	; (800ebec <ai_platform_network_create+0x2c8>)
 800eb24:	6812      	ldr	r2, [r2, #0]
 800eb26:	429a      	cmp	r2, r3
 800eb28:	f43f af76 	beq.w	800ea18 <ai_platform_network_create+0xf4>
 800eb2c:	e7fe      	b.n	800eb2c <ai_platform_network_create+0x208>
 800eb2e:	4a30      	ldr	r2, [pc, #192]	; (800ebf0 <ai_platform_network_create+0x2cc>)
 800eb30:	2301      	movs	r3, #1
 800eb32:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800eb36:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d1fb      	bne.n	800eb36 <ai_platform_network_create+0x212>
 800eb3e:	4b2a      	ldr	r3, [pc, #168]	; (800ebe8 <ai_platform_network_create+0x2c4>)
 800eb40:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800eb44:	4b29      	ldr	r3, [pc, #164]	; (800ebec <ai_platform_network_create+0x2c8>)
 800eb46:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800eb4a:	429a      	cmp	r2, r3
 800eb4c:	f43f af64 	beq.w	800ea18 <ai_platform_network_create+0xf4>
 800eb50:	e7fe      	b.n	800eb50 <ai_platform_network_create+0x22c>
 800eb52:	f04f 0930 	mov.w	r9, #48	; 0x30
 800eb56:	2300      	movs	r3, #0
 800eb58:	6023      	str	r3, [r4, #0]
 800eb5a:	2410      	movs	r4, #16
 800eb5c:	4642      	mov	r2, r8
 800eb5e:	4639      	mov	r1, r7
 800eb60:	4630      	mov	r0, r6
 800eb62:	f001 fa63 	bl	801002c <ai_version_get>
 800eb66:	4603      	mov	r3, r0
 800eb68:	2000      	movs	r0, #0
 800eb6a:	64ab      	str	r3, [r5, #72]	; 0x48
 800eb6c:	f369 0007 	bfi	r0, r9, #0, #8
 800eb70:	f364 201f 	bfi	r0, r4, #8, #24
 800eb74:	e7a4      	b.n	800eac0 <ai_platform_network_create+0x19c>
 800eb76:	f241 0010 	movw	r0, #4112	; 0x1010
 800eb7a:	e7a1      	b.n	800eac0 <ai_platform_network_create+0x19c>
 800eb7c:	4a1c      	ldr	r2, [pc, #112]	; (800ebf0 <ai_platform_network_create+0x2cc>)
 800eb7e:	2301      	movs	r3, #1
 800eb80:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800eb84:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d1fb      	bne.n	800eb84 <ai_platform_network_create+0x260>
 800eb8c:	4b16      	ldr	r3, [pc, #88]	; (800ebe8 <ai_platform_network_create+0x2c4>)
 800eb8e:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800eb92:	4b16      	ldr	r3, [pc, #88]	; (800ebec <ai_platform_network_create+0x2c8>)
 800eb94:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800eb98:	429a      	cmp	r2, r3
 800eb9a:	f43f af3d 	beq.w	800ea18 <ai_platform_network_create+0xf4>
 800eb9e:	e7fe      	b.n	800eb9e <ai_platform_network_create+0x27a>
 800eba0:	4a0f      	ldr	r2, [pc, #60]	; (800ebe0 <ai_platform_network_create+0x2bc>)
 800eba2:	2301      	movs	r3, #1
 800eba4:	6093      	str	r3, [r2, #8]
 800eba6:	6893      	ldr	r3, [r2, #8]
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d1fc      	bne.n	800eba6 <ai_platform_network_create+0x282>
 800ebac:	4b0e      	ldr	r3, [pc, #56]	; (800ebe8 <ai_platform_network_create+0x2c4>)
 800ebae:	6013      	str	r3, [r2, #0]
 800ebb0:	4b0e      	ldr	r3, [pc, #56]	; (800ebec <ai_platform_network_create+0x2c8>)
 800ebb2:	6812      	ldr	r2, [r2, #0]
 800ebb4:	429a      	cmp	r2, r3
 800ebb6:	f43f af2f 	beq.w	800ea18 <ai_platform_network_create+0xf4>
 800ebba:	e7fe      	b.n	800ebba <ai_platform_network_create+0x296>
 800ebbc:	4a08      	ldr	r2, [pc, #32]	; (800ebe0 <ai_platform_network_create+0x2bc>)
 800ebbe:	2301      	movs	r3, #1
 800ebc0:	6093      	str	r3, [r2, #8]
 800ebc2:	6893      	ldr	r3, [r2, #8]
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d1fc      	bne.n	800ebc2 <ai_platform_network_create+0x29e>
 800ebc8:	4b07      	ldr	r3, [pc, #28]	; (800ebe8 <ai_platform_network_create+0x2c4>)
 800ebca:	6013      	str	r3, [r2, #0]
 800ebcc:	4b07      	ldr	r3, [pc, #28]	; (800ebec <ai_platform_network_create+0x2c8>)
 800ebce:	6812      	ldr	r2, [r2, #0]
 800ebd0:	429a      	cmp	r2, r3
 800ebd2:	d01f      	beq.n	800ec14 <ai_platform_network_create+0x2f0>
 800ebd4:	e7fe      	b.n	800ebd4 <ai_platform_network_create+0x2b0>
 800ebd6:	bf00      	nop
 800ebd8:	e0042000 	.word	0xe0042000
 800ebdc:	5c001000 	.word	0x5c001000
 800ebe0:	40023000 	.word	0x40023000
 800ebe4:	a1c00100 	.word	0xa1c00100
 800ebe8:	f407a5c2 	.word	0xf407a5c2
 800ebec:	b5e8b5cd 	.word	0xb5e8b5cd
 800ebf0:	58024000 	.word	0x58024000
 800ebf4:	4a33      	ldr	r2, [pc, #204]	; (800ecc4 <ai_platform_network_create+0x3a0>)
 800ebf6:	2301      	movs	r3, #1
 800ebf8:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800ebfc:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	d1fb      	bne.n	800ebfc <ai_platform_network_create+0x2d8>
 800ec04:	4b30      	ldr	r3, [pc, #192]	; (800ecc8 <ai_platform_network_create+0x3a4>)
 800ec06:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800ec0a:	4b30      	ldr	r3, [pc, #192]	; (800eccc <ai_platform_network_create+0x3a8>)
 800ec0c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800ec10:	429a      	cmp	r2, r3
 800ec12:	d12c      	bne.n	800ec6e <ai_platform_network_create+0x34a>
 800ec14:	f7ff f994 	bl	800df40 <_ai_platform_release_crc>
 800ec18:	2200      	movs	r2, #0
 800ec1a:	4639      	mov	r1, r7
 800ec1c:	4630      	mov	r0, r6
 800ec1e:	f001 fa05 	bl	801002c <ai_version_get>
 800ec22:	4681      	mov	r9, r0
 800ec24:	2200      	movs	r2, #0
 800ec26:	2105      	movs	r1, #5
 800ec28:	2001      	movs	r0, #1
 800ec2a:	f001 f9ff 	bl	801002c <ai_version_get>
 800ec2e:	4581      	cmp	r9, r0
 800ec30:	d01e      	beq.n	800ec70 <ai_platform_network_create+0x34c>
 800ec32:	f04f 0901 	mov.w	r9, #1
 800ec36:	e78e      	b.n	800eb56 <ai_platform_network_create+0x232>
 800ec38:	4b25      	ldr	r3, [pc, #148]	; (800ecd0 <ai_platform_network_create+0x3ac>)
 800ec3a:	2218      	movs	r2, #24
 800ec3c:	609a      	str	r2, [r3, #8]
 800ec3e:	689a      	ldr	r2, [r3, #8]
 800ec40:	2a18      	cmp	r2, #24
 800ec42:	f47f af39 	bne.w	800eab8 <ai_platform_network_create+0x194>
 800ec46:	2201      	movs	r2, #1
 800ec48:	609a      	str	r2, [r3, #8]
 800ec4a:	689a      	ldr	r2, [r3, #8]
 800ec4c:	2a00      	cmp	r2, #0
 800ec4e:	d1fc      	bne.n	800ec4a <ai_platform_network_create+0x326>
 800ec50:	e6b1      	b.n	800e9b6 <ai_platform_network_create+0x92>
 800ec52:	4a1f      	ldr	r2, [pc, #124]	; (800ecd0 <ai_platform_network_create+0x3ac>)
 800ec54:	2301      	movs	r3, #1
 800ec56:	6093      	str	r3, [r2, #8]
 800ec58:	6893      	ldr	r3, [r2, #8]
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	d1fc      	bne.n	800ec58 <ai_platform_network_create+0x334>
 800ec5e:	4b1a      	ldr	r3, [pc, #104]	; (800ecc8 <ai_platform_network_create+0x3a4>)
 800ec60:	6013      	str	r3, [r2, #0]
 800ec62:	4b1a      	ldr	r3, [pc, #104]	; (800eccc <ai_platform_network_create+0x3a8>)
 800ec64:	6812      	ldr	r2, [r2, #0]
 800ec66:	429a      	cmp	r2, r3
 800ec68:	f43f aed6 	beq.w	800ea18 <ai_platform_network_create+0xf4>
 800ec6c:	e7fe      	b.n	800ec6c <ai_platform_network_create+0x348>
 800ec6e:	e7fe      	b.n	800ec6e <ai_platform_network_create+0x34a>
 800ec70:	4b18      	ldr	r3, [pc, #96]	; (800ecd4 <ai_platform_network_create+0x3b0>)
 800ec72:	a801      	add	r0, sp, #4
 800ec74:	9301      	str	r3, [sp, #4]
 800ec76:	f001 f947 	bl	800ff08 <ai_check_custom_types>
 800ec7a:	b300      	cbz	r0, 800ecbe <ai_platform_network_create+0x39a>
 800ec7c:	2400      	movs	r4, #0
 800ec7e:	46a1      	mov	r9, r4
 800ec80:	e76c      	b.n	800eb5c <ai_platform_network_create+0x238>
 800ec82:	4b10      	ldr	r3, [pc, #64]	; (800ecc4 <ai_platform_network_create+0x3a0>)
 800ec84:	2201      	movs	r2, #1
 800ec86:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 800ec8a:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 800ec8e:	2a00      	cmp	r2, #0
 800ec90:	d1fb      	bne.n	800ec8a <ai_platform_network_create+0x366>
 800ec92:	4a0d      	ldr	r2, [pc, #52]	; (800ecc8 <ai_platform_network_create+0x3a4>)
 800ec94:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 800ec98:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 800ec9c:	4b0b      	ldr	r3, [pc, #44]	; (800eccc <ai_platform_network_create+0x3a8>)
 800ec9e:	429a      	cmp	r2, r3
 800eca0:	d0b8      	beq.n	800ec14 <ai_platform_network_create+0x2f0>
 800eca2:	e7fe      	b.n	800eca2 <ai_platform_network_create+0x37e>
 800eca4:	4b0a      	ldr	r3, [pc, #40]	; (800ecd0 <ai_platform_network_create+0x3ac>)
 800eca6:	2201      	movs	r2, #1
 800eca8:	609a      	str	r2, [r3, #8]
 800ecaa:	689a      	ldr	r2, [r3, #8]
 800ecac:	2a00      	cmp	r2, #0
 800ecae:	d1fc      	bne.n	800ecaa <ai_platform_network_create+0x386>
 800ecb0:	4a05      	ldr	r2, [pc, #20]	; (800ecc8 <ai_platform_network_create+0x3a4>)
 800ecb2:	601a      	str	r2, [r3, #0]
 800ecb4:	681a      	ldr	r2, [r3, #0]
 800ecb6:	4b05      	ldr	r3, [pc, #20]	; (800eccc <ai_platform_network_create+0x3a8>)
 800ecb8:	429a      	cmp	r2, r3
 800ecba:	d0ab      	beq.n	800ec14 <ai_platform_network_create+0x2f0>
 800ecbc:	e7fe      	b.n	800ecbc <ai_platform_network_create+0x398>
 800ecbe:	f04f 0902 	mov.w	r9, #2
 800ecc2:	e748      	b.n	800eb56 <ai_platform_network_create+0x232>
 800ecc4:	58024000 	.word	0x58024000
 800ecc8:	f407a5c2 	.word	0xf407a5c2
 800eccc:	b5e8b5cd 	.word	0xb5e8b5cd
 800ecd0:	40023000 	.word	0x40023000
 800ecd4:	84048403 	.word	0x84048403

0800ecd8 <ai_platform_network_init>:
 800ecd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ecdc:	2800      	cmp	r0, #0
 800ecde:	d052      	beq.n	800ed86 <ai_platform_network_init+0xae>
 800ece0:	4bab      	ldr	r3, [pc, #684]	; (800ef90 <ai_platform_network_init+0x2b8>)
 800ece2:	4604      	mov	r4, r0
 800ece4:	6802      	ldr	r2, [r0, #0]
 800ece6:	429a      	cmp	r2, r3
 800ece8:	d14d      	bne.n	800ed86 <ai_platform_network_init+0xae>
 800ecea:	460d      	mov	r5, r1
 800ecec:	f7ff f926 	bl	800df3c <_ai_platform_acquire_crc>
 800ecf0:	4ba8      	ldr	r3, [pc, #672]	; (800ef94 <ai_platform_network_init+0x2bc>)
 800ecf2:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800ecf6:	681b      	ldr	r3, [r3, #0]
 800ecf8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ecfc:	189a      	adds	r2, r3, r2
 800ecfe:	2a01      	cmp	r2, #1
 800ed00:	f240 809b 	bls.w	800ee3a <ai_platform_network_init+0x162>
 800ed04:	f240 4249 	movw	r2, #1097	; 0x449
 800ed08:	4293      	cmp	r3, r2
 800ed0a:	f000 8096 	beq.w	800ee3a <ai_platform_network_init+0x162>
 800ed0e:	4aa2      	ldr	r2, [pc, #648]	; (800ef98 <ai_platform_network_init+0x2c0>)
 800ed10:	6813      	ldr	r3, [r2, #0]
 800ed12:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ed16:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800ed1a:	f000 809d 	beq.w	800ee58 <ai_platform_network_init+0x180>
 800ed1e:	6813      	ldr	r3, [r2, #0]
 800ed20:	f240 4183 	movw	r1, #1155	; 0x483
 800ed24:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ed28:	428b      	cmp	r3, r1
 800ed2a:	f000 80e4 	beq.w	800eef6 <ai_platform_network_init+0x21e>
 800ed2e:	6813      	ldr	r3, [r2, #0]
 800ed30:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ed34:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800ed38:	f000 811b 	beq.w	800ef72 <ai_platform_network_init+0x29a>
 800ed3c:	6813      	ldr	r3, [r2, #0]
 800ed3e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ed42:	2b00      	cmp	r3, #0
 800ed44:	f000 80f9 	beq.w	800ef3a <ai_platform_network_init+0x262>
 800ed48:	f7ff f8fa 	bl	800df40 <_ai_platform_release_crc>
 800ed4c:	2d00      	cmp	r5, #0
 800ed4e:	f000 8147 	beq.w	800efe0 <ai_platform_network_init+0x308>
 800ed52:	4b92      	ldr	r3, [pc, #584]	; (800ef9c <ai_platform_network_init+0x2c4>)
 800ed54:	682a      	ldr	r2, [r5, #0]
 800ed56:	429a      	cmp	r2, r3
 800ed58:	f040 8090 	bne.w	800ee7c <ai_platform_network_init+0x1a4>
 800ed5c:	692b      	ldr	r3, [r5, #16]
 800ed5e:	89ae      	ldrh	r6, [r5, #12]
 800ed60:	f8b5 c00e 	ldrh.w	ip, [r5, #14]
 800ed64:	e9d5 1201 	ldrd	r1, r2, [r5, #4]
 800ed68:	62a3      	str	r3, [r4, #40]	; 0x28
 800ed6a:	e9c4 1207 	strd	r1, r2, [r4, #28]
 800ed6e:	2303      	movs	r3, #3
 800ed70:	84a6      	strh	r6, [r4, #36]	; 0x24
 800ed72:	4626      	mov	r6, r4
 800ed74:	4620      	mov	r0, r4
 800ed76:	f8a4 c026 	strh.w	ip, [r4, #38]	; 0x26
 800ed7a:	60e3      	str	r3, [r4, #12]
 800ed7c:	f001 f8ec 	bl	800ff58 <ai_layers_init_all>
 800ed80:	4630      	mov	r0, r6
 800ed82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ed86:	f7ff f8d9 	bl	800df3c <_ai_platform_acquire_crc>
 800ed8a:	4b82      	ldr	r3, [pc, #520]	; (800ef94 <ai_platform_network_init+0x2bc>)
 800ed8c:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800ed90:	681b      	ldr	r3, [r3, #0]
 800ed92:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ed96:	185a      	adds	r2, r3, r1
 800ed98:	2a01      	cmp	r2, #1
 800ed9a:	d92b      	bls.n	800edf4 <ai_platform_network_init+0x11c>
 800ed9c:	f240 4249 	movw	r2, #1097	; 0x449
 800eda0:	4293      	cmp	r3, r2
 800eda2:	d027      	beq.n	800edf4 <ai_platform_network_init+0x11c>
 800eda4:	4a7c      	ldr	r2, [pc, #496]	; (800ef98 <ai_platform_network_init+0x2c0>)
 800eda6:	6813      	ldr	r3, [r2, #0]
 800eda8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800edac:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800edb0:	d02d      	beq.n	800ee0e <ai_platform_network_init+0x136>
 800edb2:	6813      	ldr	r3, [r2, #0]
 800edb4:	f240 4183 	movw	r1, #1155	; 0x483
 800edb8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800edbc:	428b      	cmp	r3, r1
 800edbe:	f000 8089 	beq.w	800eed4 <ai_platform_network_init+0x1fc>
 800edc2:	6813      	ldr	r3, [r2, #0]
 800edc4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800edc8:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800edcc:	f000 80c3 	beq.w	800ef56 <ai_platform_network_init+0x27e>
 800edd0:	6813      	ldr	r3, [r2, #0]
 800edd2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800edd6:	2b00      	cmp	r3, #0
 800edd8:	d129      	bne.n	800ee2e <ai_platform_network_init+0x156>
 800edda:	4a71      	ldr	r2, [pc, #452]	; (800efa0 <ai_platform_network_init+0x2c8>)
 800eddc:	2301      	movs	r3, #1
 800edde:	6093      	str	r3, [r2, #8]
 800ede0:	6893      	ldr	r3, [r2, #8]
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d1fc      	bne.n	800ede0 <ai_platform_network_init+0x108>
 800ede6:	496f      	ldr	r1, [pc, #444]	; (800efa4 <ai_platform_network_init+0x2cc>)
 800ede8:	4b6f      	ldr	r3, [pc, #444]	; (800efa8 <ai_platform_network_init+0x2d0>)
 800edea:	6011      	str	r1, [r2, #0]
 800edec:	6812      	ldr	r2, [r2, #0]
 800edee:	429a      	cmp	r2, r3
 800edf0:	d01d      	beq.n	800ee2e <ai_platform_network_init+0x156>
 800edf2:	e7fe      	b.n	800edf2 <ai_platform_network_init+0x11a>
 800edf4:	4a6a      	ldr	r2, [pc, #424]	; (800efa0 <ai_platform_network_init+0x2c8>)
 800edf6:	2301      	movs	r3, #1
 800edf8:	6093      	str	r3, [r2, #8]
 800edfa:	6893      	ldr	r3, [r2, #8]
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	d1fc      	bne.n	800edfa <ai_platform_network_init+0x122>
 800ee00:	4968      	ldr	r1, [pc, #416]	; (800efa4 <ai_platform_network_init+0x2cc>)
 800ee02:	4b69      	ldr	r3, [pc, #420]	; (800efa8 <ai_platform_network_init+0x2d0>)
 800ee04:	6011      	str	r1, [r2, #0]
 800ee06:	6812      	ldr	r2, [r2, #0]
 800ee08:	429a      	cmp	r2, r3
 800ee0a:	d010      	beq.n	800ee2e <ai_platform_network_init+0x156>
 800ee0c:	e7fe      	b.n	800ee0c <ai_platform_network_init+0x134>
 800ee0e:	4a67      	ldr	r2, [pc, #412]	; (800efac <ai_platform_network_init+0x2d4>)
 800ee10:	2301      	movs	r3, #1
 800ee12:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800ee16:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	d1fb      	bne.n	800ee16 <ai_platform_network_init+0x13e>
 800ee1e:	4961      	ldr	r1, [pc, #388]	; (800efa4 <ai_platform_network_init+0x2cc>)
 800ee20:	4b61      	ldr	r3, [pc, #388]	; (800efa8 <ai_platform_network_init+0x2d0>)
 800ee22:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800ee26:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800ee2a:	429a      	cmp	r2, r3
 800ee2c:	d113      	bne.n	800ee56 <ai_platform_network_init+0x17e>
 800ee2e:	2600      	movs	r6, #0
 800ee30:	f7ff f886 	bl	800df40 <_ai_platform_release_crc>
 800ee34:	4630      	mov	r0, r6
 800ee36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ee3a:	4a59      	ldr	r2, [pc, #356]	; (800efa0 <ai_platform_network_init+0x2c8>)
 800ee3c:	2301      	movs	r3, #1
 800ee3e:	6093      	str	r3, [r2, #8]
 800ee40:	6893      	ldr	r3, [r2, #8]
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	d1fc      	bne.n	800ee40 <ai_platform_network_init+0x168>
 800ee46:	4b57      	ldr	r3, [pc, #348]	; (800efa4 <ai_platform_network_init+0x2cc>)
 800ee48:	6013      	str	r3, [r2, #0]
 800ee4a:	4b57      	ldr	r3, [pc, #348]	; (800efa8 <ai_platform_network_init+0x2d0>)
 800ee4c:	6812      	ldr	r2, [r2, #0]
 800ee4e:	429a      	cmp	r2, r3
 800ee50:	f43f af7a 	beq.w	800ed48 <ai_platform_network_init+0x70>
 800ee54:	e7fe      	b.n	800ee54 <ai_platform_network_init+0x17c>
 800ee56:	e7fe      	b.n	800ee56 <ai_platform_network_init+0x17e>
 800ee58:	4a54      	ldr	r2, [pc, #336]	; (800efac <ai_platform_network_init+0x2d4>)
 800ee5a:	2301      	movs	r3, #1
 800ee5c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800ee60:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	d1fb      	bne.n	800ee60 <ai_platform_network_init+0x188>
 800ee68:	4b4e      	ldr	r3, [pc, #312]	; (800efa4 <ai_platform_network_init+0x2cc>)
 800ee6a:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800ee6e:	4b4e      	ldr	r3, [pc, #312]	; (800efa8 <ai_platform_network_init+0x2d0>)
 800ee70:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800ee74:	429a      	cmp	r2, r3
 800ee76:	f43f af67 	beq.w	800ed48 <ai_platform_network_init+0x70>
 800ee7a:	e7fe      	b.n	800ee7a <ai_platform_network_init+0x1a2>
 800ee7c:	2101      	movs	r1, #1
 800ee7e:	4628      	mov	r0, r5
 800ee80:	f105 081c 	add.w	r8, r5, #28
 800ee84:	686e      	ldr	r6, [r5, #4]
 800ee86:	f7ff f80b 	bl	800dea0 <ai_buffer_get_size>
 800ee8a:	4607      	mov	r7, r0
 800ee8c:	2101      	movs	r1, #1
 800ee8e:	4640      	mov	r0, r8
 800ee90:	f8d5 9020 	ldr.w	r9, [r5, #32]
 800ee94:	f7ff f804 	bl	800dea0 <ai_buffer_get_size>
 800ee98:	2f00      	cmp	r7, #0
 800ee9a:	d13e      	bne.n	800ef1a <ai_platform_network_init+0x242>
 800ee9c:	2800      	cmp	r0, #0
 800ee9e:	f000 808e 	beq.w	800efbe <ai_platform_network_init+0x2e6>
 800eea2:	f1b9 0f00 	cmp.w	r9, #0
 800eea6:	f000 8094 	beq.w	800efd2 <ai_platform_network_init+0x2fa>
 800eeaa:	f04f 0c01 	mov.w	ip, #1
 800eeae:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800eeb0:	2600      	movs	r6, #0
 800eeb2:	83e7      	strh	r7, [r4, #30]
 800eeb4:	4563      	cmp	r3, ip
 800eeb6:	83a6      	strh	r6, [r4, #28]
 800eeb8:	d37a      	bcc.n	800efb0 <ai_platform_network_init+0x2d8>
 800eeba:	f1bc 0f00 	cmp.w	ip, #0
 800eebe:	f000 809c 	beq.w	800effa <ai_platform_network_init+0x322>
 800eec2:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800eec4:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
 800eec8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800eeca:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 800eece:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800eed2:	e74c      	b.n	800ed6e <ai_platform_network_init+0x96>
 800eed4:	4a35      	ldr	r2, [pc, #212]	; (800efac <ai_platform_network_init+0x2d4>)
 800eed6:	2301      	movs	r3, #1
 800eed8:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800eedc:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800eee0:	2b00      	cmp	r3, #0
 800eee2:	d1fb      	bne.n	800eedc <ai_platform_network_init+0x204>
 800eee4:	492f      	ldr	r1, [pc, #188]	; (800efa4 <ai_platform_network_init+0x2cc>)
 800eee6:	4b30      	ldr	r3, [pc, #192]	; (800efa8 <ai_platform_network_init+0x2d0>)
 800eee8:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800eeec:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800eef0:	429a      	cmp	r2, r3
 800eef2:	d09c      	beq.n	800ee2e <ai_platform_network_init+0x156>
 800eef4:	e7fe      	b.n	800eef4 <ai_platform_network_init+0x21c>
 800eef6:	4a2d      	ldr	r2, [pc, #180]	; (800efac <ai_platform_network_init+0x2d4>)
 800eef8:	2301      	movs	r3, #1
 800eefa:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800eefe:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	d1fb      	bne.n	800eefe <ai_platform_network_init+0x226>
 800ef06:	4b27      	ldr	r3, [pc, #156]	; (800efa4 <ai_platform_network_init+0x2cc>)
 800ef08:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800ef0c:	4b26      	ldr	r3, [pc, #152]	; (800efa8 <ai_platform_network_init+0x2d0>)
 800ef0e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800ef12:	429a      	cmp	r2, r3
 800ef14:	f43f af18 	beq.w	800ed48 <ai_platform_network_init+0x70>
 800ef18:	e7fe      	b.n	800ef18 <ai_platform_network_init+0x240>
 800ef1a:	2800      	cmp	r0, #0
 800ef1c:	d153      	bne.n	800efc6 <ai_platform_network_init+0x2ee>
 800ef1e:	4680      	mov	r8, r0
 800ef20:	4684      	mov	ip, r0
 800ef22:	2e00      	cmp	r6, #0
 800ef24:	d063      	beq.n	800efee <ai_platform_network_init+0x316>
 800ef26:	8be6      	ldrh	r6, [r4, #30]
 800ef28:	2e00      	cmp	r6, #0
 800ef2a:	d168      	bne.n	800effe <ai_platform_network_init+0x326>
 800ef2c:	2212      	movs	r2, #18
 800ef2e:	2116      	movs	r1, #22
 800ef30:	f104 0010 	add.w	r0, r4, #16
 800ef34:	f000 fc7c 	bl	800f830 <core_set_error>
 800ef38:	e77c      	b.n	800ee34 <ai_platform_network_init+0x15c>
 800ef3a:	4a19      	ldr	r2, [pc, #100]	; (800efa0 <ai_platform_network_init+0x2c8>)
 800ef3c:	2301      	movs	r3, #1
 800ef3e:	6093      	str	r3, [r2, #8]
 800ef40:	6893      	ldr	r3, [r2, #8]
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	d1fc      	bne.n	800ef40 <ai_platform_network_init+0x268>
 800ef46:	4b17      	ldr	r3, [pc, #92]	; (800efa4 <ai_platform_network_init+0x2cc>)
 800ef48:	6013      	str	r3, [r2, #0]
 800ef4a:	4b17      	ldr	r3, [pc, #92]	; (800efa8 <ai_platform_network_init+0x2d0>)
 800ef4c:	6812      	ldr	r2, [r2, #0]
 800ef4e:	429a      	cmp	r2, r3
 800ef50:	f43f aefa 	beq.w	800ed48 <ai_platform_network_init+0x70>
 800ef54:	e7fe      	b.n	800ef54 <ai_platform_network_init+0x27c>
 800ef56:	4a12      	ldr	r2, [pc, #72]	; (800efa0 <ai_platform_network_init+0x2c8>)
 800ef58:	2301      	movs	r3, #1
 800ef5a:	6093      	str	r3, [r2, #8]
 800ef5c:	6893      	ldr	r3, [r2, #8]
 800ef5e:	2b00      	cmp	r3, #0
 800ef60:	d1fc      	bne.n	800ef5c <ai_platform_network_init+0x284>
 800ef62:	4910      	ldr	r1, [pc, #64]	; (800efa4 <ai_platform_network_init+0x2cc>)
 800ef64:	4b10      	ldr	r3, [pc, #64]	; (800efa8 <ai_platform_network_init+0x2d0>)
 800ef66:	6011      	str	r1, [r2, #0]
 800ef68:	6812      	ldr	r2, [r2, #0]
 800ef6a:	429a      	cmp	r2, r3
 800ef6c:	f43f af5f 	beq.w	800ee2e <ai_platform_network_init+0x156>
 800ef70:	e7fe      	b.n	800ef70 <ai_platform_network_init+0x298>
 800ef72:	4a0b      	ldr	r2, [pc, #44]	; (800efa0 <ai_platform_network_init+0x2c8>)
 800ef74:	2301      	movs	r3, #1
 800ef76:	6093      	str	r3, [r2, #8]
 800ef78:	6893      	ldr	r3, [r2, #8]
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	d1fc      	bne.n	800ef78 <ai_platform_network_init+0x2a0>
 800ef7e:	4b09      	ldr	r3, [pc, #36]	; (800efa4 <ai_platform_network_init+0x2cc>)
 800ef80:	6013      	str	r3, [r2, #0]
 800ef82:	4b09      	ldr	r3, [pc, #36]	; (800efa8 <ai_platform_network_init+0x2d0>)
 800ef84:	6812      	ldr	r2, [r2, #0]
 800ef86:	429a      	cmp	r2, r3
 800ef88:	f43f aede 	beq.w	800ed48 <ai_platform_network_init+0x70>
 800ef8c:	e7fe      	b.n	800ef8c <ai_platform_network_init+0x2b4>
 800ef8e:	bf00      	nop
 800ef90:	a1c00100 	.word	0xa1c00100
 800ef94:	e0042000 	.word	0xe0042000
 800ef98:	5c001000 	.word	0x5c001000
 800ef9c:	a1facade 	.word	0xa1facade
 800efa0:	40023000 	.word	0x40023000
 800efa4:	f407a5c2 	.word	0xf407a5c2
 800efa8:	b5e8b5cd 	.word	0xb5e8b5cd
 800efac:	58024000 	.word	0x58024000
 800efb0:	2213      	movs	r2, #19
 800efb2:	2116      	movs	r1, #22
 800efb4:	f104 0010 	add.w	r0, r4, #16
 800efb8:	f000 fc3a 	bl	800f830 <core_set_error>
 800efbc:	e73a      	b.n	800ee34 <ai_platform_network_init+0x15c>
 800efbe:	4607      	mov	r7, r0
 800efc0:	4680      	mov	r8, r0
 800efc2:	4684      	mov	ip, r0
 800efc4:	e773      	b.n	800eeae <ai_platform_network_init+0x1d6>
 800efc6:	f1b9 0f00 	cmp.w	r9, #0
 800efca:	d002      	beq.n	800efd2 <ai_platform_network_init+0x2fa>
 800efcc:	f04f 0c01 	mov.w	ip, #1
 800efd0:	e7a7      	b.n	800ef22 <ai_platform_network_init+0x24a>
 800efd2:	2110      	movs	r1, #16
 800efd4:	2213      	movs	r2, #19
 800efd6:	2600      	movs	r6, #0
 800efd8:	1860      	adds	r0, r4, r1
 800efda:	f000 fc29 	bl	800f830 <core_set_error>
 800efde:	e729      	b.n	800ee34 <ai_platform_network_init+0x15c>
 800efe0:	2110      	movs	r1, #16
 800efe2:	2211      	movs	r2, #17
 800efe4:	462e      	mov	r6, r5
 800efe6:	1860      	adds	r0, r4, r1
 800efe8:	f000 fc22 	bl	800f830 <core_set_error>
 800efec:	e722      	b.n	800ee34 <ai_platform_network_init+0x15c>
 800efee:	2110      	movs	r1, #16
 800eff0:	2212      	movs	r2, #18
 800eff2:	1860      	adds	r0, r4, r1
 800eff4:	f000 fc1c 	bl	800f830 <core_set_error>
 800eff8:	e71c      	b.n	800ee34 <ai_platform_network_init+0x15c>
 800effa:	4666      	mov	r6, ip
 800effc:	e6b7      	b.n	800ed6e <ai_platform_network_init+0x96>
 800effe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f000:	6a26      	ldr	r6, [r4, #32]
 800f002:	2701      	movs	r7, #1
 800f004:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800f006:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800f00a:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 800f00e:	e74e      	b.n	800eeae <ai_platform_network_init+0x1d6>

0800f010 <ai_platform_network_post_init>:
 800f010:	b538      	push	{r3, r4, r5, lr}
 800f012:	2800      	cmp	r0, #0
 800f014:	d04e      	beq.n	800f0b4 <ai_platform_network_post_init+0xa4>
 800f016:	4b8c      	ldr	r3, [pc, #560]	; (800f248 <ai_platform_network_post_init+0x238>)
 800f018:	4604      	mov	r4, r0
 800f01a:	6802      	ldr	r2, [r0, #0]
 800f01c:	429a      	cmp	r2, r3
 800f01e:	d149      	bne.n	800f0b4 <ai_platform_network_post_init+0xa4>
 800f020:	f7fe ff8c 	bl	800df3c <_ai_platform_acquire_crc>
 800f024:	4b89      	ldr	r3, [pc, #548]	; (800f24c <ai_platform_network_post_init+0x23c>)
 800f026:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800f02a:	681b      	ldr	r3, [r3, #0]
 800f02c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f030:	189a      	adds	r2, r3, r2
 800f032:	2a01      	cmp	r2, #1
 800f034:	f240 8095 	bls.w	800f162 <ai_platform_network_post_init+0x152>
 800f038:	f240 4249 	movw	r2, #1097	; 0x449
 800f03c:	4293      	cmp	r3, r2
 800f03e:	f000 8090 	beq.w	800f162 <ai_platform_network_post_init+0x152>
 800f042:	4a83      	ldr	r2, [pc, #524]	; (800f250 <ai_platform_network_post_init+0x240>)
 800f044:	6813      	ldr	r3, [r2, #0]
 800f046:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f04a:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800f04e:	f000 8096 	beq.w	800f17e <ai_platform_network_post_init+0x16e>
 800f052:	6813      	ldr	r3, [r2, #0]
 800f054:	f240 4183 	movw	r1, #1155	; 0x483
 800f058:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f05c:	428b      	cmp	r3, r1
 800f05e:	f000 80b8 	beq.w	800f1d2 <ai_platform_network_post_init+0x1c2>
 800f062:	6813      	ldr	r3, [r2, #0]
 800f064:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f068:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800f06c:	f000 80de 	beq.w	800f22c <ai_platform_network_post_init+0x21c>
 800f070:	6813      	ldr	r3, [r2, #0]
 800f072:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f076:	2b00      	cmp	r3, #0
 800f078:	f000 80bd 	beq.w	800f1f6 <ai_platform_network_post_init+0x1e6>
 800f07c:	f7fe ff60 	bl	800df40 <_ai_platform_release_crc>
 800f080:	68e3      	ldr	r3, [r4, #12]
 800f082:	f013 0502 	ands.w	r5, r3, #2
 800f086:	f000 808c 	beq.w	800f1a2 <ai_platform_network_post_init+0x192>
 800f08a:	4620      	mov	r0, r4
 800f08c:	f000 ff72 	bl	800ff74 <ai_layers_post_init_all>
 800f090:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800f092:	b16b      	cbz	r3, 800f0b0 <ai_platform_network_post_init+0xa0>
 800f094:	6b65      	ldr	r5, [r4, #52]	; 0x34
 800f096:	e007      	b.n	800f0a8 <ai_platform_network_post_init+0x98>
 800f098:	e9d4 320f 	ldrd	r3, r2, [r4, #60]	; 0x3c
 800f09c:	4798      	blx	r3
 800f09e:	692b      	ldr	r3, [r5, #16]
 800f0a0:	b133      	cbz	r3, 800f0b0 <ai_platform_network_post_init+0xa0>
 800f0a2:	42ab      	cmp	r3, r5
 800f0a4:	461d      	mov	r5, r3
 800f0a6:	d003      	beq.n	800f0b0 <ai_platform_network_post_init+0xa0>
 800f0a8:	4629      	mov	r1, r5
 800f0aa:	2000      	movs	r0, #0
 800f0ac:	2d00      	cmp	r5, #0
 800f0ae:	d1f3      	bne.n	800f098 <ai_platform_network_post_init+0x88>
 800f0b0:	2001      	movs	r0, #1
 800f0b2:	bd38      	pop	{r3, r4, r5, pc}
 800f0b4:	f7fe ff42 	bl	800df3c <_ai_platform_acquire_crc>
 800f0b8:	4b64      	ldr	r3, [pc, #400]	; (800f24c <ai_platform_network_post_init+0x23c>)
 800f0ba:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800f0be:	681b      	ldr	r3, [r3, #0]
 800f0c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f0c4:	185a      	adds	r2, r3, r1
 800f0c6:	2a01      	cmp	r2, #1
 800f0c8:	d92a      	bls.n	800f120 <ai_platform_network_post_init+0x110>
 800f0ca:	f240 4249 	movw	r2, #1097	; 0x449
 800f0ce:	4293      	cmp	r3, r2
 800f0d0:	d026      	beq.n	800f120 <ai_platform_network_post_init+0x110>
 800f0d2:	4a5f      	ldr	r2, [pc, #380]	; (800f250 <ai_platform_network_post_init+0x240>)
 800f0d4:	6813      	ldr	r3, [r2, #0]
 800f0d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f0da:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800f0de:	d02c      	beq.n	800f13a <ai_platform_network_post_init+0x12a>
 800f0e0:	6813      	ldr	r3, [r2, #0]
 800f0e2:	f240 4183 	movw	r1, #1155	; 0x483
 800f0e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f0ea:	428b      	cmp	r3, r1
 800f0ec:	d060      	beq.n	800f1b0 <ai_platform_network_post_init+0x1a0>
 800f0ee:	6813      	ldr	r3, [r2, #0]
 800f0f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f0f4:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800f0f8:	f000 808b 	beq.w	800f212 <ai_platform_network_post_init+0x202>
 800f0fc:	6813      	ldr	r3, [r2, #0]
 800f0fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f102:	2b00      	cmp	r3, #0
 800f104:	d129      	bne.n	800f15a <ai_platform_network_post_init+0x14a>
 800f106:	4a53      	ldr	r2, [pc, #332]	; (800f254 <ai_platform_network_post_init+0x244>)
 800f108:	2301      	movs	r3, #1
 800f10a:	6093      	str	r3, [r2, #8]
 800f10c:	6893      	ldr	r3, [r2, #8]
 800f10e:	2b00      	cmp	r3, #0
 800f110:	d1fc      	bne.n	800f10c <ai_platform_network_post_init+0xfc>
 800f112:	4951      	ldr	r1, [pc, #324]	; (800f258 <ai_platform_network_post_init+0x248>)
 800f114:	4b51      	ldr	r3, [pc, #324]	; (800f25c <ai_platform_network_post_init+0x24c>)
 800f116:	6011      	str	r1, [r2, #0]
 800f118:	6812      	ldr	r2, [r2, #0]
 800f11a:	429a      	cmp	r2, r3
 800f11c:	d01d      	beq.n	800f15a <ai_platform_network_post_init+0x14a>
 800f11e:	e7fe      	b.n	800f11e <ai_platform_network_post_init+0x10e>
 800f120:	4a4c      	ldr	r2, [pc, #304]	; (800f254 <ai_platform_network_post_init+0x244>)
 800f122:	2301      	movs	r3, #1
 800f124:	6093      	str	r3, [r2, #8]
 800f126:	6893      	ldr	r3, [r2, #8]
 800f128:	2b00      	cmp	r3, #0
 800f12a:	d1fc      	bne.n	800f126 <ai_platform_network_post_init+0x116>
 800f12c:	494a      	ldr	r1, [pc, #296]	; (800f258 <ai_platform_network_post_init+0x248>)
 800f12e:	4b4b      	ldr	r3, [pc, #300]	; (800f25c <ai_platform_network_post_init+0x24c>)
 800f130:	6011      	str	r1, [r2, #0]
 800f132:	6812      	ldr	r2, [r2, #0]
 800f134:	429a      	cmp	r2, r3
 800f136:	d010      	beq.n	800f15a <ai_platform_network_post_init+0x14a>
 800f138:	e7fe      	b.n	800f138 <ai_platform_network_post_init+0x128>
 800f13a:	4a49      	ldr	r2, [pc, #292]	; (800f260 <ai_platform_network_post_init+0x250>)
 800f13c:	2301      	movs	r3, #1
 800f13e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800f142:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800f146:	2b00      	cmp	r3, #0
 800f148:	d1fb      	bne.n	800f142 <ai_platform_network_post_init+0x132>
 800f14a:	4943      	ldr	r1, [pc, #268]	; (800f258 <ai_platform_network_post_init+0x248>)
 800f14c:	4b43      	ldr	r3, [pc, #268]	; (800f25c <ai_platform_network_post_init+0x24c>)
 800f14e:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800f152:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800f156:	429a      	cmp	r2, r3
 800f158:	d110      	bne.n	800f17c <ai_platform_network_post_init+0x16c>
 800f15a:	f7fe fef1 	bl	800df40 <_ai_platform_release_crc>
 800f15e:	2000      	movs	r0, #0
 800f160:	bd38      	pop	{r3, r4, r5, pc}
 800f162:	4a3c      	ldr	r2, [pc, #240]	; (800f254 <ai_platform_network_post_init+0x244>)
 800f164:	2301      	movs	r3, #1
 800f166:	6093      	str	r3, [r2, #8]
 800f168:	6893      	ldr	r3, [r2, #8]
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	d1fc      	bne.n	800f168 <ai_platform_network_post_init+0x158>
 800f16e:	493a      	ldr	r1, [pc, #232]	; (800f258 <ai_platform_network_post_init+0x248>)
 800f170:	4b3a      	ldr	r3, [pc, #232]	; (800f25c <ai_platform_network_post_init+0x24c>)
 800f172:	6011      	str	r1, [r2, #0]
 800f174:	6812      	ldr	r2, [r2, #0]
 800f176:	429a      	cmp	r2, r3
 800f178:	d080      	beq.n	800f07c <ai_platform_network_post_init+0x6c>
 800f17a:	e7fe      	b.n	800f17a <ai_platform_network_post_init+0x16a>
 800f17c:	e7fe      	b.n	800f17c <ai_platform_network_post_init+0x16c>
 800f17e:	4a38      	ldr	r2, [pc, #224]	; (800f260 <ai_platform_network_post_init+0x250>)
 800f180:	2301      	movs	r3, #1
 800f182:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800f186:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	d1fb      	bne.n	800f186 <ai_platform_network_post_init+0x176>
 800f18e:	4932      	ldr	r1, [pc, #200]	; (800f258 <ai_platform_network_post_init+0x248>)
 800f190:	4b32      	ldr	r3, [pc, #200]	; (800f25c <ai_platform_network_post_init+0x24c>)
 800f192:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800f196:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800f19a:	429a      	cmp	r2, r3
 800f19c:	f43f af6e 	beq.w	800f07c <ai_platform_network_post_init+0x6c>
 800f1a0:	e7fe      	b.n	800f1a0 <ai_platform_network_post_init+0x190>
 800f1a2:	2210      	movs	r2, #16
 800f1a4:	2111      	movs	r1, #17
 800f1a6:	18a0      	adds	r0, r4, r2
 800f1a8:	f000 fb42 	bl	800f830 <core_set_error>
 800f1ac:	4628      	mov	r0, r5
 800f1ae:	bd38      	pop	{r3, r4, r5, pc}
 800f1b0:	4a2b      	ldr	r2, [pc, #172]	; (800f260 <ai_platform_network_post_init+0x250>)
 800f1b2:	2301      	movs	r3, #1
 800f1b4:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800f1b8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	d1fb      	bne.n	800f1b8 <ai_platform_network_post_init+0x1a8>
 800f1c0:	4925      	ldr	r1, [pc, #148]	; (800f258 <ai_platform_network_post_init+0x248>)
 800f1c2:	4b26      	ldr	r3, [pc, #152]	; (800f25c <ai_platform_network_post_init+0x24c>)
 800f1c4:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800f1c8:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800f1cc:	429a      	cmp	r2, r3
 800f1ce:	d0c4      	beq.n	800f15a <ai_platform_network_post_init+0x14a>
 800f1d0:	e7fe      	b.n	800f1d0 <ai_platform_network_post_init+0x1c0>
 800f1d2:	4a23      	ldr	r2, [pc, #140]	; (800f260 <ai_platform_network_post_init+0x250>)
 800f1d4:	2301      	movs	r3, #1
 800f1d6:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800f1da:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800f1de:	2b00      	cmp	r3, #0
 800f1e0:	d1fb      	bne.n	800f1da <ai_platform_network_post_init+0x1ca>
 800f1e2:	491d      	ldr	r1, [pc, #116]	; (800f258 <ai_platform_network_post_init+0x248>)
 800f1e4:	4b1d      	ldr	r3, [pc, #116]	; (800f25c <ai_platform_network_post_init+0x24c>)
 800f1e6:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800f1ea:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800f1ee:	429a      	cmp	r2, r3
 800f1f0:	f43f af44 	beq.w	800f07c <ai_platform_network_post_init+0x6c>
 800f1f4:	e7fe      	b.n	800f1f4 <ai_platform_network_post_init+0x1e4>
 800f1f6:	4a17      	ldr	r2, [pc, #92]	; (800f254 <ai_platform_network_post_init+0x244>)
 800f1f8:	2301      	movs	r3, #1
 800f1fa:	6093      	str	r3, [r2, #8]
 800f1fc:	6893      	ldr	r3, [r2, #8]
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	d1fc      	bne.n	800f1fc <ai_platform_network_post_init+0x1ec>
 800f202:	4915      	ldr	r1, [pc, #84]	; (800f258 <ai_platform_network_post_init+0x248>)
 800f204:	4b15      	ldr	r3, [pc, #84]	; (800f25c <ai_platform_network_post_init+0x24c>)
 800f206:	6011      	str	r1, [r2, #0]
 800f208:	6812      	ldr	r2, [r2, #0]
 800f20a:	429a      	cmp	r2, r3
 800f20c:	f43f af36 	beq.w	800f07c <ai_platform_network_post_init+0x6c>
 800f210:	e7fe      	b.n	800f210 <ai_platform_network_post_init+0x200>
 800f212:	4a10      	ldr	r2, [pc, #64]	; (800f254 <ai_platform_network_post_init+0x244>)
 800f214:	2301      	movs	r3, #1
 800f216:	6093      	str	r3, [r2, #8]
 800f218:	6893      	ldr	r3, [r2, #8]
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	d1fc      	bne.n	800f218 <ai_platform_network_post_init+0x208>
 800f21e:	490e      	ldr	r1, [pc, #56]	; (800f258 <ai_platform_network_post_init+0x248>)
 800f220:	4b0e      	ldr	r3, [pc, #56]	; (800f25c <ai_platform_network_post_init+0x24c>)
 800f222:	6011      	str	r1, [r2, #0]
 800f224:	6812      	ldr	r2, [r2, #0]
 800f226:	429a      	cmp	r2, r3
 800f228:	d097      	beq.n	800f15a <ai_platform_network_post_init+0x14a>
 800f22a:	e7fe      	b.n	800f22a <ai_platform_network_post_init+0x21a>
 800f22c:	4a09      	ldr	r2, [pc, #36]	; (800f254 <ai_platform_network_post_init+0x244>)
 800f22e:	2301      	movs	r3, #1
 800f230:	6093      	str	r3, [r2, #8]
 800f232:	6893      	ldr	r3, [r2, #8]
 800f234:	2b00      	cmp	r3, #0
 800f236:	d1fc      	bne.n	800f232 <ai_platform_network_post_init+0x222>
 800f238:	4907      	ldr	r1, [pc, #28]	; (800f258 <ai_platform_network_post_init+0x248>)
 800f23a:	4b08      	ldr	r3, [pc, #32]	; (800f25c <ai_platform_network_post_init+0x24c>)
 800f23c:	6011      	str	r1, [r2, #0]
 800f23e:	6812      	ldr	r2, [r2, #0]
 800f240:	429a      	cmp	r2, r3
 800f242:	f43f af1b 	beq.w	800f07c <ai_platform_network_post_init+0x6c>
 800f246:	e7fe      	b.n	800f246 <ai_platform_network_post_init+0x236>
 800f248:	a1c00100 	.word	0xa1c00100
 800f24c:	e0042000 	.word	0xe0042000
 800f250:	5c001000 	.word	0x5c001000
 800f254:	40023000 	.word	0x40023000
 800f258:	f407a5c2 	.word	0xf407a5c2
 800f25c:	b5e8b5cd 	.word	0xb5e8b5cd
 800f260:	58024000 	.word	0x58024000

0800f264 <ai_platform_network_process>:
 800f264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f268:	b085      	sub	sp, #20
 800f26a:	460e      	mov	r6, r1
 800f26c:	4605      	mov	r5, r0
 800f26e:	9201      	str	r2, [sp, #4]
 800f270:	b120      	cbz	r0, 800f27c <ai_platform_network_process+0x18>
 800f272:	4b24      	ldr	r3, [pc, #144]	; (800f304 <ai_platform_network_process+0xa0>)
 800f274:	6802      	ldr	r2, [r0, #0]
 800f276:	429a      	cmp	r2, r3
 800f278:	bf18      	it	ne
 800f27a:	2500      	movne	r5, #0
 800f27c:	f7fe fe5e 	bl	800df3c <_ai_platform_acquire_crc>
 800f280:	4b21      	ldr	r3, [pc, #132]	; (800f308 <ai_platform_network_process+0xa4>)
 800f282:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800f286:	681b      	ldr	r3, [r3, #0]
 800f288:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f28c:	185a      	adds	r2, r3, r1
 800f28e:	2a01      	cmp	r2, #1
 800f290:	d92b      	bls.n	800f2ea <ai_platform_network_process+0x86>
 800f292:	f240 4249 	movw	r2, #1097	; 0x449
 800f296:	4293      	cmp	r3, r2
 800f298:	d027      	beq.n	800f2ea <ai_platform_network_process+0x86>
 800f29a:	4a1c      	ldr	r2, [pc, #112]	; (800f30c <ai_platform_network_process+0xa8>)
 800f29c:	6813      	ldr	r3, [r2, #0]
 800f29e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f2a2:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800f2a6:	d039      	beq.n	800f31c <ai_platform_network_process+0xb8>
 800f2a8:	6813      	ldr	r3, [r2, #0]
 800f2aa:	f240 4183 	movw	r1, #1155	; 0x483
 800f2ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f2b2:	428b      	cmp	r3, r1
 800f2b4:	f000 819c 	beq.w	800f5f0 <ai_platform_network_process+0x38c>
 800f2b8:	6813      	ldr	r3, [r2, #0]
 800f2ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f2be:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800f2c2:	f000 8179 	beq.w	800f5b8 <ai_platform_network_process+0x354>
 800f2c6:	6813      	ldr	r3, [r2, #0]
 800f2c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	d136      	bne.n	800f33e <ai_platform_network_process+0xda>
 800f2d0:	4a0f      	ldr	r2, [pc, #60]	; (800f310 <ai_platform_network_process+0xac>)
 800f2d2:	2301      	movs	r3, #1
 800f2d4:	6093      	str	r3, [r2, #8]
 800f2d6:	6893      	ldr	r3, [r2, #8]
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	d1fc      	bne.n	800f2d6 <ai_platform_network_process+0x72>
 800f2dc:	4b0d      	ldr	r3, [pc, #52]	; (800f314 <ai_platform_network_process+0xb0>)
 800f2de:	6013      	str	r3, [r2, #0]
 800f2e0:	4b0d      	ldr	r3, [pc, #52]	; (800f318 <ai_platform_network_process+0xb4>)
 800f2e2:	6812      	ldr	r2, [r2, #0]
 800f2e4:	429a      	cmp	r2, r3
 800f2e6:	d02a      	beq.n	800f33e <ai_platform_network_process+0xda>
 800f2e8:	e7fe      	b.n	800f2e8 <ai_platform_network_process+0x84>
 800f2ea:	4a09      	ldr	r2, [pc, #36]	; (800f310 <ai_platform_network_process+0xac>)
 800f2ec:	2301      	movs	r3, #1
 800f2ee:	6093      	str	r3, [r2, #8]
 800f2f0:	6893      	ldr	r3, [r2, #8]
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	d1fc      	bne.n	800f2f0 <ai_platform_network_process+0x8c>
 800f2f6:	4b07      	ldr	r3, [pc, #28]	; (800f314 <ai_platform_network_process+0xb0>)
 800f2f8:	6013      	str	r3, [r2, #0]
 800f2fa:	4b07      	ldr	r3, [pc, #28]	; (800f318 <ai_platform_network_process+0xb4>)
 800f2fc:	6812      	ldr	r2, [r2, #0]
 800f2fe:	429a      	cmp	r2, r3
 800f300:	d01d      	beq.n	800f33e <ai_platform_network_process+0xda>
 800f302:	e7fe      	b.n	800f302 <ai_platform_network_process+0x9e>
 800f304:	a1c00100 	.word	0xa1c00100
 800f308:	e0042000 	.word	0xe0042000
 800f30c:	5c001000 	.word	0x5c001000
 800f310:	40023000 	.word	0x40023000
 800f314:	f407a5c2 	.word	0xf407a5c2
 800f318:	b5e8b5cd 	.word	0xb5e8b5cd
 800f31c:	4ab0      	ldr	r2, [pc, #704]	; (800f5e0 <ai_platform_network_process+0x37c>)
 800f31e:	2301      	movs	r3, #1
 800f320:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800f324:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800f328:	2b00      	cmp	r3, #0
 800f32a:	d1fb      	bne.n	800f324 <ai_platform_network_process+0xc0>
 800f32c:	4bad      	ldr	r3, [pc, #692]	; (800f5e4 <ai_platform_network_process+0x380>)
 800f32e:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800f332:	4bad      	ldr	r3, [pc, #692]	; (800f5e8 <ai_platform_network_process+0x384>)
 800f334:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800f338:	429a      	cmp	r2, r3
 800f33a:	f040 812b 	bne.w	800f594 <ai_platform_network_process+0x330>
 800f33e:	f7fe fdff 	bl	800df40 <_ai_platform_release_crc>
 800f342:	2d00      	cmp	r5, #0
 800f344:	f000 8172 	beq.w	800f62c <ai_platform_network_process+0x3c8>
 800f348:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 800f34a:	2b00      	cmp	r3, #0
 800f34c:	f000 8123 	beq.w	800f596 <ai_platform_network_process+0x332>
 800f350:	68eb      	ldr	r3, [r5, #12]
 800f352:	2200      	movs	r2, #0
 800f354:	f8d5 8030 	ldr.w	r8, [r5, #48]	; 0x30
 800f358:	f003 0303 	and.w	r3, r3, #3
 800f35c:	616a      	str	r2, [r5, #20]
 800f35e:	2b03      	cmp	r3, #3
 800f360:	f040 811f 	bne.w	800f5a2 <ai_platform_network_process+0x33e>
 800f364:	2e00      	cmp	r6, #0
 800f366:	f000 8156 	beq.w	800f616 <ai_platform_network_process+0x3b2>
 800f36a:	fab8 f788 	clz	r7, r8
 800f36e:	097f      	lsrs	r7, r7, #5
 800f370:	f1b8 0f00 	cmp.w	r8, #0
 800f374:	f000 814f 	beq.w	800f616 <ai_platform_network_process+0x3b2>
 800f378:	f8b8 3000 	ldrh.w	r3, [r8]
 800f37c:	2b00      	cmp	r3, #0
 800f37e:	f000 814a 	beq.w	800f616 <ai_platform_network_process+0x3b2>
 800f382:	69b3      	ldr	r3, [r6, #24]
 800f384:	681b      	ldr	r3, [r3, #0]
 800f386:	e9cd 3502 	strd	r3, r5, [sp, #8]
 800f38a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f38e:	2b00      	cmp	r3, #0
 800f390:	d072      	beq.n	800f478 <ai_platform_network_process+0x214>
 800f392:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 800f396:	2c00      	cmp	r4, #0
 800f398:	d06e      	beq.n	800f478 <ai_platform_network_process+0x214>
 800f39a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f39e:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 800f3a2:	f8d3 a000 	ldr.w	sl, [r3]
 800f3a6:	eb1a 1907 	adds.w	r9, sl, r7, lsl #4
 800f3aa:	f000 8133 	beq.w	800f614 <ai_platform_network_process+0x3b0>
 800f3ae:	69a3      	ldr	r3, [r4, #24]
 800f3b0:	2101      	movs	r1, #1
 800f3b2:	4630      	mov	r0, r6
 800f3b4:	685d      	ldr	r5, [r3, #4]
 800f3b6:	f7fe fd73 	bl	800dea0 <ai_buffer_get_size>
 800f3ba:	4285      	cmp	r5, r0
 800f3bc:	f0c0 8138 	bcc.w	800f630 <ai_platform_network_process+0x3cc>
 800f3c0:	68e0      	ldr	r0, [r4, #12]
 800f3c2:	69b1      	ldr	r1, [r6, #24]
 800f3c4:	68c2      	ldr	r2, [r0, #12]
 800f3c6:	68cb      	ldr	r3, [r1, #12]
 800f3c8:	429a      	cmp	r2, r3
 800f3ca:	f040 8131 	bne.w	800f630 <ai_platform_network_process+0x3cc>
 800f3ce:	6882      	ldr	r2, [r0, #8]
 800f3d0:	688b      	ldr	r3, [r1, #8]
 800f3d2:	429a      	cmp	r2, r3
 800f3d4:	f040 812c 	bne.w	800f630 <ai_platform_network_process+0x3cc>
 800f3d8:	6842      	ldr	r2, [r0, #4]
 800f3da:	684b      	ldr	r3, [r1, #4]
 800f3dc:	429a      	cmp	r2, r3
 800f3de:	f040 8127 	bne.w	800f630 <ai_platform_network_process+0x3cc>
 800f3e2:	69a3      	ldr	r3, [r4, #24]
 800f3e4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f3e8:	f000 fea8 	bl	801013c <ai_array_get_data_byte_size>
 800f3ec:	4605      	mov	r5, r0
 800f3ee:	4620      	mov	r0, r4
 800f3f0:	f000 fe22 	bl	8010038 <get_tensor_byte_size>
 800f3f4:	4285      	cmp	r5, r0
 800f3f6:	f0c0 811b 	bcc.w	800f630 <ai_platform_network_process+0x3cc>
 800f3fa:	69a3      	ldr	r3, [r4, #24]
 800f3fc:	6818      	ldr	r0, [r3, #0]
 800f3fe:	f000 fe31 	bl	8010064 <ai_array_to_buffer_fmt>
 800f402:	6833      	ldr	r3, [r6, #0]
 800f404:	4058      	eors	r0, r3
 800f406:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 800f40a:	f040 81ca 	bne.w	800f7a2 <ai_platform_network_process+0x53e>
 800f40e:	6873      	ldr	r3, [r6, #4]
 800f410:	2b00      	cmp	r3, #0
 800f412:	f000 81bd 	beq.w	800f790 <ai_platform_network_process+0x52c>
 800f416:	69b3      	ldr	r3, [r6, #24]
 800f418:	681b      	ldr	r3, [r3, #0]
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	f000 81ca 	beq.w	800f7b4 <ai_platform_network_process+0x550>
 800f420:	9a02      	ldr	r2, [sp, #8]
 800f422:	4620      	mov	r0, r4
 800f424:	3701      	adds	r7, #1
 800f426:	361c      	adds	r6, #28
 800f428:	429a      	cmp	r2, r3
 800f42a:	bf38      	it	cc
 800f42c:	461a      	movcc	r2, r3
 800f42e:	9202      	str	r2, [sp, #8]
 800f430:	f000 fe02 	bl	8010038 <get_tensor_byte_size>
 800f434:	f8c9 0008 	str.w	r0, [r9, #8]
 800f438:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800f43c:	681b      	ldr	r3, [r3, #0]
 800f43e:	fb00 f303 	mul.w	r3, r0, r3
 800f442:	f8c9 300c 	str.w	r3, [r9, #12]
 800f446:	f856 1c18 	ldr.w	r1, [r6, #-24]
 800f44a:	440b      	add	r3, r1
 800f44c:	f8c9 1004 	str.w	r1, [r9, #4]
 800f450:	f84a 300b 	str.w	r3, [sl, fp]
 800f454:	69a0      	ldr	r0, [r4, #24]
 800f456:	6803      	ldr	r3, [r0, #0]
 800f458:	009a      	lsls	r2, r3, #2
 800f45a:	f100 80bb 	bmi.w	800f5d4 <ai_platform_network_process+0x370>
 800f45e:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800f462:	1a9b      	subs	r3, r3, r2
 800f464:	4419      	add	r1, r3
 800f466:	6081      	str	r1, [r0, #8]
 800f468:	69a3      	ldr	r3, [r4, #24]
 800f46a:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800f46e:	60da      	str	r2, [r3, #12]
 800f470:	f8b8 3000 	ldrh.w	r3, [r8]
 800f474:	42bb      	cmp	r3, r7
 800f476:	d888      	bhi.n	800f38a <ai_platform_network_process+0x126>
 800f478:	9d03      	ldr	r5, [sp, #12]
 800f47a:	9b01      	ldr	r3, [sp, #4]
 800f47c:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 800f47e:	2b00      	cmp	r3, #0
 800f480:	f000 81a1 	beq.w	800f7c6 <ai_platform_network_process+0x562>
 800f484:	2a01      	cmp	r2, #1
 800f486:	f240 817b 	bls.w	800f780 <ai_platform_network_process+0x51c>
 800f48a:	f8d5 9030 	ldr.w	r9, [r5, #48]	; 0x30
 800f48e:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800f492:	2b00      	cmp	r3, #0
 800f494:	f000 8174 	beq.w	800f780 <ai_platform_network_process+0x51c>
 800f498:	9e01      	ldr	r6, [sp, #4]
 800f49a:	2700      	movs	r7, #0
 800f49c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f4a0:	2b00      	cmp	r3, #0
 800f4a2:	f000 80d3 	beq.w	800f64c <ai_platform_network_process+0x3e8>
 800f4a6:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 800f4aa:	2c00      	cmp	r4, #0
 800f4ac:	f000 80ce 	beq.w	800f64c <ai_platform_network_process+0x3e8>
 800f4b0:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800f4b4:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 800f4b8:	f8d3 8000 	ldr.w	r8, [r3]
 800f4bc:	eb18 1a07 	adds.w	sl, r8, r7, lsl #4
 800f4c0:	f000 819f 	beq.w	800f802 <ai_platform_network_process+0x59e>
 800f4c4:	69a3      	ldr	r3, [r4, #24]
 800f4c6:	2101      	movs	r1, #1
 800f4c8:	4630      	mov	r0, r6
 800f4ca:	685b      	ldr	r3, [r3, #4]
 800f4cc:	9301      	str	r3, [sp, #4]
 800f4ce:	f7fe fce7 	bl	800dea0 <ai_buffer_get_size>
 800f4d2:	9b01      	ldr	r3, [sp, #4]
 800f4d4:	4283      	cmp	r3, r0
 800f4d6:	f0c0 8153 	bcc.w	800f780 <ai_platform_network_process+0x51c>
 800f4da:	68e0      	ldr	r0, [r4, #12]
 800f4dc:	69b1      	ldr	r1, [r6, #24]
 800f4de:	68c2      	ldr	r2, [r0, #12]
 800f4e0:	68cb      	ldr	r3, [r1, #12]
 800f4e2:	429a      	cmp	r2, r3
 800f4e4:	f040 814c 	bne.w	800f780 <ai_platform_network_process+0x51c>
 800f4e8:	6882      	ldr	r2, [r0, #8]
 800f4ea:	688b      	ldr	r3, [r1, #8]
 800f4ec:	429a      	cmp	r2, r3
 800f4ee:	f040 8147 	bne.w	800f780 <ai_platform_network_process+0x51c>
 800f4f2:	6842      	ldr	r2, [r0, #4]
 800f4f4:	684b      	ldr	r3, [r1, #4]
 800f4f6:	429a      	cmp	r2, r3
 800f4f8:	f040 8142 	bne.w	800f780 <ai_platform_network_process+0x51c>
 800f4fc:	69a3      	ldr	r3, [r4, #24]
 800f4fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f502:	f000 fe1b 	bl	801013c <ai_array_get_data_byte_size>
 800f506:	9001      	str	r0, [sp, #4]
 800f508:	4620      	mov	r0, r4
 800f50a:	f000 fd95 	bl	8010038 <get_tensor_byte_size>
 800f50e:	9b01      	ldr	r3, [sp, #4]
 800f510:	4283      	cmp	r3, r0
 800f512:	f0c0 8135 	bcc.w	800f780 <ai_platform_network_process+0x51c>
 800f516:	69a3      	ldr	r3, [r4, #24]
 800f518:	6818      	ldr	r0, [r3, #0]
 800f51a:	f000 fda3 	bl	8010064 <ai_array_to_buffer_fmt>
 800f51e:	6833      	ldr	r3, [r6, #0]
 800f520:	4058      	eors	r0, r3
 800f522:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 800f526:	f040 815c 	bne.w	800f7e2 <ai_platform_network_process+0x57e>
 800f52a:	6873      	ldr	r3, [r6, #4]
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	f000 8150 	beq.w	800f7d2 <ai_platform_network_process+0x56e>
 800f532:	69b3      	ldr	r3, [r6, #24]
 800f534:	681b      	ldr	r3, [r3, #0]
 800f536:	2b00      	cmp	r3, #0
 800f538:	f000 815b 	beq.w	800f7f2 <ai_platform_network_process+0x58e>
 800f53c:	9a02      	ldr	r2, [sp, #8]
 800f53e:	4620      	mov	r0, r4
 800f540:	3701      	adds	r7, #1
 800f542:	361c      	adds	r6, #28
 800f544:	429a      	cmp	r2, r3
 800f546:	bf38      	it	cc
 800f548:	461a      	movcc	r2, r3
 800f54a:	9202      	str	r2, [sp, #8]
 800f54c:	f000 fd74 	bl	8010038 <get_tensor_byte_size>
 800f550:	f8ca 0008 	str.w	r0, [sl, #8]
 800f554:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800f558:	681b      	ldr	r3, [r3, #0]
 800f55a:	fb00 f303 	mul.w	r3, r0, r3
 800f55e:	f8ca 300c 	str.w	r3, [sl, #12]
 800f562:	f856 1c18 	ldr.w	r1, [r6, #-24]
 800f566:	440b      	add	r3, r1
 800f568:	f8ca 1004 	str.w	r1, [sl, #4]
 800f56c:	f848 300b 	str.w	r3, [r8, fp]
 800f570:	69a0      	ldr	r0, [r4, #24]
 800f572:	6803      	ldr	r3, [r0, #0]
 800f574:	009b      	lsls	r3, r3, #2
 800f576:	d464      	bmi.n	800f642 <ai_platform_network_process+0x3de>
 800f578:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800f57c:	1a9b      	subs	r3, r3, r2
 800f57e:	4419      	add	r1, r3
 800f580:	6081      	str	r1, [r0, #8]
 800f582:	69a3      	ldr	r3, [r4, #24]
 800f584:	f8da 2004 	ldr.w	r2, [sl, #4]
 800f588:	60da      	str	r2, [r3, #12]
 800f58a:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800f58e:	429f      	cmp	r7, r3
 800f590:	d384      	bcc.n	800f49c <ai_platform_network_process+0x238>
 800f592:	e05b      	b.n	800f64c <ai_platform_network_process+0x3e8>
 800f594:	e7fe      	b.n	800f594 <ai_platform_network_process+0x330>
 800f596:	68ea      	ldr	r2, [r5, #12]
 800f598:	616b      	str	r3, [r5, #20]
 800f59a:	f002 0203 	and.w	r2, r2, #3
 800f59e:	2a03      	cmp	r2, #3
 800f5a0:	d039      	beq.n	800f616 <ai_platform_network_process+0x3b2>
 800f5a2:	2230      	movs	r2, #48	; 0x30
 800f5a4:	2111      	movs	r1, #17
 800f5a6:	f105 0010 	add.w	r0, r5, #16
 800f5aa:	2400      	movs	r4, #0
 800f5ac:	f000 f940 	bl	800f830 <core_set_error>
 800f5b0:	4620      	mov	r0, r4
 800f5b2:	b005      	add	sp, #20
 800f5b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5b8:	4a0c      	ldr	r2, [pc, #48]	; (800f5ec <ai_platform_network_process+0x388>)
 800f5ba:	2301      	movs	r3, #1
 800f5bc:	6093      	str	r3, [r2, #8]
 800f5be:	6893      	ldr	r3, [r2, #8]
 800f5c0:	2b00      	cmp	r3, #0
 800f5c2:	d1fc      	bne.n	800f5be <ai_platform_network_process+0x35a>
 800f5c4:	4b07      	ldr	r3, [pc, #28]	; (800f5e4 <ai_platform_network_process+0x380>)
 800f5c6:	6013      	str	r3, [r2, #0]
 800f5c8:	4b07      	ldr	r3, [pc, #28]	; (800f5e8 <ai_platform_network_process+0x384>)
 800f5ca:	6812      	ldr	r2, [r2, #0]
 800f5cc:	429a      	cmp	r2, r3
 800f5ce:	f43f aeb6 	beq.w	800f33e <ai_platform_network_process+0xda>
 800f5d2:	e7fe      	b.n	800f5d2 <ai_platform_network_process+0x36e>
 800f5d4:	f8b8 3000 	ldrh.w	r3, [r8]
 800f5d8:	429f      	cmp	r7, r3
 800f5da:	f4ff aed6 	bcc.w	800f38a <ai_platform_network_process+0x126>
 800f5de:	e74b      	b.n	800f478 <ai_platform_network_process+0x214>
 800f5e0:	58024000 	.word	0x58024000
 800f5e4:	f407a5c2 	.word	0xf407a5c2
 800f5e8:	b5e8b5cd 	.word	0xb5e8b5cd
 800f5ec:	40023000 	.word	0x40023000
 800f5f0:	4a88      	ldr	r2, [pc, #544]	; (800f814 <ai_platform_network_process+0x5b0>)
 800f5f2:	2301      	movs	r3, #1
 800f5f4:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800f5f8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800f5fc:	2b00      	cmp	r3, #0
 800f5fe:	d1fb      	bne.n	800f5f8 <ai_platform_network_process+0x394>
 800f600:	4b85      	ldr	r3, [pc, #532]	; (800f818 <ai_platform_network_process+0x5b4>)
 800f602:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800f606:	4b85      	ldr	r3, [pc, #532]	; (800f81c <ai_platform_network_process+0x5b8>)
 800f608:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800f60c:	429a      	cmp	r2, r3
 800f60e:	f43f ae96 	beq.w	800f33e <ai_platform_network_process+0xda>
 800f612:	e7fe      	b.n	800f612 <ai_platform_network_process+0x3ae>
 800f614:	9d03      	ldr	r5, [sp, #12]
 800f616:	2400      	movs	r4, #0
 800f618:	2217      	movs	r2, #23
 800f61a:	2112      	movs	r1, #18
 800f61c:	f105 0010 	add.w	r0, r5, #16
 800f620:	f000 f906 	bl	800f830 <core_set_error>
 800f624:	4620      	mov	r0, r4
 800f626:	b005      	add	sp, #20
 800f628:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f62c:	462c      	mov	r4, r5
 800f62e:	e7bf      	b.n	800f5b0 <ai_platform_network_process+0x34c>
 800f630:	9d03      	ldr	r5, [sp, #12]
 800f632:	2218      	movs	r2, #24
 800f634:	2112      	movs	r1, #18
 800f636:	2400      	movs	r4, #0
 800f638:	f105 0010 	add.w	r0, r5, #16
 800f63c:	f000 f8f8 	bl	800f830 <core_set_error>
 800f640:	e7b6      	b.n	800f5b0 <ai_platform_network_process+0x34c>
 800f642:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800f646:	429f      	cmp	r7, r3
 800f648:	f4ff af28 	bcc.w	800f49c <ai_platform_network_process+0x238>
 800f64c:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800f650:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 800f652:	82ab      	strh	r3, [r5, #20]
 800f654:	2a00      	cmp	r2, #0
 800f656:	f040 808d 	bne.w	800f774 <ai_platform_network_process+0x510>
 800f65a:	4616      	mov	r6, r2
 800f65c:	4617      	mov	r7, r2
 800f65e:	8aec      	ldrh	r4, [r5, #22]
 800f660:	429c      	cmp	r4, r3
 800f662:	d2a5      	bcs.n	800f5b0 <ai_platform_network_process+0x34c>
 800f664:	46ab      	mov	fp, r5
 800f666:	2e00      	cmp	r6, #0
 800f668:	d030      	beq.n	800f6cc <ai_platform_network_process+0x468>
 800f66a:	f04f 0800 	mov.w	r8, #0
 800f66e:	e014      	b.n	800f69a <ai_platform_network_process+0x436>
 800f670:	6882      	ldr	r2, [r0, #8]
 800f672:	68c5      	ldr	r5, [r0, #12]
 800f674:	6863      	ldr	r3, [r4, #4]
 800f676:	1b52      	subs	r2, r2, r5
 800f678:	4413      	add	r3, r2
 800f67a:	6083      	str	r3, [r0, #8]
 800f67c:	698b      	ldr	r3, [r1, #24]
 800f67e:	6862      	ldr	r2, [r4, #4]
 800f680:	60da      	str	r2, [r3, #12]
 800f682:	f859 200a 	ldr.w	r2, [r9, sl]
 800f686:	f108 0801 	add.w	r8, r8, #1
 800f68a:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 800f68e:	440b      	add	r3, r1
 800f690:	4293      	cmp	r3, r2
 800f692:	d301      	bcc.n	800f698 <ai_platform_network_process+0x434>
 800f694:	68e3      	ldr	r3, [r4, #12]
 800f696:	1ad3      	subs	r3, r2, r3
 800f698:	6063      	str	r3, [r4, #4]
 800f69a:	8833      	ldrh	r3, [r6, #0]
 800f69c:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 800f6a0:	4543      	cmp	r3, r8
 800f6a2:	d913      	bls.n	800f6cc <ai_platform_network_process+0x468>
 800f6a4:	6873      	ldr	r3, [r6, #4]
 800f6a6:	b18b      	cbz	r3, 800f6cc <ai_platform_network_process+0x468>
 800f6a8:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 800f6ac:	b171      	cbz	r1, 800f6cc <ai_platform_network_process+0x468>
 800f6ae:	6988      	ldr	r0, [r1, #24]
 800f6b0:	68b2      	ldr	r2, [r6, #8]
 800f6b2:	6803      	ldr	r3, [r0, #0]
 800f6b4:	f8d2 9000 	ldr.w	r9, [r2]
 800f6b8:	009d      	lsls	r5, r3, #2
 800f6ba:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 800f6be:	d5d7      	bpl.n	800f670 <ai_platform_network_process+0x40c>
 800f6c0:	6880      	ldr	r0, [r0, #8]
 800f6c2:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 800f6c6:	f000 fd73 	bl	80101b0 <memcpy>
 800f6ca:	e7da      	b.n	800f682 <ai_platform_network_process+0x41e>
 800f6cc:	4658      	mov	r0, fp
 800f6ce:	f000 fc65 	bl	800ff9c <ai_layers_forward_all>
 800f6d2:	2f00      	cmp	r7, #0
 800f6d4:	d03f      	beq.n	800f756 <ai_platform_network_process+0x4f2>
 800f6d6:	2400      	movs	r4, #0
 800f6d8:	e016      	b.n	800f708 <ai_platform_network_process+0x4a4>
 800f6da:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 800f6de:	f859 100a 	ldr.w	r1, [r9, sl]
 800f6e2:	4413      	add	r3, r2
 800f6e4:	428b      	cmp	r3, r1
 800f6e6:	d302      	bcc.n	800f6ee <ai_platform_network_process+0x48a>
 800f6e8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f6ec:	1acb      	subs	r3, r1, r3
 800f6ee:	f8c8 3004 	str.w	r3, [r8, #4]
 800f6f2:	6981      	ldr	r1, [r0, #24]
 800f6f4:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 800f6f8:	1b52      	subs	r2, r2, r5
 800f6fa:	4413      	add	r3, r2
 800f6fc:	608b      	str	r3, [r1, #8]
 800f6fe:	6983      	ldr	r3, [r0, #24]
 800f700:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800f704:	60da      	str	r2, [r3, #12]
 800f706:	3401      	adds	r4, #1
 800f708:	883b      	ldrh	r3, [r7, #0]
 800f70a:	42a3      	cmp	r3, r4
 800f70c:	d923      	bls.n	800f756 <ai_platform_network_process+0x4f2>
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	b30b      	cbz	r3, 800f756 <ai_platform_network_process+0x4f2>
 800f712:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800f716:	b1f0      	cbz	r0, 800f756 <ai_platform_network_process+0x4f2>
 800f718:	68ba      	ldr	r2, [r7, #8]
 800f71a:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 800f71e:	6983      	ldr	r3, [r0, #24]
 800f720:	f8d2 9000 	ldr.w	r9, [r2]
 800f724:	681a      	ldr	r2, [r3, #0]
 800f726:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 800f72a:	0092      	lsls	r2, r2, #2
 800f72c:	d5d5      	bpl.n	800f6da <ai_platform_network_process+0x476>
 800f72e:	f8d8 2008 	ldr.w	r2, [r8, #8]
 800f732:	6899      	ldr	r1, [r3, #8]
 800f734:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800f738:	f000 fd3a 	bl	80101b0 <memcpy>
 800f73c:	f859 200a 	ldr.w	r2, [r9, sl]
 800f740:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 800f744:	440b      	add	r3, r1
 800f746:	4293      	cmp	r3, r2
 800f748:	d302      	bcc.n	800f750 <ai_platform_network_process+0x4ec>
 800f74a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f74e:	1ad3      	subs	r3, r2, r3
 800f750:	f8c8 3004 	str.w	r3, [r8, #4]
 800f754:	e7d7      	b.n	800f706 <ai_platform_network_process+0x4a2>
 800f756:	f8bb 4016 	ldrh.w	r4, [fp, #22]
 800f75a:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 800f75e:	3401      	adds	r4, #1
 800f760:	b2a4      	uxth	r4, r4
 800f762:	42a3      	cmp	r3, r4
 800f764:	f8ab 4016 	strh.w	r4, [fp, #22]
 800f768:	f63f af7d 	bhi.w	800f666 <ai_platform_network_process+0x402>
 800f76c:	4620      	mov	r0, r4
 800f76e:	b005      	add	sp, #20
 800f770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f774:	2a01      	cmp	r2, #1
 800f776:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 800f778:	d029      	beq.n	800f7ce <ai_platform_network_process+0x56a>
 800f77a:	f106 070c 	add.w	r7, r6, #12
 800f77e:	e76e      	b.n	800f65e <ai_platform_network_process+0x3fa>
 800f780:	2218      	movs	r2, #24
 800f782:	2113      	movs	r1, #19
 800f784:	f105 0010 	add.w	r0, r5, #16
 800f788:	2400      	movs	r4, #0
 800f78a:	f000 f851 	bl	800f830 <core_set_error>
 800f78e:	e70f      	b.n	800f5b0 <ai_platform_network_process+0x34c>
 800f790:	9d03      	ldr	r5, [sp, #12]
 800f792:	4604      	mov	r4, r0
 800f794:	2217      	movs	r2, #23
 800f796:	2112      	movs	r1, #18
 800f798:	f105 0010 	add.w	r0, r5, #16
 800f79c:	f000 f848 	bl	800f830 <core_set_error>
 800f7a0:	e706      	b.n	800f5b0 <ai_platform_network_process+0x34c>
 800f7a2:	9d03      	ldr	r5, [sp, #12]
 800f7a4:	2219      	movs	r2, #25
 800f7a6:	2112      	movs	r1, #18
 800f7a8:	2400      	movs	r4, #0
 800f7aa:	f105 0010 	add.w	r0, r5, #16
 800f7ae:	f000 f83f 	bl	800f830 <core_set_error>
 800f7b2:	e6fd      	b.n	800f5b0 <ai_platform_network_process+0x34c>
 800f7b4:	9d03      	ldr	r5, [sp, #12]
 800f7b6:	4604      	mov	r4, r0
 800f7b8:	2221      	movs	r2, #33	; 0x21
 800f7ba:	2112      	movs	r1, #18
 800f7bc:	f105 0010 	add.w	r0, r5, #16
 800f7c0:	f000 f836 	bl	800f830 <core_set_error>
 800f7c4:	e6f4      	b.n	800f5b0 <ai_platform_network_process+0x34c>
 800f7c6:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800f7ca:	82ab      	strh	r3, [r5, #20]
 800f7cc:	e742      	b.n	800f654 <ai_platform_network_process+0x3f0>
 800f7ce:	2700      	movs	r7, #0
 800f7d0:	e745      	b.n	800f65e <ai_platform_network_process+0x3fa>
 800f7d2:	4604      	mov	r4, r0
 800f7d4:	2217      	movs	r2, #23
 800f7d6:	2113      	movs	r1, #19
 800f7d8:	f105 0010 	add.w	r0, r5, #16
 800f7dc:	f000 f828 	bl	800f830 <core_set_error>
 800f7e0:	e6e6      	b.n	800f5b0 <ai_platform_network_process+0x34c>
 800f7e2:	2219      	movs	r2, #25
 800f7e4:	2113      	movs	r1, #19
 800f7e6:	f105 0010 	add.w	r0, r5, #16
 800f7ea:	2400      	movs	r4, #0
 800f7ec:	f000 f820 	bl	800f830 <core_set_error>
 800f7f0:	e6de      	b.n	800f5b0 <ai_platform_network_process+0x34c>
 800f7f2:	4604      	mov	r4, r0
 800f7f4:	2221      	movs	r2, #33	; 0x21
 800f7f6:	2113      	movs	r1, #19
 800f7f8:	f105 0010 	add.w	r0, r5, #16
 800f7fc:	f000 f818 	bl	800f830 <core_set_error>
 800f800:	e6d6      	b.n	800f5b0 <ai_platform_network_process+0x34c>
 800f802:	2217      	movs	r2, #23
 800f804:	2113      	movs	r1, #19
 800f806:	f105 0010 	add.w	r0, r5, #16
 800f80a:	4654      	mov	r4, sl
 800f80c:	f000 f810 	bl	800f830 <core_set_error>
 800f810:	e6ce      	b.n	800f5b0 <ai_platform_network_process+0x34c>
 800f812:	bf00      	nop
 800f814:	58024000 	.word	0x58024000
 800f818:	f407a5c2 	.word	0xf407a5c2
 800f81c:	b5e8b5cd 	.word	0xb5e8b5cd

0800f820 <core_init>:
 800f820:	2001      	movs	r0, #1
 800f822:	4770      	bx	lr

0800f824 <core_get_error>:
 800f824:	4603      	mov	r3, r0
 800f826:	2200      	movs	r2, #0
 800f828:	6800      	ldr	r0, [r0, #0]
 800f82a:	601a      	str	r2, [r3, #0]
 800f82c:	4770      	bx	lr
 800f82e:	bf00      	nop

0800f830 <core_set_error>:
 800f830:	4603      	mov	r3, r0
 800f832:	7800      	ldrb	r0, [r0, #0]
 800f834:	b108      	cbz	r0, 800f83a <core_set_error+0xa>
 800f836:	2000      	movs	r0, #0
 800f838:	4770      	bx	lr
 800f83a:	7019      	strb	r1, [r3, #0]
 800f83c:	2001      	movs	r0, #1
 800f83e:	6819      	ldr	r1, [r3, #0]
 800f840:	f362 211f 	bfi	r1, r2, #8, #24
 800f844:	6019      	str	r1, [r3, #0]
 800f846:	4770      	bx	lr

0800f848 <func_dummy>:
 800f848:	4770      	bx	lr
 800f84a:	bf00      	nop

0800f84c <decodeEstimator_LEQ_8Bits>:
 800f84c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f850:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 800f854:	f242 7511 	movw	r5, #10001	; 0x2711
 800f858:	f8bd 8038 	ldrh.w	r8, [sp, #56]	; 0x38
 800f85c:	f04f 0c00 	mov.w	ip, #0
 800f860:	e9dd a909 	ldrd	sl, r9, [sp, #36]	; 0x24
 800f864:	e00e      	b.n	800f884 <decodeEstimator_LEQ_8Bits+0x38>
 800f866:	ed94 7a00 	vldr	s14, [r4]
 800f86a:	fa1f fc86 	uxth.w	ip, r6
 800f86e:	edde 7a00 	vldr	s15, [lr]
 800f872:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f876:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f87a:	bf98      	it	ls
 800f87c:	fa1f fc87 	uxthls.w	ip, r7
 800f880:	3d01      	subs	r5, #1
 800f882:	d05c      	beq.n	800f93e <decodeEstimator_LEQ_8Bits+0xf2>
 800f884:	f81a 700c 	ldrb.w	r7, [sl, ip]
 800f888:	eb03 0e8c 	add.w	lr, r3, ip, lsl #2
 800f88c:	f819 600c 	ldrb.w	r6, [r9, ip]
 800f890:	f812 400c 	ldrb.w	r4, [r2, ip]
 800f894:	42b7      	cmp	r7, r6
 800f896:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 800f89a:	d1e4      	bne.n	800f866 <decodeEstimator_LEQ_8Bits+0x1a>
 800f89c:	f1b8 0f00 	cmp.w	r8, #0
 800f8a0:	d021      	beq.n	800f8e6 <decodeEstimator_LEQ_8Bits+0x9a>
 800f8a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f8a4:	f108 38ff 	add.w	r8, r8, #4294967295
 800f8a8:	2b08      	cmp	r3, #8
 800f8aa:	d029      	beq.n	800f900 <decodeEstimator_LEQ_8Bits+0xb4>
 800f8ac:	2b20      	cmp	r3, #32
 800f8ae:	f10b 33ff 	add.w	r3, fp, #4294967295
 800f8b2:	fa1b fb88 	uxtah	fp, fp, r8
 800f8b6:	d11b      	bne.n	800f8f0 <decodeEstimator_LEQ_8Bits+0xa4>
 800f8b8:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800f8ba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f8bc:	f813 4f01 	ldrb.w	r4, [r3, #1]!
 800f8c0:	4564      	cmp	r4, ip
 800f8c2:	d10a      	bne.n	800f8da <decodeEstimator_LEQ_8Bits+0x8e>
 800f8c4:	7804      	ldrb	r4, [r0, #0]
 800f8c6:	ed92 7a00 	vldr	s14, [r2]
 800f8ca:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 800f8ce:	edd4 7a00 	vldr	s15, [r4]
 800f8d2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f8d6:	edc4 7a00 	vstr	s15, [r4]
 800f8da:	459b      	cmp	fp, r3
 800f8dc:	f100 0001 	add.w	r0, r0, #1
 800f8e0:	f102 0204 	add.w	r2, r2, #4
 800f8e4:	d1ea      	bne.n	800f8bc <decodeEstimator_LEQ_8Bits+0x70>
 800f8e6:	2000      	movs	r0, #0
 800f8e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f8ec:	455b      	cmp	r3, fp
 800f8ee:	d0fa      	beq.n	800f8e6 <decodeEstimator_LEQ_8Bits+0x9a>
 800f8f0:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 800f8f4:	4562      	cmp	r2, ip
 800f8f6:	d1f9      	bne.n	800f8ec <decodeEstimator_LEQ_8Bits+0xa0>
 800f8f8:	f06f 0003 	mvn.w	r0, #3
 800f8fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f900:	f10b 33ff 	add.w	r3, fp, #4294967295
 800f904:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800f906:	fa1b fb88 	uxtah	fp, fp, r8
 800f90a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f90c:	f813 4f01 	ldrb.w	r4, [r3, #1]!
 800f910:	4564      	cmp	r4, ip
 800f912:	d10d      	bne.n	800f930 <decodeEstimator_LEQ_8Bits+0xe4>
 800f914:	7815      	ldrb	r5, [r2, #0]
 800f916:	7804      	ldrb	r4, [r0, #0]
 800f918:	ee07 5a10 	vmov	s14, r5
 800f91c:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 800f920:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f924:	edd4 7a00 	vldr	s15, [r4]
 800f928:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f92c:	edc4 7a00 	vstr	s15, [r4]
 800f930:	459b      	cmp	fp, r3
 800f932:	f100 0001 	add.w	r0, r0, #1
 800f936:	f102 0201 	add.w	r2, r2, #1
 800f93a:	d1e7      	bne.n	800f90c <decodeEstimator_LEQ_8Bits+0xc0>
 800f93c:	e7d3      	b.n	800f8e6 <decodeEstimator_LEQ_8Bits+0x9a>
 800f93e:	f06f 0001 	mvn.w	r0, #1
 800f942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f946:	bf00      	nop

0800f948 <tree_ensemble_classifier_decoder>:
 800f948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f94c:	4604      	mov	r4, r0
 800f94e:	b09b      	sub	sp, #108	; 0x6c
 800f950:	460d      	mov	r5, r1
 800f952:	9218      	str	r2, [sp, #96]	; 0x60
 800f954:	4622      	mov	r2, r4
 800f956:	900f      	str	r0, [sp, #60]	; 0x3c
 800f958:	6911      	ldr	r1, [r2, #16]
 800f95a:	f8bd 0090 	ldrh.w	r0, [sp, #144]	; 0x90
 800f95e:	9110      	str	r1, [sp, #64]	; 0x40
 800f960:	6891      	ldr	r1, [r2, #8]
 800f962:	f8d2 8004 	ldr.w	r8, [r2, #4]
 800f966:	9111      	str	r1, [sp, #68]	; 0x44
 800f968:	6c91      	ldr	r1, [r2, #72]	; 0x48
 800f96a:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
 800f96e:	910d      	str	r1, [sp, #52]	; 0x34
 800f970:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800f972:	f8d4 a01c 	ldr.w	sl, [r4, #28]
 800f976:	9114      	str	r1, [sp, #80]	; 0x50
 800f978:	6824      	ldr	r4, [r4, #0]
 800f97a:	9016      	str	r0, [sp, #88]	; 0x58
 800f97c:	9312      	str	r3, [sp, #72]	; 0x48
 800f97e:	e9d2 910b 	ldrd	r9, r1, [r2, #44]	; 0x2c
 800f982:	e9d2 6705 	ldrd	r6, r7, [r2, #20]
 800f986:	9117      	str	r1, [sp, #92]	; 0x5c
 800f988:	6b91      	ldr	r1, [r2, #56]	; 0x38
 800f98a:	68d2      	ldr	r2, [r2, #12]
 800f98c:	9119      	str	r1, [sp, #100]	; 0x64
 800f98e:	9215      	str	r2, [sp, #84]	; 0x54
 800f990:	2800      	cmp	r0, #0
 800f992:	f000 8138 	beq.w	800fc06 <tree_ensemble_classifier_decoder+0x2be>
 800f996:	0082      	lsls	r2, r0, #2
 800f998:	2100      	movs	r1, #0
 800f99a:	4618      	mov	r0, r3
 800f99c:	f000 fc16 	bl	80101cc <memset>
 800f9a0:	f1bb 0f00 	cmp.w	fp, #0
 800f9a4:	f000 8088 	beq.w	800fab8 <tree_ensemble_classifier_decoder+0x170>
 800f9a8:	f10b 33ff 	add.w	r3, fp, #4294967295
 800f9ac:	f1aa 0202 	sub.w	r2, sl, #2
 800f9b0:	18e3      	adds	r3, r4, r3
 800f9b2:	920c      	str	r2, [sp, #48]	; 0x30
 800f9b4:	f1a9 0202 	sub.w	r2, r9, #2
 800f9b8:	f04f 0900 	mov.w	r9, #0
 800f9bc:	9313      	str	r3, [sp, #76]	; 0x4c
 800f9be:	1e63      	subs	r3, r4, #1
 800f9c0:	46cb      	mov	fp, r9
 800f9c2:	464c      	mov	r4, r9
 800f9c4:	920b      	str	r2, [sp, #44]	; 0x2c
 800f9c6:	9309      	str	r3, [sp, #36]	; 0x24
 800f9c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f9ca:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800f9ce:	9209      	str	r2, [sp, #36]	; 0x24
 800f9d0:	2b01      	cmp	r3, #1
 800f9d2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f9d4:	f832 1f02 	ldrh.w	r1, [r2, #2]!
 800f9d8:	920c      	str	r2, [sp, #48]	; 0x30
 800f9da:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f9dc:	910e      	str	r1, [sp, #56]	; 0x38
 800f9de:	f832 1f02 	ldrh.w	r1, [r2, #2]!
 800f9e2:	e9cd 120a 	strd	r1, r2, [sp, #40]	; 0x28
 800f9e6:	f040 80e4 	bne.w	800fbb2 <tree_ensemble_classifier_decoder+0x26a>
 800f9ea:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f9ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f9ee:	2a08      	cmp	r2, #8
 800f9f0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800f9f4:	f000 80b0 	beq.w	800fb58 <tree_ensemble_classifier_decoder+0x210>
 800f9f8:	2a20      	cmp	r2, #32
 800f9fa:	f040 80d5 	bne.w	800fba8 <tree_ensemble_classifier_decoder+0x260>
 800f9fe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800fa00:	9911      	ldr	r1, [sp, #68]	; 0x44
 800fa02:	6a12      	ldr	r2, [r2, #32]
 800fa04:	eb01 0a8b 	add.w	sl, r1, fp, lsl #2
 800fa08:	2a08      	cmp	r2, #8
 800fa0a:	f000 80ac 	beq.w	800fb66 <tree_ensemble_classifier_decoder+0x21e>
 800fa0e:	f242 7e11 	movw	lr, #10001	; 0x2711
 800fa12:	2100      	movs	r1, #0
 800fa14:	e00e      	b.n	800fa34 <tree_ensemble_classifier_decoder+0xec>
 800fa16:	ed92 7a00 	vldr	s14, [r2]
 800fa1a:	edd9 7a00 	vldr	s15, [r9]
 800fa1e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800fa22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa26:	bf94      	ite	ls
 800fa28:	4661      	movls	r1, ip
 800fa2a:	4601      	movhi	r1, r0
 800fa2c:	f1be 0e01 	subs.w	lr, lr, #1
 800fa30:	f000 80b5 	beq.w	800fb9e <tree_ensemble_classifier_decoder+0x256>
 800fa34:	1862      	adds	r2, r4, r1
 800fa36:	eb03 0981 	add.w	r9, r3, r1, lsl #2
 800fa3a:	f836 c012 	ldrh.w	ip, [r6, r2, lsl #1]
 800fa3e:	f837 0012 	ldrh.w	r0, [r7, r2, lsl #1]
 800fa42:	f818 2002 	ldrb.w	r2, [r8, r2]
 800fa46:	4584      	cmp	ip, r0
 800fa48:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 800fa4c:	d1e3      	bne.n	800fa16 <tree_ensemble_classifier_decoder+0xce>
 800fa4e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fa50:	b332      	cbz	r2, 800faa0 <tree_ensemble_classifier_decoder+0x158>
 800fa52:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800fa56:	f102 3cff 	add.w	ip, r2, #4294967295
 800fa5a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800fa5c:	445b      	add	r3, fp
 800fa5e:	9814      	ldr	r0, [sp, #80]	; 0x50
 800fa60:	fa1b fc8c 	uxtah	ip, fp, ip
 800fa64:	f8dd e048 	ldr.w	lr, [sp, #72]	; 0x48
 800fa68:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 800fa6c:	eb00 0c4c 	add.w	ip, r0, ip, lsl #1
 800fa70:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800fa74:	3202      	adds	r2, #2
 800fa76:	f833 0f02 	ldrh.w	r0, [r3, #2]!
 800fa7a:	4288      	cmp	r0, r1
 800fa7c:	d10a      	bne.n	800fa94 <tree_ensemble_classifier_decoder+0x14c>
 800fa7e:	8810      	ldrh	r0, [r2, #0]
 800fa80:	ed9a 7a00 	vldr	s14, [sl]
 800fa84:	eb0e 0080 	add.w	r0, lr, r0, lsl #2
 800fa88:	edd0 7a00 	vldr	s15, [r0]
 800fa8c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800fa90:	edc0 7a00 	vstr	s15, [r0]
 800fa94:	459c      	cmp	ip, r3
 800fa96:	f102 0202 	add.w	r2, r2, #2
 800fa9a:	f10a 0a04 	add.w	sl, sl, #4
 800fa9e:	d1ea      	bne.n	800fa76 <tree_ensemble_classifier_decoder+0x12e>
 800faa0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800faa2:	441c      	add	r4, r3
 800faa4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800faa6:	449b      	add	fp, r3
 800faa8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800faaa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800faac:	4293      	cmp	r3, r2
 800faae:	d18b      	bne.n	800f9c8 <tree_ensemble_classifier_decoder+0x80>
 800fab0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	f000 80ab 	beq.w	800fc0e <tree_ensemble_classifier_decoder+0x2c6>
 800fab8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800faba:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800fabc:	3b01      	subs	r3, #1
 800fabe:	1d10      	adds	r0, r2, #4
 800fac0:	4614      	mov	r4, r2
 800fac2:	b29b      	uxth	r3, r3
 800fac4:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800fac8:	4613      	mov	r3, r2
 800faca:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800facc:	edd3 6a00 	vldr	s13, [r3]
 800fad0:	edd2 7a16 	vldr	s15, [r2, #88]	; 0x58
 800fad4:	ed92 7a15 	vldr	s14, [r2, #84]	; 0x54
 800fad8:	eed6 7a87 	vfnms.f32	s15, s13, s14
 800fadc:	ece3 7a01 	vstmia	r3!, {s15}
 800fae0:	4298      	cmp	r0, r3
 800fae2:	d1f3      	bne.n	800facc <tree_ensemble_classifier_decoder+0x184>
 800fae4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800fae6:	2b02      	cmp	r3, #2
 800fae8:	d068      	beq.n	800fbbc <tree_ensemble_classifier_decoder+0x274>
 800faea:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800faec:	2100      	movs	r1, #0
 800faee:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800faf0:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800faf2:	ed93 7a00 	vldr	s14, [r3]
 800faf6:	440a      	add	r2, r1
 800faf8:	3104      	adds	r1, #4
 800fafa:	edd2 7a00 	vldr	s15, [r2]
 800fafe:	ee77 7a87 	vadd.f32	s15, s15, s14
 800fb02:	ece3 7a01 	vstmia	r3!, {s15}
 800fb06:	4283      	cmp	r3, r0
 800fb08:	d1f2      	bne.n	800faf0 <tree_ensemble_classifier_decoder+0x1a8>
 800fb0a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800fb0c:	9816      	ldr	r0, [sp, #88]	; 0x58
 800fb0e:	ed93 7a00 	vldr	s14, [r3]
 800fb12:	2300      	movs	r3, #0
 800fb14:	4619      	mov	r1, r3
 800fb16:	461a      	mov	r2, r3
 800fb18:	ecf4 7a01 	vldmia	r4!, {s15}
 800fb1c:	3301      	adds	r3, #1
 800fb1e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800fb22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb26:	d502      	bpl.n	800fb2e <tree_ensemble_classifier_decoder+0x1e6>
 800fb28:	eeb0 7a67 	vmov.f32	s14, s15
 800fb2c:	4611      	mov	r1, r2
 800fb2e:	b29a      	uxth	r2, r3
 800fb30:	4282      	cmp	r2, r0
 800fb32:	d3f1      	bcc.n	800fb18 <tree_ensemble_classifier_decoder+0x1d0>
 800fb34:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fb36:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800fb3a:	9317      	str	r3, [sp, #92]	; 0x5c
 800fb3c:	681b      	ldr	r3, [r3, #0]
 800fb3e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800fb40:	6013      	str	r3, [r2, #0]
 800fb42:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fb44:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800fb46:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800fb48:	2300      	movs	r3, #0
 800fb4a:	9c19      	ldr	r4, [sp, #100]	; 0x64
 800fb4c:	4608      	mov	r0, r1
 800fb4e:	47a0      	blx	r4
 800fb50:	2000      	movs	r0, #0
 800fb52:	b01b      	add	sp, #108	; 0x6c
 800fb54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb58:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800fb5a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800fb5c:	6a12      	ldr	r2, [r2, #32]
 800fb5e:	eb01 0a0b 	add.w	sl, r1, fp
 800fb62:	2a08      	cmp	r2, #8
 800fb64:	d120      	bne.n	800fba8 <tree_ensemble_classifier_decoder+0x260>
 800fb66:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800fb68:	4628      	mov	r0, r5
 800fb6a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800fb6c:	9203      	str	r2, [sp, #12]
 800fb6e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800fb70:	9105      	str	r1, [sp, #20]
 800fb72:	445a      	add	r2, fp
 800fb74:	f8cd a008 	str.w	sl, [sp, #8]
 800fb78:	9206      	str	r2, [sp, #24]
 800fb7a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800fb7c:	445a      	add	r2, fp
 800fb7e:	448b      	add	fp, r1
 800fb80:	990e      	ldr	r1, [sp, #56]	; 0x38
 800fb82:	9204      	str	r2, [sp, #16]
 800fb84:	193a      	adds	r2, r7, r4
 800fb86:	9201      	str	r2, [sp, #4]
 800fb88:	1932      	adds	r2, r6, r4
 800fb8a:	9200      	str	r2, [sp, #0]
 800fb8c:	eb08 0204 	add.w	r2, r8, r4
 800fb90:	440c      	add	r4, r1
 800fb92:	9912      	ldr	r1, [sp, #72]	; 0x48
 800fb94:	f7ff fe5a 	bl	800f84c <decodeEstimator_LEQ_8Bits>
 800fb98:	2800      	cmp	r0, #0
 800fb9a:	d085      	beq.n	800faa8 <tree_ensemble_classifier_decoder+0x160>
 800fb9c:	e001      	b.n	800fba2 <tree_ensemble_classifier_decoder+0x25a>
 800fb9e:	f06f 0001 	mvn.w	r0, #1
 800fba2:	b01b      	add	sp, #108	; 0x6c
 800fba4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fba8:	f06f 0003 	mvn.w	r0, #3
 800fbac:	b01b      	add	sp, #108	; 0x6c
 800fbae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fbb2:	f06f 0002 	mvn.w	r0, #2
 800fbb6:	b01b      	add	sp, #108	; 0x6c
 800fbb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fbbc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800fbbe:	f891 3040 	ldrb.w	r3, [r1, #64]	; 0x40
 800fbc2:	b333      	cbz	r3, 800fc12 <tree_ensemble_classifier_decoder+0x2ca>
 800fbc4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800fbc6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800fbca:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800fbcc:	ed93 7a00 	vldr	s14, [r3]
 800fbd0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fbd2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800fbd6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800fbda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fbde:	bfcc      	ite	gt
 800fbe0:	685b      	ldrgt	r3, [r3, #4]
 800fbe2:	681b      	ldrle	r3, [r3, #0]
 800fbe4:	6013      	str	r3, [r2, #0]
 800fbe6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800fbe8:	ed93 7a00 	vldr	s14, [r3]
 800fbec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fbf0:	ed83 7a01 	vstr	s14, [r3, #4]
 800fbf4:	edc3 7a00 	vstr	s15, [r3]
 800fbf8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fbfa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fbfe:	2b01      	cmp	r3, #1
 800fc00:	d19f      	bne.n	800fb42 <tree_ensemble_classifier_decoder+0x1fa>
 800fc02:	2000      	movs	r0, #0
 800fc04:	e7cd      	b.n	800fba2 <tree_ensemble_classifier_decoder+0x25a>
 800fc06:	f1bb 0f00 	cmp.w	fp, #0
 800fc0a:	f47f aecd 	bne.w	800f9a8 <tree_ensemble_classifier_decoder+0x60>
 800fc0e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fc10:	e794      	b.n	800fb3c <tree_ensemble_classifier_decoder+0x1f4>
 800fc12:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800fc14:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800fc16:	edd3 7a00 	vldr	s15, [r3]
 800fc1a:	edd2 6a00 	vldr	s13, [r2]
 800fc1e:	ed92 7a01 	vldr	s14, [r2, #4]
 800fc22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fc26:	edc2 7a00 	vstr	s15, [r2]
 800fc2a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800fc2e:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800fc30:	edd3 6a01 	vldr	s13, [r3, #4]
 800fc34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc38:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fc3a:	ee37 7a26 	vadd.f32	s14, s14, s13
 800fc3e:	ed82 7a01 	vstr	s14, [r2, #4]
 800fc42:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800fc44:	bfcc      	ite	gt
 800fc46:	685b      	ldrgt	r3, [r3, #4]
 800fc48:	681b      	ldrle	r3, [r3, #0]
 800fc4a:	6013      	str	r3, [r2, #0]
 800fc4c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800fc4e:	edd3 7a00 	vldr	s15, [r3]
 800fc52:	eeb1 7a67 	vneg.f32	s14, s15
 800fc56:	edc3 7a01 	vstr	s15, [r3, #4]
 800fc5a:	ed83 7a00 	vstr	s14, [r3]
 800fc5e:	e7cb      	b.n	800fbf8 <tree_ensemble_classifier_decoder+0x2b0>

0800fc60 <forward_tree_ensemble_classifier>:
 800fc60:	6982      	ldr	r2, [r0, #24]
 800fc62:	8813      	ldrh	r3, [r2, #0]
 800fc64:	2b00      	cmp	r3, #0
 800fc66:	f000 80a3 	beq.w	800fdb0 <forward_tree_ensemble_classifier+0x150>
 800fc6a:	2b01      	cmp	r3, #1
 800fc6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc70:	6851      	ldr	r1, [r2, #4]
 800fc72:	b0a5      	sub	sp, #148	; 0x94
 800fc74:	bf08      	it	eq
 800fc76:	2400      	moveq	r4, #0
 800fc78:	684a      	ldr	r2, [r1, #4]
 800fc7a:	bf18      	it	ne
 800fc7c:	f101 040c 	addne.w	r4, r1, #12
 800fc80:	b102      	cbz	r2, 800fc84 <forward_tree_ensemble_classifier+0x24>
 800fc82:	6812      	ldr	r2, [r2, #0]
 800fc84:	6864      	ldr	r4, [r4, #4]
 800fc86:	2c00      	cmp	r4, #0
 800fc88:	f000 808e 	beq.w	800fda8 <forward_tree_ensemble_classifier+0x148>
 800fc8c:	e9d4 c400 	ldrd	ip, r4, [r4]
 800fc90:	2b02      	cmp	r3, #2
 800fc92:	f240 8091 	bls.w	800fdb8 <forward_tree_ensemble_classifier+0x158>
 800fc96:	69cf      	ldr	r7, [r1, #28]
 800fc98:	2f00      	cmp	r7, #0
 800fc9a:	f000 808b 	beq.w	800fdb4 <forward_tree_ensemble_classifier+0x154>
 800fc9e:	683b      	ldr	r3, [r7, #0]
 800fca0:	69fd      	ldr	r5, [r7, #28]
 800fca2:	699b      	ldr	r3, [r3, #24]
 800fca4:	69ad      	ldr	r5, [r5, #24]
 800fca6:	689b      	ldr	r3, [r3, #8]
 800fca8:	68ad      	ldr	r5, [r5, #8]
 800fcaa:	9303      	str	r3, [sp, #12]
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	9509      	str	r5, [sp, #36]	; 0x24
 800fcb0:	699b      	ldr	r3, [r3, #24]
 800fcb2:	6a3d      	ldr	r5, [r7, #32]
 800fcb4:	689b      	ldr	r3, [r3, #8]
 800fcb6:	f8d7 e018 	ldr.w	lr, [r7, #24]
 800fcba:	9304      	str	r3, [sp, #16]
 800fcbc:	68bb      	ldr	r3, [r7, #8]
 800fcbe:	69ad      	ldr	r5, [r5, #24]
 800fcc0:	699e      	ldr	r6, [r3, #24]
 800fcc2:	68fb      	ldr	r3, [r7, #12]
 800fcc4:	f8de 8018 	ldr.w	r8, [lr, #24]
 800fcc8:	6999      	ldr	r1, [r3, #24]
 800fcca:	693b      	ldr	r3, [r7, #16]
 800fccc:	68ad      	ldr	r5, [r5, #8]
 800fcce:	699b      	ldr	r3, [r3, #24]
 800fcd0:	f8de e00c 	ldr.w	lr, [lr, #12]
 800fcd4:	689b      	ldr	r3, [r3, #8]
 800fcd6:	950a      	str	r5, [sp, #40]	; 0x28
 800fcd8:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800fcdc:	9306      	str	r3, [sp, #24]
 800fcde:	9507      	str	r5, [sp, #28]
 800fce0:	697b      	ldr	r3, [r7, #20]
 800fce2:	f8de 5004 	ldr.w	r5, [lr, #4]
 800fce6:	699b      	ldr	r3, [r3, #24]
 800fce8:	9508      	str	r5, [sp, #32]
 800fcea:	6835      	ldr	r5, [r6, #0]
 800fcec:	f8d3 8008 	ldr.w	r8, [r3, #8]
 800fcf0:	f3c5 1ec6 	ubfx	lr, r5, #7, #7
 800fcf4:	681d      	ldr	r5, [r3, #0]
 800fcf6:	68e3      	ldr	r3, [r4, #12]
 800fcf8:	68b6      	ldr	r6, [r6, #8]
 800fcfa:	f3c5 15c6 	ubfx	r5, r5, #7, #7
 800fcfe:	f8b3 a004 	ldrh.w	sl, [r3, #4]
 800fd02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd04:	f8d1 9008 	ldr.w	r9, [r1, #8]
 800fd08:	699b      	ldr	r3, [r3, #24]
 800fd0a:	9605      	str	r6, [sp, #20]
 800fd0c:	f8d3 b008 	ldr.w	fp, [r3, #8]
 800fd10:	680e      	ldr	r6, [r1, #0]
 800fd12:	6991      	ldr	r1, [r2, #24]
 800fd14:	f8dc 2018 	ldr.w	r2, [ip, #24]
 800fd18:	f3c6 16c6 	ubfx	r6, r6, #7, #7
 800fd1c:	6889      	ldr	r1, [r1, #8]
 800fd1e:	6892      	ldr	r2, [r2, #8]
 800fd20:	e9d7 c30a 	ldrd	ip, r3, [r7, #40]	; 0x28
 800fd24:	f8dc 7018 	ldr.w	r7, [ip, #24]
 800fd28:	699b      	ldr	r3, [r3, #24]
 800fd2a:	68bf      	ldr	r7, [r7, #8]
 800fd2c:	f8d3 c008 	ldr.w	ip, [r3, #8]
 800fd30:	970b      	str	r7, [sp, #44]	; 0x2c
 800fd32:	69a3      	ldr	r3, [r4, #24]
 800fd34:	69c7      	ldr	r7, [r0, #28]
 800fd36:	edd3 7a02 	vldr	s15, [r3, #8]
 800fd3a:	2f00      	cmp	r7, #0
 800fd3c:	d036      	beq.n	800fdac <forward_tree_ensemble_classifier+0x14c>
 800fd3e:	9b03      	ldr	r3, [sp, #12]
 800fd40:	f8cd a000 	str.w	sl, [sp]
 800fd44:	930d      	str	r3, [sp, #52]	; 0x34
 800fd46:	9b04      	ldr	r3, [sp, #16]
 800fd48:	941c      	str	r4, [sp, #112]	; 0x70
 800fd4a:	930e      	str	r3, [sp, #56]	; 0x38
 800fd4c:	9b05      	ldr	r3, [sp, #20]
 800fd4e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800fd50:	9311      	str	r3, [sp, #68]	; 0x44
 800fd52:	9b06      	ldr	r3, [sp, #24]
 800fd54:	9420      	str	r4, [sp, #128]	; 0x80
 800fd56:	9313      	str	r3, [sp, #76]	; 0x4c
 800fd58:	9b07      	ldr	r3, [sp, #28]
 800fd5a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800fd5c:	9314      	str	r3, [sp, #80]	; 0x50
 800fd5e:	9b08      	ldr	r3, [sp, #32]
 800fd60:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
 800fd64:	9316      	str	r3, [sp, #88]	; 0x58
 800fd66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fd68:	f8cd e078 	str.w	lr, [sp, #120]	; 0x78
 800fd6c:	9317      	str	r3, [sp, #92]	; 0x5c
 800fd6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fd70:	9615      	str	r6, [sp, #84]	; 0x54
 800fd72:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
 800fd76:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
 800fd7a:	951f      	str	r5, [sp, #124]	; 0x7c
 800fd7c:	9421      	str	r4, [sp, #132]	; 0x84
 800fd7e:	e9cd 3b18 	strd	r3, fp, [sp, #96]	; 0x60
 800fd82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fd84:	e9cd 371a 	strd	r3, r7, [sp, #104]	; 0x68
 800fd88:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800fd8a:	ee17 3a90 	vmov	r3, s15
 800fd8e:	9422      	str	r4, [sp, #136]	; 0x88
 800fd90:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800fd92:	f890 0020 	ldrb.w	r0, [r0, #32]
 800fd96:	9423      	str	r4, [sp, #140]	; 0x8c
 800fd98:	f88d 0074 	strb.w	r0, [sp, #116]	; 0x74
 800fd9c:	a80d      	add	r0, sp, #52	; 0x34
 800fd9e:	f7ff fdd3 	bl	800f948 <tree_ensemble_classifier_decoder>
 800fda2:	b025      	add	sp, #148	; 0x94
 800fda4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fda8:	46a4      	mov	ip, r4
 800fdaa:	e771      	b.n	800fc90 <forward_tree_ensemble_classifier+0x30>
 800fdac:	4f04      	ldr	r7, [pc, #16]	; (800fdc0 <forward_tree_ensemble_classifier+0x160>)
 800fdae:	e7c6      	b.n	800fd3e <forward_tree_ensemble_classifier+0xde>
 800fdb0:	685b      	ldr	r3, [r3, #4]
 800fdb2:	deff      	udf	#255	; 0xff
 800fdb4:	69bb      	ldr	r3, [r7, #24]
 800fdb6:	deff      	udf	#255	; 0xff
 800fdb8:	2300      	movs	r3, #0
 800fdba:	685b      	ldr	r3, [r3, #4]
 800fdbc:	deff      	udf	#255	; 0xff
 800fdbe:	bf00      	nop
 800fdc0:	0800f849 	.word	0x0800f849

0800fdc4 <forward_zipmap>:
 800fdc4:	6983      	ldr	r3, [r0, #24]
 800fdc6:	881a      	ldrh	r2, [r3, #0]
 800fdc8:	2a00      	cmp	r2, #0
 800fdca:	d061      	beq.n	800fe90 <forward_zipmap+0xcc>
 800fdcc:	b470      	push	{r4, r5, r6}
 800fdce:	685d      	ldr	r5, [r3, #4]
 800fdd0:	686b      	ldr	r3, [r5, #4]
 800fdd2:	b103      	cbz	r3, 800fdd6 <forward_zipmap+0x12>
 800fdd4:	681b      	ldr	r3, [r3, #0]
 800fdd6:	2a01      	cmp	r2, #1
 800fdd8:	f000 8090 	beq.w	800fefc <forward_zipmap+0x138>
 800fddc:	6929      	ldr	r1, [r5, #16]
 800fdde:	2900      	cmp	r1, #0
 800fde0:	f000 8088 	beq.w	800fef4 <forward_zipmap+0x130>
 800fde4:	680c      	ldr	r4, [r1, #0]
 800fde6:	2a02      	cmp	r2, #2
 800fde8:	68d8      	ldr	r0, [r3, #12]
 800fdea:	6999      	ldr	r1, [r3, #24]
 800fdec:	69a3      	ldr	r3, [r4, #24]
 800fdee:	68c4      	ldr	r4, [r0, #12]
 800fdf0:	6840      	ldr	r0, [r0, #4]
 800fdf2:	6889      	ldr	r1, [r1, #8]
 800fdf4:	689b      	ldr	r3, [r3, #8]
 800fdf6:	fb00 f404 	mul.w	r4, r0, r4
 800fdfa:	f000 8082 	beq.w	800ff02 <forward_zipmap+0x13e>
 800fdfe:	69ea      	ldr	r2, [r5, #28]
 800fe00:	2a00      	cmp	r2, #0
 800fe02:	d079      	beq.n	800fef8 <forward_zipmap+0x134>
 800fe04:	6812      	ldr	r2, [r2, #0]
 800fe06:	6990      	ldr	r0, [r2, #24]
 800fe08:	68d5      	ldr	r5, [r2, #12]
 800fe0a:	6802      	ldr	r2, [r0, #0]
 800fe0c:	686d      	ldr	r5, [r5, #4]
 800fe0e:	6886      	ldr	r6, [r0, #8]
 800fe10:	f3c2 12c6 	ubfx	r2, r2, #7, #7
 800fe14:	b3d4      	cbz	r4, 800fe8c <forward_zipmap+0xc8>
 800fe16:	2a10      	cmp	r2, #16
 800fe18:	d03c      	beq.n	800fe94 <forward_zipmap+0xd0>
 800fe1a:	2a08      	cmp	r2, #8
 800fe1c:	d01c      	beq.n	800fe58 <forward_zipmap+0x94>
 800fe1e:	2000      	movs	r0, #0
 800fe20:	4684      	mov	ip, r0
 800fe22:	e014      	b.n	800fe4e <forward_zipmap+0x8a>
 800fe24:	4602      	mov	r2, r0
 800fe26:	3001      	adds	r0, #1
 800fe28:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 800fe2c:	3308      	adds	r3, #8
 800fe2e:	f10c 0c01 	add.w	ip, ip, #1
 800fe32:	ee07 2a90 	vmov	s15, r2
 800fe36:	4564      	cmp	r4, ip
 800fe38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fe3c:	ee17 2a90 	vmov	r2, s15
 800fe40:	f843 2c08 	str.w	r2, [r3, #-8]
 800fe44:	f851 2b04 	ldr.w	r2, [r1], #4
 800fe48:	f843 2c04 	str.w	r2, [r3, #-4]
 800fe4c:	d01e      	beq.n	800fe8c <forward_zipmap+0xc8>
 800fe4e:	4285      	cmp	r5, r0
 800fe50:	d1e8      	bne.n	800fe24 <forward_zipmap+0x60>
 800fe52:	2001      	movs	r0, #1
 800fe54:	2200      	movs	r2, #0
 800fe56:	e7e7      	b.n	800fe28 <forward_zipmap+0x64>
 800fe58:	2200      	movs	r2, #0
 800fe5a:	4610      	mov	r0, r2
 800fe5c:	4295      	cmp	r5, r2
 800fe5e:	f100 0001 	add.w	r0, r0, #1
 800fe62:	d034      	beq.n	800fece <forward_zipmap+0x10a>
 800fe64:	f816 c002 	ldrb.w	ip, [r6, r2]
 800fe68:	4284      	cmp	r4, r0
 800fe6a:	f102 0201 	add.w	r2, r2, #1
 800fe6e:	f103 0308 	add.w	r3, r3, #8
 800fe72:	ee07 ca90 	vmov	s15, ip
 800fe76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fe7a:	ee17 ca90 	vmov	ip, s15
 800fe7e:	f843 cc08 	str.w	ip, [r3, #-8]
 800fe82:	f851 cb04 	ldr.w	ip, [r1], #4
 800fe86:	f843 cc04 	str.w	ip, [r3, #-4]
 800fe8a:	d1e7      	bne.n	800fe5c <forward_zipmap+0x98>
 800fe8c:	bc70      	pop	{r4, r5, r6}
 800fe8e:	4770      	bx	lr
 800fe90:	6853      	ldr	r3, [r2, #4]
 800fe92:	deff      	udf	#255	; 0xff
 800fe94:	2000      	movs	r0, #0
 800fe96:	4684      	mov	ip, r0
 800fe98:	e014      	b.n	800fec4 <forward_zipmap+0x100>
 800fe9a:	4602      	mov	r2, r0
 800fe9c:	3001      	adds	r0, #1
 800fe9e:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 800fea2:	3308      	adds	r3, #8
 800fea4:	f10c 0c01 	add.w	ip, ip, #1
 800fea8:	ee07 2a90 	vmov	s15, r2
 800feac:	4564      	cmp	r4, ip
 800feae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800feb2:	ee17 2a90 	vmov	r2, s15
 800feb6:	f843 2c08 	str.w	r2, [r3, #-8]
 800feba:	f851 2b04 	ldr.w	r2, [r1], #4
 800febe:	f843 2c04 	str.w	r2, [r3, #-4]
 800fec2:	d0e3      	beq.n	800fe8c <forward_zipmap+0xc8>
 800fec4:	4285      	cmp	r5, r0
 800fec6:	d1e8      	bne.n	800fe9a <forward_zipmap+0xd6>
 800fec8:	2001      	movs	r0, #1
 800feca:	2200      	movs	r2, #0
 800fecc:	e7e7      	b.n	800fe9e <forward_zipmap+0xda>
 800fece:	7832      	ldrb	r2, [r6, #0]
 800fed0:	4284      	cmp	r4, r0
 800fed2:	f103 0308 	add.w	r3, r3, #8
 800fed6:	ee07 2a90 	vmov	s15, r2
 800feda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fede:	ee17 2a90 	vmov	r2, s15
 800fee2:	f843 2c08 	str.w	r2, [r3, #-8]
 800fee6:	f851 2b04 	ldr.w	r2, [r1], #4
 800feea:	f843 2c04 	str.w	r2, [r3, #-4]
 800feee:	d0cd      	beq.n	800fe8c <forward_zipmap+0xc8>
 800fef0:	2201      	movs	r2, #1
 800fef2:	e7b3      	b.n	800fe5c <forward_zipmap+0x98>
 800fef4:	698b      	ldr	r3, [r1, #24]
 800fef6:	deff      	udf	#255	; 0xff
 800fef8:	68d3      	ldr	r3, [r2, #12]
 800fefa:	deff      	udf	#255	; 0xff
 800fefc:	2300      	movs	r3, #0
 800fefe:	685b      	ldr	r3, [r3, #4]
 800ff00:	deff      	udf	#255	; 0xff
 800ff02:	2300      	movs	r3, #0
 800ff04:	685b      	ldr	r3, [r3, #4]
 800ff06:	deff      	udf	#255	; 0xff

0800ff08 <ai_check_custom_types>:
 800ff08:	b082      	sub	sp, #8
 800ff0a:	4b12      	ldr	r3, [pc, #72]	; (800ff54 <ai_check_custom_types+0x4c>)
 800ff0c:	9301      	str	r3, [sp, #4]
 800ff0e:	b118      	cbz	r0, 800ff18 <ai_check_custom_types+0x10>
 800ff10:	7803      	ldrb	r3, [r0, #0]
 800ff12:	2b03      	cmp	r3, #3
 800ff14:	d002      	beq.n	800ff1c <ai_check_custom_types+0x14>
 800ff16:	2000      	movs	r0, #0
 800ff18:	b002      	add	sp, #8
 800ff1a:	4770      	bx	lr
 800ff1c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ff20:	4293      	cmp	r3, r2
 800ff22:	d004      	beq.n	800ff2e <ai_check_custom_types+0x26>
 800ff24:	2001      	movs	r0, #1
 800ff26:	f080 0001 	eor.w	r0, r0, #1
 800ff2a:	b002      	add	sp, #8
 800ff2c:	4770      	bx	lr
 800ff2e:	7842      	ldrb	r2, [r0, #1]
 800ff30:	3001      	adds	r0, #1
 800ff32:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800ff36:	429a      	cmp	r2, r3
 800ff38:	d1f4      	bne.n	800ff24 <ai_check_custom_types+0x1c>
 800ff3a:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800ff3e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ff42:	429a      	cmp	r2, r3
 800ff44:	d1ee      	bne.n	800ff24 <ai_check_custom_types+0x1c>
 800ff46:	7842      	ldrb	r2, [r0, #1]
 800ff48:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ff4c:	429a      	cmp	r2, r3
 800ff4e:	d1e9      	bne.n	800ff24 <ai_check_custom_types+0x1c>
 800ff50:	2000      	movs	r0, #0
 800ff52:	e7e8      	b.n	800ff26 <ai_check_custom_types+0x1e>
 800ff54:	84048403 	.word	0x84048403

0800ff58 <ai_layers_init_all>:
 800ff58:	2100      	movs	r1, #0
 800ff5a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800ff5c:	b13b      	cbz	r3, 800ff6e <ai_layers_init_all+0x16>
 800ff5e:	691a      	ldr	r2, [r3, #16]
 800ff60:	3101      	adds	r1, #1
 800ff62:	60d8      	str	r0, [r3, #12]
 800ff64:	429a      	cmp	r2, r3
 800ff66:	4613      	mov	r3, r2
 800ff68:	d001      	beq.n	800ff6e <ai_layers_init_all+0x16>
 800ff6a:	2a00      	cmp	r2, #0
 800ff6c:	d1f6      	bne.n	800ff5c <ai_layers_init_all+0x4>
 800ff6e:	4608      	mov	r0, r1
 800ff70:	4770      	bx	lr
 800ff72:	bf00      	nop

0800ff74 <ai_layers_post_init_all>:
 800ff74:	b538      	push	{r3, r4, r5, lr}
 800ff76:	2500      	movs	r5, #0
 800ff78:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800ff7a:	b16c      	cbz	r4, 800ff98 <ai_layers_post_init_all+0x24>
 800ff7c:	6863      	ldr	r3, [r4, #4]
 800ff7e:	07db      	lsls	r3, r3, #31
 800ff80:	d504      	bpl.n	800ff8c <ai_layers_post_init_all+0x18>
 800ff82:	6a23      	ldr	r3, [r4, #32]
 800ff84:	4620      	mov	r0, r4
 800ff86:	b10b      	cbz	r3, 800ff8c <ai_layers_post_init_all+0x18>
 800ff88:	3501      	adds	r5, #1
 800ff8a:	4798      	blx	r3
 800ff8c:	6923      	ldr	r3, [r4, #16]
 800ff8e:	42a3      	cmp	r3, r4
 800ff90:	461c      	mov	r4, r3
 800ff92:	d001      	beq.n	800ff98 <ai_layers_post_init_all+0x24>
 800ff94:	2b00      	cmp	r3, #0
 800ff96:	d1f0      	bne.n	800ff7a <ai_layers_post_init_all+0x6>
 800ff98:	4628      	mov	r0, r5
 800ff9a:	bd38      	pop	{r3, r4, r5, pc}

0800ff9c <ai_layers_forward_all>:
 800ff9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ffa0:	f8d0 803c 	ldr.w	r8, [r0, #60]	; 0x3c
 800ffa4:	4604      	mov	r4, r0
 800ffa6:	f1b8 0f00 	cmp.w	r8, #0
 800ffaa:	d02a      	beq.n	8010002 <ai_layers_forward_all+0x66>
 800ffac:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800ffae:	6381      	str	r1, [r0, #56]	; 0x38
 800ffb0:	b319      	cbz	r1, 800fffa <ai_layers_forward_all+0x5e>
 800ffb2:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800ffb4:	2001      	movs	r0, #1
 800ffb6:	47c0      	blx	r8
 800ffb8:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800ffba:	b1f6      	cbz	r6, 800fffa <ai_layers_forward_all+0x5e>
 800ffbc:	2700      	movs	r7, #0
 800ffbe:	4631      	mov	r1, r6
 800ffc0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800ffc2:	2002      	movs	r0, #2
 800ffc4:	47c0      	blx	r8
 800ffc6:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 800ffc8:	4628      	mov	r0, r5
 800ffca:	696b      	ldr	r3, [r5, #20]
 800ffcc:	4798      	blx	r3
 800ffce:	692e      	ldr	r6, [r5, #16]
 800ffd0:	2003      	movs	r0, #3
 800ffd2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800ffd4:	42b5      	cmp	r5, r6
 800ffd6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800ffd8:	d007      	beq.n	800ffea <ai_layers_forward_all+0x4e>
 800ffda:	47c0      	blx	r8
 800ffdc:	3701      	adds	r7, #1
 800ffde:	63a6      	str	r6, [r4, #56]	; 0x38
 800ffe0:	2e00      	cmp	r6, #0
 800ffe2:	d1ec      	bne.n	800ffbe <ai_layers_forward_all+0x22>
 800ffe4:	4638      	mov	r0, r7
 800ffe6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ffea:	2003      	movs	r0, #3
 800ffec:	3701      	adds	r7, #1
 800ffee:	47c0      	blx	r8
 800fff0:	2300      	movs	r3, #0
 800fff2:	4638      	mov	r0, r7
 800fff4:	63a3      	str	r3, [r4, #56]	; 0x38
 800fff6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fffa:	2700      	movs	r7, #0
 800fffc:	4638      	mov	r0, r7
 800fffe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010002:	6b45      	ldr	r5, [r0, #52]	; 0x34
 8010004:	6385      	str	r5, [r0, #56]	; 0x38
 8010006:	2d00      	cmp	r5, #0
 8010008:	d0f7      	beq.n	800fffa <ai_layers_forward_all+0x5e>
 801000a:	4647      	mov	r7, r8
 801000c:	696b      	ldr	r3, [r5, #20]
 801000e:	4628      	mov	r0, r5
 8010010:	4798      	blx	r3
 8010012:	462b      	mov	r3, r5
 8010014:	692d      	ldr	r5, [r5, #16]
 8010016:	429d      	cmp	r5, r3
 8010018:	d004      	beq.n	8010024 <ai_layers_forward_all+0x88>
 801001a:	3701      	adds	r7, #1
 801001c:	63a5      	str	r5, [r4, #56]	; 0x38
 801001e:	2d00      	cmp	r5, #0
 8010020:	d1f4      	bne.n	801000c <ai_layers_forward_all+0x70>
 8010022:	e7df      	b.n	800ffe4 <ai_layers_forward_all+0x48>
 8010024:	2300      	movs	r3, #0
 8010026:	3701      	adds	r7, #1
 8010028:	63a3      	str	r3, [r4, #56]	; 0x38
 801002a:	e7db      	b.n	800ffe4 <ai_layers_forward_all+0x48>

0801002c <ai_version_get>:
 801002c:	0212      	lsls	r2, r2, #8
 801002e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8010032:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 8010036:	4770      	bx	lr

08010038 <get_tensor_byte_size>:
 8010038:	b430      	push	{r4, r5}
 801003a:	6985      	ldr	r5, [r0, #24]
 801003c:	68c4      	ldr	r4, [r0, #12]
 801003e:	6941      	ldr	r1, [r0, #20]
 8010040:	4b06      	ldr	r3, [pc, #24]	; (801005c <get_tensor_byte_size+0x24>)
 8010042:	6828      	ldr	r0, [r5, #0]
 8010044:	4a06      	ldr	r2, [pc, #24]	; (8010060 <get_tensor_byte_size+0x28>)
 8010046:	4003      	ands	r3, r0
 8010048:	68c9      	ldr	r1, [r1, #12]
 801004a:	68e0      	ldr	r0, [r4, #12]
 801004c:	4293      	cmp	r3, r2
 801004e:	fb01 f000 	mul.w	r0, r1, r0
 8010052:	d101      	bne.n	8010058 <get_tensor_byte_size+0x20>
 8010054:	3007      	adds	r0, #7
 8010056:	08c0      	lsrs	r0, r0, #3
 8010058:	bc30      	pop	{r4, r5}
 801005a:	4770      	bx	lr
 801005c:	017fffff 	.word	0x017fffff
 8010060:	000400c0 	.word	0x000400c0

08010064 <ai_array_to_buffer_fmt>:
 8010064:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8010068:	2b02      	cmp	r3, #2
 801006a:	d050      	beq.n	801010e <ai_array_to_buffer_fmt+0xaa>
 801006c:	f020 427e 	bic.w	r2, r0, #4261412864	; 0xfe000000
 8010070:	4b29      	ldr	r3, [pc, #164]	; (8010118 <ai_array_to_buffer_fmt+0xb4>)
 8010072:	429a      	cmp	r2, r3
 8010074:	d00b      	beq.n	801008e <ai_array_to_buffer_fmt+0x2a>
 8010076:	dc1c      	bgt.n	80100b2 <ai_array_to_buffer_fmt+0x4e>
 8010078:	4b28      	ldr	r3, [pc, #160]	; (801011c <ai_array_to_buffer_fmt+0xb8>)
 801007a:	429a      	cmp	r2, r3
 801007c:	d007      	beq.n	801008e <ai_array_to_buffer_fmt+0x2a>
 801007e:	dd0b      	ble.n	8010098 <ai_array_to_buffer_fmt+0x34>
 8010080:	4b27      	ldr	r3, [pc, #156]	; (8010120 <ai_array_to_buffer_fmt+0xbc>)
 8010082:	429a      	cmp	r2, r3
 8010084:	d003      	beq.n	801008e <ai_array_to_buffer_fmt+0x2a>
 8010086:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 801008a:	429a      	cmp	r2, r3
 801008c:	d131      	bne.n	80100f2 <ai_array_to_buffer_fmt+0x8e>
 801008e:	4613      	mov	r3, r2
 8010090:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8010094:	4318      	orrs	r0, r3
 8010096:	4770      	bx	lr
 8010098:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 801009c:	429a      	cmp	r2, r3
 801009e:	d0f6      	beq.n	801008e <ai_array_to_buffer_fmt+0x2a>
 80100a0:	dd2c      	ble.n	80100fc <ai_array_to_buffer_fmt+0x98>
 80100a2:	4b20      	ldr	r3, [pc, #128]	; (8010124 <ai_array_to_buffer_fmt+0xc0>)
 80100a4:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 80100a8:	429a      	cmp	r2, r3
 80100aa:	bf18      	it	ne
 80100ac:	2340      	movne	r3, #64	; 0x40
 80100ae:	4318      	orrs	r0, r3
 80100b0:	4770      	bx	lr
 80100b2:	4b1d      	ldr	r3, [pc, #116]	; (8010128 <ai_array_to_buffer_fmt+0xc4>)
 80100b4:	429a      	cmp	r2, r3
 80100b6:	d0ea      	beq.n	801008e <ai_array_to_buffer_fmt+0x2a>
 80100b8:	dd0e      	ble.n	80100d8 <ai_array_to_buffer_fmt+0x74>
 80100ba:	4b1c      	ldr	r3, [pc, #112]	; (801012c <ai_array_to_buffer_fmt+0xc8>)
 80100bc:	429a      	cmp	r2, r3
 80100be:	d0e6      	beq.n	801008e <ai_array_to_buffer_fmt+0x2a>
 80100c0:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 80100c4:	429a      	cmp	r2, r3
 80100c6:	d0e2      	beq.n	801008e <ai_array_to_buffer_fmt+0x2a>
 80100c8:	4b19      	ldr	r3, [pc, #100]	; (8010130 <ai_array_to_buffer_fmt+0xcc>)
 80100ca:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 80100ce:	429a      	cmp	r2, r3
 80100d0:	bf18      	it	ne
 80100d2:	2340      	movne	r3, #64	; 0x40
 80100d4:	4318      	orrs	r0, r3
 80100d6:	4770      	bx	lr
 80100d8:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80100dc:	429a      	cmp	r2, r3
 80100de:	d0d6      	beq.n	801008e <ai_array_to_buffer_fmt+0x2a>
 80100e0:	3307      	adds	r3, #7
 80100e2:	429a      	cmp	r2, r3
 80100e4:	d0d3      	beq.n	801008e <ai_array_to_buffer_fmt+0x2a>
 80100e6:	f2a3 3387 	subw	r3, r3, #903	; 0x387
 80100ea:	429a      	cmp	r2, r3
 80100ec:	bf18      	it	ne
 80100ee:	2340      	movne	r3, #64	; 0x40
 80100f0:	e7ce      	b.n	8010090 <ai_array_to_buffer_fmt+0x2c>
 80100f2:	4b10      	ldr	r3, [pc, #64]	; (8010134 <ai_array_to_buffer_fmt+0xd0>)
 80100f4:	429a      	cmp	r2, r3
 80100f6:	bf18      	it	ne
 80100f8:	2340      	movne	r3, #64	; 0x40
 80100fa:	e7c9      	b.n	8010090 <ai_array_to_buffer_fmt+0x2c>
 80100fc:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8010100:	429a      	cmp	r2, r3
 8010102:	d0c4      	beq.n	801008e <ai_array_to_buffer_fmt+0x2a>
 8010104:	3380      	adds	r3, #128	; 0x80
 8010106:	429a      	cmp	r2, r3
 8010108:	bf18      	it	ne
 801010a:	2340      	movne	r3, #64	; 0x40
 801010c:	e7c0      	b.n	8010090 <ai_array_to_buffer_fmt+0x2c>
 801010e:	4b0a      	ldr	r3, [pc, #40]	; (8010138 <ai_array_to_buffer_fmt+0xd4>)
 8010110:	4003      	ands	r3, r0
 8010112:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8010116:	e7bb      	b.n	8010090 <ai_array_to_buffer_fmt+0x2c>
 8010118:	00840040 	.word	0x00840040
 801011c:	00040840 	.word	0x00040840
 8010120:	00041040 	.word	0x00041040
 8010124:	00040447 	.word	0x00040447
 8010128:	00840840 	.word	0x00840840
 801012c:	00841040 	.word	0x00841040
 8010130:	0084084f 	.word	0x0084084f
 8010134:	0004084f 	.word	0x0004084f
 8010138:	00803fff 	.word	0x00803fff

0801013c <ai_array_get_data_byte_size>:
 801013c:	b161      	cbz	r1, 8010158 <ai_array_get_data_byte_size+0x1c>
 801013e:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8010142:	f3c0 5241 	ubfx	r2, r0, #21, #2
 8010146:	fb03 f101 	mul.w	r1, r3, r1
 801014a:	1dc8      	adds	r0, r1, #7
 801014c:	f020 0007 	bic.w	r0, r0, #7
 8010150:	40d0      	lsrs	r0, r2
 8010152:	3007      	adds	r0, #7
 8010154:	08c0      	lsrs	r0, r0, #3
 8010156:	4770      	bx	lr
 8010158:	4608      	mov	r0, r1
 801015a:	4770      	bx	lr

0801015c <__errno>:
 801015c:	4b01      	ldr	r3, [pc, #4]	; (8010164 <__errno+0x8>)
 801015e:	6818      	ldr	r0, [r3, #0]
 8010160:	4770      	bx	lr
 8010162:	bf00      	nop
 8010164:	24000b2c 	.word	0x24000b2c

08010168 <__libc_init_array>:
 8010168:	b570      	push	{r4, r5, r6, lr}
 801016a:	4d0d      	ldr	r5, [pc, #52]	; (80101a0 <__libc_init_array+0x38>)
 801016c:	4c0d      	ldr	r4, [pc, #52]	; (80101a4 <__libc_init_array+0x3c>)
 801016e:	1b64      	subs	r4, r4, r5
 8010170:	10a4      	asrs	r4, r4, #2
 8010172:	2600      	movs	r6, #0
 8010174:	42a6      	cmp	r6, r4
 8010176:	d109      	bne.n	801018c <__libc_init_array+0x24>
 8010178:	4d0b      	ldr	r5, [pc, #44]	; (80101a8 <__libc_init_array+0x40>)
 801017a:	4c0c      	ldr	r4, [pc, #48]	; (80101ac <__libc_init_array+0x44>)
 801017c:	f001 fa42 	bl	8011604 <_init>
 8010180:	1b64      	subs	r4, r4, r5
 8010182:	10a4      	asrs	r4, r4, #2
 8010184:	2600      	movs	r6, #0
 8010186:	42a6      	cmp	r6, r4
 8010188:	d105      	bne.n	8010196 <__libc_init_array+0x2e>
 801018a:	bd70      	pop	{r4, r5, r6, pc}
 801018c:	f855 3b04 	ldr.w	r3, [r5], #4
 8010190:	4798      	blx	r3
 8010192:	3601      	adds	r6, #1
 8010194:	e7ee      	b.n	8010174 <__libc_init_array+0xc>
 8010196:	f855 3b04 	ldr.w	r3, [r5], #4
 801019a:	4798      	blx	r3
 801019c:	3601      	adds	r6, #1
 801019e:	e7f2      	b.n	8010186 <__libc_init_array+0x1e>
 80101a0:	0801186c 	.word	0x0801186c
 80101a4:	0801186c 	.word	0x0801186c
 80101a8:	0801186c 	.word	0x0801186c
 80101ac:	08011870 	.word	0x08011870

080101b0 <memcpy>:
 80101b0:	440a      	add	r2, r1
 80101b2:	4291      	cmp	r1, r2
 80101b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80101b8:	d100      	bne.n	80101bc <memcpy+0xc>
 80101ba:	4770      	bx	lr
 80101bc:	b510      	push	{r4, lr}
 80101be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80101c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80101c6:	4291      	cmp	r1, r2
 80101c8:	d1f9      	bne.n	80101be <memcpy+0xe>
 80101ca:	bd10      	pop	{r4, pc}

080101cc <memset>:
 80101cc:	4402      	add	r2, r0
 80101ce:	4603      	mov	r3, r0
 80101d0:	4293      	cmp	r3, r2
 80101d2:	d100      	bne.n	80101d6 <memset+0xa>
 80101d4:	4770      	bx	lr
 80101d6:	f803 1b01 	strb.w	r1, [r3], #1
 80101da:	e7f9      	b.n	80101d0 <memset+0x4>

080101dc <_free_r>:
 80101dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80101de:	2900      	cmp	r1, #0
 80101e0:	d044      	beq.n	801026c <_free_r+0x90>
 80101e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80101e6:	9001      	str	r0, [sp, #4]
 80101e8:	2b00      	cmp	r3, #0
 80101ea:	f1a1 0404 	sub.w	r4, r1, #4
 80101ee:	bfb8      	it	lt
 80101f0:	18e4      	addlt	r4, r4, r3
 80101f2:	f000 fc85 	bl	8010b00 <__malloc_lock>
 80101f6:	4a1e      	ldr	r2, [pc, #120]	; (8010270 <_free_r+0x94>)
 80101f8:	9801      	ldr	r0, [sp, #4]
 80101fa:	6813      	ldr	r3, [r2, #0]
 80101fc:	b933      	cbnz	r3, 801020c <_free_r+0x30>
 80101fe:	6063      	str	r3, [r4, #4]
 8010200:	6014      	str	r4, [r2, #0]
 8010202:	b003      	add	sp, #12
 8010204:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010208:	f000 bc80 	b.w	8010b0c <__malloc_unlock>
 801020c:	42a3      	cmp	r3, r4
 801020e:	d908      	bls.n	8010222 <_free_r+0x46>
 8010210:	6825      	ldr	r5, [r4, #0]
 8010212:	1961      	adds	r1, r4, r5
 8010214:	428b      	cmp	r3, r1
 8010216:	bf01      	itttt	eq
 8010218:	6819      	ldreq	r1, [r3, #0]
 801021a:	685b      	ldreq	r3, [r3, #4]
 801021c:	1949      	addeq	r1, r1, r5
 801021e:	6021      	streq	r1, [r4, #0]
 8010220:	e7ed      	b.n	80101fe <_free_r+0x22>
 8010222:	461a      	mov	r2, r3
 8010224:	685b      	ldr	r3, [r3, #4]
 8010226:	b10b      	cbz	r3, 801022c <_free_r+0x50>
 8010228:	42a3      	cmp	r3, r4
 801022a:	d9fa      	bls.n	8010222 <_free_r+0x46>
 801022c:	6811      	ldr	r1, [r2, #0]
 801022e:	1855      	adds	r5, r2, r1
 8010230:	42a5      	cmp	r5, r4
 8010232:	d10b      	bne.n	801024c <_free_r+0x70>
 8010234:	6824      	ldr	r4, [r4, #0]
 8010236:	4421      	add	r1, r4
 8010238:	1854      	adds	r4, r2, r1
 801023a:	42a3      	cmp	r3, r4
 801023c:	6011      	str	r1, [r2, #0]
 801023e:	d1e0      	bne.n	8010202 <_free_r+0x26>
 8010240:	681c      	ldr	r4, [r3, #0]
 8010242:	685b      	ldr	r3, [r3, #4]
 8010244:	6053      	str	r3, [r2, #4]
 8010246:	4421      	add	r1, r4
 8010248:	6011      	str	r1, [r2, #0]
 801024a:	e7da      	b.n	8010202 <_free_r+0x26>
 801024c:	d902      	bls.n	8010254 <_free_r+0x78>
 801024e:	230c      	movs	r3, #12
 8010250:	6003      	str	r3, [r0, #0]
 8010252:	e7d6      	b.n	8010202 <_free_r+0x26>
 8010254:	6825      	ldr	r5, [r4, #0]
 8010256:	1961      	adds	r1, r4, r5
 8010258:	428b      	cmp	r3, r1
 801025a:	bf04      	itt	eq
 801025c:	6819      	ldreq	r1, [r3, #0]
 801025e:	685b      	ldreq	r3, [r3, #4]
 8010260:	6063      	str	r3, [r4, #4]
 8010262:	bf04      	itt	eq
 8010264:	1949      	addeq	r1, r1, r5
 8010266:	6021      	streq	r1, [r4, #0]
 8010268:	6054      	str	r4, [r2, #4]
 801026a:	e7ca      	b.n	8010202 <_free_r+0x26>
 801026c:	b003      	add	sp, #12
 801026e:	bd30      	pop	{r4, r5, pc}
 8010270:	24002b00 	.word	0x24002b00

08010274 <sbrk_aligned>:
 8010274:	b570      	push	{r4, r5, r6, lr}
 8010276:	4e0e      	ldr	r6, [pc, #56]	; (80102b0 <sbrk_aligned+0x3c>)
 8010278:	460c      	mov	r4, r1
 801027a:	6831      	ldr	r1, [r6, #0]
 801027c:	4605      	mov	r5, r0
 801027e:	b911      	cbnz	r1, 8010286 <sbrk_aligned+0x12>
 8010280:	f000 f91a 	bl	80104b8 <_sbrk_r>
 8010284:	6030      	str	r0, [r6, #0]
 8010286:	4621      	mov	r1, r4
 8010288:	4628      	mov	r0, r5
 801028a:	f000 f915 	bl	80104b8 <_sbrk_r>
 801028e:	1c43      	adds	r3, r0, #1
 8010290:	d00a      	beq.n	80102a8 <sbrk_aligned+0x34>
 8010292:	1cc4      	adds	r4, r0, #3
 8010294:	f024 0403 	bic.w	r4, r4, #3
 8010298:	42a0      	cmp	r0, r4
 801029a:	d007      	beq.n	80102ac <sbrk_aligned+0x38>
 801029c:	1a21      	subs	r1, r4, r0
 801029e:	4628      	mov	r0, r5
 80102a0:	f000 f90a 	bl	80104b8 <_sbrk_r>
 80102a4:	3001      	adds	r0, #1
 80102a6:	d101      	bne.n	80102ac <sbrk_aligned+0x38>
 80102a8:	f04f 34ff 	mov.w	r4, #4294967295
 80102ac:	4620      	mov	r0, r4
 80102ae:	bd70      	pop	{r4, r5, r6, pc}
 80102b0:	24002b04 	.word	0x24002b04

080102b4 <_malloc_r>:
 80102b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80102b8:	1ccd      	adds	r5, r1, #3
 80102ba:	f025 0503 	bic.w	r5, r5, #3
 80102be:	3508      	adds	r5, #8
 80102c0:	2d0c      	cmp	r5, #12
 80102c2:	bf38      	it	cc
 80102c4:	250c      	movcc	r5, #12
 80102c6:	2d00      	cmp	r5, #0
 80102c8:	4607      	mov	r7, r0
 80102ca:	db01      	blt.n	80102d0 <_malloc_r+0x1c>
 80102cc:	42a9      	cmp	r1, r5
 80102ce:	d905      	bls.n	80102dc <_malloc_r+0x28>
 80102d0:	230c      	movs	r3, #12
 80102d2:	603b      	str	r3, [r7, #0]
 80102d4:	2600      	movs	r6, #0
 80102d6:	4630      	mov	r0, r6
 80102d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80102dc:	4e2e      	ldr	r6, [pc, #184]	; (8010398 <_malloc_r+0xe4>)
 80102de:	f000 fc0f 	bl	8010b00 <__malloc_lock>
 80102e2:	6833      	ldr	r3, [r6, #0]
 80102e4:	461c      	mov	r4, r3
 80102e6:	bb34      	cbnz	r4, 8010336 <_malloc_r+0x82>
 80102e8:	4629      	mov	r1, r5
 80102ea:	4638      	mov	r0, r7
 80102ec:	f7ff ffc2 	bl	8010274 <sbrk_aligned>
 80102f0:	1c43      	adds	r3, r0, #1
 80102f2:	4604      	mov	r4, r0
 80102f4:	d14d      	bne.n	8010392 <_malloc_r+0xde>
 80102f6:	6834      	ldr	r4, [r6, #0]
 80102f8:	4626      	mov	r6, r4
 80102fa:	2e00      	cmp	r6, #0
 80102fc:	d140      	bne.n	8010380 <_malloc_r+0xcc>
 80102fe:	6823      	ldr	r3, [r4, #0]
 8010300:	4631      	mov	r1, r6
 8010302:	4638      	mov	r0, r7
 8010304:	eb04 0803 	add.w	r8, r4, r3
 8010308:	f000 f8d6 	bl	80104b8 <_sbrk_r>
 801030c:	4580      	cmp	r8, r0
 801030e:	d13a      	bne.n	8010386 <_malloc_r+0xd2>
 8010310:	6821      	ldr	r1, [r4, #0]
 8010312:	3503      	adds	r5, #3
 8010314:	1a6d      	subs	r5, r5, r1
 8010316:	f025 0503 	bic.w	r5, r5, #3
 801031a:	3508      	adds	r5, #8
 801031c:	2d0c      	cmp	r5, #12
 801031e:	bf38      	it	cc
 8010320:	250c      	movcc	r5, #12
 8010322:	4629      	mov	r1, r5
 8010324:	4638      	mov	r0, r7
 8010326:	f7ff ffa5 	bl	8010274 <sbrk_aligned>
 801032a:	3001      	adds	r0, #1
 801032c:	d02b      	beq.n	8010386 <_malloc_r+0xd2>
 801032e:	6823      	ldr	r3, [r4, #0]
 8010330:	442b      	add	r3, r5
 8010332:	6023      	str	r3, [r4, #0]
 8010334:	e00e      	b.n	8010354 <_malloc_r+0xa0>
 8010336:	6822      	ldr	r2, [r4, #0]
 8010338:	1b52      	subs	r2, r2, r5
 801033a:	d41e      	bmi.n	801037a <_malloc_r+0xc6>
 801033c:	2a0b      	cmp	r2, #11
 801033e:	d916      	bls.n	801036e <_malloc_r+0xba>
 8010340:	1961      	adds	r1, r4, r5
 8010342:	42a3      	cmp	r3, r4
 8010344:	6025      	str	r5, [r4, #0]
 8010346:	bf18      	it	ne
 8010348:	6059      	strne	r1, [r3, #4]
 801034a:	6863      	ldr	r3, [r4, #4]
 801034c:	bf08      	it	eq
 801034e:	6031      	streq	r1, [r6, #0]
 8010350:	5162      	str	r2, [r4, r5]
 8010352:	604b      	str	r3, [r1, #4]
 8010354:	4638      	mov	r0, r7
 8010356:	f104 060b 	add.w	r6, r4, #11
 801035a:	f000 fbd7 	bl	8010b0c <__malloc_unlock>
 801035e:	f026 0607 	bic.w	r6, r6, #7
 8010362:	1d23      	adds	r3, r4, #4
 8010364:	1af2      	subs	r2, r6, r3
 8010366:	d0b6      	beq.n	80102d6 <_malloc_r+0x22>
 8010368:	1b9b      	subs	r3, r3, r6
 801036a:	50a3      	str	r3, [r4, r2]
 801036c:	e7b3      	b.n	80102d6 <_malloc_r+0x22>
 801036e:	6862      	ldr	r2, [r4, #4]
 8010370:	42a3      	cmp	r3, r4
 8010372:	bf0c      	ite	eq
 8010374:	6032      	streq	r2, [r6, #0]
 8010376:	605a      	strne	r2, [r3, #4]
 8010378:	e7ec      	b.n	8010354 <_malloc_r+0xa0>
 801037a:	4623      	mov	r3, r4
 801037c:	6864      	ldr	r4, [r4, #4]
 801037e:	e7b2      	b.n	80102e6 <_malloc_r+0x32>
 8010380:	4634      	mov	r4, r6
 8010382:	6876      	ldr	r6, [r6, #4]
 8010384:	e7b9      	b.n	80102fa <_malloc_r+0x46>
 8010386:	230c      	movs	r3, #12
 8010388:	603b      	str	r3, [r7, #0]
 801038a:	4638      	mov	r0, r7
 801038c:	f000 fbbe 	bl	8010b0c <__malloc_unlock>
 8010390:	e7a1      	b.n	80102d6 <_malloc_r+0x22>
 8010392:	6025      	str	r5, [r4, #0]
 8010394:	e7de      	b.n	8010354 <_malloc_r+0xa0>
 8010396:	bf00      	nop
 8010398:	24002b00 	.word	0x24002b00

0801039c <iprintf>:
 801039c:	b40f      	push	{r0, r1, r2, r3}
 801039e:	4b0a      	ldr	r3, [pc, #40]	; (80103c8 <iprintf+0x2c>)
 80103a0:	b513      	push	{r0, r1, r4, lr}
 80103a2:	681c      	ldr	r4, [r3, #0]
 80103a4:	b124      	cbz	r4, 80103b0 <iprintf+0x14>
 80103a6:	69a3      	ldr	r3, [r4, #24]
 80103a8:	b913      	cbnz	r3, 80103b0 <iprintf+0x14>
 80103aa:	4620      	mov	r0, r4
 80103ac:	f000 faa2 	bl	80108f4 <__sinit>
 80103b0:	ab05      	add	r3, sp, #20
 80103b2:	9a04      	ldr	r2, [sp, #16]
 80103b4:	68a1      	ldr	r1, [r4, #8]
 80103b6:	9301      	str	r3, [sp, #4]
 80103b8:	4620      	mov	r0, r4
 80103ba:	f000 fd61 	bl	8010e80 <_vfiprintf_r>
 80103be:	b002      	add	sp, #8
 80103c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80103c4:	b004      	add	sp, #16
 80103c6:	4770      	bx	lr
 80103c8:	24000b2c 	.word	0x24000b2c

080103cc <_puts_r>:
 80103cc:	b570      	push	{r4, r5, r6, lr}
 80103ce:	460e      	mov	r6, r1
 80103d0:	4605      	mov	r5, r0
 80103d2:	b118      	cbz	r0, 80103dc <_puts_r+0x10>
 80103d4:	6983      	ldr	r3, [r0, #24]
 80103d6:	b90b      	cbnz	r3, 80103dc <_puts_r+0x10>
 80103d8:	f000 fa8c 	bl	80108f4 <__sinit>
 80103dc:	69ab      	ldr	r3, [r5, #24]
 80103de:	68ac      	ldr	r4, [r5, #8]
 80103e0:	b913      	cbnz	r3, 80103e8 <_puts_r+0x1c>
 80103e2:	4628      	mov	r0, r5
 80103e4:	f000 fa86 	bl	80108f4 <__sinit>
 80103e8:	4b2c      	ldr	r3, [pc, #176]	; (801049c <_puts_r+0xd0>)
 80103ea:	429c      	cmp	r4, r3
 80103ec:	d120      	bne.n	8010430 <_puts_r+0x64>
 80103ee:	686c      	ldr	r4, [r5, #4]
 80103f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80103f2:	07db      	lsls	r3, r3, #31
 80103f4:	d405      	bmi.n	8010402 <_puts_r+0x36>
 80103f6:	89a3      	ldrh	r3, [r4, #12]
 80103f8:	0598      	lsls	r0, r3, #22
 80103fa:	d402      	bmi.n	8010402 <_puts_r+0x36>
 80103fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80103fe:	f000 fb17 	bl	8010a30 <__retarget_lock_acquire_recursive>
 8010402:	89a3      	ldrh	r3, [r4, #12]
 8010404:	0719      	lsls	r1, r3, #28
 8010406:	d51d      	bpl.n	8010444 <_puts_r+0x78>
 8010408:	6923      	ldr	r3, [r4, #16]
 801040a:	b1db      	cbz	r3, 8010444 <_puts_r+0x78>
 801040c:	3e01      	subs	r6, #1
 801040e:	68a3      	ldr	r3, [r4, #8]
 8010410:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8010414:	3b01      	subs	r3, #1
 8010416:	60a3      	str	r3, [r4, #8]
 8010418:	bb39      	cbnz	r1, 801046a <_puts_r+0x9e>
 801041a:	2b00      	cmp	r3, #0
 801041c:	da38      	bge.n	8010490 <_puts_r+0xc4>
 801041e:	4622      	mov	r2, r4
 8010420:	210a      	movs	r1, #10
 8010422:	4628      	mov	r0, r5
 8010424:	f000 f88c 	bl	8010540 <__swbuf_r>
 8010428:	3001      	adds	r0, #1
 801042a:	d011      	beq.n	8010450 <_puts_r+0x84>
 801042c:	250a      	movs	r5, #10
 801042e:	e011      	b.n	8010454 <_puts_r+0x88>
 8010430:	4b1b      	ldr	r3, [pc, #108]	; (80104a0 <_puts_r+0xd4>)
 8010432:	429c      	cmp	r4, r3
 8010434:	d101      	bne.n	801043a <_puts_r+0x6e>
 8010436:	68ac      	ldr	r4, [r5, #8]
 8010438:	e7da      	b.n	80103f0 <_puts_r+0x24>
 801043a:	4b1a      	ldr	r3, [pc, #104]	; (80104a4 <_puts_r+0xd8>)
 801043c:	429c      	cmp	r4, r3
 801043e:	bf08      	it	eq
 8010440:	68ec      	ldreq	r4, [r5, #12]
 8010442:	e7d5      	b.n	80103f0 <_puts_r+0x24>
 8010444:	4621      	mov	r1, r4
 8010446:	4628      	mov	r0, r5
 8010448:	f000 f8cc 	bl	80105e4 <__swsetup_r>
 801044c:	2800      	cmp	r0, #0
 801044e:	d0dd      	beq.n	801040c <_puts_r+0x40>
 8010450:	f04f 35ff 	mov.w	r5, #4294967295
 8010454:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010456:	07da      	lsls	r2, r3, #31
 8010458:	d405      	bmi.n	8010466 <_puts_r+0x9a>
 801045a:	89a3      	ldrh	r3, [r4, #12]
 801045c:	059b      	lsls	r3, r3, #22
 801045e:	d402      	bmi.n	8010466 <_puts_r+0x9a>
 8010460:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010462:	f000 fae6 	bl	8010a32 <__retarget_lock_release_recursive>
 8010466:	4628      	mov	r0, r5
 8010468:	bd70      	pop	{r4, r5, r6, pc}
 801046a:	2b00      	cmp	r3, #0
 801046c:	da04      	bge.n	8010478 <_puts_r+0xac>
 801046e:	69a2      	ldr	r2, [r4, #24]
 8010470:	429a      	cmp	r2, r3
 8010472:	dc06      	bgt.n	8010482 <_puts_r+0xb6>
 8010474:	290a      	cmp	r1, #10
 8010476:	d004      	beq.n	8010482 <_puts_r+0xb6>
 8010478:	6823      	ldr	r3, [r4, #0]
 801047a:	1c5a      	adds	r2, r3, #1
 801047c:	6022      	str	r2, [r4, #0]
 801047e:	7019      	strb	r1, [r3, #0]
 8010480:	e7c5      	b.n	801040e <_puts_r+0x42>
 8010482:	4622      	mov	r2, r4
 8010484:	4628      	mov	r0, r5
 8010486:	f000 f85b 	bl	8010540 <__swbuf_r>
 801048a:	3001      	adds	r0, #1
 801048c:	d1bf      	bne.n	801040e <_puts_r+0x42>
 801048e:	e7df      	b.n	8010450 <_puts_r+0x84>
 8010490:	6823      	ldr	r3, [r4, #0]
 8010492:	250a      	movs	r5, #10
 8010494:	1c5a      	adds	r2, r3, #1
 8010496:	6022      	str	r2, [r4, #0]
 8010498:	701d      	strb	r5, [r3, #0]
 801049a:	e7db      	b.n	8010454 <_puts_r+0x88>
 801049c:	080117f8 	.word	0x080117f8
 80104a0:	08011818 	.word	0x08011818
 80104a4:	080117d8 	.word	0x080117d8

080104a8 <puts>:
 80104a8:	4b02      	ldr	r3, [pc, #8]	; (80104b4 <puts+0xc>)
 80104aa:	4601      	mov	r1, r0
 80104ac:	6818      	ldr	r0, [r3, #0]
 80104ae:	f7ff bf8d 	b.w	80103cc <_puts_r>
 80104b2:	bf00      	nop
 80104b4:	24000b2c 	.word	0x24000b2c

080104b8 <_sbrk_r>:
 80104b8:	b538      	push	{r3, r4, r5, lr}
 80104ba:	4d06      	ldr	r5, [pc, #24]	; (80104d4 <_sbrk_r+0x1c>)
 80104bc:	2300      	movs	r3, #0
 80104be:	4604      	mov	r4, r0
 80104c0:	4608      	mov	r0, r1
 80104c2:	602b      	str	r3, [r5, #0]
 80104c4:	f7f0 fe4e 	bl	8001164 <_sbrk>
 80104c8:	1c43      	adds	r3, r0, #1
 80104ca:	d102      	bne.n	80104d2 <_sbrk_r+0x1a>
 80104cc:	682b      	ldr	r3, [r5, #0]
 80104ce:	b103      	cbz	r3, 80104d2 <_sbrk_r+0x1a>
 80104d0:	6023      	str	r3, [r4, #0]
 80104d2:	bd38      	pop	{r3, r4, r5, pc}
 80104d4:	24002b0c 	.word	0x24002b0c

080104d8 <sniprintf>:
 80104d8:	b40c      	push	{r2, r3}
 80104da:	b530      	push	{r4, r5, lr}
 80104dc:	4b17      	ldr	r3, [pc, #92]	; (801053c <sniprintf+0x64>)
 80104de:	1e0c      	subs	r4, r1, #0
 80104e0:	681d      	ldr	r5, [r3, #0]
 80104e2:	b09d      	sub	sp, #116	; 0x74
 80104e4:	da08      	bge.n	80104f8 <sniprintf+0x20>
 80104e6:	238b      	movs	r3, #139	; 0x8b
 80104e8:	602b      	str	r3, [r5, #0]
 80104ea:	f04f 30ff 	mov.w	r0, #4294967295
 80104ee:	b01d      	add	sp, #116	; 0x74
 80104f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80104f4:	b002      	add	sp, #8
 80104f6:	4770      	bx	lr
 80104f8:	f44f 7302 	mov.w	r3, #520	; 0x208
 80104fc:	f8ad 3014 	strh.w	r3, [sp, #20]
 8010500:	bf14      	ite	ne
 8010502:	f104 33ff 	addne.w	r3, r4, #4294967295
 8010506:	4623      	moveq	r3, r4
 8010508:	9304      	str	r3, [sp, #16]
 801050a:	9307      	str	r3, [sp, #28]
 801050c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010510:	9002      	str	r0, [sp, #8]
 8010512:	9006      	str	r0, [sp, #24]
 8010514:	f8ad 3016 	strh.w	r3, [sp, #22]
 8010518:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801051a:	ab21      	add	r3, sp, #132	; 0x84
 801051c:	a902      	add	r1, sp, #8
 801051e:	4628      	mov	r0, r5
 8010520:	9301      	str	r3, [sp, #4]
 8010522:	f000 fb83 	bl	8010c2c <_svfiprintf_r>
 8010526:	1c43      	adds	r3, r0, #1
 8010528:	bfbc      	itt	lt
 801052a:	238b      	movlt	r3, #139	; 0x8b
 801052c:	602b      	strlt	r3, [r5, #0]
 801052e:	2c00      	cmp	r4, #0
 8010530:	d0dd      	beq.n	80104ee <sniprintf+0x16>
 8010532:	9b02      	ldr	r3, [sp, #8]
 8010534:	2200      	movs	r2, #0
 8010536:	701a      	strb	r2, [r3, #0]
 8010538:	e7d9      	b.n	80104ee <sniprintf+0x16>
 801053a:	bf00      	nop
 801053c:	24000b2c 	.word	0x24000b2c

08010540 <__swbuf_r>:
 8010540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010542:	460e      	mov	r6, r1
 8010544:	4614      	mov	r4, r2
 8010546:	4605      	mov	r5, r0
 8010548:	b118      	cbz	r0, 8010552 <__swbuf_r+0x12>
 801054a:	6983      	ldr	r3, [r0, #24]
 801054c:	b90b      	cbnz	r3, 8010552 <__swbuf_r+0x12>
 801054e:	f000 f9d1 	bl	80108f4 <__sinit>
 8010552:	4b21      	ldr	r3, [pc, #132]	; (80105d8 <__swbuf_r+0x98>)
 8010554:	429c      	cmp	r4, r3
 8010556:	d12b      	bne.n	80105b0 <__swbuf_r+0x70>
 8010558:	686c      	ldr	r4, [r5, #4]
 801055a:	69a3      	ldr	r3, [r4, #24]
 801055c:	60a3      	str	r3, [r4, #8]
 801055e:	89a3      	ldrh	r3, [r4, #12]
 8010560:	071a      	lsls	r2, r3, #28
 8010562:	d52f      	bpl.n	80105c4 <__swbuf_r+0x84>
 8010564:	6923      	ldr	r3, [r4, #16]
 8010566:	b36b      	cbz	r3, 80105c4 <__swbuf_r+0x84>
 8010568:	6923      	ldr	r3, [r4, #16]
 801056a:	6820      	ldr	r0, [r4, #0]
 801056c:	1ac0      	subs	r0, r0, r3
 801056e:	6963      	ldr	r3, [r4, #20]
 8010570:	b2f6      	uxtb	r6, r6
 8010572:	4283      	cmp	r3, r0
 8010574:	4637      	mov	r7, r6
 8010576:	dc04      	bgt.n	8010582 <__swbuf_r+0x42>
 8010578:	4621      	mov	r1, r4
 801057a:	4628      	mov	r0, r5
 801057c:	f000 f926 	bl	80107cc <_fflush_r>
 8010580:	bb30      	cbnz	r0, 80105d0 <__swbuf_r+0x90>
 8010582:	68a3      	ldr	r3, [r4, #8]
 8010584:	3b01      	subs	r3, #1
 8010586:	60a3      	str	r3, [r4, #8]
 8010588:	6823      	ldr	r3, [r4, #0]
 801058a:	1c5a      	adds	r2, r3, #1
 801058c:	6022      	str	r2, [r4, #0]
 801058e:	701e      	strb	r6, [r3, #0]
 8010590:	6963      	ldr	r3, [r4, #20]
 8010592:	3001      	adds	r0, #1
 8010594:	4283      	cmp	r3, r0
 8010596:	d004      	beq.n	80105a2 <__swbuf_r+0x62>
 8010598:	89a3      	ldrh	r3, [r4, #12]
 801059a:	07db      	lsls	r3, r3, #31
 801059c:	d506      	bpl.n	80105ac <__swbuf_r+0x6c>
 801059e:	2e0a      	cmp	r6, #10
 80105a0:	d104      	bne.n	80105ac <__swbuf_r+0x6c>
 80105a2:	4621      	mov	r1, r4
 80105a4:	4628      	mov	r0, r5
 80105a6:	f000 f911 	bl	80107cc <_fflush_r>
 80105aa:	b988      	cbnz	r0, 80105d0 <__swbuf_r+0x90>
 80105ac:	4638      	mov	r0, r7
 80105ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80105b0:	4b0a      	ldr	r3, [pc, #40]	; (80105dc <__swbuf_r+0x9c>)
 80105b2:	429c      	cmp	r4, r3
 80105b4:	d101      	bne.n	80105ba <__swbuf_r+0x7a>
 80105b6:	68ac      	ldr	r4, [r5, #8]
 80105b8:	e7cf      	b.n	801055a <__swbuf_r+0x1a>
 80105ba:	4b09      	ldr	r3, [pc, #36]	; (80105e0 <__swbuf_r+0xa0>)
 80105bc:	429c      	cmp	r4, r3
 80105be:	bf08      	it	eq
 80105c0:	68ec      	ldreq	r4, [r5, #12]
 80105c2:	e7ca      	b.n	801055a <__swbuf_r+0x1a>
 80105c4:	4621      	mov	r1, r4
 80105c6:	4628      	mov	r0, r5
 80105c8:	f000 f80c 	bl	80105e4 <__swsetup_r>
 80105cc:	2800      	cmp	r0, #0
 80105ce:	d0cb      	beq.n	8010568 <__swbuf_r+0x28>
 80105d0:	f04f 37ff 	mov.w	r7, #4294967295
 80105d4:	e7ea      	b.n	80105ac <__swbuf_r+0x6c>
 80105d6:	bf00      	nop
 80105d8:	080117f8 	.word	0x080117f8
 80105dc:	08011818 	.word	0x08011818
 80105e0:	080117d8 	.word	0x080117d8

080105e4 <__swsetup_r>:
 80105e4:	4b32      	ldr	r3, [pc, #200]	; (80106b0 <__swsetup_r+0xcc>)
 80105e6:	b570      	push	{r4, r5, r6, lr}
 80105e8:	681d      	ldr	r5, [r3, #0]
 80105ea:	4606      	mov	r6, r0
 80105ec:	460c      	mov	r4, r1
 80105ee:	b125      	cbz	r5, 80105fa <__swsetup_r+0x16>
 80105f0:	69ab      	ldr	r3, [r5, #24]
 80105f2:	b913      	cbnz	r3, 80105fa <__swsetup_r+0x16>
 80105f4:	4628      	mov	r0, r5
 80105f6:	f000 f97d 	bl	80108f4 <__sinit>
 80105fa:	4b2e      	ldr	r3, [pc, #184]	; (80106b4 <__swsetup_r+0xd0>)
 80105fc:	429c      	cmp	r4, r3
 80105fe:	d10f      	bne.n	8010620 <__swsetup_r+0x3c>
 8010600:	686c      	ldr	r4, [r5, #4]
 8010602:	89a3      	ldrh	r3, [r4, #12]
 8010604:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010608:	0719      	lsls	r1, r3, #28
 801060a:	d42c      	bmi.n	8010666 <__swsetup_r+0x82>
 801060c:	06dd      	lsls	r5, r3, #27
 801060e:	d411      	bmi.n	8010634 <__swsetup_r+0x50>
 8010610:	2309      	movs	r3, #9
 8010612:	6033      	str	r3, [r6, #0]
 8010614:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010618:	81a3      	strh	r3, [r4, #12]
 801061a:	f04f 30ff 	mov.w	r0, #4294967295
 801061e:	e03e      	b.n	801069e <__swsetup_r+0xba>
 8010620:	4b25      	ldr	r3, [pc, #148]	; (80106b8 <__swsetup_r+0xd4>)
 8010622:	429c      	cmp	r4, r3
 8010624:	d101      	bne.n	801062a <__swsetup_r+0x46>
 8010626:	68ac      	ldr	r4, [r5, #8]
 8010628:	e7eb      	b.n	8010602 <__swsetup_r+0x1e>
 801062a:	4b24      	ldr	r3, [pc, #144]	; (80106bc <__swsetup_r+0xd8>)
 801062c:	429c      	cmp	r4, r3
 801062e:	bf08      	it	eq
 8010630:	68ec      	ldreq	r4, [r5, #12]
 8010632:	e7e6      	b.n	8010602 <__swsetup_r+0x1e>
 8010634:	0758      	lsls	r0, r3, #29
 8010636:	d512      	bpl.n	801065e <__swsetup_r+0x7a>
 8010638:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801063a:	b141      	cbz	r1, 801064e <__swsetup_r+0x6a>
 801063c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010640:	4299      	cmp	r1, r3
 8010642:	d002      	beq.n	801064a <__swsetup_r+0x66>
 8010644:	4630      	mov	r0, r6
 8010646:	f7ff fdc9 	bl	80101dc <_free_r>
 801064a:	2300      	movs	r3, #0
 801064c:	6363      	str	r3, [r4, #52]	; 0x34
 801064e:	89a3      	ldrh	r3, [r4, #12]
 8010650:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010654:	81a3      	strh	r3, [r4, #12]
 8010656:	2300      	movs	r3, #0
 8010658:	6063      	str	r3, [r4, #4]
 801065a:	6923      	ldr	r3, [r4, #16]
 801065c:	6023      	str	r3, [r4, #0]
 801065e:	89a3      	ldrh	r3, [r4, #12]
 8010660:	f043 0308 	orr.w	r3, r3, #8
 8010664:	81a3      	strh	r3, [r4, #12]
 8010666:	6923      	ldr	r3, [r4, #16]
 8010668:	b94b      	cbnz	r3, 801067e <__swsetup_r+0x9a>
 801066a:	89a3      	ldrh	r3, [r4, #12]
 801066c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010670:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010674:	d003      	beq.n	801067e <__swsetup_r+0x9a>
 8010676:	4621      	mov	r1, r4
 8010678:	4630      	mov	r0, r6
 801067a:	f000 fa01 	bl	8010a80 <__smakebuf_r>
 801067e:	89a0      	ldrh	r0, [r4, #12]
 8010680:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010684:	f010 0301 	ands.w	r3, r0, #1
 8010688:	d00a      	beq.n	80106a0 <__swsetup_r+0xbc>
 801068a:	2300      	movs	r3, #0
 801068c:	60a3      	str	r3, [r4, #8]
 801068e:	6963      	ldr	r3, [r4, #20]
 8010690:	425b      	negs	r3, r3
 8010692:	61a3      	str	r3, [r4, #24]
 8010694:	6923      	ldr	r3, [r4, #16]
 8010696:	b943      	cbnz	r3, 80106aa <__swsetup_r+0xc6>
 8010698:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801069c:	d1ba      	bne.n	8010614 <__swsetup_r+0x30>
 801069e:	bd70      	pop	{r4, r5, r6, pc}
 80106a0:	0781      	lsls	r1, r0, #30
 80106a2:	bf58      	it	pl
 80106a4:	6963      	ldrpl	r3, [r4, #20]
 80106a6:	60a3      	str	r3, [r4, #8]
 80106a8:	e7f4      	b.n	8010694 <__swsetup_r+0xb0>
 80106aa:	2000      	movs	r0, #0
 80106ac:	e7f7      	b.n	801069e <__swsetup_r+0xba>
 80106ae:	bf00      	nop
 80106b0:	24000b2c 	.word	0x24000b2c
 80106b4:	080117f8 	.word	0x080117f8
 80106b8:	08011818 	.word	0x08011818
 80106bc:	080117d8 	.word	0x080117d8

080106c0 <__sflush_r>:
 80106c0:	898a      	ldrh	r2, [r1, #12]
 80106c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80106c6:	4605      	mov	r5, r0
 80106c8:	0710      	lsls	r0, r2, #28
 80106ca:	460c      	mov	r4, r1
 80106cc:	d458      	bmi.n	8010780 <__sflush_r+0xc0>
 80106ce:	684b      	ldr	r3, [r1, #4]
 80106d0:	2b00      	cmp	r3, #0
 80106d2:	dc05      	bgt.n	80106e0 <__sflush_r+0x20>
 80106d4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80106d6:	2b00      	cmp	r3, #0
 80106d8:	dc02      	bgt.n	80106e0 <__sflush_r+0x20>
 80106da:	2000      	movs	r0, #0
 80106dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80106e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80106e2:	2e00      	cmp	r6, #0
 80106e4:	d0f9      	beq.n	80106da <__sflush_r+0x1a>
 80106e6:	2300      	movs	r3, #0
 80106e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80106ec:	682f      	ldr	r7, [r5, #0]
 80106ee:	602b      	str	r3, [r5, #0]
 80106f0:	d032      	beq.n	8010758 <__sflush_r+0x98>
 80106f2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80106f4:	89a3      	ldrh	r3, [r4, #12]
 80106f6:	075a      	lsls	r2, r3, #29
 80106f8:	d505      	bpl.n	8010706 <__sflush_r+0x46>
 80106fa:	6863      	ldr	r3, [r4, #4]
 80106fc:	1ac0      	subs	r0, r0, r3
 80106fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010700:	b10b      	cbz	r3, 8010706 <__sflush_r+0x46>
 8010702:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010704:	1ac0      	subs	r0, r0, r3
 8010706:	2300      	movs	r3, #0
 8010708:	4602      	mov	r2, r0
 801070a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801070c:	6a21      	ldr	r1, [r4, #32]
 801070e:	4628      	mov	r0, r5
 8010710:	47b0      	blx	r6
 8010712:	1c43      	adds	r3, r0, #1
 8010714:	89a3      	ldrh	r3, [r4, #12]
 8010716:	d106      	bne.n	8010726 <__sflush_r+0x66>
 8010718:	6829      	ldr	r1, [r5, #0]
 801071a:	291d      	cmp	r1, #29
 801071c:	d82c      	bhi.n	8010778 <__sflush_r+0xb8>
 801071e:	4a2a      	ldr	r2, [pc, #168]	; (80107c8 <__sflush_r+0x108>)
 8010720:	40ca      	lsrs	r2, r1
 8010722:	07d6      	lsls	r6, r2, #31
 8010724:	d528      	bpl.n	8010778 <__sflush_r+0xb8>
 8010726:	2200      	movs	r2, #0
 8010728:	6062      	str	r2, [r4, #4]
 801072a:	04d9      	lsls	r1, r3, #19
 801072c:	6922      	ldr	r2, [r4, #16]
 801072e:	6022      	str	r2, [r4, #0]
 8010730:	d504      	bpl.n	801073c <__sflush_r+0x7c>
 8010732:	1c42      	adds	r2, r0, #1
 8010734:	d101      	bne.n	801073a <__sflush_r+0x7a>
 8010736:	682b      	ldr	r3, [r5, #0]
 8010738:	b903      	cbnz	r3, 801073c <__sflush_r+0x7c>
 801073a:	6560      	str	r0, [r4, #84]	; 0x54
 801073c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801073e:	602f      	str	r7, [r5, #0]
 8010740:	2900      	cmp	r1, #0
 8010742:	d0ca      	beq.n	80106da <__sflush_r+0x1a>
 8010744:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010748:	4299      	cmp	r1, r3
 801074a:	d002      	beq.n	8010752 <__sflush_r+0x92>
 801074c:	4628      	mov	r0, r5
 801074e:	f7ff fd45 	bl	80101dc <_free_r>
 8010752:	2000      	movs	r0, #0
 8010754:	6360      	str	r0, [r4, #52]	; 0x34
 8010756:	e7c1      	b.n	80106dc <__sflush_r+0x1c>
 8010758:	6a21      	ldr	r1, [r4, #32]
 801075a:	2301      	movs	r3, #1
 801075c:	4628      	mov	r0, r5
 801075e:	47b0      	blx	r6
 8010760:	1c41      	adds	r1, r0, #1
 8010762:	d1c7      	bne.n	80106f4 <__sflush_r+0x34>
 8010764:	682b      	ldr	r3, [r5, #0]
 8010766:	2b00      	cmp	r3, #0
 8010768:	d0c4      	beq.n	80106f4 <__sflush_r+0x34>
 801076a:	2b1d      	cmp	r3, #29
 801076c:	d001      	beq.n	8010772 <__sflush_r+0xb2>
 801076e:	2b16      	cmp	r3, #22
 8010770:	d101      	bne.n	8010776 <__sflush_r+0xb6>
 8010772:	602f      	str	r7, [r5, #0]
 8010774:	e7b1      	b.n	80106da <__sflush_r+0x1a>
 8010776:	89a3      	ldrh	r3, [r4, #12]
 8010778:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801077c:	81a3      	strh	r3, [r4, #12]
 801077e:	e7ad      	b.n	80106dc <__sflush_r+0x1c>
 8010780:	690f      	ldr	r7, [r1, #16]
 8010782:	2f00      	cmp	r7, #0
 8010784:	d0a9      	beq.n	80106da <__sflush_r+0x1a>
 8010786:	0793      	lsls	r3, r2, #30
 8010788:	680e      	ldr	r6, [r1, #0]
 801078a:	bf08      	it	eq
 801078c:	694b      	ldreq	r3, [r1, #20]
 801078e:	600f      	str	r7, [r1, #0]
 8010790:	bf18      	it	ne
 8010792:	2300      	movne	r3, #0
 8010794:	eba6 0807 	sub.w	r8, r6, r7
 8010798:	608b      	str	r3, [r1, #8]
 801079a:	f1b8 0f00 	cmp.w	r8, #0
 801079e:	dd9c      	ble.n	80106da <__sflush_r+0x1a>
 80107a0:	6a21      	ldr	r1, [r4, #32]
 80107a2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80107a4:	4643      	mov	r3, r8
 80107a6:	463a      	mov	r2, r7
 80107a8:	4628      	mov	r0, r5
 80107aa:	47b0      	blx	r6
 80107ac:	2800      	cmp	r0, #0
 80107ae:	dc06      	bgt.n	80107be <__sflush_r+0xfe>
 80107b0:	89a3      	ldrh	r3, [r4, #12]
 80107b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80107b6:	81a3      	strh	r3, [r4, #12]
 80107b8:	f04f 30ff 	mov.w	r0, #4294967295
 80107bc:	e78e      	b.n	80106dc <__sflush_r+0x1c>
 80107be:	4407      	add	r7, r0
 80107c0:	eba8 0800 	sub.w	r8, r8, r0
 80107c4:	e7e9      	b.n	801079a <__sflush_r+0xda>
 80107c6:	bf00      	nop
 80107c8:	20400001 	.word	0x20400001

080107cc <_fflush_r>:
 80107cc:	b538      	push	{r3, r4, r5, lr}
 80107ce:	690b      	ldr	r3, [r1, #16]
 80107d0:	4605      	mov	r5, r0
 80107d2:	460c      	mov	r4, r1
 80107d4:	b913      	cbnz	r3, 80107dc <_fflush_r+0x10>
 80107d6:	2500      	movs	r5, #0
 80107d8:	4628      	mov	r0, r5
 80107da:	bd38      	pop	{r3, r4, r5, pc}
 80107dc:	b118      	cbz	r0, 80107e6 <_fflush_r+0x1a>
 80107de:	6983      	ldr	r3, [r0, #24]
 80107e0:	b90b      	cbnz	r3, 80107e6 <_fflush_r+0x1a>
 80107e2:	f000 f887 	bl	80108f4 <__sinit>
 80107e6:	4b14      	ldr	r3, [pc, #80]	; (8010838 <_fflush_r+0x6c>)
 80107e8:	429c      	cmp	r4, r3
 80107ea:	d11b      	bne.n	8010824 <_fflush_r+0x58>
 80107ec:	686c      	ldr	r4, [r5, #4]
 80107ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80107f2:	2b00      	cmp	r3, #0
 80107f4:	d0ef      	beq.n	80107d6 <_fflush_r+0xa>
 80107f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80107f8:	07d0      	lsls	r0, r2, #31
 80107fa:	d404      	bmi.n	8010806 <_fflush_r+0x3a>
 80107fc:	0599      	lsls	r1, r3, #22
 80107fe:	d402      	bmi.n	8010806 <_fflush_r+0x3a>
 8010800:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010802:	f000 f915 	bl	8010a30 <__retarget_lock_acquire_recursive>
 8010806:	4628      	mov	r0, r5
 8010808:	4621      	mov	r1, r4
 801080a:	f7ff ff59 	bl	80106c0 <__sflush_r>
 801080e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010810:	07da      	lsls	r2, r3, #31
 8010812:	4605      	mov	r5, r0
 8010814:	d4e0      	bmi.n	80107d8 <_fflush_r+0xc>
 8010816:	89a3      	ldrh	r3, [r4, #12]
 8010818:	059b      	lsls	r3, r3, #22
 801081a:	d4dd      	bmi.n	80107d8 <_fflush_r+0xc>
 801081c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801081e:	f000 f908 	bl	8010a32 <__retarget_lock_release_recursive>
 8010822:	e7d9      	b.n	80107d8 <_fflush_r+0xc>
 8010824:	4b05      	ldr	r3, [pc, #20]	; (801083c <_fflush_r+0x70>)
 8010826:	429c      	cmp	r4, r3
 8010828:	d101      	bne.n	801082e <_fflush_r+0x62>
 801082a:	68ac      	ldr	r4, [r5, #8]
 801082c:	e7df      	b.n	80107ee <_fflush_r+0x22>
 801082e:	4b04      	ldr	r3, [pc, #16]	; (8010840 <_fflush_r+0x74>)
 8010830:	429c      	cmp	r4, r3
 8010832:	bf08      	it	eq
 8010834:	68ec      	ldreq	r4, [r5, #12]
 8010836:	e7da      	b.n	80107ee <_fflush_r+0x22>
 8010838:	080117f8 	.word	0x080117f8
 801083c:	08011818 	.word	0x08011818
 8010840:	080117d8 	.word	0x080117d8

08010844 <std>:
 8010844:	2300      	movs	r3, #0
 8010846:	b510      	push	{r4, lr}
 8010848:	4604      	mov	r4, r0
 801084a:	e9c0 3300 	strd	r3, r3, [r0]
 801084e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010852:	6083      	str	r3, [r0, #8]
 8010854:	8181      	strh	r1, [r0, #12]
 8010856:	6643      	str	r3, [r0, #100]	; 0x64
 8010858:	81c2      	strh	r2, [r0, #14]
 801085a:	6183      	str	r3, [r0, #24]
 801085c:	4619      	mov	r1, r3
 801085e:	2208      	movs	r2, #8
 8010860:	305c      	adds	r0, #92	; 0x5c
 8010862:	f7ff fcb3 	bl	80101cc <memset>
 8010866:	4b05      	ldr	r3, [pc, #20]	; (801087c <std+0x38>)
 8010868:	6263      	str	r3, [r4, #36]	; 0x24
 801086a:	4b05      	ldr	r3, [pc, #20]	; (8010880 <std+0x3c>)
 801086c:	62a3      	str	r3, [r4, #40]	; 0x28
 801086e:	4b05      	ldr	r3, [pc, #20]	; (8010884 <std+0x40>)
 8010870:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010872:	4b05      	ldr	r3, [pc, #20]	; (8010888 <std+0x44>)
 8010874:	6224      	str	r4, [r4, #32]
 8010876:	6323      	str	r3, [r4, #48]	; 0x30
 8010878:	bd10      	pop	{r4, pc}
 801087a:	bf00      	nop
 801087c:	08011409 	.word	0x08011409
 8010880:	0801142b 	.word	0x0801142b
 8010884:	08011463 	.word	0x08011463
 8010888:	08011487 	.word	0x08011487

0801088c <_cleanup_r>:
 801088c:	4901      	ldr	r1, [pc, #4]	; (8010894 <_cleanup_r+0x8>)
 801088e:	f000 b8af 	b.w	80109f0 <_fwalk_reent>
 8010892:	bf00      	nop
 8010894:	080107cd 	.word	0x080107cd

08010898 <__sfmoreglue>:
 8010898:	b570      	push	{r4, r5, r6, lr}
 801089a:	2268      	movs	r2, #104	; 0x68
 801089c:	1e4d      	subs	r5, r1, #1
 801089e:	4355      	muls	r5, r2
 80108a0:	460e      	mov	r6, r1
 80108a2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80108a6:	f7ff fd05 	bl	80102b4 <_malloc_r>
 80108aa:	4604      	mov	r4, r0
 80108ac:	b140      	cbz	r0, 80108c0 <__sfmoreglue+0x28>
 80108ae:	2100      	movs	r1, #0
 80108b0:	e9c0 1600 	strd	r1, r6, [r0]
 80108b4:	300c      	adds	r0, #12
 80108b6:	60a0      	str	r0, [r4, #8]
 80108b8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80108bc:	f7ff fc86 	bl	80101cc <memset>
 80108c0:	4620      	mov	r0, r4
 80108c2:	bd70      	pop	{r4, r5, r6, pc}

080108c4 <__sfp_lock_acquire>:
 80108c4:	4801      	ldr	r0, [pc, #4]	; (80108cc <__sfp_lock_acquire+0x8>)
 80108c6:	f000 b8b3 	b.w	8010a30 <__retarget_lock_acquire_recursive>
 80108ca:	bf00      	nop
 80108cc:	24002b09 	.word	0x24002b09

080108d0 <__sfp_lock_release>:
 80108d0:	4801      	ldr	r0, [pc, #4]	; (80108d8 <__sfp_lock_release+0x8>)
 80108d2:	f000 b8ae 	b.w	8010a32 <__retarget_lock_release_recursive>
 80108d6:	bf00      	nop
 80108d8:	24002b09 	.word	0x24002b09

080108dc <__sinit_lock_acquire>:
 80108dc:	4801      	ldr	r0, [pc, #4]	; (80108e4 <__sinit_lock_acquire+0x8>)
 80108de:	f000 b8a7 	b.w	8010a30 <__retarget_lock_acquire_recursive>
 80108e2:	bf00      	nop
 80108e4:	24002b0a 	.word	0x24002b0a

080108e8 <__sinit_lock_release>:
 80108e8:	4801      	ldr	r0, [pc, #4]	; (80108f0 <__sinit_lock_release+0x8>)
 80108ea:	f000 b8a2 	b.w	8010a32 <__retarget_lock_release_recursive>
 80108ee:	bf00      	nop
 80108f0:	24002b0a 	.word	0x24002b0a

080108f4 <__sinit>:
 80108f4:	b510      	push	{r4, lr}
 80108f6:	4604      	mov	r4, r0
 80108f8:	f7ff fff0 	bl	80108dc <__sinit_lock_acquire>
 80108fc:	69a3      	ldr	r3, [r4, #24]
 80108fe:	b11b      	cbz	r3, 8010908 <__sinit+0x14>
 8010900:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010904:	f7ff bff0 	b.w	80108e8 <__sinit_lock_release>
 8010908:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801090c:	6523      	str	r3, [r4, #80]	; 0x50
 801090e:	4b13      	ldr	r3, [pc, #76]	; (801095c <__sinit+0x68>)
 8010910:	4a13      	ldr	r2, [pc, #76]	; (8010960 <__sinit+0x6c>)
 8010912:	681b      	ldr	r3, [r3, #0]
 8010914:	62a2      	str	r2, [r4, #40]	; 0x28
 8010916:	42a3      	cmp	r3, r4
 8010918:	bf04      	itt	eq
 801091a:	2301      	moveq	r3, #1
 801091c:	61a3      	streq	r3, [r4, #24]
 801091e:	4620      	mov	r0, r4
 8010920:	f000 f820 	bl	8010964 <__sfp>
 8010924:	6060      	str	r0, [r4, #4]
 8010926:	4620      	mov	r0, r4
 8010928:	f000 f81c 	bl	8010964 <__sfp>
 801092c:	60a0      	str	r0, [r4, #8]
 801092e:	4620      	mov	r0, r4
 8010930:	f000 f818 	bl	8010964 <__sfp>
 8010934:	2200      	movs	r2, #0
 8010936:	60e0      	str	r0, [r4, #12]
 8010938:	2104      	movs	r1, #4
 801093a:	6860      	ldr	r0, [r4, #4]
 801093c:	f7ff ff82 	bl	8010844 <std>
 8010940:	68a0      	ldr	r0, [r4, #8]
 8010942:	2201      	movs	r2, #1
 8010944:	2109      	movs	r1, #9
 8010946:	f7ff ff7d 	bl	8010844 <std>
 801094a:	68e0      	ldr	r0, [r4, #12]
 801094c:	2202      	movs	r2, #2
 801094e:	2112      	movs	r1, #18
 8010950:	f7ff ff78 	bl	8010844 <std>
 8010954:	2301      	movs	r3, #1
 8010956:	61a3      	str	r3, [r4, #24]
 8010958:	e7d2      	b.n	8010900 <__sinit+0xc>
 801095a:	bf00      	nop
 801095c:	080117d4 	.word	0x080117d4
 8010960:	0801088d 	.word	0x0801088d

08010964 <__sfp>:
 8010964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010966:	4607      	mov	r7, r0
 8010968:	f7ff ffac 	bl	80108c4 <__sfp_lock_acquire>
 801096c:	4b1e      	ldr	r3, [pc, #120]	; (80109e8 <__sfp+0x84>)
 801096e:	681e      	ldr	r6, [r3, #0]
 8010970:	69b3      	ldr	r3, [r6, #24]
 8010972:	b913      	cbnz	r3, 801097a <__sfp+0x16>
 8010974:	4630      	mov	r0, r6
 8010976:	f7ff ffbd 	bl	80108f4 <__sinit>
 801097a:	3648      	adds	r6, #72	; 0x48
 801097c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010980:	3b01      	subs	r3, #1
 8010982:	d503      	bpl.n	801098c <__sfp+0x28>
 8010984:	6833      	ldr	r3, [r6, #0]
 8010986:	b30b      	cbz	r3, 80109cc <__sfp+0x68>
 8010988:	6836      	ldr	r6, [r6, #0]
 801098a:	e7f7      	b.n	801097c <__sfp+0x18>
 801098c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010990:	b9d5      	cbnz	r5, 80109c8 <__sfp+0x64>
 8010992:	4b16      	ldr	r3, [pc, #88]	; (80109ec <__sfp+0x88>)
 8010994:	60e3      	str	r3, [r4, #12]
 8010996:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801099a:	6665      	str	r5, [r4, #100]	; 0x64
 801099c:	f000 f847 	bl	8010a2e <__retarget_lock_init_recursive>
 80109a0:	f7ff ff96 	bl	80108d0 <__sfp_lock_release>
 80109a4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80109a8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80109ac:	6025      	str	r5, [r4, #0]
 80109ae:	61a5      	str	r5, [r4, #24]
 80109b0:	2208      	movs	r2, #8
 80109b2:	4629      	mov	r1, r5
 80109b4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80109b8:	f7ff fc08 	bl	80101cc <memset>
 80109bc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80109c0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80109c4:	4620      	mov	r0, r4
 80109c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80109c8:	3468      	adds	r4, #104	; 0x68
 80109ca:	e7d9      	b.n	8010980 <__sfp+0x1c>
 80109cc:	2104      	movs	r1, #4
 80109ce:	4638      	mov	r0, r7
 80109d0:	f7ff ff62 	bl	8010898 <__sfmoreglue>
 80109d4:	4604      	mov	r4, r0
 80109d6:	6030      	str	r0, [r6, #0]
 80109d8:	2800      	cmp	r0, #0
 80109da:	d1d5      	bne.n	8010988 <__sfp+0x24>
 80109dc:	f7ff ff78 	bl	80108d0 <__sfp_lock_release>
 80109e0:	230c      	movs	r3, #12
 80109e2:	603b      	str	r3, [r7, #0]
 80109e4:	e7ee      	b.n	80109c4 <__sfp+0x60>
 80109e6:	bf00      	nop
 80109e8:	080117d4 	.word	0x080117d4
 80109ec:	ffff0001 	.word	0xffff0001

080109f0 <_fwalk_reent>:
 80109f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80109f4:	4606      	mov	r6, r0
 80109f6:	4688      	mov	r8, r1
 80109f8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80109fc:	2700      	movs	r7, #0
 80109fe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010a02:	f1b9 0901 	subs.w	r9, r9, #1
 8010a06:	d505      	bpl.n	8010a14 <_fwalk_reent+0x24>
 8010a08:	6824      	ldr	r4, [r4, #0]
 8010a0a:	2c00      	cmp	r4, #0
 8010a0c:	d1f7      	bne.n	80109fe <_fwalk_reent+0xe>
 8010a0e:	4638      	mov	r0, r7
 8010a10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010a14:	89ab      	ldrh	r3, [r5, #12]
 8010a16:	2b01      	cmp	r3, #1
 8010a18:	d907      	bls.n	8010a2a <_fwalk_reent+0x3a>
 8010a1a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010a1e:	3301      	adds	r3, #1
 8010a20:	d003      	beq.n	8010a2a <_fwalk_reent+0x3a>
 8010a22:	4629      	mov	r1, r5
 8010a24:	4630      	mov	r0, r6
 8010a26:	47c0      	blx	r8
 8010a28:	4307      	orrs	r7, r0
 8010a2a:	3568      	adds	r5, #104	; 0x68
 8010a2c:	e7e9      	b.n	8010a02 <_fwalk_reent+0x12>

08010a2e <__retarget_lock_init_recursive>:
 8010a2e:	4770      	bx	lr

08010a30 <__retarget_lock_acquire_recursive>:
 8010a30:	4770      	bx	lr

08010a32 <__retarget_lock_release_recursive>:
 8010a32:	4770      	bx	lr

08010a34 <__swhatbuf_r>:
 8010a34:	b570      	push	{r4, r5, r6, lr}
 8010a36:	460e      	mov	r6, r1
 8010a38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010a3c:	2900      	cmp	r1, #0
 8010a3e:	b096      	sub	sp, #88	; 0x58
 8010a40:	4614      	mov	r4, r2
 8010a42:	461d      	mov	r5, r3
 8010a44:	da08      	bge.n	8010a58 <__swhatbuf_r+0x24>
 8010a46:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8010a4a:	2200      	movs	r2, #0
 8010a4c:	602a      	str	r2, [r5, #0]
 8010a4e:	061a      	lsls	r2, r3, #24
 8010a50:	d410      	bmi.n	8010a74 <__swhatbuf_r+0x40>
 8010a52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010a56:	e00e      	b.n	8010a76 <__swhatbuf_r+0x42>
 8010a58:	466a      	mov	r2, sp
 8010a5a:	f000 fd3b 	bl	80114d4 <_fstat_r>
 8010a5e:	2800      	cmp	r0, #0
 8010a60:	dbf1      	blt.n	8010a46 <__swhatbuf_r+0x12>
 8010a62:	9a01      	ldr	r2, [sp, #4]
 8010a64:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010a68:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010a6c:	425a      	negs	r2, r3
 8010a6e:	415a      	adcs	r2, r3
 8010a70:	602a      	str	r2, [r5, #0]
 8010a72:	e7ee      	b.n	8010a52 <__swhatbuf_r+0x1e>
 8010a74:	2340      	movs	r3, #64	; 0x40
 8010a76:	2000      	movs	r0, #0
 8010a78:	6023      	str	r3, [r4, #0]
 8010a7a:	b016      	add	sp, #88	; 0x58
 8010a7c:	bd70      	pop	{r4, r5, r6, pc}
	...

08010a80 <__smakebuf_r>:
 8010a80:	898b      	ldrh	r3, [r1, #12]
 8010a82:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010a84:	079d      	lsls	r5, r3, #30
 8010a86:	4606      	mov	r6, r0
 8010a88:	460c      	mov	r4, r1
 8010a8a:	d507      	bpl.n	8010a9c <__smakebuf_r+0x1c>
 8010a8c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010a90:	6023      	str	r3, [r4, #0]
 8010a92:	6123      	str	r3, [r4, #16]
 8010a94:	2301      	movs	r3, #1
 8010a96:	6163      	str	r3, [r4, #20]
 8010a98:	b002      	add	sp, #8
 8010a9a:	bd70      	pop	{r4, r5, r6, pc}
 8010a9c:	ab01      	add	r3, sp, #4
 8010a9e:	466a      	mov	r2, sp
 8010aa0:	f7ff ffc8 	bl	8010a34 <__swhatbuf_r>
 8010aa4:	9900      	ldr	r1, [sp, #0]
 8010aa6:	4605      	mov	r5, r0
 8010aa8:	4630      	mov	r0, r6
 8010aaa:	f7ff fc03 	bl	80102b4 <_malloc_r>
 8010aae:	b948      	cbnz	r0, 8010ac4 <__smakebuf_r+0x44>
 8010ab0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010ab4:	059a      	lsls	r2, r3, #22
 8010ab6:	d4ef      	bmi.n	8010a98 <__smakebuf_r+0x18>
 8010ab8:	f023 0303 	bic.w	r3, r3, #3
 8010abc:	f043 0302 	orr.w	r3, r3, #2
 8010ac0:	81a3      	strh	r3, [r4, #12]
 8010ac2:	e7e3      	b.n	8010a8c <__smakebuf_r+0xc>
 8010ac4:	4b0d      	ldr	r3, [pc, #52]	; (8010afc <__smakebuf_r+0x7c>)
 8010ac6:	62b3      	str	r3, [r6, #40]	; 0x28
 8010ac8:	89a3      	ldrh	r3, [r4, #12]
 8010aca:	6020      	str	r0, [r4, #0]
 8010acc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010ad0:	81a3      	strh	r3, [r4, #12]
 8010ad2:	9b00      	ldr	r3, [sp, #0]
 8010ad4:	6163      	str	r3, [r4, #20]
 8010ad6:	9b01      	ldr	r3, [sp, #4]
 8010ad8:	6120      	str	r0, [r4, #16]
 8010ada:	b15b      	cbz	r3, 8010af4 <__smakebuf_r+0x74>
 8010adc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010ae0:	4630      	mov	r0, r6
 8010ae2:	f000 fd09 	bl	80114f8 <_isatty_r>
 8010ae6:	b128      	cbz	r0, 8010af4 <__smakebuf_r+0x74>
 8010ae8:	89a3      	ldrh	r3, [r4, #12]
 8010aea:	f023 0303 	bic.w	r3, r3, #3
 8010aee:	f043 0301 	orr.w	r3, r3, #1
 8010af2:	81a3      	strh	r3, [r4, #12]
 8010af4:	89a0      	ldrh	r0, [r4, #12]
 8010af6:	4305      	orrs	r5, r0
 8010af8:	81a5      	strh	r5, [r4, #12]
 8010afa:	e7cd      	b.n	8010a98 <__smakebuf_r+0x18>
 8010afc:	0801088d 	.word	0x0801088d

08010b00 <__malloc_lock>:
 8010b00:	4801      	ldr	r0, [pc, #4]	; (8010b08 <__malloc_lock+0x8>)
 8010b02:	f7ff bf95 	b.w	8010a30 <__retarget_lock_acquire_recursive>
 8010b06:	bf00      	nop
 8010b08:	24002b08 	.word	0x24002b08

08010b0c <__malloc_unlock>:
 8010b0c:	4801      	ldr	r0, [pc, #4]	; (8010b14 <__malloc_unlock+0x8>)
 8010b0e:	f7ff bf90 	b.w	8010a32 <__retarget_lock_release_recursive>
 8010b12:	bf00      	nop
 8010b14:	24002b08 	.word	0x24002b08

08010b18 <_realloc_r>:
 8010b18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b1c:	4680      	mov	r8, r0
 8010b1e:	4614      	mov	r4, r2
 8010b20:	460e      	mov	r6, r1
 8010b22:	b921      	cbnz	r1, 8010b2e <_realloc_r+0x16>
 8010b24:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010b28:	4611      	mov	r1, r2
 8010b2a:	f7ff bbc3 	b.w	80102b4 <_malloc_r>
 8010b2e:	b92a      	cbnz	r2, 8010b3c <_realloc_r+0x24>
 8010b30:	f7ff fb54 	bl	80101dc <_free_r>
 8010b34:	4625      	mov	r5, r4
 8010b36:	4628      	mov	r0, r5
 8010b38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b3c:	f000 fd18 	bl	8011570 <_malloc_usable_size_r>
 8010b40:	4284      	cmp	r4, r0
 8010b42:	4607      	mov	r7, r0
 8010b44:	d802      	bhi.n	8010b4c <_realloc_r+0x34>
 8010b46:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010b4a:	d812      	bhi.n	8010b72 <_realloc_r+0x5a>
 8010b4c:	4621      	mov	r1, r4
 8010b4e:	4640      	mov	r0, r8
 8010b50:	f7ff fbb0 	bl	80102b4 <_malloc_r>
 8010b54:	4605      	mov	r5, r0
 8010b56:	2800      	cmp	r0, #0
 8010b58:	d0ed      	beq.n	8010b36 <_realloc_r+0x1e>
 8010b5a:	42bc      	cmp	r4, r7
 8010b5c:	4622      	mov	r2, r4
 8010b5e:	4631      	mov	r1, r6
 8010b60:	bf28      	it	cs
 8010b62:	463a      	movcs	r2, r7
 8010b64:	f7ff fb24 	bl	80101b0 <memcpy>
 8010b68:	4631      	mov	r1, r6
 8010b6a:	4640      	mov	r0, r8
 8010b6c:	f7ff fb36 	bl	80101dc <_free_r>
 8010b70:	e7e1      	b.n	8010b36 <_realloc_r+0x1e>
 8010b72:	4635      	mov	r5, r6
 8010b74:	e7df      	b.n	8010b36 <_realloc_r+0x1e>

08010b76 <__ssputs_r>:
 8010b76:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010b7a:	688e      	ldr	r6, [r1, #8]
 8010b7c:	429e      	cmp	r6, r3
 8010b7e:	4682      	mov	sl, r0
 8010b80:	460c      	mov	r4, r1
 8010b82:	4690      	mov	r8, r2
 8010b84:	461f      	mov	r7, r3
 8010b86:	d838      	bhi.n	8010bfa <__ssputs_r+0x84>
 8010b88:	898a      	ldrh	r2, [r1, #12]
 8010b8a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010b8e:	d032      	beq.n	8010bf6 <__ssputs_r+0x80>
 8010b90:	6825      	ldr	r5, [r4, #0]
 8010b92:	6909      	ldr	r1, [r1, #16]
 8010b94:	eba5 0901 	sub.w	r9, r5, r1
 8010b98:	6965      	ldr	r5, [r4, #20]
 8010b9a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010b9e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010ba2:	3301      	adds	r3, #1
 8010ba4:	444b      	add	r3, r9
 8010ba6:	106d      	asrs	r5, r5, #1
 8010ba8:	429d      	cmp	r5, r3
 8010baa:	bf38      	it	cc
 8010bac:	461d      	movcc	r5, r3
 8010bae:	0553      	lsls	r3, r2, #21
 8010bb0:	d531      	bpl.n	8010c16 <__ssputs_r+0xa0>
 8010bb2:	4629      	mov	r1, r5
 8010bb4:	f7ff fb7e 	bl	80102b4 <_malloc_r>
 8010bb8:	4606      	mov	r6, r0
 8010bba:	b950      	cbnz	r0, 8010bd2 <__ssputs_r+0x5c>
 8010bbc:	230c      	movs	r3, #12
 8010bbe:	f8ca 3000 	str.w	r3, [sl]
 8010bc2:	89a3      	ldrh	r3, [r4, #12]
 8010bc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010bc8:	81a3      	strh	r3, [r4, #12]
 8010bca:	f04f 30ff 	mov.w	r0, #4294967295
 8010bce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010bd2:	6921      	ldr	r1, [r4, #16]
 8010bd4:	464a      	mov	r2, r9
 8010bd6:	f7ff faeb 	bl	80101b0 <memcpy>
 8010bda:	89a3      	ldrh	r3, [r4, #12]
 8010bdc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010be0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010be4:	81a3      	strh	r3, [r4, #12]
 8010be6:	6126      	str	r6, [r4, #16]
 8010be8:	6165      	str	r5, [r4, #20]
 8010bea:	444e      	add	r6, r9
 8010bec:	eba5 0509 	sub.w	r5, r5, r9
 8010bf0:	6026      	str	r6, [r4, #0]
 8010bf2:	60a5      	str	r5, [r4, #8]
 8010bf4:	463e      	mov	r6, r7
 8010bf6:	42be      	cmp	r6, r7
 8010bf8:	d900      	bls.n	8010bfc <__ssputs_r+0x86>
 8010bfa:	463e      	mov	r6, r7
 8010bfc:	6820      	ldr	r0, [r4, #0]
 8010bfe:	4632      	mov	r2, r6
 8010c00:	4641      	mov	r1, r8
 8010c02:	f000 fc9b 	bl	801153c <memmove>
 8010c06:	68a3      	ldr	r3, [r4, #8]
 8010c08:	1b9b      	subs	r3, r3, r6
 8010c0a:	60a3      	str	r3, [r4, #8]
 8010c0c:	6823      	ldr	r3, [r4, #0]
 8010c0e:	4433      	add	r3, r6
 8010c10:	6023      	str	r3, [r4, #0]
 8010c12:	2000      	movs	r0, #0
 8010c14:	e7db      	b.n	8010bce <__ssputs_r+0x58>
 8010c16:	462a      	mov	r2, r5
 8010c18:	f7ff ff7e 	bl	8010b18 <_realloc_r>
 8010c1c:	4606      	mov	r6, r0
 8010c1e:	2800      	cmp	r0, #0
 8010c20:	d1e1      	bne.n	8010be6 <__ssputs_r+0x70>
 8010c22:	6921      	ldr	r1, [r4, #16]
 8010c24:	4650      	mov	r0, sl
 8010c26:	f7ff fad9 	bl	80101dc <_free_r>
 8010c2a:	e7c7      	b.n	8010bbc <__ssputs_r+0x46>

08010c2c <_svfiprintf_r>:
 8010c2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c30:	4698      	mov	r8, r3
 8010c32:	898b      	ldrh	r3, [r1, #12]
 8010c34:	061b      	lsls	r3, r3, #24
 8010c36:	b09d      	sub	sp, #116	; 0x74
 8010c38:	4607      	mov	r7, r0
 8010c3a:	460d      	mov	r5, r1
 8010c3c:	4614      	mov	r4, r2
 8010c3e:	d50e      	bpl.n	8010c5e <_svfiprintf_r+0x32>
 8010c40:	690b      	ldr	r3, [r1, #16]
 8010c42:	b963      	cbnz	r3, 8010c5e <_svfiprintf_r+0x32>
 8010c44:	2140      	movs	r1, #64	; 0x40
 8010c46:	f7ff fb35 	bl	80102b4 <_malloc_r>
 8010c4a:	6028      	str	r0, [r5, #0]
 8010c4c:	6128      	str	r0, [r5, #16]
 8010c4e:	b920      	cbnz	r0, 8010c5a <_svfiprintf_r+0x2e>
 8010c50:	230c      	movs	r3, #12
 8010c52:	603b      	str	r3, [r7, #0]
 8010c54:	f04f 30ff 	mov.w	r0, #4294967295
 8010c58:	e0d1      	b.n	8010dfe <_svfiprintf_r+0x1d2>
 8010c5a:	2340      	movs	r3, #64	; 0x40
 8010c5c:	616b      	str	r3, [r5, #20]
 8010c5e:	2300      	movs	r3, #0
 8010c60:	9309      	str	r3, [sp, #36]	; 0x24
 8010c62:	2320      	movs	r3, #32
 8010c64:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010c68:	f8cd 800c 	str.w	r8, [sp, #12]
 8010c6c:	2330      	movs	r3, #48	; 0x30
 8010c6e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8010e18 <_svfiprintf_r+0x1ec>
 8010c72:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010c76:	f04f 0901 	mov.w	r9, #1
 8010c7a:	4623      	mov	r3, r4
 8010c7c:	469a      	mov	sl, r3
 8010c7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010c82:	b10a      	cbz	r2, 8010c88 <_svfiprintf_r+0x5c>
 8010c84:	2a25      	cmp	r2, #37	; 0x25
 8010c86:	d1f9      	bne.n	8010c7c <_svfiprintf_r+0x50>
 8010c88:	ebba 0b04 	subs.w	fp, sl, r4
 8010c8c:	d00b      	beq.n	8010ca6 <_svfiprintf_r+0x7a>
 8010c8e:	465b      	mov	r3, fp
 8010c90:	4622      	mov	r2, r4
 8010c92:	4629      	mov	r1, r5
 8010c94:	4638      	mov	r0, r7
 8010c96:	f7ff ff6e 	bl	8010b76 <__ssputs_r>
 8010c9a:	3001      	adds	r0, #1
 8010c9c:	f000 80aa 	beq.w	8010df4 <_svfiprintf_r+0x1c8>
 8010ca0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010ca2:	445a      	add	r2, fp
 8010ca4:	9209      	str	r2, [sp, #36]	; 0x24
 8010ca6:	f89a 3000 	ldrb.w	r3, [sl]
 8010caa:	2b00      	cmp	r3, #0
 8010cac:	f000 80a2 	beq.w	8010df4 <_svfiprintf_r+0x1c8>
 8010cb0:	2300      	movs	r3, #0
 8010cb2:	f04f 32ff 	mov.w	r2, #4294967295
 8010cb6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010cba:	f10a 0a01 	add.w	sl, sl, #1
 8010cbe:	9304      	str	r3, [sp, #16]
 8010cc0:	9307      	str	r3, [sp, #28]
 8010cc2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010cc6:	931a      	str	r3, [sp, #104]	; 0x68
 8010cc8:	4654      	mov	r4, sl
 8010cca:	2205      	movs	r2, #5
 8010ccc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010cd0:	4851      	ldr	r0, [pc, #324]	; (8010e18 <_svfiprintf_r+0x1ec>)
 8010cd2:	f7ef fb0d 	bl	80002f0 <memchr>
 8010cd6:	9a04      	ldr	r2, [sp, #16]
 8010cd8:	b9d8      	cbnz	r0, 8010d12 <_svfiprintf_r+0xe6>
 8010cda:	06d0      	lsls	r0, r2, #27
 8010cdc:	bf44      	itt	mi
 8010cde:	2320      	movmi	r3, #32
 8010ce0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010ce4:	0711      	lsls	r1, r2, #28
 8010ce6:	bf44      	itt	mi
 8010ce8:	232b      	movmi	r3, #43	; 0x2b
 8010cea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010cee:	f89a 3000 	ldrb.w	r3, [sl]
 8010cf2:	2b2a      	cmp	r3, #42	; 0x2a
 8010cf4:	d015      	beq.n	8010d22 <_svfiprintf_r+0xf6>
 8010cf6:	9a07      	ldr	r2, [sp, #28]
 8010cf8:	4654      	mov	r4, sl
 8010cfa:	2000      	movs	r0, #0
 8010cfc:	f04f 0c0a 	mov.w	ip, #10
 8010d00:	4621      	mov	r1, r4
 8010d02:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010d06:	3b30      	subs	r3, #48	; 0x30
 8010d08:	2b09      	cmp	r3, #9
 8010d0a:	d94e      	bls.n	8010daa <_svfiprintf_r+0x17e>
 8010d0c:	b1b0      	cbz	r0, 8010d3c <_svfiprintf_r+0x110>
 8010d0e:	9207      	str	r2, [sp, #28]
 8010d10:	e014      	b.n	8010d3c <_svfiprintf_r+0x110>
 8010d12:	eba0 0308 	sub.w	r3, r0, r8
 8010d16:	fa09 f303 	lsl.w	r3, r9, r3
 8010d1a:	4313      	orrs	r3, r2
 8010d1c:	9304      	str	r3, [sp, #16]
 8010d1e:	46a2      	mov	sl, r4
 8010d20:	e7d2      	b.n	8010cc8 <_svfiprintf_r+0x9c>
 8010d22:	9b03      	ldr	r3, [sp, #12]
 8010d24:	1d19      	adds	r1, r3, #4
 8010d26:	681b      	ldr	r3, [r3, #0]
 8010d28:	9103      	str	r1, [sp, #12]
 8010d2a:	2b00      	cmp	r3, #0
 8010d2c:	bfbb      	ittet	lt
 8010d2e:	425b      	neglt	r3, r3
 8010d30:	f042 0202 	orrlt.w	r2, r2, #2
 8010d34:	9307      	strge	r3, [sp, #28]
 8010d36:	9307      	strlt	r3, [sp, #28]
 8010d38:	bfb8      	it	lt
 8010d3a:	9204      	strlt	r2, [sp, #16]
 8010d3c:	7823      	ldrb	r3, [r4, #0]
 8010d3e:	2b2e      	cmp	r3, #46	; 0x2e
 8010d40:	d10c      	bne.n	8010d5c <_svfiprintf_r+0x130>
 8010d42:	7863      	ldrb	r3, [r4, #1]
 8010d44:	2b2a      	cmp	r3, #42	; 0x2a
 8010d46:	d135      	bne.n	8010db4 <_svfiprintf_r+0x188>
 8010d48:	9b03      	ldr	r3, [sp, #12]
 8010d4a:	1d1a      	adds	r2, r3, #4
 8010d4c:	681b      	ldr	r3, [r3, #0]
 8010d4e:	9203      	str	r2, [sp, #12]
 8010d50:	2b00      	cmp	r3, #0
 8010d52:	bfb8      	it	lt
 8010d54:	f04f 33ff 	movlt.w	r3, #4294967295
 8010d58:	3402      	adds	r4, #2
 8010d5a:	9305      	str	r3, [sp, #20]
 8010d5c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8010e28 <_svfiprintf_r+0x1fc>
 8010d60:	7821      	ldrb	r1, [r4, #0]
 8010d62:	2203      	movs	r2, #3
 8010d64:	4650      	mov	r0, sl
 8010d66:	f7ef fac3 	bl	80002f0 <memchr>
 8010d6a:	b140      	cbz	r0, 8010d7e <_svfiprintf_r+0x152>
 8010d6c:	2340      	movs	r3, #64	; 0x40
 8010d6e:	eba0 000a 	sub.w	r0, r0, sl
 8010d72:	fa03 f000 	lsl.w	r0, r3, r0
 8010d76:	9b04      	ldr	r3, [sp, #16]
 8010d78:	4303      	orrs	r3, r0
 8010d7a:	3401      	adds	r4, #1
 8010d7c:	9304      	str	r3, [sp, #16]
 8010d7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010d82:	4826      	ldr	r0, [pc, #152]	; (8010e1c <_svfiprintf_r+0x1f0>)
 8010d84:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010d88:	2206      	movs	r2, #6
 8010d8a:	f7ef fab1 	bl	80002f0 <memchr>
 8010d8e:	2800      	cmp	r0, #0
 8010d90:	d038      	beq.n	8010e04 <_svfiprintf_r+0x1d8>
 8010d92:	4b23      	ldr	r3, [pc, #140]	; (8010e20 <_svfiprintf_r+0x1f4>)
 8010d94:	bb1b      	cbnz	r3, 8010dde <_svfiprintf_r+0x1b2>
 8010d96:	9b03      	ldr	r3, [sp, #12]
 8010d98:	3307      	adds	r3, #7
 8010d9a:	f023 0307 	bic.w	r3, r3, #7
 8010d9e:	3308      	adds	r3, #8
 8010da0:	9303      	str	r3, [sp, #12]
 8010da2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010da4:	4433      	add	r3, r6
 8010da6:	9309      	str	r3, [sp, #36]	; 0x24
 8010da8:	e767      	b.n	8010c7a <_svfiprintf_r+0x4e>
 8010daa:	fb0c 3202 	mla	r2, ip, r2, r3
 8010dae:	460c      	mov	r4, r1
 8010db0:	2001      	movs	r0, #1
 8010db2:	e7a5      	b.n	8010d00 <_svfiprintf_r+0xd4>
 8010db4:	2300      	movs	r3, #0
 8010db6:	3401      	adds	r4, #1
 8010db8:	9305      	str	r3, [sp, #20]
 8010dba:	4619      	mov	r1, r3
 8010dbc:	f04f 0c0a 	mov.w	ip, #10
 8010dc0:	4620      	mov	r0, r4
 8010dc2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010dc6:	3a30      	subs	r2, #48	; 0x30
 8010dc8:	2a09      	cmp	r2, #9
 8010dca:	d903      	bls.n	8010dd4 <_svfiprintf_r+0x1a8>
 8010dcc:	2b00      	cmp	r3, #0
 8010dce:	d0c5      	beq.n	8010d5c <_svfiprintf_r+0x130>
 8010dd0:	9105      	str	r1, [sp, #20]
 8010dd2:	e7c3      	b.n	8010d5c <_svfiprintf_r+0x130>
 8010dd4:	fb0c 2101 	mla	r1, ip, r1, r2
 8010dd8:	4604      	mov	r4, r0
 8010dda:	2301      	movs	r3, #1
 8010ddc:	e7f0      	b.n	8010dc0 <_svfiprintf_r+0x194>
 8010dde:	ab03      	add	r3, sp, #12
 8010de0:	9300      	str	r3, [sp, #0]
 8010de2:	462a      	mov	r2, r5
 8010de4:	4b0f      	ldr	r3, [pc, #60]	; (8010e24 <_svfiprintf_r+0x1f8>)
 8010de6:	a904      	add	r1, sp, #16
 8010de8:	4638      	mov	r0, r7
 8010dea:	f3af 8000 	nop.w
 8010dee:	1c42      	adds	r2, r0, #1
 8010df0:	4606      	mov	r6, r0
 8010df2:	d1d6      	bne.n	8010da2 <_svfiprintf_r+0x176>
 8010df4:	89ab      	ldrh	r3, [r5, #12]
 8010df6:	065b      	lsls	r3, r3, #25
 8010df8:	f53f af2c 	bmi.w	8010c54 <_svfiprintf_r+0x28>
 8010dfc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010dfe:	b01d      	add	sp, #116	; 0x74
 8010e00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e04:	ab03      	add	r3, sp, #12
 8010e06:	9300      	str	r3, [sp, #0]
 8010e08:	462a      	mov	r2, r5
 8010e0a:	4b06      	ldr	r3, [pc, #24]	; (8010e24 <_svfiprintf_r+0x1f8>)
 8010e0c:	a904      	add	r1, sp, #16
 8010e0e:	4638      	mov	r0, r7
 8010e10:	f000 f9d4 	bl	80111bc <_printf_i>
 8010e14:	e7eb      	b.n	8010dee <_svfiprintf_r+0x1c2>
 8010e16:	bf00      	nop
 8010e18:	08011838 	.word	0x08011838
 8010e1c:	08011842 	.word	0x08011842
 8010e20:	00000000 	.word	0x00000000
 8010e24:	08010b77 	.word	0x08010b77
 8010e28:	0801183e 	.word	0x0801183e

08010e2c <__sfputc_r>:
 8010e2c:	6893      	ldr	r3, [r2, #8]
 8010e2e:	3b01      	subs	r3, #1
 8010e30:	2b00      	cmp	r3, #0
 8010e32:	b410      	push	{r4}
 8010e34:	6093      	str	r3, [r2, #8]
 8010e36:	da08      	bge.n	8010e4a <__sfputc_r+0x1e>
 8010e38:	6994      	ldr	r4, [r2, #24]
 8010e3a:	42a3      	cmp	r3, r4
 8010e3c:	db01      	blt.n	8010e42 <__sfputc_r+0x16>
 8010e3e:	290a      	cmp	r1, #10
 8010e40:	d103      	bne.n	8010e4a <__sfputc_r+0x1e>
 8010e42:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010e46:	f7ff bb7b 	b.w	8010540 <__swbuf_r>
 8010e4a:	6813      	ldr	r3, [r2, #0]
 8010e4c:	1c58      	adds	r0, r3, #1
 8010e4e:	6010      	str	r0, [r2, #0]
 8010e50:	7019      	strb	r1, [r3, #0]
 8010e52:	4608      	mov	r0, r1
 8010e54:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010e58:	4770      	bx	lr

08010e5a <__sfputs_r>:
 8010e5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e5c:	4606      	mov	r6, r0
 8010e5e:	460f      	mov	r7, r1
 8010e60:	4614      	mov	r4, r2
 8010e62:	18d5      	adds	r5, r2, r3
 8010e64:	42ac      	cmp	r4, r5
 8010e66:	d101      	bne.n	8010e6c <__sfputs_r+0x12>
 8010e68:	2000      	movs	r0, #0
 8010e6a:	e007      	b.n	8010e7c <__sfputs_r+0x22>
 8010e6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010e70:	463a      	mov	r2, r7
 8010e72:	4630      	mov	r0, r6
 8010e74:	f7ff ffda 	bl	8010e2c <__sfputc_r>
 8010e78:	1c43      	adds	r3, r0, #1
 8010e7a:	d1f3      	bne.n	8010e64 <__sfputs_r+0xa>
 8010e7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010e80 <_vfiprintf_r>:
 8010e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e84:	460d      	mov	r5, r1
 8010e86:	b09d      	sub	sp, #116	; 0x74
 8010e88:	4614      	mov	r4, r2
 8010e8a:	4698      	mov	r8, r3
 8010e8c:	4606      	mov	r6, r0
 8010e8e:	b118      	cbz	r0, 8010e98 <_vfiprintf_r+0x18>
 8010e90:	6983      	ldr	r3, [r0, #24]
 8010e92:	b90b      	cbnz	r3, 8010e98 <_vfiprintf_r+0x18>
 8010e94:	f7ff fd2e 	bl	80108f4 <__sinit>
 8010e98:	4b89      	ldr	r3, [pc, #548]	; (80110c0 <_vfiprintf_r+0x240>)
 8010e9a:	429d      	cmp	r5, r3
 8010e9c:	d11b      	bne.n	8010ed6 <_vfiprintf_r+0x56>
 8010e9e:	6875      	ldr	r5, [r6, #4]
 8010ea0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010ea2:	07d9      	lsls	r1, r3, #31
 8010ea4:	d405      	bmi.n	8010eb2 <_vfiprintf_r+0x32>
 8010ea6:	89ab      	ldrh	r3, [r5, #12]
 8010ea8:	059a      	lsls	r2, r3, #22
 8010eaa:	d402      	bmi.n	8010eb2 <_vfiprintf_r+0x32>
 8010eac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010eae:	f7ff fdbf 	bl	8010a30 <__retarget_lock_acquire_recursive>
 8010eb2:	89ab      	ldrh	r3, [r5, #12]
 8010eb4:	071b      	lsls	r3, r3, #28
 8010eb6:	d501      	bpl.n	8010ebc <_vfiprintf_r+0x3c>
 8010eb8:	692b      	ldr	r3, [r5, #16]
 8010eba:	b9eb      	cbnz	r3, 8010ef8 <_vfiprintf_r+0x78>
 8010ebc:	4629      	mov	r1, r5
 8010ebe:	4630      	mov	r0, r6
 8010ec0:	f7ff fb90 	bl	80105e4 <__swsetup_r>
 8010ec4:	b1c0      	cbz	r0, 8010ef8 <_vfiprintf_r+0x78>
 8010ec6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010ec8:	07dc      	lsls	r4, r3, #31
 8010eca:	d50e      	bpl.n	8010eea <_vfiprintf_r+0x6a>
 8010ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8010ed0:	b01d      	add	sp, #116	; 0x74
 8010ed2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ed6:	4b7b      	ldr	r3, [pc, #492]	; (80110c4 <_vfiprintf_r+0x244>)
 8010ed8:	429d      	cmp	r5, r3
 8010eda:	d101      	bne.n	8010ee0 <_vfiprintf_r+0x60>
 8010edc:	68b5      	ldr	r5, [r6, #8]
 8010ede:	e7df      	b.n	8010ea0 <_vfiprintf_r+0x20>
 8010ee0:	4b79      	ldr	r3, [pc, #484]	; (80110c8 <_vfiprintf_r+0x248>)
 8010ee2:	429d      	cmp	r5, r3
 8010ee4:	bf08      	it	eq
 8010ee6:	68f5      	ldreq	r5, [r6, #12]
 8010ee8:	e7da      	b.n	8010ea0 <_vfiprintf_r+0x20>
 8010eea:	89ab      	ldrh	r3, [r5, #12]
 8010eec:	0598      	lsls	r0, r3, #22
 8010eee:	d4ed      	bmi.n	8010ecc <_vfiprintf_r+0x4c>
 8010ef0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010ef2:	f7ff fd9e 	bl	8010a32 <__retarget_lock_release_recursive>
 8010ef6:	e7e9      	b.n	8010ecc <_vfiprintf_r+0x4c>
 8010ef8:	2300      	movs	r3, #0
 8010efa:	9309      	str	r3, [sp, #36]	; 0x24
 8010efc:	2320      	movs	r3, #32
 8010efe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010f02:	f8cd 800c 	str.w	r8, [sp, #12]
 8010f06:	2330      	movs	r3, #48	; 0x30
 8010f08:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80110cc <_vfiprintf_r+0x24c>
 8010f0c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010f10:	f04f 0901 	mov.w	r9, #1
 8010f14:	4623      	mov	r3, r4
 8010f16:	469a      	mov	sl, r3
 8010f18:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010f1c:	b10a      	cbz	r2, 8010f22 <_vfiprintf_r+0xa2>
 8010f1e:	2a25      	cmp	r2, #37	; 0x25
 8010f20:	d1f9      	bne.n	8010f16 <_vfiprintf_r+0x96>
 8010f22:	ebba 0b04 	subs.w	fp, sl, r4
 8010f26:	d00b      	beq.n	8010f40 <_vfiprintf_r+0xc0>
 8010f28:	465b      	mov	r3, fp
 8010f2a:	4622      	mov	r2, r4
 8010f2c:	4629      	mov	r1, r5
 8010f2e:	4630      	mov	r0, r6
 8010f30:	f7ff ff93 	bl	8010e5a <__sfputs_r>
 8010f34:	3001      	adds	r0, #1
 8010f36:	f000 80aa 	beq.w	801108e <_vfiprintf_r+0x20e>
 8010f3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010f3c:	445a      	add	r2, fp
 8010f3e:	9209      	str	r2, [sp, #36]	; 0x24
 8010f40:	f89a 3000 	ldrb.w	r3, [sl]
 8010f44:	2b00      	cmp	r3, #0
 8010f46:	f000 80a2 	beq.w	801108e <_vfiprintf_r+0x20e>
 8010f4a:	2300      	movs	r3, #0
 8010f4c:	f04f 32ff 	mov.w	r2, #4294967295
 8010f50:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010f54:	f10a 0a01 	add.w	sl, sl, #1
 8010f58:	9304      	str	r3, [sp, #16]
 8010f5a:	9307      	str	r3, [sp, #28]
 8010f5c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010f60:	931a      	str	r3, [sp, #104]	; 0x68
 8010f62:	4654      	mov	r4, sl
 8010f64:	2205      	movs	r2, #5
 8010f66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010f6a:	4858      	ldr	r0, [pc, #352]	; (80110cc <_vfiprintf_r+0x24c>)
 8010f6c:	f7ef f9c0 	bl	80002f0 <memchr>
 8010f70:	9a04      	ldr	r2, [sp, #16]
 8010f72:	b9d8      	cbnz	r0, 8010fac <_vfiprintf_r+0x12c>
 8010f74:	06d1      	lsls	r1, r2, #27
 8010f76:	bf44      	itt	mi
 8010f78:	2320      	movmi	r3, #32
 8010f7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010f7e:	0713      	lsls	r3, r2, #28
 8010f80:	bf44      	itt	mi
 8010f82:	232b      	movmi	r3, #43	; 0x2b
 8010f84:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010f88:	f89a 3000 	ldrb.w	r3, [sl]
 8010f8c:	2b2a      	cmp	r3, #42	; 0x2a
 8010f8e:	d015      	beq.n	8010fbc <_vfiprintf_r+0x13c>
 8010f90:	9a07      	ldr	r2, [sp, #28]
 8010f92:	4654      	mov	r4, sl
 8010f94:	2000      	movs	r0, #0
 8010f96:	f04f 0c0a 	mov.w	ip, #10
 8010f9a:	4621      	mov	r1, r4
 8010f9c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010fa0:	3b30      	subs	r3, #48	; 0x30
 8010fa2:	2b09      	cmp	r3, #9
 8010fa4:	d94e      	bls.n	8011044 <_vfiprintf_r+0x1c4>
 8010fa6:	b1b0      	cbz	r0, 8010fd6 <_vfiprintf_r+0x156>
 8010fa8:	9207      	str	r2, [sp, #28]
 8010faa:	e014      	b.n	8010fd6 <_vfiprintf_r+0x156>
 8010fac:	eba0 0308 	sub.w	r3, r0, r8
 8010fb0:	fa09 f303 	lsl.w	r3, r9, r3
 8010fb4:	4313      	orrs	r3, r2
 8010fb6:	9304      	str	r3, [sp, #16]
 8010fb8:	46a2      	mov	sl, r4
 8010fba:	e7d2      	b.n	8010f62 <_vfiprintf_r+0xe2>
 8010fbc:	9b03      	ldr	r3, [sp, #12]
 8010fbe:	1d19      	adds	r1, r3, #4
 8010fc0:	681b      	ldr	r3, [r3, #0]
 8010fc2:	9103      	str	r1, [sp, #12]
 8010fc4:	2b00      	cmp	r3, #0
 8010fc6:	bfbb      	ittet	lt
 8010fc8:	425b      	neglt	r3, r3
 8010fca:	f042 0202 	orrlt.w	r2, r2, #2
 8010fce:	9307      	strge	r3, [sp, #28]
 8010fd0:	9307      	strlt	r3, [sp, #28]
 8010fd2:	bfb8      	it	lt
 8010fd4:	9204      	strlt	r2, [sp, #16]
 8010fd6:	7823      	ldrb	r3, [r4, #0]
 8010fd8:	2b2e      	cmp	r3, #46	; 0x2e
 8010fda:	d10c      	bne.n	8010ff6 <_vfiprintf_r+0x176>
 8010fdc:	7863      	ldrb	r3, [r4, #1]
 8010fde:	2b2a      	cmp	r3, #42	; 0x2a
 8010fe0:	d135      	bne.n	801104e <_vfiprintf_r+0x1ce>
 8010fe2:	9b03      	ldr	r3, [sp, #12]
 8010fe4:	1d1a      	adds	r2, r3, #4
 8010fe6:	681b      	ldr	r3, [r3, #0]
 8010fe8:	9203      	str	r2, [sp, #12]
 8010fea:	2b00      	cmp	r3, #0
 8010fec:	bfb8      	it	lt
 8010fee:	f04f 33ff 	movlt.w	r3, #4294967295
 8010ff2:	3402      	adds	r4, #2
 8010ff4:	9305      	str	r3, [sp, #20]
 8010ff6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80110dc <_vfiprintf_r+0x25c>
 8010ffa:	7821      	ldrb	r1, [r4, #0]
 8010ffc:	2203      	movs	r2, #3
 8010ffe:	4650      	mov	r0, sl
 8011000:	f7ef f976 	bl	80002f0 <memchr>
 8011004:	b140      	cbz	r0, 8011018 <_vfiprintf_r+0x198>
 8011006:	2340      	movs	r3, #64	; 0x40
 8011008:	eba0 000a 	sub.w	r0, r0, sl
 801100c:	fa03 f000 	lsl.w	r0, r3, r0
 8011010:	9b04      	ldr	r3, [sp, #16]
 8011012:	4303      	orrs	r3, r0
 8011014:	3401      	adds	r4, #1
 8011016:	9304      	str	r3, [sp, #16]
 8011018:	f814 1b01 	ldrb.w	r1, [r4], #1
 801101c:	482c      	ldr	r0, [pc, #176]	; (80110d0 <_vfiprintf_r+0x250>)
 801101e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011022:	2206      	movs	r2, #6
 8011024:	f7ef f964 	bl	80002f0 <memchr>
 8011028:	2800      	cmp	r0, #0
 801102a:	d03f      	beq.n	80110ac <_vfiprintf_r+0x22c>
 801102c:	4b29      	ldr	r3, [pc, #164]	; (80110d4 <_vfiprintf_r+0x254>)
 801102e:	bb1b      	cbnz	r3, 8011078 <_vfiprintf_r+0x1f8>
 8011030:	9b03      	ldr	r3, [sp, #12]
 8011032:	3307      	adds	r3, #7
 8011034:	f023 0307 	bic.w	r3, r3, #7
 8011038:	3308      	adds	r3, #8
 801103a:	9303      	str	r3, [sp, #12]
 801103c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801103e:	443b      	add	r3, r7
 8011040:	9309      	str	r3, [sp, #36]	; 0x24
 8011042:	e767      	b.n	8010f14 <_vfiprintf_r+0x94>
 8011044:	fb0c 3202 	mla	r2, ip, r2, r3
 8011048:	460c      	mov	r4, r1
 801104a:	2001      	movs	r0, #1
 801104c:	e7a5      	b.n	8010f9a <_vfiprintf_r+0x11a>
 801104e:	2300      	movs	r3, #0
 8011050:	3401      	adds	r4, #1
 8011052:	9305      	str	r3, [sp, #20]
 8011054:	4619      	mov	r1, r3
 8011056:	f04f 0c0a 	mov.w	ip, #10
 801105a:	4620      	mov	r0, r4
 801105c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011060:	3a30      	subs	r2, #48	; 0x30
 8011062:	2a09      	cmp	r2, #9
 8011064:	d903      	bls.n	801106e <_vfiprintf_r+0x1ee>
 8011066:	2b00      	cmp	r3, #0
 8011068:	d0c5      	beq.n	8010ff6 <_vfiprintf_r+0x176>
 801106a:	9105      	str	r1, [sp, #20]
 801106c:	e7c3      	b.n	8010ff6 <_vfiprintf_r+0x176>
 801106e:	fb0c 2101 	mla	r1, ip, r1, r2
 8011072:	4604      	mov	r4, r0
 8011074:	2301      	movs	r3, #1
 8011076:	e7f0      	b.n	801105a <_vfiprintf_r+0x1da>
 8011078:	ab03      	add	r3, sp, #12
 801107a:	9300      	str	r3, [sp, #0]
 801107c:	462a      	mov	r2, r5
 801107e:	4b16      	ldr	r3, [pc, #88]	; (80110d8 <_vfiprintf_r+0x258>)
 8011080:	a904      	add	r1, sp, #16
 8011082:	4630      	mov	r0, r6
 8011084:	f3af 8000 	nop.w
 8011088:	4607      	mov	r7, r0
 801108a:	1c78      	adds	r0, r7, #1
 801108c:	d1d6      	bne.n	801103c <_vfiprintf_r+0x1bc>
 801108e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011090:	07d9      	lsls	r1, r3, #31
 8011092:	d405      	bmi.n	80110a0 <_vfiprintf_r+0x220>
 8011094:	89ab      	ldrh	r3, [r5, #12]
 8011096:	059a      	lsls	r2, r3, #22
 8011098:	d402      	bmi.n	80110a0 <_vfiprintf_r+0x220>
 801109a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801109c:	f7ff fcc9 	bl	8010a32 <__retarget_lock_release_recursive>
 80110a0:	89ab      	ldrh	r3, [r5, #12]
 80110a2:	065b      	lsls	r3, r3, #25
 80110a4:	f53f af12 	bmi.w	8010ecc <_vfiprintf_r+0x4c>
 80110a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80110aa:	e711      	b.n	8010ed0 <_vfiprintf_r+0x50>
 80110ac:	ab03      	add	r3, sp, #12
 80110ae:	9300      	str	r3, [sp, #0]
 80110b0:	462a      	mov	r2, r5
 80110b2:	4b09      	ldr	r3, [pc, #36]	; (80110d8 <_vfiprintf_r+0x258>)
 80110b4:	a904      	add	r1, sp, #16
 80110b6:	4630      	mov	r0, r6
 80110b8:	f000 f880 	bl	80111bc <_printf_i>
 80110bc:	e7e4      	b.n	8011088 <_vfiprintf_r+0x208>
 80110be:	bf00      	nop
 80110c0:	080117f8 	.word	0x080117f8
 80110c4:	08011818 	.word	0x08011818
 80110c8:	080117d8 	.word	0x080117d8
 80110cc:	08011838 	.word	0x08011838
 80110d0:	08011842 	.word	0x08011842
 80110d4:	00000000 	.word	0x00000000
 80110d8:	08010e5b 	.word	0x08010e5b
 80110dc:	0801183e 	.word	0x0801183e

080110e0 <_printf_common>:
 80110e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80110e4:	4616      	mov	r6, r2
 80110e6:	4699      	mov	r9, r3
 80110e8:	688a      	ldr	r2, [r1, #8]
 80110ea:	690b      	ldr	r3, [r1, #16]
 80110ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80110f0:	4293      	cmp	r3, r2
 80110f2:	bfb8      	it	lt
 80110f4:	4613      	movlt	r3, r2
 80110f6:	6033      	str	r3, [r6, #0]
 80110f8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80110fc:	4607      	mov	r7, r0
 80110fe:	460c      	mov	r4, r1
 8011100:	b10a      	cbz	r2, 8011106 <_printf_common+0x26>
 8011102:	3301      	adds	r3, #1
 8011104:	6033      	str	r3, [r6, #0]
 8011106:	6823      	ldr	r3, [r4, #0]
 8011108:	0699      	lsls	r1, r3, #26
 801110a:	bf42      	ittt	mi
 801110c:	6833      	ldrmi	r3, [r6, #0]
 801110e:	3302      	addmi	r3, #2
 8011110:	6033      	strmi	r3, [r6, #0]
 8011112:	6825      	ldr	r5, [r4, #0]
 8011114:	f015 0506 	ands.w	r5, r5, #6
 8011118:	d106      	bne.n	8011128 <_printf_common+0x48>
 801111a:	f104 0a19 	add.w	sl, r4, #25
 801111e:	68e3      	ldr	r3, [r4, #12]
 8011120:	6832      	ldr	r2, [r6, #0]
 8011122:	1a9b      	subs	r3, r3, r2
 8011124:	42ab      	cmp	r3, r5
 8011126:	dc26      	bgt.n	8011176 <_printf_common+0x96>
 8011128:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801112c:	1e13      	subs	r3, r2, #0
 801112e:	6822      	ldr	r2, [r4, #0]
 8011130:	bf18      	it	ne
 8011132:	2301      	movne	r3, #1
 8011134:	0692      	lsls	r2, r2, #26
 8011136:	d42b      	bmi.n	8011190 <_printf_common+0xb0>
 8011138:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801113c:	4649      	mov	r1, r9
 801113e:	4638      	mov	r0, r7
 8011140:	47c0      	blx	r8
 8011142:	3001      	adds	r0, #1
 8011144:	d01e      	beq.n	8011184 <_printf_common+0xa4>
 8011146:	6823      	ldr	r3, [r4, #0]
 8011148:	68e5      	ldr	r5, [r4, #12]
 801114a:	6832      	ldr	r2, [r6, #0]
 801114c:	f003 0306 	and.w	r3, r3, #6
 8011150:	2b04      	cmp	r3, #4
 8011152:	bf08      	it	eq
 8011154:	1aad      	subeq	r5, r5, r2
 8011156:	68a3      	ldr	r3, [r4, #8]
 8011158:	6922      	ldr	r2, [r4, #16]
 801115a:	bf0c      	ite	eq
 801115c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011160:	2500      	movne	r5, #0
 8011162:	4293      	cmp	r3, r2
 8011164:	bfc4      	itt	gt
 8011166:	1a9b      	subgt	r3, r3, r2
 8011168:	18ed      	addgt	r5, r5, r3
 801116a:	2600      	movs	r6, #0
 801116c:	341a      	adds	r4, #26
 801116e:	42b5      	cmp	r5, r6
 8011170:	d11a      	bne.n	80111a8 <_printf_common+0xc8>
 8011172:	2000      	movs	r0, #0
 8011174:	e008      	b.n	8011188 <_printf_common+0xa8>
 8011176:	2301      	movs	r3, #1
 8011178:	4652      	mov	r2, sl
 801117a:	4649      	mov	r1, r9
 801117c:	4638      	mov	r0, r7
 801117e:	47c0      	blx	r8
 8011180:	3001      	adds	r0, #1
 8011182:	d103      	bne.n	801118c <_printf_common+0xac>
 8011184:	f04f 30ff 	mov.w	r0, #4294967295
 8011188:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801118c:	3501      	adds	r5, #1
 801118e:	e7c6      	b.n	801111e <_printf_common+0x3e>
 8011190:	18e1      	adds	r1, r4, r3
 8011192:	1c5a      	adds	r2, r3, #1
 8011194:	2030      	movs	r0, #48	; 0x30
 8011196:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801119a:	4422      	add	r2, r4
 801119c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80111a0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80111a4:	3302      	adds	r3, #2
 80111a6:	e7c7      	b.n	8011138 <_printf_common+0x58>
 80111a8:	2301      	movs	r3, #1
 80111aa:	4622      	mov	r2, r4
 80111ac:	4649      	mov	r1, r9
 80111ae:	4638      	mov	r0, r7
 80111b0:	47c0      	blx	r8
 80111b2:	3001      	adds	r0, #1
 80111b4:	d0e6      	beq.n	8011184 <_printf_common+0xa4>
 80111b6:	3601      	adds	r6, #1
 80111b8:	e7d9      	b.n	801116e <_printf_common+0x8e>
	...

080111bc <_printf_i>:
 80111bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80111c0:	7e0f      	ldrb	r7, [r1, #24]
 80111c2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80111c4:	2f78      	cmp	r7, #120	; 0x78
 80111c6:	4691      	mov	r9, r2
 80111c8:	4680      	mov	r8, r0
 80111ca:	460c      	mov	r4, r1
 80111cc:	469a      	mov	sl, r3
 80111ce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80111d2:	d807      	bhi.n	80111e4 <_printf_i+0x28>
 80111d4:	2f62      	cmp	r7, #98	; 0x62
 80111d6:	d80a      	bhi.n	80111ee <_printf_i+0x32>
 80111d8:	2f00      	cmp	r7, #0
 80111da:	f000 80d8 	beq.w	801138e <_printf_i+0x1d2>
 80111de:	2f58      	cmp	r7, #88	; 0x58
 80111e0:	f000 80a3 	beq.w	801132a <_printf_i+0x16e>
 80111e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80111e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80111ec:	e03a      	b.n	8011264 <_printf_i+0xa8>
 80111ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80111f2:	2b15      	cmp	r3, #21
 80111f4:	d8f6      	bhi.n	80111e4 <_printf_i+0x28>
 80111f6:	a101      	add	r1, pc, #4	; (adr r1, 80111fc <_printf_i+0x40>)
 80111f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80111fc:	08011255 	.word	0x08011255
 8011200:	08011269 	.word	0x08011269
 8011204:	080111e5 	.word	0x080111e5
 8011208:	080111e5 	.word	0x080111e5
 801120c:	080111e5 	.word	0x080111e5
 8011210:	080111e5 	.word	0x080111e5
 8011214:	08011269 	.word	0x08011269
 8011218:	080111e5 	.word	0x080111e5
 801121c:	080111e5 	.word	0x080111e5
 8011220:	080111e5 	.word	0x080111e5
 8011224:	080111e5 	.word	0x080111e5
 8011228:	08011375 	.word	0x08011375
 801122c:	08011299 	.word	0x08011299
 8011230:	08011357 	.word	0x08011357
 8011234:	080111e5 	.word	0x080111e5
 8011238:	080111e5 	.word	0x080111e5
 801123c:	08011397 	.word	0x08011397
 8011240:	080111e5 	.word	0x080111e5
 8011244:	08011299 	.word	0x08011299
 8011248:	080111e5 	.word	0x080111e5
 801124c:	080111e5 	.word	0x080111e5
 8011250:	0801135f 	.word	0x0801135f
 8011254:	682b      	ldr	r3, [r5, #0]
 8011256:	1d1a      	adds	r2, r3, #4
 8011258:	681b      	ldr	r3, [r3, #0]
 801125a:	602a      	str	r2, [r5, #0]
 801125c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011260:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011264:	2301      	movs	r3, #1
 8011266:	e0a3      	b.n	80113b0 <_printf_i+0x1f4>
 8011268:	6820      	ldr	r0, [r4, #0]
 801126a:	6829      	ldr	r1, [r5, #0]
 801126c:	0606      	lsls	r6, r0, #24
 801126e:	f101 0304 	add.w	r3, r1, #4
 8011272:	d50a      	bpl.n	801128a <_printf_i+0xce>
 8011274:	680e      	ldr	r6, [r1, #0]
 8011276:	602b      	str	r3, [r5, #0]
 8011278:	2e00      	cmp	r6, #0
 801127a:	da03      	bge.n	8011284 <_printf_i+0xc8>
 801127c:	232d      	movs	r3, #45	; 0x2d
 801127e:	4276      	negs	r6, r6
 8011280:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011284:	485e      	ldr	r0, [pc, #376]	; (8011400 <_printf_i+0x244>)
 8011286:	230a      	movs	r3, #10
 8011288:	e019      	b.n	80112be <_printf_i+0x102>
 801128a:	680e      	ldr	r6, [r1, #0]
 801128c:	602b      	str	r3, [r5, #0]
 801128e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8011292:	bf18      	it	ne
 8011294:	b236      	sxthne	r6, r6
 8011296:	e7ef      	b.n	8011278 <_printf_i+0xbc>
 8011298:	682b      	ldr	r3, [r5, #0]
 801129a:	6820      	ldr	r0, [r4, #0]
 801129c:	1d19      	adds	r1, r3, #4
 801129e:	6029      	str	r1, [r5, #0]
 80112a0:	0601      	lsls	r1, r0, #24
 80112a2:	d501      	bpl.n	80112a8 <_printf_i+0xec>
 80112a4:	681e      	ldr	r6, [r3, #0]
 80112a6:	e002      	b.n	80112ae <_printf_i+0xf2>
 80112a8:	0646      	lsls	r6, r0, #25
 80112aa:	d5fb      	bpl.n	80112a4 <_printf_i+0xe8>
 80112ac:	881e      	ldrh	r6, [r3, #0]
 80112ae:	4854      	ldr	r0, [pc, #336]	; (8011400 <_printf_i+0x244>)
 80112b0:	2f6f      	cmp	r7, #111	; 0x6f
 80112b2:	bf0c      	ite	eq
 80112b4:	2308      	moveq	r3, #8
 80112b6:	230a      	movne	r3, #10
 80112b8:	2100      	movs	r1, #0
 80112ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80112be:	6865      	ldr	r5, [r4, #4]
 80112c0:	60a5      	str	r5, [r4, #8]
 80112c2:	2d00      	cmp	r5, #0
 80112c4:	bfa2      	ittt	ge
 80112c6:	6821      	ldrge	r1, [r4, #0]
 80112c8:	f021 0104 	bicge.w	r1, r1, #4
 80112cc:	6021      	strge	r1, [r4, #0]
 80112ce:	b90e      	cbnz	r6, 80112d4 <_printf_i+0x118>
 80112d0:	2d00      	cmp	r5, #0
 80112d2:	d04d      	beq.n	8011370 <_printf_i+0x1b4>
 80112d4:	4615      	mov	r5, r2
 80112d6:	fbb6 f1f3 	udiv	r1, r6, r3
 80112da:	fb03 6711 	mls	r7, r3, r1, r6
 80112de:	5dc7      	ldrb	r7, [r0, r7]
 80112e0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80112e4:	4637      	mov	r7, r6
 80112e6:	42bb      	cmp	r3, r7
 80112e8:	460e      	mov	r6, r1
 80112ea:	d9f4      	bls.n	80112d6 <_printf_i+0x11a>
 80112ec:	2b08      	cmp	r3, #8
 80112ee:	d10b      	bne.n	8011308 <_printf_i+0x14c>
 80112f0:	6823      	ldr	r3, [r4, #0]
 80112f2:	07de      	lsls	r6, r3, #31
 80112f4:	d508      	bpl.n	8011308 <_printf_i+0x14c>
 80112f6:	6923      	ldr	r3, [r4, #16]
 80112f8:	6861      	ldr	r1, [r4, #4]
 80112fa:	4299      	cmp	r1, r3
 80112fc:	bfde      	ittt	le
 80112fe:	2330      	movle	r3, #48	; 0x30
 8011300:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011304:	f105 35ff 	addle.w	r5, r5, #4294967295
 8011308:	1b52      	subs	r2, r2, r5
 801130a:	6122      	str	r2, [r4, #16]
 801130c:	f8cd a000 	str.w	sl, [sp]
 8011310:	464b      	mov	r3, r9
 8011312:	aa03      	add	r2, sp, #12
 8011314:	4621      	mov	r1, r4
 8011316:	4640      	mov	r0, r8
 8011318:	f7ff fee2 	bl	80110e0 <_printf_common>
 801131c:	3001      	adds	r0, #1
 801131e:	d14c      	bne.n	80113ba <_printf_i+0x1fe>
 8011320:	f04f 30ff 	mov.w	r0, #4294967295
 8011324:	b004      	add	sp, #16
 8011326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801132a:	4835      	ldr	r0, [pc, #212]	; (8011400 <_printf_i+0x244>)
 801132c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8011330:	6829      	ldr	r1, [r5, #0]
 8011332:	6823      	ldr	r3, [r4, #0]
 8011334:	f851 6b04 	ldr.w	r6, [r1], #4
 8011338:	6029      	str	r1, [r5, #0]
 801133a:	061d      	lsls	r5, r3, #24
 801133c:	d514      	bpl.n	8011368 <_printf_i+0x1ac>
 801133e:	07df      	lsls	r7, r3, #31
 8011340:	bf44      	itt	mi
 8011342:	f043 0320 	orrmi.w	r3, r3, #32
 8011346:	6023      	strmi	r3, [r4, #0]
 8011348:	b91e      	cbnz	r6, 8011352 <_printf_i+0x196>
 801134a:	6823      	ldr	r3, [r4, #0]
 801134c:	f023 0320 	bic.w	r3, r3, #32
 8011350:	6023      	str	r3, [r4, #0]
 8011352:	2310      	movs	r3, #16
 8011354:	e7b0      	b.n	80112b8 <_printf_i+0xfc>
 8011356:	6823      	ldr	r3, [r4, #0]
 8011358:	f043 0320 	orr.w	r3, r3, #32
 801135c:	6023      	str	r3, [r4, #0]
 801135e:	2378      	movs	r3, #120	; 0x78
 8011360:	4828      	ldr	r0, [pc, #160]	; (8011404 <_printf_i+0x248>)
 8011362:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011366:	e7e3      	b.n	8011330 <_printf_i+0x174>
 8011368:	0659      	lsls	r1, r3, #25
 801136a:	bf48      	it	mi
 801136c:	b2b6      	uxthmi	r6, r6
 801136e:	e7e6      	b.n	801133e <_printf_i+0x182>
 8011370:	4615      	mov	r5, r2
 8011372:	e7bb      	b.n	80112ec <_printf_i+0x130>
 8011374:	682b      	ldr	r3, [r5, #0]
 8011376:	6826      	ldr	r6, [r4, #0]
 8011378:	6961      	ldr	r1, [r4, #20]
 801137a:	1d18      	adds	r0, r3, #4
 801137c:	6028      	str	r0, [r5, #0]
 801137e:	0635      	lsls	r5, r6, #24
 8011380:	681b      	ldr	r3, [r3, #0]
 8011382:	d501      	bpl.n	8011388 <_printf_i+0x1cc>
 8011384:	6019      	str	r1, [r3, #0]
 8011386:	e002      	b.n	801138e <_printf_i+0x1d2>
 8011388:	0670      	lsls	r0, r6, #25
 801138a:	d5fb      	bpl.n	8011384 <_printf_i+0x1c8>
 801138c:	8019      	strh	r1, [r3, #0]
 801138e:	2300      	movs	r3, #0
 8011390:	6123      	str	r3, [r4, #16]
 8011392:	4615      	mov	r5, r2
 8011394:	e7ba      	b.n	801130c <_printf_i+0x150>
 8011396:	682b      	ldr	r3, [r5, #0]
 8011398:	1d1a      	adds	r2, r3, #4
 801139a:	602a      	str	r2, [r5, #0]
 801139c:	681d      	ldr	r5, [r3, #0]
 801139e:	6862      	ldr	r2, [r4, #4]
 80113a0:	2100      	movs	r1, #0
 80113a2:	4628      	mov	r0, r5
 80113a4:	f7ee ffa4 	bl	80002f0 <memchr>
 80113a8:	b108      	cbz	r0, 80113ae <_printf_i+0x1f2>
 80113aa:	1b40      	subs	r0, r0, r5
 80113ac:	6060      	str	r0, [r4, #4]
 80113ae:	6863      	ldr	r3, [r4, #4]
 80113b0:	6123      	str	r3, [r4, #16]
 80113b2:	2300      	movs	r3, #0
 80113b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80113b8:	e7a8      	b.n	801130c <_printf_i+0x150>
 80113ba:	6923      	ldr	r3, [r4, #16]
 80113bc:	462a      	mov	r2, r5
 80113be:	4649      	mov	r1, r9
 80113c0:	4640      	mov	r0, r8
 80113c2:	47d0      	blx	sl
 80113c4:	3001      	adds	r0, #1
 80113c6:	d0ab      	beq.n	8011320 <_printf_i+0x164>
 80113c8:	6823      	ldr	r3, [r4, #0]
 80113ca:	079b      	lsls	r3, r3, #30
 80113cc:	d413      	bmi.n	80113f6 <_printf_i+0x23a>
 80113ce:	68e0      	ldr	r0, [r4, #12]
 80113d0:	9b03      	ldr	r3, [sp, #12]
 80113d2:	4298      	cmp	r0, r3
 80113d4:	bfb8      	it	lt
 80113d6:	4618      	movlt	r0, r3
 80113d8:	e7a4      	b.n	8011324 <_printf_i+0x168>
 80113da:	2301      	movs	r3, #1
 80113dc:	4632      	mov	r2, r6
 80113de:	4649      	mov	r1, r9
 80113e0:	4640      	mov	r0, r8
 80113e2:	47d0      	blx	sl
 80113e4:	3001      	adds	r0, #1
 80113e6:	d09b      	beq.n	8011320 <_printf_i+0x164>
 80113e8:	3501      	adds	r5, #1
 80113ea:	68e3      	ldr	r3, [r4, #12]
 80113ec:	9903      	ldr	r1, [sp, #12]
 80113ee:	1a5b      	subs	r3, r3, r1
 80113f0:	42ab      	cmp	r3, r5
 80113f2:	dcf2      	bgt.n	80113da <_printf_i+0x21e>
 80113f4:	e7eb      	b.n	80113ce <_printf_i+0x212>
 80113f6:	2500      	movs	r5, #0
 80113f8:	f104 0619 	add.w	r6, r4, #25
 80113fc:	e7f5      	b.n	80113ea <_printf_i+0x22e>
 80113fe:	bf00      	nop
 8011400:	08011849 	.word	0x08011849
 8011404:	0801185a 	.word	0x0801185a

08011408 <__sread>:
 8011408:	b510      	push	{r4, lr}
 801140a:	460c      	mov	r4, r1
 801140c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011410:	f000 f8b6 	bl	8011580 <_read_r>
 8011414:	2800      	cmp	r0, #0
 8011416:	bfab      	itete	ge
 8011418:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801141a:	89a3      	ldrhlt	r3, [r4, #12]
 801141c:	181b      	addge	r3, r3, r0
 801141e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011422:	bfac      	ite	ge
 8011424:	6563      	strge	r3, [r4, #84]	; 0x54
 8011426:	81a3      	strhlt	r3, [r4, #12]
 8011428:	bd10      	pop	{r4, pc}

0801142a <__swrite>:
 801142a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801142e:	461f      	mov	r7, r3
 8011430:	898b      	ldrh	r3, [r1, #12]
 8011432:	05db      	lsls	r3, r3, #23
 8011434:	4605      	mov	r5, r0
 8011436:	460c      	mov	r4, r1
 8011438:	4616      	mov	r6, r2
 801143a:	d505      	bpl.n	8011448 <__swrite+0x1e>
 801143c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011440:	2302      	movs	r3, #2
 8011442:	2200      	movs	r2, #0
 8011444:	f000 f868 	bl	8011518 <_lseek_r>
 8011448:	89a3      	ldrh	r3, [r4, #12]
 801144a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801144e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011452:	81a3      	strh	r3, [r4, #12]
 8011454:	4632      	mov	r2, r6
 8011456:	463b      	mov	r3, r7
 8011458:	4628      	mov	r0, r5
 801145a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801145e:	f000 b817 	b.w	8011490 <_write_r>

08011462 <__sseek>:
 8011462:	b510      	push	{r4, lr}
 8011464:	460c      	mov	r4, r1
 8011466:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801146a:	f000 f855 	bl	8011518 <_lseek_r>
 801146e:	1c43      	adds	r3, r0, #1
 8011470:	89a3      	ldrh	r3, [r4, #12]
 8011472:	bf15      	itete	ne
 8011474:	6560      	strne	r0, [r4, #84]	; 0x54
 8011476:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801147a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801147e:	81a3      	strheq	r3, [r4, #12]
 8011480:	bf18      	it	ne
 8011482:	81a3      	strhne	r3, [r4, #12]
 8011484:	bd10      	pop	{r4, pc}

08011486 <__sclose>:
 8011486:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801148a:	f000 b813 	b.w	80114b4 <_close_r>
	...

08011490 <_write_r>:
 8011490:	b538      	push	{r3, r4, r5, lr}
 8011492:	4d07      	ldr	r5, [pc, #28]	; (80114b0 <_write_r+0x20>)
 8011494:	4604      	mov	r4, r0
 8011496:	4608      	mov	r0, r1
 8011498:	4611      	mov	r1, r2
 801149a:	2200      	movs	r2, #0
 801149c:	602a      	str	r2, [r5, #0]
 801149e:	461a      	mov	r2, r3
 80114a0:	f000 f8a8 	bl	80115f4 <_write>
 80114a4:	1c43      	adds	r3, r0, #1
 80114a6:	d102      	bne.n	80114ae <_write_r+0x1e>
 80114a8:	682b      	ldr	r3, [r5, #0]
 80114aa:	b103      	cbz	r3, 80114ae <_write_r+0x1e>
 80114ac:	6023      	str	r3, [r4, #0]
 80114ae:	bd38      	pop	{r3, r4, r5, pc}
 80114b0:	24002b0c 	.word	0x24002b0c

080114b4 <_close_r>:
 80114b4:	b538      	push	{r3, r4, r5, lr}
 80114b6:	4d06      	ldr	r5, [pc, #24]	; (80114d0 <_close_r+0x1c>)
 80114b8:	2300      	movs	r3, #0
 80114ba:	4604      	mov	r4, r0
 80114bc:	4608      	mov	r0, r1
 80114be:	602b      	str	r3, [r5, #0]
 80114c0:	f000 f870 	bl	80115a4 <_close>
 80114c4:	1c43      	adds	r3, r0, #1
 80114c6:	d102      	bne.n	80114ce <_close_r+0x1a>
 80114c8:	682b      	ldr	r3, [r5, #0]
 80114ca:	b103      	cbz	r3, 80114ce <_close_r+0x1a>
 80114cc:	6023      	str	r3, [r4, #0]
 80114ce:	bd38      	pop	{r3, r4, r5, pc}
 80114d0:	24002b0c 	.word	0x24002b0c

080114d4 <_fstat_r>:
 80114d4:	b538      	push	{r3, r4, r5, lr}
 80114d6:	4d07      	ldr	r5, [pc, #28]	; (80114f4 <_fstat_r+0x20>)
 80114d8:	2300      	movs	r3, #0
 80114da:	4604      	mov	r4, r0
 80114dc:	4608      	mov	r0, r1
 80114de:	4611      	mov	r1, r2
 80114e0:	602b      	str	r3, [r5, #0]
 80114e2:	f000 f867 	bl	80115b4 <_fstat>
 80114e6:	1c43      	adds	r3, r0, #1
 80114e8:	d102      	bne.n	80114f0 <_fstat_r+0x1c>
 80114ea:	682b      	ldr	r3, [r5, #0]
 80114ec:	b103      	cbz	r3, 80114f0 <_fstat_r+0x1c>
 80114ee:	6023      	str	r3, [r4, #0]
 80114f0:	bd38      	pop	{r3, r4, r5, pc}
 80114f2:	bf00      	nop
 80114f4:	24002b0c 	.word	0x24002b0c

080114f8 <_isatty_r>:
 80114f8:	b538      	push	{r3, r4, r5, lr}
 80114fa:	4d06      	ldr	r5, [pc, #24]	; (8011514 <_isatty_r+0x1c>)
 80114fc:	2300      	movs	r3, #0
 80114fe:	4604      	mov	r4, r0
 8011500:	4608      	mov	r0, r1
 8011502:	602b      	str	r3, [r5, #0]
 8011504:	f000 f85e 	bl	80115c4 <_isatty>
 8011508:	1c43      	adds	r3, r0, #1
 801150a:	d102      	bne.n	8011512 <_isatty_r+0x1a>
 801150c:	682b      	ldr	r3, [r5, #0]
 801150e:	b103      	cbz	r3, 8011512 <_isatty_r+0x1a>
 8011510:	6023      	str	r3, [r4, #0]
 8011512:	bd38      	pop	{r3, r4, r5, pc}
 8011514:	24002b0c 	.word	0x24002b0c

08011518 <_lseek_r>:
 8011518:	b538      	push	{r3, r4, r5, lr}
 801151a:	4d07      	ldr	r5, [pc, #28]	; (8011538 <_lseek_r+0x20>)
 801151c:	4604      	mov	r4, r0
 801151e:	4608      	mov	r0, r1
 8011520:	4611      	mov	r1, r2
 8011522:	2200      	movs	r2, #0
 8011524:	602a      	str	r2, [r5, #0]
 8011526:	461a      	mov	r2, r3
 8011528:	f000 f854 	bl	80115d4 <_lseek>
 801152c:	1c43      	adds	r3, r0, #1
 801152e:	d102      	bne.n	8011536 <_lseek_r+0x1e>
 8011530:	682b      	ldr	r3, [r5, #0]
 8011532:	b103      	cbz	r3, 8011536 <_lseek_r+0x1e>
 8011534:	6023      	str	r3, [r4, #0]
 8011536:	bd38      	pop	{r3, r4, r5, pc}
 8011538:	24002b0c 	.word	0x24002b0c

0801153c <memmove>:
 801153c:	4288      	cmp	r0, r1
 801153e:	b510      	push	{r4, lr}
 8011540:	eb01 0402 	add.w	r4, r1, r2
 8011544:	d902      	bls.n	801154c <memmove+0x10>
 8011546:	4284      	cmp	r4, r0
 8011548:	4623      	mov	r3, r4
 801154a:	d807      	bhi.n	801155c <memmove+0x20>
 801154c:	1e43      	subs	r3, r0, #1
 801154e:	42a1      	cmp	r1, r4
 8011550:	d008      	beq.n	8011564 <memmove+0x28>
 8011552:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011556:	f803 2f01 	strb.w	r2, [r3, #1]!
 801155a:	e7f8      	b.n	801154e <memmove+0x12>
 801155c:	4402      	add	r2, r0
 801155e:	4601      	mov	r1, r0
 8011560:	428a      	cmp	r2, r1
 8011562:	d100      	bne.n	8011566 <memmove+0x2a>
 8011564:	bd10      	pop	{r4, pc}
 8011566:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801156a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801156e:	e7f7      	b.n	8011560 <memmove+0x24>

08011570 <_malloc_usable_size_r>:
 8011570:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011574:	1f18      	subs	r0, r3, #4
 8011576:	2b00      	cmp	r3, #0
 8011578:	bfbc      	itt	lt
 801157a:	580b      	ldrlt	r3, [r1, r0]
 801157c:	18c0      	addlt	r0, r0, r3
 801157e:	4770      	bx	lr

08011580 <_read_r>:
 8011580:	b538      	push	{r3, r4, r5, lr}
 8011582:	4d07      	ldr	r5, [pc, #28]	; (80115a0 <_read_r+0x20>)
 8011584:	4604      	mov	r4, r0
 8011586:	4608      	mov	r0, r1
 8011588:	4611      	mov	r1, r2
 801158a:	2200      	movs	r2, #0
 801158c:	602a      	str	r2, [r5, #0]
 801158e:	461a      	mov	r2, r3
 8011590:	f000 f828 	bl	80115e4 <_read>
 8011594:	1c43      	adds	r3, r0, #1
 8011596:	d102      	bne.n	801159e <_read_r+0x1e>
 8011598:	682b      	ldr	r3, [r5, #0]
 801159a:	b103      	cbz	r3, 801159e <_read_r+0x1e>
 801159c:	6023      	str	r3, [r4, #0]
 801159e:	bd38      	pop	{r3, r4, r5, pc}
 80115a0:	24002b0c 	.word	0x24002b0c

080115a4 <_close>:
 80115a4:	4b02      	ldr	r3, [pc, #8]	; (80115b0 <_close+0xc>)
 80115a6:	2258      	movs	r2, #88	; 0x58
 80115a8:	601a      	str	r2, [r3, #0]
 80115aa:	f04f 30ff 	mov.w	r0, #4294967295
 80115ae:	4770      	bx	lr
 80115b0:	24002b0c 	.word	0x24002b0c

080115b4 <_fstat>:
 80115b4:	4b02      	ldr	r3, [pc, #8]	; (80115c0 <_fstat+0xc>)
 80115b6:	2258      	movs	r2, #88	; 0x58
 80115b8:	601a      	str	r2, [r3, #0]
 80115ba:	f04f 30ff 	mov.w	r0, #4294967295
 80115be:	4770      	bx	lr
 80115c0:	24002b0c 	.word	0x24002b0c

080115c4 <_isatty>:
 80115c4:	4b02      	ldr	r3, [pc, #8]	; (80115d0 <_isatty+0xc>)
 80115c6:	2258      	movs	r2, #88	; 0x58
 80115c8:	601a      	str	r2, [r3, #0]
 80115ca:	2000      	movs	r0, #0
 80115cc:	4770      	bx	lr
 80115ce:	bf00      	nop
 80115d0:	24002b0c 	.word	0x24002b0c

080115d4 <_lseek>:
 80115d4:	4b02      	ldr	r3, [pc, #8]	; (80115e0 <_lseek+0xc>)
 80115d6:	2258      	movs	r2, #88	; 0x58
 80115d8:	601a      	str	r2, [r3, #0]
 80115da:	f04f 30ff 	mov.w	r0, #4294967295
 80115de:	4770      	bx	lr
 80115e0:	24002b0c 	.word	0x24002b0c

080115e4 <_read>:
 80115e4:	4b02      	ldr	r3, [pc, #8]	; (80115f0 <_read+0xc>)
 80115e6:	2258      	movs	r2, #88	; 0x58
 80115e8:	601a      	str	r2, [r3, #0]
 80115ea:	f04f 30ff 	mov.w	r0, #4294967295
 80115ee:	4770      	bx	lr
 80115f0:	24002b0c 	.word	0x24002b0c

080115f4 <_write>:
 80115f4:	4b02      	ldr	r3, [pc, #8]	; (8011600 <_write+0xc>)
 80115f6:	2258      	movs	r2, #88	; 0x58
 80115f8:	601a      	str	r2, [r3, #0]
 80115fa:	f04f 30ff 	mov.w	r0, #4294967295
 80115fe:	4770      	bx	lr
 8011600:	24002b0c 	.word	0x24002b0c

08011604 <_init>:
 8011604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011606:	bf00      	nop
 8011608:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801160a:	bc08      	pop	{r3}
 801160c:	469e      	mov	lr, r3
 801160e:	4770      	bx	lr

08011610 <_fini>:
 8011610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011612:	bf00      	nop
 8011614:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011616:	bc08      	pop	{r3}
 8011618:	469e      	mov	lr, r3
 801161a:	4770      	bx	lr
