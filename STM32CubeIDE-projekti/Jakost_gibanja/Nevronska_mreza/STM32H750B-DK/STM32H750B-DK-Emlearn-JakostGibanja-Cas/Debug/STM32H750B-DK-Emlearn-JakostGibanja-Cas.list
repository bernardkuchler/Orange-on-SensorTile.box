
STM32H750B-DK-Emlearn-JakostGibanja-Cas.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d190  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007a0  0800d430  0800d430  0001d430  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800dbd0  0800dbd0  0001dbd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800dbd4  0800dbd4  0001dbd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000180  24000000  0800dbd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001e9c  24000180  0800dd58  00020180  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  2400201c  0800dd58  0002201c  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001d372  00000000  00000000  000201ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00003aa7  00000000  00000000  0003d520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001698  00000000  00000000  00040fc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00001500  00000000  00000000  00042660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003c807  00000000  00000000  00043b60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00020aea  00000000  00000000  00080367  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0017853f  00000000  00000000  000a0e51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  00219390  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000655c  00000000  00000000  002193e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000180 	.word	0x24000180
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800d418 	.word	0x0800d418

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000184 	.word	0x24000184
 80002dc:	0800d418 	.word	0x0800d418

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <eml_net_relu>:
    int32_t activations_length;
} EmlNet;


static float
eml_net_relu(float in) {
 8000390:	b480      	push	{r7}
 8000392:	b083      	sub	sp, #12
 8000394:	af00      	add	r7, sp, #0
 8000396:	ed87 0a01 	vstr	s0, [r7, #4]
    return (in <= 0.0f) ? 0.0f : in; 
 800039a:	edd7 7a01 	vldr	s15, [r7, #4]
 800039e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80003a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80003a6:	d802      	bhi.n	80003ae <eml_net_relu+0x1e>
 80003a8:	f04f 0300 	mov.w	r3, #0
 80003ac:	e000      	b.n	80003b0 <eml_net_relu+0x20>
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	ee07 3a90 	vmov	s15, r3
}
 80003b4:	eeb0 0a67 	vmov.f32	s0, s15
 80003b8:	370c      	adds	r7, #12
 80003ba:	46bd      	mov	sp, r7
 80003bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c0:	4770      	bx	lr

080003c2 <eml_net_expit>:

static float
eml_net_expit(float in) {
 80003c2:	b580      	push	{r7, lr}
 80003c4:	b082      	sub	sp, #8
 80003c6:	af00      	add	r7, sp, #0
 80003c8:	ed87 0a01 	vstr	s0, [r7, #4]
    return 1.0f / (1.0f + expf(-in));
 80003cc:	edd7 7a01 	vldr	s15, [r7, #4]
 80003d0:	eef1 7a67 	vneg.f32	s15, s15
 80003d4:	eeb0 0a67 	vmov.f32	s0, s15
 80003d8:	f00c fd88 	bl	800ceec <expf>
 80003dc:	eef0 7a40 	vmov.f32	s15, s0
 80003e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80003e4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80003e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80003ec:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80003f0:	eef0 7a66 	vmov.f32	s15, s13
}
 80003f4:	eeb0 0a67 	vmov.f32	s0, s15
 80003f8:	3708      	adds	r7, #8
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bd80      	pop	{r7, pc}

080003fe <eml_net_tanh>:

static float
eml_net_tanh(float in) {
 80003fe:	b580      	push	{r7, lr}
 8000400:	b082      	sub	sp, #8
 8000402:	af00      	add	r7, sp, #0
 8000404:	ed87 0a01 	vstr	s0, [r7, #4]
    return tanhf(in); 
 8000408:	ed97 0a01 	vldr	s0, [r7, #4]
 800040c:	f00c fe48 	bl	800d0a0 <tanhf>
 8000410:	eef0 7a40 	vmov.f32	s15, s0
}
 8000414:	eeb0 0a67 	vmov.f32	s0, s15
 8000418:	3708      	adds	r7, #8
 800041a:	46bd      	mov	sp, r7
 800041c:	bd80      	pop	{r7, pc}
	...

08000420 <eml_net_softmax>:

static EmlError
eml_net_softmax(float *input, size_t input_length)
{
 8000420:	b590      	push	{r4, r7, lr}
 8000422:	b089      	sub	sp, #36	; 0x24
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
 8000428:	6039      	str	r1, [r7, #0]
    EML_PRECONDITION(input, EmlUninitialized);
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	2b00      	cmp	r3, #0
 800042e:	d101      	bne.n	8000434 <eml_net_softmax+0x14>
 8000430:	2303      	movs	r3, #3
 8000432:	e06e      	b.n	8000512 <eml_net_softmax+0xf2>

    float input_max = -INFINITY;
 8000434:	4b39      	ldr	r3, [pc, #228]	; (800051c <eml_net_softmax+0xfc>)
 8000436:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < input_length; i++) {
 8000438:	2300      	movs	r3, #0
 800043a:	61bb      	str	r3, [r7, #24]
 800043c:	e015      	b.n	800046a <eml_net_softmax+0x4a>
        if (input[i] > input_max) {
 800043e:	69bb      	ldr	r3, [r7, #24]
 8000440:	009b      	lsls	r3, r3, #2
 8000442:	687a      	ldr	r2, [r7, #4]
 8000444:	4413      	add	r3, r2
 8000446:	edd3 7a00 	vldr	s15, [r3]
 800044a:	ed97 7a07 	vldr	s14, [r7, #28]
 800044e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000452:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000456:	d505      	bpl.n	8000464 <eml_net_softmax+0x44>
            input_max = input[i];
 8000458:	69bb      	ldr	r3, [r7, #24]
 800045a:	009b      	lsls	r3, r3, #2
 800045c:	687a      	ldr	r2, [r7, #4]
 800045e:	4413      	add	r3, r2
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < input_length; i++) {
 8000464:	69bb      	ldr	r3, [r7, #24]
 8000466:	3301      	adds	r3, #1
 8000468:	61bb      	str	r3, [r7, #24]
 800046a:	69ba      	ldr	r2, [r7, #24]
 800046c:	683b      	ldr	r3, [r7, #0]
 800046e:	429a      	cmp	r2, r3
 8000470:	d3e5      	bcc.n	800043e <eml_net_softmax+0x1e>
        }
    }

    float sum = 0.0f;
 8000472:	f04f 0300 	mov.w	r3, #0
 8000476:	617b      	str	r3, [r7, #20]
    for (size_t i = 0; i < input_length; i++) {
 8000478:	2300      	movs	r3, #0
 800047a:	613b      	str	r3, [r7, #16]
 800047c:	e018      	b.n	80004b0 <eml_net_softmax+0x90>
        sum += expf(input[i] - input_max);
 800047e:	693b      	ldr	r3, [r7, #16]
 8000480:	009b      	lsls	r3, r3, #2
 8000482:	687a      	ldr	r2, [r7, #4]
 8000484:	4413      	add	r3, r2
 8000486:	ed93 7a00 	vldr	s14, [r3]
 800048a:	edd7 7a07 	vldr	s15, [r7, #28]
 800048e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000492:	eeb0 0a67 	vmov.f32	s0, s15
 8000496:	f00c fd29 	bl	800ceec <expf>
 800049a:	eeb0 7a40 	vmov.f32	s14, s0
 800049e:	edd7 7a05 	vldr	s15, [r7, #20]
 80004a2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80004a6:	edc7 7a05 	vstr	s15, [r7, #20]
    for (size_t i = 0; i < input_length; i++) {
 80004aa:	693b      	ldr	r3, [r7, #16]
 80004ac:	3301      	adds	r3, #1
 80004ae:	613b      	str	r3, [r7, #16]
 80004b0:	693a      	ldr	r2, [r7, #16]
 80004b2:	683b      	ldr	r3, [r7, #0]
 80004b4:	429a      	cmp	r2, r3
 80004b6:	d3e2      	bcc.n	800047e <eml_net_softmax+0x5e>
    }

    const float offset = input_max + logf(sum);
 80004b8:	ed97 0a05 	vldr	s0, [r7, #20]
 80004bc:	f00c fd8a 	bl	800cfd4 <logf>
 80004c0:	eeb0 7a40 	vmov.f32	s14, s0
 80004c4:	edd7 7a07 	vldr	s15, [r7, #28]
 80004c8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80004cc:	edc7 7a02 	vstr	s15, [r7, #8]
    for (size_t i = 0; i < input_length; i++) {
 80004d0:	2300      	movs	r3, #0
 80004d2:	60fb      	str	r3, [r7, #12]
 80004d4:	e018      	b.n	8000508 <eml_net_softmax+0xe8>
        input[i] = expf(input[i] - offset);
 80004d6:	68fb      	ldr	r3, [r7, #12]
 80004d8:	009b      	lsls	r3, r3, #2
 80004da:	687a      	ldr	r2, [r7, #4]
 80004dc:	4413      	add	r3, r2
 80004de:	ed93 7a00 	vldr	s14, [r3]
 80004e2:	edd7 7a02 	vldr	s15, [r7, #8]
 80004e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80004ea:	68fb      	ldr	r3, [r7, #12]
 80004ec:	009b      	lsls	r3, r3, #2
 80004ee:	687a      	ldr	r2, [r7, #4]
 80004f0:	18d4      	adds	r4, r2, r3
 80004f2:	eeb0 0a67 	vmov.f32	s0, s15
 80004f6:	f00c fcf9 	bl	800ceec <expf>
 80004fa:	eef0 7a40 	vmov.f32	s15, s0
 80004fe:	edc4 7a00 	vstr	s15, [r4]
    for (size_t i = 0; i < input_length; i++) {
 8000502:	68fb      	ldr	r3, [r7, #12]
 8000504:	3301      	adds	r3, #1
 8000506:	60fb      	str	r3, [r7, #12]
 8000508:	68fa      	ldr	r2, [r7, #12]
 800050a:	683b      	ldr	r3, [r7, #0]
 800050c:	429a      	cmp	r2, r3
 800050e:	d3e2      	bcc.n	80004d6 <eml_net_softmax+0xb6>
    }

    return EmlOk;
 8000510:	2300      	movs	r3, #0
}
 8000512:	4618      	mov	r0, r3
 8000514:	3724      	adds	r7, #36	; 0x24
 8000516:	46bd      	mov	sp, r7
 8000518:	bd90      	pop	{r4, r7, pc}
 800051a:	bf00      	nop
 800051c:	ff800000 	.word	0xff800000

08000520 <eml_net_argmax>:

int32_t
eml_net_argmax(const float *values, int32_t values_length) {
 8000520:	b480      	push	{r7}
 8000522:	b087      	sub	sp, #28
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
 8000528:	6039      	str	r1, [r7, #0]

    float vmax = -INFINITY;
 800052a:	4b15      	ldr	r3, [pc, #84]	; (8000580 <eml_net_argmax+0x60>)
 800052c:	617b      	str	r3, [r7, #20]
    int32_t argmax = -1;
 800052e:	f04f 33ff 	mov.w	r3, #4294967295
 8000532:	613b      	str	r3, [r7, #16]
    for (int i=0; i<values_length; i++) {
 8000534:	2300      	movs	r3, #0
 8000536:	60fb      	str	r3, [r7, #12]
 8000538:	e017      	b.n	800056a <eml_net_argmax+0x4a>
        if (values[i] > vmax) {
 800053a:	68fb      	ldr	r3, [r7, #12]
 800053c:	009b      	lsls	r3, r3, #2
 800053e:	687a      	ldr	r2, [r7, #4]
 8000540:	4413      	add	r3, r2
 8000542:	edd3 7a00 	vldr	s15, [r3]
 8000546:	ed97 7a05 	vldr	s14, [r7, #20]
 800054a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800054e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000552:	d507      	bpl.n	8000564 <eml_net_argmax+0x44>
            vmax = values[i];
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	009b      	lsls	r3, r3, #2
 8000558:	687a      	ldr	r2, [r7, #4]
 800055a:	4413      	add	r3, r2
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	617b      	str	r3, [r7, #20]
            argmax = i;
 8000560:	68fb      	ldr	r3, [r7, #12]
 8000562:	613b      	str	r3, [r7, #16]
    for (int i=0; i<values_length; i++) {
 8000564:	68fb      	ldr	r3, [r7, #12]
 8000566:	3301      	adds	r3, #1
 8000568:	60fb      	str	r3, [r7, #12]
 800056a:	68fa      	ldr	r2, [r7, #12]
 800056c:	683b      	ldr	r3, [r7, #0]
 800056e:	429a      	cmp	r2, r3
 8000570:	dbe3      	blt.n	800053a <eml_net_argmax+0x1a>
        }
    }
    return argmax;
 8000572:	693b      	ldr	r3, [r7, #16]
}
 8000574:	4618      	mov	r0, r3
 8000576:	371c      	adds	r7, #28
 8000578:	46bd      	mov	sp, r7
 800057a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057e:	4770      	bx	lr
 8000580:	ff800000 	.word	0xff800000

08000584 <eml_net_valid>:


static bool
eml_net_valid(EmlNet *model) {
 8000584:	b480      	push	{r7}
 8000586:	b085      	sub	sp, #20
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
    bool not_null = model->layers && model->activations1 && model->activations2;
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	685b      	ldr	r3, [r3, #4]
 8000590:	2b00      	cmp	r3, #0
 8000592:	d009      	beq.n	80005a8 <eml_net_valid+0x24>
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	689b      	ldr	r3, [r3, #8]
 8000598:	2b00      	cmp	r3, #0
 800059a:	d005      	beq.n	80005a8 <eml_net_valid+0x24>
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	68db      	ldr	r3, [r3, #12]
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d001      	beq.n	80005a8 <eml_net_valid+0x24>
 80005a4:	2301      	movs	r3, #1
 80005a6:	e000      	b.n	80005aa <eml_net_valid+0x26>
 80005a8:	2300      	movs	r3, #0
 80005aa:	73fb      	strb	r3, [r7, #15]
 80005ac:	7bfb      	ldrb	r3, [r7, #15]
 80005ae:	f003 0301 	and.w	r3, r3, #1
 80005b2:	73fb      	strb	r3, [r7, #15]
    return not_null;
 80005b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80005b6:	4618      	mov	r0, r3
 80005b8:	3714      	adds	r7, #20
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr

080005c2 <eml_net_outputs>:

static inline int32_t
eml_net_outputs(EmlNet *model) {
 80005c2:	b480      	push	{r7}
 80005c4:	b083      	sub	sp, #12
 80005c6:	af00      	add	r7, sp, #0
 80005c8:	6078      	str	r0, [r7, #4]
    return model->layers[model->n_layers-1].n_outputs;
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	685a      	ldr	r2, [r3, #4]
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	4619      	mov	r1, r3
 80005d4:	460b      	mov	r3, r1
 80005d6:	009b      	lsls	r3, r3, #2
 80005d8:	440b      	add	r3, r1
 80005da:	009b      	lsls	r3, r3, #2
 80005dc:	3b14      	subs	r3, #20
 80005de:	4413      	add	r3, r2
 80005e0:	681b      	ldr	r3, [r3, #0]
}
 80005e2:	4618      	mov	r0, r3
 80005e4:	370c      	adds	r7, #12
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr

080005ee <eml_net_find_largest_layer>:
    return n_outputs;
}

// Calculate size of activation value arrays
static int32_t
eml_net_find_largest_layer(EmlNet *model) {
 80005ee:	b480      	push	{r7}
 80005f0:	b085      	sub	sp, #20
 80005f2:	af00      	add	r7, sp, #0
 80005f4:	6078      	str	r0, [r7, #4]
    int32_t largest = -1;
 80005f6:	f04f 33ff 	mov.w	r3, #4294967295
 80005fa:	60fb      	str	r3, [r7, #12]
    for (int i=0; i<model->n_layers; i++) {
 80005fc:	2300      	movs	r3, #0
 80005fe:	60bb      	str	r3, [r7, #8]
 8000600:	e02e      	b.n	8000660 <eml_net_find_largest_layer+0x72>
        if (model->layers[i].n_inputs > largest) {
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	6859      	ldr	r1, [r3, #4]
 8000606:	68ba      	ldr	r2, [r7, #8]
 8000608:	4613      	mov	r3, r2
 800060a:	009b      	lsls	r3, r3, #2
 800060c:	4413      	add	r3, r2
 800060e:	009b      	lsls	r3, r3, #2
 8000610:	440b      	add	r3, r1
 8000612:	685b      	ldr	r3, [r3, #4]
 8000614:	68fa      	ldr	r2, [r7, #12]
 8000616:	429a      	cmp	r2, r3
 8000618:	da09      	bge.n	800062e <eml_net_find_largest_layer+0x40>
            largest = model->layers[i].n_inputs;
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	6859      	ldr	r1, [r3, #4]
 800061e:	68ba      	ldr	r2, [r7, #8]
 8000620:	4613      	mov	r3, r2
 8000622:	009b      	lsls	r3, r3, #2
 8000624:	4413      	add	r3, r2
 8000626:	009b      	lsls	r3, r3, #2
 8000628:	440b      	add	r3, r1
 800062a:	685b      	ldr	r3, [r3, #4]
 800062c:	60fb      	str	r3, [r7, #12]
        }
        if (model->layers[i].n_outputs > largest) {
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	6859      	ldr	r1, [r3, #4]
 8000632:	68ba      	ldr	r2, [r7, #8]
 8000634:	4613      	mov	r3, r2
 8000636:	009b      	lsls	r3, r3, #2
 8000638:	4413      	add	r3, r2
 800063a:	009b      	lsls	r3, r3, #2
 800063c:	440b      	add	r3, r1
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	68fa      	ldr	r2, [r7, #12]
 8000642:	429a      	cmp	r2, r3
 8000644:	da09      	bge.n	800065a <eml_net_find_largest_layer+0x6c>
            largest = model->layers[i].n_outputs;
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	6859      	ldr	r1, [r3, #4]
 800064a:	68ba      	ldr	r2, [r7, #8]
 800064c:	4613      	mov	r3, r2
 800064e:	009b      	lsls	r3, r3, #2
 8000650:	4413      	add	r3, r2
 8000652:	009b      	lsls	r3, r3, #2
 8000654:	440b      	add	r3, r1
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	60fb      	str	r3, [r7, #12]
    for (int i=0; i<model->n_layers; i++) {
 800065a:	68bb      	ldr	r3, [r7, #8]
 800065c:	3301      	adds	r3, #1
 800065e:	60bb      	str	r3, [r7, #8]
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	68ba      	ldr	r2, [r7, #8]
 8000666:	429a      	cmp	r2, r3
 8000668:	dbcb      	blt.n	8000602 <eml_net_find_largest_layer+0x14>
        }
    }
    return largest;
 800066a:	68fb      	ldr	r3, [r7, #12]
}
 800066c:	4618      	mov	r0, r3
 800066e:	3714      	adds	r7, #20
 8000670:	46bd      	mov	sp, r7
 8000672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000676:	4770      	bx	lr

08000678 <eml_net_layer_forward>:

EmlError
eml_net_layer_forward(const EmlNetLayer *layer,
                    const float *in, int32_t in_length,
                    float *out, int32_t out_length)
{
 8000678:	b590      	push	{r4, r7, lr}
 800067a:	b08d      	sub	sp, #52	; 0x34
 800067c:	af00      	add	r7, sp, #0
 800067e:	60f8      	str	r0, [r7, #12]
 8000680:	60b9      	str	r1, [r7, #8]
 8000682:	607a      	str	r2, [r7, #4]
 8000684:	603b      	str	r3, [r7, #0]
    EML_PRECONDITION(in_length >= layer->n_inputs, EmlSizeMismatch);
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	685b      	ldr	r3, [r3, #4]
 800068a:	687a      	ldr	r2, [r7, #4]
 800068c:	429a      	cmp	r2, r3
 800068e:	da01      	bge.n	8000694 <eml_net_layer_forward+0x1c>
 8000690:	2301      	movs	r3, #1
 8000692:	e0d3      	b.n	800083c <eml_net_layer_forward+0x1c4>
    EML_PRECONDITION(out_length >= layer->n_outputs, EmlSizeMismatch);
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800069a:	429a      	cmp	r2, r3
 800069c:	da01      	bge.n	80006a2 <eml_net_layer_forward+0x2a>
 800069e:	2301      	movs	r3, #1
 80006a0:	e0cc      	b.n	800083c <eml_net_layer_forward+0x1c4>
    EML_PRECONDITION(layer->weights, EmlUninitialized);
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	689b      	ldr	r3, [r3, #8]
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d101      	bne.n	80006ae <eml_net_layer_forward+0x36>
 80006aa:	2303      	movs	r3, #3
 80006ac:	e0c6      	b.n	800083c <eml_net_layer_forward+0x1c4>
    EML_PRECONDITION(layer->biases, EmlUninitialized);
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	68db      	ldr	r3, [r3, #12]
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d101      	bne.n	80006ba <eml_net_layer_forward+0x42>
 80006b6:	2303      	movs	r3, #3
 80006b8:	e0c0      	b.n	800083c <eml_net_layer_forward+0x1c4>
    //printf("weights "); print_array(layer->weights, layer->n_inputs*layer->n_outputs);
    //printf("biases "); print_array(layer->biases, layer->n_outputs);

    // TODO: matrix multiplication should be done in blocks. Ex 2x4*4x2 = 2x2
    // multiply inputs by weights
    for (int o=0; o<layer->n_outputs; o++) {
 80006ba:	2300      	movs	r3, #0
 80006bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80006be:	e040      	b.n	8000742 <eml_net_layer_forward+0xca>
        float sum = 0.0f;
 80006c0:	f04f 0300 	mov.w	r3, #0
 80006c4:	62bb      	str	r3, [r7, #40]	; 0x28
        for (int i=0; i<layer->n_inputs; i++) {
 80006c6:	2300      	movs	r3, #0
 80006c8:	627b      	str	r3, [r7, #36]	; 0x24
 80006ca:	e021      	b.n	8000710 <eml_net_layer_forward+0x98>
            const int w_idx = o+(i*layer->n_outputs); // not stored continious
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80006d2:	fb02 f303 	mul.w	r3, r2, r3
 80006d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80006d8:	4413      	add	r3, r2
 80006da:	617b      	str	r3, [r7, #20]
            const float w = layer->weights[w_idx];
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	689a      	ldr	r2, [r3, #8]
 80006e0:	697b      	ldr	r3, [r7, #20]
 80006e2:	009b      	lsls	r3, r3, #2
 80006e4:	4413      	add	r3, r2
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	613b      	str	r3, [r7, #16]
            sum += w * in[i];
 80006ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006ec:	009b      	lsls	r3, r3, #2
 80006ee:	68ba      	ldr	r2, [r7, #8]
 80006f0:	4413      	add	r3, r2
 80006f2:	ed93 7a00 	vldr	s14, [r3]
 80006f6:	edd7 7a04 	vldr	s15, [r7, #16]
 80006fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80006fe:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8000702:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000706:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
        for (int i=0; i<layer->n_inputs; i++) {
 800070a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800070c:	3301      	adds	r3, #1
 800070e:	627b      	str	r3, [r7, #36]	; 0x24
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	685b      	ldr	r3, [r3, #4]
 8000714:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000716:	429a      	cmp	r2, r3
 8000718:	dbd8      	blt.n	80006cc <eml_net_layer_forward+0x54>
        }

        out[o] = sum + layer->biases[o];
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	68da      	ldr	r2, [r3, #12]
 800071e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000720:	009b      	lsls	r3, r3, #2
 8000722:	4413      	add	r3, r2
 8000724:	ed93 7a00 	vldr	s14, [r3]
 8000728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800072a:	009b      	lsls	r3, r3, #2
 800072c:	683a      	ldr	r2, [r7, #0]
 800072e:	4413      	add	r3, r2
 8000730:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000734:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000738:	edc3 7a00 	vstr	s15, [r3]
    for (int o=0; o<layer->n_outputs; o++) {
 800073c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800073e:	3301      	adds	r3, #1
 8000740:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000748:	429a      	cmp	r2, r3
 800074a:	dbb9      	blt.n	80006c0 <eml_net_layer_forward+0x48>

    }

    // apply activation function
    if (layer->activation == EmlNetActivationIdentity) {
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	7c1b      	ldrb	r3, [r3, #16]
 8000750:	2b00      	cmp	r3, #0
 8000752:	d072      	beq.n	800083a <eml_net_layer_forward+0x1c2>
        // no-op
    } else if (layer->activation == EmlNetActivationRelu) {
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	7c1b      	ldrb	r3, [r3, #16]
 8000758:	2b01      	cmp	r3, #1
 800075a:	d11d      	bne.n	8000798 <eml_net_layer_forward+0x120>
        for (int i=0; i<layer->n_outputs; i++) {
 800075c:	2300      	movs	r3, #0
 800075e:	623b      	str	r3, [r7, #32]
 8000760:	e014      	b.n	800078c <eml_net_layer_forward+0x114>
            out[i] = eml_net_relu(out[i]);
 8000762:	6a3b      	ldr	r3, [r7, #32]
 8000764:	009b      	lsls	r3, r3, #2
 8000766:	683a      	ldr	r2, [r7, #0]
 8000768:	4413      	add	r3, r2
 800076a:	edd3 7a00 	vldr	s15, [r3]
 800076e:	6a3b      	ldr	r3, [r7, #32]
 8000770:	009b      	lsls	r3, r3, #2
 8000772:	683a      	ldr	r2, [r7, #0]
 8000774:	18d4      	adds	r4, r2, r3
 8000776:	eeb0 0a67 	vmov.f32	s0, s15
 800077a:	f7ff fe09 	bl	8000390 <eml_net_relu>
 800077e:	eef0 7a40 	vmov.f32	s15, s0
 8000782:	edc4 7a00 	vstr	s15, [r4]
        for (int i=0; i<layer->n_outputs; i++) {
 8000786:	6a3b      	ldr	r3, [r7, #32]
 8000788:	3301      	adds	r3, #1
 800078a:	623b      	str	r3, [r7, #32]
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	6a3a      	ldr	r2, [r7, #32]
 8000792:	429a      	cmp	r2, r3
 8000794:	dbe5      	blt.n	8000762 <eml_net_layer_forward+0xea>
 8000796:	e050      	b.n	800083a <eml_net_layer_forward+0x1c2>
        }
    } else if (layer->activation == EmlNetActivationLogistic) {
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	7c1b      	ldrb	r3, [r3, #16]
 800079c:	2b02      	cmp	r3, #2
 800079e:	d11d      	bne.n	80007dc <eml_net_layer_forward+0x164>
        for (int i=0; i<layer->n_outputs; i++) {
 80007a0:	2300      	movs	r3, #0
 80007a2:	61fb      	str	r3, [r7, #28]
 80007a4:	e014      	b.n	80007d0 <eml_net_layer_forward+0x158>
            out[i] = eml_net_expit(out[i]);
 80007a6:	69fb      	ldr	r3, [r7, #28]
 80007a8:	009b      	lsls	r3, r3, #2
 80007aa:	683a      	ldr	r2, [r7, #0]
 80007ac:	4413      	add	r3, r2
 80007ae:	edd3 7a00 	vldr	s15, [r3]
 80007b2:	69fb      	ldr	r3, [r7, #28]
 80007b4:	009b      	lsls	r3, r3, #2
 80007b6:	683a      	ldr	r2, [r7, #0]
 80007b8:	18d4      	adds	r4, r2, r3
 80007ba:	eeb0 0a67 	vmov.f32	s0, s15
 80007be:	f7ff fe00 	bl	80003c2 <eml_net_expit>
 80007c2:	eef0 7a40 	vmov.f32	s15, s0
 80007c6:	edc4 7a00 	vstr	s15, [r4]
        for (int i=0; i<layer->n_outputs; i++) {
 80007ca:	69fb      	ldr	r3, [r7, #28]
 80007cc:	3301      	adds	r3, #1
 80007ce:	61fb      	str	r3, [r7, #28]
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	69fa      	ldr	r2, [r7, #28]
 80007d6:	429a      	cmp	r2, r3
 80007d8:	dbe5      	blt.n	80007a6 <eml_net_layer_forward+0x12e>
 80007da:	e02e      	b.n	800083a <eml_net_layer_forward+0x1c2>
        }
    } else if (layer->activation == EmlNetActivationTanh) {
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	7c1b      	ldrb	r3, [r3, #16]
 80007e0:	2b04      	cmp	r3, #4
 80007e2:	d11d      	bne.n	8000820 <eml_net_layer_forward+0x1a8>
        for (int i=0; i<layer->n_outputs; i++) {
 80007e4:	2300      	movs	r3, #0
 80007e6:	61bb      	str	r3, [r7, #24]
 80007e8:	e014      	b.n	8000814 <eml_net_layer_forward+0x19c>
            out[i] = eml_net_tanh(out[i]);
 80007ea:	69bb      	ldr	r3, [r7, #24]
 80007ec:	009b      	lsls	r3, r3, #2
 80007ee:	683a      	ldr	r2, [r7, #0]
 80007f0:	4413      	add	r3, r2
 80007f2:	edd3 7a00 	vldr	s15, [r3]
 80007f6:	69bb      	ldr	r3, [r7, #24]
 80007f8:	009b      	lsls	r3, r3, #2
 80007fa:	683a      	ldr	r2, [r7, #0]
 80007fc:	18d4      	adds	r4, r2, r3
 80007fe:	eeb0 0a67 	vmov.f32	s0, s15
 8000802:	f7ff fdfc 	bl	80003fe <eml_net_tanh>
 8000806:	eef0 7a40 	vmov.f32	s15, s0
 800080a:	edc4 7a00 	vstr	s15, [r4]
        for (int i=0; i<layer->n_outputs; i++) {
 800080e:	69bb      	ldr	r3, [r7, #24]
 8000810:	3301      	adds	r3, #1
 8000812:	61bb      	str	r3, [r7, #24]
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	69ba      	ldr	r2, [r7, #24]
 800081a:	429a      	cmp	r2, r3
 800081c:	dbe5      	blt.n	80007ea <eml_net_layer_forward+0x172>
 800081e:	e00c      	b.n	800083a <eml_net_layer_forward+0x1c2>
        }
    } else if (layer->activation == EmlNetActivationSoftmax) {
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	7c1b      	ldrb	r3, [r3, #16]
 8000824:	2b03      	cmp	r3, #3
 8000826:	d106      	bne.n	8000836 <eml_net_layer_forward+0x1be>
        eml_net_softmax(out, layer->n_outputs);
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	4619      	mov	r1, r3
 800082e:	6838      	ldr	r0, [r7, #0]
 8000830:	f7ff fdf6 	bl	8000420 <eml_net_softmax>
 8000834:	e001      	b.n	800083a <eml_net_layer_forward+0x1c2>
    } else {
        return EmlUnsupported;
 8000836:	2302      	movs	r3, #2
 8000838:	e000      	b.n	800083c <eml_net_layer_forward+0x1c4>
    }

    //printf("activations "); print_array(out, layer->n_outputs);

    return EmlOk;
 800083a:	2300      	movs	r3, #0
}
 800083c:	4618      	mov	r0, r3
 800083e:	3734      	adds	r7, #52	; 0x34
 8000840:	46bd      	mov	sp, r7
 8000842:	bd90      	pop	{r4, r7, pc}

08000844 <eml_net_infer>:


// Run inferences. Leaves results in activations2
EmlError
eml_net_infer(EmlNet *model, const float *features, int32_t features_length)
{
 8000844:	b590      	push	{r4, r7, lr}
 8000846:	b08f      	sub	sp, #60	; 0x3c
 8000848:	af02      	add	r7, sp, #8
 800084a:	60f8      	str	r0, [r7, #12]
 800084c:	60b9      	str	r1, [r7, #8]
 800084e:	607a      	str	r2, [r7, #4]
    EML_PRECONDITION(eml_net_valid(model), EmlUninitialized);
 8000850:	68f8      	ldr	r0, [r7, #12]
 8000852:	f7ff fe97 	bl	8000584 <eml_net_valid>
 8000856:	4603      	mov	r3, r0
 8000858:	f083 0301 	eor.w	r3, r3, #1
 800085c:	b2db      	uxtb	r3, r3
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <eml_net_infer+0x22>
 8000862:	2303      	movs	r3, #3
 8000864:	e082      	b.n	800096c <eml_net_infer+0x128>
    EML_PRECONDITION(model->n_layers >= 2, EmlUnsupported);
 8000866:	68fb      	ldr	r3, [r7, #12]
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	2b01      	cmp	r3, #1
 800086c:	dc01      	bgt.n	8000872 <eml_net_infer+0x2e>
 800086e:	2302      	movs	r3, #2
 8000870:	e07c      	b.n	800096c <eml_net_infer+0x128>
    EML_PRECONDITION(features_length == model->layers[0].n_inputs, EmlSizeMismatch);
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	685b      	ldr	r3, [r3, #4]
 8000876:	685b      	ldr	r3, [r3, #4]
 8000878:	687a      	ldr	r2, [r7, #4]
 800087a:	429a      	cmp	r2, r3
 800087c:	d001      	beq.n	8000882 <eml_net_infer+0x3e>
 800087e:	2301      	movs	r3, #1
 8000880:	e074      	b.n	800096c <eml_net_infer+0x128>
    EML_PRECONDITION(model->activations_length >= eml_net_find_largest_layer(model), EmlSizeMismatch);
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	691c      	ldr	r4, [r3, #16]
 8000886:	68f8      	ldr	r0, [r7, #12]
 8000888:	f7ff feb1 	bl	80005ee <eml_net_find_largest_layer>
 800088c:	4603      	mov	r3, r0
 800088e:	429c      	cmp	r4, r3
 8000890:	da01      	bge.n	8000896 <eml_net_infer+0x52>
 8000892:	2301      	movs	r3, #1
 8000894:	e06a      	b.n	800096c <eml_net_infer+0x128>

    const int32_t buffer_length = model->activations_length; 
 8000896:	68fb      	ldr	r3, [r7, #12]
 8000898:	691b      	ldr	r3, [r3, #16]
 800089a:	627b      	str	r3, [r7, #36]	; 0x24
    float *buffer1 = model->activations1;
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	689b      	ldr	r3, [r3, #8]
 80008a0:	623b      	str	r3, [r7, #32]
    float *buffer2 = model->activations2;
 80008a2:	68fb      	ldr	r3, [r7, #12]
 80008a4:	68db      	ldr	r3, [r3, #12]
 80008a6:	61fb      	str	r3, [r7, #28]

    // Input layer
    EML_CHECK_ERROR(eml_net_layer_forward(&model->layers[0], features,
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	6858      	ldr	r0, [r3, #4]
 80008ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008ae:	9300      	str	r3, [sp, #0]
 80008b0:	6a3b      	ldr	r3, [r7, #32]
 80008b2:	687a      	ldr	r2, [r7, #4]
 80008b4:	68b9      	ldr	r1, [r7, #8]
 80008b6:	f7ff fedf 	bl	8000678 <eml_net_layer_forward>
 80008ba:	4603      	mov	r3, r0
 80008bc:	76fb      	strb	r3, [r7, #27]
 80008be:	7efb      	ldrb	r3, [r7, #27]
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <eml_net_infer+0x84>
 80008c4:	7efb      	ldrb	r3, [r7, #27]
 80008c6:	e051      	b.n	800096c <eml_net_infer+0x128>
                        features_length, buffer1, buffer_length));

    // Hidden layers
    for (int l=1; l<model->n_layers-1; l++) {
 80008c8:	2301      	movs	r3, #1
 80008ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80008cc:	e02e      	b.n	800092c <eml_net_infer+0xe8>
        const EmlNetLayer *layer = &model->layers[l];
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	6859      	ldr	r1, [r3, #4]
 80008d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80008d4:	4613      	mov	r3, r2
 80008d6:	009b      	lsls	r3, r3, #2
 80008d8:	4413      	add	r3, r2
 80008da:	009b      	lsls	r3, r3, #2
 80008dc:	440b      	add	r3, r1
 80008de:	617b      	str	r3, [r7, #20]
        // PERF: avoid copying, swap buffers instead
        EML_CHECK_ERROR(eml_net_layer_forward(layer, buffer1, buffer_length, buffer2, buffer_length));
 80008e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008e2:	9300      	str	r3, [sp, #0]
 80008e4:	69fb      	ldr	r3, [r7, #28]
 80008e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80008e8:	6a39      	ldr	r1, [r7, #32]
 80008ea:	6978      	ldr	r0, [r7, #20]
 80008ec:	f7ff fec4 	bl	8000678 <eml_net_layer_forward>
 80008f0:	4603      	mov	r3, r0
 80008f2:	74fb      	strb	r3, [r7, #19]
 80008f4:	7cfb      	ldrb	r3, [r7, #19]
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <eml_net_infer+0xba>
 80008fa:	7cfb      	ldrb	r3, [r7, #19]
 80008fc:	e036      	b.n	800096c <eml_net_infer+0x128>
        for (int i=0; i<buffer_length; i++) {
 80008fe:	2300      	movs	r3, #0
 8000900:	62bb      	str	r3, [r7, #40]	; 0x28
 8000902:	e00c      	b.n	800091e <eml_net_infer+0xda>
            buffer1[i] = buffer2[i];
 8000904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000906:	009b      	lsls	r3, r3, #2
 8000908:	69fa      	ldr	r2, [r7, #28]
 800090a:	441a      	add	r2, r3
 800090c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800090e:	009b      	lsls	r3, r3, #2
 8000910:	6a39      	ldr	r1, [r7, #32]
 8000912:	440b      	add	r3, r1
 8000914:	6812      	ldr	r2, [r2, #0]
 8000916:	601a      	str	r2, [r3, #0]
        for (int i=0; i<buffer_length; i++) {
 8000918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800091a:	3301      	adds	r3, #1
 800091c:	62bb      	str	r3, [r7, #40]	; 0x28
 800091e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000922:	429a      	cmp	r2, r3
 8000924:	dbee      	blt.n	8000904 <eml_net_infer+0xc0>
    for (int l=1; l<model->n_layers-1; l++) {
 8000926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000928:	3301      	adds	r3, #1
 800092a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	3b01      	subs	r3, #1
 8000932:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000934:	429a      	cmp	r2, r3
 8000936:	dbca      	blt.n	80008ce <eml_net_infer+0x8a>
        }
    }

    // Output layer
    EML_CHECK_ERROR(eml_net_layer_forward(&model->layers[model->n_layers-1],
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	685a      	ldr	r2, [r3, #4]
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4619      	mov	r1, r3
 8000942:	460b      	mov	r3, r1
 8000944:	009b      	lsls	r3, r3, #2
 8000946:	440b      	add	r3, r1
 8000948:	009b      	lsls	r3, r3, #2
 800094a:	3b14      	subs	r3, #20
 800094c:	18d0      	adds	r0, r2, r3
 800094e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000950:	9300      	str	r3, [sp, #0]
 8000952:	69fb      	ldr	r3, [r7, #28]
 8000954:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000956:	6a39      	ldr	r1, [r7, #32]
 8000958:	f7ff fe8e 	bl	8000678 <eml_net_layer_forward>
 800095c:	4603      	mov	r3, r0
 800095e:	76bb      	strb	r3, [r7, #26]
 8000960:	7ebb      	ldrb	r3, [r7, #26]
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <eml_net_infer+0x126>
 8000966:	7ebb      	ldrb	r3, [r7, #26]
 8000968:	e000      	b.n	800096c <eml_net_infer+0x128>
                        buffer1, buffer_length, buffer2, buffer_length));

    return EmlOk;
 800096a:	2300      	movs	r3, #0
}
 800096c:	4618      	mov	r0, r3
 800096e:	3734      	adds	r7, #52	; 0x34
 8000970:	46bd      	mov	sp, r7
 8000972:	bd90      	pop	{r4, r7, pc}

08000974 <eml_net_predict>:
}


// Return the class, or -EmlError on failure
int32_t
eml_net_predict(EmlNet *model, const float *features, int32_t features_length) {
 8000974:	b580      	push	{r7, lr}
 8000976:	b088      	sub	sp, #32
 8000978:	af00      	add	r7, sp, #0
 800097a:	60f8      	str	r0, [r7, #12]
 800097c:	60b9      	str	r1, [r7, #8]
 800097e:	607a      	str	r2, [r7, #4]

    const EmlError error = eml_net_infer(model, features, features_length);
 8000980:	687a      	ldr	r2, [r7, #4]
 8000982:	68b9      	ldr	r1, [r7, #8]
 8000984:	68f8      	ldr	r0, [r7, #12]
 8000986:	f7ff ff5d 	bl	8000844 <eml_net_infer>
 800098a:	4603      	mov	r3, r0
 800098c:	76fb      	strb	r3, [r7, #27]
    if (error != EmlOk) {
 800098e:	7efb      	ldrb	r3, [r7, #27]
 8000990:	2b00      	cmp	r3, #0
 8000992:	d002      	beq.n	800099a <eml_net_predict+0x26>
        return -error;
 8000994:	7efb      	ldrb	r3, [r7, #27]
 8000996:	425b      	negs	r3, r3
 8000998:	e024      	b.n	80009e4 <eml_net_predict+0x70>
    }

    const int32_t n_outputs = eml_net_outputs(model);
 800099a:	68f8      	ldr	r0, [r7, #12]
 800099c:	f7ff fe11 	bl	80005c2 <eml_net_outputs>
 80009a0:	6178      	str	r0, [r7, #20]

    int32_t _class = -EmlUnknownError;
 80009a2:	f06f 0304 	mvn.w	r3, #4
 80009a6:	61fb      	str	r3, [r7, #28]
    if (n_outputs == 1) {
 80009a8:	697b      	ldr	r3, [r7, #20]
 80009aa:	2b01      	cmp	r3, #1
 80009ac:	d10f      	bne.n	80009ce <eml_net_predict+0x5a>
        _class = (model->activations2[0] > 0.5f) ? 1 : 0;
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	68db      	ldr	r3, [r3, #12]
 80009b2:	edd3 7a00 	vldr	s15, [r3]
 80009b6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80009ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80009be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009c2:	bfcc      	ite	gt
 80009c4:	2301      	movgt	r3, #1
 80009c6:	2300      	movle	r3, #0
 80009c8:	b2db      	uxtb	r3, r3
 80009ca:	61fb      	str	r3, [r7, #28]
 80009cc:	e009      	b.n	80009e2 <eml_net_predict+0x6e>
    } else if (n_outputs > 1) {
 80009ce:	697b      	ldr	r3, [r7, #20]
 80009d0:	2b01      	cmp	r3, #1
 80009d2:	dd06      	ble.n	80009e2 <eml_net_predict+0x6e>
        _class = eml_net_argmax(model->activations2, n_outputs);
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	68db      	ldr	r3, [r3, #12]
 80009d8:	6979      	ldr	r1, [r7, #20]
 80009da:	4618      	mov	r0, r3
 80009dc:	f7ff fda0 	bl	8000520 <eml_net_argmax>
 80009e0:	61f8      	str	r0, [r7, #28]
    }

    return _class;
 80009e2:	69fb      	ldr	r3, [r7, #28]
}
 80009e4:	4618      	mov	r0, r3
 80009e6:	3720      	adds	r7, #32
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}

080009ec <nevronskaMreza_jakostGibanja_predict>:
{ 3, 10, nevronskaMreza_jakostGibanja_layer1_weights, nevronskaMreza_jakostGibanja_layer1_biases, EmlNetActivationSoftmax } };
static EmlNet nevronskaMreza_jakostGibanja = { 2, nevronskaMreza_jakostGibanja_layers, nevronskaMreza_jakostGibanja_buf1, nevronskaMreza_jakostGibanja_buf2, 10 };

    int32_t
    nevronskaMreza_jakostGibanja_predict(const float *features, int32_t n_features)
    {
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
 80009f4:	6039      	str	r1, [r7, #0]
        return eml_net_predict(&nevronskaMreza_jakostGibanja, features, n_features);
 80009f6:	683a      	ldr	r2, [r7, #0]
 80009f8:	6879      	ldr	r1, [r7, #4]
 80009fa:	4804      	ldr	r0, [pc, #16]	; (8000a0c <nevronskaMreza_jakostGibanja_predict+0x20>)
 80009fc:	f7ff ffba 	bl	8000974 <eml_net_predict>
 8000a00:	4603      	mov	r3, r0

    }
 8000a02:	4618      	mov	r0, r3
 8000a04:	3708      	adds	r7, #8
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	24000000 	.word	0x24000000

08000a10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b086      	sub	sp, #24
 8000a14:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a16:	f001 f82f 	bl	8001a78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a1a:	f000 f8af 	bl	8000b7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a1e:	f000 f9e3 	bl	8000de8 <MX_GPIO_Init>
  MX_ADC3_Init();
 8000a22:	f000 f92b 	bl	8000c7c <MX_ADC3_Init>
  MX_TIM16_Init();
 8000a26:	f000 f9b9 	bl	8000d9c <MX_TIM16_Init>
  MX_USB_DEVICE_Init();
 8000a2a:	f00b f86b 	bl	800bb04 <MX_USB_DEVICE_Init>
  MX_QUADSPI_Init();
 8000a2e:	f000 f989 	bl	8000d44 <MX_QUADSPI_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_Base_Start(&htim16);
 8000a32:	4847      	ldr	r0, [pc, #284]	; (8000b50 <main+0x140>)
 8000a34:	f007 fc3e 	bl	80082b4 <HAL_TIM_Base_Start>

  while (1)
  {
	  if(counterOfTestData == 0) {
 8000a38:	4b46      	ldr	r3, [pc, #280]	; (8000b54 <main+0x144>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d104      	bne.n	8000a4a <main+0x3a>
		  timestamp = htim16.Instance->CNT;
 8000a40:	4b43      	ldr	r3, [pc, #268]	; (8000b50 <main+0x140>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a46:	4a44      	ldr	r2, [pc, #272]	; (8000b58 <main+0x148>)
 8000a48:	6013      	str	r3, [r2, #0]
	  }

	  float input = (inputList[counterOfTestData] - 0.22330145150297734) * 2.5709241370783027;
 8000a4a:	4b42      	ldr	r3, [pc, #264]	; (8000b54 <main+0x144>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	4a43      	ldr	r2, [pc, #268]	; (8000b5c <main+0x14c>)
 8000a50:	009b      	lsls	r3, r3, #2
 8000a52:	4413      	add	r3, r2
 8000a54:	edd3 7a00 	vldr	s15, [r3]
 8000a58:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a5c:	ed9f 6b38 	vldr	d6, [pc, #224]	; 8000b40 <main+0x130>
 8000a60:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000a64:	ed9f 6b38 	vldr	d6, [pc, #224]	; 8000b48 <main+0x138>
 8000a68:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000a6c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000a70:	edc7 7a02 	vstr	s15, [r7, #8]

	  const float features[] = { input };
 8000a74:	68bb      	ldr	r3, [r7, #8]
 8000a76:	603b      	str	r3, [r7, #0]
	  int out = nevronskaMreza_jakostGibanja_predict(features, 1); // Alternative A: "inline"
 8000a78:	463b      	mov	r3, r7
 8000a7a:	2101      	movs	r1, #1
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f7ff ffb5 	bl	80009ec <nevronskaMreza_jakostGibanja_predict>
 8000a82:	6078      	str	r0, [r7, #4]
	  if (out < 0) {
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	da01      	bge.n	8000a8e <main+0x7e>
	      return out; // error
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	e053      	b.n	8000b36 <main+0x126>
	  } else {
		  counterOfTestData++;
 8000a8e:	4b31      	ldr	r3, [pc, #196]	; (8000b54 <main+0x144>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	3301      	adds	r3, #1
 8000a94:	4a2f      	ldr	r2, [pc, #188]	; (8000b54 <main+0x144>)
 8000a96:	6013      	str	r3, [r2, #0]

		  //snprintf(SendBuffer,BUFSIZE,"%d, ", out);
		  //CDC_Transmit_FS(SendBuffer,strlen(SendBuffer));
	  }

	  if(counterOfTestData == length) {
 8000a98:	4b2e      	ldr	r3, [pc, #184]	; (8000b54 <main+0x144>)
 8000a9a:	681a      	ldr	r2, [r3, #0]
 8000a9c:	4b30      	ldr	r3, [pc, #192]	; (8000b60 <main+0x150>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	429a      	cmp	r2, r3
 8000aa2:	d1c9      	bne.n	8000a38 <main+0x28>

		  //snprintf(SendBuffer,BUFSIZE,"\r\n -------------------------------", out);
		  //		  CDC_Transmit_FS(SendBuffer,strlen(SendBuffer));
		  //		  HAL_Delay(1000);

		  counterOfTestData=0;
 8000aa4:	4b2b      	ldr	r3, [pc, #172]	; (8000b54 <main+0x144>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	601a      	str	r2, [r3, #0]

		  countDurations++;
 8000aaa:	4b2e      	ldr	r3, [pc, #184]	; (8000b64 <main+0x154>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	3301      	adds	r3, #1
 8000ab0:	4a2c      	ldr	r2, [pc, #176]	; (8000b64 <main+0x154>)
 8000ab2:	6013      	str	r3, [r2, #0]

		  		uint32_t duration = htim16.Instance->CNT;
 8000ab4:	4b26      	ldr	r3, [pc, #152]	; (8000b50 <main+0x140>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000aba:	60fb      	str	r3, [r7, #12]

		  		if(duration >= timestamp)
 8000abc:	4b26      	ldr	r3, [pc, #152]	; (8000b58 <main+0x148>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	68fa      	ldr	r2, [r7, #12]
 8000ac2:	429a      	cmp	r2, r3
 8000ac4:	d305      	bcc.n	8000ad2 <main+0xc2>
		  			duration -= timestamp;
 8000ac6:	4b24      	ldr	r3, [pc, #144]	; (8000b58 <main+0x148>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	68fa      	ldr	r2, [r7, #12]
 8000acc:	1ad3      	subs	r3, r2, r3
 8000ace:	60fb      	str	r3, [r7, #12]
 8000ad0:	e006      	b.n	8000ae0 <main+0xd0>
		  		else
		  			duration += (65535 - timestamp) + 1; //+1 because of counting from 0 onwards
 8000ad2:	4b21      	ldr	r3, [pc, #132]	; (8000b58 <main+0x148>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	68fa      	ldr	r2, [r7, #12]
 8000ad8:	1ad3      	subs	r3, r2, r3
 8000ada:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8000ade:	60fb      	str	r3, [r7, #12]

		  		//snprintf(SendBuffer,BUFSIZE,"1 Trajanje izvajanja: %lu mikrosekund. \r\n", duration);
		  		//CDC_Transmit_FS(SendBuffer,strlen(SendBuffer));
		  		averageDurationValue += duration;
 8000ae0:	4b21      	ldr	r3, [pc, #132]	; (8000b68 <main+0x158>)
 8000ae2:	681a      	ldr	r2, [r3, #0]
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	4413      	add	r3, r2
 8000ae8:	4a1f      	ldr	r2, [pc, #124]	; (8000b68 <main+0x158>)
 8000aea:	6013      	str	r3, [r2, #0]

		  		if(countDurations == numberOfDurations) {
 8000aec:	4b1d      	ldr	r3, [pc, #116]	; (8000b64 <main+0x154>)
 8000aee:	681a      	ldr	r2, [r3, #0]
 8000af0:	4b1e      	ldr	r3, [pc, #120]	; (8000b6c <main+0x15c>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	429a      	cmp	r2, r3
 8000af6:	d19f      	bne.n	8000a38 <main+0x28>
		  			snprintf(SendBuffer,BUFSIZE,"Trajanje izvajanja: [%lu] %lu mikrosekund. \r\n", averageDurationValue, averageDurationValue / 100);
 8000af8:	4b1b      	ldr	r3, [pc, #108]	; (8000b68 <main+0x158>)
 8000afa:	681a      	ldr	r2, [r3, #0]
 8000afc:	4b1a      	ldr	r3, [pc, #104]	; (8000b68 <main+0x158>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	491b      	ldr	r1, [pc, #108]	; (8000b70 <main+0x160>)
 8000b02:	fba1 1303 	umull	r1, r3, r1, r3
 8000b06:	095b      	lsrs	r3, r3, #5
 8000b08:	9300      	str	r3, [sp, #0]
 8000b0a:	4613      	mov	r3, r2
 8000b0c:	4a19      	ldr	r2, [pc, #100]	; (8000b74 <main+0x164>)
 8000b0e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b12:	4819      	ldr	r0, [pc, #100]	; (8000b78 <main+0x168>)
 8000b14:	f00b fd68 	bl	800c5e8 <sniprintf>
		  			CDC_Transmit_FS(SendBuffer,strlen(SendBuffer));
 8000b18:	4817      	ldr	r0, [pc, #92]	; (8000b78 <main+0x168>)
 8000b1a:	f7ff fbe1 	bl	80002e0 <strlen>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	4619      	mov	r1, r3
 8000b22:	4815      	ldr	r0, [pc, #84]	; (8000b78 <main+0x168>)
 8000b24:	f00b f8ae 	bl	800bc84 <CDC_Transmit_FS>

		  			countDurations = 0;
 8000b28:	4b0e      	ldr	r3, [pc, #56]	; (8000b64 <main+0x154>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	601a      	str	r2, [r3, #0]
		  			averageDurationValue = 0;
 8000b2e:	4b0e      	ldr	r3, [pc, #56]	; (8000b68 <main+0x158>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	601a      	str	r2, [r3, #0]
  {
 8000b34:	e780      	b.n	8000a38 <main+0x28>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	3710      	adds	r7, #16
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	57ad641d 	.word	0x57ad641d
 8000b44:	3fcc9524 	.word	0x3fcc9524
 8000b48:	ac89fc95 	.word	0xac89fc95
 8000b4c:	40049140 	.word	0x40049140
 8000b50:	240003ac 	.word	0x240003ac
 8000b54:	240002ec 	.word	0x240002ec
 8000b58:	240002f8 	.word	0x240002f8
 8000b5c:	0800d640 	.word	0x0800d640
 8000b60:	24000018 	.word	0x24000018
 8000b64:	240002f4 	.word	0x240002f4
 8000b68:	240002f0 	.word	0x240002f0
 8000b6c:	24000014 	.word	0x24000014
 8000b70:	51eb851f 	.word	0x51eb851f
 8000b74:	0800d4cc 	.word	0x0800d4cc
 8000b78:	240001ec 	.word	0x240001ec

08000b7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b09c      	sub	sp, #112	; 0x70
 8000b80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b86:	224c      	movs	r2, #76	; 0x4c
 8000b88:	2100      	movs	r1, #0
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f00b fd24 	bl	800c5d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b90:	1d3b      	adds	r3, r7, #4
 8000b92:	2220      	movs	r2, #32
 8000b94:	2100      	movs	r1, #0
 8000b96:	4618      	mov	r0, r3
 8000b98:	f00b fd1e 	bl	800c5d8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000b9c:	2002      	movs	r0, #2
 8000b9e:	f003 fd5f 	bl	8004660 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	603b      	str	r3, [r7, #0]
 8000ba6:	4b33      	ldr	r3, [pc, #204]	; (8000c74 <SystemClock_Config+0xf8>)
 8000ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000baa:	4a32      	ldr	r2, [pc, #200]	; (8000c74 <SystemClock_Config+0xf8>)
 8000bac:	f023 0301 	bic.w	r3, r3, #1
 8000bb0:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000bb2:	4b30      	ldr	r3, [pc, #192]	; (8000c74 <SystemClock_Config+0xf8>)
 8000bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bb6:	f003 0301 	and.w	r3, r3, #1
 8000bba:	603b      	str	r3, [r7, #0]
 8000bbc:	4b2e      	ldr	r3, [pc, #184]	; (8000c78 <SystemClock_Config+0xfc>)
 8000bbe:	699b      	ldr	r3, [r3, #24]
 8000bc0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000bc4:	4a2c      	ldr	r2, [pc, #176]	; (8000c78 <SystemClock_Config+0xfc>)
 8000bc6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bca:	6193      	str	r3, [r2, #24]
 8000bcc:	4b2a      	ldr	r3, [pc, #168]	; (8000c78 <SystemClock_Config+0xfc>)
 8000bce:	699b      	ldr	r3, [r3, #24]
 8000bd0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000bd4:	603b      	str	r3, [r7, #0]
 8000bd6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000bd8:	bf00      	nop
 8000bda:	4b27      	ldr	r3, [pc, #156]	; (8000c78 <SystemClock_Config+0xfc>)
 8000bdc:	699b      	ldr	r3, [r3, #24]
 8000bde:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000be2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000be6:	d1f8      	bne.n	8000bda <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000be8:	2303      	movs	r3, #3
 8000bea:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000bec:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000bf0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bf6:	2340      	movs	r3, #64	; 0x40
 8000bf8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bfa:	2302      	movs	r3, #2
 8000bfc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bfe:	2302      	movs	r3, #2
 8000c00:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 22;
 8000c02:	2316      	movs	r3, #22
 8000c04:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 169;
 8000c06:	23a9      	movs	r3, #169	; 0xa9
 8000c08:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000c0a:	2302      	movs	r3, #2
 8000c0c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000c0e:	2304      	movs	r3, #4
 8000c10:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c12:	2302      	movs	r3, #2
 8000c14:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_0;
 8000c16:	2300      	movs	r3, #0
 8000c18:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c26:	4618      	mov	r0, r3
 8000c28:	f003 fe1e 	bl	8004868 <HAL_RCC_OscConfig>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000c32:	f000 fc51 	bl	80014d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c36:	233f      	movs	r3, #63	; 0x3f
 8000c38:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000c42:	2300      	movs	r3, #0
 8000c44:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000c46:	2300      	movs	r3, #0
 8000c48:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000c52:	2300      	movs	r3, #0
 8000c54:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000c56:	1d3b      	adds	r3, r7, #4
 8000c58:	2101      	movs	r1, #1
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f004 fa5e 	bl	800511c <HAL_RCC_ClockConfig>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <SystemClock_Config+0xee>
  {
    Error_Handler();
 8000c66:	f000 fc37 	bl	80014d8 <Error_Handler>
  }
}
 8000c6a:	bf00      	nop
 8000c6c:	3770      	adds	r7, #112	; 0x70
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	58000400 	.word	0x58000400
 8000c78:	58024800 	.word	0x58024800

08000c7c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b088      	sub	sp, #32
 8000c80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c82:	1d3b      	adds	r3, r7, #4
 8000c84:	2200      	movs	r2, #0
 8000c86:	601a      	str	r2, [r3, #0]
 8000c88:	605a      	str	r2, [r3, #4]
 8000c8a:	609a      	str	r2, [r3, #8]
 8000c8c:	60da      	str	r2, [r3, #12]
 8000c8e:	611a      	str	r2, [r3, #16]
 8000c90:	615a      	str	r2, [r3, #20]
 8000c92:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000c94:	4b27      	ldr	r3, [pc, #156]	; (8000d34 <MX_ADC3_Init+0xb8>)
 8000c96:	4a28      	ldr	r2, [pc, #160]	; (8000d38 <MX_ADC3_Init+0xbc>)
 8000c98:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8000c9a:	4b26      	ldr	r3, [pc, #152]	; (8000d34 <MX_ADC3_Init+0xb8>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ca0:	4b24      	ldr	r3, [pc, #144]	; (8000d34 <MX_ADC3_Init+0xb8>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ca6:	4b23      	ldr	r3, [pc, #140]	; (8000d34 <MX_ADC3_Init+0xb8>)
 8000ca8:	2204      	movs	r2, #4
 8000caa:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000cac:	4b21      	ldr	r3, [pc, #132]	; (8000d34 <MX_ADC3_Init+0xb8>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000cb2:	4b20      	ldr	r3, [pc, #128]	; (8000d34 <MX_ADC3_Init+0xb8>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 8000cb8:	4b1e      	ldr	r3, [pc, #120]	; (8000d34 <MX_ADC3_Init+0xb8>)
 8000cba:	2201      	movs	r2, #1
 8000cbc:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000cbe:	4b1d      	ldr	r3, [pc, #116]	; (8000d34 <MX_ADC3_Init+0xb8>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000cc4:	4b1b      	ldr	r3, [pc, #108]	; (8000d34 <MX_ADC3_Init+0xb8>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000cca:	4b1a      	ldr	r3, [pc, #104]	; (8000d34 <MX_ADC3_Init+0xb8>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000cd0:	4b18      	ldr	r3, [pc, #96]	; (8000d34 <MX_ADC3_Init+0xb8>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000cd6:	4b17      	ldr	r3, [pc, #92]	; (8000d34 <MX_ADC3_Init+0xb8>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000cdc:	4b15      	ldr	r3, [pc, #84]	; (8000d34 <MX_ADC3_Init+0xb8>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000ce2:	4b14      	ldr	r3, [pc, #80]	; (8000d34 <MX_ADC3_Init+0xb8>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000cea:	4812      	ldr	r0, [pc, #72]	; (8000d34 <MX_ADC3_Init+0xb8>)
 8000cec:	f001 f928 	bl	8001f40 <HAL_ADC_Init>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <MX_ADC3_Init+0x7e>
  {
    Error_Handler();
 8000cf6:	f000 fbef 	bl	80014d8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000cfa:	4b10      	ldr	r3, [pc, #64]	; (8000d3c <MX_ADC3_Init+0xc0>)
 8000cfc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000cfe:	2306      	movs	r3, #6
 8000d00:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000d02:	2300      	movs	r3, #0
 8000d04:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8000d06:	4b0e      	ldr	r3, [pc, #56]	; (8000d40 <MX_ADC3_Init+0xc4>)
 8000d08:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d0a:	2304      	movs	r3, #4
 8000d0c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000d12:	2300      	movs	r3, #0
 8000d14:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000d16:	1d3b      	adds	r3, r7, #4
 8000d18:	4619      	mov	r1, r3
 8000d1a:	4806      	ldr	r0, [pc, #24]	; (8000d34 <MX_ADC3_Init+0xb8>)
 8000d1c:	f001 fab2 	bl	8002284 <HAL_ADC_ConfigChannel>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <MX_ADC3_Init+0xae>
  {
    Error_Handler();
 8000d26:	f000 fbd7 	bl	80014d8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000d2a:	bf00      	nop
 8000d2c:	3720      	adds	r7, #32
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	240002fc 	.word	0x240002fc
 8000d38:	58026000 	.word	0x58026000
 8000d3c:	04300002 	.word	0x04300002
 8000d40:	47ff0000 	.word	0x47ff0000

08000d44 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000d48:	4b12      	ldr	r3, [pc, #72]	; (8000d94 <MX_QUADSPI_Init+0x50>)
 8000d4a:	4a13      	ldr	r2, [pc, #76]	; (8000d98 <MX_QUADSPI_Init+0x54>)
 8000d4c:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8000d4e:	4b11      	ldr	r3, [pc, #68]	; (8000d94 <MX_QUADSPI_Init+0x50>)
 8000d50:	22ff      	movs	r2, #255	; 0xff
 8000d52:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000d54:	4b0f      	ldr	r3, [pc, #60]	; (8000d94 <MX_QUADSPI_Init+0x50>)
 8000d56:	2201      	movs	r2, #1
 8000d58:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000d5a:	4b0e      	ldr	r3, [pc, #56]	; (8000d94 <MX_QUADSPI_Init+0x50>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8000d60:	4b0c      	ldr	r3, [pc, #48]	; (8000d94 <MX_QUADSPI_Init+0x50>)
 8000d62:	2201      	movs	r2, #1
 8000d64:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000d66:	4b0b      	ldr	r3, [pc, #44]	; (8000d94 <MX_QUADSPI_Init+0x50>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000d6c:	4b09      	ldr	r3, [pc, #36]	; (8000d94 <MX_QUADSPI_Init+0x50>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000d72:	4b08      	ldr	r3, [pc, #32]	; (8000d94 <MX_QUADSPI_Init+0x50>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000d78:	4b06      	ldr	r3, [pc, #24]	; (8000d94 <MX_QUADSPI_Init+0x50>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000d7e:	4805      	ldr	r0, [pc, #20]	; (8000d94 <MX_QUADSPI_Init+0x50>)
 8000d80:	f003 fcb8 	bl	80046f4 <HAL_QSPI_Init>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8000d8a:	f000 fba5 	bl	80014d8 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000d8e:	bf00      	nop
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	24000360 	.word	0x24000360
 8000d98:	52005000 	.word	0x52005000

08000d9c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000da0:	4b0f      	ldr	r3, [pc, #60]	; (8000de0 <MX_TIM16_Init+0x44>)
 8000da2:	4a10      	ldr	r2, [pc, #64]	; (8000de4 <MX_TIM16_Init+0x48>)
 8000da4:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 64 - 1;
 8000da6:	4b0e      	ldr	r3, [pc, #56]	; (8000de0 <MX_TIM16_Init+0x44>)
 8000da8:	223f      	movs	r2, #63	; 0x3f
 8000daa:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dac:	4b0c      	ldr	r3, [pc, #48]	; (8000de0 <MX_TIM16_Init+0x44>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8000db2:	4b0b      	ldr	r3, [pc, #44]	; (8000de0 <MX_TIM16_Init+0x44>)
 8000db4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000db8:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dba:	4b09      	ldr	r3, [pc, #36]	; (8000de0 <MX_TIM16_Init+0x44>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000dc0:	4b07      	ldr	r3, [pc, #28]	; (8000de0 <MX_TIM16_Init+0x44>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dc6:	4b06      	ldr	r3, [pc, #24]	; (8000de0 <MX_TIM16_Init+0x44>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000dcc:	4804      	ldr	r0, [pc, #16]	; (8000de0 <MX_TIM16_Init+0x44>)
 8000dce:	f007 fa19 	bl	8008204 <HAL_TIM_Base_Init>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8000dd8:	f000 fb7e 	bl	80014d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000ddc:	bf00      	nop
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	240003ac 	.word	0x240003ac
 8000de4:	40014400 	.word	0x40014400

08000de8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b090      	sub	sp, #64	; 0x40
 8000dec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000df2:	2200      	movs	r2, #0
 8000df4:	601a      	str	r2, [r3, #0]
 8000df6:	605a      	str	r2, [r3, #4]
 8000df8:	609a      	str	r2, [r3, #8]
 8000dfa:	60da      	str	r2, [r3, #12]
 8000dfc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000dfe:	4bbd      	ldr	r3, [pc, #756]	; (80010f4 <MX_GPIO_Init+0x30c>)
 8000e00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e04:	4abb      	ldr	r2, [pc, #748]	; (80010f4 <MX_GPIO_Init+0x30c>)
 8000e06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e0a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e0e:	4bb9      	ldr	r3, [pc, #740]	; (80010f4 <MX_GPIO_Init+0x30c>)
 8000e10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e18:	62bb      	str	r3, [r7, #40]	; 0x28
 8000e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e1c:	4bb5      	ldr	r3, [pc, #724]	; (80010f4 <MX_GPIO_Init+0x30c>)
 8000e1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e22:	4ab4      	ldr	r2, [pc, #720]	; (80010f4 <MX_GPIO_Init+0x30c>)
 8000e24:	f043 0302 	orr.w	r3, r3, #2
 8000e28:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e2c:	4bb1      	ldr	r3, [pc, #708]	; (80010f4 <MX_GPIO_Init+0x30c>)
 8000e2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e32:	f003 0302 	and.w	r3, r3, #2
 8000e36:	627b      	str	r3, [r7, #36]	; 0x24
 8000e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000e3a:	4bae      	ldr	r3, [pc, #696]	; (80010f4 <MX_GPIO_Init+0x30c>)
 8000e3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e40:	4aac      	ldr	r2, [pc, #688]	; (80010f4 <MX_GPIO_Init+0x30c>)
 8000e42:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e46:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e4a:	4baa      	ldr	r3, [pc, #680]	; (80010f4 <MX_GPIO_Init+0x30c>)
 8000e4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e54:	623b      	str	r3, [r7, #32]
 8000e56:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e58:	4ba6      	ldr	r3, [pc, #664]	; (80010f4 <MX_GPIO_Init+0x30c>)
 8000e5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e5e:	4aa5      	ldr	r2, [pc, #660]	; (80010f4 <MX_GPIO_Init+0x30c>)
 8000e60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e64:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e68:	4ba2      	ldr	r3, [pc, #648]	; (80010f4 <MX_GPIO_Init+0x30c>)
 8000e6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e72:	61fb      	str	r3, [r7, #28]
 8000e74:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e76:	4b9f      	ldr	r3, [pc, #636]	; (80010f4 <MX_GPIO_Init+0x30c>)
 8000e78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e7c:	4a9d      	ldr	r2, [pc, #628]	; (80010f4 <MX_GPIO_Init+0x30c>)
 8000e7e:	f043 0304 	orr.w	r3, r3, #4
 8000e82:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e86:	4b9b      	ldr	r3, [pc, #620]	; (80010f4 <MX_GPIO_Init+0x30c>)
 8000e88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e8c:	f003 0304 	and.w	r3, r3, #4
 8000e90:	61bb      	str	r3, [r7, #24]
 8000e92:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e94:	4b97      	ldr	r3, [pc, #604]	; (80010f4 <MX_GPIO_Init+0x30c>)
 8000e96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e9a:	4a96      	ldr	r2, [pc, #600]	; (80010f4 <MX_GPIO_Init+0x30c>)
 8000e9c:	f043 0310 	orr.w	r3, r3, #16
 8000ea0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ea4:	4b93      	ldr	r3, [pc, #588]	; (80010f4 <MX_GPIO_Init+0x30c>)
 8000ea6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eaa:	f003 0310 	and.w	r3, r3, #16
 8000eae:	617b      	str	r3, [r7, #20]
 8000eb0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000eb2:	4b90      	ldr	r3, [pc, #576]	; (80010f4 <MX_GPIO_Init+0x30c>)
 8000eb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eb8:	4a8e      	ldr	r2, [pc, #568]	; (80010f4 <MX_GPIO_Init+0x30c>)
 8000eba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ebe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ec2:	4b8c      	ldr	r3, [pc, #560]	; (80010f4 <MX_GPIO_Init+0x30c>)
 8000ec4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ec8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ecc:	613b      	str	r3, [r7, #16]
 8000ece:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ed0:	4b88      	ldr	r3, [pc, #544]	; (80010f4 <MX_GPIO_Init+0x30c>)
 8000ed2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ed6:	4a87      	ldr	r2, [pc, #540]	; (80010f4 <MX_GPIO_Init+0x30c>)
 8000ed8:	f043 0308 	orr.w	r3, r3, #8
 8000edc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ee0:	4b84      	ldr	r3, [pc, #528]	; (80010f4 <MX_GPIO_Init+0x30c>)
 8000ee2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ee6:	f003 0308 	and.w	r3, r3, #8
 8000eea:	60fb      	str	r3, [r7, #12]
 8000eec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000eee:	4b81      	ldr	r3, [pc, #516]	; (80010f4 <MX_GPIO_Init+0x30c>)
 8000ef0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ef4:	4a7f      	ldr	r2, [pc, #508]	; (80010f4 <MX_GPIO_Init+0x30c>)
 8000ef6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000efa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000efe:	4b7d      	ldr	r3, [pc, #500]	; (80010f4 <MX_GPIO_Init+0x30c>)
 8000f00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f08:	60bb      	str	r3, [r7, #8]
 8000f0a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f0c:	4b79      	ldr	r3, [pc, #484]	; (80010f4 <MX_GPIO_Init+0x30c>)
 8000f0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f12:	4a78      	ldr	r2, [pc, #480]	; (80010f4 <MX_GPIO_Init+0x30c>)
 8000f14:	f043 0301 	orr.w	r3, r3, #1
 8000f18:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f1c:	4b75      	ldr	r3, [pc, #468]	; (80010f4 <MX_GPIO_Init+0x30c>)
 8000f1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f22:	f003 0301 	and.w	r3, r3, #1
 8000f26:	607b      	str	r3, [r7, #4]
 8000f28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f2a:	4b72      	ldr	r3, [pc, #456]	; (80010f4 <MX_GPIO_Init+0x30c>)
 8000f2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f30:	4a70      	ldr	r2, [pc, #448]	; (80010f4 <MX_GPIO_Init+0x30c>)
 8000f32:	f043 0320 	orr.w	r3, r3, #32
 8000f36:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f3a:	4b6e      	ldr	r3, [pc, #440]	; (80010f4 <MX_GPIO_Init+0x30c>)
 8000f3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f40:	f003 0320 	and.w	r3, r3, #32
 8000f44:	603b      	str	r3, [r7, #0]
 8000f46:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000f48:	2200      	movs	r2, #0
 8000f4a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f4e:	486a      	ldr	r0, [pc, #424]	; (80010f8 <MX_GPIO_Init+0x310>)
 8000f50:	f002 f8b4 	bl	80030bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8000f54:	2200      	movs	r2, #0
 8000f56:	2104      	movs	r1, #4
 8000f58:	4868      	ldr	r0, [pc, #416]	; (80010fc <MX_GPIO_Init+0x314>)
 8000f5a:	f002 f8af 	bl	80030bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 8000f5e:	2200      	movs	r2, #0
 8000f60:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f64:	4866      	ldr	r0, [pc, #408]	; (8001100 <MX_GPIO_Init+0x318>)
 8000f66:	f002 f8a9 	bl	80030bc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PI6 PI5 PI4 PI7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_7;
 8000f6a:	23f0      	movs	r3, #240	; 0xf0
 8000f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f6e:	2302      	movs	r3, #2
 8000f70:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f72:	2300      	movs	r3, #0
 8000f74:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f76:	2300      	movs	r3, #0
 8000f78:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000f7a:	230a      	movs	r3, #10
 8000f7c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000f7e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f82:	4619      	mov	r1, r3
 8000f84:	485c      	ldr	r0, [pc, #368]	; (80010f8 <MX_GPIO_Init+0x310>)
 8000f86:	f001 fee9 	bl	8002d5c <HAL_GPIO_Init>

  /*Configure GPIO pins : FDCAN2_RX_Pin FDCAN2_TX_Pin */
  GPIO_InitStruct.Pin = FDCAN2_RX_Pin|FDCAN2_TX_Pin;
 8000f8a:	f242 0320 	movw	r3, #8224	; 0x2020
 8000f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f90:	2302      	movs	r3, #2
 8000f92:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f94:	2300      	movs	r3, #0
 8000f96:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8000f9c:	2309      	movs	r3, #9
 8000f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fa0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	4856      	ldr	r0, [pc, #344]	; (8001100 <MX_GPIO_Init+0x318>)
 8000fa8:	f001 fed8 	bl	8002d5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PK5 PK4 PK6 PK3
                           PK7 PK2 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_3
 8000fac:	23fc      	movs	r3, #252	; 0xfc
 8000fae:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_7|GPIO_PIN_2;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb0:	2302      	movs	r3, #2
 8000fb2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000fbc:	230e      	movs	r3, #14
 8000fbe:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000fc0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	484f      	ldr	r0, [pc, #316]	; (8001104 <MX_GPIO_Init+0x31c>)
 8000fc8:	f001 fec8 	bl	8002d5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PG10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000fcc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000fde:	230a      	movs	r3, #10
 8000fe0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000fe2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	4847      	ldr	r0, [pc, #284]	; (8001108 <MX_GPIO_Init+0x320>)
 8000fea:	f001 feb7 	bl	8002d5c <HAL_GPIO_Init>

  /*Configure GPIO pins : SDIO1_D2_Pin SDIO1_D3_Pin SDIO1_CK_Pin SDIO1_D0_Pin
                           SDIO1_D1_Pin SDIO1_D7_Pin SDIO1_D6_Pin */
  GPIO_InitStruct.Pin = SDIO1_D2_Pin|SDIO1_D3_Pin|SDIO1_CK_Pin|SDIO1_D0_Pin
 8000fee:	f44f 53fe 	mov.w	r3, #8128	; 0x1fc0
 8000ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |SDIO1_D1_Pin|SDIO1_D7_Pin|SDIO1_D6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff4:	2302      	movs	r3, #2
 8000ff6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ffc:	2303      	movs	r3, #3
 8000ffe:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001000:	230c      	movs	r3, #12
 8001002:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001004:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001008:	4619      	mov	r1, r3
 800100a:	4840      	ldr	r0, [pc, #256]	; (800110c <MX_GPIO_Init+0x324>)
 800100c:	f001 fea6 	bl	8002d5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PI1 PI0 PI9 PI12
                           PI14 PI15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_9|GPIO_PIN_12
 8001010:	f24d 2303 	movw	r3, #53763	; 0xd203
 8001014:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001016:	2302      	movs	r3, #2
 8001018:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101a:	2300      	movs	r3, #0
 800101c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101e:	2300      	movs	r3, #0
 8001020:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001022:	230e      	movs	r3, #14
 8001024:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001026:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800102a:	4619      	mov	r1, r3
 800102c:	4832      	ldr	r0, [pc, #200]	; (80010f8 <MX_GPIO_Init+0x310>)
 800102e:	f001 fe95 	bl	8002d5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE1 PE0 PE10 PE9
                           PE11 PE12 PE15 PE8
                           PE13 PE7 PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 8001032:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001036:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_8
                          |GPIO_PIN_13|GPIO_PIN_7|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001038:	2302      	movs	r3, #2
 800103a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103c:	2300      	movs	r3, #0
 800103e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001040:	2303      	movs	r3, #3
 8001042:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001044:	230c      	movs	r3, #12
 8001046:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001048:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800104c:	4619      	mov	r1, r3
 800104e:	4830      	ldr	r0, [pc, #192]	; (8001110 <MX_GPIO_Init+0x328>)
 8001050:	f001 fe84 	bl	8002d5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001054:	2310      	movs	r3, #16
 8001056:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001058:	2302      	movs	r3, #2
 800105a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105c:	2300      	movs	r3, #0
 800105e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001060:	2300      	movs	r3, #0
 8001062:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8001064:	2307      	movs	r3, #7
 8001066:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001068:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800106c:	4619      	mov	r1, r3
 800106e:	4824      	ldr	r0, [pc, #144]	; (8001100 <MX_GPIO_Init+0x318>)
 8001070:	f001 fe74 	bl	8002d5c <HAL_GPIO_Init>

  /*Configure GPIO pins : MII_TX_EN_Pin MII_TXD1_Pin MII_TXD0_Pin */
  GPIO_InitStruct.Pin = MII_TX_EN_Pin|MII_TXD1_Pin|MII_TXD0_Pin;
 8001074:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001078:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800107a:	2302      	movs	r3, #2
 800107c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107e:	2300      	movs	r3, #0
 8001080:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001082:	2300      	movs	r3, #0
 8001084:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001086:	230b      	movs	r3, #11
 8001088:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800108a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800108e:	4619      	mov	r1, r3
 8001090:	481d      	ldr	r0, [pc, #116]	; (8001108 <MX_GPIO_Init+0x320>)
 8001092:	f001 fe63 	bl	8002d5c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DISP_Pin PJ14 PJ12 PJ13
                           PJ11 PJ10 PJ9 PJ0
                           PJ8 PJ7 PJ6 PJ1
                           PJ5 PJ3 PJ4 */
  GPIO_InitStruct.Pin = LCD_DISP_Pin|GPIO_PIN_14|GPIO_PIN_12|GPIO_PIN_13
 8001096:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 800109a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_0
                          |GPIO_PIN_8|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_1
                          |GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800109c:	2302      	movs	r3, #2
 800109e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a0:	2300      	movs	r3, #0
 80010a2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a4:	2300      	movs	r3, #0
 80010a6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80010a8:	230e      	movs	r3, #14
 80010aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80010ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010b0:	4619      	mov	r1, r3
 80010b2:	4812      	ldr	r0, [pc, #72]	; (80010fc <MX_GPIO_Init+0x314>)
 80010b4:	f001 fe52 	bl	8002d5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80010b8:	2308      	movs	r3, #8
 80010ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010bc:	2302      	movs	r3, #2
 80010be:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c0:	2300      	movs	r3, #0
 80010c2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c4:	2300      	movs	r3, #0
 80010c6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80010c8:	2305      	movs	r3, #5
 80010ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010d0:	4619      	mov	r1, r3
 80010d2:	4810      	ldr	r0, [pc, #64]	; (8001114 <MX_GPIO_Init+0x32c>)
 80010d4:	f001 fe42 	bl	8002d5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PI2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80010d8:	2304      	movs	r3, #4
 80010da:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010dc:	2302      	movs	r3, #2
 80010de:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e0:	2300      	movs	r3, #0
 80010e2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e4:	2300      	movs	r3, #0
 80010e6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80010e8:	2305      	movs	r3, #5
 80010ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80010ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010f0:	4619      	mov	r1, r3
 80010f2:	e011      	b.n	8001118 <MX_GPIO_Init+0x330>
 80010f4:	58024400 	.word	0x58024400
 80010f8:	58022000 	.word	0x58022000
 80010fc:	58022400 	.word	0x58022400
 8001100:	58020400 	.word	0x58020400
 8001104:	58022800 	.word	0x58022800
 8001108:	58021800 	.word	0x58021800
 800110c:	58020800 	.word	0x58020800
 8001110:	58021000 	.word	0x58021000
 8001114:	58020c00 	.word	0x58020c00
 8001118:	48bc      	ldr	r0, [pc, #752]	; (800140c <MX_GPIO_Init+0x624>)
 800111a:	f001 fe1f 	bl	8002d5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PH15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800111e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001122:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001124:	2302      	movs	r3, #2
 8001126:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001128:	2300      	movs	r3, #0
 800112a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800112c:	2300      	movs	r3, #0
 800112e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001130:	2303      	movs	r3, #3
 8001132:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001134:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001138:	4619      	mov	r1, r3
 800113a:	48b5      	ldr	r0, [pc, #724]	; (8001410 <MX_GPIO_Init+0x628>)
 800113c:	f001 fe0e 	bl	8002d5c <HAL_GPIO_Init>

  /*Configure GPIO pins : FDCAN1_RX_Pin FDCAN1_TX_Pin */
  GPIO_InitStruct.Pin = FDCAN1_RX_Pin|FDCAN1_TX_Pin;
 8001140:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001144:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001146:	2302      	movs	r3, #2
 8001148:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114a:	2300      	movs	r3, #0
 800114c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800114e:	2300      	movs	r3, #0
 8001150:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001152:	2309      	movs	r3, #9
 8001154:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001156:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800115a:	4619      	mov	r1, r3
 800115c:	48ac      	ldr	r0, [pc, #688]	; (8001410 <MX_GPIO_Init+0x628>)
 800115e:	f001 fdfd 	bl	8002d5c <HAL_GPIO_Init>

  /*Configure GPIO pin : MII_TXD3_Pin */
  GPIO_InitStruct.Pin = MII_TXD3_Pin;
 8001162:	2304      	movs	r3, #4
 8001164:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001166:	2302      	movs	r3, #2
 8001168:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116a:	2300      	movs	r3, #0
 800116c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800116e:	2300      	movs	r3, #0
 8001170:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001172:	230b      	movs	r3, #11
 8001174:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(MII_TXD3_GPIO_Port, &GPIO_InitStruct);
 8001176:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800117a:	4619      	mov	r1, r3
 800117c:	48a5      	ldr	r0, [pc, #660]	; (8001414 <MX_GPIO_Init+0x62c>)
 800117e:	f001 fded 	bl	8002d5c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DISPD7_Pin */
  GPIO_InitStruct.Pin = LCD_DISPD7_Pin;
 8001182:	2380      	movs	r3, #128	; 0x80
 8001184:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001186:	2300      	movs	r3, #0
 8001188:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118a:	2300      	movs	r3, #0
 800118c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_DISPD7_GPIO_Port, &GPIO_InitStruct);
 800118e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001192:	4619      	mov	r1, r3
 8001194:	48a0      	ldr	r0, [pc, #640]	; (8001418 <MX_GPIO_Init+0x630>)
 8001196:	f001 fde1 	bl	8002d5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE5 PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
 800119a:	2330      	movs	r3, #48	; 0x30
 800119c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800119e:	2302      	movs	r3, #2
 80011a0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a2:	2300      	movs	r3, #0
 80011a4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a6:	2300      	movs	r3, #0
 80011a8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI4;
 80011aa:	230a      	movs	r3, #10
 80011ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011b2:	4619      	mov	r1, r3
 80011b4:	4897      	ldr	r0, [pc, #604]	; (8001414 <MX_GPIO_Init+0x62c>)
 80011b6:	f001 fdd1 	bl	8002d5c <HAL_GPIO_Init>

  /*Configure GPIO pin : SDIO1_D5_Pin */
  GPIO_InitStruct.Pin = SDIO1_D5_Pin;
 80011ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011be:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c0:	2302      	movs	r3, #2
 80011c2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c4:	2300      	movs	r3, #0
 80011c6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011c8:	2303      	movs	r3, #3
 80011ca:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80011cc:	230c      	movs	r3, #12
 80011ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDIO1_D5_GPIO_Port, &GPIO_InitStruct);
 80011d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011d4:	4619      	mov	r1, r3
 80011d6:	4891      	ldr	r0, [pc, #580]	; (800141c <MX_GPIO_Init+0x634>)
 80011d8:	f001 fdc0 	bl	8002d5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG15 PG8 PG5 PG4
                           PG0 PG1 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 80011dc:	f248 1333 	movw	r3, #33075	; 0x8133
 80011e0:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e2:	2302      	movs	r3, #2
 80011e4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e6:	2300      	movs	r3, #0
 80011e8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ea:	2303      	movs	r3, #3
 80011ec:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80011ee:	230c      	movs	r3, #12
 80011f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011f6:	4619      	mov	r1, r3
 80011f8:	4889      	ldr	r0, [pc, #548]	; (8001420 <MX_GPIO_Init+0x638>)
 80011fa:	f001 fdaf 	bl	8002d5c <HAL_GPIO_Init>

  /*Configure GPIO pin : SDIO1_CMD_Pin */
  GPIO_InitStruct.Pin = SDIO1_CMD_Pin;
 80011fe:	2304      	movs	r3, #4
 8001200:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001202:	2302      	movs	r3, #2
 8001204:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001206:	2300      	movs	r3, #0
 8001208:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800120a:	2303      	movs	r3, #3
 800120c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800120e:	230c      	movs	r3, #12
 8001210:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDIO1_CMD_GPIO_Port, &GPIO_InitStruct);
 8001212:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001216:	4619      	mov	r1, r3
 8001218:	487f      	ldr	r0, [pc, #508]	; (8001418 <MX_GPIO_Init+0x630>)
 800121a:	f001 fd9f 	bl	8002d5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD15 PD14
                           PD10 PD9 PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 800121e:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001222:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001224:	2302      	movs	r3, #2
 8001226:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001228:	2300      	movs	r3, #0
 800122a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800122c:	2303      	movs	r3, #3
 800122e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001230:	230c      	movs	r3, #12
 8001232:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001234:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001238:	4619      	mov	r1, r3
 800123a:	4877      	ldr	r0, [pc, #476]	; (8001418 <MX_GPIO_Init+0x630>)
 800123c:	f001 fd8e 	bl	8002d5c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001240:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001244:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001246:	2300      	movs	r3, #0
 8001248:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124a:	2300      	movs	r3, #0
 800124c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800124e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001252:	4619      	mov	r1, r3
 8001254:	4873      	ldr	r0, [pc, #460]	; (8001424 <MX_GPIO_Init+0x63c>)
 8001256:	f001 fd81 	bl	8002d5c <HAL_GPIO_Init>

  /*Configure GPIO pin : MII_RX_ER_Pin */
  GPIO_InitStruct.Pin = MII_RX_ER_Pin;
 800125a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800125e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001260:	2302      	movs	r3, #2
 8001262:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001264:	2300      	movs	r3, #0
 8001266:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001268:	2300      	movs	r3, #0
 800126a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800126c:	230b      	movs	r3, #11
 800126e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(MII_RX_ER_GPIO_Port, &GPIO_InitStruct);
 8001270:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001274:	4619      	mov	r1, r3
 8001276:	4865      	ldr	r0, [pc, #404]	; (800140c <MX_GPIO_Init+0x624>)
 8001278:	f001 fd70 	bl	8002d5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF2 PF1 PF0 PF3
                           PF5 PF4 PF13 PF14
                           PF12 PF15 PF11 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 800127c:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001280:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001282:	2302      	movs	r3, #2
 8001284:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001286:	2300      	movs	r3, #0
 8001288:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800128a:	2303      	movs	r3, #3
 800128c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800128e:	230c      	movs	r3, #12
 8001290:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001292:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001296:	4619      	mov	r1, r3
 8001298:	4863      	ldr	r0, [pc, #396]	; (8001428 <MX_GPIO_Init+0x640>)
 800129a:	f001 fd5f 	bl	8002d5c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800129e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012a4:	2301      	movs	r3, #1
 80012a6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a8:	2300      	movs	r3, #0
 80012aa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ac:	2300      	movs	r3, #0
 80012ae:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80012b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012b4:	4619      	mov	r1, r3
 80012b6:	4855      	ldr	r0, [pc, #340]	; (800140c <MX_GPIO_Init+0x624>)
 80012b8:	f001 fd50 	bl	8002d5c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 80012bc:	2304      	movs	r3, #4
 80012be:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012c0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80012c4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c6:	2300      	movs	r3, #0
 80012c8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 80012ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012ce:	4619      	mov	r1, r3
 80012d0:	4853      	ldr	r0, [pc, #332]	; (8001420 <MX_GPIO_Init+0x638>)
 80012d2:	f001 fd43 	bl	8002d5c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 80012d6:	2301      	movs	r3, #1
 80012d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012da:	2300      	movs	r3, #0
 80012dc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012de:	2300      	movs	r3, #0
 80012e0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 80012e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012e6:	4619      	mov	r1, r3
 80012e8:	4850      	ldr	r0, [pc, #320]	; (800142c <MX_GPIO_Init+0x644>)
 80012ea:	f001 fd37 	bl	8002d5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80012ee:	2301      	movs	r3, #1
 80012f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012f2:	2303      	movs	r3, #3
 80012f4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f6:	2300      	movs	r3, #0
 80012f8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012fe:	4619      	mov	r1, r3
 8001300:	4848      	ldr	r0, [pc, #288]	; (8001424 <MX_GPIO_Init+0x63c>)
 8001302:	f001 fd2b 	bl	8002d5c <HAL_GPIO_Init>

  /*Configure GPIO pins : MII_MDC_Pin MII_TXD2_Pin MII_TX_CLK_Pin MII_RXD0_Pin
                           MII_RXD1_Pin */
  GPIO_InitStruct.Pin = MII_MDC_Pin|MII_TXD2_Pin|MII_TX_CLK_Pin|MII_RXD0_Pin
 8001306:	233e      	movs	r3, #62	; 0x3e
 8001308:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |MII_RXD1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800130a:	2302      	movs	r3, #2
 800130c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130e:	2300      	movs	r3, #0
 8001310:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001312:	2300      	movs	r3, #0
 8001314:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001316:	230b      	movs	r3, #11
 8001318:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800131a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800131e:	4619      	mov	r1, r3
 8001320:	4840      	ldr	r0, [pc, #256]	; (8001424 <MX_GPIO_Init+0x63c>)
 8001322:	f001 fd1b 	bl	8002d5c <HAL_GPIO_Init>

  /*Configure GPIO pins : MII_CRS_Pin MII_COL_Pin */
  GPIO_InitStruct.Pin = MII_CRS_Pin|MII_COL_Pin;
 8001326:	230c      	movs	r3, #12
 8001328:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800132a:	2302      	movs	r3, #2
 800132c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132e:	2300      	movs	r3, #0
 8001330:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001332:	2300      	movs	r3, #0
 8001334:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001336:	230b      	movs	r3, #11
 8001338:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800133a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800133e:	4619      	mov	r1, r3
 8001340:	4833      	ldr	r0, [pc, #204]	; (8001410 <MX_GPIO_Init+0x628>)
 8001342:	f001 fd0b 	bl	8002d5c <HAL_GPIO_Init>

  /*Configure GPIO pins : MII_MDIO_Pin MII_RX_CLK_Pin MII_RX_DV_Pin */
  GPIO_InitStruct.Pin = MII_MDIO_Pin|MII_RX_CLK_Pin|MII_RX_DV_Pin;
 8001346:	2386      	movs	r3, #134	; 0x86
 8001348:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134a:	2302      	movs	r3, #2
 800134c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134e:	2300      	movs	r3, #0
 8001350:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001352:	2300      	movs	r3, #0
 8001354:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001356:	230b      	movs	r3, #11
 8001358:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800135a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800135e:	4619      	mov	r1, r3
 8001360:	4833      	ldr	r0, [pc, #204]	; (8001430 <MX_GPIO_Init+0x648>)
 8001362:	f001 fcfb 	bl	8002d5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PH5 PH6 PH7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001366:	23e0      	movs	r3, #224	; 0xe0
 8001368:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800136a:	2302      	movs	r3, #2
 800136c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136e:	2300      	movs	r3, #0
 8001370:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001372:	2303      	movs	r3, #3
 8001374:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001376:	230c      	movs	r3, #12
 8001378:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800137a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800137e:	4619      	mov	r1, r3
 8001380:	4823      	ldr	r0, [pc, #140]	; (8001410 <MX_GPIO_Init+0x628>)
 8001382:	f001 fceb 	bl	8002d5c <HAL_GPIO_Init>

  /*Configure GPIO pins : VCP_TX_Pin VCP_RX_Pin */
  GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8001386:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800138a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800138c:	2302      	movs	r3, #2
 800138e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001390:	2300      	movs	r3, #0
 8001392:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001394:	2300      	movs	r3, #0
 8001396:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001398:	2307      	movs	r3, #7
 800139a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800139c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013a0:	4619      	mov	r1, r3
 80013a2:	481e      	ldr	r0, [pc, #120]	; (800141c <MX_GPIO_Init+0x634>)
 80013a4:	f001 fcda 	bl	8002d5c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS2_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS2_OverCurrent_Pin;
 80013a8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80013ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013ae:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80013b2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b4:	2300      	movs	r3, #0
 80013b6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS2_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80013b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013bc:	4619      	mov	r1, r3
 80013be:	4814      	ldr	r0, [pc, #80]	; (8001410 <MX_GPIO_Init+0x628>)
 80013c0:	f001 fccc 	bl	8002d5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80013c4:	2340      	movs	r3, #64	; 0x40
 80013c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c8:	2302      	movs	r3, #2
 80013ca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013cc:	2300      	movs	r3, #0
 80013ce:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d0:	2300      	movs	r3, #0
 80013d2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 80013d4:	2309      	movs	r3, #9
 80013d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013dc:	4619      	mov	r1, r3
 80013de:	4814      	ldr	r0, [pc, #80]	; (8001430 <MX_GPIO_Init+0x648>)
 80013e0:	f001 fcbc 	bl	8002d5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PH9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80013e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ea:	2302      	movs	r3, #2
 80013ec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ee:	2300      	movs	r3, #0
 80013f0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f2:	2300      	movs	r3, #0
 80013f4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80013f6:	230e      	movs	r3, #14
 80013f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80013fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013fe:	4619      	mov	r1, r3
 8001400:	4803      	ldr	r0, [pc, #12]	; (8001410 <MX_GPIO_Init+0x628>)
 8001402:	f001 fcab 	bl	8002d5c <HAL_GPIO_Init>

  /*Configure GPIO pins : MII_RX_D3_Pin MII_RX_D2_Pin */
  GPIO_InitStruct.Pin = MII_RX_D3_Pin|MII_RX_D2_Pin;
 8001406:	2303      	movs	r3, #3
 8001408:	e014      	b.n	8001434 <MX_GPIO_Init+0x64c>
 800140a:	bf00      	nop
 800140c:	58022000 	.word	0x58022000
 8001410:	58021c00 	.word	0x58021c00
 8001414:	58021000 	.word	0x58021000
 8001418:	58020c00 	.word	0x58020c00
 800141c:	58020400 	.word	0x58020400
 8001420:	58021800 	.word	0x58021800
 8001424:	58020800 	.word	0x58020800
 8001428:	58021400 	.word	0x58021400
 800142c:	58022800 	.word	0x58022800
 8001430:	58020000 	.word	0x58020000
 8001434:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001436:	2302      	movs	r3, #2
 8001438:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143a:	2300      	movs	r3, #0
 800143c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800143e:	2300      	movs	r3, #0
 8001440:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001442:	230b      	movs	r3, #11
 8001444:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001446:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800144a:	4619      	mov	r1, r3
 800144c:	4820      	ldr	r0, [pc, #128]	; (80014d0 <MX_GPIO_Init+0x6e8>)
 800144e:	f001 fc85 	bl	8002d5c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8001452:	2304      	movs	r3, #4
 8001454:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001456:	2301      	movs	r3, #1
 8001458:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145a:	2300      	movs	r3, #0
 800145c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800145e:	2300      	movs	r3, #0
 8001460:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8001462:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001466:	4619      	mov	r1, r3
 8001468:	481a      	ldr	r0, [pc, #104]	; (80014d4 <MX_GPIO_Init+0x6ec>)
 800146a:	f001 fc77 	bl	8002d5c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin;
 800146e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001472:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001474:	2301      	movs	r3, #1
 8001476:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001478:	2300      	movs	r3, #0
 800147a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800147c:	2300      	movs	r3, #0
 800147e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_RST_GPIO_Port, &GPIO_InitStruct);
 8001480:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001484:	4619      	mov	r1, r3
 8001486:	4812      	ldr	r0, [pc, #72]	; (80014d0 <MX_GPIO_Init+0x6e8>)
 8001488:	f001 fc68 	bl	8002d5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800148c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001490:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001492:	2302      	movs	r3, #2
 8001494:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001496:	2300      	movs	r3, #0
 8001498:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800149a:	2300      	movs	r3, #0
 800149c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800149e:	2305      	movs	r3, #5
 80014a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014a6:	4619      	mov	r1, r3
 80014a8:	4809      	ldr	r0, [pc, #36]	; (80014d0 <MX_GPIO_Init+0x6e8>)
 80014aa:	f001 fc57 	bl	8002d5c <HAL_GPIO_Init>

  /*AnalogSwitch Config */
  HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 80014ae:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 80014b2:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 80014b6:	f000 fba1 	bl	8001bfc <HAL_SYSCFG_AnalogSwitchConfig>

  /*AnalogSwitch Config */
  HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 80014ba:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80014be:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 80014c2:	f000 fb9b 	bl	8001bfc <HAL_SYSCFG_AnalogSwitchConfig>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014c6:	bf00      	nop
 80014c8:	3740      	adds	r7, #64	; 0x40
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	58020400 	.word	0x58020400
 80014d4:	58022400 	.word	0x58022400

080014d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014dc:	b672      	cpsid	i
}
 80014de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014e0:	e7fe      	b.n	80014e0 <Error_Handler+0x8>
	...

080014e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ea:	4b0a      	ldr	r3, [pc, #40]	; (8001514 <HAL_MspInit+0x30>)
 80014ec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80014f0:	4a08      	ldr	r2, [pc, #32]	; (8001514 <HAL_MspInit+0x30>)
 80014f2:	f043 0302 	orr.w	r3, r3, #2
 80014f6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80014fa:	4b06      	ldr	r3, [pc, #24]	; (8001514 <HAL_MspInit+0x30>)
 80014fc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001500:	f003 0302 	and.w	r3, r3, #2
 8001504:	607b      	str	r3, [r7, #4]
 8001506:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001508:	bf00      	nop
 800150a:	370c      	adds	r7, #12
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr
 8001514:	58024400 	.word	0x58024400

08001518 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b0ba      	sub	sp, #232	; 0xe8
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001520:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001524:	2200      	movs	r2, #0
 8001526:	601a      	str	r2, [r3, #0]
 8001528:	605a      	str	r2, [r3, #4]
 800152a:	609a      	str	r2, [r3, #8]
 800152c:	60da      	str	r2, [r3, #12]
 800152e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001530:	f107 0310 	add.w	r3, r7, #16
 8001534:	22c0      	movs	r2, #192	; 0xc0
 8001536:	2100      	movs	r1, #0
 8001538:	4618      	mov	r0, r3
 800153a:	f00b f84d 	bl	800c5d8 <memset>
  if(hadc->Instance==ADC3)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a31      	ldr	r2, [pc, #196]	; (8001608 <HAL_ADC_MspInit+0xf0>)
 8001544:	4293      	cmp	r3, r2
 8001546:	d15b      	bne.n	8001600 <HAL_ADC_MspInit+0xe8>

  /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001548:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800154c:	f04f 0300 	mov.w	r3, #0
 8001550:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 2;
 8001554:	2302      	movs	r3, #2
 8001556:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 12;
 8001558:	230c      	movs	r3, #12
 800155a:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 4;
 800155c:	2304      	movs	r3, #4
 800155e:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001560:	2302      	movs	r3, #2
 8001562:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001564:	2302      	movs	r3, #2
 8001566:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001568:	23c0      	movs	r3, #192	; 0xc0
 800156a:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 800156c:	2320      	movs	r3, #32
 800156e:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001570:	2300      	movs	r3, #0
 8001572:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001574:	2300      	movs	r3, #0
 8001576:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800157a:	f107 0310 	add.w	r3, r7, #16
 800157e:	4618      	mov	r0, r3
 8001580:	f004 f942 	bl	8005808 <HAL_RCCEx_PeriphCLKConfig>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <HAL_ADC_MspInit+0x76>
    {
      Error_Handler();
 800158a:	f7ff ffa5 	bl	80014d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 800158e:	4b1f      	ldr	r3, [pc, #124]	; (800160c <HAL_ADC_MspInit+0xf4>)
 8001590:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001594:	4a1d      	ldr	r2, [pc, #116]	; (800160c <HAL_ADC_MspInit+0xf4>)
 8001596:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800159a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800159e:	4b1b      	ldr	r3, [pc, #108]	; (800160c <HAL_ADC_MspInit+0xf4>)
 80015a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80015a8:	60fb      	str	r3, [r7, #12]
 80015aa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015ac:	4b17      	ldr	r3, [pc, #92]	; (800160c <HAL_ADC_MspInit+0xf4>)
 80015ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015b2:	4a16      	ldr	r2, [pc, #88]	; (800160c <HAL_ADC_MspInit+0xf4>)
 80015b4:	f043 0304 	orr.w	r3, r3, #4
 80015b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015bc:	4b13      	ldr	r3, [pc, #76]	; (800160c <HAL_ADC_MspInit+0xf4>)
 80015be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015c2:	f003 0304 	and.w	r3, r3, #4
 80015c6:	60bb      	str	r3, [r7, #8]
 80015c8:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> ADC3_INP10
    PC2_C     ------> ADC3_INP0
    PC2_C     ------> ADC3_INN1
    PC3_C     ------> ADC3_INP1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80015ca:	2301      	movs	r3, #1
 80015cc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015d0:	2303      	movs	r3, #3
 80015d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d6:	2300      	movs	r3, #0
 80015d8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015dc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80015e0:	4619      	mov	r1, r3
 80015e2:	480b      	ldr	r0, [pc, #44]	; (8001610 <HAL_ADC_MspInit+0xf8>)
 80015e4:	f001 fbba 	bl	8002d5c <HAL_GPIO_Init>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 80015e8:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 80015ec:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80015f0:	f000 fb04 	bl	8001bfc <HAL_SYSCFG_AnalogSwitchConfig>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 80015f4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 80015f8:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 80015fc:	f000 fafe 	bl	8001bfc <HAL_SYSCFG_AnalogSwitchConfig>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001600:	bf00      	nop
 8001602:	37e8      	adds	r7, #232	; 0xe8
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	58026000 	.word	0x58026000
 800160c:	58024400 	.word	0x58024400
 8001610:	58020800 	.word	0x58020800

08001614 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b0bc      	sub	sp, #240	; 0xf0
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800161c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001620:	2200      	movs	r2, #0
 8001622:	601a      	str	r2, [r3, #0]
 8001624:	605a      	str	r2, [r3, #4]
 8001626:	609a      	str	r2, [r3, #8]
 8001628:	60da      	str	r2, [r3, #12]
 800162a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800162c:	f107 0318 	add.w	r3, r7, #24
 8001630:	22c0      	movs	r2, #192	; 0xc0
 8001632:	2100      	movs	r1, #0
 8001634:	4618      	mov	r0, r3
 8001636:	f00a ffcf 	bl	800c5d8 <memset>
  if(hqspi->Instance==QUADSPI)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a56      	ldr	r2, [pc, #344]	; (8001798 <HAL_QSPI_MspInit+0x184>)
 8001640:	4293      	cmp	r3, r2
 8001642:	f040 80a5 	bne.w	8001790 <HAL_QSPI_MspInit+0x17c>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 8001646:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800164a:	f04f 0300 	mov.w	r3, #0
 800164e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 8001652:	2300      	movs	r3, #0
 8001654:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001656:	f107 0318 	add.w	r3, r7, #24
 800165a:	4618      	mov	r0, r3
 800165c:	f004 f8d4 	bl	8005808 <HAL_RCCEx_PeriphCLKConfig>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <HAL_QSPI_MspInit+0x56>
    {
      Error_Handler();
 8001666:	f7ff ff37 	bl	80014d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800166a:	4b4c      	ldr	r3, [pc, #304]	; (800179c <HAL_QSPI_MspInit+0x188>)
 800166c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001670:	4a4a      	ldr	r2, [pc, #296]	; (800179c <HAL_QSPI_MspInit+0x188>)
 8001672:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001676:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800167a:	4b48      	ldr	r3, [pc, #288]	; (800179c <HAL_QSPI_MspInit+0x188>)
 800167c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001680:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001684:	617b      	str	r3, [r7, #20]
 8001686:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001688:	4b44      	ldr	r3, [pc, #272]	; (800179c <HAL_QSPI_MspInit+0x188>)
 800168a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800168e:	4a43      	ldr	r2, [pc, #268]	; (800179c <HAL_QSPI_MspInit+0x188>)
 8001690:	f043 0302 	orr.w	r3, r3, #2
 8001694:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001698:	4b40      	ldr	r3, [pc, #256]	; (800179c <HAL_QSPI_MspInit+0x188>)
 800169a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800169e:	f003 0302 	and.w	r3, r3, #2
 80016a2:	613b      	str	r3, [r7, #16]
 80016a4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80016a6:	4b3d      	ldr	r3, [pc, #244]	; (800179c <HAL_QSPI_MspInit+0x188>)
 80016a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016ac:	4a3b      	ldr	r2, [pc, #236]	; (800179c <HAL_QSPI_MspInit+0x188>)
 80016ae:	f043 0320 	orr.w	r3, r3, #32
 80016b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016b6:	4b39      	ldr	r3, [pc, #228]	; (800179c <HAL_QSPI_MspInit+0x188>)
 80016b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016bc:	f003 0320 	and.w	r3, r3, #32
 80016c0:	60fb      	str	r3, [r7, #12]
 80016c2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016c4:	4b35      	ldr	r3, [pc, #212]	; (800179c <HAL_QSPI_MspInit+0x188>)
 80016c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016ca:	4a34      	ldr	r2, [pc, #208]	; (800179c <HAL_QSPI_MspInit+0x188>)
 80016cc:	f043 0308 	orr.w	r3, r3, #8
 80016d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016d4:	4b31      	ldr	r3, [pc, #196]	; (800179c <HAL_QSPI_MspInit+0x188>)
 80016d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016da:	f003 0308 	and.w	r3, r3, #8
 80016de:	60bb      	str	r3, [r7, #8]
 80016e0:	68bb      	ldr	r3, [r7, #8]
    PF7     ------> QUADSPI_BK1_IO2
    PF10     ------> QUADSPI_CLK
    PF9     ------> QUADSPI_BK1_IO1
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80016e2:	2340      	movs	r3, #64	; 0x40
 80016e4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e8:	2302      	movs	r3, #2
 80016ea:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ee:	2300      	movs	r3, #0
 80016f0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f4:	2300      	movs	r3, #0
 80016f6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80016fa:	230a      	movs	r3, #10
 80016fc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001700:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001704:	4619      	mov	r1, r3
 8001706:	4826      	ldr	r0, [pc, #152]	; (80017a0 <HAL_QSPI_MspInit+0x18c>)
 8001708:	f001 fb28 	bl	8002d5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
 800170c:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8001710:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001714:	2302      	movs	r3, #2
 8001716:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171a:	2300      	movs	r3, #0
 800171c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001720:	2300      	movs	r3, #0
 8001722:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001726:	2309      	movs	r3, #9
 8001728:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800172c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001730:	4619      	mov	r1, r3
 8001732:	481c      	ldr	r0, [pc, #112]	; (80017a4 <HAL_QSPI_MspInit+0x190>)
 8001734:	f001 fb12 	bl	8002d5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001738:	f44f 7300 	mov.w	r3, #512	; 0x200
 800173c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001740:	2302      	movs	r3, #2
 8001742:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001746:	2300      	movs	r3, #0
 8001748:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800174c:	2300      	movs	r3, #0
 800174e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001752:	230a      	movs	r3, #10
 8001754:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001758:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800175c:	4619      	mov	r1, r3
 800175e:	4811      	ldr	r0, [pc, #68]	; (80017a4 <HAL_QSPI_MspInit+0x190>)
 8001760:	f001 fafc 	bl	8002d5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001764:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001768:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800176c:	2302      	movs	r3, #2
 800176e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001772:	2300      	movs	r3, #0
 8001774:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001778:	2300      	movs	r3, #0
 800177a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800177e:	2309      	movs	r3, #9
 8001780:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001784:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001788:	4619      	mov	r1, r3
 800178a:	4807      	ldr	r0, [pc, #28]	; (80017a8 <HAL_QSPI_MspInit+0x194>)
 800178c:	f001 fae6 	bl	8002d5c <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001790:	bf00      	nop
 8001792:	37f0      	adds	r7, #240	; 0xf0
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	52005000 	.word	0x52005000
 800179c:	58024400 	.word	0x58024400
 80017a0:	58020400 	.word	0x58020400
 80017a4:	58021400 	.word	0x58021400
 80017a8:	58020c00 	.word	0x58020c00

080017ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b08a      	sub	sp, #40	; 0x28
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b4:	f107 0314 	add.w	r3, r7, #20
 80017b8:	2200      	movs	r2, #0
 80017ba:	601a      	str	r2, [r3, #0]
 80017bc:	605a      	str	r2, [r3, #4]
 80017be:	609a      	str	r2, [r3, #8]
 80017c0:	60da      	str	r2, [r3, #12]
 80017c2:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM16)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a1a      	ldr	r2, [pc, #104]	; (8001834 <HAL_TIM_Base_MspInit+0x88>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d12e      	bne.n	800182c <HAL_TIM_Base_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 80017ce:	4b1a      	ldr	r3, [pc, #104]	; (8001838 <HAL_TIM_Base_MspInit+0x8c>)
 80017d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80017d4:	4a18      	ldr	r2, [pc, #96]	; (8001838 <HAL_TIM_Base_MspInit+0x8c>)
 80017d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017da:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80017de:	4b16      	ldr	r3, [pc, #88]	; (8001838 <HAL_TIM_Base_MspInit+0x8c>)
 80017e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80017e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017e8:	613b      	str	r3, [r7, #16]
 80017ea:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ec:	4b12      	ldr	r3, [pc, #72]	; (8001838 <HAL_TIM_Base_MspInit+0x8c>)
 80017ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017f2:	4a11      	ldr	r2, [pc, #68]	; (8001838 <HAL_TIM_Base_MspInit+0x8c>)
 80017f4:	f043 0302 	orr.w	r3, r3, #2
 80017f8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017fc:	4b0e      	ldr	r3, [pc, #56]	; (8001838 <HAL_TIM_Base_MspInit+0x8c>)
 80017fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001802:	f003 0302 	and.w	r3, r3, #2
 8001806:	60fb      	str	r3, [r7, #12]
 8001808:	68fb      	ldr	r3, [r7, #12]
    /**TIM16 GPIO Configuration
    PB8     ------> TIM16_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800180a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800180e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001810:	2302      	movs	r3, #2
 8001812:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001814:	2300      	movs	r3, #0
 8001816:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001818:	2300      	movs	r3, #0
 800181a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 800181c:	2301      	movs	r3, #1
 800181e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001820:	f107 0314 	add.w	r3, r7, #20
 8001824:	4619      	mov	r1, r3
 8001826:	4805      	ldr	r0, [pc, #20]	; (800183c <HAL_TIM_Base_MspInit+0x90>)
 8001828:	f001 fa98 	bl	8002d5c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 800182c:	bf00      	nop
 800182e:	3728      	adds	r7, #40	; 0x28
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	40014400 	.word	0x40014400
 8001838:	58024400 	.word	0x58024400
 800183c:	58020400 	.word	0x58020400

08001840 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001844:	e7fe      	b.n	8001844 <NMI_Handler+0x4>

08001846 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001846:	b480      	push	{r7}
 8001848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800184a:	e7fe      	b.n	800184a <HardFault_Handler+0x4>

0800184c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001850:	e7fe      	b.n	8001850 <MemManage_Handler+0x4>

08001852 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001852:	b480      	push	{r7}
 8001854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001856:	e7fe      	b.n	8001856 <BusFault_Handler+0x4>

08001858 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800185c:	e7fe      	b.n	800185c <UsageFault_Handler+0x4>

0800185e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800185e:	b480      	push	{r7}
 8001860:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001862:	bf00      	nop
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr

0800186c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001870:	bf00      	nop
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr

0800187a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800187a:	b480      	push	{r7}
 800187c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800187e:	bf00      	nop
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr

08001888 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800188c:	f000 f966 	bl	8001b5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001890:	bf00      	nop
 8001892:	bd80      	pop	{r7, pc}

08001894 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001898:	4802      	ldr	r0, [pc, #8]	; (80018a4 <OTG_FS_IRQHandler+0x10>)
 800189a:	f001 fd81 	bl	80033a0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800189e:	bf00      	nop
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	240018e0 	.word	0x240018e0

080018a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b086      	sub	sp, #24
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018b0:	4a14      	ldr	r2, [pc, #80]	; (8001904 <_sbrk+0x5c>)
 80018b2:	4b15      	ldr	r3, [pc, #84]	; (8001908 <_sbrk+0x60>)
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018bc:	4b13      	ldr	r3, [pc, #76]	; (800190c <_sbrk+0x64>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d102      	bne.n	80018ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018c4:	4b11      	ldr	r3, [pc, #68]	; (800190c <_sbrk+0x64>)
 80018c6:	4a12      	ldr	r2, [pc, #72]	; (8001910 <_sbrk+0x68>)
 80018c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018ca:	4b10      	ldr	r3, [pc, #64]	; (800190c <_sbrk+0x64>)
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	4413      	add	r3, r2
 80018d2:	693a      	ldr	r2, [r7, #16]
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d207      	bcs.n	80018e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018d8:	f00a fe54 	bl	800c584 <__errno>
 80018dc:	4603      	mov	r3, r0
 80018de:	220c      	movs	r2, #12
 80018e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018e2:	f04f 33ff 	mov.w	r3, #4294967295
 80018e6:	e009      	b.n	80018fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018e8:	4b08      	ldr	r3, [pc, #32]	; (800190c <_sbrk+0x64>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018ee:	4b07      	ldr	r3, [pc, #28]	; (800190c <_sbrk+0x64>)
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	4413      	add	r3, r2
 80018f6:	4a05      	ldr	r2, [pc, #20]	; (800190c <_sbrk+0x64>)
 80018f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018fa:	68fb      	ldr	r3, [r7, #12]
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	3718      	adds	r7, #24
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	24080000 	.word	0x24080000
 8001908:	00000400 	.word	0x00000400
 800190c:	240003f8 	.word	0x240003f8
 8001910:	24002020 	.word	0x24002020

08001914 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001918:	4b37      	ldr	r3, [pc, #220]	; (80019f8 <SystemInit+0xe4>)
 800191a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800191e:	4a36      	ldr	r2, [pc, #216]	; (80019f8 <SystemInit+0xe4>)
 8001920:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001924:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001928:	4b34      	ldr	r3, [pc, #208]	; (80019fc <SystemInit+0xe8>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 030f 	and.w	r3, r3, #15
 8001930:	2b06      	cmp	r3, #6
 8001932:	d807      	bhi.n	8001944 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001934:	4b31      	ldr	r3, [pc, #196]	; (80019fc <SystemInit+0xe8>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f023 030f 	bic.w	r3, r3, #15
 800193c:	4a2f      	ldr	r2, [pc, #188]	; (80019fc <SystemInit+0xe8>)
 800193e:	f043 0307 	orr.w	r3, r3, #7
 8001942:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001944:	4b2e      	ldr	r3, [pc, #184]	; (8001a00 <SystemInit+0xec>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a2d      	ldr	r2, [pc, #180]	; (8001a00 <SystemInit+0xec>)
 800194a:	f043 0301 	orr.w	r3, r3, #1
 800194e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001950:	4b2b      	ldr	r3, [pc, #172]	; (8001a00 <SystemInit+0xec>)
 8001952:	2200      	movs	r2, #0
 8001954:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001956:	4b2a      	ldr	r3, [pc, #168]	; (8001a00 <SystemInit+0xec>)
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	4929      	ldr	r1, [pc, #164]	; (8001a00 <SystemInit+0xec>)
 800195c:	4b29      	ldr	r3, [pc, #164]	; (8001a04 <SystemInit+0xf0>)
 800195e:	4013      	ands	r3, r2
 8001960:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001962:	4b26      	ldr	r3, [pc, #152]	; (80019fc <SystemInit+0xe8>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f003 0308 	and.w	r3, r3, #8
 800196a:	2b00      	cmp	r3, #0
 800196c:	d007      	beq.n	800197e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800196e:	4b23      	ldr	r3, [pc, #140]	; (80019fc <SystemInit+0xe8>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f023 030f 	bic.w	r3, r3, #15
 8001976:	4a21      	ldr	r2, [pc, #132]	; (80019fc <SystemInit+0xe8>)
 8001978:	f043 0307 	orr.w	r3, r3, #7
 800197c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800197e:	4b20      	ldr	r3, [pc, #128]	; (8001a00 <SystemInit+0xec>)
 8001980:	2200      	movs	r2, #0
 8001982:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001984:	4b1e      	ldr	r3, [pc, #120]	; (8001a00 <SystemInit+0xec>)
 8001986:	2200      	movs	r2, #0
 8001988:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800198a:	4b1d      	ldr	r3, [pc, #116]	; (8001a00 <SystemInit+0xec>)
 800198c:	2200      	movs	r2, #0
 800198e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001990:	4b1b      	ldr	r3, [pc, #108]	; (8001a00 <SystemInit+0xec>)
 8001992:	4a1d      	ldr	r2, [pc, #116]	; (8001a08 <SystemInit+0xf4>)
 8001994:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001996:	4b1a      	ldr	r3, [pc, #104]	; (8001a00 <SystemInit+0xec>)
 8001998:	4a1c      	ldr	r2, [pc, #112]	; (8001a0c <SystemInit+0xf8>)
 800199a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800199c:	4b18      	ldr	r3, [pc, #96]	; (8001a00 <SystemInit+0xec>)
 800199e:	4a1c      	ldr	r2, [pc, #112]	; (8001a10 <SystemInit+0xfc>)
 80019a0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80019a2:	4b17      	ldr	r3, [pc, #92]	; (8001a00 <SystemInit+0xec>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80019a8:	4b15      	ldr	r3, [pc, #84]	; (8001a00 <SystemInit+0xec>)
 80019aa:	4a19      	ldr	r2, [pc, #100]	; (8001a10 <SystemInit+0xfc>)
 80019ac:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80019ae:	4b14      	ldr	r3, [pc, #80]	; (8001a00 <SystemInit+0xec>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80019b4:	4b12      	ldr	r3, [pc, #72]	; (8001a00 <SystemInit+0xec>)
 80019b6:	4a16      	ldr	r2, [pc, #88]	; (8001a10 <SystemInit+0xfc>)
 80019b8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80019ba:	4b11      	ldr	r3, [pc, #68]	; (8001a00 <SystemInit+0xec>)
 80019bc:	2200      	movs	r2, #0
 80019be:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80019c0:	4b0f      	ldr	r3, [pc, #60]	; (8001a00 <SystemInit+0xec>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a0e      	ldr	r2, [pc, #56]	; (8001a00 <SystemInit+0xec>)
 80019c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019ca:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80019cc:	4b0c      	ldr	r3, [pc, #48]	; (8001a00 <SystemInit+0xec>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80019d2:	4b10      	ldr	r3, [pc, #64]	; (8001a14 <SystemInit+0x100>)
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	4b10      	ldr	r3, [pc, #64]	; (8001a18 <SystemInit+0x104>)
 80019d8:	4013      	ands	r3, r2
 80019da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80019de:	d202      	bcs.n	80019e6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80019e0:	4b0e      	ldr	r3, [pc, #56]	; (8001a1c <SystemInit+0x108>)
 80019e2:	2201      	movs	r2, #1
 80019e4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80019e6:	4b0e      	ldr	r3, [pc, #56]	; (8001a20 <SystemInit+0x10c>)
 80019e8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80019ec:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80019ee:	bf00      	nop
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr
 80019f8:	e000ed00 	.word	0xe000ed00
 80019fc:	52002000 	.word	0x52002000
 8001a00:	58024400 	.word	0x58024400
 8001a04:	eaf6ed7f 	.word	0xeaf6ed7f
 8001a08:	02020200 	.word	0x02020200
 8001a0c:	01ff0000 	.word	0x01ff0000
 8001a10:	01010280 	.word	0x01010280
 8001a14:	5c001000 	.word	0x5c001000
 8001a18:	ffff0000 	.word	0xffff0000
 8001a1c:	51008108 	.word	0x51008108
 8001a20:	52004000 	.word	0x52004000

08001a24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001a24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a5c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001a28:	f7ff ff74 	bl	8001914 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a2c:	480c      	ldr	r0, [pc, #48]	; (8001a60 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a2e:	490d      	ldr	r1, [pc, #52]	; (8001a64 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a30:	4a0d      	ldr	r2, [pc, #52]	; (8001a68 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a34:	e002      	b.n	8001a3c <LoopCopyDataInit>

08001a36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a3a:	3304      	adds	r3, #4

08001a3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a40:	d3f9      	bcc.n	8001a36 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a42:	4a0a      	ldr	r2, [pc, #40]	; (8001a6c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a44:	4c0a      	ldr	r4, [pc, #40]	; (8001a70 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a48:	e001      	b.n	8001a4e <LoopFillZerobss>

08001a4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a4c:	3204      	adds	r2, #4

08001a4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a50:	d3fb      	bcc.n	8001a4a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a52:	f00a fd9d 	bl	800c590 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a56:	f7fe ffdb 	bl	8000a10 <main>
  bx  lr
 8001a5a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a5c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001a60:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001a64:	24000180 	.word	0x24000180
  ldr r2, =_sidata
 8001a68:	0800dbd8 	.word	0x0800dbd8
  ldr r2, =_sbss
 8001a6c:	24000180 	.word	0x24000180
  ldr r4, =_ebss
 8001a70:	2400201c 	.word	0x2400201c

08001a74 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a74:	e7fe      	b.n	8001a74 <ADC3_IRQHandler>
	...

08001a78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a7e:	2003      	movs	r0, #3
 8001a80:	f001 f92c 	bl	8002cdc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001a84:	f003 fd00 	bl	8005488 <HAL_RCC_GetSysClockFreq>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	4b15      	ldr	r3, [pc, #84]	; (8001ae0 <HAL_Init+0x68>)
 8001a8c:	699b      	ldr	r3, [r3, #24]
 8001a8e:	0a1b      	lsrs	r3, r3, #8
 8001a90:	f003 030f 	and.w	r3, r3, #15
 8001a94:	4913      	ldr	r1, [pc, #76]	; (8001ae4 <HAL_Init+0x6c>)
 8001a96:	5ccb      	ldrb	r3, [r1, r3]
 8001a98:	f003 031f 	and.w	r3, r3, #31
 8001a9c:	fa22 f303 	lsr.w	r3, r2, r3
 8001aa0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001aa2:	4b0f      	ldr	r3, [pc, #60]	; (8001ae0 <HAL_Init+0x68>)
 8001aa4:	699b      	ldr	r3, [r3, #24]
 8001aa6:	f003 030f 	and.w	r3, r3, #15
 8001aaa:	4a0e      	ldr	r2, [pc, #56]	; (8001ae4 <HAL_Init+0x6c>)
 8001aac:	5cd3      	ldrb	r3, [r2, r3]
 8001aae:	f003 031f 	and.w	r3, r3, #31
 8001ab2:	687a      	ldr	r2, [r7, #4]
 8001ab4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ab8:	4a0b      	ldr	r2, [pc, #44]	; (8001ae8 <HAL_Init+0x70>)
 8001aba:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001abc:	4a0b      	ldr	r2, [pc, #44]	; (8001aec <HAL_Init+0x74>)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ac2:	2000      	movs	r0, #0
 8001ac4:	f000 f814 	bl	8001af0 <HAL_InitTick>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d001      	beq.n	8001ad2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e002      	b.n	8001ad8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001ad2:	f7ff fd07 	bl	80014e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ad6:	2300      	movs	r3, #0
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3708      	adds	r7, #8
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	58024400 	.word	0x58024400
 8001ae4:	0800d920 	.word	0x0800d920
 8001ae8:	24000020 	.word	0x24000020
 8001aec:	2400001c 	.word	0x2400001c

08001af0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001af8:	4b15      	ldr	r3, [pc, #84]	; (8001b50 <HAL_InitTick+0x60>)
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d101      	bne.n	8001b04 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	e021      	b.n	8001b48 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001b04:	4b13      	ldr	r3, [pc, #76]	; (8001b54 <HAL_InitTick+0x64>)
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	4b11      	ldr	r3, [pc, #68]	; (8001b50 <HAL_InitTick+0x60>)
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b12:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b16:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f001 f911 	bl	8002d42 <HAL_SYSTICK_Config>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e00e      	b.n	8001b48 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2b0f      	cmp	r3, #15
 8001b2e:	d80a      	bhi.n	8001b46 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b30:	2200      	movs	r2, #0
 8001b32:	6879      	ldr	r1, [r7, #4]
 8001b34:	f04f 30ff 	mov.w	r0, #4294967295
 8001b38:	f001 f8db 	bl	8002cf2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b3c:	4a06      	ldr	r2, [pc, #24]	; (8001b58 <HAL_InitTick+0x68>)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b42:	2300      	movs	r3, #0
 8001b44:	e000      	b.n	8001b48 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3708      	adds	r7, #8
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	24000028 	.word	0x24000028
 8001b54:	2400001c 	.word	0x2400001c
 8001b58:	24000024 	.word	0x24000024

08001b5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b60:	4b06      	ldr	r3, [pc, #24]	; (8001b7c <HAL_IncTick+0x20>)
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	461a      	mov	r2, r3
 8001b66:	4b06      	ldr	r3, [pc, #24]	; (8001b80 <HAL_IncTick+0x24>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4413      	add	r3, r2
 8001b6c:	4a04      	ldr	r2, [pc, #16]	; (8001b80 <HAL_IncTick+0x24>)
 8001b6e:	6013      	str	r3, [r2, #0]
}
 8001b70:	bf00      	nop
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop
 8001b7c:	24000028 	.word	0x24000028
 8001b80:	240003fc 	.word	0x240003fc

08001b84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  return uwTick;
 8001b88:	4b03      	ldr	r3, [pc, #12]	; (8001b98 <HAL_GetTick+0x14>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	240003fc 	.word	0x240003fc

08001b9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b084      	sub	sp, #16
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ba4:	f7ff ffee 	bl	8001b84 <HAL_GetTick>
 8001ba8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bb4:	d005      	beq.n	8001bc2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bb6:	4b0a      	ldr	r3, [pc, #40]	; (8001be0 <HAL_Delay+0x44>)
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	461a      	mov	r2, r3
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	4413      	add	r3, r2
 8001bc0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001bc2:	bf00      	nop
 8001bc4:	f7ff ffde 	bl	8001b84 <HAL_GetTick>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	68bb      	ldr	r3, [r7, #8]
 8001bcc:	1ad3      	subs	r3, r2, r3
 8001bce:	68fa      	ldr	r2, [r7, #12]
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d8f7      	bhi.n	8001bc4 <HAL_Delay+0x28>
  {
  }
}
 8001bd4:	bf00      	nop
 8001bd6:	bf00      	nop
 8001bd8:	3710      	adds	r7, #16
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	24000028 	.word	0x24000028

08001be4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001be8:	4b03      	ldr	r3, [pc, #12]	; (8001bf8 <HAL_GetREVID+0x14>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	0c1b      	lsrs	r3, r3, #16
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr
 8001bf8:	5c001000 	.word	0x5c001000

08001bfc <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
 8001c04:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8001c06:	4b07      	ldr	r3, [pc, #28]	; (8001c24 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8001c08:	685a      	ldr	r2, [r3, #4]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	43db      	mvns	r3, r3
 8001c0e:	401a      	ands	r2, r3
 8001c10:	4904      	ldr	r1, [pc, #16]	; (8001c24 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	4313      	orrs	r3, r2
 8001c16:	604b      	str	r3, [r1, #4]
}
 8001c18:	bf00      	nop
 8001c1a:	370c      	adds	r7, #12
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr
 8001c24:	58000400 	.word	0x58000400

08001c28 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	431a      	orrs	r2, r3
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	609a      	str	r2, [r3, #8]
}
 8001c42:	bf00      	nop
 8001c44:	370c      	adds	r7, #12
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr

08001c4e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001c4e:	b480      	push	{r7}
 8001c50:	b083      	sub	sp, #12
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	6078      	str	r0, [r7, #4]
 8001c56:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	431a      	orrs	r2, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	609a      	str	r2, [r3, #8]
}
 8001c68:	bf00      	nop
 8001c6a:	370c      	adds	r7, #12
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr

08001c74 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	370c      	adds	r7, #12
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr

08001c90 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b087      	sub	sp, #28
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	60f8      	str	r0, [r7, #12]
 8001c98:	60b9      	str	r1, [r7, #8]
 8001c9a:	607a      	str	r2, [r7, #4]
 8001c9c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	3360      	adds	r3, #96	; 0x60
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	4413      	add	r3, r2
 8001caa:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	430b      	orrs	r3, r1
 8001cbe:	431a      	orrs	r2, r3
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001cc4:	bf00      	nop
 8001cc6:	371c      	adds	r7, #28
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr

08001cd0 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b085      	sub	sp, #20
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	60f8      	str	r0, [r7, #12]
 8001cd8:	60b9      	str	r1, [r7, #8]
 8001cda:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	691b      	ldr	r3, [r3, #16]
 8001ce0:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	f003 031f 	and.w	r3, r3, #31
 8001cea:	6879      	ldr	r1, [r7, #4]
 8001cec:	fa01 f303 	lsl.w	r3, r1, r3
 8001cf0:	431a      	orrs	r2, r3
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	611a      	str	r2, [r3, #16]
}
 8001cf6:	bf00      	nop
 8001cf8:	3714      	adds	r7, #20
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr

08001d02 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001d02:	b480      	push	{r7}
 8001d04:	b087      	sub	sp, #28
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	60f8      	str	r0, [r7, #12]
 8001d0a:	60b9      	str	r1, [r7, #8]
 8001d0c:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	3360      	adds	r3, #96	; 0x60
 8001d12:	461a      	mov	r2, r3
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	4413      	add	r3, r2
 8001d1a:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	431a      	orrs	r2, r3
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	601a      	str	r2, [r3, #0]
  }
}
 8001d2c:	bf00      	nop
 8001d2e:	371c      	adds	r7, #28
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr

08001d38 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b087      	sub	sp, #28
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	60f8      	str	r0, [r7, #12]
 8001d40:	60b9      	str	r1, [r7, #8]
 8001d42:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	3330      	adds	r3, #48	; 0x30
 8001d48:	461a      	mov	r2, r3
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	0a1b      	lsrs	r3, r3, #8
 8001d4e:	009b      	lsls	r3, r3, #2
 8001d50:	f003 030c 	and.w	r3, r3, #12
 8001d54:	4413      	add	r3, r2
 8001d56:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	f003 031f 	and.w	r3, r3, #31
 8001d62:	211f      	movs	r1, #31
 8001d64:	fa01 f303 	lsl.w	r3, r1, r3
 8001d68:	43db      	mvns	r3, r3
 8001d6a:	401a      	ands	r2, r3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	0e9b      	lsrs	r3, r3, #26
 8001d70:	f003 011f 	and.w	r1, r3, #31
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	f003 031f 	and.w	r3, r3, #31
 8001d7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d7e:	431a      	orrs	r2, r3
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001d84:	bf00      	nop
 8001d86:	371c      	adds	r7, #28
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr

08001d90 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b087      	sub	sp, #28
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	60f8      	str	r0, [r7, #12]
 8001d98:	60b9      	str	r1, [r7, #8]
 8001d9a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	3314      	adds	r3, #20
 8001da0:	461a      	mov	r2, r3
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	0e5b      	lsrs	r3, r3, #25
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	f003 0304 	and.w	r3, r3, #4
 8001dac:	4413      	add	r3, r2
 8001dae:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	0d1b      	lsrs	r3, r3, #20
 8001db8:	f003 031f 	and.w	r3, r3, #31
 8001dbc:	2107      	movs	r1, #7
 8001dbe:	fa01 f303 	lsl.w	r3, r1, r3
 8001dc2:	43db      	mvns	r3, r3
 8001dc4:	401a      	ands	r2, r3
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	0d1b      	lsrs	r3, r3, #20
 8001dca:	f003 031f 	and.w	r3, r3, #31
 8001dce:	6879      	ldr	r1, [r7, #4]
 8001dd0:	fa01 f303 	lsl.w	r3, r1, r3
 8001dd4:	431a      	orrs	r2, r3
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001dda:	bf00      	nop
 8001ddc:	371c      	adds	r7, #28
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr
	...

08001de8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b085      	sub	sp, #20
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	60f8      	str	r0, [r7, #12]
 8001df0:	60b9      	str	r1, [r7, #8]
 8001df2:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001dfa:	68bb      	ldr	r3, [r7, #8]
 8001dfc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001e00:	43db      	mvns	r3, r3
 8001e02:	401a      	ands	r2, r3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	f003 0318 	and.w	r3, r3, #24
 8001e0a:	4908      	ldr	r1, [pc, #32]	; (8001e2c <LL_ADC_SetChannelSingleDiff+0x44>)
 8001e0c:	40d9      	lsrs	r1, r3
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	400b      	ands	r3, r1
 8001e12:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001e16:	431a      	orrs	r2, r3
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001e1e:	bf00      	nop
 8001e20:	3714      	adds	r7, #20
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr
 8001e2a:	bf00      	nop
 8001e2c:	000fffff 	.word	0x000fffff

08001e30 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	689a      	ldr	r2, [r3, #8]
 8001e3c:	4b04      	ldr	r3, [pc, #16]	; (8001e50 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001e3e:	4013      	ands	r3, r2
 8001e40:	687a      	ldr	r2, [r7, #4]
 8001e42:	6093      	str	r3, [r2, #8]
}
 8001e44:	bf00      	nop
 8001e46:	370c      	adds	r7, #12
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr
 8001e50:	5fffffc0 	.word	0x5fffffc0

08001e54 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001e64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001e68:	d101      	bne.n	8001e6e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e000      	b.n	8001e70 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001e6e:	2300      	movs	r3, #0
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	370c      	adds	r7, #12
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr

08001e7c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	689a      	ldr	r2, [r3, #8]
 8001e88:	4b05      	ldr	r3, [pc, #20]	; (8001ea0 <LL_ADC_EnableInternalRegulator+0x24>)
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001e94:	bf00      	nop
 8001e96:	370c      	adds	r7, #12
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr
 8001ea0:	6fffffc0 	.word	0x6fffffc0

08001ea4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eb4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001eb8:	d101      	bne.n	8001ebe <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e000      	b.n	8001ec0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001ebe:	2300      	movs	r3, #0
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	370c      	adds	r7, #12
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr

08001ecc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	f003 0301 	and.w	r3, r3, #1
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d101      	bne.n	8001ee4 <LL_ADC_IsEnabled+0x18>
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e000      	b.n	8001ee6 <LL_ADC_IsEnabled+0x1a>
 8001ee4:	2300      	movs	r3, #0
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	370c      	adds	r7, #12
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr

08001ef2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001ef2:	b480      	push	{r7}
 8001ef4:	b083      	sub	sp, #12
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	f003 0304 	and.w	r3, r3, #4
 8001f02:	2b04      	cmp	r3, #4
 8001f04:	d101      	bne.n	8001f0a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001f06:	2301      	movs	r3, #1
 8001f08:	e000      	b.n	8001f0c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001f0a:	2300      	movs	r3, #0
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	370c      	adds	r7, #12
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr

08001f18 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	f003 0308 	and.w	r3, r3, #8
 8001f28:	2b08      	cmp	r3, #8
 8001f2a:	d101      	bne.n	8001f30 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e000      	b.n	8001f32 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001f30:	2300      	movs	r3, #0
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	370c      	adds	r7, #12
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr
	...

08001f40 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001f40:	b590      	push	{r4, r7, lr}
 8001f42:	b089      	sub	sp, #36	; 0x24
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d101      	bne.n	8001f5a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e18f      	b.n	800227a <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	68db      	ldr	r3, [r3, #12]
 8001f5e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d109      	bne.n	8001f7c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	f7ff fad5 	bl	8001518 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2200      	movs	r2, #0
 8001f72:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2200      	movs	r2, #0
 8001f78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4618      	mov	r0, r3
 8001f82:	f7ff ff67 	bl	8001e54 <LL_ADC_IsDeepPowerDownEnabled>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d004      	beq.n	8001f96 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4618      	mov	r0, r3
 8001f92:	f7ff ff4d 	bl	8001e30 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f7ff ff82 	bl	8001ea4 <LL_ADC_IsInternalRegulatorEnabled>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d114      	bne.n	8001fd0 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4618      	mov	r0, r3
 8001fac:	f7ff ff66 	bl	8001e7c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001fb0:	4b87      	ldr	r3, [pc, #540]	; (80021d0 <HAL_ADC_Init+0x290>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	099b      	lsrs	r3, r3, #6
 8001fb6:	4a87      	ldr	r2, [pc, #540]	; (80021d4 <HAL_ADC_Init+0x294>)
 8001fb8:	fba2 2303 	umull	r2, r3, r2, r3
 8001fbc:	099b      	lsrs	r3, r3, #6
 8001fbe:	3301      	adds	r3, #1
 8001fc0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001fc2:	e002      	b.n	8001fca <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	3b01      	subs	r3, #1
 8001fc8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d1f9      	bne.n	8001fc4 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f7ff ff65 	bl	8001ea4 <LL_ADC_IsInternalRegulatorEnabled>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d10d      	bne.n	8001ffc <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fe4:	f043 0210 	orr.w	r2, r3, #16
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ff0:	f043 0201 	orr.w	r2, r3, #1
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4618      	mov	r0, r3
 8002002:	f7ff ff76 	bl	8001ef2 <LL_ADC_REG_IsConversionOngoing>
 8002006:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800200c:	f003 0310 	and.w	r3, r3, #16
 8002010:	2b00      	cmp	r3, #0
 8002012:	f040 8129 	bne.w	8002268 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	2b00      	cmp	r3, #0
 800201a:	f040 8125 	bne.w	8002268 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002022:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002026:	f043 0202 	orr.w	r2, r3, #2
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4618      	mov	r0, r3
 8002034:	f7ff ff4a 	bl	8001ecc <LL_ADC_IsEnabled>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d136      	bne.n	80020ac <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a65      	ldr	r2, [pc, #404]	; (80021d8 <HAL_ADC_Init+0x298>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d004      	beq.n	8002052 <HAL_ADC_Init+0x112>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a63      	ldr	r2, [pc, #396]	; (80021dc <HAL_ADC_Init+0x29c>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d10e      	bne.n	8002070 <HAL_ADC_Init+0x130>
 8002052:	4861      	ldr	r0, [pc, #388]	; (80021d8 <HAL_ADC_Init+0x298>)
 8002054:	f7ff ff3a 	bl	8001ecc <LL_ADC_IsEnabled>
 8002058:	4604      	mov	r4, r0
 800205a:	4860      	ldr	r0, [pc, #384]	; (80021dc <HAL_ADC_Init+0x29c>)
 800205c:	f7ff ff36 	bl	8001ecc <LL_ADC_IsEnabled>
 8002060:	4603      	mov	r3, r0
 8002062:	4323      	orrs	r3, r4
 8002064:	2b00      	cmp	r3, #0
 8002066:	bf0c      	ite	eq
 8002068:	2301      	moveq	r3, #1
 800206a:	2300      	movne	r3, #0
 800206c:	b2db      	uxtb	r3, r3
 800206e:	e008      	b.n	8002082 <HAL_ADC_Init+0x142>
 8002070:	485b      	ldr	r0, [pc, #364]	; (80021e0 <HAL_ADC_Init+0x2a0>)
 8002072:	f7ff ff2b 	bl	8001ecc <LL_ADC_IsEnabled>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	bf0c      	ite	eq
 800207c:	2301      	moveq	r3, #1
 800207e:	2300      	movne	r3, #0
 8002080:	b2db      	uxtb	r3, r3
 8002082:	2b00      	cmp	r3, #0
 8002084:	d012      	beq.n	80020ac <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a53      	ldr	r2, [pc, #332]	; (80021d8 <HAL_ADC_Init+0x298>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d004      	beq.n	800209a <HAL_ADC_Init+0x15a>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a51      	ldr	r2, [pc, #324]	; (80021dc <HAL_ADC_Init+0x29c>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d101      	bne.n	800209e <HAL_ADC_Init+0x15e>
 800209a:	4a52      	ldr	r2, [pc, #328]	; (80021e4 <HAL_ADC_Init+0x2a4>)
 800209c:	e000      	b.n	80020a0 <HAL_ADC_Init+0x160>
 800209e:	4a52      	ldr	r2, [pc, #328]	; (80021e8 <HAL_ADC_Init+0x2a8>)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	4619      	mov	r1, r3
 80020a6:	4610      	mov	r0, r2
 80020a8:	f7ff fdbe 	bl	8001c28 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80020ac:	f7ff fd9a 	bl	8001be4 <HAL_GetREVID>
 80020b0:	4603      	mov	r3, r0
 80020b2:	f241 0203 	movw	r2, #4099	; 0x1003
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d914      	bls.n	80020e4 <HAL_ADC_Init+0x1a4>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	2b10      	cmp	r3, #16
 80020c0:	d110      	bne.n	80020e4 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	7d5b      	ldrb	r3, [r3, #21]
 80020c6:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80020cc:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80020d2:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	7f1b      	ldrb	r3, [r3, #28]
 80020d8:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80020da:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80020dc:	f043 030c 	orr.w	r3, r3, #12
 80020e0:	61bb      	str	r3, [r7, #24]
 80020e2:	e00d      	b.n	8002100 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	7d5b      	ldrb	r3, [r3, #21]
 80020e8:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80020ee:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80020f4:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	7f1b      	ldrb	r3, [r3, #28]
 80020fa:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80020fc:	4313      	orrs	r3, r2
 80020fe:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	7f1b      	ldrb	r3, [r3, #28]
 8002104:	2b01      	cmp	r3, #1
 8002106:	d106      	bne.n	8002116 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6a1b      	ldr	r3, [r3, #32]
 800210c:	3b01      	subs	r3, #1
 800210e:	045b      	lsls	r3, r3, #17
 8002110:	69ba      	ldr	r2, [r7, #24]
 8002112:	4313      	orrs	r3, r2
 8002114:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800211a:	2b00      	cmp	r3, #0
 800211c:	d009      	beq.n	8002132 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002122:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800212a:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800212c:	69ba      	ldr	r2, [r7, #24]
 800212e:	4313      	orrs	r3, r2
 8002130:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	68da      	ldr	r2, [r3, #12]
 8002138:	4b2c      	ldr	r3, [pc, #176]	; (80021ec <HAL_ADC_Init+0x2ac>)
 800213a:	4013      	ands	r3, r2
 800213c:	687a      	ldr	r2, [r7, #4]
 800213e:	6812      	ldr	r2, [r2, #0]
 8002140:	69b9      	ldr	r1, [r7, #24]
 8002142:	430b      	orrs	r3, r1
 8002144:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4618      	mov	r0, r3
 800214c:	f7ff fed1 	bl	8001ef2 <LL_ADC_REG_IsConversionOngoing>
 8002150:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4618      	mov	r0, r3
 8002158:	f7ff fede 	bl	8001f18 <LL_ADC_INJ_IsConversionOngoing>
 800215c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d15f      	bne.n	8002224 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d15c      	bne.n	8002224 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	7d1b      	ldrb	r3, [r3, #20]
 800216e:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8002174:	4313      	orrs	r3, r2
 8002176:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	68da      	ldr	r2, [r3, #12]
 800217e:	4b1c      	ldr	r3, [pc, #112]	; (80021f0 <HAL_ADC_Init+0x2b0>)
 8002180:	4013      	ands	r3, r2
 8002182:	687a      	ldr	r2, [r7, #4]
 8002184:	6812      	ldr	r2, [r2, #0]
 8002186:	69b9      	ldr	r1, [r7, #24]
 8002188:	430b      	orrs	r3, r1
 800218a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002192:	2b01      	cmp	r3, #1
 8002194:	d130      	bne.n	80021f8 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800219a:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	691a      	ldr	r2, [r3, #16]
 80021a2:	4b14      	ldr	r3, [pc, #80]	; (80021f4 <HAL_ADC_Init+0x2b4>)
 80021a4:	4013      	ands	r3, r2
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80021aa:	3a01      	subs	r2, #1
 80021ac:	0411      	lsls	r1, r2, #16
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80021b2:	4311      	orrs	r1, r2
 80021b4:	687a      	ldr	r2, [r7, #4]
 80021b6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80021b8:	4311      	orrs	r1, r2
 80021ba:	687a      	ldr	r2, [r7, #4]
 80021bc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80021be:	430a      	orrs	r2, r1
 80021c0:	431a      	orrs	r2, r3
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f042 0201 	orr.w	r2, r2, #1
 80021ca:	611a      	str	r2, [r3, #16]
 80021cc:	e01c      	b.n	8002208 <HAL_ADC_Init+0x2c8>
 80021ce:	bf00      	nop
 80021d0:	2400001c 	.word	0x2400001c
 80021d4:	053e2d63 	.word	0x053e2d63
 80021d8:	40022000 	.word	0x40022000
 80021dc:	40022100 	.word	0x40022100
 80021e0:	58026000 	.word	0x58026000
 80021e4:	40022300 	.word	0x40022300
 80021e8:	58026300 	.word	0x58026300
 80021ec:	fff0c003 	.word	0xfff0c003
 80021f0:	ffffbffc 	.word	0xffffbffc
 80021f4:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	691a      	ldr	r2, [r3, #16]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f022 0201 	bic.w	r2, r2, #1
 8002206:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	691b      	ldr	r3, [r3, #16]
 800220e:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	430a      	orrs	r2, r1
 800221c:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f000 fb80 	bl	8002924 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	2b01      	cmp	r3, #1
 800222a:	d10c      	bne.n	8002246 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002232:	f023 010f 	bic.w	r1, r3, #15
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	699b      	ldr	r3, [r3, #24]
 800223a:	1e5a      	subs	r2, r3, #1
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	430a      	orrs	r2, r1
 8002242:	631a      	str	r2, [r3, #48]	; 0x30
 8002244:	e007      	b.n	8002256 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f022 020f 	bic.w	r2, r2, #15
 8002254:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800225a:	f023 0303 	bic.w	r3, r3, #3
 800225e:	f043 0201 	orr.w	r2, r3, #1
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	655a      	str	r2, [r3, #84]	; 0x54
 8002266:	e007      	b.n	8002278 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800226c:	f043 0210 	orr.w	r2, r3, #16
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002278:	7ffb      	ldrb	r3, [r7, #31]
}
 800227a:	4618      	mov	r0, r3
 800227c:	3724      	adds	r7, #36	; 0x24
 800227e:	46bd      	mov	sp, r7
 8002280:	bd90      	pop	{r4, r7, pc}
 8002282:	bf00      	nop

08002284 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002284:	b590      	push	{r4, r7, lr}
 8002286:	b0a1      	sub	sp, #132	; 0x84
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
 800228c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800228e:	2300      	movs	r3, #0
 8002290:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002294:	2300      	movs	r3, #0
 8002296:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	4a9d      	ldr	r2, [pc, #628]	; (8002514 <HAL_ADC_ConfigChannel+0x290>)
 800229e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d101      	bne.n	80022ae <HAL_ADC_ConfigChannel+0x2a>
 80022aa:	2302      	movs	r3, #2
 80022ac:	e321      	b.n	80028f2 <HAL_ADC_ConfigChannel+0x66e>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2201      	movs	r2, #1
 80022b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4618      	mov	r0, r3
 80022bc:	f7ff fe19 	bl	8001ef2 <LL_ADC_REG_IsConversionOngoing>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	f040 8306 	bne.w	80028d4 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d108      	bne.n	80022e6 <HAL_ADC_ConfigChannel+0x62>
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	0e9b      	lsrs	r3, r3, #26
 80022da:	f003 031f 	and.w	r3, r3, #31
 80022de:	2201      	movs	r2, #1
 80022e0:	fa02 f303 	lsl.w	r3, r2, r3
 80022e4:	e016      	b.n	8002314 <HAL_ADC_ConfigChannel+0x90>
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80022ee:	fa93 f3a3 	rbit	r3, r3
 80022f2:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80022f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80022f6:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80022f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d101      	bne.n	8002302 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 80022fe:	2320      	movs	r3, #32
 8002300:	e003      	b.n	800230a <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8002302:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002304:	fab3 f383 	clz	r3, r3
 8002308:	b2db      	uxtb	r3, r3
 800230a:	f003 031f 	and.w	r3, r3, #31
 800230e:	2201      	movs	r2, #1
 8002310:	fa02 f303 	lsl.w	r3, r2, r3
 8002314:	687a      	ldr	r2, [r7, #4]
 8002316:	6812      	ldr	r2, [r2, #0]
 8002318:	69d1      	ldr	r1, [r2, #28]
 800231a:	687a      	ldr	r2, [r7, #4]
 800231c:	6812      	ldr	r2, [r2, #0]
 800231e:	430b      	orrs	r3, r1
 8002320:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6818      	ldr	r0, [r3, #0]
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	6859      	ldr	r1, [r3, #4]
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	461a      	mov	r2, r3
 8002330:	f7ff fd02 	bl	8001d38 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4618      	mov	r0, r3
 800233a:	f7ff fdda 	bl	8001ef2 <LL_ADC_REG_IsConversionOngoing>
 800233e:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4618      	mov	r0, r3
 8002346:	f7ff fde7 	bl	8001f18 <LL_ADC_INJ_IsConversionOngoing>
 800234a:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800234c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800234e:	2b00      	cmp	r3, #0
 8002350:	f040 80b3 	bne.w	80024ba <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002354:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002356:	2b00      	cmp	r3, #0
 8002358:	f040 80af 	bne.w	80024ba <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6818      	ldr	r0, [r3, #0]
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	6819      	ldr	r1, [r3, #0]
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	461a      	mov	r2, r3
 800236a:	f7ff fd11 	bl	8001d90 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800236e:	4b6a      	ldr	r3, [pc, #424]	; (8002518 <HAL_ADC_ConfigChannel+0x294>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002376:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800237a:	d10b      	bne.n	8002394 <HAL_ADC_ConfigChannel+0x110>
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	695a      	ldr	r2, [r3, #20]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	68db      	ldr	r3, [r3, #12]
 8002386:	089b      	lsrs	r3, r3, #2
 8002388:	f003 0307 	and.w	r3, r3, #7
 800238c:	005b      	lsls	r3, r3, #1
 800238e:	fa02 f303 	lsl.w	r3, r2, r3
 8002392:	e01d      	b.n	80023d0 <HAL_ADC_ConfigChannel+0x14c>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	68db      	ldr	r3, [r3, #12]
 800239a:	f003 0310 	and.w	r3, r3, #16
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d10b      	bne.n	80023ba <HAL_ADC_ConfigChannel+0x136>
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	695a      	ldr	r2, [r3, #20]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	089b      	lsrs	r3, r3, #2
 80023ae:	f003 0307 	and.w	r3, r3, #7
 80023b2:	005b      	lsls	r3, r3, #1
 80023b4:	fa02 f303 	lsl.w	r3, r2, r3
 80023b8:	e00a      	b.n	80023d0 <HAL_ADC_ConfigChannel+0x14c>
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	695a      	ldr	r2, [r3, #20]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	089b      	lsrs	r3, r3, #2
 80023c6:	f003 0304 	and.w	r3, r3, #4
 80023ca:	005b      	lsls	r3, r3, #1
 80023cc:	fa02 f303 	lsl.w	r3, r2, r3
 80023d0:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	691b      	ldr	r3, [r3, #16]
 80023d6:	2b04      	cmp	r3, #4
 80023d8:	d027      	beq.n	800242a <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6818      	ldr	r0, [r3, #0]
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	6919      	ldr	r1, [r3, #16]
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80023e8:	f7ff fc52 	bl	8001c90 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6818      	ldr	r0, [r3, #0]
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	6919      	ldr	r1, [r3, #16]
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	7e5b      	ldrb	r3, [r3, #25]
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d102      	bne.n	8002402 <HAL_ADC_ConfigChannel+0x17e>
 80023fc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002400:	e000      	b.n	8002404 <HAL_ADC_ConfigChannel+0x180>
 8002402:	2300      	movs	r3, #0
 8002404:	461a      	mov	r2, r3
 8002406:	f7ff fc7c 	bl	8001d02 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6818      	ldr	r0, [r3, #0]
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	6919      	ldr	r1, [r3, #16]
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	7e1b      	ldrb	r3, [r3, #24]
 8002416:	2b01      	cmp	r3, #1
 8002418:	d102      	bne.n	8002420 <HAL_ADC_ConfigChannel+0x19c>
 800241a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800241e:	e000      	b.n	8002422 <HAL_ADC_ConfigChannel+0x19e>
 8002420:	2300      	movs	r3, #0
 8002422:	461a      	mov	r2, r3
 8002424:	f7ff fc54 	bl	8001cd0 <LL_ADC_SetDataRightShift>
 8002428:	e047      	b.n	80024ba <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002430:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	069b      	lsls	r3, r3, #26
 800243a:	429a      	cmp	r2, r3
 800243c:	d107      	bne.n	800244e <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800244c:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002454:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	069b      	lsls	r3, r3, #26
 800245e:	429a      	cmp	r2, r3
 8002460:	d107      	bne.n	8002472 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002470:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002478:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	069b      	lsls	r3, r3, #26
 8002482:	429a      	cmp	r2, r3
 8002484:	d107      	bne.n	8002496 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002494:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800249c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	069b      	lsls	r3, r3, #26
 80024a6:	429a      	cmp	r2, r3
 80024a8:	d107      	bne.n	80024ba <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80024b8:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4618      	mov	r0, r3
 80024c0:	f7ff fd04 	bl	8001ecc <LL_ADC_IsEnabled>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	f040 820d 	bne.w	80028e6 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6818      	ldr	r0, [r3, #0]
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	6819      	ldr	r1, [r3, #0]
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	461a      	mov	r2, r3
 80024da:	f7ff fc85 	bl	8001de8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	68db      	ldr	r3, [r3, #12]
 80024e2:	4a0c      	ldr	r2, [pc, #48]	; (8002514 <HAL_ADC_ConfigChannel+0x290>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	f040 8133 	bne.w	8002750 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d110      	bne.n	800251c <HAL_ADC_ConfigChannel+0x298>
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	0e9b      	lsrs	r3, r3, #26
 8002500:	3301      	adds	r3, #1
 8002502:	f003 031f 	and.w	r3, r3, #31
 8002506:	2b09      	cmp	r3, #9
 8002508:	bf94      	ite	ls
 800250a:	2301      	movls	r3, #1
 800250c:	2300      	movhi	r3, #0
 800250e:	b2db      	uxtb	r3, r3
 8002510:	e01e      	b.n	8002550 <HAL_ADC_ConfigChannel+0x2cc>
 8002512:	bf00      	nop
 8002514:	47ff0000 	.word	0x47ff0000
 8002518:	5c001000 	.word	0x5c001000
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002522:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002524:	fa93 f3a3 	rbit	r3, r3
 8002528:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800252a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800252c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800252e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002530:	2b00      	cmp	r3, #0
 8002532:	d101      	bne.n	8002538 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8002534:	2320      	movs	r3, #32
 8002536:	e003      	b.n	8002540 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8002538:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800253a:	fab3 f383 	clz	r3, r3
 800253e:	b2db      	uxtb	r3, r3
 8002540:	3301      	adds	r3, #1
 8002542:	f003 031f 	and.w	r3, r3, #31
 8002546:	2b09      	cmp	r3, #9
 8002548:	bf94      	ite	ls
 800254a:	2301      	movls	r3, #1
 800254c:	2300      	movhi	r3, #0
 800254e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002550:	2b00      	cmp	r3, #0
 8002552:	d079      	beq.n	8002648 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800255c:	2b00      	cmp	r3, #0
 800255e:	d107      	bne.n	8002570 <HAL_ADC_ConfigChannel+0x2ec>
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	0e9b      	lsrs	r3, r3, #26
 8002566:	3301      	adds	r3, #1
 8002568:	069b      	lsls	r3, r3, #26
 800256a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800256e:	e015      	b.n	800259c <HAL_ADC_ConfigChannel+0x318>
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002576:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002578:	fa93 f3a3 	rbit	r3, r3
 800257c:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800257e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002580:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002582:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002584:	2b00      	cmp	r3, #0
 8002586:	d101      	bne.n	800258c <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8002588:	2320      	movs	r3, #32
 800258a:	e003      	b.n	8002594 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800258c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800258e:	fab3 f383 	clz	r3, r3
 8002592:	b2db      	uxtb	r3, r3
 8002594:	3301      	adds	r3, #1
 8002596:	069b      	lsls	r3, r3, #26
 8002598:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d109      	bne.n	80025bc <HAL_ADC_ConfigChannel+0x338>
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	0e9b      	lsrs	r3, r3, #26
 80025ae:	3301      	adds	r3, #1
 80025b0:	f003 031f 	and.w	r3, r3, #31
 80025b4:	2101      	movs	r1, #1
 80025b6:	fa01 f303 	lsl.w	r3, r1, r3
 80025ba:	e017      	b.n	80025ec <HAL_ADC_ConfigChannel+0x368>
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025c4:	fa93 f3a3 	rbit	r3, r3
 80025c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80025ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025cc:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80025ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d101      	bne.n	80025d8 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 80025d4:	2320      	movs	r3, #32
 80025d6:	e003      	b.n	80025e0 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 80025d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025da:	fab3 f383 	clz	r3, r3
 80025de:	b2db      	uxtb	r3, r3
 80025e0:	3301      	adds	r3, #1
 80025e2:	f003 031f 	and.w	r3, r3, #31
 80025e6:	2101      	movs	r1, #1
 80025e8:	fa01 f303 	lsl.w	r3, r1, r3
 80025ec:	ea42 0103 	orr.w	r1, r2, r3
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d10a      	bne.n	8002612 <HAL_ADC_ConfigChannel+0x38e>
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	0e9b      	lsrs	r3, r3, #26
 8002602:	3301      	adds	r3, #1
 8002604:	f003 021f 	and.w	r2, r3, #31
 8002608:	4613      	mov	r3, r2
 800260a:	005b      	lsls	r3, r3, #1
 800260c:	4413      	add	r3, r2
 800260e:	051b      	lsls	r3, r3, #20
 8002610:	e018      	b.n	8002644 <HAL_ADC_ConfigChannel+0x3c0>
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002618:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800261a:	fa93 f3a3 	rbit	r3, r3
 800261e:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002622:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002626:	2b00      	cmp	r3, #0
 8002628:	d101      	bne.n	800262e <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 800262a:	2320      	movs	r3, #32
 800262c:	e003      	b.n	8002636 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 800262e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002630:	fab3 f383 	clz	r3, r3
 8002634:	b2db      	uxtb	r3, r3
 8002636:	3301      	adds	r3, #1
 8002638:	f003 021f 	and.w	r2, r3, #31
 800263c:	4613      	mov	r3, r2
 800263e:	005b      	lsls	r3, r3, #1
 8002640:	4413      	add	r3, r2
 8002642:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002644:	430b      	orrs	r3, r1
 8002646:	e07e      	b.n	8002746 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002650:	2b00      	cmp	r3, #0
 8002652:	d107      	bne.n	8002664 <HAL_ADC_ConfigChannel+0x3e0>
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	0e9b      	lsrs	r3, r3, #26
 800265a:	3301      	adds	r3, #1
 800265c:	069b      	lsls	r3, r3, #26
 800265e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002662:	e015      	b.n	8002690 <HAL_ADC_ConfigChannel+0x40c>
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800266a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800266c:	fa93 f3a3 	rbit	r3, r3
 8002670:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002674:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002678:	2b00      	cmp	r3, #0
 800267a:	d101      	bne.n	8002680 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 800267c:	2320      	movs	r3, #32
 800267e:	e003      	b.n	8002688 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002682:	fab3 f383 	clz	r3, r3
 8002686:	b2db      	uxtb	r3, r3
 8002688:	3301      	adds	r3, #1
 800268a:	069b      	lsls	r3, r3, #26
 800268c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002698:	2b00      	cmp	r3, #0
 800269a:	d109      	bne.n	80026b0 <HAL_ADC_ConfigChannel+0x42c>
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	0e9b      	lsrs	r3, r3, #26
 80026a2:	3301      	adds	r3, #1
 80026a4:	f003 031f 	and.w	r3, r3, #31
 80026a8:	2101      	movs	r1, #1
 80026aa:	fa01 f303 	lsl.w	r3, r1, r3
 80026ae:	e017      	b.n	80026e0 <HAL_ADC_ConfigChannel+0x45c>
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	fa93 f3a3 	rbit	r3, r3
 80026bc:	61bb      	str	r3, [r7, #24]
  return result;
 80026be:	69bb      	ldr	r3, [r7, #24]
 80026c0:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80026c2:	6a3b      	ldr	r3, [r7, #32]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d101      	bne.n	80026cc <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 80026c8:	2320      	movs	r3, #32
 80026ca:	e003      	b.n	80026d4 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 80026cc:	6a3b      	ldr	r3, [r7, #32]
 80026ce:	fab3 f383 	clz	r3, r3
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	3301      	adds	r3, #1
 80026d6:	f003 031f 	and.w	r3, r3, #31
 80026da:	2101      	movs	r1, #1
 80026dc:	fa01 f303 	lsl.w	r3, r1, r3
 80026e0:	ea42 0103 	orr.w	r1, r2, r3
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d10d      	bne.n	800270c <HAL_ADC_ConfigChannel+0x488>
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	0e9b      	lsrs	r3, r3, #26
 80026f6:	3301      	adds	r3, #1
 80026f8:	f003 021f 	and.w	r2, r3, #31
 80026fc:	4613      	mov	r3, r2
 80026fe:	005b      	lsls	r3, r3, #1
 8002700:	4413      	add	r3, r2
 8002702:	3b1e      	subs	r3, #30
 8002704:	051b      	lsls	r3, r3, #20
 8002706:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800270a:	e01b      	b.n	8002744 <HAL_ADC_ConfigChannel+0x4c0>
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	fa93 f3a3 	rbit	r3, r3
 8002718:	60fb      	str	r3, [r7, #12]
  return result;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d101      	bne.n	8002728 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8002724:	2320      	movs	r3, #32
 8002726:	e003      	b.n	8002730 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	fab3 f383 	clz	r3, r3
 800272e:	b2db      	uxtb	r3, r3
 8002730:	3301      	adds	r3, #1
 8002732:	f003 021f 	and.w	r2, r3, #31
 8002736:	4613      	mov	r3, r2
 8002738:	005b      	lsls	r3, r3, #1
 800273a:	4413      	add	r3, r2
 800273c:	3b1e      	subs	r3, #30
 800273e:	051b      	lsls	r3, r3, #20
 8002740:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002744:	430b      	orrs	r3, r1
 8002746:	683a      	ldr	r2, [r7, #0]
 8002748:	6892      	ldr	r2, [r2, #8]
 800274a:	4619      	mov	r1, r3
 800274c:	f7ff fb20 	bl	8001d90 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	2b00      	cmp	r3, #0
 8002756:	f280 80c6 	bge.w	80028e6 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a67      	ldr	r2, [pc, #412]	; (80028fc <HAL_ADC_ConfigChannel+0x678>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d004      	beq.n	800276e <HAL_ADC_ConfigChannel+0x4ea>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a65      	ldr	r2, [pc, #404]	; (8002900 <HAL_ADC_ConfigChannel+0x67c>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d101      	bne.n	8002772 <HAL_ADC_ConfigChannel+0x4ee>
 800276e:	4b65      	ldr	r3, [pc, #404]	; (8002904 <HAL_ADC_ConfigChannel+0x680>)
 8002770:	e000      	b.n	8002774 <HAL_ADC_ConfigChannel+0x4f0>
 8002772:	4b65      	ldr	r3, [pc, #404]	; (8002908 <HAL_ADC_ConfigChannel+0x684>)
 8002774:	4618      	mov	r0, r3
 8002776:	f7ff fa7d 	bl	8001c74 <LL_ADC_GetCommonPathInternalCh>
 800277a:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a5e      	ldr	r2, [pc, #376]	; (80028fc <HAL_ADC_ConfigChannel+0x678>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d004      	beq.n	8002790 <HAL_ADC_ConfigChannel+0x50c>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a5d      	ldr	r2, [pc, #372]	; (8002900 <HAL_ADC_ConfigChannel+0x67c>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d10e      	bne.n	80027ae <HAL_ADC_ConfigChannel+0x52a>
 8002790:	485a      	ldr	r0, [pc, #360]	; (80028fc <HAL_ADC_ConfigChannel+0x678>)
 8002792:	f7ff fb9b 	bl	8001ecc <LL_ADC_IsEnabled>
 8002796:	4604      	mov	r4, r0
 8002798:	4859      	ldr	r0, [pc, #356]	; (8002900 <HAL_ADC_ConfigChannel+0x67c>)
 800279a:	f7ff fb97 	bl	8001ecc <LL_ADC_IsEnabled>
 800279e:	4603      	mov	r3, r0
 80027a0:	4323      	orrs	r3, r4
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	bf0c      	ite	eq
 80027a6:	2301      	moveq	r3, #1
 80027a8:	2300      	movne	r3, #0
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	e008      	b.n	80027c0 <HAL_ADC_ConfigChannel+0x53c>
 80027ae:	4857      	ldr	r0, [pc, #348]	; (800290c <HAL_ADC_ConfigChannel+0x688>)
 80027b0:	f7ff fb8c 	bl	8001ecc <LL_ADC_IsEnabled>
 80027b4:	4603      	mov	r3, r0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	bf0c      	ite	eq
 80027ba:	2301      	moveq	r3, #1
 80027bc:	2300      	movne	r3, #0
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d07d      	beq.n	80028c0 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a51      	ldr	r2, [pc, #324]	; (8002910 <HAL_ADC_ConfigChannel+0x68c>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d130      	bne.n	8002830 <HAL_ADC_ConfigChannel+0x5ac>
 80027ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d12b      	bne.n	8002830 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a4b      	ldr	r2, [pc, #300]	; (800290c <HAL_ADC_ConfigChannel+0x688>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	f040 8081 	bne.w	80028e6 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a44      	ldr	r2, [pc, #272]	; (80028fc <HAL_ADC_ConfigChannel+0x678>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d004      	beq.n	80027f8 <HAL_ADC_ConfigChannel+0x574>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a43      	ldr	r2, [pc, #268]	; (8002900 <HAL_ADC_ConfigChannel+0x67c>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d101      	bne.n	80027fc <HAL_ADC_ConfigChannel+0x578>
 80027f8:	4a42      	ldr	r2, [pc, #264]	; (8002904 <HAL_ADC_ConfigChannel+0x680>)
 80027fa:	e000      	b.n	80027fe <HAL_ADC_ConfigChannel+0x57a>
 80027fc:	4a42      	ldr	r2, [pc, #264]	; (8002908 <HAL_ADC_ConfigChannel+0x684>)
 80027fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002800:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002804:	4619      	mov	r1, r3
 8002806:	4610      	mov	r0, r2
 8002808:	f7ff fa21 	bl	8001c4e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800280c:	4b41      	ldr	r3, [pc, #260]	; (8002914 <HAL_ADC_ConfigChannel+0x690>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	099b      	lsrs	r3, r3, #6
 8002812:	4a41      	ldr	r2, [pc, #260]	; (8002918 <HAL_ADC_ConfigChannel+0x694>)
 8002814:	fba2 2303 	umull	r2, r3, r2, r3
 8002818:	099b      	lsrs	r3, r3, #6
 800281a:	3301      	adds	r3, #1
 800281c:	005b      	lsls	r3, r3, #1
 800281e:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002820:	e002      	b.n	8002828 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	3b01      	subs	r3, #1
 8002826:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d1f9      	bne.n	8002822 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800282e:	e05a      	b.n	80028e6 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a39      	ldr	r2, [pc, #228]	; (800291c <HAL_ADC_ConfigChannel+0x698>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d11e      	bne.n	8002878 <HAL_ADC_ConfigChannel+0x5f4>
 800283a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800283c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002840:	2b00      	cmp	r3, #0
 8002842:	d119      	bne.n	8002878 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a30      	ldr	r2, [pc, #192]	; (800290c <HAL_ADC_ConfigChannel+0x688>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d14b      	bne.n	80028e6 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a2a      	ldr	r2, [pc, #168]	; (80028fc <HAL_ADC_ConfigChannel+0x678>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d004      	beq.n	8002862 <HAL_ADC_ConfigChannel+0x5de>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a28      	ldr	r2, [pc, #160]	; (8002900 <HAL_ADC_ConfigChannel+0x67c>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d101      	bne.n	8002866 <HAL_ADC_ConfigChannel+0x5e2>
 8002862:	4a28      	ldr	r2, [pc, #160]	; (8002904 <HAL_ADC_ConfigChannel+0x680>)
 8002864:	e000      	b.n	8002868 <HAL_ADC_ConfigChannel+0x5e4>
 8002866:	4a28      	ldr	r2, [pc, #160]	; (8002908 <HAL_ADC_ConfigChannel+0x684>)
 8002868:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800286a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800286e:	4619      	mov	r1, r3
 8002870:	4610      	mov	r0, r2
 8002872:	f7ff f9ec 	bl	8001c4e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002876:	e036      	b.n	80028e6 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a28      	ldr	r2, [pc, #160]	; (8002920 <HAL_ADC_ConfigChannel+0x69c>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d131      	bne.n	80028e6 <HAL_ADC_ConfigChannel+0x662>
 8002882:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002884:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002888:	2b00      	cmp	r3, #0
 800288a:	d12c      	bne.n	80028e6 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a1e      	ldr	r2, [pc, #120]	; (800290c <HAL_ADC_ConfigChannel+0x688>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d127      	bne.n	80028e6 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a18      	ldr	r2, [pc, #96]	; (80028fc <HAL_ADC_ConfigChannel+0x678>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d004      	beq.n	80028aa <HAL_ADC_ConfigChannel+0x626>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a16      	ldr	r2, [pc, #88]	; (8002900 <HAL_ADC_ConfigChannel+0x67c>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d101      	bne.n	80028ae <HAL_ADC_ConfigChannel+0x62a>
 80028aa:	4a16      	ldr	r2, [pc, #88]	; (8002904 <HAL_ADC_ConfigChannel+0x680>)
 80028ac:	e000      	b.n	80028b0 <HAL_ADC_ConfigChannel+0x62c>
 80028ae:	4a16      	ldr	r2, [pc, #88]	; (8002908 <HAL_ADC_ConfigChannel+0x684>)
 80028b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028b2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80028b6:	4619      	mov	r1, r3
 80028b8:	4610      	mov	r0, r2
 80028ba:	f7ff f9c8 	bl	8001c4e <LL_ADC_SetCommonPathInternalCh>
 80028be:	e012      	b.n	80028e6 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028c4:	f043 0220 	orr.w	r2, r3, #32
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80028d2:	e008      	b.n	80028e6 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028d8:	f043 0220 	orr.w	r2, r3, #32
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2200      	movs	r2, #0
 80028ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80028ee:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3784      	adds	r7, #132	; 0x84
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd90      	pop	{r4, r7, pc}
 80028fa:	bf00      	nop
 80028fc:	40022000 	.word	0x40022000
 8002900:	40022100 	.word	0x40022100
 8002904:	40022300 	.word	0x40022300
 8002908:	58026300 	.word	0x58026300
 800290c:	58026000 	.word	0x58026000
 8002910:	cb840000 	.word	0xcb840000
 8002914:	2400001c 	.word	0x2400001c
 8002918:	053e2d63 	.word	0x053e2d63
 800291c:	c7520000 	.word	0xc7520000
 8002920:	cfb80000 	.word	0xcfb80000

08002924 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b084      	sub	sp, #16
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a7a      	ldr	r2, [pc, #488]	; (8002b1c <ADC_ConfigureBoostMode+0x1f8>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d004      	beq.n	8002940 <ADC_ConfigureBoostMode+0x1c>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a79      	ldr	r2, [pc, #484]	; (8002b20 <ADC_ConfigureBoostMode+0x1fc>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d109      	bne.n	8002954 <ADC_ConfigureBoostMode+0x30>
 8002940:	4b78      	ldr	r3, [pc, #480]	; (8002b24 <ADC_ConfigureBoostMode+0x200>)
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002948:	2b00      	cmp	r3, #0
 800294a:	bf14      	ite	ne
 800294c:	2301      	movne	r3, #1
 800294e:	2300      	moveq	r3, #0
 8002950:	b2db      	uxtb	r3, r3
 8002952:	e008      	b.n	8002966 <ADC_ConfigureBoostMode+0x42>
 8002954:	4b74      	ldr	r3, [pc, #464]	; (8002b28 <ADC_ConfigureBoostMode+0x204>)
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800295c:	2b00      	cmp	r3, #0
 800295e:	bf14      	ite	ne
 8002960:	2301      	movne	r3, #1
 8002962:	2300      	moveq	r3, #0
 8002964:	b2db      	uxtb	r3, r3
 8002966:	2b00      	cmp	r3, #0
 8002968:	d01c      	beq.n	80029a4 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800296a:	f002 ff07 	bl	800577c <HAL_RCC_GetHCLKFreq>
 800296e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002978:	d010      	beq.n	800299c <ADC_ConfigureBoostMode+0x78>
 800297a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800297e:	d873      	bhi.n	8002a68 <ADC_ConfigureBoostMode+0x144>
 8002980:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002984:	d002      	beq.n	800298c <ADC_ConfigureBoostMode+0x68>
 8002986:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800298a:	d16d      	bne.n	8002a68 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	0c1b      	lsrs	r3, r3, #16
 8002992:	68fa      	ldr	r2, [r7, #12]
 8002994:	fbb2 f3f3 	udiv	r3, r2, r3
 8002998:	60fb      	str	r3, [r7, #12]
        break;
 800299a:	e068      	b.n	8002a6e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	089b      	lsrs	r3, r3, #2
 80029a0:	60fb      	str	r3, [r7, #12]
        break;
 80029a2:	e064      	b.n	8002a6e <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80029a4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80029a8:	f04f 0100 	mov.w	r1, #0
 80029ac:	f004 f936 	bl	8006c1c <HAL_RCCEx_GetPeriphCLKFreq>
 80029b0:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80029ba:	d051      	beq.n	8002a60 <ADC_ConfigureBoostMode+0x13c>
 80029bc:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80029c0:	d854      	bhi.n	8002a6c <ADC_ConfigureBoostMode+0x148>
 80029c2:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80029c6:	d047      	beq.n	8002a58 <ADC_ConfigureBoostMode+0x134>
 80029c8:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80029cc:	d84e      	bhi.n	8002a6c <ADC_ConfigureBoostMode+0x148>
 80029ce:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80029d2:	d03d      	beq.n	8002a50 <ADC_ConfigureBoostMode+0x12c>
 80029d4:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80029d8:	d848      	bhi.n	8002a6c <ADC_ConfigureBoostMode+0x148>
 80029da:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80029de:	d033      	beq.n	8002a48 <ADC_ConfigureBoostMode+0x124>
 80029e0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80029e4:	d842      	bhi.n	8002a6c <ADC_ConfigureBoostMode+0x148>
 80029e6:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80029ea:	d029      	beq.n	8002a40 <ADC_ConfigureBoostMode+0x11c>
 80029ec:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80029f0:	d83c      	bhi.n	8002a6c <ADC_ConfigureBoostMode+0x148>
 80029f2:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80029f6:	d01a      	beq.n	8002a2e <ADC_ConfigureBoostMode+0x10a>
 80029f8:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80029fc:	d836      	bhi.n	8002a6c <ADC_ConfigureBoostMode+0x148>
 80029fe:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002a02:	d014      	beq.n	8002a2e <ADC_ConfigureBoostMode+0x10a>
 8002a04:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002a08:	d830      	bhi.n	8002a6c <ADC_ConfigureBoostMode+0x148>
 8002a0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a0e:	d00e      	beq.n	8002a2e <ADC_ConfigureBoostMode+0x10a>
 8002a10:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a14:	d82a      	bhi.n	8002a6c <ADC_ConfigureBoostMode+0x148>
 8002a16:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002a1a:	d008      	beq.n	8002a2e <ADC_ConfigureBoostMode+0x10a>
 8002a1c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002a20:	d824      	bhi.n	8002a6c <ADC_ConfigureBoostMode+0x148>
 8002a22:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002a26:	d002      	beq.n	8002a2e <ADC_ConfigureBoostMode+0x10a>
 8002a28:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002a2c:	d11e      	bne.n	8002a6c <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	0c9b      	lsrs	r3, r3, #18
 8002a34:	005b      	lsls	r3, r3, #1
 8002a36:	68fa      	ldr	r2, [r7, #12]
 8002a38:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a3c:	60fb      	str	r3, [r7, #12]
        break;
 8002a3e:	e016      	b.n	8002a6e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	091b      	lsrs	r3, r3, #4
 8002a44:	60fb      	str	r3, [r7, #12]
        break;
 8002a46:	e012      	b.n	8002a6e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	095b      	lsrs	r3, r3, #5
 8002a4c:	60fb      	str	r3, [r7, #12]
        break;
 8002a4e:	e00e      	b.n	8002a6e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	099b      	lsrs	r3, r3, #6
 8002a54:	60fb      	str	r3, [r7, #12]
        break;
 8002a56:	e00a      	b.n	8002a6e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	09db      	lsrs	r3, r3, #7
 8002a5c:	60fb      	str	r3, [r7, #12]
        break;
 8002a5e:	e006      	b.n	8002a6e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	0a1b      	lsrs	r3, r3, #8
 8002a64:	60fb      	str	r3, [r7, #12]
        break;
 8002a66:	e002      	b.n	8002a6e <ADC_ConfigureBoostMode+0x14a>
        break;
 8002a68:	bf00      	nop
 8002a6a:	e000      	b.n	8002a6e <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8002a6c:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8002a6e:	f7ff f8b9 	bl	8001be4 <HAL_GetREVID>
 8002a72:	4603      	mov	r3, r0
 8002a74:	f241 0203 	movw	r2, #4099	; 0x1003
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d815      	bhi.n	8002aa8 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	4a2b      	ldr	r2, [pc, #172]	; (8002b2c <ADC_ConfigureBoostMode+0x208>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d908      	bls.n	8002a96 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	689a      	ldr	r2, [r3, #8]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a92:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002a94:	e03e      	b.n	8002b14 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	689a      	ldr	r2, [r3, #8]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002aa4:	609a      	str	r2, [r3, #8]
}
 8002aa6:	e035      	b.n	8002b14 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	085b      	lsrs	r3, r3, #1
 8002aac:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	4a1f      	ldr	r2, [pc, #124]	; (8002b30 <ADC_ConfigureBoostMode+0x20c>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d808      	bhi.n	8002ac8 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	689a      	ldr	r2, [r3, #8]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002ac4:	609a      	str	r2, [r3, #8]
}
 8002ac6:	e025      	b.n	8002b14 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	4a1a      	ldr	r2, [pc, #104]	; (8002b34 <ADC_ConfigureBoostMode+0x210>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d80a      	bhi.n	8002ae6 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ae2:	609a      	str	r2, [r3, #8]
}
 8002ae4:	e016      	b.n	8002b14 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	4a13      	ldr	r2, [pc, #76]	; (8002b38 <ADC_ConfigureBoostMode+0x214>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d80a      	bhi.n	8002b04 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b00:	609a      	str	r2, [r3, #8]
}
 8002b02:	e007      	b.n	8002b14 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	689a      	ldr	r2, [r3, #8]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002b12:	609a      	str	r2, [r3, #8]
}
 8002b14:	bf00      	nop
 8002b16:	3710      	adds	r7, #16
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	40022000 	.word	0x40022000
 8002b20:	40022100 	.word	0x40022100
 8002b24:	40022300 	.word	0x40022300
 8002b28:	58026300 	.word	0x58026300
 8002b2c:	01312d00 	.word	0x01312d00
 8002b30:	005f5e10 	.word	0x005f5e10
 8002b34:	00bebc20 	.word	0x00bebc20
 8002b38:	017d7840 	.word	0x017d7840

08002b3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b085      	sub	sp, #20
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	f003 0307 	and.w	r3, r3, #7
 8002b4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b4c:	4b0b      	ldr	r3, [pc, #44]	; (8002b7c <__NVIC_SetPriorityGrouping+0x40>)
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b52:	68ba      	ldr	r2, [r7, #8]
 8002b54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b58:	4013      	ands	r3, r2
 8002b5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002b64:	4b06      	ldr	r3, [pc, #24]	; (8002b80 <__NVIC_SetPriorityGrouping+0x44>)
 8002b66:	4313      	orrs	r3, r2
 8002b68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b6a:	4a04      	ldr	r2, [pc, #16]	; (8002b7c <__NVIC_SetPriorityGrouping+0x40>)
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	60d3      	str	r3, [r2, #12]
}
 8002b70:	bf00      	nop
 8002b72:	3714      	adds	r7, #20
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr
 8002b7c:	e000ed00 	.word	0xe000ed00
 8002b80:	05fa0000 	.word	0x05fa0000

08002b84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b84:	b480      	push	{r7}
 8002b86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b88:	4b04      	ldr	r3, [pc, #16]	; (8002b9c <__NVIC_GetPriorityGrouping+0x18>)
 8002b8a:	68db      	ldr	r3, [r3, #12]
 8002b8c:	0a1b      	lsrs	r3, r3, #8
 8002b8e:	f003 0307 	and.w	r3, r3, #7
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr
 8002b9c:	e000ed00 	.word	0xe000ed00

08002ba0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b083      	sub	sp, #12
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002baa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	db0b      	blt.n	8002bca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bb2:	88fb      	ldrh	r3, [r7, #6]
 8002bb4:	f003 021f 	and.w	r2, r3, #31
 8002bb8:	4907      	ldr	r1, [pc, #28]	; (8002bd8 <__NVIC_EnableIRQ+0x38>)
 8002bba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002bbe:	095b      	lsrs	r3, r3, #5
 8002bc0:	2001      	movs	r0, #1
 8002bc2:	fa00 f202 	lsl.w	r2, r0, r2
 8002bc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002bca:	bf00      	nop
 8002bcc:	370c      	adds	r7, #12
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd4:	4770      	bx	lr
 8002bd6:	bf00      	nop
 8002bd8:	e000e100 	.word	0xe000e100

08002bdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b083      	sub	sp, #12
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	4603      	mov	r3, r0
 8002be4:	6039      	str	r1, [r7, #0]
 8002be6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002be8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	db0a      	blt.n	8002c06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	b2da      	uxtb	r2, r3
 8002bf4:	490c      	ldr	r1, [pc, #48]	; (8002c28 <__NVIC_SetPriority+0x4c>)
 8002bf6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002bfa:	0112      	lsls	r2, r2, #4
 8002bfc:	b2d2      	uxtb	r2, r2
 8002bfe:	440b      	add	r3, r1
 8002c00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c04:	e00a      	b.n	8002c1c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	b2da      	uxtb	r2, r3
 8002c0a:	4908      	ldr	r1, [pc, #32]	; (8002c2c <__NVIC_SetPriority+0x50>)
 8002c0c:	88fb      	ldrh	r3, [r7, #6]
 8002c0e:	f003 030f 	and.w	r3, r3, #15
 8002c12:	3b04      	subs	r3, #4
 8002c14:	0112      	lsls	r2, r2, #4
 8002c16:	b2d2      	uxtb	r2, r2
 8002c18:	440b      	add	r3, r1
 8002c1a:	761a      	strb	r2, [r3, #24]
}
 8002c1c:	bf00      	nop
 8002c1e:	370c      	adds	r7, #12
 8002c20:	46bd      	mov	sp, r7
 8002c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c26:	4770      	bx	lr
 8002c28:	e000e100 	.word	0xe000e100
 8002c2c:	e000ed00 	.word	0xe000ed00

08002c30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b089      	sub	sp, #36	; 0x24
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	60f8      	str	r0, [r7, #12]
 8002c38:	60b9      	str	r1, [r7, #8]
 8002c3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	f003 0307 	and.w	r3, r3, #7
 8002c42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c44:	69fb      	ldr	r3, [r7, #28]
 8002c46:	f1c3 0307 	rsb	r3, r3, #7
 8002c4a:	2b04      	cmp	r3, #4
 8002c4c:	bf28      	it	cs
 8002c4e:	2304      	movcs	r3, #4
 8002c50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c52:	69fb      	ldr	r3, [r7, #28]
 8002c54:	3304      	adds	r3, #4
 8002c56:	2b06      	cmp	r3, #6
 8002c58:	d902      	bls.n	8002c60 <NVIC_EncodePriority+0x30>
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	3b03      	subs	r3, #3
 8002c5e:	e000      	b.n	8002c62 <NVIC_EncodePriority+0x32>
 8002c60:	2300      	movs	r3, #0
 8002c62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c64:	f04f 32ff 	mov.w	r2, #4294967295
 8002c68:	69bb      	ldr	r3, [r7, #24]
 8002c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6e:	43da      	mvns	r2, r3
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	401a      	ands	r2, r3
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c78:	f04f 31ff 	mov.w	r1, #4294967295
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c82:	43d9      	mvns	r1, r3
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c88:	4313      	orrs	r3, r2
         );
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3724      	adds	r7, #36	; 0x24
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr
	...

08002c98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b082      	sub	sp, #8
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	3b01      	subs	r3, #1
 8002ca4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ca8:	d301      	bcc.n	8002cae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002caa:	2301      	movs	r3, #1
 8002cac:	e00f      	b.n	8002cce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002cae:	4a0a      	ldr	r2, [pc, #40]	; (8002cd8 <SysTick_Config+0x40>)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	3b01      	subs	r3, #1
 8002cb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002cb6:	210f      	movs	r1, #15
 8002cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8002cbc:	f7ff ff8e 	bl	8002bdc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002cc0:	4b05      	ldr	r3, [pc, #20]	; (8002cd8 <SysTick_Config+0x40>)
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002cc6:	4b04      	ldr	r3, [pc, #16]	; (8002cd8 <SysTick_Config+0x40>)
 8002cc8:	2207      	movs	r2, #7
 8002cca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ccc:	2300      	movs	r3, #0
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	3708      	adds	r7, #8
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	bf00      	nop
 8002cd8:	e000e010 	.word	0xe000e010

08002cdc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b082      	sub	sp, #8
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	f7ff ff29 	bl	8002b3c <__NVIC_SetPriorityGrouping>
}
 8002cea:	bf00      	nop
 8002cec:	3708      	adds	r7, #8
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}

08002cf2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cf2:	b580      	push	{r7, lr}
 8002cf4:	b086      	sub	sp, #24
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	60b9      	str	r1, [r7, #8]
 8002cfc:	607a      	str	r2, [r7, #4]
 8002cfe:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002d00:	f7ff ff40 	bl	8002b84 <__NVIC_GetPriorityGrouping>
 8002d04:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d06:	687a      	ldr	r2, [r7, #4]
 8002d08:	68b9      	ldr	r1, [r7, #8]
 8002d0a:	6978      	ldr	r0, [r7, #20]
 8002d0c:	f7ff ff90 	bl	8002c30 <NVIC_EncodePriority>
 8002d10:	4602      	mov	r2, r0
 8002d12:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002d16:	4611      	mov	r1, r2
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f7ff ff5f 	bl	8002bdc <__NVIC_SetPriority>
}
 8002d1e:	bf00      	nop
 8002d20:	3718      	adds	r7, #24
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}

08002d26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d26:	b580      	push	{r7, lr}
 8002d28:	b082      	sub	sp, #8
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d30:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d34:	4618      	mov	r0, r3
 8002d36:	f7ff ff33 	bl	8002ba0 <__NVIC_EnableIRQ>
}
 8002d3a:	bf00      	nop
 8002d3c:	3708      	adds	r7, #8
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}

08002d42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d42:	b580      	push	{r7, lr}
 8002d44:	b082      	sub	sp, #8
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f7ff ffa4 	bl	8002c98 <SysTick_Config>
 8002d50:	4603      	mov	r3, r0
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3708      	adds	r7, #8
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
	...

08002d5c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b089      	sub	sp, #36	; 0x24
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
 8002d64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002d66:	2300      	movs	r3, #0
 8002d68:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002d6a:	4b89      	ldr	r3, [pc, #548]	; (8002f90 <HAL_GPIO_Init+0x234>)
 8002d6c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002d6e:	e194      	b.n	800309a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	2101      	movs	r1, #1
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	fa01 f303 	lsl.w	r3, r1, r3
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	f000 8186 	beq.w	8003094 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	f003 0303 	and.w	r3, r3, #3
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d005      	beq.n	8002da0 <HAL_GPIO_Init+0x44>
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	f003 0303 	and.w	r3, r3, #3
 8002d9c:	2b02      	cmp	r3, #2
 8002d9e:	d130      	bne.n	8002e02 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002da6:	69fb      	ldr	r3, [r7, #28]
 8002da8:	005b      	lsls	r3, r3, #1
 8002daa:	2203      	movs	r2, #3
 8002dac:	fa02 f303 	lsl.w	r3, r2, r3
 8002db0:	43db      	mvns	r3, r3
 8002db2:	69ba      	ldr	r2, [r7, #24]
 8002db4:	4013      	ands	r3, r2
 8002db6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	68da      	ldr	r2, [r3, #12]
 8002dbc:	69fb      	ldr	r3, [r7, #28]
 8002dbe:	005b      	lsls	r3, r3, #1
 8002dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc4:	69ba      	ldr	r2, [r7, #24]
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	69ba      	ldr	r2, [r7, #24]
 8002dce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	69fb      	ldr	r3, [r7, #28]
 8002dda:	fa02 f303 	lsl.w	r3, r2, r3
 8002dde:	43db      	mvns	r3, r3
 8002de0:	69ba      	ldr	r2, [r7, #24]
 8002de2:	4013      	ands	r3, r2
 8002de4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	091b      	lsrs	r3, r3, #4
 8002dec:	f003 0201 	and.w	r2, r3, #1
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	fa02 f303 	lsl.w	r3, r2, r3
 8002df6:	69ba      	ldr	r2, [r7, #24]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	69ba      	ldr	r2, [r7, #24]
 8002e00:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	f003 0303 	and.w	r3, r3, #3
 8002e0a:	2b03      	cmp	r3, #3
 8002e0c:	d017      	beq.n	8002e3e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	68db      	ldr	r3, [r3, #12]
 8002e12:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002e14:	69fb      	ldr	r3, [r7, #28]
 8002e16:	005b      	lsls	r3, r3, #1
 8002e18:	2203      	movs	r2, #3
 8002e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1e:	43db      	mvns	r3, r3
 8002e20:	69ba      	ldr	r2, [r7, #24]
 8002e22:	4013      	ands	r3, r2
 8002e24:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	689a      	ldr	r2, [r3, #8]
 8002e2a:	69fb      	ldr	r3, [r7, #28]
 8002e2c:	005b      	lsls	r3, r3, #1
 8002e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e32:	69ba      	ldr	r2, [r7, #24]
 8002e34:	4313      	orrs	r3, r2
 8002e36:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	69ba      	ldr	r2, [r7, #24]
 8002e3c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	f003 0303 	and.w	r3, r3, #3
 8002e46:	2b02      	cmp	r3, #2
 8002e48:	d123      	bne.n	8002e92 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	08da      	lsrs	r2, r3, #3
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	3208      	adds	r2, #8
 8002e52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	f003 0307 	and.w	r3, r3, #7
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	220f      	movs	r2, #15
 8002e62:	fa02 f303 	lsl.w	r3, r2, r3
 8002e66:	43db      	mvns	r3, r3
 8002e68:	69ba      	ldr	r2, [r7, #24]
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	691a      	ldr	r2, [r3, #16]
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	f003 0307 	and.w	r3, r3, #7
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7e:	69ba      	ldr	r2, [r7, #24]
 8002e80:	4313      	orrs	r3, r2
 8002e82:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e84:	69fb      	ldr	r3, [r7, #28]
 8002e86:	08da      	lsrs	r2, r3, #3
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	3208      	adds	r2, #8
 8002e8c:	69b9      	ldr	r1, [r7, #24]
 8002e8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	005b      	lsls	r3, r3, #1
 8002e9c:	2203      	movs	r2, #3
 8002e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea2:	43db      	mvns	r3, r3
 8002ea4:	69ba      	ldr	r2, [r7, #24]
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	f003 0203 	and.w	r2, r3, #3
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	005b      	lsls	r3, r3, #1
 8002eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eba:	69ba      	ldr	r2, [r7, #24]
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	69ba      	ldr	r2, [r7, #24]
 8002ec4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	f000 80e0 	beq.w	8003094 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ed4:	4b2f      	ldr	r3, [pc, #188]	; (8002f94 <HAL_GPIO_Init+0x238>)
 8002ed6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002eda:	4a2e      	ldr	r2, [pc, #184]	; (8002f94 <HAL_GPIO_Init+0x238>)
 8002edc:	f043 0302 	orr.w	r3, r3, #2
 8002ee0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002ee4:	4b2b      	ldr	r3, [pc, #172]	; (8002f94 <HAL_GPIO_Init+0x238>)
 8002ee6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002eea:	f003 0302 	and.w	r3, r3, #2
 8002eee:	60fb      	str	r3, [r7, #12]
 8002ef0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ef2:	4a29      	ldr	r2, [pc, #164]	; (8002f98 <HAL_GPIO_Init+0x23c>)
 8002ef4:	69fb      	ldr	r3, [r7, #28]
 8002ef6:	089b      	lsrs	r3, r3, #2
 8002ef8:	3302      	adds	r3, #2
 8002efa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002efe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002f00:	69fb      	ldr	r3, [r7, #28]
 8002f02:	f003 0303 	and.w	r3, r3, #3
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	220f      	movs	r2, #15
 8002f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0e:	43db      	mvns	r3, r3
 8002f10:	69ba      	ldr	r2, [r7, #24]
 8002f12:	4013      	ands	r3, r2
 8002f14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	4a20      	ldr	r2, [pc, #128]	; (8002f9c <HAL_GPIO_Init+0x240>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d052      	beq.n	8002fc4 <HAL_GPIO_Init+0x268>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4a1f      	ldr	r2, [pc, #124]	; (8002fa0 <HAL_GPIO_Init+0x244>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d031      	beq.n	8002f8a <HAL_GPIO_Init+0x22e>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	4a1e      	ldr	r2, [pc, #120]	; (8002fa4 <HAL_GPIO_Init+0x248>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d02b      	beq.n	8002f86 <HAL_GPIO_Init+0x22a>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	4a1d      	ldr	r2, [pc, #116]	; (8002fa8 <HAL_GPIO_Init+0x24c>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d025      	beq.n	8002f82 <HAL_GPIO_Init+0x226>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	4a1c      	ldr	r2, [pc, #112]	; (8002fac <HAL_GPIO_Init+0x250>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d01f      	beq.n	8002f7e <HAL_GPIO_Init+0x222>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	4a1b      	ldr	r2, [pc, #108]	; (8002fb0 <HAL_GPIO_Init+0x254>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d019      	beq.n	8002f7a <HAL_GPIO_Init+0x21e>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4a1a      	ldr	r2, [pc, #104]	; (8002fb4 <HAL_GPIO_Init+0x258>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d013      	beq.n	8002f76 <HAL_GPIO_Init+0x21a>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	4a19      	ldr	r2, [pc, #100]	; (8002fb8 <HAL_GPIO_Init+0x25c>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d00d      	beq.n	8002f72 <HAL_GPIO_Init+0x216>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4a18      	ldr	r2, [pc, #96]	; (8002fbc <HAL_GPIO_Init+0x260>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d007      	beq.n	8002f6e <HAL_GPIO_Init+0x212>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	4a17      	ldr	r2, [pc, #92]	; (8002fc0 <HAL_GPIO_Init+0x264>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d101      	bne.n	8002f6a <HAL_GPIO_Init+0x20e>
 8002f66:	2309      	movs	r3, #9
 8002f68:	e02d      	b.n	8002fc6 <HAL_GPIO_Init+0x26a>
 8002f6a:	230a      	movs	r3, #10
 8002f6c:	e02b      	b.n	8002fc6 <HAL_GPIO_Init+0x26a>
 8002f6e:	2308      	movs	r3, #8
 8002f70:	e029      	b.n	8002fc6 <HAL_GPIO_Init+0x26a>
 8002f72:	2307      	movs	r3, #7
 8002f74:	e027      	b.n	8002fc6 <HAL_GPIO_Init+0x26a>
 8002f76:	2306      	movs	r3, #6
 8002f78:	e025      	b.n	8002fc6 <HAL_GPIO_Init+0x26a>
 8002f7a:	2305      	movs	r3, #5
 8002f7c:	e023      	b.n	8002fc6 <HAL_GPIO_Init+0x26a>
 8002f7e:	2304      	movs	r3, #4
 8002f80:	e021      	b.n	8002fc6 <HAL_GPIO_Init+0x26a>
 8002f82:	2303      	movs	r3, #3
 8002f84:	e01f      	b.n	8002fc6 <HAL_GPIO_Init+0x26a>
 8002f86:	2302      	movs	r3, #2
 8002f88:	e01d      	b.n	8002fc6 <HAL_GPIO_Init+0x26a>
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e01b      	b.n	8002fc6 <HAL_GPIO_Init+0x26a>
 8002f8e:	bf00      	nop
 8002f90:	58000080 	.word	0x58000080
 8002f94:	58024400 	.word	0x58024400
 8002f98:	58000400 	.word	0x58000400
 8002f9c:	58020000 	.word	0x58020000
 8002fa0:	58020400 	.word	0x58020400
 8002fa4:	58020800 	.word	0x58020800
 8002fa8:	58020c00 	.word	0x58020c00
 8002fac:	58021000 	.word	0x58021000
 8002fb0:	58021400 	.word	0x58021400
 8002fb4:	58021800 	.word	0x58021800
 8002fb8:	58021c00 	.word	0x58021c00
 8002fbc:	58022000 	.word	0x58022000
 8002fc0:	58022400 	.word	0x58022400
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	69fa      	ldr	r2, [r7, #28]
 8002fc8:	f002 0203 	and.w	r2, r2, #3
 8002fcc:	0092      	lsls	r2, r2, #2
 8002fce:	4093      	lsls	r3, r2
 8002fd0:	69ba      	ldr	r2, [r7, #24]
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002fd6:	4938      	ldr	r1, [pc, #224]	; (80030b8 <HAL_GPIO_Init+0x35c>)
 8002fd8:	69fb      	ldr	r3, [r7, #28]
 8002fda:	089b      	lsrs	r3, r3, #2
 8002fdc:	3302      	adds	r3, #2
 8002fde:	69ba      	ldr	r2, [r7, #24]
 8002fe0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002fe4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	43db      	mvns	r3, r3
 8002ff0:	69ba      	ldr	r2, [r7, #24]
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d003      	beq.n	800300a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003002:	69ba      	ldr	r2, [r7, #24]
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	4313      	orrs	r3, r2
 8003008:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800300a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800300e:	69bb      	ldr	r3, [r7, #24]
 8003010:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003012:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	43db      	mvns	r3, r3
 800301e:	69ba      	ldr	r2, [r7, #24]
 8003020:	4013      	ands	r3, r2
 8003022:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800302c:	2b00      	cmp	r3, #0
 800302e:	d003      	beq.n	8003038 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003030:	69ba      	ldr	r2, [r7, #24]
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	4313      	orrs	r3, r2
 8003036:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003038:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800303c:	69bb      	ldr	r3, [r7, #24]
 800303e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	43db      	mvns	r3, r3
 800304a:	69ba      	ldr	r2, [r7, #24]
 800304c:	4013      	ands	r3, r2
 800304e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003058:	2b00      	cmp	r3, #0
 800305a:	d003      	beq.n	8003064 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800305c:	69ba      	ldr	r2, [r7, #24]
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	4313      	orrs	r3, r2
 8003062:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	69ba      	ldr	r2, [r7, #24]
 8003068:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	43db      	mvns	r3, r3
 8003074:	69ba      	ldr	r2, [r7, #24]
 8003076:	4013      	ands	r3, r2
 8003078:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d003      	beq.n	800308e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003086:	69ba      	ldr	r2, [r7, #24]
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	4313      	orrs	r3, r2
 800308c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	69ba      	ldr	r2, [r7, #24]
 8003092:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	3301      	adds	r3, #1
 8003098:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	fa22 f303 	lsr.w	r3, r2, r3
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	f47f ae63 	bne.w	8002d70 <HAL_GPIO_Init+0x14>
  }
}
 80030aa:	bf00      	nop
 80030ac:	bf00      	nop
 80030ae:	3724      	adds	r7, #36	; 0x24
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr
 80030b8:	58000400 	.word	0x58000400

080030bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030bc:	b480      	push	{r7}
 80030be:	b083      	sub	sp, #12
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
 80030c4:	460b      	mov	r3, r1
 80030c6:	807b      	strh	r3, [r7, #2]
 80030c8:	4613      	mov	r3, r2
 80030ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80030cc:	787b      	ldrb	r3, [r7, #1]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d003      	beq.n	80030da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030d2:	887a      	ldrh	r2, [r7, #2]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80030d8:	e003      	b.n	80030e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80030da:	887b      	ldrh	r3, [r7, #2]
 80030dc:	041a      	lsls	r2, r3, #16
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	619a      	str	r2, [r3, #24]
}
 80030e2:	bf00      	nop
 80030e4:	370c      	adds	r7, #12
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr

080030ee <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80030ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030f0:	b08f      	sub	sp, #60	; 0x3c
 80030f2:	af0a      	add	r7, sp, #40	; 0x28
 80030f4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d101      	bne.n	8003100 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	e116      	b.n	800332e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800310c:	b2db      	uxtb	r3, r3
 800310e:	2b00      	cmp	r3, #0
 8003110:	d106      	bne.n	8003120 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2200      	movs	r2, #0
 8003116:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f008 fefa 	bl	800bf14 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2203      	movs	r2, #3
 8003124:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800312c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003130:	2b00      	cmp	r3, #0
 8003132:	d102      	bne.n	800313a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2200      	movs	r2, #0
 8003138:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4618      	mov	r0, r3
 8003140:	f005 fae3 	bl	800870a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	603b      	str	r3, [r7, #0]
 800314a:	687e      	ldr	r6, [r7, #4]
 800314c:	466d      	mov	r5, sp
 800314e:	f106 0410 	add.w	r4, r6, #16
 8003152:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003154:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003156:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003158:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800315a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800315e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003162:	1d33      	adds	r3, r6, #4
 8003164:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003166:	6838      	ldr	r0, [r7, #0]
 8003168:	f005 f9ae 	bl	80084c8 <USB_CoreInit>
 800316c:	4603      	mov	r3, r0
 800316e:	2b00      	cmp	r3, #0
 8003170:	d005      	beq.n	800317e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2202      	movs	r2, #2
 8003176:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e0d7      	b.n	800332e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	2100      	movs	r1, #0
 8003184:	4618      	mov	r0, r3
 8003186:	f005 fad1 	bl	800872c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800318a:	2300      	movs	r3, #0
 800318c:	73fb      	strb	r3, [r7, #15]
 800318e:	e04a      	b.n	8003226 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003190:	7bfa      	ldrb	r2, [r7, #15]
 8003192:	6879      	ldr	r1, [r7, #4]
 8003194:	4613      	mov	r3, r2
 8003196:	00db      	lsls	r3, r3, #3
 8003198:	4413      	add	r3, r2
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	440b      	add	r3, r1
 800319e:	333d      	adds	r3, #61	; 0x3d
 80031a0:	2201      	movs	r2, #1
 80031a2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80031a4:	7bfa      	ldrb	r2, [r7, #15]
 80031a6:	6879      	ldr	r1, [r7, #4]
 80031a8:	4613      	mov	r3, r2
 80031aa:	00db      	lsls	r3, r3, #3
 80031ac:	4413      	add	r3, r2
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	440b      	add	r3, r1
 80031b2:	333c      	adds	r3, #60	; 0x3c
 80031b4:	7bfa      	ldrb	r2, [r7, #15]
 80031b6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80031b8:	7bfa      	ldrb	r2, [r7, #15]
 80031ba:	7bfb      	ldrb	r3, [r7, #15]
 80031bc:	b298      	uxth	r0, r3
 80031be:	6879      	ldr	r1, [r7, #4]
 80031c0:	4613      	mov	r3, r2
 80031c2:	00db      	lsls	r3, r3, #3
 80031c4:	4413      	add	r3, r2
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	440b      	add	r3, r1
 80031ca:	3356      	adds	r3, #86	; 0x56
 80031cc:	4602      	mov	r2, r0
 80031ce:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80031d0:	7bfa      	ldrb	r2, [r7, #15]
 80031d2:	6879      	ldr	r1, [r7, #4]
 80031d4:	4613      	mov	r3, r2
 80031d6:	00db      	lsls	r3, r3, #3
 80031d8:	4413      	add	r3, r2
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	440b      	add	r3, r1
 80031de:	3340      	adds	r3, #64	; 0x40
 80031e0:	2200      	movs	r2, #0
 80031e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80031e4:	7bfa      	ldrb	r2, [r7, #15]
 80031e6:	6879      	ldr	r1, [r7, #4]
 80031e8:	4613      	mov	r3, r2
 80031ea:	00db      	lsls	r3, r3, #3
 80031ec:	4413      	add	r3, r2
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	440b      	add	r3, r1
 80031f2:	3344      	adds	r3, #68	; 0x44
 80031f4:	2200      	movs	r2, #0
 80031f6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80031f8:	7bfa      	ldrb	r2, [r7, #15]
 80031fa:	6879      	ldr	r1, [r7, #4]
 80031fc:	4613      	mov	r3, r2
 80031fe:	00db      	lsls	r3, r3, #3
 8003200:	4413      	add	r3, r2
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	440b      	add	r3, r1
 8003206:	3348      	adds	r3, #72	; 0x48
 8003208:	2200      	movs	r2, #0
 800320a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800320c:	7bfa      	ldrb	r2, [r7, #15]
 800320e:	6879      	ldr	r1, [r7, #4]
 8003210:	4613      	mov	r3, r2
 8003212:	00db      	lsls	r3, r3, #3
 8003214:	4413      	add	r3, r2
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	440b      	add	r3, r1
 800321a:	334c      	adds	r3, #76	; 0x4c
 800321c:	2200      	movs	r2, #0
 800321e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003220:	7bfb      	ldrb	r3, [r7, #15]
 8003222:	3301      	adds	r3, #1
 8003224:	73fb      	strb	r3, [r7, #15]
 8003226:	7bfa      	ldrb	r2, [r7, #15]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	429a      	cmp	r2, r3
 800322e:	d3af      	bcc.n	8003190 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003230:	2300      	movs	r3, #0
 8003232:	73fb      	strb	r3, [r7, #15]
 8003234:	e044      	b.n	80032c0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003236:	7bfa      	ldrb	r2, [r7, #15]
 8003238:	6879      	ldr	r1, [r7, #4]
 800323a:	4613      	mov	r3, r2
 800323c:	00db      	lsls	r3, r3, #3
 800323e:	4413      	add	r3, r2
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	440b      	add	r3, r1
 8003244:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003248:	2200      	movs	r2, #0
 800324a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800324c:	7bfa      	ldrb	r2, [r7, #15]
 800324e:	6879      	ldr	r1, [r7, #4]
 8003250:	4613      	mov	r3, r2
 8003252:	00db      	lsls	r3, r3, #3
 8003254:	4413      	add	r3, r2
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	440b      	add	r3, r1
 800325a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800325e:	7bfa      	ldrb	r2, [r7, #15]
 8003260:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003262:	7bfa      	ldrb	r2, [r7, #15]
 8003264:	6879      	ldr	r1, [r7, #4]
 8003266:	4613      	mov	r3, r2
 8003268:	00db      	lsls	r3, r3, #3
 800326a:	4413      	add	r3, r2
 800326c:	009b      	lsls	r3, r3, #2
 800326e:	440b      	add	r3, r1
 8003270:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003274:	2200      	movs	r2, #0
 8003276:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003278:	7bfa      	ldrb	r2, [r7, #15]
 800327a:	6879      	ldr	r1, [r7, #4]
 800327c:	4613      	mov	r3, r2
 800327e:	00db      	lsls	r3, r3, #3
 8003280:	4413      	add	r3, r2
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	440b      	add	r3, r1
 8003286:	f503 7321 	add.w	r3, r3, #644	; 0x284
 800328a:	2200      	movs	r2, #0
 800328c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800328e:	7bfa      	ldrb	r2, [r7, #15]
 8003290:	6879      	ldr	r1, [r7, #4]
 8003292:	4613      	mov	r3, r2
 8003294:	00db      	lsls	r3, r3, #3
 8003296:	4413      	add	r3, r2
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	440b      	add	r3, r1
 800329c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80032a0:	2200      	movs	r2, #0
 80032a2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80032a4:	7bfa      	ldrb	r2, [r7, #15]
 80032a6:	6879      	ldr	r1, [r7, #4]
 80032a8:	4613      	mov	r3, r2
 80032aa:	00db      	lsls	r3, r3, #3
 80032ac:	4413      	add	r3, r2
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	440b      	add	r3, r1
 80032b2:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80032b6:	2200      	movs	r2, #0
 80032b8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032ba:	7bfb      	ldrb	r3, [r7, #15]
 80032bc:	3301      	adds	r3, #1
 80032be:	73fb      	strb	r3, [r7, #15]
 80032c0:	7bfa      	ldrb	r2, [r7, #15]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	429a      	cmp	r2, r3
 80032c8:	d3b5      	bcc.n	8003236 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	603b      	str	r3, [r7, #0]
 80032d0:	687e      	ldr	r6, [r7, #4]
 80032d2:	466d      	mov	r5, sp
 80032d4:	f106 0410 	add.w	r4, r6, #16
 80032d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80032da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80032dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80032de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80032e0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80032e4:	e885 0003 	stmia.w	r5, {r0, r1}
 80032e8:	1d33      	adds	r3, r6, #4
 80032ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80032ec:	6838      	ldr	r0, [r7, #0]
 80032ee:	f005 fa69 	bl	80087c4 <USB_DevInit>
 80032f2:	4603      	mov	r3, r0
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d005      	beq.n	8003304 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2202      	movs	r2, #2
 80032fc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	e014      	b.n	800332e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2200      	movs	r2, #0
 8003308:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2201      	movs	r2, #1
 8003310:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003318:	2b01      	cmp	r3, #1
 800331a:	d102      	bne.n	8003322 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800331c:	6878      	ldr	r0, [r7, #4]
 800331e:	f001 f96f 	bl	8004600 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4618      	mov	r0, r3
 8003328:	f006 faab 	bl	8009882 <USB_DevDisconnect>

  return HAL_OK;
 800332c:	2300      	movs	r3, #0
}
 800332e:	4618      	mov	r0, r3
 8003330:	3714      	adds	r7, #20
 8003332:	46bd      	mov	sp, r7
 8003334:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003336 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003336:	b580      	push	{r7, lr}
 8003338:	b084      	sub	sp, #16
 800333a:	af00      	add	r7, sp, #0
 800333c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800334a:	2b01      	cmp	r3, #1
 800334c:	d101      	bne.n	8003352 <HAL_PCD_Start+0x1c>
 800334e:	2302      	movs	r3, #2
 8003350:	e022      	b.n	8003398 <HAL_PCD_Start+0x62>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2201      	movs	r2, #1
 8003356:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800335e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003362:	2b00      	cmp	r3, #0
 8003364:	d109      	bne.n	800337a <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 800336a:	2b01      	cmp	r3, #1
 800336c:	d105      	bne.n	800337a <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003372:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4618      	mov	r0, r3
 8003380:	f005 f9b2 	bl	80086e8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4618      	mov	r0, r3
 800338a:	f006 fa59 	bl	8009840 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2200      	movs	r2, #0
 8003392:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003396:	2300      	movs	r3, #0
}
 8003398:	4618      	mov	r0, r3
 800339a:	3710      	adds	r7, #16
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}

080033a0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80033a0:	b590      	push	{r4, r7, lr}
 80033a2:	b08d      	sub	sp, #52	; 0x34
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033ae:	6a3b      	ldr	r3, [r7, #32]
 80033b0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4618      	mov	r0, r3
 80033b8:	f006 fb17 	bl	80099ea <USB_GetMode>
 80033bc:	4603      	mov	r3, r0
 80033be:	2b00      	cmp	r3, #0
 80033c0:	f040 84b7 	bne.w	8003d32 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4618      	mov	r0, r3
 80033ca:	f006 fa7b 	bl	80098c4 <USB_ReadInterrupts>
 80033ce:	4603      	mov	r3, r0
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	f000 84ad 	beq.w	8003d30 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	0a1b      	lsrs	r3, r3, #8
 80033e0:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4618      	mov	r0, r3
 80033f0:	f006 fa68 	bl	80098c4 <USB_ReadInterrupts>
 80033f4:	4603      	mov	r3, r0
 80033f6:	f003 0302 	and.w	r3, r3, #2
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	d107      	bne.n	800340e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	695a      	ldr	r2, [r3, #20]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f002 0202 	and.w	r2, r2, #2
 800340c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4618      	mov	r0, r3
 8003414:	f006 fa56 	bl	80098c4 <USB_ReadInterrupts>
 8003418:	4603      	mov	r3, r0
 800341a:	f003 0310 	and.w	r3, r3, #16
 800341e:	2b10      	cmp	r3, #16
 8003420:	d161      	bne.n	80034e6 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	699a      	ldr	r2, [r3, #24]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f022 0210 	bic.w	r2, r2, #16
 8003430:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003432:	6a3b      	ldr	r3, [r7, #32]
 8003434:	6a1b      	ldr	r3, [r3, #32]
 8003436:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003438:	69bb      	ldr	r3, [r7, #24]
 800343a:	f003 020f 	and.w	r2, r3, #15
 800343e:	4613      	mov	r3, r2
 8003440:	00db      	lsls	r3, r3, #3
 8003442:	4413      	add	r3, r2
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800344a:	687a      	ldr	r2, [r7, #4]
 800344c:	4413      	add	r3, r2
 800344e:	3304      	adds	r3, #4
 8003450:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003452:	69bb      	ldr	r3, [r7, #24]
 8003454:	0c5b      	lsrs	r3, r3, #17
 8003456:	f003 030f 	and.w	r3, r3, #15
 800345a:	2b02      	cmp	r3, #2
 800345c:	d124      	bne.n	80034a8 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800345e:	69ba      	ldr	r2, [r7, #24]
 8003460:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003464:	4013      	ands	r3, r2
 8003466:	2b00      	cmp	r3, #0
 8003468:	d035      	beq.n	80034d6 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800346e:	69bb      	ldr	r3, [r7, #24]
 8003470:	091b      	lsrs	r3, r3, #4
 8003472:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003474:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003478:	b29b      	uxth	r3, r3
 800347a:	461a      	mov	r2, r3
 800347c:	6a38      	ldr	r0, [r7, #32]
 800347e:	f006 f88d 	bl	800959c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	68da      	ldr	r2, [r3, #12]
 8003486:	69bb      	ldr	r3, [r7, #24]
 8003488:	091b      	lsrs	r3, r3, #4
 800348a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800348e:	441a      	add	r2, r3
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	695a      	ldr	r2, [r3, #20]
 8003498:	69bb      	ldr	r3, [r7, #24]
 800349a:	091b      	lsrs	r3, r3, #4
 800349c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80034a0:	441a      	add	r2, r3
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	615a      	str	r2, [r3, #20]
 80034a6:	e016      	b.n	80034d6 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80034a8:	69bb      	ldr	r3, [r7, #24]
 80034aa:	0c5b      	lsrs	r3, r3, #17
 80034ac:	f003 030f 	and.w	r3, r3, #15
 80034b0:	2b06      	cmp	r3, #6
 80034b2:	d110      	bne.n	80034d6 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80034ba:	2208      	movs	r2, #8
 80034bc:	4619      	mov	r1, r3
 80034be:	6a38      	ldr	r0, [r7, #32]
 80034c0:	f006 f86c 	bl	800959c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	695a      	ldr	r2, [r3, #20]
 80034c8:	69bb      	ldr	r3, [r7, #24]
 80034ca:	091b      	lsrs	r3, r3, #4
 80034cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80034d0:	441a      	add	r2, r3
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	699a      	ldr	r2, [r3, #24]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f042 0210 	orr.w	r2, r2, #16
 80034e4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4618      	mov	r0, r3
 80034ec:	f006 f9ea 	bl	80098c4 <USB_ReadInterrupts>
 80034f0:	4603      	mov	r3, r0
 80034f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034f6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80034fa:	f040 80a7 	bne.w	800364c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80034fe:	2300      	movs	r3, #0
 8003500:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4618      	mov	r0, r3
 8003508:	f006 f9ef 	bl	80098ea <USB_ReadDevAllOutEpInterrupt>
 800350c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800350e:	e099      	b.n	8003644 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003512:	f003 0301 	and.w	r3, r3, #1
 8003516:	2b00      	cmp	r3, #0
 8003518:	f000 808e 	beq.w	8003638 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003522:	b2d2      	uxtb	r2, r2
 8003524:	4611      	mov	r1, r2
 8003526:	4618      	mov	r0, r3
 8003528:	f006 fa13 	bl	8009952 <USB_ReadDevOutEPInterrupt>
 800352c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	f003 0301 	and.w	r3, r3, #1
 8003534:	2b00      	cmp	r3, #0
 8003536:	d00c      	beq.n	8003552 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353a:	015a      	lsls	r2, r3, #5
 800353c:	69fb      	ldr	r3, [r7, #28]
 800353e:	4413      	add	r3, r2
 8003540:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003544:	461a      	mov	r2, r3
 8003546:	2301      	movs	r3, #1
 8003548:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800354a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	f000 fed1 	bl	80042f4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	f003 0308 	and.w	r3, r3, #8
 8003558:	2b00      	cmp	r3, #0
 800355a:	d00c      	beq.n	8003576 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800355c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355e:	015a      	lsls	r2, r3, #5
 8003560:	69fb      	ldr	r3, [r7, #28]
 8003562:	4413      	add	r3, r2
 8003564:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003568:	461a      	mov	r2, r3
 800356a:	2308      	movs	r3, #8
 800356c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800356e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	f000 ffa7 	bl	80044c4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	f003 0310 	and.w	r3, r3, #16
 800357c:	2b00      	cmp	r3, #0
 800357e:	d008      	beq.n	8003592 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003582:	015a      	lsls	r2, r3, #5
 8003584:	69fb      	ldr	r3, [r7, #28]
 8003586:	4413      	add	r3, r2
 8003588:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800358c:	461a      	mov	r2, r3
 800358e:	2310      	movs	r3, #16
 8003590:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	f003 0302 	and.w	r3, r3, #2
 8003598:	2b00      	cmp	r3, #0
 800359a:	d030      	beq.n	80035fe <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800359c:	6a3b      	ldr	r3, [r7, #32]
 800359e:	695b      	ldr	r3, [r3, #20]
 80035a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035a4:	2b80      	cmp	r3, #128	; 0x80
 80035a6:	d109      	bne.n	80035bc <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80035a8:	69fb      	ldr	r3, [r7, #28]
 80035aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	69fa      	ldr	r2, [r7, #28]
 80035b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80035b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80035ba:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80035bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035be:	4613      	mov	r3, r2
 80035c0:	00db      	lsls	r3, r3, #3
 80035c2:	4413      	add	r3, r2
 80035c4:	009b      	lsls	r3, r3, #2
 80035c6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80035ca:	687a      	ldr	r2, [r7, #4]
 80035cc:	4413      	add	r3, r2
 80035ce:	3304      	adds	r3, #4
 80035d0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	78db      	ldrb	r3, [r3, #3]
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d108      	bne.n	80035ec <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	2200      	movs	r2, #0
 80035de:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80035e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e2:	b2db      	uxtb	r3, r3
 80035e4:	4619      	mov	r1, r3
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f008 fdba 	bl	800c160 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80035ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ee:	015a      	lsls	r2, r3, #5
 80035f0:	69fb      	ldr	r3, [r7, #28]
 80035f2:	4413      	add	r3, r2
 80035f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035f8:	461a      	mov	r2, r3
 80035fa:	2302      	movs	r3, #2
 80035fc:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	f003 0320 	and.w	r3, r3, #32
 8003604:	2b00      	cmp	r3, #0
 8003606:	d008      	beq.n	800361a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800360a:	015a      	lsls	r2, r3, #5
 800360c:	69fb      	ldr	r3, [r7, #28]
 800360e:	4413      	add	r3, r2
 8003610:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003614:	461a      	mov	r2, r3
 8003616:	2320      	movs	r3, #32
 8003618:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003620:	2b00      	cmp	r3, #0
 8003622:	d009      	beq.n	8003638 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003626:	015a      	lsls	r2, r3, #5
 8003628:	69fb      	ldr	r3, [r7, #28]
 800362a:	4413      	add	r3, r2
 800362c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003630:	461a      	mov	r2, r3
 8003632:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003636:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800363a:	3301      	adds	r3, #1
 800363c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800363e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003640:	085b      	lsrs	r3, r3, #1
 8003642:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003646:	2b00      	cmp	r3, #0
 8003648:	f47f af62 	bne.w	8003510 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4618      	mov	r0, r3
 8003652:	f006 f937 	bl	80098c4 <USB_ReadInterrupts>
 8003656:	4603      	mov	r3, r0
 8003658:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800365c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003660:	f040 80db 	bne.w	800381a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4618      	mov	r0, r3
 800366a:	f006 f958 	bl	800991e <USB_ReadDevAllInEpInterrupt>
 800366e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003670:	2300      	movs	r3, #0
 8003672:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003674:	e0cd      	b.n	8003812 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003678:	f003 0301 	and.w	r3, r3, #1
 800367c:	2b00      	cmp	r3, #0
 800367e:	f000 80c2 	beq.w	8003806 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003688:	b2d2      	uxtb	r2, r2
 800368a:	4611      	mov	r1, r2
 800368c:	4618      	mov	r0, r3
 800368e:	f006 f97e 	bl	800998e <USB_ReadDevInEPInterrupt>
 8003692:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	f003 0301 	and.w	r3, r3, #1
 800369a:	2b00      	cmp	r3, #0
 800369c:	d057      	beq.n	800374e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800369e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a0:	f003 030f 	and.w	r3, r3, #15
 80036a4:	2201      	movs	r2, #1
 80036a6:	fa02 f303 	lsl.w	r3, r2, r3
 80036aa:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80036ac:	69fb      	ldr	r3, [r7, #28]
 80036ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	43db      	mvns	r3, r3
 80036b8:	69f9      	ldr	r1, [r7, #28]
 80036ba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80036be:	4013      	ands	r3, r2
 80036c0:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80036c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c4:	015a      	lsls	r2, r3, #5
 80036c6:	69fb      	ldr	r3, [r7, #28]
 80036c8:	4413      	add	r3, r2
 80036ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036ce:	461a      	mov	r2, r3
 80036d0:	2301      	movs	r3, #1
 80036d2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	68db      	ldr	r3, [r3, #12]
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d132      	bne.n	8003742 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80036dc:	6879      	ldr	r1, [r7, #4]
 80036de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036e0:	4613      	mov	r3, r2
 80036e2:	00db      	lsls	r3, r3, #3
 80036e4:	4413      	add	r3, r2
 80036e6:	009b      	lsls	r3, r3, #2
 80036e8:	440b      	add	r3, r1
 80036ea:	3348      	adds	r3, #72	; 0x48
 80036ec:	6819      	ldr	r1, [r3, #0]
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036f2:	4613      	mov	r3, r2
 80036f4:	00db      	lsls	r3, r3, #3
 80036f6:	4413      	add	r3, r2
 80036f8:	009b      	lsls	r3, r3, #2
 80036fa:	4403      	add	r3, r0
 80036fc:	3344      	adds	r3, #68	; 0x44
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4419      	add	r1, r3
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003706:	4613      	mov	r3, r2
 8003708:	00db      	lsls	r3, r3, #3
 800370a:	4413      	add	r3, r2
 800370c:	009b      	lsls	r3, r3, #2
 800370e:	4403      	add	r3, r0
 8003710:	3348      	adds	r3, #72	; 0x48
 8003712:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003716:	2b00      	cmp	r3, #0
 8003718:	d113      	bne.n	8003742 <HAL_PCD_IRQHandler+0x3a2>
 800371a:	6879      	ldr	r1, [r7, #4]
 800371c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800371e:	4613      	mov	r3, r2
 8003720:	00db      	lsls	r3, r3, #3
 8003722:	4413      	add	r3, r2
 8003724:	009b      	lsls	r3, r3, #2
 8003726:	440b      	add	r3, r1
 8003728:	334c      	adds	r3, #76	; 0x4c
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d108      	bne.n	8003742 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6818      	ldr	r0, [r3, #0]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800373a:	461a      	mov	r2, r3
 800373c:	2101      	movs	r1, #1
 800373e:	f006 f987 	bl	8009a50 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003744:	b2db      	uxtb	r3, r3
 8003746:	4619      	mov	r1, r3
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	f008 fc84 	bl	800c056 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	f003 0308 	and.w	r3, r3, #8
 8003754:	2b00      	cmp	r3, #0
 8003756:	d008      	beq.n	800376a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800375a:	015a      	lsls	r2, r3, #5
 800375c:	69fb      	ldr	r3, [r7, #28]
 800375e:	4413      	add	r3, r2
 8003760:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003764:	461a      	mov	r2, r3
 8003766:	2308      	movs	r3, #8
 8003768:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	f003 0310 	and.w	r3, r3, #16
 8003770:	2b00      	cmp	r3, #0
 8003772:	d008      	beq.n	8003786 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003776:	015a      	lsls	r2, r3, #5
 8003778:	69fb      	ldr	r3, [r7, #28]
 800377a:	4413      	add	r3, r2
 800377c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003780:	461a      	mov	r2, r3
 8003782:	2310      	movs	r3, #16
 8003784:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800378c:	2b00      	cmp	r3, #0
 800378e:	d008      	beq.n	80037a2 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003792:	015a      	lsls	r2, r3, #5
 8003794:	69fb      	ldr	r3, [r7, #28]
 8003796:	4413      	add	r3, r2
 8003798:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800379c:	461a      	mov	r2, r3
 800379e:	2340      	movs	r3, #64	; 0x40
 80037a0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	f003 0302 	and.w	r3, r3, #2
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d023      	beq.n	80037f4 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80037ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80037ae:	6a38      	ldr	r0, [r7, #32]
 80037b0:	f005 f966 	bl	8008a80 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80037b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037b6:	4613      	mov	r3, r2
 80037b8:	00db      	lsls	r3, r3, #3
 80037ba:	4413      	add	r3, r2
 80037bc:	009b      	lsls	r3, r3, #2
 80037be:	3338      	adds	r3, #56	; 0x38
 80037c0:	687a      	ldr	r2, [r7, #4]
 80037c2:	4413      	add	r3, r2
 80037c4:	3304      	adds	r3, #4
 80037c6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	78db      	ldrb	r3, [r3, #3]
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d108      	bne.n	80037e2 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	2200      	movs	r2, #0
 80037d4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80037d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	4619      	mov	r1, r3
 80037dc:	6878      	ldr	r0, [r7, #4]
 80037de:	f008 fcd1 	bl	800c184 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80037e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e4:	015a      	lsls	r2, r3, #5
 80037e6:	69fb      	ldr	r3, [r7, #28]
 80037e8:	4413      	add	r3, r2
 80037ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037ee:	461a      	mov	r2, r3
 80037f0:	2302      	movs	r3, #2
 80037f2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d003      	beq.n	8003806 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80037fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003800:	6878      	ldr	r0, [r7, #4]
 8003802:	f000 fcea 	bl	80041da <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003808:	3301      	adds	r3, #1
 800380a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800380c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800380e:	085b      	lsrs	r3, r3, #1
 8003810:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003814:	2b00      	cmp	r3, #0
 8003816:	f47f af2e 	bne.w	8003676 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4618      	mov	r0, r3
 8003820:	f006 f850 	bl	80098c4 <USB_ReadInterrupts>
 8003824:	4603      	mov	r3, r0
 8003826:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800382a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800382e:	d122      	bne.n	8003876 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003830:	69fb      	ldr	r3, [r7, #28]
 8003832:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	69fa      	ldr	r2, [r7, #28]
 800383a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800383e:	f023 0301 	bic.w	r3, r3, #1
 8003842:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800384a:	2b01      	cmp	r3, #1
 800384c:	d108      	bne.n	8003860 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2200      	movs	r2, #0
 8003852:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003856:	2100      	movs	r1, #0
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f000 fef5 	bl	8004648 <HAL_PCDEx_LPM_Callback>
 800385e:	e002      	b.n	8003866 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	f008 fc6f 	bl	800c144 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	695a      	ldr	r2, [r3, #20]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003874:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4618      	mov	r0, r3
 800387c:	f006 f822 	bl	80098c4 <USB_ReadInterrupts>
 8003880:	4603      	mov	r3, r0
 8003882:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003886:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800388a:	d112      	bne.n	80038b2 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800388c:	69fb      	ldr	r3, [r7, #28]
 800388e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	f003 0301 	and.w	r3, r3, #1
 8003898:	2b01      	cmp	r3, #1
 800389a:	d102      	bne.n	80038a2 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	f008 fc2b 	bl	800c0f8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	695a      	ldr	r2, [r3, #20]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80038b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4618      	mov	r0, r3
 80038b8:	f006 f804 	bl	80098c4 <USB_ReadInterrupts>
 80038bc:	4603      	mov	r3, r0
 80038be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80038c6:	d121      	bne.n	800390c <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	695a      	ldr	r2, [r3, #20]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80038d6:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d111      	bne.n	8003906 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2201      	movs	r2, #1
 80038e6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038f0:	089b      	lsrs	r3, r3, #2
 80038f2:	f003 020f 	and.w	r2, r3, #15
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80038fc:	2101      	movs	r1, #1
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f000 fea2 	bl	8004648 <HAL_PCDEx_LPM_Callback>
 8003904:	e002      	b.n	800390c <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f008 fbf6 	bl	800c0f8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4618      	mov	r0, r3
 8003912:	f005 ffd7 	bl	80098c4 <USB_ReadInterrupts>
 8003916:	4603      	mov	r3, r0
 8003918:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800391c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003920:	f040 80b7 	bne.w	8003a92 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003924:	69fb      	ldr	r3, [r7, #28]
 8003926:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	69fa      	ldr	r2, [r7, #28]
 800392e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003932:	f023 0301 	bic.w	r3, r3, #1
 8003936:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	2110      	movs	r1, #16
 800393e:	4618      	mov	r0, r3
 8003940:	f005 f89e 	bl	8008a80 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003944:	2300      	movs	r3, #0
 8003946:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003948:	e046      	b.n	80039d8 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800394a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800394c:	015a      	lsls	r2, r3, #5
 800394e:	69fb      	ldr	r3, [r7, #28]
 8003950:	4413      	add	r3, r2
 8003952:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003956:	461a      	mov	r2, r3
 8003958:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800395c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800395e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003960:	015a      	lsls	r2, r3, #5
 8003962:	69fb      	ldr	r3, [r7, #28]
 8003964:	4413      	add	r3, r2
 8003966:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800396e:	0151      	lsls	r1, r2, #5
 8003970:	69fa      	ldr	r2, [r7, #28]
 8003972:	440a      	add	r2, r1
 8003974:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003978:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800397c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800397e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003980:	015a      	lsls	r2, r3, #5
 8003982:	69fb      	ldr	r3, [r7, #28]
 8003984:	4413      	add	r3, r2
 8003986:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800398a:	461a      	mov	r2, r3
 800398c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003990:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003994:	015a      	lsls	r2, r3, #5
 8003996:	69fb      	ldr	r3, [r7, #28]
 8003998:	4413      	add	r3, r2
 800399a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039a2:	0151      	lsls	r1, r2, #5
 80039a4:	69fa      	ldr	r2, [r7, #28]
 80039a6:	440a      	add	r2, r1
 80039a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80039ac:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80039b0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80039b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039b4:	015a      	lsls	r2, r3, #5
 80039b6:	69fb      	ldr	r3, [r7, #28]
 80039b8:	4413      	add	r3, r2
 80039ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039c2:	0151      	lsls	r1, r2, #5
 80039c4:	69fa      	ldr	r2, [r7, #28]
 80039c6:	440a      	add	r2, r1
 80039c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80039cc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80039d0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039d4:	3301      	adds	r3, #1
 80039d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039de:	429a      	cmp	r2, r3
 80039e0:	d3b3      	bcc.n	800394a <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80039e2:	69fb      	ldr	r3, [r7, #28]
 80039e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039e8:	69db      	ldr	r3, [r3, #28]
 80039ea:	69fa      	ldr	r2, [r7, #28]
 80039ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80039f0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80039f4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d016      	beq.n	8003a2c <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80039fe:	69fb      	ldr	r3, [r7, #28]
 8003a00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a08:	69fa      	ldr	r2, [r7, #28]
 8003a0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a0e:	f043 030b 	orr.w	r3, r3, #11
 8003a12:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003a16:	69fb      	ldr	r3, [r7, #28]
 8003a18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a1e:	69fa      	ldr	r2, [r7, #28]
 8003a20:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a24:	f043 030b 	orr.w	r3, r3, #11
 8003a28:	6453      	str	r3, [r2, #68]	; 0x44
 8003a2a:	e015      	b.n	8003a58 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003a2c:	69fb      	ldr	r3, [r7, #28]
 8003a2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a32:	695a      	ldr	r2, [r3, #20]
 8003a34:	69fb      	ldr	r3, [r7, #28]
 8003a36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a3a:	4619      	mov	r1, r3
 8003a3c:	f242 032b 	movw	r3, #8235	; 0x202b
 8003a40:	4313      	orrs	r3, r2
 8003a42:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003a44:	69fb      	ldr	r3, [r7, #28]
 8003a46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a4a:	691b      	ldr	r3, [r3, #16]
 8003a4c:	69fa      	ldr	r2, [r7, #28]
 8003a4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a52:	f043 030b 	orr.w	r3, r3, #11
 8003a56:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003a58:	69fb      	ldr	r3, [r7, #28]
 8003a5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	69fa      	ldr	r2, [r7, #28]
 8003a62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a66:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003a6a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6818      	ldr	r0, [r3, #0]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	68db      	ldr	r3, [r3, #12]
 8003a74:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003a7c:	461a      	mov	r2, r3
 8003a7e:	f005 ffe7 	bl	8009a50 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	695a      	ldr	r2, [r3, #20]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003a90:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4618      	mov	r0, r3
 8003a98:	f005 ff14 	bl	80098c4 <USB_ReadInterrupts>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003aa2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003aa6:	d124      	bne.n	8003af2 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4618      	mov	r0, r3
 8003aae:	f005 ffab 	bl	8009a08 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f005 f85f 	bl	8008b7a <USB_GetDevSpeed>
 8003abc:	4603      	mov	r3, r0
 8003abe:	461a      	mov	r2, r3
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681c      	ldr	r4, [r3, #0]
 8003ac8:	f001 fe58 	bl	800577c <HAL_RCC_GetHCLKFreq>
 8003acc:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003ad2:	b2db      	uxtb	r3, r3
 8003ad4:	461a      	mov	r2, r3
 8003ad6:	4620      	mov	r0, r4
 8003ad8:	f004 fd64 	bl	80085a4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003adc:	6878      	ldr	r0, [r7, #4]
 8003ade:	f008 fae2 	bl	800c0a6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	695a      	ldr	r2, [r3, #20]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003af0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4618      	mov	r0, r3
 8003af8:	f005 fee4 	bl	80098c4 <USB_ReadInterrupts>
 8003afc:	4603      	mov	r3, r0
 8003afe:	f003 0308 	and.w	r3, r3, #8
 8003b02:	2b08      	cmp	r3, #8
 8003b04:	d10a      	bne.n	8003b1c <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f008 fabf 	bl	800c08a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	695a      	ldr	r2, [r3, #20]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f002 0208 	and.w	r2, r2, #8
 8003b1a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4618      	mov	r0, r3
 8003b22:	f005 fecf 	bl	80098c4 <USB_ReadInterrupts>
 8003b26:	4603      	mov	r3, r0
 8003b28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b2c:	2b80      	cmp	r3, #128	; 0x80
 8003b2e:	d122      	bne.n	8003b76 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003b30:	6a3b      	ldr	r3, [r7, #32]
 8003b32:	699b      	ldr	r3, [r3, #24]
 8003b34:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b38:	6a3b      	ldr	r3, [r7, #32]
 8003b3a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	627b      	str	r3, [r7, #36]	; 0x24
 8003b40:	e014      	b.n	8003b6c <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003b42:	6879      	ldr	r1, [r7, #4]
 8003b44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b46:	4613      	mov	r3, r2
 8003b48:	00db      	lsls	r3, r3, #3
 8003b4a:	4413      	add	r3, r2
 8003b4c:	009b      	lsls	r3, r3, #2
 8003b4e:	440b      	add	r3, r1
 8003b50:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003b54:	781b      	ldrb	r3, [r3, #0]
 8003b56:	2b01      	cmp	r3, #1
 8003b58:	d105      	bne.n	8003b66 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	4619      	mov	r1, r3
 8003b60:	6878      	ldr	r0, [r7, #4]
 8003b62:	f000 fb09 	bl	8004178 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b68:	3301      	adds	r3, #1
 8003b6a:	627b      	str	r3, [r7, #36]	; 0x24
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b72:	429a      	cmp	r2, r3
 8003b74:	d3e5      	bcc.n	8003b42 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f005 fea2 	bl	80098c4 <USB_ReadInterrupts>
 8003b80:	4603      	mov	r3, r0
 8003b82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b8a:	d13b      	bne.n	8003c04 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	627b      	str	r3, [r7, #36]	; 0x24
 8003b90:	e02b      	b.n	8003bea <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b94:	015a      	lsls	r2, r3, #5
 8003b96:	69fb      	ldr	r3, [r7, #28]
 8003b98:	4413      	add	r3, r2
 8003b9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003ba2:	6879      	ldr	r1, [r7, #4]
 8003ba4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ba6:	4613      	mov	r3, r2
 8003ba8:	00db      	lsls	r3, r3, #3
 8003baa:	4413      	add	r3, r2
 8003bac:	009b      	lsls	r3, r3, #2
 8003bae:	440b      	add	r3, r1
 8003bb0:	3340      	adds	r3, #64	; 0x40
 8003bb2:	781b      	ldrb	r3, [r3, #0]
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d115      	bne.n	8003be4 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003bb8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	da12      	bge.n	8003be4 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003bbe:	6879      	ldr	r1, [r7, #4]
 8003bc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bc2:	4613      	mov	r3, r2
 8003bc4:	00db      	lsls	r3, r3, #3
 8003bc6:	4413      	add	r3, r2
 8003bc8:	009b      	lsls	r3, r3, #2
 8003bca:	440b      	add	r3, r1
 8003bcc:	333f      	adds	r3, #63	; 0x3f
 8003bce:	2201      	movs	r2, #1
 8003bd0:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003bda:	b2db      	uxtb	r3, r3
 8003bdc:	4619      	mov	r1, r3
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f000 faca 	bl	8004178 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be6:	3301      	adds	r3, #1
 8003be8:	627b      	str	r3, [r7, #36]	; 0x24
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d3ce      	bcc.n	8003b92 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	695a      	ldr	r2, [r3, #20]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003c02:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f005 fe5b 	bl	80098c4 <USB_ReadInterrupts>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c14:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003c18:	d155      	bne.n	8003cc6 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	627b      	str	r3, [r7, #36]	; 0x24
 8003c1e:	e045      	b.n	8003cac <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c22:	015a      	lsls	r2, r3, #5
 8003c24:	69fb      	ldr	r3, [r7, #28]
 8003c26:	4413      	add	r3, r2
 8003c28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003c30:	6879      	ldr	r1, [r7, #4]
 8003c32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c34:	4613      	mov	r3, r2
 8003c36:	00db      	lsls	r3, r3, #3
 8003c38:	4413      	add	r3, r2
 8003c3a:	009b      	lsls	r3, r3, #2
 8003c3c:	440b      	add	r3, r1
 8003c3e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003c42:	781b      	ldrb	r3, [r3, #0]
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d12e      	bne.n	8003ca6 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003c48:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	da2b      	bge.n	8003ca6 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003c4e:	69bb      	ldr	r3, [r7, #24]
 8003c50:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003c5a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	d121      	bne.n	8003ca6 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003c62:	6879      	ldr	r1, [r7, #4]
 8003c64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c66:	4613      	mov	r3, r2
 8003c68:	00db      	lsls	r3, r3, #3
 8003c6a:	4413      	add	r3, r2
 8003c6c:	009b      	lsls	r3, r3, #2
 8003c6e:	440b      	add	r3, r1
 8003c70:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003c74:	2201      	movs	r2, #1
 8003c76:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003c78:	6a3b      	ldr	r3, [r7, #32]
 8003c7a:	699b      	ldr	r3, [r3, #24]
 8003c7c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003c80:	6a3b      	ldr	r3, [r7, #32]
 8003c82:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003c84:	6a3b      	ldr	r3, [r7, #32]
 8003c86:	695b      	ldr	r3, [r3, #20]
 8003c88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d10a      	bne.n	8003ca6 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003c90:	69fb      	ldr	r3, [r7, #28]
 8003c92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	69fa      	ldr	r2, [r7, #28]
 8003c9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ca2:	6053      	str	r3, [r2, #4]
            break;
 8003ca4:	e007      	b.n	8003cb6 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca8:	3301      	adds	r3, #1
 8003caa:	627b      	str	r3, [r7, #36]	; 0x24
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	d3b4      	bcc.n	8003c20 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	695a      	ldr	r2, [r3, #20]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003cc4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f005 fdfa 	bl	80098c4 <USB_ReadInterrupts>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003cd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cda:	d10a      	bne.n	8003cf2 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003cdc:	6878      	ldr	r0, [r7, #4]
 8003cde:	f008 fa63 	bl	800c1a8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	695a      	ldr	r2, [r3, #20]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003cf0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f005 fde4 	bl	80098c4 <USB_ReadInterrupts>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	f003 0304 	and.w	r3, r3, #4
 8003d02:	2b04      	cmp	r3, #4
 8003d04:	d115      	bne.n	8003d32 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003d0e:	69bb      	ldr	r3, [r7, #24]
 8003d10:	f003 0304 	and.w	r3, r3, #4
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d002      	beq.n	8003d1e <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003d18:	6878      	ldr	r0, [r7, #4]
 8003d1a:	f008 fa53 	bl	800c1c4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	6859      	ldr	r1, [r3, #4]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	69ba      	ldr	r2, [r7, #24]
 8003d2a:	430a      	orrs	r2, r1
 8003d2c:	605a      	str	r2, [r3, #4]
 8003d2e:	e000      	b.n	8003d32 <HAL_PCD_IRQHandler+0x992>
      return;
 8003d30:	bf00      	nop
    }
  }
}
 8003d32:	3734      	adds	r7, #52	; 0x34
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd90      	pop	{r4, r7, pc}

08003d38 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b082      	sub	sp, #8
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	460b      	mov	r3, r1
 8003d42:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003d4a:	2b01      	cmp	r3, #1
 8003d4c:	d101      	bne.n	8003d52 <HAL_PCD_SetAddress+0x1a>
 8003d4e:	2302      	movs	r3, #2
 8003d50:	e013      	b.n	8003d7a <HAL_PCD_SetAddress+0x42>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2201      	movs	r2, #1
 8003d56:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	78fa      	ldrb	r2, [r7, #3]
 8003d5e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	78fa      	ldrb	r2, [r7, #3]
 8003d68:	4611      	mov	r1, r2
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f005 fd42 	bl	80097f4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2200      	movs	r2, #0
 8003d74:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003d78:	2300      	movs	r3, #0
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	3708      	adds	r7, #8
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}

08003d82 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003d82:	b580      	push	{r7, lr}
 8003d84:	b084      	sub	sp, #16
 8003d86:	af00      	add	r7, sp, #0
 8003d88:	6078      	str	r0, [r7, #4]
 8003d8a:	4608      	mov	r0, r1
 8003d8c:	4611      	mov	r1, r2
 8003d8e:	461a      	mov	r2, r3
 8003d90:	4603      	mov	r3, r0
 8003d92:	70fb      	strb	r3, [r7, #3]
 8003d94:	460b      	mov	r3, r1
 8003d96:	803b      	strh	r3, [r7, #0]
 8003d98:	4613      	mov	r3, r2
 8003d9a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003da0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	da0f      	bge.n	8003dc8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003da8:	78fb      	ldrb	r3, [r7, #3]
 8003daa:	f003 020f 	and.w	r2, r3, #15
 8003dae:	4613      	mov	r3, r2
 8003db0:	00db      	lsls	r3, r3, #3
 8003db2:	4413      	add	r3, r2
 8003db4:	009b      	lsls	r3, r3, #2
 8003db6:	3338      	adds	r3, #56	; 0x38
 8003db8:	687a      	ldr	r2, [r7, #4]
 8003dba:	4413      	add	r3, r2
 8003dbc:	3304      	adds	r3, #4
 8003dbe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	705a      	strb	r2, [r3, #1]
 8003dc6:	e00f      	b.n	8003de8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003dc8:	78fb      	ldrb	r3, [r7, #3]
 8003dca:	f003 020f 	and.w	r2, r3, #15
 8003dce:	4613      	mov	r3, r2
 8003dd0:	00db      	lsls	r3, r3, #3
 8003dd2:	4413      	add	r3, r2
 8003dd4:	009b      	lsls	r3, r3, #2
 8003dd6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003dda:	687a      	ldr	r2, [r7, #4]
 8003ddc:	4413      	add	r3, r2
 8003dde:	3304      	adds	r3, #4
 8003de0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2200      	movs	r2, #0
 8003de6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003de8:	78fb      	ldrb	r3, [r7, #3]
 8003dea:	f003 030f 	and.w	r3, r3, #15
 8003dee:	b2da      	uxtb	r2, r3
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003df4:	883a      	ldrh	r2, [r7, #0]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	78ba      	ldrb	r2, [r7, #2]
 8003dfe:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	785b      	ldrb	r3, [r3, #1]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d004      	beq.n	8003e12 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	781b      	ldrb	r3, [r3, #0]
 8003e0c:	b29a      	uxth	r2, r3
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003e12:	78bb      	ldrb	r3, [r7, #2]
 8003e14:	2b02      	cmp	r3, #2
 8003e16:	d102      	bne.n	8003e1e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d101      	bne.n	8003e2c <HAL_PCD_EP_Open+0xaa>
 8003e28:	2302      	movs	r3, #2
 8003e2a:	e00e      	b.n	8003e4a <HAL_PCD_EP_Open+0xc8>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	68f9      	ldr	r1, [r7, #12]
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f004 fec2 	bl	8008bc4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2200      	movs	r2, #0
 8003e44:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003e48:	7afb      	ldrb	r3, [r7, #11]
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3710      	adds	r7, #16
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}

08003e52 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e52:	b580      	push	{r7, lr}
 8003e54:	b084      	sub	sp, #16
 8003e56:	af00      	add	r7, sp, #0
 8003e58:	6078      	str	r0, [r7, #4]
 8003e5a:	460b      	mov	r3, r1
 8003e5c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003e5e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	da0f      	bge.n	8003e86 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e66:	78fb      	ldrb	r3, [r7, #3]
 8003e68:	f003 020f 	and.w	r2, r3, #15
 8003e6c:	4613      	mov	r3, r2
 8003e6e:	00db      	lsls	r3, r3, #3
 8003e70:	4413      	add	r3, r2
 8003e72:	009b      	lsls	r3, r3, #2
 8003e74:	3338      	adds	r3, #56	; 0x38
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	4413      	add	r3, r2
 8003e7a:	3304      	adds	r3, #4
 8003e7c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2201      	movs	r2, #1
 8003e82:	705a      	strb	r2, [r3, #1]
 8003e84:	e00f      	b.n	8003ea6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e86:	78fb      	ldrb	r3, [r7, #3]
 8003e88:	f003 020f 	and.w	r2, r3, #15
 8003e8c:	4613      	mov	r3, r2
 8003e8e:	00db      	lsls	r3, r3, #3
 8003e90:	4413      	add	r3, r2
 8003e92:	009b      	lsls	r3, r3, #2
 8003e94:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	4413      	add	r3, r2
 8003e9c:	3304      	adds	r3, #4
 8003e9e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ea6:	78fb      	ldrb	r3, [r7, #3]
 8003ea8:	f003 030f 	and.w	r3, r3, #15
 8003eac:	b2da      	uxtb	r2, r3
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d101      	bne.n	8003ec0 <HAL_PCD_EP_Close+0x6e>
 8003ebc:	2302      	movs	r3, #2
 8003ebe:	e00e      	b.n	8003ede <HAL_PCD_EP_Close+0x8c>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	68f9      	ldr	r1, [r7, #12]
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f004 ff00 	bl	8008cd4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003edc:	2300      	movs	r3, #0
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3710      	adds	r7, #16
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}

08003ee6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003ee6:	b580      	push	{r7, lr}
 8003ee8:	b086      	sub	sp, #24
 8003eea:	af00      	add	r7, sp, #0
 8003eec:	60f8      	str	r0, [r7, #12]
 8003eee:	607a      	str	r2, [r7, #4]
 8003ef0:	603b      	str	r3, [r7, #0]
 8003ef2:	460b      	mov	r3, r1
 8003ef4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ef6:	7afb      	ldrb	r3, [r7, #11]
 8003ef8:	f003 020f 	and.w	r2, r3, #15
 8003efc:	4613      	mov	r3, r2
 8003efe:	00db      	lsls	r3, r3, #3
 8003f00:	4413      	add	r3, r2
 8003f02:	009b      	lsls	r3, r3, #2
 8003f04:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003f08:	68fa      	ldr	r2, [r7, #12]
 8003f0a:	4413      	add	r3, r2
 8003f0c:	3304      	adds	r3, #4
 8003f0e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	687a      	ldr	r2, [r7, #4]
 8003f14:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	683a      	ldr	r2, [r7, #0]
 8003f1a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	2200      	movs	r2, #0
 8003f26:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f28:	7afb      	ldrb	r3, [r7, #11]
 8003f2a:	f003 030f 	and.w	r3, r3, #15
 8003f2e:	b2da      	uxtb	r2, r3
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	68db      	ldr	r3, [r3, #12]
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	d102      	bne.n	8003f42 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003f3c:	687a      	ldr	r2, [r7, #4]
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	6818      	ldr	r0, [r3, #0]
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	68db      	ldr	r3, [r3, #12]
 8003f4a:	b2db      	uxtb	r3, r3
 8003f4c:	461a      	mov	r2, r3
 8003f4e:	6979      	ldr	r1, [r7, #20]
 8003f50:	f004 ff9c 	bl	8008e8c <USB_EPStartXfer>

  return HAL_OK;
 8003f54:	2300      	movs	r3, #0
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3718      	adds	r7, #24
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}

08003f5e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f5e:	b480      	push	{r7}
 8003f60:	b083      	sub	sp, #12
 8003f62:	af00      	add	r7, sp, #0
 8003f64:	6078      	str	r0, [r7, #4]
 8003f66:	460b      	mov	r3, r1
 8003f68:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003f6a:	78fb      	ldrb	r3, [r7, #3]
 8003f6c:	f003 020f 	and.w	r2, r3, #15
 8003f70:	6879      	ldr	r1, [r7, #4]
 8003f72:	4613      	mov	r3, r2
 8003f74:	00db      	lsls	r3, r3, #3
 8003f76:	4413      	add	r3, r2
 8003f78:	009b      	lsls	r3, r3, #2
 8003f7a:	440b      	add	r3, r1
 8003f7c:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8003f80:	681b      	ldr	r3, [r3, #0]
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	370c      	adds	r7, #12
 8003f86:	46bd      	mov	sp, r7
 8003f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8c:	4770      	bx	lr

08003f8e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003f8e:	b580      	push	{r7, lr}
 8003f90:	b086      	sub	sp, #24
 8003f92:	af00      	add	r7, sp, #0
 8003f94:	60f8      	str	r0, [r7, #12]
 8003f96:	607a      	str	r2, [r7, #4]
 8003f98:	603b      	str	r3, [r7, #0]
 8003f9a:	460b      	mov	r3, r1
 8003f9c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f9e:	7afb      	ldrb	r3, [r7, #11]
 8003fa0:	f003 020f 	and.w	r2, r3, #15
 8003fa4:	4613      	mov	r3, r2
 8003fa6:	00db      	lsls	r3, r3, #3
 8003fa8:	4413      	add	r3, r2
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	3338      	adds	r3, #56	; 0x38
 8003fae:	68fa      	ldr	r2, [r7, #12]
 8003fb0:	4413      	add	r3, r2
 8003fb2:	3304      	adds	r3, #4
 8003fb4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	687a      	ldr	r2, [r7, #4]
 8003fba:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	683a      	ldr	r2, [r7, #0]
 8003fc0:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003fce:	7afb      	ldrb	r3, [r7, #11]
 8003fd0:	f003 030f 	and.w	r3, r3, #15
 8003fd4:	b2da      	uxtb	r2, r3
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	68db      	ldr	r3, [r3, #12]
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d102      	bne.n	8003fe8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003fe2:	687a      	ldr	r2, [r7, #4]
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	6818      	ldr	r0, [r3, #0]
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	68db      	ldr	r3, [r3, #12]
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	461a      	mov	r2, r3
 8003ff4:	6979      	ldr	r1, [r7, #20]
 8003ff6:	f004 ff49 	bl	8008e8c <USB_EPStartXfer>

  return HAL_OK;
 8003ffa:	2300      	movs	r3, #0
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3718      	adds	r7, #24
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}

08004004 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b084      	sub	sp, #16
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
 800400c:	460b      	mov	r3, r1
 800400e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004010:	78fb      	ldrb	r3, [r7, #3]
 8004012:	f003 020f 	and.w	r2, r3, #15
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	429a      	cmp	r2, r3
 800401c:	d901      	bls.n	8004022 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	e050      	b.n	80040c4 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004022:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004026:	2b00      	cmp	r3, #0
 8004028:	da0f      	bge.n	800404a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800402a:	78fb      	ldrb	r3, [r7, #3]
 800402c:	f003 020f 	and.w	r2, r3, #15
 8004030:	4613      	mov	r3, r2
 8004032:	00db      	lsls	r3, r3, #3
 8004034:	4413      	add	r3, r2
 8004036:	009b      	lsls	r3, r3, #2
 8004038:	3338      	adds	r3, #56	; 0x38
 800403a:	687a      	ldr	r2, [r7, #4]
 800403c:	4413      	add	r3, r2
 800403e:	3304      	adds	r3, #4
 8004040:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2201      	movs	r2, #1
 8004046:	705a      	strb	r2, [r3, #1]
 8004048:	e00d      	b.n	8004066 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800404a:	78fa      	ldrb	r2, [r7, #3]
 800404c:	4613      	mov	r3, r2
 800404e:	00db      	lsls	r3, r3, #3
 8004050:	4413      	add	r3, r2
 8004052:	009b      	lsls	r3, r3, #2
 8004054:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004058:	687a      	ldr	r2, [r7, #4]
 800405a:	4413      	add	r3, r2
 800405c:	3304      	adds	r3, #4
 800405e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2200      	movs	r2, #0
 8004064:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2201      	movs	r2, #1
 800406a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800406c:	78fb      	ldrb	r3, [r7, #3]
 800406e:	f003 030f 	and.w	r3, r3, #15
 8004072:	b2da      	uxtb	r2, r3
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800407e:	2b01      	cmp	r3, #1
 8004080:	d101      	bne.n	8004086 <HAL_PCD_EP_SetStall+0x82>
 8004082:	2302      	movs	r3, #2
 8004084:	e01e      	b.n	80040c4 <HAL_PCD_EP_SetStall+0xc0>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2201      	movs	r2, #1
 800408a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	68f9      	ldr	r1, [r7, #12]
 8004094:	4618      	mov	r0, r3
 8004096:	f005 fad9 	bl	800964c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800409a:	78fb      	ldrb	r3, [r7, #3]
 800409c:	f003 030f 	and.w	r3, r3, #15
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d10a      	bne.n	80040ba <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6818      	ldr	r0, [r3, #0]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	68db      	ldr	r3, [r3, #12]
 80040ac:	b2d9      	uxtb	r1, r3
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80040b4:	461a      	mov	r2, r3
 80040b6:	f005 fccb 	bl	8009a50 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2200      	movs	r2, #0
 80040be:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80040c2:	2300      	movs	r3, #0
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	3710      	adds	r7, #16
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}

080040cc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b084      	sub	sp, #16
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
 80040d4:	460b      	mov	r3, r1
 80040d6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80040d8:	78fb      	ldrb	r3, [r7, #3]
 80040da:	f003 020f 	and.w	r2, r3, #15
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	429a      	cmp	r2, r3
 80040e4:	d901      	bls.n	80040ea <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	e042      	b.n	8004170 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80040ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	da0f      	bge.n	8004112 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80040f2:	78fb      	ldrb	r3, [r7, #3]
 80040f4:	f003 020f 	and.w	r2, r3, #15
 80040f8:	4613      	mov	r3, r2
 80040fa:	00db      	lsls	r3, r3, #3
 80040fc:	4413      	add	r3, r2
 80040fe:	009b      	lsls	r3, r3, #2
 8004100:	3338      	adds	r3, #56	; 0x38
 8004102:	687a      	ldr	r2, [r7, #4]
 8004104:	4413      	add	r3, r2
 8004106:	3304      	adds	r3, #4
 8004108:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	2201      	movs	r2, #1
 800410e:	705a      	strb	r2, [r3, #1]
 8004110:	e00f      	b.n	8004132 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004112:	78fb      	ldrb	r3, [r7, #3]
 8004114:	f003 020f 	and.w	r2, r3, #15
 8004118:	4613      	mov	r3, r2
 800411a:	00db      	lsls	r3, r3, #3
 800411c:	4413      	add	r3, r2
 800411e:	009b      	lsls	r3, r3, #2
 8004120:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004124:	687a      	ldr	r2, [r7, #4]
 8004126:	4413      	add	r3, r2
 8004128:	3304      	adds	r3, #4
 800412a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2200      	movs	r2, #0
 8004130:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2200      	movs	r2, #0
 8004136:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004138:	78fb      	ldrb	r3, [r7, #3]
 800413a:	f003 030f 	and.w	r3, r3, #15
 800413e:	b2da      	uxtb	r2, r3
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800414a:	2b01      	cmp	r3, #1
 800414c:	d101      	bne.n	8004152 <HAL_PCD_EP_ClrStall+0x86>
 800414e:	2302      	movs	r3, #2
 8004150:	e00e      	b.n	8004170 <HAL_PCD_EP_ClrStall+0xa4>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2201      	movs	r2, #1
 8004156:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	68f9      	ldr	r1, [r7, #12]
 8004160:	4618      	mov	r0, r3
 8004162:	f005 fae1 	bl	8009728 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2200      	movs	r2, #0
 800416a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800416e:	2300      	movs	r3, #0
}
 8004170:	4618      	mov	r0, r3
 8004172:	3710      	adds	r7, #16
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}

08004178 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b084      	sub	sp, #16
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
 8004180:	460b      	mov	r3, r1
 8004182:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004184:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004188:	2b00      	cmp	r3, #0
 800418a:	da0c      	bge.n	80041a6 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800418c:	78fb      	ldrb	r3, [r7, #3]
 800418e:	f003 020f 	and.w	r2, r3, #15
 8004192:	4613      	mov	r3, r2
 8004194:	00db      	lsls	r3, r3, #3
 8004196:	4413      	add	r3, r2
 8004198:	009b      	lsls	r3, r3, #2
 800419a:	3338      	adds	r3, #56	; 0x38
 800419c:	687a      	ldr	r2, [r7, #4]
 800419e:	4413      	add	r3, r2
 80041a0:	3304      	adds	r3, #4
 80041a2:	60fb      	str	r3, [r7, #12]
 80041a4:	e00c      	b.n	80041c0 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80041a6:	78fb      	ldrb	r3, [r7, #3]
 80041a8:	f003 020f 	and.w	r2, r3, #15
 80041ac:	4613      	mov	r3, r2
 80041ae:	00db      	lsls	r3, r3, #3
 80041b0:	4413      	add	r3, r2
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80041b8:	687a      	ldr	r2, [r7, #4]
 80041ba:	4413      	add	r3, r2
 80041bc:	3304      	adds	r3, #4
 80041be:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	68f9      	ldr	r1, [r7, #12]
 80041c6:	4618      	mov	r0, r3
 80041c8:	f005 f900 	bl	80093cc <USB_EPStopXfer>
 80041cc:	4603      	mov	r3, r0
 80041ce:	72fb      	strb	r3, [r7, #11]

  return ret;
 80041d0:	7afb      	ldrb	r3, [r7, #11]
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3710      	adds	r7, #16
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}

080041da <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80041da:	b580      	push	{r7, lr}
 80041dc:	b08a      	sub	sp, #40	; 0x28
 80041de:	af02      	add	r7, sp, #8
 80041e0:	6078      	str	r0, [r7, #4]
 80041e2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80041ee:	683a      	ldr	r2, [r7, #0]
 80041f0:	4613      	mov	r3, r2
 80041f2:	00db      	lsls	r3, r3, #3
 80041f4:	4413      	add	r3, r2
 80041f6:	009b      	lsls	r3, r3, #2
 80041f8:	3338      	adds	r3, #56	; 0x38
 80041fa:	687a      	ldr	r2, [r7, #4]
 80041fc:	4413      	add	r3, r2
 80041fe:	3304      	adds	r3, #4
 8004200:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	695a      	ldr	r2, [r3, #20]
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	691b      	ldr	r3, [r3, #16]
 800420a:	429a      	cmp	r2, r3
 800420c:	d901      	bls.n	8004212 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e06c      	b.n	80042ec <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	691a      	ldr	r2, [r3, #16]
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	695b      	ldr	r3, [r3, #20]
 800421a:	1ad3      	subs	r3, r2, r3
 800421c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	69fa      	ldr	r2, [r7, #28]
 8004224:	429a      	cmp	r2, r3
 8004226:	d902      	bls.n	800422e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800422e:	69fb      	ldr	r3, [r7, #28]
 8004230:	3303      	adds	r3, #3
 8004232:	089b      	lsrs	r3, r3, #2
 8004234:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004236:	e02b      	b.n	8004290 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	691a      	ldr	r2, [r3, #16]
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	695b      	ldr	r3, [r3, #20]
 8004240:	1ad3      	subs	r3, r2, r3
 8004242:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	69fa      	ldr	r2, [r7, #28]
 800424a:	429a      	cmp	r2, r3
 800424c:	d902      	bls.n	8004254 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004254:	69fb      	ldr	r3, [r7, #28]
 8004256:	3303      	adds	r3, #3
 8004258:	089b      	lsrs	r3, r3, #2
 800425a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	68d9      	ldr	r1, [r3, #12]
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	b2da      	uxtb	r2, r3
 8004264:	69fb      	ldr	r3, [r7, #28]
 8004266:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	68db      	ldr	r3, [r3, #12]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800426c:	b2db      	uxtb	r3, r3
 800426e:	9300      	str	r3, [sp, #0]
 8004270:	4603      	mov	r3, r0
 8004272:	6978      	ldr	r0, [r7, #20]
 8004274:	f005 f954 	bl	8009520 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	68da      	ldr	r2, [r3, #12]
 800427c:	69fb      	ldr	r3, [r7, #28]
 800427e:	441a      	add	r2, r3
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	695a      	ldr	r2, [r3, #20]
 8004288:	69fb      	ldr	r3, [r7, #28]
 800428a:	441a      	add	r2, r3
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	015a      	lsls	r2, r3, #5
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	4413      	add	r3, r2
 8004298:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800429c:	699b      	ldr	r3, [r3, #24]
 800429e:	b29b      	uxth	r3, r3
 80042a0:	69ba      	ldr	r2, [r7, #24]
 80042a2:	429a      	cmp	r2, r3
 80042a4:	d809      	bhi.n	80042ba <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	695a      	ldr	r2, [r3, #20]
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80042ae:	429a      	cmp	r2, r3
 80042b0:	d203      	bcs.n	80042ba <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	691b      	ldr	r3, [r3, #16]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d1be      	bne.n	8004238 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	691a      	ldr	r2, [r3, #16]
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	695b      	ldr	r3, [r3, #20]
 80042c2:	429a      	cmp	r2, r3
 80042c4:	d811      	bhi.n	80042ea <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	f003 030f 	and.w	r3, r3, #15
 80042cc:	2201      	movs	r2, #1
 80042ce:	fa02 f303 	lsl.w	r3, r2, r3
 80042d2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	43db      	mvns	r3, r3
 80042e0:	6939      	ldr	r1, [r7, #16]
 80042e2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80042e6:	4013      	ands	r3, r2
 80042e8:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80042ea:	2300      	movs	r3, #0
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	3720      	adds	r7, #32
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}

080042f4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b088      	sub	sp, #32
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
 80042fc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004304:	69fb      	ldr	r3, [r7, #28]
 8004306:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004308:	69fb      	ldr	r3, [r7, #28]
 800430a:	333c      	adds	r3, #60	; 0x3c
 800430c:	3304      	adds	r3, #4
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	015a      	lsls	r2, r3, #5
 8004316:	69bb      	ldr	r3, [r7, #24]
 8004318:	4413      	add	r3, r2
 800431a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	68db      	ldr	r3, [r3, #12]
 8004326:	2b01      	cmp	r3, #1
 8004328:	d17b      	bne.n	8004422 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	f003 0308 	and.w	r3, r3, #8
 8004330:	2b00      	cmp	r3, #0
 8004332:	d015      	beq.n	8004360 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	4a61      	ldr	r2, [pc, #388]	; (80044bc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004338:	4293      	cmp	r3, r2
 800433a:	f240 80b9 	bls.w	80044b0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004344:	2b00      	cmp	r3, #0
 8004346:	f000 80b3 	beq.w	80044b0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	015a      	lsls	r2, r3, #5
 800434e:	69bb      	ldr	r3, [r7, #24]
 8004350:	4413      	add	r3, r2
 8004352:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004356:	461a      	mov	r2, r3
 8004358:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800435c:	6093      	str	r3, [r2, #8]
 800435e:	e0a7      	b.n	80044b0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	f003 0320 	and.w	r3, r3, #32
 8004366:	2b00      	cmp	r3, #0
 8004368:	d009      	beq.n	800437e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	015a      	lsls	r2, r3, #5
 800436e:	69bb      	ldr	r3, [r7, #24]
 8004370:	4413      	add	r3, r2
 8004372:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004376:	461a      	mov	r2, r3
 8004378:	2320      	movs	r3, #32
 800437a:	6093      	str	r3, [r2, #8]
 800437c:	e098      	b.n	80044b0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004384:	2b00      	cmp	r3, #0
 8004386:	f040 8093 	bne.w	80044b0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	4a4b      	ldr	r2, [pc, #300]	; (80044bc <PCD_EP_OutXfrComplete_int+0x1c8>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d90f      	bls.n	80043b2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004398:	2b00      	cmp	r3, #0
 800439a:	d00a      	beq.n	80043b2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	015a      	lsls	r2, r3, #5
 80043a0:	69bb      	ldr	r3, [r7, #24]
 80043a2:	4413      	add	r3, r2
 80043a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043a8:	461a      	mov	r2, r3
 80043aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043ae:	6093      	str	r3, [r2, #8]
 80043b0:	e07e      	b.n	80044b0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80043b2:	683a      	ldr	r2, [r7, #0]
 80043b4:	4613      	mov	r3, r2
 80043b6:	00db      	lsls	r3, r3, #3
 80043b8:	4413      	add	r3, r2
 80043ba:	009b      	lsls	r3, r3, #2
 80043bc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80043c0:	687a      	ldr	r2, [r7, #4]
 80043c2:	4413      	add	r3, r2
 80043c4:	3304      	adds	r3, #4
 80043c6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	6a1a      	ldr	r2, [r3, #32]
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	0159      	lsls	r1, r3, #5
 80043d0:	69bb      	ldr	r3, [r7, #24]
 80043d2:	440b      	add	r3, r1
 80043d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043d8:	691b      	ldr	r3, [r3, #16]
 80043da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043de:	1ad2      	subs	r2, r2, r3
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d114      	bne.n	8004414 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	691b      	ldr	r3, [r3, #16]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d109      	bne.n	8004406 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6818      	ldr	r0, [r3, #0]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80043fc:	461a      	mov	r2, r3
 80043fe:	2101      	movs	r1, #1
 8004400:	f005 fb26 	bl	8009a50 <USB_EP0_OutStart>
 8004404:	e006      	b.n	8004414 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	68da      	ldr	r2, [r3, #12]
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	695b      	ldr	r3, [r3, #20]
 800440e:	441a      	add	r2, r3
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	b2db      	uxtb	r3, r3
 8004418:	4619      	mov	r1, r3
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f007 fe00 	bl	800c020 <HAL_PCD_DataOutStageCallback>
 8004420:	e046      	b.n	80044b0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	4a26      	ldr	r2, [pc, #152]	; (80044c0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d124      	bne.n	8004474 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004430:	2b00      	cmp	r3, #0
 8004432:	d00a      	beq.n	800444a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	015a      	lsls	r2, r3, #5
 8004438:	69bb      	ldr	r3, [r7, #24]
 800443a:	4413      	add	r3, r2
 800443c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004440:	461a      	mov	r2, r3
 8004442:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004446:	6093      	str	r3, [r2, #8]
 8004448:	e032      	b.n	80044b0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	f003 0320 	and.w	r3, r3, #32
 8004450:	2b00      	cmp	r3, #0
 8004452:	d008      	beq.n	8004466 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	015a      	lsls	r2, r3, #5
 8004458:	69bb      	ldr	r3, [r7, #24]
 800445a:	4413      	add	r3, r2
 800445c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004460:	461a      	mov	r2, r3
 8004462:	2320      	movs	r3, #32
 8004464:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	b2db      	uxtb	r3, r3
 800446a:	4619      	mov	r1, r3
 800446c:	6878      	ldr	r0, [r7, #4]
 800446e:	f007 fdd7 	bl	800c020 <HAL_PCD_DataOutStageCallback>
 8004472:	e01d      	b.n	80044b0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d114      	bne.n	80044a4 <PCD_EP_OutXfrComplete_int+0x1b0>
 800447a:	6879      	ldr	r1, [r7, #4]
 800447c:	683a      	ldr	r2, [r7, #0]
 800447e:	4613      	mov	r3, r2
 8004480:	00db      	lsls	r3, r3, #3
 8004482:	4413      	add	r3, r2
 8004484:	009b      	lsls	r3, r3, #2
 8004486:	440b      	add	r3, r1
 8004488:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d108      	bne.n	80044a4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6818      	ldr	r0, [r3, #0]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800449c:	461a      	mov	r2, r3
 800449e:	2100      	movs	r1, #0
 80044a0:	f005 fad6 	bl	8009a50 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	b2db      	uxtb	r3, r3
 80044a8:	4619      	mov	r1, r3
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	f007 fdb8 	bl	800c020 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80044b0:	2300      	movs	r3, #0
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	3720      	adds	r7, #32
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}
 80044ba:	bf00      	nop
 80044bc:	4f54300a 	.word	0x4f54300a
 80044c0:	4f54310a 	.word	0x4f54310a

080044c4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b086      	sub	sp, #24
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	333c      	adds	r3, #60	; 0x3c
 80044dc:	3304      	adds	r3, #4
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	015a      	lsls	r2, r3, #5
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	4413      	add	r3, r2
 80044ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	4a15      	ldr	r2, [pc, #84]	; (800454c <PCD_EP_OutSetupPacket_int+0x88>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d90e      	bls.n	8004518 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004500:	2b00      	cmp	r3, #0
 8004502:	d009      	beq.n	8004518 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	015a      	lsls	r2, r3, #5
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	4413      	add	r3, r2
 800450c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004510:	461a      	mov	r2, r3
 8004512:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004516:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004518:	6878      	ldr	r0, [r7, #4]
 800451a:	f007 fd6f 	bl	800bffc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	4a0a      	ldr	r2, [pc, #40]	; (800454c <PCD_EP_OutSetupPacket_int+0x88>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d90c      	bls.n	8004540 <PCD_EP_OutSetupPacket_int+0x7c>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	68db      	ldr	r3, [r3, #12]
 800452a:	2b01      	cmp	r3, #1
 800452c:	d108      	bne.n	8004540 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6818      	ldr	r0, [r3, #0]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004538:	461a      	mov	r2, r3
 800453a:	2101      	movs	r1, #1
 800453c:	f005 fa88 	bl	8009a50 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004540:	2300      	movs	r3, #0
}
 8004542:	4618      	mov	r0, r3
 8004544:	3718      	adds	r7, #24
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}
 800454a:	bf00      	nop
 800454c:	4f54300a 	.word	0x4f54300a

08004550 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004550:	b480      	push	{r7}
 8004552:	b085      	sub	sp, #20
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
 8004558:	460b      	mov	r3, r1
 800455a:	70fb      	strb	r3, [r7, #3]
 800455c:	4613      	mov	r3, r2
 800455e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004566:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004568:	78fb      	ldrb	r3, [r7, #3]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d107      	bne.n	800457e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800456e:	883b      	ldrh	r3, [r7, #0]
 8004570:	0419      	lsls	r1, r3, #16
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	68ba      	ldr	r2, [r7, #8]
 8004578:	430a      	orrs	r2, r1
 800457a:	629a      	str	r2, [r3, #40]	; 0x28
 800457c:	e028      	b.n	80045d0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004584:	0c1b      	lsrs	r3, r3, #16
 8004586:	68ba      	ldr	r2, [r7, #8]
 8004588:	4413      	add	r3, r2
 800458a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800458c:	2300      	movs	r3, #0
 800458e:	73fb      	strb	r3, [r7, #15]
 8004590:	e00d      	b.n	80045ae <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681a      	ldr	r2, [r3, #0]
 8004596:	7bfb      	ldrb	r3, [r7, #15]
 8004598:	3340      	adds	r3, #64	; 0x40
 800459a:	009b      	lsls	r3, r3, #2
 800459c:	4413      	add	r3, r2
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	0c1b      	lsrs	r3, r3, #16
 80045a2:	68ba      	ldr	r2, [r7, #8]
 80045a4:	4413      	add	r3, r2
 80045a6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80045a8:	7bfb      	ldrb	r3, [r7, #15]
 80045aa:	3301      	adds	r3, #1
 80045ac:	73fb      	strb	r3, [r7, #15]
 80045ae:	7bfa      	ldrb	r2, [r7, #15]
 80045b0:	78fb      	ldrb	r3, [r7, #3]
 80045b2:	3b01      	subs	r3, #1
 80045b4:	429a      	cmp	r2, r3
 80045b6:	d3ec      	bcc.n	8004592 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80045b8:	883b      	ldrh	r3, [r7, #0]
 80045ba:	0418      	lsls	r0, r3, #16
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6819      	ldr	r1, [r3, #0]
 80045c0:	78fb      	ldrb	r3, [r7, #3]
 80045c2:	3b01      	subs	r3, #1
 80045c4:	68ba      	ldr	r2, [r7, #8]
 80045c6:	4302      	orrs	r2, r0
 80045c8:	3340      	adds	r3, #64	; 0x40
 80045ca:	009b      	lsls	r3, r3, #2
 80045cc:	440b      	add	r3, r1
 80045ce:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80045d0:	2300      	movs	r3, #0
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3714      	adds	r7, #20
 80045d6:	46bd      	mov	sp, r7
 80045d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045dc:	4770      	bx	lr

080045de <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80045de:	b480      	push	{r7}
 80045e0:	b083      	sub	sp, #12
 80045e2:	af00      	add	r7, sp, #0
 80045e4:	6078      	str	r0, [r7, #4]
 80045e6:	460b      	mov	r3, r1
 80045e8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	887a      	ldrh	r2, [r7, #2]
 80045f0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80045f2:	2300      	movs	r3, #0
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	370c      	adds	r7, #12
 80045f8:	46bd      	mov	sp, r7
 80045fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fe:	4770      	bx	lr

08004600 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004600:	b480      	push	{r7}
 8004602:	b085      	sub	sp, #20
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2201      	movs	r2, #1
 8004612:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2200      	movs	r2, #0
 800461a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	699b      	ldr	r3, [r3, #24]
 8004622:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800462e:	4b05      	ldr	r3, [pc, #20]	; (8004644 <HAL_PCDEx_ActivateLPM+0x44>)
 8004630:	4313      	orrs	r3, r2
 8004632:	68fa      	ldr	r2, [r7, #12]
 8004634:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004636:	2300      	movs	r3, #0
}
 8004638:	4618      	mov	r0, r3
 800463a:	3714      	adds	r7, #20
 800463c:	46bd      	mov	sp, r7
 800463e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004642:	4770      	bx	lr
 8004644:	10000003 	.word	0x10000003

08004648 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004648:	b480      	push	{r7}
 800464a:	b083      	sub	sp, #12
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
 8004650:	460b      	mov	r3, r1
 8004652:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004654:	bf00      	nop
 8004656:	370c      	adds	r7, #12
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr

08004660 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b084      	sub	sp, #16
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004668:	4b19      	ldr	r3, [pc, #100]	; (80046d0 <HAL_PWREx_ConfigSupply+0x70>)
 800466a:	68db      	ldr	r3, [r3, #12]
 800466c:	f003 0304 	and.w	r3, r3, #4
 8004670:	2b04      	cmp	r3, #4
 8004672:	d00a      	beq.n	800468a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004674:	4b16      	ldr	r3, [pc, #88]	; (80046d0 <HAL_PWREx_ConfigSupply+0x70>)
 8004676:	68db      	ldr	r3, [r3, #12]
 8004678:	f003 0307 	and.w	r3, r3, #7
 800467c:	687a      	ldr	r2, [r7, #4]
 800467e:	429a      	cmp	r2, r3
 8004680:	d001      	beq.n	8004686 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	e01f      	b.n	80046c6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004686:	2300      	movs	r3, #0
 8004688:	e01d      	b.n	80046c6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800468a:	4b11      	ldr	r3, [pc, #68]	; (80046d0 <HAL_PWREx_ConfigSupply+0x70>)
 800468c:	68db      	ldr	r3, [r3, #12]
 800468e:	f023 0207 	bic.w	r2, r3, #7
 8004692:	490f      	ldr	r1, [pc, #60]	; (80046d0 <HAL_PWREx_ConfigSupply+0x70>)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	4313      	orrs	r3, r2
 8004698:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800469a:	f7fd fa73 	bl	8001b84 <HAL_GetTick>
 800469e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80046a0:	e009      	b.n	80046b6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80046a2:	f7fd fa6f 	bl	8001b84 <HAL_GetTick>
 80046a6:	4602      	mov	r2, r0
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	1ad3      	subs	r3, r2, r3
 80046ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80046b0:	d901      	bls.n	80046b6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	e007      	b.n	80046c6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80046b6:	4b06      	ldr	r3, [pc, #24]	; (80046d0 <HAL_PWREx_ConfigSupply+0x70>)
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80046be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046c2:	d1ee      	bne.n	80046a2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80046c4:	2300      	movs	r3, #0
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3710      	adds	r7, #16
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}
 80046ce:	bf00      	nop
 80046d0:	58024800 	.word	0x58024800

080046d4 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80046d4:	b480      	push	{r7}
 80046d6:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80046d8:	4b05      	ldr	r3, [pc, #20]	; (80046f0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80046da:	68db      	ldr	r3, [r3, #12]
 80046dc:	4a04      	ldr	r2, [pc, #16]	; (80046f0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80046de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80046e2:	60d3      	str	r3, [r2, #12]
}
 80046e4:	bf00      	nop
 80046e6:	46bd      	mov	sp, r7
 80046e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ec:	4770      	bx	lr
 80046ee:	bf00      	nop
 80046f0:	58024800 	.word	0x58024800

080046f4 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b086      	sub	sp, #24
 80046f8:	af02      	add	r7, sp, #8
 80046fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80046fc:	f7fd fa42 	bl	8001b84 <HAL_GetTick>
 8004700:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d101      	bne.n	800470c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	e05f      	b.n	80047cc <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004712:	b2db      	uxtb	r3, r3
 8004714:	2b00      	cmp	r3, #0
 8004716:	d107      	bne.n	8004728 <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8004718:	6878      	ldr	r0, [r7, #4]
 800471a:	f7fc ff7b 	bl	8001614 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800471e:	f241 3188 	movw	r1, #5000	; 0x1388
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f000 f85a 	bl	80047dc <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	3b01      	subs	r3, #1
 8004738:	021a      	lsls	r2, r3, #8
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	430a      	orrs	r2, r1
 8004740:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004746:	9300      	str	r3, [sp, #0]
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	2200      	movs	r2, #0
 800474c:	2120      	movs	r1, #32
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f000 f852 	bl	80047f8 <QSPI_WaitFlagStateUntilTimeout>
 8004754:	4603      	mov	r3, r0
 8004756:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8004758:	7afb      	ldrb	r3, [r7, #11]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d135      	bne.n	80047ca <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	681a      	ldr	r2, [r3, #0]
 8004764:	4b1b      	ldr	r3, [pc, #108]	; (80047d4 <HAL_QSPI_Init+0xe0>)
 8004766:	4013      	ands	r3, r2
 8004768:	687a      	ldr	r2, [r7, #4]
 800476a:	6852      	ldr	r2, [r2, #4]
 800476c:	0611      	lsls	r1, r2, #24
 800476e:	687a      	ldr	r2, [r7, #4]
 8004770:	68d2      	ldr	r2, [r2, #12]
 8004772:	4311      	orrs	r1, r2
 8004774:	687a      	ldr	r2, [r7, #4]
 8004776:	69d2      	ldr	r2, [r2, #28]
 8004778:	4311      	orrs	r1, r2
 800477a:	687a      	ldr	r2, [r7, #4]
 800477c:	6a12      	ldr	r2, [r2, #32]
 800477e:	4311      	orrs	r1, r2
 8004780:	687a      	ldr	r2, [r7, #4]
 8004782:	6812      	ldr	r2, [r2, #0]
 8004784:	430b      	orrs	r3, r1
 8004786:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	685a      	ldr	r2, [r3, #4]
 800478e:	4b12      	ldr	r3, [pc, #72]	; (80047d8 <HAL_QSPI_Init+0xe4>)
 8004790:	4013      	ands	r3, r2
 8004792:	687a      	ldr	r2, [r7, #4]
 8004794:	6912      	ldr	r2, [r2, #16]
 8004796:	0411      	lsls	r1, r2, #16
 8004798:	687a      	ldr	r2, [r7, #4]
 800479a:	6952      	ldr	r2, [r2, #20]
 800479c:	4311      	orrs	r1, r2
 800479e:	687a      	ldr	r2, [r7, #4]
 80047a0:	6992      	ldr	r2, [r2, #24]
 80047a2:	4311      	orrs	r1, r2
 80047a4:	687a      	ldr	r2, [r7, #4]
 80047a6:	6812      	ldr	r2, [r2, #0]
 80047a8:	430b      	orrs	r3, r1
 80047aa:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f042 0201 	orr.w	r2, r2, #1
 80047ba:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2200      	movs	r2, #0
 80047c0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2201      	movs	r2, #1
 80047c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 80047ca:	7afb      	ldrb	r3, [r7, #11]
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	3710      	adds	r7, #16
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}
 80047d4:	00ffff2f 	.word	0x00ffff2f
 80047d8:	ffe0f8fe 	.word	0xffe0f8fe

080047dc <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80047dc:	b480      	push	{r7}
 80047de:	b083      	sub	sp, #12
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
 80047e4:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	683a      	ldr	r2, [r7, #0]
 80047ea:	649a      	str	r2, [r3, #72]	; 0x48
}
 80047ec:	bf00      	nop
 80047ee:	370c      	adds	r7, #12
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr

080047f8 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b084      	sub	sp, #16
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	60f8      	str	r0, [r7, #12]
 8004800:	60b9      	str	r1, [r7, #8]
 8004802:	603b      	str	r3, [r7, #0]
 8004804:	4613      	mov	r3, r2
 8004806:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004808:	e01a      	b.n	8004840 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800480a:	69bb      	ldr	r3, [r7, #24]
 800480c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004810:	d016      	beq.n	8004840 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004812:	f7fd f9b7 	bl	8001b84 <HAL_GetTick>
 8004816:	4602      	mov	r2, r0
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	1ad3      	subs	r3, r2, r3
 800481c:	69ba      	ldr	r2, [r7, #24]
 800481e:	429a      	cmp	r2, r3
 8004820:	d302      	bcc.n	8004828 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8004822:	69bb      	ldr	r3, [r7, #24]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d10b      	bne.n	8004840 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	2204      	movs	r2, #4
 800482c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004834:	f043 0201 	orr.w	r2, r3, #1
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	e00e      	b.n	800485e <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	689a      	ldr	r2, [r3, #8]
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	4013      	ands	r3, r2
 800484a:	2b00      	cmp	r3, #0
 800484c:	bf14      	ite	ne
 800484e:	2301      	movne	r3, #1
 8004850:	2300      	moveq	r3, #0
 8004852:	b2db      	uxtb	r3, r3
 8004854:	461a      	mov	r2, r3
 8004856:	79fb      	ldrb	r3, [r7, #7]
 8004858:	429a      	cmp	r2, r3
 800485a:	d1d6      	bne.n	800480a <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800485c:	2300      	movs	r3, #0
}
 800485e:	4618      	mov	r0, r3
 8004860:	3710      	adds	r7, #16
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}
	...

08004868 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b08c      	sub	sp, #48	; 0x30
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d102      	bne.n	800487c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	f000 bc48 	b.w	800510c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f003 0301 	and.w	r3, r3, #1
 8004884:	2b00      	cmp	r3, #0
 8004886:	f000 8088 	beq.w	800499a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800488a:	4b99      	ldr	r3, [pc, #612]	; (8004af0 <HAL_RCC_OscConfig+0x288>)
 800488c:	691b      	ldr	r3, [r3, #16]
 800488e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004892:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004894:	4b96      	ldr	r3, [pc, #600]	; (8004af0 <HAL_RCC_OscConfig+0x288>)
 8004896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004898:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800489a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800489c:	2b10      	cmp	r3, #16
 800489e:	d007      	beq.n	80048b0 <HAL_RCC_OscConfig+0x48>
 80048a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048a2:	2b18      	cmp	r3, #24
 80048a4:	d111      	bne.n	80048ca <HAL_RCC_OscConfig+0x62>
 80048a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048a8:	f003 0303 	and.w	r3, r3, #3
 80048ac:	2b02      	cmp	r3, #2
 80048ae:	d10c      	bne.n	80048ca <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048b0:	4b8f      	ldr	r3, [pc, #572]	; (8004af0 <HAL_RCC_OscConfig+0x288>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d06d      	beq.n	8004998 <HAL_RCC_OscConfig+0x130>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d169      	bne.n	8004998 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80048c4:	2301      	movs	r3, #1
 80048c6:	f000 bc21 	b.w	800510c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048d2:	d106      	bne.n	80048e2 <HAL_RCC_OscConfig+0x7a>
 80048d4:	4b86      	ldr	r3, [pc, #536]	; (8004af0 <HAL_RCC_OscConfig+0x288>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a85      	ldr	r2, [pc, #532]	; (8004af0 <HAL_RCC_OscConfig+0x288>)
 80048da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048de:	6013      	str	r3, [r2, #0]
 80048e0:	e02e      	b.n	8004940 <HAL_RCC_OscConfig+0xd8>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d10c      	bne.n	8004904 <HAL_RCC_OscConfig+0x9c>
 80048ea:	4b81      	ldr	r3, [pc, #516]	; (8004af0 <HAL_RCC_OscConfig+0x288>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a80      	ldr	r2, [pc, #512]	; (8004af0 <HAL_RCC_OscConfig+0x288>)
 80048f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048f4:	6013      	str	r3, [r2, #0]
 80048f6:	4b7e      	ldr	r3, [pc, #504]	; (8004af0 <HAL_RCC_OscConfig+0x288>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a7d      	ldr	r2, [pc, #500]	; (8004af0 <HAL_RCC_OscConfig+0x288>)
 80048fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004900:	6013      	str	r3, [r2, #0]
 8004902:	e01d      	b.n	8004940 <HAL_RCC_OscConfig+0xd8>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800490c:	d10c      	bne.n	8004928 <HAL_RCC_OscConfig+0xc0>
 800490e:	4b78      	ldr	r3, [pc, #480]	; (8004af0 <HAL_RCC_OscConfig+0x288>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a77      	ldr	r2, [pc, #476]	; (8004af0 <HAL_RCC_OscConfig+0x288>)
 8004914:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004918:	6013      	str	r3, [r2, #0]
 800491a:	4b75      	ldr	r3, [pc, #468]	; (8004af0 <HAL_RCC_OscConfig+0x288>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a74      	ldr	r2, [pc, #464]	; (8004af0 <HAL_RCC_OscConfig+0x288>)
 8004920:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004924:	6013      	str	r3, [r2, #0]
 8004926:	e00b      	b.n	8004940 <HAL_RCC_OscConfig+0xd8>
 8004928:	4b71      	ldr	r3, [pc, #452]	; (8004af0 <HAL_RCC_OscConfig+0x288>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a70      	ldr	r2, [pc, #448]	; (8004af0 <HAL_RCC_OscConfig+0x288>)
 800492e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004932:	6013      	str	r3, [r2, #0]
 8004934:	4b6e      	ldr	r3, [pc, #440]	; (8004af0 <HAL_RCC_OscConfig+0x288>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a6d      	ldr	r2, [pc, #436]	; (8004af0 <HAL_RCC_OscConfig+0x288>)
 800493a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800493e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d013      	beq.n	8004970 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004948:	f7fd f91c 	bl	8001b84 <HAL_GetTick>
 800494c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800494e:	e008      	b.n	8004962 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004950:	f7fd f918 	bl	8001b84 <HAL_GetTick>
 8004954:	4602      	mov	r2, r0
 8004956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004958:	1ad3      	subs	r3, r2, r3
 800495a:	2b64      	cmp	r3, #100	; 0x64
 800495c:	d901      	bls.n	8004962 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800495e:	2303      	movs	r3, #3
 8004960:	e3d4      	b.n	800510c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004962:	4b63      	ldr	r3, [pc, #396]	; (8004af0 <HAL_RCC_OscConfig+0x288>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800496a:	2b00      	cmp	r3, #0
 800496c:	d0f0      	beq.n	8004950 <HAL_RCC_OscConfig+0xe8>
 800496e:	e014      	b.n	800499a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004970:	f7fd f908 	bl	8001b84 <HAL_GetTick>
 8004974:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004976:	e008      	b.n	800498a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004978:	f7fd f904 	bl	8001b84 <HAL_GetTick>
 800497c:	4602      	mov	r2, r0
 800497e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004980:	1ad3      	subs	r3, r2, r3
 8004982:	2b64      	cmp	r3, #100	; 0x64
 8004984:	d901      	bls.n	800498a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004986:	2303      	movs	r3, #3
 8004988:	e3c0      	b.n	800510c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800498a:	4b59      	ldr	r3, [pc, #356]	; (8004af0 <HAL_RCC_OscConfig+0x288>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004992:	2b00      	cmp	r3, #0
 8004994:	d1f0      	bne.n	8004978 <HAL_RCC_OscConfig+0x110>
 8004996:	e000      	b.n	800499a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004998:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f003 0302 	and.w	r3, r3, #2
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	f000 80ca 	beq.w	8004b3c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80049a8:	4b51      	ldr	r3, [pc, #324]	; (8004af0 <HAL_RCC_OscConfig+0x288>)
 80049aa:	691b      	ldr	r3, [r3, #16]
 80049ac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80049b0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80049b2:	4b4f      	ldr	r3, [pc, #316]	; (8004af0 <HAL_RCC_OscConfig+0x288>)
 80049b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049b6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80049b8:	6a3b      	ldr	r3, [r7, #32]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d007      	beq.n	80049ce <HAL_RCC_OscConfig+0x166>
 80049be:	6a3b      	ldr	r3, [r7, #32]
 80049c0:	2b18      	cmp	r3, #24
 80049c2:	d156      	bne.n	8004a72 <HAL_RCC_OscConfig+0x20a>
 80049c4:	69fb      	ldr	r3, [r7, #28]
 80049c6:	f003 0303 	and.w	r3, r3, #3
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d151      	bne.n	8004a72 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80049ce:	4b48      	ldr	r3, [pc, #288]	; (8004af0 <HAL_RCC_OscConfig+0x288>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f003 0304 	and.w	r3, r3, #4
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d005      	beq.n	80049e6 <HAL_RCC_OscConfig+0x17e>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	68db      	ldr	r3, [r3, #12]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d101      	bne.n	80049e6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80049e2:	2301      	movs	r3, #1
 80049e4:	e392      	b.n	800510c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80049e6:	4b42      	ldr	r3, [pc, #264]	; (8004af0 <HAL_RCC_OscConfig+0x288>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f023 0219 	bic.w	r2, r3, #25
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	68db      	ldr	r3, [r3, #12]
 80049f2:	493f      	ldr	r1, [pc, #252]	; (8004af0 <HAL_RCC_OscConfig+0x288>)
 80049f4:	4313      	orrs	r3, r2
 80049f6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049f8:	f7fd f8c4 	bl	8001b84 <HAL_GetTick>
 80049fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80049fe:	e008      	b.n	8004a12 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a00:	f7fd f8c0 	bl	8001b84 <HAL_GetTick>
 8004a04:	4602      	mov	r2, r0
 8004a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a08:	1ad3      	subs	r3, r2, r3
 8004a0a:	2b02      	cmp	r3, #2
 8004a0c:	d901      	bls.n	8004a12 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004a0e:	2303      	movs	r3, #3
 8004a10:	e37c      	b.n	800510c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004a12:	4b37      	ldr	r3, [pc, #220]	; (8004af0 <HAL_RCC_OscConfig+0x288>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f003 0304 	and.w	r3, r3, #4
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d0f0      	beq.n	8004a00 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a1e:	f7fd f8e1 	bl	8001be4 <HAL_GetREVID>
 8004a22:	4603      	mov	r3, r0
 8004a24:	f241 0203 	movw	r2, #4099	; 0x1003
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d817      	bhi.n	8004a5c <HAL_RCC_OscConfig+0x1f4>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	691b      	ldr	r3, [r3, #16]
 8004a30:	2b40      	cmp	r3, #64	; 0x40
 8004a32:	d108      	bne.n	8004a46 <HAL_RCC_OscConfig+0x1de>
 8004a34:	4b2e      	ldr	r3, [pc, #184]	; (8004af0 <HAL_RCC_OscConfig+0x288>)
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004a3c:	4a2c      	ldr	r2, [pc, #176]	; (8004af0 <HAL_RCC_OscConfig+0x288>)
 8004a3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a42:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a44:	e07a      	b.n	8004b3c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a46:	4b2a      	ldr	r3, [pc, #168]	; (8004af0 <HAL_RCC_OscConfig+0x288>)
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	691b      	ldr	r3, [r3, #16]
 8004a52:	031b      	lsls	r3, r3, #12
 8004a54:	4926      	ldr	r1, [pc, #152]	; (8004af0 <HAL_RCC_OscConfig+0x288>)
 8004a56:	4313      	orrs	r3, r2
 8004a58:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a5a:	e06f      	b.n	8004b3c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a5c:	4b24      	ldr	r3, [pc, #144]	; (8004af0 <HAL_RCC_OscConfig+0x288>)
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	691b      	ldr	r3, [r3, #16]
 8004a68:	061b      	lsls	r3, r3, #24
 8004a6a:	4921      	ldr	r1, [pc, #132]	; (8004af0 <HAL_RCC_OscConfig+0x288>)
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a70:	e064      	b.n	8004b3c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	68db      	ldr	r3, [r3, #12]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d047      	beq.n	8004b0a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004a7a:	4b1d      	ldr	r3, [pc, #116]	; (8004af0 <HAL_RCC_OscConfig+0x288>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f023 0219 	bic.w	r2, r3, #25
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	68db      	ldr	r3, [r3, #12]
 8004a86:	491a      	ldr	r1, [pc, #104]	; (8004af0 <HAL_RCC_OscConfig+0x288>)
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a8c:	f7fd f87a 	bl	8001b84 <HAL_GetTick>
 8004a90:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004a92:	e008      	b.n	8004aa6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a94:	f7fd f876 	bl	8001b84 <HAL_GetTick>
 8004a98:	4602      	mov	r2, r0
 8004a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a9c:	1ad3      	subs	r3, r2, r3
 8004a9e:	2b02      	cmp	r3, #2
 8004aa0:	d901      	bls.n	8004aa6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004aa2:	2303      	movs	r3, #3
 8004aa4:	e332      	b.n	800510c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004aa6:	4b12      	ldr	r3, [pc, #72]	; (8004af0 <HAL_RCC_OscConfig+0x288>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f003 0304 	and.w	r3, r3, #4
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d0f0      	beq.n	8004a94 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ab2:	f7fd f897 	bl	8001be4 <HAL_GetREVID>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	f241 0203 	movw	r2, #4099	; 0x1003
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d819      	bhi.n	8004af4 <HAL_RCC_OscConfig+0x28c>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	691b      	ldr	r3, [r3, #16]
 8004ac4:	2b40      	cmp	r3, #64	; 0x40
 8004ac6:	d108      	bne.n	8004ada <HAL_RCC_OscConfig+0x272>
 8004ac8:	4b09      	ldr	r3, [pc, #36]	; (8004af0 <HAL_RCC_OscConfig+0x288>)
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004ad0:	4a07      	ldr	r2, [pc, #28]	; (8004af0 <HAL_RCC_OscConfig+0x288>)
 8004ad2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ad6:	6053      	str	r3, [r2, #4]
 8004ad8:	e030      	b.n	8004b3c <HAL_RCC_OscConfig+0x2d4>
 8004ada:	4b05      	ldr	r3, [pc, #20]	; (8004af0 <HAL_RCC_OscConfig+0x288>)
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	691b      	ldr	r3, [r3, #16]
 8004ae6:	031b      	lsls	r3, r3, #12
 8004ae8:	4901      	ldr	r1, [pc, #4]	; (8004af0 <HAL_RCC_OscConfig+0x288>)
 8004aea:	4313      	orrs	r3, r2
 8004aec:	604b      	str	r3, [r1, #4]
 8004aee:	e025      	b.n	8004b3c <HAL_RCC_OscConfig+0x2d4>
 8004af0:	58024400 	.word	0x58024400
 8004af4:	4b9a      	ldr	r3, [pc, #616]	; (8004d60 <HAL_RCC_OscConfig+0x4f8>)
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	691b      	ldr	r3, [r3, #16]
 8004b00:	061b      	lsls	r3, r3, #24
 8004b02:	4997      	ldr	r1, [pc, #604]	; (8004d60 <HAL_RCC_OscConfig+0x4f8>)
 8004b04:	4313      	orrs	r3, r2
 8004b06:	604b      	str	r3, [r1, #4]
 8004b08:	e018      	b.n	8004b3c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b0a:	4b95      	ldr	r3, [pc, #596]	; (8004d60 <HAL_RCC_OscConfig+0x4f8>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a94      	ldr	r2, [pc, #592]	; (8004d60 <HAL_RCC_OscConfig+0x4f8>)
 8004b10:	f023 0301 	bic.w	r3, r3, #1
 8004b14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b16:	f7fd f835 	bl	8001b84 <HAL_GetTick>
 8004b1a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004b1c:	e008      	b.n	8004b30 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b1e:	f7fd f831 	bl	8001b84 <HAL_GetTick>
 8004b22:	4602      	mov	r2, r0
 8004b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b26:	1ad3      	subs	r3, r2, r3
 8004b28:	2b02      	cmp	r3, #2
 8004b2a:	d901      	bls.n	8004b30 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004b2c:	2303      	movs	r3, #3
 8004b2e:	e2ed      	b.n	800510c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004b30:	4b8b      	ldr	r3, [pc, #556]	; (8004d60 <HAL_RCC_OscConfig+0x4f8>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f003 0304 	and.w	r3, r3, #4
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d1f0      	bne.n	8004b1e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f003 0310 	and.w	r3, r3, #16
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	f000 80a9 	beq.w	8004c9c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b4a:	4b85      	ldr	r3, [pc, #532]	; (8004d60 <HAL_RCC_OscConfig+0x4f8>)
 8004b4c:	691b      	ldr	r3, [r3, #16]
 8004b4e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b52:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004b54:	4b82      	ldr	r3, [pc, #520]	; (8004d60 <HAL_RCC_OscConfig+0x4f8>)
 8004b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b58:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004b5a:	69bb      	ldr	r3, [r7, #24]
 8004b5c:	2b08      	cmp	r3, #8
 8004b5e:	d007      	beq.n	8004b70 <HAL_RCC_OscConfig+0x308>
 8004b60:	69bb      	ldr	r3, [r7, #24]
 8004b62:	2b18      	cmp	r3, #24
 8004b64:	d13a      	bne.n	8004bdc <HAL_RCC_OscConfig+0x374>
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	f003 0303 	and.w	r3, r3, #3
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	d135      	bne.n	8004bdc <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004b70:	4b7b      	ldr	r3, [pc, #492]	; (8004d60 <HAL_RCC_OscConfig+0x4f8>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d005      	beq.n	8004b88 <HAL_RCC_OscConfig+0x320>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	69db      	ldr	r3, [r3, #28]
 8004b80:	2b80      	cmp	r3, #128	; 0x80
 8004b82:	d001      	beq.n	8004b88 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004b84:	2301      	movs	r3, #1
 8004b86:	e2c1      	b.n	800510c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004b88:	f7fd f82c 	bl	8001be4 <HAL_GetREVID>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	f241 0203 	movw	r2, #4099	; 0x1003
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d817      	bhi.n	8004bc6 <HAL_RCC_OscConfig+0x35e>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6a1b      	ldr	r3, [r3, #32]
 8004b9a:	2b20      	cmp	r3, #32
 8004b9c:	d108      	bne.n	8004bb0 <HAL_RCC_OscConfig+0x348>
 8004b9e:	4b70      	ldr	r3, [pc, #448]	; (8004d60 <HAL_RCC_OscConfig+0x4f8>)
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004ba6:	4a6e      	ldr	r2, [pc, #440]	; (8004d60 <HAL_RCC_OscConfig+0x4f8>)
 8004ba8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004bac:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004bae:	e075      	b.n	8004c9c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004bb0:	4b6b      	ldr	r3, [pc, #428]	; (8004d60 <HAL_RCC_OscConfig+0x4f8>)
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6a1b      	ldr	r3, [r3, #32]
 8004bbc:	069b      	lsls	r3, r3, #26
 8004bbe:	4968      	ldr	r1, [pc, #416]	; (8004d60 <HAL_RCC_OscConfig+0x4f8>)
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004bc4:	e06a      	b.n	8004c9c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004bc6:	4b66      	ldr	r3, [pc, #408]	; (8004d60 <HAL_RCC_OscConfig+0x4f8>)
 8004bc8:	68db      	ldr	r3, [r3, #12]
 8004bca:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6a1b      	ldr	r3, [r3, #32]
 8004bd2:	061b      	lsls	r3, r3, #24
 8004bd4:	4962      	ldr	r1, [pc, #392]	; (8004d60 <HAL_RCC_OscConfig+0x4f8>)
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004bda:	e05f      	b.n	8004c9c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	69db      	ldr	r3, [r3, #28]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d042      	beq.n	8004c6a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004be4:	4b5e      	ldr	r3, [pc, #376]	; (8004d60 <HAL_RCC_OscConfig+0x4f8>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a5d      	ldr	r2, [pc, #372]	; (8004d60 <HAL_RCC_OscConfig+0x4f8>)
 8004bea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bf0:	f7fc ffc8 	bl	8001b84 <HAL_GetTick>
 8004bf4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004bf6:	e008      	b.n	8004c0a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004bf8:	f7fc ffc4 	bl	8001b84 <HAL_GetTick>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c00:	1ad3      	subs	r3, r2, r3
 8004c02:	2b02      	cmp	r3, #2
 8004c04:	d901      	bls.n	8004c0a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004c06:	2303      	movs	r3, #3
 8004c08:	e280      	b.n	800510c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004c0a:	4b55      	ldr	r3, [pc, #340]	; (8004d60 <HAL_RCC_OscConfig+0x4f8>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d0f0      	beq.n	8004bf8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004c16:	f7fc ffe5 	bl	8001be4 <HAL_GetREVID>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	f241 0203 	movw	r2, #4099	; 0x1003
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d817      	bhi.n	8004c54 <HAL_RCC_OscConfig+0x3ec>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6a1b      	ldr	r3, [r3, #32]
 8004c28:	2b20      	cmp	r3, #32
 8004c2a:	d108      	bne.n	8004c3e <HAL_RCC_OscConfig+0x3d6>
 8004c2c:	4b4c      	ldr	r3, [pc, #304]	; (8004d60 <HAL_RCC_OscConfig+0x4f8>)
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004c34:	4a4a      	ldr	r2, [pc, #296]	; (8004d60 <HAL_RCC_OscConfig+0x4f8>)
 8004c36:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004c3a:	6053      	str	r3, [r2, #4]
 8004c3c:	e02e      	b.n	8004c9c <HAL_RCC_OscConfig+0x434>
 8004c3e:	4b48      	ldr	r3, [pc, #288]	; (8004d60 <HAL_RCC_OscConfig+0x4f8>)
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6a1b      	ldr	r3, [r3, #32]
 8004c4a:	069b      	lsls	r3, r3, #26
 8004c4c:	4944      	ldr	r1, [pc, #272]	; (8004d60 <HAL_RCC_OscConfig+0x4f8>)
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	604b      	str	r3, [r1, #4]
 8004c52:	e023      	b.n	8004c9c <HAL_RCC_OscConfig+0x434>
 8004c54:	4b42      	ldr	r3, [pc, #264]	; (8004d60 <HAL_RCC_OscConfig+0x4f8>)
 8004c56:	68db      	ldr	r3, [r3, #12]
 8004c58:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6a1b      	ldr	r3, [r3, #32]
 8004c60:	061b      	lsls	r3, r3, #24
 8004c62:	493f      	ldr	r1, [pc, #252]	; (8004d60 <HAL_RCC_OscConfig+0x4f8>)
 8004c64:	4313      	orrs	r3, r2
 8004c66:	60cb      	str	r3, [r1, #12]
 8004c68:	e018      	b.n	8004c9c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004c6a:	4b3d      	ldr	r3, [pc, #244]	; (8004d60 <HAL_RCC_OscConfig+0x4f8>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a3c      	ldr	r2, [pc, #240]	; (8004d60 <HAL_RCC_OscConfig+0x4f8>)
 8004c70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c76:	f7fc ff85 	bl	8001b84 <HAL_GetTick>
 8004c7a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004c7c:	e008      	b.n	8004c90 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004c7e:	f7fc ff81 	bl	8001b84 <HAL_GetTick>
 8004c82:	4602      	mov	r2, r0
 8004c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c86:	1ad3      	subs	r3, r2, r3
 8004c88:	2b02      	cmp	r3, #2
 8004c8a:	d901      	bls.n	8004c90 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004c8c:	2303      	movs	r3, #3
 8004c8e:	e23d      	b.n	800510c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004c90:	4b33      	ldr	r3, [pc, #204]	; (8004d60 <HAL_RCC_OscConfig+0x4f8>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d1f0      	bne.n	8004c7e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f003 0308 	and.w	r3, r3, #8
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d036      	beq.n	8004d16 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	695b      	ldr	r3, [r3, #20]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d019      	beq.n	8004ce4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004cb0:	4b2b      	ldr	r3, [pc, #172]	; (8004d60 <HAL_RCC_OscConfig+0x4f8>)
 8004cb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cb4:	4a2a      	ldr	r2, [pc, #168]	; (8004d60 <HAL_RCC_OscConfig+0x4f8>)
 8004cb6:	f043 0301 	orr.w	r3, r3, #1
 8004cba:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cbc:	f7fc ff62 	bl	8001b84 <HAL_GetTick>
 8004cc0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004cc2:	e008      	b.n	8004cd6 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004cc4:	f7fc ff5e 	bl	8001b84 <HAL_GetTick>
 8004cc8:	4602      	mov	r2, r0
 8004cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ccc:	1ad3      	subs	r3, r2, r3
 8004cce:	2b02      	cmp	r3, #2
 8004cd0:	d901      	bls.n	8004cd6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8004cd2:	2303      	movs	r3, #3
 8004cd4:	e21a      	b.n	800510c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004cd6:	4b22      	ldr	r3, [pc, #136]	; (8004d60 <HAL_RCC_OscConfig+0x4f8>)
 8004cd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cda:	f003 0302 	and.w	r3, r3, #2
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d0f0      	beq.n	8004cc4 <HAL_RCC_OscConfig+0x45c>
 8004ce2:	e018      	b.n	8004d16 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ce4:	4b1e      	ldr	r3, [pc, #120]	; (8004d60 <HAL_RCC_OscConfig+0x4f8>)
 8004ce6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ce8:	4a1d      	ldr	r2, [pc, #116]	; (8004d60 <HAL_RCC_OscConfig+0x4f8>)
 8004cea:	f023 0301 	bic.w	r3, r3, #1
 8004cee:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cf0:	f7fc ff48 	bl	8001b84 <HAL_GetTick>
 8004cf4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004cf6:	e008      	b.n	8004d0a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004cf8:	f7fc ff44 	bl	8001b84 <HAL_GetTick>
 8004cfc:	4602      	mov	r2, r0
 8004cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d00:	1ad3      	subs	r3, r2, r3
 8004d02:	2b02      	cmp	r3, #2
 8004d04:	d901      	bls.n	8004d0a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004d06:	2303      	movs	r3, #3
 8004d08:	e200      	b.n	800510c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004d0a:	4b15      	ldr	r3, [pc, #84]	; (8004d60 <HAL_RCC_OscConfig+0x4f8>)
 8004d0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d0e:	f003 0302 	and.w	r3, r3, #2
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d1f0      	bne.n	8004cf8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f003 0320 	and.w	r3, r3, #32
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d039      	beq.n	8004d96 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	699b      	ldr	r3, [r3, #24]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d01c      	beq.n	8004d64 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004d2a:	4b0d      	ldr	r3, [pc, #52]	; (8004d60 <HAL_RCC_OscConfig+0x4f8>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a0c      	ldr	r2, [pc, #48]	; (8004d60 <HAL_RCC_OscConfig+0x4f8>)
 8004d30:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004d34:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004d36:	f7fc ff25 	bl	8001b84 <HAL_GetTick>
 8004d3a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004d3c:	e008      	b.n	8004d50 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004d3e:	f7fc ff21 	bl	8001b84 <HAL_GetTick>
 8004d42:	4602      	mov	r2, r0
 8004d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d46:	1ad3      	subs	r3, r2, r3
 8004d48:	2b02      	cmp	r3, #2
 8004d4a:	d901      	bls.n	8004d50 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004d4c:	2303      	movs	r3, #3
 8004d4e:	e1dd      	b.n	800510c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004d50:	4b03      	ldr	r3, [pc, #12]	; (8004d60 <HAL_RCC_OscConfig+0x4f8>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d0f0      	beq.n	8004d3e <HAL_RCC_OscConfig+0x4d6>
 8004d5c:	e01b      	b.n	8004d96 <HAL_RCC_OscConfig+0x52e>
 8004d5e:	bf00      	nop
 8004d60:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004d64:	4b9b      	ldr	r3, [pc, #620]	; (8004fd4 <HAL_RCC_OscConfig+0x76c>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a9a      	ldr	r2, [pc, #616]	; (8004fd4 <HAL_RCC_OscConfig+0x76c>)
 8004d6a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004d6e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004d70:	f7fc ff08 	bl	8001b84 <HAL_GetTick>
 8004d74:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004d76:	e008      	b.n	8004d8a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004d78:	f7fc ff04 	bl	8001b84 <HAL_GetTick>
 8004d7c:	4602      	mov	r2, r0
 8004d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d80:	1ad3      	subs	r3, r2, r3
 8004d82:	2b02      	cmp	r3, #2
 8004d84:	d901      	bls.n	8004d8a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004d86:	2303      	movs	r3, #3
 8004d88:	e1c0      	b.n	800510c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004d8a:	4b92      	ldr	r3, [pc, #584]	; (8004fd4 <HAL_RCC_OscConfig+0x76c>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d1f0      	bne.n	8004d78 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f003 0304 	and.w	r3, r3, #4
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	f000 8081 	beq.w	8004ea6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004da4:	4b8c      	ldr	r3, [pc, #560]	; (8004fd8 <HAL_RCC_OscConfig+0x770>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a8b      	ldr	r2, [pc, #556]	; (8004fd8 <HAL_RCC_OscConfig+0x770>)
 8004daa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dae:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004db0:	f7fc fee8 	bl	8001b84 <HAL_GetTick>
 8004db4:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004db6:	e008      	b.n	8004dca <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004db8:	f7fc fee4 	bl	8001b84 <HAL_GetTick>
 8004dbc:	4602      	mov	r2, r0
 8004dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc0:	1ad3      	subs	r3, r2, r3
 8004dc2:	2b64      	cmp	r3, #100	; 0x64
 8004dc4:	d901      	bls.n	8004dca <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8004dc6:	2303      	movs	r3, #3
 8004dc8:	e1a0      	b.n	800510c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004dca:	4b83      	ldr	r3, [pc, #524]	; (8004fd8 <HAL_RCC_OscConfig+0x770>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d0f0      	beq.n	8004db8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	2b01      	cmp	r3, #1
 8004ddc:	d106      	bne.n	8004dec <HAL_RCC_OscConfig+0x584>
 8004dde:	4b7d      	ldr	r3, [pc, #500]	; (8004fd4 <HAL_RCC_OscConfig+0x76c>)
 8004de0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004de2:	4a7c      	ldr	r2, [pc, #496]	; (8004fd4 <HAL_RCC_OscConfig+0x76c>)
 8004de4:	f043 0301 	orr.w	r3, r3, #1
 8004de8:	6713      	str	r3, [r2, #112]	; 0x70
 8004dea:	e02d      	b.n	8004e48 <HAL_RCC_OscConfig+0x5e0>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d10c      	bne.n	8004e0e <HAL_RCC_OscConfig+0x5a6>
 8004df4:	4b77      	ldr	r3, [pc, #476]	; (8004fd4 <HAL_RCC_OscConfig+0x76c>)
 8004df6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004df8:	4a76      	ldr	r2, [pc, #472]	; (8004fd4 <HAL_RCC_OscConfig+0x76c>)
 8004dfa:	f023 0301 	bic.w	r3, r3, #1
 8004dfe:	6713      	str	r3, [r2, #112]	; 0x70
 8004e00:	4b74      	ldr	r3, [pc, #464]	; (8004fd4 <HAL_RCC_OscConfig+0x76c>)
 8004e02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e04:	4a73      	ldr	r2, [pc, #460]	; (8004fd4 <HAL_RCC_OscConfig+0x76c>)
 8004e06:	f023 0304 	bic.w	r3, r3, #4
 8004e0a:	6713      	str	r3, [r2, #112]	; 0x70
 8004e0c:	e01c      	b.n	8004e48 <HAL_RCC_OscConfig+0x5e0>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	689b      	ldr	r3, [r3, #8]
 8004e12:	2b05      	cmp	r3, #5
 8004e14:	d10c      	bne.n	8004e30 <HAL_RCC_OscConfig+0x5c8>
 8004e16:	4b6f      	ldr	r3, [pc, #444]	; (8004fd4 <HAL_RCC_OscConfig+0x76c>)
 8004e18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e1a:	4a6e      	ldr	r2, [pc, #440]	; (8004fd4 <HAL_RCC_OscConfig+0x76c>)
 8004e1c:	f043 0304 	orr.w	r3, r3, #4
 8004e20:	6713      	str	r3, [r2, #112]	; 0x70
 8004e22:	4b6c      	ldr	r3, [pc, #432]	; (8004fd4 <HAL_RCC_OscConfig+0x76c>)
 8004e24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e26:	4a6b      	ldr	r2, [pc, #428]	; (8004fd4 <HAL_RCC_OscConfig+0x76c>)
 8004e28:	f043 0301 	orr.w	r3, r3, #1
 8004e2c:	6713      	str	r3, [r2, #112]	; 0x70
 8004e2e:	e00b      	b.n	8004e48 <HAL_RCC_OscConfig+0x5e0>
 8004e30:	4b68      	ldr	r3, [pc, #416]	; (8004fd4 <HAL_RCC_OscConfig+0x76c>)
 8004e32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e34:	4a67      	ldr	r2, [pc, #412]	; (8004fd4 <HAL_RCC_OscConfig+0x76c>)
 8004e36:	f023 0301 	bic.w	r3, r3, #1
 8004e3a:	6713      	str	r3, [r2, #112]	; 0x70
 8004e3c:	4b65      	ldr	r3, [pc, #404]	; (8004fd4 <HAL_RCC_OscConfig+0x76c>)
 8004e3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e40:	4a64      	ldr	r2, [pc, #400]	; (8004fd4 <HAL_RCC_OscConfig+0x76c>)
 8004e42:	f023 0304 	bic.w	r3, r3, #4
 8004e46:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	689b      	ldr	r3, [r3, #8]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d015      	beq.n	8004e7c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e50:	f7fc fe98 	bl	8001b84 <HAL_GetTick>
 8004e54:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004e56:	e00a      	b.n	8004e6e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e58:	f7fc fe94 	bl	8001b84 <HAL_GetTick>
 8004e5c:	4602      	mov	r2, r0
 8004e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e60:	1ad3      	subs	r3, r2, r3
 8004e62:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d901      	bls.n	8004e6e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004e6a:	2303      	movs	r3, #3
 8004e6c:	e14e      	b.n	800510c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004e6e:	4b59      	ldr	r3, [pc, #356]	; (8004fd4 <HAL_RCC_OscConfig+0x76c>)
 8004e70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e72:	f003 0302 	and.w	r3, r3, #2
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d0ee      	beq.n	8004e58 <HAL_RCC_OscConfig+0x5f0>
 8004e7a:	e014      	b.n	8004ea6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e7c:	f7fc fe82 	bl	8001b84 <HAL_GetTick>
 8004e80:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004e82:	e00a      	b.n	8004e9a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e84:	f7fc fe7e 	bl	8001b84 <HAL_GetTick>
 8004e88:	4602      	mov	r2, r0
 8004e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e8c:	1ad3      	subs	r3, r2, r3
 8004e8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d901      	bls.n	8004e9a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004e96:	2303      	movs	r3, #3
 8004e98:	e138      	b.n	800510c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004e9a:	4b4e      	ldr	r3, [pc, #312]	; (8004fd4 <HAL_RCC_OscConfig+0x76c>)
 8004e9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e9e:	f003 0302 	and.w	r3, r3, #2
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d1ee      	bne.n	8004e84 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	f000 812d 	beq.w	800510a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004eb0:	4b48      	ldr	r3, [pc, #288]	; (8004fd4 <HAL_RCC_OscConfig+0x76c>)
 8004eb2:	691b      	ldr	r3, [r3, #16]
 8004eb4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004eb8:	2b18      	cmp	r3, #24
 8004eba:	f000 80bd 	beq.w	8005038 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec2:	2b02      	cmp	r3, #2
 8004ec4:	f040 809e 	bne.w	8005004 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ec8:	4b42      	ldr	r3, [pc, #264]	; (8004fd4 <HAL_RCC_OscConfig+0x76c>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a41      	ldr	r2, [pc, #260]	; (8004fd4 <HAL_RCC_OscConfig+0x76c>)
 8004ece:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ed2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ed4:	f7fc fe56 	bl	8001b84 <HAL_GetTick>
 8004ed8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004eda:	e008      	b.n	8004eee <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004edc:	f7fc fe52 	bl	8001b84 <HAL_GetTick>
 8004ee0:	4602      	mov	r2, r0
 8004ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee4:	1ad3      	subs	r3, r2, r3
 8004ee6:	2b02      	cmp	r3, #2
 8004ee8:	d901      	bls.n	8004eee <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004eea:	2303      	movs	r3, #3
 8004eec:	e10e      	b.n	800510c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004eee:	4b39      	ldr	r3, [pc, #228]	; (8004fd4 <HAL_RCC_OscConfig+0x76c>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d1f0      	bne.n	8004edc <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004efa:	4b36      	ldr	r3, [pc, #216]	; (8004fd4 <HAL_RCC_OscConfig+0x76c>)
 8004efc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004efe:	4b37      	ldr	r3, [pc, #220]	; (8004fdc <HAL_RCC_OscConfig+0x774>)
 8004f00:	4013      	ands	r3, r2
 8004f02:	687a      	ldr	r2, [r7, #4]
 8004f04:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004f06:	687a      	ldr	r2, [r7, #4]
 8004f08:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004f0a:	0112      	lsls	r2, r2, #4
 8004f0c:	430a      	orrs	r2, r1
 8004f0e:	4931      	ldr	r1, [pc, #196]	; (8004fd4 <HAL_RCC_OscConfig+0x76c>)
 8004f10:	4313      	orrs	r3, r2
 8004f12:	628b      	str	r3, [r1, #40]	; 0x28
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f18:	3b01      	subs	r3, #1
 8004f1a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f22:	3b01      	subs	r3, #1
 8004f24:	025b      	lsls	r3, r3, #9
 8004f26:	b29b      	uxth	r3, r3
 8004f28:	431a      	orrs	r2, r3
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f2e:	3b01      	subs	r3, #1
 8004f30:	041b      	lsls	r3, r3, #16
 8004f32:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004f36:	431a      	orrs	r2, r3
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f3c:	3b01      	subs	r3, #1
 8004f3e:	061b      	lsls	r3, r3, #24
 8004f40:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004f44:	4923      	ldr	r1, [pc, #140]	; (8004fd4 <HAL_RCC_OscConfig+0x76c>)
 8004f46:	4313      	orrs	r3, r2
 8004f48:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004f4a:	4b22      	ldr	r3, [pc, #136]	; (8004fd4 <HAL_RCC_OscConfig+0x76c>)
 8004f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f4e:	4a21      	ldr	r2, [pc, #132]	; (8004fd4 <HAL_RCC_OscConfig+0x76c>)
 8004f50:	f023 0301 	bic.w	r3, r3, #1
 8004f54:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004f56:	4b1f      	ldr	r3, [pc, #124]	; (8004fd4 <HAL_RCC_OscConfig+0x76c>)
 8004f58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f5a:	4b21      	ldr	r3, [pc, #132]	; (8004fe0 <HAL_RCC_OscConfig+0x778>)
 8004f5c:	4013      	ands	r3, r2
 8004f5e:	687a      	ldr	r2, [r7, #4]
 8004f60:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004f62:	00d2      	lsls	r2, r2, #3
 8004f64:	491b      	ldr	r1, [pc, #108]	; (8004fd4 <HAL_RCC_OscConfig+0x76c>)
 8004f66:	4313      	orrs	r3, r2
 8004f68:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004f6a:	4b1a      	ldr	r3, [pc, #104]	; (8004fd4 <HAL_RCC_OscConfig+0x76c>)
 8004f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f6e:	f023 020c 	bic.w	r2, r3, #12
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f76:	4917      	ldr	r1, [pc, #92]	; (8004fd4 <HAL_RCC_OscConfig+0x76c>)
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004f7c:	4b15      	ldr	r3, [pc, #84]	; (8004fd4 <HAL_RCC_OscConfig+0x76c>)
 8004f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f80:	f023 0202 	bic.w	r2, r3, #2
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f88:	4912      	ldr	r1, [pc, #72]	; (8004fd4 <HAL_RCC_OscConfig+0x76c>)
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004f8e:	4b11      	ldr	r3, [pc, #68]	; (8004fd4 <HAL_RCC_OscConfig+0x76c>)
 8004f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f92:	4a10      	ldr	r2, [pc, #64]	; (8004fd4 <HAL_RCC_OscConfig+0x76c>)
 8004f94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f98:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f9a:	4b0e      	ldr	r3, [pc, #56]	; (8004fd4 <HAL_RCC_OscConfig+0x76c>)
 8004f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f9e:	4a0d      	ldr	r2, [pc, #52]	; (8004fd4 <HAL_RCC_OscConfig+0x76c>)
 8004fa0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004fa4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004fa6:	4b0b      	ldr	r3, [pc, #44]	; (8004fd4 <HAL_RCC_OscConfig+0x76c>)
 8004fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004faa:	4a0a      	ldr	r2, [pc, #40]	; (8004fd4 <HAL_RCC_OscConfig+0x76c>)
 8004fac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004fb0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004fb2:	4b08      	ldr	r3, [pc, #32]	; (8004fd4 <HAL_RCC_OscConfig+0x76c>)
 8004fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fb6:	4a07      	ldr	r2, [pc, #28]	; (8004fd4 <HAL_RCC_OscConfig+0x76c>)
 8004fb8:	f043 0301 	orr.w	r3, r3, #1
 8004fbc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004fbe:	4b05      	ldr	r3, [pc, #20]	; (8004fd4 <HAL_RCC_OscConfig+0x76c>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a04      	ldr	r2, [pc, #16]	; (8004fd4 <HAL_RCC_OscConfig+0x76c>)
 8004fc4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004fc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fca:	f7fc fddb 	bl	8001b84 <HAL_GetTick>
 8004fce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004fd0:	e011      	b.n	8004ff6 <HAL_RCC_OscConfig+0x78e>
 8004fd2:	bf00      	nop
 8004fd4:	58024400 	.word	0x58024400
 8004fd8:	58024800 	.word	0x58024800
 8004fdc:	fffffc0c 	.word	0xfffffc0c
 8004fe0:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fe4:	f7fc fdce 	bl	8001b84 <HAL_GetTick>
 8004fe8:	4602      	mov	r2, r0
 8004fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fec:	1ad3      	subs	r3, r2, r3
 8004fee:	2b02      	cmp	r3, #2
 8004ff0:	d901      	bls.n	8004ff6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004ff2:	2303      	movs	r3, #3
 8004ff4:	e08a      	b.n	800510c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004ff6:	4b47      	ldr	r3, [pc, #284]	; (8005114 <HAL_RCC_OscConfig+0x8ac>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d0f0      	beq.n	8004fe4 <HAL_RCC_OscConfig+0x77c>
 8005002:	e082      	b.n	800510a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005004:	4b43      	ldr	r3, [pc, #268]	; (8005114 <HAL_RCC_OscConfig+0x8ac>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a42      	ldr	r2, [pc, #264]	; (8005114 <HAL_RCC_OscConfig+0x8ac>)
 800500a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800500e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005010:	f7fc fdb8 	bl	8001b84 <HAL_GetTick>
 8005014:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005016:	e008      	b.n	800502a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005018:	f7fc fdb4 	bl	8001b84 <HAL_GetTick>
 800501c:	4602      	mov	r2, r0
 800501e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005020:	1ad3      	subs	r3, r2, r3
 8005022:	2b02      	cmp	r3, #2
 8005024:	d901      	bls.n	800502a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8005026:	2303      	movs	r3, #3
 8005028:	e070      	b.n	800510c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800502a:	4b3a      	ldr	r3, [pc, #232]	; (8005114 <HAL_RCC_OscConfig+0x8ac>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005032:	2b00      	cmp	r3, #0
 8005034:	d1f0      	bne.n	8005018 <HAL_RCC_OscConfig+0x7b0>
 8005036:	e068      	b.n	800510a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005038:	4b36      	ldr	r3, [pc, #216]	; (8005114 <HAL_RCC_OscConfig+0x8ac>)
 800503a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800503c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800503e:	4b35      	ldr	r3, [pc, #212]	; (8005114 <HAL_RCC_OscConfig+0x8ac>)
 8005040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005042:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005048:	2b01      	cmp	r3, #1
 800504a:	d031      	beq.n	80050b0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800504c:	693b      	ldr	r3, [r7, #16]
 800504e:	f003 0203 	and.w	r2, r3, #3
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005056:	429a      	cmp	r2, r3
 8005058:	d12a      	bne.n	80050b0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	091b      	lsrs	r3, r3, #4
 800505e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005066:	429a      	cmp	r2, r3
 8005068:	d122      	bne.n	80050b0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005074:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005076:	429a      	cmp	r2, r3
 8005078:	d11a      	bne.n	80050b0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	0a5b      	lsrs	r3, r3, #9
 800507e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005086:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005088:	429a      	cmp	r2, r3
 800508a:	d111      	bne.n	80050b0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	0c1b      	lsrs	r3, r3, #16
 8005090:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005098:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800509a:	429a      	cmp	r2, r3
 800509c:	d108      	bne.n	80050b0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	0e1b      	lsrs	r3, r3, #24
 80050a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050aa:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80050ac:	429a      	cmp	r2, r3
 80050ae:	d001      	beq.n	80050b4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80050b0:	2301      	movs	r3, #1
 80050b2:	e02b      	b.n	800510c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80050b4:	4b17      	ldr	r3, [pc, #92]	; (8005114 <HAL_RCC_OscConfig+0x8ac>)
 80050b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050b8:	08db      	lsrs	r3, r3, #3
 80050ba:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80050be:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050c4:	693a      	ldr	r2, [r7, #16]
 80050c6:	429a      	cmp	r2, r3
 80050c8:	d01f      	beq.n	800510a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80050ca:	4b12      	ldr	r3, [pc, #72]	; (8005114 <HAL_RCC_OscConfig+0x8ac>)
 80050cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ce:	4a11      	ldr	r2, [pc, #68]	; (8005114 <HAL_RCC_OscConfig+0x8ac>)
 80050d0:	f023 0301 	bic.w	r3, r3, #1
 80050d4:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80050d6:	f7fc fd55 	bl	8001b84 <HAL_GetTick>
 80050da:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80050dc:	bf00      	nop
 80050de:	f7fc fd51 	bl	8001b84 <HAL_GetTick>
 80050e2:	4602      	mov	r2, r0
 80050e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d0f9      	beq.n	80050de <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80050ea:	4b0a      	ldr	r3, [pc, #40]	; (8005114 <HAL_RCC_OscConfig+0x8ac>)
 80050ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050ee:	4b0a      	ldr	r3, [pc, #40]	; (8005118 <HAL_RCC_OscConfig+0x8b0>)
 80050f0:	4013      	ands	r3, r2
 80050f2:	687a      	ldr	r2, [r7, #4]
 80050f4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80050f6:	00d2      	lsls	r2, r2, #3
 80050f8:	4906      	ldr	r1, [pc, #24]	; (8005114 <HAL_RCC_OscConfig+0x8ac>)
 80050fa:	4313      	orrs	r3, r2
 80050fc:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80050fe:	4b05      	ldr	r3, [pc, #20]	; (8005114 <HAL_RCC_OscConfig+0x8ac>)
 8005100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005102:	4a04      	ldr	r2, [pc, #16]	; (8005114 <HAL_RCC_OscConfig+0x8ac>)
 8005104:	f043 0301 	orr.w	r3, r3, #1
 8005108:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800510a:	2300      	movs	r3, #0
}
 800510c:	4618      	mov	r0, r3
 800510e:	3730      	adds	r7, #48	; 0x30
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}
 8005114:	58024400 	.word	0x58024400
 8005118:	ffff0007 	.word	0xffff0007

0800511c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b086      	sub	sp, #24
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
 8005124:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d101      	bne.n	8005130 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800512c:	2301      	movs	r3, #1
 800512e:	e19c      	b.n	800546a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005130:	4b8a      	ldr	r3, [pc, #552]	; (800535c <HAL_RCC_ClockConfig+0x240>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f003 030f 	and.w	r3, r3, #15
 8005138:	683a      	ldr	r2, [r7, #0]
 800513a:	429a      	cmp	r2, r3
 800513c:	d910      	bls.n	8005160 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800513e:	4b87      	ldr	r3, [pc, #540]	; (800535c <HAL_RCC_ClockConfig+0x240>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f023 020f 	bic.w	r2, r3, #15
 8005146:	4985      	ldr	r1, [pc, #532]	; (800535c <HAL_RCC_ClockConfig+0x240>)
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	4313      	orrs	r3, r2
 800514c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800514e:	4b83      	ldr	r3, [pc, #524]	; (800535c <HAL_RCC_ClockConfig+0x240>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f003 030f 	and.w	r3, r3, #15
 8005156:	683a      	ldr	r2, [r7, #0]
 8005158:	429a      	cmp	r2, r3
 800515a:	d001      	beq.n	8005160 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800515c:	2301      	movs	r3, #1
 800515e:	e184      	b.n	800546a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f003 0304 	and.w	r3, r3, #4
 8005168:	2b00      	cmp	r3, #0
 800516a:	d010      	beq.n	800518e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	691a      	ldr	r2, [r3, #16]
 8005170:	4b7b      	ldr	r3, [pc, #492]	; (8005360 <HAL_RCC_ClockConfig+0x244>)
 8005172:	699b      	ldr	r3, [r3, #24]
 8005174:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005178:	429a      	cmp	r2, r3
 800517a:	d908      	bls.n	800518e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800517c:	4b78      	ldr	r3, [pc, #480]	; (8005360 <HAL_RCC_ClockConfig+0x244>)
 800517e:	699b      	ldr	r3, [r3, #24]
 8005180:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	691b      	ldr	r3, [r3, #16]
 8005188:	4975      	ldr	r1, [pc, #468]	; (8005360 <HAL_RCC_ClockConfig+0x244>)
 800518a:	4313      	orrs	r3, r2
 800518c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f003 0308 	and.w	r3, r3, #8
 8005196:	2b00      	cmp	r3, #0
 8005198:	d010      	beq.n	80051bc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	695a      	ldr	r2, [r3, #20]
 800519e:	4b70      	ldr	r3, [pc, #448]	; (8005360 <HAL_RCC_ClockConfig+0x244>)
 80051a0:	69db      	ldr	r3, [r3, #28]
 80051a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80051a6:	429a      	cmp	r2, r3
 80051a8:	d908      	bls.n	80051bc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80051aa:	4b6d      	ldr	r3, [pc, #436]	; (8005360 <HAL_RCC_ClockConfig+0x244>)
 80051ac:	69db      	ldr	r3, [r3, #28]
 80051ae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	695b      	ldr	r3, [r3, #20]
 80051b6:	496a      	ldr	r1, [pc, #424]	; (8005360 <HAL_RCC_ClockConfig+0x244>)
 80051b8:	4313      	orrs	r3, r2
 80051ba:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f003 0310 	and.w	r3, r3, #16
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d010      	beq.n	80051ea <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	699a      	ldr	r2, [r3, #24]
 80051cc:	4b64      	ldr	r3, [pc, #400]	; (8005360 <HAL_RCC_ClockConfig+0x244>)
 80051ce:	69db      	ldr	r3, [r3, #28]
 80051d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80051d4:	429a      	cmp	r2, r3
 80051d6:	d908      	bls.n	80051ea <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80051d8:	4b61      	ldr	r3, [pc, #388]	; (8005360 <HAL_RCC_ClockConfig+0x244>)
 80051da:	69db      	ldr	r3, [r3, #28]
 80051dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	699b      	ldr	r3, [r3, #24]
 80051e4:	495e      	ldr	r1, [pc, #376]	; (8005360 <HAL_RCC_ClockConfig+0x244>)
 80051e6:	4313      	orrs	r3, r2
 80051e8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f003 0320 	and.w	r3, r3, #32
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d010      	beq.n	8005218 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	69da      	ldr	r2, [r3, #28]
 80051fa:	4b59      	ldr	r3, [pc, #356]	; (8005360 <HAL_RCC_ClockConfig+0x244>)
 80051fc:	6a1b      	ldr	r3, [r3, #32]
 80051fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005202:	429a      	cmp	r2, r3
 8005204:	d908      	bls.n	8005218 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005206:	4b56      	ldr	r3, [pc, #344]	; (8005360 <HAL_RCC_ClockConfig+0x244>)
 8005208:	6a1b      	ldr	r3, [r3, #32]
 800520a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	69db      	ldr	r3, [r3, #28]
 8005212:	4953      	ldr	r1, [pc, #332]	; (8005360 <HAL_RCC_ClockConfig+0x244>)
 8005214:	4313      	orrs	r3, r2
 8005216:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f003 0302 	and.w	r3, r3, #2
 8005220:	2b00      	cmp	r3, #0
 8005222:	d010      	beq.n	8005246 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	68da      	ldr	r2, [r3, #12]
 8005228:	4b4d      	ldr	r3, [pc, #308]	; (8005360 <HAL_RCC_ClockConfig+0x244>)
 800522a:	699b      	ldr	r3, [r3, #24]
 800522c:	f003 030f 	and.w	r3, r3, #15
 8005230:	429a      	cmp	r2, r3
 8005232:	d908      	bls.n	8005246 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005234:	4b4a      	ldr	r3, [pc, #296]	; (8005360 <HAL_RCC_ClockConfig+0x244>)
 8005236:	699b      	ldr	r3, [r3, #24]
 8005238:	f023 020f 	bic.w	r2, r3, #15
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	68db      	ldr	r3, [r3, #12]
 8005240:	4947      	ldr	r1, [pc, #284]	; (8005360 <HAL_RCC_ClockConfig+0x244>)
 8005242:	4313      	orrs	r3, r2
 8005244:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f003 0301 	and.w	r3, r3, #1
 800524e:	2b00      	cmp	r3, #0
 8005250:	d055      	beq.n	80052fe <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005252:	4b43      	ldr	r3, [pc, #268]	; (8005360 <HAL_RCC_ClockConfig+0x244>)
 8005254:	699b      	ldr	r3, [r3, #24]
 8005256:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	689b      	ldr	r3, [r3, #8]
 800525e:	4940      	ldr	r1, [pc, #256]	; (8005360 <HAL_RCC_ClockConfig+0x244>)
 8005260:	4313      	orrs	r3, r2
 8005262:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	2b02      	cmp	r3, #2
 800526a:	d107      	bne.n	800527c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800526c:	4b3c      	ldr	r3, [pc, #240]	; (8005360 <HAL_RCC_ClockConfig+0x244>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005274:	2b00      	cmp	r3, #0
 8005276:	d121      	bne.n	80052bc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005278:	2301      	movs	r3, #1
 800527a:	e0f6      	b.n	800546a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	2b03      	cmp	r3, #3
 8005282:	d107      	bne.n	8005294 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005284:	4b36      	ldr	r3, [pc, #216]	; (8005360 <HAL_RCC_ClockConfig+0x244>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800528c:	2b00      	cmp	r3, #0
 800528e:	d115      	bne.n	80052bc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005290:	2301      	movs	r3, #1
 8005292:	e0ea      	b.n	800546a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	2b01      	cmp	r3, #1
 800529a:	d107      	bne.n	80052ac <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800529c:	4b30      	ldr	r3, [pc, #192]	; (8005360 <HAL_RCC_ClockConfig+0x244>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d109      	bne.n	80052bc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80052a8:	2301      	movs	r3, #1
 80052aa:	e0de      	b.n	800546a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80052ac:	4b2c      	ldr	r3, [pc, #176]	; (8005360 <HAL_RCC_ClockConfig+0x244>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f003 0304 	and.w	r3, r3, #4
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d101      	bne.n	80052bc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80052b8:	2301      	movs	r3, #1
 80052ba:	e0d6      	b.n	800546a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80052bc:	4b28      	ldr	r3, [pc, #160]	; (8005360 <HAL_RCC_ClockConfig+0x244>)
 80052be:	691b      	ldr	r3, [r3, #16]
 80052c0:	f023 0207 	bic.w	r2, r3, #7
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	4925      	ldr	r1, [pc, #148]	; (8005360 <HAL_RCC_ClockConfig+0x244>)
 80052ca:	4313      	orrs	r3, r2
 80052cc:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052ce:	f7fc fc59 	bl	8001b84 <HAL_GetTick>
 80052d2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052d4:	e00a      	b.n	80052ec <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052d6:	f7fc fc55 	bl	8001b84 <HAL_GetTick>
 80052da:	4602      	mov	r2, r0
 80052dc:	697b      	ldr	r3, [r7, #20]
 80052de:	1ad3      	subs	r3, r2, r3
 80052e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d901      	bls.n	80052ec <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80052e8:	2303      	movs	r3, #3
 80052ea:	e0be      	b.n	800546a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052ec:	4b1c      	ldr	r3, [pc, #112]	; (8005360 <HAL_RCC_ClockConfig+0x244>)
 80052ee:	691b      	ldr	r3, [r3, #16]
 80052f0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	00db      	lsls	r3, r3, #3
 80052fa:	429a      	cmp	r2, r3
 80052fc:	d1eb      	bne.n	80052d6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f003 0302 	and.w	r3, r3, #2
 8005306:	2b00      	cmp	r3, #0
 8005308:	d010      	beq.n	800532c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	68da      	ldr	r2, [r3, #12]
 800530e:	4b14      	ldr	r3, [pc, #80]	; (8005360 <HAL_RCC_ClockConfig+0x244>)
 8005310:	699b      	ldr	r3, [r3, #24]
 8005312:	f003 030f 	and.w	r3, r3, #15
 8005316:	429a      	cmp	r2, r3
 8005318:	d208      	bcs.n	800532c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800531a:	4b11      	ldr	r3, [pc, #68]	; (8005360 <HAL_RCC_ClockConfig+0x244>)
 800531c:	699b      	ldr	r3, [r3, #24]
 800531e:	f023 020f 	bic.w	r2, r3, #15
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	68db      	ldr	r3, [r3, #12]
 8005326:	490e      	ldr	r1, [pc, #56]	; (8005360 <HAL_RCC_ClockConfig+0x244>)
 8005328:	4313      	orrs	r3, r2
 800532a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800532c:	4b0b      	ldr	r3, [pc, #44]	; (800535c <HAL_RCC_ClockConfig+0x240>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f003 030f 	and.w	r3, r3, #15
 8005334:	683a      	ldr	r2, [r7, #0]
 8005336:	429a      	cmp	r2, r3
 8005338:	d214      	bcs.n	8005364 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800533a:	4b08      	ldr	r3, [pc, #32]	; (800535c <HAL_RCC_ClockConfig+0x240>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f023 020f 	bic.w	r2, r3, #15
 8005342:	4906      	ldr	r1, [pc, #24]	; (800535c <HAL_RCC_ClockConfig+0x240>)
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	4313      	orrs	r3, r2
 8005348:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800534a:	4b04      	ldr	r3, [pc, #16]	; (800535c <HAL_RCC_ClockConfig+0x240>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f003 030f 	and.w	r3, r3, #15
 8005352:	683a      	ldr	r2, [r7, #0]
 8005354:	429a      	cmp	r2, r3
 8005356:	d005      	beq.n	8005364 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005358:	2301      	movs	r3, #1
 800535a:	e086      	b.n	800546a <HAL_RCC_ClockConfig+0x34e>
 800535c:	52002000 	.word	0x52002000
 8005360:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f003 0304 	and.w	r3, r3, #4
 800536c:	2b00      	cmp	r3, #0
 800536e:	d010      	beq.n	8005392 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	691a      	ldr	r2, [r3, #16]
 8005374:	4b3f      	ldr	r3, [pc, #252]	; (8005474 <HAL_RCC_ClockConfig+0x358>)
 8005376:	699b      	ldr	r3, [r3, #24]
 8005378:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800537c:	429a      	cmp	r2, r3
 800537e:	d208      	bcs.n	8005392 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005380:	4b3c      	ldr	r3, [pc, #240]	; (8005474 <HAL_RCC_ClockConfig+0x358>)
 8005382:	699b      	ldr	r3, [r3, #24]
 8005384:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	691b      	ldr	r3, [r3, #16]
 800538c:	4939      	ldr	r1, [pc, #228]	; (8005474 <HAL_RCC_ClockConfig+0x358>)
 800538e:	4313      	orrs	r3, r2
 8005390:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f003 0308 	and.w	r3, r3, #8
 800539a:	2b00      	cmp	r3, #0
 800539c:	d010      	beq.n	80053c0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	695a      	ldr	r2, [r3, #20]
 80053a2:	4b34      	ldr	r3, [pc, #208]	; (8005474 <HAL_RCC_ClockConfig+0x358>)
 80053a4:	69db      	ldr	r3, [r3, #28]
 80053a6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80053aa:	429a      	cmp	r2, r3
 80053ac:	d208      	bcs.n	80053c0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80053ae:	4b31      	ldr	r3, [pc, #196]	; (8005474 <HAL_RCC_ClockConfig+0x358>)
 80053b0:	69db      	ldr	r3, [r3, #28]
 80053b2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	695b      	ldr	r3, [r3, #20]
 80053ba:	492e      	ldr	r1, [pc, #184]	; (8005474 <HAL_RCC_ClockConfig+0x358>)
 80053bc:	4313      	orrs	r3, r2
 80053be:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f003 0310 	and.w	r3, r3, #16
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d010      	beq.n	80053ee <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	699a      	ldr	r2, [r3, #24]
 80053d0:	4b28      	ldr	r3, [pc, #160]	; (8005474 <HAL_RCC_ClockConfig+0x358>)
 80053d2:	69db      	ldr	r3, [r3, #28]
 80053d4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80053d8:	429a      	cmp	r2, r3
 80053da:	d208      	bcs.n	80053ee <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80053dc:	4b25      	ldr	r3, [pc, #148]	; (8005474 <HAL_RCC_ClockConfig+0x358>)
 80053de:	69db      	ldr	r3, [r3, #28]
 80053e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	699b      	ldr	r3, [r3, #24]
 80053e8:	4922      	ldr	r1, [pc, #136]	; (8005474 <HAL_RCC_ClockConfig+0x358>)
 80053ea:	4313      	orrs	r3, r2
 80053ec:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f003 0320 	and.w	r3, r3, #32
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d010      	beq.n	800541c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	69da      	ldr	r2, [r3, #28]
 80053fe:	4b1d      	ldr	r3, [pc, #116]	; (8005474 <HAL_RCC_ClockConfig+0x358>)
 8005400:	6a1b      	ldr	r3, [r3, #32]
 8005402:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005406:	429a      	cmp	r2, r3
 8005408:	d208      	bcs.n	800541c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800540a:	4b1a      	ldr	r3, [pc, #104]	; (8005474 <HAL_RCC_ClockConfig+0x358>)
 800540c:	6a1b      	ldr	r3, [r3, #32]
 800540e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	69db      	ldr	r3, [r3, #28]
 8005416:	4917      	ldr	r1, [pc, #92]	; (8005474 <HAL_RCC_ClockConfig+0x358>)
 8005418:	4313      	orrs	r3, r2
 800541a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800541c:	f000 f834 	bl	8005488 <HAL_RCC_GetSysClockFreq>
 8005420:	4602      	mov	r2, r0
 8005422:	4b14      	ldr	r3, [pc, #80]	; (8005474 <HAL_RCC_ClockConfig+0x358>)
 8005424:	699b      	ldr	r3, [r3, #24]
 8005426:	0a1b      	lsrs	r3, r3, #8
 8005428:	f003 030f 	and.w	r3, r3, #15
 800542c:	4912      	ldr	r1, [pc, #72]	; (8005478 <HAL_RCC_ClockConfig+0x35c>)
 800542e:	5ccb      	ldrb	r3, [r1, r3]
 8005430:	f003 031f 	and.w	r3, r3, #31
 8005434:	fa22 f303 	lsr.w	r3, r2, r3
 8005438:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800543a:	4b0e      	ldr	r3, [pc, #56]	; (8005474 <HAL_RCC_ClockConfig+0x358>)
 800543c:	699b      	ldr	r3, [r3, #24]
 800543e:	f003 030f 	and.w	r3, r3, #15
 8005442:	4a0d      	ldr	r2, [pc, #52]	; (8005478 <HAL_RCC_ClockConfig+0x35c>)
 8005444:	5cd3      	ldrb	r3, [r2, r3]
 8005446:	f003 031f 	and.w	r3, r3, #31
 800544a:	693a      	ldr	r2, [r7, #16]
 800544c:	fa22 f303 	lsr.w	r3, r2, r3
 8005450:	4a0a      	ldr	r2, [pc, #40]	; (800547c <HAL_RCC_ClockConfig+0x360>)
 8005452:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005454:	4a0a      	ldr	r2, [pc, #40]	; (8005480 <HAL_RCC_ClockConfig+0x364>)
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800545a:	4b0a      	ldr	r3, [pc, #40]	; (8005484 <HAL_RCC_ClockConfig+0x368>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4618      	mov	r0, r3
 8005460:	f7fc fb46 	bl	8001af0 <HAL_InitTick>
 8005464:	4603      	mov	r3, r0
 8005466:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005468:	7bfb      	ldrb	r3, [r7, #15]
}
 800546a:	4618      	mov	r0, r3
 800546c:	3718      	adds	r7, #24
 800546e:	46bd      	mov	sp, r7
 8005470:	bd80      	pop	{r7, pc}
 8005472:	bf00      	nop
 8005474:	58024400 	.word	0x58024400
 8005478:	0800d920 	.word	0x0800d920
 800547c:	24000020 	.word	0x24000020
 8005480:	2400001c 	.word	0x2400001c
 8005484:	24000024 	.word	0x24000024

08005488 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005488:	b480      	push	{r7}
 800548a:	b089      	sub	sp, #36	; 0x24
 800548c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800548e:	4bb3      	ldr	r3, [pc, #716]	; (800575c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005490:	691b      	ldr	r3, [r3, #16]
 8005492:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005496:	2b18      	cmp	r3, #24
 8005498:	f200 8155 	bhi.w	8005746 <HAL_RCC_GetSysClockFreq+0x2be>
 800549c:	a201      	add	r2, pc, #4	; (adr r2, 80054a4 <HAL_RCC_GetSysClockFreq+0x1c>)
 800549e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054a2:	bf00      	nop
 80054a4:	08005509 	.word	0x08005509
 80054a8:	08005747 	.word	0x08005747
 80054ac:	08005747 	.word	0x08005747
 80054b0:	08005747 	.word	0x08005747
 80054b4:	08005747 	.word	0x08005747
 80054b8:	08005747 	.word	0x08005747
 80054bc:	08005747 	.word	0x08005747
 80054c0:	08005747 	.word	0x08005747
 80054c4:	0800552f 	.word	0x0800552f
 80054c8:	08005747 	.word	0x08005747
 80054cc:	08005747 	.word	0x08005747
 80054d0:	08005747 	.word	0x08005747
 80054d4:	08005747 	.word	0x08005747
 80054d8:	08005747 	.word	0x08005747
 80054dc:	08005747 	.word	0x08005747
 80054e0:	08005747 	.word	0x08005747
 80054e4:	08005535 	.word	0x08005535
 80054e8:	08005747 	.word	0x08005747
 80054ec:	08005747 	.word	0x08005747
 80054f0:	08005747 	.word	0x08005747
 80054f4:	08005747 	.word	0x08005747
 80054f8:	08005747 	.word	0x08005747
 80054fc:	08005747 	.word	0x08005747
 8005500:	08005747 	.word	0x08005747
 8005504:	0800553b 	.word	0x0800553b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005508:	4b94      	ldr	r3, [pc, #592]	; (800575c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f003 0320 	and.w	r3, r3, #32
 8005510:	2b00      	cmp	r3, #0
 8005512:	d009      	beq.n	8005528 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005514:	4b91      	ldr	r3, [pc, #580]	; (800575c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	08db      	lsrs	r3, r3, #3
 800551a:	f003 0303 	and.w	r3, r3, #3
 800551e:	4a90      	ldr	r2, [pc, #576]	; (8005760 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005520:	fa22 f303 	lsr.w	r3, r2, r3
 8005524:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005526:	e111      	b.n	800574c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005528:	4b8d      	ldr	r3, [pc, #564]	; (8005760 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800552a:	61bb      	str	r3, [r7, #24]
      break;
 800552c:	e10e      	b.n	800574c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800552e:	4b8d      	ldr	r3, [pc, #564]	; (8005764 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005530:	61bb      	str	r3, [r7, #24]
      break;
 8005532:	e10b      	b.n	800574c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005534:	4b8c      	ldr	r3, [pc, #560]	; (8005768 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005536:	61bb      	str	r3, [r7, #24]
      break;
 8005538:	e108      	b.n	800574c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800553a:	4b88      	ldr	r3, [pc, #544]	; (800575c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800553c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800553e:	f003 0303 	and.w	r3, r3, #3
 8005542:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005544:	4b85      	ldr	r3, [pc, #532]	; (800575c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005548:	091b      	lsrs	r3, r3, #4
 800554a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800554e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005550:	4b82      	ldr	r3, [pc, #520]	; (800575c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005554:	f003 0301 	and.w	r3, r3, #1
 8005558:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800555a:	4b80      	ldr	r3, [pc, #512]	; (800575c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800555c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800555e:	08db      	lsrs	r3, r3, #3
 8005560:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005564:	68fa      	ldr	r2, [r7, #12]
 8005566:	fb02 f303 	mul.w	r3, r2, r3
 800556a:	ee07 3a90 	vmov	s15, r3
 800556e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005572:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	2b00      	cmp	r3, #0
 800557a:	f000 80e1 	beq.w	8005740 <HAL_RCC_GetSysClockFreq+0x2b8>
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	2b02      	cmp	r3, #2
 8005582:	f000 8083 	beq.w	800568c <HAL_RCC_GetSysClockFreq+0x204>
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	2b02      	cmp	r3, #2
 800558a:	f200 80a1 	bhi.w	80056d0 <HAL_RCC_GetSysClockFreq+0x248>
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d003      	beq.n	800559c <HAL_RCC_GetSysClockFreq+0x114>
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	2b01      	cmp	r3, #1
 8005598:	d056      	beq.n	8005648 <HAL_RCC_GetSysClockFreq+0x1c0>
 800559a:	e099      	b.n	80056d0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800559c:	4b6f      	ldr	r3, [pc, #444]	; (800575c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f003 0320 	and.w	r3, r3, #32
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d02d      	beq.n	8005604 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80055a8:	4b6c      	ldr	r3, [pc, #432]	; (800575c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	08db      	lsrs	r3, r3, #3
 80055ae:	f003 0303 	and.w	r3, r3, #3
 80055b2:	4a6b      	ldr	r2, [pc, #428]	; (8005760 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80055b4:	fa22 f303 	lsr.w	r3, r2, r3
 80055b8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	ee07 3a90 	vmov	s15, r3
 80055c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055c4:	693b      	ldr	r3, [r7, #16]
 80055c6:	ee07 3a90 	vmov	s15, r3
 80055ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055d2:	4b62      	ldr	r3, [pc, #392]	; (800575c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055da:	ee07 3a90 	vmov	s15, r3
 80055de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055e2:	ed97 6a02 	vldr	s12, [r7, #8]
 80055e6:	eddf 5a61 	vldr	s11, [pc, #388]	; 800576c <HAL_RCC_GetSysClockFreq+0x2e4>
 80055ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80055f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055fe:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005602:	e087      	b.n	8005714 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005604:	693b      	ldr	r3, [r7, #16]
 8005606:	ee07 3a90 	vmov	s15, r3
 800560a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800560e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005770 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005612:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005616:	4b51      	ldr	r3, [pc, #324]	; (800575c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800561a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800561e:	ee07 3a90 	vmov	s15, r3
 8005622:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005626:	ed97 6a02 	vldr	s12, [r7, #8]
 800562a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800576c <HAL_RCC_GetSysClockFreq+0x2e4>
 800562e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005632:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005636:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800563a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800563e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005642:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005646:	e065      	b.n	8005714 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005648:	693b      	ldr	r3, [r7, #16]
 800564a:	ee07 3a90 	vmov	s15, r3
 800564e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005652:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005774 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005656:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800565a:	4b40      	ldr	r3, [pc, #256]	; (800575c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800565c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800565e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005662:	ee07 3a90 	vmov	s15, r3
 8005666:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800566a:	ed97 6a02 	vldr	s12, [r7, #8]
 800566e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800576c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005672:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005676:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800567a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800567e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005682:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005686:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800568a:	e043      	b.n	8005714 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800568c:	693b      	ldr	r3, [r7, #16]
 800568e:	ee07 3a90 	vmov	s15, r3
 8005692:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005696:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005778 <HAL_RCC_GetSysClockFreq+0x2f0>
 800569a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800569e:	4b2f      	ldr	r3, [pc, #188]	; (800575c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056a6:	ee07 3a90 	vmov	s15, r3
 80056aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80056b2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800576c <HAL_RCC_GetSysClockFreq+0x2e4>
 80056b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80056c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056ca:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80056ce:	e021      	b.n	8005714 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	ee07 3a90 	vmov	s15, r3
 80056d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056da:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005774 <HAL_RCC_GetSysClockFreq+0x2ec>
 80056de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056e2:	4b1e      	ldr	r3, [pc, #120]	; (800575c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056ea:	ee07 3a90 	vmov	s15, r3
 80056ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80056f6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800576c <HAL_RCC_GetSysClockFreq+0x2e4>
 80056fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005702:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005706:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800570a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800570e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005712:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005714:	4b11      	ldr	r3, [pc, #68]	; (800575c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005718:	0a5b      	lsrs	r3, r3, #9
 800571a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800571e:	3301      	adds	r3, #1
 8005720:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	ee07 3a90 	vmov	s15, r3
 8005728:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800572c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005730:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005734:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005738:	ee17 3a90 	vmov	r3, s15
 800573c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800573e:	e005      	b.n	800574c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005740:	2300      	movs	r3, #0
 8005742:	61bb      	str	r3, [r7, #24]
      break;
 8005744:	e002      	b.n	800574c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005746:	4b07      	ldr	r3, [pc, #28]	; (8005764 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005748:	61bb      	str	r3, [r7, #24]
      break;
 800574a:	bf00      	nop
  }

  return sysclockfreq;
 800574c:	69bb      	ldr	r3, [r7, #24]
}
 800574e:	4618      	mov	r0, r3
 8005750:	3724      	adds	r7, #36	; 0x24
 8005752:	46bd      	mov	sp, r7
 8005754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005758:	4770      	bx	lr
 800575a:	bf00      	nop
 800575c:	58024400 	.word	0x58024400
 8005760:	03d09000 	.word	0x03d09000
 8005764:	003d0900 	.word	0x003d0900
 8005768:	017d7840 	.word	0x017d7840
 800576c:	46000000 	.word	0x46000000
 8005770:	4c742400 	.word	0x4c742400
 8005774:	4a742400 	.word	0x4a742400
 8005778:	4bbebc20 	.word	0x4bbebc20

0800577c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b082      	sub	sp, #8
 8005780:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005782:	f7ff fe81 	bl	8005488 <HAL_RCC_GetSysClockFreq>
 8005786:	4602      	mov	r2, r0
 8005788:	4b10      	ldr	r3, [pc, #64]	; (80057cc <HAL_RCC_GetHCLKFreq+0x50>)
 800578a:	699b      	ldr	r3, [r3, #24]
 800578c:	0a1b      	lsrs	r3, r3, #8
 800578e:	f003 030f 	and.w	r3, r3, #15
 8005792:	490f      	ldr	r1, [pc, #60]	; (80057d0 <HAL_RCC_GetHCLKFreq+0x54>)
 8005794:	5ccb      	ldrb	r3, [r1, r3]
 8005796:	f003 031f 	and.w	r3, r3, #31
 800579a:	fa22 f303 	lsr.w	r3, r2, r3
 800579e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80057a0:	4b0a      	ldr	r3, [pc, #40]	; (80057cc <HAL_RCC_GetHCLKFreq+0x50>)
 80057a2:	699b      	ldr	r3, [r3, #24]
 80057a4:	f003 030f 	and.w	r3, r3, #15
 80057a8:	4a09      	ldr	r2, [pc, #36]	; (80057d0 <HAL_RCC_GetHCLKFreq+0x54>)
 80057aa:	5cd3      	ldrb	r3, [r2, r3]
 80057ac:	f003 031f 	and.w	r3, r3, #31
 80057b0:	687a      	ldr	r2, [r7, #4]
 80057b2:	fa22 f303 	lsr.w	r3, r2, r3
 80057b6:	4a07      	ldr	r2, [pc, #28]	; (80057d4 <HAL_RCC_GetHCLKFreq+0x58>)
 80057b8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80057ba:	4a07      	ldr	r2, [pc, #28]	; (80057d8 <HAL_RCC_GetHCLKFreq+0x5c>)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80057c0:	4b04      	ldr	r3, [pc, #16]	; (80057d4 <HAL_RCC_GetHCLKFreq+0x58>)
 80057c2:	681b      	ldr	r3, [r3, #0]
}
 80057c4:	4618      	mov	r0, r3
 80057c6:	3708      	adds	r7, #8
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bd80      	pop	{r7, pc}
 80057cc:	58024400 	.word	0x58024400
 80057d0:	0800d920 	.word	0x0800d920
 80057d4:	24000020 	.word	0x24000020
 80057d8:	2400001c 	.word	0x2400001c

080057dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80057e0:	f7ff ffcc 	bl	800577c <HAL_RCC_GetHCLKFreq>
 80057e4:	4602      	mov	r2, r0
 80057e6:	4b06      	ldr	r3, [pc, #24]	; (8005800 <HAL_RCC_GetPCLK1Freq+0x24>)
 80057e8:	69db      	ldr	r3, [r3, #28]
 80057ea:	091b      	lsrs	r3, r3, #4
 80057ec:	f003 0307 	and.w	r3, r3, #7
 80057f0:	4904      	ldr	r1, [pc, #16]	; (8005804 <HAL_RCC_GetPCLK1Freq+0x28>)
 80057f2:	5ccb      	ldrb	r3, [r1, r3]
 80057f4:	f003 031f 	and.w	r3, r3, #31
 80057f8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80057fc:	4618      	mov	r0, r3
 80057fe:	bd80      	pop	{r7, pc}
 8005800:	58024400 	.word	0x58024400
 8005804:	0800d920 	.word	0x0800d920

08005808 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005808:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800580c:	b0ca      	sub	sp, #296	; 0x128
 800580e:	af00      	add	r7, sp, #0
 8005810:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005814:	2300      	movs	r3, #0
 8005816:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800581a:	2300      	movs	r3, #0
 800581c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005820:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005828:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800582c:	2500      	movs	r5, #0
 800582e:	ea54 0305 	orrs.w	r3, r4, r5
 8005832:	d049      	beq.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005834:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005838:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800583a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800583e:	d02f      	beq.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005840:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005844:	d828      	bhi.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005846:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800584a:	d01a      	beq.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800584c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005850:	d822      	bhi.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005852:	2b00      	cmp	r3, #0
 8005854:	d003      	beq.n	800585e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005856:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800585a:	d007      	beq.n	800586c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800585c:	e01c      	b.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800585e:	4bb8      	ldr	r3, [pc, #736]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005862:	4ab7      	ldr	r2, [pc, #732]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005864:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005868:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800586a:	e01a      	b.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800586c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005870:	3308      	adds	r3, #8
 8005872:	2102      	movs	r1, #2
 8005874:	4618      	mov	r0, r3
 8005876:	f002 fb61 	bl	8007f3c <RCCEx_PLL2_Config>
 800587a:	4603      	mov	r3, r0
 800587c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005880:	e00f      	b.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005882:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005886:	3328      	adds	r3, #40	; 0x28
 8005888:	2102      	movs	r1, #2
 800588a:	4618      	mov	r0, r3
 800588c:	f002 fc08 	bl	80080a0 <RCCEx_PLL3_Config>
 8005890:	4603      	mov	r3, r0
 8005892:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005896:	e004      	b.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005898:	2301      	movs	r3, #1
 800589a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800589e:	e000      	b.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80058a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d10a      	bne.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80058aa:	4ba5      	ldr	r3, [pc, #660]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80058ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058ae:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80058b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80058b8:	4aa1      	ldr	r2, [pc, #644]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80058ba:	430b      	orrs	r3, r1
 80058bc:	6513      	str	r3, [r2, #80]	; 0x50
 80058be:	e003      	b.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058c0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80058c4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80058c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058d0:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80058d4:	f04f 0900 	mov.w	r9, #0
 80058d8:	ea58 0309 	orrs.w	r3, r8, r9
 80058dc:	d047      	beq.n	800596e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80058de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058e4:	2b04      	cmp	r3, #4
 80058e6:	d82a      	bhi.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x136>
 80058e8:	a201      	add	r2, pc, #4	; (adr r2, 80058f0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80058ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058ee:	bf00      	nop
 80058f0:	08005905 	.word	0x08005905
 80058f4:	08005913 	.word	0x08005913
 80058f8:	08005929 	.word	0x08005929
 80058fc:	08005947 	.word	0x08005947
 8005900:	08005947 	.word	0x08005947
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005904:	4b8e      	ldr	r3, [pc, #568]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005908:	4a8d      	ldr	r2, [pc, #564]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800590a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800590e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005910:	e01a      	b.n	8005948 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005912:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005916:	3308      	adds	r3, #8
 8005918:	2100      	movs	r1, #0
 800591a:	4618      	mov	r0, r3
 800591c:	f002 fb0e 	bl	8007f3c <RCCEx_PLL2_Config>
 8005920:	4603      	mov	r3, r0
 8005922:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005926:	e00f      	b.n	8005948 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005928:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800592c:	3328      	adds	r3, #40	; 0x28
 800592e:	2100      	movs	r1, #0
 8005930:	4618      	mov	r0, r3
 8005932:	f002 fbb5 	bl	80080a0 <RCCEx_PLL3_Config>
 8005936:	4603      	mov	r3, r0
 8005938:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800593c:	e004      	b.n	8005948 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800593e:	2301      	movs	r3, #1
 8005940:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005944:	e000      	b.n	8005948 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005946:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005948:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800594c:	2b00      	cmp	r3, #0
 800594e:	d10a      	bne.n	8005966 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005950:	4b7b      	ldr	r3, [pc, #492]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005952:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005954:	f023 0107 	bic.w	r1, r3, #7
 8005958:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800595c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800595e:	4a78      	ldr	r2, [pc, #480]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005960:	430b      	orrs	r3, r1
 8005962:	6513      	str	r3, [r2, #80]	; 0x50
 8005964:	e003      	b.n	800596e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005966:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800596a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800596e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005976:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800597a:	f04f 0b00 	mov.w	fp, #0
 800597e:	ea5a 030b 	orrs.w	r3, sl, fp
 8005982:	d04c      	beq.n	8005a1e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8005984:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005988:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800598a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800598e:	d030      	beq.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8005990:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005994:	d829      	bhi.n	80059ea <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005996:	2bc0      	cmp	r3, #192	; 0xc0
 8005998:	d02d      	beq.n	80059f6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800599a:	2bc0      	cmp	r3, #192	; 0xc0
 800599c:	d825      	bhi.n	80059ea <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800599e:	2b80      	cmp	r3, #128	; 0x80
 80059a0:	d018      	beq.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80059a2:	2b80      	cmp	r3, #128	; 0x80
 80059a4:	d821      	bhi.n	80059ea <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d002      	beq.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80059aa:	2b40      	cmp	r3, #64	; 0x40
 80059ac:	d007      	beq.n	80059be <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80059ae:	e01c      	b.n	80059ea <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059b0:	4b63      	ldr	r3, [pc, #396]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80059b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059b4:	4a62      	ldr	r2, [pc, #392]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80059b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059ba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80059bc:	e01c      	b.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80059be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059c2:	3308      	adds	r3, #8
 80059c4:	2100      	movs	r1, #0
 80059c6:	4618      	mov	r0, r3
 80059c8:	f002 fab8 	bl	8007f3c <RCCEx_PLL2_Config>
 80059cc:	4603      	mov	r3, r0
 80059ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80059d2:	e011      	b.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80059d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059d8:	3328      	adds	r3, #40	; 0x28
 80059da:	2100      	movs	r1, #0
 80059dc:	4618      	mov	r0, r3
 80059de:	f002 fb5f 	bl	80080a0 <RCCEx_PLL3_Config>
 80059e2:	4603      	mov	r3, r0
 80059e4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80059e8:	e006      	b.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80059ea:	2301      	movs	r3, #1
 80059ec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80059f0:	e002      	b.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80059f2:	bf00      	nop
 80059f4:	e000      	b.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80059f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059f8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d10a      	bne.n	8005a16 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005a00:	4b4f      	ldr	r3, [pc, #316]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a04:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8005a08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a0e:	4a4c      	ldr	r2, [pc, #304]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a10:	430b      	orrs	r3, r1
 8005a12:	6513      	str	r3, [r2, #80]	; 0x50
 8005a14:	e003      	b.n	8005a1e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a16:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005a1a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005a1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a26:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8005a2a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005a2e:	2300      	movs	r3, #0
 8005a30:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005a34:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8005a38:	460b      	mov	r3, r1
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	d053      	beq.n	8005ae6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005a3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a42:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005a46:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005a4a:	d035      	beq.n	8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005a4c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005a50:	d82e      	bhi.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005a52:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005a56:	d031      	beq.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005a58:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005a5c:	d828      	bhi.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005a5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a62:	d01a      	beq.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005a64:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a68:	d822      	bhi.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d003      	beq.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8005a6e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005a72:	d007      	beq.n	8005a84 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8005a74:	e01c      	b.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a76:	4b32      	ldr	r3, [pc, #200]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a7a:	4a31      	ldr	r2, [pc, #196]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a80:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005a82:	e01c      	b.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005a84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a88:	3308      	adds	r3, #8
 8005a8a:	2100      	movs	r1, #0
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	f002 fa55 	bl	8007f3c <RCCEx_PLL2_Config>
 8005a92:	4603      	mov	r3, r0
 8005a94:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005a98:	e011      	b.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005a9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a9e:	3328      	adds	r3, #40	; 0x28
 8005aa0:	2100      	movs	r1, #0
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	f002 fafc 	bl	80080a0 <RCCEx_PLL3_Config>
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005aae:	e006      	b.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005ab6:	e002      	b.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005ab8:	bf00      	nop
 8005aba:	e000      	b.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005abc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005abe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d10b      	bne.n	8005ade <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005ac6:	4b1e      	ldr	r3, [pc, #120]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005ac8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005aca:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8005ace:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ad2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005ad6:	4a1a      	ldr	r2, [pc, #104]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005ad8:	430b      	orrs	r3, r1
 8005ada:	6593      	str	r3, [r2, #88]	; 0x58
 8005adc:	e003      	b.n	8005ae6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ade:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005ae2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005ae6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aee:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8005af2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005af6:	2300      	movs	r3, #0
 8005af8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005afc:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8005b00:	460b      	mov	r3, r1
 8005b02:	4313      	orrs	r3, r2
 8005b04:	d056      	beq.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005b06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b0a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005b0e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005b12:	d038      	beq.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005b14:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005b18:	d831      	bhi.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005b1a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005b1e:	d034      	beq.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0x382>
 8005b20:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005b24:	d82b      	bhi.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005b26:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005b2a:	d01d      	beq.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005b2c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005b30:	d825      	bhi.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d006      	beq.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8005b36:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005b3a:	d00a      	beq.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005b3c:	e01f      	b.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005b3e:	bf00      	nop
 8005b40:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b44:	4ba2      	ldr	r3, [pc, #648]	; (8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b48:	4aa1      	ldr	r2, [pc, #644]	; (8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005b4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b4e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005b50:	e01c      	b.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005b52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b56:	3308      	adds	r3, #8
 8005b58:	2100      	movs	r1, #0
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	f002 f9ee 	bl	8007f3c <RCCEx_PLL2_Config>
 8005b60:	4603      	mov	r3, r0
 8005b62:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005b66:	e011      	b.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005b68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b6c:	3328      	adds	r3, #40	; 0x28
 8005b6e:	2100      	movs	r1, #0
 8005b70:	4618      	mov	r0, r3
 8005b72:	f002 fa95 	bl	80080a0 <RCCEx_PLL3_Config>
 8005b76:	4603      	mov	r3, r0
 8005b78:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005b7c:	e006      	b.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005b7e:	2301      	movs	r3, #1
 8005b80:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005b84:	e002      	b.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005b86:	bf00      	nop
 8005b88:	e000      	b.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005b8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b8c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d10b      	bne.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005b94:	4b8e      	ldr	r3, [pc, #568]	; (8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005b96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b98:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8005b9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ba0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005ba4:	4a8a      	ldr	r2, [pc, #552]	; (8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005ba6:	430b      	orrs	r3, r1
 8005ba8:	6593      	str	r3, [r2, #88]	; 0x58
 8005baa:	e003      	b.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005bb0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005bb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bbc:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8005bc0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005bca:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8005bce:	460b      	mov	r3, r1
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	d03a      	beq.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8005bd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bda:	2b30      	cmp	r3, #48	; 0x30
 8005bdc:	d01f      	beq.n	8005c1e <HAL_RCCEx_PeriphCLKConfig+0x416>
 8005bde:	2b30      	cmp	r3, #48	; 0x30
 8005be0:	d819      	bhi.n	8005c16 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005be2:	2b20      	cmp	r3, #32
 8005be4:	d00c      	beq.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8005be6:	2b20      	cmp	r3, #32
 8005be8:	d815      	bhi.n	8005c16 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d019      	beq.n	8005c22 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8005bee:	2b10      	cmp	r3, #16
 8005bf0:	d111      	bne.n	8005c16 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005bf2:	4b77      	ldr	r3, [pc, #476]	; (8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bf6:	4a76      	ldr	r2, [pc, #472]	; (8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005bf8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005bfc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005bfe:	e011      	b.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005c00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c04:	3308      	adds	r3, #8
 8005c06:	2102      	movs	r1, #2
 8005c08:	4618      	mov	r0, r3
 8005c0a:	f002 f997 	bl	8007f3c <RCCEx_PLL2_Config>
 8005c0e:	4603      	mov	r3, r0
 8005c10:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005c14:	e006      	b.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005c16:	2301      	movs	r3, #1
 8005c18:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005c1c:	e002      	b.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005c1e:	bf00      	nop
 8005c20:	e000      	b.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005c22:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c24:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d10a      	bne.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005c2c:	4b68      	ldr	r3, [pc, #416]	; (8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005c2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c30:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8005c34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c3a:	4a65      	ldr	r2, [pc, #404]	; (8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005c3c:	430b      	orrs	r3, r1
 8005c3e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005c40:	e003      	b.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c42:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005c46:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005c4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c52:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8005c56:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005c60:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8005c64:	460b      	mov	r3, r1
 8005c66:	4313      	orrs	r3, r2
 8005c68:	d051      	beq.n	8005d0e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005c6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c70:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c74:	d035      	beq.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005c76:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c7a:	d82e      	bhi.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005c7c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005c80:	d031      	beq.n	8005ce6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005c82:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005c86:	d828      	bhi.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005c88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c8c:	d01a      	beq.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8005c8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c92:	d822      	bhi.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d003      	beq.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8005c98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c9c:	d007      	beq.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8005c9e:	e01c      	b.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ca0:	4b4b      	ldr	r3, [pc, #300]	; (8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ca4:	4a4a      	ldr	r2, [pc, #296]	; (8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005ca6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005caa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005cac:	e01c      	b.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005cae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005cb2:	3308      	adds	r3, #8
 8005cb4:	2100      	movs	r1, #0
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	f002 f940 	bl	8007f3c <RCCEx_PLL2_Config>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005cc2:	e011      	b.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005cc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005cc8:	3328      	adds	r3, #40	; 0x28
 8005cca:	2100      	movs	r1, #0
 8005ccc:	4618      	mov	r0, r3
 8005cce:	f002 f9e7 	bl	80080a0 <RCCEx_PLL3_Config>
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005cd8:	e006      	b.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005cda:	2301      	movs	r3, #1
 8005cdc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005ce0:	e002      	b.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005ce2:	bf00      	nop
 8005ce4:	e000      	b.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005ce6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ce8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d10a      	bne.n	8005d06 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005cf0:	4b37      	ldr	r3, [pc, #220]	; (8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005cf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cf4:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8005cf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005cfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cfe:	4a34      	ldr	r2, [pc, #208]	; (8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005d00:	430b      	orrs	r3, r1
 8005d02:	6513      	str	r3, [r2, #80]	; 0x50
 8005d04:	e003      	b.n	8005d0e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d06:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005d0a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005d0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d16:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8005d1a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005d1e:	2300      	movs	r3, #0
 8005d20:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005d24:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8005d28:	460b      	mov	r3, r1
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	d056      	beq.n	8005ddc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005d2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005d38:	d033      	beq.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005d3a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005d3e:	d82c      	bhi.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005d40:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005d44:	d02f      	beq.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8005d46:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005d4a:	d826      	bhi.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005d4c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005d50:	d02b      	beq.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8005d52:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005d56:	d820      	bhi.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005d58:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005d5c:	d012      	beq.n	8005d84 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8005d5e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005d62:	d81a      	bhi.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d022      	beq.n	8005dae <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005d68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d6c:	d115      	bne.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005d6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d72:	3308      	adds	r3, #8
 8005d74:	2101      	movs	r1, #1
 8005d76:	4618      	mov	r0, r3
 8005d78:	f002 f8e0 	bl	8007f3c <RCCEx_PLL2_Config>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005d82:	e015      	b.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005d84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d88:	3328      	adds	r3, #40	; 0x28
 8005d8a:	2101      	movs	r1, #1
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	f002 f987 	bl	80080a0 <RCCEx_PLL3_Config>
 8005d92:	4603      	mov	r3, r0
 8005d94:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005d98:	e00a      	b.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005da0:	e006      	b.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005da2:	bf00      	nop
 8005da4:	e004      	b.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005da6:	bf00      	nop
 8005da8:	e002      	b.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005daa:	bf00      	nop
 8005dac:	e000      	b.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005dae:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005db0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d10d      	bne.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005db8:	4b05      	ldr	r3, [pc, #20]	; (8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005dba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dbc:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8005dc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005dc4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005dc6:	4a02      	ldr	r2, [pc, #8]	; (8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005dc8:	430b      	orrs	r3, r1
 8005dca:	6513      	str	r3, [r2, #80]	; 0x50
 8005dcc:	e006      	b.n	8005ddc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005dce:	bf00      	nop
 8005dd0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dd4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005dd8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005ddc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005de4:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8005de8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005dec:	2300      	movs	r3, #0
 8005dee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005df2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8005df6:	460b      	mov	r3, r1
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	d055      	beq.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005dfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e00:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005e04:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005e08:	d033      	beq.n	8005e72 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8005e0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005e0e:	d82c      	bhi.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005e10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e14:	d02f      	beq.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8005e16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e1a:	d826      	bhi.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005e1c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005e20:	d02b      	beq.n	8005e7a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8005e22:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005e26:	d820      	bhi.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005e28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e2c:	d012      	beq.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8005e2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e32:	d81a      	bhi.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d022      	beq.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005e38:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005e3c:	d115      	bne.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005e3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e42:	3308      	adds	r3, #8
 8005e44:	2101      	movs	r1, #1
 8005e46:	4618      	mov	r0, r3
 8005e48:	f002 f878 	bl	8007f3c <RCCEx_PLL2_Config>
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005e52:	e015      	b.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005e54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e58:	3328      	adds	r3, #40	; 0x28
 8005e5a:	2101      	movs	r1, #1
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	f002 f91f 	bl	80080a0 <RCCEx_PLL3_Config>
 8005e62:	4603      	mov	r3, r0
 8005e64:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005e68:	e00a      	b.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005e70:	e006      	b.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005e72:	bf00      	nop
 8005e74:	e004      	b.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005e76:	bf00      	nop
 8005e78:	e002      	b.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005e7a:	bf00      	nop
 8005e7c:	e000      	b.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005e7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e80:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d10b      	bne.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005e88:	4ba3      	ldr	r3, [pc, #652]	; (8006118 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e8c:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8005e90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e94:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005e98:	4a9f      	ldr	r2, [pc, #636]	; (8006118 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e9a:	430b      	orrs	r3, r1
 8005e9c:	6593      	str	r3, [r2, #88]	; 0x58
 8005e9e:	e003      	b.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ea0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005ea4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005ea8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eb0:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8005eb4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005eb8:	2300      	movs	r3, #0
 8005eba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005ebe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005ec2:	460b      	mov	r3, r1
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	d037      	beq.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005ec8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ecc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ece:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ed2:	d00e      	beq.n	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8005ed4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ed8:	d816      	bhi.n	8005f08 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d018      	beq.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8005ede:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005ee2:	d111      	bne.n	8005f08 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ee4:	4b8c      	ldr	r3, [pc, #560]	; (8006118 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ee8:	4a8b      	ldr	r2, [pc, #556]	; (8006118 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005eea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005eee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005ef0:	e00f      	b.n	8005f12 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005ef2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ef6:	3308      	adds	r3, #8
 8005ef8:	2101      	movs	r1, #1
 8005efa:	4618      	mov	r0, r3
 8005efc:	f002 f81e 	bl	8007f3c <RCCEx_PLL2_Config>
 8005f00:	4603      	mov	r3, r0
 8005f02:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005f06:	e004      	b.n	8005f12 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f08:	2301      	movs	r3, #1
 8005f0a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005f0e:	e000      	b.n	8005f12 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8005f10:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f12:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d10a      	bne.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005f1a:	4b7f      	ldr	r3, [pc, #508]	; (8006118 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f1e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8005f22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f28:	4a7b      	ldr	r2, [pc, #492]	; (8006118 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f2a:	430b      	orrs	r3, r1
 8005f2c:	6513      	str	r3, [r2, #80]	; 0x50
 8005f2e:	e003      	b.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f30:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005f34:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005f38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f40:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8005f44:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005f48:	2300      	movs	r3, #0
 8005f4a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005f4e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8005f52:	460b      	mov	r3, r1
 8005f54:	4313      	orrs	r3, r2
 8005f56:	d039      	beq.n	8005fcc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005f58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f5e:	2b03      	cmp	r3, #3
 8005f60:	d81c      	bhi.n	8005f9c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8005f62:	a201      	add	r2, pc, #4	; (adr r2, 8005f68 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8005f64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f68:	08005fa5 	.word	0x08005fa5
 8005f6c:	08005f79 	.word	0x08005f79
 8005f70:	08005f87 	.word	0x08005f87
 8005f74:	08005fa5 	.word	0x08005fa5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f78:	4b67      	ldr	r3, [pc, #412]	; (8006118 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f7c:	4a66      	ldr	r2, [pc, #408]	; (8006118 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f82:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005f84:	e00f      	b.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005f86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f8a:	3308      	adds	r3, #8
 8005f8c:	2102      	movs	r1, #2
 8005f8e:	4618      	mov	r0, r3
 8005f90:	f001 ffd4 	bl	8007f3c <RCCEx_PLL2_Config>
 8005f94:	4603      	mov	r3, r0
 8005f96:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005f9a:	e004      	b.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005fa2:	e000      	b.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8005fa4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005fa6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d10a      	bne.n	8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005fae:	4b5a      	ldr	r3, [pc, #360]	; (8006118 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005fb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fb2:	f023 0103 	bic.w	r1, r3, #3
 8005fb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005fba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fbc:	4a56      	ldr	r2, [pc, #344]	; (8006118 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005fbe:	430b      	orrs	r3, r1
 8005fc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005fc2:	e003      	b.n	8005fcc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fc4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005fc8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005fcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fd4:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8005fd8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005fdc:	2300      	movs	r3, #0
 8005fde:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005fe2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8005fe6:	460b      	mov	r3, r1
 8005fe8:	4313      	orrs	r3, r2
 8005fea:	f000 809f 	beq.w	800612c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005fee:	4b4b      	ldr	r3, [pc, #300]	; (800611c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4a4a      	ldr	r2, [pc, #296]	; (800611c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005ff4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ff8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005ffa:	f7fb fdc3 	bl	8001b84 <HAL_GetTick>
 8005ffe:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006002:	e00b      	b.n	800601c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006004:	f7fb fdbe 	bl	8001b84 <HAL_GetTick>
 8006008:	4602      	mov	r2, r0
 800600a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800600e:	1ad3      	subs	r3, r2, r3
 8006010:	2b64      	cmp	r3, #100	; 0x64
 8006012:	d903      	bls.n	800601c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8006014:	2303      	movs	r3, #3
 8006016:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800601a:	e005      	b.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800601c:	4b3f      	ldr	r3, [pc, #252]	; (800611c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006024:	2b00      	cmp	r3, #0
 8006026:	d0ed      	beq.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8006028:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800602c:	2b00      	cmp	r3, #0
 800602e:	d179      	bne.n	8006124 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006030:	4b39      	ldr	r3, [pc, #228]	; (8006118 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006032:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006034:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006038:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800603c:	4053      	eors	r3, r2
 800603e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006042:	2b00      	cmp	r3, #0
 8006044:	d015      	beq.n	8006072 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006046:	4b34      	ldr	r3, [pc, #208]	; (8006118 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006048:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800604a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800604e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006052:	4b31      	ldr	r3, [pc, #196]	; (8006118 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006056:	4a30      	ldr	r2, [pc, #192]	; (8006118 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006058:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800605c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800605e:	4b2e      	ldr	r3, [pc, #184]	; (8006118 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006060:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006062:	4a2d      	ldr	r2, [pc, #180]	; (8006118 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006064:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006068:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800606a:	4a2b      	ldr	r2, [pc, #172]	; (8006118 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800606c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006070:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006072:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006076:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800607a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800607e:	d118      	bne.n	80060b2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006080:	f7fb fd80 	bl	8001b84 <HAL_GetTick>
 8006084:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006088:	e00d      	b.n	80060a6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800608a:	f7fb fd7b 	bl	8001b84 <HAL_GetTick>
 800608e:	4602      	mov	r2, r0
 8006090:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006094:	1ad2      	subs	r2, r2, r3
 8006096:	f241 3388 	movw	r3, #5000	; 0x1388
 800609a:	429a      	cmp	r2, r3
 800609c:	d903      	bls.n	80060a6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800609e:	2303      	movs	r3, #3
 80060a0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 80060a4:	e005      	b.n	80060b2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80060a6:	4b1c      	ldr	r3, [pc, #112]	; (8006118 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80060a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060aa:	f003 0302 	and.w	r3, r3, #2
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d0eb      	beq.n	800608a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80060b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d129      	bne.n	800610e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80060ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060be:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80060c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80060ca:	d10e      	bne.n	80060ea <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80060cc:	4b12      	ldr	r3, [pc, #72]	; (8006118 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80060ce:	691b      	ldr	r3, [r3, #16]
 80060d0:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80060d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060d8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80060dc:	091a      	lsrs	r2, r3, #4
 80060de:	4b10      	ldr	r3, [pc, #64]	; (8006120 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80060e0:	4013      	ands	r3, r2
 80060e2:	4a0d      	ldr	r2, [pc, #52]	; (8006118 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80060e4:	430b      	orrs	r3, r1
 80060e6:	6113      	str	r3, [r2, #16]
 80060e8:	e005      	b.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80060ea:	4b0b      	ldr	r3, [pc, #44]	; (8006118 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80060ec:	691b      	ldr	r3, [r3, #16]
 80060ee:	4a0a      	ldr	r2, [pc, #40]	; (8006118 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80060f0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80060f4:	6113      	str	r3, [r2, #16]
 80060f6:	4b08      	ldr	r3, [pc, #32]	; (8006118 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80060f8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80060fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060fe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006102:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006106:	4a04      	ldr	r2, [pc, #16]	; (8006118 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006108:	430b      	orrs	r3, r1
 800610a:	6713      	str	r3, [r2, #112]	; 0x70
 800610c:	e00e      	b.n	800612c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800610e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006112:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8006116:	e009      	b.n	800612c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8006118:	58024400 	.word	0x58024400
 800611c:	58024800 	.word	0x58024800
 8006120:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006124:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006128:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800612c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006134:	f002 0301 	and.w	r3, r2, #1
 8006138:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800613c:	2300      	movs	r3, #0
 800613e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006142:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006146:	460b      	mov	r3, r1
 8006148:	4313      	orrs	r3, r2
 800614a:	f000 8089 	beq.w	8006260 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800614e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006152:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006154:	2b28      	cmp	r3, #40	; 0x28
 8006156:	d86b      	bhi.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8006158:	a201      	add	r2, pc, #4	; (adr r2, 8006160 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800615a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800615e:	bf00      	nop
 8006160:	08006239 	.word	0x08006239
 8006164:	08006231 	.word	0x08006231
 8006168:	08006231 	.word	0x08006231
 800616c:	08006231 	.word	0x08006231
 8006170:	08006231 	.word	0x08006231
 8006174:	08006231 	.word	0x08006231
 8006178:	08006231 	.word	0x08006231
 800617c:	08006231 	.word	0x08006231
 8006180:	08006205 	.word	0x08006205
 8006184:	08006231 	.word	0x08006231
 8006188:	08006231 	.word	0x08006231
 800618c:	08006231 	.word	0x08006231
 8006190:	08006231 	.word	0x08006231
 8006194:	08006231 	.word	0x08006231
 8006198:	08006231 	.word	0x08006231
 800619c:	08006231 	.word	0x08006231
 80061a0:	0800621b 	.word	0x0800621b
 80061a4:	08006231 	.word	0x08006231
 80061a8:	08006231 	.word	0x08006231
 80061ac:	08006231 	.word	0x08006231
 80061b0:	08006231 	.word	0x08006231
 80061b4:	08006231 	.word	0x08006231
 80061b8:	08006231 	.word	0x08006231
 80061bc:	08006231 	.word	0x08006231
 80061c0:	08006239 	.word	0x08006239
 80061c4:	08006231 	.word	0x08006231
 80061c8:	08006231 	.word	0x08006231
 80061cc:	08006231 	.word	0x08006231
 80061d0:	08006231 	.word	0x08006231
 80061d4:	08006231 	.word	0x08006231
 80061d8:	08006231 	.word	0x08006231
 80061dc:	08006231 	.word	0x08006231
 80061e0:	08006239 	.word	0x08006239
 80061e4:	08006231 	.word	0x08006231
 80061e8:	08006231 	.word	0x08006231
 80061ec:	08006231 	.word	0x08006231
 80061f0:	08006231 	.word	0x08006231
 80061f4:	08006231 	.word	0x08006231
 80061f8:	08006231 	.word	0x08006231
 80061fc:	08006231 	.word	0x08006231
 8006200:	08006239 	.word	0x08006239
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006204:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006208:	3308      	adds	r3, #8
 800620a:	2101      	movs	r1, #1
 800620c:	4618      	mov	r0, r3
 800620e:	f001 fe95 	bl	8007f3c <RCCEx_PLL2_Config>
 8006212:	4603      	mov	r3, r0
 8006214:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006218:	e00f      	b.n	800623a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800621a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800621e:	3328      	adds	r3, #40	; 0x28
 8006220:	2101      	movs	r1, #1
 8006222:	4618      	mov	r0, r3
 8006224:	f001 ff3c 	bl	80080a0 <RCCEx_PLL3_Config>
 8006228:	4603      	mov	r3, r0
 800622a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800622e:	e004      	b.n	800623a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006230:	2301      	movs	r3, #1
 8006232:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006236:	e000      	b.n	800623a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8006238:	bf00      	nop
    }

    if (ret == HAL_OK)
 800623a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800623e:	2b00      	cmp	r3, #0
 8006240:	d10a      	bne.n	8006258 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006242:	4bbf      	ldr	r3, [pc, #764]	; (8006540 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006244:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006246:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800624a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800624e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006250:	4abb      	ldr	r2, [pc, #748]	; (8006540 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006252:	430b      	orrs	r3, r1
 8006254:	6553      	str	r3, [r2, #84]	; 0x54
 8006256:	e003      	b.n	8006260 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006258:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800625c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006260:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006268:	f002 0302 	and.w	r3, r2, #2
 800626c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006270:	2300      	movs	r3, #0
 8006272:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006276:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800627a:	460b      	mov	r3, r1
 800627c:	4313      	orrs	r3, r2
 800627e:	d041      	beq.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006280:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006284:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006286:	2b05      	cmp	r3, #5
 8006288:	d824      	bhi.n	80062d4 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800628a:	a201      	add	r2, pc, #4	; (adr r2, 8006290 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800628c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006290:	080062dd 	.word	0x080062dd
 8006294:	080062a9 	.word	0x080062a9
 8006298:	080062bf 	.word	0x080062bf
 800629c:	080062dd 	.word	0x080062dd
 80062a0:	080062dd 	.word	0x080062dd
 80062a4:	080062dd 	.word	0x080062dd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80062a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062ac:	3308      	adds	r3, #8
 80062ae:	2101      	movs	r1, #1
 80062b0:	4618      	mov	r0, r3
 80062b2:	f001 fe43 	bl	8007f3c <RCCEx_PLL2_Config>
 80062b6:	4603      	mov	r3, r0
 80062b8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80062bc:	e00f      	b.n	80062de <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80062be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062c2:	3328      	adds	r3, #40	; 0x28
 80062c4:	2101      	movs	r1, #1
 80062c6:	4618      	mov	r0, r3
 80062c8:	f001 feea 	bl	80080a0 <RCCEx_PLL3_Config>
 80062cc:	4603      	mov	r3, r0
 80062ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80062d2:	e004      	b.n	80062de <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80062d4:	2301      	movs	r3, #1
 80062d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80062da:	e000      	b.n	80062de <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80062dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d10a      	bne.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80062e6:	4b96      	ldr	r3, [pc, #600]	; (8006540 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80062e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062ea:	f023 0107 	bic.w	r1, r3, #7
 80062ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80062f4:	4a92      	ldr	r2, [pc, #584]	; (8006540 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80062f6:	430b      	orrs	r3, r1
 80062f8:	6553      	str	r3, [r2, #84]	; 0x54
 80062fa:	e003      	b.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062fc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006300:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006304:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800630c:	f002 0304 	and.w	r3, r2, #4
 8006310:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006314:	2300      	movs	r3, #0
 8006316:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800631a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800631e:	460b      	mov	r3, r1
 8006320:	4313      	orrs	r3, r2
 8006322:	d044      	beq.n	80063ae <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006324:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006328:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800632c:	2b05      	cmp	r3, #5
 800632e:	d825      	bhi.n	800637c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8006330:	a201      	add	r2, pc, #4	; (adr r2, 8006338 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8006332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006336:	bf00      	nop
 8006338:	08006385 	.word	0x08006385
 800633c:	08006351 	.word	0x08006351
 8006340:	08006367 	.word	0x08006367
 8006344:	08006385 	.word	0x08006385
 8006348:	08006385 	.word	0x08006385
 800634c:	08006385 	.word	0x08006385
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006350:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006354:	3308      	adds	r3, #8
 8006356:	2101      	movs	r1, #1
 8006358:	4618      	mov	r0, r3
 800635a:	f001 fdef 	bl	8007f3c <RCCEx_PLL2_Config>
 800635e:	4603      	mov	r3, r0
 8006360:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006364:	e00f      	b.n	8006386 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006366:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800636a:	3328      	adds	r3, #40	; 0x28
 800636c:	2101      	movs	r1, #1
 800636e:	4618      	mov	r0, r3
 8006370:	f001 fe96 	bl	80080a0 <RCCEx_PLL3_Config>
 8006374:	4603      	mov	r3, r0
 8006376:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800637a:	e004      	b.n	8006386 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800637c:	2301      	movs	r3, #1
 800637e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006382:	e000      	b.n	8006386 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8006384:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006386:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800638a:	2b00      	cmp	r3, #0
 800638c:	d10b      	bne.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800638e:	4b6c      	ldr	r3, [pc, #432]	; (8006540 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006390:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006392:	f023 0107 	bic.w	r1, r3, #7
 8006396:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800639a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800639e:	4a68      	ldr	r2, [pc, #416]	; (8006540 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80063a0:	430b      	orrs	r3, r1
 80063a2:	6593      	str	r3, [r2, #88]	; 0x58
 80063a4:	e003      	b.n	80063ae <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80063aa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80063ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063b6:	f002 0320 	and.w	r3, r2, #32
 80063ba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80063be:	2300      	movs	r3, #0
 80063c0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80063c4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80063c8:	460b      	mov	r3, r1
 80063ca:	4313      	orrs	r3, r2
 80063cc:	d055      	beq.n	800647a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80063ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80063da:	d033      	beq.n	8006444 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80063dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80063e0:	d82c      	bhi.n	800643c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80063e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063e6:	d02f      	beq.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80063e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063ec:	d826      	bhi.n	800643c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80063ee:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80063f2:	d02b      	beq.n	800644c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80063f4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80063f8:	d820      	bhi.n	800643c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80063fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80063fe:	d012      	beq.n	8006426 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8006400:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006404:	d81a      	bhi.n	800643c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006406:	2b00      	cmp	r3, #0
 8006408:	d022      	beq.n	8006450 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800640a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800640e:	d115      	bne.n	800643c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006410:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006414:	3308      	adds	r3, #8
 8006416:	2100      	movs	r1, #0
 8006418:	4618      	mov	r0, r3
 800641a:	f001 fd8f 	bl	8007f3c <RCCEx_PLL2_Config>
 800641e:	4603      	mov	r3, r0
 8006420:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006424:	e015      	b.n	8006452 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006426:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800642a:	3328      	adds	r3, #40	; 0x28
 800642c:	2102      	movs	r1, #2
 800642e:	4618      	mov	r0, r3
 8006430:	f001 fe36 	bl	80080a0 <RCCEx_PLL3_Config>
 8006434:	4603      	mov	r3, r0
 8006436:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800643a:	e00a      	b.n	8006452 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800643c:	2301      	movs	r3, #1
 800643e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006442:	e006      	b.n	8006452 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006444:	bf00      	nop
 8006446:	e004      	b.n	8006452 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006448:	bf00      	nop
 800644a:	e002      	b.n	8006452 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800644c:	bf00      	nop
 800644e:	e000      	b.n	8006452 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006450:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006452:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006456:	2b00      	cmp	r3, #0
 8006458:	d10b      	bne.n	8006472 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800645a:	4b39      	ldr	r3, [pc, #228]	; (8006540 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800645c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800645e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8006462:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006466:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800646a:	4a35      	ldr	r2, [pc, #212]	; (8006540 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800646c:	430b      	orrs	r3, r1
 800646e:	6553      	str	r3, [r2, #84]	; 0x54
 8006470:	e003      	b.n	800647a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006472:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006476:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800647a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800647e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006482:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8006486:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800648a:	2300      	movs	r3, #0
 800648c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006490:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8006494:	460b      	mov	r3, r1
 8006496:	4313      	orrs	r3, r2
 8006498:	d058      	beq.n	800654c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800649a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800649e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80064a2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80064a6:	d033      	beq.n	8006510 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80064a8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80064ac:	d82c      	bhi.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80064ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064b2:	d02f      	beq.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80064b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064b8:	d826      	bhi.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80064ba:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80064be:	d02b      	beq.n	8006518 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80064c0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80064c4:	d820      	bhi.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80064c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064ca:	d012      	beq.n	80064f2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80064cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064d0:	d81a      	bhi.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d022      	beq.n	800651c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80064d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064da:	d115      	bne.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80064dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064e0:	3308      	adds	r3, #8
 80064e2:	2100      	movs	r1, #0
 80064e4:	4618      	mov	r0, r3
 80064e6:	f001 fd29 	bl	8007f3c <RCCEx_PLL2_Config>
 80064ea:	4603      	mov	r3, r0
 80064ec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80064f0:	e015      	b.n	800651e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80064f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064f6:	3328      	adds	r3, #40	; 0x28
 80064f8:	2102      	movs	r1, #2
 80064fa:	4618      	mov	r0, r3
 80064fc:	f001 fdd0 	bl	80080a0 <RCCEx_PLL3_Config>
 8006500:	4603      	mov	r3, r0
 8006502:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006506:	e00a      	b.n	800651e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006508:	2301      	movs	r3, #1
 800650a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800650e:	e006      	b.n	800651e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006510:	bf00      	nop
 8006512:	e004      	b.n	800651e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006514:	bf00      	nop
 8006516:	e002      	b.n	800651e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006518:	bf00      	nop
 800651a:	e000      	b.n	800651e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800651c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800651e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006522:	2b00      	cmp	r3, #0
 8006524:	d10e      	bne.n	8006544 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006526:	4b06      	ldr	r3, [pc, #24]	; (8006540 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006528:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800652a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800652e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006532:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006536:	4a02      	ldr	r2, [pc, #8]	; (8006540 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006538:	430b      	orrs	r3, r1
 800653a:	6593      	str	r3, [r2, #88]	; 0x58
 800653c:	e006      	b.n	800654c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800653e:	bf00      	nop
 8006540:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006544:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006548:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800654c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006554:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8006558:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800655c:	2300      	movs	r3, #0
 800655e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006562:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8006566:	460b      	mov	r3, r1
 8006568:	4313      	orrs	r3, r2
 800656a:	d055      	beq.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800656c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006570:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006574:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006578:	d033      	beq.n	80065e2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800657a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800657e:	d82c      	bhi.n	80065da <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006580:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006584:	d02f      	beq.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8006586:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800658a:	d826      	bhi.n	80065da <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800658c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006590:	d02b      	beq.n	80065ea <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8006592:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006596:	d820      	bhi.n	80065da <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006598:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800659c:	d012      	beq.n	80065c4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800659e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80065a2:	d81a      	bhi.n	80065da <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d022      	beq.n	80065ee <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80065a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065ac:	d115      	bne.n	80065da <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80065ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065b2:	3308      	adds	r3, #8
 80065b4:	2100      	movs	r1, #0
 80065b6:	4618      	mov	r0, r3
 80065b8:	f001 fcc0 	bl	8007f3c <RCCEx_PLL2_Config>
 80065bc:	4603      	mov	r3, r0
 80065be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80065c2:	e015      	b.n	80065f0 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80065c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065c8:	3328      	adds	r3, #40	; 0x28
 80065ca:	2102      	movs	r1, #2
 80065cc:	4618      	mov	r0, r3
 80065ce:	f001 fd67 	bl	80080a0 <RCCEx_PLL3_Config>
 80065d2:	4603      	mov	r3, r0
 80065d4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80065d8:	e00a      	b.n	80065f0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80065da:	2301      	movs	r3, #1
 80065dc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80065e0:	e006      	b.n	80065f0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80065e2:	bf00      	nop
 80065e4:	e004      	b.n	80065f0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80065e6:	bf00      	nop
 80065e8:	e002      	b.n	80065f0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80065ea:	bf00      	nop
 80065ec:	e000      	b.n	80065f0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80065ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065f0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d10b      	bne.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80065f8:	4ba1      	ldr	r3, [pc, #644]	; (8006880 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80065fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065fc:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8006600:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006604:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006608:	4a9d      	ldr	r2, [pc, #628]	; (8006880 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800660a:	430b      	orrs	r3, r1
 800660c:	6593      	str	r3, [r2, #88]	; 0x58
 800660e:	e003      	b.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006610:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006614:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006618:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800661c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006620:	f002 0308 	and.w	r3, r2, #8
 8006624:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006628:	2300      	movs	r3, #0
 800662a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800662e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8006632:	460b      	mov	r3, r1
 8006634:	4313      	orrs	r3, r2
 8006636:	d01e      	beq.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006638:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800663c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006640:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006644:	d10c      	bne.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006646:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800664a:	3328      	adds	r3, #40	; 0x28
 800664c:	2102      	movs	r1, #2
 800664e:	4618      	mov	r0, r3
 8006650:	f001 fd26 	bl	80080a0 <RCCEx_PLL3_Config>
 8006654:	4603      	mov	r3, r0
 8006656:	2b00      	cmp	r3, #0
 8006658:	d002      	beq.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800665a:	2301      	movs	r3, #1
 800665c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006660:	4b87      	ldr	r3, [pc, #540]	; (8006880 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006662:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006664:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006668:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800666c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006670:	4a83      	ldr	r2, [pc, #524]	; (8006880 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006672:	430b      	orrs	r3, r1
 8006674:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006676:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800667a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800667e:	f002 0310 	and.w	r3, r2, #16
 8006682:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006686:	2300      	movs	r3, #0
 8006688:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800668c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8006690:	460b      	mov	r3, r1
 8006692:	4313      	orrs	r3, r2
 8006694:	d01e      	beq.n	80066d4 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006696:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800669a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800669e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066a2:	d10c      	bne.n	80066be <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80066a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066a8:	3328      	adds	r3, #40	; 0x28
 80066aa:	2102      	movs	r1, #2
 80066ac:	4618      	mov	r0, r3
 80066ae:	f001 fcf7 	bl	80080a0 <RCCEx_PLL3_Config>
 80066b2:	4603      	mov	r3, r0
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d002      	beq.n	80066be <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80066b8:	2301      	movs	r3, #1
 80066ba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80066be:	4b70      	ldr	r3, [pc, #448]	; (8006880 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80066c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066c2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80066c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80066ce:	4a6c      	ldr	r2, [pc, #432]	; (8006880 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80066d0:	430b      	orrs	r3, r1
 80066d2:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80066d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066dc:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80066e0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80066e4:	2300      	movs	r3, #0
 80066e6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80066ea:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80066ee:	460b      	mov	r3, r1
 80066f0:	4313      	orrs	r3, r2
 80066f2:	d03e      	beq.n	8006772 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80066f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066f8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80066fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006700:	d022      	beq.n	8006748 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8006702:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006706:	d81b      	bhi.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8006708:	2b00      	cmp	r3, #0
 800670a:	d003      	beq.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800670c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006710:	d00b      	beq.n	800672a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8006712:	e015      	b.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006714:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006718:	3308      	adds	r3, #8
 800671a:	2100      	movs	r1, #0
 800671c:	4618      	mov	r0, r3
 800671e:	f001 fc0d 	bl	8007f3c <RCCEx_PLL2_Config>
 8006722:	4603      	mov	r3, r0
 8006724:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006728:	e00f      	b.n	800674a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800672a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800672e:	3328      	adds	r3, #40	; 0x28
 8006730:	2102      	movs	r1, #2
 8006732:	4618      	mov	r0, r3
 8006734:	f001 fcb4 	bl	80080a0 <RCCEx_PLL3_Config>
 8006738:	4603      	mov	r3, r0
 800673a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800673e:	e004      	b.n	800674a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006740:	2301      	movs	r3, #1
 8006742:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006746:	e000      	b.n	800674a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8006748:	bf00      	nop
    }

    if (ret == HAL_OK)
 800674a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800674e:	2b00      	cmp	r3, #0
 8006750:	d10b      	bne.n	800676a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006752:	4b4b      	ldr	r3, [pc, #300]	; (8006880 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006754:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006756:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800675a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800675e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006762:	4a47      	ldr	r2, [pc, #284]	; (8006880 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006764:	430b      	orrs	r3, r1
 8006766:	6593      	str	r3, [r2, #88]	; 0x58
 8006768:	e003      	b.n	8006772 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800676a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800676e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006772:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800677a:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800677e:	67bb      	str	r3, [r7, #120]	; 0x78
 8006780:	2300      	movs	r3, #0
 8006782:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006784:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8006788:	460b      	mov	r3, r1
 800678a:	4313      	orrs	r3, r2
 800678c:	d03b      	beq.n	8006806 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800678e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006792:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006796:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800679a:	d01f      	beq.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800679c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80067a0:	d818      	bhi.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80067a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80067a6:	d003      	beq.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80067a8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80067ac:	d007      	beq.n	80067be <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80067ae:	e011      	b.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067b0:	4b33      	ldr	r3, [pc, #204]	; (8006880 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80067b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067b4:	4a32      	ldr	r2, [pc, #200]	; (8006880 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80067b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80067ba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80067bc:	e00f      	b.n	80067de <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80067be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067c2:	3328      	adds	r3, #40	; 0x28
 80067c4:	2101      	movs	r1, #1
 80067c6:	4618      	mov	r0, r3
 80067c8:	f001 fc6a 	bl	80080a0 <RCCEx_PLL3_Config>
 80067cc:	4603      	mov	r3, r0
 80067ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80067d2:	e004      	b.n	80067de <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80067d4:	2301      	movs	r3, #1
 80067d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80067da:	e000      	b.n	80067de <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80067dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d10b      	bne.n	80067fe <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80067e6:	4b26      	ldr	r3, [pc, #152]	; (8006880 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80067e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067ea:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80067ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067f6:	4a22      	ldr	r2, [pc, #136]	; (8006880 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80067f8:	430b      	orrs	r3, r1
 80067fa:	6553      	str	r3, [r2, #84]	; 0x54
 80067fc:	e003      	b.n	8006806 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006802:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006806:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800680a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800680e:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8006812:	673b      	str	r3, [r7, #112]	; 0x70
 8006814:	2300      	movs	r3, #0
 8006816:	677b      	str	r3, [r7, #116]	; 0x74
 8006818:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800681c:	460b      	mov	r3, r1
 800681e:	4313      	orrs	r3, r2
 8006820:	d034      	beq.n	800688c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006822:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006826:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006828:	2b00      	cmp	r3, #0
 800682a:	d003      	beq.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800682c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006830:	d007      	beq.n	8006842 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8006832:	e011      	b.n	8006858 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006834:	4b12      	ldr	r3, [pc, #72]	; (8006880 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006838:	4a11      	ldr	r2, [pc, #68]	; (8006880 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800683a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800683e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006840:	e00e      	b.n	8006860 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006842:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006846:	3308      	adds	r3, #8
 8006848:	2102      	movs	r1, #2
 800684a:	4618      	mov	r0, r3
 800684c:	f001 fb76 	bl	8007f3c <RCCEx_PLL2_Config>
 8006850:	4603      	mov	r3, r0
 8006852:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006856:	e003      	b.n	8006860 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8006858:	2301      	movs	r3, #1
 800685a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800685e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006860:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006864:	2b00      	cmp	r3, #0
 8006866:	d10d      	bne.n	8006884 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006868:	4b05      	ldr	r3, [pc, #20]	; (8006880 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800686a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800686c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006870:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006874:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006876:	4a02      	ldr	r2, [pc, #8]	; (8006880 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006878:	430b      	orrs	r3, r1
 800687a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800687c:	e006      	b.n	800688c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800687e:	bf00      	nop
 8006880:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006884:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006888:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800688c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006894:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8006898:	66bb      	str	r3, [r7, #104]	; 0x68
 800689a:	2300      	movs	r3, #0
 800689c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800689e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80068a2:	460b      	mov	r3, r1
 80068a4:	4313      	orrs	r3, r2
 80068a6:	d00c      	beq.n	80068c2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80068a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068ac:	3328      	adds	r3, #40	; 0x28
 80068ae:	2102      	movs	r1, #2
 80068b0:	4618      	mov	r0, r3
 80068b2:	f001 fbf5 	bl	80080a0 <RCCEx_PLL3_Config>
 80068b6:	4603      	mov	r3, r0
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d002      	beq.n	80068c2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80068bc:	2301      	movs	r3, #1
 80068be:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80068c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ca:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80068ce:	663b      	str	r3, [r7, #96]	; 0x60
 80068d0:	2300      	movs	r3, #0
 80068d2:	667b      	str	r3, [r7, #100]	; 0x64
 80068d4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80068d8:	460b      	mov	r3, r1
 80068da:	4313      	orrs	r3, r2
 80068dc:	d038      	beq.n	8006950 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80068de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80068e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80068ea:	d018      	beq.n	800691e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80068ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80068f0:	d811      	bhi.n	8006916 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80068f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068f6:	d014      	beq.n	8006922 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80068f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068fc:	d80b      	bhi.n	8006916 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d011      	beq.n	8006926 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8006902:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006906:	d106      	bne.n	8006916 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006908:	4bc3      	ldr	r3, [pc, #780]	; (8006c18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800690a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800690c:	4ac2      	ldr	r2, [pc, #776]	; (8006c18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800690e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006912:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006914:	e008      	b.n	8006928 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006916:	2301      	movs	r3, #1
 8006918:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800691c:	e004      	b.n	8006928 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800691e:	bf00      	nop
 8006920:	e002      	b.n	8006928 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006922:	bf00      	nop
 8006924:	e000      	b.n	8006928 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006926:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006928:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800692c:	2b00      	cmp	r3, #0
 800692e:	d10b      	bne.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006930:	4bb9      	ldr	r3, [pc, #740]	; (8006c18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006932:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006934:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006938:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800693c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006940:	4ab5      	ldr	r2, [pc, #724]	; (8006c18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006942:	430b      	orrs	r3, r1
 8006944:	6553      	str	r3, [r2, #84]	; 0x54
 8006946:	e003      	b.n	8006950 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006948:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800694c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006950:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006958:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800695c:	65bb      	str	r3, [r7, #88]	; 0x58
 800695e:	2300      	movs	r3, #0
 8006960:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006962:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8006966:	460b      	mov	r3, r1
 8006968:	4313      	orrs	r3, r2
 800696a:	d009      	beq.n	8006980 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800696c:	4baa      	ldr	r3, [pc, #680]	; (8006c18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800696e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006970:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006974:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006978:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800697a:	4aa7      	ldr	r2, [pc, #668]	; (8006c18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800697c:	430b      	orrs	r3, r1
 800697e:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006980:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006988:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800698c:	653b      	str	r3, [r7, #80]	; 0x50
 800698e:	2300      	movs	r3, #0
 8006990:	657b      	str	r3, [r7, #84]	; 0x54
 8006992:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8006996:	460b      	mov	r3, r1
 8006998:	4313      	orrs	r3, r2
 800699a:	d00a      	beq.n	80069b2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800699c:	4b9e      	ldr	r3, [pc, #632]	; (8006c18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800699e:	691b      	ldr	r3, [r3, #16]
 80069a0:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 80069a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069a8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80069ac:	4a9a      	ldr	r2, [pc, #616]	; (8006c18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80069ae:	430b      	orrs	r3, r1
 80069b0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80069b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069ba:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80069be:	64bb      	str	r3, [r7, #72]	; 0x48
 80069c0:	2300      	movs	r3, #0
 80069c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80069c4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80069c8:	460b      	mov	r3, r1
 80069ca:	4313      	orrs	r3, r2
 80069cc:	d009      	beq.n	80069e2 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80069ce:	4b92      	ldr	r3, [pc, #584]	; (8006c18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80069d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069d2:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80069d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069dc:	4a8e      	ldr	r2, [pc, #568]	; (8006c18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80069de:	430b      	orrs	r3, r1
 80069e0:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80069e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069ea:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80069ee:	643b      	str	r3, [r7, #64]	; 0x40
 80069f0:	2300      	movs	r3, #0
 80069f2:	647b      	str	r3, [r7, #68]	; 0x44
 80069f4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80069f8:	460b      	mov	r3, r1
 80069fa:	4313      	orrs	r3, r2
 80069fc:	d00e      	beq.n	8006a1c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80069fe:	4b86      	ldr	r3, [pc, #536]	; (8006c18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006a00:	691b      	ldr	r3, [r3, #16]
 8006a02:	4a85      	ldr	r2, [pc, #532]	; (8006c18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006a04:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006a08:	6113      	str	r3, [r2, #16]
 8006a0a:	4b83      	ldr	r3, [pc, #524]	; (8006c18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006a0c:	6919      	ldr	r1, [r3, #16]
 8006a0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a12:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006a16:	4a80      	ldr	r2, [pc, #512]	; (8006c18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006a18:	430b      	orrs	r3, r1
 8006a1a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006a1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a24:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8006a28:	63bb      	str	r3, [r7, #56]	; 0x38
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a2e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8006a32:	460b      	mov	r3, r1
 8006a34:	4313      	orrs	r3, r2
 8006a36:	d009      	beq.n	8006a4c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006a38:	4b77      	ldr	r3, [pc, #476]	; (8006c18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006a3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a3c:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8006a40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a46:	4a74      	ldr	r2, [pc, #464]	; (8006c18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006a48:	430b      	orrs	r3, r1
 8006a4a:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006a4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a54:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8006a58:	633b      	str	r3, [r7, #48]	; 0x30
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	637b      	str	r3, [r7, #52]	; 0x34
 8006a5e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8006a62:	460b      	mov	r3, r1
 8006a64:	4313      	orrs	r3, r2
 8006a66:	d00a      	beq.n	8006a7e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006a68:	4b6b      	ldr	r3, [pc, #428]	; (8006c18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006a6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a6c:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8006a70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a78:	4a67      	ldr	r2, [pc, #412]	; (8006c18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006a7a:	430b      	orrs	r3, r1
 8006a7c:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006a7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a86:	2100      	movs	r1, #0
 8006a88:	62b9      	str	r1, [r7, #40]	; 0x28
 8006a8a:	f003 0301 	and.w	r3, r3, #1
 8006a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a90:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8006a94:	460b      	mov	r3, r1
 8006a96:	4313      	orrs	r3, r2
 8006a98:	d011      	beq.n	8006abe <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006a9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a9e:	3308      	adds	r3, #8
 8006aa0:	2100      	movs	r1, #0
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	f001 fa4a 	bl	8007f3c <RCCEx_PLL2_Config>
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8006aae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d003      	beq.n	8006abe <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ab6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006aba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006abe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ac6:	2100      	movs	r1, #0
 8006ac8:	6239      	str	r1, [r7, #32]
 8006aca:	f003 0302 	and.w	r3, r3, #2
 8006ace:	627b      	str	r3, [r7, #36]	; 0x24
 8006ad0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006ad4:	460b      	mov	r3, r1
 8006ad6:	4313      	orrs	r3, r2
 8006ad8:	d011      	beq.n	8006afe <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006ada:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ade:	3308      	adds	r3, #8
 8006ae0:	2101      	movs	r1, #1
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	f001 fa2a 	bl	8007f3c <RCCEx_PLL2_Config>
 8006ae8:	4603      	mov	r3, r0
 8006aea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8006aee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d003      	beq.n	8006afe <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006af6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006afa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006afe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b06:	2100      	movs	r1, #0
 8006b08:	61b9      	str	r1, [r7, #24]
 8006b0a:	f003 0304 	and.w	r3, r3, #4
 8006b0e:	61fb      	str	r3, [r7, #28]
 8006b10:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006b14:	460b      	mov	r3, r1
 8006b16:	4313      	orrs	r3, r2
 8006b18:	d011      	beq.n	8006b3e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006b1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b1e:	3308      	adds	r3, #8
 8006b20:	2102      	movs	r1, #2
 8006b22:	4618      	mov	r0, r3
 8006b24:	f001 fa0a 	bl	8007f3c <RCCEx_PLL2_Config>
 8006b28:	4603      	mov	r3, r0
 8006b2a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8006b2e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d003      	beq.n	8006b3e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b36:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006b3a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006b3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b46:	2100      	movs	r1, #0
 8006b48:	6139      	str	r1, [r7, #16]
 8006b4a:	f003 0308 	and.w	r3, r3, #8
 8006b4e:	617b      	str	r3, [r7, #20]
 8006b50:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006b54:	460b      	mov	r3, r1
 8006b56:	4313      	orrs	r3, r2
 8006b58:	d011      	beq.n	8006b7e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006b5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b5e:	3328      	adds	r3, #40	; 0x28
 8006b60:	2100      	movs	r1, #0
 8006b62:	4618      	mov	r0, r3
 8006b64:	f001 fa9c 	bl	80080a0 <RCCEx_PLL3_Config>
 8006b68:	4603      	mov	r3, r0
 8006b6a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8006b6e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d003      	beq.n	8006b7e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b76:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006b7a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006b7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b86:	2100      	movs	r1, #0
 8006b88:	60b9      	str	r1, [r7, #8]
 8006b8a:	f003 0310 	and.w	r3, r3, #16
 8006b8e:	60fb      	str	r3, [r7, #12]
 8006b90:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006b94:	460b      	mov	r3, r1
 8006b96:	4313      	orrs	r3, r2
 8006b98:	d011      	beq.n	8006bbe <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006b9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b9e:	3328      	adds	r3, #40	; 0x28
 8006ba0:	2101      	movs	r1, #1
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	f001 fa7c 	bl	80080a0 <RCCEx_PLL3_Config>
 8006ba8:	4603      	mov	r3, r0
 8006baa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8006bae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d003      	beq.n	8006bbe <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bb6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006bba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006bbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bc6:	2100      	movs	r1, #0
 8006bc8:	6039      	str	r1, [r7, #0]
 8006bca:	f003 0320 	and.w	r3, r3, #32
 8006bce:	607b      	str	r3, [r7, #4]
 8006bd0:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006bd4:	460b      	mov	r3, r1
 8006bd6:	4313      	orrs	r3, r2
 8006bd8:	d011      	beq.n	8006bfe <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006bda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006bde:	3328      	adds	r3, #40	; 0x28
 8006be0:	2102      	movs	r1, #2
 8006be2:	4618      	mov	r0, r3
 8006be4:	f001 fa5c 	bl	80080a0 <RCCEx_PLL3_Config>
 8006be8:	4603      	mov	r3, r0
 8006bea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8006bee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d003      	beq.n	8006bfe <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bf6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006bfa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8006bfe:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d101      	bne.n	8006c0a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8006c06:	2300      	movs	r3, #0
 8006c08:	e000      	b.n	8006c0c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8006c0a:	2301      	movs	r3, #1
}
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8006c12:	46bd      	mov	sp, r7
 8006c14:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006c18:	58024400 	.word	0x58024400

08006c1c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b090      	sub	sp, #64	; 0x40
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006c26:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c2a:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8006c2e:	430b      	orrs	r3, r1
 8006c30:	f040 8094 	bne.w	8006d5c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8006c34:	4b9e      	ldr	r3, [pc, #632]	; (8006eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006c36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c38:	f003 0307 	and.w	r3, r3, #7
 8006c3c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8006c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c40:	2b04      	cmp	r3, #4
 8006c42:	f200 8087 	bhi.w	8006d54 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8006c46:	a201      	add	r2, pc, #4	; (adr r2, 8006c4c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8006c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c4c:	08006c61 	.word	0x08006c61
 8006c50:	08006c89 	.word	0x08006c89
 8006c54:	08006cb1 	.word	0x08006cb1
 8006c58:	08006d4d 	.word	0x08006d4d
 8006c5c:	08006cd9 	.word	0x08006cd9
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006c60:	4b93      	ldr	r3, [pc, #588]	; (8006eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c68:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006c6c:	d108      	bne.n	8006c80 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006c6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006c72:	4618      	mov	r0, r3
 8006c74:	f001 f810 	bl	8007c98 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c7c:	f000 bd45 	b.w	800770a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006c80:	2300      	movs	r3, #0
 8006c82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c84:	f000 bd41 	b.w	800770a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006c88:	4b89      	ldr	r3, [pc, #548]	; (8006eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c90:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006c94:	d108      	bne.n	8006ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c96:	f107 0318 	add.w	r3, r7, #24
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	f000 fd54 	bl	8007748 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006ca0:	69bb      	ldr	r3, [r7, #24]
 8006ca2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ca4:	f000 bd31 	b.w	800770a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006ca8:	2300      	movs	r3, #0
 8006caa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006cac:	f000 bd2d 	b.w	800770a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006cb0:	4b7f      	ldr	r3, [pc, #508]	; (8006eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006cb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006cbc:	d108      	bne.n	8006cd0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006cbe:	f107 030c 	add.w	r3, r7, #12
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	f000 fe94 	bl	80079f0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ccc:	f000 bd1d 	b.w	800770a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006cd4:	f000 bd19 	b.w	800770a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006cd8:	4b75      	ldr	r3, [pc, #468]	; (8006eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006cda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cdc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006ce0:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006ce2:	4b73      	ldr	r3, [pc, #460]	; (8006eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f003 0304 	and.w	r3, r3, #4
 8006cea:	2b04      	cmp	r3, #4
 8006cec:	d10c      	bne.n	8006d08 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8006cee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d109      	bne.n	8006d08 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006cf4:	4b6e      	ldr	r3, [pc, #440]	; (8006eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	08db      	lsrs	r3, r3, #3
 8006cfa:	f003 0303 	and.w	r3, r3, #3
 8006cfe:	4a6d      	ldr	r2, [pc, #436]	; (8006eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006d00:	fa22 f303 	lsr.w	r3, r2, r3
 8006d04:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d06:	e01f      	b.n	8006d48 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006d08:	4b69      	ldr	r3, [pc, #420]	; (8006eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d14:	d106      	bne.n	8006d24 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8006d16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d18:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006d1c:	d102      	bne.n	8006d24 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006d1e:	4b66      	ldr	r3, [pc, #408]	; (8006eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006d20:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d22:	e011      	b.n	8006d48 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006d24:	4b62      	ldr	r3, [pc, #392]	; (8006eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d2c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d30:	d106      	bne.n	8006d40 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8006d32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d38:	d102      	bne.n	8006d40 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006d3a:	4b60      	ldr	r3, [pc, #384]	; (8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006d3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d3e:	e003      	b.n	8006d48 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006d40:	2300      	movs	r3, #0
 8006d42:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006d44:	f000 bce1 	b.w	800770a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006d48:	f000 bcdf 	b.w	800770a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006d4c:	4b5c      	ldr	r3, [pc, #368]	; (8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006d4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d50:	f000 bcdb 	b.w	800770a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006d54:	2300      	movs	r3, #0
 8006d56:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d58:	f000 bcd7 	b.w	800770a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8006d5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d60:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8006d64:	430b      	orrs	r3, r1
 8006d66:	f040 80ad 	bne.w	8006ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8006d6a:	4b51      	ldr	r3, [pc, #324]	; (8006eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006d6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d6e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8006d72:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8006d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d7a:	d056      	beq.n	8006e2a <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8006d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d82:	f200 8090 	bhi.w	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d88:	2bc0      	cmp	r3, #192	; 0xc0
 8006d8a:	f000 8088 	beq.w	8006e9e <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8006d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d90:	2bc0      	cmp	r3, #192	; 0xc0
 8006d92:	f200 8088 	bhi.w	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d98:	2b80      	cmp	r3, #128	; 0x80
 8006d9a:	d032      	beq.n	8006e02 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8006d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d9e:	2b80      	cmp	r3, #128	; 0x80
 8006da0:	f200 8081 	bhi.w	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d003      	beq.n	8006db2 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8006daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dac:	2b40      	cmp	r3, #64	; 0x40
 8006dae:	d014      	beq.n	8006dda <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8006db0:	e079      	b.n	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006db2:	4b3f      	ldr	r3, [pc, #252]	; (8006eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006dba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006dbe:	d108      	bne.n	8006dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006dc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	f000 ff67 	bl	8007c98 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dcc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006dce:	f000 bc9c 	b.w	800770a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006dd6:	f000 bc98 	b.w	800770a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006dda:	4b35      	ldr	r3, [pc, #212]	; (8006eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006de2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006de6:	d108      	bne.n	8006dfa <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006de8:	f107 0318 	add.w	r3, r7, #24
 8006dec:	4618      	mov	r0, r3
 8006dee:	f000 fcab 	bl	8007748 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006df2:	69bb      	ldr	r3, [r7, #24]
 8006df4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006df6:	f000 bc88 	b.w	800770a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006dfe:	f000 bc84 	b.w	800770a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006e02:	4b2b      	ldr	r3, [pc, #172]	; (8006eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006e0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e0e:	d108      	bne.n	8006e22 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006e10:	f107 030c 	add.w	r3, r7, #12
 8006e14:	4618      	mov	r0, r3
 8006e16:	f000 fdeb 	bl	80079f0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e1e:	f000 bc74 	b.w	800770a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006e22:	2300      	movs	r3, #0
 8006e24:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e26:	f000 bc70 	b.w	800770a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006e2a:	4b21      	ldr	r3, [pc, #132]	; (8006eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006e2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e2e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006e32:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006e34:	4b1e      	ldr	r3, [pc, #120]	; (8006eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f003 0304 	and.w	r3, r3, #4
 8006e3c:	2b04      	cmp	r3, #4
 8006e3e:	d10c      	bne.n	8006e5a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8006e40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d109      	bne.n	8006e5a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006e46:	4b1a      	ldr	r3, [pc, #104]	; (8006eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	08db      	lsrs	r3, r3, #3
 8006e4c:	f003 0303 	and.w	r3, r3, #3
 8006e50:	4a18      	ldr	r2, [pc, #96]	; (8006eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006e52:	fa22 f303 	lsr.w	r3, r2, r3
 8006e56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e58:	e01f      	b.n	8006e9a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006e5a:	4b15      	ldr	r3, [pc, #84]	; (8006eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e66:	d106      	bne.n	8006e76 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8006e68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e6a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006e6e:	d102      	bne.n	8006e76 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006e70:	4b11      	ldr	r3, [pc, #68]	; (8006eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006e72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e74:	e011      	b.n	8006e9a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006e76:	4b0e      	ldr	r3, [pc, #56]	; (8006eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e7e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006e82:	d106      	bne.n	8006e92 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8006e84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e8a:	d102      	bne.n	8006e92 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006e8c:	4b0b      	ldr	r3, [pc, #44]	; (8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006e8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e90:	e003      	b.n	8006e9a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006e92:	2300      	movs	r3, #0
 8006e94:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006e96:	f000 bc38 	b.w	800770a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006e9a:	f000 bc36 	b.w	800770a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006e9e:	4b08      	ldr	r3, [pc, #32]	; (8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006ea0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ea2:	f000 bc32 	b.w	800770a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006eaa:	f000 bc2e 	b.w	800770a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006eae:	bf00      	nop
 8006eb0:	58024400 	.word	0x58024400
 8006eb4:	03d09000 	.word	0x03d09000
 8006eb8:	003d0900 	.word	0x003d0900
 8006ebc:	017d7840 	.word	0x017d7840
 8006ec0:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8006ec4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ec8:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8006ecc:	430b      	orrs	r3, r1
 8006ece:	f040 809c 	bne.w	800700a <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8006ed2:	4b9e      	ldr	r3, [pc, #632]	; (800714c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006ed4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ed6:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8006eda:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8006edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ede:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006ee2:	d054      	beq.n	8006f8e <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8006ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ee6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006eea:	f200 808b 	bhi.w	8007004 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8006eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ef0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006ef4:	f000 8083 	beq.w	8006ffe <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8006ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006efa:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006efe:	f200 8081 	bhi.w	8007004 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8006f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f04:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006f08:	d02f      	beq.n	8006f6a <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8006f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f0c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006f10:	d878      	bhi.n	8007004 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8006f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d004      	beq.n	8006f22 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8006f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f1a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006f1e:	d012      	beq.n	8006f46 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8006f20:	e070      	b.n	8007004 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006f22:	4b8a      	ldr	r3, [pc, #552]	; (800714c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f2a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006f2e:	d107      	bne.n	8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006f30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006f34:	4618      	mov	r0, r3
 8006f36:	f000 feaf 	bl	8007c98 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f3e:	e3e4      	b.n	800770a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f40:	2300      	movs	r3, #0
 8006f42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f44:	e3e1      	b.n	800770a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006f46:	4b81      	ldr	r3, [pc, #516]	; (800714c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006f4e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006f52:	d107      	bne.n	8006f64 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f54:	f107 0318 	add.w	r3, r7, #24
 8006f58:	4618      	mov	r0, r3
 8006f5a:	f000 fbf5 	bl	8007748 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006f5e:	69bb      	ldr	r3, [r7, #24]
 8006f60:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f62:	e3d2      	b.n	800770a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f64:	2300      	movs	r3, #0
 8006f66:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f68:	e3cf      	b.n	800770a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006f6a:	4b78      	ldr	r3, [pc, #480]	; (800714c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006f72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f76:	d107      	bne.n	8006f88 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006f78:	f107 030c 	add.w	r3, r7, #12
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	f000 fd37 	bl	80079f0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f86:	e3c0      	b.n	800770a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f88:	2300      	movs	r3, #0
 8006f8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f8c:	e3bd      	b.n	800770a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006f8e:	4b6f      	ldr	r3, [pc, #444]	; (800714c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006f90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f92:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006f96:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006f98:	4b6c      	ldr	r3, [pc, #432]	; (800714c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f003 0304 	and.w	r3, r3, #4
 8006fa0:	2b04      	cmp	r3, #4
 8006fa2:	d10c      	bne.n	8006fbe <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8006fa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d109      	bne.n	8006fbe <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006faa:	4b68      	ldr	r3, [pc, #416]	; (800714c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	08db      	lsrs	r3, r3, #3
 8006fb0:	f003 0303 	and.w	r3, r3, #3
 8006fb4:	4a66      	ldr	r2, [pc, #408]	; (8007150 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8006fb6:	fa22 f303 	lsr.w	r3, r2, r3
 8006fba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006fbc:	e01e      	b.n	8006ffc <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006fbe:	4b63      	ldr	r3, [pc, #396]	; (800714c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006fca:	d106      	bne.n	8006fda <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8006fcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006fd2:	d102      	bne.n	8006fda <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006fd4:	4b5f      	ldr	r3, [pc, #380]	; (8007154 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8006fd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006fd8:	e010      	b.n	8006ffc <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006fda:	4b5c      	ldr	r3, [pc, #368]	; (800714c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fe2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006fe6:	d106      	bne.n	8006ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8006fe8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006fee:	d102      	bne.n	8006ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006ff0:	4b59      	ldr	r3, [pc, #356]	; (8007158 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8006ff2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ff4:	e002      	b.n	8006ffc <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006ffa:	e386      	b.n	800770a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006ffc:	e385      	b.n	800770a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006ffe:	4b57      	ldr	r3, [pc, #348]	; (800715c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8007000:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007002:	e382      	b.n	800770a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8007004:	2300      	movs	r3, #0
 8007006:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007008:	e37f      	b.n	800770a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800700a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800700e:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8007012:	430b      	orrs	r3, r1
 8007014:	f040 80a7 	bne.w	8007166 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8007018:	4b4c      	ldr	r3, [pc, #304]	; (800714c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800701a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800701c:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8007020:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8007022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007024:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007028:	d055      	beq.n	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800702a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800702c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007030:	f200 8096 	bhi.w	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8007034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007036:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800703a:	f000 8084 	beq.w	8007146 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800703e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007040:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007044:	f200 808c 	bhi.w	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8007048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800704a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800704e:	d030      	beq.n	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8007050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007052:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007056:	f200 8083 	bhi.w	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800705a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800705c:	2b00      	cmp	r3, #0
 800705e:	d004      	beq.n	800706a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8007060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007062:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007066:	d012      	beq.n	800708e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8007068:	e07a      	b.n	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800706a:	4b38      	ldr	r3, [pc, #224]	; (800714c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007072:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007076:	d107      	bne.n	8007088 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007078:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800707c:	4618      	mov	r0, r3
 800707e:	f000 fe0b 	bl	8007c98 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007084:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007086:	e340      	b.n	800770a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007088:	2300      	movs	r3, #0
 800708a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800708c:	e33d      	b.n	800770a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800708e:	4b2f      	ldr	r3, [pc, #188]	; (800714c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007096:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800709a:	d107      	bne.n	80070ac <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800709c:	f107 0318 	add.w	r3, r7, #24
 80070a0:	4618      	mov	r0, r3
 80070a2:	f000 fb51 	bl	8007748 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80070a6:	69bb      	ldr	r3, [r7, #24]
 80070a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80070aa:	e32e      	b.n	800770a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80070ac:	2300      	movs	r3, #0
 80070ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80070b0:	e32b      	b.n	800770a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80070b2:	4b26      	ldr	r3, [pc, #152]	; (800714c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80070ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80070be:	d107      	bne.n	80070d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80070c0:	f107 030c 	add.w	r3, r7, #12
 80070c4:	4618      	mov	r0, r3
 80070c6:	f000 fc93 	bl	80079f0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80070ce:	e31c      	b.n	800770a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80070d0:	2300      	movs	r3, #0
 80070d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80070d4:	e319      	b.n	800770a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80070d6:	4b1d      	ldr	r3, [pc, #116]	; (800714c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80070d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070da:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80070de:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80070e0:	4b1a      	ldr	r3, [pc, #104]	; (800714c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f003 0304 	and.w	r3, r3, #4
 80070e8:	2b04      	cmp	r3, #4
 80070ea:	d10c      	bne.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 80070ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d109      	bne.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80070f2:	4b16      	ldr	r3, [pc, #88]	; (800714c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	08db      	lsrs	r3, r3, #3
 80070f8:	f003 0303 	and.w	r3, r3, #3
 80070fc:	4a14      	ldr	r2, [pc, #80]	; (8007150 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80070fe:	fa22 f303 	lsr.w	r3, r2, r3
 8007102:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007104:	e01e      	b.n	8007144 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007106:	4b11      	ldr	r3, [pc, #68]	; (800714c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800710e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007112:	d106      	bne.n	8007122 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8007114:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007116:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800711a:	d102      	bne.n	8007122 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800711c:	4b0d      	ldr	r3, [pc, #52]	; (8007154 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800711e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007120:	e010      	b.n	8007144 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007122:	4b0a      	ldr	r3, [pc, #40]	; (800714c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800712a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800712e:	d106      	bne.n	800713e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8007130:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007132:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007136:	d102      	bne.n	800713e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007138:	4b07      	ldr	r3, [pc, #28]	; (8007158 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800713a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800713c:	e002      	b.n	8007144 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800713e:	2300      	movs	r3, #0
 8007140:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007142:	e2e2      	b.n	800770a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007144:	e2e1      	b.n	800770a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007146:	4b05      	ldr	r3, [pc, #20]	; (800715c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8007148:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800714a:	e2de      	b.n	800770a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800714c:	58024400 	.word	0x58024400
 8007150:	03d09000 	.word	0x03d09000
 8007154:	003d0900 	.word	0x003d0900
 8007158:	017d7840 	.word	0x017d7840
 800715c:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8007160:	2300      	movs	r3, #0
 8007162:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007164:	e2d1      	b.n	800770a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8007166:	e9d7 2300 	ldrd	r2, r3, [r7]
 800716a:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800716e:	430b      	orrs	r3, r1
 8007170:	f040 809c 	bne.w	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8007174:	4b93      	ldr	r3, [pc, #588]	; (80073c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007176:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007178:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800717c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800717e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007180:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007184:	d054      	beq.n	8007230 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8007186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007188:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800718c:	f200 808b 	bhi.w	80072a6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007192:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007196:	f000 8083 	beq.w	80072a0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800719a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800719c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80071a0:	f200 8081 	bhi.w	80072a6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80071a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80071aa:	d02f      	beq.n	800720c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 80071ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80071b2:	d878      	bhi.n	80072a6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80071b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d004      	beq.n	80071c4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 80071ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071c0:	d012      	beq.n	80071e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 80071c2:	e070      	b.n	80072a6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80071c4:	4b7f      	ldr	r3, [pc, #508]	; (80073c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071cc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80071d0:	d107      	bne.n	80071e2 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80071d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80071d6:	4618      	mov	r0, r3
 80071d8:	f000 fd5e 	bl	8007c98 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80071dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071de:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80071e0:	e293      	b.n	800770a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80071e2:	2300      	movs	r3, #0
 80071e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80071e6:	e290      	b.n	800770a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80071e8:	4b76      	ldr	r3, [pc, #472]	; (80073c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80071f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80071f4:	d107      	bne.n	8007206 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80071f6:	f107 0318 	add.w	r3, r7, #24
 80071fa:	4618      	mov	r0, r3
 80071fc:	f000 faa4 	bl	8007748 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007200:	69bb      	ldr	r3, [r7, #24]
 8007202:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007204:	e281      	b.n	800770a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007206:	2300      	movs	r3, #0
 8007208:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800720a:	e27e      	b.n	800770a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800720c:	4b6d      	ldr	r3, [pc, #436]	; (80073c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007214:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007218:	d107      	bne.n	800722a <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800721a:	f107 030c 	add.w	r3, r7, #12
 800721e:	4618      	mov	r0, r3
 8007220:	f000 fbe6 	bl	80079f0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007228:	e26f      	b.n	800770a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800722a:	2300      	movs	r3, #0
 800722c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800722e:	e26c      	b.n	800770a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007230:	4b64      	ldr	r3, [pc, #400]	; (80073c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007232:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007234:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007238:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800723a:	4b62      	ldr	r3, [pc, #392]	; (80073c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f003 0304 	and.w	r3, r3, #4
 8007242:	2b04      	cmp	r3, #4
 8007244:	d10c      	bne.n	8007260 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8007246:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007248:	2b00      	cmp	r3, #0
 800724a:	d109      	bne.n	8007260 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800724c:	4b5d      	ldr	r3, [pc, #372]	; (80073c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	08db      	lsrs	r3, r3, #3
 8007252:	f003 0303 	and.w	r3, r3, #3
 8007256:	4a5c      	ldr	r2, [pc, #368]	; (80073c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8007258:	fa22 f303 	lsr.w	r3, r2, r3
 800725c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800725e:	e01e      	b.n	800729e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007260:	4b58      	ldr	r3, [pc, #352]	; (80073c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007268:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800726c:	d106      	bne.n	800727c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800726e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007270:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007274:	d102      	bne.n	800727c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007276:	4b55      	ldr	r3, [pc, #340]	; (80073cc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007278:	63fb      	str	r3, [r7, #60]	; 0x3c
 800727a:	e010      	b.n	800729e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800727c:	4b51      	ldr	r3, [pc, #324]	; (80073c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007284:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007288:	d106      	bne.n	8007298 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800728a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800728c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007290:	d102      	bne.n	8007298 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007292:	4b4f      	ldr	r3, [pc, #316]	; (80073d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8007294:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007296:	e002      	b.n	800729e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007298:	2300      	movs	r3, #0
 800729a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800729c:	e235      	b.n	800770a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800729e:	e234      	b.n	800770a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80072a0:	4b4c      	ldr	r3, [pc, #304]	; (80073d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 80072a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80072a4:	e231      	b.n	800770a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80072a6:	2300      	movs	r3, #0
 80072a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80072aa:	e22e      	b.n	800770a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80072ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80072b0:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 80072b4:	430b      	orrs	r3, r1
 80072b6:	f040 808f 	bne.w	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80072ba:	4b42      	ldr	r3, [pc, #264]	; (80073c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80072bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072be:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 80072c2:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 80072c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072c6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80072ca:	d06b      	beq.n	80073a4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 80072cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072ce:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80072d2:	d874      	bhi.n	80073be <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80072d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072d6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80072da:	d056      	beq.n	800738a <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 80072dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072de:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80072e2:	d86c      	bhi.n	80073be <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80072e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072e6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80072ea:	d03b      	beq.n	8007364 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 80072ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072ee:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80072f2:	d864      	bhi.n	80073be <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80072f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80072fa:	d021      	beq.n	8007340 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 80072fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007302:	d85c      	bhi.n	80073be <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007306:	2b00      	cmp	r3, #0
 8007308:	d004      	beq.n	8007314 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800730a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800730c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007310:	d004      	beq.n	800731c <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8007312:	e054      	b.n	80073be <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8007314:	f7fe fa62 	bl	80057dc <HAL_RCC_GetPCLK1Freq>
 8007318:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800731a:	e1f6      	b.n	800770a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800731c:	4b29      	ldr	r3, [pc, #164]	; (80073c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007324:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007328:	d107      	bne.n	800733a <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800732a:	f107 0318 	add.w	r3, r7, #24
 800732e:	4618      	mov	r0, r3
 8007330:	f000 fa0a 	bl	8007748 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007334:	69fb      	ldr	r3, [r7, #28]
 8007336:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007338:	e1e7      	b.n	800770a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800733a:	2300      	movs	r3, #0
 800733c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800733e:	e1e4      	b.n	800770a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007340:	4b20      	ldr	r3, [pc, #128]	; (80073c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007348:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800734c:	d107      	bne.n	800735e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800734e:	f107 030c 	add.w	r3, r7, #12
 8007352:	4618      	mov	r0, r3
 8007354:	f000 fb4c 	bl	80079f0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007358:	693b      	ldr	r3, [r7, #16]
 800735a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800735c:	e1d5      	b.n	800770a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800735e:	2300      	movs	r3, #0
 8007360:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007362:	e1d2      	b.n	800770a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007364:	4b17      	ldr	r3, [pc, #92]	; (80073c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f003 0304 	and.w	r3, r3, #4
 800736c:	2b04      	cmp	r3, #4
 800736e:	d109      	bne.n	8007384 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007370:	4b14      	ldr	r3, [pc, #80]	; (80073c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	08db      	lsrs	r3, r3, #3
 8007376:	f003 0303 	and.w	r3, r3, #3
 800737a:	4a13      	ldr	r2, [pc, #76]	; (80073c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800737c:	fa22 f303 	lsr.w	r3, r2, r3
 8007380:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007382:	e1c2      	b.n	800770a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007384:	2300      	movs	r3, #0
 8007386:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007388:	e1bf      	b.n	800770a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800738a:	4b0e      	ldr	r3, [pc, #56]	; (80073c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007392:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007396:	d102      	bne.n	800739e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8007398:	4b0c      	ldr	r3, [pc, #48]	; (80073cc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800739a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800739c:	e1b5      	b.n	800770a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800739e:	2300      	movs	r3, #0
 80073a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80073a2:	e1b2      	b.n	800770a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80073a4:	4b07      	ldr	r3, [pc, #28]	; (80073c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80073b0:	d102      	bne.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 80073b2:	4b07      	ldr	r3, [pc, #28]	; (80073d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80073b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80073b6:	e1a8      	b.n	800770a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80073b8:	2300      	movs	r3, #0
 80073ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80073bc:	e1a5      	b.n	800770a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80073be:	2300      	movs	r3, #0
 80073c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80073c2:	e1a2      	b.n	800770a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80073c4:	58024400 	.word	0x58024400
 80073c8:	03d09000 	.word	0x03d09000
 80073cc:	003d0900 	.word	0x003d0900
 80073d0:	017d7840 	.word	0x017d7840
 80073d4:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80073d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80073dc:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 80073e0:	430b      	orrs	r3, r1
 80073e2:	d173      	bne.n	80074cc <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80073e4:	4b9c      	ldr	r3, [pc, #624]	; (8007658 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80073e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80073ec:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80073ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80073f4:	d02f      	beq.n	8007456 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 80073f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80073fc:	d863      	bhi.n	80074c6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 80073fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007400:	2b00      	cmp	r3, #0
 8007402:	d004      	beq.n	800740e <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8007404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007406:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800740a:	d012      	beq.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800740c:	e05b      	b.n	80074c6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800740e:	4b92      	ldr	r3, [pc, #584]	; (8007658 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007416:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800741a:	d107      	bne.n	800742c <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800741c:	f107 0318 	add.w	r3, r7, #24
 8007420:	4618      	mov	r0, r3
 8007422:	f000 f991 	bl	8007748 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007426:	69bb      	ldr	r3, [r7, #24]
 8007428:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800742a:	e16e      	b.n	800770a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800742c:	2300      	movs	r3, #0
 800742e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007430:	e16b      	b.n	800770a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007432:	4b89      	ldr	r3, [pc, #548]	; (8007658 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800743a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800743e:	d107      	bne.n	8007450 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007440:	f107 030c 	add.w	r3, r7, #12
 8007444:	4618      	mov	r0, r3
 8007446:	f000 fad3 	bl	80079f0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800744a:	697b      	ldr	r3, [r7, #20]
 800744c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800744e:	e15c      	b.n	800770a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007450:	2300      	movs	r3, #0
 8007452:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007454:	e159      	b.n	800770a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007456:	4b80      	ldr	r3, [pc, #512]	; (8007658 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007458:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800745a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800745e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007460:	4b7d      	ldr	r3, [pc, #500]	; (8007658 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f003 0304 	and.w	r3, r3, #4
 8007468:	2b04      	cmp	r3, #4
 800746a:	d10c      	bne.n	8007486 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800746c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800746e:	2b00      	cmp	r3, #0
 8007470:	d109      	bne.n	8007486 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007472:	4b79      	ldr	r3, [pc, #484]	; (8007658 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	08db      	lsrs	r3, r3, #3
 8007478:	f003 0303 	and.w	r3, r3, #3
 800747c:	4a77      	ldr	r2, [pc, #476]	; (800765c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800747e:	fa22 f303 	lsr.w	r3, r2, r3
 8007482:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007484:	e01e      	b.n	80074c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007486:	4b74      	ldr	r3, [pc, #464]	; (8007658 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800748e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007492:	d106      	bne.n	80074a2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8007494:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007496:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800749a:	d102      	bne.n	80074a2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800749c:	4b70      	ldr	r3, [pc, #448]	; (8007660 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800749e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80074a0:	e010      	b.n	80074c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80074a2:	4b6d      	ldr	r3, [pc, #436]	; (8007658 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80074ae:	d106      	bne.n	80074be <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 80074b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80074b6:	d102      	bne.n	80074be <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80074b8:	4b6a      	ldr	r3, [pc, #424]	; (8007664 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80074ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80074bc:	e002      	b.n	80074c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80074be:	2300      	movs	r3, #0
 80074c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80074c2:	e122      	b.n	800770a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80074c4:	e121      	b.n	800770a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80074c6:	2300      	movs	r3, #0
 80074c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80074ca:	e11e      	b.n	800770a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80074cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80074d0:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 80074d4:	430b      	orrs	r3, r1
 80074d6:	d133      	bne.n	8007540 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80074d8:	4b5f      	ldr	r3, [pc, #380]	; (8007658 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80074da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80074e0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80074e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d004      	beq.n	80074f2 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 80074e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074ee:	d012      	beq.n	8007516 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 80074f0:	e023      	b.n	800753a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80074f2:	4b59      	ldr	r3, [pc, #356]	; (8007658 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074fa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80074fe:	d107      	bne.n	8007510 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007500:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007504:	4618      	mov	r0, r3
 8007506:	f000 fbc7 	bl	8007c98 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800750a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800750c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800750e:	e0fc      	b.n	800770a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007510:	2300      	movs	r3, #0
 8007512:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007514:	e0f9      	b.n	800770a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007516:	4b50      	ldr	r3, [pc, #320]	; (8007658 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800751e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007522:	d107      	bne.n	8007534 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007524:	f107 0318 	add.w	r3, r7, #24
 8007528:	4618      	mov	r0, r3
 800752a:	f000 f90d 	bl	8007748 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800752e:	6a3b      	ldr	r3, [r7, #32]
 8007530:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007532:	e0ea      	b.n	800770a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007534:	2300      	movs	r3, #0
 8007536:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007538:	e0e7      	b.n	800770a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800753a:	2300      	movs	r3, #0
 800753c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800753e:	e0e4      	b.n	800770a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8007540:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007544:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8007548:	430b      	orrs	r3, r1
 800754a:	f040 808d 	bne.w	8007668 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800754e:	4b42      	ldr	r3, [pc, #264]	; (8007658 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007550:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007552:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8007556:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8007558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800755a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800755e:	d06b      	beq.n	8007638 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8007560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007562:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007566:	d874      	bhi.n	8007652 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800756a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800756e:	d056      	beq.n	800761e <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8007570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007572:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007576:	d86c      	bhi.n	8007652 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800757a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800757e:	d03b      	beq.n	80075f8 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8007580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007582:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007586:	d864      	bhi.n	8007652 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800758a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800758e:	d021      	beq.n	80075d4 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8007590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007592:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007596:	d85c      	bhi.n	8007652 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800759a:	2b00      	cmp	r3, #0
 800759c:	d004      	beq.n	80075a8 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800759e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075a0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80075a4:	d004      	beq.n	80075b0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 80075a6:	e054      	b.n	8007652 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80075a8:	f000 f8b8 	bl	800771c <HAL_RCCEx_GetD3PCLK1Freq>
 80075ac:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80075ae:	e0ac      	b.n	800770a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80075b0:	4b29      	ldr	r3, [pc, #164]	; (8007658 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80075b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80075bc:	d107      	bne.n	80075ce <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80075be:	f107 0318 	add.w	r3, r7, #24
 80075c2:	4618      	mov	r0, r3
 80075c4:	f000 f8c0 	bl	8007748 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80075c8:	69fb      	ldr	r3, [r7, #28]
 80075ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80075cc:	e09d      	b.n	800770a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80075ce:	2300      	movs	r3, #0
 80075d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80075d2:	e09a      	b.n	800770a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80075d4:	4b20      	ldr	r3, [pc, #128]	; (8007658 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80075dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80075e0:	d107      	bne.n	80075f2 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80075e2:	f107 030c 	add.w	r3, r7, #12
 80075e6:	4618      	mov	r0, r3
 80075e8:	f000 fa02 	bl	80079f0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80075ec:	693b      	ldr	r3, [r7, #16]
 80075ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80075f0:	e08b      	b.n	800770a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80075f2:	2300      	movs	r3, #0
 80075f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80075f6:	e088      	b.n	800770a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80075f8:	4b17      	ldr	r3, [pc, #92]	; (8007658 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f003 0304 	and.w	r3, r3, #4
 8007600:	2b04      	cmp	r3, #4
 8007602:	d109      	bne.n	8007618 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007604:	4b14      	ldr	r3, [pc, #80]	; (8007658 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	08db      	lsrs	r3, r3, #3
 800760a:	f003 0303 	and.w	r3, r3, #3
 800760e:	4a13      	ldr	r2, [pc, #76]	; (800765c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8007610:	fa22 f303 	lsr.w	r3, r2, r3
 8007614:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007616:	e078      	b.n	800770a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007618:	2300      	movs	r3, #0
 800761a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800761c:	e075      	b.n	800770a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800761e:	4b0e      	ldr	r3, [pc, #56]	; (8007658 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007626:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800762a:	d102      	bne.n	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800762c:	4b0c      	ldr	r3, [pc, #48]	; (8007660 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800762e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007630:	e06b      	b.n	800770a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007632:	2300      	movs	r3, #0
 8007634:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007636:	e068      	b.n	800770a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007638:	4b07      	ldr	r3, [pc, #28]	; (8007658 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007640:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007644:	d102      	bne.n	800764c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8007646:	4b07      	ldr	r3, [pc, #28]	; (8007664 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8007648:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800764a:	e05e      	b.n	800770a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800764c:	2300      	movs	r3, #0
 800764e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007650:	e05b      	b.n	800770a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8007652:	2300      	movs	r3, #0
 8007654:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007656:	e058      	b.n	800770a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007658:	58024400 	.word	0x58024400
 800765c:	03d09000 	.word	0x03d09000
 8007660:	003d0900 	.word	0x003d0900
 8007664:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8007668:	e9d7 2300 	ldrd	r2, r3, [r7]
 800766c:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8007670:	430b      	orrs	r3, r1
 8007672:	d148      	bne.n	8007706 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8007674:	4b27      	ldr	r3, [pc, #156]	; (8007714 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007676:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007678:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800767c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800767e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007680:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007684:	d02a      	beq.n	80076dc <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8007686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007688:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800768c:	d838      	bhi.n	8007700 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800768e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007690:	2b00      	cmp	r3, #0
 8007692:	d004      	beq.n	800769e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8007694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007696:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800769a:	d00d      	beq.n	80076b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800769c:	e030      	b.n	8007700 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800769e:	4b1d      	ldr	r3, [pc, #116]	; (8007714 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80076aa:	d102      	bne.n	80076b2 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 80076ac:	4b1a      	ldr	r3, [pc, #104]	; (8007718 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 80076ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80076b0:	e02b      	b.n	800770a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80076b2:	2300      	movs	r3, #0
 80076b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80076b6:	e028      	b.n	800770a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80076b8:	4b16      	ldr	r3, [pc, #88]	; (8007714 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076c0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80076c4:	d107      	bne.n	80076d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80076c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80076ca:	4618      	mov	r0, r3
 80076cc:	f000 fae4 	bl	8007c98 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80076d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80076d4:	e019      	b.n	800770a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80076d6:	2300      	movs	r3, #0
 80076d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80076da:	e016      	b.n	800770a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80076dc:	4b0d      	ldr	r3, [pc, #52]	; (8007714 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80076e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80076e8:	d107      	bne.n	80076fa <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80076ea:	f107 0318 	add.w	r3, r7, #24
 80076ee:	4618      	mov	r0, r3
 80076f0:	f000 f82a 	bl	8007748 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80076f4:	69fb      	ldr	r3, [r7, #28]
 80076f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80076f8:	e007      	b.n	800770a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80076fa:	2300      	movs	r3, #0
 80076fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80076fe:	e004      	b.n	800770a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007700:	2300      	movs	r3, #0
 8007702:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007704:	e001      	b.n	800770a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8007706:	2300      	movs	r3, #0
 8007708:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800770a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800770c:	4618      	mov	r0, r3
 800770e:	3740      	adds	r7, #64	; 0x40
 8007710:	46bd      	mov	sp, r7
 8007712:	bd80      	pop	{r7, pc}
 8007714:	58024400 	.word	0x58024400
 8007718:	017d7840 	.word	0x017d7840

0800771c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800771c:	b580      	push	{r7, lr}
 800771e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007720:	f7fe f82c 	bl	800577c <HAL_RCC_GetHCLKFreq>
 8007724:	4602      	mov	r2, r0
 8007726:	4b06      	ldr	r3, [pc, #24]	; (8007740 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007728:	6a1b      	ldr	r3, [r3, #32]
 800772a:	091b      	lsrs	r3, r3, #4
 800772c:	f003 0307 	and.w	r3, r3, #7
 8007730:	4904      	ldr	r1, [pc, #16]	; (8007744 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007732:	5ccb      	ldrb	r3, [r1, r3]
 8007734:	f003 031f 	and.w	r3, r3, #31
 8007738:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800773c:	4618      	mov	r0, r3
 800773e:	bd80      	pop	{r7, pc}
 8007740:	58024400 	.word	0x58024400
 8007744:	0800d920 	.word	0x0800d920

08007748 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007748:	b480      	push	{r7}
 800774a:	b089      	sub	sp, #36	; 0x24
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007750:	4ba1      	ldr	r3, [pc, #644]	; (80079d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007754:	f003 0303 	and.w	r3, r3, #3
 8007758:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800775a:	4b9f      	ldr	r3, [pc, #636]	; (80079d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800775c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800775e:	0b1b      	lsrs	r3, r3, #12
 8007760:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007764:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007766:	4b9c      	ldr	r3, [pc, #624]	; (80079d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800776a:	091b      	lsrs	r3, r3, #4
 800776c:	f003 0301 	and.w	r3, r3, #1
 8007770:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8007772:	4b99      	ldr	r3, [pc, #612]	; (80079d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007774:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007776:	08db      	lsrs	r3, r3, #3
 8007778:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800777c:	693a      	ldr	r2, [r7, #16]
 800777e:	fb02 f303 	mul.w	r3, r2, r3
 8007782:	ee07 3a90 	vmov	s15, r3
 8007786:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800778a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800778e:	697b      	ldr	r3, [r7, #20]
 8007790:	2b00      	cmp	r3, #0
 8007792:	f000 8111 	beq.w	80079b8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007796:	69bb      	ldr	r3, [r7, #24]
 8007798:	2b02      	cmp	r3, #2
 800779a:	f000 8083 	beq.w	80078a4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800779e:	69bb      	ldr	r3, [r7, #24]
 80077a0:	2b02      	cmp	r3, #2
 80077a2:	f200 80a1 	bhi.w	80078e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80077a6:	69bb      	ldr	r3, [r7, #24]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d003      	beq.n	80077b4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80077ac:	69bb      	ldr	r3, [r7, #24]
 80077ae:	2b01      	cmp	r3, #1
 80077b0:	d056      	beq.n	8007860 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80077b2:	e099      	b.n	80078e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80077b4:	4b88      	ldr	r3, [pc, #544]	; (80079d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f003 0320 	and.w	r3, r3, #32
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d02d      	beq.n	800781c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80077c0:	4b85      	ldr	r3, [pc, #532]	; (80079d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	08db      	lsrs	r3, r3, #3
 80077c6:	f003 0303 	and.w	r3, r3, #3
 80077ca:	4a84      	ldr	r2, [pc, #528]	; (80079dc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80077cc:	fa22 f303 	lsr.w	r3, r2, r3
 80077d0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80077d2:	68bb      	ldr	r3, [r7, #8]
 80077d4:	ee07 3a90 	vmov	s15, r3
 80077d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077dc:	697b      	ldr	r3, [r7, #20]
 80077de:	ee07 3a90 	vmov	s15, r3
 80077e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077ea:	4b7b      	ldr	r3, [pc, #492]	; (80079d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80077ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077f2:	ee07 3a90 	vmov	s15, r3
 80077f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80077fe:	eddf 5a78 	vldr	s11, [pc, #480]	; 80079e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007802:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007806:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800780a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800780e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007812:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007816:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800781a:	e087      	b.n	800792c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800781c:	697b      	ldr	r3, [r7, #20]
 800781e:	ee07 3a90 	vmov	s15, r3
 8007822:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007826:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80079e4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800782a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800782e:	4b6a      	ldr	r3, [pc, #424]	; (80079d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007832:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007836:	ee07 3a90 	vmov	s15, r3
 800783a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800783e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007842:	eddf 5a67 	vldr	s11, [pc, #412]	; 80079e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007846:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800784a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800784e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007852:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007856:	ee67 7a27 	vmul.f32	s15, s14, s15
 800785a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800785e:	e065      	b.n	800792c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007860:	697b      	ldr	r3, [r7, #20]
 8007862:	ee07 3a90 	vmov	s15, r3
 8007866:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800786a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80079e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800786e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007872:	4b59      	ldr	r3, [pc, #356]	; (80079d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007876:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800787a:	ee07 3a90 	vmov	s15, r3
 800787e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007882:	ed97 6a03 	vldr	s12, [r7, #12]
 8007886:	eddf 5a56 	vldr	s11, [pc, #344]	; 80079e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800788a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800788e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007892:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007896:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800789a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800789e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80078a2:	e043      	b.n	800792c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80078a4:	697b      	ldr	r3, [r7, #20]
 80078a6:	ee07 3a90 	vmov	s15, r3
 80078aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078ae:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80079ec <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80078b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078b6:	4b48      	ldr	r3, [pc, #288]	; (80079d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80078b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078be:	ee07 3a90 	vmov	s15, r3
 80078c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80078ca:	eddf 5a45 	vldr	s11, [pc, #276]	; 80079e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80078ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80078da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80078e6:	e021      	b.n	800792c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80078e8:	697b      	ldr	r3, [r7, #20]
 80078ea:	ee07 3a90 	vmov	s15, r3
 80078ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078f2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80079e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80078f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078fa:	4b37      	ldr	r3, [pc, #220]	; (80079d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80078fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007902:	ee07 3a90 	vmov	s15, r3
 8007906:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800790a:	ed97 6a03 	vldr	s12, [r7, #12]
 800790e:	eddf 5a34 	vldr	s11, [pc, #208]	; 80079e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007912:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007916:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800791a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800791e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007922:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007926:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800792a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800792c:	4b2a      	ldr	r3, [pc, #168]	; (80079d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800792e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007930:	0a5b      	lsrs	r3, r3, #9
 8007932:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007936:	ee07 3a90 	vmov	s15, r3
 800793a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800793e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007942:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007946:	edd7 6a07 	vldr	s13, [r7, #28]
 800794a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800794e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007952:	ee17 2a90 	vmov	r2, s15
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800795a:	4b1f      	ldr	r3, [pc, #124]	; (80079d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800795c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800795e:	0c1b      	lsrs	r3, r3, #16
 8007960:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007964:	ee07 3a90 	vmov	s15, r3
 8007968:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800796c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007970:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007974:	edd7 6a07 	vldr	s13, [r7, #28]
 8007978:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800797c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007980:	ee17 2a90 	vmov	r2, s15
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007988:	4b13      	ldr	r3, [pc, #76]	; (80079d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800798a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800798c:	0e1b      	lsrs	r3, r3, #24
 800798e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007992:	ee07 3a90 	vmov	s15, r3
 8007996:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800799a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800799e:	ee37 7a87 	vadd.f32	s14, s15, s14
 80079a2:	edd7 6a07 	vldr	s13, [r7, #28]
 80079a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80079aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80079ae:	ee17 2a90 	vmov	r2, s15
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80079b6:	e008      	b.n	80079ca <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2200      	movs	r2, #0
 80079bc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2200      	movs	r2, #0
 80079c2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2200      	movs	r2, #0
 80079c8:	609a      	str	r2, [r3, #8]
}
 80079ca:	bf00      	nop
 80079cc:	3724      	adds	r7, #36	; 0x24
 80079ce:	46bd      	mov	sp, r7
 80079d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d4:	4770      	bx	lr
 80079d6:	bf00      	nop
 80079d8:	58024400 	.word	0x58024400
 80079dc:	03d09000 	.word	0x03d09000
 80079e0:	46000000 	.word	0x46000000
 80079e4:	4c742400 	.word	0x4c742400
 80079e8:	4a742400 	.word	0x4a742400
 80079ec:	4bbebc20 	.word	0x4bbebc20

080079f0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80079f0:	b480      	push	{r7}
 80079f2:	b089      	sub	sp, #36	; 0x24
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80079f8:	4ba1      	ldr	r3, [pc, #644]	; (8007c80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80079fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079fc:	f003 0303 	and.w	r3, r3, #3
 8007a00:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8007a02:	4b9f      	ldr	r3, [pc, #636]	; (8007c80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a06:	0d1b      	lsrs	r3, r3, #20
 8007a08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007a0c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007a0e:	4b9c      	ldr	r3, [pc, #624]	; (8007c80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a12:	0a1b      	lsrs	r3, r3, #8
 8007a14:	f003 0301 	and.w	r3, r3, #1
 8007a18:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8007a1a:	4b99      	ldr	r3, [pc, #612]	; (8007c80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a1e:	08db      	lsrs	r3, r3, #3
 8007a20:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007a24:	693a      	ldr	r2, [r7, #16]
 8007a26:	fb02 f303 	mul.w	r3, r2, r3
 8007a2a:	ee07 3a90 	vmov	s15, r3
 8007a2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a32:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007a36:	697b      	ldr	r3, [r7, #20]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	f000 8111 	beq.w	8007c60 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007a3e:	69bb      	ldr	r3, [r7, #24]
 8007a40:	2b02      	cmp	r3, #2
 8007a42:	f000 8083 	beq.w	8007b4c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007a46:	69bb      	ldr	r3, [r7, #24]
 8007a48:	2b02      	cmp	r3, #2
 8007a4a:	f200 80a1 	bhi.w	8007b90 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007a4e:	69bb      	ldr	r3, [r7, #24]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d003      	beq.n	8007a5c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007a54:	69bb      	ldr	r3, [r7, #24]
 8007a56:	2b01      	cmp	r3, #1
 8007a58:	d056      	beq.n	8007b08 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007a5a:	e099      	b.n	8007b90 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007a5c:	4b88      	ldr	r3, [pc, #544]	; (8007c80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f003 0320 	and.w	r3, r3, #32
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d02d      	beq.n	8007ac4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007a68:	4b85      	ldr	r3, [pc, #532]	; (8007c80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	08db      	lsrs	r3, r3, #3
 8007a6e:	f003 0303 	and.w	r3, r3, #3
 8007a72:	4a84      	ldr	r2, [pc, #528]	; (8007c84 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007a74:	fa22 f303 	lsr.w	r3, r2, r3
 8007a78:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007a7a:	68bb      	ldr	r3, [r7, #8]
 8007a7c:	ee07 3a90 	vmov	s15, r3
 8007a80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a84:	697b      	ldr	r3, [r7, #20]
 8007a86:	ee07 3a90 	vmov	s15, r3
 8007a8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a92:	4b7b      	ldr	r3, [pc, #492]	; (8007c80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a9a:	ee07 3a90 	vmov	s15, r3
 8007a9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007aa2:	ed97 6a03 	vldr	s12, [r7, #12]
 8007aa6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007c88 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007aaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007aae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ab2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ab6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007aba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007abe:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007ac2:	e087      	b.n	8007bd4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007ac4:	697b      	ldr	r3, [r7, #20]
 8007ac6:	ee07 3a90 	vmov	s15, r3
 8007aca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ace:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007c8c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007ad2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ad6:	4b6a      	ldr	r3, [pc, #424]	; (8007c80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ada:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ade:	ee07 3a90 	vmov	s15, r3
 8007ae2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ae6:	ed97 6a03 	vldr	s12, [r7, #12]
 8007aea:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007c88 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007aee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007af2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007af6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007afa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007afe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007b06:	e065      	b.n	8007bd4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007b08:	697b      	ldr	r3, [r7, #20]
 8007b0a:	ee07 3a90 	vmov	s15, r3
 8007b0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b12:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007c90 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007b16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b1a:	4b59      	ldr	r3, [pc, #356]	; (8007c80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b22:	ee07 3a90 	vmov	s15, r3
 8007b26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b2e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007c88 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007b32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007b4a:	e043      	b.n	8007bd4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007b4c:	697b      	ldr	r3, [r7, #20]
 8007b4e:	ee07 3a90 	vmov	s15, r3
 8007b52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b56:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007c94 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007b5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b5e:	4b48      	ldr	r3, [pc, #288]	; (8007c80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b66:	ee07 3a90 	vmov	s15, r3
 8007b6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b72:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007c88 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007b76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007b8e:	e021      	b.n	8007bd4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007b90:	697b      	ldr	r3, [r7, #20]
 8007b92:	ee07 3a90 	vmov	s15, r3
 8007b96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b9a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007c90 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007b9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ba2:	4b37      	ldr	r3, [pc, #220]	; (8007c80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ba6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007baa:	ee07 3a90 	vmov	s15, r3
 8007bae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007bb2:	ed97 6a03 	vldr	s12, [r7, #12]
 8007bb6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007c88 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007bba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007bbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007bc2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007bc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007bca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007bce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007bd2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007bd4:	4b2a      	ldr	r3, [pc, #168]	; (8007c80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bd8:	0a5b      	lsrs	r3, r3, #9
 8007bda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007bde:	ee07 3a90 	vmov	s15, r3
 8007be2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007be6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007bea:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007bee:	edd7 6a07 	vldr	s13, [r7, #28]
 8007bf2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007bf6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007bfa:	ee17 2a90 	vmov	r2, s15
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007c02:	4b1f      	ldr	r3, [pc, #124]	; (8007c80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c06:	0c1b      	lsrs	r3, r3, #16
 8007c08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c0c:	ee07 3a90 	vmov	s15, r3
 8007c10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c14:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007c18:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007c1c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007c20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c28:	ee17 2a90 	vmov	r2, s15
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007c30:	4b13      	ldr	r3, [pc, #76]	; (8007c80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c34:	0e1b      	lsrs	r3, r3, #24
 8007c36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c3a:	ee07 3a90 	vmov	s15, r3
 8007c3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c42:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007c46:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007c4a:	edd7 6a07 	vldr	s13, [r7, #28]
 8007c4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c56:	ee17 2a90 	vmov	r2, s15
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007c5e:	e008      	b.n	8007c72 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2200      	movs	r2, #0
 8007c64:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2200      	movs	r2, #0
 8007c6a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2200      	movs	r2, #0
 8007c70:	609a      	str	r2, [r3, #8]
}
 8007c72:	bf00      	nop
 8007c74:	3724      	adds	r7, #36	; 0x24
 8007c76:	46bd      	mov	sp, r7
 8007c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7c:	4770      	bx	lr
 8007c7e:	bf00      	nop
 8007c80:	58024400 	.word	0x58024400
 8007c84:	03d09000 	.word	0x03d09000
 8007c88:	46000000 	.word	0x46000000
 8007c8c:	4c742400 	.word	0x4c742400
 8007c90:	4a742400 	.word	0x4a742400
 8007c94:	4bbebc20 	.word	0x4bbebc20

08007c98 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8007c98:	b480      	push	{r7}
 8007c9a:	b089      	sub	sp, #36	; 0x24
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007ca0:	4ba0      	ldr	r3, [pc, #640]	; (8007f24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ca4:	f003 0303 	and.w	r3, r3, #3
 8007ca8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8007caa:	4b9e      	ldr	r3, [pc, #632]	; (8007f24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cae:	091b      	lsrs	r3, r3, #4
 8007cb0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007cb4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8007cb6:	4b9b      	ldr	r3, [pc, #620]	; (8007f24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cba:	f003 0301 	and.w	r3, r3, #1
 8007cbe:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007cc0:	4b98      	ldr	r3, [pc, #608]	; (8007f24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007cc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cc4:	08db      	lsrs	r3, r3, #3
 8007cc6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007cca:	693a      	ldr	r2, [r7, #16]
 8007ccc:	fb02 f303 	mul.w	r3, r2, r3
 8007cd0:	ee07 3a90 	vmov	s15, r3
 8007cd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cd8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8007cdc:	697b      	ldr	r3, [r7, #20]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	f000 8111 	beq.w	8007f06 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8007ce4:	69bb      	ldr	r3, [r7, #24]
 8007ce6:	2b02      	cmp	r3, #2
 8007ce8:	f000 8083 	beq.w	8007df2 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8007cec:	69bb      	ldr	r3, [r7, #24]
 8007cee:	2b02      	cmp	r3, #2
 8007cf0:	f200 80a1 	bhi.w	8007e36 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8007cf4:	69bb      	ldr	r3, [r7, #24]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d003      	beq.n	8007d02 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8007cfa:	69bb      	ldr	r3, [r7, #24]
 8007cfc:	2b01      	cmp	r3, #1
 8007cfe:	d056      	beq.n	8007dae <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8007d00:	e099      	b.n	8007e36 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007d02:	4b88      	ldr	r3, [pc, #544]	; (8007f24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f003 0320 	and.w	r3, r3, #32
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d02d      	beq.n	8007d6a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007d0e:	4b85      	ldr	r3, [pc, #532]	; (8007f24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	08db      	lsrs	r3, r3, #3
 8007d14:	f003 0303 	and.w	r3, r3, #3
 8007d18:	4a83      	ldr	r2, [pc, #524]	; (8007f28 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8007d1a:	fa22 f303 	lsr.w	r3, r2, r3
 8007d1e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007d20:	68bb      	ldr	r3, [r7, #8]
 8007d22:	ee07 3a90 	vmov	s15, r3
 8007d26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d2a:	697b      	ldr	r3, [r7, #20]
 8007d2c:	ee07 3a90 	vmov	s15, r3
 8007d30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d34:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d38:	4b7a      	ldr	r3, [pc, #488]	; (8007f24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d40:	ee07 3a90 	vmov	s15, r3
 8007d44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d48:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d4c:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007f2c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007d50:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d54:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d58:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d5c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d64:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007d68:	e087      	b.n	8007e7a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007d6a:	697b      	ldr	r3, [r7, #20]
 8007d6c:	ee07 3a90 	vmov	s15, r3
 8007d70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d74:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8007f30 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007d78:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d7c:	4b69      	ldr	r3, [pc, #420]	; (8007f24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d84:	ee07 3a90 	vmov	s15, r3
 8007d88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d8c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d90:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007f2c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007d94:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d98:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d9c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007da0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007da4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007da8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007dac:	e065      	b.n	8007e7a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007dae:	697b      	ldr	r3, [r7, #20]
 8007db0:	ee07 3a90 	vmov	s15, r3
 8007db4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007db8:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8007f34 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8007dbc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007dc0:	4b58      	ldr	r3, [pc, #352]	; (8007f24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007dc8:	ee07 3a90 	vmov	s15, r3
 8007dcc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007dd0:	ed97 6a03 	vldr	s12, [r7, #12]
 8007dd4:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007f2c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007dd8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ddc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007de0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007de4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007de8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007dec:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007df0:	e043      	b.n	8007e7a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007df2:	697b      	ldr	r3, [r7, #20]
 8007df4:	ee07 3a90 	vmov	s15, r3
 8007df8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dfc:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8007f38 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8007e00:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e04:	4b47      	ldr	r3, [pc, #284]	; (8007f24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e0c:	ee07 3a90 	vmov	s15, r3
 8007e10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e14:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e18:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007f2c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007e1c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e20:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e24:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e28:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e30:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007e34:	e021      	b.n	8007e7a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007e36:	697b      	ldr	r3, [r7, #20]
 8007e38:	ee07 3a90 	vmov	s15, r3
 8007e3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e40:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8007f30 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007e44:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e48:	4b36      	ldr	r3, [pc, #216]	; (8007f24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e50:	ee07 3a90 	vmov	s15, r3
 8007e54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e58:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e5c:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007f2c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007e60:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e64:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e68:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e6c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e74:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007e78:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8007e7a:	4b2a      	ldr	r3, [pc, #168]	; (8007f24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e7e:	0a5b      	lsrs	r3, r3, #9
 8007e80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e84:	ee07 3a90 	vmov	s15, r3
 8007e88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e8c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007e90:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007e94:	edd7 6a07 	vldr	s13, [r7, #28]
 8007e98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ea0:	ee17 2a90 	vmov	r2, s15
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8007ea8:	4b1e      	ldr	r3, [pc, #120]	; (8007f24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007eac:	0c1b      	lsrs	r3, r3, #16
 8007eae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007eb2:	ee07 3a90 	vmov	s15, r3
 8007eb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007eba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007ebe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007ec2:	edd7 6a07 	vldr	s13, [r7, #28]
 8007ec6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007eca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ece:	ee17 2a90 	vmov	r2, s15
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8007ed6:	4b13      	ldr	r3, [pc, #76]	; (8007f24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007eda:	0e1b      	lsrs	r3, r3, #24
 8007edc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ee0:	ee07 3a90 	vmov	s15, r3
 8007ee4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ee8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007eec:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007ef0:	edd7 6a07 	vldr	s13, [r7, #28]
 8007ef4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ef8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007efc:	ee17 2a90 	vmov	r2, s15
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007f04:	e008      	b.n	8007f18 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	2200      	movs	r2, #0
 8007f0a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2200      	movs	r2, #0
 8007f10:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	2200      	movs	r2, #0
 8007f16:	609a      	str	r2, [r3, #8]
}
 8007f18:	bf00      	nop
 8007f1a:	3724      	adds	r7, #36	; 0x24
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f22:	4770      	bx	lr
 8007f24:	58024400 	.word	0x58024400
 8007f28:	03d09000 	.word	0x03d09000
 8007f2c:	46000000 	.word	0x46000000
 8007f30:	4c742400 	.word	0x4c742400
 8007f34:	4a742400 	.word	0x4a742400
 8007f38:	4bbebc20 	.word	0x4bbebc20

08007f3c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b084      	sub	sp, #16
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
 8007f44:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007f46:	2300      	movs	r3, #0
 8007f48:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007f4a:	4b53      	ldr	r3, [pc, #332]	; (8008098 <RCCEx_PLL2_Config+0x15c>)
 8007f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f4e:	f003 0303 	and.w	r3, r3, #3
 8007f52:	2b03      	cmp	r3, #3
 8007f54:	d101      	bne.n	8007f5a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007f56:	2301      	movs	r3, #1
 8007f58:	e099      	b.n	800808e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007f5a:	4b4f      	ldr	r3, [pc, #316]	; (8008098 <RCCEx_PLL2_Config+0x15c>)
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	4a4e      	ldr	r2, [pc, #312]	; (8008098 <RCCEx_PLL2_Config+0x15c>)
 8007f60:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007f64:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f66:	f7f9 fe0d 	bl	8001b84 <HAL_GetTick>
 8007f6a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007f6c:	e008      	b.n	8007f80 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007f6e:	f7f9 fe09 	bl	8001b84 <HAL_GetTick>
 8007f72:	4602      	mov	r2, r0
 8007f74:	68bb      	ldr	r3, [r7, #8]
 8007f76:	1ad3      	subs	r3, r2, r3
 8007f78:	2b02      	cmp	r3, #2
 8007f7a:	d901      	bls.n	8007f80 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007f7c:	2303      	movs	r3, #3
 8007f7e:	e086      	b.n	800808e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007f80:	4b45      	ldr	r3, [pc, #276]	; (8008098 <RCCEx_PLL2_Config+0x15c>)
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d1f0      	bne.n	8007f6e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007f8c:	4b42      	ldr	r3, [pc, #264]	; (8008098 <RCCEx_PLL2_Config+0x15c>)
 8007f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f90:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	031b      	lsls	r3, r3, #12
 8007f9a:	493f      	ldr	r1, [pc, #252]	; (8008098 <RCCEx_PLL2_Config+0x15c>)
 8007f9c:	4313      	orrs	r3, r2
 8007f9e:	628b      	str	r3, [r1, #40]	; 0x28
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	685b      	ldr	r3, [r3, #4]
 8007fa4:	3b01      	subs	r3, #1
 8007fa6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	689b      	ldr	r3, [r3, #8]
 8007fae:	3b01      	subs	r3, #1
 8007fb0:	025b      	lsls	r3, r3, #9
 8007fb2:	b29b      	uxth	r3, r3
 8007fb4:	431a      	orrs	r2, r3
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	68db      	ldr	r3, [r3, #12]
 8007fba:	3b01      	subs	r3, #1
 8007fbc:	041b      	lsls	r3, r3, #16
 8007fbe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007fc2:	431a      	orrs	r2, r3
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	691b      	ldr	r3, [r3, #16]
 8007fc8:	3b01      	subs	r3, #1
 8007fca:	061b      	lsls	r3, r3, #24
 8007fcc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007fd0:	4931      	ldr	r1, [pc, #196]	; (8008098 <RCCEx_PLL2_Config+0x15c>)
 8007fd2:	4313      	orrs	r3, r2
 8007fd4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007fd6:	4b30      	ldr	r3, [pc, #192]	; (8008098 <RCCEx_PLL2_Config+0x15c>)
 8007fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fda:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	695b      	ldr	r3, [r3, #20]
 8007fe2:	492d      	ldr	r1, [pc, #180]	; (8008098 <RCCEx_PLL2_Config+0x15c>)
 8007fe4:	4313      	orrs	r3, r2
 8007fe6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007fe8:	4b2b      	ldr	r3, [pc, #172]	; (8008098 <RCCEx_PLL2_Config+0x15c>)
 8007fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fec:	f023 0220 	bic.w	r2, r3, #32
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	699b      	ldr	r3, [r3, #24]
 8007ff4:	4928      	ldr	r1, [pc, #160]	; (8008098 <RCCEx_PLL2_Config+0x15c>)
 8007ff6:	4313      	orrs	r3, r2
 8007ff8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007ffa:	4b27      	ldr	r3, [pc, #156]	; (8008098 <RCCEx_PLL2_Config+0x15c>)
 8007ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ffe:	4a26      	ldr	r2, [pc, #152]	; (8008098 <RCCEx_PLL2_Config+0x15c>)
 8008000:	f023 0310 	bic.w	r3, r3, #16
 8008004:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008006:	4b24      	ldr	r3, [pc, #144]	; (8008098 <RCCEx_PLL2_Config+0x15c>)
 8008008:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800800a:	4b24      	ldr	r3, [pc, #144]	; (800809c <RCCEx_PLL2_Config+0x160>)
 800800c:	4013      	ands	r3, r2
 800800e:	687a      	ldr	r2, [r7, #4]
 8008010:	69d2      	ldr	r2, [r2, #28]
 8008012:	00d2      	lsls	r2, r2, #3
 8008014:	4920      	ldr	r1, [pc, #128]	; (8008098 <RCCEx_PLL2_Config+0x15c>)
 8008016:	4313      	orrs	r3, r2
 8008018:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800801a:	4b1f      	ldr	r3, [pc, #124]	; (8008098 <RCCEx_PLL2_Config+0x15c>)
 800801c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800801e:	4a1e      	ldr	r2, [pc, #120]	; (8008098 <RCCEx_PLL2_Config+0x15c>)
 8008020:	f043 0310 	orr.w	r3, r3, #16
 8008024:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d106      	bne.n	800803a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800802c:	4b1a      	ldr	r3, [pc, #104]	; (8008098 <RCCEx_PLL2_Config+0x15c>)
 800802e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008030:	4a19      	ldr	r2, [pc, #100]	; (8008098 <RCCEx_PLL2_Config+0x15c>)
 8008032:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008036:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008038:	e00f      	b.n	800805a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	2b01      	cmp	r3, #1
 800803e:	d106      	bne.n	800804e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008040:	4b15      	ldr	r3, [pc, #84]	; (8008098 <RCCEx_PLL2_Config+0x15c>)
 8008042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008044:	4a14      	ldr	r2, [pc, #80]	; (8008098 <RCCEx_PLL2_Config+0x15c>)
 8008046:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800804a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800804c:	e005      	b.n	800805a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800804e:	4b12      	ldr	r3, [pc, #72]	; (8008098 <RCCEx_PLL2_Config+0x15c>)
 8008050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008052:	4a11      	ldr	r2, [pc, #68]	; (8008098 <RCCEx_PLL2_Config+0x15c>)
 8008054:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008058:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800805a:	4b0f      	ldr	r3, [pc, #60]	; (8008098 <RCCEx_PLL2_Config+0x15c>)
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	4a0e      	ldr	r2, [pc, #56]	; (8008098 <RCCEx_PLL2_Config+0x15c>)
 8008060:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008064:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008066:	f7f9 fd8d 	bl	8001b84 <HAL_GetTick>
 800806a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800806c:	e008      	b.n	8008080 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800806e:	f7f9 fd89 	bl	8001b84 <HAL_GetTick>
 8008072:	4602      	mov	r2, r0
 8008074:	68bb      	ldr	r3, [r7, #8]
 8008076:	1ad3      	subs	r3, r2, r3
 8008078:	2b02      	cmp	r3, #2
 800807a:	d901      	bls.n	8008080 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800807c:	2303      	movs	r3, #3
 800807e:	e006      	b.n	800808e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008080:	4b05      	ldr	r3, [pc, #20]	; (8008098 <RCCEx_PLL2_Config+0x15c>)
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008088:	2b00      	cmp	r3, #0
 800808a:	d0f0      	beq.n	800806e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800808c:	7bfb      	ldrb	r3, [r7, #15]
}
 800808e:	4618      	mov	r0, r3
 8008090:	3710      	adds	r7, #16
 8008092:	46bd      	mov	sp, r7
 8008094:	bd80      	pop	{r7, pc}
 8008096:	bf00      	nop
 8008098:	58024400 	.word	0x58024400
 800809c:	ffff0007 	.word	0xffff0007

080080a0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b084      	sub	sp, #16
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
 80080a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80080aa:	2300      	movs	r3, #0
 80080ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80080ae:	4b53      	ldr	r3, [pc, #332]	; (80081fc <RCCEx_PLL3_Config+0x15c>)
 80080b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080b2:	f003 0303 	and.w	r3, r3, #3
 80080b6:	2b03      	cmp	r3, #3
 80080b8:	d101      	bne.n	80080be <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80080ba:	2301      	movs	r3, #1
 80080bc:	e099      	b.n	80081f2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80080be:	4b4f      	ldr	r3, [pc, #316]	; (80081fc <RCCEx_PLL3_Config+0x15c>)
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	4a4e      	ldr	r2, [pc, #312]	; (80081fc <RCCEx_PLL3_Config+0x15c>)
 80080c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80080c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80080ca:	f7f9 fd5b 	bl	8001b84 <HAL_GetTick>
 80080ce:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80080d0:	e008      	b.n	80080e4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80080d2:	f7f9 fd57 	bl	8001b84 <HAL_GetTick>
 80080d6:	4602      	mov	r2, r0
 80080d8:	68bb      	ldr	r3, [r7, #8]
 80080da:	1ad3      	subs	r3, r2, r3
 80080dc:	2b02      	cmp	r3, #2
 80080de:	d901      	bls.n	80080e4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80080e0:	2303      	movs	r3, #3
 80080e2:	e086      	b.n	80081f2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80080e4:	4b45      	ldr	r3, [pc, #276]	; (80081fc <RCCEx_PLL3_Config+0x15c>)
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d1f0      	bne.n	80080d2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80080f0:	4b42      	ldr	r3, [pc, #264]	; (80081fc <RCCEx_PLL3_Config+0x15c>)
 80080f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080f4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	051b      	lsls	r3, r3, #20
 80080fe:	493f      	ldr	r1, [pc, #252]	; (80081fc <RCCEx_PLL3_Config+0x15c>)
 8008100:	4313      	orrs	r3, r2
 8008102:	628b      	str	r3, [r1, #40]	; 0x28
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	685b      	ldr	r3, [r3, #4]
 8008108:	3b01      	subs	r3, #1
 800810a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	689b      	ldr	r3, [r3, #8]
 8008112:	3b01      	subs	r3, #1
 8008114:	025b      	lsls	r3, r3, #9
 8008116:	b29b      	uxth	r3, r3
 8008118:	431a      	orrs	r2, r3
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	68db      	ldr	r3, [r3, #12]
 800811e:	3b01      	subs	r3, #1
 8008120:	041b      	lsls	r3, r3, #16
 8008122:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008126:	431a      	orrs	r2, r3
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	691b      	ldr	r3, [r3, #16]
 800812c:	3b01      	subs	r3, #1
 800812e:	061b      	lsls	r3, r3, #24
 8008130:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008134:	4931      	ldr	r1, [pc, #196]	; (80081fc <RCCEx_PLL3_Config+0x15c>)
 8008136:	4313      	orrs	r3, r2
 8008138:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800813a:	4b30      	ldr	r3, [pc, #192]	; (80081fc <RCCEx_PLL3_Config+0x15c>)
 800813c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800813e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	695b      	ldr	r3, [r3, #20]
 8008146:	492d      	ldr	r1, [pc, #180]	; (80081fc <RCCEx_PLL3_Config+0x15c>)
 8008148:	4313      	orrs	r3, r2
 800814a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800814c:	4b2b      	ldr	r3, [pc, #172]	; (80081fc <RCCEx_PLL3_Config+0x15c>)
 800814e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008150:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	699b      	ldr	r3, [r3, #24]
 8008158:	4928      	ldr	r1, [pc, #160]	; (80081fc <RCCEx_PLL3_Config+0x15c>)
 800815a:	4313      	orrs	r3, r2
 800815c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800815e:	4b27      	ldr	r3, [pc, #156]	; (80081fc <RCCEx_PLL3_Config+0x15c>)
 8008160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008162:	4a26      	ldr	r2, [pc, #152]	; (80081fc <RCCEx_PLL3_Config+0x15c>)
 8008164:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008168:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800816a:	4b24      	ldr	r3, [pc, #144]	; (80081fc <RCCEx_PLL3_Config+0x15c>)
 800816c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800816e:	4b24      	ldr	r3, [pc, #144]	; (8008200 <RCCEx_PLL3_Config+0x160>)
 8008170:	4013      	ands	r3, r2
 8008172:	687a      	ldr	r2, [r7, #4]
 8008174:	69d2      	ldr	r2, [r2, #28]
 8008176:	00d2      	lsls	r2, r2, #3
 8008178:	4920      	ldr	r1, [pc, #128]	; (80081fc <RCCEx_PLL3_Config+0x15c>)
 800817a:	4313      	orrs	r3, r2
 800817c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800817e:	4b1f      	ldr	r3, [pc, #124]	; (80081fc <RCCEx_PLL3_Config+0x15c>)
 8008180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008182:	4a1e      	ldr	r2, [pc, #120]	; (80081fc <RCCEx_PLL3_Config+0x15c>)
 8008184:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008188:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800818a:	683b      	ldr	r3, [r7, #0]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d106      	bne.n	800819e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008190:	4b1a      	ldr	r3, [pc, #104]	; (80081fc <RCCEx_PLL3_Config+0x15c>)
 8008192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008194:	4a19      	ldr	r2, [pc, #100]	; (80081fc <RCCEx_PLL3_Config+0x15c>)
 8008196:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800819a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800819c:	e00f      	b.n	80081be <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800819e:	683b      	ldr	r3, [r7, #0]
 80081a0:	2b01      	cmp	r3, #1
 80081a2:	d106      	bne.n	80081b2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80081a4:	4b15      	ldr	r3, [pc, #84]	; (80081fc <RCCEx_PLL3_Config+0x15c>)
 80081a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081a8:	4a14      	ldr	r2, [pc, #80]	; (80081fc <RCCEx_PLL3_Config+0x15c>)
 80081aa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80081ae:	62d3      	str	r3, [r2, #44]	; 0x2c
 80081b0:	e005      	b.n	80081be <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80081b2:	4b12      	ldr	r3, [pc, #72]	; (80081fc <RCCEx_PLL3_Config+0x15c>)
 80081b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081b6:	4a11      	ldr	r2, [pc, #68]	; (80081fc <RCCEx_PLL3_Config+0x15c>)
 80081b8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80081bc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80081be:	4b0f      	ldr	r3, [pc, #60]	; (80081fc <RCCEx_PLL3_Config+0x15c>)
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	4a0e      	ldr	r2, [pc, #56]	; (80081fc <RCCEx_PLL3_Config+0x15c>)
 80081c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80081c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80081ca:	f7f9 fcdb 	bl	8001b84 <HAL_GetTick>
 80081ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80081d0:	e008      	b.n	80081e4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80081d2:	f7f9 fcd7 	bl	8001b84 <HAL_GetTick>
 80081d6:	4602      	mov	r2, r0
 80081d8:	68bb      	ldr	r3, [r7, #8]
 80081da:	1ad3      	subs	r3, r2, r3
 80081dc:	2b02      	cmp	r3, #2
 80081de:	d901      	bls.n	80081e4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80081e0:	2303      	movs	r3, #3
 80081e2:	e006      	b.n	80081f2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80081e4:	4b05      	ldr	r3, [pc, #20]	; (80081fc <RCCEx_PLL3_Config+0x15c>)
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d0f0      	beq.n	80081d2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80081f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80081f2:	4618      	mov	r0, r3
 80081f4:	3710      	adds	r7, #16
 80081f6:	46bd      	mov	sp, r7
 80081f8:	bd80      	pop	{r7, pc}
 80081fa:	bf00      	nop
 80081fc:	58024400 	.word	0x58024400
 8008200:	ffff0007 	.word	0xffff0007

08008204 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b082      	sub	sp, #8
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d101      	bne.n	8008216 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008212:	2301      	movs	r3, #1
 8008214:	e049      	b.n	80082aa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800821c:	b2db      	uxtb	r3, r3
 800821e:	2b00      	cmp	r3, #0
 8008220:	d106      	bne.n	8008230 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2200      	movs	r2, #0
 8008226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800822a:	6878      	ldr	r0, [r7, #4]
 800822c:	f7f9 fabe 	bl	80017ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2202      	movs	r2, #2
 8008234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681a      	ldr	r2, [r3, #0]
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	3304      	adds	r3, #4
 8008240:	4619      	mov	r1, r3
 8008242:	4610      	mov	r0, r2
 8008244:	f000 f8a6 	bl	8008394 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2201      	movs	r2, #1
 800824c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2201      	movs	r2, #1
 8008254:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2201      	movs	r2, #1
 800825c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2201      	movs	r2, #1
 8008264:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2201      	movs	r2, #1
 800826c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2201      	movs	r2, #1
 8008274:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2201      	movs	r2, #1
 800827c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2201      	movs	r2, #1
 8008284:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2201      	movs	r2, #1
 800828c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2201      	movs	r2, #1
 8008294:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2201      	movs	r2, #1
 800829c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2201      	movs	r2, #1
 80082a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80082a8:	2300      	movs	r3, #0
}
 80082aa:	4618      	mov	r0, r3
 80082ac:	3708      	adds	r7, #8
 80082ae:	46bd      	mov	sp, r7
 80082b0:	bd80      	pop	{r7, pc}
	...

080082b4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80082b4:	b480      	push	{r7}
 80082b6:	b085      	sub	sp, #20
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082c2:	b2db      	uxtb	r3, r3
 80082c4:	2b01      	cmp	r3, #1
 80082c6:	d001      	beq.n	80082cc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80082c8:	2301      	movs	r3, #1
 80082ca:	e04c      	b.n	8008366 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2202      	movs	r2, #2
 80082d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	4a26      	ldr	r2, [pc, #152]	; (8008374 <HAL_TIM_Base_Start+0xc0>)
 80082da:	4293      	cmp	r3, r2
 80082dc:	d022      	beq.n	8008324 <HAL_TIM_Base_Start+0x70>
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082e6:	d01d      	beq.n	8008324 <HAL_TIM_Base_Start+0x70>
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	4a22      	ldr	r2, [pc, #136]	; (8008378 <HAL_TIM_Base_Start+0xc4>)
 80082ee:	4293      	cmp	r3, r2
 80082f0:	d018      	beq.n	8008324 <HAL_TIM_Base_Start+0x70>
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	4a21      	ldr	r2, [pc, #132]	; (800837c <HAL_TIM_Base_Start+0xc8>)
 80082f8:	4293      	cmp	r3, r2
 80082fa:	d013      	beq.n	8008324 <HAL_TIM_Base_Start+0x70>
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	4a1f      	ldr	r2, [pc, #124]	; (8008380 <HAL_TIM_Base_Start+0xcc>)
 8008302:	4293      	cmp	r3, r2
 8008304:	d00e      	beq.n	8008324 <HAL_TIM_Base_Start+0x70>
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	4a1e      	ldr	r2, [pc, #120]	; (8008384 <HAL_TIM_Base_Start+0xd0>)
 800830c:	4293      	cmp	r3, r2
 800830e:	d009      	beq.n	8008324 <HAL_TIM_Base_Start+0x70>
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	4a1c      	ldr	r2, [pc, #112]	; (8008388 <HAL_TIM_Base_Start+0xd4>)
 8008316:	4293      	cmp	r3, r2
 8008318:	d004      	beq.n	8008324 <HAL_TIM_Base_Start+0x70>
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	4a1b      	ldr	r2, [pc, #108]	; (800838c <HAL_TIM_Base_Start+0xd8>)
 8008320:	4293      	cmp	r3, r2
 8008322:	d115      	bne.n	8008350 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	689a      	ldr	r2, [r3, #8]
 800832a:	4b19      	ldr	r3, [pc, #100]	; (8008390 <HAL_TIM_Base_Start+0xdc>)
 800832c:	4013      	ands	r3, r2
 800832e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	2b06      	cmp	r3, #6
 8008334:	d015      	beq.n	8008362 <HAL_TIM_Base_Start+0xae>
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800833c:	d011      	beq.n	8008362 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	681a      	ldr	r2, [r3, #0]
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	f042 0201 	orr.w	r2, r2, #1
 800834c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800834e:	e008      	b.n	8008362 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	681a      	ldr	r2, [r3, #0]
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f042 0201 	orr.w	r2, r2, #1
 800835e:	601a      	str	r2, [r3, #0]
 8008360:	e000      	b.n	8008364 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008362:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008364:	2300      	movs	r3, #0
}
 8008366:	4618      	mov	r0, r3
 8008368:	3714      	adds	r7, #20
 800836a:	46bd      	mov	sp, r7
 800836c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008370:	4770      	bx	lr
 8008372:	bf00      	nop
 8008374:	40010000 	.word	0x40010000
 8008378:	40000400 	.word	0x40000400
 800837c:	40000800 	.word	0x40000800
 8008380:	40000c00 	.word	0x40000c00
 8008384:	40010400 	.word	0x40010400
 8008388:	40001800 	.word	0x40001800
 800838c:	40014000 	.word	0x40014000
 8008390:	00010007 	.word	0x00010007

08008394 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008394:	b480      	push	{r7}
 8008396:	b085      	sub	sp, #20
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
 800839c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	4a40      	ldr	r2, [pc, #256]	; (80084a8 <TIM_Base_SetConfig+0x114>)
 80083a8:	4293      	cmp	r3, r2
 80083aa:	d013      	beq.n	80083d4 <TIM_Base_SetConfig+0x40>
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083b2:	d00f      	beq.n	80083d4 <TIM_Base_SetConfig+0x40>
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	4a3d      	ldr	r2, [pc, #244]	; (80084ac <TIM_Base_SetConfig+0x118>)
 80083b8:	4293      	cmp	r3, r2
 80083ba:	d00b      	beq.n	80083d4 <TIM_Base_SetConfig+0x40>
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	4a3c      	ldr	r2, [pc, #240]	; (80084b0 <TIM_Base_SetConfig+0x11c>)
 80083c0:	4293      	cmp	r3, r2
 80083c2:	d007      	beq.n	80083d4 <TIM_Base_SetConfig+0x40>
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	4a3b      	ldr	r2, [pc, #236]	; (80084b4 <TIM_Base_SetConfig+0x120>)
 80083c8:	4293      	cmp	r3, r2
 80083ca:	d003      	beq.n	80083d4 <TIM_Base_SetConfig+0x40>
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	4a3a      	ldr	r2, [pc, #232]	; (80084b8 <TIM_Base_SetConfig+0x124>)
 80083d0:	4293      	cmp	r3, r2
 80083d2:	d108      	bne.n	80083e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	685b      	ldr	r3, [r3, #4]
 80083e0:	68fa      	ldr	r2, [r7, #12]
 80083e2:	4313      	orrs	r3, r2
 80083e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	4a2f      	ldr	r2, [pc, #188]	; (80084a8 <TIM_Base_SetConfig+0x114>)
 80083ea:	4293      	cmp	r3, r2
 80083ec:	d01f      	beq.n	800842e <TIM_Base_SetConfig+0x9a>
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083f4:	d01b      	beq.n	800842e <TIM_Base_SetConfig+0x9a>
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	4a2c      	ldr	r2, [pc, #176]	; (80084ac <TIM_Base_SetConfig+0x118>)
 80083fa:	4293      	cmp	r3, r2
 80083fc:	d017      	beq.n	800842e <TIM_Base_SetConfig+0x9a>
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	4a2b      	ldr	r2, [pc, #172]	; (80084b0 <TIM_Base_SetConfig+0x11c>)
 8008402:	4293      	cmp	r3, r2
 8008404:	d013      	beq.n	800842e <TIM_Base_SetConfig+0x9a>
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	4a2a      	ldr	r2, [pc, #168]	; (80084b4 <TIM_Base_SetConfig+0x120>)
 800840a:	4293      	cmp	r3, r2
 800840c:	d00f      	beq.n	800842e <TIM_Base_SetConfig+0x9a>
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	4a29      	ldr	r2, [pc, #164]	; (80084b8 <TIM_Base_SetConfig+0x124>)
 8008412:	4293      	cmp	r3, r2
 8008414:	d00b      	beq.n	800842e <TIM_Base_SetConfig+0x9a>
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	4a28      	ldr	r2, [pc, #160]	; (80084bc <TIM_Base_SetConfig+0x128>)
 800841a:	4293      	cmp	r3, r2
 800841c:	d007      	beq.n	800842e <TIM_Base_SetConfig+0x9a>
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	4a27      	ldr	r2, [pc, #156]	; (80084c0 <TIM_Base_SetConfig+0x12c>)
 8008422:	4293      	cmp	r3, r2
 8008424:	d003      	beq.n	800842e <TIM_Base_SetConfig+0x9a>
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	4a26      	ldr	r2, [pc, #152]	; (80084c4 <TIM_Base_SetConfig+0x130>)
 800842a:	4293      	cmp	r3, r2
 800842c:	d108      	bne.n	8008440 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008434:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	68db      	ldr	r3, [r3, #12]
 800843a:	68fa      	ldr	r2, [r7, #12]
 800843c:	4313      	orrs	r3, r2
 800843e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	695b      	ldr	r3, [r3, #20]
 800844a:	4313      	orrs	r3, r2
 800844c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	68fa      	ldr	r2, [r7, #12]
 8008452:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	689a      	ldr	r2, [r3, #8]
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	681a      	ldr	r2, [r3, #0]
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	4a10      	ldr	r2, [pc, #64]	; (80084a8 <TIM_Base_SetConfig+0x114>)
 8008468:	4293      	cmp	r3, r2
 800846a:	d00f      	beq.n	800848c <TIM_Base_SetConfig+0xf8>
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	4a12      	ldr	r2, [pc, #72]	; (80084b8 <TIM_Base_SetConfig+0x124>)
 8008470:	4293      	cmp	r3, r2
 8008472:	d00b      	beq.n	800848c <TIM_Base_SetConfig+0xf8>
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	4a11      	ldr	r2, [pc, #68]	; (80084bc <TIM_Base_SetConfig+0x128>)
 8008478:	4293      	cmp	r3, r2
 800847a:	d007      	beq.n	800848c <TIM_Base_SetConfig+0xf8>
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	4a10      	ldr	r2, [pc, #64]	; (80084c0 <TIM_Base_SetConfig+0x12c>)
 8008480:	4293      	cmp	r3, r2
 8008482:	d003      	beq.n	800848c <TIM_Base_SetConfig+0xf8>
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	4a0f      	ldr	r2, [pc, #60]	; (80084c4 <TIM_Base_SetConfig+0x130>)
 8008488:	4293      	cmp	r3, r2
 800848a:	d103      	bne.n	8008494 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	691a      	ldr	r2, [r3, #16]
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2201      	movs	r2, #1
 8008498:	615a      	str	r2, [r3, #20]
}
 800849a:	bf00      	nop
 800849c:	3714      	adds	r7, #20
 800849e:	46bd      	mov	sp, r7
 80084a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a4:	4770      	bx	lr
 80084a6:	bf00      	nop
 80084a8:	40010000 	.word	0x40010000
 80084ac:	40000400 	.word	0x40000400
 80084b0:	40000800 	.word	0x40000800
 80084b4:	40000c00 	.word	0x40000c00
 80084b8:	40010400 	.word	0x40010400
 80084bc:	40014000 	.word	0x40014000
 80084c0:	40014400 	.word	0x40014400
 80084c4:	40014800 	.word	0x40014800

080084c8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80084c8:	b084      	sub	sp, #16
 80084ca:	b580      	push	{r7, lr}
 80084cc:	b084      	sub	sp, #16
 80084ce:	af00      	add	r7, sp, #0
 80084d0:	6078      	str	r0, [r7, #4]
 80084d2:	f107 001c 	add.w	r0, r7, #28
 80084d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80084da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084dc:	2b01      	cmp	r3, #1
 80084de:	d120      	bne.n	8008522 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084e4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	68da      	ldr	r2, [r3, #12]
 80084f0:	4b2a      	ldr	r3, [pc, #168]	; (800859c <USB_CoreInit+0xd4>)
 80084f2:	4013      	ands	r3, r2
 80084f4:	687a      	ldr	r2, [r7, #4]
 80084f6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	68db      	ldr	r3, [r3, #12]
 80084fc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008504:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008506:	2b01      	cmp	r3, #1
 8008508:	d105      	bne.n	8008516 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	68db      	ldr	r3, [r3, #12]
 800850e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008516:	6878      	ldr	r0, [r7, #4]
 8008518:	f001 faf8 	bl	8009b0c <USB_CoreReset>
 800851c:	4603      	mov	r3, r0
 800851e:	73fb      	strb	r3, [r7, #15]
 8008520:	e01a      	b.n	8008558 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	68db      	ldr	r3, [r3, #12]
 8008526:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800852e:	6878      	ldr	r0, [r7, #4]
 8008530:	f001 faec 	bl	8009b0c <USB_CoreReset>
 8008534:	4603      	mov	r3, r0
 8008536:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008538:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800853a:	2b00      	cmp	r3, #0
 800853c:	d106      	bne.n	800854c <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008542:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	639a      	str	r2, [r3, #56]	; 0x38
 800854a:	e005      	b.n	8008558 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008550:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800855a:	2b01      	cmp	r3, #1
 800855c:	d116      	bne.n	800858c <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008562:	b29a      	uxth	r2, r3
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800856c:	4b0c      	ldr	r3, [pc, #48]	; (80085a0 <USB_CoreInit+0xd8>)
 800856e:	4313      	orrs	r3, r2
 8008570:	687a      	ldr	r2, [r7, #4]
 8008572:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	689b      	ldr	r3, [r3, #8]
 8008578:	f043 0206 	orr.w	r2, r3, #6
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	689b      	ldr	r3, [r3, #8]
 8008584:	f043 0220 	orr.w	r2, r3, #32
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800858c:	7bfb      	ldrb	r3, [r7, #15]
}
 800858e:	4618      	mov	r0, r3
 8008590:	3710      	adds	r7, #16
 8008592:	46bd      	mov	sp, r7
 8008594:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008598:	b004      	add	sp, #16
 800859a:	4770      	bx	lr
 800859c:	ffbdffbf 	.word	0xffbdffbf
 80085a0:	03ee0000 	.word	0x03ee0000

080085a4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80085a4:	b480      	push	{r7}
 80085a6:	b087      	sub	sp, #28
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	60f8      	str	r0, [r7, #12]
 80085ac:	60b9      	str	r1, [r7, #8]
 80085ae:	4613      	mov	r3, r2
 80085b0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80085b2:	79fb      	ldrb	r3, [r7, #7]
 80085b4:	2b02      	cmp	r3, #2
 80085b6:	d165      	bne.n	8008684 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80085b8:	68bb      	ldr	r3, [r7, #8]
 80085ba:	4a41      	ldr	r2, [pc, #260]	; (80086c0 <USB_SetTurnaroundTime+0x11c>)
 80085bc:	4293      	cmp	r3, r2
 80085be:	d906      	bls.n	80085ce <USB_SetTurnaroundTime+0x2a>
 80085c0:	68bb      	ldr	r3, [r7, #8]
 80085c2:	4a40      	ldr	r2, [pc, #256]	; (80086c4 <USB_SetTurnaroundTime+0x120>)
 80085c4:	4293      	cmp	r3, r2
 80085c6:	d202      	bcs.n	80085ce <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80085c8:	230f      	movs	r3, #15
 80085ca:	617b      	str	r3, [r7, #20]
 80085cc:	e062      	b.n	8008694 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80085ce:	68bb      	ldr	r3, [r7, #8]
 80085d0:	4a3c      	ldr	r2, [pc, #240]	; (80086c4 <USB_SetTurnaroundTime+0x120>)
 80085d2:	4293      	cmp	r3, r2
 80085d4:	d306      	bcc.n	80085e4 <USB_SetTurnaroundTime+0x40>
 80085d6:	68bb      	ldr	r3, [r7, #8]
 80085d8:	4a3b      	ldr	r2, [pc, #236]	; (80086c8 <USB_SetTurnaroundTime+0x124>)
 80085da:	4293      	cmp	r3, r2
 80085dc:	d202      	bcs.n	80085e4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80085de:	230e      	movs	r3, #14
 80085e0:	617b      	str	r3, [r7, #20]
 80085e2:	e057      	b.n	8008694 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80085e4:	68bb      	ldr	r3, [r7, #8]
 80085e6:	4a38      	ldr	r2, [pc, #224]	; (80086c8 <USB_SetTurnaroundTime+0x124>)
 80085e8:	4293      	cmp	r3, r2
 80085ea:	d306      	bcc.n	80085fa <USB_SetTurnaroundTime+0x56>
 80085ec:	68bb      	ldr	r3, [r7, #8]
 80085ee:	4a37      	ldr	r2, [pc, #220]	; (80086cc <USB_SetTurnaroundTime+0x128>)
 80085f0:	4293      	cmp	r3, r2
 80085f2:	d202      	bcs.n	80085fa <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80085f4:	230d      	movs	r3, #13
 80085f6:	617b      	str	r3, [r7, #20]
 80085f8:	e04c      	b.n	8008694 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80085fa:	68bb      	ldr	r3, [r7, #8]
 80085fc:	4a33      	ldr	r2, [pc, #204]	; (80086cc <USB_SetTurnaroundTime+0x128>)
 80085fe:	4293      	cmp	r3, r2
 8008600:	d306      	bcc.n	8008610 <USB_SetTurnaroundTime+0x6c>
 8008602:	68bb      	ldr	r3, [r7, #8]
 8008604:	4a32      	ldr	r2, [pc, #200]	; (80086d0 <USB_SetTurnaroundTime+0x12c>)
 8008606:	4293      	cmp	r3, r2
 8008608:	d802      	bhi.n	8008610 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800860a:	230c      	movs	r3, #12
 800860c:	617b      	str	r3, [r7, #20]
 800860e:	e041      	b.n	8008694 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008610:	68bb      	ldr	r3, [r7, #8]
 8008612:	4a2f      	ldr	r2, [pc, #188]	; (80086d0 <USB_SetTurnaroundTime+0x12c>)
 8008614:	4293      	cmp	r3, r2
 8008616:	d906      	bls.n	8008626 <USB_SetTurnaroundTime+0x82>
 8008618:	68bb      	ldr	r3, [r7, #8]
 800861a:	4a2e      	ldr	r2, [pc, #184]	; (80086d4 <USB_SetTurnaroundTime+0x130>)
 800861c:	4293      	cmp	r3, r2
 800861e:	d802      	bhi.n	8008626 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008620:	230b      	movs	r3, #11
 8008622:	617b      	str	r3, [r7, #20]
 8008624:	e036      	b.n	8008694 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8008626:	68bb      	ldr	r3, [r7, #8]
 8008628:	4a2a      	ldr	r2, [pc, #168]	; (80086d4 <USB_SetTurnaroundTime+0x130>)
 800862a:	4293      	cmp	r3, r2
 800862c:	d906      	bls.n	800863c <USB_SetTurnaroundTime+0x98>
 800862e:	68bb      	ldr	r3, [r7, #8]
 8008630:	4a29      	ldr	r2, [pc, #164]	; (80086d8 <USB_SetTurnaroundTime+0x134>)
 8008632:	4293      	cmp	r3, r2
 8008634:	d802      	bhi.n	800863c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8008636:	230a      	movs	r3, #10
 8008638:	617b      	str	r3, [r7, #20]
 800863a:	e02b      	b.n	8008694 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800863c:	68bb      	ldr	r3, [r7, #8]
 800863e:	4a26      	ldr	r2, [pc, #152]	; (80086d8 <USB_SetTurnaroundTime+0x134>)
 8008640:	4293      	cmp	r3, r2
 8008642:	d906      	bls.n	8008652 <USB_SetTurnaroundTime+0xae>
 8008644:	68bb      	ldr	r3, [r7, #8]
 8008646:	4a25      	ldr	r2, [pc, #148]	; (80086dc <USB_SetTurnaroundTime+0x138>)
 8008648:	4293      	cmp	r3, r2
 800864a:	d202      	bcs.n	8008652 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800864c:	2309      	movs	r3, #9
 800864e:	617b      	str	r3, [r7, #20]
 8008650:	e020      	b.n	8008694 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008652:	68bb      	ldr	r3, [r7, #8]
 8008654:	4a21      	ldr	r2, [pc, #132]	; (80086dc <USB_SetTurnaroundTime+0x138>)
 8008656:	4293      	cmp	r3, r2
 8008658:	d306      	bcc.n	8008668 <USB_SetTurnaroundTime+0xc4>
 800865a:	68bb      	ldr	r3, [r7, #8]
 800865c:	4a20      	ldr	r2, [pc, #128]	; (80086e0 <USB_SetTurnaroundTime+0x13c>)
 800865e:	4293      	cmp	r3, r2
 8008660:	d802      	bhi.n	8008668 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008662:	2308      	movs	r3, #8
 8008664:	617b      	str	r3, [r7, #20]
 8008666:	e015      	b.n	8008694 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008668:	68bb      	ldr	r3, [r7, #8]
 800866a:	4a1d      	ldr	r2, [pc, #116]	; (80086e0 <USB_SetTurnaroundTime+0x13c>)
 800866c:	4293      	cmp	r3, r2
 800866e:	d906      	bls.n	800867e <USB_SetTurnaroundTime+0xda>
 8008670:	68bb      	ldr	r3, [r7, #8]
 8008672:	4a1c      	ldr	r2, [pc, #112]	; (80086e4 <USB_SetTurnaroundTime+0x140>)
 8008674:	4293      	cmp	r3, r2
 8008676:	d202      	bcs.n	800867e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008678:	2307      	movs	r3, #7
 800867a:	617b      	str	r3, [r7, #20]
 800867c:	e00a      	b.n	8008694 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800867e:	2306      	movs	r3, #6
 8008680:	617b      	str	r3, [r7, #20]
 8008682:	e007      	b.n	8008694 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008684:	79fb      	ldrb	r3, [r7, #7]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d102      	bne.n	8008690 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800868a:	2309      	movs	r3, #9
 800868c:	617b      	str	r3, [r7, #20]
 800868e:	e001      	b.n	8008694 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008690:	2309      	movs	r3, #9
 8008692:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	68db      	ldr	r3, [r3, #12]
 8008698:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	68da      	ldr	r2, [r3, #12]
 80086a4:	697b      	ldr	r3, [r7, #20]
 80086a6:	029b      	lsls	r3, r3, #10
 80086a8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80086ac:	431a      	orrs	r2, r3
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80086b2:	2300      	movs	r3, #0
}
 80086b4:	4618      	mov	r0, r3
 80086b6:	371c      	adds	r7, #28
 80086b8:	46bd      	mov	sp, r7
 80086ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086be:	4770      	bx	lr
 80086c0:	00d8acbf 	.word	0x00d8acbf
 80086c4:	00e4e1c0 	.word	0x00e4e1c0
 80086c8:	00f42400 	.word	0x00f42400
 80086cc:	01067380 	.word	0x01067380
 80086d0:	011a499f 	.word	0x011a499f
 80086d4:	01312cff 	.word	0x01312cff
 80086d8:	014ca43f 	.word	0x014ca43f
 80086dc:	016e3600 	.word	0x016e3600
 80086e0:	01a6ab1f 	.word	0x01a6ab1f
 80086e4:	01e84800 	.word	0x01e84800

080086e8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80086e8:	b480      	push	{r7}
 80086ea:	b083      	sub	sp, #12
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	689b      	ldr	r3, [r3, #8]
 80086f4:	f043 0201 	orr.w	r2, r3, #1
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80086fc:	2300      	movs	r3, #0
}
 80086fe:	4618      	mov	r0, r3
 8008700:	370c      	adds	r7, #12
 8008702:	46bd      	mov	sp, r7
 8008704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008708:	4770      	bx	lr

0800870a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800870a:	b480      	push	{r7}
 800870c:	b083      	sub	sp, #12
 800870e:	af00      	add	r7, sp, #0
 8008710:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	689b      	ldr	r3, [r3, #8]
 8008716:	f023 0201 	bic.w	r2, r3, #1
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800871e:	2300      	movs	r3, #0
}
 8008720:	4618      	mov	r0, r3
 8008722:	370c      	adds	r7, #12
 8008724:	46bd      	mov	sp, r7
 8008726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872a:	4770      	bx	lr

0800872c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800872c:	b580      	push	{r7, lr}
 800872e:	b084      	sub	sp, #16
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
 8008734:	460b      	mov	r3, r1
 8008736:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008738:	2300      	movs	r3, #0
 800873a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	68db      	ldr	r3, [r3, #12]
 8008740:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008748:	78fb      	ldrb	r3, [r7, #3]
 800874a:	2b01      	cmp	r3, #1
 800874c:	d115      	bne.n	800877a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	68db      	ldr	r3, [r3, #12]
 8008752:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800875a:	2001      	movs	r0, #1
 800875c:	f7f9 fa1e 	bl	8001b9c <HAL_Delay>
      ms++;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	3301      	adds	r3, #1
 8008764:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	f001 f93f 	bl	80099ea <USB_GetMode>
 800876c:	4603      	mov	r3, r0
 800876e:	2b01      	cmp	r3, #1
 8008770:	d01e      	beq.n	80087b0 <USB_SetCurrentMode+0x84>
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	2b31      	cmp	r3, #49	; 0x31
 8008776:	d9f0      	bls.n	800875a <USB_SetCurrentMode+0x2e>
 8008778:	e01a      	b.n	80087b0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800877a:	78fb      	ldrb	r3, [r7, #3]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d115      	bne.n	80087ac <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	68db      	ldr	r3, [r3, #12]
 8008784:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800878c:	2001      	movs	r0, #1
 800878e:	f7f9 fa05 	bl	8001b9c <HAL_Delay>
      ms++;
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	3301      	adds	r3, #1
 8008796:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008798:	6878      	ldr	r0, [r7, #4]
 800879a:	f001 f926 	bl	80099ea <USB_GetMode>
 800879e:	4603      	mov	r3, r0
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d005      	beq.n	80087b0 <USB_SetCurrentMode+0x84>
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	2b31      	cmp	r3, #49	; 0x31
 80087a8:	d9f0      	bls.n	800878c <USB_SetCurrentMode+0x60>
 80087aa:	e001      	b.n	80087b0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80087ac:	2301      	movs	r3, #1
 80087ae:	e005      	b.n	80087bc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	2b32      	cmp	r3, #50	; 0x32
 80087b4:	d101      	bne.n	80087ba <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80087b6:	2301      	movs	r3, #1
 80087b8:	e000      	b.n	80087bc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80087ba:	2300      	movs	r3, #0
}
 80087bc:	4618      	mov	r0, r3
 80087be:	3710      	adds	r7, #16
 80087c0:	46bd      	mov	sp, r7
 80087c2:	bd80      	pop	{r7, pc}

080087c4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80087c4:	b084      	sub	sp, #16
 80087c6:	b580      	push	{r7, lr}
 80087c8:	b086      	sub	sp, #24
 80087ca:	af00      	add	r7, sp, #0
 80087cc:	6078      	str	r0, [r7, #4]
 80087ce:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80087d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80087d6:	2300      	movs	r3, #0
 80087d8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80087de:	2300      	movs	r3, #0
 80087e0:	613b      	str	r3, [r7, #16]
 80087e2:	e009      	b.n	80087f8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80087e4:	687a      	ldr	r2, [r7, #4]
 80087e6:	693b      	ldr	r3, [r7, #16]
 80087e8:	3340      	adds	r3, #64	; 0x40
 80087ea:	009b      	lsls	r3, r3, #2
 80087ec:	4413      	add	r3, r2
 80087ee:	2200      	movs	r2, #0
 80087f0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80087f2:	693b      	ldr	r3, [r7, #16]
 80087f4:	3301      	adds	r3, #1
 80087f6:	613b      	str	r3, [r7, #16]
 80087f8:	693b      	ldr	r3, [r7, #16]
 80087fa:	2b0e      	cmp	r3, #14
 80087fc:	d9f2      	bls.n	80087e4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80087fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008800:	2b00      	cmp	r3, #0
 8008802:	d11c      	bne.n	800883e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800880a:	685b      	ldr	r3, [r3, #4]
 800880c:	68fa      	ldr	r2, [r7, #12]
 800880e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008812:	f043 0302 	orr.w	r3, r3, #2
 8008816:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800881c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	601a      	str	r2, [r3, #0]
 800883c:	e005      	b.n	800884a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008842:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008850:	461a      	mov	r2, r3
 8008852:	2300      	movs	r3, #0
 8008854:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800885c:	4619      	mov	r1, r3
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008864:	461a      	mov	r2, r3
 8008866:	680b      	ldr	r3, [r1, #0]
 8008868:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800886a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800886c:	2b01      	cmp	r3, #1
 800886e:	d10c      	bne.n	800888a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008872:	2b00      	cmp	r3, #0
 8008874:	d104      	bne.n	8008880 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008876:	2100      	movs	r1, #0
 8008878:	6878      	ldr	r0, [r7, #4]
 800887a:	f000 f965 	bl	8008b48 <USB_SetDevSpeed>
 800887e:	e008      	b.n	8008892 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008880:	2101      	movs	r1, #1
 8008882:	6878      	ldr	r0, [r7, #4]
 8008884:	f000 f960 	bl	8008b48 <USB_SetDevSpeed>
 8008888:	e003      	b.n	8008892 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800888a:	2103      	movs	r1, #3
 800888c:	6878      	ldr	r0, [r7, #4]
 800888e:	f000 f95b 	bl	8008b48 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008892:	2110      	movs	r1, #16
 8008894:	6878      	ldr	r0, [r7, #4]
 8008896:	f000 f8f3 	bl	8008a80 <USB_FlushTxFifo>
 800889a:	4603      	mov	r3, r0
 800889c:	2b00      	cmp	r3, #0
 800889e:	d001      	beq.n	80088a4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80088a0:	2301      	movs	r3, #1
 80088a2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80088a4:	6878      	ldr	r0, [r7, #4]
 80088a6:	f000 f91f 	bl	8008ae8 <USB_FlushRxFifo>
 80088aa:	4603      	mov	r3, r0
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d001      	beq.n	80088b4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80088b0:	2301      	movs	r3, #1
 80088b2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088ba:	461a      	mov	r2, r3
 80088bc:	2300      	movs	r3, #0
 80088be:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088c6:	461a      	mov	r2, r3
 80088c8:	2300      	movs	r3, #0
 80088ca:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088d2:	461a      	mov	r2, r3
 80088d4:	2300      	movs	r3, #0
 80088d6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80088d8:	2300      	movs	r3, #0
 80088da:	613b      	str	r3, [r7, #16]
 80088dc:	e043      	b.n	8008966 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80088de:	693b      	ldr	r3, [r7, #16]
 80088e0:	015a      	lsls	r2, r3, #5
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	4413      	add	r3, r2
 80088e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80088f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80088f4:	d118      	bne.n	8008928 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80088f6:	693b      	ldr	r3, [r7, #16]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d10a      	bne.n	8008912 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80088fc:	693b      	ldr	r3, [r7, #16]
 80088fe:	015a      	lsls	r2, r3, #5
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	4413      	add	r3, r2
 8008904:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008908:	461a      	mov	r2, r3
 800890a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800890e:	6013      	str	r3, [r2, #0]
 8008910:	e013      	b.n	800893a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008912:	693b      	ldr	r3, [r7, #16]
 8008914:	015a      	lsls	r2, r3, #5
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	4413      	add	r3, r2
 800891a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800891e:	461a      	mov	r2, r3
 8008920:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008924:	6013      	str	r3, [r2, #0]
 8008926:	e008      	b.n	800893a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008928:	693b      	ldr	r3, [r7, #16]
 800892a:	015a      	lsls	r2, r3, #5
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	4413      	add	r3, r2
 8008930:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008934:	461a      	mov	r2, r3
 8008936:	2300      	movs	r3, #0
 8008938:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800893a:	693b      	ldr	r3, [r7, #16]
 800893c:	015a      	lsls	r2, r3, #5
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	4413      	add	r3, r2
 8008942:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008946:	461a      	mov	r2, r3
 8008948:	2300      	movs	r3, #0
 800894a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800894c:	693b      	ldr	r3, [r7, #16]
 800894e:	015a      	lsls	r2, r3, #5
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	4413      	add	r3, r2
 8008954:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008958:	461a      	mov	r2, r3
 800895a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800895e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008960:	693b      	ldr	r3, [r7, #16]
 8008962:	3301      	adds	r3, #1
 8008964:	613b      	str	r3, [r7, #16]
 8008966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008968:	693a      	ldr	r2, [r7, #16]
 800896a:	429a      	cmp	r2, r3
 800896c:	d3b7      	bcc.n	80088de <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800896e:	2300      	movs	r3, #0
 8008970:	613b      	str	r3, [r7, #16]
 8008972:	e043      	b.n	80089fc <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008974:	693b      	ldr	r3, [r7, #16]
 8008976:	015a      	lsls	r2, r3, #5
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	4413      	add	r3, r2
 800897c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008986:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800898a:	d118      	bne.n	80089be <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800898c:	693b      	ldr	r3, [r7, #16]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d10a      	bne.n	80089a8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008992:	693b      	ldr	r3, [r7, #16]
 8008994:	015a      	lsls	r2, r3, #5
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	4413      	add	r3, r2
 800899a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800899e:	461a      	mov	r2, r3
 80089a0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80089a4:	6013      	str	r3, [r2, #0]
 80089a6:	e013      	b.n	80089d0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80089a8:	693b      	ldr	r3, [r7, #16]
 80089aa:	015a      	lsls	r2, r3, #5
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	4413      	add	r3, r2
 80089b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089b4:	461a      	mov	r2, r3
 80089b6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80089ba:	6013      	str	r3, [r2, #0]
 80089bc:	e008      	b.n	80089d0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80089be:	693b      	ldr	r3, [r7, #16]
 80089c0:	015a      	lsls	r2, r3, #5
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	4413      	add	r3, r2
 80089c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089ca:	461a      	mov	r2, r3
 80089cc:	2300      	movs	r3, #0
 80089ce:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80089d0:	693b      	ldr	r3, [r7, #16]
 80089d2:	015a      	lsls	r2, r3, #5
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	4413      	add	r3, r2
 80089d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089dc:	461a      	mov	r2, r3
 80089de:	2300      	movs	r3, #0
 80089e0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80089e2:	693b      	ldr	r3, [r7, #16]
 80089e4:	015a      	lsls	r2, r3, #5
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	4413      	add	r3, r2
 80089ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089ee:	461a      	mov	r2, r3
 80089f0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80089f4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80089f6:	693b      	ldr	r3, [r7, #16]
 80089f8:	3301      	adds	r3, #1
 80089fa:	613b      	str	r3, [r7, #16]
 80089fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089fe:	693a      	ldr	r2, [r7, #16]
 8008a00:	429a      	cmp	r2, r3
 8008a02:	d3b7      	bcc.n	8008974 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a0a:	691b      	ldr	r3, [r3, #16]
 8008a0c:	68fa      	ldr	r2, [r7, #12]
 8008a0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008a12:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008a16:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008a24:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d105      	bne.n	8008a38 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	699b      	ldr	r3, [r3, #24]
 8008a30:	f043 0210 	orr.w	r2, r3, #16
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	699a      	ldr	r2, [r3, #24]
 8008a3c:	4b0e      	ldr	r3, [pc, #56]	; (8008a78 <USB_DevInit+0x2b4>)
 8008a3e:	4313      	orrs	r3, r2
 8008a40:	687a      	ldr	r2, [r7, #4]
 8008a42:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008a44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d005      	beq.n	8008a56 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	699b      	ldr	r3, [r3, #24]
 8008a4e:	f043 0208 	orr.w	r2, r3, #8
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008a56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a58:	2b01      	cmp	r3, #1
 8008a5a:	d105      	bne.n	8008a68 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	699a      	ldr	r2, [r3, #24]
 8008a60:	4b06      	ldr	r3, [pc, #24]	; (8008a7c <USB_DevInit+0x2b8>)
 8008a62:	4313      	orrs	r3, r2
 8008a64:	687a      	ldr	r2, [r7, #4]
 8008a66:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008a68:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	3718      	adds	r7, #24
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008a74:	b004      	add	sp, #16
 8008a76:	4770      	bx	lr
 8008a78:	803c3800 	.word	0x803c3800
 8008a7c:	40000004 	.word	0x40000004

08008a80 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008a80:	b480      	push	{r7}
 8008a82:	b085      	sub	sp, #20
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
 8008a88:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	3301      	adds	r3, #1
 8008a92:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	4a13      	ldr	r2, [pc, #76]	; (8008ae4 <USB_FlushTxFifo+0x64>)
 8008a98:	4293      	cmp	r3, r2
 8008a9a:	d901      	bls.n	8008aa0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008a9c:	2303      	movs	r3, #3
 8008a9e:	e01b      	b.n	8008ad8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	691b      	ldr	r3, [r3, #16]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	daf2      	bge.n	8008a8e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008aac:	683b      	ldr	r3, [r7, #0]
 8008aae:	019b      	lsls	r3, r3, #6
 8008ab0:	f043 0220 	orr.w	r2, r3, #32
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	3301      	adds	r3, #1
 8008abc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	4a08      	ldr	r2, [pc, #32]	; (8008ae4 <USB_FlushTxFifo+0x64>)
 8008ac2:	4293      	cmp	r3, r2
 8008ac4:	d901      	bls.n	8008aca <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008ac6:	2303      	movs	r3, #3
 8008ac8:	e006      	b.n	8008ad8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	691b      	ldr	r3, [r3, #16]
 8008ace:	f003 0320 	and.w	r3, r3, #32
 8008ad2:	2b20      	cmp	r3, #32
 8008ad4:	d0f0      	beq.n	8008ab8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008ad6:	2300      	movs	r3, #0
}
 8008ad8:	4618      	mov	r0, r3
 8008ada:	3714      	adds	r7, #20
 8008adc:	46bd      	mov	sp, r7
 8008ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae2:	4770      	bx	lr
 8008ae4:	00030d40 	.word	0x00030d40

08008ae8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008ae8:	b480      	push	{r7}
 8008aea:	b085      	sub	sp, #20
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008af0:	2300      	movs	r3, #0
 8008af2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	3301      	adds	r3, #1
 8008af8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	4a11      	ldr	r2, [pc, #68]	; (8008b44 <USB_FlushRxFifo+0x5c>)
 8008afe:	4293      	cmp	r3, r2
 8008b00:	d901      	bls.n	8008b06 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008b02:	2303      	movs	r3, #3
 8008b04:	e018      	b.n	8008b38 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	691b      	ldr	r3, [r3, #16]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	daf2      	bge.n	8008af4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008b0e:	2300      	movs	r3, #0
 8008b10:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	2210      	movs	r2, #16
 8008b16:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	3301      	adds	r3, #1
 8008b1c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	4a08      	ldr	r2, [pc, #32]	; (8008b44 <USB_FlushRxFifo+0x5c>)
 8008b22:	4293      	cmp	r3, r2
 8008b24:	d901      	bls.n	8008b2a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008b26:	2303      	movs	r3, #3
 8008b28:	e006      	b.n	8008b38 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	691b      	ldr	r3, [r3, #16]
 8008b2e:	f003 0310 	and.w	r3, r3, #16
 8008b32:	2b10      	cmp	r3, #16
 8008b34:	d0f0      	beq.n	8008b18 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008b36:	2300      	movs	r3, #0
}
 8008b38:	4618      	mov	r0, r3
 8008b3a:	3714      	adds	r7, #20
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b42:	4770      	bx	lr
 8008b44:	00030d40 	.word	0x00030d40

08008b48 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008b48:	b480      	push	{r7}
 8008b4a:	b085      	sub	sp, #20
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
 8008b50:	460b      	mov	r3, r1
 8008b52:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b5e:	681a      	ldr	r2, [r3, #0]
 8008b60:	78fb      	ldrb	r3, [r7, #3]
 8008b62:	68f9      	ldr	r1, [r7, #12]
 8008b64:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008b68:	4313      	orrs	r3, r2
 8008b6a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008b6c:	2300      	movs	r3, #0
}
 8008b6e:	4618      	mov	r0, r3
 8008b70:	3714      	adds	r7, #20
 8008b72:	46bd      	mov	sp, r7
 8008b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b78:	4770      	bx	lr

08008b7a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008b7a:	b480      	push	{r7}
 8008b7c:	b087      	sub	sp, #28
 8008b7e:	af00      	add	r7, sp, #0
 8008b80:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008b86:	693b      	ldr	r3, [r7, #16]
 8008b88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b8c:	689b      	ldr	r3, [r3, #8]
 8008b8e:	f003 0306 	and.w	r3, r3, #6
 8008b92:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d102      	bne.n	8008ba0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	75fb      	strb	r3, [r7, #23]
 8008b9e:	e00a      	b.n	8008bb6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	2b02      	cmp	r3, #2
 8008ba4:	d002      	beq.n	8008bac <USB_GetDevSpeed+0x32>
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	2b06      	cmp	r3, #6
 8008baa:	d102      	bne.n	8008bb2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008bac:	2302      	movs	r3, #2
 8008bae:	75fb      	strb	r3, [r7, #23]
 8008bb0:	e001      	b.n	8008bb6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008bb2:	230f      	movs	r3, #15
 8008bb4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008bb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8008bb8:	4618      	mov	r0, r3
 8008bba:	371c      	adds	r7, #28
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc2:	4770      	bx	lr

08008bc4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008bc4:	b480      	push	{r7}
 8008bc6:	b085      	sub	sp, #20
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
 8008bcc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008bd2:	683b      	ldr	r3, [r7, #0]
 8008bd4:	781b      	ldrb	r3, [r3, #0]
 8008bd6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	785b      	ldrb	r3, [r3, #1]
 8008bdc:	2b01      	cmp	r3, #1
 8008bde:	d139      	bne.n	8008c54 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008be6:	69da      	ldr	r2, [r3, #28]
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	781b      	ldrb	r3, [r3, #0]
 8008bec:	f003 030f 	and.w	r3, r3, #15
 8008bf0:	2101      	movs	r1, #1
 8008bf2:	fa01 f303 	lsl.w	r3, r1, r3
 8008bf6:	b29b      	uxth	r3, r3
 8008bf8:	68f9      	ldr	r1, [r7, #12]
 8008bfa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008bfe:	4313      	orrs	r3, r2
 8008c00:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008c02:	68bb      	ldr	r3, [r7, #8]
 8008c04:	015a      	lsls	r2, r3, #5
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	4413      	add	r3, r2
 8008c0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d153      	bne.n	8008cc0 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008c18:	68bb      	ldr	r3, [r7, #8]
 8008c1a:	015a      	lsls	r2, r3, #5
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	4413      	add	r3, r2
 8008c20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c24:	681a      	ldr	r2, [r3, #0]
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	689b      	ldr	r3, [r3, #8]
 8008c2a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008c2e:	683b      	ldr	r3, [r7, #0]
 8008c30:	791b      	ldrb	r3, [r3, #4]
 8008c32:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008c34:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008c36:	68bb      	ldr	r3, [r7, #8]
 8008c38:	059b      	lsls	r3, r3, #22
 8008c3a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008c3c:	431a      	orrs	r2, r3
 8008c3e:	68bb      	ldr	r3, [r7, #8]
 8008c40:	0159      	lsls	r1, r3, #5
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	440b      	add	r3, r1
 8008c46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c4a:	4619      	mov	r1, r3
 8008c4c:	4b20      	ldr	r3, [pc, #128]	; (8008cd0 <USB_ActivateEndpoint+0x10c>)
 8008c4e:	4313      	orrs	r3, r2
 8008c50:	600b      	str	r3, [r1, #0]
 8008c52:	e035      	b.n	8008cc0 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c5a:	69da      	ldr	r2, [r3, #28]
 8008c5c:	683b      	ldr	r3, [r7, #0]
 8008c5e:	781b      	ldrb	r3, [r3, #0]
 8008c60:	f003 030f 	and.w	r3, r3, #15
 8008c64:	2101      	movs	r1, #1
 8008c66:	fa01 f303 	lsl.w	r3, r1, r3
 8008c6a:	041b      	lsls	r3, r3, #16
 8008c6c:	68f9      	ldr	r1, [r7, #12]
 8008c6e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008c72:	4313      	orrs	r3, r2
 8008c74:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008c76:	68bb      	ldr	r3, [r7, #8]
 8008c78:	015a      	lsls	r2, r3, #5
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	4413      	add	r3, r2
 8008c7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d119      	bne.n	8008cc0 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008c8c:	68bb      	ldr	r3, [r7, #8]
 8008c8e:	015a      	lsls	r2, r3, #5
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	4413      	add	r3, r2
 8008c94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c98:	681a      	ldr	r2, [r3, #0]
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	689b      	ldr	r3, [r3, #8]
 8008c9e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008ca2:	683b      	ldr	r3, [r7, #0]
 8008ca4:	791b      	ldrb	r3, [r3, #4]
 8008ca6:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008ca8:	430b      	orrs	r3, r1
 8008caa:	431a      	orrs	r2, r3
 8008cac:	68bb      	ldr	r3, [r7, #8]
 8008cae:	0159      	lsls	r1, r3, #5
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	440b      	add	r3, r1
 8008cb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cb8:	4619      	mov	r1, r3
 8008cba:	4b05      	ldr	r3, [pc, #20]	; (8008cd0 <USB_ActivateEndpoint+0x10c>)
 8008cbc:	4313      	orrs	r3, r2
 8008cbe:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008cc0:	2300      	movs	r3, #0
}
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	3714      	adds	r7, #20
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ccc:	4770      	bx	lr
 8008cce:	bf00      	nop
 8008cd0:	10008000 	.word	0x10008000

08008cd4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008cd4:	b480      	push	{r7}
 8008cd6:	b085      	sub	sp, #20
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
 8008cdc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008ce2:	683b      	ldr	r3, [r7, #0]
 8008ce4:	781b      	ldrb	r3, [r3, #0]
 8008ce6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008ce8:	683b      	ldr	r3, [r7, #0]
 8008cea:	785b      	ldrb	r3, [r3, #1]
 8008cec:	2b01      	cmp	r3, #1
 8008cee:	d161      	bne.n	8008db4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008cf0:	68bb      	ldr	r3, [r7, #8]
 8008cf2:	015a      	lsls	r2, r3, #5
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	4413      	add	r3, r2
 8008cf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008d02:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008d06:	d11f      	bne.n	8008d48 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008d08:	68bb      	ldr	r3, [r7, #8]
 8008d0a:	015a      	lsls	r2, r3, #5
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	4413      	add	r3, r2
 8008d10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	68ba      	ldr	r2, [r7, #8]
 8008d18:	0151      	lsls	r1, r2, #5
 8008d1a:	68fa      	ldr	r2, [r7, #12]
 8008d1c:	440a      	add	r2, r1
 8008d1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d22:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008d26:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008d28:	68bb      	ldr	r3, [r7, #8]
 8008d2a:	015a      	lsls	r2, r3, #5
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	4413      	add	r3, r2
 8008d30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	68ba      	ldr	r2, [r7, #8]
 8008d38:	0151      	lsls	r1, r2, #5
 8008d3a:	68fa      	ldr	r2, [r7, #12]
 8008d3c:	440a      	add	r2, r1
 8008d3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d42:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008d46:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008d50:	683b      	ldr	r3, [r7, #0]
 8008d52:	781b      	ldrb	r3, [r3, #0]
 8008d54:	f003 030f 	and.w	r3, r3, #15
 8008d58:	2101      	movs	r1, #1
 8008d5a:	fa01 f303 	lsl.w	r3, r1, r3
 8008d5e:	b29b      	uxth	r3, r3
 8008d60:	43db      	mvns	r3, r3
 8008d62:	68f9      	ldr	r1, [r7, #12]
 8008d64:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008d68:	4013      	ands	r3, r2
 8008d6a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d72:	69da      	ldr	r2, [r3, #28]
 8008d74:	683b      	ldr	r3, [r7, #0]
 8008d76:	781b      	ldrb	r3, [r3, #0]
 8008d78:	f003 030f 	and.w	r3, r3, #15
 8008d7c:	2101      	movs	r1, #1
 8008d7e:	fa01 f303 	lsl.w	r3, r1, r3
 8008d82:	b29b      	uxth	r3, r3
 8008d84:	43db      	mvns	r3, r3
 8008d86:	68f9      	ldr	r1, [r7, #12]
 8008d88:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008d8c:	4013      	ands	r3, r2
 8008d8e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008d90:	68bb      	ldr	r3, [r7, #8]
 8008d92:	015a      	lsls	r2, r3, #5
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	4413      	add	r3, r2
 8008d98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d9c:	681a      	ldr	r2, [r3, #0]
 8008d9e:	68bb      	ldr	r3, [r7, #8]
 8008da0:	0159      	lsls	r1, r3, #5
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	440b      	add	r3, r1
 8008da6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008daa:	4619      	mov	r1, r3
 8008dac:	4b35      	ldr	r3, [pc, #212]	; (8008e84 <USB_DeactivateEndpoint+0x1b0>)
 8008dae:	4013      	ands	r3, r2
 8008db0:	600b      	str	r3, [r1, #0]
 8008db2:	e060      	b.n	8008e76 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008db4:	68bb      	ldr	r3, [r7, #8]
 8008db6:	015a      	lsls	r2, r3, #5
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	4413      	add	r3, r2
 8008dbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008dc6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008dca:	d11f      	bne.n	8008e0c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008dcc:	68bb      	ldr	r3, [r7, #8]
 8008dce:	015a      	lsls	r2, r3, #5
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	4413      	add	r3, r2
 8008dd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	68ba      	ldr	r2, [r7, #8]
 8008ddc:	0151      	lsls	r1, r2, #5
 8008dde:	68fa      	ldr	r2, [r7, #12]
 8008de0:	440a      	add	r2, r1
 8008de2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008de6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008dea:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008dec:	68bb      	ldr	r3, [r7, #8]
 8008dee:	015a      	lsls	r2, r3, #5
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	4413      	add	r3, r2
 8008df4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	68ba      	ldr	r2, [r7, #8]
 8008dfc:	0151      	lsls	r1, r2, #5
 8008dfe:	68fa      	ldr	r2, [r7, #12]
 8008e00:	440a      	add	r2, r1
 8008e02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e06:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008e0a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	781b      	ldrb	r3, [r3, #0]
 8008e18:	f003 030f 	and.w	r3, r3, #15
 8008e1c:	2101      	movs	r1, #1
 8008e1e:	fa01 f303 	lsl.w	r3, r1, r3
 8008e22:	041b      	lsls	r3, r3, #16
 8008e24:	43db      	mvns	r3, r3
 8008e26:	68f9      	ldr	r1, [r7, #12]
 8008e28:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008e2c:	4013      	ands	r3, r2
 8008e2e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e36:	69da      	ldr	r2, [r3, #28]
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	781b      	ldrb	r3, [r3, #0]
 8008e3c:	f003 030f 	and.w	r3, r3, #15
 8008e40:	2101      	movs	r1, #1
 8008e42:	fa01 f303 	lsl.w	r3, r1, r3
 8008e46:	041b      	lsls	r3, r3, #16
 8008e48:	43db      	mvns	r3, r3
 8008e4a:	68f9      	ldr	r1, [r7, #12]
 8008e4c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008e50:	4013      	ands	r3, r2
 8008e52:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008e54:	68bb      	ldr	r3, [r7, #8]
 8008e56:	015a      	lsls	r2, r3, #5
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	4413      	add	r3, r2
 8008e5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e60:	681a      	ldr	r2, [r3, #0]
 8008e62:	68bb      	ldr	r3, [r7, #8]
 8008e64:	0159      	lsls	r1, r3, #5
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	440b      	add	r3, r1
 8008e6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e6e:	4619      	mov	r1, r3
 8008e70:	4b05      	ldr	r3, [pc, #20]	; (8008e88 <USB_DeactivateEndpoint+0x1b4>)
 8008e72:	4013      	ands	r3, r2
 8008e74:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008e76:	2300      	movs	r3, #0
}
 8008e78:	4618      	mov	r0, r3
 8008e7a:	3714      	adds	r7, #20
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e82:	4770      	bx	lr
 8008e84:	ec337800 	.word	0xec337800
 8008e88:	eff37800 	.word	0xeff37800

08008e8c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b08a      	sub	sp, #40	; 0x28
 8008e90:	af02      	add	r7, sp, #8
 8008e92:	60f8      	str	r0, [r7, #12]
 8008e94:	60b9      	str	r1, [r7, #8]
 8008e96:	4613      	mov	r3, r2
 8008e98:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8008e9e:	68bb      	ldr	r3, [r7, #8]
 8008ea0:	781b      	ldrb	r3, [r3, #0]
 8008ea2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008ea4:	68bb      	ldr	r3, [r7, #8]
 8008ea6:	785b      	ldrb	r3, [r3, #1]
 8008ea8:	2b01      	cmp	r3, #1
 8008eaa:	f040 8181 	bne.w	80091b0 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008eae:	68bb      	ldr	r3, [r7, #8]
 8008eb0:	691b      	ldr	r3, [r3, #16]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d132      	bne.n	8008f1c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008eb6:	69bb      	ldr	r3, [r7, #24]
 8008eb8:	015a      	lsls	r2, r3, #5
 8008eba:	69fb      	ldr	r3, [r7, #28]
 8008ebc:	4413      	add	r3, r2
 8008ebe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ec2:	691a      	ldr	r2, [r3, #16]
 8008ec4:	69bb      	ldr	r3, [r7, #24]
 8008ec6:	0159      	lsls	r1, r3, #5
 8008ec8:	69fb      	ldr	r3, [r7, #28]
 8008eca:	440b      	add	r3, r1
 8008ecc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ed0:	4619      	mov	r1, r3
 8008ed2:	4ba5      	ldr	r3, [pc, #660]	; (8009168 <USB_EPStartXfer+0x2dc>)
 8008ed4:	4013      	ands	r3, r2
 8008ed6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008ed8:	69bb      	ldr	r3, [r7, #24]
 8008eda:	015a      	lsls	r2, r3, #5
 8008edc:	69fb      	ldr	r3, [r7, #28]
 8008ede:	4413      	add	r3, r2
 8008ee0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ee4:	691b      	ldr	r3, [r3, #16]
 8008ee6:	69ba      	ldr	r2, [r7, #24]
 8008ee8:	0151      	lsls	r1, r2, #5
 8008eea:	69fa      	ldr	r2, [r7, #28]
 8008eec:	440a      	add	r2, r1
 8008eee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ef2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008ef6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008ef8:	69bb      	ldr	r3, [r7, #24]
 8008efa:	015a      	lsls	r2, r3, #5
 8008efc:	69fb      	ldr	r3, [r7, #28]
 8008efe:	4413      	add	r3, r2
 8008f00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f04:	691a      	ldr	r2, [r3, #16]
 8008f06:	69bb      	ldr	r3, [r7, #24]
 8008f08:	0159      	lsls	r1, r3, #5
 8008f0a:	69fb      	ldr	r3, [r7, #28]
 8008f0c:	440b      	add	r3, r1
 8008f0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f12:	4619      	mov	r1, r3
 8008f14:	4b95      	ldr	r3, [pc, #596]	; (800916c <USB_EPStartXfer+0x2e0>)
 8008f16:	4013      	ands	r3, r2
 8008f18:	610b      	str	r3, [r1, #16]
 8008f1a:	e092      	b.n	8009042 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008f1c:	69bb      	ldr	r3, [r7, #24]
 8008f1e:	015a      	lsls	r2, r3, #5
 8008f20:	69fb      	ldr	r3, [r7, #28]
 8008f22:	4413      	add	r3, r2
 8008f24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f28:	691a      	ldr	r2, [r3, #16]
 8008f2a:	69bb      	ldr	r3, [r7, #24]
 8008f2c:	0159      	lsls	r1, r3, #5
 8008f2e:	69fb      	ldr	r3, [r7, #28]
 8008f30:	440b      	add	r3, r1
 8008f32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f36:	4619      	mov	r1, r3
 8008f38:	4b8c      	ldr	r3, [pc, #560]	; (800916c <USB_EPStartXfer+0x2e0>)
 8008f3a:	4013      	ands	r3, r2
 8008f3c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008f3e:	69bb      	ldr	r3, [r7, #24]
 8008f40:	015a      	lsls	r2, r3, #5
 8008f42:	69fb      	ldr	r3, [r7, #28]
 8008f44:	4413      	add	r3, r2
 8008f46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f4a:	691a      	ldr	r2, [r3, #16]
 8008f4c:	69bb      	ldr	r3, [r7, #24]
 8008f4e:	0159      	lsls	r1, r3, #5
 8008f50:	69fb      	ldr	r3, [r7, #28]
 8008f52:	440b      	add	r3, r1
 8008f54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f58:	4619      	mov	r1, r3
 8008f5a:	4b83      	ldr	r3, [pc, #524]	; (8009168 <USB_EPStartXfer+0x2dc>)
 8008f5c:	4013      	ands	r3, r2
 8008f5e:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8008f60:	69bb      	ldr	r3, [r7, #24]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d11a      	bne.n	8008f9c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8008f66:	68bb      	ldr	r3, [r7, #8]
 8008f68:	691a      	ldr	r2, [r3, #16]
 8008f6a:	68bb      	ldr	r3, [r7, #8]
 8008f6c:	689b      	ldr	r3, [r3, #8]
 8008f6e:	429a      	cmp	r2, r3
 8008f70:	d903      	bls.n	8008f7a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8008f72:	68bb      	ldr	r3, [r7, #8]
 8008f74:	689a      	ldr	r2, [r3, #8]
 8008f76:	68bb      	ldr	r3, [r7, #8]
 8008f78:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008f7a:	69bb      	ldr	r3, [r7, #24]
 8008f7c:	015a      	lsls	r2, r3, #5
 8008f7e:	69fb      	ldr	r3, [r7, #28]
 8008f80:	4413      	add	r3, r2
 8008f82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f86:	691b      	ldr	r3, [r3, #16]
 8008f88:	69ba      	ldr	r2, [r7, #24]
 8008f8a:	0151      	lsls	r1, r2, #5
 8008f8c:	69fa      	ldr	r2, [r7, #28]
 8008f8e:	440a      	add	r2, r1
 8008f90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f94:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008f98:	6113      	str	r3, [r2, #16]
 8008f9a:	e01b      	b.n	8008fd4 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008f9c:	69bb      	ldr	r3, [r7, #24]
 8008f9e:	015a      	lsls	r2, r3, #5
 8008fa0:	69fb      	ldr	r3, [r7, #28]
 8008fa2:	4413      	add	r3, r2
 8008fa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fa8:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8008faa:	68bb      	ldr	r3, [r7, #8]
 8008fac:	6919      	ldr	r1, [r3, #16]
 8008fae:	68bb      	ldr	r3, [r7, #8]
 8008fb0:	689b      	ldr	r3, [r3, #8]
 8008fb2:	440b      	add	r3, r1
 8008fb4:	1e59      	subs	r1, r3, #1
 8008fb6:	68bb      	ldr	r3, [r7, #8]
 8008fb8:	689b      	ldr	r3, [r3, #8]
 8008fba:	fbb1 f3f3 	udiv	r3, r1, r3
 8008fbe:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008fc0:	4b6b      	ldr	r3, [pc, #428]	; (8009170 <USB_EPStartXfer+0x2e4>)
 8008fc2:	400b      	ands	r3, r1
 8008fc4:	69b9      	ldr	r1, [r7, #24]
 8008fc6:	0148      	lsls	r0, r1, #5
 8008fc8:	69f9      	ldr	r1, [r7, #28]
 8008fca:	4401      	add	r1, r0
 8008fcc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008fd0:	4313      	orrs	r3, r2
 8008fd2:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008fd4:	69bb      	ldr	r3, [r7, #24]
 8008fd6:	015a      	lsls	r2, r3, #5
 8008fd8:	69fb      	ldr	r3, [r7, #28]
 8008fda:	4413      	add	r3, r2
 8008fdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fe0:	691a      	ldr	r2, [r3, #16]
 8008fe2:	68bb      	ldr	r3, [r7, #8]
 8008fe4:	691b      	ldr	r3, [r3, #16]
 8008fe6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008fea:	69b9      	ldr	r1, [r7, #24]
 8008fec:	0148      	lsls	r0, r1, #5
 8008fee:	69f9      	ldr	r1, [r7, #28]
 8008ff0:	4401      	add	r1, r0
 8008ff2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008ff6:	4313      	orrs	r3, r2
 8008ff8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8008ffa:	68bb      	ldr	r3, [r7, #8]
 8008ffc:	791b      	ldrb	r3, [r3, #4]
 8008ffe:	2b01      	cmp	r3, #1
 8009000:	d11f      	bne.n	8009042 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8009002:	69bb      	ldr	r3, [r7, #24]
 8009004:	015a      	lsls	r2, r3, #5
 8009006:	69fb      	ldr	r3, [r7, #28]
 8009008:	4413      	add	r3, r2
 800900a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800900e:	691b      	ldr	r3, [r3, #16]
 8009010:	69ba      	ldr	r2, [r7, #24]
 8009012:	0151      	lsls	r1, r2, #5
 8009014:	69fa      	ldr	r2, [r7, #28]
 8009016:	440a      	add	r2, r1
 8009018:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800901c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8009020:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8009022:	69bb      	ldr	r3, [r7, #24]
 8009024:	015a      	lsls	r2, r3, #5
 8009026:	69fb      	ldr	r3, [r7, #28]
 8009028:	4413      	add	r3, r2
 800902a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800902e:	691b      	ldr	r3, [r3, #16]
 8009030:	69ba      	ldr	r2, [r7, #24]
 8009032:	0151      	lsls	r1, r2, #5
 8009034:	69fa      	ldr	r2, [r7, #28]
 8009036:	440a      	add	r2, r1
 8009038:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800903c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009040:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8009042:	79fb      	ldrb	r3, [r7, #7]
 8009044:	2b01      	cmp	r3, #1
 8009046:	d14b      	bne.n	80090e0 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009048:	68bb      	ldr	r3, [r7, #8]
 800904a:	69db      	ldr	r3, [r3, #28]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d009      	beq.n	8009064 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009050:	69bb      	ldr	r3, [r7, #24]
 8009052:	015a      	lsls	r2, r3, #5
 8009054:	69fb      	ldr	r3, [r7, #28]
 8009056:	4413      	add	r3, r2
 8009058:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800905c:	461a      	mov	r2, r3
 800905e:	68bb      	ldr	r3, [r7, #8]
 8009060:	69db      	ldr	r3, [r3, #28]
 8009062:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009064:	68bb      	ldr	r3, [r7, #8]
 8009066:	791b      	ldrb	r3, [r3, #4]
 8009068:	2b01      	cmp	r3, #1
 800906a:	d128      	bne.n	80090be <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800906c:	69fb      	ldr	r3, [r7, #28]
 800906e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009072:	689b      	ldr	r3, [r3, #8]
 8009074:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009078:	2b00      	cmp	r3, #0
 800907a:	d110      	bne.n	800909e <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800907c:	69bb      	ldr	r3, [r7, #24]
 800907e:	015a      	lsls	r2, r3, #5
 8009080:	69fb      	ldr	r3, [r7, #28]
 8009082:	4413      	add	r3, r2
 8009084:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	69ba      	ldr	r2, [r7, #24]
 800908c:	0151      	lsls	r1, r2, #5
 800908e:	69fa      	ldr	r2, [r7, #28]
 8009090:	440a      	add	r2, r1
 8009092:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009096:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800909a:	6013      	str	r3, [r2, #0]
 800909c:	e00f      	b.n	80090be <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800909e:	69bb      	ldr	r3, [r7, #24]
 80090a0:	015a      	lsls	r2, r3, #5
 80090a2:	69fb      	ldr	r3, [r7, #28]
 80090a4:	4413      	add	r3, r2
 80090a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	69ba      	ldr	r2, [r7, #24]
 80090ae:	0151      	lsls	r1, r2, #5
 80090b0:	69fa      	ldr	r2, [r7, #28]
 80090b2:	440a      	add	r2, r1
 80090b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80090b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80090bc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80090be:	69bb      	ldr	r3, [r7, #24]
 80090c0:	015a      	lsls	r2, r3, #5
 80090c2:	69fb      	ldr	r3, [r7, #28]
 80090c4:	4413      	add	r3, r2
 80090c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	69ba      	ldr	r2, [r7, #24]
 80090ce:	0151      	lsls	r1, r2, #5
 80090d0:	69fa      	ldr	r2, [r7, #28]
 80090d2:	440a      	add	r2, r1
 80090d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80090d8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80090dc:	6013      	str	r3, [r2, #0]
 80090de:	e16a      	b.n	80093b6 <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80090e0:	69bb      	ldr	r3, [r7, #24]
 80090e2:	015a      	lsls	r2, r3, #5
 80090e4:	69fb      	ldr	r3, [r7, #28]
 80090e6:	4413      	add	r3, r2
 80090e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	69ba      	ldr	r2, [r7, #24]
 80090f0:	0151      	lsls	r1, r2, #5
 80090f2:	69fa      	ldr	r2, [r7, #28]
 80090f4:	440a      	add	r2, r1
 80090f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80090fa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80090fe:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009100:	68bb      	ldr	r3, [r7, #8]
 8009102:	791b      	ldrb	r3, [r3, #4]
 8009104:	2b01      	cmp	r3, #1
 8009106:	d015      	beq.n	8009134 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8009108:	68bb      	ldr	r3, [r7, #8]
 800910a:	691b      	ldr	r3, [r3, #16]
 800910c:	2b00      	cmp	r3, #0
 800910e:	f000 8152 	beq.w	80093b6 <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009112:	69fb      	ldr	r3, [r7, #28]
 8009114:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009118:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800911a:	68bb      	ldr	r3, [r7, #8]
 800911c:	781b      	ldrb	r3, [r3, #0]
 800911e:	f003 030f 	and.w	r3, r3, #15
 8009122:	2101      	movs	r1, #1
 8009124:	fa01 f303 	lsl.w	r3, r1, r3
 8009128:	69f9      	ldr	r1, [r7, #28]
 800912a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800912e:	4313      	orrs	r3, r2
 8009130:	634b      	str	r3, [r1, #52]	; 0x34
 8009132:	e140      	b.n	80093b6 <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009134:	69fb      	ldr	r3, [r7, #28]
 8009136:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800913a:	689b      	ldr	r3, [r3, #8]
 800913c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009140:	2b00      	cmp	r3, #0
 8009142:	d117      	bne.n	8009174 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009144:	69bb      	ldr	r3, [r7, #24]
 8009146:	015a      	lsls	r2, r3, #5
 8009148:	69fb      	ldr	r3, [r7, #28]
 800914a:	4413      	add	r3, r2
 800914c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	69ba      	ldr	r2, [r7, #24]
 8009154:	0151      	lsls	r1, r2, #5
 8009156:	69fa      	ldr	r2, [r7, #28]
 8009158:	440a      	add	r2, r1
 800915a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800915e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009162:	6013      	str	r3, [r2, #0]
 8009164:	e016      	b.n	8009194 <USB_EPStartXfer+0x308>
 8009166:	bf00      	nop
 8009168:	e007ffff 	.word	0xe007ffff
 800916c:	fff80000 	.word	0xfff80000
 8009170:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009174:	69bb      	ldr	r3, [r7, #24]
 8009176:	015a      	lsls	r2, r3, #5
 8009178:	69fb      	ldr	r3, [r7, #28]
 800917a:	4413      	add	r3, r2
 800917c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	69ba      	ldr	r2, [r7, #24]
 8009184:	0151      	lsls	r1, r2, #5
 8009186:	69fa      	ldr	r2, [r7, #28]
 8009188:	440a      	add	r2, r1
 800918a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800918e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009192:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8009194:	68bb      	ldr	r3, [r7, #8]
 8009196:	68d9      	ldr	r1, [r3, #12]
 8009198:	68bb      	ldr	r3, [r7, #8]
 800919a:	781a      	ldrb	r2, [r3, #0]
 800919c:	68bb      	ldr	r3, [r7, #8]
 800919e:	691b      	ldr	r3, [r3, #16]
 80091a0:	b298      	uxth	r0, r3
 80091a2:	79fb      	ldrb	r3, [r7, #7]
 80091a4:	9300      	str	r3, [sp, #0]
 80091a6:	4603      	mov	r3, r0
 80091a8:	68f8      	ldr	r0, [r7, #12]
 80091aa:	f000 f9b9 	bl	8009520 <USB_WritePacket>
 80091ae:	e102      	b.n	80093b6 <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80091b0:	69bb      	ldr	r3, [r7, #24]
 80091b2:	015a      	lsls	r2, r3, #5
 80091b4:	69fb      	ldr	r3, [r7, #28]
 80091b6:	4413      	add	r3, r2
 80091b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091bc:	691a      	ldr	r2, [r3, #16]
 80091be:	69bb      	ldr	r3, [r7, #24]
 80091c0:	0159      	lsls	r1, r3, #5
 80091c2:	69fb      	ldr	r3, [r7, #28]
 80091c4:	440b      	add	r3, r1
 80091c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091ca:	4619      	mov	r1, r3
 80091cc:	4b7c      	ldr	r3, [pc, #496]	; (80093c0 <USB_EPStartXfer+0x534>)
 80091ce:	4013      	ands	r3, r2
 80091d0:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80091d2:	69bb      	ldr	r3, [r7, #24]
 80091d4:	015a      	lsls	r2, r3, #5
 80091d6:	69fb      	ldr	r3, [r7, #28]
 80091d8:	4413      	add	r3, r2
 80091da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091de:	691a      	ldr	r2, [r3, #16]
 80091e0:	69bb      	ldr	r3, [r7, #24]
 80091e2:	0159      	lsls	r1, r3, #5
 80091e4:	69fb      	ldr	r3, [r7, #28]
 80091e6:	440b      	add	r3, r1
 80091e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091ec:	4619      	mov	r1, r3
 80091ee:	4b75      	ldr	r3, [pc, #468]	; (80093c4 <USB_EPStartXfer+0x538>)
 80091f0:	4013      	ands	r3, r2
 80091f2:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 80091f4:	69bb      	ldr	r3, [r7, #24]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d12f      	bne.n	800925a <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 80091fa:	68bb      	ldr	r3, [r7, #8]
 80091fc:	691b      	ldr	r3, [r3, #16]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d003      	beq.n	800920a <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 8009202:	68bb      	ldr	r3, [r7, #8]
 8009204:	689a      	ldr	r2, [r3, #8]
 8009206:	68bb      	ldr	r3, [r7, #8]
 8009208:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800920a:	68bb      	ldr	r3, [r7, #8]
 800920c:	689a      	ldr	r2, [r3, #8]
 800920e:	68bb      	ldr	r3, [r7, #8]
 8009210:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8009212:	69bb      	ldr	r3, [r7, #24]
 8009214:	015a      	lsls	r2, r3, #5
 8009216:	69fb      	ldr	r3, [r7, #28]
 8009218:	4413      	add	r3, r2
 800921a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800921e:	691a      	ldr	r2, [r3, #16]
 8009220:	68bb      	ldr	r3, [r7, #8]
 8009222:	6a1b      	ldr	r3, [r3, #32]
 8009224:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009228:	69b9      	ldr	r1, [r7, #24]
 800922a:	0148      	lsls	r0, r1, #5
 800922c:	69f9      	ldr	r1, [r7, #28]
 800922e:	4401      	add	r1, r0
 8009230:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009234:	4313      	orrs	r3, r2
 8009236:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009238:	69bb      	ldr	r3, [r7, #24]
 800923a:	015a      	lsls	r2, r3, #5
 800923c:	69fb      	ldr	r3, [r7, #28]
 800923e:	4413      	add	r3, r2
 8009240:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009244:	691b      	ldr	r3, [r3, #16]
 8009246:	69ba      	ldr	r2, [r7, #24]
 8009248:	0151      	lsls	r1, r2, #5
 800924a:	69fa      	ldr	r2, [r7, #28]
 800924c:	440a      	add	r2, r1
 800924e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009252:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009256:	6113      	str	r3, [r2, #16]
 8009258:	e05f      	b.n	800931a <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800925a:	68bb      	ldr	r3, [r7, #8]
 800925c:	691b      	ldr	r3, [r3, #16]
 800925e:	2b00      	cmp	r3, #0
 8009260:	d123      	bne.n	80092aa <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009262:	69bb      	ldr	r3, [r7, #24]
 8009264:	015a      	lsls	r2, r3, #5
 8009266:	69fb      	ldr	r3, [r7, #28]
 8009268:	4413      	add	r3, r2
 800926a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800926e:	691a      	ldr	r2, [r3, #16]
 8009270:	68bb      	ldr	r3, [r7, #8]
 8009272:	689b      	ldr	r3, [r3, #8]
 8009274:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009278:	69b9      	ldr	r1, [r7, #24]
 800927a:	0148      	lsls	r0, r1, #5
 800927c:	69f9      	ldr	r1, [r7, #28]
 800927e:	4401      	add	r1, r0
 8009280:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009284:	4313      	orrs	r3, r2
 8009286:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009288:	69bb      	ldr	r3, [r7, #24]
 800928a:	015a      	lsls	r2, r3, #5
 800928c:	69fb      	ldr	r3, [r7, #28]
 800928e:	4413      	add	r3, r2
 8009290:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009294:	691b      	ldr	r3, [r3, #16]
 8009296:	69ba      	ldr	r2, [r7, #24]
 8009298:	0151      	lsls	r1, r2, #5
 800929a:	69fa      	ldr	r2, [r7, #28]
 800929c:	440a      	add	r2, r1
 800929e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80092a2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80092a6:	6113      	str	r3, [r2, #16]
 80092a8:	e037      	b.n	800931a <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80092aa:	68bb      	ldr	r3, [r7, #8]
 80092ac:	691a      	ldr	r2, [r3, #16]
 80092ae:	68bb      	ldr	r3, [r7, #8]
 80092b0:	689b      	ldr	r3, [r3, #8]
 80092b2:	4413      	add	r3, r2
 80092b4:	1e5a      	subs	r2, r3, #1
 80092b6:	68bb      	ldr	r3, [r7, #8]
 80092b8:	689b      	ldr	r3, [r3, #8]
 80092ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80092be:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80092c0:	68bb      	ldr	r3, [r7, #8]
 80092c2:	689b      	ldr	r3, [r3, #8]
 80092c4:	8afa      	ldrh	r2, [r7, #22]
 80092c6:	fb03 f202 	mul.w	r2, r3, r2
 80092ca:	68bb      	ldr	r3, [r7, #8]
 80092cc:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80092ce:	69bb      	ldr	r3, [r7, #24]
 80092d0:	015a      	lsls	r2, r3, #5
 80092d2:	69fb      	ldr	r3, [r7, #28]
 80092d4:	4413      	add	r3, r2
 80092d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092da:	691a      	ldr	r2, [r3, #16]
 80092dc:	8afb      	ldrh	r3, [r7, #22]
 80092de:	04d9      	lsls	r1, r3, #19
 80092e0:	4b39      	ldr	r3, [pc, #228]	; (80093c8 <USB_EPStartXfer+0x53c>)
 80092e2:	400b      	ands	r3, r1
 80092e4:	69b9      	ldr	r1, [r7, #24]
 80092e6:	0148      	lsls	r0, r1, #5
 80092e8:	69f9      	ldr	r1, [r7, #28]
 80092ea:	4401      	add	r1, r0
 80092ec:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80092f0:	4313      	orrs	r3, r2
 80092f2:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80092f4:	69bb      	ldr	r3, [r7, #24]
 80092f6:	015a      	lsls	r2, r3, #5
 80092f8:	69fb      	ldr	r3, [r7, #28]
 80092fa:	4413      	add	r3, r2
 80092fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009300:	691a      	ldr	r2, [r3, #16]
 8009302:	68bb      	ldr	r3, [r7, #8]
 8009304:	6a1b      	ldr	r3, [r3, #32]
 8009306:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800930a:	69b9      	ldr	r1, [r7, #24]
 800930c:	0148      	lsls	r0, r1, #5
 800930e:	69f9      	ldr	r1, [r7, #28]
 8009310:	4401      	add	r1, r0
 8009312:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009316:	4313      	orrs	r3, r2
 8009318:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800931a:	79fb      	ldrb	r3, [r7, #7]
 800931c:	2b01      	cmp	r3, #1
 800931e:	d10d      	bne.n	800933c <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009320:	68bb      	ldr	r3, [r7, #8]
 8009322:	68db      	ldr	r3, [r3, #12]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d009      	beq.n	800933c <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009328:	68bb      	ldr	r3, [r7, #8]
 800932a:	68d9      	ldr	r1, [r3, #12]
 800932c:	69bb      	ldr	r3, [r7, #24]
 800932e:	015a      	lsls	r2, r3, #5
 8009330:	69fb      	ldr	r3, [r7, #28]
 8009332:	4413      	add	r3, r2
 8009334:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009338:	460a      	mov	r2, r1
 800933a:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800933c:	68bb      	ldr	r3, [r7, #8]
 800933e:	791b      	ldrb	r3, [r3, #4]
 8009340:	2b01      	cmp	r3, #1
 8009342:	d128      	bne.n	8009396 <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009344:	69fb      	ldr	r3, [r7, #28]
 8009346:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800934a:	689b      	ldr	r3, [r3, #8]
 800934c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009350:	2b00      	cmp	r3, #0
 8009352:	d110      	bne.n	8009376 <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009354:	69bb      	ldr	r3, [r7, #24]
 8009356:	015a      	lsls	r2, r3, #5
 8009358:	69fb      	ldr	r3, [r7, #28]
 800935a:	4413      	add	r3, r2
 800935c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	69ba      	ldr	r2, [r7, #24]
 8009364:	0151      	lsls	r1, r2, #5
 8009366:	69fa      	ldr	r2, [r7, #28]
 8009368:	440a      	add	r2, r1
 800936a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800936e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009372:	6013      	str	r3, [r2, #0]
 8009374:	e00f      	b.n	8009396 <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009376:	69bb      	ldr	r3, [r7, #24]
 8009378:	015a      	lsls	r2, r3, #5
 800937a:	69fb      	ldr	r3, [r7, #28]
 800937c:	4413      	add	r3, r2
 800937e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	69ba      	ldr	r2, [r7, #24]
 8009386:	0151      	lsls	r1, r2, #5
 8009388:	69fa      	ldr	r2, [r7, #28]
 800938a:	440a      	add	r2, r1
 800938c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009390:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009394:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009396:	69bb      	ldr	r3, [r7, #24]
 8009398:	015a      	lsls	r2, r3, #5
 800939a:	69fb      	ldr	r3, [r7, #28]
 800939c:	4413      	add	r3, r2
 800939e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	69ba      	ldr	r2, [r7, #24]
 80093a6:	0151      	lsls	r1, r2, #5
 80093a8:	69fa      	ldr	r2, [r7, #28]
 80093aa:	440a      	add	r2, r1
 80093ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80093b0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80093b4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80093b6:	2300      	movs	r3, #0
}
 80093b8:	4618      	mov	r0, r3
 80093ba:	3720      	adds	r7, #32
 80093bc:	46bd      	mov	sp, r7
 80093be:	bd80      	pop	{r7, pc}
 80093c0:	fff80000 	.word	0xfff80000
 80093c4:	e007ffff 	.word	0xe007ffff
 80093c8:	1ff80000 	.word	0x1ff80000

080093cc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80093cc:	b480      	push	{r7}
 80093ce:	b087      	sub	sp, #28
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
 80093d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80093d6:	2300      	movs	r3, #0
 80093d8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80093da:	2300      	movs	r3, #0
 80093dc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80093e2:	683b      	ldr	r3, [r7, #0]
 80093e4:	785b      	ldrb	r3, [r3, #1]
 80093e6:	2b01      	cmp	r3, #1
 80093e8:	d14a      	bne.n	8009480 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80093ea:	683b      	ldr	r3, [r7, #0]
 80093ec:	781b      	ldrb	r3, [r3, #0]
 80093ee:	015a      	lsls	r2, r3, #5
 80093f0:	693b      	ldr	r3, [r7, #16]
 80093f2:	4413      	add	r3, r2
 80093f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80093fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009402:	f040 8086 	bne.w	8009512 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8009406:	683b      	ldr	r3, [r7, #0]
 8009408:	781b      	ldrb	r3, [r3, #0]
 800940a:	015a      	lsls	r2, r3, #5
 800940c:	693b      	ldr	r3, [r7, #16]
 800940e:	4413      	add	r3, r2
 8009410:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	683a      	ldr	r2, [r7, #0]
 8009418:	7812      	ldrb	r2, [r2, #0]
 800941a:	0151      	lsls	r1, r2, #5
 800941c:	693a      	ldr	r2, [r7, #16]
 800941e:	440a      	add	r2, r1
 8009420:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009424:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009428:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800942a:	683b      	ldr	r3, [r7, #0]
 800942c:	781b      	ldrb	r3, [r3, #0]
 800942e:	015a      	lsls	r2, r3, #5
 8009430:	693b      	ldr	r3, [r7, #16]
 8009432:	4413      	add	r3, r2
 8009434:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	683a      	ldr	r2, [r7, #0]
 800943c:	7812      	ldrb	r2, [r2, #0]
 800943e:	0151      	lsls	r1, r2, #5
 8009440:	693a      	ldr	r2, [r7, #16]
 8009442:	440a      	add	r2, r1
 8009444:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009448:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800944c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	3301      	adds	r3, #1
 8009452:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	f242 7210 	movw	r2, #10000	; 0x2710
 800945a:	4293      	cmp	r3, r2
 800945c:	d902      	bls.n	8009464 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800945e:	2301      	movs	r3, #1
 8009460:	75fb      	strb	r3, [r7, #23]
          break;
 8009462:	e056      	b.n	8009512 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8009464:	683b      	ldr	r3, [r7, #0]
 8009466:	781b      	ldrb	r3, [r3, #0]
 8009468:	015a      	lsls	r2, r3, #5
 800946a:	693b      	ldr	r3, [r7, #16]
 800946c:	4413      	add	r3, r2
 800946e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009478:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800947c:	d0e7      	beq.n	800944e <USB_EPStopXfer+0x82>
 800947e:	e048      	b.n	8009512 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009480:	683b      	ldr	r3, [r7, #0]
 8009482:	781b      	ldrb	r3, [r3, #0]
 8009484:	015a      	lsls	r2, r3, #5
 8009486:	693b      	ldr	r3, [r7, #16]
 8009488:	4413      	add	r3, r2
 800948a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009494:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009498:	d13b      	bne.n	8009512 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800949a:	683b      	ldr	r3, [r7, #0]
 800949c:	781b      	ldrb	r3, [r3, #0]
 800949e:	015a      	lsls	r2, r3, #5
 80094a0:	693b      	ldr	r3, [r7, #16]
 80094a2:	4413      	add	r3, r2
 80094a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	683a      	ldr	r2, [r7, #0]
 80094ac:	7812      	ldrb	r2, [r2, #0]
 80094ae:	0151      	lsls	r1, r2, #5
 80094b0:	693a      	ldr	r2, [r7, #16]
 80094b2:	440a      	add	r2, r1
 80094b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80094b8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80094bc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80094be:	683b      	ldr	r3, [r7, #0]
 80094c0:	781b      	ldrb	r3, [r3, #0]
 80094c2:	015a      	lsls	r2, r3, #5
 80094c4:	693b      	ldr	r3, [r7, #16]
 80094c6:	4413      	add	r3, r2
 80094c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	683a      	ldr	r2, [r7, #0]
 80094d0:	7812      	ldrb	r2, [r2, #0]
 80094d2:	0151      	lsls	r1, r2, #5
 80094d4:	693a      	ldr	r2, [r7, #16]
 80094d6:	440a      	add	r2, r1
 80094d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80094dc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80094e0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	3301      	adds	r3, #1
 80094e6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	f242 7210 	movw	r2, #10000	; 0x2710
 80094ee:	4293      	cmp	r3, r2
 80094f0:	d902      	bls.n	80094f8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80094f2:	2301      	movs	r3, #1
 80094f4:	75fb      	strb	r3, [r7, #23]
          break;
 80094f6:	e00c      	b.n	8009512 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80094f8:	683b      	ldr	r3, [r7, #0]
 80094fa:	781b      	ldrb	r3, [r3, #0]
 80094fc:	015a      	lsls	r2, r3, #5
 80094fe:	693b      	ldr	r3, [r7, #16]
 8009500:	4413      	add	r3, r2
 8009502:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800950c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009510:	d0e7      	beq.n	80094e2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8009512:	7dfb      	ldrb	r3, [r7, #23]
}
 8009514:	4618      	mov	r0, r3
 8009516:	371c      	adds	r7, #28
 8009518:	46bd      	mov	sp, r7
 800951a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951e:	4770      	bx	lr

08009520 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009520:	b480      	push	{r7}
 8009522:	b089      	sub	sp, #36	; 0x24
 8009524:	af00      	add	r7, sp, #0
 8009526:	60f8      	str	r0, [r7, #12]
 8009528:	60b9      	str	r1, [r7, #8]
 800952a:	4611      	mov	r1, r2
 800952c:	461a      	mov	r2, r3
 800952e:	460b      	mov	r3, r1
 8009530:	71fb      	strb	r3, [r7, #7]
 8009532:	4613      	mov	r3, r2
 8009534:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800953a:	68bb      	ldr	r3, [r7, #8]
 800953c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800953e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009542:	2b00      	cmp	r3, #0
 8009544:	d123      	bne.n	800958e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009546:	88bb      	ldrh	r3, [r7, #4]
 8009548:	3303      	adds	r3, #3
 800954a:	089b      	lsrs	r3, r3, #2
 800954c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800954e:	2300      	movs	r3, #0
 8009550:	61bb      	str	r3, [r7, #24]
 8009552:	e018      	b.n	8009586 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009554:	79fb      	ldrb	r3, [r7, #7]
 8009556:	031a      	lsls	r2, r3, #12
 8009558:	697b      	ldr	r3, [r7, #20]
 800955a:	4413      	add	r3, r2
 800955c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009560:	461a      	mov	r2, r3
 8009562:	69fb      	ldr	r3, [r7, #28]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009568:	69fb      	ldr	r3, [r7, #28]
 800956a:	3301      	adds	r3, #1
 800956c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800956e:	69fb      	ldr	r3, [r7, #28]
 8009570:	3301      	adds	r3, #1
 8009572:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009574:	69fb      	ldr	r3, [r7, #28]
 8009576:	3301      	adds	r3, #1
 8009578:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800957a:	69fb      	ldr	r3, [r7, #28]
 800957c:	3301      	adds	r3, #1
 800957e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009580:	69bb      	ldr	r3, [r7, #24]
 8009582:	3301      	adds	r3, #1
 8009584:	61bb      	str	r3, [r7, #24]
 8009586:	69ba      	ldr	r2, [r7, #24]
 8009588:	693b      	ldr	r3, [r7, #16]
 800958a:	429a      	cmp	r2, r3
 800958c:	d3e2      	bcc.n	8009554 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800958e:	2300      	movs	r3, #0
}
 8009590:	4618      	mov	r0, r3
 8009592:	3724      	adds	r7, #36	; 0x24
 8009594:	46bd      	mov	sp, r7
 8009596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959a:	4770      	bx	lr

0800959c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800959c:	b480      	push	{r7}
 800959e:	b08b      	sub	sp, #44	; 0x2c
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	60f8      	str	r0, [r7, #12]
 80095a4:	60b9      	str	r1, [r7, #8]
 80095a6:	4613      	mov	r3, r2
 80095a8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80095ae:	68bb      	ldr	r3, [r7, #8]
 80095b0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80095b2:	88fb      	ldrh	r3, [r7, #6]
 80095b4:	089b      	lsrs	r3, r3, #2
 80095b6:	b29b      	uxth	r3, r3
 80095b8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80095ba:	88fb      	ldrh	r3, [r7, #6]
 80095bc:	f003 0303 	and.w	r3, r3, #3
 80095c0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80095c2:	2300      	movs	r3, #0
 80095c4:	623b      	str	r3, [r7, #32]
 80095c6:	e014      	b.n	80095f2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80095c8:	69bb      	ldr	r3, [r7, #24]
 80095ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80095ce:	681a      	ldr	r2, [r3, #0]
 80095d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095d2:	601a      	str	r2, [r3, #0]
    pDest++;
 80095d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095d6:	3301      	adds	r3, #1
 80095d8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80095da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095dc:	3301      	adds	r3, #1
 80095de:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80095e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095e2:	3301      	adds	r3, #1
 80095e4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80095e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095e8:	3301      	adds	r3, #1
 80095ea:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80095ec:	6a3b      	ldr	r3, [r7, #32]
 80095ee:	3301      	adds	r3, #1
 80095f0:	623b      	str	r3, [r7, #32]
 80095f2:	6a3a      	ldr	r2, [r7, #32]
 80095f4:	697b      	ldr	r3, [r7, #20]
 80095f6:	429a      	cmp	r2, r3
 80095f8:	d3e6      	bcc.n	80095c8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80095fa:	8bfb      	ldrh	r3, [r7, #30]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d01e      	beq.n	800963e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009600:	2300      	movs	r3, #0
 8009602:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009604:	69bb      	ldr	r3, [r7, #24]
 8009606:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800960a:	461a      	mov	r2, r3
 800960c:	f107 0310 	add.w	r3, r7, #16
 8009610:	6812      	ldr	r2, [r2, #0]
 8009612:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009614:	693a      	ldr	r2, [r7, #16]
 8009616:	6a3b      	ldr	r3, [r7, #32]
 8009618:	b2db      	uxtb	r3, r3
 800961a:	00db      	lsls	r3, r3, #3
 800961c:	fa22 f303 	lsr.w	r3, r2, r3
 8009620:	b2da      	uxtb	r2, r3
 8009622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009624:	701a      	strb	r2, [r3, #0]
      i++;
 8009626:	6a3b      	ldr	r3, [r7, #32]
 8009628:	3301      	adds	r3, #1
 800962a:	623b      	str	r3, [r7, #32]
      pDest++;
 800962c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800962e:	3301      	adds	r3, #1
 8009630:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8009632:	8bfb      	ldrh	r3, [r7, #30]
 8009634:	3b01      	subs	r3, #1
 8009636:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009638:	8bfb      	ldrh	r3, [r7, #30]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d1ea      	bne.n	8009614 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800963e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009640:	4618      	mov	r0, r3
 8009642:	372c      	adds	r7, #44	; 0x2c
 8009644:	46bd      	mov	sp, r7
 8009646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964a:	4770      	bx	lr

0800964c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800964c:	b480      	push	{r7}
 800964e:	b085      	sub	sp, #20
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
 8009654:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800965a:	683b      	ldr	r3, [r7, #0]
 800965c:	781b      	ldrb	r3, [r3, #0]
 800965e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009660:	683b      	ldr	r3, [r7, #0]
 8009662:	785b      	ldrb	r3, [r3, #1]
 8009664:	2b01      	cmp	r3, #1
 8009666:	d12c      	bne.n	80096c2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009668:	68bb      	ldr	r3, [r7, #8]
 800966a:	015a      	lsls	r2, r3, #5
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	4413      	add	r3, r2
 8009670:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	2b00      	cmp	r3, #0
 8009678:	db12      	blt.n	80096a0 <USB_EPSetStall+0x54>
 800967a:	68bb      	ldr	r3, [r7, #8]
 800967c:	2b00      	cmp	r3, #0
 800967e:	d00f      	beq.n	80096a0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009680:	68bb      	ldr	r3, [r7, #8]
 8009682:	015a      	lsls	r2, r3, #5
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	4413      	add	r3, r2
 8009688:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	68ba      	ldr	r2, [r7, #8]
 8009690:	0151      	lsls	r1, r2, #5
 8009692:	68fa      	ldr	r2, [r7, #12]
 8009694:	440a      	add	r2, r1
 8009696:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800969a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800969e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80096a0:	68bb      	ldr	r3, [r7, #8]
 80096a2:	015a      	lsls	r2, r3, #5
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	4413      	add	r3, r2
 80096a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	68ba      	ldr	r2, [r7, #8]
 80096b0:	0151      	lsls	r1, r2, #5
 80096b2:	68fa      	ldr	r2, [r7, #12]
 80096b4:	440a      	add	r2, r1
 80096b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80096ba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80096be:	6013      	str	r3, [r2, #0]
 80096c0:	e02b      	b.n	800971a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80096c2:	68bb      	ldr	r3, [r7, #8]
 80096c4:	015a      	lsls	r2, r3, #5
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	4413      	add	r3, r2
 80096ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	db12      	blt.n	80096fa <USB_EPSetStall+0xae>
 80096d4:	68bb      	ldr	r3, [r7, #8]
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d00f      	beq.n	80096fa <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80096da:	68bb      	ldr	r3, [r7, #8]
 80096dc:	015a      	lsls	r2, r3, #5
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	4413      	add	r3, r2
 80096e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	68ba      	ldr	r2, [r7, #8]
 80096ea:	0151      	lsls	r1, r2, #5
 80096ec:	68fa      	ldr	r2, [r7, #12]
 80096ee:	440a      	add	r2, r1
 80096f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80096f4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80096f8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80096fa:	68bb      	ldr	r3, [r7, #8]
 80096fc:	015a      	lsls	r2, r3, #5
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	4413      	add	r3, r2
 8009702:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	68ba      	ldr	r2, [r7, #8]
 800970a:	0151      	lsls	r1, r2, #5
 800970c:	68fa      	ldr	r2, [r7, #12]
 800970e:	440a      	add	r2, r1
 8009710:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009714:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009718:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800971a:	2300      	movs	r3, #0
}
 800971c:	4618      	mov	r0, r3
 800971e:	3714      	adds	r7, #20
 8009720:	46bd      	mov	sp, r7
 8009722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009726:	4770      	bx	lr

08009728 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009728:	b480      	push	{r7}
 800972a:	b085      	sub	sp, #20
 800972c:	af00      	add	r7, sp, #0
 800972e:	6078      	str	r0, [r7, #4]
 8009730:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009736:	683b      	ldr	r3, [r7, #0]
 8009738:	781b      	ldrb	r3, [r3, #0]
 800973a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800973c:	683b      	ldr	r3, [r7, #0]
 800973e:	785b      	ldrb	r3, [r3, #1]
 8009740:	2b01      	cmp	r3, #1
 8009742:	d128      	bne.n	8009796 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009744:	68bb      	ldr	r3, [r7, #8]
 8009746:	015a      	lsls	r2, r3, #5
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	4413      	add	r3, r2
 800974c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	68ba      	ldr	r2, [r7, #8]
 8009754:	0151      	lsls	r1, r2, #5
 8009756:	68fa      	ldr	r2, [r7, #12]
 8009758:	440a      	add	r2, r1
 800975a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800975e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009762:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009764:	683b      	ldr	r3, [r7, #0]
 8009766:	791b      	ldrb	r3, [r3, #4]
 8009768:	2b03      	cmp	r3, #3
 800976a:	d003      	beq.n	8009774 <USB_EPClearStall+0x4c>
 800976c:	683b      	ldr	r3, [r7, #0]
 800976e:	791b      	ldrb	r3, [r3, #4]
 8009770:	2b02      	cmp	r3, #2
 8009772:	d138      	bne.n	80097e6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009774:	68bb      	ldr	r3, [r7, #8]
 8009776:	015a      	lsls	r2, r3, #5
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	4413      	add	r3, r2
 800977c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	68ba      	ldr	r2, [r7, #8]
 8009784:	0151      	lsls	r1, r2, #5
 8009786:	68fa      	ldr	r2, [r7, #12]
 8009788:	440a      	add	r2, r1
 800978a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800978e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009792:	6013      	str	r3, [r2, #0]
 8009794:	e027      	b.n	80097e6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009796:	68bb      	ldr	r3, [r7, #8]
 8009798:	015a      	lsls	r2, r3, #5
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	4413      	add	r3, r2
 800979e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	68ba      	ldr	r2, [r7, #8]
 80097a6:	0151      	lsls	r1, r2, #5
 80097a8:	68fa      	ldr	r2, [r7, #12]
 80097aa:	440a      	add	r2, r1
 80097ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80097b0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80097b4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80097b6:	683b      	ldr	r3, [r7, #0]
 80097b8:	791b      	ldrb	r3, [r3, #4]
 80097ba:	2b03      	cmp	r3, #3
 80097bc:	d003      	beq.n	80097c6 <USB_EPClearStall+0x9e>
 80097be:	683b      	ldr	r3, [r7, #0]
 80097c0:	791b      	ldrb	r3, [r3, #4]
 80097c2:	2b02      	cmp	r3, #2
 80097c4:	d10f      	bne.n	80097e6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80097c6:	68bb      	ldr	r3, [r7, #8]
 80097c8:	015a      	lsls	r2, r3, #5
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	4413      	add	r3, r2
 80097ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	68ba      	ldr	r2, [r7, #8]
 80097d6:	0151      	lsls	r1, r2, #5
 80097d8:	68fa      	ldr	r2, [r7, #12]
 80097da:	440a      	add	r2, r1
 80097dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80097e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80097e4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80097e6:	2300      	movs	r3, #0
}
 80097e8:	4618      	mov	r0, r3
 80097ea:	3714      	adds	r7, #20
 80097ec:	46bd      	mov	sp, r7
 80097ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f2:	4770      	bx	lr

080097f4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80097f4:	b480      	push	{r7}
 80097f6:	b085      	sub	sp, #20
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
 80097fc:	460b      	mov	r3, r1
 80097fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	68fa      	ldr	r2, [r7, #12]
 800980e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009812:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009816:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800981e:	681a      	ldr	r2, [r3, #0]
 8009820:	78fb      	ldrb	r3, [r7, #3]
 8009822:	011b      	lsls	r3, r3, #4
 8009824:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8009828:	68f9      	ldr	r1, [r7, #12]
 800982a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800982e:	4313      	orrs	r3, r2
 8009830:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009832:	2300      	movs	r3, #0
}
 8009834:	4618      	mov	r0, r3
 8009836:	3714      	adds	r7, #20
 8009838:	46bd      	mov	sp, r7
 800983a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983e:	4770      	bx	lr

08009840 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009840:	b480      	push	{r7}
 8009842:	b085      	sub	sp, #20
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	68fa      	ldr	r2, [r7, #12]
 8009856:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800985a:	f023 0303 	bic.w	r3, r3, #3
 800985e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009866:	685b      	ldr	r3, [r3, #4]
 8009868:	68fa      	ldr	r2, [r7, #12]
 800986a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800986e:	f023 0302 	bic.w	r3, r3, #2
 8009872:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009874:	2300      	movs	r3, #0
}
 8009876:	4618      	mov	r0, r3
 8009878:	3714      	adds	r7, #20
 800987a:	46bd      	mov	sp, r7
 800987c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009880:	4770      	bx	lr

08009882 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009882:	b480      	push	{r7}
 8009884:	b085      	sub	sp, #20
 8009886:	af00      	add	r7, sp, #0
 8009888:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	68fa      	ldr	r2, [r7, #12]
 8009898:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800989c:	f023 0303 	bic.w	r3, r3, #3
 80098a0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098a8:	685b      	ldr	r3, [r3, #4]
 80098aa:	68fa      	ldr	r2, [r7, #12]
 80098ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80098b0:	f043 0302 	orr.w	r3, r3, #2
 80098b4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80098b6:	2300      	movs	r3, #0
}
 80098b8:	4618      	mov	r0, r3
 80098ba:	3714      	adds	r7, #20
 80098bc:	46bd      	mov	sp, r7
 80098be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c2:	4770      	bx	lr

080098c4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80098c4:	b480      	push	{r7}
 80098c6:	b085      	sub	sp, #20
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	695b      	ldr	r3, [r3, #20]
 80098d0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	699b      	ldr	r3, [r3, #24]
 80098d6:	68fa      	ldr	r2, [r7, #12]
 80098d8:	4013      	ands	r3, r2
 80098da:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80098dc:	68fb      	ldr	r3, [r7, #12]
}
 80098de:	4618      	mov	r0, r3
 80098e0:	3714      	adds	r7, #20
 80098e2:	46bd      	mov	sp, r7
 80098e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e8:	4770      	bx	lr

080098ea <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80098ea:	b480      	push	{r7}
 80098ec:	b085      	sub	sp, #20
 80098ee:	af00      	add	r7, sp, #0
 80098f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098fc:	699b      	ldr	r3, [r3, #24]
 80098fe:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009906:	69db      	ldr	r3, [r3, #28]
 8009908:	68ba      	ldr	r2, [r7, #8]
 800990a:	4013      	ands	r3, r2
 800990c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800990e:	68bb      	ldr	r3, [r7, #8]
 8009910:	0c1b      	lsrs	r3, r3, #16
}
 8009912:	4618      	mov	r0, r3
 8009914:	3714      	adds	r7, #20
 8009916:	46bd      	mov	sp, r7
 8009918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991c:	4770      	bx	lr

0800991e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800991e:	b480      	push	{r7}
 8009920:	b085      	sub	sp, #20
 8009922:	af00      	add	r7, sp, #0
 8009924:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009930:	699b      	ldr	r3, [r3, #24]
 8009932:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800993a:	69db      	ldr	r3, [r3, #28]
 800993c:	68ba      	ldr	r2, [r7, #8]
 800993e:	4013      	ands	r3, r2
 8009940:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009942:	68bb      	ldr	r3, [r7, #8]
 8009944:	b29b      	uxth	r3, r3
}
 8009946:	4618      	mov	r0, r3
 8009948:	3714      	adds	r7, #20
 800994a:	46bd      	mov	sp, r7
 800994c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009950:	4770      	bx	lr

08009952 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009952:	b480      	push	{r7}
 8009954:	b085      	sub	sp, #20
 8009956:	af00      	add	r7, sp, #0
 8009958:	6078      	str	r0, [r7, #4]
 800995a:	460b      	mov	r3, r1
 800995c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009962:	78fb      	ldrb	r3, [r7, #3]
 8009964:	015a      	lsls	r2, r3, #5
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	4413      	add	r3, r2
 800996a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800996e:	689b      	ldr	r3, [r3, #8]
 8009970:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009978:	695b      	ldr	r3, [r3, #20]
 800997a:	68ba      	ldr	r2, [r7, #8]
 800997c:	4013      	ands	r3, r2
 800997e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009980:	68bb      	ldr	r3, [r7, #8]
}
 8009982:	4618      	mov	r0, r3
 8009984:	3714      	adds	r7, #20
 8009986:	46bd      	mov	sp, r7
 8009988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998c:	4770      	bx	lr

0800998e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800998e:	b480      	push	{r7}
 8009990:	b087      	sub	sp, #28
 8009992:	af00      	add	r7, sp, #0
 8009994:	6078      	str	r0, [r7, #4]
 8009996:	460b      	mov	r3, r1
 8009998:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800999e:	697b      	ldr	r3, [r7, #20]
 80099a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099a4:	691b      	ldr	r3, [r3, #16]
 80099a6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80099a8:	697b      	ldr	r3, [r7, #20]
 80099aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099b0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80099b2:	78fb      	ldrb	r3, [r7, #3]
 80099b4:	f003 030f 	and.w	r3, r3, #15
 80099b8:	68fa      	ldr	r2, [r7, #12]
 80099ba:	fa22 f303 	lsr.w	r3, r2, r3
 80099be:	01db      	lsls	r3, r3, #7
 80099c0:	b2db      	uxtb	r3, r3
 80099c2:	693a      	ldr	r2, [r7, #16]
 80099c4:	4313      	orrs	r3, r2
 80099c6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80099c8:	78fb      	ldrb	r3, [r7, #3]
 80099ca:	015a      	lsls	r2, r3, #5
 80099cc:	697b      	ldr	r3, [r7, #20]
 80099ce:	4413      	add	r3, r2
 80099d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099d4:	689b      	ldr	r3, [r3, #8]
 80099d6:	693a      	ldr	r2, [r7, #16]
 80099d8:	4013      	ands	r3, r2
 80099da:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80099dc:	68bb      	ldr	r3, [r7, #8]
}
 80099de:	4618      	mov	r0, r3
 80099e0:	371c      	adds	r7, #28
 80099e2:	46bd      	mov	sp, r7
 80099e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e8:	4770      	bx	lr

080099ea <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80099ea:	b480      	push	{r7}
 80099ec:	b083      	sub	sp, #12
 80099ee:	af00      	add	r7, sp, #0
 80099f0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	695b      	ldr	r3, [r3, #20]
 80099f6:	f003 0301 	and.w	r3, r3, #1
}
 80099fa:	4618      	mov	r0, r3
 80099fc:	370c      	adds	r7, #12
 80099fe:	46bd      	mov	sp, r7
 8009a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a04:	4770      	bx	lr
	...

08009a08 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8009a08:	b480      	push	{r7}
 8009a0a:	b085      	sub	sp, #20
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a1a:	681a      	ldr	r2, [r3, #0]
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a22:	4619      	mov	r1, r3
 8009a24:	4b09      	ldr	r3, [pc, #36]	; (8009a4c <USB_ActivateSetup+0x44>)
 8009a26:	4013      	ands	r3, r2
 8009a28:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a30:	685b      	ldr	r3, [r3, #4]
 8009a32:	68fa      	ldr	r2, [r7, #12]
 8009a34:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009a38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009a3c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009a3e:	2300      	movs	r3, #0
}
 8009a40:	4618      	mov	r0, r3
 8009a42:	3714      	adds	r7, #20
 8009a44:	46bd      	mov	sp, r7
 8009a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4a:	4770      	bx	lr
 8009a4c:	fffff800 	.word	0xfffff800

08009a50 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8009a50:	b480      	push	{r7}
 8009a52:	b087      	sub	sp, #28
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	60f8      	str	r0, [r7, #12]
 8009a58:	460b      	mov	r3, r1
 8009a5a:	607a      	str	r2, [r7, #4]
 8009a5c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	333c      	adds	r3, #60	; 0x3c
 8009a66:	3304      	adds	r3, #4
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009a6c:	693b      	ldr	r3, [r7, #16]
 8009a6e:	4a26      	ldr	r2, [pc, #152]	; (8009b08 <USB_EP0_OutStart+0xb8>)
 8009a70:	4293      	cmp	r3, r2
 8009a72:	d90a      	bls.n	8009a8a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009a74:	697b      	ldr	r3, [r7, #20]
 8009a76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009a80:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009a84:	d101      	bne.n	8009a8a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8009a86:	2300      	movs	r3, #0
 8009a88:	e037      	b.n	8009afa <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009a8a:	697b      	ldr	r3, [r7, #20]
 8009a8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a90:	461a      	mov	r2, r3
 8009a92:	2300      	movs	r3, #0
 8009a94:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009a96:	697b      	ldr	r3, [r7, #20]
 8009a98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a9c:	691b      	ldr	r3, [r3, #16]
 8009a9e:	697a      	ldr	r2, [r7, #20]
 8009aa0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009aa4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009aa8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009aaa:	697b      	ldr	r3, [r7, #20]
 8009aac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ab0:	691b      	ldr	r3, [r3, #16]
 8009ab2:	697a      	ldr	r2, [r7, #20]
 8009ab4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ab8:	f043 0318 	orr.w	r3, r3, #24
 8009abc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009abe:	697b      	ldr	r3, [r7, #20]
 8009ac0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ac4:	691b      	ldr	r3, [r3, #16]
 8009ac6:	697a      	ldr	r2, [r7, #20]
 8009ac8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009acc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8009ad0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8009ad2:	7afb      	ldrb	r3, [r7, #11]
 8009ad4:	2b01      	cmp	r3, #1
 8009ad6:	d10f      	bne.n	8009af8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009ad8:	697b      	ldr	r3, [r7, #20]
 8009ada:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ade:	461a      	mov	r2, r3
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009ae4:	697b      	ldr	r3, [r7, #20]
 8009ae6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	697a      	ldr	r2, [r7, #20]
 8009aee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009af2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8009af6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009af8:	2300      	movs	r3, #0
}
 8009afa:	4618      	mov	r0, r3
 8009afc:	371c      	adds	r7, #28
 8009afe:	46bd      	mov	sp, r7
 8009b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b04:	4770      	bx	lr
 8009b06:	bf00      	nop
 8009b08:	4f54300a 	.word	0x4f54300a

08009b0c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009b0c:	b480      	push	{r7}
 8009b0e:	b085      	sub	sp, #20
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009b14:	2300      	movs	r3, #0
 8009b16:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	3301      	adds	r3, #1
 8009b1c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	4a13      	ldr	r2, [pc, #76]	; (8009b70 <USB_CoreReset+0x64>)
 8009b22:	4293      	cmp	r3, r2
 8009b24:	d901      	bls.n	8009b2a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009b26:	2303      	movs	r3, #3
 8009b28:	e01b      	b.n	8009b62 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	691b      	ldr	r3, [r3, #16]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	daf2      	bge.n	8009b18 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009b32:	2300      	movs	r3, #0
 8009b34:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	691b      	ldr	r3, [r3, #16]
 8009b3a:	f043 0201 	orr.w	r2, r3, #1
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	3301      	adds	r3, #1
 8009b46:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	4a09      	ldr	r2, [pc, #36]	; (8009b70 <USB_CoreReset+0x64>)
 8009b4c:	4293      	cmp	r3, r2
 8009b4e:	d901      	bls.n	8009b54 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009b50:	2303      	movs	r3, #3
 8009b52:	e006      	b.n	8009b62 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	691b      	ldr	r3, [r3, #16]
 8009b58:	f003 0301 	and.w	r3, r3, #1
 8009b5c:	2b01      	cmp	r3, #1
 8009b5e:	d0f0      	beq.n	8009b42 <USB_CoreReset+0x36>

  return HAL_OK;
 8009b60:	2300      	movs	r3, #0
}
 8009b62:	4618      	mov	r0, r3
 8009b64:	3714      	adds	r7, #20
 8009b66:	46bd      	mov	sp, r7
 8009b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6c:	4770      	bx	lr
 8009b6e:	bf00      	nop
 8009b70:	00030d40 	.word	0x00030d40

08009b74 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009b74:	b580      	push	{r7, lr}
 8009b76:	b084      	sub	sp, #16
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	6078      	str	r0, [r7, #4]
 8009b7c:	460b      	mov	r3, r1
 8009b7e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009b80:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009b84:	f002 fcba 	bl	800c4fc <USBD_static_malloc>
 8009b88:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d109      	bne.n	8009ba4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	32b0      	adds	r2, #176	; 0xb0
 8009b9a:	2100      	movs	r1, #0
 8009b9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8009ba0:	2302      	movs	r3, #2
 8009ba2:	e0d4      	b.n	8009d4e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8009ba4:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8009ba8:	2100      	movs	r1, #0
 8009baa:	68f8      	ldr	r0, [r7, #12]
 8009bac:	f002 fd14 	bl	800c5d8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	32b0      	adds	r2, #176	; 0xb0
 8009bba:	68f9      	ldr	r1, [r7, #12]
 8009bbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	32b0      	adds	r2, #176	; 0xb0
 8009bca:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	7c1b      	ldrb	r3, [r3, #16]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d138      	bne.n	8009c4e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009bdc:	4b5e      	ldr	r3, [pc, #376]	; (8009d58 <USBD_CDC_Init+0x1e4>)
 8009bde:	7819      	ldrb	r1, [r3, #0]
 8009be0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009be4:	2202      	movs	r2, #2
 8009be6:	6878      	ldr	r0, [r7, #4]
 8009be8:	f002 fb65 	bl	800c2b6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009bec:	4b5a      	ldr	r3, [pc, #360]	; (8009d58 <USBD_CDC_Init+0x1e4>)
 8009bee:	781b      	ldrb	r3, [r3, #0]
 8009bf0:	f003 020f 	and.w	r2, r3, #15
 8009bf4:	6879      	ldr	r1, [r7, #4]
 8009bf6:	4613      	mov	r3, r2
 8009bf8:	009b      	lsls	r3, r3, #2
 8009bfa:	4413      	add	r3, r2
 8009bfc:	009b      	lsls	r3, r3, #2
 8009bfe:	440b      	add	r3, r1
 8009c00:	3324      	adds	r3, #36	; 0x24
 8009c02:	2201      	movs	r2, #1
 8009c04:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009c06:	4b55      	ldr	r3, [pc, #340]	; (8009d5c <USBD_CDC_Init+0x1e8>)
 8009c08:	7819      	ldrb	r1, [r3, #0]
 8009c0a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009c0e:	2202      	movs	r2, #2
 8009c10:	6878      	ldr	r0, [r7, #4]
 8009c12:	f002 fb50 	bl	800c2b6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009c16:	4b51      	ldr	r3, [pc, #324]	; (8009d5c <USBD_CDC_Init+0x1e8>)
 8009c18:	781b      	ldrb	r3, [r3, #0]
 8009c1a:	f003 020f 	and.w	r2, r3, #15
 8009c1e:	6879      	ldr	r1, [r7, #4]
 8009c20:	4613      	mov	r3, r2
 8009c22:	009b      	lsls	r3, r3, #2
 8009c24:	4413      	add	r3, r2
 8009c26:	009b      	lsls	r3, r3, #2
 8009c28:	440b      	add	r3, r1
 8009c2a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009c2e:	2201      	movs	r2, #1
 8009c30:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009c32:	4b4b      	ldr	r3, [pc, #300]	; (8009d60 <USBD_CDC_Init+0x1ec>)
 8009c34:	781b      	ldrb	r3, [r3, #0]
 8009c36:	f003 020f 	and.w	r2, r3, #15
 8009c3a:	6879      	ldr	r1, [r7, #4]
 8009c3c:	4613      	mov	r3, r2
 8009c3e:	009b      	lsls	r3, r3, #2
 8009c40:	4413      	add	r3, r2
 8009c42:	009b      	lsls	r3, r3, #2
 8009c44:	440b      	add	r3, r1
 8009c46:	3326      	adds	r3, #38	; 0x26
 8009c48:	2210      	movs	r2, #16
 8009c4a:	801a      	strh	r2, [r3, #0]
 8009c4c:	e035      	b.n	8009cba <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009c4e:	4b42      	ldr	r3, [pc, #264]	; (8009d58 <USBD_CDC_Init+0x1e4>)
 8009c50:	7819      	ldrb	r1, [r3, #0]
 8009c52:	2340      	movs	r3, #64	; 0x40
 8009c54:	2202      	movs	r2, #2
 8009c56:	6878      	ldr	r0, [r7, #4]
 8009c58:	f002 fb2d 	bl	800c2b6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009c5c:	4b3e      	ldr	r3, [pc, #248]	; (8009d58 <USBD_CDC_Init+0x1e4>)
 8009c5e:	781b      	ldrb	r3, [r3, #0]
 8009c60:	f003 020f 	and.w	r2, r3, #15
 8009c64:	6879      	ldr	r1, [r7, #4]
 8009c66:	4613      	mov	r3, r2
 8009c68:	009b      	lsls	r3, r3, #2
 8009c6a:	4413      	add	r3, r2
 8009c6c:	009b      	lsls	r3, r3, #2
 8009c6e:	440b      	add	r3, r1
 8009c70:	3324      	adds	r3, #36	; 0x24
 8009c72:	2201      	movs	r2, #1
 8009c74:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009c76:	4b39      	ldr	r3, [pc, #228]	; (8009d5c <USBD_CDC_Init+0x1e8>)
 8009c78:	7819      	ldrb	r1, [r3, #0]
 8009c7a:	2340      	movs	r3, #64	; 0x40
 8009c7c:	2202      	movs	r2, #2
 8009c7e:	6878      	ldr	r0, [r7, #4]
 8009c80:	f002 fb19 	bl	800c2b6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009c84:	4b35      	ldr	r3, [pc, #212]	; (8009d5c <USBD_CDC_Init+0x1e8>)
 8009c86:	781b      	ldrb	r3, [r3, #0]
 8009c88:	f003 020f 	and.w	r2, r3, #15
 8009c8c:	6879      	ldr	r1, [r7, #4]
 8009c8e:	4613      	mov	r3, r2
 8009c90:	009b      	lsls	r3, r3, #2
 8009c92:	4413      	add	r3, r2
 8009c94:	009b      	lsls	r3, r3, #2
 8009c96:	440b      	add	r3, r1
 8009c98:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009c9c:	2201      	movs	r2, #1
 8009c9e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009ca0:	4b2f      	ldr	r3, [pc, #188]	; (8009d60 <USBD_CDC_Init+0x1ec>)
 8009ca2:	781b      	ldrb	r3, [r3, #0]
 8009ca4:	f003 020f 	and.w	r2, r3, #15
 8009ca8:	6879      	ldr	r1, [r7, #4]
 8009caa:	4613      	mov	r3, r2
 8009cac:	009b      	lsls	r3, r3, #2
 8009cae:	4413      	add	r3, r2
 8009cb0:	009b      	lsls	r3, r3, #2
 8009cb2:	440b      	add	r3, r1
 8009cb4:	3326      	adds	r3, #38	; 0x26
 8009cb6:	2210      	movs	r2, #16
 8009cb8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009cba:	4b29      	ldr	r3, [pc, #164]	; (8009d60 <USBD_CDC_Init+0x1ec>)
 8009cbc:	7819      	ldrb	r1, [r3, #0]
 8009cbe:	2308      	movs	r3, #8
 8009cc0:	2203      	movs	r2, #3
 8009cc2:	6878      	ldr	r0, [r7, #4]
 8009cc4:	f002 faf7 	bl	800c2b6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8009cc8:	4b25      	ldr	r3, [pc, #148]	; (8009d60 <USBD_CDC_Init+0x1ec>)
 8009cca:	781b      	ldrb	r3, [r3, #0]
 8009ccc:	f003 020f 	and.w	r2, r3, #15
 8009cd0:	6879      	ldr	r1, [r7, #4]
 8009cd2:	4613      	mov	r3, r2
 8009cd4:	009b      	lsls	r3, r3, #2
 8009cd6:	4413      	add	r3, r2
 8009cd8:	009b      	lsls	r3, r3, #2
 8009cda:	440b      	add	r3, r1
 8009cdc:	3324      	adds	r3, #36	; 0x24
 8009cde:	2201      	movs	r2, #1
 8009ce0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	2200      	movs	r2, #0
 8009ce6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009cf0:	687a      	ldr	r2, [r7, #4]
 8009cf2:	33b0      	adds	r3, #176	; 0xb0
 8009cf4:	009b      	lsls	r3, r3, #2
 8009cf6:	4413      	add	r3, r2
 8009cf8:	685b      	ldr	r3, [r3, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	2200      	movs	r2, #0
 8009d02:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	2200      	movs	r2, #0
 8009d0a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d101      	bne.n	8009d1c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8009d18:	2302      	movs	r3, #2
 8009d1a:	e018      	b.n	8009d4e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	7c1b      	ldrb	r3, [r3, #16]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d10a      	bne.n	8009d3a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009d24:	4b0d      	ldr	r3, [pc, #52]	; (8009d5c <USBD_CDC_Init+0x1e8>)
 8009d26:	7819      	ldrb	r1, [r3, #0]
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009d2e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009d32:	6878      	ldr	r0, [r7, #4]
 8009d34:	f002 fbae 	bl	800c494 <USBD_LL_PrepareReceive>
 8009d38:	e008      	b.n	8009d4c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009d3a:	4b08      	ldr	r3, [pc, #32]	; (8009d5c <USBD_CDC_Init+0x1e8>)
 8009d3c:	7819      	ldrb	r1, [r3, #0]
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009d44:	2340      	movs	r3, #64	; 0x40
 8009d46:	6878      	ldr	r0, [r7, #4]
 8009d48:	f002 fba4 	bl	800c494 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009d4c:	2300      	movs	r3, #0
}
 8009d4e:	4618      	mov	r0, r3
 8009d50:	3710      	adds	r7, #16
 8009d52:	46bd      	mov	sp, r7
 8009d54:	bd80      	pop	{r7, pc}
 8009d56:	bf00      	nop
 8009d58:	240000b3 	.word	0x240000b3
 8009d5c:	240000b4 	.word	0x240000b4
 8009d60:	240000b5 	.word	0x240000b5

08009d64 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009d64:	b580      	push	{r7, lr}
 8009d66:	b082      	sub	sp, #8
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]
 8009d6c:	460b      	mov	r3, r1
 8009d6e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8009d70:	4b3a      	ldr	r3, [pc, #232]	; (8009e5c <USBD_CDC_DeInit+0xf8>)
 8009d72:	781b      	ldrb	r3, [r3, #0]
 8009d74:	4619      	mov	r1, r3
 8009d76:	6878      	ldr	r0, [r7, #4]
 8009d78:	f002 fac3 	bl	800c302 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8009d7c:	4b37      	ldr	r3, [pc, #220]	; (8009e5c <USBD_CDC_DeInit+0xf8>)
 8009d7e:	781b      	ldrb	r3, [r3, #0]
 8009d80:	f003 020f 	and.w	r2, r3, #15
 8009d84:	6879      	ldr	r1, [r7, #4]
 8009d86:	4613      	mov	r3, r2
 8009d88:	009b      	lsls	r3, r3, #2
 8009d8a:	4413      	add	r3, r2
 8009d8c:	009b      	lsls	r3, r3, #2
 8009d8e:	440b      	add	r3, r1
 8009d90:	3324      	adds	r3, #36	; 0x24
 8009d92:	2200      	movs	r2, #0
 8009d94:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8009d96:	4b32      	ldr	r3, [pc, #200]	; (8009e60 <USBD_CDC_DeInit+0xfc>)
 8009d98:	781b      	ldrb	r3, [r3, #0]
 8009d9a:	4619      	mov	r1, r3
 8009d9c:	6878      	ldr	r0, [r7, #4]
 8009d9e:	f002 fab0 	bl	800c302 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8009da2:	4b2f      	ldr	r3, [pc, #188]	; (8009e60 <USBD_CDC_DeInit+0xfc>)
 8009da4:	781b      	ldrb	r3, [r3, #0]
 8009da6:	f003 020f 	and.w	r2, r3, #15
 8009daa:	6879      	ldr	r1, [r7, #4]
 8009dac:	4613      	mov	r3, r2
 8009dae:	009b      	lsls	r3, r3, #2
 8009db0:	4413      	add	r3, r2
 8009db2:	009b      	lsls	r3, r3, #2
 8009db4:	440b      	add	r3, r1
 8009db6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009dba:	2200      	movs	r2, #0
 8009dbc:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8009dbe:	4b29      	ldr	r3, [pc, #164]	; (8009e64 <USBD_CDC_DeInit+0x100>)
 8009dc0:	781b      	ldrb	r3, [r3, #0]
 8009dc2:	4619      	mov	r1, r3
 8009dc4:	6878      	ldr	r0, [r7, #4]
 8009dc6:	f002 fa9c 	bl	800c302 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8009dca:	4b26      	ldr	r3, [pc, #152]	; (8009e64 <USBD_CDC_DeInit+0x100>)
 8009dcc:	781b      	ldrb	r3, [r3, #0]
 8009dce:	f003 020f 	and.w	r2, r3, #15
 8009dd2:	6879      	ldr	r1, [r7, #4]
 8009dd4:	4613      	mov	r3, r2
 8009dd6:	009b      	lsls	r3, r3, #2
 8009dd8:	4413      	add	r3, r2
 8009dda:	009b      	lsls	r3, r3, #2
 8009ddc:	440b      	add	r3, r1
 8009dde:	3324      	adds	r3, #36	; 0x24
 8009de0:	2200      	movs	r2, #0
 8009de2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8009de4:	4b1f      	ldr	r3, [pc, #124]	; (8009e64 <USBD_CDC_DeInit+0x100>)
 8009de6:	781b      	ldrb	r3, [r3, #0]
 8009de8:	f003 020f 	and.w	r2, r3, #15
 8009dec:	6879      	ldr	r1, [r7, #4]
 8009dee:	4613      	mov	r3, r2
 8009df0:	009b      	lsls	r3, r3, #2
 8009df2:	4413      	add	r3, r2
 8009df4:	009b      	lsls	r3, r3, #2
 8009df6:	440b      	add	r3, r1
 8009df8:	3326      	adds	r3, #38	; 0x26
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	32b0      	adds	r2, #176	; 0xb0
 8009e08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d01f      	beq.n	8009e50 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009e16:	687a      	ldr	r2, [r7, #4]
 8009e18:	33b0      	adds	r3, #176	; 0xb0
 8009e1a:	009b      	lsls	r3, r3, #2
 8009e1c:	4413      	add	r3, r2
 8009e1e:	685b      	ldr	r3, [r3, #4]
 8009e20:	685b      	ldr	r3, [r3, #4]
 8009e22:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	32b0      	adds	r2, #176	; 0xb0
 8009e2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e32:	4618      	mov	r0, r3
 8009e34:	f002 fb70 	bl	800c518 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	32b0      	adds	r2, #176	; 0xb0
 8009e42:	2100      	movs	r1, #0
 8009e44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	2200      	movs	r2, #0
 8009e4c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009e50:	2300      	movs	r3, #0
}
 8009e52:	4618      	mov	r0, r3
 8009e54:	3708      	adds	r7, #8
 8009e56:	46bd      	mov	sp, r7
 8009e58:	bd80      	pop	{r7, pc}
 8009e5a:	bf00      	nop
 8009e5c:	240000b3 	.word	0x240000b3
 8009e60:	240000b4 	.word	0x240000b4
 8009e64:	240000b5 	.word	0x240000b5

08009e68 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	b086      	sub	sp, #24
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	6078      	str	r0, [r7, #4]
 8009e70:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	32b0      	adds	r2, #176	; 0xb0
 8009e7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e80:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009e82:	2300      	movs	r3, #0
 8009e84:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009e86:	2300      	movs	r3, #0
 8009e88:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009e8e:	693b      	ldr	r3, [r7, #16]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d101      	bne.n	8009e98 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8009e94:	2303      	movs	r3, #3
 8009e96:	e0bf      	b.n	800a018 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009e98:	683b      	ldr	r3, [r7, #0]
 8009e9a:	781b      	ldrb	r3, [r3, #0]
 8009e9c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d050      	beq.n	8009f46 <USBD_CDC_Setup+0xde>
 8009ea4:	2b20      	cmp	r3, #32
 8009ea6:	f040 80af 	bne.w	800a008 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009eaa:	683b      	ldr	r3, [r7, #0]
 8009eac:	88db      	ldrh	r3, [r3, #6]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d03a      	beq.n	8009f28 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009eb2:	683b      	ldr	r3, [r7, #0]
 8009eb4:	781b      	ldrb	r3, [r3, #0]
 8009eb6:	b25b      	sxtb	r3, r3
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	da1b      	bge.n	8009ef4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009ec2:	687a      	ldr	r2, [r7, #4]
 8009ec4:	33b0      	adds	r3, #176	; 0xb0
 8009ec6:	009b      	lsls	r3, r3, #2
 8009ec8:	4413      	add	r3, r2
 8009eca:	685b      	ldr	r3, [r3, #4]
 8009ecc:	689b      	ldr	r3, [r3, #8]
 8009ece:	683a      	ldr	r2, [r7, #0]
 8009ed0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8009ed2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009ed4:	683a      	ldr	r2, [r7, #0]
 8009ed6:	88d2      	ldrh	r2, [r2, #6]
 8009ed8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009eda:	683b      	ldr	r3, [r7, #0]
 8009edc:	88db      	ldrh	r3, [r3, #6]
 8009ede:	2b07      	cmp	r3, #7
 8009ee0:	bf28      	it	cs
 8009ee2:	2307      	movcs	r3, #7
 8009ee4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009ee6:	693b      	ldr	r3, [r7, #16]
 8009ee8:	89fa      	ldrh	r2, [r7, #14]
 8009eea:	4619      	mov	r1, r3
 8009eec:	6878      	ldr	r0, [r7, #4]
 8009eee:	f001 fd89 	bl	800ba04 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8009ef2:	e090      	b.n	800a016 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8009ef4:	683b      	ldr	r3, [r7, #0]
 8009ef6:	785a      	ldrb	r2, [r3, #1]
 8009ef8:	693b      	ldr	r3, [r7, #16]
 8009efa:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8009efe:	683b      	ldr	r3, [r7, #0]
 8009f00:	88db      	ldrh	r3, [r3, #6]
 8009f02:	2b3f      	cmp	r3, #63	; 0x3f
 8009f04:	d803      	bhi.n	8009f0e <USBD_CDC_Setup+0xa6>
 8009f06:	683b      	ldr	r3, [r7, #0]
 8009f08:	88db      	ldrh	r3, [r3, #6]
 8009f0a:	b2da      	uxtb	r2, r3
 8009f0c:	e000      	b.n	8009f10 <USBD_CDC_Setup+0xa8>
 8009f0e:	2240      	movs	r2, #64	; 0x40
 8009f10:	693b      	ldr	r3, [r7, #16]
 8009f12:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8009f16:	6939      	ldr	r1, [r7, #16]
 8009f18:	693b      	ldr	r3, [r7, #16]
 8009f1a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8009f1e:	461a      	mov	r2, r3
 8009f20:	6878      	ldr	r0, [r7, #4]
 8009f22:	f001 fd9b 	bl	800ba5c <USBD_CtlPrepareRx>
      break;
 8009f26:	e076      	b.n	800a016 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009f2e:	687a      	ldr	r2, [r7, #4]
 8009f30:	33b0      	adds	r3, #176	; 0xb0
 8009f32:	009b      	lsls	r3, r3, #2
 8009f34:	4413      	add	r3, r2
 8009f36:	685b      	ldr	r3, [r3, #4]
 8009f38:	689b      	ldr	r3, [r3, #8]
 8009f3a:	683a      	ldr	r2, [r7, #0]
 8009f3c:	7850      	ldrb	r0, [r2, #1]
 8009f3e:	2200      	movs	r2, #0
 8009f40:	6839      	ldr	r1, [r7, #0]
 8009f42:	4798      	blx	r3
      break;
 8009f44:	e067      	b.n	800a016 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009f46:	683b      	ldr	r3, [r7, #0]
 8009f48:	785b      	ldrb	r3, [r3, #1]
 8009f4a:	2b0b      	cmp	r3, #11
 8009f4c:	d851      	bhi.n	8009ff2 <USBD_CDC_Setup+0x18a>
 8009f4e:	a201      	add	r2, pc, #4	; (adr r2, 8009f54 <USBD_CDC_Setup+0xec>)
 8009f50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f54:	08009f85 	.word	0x08009f85
 8009f58:	0800a001 	.word	0x0800a001
 8009f5c:	08009ff3 	.word	0x08009ff3
 8009f60:	08009ff3 	.word	0x08009ff3
 8009f64:	08009ff3 	.word	0x08009ff3
 8009f68:	08009ff3 	.word	0x08009ff3
 8009f6c:	08009ff3 	.word	0x08009ff3
 8009f70:	08009ff3 	.word	0x08009ff3
 8009f74:	08009ff3 	.word	0x08009ff3
 8009f78:	08009ff3 	.word	0x08009ff3
 8009f7c:	08009faf 	.word	0x08009faf
 8009f80:	08009fd9 	.word	0x08009fd9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f8a:	b2db      	uxtb	r3, r3
 8009f8c:	2b03      	cmp	r3, #3
 8009f8e:	d107      	bne.n	8009fa0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009f90:	f107 030a 	add.w	r3, r7, #10
 8009f94:	2202      	movs	r2, #2
 8009f96:	4619      	mov	r1, r3
 8009f98:	6878      	ldr	r0, [r7, #4]
 8009f9a:	f001 fd33 	bl	800ba04 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009f9e:	e032      	b.n	800a006 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009fa0:	6839      	ldr	r1, [r7, #0]
 8009fa2:	6878      	ldr	r0, [r7, #4]
 8009fa4:	f001 fcbd 	bl	800b922 <USBD_CtlError>
            ret = USBD_FAIL;
 8009fa8:	2303      	movs	r3, #3
 8009faa:	75fb      	strb	r3, [r7, #23]
          break;
 8009fac:	e02b      	b.n	800a006 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009fb4:	b2db      	uxtb	r3, r3
 8009fb6:	2b03      	cmp	r3, #3
 8009fb8:	d107      	bne.n	8009fca <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009fba:	f107 030d 	add.w	r3, r7, #13
 8009fbe:	2201      	movs	r2, #1
 8009fc0:	4619      	mov	r1, r3
 8009fc2:	6878      	ldr	r0, [r7, #4]
 8009fc4:	f001 fd1e 	bl	800ba04 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009fc8:	e01d      	b.n	800a006 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009fca:	6839      	ldr	r1, [r7, #0]
 8009fcc:	6878      	ldr	r0, [r7, #4]
 8009fce:	f001 fca8 	bl	800b922 <USBD_CtlError>
            ret = USBD_FAIL;
 8009fd2:	2303      	movs	r3, #3
 8009fd4:	75fb      	strb	r3, [r7, #23]
          break;
 8009fd6:	e016      	b.n	800a006 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009fde:	b2db      	uxtb	r3, r3
 8009fe0:	2b03      	cmp	r3, #3
 8009fe2:	d00f      	beq.n	800a004 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8009fe4:	6839      	ldr	r1, [r7, #0]
 8009fe6:	6878      	ldr	r0, [r7, #4]
 8009fe8:	f001 fc9b 	bl	800b922 <USBD_CtlError>
            ret = USBD_FAIL;
 8009fec:	2303      	movs	r3, #3
 8009fee:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009ff0:	e008      	b.n	800a004 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009ff2:	6839      	ldr	r1, [r7, #0]
 8009ff4:	6878      	ldr	r0, [r7, #4]
 8009ff6:	f001 fc94 	bl	800b922 <USBD_CtlError>
          ret = USBD_FAIL;
 8009ffa:	2303      	movs	r3, #3
 8009ffc:	75fb      	strb	r3, [r7, #23]
          break;
 8009ffe:	e002      	b.n	800a006 <USBD_CDC_Setup+0x19e>
          break;
 800a000:	bf00      	nop
 800a002:	e008      	b.n	800a016 <USBD_CDC_Setup+0x1ae>
          break;
 800a004:	bf00      	nop
      }
      break;
 800a006:	e006      	b.n	800a016 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800a008:	6839      	ldr	r1, [r7, #0]
 800a00a:	6878      	ldr	r0, [r7, #4]
 800a00c:	f001 fc89 	bl	800b922 <USBD_CtlError>
      ret = USBD_FAIL;
 800a010:	2303      	movs	r3, #3
 800a012:	75fb      	strb	r3, [r7, #23]
      break;
 800a014:	bf00      	nop
  }

  return (uint8_t)ret;
 800a016:	7dfb      	ldrb	r3, [r7, #23]
}
 800a018:	4618      	mov	r0, r3
 800a01a:	3718      	adds	r7, #24
 800a01c:	46bd      	mov	sp, r7
 800a01e:	bd80      	pop	{r7, pc}

0800a020 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a020:	b580      	push	{r7, lr}
 800a022:	b084      	sub	sp, #16
 800a024:	af00      	add	r7, sp, #0
 800a026:	6078      	str	r0, [r7, #4]
 800a028:	460b      	mov	r3, r1
 800a02a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a032:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	32b0      	adds	r2, #176	; 0xb0
 800a03e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d101      	bne.n	800a04a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800a046:	2303      	movs	r3, #3
 800a048:	e065      	b.n	800a116 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	32b0      	adds	r2, #176	; 0xb0
 800a054:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a058:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a05a:	78fb      	ldrb	r3, [r7, #3]
 800a05c:	f003 020f 	and.w	r2, r3, #15
 800a060:	6879      	ldr	r1, [r7, #4]
 800a062:	4613      	mov	r3, r2
 800a064:	009b      	lsls	r3, r3, #2
 800a066:	4413      	add	r3, r2
 800a068:	009b      	lsls	r3, r3, #2
 800a06a:	440b      	add	r3, r1
 800a06c:	3318      	adds	r3, #24
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d02f      	beq.n	800a0d4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800a074:	78fb      	ldrb	r3, [r7, #3]
 800a076:	f003 020f 	and.w	r2, r3, #15
 800a07a:	6879      	ldr	r1, [r7, #4]
 800a07c:	4613      	mov	r3, r2
 800a07e:	009b      	lsls	r3, r3, #2
 800a080:	4413      	add	r3, r2
 800a082:	009b      	lsls	r3, r3, #2
 800a084:	440b      	add	r3, r1
 800a086:	3318      	adds	r3, #24
 800a088:	681a      	ldr	r2, [r3, #0]
 800a08a:	78fb      	ldrb	r3, [r7, #3]
 800a08c:	f003 010f 	and.w	r1, r3, #15
 800a090:	68f8      	ldr	r0, [r7, #12]
 800a092:	460b      	mov	r3, r1
 800a094:	00db      	lsls	r3, r3, #3
 800a096:	440b      	add	r3, r1
 800a098:	009b      	lsls	r3, r3, #2
 800a09a:	4403      	add	r3, r0
 800a09c:	3344      	adds	r3, #68	; 0x44
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	fbb2 f1f3 	udiv	r1, r2, r3
 800a0a4:	fb01 f303 	mul.w	r3, r1, r3
 800a0a8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d112      	bne.n	800a0d4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800a0ae:	78fb      	ldrb	r3, [r7, #3]
 800a0b0:	f003 020f 	and.w	r2, r3, #15
 800a0b4:	6879      	ldr	r1, [r7, #4]
 800a0b6:	4613      	mov	r3, r2
 800a0b8:	009b      	lsls	r3, r3, #2
 800a0ba:	4413      	add	r3, r2
 800a0bc:	009b      	lsls	r3, r3, #2
 800a0be:	440b      	add	r3, r1
 800a0c0:	3318      	adds	r3, #24
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a0c6:	78f9      	ldrb	r1, [r7, #3]
 800a0c8:	2300      	movs	r3, #0
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	6878      	ldr	r0, [r7, #4]
 800a0ce:	f002 f9c0 	bl	800c452 <USBD_LL_Transmit>
 800a0d2:	e01f      	b.n	800a114 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800a0d4:	68bb      	ldr	r3, [r7, #8]
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a0e2:	687a      	ldr	r2, [r7, #4]
 800a0e4:	33b0      	adds	r3, #176	; 0xb0
 800a0e6:	009b      	lsls	r3, r3, #2
 800a0e8:	4413      	add	r3, r2
 800a0ea:	685b      	ldr	r3, [r3, #4]
 800a0ec:	691b      	ldr	r3, [r3, #16]
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d010      	beq.n	800a114 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a0f8:	687a      	ldr	r2, [r7, #4]
 800a0fa:	33b0      	adds	r3, #176	; 0xb0
 800a0fc:	009b      	lsls	r3, r3, #2
 800a0fe:	4413      	add	r3, r2
 800a100:	685b      	ldr	r3, [r3, #4]
 800a102:	691b      	ldr	r3, [r3, #16]
 800a104:	68ba      	ldr	r2, [r7, #8]
 800a106:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800a10a:	68ba      	ldr	r2, [r7, #8]
 800a10c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800a110:	78fa      	ldrb	r2, [r7, #3]
 800a112:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800a114:	2300      	movs	r3, #0
}
 800a116:	4618      	mov	r0, r3
 800a118:	3710      	adds	r7, #16
 800a11a:	46bd      	mov	sp, r7
 800a11c:	bd80      	pop	{r7, pc}

0800a11e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a11e:	b580      	push	{r7, lr}
 800a120:	b084      	sub	sp, #16
 800a122:	af00      	add	r7, sp, #0
 800a124:	6078      	str	r0, [r7, #4]
 800a126:	460b      	mov	r3, r1
 800a128:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	32b0      	adds	r2, #176	; 0xb0
 800a134:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a138:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	32b0      	adds	r2, #176	; 0xb0
 800a144:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d101      	bne.n	800a150 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800a14c:	2303      	movs	r3, #3
 800a14e:	e01a      	b.n	800a186 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a150:	78fb      	ldrb	r3, [r7, #3]
 800a152:	4619      	mov	r1, r3
 800a154:	6878      	ldr	r0, [r7, #4]
 800a156:	f002 f9be 	bl	800c4d6 <USBD_LL_GetRxDataSize>
 800a15a:	4602      	mov	r2, r0
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a168:	687a      	ldr	r2, [r7, #4]
 800a16a:	33b0      	adds	r3, #176	; 0xb0
 800a16c:	009b      	lsls	r3, r3, #2
 800a16e:	4413      	add	r3, r2
 800a170:	685b      	ldr	r3, [r3, #4]
 800a172:	68db      	ldr	r3, [r3, #12]
 800a174:	68fa      	ldr	r2, [r7, #12]
 800a176:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800a17a:	68fa      	ldr	r2, [r7, #12]
 800a17c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800a180:	4611      	mov	r1, r2
 800a182:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a184:	2300      	movs	r3, #0
}
 800a186:	4618      	mov	r0, r3
 800a188:	3710      	adds	r7, #16
 800a18a:	46bd      	mov	sp, r7
 800a18c:	bd80      	pop	{r7, pc}

0800a18e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a18e:	b580      	push	{r7, lr}
 800a190:	b084      	sub	sp, #16
 800a192:	af00      	add	r7, sp, #0
 800a194:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	32b0      	adds	r2, #176	; 0xb0
 800a1a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1a4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d101      	bne.n	800a1b0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a1ac:	2303      	movs	r3, #3
 800a1ae:	e025      	b.n	800a1fc <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a1b6:	687a      	ldr	r2, [r7, #4]
 800a1b8:	33b0      	adds	r3, #176	; 0xb0
 800a1ba:	009b      	lsls	r3, r3, #2
 800a1bc:	4413      	add	r3, r2
 800a1be:	685b      	ldr	r3, [r3, #4]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d01a      	beq.n	800a1fa <USBD_CDC_EP0_RxReady+0x6c>
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a1ca:	2bff      	cmp	r3, #255	; 0xff
 800a1cc:	d015      	beq.n	800a1fa <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a1d4:	687a      	ldr	r2, [r7, #4]
 800a1d6:	33b0      	adds	r3, #176	; 0xb0
 800a1d8:	009b      	lsls	r3, r3, #2
 800a1da:	4413      	add	r3, r2
 800a1dc:	685b      	ldr	r3, [r3, #4]
 800a1de:	689b      	ldr	r3, [r3, #8]
 800a1e0:	68fa      	ldr	r2, [r7, #12]
 800a1e2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800a1e6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800a1e8:	68fa      	ldr	r2, [r7, #12]
 800a1ea:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a1ee:	b292      	uxth	r2, r2
 800a1f0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	22ff      	movs	r2, #255	; 0xff
 800a1f6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800a1fa:	2300      	movs	r3, #0
}
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	3710      	adds	r7, #16
 800a200:	46bd      	mov	sp, r7
 800a202:	bd80      	pop	{r7, pc}

0800a204 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a204:	b580      	push	{r7, lr}
 800a206:	b086      	sub	sp, #24
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a20c:	2182      	movs	r1, #130	; 0x82
 800a20e:	4818      	ldr	r0, [pc, #96]	; (800a270 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a210:	f000 fd4f 	bl	800acb2 <USBD_GetEpDesc>
 800a214:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a216:	2101      	movs	r1, #1
 800a218:	4815      	ldr	r0, [pc, #84]	; (800a270 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a21a:	f000 fd4a 	bl	800acb2 <USBD_GetEpDesc>
 800a21e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a220:	2181      	movs	r1, #129	; 0x81
 800a222:	4813      	ldr	r0, [pc, #76]	; (800a270 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a224:	f000 fd45 	bl	800acb2 <USBD_GetEpDesc>
 800a228:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a22a:	697b      	ldr	r3, [r7, #20]
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d002      	beq.n	800a236 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a230:	697b      	ldr	r3, [r7, #20]
 800a232:	2210      	movs	r2, #16
 800a234:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a236:	693b      	ldr	r3, [r7, #16]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d006      	beq.n	800a24a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a23c:	693b      	ldr	r3, [r7, #16]
 800a23e:	2200      	movs	r2, #0
 800a240:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a244:	711a      	strb	r2, [r3, #4]
 800a246:	2200      	movs	r2, #0
 800a248:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d006      	beq.n	800a25e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	2200      	movs	r2, #0
 800a254:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a258:	711a      	strb	r2, [r3, #4]
 800a25a:	2200      	movs	r2, #0
 800a25c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	2243      	movs	r2, #67	; 0x43
 800a262:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a264:	4b02      	ldr	r3, [pc, #8]	; (800a270 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800a266:	4618      	mov	r0, r3
 800a268:	3718      	adds	r7, #24
 800a26a:	46bd      	mov	sp, r7
 800a26c:	bd80      	pop	{r7, pc}
 800a26e:	bf00      	nop
 800a270:	24000070 	.word	0x24000070

0800a274 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a274:	b580      	push	{r7, lr}
 800a276:	b086      	sub	sp, #24
 800a278:	af00      	add	r7, sp, #0
 800a27a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a27c:	2182      	movs	r1, #130	; 0x82
 800a27e:	4818      	ldr	r0, [pc, #96]	; (800a2e0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a280:	f000 fd17 	bl	800acb2 <USBD_GetEpDesc>
 800a284:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a286:	2101      	movs	r1, #1
 800a288:	4815      	ldr	r0, [pc, #84]	; (800a2e0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a28a:	f000 fd12 	bl	800acb2 <USBD_GetEpDesc>
 800a28e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a290:	2181      	movs	r1, #129	; 0x81
 800a292:	4813      	ldr	r0, [pc, #76]	; (800a2e0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a294:	f000 fd0d 	bl	800acb2 <USBD_GetEpDesc>
 800a298:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a29a:	697b      	ldr	r3, [r7, #20]
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d002      	beq.n	800a2a6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800a2a0:	697b      	ldr	r3, [r7, #20]
 800a2a2:	2210      	movs	r2, #16
 800a2a4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a2a6:	693b      	ldr	r3, [r7, #16]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d006      	beq.n	800a2ba <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a2ac:	693b      	ldr	r3, [r7, #16]
 800a2ae:	2200      	movs	r2, #0
 800a2b0:	711a      	strb	r2, [r3, #4]
 800a2b2:	2200      	movs	r2, #0
 800a2b4:	f042 0202 	orr.w	r2, r2, #2
 800a2b8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d006      	beq.n	800a2ce <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	2200      	movs	r2, #0
 800a2c4:	711a      	strb	r2, [r3, #4]
 800a2c6:	2200      	movs	r2, #0
 800a2c8:	f042 0202 	orr.w	r2, r2, #2
 800a2cc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	2243      	movs	r2, #67	; 0x43
 800a2d2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a2d4:	4b02      	ldr	r3, [pc, #8]	; (800a2e0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	3718      	adds	r7, #24
 800a2da:	46bd      	mov	sp, r7
 800a2dc:	bd80      	pop	{r7, pc}
 800a2de:	bf00      	nop
 800a2e0:	24000070 	.word	0x24000070

0800a2e4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a2e4:	b580      	push	{r7, lr}
 800a2e6:	b086      	sub	sp, #24
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a2ec:	2182      	movs	r1, #130	; 0x82
 800a2ee:	4818      	ldr	r0, [pc, #96]	; (800a350 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a2f0:	f000 fcdf 	bl	800acb2 <USBD_GetEpDesc>
 800a2f4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a2f6:	2101      	movs	r1, #1
 800a2f8:	4815      	ldr	r0, [pc, #84]	; (800a350 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a2fa:	f000 fcda 	bl	800acb2 <USBD_GetEpDesc>
 800a2fe:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a300:	2181      	movs	r1, #129	; 0x81
 800a302:	4813      	ldr	r0, [pc, #76]	; (800a350 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a304:	f000 fcd5 	bl	800acb2 <USBD_GetEpDesc>
 800a308:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a30a:	697b      	ldr	r3, [r7, #20]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d002      	beq.n	800a316 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a310:	697b      	ldr	r3, [r7, #20]
 800a312:	2210      	movs	r2, #16
 800a314:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a316:	693b      	ldr	r3, [r7, #16]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d006      	beq.n	800a32a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a31c:	693b      	ldr	r3, [r7, #16]
 800a31e:	2200      	movs	r2, #0
 800a320:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a324:	711a      	strb	r2, [r3, #4]
 800a326:	2200      	movs	r2, #0
 800a328:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d006      	beq.n	800a33e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	2200      	movs	r2, #0
 800a334:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a338:	711a      	strb	r2, [r3, #4]
 800a33a:	2200      	movs	r2, #0
 800a33c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	2243      	movs	r2, #67	; 0x43
 800a342:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a344:	4b02      	ldr	r3, [pc, #8]	; (800a350 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800a346:	4618      	mov	r0, r3
 800a348:	3718      	adds	r7, #24
 800a34a:	46bd      	mov	sp, r7
 800a34c:	bd80      	pop	{r7, pc}
 800a34e:	bf00      	nop
 800a350:	24000070 	.word	0x24000070

0800a354 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a354:	b480      	push	{r7}
 800a356:	b083      	sub	sp, #12
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	220a      	movs	r2, #10
 800a360:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a362:	4b03      	ldr	r3, [pc, #12]	; (800a370 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a364:	4618      	mov	r0, r3
 800a366:	370c      	adds	r7, #12
 800a368:	46bd      	mov	sp, r7
 800a36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36e:	4770      	bx	lr
 800a370:	2400002c 	.word	0x2400002c

0800a374 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a374:	b480      	push	{r7}
 800a376:	b083      	sub	sp, #12
 800a378:	af00      	add	r7, sp, #0
 800a37a:	6078      	str	r0, [r7, #4]
 800a37c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a37e:	683b      	ldr	r3, [r7, #0]
 800a380:	2b00      	cmp	r3, #0
 800a382:	d101      	bne.n	800a388 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a384:	2303      	movs	r3, #3
 800a386:	e009      	b.n	800a39c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a38e:	687a      	ldr	r2, [r7, #4]
 800a390:	33b0      	adds	r3, #176	; 0xb0
 800a392:	009b      	lsls	r3, r3, #2
 800a394:	4413      	add	r3, r2
 800a396:	683a      	ldr	r2, [r7, #0]
 800a398:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800a39a:	2300      	movs	r3, #0
}
 800a39c:	4618      	mov	r0, r3
 800a39e:	370c      	adds	r7, #12
 800a3a0:	46bd      	mov	sp, r7
 800a3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a6:	4770      	bx	lr

0800a3a8 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a3a8:	b480      	push	{r7}
 800a3aa:	b087      	sub	sp, #28
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	60f8      	str	r0, [r7, #12]
 800a3b0:	60b9      	str	r1, [r7, #8]
 800a3b2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	32b0      	adds	r2, #176	; 0xb0
 800a3be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3c2:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800a3c4:	697b      	ldr	r3, [r7, #20]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d101      	bne.n	800a3ce <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a3ca:	2303      	movs	r3, #3
 800a3cc:	e008      	b.n	800a3e0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800a3ce:	697b      	ldr	r3, [r7, #20]
 800a3d0:	68ba      	ldr	r2, [r7, #8]
 800a3d2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a3d6:	697b      	ldr	r3, [r7, #20]
 800a3d8:	687a      	ldr	r2, [r7, #4]
 800a3da:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800a3de:	2300      	movs	r3, #0
}
 800a3e0:	4618      	mov	r0, r3
 800a3e2:	371c      	adds	r7, #28
 800a3e4:	46bd      	mov	sp, r7
 800a3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ea:	4770      	bx	lr

0800a3ec <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a3ec:	b480      	push	{r7}
 800a3ee:	b085      	sub	sp, #20
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	6078      	str	r0, [r7, #4]
 800a3f4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	32b0      	adds	r2, #176	; 0xb0
 800a400:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a404:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d101      	bne.n	800a410 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800a40c:	2303      	movs	r3, #3
 800a40e:	e004      	b.n	800a41a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	683a      	ldr	r2, [r7, #0]
 800a414:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800a418:	2300      	movs	r3, #0
}
 800a41a:	4618      	mov	r0, r3
 800a41c:	3714      	adds	r7, #20
 800a41e:	46bd      	mov	sp, r7
 800a420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a424:	4770      	bx	lr
	...

0800a428 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a428:	b580      	push	{r7, lr}
 800a42a:	b084      	sub	sp, #16
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	32b0      	adds	r2, #176	; 0xb0
 800a43a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a43e:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800a440:	2301      	movs	r3, #1
 800a442:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800a444:	68bb      	ldr	r3, [r7, #8]
 800a446:	2b00      	cmp	r3, #0
 800a448:	d101      	bne.n	800a44e <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a44a:	2303      	movs	r3, #3
 800a44c:	e025      	b.n	800a49a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800a44e:	68bb      	ldr	r3, [r7, #8]
 800a450:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a454:	2b00      	cmp	r3, #0
 800a456:	d11f      	bne.n	800a498 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800a458:	68bb      	ldr	r3, [r7, #8]
 800a45a:	2201      	movs	r2, #1
 800a45c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800a460:	4b10      	ldr	r3, [pc, #64]	; (800a4a4 <USBD_CDC_TransmitPacket+0x7c>)
 800a462:	781b      	ldrb	r3, [r3, #0]
 800a464:	f003 020f 	and.w	r2, r3, #15
 800a468:	68bb      	ldr	r3, [r7, #8]
 800a46a:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800a46e:	6878      	ldr	r0, [r7, #4]
 800a470:	4613      	mov	r3, r2
 800a472:	009b      	lsls	r3, r3, #2
 800a474:	4413      	add	r3, r2
 800a476:	009b      	lsls	r3, r3, #2
 800a478:	4403      	add	r3, r0
 800a47a:	3318      	adds	r3, #24
 800a47c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800a47e:	4b09      	ldr	r3, [pc, #36]	; (800a4a4 <USBD_CDC_TransmitPacket+0x7c>)
 800a480:	7819      	ldrb	r1, [r3, #0]
 800a482:	68bb      	ldr	r3, [r7, #8]
 800a484:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800a488:	68bb      	ldr	r3, [r7, #8]
 800a48a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a48e:	6878      	ldr	r0, [r7, #4]
 800a490:	f001 ffdf 	bl	800c452 <USBD_LL_Transmit>

    ret = USBD_OK;
 800a494:	2300      	movs	r3, #0
 800a496:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800a498:	7bfb      	ldrb	r3, [r7, #15]
}
 800a49a:	4618      	mov	r0, r3
 800a49c:	3710      	adds	r7, #16
 800a49e:	46bd      	mov	sp, r7
 800a4a0:	bd80      	pop	{r7, pc}
 800a4a2:	bf00      	nop
 800a4a4:	240000b3 	.word	0x240000b3

0800a4a8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a4a8:	b580      	push	{r7, lr}
 800a4aa:	b084      	sub	sp, #16
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	32b0      	adds	r2, #176	; 0xb0
 800a4ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4be:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	32b0      	adds	r2, #176	; 0xb0
 800a4ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d101      	bne.n	800a4d6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800a4d2:	2303      	movs	r3, #3
 800a4d4:	e018      	b.n	800a508 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	7c1b      	ldrb	r3, [r3, #16]
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d10a      	bne.n	800a4f4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a4de:	4b0c      	ldr	r3, [pc, #48]	; (800a510 <USBD_CDC_ReceivePacket+0x68>)
 800a4e0:	7819      	ldrb	r1, [r3, #0]
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a4e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a4ec:	6878      	ldr	r0, [r7, #4]
 800a4ee:	f001 ffd1 	bl	800c494 <USBD_LL_PrepareReceive>
 800a4f2:	e008      	b.n	800a506 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a4f4:	4b06      	ldr	r3, [pc, #24]	; (800a510 <USBD_CDC_ReceivePacket+0x68>)
 800a4f6:	7819      	ldrb	r1, [r3, #0]
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a4fe:	2340      	movs	r3, #64	; 0x40
 800a500:	6878      	ldr	r0, [r7, #4]
 800a502:	f001 ffc7 	bl	800c494 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a506:	2300      	movs	r3, #0
}
 800a508:	4618      	mov	r0, r3
 800a50a:	3710      	adds	r7, #16
 800a50c:	46bd      	mov	sp, r7
 800a50e:	bd80      	pop	{r7, pc}
 800a510:	240000b4 	.word	0x240000b4

0800a514 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a514:	b580      	push	{r7, lr}
 800a516:	b086      	sub	sp, #24
 800a518:	af00      	add	r7, sp, #0
 800a51a:	60f8      	str	r0, [r7, #12]
 800a51c:	60b9      	str	r1, [r7, #8]
 800a51e:	4613      	mov	r3, r2
 800a520:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	2b00      	cmp	r3, #0
 800a526:	d101      	bne.n	800a52c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a528:	2303      	movs	r3, #3
 800a52a:	e01f      	b.n	800a56c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	2200      	movs	r2, #0
 800a530:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	2200      	movs	r2, #0
 800a538:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	2200      	movs	r2, #0
 800a540:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a544:	68bb      	ldr	r3, [r7, #8]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d003      	beq.n	800a552 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	68ba      	ldr	r2, [r7, #8]
 800a54e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	2201      	movs	r2, #1
 800a556:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	79fa      	ldrb	r2, [r7, #7]
 800a55e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a560:	68f8      	ldr	r0, [r7, #12]
 800a562:	f001 fe3d 	bl	800c1e0 <USBD_LL_Init>
 800a566:	4603      	mov	r3, r0
 800a568:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a56a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a56c:	4618      	mov	r0, r3
 800a56e:	3718      	adds	r7, #24
 800a570:	46bd      	mov	sp, r7
 800a572:	bd80      	pop	{r7, pc}

0800a574 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a574:	b580      	push	{r7, lr}
 800a576:	b084      	sub	sp, #16
 800a578:	af00      	add	r7, sp, #0
 800a57a:	6078      	str	r0, [r7, #4]
 800a57c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a57e:	2300      	movs	r3, #0
 800a580:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a582:	683b      	ldr	r3, [r7, #0]
 800a584:	2b00      	cmp	r3, #0
 800a586:	d101      	bne.n	800a58c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a588:	2303      	movs	r3, #3
 800a58a:	e025      	b.n	800a5d8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	683a      	ldr	r2, [r7, #0]
 800a590:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	32ae      	adds	r2, #174	; 0xae
 800a59e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d00f      	beq.n	800a5c8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	32ae      	adds	r2, #174	; 0xae
 800a5b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5b8:	f107 020e 	add.w	r2, r7, #14
 800a5bc:	4610      	mov	r0, r2
 800a5be:	4798      	blx	r3
 800a5c0:	4602      	mov	r2, r0
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800a5ce:	1c5a      	adds	r2, r3, #1
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800a5d6:	2300      	movs	r3, #0
}
 800a5d8:	4618      	mov	r0, r3
 800a5da:	3710      	adds	r7, #16
 800a5dc:	46bd      	mov	sp, r7
 800a5de:	bd80      	pop	{r7, pc}

0800a5e0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b082      	sub	sp, #8
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a5e8:	6878      	ldr	r0, [r7, #4]
 800a5ea:	f001 fe49 	bl	800c280 <USBD_LL_Start>
 800a5ee:	4603      	mov	r3, r0
}
 800a5f0:	4618      	mov	r0, r3
 800a5f2:	3708      	adds	r7, #8
 800a5f4:	46bd      	mov	sp, r7
 800a5f6:	bd80      	pop	{r7, pc}

0800a5f8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800a5f8:	b480      	push	{r7}
 800a5fa:	b083      	sub	sp, #12
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a600:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800a602:	4618      	mov	r0, r3
 800a604:	370c      	adds	r7, #12
 800a606:	46bd      	mov	sp, r7
 800a608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a60c:	4770      	bx	lr

0800a60e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a60e:	b580      	push	{r7, lr}
 800a610:	b084      	sub	sp, #16
 800a612:	af00      	add	r7, sp, #0
 800a614:	6078      	str	r0, [r7, #4]
 800a616:	460b      	mov	r3, r1
 800a618:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a61a:	2300      	movs	r3, #0
 800a61c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a624:	2b00      	cmp	r3, #0
 800a626:	d009      	beq.n	800a63c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	78fa      	ldrb	r2, [r7, #3]
 800a632:	4611      	mov	r1, r2
 800a634:	6878      	ldr	r0, [r7, #4]
 800a636:	4798      	blx	r3
 800a638:	4603      	mov	r3, r0
 800a63a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a63c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a63e:	4618      	mov	r0, r3
 800a640:	3710      	adds	r7, #16
 800a642:	46bd      	mov	sp, r7
 800a644:	bd80      	pop	{r7, pc}

0800a646 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a646:	b580      	push	{r7, lr}
 800a648:	b084      	sub	sp, #16
 800a64a:	af00      	add	r7, sp, #0
 800a64c:	6078      	str	r0, [r7, #4]
 800a64e:	460b      	mov	r3, r1
 800a650:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a652:	2300      	movs	r3, #0
 800a654:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a65c:	685b      	ldr	r3, [r3, #4]
 800a65e:	78fa      	ldrb	r2, [r7, #3]
 800a660:	4611      	mov	r1, r2
 800a662:	6878      	ldr	r0, [r7, #4]
 800a664:	4798      	blx	r3
 800a666:	4603      	mov	r3, r0
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d001      	beq.n	800a670 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800a66c:	2303      	movs	r3, #3
 800a66e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a670:	7bfb      	ldrb	r3, [r7, #15]
}
 800a672:	4618      	mov	r0, r3
 800a674:	3710      	adds	r7, #16
 800a676:	46bd      	mov	sp, r7
 800a678:	bd80      	pop	{r7, pc}

0800a67a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a67a:	b580      	push	{r7, lr}
 800a67c:	b084      	sub	sp, #16
 800a67e:	af00      	add	r7, sp, #0
 800a680:	6078      	str	r0, [r7, #4]
 800a682:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a68a:	6839      	ldr	r1, [r7, #0]
 800a68c:	4618      	mov	r0, r3
 800a68e:	f001 f90e 	bl	800b8ae <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	2201      	movs	r2, #1
 800a696:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800a6a0:	461a      	mov	r2, r3
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a6ae:	f003 031f 	and.w	r3, r3, #31
 800a6b2:	2b02      	cmp	r3, #2
 800a6b4:	d01a      	beq.n	800a6ec <USBD_LL_SetupStage+0x72>
 800a6b6:	2b02      	cmp	r3, #2
 800a6b8:	d822      	bhi.n	800a700 <USBD_LL_SetupStage+0x86>
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d002      	beq.n	800a6c4 <USBD_LL_SetupStage+0x4a>
 800a6be:	2b01      	cmp	r3, #1
 800a6c0:	d00a      	beq.n	800a6d8 <USBD_LL_SetupStage+0x5e>
 800a6c2:	e01d      	b.n	800a700 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a6ca:	4619      	mov	r1, r3
 800a6cc:	6878      	ldr	r0, [r7, #4]
 800a6ce:	f000 fb65 	bl	800ad9c <USBD_StdDevReq>
 800a6d2:	4603      	mov	r3, r0
 800a6d4:	73fb      	strb	r3, [r7, #15]
      break;
 800a6d6:	e020      	b.n	800a71a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a6de:	4619      	mov	r1, r3
 800a6e0:	6878      	ldr	r0, [r7, #4]
 800a6e2:	f000 fbcd 	bl	800ae80 <USBD_StdItfReq>
 800a6e6:	4603      	mov	r3, r0
 800a6e8:	73fb      	strb	r3, [r7, #15]
      break;
 800a6ea:	e016      	b.n	800a71a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a6f2:	4619      	mov	r1, r3
 800a6f4:	6878      	ldr	r0, [r7, #4]
 800a6f6:	f000 fc2f 	bl	800af58 <USBD_StdEPReq>
 800a6fa:	4603      	mov	r3, r0
 800a6fc:	73fb      	strb	r3, [r7, #15]
      break;
 800a6fe:	e00c      	b.n	800a71a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a706:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a70a:	b2db      	uxtb	r3, r3
 800a70c:	4619      	mov	r1, r3
 800a70e:	6878      	ldr	r0, [r7, #4]
 800a710:	f001 fe16 	bl	800c340 <USBD_LL_StallEP>
 800a714:	4603      	mov	r3, r0
 800a716:	73fb      	strb	r3, [r7, #15]
      break;
 800a718:	bf00      	nop
  }

  return ret;
 800a71a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a71c:	4618      	mov	r0, r3
 800a71e:	3710      	adds	r7, #16
 800a720:	46bd      	mov	sp, r7
 800a722:	bd80      	pop	{r7, pc}

0800a724 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a724:	b580      	push	{r7, lr}
 800a726:	b086      	sub	sp, #24
 800a728:	af00      	add	r7, sp, #0
 800a72a:	60f8      	str	r0, [r7, #12]
 800a72c:	460b      	mov	r3, r1
 800a72e:	607a      	str	r2, [r7, #4]
 800a730:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800a732:	2300      	movs	r3, #0
 800a734:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800a736:	7afb      	ldrb	r3, [r7, #11]
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d16e      	bne.n	800a81a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a742:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a74a:	2b03      	cmp	r3, #3
 800a74c:	f040 8098 	bne.w	800a880 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800a750:	693b      	ldr	r3, [r7, #16]
 800a752:	689a      	ldr	r2, [r3, #8]
 800a754:	693b      	ldr	r3, [r7, #16]
 800a756:	68db      	ldr	r3, [r3, #12]
 800a758:	429a      	cmp	r2, r3
 800a75a:	d913      	bls.n	800a784 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800a75c:	693b      	ldr	r3, [r7, #16]
 800a75e:	689a      	ldr	r2, [r3, #8]
 800a760:	693b      	ldr	r3, [r7, #16]
 800a762:	68db      	ldr	r3, [r3, #12]
 800a764:	1ad2      	subs	r2, r2, r3
 800a766:	693b      	ldr	r3, [r7, #16]
 800a768:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a76a:	693b      	ldr	r3, [r7, #16]
 800a76c:	68da      	ldr	r2, [r3, #12]
 800a76e:	693b      	ldr	r3, [r7, #16]
 800a770:	689b      	ldr	r3, [r3, #8]
 800a772:	4293      	cmp	r3, r2
 800a774:	bf28      	it	cs
 800a776:	4613      	movcs	r3, r2
 800a778:	461a      	mov	r2, r3
 800a77a:	6879      	ldr	r1, [r7, #4]
 800a77c:	68f8      	ldr	r0, [r7, #12]
 800a77e:	f001 f98a 	bl	800ba96 <USBD_CtlContinueRx>
 800a782:	e07d      	b.n	800a880 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a78a:	f003 031f 	and.w	r3, r3, #31
 800a78e:	2b02      	cmp	r3, #2
 800a790:	d014      	beq.n	800a7bc <USBD_LL_DataOutStage+0x98>
 800a792:	2b02      	cmp	r3, #2
 800a794:	d81d      	bhi.n	800a7d2 <USBD_LL_DataOutStage+0xae>
 800a796:	2b00      	cmp	r3, #0
 800a798:	d002      	beq.n	800a7a0 <USBD_LL_DataOutStage+0x7c>
 800a79a:	2b01      	cmp	r3, #1
 800a79c:	d003      	beq.n	800a7a6 <USBD_LL_DataOutStage+0x82>
 800a79e:	e018      	b.n	800a7d2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	75bb      	strb	r3, [r7, #22]
            break;
 800a7a4:	e018      	b.n	800a7d8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a7ac:	b2db      	uxtb	r3, r3
 800a7ae:	4619      	mov	r1, r3
 800a7b0:	68f8      	ldr	r0, [r7, #12]
 800a7b2:	f000 fa64 	bl	800ac7e <USBD_CoreFindIF>
 800a7b6:	4603      	mov	r3, r0
 800a7b8:	75bb      	strb	r3, [r7, #22]
            break;
 800a7ba:	e00d      	b.n	800a7d8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a7c2:	b2db      	uxtb	r3, r3
 800a7c4:	4619      	mov	r1, r3
 800a7c6:	68f8      	ldr	r0, [r7, #12]
 800a7c8:	f000 fa66 	bl	800ac98 <USBD_CoreFindEP>
 800a7cc:	4603      	mov	r3, r0
 800a7ce:	75bb      	strb	r3, [r7, #22]
            break;
 800a7d0:	e002      	b.n	800a7d8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a7d2:	2300      	movs	r3, #0
 800a7d4:	75bb      	strb	r3, [r7, #22]
            break;
 800a7d6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a7d8:	7dbb      	ldrb	r3, [r7, #22]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d119      	bne.n	800a812 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a7e4:	b2db      	uxtb	r3, r3
 800a7e6:	2b03      	cmp	r3, #3
 800a7e8:	d113      	bne.n	800a812 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a7ea:	7dba      	ldrb	r2, [r7, #22]
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	32ae      	adds	r2, #174	; 0xae
 800a7f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7f4:	691b      	ldr	r3, [r3, #16]
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d00b      	beq.n	800a812 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800a7fa:	7dba      	ldrb	r2, [r7, #22]
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a802:	7dba      	ldrb	r2, [r7, #22]
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	32ae      	adds	r2, #174	; 0xae
 800a808:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a80c:	691b      	ldr	r3, [r3, #16]
 800a80e:	68f8      	ldr	r0, [r7, #12]
 800a810:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a812:	68f8      	ldr	r0, [r7, #12]
 800a814:	f001 f950 	bl	800bab8 <USBD_CtlSendStatus>
 800a818:	e032      	b.n	800a880 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a81a:	7afb      	ldrb	r3, [r7, #11]
 800a81c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a820:	b2db      	uxtb	r3, r3
 800a822:	4619      	mov	r1, r3
 800a824:	68f8      	ldr	r0, [r7, #12]
 800a826:	f000 fa37 	bl	800ac98 <USBD_CoreFindEP>
 800a82a:	4603      	mov	r3, r0
 800a82c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a82e:	7dbb      	ldrb	r3, [r7, #22]
 800a830:	2bff      	cmp	r3, #255	; 0xff
 800a832:	d025      	beq.n	800a880 <USBD_LL_DataOutStage+0x15c>
 800a834:	7dbb      	ldrb	r3, [r7, #22]
 800a836:	2b00      	cmp	r3, #0
 800a838:	d122      	bne.n	800a880 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a840:	b2db      	uxtb	r3, r3
 800a842:	2b03      	cmp	r3, #3
 800a844:	d117      	bne.n	800a876 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a846:	7dba      	ldrb	r2, [r7, #22]
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	32ae      	adds	r2, #174	; 0xae
 800a84c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a850:	699b      	ldr	r3, [r3, #24]
 800a852:	2b00      	cmp	r3, #0
 800a854:	d00f      	beq.n	800a876 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800a856:	7dba      	ldrb	r2, [r7, #22]
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a85e:	7dba      	ldrb	r2, [r7, #22]
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	32ae      	adds	r2, #174	; 0xae
 800a864:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a868:	699b      	ldr	r3, [r3, #24]
 800a86a:	7afa      	ldrb	r2, [r7, #11]
 800a86c:	4611      	mov	r1, r2
 800a86e:	68f8      	ldr	r0, [r7, #12]
 800a870:	4798      	blx	r3
 800a872:	4603      	mov	r3, r0
 800a874:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a876:	7dfb      	ldrb	r3, [r7, #23]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d001      	beq.n	800a880 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800a87c:	7dfb      	ldrb	r3, [r7, #23]
 800a87e:	e000      	b.n	800a882 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800a880:	2300      	movs	r3, #0
}
 800a882:	4618      	mov	r0, r3
 800a884:	3718      	adds	r7, #24
 800a886:	46bd      	mov	sp, r7
 800a888:	bd80      	pop	{r7, pc}

0800a88a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a88a:	b580      	push	{r7, lr}
 800a88c:	b086      	sub	sp, #24
 800a88e:	af00      	add	r7, sp, #0
 800a890:	60f8      	str	r0, [r7, #12]
 800a892:	460b      	mov	r3, r1
 800a894:	607a      	str	r2, [r7, #4]
 800a896:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800a898:	7afb      	ldrb	r3, [r7, #11]
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d16f      	bne.n	800a97e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	3314      	adds	r3, #20
 800a8a2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a8aa:	2b02      	cmp	r3, #2
 800a8ac:	d15a      	bne.n	800a964 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800a8ae:	693b      	ldr	r3, [r7, #16]
 800a8b0:	689a      	ldr	r2, [r3, #8]
 800a8b2:	693b      	ldr	r3, [r7, #16]
 800a8b4:	68db      	ldr	r3, [r3, #12]
 800a8b6:	429a      	cmp	r2, r3
 800a8b8:	d914      	bls.n	800a8e4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a8ba:	693b      	ldr	r3, [r7, #16]
 800a8bc:	689a      	ldr	r2, [r3, #8]
 800a8be:	693b      	ldr	r3, [r7, #16]
 800a8c0:	68db      	ldr	r3, [r3, #12]
 800a8c2:	1ad2      	subs	r2, r2, r3
 800a8c4:	693b      	ldr	r3, [r7, #16]
 800a8c6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a8c8:	693b      	ldr	r3, [r7, #16]
 800a8ca:	689b      	ldr	r3, [r3, #8]
 800a8cc:	461a      	mov	r2, r3
 800a8ce:	6879      	ldr	r1, [r7, #4]
 800a8d0:	68f8      	ldr	r0, [r7, #12]
 800a8d2:	f001 f8b2 	bl	800ba3a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	2200      	movs	r2, #0
 800a8da:	2100      	movs	r1, #0
 800a8dc:	68f8      	ldr	r0, [r7, #12]
 800a8de:	f001 fdd9 	bl	800c494 <USBD_LL_PrepareReceive>
 800a8e2:	e03f      	b.n	800a964 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a8e4:	693b      	ldr	r3, [r7, #16]
 800a8e6:	68da      	ldr	r2, [r3, #12]
 800a8e8:	693b      	ldr	r3, [r7, #16]
 800a8ea:	689b      	ldr	r3, [r3, #8]
 800a8ec:	429a      	cmp	r2, r3
 800a8ee:	d11c      	bne.n	800a92a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a8f0:	693b      	ldr	r3, [r7, #16]
 800a8f2:	685a      	ldr	r2, [r3, #4]
 800a8f4:	693b      	ldr	r3, [r7, #16]
 800a8f6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a8f8:	429a      	cmp	r2, r3
 800a8fa:	d316      	bcc.n	800a92a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a8fc:	693b      	ldr	r3, [r7, #16]
 800a8fe:	685a      	ldr	r2, [r3, #4]
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a906:	429a      	cmp	r2, r3
 800a908:	d20f      	bcs.n	800a92a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a90a:	2200      	movs	r2, #0
 800a90c:	2100      	movs	r1, #0
 800a90e:	68f8      	ldr	r0, [r7, #12]
 800a910:	f001 f893 	bl	800ba3a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	2200      	movs	r2, #0
 800a918:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a91c:	2300      	movs	r3, #0
 800a91e:	2200      	movs	r2, #0
 800a920:	2100      	movs	r1, #0
 800a922:	68f8      	ldr	r0, [r7, #12]
 800a924:	f001 fdb6 	bl	800c494 <USBD_LL_PrepareReceive>
 800a928:	e01c      	b.n	800a964 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a930:	b2db      	uxtb	r3, r3
 800a932:	2b03      	cmp	r3, #3
 800a934:	d10f      	bne.n	800a956 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a93c:	68db      	ldr	r3, [r3, #12]
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d009      	beq.n	800a956 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	2200      	movs	r2, #0
 800a946:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a950:	68db      	ldr	r3, [r3, #12]
 800a952:	68f8      	ldr	r0, [r7, #12]
 800a954:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a956:	2180      	movs	r1, #128	; 0x80
 800a958:	68f8      	ldr	r0, [r7, #12]
 800a95a:	f001 fcf1 	bl	800c340 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a95e:	68f8      	ldr	r0, [r7, #12]
 800a960:	f001 f8bd 	bl	800bade <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d03a      	beq.n	800a9e4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800a96e:	68f8      	ldr	r0, [r7, #12]
 800a970:	f7ff fe42 	bl	800a5f8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	2200      	movs	r2, #0
 800a978:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a97c:	e032      	b.n	800a9e4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a97e:	7afb      	ldrb	r3, [r7, #11]
 800a980:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a984:	b2db      	uxtb	r3, r3
 800a986:	4619      	mov	r1, r3
 800a988:	68f8      	ldr	r0, [r7, #12]
 800a98a:	f000 f985 	bl	800ac98 <USBD_CoreFindEP>
 800a98e:	4603      	mov	r3, r0
 800a990:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a992:	7dfb      	ldrb	r3, [r7, #23]
 800a994:	2bff      	cmp	r3, #255	; 0xff
 800a996:	d025      	beq.n	800a9e4 <USBD_LL_DataInStage+0x15a>
 800a998:	7dfb      	ldrb	r3, [r7, #23]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d122      	bne.n	800a9e4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a9a4:	b2db      	uxtb	r3, r3
 800a9a6:	2b03      	cmp	r3, #3
 800a9a8:	d11c      	bne.n	800a9e4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a9aa:	7dfa      	ldrb	r2, [r7, #23]
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	32ae      	adds	r2, #174	; 0xae
 800a9b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9b4:	695b      	ldr	r3, [r3, #20]
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d014      	beq.n	800a9e4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800a9ba:	7dfa      	ldrb	r2, [r7, #23]
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a9c2:	7dfa      	ldrb	r2, [r7, #23]
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	32ae      	adds	r2, #174	; 0xae
 800a9c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9cc:	695b      	ldr	r3, [r3, #20]
 800a9ce:	7afa      	ldrb	r2, [r7, #11]
 800a9d0:	4611      	mov	r1, r2
 800a9d2:	68f8      	ldr	r0, [r7, #12]
 800a9d4:	4798      	blx	r3
 800a9d6:	4603      	mov	r3, r0
 800a9d8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a9da:	7dbb      	ldrb	r3, [r7, #22]
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d001      	beq.n	800a9e4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800a9e0:	7dbb      	ldrb	r3, [r7, #22]
 800a9e2:	e000      	b.n	800a9e6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800a9e4:	2300      	movs	r3, #0
}
 800a9e6:	4618      	mov	r0, r3
 800a9e8:	3718      	adds	r7, #24
 800a9ea:	46bd      	mov	sp, r7
 800a9ec:	bd80      	pop	{r7, pc}

0800a9ee <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a9ee:	b580      	push	{r7, lr}
 800a9f0:	b084      	sub	sp, #16
 800a9f2:	af00      	add	r7, sp, #0
 800a9f4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a9f6:	2300      	movs	r3, #0
 800a9f8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	2201      	movs	r2, #1
 800a9fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	2200      	movs	r2, #0
 800aa06:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	2200      	movs	r2, #0
 800aa0e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	2200      	movs	r2, #0
 800aa14:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	2200      	movs	r2, #0
 800aa1c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d014      	beq.n	800aa54 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa30:	685b      	ldr	r3, [r3, #4]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d00e      	beq.n	800aa54 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa3c:	685b      	ldr	r3, [r3, #4]
 800aa3e:	687a      	ldr	r2, [r7, #4]
 800aa40:	6852      	ldr	r2, [r2, #4]
 800aa42:	b2d2      	uxtb	r2, r2
 800aa44:	4611      	mov	r1, r2
 800aa46:	6878      	ldr	r0, [r7, #4]
 800aa48:	4798      	blx	r3
 800aa4a:	4603      	mov	r3, r0
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d001      	beq.n	800aa54 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800aa50:	2303      	movs	r3, #3
 800aa52:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800aa54:	2340      	movs	r3, #64	; 0x40
 800aa56:	2200      	movs	r2, #0
 800aa58:	2100      	movs	r1, #0
 800aa5a:	6878      	ldr	r0, [r7, #4]
 800aa5c:	f001 fc2b 	bl	800c2b6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	2201      	movs	r2, #1
 800aa64:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	2240      	movs	r2, #64	; 0x40
 800aa6c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800aa70:	2340      	movs	r3, #64	; 0x40
 800aa72:	2200      	movs	r2, #0
 800aa74:	2180      	movs	r1, #128	; 0x80
 800aa76:	6878      	ldr	r0, [r7, #4]
 800aa78:	f001 fc1d 	bl	800c2b6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	2201      	movs	r2, #1
 800aa80:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	2240      	movs	r2, #64	; 0x40
 800aa86:	621a      	str	r2, [r3, #32]

  return ret;
 800aa88:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	3710      	adds	r7, #16
 800aa8e:	46bd      	mov	sp, r7
 800aa90:	bd80      	pop	{r7, pc}

0800aa92 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800aa92:	b480      	push	{r7}
 800aa94:	b083      	sub	sp, #12
 800aa96:	af00      	add	r7, sp, #0
 800aa98:	6078      	str	r0, [r7, #4]
 800aa9a:	460b      	mov	r3, r1
 800aa9c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	78fa      	ldrb	r2, [r7, #3]
 800aaa2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800aaa4:	2300      	movs	r3, #0
}
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	370c      	adds	r7, #12
 800aaaa:	46bd      	mov	sp, r7
 800aaac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab0:	4770      	bx	lr

0800aab2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800aab2:	b480      	push	{r7}
 800aab4:	b083      	sub	sp, #12
 800aab6:	af00      	add	r7, sp, #0
 800aab8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aac0:	b2db      	uxtb	r3, r3
 800aac2:	2b04      	cmp	r3, #4
 800aac4:	d006      	beq.n	800aad4 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aacc:	b2da      	uxtb	r2, r3
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	2204      	movs	r2, #4
 800aad8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800aadc:	2300      	movs	r3, #0
}
 800aade:	4618      	mov	r0, r3
 800aae0:	370c      	adds	r7, #12
 800aae2:	46bd      	mov	sp, r7
 800aae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae8:	4770      	bx	lr

0800aaea <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800aaea:	b480      	push	{r7}
 800aaec:	b083      	sub	sp, #12
 800aaee:	af00      	add	r7, sp, #0
 800aaf0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aaf8:	b2db      	uxtb	r3, r3
 800aafa:	2b04      	cmp	r3, #4
 800aafc:	d106      	bne.n	800ab0c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800ab04:	b2da      	uxtb	r2, r3
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800ab0c:	2300      	movs	r3, #0
}
 800ab0e:	4618      	mov	r0, r3
 800ab10:	370c      	adds	r7, #12
 800ab12:	46bd      	mov	sp, r7
 800ab14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab18:	4770      	bx	lr

0800ab1a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ab1a:	b580      	push	{r7, lr}
 800ab1c:	b082      	sub	sp, #8
 800ab1e:	af00      	add	r7, sp, #0
 800ab20:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab28:	b2db      	uxtb	r3, r3
 800ab2a:	2b03      	cmp	r3, #3
 800ab2c:	d110      	bne.n	800ab50 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d00b      	beq.n	800ab50 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab3e:	69db      	ldr	r3, [r3, #28]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d005      	beq.n	800ab50 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab4a:	69db      	ldr	r3, [r3, #28]
 800ab4c:	6878      	ldr	r0, [r7, #4]
 800ab4e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800ab50:	2300      	movs	r3, #0
}
 800ab52:	4618      	mov	r0, r3
 800ab54:	3708      	adds	r7, #8
 800ab56:	46bd      	mov	sp, r7
 800ab58:	bd80      	pop	{r7, pc}

0800ab5a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800ab5a:	b580      	push	{r7, lr}
 800ab5c:	b082      	sub	sp, #8
 800ab5e:	af00      	add	r7, sp, #0
 800ab60:	6078      	str	r0, [r7, #4]
 800ab62:	460b      	mov	r3, r1
 800ab64:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	32ae      	adds	r2, #174	; 0xae
 800ab70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d101      	bne.n	800ab7c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800ab78:	2303      	movs	r3, #3
 800ab7a:	e01c      	b.n	800abb6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab82:	b2db      	uxtb	r3, r3
 800ab84:	2b03      	cmp	r3, #3
 800ab86:	d115      	bne.n	800abb4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	32ae      	adds	r2, #174	; 0xae
 800ab92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab96:	6a1b      	ldr	r3, [r3, #32]
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d00b      	beq.n	800abb4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	32ae      	adds	r2, #174	; 0xae
 800aba6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abaa:	6a1b      	ldr	r3, [r3, #32]
 800abac:	78fa      	ldrb	r2, [r7, #3]
 800abae:	4611      	mov	r1, r2
 800abb0:	6878      	ldr	r0, [r7, #4]
 800abb2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800abb4:	2300      	movs	r3, #0
}
 800abb6:	4618      	mov	r0, r3
 800abb8:	3708      	adds	r7, #8
 800abba:	46bd      	mov	sp, r7
 800abbc:	bd80      	pop	{r7, pc}

0800abbe <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800abbe:	b580      	push	{r7, lr}
 800abc0:	b082      	sub	sp, #8
 800abc2:	af00      	add	r7, sp, #0
 800abc4:	6078      	str	r0, [r7, #4]
 800abc6:	460b      	mov	r3, r1
 800abc8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	32ae      	adds	r2, #174	; 0xae
 800abd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d101      	bne.n	800abe0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800abdc:	2303      	movs	r3, #3
 800abde:	e01c      	b.n	800ac1a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800abe6:	b2db      	uxtb	r3, r3
 800abe8:	2b03      	cmp	r3, #3
 800abea:	d115      	bne.n	800ac18 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	32ae      	adds	r2, #174	; 0xae
 800abf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d00b      	beq.n	800ac18 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	32ae      	adds	r2, #174	; 0xae
 800ac0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac10:	78fa      	ldrb	r2, [r7, #3]
 800ac12:	4611      	mov	r1, r2
 800ac14:	6878      	ldr	r0, [r7, #4]
 800ac16:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ac18:	2300      	movs	r3, #0
}
 800ac1a:	4618      	mov	r0, r3
 800ac1c:	3708      	adds	r7, #8
 800ac1e:	46bd      	mov	sp, r7
 800ac20:	bd80      	pop	{r7, pc}

0800ac22 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800ac22:	b480      	push	{r7}
 800ac24:	b083      	sub	sp, #12
 800ac26:	af00      	add	r7, sp, #0
 800ac28:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ac2a:	2300      	movs	r3, #0
}
 800ac2c:	4618      	mov	r0, r3
 800ac2e:	370c      	adds	r7, #12
 800ac30:	46bd      	mov	sp, r7
 800ac32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac36:	4770      	bx	lr

0800ac38 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800ac38:	b580      	push	{r7, lr}
 800ac3a:	b084      	sub	sp, #16
 800ac3c:	af00      	add	r7, sp, #0
 800ac3e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800ac40:	2300      	movs	r3, #0
 800ac42:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	2201      	movs	r2, #1
 800ac48:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d00e      	beq.n	800ac74 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac5c:	685b      	ldr	r3, [r3, #4]
 800ac5e:	687a      	ldr	r2, [r7, #4]
 800ac60:	6852      	ldr	r2, [r2, #4]
 800ac62:	b2d2      	uxtb	r2, r2
 800ac64:	4611      	mov	r1, r2
 800ac66:	6878      	ldr	r0, [r7, #4]
 800ac68:	4798      	blx	r3
 800ac6a:	4603      	mov	r3, r0
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d001      	beq.n	800ac74 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800ac70:	2303      	movs	r3, #3
 800ac72:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ac74:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac76:	4618      	mov	r0, r3
 800ac78:	3710      	adds	r7, #16
 800ac7a:	46bd      	mov	sp, r7
 800ac7c:	bd80      	pop	{r7, pc}

0800ac7e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ac7e:	b480      	push	{r7}
 800ac80:	b083      	sub	sp, #12
 800ac82:	af00      	add	r7, sp, #0
 800ac84:	6078      	str	r0, [r7, #4]
 800ac86:	460b      	mov	r3, r1
 800ac88:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ac8a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ac8c:	4618      	mov	r0, r3
 800ac8e:	370c      	adds	r7, #12
 800ac90:	46bd      	mov	sp, r7
 800ac92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac96:	4770      	bx	lr

0800ac98 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ac98:	b480      	push	{r7}
 800ac9a:	b083      	sub	sp, #12
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	6078      	str	r0, [r7, #4]
 800aca0:	460b      	mov	r3, r1
 800aca2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800aca4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800aca6:	4618      	mov	r0, r3
 800aca8:	370c      	adds	r7, #12
 800acaa:	46bd      	mov	sp, r7
 800acac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb0:	4770      	bx	lr

0800acb2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800acb2:	b580      	push	{r7, lr}
 800acb4:	b086      	sub	sp, #24
 800acb6:	af00      	add	r7, sp, #0
 800acb8:	6078      	str	r0, [r7, #4]
 800acba:	460b      	mov	r3, r1
 800acbc:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800acc6:	2300      	movs	r3, #0
 800acc8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	885b      	ldrh	r3, [r3, #2]
 800acce:	b29a      	uxth	r2, r3
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	781b      	ldrb	r3, [r3, #0]
 800acd4:	b29b      	uxth	r3, r3
 800acd6:	429a      	cmp	r2, r3
 800acd8:	d920      	bls.n	800ad1c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	781b      	ldrb	r3, [r3, #0]
 800acde:	b29b      	uxth	r3, r3
 800ace0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800ace2:	e013      	b.n	800ad0c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800ace4:	f107 030a 	add.w	r3, r7, #10
 800ace8:	4619      	mov	r1, r3
 800acea:	6978      	ldr	r0, [r7, #20]
 800acec:	f000 f81b 	bl	800ad26 <USBD_GetNextDesc>
 800acf0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800acf2:	697b      	ldr	r3, [r7, #20]
 800acf4:	785b      	ldrb	r3, [r3, #1]
 800acf6:	2b05      	cmp	r3, #5
 800acf8:	d108      	bne.n	800ad0c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800acfa:	697b      	ldr	r3, [r7, #20]
 800acfc:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800acfe:	693b      	ldr	r3, [r7, #16]
 800ad00:	789b      	ldrb	r3, [r3, #2]
 800ad02:	78fa      	ldrb	r2, [r7, #3]
 800ad04:	429a      	cmp	r2, r3
 800ad06:	d008      	beq.n	800ad1a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800ad08:	2300      	movs	r3, #0
 800ad0a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	885b      	ldrh	r3, [r3, #2]
 800ad10:	b29a      	uxth	r2, r3
 800ad12:	897b      	ldrh	r3, [r7, #10]
 800ad14:	429a      	cmp	r2, r3
 800ad16:	d8e5      	bhi.n	800ace4 <USBD_GetEpDesc+0x32>
 800ad18:	e000      	b.n	800ad1c <USBD_GetEpDesc+0x6a>
          break;
 800ad1a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800ad1c:	693b      	ldr	r3, [r7, #16]
}
 800ad1e:	4618      	mov	r0, r3
 800ad20:	3718      	adds	r7, #24
 800ad22:	46bd      	mov	sp, r7
 800ad24:	bd80      	pop	{r7, pc}

0800ad26 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800ad26:	b480      	push	{r7}
 800ad28:	b085      	sub	sp, #20
 800ad2a:	af00      	add	r7, sp, #0
 800ad2c:	6078      	str	r0, [r7, #4]
 800ad2e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800ad34:	683b      	ldr	r3, [r7, #0]
 800ad36:	881a      	ldrh	r2, [r3, #0]
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	781b      	ldrb	r3, [r3, #0]
 800ad3c:	b29b      	uxth	r3, r3
 800ad3e:	4413      	add	r3, r2
 800ad40:	b29a      	uxth	r2, r3
 800ad42:	683b      	ldr	r3, [r7, #0]
 800ad44:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	781b      	ldrb	r3, [r3, #0]
 800ad4a:	461a      	mov	r2, r3
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	4413      	add	r3, r2
 800ad50:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800ad52:	68fb      	ldr	r3, [r7, #12]
}
 800ad54:	4618      	mov	r0, r3
 800ad56:	3714      	adds	r7, #20
 800ad58:	46bd      	mov	sp, r7
 800ad5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad5e:	4770      	bx	lr

0800ad60 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ad60:	b480      	push	{r7}
 800ad62:	b087      	sub	sp, #28
 800ad64:	af00      	add	r7, sp, #0
 800ad66:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ad6c:	697b      	ldr	r3, [r7, #20]
 800ad6e:	781b      	ldrb	r3, [r3, #0]
 800ad70:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800ad72:	697b      	ldr	r3, [r7, #20]
 800ad74:	3301      	adds	r3, #1
 800ad76:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800ad78:	697b      	ldr	r3, [r7, #20]
 800ad7a:	781b      	ldrb	r3, [r3, #0]
 800ad7c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ad7e:	8a3b      	ldrh	r3, [r7, #16]
 800ad80:	021b      	lsls	r3, r3, #8
 800ad82:	b21a      	sxth	r2, r3
 800ad84:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ad88:	4313      	orrs	r3, r2
 800ad8a:	b21b      	sxth	r3, r3
 800ad8c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ad8e:	89fb      	ldrh	r3, [r7, #14]
}
 800ad90:	4618      	mov	r0, r3
 800ad92:	371c      	adds	r7, #28
 800ad94:	46bd      	mov	sp, r7
 800ad96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad9a:	4770      	bx	lr

0800ad9c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad9c:	b580      	push	{r7, lr}
 800ad9e:	b084      	sub	sp, #16
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	6078      	str	r0, [r7, #4]
 800ada4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ada6:	2300      	movs	r3, #0
 800ada8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800adaa:	683b      	ldr	r3, [r7, #0]
 800adac:	781b      	ldrb	r3, [r3, #0]
 800adae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800adb2:	2b40      	cmp	r3, #64	; 0x40
 800adb4:	d005      	beq.n	800adc2 <USBD_StdDevReq+0x26>
 800adb6:	2b40      	cmp	r3, #64	; 0x40
 800adb8:	d857      	bhi.n	800ae6a <USBD_StdDevReq+0xce>
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d00f      	beq.n	800adde <USBD_StdDevReq+0x42>
 800adbe:	2b20      	cmp	r3, #32
 800adc0:	d153      	bne.n	800ae6a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	32ae      	adds	r2, #174	; 0xae
 800adcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800add0:	689b      	ldr	r3, [r3, #8]
 800add2:	6839      	ldr	r1, [r7, #0]
 800add4:	6878      	ldr	r0, [r7, #4]
 800add6:	4798      	blx	r3
 800add8:	4603      	mov	r3, r0
 800adda:	73fb      	strb	r3, [r7, #15]
      break;
 800addc:	e04a      	b.n	800ae74 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800adde:	683b      	ldr	r3, [r7, #0]
 800ade0:	785b      	ldrb	r3, [r3, #1]
 800ade2:	2b09      	cmp	r3, #9
 800ade4:	d83b      	bhi.n	800ae5e <USBD_StdDevReq+0xc2>
 800ade6:	a201      	add	r2, pc, #4	; (adr r2, 800adec <USBD_StdDevReq+0x50>)
 800ade8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adec:	0800ae41 	.word	0x0800ae41
 800adf0:	0800ae55 	.word	0x0800ae55
 800adf4:	0800ae5f 	.word	0x0800ae5f
 800adf8:	0800ae4b 	.word	0x0800ae4b
 800adfc:	0800ae5f 	.word	0x0800ae5f
 800ae00:	0800ae1f 	.word	0x0800ae1f
 800ae04:	0800ae15 	.word	0x0800ae15
 800ae08:	0800ae5f 	.word	0x0800ae5f
 800ae0c:	0800ae37 	.word	0x0800ae37
 800ae10:	0800ae29 	.word	0x0800ae29
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800ae14:	6839      	ldr	r1, [r7, #0]
 800ae16:	6878      	ldr	r0, [r7, #4]
 800ae18:	f000 fa3c 	bl	800b294 <USBD_GetDescriptor>
          break;
 800ae1c:	e024      	b.n	800ae68 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800ae1e:	6839      	ldr	r1, [r7, #0]
 800ae20:	6878      	ldr	r0, [r7, #4]
 800ae22:	f000 fba1 	bl	800b568 <USBD_SetAddress>
          break;
 800ae26:	e01f      	b.n	800ae68 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800ae28:	6839      	ldr	r1, [r7, #0]
 800ae2a:	6878      	ldr	r0, [r7, #4]
 800ae2c:	f000 fbe0 	bl	800b5f0 <USBD_SetConfig>
 800ae30:	4603      	mov	r3, r0
 800ae32:	73fb      	strb	r3, [r7, #15]
          break;
 800ae34:	e018      	b.n	800ae68 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800ae36:	6839      	ldr	r1, [r7, #0]
 800ae38:	6878      	ldr	r0, [r7, #4]
 800ae3a:	f000 fc83 	bl	800b744 <USBD_GetConfig>
          break;
 800ae3e:	e013      	b.n	800ae68 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ae40:	6839      	ldr	r1, [r7, #0]
 800ae42:	6878      	ldr	r0, [r7, #4]
 800ae44:	f000 fcb4 	bl	800b7b0 <USBD_GetStatus>
          break;
 800ae48:	e00e      	b.n	800ae68 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800ae4a:	6839      	ldr	r1, [r7, #0]
 800ae4c:	6878      	ldr	r0, [r7, #4]
 800ae4e:	f000 fce3 	bl	800b818 <USBD_SetFeature>
          break;
 800ae52:	e009      	b.n	800ae68 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800ae54:	6839      	ldr	r1, [r7, #0]
 800ae56:	6878      	ldr	r0, [r7, #4]
 800ae58:	f000 fd07 	bl	800b86a <USBD_ClrFeature>
          break;
 800ae5c:	e004      	b.n	800ae68 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800ae5e:	6839      	ldr	r1, [r7, #0]
 800ae60:	6878      	ldr	r0, [r7, #4]
 800ae62:	f000 fd5e 	bl	800b922 <USBD_CtlError>
          break;
 800ae66:	bf00      	nop
      }
      break;
 800ae68:	e004      	b.n	800ae74 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800ae6a:	6839      	ldr	r1, [r7, #0]
 800ae6c:	6878      	ldr	r0, [r7, #4]
 800ae6e:	f000 fd58 	bl	800b922 <USBD_CtlError>
      break;
 800ae72:	bf00      	nop
  }

  return ret;
 800ae74:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae76:	4618      	mov	r0, r3
 800ae78:	3710      	adds	r7, #16
 800ae7a:	46bd      	mov	sp, r7
 800ae7c:	bd80      	pop	{r7, pc}
 800ae7e:	bf00      	nop

0800ae80 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae80:	b580      	push	{r7, lr}
 800ae82:	b084      	sub	sp, #16
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	6078      	str	r0, [r7, #4]
 800ae88:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ae8e:	683b      	ldr	r3, [r7, #0]
 800ae90:	781b      	ldrb	r3, [r3, #0]
 800ae92:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ae96:	2b40      	cmp	r3, #64	; 0x40
 800ae98:	d005      	beq.n	800aea6 <USBD_StdItfReq+0x26>
 800ae9a:	2b40      	cmp	r3, #64	; 0x40
 800ae9c:	d852      	bhi.n	800af44 <USBD_StdItfReq+0xc4>
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d001      	beq.n	800aea6 <USBD_StdItfReq+0x26>
 800aea2:	2b20      	cmp	r3, #32
 800aea4:	d14e      	bne.n	800af44 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aeac:	b2db      	uxtb	r3, r3
 800aeae:	3b01      	subs	r3, #1
 800aeb0:	2b02      	cmp	r3, #2
 800aeb2:	d840      	bhi.n	800af36 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800aeb4:	683b      	ldr	r3, [r7, #0]
 800aeb6:	889b      	ldrh	r3, [r3, #4]
 800aeb8:	b2db      	uxtb	r3, r3
 800aeba:	2b01      	cmp	r3, #1
 800aebc:	d836      	bhi.n	800af2c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800aebe:	683b      	ldr	r3, [r7, #0]
 800aec0:	889b      	ldrh	r3, [r3, #4]
 800aec2:	b2db      	uxtb	r3, r3
 800aec4:	4619      	mov	r1, r3
 800aec6:	6878      	ldr	r0, [r7, #4]
 800aec8:	f7ff fed9 	bl	800ac7e <USBD_CoreFindIF>
 800aecc:	4603      	mov	r3, r0
 800aece:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800aed0:	7bbb      	ldrb	r3, [r7, #14]
 800aed2:	2bff      	cmp	r3, #255	; 0xff
 800aed4:	d01d      	beq.n	800af12 <USBD_StdItfReq+0x92>
 800aed6:	7bbb      	ldrb	r3, [r7, #14]
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d11a      	bne.n	800af12 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800aedc:	7bba      	ldrb	r2, [r7, #14]
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	32ae      	adds	r2, #174	; 0xae
 800aee2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aee6:	689b      	ldr	r3, [r3, #8]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d00f      	beq.n	800af0c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800aeec:	7bba      	ldrb	r2, [r7, #14]
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800aef4:	7bba      	ldrb	r2, [r7, #14]
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	32ae      	adds	r2, #174	; 0xae
 800aefa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aefe:	689b      	ldr	r3, [r3, #8]
 800af00:	6839      	ldr	r1, [r7, #0]
 800af02:	6878      	ldr	r0, [r7, #4]
 800af04:	4798      	blx	r3
 800af06:	4603      	mov	r3, r0
 800af08:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800af0a:	e004      	b.n	800af16 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800af0c:	2303      	movs	r3, #3
 800af0e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800af10:	e001      	b.n	800af16 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800af12:	2303      	movs	r3, #3
 800af14:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800af16:	683b      	ldr	r3, [r7, #0]
 800af18:	88db      	ldrh	r3, [r3, #6]
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d110      	bne.n	800af40 <USBD_StdItfReq+0xc0>
 800af1e:	7bfb      	ldrb	r3, [r7, #15]
 800af20:	2b00      	cmp	r3, #0
 800af22:	d10d      	bne.n	800af40 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800af24:	6878      	ldr	r0, [r7, #4]
 800af26:	f000 fdc7 	bl	800bab8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800af2a:	e009      	b.n	800af40 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800af2c:	6839      	ldr	r1, [r7, #0]
 800af2e:	6878      	ldr	r0, [r7, #4]
 800af30:	f000 fcf7 	bl	800b922 <USBD_CtlError>
          break;
 800af34:	e004      	b.n	800af40 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800af36:	6839      	ldr	r1, [r7, #0]
 800af38:	6878      	ldr	r0, [r7, #4]
 800af3a:	f000 fcf2 	bl	800b922 <USBD_CtlError>
          break;
 800af3e:	e000      	b.n	800af42 <USBD_StdItfReq+0xc2>
          break;
 800af40:	bf00      	nop
      }
      break;
 800af42:	e004      	b.n	800af4e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800af44:	6839      	ldr	r1, [r7, #0]
 800af46:	6878      	ldr	r0, [r7, #4]
 800af48:	f000 fceb 	bl	800b922 <USBD_CtlError>
      break;
 800af4c:	bf00      	nop
  }

  return ret;
 800af4e:	7bfb      	ldrb	r3, [r7, #15]
}
 800af50:	4618      	mov	r0, r3
 800af52:	3710      	adds	r7, #16
 800af54:	46bd      	mov	sp, r7
 800af56:	bd80      	pop	{r7, pc}

0800af58 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af58:	b580      	push	{r7, lr}
 800af5a:	b084      	sub	sp, #16
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	6078      	str	r0, [r7, #4]
 800af60:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800af62:	2300      	movs	r3, #0
 800af64:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800af66:	683b      	ldr	r3, [r7, #0]
 800af68:	889b      	ldrh	r3, [r3, #4]
 800af6a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800af6c:	683b      	ldr	r3, [r7, #0]
 800af6e:	781b      	ldrb	r3, [r3, #0]
 800af70:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800af74:	2b40      	cmp	r3, #64	; 0x40
 800af76:	d007      	beq.n	800af88 <USBD_StdEPReq+0x30>
 800af78:	2b40      	cmp	r3, #64	; 0x40
 800af7a:	f200 817f 	bhi.w	800b27c <USBD_StdEPReq+0x324>
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d02a      	beq.n	800afd8 <USBD_StdEPReq+0x80>
 800af82:	2b20      	cmp	r3, #32
 800af84:	f040 817a 	bne.w	800b27c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800af88:	7bbb      	ldrb	r3, [r7, #14]
 800af8a:	4619      	mov	r1, r3
 800af8c:	6878      	ldr	r0, [r7, #4]
 800af8e:	f7ff fe83 	bl	800ac98 <USBD_CoreFindEP>
 800af92:	4603      	mov	r3, r0
 800af94:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800af96:	7b7b      	ldrb	r3, [r7, #13]
 800af98:	2bff      	cmp	r3, #255	; 0xff
 800af9a:	f000 8174 	beq.w	800b286 <USBD_StdEPReq+0x32e>
 800af9e:	7b7b      	ldrb	r3, [r7, #13]
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	f040 8170 	bne.w	800b286 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800afa6:	7b7a      	ldrb	r2, [r7, #13]
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800afae:	7b7a      	ldrb	r2, [r7, #13]
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	32ae      	adds	r2, #174	; 0xae
 800afb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afb8:	689b      	ldr	r3, [r3, #8]
 800afba:	2b00      	cmp	r3, #0
 800afbc:	f000 8163 	beq.w	800b286 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800afc0:	7b7a      	ldrb	r2, [r7, #13]
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	32ae      	adds	r2, #174	; 0xae
 800afc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afca:	689b      	ldr	r3, [r3, #8]
 800afcc:	6839      	ldr	r1, [r7, #0]
 800afce:	6878      	ldr	r0, [r7, #4]
 800afd0:	4798      	blx	r3
 800afd2:	4603      	mov	r3, r0
 800afd4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800afd6:	e156      	b.n	800b286 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800afd8:	683b      	ldr	r3, [r7, #0]
 800afda:	785b      	ldrb	r3, [r3, #1]
 800afdc:	2b03      	cmp	r3, #3
 800afde:	d008      	beq.n	800aff2 <USBD_StdEPReq+0x9a>
 800afe0:	2b03      	cmp	r3, #3
 800afe2:	f300 8145 	bgt.w	800b270 <USBD_StdEPReq+0x318>
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	f000 809b 	beq.w	800b122 <USBD_StdEPReq+0x1ca>
 800afec:	2b01      	cmp	r3, #1
 800afee:	d03c      	beq.n	800b06a <USBD_StdEPReq+0x112>
 800aff0:	e13e      	b.n	800b270 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aff8:	b2db      	uxtb	r3, r3
 800affa:	2b02      	cmp	r3, #2
 800affc:	d002      	beq.n	800b004 <USBD_StdEPReq+0xac>
 800affe:	2b03      	cmp	r3, #3
 800b000:	d016      	beq.n	800b030 <USBD_StdEPReq+0xd8>
 800b002:	e02c      	b.n	800b05e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b004:	7bbb      	ldrb	r3, [r7, #14]
 800b006:	2b00      	cmp	r3, #0
 800b008:	d00d      	beq.n	800b026 <USBD_StdEPReq+0xce>
 800b00a:	7bbb      	ldrb	r3, [r7, #14]
 800b00c:	2b80      	cmp	r3, #128	; 0x80
 800b00e:	d00a      	beq.n	800b026 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b010:	7bbb      	ldrb	r3, [r7, #14]
 800b012:	4619      	mov	r1, r3
 800b014:	6878      	ldr	r0, [r7, #4]
 800b016:	f001 f993 	bl	800c340 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b01a:	2180      	movs	r1, #128	; 0x80
 800b01c:	6878      	ldr	r0, [r7, #4]
 800b01e:	f001 f98f 	bl	800c340 <USBD_LL_StallEP>
 800b022:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b024:	e020      	b.n	800b068 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800b026:	6839      	ldr	r1, [r7, #0]
 800b028:	6878      	ldr	r0, [r7, #4]
 800b02a:	f000 fc7a 	bl	800b922 <USBD_CtlError>
              break;
 800b02e:	e01b      	b.n	800b068 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b030:	683b      	ldr	r3, [r7, #0]
 800b032:	885b      	ldrh	r3, [r3, #2]
 800b034:	2b00      	cmp	r3, #0
 800b036:	d10e      	bne.n	800b056 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b038:	7bbb      	ldrb	r3, [r7, #14]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d00b      	beq.n	800b056 <USBD_StdEPReq+0xfe>
 800b03e:	7bbb      	ldrb	r3, [r7, #14]
 800b040:	2b80      	cmp	r3, #128	; 0x80
 800b042:	d008      	beq.n	800b056 <USBD_StdEPReq+0xfe>
 800b044:	683b      	ldr	r3, [r7, #0]
 800b046:	88db      	ldrh	r3, [r3, #6]
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d104      	bne.n	800b056 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b04c:	7bbb      	ldrb	r3, [r7, #14]
 800b04e:	4619      	mov	r1, r3
 800b050:	6878      	ldr	r0, [r7, #4]
 800b052:	f001 f975 	bl	800c340 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b056:	6878      	ldr	r0, [r7, #4]
 800b058:	f000 fd2e 	bl	800bab8 <USBD_CtlSendStatus>

              break;
 800b05c:	e004      	b.n	800b068 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800b05e:	6839      	ldr	r1, [r7, #0]
 800b060:	6878      	ldr	r0, [r7, #4]
 800b062:	f000 fc5e 	bl	800b922 <USBD_CtlError>
              break;
 800b066:	bf00      	nop
          }
          break;
 800b068:	e107      	b.n	800b27a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b070:	b2db      	uxtb	r3, r3
 800b072:	2b02      	cmp	r3, #2
 800b074:	d002      	beq.n	800b07c <USBD_StdEPReq+0x124>
 800b076:	2b03      	cmp	r3, #3
 800b078:	d016      	beq.n	800b0a8 <USBD_StdEPReq+0x150>
 800b07a:	e04b      	b.n	800b114 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b07c:	7bbb      	ldrb	r3, [r7, #14]
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d00d      	beq.n	800b09e <USBD_StdEPReq+0x146>
 800b082:	7bbb      	ldrb	r3, [r7, #14]
 800b084:	2b80      	cmp	r3, #128	; 0x80
 800b086:	d00a      	beq.n	800b09e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b088:	7bbb      	ldrb	r3, [r7, #14]
 800b08a:	4619      	mov	r1, r3
 800b08c:	6878      	ldr	r0, [r7, #4]
 800b08e:	f001 f957 	bl	800c340 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b092:	2180      	movs	r1, #128	; 0x80
 800b094:	6878      	ldr	r0, [r7, #4]
 800b096:	f001 f953 	bl	800c340 <USBD_LL_StallEP>
 800b09a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b09c:	e040      	b.n	800b120 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800b09e:	6839      	ldr	r1, [r7, #0]
 800b0a0:	6878      	ldr	r0, [r7, #4]
 800b0a2:	f000 fc3e 	bl	800b922 <USBD_CtlError>
              break;
 800b0a6:	e03b      	b.n	800b120 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b0a8:	683b      	ldr	r3, [r7, #0]
 800b0aa:	885b      	ldrh	r3, [r3, #2]
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d136      	bne.n	800b11e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b0b0:	7bbb      	ldrb	r3, [r7, #14]
 800b0b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d004      	beq.n	800b0c4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b0ba:	7bbb      	ldrb	r3, [r7, #14]
 800b0bc:	4619      	mov	r1, r3
 800b0be:	6878      	ldr	r0, [r7, #4]
 800b0c0:	f001 f95d 	bl	800c37e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b0c4:	6878      	ldr	r0, [r7, #4]
 800b0c6:	f000 fcf7 	bl	800bab8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800b0ca:	7bbb      	ldrb	r3, [r7, #14]
 800b0cc:	4619      	mov	r1, r3
 800b0ce:	6878      	ldr	r0, [r7, #4]
 800b0d0:	f7ff fde2 	bl	800ac98 <USBD_CoreFindEP>
 800b0d4:	4603      	mov	r3, r0
 800b0d6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b0d8:	7b7b      	ldrb	r3, [r7, #13]
 800b0da:	2bff      	cmp	r3, #255	; 0xff
 800b0dc:	d01f      	beq.n	800b11e <USBD_StdEPReq+0x1c6>
 800b0de:	7b7b      	ldrb	r3, [r7, #13]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d11c      	bne.n	800b11e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800b0e4:	7b7a      	ldrb	r2, [r7, #13]
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800b0ec:	7b7a      	ldrb	r2, [r7, #13]
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	32ae      	adds	r2, #174	; 0xae
 800b0f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0f6:	689b      	ldr	r3, [r3, #8]
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d010      	beq.n	800b11e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b0fc:	7b7a      	ldrb	r2, [r7, #13]
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	32ae      	adds	r2, #174	; 0xae
 800b102:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b106:	689b      	ldr	r3, [r3, #8]
 800b108:	6839      	ldr	r1, [r7, #0]
 800b10a:	6878      	ldr	r0, [r7, #4]
 800b10c:	4798      	blx	r3
 800b10e:	4603      	mov	r3, r0
 800b110:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800b112:	e004      	b.n	800b11e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800b114:	6839      	ldr	r1, [r7, #0]
 800b116:	6878      	ldr	r0, [r7, #4]
 800b118:	f000 fc03 	bl	800b922 <USBD_CtlError>
              break;
 800b11c:	e000      	b.n	800b120 <USBD_StdEPReq+0x1c8>
              break;
 800b11e:	bf00      	nop
          }
          break;
 800b120:	e0ab      	b.n	800b27a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b128:	b2db      	uxtb	r3, r3
 800b12a:	2b02      	cmp	r3, #2
 800b12c:	d002      	beq.n	800b134 <USBD_StdEPReq+0x1dc>
 800b12e:	2b03      	cmp	r3, #3
 800b130:	d032      	beq.n	800b198 <USBD_StdEPReq+0x240>
 800b132:	e097      	b.n	800b264 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b134:	7bbb      	ldrb	r3, [r7, #14]
 800b136:	2b00      	cmp	r3, #0
 800b138:	d007      	beq.n	800b14a <USBD_StdEPReq+0x1f2>
 800b13a:	7bbb      	ldrb	r3, [r7, #14]
 800b13c:	2b80      	cmp	r3, #128	; 0x80
 800b13e:	d004      	beq.n	800b14a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800b140:	6839      	ldr	r1, [r7, #0]
 800b142:	6878      	ldr	r0, [r7, #4]
 800b144:	f000 fbed 	bl	800b922 <USBD_CtlError>
                break;
 800b148:	e091      	b.n	800b26e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b14a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b14e:	2b00      	cmp	r3, #0
 800b150:	da0b      	bge.n	800b16a <USBD_StdEPReq+0x212>
 800b152:	7bbb      	ldrb	r3, [r7, #14]
 800b154:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b158:	4613      	mov	r3, r2
 800b15a:	009b      	lsls	r3, r3, #2
 800b15c:	4413      	add	r3, r2
 800b15e:	009b      	lsls	r3, r3, #2
 800b160:	3310      	adds	r3, #16
 800b162:	687a      	ldr	r2, [r7, #4]
 800b164:	4413      	add	r3, r2
 800b166:	3304      	adds	r3, #4
 800b168:	e00b      	b.n	800b182 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b16a:	7bbb      	ldrb	r3, [r7, #14]
 800b16c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b170:	4613      	mov	r3, r2
 800b172:	009b      	lsls	r3, r3, #2
 800b174:	4413      	add	r3, r2
 800b176:	009b      	lsls	r3, r3, #2
 800b178:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b17c:	687a      	ldr	r2, [r7, #4]
 800b17e:	4413      	add	r3, r2
 800b180:	3304      	adds	r3, #4
 800b182:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b184:	68bb      	ldr	r3, [r7, #8]
 800b186:	2200      	movs	r2, #0
 800b188:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b18a:	68bb      	ldr	r3, [r7, #8]
 800b18c:	2202      	movs	r2, #2
 800b18e:	4619      	mov	r1, r3
 800b190:	6878      	ldr	r0, [r7, #4]
 800b192:	f000 fc37 	bl	800ba04 <USBD_CtlSendData>
              break;
 800b196:	e06a      	b.n	800b26e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b198:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	da11      	bge.n	800b1c4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b1a0:	7bbb      	ldrb	r3, [r7, #14]
 800b1a2:	f003 020f 	and.w	r2, r3, #15
 800b1a6:	6879      	ldr	r1, [r7, #4]
 800b1a8:	4613      	mov	r3, r2
 800b1aa:	009b      	lsls	r3, r3, #2
 800b1ac:	4413      	add	r3, r2
 800b1ae:	009b      	lsls	r3, r3, #2
 800b1b0:	440b      	add	r3, r1
 800b1b2:	3324      	adds	r3, #36	; 0x24
 800b1b4:	881b      	ldrh	r3, [r3, #0]
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d117      	bne.n	800b1ea <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b1ba:	6839      	ldr	r1, [r7, #0]
 800b1bc:	6878      	ldr	r0, [r7, #4]
 800b1be:	f000 fbb0 	bl	800b922 <USBD_CtlError>
                  break;
 800b1c2:	e054      	b.n	800b26e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b1c4:	7bbb      	ldrb	r3, [r7, #14]
 800b1c6:	f003 020f 	and.w	r2, r3, #15
 800b1ca:	6879      	ldr	r1, [r7, #4]
 800b1cc:	4613      	mov	r3, r2
 800b1ce:	009b      	lsls	r3, r3, #2
 800b1d0:	4413      	add	r3, r2
 800b1d2:	009b      	lsls	r3, r3, #2
 800b1d4:	440b      	add	r3, r1
 800b1d6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b1da:	881b      	ldrh	r3, [r3, #0]
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d104      	bne.n	800b1ea <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b1e0:	6839      	ldr	r1, [r7, #0]
 800b1e2:	6878      	ldr	r0, [r7, #4]
 800b1e4:	f000 fb9d 	bl	800b922 <USBD_CtlError>
                  break;
 800b1e8:	e041      	b.n	800b26e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b1ea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	da0b      	bge.n	800b20a <USBD_StdEPReq+0x2b2>
 800b1f2:	7bbb      	ldrb	r3, [r7, #14]
 800b1f4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b1f8:	4613      	mov	r3, r2
 800b1fa:	009b      	lsls	r3, r3, #2
 800b1fc:	4413      	add	r3, r2
 800b1fe:	009b      	lsls	r3, r3, #2
 800b200:	3310      	adds	r3, #16
 800b202:	687a      	ldr	r2, [r7, #4]
 800b204:	4413      	add	r3, r2
 800b206:	3304      	adds	r3, #4
 800b208:	e00b      	b.n	800b222 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b20a:	7bbb      	ldrb	r3, [r7, #14]
 800b20c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b210:	4613      	mov	r3, r2
 800b212:	009b      	lsls	r3, r3, #2
 800b214:	4413      	add	r3, r2
 800b216:	009b      	lsls	r3, r3, #2
 800b218:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b21c:	687a      	ldr	r2, [r7, #4]
 800b21e:	4413      	add	r3, r2
 800b220:	3304      	adds	r3, #4
 800b222:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b224:	7bbb      	ldrb	r3, [r7, #14]
 800b226:	2b00      	cmp	r3, #0
 800b228:	d002      	beq.n	800b230 <USBD_StdEPReq+0x2d8>
 800b22a:	7bbb      	ldrb	r3, [r7, #14]
 800b22c:	2b80      	cmp	r3, #128	; 0x80
 800b22e:	d103      	bne.n	800b238 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800b230:	68bb      	ldr	r3, [r7, #8]
 800b232:	2200      	movs	r2, #0
 800b234:	601a      	str	r2, [r3, #0]
 800b236:	e00e      	b.n	800b256 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b238:	7bbb      	ldrb	r3, [r7, #14]
 800b23a:	4619      	mov	r1, r3
 800b23c:	6878      	ldr	r0, [r7, #4]
 800b23e:	f001 f8bd 	bl	800c3bc <USBD_LL_IsStallEP>
 800b242:	4603      	mov	r3, r0
 800b244:	2b00      	cmp	r3, #0
 800b246:	d003      	beq.n	800b250 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800b248:	68bb      	ldr	r3, [r7, #8]
 800b24a:	2201      	movs	r2, #1
 800b24c:	601a      	str	r2, [r3, #0]
 800b24e:	e002      	b.n	800b256 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800b250:	68bb      	ldr	r3, [r7, #8]
 800b252:	2200      	movs	r2, #0
 800b254:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b256:	68bb      	ldr	r3, [r7, #8]
 800b258:	2202      	movs	r2, #2
 800b25a:	4619      	mov	r1, r3
 800b25c:	6878      	ldr	r0, [r7, #4]
 800b25e:	f000 fbd1 	bl	800ba04 <USBD_CtlSendData>
              break;
 800b262:	e004      	b.n	800b26e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800b264:	6839      	ldr	r1, [r7, #0]
 800b266:	6878      	ldr	r0, [r7, #4]
 800b268:	f000 fb5b 	bl	800b922 <USBD_CtlError>
              break;
 800b26c:	bf00      	nop
          }
          break;
 800b26e:	e004      	b.n	800b27a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800b270:	6839      	ldr	r1, [r7, #0]
 800b272:	6878      	ldr	r0, [r7, #4]
 800b274:	f000 fb55 	bl	800b922 <USBD_CtlError>
          break;
 800b278:	bf00      	nop
      }
      break;
 800b27a:	e005      	b.n	800b288 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800b27c:	6839      	ldr	r1, [r7, #0]
 800b27e:	6878      	ldr	r0, [r7, #4]
 800b280:	f000 fb4f 	bl	800b922 <USBD_CtlError>
      break;
 800b284:	e000      	b.n	800b288 <USBD_StdEPReq+0x330>
      break;
 800b286:	bf00      	nop
  }

  return ret;
 800b288:	7bfb      	ldrb	r3, [r7, #15]
}
 800b28a:	4618      	mov	r0, r3
 800b28c:	3710      	adds	r7, #16
 800b28e:	46bd      	mov	sp, r7
 800b290:	bd80      	pop	{r7, pc}
	...

0800b294 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b294:	b580      	push	{r7, lr}
 800b296:	b084      	sub	sp, #16
 800b298:	af00      	add	r7, sp, #0
 800b29a:	6078      	str	r0, [r7, #4]
 800b29c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b29e:	2300      	movs	r3, #0
 800b2a0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b2a2:	2300      	movs	r3, #0
 800b2a4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b2a6:	2300      	movs	r3, #0
 800b2a8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b2aa:	683b      	ldr	r3, [r7, #0]
 800b2ac:	885b      	ldrh	r3, [r3, #2]
 800b2ae:	0a1b      	lsrs	r3, r3, #8
 800b2b0:	b29b      	uxth	r3, r3
 800b2b2:	3b01      	subs	r3, #1
 800b2b4:	2b06      	cmp	r3, #6
 800b2b6:	f200 8128 	bhi.w	800b50a <USBD_GetDescriptor+0x276>
 800b2ba:	a201      	add	r2, pc, #4	; (adr r2, 800b2c0 <USBD_GetDescriptor+0x2c>)
 800b2bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2c0:	0800b2dd 	.word	0x0800b2dd
 800b2c4:	0800b2f5 	.word	0x0800b2f5
 800b2c8:	0800b335 	.word	0x0800b335
 800b2cc:	0800b50b 	.word	0x0800b50b
 800b2d0:	0800b50b 	.word	0x0800b50b
 800b2d4:	0800b4ab 	.word	0x0800b4ab
 800b2d8:	0800b4d7 	.word	0x0800b4d7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	687a      	ldr	r2, [r7, #4]
 800b2e6:	7c12      	ldrb	r2, [r2, #16]
 800b2e8:	f107 0108 	add.w	r1, r7, #8
 800b2ec:	4610      	mov	r0, r2
 800b2ee:	4798      	blx	r3
 800b2f0:	60f8      	str	r0, [r7, #12]
      break;
 800b2f2:	e112      	b.n	800b51a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	7c1b      	ldrb	r3, [r3, #16]
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d10d      	bne.n	800b318 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b304:	f107 0208 	add.w	r2, r7, #8
 800b308:	4610      	mov	r0, r2
 800b30a:	4798      	blx	r3
 800b30c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	3301      	adds	r3, #1
 800b312:	2202      	movs	r2, #2
 800b314:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b316:	e100      	b.n	800b51a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b31e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b320:	f107 0208 	add.w	r2, r7, #8
 800b324:	4610      	mov	r0, r2
 800b326:	4798      	blx	r3
 800b328:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	3301      	adds	r3, #1
 800b32e:	2202      	movs	r2, #2
 800b330:	701a      	strb	r2, [r3, #0]
      break;
 800b332:	e0f2      	b.n	800b51a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b334:	683b      	ldr	r3, [r7, #0]
 800b336:	885b      	ldrh	r3, [r3, #2]
 800b338:	b2db      	uxtb	r3, r3
 800b33a:	2b05      	cmp	r3, #5
 800b33c:	f200 80ac 	bhi.w	800b498 <USBD_GetDescriptor+0x204>
 800b340:	a201      	add	r2, pc, #4	; (adr r2, 800b348 <USBD_GetDescriptor+0xb4>)
 800b342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b346:	bf00      	nop
 800b348:	0800b361 	.word	0x0800b361
 800b34c:	0800b395 	.word	0x0800b395
 800b350:	0800b3c9 	.word	0x0800b3c9
 800b354:	0800b3fd 	.word	0x0800b3fd
 800b358:	0800b431 	.word	0x0800b431
 800b35c:	0800b465 	.word	0x0800b465
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b366:	685b      	ldr	r3, [r3, #4]
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d00b      	beq.n	800b384 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b372:	685b      	ldr	r3, [r3, #4]
 800b374:	687a      	ldr	r2, [r7, #4]
 800b376:	7c12      	ldrb	r2, [r2, #16]
 800b378:	f107 0108 	add.w	r1, r7, #8
 800b37c:	4610      	mov	r0, r2
 800b37e:	4798      	blx	r3
 800b380:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b382:	e091      	b.n	800b4a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b384:	6839      	ldr	r1, [r7, #0]
 800b386:	6878      	ldr	r0, [r7, #4]
 800b388:	f000 facb 	bl	800b922 <USBD_CtlError>
            err++;
 800b38c:	7afb      	ldrb	r3, [r7, #11]
 800b38e:	3301      	adds	r3, #1
 800b390:	72fb      	strb	r3, [r7, #11]
          break;
 800b392:	e089      	b.n	800b4a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b39a:	689b      	ldr	r3, [r3, #8]
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d00b      	beq.n	800b3b8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b3a6:	689b      	ldr	r3, [r3, #8]
 800b3a8:	687a      	ldr	r2, [r7, #4]
 800b3aa:	7c12      	ldrb	r2, [r2, #16]
 800b3ac:	f107 0108 	add.w	r1, r7, #8
 800b3b0:	4610      	mov	r0, r2
 800b3b2:	4798      	blx	r3
 800b3b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b3b6:	e077      	b.n	800b4a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b3b8:	6839      	ldr	r1, [r7, #0]
 800b3ba:	6878      	ldr	r0, [r7, #4]
 800b3bc:	f000 fab1 	bl	800b922 <USBD_CtlError>
            err++;
 800b3c0:	7afb      	ldrb	r3, [r7, #11]
 800b3c2:	3301      	adds	r3, #1
 800b3c4:	72fb      	strb	r3, [r7, #11]
          break;
 800b3c6:	e06f      	b.n	800b4a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b3ce:	68db      	ldr	r3, [r3, #12]
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d00b      	beq.n	800b3ec <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b3da:	68db      	ldr	r3, [r3, #12]
 800b3dc:	687a      	ldr	r2, [r7, #4]
 800b3de:	7c12      	ldrb	r2, [r2, #16]
 800b3e0:	f107 0108 	add.w	r1, r7, #8
 800b3e4:	4610      	mov	r0, r2
 800b3e6:	4798      	blx	r3
 800b3e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b3ea:	e05d      	b.n	800b4a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b3ec:	6839      	ldr	r1, [r7, #0]
 800b3ee:	6878      	ldr	r0, [r7, #4]
 800b3f0:	f000 fa97 	bl	800b922 <USBD_CtlError>
            err++;
 800b3f4:	7afb      	ldrb	r3, [r7, #11]
 800b3f6:	3301      	adds	r3, #1
 800b3f8:	72fb      	strb	r3, [r7, #11]
          break;
 800b3fa:	e055      	b.n	800b4a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b402:	691b      	ldr	r3, [r3, #16]
 800b404:	2b00      	cmp	r3, #0
 800b406:	d00b      	beq.n	800b420 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b40e:	691b      	ldr	r3, [r3, #16]
 800b410:	687a      	ldr	r2, [r7, #4]
 800b412:	7c12      	ldrb	r2, [r2, #16]
 800b414:	f107 0108 	add.w	r1, r7, #8
 800b418:	4610      	mov	r0, r2
 800b41a:	4798      	blx	r3
 800b41c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b41e:	e043      	b.n	800b4a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b420:	6839      	ldr	r1, [r7, #0]
 800b422:	6878      	ldr	r0, [r7, #4]
 800b424:	f000 fa7d 	bl	800b922 <USBD_CtlError>
            err++;
 800b428:	7afb      	ldrb	r3, [r7, #11]
 800b42a:	3301      	adds	r3, #1
 800b42c:	72fb      	strb	r3, [r7, #11]
          break;
 800b42e:	e03b      	b.n	800b4a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b436:	695b      	ldr	r3, [r3, #20]
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d00b      	beq.n	800b454 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b442:	695b      	ldr	r3, [r3, #20]
 800b444:	687a      	ldr	r2, [r7, #4]
 800b446:	7c12      	ldrb	r2, [r2, #16]
 800b448:	f107 0108 	add.w	r1, r7, #8
 800b44c:	4610      	mov	r0, r2
 800b44e:	4798      	blx	r3
 800b450:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b452:	e029      	b.n	800b4a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b454:	6839      	ldr	r1, [r7, #0]
 800b456:	6878      	ldr	r0, [r7, #4]
 800b458:	f000 fa63 	bl	800b922 <USBD_CtlError>
            err++;
 800b45c:	7afb      	ldrb	r3, [r7, #11]
 800b45e:	3301      	adds	r3, #1
 800b460:	72fb      	strb	r3, [r7, #11]
          break;
 800b462:	e021      	b.n	800b4a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b46a:	699b      	ldr	r3, [r3, #24]
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d00b      	beq.n	800b488 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b476:	699b      	ldr	r3, [r3, #24]
 800b478:	687a      	ldr	r2, [r7, #4]
 800b47a:	7c12      	ldrb	r2, [r2, #16]
 800b47c:	f107 0108 	add.w	r1, r7, #8
 800b480:	4610      	mov	r0, r2
 800b482:	4798      	blx	r3
 800b484:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b486:	e00f      	b.n	800b4a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b488:	6839      	ldr	r1, [r7, #0]
 800b48a:	6878      	ldr	r0, [r7, #4]
 800b48c:	f000 fa49 	bl	800b922 <USBD_CtlError>
            err++;
 800b490:	7afb      	ldrb	r3, [r7, #11]
 800b492:	3301      	adds	r3, #1
 800b494:	72fb      	strb	r3, [r7, #11]
          break;
 800b496:	e007      	b.n	800b4a8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b498:	6839      	ldr	r1, [r7, #0]
 800b49a:	6878      	ldr	r0, [r7, #4]
 800b49c:	f000 fa41 	bl	800b922 <USBD_CtlError>
          err++;
 800b4a0:	7afb      	ldrb	r3, [r7, #11]
 800b4a2:	3301      	adds	r3, #1
 800b4a4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800b4a6:	bf00      	nop
      }
      break;
 800b4a8:	e037      	b.n	800b51a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	7c1b      	ldrb	r3, [r3, #16]
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d109      	bne.n	800b4c6 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b4b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4ba:	f107 0208 	add.w	r2, r7, #8
 800b4be:	4610      	mov	r0, r2
 800b4c0:	4798      	blx	r3
 800b4c2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b4c4:	e029      	b.n	800b51a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b4c6:	6839      	ldr	r1, [r7, #0]
 800b4c8:	6878      	ldr	r0, [r7, #4]
 800b4ca:	f000 fa2a 	bl	800b922 <USBD_CtlError>
        err++;
 800b4ce:	7afb      	ldrb	r3, [r7, #11]
 800b4d0:	3301      	adds	r3, #1
 800b4d2:	72fb      	strb	r3, [r7, #11]
      break;
 800b4d4:	e021      	b.n	800b51a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	7c1b      	ldrb	r3, [r3, #16]
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d10d      	bne.n	800b4fa <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b4e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4e6:	f107 0208 	add.w	r2, r7, #8
 800b4ea:	4610      	mov	r0, r2
 800b4ec:	4798      	blx	r3
 800b4ee:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	3301      	adds	r3, #1
 800b4f4:	2207      	movs	r2, #7
 800b4f6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b4f8:	e00f      	b.n	800b51a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b4fa:	6839      	ldr	r1, [r7, #0]
 800b4fc:	6878      	ldr	r0, [r7, #4]
 800b4fe:	f000 fa10 	bl	800b922 <USBD_CtlError>
        err++;
 800b502:	7afb      	ldrb	r3, [r7, #11]
 800b504:	3301      	adds	r3, #1
 800b506:	72fb      	strb	r3, [r7, #11]
      break;
 800b508:	e007      	b.n	800b51a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b50a:	6839      	ldr	r1, [r7, #0]
 800b50c:	6878      	ldr	r0, [r7, #4]
 800b50e:	f000 fa08 	bl	800b922 <USBD_CtlError>
      err++;
 800b512:	7afb      	ldrb	r3, [r7, #11]
 800b514:	3301      	adds	r3, #1
 800b516:	72fb      	strb	r3, [r7, #11]
      break;
 800b518:	bf00      	nop
  }

  if (err != 0U)
 800b51a:	7afb      	ldrb	r3, [r7, #11]
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d11e      	bne.n	800b55e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800b520:	683b      	ldr	r3, [r7, #0]
 800b522:	88db      	ldrh	r3, [r3, #6]
 800b524:	2b00      	cmp	r3, #0
 800b526:	d016      	beq.n	800b556 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800b528:	893b      	ldrh	r3, [r7, #8]
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d00e      	beq.n	800b54c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800b52e:	683b      	ldr	r3, [r7, #0]
 800b530:	88da      	ldrh	r2, [r3, #6]
 800b532:	893b      	ldrh	r3, [r7, #8]
 800b534:	4293      	cmp	r3, r2
 800b536:	bf28      	it	cs
 800b538:	4613      	movcs	r3, r2
 800b53a:	b29b      	uxth	r3, r3
 800b53c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b53e:	893b      	ldrh	r3, [r7, #8]
 800b540:	461a      	mov	r2, r3
 800b542:	68f9      	ldr	r1, [r7, #12]
 800b544:	6878      	ldr	r0, [r7, #4]
 800b546:	f000 fa5d 	bl	800ba04 <USBD_CtlSendData>
 800b54a:	e009      	b.n	800b560 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b54c:	6839      	ldr	r1, [r7, #0]
 800b54e:	6878      	ldr	r0, [r7, #4]
 800b550:	f000 f9e7 	bl	800b922 <USBD_CtlError>
 800b554:	e004      	b.n	800b560 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b556:	6878      	ldr	r0, [r7, #4]
 800b558:	f000 faae 	bl	800bab8 <USBD_CtlSendStatus>
 800b55c:	e000      	b.n	800b560 <USBD_GetDescriptor+0x2cc>
    return;
 800b55e:	bf00      	nop
  }
}
 800b560:	3710      	adds	r7, #16
 800b562:	46bd      	mov	sp, r7
 800b564:	bd80      	pop	{r7, pc}
 800b566:	bf00      	nop

0800b568 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b568:	b580      	push	{r7, lr}
 800b56a:	b084      	sub	sp, #16
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	6078      	str	r0, [r7, #4]
 800b570:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b572:	683b      	ldr	r3, [r7, #0]
 800b574:	889b      	ldrh	r3, [r3, #4]
 800b576:	2b00      	cmp	r3, #0
 800b578:	d131      	bne.n	800b5de <USBD_SetAddress+0x76>
 800b57a:	683b      	ldr	r3, [r7, #0]
 800b57c:	88db      	ldrh	r3, [r3, #6]
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d12d      	bne.n	800b5de <USBD_SetAddress+0x76>
 800b582:	683b      	ldr	r3, [r7, #0]
 800b584:	885b      	ldrh	r3, [r3, #2]
 800b586:	2b7f      	cmp	r3, #127	; 0x7f
 800b588:	d829      	bhi.n	800b5de <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b58a:	683b      	ldr	r3, [r7, #0]
 800b58c:	885b      	ldrh	r3, [r3, #2]
 800b58e:	b2db      	uxtb	r3, r3
 800b590:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b594:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b59c:	b2db      	uxtb	r3, r3
 800b59e:	2b03      	cmp	r3, #3
 800b5a0:	d104      	bne.n	800b5ac <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b5a2:	6839      	ldr	r1, [r7, #0]
 800b5a4:	6878      	ldr	r0, [r7, #4]
 800b5a6:	f000 f9bc 	bl	800b922 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b5aa:	e01d      	b.n	800b5e8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	7bfa      	ldrb	r2, [r7, #15]
 800b5b0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b5b4:	7bfb      	ldrb	r3, [r7, #15]
 800b5b6:	4619      	mov	r1, r3
 800b5b8:	6878      	ldr	r0, [r7, #4]
 800b5ba:	f000 ff2b 	bl	800c414 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b5be:	6878      	ldr	r0, [r7, #4]
 800b5c0:	f000 fa7a 	bl	800bab8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b5c4:	7bfb      	ldrb	r3, [r7, #15]
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d004      	beq.n	800b5d4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	2202      	movs	r2, #2
 800b5ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b5d2:	e009      	b.n	800b5e8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	2201      	movs	r2, #1
 800b5d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b5dc:	e004      	b.n	800b5e8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b5de:	6839      	ldr	r1, [r7, #0]
 800b5e0:	6878      	ldr	r0, [r7, #4]
 800b5e2:	f000 f99e 	bl	800b922 <USBD_CtlError>
  }
}
 800b5e6:	bf00      	nop
 800b5e8:	bf00      	nop
 800b5ea:	3710      	adds	r7, #16
 800b5ec:	46bd      	mov	sp, r7
 800b5ee:	bd80      	pop	{r7, pc}

0800b5f0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b5f0:	b580      	push	{r7, lr}
 800b5f2:	b084      	sub	sp, #16
 800b5f4:	af00      	add	r7, sp, #0
 800b5f6:	6078      	str	r0, [r7, #4]
 800b5f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b5fa:	2300      	movs	r3, #0
 800b5fc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b5fe:	683b      	ldr	r3, [r7, #0]
 800b600:	885b      	ldrh	r3, [r3, #2]
 800b602:	b2da      	uxtb	r2, r3
 800b604:	4b4e      	ldr	r3, [pc, #312]	; (800b740 <USBD_SetConfig+0x150>)
 800b606:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b608:	4b4d      	ldr	r3, [pc, #308]	; (800b740 <USBD_SetConfig+0x150>)
 800b60a:	781b      	ldrb	r3, [r3, #0]
 800b60c:	2b01      	cmp	r3, #1
 800b60e:	d905      	bls.n	800b61c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b610:	6839      	ldr	r1, [r7, #0]
 800b612:	6878      	ldr	r0, [r7, #4]
 800b614:	f000 f985 	bl	800b922 <USBD_CtlError>
    return USBD_FAIL;
 800b618:	2303      	movs	r3, #3
 800b61a:	e08c      	b.n	800b736 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b622:	b2db      	uxtb	r3, r3
 800b624:	2b02      	cmp	r3, #2
 800b626:	d002      	beq.n	800b62e <USBD_SetConfig+0x3e>
 800b628:	2b03      	cmp	r3, #3
 800b62a:	d029      	beq.n	800b680 <USBD_SetConfig+0x90>
 800b62c:	e075      	b.n	800b71a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b62e:	4b44      	ldr	r3, [pc, #272]	; (800b740 <USBD_SetConfig+0x150>)
 800b630:	781b      	ldrb	r3, [r3, #0]
 800b632:	2b00      	cmp	r3, #0
 800b634:	d020      	beq.n	800b678 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800b636:	4b42      	ldr	r3, [pc, #264]	; (800b740 <USBD_SetConfig+0x150>)
 800b638:	781b      	ldrb	r3, [r3, #0]
 800b63a:	461a      	mov	r2, r3
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b640:	4b3f      	ldr	r3, [pc, #252]	; (800b740 <USBD_SetConfig+0x150>)
 800b642:	781b      	ldrb	r3, [r3, #0]
 800b644:	4619      	mov	r1, r3
 800b646:	6878      	ldr	r0, [r7, #4]
 800b648:	f7fe ffe1 	bl	800a60e <USBD_SetClassConfig>
 800b64c:	4603      	mov	r3, r0
 800b64e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b650:	7bfb      	ldrb	r3, [r7, #15]
 800b652:	2b00      	cmp	r3, #0
 800b654:	d008      	beq.n	800b668 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800b656:	6839      	ldr	r1, [r7, #0]
 800b658:	6878      	ldr	r0, [r7, #4]
 800b65a:	f000 f962 	bl	800b922 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	2202      	movs	r2, #2
 800b662:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b666:	e065      	b.n	800b734 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b668:	6878      	ldr	r0, [r7, #4]
 800b66a:	f000 fa25 	bl	800bab8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	2203      	movs	r2, #3
 800b672:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b676:	e05d      	b.n	800b734 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b678:	6878      	ldr	r0, [r7, #4]
 800b67a:	f000 fa1d 	bl	800bab8 <USBD_CtlSendStatus>
      break;
 800b67e:	e059      	b.n	800b734 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b680:	4b2f      	ldr	r3, [pc, #188]	; (800b740 <USBD_SetConfig+0x150>)
 800b682:	781b      	ldrb	r3, [r3, #0]
 800b684:	2b00      	cmp	r3, #0
 800b686:	d112      	bne.n	800b6ae <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	2202      	movs	r2, #2
 800b68c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800b690:	4b2b      	ldr	r3, [pc, #172]	; (800b740 <USBD_SetConfig+0x150>)
 800b692:	781b      	ldrb	r3, [r3, #0]
 800b694:	461a      	mov	r2, r3
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b69a:	4b29      	ldr	r3, [pc, #164]	; (800b740 <USBD_SetConfig+0x150>)
 800b69c:	781b      	ldrb	r3, [r3, #0]
 800b69e:	4619      	mov	r1, r3
 800b6a0:	6878      	ldr	r0, [r7, #4]
 800b6a2:	f7fe ffd0 	bl	800a646 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b6a6:	6878      	ldr	r0, [r7, #4]
 800b6a8:	f000 fa06 	bl	800bab8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b6ac:	e042      	b.n	800b734 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800b6ae:	4b24      	ldr	r3, [pc, #144]	; (800b740 <USBD_SetConfig+0x150>)
 800b6b0:	781b      	ldrb	r3, [r3, #0]
 800b6b2:	461a      	mov	r2, r3
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	685b      	ldr	r3, [r3, #4]
 800b6b8:	429a      	cmp	r2, r3
 800b6ba:	d02a      	beq.n	800b712 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	685b      	ldr	r3, [r3, #4]
 800b6c0:	b2db      	uxtb	r3, r3
 800b6c2:	4619      	mov	r1, r3
 800b6c4:	6878      	ldr	r0, [r7, #4]
 800b6c6:	f7fe ffbe 	bl	800a646 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b6ca:	4b1d      	ldr	r3, [pc, #116]	; (800b740 <USBD_SetConfig+0x150>)
 800b6cc:	781b      	ldrb	r3, [r3, #0]
 800b6ce:	461a      	mov	r2, r3
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b6d4:	4b1a      	ldr	r3, [pc, #104]	; (800b740 <USBD_SetConfig+0x150>)
 800b6d6:	781b      	ldrb	r3, [r3, #0]
 800b6d8:	4619      	mov	r1, r3
 800b6da:	6878      	ldr	r0, [r7, #4]
 800b6dc:	f7fe ff97 	bl	800a60e <USBD_SetClassConfig>
 800b6e0:	4603      	mov	r3, r0
 800b6e2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b6e4:	7bfb      	ldrb	r3, [r7, #15]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d00f      	beq.n	800b70a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800b6ea:	6839      	ldr	r1, [r7, #0]
 800b6ec:	6878      	ldr	r0, [r7, #4]
 800b6ee:	f000 f918 	bl	800b922 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	685b      	ldr	r3, [r3, #4]
 800b6f6:	b2db      	uxtb	r3, r3
 800b6f8:	4619      	mov	r1, r3
 800b6fa:	6878      	ldr	r0, [r7, #4]
 800b6fc:	f7fe ffa3 	bl	800a646 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	2202      	movs	r2, #2
 800b704:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b708:	e014      	b.n	800b734 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b70a:	6878      	ldr	r0, [r7, #4]
 800b70c:	f000 f9d4 	bl	800bab8 <USBD_CtlSendStatus>
      break;
 800b710:	e010      	b.n	800b734 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b712:	6878      	ldr	r0, [r7, #4]
 800b714:	f000 f9d0 	bl	800bab8 <USBD_CtlSendStatus>
      break;
 800b718:	e00c      	b.n	800b734 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800b71a:	6839      	ldr	r1, [r7, #0]
 800b71c:	6878      	ldr	r0, [r7, #4]
 800b71e:	f000 f900 	bl	800b922 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b722:	4b07      	ldr	r3, [pc, #28]	; (800b740 <USBD_SetConfig+0x150>)
 800b724:	781b      	ldrb	r3, [r3, #0]
 800b726:	4619      	mov	r1, r3
 800b728:	6878      	ldr	r0, [r7, #4]
 800b72a:	f7fe ff8c 	bl	800a646 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b72e:	2303      	movs	r3, #3
 800b730:	73fb      	strb	r3, [r7, #15]
      break;
 800b732:	bf00      	nop
  }

  return ret;
 800b734:	7bfb      	ldrb	r3, [r7, #15]
}
 800b736:	4618      	mov	r0, r3
 800b738:	3710      	adds	r7, #16
 800b73a:	46bd      	mov	sp, r7
 800b73c:	bd80      	pop	{r7, pc}
 800b73e:	bf00      	nop
 800b740:	24000400 	.word	0x24000400

0800b744 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b744:	b580      	push	{r7, lr}
 800b746:	b082      	sub	sp, #8
 800b748:	af00      	add	r7, sp, #0
 800b74a:	6078      	str	r0, [r7, #4]
 800b74c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b74e:	683b      	ldr	r3, [r7, #0]
 800b750:	88db      	ldrh	r3, [r3, #6]
 800b752:	2b01      	cmp	r3, #1
 800b754:	d004      	beq.n	800b760 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b756:	6839      	ldr	r1, [r7, #0]
 800b758:	6878      	ldr	r0, [r7, #4]
 800b75a:	f000 f8e2 	bl	800b922 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b75e:	e023      	b.n	800b7a8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b766:	b2db      	uxtb	r3, r3
 800b768:	2b02      	cmp	r3, #2
 800b76a:	dc02      	bgt.n	800b772 <USBD_GetConfig+0x2e>
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	dc03      	bgt.n	800b778 <USBD_GetConfig+0x34>
 800b770:	e015      	b.n	800b79e <USBD_GetConfig+0x5a>
 800b772:	2b03      	cmp	r3, #3
 800b774:	d00b      	beq.n	800b78e <USBD_GetConfig+0x4a>
 800b776:	e012      	b.n	800b79e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	2200      	movs	r2, #0
 800b77c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	3308      	adds	r3, #8
 800b782:	2201      	movs	r2, #1
 800b784:	4619      	mov	r1, r3
 800b786:	6878      	ldr	r0, [r7, #4]
 800b788:	f000 f93c 	bl	800ba04 <USBD_CtlSendData>
        break;
 800b78c:	e00c      	b.n	800b7a8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	3304      	adds	r3, #4
 800b792:	2201      	movs	r2, #1
 800b794:	4619      	mov	r1, r3
 800b796:	6878      	ldr	r0, [r7, #4]
 800b798:	f000 f934 	bl	800ba04 <USBD_CtlSendData>
        break;
 800b79c:	e004      	b.n	800b7a8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b79e:	6839      	ldr	r1, [r7, #0]
 800b7a0:	6878      	ldr	r0, [r7, #4]
 800b7a2:	f000 f8be 	bl	800b922 <USBD_CtlError>
        break;
 800b7a6:	bf00      	nop
}
 800b7a8:	bf00      	nop
 800b7aa:	3708      	adds	r7, #8
 800b7ac:	46bd      	mov	sp, r7
 800b7ae:	bd80      	pop	{r7, pc}

0800b7b0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b7b0:	b580      	push	{r7, lr}
 800b7b2:	b082      	sub	sp, #8
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	6078      	str	r0, [r7, #4]
 800b7b8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b7c0:	b2db      	uxtb	r3, r3
 800b7c2:	3b01      	subs	r3, #1
 800b7c4:	2b02      	cmp	r3, #2
 800b7c6:	d81e      	bhi.n	800b806 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b7c8:	683b      	ldr	r3, [r7, #0]
 800b7ca:	88db      	ldrh	r3, [r3, #6]
 800b7cc:	2b02      	cmp	r3, #2
 800b7ce:	d004      	beq.n	800b7da <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b7d0:	6839      	ldr	r1, [r7, #0]
 800b7d2:	6878      	ldr	r0, [r7, #4]
 800b7d4:	f000 f8a5 	bl	800b922 <USBD_CtlError>
        break;
 800b7d8:	e01a      	b.n	800b810 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	2201      	movs	r2, #1
 800b7de:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d005      	beq.n	800b7f6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	68db      	ldr	r3, [r3, #12]
 800b7ee:	f043 0202 	orr.w	r2, r3, #2
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	330c      	adds	r3, #12
 800b7fa:	2202      	movs	r2, #2
 800b7fc:	4619      	mov	r1, r3
 800b7fe:	6878      	ldr	r0, [r7, #4]
 800b800:	f000 f900 	bl	800ba04 <USBD_CtlSendData>
      break;
 800b804:	e004      	b.n	800b810 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b806:	6839      	ldr	r1, [r7, #0]
 800b808:	6878      	ldr	r0, [r7, #4]
 800b80a:	f000 f88a 	bl	800b922 <USBD_CtlError>
      break;
 800b80e:	bf00      	nop
  }
}
 800b810:	bf00      	nop
 800b812:	3708      	adds	r7, #8
 800b814:	46bd      	mov	sp, r7
 800b816:	bd80      	pop	{r7, pc}

0800b818 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b818:	b580      	push	{r7, lr}
 800b81a:	b082      	sub	sp, #8
 800b81c:	af00      	add	r7, sp, #0
 800b81e:	6078      	str	r0, [r7, #4]
 800b820:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b822:	683b      	ldr	r3, [r7, #0]
 800b824:	885b      	ldrh	r3, [r3, #2]
 800b826:	2b01      	cmp	r3, #1
 800b828:	d107      	bne.n	800b83a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	2201      	movs	r2, #1
 800b82e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b832:	6878      	ldr	r0, [r7, #4]
 800b834:	f000 f940 	bl	800bab8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b838:	e013      	b.n	800b862 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b83a:	683b      	ldr	r3, [r7, #0]
 800b83c:	885b      	ldrh	r3, [r3, #2]
 800b83e:	2b02      	cmp	r3, #2
 800b840:	d10b      	bne.n	800b85a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800b842:	683b      	ldr	r3, [r7, #0]
 800b844:	889b      	ldrh	r3, [r3, #4]
 800b846:	0a1b      	lsrs	r3, r3, #8
 800b848:	b29b      	uxth	r3, r3
 800b84a:	b2da      	uxtb	r2, r3
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b852:	6878      	ldr	r0, [r7, #4]
 800b854:	f000 f930 	bl	800bab8 <USBD_CtlSendStatus>
}
 800b858:	e003      	b.n	800b862 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b85a:	6839      	ldr	r1, [r7, #0]
 800b85c:	6878      	ldr	r0, [r7, #4]
 800b85e:	f000 f860 	bl	800b922 <USBD_CtlError>
}
 800b862:	bf00      	nop
 800b864:	3708      	adds	r7, #8
 800b866:	46bd      	mov	sp, r7
 800b868:	bd80      	pop	{r7, pc}

0800b86a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b86a:	b580      	push	{r7, lr}
 800b86c:	b082      	sub	sp, #8
 800b86e:	af00      	add	r7, sp, #0
 800b870:	6078      	str	r0, [r7, #4]
 800b872:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b87a:	b2db      	uxtb	r3, r3
 800b87c:	3b01      	subs	r3, #1
 800b87e:	2b02      	cmp	r3, #2
 800b880:	d80b      	bhi.n	800b89a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b882:	683b      	ldr	r3, [r7, #0]
 800b884:	885b      	ldrh	r3, [r3, #2]
 800b886:	2b01      	cmp	r3, #1
 800b888:	d10c      	bne.n	800b8a4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	2200      	movs	r2, #0
 800b88e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b892:	6878      	ldr	r0, [r7, #4]
 800b894:	f000 f910 	bl	800bab8 <USBD_CtlSendStatus>
      }
      break;
 800b898:	e004      	b.n	800b8a4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b89a:	6839      	ldr	r1, [r7, #0]
 800b89c:	6878      	ldr	r0, [r7, #4]
 800b89e:	f000 f840 	bl	800b922 <USBD_CtlError>
      break;
 800b8a2:	e000      	b.n	800b8a6 <USBD_ClrFeature+0x3c>
      break;
 800b8a4:	bf00      	nop
  }
}
 800b8a6:	bf00      	nop
 800b8a8:	3708      	adds	r7, #8
 800b8aa:	46bd      	mov	sp, r7
 800b8ac:	bd80      	pop	{r7, pc}

0800b8ae <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b8ae:	b580      	push	{r7, lr}
 800b8b0:	b084      	sub	sp, #16
 800b8b2:	af00      	add	r7, sp, #0
 800b8b4:	6078      	str	r0, [r7, #4]
 800b8b6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b8b8:	683b      	ldr	r3, [r7, #0]
 800b8ba:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	781a      	ldrb	r2, [r3, #0]
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	3301      	adds	r3, #1
 800b8c8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	781a      	ldrb	r2, [r3, #0]
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	3301      	adds	r3, #1
 800b8d6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b8d8:	68f8      	ldr	r0, [r7, #12]
 800b8da:	f7ff fa41 	bl	800ad60 <SWAPBYTE>
 800b8de:	4603      	mov	r3, r0
 800b8e0:	461a      	mov	r2, r3
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	3301      	adds	r3, #1
 800b8ea:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	3301      	adds	r3, #1
 800b8f0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b8f2:	68f8      	ldr	r0, [r7, #12]
 800b8f4:	f7ff fa34 	bl	800ad60 <SWAPBYTE>
 800b8f8:	4603      	mov	r3, r0
 800b8fa:	461a      	mov	r2, r3
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	3301      	adds	r3, #1
 800b904:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	3301      	adds	r3, #1
 800b90a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b90c:	68f8      	ldr	r0, [r7, #12]
 800b90e:	f7ff fa27 	bl	800ad60 <SWAPBYTE>
 800b912:	4603      	mov	r3, r0
 800b914:	461a      	mov	r2, r3
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	80da      	strh	r2, [r3, #6]
}
 800b91a:	bf00      	nop
 800b91c:	3710      	adds	r7, #16
 800b91e:	46bd      	mov	sp, r7
 800b920:	bd80      	pop	{r7, pc}

0800b922 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b922:	b580      	push	{r7, lr}
 800b924:	b082      	sub	sp, #8
 800b926:	af00      	add	r7, sp, #0
 800b928:	6078      	str	r0, [r7, #4]
 800b92a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b92c:	2180      	movs	r1, #128	; 0x80
 800b92e:	6878      	ldr	r0, [r7, #4]
 800b930:	f000 fd06 	bl	800c340 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b934:	2100      	movs	r1, #0
 800b936:	6878      	ldr	r0, [r7, #4]
 800b938:	f000 fd02 	bl	800c340 <USBD_LL_StallEP>
}
 800b93c:	bf00      	nop
 800b93e:	3708      	adds	r7, #8
 800b940:	46bd      	mov	sp, r7
 800b942:	bd80      	pop	{r7, pc}

0800b944 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b944:	b580      	push	{r7, lr}
 800b946:	b086      	sub	sp, #24
 800b948:	af00      	add	r7, sp, #0
 800b94a:	60f8      	str	r0, [r7, #12]
 800b94c:	60b9      	str	r1, [r7, #8]
 800b94e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b950:	2300      	movs	r3, #0
 800b952:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	2b00      	cmp	r3, #0
 800b958:	d036      	beq.n	800b9c8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b95e:	6938      	ldr	r0, [r7, #16]
 800b960:	f000 f836 	bl	800b9d0 <USBD_GetLen>
 800b964:	4603      	mov	r3, r0
 800b966:	3301      	adds	r3, #1
 800b968:	b29b      	uxth	r3, r3
 800b96a:	005b      	lsls	r3, r3, #1
 800b96c:	b29a      	uxth	r2, r3
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b972:	7dfb      	ldrb	r3, [r7, #23]
 800b974:	68ba      	ldr	r2, [r7, #8]
 800b976:	4413      	add	r3, r2
 800b978:	687a      	ldr	r2, [r7, #4]
 800b97a:	7812      	ldrb	r2, [r2, #0]
 800b97c:	701a      	strb	r2, [r3, #0]
  idx++;
 800b97e:	7dfb      	ldrb	r3, [r7, #23]
 800b980:	3301      	adds	r3, #1
 800b982:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b984:	7dfb      	ldrb	r3, [r7, #23]
 800b986:	68ba      	ldr	r2, [r7, #8]
 800b988:	4413      	add	r3, r2
 800b98a:	2203      	movs	r2, #3
 800b98c:	701a      	strb	r2, [r3, #0]
  idx++;
 800b98e:	7dfb      	ldrb	r3, [r7, #23]
 800b990:	3301      	adds	r3, #1
 800b992:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b994:	e013      	b.n	800b9be <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b996:	7dfb      	ldrb	r3, [r7, #23]
 800b998:	68ba      	ldr	r2, [r7, #8]
 800b99a:	4413      	add	r3, r2
 800b99c:	693a      	ldr	r2, [r7, #16]
 800b99e:	7812      	ldrb	r2, [r2, #0]
 800b9a0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b9a2:	693b      	ldr	r3, [r7, #16]
 800b9a4:	3301      	adds	r3, #1
 800b9a6:	613b      	str	r3, [r7, #16]
    idx++;
 800b9a8:	7dfb      	ldrb	r3, [r7, #23]
 800b9aa:	3301      	adds	r3, #1
 800b9ac:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b9ae:	7dfb      	ldrb	r3, [r7, #23]
 800b9b0:	68ba      	ldr	r2, [r7, #8]
 800b9b2:	4413      	add	r3, r2
 800b9b4:	2200      	movs	r2, #0
 800b9b6:	701a      	strb	r2, [r3, #0]
    idx++;
 800b9b8:	7dfb      	ldrb	r3, [r7, #23]
 800b9ba:	3301      	adds	r3, #1
 800b9bc:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b9be:	693b      	ldr	r3, [r7, #16]
 800b9c0:	781b      	ldrb	r3, [r3, #0]
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d1e7      	bne.n	800b996 <USBD_GetString+0x52>
 800b9c6:	e000      	b.n	800b9ca <USBD_GetString+0x86>
    return;
 800b9c8:	bf00      	nop
  }
}
 800b9ca:	3718      	adds	r7, #24
 800b9cc:	46bd      	mov	sp, r7
 800b9ce:	bd80      	pop	{r7, pc}

0800b9d0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b9d0:	b480      	push	{r7}
 800b9d2:	b085      	sub	sp, #20
 800b9d4:	af00      	add	r7, sp, #0
 800b9d6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b9d8:	2300      	movs	r3, #0
 800b9da:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b9e0:	e005      	b.n	800b9ee <USBD_GetLen+0x1e>
  {
    len++;
 800b9e2:	7bfb      	ldrb	r3, [r7, #15]
 800b9e4:	3301      	adds	r3, #1
 800b9e6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b9e8:	68bb      	ldr	r3, [r7, #8]
 800b9ea:	3301      	adds	r3, #1
 800b9ec:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b9ee:	68bb      	ldr	r3, [r7, #8]
 800b9f0:	781b      	ldrb	r3, [r3, #0]
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d1f5      	bne.n	800b9e2 <USBD_GetLen+0x12>
  }

  return len;
 800b9f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9f8:	4618      	mov	r0, r3
 800b9fa:	3714      	adds	r7, #20
 800b9fc:	46bd      	mov	sp, r7
 800b9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba02:	4770      	bx	lr

0800ba04 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ba04:	b580      	push	{r7, lr}
 800ba06:	b084      	sub	sp, #16
 800ba08:	af00      	add	r7, sp, #0
 800ba0a:	60f8      	str	r0, [r7, #12]
 800ba0c:	60b9      	str	r1, [r7, #8]
 800ba0e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	2202      	movs	r2, #2
 800ba14:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	687a      	ldr	r2, [r7, #4]
 800ba1c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	687a      	ldr	r2, [r7, #4]
 800ba22:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	68ba      	ldr	r2, [r7, #8]
 800ba28:	2100      	movs	r1, #0
 800ba2a:	68f8      	ldr	r0, [r7, #12]
 800ba2c:	f000 fd11 	bl	800c452 <USBD_LL_Transmit>

  return USBD_OK;
 800ba30:	2300      	movs	r3, #0
}
 800ba32:	4618      	mov	r0, r3
 800ba34:	3710      	adds	r7, #16
 800ba36:	46bd      	mov	sp, r7
 800ba38:	bd80      	pop	{r7, pc}

0800ba3a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ba3a:	b580      	push	{r7, lr}
 800ba3c:	b084      	sub	sp, #16
 800ba3e:	af00      	add	r7, sp, #0
 800ba40:	60f8      	str	r0, [r7, #12]
 800ba42:	60b9      	str	r1, [r7, #8]
 800ba44:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	68ba      	ldr	r2, [r7, #8]
 800ba4a:	2100      	movs	r1, #0
 800ba4c:	68f8      	ldr	r0, [r7, #12]
 800ba4e:	f000 fd00 	bl	800c452 <USBD_LL_Transmit>

  return USBD_OK;
 800ba52:	2300      	movs	r3, #0
}
 800ba54:	4618      	mov	r0, r3
 800ba56:	3710      	adds	r7, #16
 800ba58:	46bd      	mov	sp, r7
 800ba5a:	bd80      	pop	{r7, pc}

0800ba5c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800ba5c:	b580      	push	{r7, lr}
 800ba5e:	b084      	sub	sp, #16
 800ba60:	af00      	add	r7, sp, #0
 800ba62:	60f8      	str	r0, [r7, #12]
 800ba64:	60b9      	str	r1, [r7, #8]
 800ba66:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	2203      	movs	r2, #3
 800ba6c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	687a      	ldr	r2, [r7, #4]
 800ba74:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	687a      	ldr	r2, [r7, #4]
 800ba7c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	68ba      	ldr	r2, [r7, #8]
 800ba84:	2100      	movs	r1, #0
 800ba86:	68f8      	ldr	r0, [r7, #12]
 800ba88:	f000 fd04 	bl	800c494 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ba8c:	2300      	movs	r3, #0
}
 800ba8e:	4618      	mov	r0, r3
 800ba90:	3710      	adds	r7, #16
 800ba92:	46bd      	mov	sp, r7
 800ba94:	bd80      	pop	{r7, pc}

0800ba96 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ba96:	b580      	push	{r7, lr}
 800ba98:	b084      	sub	sp, #16
 800ba9a:	af00      	add	r7, sp, #0
 800ba9c:	60f8      	str	r0, [r7, #12]
 800ba9e:	60b9      	str	r1, [r7, #8]
 800baa0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	68ba      	ldr	r2, [r7, #8]
 800baa6:	2100      	movs	r1, #0
 800baa8:	68f8      	ldr	r0, [r7, #12]
 800baaa:	f000 fcf3 	bl	800c494 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800baae:	2300      	movs	r3, #0
}
 800bab0:	4618      	mov	r0, r3
 800bab2:	3710      	adds	r7, #16
 800bab4:	46bd      	mov	sp, r7
 800bab6:	bd80      	pop	{r7, pc}

0800bab8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800bab8:	b580      	push	{r7, lr}
 800baba:	b082      	sub	sp, #8
 800babc:	af00      	add	r7, sp, #0
 800babe:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	2204      	movs	r2, #4
 800bac4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800bac8:	2300      	movs	r3, #0
 800baca:	2200      	movs	r2, #0
 800bacc:	2100      	movs	r1, #0
 800bace:	6878      	ldr	r0, [r7, #4]
 800bad0:	f000 fcbf 	bl	800c452 <USBD_LL_Transmit>

  return USBD_OK;
 800bad4:	2300      	movs	r3, #0
}
 800bad6:	4618      	mov	r0, r3
 800bad8:	3708      	adds	r7, #8
 800bada:	46bd      	mov	sp, r7
 800badc:	bd80      	pop	{r7, pc}

0800bade <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800bade:	b580      	push	{r7, lr}
 800bae0:	b082      	sub	sp, #8
 800bae2:	af00      	add	r7, sp, #0
 800bae4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	2205      	movs	r2, #5
 800baea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800baee:	2300      	movs	r3, #0
 800baf0:	2200      	movs	r2, #0
 800baf2:	2100      	movs	r1, #0
 800baf4:	6878      	ldr	r0, [r7, #4]
 800baf6:	f000 fccd 	bl	800c494 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bafa:	2300      	movs	r3, #0
}
 800bafc:	4618      	mov	r0, r3
 800bafe:	3708      	adds	r7, #8
 800bb00:	46bd      	mov	sp, r7
 800bb02:	bd80      	pop	{r7, pc}

0800bb04 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800bb04:	b580      	push	{r7, lr}
 800bb06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800bb08:	2200      	movs	r2, #0
 800bb0a:	4913      	ldr	r1, [pc, #76]	; (800bb58 <MX_USB_DEVICE_Init+0x54>)
 800bb0c:	4813      	ldr	r0, [pc, #76]	; (800bb5c <MX_USB_DEVICE_Init+0x58>)
 800bb0e:	f7fe fd01 	bl	800a514 <USBD_Init>
 800bb12:	4603      	mov	r3, r0
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d001      	beq.n	800bb1c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800bb18:	f7f5 fcde 	bl	80014d8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800bb1c:	4910      	ldr	r1, [pc, #64]	; (800bb60 <MX_USB_DEVICE_Init+0x5c>)
 800bb1e:	480f      	ldr	r0, [pc, #60]	; (800bb5c <MX_USB_DEVICE_Init+0x58>)
 800bb20:	f7fe fd28 	bl	800a574 <USBD_RegisterClass>
 800bb24:	4603      	mov	r3, r0
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d001      	beq.n	800bb2e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800bb2a:	f7f5 fcd5 	bl	80014d8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800bb2e:	490d      	ldr	r1, [pc, #52]	; (800bb64 <MX_USB_DEVICE_Init+0x60>)
 800bb30:	480a      	ldr	r0, [pc, #40]	; (800bb5c <MX_USB_DEVICE_Init+0x58>)
 800bb32:	f7fe fc1f 	bl	800a374 <USBD_CDC_RegisterInterface>
 800bb36:	4603      	mov	r3, r0
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d001      	beq.n	800bb40 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800bb3c:	f7f5 fccc 	bl	80014d8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800bb40:	4806      	ldr	r0, [pc, #24]	; (800bb5c <MX_USB_DEVICE_Init+0x58>)
 800bb42:	f7fe fd4d 	bl	800a5e0 <USBD_Start>
 800bb46:	4603      	mov	r3, r0
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d001      	beq.n	800bb50 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800bb4c:	f7f5 fcc4 	bl	80014d8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800bb50:	f7f8 fdc0 	bl	80046d4 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800bb54:	bf00      	nop
 800bb56:	bd80      	pop	{r7, pc}
 800bb58:	240000cc 	.word	0x240000cc
 800bb5c:	24000404 	.word	0x24000404
 800bb60:	24000038 	.word	0x24000038
 800bb64:	240000b8 	.word	0x240000b8

0800bb68 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800bb68:	b580      	push	{r7, lr}
 800bb6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800bb6c:	2200      	movs	r2, #0
 800bb6e:	4905      	ldr	r1, [pc, #20]	; (800bb84 <CDC_Init_FS+0x1c>)
 800bb70:	4805      	ldr	r0, [pc, #20]	; (800bb88 <CDC_Init_FS+0x20>)
 800bb72:	f7fe fc19 	bl	800a3a8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800bb76:	4905      	ldr	r1, [pc, #20]	; (800bb8c <CDC_Init_FS+0x24>)
 800bb78:	4803      	ldr	r0, [pc, #12]	; (800bb88 <CDC_Init_FS+0x20>)
 800bb7a:	f7fe fc37 	bl	800a3ec <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800bb7e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800bb80:	4618      	mov	r0, r3
 800bb82:	bd80      	pop	{r7, pc}
 800bb84:	24000ee0 	.word	0x24000ee0
 800bb88:	24000404 	.word	0x24000404
 800bb8c:	240006e0 	.word	0x240006e0

0800bb90 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800bb90:	b480      	push	{r7}
 800bb92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800bb94:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800bb96:	4618      	mov	r0, r3
 800bb98:	46bd      	mov	sp, r7
 800bb9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb9e:	4770      	bx	lr

0800bba0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800bba0:	b480      	push	{r7}
 800bba2:	b083      	sub	sp, #12
 800bba4:	af00      	add	r7, sp, #0
 800bba6:	4603      	mov	r3, r0
 800bba8:	6039      	str	r1, [r7, #0]
 800bbaa:	71fb      	strb	r3, [r7, #7]
 800bbac:	4613      	mov	r3, r2
 800bbae:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800bbb0:	79fb      	ldrb	r3, [r7, #7]
 800bbb2:	2b23      	cmp	r3, #35	; 0x23
 800bbb4:	d84a      	bhi.n	800bc4c <CDC_Control_FS+0xac>
 800bbb6:	a201      	add	r2, pc, #4	; (adr r2, 800bbbc <CDC_Control_FS+0x1c>)
 800bbb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbbc:	0800bc4d 	.word	0x0800bc4d
 800bbc0:	0800bc4d 	.word	0x0800bc4d
 800bbc4:	0800bc4d 	.word	0x0800bc4d
 800bbc8:	0800bc4d 	.word	0x0800bc4d
 800bbcc:	0800bc4d 	.word	0x0800bc4d
 800bbd0:	0800bc4d 	.word	0x0800bc4d
 800bbd4:	0800bc4d 	.word	0x0800bc4d
 800bbd8:	0800bc4d 	.word	0x0800bc4d
 800bbdc:	0800bc4d 	.word	0x0800bc4d
 800bbe0:	0800bc4d 	.word	0x0800bc4d
 800bbe4:	0800bc4d 	.word	0x0800bc4d
 800bbe8:	0800bc4d 	.word	0x0800bc4d
 800bbec:	0800bc4d 	.word	0x0800bc4d
 800bbf0:	0800bc4d 	.word	0x0800bc4d
 800bbf4:	0800bc4d 	.word	0x0800bc4d
 800bbf8:	0800bc4d 	.word	0x0800bc4d
 800bbfc:	0800bc4d 	.word	0x0800bc4d
 800bc00:	0800bc4d 	.word	0x0800bc4d
 800bc04:	0800bc4d 	.word	0x0800bc4d
 800bc08:	0800bc4d 	.word	0x0800bc4d
 800bc0c:	0800bc4d 	.word	0x0800bc4d
 800bc10:	0800bc4d 	.word	0x0800bc4d
 800bc14:	0800bc4d 	.word	0x0800bc4d
 800bc18:	0800bc4d 	.word	0x0800bc4d
 800bc1c:	0800bc4d 	.word	0x0800bc4d
 800bc20:	0800bc4d 	.word	0x0800bc4d
 800bc24:	0800bc4d 	.word	0x0800bc4d
 800bc28:	0800bc4d 	.word	0x0800bc4d
 800bc2c:	0800bc4d 	.word	0x0800bc4d
 800bc30:	0800bc4d 	.word	0x0800bc4d
 800bc34:	0800bc4d 	.word	0x0800bc4d
 800bc38:	0800bc4d 	.word	0x0800bc4d
 800bc3c:	0800bc4d 	.word	0x0800bc4d
 800bc40:	0800bc4d 	.word	0x0800bc4d
 800bc44:	0800bc4d 	.word	0x0800bc4d
 800bc48:	0800bc4d 	.word	0x0800bc4d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800bc4c:	bf00      	nop
  }

  return (USBD_OK);
 800bc4e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800bc50:	4618      	mov	r0, r3
 800bc52:	370c      	adds	r7, #12
 800bc54:	46bd      	mov	sp, r7
 800bc56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc5a:	4770      	bx	lr

0800bc5c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800bc5c:	b580      	push	{r7, lr}
 800bc5e:	b082      	sub	sp, #8
 800bc60:	af00      	add	r7, sp, #0
 800bc62:	6078      	str	r0, [r7, #4]
 800bc64:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800bc66:	6879      	ldr	r1, [r7, #4]
 800bc68:	4805      	ldr	r0, [pc, #20]	; (800bc80 <CDC_Receive_FS+0x24>)
 800bc6a:	f7fe fbbf 	bl	800a3ec <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800bc6e:	4804      	ldr	r0, [pc, #16]	; (800bc80 <CDC_Receive_FS+0x24>)
 800bc70:	f7fe fc1a 	bl	800a4a8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800bc74:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800bc76:	4618      	mov	r0, r3
 800bc78:	3708      	adds	r7, #8
 800bc7a:	46bd      	mov	sp, r7
 800bc7c:	bd80      	pop	{r7, pc}
 800bc7e:	bf00      	nop
 800bc80:	24000404 	.word	0x24000404

0800bc84 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800bc84:	b580      	push	{r7, lr}
 800bc86:	b084      	sub	sp, #16
 800bc88:	af00      	add	r7, sp, #0
 800bc8a:	6078      	str	r0, [r7, #4]
 800bc8c:	460b      	mov	r3, r1
 800bc8e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800bc90:	2300      	movs	r3, #0
 800bc92:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800bc94:	4b0d      	ldr	r3, [pc, #52]	; (800bccc <CDC_Transmit_FS+0x48>)
 800bc96:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bc9a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800bc9c:	68bb      	ldr	r3, [r7, #8]
 800bc9e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d001      	beq.n	800bcaa <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800bca6:	2301      	movs	r3, #1
 800bca8:	e00b      	b.n	800bcc2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800bcaa:	887b      	ldrh	r3, [r7, #2]
 800bcac:	461a      	mov	r2, r3
 800bcae:	6879      	ldr	r1, [r7, #4]
 800bcb0:	4806      	ldr	r0, [pc, #24]	; (800bccc <CDC_Transmit_FS+0x48>)
 800bcb2:	f7fe fb79 	bl	800a3a8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800bcb6:	4805      	ldr	r0, [pc, #20]	; (800bccc <CDC_Transmit_FS+0x48>)
 800bcb8:	f7fe fbb6 	bl	800a428 <USBD_CDC_TransmitPacket>
 800bcbc:	4603      	mov	r3, r0
 800bcbe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800bcc0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcc2:	4618      	mov	r0, r3
 800bcc4:	3710      	adds	r7, #16
 800bcc6:	46bd      	mov	sp, r7
 800bcc8:	bd80      	pop	{r7, pc}
 800bcca:	bf00      	nop
 800bccc:	24000404 	.word	0x24000404

0800bcd0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800bcd0:	b480      	push	{r7}
 800bcd2:	b087      	sub	sp, #28
 800bcd4:	af00      	add	r7, sp, #0
 800bcd6:	60f8      	str	r0, [r7, #12]
 800bcd8:	60b9      	str	r1, [r7, #8]
 800bcda:	4613      	mov	r3, r2
 800bcdc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800bcde:	2300      	movs	r3, #0
 800bce0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800bce2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bce6:	4618      	mov	r0, r3
 800bce8:	371c      	adds	r7, #28
 800bcea:	46bd      	mov	sp, r7
 800bcec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf0:	4770      	bx	lr
	...

0800bcf4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bcf4:	b480      	push	{r7}
 800bcf6:	b083      	sub	sp, #12
 800bcf8:	af00      	add	r7, sp, #0
 800bcfa:	4603      	mov	r3, r0
 800bcfc:	6039      	str	r1, [r7, #0]
 800bcfe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800bd00:	683b      	ldr	r3, [r7, #0]
 800bd02:	2212      	movs	r2, #18
 800bd04:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800bd06:	4b03      	ldr	r3, [pc, #12]	; (800bd14 <USBD_FS_DeviceDescriptor+0x20>)
}
 800bd08:	4618      	mov	r0, r3
 800bd0a:	370c      	adds	r7, #12
 800bd0c:	46bd      	mov	sp, r7
 800bd0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd12:	4770      	bx	lr
 800bd14:	240000e8 	.word	0x240000e8

0800bd18 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd18:	b480      	push	{r7}
 800bd1a:	b083      	sub	sp, #12
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	4603      	mov	r3, r0
 800bd20:	6039      	str	r1, [r7, #0]
 800bd22:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800bd24:	683b      	ldr	r3, [r7, #0]
 800bd26:	2204      	movs	r2, #4
 800bd28:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800bd2a:	4b03      	ldr	r3, [pc, #12]	; (800bd38 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800bd2c:	4618      	mov	r0, r3
 800bd2e:	370c      	adds	r7, #12
 800bd30:	46bd      	mov	sp, r7
 800bd32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd36:	4770      	bx	lr
 800bd38:	240000fc 	.word	0x240000fc

0800bd3c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd3c:	b580      	push	{r7, lr}
 800bd3e:	b082      	sub	sp, #8
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	4603      	mov	r3, r0
 800bd44:	6039      	str	r1, [r7, #0]
 800bd46:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bd48:	79fb      	ldrb	r3, [r7, #7]
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d105      	bne.n	800bd5a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bd4e:	683a      	ldr	r2, [r7, #0]
 800bd50:	4907      	ldr	r1, [pc, #28]	; (800bd70 <USBD_FS_ProductStrDescriptor+0x34>)
 800bd52:	4808      	ldr	r0, [pc, #32]	; (800bd74 <USBD_FS_ProductStrDescriptor+0x38>)
 800bd54:	f7ff fdf6 	bl	800b944 <USBD_GetString>
 800bd58:	e004      	b.n	800bd64 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bd5a:	683a      	ldr	r2, [r7, #0]
 800bd5c:	4904      	ldr	r1, [pc, #16]	; (800bd70 <USBD_FS_ProductStrDescriptor+0x34>)
 800bd5e:	4805      	ldr	r0, [pc, #20]	; (800bd74 <USBD_FS_ProductStrDescriptor+0x38>)
 800bd60:	f7ff fdf0 	bl	800b944 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bd64:	4b02      	ldr	r3, [pc, #8]	; (800bd70 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800bd66:	4618      	mov	r0, r3
 800bd68:	3708      	adds	r7, #8
 800bd6a:	46bd      	mov	sp, r7
 800bd6c:	bd80      	pop	{r7, pc}
 800bd6e:	bf00      	nop
 800bd70:	240016e0 	.word	0x240016e0
 800bd74:	0800d4fc 	.word	0x0800d4fc

0800bd78 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd78:	b580      	push	{r7, lr}
 800bd7a:	b082      	sub	sp, #8
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	4603      	mov	r3, r0
 800bd80:	6039      	str	r1, [r7, #0]
 800bd82:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800bd84:	683a      	ldr	r2, [r7, #0]
 800bd86:	4904      	ldr	r1, [pc, #16]	; (800bd98 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800bd88:	4804      	ldr	r0, [pc, #16]	; (800bd9c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800bd8a:	f7ff fddb 	bl	800b944 <USBD_GetString>
  return USBD_StrDesc;
 800bd8e:	4b02      	ldr	r3, [pc, #8]	; (800bd98 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800bd90:	4618      	mov	r0, r3
 800bd92:	3708      	adds	r7, #8
 800bd94:	46bd      	mov	sp, r7
 800bd96:	bd80      	pop	{r7, pc}
 800bd98:	240016e0 	.word	0x240016e0
 800bd9c:	0800d514 	.word	0x0800d514

0800bda0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bda0:	b580      	push	{r7, lr}
 800bda2:	b082      	sub	sp, #8
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	4603      	mov	r3, r0
 800bda8:	6039      	str	r1, [r7, #0]
 800bdaa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800bdac:	683b      	ldr	r3, [r7, #0]
 800bdae:	221a      	movs	r2, #26
 800bdb0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800bdb2:	f000 f843 	bl	800be3c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800bdb6:	4b02      	ldr	r3, [pc, #8]	; (800bdc0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800bdb8:	4618      	mov	r0, r3
 800bdba:	3708      	adds	r7, #8
 800bdbc:	46bd      	mov	sp, r7
 800bdbe:	bd80      	pop	{r7, pc}
 800bdc0:	24000100 	.word	0x24000100

0800bdc4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bdc4:	b580      	push	{r7, lr}
 800bdc6:	b082      	sub	sp, #8
 800bdc8:	af00      	add	r7, sp, #0
 800bdca:	4603      	mov	r3, r0
 800bdcc:	6039      	str	r1, [r7, #0]
 800bdce:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800bdd0:	79fb      	ldrb	r3, [r7, #7]
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d105      	bne.n	800bde2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bdd6:	683a      	ldr	r2, [r7, #0]
 800bdd8:	4907      	ldr	r1, [pc, #28]	; (800bdf8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800bdda:	4808      	ldr	r0, [pc, #32]	; (800bdfc <USBD_FS_ConfigStrDescriptor+0x38>)
 800bddc:	f7ff fdb2 	bl	800b944 <USBD_GetString>
 800bde0:	e004      	b.n	800bdec <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bde2:	683a      	ldr	r2, [r7, #0]
 800bde4:	4904      	ldr	r1, [pc, #16]	; (800bdf8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800bde6:	4805      	ldr	r0, [pc, #20]	; (800bdfc <USBD_FS_ConfigStrDescriptor+0x38>)
 800bde8:	f7ff fdac 	bl	800b944 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bdec:	4b02      	ldr	r3, [pc, #8]	; (800bdf8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800bdee:	4618      	mov	r0, r3
 800bdf0:	3708      	adds	r7, #8
 800bdf2:	46bd      	mov	sp, r7
 800bdf4:	bd80      	pop	{r7, pc}
 800bdf6:	bf00      	nop
 800bdf8:	240016e0 	.word	0x240016e0
 800bdfc:	0800d528 	.word	0x0800d528

0800be00 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be00:	b580      	push	{r7, lr}
 800be02:	b082      	sub	sp, #8
 800be04:	af00      	add	r7, sp, #0
 800be06:	4603      	mov	r3, r0
 800be08:	6039      	str	r1, [r7, #0]
 800be0a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800be0c:	79fb      	ldrb	r3, [r7, #7]
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d105      	bne.n	800be1e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800be12:	683a      	ldr	r2, [r7, #0]
 800be14:	4907      	ldr	r1, [pc, #28]	; (800be34 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800be16:	4808      	ldr	r0, [pc, #32]	; (800be38 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800be18:	f7ff fd94 	bl	800b944 <USBD_GetString>
 800be1c:	e004      	b.n	800be28 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800be1e:	683a      	ldr	r2, [r7, #0]
 800be20:	4904      	ldr	r1, [pc, #16]	; (800be34 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800be22:	4805      	ldr	r0, [pc, #20]	; (800be38 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800be24:	f7ff fd8e 	bl	800b944 <USBD_GetString>
  }
  return USBD_StrDesc;
 800be28:	4b02      	ldr	r3, [pc, #8]	; (800be34 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800be2a:	4618      	mov	r0, r3
 800be2c:	3708      	adds	r7, #8
 800be2e:	46bd      	mov	sp, r7
 800be30:	bd80      	pop	{r7, pc}
 800be32:	bf00      	nop
 800be34:	240016e0 	.word	0x240016e0
 800be38:	0800d534 	.word	0x0800d534

0800be3c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800be3c:	b580      	push	{r7, lr}
 800be3e:	b084      	sub	sp, #16
 800be40:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800be42:	4b0f      	ldr	r3, [pc, #60]	; (800be80 <Get_SerialNum+0x44>)
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800be48:	4b0e      	ldr	r3, [pc, #56]	; (800be84 <Get_SerialNum+0x48>)
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800be4e:	4b0e      	ldr	r3, [pc, #56]	; (800be88 <Get_SerialNum+0x4c>)
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800be54:	68fa      	ldr	r2, [r7, #12]
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	4413      	add	r3, r2
 800be5a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d009      	beq.n	800be76 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800be62:	2208      	movs	r2, #8
 800be64:	4909      	ldr	r1, [pc, #36]	; (800be8c <Get_SerialNum+0x50>)
 800be66:	68f8      	ldr	r0, [r7, #12]
 800be68:	f000 f814 	bl	800be94 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800be6c:	2204      	movs	r2, #4
 800be6e:	4908      	ldr	r1, [pc, #32]	; (800be90 <Get_SerialNum+0x54>)
 800be70:	68b8      	ldr	r0, [r7, #8]
 800be72:	f000 f80f 	bl	800be94 <IntToUnicode>
  }
}
 800be76:	bf00      	nop
 800be78:	3710      	adds	r7, #16
 800be7a:	46bd      	mov	sp, r7
 800be7c:	bd80      	pop	{r7, pc}
 800be7e:	bf00      	nop
 800be80:	1ff1e800 	.word	0x1ff1e800
 800be84:	1ff1e804 	.word	0x1ff1e804
 800be88:	1ff1e808 	.word	0x1ff1e808
 800be8c:	24000102 	.word	0x24000102
 800be90:	24000112 	.word	0x24000112

0800be94 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800be94:	b480      	push	{r7}
 800be96:	b087      	sub	sp, #28
 800be98:	af00      	add	r7, sp, #0
 800be9a:	60f8      	str	r0, [r7, #12]
 800be9c:	60b9      	str	r1, [r7, #8]
 800be9e:	4613      	mov	r3, r2
 800bea0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800bea2:	2300      	movs	r3, #0
 800bea4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800bea6:	2300      	movs	r3, #0
 800bea8:	75fb      	strb	r3, [r7, #23]
 800beaa:	e027      	b.n	800befc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	0f1b      	lsrs	r3, r3, #28
 800beb0:	2b09      	cmp	r3, #9
 800beb2:	d80b      	bhi.n	800becc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	0f1b      	lsrs	r3, r3, #28
 800beb8:	b2da      	uxtb	r2, r3
 800beba:	7dfb      	ldrb	r3, [r7, #23]
 800bebc:	005b      	lsls	r3, r3, #1
 800bebe:	4619      	mov	r1, r3
 800bec0:	68bb      	ldr	r3, [r7, #8]
 800bec2:	440b      	add	r3, r1
 800bec4:	3230      	adds	r2, #48	; 0x30
 800bec6:	b2d2      	uxtb	r2, r2
 800bec8:	701a      	strb	r2, [r3, #0]
 800beca:	e00a      	b.n	800bee2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	0f1b      	lsrs	r3, r3, #28
 800bed0:	b2da      	uxtb	r2, r3
 800bed2:	7dfb      	ldrb	r3, [r7, #23]
 800bed4:	005b      	lsls	r3, r3, #1
 800bed6:	4619      	mov	r1, r3
 800bed8:	68bb      	ldr	r3, [r7, #8]
 800beda:	440b      	add	r3, r1
 800bedc:	3237      	adds	r2, #55	; 0x37
 800bede:	b2d2      	uxtb	r2, r2
 800bee0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	011b      	lsls	r3, r3, #4
 800bee6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800bee8:	7dfb      	ldrb	r3, [r7, #23]
 800beea:	005b      	lsls	r3, r3, #1
 800beec:	3301      	adds	r3, #1
 800beee:	68ba      	ldr	r2, [r7, #8]
 800bef0:	4413      	add	r3, r2
 800bef2:	2200      	movs	r2, #0
 800bef4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800bef6:	7dfb      	ldrb	r3, [r7, #23]
 800bef8:	3301      	adds	r3, #1
 800befa:	75fb      	strb	r3, [r7, #23]
 800befc:	7dfa      	ldrb	r2, [r7, #23]
 800befe:	79fb      	ldrb	r3, [r7, #7]
 800bf00:	429a      	cmp	r2, r3
 800bf02:	d3d3      	bcc.n	800beac <IntToUnicode+0x18>
  }
}
 800bf04:	bf00      	nop
 800bf06:	bf00      	nop
 800bf08:	371c      	adds	r7, #28
 800bf0a:	46bd      	mov	sp, r7
 800bf0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf10:	4770      	bx	lr
	...

0800bf14 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800bf14:	b580      	push	{r7, lr}
 800bf16:	b0ba      	sub	sp, #232	; 0xe8
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bf1c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800bf20:	2200      	movs	r2, #0
 800bf22:	601a      	str	r2, [r3, #0]
 800bf24:	605a      	str	r2, [r3, #4]
 800bf26:	609a      	str	r2, [r3, #8]
 800bf28:	60da      	str	r2, [r3, #12]
 800bf2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800bf2c:	f107 0310 	add.w	r3, r7, #16
 800bf30:	22c0      	movs	r2, #192	; 0xc0
 800bf32:	2100      	movs	r1, #0
 800bf34:	4618      	mov	r0, r3
 800bf36:	f000 fb4f 	bl	800c5d8 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	4a2c      	ldr	r2, [pc, #176]	; (800bff0 <HAL_PCD_MspInit+0xdc>)
 800bf40:	4293      	cmp	r3, r2
 800bf42:	d151      	bne.n	800bfe8 <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800bf44:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800bf48:	f04f 0300 	mov.w	r3, #0
 800bf4c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800bf50:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800bf54:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800bf58:	f107 0310 	add.w	r3, r7, #16
 800bf5c:	4618      	mov	r0, r3
 800bf5e:	f7f9 fc53 	bl	8005808 <HAL_RCCEx_PeriphCLKConfig>
 800bf62:	4603      	mov	r3, r0
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d001      	beq.n	800bf6c <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 800bf68:	f7f5 fab6 	bl	80014d8 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800bf6c:	f7f8 fbb2 	bl	80046d4 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bf70:	4b20      	ldr	r3, [pc, #128]	; (800bff4 <HAL_PCD_MspInit+0xe0>)
 800bf72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bf76:	4a1f      	ldr	r2, [pc, #124]	; (800bff4 <HAL_PCD_MspInit+0xe0>)
 800bf78:	f043 0301 	orr.w	r3, r3, #1
 800bf7c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800bf80:	4b1c      	ldr	r3, [pc, #112]	; (800bff4 <HAL_PCD_MspInit+0xe0>)
 800bf82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bf86:	f003 0301 	and.w	r3, r3, #1
 800bf8a:	60fb      	str	r3, [r7, #12]
 800bf8c:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA8     ------> USB_OTG_FS_SOF
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_8|USB_OTG_FS2_P_Pin|USB_OTG_FS2_N_Pin;
 800bf8e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800bf92:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bf96:	2302      	movs	r3, #2
 800bf98:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bf9c:	2300      	movs	r3, #0
 800bf9e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bfa2:	2300      	movs	r3, #0
 800bfa4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800bfa8:	230a      	movs	r3, #10
 800bfaa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bfae:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800bfb2:	4619      	mov	r1, r3
 800bfb4:	4810      	ldr	r0, [pc, #64]	; (800bff8 <HAL_PCD_MspInit+0xe4>)
 800bfb6:	f7f6 fed1 	bl	8002d5c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800bfba:	4b0e      	ldr	r3, [pc, #56]	; (800bff4 <HAL_PCD_MspInit+0xe0>)
 800bfbc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800bfc0:	4a0c      	ldr	r2, [pc, #48]	; (800bff4 <HAL_PCD_MspInit+0xe0>)
 800bfc2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800bfc6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800bfca:	4b0a      	ldr	r3, [pc, #40]	; (800bff4 <HAL_PCD_MspInit+0xe0>)
 800bfcc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800bfd0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bfd4:	60bb      	str	r3, [r7, #8]
 800bfd6:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800bfd8:	2200      	movs	r2, #0
 800bfda:	2100      	movs	r1, #0
 800bfdc:	2065      	movs	r0, #101	; 0x65
 800bfde:	f7f6 fe88 	bl	8002cf2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800bfe2:	2065      	movs	r0, #101	; 0x65
 800bfe4:	f7f6 fe9f 	bl	8002d26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800bfe8:	bf00      	nop
 800bfea:	37e8      	adds	r7, #232	; 0xe8
 800bfec:	46bd      	mov	sp, r7
 800bfee:	bd80      	pop	{r7, pc}
 800bff0:	40080000 	.word	0x40080000
 800bff4:	58024400 	.word	0x58024400
 800bff8:	58020000 	.word	0x58020000

0800bffc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bffc:	b580      	push	{r7, lr}
 800bffe:	b082      	sub	sp, #8
 800c000:	af00      	add	r7, sp, #0
 800c002:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800c010:	4619      	mov	r1, r3
 800c012:	4610      	mov	r0, r2
 800c014:	f7fe fb31 	bl	800a67a <USBD_LL_SetupStage>
}
 800c018:	bf00      	nop
 800c01a:	3708      	adds	r7, #8
 800c01c:	46bd      	mov	sp, r7
 800c01e:	bd80      	pop	{r7, pc}

0800c020 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c020:	b580      	push	{r7, lr}
 800c022:	b082      	sub	sp, #8
 800c024:	af00      	add	r7, sp, #0
 800c026:	6078      	str	r0, [r7, #4]
 800c028:	460b      	mov	r3, r1
 800c02a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800c032:	78fa      	ldrb	r2, [r7, #3]
 800c034:	6879      	ldr	r1, [r7, #4]
 800c036:	4613      	mov	r3, r2
 800c038:	00db      	lsls	r3, r3, #3
 800c03a:	4413      	add	r3, r2
 800c03c:	009b      	lsls	r3, r3, #2
 800c03e:	440b      	add	r3, r1
 800c040:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800c044:	681a      	ldr	r2, [r3, #0]
 800c046:	78fb      	ldrb	r3, [r7, #3]
 800c048:	4619      	mov	r1, r3
 800c04a:	f7fe fb6b 	bl	800a724 <USBD_LL_DataOutStage>
}
 800c04e:	bf00      	nop
 800c050:	3708      	adds	r7, #8
 800c052:	46bd      	mov	sp, r7
 800c054:	bd80      	pop	{r7, pc}

0800c056 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c056:	b580      	push	{r7, lr}
 800c058:	b082      	sub	sp, #8
 800c05a:	af00      	add	r7, sp, #0
 800c05c:	6078      	str	r0, [r7, #4]
 800c05e:	460b      	mov	r3, r1
 800c060:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800c068:	78fa      	ldrb	r2, [r7, #3]
 800c06a:	6879      	ldr	r1, [r7, #4]
 800c06c:	4613      	mov	r3, r2
 800c06e:	00db      	lsls	r3, r3, #3
 800c070:	4413      	add	r3, r2
 800c072:	009b      	lsls	r3, r3, #2
 800c074:	440b      	add	r3, r1
 800c076:	3348      	adds	r3, #72	; 0x48
 800c078:	681a      	ldr	r2, [r3, #0]
 800c07a:	78fb      	ldrb	r3, [r7, #3]
 800c07c:	4619      	mov	r1, r3
 800c07e:	f7fe fc04 	bl	800a88a <USBD_LL_DataInStage>
}
 800c082:	bf00      	nop
 800c084:	3708      	adds	r7, #8
 800c086:	46bd      	mov	sp, r7
 800c088:	bd80      	pop	{r7, pc}

0800c08a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c08a:	b580      	push	{r7, lr}
 800c08c:	b082      	sub	sp, #8
 800c08e:	af00      	add	r7, sp, #0
 800c090:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c098:	4618      	mov	r0, r3
 800c09a:	f7fe fd3e 	bl	800ab1a <USBD_LL_SOF>
}
 800c09e:	bf00      	nop
 800c0a0:	3708      	adds	r7, #8
 800c0a2:	46bd      	mov	sp, r7
 800c0a4:	bd80      	pop	{r7, pc}

0800c0a6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c0a6:	b580      	push	{r7, lr}
 800c0a8:	b084      	sub	sp, #16
 800c0aa:	af00      	add	r7, sp, #0
 800c0ac:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c0ae:	2301      	movs	r3, #1
 800c0b0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	691b      	ldr	r3, [r3, #16]
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d102      	bne.n	800c0c0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800c0ba:	2300      	movs	r3, #0
 800c0bc:	73fb      	strb	r3, [r7, #15]
 800c0be:	e008      	b.n	800c0d2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	691b      	ldr	r3, [r3, #16]
 800c0c4:	2b02      	cmp	r3, #2
 800c0c6:	d102      	bne.n	800c0ce <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800c0c8:	2301      	movs	r3, #1
 800c0ca:	73fb      	strb	r3, [r7, #15]
 800c0cc:	e001      	b.n	800c0d2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800c0ce:	f7f5 fa03 	bl	80014d8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c0d8:	7bfa      	ldrb	r2, [r7, #15]
 800c0da:	4611      	mov	r1, r2
 800c0dc:	4618      	mov	r0, r3
 800c0de:	f7fe fcd8 	bl	800aa92 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c0e8:	4618      	mov	r0, r3
 800c0ea:	f7fe fc80 	bl	800a9ee <USBD_LL_Reset>
}
 800c0ee:	bf00      	nop
 800c0f0:	3710      	adds	r7, #16
 800c0f2:	46bd      	mov	sp, r7
 800c0f4:	bd80      	pop	{r7, pc}
	...

0800c0f8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c0f8:	b580      	push	{r7, lr}
 800c0fa:	b082      	sub	sp, #8
 800c0fc:	af00      	add	r7, sp, #0
 800c0fe:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c106:	4618      	mov	r0, r3
 800c108:	f7fe fcd3 	bl	800aab2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	687a      	ldr	r2, [r7, #4]
 800c118:	6812      	ldr	r2, [r2, #0]
 800c11a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c11e:	f043 0301 	orr.w	r3, r3, #1
 800c122:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	6a1b      	ldr	r3, [r3, #32]
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d005      	beq.n	800c138 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c12c:	4b04      	ldr	r3, [pc, #16]	; (800c140 <HAL_PCD_SuspendCallback+0x48>)
 800c12e:	691b      	ldr	r3, [r3, #16]
 800c130:	4a03      	ldr	r2, [pc, #12]	; (800c140 <HAL_PCD_SuspendCallback+0x48>)
 800c132:	f043 0306 	orr.w	r3, r3, #6
 800c136:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c138:	bf00      	nop
 800c13a:	3708      	adds	r7, #8
 800c13c:	46bd      	mov	sp, r7
 800c13e:	bd80      	pop	{r7, pc}
 800c140:	e000ed00 	.word	0xe000ed00

0800c144 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c144:	b580      	push	{r7, lr}
 800c146:	b082      	sub	sp, #8
 800c148:	af00      	add	r7, sp, #0
 800c14a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c152:	4618      	mov	r0, r3
 800c154:	f7fe fcc9 	bl	800aaea <USBD_LL_Resume>
}
 800c158:	bf00      	nop
 800c15a:	3708      	adds	r7, #8
 800c15c:	46bd      	mov	sp, r7
 800c15e:	bd80      	pop	{r7, pc}

0800c160 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c160:	b580      	push	{r7, lr}
 800c162:	b082      	sub	sp, #8
 800c164:	af00      	add	r7, sp, #0
 800c166:	6078      	str	r0, [r7, #4]
 800c168:	460b      	mov	r3, r1
 800c16a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c172:	78fa      	ldrb	r2, [r7, #3]
 800c174:	4611      	mov	r1, r2
 800c176:	4618      	mov	r0, r3
 800c178:	f7fe fd21 	bl	800abbe <USBD_LL_IsoOUTIncomplete>
}
 800c17c:	bf00      	nop
 800c17e:	3708      	adds	r7, #8
 800c180:	46bd      	mov	sp, r7
 800c182:	bd80      	pop	{r7, pc}

0800c184 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c184:	b580      	push	{r7, lr}
 800c186:	b082      	sub	sp, #8
 800c188:	af00      	add	r7, sp, #0
 800c18a:	6078      	str	r0, [r7, #4]
 800c18c:	460b      	mov	r3, r1
 800c18e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c196:	78fa      	ldrb	r2, [r7, #3]
 800c198:	4611      	mov	r1, r2
 800c19a:	4618      	mov	r0, r3
 800c19c:	f7fe fcdd 	bl	800ab5a <USBD_LL_IsoINIncomplete>
}
 800c1a0:	bf00      	nop
 800c1a2:	3708      	adds	r7, #8
 800c1a4:	46bd      	mov	sp, r7
 800c1a6:	bd80      	pop	{r7, pc}

0800c1a8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c1a8:	b580      	push	{r7, lr}
 800c1aa:	b082      	sub	sp, #8
 800c1ac:	af00      	add	r7, sp, #0
 800c1ae:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c1b6:	4618      	mov	r0, r3
 800c1b8:	f7fe fd33 	bl	800ac22 <USBD_LL_DevConnected>
}
 800c1bc:	bf00      	nop
 800c1be:	3708      	adds	r7, #8
 800c1c0:	46bd      	mov	sp, r7
 800c1c2:	bd80      	pop	{r7, pc}

0800c1c4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c1c4:	b580      	push	{r7, lr}
 800c1c6:	b082      	sub	sp, #8
 800c1c8:	af00      	add	r7, sp, #0
 800c1ca:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c1d2:	4618      	mov	r0, r3
 800c1d4:	f7fe fd30 	bl	800ac38 <USBD_LL_DevDisconnected>
}
 800c1d8:	bf00      	nop
 800c1da:	3708      	adds	r7, #8
 800c1dc:	46bd      	mov	sp, r7
 800c1de:	bd80      	pop	{r7, pc}

0800c1e0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c1e0:	b580      	push	{r7, lr}
 800c1e2:	b082      	sub	sp, #8
 800c1e4:	af00      	add	r7, sp, #0
 800c1e6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	781b      	ldrb	r3, [r3, #0]
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d13e      	bne.n	800c26e <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800c1f0:	4a21      	ldr	r2, [pc, #132]	; (800c278 <USBD_LL_Init+0x98>)
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	4a1f      	ldr	r2, [pc, #124]	; (800c278 <USBD_LL_Init+0x98>)
 800c1fc:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c200:	4b1d      	ldr	r3, [pc, #116]	; (800c278 <USBD_LL_Init+0x98>)
 800c202:	4a1e      	ldr	r2, [pc, #120]	; (800c27c <USBD_LL_Init+0x9c>)
 800c204:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800c206:	4b1c      	ldr	r3, [pc, #112]	; (800c278 <USBD_LL_Init+0x98>)
 800c208:	2209      	movs	r2, #9
 800c20a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800c20c:	4b1a      	ldr	r3, [pc, #104]	; (800c278 <USBD_LL_Init+0x98>)
 800c20e:	2202      	movs	r2, #2
 800c210:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c212:	4b19      	ldr	r3, [pc, #100]	; (800c278 <USBD_LL_Init+0x98>)
 800c214:	2200      	movs	r2, #0
 800c216:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c218:	4b17      	ldr	r3, [pc, #92]	; (800c278 <USBD_LL_Init+0x98>)
 800c21a:	2202      	movs	r2, #2
 800c21c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c21e:	4b16      	ldr	r3, [pc, #88]	; (800c278 <USBD_LL_Init+0x98>)
 800c220:	2200      	movs	r2, #0
 800c222:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800c224:	4b14      	ldr	r3, [pc, #80]	; (800c278 <USBD_LL_Init+0x98>)
 800c226:	2200      	movs	r2, #0
 800c228:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800c22a:	4b13      	ldr	r3, [pc, #76]	; (800c278 <USBD_LL_Init+0x98>)
 800c22c:	2200      	movs	r2, #0
 800c22e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800c230:	4b11      	ldr	r3, [pc, #68]	; (800c278 <USBD_LL_Init+0x98>)
 800c232:	2200      	movs	r2, #0
 800c234:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800c236:	4b10      	ldr	r3, [pc, #64]	; (800c278 <USBD_LL_Init+0x98>)
 800c238:	2200      	movs	r2, #0
 800c23a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800c23c:	4b0e      	ldr	r3, [pc, #56]	; (800c278 <USBD_LL_Init+0x98>)
 800c23e:	2200      	movs	r2, #0
 800c240:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800c242:	480d      	ldr	r0, [pc, #52]	; (800c278 <USBD_LL_Init+0x98>)
 800c244:	f7f6 ff53 	bl	80030ee <HAL_PCD_Init>
 800c248:	4603      	mov	r3, r0
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d001      	beq.n	800c252 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800c24e:	f7f5 f943 	bl	80014d8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800c252:	2180      	movs	r1, #128	; 0x80
 800c254:	4808      	ldr	r0, [pc, #32]	; (800c278 <USBD_LL_Init+0x98>)
 800c256:	f7f8 f9c2 	bl	80045de <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800c25a:	2240      	movs	r2, #64	; 0x40
 800c25c:	2100      	movs	r1, #0
 800c25e:	4806      	ldr	r0, [pc, #24]	; (800c278 <USBD_LL_Init+0x98>)
 800c260:	f7f8 f976 	bl	8004550 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800c264:	2280      	movs	r2, #128	; 0x80
 800c266:	2101      	movs	r1, #1
 800c268:	4803      	ldr	r0, [pc, #12]	; (800c278 <USBD_LL_Init+0x98>)
 800c26a:	f7f8 f971 	bl	8004550 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 800c26e:	2300      	movs	r3, #0
}
 800c270:	4618      	mov	r0, r3
 800c272:	3708      	adds	r7, #8
 800c274:	46bd      	mov	sp, r7
 800c276:	bd80      	pop	{r7, pc}
 800c278:	240018e0 	.word	0x240018e0
 800c27c:	40080000 	.word	0x40080000

0800c280 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c280:	b580      	push	{r7, lr}
 800c282:	b084      	sub	sp, #16
 800c284:	af00      	add	r7, sp, #0
 800c286:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c288:	2300      	movs	r3, #0
 800c28a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c28c:	2300      	movs	r3, #0
 800c28e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c296:	4618      	mov	r0, r3
 800c298:	f7f7 f84d 	bl	8003336 <HAL_PCD_Start>
 800c29c:	4603      	mov	r3, r0
 800c29e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c2a0:	7bfb      	ldrb	r3, [r7, #15]
 800c2a2:	4618      	mov	r0, r3
 800c2a4:	f000 f942 	bl	800c52c <USBD_Get_USB_Status>
 800c2a8:	4603      	mov	r3, r0
 800c2aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c2ac:	7bbb      	ldrb	r3, [r7, #14]
}
 800c2ae:	4618      	mov	r0, r3
 800c2b0:	3710      	adds	r7, #16
 800c2b2:	46bd      	mov	sp, r7
 800c2b4:	bd80      	pop	{r7, pc}

0800c2b6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c2b6:	b580      	push	{r7, lr}
 800c2b8:	b084      	sub	sp, #16
 800c2ba:	af00      	add	r7, sp, #0
 800c2bc:	6078      	str	r0, [r7, #4]
 800c2be:	4608      	mov	r0, r1
 800c2c0:	4611      	mov	r1, r2
 800c2c2:	461a      	mov	r2, r3
 800c2c4:	4603      	mov	r3, r0
 800c2c6:	70fb      	strb	r3, [r7, #3]
 800c2c8:	460b      	mov	r3, r1
 800c2ca:	70bb      	strb	r3, [r7, #2]
 800c2cc:	4613      	mov	r3, r2
 800c2ce:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c2d0:	2300      	movs	r3, #0
 800c2d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c2d4:	2300      	movs	r3, #0
 800c2d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c2de:	78bb      	ldrb	r3, [r7, #2]
 800c2e0:	883a      	ldrh	r2, [r7, #0]
 800c2e2:	78f9      	ldrb	r1, [r7, #3]
 800c2e4:	f7f7 fd4d 	bl	8003d82 <HAL_PCD_EP_Open>
 800c2e8:	4603      	mov	r3, r0
 800c2ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c2ec:	7bfb      	ldrb	r3, [r7, #15]
 800c2ee:	4618      	mov	r0, r3
 800c2f0:	f000 f91c 	bl	800c52c <USBD_Get_USB_Status>
 800c2f4:	4603      	mov	r3, r0
 800c2f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c2f8:	7bbb      	ldrb	r3, [r7, #14]
}
 800c2fa:	4618      	mov	r0, r3
 800c2fc:	3710      	adds	r7, #16
 800c2fe:	46bd      	mov	sp, r7
 800c300:	bd80      	pop	{r7, pc}

0800c302 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c302:	b580      	push	{r7, lr}
 800c304:	b084      	sub	sp, #16
 800c306:	af00      	add	r7, sp, #0
 800c308:	6078      	str	r0, [r7, #4]
 800c30a:	460b      	mov	r3, r1
 800c30c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c30e:	2300      	movs	r3, #0
 800c310:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c312:	2300      	movs	r3, #0
 800c314:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c31c:	78fa      	ldrb	r2, [r7, #3]
 800c31e:	4611      	mov	r1, r2
 800c320:	4618      	mov	r0, r3
 800c322:	f7f7 fd96 	bl	8003e52 <HAL_PCD_EP_Close>
 800c326:	4603      	mov	r3, r0
 800c328:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c32a:	7bfb      	ldrb	r3, [r7, #15]
 800c32c:	4618      	mov	r0, r3
 800c32e:	f000 f8fd 	bl	800c52c <USBD_Get_USB_Status>
 800c332:	4603      	mov	r3, r0
 800c334:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c336:	7bbb      	ldrb	r3, [r7, #14]
}
 800c338:	4618      	mov	r0, r3
 800c33a:	3710      	adds	r7, #16
 800c33c:	46bd      	mov	sp, r7
 800c33e:	bd80      	pop	{r7, pc}

0800c340 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c340:	b580      	push	{r7, lr}
 800c342:	b084      	sub	sp, #16
 800c344:	af00      	add	r7, sp, #0
 800c346:	6078      	str	r0, [r7, #4]
 800c348:	460b      	mov	r3, r1
 800c34a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c34c:	2300      	movs	r3, #0
 800c34e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c350:	2300      	movs	r3, #0
 800c352:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c35a:	78fa      	ldrb	r2, [r7, #3]
 800c35c:	4611      	mov	r1, r2
 800c35e:	4618      	mov	r0, r3
 800c360:	f7f7 fe50 	bl	8004004 <HAL_PCD_EP_SetStall>
 800c364:	4603      	mov	r3, r0
 800c366:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c368:	7bfb      	ldrb	r3, [r7, #15]
 800c36a:	4618      	mov	r0, r3
 800c36c:	f000 f8de 	bl	800c52c <USBD_Get_USB_Status>
 800c370:	4603      	mov	r3, r0
 800c372:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c374:	7bbb      	ldrb	r3, [r7, #14]
}
 800c376:	4618      	mov	r0, r3
 800c378:	3710      	adds	r7, #16
 800c37a:	46bd      	mov	sp, r7
 800c37c:	bd80      	pop	{r7, pc}

0800c37e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c37e:	b580      	push	{r7, lr}
 800c380:	b084      	sub	sp, #16
 800c382:	af00      	add	r7, sp, #0
 800c384:	6078      	str	r0, [r7, #4]
 800c386:	460b      	mov	r3, r1
 800c388:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c38a:	2300      	movs	r3, #0
 800c38c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c38e:	2300      	movs	r3, #0
 800c390:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c398:	78fa      	ldrb	r2, [r7, #3]
 800c39a:	4611      	mov	r1, r2
 800c39c:	4618      	mov	r0, r3
 800c39e:	f7f7 fe95 	bl	80040cc <HAL_PCD_EP_ClrStall>
 800c3a2:	4603      	mov	r3, r0
 800c3a4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c3a6:	7bfb      	ldrb	r3, [r7, #15]
 800c3a8:	4618      	mov	r0, r3
 800c3aa:	f000 f8bf 	bl	800c52c <USBD_Get_USB_Status>
 800c3ae:	4603      	mov	r3, r0
 800c3b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c3b2:	7bbb      	ldrb	r3, [r7, #14]
}
 800c3b4:	4618      	mov	r0, r3
 800c3b6:	3710      	adds	r7, #16
 800c3b8:	46bd      	mov	sp, r7
 800c3ba:	bd80      	pop	{r7, pc}

0800c3bc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c3bc:	b480      	push	{r7}
 800c3be:	b085      	sub	sp, #20
 800c3c0:	af00      	add	r7, sp, #0
 800c3c2:	6078      	str	r0, [r7, #4]
 800c3c4:	460b      	mov	r3, r1
 800c3c6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c3ce:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c3d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	da0b      	bge.n	800c3f0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c3d8:	78fb      	ldrb	r3, [r7, #3]
 800c3da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c3de:	68f9      	ldr	r1, [r7, #12]
 800c3e0:	4613      	mov	r3, r2
 800c3e2:	00db      	lsls	r3, r3, #3
 800c3e4:	4413      	add	r3, r2
 800c3e6:	009b      	lsls	r3, r3, #2
 800c3e8:	440b      	add	r3, r1
 800c3ea:	333e      	adds	r3, #62	; 0x3e
 800c3ec:	781b      	ldrb	r3, [r3, #0]
 800c3ee:	e00b      	b.n	800c408 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c3f0:	78fb      	ldrb	r3, [r7, #3]
 800c3f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c3f6:	68f9      	ldr	r1, [r7, #12]
 800c3f8:	4613      	mov	r3, r2
 800c3fa:	00db      	lsls	r3, r3, #3
 800c3fc:	4413      	add	r3, r2
 800c3fe:	009b      	lsls	r3, r3, #2
 800c400:	440b      	add	r3, r1
 800c402:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800c406:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c408:	4618      	mov	r0, r3
 800c40a:	3714      	adds	r7, #20
 800c40c:	46bd      	mov	sp, r7
 800c40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c412:	4770      	bx	lr

0800c414 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c414:	b580      	push	{r7, lr}
 800c416:	b084      	sub	sp, #16
 800c418:	af00      	add	r7, sp, #0
 800c41a:	6078      	str	r0, [r7, #4]
 800c41c:	460b      	mov	r3, r1
 800c41e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c420:	2300      	movs	r3, #0
 800c422:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c424:	2300      	movs	r3, #0
 800c426:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c42e:	78fa      	ldrb	r2, [r7, #3]
 800c430:	4611      	mov	r1, r2
 800c432:	4618      	mov	r0, r3
 800c434:	f7f7 fc80 	bl	8003d38 <HAL_PCD_SetAddress>
 800c438:	4603      	mov	r3, r0
 800c43a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c43c:	7bfb      	ldrb	r3, [r7, #15]
 800c43e:	4618      	mov	r0, r3
 800c440:	f000 f874 	bl	800c52c <USBD_Get_USB_Status>
 800c444:	4603      	mov	r3, r0
 800c446:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c448:	7bbb      	ldrb	r3, [r7, #14]
}
 800c44a:	4618      	mov	r0, r3
 800c44c:	3710      	adds	r7, #16
 800c44e:	46bd      	mov	sp, r7
 800c450:	bd80      	pop	{r7, pc}

0800c452 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c452:	b580      	push	{r7, lr}
 800c454:	b086      	sub	sp, #24
 800c456:	af00      	add	r7, sp, #0
 800c458:	60f8      	str	r0, [r7, #12]
 800c45a:	607a      	str	r2, [r7, #4]
 800c45c:	603b      	str	r3, [r7, #0]
 800c45e:	460b      	mov	r3, r1
 800c460:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c462:	2300      	movs	r3, #0
 800c464:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c466:	2300      	movs	r3, #0
 800c468:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c470:	7af9      	ldrb	r1, [r7, #11]
 800c472:	683b      	ldr	r3, [r7, #0]
 800c474:	687a      	ldr	r2, [r7, #4]
 800c476:	f7f7 fd8a 	bl	8003f8e <HAL_PCD_EP_Transmit>
 800c47a:	4603      	mov	r3, r0
 800c47c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c47e:	7dfb      	ldrb	r3, [r7, #23]
 800c480:	4618      	mov	r0, r3
 800c482:	f000 f853 	bl	800c52c <USBD_Get_USB_Status>
 800c486:	4603      	mov	r3, r0
 800c488:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c48a:	7dbb      	ldrb	r3, [r7, #22]
}
 800c48c:	4618      	mov	r0, r3
 800c48e:	3718      	adds	r7, #24
 800c490:	46bd      	mov	sp, r7
 800c492:	bd80      	pop	{r7, pc}

0800c494 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c494:	b580      	push	{r7, lr}
 800c496:	b086      	sub	sp, #24
 800c498:	af00      	add	r7, sp, #0
 800c49a:	60f8      	str	r0, [r7, #12]
 800c49c:	607a      	str	r2, [r7, #4]
 800c49e:	603b      	str	r3, [r7, #0]
 800c4a0:	460b      	mov	r3, r1
 800c4a2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c4a4:	2300      	movs	r3, #0
 800c4a6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c4a8:	2300      	movs	r3, #0
 800c4aa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c4b2:	7af9      	ldrb	r1, [r7, #11]
 800c4b4:	683b      	ldr	r3, [r7, #0]
 800c4b6:	687a      	ldr	r2, [r7, #4]
 800c4b8:	f7f7 fd15 	bl	8003ee6 <HAL_PCD_EP_Receive>
 800c4bc:	4603      	mov	r3, r0
 800c4be:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c4c0:	7dfb      	ldrb	r3, [r7, #23]
 800c4c2:	4618      	mov	r0, r3
 800c4c4:	f000 f832 	bl	800c52c <USBD_Get_USB_Status>
 800c4c8:	4603      	mov	r3, r0
 800c4ca:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c4cc:	7dbb      	ldrb	r3, [r7, #22]
}
 800c4ce:	4618      	mov	r0, r3
 800c4d0:	3718      	adds	r7, #24
 800c4d2:	46bd      	mov	sp, r7
 800c4d4:	bd80      	pop	{r7, pc}

0800c4d6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c4d6:	b580      	push	{r7, lr}
 800c4d8:	b082      	sub	sp, #8
 800c4da:	af00      	add	r7, sp, #0
 800c4dc:	6078      	str	r0, [r7, #4]
 800c4de:	460b      	mov	r3, r1
 800c4e0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c4e8:	78fa      	ldrb	r2, [r7, #3]
 800c4ea:	4611      	mov	r1, r2
 800c4ec:	4618      	mov	r0, r3
 800c4ee:	f7f7 fd36 	bl	8003f5e <HAL_PCD_EP_GetRxCount>
 800c4f2:	4603      	mov	r3, r0
}
 800c4f4:	4618      	mov	r0, r3
 800c4f6:	3708      	adds	r7, #8
 800c4f8:	46bd      	mov	sp, r7
 800c4fa:	bd80      	pop	{r7, pc}

0800c4fc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c4fc:	b480      	push	{r7}
 800c4fe:	b083      	sub	sp, #12
 800c500:	af00      	add	r7, sp, #0
 800c502:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c504:	4b03      	ldr	r3, [pc, #12]	; (800c514 <USBD_static_malloc+0x18>)
}
 800c506:	4618      	mov	r0, r3
 800c508:	370c      	adds	r7, #12
 800c50a:	46bd      	mov	sp, r7
 800c50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c510:	4770      	bx	lr
 800c512:	bf00      	nop
 800c514:	24001dec 	.word	0x24001dec

0800c518 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c518:	b480      	push	{r7}
 800c51a:	b083      	sub	sp, #12
 800c51c:	af00      	add	r7, sp, #0
 800c51e:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 800c520:	bf00      	nop
 800c522:	370c      	adds	r7, #12
 800c524:	46bd      	mov	sp, r7
 800c526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c52a:	4770      	bx	lr

0800c52c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c52c:	b480      	push	{r7}
 800c52e:	b085      	sub	sp, #20
 800c530:	af00      	add	r7, sp, #0
 800c532:	4603      	mov	r3, r0
 800c534:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c536:	2300      	movs	r3, #0
 800c538:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c53a:	79fb      	ldrb	r3, [r7, #7]
 800c53c:	2b03      	cmp	r3, #3
 800c53e:	d817      	bhi.n	800c570 <USBD_Get_USB_Status+0x44>
 800c540:	a201      	add	r2, pc, #4	; (adr r2, 800c548 <USBD_Get_USB_Status+0x1c>)
 800c542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c546:	bf00      	nop
 800c548:	0800c559 	.word	0x0800c559
 800c54c:	0800c55f 	.word	0x0800c55f
 800c550:	0800c565 	.word	0x0800c565
 800c554:	0800c56b 	.word	0x0800c56b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c558:	2300      	movs	r3, #0
 800c55a:	73fb      	strb	r3, [r7, #15]
    break;
 800c55c:	e00b      	b.n	800c576 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c55e:	2303      	movs	r3, #3
 800c560:	73fb      	strb	r3, [r7, #15]
    break;
 800c562:	e008      	b.n	800c576 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c564:	2301      	movs	r3, #1
 800c566:	73fb      	strb	r3, [r7, #15]
    break;
 800c568:	e005      	b.n	800c576 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c56a:	2303      	movs	r3, #3
 800c56c:	73fb      	strb	r3, [r7, #15]
    break;
 800c56e:	e002      	b.n	800c576 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c570:	2303      	movs	r3, #3
 800c572:	73fb      	strb	r3, [r7, #15]
    break;
 800c574:	bf00      	nop
  }
  return usb_status;
 800c576:	7bfb      	ldrb	r3, [r7, #15]
}
 800c578:	4618      	mov	r0, r3
 800c57a:	3714      	adds	r7, #20
 800c57c:	46bd      	mov	sp, r7
 800c57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c582:	4770      	bx	lr

0800c584 <__errno>:
 800c584:	4b01      	ldr	r3, [pc, #4]	; (800c58c <__errno+0x8>)
 800c586:	6818      	ldr	r0, [r3, #0]
 800c588:	4770      	bx	lr
 800c58a:	bf00      	nop
 800c58c:	2400011c 	.word	0x2400011c

0800c590 <__libc_init_array>:
 800c590:	b570      	push	{r4, r5, r6, lr}
 800c592:	4d0d      	ldr	r5, [pc, #52]	; (800c5c8 <__libc_init_array+0x38>)
 800c594:	4c0d      	ldr	r4, [pc, #52]	; (800c5cc <__libc_init_array+0x3c>)
 800c596:	1b64      	subs	r4, r4, r5
 800c598:	10a4      	asrs	r4, r4, #2
 800c59a:	2600      	movs	r6, #0
 800c59c:	42a6      	cmp	r6, r4
 800c59e:	d109      	bne.n	800c5b4 <__libc_init_array+0x24>
 800c5a0:	4d0b      	ldr	r5, [pc, #44]	; (800c5d0 <__libc_init_array+0x40>)
 800c5a2:	4c0c      	ldr	r4, [pc, #48]	; (800c5d4 <__libc_init_array+0x44>)
 800c5a4:	f000 ff38 	bl	800d418 <_init>
 800c5a8:	1b64      	subs	r4, r4, r5
 800c5aa:	10a4      	asrs	r4, r4, #2
 800c5ac:	2600      	movs	r6, #0
 800c5ae:	42a6      	cmp	r6, r4
 800c5b0:	d105      	bne.n	800c5be <__libc_init_array+0x2e>
 800c5b2:	bd70      	pop	{r4, r5, r6, pc}
 800c5b4:	f855 3b04 	ldr.w	r3, [r5], #4
 800c5b8:	4798      	blx	r3
 800c5ba:	3601      	adds	r6, #1
 800c5bc:	e7ee      	b.n	800c59c <__libc_init_array+0xc>
 800c5be:	f855 3b04 	ldr.w	r3, [r5], #4
 800c5c2:	4798      	blx	r3
 800c5c4:	3601      	adds	r6, #1
 800c5c6:	e7f2      	b.n	800c5ae <__libc_init_array+0x1e>
 800c5c8:	0800dbd0 	.word	0x0800dbd0
 800c5cc:	0800dbd0 	.word	0x0800dbd0
 800c5d0:	0800dbd0 	.word	0x0800dbd0
 800c5d4:	0800dbd4 	.word	0x0800dbd4

0800c5d8 <memset>:
 800c5d8:	4402      	add	r2, r0
 800c5da:	4603      	mov	r3, r0
 800c5dc:	4293      	cmp	r3, r2
 800c5de:	d100      	bne.n	800c5e2 <memset+0xa>
 800c5e0:	4770      	bx	lr
 800c5e2:	f803 1b01 	strb.w	r1, [r3], #1
 800c5e6:	e7f9      	b.n	800c5dc <memset+0x4>

0800c5e8 <sniprintf>:
 800c5e8:	b40c      	push	{r2, r3}
 800c5ea:	b530      	push	{r4, r5, lr}
 800c5ec:	4b17      	ldr	r3, [pc, #92]	; (800c64c <sniprintf+0x64>)
 800c5ee:	1e0c      	subs	r4, r1, #0
 800c5f0:	681d      	ldr	r5, [r3, #0]
 800c5f2:	b09d      	sub	sp, #116	; 0x74
 800c5f4:	da08      	bge.n	800c608 <sniprintf+0x20>
 800c5f6:	238b      	movs	r3, #139	; 0x8b
 800c5f8:	602b      	str	r3, [r5, #0]
 800c5fa:	f04f 30ff 	mov.w	r0, #4294967295
 800c5fe:	b01d      	add	sp, #116	; 0x74
 800c600:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c604:	b002      	add	sp, #8
 800c606:	4770      	bx	lr
 800c608:	f44f 7302 	mov.w	r3, #520	; 0x208
 800c60c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800c610:	bf14      	ite	ne
 800c612:	f104 33ff 	addne.w	r3, r4, #4294967295
 800c616:	4623      	moveq	r3, r4
 800c618:	9304      	str	r3, [sp, #16]
 800c61a:	9307      	str	r3, [sp, #28]
 800c61c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c620:	9002      	str	r0, [sp, #8]
 800c622:	9006      	str	r0, [sp, #24]
 800c624:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c628:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c62a:	ab21      	add	r3, sp, #132	; 0x84
 800c62c:	a902      	add	r1, sp, #8
 800c62e:	4628      	mov	r0, r5
 800c630:	9301      	str	r3, [sp, #4]
 800c632:	f000 f869 	bl	800c708 <_svfiprintf_r>
 800c636:	1c43      	adds	r3, r0, #1
 800c638:	bfbc      	itt	lt
 800c63a:	238b      	movlt	r3, #139	; 0x8b
 800c63c:	602b      	strlt	r3, [r5, #0]
 800c63e:	2c00      	cmp	r4, #0
 800c640:	d0dd      	beq.n	800c5fe <sniprintf+0x16>
 800c642:	9b02      	ldr	r3, [sp, #8]
 800c644:	2200      	movs	r2, #0
 800c646:	701a      	strb	r2, [r3, #0]
 800c648:	e7d9      	b.n	800c5fe <sniprintf+0x16>
 800c64a:	bf00      	nop
 800c64c:	2400011c 	.word	0x2400011c

0800c650 <__ssputs_r>:
 800c650:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c654:	688e      	ldr	r6, [r1, #8]
 800c656:	429e      	cmp	r6, r3
 800c658:	4682      	mov	sl, r0
 800c65a:	460c      	mov	r4, r1
 800c65c:	4690      	mov	r8, r2
 800c65e:	461f      	mov	r7, r3
 800c660:	d838      	bhi.n	800c6d4 <__ssputs_r+0x84>
 800c662:	898a      	ldrh	r2, [r1, #12]
 800c664:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c668:	d032      	beq.n	800c6d0 <__ssputs_r+0x80>
 800c66a:	6825      	ldr	r5, [r4, #0]
 800c66c:	6909      	ldr	r1, [r1, #16]
 800c66e:	eba5 0901 	sub.w	r9, r5, r1
 800c672:	6965      	ldr	r5, [r4, #20]
 800c674:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c678:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c67c:	3301      	adds	r3, #1
 800c67e:	444b      	add	r3, r9
 800c680:	106d      	asrs	r5, r5, #1
 800c682:	429d      	cmp	r5, r3
 800c684:	bf38      	it	cc
 800c686:	461d      	movcc	r5, r3
 800c688:	0553      	lsls	r3, r2, #21
 800c68a:	d531      	bpl.n	800c6f0 <__ssputs_r+0xa0>
 800c68c:	4629      	mov	r1, r5
 800c68e:	f000 fb63 	bl	800cd58 <_malloc_r>
 800c692:	4606      	mov	r6, r0
 800c694:	b950      	cbnz	r0, 800c6ac <__ssputs_r+0x5c>
 800c696:	230c      	movs	r3, #12
 800c698:	f8ca 3000 	str.w	r3, [sl]
 800c69c:	89a3      	ldrh	r3, [r4, #12]
 800c69e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c6a2:	81a3      	strh	r3, [r4, #12]
 800c6a4:	f04f 30ff 	mov.w	r0, #4294967295
 800c6a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c6ac:	6921      	ldr	r1, [r4, #16]
 800c6ae:	464a      	mov	r2, r9
 800c6b0:	f000 fabe 	bl	800cc30 <memcpy>
 800c6b4:	89a3      	ldrh	r3, [r4, #12]
 800c6b6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c6ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c6be:	81a3      	strh	r3, [r4, #12]
 800c6c0:	6126      	str	r6, [r4, #16]
 800c6c2:	6165      	str	r5, [r4, #20]
 800c6c4:	444e      	add	r6, r9
 800c6c6:	eba5 0509 	sub.w	r5, r5, r9
 800c6ca:	6026      	str	r6, [r4, #0]
 800c6cc:	60a5      	str	r5, [r4, #8]
 800c6ce:	463e      	mov	r6, r7
 800c6d0:	42be      	cmp	r6, r7
 800c6d2:	d900      	bls.n	800c6d6 <__ssputs_r+0x86>
 800c6d4:	463e      	mov	r6, r7
 800c6d6:	6820      	ldr	r0, [r4, #0]
 800c6d8:	4632      	mov	r2, r6
 800c6da:	4641      	mov	r1, r8
 800c6dc:	f000 fab6 	bl	800cc4c <memmove>
 800c6e0:	68a3      	ldr	r3, [r4, #8]
 800c6e2:	1b9b      	subs	r3, r3, r6
 800c6e4:	60a3      	str	r3, [r4, #8]
 800c6e6:	6823      	ldr	r3, [r4, #0]
 800c6e8:	4433      	add	r3, r6
 800c6ea:	6023      	str	r3, [r4, #0]
 800c6ec:	2000      	movs	r0, #0
 800c6ee:	e7db      	b.n	800c6a8 <__ssputs_r+0x58>
 800c6f0:	462a      	mov	r2, r5
 800c6f2:	f000 fba5 	bl	800ce40 <_realloc_r>
 800c6f6:	4606      	mov	r6, r0
 800c6f8:	2800      	cmp	r0, #0
 800c6fa:	d1e1      	bne.n	800c6c0 <__ssputs_r+0x70>
 800c6fc:	6921      	ldr	r1, [r4, #16]
 800c6fe:	4650      	mov	r0, sl
 800c700:	f000 fabe 	bl	800cc80 <_free_r>
 800c704:	e7c7      	b.n	800c696 <__ssputs_r+0x46>
	...

0800c708 <_svfiprintf_r>:
 800c708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c70c:	4698      	mov	r8, r3
 800c70e:	898b      	ldrh	r3, [r1, #12]
 800c710:	061b      	lsls	r3, r3, #24
 800c712:	b09d      	sub	sp, #116	; 0x74
 800c714:	4607      	mov	r7, r0
 800c716:	460d      	mov	r5, r1
 800c718:	4614      	mov	r4, r2
 800c71a:	d50e      	bpl.n	800c73a <_svfiprintf_r+0x32>
 800c71c:	690b      	ldr	r3, [r1, #16]
 800c71e:	b963      	cbnz	r3, 800c73a <_svfiprintf_r+0x32>
 800c720:	2140      	movs	r1, #64	; 0x40
 800c722:	f000 fb19 	bl	800cd58 <_malloc_r>
 800c726:	6028      	str	r0, [r5, #0]
 800c728:	6128      	str	r0, [r5, #16]
 800c72a:	b920      	cbnz	r0, 800c736 <_svfiprintf_r+0x2e>
 800c72c:	230c      	movs	r3, #12
 800c72e:	603b      	str	r3, [r7, #0]
 800c730:	f04f 30ff 	mov.w	r0, #4294967295
 800c734:	e0d1      	b.n	800c8da <_svfiprintf_r+0x1d2>
 800c736:	2340      	movs	r3, #64	; 0x40
 800c738:	616b      	str	r3, [r5, #20]
 800c73a:	2300      	movs	r3, #0
 800c73c:	9309      	str	r3, [sp, #36]	; 0x24
 800c73e:	2320      	movs	r3, #32
 800c740:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c744:	f8cd 800c 	str.w	r8, [sp, #12]
 800c748:	2330      	movs	r3, #48	; 0x30
 800c74a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c8f4 <_svfiprintf_r+0x1ec>
 800c74e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c752:	f04f 0901 	mov.w	r9, #1
 800c756:	4623      	mov	r3, r4
 800c758:	469a      	mov	sl, r3
 800c75a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c75e:	b10a      	cbz	r2, 800c764 <_svfiprintf_r+0x5c>
 800c760:	2a25      	cmp	r2, #37	; 0x25
 800c762:	d1f9      	bne.n	800c758 <_svfiprintf_r+0x50>
 800c764:	ebba 0b04 	subs.w	fp, sl, r4
 800c768:	d00b      	beq.n	800c782 <_svfiprintf_r+0x7a>
 800c76a:	465b      	mov	r3, fp
 800c76c:	4622      	mov	r2, r4
 800c76e:	4629      	mov	r1, r5
 800c770:	4638      	mov	r0, r7
 800c772:	f7ff ff6d 	bl	800c650 <__ssputs_r>
 800c776:	3001      	adds	r0, #1
 800c778:	f000 80aa 	beq.w	800c8d0 <_svfiprintf_r+0x1c8>
 800c77c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c77e:	445a      	add	r2, fp
 800c780:	9209      	str	r2, [sp, #36]	; 0x24
 800c782:	f89a 3000 	ldrb.w	r3, [sl]
 800c786:	2b00      	cmp	r3, #0
 800c788:	f000 80a2 	beq.w	800c8d0 <_svfiprintf_r+0x1c8>
 800c78c:	2300      	movs	r3, #0
 800c78e:	f04f 32ff 	mov.w	r2, #4294967295
 800c792:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c796:	f10a 0a01 	add.w	sl, sl, #1
 800c79a:	9304      	str	r3, [sp, #16]
 800c79c:	9307      	str	r3, [sp, #28]
 800c79e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c7a2:	931a      	str	r3, [sp, #104]	; 0x68
 800c7a4:	4654      	mov	r4, sl
 800c7a6:	2205      	movs	r2, #5
 800c7a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c7ac:	4851      	ldr	r0, [pc, #324]	; (800c8f4 <_svfiprintf_r+0x1ec>)
 800c7ae:	f7f3 fd9f 	bl	80002f0 <memchr>
 800c7b2:	9a04      	ldr	r2, [sp, #16]
 800c7b4:	b9d8      	cbnz	r0, 800c7ee <_svfiprintf_r+0xe6>
 800c7b6:	06d0      	lsls	r0, r2, #27
 800c7b8:	bf44      	itt	mi
 800c7ba:	2320      	movmi	r3, #32
 800c7bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c7c0:	0711      	lsls	r1, r2, #28
 800c7c2:	bf44      	itt	mi
 800c7c4:	232b      	movmi	r3, #43	; 0x2b
 800c7c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c7ca:	f89a 3000 	ldrb.w	r3, [sl]
 800c7ce:	2b2a      	cmp	r3, #42	; 0x2a
 800c7d0:	d015      	beq.n	800c7fe <_svfiprintf_r+0xf6>
 800c7d2:	9a07      	ldr	r2, [sp, #28]
 800c7d4:	4654      	mov	r4, sl
 800c7d6:	2000      	movs	r0, #0
 800c7d8:	f04f 0c0a 	mov.w	ip, #10
 800c7dc:	4621      	mov	r1, r4
 800c7de:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c7e2:	3b30      	subs	r3, #48	; 0x30
 800c7e4:	2b09      	cmp	r3, #9
 800c7e6:	d94e      	bls.n	800c886 <_svfiprintf_r+0x17e>
 800c7e8:	b1b0      	cbz	r0, 800c818 <_svfiprintf_r+0x110>
 800c7ea:	9207      	str	r2, [sp, #28]
 800c7ec:	e014      	b.n	800c818 <_svfiprintf_r+0x110>
 800c7ee:	eba0 0308 	sub.w	r3, r0, r8
 800c7f2:	fa09 f303 	lsl.w	r3, r9, r3
 800c7f6:	4313      	orrs	r3, r2
 800c7f8:	9304      	str	r3, [sp, #16]
 800c7fa:	46a2      	mov	sl, r4
 800c7fc:	e7d2      	b.n	800c7a4 <_svfiprintf_r+0x9c>
 800c7fe:	9b03      	ldr	r3, [sp, #12]
 800c800:	1d19      	adds	r1, r3, #4
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	9103      	str	r1, [sp, #12]
 800c806:	2b00      	cmp	r3, #0
 800c808:	bfbb      	ittet	lt
 800c80a:	425b      	neglt	r3, r3
 800c80c:	f042 0202 	orrlt.w	r2, r2, #2
 800c810:	9307      	strge	r3, [sp, #28]
 800c812:	9307      	strlt	r3, [sp, #28]
 800c814:	bfb8      	it	lt
 800c816:	9204      	strlt	r2, [sp, #16]
 800c818:	7823      	ldrb	r3, [r4, #0]
 800c81a:	2b2e      	cmp	r3, #46	; 0x2e
 800c81c:	d10c      	bne.n	800c838 <_svfiprintf_r+0x130>
 800c81e:	7863      	ldrb	r3, [r4, #1]
 800c820:	2b2a      	cmp	r3, #42	; 0x2a
 800c822:	d135      	bne.n	800c890 <_svfiprintf_r+0x188>
 800c824:	9b03      	ldr	r3, [sp, #12]
 800c826:	1d1a      	adds	r2, r3, #4
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	9203      	str	r2, [sp, #12]
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	bfb8      	it	lt
 800c830:	f04f 33ff 	movlt.w	r3, #4294967295
 800c834:	3402      	adds	r4, #2
 800c836:	9305      	str	r3, [sp, #20]
 800c838:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c904 <_svfiprintf_r+0x1fc>
 800c83c:	7821      	ldrb	r1, [r4, #0]
 800c83e:	2203      	movs	r2, #3
 800c840:	4650      	mov	r0, sl
 800c842:	f7f3 fd55 	bl	80002f0 <memchr>
 800c846:	b140      	cbz	r0, 800c85a <_svfiprintf_r+0x152>
 800c848:	2340      	movs	r3, #64	; 0x40
 800c84a:	eba0 000a 	sub.w	r0, r0, sl
 800c84e:	fa03 f000 	lsl.w	r0, r3, r0
 800c852:	9b04      	ldr	r3, [sp, #16]
 800c854:	4303      	orrs	r3, r0
 800c856:	3401      	adds	r4, #1
 800c858:	9304      	str	r3, [sp, #16]
 800c85a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c85e:	4826      	ldr	r0, [pc, #152]	; (800c8f8 <_svfiprintf_r+0x1f0>)
 800c860:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c864:	2206      	movs	r2, #6
 800c866:	f7f3 fd43 	bl	80002f0 <memchr>
 800c86a:	2800      	cmp	r0, #0
 800c86c:	d038      	beq.n	800c8e0 <_svfiprintf_r+0x1d8>
 800c86e:	4b23      	ldr	r3, [pc, #140]	; (800c8fc <_svfiprintf_r+0x1f4>)
 800c870:	bb1b      	cbnz	r3, 800c8ba <_svfiprintf_r+0x1b2>
 800c872:	9b03      	ldr	r3, [sp, #12]
 800c874:	3307      	adds	r3, #7
 800c876:	f023 0307 	bic.w	r3, r3, #7
 800c87a:	3308      	adds	r3, #8
 800c87c:	9303      	str	r3, [sp, #12]
 800c87e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c880:	4433      	add	r3, r6
 800c882:	9309      	str	r3, [sp, #36]	; 0x24
 800c884:	e767      	b.n	800c756 <_svfiprintf_r+0x4e>
 800c886:	fb0c 3202 	mla	r2, ip, r2, r3
 800c88a:	460c      	mov	r4, r1
 800c88c:	2001      	movs	r0, #1
 800c88e:	e7a5      	b.n	800c7dc <_svfiprintf_r+0xd4>
 800c890:	2300      	movs	r3, #0
 800c892:	3401      	adds	r4, #1
 800c894:	9305      	str	r3, [sp, #20]
 800c896:	4619      	mov	r1, r3
 800c898:	f04f 0c0a 	mov.w	ip, #10
 800c89c:	4620      	mov	r0, r4
 800c89e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c8a2:	3a30      	subs	r2, #48	; 0x30
 800c8a4:	2a09      	cmp	r2, #9
 800c8a6:	d903      	bls.n	800c8b0 <_svfiprintf_r+0x1a8>
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d0c5      	beq.n	800c838 <_svfiprintf_r+0x130>
 800c8ac:	9105      	str	r1, [sp, #20]
 800c8ae:	e7c3      	b.n	800c838 <_svfiprintf_r+0x130>
 800c8b0:	fb0c 2101 	mla	r1, ip, r1, r2
 800c8b4:	4604      	mov	r4, r0
 800c8b6:	2301      	movs	r3, #1
 800c8b8:	e7f0      	b.n	800c89c <_svfiprintf_r+0x194>
 800c8ba:	ab03      	add	r3, sp, #12
 800c8bc:	9300      	str	r3, [sp, #0]
 800c8be:	462a      	mov	r2, r5
 800c8c0:	4b0f      	ldr	r3, [pc, #60]	; (800c900 <_svfiprintf_r+0x1f8>)
 800c8c2:	a904      	add	r1, sp, #16
 800c8c4:	4638      	mov	r0, r7
 800c8c6:	f3af 8000 	nop.w
 800c8ca:	1c42      	adds	r2, r0, #1
 800c8cc:	4606      	mov	r6, r0
 800c8ce:	d1d6      	bne.n	800c87e <_svfiprintf_r+0x176>
 800c8d0:	89ab      	ldrh	r3, [r5, #12]
 800c8d2:	065b      	lsls	r3, r3, #25
 800c8d4:	f53f af2c 	bmi.w	800c730 <_svfiprintf_r+0x28>
 800c8d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c8da:	b01d      	add	sp, #116	; 0x74
 800c8dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8e0:	ab03      	add	r3, sp, #12
 800c8e2:	9300      	str	r3, [sp, #0]
 800c8e4:	462a      	mov	r2, r5
 800c8e6:	4b06      	ldr	r3, [pc, #24]	; (800c900 <_svfiprintf_r+0x1f8>)
 800c8e8:	a904      	add	r1, sp, #16
 800c8ea:	4638      	mov	r0, r7
 800c8ec:	f000 f87a 	bl	800c9e4 <_printf_i>
 800c8f0:	e7eb      	b.n	800c8ca <_svfiprintf_r+0x1c2>
 800c8f2:	bf00      	nop
 800c8f4:	0800d930 	.word	0x0800d930
 800c8f8:	0800d93a 	.word	0x0800d93a
 800c8fc:	00000000 	.word	0x00000000
 800c900:	0800c651 	.word	0x0800c651
 800c904:	0800d936 	.word	0x0800d936

0800c908 <_printf_common>:
 800c908:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c90c:	4616      	mov	r6, r2
 800c90e:	4699      	mov	r9, r3
 800c910:	688a      	ldr	r2, [r1, #8]
 800c912:	690b      	ldr	r3, [r1, #16]
 800c914:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c918:	4293      	cmp	r3, r2
 800c91a:	bfb8      	it	lt
 800c91c:	4613      	movlt	r3, r2
 800c91e:	6033      	str	r3, [r6, #0]
 800c920:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c924:	4607      	mov	r7, r0
 800c926:	460c      	mov	r4, r1
 800c928:	b10a      	cbz	r2, 800c92e <_printf_common+0x26>
 800c92a:	3301      	adds	r3, #1
 800c92c:	6033      	str	r3, [r6, #0]
 800c92e:	6823      	ldr	r3, [r4, #0]
 800c930:	0699      	lsls	r1, r3, #26
 800c932:	bf42      	ittt	mi
 800c934:	6833      	ldrmi	r3, [r6, #0]
 800c936:	3302      	addmi	r3, #2
 800c938:	6033      	strmi	r3, [r6, #0]
 800c93a:	6825      	ldr	r5, [r4, #0]
 800c93c:	f015 0506 	ands.w	r5, r5, #6
 800c940:	d106      	bne.n	800c950 <_printf_common+0x48>
 800c942:	f104 0a19 	add.w	sl, r4, #25
 800c946:	68e3      	ldr	r3, [r4, #12]
 800c948:	6832      	ldr	r2, [r6, #0]
 800c94a:	1a9b      	subs	r3, r3, r2
 800c94c:	42ab      	cmp	r3, r5
 800c94e:	dc26      	bgt.n	800c99e <_printf_common+0x96>
 800c950:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c954:	1e13      	subs	r3, r2, #0
 800c956:	6822      	ldr	r2, [r4, #0]
 800c958:	bf18      	it	ne
 800c95a:	2301      	movne	r3, #1
 800c95c:	0692      	lsls	r2, r2, #26
 800c95e:	d42b      	bmi.n	800c9b8 <_printf_common+0xb0>
 800c960:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c964:	4649      	mov	r1, r9
 800c966:	4638      	mov	r0, r7
 800c968:	47c0      	blx	r8
 800c96a:	3001      	adds	r0, #1
 800c96c:	d01e      	beq.n	800c9ac <_printf_common+0xa4>
 800c96e:	6823      	ldr	r3, [r4, #0]
 800c970:	68e5      	ldr	r5, [r4, #12]
 800c972:	6832      	ldr	r2, [r6, #0]
 800c974:	f003 0306 	and.w	r3, r3, #6
 800c978:	2b04      	cmp	r3, #4
 800c97a:	bf08      	it	eq
 800c97c:	1aad      	subeq	r5, r5, r2
 800c97e:	68a3      	ldr	r3, [r4, #8]
 800c980:	6922      	ldr	r2, [r4, #16]
 800c982:	bf0c      	ite	eq
 800c984:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c988:	2500      	movne	r5, #0
 800c98a:	4293      	cmp	r3, r2
 800c98c:	bfc4      	itt	gt
 800c98e:	1a9b      	subgt	r3, r3, r2
 800c990:	18ed      	addgt	r5, r5, r3
 800c992:	2600      	movs	r6, #0
 800c994:	341a      	adds	r4, #26
 800c996:	42b5      	cmp	r5, r6
 800c998:	d11a      	bne.n	800c9d0 <_printf_common+0xc8>
 800c99a:	2000      	movs	r0, #0
 800c99c:	e008      	b.n	800c9b0 <_printf_common+0xa8>
 800c99e:	2301      	movs	r3, #1
 800c9a0:	4652      	mov	r2, sl
 800c9a2:	4649      	mov	r1, r9
 800c9a4:	4638      	mov	r0, r7
 800c9a6:	47c0      	blx	r8
 800c9a8:	3001      	adds	r0, #1
 800c9aa:	d103      	bne.n	800c9b4 <_printf_common+0xac>
 800c9ac:	f04f 30ff 	mov.w	r0, #4294967295
 800c9b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c9b4:	3501      	adds	r5, #1
 800c9b6:	e7c6      	b.n	800c946 <_printf_common+0x3e>
 800c9b8:	18e1      	adds	r1, r4, r3
 800c9ba:	1c5a      	adds	r2, r3, #1
 800c9bc:	2030      	movs	r0, #48	; 0x30
 800c9be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c9c2:	4422      	add	r2, r4
 800c9c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c9c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c9cc:	3302      	adds	r3, #2
 800c9ce:	e7c7      	b.n	800c960 <_printf_common+0x58>
 800c9d0:	2301      	movs	r3, #1
 800c9d2:	4622      	mov	r2, r4
 800c9d4:	4649      	mov	r1, r9
 800c9d6:	4638      	mov	r0, r7
 800c9d8:	47c0      	blx	r8
 800c9da:	3001      	adds	r0, #1
 800c9dc:	d0e6      	beq.n	800c9ac <_printf_common+0xa4>
 800c9de:	3601      	adds	r6, #1
 800c9e0:	e7d9      	b.n	800c996 <_printf_common+0x8e>
	...

0800c9e4 <_printf_i>:
 800c9e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c9e8:	7e0f      	ldrb	r7, [r1, #24]
 800c9ea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c9ec:	2f78      	cmp	r7, #120	; 0x78
 800c9ee:	4691      	mov	r9, r2
 800c9f0:	4680      	mov	r8, r0
 800c9f2:	460c      	mov	r4, r1
 800c9f4:	469a      	mov	sl, r3
 800c9f6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c9fa:	d807      	bhi.n	800ca0c <_printf_i+0x28>
 800c9fc:	2f62      	cmp	r7, #98	; 0x62
 800c9fe:	d80a      	bhi.n	800ca16 <_printf_i+0x32>
 800ca00:	2f00      	cmp	r7, #0
 800ca02:	f000 80d8 	beq.w	800cbb6 <_printf_i+0x1d2>
 800ca06:	2f58      	cmp	r7, #88	; 0x58
 800ca08:	f000 80a3 	beq.w	800cb52 <_printf_i+0x16e>
 800ca0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ca10:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ca14:	e03a      	b.n	800ca8c <_printf_i+0xa8>
 800ca16:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ca1a:	2b15      	cmp	r3, #21
 800ca1c:	d8f6      	bhi.n	800ca0c <_printf_i+0x28>
 800ca1e:	a101      	add	r1, pc, #4	; (adr r1, 800ca24 <_printf_i+0x40>)
 800ca20:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ca24:	0800ca7d 	.word	0x0800ca7d
 800ca28:	0800ca91 	.word	0x0800ca91
 800ca2c:	0800ca0d 	.word	0x0800ca0d
 800ca30:	0800ca0d 	.word	0x0800ca0d
 800ca34:	0800ca0d 	.word	0x0800ca0d
 800ca38:	0800ca0d 	.word	0x0800ca0d
 800ca3c:	0800ca91 	.word	0x0800ca91
 800ca40:	0800ca0d 	.word	0x0800ca0d
 800ca44:	0800ca0d 	.word	0x0800ca0d
 800ca48:	0800ca0d 	.word	0x0800ca0d
 800ca4c:	0800ca0d 	.word	0x0800ca0d
 800ca50:	0800cb9d 	.word	0x0800cb9d
 800ca54:	0800cac1 	.word	0x0800cac1
 800ca58:	0800cb7f 	.word	0x0800cb7f
 800ca5c:	0800ca0d 	.word	0x0800ca0d
 800ca60:	0800ca0d 	.word	0x0800ca0d
 800ca64:	0800cbbf 	.word	0x0800cbbf
 800ca68:	0800ca0d 	.word	0x0800ca0d
 800ca6c:	0800cac1 	.word	0x0800cac1
 800ca70:	0800ca0d 	.word	0x0800ca0d
 800ca74:	0800ca0d 	.word	0x0800ca0d
 800ca78:	0800cb87 	.word	0x0800cb87
 800ca7c:	682b      	ldr	r3, [r5, #0]
 800ca7e:	1d1a      	adds	r2, r3, #4
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	602a      	str	r2, [r5, #0]
 800ca84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ca88:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ca8c:	2301      	movs	r3, #1
 800ca8e:	e0a3      	b.n	800cbd8 <_printf_i+0x1f4>
 800ca90:	6820      	ldr	r0, [r4, #0]
 800ca92:	6829      	ldr	r1, [r5, #0]
 800ca94:	0606      	lsls	r6, r0, #24
 800ca96:	f101 0304 	add.w	r3, r1, #4
 800ca9a:	d50a      	bpl.n	800cab2 <_printf_i+0xce>
 800ca9c:	680e      	ldr	r6, [r1, #0]
 800ca9e:	602b      	str	r3, [r5, #0]
 800caa0:	2e00      	cmp	r6, #0
 800caa2:	da03      	bge.n	800caac <_printf_i+0xc8>
 800caa4:	232d      	movs	r3, #45	; 0x2d
 800caa6:	4276      	negs	r6, r6
 800caa8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800caac:	485e      	ldr	r0, [pc, #376]	; (800cc28 <_printf_i+0x244>)
 800caae:	230a      	movs	r3, #10
 800cab0:	e019      	b.n	800cae6 <_printf_i+0x102>
 800cab2:	680e      	ldr	r6, [r1, #0]
 800cab4:	602b      	str	r3, [r5, #0]
 800cab6:	f010 0f40 	tst.w	r0, #64	; 0x40
 800caba:	bf18      	it	ne
 800cabc:	b236      	sxthne	r6, r6
 800cabe:	e7ef      	b.n	800caa0 <_printf_i+0xbc>
 800cac0:	682b      	ldr	r3, [r5, #0]
 800cac2:	6820      	ldr	r0, [r4, #0]
 800cac4:	1d19      	adds	r1, r3, #4
 800cac6:	6029      	str	r1, [r5, #0]
 800cac8:	0601      	lsls	r1, r0, #24
 800caca:	d501      	bpl.n	800cad0 <_printf_i+0xec>
 800cacc:	681e      	ldr	r6, [r3, #0]
 800cace:	e002      	b.n	800cad6 <_printf_i+0xf2>
 800cad0:	0646      	lsls	r6, r0, #25
 800cad2:	d5fb      	bpl.n	800cacc <_printf_i+0xe8>
 800cad4:	881e      	ldrh	r6, [r3, #0]
 800cad6:	4854      	ldr	r0, [pc, #336]	; (800cc28 <_printf_i+0x244>)
 800cad8:	2f6f      	cmp	r7, #111	; 0x6f
 800cada:	bf0c      	ite	eq
 800cadc:	2308      	moveq	r3, #8
 800cade:	230a      	movne	r3, #10
 800cae0:	2100      	movs	r1, #0
 800cae2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cae6:	6865      	ldr	r5, [r4, #4]
 800cae8:	60a5      	str	r5, [r4, #8]
 800caea:	2d00      	cmp	r5, #0
 800caec:	bfa2      	ittt	ge
 800caee:	6821      	ldrge	r1, [r4, #0]
 800caf0:	f021 0104 	bicge.w	r1, r1, #4
 800caf4:	6021      	strge	r1, [r4, #0]
 800caf6:	b90e      	cbnz	r6, 800cafc <_printf_i+0x118>
 800caf8:	2d00      	cmp	r5, #0
 800cafa:	d04d      	beq.n	800cb98 <_printf_i+0x1b4>
 800cafc:	4615      	mov	r5, r2
 800cafe:	fbb6 f1f3 	udiv	r1, r6, r3
 800cb02:	fb03 6711 	mls	r7, r3, r1, r6
 800cb06:	5dc7      	ldrb	r7, [r0, r7]
 800cb08:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cb0c:	4637      	mov	r7, r6
 800cb0e:	42bb      	cmp	r3, r7
 800cb10:	460e      	mov	r6, r1
 800cb12:	d9f4      	bls.n	800cafe <_printf_i+0x11a>
 800cb14:	2b08      	cmp	r3, #8
 800cb16:	d10b      	bne.n	800cb30 <_printf_i+0x14c>
 800cb18:	6823      	ldr	r3, [r4, #0]
 800cb1a:	07de      	lsls	r6, r3, #31
 800cb1c:	d508      	bpl.n	800cb30 <_printf_i+0x14c>
 800cb1e:	6923      	ldr	r3, [r4, #16]
 800cb20:	6861      	ldr	r1, [r4, #4]
 800cb22:	4299      	cmp	r1, r3
 800cb24:	bfde      	ittt	le
 800cb26:	2330      	movle	r3, #48	; 0x30
 800cb28:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cb2c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800cb30:	1b52      	subs	r2, r2, r5
 800cb32:	6122      	str	r2, [r4, #16]
 800cb34:	f8cd a000 	str.w	sl, [sp]
 800cb38:	464b      	mov	r3, r9
 800cb3a:	aa03      	add	r2, sp, #12
 800cb3c:	4621      	mov	r1, r4
 800cb3e:	4640      	mov	r0, r8
 800cb40:	f7ff fee2 	bl	800c908 <_printf_common>
 800cb44:	3001      	adds	r0, #1
 800cb46:	d14c      	bne.n	800cbe2 <_printf_i+0x1fe>
 800cb48:	f04f 30ff 	mov.w	r0, #4294967295
 800cb4c:	b004      	add	sp, #16
 800cb4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb52:	4835      	ldr	r0, [pc, #212]	; (800cc28 <_printf_i+0x244>)
 800cb54:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800cb58:	6829      	ldr	r1, [r5, #0]
 800cb5a:	6823      	ldr	r3, [r4, #0]
 800cb5c:	f851 6b04 	ldr.w	r6, [r1], #4
 800cb60:	6029      	str	r1, [r5, #0]
 800cb62:	061d      	lsls	r5, r3, #24
 800cb64:	d514      	bpl.n	800cb90 <_printf_i+0x1ac>
 800cb66:	07df      	lsls	r7, r3, #31
 800cb68:	bf44      	itt	mi
 800cb6a:	f043 0320 	orrmi.w	r3, r3, #32
 800cb6e:	6023      	strmi	r3, [r4, #0]
 800cb70:	b91e      	cbnz	r6, 800cb7a <_printf_i+0x196>
 800cb72:	6823      	ldr	r3, [r4, #0]
 800cb74:	f023 0320 	bic.w	r3, r3, #32
 800cb78:	6023      	str	r3, [r4, #0]
 800cb7a:	2310      	movs	r3, #16
 800cb7c:	e7b0      	b.n	800cae0 <_printf_i+0xfc>
 800cb7e:	6823      	ldr	r3, [r4, #0]
 800cb80:	f043 0320 	orr.w	r3, r3, #32
 800cb84:	6023      	str	r3, [r4, #0]
 800cb86:	2378      	movs	r3, #120	; 0x78
 800cb88:	4828      	ldr	r0, [pc, #160]	; (800cc2c <_printf_i+0x248>)
 800cb8a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800cb8e:	e7e3      	b.n	800cb58 <_printf_i+0x174>
 800cb90:	0659      	lsls	r1, r3, #25
 800cb92:	bf48      	it	mi
 800cb94:	b2b6      	uxthmi	r6, r6
 800cb96:	e7e6      	b.n	800cb66 <_printf_i+0x182>
 800cb98:	4615      	mov	r5, r2
 800cb9a:	e7bb      	b.n	800cb14 <_printf_i+0x130>
 800cb9c:	682b      	ldr	r3, [r5, #0]
 800cb9e:	6826      	ldr	r6, [r4, #0]
 800cba0:	6961      	ldr	r1, [r4, #20]
 800cba2:	1d18      	adds	r0, r3, #4
 800cba4:	6028      	str	r0, [r5, #0]
 800cba6:	0635      	lsls	r5, r6, #24
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	d501      	bpl.n	800cbb0 <_printf_i+0x1cc>
 800cbac:	6019      	str	r1, [r3, #0]
 800cbae:	e002      	b.n	800cbb6 <_printf_i+0x1d2>
 800cbb0:	0670      	lsls	r0, r6, #25
 800cbb2:	d5fb      	bpl.n	800cbac <_printf_i+0x1c8>
 800cbb4:	8019      	strh	r1, [r3, #0]
 800cbb6:	2300      	movs	r3, #0
 800cbb8:	6123      	str	r3, [r4, #16]
 800cbba:	4615      	mov	r5, r2
 800cbbc:	e7ba      	b.n	800cb34 <_printf_i+0x150>
 800cbbe:	682b      	ldr	r3, [r5, #0]
 800cbc0:	1d1a      	adds	r2, r3, #4
 800cbc2:	602a      	str	r2, [r5, #0]
 800cbc4:	681d      	ldr	r5, [r3, #0]
 800cbc6:	6862      	ldr	r2, [r4, #4]
 800cbc8:	2100      	movs	r1, #0
 800cbca:	4628      	mov	r0, r5
 800cbcc:	f7f3 fb90 	bl	80002f0 <memchr>
 800cbd0:	b108      	cbz	r0, 800cbd6 <_printf_i+0x1f2>
 800cbd2:	1b40      	subs	r0, r0, r5
 800cbd4:	6060      	str	r0, [r4, #4]
 800cbd6:	6863      	ldr	r3, [r4, #4]
 800cbd8:	6123      	str	r3, [r4, #16]
 800cbda:	2300      	movs	r3, #0
 800cbdc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cbe0:	e7a8      	b.n	800cb34 <_printf_i+0x150>
 800cbe2:	6923      	ldr	r3, [r4, #16]
 800cbe4:	462a      	mov	r2, r5
 800cbe6:	4649      	mov	r1, r9
 800cbe8:	4640      	mov	r0, r8
 800cbea:	47d0      	blx	sl
 800cbec:	3001      	adds	r0, #1
 800cbee:	d0ab      	beq.n	800cb48 <_printf_i+0x164>
 800cbf0:	6823      	ldr	r3, [r4, #0]
 800cbf2:	079b      	lsls	r3, r3, #30
 800cbf4:	d413      	bmi.n	800cc1e <_printf_i+0x23a>
 800cbf6:	68e0      	ldr	r0, [r4, #12]
 800cbf8:	9b03      	ldr	r3, [sp, #12]
 800cbfa:	4298      	cmp	r0, r3
 800cbfc:	bfb8      	it	lt
 800cbfe:	4618      	movlt	r0, r3
 800cc00:	e7a4      	b.n	800cb4c <_printf_i+0x168>
 800cc02:	2301      	movs	r3, #1
 800cc04:	4632      	mov	r2, r6
 800cc06:	4649      	mov	r1, r9
 800cc08:	4640      	mov	r0, r8
 800cc0a:	47d0      	blx	sl
 800cc0c:	3001      	adds	r0, #1
 800cc0e:	d09b      	beq.n	800cb48 <_printf_i+0x164>
 800cc10:	3501      	adds	r5, #1
 800cc12:	68e3      	ldr	r3, [r4, #12]
 800cc14:	9903      	ldr	r1, [sp, #12]
 800cc16:	1a5b      	subs	r3, r3, r1
 800cc18:	42ab      	cmp	r3, r5
 800cc1a:	dcf2      	bgt.n	800cc02 <_printf_i+0x21e>
 800cc1c:	e7eb      	b.n	800cbf6 <_printf_i+0x212>
 800cc1e:	2500      	movs	r5, #0
 800cc20:	f104 0619 	add.w	r6, r4, #25
 800cc24:	e7f5      	b.n	800cc12 <_printf_i+0x22e>
 800cc26:	bf00      	nop
 800cc28:	0800d941 	.word	0x0800d941
 800cc2c:	0800d952 	.word	0x0800d952

0800cc30 <memcpy>:
 800cc30:	440a      	add	r2, r1
 800cc32:	4291      	cmp	r1, r2
 800cc34:	f100 33ff 	add.w	r3, r0, #4294967295
 800cc38:	d100      	bne.n	800cc3c <memcpy+0xc>
 800cc3a:	4770      	bx	lr
 800cc3c:	b510      	push	{r4, lr}
 800cc3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cc42:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cc46:	4291      	cmp	r1, r2
 800cc48:	d1f9      	bne.n	800cc3e <memcpy+0xe>
 800cc4a:	bd10      	pop	{r4, pc}

0800cc4c <memmove>:
 800cc4c:	4288      	cmp	r0, r1
 800cc4e:	b510      	push	{r4, lr}
 800cc50:	eb01 0402 	add.w	r4, r1, r2
 800cc54:	d902      	bls.n	800cc5c <memmove+0x10>
 800cc56:	4284      	cmp	r4, r0
 800cc58:	4623      	mov	r3, r4
 800cc5a:	d807      	bhi.n	800cc6c <memmove+0x20>
 800cc5c:	1e43      	subs	r3, r0, #1
 800cc5e:	42a1      	cmp	r1, r4
 800cc60:	d008      	beq.n	800cc74 <memmove+0x28>
 800cc62:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cc66:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cc6a:	e7f8      	b.n	800cc5e <memmove+0x12>
 800cc6c:	4402      	add	r2, r0
 800cc6e:	4601      	mov	r1, r0
 800cc70:	428a      	cmp	r2, r1
 800cc72:	d100      	bne.n	800cc76 <memmove+0x2a>
 800cc74:	bd10      	pop	{r4, pc}
 800cc76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cc7a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cc7e:	e7f7      	b.n	800cc70 <memmove+0x24>

0800cc80 <_free_r>:
 800cc80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cc82:	2900      	cmp	r1, #0
 800cc84:	d044      	beq.n	800cd10 <_free_r+0x90>
 800cc86:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cc8a:	9001      	str	r0, [sp, #4]
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	f1a1 0404 	sub.w	r4, r1, #4
 800cc92:	bfb8      	it	lt
 800cc94:	18e4      	addlt	r4, r4, r3
 800cc96:	f000 f913 	bl	800cec0 <__malloc_lock>
 800cc9a:	4a1e      	ldr	r2, [pc, #120]	; (800cd14 <_free_r+0x94>)
 800cc9c:	9801      	ldr	r0, [sp, #4]
 800cc9e:	6813      	ldr	r3, [r2, #0]
 800cca0:	b933      	cbnz	r3, 800ccb0 <_free_r+0x30>
 800cca2:	6063      	str	r3, [r4, #4]
 800cca4:	6014      	str	r4, [r2, #0]
 800cca6:	b003      	add	sp, #12
 800cca8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ccac:	f000 b90e 	b.w	800cecc <__malloc_unlock>
 800ccb0:	42a3      	cmp	r3, r4
 800ccb2:	d908      	bls.n	800ccc6 <_free_r+0x46>
 800ccb4:	6825      	ldr	r5, [r4, #0]
 800ccb6:	1961      	adds	r1, r4, r5
 800ccb8:	428b      	cmp	r3, r1
 800ccba:	bf01      	itttt	eq
 800ccbc:	6819      	ldreq	r1, [r3, #0]
 800ccbe:	685b      	ldreq	r3, [r3, #4]
 800ccc0:	1949      	addeq	r1, r1, r5
 800ccc2:	6021      	streq	r1, [r4, #0]
 800ccc4:	e7ed      	b.n	800cca2 <_free_r+0x22>
 800ccc6:	461a      	mov	r2, r3
 800ccc8:	685b      	ldr	r3, [r3, #4]
 800ccca:	b10b      	cbz	r3, 800ccd0 <_free_r+0x50>
 800cccc:	42a3      	cmp	r3, r4
 800ccce:	d9fa      	bls.n	800ccc6 <_free_r+0x46>
 800ccd0:	6811      	ldr	r1, [r2, #0]
 800ccd2:	1855      	adds	r5, r2, r1
 800ccd4:	42a5      	cmp	r5, r4
 800ccd6:	d10b      	bne.n	800ccf0 <_free_r+0x70>
 800ccd8:	6824      	ldr	r4, [r4, #0]
 800ccda:	4421      	add	r1, r4
 800ccdc:	1854      	adds	r4, r2, r1
 800ccde:	42a3      	cmp	r3, r4
 800cce0:	6011      	str	r1, [r2, #0]
 800cce2:	d1e0      	bne.n	800cca6 <_free_r+0x26>
 800cce4:	681c      	ldr	r4, [r3, #0]
 800cce6:	685b      	ldr	r3, [r3, #4]
 800cce8:	6053      	str	r3, [r2, #4]
 800ccea:	4421      	add	r1, r4
 800ccec:	6011      	str	r1, [r2, #0]
 800ccee:	e7da      	b.n	800cca6 <_free_r+0x26>
 800ccf0:	d902      	bls.n	800ccf8 <_free_r+0x78>
 800ccf2:	230c      	movs	r3, #12
 800ccf4:	6003      	str	r3, [r0, #0]
 800ccf6:	e7d6      	b.n	800cca6 <_free_r+0x26>
 800ccf8:	6825      	ldr	r5, [r4, #0]
 800ccfa:	1961      	adds	r1, r4, r5
 800ccfc:	428b      	cmp	r3, r1
 800ccfe:	bf04      	itt	eq
 800cd00:	6819      	ldreq	r1, [r3, #0]
 800cd02:	685b      	ldreq	r3, [r3, #4]
 800cd04:	6063      	str	r3, [r4, #4]
 800cd06:	bf04      	itt	eq
 800cd08:	1949      	addeq	r1, r1, r5
 800cd0a:	6021      	streq	r1, [r4, #0]
 800cd0c:	6054      	str	r4, [r2, #4]
 800cd0e:	e7ca      	b.n	800cca6 <_free_r+0x26>
 800cd10:	b003      	add	sp, #12
 800cd12:	bd30      	pop	{r4, r5, pc}
 800cd14:	2400200c 	.word	0x2400200c

0800cd18 <sbrk_aligned>:
 800cd18:	b570      	push	{r4, r5, r6, lr}
 800cd1a:	4e0e      	ldr	r6, [pc, #56]	; (800cd54 <sbrk_aligned+0x3c>)
 800cd1c:	460c      	mov	r4, r1
 800cd1e:	6831      	ldr	r1, [r6, #0]
 800cd20:	4605      	mov	r5, r0
 800cd22:	b911      	cbnz	r1, 800cd2a <sbrk_aligned+0x12>
 800cd24:	f000 f8bc 	bl	800cea0 <_sbrk_r>
 800cd28:	6030      	str	r0, [r6, #0]
 800cd2a:	4621      	mov	r1, r4
 800cd2c:	4628      	mov	r0, r5
 800cd2e:	f000 f8b7 	bl	800cea0 <_sbrk_r>
 800cd32:	1c43      	adds	r3, r0, #1
 800cd34:	d00a      	beq.n	800cd4c <sbrk_aligned+0x34>
 800cd36:	1cc4      	adds	r4, r0, #3
 800cd38:	f024 0403 	bic.w	r4, r4, #3
 800cd3c:	42a0      	cmp	r0, r4
 800cd3e:	d007      	beq.n	800cd50 <sbrk_aligned+0x38>
 800cd40:	1a21      	subs	r1, r4, r0
 800cd42:	4628      	mov	r0, r5
 800cd44:	f000 f8ac 	bl	800cea0 <_sbrk_r>
 800cd48:	3001      	adds	r0, #1
 800cd4a:	d101      	bne.n	800cd50 <sbrk_aligned+0x38>
 800cd4c:	f04f 34ff 	mov.w	r4, #4294967295
 800cd50:	4620      	mov	r0, r4
 800cd52:	bd70      	pop	{r4, r5, r6, pc}
 800cd54:	24002010 	.word	0x24002010

0800cd58 <_malloc_r>:
 800cd58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd5c:	1ccd      	adds	r5, r1, #3
 800cd5e:	f025 0503 	bic.w	r5, r5, #3
 800cd62:	3508      	adds	r5, #8
 800cd64:	2d0c      	cmp	r5, #12
 800cd66:	bf38      	it	cc
 800cd68:	250c      	movcc	r5, #12
 800cd6a:	2d00      	cmp	r5, #0
 800cd6c:	4607      	mov	r7, r0
 800cd6e:	db01      	blt.n	800cd74 <_malloc_r+0x1c>
 800cd70:	42a9      	cmp	r1, r5
 800cd72:	d905      	bls.n	800cd80 <_malloc_r+0x28>
 800cd74:	230c      	movs	r3, #12
 800cd76:	603b      	str	r3, [r7, #0]
 800cd78:	2600      	movs	r6, #0
 800cd7a:	4630      	mov	r0, r6
 800cd7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd80:	4e2e      	ldr	r6, [pc, #184]	; (800ce3c <_malloc_r+0xe4>)
 800cd82:	f000 f89d 	bl	800cec0 <__malloc_lock>
 800cd86:	6833      	ldr	r3, [r6, #0]
 800cd88:	461c      	mov	r4, r3
 800cd8a:	bb34      	cbnz	r4, 800cdda <_malloc_r+0x82>
 800cd8c:	4629      	mov	r1, r5
 800cd8e:	4638      	mov	r0, r7
 800cd90:	f7ff ffc2 	bl	800cd18 <sbrk_aligned>
 800cd94:	1c43      	adds	r3, r0, #1
 800cd96:	4604      	mov	r4, r0
 800cd98:	d14d      	bne.n	800ce36 <_malloc_r+0xde>
 800cd9a:	6834      	ldr	r4, [r6, #0]
 800cd9c:	4626      	mov	r6, r4
 800cd9e:	2e00      	cmp	r6, #0
 800cda0:	d140      	bne.n	800ce24 <_malloc_r+0xcc>
 800cda2:	6823      	ldr	r3, [r4, #0]
 800cda4:	4631      	mov	r1, r6
 800cda6:	4638      	mov	r0, r7
 800cda8:	eb04 0803 	add.w	r8, r4, r3
 800cdac:	f000 f878 	bl	800cea0 <_sbrk_r>
 800cdb0:	4580      	cmp	r8, r0
 800cdb2:	d13a      	bne.n	800ce2a <_malloc_r+0xd2>
 800cdb4:	6821      	ldr	r1, [r4, #0]
 800cdb6:	3503      	adds	r5, #3
 800cdb8:	1a6d      	subs	r5, r5, r1
 800cdba:	f025 0503 	bic.w	r5, r5, #3
 800cdbe:	3508      	adds	r5, #8
 800cdc0:	2d0c      	cmp	r5, #12
 800cdc2:	bf38      	it	cc
 800cdc4:	250c      	movcc	r5, #12
 800cdc6:	4629      	mov	r1, r5
 800cdc8:	4638      	mov	r0, r7
 800cdca:	f7ff ffa5 	bl	800cd18 <sbrk_aligned>
 800cdce:	3001      	adds	r0, #1
 800cdd0:	d02b      	beq.n	800ce2a <_malloc_r+0xd2>
 800cdd2:	6823      	ldr	r3, [r4, #0]
 800cdd4:	442b      	add	r3, r5
 800cdd6:	6023      	str	r3, [r4, #0]
 800cdd8:	e00e      	b.n	800cdf8 <_malloc_r+0xa0>
 800cdda:	6822      	ldr	r2, [r4, #0]
 800cddc:	1b52      	subs	r2, r2, r5
 800cdde:	d41e      	bmi.n	800ce1e <_malloc_r+0xc6>
 800cde0:	2a0b      	cmp	r2, #11
 800cde2:	d916      	bls.n	800ce12 <_malloc_r+0xba>
 800cde4:	1961      	adds	r1, r4, r5
 800cde6:	42a3      	cmp	r3, r4
 800cde8:	6025      	str	r5, [r4, #0]
 800cdea:	bf18      	it	ne
 800cdec:	6059      	strne	r1, [r3, #4]
 800cdee:	6863      	ldr	r3, [r4, #4]
 800cdf0:	bf08      	it	eq
 800cdf2:	6031      	streq	r1, [r6, #0]
 800cdf4:	5162      	str	r2, [r4, r5]
 800cdf6:	604b      	str	r3, [r1, #4]
 800cdf8:	4638      	mov	r0, r7
 800cdfa:	f104 060b 	add.w	r6, r4, #11
 800cdfe:	f000 f865 	bl	800cecc <__malloc_unlock>
 800ce02:	f026 0607 	bic.w	r6, r6, #7
 800ce06:	1d23      	adds	r3, r4, #4
 800ce08:	1af2      	subs	r2, r6, r3
 800ce0a:	d0b6      	beq.n	800cd7a <_malloc_r+0x22>
 800ce0c:	1b9b      	subs	r3, r3, r6
 800ce0e:	50a3      	str	r3, [r4, r2]
 800ce10:	e7b3      	b.n	800cd7a <_malloc_r+0x22>
 800ce12:	6862      	ldr	r2, [r4, #4]
 800ce14:	42a3      	cmp	r3, r4
 800ce16:	bf0c      	ite	eq
 800ce18:	6032      	streq	r2, [r6, #0]
 800ce1a:	605a      	strne	r2, [r3, #4]
 800ce1c:	e7ec      	b.n	800cdf8 <_malloc_r+0xa0>
 800ce1e:	4623      	mov	r3, r4
 800ce20:	6864      	ldr	r4, [r4, #4]
 800ce22:	e7b2      	b.n	800cd8a <_malloc_r+0x32>
 800ce24:	4634      	mov	r4, r6
 800ce26:	6876      	ldr	r6, [r6, #4]
 800ce28:	e7b9      	b.n	800cd9e <_malloc_r+0x46>
 800ce2a:	230c      	movs	r3, #12
 800ce2c:	603b      	str	r3, [r7, #0]
 800ce2e:	4638      	mov	r0, r7
 800ce30:	f000 f84c 	bl	800cecc <__malloc_unlock>
 800ce34:	e7a1      	b.n	800cd7a <_malloc_r+0x22>
 800ce36:	6025      	str	r5, [r4, #0]
 800ce38:	e7de      	b.n	800cdf8 <_malloc_r+0xa0>
 800ce3a:	bf00      	nop
 800ce3c:	2400200c 	.word	0x2400200c

0800ce40 <_realloc_r>:
 800ce40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce44:	4680      	mov	r8, r0
 800ce46:	4614      	mov	r4, r2
 800ce48:	460e      	mov	r6, r1
 800ce4a:	b921      	cbnz	r1, 800ce56 <_realloc_r+0x16>
 800ce4c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ce50:	4611      	mov	r1, r2
 800ce52:	f7ff bf81 	b.w	800cd58 <_malloc_r>
 800ce56:	b92a      	cbnz	r2, 800ce64 <_realloc_r+0x24>
 800ce58:	f7ff ff12 	bl	800cc80 <_free_r>
 800ce5c:	4625      	mov	r5, r4
 800ce5e:	4628      	mov	r0, r5
 800ce60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce64:	f000 f838 	bl	800ced8 <_malloc_usable_size_r>
 800ce68:	4284      	cmp	r4, r0
 800ce6a:	4607      	mov	r7, r0
 800ce6c:	d802      	bhi.n	800ce74 <_realloc_r+0x34>
 800ce6e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ce72:	d812      	bhi.n	800ce9a <_realloc_r+0x5a>
 800ce74:	4621      	mov	r1, r4
 800ce76:	4640      	mov	r0, r8
 800ce78:	f7ff ff6e 	bl	800cd58 <_malloc_r>
 800ce7c:	4605      	mov	r5, r0
 800ce7e:	2800      	cmp	r0, #0
 800ce80:	d0ed      	beq.n	800ce5e <_realloc_r+0x1e>
 800ce82:	42bc      	cmp	r4, r7
 800ce84:	4622      	mov	r2, r4
 800ce86:	4631      	mov	r1, r6
 800ce88:	bf28      	it	cs
 800ce8a:	463a      	movcs	r2, r7
 800ce8c:	f7ff fed0 	bl	800cc30 <memcpy>
 800ce90:	4631      	mov	r1, r6
 800ce92:	4640      	mov	r0, r8
 800ce94:	f7ff fef4 	bl	800cc80 <_free_r>
 800ce98:	e7e1      	b.n	800ce5e <_realloc_r+0x1e>
 800ce9a:	4635      	mov	r5, r6
 800ce9c:	e7df      	b.n	800ce5e <_realloc_r+0x1e>
	...

0800cea0 <_sbrk_r>:
 800cea0:	b538      	push	{r3, r4, r5, lr}
 800cea2:	4d06      	ldr	r5, [pc, #24]	; (800cebc <_sbrk_r+0x1c>)
 800cea4:	2300      	movs	r3, #0
 800cea6:	4604      	mov	r4, r0
 800cea8:	4608      	mov	r0, r1
 800ceaa:	602b      	str	r3, [r5, #0]
 800ceac:	f7f4 fcfc 	bl	80018a8 <_sbrk>
 800ceb0:	1c43      	adds	r3, r0, #1
 800ceb2:	d102      	bne.n	800ceba <_sbrk_r+0x1a>
 800ceb4:	682b      	ldr	r3, [r5, #0]
 800ceb6:	b103      	cbz	r3, 800ceba <_sbrk_r+0x1a>
 800ceb8:	6023      	str	r3, [r4, #0]
 800ceba:	bd38      	pop	{r3, r4, r5, pc}
 800cebc:	24002014 	.word	0x24002014

0800cec0 <__malloc_lock>:
 800cec0:	4801      	ldr	r0, [pc, #4]	; (800cec8 <__malloc_lock+0x8>)
 800cec2:	f000 b811 	b.w	800cee8 <__retarget_lock_acquire_recursive>
 800cec6:	bf00      	nop
 800cec8:	24002018 	.word	0x24002018

0800cecc <__malloc_unlock>:
 800cecc:	4801      	ldr	r0, [pc, #4]	; (800ced4 <__malloc_unlock+0x8>)
 800cece:	f000 b80c 	b.w	800ceea <__retarget_lock_release_recursive>
 800ced2:	bf00      	nop
 800ced4:	24002018 	.word	0x24002018

0800ced8 <_malloc_usable_size_r>:
 800ced8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cedc:	1f18      	subs	r0, r3, #4
 800cede:	2b00      	cmp	r3, #0
 800cee0:	bfbc      	itt	lt
 800cee2:	580b      	ldrlt	r3, [r1, r0]
 800cee4:	18c0      	addlt	r0, r0, r3
 800cee6:	4770      	bx	lr

0800cee8 <__retarget_lock_acquire_recursive>:
 800cee8:	4770      	bx	lr

0800ceea <__retarget_lock_release_recursive>:
 800ceea:	4770      	bx	lr

0800ceec <expf>:
 800ceec:	ee10 2a10 	vmov	r2, s0
 800cef0:	f240 412a 	movw	r1, #1066	; 0x42a
 800cef4:	f3c2 530a 	ubfx	r3, r2, #20, #11
 800cef8:	428b      	cmp	r3, r1
 800cefa:	b430      	push	{r4, r5}
 800cefc:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 800cf00:	d92a      	bls.n	800cf58 <expf+0x6c>
 800cf02:	f512 0f00 	cmn.w	r2, #8388608	; 0x800000
 800cf06:	d058      	beq.n	800cfba <expf+0xce>
 800cf08:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 800cf0c:	d303      	bcc.n	800cf16 <expf+0x2a>
 800cf0e:	ee30 0a00 	vadd.f32	s0, s0, s0
 800cf12:	bc30      	pop	{r4, r5}
 800cf14:	4770      	bx	lr
 800cf16:	eddf 7a2a 	vldr	s15, [pc, #168]	; 800cfc0 <expf+0xd4>
 800cf1a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800cf1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf22:	dd03      	ble.n	800cf2c <expf+0x40>
 800cf24:	bc30      	pop	{r4, r5}
 800cf26:	2000      	movs	r0, #0
 800cf28:	f000 b92e 	b.w	800d188 <__math_oflowf>
 800cf2c:	eddf 7a25 	vldr	s15, [pc, #148]	; 800cfc4 <expf+0xd8>
 800cf30:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800cf34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf38:	d503      	bpl.n	800cf42 <expf+0x56>
 800cf3a:	bc30      	pop	{r4, r5}
 800cf3c:	2000      	movs	r0, #0
 800cf3e:	f000 b917 	b.w	800d170 <__math_uflowf>
 800cf42:	eddf 7a21 	vldr	s15, [pc, #132]	; 800cfc8 <expf+0xdc>
 800cf46:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800cf4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf4e:	d503      	bpl.n	800cf58 <expf+0x6c>
 800cf50:	bc30      	pop	{r4, r5}
 800cf52:	2000      	movs	r0, #0
 800cf54:	f000 b912 	b.w	800d17c <__math_may_uflowf>
 800cf58:	4b1c      	ldr	r3, [pc, #112]	; (800cfcc <expf+0xe0>)
 800cf5a:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800cf5e:	ed93 5b4a 	vldr	d5, [r3, #296]	; 0x128
 800cf62:	ed93 4b48 	vldr	d4, [r3, #288]	; 0x120
 800cf66:	eeb0 7b44 	vmov.f64	d7, d4
 800cf6a:	eea5 7b06 	vfma.f64	d7, d5, d6
 800cf6e:	ee17 0a10 	vmov	r0, s14
 800cf72:	ee37 7b44 	vsub.f64	d7, d7, d4
 800cf76:	f000 021f 	and.w	r2, r0, #31
 800cf7a:	ee95 7b06 	vfnms.f64	d7, d5, d6
 800cf7e:	ed93 5b4c 	vldr	d5, [r3, #304]	; 0x130
 800cf82:	ee27 4b07 	vmul.f64	d4, d7, d7
 800cf86:	ed93 6b4e 	vldr	d6, [r3, #312]	; 0x138
 800cf8a:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 800cf8e:	eea5 6b07 	vfma.f64	d6, d5, d7
 800cf92:	f853 4032 	ldr.w	r4, [r3, r2, lsl #3]
 800cf96:	684d      	ldr	r5, [r1, #4]
 800cf98:	ed93 5b50 	vldr	d5, [r3, #320]	; 0x140
 800cf9c:	2100      	movs	r1, #0
 800cf9e:	190a      	adds	r2, r1, r4
 800cfa0:	eb05 33c0 	add.w	r3, r5, r0, lsl #15
 800cfa4:	eea5 0b07 	vfma.f64	d0, d5, d7
 800cfa8:	ec43 2b17 	vmov	d7, r2, r3
 800cfac:	eea6 0b04 	vfma.f64	d0, d6, d4
 800cfb0:	ee20 0b07 	vmul.f64	d0, d0, d7
 800cfb4:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800cfb8:	e7ab      	b.n	800cf12 <expf+0x26>
 800cfba:	ed9f 0a05 	vldr	s0, [pc, #20]	; 800cfd0 <expf+0xe4>
 800cfbe:	e7a8      	b.n	800cf12 <expf+0x26>
 800cfc0:	42b17217 	.word	0x42b17217
 800cfc4:	c2cff1b4 	.word	0xc2cff1b4
 800cfc8:	c2ce8ecf 	.word	0xc2ce8ecf
 800cfcc:	0800d968 	.word	0x0800d968
 800cfd0:	00000000 	.word	0x00000000

0800cfd4 <logf>:
 800cfd4:	ee10 3a10 	vmov	r3, s0
 800cfd8:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800cfdc:	b410      	push	{r4}
 800cfde:	d055      	beq.n	800d08c <logf+0xb8>
 800cfe0:	f5a3 0200 	sub.w	r2, r3, #8388608	; 0x800000
 800cfe4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800cfe8:	d31a      	bcc.n	800d020 <logf+0x4c>
 800cfea:	005a      	lsls	r2, r3, #1
 800cfec:	d104      	bne.n	800cff8 <logf+0x24>
 800cfee:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cff2:	2001      	movs	r0, #1
 800cff4:	f000 b8ce 	b.w	800d194 <__math_divzerof>
 800cff8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800cffc:	d043      	beq.n	800d086 <logf+0xb2>
 800cffe:	2b00      	cmp	r3, #0
 800d000:	db02      	blt.n	800d008 <logf+0x34>
 800d002:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 800d006:	d303      	bcc.n	800d010 <logf+0x3c>
 800d008:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d00c:	f000 b8d2 	b.w	800d1b4 <__math_invalidf>
 800d010:	eddf 7a20 	vldr	s15, [pc, #128]	; 800d094 <logf+0xc0>
 800d014:	ee20 0a27 	vmul.f32	s0, s0, s15
 800d018:	ee10 3a10 	vmov	r3, s0
 800d01c:	f1a3 6338 	sub.w	r3, r3, #192937984	; 0xb800000
 800d020:	f103 4240 	add.w	r2, r3, #3221225472	; 0xc0000000
 800d024:	491c      	ldr	r1, [pc, #112]	; (800d098 <logf+0xc4>)
 800d026:	eebf 0b00 	vmov.f64	d0, #240	; 0xbf800000 -1.0
 800d02a:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 800d02e:	f3c2 40c3 	ubfx	r0, r2, #19, #4
 800d032:	0dd4      	lsrs	r4, r2, #23
 800d034:	eb01 1000 	add.w	r0, r1, r0, lsl #4
 800d038:	05e4      	lsls	r4, r4, #23
 800d03a:	ed90 6b00 	vldr	d6, [r0]
 800d03e:	1b1b      	subs	r3, r3, r4
 800d040:	ee07 3a90 	vmov	s15, r3
 800d044:	ed91 5b40 	vldr	d5, [r1, #256]	; 0x100
 800d048:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800d04c:	15d2      	asrs	r2, r2, #23
 800d04e:	eea6 0b07 	vfma.f64	d0, d6, d7
 800d052:	ed90 6b02 	vldr	d6, [r0, #8]
 800d056:	ee20 4b00 	vmul.f64	d4, d0, d0
 800d05a:	ee07 2a90 	vmov	s15, r2
 800d05e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800d062:	eea7 6b05 	vfma.f64	d6, d7, d5
 800d066:	ed91 5b44 	vldr	d5, [r1, #272]	; 0x110
 800d06a:	ed91 7b46 	vldr	d7, [r1, #280]	; 0x118
 800d06e:	eea5 7b00 	vfma.f64	d7, d5, d0
 800d072:	ed91 5b42 	vldr	d5, [r1, #264]	; 0x108
 800d076:	ee30 0b06 	vadd.f64	d0, d0, d6
 800d07a:	eea5 7b04 	vfma.f64	d7, d5, d4
 800d07e:	eea4 0b07 	vfma.f64	d0, d4, d7
 800d082:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800d086:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d08a:	4770      	bx	lr
 800d08c:	ed9f 0a03 	vldr	s0, [pc, #12]	; 800d09c <logf+0xc8>
 800d090:	e7f9      	b.n	800d086 <logf+0xb2>
 800d092:	bf00      	nop
 800d094:	4b000000 	.word	0x4b000000
 800d098:	0800dab0 	.word	0x0800dab0
 800d09c:	00000000 	.word	0x00000000

0800d0a0 <tanhf>:
 800d0a0:	b510      	push	{r4, lr}
 800d0a2:	ee10 4a10 	vmov	r4, s0
 800d0a6:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800d0aa:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800d0ae:	ed2d 8b02 	vpush	{d8}
 800d0b2:	eeb0 7a40 	vmov.f32	s14, s0
 800d0b6:	db0c      	blt.n	800d0d2 <tanhf+0x32>
 800d0b8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800d0bc:	eec0 7a07 	vdiv.f32	s15, s0, s14
 800d0c0:	2c00      	cmp	r4, #0
 800d0c2:	bfac      	ite	ge
 800d0c4:	ee37 0a80 	vaddge.f32	s0, s15, s0
 800d0c8:	ee37 0ac0 	vsublt.f32	s0, s15, s0
 800d0cc:	ecbd 8b02 	vpop	{d8}
 800d0d0:	bd10      	pop	{r4, pc}
 800d0d2:	4a1b      	ldr	r2, [pc, #108]	; (800d140 <tanhf+0xa0>)
 800d0d4:	4293      	cmp	r3, r2
 800d0d6:	dc30      	bgt.n	800d13a <tanhf+0x9a>
 800d0d8:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
 800d0dc:	da06      	bge.n	800d0ec <tanhf+0x4c>
 800d0de:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800d0e2:	ee70 7a27 	vadd.f32	s15, s0, s15
 800d0e6:	ee27 0a80 	vmul.f32	s0, s15, s0
 800d0ea:	e7ef      	b.n	800d0cc <tanhf+0x2c>
 800d0ec:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800d0f0:	eeb0 8a00 	vmov.f32	s16, #0	; 0x40000000  2.0
 800d0f4:	db12      	blt.n	800d11c <tanhf+0x7c>
 800d0f6:	f000 f987 	bl	800d408 <fabsf>
 800d0fa:	ee30 0a00 	vadd.f32	s0, s0, s0
 800d0fe:	f000 f869 	bl	800d1d4 <expm1f>
 800d102:	ee30 0a08 	vadd.f32	s0, s0, s16
 800d106:	eec8 7a00 	vdiv.f32	s15, s16, s0
 800d10a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800d10e:	ee30 0a67 	vsub.f32	s0, s0, s15
 800d112:	2c00      	cmp	r4, #0
 800d114:	bfb8      	it	lt
 800d116:	eeb1 0a40 	vneglt.f32	s0, s0
 800d11a:	e7d7      	b.n	800d0cc <tanhf+0x2c>
 800d11c:	f000 f974 	bl	800d408 <fabsf>
 800d120:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
 800d124:	ee20 0a27 	vmul.f32	s0, s0, s15
 800d128:	f000 f854 	bl	800d1d4 <expm1f>
 800d12c:	ee70 7a08 	vadd.f32	s15, s0, s16
 800d130:	eeb1 7a40 	vneg.f32	s14, s0
 800d134:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800d138:	e7eb      	b.n	800d112 <tanhf+0x72>
 800d13a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800d13e:	e7e8      	b.n	800d112 <tanhf+0x72>
 800d140:	41afffff 	.word	0x41afffff

0800d144 <with_errnof>:
 800d144:	b513      	push	{r0, r1, r4, lr}
 800d146:	4604      	mov	r4, r0
 800d148:	ed8d 0a01 	vstr	s0, [sp, #4]
 800d14c:	f7ff fa1a 	bl	800c584 <__errno>
 800d150:	ed9d 0a01 	vldr	s0, [sp, #4]
 800d154:	6004      	str	r4, [r0, #0]
 800d156:	b002      	add	sp, #8
 800d158:	bd10      	pop	{r4, pc}

0800d15a <xflowf>:
 800d15a:	b130      	cbz	r0, 800d16a <xflowf+0x10>
 800d15c:	eef1 7a40 	vneg.f32	s15, s0
 800d160:	ee27 0a80 	vmul.f32	s0, s15, s0
 800d164:	2022      	movs	r0, #34	; 0x22
 800d166:	f7ff bfed 	b.w	800d144 <with_errnof>
 800d16a:	eef0 7a40 	vmov.f32	s15, s0
 800d16e:	e7f7      	b.n	800d160 <xflowf+0x6>

0800d170 <__math_uflowf>:
 800d170:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800d178 <__math_uflowf+0x8>
 800d174:	f7ff bff1 	b.w	800d15a <xflowf>
 800d178:	10000000 	.word	0x10000000

0800d17c <__math_may_uflowf>:
 800d17c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800d184 <__math_may_uflowf+0x8>
 800d180:	f7ff bfeb 	b.w	800d15a <xflowf>
 800d184:	1a200000 	.word	0x1a200000

0800d188 <__math_oflowf>:
 800d188:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800d190 <__math_oflowf+0x8>
 800d18c:	f7ff bfe5 	b.w	800d15a <xflowf>
 800d190:	70000000 	.word	0x70000000

0800d194 <__math_divzerof>:
 800d194:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800d198:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800d19c:	2800      	cmp	r0, #0
 800d19e:	fe40 7a27 	vseleq.f32	s15, s0, s15
 800d1a2:	ed9f 0a03 	vldr	s0, [pc, #12]	; 800d1b0 <__math_divzerof+0x1c>
 800d1a6:	2022      	movs	r0, #34	; 0x22
 800d1a8:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800d1ac:	f7ff bfca 	b.w	800d144 <with_errnof>
 800d1b0:	00000000 	.word	0x00000000

0800d1b4 <__math_invalidf>:
 800d1b4:	eef0 7a40 	vmov.f32	s15, s0
 800d1b8:	ee30 7a40 	vsub.f32	s14, s0, s0
 800d1bc:	eef4 7a67 	vcmp.f32	s15, s15
 800d1c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d1c4:	ee87 0a07 	vdiv.f32	s0, s14, s14
 800d1c8:	d602      	bvs.n	800d1d0 <__math_invalidf+0x1c>
 800d1ca:	2021      	movs	r0, #33	; 0x21
 800d1cc:	f7ff bfba 	b.w	800d144 <with_errnof>
 800d1d0:	4770      	bx	lr
	...

0800d1d4 <expm1f>:
 800d1d4:	ee10 2a10 	vmov	r2, s0
 800d1d8:	497c      	ldr	r1, [pc, #496]	; (800d3cc <expm1f+0x1f8>)
 800d1da:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800d1de:	428b      	cmp	r3, r1
 800d1e0:	d920      	bls.n	800d224 <expm1f+0x50>
 800d1e2:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800d1e6:	d902      	bls.n	800d1ee <expm1f+0x1a>
 800d1e8:	ee30 0a00 	vadd.f32	s0, s0, s0
 800d1ec:	4770      	bx	lr
 800d1ee:	d105      	bne.n	800d1fc <expm1f+0x28>
 800d1f0:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800d1f4:	2a00      	cmp	r2, #0
 800d1f6:	fe20 0a27 	vselge.f32	s0, s0, s15
 800d1fa:	4770      	bx	lr
 800d1fc:	2a00      	cmp	r2, #0
 800d1fe:	db05      	blt.n	800d20c <expm1f+0x38>
 800d200:	4973      	ldr	r1, [pc, #460]	; (800d3d0 <expm1f+0x1fc>)
 800d202:	428b      	cmp	r3, r1
 800d204:	d95c      	bls.n	800d2c0 <expm1f+0xec>
 800d206:	2000      	movs	r0, #0
 800d208:	f7ff bfbe 	b.w	800d188 <__math_oflowf>
 800d20c:	eddf 7a71 	vldr	s15, [pc, #452]	; 800d3d4 <expm1f+0x200>
 800d210:	ee70 7a27 	vadd.f32	s15, s0, s15
 800d214:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d21c:	d550      	bpl.n	800d2c0 <expm1f+0xec>
 800d21e:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800d222:	4770      	bx	lr
 800d224:	496c      	ldr	r1, [pc, #432]	; (800d3d8 <expm1f+0x204>)
 800d226:	428b      	cmp	r3, r1
 800d228:	d966      	bls.n	800d2f8 <expm1f+0x124>
 800d22a:	496c      	ldr	r1, [pc, #432]	; (800d3dc <expm1f+0x208>)
 800d22c:	428b      	cmp	r3, r1
 800d22e:	d847      	bhi.n	800d2c0 <expm1f+0xec>
 800d230:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 800d3e0 <expm1f+0x20c>
 800d234:	2a00      	cmp	r2, #0
 800d236:	bfa7      	ittee	ge
 800d238:	ee30 7a47 	vsubge.f32	s14, s0, s14
 800d23c:	eddf 7a69 	vldrge	s15, [pc, #420]	; 800d3e4 <expm1f+0x210>
 800d240:	eddf 7a69 	vldrlt	s15, [pc, #420]	; 800d3e8 <expm1f+0x214>
 800d244:	ee30 7a07 	vaddlt.f32	s14, s0, s14
 800d248:	bfac      	ite	ge
 800d24a:	2301      	movge	r3, #1
 800d24c:	f04f 33ff 	movlt.w	r3, #4294967295
 800d250:	ee37 0a67 	vsub.f32	s0, s14, s15
 800d254:	ee37 7a40 	vsub.f32	s14, s14, s0
 800d258:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d25c:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 800d260:	ee20 4a25 	vmul.f32	s8, s0, s11
 800d264:	ed9f 6a61 	vldr	s12, [pc, #388]	; 800d3ec <expm1f+0x218>
 800d268:	eddf 6a61 	vldr	s13, [pc, #388]	; 800d3f0 <expm1f+0x21c>
 800d26c:	ed9f 5a61 	vldr	s10, [pc, #388]	; 800d3f4 <expm1f+0x220>
 800d270:	ee20 7a04 	vmul.f32	s14, s0, s8
 800d274:	eef0 4a08 	vmov.f32	s9, #8	; 0x40400000  3.0
 800d278:	eee7 6a06 	vfma.f32	s13, s14, s12
 800d27c:	ed9f 6a5e 	vldr	s12, [pc, #376]	; 800d3f8 <expm1f+0x224>
 800d280:	eea6 6a87 	vfma.f32	s12, s13, s14
 800d284:	eddf 6a5d 	vldr	s13, [pc, #372]	; 800d3fc <expm1f+0x228>
 800d288:	eee6 6a07 	vfma.f32	s13, s12, s14
 800d28c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800d290:	eea6 5a87 	vfma.f32	s10, s13, s14
 800d294:	eef0 6a46 	vmov.f32	s13, s12
 800d298:	eee5 6a07 	vfma.f32	s13, s10, s14
 800d29c:	eee4 4a66 	vfms.f32	s9, s8, s13
 800d2a0:	eeb1 4a08 	vmov.f32	s8, #24	; 0x40c00000  6.0
 800d2a4:	eea0 4a64 	vfms.f32	s8, s0, s9
 800d2a8:	ee36 5ae4 	vsub.f32	s10, s13, s9
 800d2ac:	eec5 6a04 	vdiv.f32	s13, s10, s8
 800d2b0:	ee66 6a87 	vmul.f32	s13, s13, s14
 800d2b4:	bb73      	cbnz	r3, 800d314 <expm1f+0x140>
 800d2b6:	eef0 7a47 	vmov.f32	s15, s14
 800d2ba:	eed0 7a26 	vfnms.f32	s15, s0, s13
 800d2be:	e024      	b.n	800d30a <expm1f+0x136>
 800d2c0:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800d2c4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d2c8:	2a00      	cmp	r2, #0
 800d2ca:	fe67 7a87 	vselge.f32	s15, s15, s14
 800d2ce:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 800d400 <expm1f+0x22c>
 800d2d2:	eddf 6a43 	vldr	s13, [pc, #268]	; 800d3e0 <expm1f+0x20c>
 800d2d6:	ee40 7a07 	vmla.f32	s15, s0, s14
 800d2da:	eeb0 7a40 	vmov.f32	s14, s0
 800d2de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d2e2:	ee17 3a90 	vmov	r3, s15
 800d2e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d2ea:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800d2ee:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d3e4 <expm1f+0x210>
 800d2f2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800d2f6:	e7ab      	b.n	800d250 <expm1f+0x7c>
 800d2f8:	f1b3 5f4c 	cmp.w	r3, #855638016	; 0x33000000
 800d2fc:	d208      	bcs.n	800d310 <expm1f+0x13c>
 800d2fe:	eddf 7a41 	vldr	s15, [pc, #260]	; 800d404 <expm1f+0x230>
 800d302:	ee70 7a27 	vadd.f32	s15, s0, s15
 800d306:	ee77 7ae7 	vsub.f32	s15, s15, s15
 800d30a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800d30e:	4770      	bx	lr
 800d310:	2300      	movs	r3, #0
 800d312:	e7a3      	b.n	800d25c <expm1f+0x88>
 800d314:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800d318:	1c5a      	adds	r2, r3, #1
 800d31a:	eed6 7a80 	vfnms.f32	s15, s13, s0
 800d31e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d322:	d106      	bne.n	800d332 <expm1f+0x15e>
 800d324:	ee70 7a67 	vsub.f32	s15, s0, s15
 800d328:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 800d32c:	eea7 0aa5 	vfma.f32	s0, s15, s11
 800d330:	4770      	bx	lr
 800d332:	2b01      	cmp	r3, #1
 800d334:	d118      	bne.n	800d368 <expm1f+0x194>
 800d336:	eebd 7a00 	vmov.f32	s14, #208	; 0xbe800000 -0.250
 800d33a:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800d33e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d342:	bf5b      	ittet	pl
 800d344:	ee70 7a67 	vsubpl.f32	s15, s0, s15
 800d348:	eeb0 7a00 	vmovpl.f32	s14, #0	; 0x40000000  2.0
 800d34c:	ee30 0a25 	vaddmi.f32	s0, s0, s11
 800d350:	eea7 6a87 	vfmapl.f32	s12, s15, s14
 800d354:	bf43      	ittte	mi
 800d356:	ee77 7ac0 	vsubmi.f32	s15, s15, s0
 800d35a:	eeb8 0a00 	vmovmi.f32	s0, #128	; 0xc0000000 -2.0
 800d35e:	ee27 0a80 	vmulmi.f32	s0, s15, s0
 800d362:	eeb0 0a46 	vmovpl.f32	s0, s12
 800d366:	4770      	bx	lr
 800d368:	1c5a      	adds	r2, r3, #1
 800d36a:	2a39      	cmp	r2, #57	; 0x39
 800d36c:	ea4f 51c3 	mov.w	r1, r3, lsl #23
 800d370:	d90b      	bls.n	800d38a <expm1f+0x1b6>
 800d372:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800d376:	ee36 0a40 	vsub.f32	s0, s12, s0
 800d37a:	ee10 3a10 	vmov	r3, s0
 800d37e:	440b      	add	r3, r1
 800d380:	ee00 3a10 	vmov	s0, r3
 800d384:	ee30 0a46 	vsub.f32	s0, s0, s12
 800d388:	4770      	bx	lr
 800d38a:	2b16      	cmp	r3, #22
 800d38c:	dc11      	bgt.n	800d3b2 <expm1f+0x1de>
 800d38e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d392:	fa42 f303 	asr.w	r3, r2, r3
 800d396:	f1c3 537e 	rsb	r3, r3, #1065353216	; 0x3f800000
 800d39a:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800d39e:	ee07 3a90 	vmov	s15, r3
 800d3a2:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800d3a6:	ee10 3a10 	vmov	r3, s0
 800d3aa:	440b      	add	r3, r1
 800d3ac:	ee00 3a10 	vmov	s0, r3
 800d3b0:	4770      	bx	lr
 800d3b2:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 800d3b6:	05db      	lsls	r3, r3, #23
 800d3b8:	ee07 3a10 	vmov	s14, r3
 800d3bc:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d3c0:	ee70 7a67 	vsub.f32	s15, s0, s15
 800d3c4:	ee37 0a86 	vadd.f32	s0, s15, s12
 800d3c8:	e7ed      	b.n	800d3a6 <expm1f+0x1d2>
 800d3ca:	bf00      	nop
 800d3cc:	4195b843 	.word	0x4195b843
 800d3d0:	42b17217 	.word	0x42b17217
 800d3d4:	0da24260 	.word	0x0da24260
 800d3d8:	3eb17218 	.word	0x3eb17218
 800d3dc:	3f851591 	.word	0x3f851591
 800d3e0:	3f317180 	.word	0x3f317180
 800d3e4:	3717f7d1 	.word	0x3717f7d1
 800d3e8:	b717f7d1 	.word	0xb717f7d1
 800d3ec:	b457edbb 	.word	0xb457edbb
 800d3f0:	36867e54 	.word	0x36867e54
 800d3f4:	bd088889 	.word	0xbd088889
 800d3f8:	b8a670cd 	.word	0xb8a670cd
 800d3fc:	3ad00d01 	.word	0x3ad00d01
 800d400:	3fb8aa3b 	.word	0x3fb8aa3b
 800d404:	7149f2ca 	.word	0x7149f2ca

0800d408 <fabsf>:
 800d408:	ee10 3a10 	vmov	r3, s0
 800d40c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d410:	ee00 3a10 	vmov	s0, r3
 800d414:	4770      	bx	lr
	...

0800d418 <_init>:
 800d418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d41a:	bf00      	nop
 800d41c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d41e:	bc08      	pop	{r3}
 800d420:	469e      	mov	lr, r3
 800d422:	4770      	bx	lr

0800d424 <_fini>:
 800d424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d426:	bf00      	nop
 800d428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d42a:	bc08      	pop	{r3}
 800d42c:	469e      	mov	lr, r3
 800d42e:	4770      	bx	lr
